From me14d059 @end|ng |rom @m@||@||tm@@c@|n  Tue Aug  1 10:18:20 2023
From: me14d059 @end|ng |rom @m@||@||tm@@c@|n (Durga Prasad G me14d059)
Date: Tue, 1 Aug 2023 13:48:20 +0530
Subject: [Rd] Concerns with SVD -- and the Matrix Exponential
In-Reply-To: <25780.65318.292886.397047@stat.math.ethz.ch>
References: <CACSKKm=DcN2zy+0QmmU39gSStX2YU4K-MEJaOWcoK6XANswc5Q@mail.gmail.com>
 <c21e618c-bbbb-42b9-2adb-56df0fb32673@gmail.com>
 <25780.65318.292886.397047@stat.math.ethz.ch>
Message-ID: <CACSKKmnn7HPcaQ3Dr1OZx1_Sy32wrkV0BW=dUjuazFeT577hMA@mail.gmail.com>

Hi Martin, Thank you for your reply. The response and the links provided by
you helped to learn more. But I am not able to obtain the simple even
powers of a matrix: one simple case is the square of a matrix. The square
of the matrix using direct matrix multiplication operations and svd (A = U
D V') are different. Kindly check the attached file for the complete
explanation. I want to know which technique was used in building the svd in
R-Software. I want to discuss about svd if you schedule a meeting.

Thanks and Regards
Durga Prasad


On Mon, Jul 17, 2023 at 2:13?PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> J C Nash
> >>>>>     on Sun, 16 Jul 2023 13:30:57 -0400 writes:
>
>     > Better check your definitions of SVD -- there are several
>     > forms, but all I am aware of (and I wrote a couple of the
>     > codes in the early 1970s for the SVD) have positive
>     > singular values.
>
>     > JN
>
> Indeed.
>
> More generally, the decomposition     A = U D V'
> (with diagonal D and orthogonal U,V)
> is not at all unique.
>
> There are not only many possible different choices of the sign
> of the diagonal entries, but also the *ordering* of the singular values
> is non unique.
> That's why R and 'Lapack', the world-standard for
>   computer/numerical linear algebra, and others I think,
> make the decomposition unique by requiring
> non-negative entries in D and have them *sorted* decreasingly.
>
> The latter is what the help page   help(svd)  always said
> (and you should have studied that before raising such concerns).
>
> -----------------------------------------------------------------
>
> To your second point (in the document), the matrix exponential:
> It is less known, but still has been known among experts for
> many years (and I think even among students of a class on
> numerical linear algebra), that there are quite a
> few mathematically equivalent ways to compute the matrix exponential,
> *BUT* that most of these may be numerically disastrous, for several
> different reasons depending on the case.
>
> This has been known for close to 50 years now:
>
>  Cleve Moler and Charles Van Loan  (1978)
>  Nineteen Dubious Ways to Compute the Exponential of a Matrix
>  SIAM Review Vol. 20(4)
>  https://doi.org/10.1137/1020098
>
> Where as that publication had been important and much cited at
> the time, the same authors (known world experts in the field)
> wrote a review of that review 25 years later which I think (and
> hope) is even more widely cited  (in R's man/*.Rd syntax) :
>
>   Cleve Moler and Charles Van Loan (2003)
>   Nineteen dubious ways to compute the exponential of a matrix,
>   twenty-five years later. \emph{SIAM Review} \bold{45}, 1, 3--49.
>   \doi{10.1137/S00361445024180}
> i.e.  https://doi.org/10.1137/S00361445024180
>
> It is BTW also cited on the Wikipedia page on the matrix
> exponential:
>
>
> ==> For this reason, Professor Douglas Bates, the initial
> creator of R's Matrix package (which comes with R) has added the
> Matrix exponential very early to the package:
> ------------------------------------------------------------------------
> r461 | bates | 2005-01-29
>
> Add expm function
> ------------------------------------------------------------------------
>
> Later, I've fixed an "infamous" bug :
> ------------------------------------------------------------------------
> r2127 | maechler | 2008-03-07
>
> fix the infamous expm() bug also in "Matrix" (duh!)
> ------------------------------------------------------------------------
>
> Then, Vincent Goulet and Christophe Dutang wanted to provide more
> versions of expm() and we collaborated, also providing expm()
> for complex matrices and created the CRAN package {expm}
>   --> https://CRAN.R-project.org/package=expm
> which already provided half a dozen different expm algorithms.
>
> But research and algorithms did not stop there.  In 2008, Higham
> and collaborators even improved on the best known algorithms
> and I had the chance to co-supervise a smart Master's student
> Michael Stadelmann to implement Higham's algorithm and we even
> allowed to tweak it {with optional arguments} as that was seen
> to be beneficial sometimes.
>
> See e.g.,
> https://www.rdocumentation.org/packages/expm/versions/0.999-7/topics/expm
>
>
>     > On 2023-07-16 02:01, Durga Prasad G me14d059 wrote:
>     >> Respected Development Team,
>     >>
>     >> This is Durga Prasad reaching out to you regarding an
>     >> issue/concern related to Singular Value Decomposition SVD
>     >> in R software package. I am attaching a detailed
>     >> attachment with this letter which depicts real issues
>     >> with SVD in R.
>     >>
>     >> To reach the concern the expressions for the exponential
>     >> of a matrix using SVD and projection tensors are obtained
>     >> from series expansion. However, numerical inconsistency
>     >> is observed between the exponential of matrix obtained
>     >> using the function(svd()) used in R software.
>     >>
>     >> However, it is observed that most of the researchers
>     >> fraternity is engaged in utilising R software for their
>     >> research purposes and to the extent of my understanding
>     >> such an error in SVD in R software might raise the
>     >> concern about authenticity of the simulation results
>     >> produced and published by researchers across the globe.
>     >>
>     >> Further, I am very sure that the R software development
>     >> team is well versed with the happening and they have any
>     >> specific and resilient reasons for doing so. I would
>     >> request you kindly, to guide me through the concern.
>     >>
>     >> Thank you very much.
>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Square.pdf
Type: application/pdf
Size: 79039 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20230801/8c106736/attachment.pdf>

From AHL27 @end|ng |rom p|tt@edu  Tue Aug  1 13:21:43 2023
From: AHL27 @end|ng |rom p|tt@edu (Lakshman, Aidan H)
Date: Tue, 1 Aug 2023 11:21:43 +0000
Subject: [Rd] Concerns with SVD -- and the Matrix Exponential
In-Reply-To: <CACSKKmnn7HPcaQ3Dr1OZx1_Sy32wrkV0BW=dUjuazFeT577hMA@mail.gmail.com>
References: <CACSKKm=DcN2zy+0QmmU39gSStX2YU4K-MEJaOWcoK6XANswc5Q@mail.gmail.com>
 <c21e618c-bbbb-42b9-2adb-56df0fb32673@gmail.com>
 <25780.65318.292886.397047@stat.math.ethz.ch>
 <CACSKKmnn7HPcaQ3Dr1OZx1_Sy32wrkV0BW=dUjuazFeT577hMA@mail.gmail.com>
Message-ID: <BL0PR04MB4706B46C78D72321F088CB0CD90AA@BL0PR04MB4706.namprd04.prod.outlook.com>

Hi Durga,

There?s an error in your calculations here. You mention that for the SVD of a symmetric matrix, we must have U=V, but this is not a correct statement. The unitary matrices are only equivalent if the matrix A is positive semidefinite.

In your example, you provide the matrix {{1,4},{4,1}}, which has eigenvalues 5 and -3. This is not positive semidefinite, and thus there's no requirement that the unitary matrices be equivalent.

If you verify your example with something like wolfram alpha, you?ll find that R?s solution is correct.

-Aidan

-----------------------

Aidan Lakshman (he/him)<https://www.ahl27.com/>

Doctoral Fellow, Wright Lab<https://www.wrightlabscience.com/>

University of Pittsburgh School of Medicine

Department of Biomedical Informatics

ahl27 at pitt.edu

(724) 612-9940



________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Durga Prasad G me14d059 <me14d059 at smail.iitm.ac.in>
Sent: Tuesday, August 1, 2023 4:18:20 AM
To: Martin Maechler <maechler at stat.math.ethz.ch>; r-devel at r-project.org <r-devel at r-project.org>; profjcnash at gmail.com <profjcnash at gmail.com>
Subject: Re: [Rd] Concerns with SVD -- and the Matrix Exponential

Hi Martin, Thank you for your reply. The response and the links provided by
you helped to learn more. But I am not able to obtain the simple even
powers of a matrix: one simple case is the square of a matrix. The square
of the matrix using direct matrix multiplication operations and svd (A = U
D V') are different. Kindly check the attached file for the complete
explanation. I want to know which technique was used in building the svd in
R-Software. I want to discuss about svd if you schedule a meeting.

Thanks and Regards
Durga Prasad


On Mon, Jul 17, 2023 at 2:13?PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> J C Nash
> >>>>>     on Sun, 16 Jul 2023 13:30:57 -0400 writes:
>
>     > Better check your definitions of SVD -- there are several
>     > forms, but all I am aware of (and I wrote a couple of the
>     > codes in the early 1970s for the SVD) have positive
>     > singular values.
>
>     > JN
>
> Indeed.
>
> More generally, the decomposition     A = U D V'
> (with diagonal D and orthogonal U,V)
> is not at all unique.
>
> There are not only many possible different choices of the sign
> of the diagonal entries, but also the *ordering* of the singular values
> is non unique.
> That's why R and 'Lapack', the world-standard for
>   computer/numerical linear algebra, and others I think,
> make the decomposition unique by requiring
> non-negative entries in D and have them *sorted* decreasingly.
>
> The latter is what the help page   help(svd)  always said
> (and you should have studied that before raising such concerns).
>
> -----------------------------------------------------------------
>
> To your second point (in the document), the matrix exponential:
> It is less known, but still has been known among experts for
> many years (and I think even among students of a class on
> numerical linear algebra), that there are quite a
> few mathematically equivalent ways to compute the matrix exponential,
> *BUT* that most of these may be numerically disastrous, for several
> different reasons depending on the case.
>
> This has been known for close to 50 years now:
>
>  Cleve Moler and Charles Van Loan  (1978)
>  Nineteen Dubious Ways to Compute the Exponential of a Matrix
>  SIAM Review Vol. 20(4)
>  https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdoi.org%2F10.1137%2F1020098&data=05%7C01%7Cahl27%40pitt.edu%7C8575b77db32345ca544b08db927ceae0%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638264837816871329%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=Y4mlFL%2FggLKd7FoIoY62esiFGUwukRG0YmELsJj7nd0%3D&reserved=0<https://doi.org/10.1137/1020098>
>
> Where as that publication had been important and much cited at
> the time, the same authors (known world experts in the field)
> wrote a review of that review 25 years later which I think (and
> hope) is even more widely cited  (in R's man/*.Rd syntax) :
>
>   Cleve Moler and Charles Van Loan (2003)
>   Nineteen dubious ways to compute the exponential of a matrix,
>   twenty-five years later. \emph{SIAM Review} \bold{45}, 1, 3--49.
>   \doi{10.1137/S00361445024180}
> i.e.  https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdoi.org%2F10.1137%2FS00361445024180&data=05%7C01%7Cahl27%40pitt.edu%7C8575b77db32345ca544b08db927ceae0%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638264837817183809%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=5%2FlssUGC6q7SUy0PY7gZCqWi0%2BXbNwZD0FaAgIcOWdY%3D&reserved=0<https://doi.org/10.1137/S00361445024180>
>
> It is BTW also cited on the Wikipedia page on the matrix
> exponential:
>
>
> ==> For this reason, Professor Douglas Bates, the initial
> creator of R's Matrix package (which comes with R) has added the
> Matrix exponential very early to the package:
> ------------------------------------------------------------------------
> r461 | bates | 2005-01-29
>
> Add expm function
> ------------------------------------------------------------------------
>
> Later, I've fixed an "infamous" bug :
> ------------------------------------------------------------------------
> r2127 | maechler | 2008-03-07
>
> fix the infamous expm() bug also in "Matrix" (duh!)
> ------------------------------------------------------------------------
>
> Then, Vincent Goulet and Christophe Dutang wanted to provide more
> versions of expm() and we collaborated, also providing expm()
> for complex matrices and created the CRAN package {expm}
>   --> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcran.r-project.org%2Fpackage%3Dexpm&data=05%7C01%7Cahl27%40pitt.edu%7C8575b77db32345ca544b08db927ceae0%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638264837817183809%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=LlAzmeRZd5tNqAgTuYTTSsSakWEj85%2B%2F%2FP%2FM0DnZNLk%3D&reserved=0<https://cran.r-project.org/package=expm>
> which already provided half a dozen different expm algorithms.
>
> But research and algorithms did not stop there.  In 2008, Higham
> and collaborators even improved on the best known algorithms
> and I had the chance to co-supervise a smart Master's student
> Michael Stadelmann to implement Higham's algorithm and we even
> allowed to tweak it {with optional arguments} as that was seen
> to be beneficial sometimes.
>
> See e.g.,
> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.rdocumentation.org%2Fpackages%2Fexpm%2Fversions%2F0.999-7%2Ftopics%2Fexpm&data=05%7C01%7Cahl27%40pitt.edu%7C8575b77db32345ca544b08db927ceae0%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638264837817340048%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=ZrT%2FYvklccqLCORBMf6nGop5o3n7O2thkknG1UAS2Gc%3D&reserved=0<https://www.rdocumentation.org/packages/expm/versions/0.999-7/topics/expm>
>
>
>     > On 2023-07-16 02:01, Durga Prasad G me14d059 wrote:
>     >> Respected Development Team,
>     >>
>     >> This is Durga Prasad reaching out to you regarding an
>     >> issue/concern related to Singular Value Decomposition SVD
>     >> in R software package. I am attaching a detailed
>     >> attachment with this letter which depicts real issues
>     >> with SVD in R.
>     >>
>     >> To reach the concern the expressions for the exponential
>     >> of a matrix using SVD and projection tensors are obtained
>     >> from series expansion. However, numerical inconsistency
>     >> is observed between the exponential of matrix obtained
>     >> using the function(svd()) used in R software.
>     >>
>     >> However, it is observed that most of the researchers
>     >> fraternity is engaged in utilising R software for their
>     >> research purposes and to the extent of my understanding
>     >> such an error in SVD in R software might raise the
>     >> concern about authenticity of the simulation results
>     >> produced and published by researchers across the globe.
>     >>
>     >> Further, I am very sure that the R software development
>     >> team is well versed with the happening and they have any
>     >> specific and resilient reasons for doing so. I would
>     >> request you kindly, to guide me through the concern.
>     >>
>     >> Thank you very much.
>

	[[alternative HTML version deleted]]


From @@m|tuom|v@@r@ @end|ng |rom hotm@||@com  Thu Aug  3 22:21:33 2023
From: @@m|tuom|v@@r@ @end|ng |rom hotm@||@com (Sami Tuomivaara)
Date: Thu, 3 Aug 2023 20:21:33 +0000
Subject: [Rd] feature request: optim() iteration of functions that return
 multiple values
Message-ID: <PAXP189MB1928AA39727C26A434F8D3FFD608A@PAXP189MB1928.EURP189.PROD.OUTLOOK.COM>

Dear all,

I have used optim a lot in contexts where it would useful to be able to iterate function myfun that, in addition to the primary objective to be minimized ('minimize.me'), could return other values such as alternative metrics of the minimization, informative intermediate values from the calculations, etc.

myfun  <- function()
{
...
return(list(minimize.me = minimize.me, R2 = R2, pval = pval, etc.))
}

During the iteration, optim could utilize just the first value from the myfun return list; all the other values calculated and returned by myfun could be ignored by optim.
After convergence, the other return values of myfun could be finally extracted and appended into the optim return value (which is a list) as additional entry e.g.: $aux <- list(R2, pval, etc.), (without 'minimize.me' as it is already returned as $value).

The usual ways for accessing optim return values, e.g., $par, $value, etc. are not affected.  Computational cost may not be prohibitive either.  Is this feasible to consider?


	[[alternative HTML version deleted]]


From e@ @end|ng |rom enr|co@chum@nn@net  Fri Aug  4 10:22:03 2023
From: e@ @end|ng |rom enr|co@chum@nn@net (Enrico Schumann)
Date: Fri, 04 Aug 2023 10:22:03 +0200
Subject: [Rd] 
 feature request: optim() iteration of functions that return
 multiple values
In-Reply-To: <PAXP189MB1928AA39727C26A434F8D3FFD608A@PAXP189MB1928.EURP189.PROD.OUTLOOK.COM>
 (Sami Tuomivaara's message of "Thu, 3 Aug 2023 20:21:33 +0000")
References: <PAXP189MB1928AA39727C26A434F8D3FFD608A@PAXP189MB1928.EURP189.PROD.OUTLOOK.COM>
Message-ID: <87cz03nro4.fsf@enricoschumann.net>

On Thu, 03 Aug 2023, Sami Tuomivaara writes:

> Dear all,
>
> I have used optim a lot in contexts where it would
> useful to be able to iterate function myfun that, in
> addition to the primary objective to be minimized
> ('minimize.me'), could return other values such as
> alternative metrics of the minimization, informative
> intermediate values from the calculations, etc.
>
> myfun  <- function()
> {
> ...
> return(list(minimize.me = minimize.me, R2 = R2, pval = pval, etc.))
> }
>
> During the iteration, optim could utilize just the first value from the myfun return list; all the other values calculated and returned by myfun could be ignored by optim.
> After convergence, the other return values of myfun
> could be finally extracted and appended into the optim
> return value (which is a list) as additional entry
> e.g.: $aux <- list(R2, pval, etc.), (without
> 'minimize.me' as it is already returned as $value).
>
> The usual ways for accessing optim return values, e.g.,
> $par, $value, etc. are not affected.  Computational
> cost may not be prohibitive either.  Is this feasible
> to consider?
>

If you only wish to store additional information, you could do
so with an environment, without changing optim.  For instance,
like so (using the first example from ?optim):

    data <- new.env()
    data$i <- 0
    data$fun.value <- numeric(1000)
    
    fr <- function(x, data) {   ## Rosenbrock Banana function
        x1 <- x[1]
        x2 <- x[2]
        ans <- 100 * (x2 - x1 * x1)^2 + (1 - x1)^2
        data$i <- data$i + 1
        data$fun.value[data$i] <- ans
        ans
    }
    optim(c(-1.2,1), fr, data = data)
    ## $par
    ## [1] 1.000260 1.000506
    ## 
    ## $value
    ## [1] 8.825241e-08
    ## 
    ## $counts
    ## function gradient 
    ##      195       NA 
    ## 
    ## ....

    data$i
    ## 195
    
    plot(data$fun.value[1:data$i])




-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Aug  4 11:03:41 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 4 Aug 2023 05:03:41 -0400
Subject: [Rd] 
 feature request: optim() iteration of functions that return
 multiple values
In-Reply-To: <PAXP189MB1928AA39727C26A434F8D3FFD608A@PAXP189MB1928.EURP189.PROD.OUTLOOK.COM>
References: <PAXP189MB1928AA39727C26A434F8D3FFD608A@PAXP189MB1928.EURP189.PROD.OUTLOOK.COM>
Message-ID: <76447425-d6e6-372d-6590-9c670e980905@gmail.com>

Enrico gave you a workaround that stores the extra values in an environment.

Another possible workaround is an optional argument to myfun() that asks 
it to return more information, e.g.

     fr <- function(x, data, extraInfo = FALSE) {   ## Rosenbrock Banana 
function
         x1 <- x[1]
         x2 <- x[2]
         ans <- 100 * (x2 - x1 * x1)^2 + (1 - x1)^2
         if (extraInfo) {
           list(ans=ans, extras = ...)
         else
           ans
     }

Then after optim() finishes, call fr() again with parameters as returned 
by optim, and extraInfo = TRUE.

Duncan Murdoch

On 03/08/2023 4:21 p.m., Sami Tuomivaara wrote:
> Dear all,
> 
> I have used optim a lot in contexts where it would useful to be able to iterate function myfun that, in addition to the primary objective to be minimized ('minimize.me'), could return other values such as alternative metrics of the minimization, informative intermediate values from the calculations, etc.
> 
> myfun  <- function()
> {
> ...
> return(list(minimize.me = minimize.me, R2 = R2, pval = pval, etc.))
> }
> 
> During the iteration, optim could utilize just the first value from the myfun return list; all the other values calculated and returned by myfun could be ignored by optim.
> After convergence, the other return values of myfun could be finally extracted and appended into the optim return value (which is a list) as additional entry e.g.: $aux <- list(R2, pval, etc.), (without 'minimize.me' as it is already returned as $value).
> 
> The usual ways for accessing optim return values, e.g., $par, $value, etc. are not affected.  Computational cost may not be prohibitive either.  Is this feasible to consider?
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


