From zhengda1936 at gmail.com  Sun Feb  1 00:30:03 2015
From: zhengda1936 at gmail.com (Zheng Da)
Date: Sat, 31 Jan 2015 18:30:03 -0500
Subject: [Rd] invoking R function in C++ in parallel
Message-ID: <CAFLer83nzRs1cV7Cpu7VWUEDrqaSC7kjrUBbMUHzaFAp97DQGA@mail.gmail.com>

Hello,

I'm writing an R extension in C++. In the extension, I want to invoke
an R function directly and it works when I use Rcpp in the serial
code. But what I really want is to invoke the R function in parallel
with openmp. When I do so, I got segmentation fault.

I remember someone said that R isn't thread-safe. I think it's also
understandable because an R function also has environment variables.

My question is:
Can we make a copy of an R function (including its environment
variables) for each thread?
Are there any ways to invoke an R function in C/C++ in multiple threads safely?

Thanks,
Da


From edd at debian.org  Sun Feb  1 01:05:43 2015
From: edd at debian.org (Dirk Eddelbuettel)
Date: Sat, 31 Jan 2015 18:05:43 -0600
Subject: [Rd] invoking R function in C++ in parallel
In-Reply-To: <CAFLer83nzRs1cV7Cpu7VWUEDrqaSC7kjrUBbMUHzaFAp97DQGA@mail.gmail.com>
References: <CAFLer83nzRs1cV7Cpu7VWUEDrqaSC7kjrUBbMUHzaFAp97DQGA@mail.gmail.com>
Message-ID: <21709.28119.188963.170738@max.nulle.part>


On 31 January 2015 at 18:30, Zheng Da wrote:
| I'm writing an R extension in C++. In the extension, I want to invoke
| an R function directly and it works when I use Rcpp in the serial
| code. But what I really want is to invoke the R function in parallel
| with openmp. When I do so, I got segmentation fault.
| 
| I remember someone said that R isn't thread-safe. I think it's also
| understandable because an R function also has environment variables.
| 
| My question is:
| Can we make a copy of an R function (including its environment
| variables) for each thread?

Nope. And you pretty much just explained why.

You can 
 
 - either work in something like OpenMP and run in multiple threads that
   remain /completely/ shielded from R, ie no R calls, and not even R data
   types as you cannot trigger gc() calls from different threads

 - or work via, say, the parallel or Rmpi packages in multiple _processes_
   each of which could call its corresponding R interpreter (but that is
   still slower).

There are some examples for OpenMP at the Rcpp Gallery: http://gallery.rcpp.org.
You may also enjoy the RcppParallel package.  

But none of this overcomes your main hurdle: no, you cannot call R from
different threads.

| Are there any ways to invoke an R function in C/C++ in multiple threads safely?

No.  It is a design constraint.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From csardi.gabor at gmail.com  Sun Feb  1 01:29:48 2015
From: csardi.gabor at gmail.com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 31 Jan 2015 19:29:48 -0500
Subject: [Rd] invoking R function in C++ in parallel
In-Reply-To: <21709.28119.188963.170738@max.nulle.part>
References: <CAFLer83nzRs1cV7Cpu7VWUEDrqaSC7kjrUBbMUHzaFAp97DQGA@mail.gmail.com>
	<21709.28119.188963.170738@max.nulle.part>
Message-ID: <CABtg=K=oxOB_w8-baCvS5SN+OkMR0k0KHGjwLT5HeTnDZqhrNw@mail.gmail.com>

On Sat, Jan 31, 2015 at 7:05 PM, Dirk Eddelbuettel <edd at debian.org> wrote:
[...]

> - either work in something like OpenMP and run in multiple threads that
>    remain /completely/ shielded from R, ie no R calls, and not even R data
>    types as you cannot trigger gc() calls from different threads
>

I think you can use R objects, as long as you don't call R functions on
them (not even from R's C api, although some of them are currently fine)
and consider them as read-only. E.g. if you have a numeric vector, you can
do
double *cvec = REAL(vec);
and then use cvec in your thread(s).

This is pretty restrictive, but could be enough in some cases.

Gabor

[...]

	[[alternative HTML version deleted]]


From edd at debian.org  Sun Feb  1 02:32:21 2015
From: edd at debian.org (Dirk Eddelbuettel)
Date: Sat, 31 Jan 2015 19:32:21 -0600
Subject: [Rd] invoking R function in C++ in parallel
In-Reply-To: <CABtg=K=oxOB_w8-baCvS5SN+OkMR0k0KHGjwLT5HeTnDZqhrNw@mail.gmail.com>
References: <CAFLer83nzRs1cV7Cpu7VWUEDrqaSC7kjrUBbMUHzaFAp97DQGA@mail.gmail.com>
	<21709.28119.188963.170738@max.nulle.part>
	<CABtg=K=oxOB_w8-baCvS5SN+OkMR0k0KHGjwLT5HeTnDZqhrNw@mail.gmail.com>
Message-ID: <21709.33317.869936.212965@max.nulle.part>


On 31 January 2015 at 19:29, G?bor Cs?rdi wrote:
| On Sat, Jan 31, 2015 at 7:05 PM, Dirk Eddelbuettel <edd at debian.org> wrote:
| [...]
| 
|     - either work in something like OpenMP and run in multiple threads that
|     ? ?remain /completely/ shielded from R, ie no R calls, and not even R data
|     ? ?types as you cannot trigger gc() calls from different threads
| 
| 
| I think you can use R objects, as long as you don't call R functions on them
| (not even from R's C api, although some of them are currently fine) and
| consider them as read-only. E.g. if you have a numeric vector, you can do?
| double *cvec = REAL(vec);
| and then use cvec in your thread(s).

You and I are saying the same thing here: you call it read-only access; I
called ot "do not use R types". We recommend the same approach in other
places: instantiate std::vector<double> from RcppVector, don't use R calls.

My recommendation is to make it pretty plain: do not call R functions. Use
other types. There are equivalent read-only constructors for some relevant
data types.

Recall that OP, in the parts you chose not to quote, asked to call back to R
in a multithreaded way. And we both say 'nope' here.

All this has come up before on rcpp-devel and SO.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From zhengda1936 at gmail.com  Sun Feb  1 03:27:22 2015
From: zhengda1936 at gmail.com (Zheng Da)
Date: Sat, 31 Jan 2015 21:27:22 -0500
Subject: [Rd] invoking R function in C++ in parallel
In-Reply-To: <21709.33317.869936.212965@max.nulle.part>
References: <CAFLer83nzRs1cV7Cpu7VWUEDrqaSC7kjrUBbMUHzaFAp97DQGA@mail.gmail.com>
	<21709.28119.188963.170738@max.nulle.part>
	<CABtg=K=oxOB_w8-baCvS5SN+OkMR0k0KHGjwLT5HeTnDZqhrNw@mail.gmail.com>
	<21709.33317.869936.212965@max.nulle.part>
Message-ID: <CAFLer83PE1wSfsygS6dY2UXDv+X0DwiPV42ifQ=v6FA0F0EzHw@mail.gmail.com>

Thank you both.
I think I have got the answer I need.
I'll need to turn to another direction to search for my solution.

Best,
Da

On Sat, Jan 31, 2015 at 8:32 PM, Dirk Eddelbuettel <edd at debian.org> wrote:
>
> On 31 January 2015 at 19:29, G?bor Cs?rdi wrote:
> | On Sat, Jan 31, 2015 at 7:05 PM, Dirk Eddelbuettel <edd at debian.org> wrote:
> | [...]
> |
> |     - either work in something like OpenMP and run in multiple threads that
> |        remain /completely/ shielded from R, ie no R calls, and not even R data
> |        types as you cannot trigger gc() calls from different threads
> |
> |
> | I think you can use R objects, as long as you don't call R functions on them
> | (not even from R's C api, although some of them are currently fine) and
> | consider them as read-only. E.g. if you have a numeric vector, you can do
> | double *cvec = REAL(vec);
> | and then use cvec in your thread(s).
>
> You and I are saying the same thing here: you call it read-only access; I
> called ot "do not use R types". We recommend the same approach in other
> places: instantiate std::vector<double> from RcppVector, don't use R calls.
>
> My recommendation is to make it pretty plain: do not call R functions. Use
> other types. There are equivalent read-only constructors for some relevant
> data types.
>
> Recall that OP, in the parts you chose not to quote, asked to call back to R
> in a multithreaded way. And we both say 'nope' here.
>
> All this has come up before on rcpp-devel and SO.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ripley at stats.ox.ac.uk  Sun Feb  1 08:53:45 2015
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sun, 01 Feb 2015 07:53:45 +0000
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <1422713746884-4702571.post@n4.nabble.com>
References: <1422713746884-4702571.post@n4.nabble.com>
Message-ID: <54CDDB89.5090406@stats.ox.ac.uk>

On 31/01/2015 14:15, eigen wrote:
> Hi,
>
> I got an error message in my program saying
>
> "Error in eigen(gene_intersection.kernel) :
>    error code 1 from Lapack routine 'dsyevr'
> Execution halted".
>
> As you see, I was trying to compute the eigenvalues of a matrix but got this
> error. Is there anyone who knows what this error means and how I can fix it?

The help page for eigen says

Source:

      By default ?eigen? uses the LAPACK routines ?DSYEVR?, ?DGEEV?,
      ?ZHEEV? and ?ZGEEV?

      LAPACK is from <URL: http://www.netlib.org/lapack> and its guide
      is listed in the references.

You need to consult that guide and/or the source code: all I saw at a 
cursory look was

*> \param[out] INFO
*> \verbatim
*>          INFO is INTEGER
*>          = 0:  successful exit
*>          < 0:  if INFO = -i, the i-th argument had an illegal value
*>          > 0:  Internal error
*> \endverbatim

so it means 'internal error'.

> Theoretically the eigenvalues should be nonnegative, if it helps.
>
> Thank you!

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From ligges at statistik.tu-dortmund.de  Sun Feb  1 09:26:28 2015
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Sun, 01 Feb 2015 09:26:28 +0100
Subject: [Rd] libcurl support and curlGetHeaders warning message in R
 CMD check
In-Reply-To: <54C7FE8B.3020709@skyeome.net>
References: <54C7FE8B.3020709@skyeome.net>
Message-ID: <54CDE334.4090509@statistik.tu-dortmund.de>



On 27.01.2015 22:09, Skye Bender-deMoll wrote:
> Dear R devel,
>
> Is libcurl support required to run R.devel, or is it optional?
>
> I'm compiling R.devel on an older Debian machine  that only has libcurl
> version 7.21.0
>
> The R news file says
>
> "
> Sun, 25 Jan 2015
> CHANGES IN R-devel NEW FEATURES
>
>      Optional use of ?libcurl? (version 7.28.0 from Oct 2012 or later)
> for Internet access (including on Windows):
>
> ...
>
> CHANGES IN R-devel UTILITIES
>
>      ?R CMD check --as-cran? checks existence and accessibility of URLs
> in the ?DESCRIPTION? file and in the help files.
> "
>
> Which seems to suggest libcurl support is optional.   The build process
> seems to correctly detect that I have an old version of libcurl
>
> checking if libcurl version >= 7.28.0... no
>
>  > capabilities('libcurl')
> libcurl
>    FALSE
>
> But when I try to build any packages with R.devel (for pre-release
> testing) I get lots and lots of Notes/errors like:
>
>
> Found the following (possibly) invalid URLs:
>    URL: http://statnet.org/
>      From: DESCRIPTION
>      Status: Error
>      Message: curlGetHeaders is not supported on this platform
>
> Maybe this url check should first verify that libcurl is available?
>
>
> If it is the case that libcurl is required for R CMD check --as-cran,
> I'll try to follow up with R debian for how to get appropriate version.
> (seems like libcurl 7.28 is not yet included in a stable Debian release?)
>
> Thanks for your help,

Is this a recent version of R-devel? Which svn? The check is rather new 
and may have changed the days before you wrote.

Best,
Uwe Ligges



> best,
>   -skye
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hb at biostat.ucsf.edu  Sun Feb  1 20:13:24 2015
From: hb at biostat.ucsf.edu (Henrik Bengtsson)
Date: Sun, 1 Feb 2015 11:13:24 -0800
Subject: [Rd] Output to "raw console" rather than stdout/stderr?
Message-ID: <CAFDcVCSdMuxxFbOpw9-hHdRpUjXcvvoJPEo3QoFd9_9GGHqtMA@mail.gmail.com>

In R, there's readline(), which is great because you can prompt the user, e.g.

    ans <- readline("Would you like to install Pandoc? [y/N]: ")

without having to worry the message is intercepted by
capture.output(), sink() or similar (which is used by dynamic report
generators among other things).  The message will always reach the
user.  (You can use sink(..., type="output") and sink(...,
type="message") to confirm this.)

Does anyone know of a similar function that outputs the message to
"raw console" *without* pausing for user interrupt?  This far I came
up with:

cmsg <- function(...) {
  if (.Platform$OS.type == "windows") {
    pager <- "console"
  } else {
    pager <- "cat"
  }

  ## Write output to a temporary file
  fh <- tempfile()
  on.exit(file.remove(fh))
  cat(..., file=fh)

  ## Display file such that it cannot be captured/intercepted by R.
  file.show(fh, pager=pager)
}

but if a less ad hoc approach exists, I'd like to hear about it.

Thank you,

Henrik


From jeroenooms at gmail.com  Sun Feb  1 22:39:37 2015
From: jeroenooms at gmail.com (Jeroen Ooms)
Date: Sun, 1 Feb 2015 13:39:37 -0800
Subject: [Rd] Output to "raw console" rather than stdout/stderr?
In-Reply-To: <CAFDcVCSdMuxxFbOpw9-hHdRpUjXcvvoJPEo3QoFd9_9GGHqtMA@mail.gmail.com>
References: <CAFDcVCSdMuxxFbOpw9-hHdRpUjXcvvoJPEo3QoFd9_9GGHqtMA@mail.gmail.com>
Message-ID: <CABFfbXsoFdPapBq65Hp8dsx_yR_tUV3MQDKqaaKnxWgNebPA=g@mail.gmail.com>

Why do you need this? The sink system is often specifically needed to
capture such messages and display them to the user, for example in an
embedded environment. Many applications would not work when you bypass
the stdout/stderr set by the system. For example tools like knitr or
rapache need to capture stdout to get the output and insert it in a
report or webpage.

If you really want to, perhaps you could use something like
system("echo hello") to send a message to stdout via another process.


On Sun, Feb 1, 2015 at 11:13 AM, Henrik Bengtsson <hb at biostat.ucsf.edu> wrote:
> In R, there's readline(), which is great because you can prompt the user, e.g.
>
>     ans <- readline("Would you like to install Pandoc? [y/N]: ")
>
> without having to worry the message is intercepted by
> capture.output(), sink() or similar (which is used by dynamic report
> generators among other things).  The message will always reach the
> user.  (You can use sink(..., type="output") and sink(...,
> type="message") to confirm this.)
>
> Does anyone know of a similar function that outputs the message to
> "raw console" *without* pausing for user interrupt?  This far I came
> up with:
>
> cmsg <- function(...) {
>   if (.Platform$OS.type == "windows") {
>     pager <- "console"
>   } else {
>     pager <- "cat"
>   }
>
>   ## Write output to a temporary file
>   fh <- tempfile()
>   on.exit(file.remove(fh))
>   cat(..., file=fh)
>
>   ## Display file such that it cannot be captured/intercepted by R.
>   file.show(fh, pager=pager)
> }
>
> but if a less ad hoc approach exists, I'd like to hear about it.
>
> Thank you,
>
> Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hb at biostat.ucsf.edu  Mon Feb  2 00:23:19 2015
From: hb at biostat.ucsf.edu (Henrik Bengtsson)
Date: Sun, 1 Feb 2015 15:23:19 -0800
Subject: [Rd] Output to "raw console" rather than stdout/stderr?
In-Reply-To: <CABFfbXsoFdPapBq65Hp8dsx_yR_tUV3MQDKqaaKnxWgNebPA=g@mail.gmail.com>
References: <CAFDcVCSdMuxxFbOpw9-hHdRpUjXcvvoJPEo3QoFd9_9GGHqtMA@mail.gmail.com>
	<CABFfbXsoFdPapBq65Hp8dsx_yR_tUV3MQDKqaaKnxWgNebPA=g@mail.gmail.com>
Message-ID: <CAFDcVCSk=E1onUJpevKqeaLLCUNtM1C9Y7SN8xS8jeqG2nkYAQ@mail.gmail.com>

On Sun, Feb 1, 2015 at 1:39 PM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> Why do you need this? The sink system is often specifically needed to
> capture such messages and display them to the user, for example in an
> embedded environment. Many applications would not work when you bypass
> the stdout/stderr set by the system. For example tools like knitr or
> rapache need to capture stdout to get the output and insert it in a
> report or webpage.

It's mostly so I can send partial "prompt" messages to the user and at
the very end use readline() to query for a decision.   The strategy of
outputting "now and then" is used by install.packages() et al., but
unfortunately it outputs to stdout, e.g.

> options(menu.graphics=FALSE)
> bfr <- capture.output(install.packages("R.methodsS3", repos="@CRAN@"))
Installing package into 'C:/Users/hb/R/win-library/3.2'
(as 'lib' is unspecified)
Selection: 1
Selection: 1
Selection: 1
trying URL 'http://cran.rstudio.com/bin/windows/contrib/3.2/R.methodsS3_1.6.1.zi
p'
Content type 'application/zip' length 55873 bytes (54 KB)
opened URL
downloaded 54 KB

> str(bfr)
 chr [1:169] "--- Please select a CRAN mirror for use in this session ---" ...

Note how the user is prompted "Selection: " without any clue on what
to answer.  It would of course be better if those message would have
been sent to stderr, but you could imagine that also stderr is
captured by report generators.  In that case, these "prompt" message
would be hidden from the user.  These kind of "prompt" messages are of
no use to the final report and similar.

To summarize: I would like a third stream "prompt" dedicated for
message to the "interactive" user, in addition to the current "output"
(stdout) and "message" (stderr) ones.  This "prompt" stream would be
to the terminal what the GUI prompts/dialogs are in windowed
environments.   I think of this as readline() already sends to the
"prompt" stream (unless that is just an bug/undocumented features that
I'm misinterpret).

>
> If you really want to, perhaps you could use something like
> system("echo hello") to send a message to stdout via another process.

Yes, that's the spirit of my cmsg() below.

Hope this makes more sense now

Henrik

>
>
> On Sun, Feb 1, 2015 at 11:13 AM, Henrik Bengtsson <hb at biostat.ucsf.edu> wrote:
>> In R, there's readline(), which is great because you can prompt the user, e.g.
>>
>>     ans <- readline("Would you like to install Pandoc? [y/N]: ")
>>
>> without having to worry the message is intercepted by
>> capture.output(), sink() or similar (which is used by dynamic report
>> generators among other things).  The message will always reach the
>> user.  (You can use sink(..., type="output") and sink(...,
>> type="message") to confirm this.)
>>
>> Does anyone know of a similar function that outputs the message to
>> "raw console" *without* pausing for user interrupt?  This far I came
>> up with:
>>
>> cmsg <- function(...) {
>>   if (.Platform$OS.type == "windows") {
>>     pager <- "console"
>>   } else {
>>     pager <- "cat"
>>   }
>>
>>   ## Write output to a temporary file
>>   fh <- tempfile()
>>   on.exit(file.remove(fh))
>>   cat(..., file=fh)
>>
>>   ## Display file such that it cannot be captured/intercepted by R.
>>   file.show(fh, pager=pager)
>> }
>>
>> but if a less ad hoc approach exists, I'd like to hear about it.
>>
>> Thank you,
>>
>> Henrik
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From htl10 at users.sourceforge.net  Mon Feb  2 03:58:26 2015
From: htl10 at users.sourceforge.net (Hin-Tak Leung)
Date: Mon, 2 Feb 2015 02:58:26 +0000
Subject: [Rd] updated R-cairo bridge,
	official R-3.1.*-mavericks.pkg crippled, snpMatrix 1.19.0.20
Message-ID: <1422845906.67936.YahooMailBasic@web172303.mail.ir2.yahoo.com>

The windows replacement is 
R-library-grDevices-libs-winCairo_20150122.zip
in
http://sourceforge.net/projects/outmodedbonsai/files/R/

The cairo replacements are just two bundles, windows or OS X - containing
replacements for R 2.15.3, 3.0.3 and 3.1.2. You just extract the relevant one
for your R version.

The windows builds of R packages snpStats x.x.x.8 and snpMatrix 1.19.0.20
were done with link-time optimization. (uploaded last weekend). I'd be interested
if anybody wants to compare the speed of the 1000 genome code
vs 1.19.0.19 on windows. LTO on linux is 10+% faster.

There is a new bug fix in GLM related stuff in snpStats x.x.x.8 . I'd be interested
in anybody supplies an example to demonstrate snpStats 1.17.0 being buggy also.

I haven't decided what to do with link-time optimization of the OS X build -
Xcode/Clang  is the default on OS X though gcc is more familiar 
(https://gcc.gnu.org/ml/gcc-testresults/2014-11/msg00268.html) so I probably
will do both and see which one is better at some point.

The package uploads (12 in all, 2 packages x 3 R versions x 2 builds)
are now divided by R versions - those in unversion'ed directories are still for R 2.x. 

--------------------------------------------
On Wed, 21/1/15, Hin-Tak Leung <htl10 at users.sourceforge.net> wrote:

 R.framework-Versions-Resources-library-grDevices-libs-cairo_20150120.tgz
 in
 http://sourceforge.net/projects/outmodedbonsai/files/R/
 are dropped in replacement to the cairo.so's in the official
 R binaries (2.15.3, 3.0.3, 3.1.2).

 updated to cairo-1.12.18 and freetype-2.5.4. The official R
 binaries' were
 built with early freetype 2.4.x and cairo 1.11(?) and had a
 number of issues
 with some windows and mac system fonts; also the one in the
 official binaries
 were built with a freetype that's built differently from
 apple's and
 and therefore can interfere with other GUI applications' use
 of dfonts on Mac OS X. (that
 unfortunately means the most common typefaces like Time and
 Helvetica!).

 While doing that, I found that the official
 R-3.1.*-mavericks.pkg are crippled, compared
 to R-3.1.*-snowleopard.pkg. They have tiff functionality
 missing. Here are the sizes of
 the official binaries':

...

 The next thing I am doing is building the replacement for
 the cairo.dll's in the offical R windows binaries.
 Just watch out in the next few days in the same directory.

 ---------- not R-devel related below this point ------

 I have finished with snpMatrix 1.19.0.20 5 days ago. Some of
 you may notice the documentations
 are already out - 19 months about 400 commit since
 1.19.0.19, it comes with a snpStats compatibility
 mode; when that mode is on, about 1/3 of its internals are
 swapped to their snpStats-equivalent
 versions. Initially synchronized to snpStats x.x.x.8 - and I
 already mentioned that it is because of another
 GLM related bug, found on top of x.x.x.7. Sigh.

 snpMatrix 1.19.0.20 and snpStats x.x.x.8 are now really just
 waiting for me to finish with the cairo
 stuff (for R 3.1.x). The impatient can just read the new
 vignettes.


From lawrence.michael at gene.com  Mon Feb  2 04:23:06 2015
From: lawrence.michael at gene.com (Michael Lawrence)
Date: Sun, 1 Feb 2015 19:23:06 -0800
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <21702.11046.319866.816795@stat.math.ethz.ch>
References: <54C35EB5.3060402@gmail.com>
	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>
	<21702.11046.319866.816795@stat.math.ethz.ch>
Message-ID: <CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>

I've implemented the proposed changes in R-devel. Minimally tested, so
please try it. It should delegate to r/cbind2 when there is at least one S4
argument and S3 dispatch fails (so you'll probably want to add an S3 method
for your class to introduce a conflict, otherwise it will dispatch to
cbind.data.frame if one of the args is a data.frame). There may no longer
be a need for cBind() and rBind().

Michael

On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
maechler at lynne.stat.math.ethz.ch> wrote:

> >>>>> Michael Lawrence <lawrence.michael at gene.com>
> >>>>>     on Sat, 24 Jan 2015 06:39:37 -0800 writes:
>
>     > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau
>     > <mario.annau at gmail.com> wrote:
>     >> Hi all, this question has already been posted on
>     >> stackoverflow, however without success, see also
>     >>
> http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
> .
>     >>
>     >> I have written a package using S4 classes and would like
>     >> to use the functions rbind, cbind with these defined
>     >> classes.
>     >>
>     >> Since it does not seem to be possible to define rbind and
>     >> cbind directly as S4 methods (see ?cBind) I defined
>     >> rbind2 and cbind2 instead:
>     >>
>
>     > This needs some clarification. It certainly is possible to
>     > define cbind and rbind methods. The BiocGenerics package
>     > defines generics for those and many methods are defined by
>     > e.g. S4Vectors, IRanges, etc.  The issue is that dispatch
>     > on "..." is singular, i.e., you can only specify one class
>     > that all args in "..." must share (potentially through
>     > inheritance).
>
>     > Thus, trying to combine objects from a
>     > different hierarchy (or non-S4 objects) will not
>     > work.
>
> Yes, indeed, that's the drawback
>
> I've been there almost surely before everyone else, with the
> Matrix package...
> and I have been the author of
>     cbind2(), rbind2(), and of course, of  cBind(), and rBind().
>
> At the time when I introduced these, the above possibility of
> writing S4 methods for  '...'  where not yet part of R.
>
>     > This has not been a huge problem for us in
>     > practice. For example, we have a DataFrame object that
>     > mimics data.frame. To cbind a data.frame with a DataFrame,
>     > the user can just call the DataFrame()
>     > constructor. rbind() between different data structures is
>     > much less common.
>
> well... yes and no.  Think of using the Matrix package, maybe
> with another package that defines another generalized matrix class...
> It would be nice if things worked automatically / perfectly there.
>
>     > The cBind and rBind functions in Matrix (and the r/cbind
>     > that get installed by bind_activation, the code is shared)
>     > work by recursing, dropping the first argument until two
>     > are left, and then combining with r/cbind2(). The Biobase
>     > package uses a similar strategy to mimic c() via its
>     > non-standard combine() generic. The nice thing about the
>     > combine() approach is the user entry point and the generic
>     > are the same, instead of having methods on rbind2() and
>     > the user calling rBind().
>
>     > I would argue that bind_activation(TRUE) should be
>     > discouraged,
>
> Yes, you are right Michael; it should be discouraged at least to
> be run in a *package*.
> One could think of its use by an explicit user call.
>
>     > because it replaces the native rbind and
>     > cbind with recursive variants that are going to cause
>     > problems, performance and otherwise. This is why it is
>     > hidden. Perhaps a reasonable compromise would be for the
>     > native cbind and rbind to check whether any arguments are
>     > S4 and if so, resort to recursion. Recursion does seem to
>     > be a clean way to implement "type promotion", i.e., to
>     > answer the question "which type should the result be when
>     > faced with mixed-type args?".
>
> Exactly.  That has been my idea at the time ..
> ((yes, I'm also the author of the  bind_activation()
>   "(mis)functionality".))
>
>     > Hopefully others have better ideas.
>
> that would be great.
>
> And even if not, it would be great if we could implement your
> idea
>     > Perhaps a reasonable compromise would be for the
>     > native cbind and rbind to check whether any arguments are
>     > S4 and if so, resort to recursion.
>
> without a noticable performance penalty in the case of no S4
> arguments.
>
> Martin
>
>
>     > Michael
>
>     >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
>     >> function(x, y) { # Do stuff ...  })
>     >>
>     >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
>     >> function(x, y) { # Do stuff ...  })
>     >>
>     >> >From ?cbind2 I learned that these functions need to be
>     >> activated using methods:::bind_activation to replace
>     >> rbind and cbind from base.
>     >>
>     >> I included the call in the package file R/zzz.R using the
>     >> .onLoad function:
>     >>
>     >> .onLoad <- function(...) { # Bind activation of cbind(2)
>     >> and rbind(2) for S4 classes
>     >> methods:::bind_activation(TRUE) } This works as
>     >> expected. However, running R CMD check I am now getting
>     >> the following NOTE since I am using an unexported
>     >> function in methods:
>     >>
>     >> * checking dependencies in R code ... NOTE Unexported
>     >> object imported by a ':::' call:
>     >> 'methods:::bind_activation' See the note in ?`:::` about
>     >> the use of this operator.  How can I get rid of the NOTE
>     >> and what is the proper way to define the methods cbind
>     >> and rbind for S4 classes in a package?
>     >>
>     >> Best, mario
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From skyebend at skyeome.net  Mon Feb  2 05:28:23 2015
From: skyebend at skyeome.net (Skye Bender-deMoll)
Date: Sun, 01 Feb 2015 20:28:23 -0800
Subject: [Rd] libcurl support and curlGetHeaders warning message in R
 CMD check
In-Reply-To: <54CDE334.4090509@statistik.tu-dortmund.de>
References: <54C7FE8B.3020709@skyeome.net>
	<54CDE334.4090509@statistik.tu-dortmund.de>
Message-ID: <54CEFCE7.1080106@skyeome.net>

Dear Uwe, CRAN.

We test against R.devel trunk nightly.  I just re-ran R CMD check again 
with R Under development (unstable) (2015-01-31 r67686), and now I just 
get the message:

"Checking URLs requires 'libcurl' support in the R build"

without the list of errors for every single URL.  So seems like the 
issue has been resolved!

thanks,
  -skye


On 02/01/2015 12:26 AM, Uwe Ligges wrote:
>
>
> On 27.01.2015 22:09, Skye Bender-deMoll wrote:
>> Dear R devel,
>>
>> Is libcurl support required to run R.devel, or is it optional?
>>
>> I'm compiling R.devel on an older Debian machine  that only has libcurl
>> version 7.21.0
>>
>> The R news file says
>>
>> "
>> Sun, 25 Jan 2015
>> CHANGES IN R-devel NEW FEATURES
>>
>>       Optional use of ???libcurl??? (version 7.28.0 from Oct 2012 or later)
>> for Internet access (including on Windows):
>>
>> ...
>>
>> CHANGES IN R-devel UTILITIES
>>
>>       ???R CMD check --as-cran??? checks existence and accessibility of URLs
>> in the ???DESCRIPTION??? file and in the help files.
>> "
>>
>> Which seems to suggest libcurl support is optional.   The build process
>> seems to correctly detect that I have an old version of libcurl
>>
>> checking if libcurl version >= 7.28.0... no
>>
>>   > capabilities('libcurl')
>> libcurl
>>     FALSE
>>
>> But when I try to build any packages with R.devel (for pre-release
>> testing) I get lots and lots of Notes/errors like:
>>
>>
>> Found the following (possibly) invalid URLs:
>>     URL: http://statnet.org/
>>       From: DESCRIPTION
>>       Status: Error
>>       Message: curlGetHeaders is not supported on this platform
>>
>> Maybe this url check should first verify that libcurl is available?
>>
>>
>> If it is the case that libcurl is required for R CMD check --as-cran,
>> I'll try to follow up with R debian for how to get appropriate version.
>> (seems like libcurl 7.28 is not yet included in a stable Debian release?)
>>
>> Thanks for your help,
>
> Is this a recent version of R-devel? Which svn? The check is rather new
> and may have changed the days before you wrote.
>
> Best,
> Uwe Ligges
>
>
>
>> best,
>>    -skye
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From maechler at lynne.stat.math.ethz.ch  Mon Feb  2 12:32:48 2015
From: maechler at lynne.stat.math.ethz.ch (Martin Maechler)
Date: Mon, 2 Feb 2015 12:32:48 +0100
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>
References: <54C35EB5.3060402@gmail.com>
	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>
	<21702.11046.319866.816795@stat.math.ethz.ch>
	<CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>
Message-ID: <21711.24672.449563.817210@stat.math.ethz.ch>

>>>>> Michael Lawrence <lawrence.michael at gene.com>
>>>>>     on Sun, 1 Feb 2015 19:23:06 -0800 writes:

    > I've implemented the proposed changes in
    > R-devel. Minimally tested, so please try it. It should
    > delegate to r/cbind2 when there is at least one S4
    > argument and S3 dispatch fails (so you'll probably want to
    > add an S3 method for your class to introduce a conflict,
    > otherwise it will dispatch to cbind.data.frame if one of
    > the args is a data.frame). There may no longer be a need
    > for cBind() and rBind().

    > Michael

This sounds great!   Thank you very much, Michael!
:-) :-)

... but .... :-(  experiments with the Matrix package (and R
devel with your change), show a remaining buglet with treating of dimnames :

   > M1 <- Matrix(m1 <- matrix(1:12, 3,4))
   > cbind(m1, MM = -1)
		 MM
   [1,] 1 4 7 10 -1
   [2,] 2 5 8 11 -1
   [3,] 3 6 9 12 -1
   > cbind(M1, MM = -1)   ## ---- notice the "..."
   3 x 5 Matrix of class "dgeMatrix"
		 ...
   [1,] 1 4 7 10  -1
   [2,] 2 5 8 11  -1
   [3,] 3 6 9 12  -1
   > rbind(R1 = 10:11, m1)
      [,1] [,2] [,3] [,4]
   R1   10   11   10   11
	 1    4    7   10
	 2    5    8   11
	 3    6    9   12
   > rbind(R1 = 10:11, M1) ## --- notice the 'deparse.level'
   4 x 4 Matrix of class "dgeMatrix"
		 [,1] [,2] [,3] [,4]
   deparse.level   10   11   10   11
		    1    4    7   10
		    2    5    8   11
		    3    6    9   12
   > 

Also, it seems you are not observing the 'deparse.level'
argument at all: 
Looking at the last three lines of the example in  ?cbind,

     rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
     rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames (default)
     rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
     
but using a Matrix matrix 'dd', we see that (row)names
construction needs to amended:

  > (dd <- Matrix(rbind(c(0:1,0,0))))
  1 x 4 sparse Matrix of class "dgCMatrix"

  [1,] . 1 . .

  > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
  4 x 4 sparse Matrix of class "dgCMatrix"

  deparse.level  1  2  3  4
  c              2  2  2  2
  a++           10 10 10 10
		 .  1  .  .
  > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames (default)
  4 x 4 sparse Matrix of class "dgCMatrix"

  deparse.level  1  2  3  4
  c              2  2  2  2
  a++           10 10 10 10
		 .  1  .  .
  > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
  4 x 4 sparse Matrix of class "dgCMatrix"

  deparse.level  1  2  3  4
  c              2  2  2  2
  a++           10 10 10 10
		 .  1  .  .
  > 



    > On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
    > maechler at lynne.stat.math.ethz.ch> wrote:

    >> >>>>> Michael Lawrence <lawrence.michael at gene.com> >>>>>
    >> on Sat, 24 Jan 2015 06:39:37 -0800 writes:
    >> 
    >> > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau >
    >> <mario.annau at gmail.com> wrote: >> Hi all, this question
    >> has already been posted on >> stackoverflow, however
    >> without success, see also
    >> >>
    >> http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
    >> .
    >> >>
    >> >> I have written a package using S4 classes and would
    >> like >> to use the functions rbind, cbind with these
    >> defined >> classes.
    >> >>
    >> >> Since it does not seem to be possible to define rbind
    >> and >> cbind directly as S4 methods (see ?cBind) I
    >> defined >> rbind2 and cbind2 instead:
    >> >>
    >> 
    >> > This needs some clarification. It certainly is possible
    >> to > define cbind and rbind methods. The BiocGenerics
    >> package > defines generics for those and many methods are
    >> defined by > e.g. S4Vectors, IRanges, etc.  The issue is
    >> that dispatch > on "..." is singular, i.e., you can only
    >> specify one class > that all args in "..." must share
    >> (potentially through > inheritance).
    >> 
    >> > Thus, trying to combine objects from a > different
    >> hierarchy (or non-S4 objects) will not > work.
    >> 
    >> Yes, indeed, that's the drawback
    >> 
    >> I've been there almost surely before everyone else, with
    >> the Matrix package...  and I have been the author of
    >> cbind2(), rbind2(), and of course, of cBind(), and
    >> rBind().
    >> 
    >> At the time when I introduced these, the above
    >> possibility of writing S4 methods for '...'  where not
    >> yet part of R.
    >> 
    >> > This has not been a huge problem for us in >
    >> practice. For example, we have a DataFrame object that >
    >> mimics data.frame. To cbind a data.frame with a
    >> DataFrame, > the user can just call the DataFrame() >
    >> constructor. rbind() between different data structures is
    >> > much less common.
    >> 
    >> well... yes and no.  Think of using the Matrix package,
    >> maybe with another package that defines another
    >> generalized matrix class...  It would be nice if things
    >> worked automatically / perfectly there.
    >> 
    >> > The cBind and rBind functions in Matrix (and the
    >> r/cbind > that get installed by bind_activation, the code
    >> is shared) > work by recursing, dropping the first
    >> argument until two > are left, and then combining with
    >> r/cbind2(). The Biobase > package uses a similar strategy
    >> to mimic c() via its > non-standard combine()
    >> generic. The nice thing about the > combine() approach is
    >> the user entry point and the generic > are the same,
    >> instead of having methods on rbind2() and > the user
    >> calling rBind().
    >> 
    >> > I would argue that bind_activation(TRUE) should be >
    >> discouraged,
    >> 
    >> Yes, you are right Michael; it should be discouraged at
    >> least to be run in a *package*.  One could think of its
    >> use by an explicit user call.
    >> 
    >> > because it replaces the native rbind and > cbind with
    >> recursive variants that are going to cause > problems,
    >> performance and otherwise. This is why it is >
    >> hidden. Perhaps a reasonable compromise would be for the
    >> > native cbind and rbind to check whether any arguments
    >> are > S4 and if so, resort to recursion. Recursion does
    >> seem to > be a clean way to implement "type promotion",
    >> i.e., to > answer the question "which type should the
    >> result be when > faced with mixed-type args?".
    >> 
    >> Exactly.  That has been my idea at the time ..  ((yes,
    >> I'm also the author of the bind_activation()
    >> "(mis)functionality".))
    >> 
    >> > Hopefully others have better ideas.
    >> 
    >> that would be great.
    >> 
    >> And even if not, it would be great if we could implement
    >> your idea > Perhaps a reasonable compromise would be for
    >> the > native cbind and rbind to check whether any
    >> arguments are > S4 and if so, resort to recursion.
    >> 
    >> without a noticable performance penalty in the case of no
    >> S4 arguments.
    >> 
    >> Martin
    >> 
    >> 
    >> > Michael
    >> 
    >> >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
    >> >> function(x, y) { # Do stuff ...  })
    >> >>
    >> >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
    >> >> function(x, y) { # Do stuff ...  })
    >> >>
    >> >> >From ?cbind2 I learned that these functions need to
    >> be >> activated using methods:::bind_activation to
    >> replace >> rbind and cbind from base.
    >> >>
    >> >> I included the call in the package file R/zzz.R using
    >> the >> .onLoad function:
    >> >>
    >> >> .onLoad <- function(...) { # Bind activation of
    >> cbind(2) >> and rbind(2) for S4 classes >>
    >> methods:::bind_activation(TRUE) } This works as >>
    >> expected. However, running R CMD check I am now getting
    >> >> the following NOTE since I am using an unexported >>
    >> function in methods:
    >> >>
    >> >> * checking dependencies in R code ... NOTE Unexported
    >> >> object imported by a ':::' call: >>
    >> 'methods:::bind_activation' See the note in ?`:::` about
    >> >> the use of this operator.  How can I get rid of the
    >> NOTE >> and what is the proper way to define the methods
    >> cbind >> and rbind for S4 classes in a package?
    >> >>
    >> >> Best, mario
    >> >>
    >> >> ______________________________________________ >>
    >> R-devel at r-project.org mailing list >>
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> > ______________________________________________ >
    >> R-devel at r-project.org mailing list >
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>


From Krustev at hotmail.com  Mon Feb  2 12:40:25 2015
From: Krustev at hotmail.com (Teodor Krastev)
Date: Mon, 2 Feb 2015 03:40:25 -0800 (PST)
Subject: [Rd] BinaryFiles format
Message-ID: <1422877225009-4702655.post@n4.nabble.com>

Hello,

after many failed attempts to correctly write BinaryFiles file
"R CMD check will warn about them unless they are listed (one filepath per
line) in a file BinaryFiles at the top level of the package." - CRAN docs

would somebody kindly provide an example of BinaryFiles file?

thank you
Theo



--
View this message in context: http://r.789695.n4.nabble.com/BinaryFiles-format-tp4702655.html
Sent from the R devel mailing list archive at Nabble.com.


From ripley at stats.ox.ac.uk  Mon Feb  2 14:17:12 2015
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Mon, 02 Feb 2015 13:17:12 +0000
Subject: [Rd] BinaryFiles format
In-Reply-To: <1422877225009-4702655.post@n4.nabble.com>
References: <1422877225009-4702655.post@n4.nabble.com>
Message-ID: <54CF78D8.4040307@stats.ox.ac.uk>

On 02/02/2015 11:40, Teodor Krastev wrote:
> Hello,
>
> after many failed attempts to correctly write BinaryFiles file
> "R CMD check will warn about them unless they are listed (one filepath per
> line) in a file BinaryFiles at the top level of the package." - CRAN docs

Not 'CRAN docs': CRAN does not allow such a file (as the *R* manual you 
are misquoting says).

>
> would somebody kindly provide an example of BinaryFiles file?
>
> thank you
> Theo
>
>
>
> --
> View this message in context: http://r.789695.n4.nabble.com/BinaryFiles-format-tp4702655.html
> Sent from the R devel mailing list archive at Nabble.com.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From liguowei1991 at gmail.com  Mon Feb  2 04:08:15 2015
From: liguowei1991 at gmail.com (eigen)
Date: Sun, 1 Feb 2015 19:08:15 -0800 (PST)
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <54CDDB89.5090406@stats.ox.ac.uk>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
Message-ID: <1422846495154-4702639.post@n4.nabble.com>

Thank you for your reply. Do you have any idea of how to get rid of the
errors? I tried Null function to calculate eigenvectors and nearPD to get
approximate positive definite matrix first but they also had errors.



--
View this message in context: http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702639.html
Sent from the R devel mailing list archive at Nabble.com.


From pdalgd at gmail.com  Mon Feb  2 14:54:13 2015
From: pdalgd at gmail.com (peter dalgaard)
Date: Mon, 2 Feb 2015 14:54:13 +0100
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <1422846495154-4702639.post@n4.nabble.com>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
	<1422846495154-4702639.post@n4.nabble.com>
Message-ID: <9DD1A14F-1408-4D6F-B901-AB41C8A637C1@gmail.com>


On 02 Feb 2015, at 04:08 , eigen <liguowei1991 at gmail.com> wrote:

> Thank you for your reply. Do you have any idea of how to get rid of the
> errors? I tried Null function to calculate eigenvectors and nearPD to get
> approximate positive definite matrix first but they also had errors.
> 

How could we? All we  know is that you are having trouble running some unspecified code on some unspecified data on an unspecified platform. 

It is a bit like someone calling from Finland and telling you that they are lost looking for the University and are standing at a roadsign pointing to "Keskus".


> --
> View this message in context: http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702639.html
> Sent from the R devel mailing list archive at Nabble.com.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From kasperdanielhansen at gmail.com  Mon Feb  2 15:27:27 2015
From: kasperdanielhansen at gmail.com (Kasper Daniel Hansen)
Date: Mon, 2 Feb 2015 09:27:27 -0500
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <9DD1A14F-1408-4D6F-B901-AB41C8A637C1@gmail.com>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
	<1422846495154-4702639.post@n4.nabble.com>
	<9DD1A14F-1408-4D6F-B901-AB41C8A637C1@gmail.com>
Message-ID: <CAC2h7utpnvrSg960VAqFcdau7oN5wXFV2sie4v_VTEvE0v_TYw@mail.gmail.com>

fortune candidate

On Mon, Feb 2, 2015 at 8:54 AM, peter dalgaard <pdalgd at gmail.com> wrote:

>
> On 02 Feb 2015, at 04:08 , eigen <liguowei1991 at gmail.com> wrote:
>
> > Thank you for your reply. Do you have any idea of how to get rid of the
> > errors? I tried Null function to calculate eigenvectors and nearPD to get
> > approximate positive definite matrix first but they also had errors.
> >
>
> How could we? All we  know is that you are having trouble running some
> unspecified code on some unspecified data on an unspecified platform.
>
> It is a bit like someone calling from Finland and telling you that they
> are lost looking for the University and are standing at a roadsign pointing
> to "Keskus".
>
>
> > --
> > View this message in context:
> http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702639.html
> > Sent from the R devel mailing list archive at Nabble.com.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From liguowei1991 at gmail.com  Mon Feb  2 16:55:15 2015
From: liguowei1991 at gmail.com (eigen)
Date: Mon, 2 Feb 2015 07:55:15 -0800 (PST)
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <9DD1A14F-1408-4D6F-B901-AB41C8A637C1@gmail.com>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
	<1422846495154-4702639.post@n4.nabble.com>
	<9DD1A14F-1408-4D6F-B901-AB41C8A637C1@gmail.com>
Message-ID: <1422892515671-4702676.post@n4.nabble.com>

Sorry for being unclear. I am using R x64 3.1.2 for simulation. Basically I
got a matrix of genetic data and calculated the kernel matrix. Now I have
trouble applying eigen function on the kernel matrix for a few simulations
but not most of them. I tried other methods but none of them worked. I guess
my kernel matrix may not be very good. Thank you.



--
View this message in context: http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702676.html
Sent from the R devel mailing list archive at Nabble.com.


From wdunlap at tibco.com  Mon Feb  2 17:07:27 2015
From: wdunlap at tibco.com (William Dunlap)
Date: Mon, 2 Feb 2015 08:07:27 -0800
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <1422846495154-4702639.post@n4.nabble.com>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
	<1422846495154-4702639.post@n4.nabble.com>
Message-ID: <CAF8bMcYVoS2d=ybry9imR0omRj7Q1iH3F84cmOKmX-CMZPkrSQ@mail.gmail.com>

You can start diagnosing the problem by capturing the matrix that caused
eigen() to stop.   You can do this in a variety of ways; here is one
    trace(eigen, quote(lastEigenX <<- x))
After setting the trace, make your offending function call and after the
error the global variable 'lastEigenX' will contain the bad matrix.  Take
the trace off of eigen
   untrace(eigen)
If all goes well then
   eigen(lastEigenX)
will cause the same error and you or someone on this list can see what
is odd about that matrix (e.g., by looking at its singular values).




Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Sun, Feb 1, 2015 at 7:08 PM, eigen <liguowei1991 at gmail.com> wrote:

> Thank you for your reply. Do you have any idea of how to get rid of the
> errors? I tried Null function to calculate eigenvectors and nearPD to get
> approximate positive definite matrix first but they also had errors.
>
>
>
> --
> View this message in context:
> http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702639.html
> Sent from the R devel mailing list archive at Nabble.com.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ucfagls at gmail.com  Mon Feb  2 18:04:10 2015
From: ucfagls at gmail.com (Gavin Simpson)
Date: Mon, 2 Feb 2015 11:04:10 -0600
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <CAF8bMcYVoS2d=ybry9imR0omRj7Q1iH3F84cmOKmX-CMZPkrSQ@mail.gmail.com>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
	<1422846495154-4702639.post@n4.nabble.com>
	<CAF8bMcYVoS2d=ybry9imR0omRj7Q1iH3F84cmOKmX-CMZPkrSQ@mail.gmail.com>
Message-ID: <CAAHES9xHTnwSbT8u4gMveGah+N-OXa-MuDPsuH2b-4Nr4Gnk+w@mail.gmail.com>

On 2 February 2015 at 10:07, William Dunlap <wdunlap at tibco.com> wrote:
<snip>
>
> If all goes well then
>    eigen(lastEigenX)
> will cause the same error and you or someone on this list can see what
> is odd about that matrix (e.g., by looking at its singular values).


Preferably *not* this list as this doesn't really seem to be about
developing R or with/for it. R-Help would have been a more appropriate
venue for a question such as this.

G


>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> On Sun, Feb 1, 2015 at 7:08 PM, eigen <liguowei1991 at gmail.com> wrote:
>
> > Thank you for your reply. Do you have any idea of how to get rid of the
> > errors? I tried Null function to calculate eigenvectors and nearPD to get
> > approximate positive definite matrix first but they also had errors.
> >
> >
> >
> > --
> > View this message in context:
> >
> http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702639.html
> > Sent from the R devel mailing list archive at Nabble.com.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gavin Simpson, PhD

	[[alternative HTML version deleted]]


From charles.santana at gmail.com  Mon Feb  2 19:59:10 2015
From: charles.santana at gmail.com (Charles Novaes de Santana)
Date: Mon, 2 Feb 2015 19:59:10 +0100
Subject: [Rd] A good way to debug a c++ library embedded to R code
Message-ID: <CAH-FEnir=Oo_f23MszsdHAxuL3iA13xJFubgbiwZXXU3CjwC8A@mail.gmail.com>

Dear all,

I am using R CMD SHLIB to compile a c++ code into a library (.so) and
dyn.load to load this library into a R code. I am facing some problems in
the c++ code that I can not figure out how to solve. Do you recomend any
good way to debug this R + C++ program? If I was programming only in C++ I
would use GDB.

I would much appreciate any help or suggestion!

Best regards,

Charles

-- 
Um ax?! :)

--
Charles Novaes de Santana, PhD
http://www.imedea.uib-csic.es/~charles

	[[alternative HTML version deleted]]


From gmbecker at ucdavis.edu  Mon Feb  2 21:02:27 2015
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Mon, 2 Feb 2015 12:02:27 -0800
Subject: [Rd] A good way to debug a c++ library embedded to R code
In-Reply-To: <CAH-FEnir=Oo_f23MszsdHAxuL3iA13xJFubgbiwZXXU3CjwC8A@mail.gmail.com>
References: <CAH-FEnir=Oo_f23MszsdHAxuL3iA13xJFubgbiwZXXU3CjwC8A@mail.gmail.com>
Message-ID: <CADwqtCP8nHNfve2RWMf9m6po7NWycks6p-KeQyVO19TBiPbKMw@mail.gmail.com>

Charles,

Run R under gdb

R -d gdb

You can then set breakpoints and catch problems in C(++) code run under R.

~G

On Mon, Feb 2, 2015 at 10:59 AM, Charles Novaes de Santana <
charles.santana at gmail.com> wrote:

> Dear all,
>
> I am using R CMD SHLIB to compile a c++ code into a library (.so) and
> dyn.load to load this library into a R code. I am facing some problems in
> the c++ code that I can not figure out how to solve. Do you recomend any
> good way to debug this R + C++ program? If I was programming only in C++ I
> would use GDB.
>
> I would much appreciate any help or suggestion!
>
> Best regards,
>
> Charles
>
> --
> Um ax?! :)
>
> --
> Charles Novaes de Santana, PhD
> http://www.imedea.uib-csic.es/~charles
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, PhD
Computational Biologist
Bioinformatics and Computational Biology
Genentech, Inc.

	[[alternative HTML version deleted]]


From charles.santana at gmail.com  Mon Feb  2 21:12:55 2015
From: charles.santana at gmail.com (Charles Novaes de Santana)
Date: Mon, 2 Feb 2015 21:12:55 +0100
Subject: [Rd] A good way to debug a c++ library embedded to R code
In-Reply-To: <CADwqtCP8nHNfve2RWMf9m6po7NWycks6p-KeQyVO19TBiPbKMw@mail.gmail.com>
References: <CAH-FEnir=Oo_f23MszsdHAxuL3iA13xJFubgbiwZXXU3CjwC8A@mail.gmail.com>
	<CADwqtCP8nHNfve2RWMf9m6po7NWycks6p-KeQyVO19TBiPbKMw@mail.gmail.com>
Message-ID: <CAH-FEnhprkSaSJ4GY8dug96xEK1wPBmazp6uoo9gegDg9nNqWw@mail.gmail.com>

Thank you, Gabriel! I didn't know I could do it! I will try it!

Best,

Charles

On Mon, Feb 2, 2015 at 9:02 PM, Gabriel Becker <gmbecker at ucdavis.edu> wrote:

> Charles,
>
> Run R under gdb
>
> R -d gdb
>
> You can then set breakpoints and catch problems in C(++) code run under R.
>
> ~G
>
> On Mon, Feb 2, 2015 at 10:59 AM, Charles Novaes de Santana <
> charles.santana at gmail.com> wrote:
>
>> Dear all,
>>
>> I am using R CMD SHLIB to compile a c++ code into a library (.so) and
>> dyn.load to load this library into a R code. I am facing some problems in
>> the c++ code that I can not figure out how to solve. Do you recomend any
>> good way to debug this R + C++ program? If I was programming only in C++ I
>> would use GDB.
>>
>> I would much appreciate any help or suggestion!
>>
>> Best regards,
>>
>> Charles
>>
>> --
>> Um ax?! :)
>>
>> --
>> Charles Novaes de Santana, PhD
>> http://www.imedea.uib-csic.es/~charles
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
>
> --
> Gabriel Becker, PhD
> Computational Biologist
> Bioinformatics and Computational Biology
> Genentech, Inc.
>



-- 
Um ax?! :)

--
Charles Novaes de Santana, PhD
http://www.imedea.uib-csic.es/~charles

	[[alternative HTML version deleted]]


From dtenenba at fredhutch.org  Mon Feb  2 21:14:49 2015
From: dtenenba at fredhutch.org (Dan Tenenbaum)
Date: Mon, 2 Feb 2015 12:14:49 -0800 (PST)
Subject: [Rd] A good way to debug a c++ library embedded to R code
In-Reply-To: <CADwqtCP8nHNfve2RWMf9m6po7NWycks6p-KeQyVO19TBiPbKMw@mail.gmail.com>
Message-ID: <1250028114.139676.1422908089378.JavaMail.root@fredhutch.org>



----- Original Message -----
> From: "Gabriel Becker" <gmbecker at ucdavis.edu>
> To: "Charles Novaes de Santana" <charles.santana at gmail.com>
> Cc: "r-devel" <r-devel at r-project.org>
> Sent: Monday, February 2, 2015 12:02:27 PM
> Subject: Re: [Rd] A good way to debug a c++ library embedded to R code
> 
> Charles,
> 
> Run R under gdb
> 
> R -d gdb
> 
> You can then set breakpoints and catch problems in C(++) code run
> under R.
> 

Although I don't usually use videos to learn things, and this one is a few years old, it's quite good and still accurate:

http://vimeo.com/11937905

I refer to it whenever I need to debug C code in an R package.

Dan



> ~G
> 
> On Mon, Feb 2, 2015 at 10:59 AM, Charles Novaes de Santana <
> charles.santana at gmail.com> wrote:
> 
> > Dear all,
> >
> > I am using R CMD SHLIB to compile a c++ code into a library (.so)
> > and
> > dyn.load to load this library into a R code. I am facing some
> > problems in
> > the c++ code that I can not figure out how to solve. Do you
> > recomend any
> > good way to debug this R + C++ program? If I was programming only
> > in C++ I
> > would use GDB.
> >
> > I would much appreciate any help or suggestion!
> >
> > Best regards,
> >
> > Charles
> >
> > --
> > Um ax?! :)
> >
> > --
> > Charles Novaes de Santana, PhD
> > http://www.imedea.uib-csic.es/~charles
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> 
> 
> 
> --
> Gabriel Becker, PhD
> Computational Biologist
> Bioinformatics and Computational Biology
> Genentech, Inc.
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From charles.santana at gmail.com  Mon Feb  2 21:17:52 2015
From: charles.santana at gmail.com (Charles Novaes de Santana)
Date: Mon, 2 Feb 2015 21:17:52 +0100
Subject: [Rd] A good way to debug a c++ library embedded to R code
In-Reply-To: <1250028114.139676.1422908089378.JavaMail.root@fredhutch.org>
References: <CADwqtCP8nHNfve2RWMf9m6po7NWycks6p-KeQyVO19TBiPbKMw@mail.gmail.com>
	<1250028114.139676.1422908089378.JavaMail.root@fredhutch.org>
Message-ID: <CAH-FEniaJ151D=HAeAVb3JbGidrPPeqi2S6A640A=84iCP53kQ@mail.gmail.com>

Thank you, Dan! The video helps a lot indeed!!

Best,

Charles

On Mon, Feb 2, 2015 at 9:14 PM, Dan Tenenbaum <dtenenba at fredhutch.org>
wrote:

>
>
> ----- Original Message -----
> > From: "Gabriel Becker" <gmbecker at ucdavis.edu>
> > To: "Charles Novaes de Santana" <charles.santana at gmail.com>
> > Cc: "r-devel" <r-devel at r-project.org>
> > Sent: Monday, February 2, 2015 12:02:27 PM
> > Subject: Re: [Rd] A good way to debug a c++ library embedded to R code
> >
> > Charles,
> >
> > Run R under gdb
> >
> > R -d gdb
> >
> > You can then set breakpoints and catch problems in C(++) code run
> > under R.
> >
>
> Although I don't usually use videos to learn things, and this one is a few
> years old, it's quite good and still accurate:
>
> http://vimeo.com/11937905
>
> I refer to it whenever I need to debug C code in an R package.
>
> Dan
>
>
>
> > ~G
> >
> > On Mon, Feb 2, 2015 at 10:59 AM, Charles Novaes de Santana <
> > charles.santana at gmail.com> wrote:
> >
> > > Dear all,
> > >
> > > I am using R CMD SHLIB to compile a c++ code into a library (.so)
> > > and
> > > dyn.load to load this library into a R code. I am facing some
> > > problems in
> > > the c++ code that I can not figure out how to solve. Do you
> > > recomend any
> > > good way to debug this R + C++ program? If I was programming only
> > > in C++ I
> > > would use GDB.
> > >
> > > I would much appreciate any help or suggestion!
> > >
> > > Best regards,
> > >
> > > Charles
> > >
> > > --
> > > Um ax?! :)
> > >
> > > --
> > > Charles Novaes de Santana, PhD
> > > http://www.imedea.uib-csic.es/~charles
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> >
> >
> > --
> > Gabriel Becker, PhD
> > Computational Biologist
> > Bioinformatics and Computational Biology
> > Genentech, Inc.
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>



-- 
Um ax?! :)

--
Charles Novaes de Santana, PhD
http://www.imedea.uib-csic.es/~charles

	[[alternative HTML version deleted]]


From tobias.setz at rmetrics.org  Tue Feb  3 11:08:29 2015
From: tobias.setz at rmetrics.org (Tobias Setz)
Date: Tue, 3 Feb 2015 11:08:29 +0100
Subject: [Rd] R CMD check: Locale not set to C?
In-Reply-To: <014301d0365b$44bac8c0$ce305a40$@rmetrics.org>
References: <014301d0365b$44bac8c0$ce305a40$@rmetrics.org>
Message-ID: <008a01d03f99$68e022d0$3aa06870$@rmetrics.org>

I just wanted to share my findings on this topic with you:

Custom variables for checking and building can be set through
"~/.R/check.Renviron" and " ~/.R/build.Renviron". But not the "LANGUAGE"
variable; it will always be set to "C". I couldn't find a way to change the
locales for a check or build run; they are always set to the locales of my
system ("German" in my case). Except the collation locale ("LC_COLLATE ")
which is set to "C". That is also what the manual mentions. This should
answer the question in the title.

Therefore I assume that generally the environment variables and the locales
should be set correctly by the package developers within the test (or
vignettes) files. And that it is not possible (or at least intended) to set
a custom language/location environment for build and check runs.


> Dear All
> 
> The "R CMD check" on the "zoo" (1.7-11) package results in an error on my
> environment. It can be reduced to the following example:
> 
> ----------------------------------------------------
> > require(zoo)
> > read.zoo(system.file("doc", "demo1.txt", package = "zoo"), sep = "|",
> format="%d %b %Y")
> 
> Error in read.zoo(system.file("doc", "demo1.txt", package = "zoo"), sep =
> "|",  :
>   index has bad entries at data rows: 14 15 16 17 18 19 20
> ----------------------------------------------------
> 
> I am using the following environment (on Windows 7):
> 
> ----------------------------------------------------
> > sessionInfo()
> R version 3.1.2 (2014-10-31)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> 
> locale:
> [1] LC_COLLATE=German_Switzerland.1252
> LC_CTYPE=German_Switzerland.1252 [3]
> LC_MONETARY=German_Switzerland.1252 LC_NUMERIC=C [5]
> LC_TIME=German_Switzerland.1252
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> ----------------------------------------------------
> 
> The problem are the locale settings. In the "demo1.txt" the months are
> abbreviated in English; while my environment would only accept German
> abbreviations. The problem can be solved by setting the time locale:
> 
> > Sys.setlocale("LC_TIME", "English")
> or
> > Sys.setlocale("LC_TIME", "C")
> 
> 
> Now; for "R CMD check", the manual
> (http://cran.r-project.org/doc/manuals/r-release/R-exts.html) states the
> following:
> 
> - "R CMD check and R CMD build run R processes with --vanilla..."
> So no possibility to set the locales (in contrary to the environment
> variables) through an "Rprofile" file...
> 
> - "All these tests are run with collation set to the C locale..."
> If I set "LC_ALL" or only "LC_TIME" to "C" the example shown at the top
> actually works if I run it manually.
> 
> 
> However; if I run "R CMD check" I get the ERROR.
> Therefore; are the locales really set to "C" for "R CMD check"?
> If yes; why would the example above not work?
> If no; how could I achieve custom locale settings?
> 
> Thanks!
> Tobias
> 
> 
> 
> ------------------------------------------
> Tobias Setz
> 
> Rmetrics Association
> tobias.setz at rmetrics.org
> www.rmetrics.org
>


From marius.hofert at uwaterloo.ca  Tue Feb  3 16:39:43 2015
From: marius.hofert at uwaterloo.ca (Marius Hofert)
Date: Tue, 3 Feb 2015 10:39:43 -0500
Subject: [Rd] Seed in 'parallel' vignette
Message-ID: <CAM3-Kjah4y2Mr7snden5XJsx6nUFEpMO30Q_sAyBh9fD0bp-Vg@mail.gmail.com>

Hi,

This is most likely only a minor technicality, but I saw the
following: On page 6 of the 'parallel' vignette
(http://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf),
the random-number generator "L'Ecuyer-CMRG" is said to have seed
"(x_n, x_{n-1}, x_{n-2}, y_n, y_{n-1}, y_{n-2})". However, in L'Ecuyer
et al. (2002), the seed is given with 'increasing' indices, so should
rather be "(x_{n-2}, x_{n-1}, x_n, y_{n-2}, y_{n-1}, y_n)" (or, even
more intuitively, "(x_{n-3}, x_{n-2}, x_{n-1}, y_{n-3}, y_{n-2},
y_{n-1})"). The question is how it's done in R (?): If as given in the
vignette, one should maybe point this out as other (languages)
following L'Ecuyer et al. (2002) might obtain different random numbers
then. And if it's implemented as in L'Ecuyer, then one probably wants
to adjust the vignette to reflect this.

Other minor suggestions to improve the vignette (if that's what's also
done in R; I couldn't easily figure that out from ./src/main/RNG.c):
1) when defining u_n, I would write u_n = z_n / (2^32-208) [as it is
immediately clear then that one divides by the modulus of the first
linear congruential generator + 1]
2) The case z_n=0 is not provided (for a reason?). If z_n=0, L'Ecuyer
suggests to set u_n to "(2^32-209)/(2^32-208)".

Cheers,
Marius




-- 
Marius Hofert, Dr. rer. nat.
Assistant Professor
Department of Statistics and Actuarial Science
Faculty of Mathematics
University of Waterloo
200 University Avenue West, Waterloo, ON, N2L 3G1
+1-519-888-4567, ext. 31394 (office M3 4207)
http://math.uwaterloo.ca/~mhofert


From marc_grt at yahoo.fr  Thu Feb  5 10:42:57 2015
From: marc_grt at yahoo.fr (Marc Girondot)
Date: Thu, 05 Feb 2015 10:42:57 +0100
Subject: [Rd] Rcurl crash in R-devel
Message-ID: <54D33B21.6070906@yahoo.fr>

Hello,

I don't know if the problem originates from R-devel 3.2 or Rcurl itself. 
I post this message to the R-devel list and to the author of RCurl 
(duncan at r-project.org).

 > library("RCurl")
Le chargement a n?cessit? le package : bitops
 > print(sessionInfo())
R Under development (unstable) (2015-02-03 r67717)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X 10.10.2 (Yosemite)

locale:
[1] fr_FR.UTF-8/fr_FR.UTF-8/fr_FR.UTF-8/C/fr_FR.UTF-8/fr_FR.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods base

other attached packages:
[1] RCurl_1.95-4.5 bitops_1.0-6

 > filepath <- 
"/Users/marc/Documents/Espace_de_travail_R/package_embryogrowth/embryogrowth/DESCRIPTION"
 > urlx <- 
"ftp://xxxxx:xxxxxxx at max2.ese.u-psud.fr/conservation/embryogrowth/DESCRIPTION"

 > ftpUpload(what=filepath, to=urlx)

  *** caught segfault ***
address 0x0, cause 'memory not mapped'

Traceback:
  1: .Call("R_curl_easy_perform", curl, .opts, isProtected, 
.encoding,     PACKAGE = "RCurl")
  2: curlPerform(url = to, upload = TRUE, readfunction = 
uploadFunctionHandler(file,     asText), ..., curl = curl)
  3: ftpUpload(what = filepath, to = urlx)

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection:

Hope it will help,

Sincerely,

Marc


From snowyfox at 163.com  Thu Feb  5 09:09:08 2015
From: snowyfox at 163.com (=?GBK?B?xLrI59Gp?=)
Date: Thu, 5 Feb 2015 16:09:08 +0800 (CST)
Subject: [Rd] How to unload R.dll successfully by FreeLibrary
Message-ID: <1db7cb4.a644.14b58c917d1.Coremail.snowyfox@163.com>

hi,
    I've some C++ code which try to load R.dll and execute some R command, then unload R.dll, yet it seems fail to unload it, so second time to call the function hangs since it is trying to Initialize R again(this is not allowed as documented). Anyone can tell me why, thanks.
//the following is my c++ code, used in a Visual Studio 2012 Console Application
#define ORAPI__cdecl
typedefBOOL(ORAPI*PFN_Rf_initEmbeddedR)(int argc, char *argv[]);
typedefvoid(ORAPI*PFN_Rf_endEmbeddedR)(int fatal);


staticvoid_simple_test()
{
#define STR_R_DLL_PATH_T("D:\\R\\R-3.1.2\\bin\\i386\\R.dll")
HMODULEm_hRDll = LoadLibrary(STR_R_DLL_PATH);
if ( m_hRDll )
{
PFN_Rf_initEmbeddedR pfnInit = (PFN_Rf_initEmbeddedR)GetProcAddress(m_hRDll, "Rf_initEmbeddedR");
PFN_Rf_endEmbeddedR pfnEnd = (PFN_Rf_endEmbeddedR)GetProcAddress(m_hRDll, "Rf_endEmbeddedR");


char*szArgs[] = {"REmbeddedPostgres", "--gui=none", "--silent"};
BOOL bRet = pfnInit(_countof(szArgs), szArgs); //call second time, this function will not return
//do something.
pfnEnd(0);
FreeLibrary(m_hRDll); //==> After this, R.dll still in memory, as I can see in Visual Studio 2012, Module window
}
}
//testing code end
int _tmain(int argc, _TCHAR* argv[])
{
_simple_test(); //first time, seems fine.
_simple_test(); //second time, hangs...
//_start_test_OR_Cache();
//_start_test_OR_Cache();
return 0;
}



????????????????????????????
	[[alternative HTML version deleted]]


From gianluca.mastrantonio at yahoo.it  Thu Feb  5 13:41:41 2015
From: gianluca.mastrantonio at yahoo.it (niandra)
Date: Thu, 5 Feb 2015 04:41:41 -0800 (PST)
Subject: [Rd] Invalid read of size 8
Message-ID: <1423140101020-4702843.post@n4.nabble.com>

Hi,

I have a R program that call a C function.  I define a vector of pointer as


int nLC=3;
int pownLC = nLC*nLC
double *MatCovExtra[nT+1];
for(k=0;k<K+1;k++)
{
     MatCovExtra[k]         = (double*)R_alloc(pownLC, sizeof(double));

}

where nT>K. Then i put some values on the vector associated with the
pointer:

for(k=0;k<K+1;k++)
 {
                 for(i=0;i<nLC;i++)
                 {
                     for(j=i;j<nLC;j++)
                     {
                         MatCovExtra[k][i*nLC+j] = startSigma[i*nLC+j];
                     }
                 }
         }        
and i check that everithing is ok with

for(k=0;k<K+1;k++)
{
             Rprintf("First Cov Extra %i \n",k);
             for(i=0;i<nLC;i++)
             {
                 for(j=i;j<nLC;j++)
                 {
                     Rprintf("%f ", MatCovInv[k][i*nLC+j]);
                 }
                 Rprintf("\n");
             }
             Rprintf("\n\n");

}

After that i define an  R variable

int nProtect =0;
 SEXP zDP_out_r;

PROTECT(zDP_out_r          = allocMatrix(INTSXP, nT, nSamples_save));
nProtect++;
int *zDP_out_P             = INTEGER(zDP_out_r);



and using the same syntax as before

for(k=0;k<K+1;k++)
{
             Rprintf("Later Cov Extra %i \n",k);
             for(i=0;i<nLC;i++)
             {
                 for(j=i;j<nLC;j++)
                 {
                     Rprintf("%f ", MatCovInv[k][i*nLC+j]);
                 }
                 Rprintf("\n");
             }
             Rprintf("\n\n");

}
 
I see that the values of MatCovInv[k] have changed.

Valgrind shows the following error on the second block of Rprintf:


Later Cov Extra 3  0x107df7fb8
==954== Invalid read of size 8
==954==    at 0xA92D599: NPHDPHMM (in /Users/NPHDPHMM.so)
==954==    by 0x8632A: do_dotcall (dotcode.c:652)
==954==    by 0xB036A: Rf_eval (eval.c:657)
==954==    by 0xBE8C0: do_set (eval.c:2028)
==954==    by 0xB0404: Rf_eval (eval.c:629)
==954==    by 0xBE3C4: do_begin (eval.c:1638)
==954==    by 0xB0404: Rf_eval (eval.c:629)
==954==    by 0xBB95D: Rf_applyClosure (eval.c:1038)
==954==    by 0xB03BC: Rf_eval (eval.c:676)
==954==    by 0xBE8C0: do_set (eval.c:2028)
==954==    by 0xB0404: Rf_eval (eval.c:629)
==954==    by 0xE9012: Rf_ReplIteration (main.c:260)
==954==  Address 0x107df7fb8 is 40 bytes inside a block of size 176 free'd
==954==    at 0x4D8D: free (vg_replace_malloc.c:477)
==954==    by 0xF0BCA: R_gc_internal (memory.c:1026)
==954==    by 0xF2400: Rf_allocVector3 (memory.c:2578)
==954==    by 0x2BBCE: Rf_allocMatrix (Rinlinedfuns.h:189)
==954==    by 0xA92D449: NPHDPHMM (in /Users/NPHDPHMM.so)
==954==    by 0x8632A: do_dotcall (dotcode.c:652)
==954==    by 0xB036A: Rf_eval (eval.c:657)
==954==    by 0xBE8C0: do_set (eval.c:2028)
==954==    by 0xB0404: Rf_eval (eval.c:629)
==954==    by 0xBE3C4: do_begin (eval.c:1638)
==954==    by 0xB0404: Rf_eval (eval.c:629)
==954==    by 0xBB95D: Rf_applyClosure (eval.c:1038)
==954== 


Where is the error? I tried to search on the internet but i didn't find a
solution.



--
View this message in context: http://r.789695.n4.nabble.com/Invalid-read-of-size-8-tp4702843.html
Sent from the R devel mailing list archive at Nabble.com.


From ripley at stats.ox.ac.uk  Thu Feb  5 14:24:49 2015
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 05 Feb 2015 13:24:49 +0000
Subject: [Rd] Rcurl crash in R-devel
In-Reply-To: <54D33B21.6070906@yahoo.fr>
References: <54D33B21.6070906@yahoo.fr>
Message-ID: <54D36F21.90307@stats.ox.ac.uk>

On 05/02/2015 09:42, Marc Girondot wrote:
> Hello,
>
> I don't know if the problem originates from R-devel 3.2 or Rcurl itself.

The traceback is 100% sure it originates in or below RCurl (possibly in 
your system's libcurl).   R-devel must be innocent here.

Your example is not reproducible (see the posting guide), so you need to 
run this under a debugger for yourself.

> I post this message to the R-devel list and to the author of RCurl
> (duncan at r-project.org).
>
>  > library("RCurl")
> Le chargement a n?cessit? le package : bitops
>  > print(sessionInfo())
> R Under development (unstable) (2015-02-03 r67717)
> Platform: x86_64-apple-darwin13.4.0 (64-bit)
> Running under: OS X 10.10.2 (Yosemite)
>
> locale:
> [1] fr_FR.UTF-8/fr_FR.UTF-8/fr_FR.UTF-8/C/fr_FR.UTF-8/fr_FR.UTF-8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods base
>
> other attached packages:
> [1] RCurl_1.95-4.5 bitops_1.0-6
>
>  > filepath <-
> "/Users/marc/Documents/Espace_de_travail_R/package_embryogrowth/embryogrowth/DESCRIPTION"
>
>  > urlx <-
> "ftp://xxxxx:xxxxxxx at max2.ese.u-psud.fr/conservation/embryogrowth/DESCRIPTION"
>
>
>  > ftpUpload(what=filepath, to=urlx)
>
>   *** caught segfault ***
> address 0x0, cause 'memory not mapped'
>
> Traceback:
>   1: .Call("R_curl_easy_perform", curl, .opts, isProtected,
> .encoding,     PACKAGE = "RCurl")
>   2: curlPerform(url = to, upload = TRUE, readfunction =
> uploadFunctionHandler(file,     asText), ..., curl = curl)
>   3: ftpUpload(what = filepath, to = urlx)
>
> Possible actions:
> 1: abort (with core dump, if enabled)
> 2: normal R exit
> 3: exit R without saving workspace
> 4: exit R saving workspace
> Selection:
>
> Hope it will help,
>
> Sincerely,
>
> Marc

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From gianluca.mastrantonio at yahoo.it  Thu Feb  5 14:23:18 2015
From: gianluca.mastrantonio at yahoo.it (niandra)
Date: Thu, 5 Feb 2015 05:23:18 -0800 (PST)
Subject: [Rd] Invalid read of size 8
In-Reply-To: <1423140101020-4702843.post@n4.nabble.com>
References: <1423140101020-4702843.post@n4.nabble.com>
Message-ID: <1423142598001-4702847.post@n4.nabble.com>

Few more details:

nSamples_save is an integer variable and if nSamples_save>1000 I get the
error, while if nSamples_save<1000 everything is fine



--
View this message in context: http://r.789695.n4.nabble.com/Invalid-read-of-size-8-tp4702843p4702847.html
Sent from the R devel mailing list archive at Nabble.com.


From simon.urbanek at r-project.org  Thu Feb  5 18:35:58 2015
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Thu, 5 Feb 2015 12:35:58 -0500
Subject: [Rd] Invalid read of size 8
In-Reply-To: <1423140101020-4702843.post@n4.nabble.com>
References: <1423140101020-4702843.post@n4.nabble.com>
Message-ID: <E4945EBC-F260-47C0-B275-08CE757FFB4F@r-project.org>

As you can see from the stack trace the memory you're trying to use has already been released so it was not protected.
Since you only provided part of your code we can't really reproduce it or help you.

However, why don't you use just use

double *MatCovExtra = REAL(PROTECT(allocMatrix(REALSXP, pownLC, nT+1)));

instead the double-pointers?

Cheers,
Simon



> On Feb 5, 2015, at 7:41 AM, niandra <gianluca.mastrantonio at yahoo.it> wrote:
> 
> Hi,
> 
> I have a R program that call a C function.  I define a vector of pointer as
> 
> 
> int nLC=3;
> int pownLC = nLC*nLC
> double *MatCovExtra[nT+1];
> for(k=0;k<K+1;k++)
> {
>     MatCovExtra[k]         = (double*)R_alloc(pownLC, sizeof(double));
> 
> }
> 
> where nT>K. Then i put some values on the vector associated with the
> pointer:
> 
> for(k=0;k<K+1;k++)
> {
>                 for(i=0;i<nLC;i++)
>                 {
>                     for(j=i;j<nLC;j++)
>                     {
>                         MatCovExtra[k][i*nLC+j] = startSigma[i*nLC+j];
>                     }
>                 }
>         }        
> and i check that everithing is ok with
> 
> for(k=0;k<K+1;k++)
> {
>             Rprintf("First Cov Extra %i \n",k);
>             for(i=0;i<nLC;i++)
>             {
>                 for(j=i;j<nLC;j++)
>                 {
>                     Rprintf("%f ", MatCovInv[k][i*nLC+j]);
>                 }
>                 Rprintf("\n");
>             }
>             Rprintf("\n\n");
> 
> }
> 
> After that i define an  R variable
> 
> int nProtect =0;
> SEXP zDP_out_r;
> 
> PROTECT(zDP_out_r          = allocMatrix(INTSXP, nT, nSamples_save));
> nProtect++;
> int *zDP_out_P             = INTEGER(zDP_out_r);
> 
> 
> 
> and using the same syntax as before
> 
> for(k=0;k<K+1;k++)
> {
>             Rprintf("Later Cov Extra %i \n",k);
>             for(i=0;i<nLC;i++)
>             {
>                 for(j=i;j<nLC;j++)
>                 {
>                     Rprintf("%f ", MatCovInv[k][i*nLC+j]);
>                 }
>                 Rprintf("\n");
>             }
>             Rprintf("\n\n");
> 
> }
> 
> I see that the values of MatCovInv[k] have changed.
> 
> Valgrind shows the following error on the second block of Rprintf:
> 
> 
> Later Cov Extra 3  0x107df7fb8
> ==954== Invalid read of size 8
> ==954==    at 0xA92D599: NPHDPHMM (in /Users/NPHDPHMM.so)
> ==954==    by 0x8632A: do_dotcall (dotcode.c:652)
> ==954==    by 0xB036A: Rf_eval (eval.c:657)
> ==954==    by 0xBE8C0: do_set (eval.c:2028)
> ==954==    by 0xB0404: Rf_eval (eval.c:629)
> ==954==    by 0xBE3C4: do_begin (eval.c:1638)
> ==954==    by 0xB0404: Rf_eval (eval.c:629)
> ==954==    by 0xBB95D: Rf_applyClosure (eval.c:1038)
> ==954==    by 0xB03BC: Rf_eval (eval.c:676)
> ==954==    by 0xBE8C0: do_set (eval.c:2028)
> ==954==    by 0xB0404: Rf_eval (eval.c:629)
> ==954==    by 0xE9012: Rf_ReplIteration (main.c:260)
> ==954==  Address 0x107df7fb8 is 40 bytes inside a block of size 176 free'd
> ==954==    at 0x4D8D: free (vg_replace_malloc.c:477)
> ==954==    by 0xF0BCA: R_gc_internal (memory.c:1026)
> ==954==    by 0xF2400: Rf_allocVector3 (memory.c:2578)
> ==954==    by 0x2BBCE: Rf_allocMatrix (Rinlinedfuns.h:189)
> ==954==    by 0xA92D449: NPHDPHMM (in /Users/NPHDPHMM.so)
> ==954==    by 0x8632A: do_dotcall (dotcode.c:652)
> ==954==    by 0xB036A: Rf_eval (eval.c:657)
> ==954==    by 0xBE8C0: do_set (eval.c:2028)
> ==954==    by 0xB0404: Rf_eval (eval.c:629)
> ==954==    by 0xBE3C4: do_begin (eval.c:1638)
> ==954==    by 0xB0404: Rf_eval (eval.c:629)
> ==954==    by 0xBB95D: Rf_applyClosure (eval.c:1038)
> ==954== 
> 
> 
> Where is the error? I tried to search on the internet but i didn't find a
> solution.
> 
> 
> 
> --
> View this message in context: http://r.789695.n4.nabble.com/Invalid-read-of-size-8-tp4702843.html
> Sent from the R devel mailing list archive at Nabble.com.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From h.wickham at gmail.com  Fri Feb  6 19:43:24 2015
From: h.wickham at gmail.com (Hadley Wickham)
Date: Fri, 6 Feb 2015 12:43:24 -0600
Subject: [Rd] as.factor -> S3 generic
Message-ID: <CABdHhvGyS_iRqxP=_Nn=7CpkfWLMG0yQ2HMqV0hMDiGgz7-VEA@mail.gmail.com>

Would it be possible to turn as.factor into an S3 generic? It seems to
be one of the few coercion methods that aren't already generic.

Hadley

-- 
http://had.co.nz/


From marc_grt at yahoo.fr  Fri Feb  6 21:14:29 2015
From: marc_grt at yahoo.fr (Marc Girondot)
Date: Fri, 06 Feb 2015 21:14:29 +0100
Subject: [Rd] Rcurl crash in R-devel
In-Reply-To: <54D33B21.6070906@yahoo.fr>
References: <54D33B21.6070906@yahoo.fr>
Message-ID: <54D520A5.4010909@yahoo.fr>

Update taking into account the answer of Prof Ripley.
___________________________________________________

Below is a reproducing example that produces the crash.
If I do exactly the same in R 3.1.2, it works perfectly.

I have the lastest libcurl library (curl @7.40.0) installed

So, perhaps indeed that the problem originates from RCurl, but the 
problem appears only in R 3.2.

But before to check more carefully, I would like to know if others have 
also a problem using the same configuration : MacOS X 10.10.2 and R 3.2 
or if it is only for me ?

Sincerely,

Marc

Reproducible example:
R Under development (unstable) (2015-02-05 r67741) -- "Unsuffered 
Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

 > install.packages("RCurl")
essai de l'URL 
'http://cran.r-project.org/src/contrib/RCurl_1.95-4.5.tar.gz'
Content type 'application/x-gzip' length 878607 bytes (858 KB)
==================================================
downloaded 858 KB

* installing *source* package ?RCurl? ...
** package ?RCurl? correctement d?compress? et sommes MD5 v?rifi?es

########## I remove the long list of information for the compilation

 > library(RCurl)
Le chargement a n?cessit? le package : bitops
 > #
 > f = CFILE("Pointe_Noire_Sud.kmz.zip", mode="wb")
 > curlPerform(url = 
"http://protomac.org/resources/Pointe_Noire_Sud.kmz.zip", writedata = 
f at ref)

  *** caught segfault ***
address 0x0, cause 'memory not mapped'

Traceback:
  1: .Call("R_curl_easy_perform", curl, .opts, isProtected, 
.encoding,     PACKAGE = "RCurl")
  2: curlPerform(url = 
"http://protomac.org/resources/Pointe_Noire_Sud.kmz.zip", writedata = 
f at ref)




Le 05/02/2015 10:42, Marc Girondot a ?crit :
> Hello,
>
> I don't know if the problem originates from R-devel 3.2 or Rcurl 
> itself. I post this message to the R-devel list and to the author of 
> RCurl (duncan at r-project.org).
>
> > library("RCurl")
> Le chargement a n?cessit? le package : bitops
> > print(sessionInfo())
> R Under development (unstable) (2015-02-03 r67717)
> Platform: x86_64-apple-darwin13.4.0 (64-bit)
> Running under: OS X 10.10.2 (Yosemite)
>
> locale:
> [1] fr_FR.UTF-8/fr_FR.UTF-8/fr_FR.UTF-8/C/fr_FR.UTF-8/fr_FR.UTF-8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods base
>
> other attached packages:
> [1] RCurl_1.95-4.5 bitops_1.0-6
>
> > filepath <- 
> "/Users/marc/Documents/Espace_de_travail_R/package_embryogrowth/embryogrowth/DESCRIPTION"
> > urlx <- 
> "ftp://xxxxx:xxxxxxx at max2.ese.u-psud.fr/conservation/embryogrowth/DESCRIPTION" 
>
>
> > ftpUpload(what=filepath, to=urlx)
>
>  *** caught segfault ***
> address 0x0, cause 'memory not mapped'
>
> Traceback:
>  1: .Call("R_curl_easy_perform", curl, .opts, isProtected, 
> .encoding,     PACKAGE = "RCurl")
>  2: curlPerform(url = to, upload = TRUE, readfunction = 
> uploadFunctionHandler(file,     asText), ..., curl = curl)
>  3: ftpUpload(what = filepath, to = urlx)
>
> Possible actions:
> 1: abort (with core dump, if enabled)
> 2: normal R exit
> 3: exit R without saving workspace
> 4: exit R saving workspace
> Selection:
>
> Hope it will help,
>
> Sincerely,
>
> Marc
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
__________________________________________________________
Marc Girondot, Pr

Laboratoire Ecologie, Syst?matique et Evolution
Equipe de Conservation des Populations et des Communaut?s
CNRS, AgroParisTech et Universit? Paris-Sud 11 , UMR 8079
B?timent 362
91405 Orsay Cedex, France

Tel:  33 1 (0)1.69.15.72.30   Fax: 33 1 (0)1.69.15.73.53
e-mail: marc.girondot at u-psud.fr
Web: http://www.ese.u-psud.fr/epc/conservation/Marc.html
Skype: girondot


	[[alternative HTML version deleted]]


From tkeitt at utexas.edu  Fri Feb  6 21:46:10 2015
From: tkeitt at utexas.edu (Tim Keitt)
Date: Fri, 6 Feb 2015 14:46:10 -0600
Subject: [Rd] Documentation for reg.finalizer
Message-ID: <CANnL8goQYtEDsj7CX0p4DZUsOmH+pLsrzj=7L6H+HC5hrEFrOA@mail.gmail.com>

Documentation says (emphasis mine):

"Registers an R function to be called upon garbage collection of
     object OR (optionally) at the end of an R session."

Should this say "and" and not "or"?

THK

-- 
http://www.keittlab.org/

	[[alternative HTML version deleted]]


From gmbecker at ucdavis.edu  Fri Feb  6 23:07:45 2015
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Fri, 6 Feb 2015 14:07:45 -0800
Subject: [Rd] Rcurl crash in R-devel
In-Reply-To: <54D520A5.4010909@yahoo.fr>
References: <54D33B21.6070906@yahoo.fr>
	<54D520A5.4010909@yahoo.fr>
Message-ID: <CADwqtCO2xaJ2pPmjS8ve=LboMBUOD1Wm0KDv2A8eWSD8P58qtw@mail.gmail.com>

This behavior didn't replicate for me on Linux (Ubuntu 14.04) with a
freshly updated and built R-devel.

~G

On Fri, Feb 6, 2015 at 12:14 PM, Marc Girondot <marc_grt at yahoo.fr> wrote:

> Update taking into account the answer of Prof Ripley.
> ___________________________________________________
>
> Below is a reproducing example that produces the crash.
> If I do exactly the same in R 3.1.2, it works perfectly.
>
> I have the lastest libcurl library (curl @7.40.0) installed
>
> So, perhaps indeed that the problem originates from RCurl, but the
> problem appears only in R 3.2.
>
> But before to check more carefully, I would like to know if others have
> also a problem using the same configuration : MacOS X 10.10.2 and R 3.2
> or if it is only for me ?
>
> Sincerely,
>
> Marc
>
> Reproducible example:
> R Under development (unstable) (2015-02-05 r67741) -- "Unsuffered
> Consequences"
> Copyright (C) 2015 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin13.4.0 (64-bit)
>
>  > install.packages("RCurl")
> essai de l'URL
> 'http://cran.r-project.org/src/contrib/RCurl_1.95-4.5.tar.gz'
> Content type 'application/x-gzip' length 878607 bytes (858 KB)
> ==================================================
> downloaded 858 KB
>
> * installing *source* package ?RCurl? ...
> ** package ?RCurl? correctement d?compress? et sommes MD5 v?rifi?es
>
> ########## I remove the long list of information for the compilation
>
>  > library(RCurl)
> Le chargement a n?cessit? le package : bitops
>  > #
>  > f = CFILE("Pointe_Noire_Sud.kmz.zip", mode="wb")
>  > curlPerform(url =
> "http://protomac.org/resources/Pointe_Noire_Sud.kmz.zip", writedata =
> f at ref)
>
>   *** caught segfault ***
> address 0x0, cause 'memory not mapped'
>
> Traceback:
>   1: .Call("R_curl_easy_perform", curl, .opts, isProtected,
> .encoding,     PACKAGE = "RCurl")
>   2: curlPerform(url =
> "http://protomac.org/resources/Pointe_Noire_Sud.kmz.zip", writedata =
> f at ref)
>
>
>
>
> Le 05/02/2015 10:42, Marc Girondot a ?crit :
> > Hello,
> >
> > I don't know if the problem originates from R-devel 3.2 or Rcurl
> > itself. I post this message to the R-devel list and to the author of
> > RCurl (duncan at r-project.org).
> >
> > > library("RCurl")
> > Le chargement a n?cessit? le package : bitops
> > > print(sessionInfo())
> > R Under development (unstable) (2015-02-03 r67717)
> > Platform: x86_64-apple-darwin13.4.0 (64-bit)
> > Running under: OS X 10.10.2 (Yosemite)
> >
> > locale:
> > [1] fr_FR.UTF-8/fr_FR.UTF-8/fr_FR.UTF-8/C/fr_FR.UTF-8/fr_FR.UTF-8
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods base
> >
> > other attached packages:
> > [1] RCurl_1.95-4.5 bitops_1.0-6
> >
> > > filepath <-
> >
> "/Users/marc/Documents/Espace_de_travail_R/package_embryogrowth/embryogrowth/DESCRIPTION"
> > > urlx <-
> > "
> ftp://xxxxx:xxxxxxx at max2.ese.u-psud.fr/conservation/embryogrowth/DESCRIPTION
> "
> >
> >
> > > ftpUpload(what=filepath, to=urlx)
> >
> >  *** caught segfault ***
> > address 0x0, cause 'memory not mapped'
> >
> > Traceback:
> >  1: .Call("R_curl_easy_perform", curl, .opts, isProtected,
> > .encoding,     PACKAGE = "RCurl")
> >  2: curlPerform(url = to, upload = TRUE, readfunction =
> > uploadFunctionHandler(file,     asText), ..., curl = curl)
> >  3: ftpUpload(what = filepath, to = urlx)
> >
> > Possible actions:
> > 1: abort (with core dump, if enabled)
> > 2: normal R exit
> > 3: exit R without saving workspace
> > 4: exit R saving workspace
> > Selection:
> >
> > Hope it will help,
> >
> > Sincerely,
> >
> > Marc
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> --
> __________________________________________________________
> Marc Girondot, Pr
>
> Laboratoire Ecologie, Syst?matique et Evolution
> Equipe de Conservation des Populations et des Communaut?s
> CNRS, AgroParisTech et Universit? Paris-Sud 11 , UMR 8079
> B?timent 362
> 91405 Orsay Cedex, France
>
> Tel:  33 1 (0)1.69.15.72.30   Fax: 33 1 (0)1.69.15.73.53
> e-mail: marc.girondot at u-psud.fr
> Web: http://www.ese.u-psud.fr/epc/conservation/Marc.html
> Skype: girondot
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, PhD
Computational Biologist
Bioinformatics and Computational Biology
Genentech, Inc.

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Sat Feb  7 00:22:35 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Fri, 06 Feb 2015 18:22:35 -0500
Subject: [Rd] Documentation for reg.finalizer
In-Reply-To: <CANnL8goQYtEDsj7CX0p4DZUsOmH+pLsrzj=7L6H+HC5hrEFrOA@mail.gmail.com>
References: <CANnL8goQYtEDsj7CX0p4DZUsOmH+pLsrzj=7L6H+HC5hrEFrOA@mail.gmail.com>
Message-ID: <54D54CBB.7090800@gmail.com>

On 06/02/2015 3:46 PM, Tim Keitt wrote:
> Documentation says (emphasis mine):
> 
> "Registers an R function to be called upon garbage collection of
>      object OR (optionally) at the end of an R session."
> 
> Should this say "and" and not "or"?
> 
> THK
> 

No.  "Or" in English is in the context the "inclusive or", not the
"exclusive or".  The function will only be called once, either when the
object is garbage collected, or (if the option is selected) at the end
of the session.

Duncan Murdoch


From hb at biostat.ucsf.edu  Sat Feb  7 18:40:25 2015
From: hb at biostat.ucsf.edu (Henrik Bengtsson)
Date: Sat, 7 Feb 2015 09:40:25 -0800
Subject: [Rd] WISH: eval() to preserve the "visibility" (now value is always
	visible)
Message-ID: <CAFDcVCQBgYK3NRWBAHwXV5YAjCMu4gFzBGNw4C8K=oOKBXbmsA@mail.gmail.com>

Would it be possible to have the value of eval() preserve the
"visibility" of the value of the expression?


"PROBLEM":

# Invisible
> x <- 1

# Visible
> eval(x <- 2)
[1] 2


"TROUBLESHOOTING":
> withVisible(x <- 1)
$value
[1] 1
$visible
[1] FALSE

> withVisible(eval(x <- 2))
$value
[1] 2
$visible
[1] TRUE


WORKAROUND:
eval2 <- function(expr, envir=parent.frame(), ...) {
  res <- eval(withVisible(expr), envir=envir, ...)
  value <- res$value
  if (res$visible) value else invisible(value)
}

> x <- 1
> eval(x <- 2)
[1] 2
> eval2(x <- 3)
> x
[1] 3

/Henrik


From murdoch.duncan at gmail.com  Sat Feb  7 18:58:14 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Sat, 07 Feb 2015 12:58:14 -0500
Subject: [Rd] WISH: eval() to preserve the "visibility" (now value is
 always visible)
In-Reply-To: <CAFDcVCQBgYK3NRWBAHwXV5YAjCMu4gFzBGNw4C8K=oOKBXbmsA@mail.gmail.com>
References: <CAFDcVCQBgYK3NRWBAHwXV5YAjCMu4gFzBGNw4C8K=oOKBXbmsA@mail.gmail.com>
Message-ID: <54D65236.60202@gmail.com>

On 07/02/2015 12:40 PM, Henrik Bengtsson wrote:
> Would it be possible to have the value of eval() preserve the
> "visibility" of the value of the expression?
> 
> 
> "PROBLEM":
> 
> # Invisible
>> x <- 1
> 
> # Visible
>> eval(x <- 2)
> [1] 2
> 
> 
> "TROUBLESHOOTING":
>> withVisible(x <- 1)
> $value
> [1] 1
> $visible
> [1] FALSE
> 
>> withVisible(eval(x <- 2))
> $value
> [1] 2
> $visible
> [1] TRUE
> 
> 
> WORKAROUND:
> eval2 <- function(expr, envir=parent.frame(), ...) {
>   res <- eval(withVisible(expr), envir=envir, ...)
>   value <- res$value
>   if (res$visible) value else invisible(value)
> }
> 
>> x <- 1
>> eval(x <- 2)
> [1] 2
>> eval2(x <- 3)
>> x
> [1] 3

What's wrong with the workaround?

Duncan Murdoch


From otoomet at gmail.com  Sun Feb  8 04:52:16 2015
From: otoomet at gmail.com (otoomet)
Date: Sat, 7 Feb 2015 19:52:16 -0800 (PST)
Subject: [Rd] Which function can change RNG state?
Message-ID: <1423367536855-4702935.post@n4.nabble.com>

Today I struggled for hours to understand some unexpected package test
results.  It turned out that this is because package "parallel", buried deep
in my dependencies, calls runif() during it's initialization and in this way
changes the random number sequence.   This seems to be a part of a more
general question--which kind of functions can we trust if we want to
preserve random numbers, and the rest of the environment, like graphical
parameters?    

One could put all the burden on the end user--never trust any of the calls
you make, it is your responsibility to save the RNG state if you wish. 
However, this might be very cumbersome if you have to do this around all
cat(), print() and similar calls that most likely will never tinker with
random numbers.   For instance, can I be sure that
set.seed(0); print(runif(1)); print(rnorm(1))
will always print the same numbers, also in the future version of R?  There
are also commands that we definitely expect to change the RNG state, like
random numbers, bootstrapping, etc.  I just did not expect that library() is
one of them...

I think it would be nice to have some sort of guidelines here.  The only
related sentence I am aware of is in the CRAN policy:
- Packages should not modify the global environment (user?s workspace). 

Any thoughts?

Cheers,
Ott



--
View this message in context: http://r.789695.n4.nabble.com/Which-function-can-change-RNG-state-tp4702935.html
Sent from the R devel mailing list archive at Nabble.com.


From mons.magnusson at gmail.com  Sun Feb  8 14:22:15 2015
From: mons.magnusson at gmail.com (=?UTF-8?Q?M=C3=A5ns_Magnusson?=)
Date: Sun, 8 Feb 2015 14:22:15 +0100
Subject: [Rd] Testthat and global environments in R packages on CRAN
Message-ID: <CAFQDYB2Vz1ysc9GJGLHZoGQaiZe+x_ZDZ3s9HJOY7vNYt6TMoQ@mail.gmail.com>

Hi!

Im currently developing an R package to automatically give students
feedback on programming assignments in R. I use the testthat package as an
engine for the unit testing and do a wrapper to make the automatic marking
easy for the students.

One function (called mark_my_file() ) will mark the students lab file using
testthat tests and a new (simple) reporter. The problem is that I need to
do the marking of the lab with an empty global environment (due to the
testthat package).

So my first thought was to:
1) store the global environement in the temporary directory as an
.Rdata-file
2) clean the global environment
3) run the tests
4) clean the global environment (from the student lab file)
5) reload the old global environment

But the problem is that it is not possible to publish packages on CRAN that
modifies the global environment.

Is there anyone that have any solutions/ideas to this problem?

The package can be found here:
https://github.com/MansMeg/markmyassignment

-- 
Kind regards

M?ns

============================
M?ns Magnusson
+46 (0) 70 588 97 15
mons.magnusson at gmail.com
============================

	[[alternative HTML version deleted]]


From edd at debian.org  Sun Feb  8 15:33:26 2015
From: edd at debian.org (Dirk Eddelbuettel)
Date: Sun, 8 Feb 2015 08:33:26 -0600
Subject: [Rd] Which function can change RNG state?
In-Reply-To: <1423367536855-4702935.post@n4.nabble.com>
References: <1423367536855-4702935.post@n4.nabble.com>
Message-ID: <21719.29622.348898.779301@max.nulle.part>


On 7 February 2015 at 19:52, otoomet wrote:
| random numbers.   For instance, can I be sure that
| set.seed(0); print(runif(1)); print(rnorm(1))
| will always print the same numbers, also in the future version of R?  There

Yes, pretty much.

I've been lurking here over fifteen years, and while I am getting old and
forgetful I can remember exactly one such change where behaviour was changed,
and (one of the) generators was altered---if memory serves in the earlier
days of R 1.* days . [ Goes digging...] Yes, see `help(RNGkind)` which
details that R 1.7.0 made a change when "Buggy Kinderman-Ramage" was added as
the old value, and "Kinderman-Ramage" was repaired.  There once was a similar
fix in the very early days of the Mersenne-Twister which is why the GNU GSL
has two variants with suffixes _1998 and _1998.

So your issue seems like pilot error to me:  don't attach the parallel package
if you do not plan to work in parallel.  But "do if you do", and see its fine
vignette on how it provides you reproducibility for multiple RNG streams.

In general, you can very much trust R (and R Core) in these matters. 

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From csardi.gabor at gmail.com  Sun Feb  8 15:40:42 2015
From: csardi.gabor at gmail.com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sun, 8 Feb 2015 09:40:42 -0500
Subject: [Rd] Which function can change RNG state?
In-Reply-To: <1423367536855-4702935.post@n4.nabble.com>
References: <1423367536855-4702935.post@n4.nabble.com>
Message-ID: <CABtg=Kna=C6hcxE+iwK0FvKHaHSAht3RDE1ttbtq_hjNPzmCuA@mail.gmail.com>

On Sat, Feb 7, 2015 at 10:52 PM, otoomet <otoomet at gmail.com> wrote:
[...]

> random numbers.   For instance, can I be sure that
> set.seed(0); print(runif(1)); print(rnorm(1))
> will always print the same numbers, also in the future version of R?


I don't know if there is intention to keep this reproducible across R
versions, but it is already not reproducible across platforms (with the
same R version):
http://stackoverflow.com/questions/21212326/floating-point-arithmetic-and-reproducibility
FYI.

Gabor

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Sun Feb  8 16:46:58 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Sun, 08 Feb 2015 10:46:58 -0500
Subject: [Rd] Testthat and global environments in R packages on CRAN
In-Reply-To: <CAFQDYB2Vz1ysc9GJGLHZoGQaiZe+x_ZDZ3s9HJOY7vNYt6TMoQ@mail.gmail.com>
References: <CAFQDYB2Vz1ysc9GJGLHZoGQaiZe+x_ZDZ3s9HJOY7vNYt6TMoQ@mail.gmail.com>
Message-ID: <54D784F2.8060006@gmail.com>

On 08/02/2015 8:22 AM, M?ns Magnusson wrote:
> Hi!
> 
> Im currently developing an R package to automatically give students
> feedback on programming assignments in R. I use the testthat package as an
> engine for the unit testing and do a wrapper to make the automatic marking
> easy for the students.
> 
> One function (called mark_my_file() ) will mark the students lab file using
> testthat tests and a new (simple) reporter. The problem is that I need to
> do the marking of the lab with an empty global environment (due to the
> testthat package).
> 
> So my first thought was to:
> 1) store the global environement in the temporary directory as an
> .Rdata-file
> 2) clean the global environment
> 3) run the tests
> 4) clean the global environment (from the student lab file)
> 5) reload the old global environment
> 
> But the problem is that it is not possible to publish packages on CRAN that
> modifies the global environment.
> 
> Is there anyone that have any solutions/ideas to this problem?
> 
> The package can be found here:
> https://github.com/MansMeg/markmyassignment
> 

I don't think that testthat requires you to use the global environment.
 Could you give some example code to show where you think you need it?
Someone could probably come up with a different formulation.

Duncan Murdoch


From mons.magnusson at gmail.com  Sun Feb  8 18:16:05 2015
From: mons.magnusson at gmail.com (=?utf-8?Q?M=C3=A5ns_Magnusson?=)
Date: Sun, 8 Feb 2015 18:16:05 +0100
Subject: [Rd] Testthat and global environments in R packages on CRAN
In-Reply-To: <54D784F2.8060006@gmail.com>
References: <CAFQDYB2Vz1ysc9GJGLHZoGQaiZe+x_ZDZ3s9HJOY7vNYt6TMoQ@mail.gmail.com>
	<54D784F2.8060006@gmail.com>
Message-ID: <FF02BCB9-D999-4547-8FD9-6C1CD7C972C2@gmail.com>

Hi!

The problem is that the test environment inherits from the global environment. See https://github.com/hadley/testthat/blob/master/R/test-files.r

The students labs are simply an R script file. Say that they have an assignment to calculate sqrt(2) and store it in variable a. In the same session they should be able to test the script file when they are done (using a function mark_my_file() in the package). This function will call the testthat tests. 

Say that I have two unit tests. One tests if an object called 'a' exists in the file and the second one tests if 'a' is sqrt(2) and return messages to the students pointing them in the right direction (ie 'a' is missing or is wrong).

The problem is the if the student have an other object 'a' in the global environment but do not create 'a' in their R script file. In this case testthat test will follow the search path and find the object in the global environment and return the wrong (or none) error message due to the global environment.

The only way around this problem is to temporarily store the global environment, clean it and run the tests, and the reload the old global environment. But this solution will not be publishable on CRAN.

I hope this can clarify the problem.

Kind regards
M?ns



Skickat fr?n min iPhone

> 8 feb 2015 kl. 16:46 skrev Duncan Murdoch <murdoch.duncan at gmail.com>:
> 
>> On 08/02/2015 8:22 AM, M?ns Magnusson wrote:
>> Hi!
>> 
>> Im currently developing an R package to automatically give students
>> feedback on programming assignments in R. I use the testthat package as an
>> engine for the unit testing and do a wrapper to make the automatic marking
>> easy for the students.
>> 
>> One function (called mark_my_file() ) will mark the students lab file using
>> testthat tests and a new (simple) reporter. The problem is that I need to
>> do the marking of the lab with an empty global environment (due to the
>> testthat package).
>> 
>> So my first thought was to:
>> 1) store the global environement in the temporary directory as an
>> .Rdata-file
>> 2) clean the global environment
>> 3) run the tests
>> 4) clean the global environment (from the student lab file)
>> 5) reload the old global environment
>> 
>> But the problem is that it is not possible to publish packages on CRAN that
>> modifies the global environment.
>> 
>> Is there anyone that have any solutions/ideas to this problem?
>> 
>> The package can be found here:
>> https://github.com/MansMeg/markmyassignment
> 
> I don't think that testthat requires you to use the global environment.
> Could you give some example code to show where you think you need it?
> Someone could probably come up with a different formulation.
> 
> Duncan Murdoch
> 

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Sun Feb  8 21:46:32 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Sun, 08 Feb 2015 15:46:32 -0500
Subject: [Rd] Testthat and global environments in R packages on CRAN
In-Reply-To: <FF02BCB9-D999-4547-8FD9-6C1CD7C972C2@gmail.com>
References: <CAFQDYB2Vz1ysc9GJGLHZoGQaiZe+x_ZDZ3s9HJOY7vNYt6TMoQ@mail.gmail.com>
	<54D784F2.8060006@gmail.com>
	<FF02BCB9-D999-4547-8FD9-6C1CD7C972C2@gmail.com>
Message-ID: <54D7CB28.2010209@gmail.com>

On 08/02/2015 12:16 PM, M?ns Magnusson wrote:
> Hi!
> 
> The problem is that the test environment inherits from the global
> environment.
> See https://github.com/hadley/testthat/blob/master/R/test-files.r
> 
> The students labs are simply an R script file. Say that they have an
> assignment to calculate sqrt(2) and store it in variable a. In the same
> session they should be able to test the script file when they are done
> (using a function mark_my_file() in the package). This function will
> call the testthat tests. 
> 
> Say that I have two unit tests. One tests if an object called 'a' exists
> in the file and the second one tests if 'a' is sqrt(2) and return
> messages to the students pointing them in the right direction (ie 'a' is
> missing or is wrong).
> 
> The problem is the if the student have an other object 'a' in the global
> environment but do not create 'a' in their R script file. In this case
> testthat test will follow the search path and find the object in the
> global environment and return the wrong (or none) error message due to
> the global environment.
> 
> The only way around this problem is to temporarily store the global
> environment, clean it and run the tests, and the reload the old global
> environment. But this solution will not be publishable on CRAN.
> 
> I hope this can clarify the problem.
> 

But you don't need to use test_env():  it's the default for a number of
other functions, but your function could replace them with something else.

For example, if you want an environment that is like the global
environment but empty, simply create a new one, whose parent is the
parent of globalenv().  For example:

fakeglobal <- new.env(parent = parent.env(globalenv()))

source("studentfile.R", local = fakeglobal)

test_file("yourtests.R", local = fakeglobal)

If the student code (or yours) needs to load packages, this code won't
see them, but there are workarounds for that too.  The main thing is
that the student results will be in fakeglobal, and nothing else will be.

Duncan Murdoch


> Kind regards
> M?ns
> 
> 
> 
> Skickat fr?n min iPhone
> 
> 8 feb 2015 kl. 16:46 skrev Duncan Murdoch <murdoch.duncan at gmail.com
> <mailto:murdoch.duncan at gmail.com>>:
> 
>> On 08/02/2015 8:22 AM, M?ns Magnusson wrote:
>>> Hi!
>>>
>>> Im currently developing an R package to automatically give students
>>> feedback on programming assignments in R. I use the testthat package
>>> as an
>>> engine for the unit testing and do a wrapper to make the automatic
>>> marking
>>> easy for the students.
>>>
>>> One function (called mark_my_file() ) will mark the students lab file
>>> using
>>> testthat tests and a new (simple) reporter. The problem is that I need to
>>> do the marking of the lab with an empty global environment (due to the
>>> testthat package).
>>>
>>> So my first thought was to:
>>> 1) store the global environement in the temporary directory as an
>>> .Rdata-file
>>> 2) clean the global environment
>>> 3) run the tests
>>> 4) clean the global environment (from the student lab file)
>>> 5) reload the old global environment
>>>
>>> But the problem is that it is not possible to publish packages on
>>> CRAN that
>>> modifies the global environment.
>>>
>>> Is there anyone that have any solutions/ideas to this problem?
>>>
>>> The package can be found here:
>>> https://github.com/MansMeg/markmyassignment
>>>
>>
>> I don't think that testthat requires you to use the global environment.
>> Could you give some example code to show where you think you need it?
>> Someone could probably come up with a different formulation.
>>
>> Duncan Murdoch
>>


From snowyfox at 163.com  Mon Feb  9 04:56:27 2015
From: snowyfox at 163.com (=?GBK?B?xLrI59Gp?=)
Date: Mon, 9 Feb 2015 11:56:27 +0800 (CST)
Subject: [Rd] How to unload R.dll successfully by FreeLibrary
Message-ID: <7e8dc1d7.561b.14b6c7b31bb.Coremail.snowyfox@163.com>

hi,
   I write some code to check the R.dll reference count, and find after LoadLibrary, the R.dll reference count is 3 instead of 1, and after call pfnInit, the reference count is 19, means the R.dll got loaded many times after call pfnInit, even after call  LoadLibrary, I assume the reference count should be 1, Now I wonder how to decrease the reference count increased by pfnInit, seems pfnEnd does NOT decrease the reference count to 3. I find easy time I call FreeLibrary, the reference count decrease by 3 each time, so I guess if there is a way to decrease the the count by 16(which is increased by pfnInit), I can unload the R.dll successfully by FreeLibrary.


So anyone will be kind to point me to the right direction, thanks.



????????????????????????????









	[[alternative HTML version deleted]]


From suharto_anggono at yahoo.com  Mon Feb  9 05:44:22 2015
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Sun, 8 Feb 2015 20:44:22 -0800
Subject: [Rd] WISH: eval() to preserve the "visibility" (now value is
	always visible)
Message-ID: <1423457062.96931.YahooMailBasic@web125104.mail.ne1.yahoo.com>

Sorry to intervene.

Argument passed to 'eval' is evaluated first.
So,
eval(x <- 2)
is effectively like
{ x <- 2; eval(2) } ,
which is effectively
{ x <- 2; 2 } .
The result is visible.

eval(expression(x <- 2))
or
eval(quote(x <- 2))
or
evalq(x <- 2)
gives the same effect as
x <- 2 .
The result is invisible.

In function 'eval2',
res <- eval(withVisible(expr), envir=envir, ...)
is effectively
res <- withVisible(expr) .

-------------------

Would it be possible to have the value of eval() preserve the
"visibility" of the value of the expression?


"PROBLEM":

# Invisible
> x <- 1

# Visible
> eval(x <- 2)
[1] 2

"TROUBLESHOOTING":
> withVisible(x <- 1)
$value
[1] 1
$visible
[1] FALSE

> withVisible(eval(x <- 2))
$value
[1] 2
$visible
[1] TRUE


WORKAROUND:
eval2 <- function(expr, envir=parent.frame(), ...) {
  res <- eval(withVisible(expr), envir=envir, ...)
  value <- res$value
  if (res$visible) value else invisible(value)
}

> x <- 1
> eval(x <- 2)
[1] 2
> eval2(x <- 3)
> x
[1] 3

/Henrik


From pgilbert902 at gmail.com  Mon Feb  9 06:03:11 2015
From: pgilbert902 at gmail.com (Paul Gilbert)
Date: Mon, 09 Feb 2015 00:03:11 -0500
Subject: [Rd] Which function can change RNG state?
In-Reply-To: <21719.29622.348898.779301@max.nulle.part>
References: <1423367536855-4702935.post@n4.nabble.com>
	<21719.29622.348898.779301@max.nulle.part>
Message-ID: <54D83F8F.2020605@gmail.com>


On 02/08/2015 09:33 AM, Dirk Eddelbuettel wrote:
>
> On 7 February 2015 at 19:52, otoomet wrote:
> | random numbers.   For instance, can I be sure that
> | set.seed(0); print(runif(1)); print(rnorm(1))
> | will always print the same numbers, also in the future version of R?  There
>
> Yes, pretty much.

This is nearly correct. The user could change the uniform or normal 
generator, since there are options other than the defaults, which would 
mean the result would be different. And obviously if they changed print 
precision then the printed result may be truncated differently.

I think you could prepare for future versions of R by saving information 
about the generators you are using. The precedent has already been set 
(R-1.7.0) that the default could change if there is a good reason. A 
good reason might be that the RNG is found not to be so good relative to 
others that become available. But I think the old generator would 
continue to be available, so people can reproduce old results. (Package 
setRNG has some utilities to help save and reset, but there is nothing 
especially difficult or fancy, just a few details that need to be 
remembered.)
>
> I've been lurking here over fifteen years, and while I am getting old and
> forgetful I can remember exactly one such change where behaviour was changed,
> and (one of the) generators was altered---if memory serves in the earlier
> days of R 1.* days . [ Goes digging...] Yes, see `help(RNGkind)` which
> details that R 1.7.0 made a change when "Buggy Kinderman-Ramage" was added as
> the old value, and "Kinderman-Ramage" was repaired.  There once was a similar
> fix in the very early days of the Mersenne-Twister which is why the GNU GSL
> has two variants with suffixes _1998 and _1998.

I seem to recall a bit of change around R-0.49 but old and forgetful 
would cover this too. For me, a bigger change was an unadvertised change 
in Splus - they compiled against a different math library at some point. 
This changed the lower bits in results, mostly insignificant but 
accumulated simulation results could amount to something fairly 
important. The amount of time I spent trying to find why results would 
not reproduce was one of my main motivations for starting to use R.
>
> So your issue seems like pilot error to me:  don't attach the parallel package
> if you do not plan to work in parallel.  But "do if you do", and see its fine
> vignette on how it provides you reproducibility for multiple RNG streams.
>
> In general, you can very much trust R (and R Core) in these matters.
>
> Dirk

On 02/08/2015 09:40 AM, G?bor Cs?rdi wrote:> On Sat, Feb 7, 2015 at
 > I don't know if there is intention to keep this reproducible across R
 > versions, but it is already not reproducible across platforms (with
 >the same R version):
 > 
http://stackoverflow.com/questions/21212326/floating-point-arithmetic-and-reproducibility

The situation is better in some respects, and worse in others, than what 
is described on stackoverflow. I think the point is made pretty well 
there that you should not be trying to reproduce results beyond machine 
precision. My experience is that you can compare within a fuzz of 1e-14 
usually, even across platforms. (The package setRNG on CRAN has a 
function random.number.test() which is run in the package's tests/ and 
makes uniform and normal comparisons to 1e-14. It has passed checks on 
all R platforms since 2004. Actual, the checks have been done since 
about 1995 but they were part of package dse earlier.)  If you 
accumulate lots of lower order parts (eg sum(simulated - true) in a long 
monte-carlo) then the fuzz may need to get much larger, especially 
comparing across platforms. And you will have trouble with numerically 
unstable calculations. Once-upon-a-time I was annoyed by this, but then 
I realized that it was better not to do unstable calculations.

In addition to not being reproducible beyond machine precision across R 
versions and across platforms, you can really not be guaranteed even on 
the same platform and same version of R. You may get different results 
if you upgrade the OS and there has been a change in the math libraries. 
In my experience this happens rather often. I don't think there is any 
specific 32 vs 64 bit issue, but math libraries sometimes do things a 
bit differently on different processors (eg processor bug fixes) so you 
can occasionally get differences with everything the same except the 
hardware.


On 02/07/2015 10:52 PM, otoomet wrote:
 > It turned out that this is because package "parallel", buried deep
 > in my dependencies, calls runif() during it's initialization and
 > in this way changes the random number sequence.

Guessing a bit about what you are saying: 1/you set the random seed 
2/you did some things which included loading package parallel 3/you ran 
some things for which you expected to get results comparable to some 
previous run when you did 1/ and 2/ in the reverse order.

If I understand this correctly, I suggest you always do everything 
exactly the same after you set the seed. There are lots of things that 
could generate random numbers without you really knowing. Thus, it is 
usually better to set the seed immediately before you start doing 
anything where you want the seed to have a known state. (There is an 
even better suggestion in the somewhat dated vignette with package setRNG.)

Finally, if you do intend to use parallel sometimes then you have 
additional considerations. You would like to get the same results no 
matter how many machines you are using. This may place some constraints 
on the generators you use, not all are equally easy to use in parallel. 
So if you are hoping to get the same results in parallel as you get on a 
single machine then you better start out using generators on the single 
machine that you will be able to use in parallel.

Paul


From kirill.mueller at ivt.baug.ethz.ch  Mon Feb  9 14:52:33 2015
From: kirill.mueller at ivt.baug.ethz.ch (=?UTF-8?B?S2lyaWxsIE3DvGxsZXI=?=)
Date: Mon, 9 Feb 2015 14:52:33 +0100
Subject: [Rd] xtabs and NA
Message-ID: <54D8BBA1.5030409@ivt.baug.ethz.ch>

Hi


I haven't found a way to produce a tabulation from factor data with NA 
values using xtabs. Please find a minimal example below, it's also on 
R-pubs [1]. Tested with R 3.1.2 and R-devel r67720.

It doesn't seem to be documented explicitly that it's not supported. 
 From reading the code [2] it looks like the relevant call to table() 
doesn't set the "useNA" parameter, which I think is necessary to make 
NAs show up in the result.

Am I missing anything? If this a bug -- would a patch be welcome? Do we 
need compatibility with the current behavior?

I'm aware of workarounds, I just prefer xtabs() over table() for its 
interface.

Thanks.


Best regards

Kirill


[1] http://rpubs.com/krlmlr/xtabs-NA
[2] 
https://github.com/wch/r-source/blob/780021752eb83a71e2198019acf069ba8741103b/src/library/stats/R/xtabs.R#L60


data <- factor(letters[1:4], levels = letters[1:3])
data
## [1] a    b    c    <NA>
## Levels: a b c
xtabs(~data)
## data
## a b c
## 1 1 1
xtabs(~data, na.action = na.pass)
## data
## a b c
## 1 1 1
xtabs(~data, na.action = na.pass, exclude = numeric())
## data
## a b c
## 1 1 1
xtabs(~data, na.action = na.pass, exclude = NULL)
## data
## a b c
## 1 1 1
sessionInfo()
## R version 3.1.2 (2014-10-31)
## Platform: x86_64-pc-linux-gnu (64-bit)
##
## locale:
##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8
##  [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8
##  [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods base
##
## other attached packages:
## [1] magrittr_1.5            ProjectTemplate_0.6-1.0
##
## loaded via a namespace (and not attached):
## [1] digest_0.6.8    evaluate_0.5.7  formatR_1.0.3 htmltools_0.2.6
## [5] knitr_1.9.2     rmarkdown_0.5.1 stringr_0.6.2 tools_3.1.2
## [9] ulimit_0.0-2


From ggrothendieck at gmail.com  Mon Feb  9 16:59:39 2015
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Mon, 9 Feb 2015 10:59:39 -0500
Subject: [Rd] xtabs and NA
In-Reply-To: <54D8BBA1.5030409@ivt.baug.ethz.ch>
References: <54D8BBA1.5030409@ivt.baug.ethz.ch>
Message-ID: <CAP01uRn-fCa222jXu7Z+VzqhVUohjpGwFcbpXeOn5xH7BaBRLw@mail.gmail.com>

On Mon, Feb 9, 2015 at 8:52 AM, Kirill M?ller
<kirill.mueller at ivt.baug.ethz.ch> wrote:
> Hi
>
>
> I haven't found a way to produce a tabulation from factor data with NA
> values using xtabs. Please find a minimal example below, it's also on R-pubs
> [1]. Tested with R 3.1.2 and R-devel r67720.
>
> It doesn't seem to be documented explicitly that it's not supported. From
> reading the code [2] it looks like the relevant call to table() doesn't set
> the "useNA" parameter, which I think is necessary to make NAs show up in the
> result.
>
> Am I missing anything? If this a bug -- would a patch be welcome? Do we need
> compatibility with the current behavior?
>
> I'm aware of workarounds, I just prefer xtabs() over table() for its
> interface.
>

Passing table the output of model.frame would still allow the use of a
formula interface:

> mf <- model.frame( ~ data, na.action = na.pass)
> do.call("table", c(mf, useNA = "ifany"))

   a    b    c <NA>
   1    1    1    1


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From xavier.robin at bric.ku.dk  Mon Feb  9 23:08:41 2015
From: xavier.robin at bric.ku.dk (Xavier Robin)
Date: Mon, 09 Feb 2015 23:08:41 +0100
Subject: [Rd] =?utf-8?q?R_CMD_check=3A_Uses_the_superseded_package=3A_?=
 =?utf-8?b?4oCYZG9TTk9X4oCZ?=
Message-ID: <54D92FE9.8010502@bric.ku.dk>

Dear list,

When I run an R CMD check --as-cran on my package (pROC) I get the
following note:
> Uses the superseded package: ?doSNOW?
The fact that it uses the doSNOW package is correct as I have the
following example in an .Rd file:
> #ifdef windows
> if (require(doSNOW)) {
>     registerDoSNOW(cl <- makeCluster(2, type = "SOCK"))
>     ci(roc2, method="bootstrap", parallel=TRUE)
>     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
>     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
>     stopCluster(cl)
> }
> #endif
> #ifdef unix
> if (require(doMC)) {
>     registerDoMC(2)
>     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
>     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
> }
> #endif

The "superseded" part is more confusing to me, though. The doSNOW
package seems to be still available on CRAN with no special notice,
listed in the HighPerformanceComputing view likewise, and under active
development (last change a couple of days ago on R-Forge). I could find
no mention of what it has been superseded with. Surprisingly, Google was
no help on this.

I could see the note is triggered in QC.R file of the tools package.
However this finding is not much help and leaves me just as confused as
before.

I recall spending quite some time to setup this example to run both
under Windows and Unix. doSNOW was the only way I could get it to work
there. doMC is apparently still available for Unix only. I couldn't get
doRNG to work on either platforms.

So what is R CMD check noticing me about?
Should I ignore the notice, or take an action? If so, which one?

Best wishes,
Xavier

-- 
Xavier Robin, PhD
Cellular Signal Integration Group (C-SIG)  - Linding Lab
Biotech Research and Innovation Center (BRIC) - University of Copenhagen
Anker Engelundsvej, DTU Campus, Building 301, DK-2800 Lyngby, DENMARK
Mobile: +45 42 799 833
www.lindinglab.org - www.bric.ku.dk


From mario.annau at gmail.com  Mon Feb  9 23:28:03 2015
From: mario.annau at gmail.com (Mario Annau)
Date: Mon, 09 Feb 2015 23:28:03 +0100
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <21711.24672.449563.817210@stat.math.ethz.ch>
References: <54C35EB5.3060402@gmail.com>	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>	<21702.11046.319866.816795@stat.math.ethz.ch>	<CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>
	<21711.24672.449563.817210@stat.math.ethz.ch>
Message-ID: <54D93473.2040609@gmail.com>

Hi Michael,
I've tested your change in r67699 (using r67773) and the function now
correctly dispatches to r/cbind2 within the R-session without
bind_activation(TRUE). However, running unit tests using R CMD check I
figured out that the same function call delegates to r/cbind.matrix
(function uses S4 class as first- and matrix as second argument). Is
this a bug and/or how can I get function dispatch right (to r/cbind2)
for my test cases?
best,
mario


Am 02/02/15 um 12:32 schrieb Martin Maechler:
>>>>>> Michael Lawrence <lawrence.michael at gene.com>
>>>>>>     on Sun, 1 Feb 2015 19:23:06 -0800 writes:
> 
>     > I've implemented the proposed changes in
>     > R-devel. Minimally tested, so please try it. It should
>     > delegate to r/cbind2 when there is at least one S4
>     > argument and S3 dispatch fails (so you'll probably want to
>     > add an S3 method for your class to introduce a conflict,
>     > otherwise it will dispatch to cbind.data.frame if one of
>     > the args is a data.frame). There may no longer be a need
>     > for cBind() and rBind().
> 
>     > Michael
> 
> This sounds great!   Thank you very much, Michael!
> :-) :-)
> 
> ... but .... :-(  experiments with the Matrix package (and R
> devel with your change), show a remaining buglet with treating of dimnames :
> 
>    > M1 <- Matrix(m1 <- matrix(1:12, 3,4))
>    > cbind(m1, MM = -1)
> 		 MM
>    [1,] 1 4 7 10 -1
>    [2,] 2 5 8 11 -1
>    [3,] 3 6 9 12 -1
>    > cbind(M1, MM = -1)   ## ---- notice the "..."
>    3 x 5 Matrix of class "dgeMatrix"
> 		 ...
>    [1,] 1 4 7 10  -1
>    [2,] 2 5 8 11  -1
>    [3,] 3 6 9 12  -1
>    > rbind(R1 = 10:11, m1)
>       [,1] [,2] [,3] [,4]
>    R1   10   11   10   11
> 	 1    4    7   10
> 	 2    5    8   11
> 	 3    6    9   12
>    > rbind(R1 = 10:11, M1) ## --- notice the 'deparse.level'
>    4 x 4 Matrix of class "dgeMatrix"
> 		 [,1] [,2] [,3] [,4]
>    deparse.level   10   11   10   11
> 		    1    4    7   10
> 		    2    5    8   11
> 		    3    6    9   12
>    > 
> 
> Also, it seems you are not observing the 'deparse.level'
> argument at all: 
> Looking at the last three lines of the example in  ?cbind,
> 
>      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
>      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames (default)
>      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
>      
> but using a Matrix matrix 'dd', we see that (row)names
> construction needs to amended:
> 
>   > (dd <- Matrix(rbind(c(0:1,0,0))))
>   1 x 4 sparse Matrix of class "dgCMatrix"
> 
>   [1,] . 1 . .
> 
>   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
>   4 x 4 sparse Matrix of class "dgCMatrix"
> 
>   deparse.level  1  2  3  4
>   c              2  2  2  2
>   a++           10 10 10 10
> 		 .  1  .  .
>   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames (default)
>   4 x 4 sparse Matrix of class "dgCMatrix"
> 
>   deparse.level  1  2  3  4
>   c              2  2  2  2
>   a++           10 10 10 10
> 		 .  1  .  .
>   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
>   4 x 4 sparse Matrix of class "dgCMatrix"
> 
>   deparse.level  1  2  3  4
>   c              2  2  2  2
>   a++           10 10 10 10
> 		 .  1  .  .
>   > 
> 
> 
> 
>     > On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
>     > maechler at lynne.stat.math.ethz.ch> wrote:
> 
>     >> >>>>> Michael Lawrence <lawrence.michael at gene.com> >>>>>
>     >> on Sat, 24 Jan 2015 06:39:37 -0800 writes:
>     >> 
>     >> > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau >
>     >> <mario.annau at gmail.com> wrote: >> Hi all, this question
>     >> has already been posted on >> stackoverflow, however
>     >> without success, see also
>     >> >>
>     >> http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
>     >> .
>     >> >>
>     >> >> I have written a package using S4 classes and would
>     >> like >> to use the functions rbind, cbind with these
>     >> defined >> classes.
>     >> >>
>     >> >> Since it does not seem to be possible to define rbind
>     >> and >> cbind directly as S4 methods (see ?cBind) I
>     >> defined >> rbind2 and cbind2 instead:
>     >> >>
>     >> 
>     >> > This needs some clarification. It certainly is possible
>     >> to > define cbind and rbind methods. The BiocGenerics
>     >> package > defines generics for those and many methods are
>     >> defined by > e.g. S4Vectors, IRanges, etc.  The issue is
>     >> that dispatch > on "..." is singular, i.e., you can only
>     >> specify one class > that all args in "..." must share
>     >> (potentially through > inheritance).
>     >> 
>     >> > Thus, trying to combine objects from a > different
>     >> hierarchy (or non-S4 objects) will not > work.
>     >> 
>     >> Yes, indeed, that's the drawback
>     >> 
>     >> I've been there almost surely before everyone else, with
>     >> the Matrix package...  and I have been the author of
>     >> cbind2(), rbind2(), and of course, of cBind(), and
>     >> rBind().
>     >> 
>     >> At the time when I introduced these, the above
>     >> possibility of writing S4 methods for '...'  where not
>     >> yet part of R.
>     >> 
>     >> > This has not been a huge problem for us in >
>     >> practice. For example, we have a DataFrame object that >
>     >> mimics data.frame. To cbind a data.frame with a
>     >> DataFrame, > the user can just call the DataFrame() >
>     >> constructor. rbind() between different data structures is
>     >> > much less common.
>     >> 
>     >> well... yes and no.  Think of using the Matrix package,
>     >> maybe with another package that defines another
>     >> generalized matrix class...  It would be nice if things
>     >> worked automatically / perfectly there.
>     >> 
>     >> > The cBind and rBind functions in Matrix (and the
>     >> r/cbind > that get installed by bind_activation, the code
>     >> is shared) > work by recursing, dropping the first
>     >> argument until two > are left, and then combining with
>     >> r/cbind2(). The Biobase > package uses a similar strategy
>     >> to mimic c() via its > non-standard combine()
>     >> generic. The nice thing about the > combine() approach is
>     >> the user entry point and the generic > are the same,
>     >> instead of having methods on rbind2() and > the user
>     >> calling rBind().
>     >> 
>     >> > I would argue that bind_activation(TRUE) should be >
>     >> discouraged,
>     >> 
>     >> Yes, you are right Michael; it should be discouraged at
>     >> least to be run in a *package*.  One could think of its
>     >> use by an explicit user call.
>     >> 
>     >> > because it replaces the native rbind and > cbind with
>     >> recursive variants that are going to cause > problems,
>     >> performance and otherwise. This is why it is >
>     >> hidden. Perhaps a reasonable compromise would be for the
>     >> > native cbind and rbind to check whether any arguments
>     >> are > S4 and if so, resort to recursion. Recursion does
>     >> seem to > be a clean way to implement "type promotion",
>     >> i.e., to > answer the question "which type should the
>     >> result be when > faced with mixed-type args?".
>     >> 
>     >> Exactly.  That has been my idea at the time ..  ((yes,
>     >> I'm also the author of the bind_activation()
>     >> "(mis)functionality".))
>     >> 
>     >> > Hopefully others have better ideas.
>     >> 
>     >> that would be great.
>     >> 
>     >> And even if not, it would be great if we could implement
>     >> your idea > Perhaps a reasonable compromise would be for
>     >> the > native cbind and rbind to check whether any
>     >> arguments are > S4 and if so, resort to recursion.
>     >> 
>     >> without a noticable performance penalty in the case of no
>     >> S4 arguments.
>     >> 
>     >> Martin
>     >> 
>     >> 
>     >> > Michael
>     >> 
>     >> >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
>     >> >> function(x, y) { # Do stuff ...  })
>     >> >>
>     >> >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
>     >> >> function(x, y) { # Do stuff ...  })
>     >> >>
>     >> >> >From ?cbind2 I learned that these functions need to
>     >> be >> activated using methods:::bind_activation to
>     >> replace >> rbind and cbind from base.
>     >> >>
>     >> >> I included the call in the package file R/zzz.R using
>     >> the >> .onLoad function:
>     >> >>
>     >> >> .onLoad <- function(...) { # Bind activation of
>     >> cbind(2) >> and rbind(2) for S4 classes >>
>     >> methods:::bind_activation(TRUE) } This works as >>
>     >> expected. However, running R CMD check I am now getting
>     >> >> the following NOTE since I am using an unexported >>
>     >> function in methods:
>     >> >>
>     >> >> * checking dependencies in R code ... NOTE Unexported
>     >> >> object imported by a ':::' call: >>
>     >> 'methods:::bind_activation' See the note in ?`:::` about
>     >> >> the use of this operator.  How can I get rid of the
>     >> NOTE >> and what is the proper way to define the methods
>     >> cbind >> and rbind for S4 classes in a package?
>     >> >>
>     >> >> Best, mario
>     >> >>
>     >> >> ______________________________________________ >>
>     >> R-devel at r-project.org mailing list >>
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> 
>     >> > ______________________________________________ >
>     >> R-devel at r-project.org mailing list >
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> 
>


From lawrence.michael at gene.com  Mon Feb  9 23:38:29 2015
From: lawrence.michael at gene.com (Michael Lawrence)
Date: Mon, 9 Feb 2015 14:38:29 -0800
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <54D93473.2040609@gmail.com>
References: <54C35EB5.3060402@gmail.com>
	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>
	<21702.11046.319866.816795@stat.math.ethz.ch>
	<CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>
	<21711.24672.449563.817210@stat.math.ethz.ch>
	<54D93473.2040609@gmail.com>
Message-ID: <CAOQ5NydfFwc=iq47-fay_dp-r-XLtO=kt_0b3c7F=nGkjXmY_g@mail.gmail.com>

Are you able to create a reproducible example, somehow?

Thanks,
Michael

On Mon, Feb 9, 2015 at 2:28 PM, Mario Annau <mario.annau at gmail.com> wrote:

> Hi Michael,
> I've tested your change in r67699 (using r67773) and the function now
> correctly dispatches to r/cbind2 within the R-session without
> bind_activation(TRUE). However, running unit tests using R CMD check I
> figured out that the same function call delegates to r/cbind.matrix
> (function uses S4 class as first- and matrix as second argument). Is
> this a bug and/or how can I get function dispatch right (to r/cbind2)
> for my test cases?
> best,
> mario
>
>
> Am 02/02/15 um 12:32 schrieb Martin Maechler:
> >>>>>> Michael Lawrence <lawrence.michael at gene.com>
> >>>>>>     on Sun, 1 Feb 2015 19:23:06 -0800 writes:
> >
> >     > I've implemented the proposed changes in
> >     > R-devel. Minimally tested, so please try it. It should
> >     > delegate to r/cbind2 when there is at least one S4
> >     > argument and S3 dispatch fails (so you'll probably want to
> >     > add an S3 method for your class to introduce a conflict,
> >     > otherwise it will dispatch to cbind.data.frame if one of
> >     > the args is a data.frame). There may no longer be a need
> >     > for cBind() and rBind().
> >
> >     > Michael
> >
> > This sounds great!   Thank you very much, Michael!
> > :-) :-)
> >
> > ... but .... :-(  experiments with the Matrix package (and R
> > devel with your change), show a remaining buglet with treating of
> dimnames :
> >
> >    > M1 <- Matrix(m1 <- matrix(1:12, 3,4))
> >    > cbind(m1, MM = -1)
> >                MM
> >    [1,] 1 4 7 10 -1
> >    [2,] 2 5 8 11 -1
> >    [3,] 3 6 9 12 -1
> >    > cbind(M1, MM = -1)   ## ---- notice the "..."
> >    3 x 5 Matrix of class "dgeMatrix"
> >                ...
> >    [1,] 1 4 7 10  -1
> >    [2,] 2 5 8 11  -1
> >    [3,] 3 6 9 12  -1
> >    > rbind(R1 = 10:11, m1)
> >       [,1] [,2] [,3] [,4]
> >    R1   10   11   10   11
> >        1    4    7   10
> >        2    5    8   11
> >        3    6    9   12
> >    > rbind(R1 = 10:11, M1) ## --- notice the 'deparse.level'
> >    4 x 4 Matrix of class "dgeMatrix"
> >                [,1] [,2] [,3] [,4]
> >    deparse.level   10   11   10   11
> >                   1    4    7   10
> >                   2    5    8   11
> >                   3    6    9   12
> >    >
> >
> > Also, it seems you are not observing the 'deparse.level'
> > argument at all:
> > Looking at the last three lines of the example in  ?cbind,
> >
> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2
> rownames
> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames
> (default)
> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
> >
> > but using a Matrix matrix 'dd', we see that (row)names
> > construction needs to amended:
> >
> >   > (dd <- Matrix(rbind(c(0:1,0,0))))
> >   1 x 4 sparse Matrix of class "dgCMatrix"
> >
> >   [1,] . 1 . .
> >
> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2
> rownames
> >   4 x 4 sparse Matrix of class "dgCMatrix"
> >
> >   deparse.level  1  2  3  4
> >   c              2  2  2  2
> >   a++           10 10 10 10
> >                .  1  .  .
> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames
> (default)
> >   4 x 4 sparse Matrix of class "dgCMatrix"
> >
> >   deparse.level  1  2  3  4
> >   c              2  2  2  2
> >   a++           10 10 10 10
> >                .  1  .  .
> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
> >   4 x 4 sparse Matrix of class "dgCMatrix"
> >
> >   deparse.level  1  2  3  4
> >   c              2  2  2  2
> >   a++           10 10 10 10
> >                .  1  .  .
> >   >
> >
> >
> >
> >     > On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
> >     > maechler at lynne.stat.math.ethz.ch> wrote:
> >
> >     >> >>>>> Michael Lawrence <lawrence.michael at gene.com> >>>>>
> >     >> on Sat, 24 Jan 2015 06:39:37 -0800 writes:
> >     >>
> >     >> > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau >
> >     >> <mario.annau at gmail.com> wrote: >> Hi all, this question
> >     >> has already been posted on >> stackoverflow, however
> >     >> without success, see also
> >     >> >>
> >     >>
> http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
> >     >> .
> >     >> >>
> >     >> >> I have written a package using S4 classes and would
> >     >> like >> to use the functions rbind, cbind with these
> >     >> defined >> classes.
> >     >> >>
> >     >> >> Since it does not seem to be possible to define rbind
> >     >> and >> cbind directly as S4 methods (see ?cBind) I
> >     >> defined >> rbind2 and cbind2 instead:
> >     >> >>
> >     >>
> >     >> > This needs some clarification. It certainly is possible
> >     >> to > define cbind and rbind methods. The BiocGenerics
> >     >> package > defines generics for those and many methods are
> >     >> defined by > e.g. S4Vectors, IRanges, etc.  The issue is
> >     >> that dispatch > on "..." is singular, i.e., you can only
> >     >> specify one class > that all args in "..." must share
> >     >> (potentially through > inheritance).
> >     >>
> >     >> > Thus, trying to combine objects from a > different
> >     >> hierarchy (or non-S4 objects) will not > work.
> >     >>
> >     >> Yes, indeed, that's the drawback
> >     >>
> >     >> I've been there almost surely before everyone else, with
> >     >> the Matrix package...  and I have been the author of
> >     >> cbind2(), rbind2(), and of course, of cBind(), and
> >     >> rBind().
> >     >>
> >     >> At the time when I introduced these, the above
> >     >> possibility of writing S4 methods for '...'  where not
> >     >> yet part of R.
> >     >>
> >     >> > This has not been a huge problem for us in >
> >     >> practice. For example, we have a DataFrame object that >
> >     >> mimics data.frame. To cbind a data.frame with a
> >     >> DataFrame, > the user can just call the DataFrame() >
> >     >> constructor. rbind() between different data structures is
> >     >> > much less common.
> >     >>
> >     >> well... yes and no.  Think of using the Matrix package,
> >     >> maybe with another package that defines another
> >     >> generalized matrix class...  It would be nice if things
> >     >> worked automatically / perfectly there.
> >     >>
> >     >> > The cBind and rBind functions in Matrix (and the
> >     >> r/cbind > that get installed by bind_activation, the code
> >     >> is shared) > work by recursing, dropping the first
> >     >> argument until two > are left, and then combining with
> >     >> r/cbind2(). The Biobase > package uses a similar strategy
> >     >> to mimic c() via its > non-standard combine()
> >     >> generic. The nice thing about the > combine() approach is
> >     >> the user entry point and the generic > are the same,
> >     >> instead of having methods on rbind2() and > the user
> >     >> calling rBind().
> >     >>
> >     >> > I would argue that bind_activation(TRUE) should be >
> >     >> discouraged,
> >     >>
> >     >> Yes, you are right Michael; it should be discouraged at
> >     >> least to be run in a *package*.  One could think of its
> >     >> use by an explicit user call.
> >     >>
> >     >> > because it replaces the native rbind and > cbind with
> >     >> recursive variants that are going to cause > problems,
> >     >> performance and otherwise. This is why it is >
> >     >> hidden. Perhaps a reasonable compromise would be for the
> >     >> > native cbind and rbind to check whether any arguments
> >     >> are > S4 and if so, resort to recursion. Recursion does
> >     >> seem to > be a clean way to implement "type promotion",
> >     >> i.e., to > answer the question "which type should the
> >     >> result be when > faced with mixed-type args?".
> >     >>
> >     >> Exactly.  That has been my idea at the time ..  ((yes,
> >     >> I'm also the author of the bind_activation()
> >     >> "(mis)functionality".))
> >     >>
> >     >> > Hopefully others have better ideas.
> >     >>
> >     >> that would be great.
> >     >>
> >     >> And even if not, it would be great if we could implement
> >     >> your idea > Perhaps a reasonable compromise would be for
> >     >> the > native cbind and rbind to check whether any
> >     >> arguments are > S4 and if so, resort to recursion.
> >     >>
> >     >> without a noticable performance penalty in the case of no
> >     >> S4 arguments.
> >     >>
> >     >> Martin
> >     >>
> >     >>
> >     >> > Michael
> >     >>
> >     >> >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
> >     >> >> function(x, y) { # Do stuff ...  })
> >     >> >>
> >     >> >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
> >     >> >> function(x, y) { # Do stuff ...  })
> >     >> >>
> >     >> >> >From ?cbind2 I learned that these functions need to
> >     >> be >> activated using methods:::bind_activation to
> >     >> replace >> rbind and cbind from base.
> >     >> >>
> >     >> >> I included the call in the package file R/zzz.R using
> >     >> the >> .onLoad function:
> >     >> >>
> >     >> >> .onLoad <- function(...) { # Bind activation of
> >     >> cbind(2) >> and rbind(2) for S4 classes >>
> >     >> methods:::bind_activation(TRUE) } This works as >>
> >     >> expected. However, running R CMD check I am now getting
> >     >> >> the following NOTE since I am using an unexported >>
> >     >> function in methods:
> >     >> >>
> >     >> >> * checking dependencies in R code ... NOTE Unexported
> >     >> >> object imported by a ':::' call: >>
> >     >> 'methods:::bind_activation' See the note in ?`:::` about
> >     >> >> the use of this operator.  How can I get rid of the
> >     >> NOTE >> and what is the proper way to define the methods
> >     >> cbind >> and rbind for S4 classes in a package?
> >     >> >>
> >     >> >> Best, mario
> >     >> >>
> >     >> >> ______________________________________________ >>
> >     >> R-devel at r-project.org mailing list >>
> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >     >>
> >     >> > ______________________________________________ >
> >     >> R-devel at r-project.org mailing list >
> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >     >>
> >
>

	[[alternative HTML version deleted]]


From plummerm at iarc.fr  Tue Feb 10 10:52:36 2015
From: plummerm at iarc.fr (Martyn Plummer)
Date: Tue, 10 Feb 2015 09:52:36 +0000
Subject: [Rd] =?utf-8?q?R_CMD_check=3A_Uses_the_superseded_package=3A_?=
 =?utf-8?b?4oCYZG9TTk9X4oCZ?=
In-Reply-To: <54D92FE9.8010502@bric.ku.dk>
References: <54D92FE9.8010502@bric.ku.dk>
Message-ID: <1423561955.27822.73.camel@iarc.fr>

The CRAN package snow is superseded by the parallel package which is
distributed with R since version 2.14.0. Here are the release notes

 \item There is a new package \pkg{parallel}.

 It incorporates (slightly revised) copies of packages
 \CRANpkg{multicore} and \CRANpkg{snow} (excluding MPI, PVM and NWS
 clusters).  Code written to use the higher-level API functions in
 those packages should work unchanged (apart from changing any
 references to their namespaces to a reference to \pkg{parallel},
 and links explicitly to \CRANpkg{multicore} or \CRANpkg{snow} on help
 pages).

So you should replace your dependency on doSNOW with doParallel, which
is the equivalent foreach adapter for the parallel package.

Martyn

On Mon, 2015-02-09 at 23:08 +0100, Xavier Robin wrote:
> Dear list,
> 
> When I run an R CMD check --as-cran on my package (pROC) I get the
> following note:
> > Uses the superseded package: ?doSNOW?
> The fact that it uses the doSNOW package is correct as I have the
> following example in an .Rd file:
> > #ifdef windows
> > if (require(doSNOW)) {
> >     registerDoSNOW(cl <- makeCluster(2, type = "SOCK"))
> >     ci(roc2, method="bootstrap", parallel=TRUE)
> >     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
> >     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
> >     stopCluster(cl)
> > }
> > #endif
> > #ifdef unix
> > if (require(doMC)) {
> >     registerDoMC(2)
> >     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
> >     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
> > }
> > #endif
> 
> The "superseded" part is more confusing to me, though. The doSNOW
> package seems to be still available on CRAN with no special notice,
> listed in the HighPerformanceComputing view likewise, and under active
> development (last change a couple of days ago on R-Forge). I could find
> no mention of what it has been superseded with. Surprisingly, Google was
> no help on this.
> 
> I could see the note is triggered in QC.R file of the tools package.
> However this finding is not much help and leaves me just as confused as
> before.
> 
> I recall spending quite some time to setup this example to run both
> under Windows and Unix. doSNOW was the only way I could get it to work
> there. doMC is apparently still available for Unix only. I couldn't get
> doRNG to work on either platforms.
> 
> So what is R CMD check noticing me about?
> Should I ignore the notice, or take an action? If so, which one?
> 
> Best wishes,
> Xavier
> 


From robin at lindinglab.org  Tue Feb 10 12:10:48 2015
From: robin at lindinglab.org (Xavier Robin)
Date: Tue, 10 Feb 2015 12:10:48 +0100
Subject: [Rd] =?utf-8?q?R_CMD_check=3A_Uses_the_superseded_package=3A_?=
 =?utf-8?b?4oCYZG9TTk9X4oCZ?=
In-Reply-To: <1423561955.27822.73.camel@iarc.fr>
References: <54D92FE9.8010502@bric.ku.dk> <1423561955.27822.73.camel@iarc.fr>
Message-ID: <54D9E738.2060304@bric.ku.dk>

Oh, I completely missed that one.
It's very neat as it seems to work both on Windows and Unix.

Thanks!
Xavier


On 10/02/15 10:52, Martyn Plummer wrote:
> The CRAN package snow is superseded by the parallel package which is
> distributed with R since version 2.14.0. Here are the release notes
>
>  \item There is a new package \pkg{parallel}.
>
>  It incorporates (slightly revised) copies of packages
>  \CRANpkg{multicore} and \CRANpkg{snow} (excluding MPI, PVM and NWS
>  clusters).  Code written to use the higher-level API functions in
>  those packages should work unchanged (apart from changing any
>  references to their namespaces to a reference to \pkg{parallel},
>  and links explicitly to \CRANpkg{multicore} or \CRANpkg{snow} on help
>  pages).
>
> So you should replace your dependency on doSNOW with doParallel, which
> is the equivalent foreach adapter for the parallel package.
>
> Martyn
>
> On Mon, 2015-02-09 at 23:08 +0100, Xavier Robin wrote:
>> Dear list,
>>
>> When I run an R CMD check --as-cran on my package (pROC) I get the
>> following note:
>>> Uses the superseded package: ?doSNOW?
>> The fact that it uses the doSNOW package is correct as I have the
>> following example in an .Rd file:
>>> #ifdef windows
>>> if (require(doSNOW)) {
>>>     registerDoSNOW(cl <- makeCluster(2, type = "SOCK"))
>>>     ci(roc2, method="bootstrap", parallel=TRUE)
>>>     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
>>>     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
>>>     stopCluster(cl)
>>> }
>>> #endif
>>> #ifdef unix
>>> if (require(doMC)) {
>>>     registerDoMC(2)
>>>     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
>>>     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
>>> }
>>> #endif
>> The "superseded" part is more confusing to me, though. The doSNOW
>> package seems to be still available on CRAN with no special notice,
>> listed in the HighPerformanceComputing view likewise, and under active
>> development (last change a couple of days ago on R-Forge). I could find
>> no mention of what it has been superseded with. Surprisingly, Google was
>> no help on this.
>>
>> I could see the note is triggered in QC.R file of the tools package.
>> However this finding is not much help and leaves me just as confused as
>> before.
>>
>> I recall spending quite some time to setup this example to run both
>> under Windows and Unix. doSNOW was the only way I could get it to work
>> there. doMC is apparently still available for Unix only. I couldn't get
>> doRNG to work on either platforms.
>>
>> So what is R CMD check noticing me about?
>> Should I ignore the notice, or take an action? If so, which one?
>>
>> Best wishes,
>> Xavier
>>


-- 
Xavier Robin, PhD
Cellular Signal Integration Group (C-SIG)  - Linding Lab
Biotech Research and Innovation Center (BRIC) - University of Copenhagen
Anker Engelundsvej, DTU Campus, Building 301, DK-2800 Lyngby, DENMARK
Mobile: +45 42 799 833
www.lindinglab.org - www.bric.ku.dk


From xavier.robin at bric.ku.dk  Tue Feb 10 15:25:20 2015
From: xavier.robin at bric.ku.dk (Xavier Robin)
Date: Tue, 10 Feb 2015 15:25:20 +0100
Subject: [Rd] How to deal with functions detected as apparent S3 methods
Message-ID: <54DA14D0.3070306@bric.ku.dk>

Dear list,

I am trying to clear the following note that is generated by an R CMD
check --as-cran on my package (pROC):
> * checking S3 generic/method consistency ... NOTE
> Found the following apparent S3 methods exported but not registered:
>   ci.auc ci.coords ci.se ci.sp ci.thresholds roc.test
> See section ?Registering S3 methods? in the ?Writing R Extensions?
> manual.
However, these functions are (at least intended to be) actual functions,
not methods.
The reason these messages are generated is that I define two generic
functions ci and roc. Due to the S3 rules, these 6 functions are
accidentally recognized as methods of those generics. But it has never
been in my intention to do so.

I just fixed a bunch of these notes (see
<http://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-debian-clang/pROC-00check.html>
for instance) that were pointing at actual errors, but these remaining 6
are definitely "correct", at least in the sense that registering them as
S3 method instead of exporting them would break quite some code
(including the doc and examples of the package).

(This is additionally made even more complex by the fact that 'ci.auc'
could actually be used as a method, although that usage is not
documented (it would then be a method that further delegate to other
methods). It is not the case of the other 5 functions.)

I guess the naming was a bit unfortunate... but it happened 5 years ago
and it is quite difficult to change now.

How can I fix this? I can see two ways to go here:

* Deprecate these functions and replace them with some underscore
version (ci_auc, etc.)
It might take some time for the usage to change but I'm sure I can
convince CRAN to accept the package if some transition action is taken...

* Just ignore the note: after all it is just an automated test, I never
had any issue with this, nor heard anyone complaining about this before.
I can't find anything specifically advising against this usage in the
docs, but maybe I just overlooked it?

Any advice on how to address this problem would be appreciated.

Best wishes,
Xavier

-- 
Xavier Robin, PhD
Cellular Signal Integration Group (C-SIG)  - Linding Lab
Biotech Research and Innovation Center (BRIC) - University of Copenhagen
Anker Engelundsvej, DTU Campus, Building 301, DK-2800 Lyngby, DENMARK
Mobile: +45 42 799 833
www.lindinglab.org - www.bric.ku.dk


From hb at biostat.ucsf.edu  Wed Feb 11 01:44:26 2015
From: hb at biostat.ucsf.edu (Henrik Bengtsson)
Date: Tue, 10 Feb 2015 16:44:26 -0800
Subject: [Rd] WISH: eval() to preserve the "visibility" (now value is
 always visible)
In-Reply-To: <1423457062.96931.YahooMailBasic@web125104.mail.ne1.yahoo.com>
References: <1423457062.96931.YahooMailBasic@web125104.mail.ne1.yahoo.com>
Message-ID: <CAFDcVCRQWNAVJMmawV7A_cNBCYKY=taS-Y-Jcsxwnhror1natA@mail.gmail.com>

On Sun, Feb 8, 2015 at 8:44 PM, Suharto Anggono Suharto Anggono via
R-devel <r-devel at r-project.org> wrote:
> Sorry to intervene.

No, I'm very happy you intervened.  You're comment is 100%
valid/correct making my wish moot.

Your explanation is very clear and nails it; one should use
eval(substitute(expr)) or evalq(expr) for what I'm trying to do.

It all came from me trying to prevent

> withOptions({x <- 1}, foo=1)

from printed the value, where (somewhat simplified):

withOptions <- function(expr, ..., envir=parent.frame()) {
  oopts <- options(...)
  on.exit(options(oopts))
  eval(expr, envir=envir)
}

I have a few of these withNnn() functions, but for this particular one
(*) I had forgotten an expr <- substitute(expr) in there, which caused
me to incorrectly blame eval().  <recursive mistake>This is very much
the same problem as you observed with my eval2() example.</recursive
mistake>

Thank you very much

Henrik
(*) Actually withSeeds() which is to messy to use as an example.

>
> Argument passed to 'eval' is evaluated first.
> So,
> eval(x <- 2)
> is effectively like
> { x <- 2; eval(2) } ,
> which is effectively
> { x <- 2; 2 } .
> The result is visible.
>
> eval(expression(x <- 2))
> or
> eval(quote(x <- 2))
> or
> evalq(x <- 2)
> gives the same effect as
> x <- 2 .
> The result is invisible.
>
> In function 'eval2',
> res <- eval(withVisible(expr), envir=envir, ...)
> is effectively
> res <- withVisible(expr) .
>
> -------------------
>
> Would it be possible to have the value of eval() preserve the
> "visibility" of the value of the expression?
>
>
> "PROBLEM":
>
> # Invisible
>> x <- 1
>
> # Visible
>> eval(x <- 2)
> [1] 2
>
> "TROUBLESHOOTING":
>> withVisible(x <- 1)
> $value
> [1] 1
> $visible
> [1] FALSE
>
>> withVisible(eval(x <- 2))
> $value
> [1] 2
> $visible
> [1] TRUE
>
>
> WORKAROUND:
> eval2 <- function(expr, envir=parent.frame(), ...) {
>   res <- eval(withVisible(expr), envir=envir, ...)
>   value <- res$value
>   if (res$visible) value else invisible(value)
> }
>
>> x <- 1
>> eval(x <- 2)
> [1] 2
>> eval2(x <- 3)
>> x
> [1] 3
>
> /Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jouni.helske at jyu.fi  Wed Feb 11 07:37:52 2015
From: jouni.helske at jyu.fi (Helske, Jouni)
Date: Wed, 11 Feb 2015 06:37:52 +0000
Subject: [Rd] CRAN check fails on Solaris, any hints why?
Message-ID: <7FC11B33B8C53E4EB9510C0BAA73EAE340F05444@mbs2.ad.jyu.fi>

Dear all,

I recently uploaded a new package Rlibeemd to CRAN (http://cran.r-project.org/web/packages/Rlibeemd/index.html, and in github: https://github.com/helske/Rlibeemd), and simple example in help files seems to throw an error on Solaris:

Version: 1.3.1
Check: examples
Result: ERROR
    Running examples in ?Rlibeemd-Ex.R? failed
    The error most likely occurred in:

    > ### Name: ceemdan
    > ### Title: CEEMDAN decomposition
    > ### Aliases: ceemdan
    >
    > ### ** Examples
    >
    > imfs <- ceemdan(UKgas, threads = 1)
    gsl: tridiag.c:191: ERROR: matrix must be positive definite
    Default GSL error handler invoked.

The package is structured in such way that the underlying C library uses GSL for performing complete ensemble empirical mode decomposition, and I have written Rcpp/R wrappers around those functions. In eemd.c there are lines

const int status = gsl_linalg_solve_tridiag(&diag_vec.vector,
                                                &supdiag_vec.vector,
                                                &subdiag_vec.vector,
                                                &g_vec.vector,
                                                &solution_vec.vector);
    if (status) { // we never get to this point if above function fails!
        REprintf("Error reported by gsl_linalg_solve_tridiag: %s\n",
                gsl_strerror(status));
        return EMD_GSL_ERROR;
    }

So first I need to add gsl_set_error_handler_off() to some point of the code so the GSL does not abort R. But what I wonder is why does the error happen at all. The same example works fine wih Windows, Linux and OSX. After googling a bit I saw that there are other packages with problems related to Solaris and GSL (such as http://cran.r-project.org/web/checks/check_results_RcppGSL.html), so I wonder if the issue is related to incorrect Makevars and/or configure or something like that?

This is the first project where I needed configure script. This is my configure.ac which I copied from RcppGSL packages example:

AC_INIT([Rlibeemd], 1.3.0)
## Use gsl-config to find arguments for compiler and linker flags
##
## Check for non-standard programs: gsl-config(1)
AC_PATH_PROG([GSL_CONFIG], [gsl-config])
## If gsl-config was found, let's use it
if test "${GSL_CONFIG}" != ""; then
# Use gsl-config for header and linker arguments (without BLAS which we get from R)
GSL_CFLAGS=`${GSL_CONFIG} --cflags`
GSL_LIBS=`${GSL_CONFIG} --libs`
else
AC_MSG_ERROR([gsl-config not found, is GSL installed?])
fi
# Now substitute these variables in src/Makevars.in to create src/Makevars
AC_SUBST(GSL_CFLAGS)
AC_SUBST(GSL_LIBS)
AC_OUTPUT(src/Makevars)

And here is Makevars.in:

GSL_CFLAGS = @GSL_CFLAGS@
GSL_LIBS = @GSL_LIBS@
PKG_LIBS=$(GSL_LIBS) $(SHLIB_OPENMP_CFLAGS) $(SHLIB_OPENMP_CXXFLAGS)
PKG_CFLAGS=$(GSL_CFLAGS) $(SHLIB_OPENMP_CFLAGS)
PKG_CXXFLAGS=$(SHLIB_OPENMP_CXXFLAGS)

Any help would be greatly appreciated. I don't have access to Solaris which makes the debugging rather hard.

Best regards,

Jouni Helske


	[[alternative HTML version deleted]]


From richierocks at gmail.com  Wed Feb 11 11:46:47 2015
From: richierocks at gmail.com (Richard Cotton)
Date: Wed, 11 Feb 2015 13:46:47 +0300
Subject: [Rd] update.packages with ask = FALSE will sometimes ask about
	updates
Message-ID: <CAPp_+=d_Y41STRHcK0Gxz=wzEH-pSOtfPaRMvKNuSW+hpeUtjA@mail.gmail.com>

Today while running update.packages(ask = FALSE), R stopped to ask me
a question:

  There are binary versions available but the source versions are later:
            binary  source needs_compilation
KernSmooth 2.23-13 2.23-14              TRUE
mixture        1.2     1.3              TRUE

Do you want to install from sources the packages which need compilation?
y/n:


update.packages calls install.packages which calls getDependencies,
which was where there question originated.

It seems to me that if I've set ask = FALSE, stopping to ask questions
is a bug.  There are a few possible interpretations of the best
behaviour though, so I thought I'd put it up for discussion here
before (maybe) submitting as a bug.

1. The existing behaviour is correct: the case of out-of-date binaries
causes a special situation, and R is right to ask.

2. ask = FALSE means I want all updates, so don't ask me any
questions, just install all possible updates.

3. ask = FALSE means that I don't want any interactivity, but
out-of-date binaries is a special case, so R should just fail to
update these packages, with an error message stating that they need to
be manually updated.

4. There should be an extra argument that decides between the some or
all of the behaviours described in 1, 2 and 3.

Which of these options is best?  (Or have I missed an option?)


From Rainer at krugs.de  Wed Feb 11 13:36:28 2015
From: Rainer at krugs.de (Rainer M Krug)
Date: Wed, 11 Feb 2015 13:36:28 +0100
Subject: [Rd] update.packages with ask = FALSE will sometimes ask about
	updates
In-Reply-To: <CAPp_+=d_Y41STRHcK0Gxz=wzEH-pSOtfPaRMvKNuSW+hpeUtjA@mail.gmail.com>
	(Richard Cotton's message of "Wed, 11 Feb 2015 13:46:47 +0300")
References: <CAPp_+=d_Y41STRHcK0Gxz=wzEH-pSOtfPaRMvKNuSW+hpeUtjA@mail.gmail.com>
Message-ID: <m2bnl062wj.fsf@krugs.de>

Richard Cotton <richierocks at gmail.com> writes:

> Today while running update.packages(ask = FALSE), R stopped to ask me
> a question:
>
>   There are binary versions available but the source versions are later:
>             binary  source needs_compilation
> KernSmooth 2.23-13 2.23-14              TRUE
> mixture        1.2     1.3              TRUE
>
> Do you want to install from sources the packages which need compilation?
> y/n:
>
>
> update.packages calls install.packages which calls getDependencies,
> which was where there question originated.
>
> It seems to me that if I've set ask = FALSE, stopping to ask questions
> is a bug.  There are a few possible interpretations of the best
> behaviour though, so I thought I'd put it up for discussion here
> before (maybe) submitting as a bug.
>
> 1. The existing behaviour is correct: the case of out-of-date binaries
> causes a special situation, and R is right to ask.
>
> 2. ask = FALSE means I want all updates, so don't ask me any
> questions, just install all possible updates.
>
> 3. ask = FALSE means that I don't want any interactivity, but
> out-of-date binaries is a special case, so R should just fail to
> update these packages, with an error message stating that they need to
> be manually updated.
>
> 4. There should be an extra argument that decides between the some or
> all of the behaviours described in 1, 2 and 3.
>
> Which of these options is best?  (Or have I missed an option?)

I am with R (and youre first option). If I ask for binaries, I want
binaries (because I can not install from source, because I want them
fast, because I have locally different compilers, ...). So to silently
try to install sources instead of binaries could be completely
wrong. Although unlikely, the same applies the other way round, when I
ask for source.

THe other possible option would be 4, but instead of failing (the
binaries might still be newer then the installed versions) to give a
warning - as it is not more: For the settings asked for, these are, the
newest versions are installed - but be warned that there are newer
versions from source.

Thinking about it now, option 4 with warning should be the way to go.

Cheers,

Rainer
>

-- 
Rainer M. Krug
email: Rainer<at>krugs<dot>de
PGP: 0x0F52F982
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 494 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20150211/b70c63b7/attachment.bin>

From josh.m.ulrich at gmail.com  Wed Feb 11 17:26:25 2015
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Wed, 11 Feb 2015 10:26:25 -0600
Subject: [Rd] =?utf-8?q?R_CMD_check=3A_Uses_the_superseded_package=3A_?=
	=?utf-8?b?4oCYZG9TTk9X4oCZ?=
In-Reply-To: <54D9E738.2060304@bric.ku.dk>
References: <54D92FE9.8010502@bric.ku.dk> <1423561955.27822.73.camel@iarc.fr>
	<54D9E738.2060304@bric.ku.dk>
Message-ID: <CAPPM_gQdkEO6-suh8Y9Tp6OHVV4VjnTmebwPkdnQARzk700-0g@mail.gmail.com>

On Tue, Feb 10, 2015 at 5:10 AM, Xavier Robin <robin at lindinglab.org> wrote:
> Oh, I completely missed that one.
> It's very neat as it seems to work both on Windows and Unix.
>
It works on both Windows and *nix because it combines functionality
from snow (Windows) and multicore (*nix).

> Thanks!
> Xavier
>
>
> On 10/02/15 10:52, Martyn Plummer wrote:
>> The CRAN package snow is superseded by the parallel package which is
>> distributed with R since version 2.14.0. Here are the release notes
>>
>>  \item There is a new package \pkg{parallel}.
>>
>>  It incorporates (slightly revised) copies of packages
>>  \CRANpkg{multicore} and \CRANpkg{snow} (excluding MPI, PVM and NWS
>>  clusters).  Code written to use the higher-level API functions in
>>  those packages should work unchanged (apart from changing any
>>  references to their namespaces to a reference to \pkg{parallel},
>>  and links explicitly to \CRANpkg{multicore} or \CRANpkg{snow} on help
>>  pages).
>>
>> So you should replace your dependency on doSNOW with doParallel, which
>> is the equivalent foreach adapter for the parallel package.
>>
>> Martyn
>>
>> On Mon, 2015-02-09 at 23:08 +0100, Xavier Robin wrote:
>>> Dear list,
>>>
>>> When I run an R CMD check --as-cran on my package (pROC) I get the
>>> following note:
>>>> Uses the superseded package: ?doSNOW?
>>> The fact that it uses the doSNOW package is correct as I have the
>>> following example in an .Rd file:
>>>> #ifdef windows
>>>> if (require(doSNOW)) {
>>>>     registerDoSNOW(cl <- makeCluster(2, type = "SOCK"))
>>>>     ci(roc2, method="bootstrap", parallel=TRUE)
>>>>     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
>>>>     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
>>>>     stopCluster(cl)
>>>> }
>>>> #endif
>>>> #ifdef unix
>>>> if (require(doMC)) {
>>>>     registerDoMC(2)
>>>>     \dontrun{ci(roc2, method="bootstrap", parallel=TRUE)}
>>>>     \dontshow{ci(roc2, method="bootstrap", parallel=TRUE, boot.n=20)}
>>>> }
>>>> #endif
>>> The "superseded" part is more confusing to me, though. The doSNOW
>>> package seems to be still available on CRAN with no special notice,
>>> listed in the HighPerformanceComputing view likewise, and under active
>>> development (last change a couple of days ago on R-Forge). I could find
>>> no mention of what it has been superseded with. Surprisingly, Google was
>>> no help on this.
>>>
>>> I could see the note is triggered in QC.R file of the tools package.
>>> However this finding is not much help and leaves me just as confused as
>>> before.
>>>
>>> I recall spending quite some time to setup this example to run both
>>> under Windows and Unix. doSNOW was the only way I could get it to work
>>> there. doMC is apparently still available for Unix only. I couldn't get
>>> doRNG to work on either platforms.
>>>
>>> So what is R CMD check noticing me about?
>>> Should I ignore the notice, or take an action? If so, which one?
>>>
>>> Best wishes,
>>> Xavier
>>>
>
>
> --
> Xavier Robin, PhD
> Cellular Signal Integration Group (C-SIG)  - Linding Lab
> Biotech Research and Innovation Center (BRIC) - University of Copenhagen
> Anker Engelundsvej, DTU Campus, Building 301, DK-2800 Lyngby, DENMARK
> Mobile: +45 42 799 833
> www.lindinglab.org - www.bric.ku.dk
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From mario.annau at gmail.com  Wed Feb 11 20:18:53 2015
From: mario.annau at gmail.com (Mario Annau)
Date: Wed, 11 Feb 2015 20:18:53 +0100
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <CAOQ5NydfFwc=iq47-fay_dp-r-XLtO=kt_0b3c7F=nGkjXmY_g@mail.gmail.com>
References: <54C35EB5.3060402@gmail.com>	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>	<21702.11046.319866.816795@stat.math.ethz.ch>	<CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>	<21711.24672.449563.817210@stat.math.ethz.ch>	<54D93473.2040609@gmail.com>
	<CAOQ5NydfFwc=iq47-fay_dp-r-XLtO=kt_0b3c7F=nGkjXmY_g@mail.gmail.com>
Message-ID: <54DBAB1D.5080509@gmail.com>

sorry - I just got irritated by my different R-versions.
The behaviour I described in the previous mail was discovered using R
3.1.2 without bind_activation(TRUE). In r67773 all calls are delegated
to r/cbind.matrix and not r/cbind2.
As a workaround I have now implemented an S3 method for my S4 class
which correctly dispatches for both versions (3.1.2 and r67699+) - see
also the commit for the h5 package on github:
https://github.com/mannau/h5/commit/20daea37ade1a317458c8a1d03928f579e457f93.
Any better ideas are welcome.
br,
mario


Am 09/02/15 um 23:38 schrieb Michael Lawrence:
> Are you able to create a reproducible example, somehow?
> 
> Thanks,
> Michael
> 
> On Mon, Feb 9, 2015 at 2:28 PM, Mario Annau <mario.annau at gmail.com
> <mailto:mario.annau at gmail.com>> wrote:
> 
>     Hi Michael,
>     I've tested your change in r67699 (using r67773) and the function now
>     correctly dispatches to r/cbind2 within the R-session without
>     bind_activation(TRUE). However, running unit tests using R CMD check I
>     figured out that the same function call delegates to r/cbind.matrix
>     (function uses S4 class as first- and matrix as second argument). Is
>     this a bug and/or how can I get function dispatch right (to r/cbind2)
>     for my test cases?
>     best,
>     mario
> 
> 
>     Am 02/02/15 um 12:32 schrieb Martin Maechler:
>     >>>>>> Michael Lawrence <lawrence.michael at gene.com
>     <mailto:lawrence.michael at gene.com>>
>     >>>>>>     on Sun, 1 Feb 2015 19:23:06 -0800 writes:
>     >
>     >     > I've implemented the proposed changes in
>     >     > R-devel. Minimally tested, so please try it. It should
>     >     > delegate to r/cbind2 when there is at least one S4
>     >     > argument and S3 dispatch fails (so you'll probably want to
>     >     > add an S3 method for your class to introduce a conflict,
>     >     > otherwise it will dispatch to cbind.data.frame if one of
>     >     > the args is a data.frame). There may no longer be a need
>     >     > for cBind() and rBind().
>     >
>     >     > Michael
>     >
>     > This sounds great!   Thank you very much, Michael!
>     > :-) :-)
>     >
>     > ... but .... :-(  experiments with the Matrix package (and R
>     > devel with your change), show a remaining buglet with treating of
>     dimnames :
>     >
>     >    > M1 <- Matrix(m1 <- matrix(1:12, 3,4))
>     >    > cbind(m1, MM = -1)
>     >                MM
>     >    [1,] 1 4 7 10 -1
>     >    [2,] 2 5 8 11 -1
>     >    [3,] 3 6 9 12 -1
>     >    > cbind(M1, MM = -1)   ## ---- notice the "..."
>     >    3 x 5 Matrix of class "dgeMatrix"
>     >                ...
>     >    [1,] 1 4 7 10  -1
>     >    [2,] 2 5 8 11  -1
>     >    [3,] 3 6 9 12  -1
>     >    > rbind(R1 = 10:11, m1)
>     >       [,1] [,2] [,3] [,4]
>     >    R1   10   11   10   11
>     >        1    4    7   10
>     >        2    5    8   11
>     >        3    6    9   12
>     >    > rbind(R1 = 10:11, M1) ## --- notice the 'deparse.level'
>     >    4 x 4 Matrix of class "dgeMatrix"
>     >                [,1] [,2] [,3] [,4]
>     >    deparse.level   10   11   10   11
>     >                   1    4    7   10
>     >                   2    5    8   11
>     >                   3    6    9   12
>     >    >
>     >
>     > Also, it seems you are not observing the 'deparse.level'
>     > argument at all:
>     > Looking at the last three lines of the example in  ?cbind,
>     >
>     >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle
>     2 rownames
>     >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3
>     rownames (default)
>     >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
>     >
>     > but using a Matrix matrix 'dd', we see that (row)names
>     > construction needs to amended:
>     >
>     >   > (dd <- Matrix(rbind(c(0:1,0,0))))
>     >   1 x 4 sparse Matrix of class "dgCMatrix"
>     >
>     >   [1,] . 1 . .
>     >
>     >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle
>     2 rownames
>     >   4 x 4 sparse Matrix of class "dgCMatrix"
>     >
>     >   deparse.level  1  2  3  4
>     >   c              2  2  2  2
>     >   a++           10 10 10 10
>     >                .  1  .  .
>     >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3
>     rownames (default)
>     >   4 x 4 sparse Matrix of class "dgCMatrix"
>     >
>     >   deparse.level  1  2  3  4
>     >   c              2  2  2  2
>     >   a++           10 10 10 10
>     >                .  1  .  .
>     >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
>     >   4 x 4 sparse Matrix of class "dgCMatrix"
>     >
>     >   deparse.level  1  2  3  4
>     >   c              2  2  2  2
>     >   a++           10 10 10 10
>     >                .  1  .  .
>     >   >
>     >
>     >
>     >
>     >     > On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
>     >     > maechler at lynne.stat.math.ethz.ch
>     <mailto:maechler at lynne.stat.math.ethz.ch>> wrote:
>     >
>     >     >> >>>>> Michael Lawrence <lawrence.michael at gene.com
>     <mailto:lawrence.michael at gene.com>> >>>>>
>     >     >> on Sat, 24 Jan 2015 06:39:37 -0800 writes:
>     >     >>
>     >     >> > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau >
>     >     >> <mario.annau at gmail.com <mailto:mario.annau at gmail.com>>
>     wrote: >> Hi all, this question
>     >     >> has already been posted on >> stackoverflow, however
>     >     >> without success, see also
>     >     >> >>
>     >     >>
>     http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
>     >     >> .
>     >     >> >>
>     >     >> >> I have written a package using S4 classes and would
>     >     >> like >> to use the functions rbind, cbind with these
>     >     >> defined >> classes.
>     >     >> >>
>     >     >> >> Since it does not seem to be possible to define rbind
>     >     >> and >> cbind directly as S4 methods (see ?cBind) I
>     >     >> defined >> rbind2 and cbind2 instead:
>     >     >> >>
>     >     >>
>     >     >> > This needs some clarification. It certainly is possible
>     >     >> to > define cbind and rbind methods. The BiocGenerics
>     >     >> package > defines generics for those and many methods are
>     >     >> defined by > e.g. S4Vectors, IRanges, etc.  The issue is
>     >     >> that dispatch > on "..." is singular, i.e., you can only
>     >     >> specify one class > that all args in "..." must share
>     >     >> (potentially through > inheritance).
>     >     >>
>     >     >> > Thus, trying to combine objects from a > different
>     >     >> hierarchy (or non-S4 objects) will not > work.
>     >     >>
>     >     >> Yes, indeed, that's the drawback
>     >     >>
>     >     >> I've been there almost surely before everyone else, with
>     >     >> the Matrix package...  and I have been the author of
>     >     >> cbind2(), rbind2(), and of course, of cBind(), and
>     >     >> rBind().
>     >     >>
>     >     >> At the time when I introduced these, the above
>     >     >> possibility of writing S4 methods for '...'  where not
>     >     >> yet part of R.
>     >     >>
>     >     >> > This has not been a huge problem for us in >
>     >     >> practice. For example, we have a DataFrame object that >
>     >     >> mimics data.frame. To cbind a data.frame with a
>     >     >> DataFrame, > the user can just call the DataFrame() >
>     >     >> constructor. rbind() between different data structures is
>     >     >> > much less common.
>     >     >>
>     >     >> well... yes and no.  Think of using the Matrix package,
>     >     >> maybe with another package that defines another
>     >     >> generalized matrix class...  It would be nice if things
>     >     >> worked automatically / perfectly there.
>     >     >>
>     >     >> > The cBind and rBind functions in Matrix (and the
>     >     >> r/cbind > that get installed by bind_activation, the code
>     >     >> is shared) > work by recursing, dropping the first
>     >     >> argument until two > are left, and then combining with
>     >     >> r/cbind2(). The Biobase > package uses a similar strategy
>     >     >> to mimic c() via its > non-standard combine()
>     >     >> generic. The nice thing about the > combine() approach is
>     >     >> the user entry point and the generic > are the same,
>     >     >> instead of having methods on rbind2() and > the user
>     >     >> calling rBind().
>     >     >>
>     >     >> > I would argue that bind_activation(TRUE) should be >
>     >     >> discouraged,
>     >     >>
>     >     >> Yes, you are right Michael; it should be discouraged at
>     >     >> least to be run in a *package*.  One could think of its
>     >     >> use by an explicit user call.
>     >     >>
>     >     >> > because it replaces the native rbind and > cbind with
>     >     >> recursive variants that are going to cause > problems,
>     >     >> performance and otherwise. This is why it is >
>     >     >> hidden. Perhaps a reasonable compromise would be for the
>     >     >> > native cbind and rbind to check whether any arguments
>     >     >> are > S4 and if so, resort to recursion. Recursion does
>     >     >> seem to > be a clean way to implement "type promotion",
>     >     >> i.e., to > answer the question "which type should the
>     >     >> result be when > faced with mixed-type args?".
>     >     >>
>     >     >> Exactly.  That has been my idea at the time ..  ((yes,
>     >     >> I'm also the author of the bind_activation()
>     >     >> "(mis)functionality".))
>     >     >>
>     >     >> > Hopefully others have better ideas.
>     >     >>
>     >     >> that would be great.
>     >     >>
>     >     >> And even if not, it would be great if we could implement
>     >     >> your idea > Perhaps a reasonable compromise would be for
>     >     >> the > native cbind and rbind to check whether any
>     >     >> arguments are > S4 and if so, resort to recursion.
>     >     >>
>     >     >> without a noticable performance penalty in the case of no
>     >     >> S4 arguments.
>     >     >>
>     >     >> Martin
>     >     >>
>     >     >>
>     >     >> > Michael
>     >     >>
>     >     >> >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
>     >     >> >> function(x, y) { # Do stuff ...  })
>     >     >> >>
>     >     >> >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
>     >     >> >> function(x, y) { # Do stuff ...  })
>     >     >> >>
>     >     >> >> >From ?cbind2 I learned that these functions need to
>     >     >> be >> activated using methods:::bind_activation to
>     >     >> replace >> rbind and cbind from base.
>     >     >> >>
>     >     >> >> I included the call in the package file R/zzz.R using
>     >     >> the >> .onLoad function:
>     >     >> >>
>     >     >> >> .onLoad <- function(...) { # Bind activation of
>     >     >> cbind(2) >> and rbind(2) for S4 classes >>
>     >     >> methods:::bind_activation(TRUE) } This works as >>
>     >     >> expected. However, running R CMD check I am now getting
>     >     >> >> the following NOTE since I am using an unexported >>
>     >     >> function in methods:
>     >     >> >>
>     >     >> >> * checking dependencies in R code ... NOTE Unexported
>     >     >> >> object imported by a ':::' call: >>
>     >     >> 'methods:::bind_activation' See the note in ?`:::` about
>     >     >> >> the use of this operator.  How can I get rid of the
>     >     >> NOTE >> and what is the proper way to define the methods
>     >     >> cbind >> and rbind for S4 classes in a package?
>     >     >> >>
>     >     >> >> Best, mario
>     >     >> >>
>     >     >> >> ______________________________________________ >>
>     >     >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>     mailing list >>
>     >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >     >>
>     >     >> > ______________________________________________ >
>     >     >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>     mailing list >
>     >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >     >>
>     >
> 
>


From pd.mes at cbs.dk  Thu Feb 12 11:29:38 2015
From: pd.mes at cbs.dk (Peter Dalgaard)
Date: Thu, 12 Feb 2015 11:29:38 +0100
Subject: [Rd] Release plans for R versions 3.1.3 and 3.2.0
Message-ID: <BF441044-BBCD-44DE-BDA4-82FF5AFD2314@cbs.dk>

The upcoming wrap-up release 3.1.3 is scheduled for March 9. 

The start of the next series, 3.2.0 is scheduled for April 16.

Detailed schedules will be published on developer.r-project.org.

Package maintainers, especially of recommended packages, are asked to time potential modifications so as to avoid collisions with the release process. 

For the Core Team

Peter D.

-- 
Peter Dalgaard, Professor
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ripley at stats.ox.ac.uk  Fri Feb 13 08:11:06 2015
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 13 Feb 2015 07:11:06 +0000
Subject: [Rd] update.packages with ask = FALSE will sometimes ask about
 updates
In-Reply-To: <CAPp_+=d_Y41STRHcK0Gxz=wzEH-pSOtfPaRMvKNuSW+hpeUtjA@mail.gmail.com>
References: <CAPp_+=d_Y41STRHcK0Gxz=wzEH-pSOtfPaRMvKNuSW+hpeUtjA@mail.gmail.com>
Message-ID: <54DDA38A.9040208@stats.ox.ac.uk>

On 11/02/2015 10:46, Richard Cotton wrote:
> Today while running update.packages(ask = FALSE), R stopped to ask me
> a question:

The 'at a minimum' information required by the posting guide is 
conspicuous by its absence.

At a guess, this is R-devel and Windows.

In response to a misled follow-up: he most likely did not ask for binary 
packages ... that is not the default on Windows in R-devel.

>    There are binary versions available but the source versions are later:
>              binary  source needs_compilation
> KernSmooth 2.23-13 2.23-14              TRUE
> mixture        1.2     1.3              TRUE
>
> Do you want to install from sources the packages which need compilation?
> y/n:
>
>
> update.packages calls install.packages which calls getDependencies,
> which was where there question originated.
>
> It seems to me that if I've set ask = FALSE, stopping to ask questions
> is a bug.  There are a few possible interpretations of the best
> behaviour though, so I thought I'd put it up for discussion here
> before (maybe) submitting as a bug.

> 1. The existing behaviour is correct: the case of out-of-date binaries
> causes a special situation, and R is right to ask.
>
> 2. ask = FALSE means I want all updates, so don't ask me any
> questions, just install all possible updates.
>
> 3. ask = FALSE means that I don't want any interactivity, but
> out-of-date binaries is a special case, so R should just fail to
> update these packages, with an error message stating that they need to
> be manually updated.
>
> 4. There should be an extra argument that decides between the some or
> all of the behaviours described in 1, 2 and 3.
>
> Which of these options is best?  (Or have I missed an option?)

He missed the documented options (and the NEWS items, the posting guide 
...).

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From kirill.mueller at ivt.baug.ethz.ch  Fri Feb 13 09:55:12 2015
From: kirill.mueller at ivt.baug.ethz.ch (=?UTF-8?B?S2lyaWxsIE3DvGxsZXI=?=)
Date: Fri, 13 Feb 2015 09:55:12 +0100
Subject: [Rd] xtabs and NA
In-Reply-To: <CAP01uRn-fCa222jXu7Z+VzqhVUohjpGwFcbpXeOn5xH7BaBRLw@mail.gmail.com>
References: <54D8BBA1.5030409@ivt.baug.ethz.ch>
	<CAP01uRn-fCa222jXu7Z+VzqhVUohjpGwFcbpXeOn5xH7BaBRLw@mail.gmail.com>
Message-ID: <54DDBBF0.8000504@ivt.baug.ethz.ch>

On 09.02.2015 16:59, Gabor Grothendieck wrote:
> On Mon, Feb 9, 2015 at 8:52 AM, Kirill M?ller
> <kirill.mueller at ivt.baug.ethz.ch> wrote:
> Passing table the output of model.frame would still allow the use of a 
> formula interface:
>> mf <- model.frame( ~ data, na.action = na.pass)
>> do.call("table", c(mf, useNA = "ifany"))
>     a    b    c <NA>
>     1    1    1    1
>
>
Fair enough, this qualifies as a workaround, and IMO this is how xtabs 
should handle it internally to allow writing xtabs(~data, na.action = 
na.pass) -- or at least xtabs(~data, na.action = na.pass, exclude = 
NULL) if backward compatibility is desired. Would anyone with write 
access to R's SVN repo care enough about this situation to review a 
patch? Thanks.


-Kirill


From richierocks at gmail.com  Fri Feb 13 20:01:41 2015
From: richierocks at gmail.com (Richard Cotton)
Date: Fri, 13 Feb 2015 22:01:41 +0300
Subject: [Rd] update.packages with ask = FALSE will sometimes ask about
	updates
In-Reply-To: <54DDA38A.9040208@stats.ox.ac.uk>
References: <CAPp_+=d_Y41STRHcK0Gxz=wzEH-pSOtfPaRMvKNuSW+hpeUtjA@mail.gmail.com>
	<54DDA38A.9040208@stats.ox.ac.uk>
Message-ID: <CAPp_+=cJG+-kG2OjndxK3MNgiB4m8Lo0G8jv-wvLfO-CNEL0Ug@mail.gmail.com>

On 13 February 2015 at 10:11, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> On 11/02/2015 10:46, Richard Cotton wrote:
>
> The 'at a minimum' information required by the posting guide is conspicuous
> by its absence.
>
> At a guess, this is R-devel and Windows.

What I'm running doesn't matter if I'm asking for general opinion on
the best behaviour.  It has to work for everyone.

> He missed the documented options (and the NEWS items, the posting guide
> ...).

All this is irrelevant.  Whatever my OS, and whatever the documented
options are, if I explicitly say I don't want interactive behaviour by
specifying ask = FALSE, then R stopping to ask me things feels like
incorrect behaviour.

----

Since there seems to be resistance to making any changes to the
behaviour, for future readers, the solution that has been suggested to
me to ensure that you don't get asked any questions is:

Make sure you can compile packages (on Windows this involves
installing Rtools).  Then explicitly set type = "source" when you use
ask = FALSE.

update.packages(ask = FALSE, type = "source")


From nalimilan at club.fr  Sat Feb 14 20:00:19 2015
From: nalimilan at club.fr (Milan Bouchet-Valat)
Date: Sat, 14 Feb 2015 20:00:19 +0100
Subject: [Rd] xtabs and NA
In-Reply-To: <54D8BBA1.5030409@ivt.baug.ethz.ch>
References: <54D8BBA1.5030409@ivt.baug.ethz.ch>
Message-ID: <1423940419.19638.24.camel@club.fr>

Le lundi 09 f?vrier 2015 ? 14:52 +0100, Kirill M?ller a ?crit :
> Hi
> 
> 
> I haven't found a way to produce a tabulation from factor data with NA 
> values using xtabs. Please find a minimal example below, it's also on 
> R-pubs [1]. Tested with R 3.1.2 and R-devel r67720.
> 
> It doesn't seem to be documented explicitly that it's not supported. 
>  From reading the code [2] it looks like the relevant call to table() 
> doesn't set the "useNA" parameter, which I think is necessary to make 
> NAs show up in the result.
> 
> Am I missing anything? If this a bug -- would a patch be welcome? Do we 
> need compatibility with the current behavior?
> 
> I'm aware of workarounds, I just prefer xtabs() over table() for its 
> interface.
> 
> Thanks.
The best workaround (but still using xtabs()) I have found up to now is
to surround variables with addNA(). But I agree this situation is very
painful, especially since the docs do not say anything about how to get
the NAs to appear.


Regards

> Best regards
> 
> Kirill
> 
> 
> [1] http://rpubs.com/krlmlr/xtabs-NA
> [2] 
> https://github.com/wch/r-source/blob/780021752eb83a71e2198019acf069ba8741103b/src/library/stats/R/xtabs.R#L60
> 
> 
> data <- factor(letters[1:4], levels = letters[1:3])
> data
> ## [1] a    b    c    <NA>
> ## Levels: a b c
> xtabs(~data)
> ## data
> ## a b c
> ## 1 1 1
> xtabs(~data, na.action = na.pass)
> ## data
> ## a b c
> ## 1 1 1
> xtabs(~data, na.action = na.pass, exclude = numeric())
> ## data
> ## a b c
> ## 1 1 1
> xtabs(~data, na.action = na.pass, exclude = NULL)
> ## data
> ## a b c
> ## 1 1 1
> sessionInfo()
> ## R version 3.1.2 (2014-10-31)
> ## Platform: x86_64-pc-linux-gnu (64-bit)
> ##
> ## locale:
> ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> ##  [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8
> ##  [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8
> ##  [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C
> ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> ## [11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C
> ##
> ## attached base packages:
> ## [1] stats     graphics  grDevices utils     datasets  methods base
> ##
> ## other attached packages:
> ## [1] magrittr_1.5            ProjectTemplate_0.6-1.0
> ##
> ## loaded via a namespace (and not attached):
> ## [1] digest_0.6.8    evaluate_0.5.7  formatR_1.0.3 htmltools_0.2.6
> ## [5] knitr_1.9.2     rmarkdown_0.5.1 stringr_0.6.2 tools_3.1.2
> ## [9] ulimit_0.0-2
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From liguowei1991 at gmail.com  Sat Feb 14 18:54:24 2015
From: liguowei1991 at gmail.com (eigen)
Date: Sat, 14 Feb 2015 09:54:24 -0800 (PST)
Subject: [Rd] error code 1 from Lapack routine 'dsyevr'
In-Reply-To: <CAAHES9xHTnwSbT8u4gMveGah+N-OXa-MuDPsuH2b-4Nr4Gnk+w@mail.gmail.com>
References: <1422713746884-4702571.post@n4.nabble.com>
	<54CDDB89.5090406@stats.ox.ac.uk>
	<1422846495154-4702639.post@n4.nabble.com>
	<CAF8bMcYVoS2d=ybry9imR0omRj7Q1iH3F84cmOKmX-CMZPkrSQ@mail.gmail.com>
	<CAAHES9xHTnwSbT8u4gMveGah+N-OXa-MuDPsuH2b-4Nr4Gnk+w@mail.gmail.com>
Message-ID: <CAD6yrxgrfSceUvB6jJu4BniZUgvVqCcwNq3o0wz3dVkQ8EKyLQ@mail.gmail.com>

Thank you. I am too busy these days. I will get back to this problem once I
get some time.

On Mon, Feb 2, 2015 at 12:01 PM, Gavin Simpson-3 [via R] <
ml-node+s789695n4702678h87 at n4.nabble.com> wrote:

> On 2 February 2015 at 10:07, William Dunlap <[hidden email]
> <http:///user/SendEmail.jtp?type=node&node=4702678&i=0>> wrote:
> <snip>
> >
> > If all goes well then
> >    eigen(lastEigenX)
> > will cause the same error and you or someone on this list can see what
> > is odd about that matrix (e.g., by looking at its singular values).
>
>
> Preferably *not* this list as this doesn't really seem to be about
> developing R or with/for it. R-Help would have been a more appropriate
> venue for a question such as this.
>
> G
>
>
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com
> >
> > On Sun, Feb 1, 2015 at 7:08 PM, eigen <[hidden email]
> <http:///user/SendEmail.jtp?type=node&node=4702678&i=1>> wrote:
> >
> > > Thank you for your reply. Do you have any idea of how to get rid of
> the
> > > errors? I tried Null function to calculate eigenvectors and nearPD to
> get
> > > approximate positive definite matrix first but they also had errors.
> > >
> > >
> > >
> > > --
> > > View this message in context:
> > >
> >
> http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702639.html
> > > Sent from the R devel mailing list archive at Nabble.com.
> > >
> > > ______________________________________________
> > > [hidden email] <http:///user/SendEmail.jtp?type=node&node=4702678&i=2>
> mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > [hidden email] <http:///user/SendEmail.jtp?type=node&node=4702678&i=3>
> mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>
>
> --
> Gavin Simpson, PhD
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> [hidden email] <http:///user/SendEmail.jtp?type=node&node=4702678&i=4>
> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> ------------------------------
>  If you reply to this email, your message will be added to the discussion
> below:
>
> http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4702678.html
>  To unsubscribe from error code 1 from Lapack routine 'dsyevr', click here
> <http://r.789695.n4.nabble.com/template/NamlServlet.jtp?macro=unsubscribe_by_code&node=4702571&code=bGlndW93ZWkxOTkxQGdtYWlsLmNvbXw0NzAyNTcxfC0xMzQ2NjczNjQ0>
> .
> NAML
> <http://r.789695.n4.nabble.com/template/NamlServlet.jtp?macro=macro_viewer&id=instant_html%21nabble%3Aemail.naml&base=nabble.naml.namespaces.BasicNamespace-nabble.view.web.template.NabbleNamespace-nabble.view.web.template.NodeNamespace&breadcrumbs=notify_subscribers%21nabble%3Aemail.naml-instant_emails%21nabble%3Aemail.naml-send_instant_email%21nabble%3Aemail.naml>
>




--
View this message in context: http://r.789695.n4.nabble.com/error-code-1-from-Lapack-routine-dsyevr-tp4702571p4703267.html
Sent from the R devel mailing list archive at Nabble.com.
	[[alternative HTML version deleted]]


From therneau at mayo.edu  Mon Feb 16 00:31:00 2015
From: therneau at mayo.edu (Therneau, Terry M., Ph.D.)
Date: Sun, 15 Feb 2015 17:31:00 -0600
Subject: [Rd] Imports problem
Message-ID: <1e7ee5$2f7or@ironport10.mayo.edu>

I'm testing out a new version of coxme and R CMD check fails with "could not find function 
ranef" (or random.effects or fixef, or anything from nlme).  The NAMESPACE file has the 
line below

   importFrom(nlme, ranef, random.effects, fixef, fixed.effects, VarCorr)

and nlme is declared in the DESCRIPTION file as an import.  I feel that I must be staring 
at some obvious (but invisible to me) mistake.  Users are very likely to use "ranef" as well.

Second question.  The files now declare bdsmatrix as an import rather than a depends.  If 
one of my test files has an explicit call to a bdsmatrix function, I assume that I will 
need to put an explicit "require" there.

Third: How should "methods" be listed?  I'm getting a message from CMD check if I leave it 
in or leave it out.


An update to the survival package is forcing an update to one of the tests in coxme (the 
"rats" data set in survival now has both male and female, prompted by a user, but the test 
assumed the old version with only female).  An update of the include vs update material 
seemed in order as well.

Terry Therneau


From kellyhavel1989 at gmail.com  Mon Feb 16 01:52:45 2015
From: kellyhavel1989 at gmail.com (Qiang Kou)
Date: Sun, 15 Feb 2015 19:52:45 -0500
Subject: [Rd] Using Rtools with gcc 4.8.3
In-Reply-To: <5431399F.1040706@gmail.com>
References: <CABFfbXtyWxH4nC27idagHdYZEX3hHqqD07uiZc7CvHxuv2nASw@mail.gmail.com>
	<5431399F.1040706@gmail.com>
Message-ID: <CALD6sdZHZo1TC-v2yGK4YA8MVCUbdBHfS7n05L+2w0tzBXZn2Q@mail.gmail.com>

Hi, Duncan,

I think I can have a try. Upgrading shouldn't be that hard.

But I think I need the source for current version of Rtools, the link[1] on
website doesn't work any more.

Best wishes,

KK

[1] http://cran.r-project.org/bin/windows/Rtools/sources-tools

On Sun, Oct 5, 2014 at 8:29 AM, Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 05/10/2014, 6:20 AM, Jeroen Ooms wrote:
> > I started working on some R bindings for mongo-c-driver [1]. The C
> > library compiles fine on Ubuntu Trusty (gcc 4.8.2) and osx (clang),
> > however on my windows machine (gcc 4.6.3 from Rtools 3.1) it fails
> > with:  'INIT_ONCE_STATIC_INIT' undeclared. Google suggests that this
> > might be a problem in older versions of mingw-w64. So I grabbed a copy
> > of mingw-w64 version 4.8.3 and indeed, here the library compiles
> > without errors.
> >
> > Now I am unsure how to make mingw 4.8.3 work with Rtools. I extracted
> > the contents of [2] into "C:\RBuildTools\3.1\gcc-4.8.3\" and my
> > package Makevars contains
> >
> >   CC = "c:/RBuildTools/3.1/gcc-4.8.3/bin/gcc"
> >
> > However it seems like R still uses the old gcc 4.6.3 for R CMD
> > INSTALL. What am I doing wrong? Is there a recommended setup for
> > building packages on Windows using a Rtools but with another compiler?
>
> No, but I'd like to update Rtools to use the new compiler.  Have you got
> some time to help with that?
>
> Duncan Murdoch
>
> >
> > In addition: will I be able to publish this package to CRAN, or do I
> > have to wait for Rtools to get updated with a more recent gcc?
> >
> >
> > [1] https://github.com/mongodb/mongo-c-driver
> > [2]
> http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.8.3/threads-posix/dwarf/
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
*Bueno es hablar, pero mejor es callar*

	[[alternative HTML version deleted]]


From rhurlin at gwdg.de  Mon Feb 16 09:29:21 2015
From: rhurlin at gwdg.de (Rainer Hurling)
Date: Mon, 16 Feb 2015 09:29:21 +0100
Subject: [Rd] Small typo in german translation
Message-ID: <54E1AA61.6050108@gwdg.de>

Dear developers,

I found a small typo in the german translation for the aggregate() function:

In the string "keine Zeile f?r die Aggragation" it should be spelled 
'Aggregation' instead of 'Aggragation' (e instead a).

After a quick look into the sources, I found two places for it:

#grep -r -e "Aggragation" *
src/library/stats/po/R-de.po:msgstr "keine Zeile f?r die Aggragation"
Binary file src/library/translations/inst/de/LC_MESSAGES/R-stats.mo matches

This is (at least) on R-devel, I did not look into other versions. Hope, 
it is ok to not offer a diff for it.

Thanks for all your work.

Best regards,
Rainer Hurling


From maechler at lynne.stat.math.ethz.ch  Mon Feb 16 10:32:25 2015
From: maechler at lynne.stat.math.ethz.ch (Martin Maechler)
Date: Mon, 16 Feb 2015 10:32:25 +0100
Subject: [Rd] Imports problem
In-Reply-To: <1e7ee5$2f7or@ironport10.mayo.edu>
References: <1e7ee5$2f7or@ironport10.mayo.edu>
Message-ID: <21729.47401.494559.836260@stat.math.ethz.ch>

>>>>> Therneau, Terry M , Ph D <therneau at mayo.edu>
>>>>>     on Sun, 15 Feb 2015 17:31:00 -0600 writes:

    > I'm testing out a new version of coxme and R CMD check fails with "could not find function 
    > ranef" (or random.effects or fixef, or anything from nlme).  The NAMESPACE file has the 
    > line below

    > importFrom(nlme, ranef, random.effects, fixef, fixed.effects, VarCorr)

    > and nlme is declared in the DESCRIPTION file as an import.  I feel that I must be staring 
    > at some obvious (but invisible to me) mistake. 

are you using them in (help page) examples, demos, or vignettes
?

In that case, as you no longer 'Depend' on lme4, you need a 
 require(lme4)
before the corresponding code.

    >  Users are very likely to use "ranef" as well.

Well, and you are sure that you do not want them to see the help
file for ranef() ?

If a user of coxme() should typically use ranef() in her own code,
you should rather *depend* on lme4 than only *import* it.

    > Second question.  The files now declare bdsmatrix as an import rather than a depends.  If 
    > one of my test files has an explicit call to a bdsmatrix function, I assume that I will 
    > need to put an explicit "require" there.

Sure.  See above

    > Third: How should "methods" be listed?  I'm getting a message from CMD check if I leave it 
    > in or leave it out.

this is not precise enough for me to help, rather we need exact details.

    > An update to the survival package is forcing an update to one of the tests in coxme (the 
    > "rats" data set in survival now has both male and female, prompted by a user, but the test 
    > assumed the old version with only female).  An update of the include vs update material 
    > seemed in order as well.

??? {"nix verstahn"  we'd say here}

    > Terry Therneau

Martin Maechler


From murdoch.duncan at gmail.com  Mon Feb 16 11:38:24 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Mon, 16 Feb 2015 05:38:24 -0500
Subject: [Rd] Imports problem
In-Reply-To: <21729.47401.494559.836260@stat.math.ethz.ch>
References: <1e7ee5$2f7or@ironport10.mayo.edu>
	<21729.47401.494559.836260@stat.math.ethz.ch>
Message-ID: <54E1C8A0.8000601@gmail.com>

On 16/02/2015 4:32 AM, Martin Maechler wrote:
>>>>>> Therneau, Terry M , Ph D <therneau at mayo.edu>
>>>>>>     on Sun, 15 Feb 2015 17:31:00 -0600 writes:
> 
>     > I'm testing out a new version of coxme and R CMD check fails with "could not find function 
>     > ranef" (or random.effects or fixef, or anything from nlme).  The NAMESPACE file has the 
>     > line below
> 
>     > importFrom(nlme, ranef, random.effects, fixef, fixed.effects, VarCorr)
> 
>     > and nlme is declared in the DESCRIPTION file as an import.  I feel that I must be staring 
>     > at some obvious (but invisible to me) mistake. 
> 
> are you using them in (help page) examples, demos, or vignettes
> ?
> 
> In that case, as you no longer 'Depend' on lme4, you need a 
>  require(lme4)
> before the corresponding code.

Or use it with the prefix, lme4::ranef.  This is somewhat preferred, as
it doesn't modify the user's search list.

Duncan Murdoch

> 
>     >  Users are very likely to use "ranef" as well.
> 
> Well, and you are sure that you do not want them to see the help
> file for ranef() ?
> 
> If a user of coxme() should typically use ranef() in her own code,
> you should rather *depend* on lme4 than only *import* it.
> 
>     > Second question.  The files now declare bdsmatrix as an import rather than a depends.  If 
>     > one of my test files has an explicit call to a bdsmatrix function, I assume that I will 
>     > need to put an explicit "require" there.
> 
> Sure.  See above
> 
>     > Third: How should "methods" be listed?  I'm getting a message from CMD check if I leave it 
>     > in or leave it out.
> 
> this is not precise enough for me to help, rather we need exact details.
> 
>     > An update to the survival package is forcing an update to one of the tests in coxme (the 
>     > "rats" data set in survival now has both male and female, prompted by a user, but the test 
>     > assumed the old version with only female).  An update of the include vs update material 
>     > seemed in order as well.
> 
> ??? {"nix verstahn"  we'd say here}
> 
>     > Terry Therneau
> 
> Martin Maechler
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From therneau at mayo.edu  Mon Feb 16 14:20:05 2015
From: therneau at mayo.edu (Therneau, Terry M., Ph.D.)
Date: Mon, 16 Feb 2015 07:20:05 -0600
Subject: [Rd] Imports problem
In-Reply-To: <mailman.11.1424084405.7886.r-devel@r-project.org>
References: <mailman.11.1424084405.7886.r-devel@r-project.org>
Message-ID: <1e7ee5$2ga8r@ironport10.mayo.edu>


>     > I'm testing out a new version of coxme and R CMD check fails with "could not find function
>      > ranef" (or random.effects or fixef, or anything from nlme).  The NAMESPACE file has the
>      > line below
>
>      > importFrom(nlme, ranef, random.effects, fixef, fixed.effects, VarCorr)
>
>      > and nlme is declared in the DESCRIPTION file as an import.  I feel that I must be staring
>      > at some obvious (but invisible to me) mistake.
>
> are you using them in (help page) examples, demos, or vignettes
> ?
>
> In that case, as you no longer 'Depend' on lme4, you need a
>   require(lme4)
> before the corresponding code.

Duncan and Martin,

These are helpful comments.  Let me start over and be more clear. It also helps that I'm 
not writing this second note when I am too tired, and trying to push coxme out the door 
before I had planned because of an interaction with one of the "survival" data sets 
("rats" got bigger, making one coxme test fail).

   1. The heart of the issue is an attempt to follow the general advice of "almost no 
depends, only imports."  For the S3 methods imported from nlme I now see this as a bad 
idea.  The help page, vignettes, etc all tell the users of coxme to type "ranef(fit)" to 
get random effects.  I do not want to force them to type "nlme::ranef(fit)".  I will 
return nlme to the depends list.

   2. I depend on the S3 generics of nlme: both of you wrote "lme4" in your response.  
Freudian slip, or was there a reason?  I can include either, as long as it works.  The 
reason I don't define the generics myself is that it is quite possible for someone to be 
fitting both linear and Cox mixed effects models, and if two packages define the generics 
de novo then all methods for one of them disappear, or at least that was true in prior 
releases of R (the last one loaded wins).  Any advice?   Take it as a given that survival 
and coxme will remain firmly in the S3 camp.

  3. Given 1 and 2, should the coxme function import all of nlme, or (as present) only the 
methods?

Terry T


From murdoch.duncan at gmail.com  Mon Feb 16 14:35:29 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Mon, 16 Feb 2015 08:35:29 -0500
Subject: [Rd] Imports problem
In-Reply-To: <1e7ee5$2ga8q@ironport10.mayo.edu>
References: <mailman.11.1424084405.7886.r-devel@r-project.org>
	<1e7ee5$2ga8q@ironport10.mayo.edu>
Message-ID: <54E1F221.4010106@gmail.com>

On 16/02/2015 8:20 AM, Therneau, Terry M., Ph.D. wrote:
> 
>>     > I'm testing out a new version of coxme and R CMD check fails with "could not find function
>>      > ranef" (or random.effects or fixef, or anything from nlme).  The NAMESPACE file has the
>>      > line below
>>
>>      > importFrom(nlme, ranef, random.effects, fixef, fixed.effects, VarCorr)
>>
>>      > and nlme is declared in the DESCRIPTION file as an import.  I feel that I must be staring
>>      > at some obvious (but invisible to me) mistake.
>>
>> are you using them in (help page) examples, demos, or vignettes
>> ?
>>
>> In that case, as you no longer 'Depend' on lme4, you need a
>>   require(lme4)
>> before the corresponding code.
> 
> Duncan and Martin,
> 
> These are helpful comments.  Let me start over and be more clear. It also helps that I'm 
> not writing this second note when I am too tired, and trying to push coxme out the door 
> before I had planned because of an interaction with one of the "survival" data sets 
> ("rats" got bigger, making one coxme test fail).
> 
>    1. The heart of the issue is an attempt to follow the general advice of "almost no 
> depends, only imports."  For the S3 methods imported from nlme I now see this as a bad 
> idea.  The help page, vignettes, etc all tell the users of coxme to type "ranef(fit)" to 
> get random effects.  I do not want to force them to type "nlme::ranef(fit)".  I will 
> return nlme to the depends list.

I believe you can import it and then export it from your own package,
though I don't know if this will lead to other problems.

>    2. I depend on the S3 generics of nlme: both of you wrote "lme4" in your response.  
> Freudian slip, or was there a reason? 

Not for me:  I just copied it from Martin's message.

 I can include either, as long as it works.  The
> reason I don't define the generics myself is that it is quite possible for someone to be 
> fitting both linear and Cox mixed effects models, and if two packages define the generics 
> de novo then all methods for one of them disappear, or at least that was true in prior 
> releases of R (the last one loaded wins).  Any advice?   Take it as a given that survival 
> and coxme will remain firmly in the S3 camp.
> 
>   3. Given 1 and 2, should the coxme function import all of nlme, or (as present) only the 
> methods?

If you are depending on nlme, you don't need to also import it.  But it
is generally a good practice to avoid either modifying or relying on the
search list:  as people get more packages there, there are more chances
for clashes.

Duncan


From ligges at statistik.tu-dortmund.de  Mon Feb 16 15:00:20 2015
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Mon, 16 Feb 2015 15:00:20 +0100
Subject: [Rd] Imports problem
In-Reply-To: <54E1F221.4010106@gmail.com>
References: <mailman.11.1424084405.7886.r-devel@r-project.org>	<1e7ee5$2ga8q@ironport10.mayo.edu>
	<54E1F221.4010106@gmail.com>
Message-ID: <54E1F7F4.3050208@statistik.tu-dortmund.de>



On 16.02.2015 14:35, Duncan Murdoch wrote:
> On 16/02/2015 8:20 AM, Therneau, Terry M., Ph.D. wrote:
>>
>>>      > I'm testing out a new version of coxme and R CMD check fails with "could not find function
>>>       > ranef" (or random.effects or fixef, or anything from nlme).  The NAMESPACE file has the
>>>       > line below
>>>
>>>       > importFrom(nlme, ranef, random.effects, fixef, fixed.effects, VarCorr)
>>>
>>>       > and nlme is declared in the DESCRIPTION file as an import.  I feel that I must be staring
>>>       > at some obvious (but invisible to me) mistake.
>>>
>>> are you using them in (help page) examples, demos, or vignettes
>>> ?
>>>
>>> In that case, as you no longer 'Depend' on lme4, you need a
>>>    require(lme4)
>>> before the corresponding code.
>>
>> Duncan and Martin,
>>
>> These are helpful comments.  Let me start over and be more clear. It also helps that I'm
>> not writing this second note when I am too tired, and trying to push coxme out the door
>> before I had planned because of an interaction with one of the "survival" data sets
>> ("rats" got bigger, making one coxme test fail).
>>
>>     1. The heart of the issue is an attempt to follow the general advice of "almost no
>> depends, only imports."  For the S3 methods imported from nlme I now see this as a bad
>> idea.  The help page, vignettes, etc all tell the users of coxme to type "ranef(fit)" to
>> get random effects.  I do not want to force them to type "nlme::ranef(fit)".  I will
>> return nlme to the depends list.
>
> I believe you can import it and then export it from your own package,
> though I don't know if this will lead to other problems.
>
>>     2. I depend on the S3 generics of nlme: both of you wrote "lme4" in your response.
>> Freudian slip, or was there a reason?
>
> Not for me:  I just copied it from Martin's message.
>
>   I can include either, as long as it works.  The
>> reason I don't define the generics myself is that it is quite possible for someone to be
>> fitting both linear and Cox mixed effects models, and if two packages define the generics
>> de novo then all methods for one of them disappear, or at least that was true in prior
>> releases of R (the last one loaded wins).  Any advice?   Take it as a given that survival
>> and coxme will remain firmly in the S3 camp.
>>
>>    3. Given 1 and 2, should the coxme function import all of nlme, or (as present) only the
>> methods?
>
> If you are depending on nlme, you don't need to also import it.

Well, you should import all the functionality that you actually want to 
use (see Duncan's comment below). Otherwise R CMD check should yell.

Best,
Uwe

> But it
> is generally a good practice to avoid either modifying or relying on the
> search list:  as people get more packages there, there are more chances
> for clashes.
>
> Duncan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ligges at statistik.tu-dortmund.de  Mon Feb 16 15:03:35 2015
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Mon, 16 Feb 2015 15:03:35 +0100
Subject: [Rd] Small typo in german translation
In-Reply-To: <54E1AA61.6050108@gwdg.de>
References: <54E1AA61.6050108@gwdg.de>
Message-ID: <54E1F8B7.7070809@statistik.tu-dortmund.de>

Please send comments related to transaltions to the corresponding 
translation teams:

http://developer.r-project.org/TranslationTeams.html
In this case I am CCIng Detlef Steuer.

Best,
Uwe Ligges



On 16.02.2015 09:29, Rainer Hurling wrote:
> Dear developers,
>
> I found a small typo in the german translation for the aggregate()
> function:
>
> In the string "keine Zeile f?r die Aggragation" it should be spelled
> 'Aggregation' instead of 'Aggragation' (e instead a).
>
> After a quick look into the sources, I found two places for it:
>
> #grep -r -e "Aggragation" *
> src/library/stats/po/R-de.po:msgstr "keine Zeile f?r die Aggragation"
> Binary file src/library/translations/inst/de/LC_MESSAGES/R-stats.mo matches
>
> This is (at least) on R-devel, I did not look into other versions. Hope,
> it is ok to not offer a diff for it.
>
> Thanks for all your work.
>
> Best regards,
> Rainer Hurling
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therneau at mayo.edu  Mon Feb 16 15:04:47 2015
From: therneau at mayo.edu (Therneau, Terry M., Ph.D.)
Date: Mon, 16 Feb 2015 08:04:47 -0600
Subject: [Rd] Imports problem
In-Reply-To: <54E1F221.4010106@gmail.com>
References: <mailman.11.1424084405.7886.r-devel@r-project.org>
	<1e7ee5$2ga8q@ironport10.mayo.edu> <54E1F221.4010106@gmail.com>
Message-ID: <1e7ee5$2glv2@ironport10.mayo.edu>

On 02/16/2015 07:35 AM, Duncan Murdoch wrote:
> If you are depending on nlme, you don't also need to import it. But it
> is generally a good practice to avoid either modifying or relying on the
> search list:  as people get more packages there, there are more chances
> for clashes.
I would suggest adding the second sentence above to the "Writing R extensions" manual.  At 
least for me, it made the :: argument much clearer in the following paragraph (found 
there).  Before the "why" was a bit mysterious, now I have a motivation to make some of 
these changes in my own code.

"R code in the package should call library or require only exceptionally. Such calls are 
never needed for packages listed in ?Depends? as they will already be on the search path. 
It used to be common practice to use require calls for packages listed in ?Suggests? in 
functions which used their functionality, but nowadays it is better to access such 
functionality via :: calls."

I disagree with the above sentence in one case, however.  That is in a vignette where one 
is showing the user a direction that they might go themselves.  For example I'm currently 
working on a competing risks vignette for the survival package which shows how to do a 
particular analysis and then has a section on "if you choose to fit a Fine-Gray model 
instead, this is how it compares".  Since any user who wanted to fit that model would 
themselves start with "library(cmprsk)", the vignette does so too.  My argument is 
pedagogical rather than technical.

Last note: your first sentence clashes with one in the Writing R extensions manual. 
"Almost always packages mentioned in ?Depends? should also be imported from in the 
NAMESPACE file: this ensures that any needed parts of those packages are available when 
some other package imports the current package."


From rhurlin at gwdg.de  Mon Feb 16 17:55:43 2015
From: rhurlin at gwdg.de (Rainer Hurling)
Date: Mon, 16 Feb 2015 17:55:43 +0100
Subject: [Rd] Small typo in german translation
In-Reply-To: <54E1F8B7.7070809@statistik.tu-dortmund.de>
References: <54E1AA61.6050108@gwdg.de>
	<54E1F8B7.7070809@statistik.tu-dortmund.de>
Message-ID: <54E2210F.20700@gwdg.de>

Am 16.02.2015 um 15:03 schrieb Uwe Ligges:
> Please send comments related to transaltions to the corresponding
> translation teams:
> 
> http://developer.r-project.org/TranslationTeams.html
> In this case I am CCIng Detlef Steuer.

Of course, you are right. Next time, I will do so.

Thanks for your hint, and also to Detlef for taking it.

Greetings,
Rainer Hurling

> 
> Best,
> Uwe Ligges
> 
> 
> 
> On 16.02.2015 09:29, Rainer Hurling wrote:
>> Dear developers,
>>
>> I found a small typo in the german translation for the aggregate()
>> function:
>>
>> In the string "keine Zeile f?r die Aggragation" it should be spelled
>> 'Aggregation' instead of 'Aggragation' (e instead a).
>>
>> After a quick look into the sources, I found two places for it:
>>
>> #grep -r -e "Aggragation" *
>> src/library/stats/po/R-de.po:msgstr "keine Zeile f?r die Aggragation"
>> Binary file src/library/translations/inst/de/LC_MESSAGES/R-stats.mo
>> matches
>>
>> This is (at least) on R-devel, I did not look into other versions. Hope,
>> it is ok to not offer a diff for it.
>>
>> Thanks for all your work.
>>
>> Best regards,
>> Rainer Hurling


From nate at verse.com  Tue Feb 17 21:51:00 2015
From: nate at verse.com (Nathan Kurz)
Date: Tue, 17 Feb 2015 12:51:00 -0800
Subject: [Rd] Recycling memory with a small free list
Message-ID: <CAFAN8vw27Nyewr2WuZP3fDRv4imS41hRBzXsV+n2fxaYFeZB8g@mail.gmail.com>

I'm trying to improve the performance of the update loop within a
logistic regression, and am struggling against the overhead of memory
allocation and garbage collection.   The main issue I'd like to solve
is with assignments inside of loops like this:

reweight = function(iter, w, Q) {
  for (i in 1:iter) {
    wT = w * Q
  }
}

If the matrix Q is large I can get a significant gain in performance
if I can reuse the same allocation for wT rather than making a new
allocation on each loop iteration.

While I can solve this problem in this case with an Rcpp function that
does the modifications in place, this seems like a case where a more
general solution might work well.   While normally we don't know
whether an allocation has gone out of scope, the left-hand-side of an
assignment is a frequent exception.  Instead of simply letting the LHS
become unreferenced, has the possibility of adding a small free-list
been considered?

That is, before the RHS is executed, the LHS allocation would be added
to a small fixed length list of available space which is checked
before future allocations.   If the same size is requested before the
next garbage collection, the allocation is short-circuited and the
allocation is reused.   This list could be very small, possibly even
only a single entry.  Entries would only be put on the list if they
have no other references.   If a garbage collection is triggered, the
list would be emptied and the contents collected.

While my understanding of R's memory strategy is still limited, it
looks like this would be a reasonably straightforward patch that could
touch only the assignment operator, the vector allocator, and the
collection routine.   Overall memory usage should go down, and in the
cases I'm considering, the performance improvement would be large.
Measurement details are here:
http://stackoverflow.com/questions/28532493/reusing-existing-memory-for-blas-operations-in-r

Are there downsides or difficulties to this approach that I'm missing?

Nathan Kurz
nate at verse.com


From hhoeflin at gmail.com  Wed Feb 18 11:16:58 2015
From: hhoeflin at gmail.com (Holger Hoefling)
Date: Wed, 18 Feb 2015 11:16:58 +0100
Subject: [Rd] Different serialization of functions in interactive vs. batch
	mode
Message-ID: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>

Hi,

I posted this question to the regular help list, but it seems to be
this is probably a question that is better addressed on r-devel. Sorry
for the double posting.

I am using hash-values to cache certain results in R. This caching
also depends on the hash-value of the function that is being cached
(calculated using the digest package). I noticed that computations
that should already be cached are recomputed when switching from an
interactive session to a BATCH session. Therefore, I wrote a test
script

library(digest)
testfun <- function() {
    return(NULL)
}
testval <- "testval"
print(digest(testfun))
print(serialize(testfun, connection = NULL))

and executed it once using input-redirection from a file (testFile.R)
and once copying the code into an interactive R session. The
hash-values of the functions differ. As digest internally relies on
serialize, I also checked there and found that digest is not the
reason for the discrepancy. Instead, the serialized value of the
function already differs between the BATCH and inteactive sessions.

I was wondering if someone knows if
1. Is this a feature or a bug? It feels like a bug to me as all the
inputs are identical, I would expect that the output is identical as
well. Is there something I am overlooking?
2. Is there a way to get consistent hash-values for functions between
BATCH and interactive sessions.

The output from the BATCH and interactive runs are below (as well as
sessionInfo)

Thank you very much for your help!

Holger Hoefling

---------------------------------
BATCH run (via input redirection):

$ R --vanilla < testFile.R

R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(digest)
> testfun <- function() {
+     return(NULL)
+ }
> print(digest(testfun))
[1] "b03160b9250f0d5b5bcce42bd86d8e56"
> print(serialize(testfun, connection = NULL))
 [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00 00 00
[26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
[51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
[76] 00 fe 00 00 00 fe 00 00 00 fe
> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] digest_0.6.4
>

----------------------------------------------
Interactive run:

$ R --vanilla

R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(digest)
> testfun <- function() {
+     return(NULL)
+ }
> print(digest(testfun))
[1] "fada482d2894088b079a8e56b7044862"
> print(serialize(testfun, connection = NULL))
  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02 00 00 00
 [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00
 [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01 00 00 00
 [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73 72 63 66
[101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00 01 00 04
[126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00 09 00 00
[151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28 29 20 7b
[176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00 04 02 00
[201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00 10 00 00
[226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02 00 00 00
[251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02 00 04 00
[276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00 00 07 73
[301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00
[326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00 fe 00 00
[351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13 00 00 00
[376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00 00 00 17
[401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00 02 ff 00
[426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00 09 00 00
[451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00 00 02 00
[476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00 02 00 00
[501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00
[526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
[551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00
[576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00 00 01 00
[601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 01 00 00
[626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00
[651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
[676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00 06 00 00
[701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00 00 fe 00
[726] 00 00 fe 00 00 00 fe
> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] digest_0.6.4
>


From luke-tierney at uiowa.edu  Wed Feb 18 15:04:42 2015
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Wed, 18 Feb 2015 08:04:42 -0600
Subject: [Rd] Different serialization of functions in interactive vs.
 batch	mode
In-Reply-To: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
Message-ID: <alpine.DEB.2.02.1502180804090.2336@luke-Latitude>

Add

attributes(testfun)

and you will see where the two functions differ.

luke

On Wed, 18 Feb 2015, Holger Hoefling wrote:

> Hi,
>
> I posted this question to the regular help list, but it seems to be
> this is probably a question that is better addressed on r-devel. Sorry
> for the double posting.
>
> I am using hash-values to cache certain results in R. This caching
> also depends on the hash-value of the function that is being cached
> (calculated using the digest package). I noticed that computations
> that should already be cached are recomputed when switching from an
> interactive session to a BATCH session. Therefore, I wrote a test
> script
>
> library(digest)
> testfun <- function() {
>    return(NULL)
> }
> testval <- "testval"
> print(digest(testfun))
> print(serialize(testfun, connection = NULL))
>
> and executed it once using input-redirection from a file (testFile.R)
> and once copying the code into an interactive R session. The
> hash-values of the functions differ. As digest internally relies on
> serialize, I also checked there and found that digest is not the
> reason for the discrepancy. Instead, the serialized value of the
> function already differs between the BATCH and inteactive sessions.
>
> I was wondering if someone knows if
> 1. Is this a feature or a bug? It feels like a bug to me as all the
> inputs are identical, I would expect that the output is identical as
> well. Is there something I am overlooking?
> 2. Is there a way to get consistent hash-values for functions between
> BATCH and interactive sessions.
>
> The output from the BATCH and interactive runs are below (as well as
> sessionInfo)
>
> Thank you very much for your help!
>
> Holger Hoefling
>
> ---------------------------------
> BATCH run (via input redirection):
>
> $ R --vanilla < testFile.R
>
> R version 3.1.0 (2014-04-10) -- "Spring Dance"
> Copyright (C) 2014 The R Foundation for Statistical Computing
> Platform: x86_64-unknown-linux-gnu (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
>> library(digest)
>> testfun <- function() {
> +     return(NULL)
> + }
>> print(digest(testfun))
> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
>> print(serialize(testfun, connection = NULL))
> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00 00 00
> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
> [76] 00 fe 00 00 00 fe 00 00 00 fe
>> sessionInfo()
> R version 3.1.0 (2014-04-10)
> Platform: x86_64-unknown-linux-gnu (64-bit)
>
> locale:
> [1] C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] digest_0.6.4
>>
>
> ----------------------------------------------
> Interactive run:
>
> $ R --vanilla
>
> R version 3.1.0 (2014-04-10) -- "Spring Dance"
> Copyright (C) 2014 The R Foundation for Statistical Computing
> Platform: x86_64-unknown-linux-gnu (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
>> library(digest)
>> testfun <- function() {
> +     return(NULL)
> + }
>> print(digest(testfun))
> [1] "fada482d2894088b079a8e56b7044862"
>> print(serialize(testfun, connection = NULL))
>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02 00 00 00
> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00
> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01 00 00 00
> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73 72 63 66
> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00 01 00 04
> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00 09 00 00
> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28 29 20 7b
> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00 04 02 00
> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00 10 00 00
> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02 00 00 00
> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02 00 04 00
> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00 00 07 73
> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00
> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00 fe 00 00
> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13 00 00 00
> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00 00 00 17
> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00 02 ff 00
> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00 09 00 00
> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00 00 02 00
> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00 02 00 00
> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00
> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00
> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00 00 01 00
> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 01 00 00
> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00
> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00 06 00 00
> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00 00 fe 00
> [726] 00 00 fe 00 00 00 fe
>> sessionInfo()
> R version 3.1.0 (2014-04-10)
> Platform: x86_64-unknown-linux-gnu (64-bit)
>
> locale:
> [1] C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] digest_0.6.4
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From hhoeflin at gmail.com  Wed Feb 18 15:22:29 2015
From: hhoeflin at gmail.com (Holger Hoefling)
Date: Wed, 18 Feb 2015 15:22:29 +0100
Subject: [Rd] Different serialization of functions in interactive vs.
 batch mode
In-Reply-To: <alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
	<alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
Message-ID: <CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>

Hi Luke,

Ah - I see - thank you! This at least points me to a way on how to
"fix" this. I tried setting the srcref attribute to NULL, but the hash
value is still different and so is the serialization. So this looks
like it is one difference, but not all of them

Even if all differences were identified - it still leaves me with
different behavior between interactive and batch-mode, though. I am
curious as to why that is. Do you know why in interactive mode the
attribute with the srcref is set, but not in batch mode?

Thanks!

Holger

P.S. I attached the output I get when i set the attributes to NULL


On Wed, Feb 18, 2015 at 3:04 PM,  <luke-tierney at uiowa.edu> wrote:
> Add
>
> attributes(testfun)
>
> and you will see where the two functions differ.
>
> luke
>
>
> On Wed, 18 Feb 2015, Holger Hoefling wrote:
>
>> Hi,
>>
>> I posted this question to the regular help list, but it seems to be
>> this is probably a question that is better addressed on r-devel. Sorry
>> for the double posting.
>>
>> I am using hash-values to cache certain results in R. This caching
>> also depends on the hash-value of the function that is being cached
>> (calculated using the digest package). I noticed that computations
>> that should already be cached are recomputed when switching from an
>> interactive session to a BATCH session. Therefore, I wrote a test
>> script
>>
>> library(digest)
>> testfun <- function() {
>>    return(NULL)
>> }
>> testval <- "testval"
>> print(digest(testfun))
>> print(serialize(testfun, connection = NULL))
>>
>> and executed it once using input-redirection from a file (testFile.R)
>> and once copying the code into an interactive R session. The
>> hash-values of the functions differ. As digest internally relies on
>> serialize, I also checked there and found that digest is not the
>> reason for the discrepancy. Instead, the serialized value of the
>> function already differs between the BATCH and inteactive sessions.
>>
>> I was wondering if someone knows if
>> 1. Is this a feature or a bug? It feels like a bug to me as all the
>> inputs are identical, I would expect that the output is identical as
>> well. Is there something I am overlooking?
>> 2. Is there a way to get consistent hash-values for functions between
>> BATCH and interactive sessions.
>>
>> The output from the BATCH and interactive runs are below (as well as
>> sessionInfo)
>>
>> Thank you very much for your help!
>>
>> Holger Hoefling
>>
>> ---------------------------------
>> BATCH run (via input redirection):
>>
>> $ R --vanilla < testFile.R
>>
>> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>> Copyright (C) 2014 The R Foundation for Statistical Computing
>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>>> library(digest)
>>> testfun <- function() {
>>
>> +     return(NULL)
>> + }
>>>
>>> print(digest(testfun))
>>
>> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
>>>
>>> print(serialize(testfun, connection = NULL))
>>
>> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00
>> 00 00
>> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00
>> 00 00
>> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02
>> 00 00
>> [76] 00 fe 00 00 00 fe 00 00 00 fe
>>>
>>> sessionInfo()
>>
>> R version 3.1.0 (2014-04-10)
>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>
>> locale:
>> [1] C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> other attached packages:
>> [1] digest_0.6.4
>>>
>>>
>>
>> ----------------------------------------------
>> Interactive run:
>>
>> $ R --vanilla
>>
>> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>> Copyright (C) 2014 The R Foundation for Statistical Computing
>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>>> library(digest)
>>> testfun <- function() {
>>
>> +     return(NULL)
>> + }
>>>
>>> print(digest(testfun))
>>
>> [1] "fada482d2894088b079a8e56b7044862"
>>>
>>> print(serialize(testfun, connection = NULL))
>>
>>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02 00
>> 00 00
>> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00 08
>> 00 00
>> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01 00
>> 00 00
>> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73 72
>> 63 66
>> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00 01
>> 00 04
>> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00 09
>> 00 00
>> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28 29
>> 20 7b
>> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00 04
>> 02 00
>> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00 10
>> 00 00
>> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02 00
>> 00 00
>> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02 00
>> 04 00
>> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00 00
>> 07 73
>> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10 00
>> 00 00
>> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00 fe
>> 00 00
>> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13 00
>> 00 00
>> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00 00
>> 00 17
>> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00 02
>> ff 00
>> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00 09
>> 00 00
>> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00 00
>> 02 00
>> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00 02
>> 00 00
>> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00
>> 00 00
>> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe
>> 00 00
>> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09 00
>> 00 00
>> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00 00
>> 01 00
>> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 01
>> 00 00
>> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00
>> 00 00
>> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe
>> 00 00
>> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00 06
>> 00 00
>> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00 00
>> fe 00
>> [726] 00 00 fe 00 00 00 fe
>>>
>>> sessionInfo()
>>
>> R version 3.1.0 (2014-04-10)
>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>
>> locale:
>> [1] C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> other attached packages:
>> [1] digest_0.6.4
>>>
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
-------------- next part --------------
library(digest)
testfun <- function() {
    return(NULL)
}
print(digest(testfun))
print(serialize(testfun, connection = NULL))
print(attributes(testfun))
attributes(testfun)$srcref <- NULL
print(attributes(testfun))
print(digest(testfun))
print(serialize(testfun, connection = NULL))
sessionInfo()



===============================================================================
Interactive mode:
$ R --vanilla

R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(digest)
> testfun <- function() {
+     return(NULL)
+ }
> print(digest(testfun))
[1] "fada482d2894088b079a8e56b7044862"
> print(serialize(testfun, connection = NULL))
  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02 00 00 00
 [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00
 [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01 00 00 00
 [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73 72 63 66
[101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00 01 00 04
[126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00 09 00 00
[151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28 29 20 7b
[176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00 04 02 00
[201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00 10 00 00
[226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02 00 00 00
[251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02 00 04 00
[276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00 00 07 73
[301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00
[326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00 fe 00 00
[351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13 00 00 00
[376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00 00 00 17
[401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00 02 ff 00
[426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00 09 00 00
[451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00 00 02 00
[476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00 02 00 00
[501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00
[526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
[551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00
[576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00 00 01 00
[601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 01 00 00
[626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00
[651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
[676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00 06 00 00
[701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00 00 fe 00
[726] 00 00 fe 00 00 00 fe
> print(attributes(testfun))
$srcref
function() {
    return(NULL)
}

> attributes(testfun)$srcref <- NULL
> print(attributes(testfun))
NULL
> print(digest(testfun))
[1] "87985c7cab8f65bc74dd8ac95d58ed32"
> print(serialize(testfun, connection = NULL))
  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00 00 00
 [26] fe 00 00 02 06 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72
 [51] 65 66 00 00 00 13 00 00 00 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00
 [76] 17 00 00 00 01 00 00 00 17 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01
[101] 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73 72 63 66 69 6c 65 00 00
[126] 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00
[151] 0d 66 69 78 65 64 4e 65 77 6c 69 6e 65 73 00 00 00 0a 00 00 00 01 00 00 00
[176] 01 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00
[201] 10 00 00 00 04 00 04 00 09 00 00 00 17 74 65 73 74 66 75 6e 20 3c 2d 20 66
[226] 75 6e 63 74 69 6f 6e 28 29 20 7b 00 04 00 09 00 00 00 10 20 20 20 20 72 65
[251] 74 75 72 6e 28 4e 55 4c 4c 29 00 04 00 09 00 00 00 01 7d 00 04 00 09 00 00
[276] 00 00 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d
[301] 65 00 00 00 10 00 00 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe
[326] 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10
[351] 00 00 00 02 00 04 00 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04
[376] 00 09 00 00 00 07 73 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 07 ff
[401] 00 00 00 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
[426] fe 00 00 03 0d 00 00 00 08 00 00 00 02 00 00 00 05 00 00 00 02 00 00 00 10
[451] 00 00 00 05 00 00 00 10 00 00 00 02 00 00 00 02 00 00 04 02 00 00 02 ff 00
[476] 00 03 ff 00 00 04 02 00 00 07 ff 00 00 00 10 00 00 00 01 00 04 00 09 00 00
[501] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 04 02 00 00 02 ff 00 00 03 ff 00
[526] 00 04 02 00 00 00 01 00 04 00 09 00 00 00 0b 77 68 6f 6c 65 53 72 63 72 65
[551] 66 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 00 00 00 00 03 00 00 00 01
[576] 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 03 00 00 04 02 00 00 02 ff 00
[601] 00 03 ff 00 00 04 02 00 00 07 ff 00 00 00 10 00 00 00 01 00 04 00 09 00 00
[626] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00 fe 00 00 00 01 00 04 00 09 00
[651] 00 00 01 7b 00 00 00 02 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 06 72
[676] 65 74 75 72 6e 00 00 00 02 00 00 00 fe 00 00 00 fe 00 00 00 fe
> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] digest_0.6.4
> 

===============================================================================
Batch mode:
$ R --vanilla < testFile.R 

R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(digest)
> testfun <- function() {
+     return(NULL)
+ }
> print(digest(testfun))
[1] "b03160b9250f0d5b5bcce42bd86d8e56"
> print(serialize(testfun, connection = NULL))
 [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00 00 00
[26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
[51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
[76] 00 fe 00 00 00 fe 00 00 00 fe
> print(attributes(testfun))
NULL
> attributes(testfun)$srcref <- NULL
> print(attributes(testfun))
NULL
> print(digest(testfun))
[1] "b03160b9250f0d5b5bcce42bd86d8e56"
> print(serialize(testfun, connection = NULL))
 [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00 00 00
[26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
[51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
[76] 00 fe 00 00 00 fe 00 00 00 fe
> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] digest_0.6.4
> 

From gmbecker at ucdavis.edu  Wed Feb 18 15:36:03 2015
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Wed, 18 Feb 2015 06:36:03 -0800
Subject: [Rd] Different serialization of functions in interactive vs.
 batch mode
In-Reply-To: <CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
	<alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
	<CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
Message-ID: <CADwqtCPV0h6gH6nO8=WZubhXXPRsHTxHPhk99FUPmMd+27Ow+A@mail.gmail.com>

Holger,

For me (see session info) using

digest(as.list(f))

gets around this problem.

~G

> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-pc-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] digest_0.6.8




On Wed, Feb 18, 2015 at 6:22 AM, Holger Hoefling <hhoeflin at gmail.com> wrote:

> Hi Luke,
>
> Ah - I see - thank you! This at least points me to a way on how to
> "fix" this. I tried setting the srcref attribute to NULL, but the hash
> value is still different and so is the serialization. So this looks
> like it is one difference, but not all of them
>
> Even if all differences were identified - it still leaves me with
> different behavior between interactive and batch-mode, though. I am
> curious as to why that is. Do you know why in interactive mode the
> attribute with the srcref is set, but not in batch mode?
>
> Thanks!
>
> Holger
>
> P.S. I attached the output I get when i set the attributes to NULL
>
>
> On Wed, Feb 18, 2015 at 3:04 PM,  <luke-tierney at uiowa.edu> wrote:
> > Add
> >
> > attributes(testfun)
> >
> > and you will see where the two functions differ.
> >
> > luke
> >
> >
> > On Wed, 18 Feb 2015, Holger Hoefling wrote:
> >
> >> Hi,
> >>
> >> I posted this question to the regular help list, but it seems to be
> >> this is probably a question that is better addressed on r-devel. Sorry
> >> for the double posting.
> >>
> >> I am using hash-values to cache certain results in R. This caching
> >> also depends on the hash-value of the function that is being cached
> >> (calculated using the digest package). I noticed that computations
> >> that should already be cached are recomputed when switching from an
> >> interactive session to a BATCH session. Therefore, I wrote a test
> >> script
> >>
> >> library(digest)
> >> testfun <- function() {
> >>    return(NULL)
> >> }
> >> testval <- "testval"
> >> print(digest(testfun))
> >> print(serialize(testfun, connection = NULL))
> >>
> >> and executed it once using input-redirection from a file (testFile.R)
> >> and once copying the code into an interactive R session. The
> >> hash-values of the functions differ. As digest internally relies on
> >> serialize, I also checked there and found that digest is not the
> >> reason for the discrepancy. Instead, the serialized value of the
> >> function already differs between the BATCH and inteactive sessions.
> >>
> >> I was wondering if someone knows if
> >> 1. Is this a feature or a bug? It feels like a bug to me as all the
> >> inputs are identical, I would expect that the output is identical as
> >> well. Is there something I am overlooking?
> >> 2. Is there a way to get consistent hash-values for functions between
> >> BATCH and interactive sessions.
> >>
> >> The output from the BATCH and interactive runs are below (as well as
> >> sessionInfo)
> >>
> >> Thank you very much for your help!
> >>
> >> Holger Hoefling
> >>
> >> ---------------------------------
> >> BATCH run (via input redirection):
> >>
> >> $ R --vanilla < testFile.R
> >>
> >> R version 3.1.0 (2014-04-10) -- "Spring Dance"
> >> Copyright (C) 2014 The R Foundation for Statistical Computing
> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >>
> >> R is free software and comes with ABSOLUTELY NO WARRANTY.
> >> You are welcome to redistribute it under certain conditions.
> >> Type 'license()' or 'licence()' for distribution details.
> >>
> >> R is a collaborative project with many contributors.
> >> Type 'contributors()' for more information and
> >> 'citation()' on how to cite R or R packages in publications.
> >>
> >> Type 'demo()' for some demos, 'help()' for on-line help, or
> >> 'help.start()' for an HTML browser interface to help.
> >> Type 'q()' to quit R.
> >>
> >>> library(digest)
> >>> testfun <- function() {
> >>
> >> +     return(NULL)
> >> + }
> >>>
> >>> print(digest(testfun))
> >>
> >> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
> >>>
> >>> print(serialize(testfun, connection = NULL))
> >>
> >> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00
> >> 00 00
> >> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02
> 00
> >> 00 00
> >> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00
> 02
> >> 00 00
> >> [76] 00 fe 00 00 00 fe 00 00 00 fe
> >>>
> >>> sessionInfo()
> >>
> >> R version 3.1.0 (2014-04-10)
> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >>
> >> locale:
> >> [1] C
> >>
> >> attached base packages:
> >> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>
> >> other attached packages:
> >> [1] digest_0.6.4
> >>>
> >>>
> >>
> >> ----------------------------------------------
> >> Interactive run:
> >>
> >> $ R --vanilla
> >>
> >> R version 3.1.0 (2014-04-10) -- "Spring Dance"
> >> Copyright (C) 2014 The R Foundation for Statistical Computing
> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >>
> >> R is free software and comes with ABSOLUTELY NO WARRANTY.
> >> You are welcome to redistribute it under certain conditions.
> >> Type 'license()' or 'licence()' for distribution details.
> >>
> >> R is a collaborative project with many contributors.
> >> Type 'contributors()' for more information and
> >> 'citation()' on how to cite R or R packages in publications.
> >>
> >> Type 'demo()' for some demos, 'help()' for on-line help, or
> >> 'help.start()' for an HTML browser interface to help.
> >> Type 'q()' to quit R.
> >>
> >>> library(digest)
> >>> testfun <- function() {
> >>
> >> +     return(NULL)
> >> + }
> >>>
> >>> print(digest(testfun))
> >>
> >> [1] "fada482d2894088b079a8e56b7044862"
> >>>
> >>> print(serialize(testfun, connection = NULL))
> >>
> >>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02
> 00
> >> 00 00
> >> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00
> 08
> >> 00 00
> >> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01
> 00
> >> 00 00
> >> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73
> 72
> >> 63 66
> >> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00
> 01
> >> 00 04
> >> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00
> 09
> >> 00 00
> >> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28
> 29
> >> 20 7b
> >> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00
> 04
> >> 02 00
> >> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00
> 10
> >> 00 00
> >> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02
> 00
> >> 00 00
> >> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02
> 00
> >> 04 00
> >> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00
> 00
> >> 07 73
> >> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10
> 00
> >> 00 00
> >> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00
> fe
> >> 00 00
> >> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13
> 00
> >> 00 00
> >> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00
> 00
> >> 00 17
> >> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00
> 02
> >> ff 00
> >> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00
> 09
> >> 00 00
> >> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00
> 00
> >> 02 00
> >> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00
> 02
> >> 00 00
> >> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff
> 00
> >> 00 00
> >> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
> fe
> >> 00 00
> >> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09
> 00
> >> 00 00
> >> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00
> 00
> >> 01 00
> >> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00
> 01
> >> 00 00
> >> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff
> 00
> >> 00 00
> >> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
> fe
> >> 00 00
> >> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
> 06
> >> 00 00
> >> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
> 00
> >> fe 00
> >> [726] 00 00 fe 00 00 00 fe
> >>>
> >>> sessionInfo()
> >>
> >> R version 3.1.0 (2014-04-10)
> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >>
> >> locale:
> >> [1] C
> >>
> >> attached base packages:
> >> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>
> >> other attached packages:
> >> [1] digest_0.6.4
> >>>
> >>>
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >    Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, PhD
Computational Biologist
Bioinformatics and Computational Biology
Genentech, Inc.

	[[alternative HTML version deleted]]


From hhoeflin at gmail.com  Wed Feb 18 15:43:58 2015
From: hhoeflin at gmail.com (Holger Hoefling)
Date: Wed, 18 Feb 2015 15:43:58 +0100
Subject: [Rd] Different serialization of functions in interactive vs.
 batch mode
In-Reply-To: <CADwqtCPV0h6gH6nO8=WZubhXXPRsHTxHPhk99FUPmMd+27Ow+A@mail.gmail.com>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
	<alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
	<CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
	<CADwqtCPV0h6gH6nO8=WZubhXXPRsHTxHPhk99FUPmMd+27Ow+A@mail.gmail.com>
Message-ID: <CAFDswJsgTs34c98KhbQq4j+nNhSP_akjGHph4qWUSeDDMZ4srg@mail.gmail.com>

Hi Gabriel,

thanks for your reply - it does solve the problem of my toy function,
but does come with some other problems though.
a) as.list(f)[[1]] yields an expression, not a function. In order to
go the route you are suggesting, I would more likely use "deparse" in
order to get the original back

b) and more seriously - as.list strips the environment of the function
(and thus associated information) as well as information about parent
environments. For the execution of a function, this would however be
crucial. This is also why a pure "deparse" alone in my opinion would
not work.

Thanks

Holger


On Wed, Feb 18, 2015 at 3:36 PM, Gabriel Becker <gmbecker at ucdavis.edu> wrote:
> Holger,
>
> For me (see session info) using
>
> digest(as.list(f))
>
> gets around this problem.
>
> ~G
>
>> sessionInfo()
> R version 3.1.0 (2014-04-10)
> Platform: x86_64-pc-linux-gnu (64-bit)
>
> locale:
>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] digest_0.6.8
>
>
>
>
> On Wed, Feb 18, 2015 at 6:22 AM, Holger Hoefling <hhoeflin at gmail.com> wrote:
>>
>> Hi Luke,
>>
>> Ah - I see - thank you! This at least points me to a way on how to
>> "fix" this. I tried setting the srcref attribute to NULL, but the hash
>> value is still different and so is the serialization. So this looks
>> like it is one difference, but not all of them
>>
>> Even if all differences were identified - it still leaves me with
>> different behavior between interactive and batch-mode, though. I am
>> curious as to why that is. Do you know why in interactive mode the
>> attribute with the srcref is set, but not in batch mode?
>>
>> Thanks!
>>
>> Holger
>>
>> P.S. I attached the output I get when i set the attributes to NULL
>>
>>
>> On Wed, Feb 18, 2015 at 3:04 PM,  <luke-tierney at uiowa.edu> wrote:
>> > Add
>> >
>> > attributes(testfun)
>> >
>> > and you will see where the two functions differ.
>> >
>> > luke
>> >
>> >
>> > On Wed, 18 Feb 2015, Holger Hoefling wrote:
>> >
>> >> Hi,
>> >>
>> >> I posted this question to the regular help list, but it seems to be
>> >> this is probably a question that is better addressed on r-devel. Sorry
>> >> for the double posting.
>> >>
>> >> I am using hash-values to cache certain results in R. This caching
>> >> also depends on the hash-value of the function that is being cached
>> >> (calculated using the digest package). I noticed that computations
>> >> that should already be cached are recomputed when switching from an
>> >> interactive session to a BATCH session. Therefore, I wrote a test
>> >> script
>> >>
>> >> library(digest)
>> >> testfun <- function() {
>> >>    return(NULL)
>> >> }
>> >> testval <- "testval"
>> >> print(digest(testfun))
>> >> print(serialize(testfun, connection = NULL))
>> >>
>> >> and executed it once using input-redirection from a file (testFile.R)
>> >> and once copying the code into an interactive R session. The
>> >> hash-values of the functions differ. As digest internally relies on
>> >> serialize, I also checked there and found that digest is not the
>> >> reason for the discrepancy. Instead, the serialized value of the
>> >> function already differs between the BATCH and inteactive sessions.
>> >>
>> >> I was wondering if someone knows if
>> >> 1. Is this a feature or a bug? It feels like a bug to me as all the
>> >> inputs are identical, I would expect that the output is identical as
>> >> well. Is there something I am overlooking?
>> >> 2. Is there a way to get consistent hash-values for functions between
>> >> BATCH and interactive sessions.
>> >>
>> >> The output from the BATCH and interactive runs are below (as well as
>> >> sessionInfo)
>> >>
>> >> Thank you very much for your help!
>> >>
>> >> Holger Hoefling
>> >>
>> >> ---------------------------------
>> >> BATCH run (via input redirection):
>> >>
>> >> $ R --vanilla < testFile.R
>> >>
>> >> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>> >> Copyright (C) 2014 The R Foundation for Statistical Computing
>> >> Platform: x86_64-unknown-linux-gnu (64-bit)
>> >>
>> >> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> >> You are welcome to redistribute it under certain conditions.
>> >> Type 'license()' or 'licence()' for distribution details.
>> >>
>> >> R is a collaborative project with many contributors.
>> >> Type 'contributors()' for more information and
>> >> 'citation()' on how to cite R or R packages in publications.
>> >>
>> >> Type 'demo()' for some demos, 'help()' for on-line help, or
>> >> 'help.start()' for an HTML browser interface to help.
>> >> Type 'q()' to quit R.
>> >>
>> >>> library(digest)
>> >>> testfun <- function() {
>> >>
>> >> +     return(NULL)
>> >> + }
>> >>>
>> >>> print(digest(testfun))
>> >>
>> >> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
>> >>>
>> >>> print(serialize(testfun, connection = NULL))
>> >>
>> >> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd
>> >> 00
>> >> 00 00
>> >> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02
>> >> 00
>> >> 00 00
>> >> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00
>> >> 02
>> >> 00 00
>> >> [76] 00 fe 00 00 00 fe 00 00 00 fe
>> >>>
>> >>> sessionInfo()
>> >>
>> >> R version 3.1.0 (2014-04-10)
>> >> Platform: x86_64-unknown-linux-gnu (64-bit)
>> >>
>> >> locale:
>> >> [1] C
>> >>
>> >> attached base packages:
>> >> [1] stats     graphics  grDevices utils     datasets  methods   base
>> >>
>> >> other attached packages:
>> >> [1] digest_0.6.4
>> >>>
>> >>>
>> >>
>> >> ----------------------------------------------
>> >> Interactive run:
>> >>
>> >> $ R --vanilla
>> >>
>> >> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>> >> Copyright (C) 2014 The R Foundation for Statistical Computing
>> >> Platform: x86_64-unknown-linux-gnu (64-bit)
>> >>
>> >> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> >> You are welcome to redistribute it under certain conditions.
>> >> Type 'license()' or 'licence()' for distribution details.
>> >>
>> >> R is a collaborative project with many contributors.
>> >> Type 'contributors()' for more information and
>> >> 'citation()' on how to cite R or R packages in publications.
>> >>
>> >> Type 'demo()' for some demos, 'help()' for on-line help, or
>> >> 'help.start()' for an HTML browser interface to help.
>> >> Type 'q()' to quit R.
>> >>
>> >>> library(digest)
>> >>> testfun <- function() {
>> >>
>> >> +     return(NULL)
>> >> + }
>> >>>
>> >>> print(digest(testfun))
>> >>
>> >> [1] "fada482d2894088b079a8e56b7044862"
>> >>>
>> >>> print(serialize(testfun, connection = NULL))
>> >>
>> >>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02
>> >> 00
>> >> 00 00
>> >> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00
>> >> 08
>> >> 00 00
>> >> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01
>> >> 00
>> >> 00 00
>> >> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73
>> >> 72
>> >> 63 66
>> >> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00
>> >> 01
>> >> 00 04
>> >> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00
>> >> 09
>> >> 00 00
>> >> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28
>> >> 29
>> >> 20 7b
>> >> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00
>> >> 04
>> >> 02 00
>> >> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00
>> >> 10
>> >> 00 00
>> >> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02
>> >> 00
>> >> 00 00
>> >> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02
>> >> 00
>> >> 04 00
>> >> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00
>> >> 00
>> >> 07 73
>> >> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10
>> >> 00
>> >> 00 00
>> >> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00
>> >> fe
>> >> 00 00
>> >> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13
>> >> 00
>> >> 00 00
>> >> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00
>> >> 00
>> >> 00 17
>> >> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00
>> >> 02
>> >> ff 00
>> >> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00
>> >> 09
>> >> 00 00
>> >> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00
>> >> 00
>> >> 02 00
>> >> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00
>> >> 02
>> >> 00 00
>> >> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff
>> >> 00
>> >> 00 00
>> >> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
>> >> fe
>> >> 00 00
>> >> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09
>> >> 00
>> >> 00 00
>> >> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00
>> >> 00
>> >> 01 00
>> >> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00
>> >> 01
>> >> 00 00
>> >> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff
>> >> 00
>> >> 00 00
>> >> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
>> >> fe
>> >> 00 00
>> >> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
>> >> 06
>> >> 00 00
>> >> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
>> >> 00
>> >> fe 00
>> >> [726] 00 00 fe 00 00 00 fe
>> >>>
>> >>> sessionInfo()
>> >>
>> >> R version 3.1.0 (2014-04-10)
>> >> Platform: x86_64-unknown-linux-gnu (64-bit)
>> >>
>> >> locale:
>> >> [1] C
>> >>
>> >> attached base packages:
>> >> [1] stats     graphics  grDevices utils     datasets  methods   base
>> >>
>> >> other attached packages:
>> >> [1] digest_0.6.4
>> >>>
>> >>>
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>> >
>> > --
>> > Luke Tierney
>> > Ralph E. Wareham Professor of Mathematical Sciences
>> > University of Iowa                  Phone:             319-335-3386
>> > Department of Statistics and        Fax:               319-335-3017
>> >    Actuarial Science
>> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
>
> --
> Gabriel Becker, PhD
> Computational Biologist
> Bioinformatics and Computational Biology
> Genentech, Inc.


From luke-tierney at uiowa.edu  Wed Feb 18 15:56:22 2015
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Wed, 18 Feb 2015 08:56:22 -0600
Subject: [Rd] Different serialization of functions in interactive vs.
 batch mode
In-Reply-To: <CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
	<alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
	<CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
Message-ID: <alpine.LFD.2.11.1502180851280.32711@itasca.stat.uiowa.edu>

On Wed, 18 Feb 2015, Holger Hoefling wrote:

> Hi Luke,
>
> Ah - I see - thank you! This at least points me to a way on how to
> "fix" this. I tried setting the srcref attribute to NULL, but the hash
> value is still different and so is the serialization. So this looks
> like it is one difference, but not all of them

when source attributes are attached they are attached to calls within
the body as well, so

     > attributes(body(testfun))
     $srcref
     $srcref[[1]]
     ...

> Even if all differences were identified - it still leaves me with
> different behavior between interactive and batch-mode, though. I am
> curious as to why that is. Do you know why in interactive mode the
> attribute with the srcref is set, but not in batch mode?

I can't speak to why the default for the keep.source option is
different in the two cases, but you can set it to be the same: in
interactive mode

     > options(keep.source = FALSE)
     > testfun <- function() {return(NULL)}
     > digest(testfun)
     [1] "b03160b9250f0d5b5bcce42bd86d8e56"

Or use options(keep.source = TRUE) in the other case.

Best,

luke

>
> Thanks!
>
> Holger
>
> P.S. I attached the output I get when i set the attributes to NULL
>
>
> On Wed, Feb 18, 2015 at 3:04 PM,  <luke-tierney at uiowa.edu> wrote:
>> Add
>>
>> attributes(testfun)
>>
>> and you will see where the two functions differ.
>>
>> luke
>>
>>
>> On Wed, 18 Feb 2015, Holger Hoefling wrote:
>>
>>> Hi,
>>>
>>> I posted this question to the regular help list, but it seems to be
>>> this is probably a question that is better addressed on r-devel. Sorry
>>> for the double posting.
>>>
>>> I am using hash-values to cache certain results in R. This caching
>>> also depends on the hash-value of the function that is being cached
>>> (calculated using the digest package). I noticed that computations
>>> that should already be cached are recomputed when switching from an
>>> interactive session to a BATCH session. Therefore, I wrote a test
>>> script
>>>
>>> library(digest)
>>> testfun <- function() {
>>>    return(NULL)
>>> }
>>> testval <- "testval"
>>> print(digest(testfun))
>>> print(serialize(testfun, connection = NULL))
>>>
>>> and executed it once using input-redirection from a file (testFile.R)
>>> and once copying the code into an interactive R session. The
>>> hash-values of the functions differ. As digest internally relies on
>>> serialize, I also checked there and found that digest is not the
>>> reason for the discrepancy. Instead, the serialized value of the
>>> function already differs between the BATCH and inteactive sessions.
>>>
>>> I was wondering if someone knows if
>>> 1. Is this a feature or a bug? It feels like a bug to me as all the
>>> inputs are identical, I would expect that the output is identical as
>>> well. Is there something I am overlooking?
>>> 2. Is there a way to get consistent hash-values for functions between
>>> BATCH and interactive sessions.
>>>
>>> The output from the BATCH and interactive runs are below (as well as
>>> sessionInfo)
>>>
>>> Thank you very much for your help!
>>>
>>> Holger Hoefling
>>>
>>> ---------------------------------
>>> BATCH run (via input redirection):
>>>
>>> $ R --vanilla < testFile.R
>>>
>>> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>>> Copyright (C) 2014 The R Foundation for Statistical Computing
>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>
>>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>>> You are welcome to redistribute it under certain conditions.
>>> Type 'license()' or 'licence()' for distribution details.
>>>
>>> R is a collaborative project with many contributors.
>>> Type 'contributors()' for more information and
>>> 'citation()' on how to cite R or R packages in publications.
>>>
>>> Type 'demo()' for some demos, 'help()' for on-line help, or
>>> 'help.start()' for an HTML browser interface to help.
>>> Type 'q()' to quit R.
>>>
>>>> library(digest)
>>>> testfun <- function() {
>>>
>>> +     return(NULL)
>>> + }
>>>>
>>>> print(digest(testfun))
>>>
>>> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
>>>>
>>>> print(serialize(testfun, connection = NULL))
>>>
>>> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00
>>> 00 00
>>> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00
>>> 00 00
>>> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02
>>> 00 00
>>> [76] 00 fe 00 00 00 fe 00 00 00 fe
>>>>
>>>> sessionInfo()
>>>
>>> R version 3.1.0 (2014-04-10)
>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>
>>> locale:
>>> [1] C
>>>
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>> other attached packages:
>>> [1] digest_0.6.4
>>>>
>>>>
>>>
>>> ----------------------------------------------
>>> Interactive run:
>>>
>>> $ R --vanilla
>>>
>>> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>>> Copyright (C) 2014 The R Foundation for Statistical Computing
>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>
>>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>>> You are welcome to redistribute it under certain conditions.
>>> Type 'license()' or 'licence()' for distribution details.
>>>
>>> R is a collaborative project with many contributors.
>>> Type 'contributors()' for more information and
>>> 'citation()' on how to cite R or R packages in publications.
>>>
>>> Type 'demo()' for some demos, 'help()' for on-line help, or
>>> 'help.start()' for an HTML browser interface to help.
>>> Type 'q()' to quit R.
>>>
>>>> library(digest)
>>>> testfun <- function() {
>>>
>>> +     return(NULL)
>>> + }
>>>>
>>>> print(digest(testfun))
>>>
>>> [1] "fada482d2894088b079a8e56b7044862"
>>>>
>>>> print(serialize(testfun, connection = NULL))
>>>
>>>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02 00
>>> 00 00
>>> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00 08
>>> 00 00
>>> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01 00
>>> 00 00
>>> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73 72
>>> 63 66
>>> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00 01
>>> 00 04
>>> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00 09
>>> 00 00
>>> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28 29
>>> 20 7b
>>> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00 04
>>> 02 00
>>> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00 10
>>> 00 00
>>> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02 00
>>> 00 00
>>> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02 00
>>> 04 00
>>> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00 00
>>> 07 73
>>> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10 00
>>> 00 00
>>> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00 fe
>>> 00 00
>>> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13 00
>>> 00 00
>>> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00 00
>>> 00 17
>>> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00 02
>>> ff 00
>>> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00 09
>>> 00 00
>>> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00 00
>>> 02 00
>>> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00 02
>>> 00 00
>>> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00
>>> 00 00
>>> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe
>>> 00 00
>>> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09 00
>>> 00 00
>>> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00 00
>>> 01 00
>>> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 01
>>> 00 00
>>> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff 00
>>> 00 00
>>> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe
>>> 00 00
>>> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00 06
>>> 00 00
>>> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00 00
>>> fe 00
>>> [726] 00 00 fe 00 00 00 fe
>>>>
>>>> sessionInfo()
>>>
>>> R version 3.1.0 (2014-04-10)
>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>
>>> locale:
>>> [1] C
>>>
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>> other attached packages:
>>> [1] digest_0.6.4
>>>>
>>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From hhoeflin at gmail.com  Wed Feb 18 16:02:05 2015
From: hhoeflin at gmail.com (Holger Hoefling)
Date: Wed, 18 Feb 2015 16:02:05 +0100
Subject: [Rd] Different serialization of functions in interactive vs.
 batch mode
In-Reply-To: <alpine.LFD.2.11.1502180851280.32711@itasca.stat.uiowa.edu>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
	<alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
	<CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
	<alpine.LFD.2.11.1502180851280.32711@itasca.stat.uiowa.edu>
Message-ID: <CAFDswJuOCkZUTmVbtf339fvZfByJ4+XOmVyOWGmc8O2p0cEgGw@mail.gmail.com>

Luke, thank you so much - that solves my problem!

Holger

On Wed, Feb 18, 2015 at 3:56 PM,  <luke-tierney at uiowa.edu> wrote:
> On Wed, 18 Feb 2015, Holger Hoefling wrote:
>
>> Hi Luke,
>>
>> Ah - I see - thank you! This at least points me to a way on how to
>> "fix" this. I tried setting the srcref attribute to NULL, but the hash
>> value is still different and so is the serialization. So this looks
>> like it is one difference, but not all of them
>
>
> when source attributes are attached they are attached to calls within
> the body as well, so
>
>     > attributes(body(testfun))
>     $srcref
>     $srcref[[1]]
>     ...
>
>> Even if all differences were identified - it still leaves me with
>> different behavior between interactive and batch-mode, though. I am
>> curious as to why that is. Do you know why in interactive mode the
>> attribute with the srcref is set, but not in batch mode?
>
>
> I can't speak to why the default for the keep.source option is
> different in the two cases, but you can set it to be the same: in
> interactive mode
>
>     > options(keep.source = FALSE)
>     > testfun <- function() {return(NULL)}
>     > digest(testfun)
>     [1] "b03160b9250f0d5b5bcce42bd86d8e56"
>
> Or use options(keep.source = TRUE) in the other case.
>
> Best,
>
> luke
>
>
>>
>> Thanks!
>>
>> Holger
>>
>> P.S. I attached the output I get when i set the attributes to NULL
>>
>>
>> On Wed, Feb 18, 2015 at 3:04 PM,  <luke-tierney at uiowa.edu> wrote:
>>>
>>> Add
>>>
>>> attributes(testfun)
>>>
>>> and you will see where the two functions differ.
>>>
>>> luke
>>>
>>>
>>> On Wed, 18 Feb 2015, Holger Hoefling wrote:
>>>
>>>> Hi,
>>>>
>>>> I posted this question to the regular help list, but it seems to be
>>>> this is probably a question that is better addressed on r-devel. Sorry
>>>> for the double posting.
>>>>
>>>> I am using hash-values to cache certain results in R. This caching
>>>> also depends on the hash-value of the function that is being cached
>>>> (calculated using the digest package). I noticed that computations
>>>> that should already be cached are recomputed when switching from an
>>>> interactive session to a BATCH session. Therefore, I wrote a test
>>>> script
>>>>
>>>> library(digest)
>>>> testfun <- function() {
>>>>    return(NULL)
>>>> }
>>>> testval <- "testval"
>>>> print(digest(testfun))
>>>> print(serialize(testfun, connection = NULL))
>>>>
>>>> and executed it once using input-redirection from a file (testFile.R)
>>>> and once copying the code into an interactive R session. The
>>>> hash-values of the functions differ. As digest internally relies on
>>>> serialize, I also checked there and found that digest is not the
>>>> reason for the discrepancy. Instead, the serialized value of the
>>>> function already differs between the BATCH and inteactive sessions.
>>>>
>>>> I was wondering if someone knows if
>>>> 1. Is this a feature or a bug? It feels like a bug to me as all the
>>>> inputs are identical, I would expect that the output is identical as
>>>> well. Is there something I am overlooking?
>>>> 2. Is there a way to get consistent hash-values for functions between
>>>> BATCH and interactive sessions.
>>>>
>>>> The output from the BATCH and interactive runs are below (as well as
>>>> sessionInfo)
>>>>
>>>> Thank you very much for your help!
>>>>
>>>> Holger Hoefling
>>>>
>>>> ---------------------------------
>>>> BATCH run (via input redirection):
>>>>
>>>> $ R --vanilla < testFile.R
>>>>
>>>> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>>>> Copyright (C) 2014 The R Foundation for Statistical Computing
>>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>>
>>>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>>>> You are welcome to redistribute it under certain conditions.
>>>> Type 'license()' or 'licence()' for distribution details.
>>>>
>>>> R is a collaborative project with many contributors.
>>>> Type 'contributors()' for more information and
>>>> 'citation()' on how to cite R or R packages in publications.
>>>>
>>>> Type 'demo()' for some demos, 'help()' for on-line help, or
>>>> 'help.start()' for an HTML browser interface to help.
>>>> Type 'q()' to quit R.
>>>>
>>>>> library(digest)
>>>>> testfun <- function() {
>>>>
>>>>
>>>> +     return(NULL)
>>>> + }
>>>>>
>>>>>
>>>>> print(digest(testfun))
>>>>
>>>>
>>>> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
>>>>>
>>>>>
>>>>> print(serialize(testfun, connection = NULL))
>>>>
>>>>
>>>> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd 00
>>>> 00 00
>>>> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02
>>>> 00
>>>> 00 00
>>>> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00
>>>> 02
>>>> 00 00
>>>> [76] 00 fe 00 00 00 fe 00 00 00 fe
>>>>>
>>>>>
>>>>> sessionInfo()
>>>>
>>>>
>>>> R version 3.1.0 (2014-04-10)
>>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>>
>>>> locale:
>>>> [1] C
>>>>
>>>> attached base packages:
>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>>
>>>> other attached packages:
>>>> [1] digest_0.6.4
>>>>>
>>>>>
>>>>>
>>>>
>>>> ----------------------------------------------
>>>> Interactive run:
>>>>
>>>> $ R --vanilla
>>>>
>>>> R version 3.1.0 (2014-04-10) -- "Spring Dance"
>>>> Copyright (C) 2014 The R Foundation for Statistical Computing
>>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>>
>>>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>>>> You are welcome to redistribute it under certain conditions.
>>>> Type 'license()' or 'licence()' for distribution details.
>>>>
>>>> R is a collaborative project with many contributors.
>>>> Type 'contributors()' for more information and
>>>> 'citation()' on how to cite R or R packages in publications.
>>>>
>>>> Type 'demo()' for some demos, 'help()' for on-line help, or
>>>> 'help.start()' for an HTML browser interface to help.
>>>> Type 'q()' to quit R.
>>>>
>>>>> library(digest)
>>>>> testfun <- function() {
>>>>
>>>>
>>>> +     return(NULL)
>>>> + }
>>>>>
>>>>>
>>>>> print(digest(testfun))
>>>>
>>>>
>>>> [1] "fada482d2894088b079a8e56b7044862"
>>>>>
>>>>>
>>>>> print(serialize(testfun, connection = NULL))
>>>>
>>>>
>>>>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04 02
>>>> 00
>>>> 00 00
>>>> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00 00
>>>> 08
>>>> 00 00
>>>> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00 01
>>>> 00
>>>> 00 00
>>>> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07 73
>>>> 72
>>>> 63 66
>>>> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00 00
>>>> 01
>>>> 00 04
>>>> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04 00
>>>> 09
>>>> 00 00
>>>> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e 28
>>>> 29
>>>> 20 7b
>>>> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00 00
>>>> 04
>>>> 02 00
>>>> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00 00
>>>> 10
>>>> 00 00
>>>> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04 02
>>>> 00
>>>> 00 00
>>>> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00 02
>>>> 00
>>>> 04 00
>>>> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00 00
>>>> 00
>>>> 07 73
>>>> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00 10
>>>> 00
>>>> 00 00
>>>> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 00
>>>> fe
>>>> 00 00
>>>> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00 13
>>>> 00
>>>> 00 00
>>>> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01 00
>>>> 00
>>>> 00 17
>>>> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00 00
>>>> 02
>>>> ff 00
>>>> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04 00
>>>> 09
>>>> 00 00
>>>> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00 00
>>>> 00
>>>> 02 00
>>>> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00 00
>>>> 02
>>>> 00 00
>>>> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff
>>>> 00
>>>> 00 00
>>>> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
>>>> fe
>>>> 00 00
>>>> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00 09
>>>> 00
>>>> 00 00
>>>> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00 00
>>>> 00
>>>> 01 00
>>>> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00
>>>> 01
>>>> 00 00
>>>> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06 ff
>>>> 00
>>>> 00 00
>>>> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00
>>>> fe
>>>> 00 00
>>>> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00 00
>>>> 06
>>>> 00 00
>>>> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00 00
>>>> 00
>>>> fe 00
>>>> [726] 00 00 fe 00 00 00 fe
>>>>>
>>>>>
>>>>> sessionInfo()
>>>>
>>>>
>>>> R version 3.1.0 (2014-04-10)
>>>> Platform: x86_64-unknown-linux-gnu (64-bit)
>>>>
>>>> locale:
>>>> [1] C
>>>>
>>>> attached base packages:
>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>>
>>>> other attached packages:
>>>> [1] digest_0.6.4
>>>>>
>>>>>
>>>>>
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>> --
>>> Luke Tierney
>>> Ralph E. Wareham Professor of Mathematical Sciences
>>> University of Iowa                  Phone:             319-335-3386
>>> Department of Statistics and        Fax:               319-335-3017
>>>    Actuarial Science
>>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>
>>
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From gmbecker at ucdavis.edu  Wed Feb 18 16:03:43 2015
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Wed, 18 Feb 2015 07:03:43 -0800
Subject: [Rd] Different serialization of functions in interactive vs.
 batch mode
In-Reply-To: <CAFDswJsgTs34c98KhbQq4j+nNhSP_akjGHph4qWUSeDDMZ4srg@mail.gmail.com>
References: <CAFDswJvq5T2sZNQyE1pDP_F9CGBFQfxrXHbzfKhB4CZPgXNO8g@mail.gmail.com>
	<alpine.DEB.2.02.1502180804090.2336@luke-Latitude>
	<CAFDswJsiEw+zZ0HibzQzA02JqyVKtgDpr0Bz7SLjhPiJ7YRjoA@mail.gmail.com>
	<CADwqtCPV0h6gH6nO8=WZubhXXPRsHTxHPhk99FUPmMd+27Ow+A@mail.gmail.com>
	<CAFDswJsgTs34c98KhbQq4j+nNhSP_akjGHph4qWUSeDDMZ4srg@mail.gmail.com>
Message-ID: <CADwqtCPsLA0cxQLpTDF-vFpwpbKGsQ74aW+03LQtzzPzWuFL0Q@mail.gmail.com>

On Wed, Feb 18, 2015 at 6:43 AM, Holger Hoefling <hhoeflin at gmail.com> wrote:

>
> b) and more seriously - as.list strips the environment of the function
> (and thus associated information) as well as information about parent
> environments. For the execution of a function, this would however be
> crucial. This is also why a pure "deparse" alone in my opinion would
> not work.
>

Well, I agree it can be, but it depends heavily on the functions. For
functions which do not refer to objects in their closure (which is most R
functions), this would not be a problem. One can easily write functions
where it would, however.

You can always deparse the function and hash the environment separately.

Also remember that environments are only "sort of" serialized uniquely to
begin with:

> env1 = new.env()
> assign("x", 5, env1)
> env2 = new.env()
> assign("x", 5, env2)
> f = function(x) NULL
> z = f
> environment(f) = env1
> environment(z) = env2
> library(digest)
> digest(f)
[1] "892edaa1aff5cab503a6908617728827"
> digest(z)
[1] "892edaa1aff5cab503a6908617728827"

Only their contents matter, not which environment they actually are

> assign("y", 3, env2)
> digest(z)
[1] "29b29c33c3c50f8bcfe1820621a5cf1f"


This may be what you actually want for your use-case, but it's something to
keep in mind.

~G

>
> Thanks
>
> Holger
>
>
> On Wed, Feb 18, 2015 at 3:36 PM, Gabriel Becker <gmbecker at ucdavis.edu>
> wrote:
> > Holger,
> >
> > For me (see session info) using
> >
> > digest(as.list(f))
> >
> > gets around this problem.
> >
> > ~G
> >
> >> sessionInfo()
> > R version 3.1.0 (2014-04-10)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> >
> > locale:
> >  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> >  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> >  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> > [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > other attached packages:
> > [1] digest_0.6.8
> >
> >
> >
> >
> > On Wed, Feb 18, 2015 at 6:22 AM, Holger Hoefling <hhoeflin at gmail.com>
> wrote:
> >>
> >> Hi Luke,
> >>
> >> Ah - I see - thank you! This at least points me to a way on how to
> >> "fix" this. I tried setting the srcref attribute to NULL, but the hash
> >> value is still different and so is the serialization. So this looks
> >> like it is one difference, but not all of them
> >>
> >> Even if all differences were identified - it still leaves me with
> >> different behavior between interactive and batch-mode, though. I am
> >> curious as to why that is. Do you know why in interactive mode the
> >> attribute with the srcref is set, but not in batch mode?
> >>
> >> Thanks!
> >>
> >> Holger
> >>
> >> P.S. I attached the output I get when i set the attributes to NULL
> >>
> >>
> >> On Wed, Feb 18, 2015 at 3:04 PM,  <luke-tierney at uiowa.edu> wrote:
> >> > Add
> >> >
> >> > attributes(testfun)
> >> >
> >> > and you will see where the two functions differ.
> >> >
> >> > luke
> >> >
> >> >
> >> > On Wed, 18 Feb 2015, Holger Hoefling wrote:
> >> >
> >> >> Hi,
> >> >>
> >> >> I posted this question to the regular help list, but it seems to be
> >> >> this is probably a question that is better addressed on r-devel.
> Sorry
> >> >> for the double posting.
> >> >>
> >> >> I am using hash-values to cache certain results in R. This caching
> >> >> also depends on the hash-value of the function that is being cached
> >> >> (calculated using the digest package). I noticed that computations
> >> >> that should already be cached are recomputed when switching from an
> >> >> interactive session to a BATCH session. Therefore, I wrote a test
> >> >> script
> >> >>
> >> >> library(digest)
> >> >> testfun <- function() {
> >> >>    return(NULL)
> >> >> }
> >> >> testval <- "testval"
> >> >> print(digest(testfun))
> >> >> print(serialize(testfun, connection = NULL))
> >> >>
> >> >> and executed it once using input-redirection from a file (testFile.R)
> >> >> and once copying the code into an interactive R session. The
> >> >> hash-values of the functions differ. As digest internally relies on
> >> >> serialize, I also checked there and found that digest is not the
> >> >> reason for the discrepancy. Instead, the serialized value of the
> >> >> function already differs between the BATCH and inteactive sessions.
> >> >>
> >> >> I was wondering if someone knows if
> >> >> 1. Is this a feature or a bug? It feels like a bug to me as all the
> >> >> inputs are identical, I would expect that the output is identical as
> >> >> well. Is there something I am overlooking?
> >> >> 2. Is there a way to get consistent hash-values for functions between
> >> >> BATCH and interactive sessions.
> >> >>
> >> >> The output from the BATCH and interactive runs are below (as well as
> >> >> sessionInfo)
> >> >>
> >> >> Thank you very much for your help!
> >> >>
> >> >> Holger Hoefling
> >> >>
> >> >> ---------------------------------
> >> >> BATCH run (via input redirection):
> >> >>
> >> >> $ R --vanilla < testFile.R
> >> >>
> >> >> R version 3.1.0 (2014-04-10) -- "Spring Dance"
> >> >> Copyright (C) 2014 The R Foundation for Statistical Computing
> >> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >> >>
> >> >> R is free software and comes with ABSOLUTELY NO WARRANTY.
> >> >> You are welcome to redistribute it under certain conditions.
> >> >> Type 'license()' or 'licence()' for distribution details.
> >> >>
> >> >> R is a collaborative project with many contributors.
> >> >> Type 'contributors()' for more information and
> >> >> 'citation()' on how to cite R or R packages in publications.
> >> >>
> >> >> Type 'demo()' for some demos, 'help()' for on-line help, or
> >> >> 'help.start()' for an HTML browser interface to help.
> >> >> Type 'q()' to quit R.
> >> >>
> >> >>> library(digest)
> >> >>> testfun <- function() {
> >> >>
> >> >> +     return(NULL)
> >> >> + }
> >> >>>
> >> >>> print(digest(testfun))
> >> >>
> >> >> [1] "b03160b9250f0d5b5bcce42bd86d8e56"
> >> >>>
> >> >>> print(serialize(testfun, connection = NULL))
> >> >>
> >> >> [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 04 03 00 00 00 fd
> >> >> 00
> >> >> 00 00
> >> >> [26] fe 00 00 00 06 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00
> 02
> >> >> 00
> >> >> 00 00
> >> >> [51] 06 00 00 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00
> 00
> >> >> 02
> >> >> 00 00
> >> >> [76] 00 fe 00 00 00 fe 00 00 00 fe
> >> >>>
> >> >>> sessionInfo()
> >> >>
> >> >> R version 3.1.0 (2014-04-10)
> >> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >> >>
> >> >> locale:
> >> >> [1] C
> >> >>
> >> >> attached base packages:
> >> >> [1] stats     graphics  grDevices utils     datasets  methods   base
> >> >>
> >> >> other attached packages:
> >> >> [1] digest_0.6.4
> >> >>>
> >> >>>
> >> >>
> >> >> ----------------------------------------------
> >> >> Interactive run:
> >> >>
> >> >> $ R --vanilla
> >> >>
> >> >> R version 3.1.0 (2014-04-10) -- "Spring Dance"
> >> >> Copyright (C) 2014 The R Foundation for Statistical Computing
> >> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >> >>
> >> >> R is free software and comes with ABSOLUTELY NO WARRANTY.
> >> >> You are welcome to redistribute it under certain conditions.
> >> >> Type 'license()' or 'licence()' for distribution details.
> >> >>
> >> >> R is a collaborative project with many contributors.
> >> >> Type 'contributors()' for more information and
> >> >> 'citation()' on how to cite R or R packages in publications.
> >> >>
> >> >> Type 'demo()' for some demos, 'help()' for on-line help, or
> >> >> 'help.start()' for an HTML browser interface to help.
> >> >> Type 'q()' to quit R.
> >> >>
> >> >>> library(digest)
> >> >>> testfun <- function() {
> >> >>
> >> >> +     return(NULL)
> >> >> + }
> >> >>>
> >> >>> print(digest(testfun))
> >> >>
> >> >> [1] "fada482d2894088b079a8e56b7044862"
> >> >>>
> >> >>> print(serialize(testfun, connection = NULL))
> >> >>
> >> >>  [1] 58 0a 00 00 00 02 00 03 01 00 00 02 03 00 00 00 06 03 00 00 04
> 02
> >> >> 00
> >> >> 00 00
> >> >> [26] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 03 0d 00 00
> 00
> >> >> 08
> >> >> 00 00
> >> >> [51] 00 01 00 00 00 0c 00 00 00 03 00 00 00 01 00 00 00 0c 00 00 00
> 01
> >> >> 00
> >> >> 00 00
> >> >> [76] 01 00 00 00 03 00 00 04 02 00 00 00 01 00 04 00 09 00 00 00 07
> 73
> >> >> 72
> >> >> 63 66
> >> >> [101] 69 6c 65 00 00 00 04 00 00 00 00 00 00 00 f2 00 00 04 02 00 00
> 00
> >> >> 01
> >> >> 00 04
> >> >> [126] 00 09 00 00 00 05 6c 69 6e 65 73 00 00 00 10 00 00 00 01 00 04
> 00
> >> >> 09
> >> >> 00 00
> >> >> [151] 00 2b 74 65 73 74 66 75 6e 20 3c 2d 20 66 75 6e 63 74 69 6f 6e
> 28
> >> >> 29
> >> >> 20 7b
> >> >> [176] 0a 20 20 20 20 72 65 74 75 72 6e 28 4e 55 4c 4c 29 0a 7d 0a 00
> 00
> >> >> 04
> >> >> 02 00
> >> >> [201] 00 00 01 00 04 00 09 00 00 00 08 66 69 6c 65 6e 61 6d 65 00 00
> 00
> >> >> 10
> >> >> 00 00
> >> >> [226] 00 01 00 04 00 09 00 00 00 00 00 00 00 fe 00 00 00 fe 00 00 04
> 02
> >> >> 00
> >> >> 00 00
> >> >> [251] 01 00 04 00 09 00 00 00 05 63 6c 61 73 73 00 00 00 10 00 00 00
> 02
> >> >> 00
> >> >> 04 00
> >> >> [276] 09 00 00 00 0b 73 72 63 66 69 6c 65 63 6f 70 79 00 04 00 09 00
> 00
> >> >> 00
> >> >> 07 73
> >> >> [301] 72 63 66 69 6c 65 00 00 00 fe 00 00 04 02 00 00 06 ff 00 00 00
> 10
> >> >> 00
> >> >> 00 00
> >> >> [326] 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00 00 fe 00 00
> 00
> >> >> fe
> >> >> 00 00
> >> >> [351] 00 fd 00 00 00 fe 00 00 02 06 00 00 04 02 00 00 01 ff 00 00 00
> 13
> >> >> 00
> >> >> 00 00
> >> >> [376] 02 00 00 03 0d 00 00 00 08 00 00 00 01 00 00 00 17 00 00 00 01
> 00
> >> >> 00
> >> >> 00 17
> >> >> [401] 00 00 00 17 00 00 00 17 00 00 00 01 00 00 00 01 00 00 04 02 00
> 00
> >> >> 02
> >> >> ff 00
> >> >> [426] 00 03 ff 00 00 04 02 00 00 06 ff 00 00 00 10 00 00 00 01 00 04
> 00
> >> >> 09
> >> >> 00 00
> >> >> [451] 00 06 73 72 63 72 65 66 00 00 00 fe 00 00 03 0d 00 00 00 08 00
> 00
> >> >> 00
> >> >> 02 00
> >> >> [476] 00 00 05 00 00 00 02 00 00 00 10 00 00 00 05 00 00 00 10 00 00
> 00
> >> >> 02
> >> >> 00 00
> >> >> [501] 00 02 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06
> ff
> >> >> 00
> >> >> 00 00
> >> >> [526] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00
> 00
> >> >> fe
> >> >> 00 00
> >> >> [551] 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 00 01 00 04 00
> 09
> >> >> 00
> >> >> 00 00
> >> >> [576] 0b 77 68 6f 6c 65 53 72 63 72 65 66 00 00 03 0d 00 00 00 08 00
> 00
> >> >> 00
> >> >> 01 00
> >> >> [601] 00 00 00 00 00 00 03 00 00 00 01 00 00 00 00 00 00 00 01 00 00
> 00
> >> >> 01
> >> >> 00 00
> >> >> [626] 00 03 00 00 04 02 00 00 02 ff 00 00 03 ff 00 00 04 02 00 00 06
> ff
> >> >> 00
> >> >> 00 00
> >> >> [651] 10 00 00 00 01 00 04 00 09 00 00 00 06 73 72 63 72 65 66 00 00
> 00
> >> >> fe
> >> >> 00 00
> >> >> [676] 00 fe 00 00 00 01 00 04 00 09 00 00 00 01 7b 00 00 00 02 00 00
> 00
> >> >> 06
> >> >> 00 00
> >> >> [701] 00 01 00 04 00 09 00 00 00 06 72 65 74 75 72 6e 00 00 00 02 00
> 00
> >> >> 00
> >> >> fe 00
> >> >> [726] 00 00 fe 00 00 00 fe
> >> >>>
> >> >>> sessionInfo()
> >> >>
> >> >> R version 3.1.0 (2014-04-10)
> >> >> Platform: x86_64-unknown-linux-gnu (64-bit)
> >> >>
> >> >> locale:
> >> >> [1] C
> >> >>
> >> >> attached base packages:
> >> >> [1] stats     graphics  grDevices utils     datasets  methods   base
> >> >>
> >> >> other attached packages:
> >> >> [1] digest_0.6.4
> >> >>>
> >> >>>
> >> >>
> >> >> ______________________________________________
> >> >> R-devel at r-project.org mailing list
> >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >> >>
> >> >
> >> > --
> >> > Luke Tierney
> >> > Ralph E. Wareham Professor of Mathematical Sciences
> >> > University of Iowa                  Phone:             319-335-3386
> >> > Department of Statistics and        Fax:               319-335-3017
> >> >    Actuarial Science
> >> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> >> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >
> >
> > --
> > Gabriel Becker, PhD
> > Computational Biologist
> > Bioinformatics and Computational Biology
> > Genentech, Inc.
>



-- 
Gabriel Becker, PhD
Computational Biologist
Bioinformatics and Computational Biology
Genentech, Inc.

	[[alternative HTML version deleted]]


From radford at cs.toronto.edu  Wed Feb 18 16:19:57 2015
From: radford at cs.toronto.edu (Radford Neal)
Date: Wed, 18 Feb 2015 10:19:57 -0500
Subject: [Rd] Recycling memory with a small free list
In-Reply-To: <mailman.19.1424257206.2915.r-devel@r-project.org>
References: <mailman.19.1424257206.2915.r-devel@r-project.org>
Message-ID: <20150218151957.GA1174@cs.toronto.edu>

> ... with assignments inside of loops like this:
> 
> reweight = function(iter, w, Q) {
>   for (i in 1:iter) {
>     wT = w * Q
>   }
> }
> ... before the RHS is executed, the LHS allocation would be added
> to a small fixed length list of available space which is checked
> before future allocations.   If the same size is requested before the
> next garbage collection, the allocation is short-circuited and the
> allocation is reused.   This list could be very small, possibly even
> only a single entry.  Entries would only be put on the list if they
> have no other references.

Reusing the LHS storage immediately isn't possible in general, because
evaluation of the RHS might produce an error, in which case the LHS
variable is supposed to be unchanged.  Detecting special cases where
there is guaranteed to be no error, or at least no error after the
first modification to newly allocated memory, might be too
complicated.  

Putting the LHS storage on a small free list for later reuse (only
after the old value of the variable will definitely be replaced) seems
more promising (then one would need only two copies for examples such
as above, with them being used in alternate iterations).  However,
there's a danger of getting carried away and essentially rewriting
malloc.  To avoid this, one might try just calling "free" on the
no-longer-needed object, letting "malloc" then figure out when it can
be re-used.  Unfortunately, that seems not to be safe, because it's
posslble that there is a reference to the no-longer-needed object on
the PROTECT stack, even though no one should actually be looking at
it any more.

In the current version of pqR (see pqR-project.org), modifications are
(often) done in place for statements such as w = w * Q, but not
curretly when the LHS variable does not appear on the RHS.

Regards,

    Radford Neal


From sarahmanderni at gmail.com  Wed Feb 18 18:02:38 2015
From: sarahmanderni at gmail.com (sarah manderni)
Date: Wed, 18 Feb 2015 19:02:38 +0200
Subject: [Rd] Package functioning with R but not R-devel
Message-ID: <CAHyAz7SZTBNK7M48hhBbyoqi7B5gA=5MB2oQ2BHi1heu2nKW+w@mail.gmail.com>

Hi,

I am using an R package which includes C++ code inside. The package is
functioning well under latest official R version but not under R-devel. I
know that the C++ part is not functioning properly and I get an error using
R-devel (it returns nothing to the R part of the program). Do I need to
debug the C++ code separately for R-devel? Would be grateful if you could
suggest any links with similar problem.
Thanks in advance.

	[[alternative HTML version deleted]]


From gmbecker at ucdavis.edu  Wed Feb 18 18:32:36 2015
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Wed, 18 Feb 2015 09:32:36 -0800
Subject: [Rd] Package functioning with R but not R-devel
In-Reply-To: <CAHyAz7SZTBNK7M48hhBbyoqi7B5gA=5MB2oQ2BHi1heu2nKW+w@mail.gmail.com>
References: <CAHyAz7SZTBNK7M48hhBbyoqi7B5gA=5MB2oQ2BHi1heu2nKW+w@mail.gmail.com>
Message-ID: <CADwqtCNXC-jz8V3-fCkLPwA=6ni7pNmqV4Xq62h19X6bhYBpcg@mail.gmail.com>

Sarah,

We don't really have enough information to begin helping you with the
problem. We don't know what the c++ code is doing, which package you are
talking about, etc. See the posting guidelines.

That said, your code is "probably" doing something it shouldn't if things
have suddenly stopped working.

Try running R devel under gdb if you want to try to figure it out, e.g. (on
linux, and possibly mac) <dir-for-Rdevel>/R -d gdb

~G

On Wed, Feb 18, 2015 at 9:02 AM, sarah manderni <sarahmanderni at gmail.com>
wrote:

> Hi,
>
> I am using an R package which includes C++ code inside. The package is
> functioning well under latest official R version but not under R-devel. I
> know that the C++ part is not functioning properly and I get an error using
> R-devel (it returns nothing to the R part of the program). Do I need to
> debug the C++ code separately for R-devel? Would be grateful if you could
> suggest any links with similar problem.
> Thanks in advance.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, PhD
Computational Biologist
Bioinformatics and Computational Biology
Genentech, Inc.

	[[alternative HTML version deleted]]


From sarahmanderni at gmail.com  Wed Feb 18 18:53:24 2015
From: sarahmanderni at gmail.com (sarah manderni)
Date: Wed, 18 Feb 2015 19:53:24 +0200
Subject: [Rd] Package functioning with R but not R-devel
In-Reply-To: <CADwqtCNXC-jz8V3-fCkLPwA=6ni7pNmqV4Xq62h19X6bhYBpcg@mail.gmail.com>
References: <CAHyAz7SZTBNK7M48hhBbyoqi7B5gA=5MB2oQ2BHi1heu2nKW+w@mail.gmail.com>
	<CADwqtCNXC-jz8V3-fCkLPwA=6ni7pNmqV4Xq62h19X6bhYBpcg@mail.gmail.com>
Message-ID: <CAHyAz7Q8Qh4wC_M4Pe0STxxxYbD6j4o3CYi-Xg27UUOZpwO+=g@mail.gmail.com>

The C++ code is used to increase the speed. It receives an empty matrix, in
a "for" loop it calculates the matrix elements and returns it to R. The
problem is, using the official R, it calculates the matrix correctly but
using R-devel, it returns the empty matrix with no errors and I get "error"
when the package tries to divide another matrix to this empty matrix (0/0).
I tried gdb, but it does not throw any errors it just does nothing. It is
the first time I am using R-devel and I was wondering if something is
different when building the package under R-devel or...

On Wed, Feb 18, 2015 at 7:32 PM, Gabriel Becker <gmbecker at ucdavis.edu>
wrote:

> Sarah,
>
> We don't really have enough information to begin helping you with the
> problem. We don't know what the c++ code is doing, which package you are
> talking about, etc. See the posting guidelines.
>
> That said, your code is "probably" doing something it shouldn't if things
> have suddenly stopped working.
>
> Try running R devel under gdb if you want to try to figure it out, e.g.
> (on linux, and possibly mac) <dir-for-Rdevel>/R -d gdb
>
> ~G
>
> On Wed, Feb 18, 2015 at 9:02 AM, sarah manderni <sarahmanderni at gmail.com>
> wrote:
>
>> Hi,
>>
>> I am using an R package which includes C++ code inside. The package is
>> functioning well under latest official R version but not under R-devel. I
>> know that the C++ part is not functioning properly and I get an error
>> using
>> R-devel (it returns nothing to the R part of the program). Do I need to
>> debug the C++ code separately for R-devel? Would be grateful if you could
>> suggest any links with similar problem.
>> Thanks in advance.
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
>
> --
> Gabriel Becker, PhD
> Computational Biologist
> Bioinformatics and Computational Biology
> Genentech, Inc.
>

	[[alternative HTML version deleted]]


From hanson at depauw.edu  Wed Feb 18 20:44:10 2015
From: hanson at depauw.edu (Bryan Hanson)
Date: Wed, 18 Feb 2015 14:44:10 -0500
Subject: [Rd] Color Coding in R-devel/NEWS
Message-ID: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>

On this feed, which I think is the place we should monitor upcoming changes:

http://developer.r-project.org/blosxom.cgi/R-devel/NEWS

What is the significance of the green and pink highlighting?

Thanks, Bryan


From simon.urbanek at r-project.org  Wed Feb 18 21:04:44 2015
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Wed, 18 Feb 2015 15:04:44 -0500
Subject: [Rd] Color Coding in R-devel/NEWS
In-Reply-To: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>
References: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>
Message-ID: <EC8E46DE-D2DE-40E2-A2B3-B083D70D135D@r-project.org>

On Feb 18, 2015, at 2:44 PM, Bryan Hanson <hanson at depauw.edu> wrote:
> 
> On this feed, which I think is the place we should monitor upcoming changes:
> 
> http://developer.r-project.org/blosxom.cgi/R-devel/NEWS
> 
> What is the significance of the green and pink highlighting?
> 

It highlights the changes since last day: green = added, pink = deleted


From marc_schwartz at me.com  Wed Feb 18 21:12:56 2015
From: marc_schwartz at me.com (Marc Schwartz)
Date: Wed, 18 Feb 2015 14:12:56 -0600
Subject: [Rd] Color Coding in R-devel/NEWS
In-Reply-To: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>
References: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>
Message-ID: <40961B91-B25F-407C-8ADC-A73EB310CCFA@me.com>


> On Feb 18, 2015, at 1:44 PM, Bryan Hanson <hanson at depauw.edu> wrote:
> 
> On this feed, which I think is the place we should monitor upcoming changes:
> 
> http://developer.r-project.org/blosxom.cgi/R-devel/NEWS
> 
> What is the significance of the green and pink highlighting?
> 
> Thanks, Bryan


I stand to be corrected, but daily diffs are being generated, such that the green highlighted text is new since the prior version and the pink/strikethrough text is a deletion since the prior version.

Regards,

Marc Schwartz


From edd at debian.org  Wed Feb 18 21:23:39 2015
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 18 Feb 2015 14:23:39 -0600
Subject: [Rd] Color Coding in R-devel/NEWS
In-Reply-To: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>
References: <B699D700-0FFC-4F59-B5EF-E3C59D51CD2A@depauw.edu>
Message-ID: <21732.62667.572376.766292@max.nulle.part>


On 18 February 2015 at 14:44, Bryan Hanson wrote:
| On this feed, which I think is the place we should monitor upcoming changes:
| 
| http://developer.r-project.org/blosxom.cgi/R-devel/NEWS
| 
| What is the significance of the green and pink highlighting?

Same as in some code diff tools:  green is generally addition, red (and here
also crossed-out) removal. The white text is text that was already there.

FWIW I read the same page via an RSS reader; in that case the formatting is a
bit more consistent (no local css file) and the colours are removed.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From risso.davide at gmail.com  Wed Feb 18 21:19:33 2015
From: risso.davide at gmail.com (davide risso)
Date: Wed, 18 Feb 2015 12:19:33 -0800
Subject: [Rd] smoothScatter() and the KernSmooth package
Message-ID: <CAFySUMk3MkkpcvrwyZKtshXYZ+pQo+qVoTfNYnxweKA2kJpEjQ@mail.gmail.com>

Dear R-devel,

my Bioconductor EDASeq package has a function MDPlot that uses the
smoothScatter() function from the graphics package. When I test this
package on travis-ci.org (R CMD check) I get the following error
(which I don't get on my machine nor on the Bioconductor build
system).

* checking examples ... ERROR
Running examples in ?EDASeq-Ex.R? failed
The error most likely occurred in:
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MDPlot-methods
> ### Title: Methods for Function 'MDPlot' in Package 'EDASeq'
> ### Aliases: MDPlot MDPlot-methods MDPlot,matrix,numeric-method
> ###   MDPlot,SeqExpressionSet,numeric-method
> ### Keywords: methods
>
> ### ** Examples
>
> library(yeastRNASeq)
> data(geneLevelData)
> data(yeastGC)
>
> sub <- intersect(rownames(geneLevelData), names(yeastGC))
>
> mat <- as.matrix(geneLevelData[sub,])
>
> data <- newSeqExpressionSet(mat,
+             phenoData=AnnotatedDataFrame(
+                       data.frame(conditions=factor(c("mut", "mut",
"wt", "wt")),
+                                  row.names=colnames(geneLevelData))),
+             featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
>
> MDPlot(data,c(1,3))
Error in loadNamespace(name) : there is no package called ?KernSmooth?
Calls: MDPlot ... tryCatch -> tryCatchList -> tryCatchOne -> <Anonymous>
Execution halted

I looked at the code in smoothScatter and there is a call to
grDevices:::.smoothScatterCalcDensity(), which in turn calls
KernSmooth::bkde2D().

This gets fixed by adding KernSmooth as suggested package in EDASeq.

I was able to reproduce this issue (and the fix) in a small R package:
https://github.com/drisso/rmini/tree/smooth

I have a few questions: isn't it unusual the way smoothScatter calls
grDevices:::.smoothScatterCalcDensity() and KernSmooth::bkde2D(),
i.e., without requiring the packages?
Shouldn't "graphics" suggest "KernSmooth"?

Best regards,
Davide




-- 
Davide Risso, PhD
Post Doctoral Scholar
Division of Biostatistics
School of Public Health
University of California, Berkeley
344 Li Ka Shing Center, #3370
Berkeley, CA 94720-3370
E-mail: davide.risso at berkeley.edu


From nate at verse.com  Thu Feb 19 02:17:14 2015
From: nate at verse.com (Nathan Kurz)
Date: Wed, 18 Feb 2015 17:17:14 -0800
Subject: [Rd] Recycling memory with a small free list
In-Reply-To: <20150218151957.GA1174@cs.toronto.edu>
References: <mailman.19.1424257206.2915.r-devel@r-project.org>
	<20150218151957.GA1174@cs.toronto.edu>
Message-ID: <CAFAN8vzYfOBKHq5b-H=-C_ZPYBK6E03Q5-jqPE3ASgqV15qq_g@mail.gmail.com>

On Wed, Feb 18, 2015 at 7:19 AM, Radford Neal <radford at cs.toronto.edu> wrote:
>> ... with assignments inside of loops like this:
>>
>> reweight = function(iter, w, Q) {
>>   for (i in 1:iter) {
>>     wT = w * Q
>>   }
>> }
>> ... before the RHS is executed, the LHS allocation would be added
>> to a small fixed length list of available space which is checked
>> before future allocations.   If the same size is requested before the
>> next garbage collection, the allocation is short-circuited and the
>> allocation is reused.   This list could be very small, possibly even
>> only a single entry.  Entries would only be put on the list if they
>> have no other references.

Here's an article about the benefits of this approach in Go that might
explain better than I was able:
https://blog.cloudflare.com/recycling-memory-buffers-in-go/
Their charts explain the goal very clearly: stabilize at a smaller
amount of memory to reduce churn, which improves performance in a
myriad of ways.

> Reusing the LHS storage immediately isn't possible in general, because
> evaluation of the RHS might produce an error, in which case the LHS
> variable is supposed to be unchanged.

What's the guarantee R actually makes?  What's an example of the use
case where this behaviour would be required? More generally, can one
not assume "a = NULL; a = func()" is equivalent to "a = func()" unless
func() references 'a' or has it as an argument?  Or is the difficulty
that there is no way to know in advance it if will be referenced?

> Detecting special cases where
> there is guaranteed to be no error, or at least no error after the
> first modification to newly allocated memory, might be too
> complicated.

Yes, if required, the complexity of guaranteeing this might  well rule
out the approach I suggested.

> Putting the LHS storage on a small free list for later reuse (only
> after the old value of the variable will definitely be replaced) seems
> more promising (then one would need only two copies for examples such
> as above, with them being used in alternate iterations).

OK, let's consider that potentially easier option instead:  do nothing
immediately, but add a small queue for recycling from which the
temporary might be drawn.   It has slightly worse cache behavior, but
should handle most of the issues with memory churn.

> However,
> there's a danger of getting carried away and essentially rewriting
> malloc.  To avoid this, one might try just calling "free" on the
> no-longer-needed object, letting "malloc" then figure out when it can
> be re-used.

Yes, I think that's what I was anticipating:  add a free() equivalent
that does nothing if the object has multiple references/names, but
adds the object to small fixed size "free list" if it does not.
Perhaps this is only for certain types or for objects above a certain
size.

When requesting memory, allocvector() or perhaps R_alloc() does a
quick check of that "free list" to see if it has anything of the exact
requested size.  If it does, it short circuits and recycles it.  If it
doesn't, normal allocation takes place.

The "free list" is stored as two small fixed size arrays containing
size/address pairs.   Searching is done linearly using code that
optimizes to SIMD comparisons.   For 4/8/16 slots overhead of the
search should be unmeasurably fast.

The key to the approach would be keeping it simple, and realizing that
the goal is only to get the lowest hanging fruit:  repeated
assignments of large arrays used in a loop.  If it's complex, skip it
--- the behavior will be no worse than current.

By the way, what's happening with Luke's refcnt patches?  From the
outside, they seem like a great improvement.
http://homepage.stat.uiowa.edu/~luke/talks/dsc2014.pdf
http://developer.r-project.org/Refcnt.html
Are they slated to become the standard approach?  Are they going to be dropped?
 Will both approaches be kept in parallel?

> Unfortunately, that seems not to be safe, because it's
> possible that there is a reference to the no-longer-needed object on
> the PROTECT stack, even though no one should actually be looking at
> it any more.

Can you explain this case?   I don't think I understand it.

> In the current version of pqR (see pqR-project.org), modifications are
> (often) done in place for statements such as w = w * Q, but not
> curretly when the LHS variable does not appear on the RHS.

Yes, I looked at it earlier, and was excited to see that Luke had
ported half of your approach to standard R:
https://github.com/wch/r-source/blob/trunk/src/main/arithmetic.h#L65

But only the RHS temporary variables optimizations made it over. Your
LHS "w = w * Q" optimizations did not, but I didn't see any discussion
of why.   Was
it attempted and issues were found?

I think what I'm suggesting is complementary to that.   Direct reuse
is best if it can be detected, but recycling will provide more
opportunities for optimization.  Of course, what I'm suggesting is
always quite obvious, and I presume it's part what he includes in the
slide in his talk that mentions "Explore releasing memory when
reference count drops to zero".

--nate


From radford at cs.toronto.edu  Thu Feb 19 03:16:19 2015
From: radford at cs.toronto.edu (Radford Neal)
Date: Wed, 18 Feb 2015 21:16:19 -0500
Subject: [Rd] Recycling memory with a small free list
In-Reply-To: <CAFAN8vzYfOBKHq5b-H=-C_ZPYBK6E03Q5-jqPE3ASgqV15qq_g@mail.gmail.com>
References: <mailman.19.1424257206.2915.r-devel@r-project.org>
	<20150218151957.GA1174@cs.toronto.edu>
	<CAFAN8vzYfOBKHq5b-H=-C_ZPYBK6E03Q5-jqPE3ASgqV15qq_g@mail.gmail.com>
Message-ID: <20150219021619.GA18066@cs.toronto.edu>

Radford Neal:
> > there's a danger of getting carried away and essentially rewriting
> > malloc.  To avoid this, one might try just calling "free" on the
> > no-longer-needed object, letting "malloc" then figure out when it can
> > be re-used.

Nathan Kurz:
> Yes, I think that's what I was anticipating:  add a free() equivalent...

Radford Neal:
> > Unfortunately, that seems not to be safe, because it's
> > possible that there is a reference to the no-longer-needed object on
> > the PROTECT stack, even though no one should actually be looking at
> > it any more.

Nathan Kurz:
> Can you explain this case?   I don't think I understand it.


My comment about it not being safe was referring to actually calling
the "free" function in the standard C library, not a "free equivalent".  
Except for small objects, R calls "free" when it concludes that it no
longer needs an object, having allocated space for it earlier with
"malloc".  After "free" is called, R had better not do anything like try
to mark it in the garbage collection phase...

Keeping a free list apart from the one maintained by malloc/free would
I think have to be how it is done, hence my comment about ending up
rewriting malloc/free.  But it may not be too hard to restrain oneself
and only do the simplest things.

   Radford Neal


From luke-tierney at uiowa.edu  Thu Feb 19 19:15:14 2015
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Thu, 19 Feb 2015 12:15:14 -0600
Subject: [Rd] Recycling memory with a small free list
In-Reply-To: <CAFAN8vzYfOBKHq5b-H=-C_ZPYBK6E03Q5-jqPE3ASgqV15qq_g@mail.gmail.com>
References: <mailman.19.1424257206.2915.r-devel@r-project.org>
	<20150218151957.GA1174@cs.toronto.edu>
	<CAFAN8vzYfOBKHq5b-H=-C_ZPYBK6E03Q5-jqPE3ASgqV15qq_g@mail.gmail.com>
Message-ID: <alpine.LFD.2.11.1502191204300.32711@itasca.stat.uiowa.edu>

On Wed, 18 Feb 2015, Nathan Kurz wrote:

> On Wed, Feb 18, 2015 at 7:19 AM, Radford Neal <radford at cs.toronto.edu> wrote:
>>> ... with assignments inside of loops like this:
>>>
>>> reweight = function(iter, w, Q) {
>>>   for (i in 1:iter) {
>>>     wT = w * Q
>>>   }
>>> }
>>> ... before the RHS is executed, the LHS allocation would be added
>>> to a small fixed length list of available space which is checked
>>> before future allocations.   If the same size is requested before the
>>> next garbage collection, the allocation is short-circuited and the
>>> allocation is reused.   This list could be very small, possibly even
>>> only a single entry.  Entries would only be put on the list if they
>>> have no other references.
>
> Here's an article about the benefits of this approach in Go that might
> explain better than I was able:
> https://blog.cloudflare.com/recycling-memory-buffers-in-go/
> Their charts explain the goal very clearly: stabilize at a smaller
> amount of memory to reduce churn, which improves performance in a
> myriad of ways.

Thanks -- will have a look.

>> Reusing the LHS storage immediately isn't possible in general, because
>> evaluation of the RHS might produce an error, in which case the LHS
>> variable is supposed to be unchanged.
>
> What's the guarantee R actually makes?  What's an example of the use
> case where this behaviour would be required? More generally, can one
> not assume "a = NULL; a = func()" is equivalent to "a = func()" unless
> func() references 'a' or has it as an argument?  Or is the difficulty
> that there is no way to know in advance it if will be referenced?
>
>> Detecting special cases where
>> there is guaranteed to be no error, or at least no error after the
>> first modification to newly allocated memory, might be too
>> complicated.
>
> Yes, if required, the complexity of guaranteeing this might  well rule
> out the approach I suggested.
>
>> Putting the LHS storage on a small free list for later reuse (only
>> after the old value of the variable will definitely be replaced) seems
>> more promising (then one would need only two copies for examples such
>> as above, with them being used in alternate iterations).
>
> OK, let's consider that potentially easier option instead:  do nothing
> immediately, but add a small queue for recycling from which the
> temporary might be drawn.   It has slightly worse cache behavior, but
> should handle most of the issues with memory churn.
>
>> However,
>> there's a danger of getting carried away and essentially rewriting
>> malloc.  To avoid this, one might try just calling "free" on the
>> no-longer-needed object, letting "malloc" then figure out when it can
>> be re-used.
>
> Yes, I think that's what I was anticipating:  add a free() equivalent
> that does nothing if the object has multiple references/names, but
> adds the object to small fixed size "free list" if it does not.
> Perhaps this is only for certain types or for objects above a certain
> size.
>
> When requesting memory, allocvector() or perhaps R_alloc() does a
> quick check of that "free list" to see if it has anything of the exact
> requested size.  If it does, it short circuits and recycles it.  If it
> doesn't, normal allocation takes place.
>
> The "free list" is stored as two small fixed size arrays containing
> size/address pairs.   Searching is done linearly using code that
> optimizes to SIMD comparisons.   For 4/8/16 slots overhead of the
> search should be unmeasurably fast.
>
> The key to the approach would be keeping it simple, and realizing that
> the goal is only to get the lowest hanging fruit:  repeated
> assignments of large arrays used in a loop.  If it's complex, skip it
> --- the behavior will be no worse than current.
>
> By the way, what's happening with Luke's refcnt patches?  From the
> outside, they seem like a great improvement.
> http://homepage.stat.uiowa.edu/~luke/talks/dsc2014.pdf
> http://developer.r-project.org/Refcnt.html
> Are they slated to become the standard approach?  Are they going to be dropped?
> Will both approaches be kept in parallel?

The approach can be enabled in R-devel by defining a preprocessor
variable.  It's about 90% of where it needs to be to become the
default. I had to put work on hold for a while but will be getting
back to it soon. It's too late to turn on for 3.2.0 due in April, but
I'm hopeful of switching to reference counting in R-devel by August or
so.

>
>> Unfortunately, that seems not to be safe, because it's
>> possible that there is a reference to the no-longer-needed object on
>> the PROTECT stack, even though no one should actually be looking at
>> it any more.
>
> Can you explain this case?   I don't think I understand it.
>
>> In the current version of pqR (see pqR-project.org), modifications are
>> (often) done in place for statements such as w = w * Q, but not
>> curretly when the LHS variable does not appear on the RHS.
>
> Yes, I looked at it earlier, and was excited to see that Luke had
> ported half of your approach to standard R:
> https://github.com/wch/r-source/blob/trunk/src/main/arithmetic.h#L65
>
> But only the RHS temporary variables optimizations made it over. Your
> LHS "w = w * Q" optimizations did not, but I didn't see any discussion
> of why.   Was
> it attempted and issues were found?
>
> I think what I'm suggesting is complementary to that.   Direct reuse
> is best if it can be detected, but recycling will provide more
> opportunities for optimization.  Of course, what I'm suggesting is
> always quite obvious, and I presume it's part what he includes in the
> slide in his talk that mentions "Explore releasing memory when
> reference count drops to zero".

This is part of the missing 10% of things I 'd like to explore before
going live. Releasing large (malloc'ed) objects with reference counts
that hit zero back to the malloc system is probably not to hard to get
right. Holding onto these objects in a free list might be worth
looking into, but as Radford suggests a good malloc may be good enough
at doing that already.

Best,

luke

>
> --nate
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From kmillar at google.com  Thu Feb 19 21:59:18 2015
From: kmillar at google.com (Karl Millar)
Date: Thu, 19 Feb 2015 12:59:18 -0800
Subject: [Rd] Recycling memory with a small free list
In-Reply-To: <alpine.LFD.2.11.1502191204300.32711@itasca.stat.uiowa.edu>
References: <mailman.19.1424257206.2915.r-devel@r-project.org>
	<20150218151957.GA1174@cs.toronto.edu>
	<CAFAN8vzYfOBKHq5b-H=-C_ZPYBK6E03Q5-jqPE3ASgqV15qq_g@mail.gmail.com>
	<alpine.LFD.2.11.1502191204300.32711@itasca.stat.uiowa.edu>
Message-ID: <CABz6aZe_jimpDMsmswKLfaRyGJCB-QbjqSTVkHZXvmO_gd_1Jg@mail.gmail.com>

If you link to tcmalloc instead of the default malloc on your system, the
performance of large allocations should improve.  On unix machines you
don't even need to recompile -- you can do this with LD_PRELOAD.  The
downside is that you'll almost certainly end up with higher average memory
usage.as tcmalloc never returns memory to the OS.

It would also be worth checking what jemalloc does with large allocations.


It may well be worth tweaking the way that large allocations are handled in
R -- most allocation libraries assume that large allocations are infrequent
and that you won't be frequently requesting the same sized memory block.
Those assumptions don't hold in R.  On the other hand, I don't see much
benefit to R having it's own logic for handling small allocations, as most
malloc implementations handle those extremely efficiently.

Karl

On Thu, Feb 19, 2015 at 10:15 AM, <luke-tierney at uiowa.edu> wrote:

> On Wed, 18 Feb 2015, Nathan Kurz wrote:
>
>  On Wed, Feb 18, 2015 at 7:19 AM, Radford Neal <radford at cs.toronto.edu>
>> wrote:
>>
>>> ... with assignments inside of loops like this:
>>>>
>>>> reweight = function(iter, w, Q) {
>>>>   for (i in 1:iter) {
>>>>     wT = w * Q
>>>>   }
>>>> }
>>>> ... before the RHS is executed, the LHS allocation would be added
>>>> to a small fixed length list of available space which is checked
>>>> before future allocations.   If the same size is requested before the
>>>> next garbage collection, the allocation is short-circuited and the
>>>> allocation is reused.   This list could be very small, possibly even
>>>> only a single entry.  Entries would only be put on the list if they
>>>> have no other references.
>>>>
>>>
>> Here's an article about the benefits of this approach in Go that might
>> explain better than I was able:
>> https://blog.cloudflare.com/recycling-memory-buffers-in-go/
>> Their charts explain the goal very clearly: stabilize at a smaller
>> amount of memory to reduce churn, which improves performance in a
>> myriad of ways.
>>
>
> Thanks -- will have a look.
>
>
>  Reusing the LHS storage immediately isn't possible in general, because
>>> evaluation of the RHS might produce an error, in which case the LHS
>>> variable is supposed to be unchanged.
>>>
>>
>> What's the guarantee R actually makes?  What's an example of the use
>> case where this behaviour would be required? More generally, can one
>> not assume "a = NULL; a = func()" is equivalent to "a = func()" unless
>> func() references 'a' or has it as an argument?  Or is the difficulty
>> that there is no way to know in advance it if will be referenced?
>>
>>  Detecting special cases where
>>> there is guaranteed to be no error, or at least no error after the
>>> first modification to newly allocated memory, might be too
>>> complicated.
>>>
>>
>> Yes, if required, the complexity of guaranteeing this might  well rule
>> out the approach I suggested.
>>
>>  Putting the LHS storage on a small free list for later reuse (only
>>> after the old value of the variable will definitely be replaced) seems
>>> more promising (then one would need only two copies for examples such
>>> as above, with them being used in alternate iterations).
>>>
>>
>> OK, let's consider that potentially easier option instead:  do nothing
>> immediately, but add a small queue for recycling from which the
>> temporary might be drawn.   It has slightly worse cache behavior, but
>> should handle most of the issues with memory churn.
>>
>>  However,
>>> there's a danger of getting carried away and essentially rewriting
>>> malloc.  To avoid this, one might try just calling "free" on the
>>> no-longer-needed object, letting "malloc" then figure out when it can
>>> be re-used.
>>>
>>
>> Yes, I think that's what I was anticipating:  add a free() equivalent
>> that does nothing if the object has multiple references/names, but
>> adds the object to small fixed size "free list" if it does not.
>> Perhaps this is only for certain types or for objects above a certain
>> size.
>>
>> When requesting memory, allocvector() or perhaps R_alloc() does a
>> quick check of that "free list" to see if it has anything of the exact
>> requested size.  If it does, it short circuits and recycles it.  If it
>> doesn't, normal allocation takes place.
>>
>> The "free list" is stored as two small fixed size arrays containing
>> size/address pairs.   Searching is done linearly using code that
>> optimizes to SIMD comparisons.   For 4/8/16 slots overhead of the
>> search should be unmeasurably fast.
>>
>> The key to the approach would be keeping it simple, and realizing that
>> the goal is only to get the lowest hanging fruit:  repeated
>> assignments of large arrays used in a loop.  If it's complex, skip it
>> --- the behavior will be no worse than current.
>>
>> By the way, what's happening with Luke's refcnt patches?  From the
>> outside, they seem like a great improvement.
>> http://homepage.stat.uiowa.edu/~luke/talks/dsc2014.pdf
>> http://developer.r-project.org/Refcnt.html
>> Are they slated to become the standard approach?  Are they going to be
>> dropped?
>> Will both approaches be kept in parallel?
>>
>
> The approach can be enabled in R-devel by defining a preprocessor
> variable.  It's about 90% of where it needs to be to become the
> default. I had to put work on hold for a while but will be getting
> back to it soon. It's too late to turn on for 3.2.0 due in April, but
> I'm hopeful of switching to reference counting in R-devel by August or
> so.
>
>
>>  Unfortunately, that seems not to be safe, because it's
>>> possible that there is a reference to the no-longer-needed object on
>>> the PROTECT stack, even though no one should actually be looking at
>>> it any more.
>>>
>>
>> Can you explain this case?   I don't think I understand it.
>>
>>  In the current version of pqR (see pqR-project.org), modifications are
>>> (often) done in place for statements such as w = w * Q, but not
>>> curretly when the LHS variable does not appear on the RHS.
>>>
>>
>> Yes, I looked at it earlier, and was excited to see that Luke had
>> ported half of your approach to standard R:
>> https://github.com/wch/r-source/blob/trunk/src/main/arithmetic.h#L65
>>
>> But only the RHS temporary variables optimizations made it over. Your
>> LHS "w = w * Q" optimizations did not, but I didn't see any discussion
>> of why.   Was
>> it attempted and issues were found?
>>
>> I think what I'm suggesting is complementary to that.   Direct reuse
>> is best if it can be detected, but recycling will provide more
>> opportunities for optimization.  Of course, what I'm suggesting is
>> always quite obvious, and I presume it's part what he includes in the
>> slide in his talk that mentions "Explore releasing memory when
>> reference count drops to zero".
>>
>
> This is part of the missing 10% of things I 'd like to explore before
> going live. Releasing large (malloc'ed) objects with reference counts
> that hit zero back to the malloc system is probably not to hard to get
> right. Holding onto these objects in a free list might be worth
> looking into, but as Radford suggests a good malloc may be good enough
> at doing that already.
>
> Best,
>
> luke
>
>
>> --nate
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From dstr7320 at uni.sydney.edu.au  Fri Feb 20 02:00:03 2015
From: dstr7320 at uni.sydney.edu.au (Dario Strbenac)
Date: Fri, 20 Feb 2015 01:00:03 +0000
Subject: [Rd] save.image Doesn't Save Objects When Browsing
Message-ID: <1424394003080.77402@uni.sydney.edu.au>

The documentation states that "save.image() is just a short-cut for save(list = ls(all = TRUE), file = ".RData")". However, if I do

Browse[1]> ls(all=TRUE)
[1] "expression"         "orderedFeatures"    "predictParams"     
[4] "resubstituteParams" "trainParams"        "verbose"
Browse[1]> save.image("BROWSE.RData")

load("BROWSE.RData") shows different variables than ls() did. Explicitly typing

Browse[1]> save(list = ls(all = TRUE), file = ".RData")

causes the variables in the current environment to be saved.

Is the documentation of save.image() missing a special case ?

--------------------------------------
Dario Strbenac
PhD Student
University of Sydney
Camperdown NSW 2050
Australia

From ripley at stats.ox.ac.uk  Fri Feb 20 07:11:58 2015
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 20 Feb 2015 06:11:58 +0000
Subject: [Rd] save.image Doesn't Save Objects When Browsing
In-Reply-To: <1424394003080.77402@uni.sydney.edu.au>
References: <1424394003080.77402@uni.sydney.edu.au>
Message-ID: <54E6D02E.2070401@stats.ox.ac.uk>

On 20/02/2015 01:00, Dario Strbenac wrote:
> The documentation states that "save.image() is just a short-cut for save(list = ls(all = TRUE), file = ".RData")". However, if I do
>
> Browse[1]> ls(all=TRUE)
> [1] "expression"         "orderedFeatures"    "predictParams"
> [4] "resubstituteParams" "trainParams"        "verbose"
> Browse[1]> save.image("BROWSE.RData")
>
> load("BROWSE.RData") shows different variables than ls() did. Explicitly typing
>
> Browse[1]> save(list = ls(all = TRUE), file = ".RData")
>
> causes the variables in the current environment to be saved.
>
> Is the documentation of save.image() missing a special case?

You are missing the other arguments.  What it actually says is

     ?save.image()? is just a short-cut for ?save my current
      workspace?,

and for that you need to specify envir=.GlobalEnv .

>
> --------------------------------------
> Dario Strbenac
> PhD Student
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From maechler at lynne.stat.math.ethz.ch  Fri Feb 20 12:40:11 2015
From: maechler at lynne.stat.math.ethz.ch (Martin Maechler)
Date: Fri, 20 Feb 2015 12:40:11 +0100
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <54DBAB1D.5080509@gmail.com>
References: <54C35EB5.3060402@gmail.com>
	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>
	<21702.11046.319866.816795@stat.math.ethz.ch>
	<CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>
	<21711.24672.449563.817210@stat.math.ethz.ch>
	<54D93473.2040609@gmail.com>
	<CAOQ5NydfFwc=iq47-fay_dp-r-XLtO=kt_0b3c7F=nGkjXmY_g@mail.gmail.com>
	<54DBAB1D.5080509@gmail.com>
Message-ID: <21735.7451.535262.591755@stat.math.ethz.ch>

>>>>> Mario Annau <mario.annau at gmail.com>
>>>>>     on Wed, 11 Feb 2015 20:18:53 +0100 writes:

    > sorry - I just got irritated by my different R-versions.
    > The behaviour I described in the previous mail was discovered using R
    > 3.1.2 without bind_activation(TRUE). In r67773 all calls are delegated
    > to r/cbind.matrix and not r/cbind2.
    > As a workaround I have now implemented an S3 method for my S4 class
    > which correctly dispatches for both versions (3.1.2 and r67699+) - see
    > also the commit for the h5 package on github:
    > https://github.com/mannau/h5/commit/20daea37ade1a317458c8a1d03928f579e457f93.
    > Any better ideas are welcome.

and in the mean time there have been a few off-list e-mails,

{"No, using an S3 method was definitely not the idea of
  Michael's changes!" .. }

and many hours of work by me.
R-devel svn rev 67852 and later now has  cbind() / rbind()
working in a better way, dipatching to either cbind2(), rbind2()
S4 methods for "your" classes, or to S4 rbind() or cbind()
methods for your classes.

Notably the new code now should create column / rownames
analogously to base::cbind / rbind, influenced by deparse.level
in the case of non-matrix arguments.

Small changes in some outputs may occur, notably as the hidden 
methods:::cbind and rbind functions (think of "S4 default method")
now do obey deparse.level and also otherwise should create row
and column names in the same way as base::[cr]bind().

Martin Maechler
ETH Zurich and R Core Team

    > br,
    > mario


    > Am 09/02/15 um 23:38 schrieb Michael Lawrence:
    >> Are you able to create a reproducible example, somehow?
    >> 
    >> Thanks,
    >> Michael
    >> 
    >> On Mon, Feb 9, 2015 at 2:28 PM, Mario Annau <mario.annau at gmail.com
    >> <mailto:mario.annau at gmail.com>> wrote:
    >> 
    >> Hi Michael,
    >> I've tested your change in r67699 (using r67773) and the function now
    >> correctly dispatches to r/cbind2 within the R-session without
    >> bind_activation(TRUE). However, running unit tests using R CMD check I
    >> figured out that the same function call delegates to r/cbind.matrix
    >> (function uses S4 class as first- and matrix as second argument). Is
    >> this a bug and/or how can I get function dispatch right (to r/cbind2)
    >> for my test cases?
    >> best,
    >> mario
    >> 
    >> 
    >> Am 02/02/15 um 12:32 schrieb Martin Maechler:
    >> >>>>>> Michael Lawrence <lawrence.michael at gene.com
    >> <mailto:lawrence.michael at gene.com>>
    >> >>>>>>     on Sun, 1 Feb 2015 19:23:06 -0800 writes:
    >> >
    >> >     > I've implemented the proposed changes in
    >> >     > R-devel. Minimally tested, so please try it. It should
    >> >     > delegate to r/cbind2 when there is at least one S4
    >> >     > argument and S3 dispatch fails (so you'll probably want to
    >> >     > add an S3 method for your class to introduce a conflict,
    >> >     > otherwise it will dispatch to cbind.data.frame if one of
    >> >     > the args is a data.frame). There may no longer be a need
    >> >     > for cBind() and rBind().
    >> >
    >> >     > Michael
    >> >
    >> > This sounds great!   Thank you very much, Michael!
    >> > :-) :-)
    >> >
    >> > ... but .... :-(  experiments with the Matrix package (and R
    >> > devel with your change), show a remaining buglet with treating of
    >> dimnames :
    >> >
    >> >    > M1 <- Matrix(m1 <- matrix(1:12, 3,4))
    >> >    > cbind(m1, MM = -1)
    >> >                MM
    >> >    [1,] 1 4 7 10 -1
    >> >    [2,] 2 5 8 11 -1
    >> >    [3,] 3 6 9 12 -1
    >> >    > cbind(M1, MM = -1)   ## ---- notice the "..."
    >> >    3 x 5 Matrix of class "dgeMatrix"
    >> >                ...
    >> >    [1,] 1 4 7 10  -1
    >> >    [2,] 2 5 8 11  -1
    >> >    [3,] 3 6 9 12  -1
    >> >    > rbind(R1 = 10:11, m1)
    >> >       [,1] [,2] [,3] [,4]
    >> >    R1   10   11   10   11
    >> >        1    4    7   10
    >> >        2    5    8   11
    >> >        3    6    9   12
    >> >    > rbind(R1 = 10:11, M1) ## --- notice the 'deparse.level'
    >> >    4 x 4 Matrix of class "dgeMatrix"
    >> >                [,1] [,2] [,3] [,4]
    >> >    deparse.level   10   11   10   11
    >> >                   1    4    7   10
    >> >                   2    5    8   11
    >> >                   3    6    9   12
    >> >    >
    >> >
    >> > Also, it seems you are not observing the 'deparse.level'
    >> > argument at all:
    >> > Looking at the last three lines of the example in  ?cbind,
    >> >
    >> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle
    >> 2 rownames
    >> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3
    >> rownames (default)
    >> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
    >> >
    >> > but using a Matrix matrix 'dd', we see that (row)names
    >> > construction needs to amended:
    >> >
    >> >   > (dd <- Matrix(rbind(c(0:1,0,0))))
    >> >   1 x 4 sparse Matrix of class "dgCMatrix"
    >> >
    >> >   [1,] . 1 . .
    >> >
    >> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle
    >> 2 rownames
    >> >   4 x 4 sparse Matrix of class "dgCMatrix"
    >> >
    >> >   deparse.level  1  2  3  4
    >> >   c              2  2  2  2
    >> >   a++           10 10 10 10
    >> >                .  1  .  .
    >> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3
    >> rownames (default)
    >> >   4 x 4 sparse Matrix of class "dgCMatrix"
    >> >
    >> >   deparse.level  1  2  3  4
    >> >   c              2  2  2  2
    >> >   a++           10 10 10 10
    >> >                .  1  .  .
    >> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
    >> >   4 x 4 sparse Matrix of class "dgCMatrix"
    >> >
    >> >   deparse.level  1  2  3  4
    >> >   c              2  2  2  2
    >> >   a++           10 10 10 10
    >> >                .  1  .  .
    >> >   >
    >> >
    >> >
    >> >
    >> >     > On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
    >> >     > maechler at lynne.stat.math.ethz.ch
    >> <mailto:maechler at lynne.stat.math.ethz.ch>> wrote:
    >> >
    >> >     >> >>>>> Michael Lawrence <lawrence.michael at gene.com
    >> <mailto:lawrence.michael at gene.com>> >>>>>
    >> >     >> on Sat, 24 Jan 2015 06:39:37 -0800 writes:
    >> >     >>
    >> >     >> > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau >
    >> >     >> <mario.annau at gmail.com <mailto:mario.annau at gmail.com>>
    >> wrote: >> Hi all, this question
    >> >     >> has already been posted on >> stackoverflow, however
    >> >     >> without success, see also
    >> >     >> >>
    >> >     >>
    >> http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
    >> >     >> .
    >> >     >> >>
    >> >     >> >> I have written a package using S4 classes and would
    >> >     >> like >> to use the functions rbind, cbind with these
    >> >     >> defined >> classes.
    >> >     >> >>
    >> >     >> >> Since it does not seem to be possible to define rbind
    >> >     >> and >> cbind directly as S4 methods (see ?cBind) I
    >> >     >> defined >> rbind2 and cbind2 instead:
    >> >     >> >>
    >> >     >>
    >> >     >> > This needs some clarification. It certainly is possible
    >> >     >> to > define cbind and rbind methods. The BiocGenerics
    >> >     >> package > defines generics for those and many methods are
    >> >     >> defined by > e.g. S4Vectors, IRanges, etc.  The issue is
    >> >     >> that dispatch > on "..." is singular, i.e., you can only
    >> >     >> specify one class > that all args in "..." must share
    >> >     >> (potentially through > inheritance).
    >> >     >>
    >> >     >> > Thus, trying to combine objects from a > different
    >> >     >> hierarchy (or non-S4 objects) will not > work.
    >> >     >>
    >> >     >> Yes, indeed, that's the drawback
    >> >     >>
    >> >     >> I've been there almost surely before everyone else, with
    >> >     >> the Matrix package...  and I have been the author of
    >> >     >> cbind2(), rbind2(), and of course, of cBind(), and
    >> >     >> rBind().
    >> >     >>
    >> >     >> At the time when I introduced these, the above
    >> >     >> possibility of writing S4 methods for '...'  where not
    >> >     >> yet part of R.
    >> >     >>
    >> >     >> > This has not been a huge problem for us in >
    >> >     >> practice. For example, we have a DataFrame object that >
    >> >     >> mimics data.frame. To cbind a data.frame with a
    >> >     >> DataFrame, > the user can just call the DataFrame() >
    >> >     >> constructor. rbind() between different data structures is
    >> >     >> > much less common.
    >> >     >>
    >> >     >> well... yes and no.  Think of using the Matrix package,
    >> >     >> maybe with another package that defines another
    >> >     >> generalized matrix class...  It would be nice if things
    >> >     >> worked automatically / perfectly there.
    >> >     >>
    >> >     >> > The cBind and rBind functions in Matrix (and the
    >> >     >> r/cbind > that get installed by bind_activation, the code
    >> >     >> is shared) > work by recursing, dropping the first
    >> >     >> argument until two > are left, and then combining with
    >> >     >> r/cbind2(). The Biobase > package uses a similar strategy
    >> >     >> to mimic c() via its > non-standard combine()
    >> >     >> generic. The nice thing about the > combine() approach is
    >> >     >> the user entry point and the generic > are the same,
    >> >     >> instead of having methods on rbind2() and > the user
    >> >     >> calling rBind().
    >> >     >>
    >> >     >> > I would argue that bind_activation(TRUE) should be >
    >> >     >> discouraged,
    >> >     >>
    >> >     >> Yes, you are right Michael; it should be discouraged at
    >> >     >> least to be run in a *package*.  One could think of its
    >> >     >> use by an explicit user call.
    >> >     >>
    >> >     >> > because it replaces the native rbind and > cbind with
    >> >     >> recursive variants that are going to cause > problems,
    >> >     >> performance and otherwise. This is why it is >
    >> >     >> hidden. Perhaps a reasonable compromise would be for the
    >> >     >> > native cbind and rbind to check whether any arguments
    >> >     >> are > S4 and if so, resort to recursion. Recursion does
    >> >     >> seem to > be a clean way to implement "type promotion",
    >> >     >> i.e., to > answer the question "which type should the
    >> >     >> result be when > faced with mixed-type args?".
    >> >     >>
    >> >     >> Exactly.  That has been my idea at the time ..  ((yes,
    >> >     >> I'm also the author of the bind_activation()
    >> >     >> "(mis)functionality".))
    >> >     >>
    >> >     >> > Hopefully others have better ideas.
    >> >     >>
    >> >     >> that would be great.
    >> >     >>
    >> >     >> And even if not, it would be great if we could implement
    >> >     >> your idea > Perhaps a reasonable compromise would be for
    >> >     >> the > native cbind and rbind to check whether any
    >> >     >> arguments are > S4 and if so, resort to recursion.
    >> >     >>
    >> >     >> without a noticable performance penalty in the case of no
    >> >     >> S4 arguments.
    >> >     >>
    >> >     >> Martin
    >> >     >>
    >> >     >>
    >> >     >> > Michael
    >> >     >>
    >> >     >> >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
    >> >     >> >> function(x, y) { # Do stuff ...  })
    >> >     >> >>
    >> >     >> >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
    >> >     >> >> function(x, y) { # Do stuff ...  })
    >> >     >> >>
    >> >     >> >> >From ?cbind2 I learned that these functions need to
    >> >     >> be >> activated using methods:::bind_activation to
    >> >     >> replace >> rbind and cbind from base.
    >> >     >> >>
    >> >     >> >> I included the call in the package file R/zzz.R using
    >> >     >> the >> .onLoad function:
    >> >     >> >>
    >> >     >> >> .onLoad <- function(...) { # Bind activation of
    >> >     >> cbind(2) >> and rbind(2) for S4 classes >>
    >> >     >> methods:::bind_activation(TRUE) } This works as >>
    >> >     >> expected. However, running R CMD check I am now getting
    >> >     >> >> the following NOTE since I am using an unexported >>
    >> >     >> function in methods:
    >> >     >> >>
    >> >     >> >> * checking dependencies in R code ... NOTE Unexported
    >> >     >> >> object imported by a ':::' call: >>
    >> >     >> 'methods:::bind_activation' See the note in ?`:::` about
    >> >     >> >> the use of this operator.  How can I get rid of the
    >> >     >> NOTE >> and what is the proper way to define the methods
    >> >     >> cbind >> and rbind for S4 classes in a package?
    >> >     >> >>
    >> >     >> >> Best, mario
    >> >     >> >>
    >> >     >> >> ______________________________________________ >>
    >> >     >> R-devel at r-project.org <mailto:R-devel at r-project.org>
    >> mailing list >>
    >> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >     >>
    >> >     >> > ______________________________________________ >
    >> >     >> R-devel at r-project.org <mailto:R-devel at r-project.org>
    >> mailing list >
    >> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >     >>
    >> >
    >> 
    >>


From joshmobrien at gmail.com  Fri Feb 20 18:30:15 2015
From: joshmobrien at gmail.com (Josh O'Brien)
Date: Fri, 20 Feb 2015 09:30:15 -0800
Subject: [Rd] Can R for Windows be built outside of the top-level source
	directory?
Message-ID: <CAOwKfPQsvARgvQXtXRCOspWvVTsY-=KT4sp9YhjbonT+ui_UGg@mail.gmail.com>

The "R-admin" manual describes how to build R from outside of the
top-level source directory on a *NIX machine
(http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Simple-compilation),
but it makes no analagous mention of a way to do so under Windows.
Since the build process in Windows is so different (not using
configure, for instance, and typically being performed from within
$R_SOURCES/src/gnuwin32/), *and* since the "R-admin" guide makes no
mention of it, my guess is that it's not easily possible. But I'd love
to learn otherwise, or even just get a definitive "no".

Thanks,

Josh


From murdoch.duncan at gmail.com  Fri Feb 20 18:37:19 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Fri, 20 Feb 2015 12:37:19 -0500
Subject: [Rd] Can R for Windows be built outside of the top-level source
 directory?
In-Reply-To: <CAOwKfPQsvARgvQXtXRCOspWvVTsY-=KT4sp9YhjbonT+ui_UGg@mail.gmail.com>
References: <CAOwKfPQsvARgvQXtXRCOspWvVTsY-=KT4sp9YhjbonT+ui_UGg@mail.gmail.com>
Message-ID: <54E770CF.7010904@gmail.com>

On 20/02/2015 12:30 PM, Josh O'Brien wrote:
> The "R-admin" manual describes how to build R from outside of the
> top-level source directory on a *NIX machine
> (http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Simple-compilation),
> but it makes no analagous mention of a way to do so under Windows.
> Since the build process in Windows is so different (not using
> configure, for instance, and typically being performed from within
> $R_SOURCES/src/gnuwin32/), *and* since the "R-admin" guide makes no
> mention of it, my guess is that it's not easily possible. But I'd love
> to learn otherwise, or even just get a definitive "no".

I wouldn't go so far as to claim it is impossible, but our build system 
doesn't support it.

Duncan Murdoch


From rkoenker at uiuc.edu  Fri Feb 20 22:15:57 2015
From: rkoenker at uiuc.edu (RKoenker)
Date: Fri, 20 Feb 2015 13:15:57 -0800 (PST)
Subject: [Rd] requireNamespace etiquette
Message-ID: <1424466957867-4703620.post@n4.nabble.com>

I'm trying to resolve a problem of Namespaces and probably have misunderstood
something basic.
In my quantreg package the function crq() has as its first argument a
formula that typically contains
something like this: Surv(y, ...) ~ foo,  where Surv is a function from the
survival package which
quantreg suggests.  When this syntax is encountered in ordinary usage Surv
is resolved, I believe,
because near the beginning of the crq code there is the locution:

if(!requireNamespace("survival", quietly = TRUE))
        stop("crq requires survival package to be installed")

However, when R CMD check tries to do one of the crq examples I see:

> f <- crq(Surv(y,d,type = "left") ~ x, method = "Portnoy")
Error in eval(expr, envir, enclos) : could not find function "Surv"
Calls: crq ... eval -> model.frame -> model.frame.default -> eval -> eval
Execution halted

Can someone suggest a fix?

Roger






--
View this message in context: http://r.789695.n4.nabble.com/requireNamespace-etiquette-tp4703620.html
Sent from the R devel mailing list archive at Nabble.com.


From ripley at stats.ox.ac.uk  Sat Feb 21 06:53:34 2015
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sat, 21 Feb 2015 05:53:34 +0000
Subject: [Rd] requireNamespace etiquette
In-Reply-To: <1424466957867-4703620.post@n4.nabble.com>
References: <1424466957867-4703620.post@n4.nabble.com>
Message-ID: <54E81D5E.1060208@stats.ox.ac.uk>

On 20/02/2015 21:15, RKoenker wrote:
> I'm trying to resolve a problem of Namespaces and probably have misunderstood
> something basic.
> In my quantreg package the function crq() has as its first argument a
> formula that typically contains
> something like this: Surv(y, ...) ~ foo,  where Surv is a function from the
> survival package which
> quantreg suggests.  When this syntax is encountered in ordinary usage Surv
> is resolved, I believe,
> because near the beginning of the crq code there is the locution:
>
> if(!requireNamespace("survival", quietly = TRUE))
>          stop("crq requires survival package to be installed")
>
> However, when R CMD check tries to do one of the crq examples I see:
>
>> f <- crq(Surv(y,d,type = "left") ~ x, method = "Portnoy")
> Error in eval(expr, envir, enclos) : could not find function "Surv"
> Calls: crq ... eval -> model.frame -> model.frame.default -> eval -> eval
> Execution halted
>
> Can someone suggest a fix?

'Writing R Extensions' ?1.1.3.1 does.  Either use survival::Surv in that 
call, or if your code expects only 'Surv', have

Surv <- survival::Surv

somewhere in the environment tree where your formula is evaluated.

>
> Roger

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From mario.annau at gmail.com  Sat Feb 21 08:56:59 2015
From: mario.annau at gmail.com (Mario Annau)
Date: Sat, 21 Feb 2015 08:56:59 +0100
Subject: [Rd] Proper way to define cbind, rbind for s4 classes in package
In-Reply-To: <21735.7451.535262.591755@stat.math.ethz.ch>
References: <54C35EB5.3060402@gmail.com>	<CAOQ5NyeRprfmr+RyUxnoz3JCy9jsz+hasWZN0A=KBrRbdkykRw@mail.gmail.com>	<21702.11046.319866.816795@stat.math.ethz.ch>	<CAOQ5Nye8A7gkmrP_VROs6h59zo8Ts20_RpLMf0F=aPCxUhKX4w@mail.gmail.com>	<21711.24672.449563.817210@stat.math.ethz.ch>	<54D93473.2040609@gmail.com>	<CAOQ5NydfFwc=iq47-fay_dp-r-XLtO=kt_0b3c7F=nGkjXmY_g@mail.gmail.com>	<54DBAB1D.5080509@gmail.com>
	<21735.7451.535262.591755@stat.math.ethz.ch>
Message-ID: <54E83A4B.1000107@gmail.com>

Thank you very much for your effort! I can confirm that *bind S4 method
dispatching now works for my use cases as expected (tested using r67856).
Cheers,
mario

Am 20/02/15 um 12:40 schrieb Martin Maechler:
>>>>>> Mario Annau <mario.annau at gmail.com>
>>>>>>     on Wed, 11 Feb 2015 20:18:53 +0100 writes:
> 
>     > sorry - I just got irritated by my different R-versions.
>     > The behaviour I described in the previous mail was discovered using R
>     > 3.1.2 without bind_activation(TRUE). In r67773 all calls are delegated
>     > to r/cbind.matrix and not r/cbind2.
>     > As a workaround I have now implemented an S3 method for my S4 class
>     > which correctly dispatches for both versions (3.1.2 and r67699+) - see
>     > also the commit for the h5 package on github:
>     > https://github.com/mannau/h5/commit/20daea37ade1a317458c8a1d03928f579e457f93.
>     > Any better ideas are welcome.
> 
> and in the mean time there have been a few off-list e-mails,
> 
> {"No, using an S3 method was definitely not the idea of
>   Michael's changes!" .. }
> 
> and many hours of work by me.
> R-devel svn rev 67852 and later now has  cbind() / rbind()
> working in a better way, dipatching to either cbind2(), rbind2()
> S4 methods for "your" classes, or to S4 rbind() or cbind()
> methods for your classes.
> 
> Notably the new code now should create column / rownames
> analogously to base::cbind / rbind, influenced by deparse.level
> in the case of non-matrix arguments.
> 
> Small changes in some outputs may occur, notably as the hidden 
> methods:::cbind and rbind functions (think of "S4 default method")
> now do obey deparse.level and also otherwise should create row
> and column names in the same way as base::[cr]bind().
> 
> Martin Maechler
> ETH Zurich and R Core Team
> 
>     > br,
>     > mario
> 
> 
>     > Am 09/02/15 um 23:38 schrieb Michael Lawrence:
>     >> Are you able to create a reproducible example, somehow?
>     >> 
>     >> Thanks,
>     >> Michael
>     >> 
>     >> On Mon, Feb 9, 2015 at 2:28 PM, Mario Annau <mario.annau at gmail.com
>     >> <mailto:mario.annau at gmail.com>> wrote:
>     >> 
>     >> Hi Michael,
>     >> I've tested your change in r67699 (using r67773) and the function now
>     >> correctly dispatches to r/cbind2 within the R-session without
>     >> bind_activation(TRUE). However, running unit tests using R CMD check I
>     >> figured out that the same function call delegates to r/cbind.matrix
>     >> (function uses S4 class as first- and matrix as second argument). Is
>     >> this a bug and/or how can I get function dispatch right (to r/cbind2)
>     >> for my test cases?
>     >> best,
>     >> mario
>     >> 
>     >> 
>     >> Am 02/02/15 um 12:32 schrieb Martin Maechler:
>     >> >>>>>> Michael Lawrence <lawrence.michael at gene.com
>     >> <mailto:lawrence.michael at gene.com>>
>     >> >>>>>>     on Sun, 1 Feb 2015 19:23:06 -0800 writes:
>     >> >
>     >> >     > I've implemented the proposed changes in
>     >> >     > R-devel. Minimally tested, so please try it. It should
>     >> >     > delegate to r/cbind2 when there is at least one S4
>     >> >     > argument and S3 dispatch fails (so you'll probably want to
>     >> >     > add an S3 method for your class to introduce a conflict,
>     >> >     > otherwise it will dispatch to cbind.data.frame if one of
>     >> >     > the args is a data.frame). There may no longer be a need
>     >> >     > for cBind() and rBind().
>     >> >
>     >> >     > Michael
>     >> >
>     >> > This sounds great!   Thank you very much, Michael!
>     >> > :-) :-)
>     >> >
>     >> > ... but .... :-(  experiments with the Matrix package (and R
>     >> > devel with your change), show a remaining buglet with treating of
>     >> dimnames :
>     >> >
>     >> >    > M1 <- Matrix(m1 <- matrix(1:12, 3,4))
>     >> >    > cbind(m1, MM = -1)
>     >> >                MM
>     >> >    [1,] 1 4 7 10 -1
>     >> >    [2,] 2 5 8 11 -1
>     >> >    [3,] 3 6 9 12 -1
>     >> >    > cbind(M1, MM = -1)   ## ---- notice the "..."
>     >> >    3 x 5 Matrix of class "dgeMatrix"
>     >> >                ...
>     >> >    [1,] 1 4 7 10  -1
>     >> >    [2,] 2 5 8 11  -1
>     >> >    [3,] 3 6 9 12  -1
>     >> >    > rbind(R1 = 10:11, m1)
>     >> >       [,1] [,2] [,3] [,4]
>     >> >    R1   10   11   10   11
>     >> >        1    4    7   10
>     >> >        2    5    8   11
>     >> >        3    6    9   12
>     >> >    > rbind(R1 = 10:11, M1) ## --- notice the 'deparse.level'
>     >> >    4 x 4 Matrix of class "dgeMatrix"
>     >> >                [,1] [,2] [,3] [,4]
>     >> >    deparse.level   10   11   10   11
>     >> >                   1    4    7   10
>     >> >                   2    5    8   11
>     >> >                   3    6    9   12
>     >> >    >
>     >> >
>     >> > Also, it seems you are not observing the 'deparse.level'
>     >> > argument at all:
>     >> > Looking at the last three lines of the example in  ?cbind,
>     >> >
>     >> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle
>     >> 2 rownames
>     >> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3
>     >> rownames (default)
>     >> >      rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
>     >> >
>     >> > but using a Matrix matrix 'dd', we see that (row)names
>     >> > construction needs to amended:
>     >> >
>     >> >   > (dd <- Matrix(rbind(c(0:1,0,0))))
>     >> >   1 x 4 sparse Matrix of class "dgCMatrix"
>     >> >
>     >> >   [1,] . 1 . .
>     >> >
>     >> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle
>     >> 2 rownames
>     >> >   4 x 4 sparse Matrix of class "dgCMatrix"
>     >> >
>     >> >   deparse.level  1  2  3  4
>     >> >   c              2  2  2  2
>     >> >   a++           10 10 10 10
>     >> >                .  1  .  .
>     >> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3
>     >> rownames (default)
>     >> >   4 x 4 sparse Matrix of class "dgCMatrix"
>     >> >
>     >> >   deparse.level  1  2  3  4
>     >> >   c              2  2  2  2
>     >> >   a++           10 10 10 10
>     >> >                .  1  .  .
>     >> >   > rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
>     >> >   4 x 4 sparse Matrix of class "dgCMatrix"
>     >> >
>     >> >   deparse.level  1  2  3  4
>     >> >   c              2  2  2  2
>     >> >   a++           10 10 10 10
>     >> >                .  1  .  .
>     >> >   >
>     >> >
>     >> >
>     >> >
>     >> >     > On Mon, Jan 26, 2015 at 3:55 AM, Martin Maechler <
>     >> >     > maechler at lynne.stat.math.ethz.ch
>     >> <mailto:maechler at lynne.stat.math.ethz.ch>> wrote:
>     >> >
>     >> >     >> >>>>> Michael Lawrence <lawrence.michael at gene.com
>     >> <mailto:lawrence.michael at gene.com>> >>>>>
>     >> >     >> on Sat, 24 Jan 2015 06:39:37 -0800 writes:
>     >> >     >>
>     >> >     >> > On Sat, Jan 24, 2015 at 12:58 AM, Mario Annau >
>     >> >     >> <mario.annau at gmail.com <mailto:mario.annau at gmail.com>>
>     >> wrote: >> Hi all, this question
>     >> >     >> has already been posted on >> stackoverflow, however
>     >> >     >> without success, see also
>     >> >     >> >>
>     >> >     >>
>     >> http://stackoverflow.com/questions/27886535/proper-way-to-use-cbind-rbind-with-s4-classes-in-package
>     >> >     >> .
>     >> >     >> >>
>     >> >     >> >> I have written a package using S4 classes and would
>     >> >     >> like >> to use the functions rbind, cbind with these
>     >> >     >> defined >> classes.
>     >> >     >> >>
>     >> >     >> >> Since it does not seem to be possible to define rbind
>     >> >     >> and >> cbind directly as S4 methods (see ?cBind) I
>     >> >     >> defined >> rbind2 and cbind2 instead:
>     >> >     >> >>
>     >> >     >>
>     >> >     >> > This needs some clarification. It certainly is possible
>     >> >     >> to > define cbind and rbind methods. The BiocGenerics
>     >> >     >> package > defines generics for those and many methods are
>     >> >     >> defined by > e.g. S4Vectors, IRanges, etc.  The issue is
>     >> >     >> that dispatch > on "..." is singular, i.e., you can only
>     >> >     >> specify one class > that all args in "..." must share
>     >> >     >> (potentially through > inheritance).
>     >> >     >>
>     >> >     >> > Thus, trying to combine objects from a > different
>     >> >     >> hierarchy (or non-S4 objects) will not > work.
>     >> >     >>
>     >> >     >> Yes, indeed, that's the drawback
>     >> >     >>
>     >> >     >> I've been there almost surely before everyone else, with
>     >> >     >> the Matrix package...  and I have been the author of
>     >> >     >> cbind2(), rbind2(), and of course, of cBind(), and
>     >> >     >> rBind().
>     >> >     >>
>     >> >     >> At the time when I introduced these, the above
>     >> >     >> possibility of writing S4 methods for '...'  where not
>     >> >     >> yet part of R.
>     >> >     >>
>     >> >     >> > This has not been a huge problem for us in >
>     >> >     >> practice. For example, we have a DataFrame object that >
>     >> >     >> mimics data.frame. To cbind a data.frame with a
>     >> >     >> DataFrame, > the user can just call the DataFrame() >
>     >> >     >> constructor. rbind() between different data structures is
>     >> >     >> > much less common.
>     >> >     >>
>     >> >     >> well... yes and no.  Think of using the Matrix package,
>     >> >     >> maybe with another package that defines another
>     >> >     >> generalized matrix class...  It would be nice if things
>     >> >     >> worked automatically / perfectly there.
>     >> >     >>
>     >> >     >> > The cBind and rBind functions in Matrix (and the
>     >> >     >> r/cbind > that get installed by bind_activation, the code
>     >> >     >> is shared) > work by recursing, dropping the first
>     >> >     >> argument until two > are left, and then combining with
>     >> >     >> r/cbind2(). The Biobase > package uses a similar strategy
>     >> >     >> to mimic c() via its > non-standard combine()
>     >> >     >> generic. The nice thing about the > combine() approach is
>     >> >     >> the user entry point and the generic > are the same,
>     >> >     >> instead of having methods on rbind2() and > the user
>     >> >     >> calling rBind().
>     >> >     >>
>     >> >     >> > I would argue that bind_activation(TRUE) should be >
>     >> >     >> discouraged,
>     >> >     >>
>     >> >     >> Yes, you are right Michael; it should be discouraged at
>     >> >     >> least to be run in a *package*.  One could think of its
>     >> >     >> use by an explicit user call.
>     >> >     >>
>     >> >     >> > because it replaces the native rbind and > cbind with
>     >> >     >> recursive variants that are going to cause > problems,
>     >> >     >> performance and otherwise. This is why it is >
>     >> >     >> hidden. Perhaps a reasonable compromise would be for the
>     >> >     >> > native cbind and rbind to check whether any arguments
>     >> >     >> are > S4 and if so, resort to recursion. Recursion does
>     >> >     >> seem to > be a clean way to implement "type promotion",
>     >> >     >> i.e., to > answer the question "which type should the
>     >> >     >> result be when > faced with mixed-type args?".
>     >> >     >>
>     >> >     >> Exactly.  That has been my idea at the time ..  ((yes,
>     >> >     >> I'm also the author of the bind_activation()
>     >> >     >> "(mis)functionality".))
>     >> >     >>
>     >> >     >> > Hopefully others have better ideas.
>     >> >     >>
>     >> >     >> that would be great.
>     >> >     >>
>     >> >     >> And even if not, it would be great if we could implement
>     >> >     >> your idea > Perhaps a reasonable compromise would be for
>     >> >     >> the > native cbind and rbind to check whether any
>     >> >     >> arguments are > S4 and if so, resort to recursion.
>     >> >     >>
>     >> >     >> without a noticable performance penalty in the case of no
>     >> >     >> S4 arguments.
>     >> >     >>
>     >> >     >> Martin
>     >> >     >>
>     >> >     >>
>     >> >     >> > Michael
>     >> >     >>
>     >> >     >> >> setMethod("rbind2", signature(x="ClassA", y = "ANY"),
>     >> >     >> >> function(x, y) { # Do stuff ...  })
>     >> >     >> >>
>     >> >     >> >> setMethod("cbind2", signature(x="ClassA", y = "ANY"),
>     >> >     >> >> function(x, y) { # Do stuff ...  })
>     >> >     >> >>
>     >> >     >> >> >From ?cbind2 I learned that these functions need to
>     >> >     >> be >> activated using methods:::bind_activation to
>     >> >     >> replace >> rbind and cbind from base.
>     >> >     >> >>
>     >> >     >> >> I included the call in the package file R/zzz.R using
>     >> >     >> the >> .onLoad function:
>     >> >     >> >>
>     >> >     >> >> .onLoad <- function(...) { # Bind activation of
>     >> >     >> cbind(2) >> and rbind(2) for S4 classes >>
>     >> >     >> methods:::bind_activation(TRUE) } This works as >>
>     >> >     >> expected. However, running R CMD check I am now getting
>     >> >     >> >> the following NOTE since I am using an unexported >>
>     >> >     >> function in methods:
>     >> >     >> >>
>     >> >     >> >> * checking dependencies in R code ... NOTE Unexported
>     >> >     >> >> object imported by a ':::' call: >>
>     >> >     >> 'methods:::bind_activation' See the note in ?`:::` about
>     >> >     >> >> the use of this operator.  How can I get rid of the
>     >> >     >> NOTE >> and what is the proper way to define the methods
>     >> >     >> cbind >> and rbind for S4 classes in a package?
>     >> >     >> >>
>     >> >     >> >> Best, mario
>     >> >     >> >>
>     >> >     >> >> ______________________________________________ >>
>     >> >     >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>     >> mailing list >>
>     >> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> >     >>
>     >> >     >> > ______________________________________________ >
>     >> >     >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>     >> mailing list >
>     >> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> >     >>
>     >> >
>     >> 
>     >> 
>


From alex_restrepo at hotmail.com  Sat Feb 21 17:45:36 2015
From: alex_restrepo at hotmail.com (Alex Restrepo)
Date: Sat, 21 Feb 2015 10:45:36 -0600
Subject: [Rd] RStudio Calling C++ Visual Studio DLL
Message-ID: <BLU184-W578E4EDBF922DA24B52411982B0@phx.gbl>


















All, 

 

I'm a newbie to R and I am interested
in seeing a simple example of calling a 3rd party Visual Studio generated DLL
from RStudio. Does anyone have a simple example which also walks through the
preliminary steps of setting up the INCLUDE path and the library path to either
a DLL or LIB file ? I have tried to find an easy example, but thus far had no
luck finding an example using Rcpp to communicate to a 3rd party visual studio
DLL. 

 

Many
Thanks in Advance, Alex 		 	   		  
	[[alternative HTML version deleted]]


From edd at debian.org  Sat Feb 21 18:44:05 2015
From: edd at debian.org (Dirk Eddelbuettel)
Date: Sat, 21 Feb 2015 11:44:05 -0600
Subject: [Rd] RStudio Calling C++ Visual Studio DLL
In-Reply-To: <BLU184-W578E4EDBF922DA24B52411982B0@phx.gbl>
References: <BLU184-W578E4EDBF922DA24B52411982B0@phx.gbl>
Message-ID: <21736.50149.390141.71546@max.nulle.part>


On 21 February 2015 at 10:45, Alex Restrepo wrote:
| I'm a newbie to R and I am interested
| in seeing a simple example of calling a 3rd party Visual Studio generated DLL
| from RStudio. Does anyone have a simple example which also walks through the
| preliminary steps of setting up the INCLUDE path and the library path to either
| a DLL or LIB file ? I have tried to find an easy example, but thus far had no
| luck finding an example using Rcpp to communicate to a 3rd party visual studio
| DLL. 

Please see "Question 2.9: Can I use Rcpp with Visual Studio" in the Rcpp FAQ
(eg at http://cran.rstudio.com/web/packages/Rcpp/vignettes/Rcpp-FAQ.pdf)
which we wrote about four years ago, but which still stands:

As a courtesy, the text of that Q and A is:

  \subsection{Can I use \pkg{Rcpp} with Visual Studio ?}

  Not a chance.

  And that is not because we are meanies but because \proglang{R} and Visual
  Studio simply do not get along. As \pkg{Rcpp} is all about extending
  \proglang{R} with \proglang{C++} interfaces, we are bound by the available
  toolchain.  And \proglang{R} simply does not compile with Visual Studio. Go
  complain to its vendor if you are still upset.

If you have expert-level understanding of C++ and Visual Studio, you can make
this work.  Yet it will still remain unsupported for as long R itself does
not support Visual Studio / Visual C++.  A potentially more reliably but
still rather painful process would be to write a C-language wrapper to every
function you want to need, and then call that.  Cross-compiler linking works
for C, it does not for C++ due to unstandardized name wrangling.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From daniel.kaschek at physik.uni-freiburg.de  Mon Feb 23 21:57:49 2015
From: daniel.kaschek at physik.uni-freiburg.de (Daniel Kaschek)
Date: Mon, 23 Feb 2015 21:57:49 +0100
Subject: [Rd] iterated lapply
Message-ID: <1424725069.2636.5.camel@physik.uni-freiburg.de>

Hi everybody,

with the following code I generate a list of functions. Each function
reflects a "condition". When I evaluate this list of functions by
another lapply/sapply, I get an unexpected result: all values coincide.
However, when I uncomment the print(), it works as expected. Is this a
bug or a feature?

conditions <- 1:4
test <- lapply(conditions, function(mycondition){
  #print(mycondition)
  myfn <- function(i) mycondition*i
  return(myfn)
})

sapply(test, function(myfn) myfn(2))



Cheers,
Daniel

-- 
Daniel Kaschek
Institute of Physics
Freiburg University

Room 210
Phone: +49 761 2038531


From jeroenooms at gmail.com  Mon Feb 23 22:45:32 2015
From: jeroenooms at gmail.com (Jeroen Ooms)
Date: Mon, 23 Feb 2015 13:45:32 -0800
Subject: [Rd] iterated lapply
In-Reply-To: <1424725069.2636.5.camel@physik.uni-freiburg.de>
References: <1424725069.2636.5.camel@physik.uni-freiburg.de>
Message-ID: <CABFfbXsV=-ra9pZEwWexBX3SashfwBrV2HgSgHWu16hyaJcbjA@mail.gmail.com>

On Mon, Feb 23, 2015 at 12:57 PM, Daniel Kaschek
<daniel.kaschek at physik.uni-freiburg.de> wrote:
> Is this a bug or a feature?

I think it is a bug. If we use substitute to inspect the promise, it
appears the index number is always equal to its last value:

vec <- c("foo", "bar", "baz")
test <- lapply(vec, function(x){
  function(){x}
})
substitute(x, environment(test[[1]]))
substitute(x, environment(test[[2]]))


From dtemplelang at ucdavis.edu  Mon Feb 23 22:52:29 2015
From: dtemplelang at ucdavis.edu (Duncan Temple Lang)
Date: Mon, 23 Feb 2015 13:52:29 -0800
Subject: [Rd] iterated lapply
In-Reply-To: <1424725069.2636.5.camel@physik.uni-freiburg.de>
References: <1424725069.2636.5.camel@physik.uni-freiburg.de>
Message-ID: <54EBA11D.1090601@ucdavis.edu>

Use force() (or anything that evaluates mycondition, e.g. your print):

function(mycondition) {
  force(mycondition)
  function(i) mycondition * i
}

within the lapply() loop. 

Not a bug, but does surprise people. It is lazy evaluation.

  D.

On 2/23/15 12:57 PM, Daniel Kaschek wrote:
> Hi everybody,
> 
> with the following code I generate a list of functions. Each function
> reflects a "condition". When I evaluate this list of functions by
> another lapply/sapply, I get an unexpected result: all values coincide.
> However, when I uncomment the print(), it works as expected. Is this a
> bug or a feature?
> 
> conditions <- 1:4
> test <- lapply(conditions, function(mycondition){
>   #print(mycondition)
>   myfn <- function(i) mycondition*i
>   return(myfn)
> })
> 
> sapply(test, function(myfn) myfn(2))
> 
> 
> 
> Cheers,
> Daniel
> 

-- 
Director, Data Sciences Initiative, UC Davis
Professor, Dept. of Statistics, UC Davis

http://datascience.ucdavis.edu
http://www.stat.ucdavis.edu/~duncan


From murdoch.duncan at gmail.com  Mon Feb 23 22:54:05 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Mon, 23 Feb 2015 16:54:05 -0500
Subject: [Rd] iterated lapply
In-Reply-To: <1424725069.2636.5.camel@physik.uni-freiburg.de>
References: <1424725069.2636.5.camel@physik.uni-freiburg.de>
Message-ID: <54EBA17D.7070802@gmail.com>

On 23/02/2015 3:57 PM, Daniel Kaschek wrote:
> Hi everybody,
> 
> with the following code I generate a list of functions. Each function
> reflects a "condition". When I evaluate this list of functions by
> another lapply/sapply, I get an unexpected result: all values coincide.
> However, when I uncomment the print(), it works as expected. Is this a
> bug or a feature?
> 

Arguments aren't evaluated until they are used.  The force() function
can be used to force evaluation when you want it.

This is a feature:  it allows you to have arguments that are never
evaluated, because they are never used, or defaults that depend on
things that are calculated within the function.

Duncan Murdoch


> conditions <- 1:4
> test <- lapply(conditions, function(mycondition){
>   #print(mycondition)
>   myfn <- function(i) mycondition*i
>   return(myfn)
> })
> 
> sapply(test, function(myfn) myfn(2))
> 
> 
> 
> Cheers,
> Daniel
>


From earino at gmail.com  Mon Feb 23 22:53:00 2015
From: earino at gmail.com (Eduardo Arino de la Rubia)
Date: Mon, 23 Feb 2015 21:53:00 +0000
Subject: [Rd] iterated lapply
References: <1424725069.2636.5.camel@physik.uni-freiburg.de>
	<CABFfbXsV=-ra9pZEwWexBX3SashfwBrV2HgSgHWu16hyaJcbjA@mail.gmail.com>
Message-ID: <CABuA6KCEtFQU6JQ9XWPF-BbkF9xd7gRebmM+aTMeTExPEPYEPA@mail.gmail.com>

Greetings!

I thought it was a lazy evaluation thing. I added "force" around
mycondition and everything worked as expected.

Cheers!

On Mon Feb 23 2015 at 1:47:20 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:

> On Mon, Feb 23, 2015 at 12:57 PM, Daniel Kaschek
> <daniel.kaschek at physik.uni-freiburg.de> wrote:
> > Is this a bug or a feature?
>
> I think it is a bug. If we use substitute to inspect the promise, it
> appears the index number is always equal to its last value:
>
> vec <- c("foo", "bar", "baz")
> test <- lapply(vec, function(x){
>   function(){x}
> })
> substitute(x, environment(test[[1]]))
> substitute(x, environment(test[[2]]))
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From daniel.kaschek at physik.uni-freiburg.de  Tue Feb 24 10:38:27 2015
From: daniel.kaschek at physik.uni-freiburg.de (Daniel Kaschek)
Date: Tue, 24 Feb 2015 10:38:27 +0100
Subject: [Rd] iterated lapply
In-Reply-To: <54EBA17D.7070802@gmail.com>
References: <1424725069.2636.5.camel@physik.uni-freiburg.de>
	<54EBA17D.7070802@gmail.com>
Message-ID: <1424770707.2636.9.camel@physik.uni-freiburg.de>

On Mo, 2015-02-23 at 16:54 -0500, Duncan Murdoch wrote:
> This is a feature:  it allows you to have arguments that are never
> evaluated, because they are never used, or defaults that depend on
> things that are calculated within the function.

I haven't thought about the thing with the default arguments. That's
really a feature.

Thanks,
Daniel

> 
> Duncan Murdoch
> 
> 
> > conditions <- 1:4
> > test <- lapply(conditions, function(mycondition){
> >   #print(mycondition)
> >   myfn <- function(i) mycondition*i
> >   return(myfn)
> > })
> > 
> > sapply(test, function(myfn) myfn(2))
> > 
> > 
> > 
> > Cheers,
> > Daniel
> > 
> 

-- 
Daniel Kaschek
Institute of Physics
Freiburg University

Room 210
Phone: +49 761 2038531


From radford at cs.toronto.edu  Tue Feb 24 12:39:08 2015
From: radford at cs.toronto.edu (Radford Neal)
Date: Tue, 24 Feb 2015 06:39:08 -0500
Subject: [Rd] iterated lapply
In-Reply-To: <mailman.21.1424775604.19275.r-devel@r-project.org>
References: <mailman.21.1424775604.19275.r-devel@r-project.org>
Message-ID: <20150224113908.GA7612@cs.toronto.edu>

From: Daniel Kaschek <daniel.kaschek at physik.uni-freiburg.de>
> ... When I evaluate this list of functions by
> another lapply/sapply, I get an unexpected result: all values coincide.
> However, when I uncomment the print(), it works as expected. Is this a
> bug or a feature?
> 
> conditions <- 1:4
> test <- lapply(conditions, function(mycondition){
>   #print(mycondition)
>   myfn <- function(i) mycondition*i
>   return(myfn)
> })
> 
> sapply(test, function(myfn) myfn(2))

From: Jeroen Ooms <jeroenooms at gmail.com>
> I think it is a bug. If we use substitute to inspect the promise, it
> appears the index number is always equal to its last value:

From: Duncan Temple Lang <dtemplelang at ucdavis.edu>
> Not a bug, but does surprise people. It is lazy evaluation.


I think it is indeed a bug.  The lapply code saves a bit of time by
reusing the same storage for the scalar index number every iteration.
This amounts to modifying the R code that was used for the previous
function call.  There's no justification for doing this in the
documentation for lapply.  It is certainly not desired behaviour,
except in so far as it allows a slight savings in time (which is
minor, given the time that the function call itself will take).

   Radford Neal


From luke-tierney at uiowa.edu  Tue Feb 24 16:50:37 2015
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Tue, 24 Feb 2015 09:50:37 -0600
Subject: [Rd] iterated lapply
In-Reply-To: <20150224113908.GA7612@cs.toronto.edu>
References: <mailman.21.1424775604.19275.r-devel@r-project.org>
	<20150224113908.GA7612@cs.toronto.edu>
Message-ID: <alpine.DEB.2.02.1502240950150.2336@luke-Latitude>

The documentation is not specific enough on the indented semantics in
this situation to consider this a bug. The original R-level
implementation of lapply was

     lapply <- function(X, FUN, ...) {
         FUN <- match.fun(FUN)
         if (!is.list(X))
         X <- as.list(X)
         rval <- vector("list", length(X))
         for(i in seq(along = X))
         rval[i] <- list(FUN(X[[i]], ...))
         names(rval) <- names(X)           # keep `names' !
         return(rval)
     }

and the current internal implementation is consistent with this. With
a loop like this lazy evaluation and binding assignment interact in
this way; the force() function was introduced to help with this.

That said, the expression FUN(X[[i]], ...) could be replaced by

     local({
         i <- i
         list(FUN(X[[i]], ...)
     })

which would produce the more desirable result

     > sapply(test, function(myfn) myfn(2))
     [1] 2 4 6 8

The C implementation could use this approach, or could rebuild the
expression being evaluated at each call to get almost the same semantics.
Both would add a little overhead. Some code optimization might reduce
the overhead in some instances (e.g. if FUN is a BUILTIN), but it's
not clear that would be worth while.

Variants of this issue arise in a couple of places so it may be worth
looking into.

Best,

luke

On Tue, 24 Feb 2015, Radford Neal wrote:

> From: Daniel Kaschek <daniel.kaschek at physik.uni-freiburg.de>
>> ... When I evaluate this list of functions by
>> another lapply/sapply, I get an unexpected result: all values coincide.
>> However, when I uncomment the print(), it works as expected. Is this a
>> bug or a feature?
>>
>> conditions <- 1:4
>> test <- lapply(conditions, function(mycondition){
>>   #print(mycondition)
>>   myfn <- function(i) mycondition*i
>>   return(myfn)
>> })
>>
>> sapply(test, function(myfn) myfn(2))
>
> From: Jeroen Ooms <jeroenooms at gmail.com>
>> I think it is a bug. If we use substitute to inspect the promise, it
>> appears the index number is always equal to its last value:
>
> From: Duncan Temple Lang <dtemplelang at ucdavis.edu>
>> Not a bug, but does surprise people. It is lazy evaluation.
>
>
> I think it is indeed a bug.  The lapply code saves a bit of time by
> reusing the same storage for the scalar index number every iteration.
> This amounts to modifying the R code that was used for the previous
> function call.  There's no justification for doing this in the
> documentation for lapply.  It is certainly not desired behaviour,
> except in so far as it allows a slight savings in time (which is
> minor, given the time that the function call itself will take).
>
>   Radford Neal
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From michael.weylandt at gmail.com  Tue Feb 24 19:26:33 2015
From: michael.weylandt at gmail.com (Michael Weylandt)
Date: Tue, 24 Feb 2015 13:26:33 -0500
Subject: [Rd] iterated lapply
In-Reply-To: <alpine.DEB.2.02.1502240950150.2336@luke-Latitude>
References: <mailman.21.1424775604.19275.r-devel@r-project.org>
	<20150224113908.GA7612@cs.toronto.edu>
	<alpine.DEB.2.02.1502240950150.2336@luke-Latitude>
Message-ID: <4346B4DF-036F-4594-96C0-F8D3121427D0@gmail.com>


> On Feb 24, 2015, at 10:50 AM, <luke-tierney at uiowa.edu> wrote:
> 
> The documentation is not specific enough on the indented semantics in
> this situation to consider this a bug. The original R-level
> implementation of lapply was
> 
>    lapply <- function(X, FUN, ...) {
>        FUN <- match.fun(FUN)
>        if (!is.list(X))
>        X <- as.list(X)
>        rval <- vector("list", length(X))
>        for(i in seq(along = X))
>        rval[i] <- list(FUN(X[[i]], ...))
>        names(rval) <- names(X)           # keep `names' !
>        return(rval)
>    }
> 
> and the current internal implementation is consistent with this. With
> a loop like this lazy evaluation and binding assignment interact in
> this way; the force() function was introduced to help with this.
> 
> That said, the expression FUN(X[[i]], ...) could be replaced by
> 
>    local({
>        i <- i
>        list(FUN(X[[i]], ...)
>    })
> 
> which would produce the more desirable result
> 
>    > sapply(test, function(myfn) myfn(2))
>    [1] 2 4 6 8
> 

Would the same semantics be applied to parallel::mclapply and friends?

sapply(lapply(1:4, function(c){function(i){c*i}}), function(f) f(2))

# [1] 8 8 8 8

sapply(mclapply(1:4, function(c){function(i){c*i}}), function(f) f(2))

# [1] 6 8 6 8

I understand why they differ, but making mclapply easier for 'drop-in' parallelism might be a good thing. 

Michael

From skyebend at skyeome.net  Tue Feb 24 19:29:15 2015
From: skyebend at skyeome.net (Skye Bender-deMoll)
Date: Tue, 24 Feb 2015 10:29:15 -0800
Subject: [Rd] alternatives to do.call() when namespace is attached but not
	loaded?
Message-ID: <54ECC2FB.1090503@skyeome.net>

Dear R-devel

I have a function in a package that essentially provides a wrapper for a 
group of functions in another Suggested package (it sets appropriate 
defaults for the context, transforms output, etc).  I've implemented 
this by verifying that the package was loaded with

require(sna)

and then

do.call(snaFunName, args = args)


The rDevel check is requesting that I use  requireNamespace(sna) instead 
of directly loading the SNA package. This seems reasonable, except that 
I have yet to figure out a way to use do.call to call the function when 
the namespace is attached but package is not loaded. 
do.call("sna::funName",..) doesn't seem to work.

1) Can do.call() call functions that are only namespace attached? Is 
there better way to accomplish this without do.call()? For example, 
should I use getAnywhere('funName') ('tho this doesn't seem to permit 
restricting search to a specific namespace..)

2) Is this an appropriate of require() instead of requireNamespace() to 
ensure that the Suggested package is loaded and attached? Can I ignore 
the check warning?

best,
  -skye


From winstonchang1 at gmail.com  Tue Feb 24 19:52:43 2015
From: winstonchang1 at gmail.com (Winston Chang)
Date: Tue, 24 Feb 2015 12:52:43 -0600
Subject: [Rd] alternatives to do.call() when namespace is attached but
	not loaded?
In-Reply-To: <54ECC2FB.1090503@skyeome.net>
References: <54ECC2FB.1090503@skyeome.net>
Message-ID: <CAFOpNVGE455TsO6d=Ypv78pvF6gnNwrHDo9yf_Wuc3wTtd_64w@mail.gmail.com>

First, a clarification of terminology: a package can be loaded and
attached, or loaded and not attached. It can't be attached and not loaded.

To get the function from a package by name, you could do something like:
  getExportedValue("sna", snaFunName)

where snaFunName is a string containing the name of the function.

-Winston



On Tue, Feb 24, 2015 at 12:29 PM, Skye Bender-deMoll <skyebend at skyeome.net>
wrote:

> Dear R-devel
>
> I have a function in a package that essentially provides a wrapper for a
> group of functions in another Suggested package (it sets appropriate
> defaults for the context, transforms output, etc).  I've implemented this
> by verifying that the package was loaded with
>
> require(sna)
>
> and then
>
> do.call(snaFunName, args = args)
>
>
> The rDevel check is requesting that I use  requireNamespace(sna) instead
> of directly loading the SNA package. This seems reasonable, except that I
> have yet to figure out a way to use do.call to call the function when the
> namespace is attached but package is not loaded. do.call("sna::funName",..)
> doesn't seem to work.
>
> 1) Can do.call() call functions that are only namespace attached? Is there
> better way to accomplish this without do.call()? For example, should I use
> getAnywhere('funName') ('tho this doesn't seem to permit restricting search
> to a specific namespace..)
>
> 2) Is this an appropriate of require() instead of requireNamespace() to
> ensure that the Suggested package is loaded and attached? Can I ignore the
> check warning?
>
> best,
>  -skye
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From h.wickham at gmail.com  Tue Feb 24 19:53:47 2015
From: h.wickham at gmail.com (Hadley Wickham)
Date: Tue, 24 Feb 2015 13:53:47 -0500
Subject: [Rd] alternatives to do.call() when namespace is attached but
	not loaded?
In-Reply-To: <54ECC2FB.1090503@skyeome.net>
References: <54ECC2FB.1090503@skyeome.net>
Message-ID: <CABdHhvFnjimgweFRWt+k+dWYbXaM9+i9h1sh6dJs+31WganMMQ@mail.gmail.com>

do.call(sna::snaFunName, args = args)

?

Hadley

On Tue, Feb 24, 2015 at 1:29 PM, Skye Bender-deMoll
<skyebend at skyeome.net> wrote:
> Dear R-devel
>
> I have a function in a package that essentially provides a wrapper for a
> group of functions in another Suggested package (it sets appropriate
> defaults for the context, transforms output, etc).  I've implemented this by
> verifying that the package was loaded with
>
> require(sna)
>
> and then
>
> do.call(snaFunName, args = args)
>
>
> The rDevel check is requesting that I use  requireNamespace(sna) instead of
> directly loading the SNA package. This seems reasonable, except that I have
> yet to figure out a way to use do.call to call the function when the
> namespace is attached but package is not loaded. do.call("sna::funName",..)
> doesn't seem to work.
>
> 1) Can do.call() call functions that are only namespace attached? Is there
> better way to accomplish this without do.call()? For example, should I use
> getAnywhere('funName') ('tho this doesn't seem to permit restricting search
> to a specific namespace..)
>
> 2) Is this an appropriate of require() instead of requireNamespace() to
> ensure that the Suggested package is loaded and attached? Can I ignore the
> check warning?
>
> best,
>  -skye
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
http://had.co.nz/


From pdalgd at gmail.com  Tue Feb 24 22:38:44 2015
From: pdalgd at gmail.com (peter dalgaard)
Date: Tue, 24 Feb 2015 22:38:44 +0100
Subject: [Rd] alternatives to do.call() when namespace is attached but
	not loaded?
In-Reply-To: <CABdHhvFnjimgweFRWt+k+dWYbXaM9+i9h1sh6dJs+31WganMMQ@mail.gmail.com>
References: <54ECC2FB.1090503@skyeome.net>
	<CABdHhvFnjimgweFRWt+k+dWYbXaM9+i9h1sh6dJs+31WganMMQ@mail.gmail.com>
Message-ID: <6F7CDA96-69CD-4C00-BCC9-6A8954ACAFE7@gmail.com>


> On 24 Feb 2015, at 19:53 , Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> do.call(sna::snaFunName, args = args)
> 
> ?
> 

I was about to suggest something similar. The key is that the first arg to do.call is not necessarily a text string; it can be the actual function object. So something along the lines of 

name <- as.name("snaFunName")
f <- eval(bquote(sna::.(name)))
do.call(f, args)

should work too. 

> Hadley
> 
> On Tue, Feb 24, 2015 at 1:29 PM, Skye Bender-deMoll
> <skyebend at skyeome.net> wrote:
>> Dear R-devel
>> 
>> I have a function in a package that essentially provides a wrapper for a
>> group of functions in another Suggested package (it sets appropriate
>> defaults for the context, transforms output, etc).  I've implemented this by
>> verifying that the package was loaded with
>> 
>> require(sna)
>> 
>> and then
>> 
>> do.call(snaFunName, args = args)
>> 
>> 
>> The rDevel check is requesting that I use  requireNamespace(sna) instead of
>> directly loading the SNA package. This seems reasonable, except that I have
>> yet to figure out a way to use do.call to call the function when the
>> namespace is attached but package is not loaded. do.call("sna::funName",..)
>> doesn't seem to work.
>> 
>> 1) Can do.call() call functions that are only namespace attached? Is there
>> better way to accomplish this without do.call()? For example, should I use
>> getAnywhere('funName') ('tho this doesn't seem to permit restricting search
>> to a specific namespace..)
>> 
>> 2) Is this an appropriate of require() instead of requireNamespace() to
>> ensure that the Suggested package is loaded and attached? Can I ignore the
>> check warning?
>> 
>> best,
>> -skye
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> -- 
> http://had.co.nz/
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From btyner at gmail.com  Wed Feb 25 23:35:01 2015
From: btyner at gmail.com (Benjamin Tyner)
Date: Wed, 25 Feb 2015 17:35:01 -0500
Subject: [Rd] iterated lapply
In-Reply-To: <4346B4DF-036F-4594-96C0-F8D3121427D0@gmail.com>
References: <4346B4DF-036F-4594-96C0-F8D3121427D0@gmail.com>
Message-ID: <54EE4E15.4000506@gmail.com>

Actually, it depends on the number of cores:

    > fun1 <- function(c){function(i){c*i}}
    > fun2 <- function(f) f(2)
    > sapply(mclapply(1:4, fun1, mc.cores=1L), fun2)
    [1] 8 8 8 8
    > sapply(mclapply(1:4, fun1, mc.cores=2L), fun2)
    [1] 6 8 6 8
    > sapply(mclapply(1:4, fun1, mc.cores=4L), fun2)
    [1] 2 4 6 8

> >/ On Feb 24, 2015, at 10:50 AM, <luke-tierney at uiowa.edu <https://stat.ethz.ch/mailman/listinfo/r-devel>> wrote:
> />/ 
> />/ The documentation is not specific enough on the indented semantics in
> />/ this situation to consider this a bug. The original R-level
> />/ implementation of lapply was
> />/ 
> />/    lapply <- function(X, FUN, ...) {
> />/        FUN <- match.fun(FUN)
> />/        if (!is.list(X))
> />/        X <- as.list(X)
> />/        rval <- vector("list", length(X))
> />/        for(i in seq(along = X))
> />/        rval[i] <- list(FUN(X[[i]], ...))
> />/        names(rval) <- names(X)           # keep `names' !
> />/        return(rval)
> />/    }
> />/ 
> />/ and the current internal implementation is consistent with this. With
> />/ a loop like this lazy evaluation and binding assignment interact in
> />/ this way; the force() function was introduced to help with this.
> />/ 
> />/ That said, the expression FUN(X[[i]], ...) could be replaced by
> />/ 
> />/    local({
> />/        i <- i
> />/        list(FUN(X[[i]], ...)
> />/    })
> />/ 
> />/ which would produce the more desirable result
> />/ 
> />/    > sapply(test, function(myfn) myfn(2))
> />/    [1] 2 4 6 8
> />/ 
> /
> Would the same semantics be applied to parallel::mclapply and friends?
>
> sapply(lapply(1:4, function(c){function(i){c*i}}), function(f) f(2))
>
> # [1] 8 8 8 8
>
> sapply(mclapply(1:4, function(c){function(i){c*i}}), function(f) f(2))
>
> # [1] 6 8 6 8
>
> I understand why they differ, but making mclapply easier for 'drop-in' parallelism might be a good thing. 
>
> Michael


From michael.weylandt at gmail.com  Thu Feb 26 03:43:36 2015
From: michael.weylandt at gmail.com (Michael Weylandt)
Date: Wed, 25 Feb 2015 21:43:36 -0500
Subject: [Rd] iterated lapply
In-Reply-To: <54EE4E15.4000506@gmail.com>
References: <4346B4DF-036F-4594-96C0-F8D3121427D0@gmail.com>
	<54EE4E15.4000506@gmail.com>
Message-ID: <D53671B9-C14D-4763-ABA1-79167CCD9113@gmail.com>



> On Feb 25, 2015, at 5:35 PM, Benjamin Tyner <btyner at gmail.com> wrote:
> 
> Actually, it depends on the number of cores:

Under current semantics, yes. Each 'stream' of function calls is lazily capturing the last value of `i` on that core. 

Under Luke's proposed semantics (IIUC),
the result would be the same (2,4,6,8) for both parallel and serial execution. This is what allows for 'drop-in' parallelism. 


>> fun1 <- function(c){function(i){c*i}}
>> fun2 <- function(f) f(2)
>> sapply(mclapply(1:4, fun1, mc.cores=1L), fun2)
>    [1] 8 8 8 8
>> sapply(mclapply(1:4, fun1, mc.cores=2L), fun2)
>    [1] 6 8 6 8
>> sapply(mclapply(1:4, fun1, mc.cores=4L), fun2)
>    [1] 2 4 6 8
> 
>>> / On Feb 24, 2015, at 10:50 AM, <luke-tierney at uiowa.edu <https://stat.ethz.ch/mailman/listinfo/r-devel>> wrote:
>> />/ 
>> />/ The documentation is not specific enough on the indented semantics in
>> />/ this situation to consider this a bug. The original R-level
>> />/ implementation of lapply was
>> />/ 
>> />/    lapply <- function(X, FUN, ...) {
>> />/        FUN <- match.fun(FUN)
>> />/        if (!is.list(X))
>> />/        X <- as.list(X)
>> />/        rval <- vector("list", length(X))
>> />/        for(i in seq(along = X))
>> />/        rval[i] <- list(FUN(X[[i]], ...))
>> />/        names(rval) <- names(X)           # keep `names' !
>> />/        return(rval)
>> />/    }
>> />/ 
>> />/ and the current internal implementation is consistent with this. With
>> />/ a loop like this lazy evaluation and binding assignment interact in
>> />/ this way; the force() function was introduced to help with this.
>> />/ 
>> />/ That said, the expression FUN(X[[i]], ...) could be replaced by
>> />/ 
>> />/    local({
>> />/        i <- i
>> />/        list(FUN(X[[i]], ...)
>> />/    })
>> />/ 
>> />/ which would produce the more desirable result
>> />/ 
>> />/    > sapply(test, function(myfn) myfn(2))
>> />/    [1] 2 4 6 8
>> />/ 
>> /
>> Would the same semantics be applied to parallel::mclapply and friends?
>> 
>> sapply(lapply(1:4, function(c){function(i){c*i}}), function(f) f(2))
>> 
>> # [1] 8 8 8 8
>> 
>> sapply(mclapply(1:4, function(c){function(i){c*i}}), function(f) f(2))
>> 
>> # [1] 6 8 6 8
>> 
>> I understand why they differ, but making mclapply easier for 'drop-in' parallelism might be a good thing. 
>> 
>> Michael
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From maechler at lynne.stat.math.ethz.ch  Thu Feb 26 12:11:01 2015
From: maechler at lynne.stat.math.ethz.ch (Martin Maechler)
Date: Thu, 26 Feb 2015 12:11:01 +0100
Subject: [Rd] iterated lapply
In-Reply-To: <D53671B9-C14D-4763-ABA1-79167CCD9113@gmail.com>
References: <4346B4DF-036F-4594-96C0-F8D3121427D0@gmail.com>
	<54EE4E15.4000506@gmail.com>
	<D53671B9-C14D-4763-ABA1-79167CCD9113@gmail.com>
Message-ID: <21742.65349.826135.388984@stat.math.ethz.ch>

>>>>> Michael Weylandt <michael.weylandt at gmail.com>
>>>>>     on Wed, 25 Feb 2015 21:43:36 -0500 writes:

    >> On Feb 25, 2015, at 5:35 PM, Benjamin Tyner
    >> <btyner at gmail.com> wrote:
    >> 
    >> Actually, it depends on the number of cores:

    > Under current semantics, yes. Each 'stream' of function
    > calls is lazily capturing the last value of `i` on that
    > core.

    > Under Luke's proposed semantics (IIUC), the result would
    > be the same (2,4,6,8) for both parallel and serial
    > execution. This is what allows for 'drop-in' parallelism.

    >>> fun1 <- function(c){function(i){c*i}} fun2 <-
    >>> function(f) f(2) sapply(mclapply(1:4, fun1,
    >>> mc.cores=1L), fun2)
    >> [1] 8 8 8 8
    >>> sapply(mclapply(1:4, fun1, mc.cores=2L), fun2)
    >> [1] 6 8 6 8
    >>> sapply(mclapply(1:4, fun1, mc.cores=4L), fun2)
    >> [1] 2 4 6 8
    >> 

Thank you, Michael and Benjamin.

I strongly agree with your statements and the very strong desirability of
these mclapply() calls to behave the same as lapply().

So indeed, something like Luke's proposed changes both for
lapply(), mclapply()  --- *and* the other *apply() versions in
the parallel packages where needed (??) --- are very desirable.

In my teaching, and in our CRAN package 'simsalapar' we
that useRs should organize computations such that using lapply
serially is used for preliminary testing and  mclapply() etc are
used for the heavy weight computations.

Best,
Martin Maechler

> >>> / On Feb 24, 2015, at 10:50 AM, <luke-tierney at uiowa.edu <https://stat.ethz.ch/mailman/listinfo/r-devel>> wrote:
> >> />/ 
> >> />/ The documentation is not specific enough on the indented semantics in
> >> />/ this situation to consider this a bug. The original R-level
> >> />/ implementation of lapply was
> >> />/ 
> >> />/    lapply <- function(X, FUN, ...) {
> >> />/        FUN <- match.fun(FUN)
> >> />/        if (!is.list(X))
> >> />/        X <- as.list(X)
> >> />/        rval <- vector("list", length(X))
> >> />/        for(i in seq(along = X))
> >> />/        rval[i] <- list(FUN(X[[i]], ...))
> >> />/        names(rval) <- names(X)           # keep `names' !
> >> />/        return(rval)
> >> />/    }
> >> />/ 
> >> />/ and the current internal implementation is consistent with this. With
> >> />/ a loop like this lazy evaluation and binding assignment interact in
> >> />/ this way; the force() function was introduced to help with this.
> >> />/ 
> >> />/ That said, the expression FUN(X[[i]], ...) could be replaced by
> >> />/ 
> >> />/    local({
> >> />/        i <- i
> >> />/        list(FUN(X[[i]], ...)
> >> />/    })
> >> />/ 
> >> />/ which would produce the more desirable result
> >> />/ 
> >> />/    > sapply(test, function(myfn) myfn(2))
> >> />/    [1] 2 4 6 8
> >> />/ 
> >> /
> >> Would the same semantics be applied to parallel::mclapply and friends?
> >> 
> >> sapply(lapply(1:4, function(c){function(i){c*i}}), function(f) f(2))
> >> 
> >> # [1] 8 8 8 8
> >> 
> >> sapply(mclapply(1:4, function(c){function(i){c*i}}), function(f) f(2))
> >> 
> >> # [1] 6 8 6 8
> >> 
> >> I understand why they differ, but making mclapply easier for 'drop-in' parallelism might be a good thing. 
> >> 
> >> Michael


From wdunlap at tibco.com  Thu Feb 26 18:56:14 2015
From: wdunlap at tibco.com (William Dunlap)
Date: Thu, 26 Feb 2015 09:56:14 -0800
Subject: [Rd] iterated lapply
In-Reply-To: <alpine.DEB.2.02.1502240950150.2336@luke-Latitude>
References: <mailman.21.1424775604.19275.r-devel@r-project.org>
	<20150224113908.GA7612@cs.toronto.edu>
	<alpine.DEB.2.02.1502240950150.2336@luke-Latitude>
Message-ID: <CAF8bMcbu93drmsDEc6DpSiKpb1sx-ufMZhC81Z5pp+c4ZzpxFw@mail.gmail.com>

Would introducing the new frame, with the call to local(), cause problems
when you use frame counting instead of <<- to modify variables outside the
scope of lapply's FUN, I think the frame counts may have to change.  E.g.,
here is code from actuar::simul() that might be affected:

        x <- unlist(lapply(nodes[[i]], seq))
        lapply(nodes[(i + 1):(nlevels - 1)],
               function(v) assign("x", rep.int(x, v), envir =
parent.frame(2)))
        m[, i] <- x

(I think the parent.frame(2) might have to be changed to parent.frame(8)
for that to work.  Such code looks pretty ugly to me but seems to be rare.)

It also seems to cause problems with some built-in functions:
newlapply <- function (X, FUN, ...)
{
    FUN <- match.fun(FUN)
    if (!is.list(X))
        X <- as.list(X)
    rval <- vector("list", length(X))
    for (i in seq(along = X)) {
        rval[i] <- list(local({
            i <- i
            FUN(X[[i]], ...)
        }))
    }
    names(rval) <- names(X)
    return(rval)
}
newlapply(1:2,log)
#Error in FUN(X[[i]], ...) : non-numeric argument to mathematical function
newlapply(1:2,function(x)log(x))
#[[1]]
#[1] 0
#
#[[2]]
#[1] 0.6931472



Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Tue, Feb 24, 2015 at 7:50 AM, <luke-tierney at uiowa.edu> wrote:

> The documentation is not specific enough on the indented semantics in
> this situation to consider this a bug. The original R-level
> implementation of lapply was
>
>     lapply <- function(X, FUN, ...) {
>         FUN <- match.fun(FUN)
>         if (!is.list(X))
>         X <- as.list(X)
>         rval <- vector("list", length(X))
>         for(i in seq(along = X))
>         rval[i] <- list(FUN(X[[i]], ...))
>         names(rval) <- names(X)           # keep `names' !
>         return(rval)
>     }
>
> and the current internal implementation is consistent with this. With
> a loop like this lazy evaluation and binding assignment interact in
> this way; the force() function was introduced to help with this.
>
> That said, the expression FUN(X[[i]], ...) could be replaced by
>
>     local({
>         i <- i
>         list(FUN(X[[i]], ...)
>     })
>
> which would produce the more desirable result
>
>     > sapply(test, function(myfn) myfn(2))
>     [1] 2 4 6 8
>
> The C implementation could use this approach, or could rebuild the
> expression being evaluated at each call to get almost the same semantics.
> Both would add a little overhead. Some code optimization might reduce
> the overhead in some instances (e.g. if FUN is a BUILTIN), but it's
> not clear that would be worth while.
>
> Variants of this issue arise in a couple of places so it may be worth
> looking into.
>
> Best,
>
> luke
>
>
> On Tue, 24 Feb 2015, Radford Neal wrote:
>
>  From: Daniel Kaschek <daniel.kaschek at physik.uni-freiburg.de>
>>
>>> ... When I evaluate this list of functions by
>>> another lapply/sapply, I get an unexpected result: all values coincide.
>>> However, when I uncomment the print(), it works as expected. Is this a
>>> bug or a feature?
>>>
>>> conditions <- 1:4
>>> test <- lapply(conditions, function(mycondition){
>>>   #print(mycondition)
>>>   myfn <- function(i) mycondition*i
>>>   return(myfn)
>>> })
>>>
>>> sapply(test, function(myfn) myfn(2))
>>>
>>
>> From: Jeroen Ooms <jeroenooms at gmail.com>
>>
>>> I think it is a bug. If we use substitute to inspect the promise, it
>>> appears the index number is always equal to its last value:
>>>
>>
>> From: Duncan Temple Lang <dtemplelang at ucdavis.edu>
>>
>>> Not a bug, but does surprise people. It is lazy evaluation.
>>>
>>
>>
>> I think it is indeed a bug.  The lapply code saves a bit of time by
>> reusing the same storage for the scalar index number every iteration.
>> This amounts to modifying the R code that was used for the previous
>> function call.  There's no justification for doing this in the
>> documentation for lapply.  It is certainly not desired behaviour,
>> except in so far as it allows a slight savings in time (which is
>> minor, given the time that the function call itself will take).
>>
>>   Radford Neal
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From luke-tierney at uiowa.edu  Thu Feb 26 20:16:32 2015
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Thu, 26 Feb 2015 13:16:32 -0600
Subject: [Rd] iterated lapply
In-Reply-To: <CAF8bMcbu93drmsDEc6DpSiKpb1sx-ufMZhC81Z5pp+c4ZzpxFw@mail.gmail.com>
References: <mailman.21.1424775604.19275.r-devel@r-project.org>
	<20150224113908.GA7612@cs.toronto.edu>
	<alpine.DEB.2.02.1502240950150.2336@luke-Latitude>
	<CAF8bMcbu93drmsDEc6DpSiKpb1sx-ufMZhC81Z5pp+c4ZzpxFw@mail.gmail.com>
Message-ID: <alpine.DEB.2.02.1502261303040.2327@luke-Latitude>

Actually using local() might create some issues, though probably not
many. For the C implementation of lapply I would probably create a new
environment with a frame containing the binding for i and use that in
an eval call.  That wouldn't add another call frame, but it would
change the environment which could still bite something. I would want
to run any change like this over at least CRAN, maybe also BIOC, tests
to see if there are any issues before committing.

There are a few other places where the internal C code does calls to R
functions in a less that ideal way. apply() is also currently written
as a loop along the lines of the original lapply I showed. The
parallel constructs from snow all use lapply or apply, so any changes
there would be inherited; the mc functions are a bit more complicated
and may need a more careful look.

Overall it looks like we could use a new utility at both R and C level
for calling a function with already evaluated arguments and use this
in all relevant places (maybe called funcall or .Funcall or something
like that). I'll try look into this in the next few weeks.

Best,

luke

On Thu, 26 Feb 2015, William Dunlap wrote:

> Would introducing the new frame, with the call to local(), cause problems
> when you use frame counting instead of <<- to modify variables outside the
> scope of lapply's FUN, I think the frame counts may have to change.? E.g.,
> here is code from actuar::simul() that might be affected:
> ? ? ? ? x <- unlist(lapply(nodes[[i]], seq))
> ? ? ? ? lapply(nodes[(i + 1):(nlevels - 1)],
> ? ? ? ? ? ? ? ?function(v) assign("x", rep.int(x, v), envir =
> parent.frame(2)))
> ? ? ? ? m[, i] <- x
> 
> (I think the parent.frame(2) might have to be changed to parent.frame(8) for
> that to work.? Such code looks pretty ugly to me but seems to be rare.)
> 
> It also seems to cause problems with some built-in functions:
> newlapply <- function (X, FUN, ...)?
> {
> ? ? FUN <- match.fun(FUN)
> ? ? if (!is.list(X))?
> ? ? ? ? X <- as.list(X)
> ? ? rval <- vector("list", length(X))
> ? ? for (i in seq(along = X)) {
> ? ? ? ? rval[i] <- list(local({
> ? ? ? ? ? ? i <- i
> ? ? ? ? ? ? FUN(X[[i]], ...)
> ? ? ? ? }))
> ? ? }
> ? ? names(rval) <- names(X)
> ? ? return(rval)
> }
> newlapply(1:2,log)
> #Error in FUN(X[[i]], ...) : non-numeric argument to mathematical function
> newlapply(1:2,function(x)log(x))
> #[[1]]
> #[1] 0
> #
> #[[2]]
> #[1] 0.6931472
> 
> 
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> On Tue, Feb 24, 2015 at 7:50 AM, <luke-tierney at uiowa.edu> wrote:
>       The documentation is not specific enough on the indented
>       semantics in
>       this situation to consider this a bug. The original R-level
>       implementation of lapply was
>
>       ? ? lapply <- function(X, FUN, ...) {
>       ? ? ? ? FUN <- match.fun(FUN)
>       ? ? ? ? if (!is.list(X))
>       ? ? ? ? X <- as.list(X)
>       ? ? ? ? rval <- vector("list", length(X))
>       ? ? ? ? for(i in seq(along = X))
>       ? ? ? ? rval[i] <- list(FUN(X[[i]], ...))
>       ? ? ? ? names(rval) <- names(X)? ? ? ? ? ?# keep `names' !
>       ? ? ? ? return(rval)
>       ? ? }
>
>       and the current internal implementation is consistent with this.
>       With
>       a loop like this lazy evaluation and binding assignment interact
>       in
>       this way; the force() function was introduced to help with this.
>
>       That said, the expression FUN(X[[i]], ...) could be replaced by
>
>       ? ? local({
>       ? ? ? ? i <- i
>       ? ? ? ? list(FUN(X[[i]], ...)
>       ? ? })
>
>       which would produce the more desirable result
>
>       ? ? > sapply(test, function(myfn) myfn(2))
>       ? ? [1] 2 4 6 8
>
>       The C implementation could use this approach, or could rebuild
>       the
>       expression being evaluated at each call to get almost the same
>       semantics.
>       Both would add a little overhead. Some code optimization might
>       reduce
>       the overhead in some instances (e.g. if FUN is a BUILTIN), but
>       it's
>       not clear that would be worth while.
>
>       Variants of this issue arise in a couple of places so it may be
>       worth
>       looking into.
>
>       Best,
>
>       luke
>
>       On Tue, 24 Feb 2015, Radford Neal wrote:
>
>             From: Daniel Kaschek
>             <daniel.kaschek at physik.uni-freiburg.de>
>                   ... When I evaluate this list of
>                   functions by
>                   another lapply/sapply, I get an
>                   unexpected result: all values coincide.
>                   However, when I uncomment the print(),
>                   it works as expected. Is this a
>                   bug or a feature?
>
>                   conditions <- 1:4
>                   test <- lapply(conditions,
>                   function(mycondition){
>                   ? #print(mycondition)
>                   ? myfn <- function(i) mycondition*i
>                   ? return(myfn)
>                   })
>
>                   sapply(test, function(myfn) myfn(2))
> 
>
>             From: Jeroen Ooms <jeroenooms at gmail.com>
>                   I think it is a bug. If we use
>                   substitute to inspect the promise, it
>                   appears the index number is always equal
>                   to its last value:
> 
>
>             From: Duncan Temple Lang <dtemplelang at ucdavis.edu>
>                   Not a bug, but does surprise people. It
>                   is lazy evaluation.
> 
> 
>
>             I think it is indeed a bug.? The lapply code saves a
>             bit of time by
>             reusing the same storage for the scalar index number
>             every iteration.
>             This amounts to modifying the R code that was used
>             for the previous
>             function call.? There's no justification for doing
>             this in the
>             documentation for lapply.? It is certainly not
>             desired behaviour,
>             except in so far as it allows a slight savings in
>             time (which is
>             minor, given the time that the function call itself
>             will take).
>
>             ? Radford Neal
>
>             ______________________________________________
>             R-devel at r-project.org mailing list
>             https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ? ?319-335-3386
> Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ? ?319-335-3017
> ? ?Actuarial Science
> 241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:? ?luke-tierney at uiowa.edu
> Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:? http://www.stat.uiowa.edu
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From maillist at tlink.de  Thu Feb 26 21:09:03 2015
From: maillist at tlink.de (maillist at tlink.de)
Date: Thu, 26 Feb 2015 21:09:03 +0100
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
Message-ID: <54EF7D5F.8060305@tlink.de>


When I send some outlandish characters through enc2native (or format) in 
R 3.1.2 on Ubuntu trusty it works quite well:

 > "?????"
[1] "?????"
 > enc2native("?????")
[1] "?????"
 > Encoding(enc2native("?????"))
[1] "UTF-8"

In Windows the result is different:

 > "?????"
[1] "?????"
 > enc2native("?????")
[1] "??<U+0394><U+040A><U+05EA>"
 > Encoding(enc2native("?????"))
[1] "latin1"

And this is wrong. The native character set of a unicode application 
under Windows is *Unicode*. enc2native should do the same under Windows 
as it does on Ubuntu. Also the "unknown" encoding should be changed to 
mean the same as "UTF-8" exactly as it is on Linux.


From murdoch.duncan at gmail.com  Thu Feb 26 23:22:56 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 26 Feb 2015 17:22:56 -0500
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54EF7D5F.8060305@tlink.de>
References: <54EF7D5F.8060305@tlink.de>
Message-ID: <54EF9CC0.5040502@gmail.com>

On 26/02/2015 3:09 PM, maillist at tlink.de wrote:
> 
> When I send some outlandish characters through enc2native (or format) in 
> R 3.1.2 on Ubuntu trusty it works quite well:
> 
>  > "?????"
> [1] "?????"
>  > enc2native("?????")
> [1] "?????"
>  > Encoding(enc2native("?????"))
> [1] "UTF-8"
> 
> In Windows the result is different:
> 
>  > "?????"
> [1] "?????"
>  > enc2native("?????")
> [1] "??<U+0394><U+040A><U+05EA>"
>  > Encoding(enc2native("?????"))
> [1] "latin1"
> 
> And this is wrong. The native character set of a unicode application 
> under Windows is *Unicode*. enc2native should do the same under Windows 
> as it does on Ubuntu. Also the "unknown" encoding should be changed to 
> mean the same as "UTF-8" exactly as it is on Linux.

What is a "unicode application", and what makes you think R is one?  R
is being told by Windows that your native encoding is latin1.  Perhaps
Windows 8 supports UTF-8 as a native encoding (I've never used it), but
previous versions of Windows didn't.

Duncan Murdoch


From winstonchang1 at gmail.com  Thu Feb 26 23:44:33 2015
From: winstonchang1 at gmail.com (Winston Chang)
Date: Thu, 26 Feb 2015 16:44:33 -0600
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54EF7D5F.8060305@tlink.de>
References: <54EF7D5F.8060305@tlink.de>
Message-ID: <CAFOpNVGVrGwSAsR9JfZEtnC6SLO0mcDnd2wCA1ZR-fAcqz5Z2w@mail.gmail.com>

On Thu, Feb 26, 2015 at 2:09 PM, maillist at tlink.de <maillist at tlink.de>
wrote:

>
> When I send some outlandish characters through enc2native (or format) in R
> 3.1.2 on Ubuntu trusty it works quite well:
>
> > "?????"
> [1] "?????"
> > enc2native("?????")
> [1] "?????"
> > Encoding(enc2native("?????"))
> [1] "UTF-8"
>
> In Windows the result is different:
>
> > "?????"
> [1] "?????"
> > enc2native("?????")
> [1] "??<U+0394><U+040A><U+05EA>"
> > Encoding(enc2native("?????"))
> [1] "latin1"
>
> And this is wrong. The native character set of a unicode application under
> Windows is *Unicode*. enc2native should do the same under Windows as it
> does on Ubuntu. Also the "unknown" encoding should be changed to mean the
> same as "UTF-8" exactly as it is on Linux.
>

I think you're mixing up the term "character set" with the encoding for a
character set. Unicode is a character set. UTF-8 is one of many encodings
of Unicode.

UTF-8 may be the native character encoding in Ubuntu, but it's not the
native encoding in Windows. According to this, what counts as the native
encoding in Windows depends on the code page:
  http://stackoverflow.com/a/4649507

So you shouldn't expect enc2native to do the same thing on Linux and
Windows. If you really want UTF-8, you can use enc2utf8.

-Winston

	[[alternative HTML version deleted]]


From maillist at tlink.de  Fri Feb 27 00:34:03 2015
From: maillist at tlink.de (maillist at tlink.de)
Date: Fri, 27 Feb 2015 00:34:03 +0100
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54EF9CC0.5040502@gmail.com>
References: <54EF7D5F.8060305@tlink.de> <54EF9CC0.5040502@gmail.com>
Message-ID: <54EFAD6B.7070901@tlink.de>

> On 26/02/2015 3:09 PM, maillist at tlink.de wrote:
>> When I send some outlandish characters through enc2native (or format) in
>> R 3.1.2 on Ubuntu trusty it works quite well:
>>
>>   > "?????"
>> [1] "?????"
>>   > enc2native("?????")
>> [1] "?????"
>>   > Encoding(enc2native("?????"))
>> [1] "UTF-8"
>>
>> In Windows the result is different:
>>
>>   > "?????"
>> [1] "?????"
>>   > enc2native("?????")
>> [1] "??<U+0394><U+040A><U+05EA>"
>>   > Encoding(enc2native("?????"))
>> [1] "latin1"
>>
>> And this is wrong. The native character set of a unicode application
>> under Windows is *Unicode*. enc2native should do the same under Windows
>> as it does on Ubuntu. Also the "unknown" encoding should be changed to
>> mean the same as "UTF-8" exactly as it is on Linux.
> What is a "unicode application", and what makes you think R is one?  R
> is being told by Windows that your native encoding is latin1.  Perhaps
> Windows 8 supports UTF-8 as a native encoding (I've never used it), but
> previous versions of Windows didn't.
>
> Duncan Murdoch
>
A unicode application is a program that uses the unicode API of Windows 
- the functions with the ending W. For such a application the system 
code page (native encoding) is completely irrelevant. The system code 
page is just a compatibility feature that enables Windows NT/Vista/7/8 
to run applications that were developed for Windows 95 which didn't have 
unicode support. But this line of operating systems is dead for 10 years 
now. R obviously is a unicode application because it can print - or read 
from the clipboard - characters like "???" that are not in my system 
code page which is not possible over the legacy API.

Neither the unicode API nor the legacy API accepts UTF-8. The legacy API 
needs strings encoded according to the active code page and the unicode 
API wants UTF-16. If you have UTF-8 you need to convert it in either to 
the active code page which will loose all characters that are not 
covered by it or convert to UTF-16 and use the unicode functions. But 
this is not the problem, the Windows interface functions of R are 
working quite nicely with unicode already.


From maillist at tlink.de  Fri Feb 27 00:55:25 2015
From: maillist at tlink.de (maillist at tlink.de)
Date: Fri, 27 Feb 2015 00:55:25 +0100
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <CAFOpNVGVrGwSAsR9JfZEtnC6SLO0mcDnd2wCA1ZR-fAcqz5Z2w@mail.gmail.com>
References: <54EF7D5F.8060305@tlink.de>
	<CAFOpNVGVrGwSAsR9JfZEtnC6SLO0mcDnd2wCA1ZR-fAcqz5Z2w@mail.gmail.com>
Message-ID: <54EFB26D.2050501@tlink.de>

Am 26.02.2015 um 23:44 schrieb Winston Chang:
> On Thu, Feb 26, 2015 at 2:09 PM, maillist at tlink.de 
> <mailto:maillist at tlink.de> <maillist at tlink.de 
> <mailto:maillist at tlink.de>> wrote:
>
>
>     When I send some outlandish characters through enc2native (or
>     format) in R 3.1.2 on Ubuntu trusty it works quite well:
>
>     > "?????"
>     [1] "?????"
>     > enc2native("?????")
>     [1] "?????"
>     > Encoding(enc2native("?????"))
>     [1] "UTF-8"
>
>     In Windows the result is different:
>
>     > "?????"
>     [1] "?????"
>     > enc2native("?????")
>     [1] "??<U+0394><U+040A><U+05EA>"
>     > Encoding(enc2native("?????"))
>     [1] "latin1"
>
>     And this is wrong. The native character set of a unicode
>     application under Windows is *Unicode*. enc2native should do the
>     same under Windows as it does on Ubuntu. Also the "unknown"
>     encoding should be changed to mean the same as "UTF-8" exactly as
>     it is on Linux.
>
>
> I think you're mixing up the term "character set" with the encoding 
> for a character set. Unicode is a character set. UTF-8 is one of many 
> encodings of Unicode.
>
> UTF-8 may be the native character encoding in Ubuntu, but it's not the 
> native encoding in Windows. According to this, what counts as the 
> native encoding in Windows depends on the code page:
> http://stackoverflow.com/a/4649507
>
> So you shouldn't expect enc2native to do the same thing on Linux and 
> Windows. If you really want UTF-8, you can use enc2utf8.
>
> -Winston

Maybe I'm expecting too much but I rather have R not to produce garbage 
like "??<U+0394><U+040A><U+05EA>" and while I can use enc2utf8 to 
convert from UTF-8 to UTF-8 this does not fix the many places - like 
"format" - where enc2native is used and that are broken because of this.



	[[alternative HTML version deleted]]


From saptarshi.guha at gmail.com  Fri Feb 27 01:20:48 2015
From: saptarshi.guha at gmail.com (Saptarshi Guha)
Date: Thu, 26 Feb 2015 16:20:48 -0800
Subject: [Rd] The Environment variables settings in bin/R,
 why do they ignore environment variables of the same name?
Message-ID: <CAJDot1p056a-Xb9DZ=HqVo4roUOhj_+AbLmh1C+j6bRJehMqxw@mail.gmail.com>

Hello,

In installation/R/bin/R i notice

1. R_HOME_DIR is hard coded e.g.
R_HOME_DIR=/usr/local/lib64/R

2. It ignores R_HOME_DIR

echo "WARNING: ignoring environment value of R_HOME"

3. R_SHARE_DIR, R_INCLUDE_DIR and R_DOC_DIR are also hard coded.

Is there a reason why these  settings do not read the values from the
environment variables of the same name (assuming they exist) and
defaulting to these hard coded values in case they dont?

Regards
Saptarshi


From Zwang at connecticutchildrens.org  Fri Feb 27 02:44:09 2015
From: Zwang at connecticutchildrens.org (Wang, Zhu)
Date: Fri, 27 Feb 2015 01:44:09 +0000
Subject: [Rd] static pdf vignette
Message-ID: <DABBA49CC8C7AA4B959D2D0FEE496D721C531D6A@EXINFRCHMB1P.ccmc.local>

Dear all,

In my package I have a computational expensive Rnw file which can't pass R CMD check. Therefore I set eval=FALSE in the Rnw file. But I would like to have the pdf vignette generated by the Rnw file with eval=TRUE. It seems to me a static pdf vignette is an option.  Any suggestions on this?

Thanks,

Zhu Wang


**Connecticut Children's Confidentiality Notice**

This e-mail message, including any attachments, is for t...{{dropped:11}}


From edd at debian.org  Fri Feb 27 03:05:14 2015
From: edd at debian.org (Dirk Eddelbuettel)
Date: Thu, 26 Feb 2015 20:05:14 -0600
Subject: [Rd] The Environment variables settings in bin/R,
 why do they ignore environment variables of the same name?
In-Reply-To: <CAJDot1p056a-Xb9DZ=HqVo4roUOhj_+AbLmh1C+j6bRJehMqxw@mail.gmail.com>
References: <CAJDot1p056a-Xb9DZ=HqVo4roUOhj_+AbLmh1C+j6bRJehMqxw@mail.gmail.com>
Message-ID: <21743.53466.15835.482874@max.nulle.part>


On 26 February 2015 at 16:20, Saptarshi Guha wrote:
| In installation/R/bin/R i notice
| 
| 1. R_HOME_DIR is hard coded e.g.
| R_HOME_DIR=/usr/local/lib64/R
| 
| 2. It ignores R_HOME_DIR
| 
| echo "WARNING: ignoring environment value of R_HOME"
| 
| 3. R_SHARE_DIR, R_INCLUDE_DIR and R_DOC_DIR are also hard coded.
| 
| Is there a reason why these  settings do not read the values from the
| environment variables of the same name (assuming they exist) and
| defaulting to these hard coded values in case they dont?

AFAICR you supposed to deal with this via $PATH and just pick one:

Ie with

  edd at max:~$ grep ^R_HOME_DIR /usr/lib/R/bin/R /usr/local/lib/R-devel/bin/R                                                                                                                                            
  /usr/lib/R/bin/R:R_HOME_DIR=/usr/lib/R
  /usr/local/lib/R-devel/bin/R:R_HOME_DIR=/usr/local/lib/R-devel/lib/R
  edd at max:~$ 

I get, respectively,

  edd at max:~$ R --version | head -1
  R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
  edd at max:~$ PATH="/usr/local/lib/R-devel/bin/:$PATH" R --version | head -1
  R Under development (unstable) (2015-02-22 r67876) -- "Unsuffered Consequences"
  edd at max:~$ 

and I have R-devel aliased to RD and R-devel in /usr/local/bin.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch.duncan at gmail.com  Fri Feb 27 03:13:48 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 26 Feb 2015 21:13:48 -0500
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54EFAD6B.7070901@tlink.de>
References: <54EF7D5F.8060305@tlink.de> <54EF9CC0.5040502@gmail.com>
	<54EFAD6B.7070901@tlink.de>
Message-ID: <54EFD2DC.6050204@gmail.com>

On 26/02/2015 6:34 PM, maillist at tlink.de wrote:
>> On 26/02/2015 3:09 PM, maillist at tlink.de wrote:
>>> When I send some outlandish characters through enc2native (or format) in
>>> R 3.1.2 on Ubuntu trusty it works quite well:
>>>
>>>   > "?????"
>>> [1] "?????"
>>>   > enc2native("?????")
>>> [1] "?????"
>>>   > Encoding(enc2native("?????"))
>>> [1] "UTF-8"
>>>
>>> In Windows the result is different:
>>>
>>>   > "?????"
>>> [1] "?????"
>>>   > enc2native("?????")
>>> [1] "??<U+0394><U+040A><U+05EA>"
>>>   > Encoding(enc2native("?????"))
>>> [1] "latin1"
>>>
>>> And this is wrong. The native character set of a unicode application
>>> under Windows is *Unicode*. enc2native should do the same under Windows
>>> as it does on Ubuntu. Also the "unknown" encoding should be changed to
>>> mean the same as "UTF-8" exactly as it is on Linux.
>> What is a "unicode application", and what makes you think R is one?  R
>> is being told by Windows that your native encoding is latin1.  Perhaps
>> Windows 8 supports UTF-8 as a native encoding (I've never used it), but
>> previous versions of Windows didn't.
>>
>> Duncan Murdoch
>>
> A unicode application is a program that uses the unicode API of Windows 

R uses those functions, so I guess it is a "unicode application".  But
internally it uses an 8 bit encoding (normally the native one for the
platform it is running on, which in your case is apparently latin1).

> - the functions with the ending W. For such a application the system 
> code page (native encoding) is completely irrelevant. The system code 
> page is just a compatibility feature that enables Windows NT/Vista/7/8 
> to run applications that were developed for Windows 95 which didn't have 
> unicode support. 

Windows 95 had UCS-2 support, which was pretty close to UTF-16.

But this line of operating systems is dead for 10 years
> now. R obviously is a unicode application because it can print - or read 
> from the clipboard - characters like "???" that are not in my system 
> code page which is not possible over the legacy API.

So "unicode application" is something you just made up.

If you use Windows development tools, they have macros to convert
generic functions to either A or W versions.  R doesn't use those.  It
calls the W functions when it has UTF-16 characters, and A functions
when it has native characters.  I would love it if R was a UTF-8
application, because it would make life so much simpler, but Windows
doesn't support that.  So R needs to do tons of conversions.  If you
don't like that, you probably need to stick with Ubuntu.

Duncan Murdoch

> 
> Neither the unicode API nor the legacy API accepts UTF-8. The legacy API 
> needs strings encoded according to the active code page and the unicode 
> API wants UTF-16. If you have UTF-8 you need to convert it in either to 
> the active code page which will loose all characters that are not 
> covered by it or convert to UTF-16 and use the unicode functions. But 
> this is not the problem, the Windows interface functions of R are 
> working quite nicely with unicode already.


> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From maillist at tlink.de  Fri Feb 27 08:31:38 2015
From: maillist at tlink.de (maillist at tlink.de)
Date: Fri, 27 Feb 2015 08:31:38 +0100
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54EFD2DC.6050204@gmail.com>
References: <54EF7D5F.8060305@tlink.de> <54EF9CC0.5040502@gmail.com>
	<54EFAD6B.7070901@tlink.de> <54EFD2DC.6050204@gmail.com>
Message-ID: <54F01D5A.1050201@tlink.de>

Am 27.02.2015 um 03:13 schrieb Duncan Murdoch:
> On 26/02/2015 6:34 PM, maillist at tlink.de wrote:
>>> On 26/02/2015 3:09 PM, maillist at tlink.de wrote:
>>>> When I send some outlandish characters through enc2native (or format) in
>>>> R 3.1.2 on Ubuntu trusty it works quite well:
>>>>
>>>>    > "?????"
>>>> [1] "?????"
>>>>    > enc2native("?????")
>>>> [1] "?????"
>>>>    > Encoding(enc2native("?????"))
>>>> [1] "UTF-8"
>>>>
>>>> In Windows the result is different:
>>>>
>>>>    > "?????"
>>>> [1] "?????"
>>>>    > enc2native("?????")
>>>> [1] "??<U+0394><U+040A><U+05EA>"
>>>>    > Encoding(enc2native("?????"))
>>>> [1] "latin1"
>>>>
>>>> And this is wrong. The native character set of a unicode application
>>>> under Windows is *Unicode*. enc2native should do the same under Windows
>>>> as it does on Ubuntu. Also the "unknown" encoding should be changed to
>>>> mean the same as "UTF-8" exactly as it is on Linux.
>>> What is a "unicode application", and what makes you think R is one?  R
>>> is being told by Windows that your native encoding is latin1.  Perhaps
>>> Windows 8 supports UTF-8 as a native encoding (I've never used it), but
>>> previous versions of Windows didn't.
>>>
>>> Duncan Murdoch
>>>
>> A unicode application is a program that uses the unicode API of Windows
> R uses those functions, so I guess it is a "unicode application".  But
> internally it uses an 8 bit encoding (normally the native one for the
> platform it is running on, which in your case is apparently latin1).
>
>> - the functions with the ending W. For such a application the system
>> code page (native encoding) is completely irrelevant. The system code
>> page is just a compatibility feature that enables Windows NT/Vista/7/8
>> to run applications that were developed for Windows 95 which didn't have
>> unicode support.
> Windows 95 had UCS-2 support, which was pretty close to UTF-16.
>
> But this line of operating systems is dead for 10 years
>> now. R obviously is a unicode application because it can print - or read
>> from the clipboard - characters like "???" that are not in my system
>> code page which is not possible over the legacy API.
> So "unicode application" is something you just made up.
>
> If you use Windows development tools, they have macros to convert
> generic functions to either A or W versions.  R doesn't use those.  It
> calls the W functions when it has UTF-16 characters, and A functions
> when it has native characters.  I would love it if R was a UTF-8
> application, because it would make life so much simpler, but Windows
> doesn't support that.  So R needs to do tons of conversions.  If you
> don't like that, you probably need to stick with Ubuntu.
>
> Duncan Murdoch
>

I am not complaining about those conversions. They work just fine 
already. I am complaining about
enc2native breaking things in the windows builds. An assignment like

s <- format("?????")

has no interaction with windows at all yet "s" contains garbage like  
"??<U+0394><U+040A><U+05EA>"
after that. And if a native encoding of UTF-8 - as defined by enc2native 
- works in Ubuntu why shouldn't it work
in Windows?


From pdalgd at gmail.com  Fri Feb 27 09:05:39 2015
From: pdalgd at gmail.com (peter dalgaard)
Date: Fri, 27 Feb 2015 09:05:39 +0100
Subject: [Rd] The Environment variables settings in bin/R,
	why do they ignore environment variables of the same name?
In-Reply-To: <CAJDot1p056a-Xb9DZ=HqVo4roUOhj_+AbLmh1C+j6bRJehMqxw@mail.gmail.com>
References: <CAJDot1p056a-Xb9DZ=HqVo4roUOhj_+AbLmh1C+j6bRJehMqxw@mail.gmail.com>
Message-ID: <7243EF4F-1C2E-446D-999F-F36BE3E44E16@gmail.com>


On 27 Feb 2015, at 01:20 , Saptarshi Guha <saptarshi.guha at gmail.com> wrote:

> Hello,
> 
> In installation/R/bin/R i notice
> 
> 1. R_HOME_DIR is hard coded e.g.
> R_HOME_DIR=/usr/local/lib64/R
> 
> 2. It ignores R_HOME_DIR
> 
> echo "WARNING: ignoring environment value of R_HOME"
> 
> 3. R_SHARE_DIR, R_INCLUDE_DIR and R_DOC_DIR are also hard coded.
> 
> Is there a reason why these  settings do not read the values from the
> environment variables of the same name (assuming they exist) and
> defaulting to these hard coded values in case they dont?

Yes. The R installation knows what the values should be and you do not. Especially if you have multiple version of R installed, you'd get yourself into a rotten mess otherwise.

As I recall it, this logic was introduced years ago after instances of people building (say) r-devel from source and finding that it wouldn't run, the reason being that it was looking for system files in the wrong place (and as the relevant contents of the $R_HOME subdirectories only changed rarely, people had been getting away with it for a long time until we "suddenly broke r-devel").

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch.duncan at gmail.com  Fri Feb 27 11:49:10 2015
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Fri, 27 Feb 2015 05:49:10 -0500
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54F01D5A.1050201@tlink.de>
References: <54EF7D5F.8060305@tlink.de>
	<54EF9CC0.5040502@gmail.com>	<54EFAD6B.7070901@tlink.de>
	<54EFD2DC.6050204@gmail.com> <54F01D5A.1050201@tlink.de>
Message-ID: <54F04BA6.6050907@gmail.com>

On 27/02/2015 2:31 AM, maillist at tlink.de wrote:
> Am 27.02.2015 um 03:13 schrieb Duncan Murdoch:
>> On 26/02/2015 6:34 PM, maillist at tlink.de wrote:
>>>> On 26/02/2015 3:09 PM, maillist at tlink.de wrote:
>>>>> When I send some outlandish characters through enc2native (or format) in
>>>>> R 3.1.2 on Ubuntu trusty it works quite well:
>>>>>
>>>>>    > "?????"
>>>>> [1] "?????"
>>>>>    > enc2native("?????")
>>>>> [1] "?????"
>>>>>    > Encoding(enc2native("?????"))
>>>>> [1] "UTF-8"
>>>>>
>>>>> In Windows the result is different:
>>>>>
>>>>>    > "?????"
>>>>> [1] "?????"
>>>>>    > enc2native("?????")
>>>>> [1] "??<U+0394><U+040A><U+05EA>"
>>>>>    > Encoding(enc2native("?????"))
>>>>> [1] "latin1"
>>>>>
>>>>> And this is wrong. The native character set of a unicode application
>>>>> under Windows is *Unicode*. enc2native should do the same under Windows
>>>>> as it does on Ubuntu. Also the "unknown" encoding should be changed to
>>>>> mean the same as "UTF-8" exactly as it is on Linux.
>>>> What is a "unicode application", and what makes you think R is one?  R
>>>> is being told by Windows that your native encoding is latin1.  Perhaps
>>>> Windows 8 supports UTF-8 as a native encoding (I've never used it), but
>>>> previous versions of Windows didn't.
>>>>
>>>> Duncan Murdoch
>>>>
>>> A unicode application is a program that uses the unicode API of Windows
>> R uses those functions, so I guess it is a "unicode application".  But
>> internally it uses an 8 bit encoding (normally the native one for the
>> platform it is running on, which in your case is apparently latin1).
>>
>>> - the functions with the ending W. For such a application the system
>>> code page (native encoding) is completely irrelevant. The system code
>>> page is just a compatibility feature that enables Windows NT/Vista/7/8
>>> to run applications that were developed for Windows 95 which didn't have
>>> unicode support.
>> Windows 95 had UCS-2 support, which was pretty close to UTF-16.
>>
>> But this line of operating systems is dead for 10 years
>>> now. R obviously is a unicode application because it can print - or read
>>> from the clipboard - characters like "???" that are not in my system
>>> code page which is not possible over the legacy API.
>> So "unicode application" is something you just made up.
>>
>> If you use Windows development tools, they have macros to convert
>> generic functions to either A or W versions.  R doesn't use those.  It
>> calls the W functions when it has UTF-16 characters, and A functions
>> when it has native characters.  I would love it if R was a UTF-8
>> application, because it would make life so much simpler, but Windows
>> doesn't support that.  So R needs to do tons of conversions.  If you
>> don't like that, you probably need to stick with Ubuntu.
>>
>> Duncan Murdoch
>>
> 
> I am not complaining about those conversions. They work just fine 
> already. I am complaining about
> enc2native breaking things in the windows builds. An assignment like
> 
> s <- format("?????")
> 
> has no interaction with windows at all yet "s" contains garbage like  
> "??<U+0394><U+040A><U+05EA>"
> after that. And if a native encoding of UTF-8 - as defined by enc2native 
> - works in Ubuntu why shouldn't it work
> in Windows?

Because in Ubuntu, UTF-8 is the native encoding, and in your Windows
system, latin1 is the native encoding.

But I do agree that the format() issue is a problem.  I haven't traced
through the code, but I think the string "?????" is read using Windows
API functions that return a UTF-16 result, then converted by R to UTF-8.
 So format() should see that it is a UTF-8 string and not convert it to
the native encoding.  There is nothing wrong with enc2native(), it's
doing what you asked for.  The problem is that format() is using it.

Duncan Murdoch


From kirill.mueller at ivt.baug.ethz.ch  Fri Feb 27 13:05:45 2015
From: kirill.mueller at ivt.baug.ethz.ch (=?windows-1252?Q?Kirill_M=FCller?=)
Date: Fri, 27 Feb 2015 13:05:45 +0100
Subject: [Rd] static pdf vignette
In-Reply-To: <DABBA49CC8C7AA4B959D2D0FEE496D721C531D6A@EXINFRCHMB1P.ccmc.local>
References: <DABBA49CC8C7AA4B959D2D0FEE496D721C531D6A@EXINFRCHMB1P.ccmc.local>
Message-ID: <54F05D99.4060706@ivt.baug.ethz.ch>

Perhaps the R.rsp package by Henrik Bengtsson [1,2] is an option.


Cheers

Kirill


[1] http://cran.r-project.org/web/packages/R.rsp/index.html
[2] https://github.com/HenrikBengtsson/R.rsp


On 27.02.2015 02:44, Wang, Zhu wrote:
> Dear all,
>
> In my package I have a computational expensive Rnw file which can't pass R CMD check. Therefore I set eval=FALSE in the Rnw file. But I would like to have the pdf vignette generated by the Rnw file with eval=TRUE. It seems to me a static pdf vignette is an option.  Any suggestions on this?
>
> Thanks,
>
> Zhu Wang
>
>
> **Connecticut Children's Confidentiality Notice**
>
> This e-mail message, including any attachments, is for...{{dropped:6}}


From maillist at tlink.de  Fri Feb 27 21:01:47 2015
From: maillist at tlink.de (maillist at tlink.de)
Date: Fri, 27 Feb 2015 21:01:47 +0100
Subject: [Rd] Native characterset is wrong for unicode builds for Windows
In-Reply-To: <54F04BA6.6050907@gmail.com>
References: <54EF7D5F.8060305@tlink.de>
	<54EF9CC0.5040502@gmail.com>	<54EFAD6B.7070901@tlink.de>
	<54EFD2DC.6050204@gmail.com> <54F01D5A.1050201@tlink.de>
	<54F04BA6.6050907@gmail.com>
Message-ID: <54F0CD2B.3020209@tlink.de>

Am 27.02.2015 um 11:49 schrieb Duncan Murdoch:
> On 27/02/2015 2:31 AM, maillist at tlink.de wrote:
>> Am 27.02.2015 um 03:13 schrieb Duncan Murdoch:
>>> On 26/02/2015 6:34 PM, maillist at tlink.de wrote:
>>>>> On 26/02/2015 3:09 PM, maillist at tlink.de wrote:
>>>>>> When I send some outlandish characters through enc2native (or format) in
>>>>>> R 3.1.2 on Ubuntu trusty it works quite well:
>>>>>>
>>>>>>     > "?????"
>>>>>> [1] "?????"
>>>>>>     > enc2native("?????")
>>>>>> [1] "?????"
>>>>>>     > Encoding(enc2native("?????"))
>>>>>> [1] "UTF-8"
>>>>>>
>>>>>> In Windows the result is different:
>>>>>>
>>>>>>     > "?????"
>>>>>> [1] "?????"
>>>>>>     > enc2native("?????")
>>>>>> [1] "??<U+0394><U+040A><U+05EA>"
>>>>>>     > Encoding(enc2native("?????"))
>>>>>> [1] "latin1"
>>>>>>
>>>>>> And this is wrong. The native character set of a unicode application
>>>>>> under Windows is *Unicode*. enc2native should do the same under Windows
>>>>>> as it does on Ubuntu. Also the "unknown" encoding should be changed to
>>>>>> mean the same as "UTF-8" exactly as it is on Linux.
>>>>> What is a "unicode application", and what makes you think R is one?  R
>>>>> is being told by Windows that your native encoding is latin1.  Perhaps
>>>>> Windows 8 supports UTF-8 as a native encoding (I've never used it), but
>>>>> previous versions of Windows didn't.
>>>>>
>>>>> Duncan Murdoch
>>>>>
>>>> A unicode application is a program that uses the unicode API of Windows
>>> R uses those functions, so I guess it is a "unicode application".  But
>>> internally it uses an 8 bit encoding (normally the native one for the
>>> platform it is running on, which in your case is apparently latin1).
>>>
>>>> - the functions with the ending W. For such a application the system
>>>> code page (native encoding) is completely irrelevant. The system code
>>>> page is just a compatibility feature that enables Windows NT/Vista/7/8
>>>> to run applications that were developed for Windows 95 which didn't have
>>>> unicode support.
>>> Windows 95 had UCS-2 support, which was pretty close to UTF-16.
>>>
>>> But this line of operating systems is dead for 10 years
>>>> now. R obviously is a unicode application because it can print - or read
>>>> from the clipboard - characters like "???" that are not in my system
>>>> code page which is not possible over the legacy API.
>>> So "unicode application" is something you just made up.
>>>
>>> If you use Windows development tools, they have macros to convert
>>> generic functions to either A or W versions.  R doesn't use those.  It
>>> calls the W functions when it has UTF-16 characters, and A functions
>>> when it has native characters.  I would love it if R was a UTF-8
>>> application, because it would make life so much simpler, but Windows
>>> doesn't support that.  So R needs to do tons of conversions.  If you
>>> don't like that, you probably need to stick with Ubuntu.
>>>
>>> Duncan Murdoch
>>>
>> I am not complaining about those conversions. They work just fine
>> already. I am complaining about
>> enc2native breaking things in the windows builds. An assignment like
>>
>> s <- format("?????")
>>
>> has no interaction with windows at all yet "s" contains garbage like
>> "??<U+0394><U+040A><U+05EA>"
>> after that. And if a native encoding of UTF-8 - as defined by enc2native
>> - works in Ubuntu why shouldn't it work
>> in Windows?
> Because in Ubuntu, UTF-8 is the native encoding, and in your Windows
> system, latin1 is the native encoding.
>
> But I do agree that the format() issue is a problem.  I haven't traced
> through the code, but I think the string "?????" is read using Windows
> API functions that return a UTF-16 result, then converted by R to UTF-8.
>   So format() should see that it is a UTF-8 string and not convert it to
> the native encoding.  There is nothing wrong with enc2native(), it's
> doing what you asked for.  The problem is that format() is using it.
>
> Duncan Murdoch

I would expect that every function that is using enc2native is broken in 
this respect because it invariably will scramble most unicode characters 
in the process and I can't think of a case where this could be wanted 
actually.
Functions that really need something other than UTF-8 are probably using 
iconv and getOption("encoding") anyway as this allows to specify the 
desired encoding much more flexible.


From hb at biostat.ucsf.edu  Fri Feb 27 22:53:09 2015
From: hb at biostat.ucsf.edu (Henrik Bengtsson)
Date: Fri, 27 Feb 2015 13:53:09 -0800
Subject: [Rd] static pdf vignette
In-Reply-To: <54F05D99.4060706@ivt.baug.ethz.ch>
References: <DABBA49CC8C7AA4B959D2D0FEE496D721C531D6A@EXINFRCHMB1P.ccmc.local>
	<54F05D99.4060706@ivt.baug.ethz.ch>
Message-ID: <CAFDcVCS0iZXB9fd5whZhoVRGMCZiePb0rL5L+ku=BB3OYb_qUA@mail.gmail.com>

On Fri, Feb 27, 2015 at 4:05 AM, Kirill M?ller
<kirill.mueller at ivt.baug.ethz.ch> wrote:
> Perhaps the R.rsp package by Henrik Bengtsson [1,2] is an option.
>
>
> Cheers
>
> Kirill
>
>
> [1] http://cran.r-project.org/web/packages/R.rsp/index.html
> [2] https://github.com/HenrikBengtsson/R.rsp

Yes, this use case is one of the rationale for providing the
R.rsp::asis vignette engine (and the R.rsp::tex one).  Just make sure
you try your best to provide the source in the *.tar.gz distribution,
which shouldn't be hard in this case since you're generating the PDF
from a (Sweave/knitr) vignette.  For instructions, see the R.rsp 'R
packages: Static PDF and HTML vignettes'.

Also, if it's not already clear, users who install your package do
*not* have to install vignette engine packages (here R.rsp), i.e.
you're not adding any overhead for them; it's only when you as a
package developer run 'R CMD build' that the vignette engine machinery
is needed.

/Henrik
(author of R.rsp)

>
>
> On 27.02.2015 02:44, Wang, Zhu wrote:
>>
>> Dear all,
>>
>> In my package I have a computational expensive Rnw file which can't pass R
>> CMD check. Therefore I set eval=FALSE in the Rnw file. But I would like to
>> have the pdf vignette generated by the Rnw file with eval=TRUE. It seems to
>> me a static pdf vignette is an option.  Any suggestions on this?
>>
>> Thanks,
>>
>> Zhu Wang
>>
>>
>> **Connecticut Children's Confidentiality Notice**
>>
>> This e-mail message, including any attachments, is for...{{dropped:6}}
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


