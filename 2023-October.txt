From kry|ov@r00t @end|ng |rom gm@||@com  Mon Oct  2 13:58:09 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 2 Oct 2023 14:58:09 +0300
Subject: [Rd] [R-pkg-devel] Problem with "compacting" pdf files.
In-Reply-To: <20231002100113.2ce1c902@rolf-Latitude-E7470>
References: <20231001211547.4c46512e@rolf-Latitude-E7470>
 <20231001152234.6bdd40ec@Tarkus>
 <20231002100113.2ce1c902@rolf-Latitude-E7470>
Message-ID: <20231002145809.41884ebc@arachnoid>

Dear Rolf,

(Moving this one to R-devel...)

On Sun,  1 Oct 2023 21:01:13 +0000
Rolf Turner <rolfturner at posteo.net> wrote:

> I *really* think that the instructions from CRAN could have been
> clearer!  Without your guidance I'd have been at a total loss.

Since the CRAN e-mails quote the R CMD check messages verbatim, would
it have been enough if R CMD check suggested using --compact-vignettes?

Index: src/library/tools/R/check.R
===================================================================
--- src/library/tools/R/check.R	(revision 85249)
+++ src/library/tools/R/check.R	(working copy)
@@ -3079,7 +3079,8 @@
                          "  'qpdf' made some significant size reductions:\n",
                          paste("  ", res, collapse = "\n"),
                          "\n",
-                         "  consider running tools::compactPDF() on these files\n")
+                         "  consider running tools::compactPDF() on these files,\n",
+                         "  or build the source package with --compact-vignettes\n")
             }
             if (R_check_doc_sizes2) {
                 gs_cmd <- find_gs_cmd()
@@ -3093,7 +3094,8 @@
                                  "  'gs+qpdf' made some significant size reductions:\n",
                                  paste("  ", res, collapse = "\n"),
                                  "\n",
-                                 '  consider running tools::compactPDF(gs_quality = "ebook") on these files\n')
+                                 '  consider running tools::compactPDF(gs_quality = "ebook") on these files,\n',
+                                 '  or build the source package with --compact-vignettes=both\n')
                     }
                 } else {
                     if (!any) noteLog(Log)

Or is there anything else you would prefer to be reworded? Should the
message link to Writing R Extensions, section 1.4? Recently there was a
project to improve the R CMD check messages [*], but I managed to miss
almost all of it.

-- 
Best regards,
Ivan

[*] https://github.com/r-devel/r-project-sprint-2023/issues/55


From net|kj@ @end|ng |rom gm@||@com  Mon Oct  2 17:18:19 2023
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Mon, 2 Oct 2023 17:18:19 +0200
Subject: [Rd] After package update, old S4 method is dispatched
Message-ID: <CA+6hu7ekxwdH55eSVs5-PxfCv75khNUURbHjT2rB_jLSrCNgZw@mail.gmail.com>

Hello R-devel,

I hope that you are all doing well and that this is the right place to
discuss my somewhat mysterious issue with S4.

On our Ubuntu server, we have "mirt" package installed which defines S4
method for "coef" standard generic. We updated the package with the usual
"install.packages", restarted, and observer error calling coef on mirt
object that should not be possible: "Error in which: argument "nfact" is
missing, with no default" (which has no such argument).

After days of investigation, I found that from mirt 1.37 to current 1.40,
the method changed as well as some internal functions used by the method.
The aforementioned error stems from the fact that these internal ordinary
functions were changed properly as we updated the package, but the S4
method dispatched stuck with the 1.37 version. I am by no means an expert
on S4 matter, but I know that these are cached to some extent. I thought
the cache is session-bound and have no idea how the issue can possibly
persist even after a complete reboot of the machine. I can detach and
library() mirt in one R session which solves the issue temporarily, but
emerges right back in any new R session.

Sadly, I cannot provide any reproducible example as I am completely unaware
of the cause and even I cannot reproduce this issue outside of the server.

Any insights on how this issue could have started would be highly
appreciated.

Best regards,
Jan Net?k

	[[alternative HTML version deleted]]


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Mon Oct  2 17:35:35 2023
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Mon, 2 Oct 2023 16:35:35 +0100
Subject: [Rd] [R-pkg-devel] Problem with "compacting" pdf files.
In-Reply-To: <20231002145809.41884ebc@arachnoid>
References: <20231001211547.4c46512e@rolf-Latitude-E7470>
 <20231001152234.6bdd40ec@Tarkus>
 <20231002100113.2ce1c902@rolf-Latitude-E7470>
 <20231002145809.41884ebc@arachnoid>
Message-ID: <e1d7b2d4-6cb8-28e2-8794-d34943a157b7@dewey.myzen.co.uk>

Dear Ivan

I was bitten by this recently but fortunately Rolf had beaten me to 
writing a question. The one thing which really surprised me is that the 
current message tells me how much space it would have saved if it had 
compressed the files in which case my immediate response was "Well, why 
didn't you compress them then?".

Thank you for your help on this.

Michael

On 02/10/2023 12:58, Ivan Krylov wrote:
> Dear Rolf,
> 
> (Moving this one to R-devel...)
> 
> On Sun,  1 Oct 2023 21:01:13 +0000
> Rolf Turner <rolfturner at posteo.net> wrote:
> 
>> I *really* think that the instructions from CRAN could have been
>> clearer!  Without your guidance I'd have been at a total loss.
> 
> Since the CRAN e-mails quote the R CMD check messages verbatim, would
> it have been enough if R CMD check suggested using --compact-vignettes?
> 
> Index: src/library/tools/R/check.R
> ===================================================================
> --- src/library/tools/R/check.R	(revision 85249)
> +++ src/library/tools/R/check.R	(working copy)
> @@ -3079,7 +3079,8 @@
>                            "  'qpdf' made some significant size reductions:\n",
>                            paste("  ", res, collapse = "\n"),
>                            "\n",
> -                         "  consider running tools::compactPDF() on these files\n")
> +                         "  consider running tools::compactPDF() on these files,\n",
> +                         "  or build the source package with --compact-vignettes\n")
>               }
>               if (R_check_doc_sizes2) {
>                   gs_cmd <- find_gs_cmd()
> @@ -3093,7 +3094,8 @@
>                                    "  'gs+qpdf' made some significant size reductions:\n",
>                                    paste("  ", res, collapse = "\n"),
>                                    "\n",
> -                                 '  consider running tools::compactPDF(gs_quality = "ebook") on these files\n')
> +                                 '  consider running tools::compactPDF(gs_quality = "ebook") on these files,\n',
> +                                 '  or build the source package with --compact-vignettes=both\n')
>                       }
>                   } else {
>                       if (!any) noteLog(Log)
> 
> Or is there anything else you would prefer to be reworded? Should the
> message link to Writing R Extensions, section 1.4? Recently there was a
> project to improve the R CMD check messages [*], but I managed to miss
> almost all of it.
> 

-- 
Michael


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Oct  2 20:53:52 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Oct 2023 14:53:52 -0400
Subject: [Rd] Problems caused by dev.off() behaviour
Message-ID: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>

I found some weird behaviour and reported it as
https://bugs.r-project.org/show_bug.cgi?id=18604 and
https://github.com/yihui/knitr/issues/2297, but it turns out it was user 
error.

The dev.off() function was behaving as documented, but it behaves in an 
unexpected (by me) way, and that caused the "bugs".

The issue is that

    dev.off()

doesn't always result in the previous graphics device being made 
current.  If there are two or more other open graphics devices, it won't 
choose the previous one, it will choose the next one.

I'm letting people know because this might affect other people too.  If 
you use dev.off(), don't assume it restores the previous device!

Here's my little workaround alternative:

   safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
     force(prev)
     dev.off(which)
     dev.set(prev)
   }

Use it just like dev.off(), but it *will* restore the previous device.

Duncan Murdoch


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Oct  2 20:56:26 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 3 Oct 2023 07:56:26 +1300
Subject: [Rd] After package update, old S4 method is dispatched
In-Reply-To: <CA+6hu7ekxwdH55eSVs5-PxfCv75khNUURbHjT2rB_jLSrCNgZw@mail.gmail.com>
References: <CA+6hu7ekxwdH55eSVs5-PxfCv75khNUURbHjT2rB_jLSrCNgZw@mail.gmail.com>
Message-ID: <32A80143-4755-4D96-822A-E386840E4438@R-project.org>

Jan,

have you re-installed all packages? If you change (update) any package that uses S4 it may be necessary to re-install all its reverse-dependencies as well since they may include cached values in their namespaces, so the easiest is to make sure you re-install all packages.

Cheers,
Simon


> On Oct 3, 2023, at 4:18 AM, Jan Net?k <netikja at gmail.com> wrote:
> 
> Hello R-devel,
> 
> I hope that you are all doing well and that this is the right place to
> discuss my somewhat mysterious issue with S4.
> 
> On our Ubuntu server, we have "mirt" package installed which defines S4
> method for "coef" standard generic. We updated the package with the usual
> "install.packages", restarted, and observer error calling coef on mirt
> object that should not be possible: "Error in which: argument "nfact" is
> missing, with no default" (which has no such argument).
> 
> After days of investigation, I found that from mirt 1.37 to current 1.40,
> the method changed as well as some internal functions used by the method.
> The aforementioned error stems from the fact that these internal ordinary
> functions were changed properly as we updated the package, but the S4
> method dispatched stuck with the 1.37 version. I am by no means an expert
> on S4 matter, but I know that these are cached to some extent. I thought
> the cache is session-bound and have no idea how the issue can possibly
> persist even after a complete reboot of the machine. I can detach and
> library() mirt in one R session which solves the issue temporarily, but
> emerges right back in any new R session.
> 
> Sadly, I cannot provide any reproducible example as I am completely unaware
> of the cause and even I cannot reproduce this issue outside of the server.
> 
> Any insights on how this issue could have started would be highly
> appreciated.
> 
> Best regards,
> Jan Net?k
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From d@v|@ @end|ng |rom po@|t@co  Mon Oct  2 21:01:41 2023
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Mon, 2 Oct 2023 15:01:41 -0400
Subject: [Rd] Should `expand.grid()` consistently drop `NULL` inputs?
Message-ID: <CABzLhzz11_7LyOUe3vzMN+rmkb7PS9cn4Yd7_LLdBihEK2QJsw@mail.gmail.com>

Hi all,

I noticed that `expand.grid()` has somewhat inconsistent behavior with
dropping `NULL` inputs. In particular, if there is a leading `NULL`,
then it ends up as a column in the resulting data frame, which seems
pretty undesirable. Also, notice in the last example that `Var3` is
used as the column name on the `NULL`, which is wrong.

I think the most consistent behavior would be to unconditionally drop
`NULL`s anywhere they appear (i.e. treat an `expand.grid()` call with
`NULL` inputs as semantically equivalent to the same call without
`NULL`s).

```
dropattrs <- function(x) {
  attributes(x) <- list(names = names(x))
  x
}

# `NULL` dropped
dropattrs(expand.grid(NULL))
#> named list()

# `NULL` dropped
dropattrs(expand.grid(1, NULL))
#> $Var1
#> numeric(0)

# Oh no! Leading `NULL` ends up in the data frame!
dropattrs(expand.grid(NULL, 1))
#> $Var2
#> NULL
#>
#> [[2]]
#> numeric(0)

# Oh no! This one does too!
dropattrs(expand.grid(1, NULL, 2))
#> $Var1
#> numeric(0)
#>
#> $Var3
#> NULL
#>
#> [[3]]
#> numeric(0)
```

Thanks,
Davis


From trevor@|@d@v|@ @end|ng |rom gm@||@com  Mon Oct  2 22:21:46 2023
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Mon, 2 Oct 2023 13:21:46 -0700
Subject: [Rd] Problems caused by dev.off() behaviour
In-Reply-To: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>
References: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>
Message-ID: <CAMigB8FWHaLWB1SvHi3Bw9dW9jkdHv1C-M3x4NSX0NnqjggyCg@mail.gmail.com>

> Use it just like dev.off(), but it *will* restore the previous device.

I'm observing that if there were no previously open graphics devices then
your `safe.dev.off()` opens up a new graphics device which may be an
undesired side effect (because "surprisingly" `dev.set()` on the null
graphics device opens up a new graphics device).  To avoid that you could
check if `dev.list()` is greater than length 1L:

   safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
     force(prev)
     dev.off(which)
     if (length(dev.list()) > 1L) {
       dev.set(prev)
     }
   }

Trevor

On Mon, Oct 2, 2023 at 11:54?AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> I found some weird behaviour and reported it as
> https://bugs.r-project.org/show_bug.cgi?id=18604 and
> https://github.com/yihui/knitr/issues/2297, but it turns out it was user
> error.
>
> The dev.off() function was behaving as documented, but it behaves in an
> unexpected (by me) way, and that caused the "bugs".
>
> The issue is that
>
>     dev.off()
>
> doesn't always result in the previous graphics device being made
> current.  If there are two or more other open graphics devices, it won't
> choose the previous one, it will choose the next one.
>
> I'm letting people know because this might affect other people too.  If
> you use dev.off(), don't assume it restores the previous device!
>
> Here's my little workaround alternative:
>
>    safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
>      force(prev)
>      dev.off(which)
>      dev.set(prev)
>    }
>
> Use it just like dev.off(), but it *will* restore the previous device.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Oct  3 02:25:57 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Oct 2023 20:25:57 -0400
Subject: [Rd] Problems caused by dev.off() behaviour
In-Reply-To: <CAMigB8FWHaLWB1SvHi3Bw9dW9jkdHv1C-M3x4NSX0NnqjggyCg@mail.gmail.com>
References: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>
 <CAMigB8FWHaLWB1SvHi3Bw9dW9jkdHv1C-M3x4NSX0NnqjggyCg@mail.gmail.com>
Message-ID: <d39b6d56-127d-4c5c-b7b7-e436372fa1ce@gmail.com>

Thanks!  However, isn't length(dev.list()) == 0 when there are no 
devices?  That's what I'm seeing on MacOS.

Duncan Murdoch

On 02/10/2023 4:21 p.m., Trevor Davis wrote:
>  > Use it just like dev.off(), but it *will* restore the previous device.
> 
> I'm observing that if there were no previously open graphics devices 
> then your `safe.dev.off()` opens up a new graphics device which may be 
> an undesired side effect (because "surprisingly" `dev.set()` on the null 
> graphics device opens up a new graphics device).? To avoid that you 
> could check if `dev.list()` is greater than length 1L:
> 
>  ?? safe.dev.off ?<- function(which = dev.cur(), prev = dev.prev()) {
>  ? ? ?force(prev)
>  ? ? ?dev.off(which)
>  ? ? ?if (length(dev.list()) > 1L) {
>  ? ? ? ?dev.set(prev)
>  ? ? ?}
>  ? ?}
> 
> Trevor
> 
> On Mon, Oct 2, 2023 at 11:54?AM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     I found some weird behaviour and reported it as
>     https://bugs.r-project.org/show_bug.cgi?id=18604
>     <https://bugs.r-project.org/show_bug.cgi?id=18604> and
>     https://github.com/yihui/knitr/issues/2297
>     <https://github.com/yihui/knitr/issues/2297>, but it turns out it
>     was user
>     error.
> 
>     The dev.off() function was behaving as documented, but it behaves in an
>     unexpected (by me) way, and that caused the "bugs".
> 
>     The issue is that
> 
>      ? ? dev.off()
> 
>     doesn't always result in the previous graphics device being made
>     current.? If there are two or more other open graphics devices, it
>     won't
>     choose the previous one, it will choose the next one.
> 
>     I'm letting people know because this might affect other people too.? If
>     you use dev.off(), don't assume it restores the previous device!
> 
>     Here's my little workaround alternative:
> 
>      ? ?safe.dev.off? <- function(which = dev.cur(), prev = dev.prev()) {
>      ? ? ?force(prev)
>      ? ? ?dev.off(which)
>      ? ? ?dev.set(prev)
>      ? ?}
> 
>     Use it just like dev.off(), but it *will* restore the previous device.
> 
>     Duncan Murdoch
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>


From trevor@|@d@v|@ @end|ng |rom gm@||@com  Tue Oct  3 04:17:09 2023
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Mon, 2 Oct 2023 19:17:09 -0700
Subject: [Rd] Problems caused by dev.off() behaviour
In-Reply-To: <d39b6d56-127d-4c5c-b7b7-e436372fa1ce@gmail.com>
References: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>
 <CAMigB8FWHaLWB1SvHi3Bw9dW9jkdHv1C-M3x4NSX0NnqjggyCg@mail.gmail.com>
 <d39b6d56-127d-4c5c-b7b7-e436372fa1ce@gmail.com>
Message-ID: <CAMigB8Ercw=i=ka-fOecK=O=rBb+Pqp1c_S0G2rCJQE8absYRw@mail.gmail.com>

> Thanks!  However, isn't length(dev.list()) == 0 when there are no
devices?  That's what I'm seeing on MacOS.

If there is only one graphics device then R should automatically set it as
the active graphics device so it isn't really necessary to manually set
it.  Although there wouldn't be any harm in manually setting it you only
really need to worry about setting the previous graphics device when there
are two or more devices open.

Trevor

On Mon, Oct 2, 2023 at 5:25?PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> Thanks!  However, isn't length(dev.list()) == 0 when there are no
> devices?  That's what I'm seeing on MacOS.
>
> Duncan Murdoch
>
> On 02/10/2023 4:21 p.m., Trevor Davis wrote:
> >  > Use it just like dev.off(), but it *will* restore the previous device.
> >
> > I'm observing that if there were no previously open graphics devices
> > then your `safe.dev.off()` opens up a new graphics device which may be
> > an undesired side effect (because "surprisingly" `dev.set()` on the null
> > graphics device opens up a new graphics device).  To avoid that you
> > could check if `dev.list()` is greater than length 1L:
> >
> >     safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
> >       force(prev)
> >       dev.off(which)
> >       if (length(dev.list()) > 1L) {
> >         dev.set(prev)
> >       }
> >     }
> >
> > Trevor
> >
> > On Mon, Oct 2, 2023 at 11:54?AM Duncan Murdoch <murdoch.duncan at gmail.com
> > <mailto:murdoch.duncan at gmail.com>> wrote:
> >
> >     I found some weird behaviour and reported it as
> >     https://bugs.r-project.org/show_bug.cgi?id=18604
> >     <https://bugs.r-project.org/show_bug.cgi?id=18604> and
> >     https://github.com/yihui/knitr/issues/2297
> >     <https://github.com/yihui/knitr/issues/2297>, but it turns out it
> >     was user
> >     error.
> >
> >     The dev.off() function was behaving as documented, but it behaves in
> an
> >     unexpected (by me) way, and that caused the "bugs".
> >
> >     The issue is that
> >
> >          dev.off()
> >
> >     doesn't always result in the previous graphics device being made
> >     current.  If there are two or more other open graphics devices, it
> >     won't
> >     choose the previous one, it will choose the next one.
> >
> >     I'm letting people know because this might affect other people too.
> If
> >     you use dev.off(), don't assume it restores the previous device!
> >
> >     Here's my little workaround alternative:
> >
> >         safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
> >           force(prev)
> >           dev.off(which)
> >           dev.set(prev)
> >         }
> >
> >     Use it just like dev.off(), but it *will* restore the previous
> device.
> >
> >     Duncan Murdoch
> >
> >     ______________________________________________
> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> >
>
>

	[[alternative HTML version deleted]]


From net|kj@ @end|ng |rom gm@||@com  Tue Oct  3 11:16:04 2023
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Tue, 3 Oct 2023 11:16:04 +0200
Subject: [Rd] After package update, old S4 method is dispatched
In-Reply-To: <32A80143-4755-4D96-822A-E386840E4438@R-project.org>
References: <CA+6hu7ekxwdH55eSVs5-PxfCv75khNUURbHjT2rB_jLSrCNgZw@mail.gmail.com>
 <32A80143-4755-4D96-822A-E386840E4438@R-project.org>
Message-ID: <CA+6hu7dRJeDySh=13NxiwMcuG_Kp6P_1qJfo-6nq8dCMD9Z+JQ@mail.gmail.com>

Simon,

Many thanks for your advice! The issue was that another package was
inheriting from the "mirt" class in question. Apparently, some methods are
cached at build time (is this documented anywhere?). After reinstalling the
package that extends the "mirt" class, the proper method is now being
dispatched. No other packages needed to be reinstalled.

Best,
Jan

po 2. 10. 2023 v 20:56 odes?latel Simon Urbanek <simon.urbanek at r-project.org>
napsal:

> Jan,
>
> have you re-installed all packages? If you change (update) any package
> that uses S4 it may be necessary to re-install all its reverse-dependencies
> as well since they may include cached values in their namespaces, so the
> easiest is to make sure you re-install all packages.
>
> Cheers,
> Simon
>
>
> > On Oct 3, 2023, at 4:18 AM, Jan Net?k <netikja at gmail.com> wrote:
> >
> > Hello R-devel,
> >
> > I hope that you are all doing well and that this is the right place to
> > discuss my somewhat mysterious issue with S4.
> >
> > On our Ubuntu server, we have "mirt" package installed which defines S4
> > method for "coef" standard generic. We updated the package with the usual
> > "install.packages", restarted, and observer error calling coef on mirt
> > object that should not be possible: "Error in which: argument "nfact" is
> > missing, with no default" (which has no such argument).
> >
> > After days of investigation, I found that from mirt 1.37 to current 1.40,
> > the method changed as well as some internal functions used by the method.
> > The aforementioned error stems from the fact that these internal ordinary
> > functions were changed properly as we updated the package, but the S4
> > method dispatched stuck with the 1.37 version. I am by no means an expert
> > on S4 matter, but I know that these are cached to some extent. I thought
> > the cache is session-bound and have no idea how the issue can possibly
> > persist even after a complete reboot of the machine. I can detach and
> > library() mirt in one R session which solves the issue temporarily, but
> > emerges right back in any new R session.
> >
> > Sadly, I cannot provide any reproducible example as I am completely
> unaware
> > of the cause and even I cannot reproduce this issue outside of the
> server.
> >
> > Any insights on how this issue could have started would be highly
> > appreciated.
> >
> > Best regards,
> > Jan Net?k
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Oct  3 11:16:58 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 3 Oct 2023 05:16:58 -0400
Subject: [Rd] Problems caused by dev.off() behaviour
In-Reply-To: <CAMigB8Ercw=i=ka-fOecK=O=rBb+Pqp1c_S0G2rCJQE8absYRw@mail.gmail.com>
References: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>
 <CAMigB8FWHaLWB1SvHi3Bw9dW9jkdHv1C-M3x4NSX0NnqjggyCg@mail.gmail.com>
 <d39b6d56-127d-4c5c-b7b7-e436372fa1ce@gmail.com>
 <CAMigB8Ercw=i=ka-fOecK=O=rBb+Pqp1c_S0G2rCJQE8absYRw@mail.gmail.com>
Message-ID: <eddcab9a-4144-485f-8a0f-77c83e986490@gmail.com>

On 02/10/2023 10:17 p.m., Trevor Davis wrote:
>  > Thanks!? However, isn't length(dev.list()) == 0 when there are no
> devices?? That's what I'm seeing on MacOS.
> 
> Ifthere is only one graphics device then R should automatically set it 
> as the active graphics device so it isn't really necessary to manually 
> set it.? Although there wouldn't be any harm in manually setting it you 
> only really need to worry about setting the previous graphics device 
> when there are two or more devices open.

Right, I see.  With some more fiddling, I've decided that I don't like 
the error you get if you try to close device 1, so here's the current 
version:

safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
   if (which != 1) {
     force(prev)
     grDevices::dev.off(which)
   }
   if (length(dev.list()))
     dev.set(prev)
   else
     c("null device" = 1)
}

This does the dev.set even if there's only one device so it can return 
the resulting device number.

Duncan Murdoch

> 
> Trevor
> 
> On Mon, Oct 2, 2023 at 5:25?PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     Thanks!? However, isn't length(dev.list()) == 0 when there are no
>     devices?? That's what I'm seeing on MacOS.
> 
>     Duncan Murdoch
> 
>     On 02/10/2023 4:21 p.m., Trevor Davis wrote:
>      >? > Use it just like dev.off(), but it *will* restore the previous
>     device.
>      >
>      > I'm observing that if there were no previously open graphics devices
>      > then your `safe.dev.off()` opens up a new graphics device which
>     may be
>      > an undesired side effect (because "surprisingly" `dev.set()` on
>     the null
>      > graphics device opens up a new graphics device).? To avoid that you
>      > could check if `dev.list()` is greater than length 1L:
>      >
>      >? ?? safe.dev.off ?<- function(which = dev.cur(), prev = dev.prev()) {
>      >? ? ? ?force(prev)
>      >? ? ? ?dev.off(which)
>      >? ? ? ?if (length(dev.list()) > 1L) {
>      >? ? ? ? ?dev.set(prev)
>      >? ? ? ?}
>      >? ? ?}
>      >
>      > Trevor
>      >
>      > On Mon, Oct 2, 2023 at 11:54?AM Duncan Murdoch
>     <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>
>      > <mailto:murdoch.duncan at gmail.com
>     <mailto:murdoch.duncan at gmail.com>>> wrote:
>      >
>      >? ? ?I found some weird behaviour and reported it as
>      > https://bugs.r-project.org/show_bug.cgi?id=18604
>     <https://bugs.r-project.org/show_bug.cgi?id=18604>
>      >? ? ?<https://bugs.r-project.org/show_bug.cgi?id=18604
>     <https://bugs.r-project.org/show_bug.cgi?id=18604>> and
>      > https://github.com/yihui/knitr/issues/2297
>     <https://github.com/yihui/knitr/issues/2297>
>      >? ? ?<https://github.com/yihui/knitr/issues/2297
>     <https://github.com/yihui/knitr/issues/2297>>, but it turns out it
>      >? ? ?was user
>      >? ? ?error.
>      >
>      >? ? ?The dev.off() function was behaving as documented, but it
>     behaves in an
>      >? ? ?unexpected (by me) way, and that caused the "bugs".
>      >
>      >? ? ?The issue is that
>      >
>      >? ? ? ? ? dev.off()
>      >
>      >? ? ?doesn't always result in the previous graphics device being made
>      >? ? ?current.? If there are two or more other open graphics
>     devices, it
>      >? ? ?won't
>      >? ? ?choose the previous one, it will choose the next one.
>      >
>      >? ? ?I'm letting people know because this might affect other
>     people too.? If
>      >? ? ?you use dev.off(), don't assume it restores the previous device!
>      >
>      >? ? ?Here's my little workaround alternative:
>      >
>      >? ? ? ? ?safe.dev.off? <- function(which = dev.cur(), prev =
>     dev.prev()) {
>      >? ? ? ? ? ?force(prev)
>      >? ? ? ? ? ?dev.off(which)
>      >? ? ? ? ? ?dev.set(prev)
>      >? ? ? ? ?}
>      >
>      >? ? ?Use it just like dev.off(), but it *will* restore the
>     previous device.
>      >
>      >? ? ?Duncan Murdoch
>      >
>      >? ? ?______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org>
>     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>     mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>      >? ? ?<https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>>
>      >
>


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Oct  3 15:20:41 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 3 Oct 2023 16:20:41 +0300
Subject: [Rd] [External]  On PRINTNAME() encoding, EncodeChar(),
 and being painted into a corner
In-Reply-To: <f357e53a-304e-c61f-8edb-759fda4c052@uiowa.edu>
References: <20230919003356.13a97d6e@Tarkus>
 <f357e53a-304e-c61f-8edb-759fda4c052@uiowa.edu>
Message-ID: <20231003162041.33c2c803@arachnoid>

Dear Luke Tierney,

Thank you for the reply and apologies for not getting back to you
earlier.

On Fri, 22 Sep 2023 16:14:58 -0500 (CDT)
luke-tierney at uiowa.edu wrote:

> I think it would be best to modify errorcall so errorcall_cpy is not
> necessary. As things are now it is just too easy to forget that
> sometimes errorcall_cpy should be used (and this has lead to some bugs
> recently).

At the end of this e-mail is a large patch that makes errorcall() and
warningcall() safer by processing the format arguments before calling
any R APIs. It's fairly invasive because it rewires all error() /
warning() / errorcall() / warningcall() processing into two common
subroutines that call R_vsnprintf() as soon as possible and keep a
single message buffer afterwards. It passes make check-devel. I am open
to other, less invasive ways to implement this change.

Additionally, I fixed a problem detected by a static analyser: given
unsigned msg_len, max(msg_len - strlen(head), 0) can only be 0 if
msg_len == strlen(head). That's because both msg_len and size_t end up
being promoted to unsigned in order to compute the subtraction. I
couldn't come up with a sufficiently laconic alternative, so I left the
ternary operator in for now.

>> The only solution to the latter problem is an EncodeChar() variant
>> that allocates its memory dynamically. Would R_alloc() be
>> acceptable in this context? With errors, the allocation stack would
>> be quickly reset (except when withCallingHandlers() is in effect?),
>> but with warnings, the code would have to restore it manually every
>> time.  
> 
> Or allow/require a buffer to be provided. So replacing the calls like
> 
>     CHAR(PRINTNAME(sym))
> 
> with
> 
>     EncodeSymbol(sym, buf, buf_size)

I can also implement this. Does this mean replacing every occasion of
EncodeChar(PRINTNAME(sym)) with EncodeSymbol(sym, <temporary>, sizeof
<temporary>)?

Index: src/main/envir.c
===================================================================
--- src/main/envir.c	(revision 85251)
+++ src/main/envir.c	(working copy)
@@ -1582,7 +1582,7 @@
 	}
 	rho = ENCLOS(rho);
     }
-    errorcall_cpy(call,
+    errorcall(call,
                   _("could not find function \"%s\""),
                   EncodeChar(PRINTNAME(symbol)));
     /* NOT REACHED */
@@ -3924,7 +3924,7 @@
     SEXP nsname = PROTECT(callR1(R_getNamespaceNameSymbol, ns));
     if (TYPEOF(nsname) != STRSXP || LENGTH(nsname) != 1)
 	errorcall(call, "bad value returned by `getNamespaceName'");
-    errorcall_cpy(call,
+    errorcall(call,
 		  _("'%s' is not an exported object from 'namespace:%s'"),
 		  EncodeChar(PRINTNAME(name)),
 		  CHAR(STRING_ELT(nsname, 0)));
Index: src/main/errors.c
===================================================================
--- src/main/errors.c	(revision 85251)
+++ src/main/errors.c	(working copy)
@@ -58,7 +58,7 @@
 /*
 Different values of inError are used to indicate different places
 in the error handling:
-inError = 1: In internal error handling, e.g. `verrorcall_dflt`, others.
+inError = 1: In internal error handling, e.g. `errorcall_dflt`, others.
 inError = 2: Writing traceback
 inError = 3: In user error handler (i.e. options(error=handler))
 */
@@ -387,32 +387,45 @@
 	return c ? c->call : R_NilValue;
 }
 
-void warning(const char *format, ...)
+/* declarations for internal condition handling */
+
+static void signalError(SEXP call, const char *msg);
+static void signalWarning(SEXP call, const char *msg);
+NORET static void invokeRestart(SEXP, SEXP);
+
+static void impl_vwarning(SEXP call, Rboolean immediate, const char *format, va_list ap)
 {
     char buf[BUFSIZE], *p;
 
-    va_list(ap);
-    va_start(ap, format);
     size_t psize;
     int pval;
 
     psize = min(BUFSIZE, R_WarnLength+1);
     pval = Rvsnprintf_mbcs(buf, psize, format, ap);
-    va_end(ap);
     p = buf + strlen(buf) - 1;
     if(strlen(buf) > 0 && *p == '\n') *p = '\0';
     RprintTrunc(buf, pval >= psize);
-    SEXP call = PROTECT(getCurrentCall());
-    warningcall(call, "%s", buf);
-    UNPROTECT(1);
+
+    // must not call into R before stringifying the format arguments
+    int nprotect = 0;
+    if (!call) {
+	call = PROTECT(getCurrentCall());
+	++nprotect;
+    }
+    if (immediate) immediateWarning = 1;
+    signalWarning(call, buf);
+    if (immediate) immediateWarning = 0;
+    UNPROTECT(nprotect);
 }
 
-/* declarations for internal condition handling */
+void warning(const char *format, ...)
+{
+    va_list(ap);
+    va_start(ap, format);
+    impl_vwarning(NULL, FALSE, format, ap);
+    va_end(ap);
+}
 
-static void vsignalError(SEXP call, const char *format, va_list ap);
-static void vsignalWarning(SEXP call, const char *format, va_list ap);
-NORET static void invokeRestart(SEXP, SEXP);
-
 static void reset_inWarning(void *data)
 {
     inWarning = 0;
@@ -437,12 +450,11 @@
     return nc;
 }
 
-static void vwarningcall_dflt(SEXP call, const char *format, va_list ap)
+static void warningcall_dflt(SEXP call, const char *msg)
 {
     int w;
     SEXP names, s;
     const char *dcall;
-    char buf[BUFSIZE];
     RCNTXT *cptr;
     RCNTXT cntxt;
     size_t psize;
@@ -480,11 +492,8 @@
     inWarning = 1;
 
     if(w >= 2) { /* make it an error */
-	psize = min(BUFSIZE, R_WarnLength+1);
-	pval = Rvsnprintf_mbcs(buf, psize, format, ap);
-	RprintTrunc(buf, pval >= psize);
 	inWarning = 0; /* PR#1570 */
-	errorcall(call, _("(converted from warning) %s"), buf);
+	errorcall(call, _("(converted from warning) %s"), msg);
     }
     else if(w == 1) {	/* print as they happen */
 	char *tr;
@@ -492,18 +501,16 @@
 	    dcall = CHAR(STRING_ELT(deparse1s(call), 0));
 	} else dcall = "";
 	psize = min(BUFSIZE, R_WarnLength+1);
-	pval = Rvsnprintf_mbcs(buf, psize, format, ap);
-	RprintTrunc(buf, pval >= psize);
 
 	if(dcall[0] == '\0') REprintf(_("Warning:"));
 	else {
 	    REprintf(_("Warning in %s :"), dcall);
 	    if(!(noBreakWarning ||
-		 ( mbcslocale && 18 + wd(dcall) + wd(buf) <= LONGWARN) ||
-		 (!mbcslocale && 18 + strlen(dcall) + strlen(buf) <= LONGWARN)))
+		 ( mbcslocale && 18 + wd(dcall) + wd(msg) <= LONGWARN) ||
+		 (!mbcslocale && 18 + strlen(dcall) + strlen(msg) <= LONGWARN)))
 		REprintf("\n ");
 	}
-	REprintf(" %s\n", buf);
+	REprintf(" %s\n", msg);
 	if(R_ShowWarnCalls && call != R_NilValue) {
 	    tr = R_ConciseTraceback(call, 0);
 	    if (strlen(tr)) {REprintf(_("Calls:")); REprintf(" %s\n", tr);}
@@ -512,10 +519,11 @@
     else if(w == 0) {	/* collect them */
 	if(!R_CollectWarnings) setupwarnings();
 	if(R_CollectWarnings < R_nwarnings) {
+	    char buf[BUFSIZE];
 	    SET_VECTOR_ELT(R_Warnings, R_CollectWarnings, call);
 	    psize = min(BUFSIZE, R_WarnLength+1);
-	    pval = Rvsnprintf_mbcs(buf, psize, format, ap);
-	    RprintTrunc(buf, pval >= psize);
+	    Rstrncpy(buf, msg, psize);
+	    RprintTrunc(buf, strlen(msg) >= psize);
 	    if(R_ShowWarnCalls && call != R_NilValue) {
 		char *tr =  R_ConciseTraceback(call, 0);
 		size_t nc = strlen(tr);
@@ -535,20 +543,12 @@
     inWarning = 0;
 }
 
-static void warningcall_dflt(SEXP call, const char *format,...)
-{
-    va_list(ap);
 
-    va_start(ap, format);
-    vwarningcall_dflt(call, format, ap);
-    va_end(ap);
-}
-
 void warningcall(SEXP call, const char *format, ...)
 {
     va_list(ap);
     va_start(ap, format);
-    vsignalWarning(call, format, ap);
+    impl_vwarning(call, FALSE, format, ap);
     va_end(ap);
 }
 
@@ -555,12 +555,9 @@
 void warningcall_immediate(SEXP call, const char *format, ...)
 {
     va_list(ap);
-
-    immediateWarning = 1;
     va_start(ap, format);
-    vsignalWarning(call, format, ap);
+    impl_vwarning(call, TRUE, format, ap);
     va_end(ap);
-    immediateWarning = 0;
 }
 
 static void cleanup_PrintWarnings(void *data)
@@ -741,7 +738,7 @@
 /* Construct newline terminated error message, write it to global errbuf, and
    possibly display with REprintf. */
 NORET static void
-verrorcall_dflt(SEXP call, const char *format, va_list ap)
+errorcall_dflt(SEXP call, const char *msg)
 {
     if (allowedConstsChecks > 0) {
 	allowedConstsChecks--;
@@ -758,7 +755,7 @@
 	    REprintf(_("Error during wrapup: "));
 	    /* this does NOT try to print the call since that could
 	       cause a cascade of error calls */
-	    Rvsnprintf_mbcs(errbuf, sizeof(errbuf), format, ap);
+	    Rstrncpy(errbuf, msg, sizeof(errbuf));
 	    REprintf("%s\n", errbuf);
 	}
 	if (R_Warnings != R_NilValue) {
@@ -801,7 +798,7 @@
 	}
 
 	const char *dcall = CHAR(STRING_ELT(deparse1s(call), 0));
-	Rsnprintf_mbcs(tmp2, BUFSIZE,  "%s", head);
+	Rstrncpy(tmp2, head, BUFSIZE);
 	if (skip != NA_INTEGER) {
 	    PROTECT(srcloc = GetSrcLoc(R_GetCurrentSrcref(skip)));
 	    protected++;
@@ -811,7 +808,7 @@
 			       dcall, CHAR(STRING_ELT(srcloc, 0)));
 	}
 
-	Rvsnprintf_mbcs(tmp, max(msg_len - strlen(head), 0), format, ap);
+	Rstrncpy(tmp, msg, msg_len > strlen(head) ? msg_len - strlen(head) : 0);
 	if (strlen(tmp2) + strlen(tail) + strlen(tmp) < BUFSIZE) {
 	    if(len) Rsnprintf_mbcs(errbuf, BUFSIZE,
 				   _("Error in %s (from %s) : "),
@@ -839,15 +836,15 @@
 	    }
 	    ERRBUFCAT(tmp);
 	} else {
-	    Rsnprintf_mbcs(errbuf, BUFSIZE, _("Error: "));
+	    Rstrncpy(errbuf, _("Error: "), BUFSIZE);
 	    ERRBUFCAT(tmp);
 	}
 	UNPROTECT(protected);
     }
     else {
-	Rsnprintf_mbcs(errbuf, BUFSIZE, _("Error: "));
+	Rstrncpy(errbuf, _("Error: "), BUFSIZE);
 	p = errbuf + strlen(errbuf);
-	Rvsnprintf_mbcs(p, max(msg_len - strlen(errbuf), 0), format, ap);
+	Rstrncpy(p, msg, msg_len > strlen(errbuf) ? msg_len - strlen(errbuf) : 0);
     }
     /* Approximate truncation detection, may produce false positives.  Assumes
        R_MB_CUR_MAX > 0. Note: approximation is fine, as the string may include
@@ -892,55 +889,44 @@
     inError = oldInError;
 }
 
-NORET static void errorcall_dflt(SEXP call, const char *format,...)
-{
-    va_list(ap);
+NORET static void do_verrorcall(SEXP call, const char *format, va_list ap) {
+    // must be careful to process the format arguments before calling into R
+    char buf[BUFSIZE];
+    Rvsnprintf_mbcs(buf, min(BUFSIZE, R_WarnLength), format, ap);
 
-    va_start(ap, format);
-    verrorcall_dflt(call, format, ap);
-    va_end(ap);
-}
-
-NORET void errorcall(SEXP call, const char *format,...)
-{
-    va_list(ap);
-
     if (call == R_CurrentExpression)
 	/* behave like error( */
 	call = getCurrentCall();
 
-    va_start(ap, format);
-    vsignalError(call, format, ap);
-    va_end(ap);
+    signalError(call, buf);
 
     if (R_ErrorHook != NULL) {
-	char buf[BUFSIZE];
 	void (*hook)(SEXP, char *) = R_ErrorHook;
 	R_ErrorHook = NULL; /* to avoid recursion */
-	va_start(ap, format);
-	Rvsnprintf_mbcs(buf, min(BUFSIZE, R_WarnLength), format, ap);
-	va_end(ap);
 	hook(call, buf);
     }
 
+    errorcall_dflt(call, buf);
+}
+
+NORET void errorcall(SEXP call, const char *format,...)
+{
+    va_list(ap);
     va_start(ap, format);
-    verrorcall_dflt(call, format, ap);
+    do_verrorcall(call, format, ap);
     va_end(ap);
 }
 
-/* Like errorcall, but copies all data for the error message into a buffer
-   before doing anything else. */
-attribute_hidden
-NORET void errorcall_cpy(SEXP call, const char *format, ...)
+void error(const char *format, ...)
 {
-    char buf[BUFSIZE];
-
     va_list(ap);
     va_start(ap, format);
-    Rvsnprintf_mbcs(buf, BUFSIZE, format, ap);
+    /* R_CurrentExpression will be processed as if it was getCurrentCall(), but
+       not before stringifying the format arguments. It's important to process
+       the format arguments first because calling into R may invalidate some of
+       the pointers (e.g. those returned by EncodeChar()). */
+    do_verrorcall(R_CurrentExpression, format, ap);
     va_end(ap);
-
-    errorcall(call, "%s", buf);
 }
 
 // geterrmessage(): Return (the global) 'errbuf' as R string
@@ -953,17 +939,6 @@
     return res;
 }
 
-void error(const char *format, ...)
-{
-    char buf[BUFSIZE];
-
-    va_list(ap);
-    va_start(ap, format);
-    Rvsnprintf_mbcs(buf, min(BUFSIZE, R_WarnLength), format, ap);
-    va_end(ap);
-    errorcall(getCurrentCall(), "%s", buf);
-}
-
 static void try_jump_to_restart(void)
 {
     SEXP list;
@@ -1834,9 +1809,8 @@
     return R_NilValue;
 }
 
-static void vsignalWarning(SEXP call, const char *format, va_list ap)
+static void signalWarning(SEXP call, const char *msg)
 {
-    char buf[BUFSIZE];
     SEXP hooksym, hcall, qcall, qfun;
 
     hooksym = install(".signalSimpleWarning");
@@ -1846,13 +1820,12 @@
 	PROTECT(qfun);
 	PROTECT(qcall = LCONS(qfun, LCONS(call, R_NilValue)));
 	PROTECT(hcall = LCONS(qcall, R_NilValue));
-	Rvsnprintf_mbcs(buf, BUFSIZE - 1, format, ap);
-	hcall = LCONS(mkString(buf), hcall);
+	hcall = LCONS(mkString(msg), hcall);
 	PROTECT(hcall = LCONS(hooksym, hcall));
 	evalKeepVis(hcall, R_GlobalEnv);
 	UNPROTECT(4);
     }
-    else vwarningcall_dflt(call, format, ap);
+    else warningcall_dflt(call, msg);
 }
 
 NORET static void gotoExitingHandler(SEXP cond, SEXP call, SEXP entry)
@@ -1865,20 +1838,18 @@
     findcontext(CTXT_FUNCTION, rho, result);
 }
 
-static void vsignalError(SEXP call, const char *format, va_list ap)
+static void signalError(SEXP call, const char *msg)
 {
     /* This function does not protect or restore the old handler
        stack. On return R_HandlerStack will be R_NilValue (unless
        R_RestartToken is encountered). */
-    char localbuf[BUFSIZE];
     SEXP list;
 
-    Rvsnprintf_mbcs(localbuf, BUFSIZE - 1, format, ap);
     while ((list = findSimpleErrorHandler()) != R_NilValue) {
 	char *buf = errbuf;
 	SEXP entry = CAR(list);
 	R_HandlerStack = CDR(list);
-	Rstrncpy(buf, localbuf, BUFSIZE);
+	Rstrncpy(buf, msg, BUFSIZE);
 	/*	Rvsnprintf(buf, BUFSIZE - 1, format, ap);*/
 	if (IS_CALLING_ENTRY(entry)) {
 	    if (ENTRY_HANDLER(entry) == R_RestartToken) {
@@ -1950,7 +1921,7 @@
 		if (TYPEOF(msg) == STRSXP && LENGTH(msg) > 0)
 		    msgstr = translateChar(STRING_ELT(msg, 0));
 		else error(_("error message not a string"));
-		errorcall_dflt(ecall, "%s", msgstr);
+		errorcall_dflt(ecall, msgstr);
 	    }
 	    else {
 		SEXP hcall = LCONS(h, LCONS(cond, R_NilValue));
@@ -2075,7 +2046,7 @@
     const char *msg = translateChar(STRING_ELT(CAR(args), 0));
     SEXP ecall = CADR(args);
 
-    warningcall_dflt(ecall, "%s", msg);
+    warningcall_dflt(ecall, msg);
     return R_NilValue;
 }
 
@@ -2088,7 +2059,7 @@
     const char *msg = translateChar(STRING_ELT(CAR(args), 0));
     SEXP ecall = CADR(args);
 
-    errorcall_dflt(ecall, "%s", msg);
+    errorcall_dflt(ecall, msg);
 }
 
 
Index: src/main/eval.c
===================================================================
--- src/main/eval.c	(revision 85251)
+++ src/main/eval.c	(working copy)
@@ -1153,7 +1153,7 @@
 	else
 	    tmp = findVar(e, rho);
 	if (tmp == R_UnboundValue)
-	    errorcall_cpy(getLexicalCall(rho),
+	    errorcall(getLexicalCall(rho),
 			  _("object '%s' not found"),
 			  EncodeChar(PRINTNAME(e)));
 	/* if ..d is missing then ddfindVar will signal */
@@ -3473,7 +3473,7 @@
 	       code more consistent. */
 	} else if (isSymbol(CAR(el)) && R_isMissing(CAR(el), rho)) {
 	    /* It was missing */
-	    errorcall_cpy(call,
+	    errorcall(call,
 	                  _("'%s' is missing"),
 	                  EncodeChar(PRINTNAME(CAR(el))));
 #endif
@@ -5574,7 +5574,7 @@
 
 NORET static void UNBOUND_VARIABLE_ERROR(SEXP symbol, SEXP rho)
 {
-    errorcall_cpy(getLexicalCall(rho),
+    errorcall(getLexicalCall(rho),
 		  _("object '%s' not found"),
 		  EncodeChar(PRINTNAME(symbol)));
 }
Index: src/main/printutils.c
===================================================================
--- src/main/printutils.c	(revision 85251)
+++ src/main/printutils.c	(working copy)
@@ -879,9 +879,7 @@
    The pointer returned by EncodeChar points into an internal buffer
    which is overwritten by subsequent calls to EncodeChar/EncodeString.
    It is the responsibility of the caller to copy the result before
-   any subsequent call to EncodeChar/EncodeString may happen. Note that
-   particularly it is NOT safe to pass the result of EncodeChar as 3rd
-   argument to errorcall (errorcall_cpy can be used instead). */
+   any subsequent call to EncodeChar/EncodeString may happen. */
 //attribute_hidden
 const char *EncodeChar(SEXP x)
 {


-- 
Best regards,
Ivan


From rkoenker @end|ng |rom ||||no|@@edu  Tue Oct  3 18:50:55 2023
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Tue, 3 Oct 2023 16:50:55 +0000
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
Message-ID: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>

I?ve been getting this warning for a while now (about five years if memory serves) and I?m finally tired of it, but also too tired to track it down in Matrix.  As far as I can grep  I have no reference to either deprecated object, only the apparently innocuous  Matrix::Matrix(A, sparse = TRUE).  Can someone advise, Martin perhaps?  I thought it might come from Rmosek, but mosek folks don?t think so.
https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ

All the best to all the best of the R community,
R

From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Oct  3 18:59:10 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 3 Oct 2023 12:59:10 -0400
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
References: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
Message-ID: <ced49291-44da-4aa7-b8ca-ecf92eb23aa1@gmail.com>

On 03/10/2023 12:50 p.m., Koenker, Roger W wrote:
> I?ve been getting this warning for a while now (about five years if memory serves) and I?m finally tired of it, but also too tired to track it down in Matrix.  As far as I can grep  I have no reference to either deprecated object, only the apparently innocuous  Matrix::Matrix(A, sparse = TRUE).  Can someone advise, Martin perhaps?  I thought it might come from Rmosek, but mosek folks don?t think so.
> https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ

A quick scan of that discussion didn't turn up anything relevant, e.g. a 
script to produce the warning.  Could you be more specific, or just post 
the script here?

In general, a good way to locate the source of a warning is to set 
options(warn=2) to turn it into an error, and then trigger it.  The 
traceback from the error will include a bunch of junk from the code that 
catches the warning, but it will also include the context where it was 
triggered.

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Oct  3 19:17:33 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 3 Oct 2023 19:17:33 +0200
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <ced49291-44da-4aa7-b8ca-ecf92eb23aa1@gmail.com>
References: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
 <ced49291-44da-4aa7-b8ca-ecf92eb23aa1@gmail.com>
Message-ID: <25884.19629.134610.492469@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Tue, 3 Oct 2023 12:59:10 -0400 writes:

    > On 03/10/2023 12:50 p.m., Koenker, Roger W wrote:
    >> I?ve been getting this warning for a while now (about
    >> five years if memory serves) and I?m finally tired of it,
    >> but also too tired to track it down in Matrix.  As far as
    >> I can grep I have no reference to either deprecated
    >> object, only the apparently innocuous Matrix::Matrix(A,
    >> sparse = TRUE).  Can someone advise, Martin perhaps?  I
    >> thought it might come from Rmosek, but mosek folks don?t
    >> think so.
    >> https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ

    > A quick scan of that discussion didn't turn up anything
    > relevant, e.g. a script to produce the warning.  Could you
    > be more specific, or just post the script here?

    > In general, a good way to locate the source of a warning
    > is to set options(warn=2) to turn it into an error, and
    > then trigger it.  The traceback from the error will
    > include a bunch of junk from the code that catches the
    > warning, but it will also include the context where it was
    > triggered.

    > Duncan Murdoch

Indeed.

But Roger is right that it in the end, (almost surely) it is
from our {Matrix} package.

Indeed for several years now, we have tried to make the setup
leaner (and hence faster) by not explicitly define coercion
from <everything> to <everything>  because  the size of
<everything> is here about 200, and we don't want to have to provide
200^2 = 40'000  coercion methods.

Rather, Matrix package users should use to high level abstract Matrix
classes such as "sparseMatrix" or "CsparseMatrix" or
"TsparseMatrix" or "dMatrix", "symmetricMatrix".

In the case of  as(<dgCMatrix>, "dgTMatrix") , if you
replace "dgTMatrix" by "TsparseMatrix"
the result will be the same but also work in the future when the
deprecation may have been turned into a defunctation ...

Martin


From rkoenker @end|ng |rom ||||no|@@edu  Tue Oct  3 21:31:46 2023
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Tue, 3 Oct 2023 19:31:46 +0000
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <25884.19629.134610.492469@stat.math.ethz.ch>
References: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
 <ced49291-44da-4aa7-b8ca-ecf92eb23aa1@gmail.com>
 <25884.19629.134610.492469@stat.math.ethz.ch>
Message-ID: <8BEB8D85-2BC4-4CC7-B783-754688A51B39@illinois.edu>

There is a call to mosek and I assumed that this wasn?t going to be helpful for most R-devel recipients.  I tried Duncan?s very reasonable suggestion about options() but it didn?t produce the desired error, so perhaps this isn?t really a warning  but something else???

For those who might have rmosek installed,  I?m doing:

library(REBayes)
demo(GLmix1)

Thanks,
Roger


> On Oct 3, 2023, at 6:17 PM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Duncan Murdoch 
>>>>>>    on Tue, 3 Oct 2023 12:59:10 -0400 writes:
> 
>> On 03/10/2023 12:50 p.m., Koenker, Roger W wrote:
>>> I?ve been getting this warning for a while now (about
>>> five years if memory serves) and I?m finally tired of it,
>>> but also too tired to track it down in Matrix.  As far as
>>> I can grep I have no reference to either deprecated
>>> object, only the apparently innocuous Matrix::Matrix(A,
>>> sparse = TRUE).  Can someone advise, Martin perhaps?  I
>>> thought it might come from Rmosek, but mosek folks don?t
>>> think so.
>>> https://urldefense.com/v3/__https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ__;!!DZ3fjg!71re8ipw9fFStkMab0wGuPNSzSaAhPI5vwxd1BCQ7a55mYiRpAq2prn9-wREqKL_G2uBYboXISQfxZYCZ9AFxCnwxdzqTw$ 
> 
>> A quick scan of that discussion didn't turn up anything
>> relevant, e.g. a script to produce the warning.  Could you
>> be more specific, or just post the script here?
> 
>> In general, a good way to locate the source of a warning
>> is to set options(warn=2) to turn it into an error, and
>> then trigger it.  The traceback from the error will
>> include a bunch of junk from the code that catches the
>> warning, but it will also include the context where it was
>> triggered.
> 
>> Duncan Murdoch
> 
> Indeed.
> 
> But Roger is right that it in the end, (almost surely) it is
> from our {Matrix} package.
> 
> Indeed for several years now, we have tried to make the setup
> leaner (and hence faster) by not explicitly define coercion
> from <everything> to <everything>  because  the size of
> <everything> is here about 200, and we don't want to have to provide
> 200^2 = 40'000  coercion methods.
> 
> Rather, Matrix package users should use to high level abstract Matrix
> classes such as "sparseMatrix" or "CsparseMatrix" or
> "TsparseMatrix" or "dMatrix", "symmetricMatrix".
> 
> In the case of  as(<dgCMatrix>, "dgTMatrix") , if you
> replace "dgTMatrix" by "TsparseMatrix"
> the result will be the same but also work in the future when the
> deprecation may have been turned into a defunctation ...
> 
> Martin



From kry|ov@r00t @end|ng |rom gm@||@com  Tue Oct  3 21:47:56 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 3 Oct 2023 22:47:56 +0300
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
References: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
Message-ID: <20231003224756.6d325751@Tarkus>

On Tue, 3 Oct 2023 16:50:55 +0000
"Koenker, Roger W" <rkoenker at illinois.edu> wrote:

>  I thought it might come from Rmosek, but mosek folks don?t think so.

I downloaded the Rmosek source package using

download.packages(
 'Rmosek', '.',
 repos='https://download.mosek.com/R/10.1'
)

...and there are the deprecated calls:


Rmosek/R$ grep -C2 -r as\(.*dgT
toCSCMatrix.R-  }
toCSCMatrix.R-  else if (is(obj,"dgCMatrix")) {
toCSCMatrix.R:    obj <- as(obj,"dgTMatrix")
toCSCMatrix.R-  }
toCSCMatrix.R-  else if (is(obj,"list") && setequal(names(obj),c("i","j","v","ncol","nrow"))) {
--
toCSCMatrix.R-                         x=obj[['v']],
toCSCMatrix.R-                         dims=c(obj[['nrow']], obj[['ncol']]) )
toCSCMatrix.R:    obj <- as(tmp, "dgTMatrix")
toCSCMatrix.R-  }
toCSCMatrix.R-  else if (canCoerce(obj,"dgTMatrix")) {
toCSCMatrix.R-    # Assume coercion is meaningful, and that
toCSCMatrix.R-    # users are aware of computational overhead.
toCSCMatrix.R:    obj <- as(obj,"dgTMatrix")
toCSCMatrix.R-  }
toCSCMatrix.R-  else {


-- 
Best regards,
Ivan


From @v|@e@gro@@ @end|ng |rom gm@||@com  Tue Oct  3 21:54:57 2023
From: @v|@e@gro@@ @end|ng |rom gm@||@com (Avi Gross)
Date: Tue, 3 Oct 2023 15:54:57 -0400
Subject: [Rd] Problems caused by dev.off() behaviour
In-Reply-To: <eddcab9a-4144-485f-8a0f-77c83e986490@gmail.com>
References: <affab490-cd9f-46e7-ab9f-37a4b13d2557@gmail.com>
 <CAMigB8FWHaLWB1SvHi3Bw9dW9jkdHv1C-M3x4NSX0NnqjggyCg@mail.gmail.com>
 <d39b6d56-127d-4c5c-b7b7-e436372fa1ce@gmail.com>
 <CAMigB8Ercw=i=ka-fOecK=O=rBb+Pqp1c_S0G2rCJQE8absYRw@mail.gmail.com>
 <eddcab9a-4144-485f-8a0f-77c83e986490@gmail.com>
Message-ID: <CABaFrRYfbz0WRJHg7hcZ7aUKS1yCxB5vmY6Yn+Ugn8TXsghpuw@mail.gmail.com>

Just pointing out that if you do not want to SEE an error message that is
otherwise harmless, one option in R is to let the error happen but arrange
to deal with it in some way including just suppressing the message.

On Tue, Oct 3, 2023, 5:27 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 02/10/2023 10:17 p.m., Trevor Davis wrote:
> >  > Thanks!  However, isn't length(dev.list()) == 0 when there are no
> > devices?  That's what I'm seeing on MacOS.
> >
> > Ifthere is only one graphics device then R should automatically set it
> > as the active graphics device so it isn't really necessary to manually
> > set it.  Although there wouldn't be any harm in manually setting it you
> > only really need to worry about setting the previous graphics device
> > when there are two or more devices open.
>
> Right, I see.  With some more fiddling, I've decided that I don't like
> the error you get if you try to close device 1, so here's the current
> version:
>
> safe.dev.off  <- function(which = dev.cur(), prev = dev.prev()) {
>    if (which != 1) {
>      force(prev)
>      grDevices::dev.off(which)
>    }
>    if (length(dev.list()))
>      dev.set(prev)
>    else
>      c("null device" = 1)
> }
>
> This does the dev.set even if there's only one device so it can return
> the resulting device number.
>
> Duncan Murdoch
>
> >
> > Trevor
> >
> > On Mon, Oct 2, 2023 at 5:25?PM Duncan Murdoch <murdoch.duncan at gmail.com
> > <mailto:murdoch.duncan at gmail.com>> wrote:
> >
> >     Thanks!  However, isn't length(dev.list()) == 0 when there are no
> >     devices?  That's what I'm seeing on MacOS.
> >
> >     Duncan Murdoch
> >
> >     On 02/10/2023 4:21 p.m., Trevor Davis wrote:
> >      >  > Use it just like dev.off(), but it *will* restore the previous
> >     device.
> >      >
> >      > I'm observing that if there were no previously open graphics
> devices
> >      > then your `safe.dev.off()` opens up a new graphics device which
> >     may be
> >      > an undesired side effect (because "surprisingly" `dev.set()` on
> >     the null
> >      > graphics device opens up a new graphics device).  To avoid that
> you
> >      > could check if `dev.list()` is greater than length 1L:
> >      >
> >      >     safe.dev.off  <- function(which = dev.cur(), prev =
> dev.prev()) {
> >      >       force(prev)
> >      >       dev.off(which)
> >      >       if (length(dev.list()) > 1L) {
> >      >         dev.set(prev)
> >      >       }
> >      >     }
> >      >
> >      > Trevor
> >      >
> >      > On Mon, Oct 2, 2023 at 11:54?AM Duncan Murdoch
> >     <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>
> >      > <mailto:murdoch.duncan at gmail.com
> >     <mailto:murdoch.duncan at gmail.com>>> wrote:
> >      >
> >      >     I found some weird behaviour and reported it as
> >      > https://bugs.r-project.org/show_bug.cgi?id=18604
> >     <https://bugs.r-project.org/show_bug.cgi?id=18604>
> >      >     <https://bugs.r-project.org/show_bug.cgi?id=18604
> >     <https://bugs.r-project.org/show_bug.cgi?id=18604>> and
> >      > https://github.com/yihui/knitr/issues/2297
> >     <https://github.com/yihui/knitr/issues/2297>
> >      >     <https://github.com/yihui/knitr/issues/2297
> >     <https://github.com/yihui/knitr/issues/2297>>, but it turns out it
> >      >     was user
> >      >     error.
> >      >
> >      >     The dev.off() function was behaving as documented, but it
> >     behaves in an
> >      >     unexpected (by me) way, and that caused the "bugs".
> >      >
> >      >     The issue is that
> >      >
> >      >          dev.off()
> >      >
> >      >     doesn't always result in the previous graphics device being
> made
> >      >     current.  If there are two or more other open graphics
> >     devices, it
> >      >     won't
> >      >     choose the previous one, it will choose the next one.
> >      >
> >      >     I'm letting people know because this might affect other
> >     people too.  If
> >      >     you use dev.off(), don't assume it restores the previous
> device!
> >      >
> >      >     Here's my little workaround alternative:
> >      >
> >      >         safe.dev.off  <- function(which = dev.cur(), prev =
> >     dev.prev()) {
> >      >           force(prev)
> >      >           dev.off(which)
> >      >           dev.set(prev)
> >      >         }
> >      >
> >      >     Use it just like dev.off(), but it *will* restore the
> >     previous device.
> >      >
> >      >     Duncan Murdoch
> >      >
> >      >     ______________________________________________
> >      > R-devel at r-project.org <mailto:R-devel at r-project.org>
> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
> >     mailing list
> >      > https://stat.ethz.ch/mailman/listinfo/r-devel
> >     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> >      >     <https://stat.ethz.ch/mailman/listinfo/r-devel
> >     <https://stat.ethz.ch/mailman/listinfo/r-devel>>
> >      >
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From rkoenker @end|ng |rom ||||no|@@edu  Wed Oct  4 10:01:45 2023
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Wed, 4 Oct 2023 08:01:45 +0000
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <20231003224756.6d325751@Tarkus>
References: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
 <20231003224756.6d325751@Tarkus>
Message-ID: <B80F10D8-7590-4BAE-8FB1-21D306CA1822@illinois.edu>

Thanks, Ivan, I should have had the initiative to do this myself.  I?ve now written to the Mosek folks in the hope that they will update this in Rmosek.

Best
Roger

> On Oct 3, 2023, at 8:47 PM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Tue, 3 Oct 2023 16:50:55 +0000
> "Koenker, Roger W" <rkoenker at illinois.edu> wrote:
> 
>> I thought it might come from Rmosek, but mosek folks don?t think so.
> 
> I downloaded the Rmosek source package using
> 
> download.packages(
> 'Rmosek', '.',
> repos='https://urldefense.com/v3/__https://download.mosek.com/R/10.1__;!!DZ3fjg!-J68cgVdf_vRXm7yhSxSNzoDv6i6681nySXG9qhE808C3UTKTWGNCfZEWchGfsh2FZbBpQJuWa8Tr8_mo3f2xFo$ '
> )
> 
> ...and there are the deprecated calls:
> 
> 
> Rmosek/R$ grep -C2 -r as\(.*dgT
> toCSCMatrix.R-  }
> toCSCMatrix.R-  else if (is(obj,"dgCMatrix")) {
> toCSCMatrix.R:    obj <- as(obj,"dgTMatrix")
> toCSCMatrix.R-  }
> toCSCMatrix.R-  else if (is(obj,"list") && setequal(names(obj),c("i","j","v","ncol","nrow"))) {
> --
> toCSCMatrix.R-                         x=obj[['v']],
> toCSCMatrix.R-                         dims=c(obj[['nrow']], obj[['ncol']]) )
> toCSCMatrix.R:    obj <- as(tmp, "dgTMatrix")
> toCSCMatrix.R-  }
> toCSCMatrix.R-  else if (canCoerce(obj,"dgTMatrix")) {
> toCSCMatrix.R-    # Assume coercion is meaningful, and that
> toCSCMatrix.R-    # users are aware of computational overhead.
> toCSCMatrix.R:    obj <- as(obj,"dgTMatrix")
> toCSCMatrix.R-  }
> toCSCMatrix.R-  else {
> 
> 
> -- 
> Best regards,
> Ivan


From j@g@nmn2 @end|ng |rom gm@||@com  Wed Oct  4 10:57:00 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Wed, 4 Oct 2023 04:57:00 -0400
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <8BEB8D85-2BC4-4CC7-B783-754688A51B39@illinois.edu>
References: <8BEB8D85-2BC4-4CC7-B783-754688A51B39@illinois.edu>
Message-ID: <9cfd5e5c-c28d-4984-8ad2-5133b05d280a@gmail.com>

 > There is a call to mosek and I assumed that this wasn?t going to be helpful 
for most R-devel recipients.  I tried Duncan?s very reasonable suggestion about 
options() but it didn?t produce the desired error, so perhaps this isn?t really 
a warning  but something else???
 >

The details are described in news(package="Matrix") under "Changes in version
1.5-0" and implemented in Matrix:::Matrix.DeprecatedCoerce.  That version was
released in Sep 2022.

At the time, it was too disruptive to signal a proper deprecation warning
with every as(., "d(g.|.C)Matrix") call, for every reverse dependency of
Matrix, so we decided that in those most common cases we would use message()
instead of warning().   A corollary was that options(warn=n) would not have
the usual effect, so we advertised an alternative to affected maintainers:

     in R:

         options(Matrix.warnDeprecatedCoerce=n)

     on the command line:

         R_MATRIX_WARN_DEPRECATED_COERCE=n R CMD check *.tar.gz

But maybe it is time to begin signaling warnings unconditionally ...

Mikael

 > For those who might have rmosek installed,  I?m doing:
 >
 > library(REBayes)
 > demo(GLmix1)
 >
 > Thanks,
 > Roger
 >
 >
 > > On Oct 3, 2023, at 6:17 PM, Martin Maechler <maechler using 
stat.math.ethz.ch> wrote:
 > >
 > >>>>>> Duncan Murdoch
 > >>>>>>    on Tue, 3 Oct 2023 12:59:10 -0400 writes:
 > >
 > >> On 03/10/2023 12:50 p.m., Koenker, Roger W wrote:
 > >>> I?ve been getting this warning for a while now (about
 > >>> five years if memory serves) and I?m finally tired of it,
 > >>> but also too tired to track it down in Matrix.  As far as
 > >>> I can grep I have no reference to either deprecated
 > >>> object, only the apparently innocuous Matrix::Matrix(A,
 > >>> sparse = TRUE).  Can someone advise, Martin perhaps?  I
 > >>> thought it might come from Rmosek, but mosek folks don?t
 > >>> think so.
 > >>> 
https://urldefense.com/v3/__https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ__;!!DZ3fjg!71re8ipw9fFStkMab0wGuPNSzSaAhPI5vwxd1BCQ7a55mYiRpAq2prn9-wREqKL_G2uBYboXISQfxZYCZ9AFxCnwxdzqTw$ 

 > >
 > >> A quick scan of that discussion didn't turn up anything
 > >> relevant, e.g. a script to produce the warning.  Could you
 > >> be more specific, or just post the script here?
 > >
 > >> In general, a good way to locate the source of a warning
 > >> is to set options(warn=2) to turn it into an error, and
 > >> then trigger it.  The traceback from the error will
 > >> include a bunch of junk from the code that catches the
 > >> warning, but it will also include the context where it was
 > >> triggered.
 > >
 > >> Duncan Murdoch
 > >
 > > Indeed.
 > >
 > > But Roger is right that it in the end, (almost surely) it is
 > > from our {Matrix} package.
 > >
 > > Indeed for several years now, we have tried to make the setup
 > > leaner (and hence faster) by not explicitly define coercion
 > > from <everything> to <everything>  because  the size of
 > > <everything> is here about 200, and we don't want to have to provide
 > > 200^2 = 40'000  coercion methods.
 > >
 > > Rather, Matrix package users should use to high level abstract Matrix
 > > classes such as "sparseMatrix" or "CsparseMatrix" or
 > > "TsparseMatrix" or "dMatrix", "symmetricMatrix".
 > >
 > > In the case of  as(<dgCMatrix>, "dgTMatrix") , if you
 > > replace "dgTMatrix" by "TsparseMatrix"
 > > the result will be the same but also work in the future when the
 > > deprecation may have been turned into a defunctation ...
 > >
 > > Martin


From rkoenker @end|ng |rom ||||no|@@edu  Wed Oct  4 11:07:28 2023
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Wed, 4 Oct 2023 09:07:28 +0000
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <9cfd5e5c-c28d-4984-8ad2-5133b05d280a@gmail.com>
References: <8BEB8D85-2BC4-4CC7-B783-754688A51B39@illinois.edu>
 <9cfd5e5c-c28d-4984-8ad2-5133b05d280a@gmail.com>
Message-ID: <20A539FF-268A-4154-8C01-E415CC956A96@illinois.edu>

thanks, good to know, although at my age this is the sort of knowledge that has a very short half-life. ;-)

R


> On Oct 4, 2023, at 9:57 AM, Mikael Jagan <jaganmn2 at gmail.com> wrote:
> 
> > There is a call to mosek and I assumed that this wasn?t going to be helpful for most R-devel recipients.  I tried Duncan?s very reasonable suggestion about options() but it didn?t produce the desired error, so perhaps this isn?t really a warning  but something else???
> >
> 
> The details are described in news(package="Matrix") under "Changes in version
> 1.5-0" and implemented in Matrix:::Matrix.DeprecatedCoerce.  That version was
> released in Sep 2022.
> 
> At the time, it was too disruptive to signal a proper deprecation warning
> with every as(., "d(g.|.C)Matrix") call, for every reverse dependency of
> Matrix, so we decided that in those most common cases we would use message()
> instead of warning().   A corollary was that options(warn=n) would not have
> the usual effect, so we advertised an alternative to affected maintainers:
> 
>    in R:
> 
>        options(Matrix.warnDeprecatedCoerce=n)
> 
>    on the command line:
> 
>        R_MATRIX_WARN_DEPRECATED_COERCE=n R CMD check *.tar.gz
> 
> But maybe it is time to begin signaling warnings unconditionally ...
> 
> Mikael
> 
> > For those who might have rmosek installed,  I?m doing:
> >
> > library(REBayes)
> > demo(GLmix1)
> >
> > Thanks,
> > Roger
> >
> >
> > > On Oct 3, 2023, at 6:17 PM, Martin Maechler <maechler using stat.math.ethz.ch> wrote:
> > >
> > >>>>>> Duncan Murdoch
> > >>>>>>    on Tue, 3 Oct 2023 12:59:10 -0400 writes:
> > >
> > >> On 03/10/2023 12:50 p.m., Koenker, Roger W wrote:
> > >>> I?ve been getting this warning for a while now (about
> > >>> five years if memory serves) and I?m finally tired of it,
> > >>> but also too tired to track it down in Matrix.  As far as
> > >>> I can grep I have no reference to either deprecated
> > >>> object, only the apparently innocuous Matrix::Matrix(A,
> > >>> sparse = TRUE).  Can someone advise, Martin perhaps?  I
> > >>> thought it might come from Rmosek, but mosek folks don?t
> > >>> think so.
> > >>> https://urldefense.com/v3/__https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ__;!!DZ3fjg!71re8ipw9fFStkMab0wGuPNSzSaAhPI5vwxd1BCQ7a55mYiRpAq2prn9-wREqKL_G2uBYboXISQfxZYCZ9AFxCnwxdzqTw$ 
> > >
> > >> A quick scan of that discussion didn't turn up anything
> > >> relevant, e.g. a script to produce the warning.  Could you
> > >> be more specific, or just post the script here?
> > >
> > >> In general, a good way to locate the source of a warning
> > >> is to set options(warn=2) to turn it into an error, and
> > >> then trigger it.  The traceback from the error will
> > >> include a bunch of junk from the code that catches the
> > >> warning, but it will also include the context where it was
> > >> triggered.
> > >
> > >> Duncan Murdoch
> > >
> > > Indeed.
> > >
> > > But Roger is right that it in the end, (almost surely) it is
> > > from our {Matrix} package.
> > >
> > > Indeed for several years now, we have tried to make the setup
> > > leaner (and hence faster) by not explicitly define coercion
> > > from <everything> to <everything>  because  the size of
> > > <everything> is here about 200, and we don't want to have to provide
> > > 200^2 = 40'000  coercion methods.
> > >
> > > Rather, Matrix package users should use to high level abstract Matrix
> > > classes such as "sparseMatrix" or "CsparseMatrix" or
> > > "TsparseMatrix" or "dMatrix", "symmetricMatrix".
> > >
> > > In the case of  as(<dgCMatrix>, "dgTMatrix") , if you
> > > replace "dgTMatrix" by "TsparseMatrix"
> > > the result will be the same but also work in the future when the
> > > deprecation may have been turned into a defunctation ...
> > >
> > > Martin


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Wed Oct  4 19:12:31 2023
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 4 Oct 2023 10:12:31 -0700
Subject: [Rd] as(<dgCMatrix>, "dgTMatrix")' is deprecated.
In-Reply-To: <25884.19629.134610.492469@stat.math.ethz.ch>
References: <9C686E75-C639-41FA-8276-E008FD58E5D7@illinois.edu>
 <ced49291-44da-4aa7-b8ca-ecf92eb23aa1@gmail.com>
 <25884.19629.134610.492469@stat.math.ethz.ch>
Message-ID: <5f119e41-c227-f582-d7fe-2a43f94e204c@gmail.com>

Hi Martin,

On 10/3/23 10:17, Martin Maechler wrote:
>>>>>> Duncan Murdoch
>>>>>>      on Tue, 3 Oct 2023 12:59:10 -0400 writes:
>      > On 03/10/2023 12:50 p.m., Koenker, Roger W wrote:
>      >> I?ve been getting this warning for a while now (about
>      >> five years if memory serves) and I?m finally tired of it,
>      >> but also too tired to track it down in Matrix.  As far as
>      >> I can grep I have no reference to either deprecated
>      >> object, only the apparently innocuous Matrix::Matrix(A,
>      >> sparse = TRUE).  Can someone advise, Martin perhaps?  I
>      >> thought it might come from Rmosek, but mosek folks don?t
>      >> think so.
>      >>https://groups.google.com/g/mosek/c/yEwXmMfHBbg/m/l_mkeM4vAAAJ
>
>      > A quick scan of that discussion didn't turn up anything
>      > relevant, e.g. a script to produce the warning.  Could you
>      > be more specific, or just post the script here?
>
>      > In general, a good way to locate the source of a warning
>      > is to set options(warn=2) to turn it into an error, and
>      > then trigger it.  The traceback from the error will
>      > include a bunch of junk from the code that catches the
>      > warning, but it will also include the context where it was
>      > triggered.
>
>      > Duncan Murdoch
>
> Indeed.
>
> But Roger is right that it in the end, (almost surely) it is
> from our {Matrix} package.
>
> Indeed for several years now, we have tried to make the setup
> leaner (and hence faster) by not explicitly define coercion
> from <everything> to <everything>  because  the size of
> <everything> is here about 200, and we don't want to have to provide
> 200^2 = 40'000  coercion methods.

40,000 coercion methods sounds indeed crazy. But have you considered 
having 200 coercions from ANY to <everything>?

For example the coercion from ANY to dgTMatrix would do as(as(as(from, 
"dMatrix"), "generalMatrix"), "TsparseMatrix").

Maybe the ANY->xyzMatrix methods could even be generated programmatically?

Best,

H.

>
> Rather, Matrix package users should use to high level abstract Matrix
> classes such as "sparseMatrix" or "CsparseMatrix" or
> "TsparseMatrix" or "dMatrix", "symmetricMatrix".
>
> In the case of  as(<dgCMatrix>, "dgTMatrix") , if you
> replace "dgTMatrix" by "TsparseMatrix"
> the result will be the same but also work in the future when the
> deprecation may have been turned into a defunctation ...
>
> Martin
>
> ______________________________________________
> R-devel at r-project.org  mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Oct  4 21:03:50 2023
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 4 Oct 2023 21:03:50 +0200
Subject: [Rd] [R-pkg-devel] Problem with "compacting" pdf files.
In-Reply-To: <20231002145809.41884ebc@arachnoid>
References: <20231001211547.4c46512e@rolf-Latitude-E7470>
 <20231001152234.6bdd40ec@Tarkus>
 <20231002100113.2ce1c902@rolf-Latitude-E7470>
 <20231002145809.41884ebc@arachnoid>
Message-ID: <25885.46870.856241.962095@hornik.net>

>>>>> Ivan Krylov writes:

Thanks: committed now.

Best
-k

> Dear Rolf,
> (Moving this one to R-devel...)

> On Sun,  1 Oct 2023 21:01:13 +0000
> Rolf Turner <rolfturner at posteo.net> wrote:

>> I *really* think that the instructions from CRAN could have been
>> clearer!  Without your guidance I'd have been at a total loss.

> Since the CRAN e-mails quote the R CMD check messages verbatim, would
> it have been enough if R CMD check suggested using --compact-vignettes?

> Index: src/library/tools/R/check.R
> ===================================================================
> --- src/library/tools/R/check.R	(revision 85249)
> +++ src/library/tools/R/check.R	(working copy)
> @@ -3079,7 +3079,8 @@
>                           "  'qpdf' made some significant size reductions:\n",
>                           paste("  ", res, collapse = "\n"),
>                           "\n",
> -                         "  consider running tools::compactPDF() on these files\n")
> +                         "  consider running tools::compactPDF() on these files,\n",
> +                         "  or build the source package with --compact-vignettes\n")
>              }
>              if (R_check_doc_sizes2) {
>                  gs_cmd <- find_gs_cmd()
> @@ -3093,7 +3094,8 @@
>                                   "  'gs+qpdf' made some significant size reductions:\n",
>                                   paste("  ", res, collapse = "\n"),
>                                   "\n",
> -                                 '  consider running tools::compactPDF(gs_quality = "ebook") on these files\n')
> +                                 '  consider running tools::compactPDF(gs_quality = "ebook") on these files,\n',
> +                                 '  or build the source package with --compact-vignettes=both\n')
>                      }
>                  } else {
>                      if (!any) noteLog(Log)

> Or is there anything else you would prefer to be reworded? Should the
> message link to Writing R Extensions, section 1.4? Recently there was a
> project to improve the R CMD check messages [*], but I managed to miss
> almost all of it.

> -- 
> Best regards,
> Ivan

> [*] https://github.com/r-devel/r-project-sprint-2023/issues/55

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tr@ver@c @end|ng |rom gm@||@com  Fri Oct  6 01:06:58 2023
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Thu, 5 Oct 2023 16:06:58 -0700
Subject: [Rd] Bug report: parLapply with capture.output(type="message")
 produces an error
Message-ID: <CAPLMX9Ey2=3p9C=5nsSyOQjJjz5oWherbSJ3+VO72WHLjSY7kw@mail.gmail.com>

Hello, I have tested this on a fresh ubuntu image with R 4.3.1.

Rscript -e 'library(parallel)
cl = makeCluster(2)
x = parLapply(cl, 1:100, function(i) {
  capture.output(message("hello"), type = "message")
})
print("bye")'

This produces the following output:

[1] "bye"
Error in unserialize(node$con) : error reading from connection
Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
unserialize
Execution halted
Error in unserialize(node$con) : error reading from connection
Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
unserialize
Execution halted

The error does not occur interactively or if stopCluster gets called at the
end.

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Oct  6 03:15:09 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 5 Oct 2023 18:15:09 -0700
Subject: [Rd] Bug report: parLapply with capture.output(type="message")
 produces an error
In-Reply-To: <CAPLMX9Ey2=3p9C=5nsSyOQjJjz5oWherbSJ3+VO72WHLjSY7kw@mail.gmail.com>
References: <CAPLMX9Ey2=3p9C=5nsSyOQjJjz5oWherbSJ3+VO72WHLjSY7kw@mail.gmail.com>
Message-ID: <CAFDcVCROe5VfEzfbXmE1K=vd0hkkE35WEifwC+f25izPefcLuQ@mail.gmail.com>

This is actually not a bug. If we really want to identify a bug, then
it's actually a bug in your code. We'll get to that at the very end.
Either way, it's an interesting report that reveals a lot of things.

First, here's a slightly simpler version of your example:

$ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1); x <-
clusterEvalQ(cl, { capture.output(NULL, type = "message") })'
Error in unserialize(node$con) : error reading from connection
Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
unserialize
Execution halted

There are lots of things going on here, but before we get to the
answer, the most important take-home message here is:

 Never ever use capture.output(..., type = "message") in R.

Second comment is:

 No, really, do not do that!

Now, towards what is going on in your example. First, I don't think
help("capture.output") is too "kind" here, when it says:

'Messages sent to stderr() (including those from message, warning and
stop) are captured by type = "message". Note that this can be ?unsafe?
and should only be used with care.'

To understand why you shouldn't do this, you have to know that
capture.output() uses sink() internally, and its help page says:

"Sink-ing the messages stream should be done only with great care. For
that stream file must be an already open connection, and there is no
stack of connections."

The "[When] Sink-ing the messages stream ... there is no stack of
connections" is the reason for your the problem you're experiencing.
What happens is that, the background workers that you launch with
parallel::makeCluster() will use sink(..., type = "message")
internally and that's active throughout all parallel evaluation.  Now,
when you add another one of, via your capture.output(..., type =
"message"), you are stealing the "message" sink from the parallel
worker.  Our simplified example can be reproduced using only sink():s
as:

$ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1); x <-
clusterEvalQ(cl, { sink(file(nullfile(), open = "a"), type =
"message"); sink(type = "message") })'
Error in unserialize(node$con) : error reading from connection
Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
unserialize
Execution halted

Back to the "message" sink that parallel sets up. By default, it sinks
to the "null" file.  This is done to avoid output on parallel workers
from cluttering up the terminal.  The default is controlled by
argument 'outfile' of makeCluster(), i.e. our example does:

cl <- makeCluster(1, outfile = "/dev/null")

Now, since we're stealing the "message" sink from the worker when we
call sink(..., type = "message") on the parallel worker, any output on
the workers is no longer sent to the "null" file, but instead straight
out to the terminal. So, after stealing the sink, we're effectively
running as if we had told the parallel workers to not sink output.  We
can manually do this by:

cl <- makeCluster(1, outfile = "")

We're almost there.  If we use the latter, we will see all output from
the parallel worker(s).  Let's try that:

$ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1,
outfile = ""); x <- clusterEvalQ(cl, { })'
starting worker pid=349252 on localhost:11036 at 17:45:05.125
Error in unserialize(node$con) : error reading from connection
Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
unserialize
Execution halted

You see. There's a "starting worker ..." output that we now see.  But
more importantly, we now also see that "error reading from connection"
message.  So, as you see, that error message is there regardless of us
capturing or sinking the "message" output.  Instead, what it tells us
is that there is an error taking place at the very end, but we
normally don't see it.

This error is because when the main R session shuts down, the parallel
workers are still running and trying to listen to the socket
connection that they use to communicate with the main R session.  But
that is now broken, so each parallel worker will fail when it tries to
communicate.

How to fix it? Make sure to close the 'cl' cluster before exiting the
main R session, i.e.

$ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1,
outfile = ""); x <- clusterEvalQ(cl, { }); stopCluster(cl)'
starting worker pid=349703 on localhost:11011 at 17:50:20.357

The error is no longer there, because the main R session will tell the
parallel workers to shut down *before* terminating itself. This means
there are no stray parallel workers trying to reach a non-existing
main R session.

In a way, your example revealed that you forgot to call
stopCluster(cl) at the end.

But, the real message here is: Do not mess with the "message" output in R!

I'll take the moment to rant about this: I think sink(..., type =
"message") should not be part of the public R API; it's simply
impossible to use safely, because there is no one owner controlling
it. To prevent it being used by mistake, at least it could throw an
error if there's already an active "message" sink.  Oh, well ...


Almost finally, do what you're probably trying to achieve here, when you call:

 out <- capture.output({ message("hello"); message("world") }, type = "message")

What you really want to do is:

capture_messages <- function(expr, envir = parent.frame()) {
  msgs <- list()
  withCallingHandlers({
    eval(expr, envir = envir)
  }, message = function(m) {
    msgs <<- c(msgs, list(m))
    invokeRestart("muffleMessage")
  })
  msgs
}

msgs <- capture_messages({ message("hello"); message("world") })

When you capture 'message' conditions this way, you can decide to
resignal then later, e.g.

> void <- lapply(msgs, message)
hello
world

You can capture 'warning' conditions in the same way.



Finally, if you've got to this because you wanted to
capture/see/display/view output that is taking place on parallel
workers, I recommend using the Futureverse (https://futureverse.org)
for parallelization. Disclaimer, I'm the author.  The Futureverse
takes care of relaying stdout, messages, warnings, errors, and other
types of conditions automatically. Here's an example that resembles
your original example:

> cl <- parallel::makeCluster(2)
> future::plan("cluster", workers = cl)
> y <- future.apply::future_lapply(1:3, function(i) message("hello"))
hello
hello
hello
> parallel::stopCluster(cl)

Note that those "hello" messages are truly relayed versions of the
original 'message' conditions. Warnings works the same way.

A cleaner and slightly better version of the above example is:

> library(future.apply)
> plan(multisession, workers = 2)
> y <- future.apply::future_lapply(1:3, function(i) message("hello"))
hello
hello
hello
> plan(sequential)

Over and out,

Henrik

On Thu, Oct 5, 2023 at 4:07?PM Travers Ching <traversc at gmail.com> wrote:
>
> Hello, I have tested this on a fresh ubuntu image with R 4.3.1.
>
> Rscript -e 'library(parallel)
> cl = makeCluster(2)
> x = parLapply(cl, 1:100, function(i) {
>   capture.output(message("hello"), type = "message")
> })
> print("bye")'
>
> This produces the following output:
>
> [1] "bye"
> Error in unserialize(node$con) : error reading from connection
> Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> unserialize
> Execution halted
> Error in unserialize(node$con) : error reading from connection
> Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> unserialize
> Execution halted
>
> The error does not occur interactively or if stopCluster gets called at the
> end.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tr@ver@c @end|ng |rom gm@||@com  Fri Oct  6 21:04:54 2023
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Fri, 6 Oct 2023 12:04:54 -0700
Subject: [Rd] Bug report: parLapply with capture.output(type="message")
 produces an error
In-Reply-To: <CAFDcVCROe5VfEzfbXmE1K=vd0hkkE35WEifwC+f25izPefcLuQ@mail.gmail.com>
References: <CAPLMX9Ey2=3p9C=5nsSyOQjJjz5oWherbSJ3+VO72WHLjSY7kw@mail.gmail.com>
 <CAFDcVCROe5VfEzfbXmE1K=vd0hkkE35WEifwC+f25izPefcLuQ@mail.gmail.com>
Message-ID: <CAPLMX9FvMYnN=CXMKnzgnzUrusOZpn6YB4Hmd+wyNnj2EiNuZA@mail.gmail.com>

Hi Henrik,

Thanks for the detailed technical explanation! I ended up using the
withCallingHandlers solution to achieve what I needed (thanks to stack
overflow). If this is not technically a bug I think it is unintuitive and
unexpected behavior from a user perspective. So take this as a feature
request rather than a bug report.

The error message at the end of the script doesn't inform the user what
part of the script is wrong (using sink or capture.output in parallel). It
is difficult to understand what's going on.

The "correct" solution using withCallingHandlers is esoteric, and I think
most users would not code that up naturally much less understand what it is
doing. Could capture.output(type="messages") be rewritten using this
approach?

Lastly, the help file for stopCluster says

"the workers will terminate themselves once the socket on which they are
listening for commands becomes unavailable, which it should if the master R
session is completed"

To me, this implies that I shouldn't need to call stopCluster and that the
workers are automatically stopped at the end. The place where I first saw
the error was using future_lapply and following the vignette there's no
call to stopCluster there either.

Best,
Travers


On Thu, Oct 5, 2023 at 6:15?PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
wrote:

> This is actually not a bug. If we really want to identify a bug, then
> it's actually a bug in your code. We'll get to that at the very end.
> Either way, it's an interesting report that reveals a lot of things.
>
> First, here's a slightly simpler version of your example:
>
> $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1); x <-
> clusterEvalQ(cl, { capture.output(NULL, type = "message") })'
> Error in unserialize(node$con) : error reading from connection
> Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> unserialize
> Execution halted
>
> There are lots of things going on here, but before we get to the
> answer, the most important take-home message here is:
>
>  Never ever use capture.output(..., type = "message") in R.
>
> Second comment is:
>
>  No, really, do not do that!
>
> Now, towards what is going on in your example. First, I don't think
> help("capture.output") is too "kind" here, when it says:
>
> 'Messages sent to stderr() (including those from message, warning and
> stop) are captured by type = "message". Note that this can be ?unsafe?
> and should only be used with care.'
>
> To understand why you shouldn't do this, you have to know that
> capture.output() uses sink() internally, and its help page says:
>
> "Sink-ing the messages stream should be done only with great care. For
> that stream file must be an already open connection, and there is no
> stack of connections."
>
> The "[When] Sink-ing the messages stream ... there is no stack of
> connections" is the reason for your the problem you're experiencing.
> What happens is that, the background workers that you launch with
> parallel::makeCluster() will use sink(..., type = "message")
> internally and that's active throughout all parallel evaluation.  Now,
> when you add another one of, via your capture.output(..., type =
> "message"), you are stealing the "message" sink from the parallel
> worker.  Our simplified example can be reproduced using only sink():s
> as:
>
> $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1); x <-
> clusterEvalQ(cl, { sink(file(nullfile(), open = "a"), type =
> "message"); sink(type = "message") })'
> Error in unserialize(node$con) : error reading from connection
> Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> unserialize
> Execution halted
>
> Back to the "message" sink that parallel sets up. By default, it sinks
> to the "null" file.  This is done to avoid output on parallel workers
> from cluttering up the terminal.  The default is controlled by
> argument 'outfile' of makeCluster(), i.e. our example does:
>
> cl <- makeCluster(1, outfile = "/dev/null")
>
> Now, since we're stealing the "message" sink from the worker when we
> call sink(..., type = "message") on the parallel worker, any output on
> the workers is no longer sent to the "null" file, but instead straight
> out to the terminal. So, after stealing the sink, we're effectively
> running as if we had told the parallel workers to not sink output.  We
> can manually do this by:
>
> cl <- makeCluster(1, outfile = "")
>
> We're almost there.  If we use the latter, we will see all output from
> the parallel worker(s).  Let's try that:
>
> $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1,
> outfile = ""); x <- clusterEvalQ(cl, { })'
> starting worker pid=349252 on localhost:11036 at 17:45:05.125
> Error in unserialize(node$con) : error reading from connection
> Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> unserialize
> Execution halted
>
> You see. There's a "starting worker ..." output that we now see.  But
> more importantly, we now also see that "error reading from connection"
> message.  So, as you see, that error message is there regardless of us
> capturing or sinking the "message" output.  Instead, what it tells us
> is that there is an error taking place at the very end, but we
> normally don't see it.
>
> This error is because when the main R session shuts down, the parallel
> workers are still running and trying to listen to the socket
> connection that they use to communicate with the main R session.  But
> that is now broken, so each parallel worker will fail when it tries to
> communicate.
>
> How to fix it? Make sure to close the 'cl' cluster before exiting the
> main R session, i.e.
>
> $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1,
> outfile = ""); x <- clusterEvalQ(cl, { }); stopCluster(cl)'
> starting worker pid=349703 on localhost:11011 at 17:50:20.357
>
> The error is no longer there, because the main R session will tell the
> parallel workers to shut down *before* terminating itself. This means
> there are no stray parallel workers trying to reach a non-existing
> main R session.
>
> In a way, your example revealed that you forgot to call
> stopCluster(cl) at the end.
>
> But, the real message here is: Do not mess with the "message" output in R!
>
> I'll take the moment to rant about this: I think sink(..., type =
> "message") should not be part of the public R API; it's simply
> impossible to use safely, because there is no one owner controlling
> it. To prevent it being used by mistake, at least it could throw an
> error if there's already an active "message" sink.  Oh, well ...
>
>
> Almost finally, do what you're probably trying to achieve here, when you
> call:
>
>  out <- capture.output({ message("hello"); message("world") }, type =
> "message")
>
> What you really want to do is:
>
> capture_messages <- function(expr, envir = parent.frame()) {
>   msgs <- list()
>   withCallingHandlers({
>     eval(expr, envir = envir)
>   }, message = function(m) {
>     msgs <<- c(msgs, list(m))
>     invokeRestart("muffleMessage")
>   })
>   msgs
> }
>
> msgs <- capture_messages({ message("hello"); message("world") })
>
> When you capture 'message' conditions this way, you can decide to
> resignal then later, e.g.
>
> > void <- lapply(msgs, message)
> hello
> world
>
> You can capture 'warning' conditions in the same way.
>
>
>
> Finally, if you've got to this because you wanted to
> capture/see/display/view output that is taking place on parallel
> workers, I recommend using the Futureverse (https://futureverse.org)
> for parallelization. Disclaimer, I'm the author.  The Futureverse
> takes care of relaying stdout, messages, warnings, errors, and other
> types of conditions automatically. Here's an example that resembles
> your original example:
>
> > cl <- parallel::makeCluster(2)
> > future::plan("cluster", workers = cl)
> > y <- future.apply::future_lapply(1:3, function(i) message("hello"))
> hello
> hello
> hello
> > parallel::stopCluster(cl)
>
> Note that those "hello" messages are truly relayed versions of the
> original 'message' conditions. Warnings works the same way.
>
> A cleaner and slightly better version of the above example is:
>
> > library(future.apply)
> > plan(multisession, workers = 2)
> > y <- future.apply::future_lapply(1:3, function(i) message("hello"))
> hello
> hello
> hello
> > plan(sequential)
>
> Over and out,
>
> Henrik
>
> On Thu, Oct 5, 2023 at 4:07?PM Travers Ching <traversc at gmail.com> wrote:
> >
> > Hello, I have tested this on a fresh ubuntu image with R 4.3.1.
> >
> > Rscript -e 'library(parallel)
> > cl = makeCluster(2)
> > x = parLapply(cl, 1:100, function(i) {
> >   capture.output(message("hello"), type = "message")
> > })
> > print("bye")'
> >
> > This produces the following output:
> >
> > [1] "bye"
> > Error in unserialize(node$con) : error reading from connection
> > Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> > unserialize
> > Execution halted
> > Error in unserialize(node$con) : error reading from connection
> > Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> > unserialize
> > Execution halted
> >
> > The error does not occur interactively or if stopCluster gets called at
> the
> > end.
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ch@riie@g@o m@iii@g oii shikokuchuo@@et  Sat Oct  7 17:55:53 2023
From: ch@riie@g@o m@iii@g oii shikokuchuo@@et (ch@riie@g@o m@iii@g oii shikokuchuo@@et)
Date: Sat, 07 Oct 2023 15:55:53 +0000
Subject: [Rd] Bug report: parLapply with capture.output(type="message")
 produces an error
In-Reply-To: <mailman.53806.5.1696672801.56772.r-devel@r-project.org>
References: <mailman.53806.5.1696672801.56772.r-devel@r-project.org>
Message-ID: <d1ff3a32cfa2b8a96cec218db4c92dcfebdde4e7@shikokuchuo.net>

Hi Travers,

This is an implementation detail for background workers in general, in that there must be some robust way for them to exit (either upon a signal from the main session, or if the main session ends / socket disconnects). As these are background workers, their error messages are usually not seen, and hence it has been deemed good enough that they exit in this case through error. However, you do see them in your case as you have diverted the message stream as Henrik has highlighted. This may be inconvenient, but can safely be ignored.

If however, clean output is important in your use case, there is a new solution that has only just become available. This is a direct outcome of the R Project Sprint in Warwick from a month ago ? Luke Tierney has actually opened up the `parallel` package to allow other packages to provide alternative communications backends. Only possible with R-devel, but as of yesterday a new version of the `mirai` package was released to CRAN that provides one such backend.  

You would simply replace your `makeCluster()` call with `mirai::make_cluster()`. That?s the only change.

As this is the R-devel mailing list, I will not go into the details of this particular implementation, but it seems useful for users of `parallel` to know that this is now possible. As author of `mirai`, please reach out directly with questions on the package rather than replying on the list.

I just want to highlight one other possibility - if you remove `capture.output()` in your evaluation and call `mirai::make_cluster(2, output = TRUE)` instead, you will then be able to see all the messages from the background workers in your main process. It?s probably not what you?re after, but just in case.

Thanks,

Charlie

6 October 2023 at 12:04, Travers Ching <traversc at gmail.com> wrote:

> 
> Hi Henrik,
> 
> Thanks for the detailed technical explanation! I ended up using the
> withCallingHandlers solution to achieve what I needed (thanks to stack
> overflow). If this is not technically a bug I think it is unintuitive and
> unexpected behavior from a user perspective. So take this as a feature
> request rather than a bug report.
> 
> The error message at the end of the script doesn't inform the user what
> part of the script is wrong (using sink or capture.output in parallel). It
> is difficult to understand what's going on.
> 
> The "correct" solution using withCallingHandlers is esoteric, and I think
> most users would not code that up naturally much less understand what it is
> doing. Could capture.output(type="messages") be rewritten using this
> approach?
> 
> Lastly, the help file for stopCluster says
> 
> "the workers will terminate themselves once the socket on which they are
> listening for commands becomes unavailable, which it should if the master R
> session is completed"
> 
> To me, this implies that I shouldn't need to call stopCluster and that the
> workers are automatically stopped at the end. The place where I first saw
> the error was using future_lapply and following the vignette there's no
> call to stopCluster there either.
> 
> Best,
> Travers
> 
> On Thu, Oct 5, 2023 at 6:15 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
> wrote:
> 
> > 
> > This is actually not a bug. If we really want to identify a bug, then
> >  it's actually a bug in your code. We'll get to that at the very end.
> >  Either way, it's an interesting report that reveals a lot of things.
> > 
> >  First, here's a slightly simpler version of your example:
> > 
> >  $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1); x <-
> >  clusterEvalQ(cl, { capture.output(NULL, type = "message") })'
> >  Error in unserialize(node$con) : error reading from connection
> >  Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> >  unserialize
> >  Execution halted
> > 
> >  There are lots of things going on here, but before we get to the
> >  answer, the most important take-home message here is:
> > 
> >  Never ever use capture.output(..., type = "message") in R.
> > 
> >  Second comment is:
> > 
> >  No, really, do not do that!
> > 
> >  Now, towards what is going on in your example. First, I don't think
> >  help("capture.output") is too "kind" here, when it says:
> > 
> >  'Messages sent to stderr() (including those from message, warning and
> >  stop) are captured by type = "message". Note that this can be ?unsafe?
> >  and should only be used with care.'
> > 
> >  To understand why you shouldn't do this, you have to know that
> >  capture.output() uses sink() internally, and its help page says:
> > 
> >  "Sink-ing the messages stream should be done only with great care. For
> >  that stream file must be an already open connection, and there is no
> >  stack of connections."
> > 
> >  The "[When] Sink-ing the messages stream ... there is no stack of
> >  connections" is the reason for your the problem you're experiencing.
> >  What happens is that, the background workers that you launch with
> >  parallel::makeCluster() will use sink(..., type = "message")
> >  internally and that's active throughout all parallel evaluation. Now,
> >  when you add another one of, via your capture.output(..., type =
> >  "message"), you are stealing the "message" sink from the parallel
> >  worker. Our simplified example can be reproduced using only sink():s
> >  as:
> > 
> >  $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1); x <-
> >  clusterEvalQ(cl, { sink(file(nullfile(), open = "a"), type =
> >  "message"); sink(type = "message") })'
> >  Error in unserialize(node$con) : error reading from connection
> >  Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> >  unserialize
> >  Execution halted
> > 
> >  Back to the "message" sink that parallel sets up. By default, it sinks
> >  to the "null" file. This is done to avoid output on parallel workers
> >  from cluttering up the terminal. The default is controlled by
> >  argument 'outfile' of makeCluster(), i.e. our example does:
> > 
> >  cl <- makeCluster(1, outfile = "/dev/null")
> > 
> >  Now, since we're stealing the "message" sink from the worker when we
> >  call sink(..., type = "message") on the parallel worker, any output on
> >  the workers is no longer sent to the "null" file, but instead straight
> >  out to the terminal. So, after stealing the sink, we're effectively
> >  running as if we had told the parallel workers to not sink output. We
> >  can manually do this by:
> > 
> >  cl <- makeCluster(1, outfile = "")
> > 
> >  We're almost there. If we use the latter, we will see all output from
> >  the parallel worker(s). Let's try that:
> > 
> >  $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1,
> >  outfile = ""); x <- clusterEvalQ(cl, { })'
> >  starting worker pid=349252 on localhost:11036 at 17:45:05.125
> >  Error in unserialize(node$con) : error reading from connection
> >  Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> >  unserialize
> >  Execution halted
> > 
> >  You see. There's a "starting worker ..." output that we now see. But
> >  more importantly, we now also see that "error reading from connection"
> >  message. So, as you see, that error message is there regardless of us
> >  capturing or sinking the "message" output. Instead, what it tells us
> >  is that there is an error taking place at the very end, but we
> >  normally don't see it.
> > 
> >  This error is because when the main R session shuts down, the parallel
> >  workers are still running and trying to listen to the socket
> >  connection that they use to communicate with the main R session. But
> >  that is now broken, so each parallel worker will fail when it tries to
> >  communicate.
> > 
> >  How to fix it? Make sure to close the 'cl' cluster before exiting the
> >  main R session, i.e.
> > 
> >  $ Rscript --vanilla -e 'library(parallel); cl <- makeCluster(1,
> >  outfile = ""); x <- clusterEvalQ(cl, { }); stopCluster(cl)'
> >  starting worker pid=349703 on localhost:11011 at 17:50:20.357
> > 
> >  The error is no longer there, because the main R session will tell the
> >  parallel workers to shut down *before* terminating itself. This means
> >  there are no stray parallel workers trying to reach a non-existing
> >  main R session.
> > 
> >  In a way, your example revealed that you forgot to call
> >  stopCluster(cl) at the end.
> > 
> >  But, the real message here is: Do not mess with the "message" output in R!
> > 
> >  I'll take the moment to rant about this: I think sink(..., type =
> >  "message") should not be part of the public R API; it's simply
> >  impossible to use safely, because there is no one owner controlling
> >  it. To prevent it being used by mistake, at least it could throw an
> >  error if there's already an active "message" sink. Oh, well ...
> > 
> >  Almost finally, do what you're probably trying to achieve here, when you
> >  call:
> > 
> >  out <- capture.output({ message("hello"); message("world") }, type =
> >  "message")
> > 
> >  What you really want to do is:
> > 
> >  capture_messages <- function(expr, envir = parent.frame()) {
> >  msgs <- list()
> >  withCallingHandlers({
> >  eval(expr, envir = envir)
> >  }, message = function(m) {
> >  msgs <<- c(msgs, list(m))
> >  invokeRestart("muffleMessage")
> >  })
> >  msgs
> >  }
> > 
> >  msgs <- capture_messages({ message("hello"); message("world") })
> > 
> >  When you capture 'message' conditions this way, you can decide to
> >  resignal then later, e.g.
> > 
> >  void <- lapply(msgs, message)
> >  hello
> >  world
> > 
> >  You can capture 'warning' conditions in the same way.
> > 
> >  Finally, if you've got to this because you wanted to
> >  capture/see/display/view output that is taking place on parallel
> >  workers, I recommend using the Futureverse (https://futureverse.org)/
> >  for parallelization. Disclaimer, I'm the author. The Futureverse
> >  takes care of relaying stdout, messages, warnings, errors, and other
> >  types of conditions automatically. Here's an example that resembles
> >  your original example:
> > 
> >  cl <- parallel::makeCluster(2)
> >  future::plan("cluster", workers = cl)
> >  y <- future.apply::future_lapply(1:3, function(i) message("hello"))
> >  hello
> >  hello
> >  hello
> >  parallel::stopCluster(cl)
> > 
> >  Note that those "hello" messages are truly relayed versions of the
> >  original 'message' conditions. Warnings works the same way.
> > 
> >  A cleaner and slightly better version of the above example is:
> > 
> >  library(future.apply)
> >  plan(multisession, workers = 2)
> >  y <- future.apply::future_lapply(1:3, function(i) message("hello"))
> >  hello
> >  hello
> >  hello
> >  plan(sequential)
> > 
> >  Over and out,
> > 
> >  Henrik
> > 
> >  On Thu, Oct 5, 2023 at 4:07 PM Travers Ching <traversc at gmail.com> wrote:
> > 
> >  Hello, I have tested this on a fresh ubuntu image with R 4.3.1.
> > 
> >  Rscript -e 'library(parallel)
> >  cl = makeCluster(2)
> >  x = parLapply(cl, 1:100, function(i) {
> >  capture.output(message("hello"), type = "message")
> >  })
> >  print("bye")'
> > 
> >  This produces the following output:
> > 
> >  [1] "bye"
> >  Error in unserialize(node$con) : error reading from connection
> >  Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> >  unserialize
> >  Execution halted
> >  Error in unserialize(node$con) : error reading from connection
> >  Calls: <Anonymous> ... doTryCatch -> recvData -> recvData.SOCKnode ->
> >  unserialize
> >  Execution halted
> > 
> >  The error does not occur interactively or if stopCluster gets called at
> >  the
> >  end.
> > 
>


From ch|r|com @end|ng |rom goog|e@com  Tue Oct 10 01:57:29 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Mon, 9 Oct 2023 16:57:29 -0700
Subject: [Rd] FR: valid_regex() to test string validity as a regular
 expression
Message-ID: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>

It will be useful to package authors trying to validate input which is
supposed to be a valid regular expression.

As near as I can tell, the only way we can do so now is to run any
regex function and check for the warning and/or condition to bubble
up:

valid_regex <- function(str) {
  stopifnot(is.character(str), length(str) == 1L)
  !inherits(tryCatch(grepl(str, ""), condition = identity), "condition")
}

That's pretty hefty/inscrutable for such a simple validation. I see a
variety of similar approaches in CRAN packages [1], all slightly
different. It would be good for R to expose a "canonical" way to run
this validation.

At root, the problem is that R does not expose the regex compilation
routines like 'tre_regcomp', so from the R side we have to resort to
hacky approaches.

Things get slightly complicated by encoding/useBytes modes
(tre_regwcomp, tre_regncomp, tre_regwncomp, tre_regcompb,
tre_regncompb; all in tre.h), but all are already present in other
regex routines, so this is doable.

Exposing a function to compile regular expressions is common in other
languages, e.g. Go [2], Python [3], JavaScript [4].

[1] https://github.com/search?q=lang%3AR+%2Fis%5Ba-zA-Z0-9._%5D*reg%5Ba-zA-Z0-9._%5D*ex.*%28%3C-%7C%3D%29%5Cs*function%2F+org%3Acran&type=code
[2] https://pkg.go.dev/regexp#Compile
[3] https://docs.python.org/3/library/re.html#re.compile
[4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Oct 10 02:19:31 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 9 Oct 2023 20:19:31 -0400
Subject: [Rd] FR: valid_regex() to test string validity as a regular
 expression
In-Reply-To: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
References: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
Message-ID: <811b9fd8-4ccf-46c2-bc6a-947a135f3365@gmail.com>

On 09/10/2023 7:57 p.m., Michael Chirico via R-devel wrote:
> It will be useful to package authors trying to validate input which is
> supposed to be a valid regular expression.
> 
> As near as I can tell, the only way we can do so now is to run any
> regex function and check for the warning and/or condition to bubble
> up:
> 
> valid_regex <- function(str) {
>    stopifnot(is.character(str), length(str) == 1L)
>    !inherits(tryCatch(grepl(str, ""), condition = identity), "condition")
> }
> 
> That's pretty hefty/inscrutable for such a simple validation. I see a
> variety of similar approaches in CRAN packages [1], all slightly
> different. It would be good for R to expose a "canonical" way to run
> this validation.

I think currently we do as.character(str) (or some equivalent), so the 
test shouldn't require str to be a character to start.  For example, 
this is currently valid code:

   grepl(1, "abc123")

It's not great style, but shouldn't generate an error.

Duncan Murdoch

> 
> At root, the problem is that R does not expose the regex compilation
> routines like 'tre_regcomp', so from the R side we have to resort to
> hacky approaches.
> 
> Things get slightly complicated by encoding/useBytes modes
> (tre_regwcomp, tre_regncomp, tre_regwncomp, tre_regcompb,
> tre_regncompb; all in tre.h), but all are already present in other
> regex routines, so this is doable.
> 
> Exposing a function to compile regular expressions is common in other
> languages, e.g. Go [2], Python [3], JavaScript [4].
> 
> [1] https://github.com/search?q=lang%3AR+%2Fis%5Ba-zA-Z0-9._%5D*reg%5Ba-zA-Z0-9._%5D*ex.*%28%3C-%7C%3D%29%5Cs*function%2F+org%3Acran&type=code
> [2] https://pkg.go.dev/regexp#Compile
> [3] https://docs.python.org/3/library/re.html#re.compile
> [4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Oct 10 08:30:06 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 10 Oct 2023 08:30:06 +0200
Subject: [Rd] FR: valid_regex() to test string validity as a regular
 expression
In-Reply-To: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
References: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
Message-ID: <7257c6e5-9618-44fb-9483-671cdadf2223@gmail.com>


On 10/10/23 01:57, Michael Chirico via R-devel wrote:
> It will be useful to package authors trying to validate input which is
> supposed to be a valid regular expression.
>
> As near as I can tell, the only way we can do so now is to run any
> regex function and check for the warning and/or condition to bubble
> up:
>
> valid_regex <- function(str) {
>    stopifnot(is.character(str), length(str) == 1L)
>    !inherits(tryCatch(grepl(str, ""), condition = identity), "condition")
> }
>
> That's pretty hefty/inscrutable for such a simple validation. I see a
> variety of similar approaches in CRAN packages [1], all slightly
> different. It would be good for R to expose a "canonical" way to run
> this validation.
>
> At root, the problem is that R does not expose the regex compilation
> routines like 'tre_regcomp', so from the R side we have to resort to
> hacky approaches.

Hi Michael,

I don't think you need compilation functions for that. If a regular 
expression is found invalid by a specific third party library R uses, 
the library should return and error to R and R should return an error to 
you, and you should probably propagate that to your users. Grepping an 
empty string might work in many cases as a test, but it is probably more 
portable to simply be prepared to propagate such errors from the actual 
use on real inputs. In theory, there could be some optimization for a 
particular case, the checking may not be the same - but that is the same 
say for compilation and checking.

> Things get slightly complicated by encoding/useBytes modes
> (tre_regwcomp, tre_regncomp, tre_regwncomp, tre_regcompb,
> tre_regncompb; all in tre.h), but all are already present in other
> regex routines, so this is doable.

Re encodings, simply R strings should be valid in their encoding. This 
is not just for regular expressions but also for anything else. You 
shouldn't assume that R can handle invalid strings in any reasonable 
way. Definitely you shouldn't try adding invalid strings in tests - 
behavior with invalid strings is unspecified. To test whether a string 
is valid, there is validEnc() (or validUTF8()). But, again, it is 
probably safest to propagate errors from the regular expression R 
functions (in case the checks differ, particularly for non-UTF-8), also, 
duplicating the encoding checks can be a non-trivial overhead.

If there was a strong need to have an automated way to somehow classify 
specifically errors from the regex libraries, perhaps R could attach 
some classes to them when the library tells.

Tomas

> Exposing a function to compile regular expressions is common in other
> languages, e.g. Go [2], Python [3], JavaScript [4].
>
> [1]https://github.com/search?q=lang%3AR+%2Fis%5Ba-zA-Z0-9._%5D*reg%5Ba-zA-Z0-9._%5D*ex.*%28%3C-%7C%3D%29%5Cs*function%2F+org%3Acran&type=code
> [2]https://pkg.go.dev/regexp#Compile
> [3]https://docs.python.org/3/library/re.html#re.compile
> [4]https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
>
> ______________________________________________
> R-devel at r-project.org  mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
	[[alternative HTML version deleted]]


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Tue Oct 10 12:00:05 2023
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Tue, 10 Oct 2023 10:00:05 +0000
Subject: [Rd] Subset has No Examples for Vector Data
Message-ID: <SY2PR01MB300337984DDDA5045487BBEDCDCDA@SY2PR01MB3003.ausprd01.prod.outlook.com>

Hello,

Could the documentation page for subset gain an example of how to use it for something other than a data frame or matrix? I arrived at

> random <- LETTERS[rpois(100, 10)]
> subset(table(random), x > 10)
named integer(0)

I expected a part of the table to be returned rather than an empty vector.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Tue Oct 10 13:17:19 2023
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Tue, 10 Oct 2023 12:17:19 +0100
Subject: [Rd] Subset has No Examples for Vector Data
In-Reply-To: <SY2PR01MB300337984DDDA5045487BBEDCDCDA@SY2PR01MB3003.ausprd01.prod.outlook.com>
References: <SY2PR01MB300337984DDDA5045487BBEDCDCDA@SY2PR01MB3003.ausprd01.prod.outlook.com>
Message-ID: <f18c5f6b-93d1-4fa9-b1b8-23c6123aa436@sapo.pt>

?s 11:00 de 10/10/2023, Dario Strbenac via R-devel escreveu:
> Hello,
> 
> Could the documentation page for subset gain an example of how to use it for something other than a data frame or matrix? I arrived at
> 
>> random <- LETTERS[rpois(100, 10)]
>> subset(table(random), x > 10)
> named integer(0)
> 
> I expected a part of the table to be returned rather than an empty vector.
> 
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
Hello,

If you want to subset then you must refer to a variable in the original 
data set. In your example there is no 'x' in the output of table.


set.seed(2023)
random <- LETTERS[rpois(100, 10)]
(tbl <- table(random))
#> random
#>  C  D  E  F  G  H  I  J  K  L  M  N  P  Q  S
#>  1  2  4  4  8 13 14 10 17  9 11  2  1  3  1

subset(tbl, tbl > 10)
#> random
#>  H  I  K  M
#> 13 14 17 11


So it is subsetting vector data as wanted.
It is your expectation that a part of the table should be returned that 
is not in agreement with the data you have.

Hope this helps,

Rui Barradas



-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From ch|r|com @end|ng |rom goog|e@com  Tue Oct 10 16:57:12 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Tue, 10 Oct 2023 07:57:12 -0700
Subject: [Rd] FR: valid_regex() to test string validity as a regular
 expression
In-Reply-To: <7257c6e5-9618-44fb-9483-671cdadf2223@gmail.com>
References: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
 <7257c6e5-9618-44fb-9483-671cdadf2223@gmail.com>
Message-ID: <CAD7Bkx_iUdtNuiB4cb4qMmqyhAzMrpH3bm=JWmRQ7uzYKM86Dg@mail.gmail.com>

> Grepping an empty string might work in many cases...

That's precisely why a base R offering is important, as a surer way of
validating in all cases. To be clear I am trying to directly access the
results of tre_regcomp().

> it is probably more portable to simply be prepared to propagate such
errors from the actual use on real inputs

That works best in self-contained calls -- foo(re) and we execute re inside
foo().

But the specific context where I found myself looking for a regex validator
is more complicated (https://github.com/r-lib/lintr/pull/2225). User
supplies a regular expression in a configuration file, only "later" is it
actually supplied to grepl().

Till now, we've done your suggestion -- just surface the regex error at run
time. But our goal is to make it friendlier and fail earlier at "compile
time" as the config is loaded, "long" before any regex is actually executed.

At a bare minimum this is a good place to return a classed warning (say
invalid_regex_warning) to allow finer control than tryCatch(condition=).

On Mon, Oct 9, 2023, 11:30?PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 10/10/23 01:57, Michael Chirico via R-devel wrote:
>
> It will be useful to package authors trying to validate input which is
> supposed to be a valid regular expression.
>
> As near as I can tell, the only way we can do so now is to run any
> regex function and check for the warning and/or condition to bubble
> up:
>
> valid_regex <- function(str) {
>   stopifnot(is.character(str), length(str) == 1L)
>   !inherits(tryCatch(grepl(str, ""), condition = identity), "condition")
> }
>
> That's pretty hefty/inscrutable for such a simple validation. I see a
> variety of similar approaches in CRAN packages [1], all slightly
> different. It would be good for R to expose a "canonical" way to run
> this validation.
>
> At root, the problem is that R does not expose the regex compilation
> routines like 'tre_regcomp', so from the R side we have to resort to
> hacky approaches.
>
> Hi Michael,
>
> I don't think you need compilation functions for that. If a regular
> expression is found invalid by a specific third party library R uses, the
> library should return and error to R and R should return an error to you,
> and you should probably propagate that to your users. Grepping an empty
> string might work in many cases as a test, but it is probably more portable
> to simply be prepared to propagate such errors from the actual use on real
> inputs. In theory, there could be some optimization for a particular case,
> the checking may not be the same - but that is the same say for compilation
> and checking.
>
> Things get slightly complicated by encoding/useBytes modes
> (tre_regwcomp, tre_regncomp, tre_regwncomp, tre_regcompb,
> tre_regncompb; all in tre.h), but all are already present in other
> regex routines, so this is doable.
>
> Re encodings, simply R strings should be valid in their encoding. This is
> not just for regular expressions but also for anything else. You shouldn't
> assume that R can handle invalid strings in any reasonable way. Definitely
> you shouldn't try adding invalid strings in tests - behavior with invalid
> strings is unspecified. To test whether a string is valid, there is
> validEnc() (or validUTF8()). But, again, it is probably safest to propagate
> errors from the regular expression R functions (in case the checks differ,
> particularly for non-UTF-8), also, duplicating the encoding checks can be a
> non-trivial overhead.
>
> If there was a strong need to have an automated way to somehow classify
> specifically errors from the regex libraries, perhaps R could attach some
> classes to them when the library tells.
>
> Tomas
>
> Exposing a function to compile regular expressions is common in other
> languages, e.g. Go [2], Python [3], JavaScript [4].
>
> [1] https://github.com/search?q=lang%3AR+%2Fis%5Ba-zA-Z0-9._%5D*reg%5Ba-zA-Z0-9._%5D*ex.*%28%3C-%7C%3D%29%5Cs*function%2F+org%3Acran&type=code
> [2] https://pkg.go.dev/regexp#Compile
> [3] https://docs.python.org/3/library/re.html#re.compile
> [4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
>
> ______________________________________________R-devel at r-project.org mailing listhttps://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Oct 10 18:18:22 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 10 Oct 2023 18:18:22 +0200
Subject: [Rd] Subset has No Examples for Vector Data
In-Reply-To: <f18c5f6b-93d1-4fa9-b1b8-23c6123aa436@sapo.pt>
References: <SY2PR01MB300337984DDDA5045487BBEDCDCDA@SY2PR01MB3003.ausprd01.prod.outlook.com>
 <f18c5f6b-93d1-4fa9-b1b8-23c6123aa436@sapo.pt>
Message-ID: <25893.31054.576410.309672@stat.math.ethz.ch>

>>>>> Rui Barradas 
>>>>>     on Tue, 10 Oct 2023 12:17:19 +0100 writes:

    > ?s 11:00 de 10/10/2023, Dario Strbenac via R-devel escreveu:
    >> Hello,
    >> 
    >> Could the documentation page for subset gain an example of how to use it for something other than a data frame or matrix? I arrived at
    >> 
    >>> random <- LETTERS[rpois(100, 10)]
    >>> subset(table(random), x > 10)
    >> named integer(0)
    >> 
    >> I expected a part of the table to be returned rather than an empty vector.
    >> 
    >> --------------------------------------
    >> Dario Strbenac
    >> University of Sydney
    >> Camperdown NSW 2050
    >> Australia

    > If you want to subset then you must refer to a variable in the original 
    > data set. In your example there is no 'x' in the output of table.


    > set.seed(2023)
    > random <- LETTERS[rpois(100, 10)]
    > (tbl <- table(random))
    > #> random
    > #>  C  D  E  F  G  H  I  J  K  L  M  N  P  Q  S
    > #>  1  2  4  4  8 13 14 10 17  9 11  2  1  3  1

    > subset(tbl, tbl > 10)
    > #> random
    > #>  H  I  K  M
    > #> 13 14 17 11


    > So it is subsetting vector data as wanted.
    > It is your expectation that a part of the table should be returned that 
    > is not in agreement with the data you have.

    > Hope this helps,

    > Rui Barradas

Thank you, Rui, for helping!

yes, *help*ing
      <---> 
that (original post) was very much for R-help,  not at all for R-devel ...

Martin


From georgeo@t @end|ng |rom gm@||@com  Wed Oct 11 23:12:47 2023
From: georgeo@t @end|ng |rom gm@||@com (George Ostrouchov)
Date: Wed, 11 Oct 2023 17:12:47 -0400
Subject: [Rd] About FlexiBLAS in the R-admin docs
In-Reply-To: <mailman.53774.3.1695895202.51578.r-devel@r-project.org>
References: <mailman.53774.3.1695895202.51578.r-devel@r-project.org>
Message-ID: <E698DC79-C258-4A95-A8C6-933A512CA108@gmail.com>

I agree that the "R Installation and Administration" guide statement about FlexiBLAS needs an update. Standard R in CentOS Stream 9, which is now downstream from Fedora, gives the following result for Matrix products in sessionInfo():

> sessionInfo()
R version 4.3.1 (2023-06-16)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: CentOS Stream 9

Matrix products: default
BLAS/LAPACK: FlexiBLAS OPENBLAS-OPENMP;  LAPACK version 3.9.0
?

So OpenBLAS compiled with OpenMP is the default. FlexiBLAS (via the flexiblas package) is my favorite way to manage core use in multithreaded BLAS computations. It is also the default in the EasyBuild foss compiler toolchain for HPC clusters: https://docs.easybuild.io/common-toolchains/ 

What would be a good way to suggest or construct an update?

Best regards,
George


> Date: Wed, 27 Sep 2023 15:14:43 +0200
> From: =?UTF-8?Q?I=C3=B1aki_Ucar?= <iucar at fedoraproject.org>
> To: "r-devel at r-project.org" <R-devel at r-project.org>
> Subject: [Rd] About FlexiBLAS in the R-admin docs
> Message-ID:
> 	<CALEXWq2x9gygnxt6S906BkQHd139CP783bTDQC4wmeM-uKuW3g at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
> 
> Hi,
> 
> Not sure if this is the right place for this. The "R Installation and
> Administration" guide states:
> 
>> Apparently undocumented: FlexiBLAS on Fedora provides a complete LAPACK, but not the enhanced routines from ATLAS or OpenBLAS.
> 
> I'm not sure what this means. FlexiBLAS does provide 100% of BLAS and
> LAPACK, and if the active backend (say, OpenBLAS) implements an
> enhanced LAPACK routine, then the call is redirected to the backend.
> If the user switches to another backend and that routine is not
> available there, then the original LAPACK routine is dispatched
> instead.
> 
> Best,
> -- 
> I?aki ?car
> 


	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Thu Oct 12 01:02:06 2023
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 11 Oct 2023 16:02:06 -0700
Subject: [Rd] FR: valid_regex() to test string validity as a regular
 expression
In-Reply-To: <CAD7Bkx_iUdtNuiB4cb4qMmqyhAzMrpH3bm=JWmRQ7uzYKM86Dg@mail.gmail.com>
References: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
 <7257c6e5-9618-44fb-9483-671cdadf2223@gmail.com>
 <CAD7Bkx_iUdtNuiB4cb4qMmqyhAzMrpH3bm=JWmRQ7uzYKM86Dg@mail.gmail.com>
Message-ID: <CALK03d2fq+iS=sDHXC5ewvB82d5pqEh5n1qtzgOrsSM5Ee4Dkw@mail.gmail.com>

Hi Michael, it sounds like you don't want to use a CRAN package for
this, but you may try re2, see below.

> grepl("(invalid","subject",perl=TRUE)
Error in grepl("(invalid", "subject", perl = TRUE) :
  invalid regular expression '(invalid'
In addition: Warning message:
In grepl("(invalid", "subject", perl = TRUE) :
  PCRE pattern compilation error
    'missing closing parenthesis'
    at ''

> grepl("(invalid","subject",perl=FALSE)
Error in grepl("(invalid", "subject", perl = FALSE) :
  invalid regular expression '(invalid', reason 'Missing ')''
In addition: Warning message:
In grepl("(invalid", "subject", perl = FALSE) :
  TRE pattern compilation error 'Missing ')''

> re2::re2_regexp("(invalid")
Error: missing ): (invalid

On Tue, Oct 10, 2023 at 7:57?AM Michael Chirico via R-devel
<r-devel at r-project.org> wrote:
>
> > Grepping an empty string might work in many cases...
>
> That's precisely why a base R offering is important, as a surer way of
> validating in all cases. To be clear I am trying to directly access the
> results of tre_regcomp().
>
> > it is probably more portable to simply be prepared to propagate such
> errors from the actual use on real inputs
>
> That works best in self-contained calls -- foo(re) and we execute re inside
> foo().
>
> But the specific context where I found myself looking for a regex validator
> is more complicated (https://github.com/r-lib/lintr/pull/2225). User
> supplies a regular expression in a configuration file, only "later" is it
> actually supplied to grepl().
>
> Till now, we've done your suggestion -- just surface the regex error at run
> time. But our goal is to make it friendlier and fail earlier at "compile
> time" as the config is loaded, "long" before any regex is actually executed.
>
> At a bare minimum this is a good place to return a classed warning (say
> invalid_regex_warning) to allow finer control than tryCatch(condition=).
>
> On Mon, Oct 9, 2023, 11:30?PM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
> >
> > On 10/10/23 01:57, Michael Chirico via R-devel wrote:
> >
> > It will be useful to package authors trying to validate input which is
> > supposed to be a valid regular expression.
> >
> > As near as I can tell, the only way we can do so now is to run any
> > regex function and check for the warning and/or condition to bubble
> > up:
> >
> > valid_regex <- function(str) {
> >   stopifnot(is.character(str), length(str) == 1L)
> >   !inherits(tryCatch(grepl(str, ""), condition = identity), "condition")
> > }
> >
> > That's pretty hefty/inscrutable for such a simple validation. I see a
> > variety of similar approaches in CRAN packages [1], all slightly
> > different. It would be good for R to expose a "canonical" way to run
> > this validation.
> >
> > At root, the problem is that R does not expose the regex compilation
> > routines like 'tre_regcomp', so from the R side we have to resort to
> > hacky approaches.
> >
> > Hi Michael,
> >
> > I don't think you need compilation functions for that. If a regular
> > expression is found invalid by a specific third party library R uses, the
> > library should return and error to R and R should return an error to you,
> > and you should probably propagate that to your users. Grepping an empty
> > string might work in many cases as a test, but it is probably more portable
> > to simply be prepared to propagate such errors from the actual use on real
> > inputs. In theory, there could be some optimization for a particular case,
> > the checking may not be the same - but that is the same say for compilation
> > and checking.
> >
> > Things get slightly complicated by encoding/useBytes modes
> > (tre_regwcomp, tre_regncomp, tre_regwncomp, tre_regcompb,
> > tre_regncompb; all in tre.h), but all are already present in other
> > regex routines, so this is doable.
> >
> > Re encodings, simply R strings should be valid in their encoding. This is
> > not just for regular expressions but also for anything else. You shouldn't
> > assume that R can handle invalid strings in any reasonable way. Definitely
> > you shouldn't try adding invalid strings in tests - behavior with invalid
> > strings is unspecified. To test whether a string is valid, there is
> > validEnc() (or validUTF8()). But, again, it is probably safest to propagate
> > errors from the regular expression R functions (in case the checks differ,
> > particularly for non-UTF-8), also, duplicating the encoding checks can be a
> > non-trivial overhead.
> >
> > If there was a strong need to have an automated way to somehow classify
> > specifically errors from the regex libraries, perhaps R could attach some
> > classes to them when the library tells.
> >
> > Tomas
> >
> > Exposing a function to compile regular expressions is common in other
> > languages, e.g. Go [2], Python [3], JavaScript [4].
> >
> > [1] https://github.com/search?q=lang%3AR+%2Fis%5Ba-zA-Z0-9._%5D*reg%5Ba-zA-Z0-9._%5D*ex.*%28%3C-%7C%3D%29%5Cs*function%2F+org%3Acran&type=code
> > [2] https://pkg.go.dev/regexp#Compile
> > [3] https://docs.python.org/3/library/re.html#re.compile
> > [4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
> >
> > ______________________________________________R-devel at r-project.org mailing listhttps://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ch|r|com @end|ng |rom goog|e@com  Thu Oct 12 06:27:14 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Wed, 11 Oct 2023 21:27:14 -0700
Subject: [Rd] FR: valid_regex() to test string validity as a regular
 expression
In-Reply-To: <CALK03d2fq+iS=sDHXC5ewvB82d5pqEh5n1qtzgOrsSM5Ee4Dkw@mail.gmail.com>
References: <CAD7Bkx9pEH78_1pUk172f4JZuLVcAgjpegVG8VE8r=5+doE-Zw@mail.gmail.com>
 <7257c6e5-9618-44fb-9483-671cdadf2223@gmail.com>
 <CAD7Bkx_iUdtNuiB4cb4qMmqyhAzMrpH3bm=JWmRQ7uzYKM86Dg@mail.gmail.com>
 <CALK03d2fq+iS=sDHXC5ewvB82d5pqEh5n1qtzgOrsSM5Ee4Dkw@mail.gmail.com>
Message-ID: <CAD7Bkx-yeGN79pudwwBpMBLVjAEi2Qya_EtFG6L1C2YG=BPqog@mail.gmail.com>

Great to know this exists in package space!

Of course, using re2 validation for a regex to be executed with TRE
(via grep*) is just begging for trouble (e.g. [1] suggests re2 is
closer to PCRE, [2] says "mostly" PCRE compatible). And overhauling
everything to use re2 just for regex validation is hardly practical.

[1] https://laurikari.net/tre/google-releases-the-re2-library/
[2] https://hackerboss.com/is-your-regex-matcher-up-to-snuff/

On Wed, Oct 11, 2023 at 4:02?PM Toby Hocking <tdhock5 at gmail.com> wrote:
>
> Hi Michael, it sounds like you don't want to use a CRAN package for
> this, but you may try re2, see below.
>
> > grepl("(invalid","subject",perl=TRUE)
> Error in grepl("(invalid", "subject", perl = TRUE) :
>   invalid regular expression '(invalid'
> In addition: Warning message:
> In grepl("(invalid", "subject", perl = TRUE) :
>   PCRE pattern compilation error
>     'missing closing parenthesis'
>     at ''
>
> > grepl("(invalid","subject",perl=FALSE)
> Error in grepl("(invalid", "subject", perl = FALSE) :
>   invalid regular expression '(invalid', reason 'Missing ')''
> In addition: Warning message:
> In grepl("(invalid", "subject", perl = FALSE) :
>   TRE pattern compilation error 'Missing ')''
>
> > re2::re2_regexp("(invalid")
> Error: missing ): (invalid
>
> On Tue, Oct 10, 2023 at 7:57?AM Michael Chirico via R-devel
> <r-devel at r-project.org> wrote:
> >
> > > Grepping an empty string might work in many cases...
> >
> > That's precisely why a base R offering is important, as a surer way of
> > validating in all cases. To be clear I am trying to directly access the
> > results of tre_regcomp().
> >
> > > it is probably more portable to simply be prepared to propagate such
> > errors from the actual use on real inputs
> >
> > That works best in self-contained calls -- foo(re) and we execute re inside
> > foo().
> >
> > But the specific context where I found myself looking for a regex validator
> > is more complicated (https://github.com/r-lib/lintr/pull/2225). User
> > supplies a regular expression in a configuration file, only "later" is it
> > actually supplied to grepl().
> >
> > Till now, we've done your suggestion -- just surface the regex error at run
> > time. But our goal is to make it friendlier and fail earlier at "compile
> > time" as the config is loaded, "long" before any regex is actually executed.
> >
> > At a bare minimum this is a good place to return a classed warning (say
> > invalid_regex_warning) to allow finer control than tryCatch(condition=).
> >
> > On Mon, Oct 9, 2023, 11:30?PM Tomas Kalibera <tomas.kalibera at gmail.com>
> > wrote:
> >
> > >
> > > On 10/10/23 01:57, Michael Chirico via R-devel wrote:
> > >
> > > It will be useful to package authors trying to validate input which is
> > > supposed to be a valid regular expression.
> > >
> > > As near as I can tell, the only way we can do so now is to run any
> > > regex function and check for the warning and/or condition to bubble
> > > up:
> > >
> > > valid_regex <- function(str) {
> > >   stopifnot(is.character(str), length(str) == 1L)
> > >   !inherits(tryCatch(grepl(str, ""), condition = identity), "condition")
> > > }
> > >
> > > That's pretty hefty/inscrutable for such a simple validation. I see a
> > > variety of similar approaches in CRAN packages [1], all slightly
> > > different. It would be good for R to expose a "canonical" way to run
> > > this validation.
> > >
> > > At root, the problem is that R does not expose the regex compilation
> > > routines like 'tre_regcomp', so from the R side we have to resort to
> > > hacky approaches.
> > >
> > > Hi Michael,
> > >
> > > I don't think you need compilation functions for that. If a regular
> > > expression is found invalid by a specific third party library R uses, the
> > > library should return and error to R and R should return an error to you,
> > > and you should probably propagate that to your users. Grepping an empty
> > > string might work in many cases as a test, but it is probably more portable
> > > to simply be prepared to propagate such errors from the actual use on real
> > > inputs. In theory, there could be some optimization for a particular case,
> > > the checking may not be the same - but that is the same say for compilation
> > > and checking.
> > >
> > > Things get slightly complicated by encoding/useBytes modes
> > > (tre_regwcomp, tre_regncomp, tre_regwncomp, tre_regcompb,
> > > tre_regncompb; all in tre.h), but all are already present in other
> > > regex routines, so this is doable.
> > >
> > > Re encodings, simply R strings should be valid in their encoding. This is
> > > not just for regular expressions but also for anything else. You shouldn't
> > > assume that R can handle invalid strings in any reasonable way. Definitely
> > > you shouldn't try adding invalid strings in tests - behavior with invalid
> > > strings is unspecified. To test whether a string is valid, there is
> > > validEnc() (or validUTF8()). But, again, it is probably safest to propagate
> > > errors from the regular expression R functions (in case the checks differ,
> > > particularly for non-UTF-8), also, duplicating the encoding checks can be a
> > > non-trivial overhead.
> > >
> > > If there was a strong need to have an automated way to somehow classify
> > > specifically errors from the regex libraries, perhaps R could attach some
> > > classes to them when the library tells.
> > >
> > > Tomas
> > >
> > > Exposing a function to compile regular expressions is common in other
> > > languages, e.g. Go [2], Python [3], JavaScript [4].
> > >
> > > [1] https://github.com/search?q=lang%3AR+%2Fis%5Ba-zA-Z0-9._%5D*reg%5Ba-zA-Z0-9._%5D*ex.*%28%3C-%7C%3D%29%5Cs*function%2F+org%3Acran&type=code
> > > [2] https://pkg.go.dev/regexp#Compile
> > > [3] https://docs.python.org/3/library/re.html#re.compile
> > > [4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
> > >
> > > ______________________________________________R-devel at r-project.org mailing listhttps://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Oct 12 09:27:56 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 12 Oct 2023 09:27:56 +0200
Subject: [Rd] About FlexiBLAS in the R-admin docs
In-Reply-To: <E698DC79-C258-4A95-A8C6-933A512CA108@gmail.com>
References: <mailman.53774.3.1695895202.51578.r-devel@r-project.org>
 <E698DC79-C258-4A95-A8C6-933A512CA108@gmail.com>
Message-ID: <25895.40956.219751.298928@stat.math.ethz.ch>

>>>>> George Ostrouchov 
>>>>>     on Wed, 11 Oct 2023 17:12:47 -0400 writes:

    > I agree that the "R Installation and Administration" guide statement about FlexiBLAS needs an update. Standard R in CentOS Stream 9, which is now downstream from Fedora, gives the following result for Matrix products in sessionInfo():
    >> sessionInfo()
    > R version 4.3.1 (2023-06-16)
    > Platform: x86_64-redhat-linux-gnu (64-bit)
    > Running under: CentOS Stream 9

    > Matrix products: default
    > BLAS/LAPACK: FlexiBLAS OPENBLAS-OPENMP;  LAPACK version 3.9.0
    > ?

Note that I also am an *occasional* happy user of FlexiBLAS (the
Fedora package *and* the corresponding CRAN package
'flexiblas'), using regular Fedora Linux,
*and* am happy to give public thanks for both to  I?aki ?car
(and whoever has helped with the project).


    > So OpenBLAS compiled with OpenMP is the default. FlexiBLAS (via the flexiblas package) is my favorite way to manage core use in multithreaded BLAS computations. It is also the default in the EasyBuild foss compiler toolchain for HPC clusters: https://docs.easybuild.io/common-toolchains/ 

    > What would be a good way to suggest or construct an update?

    > Best regards,
    > George

Thank you, George, for the offering of an update;  to answer the question

Create a patch to the *source* of that manual which is written
in "texinfo".
It is part of R's sources, the latest version hence is always

   https://svn.r-project.org/R/trunk/doc/manual/R-admin.texi

  (or "almost always current" at one of its github mirrors ..)

Best regards,
Martin

--
Martin Maechler
ETH Zurich  and  R Core team


    >> Date: Wed, 27 Sep 2023 15:14:43 +0200
    >> From: I?aki Ucar <iucar at fedoraproject.org>
    >> To: "r-devel at r-project.org" <R-devel at r-project.org>
    >> Subject: [Rd] About FlexiBLAS in the R-admin docs
    >> 
    >> Hi,
    >> 
    >> Not sure if this is the right place for this. The "R Installation and
    >> Administration" guide states:
    >> 
    >>> Apparently undocumented: FlexiBLAS on Fedora provides a complete LAPACK, but not the enhanced routines from ATLAS or OpenBLAS.
    >> 
    >> I'm not sure what this means. FlexiBLAS does provide 100% of BLAS and
    >> LAPACK, and if the active backend (say, OpenBLAS) implements an
    >> enhanced LAPACK routine, then the call is redirected to the backend.
    >> If the user switches to another backend and that routine is not
    >> available there, then the original LAPACK routine is dispatched
    >> instead.
    >> 
    >> Best,
    >> -- 
    >> I?aki ?car


From pd@me@ @end|ng |rom cb@@dk  Fri Oct 13 16:25:44 2023
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Fri, 13 Oct 2023 14:25:44 +0000
Subject: [Rd] R 4.3.2 scheduled for October 31
Message-ID: <ED7A693B-A436-456A-A676-9D97378F7F08@cbs.dk>

Full schedule available on developer.r-project.org in a short while.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Oct 20 21:56:20 2023
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 20 Oct 2023 14:56:20 -0500 (CDT)
Subject: [Rd] UseMethod forwarding of local variables
Message-ID: <a5f8e18-95db-fcb8-d8f7-97b42f265a2b@uiowa.edu>

UseMethod has since the beginning had the 'feature' that local
variables in the generic are added to the environment in which the
method body is evaluated. This is documented in ?UseMethod and
R-lang.texi, but use of this 'feature' has been explicitly discouraged
in R-lang.texi for many years.

This is an unfortunate design decision for a number of reasons (see
below), so the plan is to remove this 'feature' in the next major
release.

Fortunately only a small number of packages on CRAN (see below) seem
to make use of this feature directly; a few more as reverse
dependencies.  The maintainers of the directly affected packages will
be notified separately.

Current R-devel allows you to set the environment variable
R_USEMETHOD_FORWARD_LOCALS=none to run R without this feature or
R_USEMETHOD_FORWARD_LOCALS=error to signal an error when a forwarded
variable's value is used.

Some more details:

An example:

     > foo <- function(x) { yyy <- 77; UseMethod("foo") }
     > foo.bar <- function(x) yyy
     > foo(structure(1, class = "bar"))
     [1] 77

Some reasons the design is a bad idea:

- You can't determine what a method does without knowing what the
   generic it will be called from looks like.

- Code analysis (codetools, the compiler) can't analyze method
   code reliably.

- You can't debug a method on its own. For the foo() example,

     > foo.bar(structure(1, class = "bar"))
     Error in foo.bar(structure(1, class = "bar")) : object 'yyy' not found

- A method relying on these variables won't work when reached via NextMethod:

     > foo.baz <- function(x) NextMethod("foo")
     > foo(structure(2, class = c("baz", "bar")))
     Error in foo.bar(structure(2, class = c("baz", "bar"))) :
       object 'yyy' not found

The directly affected CRAN packages I have identified are:

- actuar
- quanteda
- optmatch
- rlang
- saeRobust
- Sim.DiffProc
- sugrrants
- texmex

Some of these fail with the environment set to 'error' but not to
'none', so they are getting a value from somewhere else that may or
may not be right.

Affected as revdeps of optmatch:

- cobalt
- htetree
- jointVIP
- MatchIt
- PCAmatchR
- rcbalance
- rcbsubset
- RItools
- stratamatch

Affected as revdeps of texmex:

- lax
- mobirep

Best,

luke

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @tp @end|ng |rom p|@kor@k|@com  Tue Oct 24 06:01:58 2023
From: @tp @end|ng |rom p|@kor@k|@com (Andrew Piskorski)
Date: Tue, 24 Oct 2023 00:01:58 -0400
Subject: [Rd] as.character.Date() strips names in R 4.3.2 beta, bug?
Message-ID: <ZTdBtsP6P8F99R4A@piskorski.com>


In previous versions of R, as.character.Date() retained any names on
its input vector.  In R 4.3.2 beta, it removes names.  Is this change
intentional, or a bug?  (For what it's worth, I greatly dislike this
change, and hope it gets changed back.)


$ grep DESCRIPTION /etc/lsb-release
DISTRIB_DESCRIPTION="Ubuntu 20.04.1 LTS"
$ R --vanilla
R version 4.2.1 Patched (2022-07-09 r82577) -- "Funny-Looking Kid"
> v2 <- structure(as.Date(c('2021-10-06','2021-10-08')) ,names=c('a','b'))
> v2
           a            b
"2021-10-06" "2021-10-08"
> class(v2)
[1] "Date"
> as.character(v2)
           a            b
"2021-10-06" "2021-10-08"
> as.character.Date(v2)
           a            b
"2021-10-06" "2021-10-08"


$ grep DESCRIPTION /etc/lsb-release
DISTRIB_DESCRIPTION="Ubuntu 22.04.3 LTS"
$ R --vanilla
R version 4.3.2 beta (2023-10-22 r85392) -- "Eye Holes"
> v2 <- structure(as.Date(c('2021-10-06','2021-10-08')) ,names=c('a','b'))
> v2
           a            b
"2021-10-06" "2021-10-08"
> class(v2)
[1] "Date"
> as.character(v2)
[1] "2021-10-06" "2021-10-08"
> as.character.Date(v2)
[1] "2021-10-06" "2021-10-08"

-- 
Andrew Piskorski <atp at piskorski.com>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Oct 24 10:53:10 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 24 Oct 2023 10:53:10 +0200
Subject: [Rd] as.character.Date() strips names in R 4.3.2 beta, bug?
In-Reply-To: <ZTdBtsP6P8F99R4A@piskorski.com>
References: <ZTdBtsP6P8F99R4A@piskorski.com>
Message-ID: <25911.34294.766198.668886@stat.math.ethz.ch>

>>>>> Andrew Piskorski 
>>>>>     on Tue, 24 Oct 2023 00:01:58 -0400 writes:

    > In previous versions of R, 

Not in R 4.3.0 or 4.3.1   {you are a bit late with updating ..}.

    >     as.character.Date() retained any names on
    > its input vector.  In R 4.3.2 beta, it removes names.  Is this change
    > intentional, or a bug?  (For what it's worth, I greatly dislike this
    > change, and hope it gets changed back.)

Yes, this change has been *very* intentional:  as.character() for
these objects since 4.3.0 (April 2023) finally behaves as other
as.character() methods and *does* drop attributes.

The NEWS entry
(visible since more than a year if you'd follows NEWS.Rd tweats/.. etc)  
is

   ? ?as.character(<POSIXt>)? now behaves more in line with the
     methods for atomic vectors such as numbers, and is no longer
     influenced by ?options()?.  Ditto for
     ?as.character(<Date>)?.  The ?as.character()? method gets
     arguments ?digits? and ?OutDec? with defaults _not_
     depending on ?options()?.  Use of ?as.character(*, format = .)?
     now warns.

At the time (Sep 2022!) there was quite some traffic on R-devel
about this, IIRC.

Often it's most convenient for people to use  format() instead
of as.character() if they want to keep names, notably here,
because before the fix, the as.character() method for Date and POSIXt
*was* identical to format()  --- contrary to all other methods
for "simple" vectors.

There's more about this if just simply at  ?as.character.Date

Best regards,
Martin

--
Martin Maechler
ETH Zurich  and  R Core team


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Oct 24 12:53:41 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 24 Oct 2023 12:53:41 +0200
Subject: [Rd] About FlexiBLAS in the R-admin docs
In-Reply-To: <E698DC79-C258-4A95-A8C6-933A512CA108@gmail.com>
References: <mailman.53774.3.1695895202.51578.r-devel@r-project.org>
 <E698DC79-C258-4A95-A8C6-933A512CA108@gmail.com>
Message-ID: <5bcf6c56-bcfb-4f8b-8ba0-91375a5a540e@gmail.com>


On 10/11/23 23:12, George Ostrouchov wrote:
> I agree that the "R Installation and Administration" guide statement about FlexiBLAS needs an update. Standard R in CentOS Stream 9, which is now downstream from Fedora, gives the following result for Matrix products in sessionInfo():
>
>> sessionInfo()
> R version 4.3.1 (2023-06-16)
> Platform: x86_64-redhat-linux-gnu (64-bit)
> Running under: CentOS Stream 9
>
> Matrix products: default
> BLAS/LAPACK: FlexiBLAS OPENBLAS-OPENMP;  LAPACK version 3.9.0
> ?
>
> So OpenBLAS compiled with OpenMP is the default. FlexiBLAS (via the flexiblas package) is my favorite way to manage core use in multithreaded BLAS computations. It is also the default in the EasyBuild foss compiler toolchain for HPC clusters: https://docs.easybuild.io/common-toolchains/

The output of session info is based on that flexiblas is used and on 
what flexiblas tells R is the backend it uses. R does not attempt to 
check that optimized LAPACK functions from the backend really end up 
called via flexiblas, and I don't think it could be realistically checked.

But I've checked one case manually in Fedora 38 using Linux perf tool. 
The following code:

S <- toeplitz((10:1)/10)
repeat { R <- rWishart(10, 20, S) }

uses dpotrf from LAPACK, which is optimized in OpenBLAS and ATLAS and 
the corresponding optimized implementations really appeared on the 
sampling profile for me from the backend libraries.

The comment from R Admin has been removed now and if anyone runs into 
the problem (that an optimized LAPACK function is not called from a 
backend that provides it), it would be best to report it with sufficient 
detail to flexiblas.

Best
Tomas

> What would be a good way to suggest or construct an update?
>
> Best regards,
> George
>
>
>> Date: Wed, 27 Sep 2023 15:14:43 +0200
>> From: =?UTF-8?Q?I=C3=B1aki_Ucar?= <iucar at fedoraproject.org>
>> To: "r-devel at r-project.org" <R-devel at r-project.org>
>> Subject: [Rd] About FlexiBLAS in the R-admin docs
>> Message-ID:
>> 	<CALEXWq2x9gygnxt6S906BkQHd139CP783bTDQC4wmeM-uKuW3g at mail.gmail.com>
>> Content-Type: text/plain; charset="utf-8"
>>
>> Hi,
>>
>> Not sure if this is the right place for this. The "R Installation and
>> Administration" guide states:
>>
>>> Apparently undocumented: FlexiBLAS on Fedora provides a complete LAPACK, but not the enhanced routines from ATLAS or OpenBLAS.
>> I'm not sure what this means. FlexiBLAS does provide 100% of BLAS and
>> LAPACK, and if the active backend (say, OpenBLAS) implements an
>> enhanced LAPACK routine, then the call is redirected to the backend.
>> If the user switches to another backend and that routine is not
>> available there, then the original LAPACK routine is dispatched
>> instead.
>>
>> Best,
>> -- 
>> I?aki ?car
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @tp @end|ng |rom p|@kor@k|@com  Tue Oct 24 19:39:55 2023
From: @tp @end|ng |rom p|@kor@k|@com (Andrew Piskorski)
Date: Tue, 24 Oct 2023 13:39:55 -0400
Subject: [Rd] as.character.Date() strips names in R 4.3.2 beta, bug?
In-Reply-To: <25911.34294.766198.668886@stat.math.ethz.ch>
References: <ZTdBtsP6P8F99R4A@piskorski.com>
 <25911.34294.766198.668886@stat.math.ethz.ch>
Message-ID: <ZTgBa1746/AG4Mjg@piskorski.com>

On Tue, Oct 24, 2023 at 10:53:10AM +0200, Martin Maechler wrote:

> Yes, this change has been *very* intentional:  as.character() for
> these objects since 4.3.0 (April 2023) finally behaves as other
> as.character() methods and *does* drop attributes.
[...]

Thank you for the detailed explanation and pointers to the old info
I'd missed, Martin.  The as.character.Date tip in particular was very
helpful in adapting my code to work with this change.

-- 
Andrew Piskorski <atp at piskorski.com>


From ee224 @end|ng |rom b@th@@c@uk  Wed Oct 25 11:33:17 2023
From: ee224 @end|ng |rom b@th@@c@uk (Vangelis Evangelou)
Date: Wed, 25 Oct 2023 09:33:17 +0000
Subject: [Rd] stats package: Request to change the default argument
 show.residuals in print.summary.glm to TRUE
Message-ID: <LO0P302MB0196BB88A81A99519859BD73CDDEA@LO0P302MB0196.GBRP302.PROD.OUTLOOK.COM>

Hi all.

Since version 4.3.0, print.summary.glm does not print the residuals 5-number summary. This has to be explicitly requested with
print(summary(glm(...)), show.residuals = TRUE)
I believe this should be the default behaviour, i.e.,
summary(glm(...))
should print the residuals 5-number summary by default. The reason for this is

  1.  The residuals 5-number summary is helpful as can be used to assess the goodness-of-fit of the model by checking for symmetry and potentially outlying observations.
  2.  It is consistent with the output of print.summary.lm, so users are familiar with this output and its usefulness.

I'm happy to submit a patch that implements this change, if you agree.

Best,
Vangelis


	[[alternative HTML version deleted]]


From h||m@r@berger @end|ng |rom ch@r|te@de  Thu Oct 26 09:30:58 2023
From: h||m@r@berger @end|ng |rom ch@r|te@de (Berger, Hilmar)
Date: Thu, 26 Oct 2023 07:30:58 +0000
Subject: [Rd] Description of base::levels()
Message-ID: <6948c3e3-b683-4700-ad2f-801fe9b335d3@charite.de>

Dear list,

I have a doubt/suggestion to change the help page of  base::levels().

in the examples section, one reads (R 4.3.1):

## we can add levels this way:
f <- factor(c("a","b"))
levels(f) <- c("c", "a", "b")
f

[1] c a
Levels: c a b

f <- factor(c("a","b"))
levels(f) <- list(C = "C", A = "a", B = "b")
f


[1] A B
Levels: C A B


However, none of the examples only adds a level - the first replaces level "a" with "c", "b" with "a" and then adds the new level "b", while the second replaces levels a and b with their upper-case versions and adds level C.

This might lead to additional confusion since levels() <-  behaves quite differently in this aspect from the levels argument of factor(), e.g.

f1 <- factor(c("a","b"))

f1 <- factor(f1, levels = c("c","a","b") )

f1

[1] a b
Levels: c a b

would indeed add a new level "c" while maintaining the existing ones.

I would suggest to at least replace the "add levels" in the comment by "modify levels".

Does this make sense?

Best regards

Hilmar


	[[alternative HTML version deleted]]


From quent|n@thorne @end|ng |rom protonm@||@com  Fri Oct 27 12:16:55 2023
From: quent|n@thorne @end|ng |rom protonm@||@com (quentin.thorne)
Date: Fri, 27 Oct 2023 10:16:55 +0000
Subject: [Rd] Wayland Display Support in R Plot
Message-ID: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>

Hello,

I'm interested in understanding the current state of Wayland display support in R plot, and I was wondering if any progress or discussions have taken place regarding this matter.

As Wayland continues to gain popularity as a display protocol on modern Linux systems, having Wayland support for R's plotting capabilities would be a significant enhancement.

Could anyone provide information on the current status of Wayland support in R plot? Are there any ongoing efforts, discussions, or packages in development that address this issue? I would appreciate any insights or guidance in this regard.

Thank you for your time and assistance.

Best regards,

Quentin Thorne
	[[alternative HTML version deleted]]


From @d@mboegh @end|ng |rom gm@||@com  Fri Oct 27 13:32:37 2023
From: @d@mboegh @end|ng |rom gm@||@com (Adam marstrand)
Date: Fri, 27 Oct 2023 13:32:37 +0200
Subject: [Rd] Issues with current data.matrix implementation
Message-ID: <CADkg1x0bxR6eX20XK_E_5bwdogO1qPsQGtERKQ3DWos_KXa4Jg@mail.gmail.com>

Hi R people,

I have recently had to use some old code which utilizes data.matrix and
found a functionality which I found unintuitive. We are converting a
dataframe containing numerical values stored as character strings to a
matrix using the data.matrix function.

This does unfortunately not yield a numerical matrix consisting of the same
numbers stored in the original matrix - see for example below:

> df <-
data.frame(a=c("1","2","7","10"),b=c("1","7","10","19"),c=c("a","b","c","a"),d=c("1","7","a","b"))
> df
   a   b    c d
1  1  1    a 1
2  2  7    b 7
3  7  10  c a
4 10 19  a b

> data.matrix(df)
     a b c d
[1,] 1 1 1 1
[2,] 3 4 2 2
[3,] 4 2 3 3
[4,] 2 3 1 4

The current implementation of data.matrix iterates over each column in the
dataframe and utilizes the following code to convert a column into
integers:

if (is.character(xi)) {
      frame[[i]] <- as.integer(as.factor(xi))
      next
    }

While I kind of understand the reasoning here, i.e. you avoid NA's when the
characters are non-numerical, this returns a (to me) unintuitive result
when providing the function with a dataframe containing numerical
characters. This makes the values of any two columns output from
data.matrix very difficult to compare, and not easily traceable to the
original data. Was this really the original intent behind the function?

I would like to propose a change, which instead checks whether the
data.matrix function can convert a column to integers without utilizing the
as.factor intermediary. Otherwise it will use the current implementation.

if (is.character(xi)) {
      frame[[i]] <- tryCatch({
        as.integer(xi)
      }, warning = function(war) {
        f = as.integer(factor(xi))
        return(f)
      })
      next
 }

This change results in the following outputs from the data.matrix function
(using the earlier df):

> data.matrix_new(df)
      a  b c d
[1,]  1  1 1 1
[2,]  2  7 2 2
[3,]  7 10 3 3
[4,] 10 19 1 4

Thanks for considering this!
Best,
Adam Marstrand

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sun Oct 29 18:42:19 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sun, 29 Oct 2023 10:42:19 -0700
Subject: [Rd] dim<-() changed in R-devel;
 no longer removing "dimnames" when doing dim(x) <- dim(x)
Message-ID: <CAFDcVCTZTjS6ojk=7SordyK517NcKD8KoCK6RgLoYgcoZ13DnQ@mail.gmail.com>

Hello,

the fix of PR18612 (https://bugs.r-project.org/show_bug.cgi?id=18612)
in r85380 (https://github.com/wch/r-source/commit/2653cc6203fce4c48874111c75bbccac3ac4e803)
caused a change in `dim<-()`.  Specifically, in the past, any
`dim<-()` assignment would _always_ remove "dimnames" and "names"
attributes per help("dim"):

    The replacement method changes the "dim" attribute (provided the
new value is compatible) and removes any "dimnames" and "names"
attributes.

In the new version, assigning the same "dim" as before will no longer
remove "dimnames".  I'm reporting here to check whether this change
was intended, or if it was an unintended side effect of the bug fix.

For example, in R Under development (unstable) (2023-10-21 r85379), we
would get:

> x <- array(1:2, dim=c(1,2), dimnames=list("A", c("a","b")))
> str(dimnames(x))
List of 2
 $ : chr "A"
 $ : chr [1:2] "a" "b"

> dim(x) <- dim(x)    ## Removes "dimnames" no matter what
> str(dimnames(x))
 NULL


whereas in R Under development (unstable) (2023-10-21 r85380) and
beyond, we now get:

> x <- array(1:2, dim=c(1,2), dimnames=list("A", c("a","b")))
> str(dimnames(x))
List of 2
 $ : chr "A"
 $ : chr [1:2] "a" "b"

> dim(x) <- dim(x)    ## No longer removes "dimnames"
> str(dimnames(x))
List of 2
 $ : chr "A"
 $ : chr [1:2] "a" "b"

> dim(x) <- rev(dim(x))  ## Still removes "dimnames"
> str(dimnames(x))
 NULL

/Henrik


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Sun Oct 29 19:54:39 2023
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Mon, 30 Oct 2023 07:54:39 +1300
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
Message-ID: <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>

Hi

I am unaware of any Wayland display support.

One useful way forward would be an R package that provides such a device 
(along the lines of 'Cairo', 'tikzDevice', et al)

Paul

On 27/10/23 23:16, quentin.thorne via R-devel wrote:
> Hello,
> 
> I'm interested in understanding the current state of Wayland display 
> support in R plot, and I was wondering if any progress or discussions 
> have taken place regarding this matter.
> 
> As Wayland continues to gain popularity as a display protocol on modern 
> Linux systems, having Wayland support for R's plotting capabilities 
> would be a significant enhancement.
> 
> Could anyone provide information on the current status of Wayland 
> support in R plot? Are there any ongoing efforts, discussions, or 
> packages in development that address this issue? I would appreciate any 
> insights or guidance in this regard.
> 
> Thank you for your time and assistance.
> 
> Best regards,
> 
> Quentin Thorne
> [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>

-- 
Dr Paul Murrell
Te Kura Tatauranga | Department of Statistics
Waipapa Taumata Rau | The University of Auckland
Private Bag 92019, Auckland 1142, New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
www.stat.auckland.ac.nz/~paul/


From edd @end|ng |rom deb|@n@org  Sun Oct 29 20:38:20 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 29 Oct 2023 14:38:20 -0500
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
Message-ID: <25918.46252.345432.450442@rob.eddelbuettel.com>


On 30 October 2023 at 07:54, Paul Murrell wrote:
| I am unaware of any Wayland display support.
| 
| One useful way forward would be an R package that provides such a device 
| (along the lines of 'Cairo', 'tikzDevice', et al)

As I understand it, it is a protocol, and not a device.

Several Linux distributions have long defaulted to it, so we already should
have thousands of users. While 'not X11' it provides a compatibility layer
and should be seamless.

I think I needed to fall back to X11 for a particular applications (likely
OBS) so my session tells me (under Settings -> About -> Windowing System) I
am still running X11. I'll check again once I upgrade from Ubuntu 23.04 to
Ubuntu 23.10

See https://en.wikipedia.org/wiki/Wayland_(protocol) for more.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Oct 29 21:20:07 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 30 Oct 2023 09:20:07 +1300
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <25918.46252.345432.450442@rob.eddelbuettel.com>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
 <25918.46252.345432.450442@rob.eddelbuettel.com>
Message-ID: <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>



> On 30/10/2023, at 8:38 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
> 
> 
> On 30 October 2023 at 07:54, Paul Murrell wrote:
> | I am unaware of any Wayland display support.
> | 
> | One useful way forward would be an R package that provides such a device 
> | (along the lines of 'Cairo', 'tikzDevice', et al)
> 
> As I understand it, it is a protocol, and not a device.
> 

Well, X11 is a protocol, not a device, either.

Wayland is a lot worse, since it doesn't really do much at all - the clients are fully responsible for drawing (doesn't even support remote connections).

Given that Wayland is essentially a "dumb" framebuffer, probably the easiest way would be to take Cairo and add a libwayland back-end. Cairo is already modular so it's relatively straight-forward to add a new back-end to it (I'd probably just copy xlib-backend.c and replace X11 calls with libwayland calls since the low-level design is the same).

However, that is limited only to devices, so you would still run R code in the shell (or other GUI that may or may not by Wayland-based). Given that Wayland is so minimal, you'd need some GUI library for anything beyond that - so you may was well just run a Wayland-based browser and be done with it saving you all the bother (oh, right, that's called RStudio ;)).

One package that may be worth adding Wayland backend to is rgl so you get OpenGL on Wayland - I'd simply re-write it to use GLFW so it works across all platforms and including Wayland.

Cheers,
Simon



> Several Linux distributions have long defaulted to it, so we already should
> have thousands of users. While 'not X11' it provides a compatibility layer
> and should be seamless.
> 
> I think I needed to fall back to X11 for a particular applications (likely
> OBS) so my session tells me (under Settings -> About -> Windowing System) I
> am still running X11. I'll check again once I upgrade from Ubuntu 23.04 to
> Ubuntu 23.10
> 
> See https://en.wikipedia.org/wiki/Wayland_(protocol) for more.
> 
> Dirk
> 
> -- 
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Oct 29 21:48:01 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 29 Oct 2023 16:48:01 -0400
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
 <25918.46252.345432.450442@rob.eddelbuettel.com>
 <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
Message-ID: <53b676f5-11ad-42c7-b012-5e21bb8461e1@gmail.com>

On 29/10/2023 4:20 p.m., Simon Urbanek wrote:
> 
> 
>> On 30/10/2023, at 8:38 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
>>
>>
>> On 30 October 2023 at 07:54, Paul Murrell wrote:
>> | I am unaware of any Wayland display support.
>> |
>> | One useful way forward would be an R package that provides such a device
>> | (along the lines of 'Cairo', 'tikzDevice', et al)
>>
>> As I understand it, it is a protocol, and not a device.
>>
> 
> Well, X11 is a protocol, not a device, either.
> 
> Wayland is a lot worse, since it doesn't really do much at all - the clients are fully responsible for drawing (doesn't even support remote connections).
> 
> Given that Wayland is essentially a "dumb" framebuffer, probably the easiest way would be to take Cairo and add a libwayland back-end. Cairo is already modular so it's relatively straight-forward to add a new back-end to it (I'd probably just copy xlib-backend.c and replace X11 calls with libwayland calls since the low-level design is the same).
> 
> However, that is limited only to devices, so you would still run R code in the shell (or other GUI that may or may not by Wayland-based). Given that Wayland is so minimal, you'd need some GUI library for anything beyond that - so you may was well just run a Wayland-based browser and be done with it saving you all the bother (oh, right, that's called RStudio ;)).
> 
> One package that may be worth adding Wayland backend to is rgl so you get OpenGL on Wayland - I'd simply re-write it to use GLFW so it works across all platforms and including Wayland.

I looked into using GLFW a while ago, but it seemed too hard to do 
without other really major changes to rgl, so that's not going to happen 
soon (unless someone else does it).

I think the issue was that it was hard to get it to work with the 
ancient OpenGL 1.2 that rgl uses.  I forget whether it was just hard or 
actually impossible.

I am slowly working towards having rgl use newer OpenGL versions, but I 
don't expect this to be done for quite a while.

Duncan Murdoch

> Cheers,
> Simon
> 
> 
> 
>> Several Linux distributions have long defaulted to it, so we already should
>> have thousands of users. While 'not X11' it provides a compatibility layer
>> and should be seamless.
>>
>> I think I needed to fall back to X11 for a particular applications (likely
>> OBS) so my session tells me (under Settings -> About -> Windowing System) I
>> am still running X11. I'll check again once I upgrade from Ubuntu 23.04 to
>> Ubuntu 23.10
>>
>> See https://en.wikipedia.org/wiki/Wayland_(protocol) for more.
>>
>> Dirk
>>
>> -- 
>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Sun Oct 29 22:29:28 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 29 Oct 2023 16:29:28 -0500
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
 <25918.46252.345432.450442@rob.eddelbuettel.com>
 <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
Message-ID: <25918.52920.323280.338555@rob.eddelbuettel.com>


On 30 October 2023 at 09:20, Simon Urbanek wrote:
| > On 30/10/2023, at 8:38 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
| > On 30 October 2023 at 07:54, Paul Murrell wrote:
| > | I am unaware of any Wayland display support.
| > | 
| > | One useful way forward would be an R package that provides such a device 
| > | (along the lines of 'Cairo', 'tikzDevice', et al)
| > 
| > As I understand it, it is a protocol, and not a device.
| > 
| 
| Well, X11 is a protocol, not a device, either.

Point taken.

| > I think I needed to fall back to X11 for a particular applications (likely
| > OBS) so my session tells me (under Settings -> About -> Windowing System) I
| > am still running X11. I'll check again once I upgrade from Ubuntu 23.04 to
| > Ubuntu 23.10

Booted an older laptop using 22.04, selected 'not X11' in the gdm dialog but
the same Gnome Menu still says Windowing System: X11.  So I am no longer sure
how I would convince myself if I am under Wayland there or not.  The answers
in https://unix.stackexchange.com/questions/202891/how-to-know-whether-wayland-or-x11-is-being-used
suggest I still run X11 too.  So I got nuttin' here.

In any event, I read OP as asking 'do we need a new device' and I still think
that the answer to that still is 'likely not' as the X11 compatibility layer
should cover this.  

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Oct 29 23:20:30 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 30 Oct 2023 11:20:30 +1300
Subject: [Rd] GLFW [Was: Wayland Display Support in R Plot]
In-Reply-To: <53b676f5-11ad-42c7-b012-5e21bb8461e1@gmail.com>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
 <25918.46252.345432.450442@rob.eddelbuettel.com>
 <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
 <53b676f5-11ad-42c7-b012-5e21bb8461e1@gmail.com>
Message-ID: <095678C7-0403-46FD-968E-825D0B03F30D@R-project.org>

Duncan,

at least according to the docs GLFW doesn't really care - it will forward whatever OpenGL is available on the platform. In fact it says:

"By default it also includes the OpenGL header from your development environment. On some platforms this header only supports older versions of OpenGL. The most extreme case is Windows, where it typically only supports OpenGL 1.2."

so, really, OpenGL 1.2 is perfect.

You can request a minimal version, but don't have to, i.e., old versions are ok. I have tested libglfw3 (3.3.8) with OpenGL 1.2 (on macOS) and it worked just fine.

That said, both points were meant for the list in general - those are nice self-contained projects (add libwayland to Cairo and GLFW to rgl) for someone with spare time to contribute...

Cheers,
Simon



> On 30/10/2023, at 9:48 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 29/10/2023 4:20 p.m., Simon Urbanek wrote:
>>> On 30/10/2023, at 8:38 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
>>> 
>>> 
>>> On 30 October 2023 at 07:54, Paul Murrell wrote:
>>> | I am unaware of any Wayland display support.
>>> |
>>> | One useful way forward would be an R package that provides such a device
>>> | (along the lines of 'Cairo', 'tikzDevice', et al)
>>> 
>>> As I understand it, it is a protocol, and not a device.
>>> 
>> Well, X11 is a protocol, not a device, either.
>> Wayland is a lot worse, since it doesn't really do much at all - the clients are fully responsible for drawing (doesn't even support remote connections).
>> Given that Wayland is essentially a "dumb" framebuffer, probably the easiest way would be to take Cairo and add a libwayland back-end. Cairo is already modular so it's relatively straight-forward to add a new back-end to it (I'd probably just copy xlib-backend.c and replace X11 calls with libwayland calls since the low-level design is the same).
>> However, that is limited only to devices, so you would still run R code in the shell (or other GUI that may or may not by Wayland-based). Given that Wayland is so minimal, you'd need some GUI library for anything beyond that - so you may was well just run a Wayland-based browser and be done with it saving you all the bother (oh, right, that's called RStudio ;)).
>> One package that may be worth adding Wayland backend to is rgl so you get OpenGL on Wayland - I'd simply re-write it to use GLFW so it works across all platforms and including Wayland.
> 
> I looked into using GLFW a while ago, but it seemed too hard to do without other really major changes to rgl, so that's not going to happen soon (unless someone else does it).
> 
> I think the issue was that it was hard to get it to work with the ancient OpenGL 1.2 that rgl uses.  I forget whether it was just hard or actually impossible.
> 
> I am slowly working towards having rgl use newer OpenGL versions, but I don't expect this to be done for quite a while.
> 
> Duncan Murdoch
> 
>> Cheers,
>> Simon
>>> Several Linux distributions have long defaulted to it, so we already should
>>> have thousands of users. While 'not X11' it provides a compatibility layer
>>> and should be seamless.
>>> 
>>> I think I needed to fall back to X11 for a particular applications (likely
>>> OBS) so my session tells me (under Settings -> About -> Windowing System) I
>>> am still running X11. I'll check again once I upgrade from Ubuntu 23.04 to
>>> Ubuntu 23.10
>>> 
>>> See https://en.wikipedia.org/wiki/Wayland_(protocol) for more.
>>> 
>>> Dirk
>>> 
>>> -- 
>>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Oct 30 11:53:21 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 30 Oct 2023 11:53:21 +0100
Subject: [Rd] dim<-() changed in R-devel;
 no longer removing "dimnames" when doing dim(x) <- dim(x)
In-Reply-To: <CAFDcVCTZTjS6ojk=7SordyK517NcKD8KoCK6RgLoYgcoZ13DnQ@mail.gmail.com>
References: <CAFDcVCTZTjS6ojk=7SordyK517NcKD8KoCK6RgLoYgcoZ13DnQ@mail.gmail.com>
Message-ID: <25919.35617.446508.577753@stat.math.ethz.ch>


>>>>> Henrik Bengtsson 
>>>>>     on Sun, 29 Oct 2023 10:42:19 -0700 writes:

    > Hello,

    > the fix of PR18612
    > (https://bugs.r-project.org/show_bug.cgi?id=18612) in
    > r85380
    > (https://github.com/wch/r-source/commit/2653cc6203fce4c48874111c75bbccac3ac4e803)
    > caused a change in `dim<-()`.  Specifically, in the past,
    > any `dim<-()` assignment would _always_ remove "dimnames"
    > and "names" attributes per help("dim"):


    >     The replacement method changes the "dim" attribute
    > (provided the new value is compatible) and removes any
    > "dimnames" and "names" attributes.

    > In the new version, assigning the same "dim" as before
    > will no longer remove "dimnames".  I'm reporting here to
    > check whether this change was intended, or if it was an
    > unintended side effect of the bug fix.

    > For example, in R Under development (unstable) (2023-10-21
    > r85379), we would get:

    >> x <- array(1:2, dim=c(1,2), dimnames=list("A",
    >> c("a","b"))) str(dimnames(x))
    > List of 2 $ : chr "A" $ : chr [1:2] "a" "b"

    >> dim(x) <- dim(x) ## Removes "dimnames" no matter what
    >> str(dimnames(x))
    >  NULL


    > whereas in R Under development (unstable) (2023-10-21
    > r85380) and beyond, we now get:

    >> x <- array(1:2, dim=c(1,2), dimnames=list("A",
    >> c("a","b"))) str(dimnames(x))
    > List of 2 $ : chr "A" $ : chr [1:2] "a" "b"

    >> dim(x) <- dim(x) ## No longer removes "dimnames"
    >> str(dimnames(x))
    > List of 2 $ : chr "A" $ : chr [1:2] "a" "b"

    >> dim(x) <- rev(dim(x)) ## Still removes "dimnames"
    >> str(dimnames(x))
    >  NULL

    > /Henrik

Thank you, Henrik.

This is "funny" (in an unusal sense):
indeed, the change was *in*advertent, by me (svn rev 85380).

I had experimentally {i.e., only in my own private version of R-devel!}
modified the behavior of `dim<-` somewhat 
such it does *not* unnecessarily drop dimnames,
e.g., in your   `dim(x) <- dim(x)` case above,
one could really argue that it's a "true loss" if x loses
dimnames "unnecessarily" ... 

OTOH, I knew in the mean time that  `dim<-` has always been
documented to drop dimnames in all cases,  and even more
importantly, I got a strong recommendation to *not* go further
with this idea -- not only for back compatibility reasons, but
also for internal logical consistency.

Most probably, we will just revert this inadvertent change,
but before that ... since it has been out in the wild anyway,
we could quickly consider if it *did* break code.

I assume it did, or you would not have noticed ?

Martin


From Roger@B|v@nd @end|ng |rom nhh@no  Mon Oct 30 12:26:01 2023
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Mon, 30 Oct 2023 11:26:01 +0000
Subject: [Rd] Wayland Display Support in R Plot
Message-ID: <SV0P279MB047573DF4EAD91093C4080D1EEA1A@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>

I also noticed this:

https://www.theregister.com/2023/10/13/gnome_proposes_dropping_x11/

which is concerning. Until now, I've retained X11 on Fedora because of difficulties in screen sharing via zoom in Wayland sessions.

Roger

--
Roger Bivand
Emeritus Professor
Norwegian School of Economics
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway
Roger.Bivand at nhh.no

From w|||em @end|ng |rom w||gtenberg@n|  Mon Oct 30 13:17:33 2023
From: w|||em @end|ng |rom w||gtenberg@n| (Willem Ligtenberg)
Date: Mon, 30 Oct 2023 13:17:33 +0100
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <25918.52920.323280.338555@rob.eddelbuettel.com>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
 <25918.46252.345432.450442@rob.eddelbuettel.com>
 <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
 <25918.52920.323280.338555@rob.eddelbuettel.com>
Message-ID: <e92c02b9-84c6-4fd5-821d-4f0ee2919a1b@wligtenberg.nl>

On 29-10-2023 22:29, Dirk Eddelbuettel wrote:
> On 30 October 2023 at 09:20, Simon Urbanek wrote:
> | > On 30/10/2023, at 8:38 AM, Dirk Eddelbuettel<edd at debian.org>  wrote:
> | > On 30 October 2023 at 07:54, Paul Murrell wrote:
> | > | I am unaware of any Wayland display support.
> | > |
> | > | One useful way forward would be an R package that provides such a device
> | > | (along the lines of 'Cairo', 'tikzDevice', et al)
> | >
> | > As I understand it, it is a protocol, and not a device.
> | >
> |
> | Well, X11 is a protocol, not a device, either.
>
> Point taken.
>
> | > I think I needed to fall back to X11 for a particular applications (likely
> | > OBS) so my session tells me (under Settings -> About -> Windowing System) I
> | > am still running X11. I'll check again once I upgrade from Ubuntu 23.04 to
> | > Ubuntu 23.10
>
> Booted an older laptop using 22.04, selected 'not X11' in the gdm dialog but
> the same Gnome Menu still says Windowing System: X11.  So I am no longer sure
> how I would convince myself if I am under Wayland there or not.  The answers
> inhttps://unix.stackexchange.com/questions/202891/how-to-know-whether-wayland-or-x11-is-being-used
> suggest I still run X11 too.  So I got nuttin' here.
>
> In any event, I read OP as asking 'do we need a new device' and I still think
> that the answer to that still is 'likely not' as the X11 compatibility layer
> should cover this.
>
> Dirk
>
I just tried it on Ubuntu 23.10. It seems to just work.
See screenshot here: https://nextcloud.wligtenberg.nl/s/jnbDT4ZiHw2JQ8H
I should be using wayland, and as far as I know I haven't done anything 
special to make this work. But there might be some compatibility layer 
that is active by default.
If it helps, I could try again using distrobox.

Kind regards,

Willem

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Oct 30 13:46:08 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 30 Oct 2023 07:46:08 -0500
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <e92c02b9-84c6-4fd5-821d-4f0ee2919a1b@wligtenberg.nl>
References: <2hucKaz80G9FeAnZlo6F3ti_Y4wcvNkje6QvQcPgLGgxzqb3YIY470MwGZAit4VW2REluwTH062EPltAFjfyUfJ1fTk0dmrcwHjwsO0dtG4=@protonmail.com>
 <50742ade-f12c-4e32-85ff-481ed7e104c8@stat.auckland.ac.nz>
 <25918.46252.345432.450442@rob.eddelbuettel.com>
 <DBA3729C-1876-44B9-9E29-47D62B551CD9@R-project.org>
 <25918.52920.323280.338555@rob.eddelbuettel.com>
 <e92c02b9-84c6-4fd5-821d-4f0ee2919a1b@wligtenberg.nl>
Message-ID: <25919.42384.420952.37323@rob.eddelbuettel.com>


On 30 October 2023 at 13:17, Willem Ligtenberg via R-devel wrote:
| I just tried it on Ubuntu 23.10. It seems to just work.
| See screenshot here: https://nextcloud.wligtenberg.nl/s/jnbDT4ZiHw2JQ8H
| I should be using wayland, and as far as I know I haven't done anything 
| special to make this work. But there might be some compatibility layer 
| that is active by default.

Same here under trusted 22.04 LTS on that older / not quite healthy laptop.
All it took was to set WaylandEnable=true in /etc/gdm3/custom.conf and a
systemctl call to restart gdm3.

R plots fine in the x11() default device via plot(cumsum(rnorm(100)), type="l").

Like Roger, I had issues with some third-party apps (obs to record lectures
comes to mind, maybe also zoom ?) so "we'll see".

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |uc@r @end|ng |rom |edor@project@org  Mon Oct 30 14:13:08 2023
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 30 Oct 2023 14:13:08 +0100
Subject: [Rd] Wayland Display Support in R Plot
In-Reply-To: <SV0P279MB047573DF4EAD91093C4080D1EEA1A@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
References: <SV0P279MB047573DF4EAD91093C4080D1EEA1A@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
Message-ID: <CALEXWq0LMFevo1yYwbaSYKwXQscR-3BZMg5DbXFMifek3VoFfA@mail.gmail.com>

El lun., 30 oct. 2023 12:26, Roger Bivand <Roger.Bivand at nhh.no> escribi?:

> I also noticed this:
>
> https://www.theregister.com/2023/10/13/gnome_proposes_dropping_x11/
>
> which is concerning. Until now, I've retained X11 on Fedora because of
> difficulties in screen sharing via zoom in Wayland sessions.
>

KDE Plasma user here. FWIW, I've been using Wayland for a year and a half
now with no issues, including screen sharing, etc.

I?aki


> Roger
>
> --
> Roger Bivand
> Emeritus Professor
> Norwegian School of Economics
> Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway
> Roger.Bivand at nhh.no
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From x|e @end|ng |rom y|hu|@n@me  Mon Oct 30 17:18:53 2023
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Mon, 30 Oct 2023 11:18:53 -0500
Subject: [Rd] system()/system2() using short paths of commands on Windows?
Message-ID: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>

Hi,

It may have been so for 20+ years but I just discovered today that system()
would always try to use the short path of a command on Windows:
https://github.com/wch/r-source/blob/635a67/src/gnuwin32/run.c#L141 If
that's true, I wonder if it could provide an option to disable this
behavior, because we recently ran into a case in which short paths wouldn't
work. I wonder what the original motivation of using short paths was. If it
was to avoid spaces in paths, wouldn't shQuote() work? Thanks!

Regards,
Yihui

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Oct 30 18:34:28 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 30 Oct 2023 18:34:28 +0100
Subject: [Rd] 
 system()/system2() using short paths of commands on Windows?
In-Reply-To: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>
References: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>
Message-ID: <e62e3831-6e3d-48ac-b9fc-ec359687b03f@gmail.com>


On 10/30/23 17:18, Yihui Xie wrote:
> Hi,
>
> It may have been so for 20+ years but I just discovered today that system()
> would always try to use the short path of a command on Windows:
> https://github.com/wch/r-source/blob/635a67/src/gnuwin32/run.c#L141 If
> that's true, I wonder if it could provide an option to disable this
> behavior, because we recently ran into a case in which short paths wouldn't
> work. I wonder what the original motivation of using short paths was. If it
> was to avoid spaces in paths, wouldn't shQuote() work? Thanks!

Could you please file a minimal reproducible example that exhibits the 
problem caused by an attempt to translate to short path names (note 
there is a fallback to long path names)? In principle, short path names 
should work when they are returned by Windows, this should not be 
causing any trouble.

Thanks
Tomas

>
> Regards,
> Yihui
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From x|e @end|ng |rom y|hu|@n@me  Mon Oct 30 19:07:43 2023
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Mon, 30 Oct 2023 13:07:43 -0500
Subject: [Rd] 
 system()/system2() using short paths of commands on Windows?
In-Reply-To: <e62e3831-6e3d-48ac-b9fc-ec359687b03f@gmail.com>
References: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>
 <e62e3831-6e3d-48ac-b9fc-ec359687b03f@gmail.com>
Message-ID: <CANROs4ev55PboivB1YpY59RDBQSR_KaHswAZ_JjUz3mFjtcvfQ@mail.gmail.com>

Sure. I'm not sure if it's possible to make it easier to reproduce, but for
now the example would require installing TinyTeX (via
tinytex::install_tinytex(), which can be later uninstalled cleanly via
tinytex::uninstall_tinytex() after you finish the investigation). Then run:

  system2('fmtutil-sys', '--all')
  # or tinytex:::fmtutil() if fmtutil-sys.exe is not on PATH

and TeX Live would throw an error like this:

  ...\username\AppData\Roaming\TinyTeX\bin\windows\runscript.tlu:864: no
appropriate script or program found: fmtuti~1

The command "fmtutil-sys" is longer than 8 characters and hence shortened
to "fmtutil~1". Yes, in principle, TeX Live should work with short path
names, but it doesn't at the moment. I haven't figured out if it was a
recent breakage in TeX Live or not (I've tried to contact TeX Live
developers).

BTW, shell('fmtutil-sys --all') works fine.

Regards,
Yihui
--
https://yihui.org


On Mon, Oct 30, 2023 at 12:34?PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 10/30/23 17:18, Yihui Xie wrote:
> > Hi,
> >
> > It may have been so for 20+ years but I just discovered today that
> system()
> > would always try to use the short path of a command on Windows:
> > https://github.com/wch/r-source/blob/635a67/src/gnuwin32/run.c#L141 If
> > that's true, I wonder if it could provide an option to disable this
> > behavior, because we recently ran into a case in which short paths
> wouldn't
> > work. I wonder what the original motivation of using short paths was. If
> it
> > was to avoid spaces in paths, wouldn't shQuote() work? Thanks!
>
> Could you please file a minimal reproducible example that exhibits the
> problem caused by an attempt to translate to short path names (note
> there is a fallback to long path names)? In principle, short path names
> should work when they are returned by Windows, this should not be
> causing any trouble.
>
> Thanks
> Tomas
>
> >
> > Regards,
> > Yihui
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Oct 30 21:02:58 2023
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 30 Oct 2023 20:02:58 +0000
Subject: [Rd] 
 system()/system2() using short paths of commands on Windows?
In-Reply-To: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>
References: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>
Message-ID: <ead63e0e-70fc-48e8-82d9-460d0d730488@stats.ox.ac.uk>

On 30/10/2023 16:18, Yihui Xie wrote:
> Hi,
> 
> It may have been so for 20+ years but I just discovered today that system()
> would always try to use the short path of a command on Windows:
> https://github.com/wch/r-source/blob/635a67/src/gnuwin32/run.c#L141 If
> that's true, I wonder if it could provide an option to disable this
> behavior, because we recently ran into a case in which short paths wouldn't
> work. I wonder what the original motivation of using short paths was. If it
> was to avoid spaces in paths, wouldn't shQuote() work? Thanks!

No: system on Windows does not use a shell.

The 'original motivation' was to work reliably!  Back in the days of 
Windows 95 when many parts of Windows only supported 8+3 names.

> 
> Regards,
> Yihui
> 
> 	[[alternative HTML version deleted]]

Please do re-read the posting guide.  It has ' been so for 20+ years '.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From x|e @end|ng |rom y|hu|@n@me  Mon Oct 30 21:36:50 2023
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Mon, 30 Oct 2023 15:36:50 -0500
Subject: [Rd] 
 system()/system2() using short paths of commands on Windows?
In-Reply-To: <ead63e0e-70fc-48e8-82d9-460d0d730488@stats.ox.ac.uk>
References: <CANROs4eMn2V4C2AQScoKugv4vC0JjsnD3AY6e4vzi0=8UaNaNg@mail.gmail.com>
 <ead63e0e-70fc-48e8-82d9-460d0d730488@stats.ox.ac.uk>
Message-ID: <CANROs4cQ4EnEgf6KM7+bh11CmpRw0OV8rhby4Cbo7OGXo0=R_A@mail.gmail.com>

I have read about "system() not using a shell on Windows" on the help
page many times before but never understood what it means technically.
Please forgive my ignorance. I still do not understand it, but thanks
a lot for the explanation anyway! I'm just curious if the full path
would work in system() today. If it still would not work because
today's Windows is still like Windows 95 in this aspect, please ignore
my question and I will ask Microsoft for a refund.

Regards,
Yihui



On Mon, Oct 30, 2023 at 3:03?PM Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>
> On 30/10/2023 16:18, Yihui Xie wrote:
> > Hi,
> >
> > It may have been so for 20+ years but I just discovered today that system()
> > would always try to use the short path of a command on Windows:
> > https://github.com/wch/r-source/blob/635a67/src/gnuwin32/run.c#L141 If
> > that's true, I wonder if it could provide an option to disable this
> > behavior, because we recently ran into a case in which short paths wouldn't
> > work. I wonder what the original motivation of using short paths was. If it
> > was to avoid spaces in paths, wouldn't shQuote() work? Thanks!
>
> No: system on Windows does not use a shell.
>
> The 'original motivation' was to work reliably!  Back in the days of
> Windows 95 when many parts of Windows only supported 8+3 names.
>
> >
> > Regards,
> > Yihui
> >
> >       [[alternative HTML version deleted]]
>
> Please do re-read the posting guide.  It has ' been so for 20+ years '.

My apologies! Sometimes I forget to switch to the plain-text mode when
writing to R mailing lists.

> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
>


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Tue Oct 31 01:17:47 2023
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Mon, 30 Oct 2023 17:17:47 -0700
Subject: [Rd] dim<-() changed in R-devel;
 no longer removing "dimnames" when doing dim(x) <- dim(x)
In-Reply-To: <25919.35617.446508.577753@stat.math.ethz.ch>
References: <CAFDcVCTZTjS6ojk=7SordyK517NcKD8KoCK6RgLoYgcoZ13DnQ@mail.gmail.com>
 <25919.35617.446508.577753@stat.math.ethz.ch>
Message-ID: <f9506b49-cce2-4ac7-a66d-12ce17b2aa70@gmail.com>

Hi Martin, Henrik,

I actually like this change.

Makes a lot of sense IMO that dim(x) <- dim(x) be a no-op, or, more 
generally, that foo(x) <- foo(x) be a no-op for any setter/getter combo.

FWIW S4Arrays::set_dim() does that too. It also preserves the dimnames 
if the right value is only adding or dropping outermost (ineffective) 
dimensions:

 ??? > x <- array(1:6, dim=c(2,3,1), dimnames=list(c("A", "B"), 
c("x","y", "z"), "T"))
 ??? > S4Arrays:::set_dim(x, 2:3)
 ? ? ? x y z
 ??? A 1 3 5
 ??? B 2 4 6

Note that this is consistent with drop().

Best,

H.

On 10/30/23 03:53, Martin Maechler wrote:
>>>>>> Henrik Bengtsson
>>>>>>      on Sun, 29 Oct 2023 10:42:19 -0700 writes:
>      > Hello,
>
>      > the fix of PR18612
>      > (https://bugs.r-project.org/show_bug.cgi?id=18612) in
>      > r85380
>      > (https://github.com/wch/r-source/commit/2653cc6203fce4c48874111c75bbccac3ac4e803)
>      > caused a change in `dim<-()`.  Specifically, in the past,
>      > any `dim<-()` assignment would _always_ remove "dimnames"
>      > and "names" attributes per help("dim"):
>
>
>      >     The replacement method changes the "dim" attribute
>      > (provided the new value is compatible) and removes any
>      > "dimnames" and "names" attributes.
>
>      > In the new version, assigning the same "dim" as before
>      > will no longer remove "dimnames".  I'm reporting here to
>      > check whether this change was intended, or if it was an
>      > unintended side effect of the bug fix.
>
>      > For example, in R Under development (unstable) (2023-10-21
>      > r85379), we would get:
>
>      >> x <- array(1:2, dim=c(1,2), dimnames=list("A",
>      >> c("a","b"))) str(dimnames(x))
>      > List of 2 $ : chr "A" $ : chr [1:2] "a" "b"
>
>      >> dim(x) <- dim(x) ## Removes "dimnames" no matter what
>      >> str(dimnames(x))
>      >  NULL
>
>
>      > whereas in R Under development (unstable) (2023-10-21
>      > r85380) and beyond, we now get:
>
>      >> x <- array(1:2, dim=c(1,2), dimnames=list("A",
>      >> c("a","b"))) str(dimnames(x))
>      > List of 2 $ : chr "A" $ : chr [1:2] "a" "b"
>
>      >> dim(x) <- dim(x) ## No longer removes "dimnames"
>      >> str(dimnames(x))
>      > List of 2 $ : chr "A" $ : chr [1:2] "a" "b"
>
>      >> dim(x) <- rev(dim(x)) ## Still removes "dimnames"
>      >> str(dimnames(x))
>      >  NULL
>
>      > /Henrik
>
> Thank you, Henrik.
>
> This is "funny" (in an unusal sense):
> indeed, the change was *in*advertent, by me (svn rev 85380).
>
> I had experimentally {i.e., only in my own private version of R-devel!}
> modified the behavior of `dim<-` somewhat
> such it does *not* unnecessarily drop dimnames,
> e.g., in your   `dim(x) <- dim(x)` case above,
> one could really argue that it's a "true loss" if x loses
> dimnames "unnecessarily" ...
>
> OTOH, I knew in the mean time that  `dim<-` has always been
> documented to drop dimnames in all cases,  and even more
> importantly, I got a strong recommendation to *not* go further
> with this idea -- not only for back compatibility reasons, but
> also for internal logical consistency.
>
> Most probably, we will just revert this inadvertent change,
> but before that ... since it has been out in the wild anyway,
> we could quickly consider if it *did* break code.
>
> I assume it did, or you would not have noticed ?
>
> Martin
>
> ______________________________________________
> R-devel at r-project.org  mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


