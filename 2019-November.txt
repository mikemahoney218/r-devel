From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Nov  1 09:07:45 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 1 Nov 2019 09:07:45 +0100
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <2f877775-521a-7fc1-b68b-d233d4a50bea@fredhutch.org>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <2f877775-521a-7fc1-b68b-d233d4a50bea@fredhutch.org>
Message-ID: <23995.59345.18924.868610@stat.math.ethz.ch>

>>>>> Pages, Herve 
>>>>>     on Thu, 31 Oct 2019 21:02:07 +0000 writes:

    > On 10/30/19 04:29, Martin Maechler wrote:
    >>>>>>> Gabriel Becker
    >>>>>>> on Tue, 29 Oct 2019 12:43:15 -0700 writes:
    >> 
    >> > Hi all,
    >> > So I've started working on this and I ran into something that I didn't
    >> > know, namely that for x a multi-dimensional (2+) array, head(x) and tail(x)
    >> > ignore dimension completely, treat x as an atomic vector, and return an
    >> > (unclassed) atomic vector:
    >> 
    >> Well, that's  (3+), not "2+" .
    >> 
    >> But I did write (on Sep 17 in this thread!)
    >> 
    >> > The current source for head() and tail() and all their methods
    >> > in utils is just 83 lines of code  {file utils/R/head.R minus
    >> > the initial mostly copyright comments}.
    >> 
    >> and if've ever looked at these few dozen of R code lines, you'll
    >> have seen that we just added two simple utilities with a few
    >> reasonable simple methods.  To treat non-matrix (i.e. non-2d)
    >> arrays as vectors, is typically not unreasonable in R, but
    >> indeed with your proposals (in this thread), such non-2d arrays
    >> should be treated differently either via new  head.array() /
    >> tail.array() methods ((or -- only if it can be done more nicely -- by
    >> the default method)).
    >> 
    >> Note however the following  historical quirk :
    >> 
    >>> sapply(setNames(,1:5), function(K) inherits(array(pi, dim=1:K), "array"))
    >> 1     2     3     4     5
    >> TRUE FALSE  TRUE  TRUE  TRUE
    >> 
    >> (Is this something we should consider changing for R 4.0.0 -- to
    >> have it TRUE also for 2d-arrays aka matrix objects ??)

    > That would be awesome! More generally I wonder how feasible it would be 
    > to fix all these inheritance quirks where inherits(x, "something"), 
    > is(x, "something"), and is.something(x) disagree. They've been such a 
    > nuisance for so many years...

    > Thanks,
    > H.

Thank you Herv?; you are right "in theory", but
no, we don't want to fix _all_ these quirks at the moment
(because we know how much this would break).
Note that ?class does mention S3 and S4, and also you know about
is(.,.)  which is more "rational" than inherits insofar as it
"thinks" the S4 way about inheritance .. but then it has it's
surprises, too; e.g., note the result of  is(NULL) .

I really wanted to address the relatively limited case of
{matrix, array} for now.

{{more on this in the subthread Peter opened}}
Martin

    >> The consequence of that is that
    >> currently, "often"   foo.matrix is just a copy of foo.array  in
    >> the case the latter exists:
    >> "base" examples: foo in {unique, duplicated, anyDuplicated}.
    >> 
    >> So I propose you change current  head.matrix and tail.matrix  to
    >> head.array and tail.array
    >> (and then have   head.matrix <- head.array  etc, at least if the
    >> above quirk must remain, or remains (which I currently guess to
    >> be the case)).
    >> 
    >> 
    >> >> x = array(100, c(4, 5, 5))
    >> 
    >> >> dim(x)
    >> 
    >> > [1] 4 5 5
    >> 
    >> >> head(x, 1)
    >> 
    >> > [1] 100
    >> 
    >> >> class(head(x))
    >> 
    >> > [1] "numeric"
    >> 
    >> 
    >> > (For a 1d array, it does return another 1d array).
    >> 
    >> > When extending head/tail to understand multiple dimensions as discussed in
    >> > this thread, then, should the behavior for 2+d arrays be explicitly
    >> > retained, or should head and tail do the analogous thing (with a head(<2d
    array> ) behaving the same as head(<matrix>), which honestly is what I
    >> > expected to already be happening)?
    >> 
    >> > Are people using/relying on this behavior in their code, and if so, why/for
    >> > what?
    >> 
    >> > Even more generally, one way forward is to have the default methods check
    >> > for dimensions, and use length if it is null:
    >> 
    >> > tail.default <- tail.data.frame <- function(x, n = 6L, ...)
    >> > {
    >> > if(any(n == 0))
    >> > stop("n must be non-zero or unspecified for all dimensions")
    >> > if(!is.null(dim(x)))
    >> > dimsx <- dim(x)
    >> > else
    >> > dimsx <- length(x)
    >> 
    >> > ## this returns a list of vectors of indices in each
    >> > ## dimension, regardless of length of the the n
    >> > ## argument
    >> > sel <- lapply(seq_along(dimsx), function(i) {
    >> > dxi <- dimsx[i]
    >> > ## select all indices (full dim) if not specified
    >> > ni <- if(length(n) >= i) n[i] else dxi
    >> > ## handle negative ns
    >> > ni <- if (ni < 0L) max(dxi + ni, 0L) else min(ni, dxi)
    >> > seq.int(to = dxi, length.out = ni)
    >> > })
    >> > args <- c(list(x), sel, drop = FALSE)
    >> > do.call("[", args)
    >> > }
    >> 
    >> 
    >> > I think this precludes the need for a separate data.frame method at all,
    >> > actually, though (I would think) tail.data.frame would still be defined and
    >> > exported for backwards compatibility. (the matrix method has some extra
    >> > bits so my current conception of it is still separate, though it might not
    >> > NEED to be).
    >> 
    >> > The question then becomes, should head/tail always return something with
    >> > the same dimensionally (number of dims) it got, or should data.frame and
    >> > matrix be special cased in this regard, as they are now?
    >> 
    >> > What are people's thoughts?
    >> > ~G
    >> 
    >> > [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Xl_11U8w8hVRbuqAPQkz0uSW02kokK9EUPhOopxw0d8&s=vyKU4VkWLb_fGG6KeDPPjVM5_nLhav6UiX7NkzgqsuE&e=
    >> 

    > -- 
    > Herv? Pag?s

    > Program in Computational Biology
    > Division of Public Health Sciences
    > Fred Hutchinson Cancer Research Center
    > 1100 Fairview Ave. N, M1-B514
    > P.O. Box 19024
    > Seattle, WA 98109-1024

    > E-mail: hpages at fredhutch.org
    > Phone:  (206) 667-5791
    > Fax:    (206) 667-1319


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Nov  1 09:52:27 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 1 Nov 2019 09:52:27 +0100
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
Message-ID: <23995.62027.969336.196344@stat.math.ethz.ch>

>>>>> peter dalgaard 
>>>>>     on Thu, 31 Oct 2019 23:04:29 +0100 writes:

    > Hmm, the problem I see here is that these implied classes are all inherently one-off. We also have 
    >> inherits(matrix(1,1,1),"numeric")
    > [1] FALSE
    >> is.numeric(matrix(1,1,1))
    > [1] TRUE
    >> inherits(1L,"numeric")
    > [1] FALSE
    >> is.numeric(1L)
    > [1] TRUE

    > and if we start fixing one, we might need to fix all. 

I disagree about "fixing all" (see also my reply to Herv?), and
the {"numeric","double","integer"} case is particularly messy,
and I don't want to open that can now.

    > For method dispatch, we do have inheritance, e.g.

    >> foo.numeric <- function(x) x + 1
    >> foo <- function(x) UseMethod("foo")
    >> foo(1)
    > [1] 2
    >> foo(1L)
    > [1] 2
    >> foo(matrix(1,1,1))
    > [,1]
    > [1,]    2
    >> foo.integer <- function(x) x + 2
    >> foo(1)
    > [1] 2
    >> foo(1L)
    > [1] 3
    >> foo(matrix(1,1,1))
    > [,1]
    > [1,]    2
    >> foo(matrix(1L,1,1))
    > [,1]
    > [1,]    3

    > but these are not all automatic: "integer" implies "numeric", but "matrix" does not imply "numeric", much less "integer".

well it should not imply in general:
Contrary to Math,  we also have 'raw' or 'character' or 'logical' matrices.


    > Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),

good point, and that's why my usage of  inherits(.,.) was not
quite to the point.  [OTOH, it was to the point, as indeed from
      the ?class / ?inherits docu, S3 method dispatch and inherits
      must be consistent ]

    > which would break -- unless we change class(x) to return the whole set of inherited classes, which I sense that we'd rather not do....

and we have something like that already with  is(.) 

Thank you for these important points raised!

Note again that both "matrix" and "array" are special [see ?class] as
being of  __implicit class__  and I am considering that this
implicit class behavior for these two should be slightly changed
such that

  foo <- function(x,...) UseMethod("foo")
  foo.array <- function(x, ...)
           sprintf("array of dim. %s", paste(dim(x), collapse = " x "))

should work for all arrays and not be an exception for 2D arrays :

> foo(array(pi, 1:3))
[1] "array of dim. 1 x 2 x 3"
> foo(array(pi, 1))
[1] "array of dim. 1"
> foo(array(pi, 2:7))
[1] "array of dim. 2 x 3 x 4 x 5 x 6 x 7"
> foo(array(pi, 1:2))
Error in UseMethod("foo") : 
  no applicable method for 'foo' applied to an object of class "c('matrix', 'double', 'numeric')"
>

And indeed I think you are right on spot and this would mean
that indeed the implicit class 
"matrix" should rather become c("matrix", "array").

BTW: The 'Details' section of   ?class   nicely defines things,
     notably the __implicit class__ situation
     (but I think should be improved)  :

     {numbering the paragraphs for reference}

> Details:
> 
> 1.   Here, we describe the so called ?S3? classes (and methods). For
>      ?S4? classes (and methods), see ?Formal classes? below.
> 
> 2.   Many R objects have a class attribute, a character vector giving
>      the names of the classes from which the object _inherits_.
>      (Functions oldClass and oldClass<- get and set the attribute,
>      which can also be done directly.)
> 
> 3.   If the object does not have a class attribute, it has an implicit
>      class, notably ?"matrix"?, ?"array"?, ?"function"? or ?"numeric"?
>      or the result of ?typeof(x)? (which is similar to ?mode(x)?), but
>      for type ?"language"? and mode ?"call"?, where the following
>      extra classes exist for the corresponding function calls: if,
>      while, for, =, <-, (, {, call.

So, I think clearly  { for S3, not S4 ! }

  "class attribute" :=  attr(x, "class")

  "implicit class" := the class(x) of R objects that do *not*
  	    	      have a class attribute

 
> 4.   Note that NULL objects cannot have attributes (hence not
>      classes) and attempting to assign a class is an error.

the above has one small flaw : "(hence not classes)" is not correct.
Of course   class(NULL) is "NULL" by par. 3's  typeof(x) "rule".

> 5a.  When a generic function ?fun? is applied to an object with class
>      attribute ?c("first", "second")?, the system searches for a
>      function called ?fun.first? and, if it finds it, applies it to the
>      object.  If no such function is found, a function called
>      ?fun.second? is tried.  If no class name produces a suitable
>      function, the function ?fun.default? is used (if it exists).
> 5b.  If there is no class attribute, the implicit class is tried, then the
>      default method.

> 6.   The function 'class' prints the vector of names of classes an
>      object inherits from.  Correspondingly, class<- sets the classes
>      an object inherits from.  Assigning NULL removes the class
>      attribute.

["of course", the word  "prints" above should be replaced by "returns" ! ]
      
> 7.   'unclass' returns (a copy of) its argument with its class
>      attribute removed.  (It is not allowed for objects which cannot be
>      copied, namely environments and external pointers.)
      
> 8.   'inherits' indicates whether its first argument inherits from any
>      of the classes specified in the ?what? argument.  If which is
>      TRUE then an integer vector of the same length as ?what? is
>      returned.  Each element indicates the position in the ?class(x)?
>      matched by the element of ?what?; zero indicates no match. If
>      which is FALSE then TRUE is returned by inherits if any of
>      the names in ?what? match with any class.

{I had forgotten that the 2nd argument of inherits, 'what', can
 be a vector and about the 'which' argument}


    >> On 30 Oct 2019, at 12:29 , Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> Note however the following  historical quirk :
    >> 
    >>> sapply(setNames(,1:5), function(K) inherits(array(pi, dim=1:K), "array"))
    >> 1     2     3     4     5 
    >> TRUE FALSE  TRUE  TRUE  TRUE 
    >> 
    >> (Is this something we should consider changing for R 4.0.0 -- to
    >> have it TRUE also for 2d-arrays aka matrix objects ??)

    > -- 
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Nov  1 12:26:00 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 1 Nov 2019 16:56:00 +0530
Subject: [Rd] R C api for 'inherits' S3 and S4 objects
Message-ID: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>

Dear R developers,

Motivated by discussion about checking inheritance of S3 and S4
objects (in head matrix/array topic) I would light to shed some light
on a minor gap about that matter in R C API.
Currently we are able to check inheritance for S3 class objects from C
in a robust way (no allocation, thread safe). This is unfortunately
not possible for S4 classes. I would kindly request new function in R
C api so it can be achieved for S4 classes with no risk of allocation.
For reference mentioned functions below. Thank you.
Jan Gorecki

// S3 inheritance
bool INHERITS(SEXP x, SEXP char_) {
  SEXP klass;
  if (isString(klass = getAttrib(x, R_ClassSymbol))) {
    for (int i=0; i<LENGTH(klass); i++) {
      if (STRING_ELT(klass, i) == char_) return true;
    }
  }
  return false;
}
// S4 inheritance
bool Rinherits(SEXP x, SEXP char_) {
  SEXP vec = PROTECT(ScalarString(char_));
  SEXP call = PROTECT(lang3(sym_inherits, x, vec));
  bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
  UNPROTECT(2);
  return ans;
}


From |uke-t|erney @end|ng |rom u|ow@@edu  Fri Nov  1 13:26:50 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Fri, 1 Nov 2019 12:26:50 +0000
Subject: [Rd] [External]  R C api for 'inherits' S3 and S4 objects
In-Reply-To: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>

On Fri, 1 Nov 2019, Jan Gorecki wrote:

> Dear R developers,
>
> Motivated by discussion about checking inheritance of S3 and S4
> objects (in head matrix/array topic) I would light to shed some light
> on a minor gap about that matter in R C API.
> Currently we are able to check inheritance for S3 class objects from C
> in a robust way (no allocation, thread safe). This is unfortunately

Your premise is not correct. Rf_inherits will not GC but it can
allocate and is not thread safe.

Best,

luke

> not possible for S4 classes. I would kindly request new function in R
> C api so it can be achieved for S4 classes with no risk of allocation.
> For reference mentioned functions below. Thank you.
> Jan Gorecki
>
> // S3 inheritance
> bool INHERITS(SEXP x, SEXP char_) {
>  SEXP klass;
>  if (isString(klass = getAttrib(x, R_ClassSymbol))) {
>    for (int i=0; i<LENGTH(klass); i++) {
>      if (STRING_ELT(klass, i) == char_) return true;
>    }
>  }
>  return false;
> }
> // S4 inheritance
> bool Rinherits(SEXP x, SEXP char_) {
>  SEXP vec = PROTECT(ScalarString(char_));
>  SEXP call = PROTECT(lang3(sym_inherits, x, vec));
>  bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
>  UNPROTECT(2);
>  return ans;
> }
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Nov  1 14:23:56 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 1 Nov 2019 18:53:56 +0530
Subject: [Rd] [External]  R C api for 'inherits' S3 and S4 objects
In-Reply-To: <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
 <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>
Message-ID: <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>

Thank you Luke.
That is why I don't use Rf_inherits but INHERITS which does not
allocate, provided in the email body.
I cannot do similarly for S4 classes, thus asking for some API for that.

On Fri, Nov 1, 2019 at 5:56 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> On Fri, 1 Nov 2019, Jan Gorecki wrote:
>
> > Dear R developers,
> >
> > Motivated by discussion about checking inheritance of S3 and S4
> > objects (in head matrix/array topic) I would light to shed some light
> > on a minor gap about that matter in R C API.
> > Currently we are able to check inheritance for S3 class objects from C
> > in a robust way (no allocation, thread safe). This is unfortunately
>
> Your premise is not correct. Rf_inherits will not GC but it can
> allocate and is not thread safe.
>
> Best,
>
> luke
>
> > not possible for S4 classes. I would kindly request new function in R
> > C api so it can be achieved for S4 classes with no risk of allocation.
> > For reference mentioned functions below. Thank you.
> > Jan Gorecki
> >
> > // S3 inheritance
> > bool INHERITS(SEXP x, SEXP char_) {
> >  SEXP klass;
> >  if (isString(klass = getAttrib(x, R_ClassSymbol))) {
> >    for (int i=0; i<LENGTH(klass); i++) {
> >      if (STRING_ELT(klass, i) == char_) return true;
> >    }
> >  }
> >  return false;
> > }
> > // S4 inheritance
> > bool Rinherits(SEXP x, SEXP char_) {
> >  SEXP vec = PROTECT(ScalarString(char_));
> >  SEXP call = PROTECT(lang3(sym_inherits, x, vec));
> >  bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
> >  UNPROTECT(2);
> >  return ans;
> > }
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Nov  1 14:54:26 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 1 Nov 2019 09:54:26 -0400
Subject: [Rd] [External]  R C api for 'inherits' S3 and S4 objects
In-Reply-To: <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
 <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>
 <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
Message-ID: <E8266268-D16F-4567-BA55-75726BAB05BB@R-project.org>

Note that your desire is by definition impossible - as your example also shows checking for S4 inheritance involves evaluation and thus allocation which cannot be avoided by the dynamic design of S4 inheritance.

Cheers,
Simon


> On Nov 1, 2019, at 9:23 AM, Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
> 
> Thank you Luke.
> That is why I don't use Rf_inherits but INHERITS which does not
> allocate, provided in the email body.
> I cannot do similarly for S4 classes, thus asking for some API for that.
> 
> On Fri, Nov 1, 2019 at 5:56 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>> 
>> On Fri, 1 Nov 2019, Jan Gorecki wrote:
>> 
>>> Dear R developers,
>>> 
>>> Motivated by discussion about checking inheritance of S3 and S4
>>> objects (in head matrix/array topic) I would light to shed some light
>>> on a minor gap about that matter in R C API.
>>> Currently we are able to check inheritance for S3 class objects from C
>>> in a robust way (no allocation, thread safe). This is unfortunately
>> 
>> Your premise is not correct. Rf_inherits will not GC but it can
>> allocate and is not thread safe.
>> 
>> Best,
>> 
>> luke
>> 
>>> not possible for S4 classes. I would kindly request new function in R
>>> C api so it can be achieved for S4 classes with no risk of allocation.
>>> For reference mentioned functions below. Thank you.
>>> Jan Gorecki
>>> 
>>> // S3 inheritance
>>> bool INHERITS(SEXP x, SEXP char_) {
>>> SEXP klass;
>>> if (isString(klass = getAttrib(x, R_ClassSymbol))) {
>>>   for (int i=0; i<LENGTH(klass); i++) {
>>>     if (STRING_ELT(klass, i) == char_) return true;
>>>   }
>>> }
>>> return false;
>>> }
>>> // S4 inheritance
>>> bool Rinherits(SEXP x, SEXP char_) {
>>> SEXP vec = PROTECT(ScalarString(char_));
>>> SEXP call = PROTECT(lang3(sym_inherits, x, vec));
>>> bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
>>> UNPROTECT(2);
>>> return ans;
>>> }
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Nov  1 14:54:17 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 1 Nov 2019 13:54:17 +0000
Subject: [Rd] [External] R C api for 'inherits' S3 and S4 objects
In-Reply-To: <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
 <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>
 <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
Message-ID: <CABtg=Kkhti_BUbo36im+9OVgFGK8EXmnrLN=mbToQy2Okv7W6A@mail.gmail.com>

AFAIR getAttrib() can allocate as well. Also, R API functions that do
not allocate today, may allocate in the future.

Gabor

On Fri, Nov 1, 2019 at 1:24 PM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
>
> Thank you Luke.
> That is why I don't use Rf_inherits but INHERITS which does not
> allocate, provided in the email body.
> I cannot do similarly for S4 classes, thus asking for some API for that.
>
> On Fri, Nov 1, 2019 at 5:56 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
> >
> > On Fri, 1 Nov 2019, Jan Gorecki wrote:
> >
> > > Dear R developers,
> > >
> > > Motivated by discussion about checking inheritance of S3 and S4
> > > objects (in head matrix/array topic) I would light to shed some light
> > > on a minor gap about that matter in R C API.
> > > Currently we are able to check inheritance for S3 class objects from C
> > > in a robust way (no allocation, thread safe). This is unfortunately
> >
> > Your premise is not correct. Rf_inherits will not GC but it can
> > allocate and is not thread safe.
> >
> > Best,
> >
> > luke
> >
> > > not possible for S4 classes. I would kindly request new function in R
> > > C api so it can be achieved for S4 classes with no risk of allocation.
> > > For reference mentioned functions below. Thank you.
> > > Jan Gorecki
> > >
> > > // S3 inheritance
> > > bool INHERITS(SEXP x, SEXP char_) {
> > >  SEXP klass;
> > >  if (isString(klass = getAttrib(x, R_ClassSymbol))) {
> > >    for (int i=0; i<LENGTH(klass); i++) {
> > >      if (STRING_ELT(klass, i) == char_) return true;
> > >    }
> > >  }
> > >  return false;
> > > }
> > > // S4 inheritance
> > > bool Rinherits(SEXP x, SEXP char_) {
> > >  SEXP vec = PROTECT(ScalarString(char_));
> > >  SEXP call = PROTECT(lang3(sym_inherits, x, vec));
> > >  bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
> > >  UNPROTECT(2);
> > >  return ans;
> > > }
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >     Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uke-t|erney @end|ng |rom u|ow@@edu  Fri Nov  1 15:45:24 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Fri, 1 Nov 2019 14:45:24 +0000
Subject: [Rd] [External]  R C api for 'inherits' S3 and S4 objects
In-Reply-To: <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
 <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>
 <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1911010929490.3658@luke-Latitude-7480>

On Fri, 1 Nov 2019, Jan Gorecki wrote:

> Thank you Luke.
> That is why I don't use Rf_inherits but INHERITS which does not
> allocate, provided in the email body.

Your definition can allocate because STING_ELT can allocate.
getAttrib can GC in general. Currently it would not GC or allocate in
this case, but this could change.

You can't assume thread-safety for calls into the R API, or any API
for that matter, unless they are documented to be thread-safe.

You would be better off using Rf_inherits as it does not make the
assumption that you can use pointer comparisons to check for identical
strings.  CHARSXPs are almost always cached but they are not
guaranteed to be, and the caching strategy might change in the future.

Best,

luke

> I cannot do similarly for S4 classes, thus asking for some API for that.
>
> On Fri, Nov 1, 2019 at 5:56 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>>
>> On Fri, 1 Nov 2019, Jan Gorecki wrote:
>>
>>> Dear R developers,
>>>
>>> Motivated by discussion about checking inheritance of S3 and S4
>>> objects (in head matrix/array topic) I would light to shed some light
>>> on a minor gap about that matter in R C API.
>>> Currently we are able to check inheritance for S3 class objects from C
>>> in a robust way (no allocation, thread safe). This is unfortunately
>>
>> Your premise is not correct. Rf_inherits will not GC but it can
>> allocate and is not thread safe.
>>
>> Best,
>>
>> luke
>>
>>> not possible for S4 classes. I would kindly request new function in R
>>> C api so it can be achieved for S4 classes with no risk of allocation.
>>> For reference mentioned functions below. Thank you.
>>> Jan Gorecki
>>>
>>> // S3 inheritance
>>> bool INHERITS(SEXP x, SEXP char_) {
>>>  SEXP klass;
>>>  if (isString(klass = getAttrib(x, R_ClassSymbol))) {
>>>    for (int i=0; i<LENGTH(klass); i++) {
>>>      if (STRING_ELT(klass, i) == char_) return true;
>>>    }
>>>  }
>>>  return false;
>>> }
>>> // S4 inheritance
>>> bool Rinherits(SEXP x, SEXP char_) {
>>>  SEXP vec = PROTECT(ScalarString(char_));
>>>  SEXP call = PROTECT(lang3(sym_inherits, x, vec));
>>>  bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
>>>  UNPROTECT(2);
>>>  return ans;
>>> }
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From |@wrence@m|ch@e| @end|ng |rom gene@com  Fri Nov  1 15:48:33 2019
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Fri, 1 Nov 2019 07:48:33 -0700
Subject: [Rd] R C api for 'inherits' S3 and S4 objects
In-Reply-To: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
Message-ID: <CAOQ5NycJYqgoHd_CdXvp6VbYkE_NZjRFeONvQR-QL-iT=8Ms5Q@mail.gmail.com>

If your goal is to perform multithreaded computations, why not perform
all necessary interactions with R upfront and then compute only on
primitives? It would help for us to understand your use case.

On Fri, Nov 1, 2019 at 4:26 AM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
>
> Dear R developers,
>
> Motivated by discussion about checking inheritance of S3 and S4
> objects (in head matrix/array topic) I would light to shed some light
> on a minor gap about that matter in R C API.
> Currently we are able to check inheritance for S3 class objects from C
> in a robust way (no allocation, thread safe). This is unfortunately
> not possible for S4 classes. I would kindly request new function in R
> C api so it can be achieved for S4 classes with no risk of allocation.
> For reference mentioned functions below. Thank you.
> Jan Gorecki
>
> // S3 inheritance
> bool INHERITS(SEXP x, SEXP char_) {
>   SEXP klass;
>   if (isString(klass = getAttrib(x, R_ClassSymbol))) {
>     for (int i=0; i<LENGTH(klass); i++) {
>       if (STRING_ELT(klass, i) == char_) return true;
>     }
>   }
>   return false;
> }
> // S4 inheritance
> bool Rinherits(SEXP x, SEXP char_) {
>   SEXP vec = PROTECT(ScalarString(char_));
>   SEXP call = PROTECT(lang3(sym_inherits, x, vec));
>   bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
>   UNPROTECT(2);
>   return ans;
> }
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Senior Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Nov  1 16:06:27 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 1 Nov 2019 20:36:27 +0530
Subject: [Rd] [External]  R C api for 'inherits' S3 and S4 objects
In-Reply-To: <alpine.DEB.2.21.1911010929490.3658@luke-Latitude-7480>
References: <CAOO9MKU8AbMM3KdLjxa2jPzY1h=2w50vctOjWqcv=CtqymSg5w@mail.gmail.com>
 <alpine.DEB.2.21.1911010704100.3658@luke-Latitude-7480>
 <CAOO9MKXQTTgZ4ixySRH_myaMXtA1F6HoaPe3jGVogRn=3+NYSA@mail.gmail.com>
 <alpine.DEB.2.21.1911010929490.3658@luke-Latitude-7480>
Message-ID: <CAOO9MKXq1i7pPA_E2nHbU1WzZS08MOTPL-AGXnjje=zfYMR6kA@mail.gmail.com>

Thank you all for your valuable comments.
Best,
Jan

On Fri, Nov 1, 2019 at 8:15 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> On Fri, 1 Nov 2019, Jan Gorecki wrote:
>
> > Thank you Luke.
> > That is why I don't use Rf_inherits but INHERITS which does not
> > allocate, provided in the email body.
>
> Your definition can allocate because STING_ELT can allocate.
> getAttrib can GC in general. Currently it would not GC or allocate in
> this case, but this could change.
>
> You can't assume thread-safety for calls into the R API, or any API
> for that matter, unless they are documented to be thread-safe.
>
> You would be better off using Rf_inherits as it does not make the
> assumption that you can use pointer comparisons to check for identical
> strings.  CHARSXPs are almost always cached but they are not
> guaranteed to be, and the caching strategy might change in the future.
>
> Best,
>
> luke
>
> > I cannot do similarly for S4 classes, thus asking for some API for that.
> >
> > On Fri, Nov 1, 2019 at 5:56 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
> >>
> >> On Fri, 1 Nov 2019, Jan Gorecki wrote:
> >>
> >>> Dear R developers,
> >>>
> >>> Motivated by discussion about checking inheritance of S3 and S4
> >>> objects (in head matrix/array topic) I would light to shed some light
> >>> on a minor gap about that matter in R C API.
> >>> Currently we are able to check inheritance for S3 class objects from C
> >>> in a robust way (no allocation, thread safe). This is unfortunately
> >>
> >> Your premise is not correct. Rf_inherits will not GC but it can
> >> allocate and is not thread safe.
> >>
> >> Best,
> >>
> >> luke
> >>
> >>> not possible for S4 classes. I would kindly request new function in R
> >>> C api so it can be achieved for S4 classes with no risk of allocation.
> >>> For reference mentioned functions below. Thank you.
> >>> Jan Gorecki
> >>>
> >>> // S3 inheritance
> >>> bool INHERITS(SEXP x, SEXP char_) {
> >>>  SEXP klass;
> >>>  if (isString(klass = getAttrib(x, R_ClassSymbol))) {
> >>>    for (int i=0; i<LENGTH(klass); i++) {
> >>>      if (STRING_ELT(klass, i) == char_) return true;
> >>>    }
> >>>  }
> >>>  return false;
> >>> }
> >>> // S4 inheritance
> >>> bool Rinherits(SEXP x, SEXP char_) {
> >>>  SEXP vec = PROTECT(ScalarString(char_));
> >>>  SEXP call = PROTECT(lang3(sym_inherits, x, vec));
> >>>  bool ans = LOGICAL(eval(call, R_GlobalEnv))[0]==1;
> >>>  UNPROTECT(2);
> >>>  return ans;
> >>> }
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >> --
> >> Luke Tierney
> >> Ralph E. Wareham Professor of Mathematical Sciences
> >> University of Iowa                  Phone:             319-335-3386
> >> Department of Statistics and        Fax:               319-335-3017
> >>     Actuarial Science
> >> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> >> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @n@hu|@@@r@vg| @end|ng |rom o9@o|ut|on@@com  Fri Nov  1 13:11:27 2019
From: @n@hu|@@@r@vg| @end|ng |rom o9@o|ut|on@@com (Anshul Saravgi)
Date: Fri, 1 Nov 2019 17:41:27 +0530
Subject: [Rd] Getting error in rbindlist
Message-ID: <CAJyEKho5zp9d=TC5Vv-cpQV7my2riFQVbVgzEs4AF5X3c1R2eQ@mail.gmail.com>

Hi All

Can you help me understand the meaning of the below error message then I
will try to figure out what is going wrong:

*Input Code:*
> bodlane2 <- lapply(
+   lapply(split(lctolc2, lctolc2$Item), function(x) graph.data.frame(x[,
2:3])),
+   function(x) lapply(
+     V(x)[degree(x, mode = "in") == 0],
+     function(s) all_simple_paths(x, from = s,
+                                  to = V(x)[degree(x, mode = "out") == 0])
%>%
+       lapply(
+         function(y) as.data.table(t(names(y))) %>% setnames(paste0("LC",
seq_along(.)))
+       ) %>%
+       rbindlist(use.names=TRUE,fill = TRUE)
+   ) %>% rbindlist(use.names=TRUE,fill = TRUE)
+ ) %>% rbindlist(use.names=TRUE,fill = TRUE, idcol = "Item")

*Error message:*
Error in rbindlist(., use.names = TRUE, fill = TRUE, idcol = "Item") :
  attempt to set index 8424/8424 in SET_STRING_ELT
In addition: There were 50 or more warnings (use warnings() to see the
first 50)

I am not understanding what is in SET_STRING_ELT which it is trying to
throw an error.
Please help me


*Regards,*

*Anshul Saravgi*

Consulting
m: 7757030307

<https://www.o9solutions.com/>
AI powered solutions that predict, prescribe, learn and are 100x faster,
smarter and easier to use

-- 
This Electronic Mail (e-mail) contains confidential and privileged 
information intended only for the use of?the individual or entity to which 
it is sent. ?If the reader of this message is not the intended recipient, 
or?the employee or agent responsible for delivery to the intended 
recipient, you are hereby notified that any?dissemination, distribution, or 
copying of this communication is STRICTLY PROHIBITED. ?If you have?received 
this communication in error, please immediately notify the sender by reply 
e-mail or telephone.?

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Nov  1 17:21:11 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 1 Nov 2019 17:21:11 +0100
Subject: [Rd] Getting error in rbindlist
In-Reply-To: <CAJyEKho5zp9d=TC5Vv-cpQV7my2riFQVbVgzEs4AF5X3c1R2eQ@mail.gmail.com>
References: <CAJyEKho5zp9d=TC5Vv-cpQV7my2riFQVbVgzEs4AF5X3c1R2eQ@mail.gmail.com>
Message-ID: <abb8128c-cd28-b7f4-47ad-3d30326ea424@gmail.com>

On 11/1/19 1:11 PM, Anshul Saravgi wrote:
> Hi All
>
> Can you help me understand the meaning of the below error message then I
> will try to figure out what is going wrong:
>
> *Input Code:*
>> bodlane2 <- lapply(
> +   lapply(split(lctolc2, lctolc2$Item), function(x) graph.data.frame(x[,
> 2:3])),
> +   function(x) lapply(
> +     V(x)[degree(x, mode = "in") == 0],
> +     function(s) all_simple_paths(x, from = s,
> +                                  to = V(x)[degree(x, mode = "out") == 0])
> %>%
> +       lapply(
> +         function(y) as.data.table(t(names(y))) %>% setnames(paste0("LC",
> seq_along(.)))
> +       ) %>%
> +       rbindlist(use.names=TRUE,fill = TRUE)
> +   ) %>% rbindlist(use.names=TRUE,fill = TRUE)
> + ) %>% rbindlist(use.names=TRUE,fill = TRUE, idcol = "Item")
>
> *Error message:*
> Error in rbindlist(., use.names = TRUE, fill = TRUE, idcol = "Item") :
>    attempt to set index 8424/8424 in SET_STRING_ELT
> In addition: There were 50 or more warnings (use warnings() to see the
> first 50)
>
> I am not understanding what is in SET_STRING_ELT which it is trying to
> throw an error.
> Please help me

The code is trying to write beyond the end of a string vector (to an 
element the vector does not have). This is typically a bug in native 
code of a package.

Best
Tomas

>
>
> *Regards,*
>
> *Anshul Saravgi*
>
> Consulting
> m: 7757030307
>
> <https://www.o9solutions.com/>
> AI powered solutions that predict, prescribe, learn and are 100x faster,
> smarter and easier to use
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Nov  1 17:47:20 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 1 Nov 2019 17:47:20 +0100
Subject: [Rd] Getting error in rbindlist
In-Reply-To: <CAJyEKhqveBs7ozL4pyMpjbn4TjqH40QPqegR38yBmrHOce=+pw@mail.gmail.com>
References: <CAJyEKho5zp9d=TC5Vv-cpQV7my2riFQVbVgzEs4AF5X3c1R2eQ@mail.gmail.com>
 <abb8128c-cd28-b7f4-47ad-3d30326ea424@gmail.com>
 <CAJyEKhqveBs7ozL4pyMpjbn4TjqH40QPqegR38yBmrHOce=+pw@mail.gmail.com>
Message-ID: <d6c964d3-c46c-f8d0-ac4e-2b4826d46ba1@gmail.com>

On 11/1/19 5:24 PM, Anshul Saravgi wrote:
> Thanks Tomas for identifying the bug.
>
> *How to resolve this bug? Can you please help me here?*

I would recommend you first try to create a complete reproducible 
example (the code below is just a snippet). Then try to minimize it - 
make it do as little as possible but still trigger the bug. Then try to 
reduce the number of packages used. If you ended up with code that used 
only base R (no packages outside R distribution), then submit again to 
R-devel (it is a likely bug in R itself, so if you can't trace the bug 
down yourself, someone here would do it). Base R would not let any user 
code write beyond the end of the string, so if you can reproduce this in 
base R, it is definitely a bug.

If you end up with code that still uses some contributed packages from 
these below, you need to find out/guess which of them is responsible and 
try to ask for help the maintainer of that package. It would more likely 
be a bug in some of those packages, but in principle it could also be a 
problem in how you are using them.

If you haven't done that already, it may be useful to update your 
packages - just in case the problem has already been resolved.

Best
Tomas

> *I am using the below code:*
> library(plyr)
> library(dplyr)
> library(tidyr)
> library(igraph)
> library(magrittr)
> library(reshape2)
> library(tibble)
>
> colnames(lctolc3) <- c("Item","LC","ToLC")
>
> bodlane3 <- lapply(
> ? lapply(split(lctolc3, lctolc3$Item), function(x) 
> graph.data.frame(x[, 2:3])),
> ? function(x) lapply(
> ? ? V(x)[degree(x, mode = "in") == 0],
> ? ? function(s) all_simple_paths(x, from = s,
> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?to = V(x)[degree(x, mode = "out") == 
> 0]) %>%
> ? ? ? lapply(
> ? ? ? ? function(y) as.data.table(t(names(y))) %>% 
> setnames(paste0("LC", seq_along(.)))
> ? ? ? ) %>%
> ? ? ? rbindlist(use.names=TRUE,fill = TRUE)
> ? ) %>% rbindlist(use.names=TRUE,fill = TRUE)
> ) %>% rbindlist(use.names=TRUE,fill = TRUE, idcol = "Item")
>
>
> *Regards,*
>
> *Anshul Saravgi*
>
> Consulting
>
> m:?7757030307
>
> <https://www.o9solutions.com/>
> AI powered solutions that predict, prescribe, learn and are 100x 
> faster, smarter and easier to use
>
>
> On Fri, Nov 1, 2019 at 9:51 PM Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     On 11/1/19 1:11 PM, Anshul Saravgi wrote:
>     > Hi All
>     >
>     > Can you help me understand the meaning of the below error
>     message then I
>     > will try to figure out what is going wrong:
>     >
>     > *Input Code:*
>     >> bodlane2 <- lapply(
>     > +? ?lapply(split(lctolc2, lctolc2$Item), function(x)
>     graph.data.frame(x[,
>     > 2:3])),
>     > +? ?function(x) lapply(
>     > +? ? ?V(x)[degree(x, mode = "in") == 0],
>     > +? ? ?function(s) all_simple_paths(x, from = s,
>     > +? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? to = V(x)[degree(x, mode =
>     "out") == 0])
>     > %>%
>     > +? ? ? ?lapply(
>     > +? ? ? ? ?function(y) as.data.table(t(names(y))) %>%
>     setnames(paste0("LC",
>     > seq_along(.)))
>     > +? ? ? ?) %>%
>     > +? ? ? ?rbindlist(use.names=TRUE,fill = TRUE)
>     > +? ?) %>% rbindlist(use.names=TRUE,fill = TRUE)
>     > + ) %>% rbindlist(use.names=TRUE,fill = TRUE, idcol = "Item")
>     >
>     > *Error message:*
>     > Error in rbindlist(., use.names = TRUE, fill = TRUE, idcol =
>     "Item") :
>     >? ? attempt to set index 8424/8424 in SET_STRING_ELT
>     > In addition: There were 50 or more warnings (use warnings() to
>     see the
>     > first 50)
>     >
>     > I am not understanding what is in SET_STRING_ELT which it is
>     trying to
>     > throw an error.
>     > Please help me
>
>     The code is trying to write beyond the end of a string vector (to an
>     element the vector does not have). This is typically a bug in native
>     code of a package.
>
>     Best
>     Tomas
>
>     >
>     >
>     > *Regards,*
>     >
>     > *Anshul Saravgi*
>     >
>     > Consulting
>     > m: 7757030307
>     >
>     > <https://www.o9solutions.com/>
>     > AI powered solutions that predict, prescribe, learn and are 100x
>     faster,
>     > smarter and easier to use
>     >
>
>
> This Electronic Mail (e-mail) contains confidential and privileged 
> information intended only for the use of?the individual or entity to 
> which it is sent. ?If the reader of this message is not the intended 
> recipient, or?the employee or agent responsible for delivery to the 
> intended recipient, you are hereby notified that any?dissemination, 
> distribution, or copying of this communication is STRICTLY PROHIBITED. 
> ?If you have?received this communication in error, please immediately 
> notify the sender by reply e-mail or telephone. 



	[[alternative HTML version deleted]]


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Fri Nov  1 18:24:06 2019
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Sat, 2 Nov 2019 04:24:06 +1100
Subject: [Rd] Getting error in rbindlist
In-Reply-To: <CAJyEKho5zp9d=TC5Vv-cpQV7my2riFQVbVgzEs4AF5X3c1R2eQ@mail.gmail.com>
References: <CAJyEKho5zp9d=TC5Vv-cpQV7my2riFQVbVgzEs4AF5X3c1R2eQ@mail.gmail.com>
Message-ID: <CAJmOi+MwMSTC_ODJvMzVe31iKda0qm1PW6hP1N=JwcNN2t3QYw@mail.gmail.com>

This is (was) a bug in data.table that is similar to one which was
putatively closed. Recommend you update to the latest version and if the
problem persists reopen the issue here
https://github.com/Rdatatable/data.table/issues/3032

This mailing list is for R bugs, which this isn?t. R Core can no more help
you with this bug than with a paper jam in your printer.



Hth

On Sat, 2 Nov 2019 at 3:14 am, Anshul Saravgi <
anshul.saravgi at o9solutions.com> wrote:

> Hi All
>
> Can you help me understand the meaning of the below error message then I
> will try to figure out what is going wrong:
>
> *Input Code:*
> > q <- lapply(
> +   lapply(split(lctolc2, lctolc2$Item), function(x) graph.data.frame(x[,
> 2:3])),
> +   function(x) lapply(
> +     V(x)[degree(x, mode = "in") == 0],
> +     function(s) all_simple_paths(x, from = s,
> +                                  to = V(x)[degree(x, mode = "out") == 0])
> %>%
> +       lapply(
> +         function(y) as.data.table(t(names(y))) %>% setnames(paste0("LC",
> seq_along(.)))
> +       ) %>%
> +       rbindlist(use.names=TRUE,fill = TRUE)
> +   ) %>% rbindlist(use.names=TRUE,fill = TRUE)
> + ) %>% rbindlist(use.names=TRUE,fill = TRUE, idcol = "Item")
>
> *Error message:*
> Error in rbindlist(., use.names = TRUE, fill = TRUE, idcol = "Item") :
>   attempt to set index 8424/8424 in SET_STRING_ELT
> In addition: There were 50 or more warnings (use warnings() to see the
> first 50)
>
> I am not understanding what is in SET_STRING_ELT which it is trying to
> throw an error.
> Please help me
>
>
> *Regards,*
>
> *Anshul Saravgi*
>
> Consulting
> m: 7757030307
>
> <https://www.o9solutions.com/>
> AI powered solutions that predict, prescribe, learn and are 100x faster,
> smarter and easier to use
>
> --
> This Electronic Mail (e-mail) contains confidential and privileged
> information intended only for the use of the individual or entity to which
> it is sent.  If the reader of this message is not the intended recipient,
> or the employee or agent responsible for delivery to the intended
> recipient, you are hereby notified that any dissemination, distribution,
> or
> copying of this communication is STRICTLY PROHIBITED.  If you
> have received
> this communication in error, please immediately notify the sender by reply
> e-mail or telephone.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Sat Nov  2 20:37:08 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sat, 2 Nov 2019 12:37:08 -0700
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <23995.62027.969336.196344@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
Message-ID: <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>

Thanks Martin and Peter,

I agree that we can be careful and narrow and still see a nice improvement
in behavior. While Herve's point is valid and I understand his frustration,
I think staying within the matrix vs  c(matrix, array) space is the right
scope for this work in terms of fiddling with inheritance.

As another point,  I don't know off the top of my head of any other classes
which we would expect to have a dimensions attribute other than arrays
(including the "non-array" 2d matrices) and data.frames, but I imagine
there are some out there.

Do we want the default head and tail methods to be dimension aware as well,
via something along the lines of what I had in my previous message, or do
we want to retain the old behavior for things that aren't data.frames or
matrix/arrays? If the dim attribute can always be assumed to mean the same
thing I feel like it would be nice to give the dimensionality awareness
(and idempotence) to anything with dimensions, but again I don't know much
about the other classes taht have that attribute or how people want to use
them.

It would of course be written in a way that still worked identically to now
for any object that does not have a dimension attribute.

Thoughts?

~G

On Fri, Nov 1, 2019 at 1:52 AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> peter dalgaard
> >>>>>     on Thu, 31 Oct 2019 23:04:29 +0100 writes:
>
>     > Hmm, the problem I see here is that these implied classes are all
> inherently one-off. We also have
>     >> inherits(matrix(1,1,1),"numeric")
>     > [1] FALSE
>     >> is.numeric(matrix(1,1,1))
>     > [1] TRUE
>     >> inherits(1L,"numeric")
>     > [1] FALSE
>     >> is.numeric(1L)
>     > [1] TRUE
>
>     > and if we start fixing one, we might need to fix all.
>
> I disagree about "fixing all" (see also my reply to Herv?), and
> the {"numeric","double","integer"} case is particularly messy,
> and I don't want to open that can now.
>
>     > For method dispatch, we do have inheritance, e.g.
>
>     >> foo.numeric <- function(x) x + 1
>     >> foo <- function(x) UseMethod("foo")
>     >> foo(1)
>     > [1] 2
>     >> foo(1L)
>     > [1] 2
>     >> foo(matrix(1,1,1))
>     > [,1]
>     > [1,]    2
>     >> foo.integer <- function(x) x + 2
>     >> foo(1)
>     > [1] 2
>     >> foo(1L)
>     > [1] 3
>     >> foo(matrix(1,1,1))
>     > [,1]
>     > [1,]    2
>     >> foo(matrix(1L,1,1))
>     > [,1]
>     > [1,]    3
>
>     > but these are not all automatic: "integer" implies "numeric", but
> "matrix" does not imply "numeric", much less "integer".
>
> well it should not imply in general:
> Contrary to Math,  we also have 'raw' or 'character' or 'logical' matrices.
>
>
>     > Also, we seem to have a rule that inherits(x, c)  iff  c %in%
> class(x),
>
> good point, and that's why my usage of  inherits(.,.) was not
> quite to the point.  [OTOH, it was to the point, as indeed from
>       the ?class / ?inherits docu, S3 method dispatch and inherits
>       must be consistent ]
>
>     > which would break -- unless we change class(x) to return the whole
> set of inherited classes, which I sense that we'd rather not do....
>
> and we have something like that already with  is(.)
>
> Thank you for these important points raised!
>
> Note again that both "matrix" and "array" are special [see ?class] as
> being of  __implicit class__  and I am considering that this
> implicit class behavior for these two should be slightly changed
> such that
>
>   foo <- function(x,...) UseMethod("foo")
>   foo.array <- function(x, ...)
>            sprintf("array of dim. %s", paste(dim(x), collapse = " x "))
>
> should work for all arrays and not be an exception for 2D arrays :
>
> > foo(array(pi, 1:3))
> [1] "array of dim. 1 x 2 x 3"
> > foo(array(pi, 1))
> [1] "array of dim. 1"
> > foo(array(pi, 2:7))
> [1] "array of dim. 2 x 3 x 4 x 5 x 6 x 7"
> > foo(array(pi, 1:2))
> Error in UseMethod("foo") :
>   no applicable method for 'foo' applied to an object of class
> "c('matrix', 'double', 'numeric')"
> >
>
> And indeed I think you are right on spot and this would mean
> that indeed the implicit class
> "matrix" should rather become c("matrix", "array").
>
> BTW: The 'Details' section of   ?class   nicely defines things,
>      notably the __implicit class__ situation
>      (but I think should be improved)  :
>
>      {numbering the paragraphs for reference}
>
> > Details:
> >
> > 1.   Here, we describe the so called ?S3? classes (and methods). For
> >      ?S4? classes (and methods), see ?Formal classes? below.
> >
> > 2.   Many R objects have a class attribute, a character vector giving
> >      the names of the classes from which the object _inherits_.
> >      (Functions oldClass and oldClass<- get and set the attribute,
> >      which can also be done directly.)
> >
> > 3.   If the object does not have a class attribute, it has an implicit
> >      class, notably ?"matrix"?, ?"array"?, ?"function"? or ?"numeric"?
> >      or the result of ?typeof(x)? (which is similar to ?mode(x)?), but
> >      for type ?"language"? and mode ?"call"?, where the following
> >      extra classes exist for the corresponding function calls: if,
> >      while, for, =, <-, (, {, call.
>
> So, I think clearly  { for S3, not S4 ! }
>
>   "class attribute" :=  attr(x, "class")
>
>   "implicit class" := the class(x) of R objects that do *not*
>                       have a class attribute
>
>
> > 4.   Note that NULL objects cannot have attributes (hence not
> >      classes) and attempting to assign a class is an error.
>
> the above has one small flaw : "(hence not classes)" is not correct.
> Of course   class(NULL) is "NULL" by par. 3's  typeof(x) "rule".
>
> > 5a.  When a generic function ?fun? is applied to an object with class
> >      attribute ?c("first", "second")?, the system searches for a
> >      function called ?fun.first? and, if it finds it, applies it to the
> >      object.  If no such function is found, a function called
> >      ?fun.second? is tried.  If no class name produces a suitable
> >      function, the function ?fun.default? is used (if it exists).
> > 5b.  If there is no class attribute, the implicit class is tried, then
> the
> >      default method.
>
> > 6.   The function 'class' prints the vector of names of classes an
> >      object inherits from.  Correspondingly, class<- sets the classes
> >      an object inherits from.  Assigning NULL removes the class
> >      attribute.
>
> ["of course", the word  "prints" above should be replaced by "returns" ! ]
>
> > 7.   'unclass' returns (a copy of) its argument with its class
> >      attribute removed.  (It is not allowed for objects which cannot be
> >      copied, namely environments and external pointers.)
>
> > 8.   'inherits' indicates whether its first argument inherits from any
> >      of the classes specified in the ?what? argument.  If which is
> >      TRUE then an integer vector of the same length as ?what? is
> >      returned.  Each element indicates the position in the ?class(x)?
> >      matched by the element of ?what?; zero indicates no match. If
> >      which is FALSE then TRUE is returned by inherits if any of
> >      the names in ?what? match with any class.
>
> {I had forgotten that the 2nd argument of inherits, 'what', can
>  be a vector and about the 'which' argument}
>
>
>     >> On 30 Oct 2019, at 12:29 , Martin Maechler <
> maechler at stat.math.ethz.ch> wrote:
>     >>
>     >> Note however the following  historical quirk :
>     >>
>     >>> sapply(setNames(,1:5), function(K) inherits(array(pi, dim=1:K),
> "array"))
>     >> 1     2     3     4     5
>     >> TRUE FALSE  TRUE  TRUE  TRUE
>     >>
>     >> (Is this something we should consider changing for R 4.0.0 -- to
>     >> have it TRUE also for 2d-arrays aka matrix objects ??)
>
>     > --
>     > Peter Dalgaard, Professor,
>     > Center for Statistics, Copenhagen Business School
>     > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>     > Phone: (+45)38153501
>     > Office: A 4.23
>     > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Sat Nov  2 20:40:16 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sat, 2 Nov 2019 12:40:16 -0700
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
Message-ID: <CAD4oTHHxHmK6jmBSGrBsyZnCnxtLTrSyGyL726VHJd=rsGri8Q@mail.gmail.com>

As I hit send I realized I did know of one, which is table objects. So
while we're discussing it we can talk about both generally and specifically
what head.table and tail.table should do. Looks like tail.table is already
special -cased to hit the matrix method if it is 2d, so the natural
extension of that would be hitting tail.array for any 2+d table, I think.

~G

On Sat, Nov 2, 2019 at 12:37 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Thanks Martin and Peter,
>
> I agree that we can be careful and narrow and still see a nice improvement
> in behavior. While Herve's point is valid and I understand his frustration,
> I think staying within the matrix vs  c(matrix, array) space is the right
> scope for this work in terms of fiddling with inheritance.
>
> As another point,  I don't know off the top of my head of any other
> classes which we would expect to have a dimensions attribute other than
> arrays (including the "non-array" 2d matrices) and data.frames, but I
> imagine there are some out there.
>
> Do we want the default head and tail methods to be dimension aware as
> well, via something along the lines of what I had in my previous message,
> or do we want to retain the old behavior for things that aren't data.frames
> or matrix/arrays? If the dim attribute can always be assumed to mean the
> same thing I feel like it would be nice to give the dimensionality
> awareness (and idempotence) to anything with dimensions, but again I don't
> know much about the other classes taht have that attribute or how people
> want to use them.
>
> It would of course be written in a way that still worked identically to
> now for any object that does not have a dimension attribute.
>
> Thoughts?
>
> ~G
>
> On Fri, Nov 1, 2019 at 1:52 AM Martin Maechler <maechler at stat.math.ethz.ch>
> wrote:
>
>> >>>>> peter dalgaard
>> >>>>>     on Thu, 31 Oct 2019 23:04:29 +0100 writes:
>>
>>     > Hmm, the problem I see here is that these implied classes are all
>> inherently one-off. We also have
>>     >> inherits(matrix(1,1,1),"numeric")
>>     > [1] FALSE
>>     >> is.numeric(matrix(1,1,1))
>>     > [1] TRUE
>>     >> inherits(1L,"numeric")
>>     > [1] FALSE
>>     >> is.numeric(1L)
>>     > [1] TRUE
>>
>>     > and if we start fixing one, we might need to fix all.
>>
>> I disagree about "fixing all" (see also my reply to Herv?), and
>> the {"numeric","double","integer"} case is particularly messy,
>> and I don't want to open that can now.
>>
>>     > For method dispatch, we do have inheritance, e.g.
>>
>>     >> foo.numeric <- function(x) x + 1
>>     >> foo <- function(x) UseMethod("foo")
>>     >> foo(1)
>>     > [1] 2
>>     >> foo(1L)
>>     > [1] 2
>>     >> foo(matrix(1,1,1))
>>     > [,1]
>>     > [1,]    2
>>     >> foo.integer <- function(x) x + 2
>>     >> foo(1)
>>     > [1] 2
>>     >> foo(1L)
>>     > [1] 3
>>     >> foo(matrix(1,1,1))
>>     > [,1]
>>     > [1,]    2
>>     >> foo(matrix(1L,1,1))
>>     > [,1]
>>     > [1,]    3
>>
>>     > but these are not all automatic: "integer" implies "numeric", but
>> "matrix" does not imply "numeric", much less "integer".
>>
>> well it should not imply in general:
>> Contrary to Math,  we also have 'raw' or 'character' or 'logical'
>> matrices.
>>
>>
>>     > Also, we seem to have a rule that inherits(x, c)  iff  c %in%
>> class(x),
>>
>> good point, and that's why my usage of  inherits(.,.) was not
>> quite to the point.  [OTOH, it was to the point, as indeed from
>>       the ?class / ?inherits docu, S3 method dispatch and inherits
>>       must be consistent ]
>>
>>     > which would break -- unless we change class(x) to return the whole
>> set of inherited classes, which I sense that we'd rather not do....
>>
>> and we have something like that already with  is(.)
>>
>> Thank you for these important points raised!
>>
>> Note again that both "matrix" and "array" are special [see ?class] as
>> being of  __implicit class__  and I am considering that this
>> implicit class behavior for these two should be slightly changed
>> such that
>>
>>   foo <- function(x,...) UseMethod("foo")
>>   foo.array <- function(x, ...)
>>            sprintf("array of dim. %s", paste(dim(x), collapse = " x "))
>>
>> should work for all arrays and not be an exception for 2D arrays :
>>
>> > foo(array(pi, 1:3))
>> [1] "array of dim. 1 x 2 x 3"
>> > foo(array(pi, 1))
>> [1] "array of dim. 1"
>> > foo(array(pi, 2:7))
>> [1] "array of dim. 2 x 3 x 4 x 5 x 6 x 7"
>> > foo(array(pi, 1:2))
>> Error in UseMethod("foo") :
>>   no applicable method for 'foo' applied to an object of class
>> "c('matrix', 'double', 'numeric')"
>> >
>>
>> And indeed I think you are right on spot and this would mean
>> that indeed the implicit class
>> "matrix" should rather become c("matrix", "array").
>>
>> BTW: The 'Details' section of   ?class   nicely defines things,
>>      notably the __implicit class__ situation
>>      (but I think should be improved)  :
>>
>>      {numbering the paragraphs for reference}
>>
>> > Details:
>> >
>> > 1.   Here, we describe the so called ?S3? classes (and methods). For
>> >      ?S4? classes (and methods), see ?Formal classes? below.
>> >
>> > 2.   Many R objects have a class attribute, a character vector giving
>> >      the names of the classes from which the object _inherits_.
>> >      (Functions oldClass and oldClass<- get and set the attribute,
>> >      which can also be done directly.)
>> >
>> > 3.   If the object does not have a class attribute, it has an implicit
>> >      class, notably ?"matrix"?, ?"array"?, ?"function"? or ?"numeric"?
>> >      or the result of ?typeof(x)? (which is similar to ?mode(x)?), but
>> >      for type ?"language"? and mode ?"call"?, where the following
>> >      extra classes exist for the corresponding function calls: if,
>> >      while, for, =, <-, (, {, call.
>>
>> So, I think clearly  { for S3, not S4 ! }
>>
>>   "class attribute" :=  attr(x, "class")
>>
>>   "implicit class" := the class(x) of R objects that do *not*
>>                       have a class attribute
>>
>>
>> > 4.   Note that NULL objects cannot have attributes (hence not
>> >      classes) and attempting to assign a class is an error.
>>
>> the above has one small flaw : "(hence not classes)" is not correct.
>> Of course   class(NULL) is "NULL" by par. 3's  typeof(x) "rule".
>>
>> > 5a.  When a generic function ?fun? is applied to an object with class
>> >      attribute ?c("first", "second")?, the system searches for a
>> >      function called ?fun.first? and, if it finds it, applies it to the
>> >      object.  If no such function is found, a function called
>> >      ?fun.second? is tried.  If no class name produces a suitable
>> >      function, the function ?fun.default? is used (if it exists).
>> > 5b.  If there is no class attribute, the implicit class is tried, then
>> the
>> >      default method.
>>
>> > 6.   The function 'class' prints the vector of names of classes an
>> >      object inherits from.  Correspondingly, class<- sets the classes
>> >      an object inherits from.  Assigning NULL removes the class
>> >      attribute.
>>
>> ["of course", the word  "prints" above should be replaced by "returns" ! ]
>>
>> > 7.   'unclass' returns (a copy of) its argument with its class
>> >      attribute removed.  (It is not allowed for objects which cannot be
>> >      copied, namely environments and external pointers.)
>>
>> > 8.   'inherits' indicates whether its first argument inherits from any
>> >      of the classes specified in the ?what? argument.  If which is
>> >      TRUE then an integer vector of the same length as ?what? is
>> >      returned.  Each element indicates the position in the ?class(x)?
>> >      matched by the element of ?what?; zero indicates no match. If
>> >      which is FALSE then TRUE is returned by inherits if any of
>> >      the names in ?what? match with any class.
>>
>> {I had forgotten that the 2nd argument of inherits, 'what', can
>>  be a vector and about the 'which' argument}
>>
>>
>>     >> On 30 Oct 2019, at 12:29 , Martin Maechler <
>> maechler at stat.math.ethz.ch> wrote:
>>     >>
>>     >> Note however the following  historical quirk :
>>     >>
>>     >>> sapply(setNames(,1:5), function(K) inherits(array(pi, dim=1:K),
>> "array"))
>>     >> 1     2     3     4     5
>>     >> TRUE FALSE  TRUE  TRUE  TRUE
>>     >>
>>     >> (Is this something we should consider changing for R 4.0.0 -- to
>>     >> have it TRUE also for 2d-arrays aka matrix objects ??)
>>
>>     > --
>>     > Peter Dalgaard, Professor,
>>     > Center for Statistics, Copenhagen Business School
>>     > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>     > Phone: (+45)38153501
>>     > Office: A 4.23
>>     > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>>
>>
>>
>>
>>
>>
>>
>>

	[[alternative HTML version deleted]]


From r@turner @end|ng |rom @uck|@nd@@c@nz  Sun Nov  3 22:11:34 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Mon, 4 Nov 2019 10:11:34 +1300
Subject: [Rd] Puzzled about a new method for "[".
Message-ID: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>


I recently tried to write a new method for "[", to be applied to data 
frames, so that the object returned would retain (all) attributes of the 
columns, including attributes that my code had created.

I thrashed around for quite a while, and then got some help from Rui 
Barradas who showed me how to do it, in the following manner:

`[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else 
length(cols) == 1)[{
    SaveAt <- lapply(x, attributes)
    x <- NextMethod()
    lX <- lapply(names(x),function(nm, x, Sat){
      attributes(x[[nm]]) <- Sat[[nm]]
      x[[nm]]}, x = x, Sat = SaveAt)
    names(lX) <- names(x)
    x <- as.data.frame(lX)
    x
}

If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g. 
something like X[1:42,]) the attributes are retained as desired.

OK.  All good.  Now we finally come to my question!  I want to put this 
new method into a package that I am building.  When I build the package 
and run R CMD check I get a complaint:

... no visible binding for global variable ?cols?

And indeed, there is no such variable.  At first I thought that maybe 
the code should be

`[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
                                       length(j) == 1)[{

But I looked at "[.data.frame" and it has "cols" too; not "j".

So why doesn't "[.data.frame" throw a warning when R gets built?

Can someone please explain to me what's going on here?

cheers,

Rolf

P. S. I amended the code for my method, replacing "cols" by "j", and it 
*seems* to run, and deliver the desired results.  (And the package 
checks, without complaint.) I am nervous, however, that there may be 
some Trap for Young Players that I don't perceive, lurking about and 
waiting to cause problems for me.

R.

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From |uc@r @end|ng |rom |edor@project@org  Sun Nov  3 22:22:26 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sun, 3 Nov 2019 22:22:26 +0100
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
Message-ID: <CALEXWq10AdjthU+qWtJx1V1CRhfLaTDXgaLF9gQOAiN7icM5pQ@mail.gmail.com>

On Sun, 3 Nov 2019 at 22:12, Rolf Turner <r.turner at auckland.ac.nz> wrote:
>
>
> I recently tried to write a new method for "[", to be applied to data
> frames, so that the object returned would retain (all) attributes of the
> columns, including attributes that my code had created.
>
> I thrashed around for quite a while, and then got some help from Rui
> Barradas who showed me how to do it, in the following manner:
>
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
> length(cols) == 1)[{
>     SaveAt <- lapply(x, attributes)
>     x <- NextMethod()
>     lX <- lapply(names(x),function(nm, x, Sat){
>       attributes(x[[nm]]) <- Sat[[nm]]
>       x[[nm]]}, x = x, Sat = SaveAt)
>     names(lX) <- names(x)
>     x <- as.data.frame(lX)
>     x
> }
>
> If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g.
> something like X[1:42,]) the attributes are retained as desired.
>
> OK.  All good.  Now we finally come to my question!  I want to put this
> new method into a package that I am building.  When I build the package
> and run R CMD check I get a complaint:
>
> ... no visible binding for global variable ?cols?
>
> And indeed, there is no such variable.  At first I thought that maybe
> the code should be
>
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>                                        length(j) == 1)[{
>
> But I looked at "[.data.frame" and it has "cols" too; not "j".
>
> So why doesn't "[.data.frame" throw a warning when R gets built?
>
> Can someone please explain to me what's going on here?

The thing is...

test <- function(x = y * 2) {
  y <- 1
  x
}

test()
# 2

Lazy evaluation magic.

I?aki


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Nov  3 22:31:23 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 3 Nov 2019 16:31:23 -0500
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
Message-ID: <b795d8d3-d20b-0576-9d8d-011307e51707@gmail.com>

On 03/11/2019 4:11 p.m., Rolf Turner wrote:
> 
> I recently tried to write a new method for "[", to be applied to data
> frames, so that the object returned would retain (all) attributes of the
> columns, including attributes that my code had created.
> 
> I thrashed around for quite a while, and then got some help from Rui
> Barradas who showed me how to do it, in the following manner:
> 
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
> length(cols) == 1)[{
>      SaveAt <- lapply(x, attributes)
>      x <- NextMethod()
>      lX <- lapply(names(x),function(nm, x, Sat){
>        attributes(x[[nm]]) <- Sat[[nm]]
>        x[[nm]]}, x = x, Sat = SaveAt)
>      names(lX) <- names(x)
>      x <- as.data.frame(lX)
>      x
> }
> 
> If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g.
> something like X[1:42,]) the attributes are retained as desired.
> 
> OK.  All good.  Now we finally come to my question!  I want to put this
> new method into a package that I am building.  When I build the package
> and run R CMD check I get a complaint:
> 
> ... no visible binding for global variable ?cols?
> 
> And indeed, there is no such variable.  At first I thought that maybe
> the code should be
> 
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>                                         length(j) == 1)[{
> 
> But I looked at "[.data.frame" and it has "cols" too; not "j".
> 
> So why doesn't "[.data.frame" throw a warning when R gets built?
> 
> Can someone please explain to me what's going on here?

Defaults for parameters are evaluated in the evaluation frame of the 
function, at the time the parameter is first used.

If you look at the source for "[.data.frame", you should see that "cols" 
is defined there as a local variable.  The "drop" argument shouldn't be 
used until it is.  (There's a call to "missing(drop)" early in the 
source that doesn't count:  it doesn't evaluate "drop", it just checks 
whether it is specified by the caller.)

Duncan Murdoch


From r@turner @end|ng |rom @uck|@nd@@c@nz  Mon Nov  4 00:43:56 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Mon, 4 Nov 2019 12:43:56 +1300
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <b795d8d3-d20b-0576-9d8d-011307e51707@gmail.com>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <b795d8d3-d20b-0576-9d8d-011307e51707@gmail.com>
Message-ID: <8faee382-b436-ce7d-19b9-b6bdb65f2a66@auckland.ac.nz>


On 4/11/19 10:31 AM, Duncan Murdoch wrote:

> On 03/11/2019 4:11 p.m., Rolf Turner wrote:
>>
>> I recently tried to write a new method for "[", to be applied to data
>> frames, so that the object returned would retain (all) attributes of the
>> columns, including attributes that my code had created.
>>
>> I thrashed around for quite a while, and then got some help from Rui
>> Barradas who showed me how to do it, in the following manner:
>>
>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>> length(cols) == 1)[{
>> ???? SaveAt <- lapply(x, attributes)
>> ???? x <- NextMethod()
>> ???? lX <- lapply(names(x),function(nm, x, Sat){
>> ?????? attributes(x[[nm]]) <- Sat[[nm]]
>> ?????? x[[nm]]}, x = x, Sat = SaveAt)
>> ???? names(lX) <- names(x)
>> ???? x <- as.data.frame(lX)
>> ???? x
>> }
>>
>> If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g.
>> something like X[1:42,]) the attributes are retained as desired.
>>
>> OK.? All good.? Now we finally come to my question!? I want to put this
>> new method into a package that I am building.? When I build the package
>> and run R CMD check I get a complaint:
>>
>> ... no visible binding for global variable ?cols?
>>
>> And indeed, there is no such variable.? At first I thought that maybe
>> the code should be
>>
>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>> ??????????????????????????????????????? length(j) == 1)[{
>>
>> But I looked at "[.data.frame" and it has "cols" too; not "j".
>>
>> So why doesn't "[.data.frame" throw a warning when R gets built?
>>
>> Can someone please explain to me what's going on here?
> 
> Defaults for parameters are evaluated in the evaluation frame of the 
> function, at the time the parameter is first used.
> 
> If you look at the source for "[.data.frame", you should see that "cols" 
> is defined there as a local variable.? The "drop" argument shouldn't be 
> used until it is.? (There's a call to "missing(drop)" early in the 
> source that doesn't count:? it doesn't evaluate "drop", it just checks 
> whether it is specified by the caller.)


OK.  As I understand what you're saying, the reason there isn't a
"no visible binding" problem in [.data.frame is that "cols" *is* defined
in the body of the function.  Whereas, in my method, "cols" does not get
defined anywhere in the function, and thus triggers the warning.

I guess that a workaround would be to do a dummy assignment, like unto
cols <- 42 at the start of the code for my method.

(a) Are there perils involved with this strategy?

(b) Is there anything wrong with my current strategy of replacing

    drop = if (missing(i)) TRUE else length(cols) == 1)

by

    drop = if (missing(i)) TRUE else length(j) == 1)

???

As I said, this *seems* to work OK, by I cannot work through what the 
implications might be.

Can anyone reassure me?

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Nov  4 01:06:46 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 3 Nov 2019 19:06:46 -0500
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <8faee382-b436-ce7d-19b9-b6bdb65f2a66@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <b795d8d3-d20b-0576-9d8d-011307e51707@gmail.com>
 <8faee382-b436-ce7d-19b9-b6bdb65f2a66@auckland.ac.nz>
Message-ID: <ca5c37d7-1951-d35f-1d20-5a74b8976969@gmail.com>

On 03/11/2019 6:43 p.m., Rolf Turner wrote:
> 
> On 4/11/19 10:31 AM, Duncan Murdoch wrote:
> 
>> On 03/11/2019 4:11 p.m., Rolf Turner wrote:
>>>
>>> I recently tried to write a new method for "[", to be applied to data
>>> frames, so that the object returned would retain (all) attributes of the
>>> columns, including attributes that my code had created.
>>>
>>> I thrashed around for quite a while, and then got some help from Rui
>>> Barradas who showed me how to do it, in the following manner:
>>>
>>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>>> length(cols) == 1)[{
>>>  ???? SaveAt <- lapply(x, attributes)
>>>  ???? x <- NextMethod()
>>>  ???? lX <- lapply(names(x),function(nm, x, Sat){
>>>  ?????? attributes(x[[nm]]) <- Sat[[nm]]
>>>  ?????? x[[nm]]}, x = x, Sat = SaveAt)
>>>  ???? names(lX) <- names(x)
>>>  ???? x <- as.data.frame(lX)
>>>  ???? x
>>> }
>>>
>>> If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g.
>>> something like X[1:42,]) the attributes are retained as desired.
>>>
>>> OK.? All good.? Now we finally come to my question!? I want to put this
>>> new method into a package that I am building.? When I build the package
>>> and run R CMD check I get a complaint:
>>>
>>> ... no visible binding for global variable ?cols?
>>>
>>> And indeed, there is no such variable.? At first I thought that maybe
>>> the code should be
>>>
>>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>>>  ??????????????????????????????????????? length(j) == 1)[{
>>>
>>> But I looked at "[.data.frame" and it has "cols" too; not "j".
>>>
>>> So why doesn't "[.data.frame" throw a warning when R gets built?
>>>
>>> Can someone please explain to me what's going on here?
>>
>> Defaults for parameters are evaluated in the evaluation frame of the
>> function, at the time the parameter is first used.
>>
>> If you look at the source for "[.data.frame", you should see that "cols"
>> is defined there as a local variable.? The "drop" argument shouldn't be
>> used until it is.? (There's a call to "missing(drop)" early in the
>> source that doesn't count:? it doesn't evaluate "drop", it just checks
>> whether it is specified by the caller.)
> 
> 
> OK.  As I understand what you're saying, the reason there isn't a
> "no visible binding" problem in [.data.frame is that "cols" *is* defined
> in the body of the function.  Whereas, in my method, "cols" does not get
> defined anywhere in the function, and thus triggers the warning.
> 
> I guess that a workaround would be to do a dummy assignment, like unto
> cols <- 42 at the start of the code for my method.
> 
> (a) Are there perils involved with this strategy?

Only that 42 might not be the right value.

> 
> (b) Is there anything wrong with my current strategy of replacing
> 
>      drop = if (missing(i)) TRUE else length(cols) == 1)
> 
> by
> 
>      drop = if (missing(i)) TRUE else length(j) == 1)

[.data.frame is pretty complicated, and I haven't read it closely enough 
to know if this is equivalent.  I would suggest you consider not 
including "drop" at all, just implicitly including it in "..." .

Duncan Murdoch

> 
> ???
> 
> As I said, this *seems* to work OK, by I cannot work through what the
> implications might be.
> 
> Can anyone reassure me?
> 
> cheers,
> 
> Rolf
>


From r@turner @end|ng |rom @uck|@nd@@c@nz  Mon Nov  4 01:52:33 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Mon, 4 Nov 2019 13:52:33 +1300
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <ca5c37d7-1951-d35f-1d20-5a74b8976969@gmail.com>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <b795d8d3-d20b-0576-9d8d-011307e51707@gmail.com>
 <8faee382-b436-ce7d-19b9-b6bdb65f2a66@auckland.ac.nz>
 <ca5c37d7-1951-d35f-1d20-5a74b8976969@gmail.com>
Message-ID: <920b5ff0-f1a0-f71d-d7d2-69bae19f3a0a@auckland.ac.nz>


On 4/11/19 1:06 PM, Duncan Murdoch wrote:

> On 03/11/2019 6:43 p.m., Rolf Turner wrote:
>>
>> On 4/11/19 10:31 AM, Duncan Murdoch wrote:
>>
>>> On 03/11/2019 4:11 p.m., Rolf Turner wrote:
>>>>
>>>> I recently tried to write a new method for "[", to be applied to data
>>>> frames, so that the object returned would retain (all) attributes of 
>>>> the
>>>> columns, including attributes that my code had created.
>>>>
>>>> I thrashed around for quite a while, and then got some help from Rui
>>>> Barradas who showed me how to do it, in the following manner:
>>>>
>>>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>>>> length(cols) == 1)[{
>>>> ????? SaveAt <- lapply(x, attributes)
>>>> ????? x <- NextMethod()
>>>> ????? lX <- lapply(names(x),function(nm, x, Sat){
>>>> ??????? attributes(x[[nm]]) <- Sat[[nm]]
>>>> ??????? x[[nm]]}, x = x, Sat = SaveAt)
>>>> ????? names(lX) <- names(x)
>>>> ????? x <- as.data.frame(lX)
>>>> ????? x
>>>> }
>>>>
>>>> If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g.
>>>> something like X[1:42,]) the attributes are retained as desired.
>>>>
>>>> OK.? All good.? Now we finally come to my question!? I want to put this
>>>> new method into a package that I am building.? When I build the package
>>>> and run R CMD check I get a complaint:
>>>>
>>>> ... no visible binding for global variable ?cols?
>>>>
>>>> And indeed, there is no such variable.? At first I thought that maybe
>>>> the code should be
>>>>
>>>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>>>> ???????????????????????????????????????? length(j) == 1)[{
>>>>
>>>> But I looked at "[.data.frame" and it has "cols" too; not "j".
>>>>
>>>> So why doesn't "[.data.frame" throw a warning when R gets built?
>>>>
>>>> Can someone please explain to me what's going on here?
>>>
>>> Defaults for parameters are evaluated in the evaluation frame of the
>>> function, at the time the parameter is first used.
>>>
>>> If you look at the source for "[.data.frame", you should see that "cols"
>>> is defined there as a local variable.? The "drop" argument shouldn't be
>>> used until it is.? (There's a call to "missing(drop)" early in the
>>> source that doesn't count:? it doesn't evaluate "drop", it just checks
>>> whether it is specified by the caller.)
>>
>>
>> OK.? As I understand what you're saying, the reason there isn't a
>> "no visible binding" problem in [.data.frame is that "cols" *is* defined
>> in the body of the function.? Whereas, in my method, "cols" does not get
>> defined anywhere in the function, and thus triggers the warning.
>>
>> I guess that a workaround would be to do a dummy assignment, like unto
>> cols <- 42 at the start of the code for my method.
>>
>> (a) Are there perils involved with this strategy?
> 
> Only that 42 might not be the right value.
> 
>>
>> (b) Is there anything wrong with my current strategy of replacing
>>
>> ???? drop = if (missing(i)) TRUE else length(cols) == 1)
>>
>> by
>>
>> ???? drop = if (missing(i)) TRUE else length(j) == 1)
> 
> [.data.frame is pretty complicated, and I haven't read it closely enough 
> to know if this is equivalent.? I would suggest you consider not 
> including "drop" at all, just implicitly including it in "..." .

OK.  I'll try that!

Thanks.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From h@w|ckh@m @end|ng |rom gm@||@com  Mon Nov  4 15:41:59 2019
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Mon, 4 Nov 2019 08:41:59 -0600
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
Message-ID: <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>

For what it's worth, I don't think this strategy can work in general,
because a class might have attributes that depend on its data/contents
(e.g. https://vctrs.r-lib.org/articles/s3-vector.html#cached-sum). I
don't think these are particularly common in practice, but it's
dangerous to assume that you can restore a class simply by restoring
its attributes after subsetting.

Hadley

On Sun, Nov 3, 2019 at 3:11 PM Rolf Turner <r.turner at auckland.ac.nz> wrote:
>
>
> I recently tried to write a new method for "[", to be applied to data
> frames, so that the object returned would retain (all) attributes of the
> columns, including attributes that my code had created.
>
> I thrashed around for quite a while, and then got some help from Rui
> Barradas who showed me how to do it, in the following manner:
>
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
> length(cols) == 1)[{
>     SaveAt <- lapply(x, attributes)
>     x <- NextMethod()
>     lX <- lapply(names(x),function(nm, x, Sat){
>       attributes(x[[nm]]) <- Sat[[nm]]
>       x[[nm]]}, x = x, Sat = SaveAt)
>     names(lX) <- names(x)
>     x <- as.data.frame(lX)
>     x
> }
>
> If I set class(X) <- c("myclass",class(X)) and apply "[" to X (e.g.
> something like X[1:42,]) the attributes are retained as desired.
>
> OK.  All good.  Now we finally come to my question!  I want to put this
> new method into a package that I am building.  When I build the package
> and run R CMD check I get a complaint:
>
> ... no visible binding for global variable ?cols?
>
> And indeed, there is no such variable.  At first I thought that maybe
> the code should be
>
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
>                                        length(j) == 1)[{
>
> But I looked at "[.data.frame" and it has "cols" too; not "j".
>
> So why doesn't "[.data.frame" throw a warning when R gets built?
>
> Can someone please explain to me what's going on here?
>
> cheers,
>
> Rolf
>
> P. S. I amended the code for my method, replacing "cols" by "j", and it
> *seems* to run, and deliver the desired results.  (And the package
> checks, without complaint.) I am nervous, however, that there may be
> some Trap for Young Players that I don't perceive, lurking about and
> waiting to cause problems for me.
>
> R.
>
> --
> Honorary Research Fellow
> Department of Statistics
> University of Auckland
> Phone: +64-9-373-7599 ext. 88276
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
http://hadley.nz


From morg@n@em@||box @end|ng |rom gm@||@com  Mon Nov  4 20:40:50 2019
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Mon, 4 Nov 2019 19:40:50 +0000
Subject: [Rd] Questions on the R C API
Message-ID: <CAL0QV_MtU9Qa7umGg9AZtrvstPARFYR0bhEFwEqJPuZLTcpDqw@mail.gmail.com>

Hi All,

I have some questions regarding the R C API.

Let's assume I have a function which is defined as follows:

R file:

myfunc <- function(a, b, ...) .External(Cfun, a, b, ...)

C file:

SEXP Cfun(SEXP args) {
  args = CDR(args);
  SEXP a = CAR(args); args = CDR(args);
  SEXP b = CAR(args); args = CDR(args);
  /* continue to do something with remaining arguments in "..." using the
same logic as above*/

  return R_NilValue;
}

1/ Let's suppose that in my c function I change the value of a inside the
function but I want to reset it to what it was when I did SEXP a =
CAR(args); . How can I do that?

2/Is there a method to set "args" at a specific position so I can access a
specific value of my choice? If yes, do you have an simple example?

3/ Let's suppose now, I call the function in R. Is there a way to avoid the
function to evaluate its arguments before going to the C call? Do I have to
do it at the R level or can it be done at the C level?

Thank you very much in advance.
Best regards
Morgan

	[[alternative HTML version deleted]]


From r@turner @end|ng |rom @uck|@nd@@c@nz  Mon Nov  4 21:28:00 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Tue, 5 Nov 2019 09:28:00 +1300
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
Message-ID: <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>


On 5/11/19 3:41 AM, Hadley Wickham wrote:

> For what it's worth, I don't think this strategy can work in general,
> because a class might have attributes that depend on its data/contents
> (e.g. https://vctrs.r-lib.org/articles/s3-vector.html#cached-sum). I
> don't think these are particularly common in practice, but it's
> dangerous to assume that you can restore a class simply by restoring
> its attributes after subsetting.


You're probably right that there are lurking perils in general, but I am 
not trying to "restore a class".  I simply want to *retain* attributes 
of columns in a data frame.

* I have a data frame X
* I attach attributes to certain of its columns;
      attr(X$melvin,"clyde") <- 42
   (I *don't* change the class of X$melvin.)
* I form a subset of X:
     Y <- X[1:100,3:10]
* given that "melvin" is amongst columns 3 through 10 of X,
     I want Y$melvin to retain the attribute "clyde", i.e. I
     want attr(Y$melvin,"clyde") to return 42

There is almost surely a better approach than the one that I've chosen
(isn't there always?) but it seems to work, and the perils certainly are
not immediately apparent to me.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From hp@ge@ @end|ng |rom |redhutch@org  Mon Nov  4 22:40:19 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Mon, 4 Nov 2019 21:40:19 +0000
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
Message-ID: <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>

Hi Rolf,

On 11/4/19 12:28, Rolf Turner wrote:
> 
> On 5/11/19 3:41 AM, Hadley Wickham wrote:
> 
>> For what it's worth, I don't think this strategy can work in general,
>> because a class might have attributes that depend on its data/contents
>> (e.g. 
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__vctrs.r-2Dlib.org_articles_s3-2Dvector.html-23cached-2Dsum&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=pqLHzHYLUeyQnxA1K_XhSbKJql6r9wK1RXcDG2tuZ6s&s=kPUlNqBPr6j4lPvqkIj8w2Gl5JYGLqJ7ws6wH5tpGcw&e= 
>> ). I
>> don't think these are particularly common in practice, but it's
>> dangerous to assume that you can restore a class simply by restoring
>> its attributes after subsetting.
> 
> 
> You're probably right that there are lurking perils in general, but I am 
> not trying to "restore a class".? I simply want to *retain* attributes 
> of columns in a data frame.
> 
> * I have a data frame X
> * I attach attributes to certain of its columns;
>  ???? attr(X$melvin,"clyde") <- 42
>  ? (I *don't* change the class of X$melvin.)
> * I form a subset of X:
>  ??? Y <- X[1:100,3:10]
> * given that "melvin" is amongst columns 3 through 10 of X,
>  ??? I want Y$melvin to retain the attribute "clyde", i.e. I
>  ??? want attr(Y$melvin,"clyde") to return 42
> 
> There is almost surely a better approach than the one that I've chosen
> (isn't there always?) but it seems to work, and the perils certainly are
> not immediately apparent to me.

Maybe you've solved the problem for the columns that contain your 
objects but now you've introduced a potential problem for columns that 
contain objects with attributes whose value depend on content.

Hadley it right that restoring the original attributes of a vector (list 
or atomic) after subsetting is unsafe.

Best,
H.

> 
> cheers,
> 
> Rolf
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From wdun|@p @end|ng |rom t|bco@com  Mon Nov  4 22:54:15 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 4 Nov 2019 13:54:15 -0800
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
Message-ID: <CAF8bMcbYYBFcOFTsB2L1z+xA8nLyFdT55xWXfrKP4Snxd3g2Gw@mail.gmail.com>

> the perils certainly are not immediately apparent to me.

Here is a concrete example of a peril
 `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else
length(cols) == 1)
   {
       SaveAt <- lapply(x, attributes)
       x <- NextMethod()
       lX <- lapply(names(x),function(nm, x, Sat){
         attributes(x[[nm]]) <- Sat[[nm]]
         x[[nm]]}, x = x, Sat = SaveAt)
       names(lX) <- names(x)
       x <- as.data.frame(lX)
       x
   }

 x <- data.frame(Mat=I(matrix(101:106,ncol=2)), Vec=201:203)
 xmc <- structure(x, class=c("myclass", class(x)))
 xmc[1:2,]
Error in attributes(x[[nm]]) <- Sat[[nm]] :
  dims [product 6] do not match the length of object [4]
 x[1:2,]
  Mat.1 Mat.2 Vec
1   101   104 201
2   102   105 202

I would be surprised if extracting a column from some rows of a data.frame
gave a different result than extracting some rows from a column of a
data.frame.  The row-selecting method used by [.data.frame depends on the
class of the column.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, Nov 4, 2019 at 12:28 PM Rolf Turner <r.turner at auckland.ac.nz> wrote:

>
> On 5/11/19 3:41 AM, Hadley Wickham wrote:
>
> > For what it's worth, I don't think this strategy can work in general,
> > because a class might have attributes that depend on its data/contents
> > (e.g. https://vctrs.r-lib.org/articles/s3-vector.html#cached-sum). I
> > don't think these are particularly common in practice, but it's
> > dangerous to assume that you can restore a class simply by restoring
> > its attributes after subsetting.
>
>
> You're probably right that there are lurking perils in general, but I am
> not trying to "restore a class".  I simply want to *retain* attributes
> of columns in a data frame.
>
> * I have a data frame X
> * I attach attributes to certain of its columns;
>       attr(X$melvin,"clyde") <- 42
>    (I *don't* change the class of X$melvin.)
> * I form a subset of X:
>      Y <- X[1:100,3:10]
> * given that "melvin" is amongst columns 3 through 10 of X,
>      I want Y$melvin to retain the attribute "clyde", i.e. I
>      want attr(Y$melvin,"clyde") to return 42
>
> There is almost surely a better approach than the one that I've chosen
> (isn't there always?) but it seems to work, and the perils certainly are
> not immediately apparent to me.
>
> cheers,
>
> Rolf
>
> --
> Honorary Research Fellow
> Department of Statistics
> University of Auckland
> Phone: +64-9-373-7599 ext. 88276
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Nov  4 22:54:46 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 4 Nov 2019 16:54:46 -0500
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
 <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>
Message-ID: <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>

On 04/11/2019 4:40 p.m., Pages, Herve wrote:
> Hi Rolf,
> 
> On 11/4/19 12:28, Rolf Turner wrote:
>>
>> On 5/11/19 3:41 AM, Hadley Wickham wrote:
>>
>>> For what it's worth, I don't think this strategy can work in general,
>>> because a class might have attributes that depend on its data/contents
>>> (e.g.
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__vctrs.r-2Dlib.org_articles_s3-2Dvector.html-23cached-2Dsum&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=pqLHzHYLUeyQnxA1K_XhSbKJql6r9wK1RXcDG2tuZ6s&s=kPUlNqBPr6j4lPvqkIj8w2Gl5JYGLqJ7ws6wH5tpGcw&e=
>>> ). I
>>> don't think these are particularly common in practice, but it's
>>> dangerous to assume that you can restore a class simply by restoring
>>> its attributes after subsetting.
>>
>>
>> You're probably right that there are lurking perils in general, but I am
>> not trying to "restore a class".? I simply want to *retain* attributes
>> of columns in a data frame.
>>
>> * I have a data frame X
>> * I attach attributes to certain of its columns;
>>   ???? attr(X$melvin,"clyde") <- 42
>>   ? (I *don't* change the class of X$melvin.)
>> * I form a subset of X:
>>   ??? Y <- X[1:100,3:10]
>> * given that "melvin" is amongst columns 3 through 10 of X,
>>   ??? I want Y$melvin to retain the attribute "clyde", i.e. I
>>   ??? want attr(Y$melvin,"clyde") to return 42
>>
>> There is almost surely a better approach than the one that I've chosen
>> (isn't there always?) but it seems to work, and the perils certainly are
>> not immediately apparent to me.
> 
> Maybe you've solved the problem for the columns that contain your
> objects but now you've introduced a potential problem for columns that
> contain objects with attributes whose value depend on content.
> 
> Hadley it right that restoring the original attributes of a vector (list
> or atomic) after subsetting is unsafe.

Right, so Rolf should only restore attributes that are ones he added in 
the first place.  Unknown attributes should be left alone.

Duncan Murdoch


From r@turner @end|ng |rom @uck|@nd@@c@nz  Mon Nov  4 23:18:56 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Tue, 5 Nov 2019 11:18:56 +1300
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
 <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>
 <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>
Message-ID: <c2b066ab-a171-8a4f-1f8a-fceacdfc629d@auckland.ac.nz>

On 5/11/19 10:54 AM, Duncan Murdoch wrote:
> On 04/11/2019 4:40 p.m., Pages, Herve wrote:
>> Hi Rolf,
>>
>> On 11/4/19 12:28, Rolf Turner wrote:
>>>
>>> On 5/11/19 3:41 AM, Hadley Wickham wrote:
>>>
>>>> For what it's worth, I don't think this strategy can work in general,
>>>> because a class might have attributes that depend on its data/contents
>>>> (e.g.
>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__vctrs.r-2Dlib.org_articles_s3-2Dvector.html-23cached-2Dsum&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=pqLHzHYLUeyQnxA1K_XhSbKJql6r9wK1RXcDG2tuZ6s&s=kPUlNqBPr6j4lPvqkIj8w2Gl5JYGLqJ7ws6wH5tpGcw&e= 
>>>>
>>>> ). I
>>>> don't think these are particularly common in practice, but it's
>>>> dangerous to assume that you can restore a class simply by restoring
>>>> its attributes after subsetting.
>>>
>>>
>>> You're probably right that there are lurking perils in general, but I am
>>> not trying to "restore a class".? I simply want to *retain* attributes
>>> of columns in a data frame.
>>>
>>> * I have a data frame X
>>> * I attach attributes to certain of its columns;
>>> ? ???? attr(X$melvin,"clyde") <- 42
>>> ? ? (I *don't* change the class of X$melvin.)
>>> * I form a subset of X:
>>> ? ??? Y <- X[1:100,3:10]
>>> * given that "melvin" is amongst columns 3 through 10 of X,
>>> ? ??? I want Y$melvin to retain the attribute "clyde", i.e. I
>>> ? ??? want attr(Y$melvin,"clyde") to return 42
>>>
>>> There is almost surely a better approach than the one that I've chosen
>>> (isn't there always?) but it seems to work, and the perils certainly are
>>> not immediately apparent to me.
>>
>> Maybe you've solved the problem for the columns that contain your
>> objects but now you've introduced a potential problem for columns that
>> contain objects with attributes whose value depend on content.
>>
>> Hadley it right that restoring the original attributes of a vector (list
>> or atomic) after subsetting is unsafe.
> 
> Right, so Rolf should only restore attributes that are ones he added in 
> the first place.? Unknown attributes should be left alone.

Fair point.  And that gets fiddly.  I guess I'm going to have to rethink 
my strategy.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From hp@ge@ @end|ng |rom |redhutch@org  Mon Nov  4 23:43:50 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Mon, 4 Nov 2019 22:43:50 +0000
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
 <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>
 <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>
Message-ID: <6256413b-1d29-6e04-cd72-0e75d78f0766@fredhutch.org>



On 11/4/19 13:54, Duncan Murdoch wrote:
> On 04/11/2019 4:40 p.m., Pages, Herve wrote:
>> Hi Rolf,
>>
>> On 11/4/19 12:28, Rolf Turner wrote:
>>>
>>> On 5/11/19 3:41 AM, Hadley Wickham wrote:
>>>
>>>> For what it's worth, I don't think this strategy can work in general,
>>>> because a class might have attributes that depend on its data/contents
>>>> (e.g.
>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__vctrs.r-2Dlib.org_articles_s3-2Dvector.html-23cached-2Dsum&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=pqLHzHYLUeyQnxA1K_XhSbKJql6r9wK1RXcDG2tuZ6s&s=kPUlNqBPr6j4lPvqkIj8w2Gl5JYGLqJ7ws6wH5tpGcw&e= 
>>>>
>>>> ). I
>>>> don't think these are particularly common in practice, but it's
>>>> dangerous to assume that you can restore a class simply by restoring
>>>> its attributes after subsetting.
>>>
>>>
>>> You're probably right that there are lurking perils in general, but I am
>>> not trying to "restore a class".? I simply want to *retain* attributes
>>> of columns in a data frame.
>>>
>>> * I have a data frame X
>>> * I attach attributes to certain of its columns;
>>> ? ???? attr(X$melvin,"clyde") <- 42
>>> ? ? (I *don't* change the class of X$melvin.)
>>> * I form a subset of X:
>>> ? ??? Y <- X[1:100,3:10]
>>> * given that "melvin" is amongst columns 3 through 10 of X,
>>> ? ??? I want Y$melvin to retain the attribute "clyde", i.e. I
>>> ? ??? want attr(Y$melvin,"clyde") to return 42
>>>
>>> There is almost surely a better approach than the one that I've chosen
>>> (isn't there always?) but it seems to work, and the perils certainly are
>>> not immediately apparent to me.
>>
>> Maybe you've solved the problem for the columns that contain your
>> objects but now you've introduced a potential problem for columns that
>> contain objects with attributes whose value depend on content.
>>
>> Hadley it right that restoring the original attributes of a vector (list
>> or atomic) after subsetting is unsafe.
> 
> Right, so Rolf should only restore attributes that are ones he added in 
> the first place.? Unknown attributes should be left alone.

Exactly. More precisely the problem needs to be tackled at the level of 
his objects (i.e. define a [ method for his objects that preserves the 
attributes) and not at the level of the [ method for data frames. The [ 
method for data frames will call his [ method when needed.

H.

> 
> Duncan Murdoch

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From @zwj|08 @end|ng |rom gm@||@com  Tue Nov  5 00:40:57 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 4 Nov 2019 18:40:57 -0500
Subject: [Rd] Questions on the R C API
In-Reply-To: <CAL0QV_MtU9Qa7umGg9AZtrvstPARFYR0bhEFwEqJPuZLTcpDqw@mail.gmail.com>
References: <CAL0QV_MtU9Qa7umGg9AZtrvstPARFYR0bhEFwEqJPuZLTcpDqw@mail.gmail.com>
Message-ID: <CAGiFhPNFbyM2Fjoh67zvbU-BwsQ1MkKwMRAedcotiTOygjT7ng@mail.gmail.com>

Hi Morgan,

My solutions might not be the best one(I believe it's not), but it should
work for your question.

1. Have you considered Rf_duplicate function? If you want to change the
value of `a` and reset it later, you have to have a duplication somewhere
for resetting it. Instead of changing the value of `a` directly, why not
changing the value of a duplicated `a`? So you do not have to reset it.

2. I think a pairlist behaves like a linked list(I might be wrong here and
please correct me if so). Therefore, there is no simple way to locate an
element in a pairlist. As for as I know, R defines a set of
convenient functions for you to access a limited number of elements. See
below

```
#define CAR(e) ((e)->u.listsxp.carval)
#define CDR(e) ((e)->u.listsxp.cdrval)
#define CAAR(e) CAR(CAR(e))
#define CDAR(e) CDR(CAR(e))
#define CADR(e) CAR(CDR(e))
#define CDDR(e) CDR(CDR(e))
#define CDDDR(e) CDR(CDR(CDR(e)))
#define CADDR(e) CAR(CDR(CDR(e)))
#define CADDDR(e) CAR(CDR(CDR(CDR(e))))
#define CAD4R(e) CAR(CDR(CDR(CDR(CDR(e)))))
```

You can use them to get first a few arguments from a pairlist. Another
solution would be converting the pairlist into a list so that you can use
the methods defined for a list to access any element. I do not know which C
function can achieve that but `as.list` at R level should be able to do
this job, you can evaluate an R function at C level and get the list
result( By calling `Rf_eval`). I think this operation is relatively low
cost because the list should only contain a set of pointers pointing to
each element. There is no object duplication(Again I might be wrong here).

3. You can get unevaluated expression at the R level before you call the C
function and pass it to your C function( by calling `substitute` function).
However, from my vague memory, the expression would be eventually evaluated
at the C level even you pass the expression to it. Therefore, I think you
can create a list of unevaluated arguments before you enter the C function,
so your C function can expect a list rather than a pairlist as its
argument. This can solve both your second and third questions.

Best,
Jiefei



On Mon, Nov 4, 2019 at 2:41 PM Morgan Morgan <morgan.emailbox at gmail.com>
wrote:

> Hi All,
>
> I have some questions regarding the R C API.
>
> Let's assume I have a function which is defined as follows:
>
> R file:
>
> myfunc <- function(a, b, ...) .External(Cfun, a, b, ...)
>
> C file:
>
> SEXP Cfun(SEXP args) {
>   args = CDR(args);
>   SEXP a = CAR(args); args = CDR(args);
>   SEXP b = CAR(args); args = CDR(args);
>   /* continue to do something with remaining arguments in "..." using the
> same logic as above*/
>
>   return R_NilValue;
> }
>
> 1/ Let's suppose that in my c function I change the value of a inside the
> function but I want to reset it to what it was when I did SEXP a =
> CAR(args); . How can I do that?
>
> 2/Is there a method to set "args" at a specific position so I can access a
> specific value of my choice? If yes, do you have an simple example?
>
> 3/ Let's suppose now, I call the function in R. Is there a way to avoid the
> function to evaluate its arguments before going to the C call? Do I have to
> do it at the R level or can it be done at the C level?
>
> Thank you very much in advance.
> Best regards
> Morgan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From morg@n@em@||box @end|ng |rom gm@||@com  Tue Nov  5 08:35:57 2019
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Tue, 5 Nov 2019 07:35:57 +0000
Subject: [Rd] Questions on the R C API
In-Reply-To: <CAGiFhPNFbyM2Fjoh67zvbU-BwsQ1MkKwMRAedcotiTOygjT7ng@mail.gmail.com>
References: <CAL0QV_MtU9Qa7umGg9AZtrvstPARFYR0bhEFwEqJPuZLTcpDqw@mail.gmail.com>
 <CAGiFhPNFbyM2Fjoh67zvbU-BwsQ1MkKwMRAedcotiTOygjT7ng@mail.gmail.com>
Message-ID: <CAL0QV_M+SxCLoz+uwNLt0PwFTy0-kw1K5+fUV=tCmxscZbC+JQ@mail.gmail.com>

Thank you for your reply Jiefei.
I think in theory your solution should work. I'll have to give them a try.


On Mon, 4 Nov 2019 23:41 Wang Jiefei, <szwjf08 at gmail.com> wrote:

> Hi Morgan,
>
> My solutions might not be the best one(I believe it's not), but it should
> work for your question.
>
> 1. Have you considered Rf_duplicate function? If you want to change the
> value of `a` and reset it later, you have to have a duplication somewhere
> for resetting it. Instead of changing the value of `a` directly, why not
> changing the value of a duplicated `a`? So you do not have to reset it.
>
> 2. I think a pairlist behaves like a linked list(I might be wrong here and
> please correct me if so). Therefore, there is no simple way to locate an
> element in a pairlist. As for as I know, R defines a set of
> convenient functions for you to access a limited number of elements. See
> below
>
> ```
> #define CAR(e) ((e)->u.listsxp.carval)
> #define CDR(e) ((e)->u.listsxp.cdrval)
> #define CAAR(e) CAR(CAR(e))
> #define CDAR(e) CDR(CAR(e))
> #define CADR(e) CAR(CDR(e))
> #define CDDR(e) CDR(CDR(e))
> #define CDDDR(e) CDR(CDR(CDR(e)))
> #define CADDR(e) CAR(CDR(CDR(e)))
> #define CADDDR(e) CAR(CDR(CDR(CDR(e))))
> #define CAD4R(e) CAR(CDR(CDR(CDR(CDR(e)))))
> ```
>
> You can use them to get first a few arguments from a pairlist. Another
> solution would be converting the pairlist into a list so that you can use
> the methods defined for a list to access any element. I do not know which C
> function can achieve that but `as.list` at R level should be able to do
> this job, you can evaluate an R function at C level and get the list
> result( By calling `Rf_eval`). I think this operation is relatively low
> cost because the list should only contain a set of pointers pointing to
> each element. There is no object duplication(Again I might be wrong here).
>


So there is no way to reset a pairlist to its first element?


> 3. You can get unevaluated expression at the R level before you call the C
> function and pass it to your C function( by calling `substitute` function).
> However, from my vague memory, the expression would be eventually evaluated
> at the C level even you pass the expression to it. Therefore, I think you
> can create a list of unevaluated arguments before you enter the C function,
> so your C function can expect a list rather than a pairlist as its
> argument. This can solve both your second and third questions.
>

Correct me if I am wrong but does it mean that I will have to change "..."
to "list(...)" and use .Call instead of .External?

Also does it mean that to avoid expression to be evaluated at the R level,
I have to use "list" or "substitute"? The function "switch" in R does not
use them but manage to achieve that.

switch(1, "a", stop("a"))
#[1] "a"

It is a primitive but I don't understand how it manage to do that.

Best,
Morgan



> Best,
> Jiefei
>
>
> On Mon, Nov 4, 2019 at 2:41 PM Morgan Morgan <morgan.emailbox at gmail.com>
> wrote:
>
>> Hi All,
>>
>> I have some questions regarding the R C API.
>>
>> Let's assume I have a function which is defined as follows:
>>
>> R file:
>>
>> myfunc <- function(a, b, ...) .External(Cfun, a, b, ...)
>>
>> C file:
>>
>> SEXP Cfun(SEXP args) {
>>   args = CDR(args);
>>   SEXP a = CAR(args); args = CDR(args);
>>   SEXP b = CAR(args); args = CDR(args);
>>   /* continue to do something with remaining arguments in "..." using the
>> same logic as above*/
>>
>>   return R_NilValue;
>> }
>>
>> 1/ Let's suppose that in my c function I change the value of a inside the
>> function but I want to reset it to what it was when I did SEXP a =
>> CAR(args); . How can I do that?
>>
>> 2/Is there a method to set "args" at a specific position so I can access a
>> specific value of my choice? If yes, do you have an simple example?
>>
>> 3/ Let's suppose now, I call the function in R. Is there a way to avoid
>> the
>> function to evaluate its arguments before going to the C call? Do I have
>> to
>> do it at the R level or can it be done at the C level?
>>
>> Thank you very much in advance.
>> Best regards
>> Morgan
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Tue Nov  5 09:37:39 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 5 Nov 2019 09:37:39 +0100
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <c2b066ab-a171-8a4f-1f8a-fceacdfc629d@auckland.ac.nz>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
 <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>
 <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>
 <c2b066ab-a171-8a4f-1f8a-fceacdfc629d@auckland.ac.nz>
Message-ID: <CALEXWq1fJbwUJdV3nBPc6iGLUqcp6HTCOkraSRm+fZPY_yCOQA@mail.gmail.com>

You can try for testing with a column of class errors, from the package
'errors'. The attributes depend on the content in the way Hadley pointed
out.

I?aki

El lun., 4 nov. 2019 23:19, Rolf Turner <r.turner at auckland.ac.nz> escribi?:

> On 5/11/19 10:54 AM, Duncan Murdoch wrote:
> > On 04/11/2019 4:40 p.m., Pages, Herve wrote:
> >> Hi Rolf,
> >>
> >> On 11/4/19 12:28, Rolf Turner wrote:
> >>>
> >>> On 5/11/19 3:41 AM, Hadley Wickham wrote:
> >>>
> >>>> For what it's worth, I don't think this strategy can work in general,
> >>>> because a class might have attributes that depend on its data/contents
> >>>> (e.g.
> >>>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__vctrs.r-2Dlib.org_articles_s3-2Dvector.html-23cached-2Dsum&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=pqLHzHYLUeyQnxA1K_XhSbKJql6r9wK1RXcDG2tuZ6s&s=kPUlNqBPr6j4lPvqkIj8w2Gl5JYGLqJ7ws6wH5tpGcw&e=
> >>>>
> >>>> ). I
> >>>> don't think these are particularly common in practice, but it's
> >>>> dangerous to assume that you can restore a class simply by restoring
> >>>> its attributes after subsetting.
> >>>
> >>>
> >>> You're probably right that there are lurking perils in general, but I
> am
> >>> not trying to "restore a class".  I simply want to *retain* attributes
> >>> of columns in a data frame.
> >>>
> >>> * I have a data frame X
> >>> * I attach attributes to certain of its columns;
> >>>        attr(X$melvin,"clyde") <- 42
> >>>     (I *don't* change the class of X$melvin.)
> >>> * I form a subset of X:
> >>>       Y <- X[1:100,3:10]
> >>> * given that "melvin" is amongst columns 3 through 10 of X,
> >>>       I want Y$melvin to retain the attribute "clyde", i.e. I
> >>>       want attr(Y$melvin,"clyde") to return 42
> >>>
> >>> There is almost surely a better approach than the one that I've chosen
> >>> (isn't there always?) but it seems to work, and the perils certainly
> are
> >>> not immediately apparent to me.
> >>
> >> Maybe you've solved the problem for the columns that contain your
> >> objects but now you've introduced a potential problem for columns that
> >> contain objects with attributes whose value depend on content.
> >>
> >> Hadley it right that restoring the original attributes of a vector (list
> >> or atomic) after subsetting is unsafe.
> >
> > Right, so Rolf should only restore attributes that are ones he added in
> > the first place.  Unknown attributes should be left alone.
>
> Fair point.  And that gets fiddly.  I guess I'm going to have to rethink
> my strategy.
>
> cheers,
>
> Rolf
>
> --
> Honorary Research Fellow
> Department of Statistics
> University of Auckland
> Phone: +64-9-373-7599 ext. 88276
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Nov  5 18:09:04 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 5 Nov 2019 09:09:04 -0800
Subject: [Rd] Questions on the R C API
In-Reply-To: <CAL0QV_M+SxCLoz+uwNLt0PwFTy0-kw1K5+fUV=tCmxscZbC+JQ@mail.gmail.com>
References: <CAL0QV_MtU9Qa7umGg9AZtrvstPARFYR0bhEFwEqJPuZLTcpDqw@mail.gmail.com>
 <CAGiFhPNFbyM2Fjoh67zvbU-BwsQ1MkKwMRAedcotiTOygjT7ng@mail.gmail.com>
 <CAL0QV_M+SxCLoz+uwNLt0PwFTy0-kw1K5+fUV=tCmxscZbC+JQ@mail.gmail.com>
Message-ID: <CAD4oTHHKe4dsGLG0vwxmgrd7uoutsKkUVY8M++vS2VQKRy5Kow@mail.gmail.com>

Hi Martin and Jiefei,

A quick note, I'll try to respond more completely later.


> It is a primitive but I don't understand how it manage to do that.
>

Primitives and Internals are allowed to be, but usually aren't, SPECIALSXPs
rather than BUILTINSXPs. SPECIALSXPs receive their arguments unevaluated
when called from R. See
https://cran.r-project.org/doc/manuals/r-release/R-ints.html#g_t_002eInternal-vs-_002ePrimitive.
This is not possible for functions that are not part of the R sources as
far as I know.

Also the difference between Primitives and internals isn't evaluation of
arguments (thats special vs builtin) but rather, whether they behave like a
closure (internal) or not (primitive).

Evaluation behavior for internal and primitive functions is defined within
the function table in names.c, the comment there explains the format.

Best,
~G

>
> Best,
> Morgan
>
>
>
> > Best,
> > Jiefei
> >
> >
> > On Mon, Nov 4, 2019 at 2:41 PM Morgan Morgan <morgan.emailbox at gmail.com>
> > wrote:
> >
> >> Hi All,
> >>
> >> I have some questions regarding the R C API.
> >>
> >> Let's assume I have a function which is defined as follows:
> >>
> >> R file:
> >>
> >> myfunc <- function(a, b, ...) .External(Cfun, a, b, ...)
> >>
> >> C file:
> >>
> >> SEXP Cfun(SEXP args) {
> >>   args = CDR(args);
> >>   SEXP a = CAR(args); args = CDR(args);
> >>   SEXP b = CAR(args); args = CDR(args);
> >>   /* continue to do something with remaining arguments in "..." using
> the
> >> same logic as above*/
> >>
> >>   return R_NilValue;
> >> }
> >>
> >> 1/ Let's suppose that in my c function I change the value of a inside
> the
> >> function but I want to reset it to what it was when I did SEXP a =
> >> CAR(args); . How can I do that?
> >>
> >> 2/Is there a method to set "args" at a specific position so I can
> access a
> >> specific value of my choice? If yes, do you have an simple example?
> >>
> >> 3/ Let's suppose now, I call the function in R. Is there a way to avoid
> >> the
> >> function to evaluate its arguments before going to the C call? Do I have
> >> to
> >> do it at the R level or can it be done at the C level?
> >>
> >> Thank you very much in advance.
> >> Best regards
> >> Morgan
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From r@turner @end|ng |rom @uck|@nd@@c@nz  Tue Nov  5 22:33:31 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Wed, 6 Nov 2019 10:33:31 +1300
Subject: [Rd] Puzzled about a new method for "[".
In-Reply-To: <CALEXWq1fJbwUJdV3nBPc6iGLUqcp6HTCOkraSRm+fZPY_yCOQA@mail.gmail.com>
References: <74a6cf10-3266-fef8-9ea0-0ba6d36db807@auckland.ac.nz>
 <CABdHhvFZ2VL27iJb_hZmMK1Tmxq1gZKu7np1fNjk9F2KM2ME8Q@mail.gmail.com>
 <3ccb53ef-a0a7-0449-28f2-fad550b719bf@auckland.ac.nz>
 <92d3dc36-f1d8-875b-4250-2cbd70978402@fredhutch.org>
 <ea776fff-03d2-a81c-66f7-3a986c44de5a@gmail.com>
 <c2b066ab-a171-8a4f-1f8a-fceacdfc629d@auckland.ac.nz>
 <CALEXWq1fJbwUJdV3nBPc6iGLUqcp6HTCOkraSRm+fZPY_yCOQA@mail.gmail.com>
Message-ID: <4b9443ee-b7b7-c860-4c83-3f2dee37c592@auckland.ac.nz>

On 5/11/19 9:37 PM, I?aki Ucar wrote:
> You can try for testing with a column of class errors, from the package 
> 'errors'. The attributes depend on the content in the way Hadley pointed 
> out.

Thanks, but it turns out to be much simpler than that.  There is a very 
easy way to accomplish what I want --- simply give an attribute to the 
data frame, rather than to a certain column of that data frame.  I don't 
know why the hell I didn't do that in the first place!  Duh!!!

Sorry for all the noise that this issue has generated.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From cr@n @end|ng |rom wr|g@de  Wed Nov  6 10:08:19 2019
From: cr@n @end|ng |rom wr|g@de (Marvin Wright)
Date: Wed, 6 Nov 2019 10:08:19 +0100
Subject: [Rd] set.seed() in a package
In-Reply-To: <CAFDcVCT5DMz1edX0CQbt45YdDJxeq0pT5cS=UAZ9k6RDUfCMSw@mail.gmail.com>
References: <B880EAC4-01D4-4588-BAE2-D4337A10378A@wrig.de>
 <7e3c5f47-e9b4-0e18-573f-5499f444c21a@gmail.com>
 <03E4EF62-11A2-47EE-854F-FF872F19E2FA@gmail.com>
 <e2f26e0b-5499-1eb4-55f6-c063c15c2622@gmail.com>
 <CAFDcVCQM3uF6tg78WQkEb4F_u-Sc3e13qNidVfya6Rgz2QR-gQ@mail.gmail.com>
 <CAFDcVCT5DMz1edX0CQbt45YdDJxeq0pT5cS=UAZ9k6RDUfCMSw@mail.gmail.com>
Message-ID: <F60F446E-B66D-434F-9C12-B91417CE40CE@wrig.de>

Thanks for your answers. I agree with Duncan and Henrik that we should have such a policy, even if we cannot test it. 

> On 30. Oct 2019, at 17:59, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> Forgot to say: For,
> 
>  oseed <- base::getRandomSeed()
>  on.exit(base::setRandomSeed(oseed))
> 
> one could upgrade set.seed() to take this role, e.g.
> 
>  oseed <- set.seed(0xBEEF)
>  on.exit(set.seed(oseed))
> 
> Current, set.seed() always return NULL.
> 
> BTW, and my memory might be bad, I think I mentioned this in the past
> but was told that you cannot reset the RNG state for all types of RNG
> kinds.  That might complicate things, but on the other hand, that
> could be checked for at run-time by the above functions.
> 
> /Henrik
> 
> On Wed, Oct 30, 2019 at 9:50 AM Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
>> 
>>> On 30/10/2019 9:08 a.m., peter dalgaard wrote:
>>>> You can fairly easily work around that by saving and restoring .Random.seed.
>> 
>> This is actually quite tedious to get correct; it requires you to
>> under how and when .Random.seed is set, and what are valid values on
>> .Random.seed.   For instance, a common mistake (me too) is to reset to
>> .GlobalEnv$.Random.seed <- NULL in a fresh R session but this will
>> produce a warning on: ".Random.seed' is not an integer vector but of
>> type 'NULL', so ignored".  You end up having to do things such as:
>> 
>>  oseed <- .GlobalEnv$.Random.seed
>>  on.exit({
>>    if (is.null(oseed)) {
>>      rm(list=".Random.seed", envir= .GlobalEnv)
>>    } else {
>>      assign(".Random.seed", value=oseed, envir= .GlobalEnv)
>>    }
>>  })
>> 
>> to avoid that warning.  So, having support functions for this in base
>> R would be helpful, e.g.
>> 
>>  oseed <- base::getRandomSeed()
>>  on.exit(base::setRandomSeed(oseed))
>> 
>> Back to Marvin's point/question.  I think it would be useful if the
>> CRAN Policies would explicitly say that functions must not change the
>> random seed to a fixed one, without undoing it, unless the user
>> specifies it via an argument.  If not, there's a great risk it will
>> mess up statistical analysis.  Also, if there would a way to test
>> against such practices, which I think is really hard, I would be the
>> first one backing it up.
>> 
>> On a related note; there are packages that forward the .Random.seed
>> when loaded.  This is also an unfortunate behavior because you will
>> give different RNGs depending on that package was already loaded
>> before you called a function that depends on it or not.  For example,
>> if pkgA forwards the .Random.seed when loaded, the following is *not*
>> reproducible:
>> 
>> # User might or might not have loaded pkgA already
>> if (runif(1) < 0.5) loadNamespace(pkgA)
>> 
>> set.seed(0xBEEF)
>> loadNamespace(pkgA)
>> y <- runif(1)
>> 
>> I ran into this problem when doing some strict testing.  I argue this
>> also falls into the set of "bad" practices to be avoided.
>> 
>> /Henrik
>> 
>> On Wed, Oct 30, 2019 at 6:23 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 30/10/2019 9:08 a.m., peter dalgaard wrote:
>>>> We commit a similar sin in the help pages, e.g.
>>>> 
>>>> example(set.seed) ; runif(2)
>>>> example(set.seed) ; runif(2)
>>>> 
>>>> gives you the same random uniforms both times. (Of course it isn't that much of an issue, since you would rarely be running examples before any serious simulations.)
>>> 
>>> I think it's pretty common in example code, and that's justifiable.  But
>>> it could be avoided by using withr::with_seed() or something equivalent.
>>> 
>>> Duncan Murdoch
>>> 
>>>> 
>>>> You can fairly easily work around that by saving and restoring .Random.seed. I wonder if that isn't also true of the cases using set.seed() for other reasons?
>>>> 
>>>> -pd
>>>> 
>>>> 
>>>>> On 30 Oct 2019, at 13:46 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>> 
>>>>> On 30/10/2019 3:28 a.m., Marvin Wright wrote:
>>>>>> Hi all,
>>>>>> I recently found several calls of set.seed() in a CRAN package. These calls are in a plot function, which could lead to unexpected behaviour. See https://github.com/sammo3182/interplot/issues/33 <https://github.com/sammo3182/interplot/issues/33> for a description of the problem.
>>>>>> I checked the CRAN repository policies and could not find anything about this. I would have expected a policy against setting fixed seeds somewhere in a package. Am I missing something?
>>>>> 
>>>>> set.seed() writes .Random.seed in the user's global environment, which violates this policy:
>>>>> 
>>>>> - Packages should not modify the global environment (user?s workspace).
>>>>> 
>>>>> However, every call to a random number generator creates or modifies .Random.seed as well, and most of those are expected and shouldn't be flagged.  And interplot() is documented to do random simulations, so it would be expected to change the seed:  the issue is that given the same inputs it always changes it to the same thing.  I think that would be quite hard for a test to detect.
>>>>> 
>>>>> Should it be a policy with no test?  Maybe, because I agree with you that interplot()'s set.seed(324) is bad practice.
>>>>> 
>>>>> Duncan Murdoch
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From cdde@j@rd|n@ @end|ng |rom gm@||@com  Wed Nov  6 18:07:44 2019
From: cdde@j@rd|n@ @end|ng |rom gm@||@com (Christopher David Desjardins)
Date: Wed, 6 Nov 2019 12:07:44 -0500
Subject: [Rd] Social Media Trackers on www.r-project.org
Message-ID: <CALrjt788BhkUyP8U1cTOigHAjR=6h93xf79R+PJY573ZO1ibwA@mail.gmail.com>

Hi,

I don't know if this is the right place to comment about this, but I am
curious why there are social media trackers on www.r-project.org. I am
guessing this is related to the News Via Twitter portion of the website,
but I find it odd that going to www.r-project.org allows Twitter to collect
data on me, which I haven't consented. Maybe News via Twitter doesn't need
to be on the home page but instead in the sidebar like the blog. Not sure
if that fixes this problem as I'm not a web developer.

Chris

	[[alternative HTML version deleted]]


From jgbr@d|ey1 @end|ng |rom gm@||@com  Fri Nov  8 08:06:49 2019
From: jgbr@d|ey1 @end|ng |rom gm@||@com (Joshua Bradley)
Date: Fri, 8 Nov 2019 02:06:49 -0500
Subject: [Rd] improving the performance of install.packages
Message-ID: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>

Hello,

Currently if you install a package twice:

install.packages("testit")
install.packages("testit")

R will build the package from source (depending on what OS you're using)
twice by default. This becomes especially burdensome when people are using
big packages (i.e. lots of depends) and someone has a script with:

install.packages("tidyverse")
...
... later on down the script
...
install.packages("dplyr")

In this case, "dplyr" is part of the tidyverse and will install twice. As
the primary "package manager" for R, it should not install a package twice
(by default) when it can be so easily checked. Indeed, many people resort
to writing a few lines of code to filter out already-installed packages An
r-help post from 2010 proposed a solution to improving the default
behavior, by adding "force=FALSE" as a api addition to install.packages.(
https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)

Would the R-core devs still consider this proposal?

Josh Bradley

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Nov  8 11:00:18 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 8 Nov 2019 05:00:18 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
Message-ID: <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>

On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
> Hello,
> 
> Currently if you install a package twice:
> 
> install.packages("testit")
> install.packages("testit")
> 
> R will build the package from source (depending on what OS you're using)
> twice by default. This becomes especially burdensome when people are using
> big packages (i.e. lots of depends) and someone has a script with:
> 
> install.packages("tidyverse")
> ...
> ... later on down the script
> ...
> install.packages("dplyr")
> 
> In this case, "dplyr" is part of the tidyverse and will install twice. As
> the primary "package manager" for R, it should not install a package twice
> (by default) when it can be so easily checked. Indeed, many people resort
> to writing a few lines of code to filter out already-installed packages An
> r-help post from 2010 proposed a solution to improving the default
> behavior, by adding "force=FALSE" as a api addition to install.packages.(
> https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
> 
> Would the R-core devs still consider this proposal?

Whether or not they'd do it, it's easy for you to do it.

install.packages <- function(pkgs, ..., force = FALSE) {
   if (!force) {
     pkgs <- Filter(Negate(requireNamespace), pkgs

   utils::install.packages(pkgs, ...)
}

You might want to make this more elaborate, e.g. doing update.packages() 
on the ones that exist.  But really, isn't the problem with the script 
you're using, which could have done a simple test before forcing a slow 
install?

Duncan Murdoch


From jgbr@d|ey1 @end|ng |rom gm@||@com  Fri Nov  8 20:55:30 2019
From: jgbr@d|ey1 @end|ng |rom gm@||@com (Joshua Bradley)
Date: Fri, 8 Nov 2019 14:55:30 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
Message-ID: <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>

I could do this...and I have before. This brings up a more fundamental
question though. You're asking me to write code that changes the logic of
the installation process (i.e. writing my own package installer). Instead
of doing that, I would rather integrate that logic into R itself to improve
the baseline installation process. This api proposal change would be
additive and would not break legacy code.

Package managers like pip (python), conda (python), yum (CentOS), apt
(Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
defaults) when to not download a package again. By proposing this change,
I'm essentially asking that R follow some of the same conventions and best
practices that other package managers have adopted over the decades.

I assumed this list is used to discuss proposals like this to the R
codebase. If I'm on the wrong list, please let me know.

P.S. if this change happened, it would be interesting to study the effect
it has on the bandwidth across all CRAN mirrors. A significant drop would
turn into actual $$ saved

Josh Bradley


On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
> > Hello,
> >
> > Currently if you install a package twice:
> >
> > install.packages("testit")
> > install.packages("testit")
> >
> > R will build the package from source (depending on what OS you're using)
> > twice by default. This becomes especially burdensome when people are
> using
> > big packages (i.e. lots of depends) and someone has a script with:
> >
> > install.packages("tidyverse")
> > ...
> > ... later on down the script
> > ...
> > install.packages("dplyr")
> >
> > In this case, "dplyr" is part of the tidyverse and will install twice. As
> > the primary "package manager" for R, it should not install a package
> twice
> > (by default) when it can be so easily checked. Indeed, many people resort
> > to writing a few lines of code to filter out already-installed packages
> An
> > r-help post from 2010 proposed a solution to improving the default
> > behavior, by adding "force=FALSE" as a api addition to install.packages.(
> > https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
> >
> > Would the R-core devs still consider this proposal?
>
> Whether or not they'd do it, it's easy for you to do it.
>
> install.packages <- function(pkgs, ..., force = FALSE) {
>    if (!force) {
>      pkgs <- Filter(Negate(requireNamespace), pkgs
>
>    utils::install.packages(pkgs, ...)
> }
>
> You might want to make this more elaborate, e.g. doing update.packages()
> on the ones that exist.  But really, isn't the problem with the script
> you're using, which could have done a simple test before forcing a slow
> install?
>
> Duncan Murdoch
>

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Fri Nov  8 21:06:43 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 8 Nov 2019 12:06:43 -0800
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
Message-ID: <CAF8bMcar4uTUUWKHM52vMsPPFWtY2CZb1tUH-OF7V2rFLRQv=g@mail.gmail.com>

While developing a package, I often run install.packages() on it many times
in a session without updating its version number.  How would your proposed
change affect this workflow?
Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:

> I could do this...and I have before. This brings up a more fundamental
> question though. You're asking me to write code that changes the logic of
> the installation process (i.e. writing my own package installer). Instead
> of doing that, I would rather integrate that logic into R itself to improve
> the baseline installation process. This api proposal change would be
> additive and would not break legacy code.
>
> Package managers like pip (python), conda (python), yum (CentOS), apt
> (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
> defaults) when to not download a package again. By proposing this change,
> I'm essentially asking that R follow some of the same conventions and best
> practices that other package managers have adopted over the decades.
>
> I assumed this list is used to discuss proposals like this to the R
> codebase. If I'm on the wrong list, please let me know.
>
> P.S. if this change happened, it would be interesting to study the effect
> it has on the bandwidth across all CRAN mirrors. A significant drop would
> turn into actual $$ saved
>
> Josh Bradley
>
>
> On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
>
> > On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
> > > Hello,
> > >
> > > Currently if you install a package twice:
> > >
> > > install.packages("testit")
> > > install.packages("testit")
> > >
> > > R will build the package from source (depending on what OS you're
> using)
> > > twice by default. This becomes especially burdensome when people are
> > using
> > > big packages (i.e. lots of depends) and someone has a script with:
> > >
> > > install.packages("tidyverse")
> > > ...
> > > ... later on down the script
> > > ...
> > > install.packages("dplyr")
> > >
> > > In this case, "dplyr" is part of the tidyverse and will install twice.
> As
> > > the primary "package manager" for R, it should not install a package
> > twice
> > > (by default) when it can be so easily checked. Indeed, many people
> resort
> > > to writing a few lines of code to filter out already-installed packages
> > An
> > > r-help post from 2010 proposed a solution to improving the default
> > > behavior, by adding "force=FALSE" as a api addition to
> install.packages.(
> > > https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
> > >
> > > Would the R-core devs still consider this proposal?
> >
> > Whether or not they'd do it, it's easy for you to do it.
> >
> > install.packages <- function(pkgs, ..., force = FALSE) {
> >    if (!force) {
> >      pkgs <- Filter(Negate(requireNamespace), pkgs
> >
> >    utils::install.packages(pkgs, ...)
> > }
> >
> > You might want to make this more elaborate, e.g. doing update.packages()
> > on the ones that exist.  But really, isn't the problem with the script
> > you're using, which could have done a simple test before forcing a slow
> > install?
> >
> > Duncan Murdoch
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri Nov  8 21:11:39 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 8 Nov 2019 20:11:39 +0000
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
Message-ID: <2836a87f-2d84-041d-5649-4eacb912ccc6@fredhutch.org>

Since we are on this topic, another area of improvement is when 
install.packages() downloads hundreds of packages only to realize later 
that many of them actually fail to install because one of the packages 
they depend on (directly or indirectly) failed to install.

Cheers,
H.


On 11/8/19 11:55, Joshua Bradley wrote:
> I could do this...and I have before. This brings up a more fundamental
> question though. You're asking me to write code that changes the logic of
> the installation process (i.e. writing my own package installer). Instead
> of doing that, I would rather integrate that logic into R itself to improve
> the baseline installation process. This api proposal change would be
> additive and would not break legacy code.
> 
> Package managers like pip (python), conda (python), yum (CentOS), apt
> (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
> defaults) when to not download a package again. By proposing this change,
> I'm essentially asking that R follow some of the same conventions and best
> practices that other package managers have adopted over the decades.
> 
> I assumed this list is used to discuss proposals like this to the R
> codebase. If I'm on the wrong list, please let me know.
> 
> P.S. if this change happened, it would be interesting to study the effect
> it has on the bandwidth across all CRAN mirrors. A significant drop would
> turn into actual $$ saved
> 
> Josh Bradley
> 
> 
> On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> 
>> On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
>>> Hello,
>>>
>>> Currently if you install a package twice:
>>>
>>> install.packages("testit")
>>> install.packages("testit")
>>>
>>> R will build the package from source (depending on what OS you're using)
>>> twice by default. This becomes especially burdensome when people are
>> using
>>> big packages (i.e. lots of depends) and someone has a script with:
>>>
>>> install.packages("tidyverse")
>>> ...
>>> ... later on down the script
>>> ...
>>> install.packages("dplyr")
>>>
>>> In this case, "dplyr" is part of the tidyverse and will install twice. As
>>> the primary "package manager" for R, it should not install a package
>> twice
>>> (by default) when it can be so easily checked. Indeed, many people resort
>>> to writing a few lines of code to filter out already-installed packages
>> An
>>> r-help post from 2010 proposed a solution to improving the default
>>> behavior, by adding "force=FALSE" as a api addition to install.packages.(
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_pipermail_r-2Dhelp_2010-2DMay_239492.html&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=UA8pThQCyQOMZf_tiAAnzSPckXg-h9-262Eu2WCyGHs&s=qtl85Oi2X2-U4rTQW-78pu9_Jb2vhBo1VZZN9pm6M8U&e= )
>>>
>>> Would the R-core devs still consider this proposal?
>>
>> Whether or not they'd do it, it's easy for you to do it.
>>
>> install.packages <- function(pkgs, ..., force = FALSE) {
>>     if (!force) {
>>       pkgs <- Filter(Negate(requireNamespace), pkgs
>>
>>     utils::install.packages(pkgs, ...)
>> }
>>
>> You might want to make this more elaborate, e.g. doing update.packages()
>> on the ones that exist.  But really, isn't the problem with the script
>> you're using, which could have done a simple test before forcing a slow
>> install?
>>
>> Duncan Murdoch
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=UA8pThQCyQOMZf_tiAAnzSPckXg-h9-262Eu2WCyGHs&s=HfzpeqddkrDu5eqZrrwPlN34KZIazW5yNGF7Hp-B0Go&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From hp@ge@ @end|ng |rom |redhutch@org  Fri Nov  8 21:12:25 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 8 Nov 2019 20:12:25 +0000
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAF8bMcar4uTUUWKHM52vMsPPFWtY2CZb1tUH-OF7V2rFLRQv=g@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAF8bMcar4uTUUWKHM52vMsPPFWtY2CZb1tUH-OF7V2rFLRQv=g@mail.gmail.com>
Message-ID: <48f10377-f2b9-244d-b225-8aa106ddbd75@fredhutch.org>

I guess you would just use force=TRUE

H.

On 11/8/19 12:06, William Dunlap via R-devel wrote:
> While developing a package, I often run install.packages() on it many times
> in a session without updating its version number.  How would your proposed
> change affect this workflow?
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 
> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:
> 
>> I could do this...and I have before. This brings up a more fundamental
>> question though. You're asking me to write code that changes the logic of
>> the installation process (i.e. writing my own package installer). Instead
>> of doing that, I would rather integrate that logic into R itself to improve
>> the baseline installation process. This api proposal change would be
>> additive and would not break legacy code.
>>
>> Package managers like pip (python), conda (python), yum (CentOS), apt
>> (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
>> defaults) when to not download a package again. By proposing this change,
>> I'm essentially asking that R follow some of the same conventions and best
>> practices that other package managers have adopted over the decades.
>>
>> I assumed this list is used to discuss proposals like this to the R
>> codebase. If I'm on the wrong list, please let me know.
>>
>> P.S. if this change happened, it would be interesting to study the effect
>> it has on the bandwidth across all CRAN mirrors. A significant drop would
>> turn into actual $$ saved
>>
>> Josh Bradley
>>
>>
>> On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
>> wrote:
>>
>>> On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
>>>> Hello,
>>>>
>>>> Currently if you install a package twice:
>>>>
>>>> install.packages("testit")
>>>> install.packages("testit")
>>>>
>>>> R will build the package from source (depending on what OS you're
>> using)
>>>> twice by default. This becomes especially burdensome when people are
>>> using
>>>> big packages (i.e. lots of depends) and someone has a script with:
>>>>
>>>> install.packages("tidyverse")
>>>> ...
>>>> ... later on down the script
>>>> ...
>>>> install.packages("dplyr")
>>>>
>>>> In this case, "dplyr" is part of the tidyverse and will install twice.
>> As
>>>> the primary "package manager" for R, it should not install a package
>>> twice
>>>> (by default) when it can be so easily checked. Indeed, many people
>> resort
>>>> to writing a few lines of code to filter out already-installed packages
>>> An
>>>> r-help post from 2010 proposed a solution to improving the default
>>>> behavior, by adding "force=FALSE" as a api addition to
>> install.packages.(
>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_pipermail_r-2Dhelp_2010-2DMay_239492.html&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=iJofJNzrnbF8idVP_KjXyi-Pt9e0cAgor0UEiDJPPro&s=R1s-MHqzxEbvj-KerylYVqz-IkWatde6QREua4MPqmU&e= )
>>>>
>>>> Would the R-core devs still consider this proposal?
>>>
>>> Whether or not they'd do it, it's easy for you to do it.
>>>
>>> install.packages <- function(pkgs, ..., force = FALSE) {
>>>     if (!force) {
>>>       pkgs <- Filter(Negate(requireNamespace), pkgs
>>>
>>>     utils::install.packages(pkgs, ...)
>>> }
>>>
>>> You might want to make this more elaborate, e.g. doing update.packages()
>>> on the ones that exist.  But really, isn't the problem with the script
>>> you're using, which could have done a simple test before forcing a slow
>>> install?
>>>
>>> Duncan Murdoch
>>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=iJofJNzrnbF8idVP_KjXyi-Pt9e0cAgor0UEiDJPPro&s=mIZ0fcjSg7KaJAY4wgLlKOaWwcD2uv9lI-GQNvcj4cg&e=
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=iJofJNzrnbF8idVP_KjXyi-Pt9e0cAgor0UEiDJPPro&s=mIZ0fcjSg7KaJAY4wgLlKOaWwcD2uv9lI-GQNvcj4cg&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From @vr@h@m@@d|er @end|ng |rom gm@||@com  Fri Nov  8 21:17:47 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Fri, 8 Nov 2019 15:17:47 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAF8bMcar4uTUUWKHM52vMsPPFWtY2CZb1tUH-OF7V2rFLRQv=g@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAF8bMcar4uTUUWKHM52vMsPPFWtY2CZb1tUH-OF7V2rFLRQv=g@mail.gmail.com>
Message-ID: <CAL6gwnJbS-BogPCGawFR-vTx6yf+T1X7AXOo9HdaQPXBKD9izg@mail.gmail.com>

Exactly. Every major commit isn?t want to check that the package works.

Also, besides package development, there are other reasons why one would
install packages over themselves. For example, rebuilding from source after
changing options in Makevars[.win]. The package hasn?t been updated but
recompilation is desired.

Avi

On Fri, Nov 8, 2019 at 3:07 PM William Dunlap via R-devel <
r-devel at r-project.org> wrote:

> While developing a package, I often run install.packages() on it many times
> in a session without updating its version number.  How would your proposed
> change affect this workflow?
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com>
> wrote:
>
> > I could do this...and I have before. This brings up a more fundamental
> > question though. You're asking me to write code that changes the logic of
> > the installation process (i.e. writing my own package installer). Instead
> > of doing that, I would rather integrate that logic into R itself to
> improve
> > the baseline installation process. This api proposal change would be
> > additive and would not break legacy code.
> >
> > Package managers like pip (python), conda (python), yum (CentOS), apt
> > (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
> > defaults) when to not download a package again. By proposing this change,
> > I'm essentially asking that R follow some of the same conventions and
> best
> > practices that other package managers have adopted over the decades.
> >
> > I assumed this list is used to discuss proposals like this to the R
> > codebase. If I'm on the wrong list, please let me know.
> >
> > P.S. if this change happened, it would be interesting to study the effect
> > it has on the bandwidth across all CRAN mirrors. A significant drop would
> > turn into actual $$ saved
> >
> > Josh Bradley
> >
> >
> > On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> > wrote:
> >
> > > On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
> > > > Hello,
> > > >
> > > > Currently if you install a package twice:
> > > >
> > > > install.packages("testit")
> > > > install.packages("testit")
> > > >
> > > > R will build the package from source (depending on what OS you're
> > using)
> > > > twice by default. This becomes especially burdensome when people are
> > > using
> > > > big packages (i.e. lots of depends) and someone has a script with:
> > > >
> > > > install.packages("tidyverse")
> > > > ...
> > > > ... later on down the script
> > > > ...
> > > > install.packages("dplyr")
> > > >
> > > > In this case, "dplyr" is part of the tidyverse and will install
> twice.
> > As
> > > > the primary "package manager" for R, it should not install a package
> > > twice
> > > > (by default) when it can be so easily checked. Indeed, many people
> > resort
> > > > to writing a few lines of code to filter out already-installed
> packages
> > > An
> > > > r-help post from 2010 proposed a solution to improving the default
> > > > behavior, by adding "force=FALSE" as a api addition to
> > install.packages.(
> > > > https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
> > > >
> > > > Would the R-core devs still consider this proposal?
> > >
> > > Whether or not they'd do it, it's easy for you to do it.
> > >
> > > install.packages <- function(pkgs, ..., force = FALSE) {
> > >    if (!force) {
> > >      pkgs <- Filter(Negate(requireNamespace), pkgs
> > >
> > >    utils::install.packages(pkgs, ...)
> > > }
> > >
> > > You might want to make this more elaborate, e.g. doing
> update.packages()
> > > on the ones that exist.  But really, isn't the problem with the script
> > > you're using, which could have done a simple test before forcing a slow
> > > install?
> > >
> > > Duncan Murdoch
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Fri Nov  8 21:37:17 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 8 Nov 2019 12:37:17 -0800
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
Message-ID: <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>

Hi Josh,

There are a few issues I can think of with this. The primary one is that
CRAN(/Bioconductor) is not the only place one can install packages from. I
might have version x.y.z of a package installed that was, at the time, a
development version I got from github, or installed locally, etc. Hell I
might have a later devel version but want the CRAN version. Not common,
sure, but wiill likely happen often enough that install.packages not doing
that for me when I tell it to is probably bad.

Currently (though there has been some discussion of changing this) packages
do not remember where they were installed from, so R wouldn't know if the
version you have is actually fully the same one on the repository you
pointed install.packages to or not.  If that were changed  and we knew that
we were getting the byte identical package from the actual same source, I
think this would be a nice addition, though without it I think it would be
right a high but not high enough proportion of the time.

R will build the package from source (depending on what OS you're using)
> twice by default. This becomes especially burdensome when people are using
> big packages (i.e. lots of depends) and someone has a script with:
>


install.packages("tidyverse")
> ...
> ... later on down the script
> ...
> install.packages("dplyr")
>

I mean, IMHO and as I think Duncan was alluding to, that's straight up an
error by the script author. I think its a few of them, actually, but its at
least one. An understandable one, sure, but thats still what it is. Scripts
(which are meant to be run more than once, generally) usually shouldn't
really be calling install.packages in the first place, but if they do, they
should certainly not be installing umbrella packages and the packages they
bring with them separately.

Even having one vectorized call to install.packages where all the packages
are installed would prevent this issue, including in the case where the
user doesn't understand the purpose of the tidyverse package. Though the
installation would still occur every time the script was run.


The last thing to note is that there are at least 2 packages which provide
a function which does this already (install.load and remotes), so people
can get this functionality if they need it.


On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:

>
>
> I assumed this list is used to discuss proposals like this to the R
> codebase. If I'm on the wrong list, please let me know.
>

This is the right place to discuss things like this. Thanks for starting
the conversation.

Best,
~G

>
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Nov  8 22:59:01 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 8 Nov 2019 16:59:01 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
Message-ID: <3054fcf3-1242-ccc3-c15c-ca882ad57158@gmail.com>

On 08/11/2019 2:55 p.m., Joshua Bradley wrote:
> I could do this...and I have before. This brings up a more fundamental
> question though. You're asking me to write code that changes the logic of
> the installation process (i.e. writing my own package installer). Instead
> of doing that, I would rather integrate that logic into R itself to improve
> the baseline installation process. This api proposal change would be
> additive and would not break legacy code.

That's not true.  The current behaviour is equivalent to force=TRUE; I 
believe the proposal was to change the default to force=FALSE.

If you didn't change the default, it wouldn't help your example:  the 
badly written script would run with force=TRUE, and wouldn't benefit at all.

Duncan Murdoch

> 
> Package managers like pip (python), conda (python), yum (CentOS), apt
> (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
> defaults) when to not download a package again. By proposing this change,
> I'm essentially asking that R follow some of the same conventions and best
> practices that other package managers have adopted over the decades.
> 
> I assumed this list is used to discuss proposals like this to the R
> codebase. If I'm on the wrong list, please let me know.
> 
> P.S. if this change happened, it would be interesting to study the effect
> it has on the bandwidth across all CRAN mirrors. A significant drop would
> turn into actual $$ saved
> 
> Josh Bradley
> 
> 
> On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> 
>> On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
>>> Hello,
>>>
>>> Currently if you install a package twice:
>>>
>>> install.packages("testit")
>>> install.packages("testit")
>>>
>>> R will build the package from source (depending on what OS you're using)
>>> twice by default. This becomes especially burdensome when people are
>> using
>>> big packages (i.e. lots of depends) and someone has a script with:
>>>
>>> install.packages("tidyverse")
>>> ...
>>> ... later on down the script
>>> ...
>>> install.packages("dplyr")
>>>
>>> In this case, "dplyr" is part of the tidyverse and will install twice. As
>>> the primary "package manager" for R, it should not install a package
>> twice
>>> (by default) when it can be so easily checked. Indeed, many people resort
>>> to writing a few lines of code to filter out already-installed packages
>> An
>>> r-help post from 2010 proposed a solution to improving the default
>>> behavior, by adding "force=FALSE" as a api addition to install.packages.(
>>> https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
>>>
>>> Would the R-core devs still consider this proposal?
>>
>> Whether or not they'd do it, it's easy for you to do it.
>>
>> install.packages <- function(pkgs, ..., force = FALSE) {
>>     if (!force) {
>>       pkgs <- Filter(Negate(requireNamespace), pkgs
>>
>>     utils::install.packages(pkgs, ...)
>> }
>>
>> You might want to make this more elaborate, e.g. doing update.packages()
>> on the ones that exist.  But really, isn't the problem with the script
>> you're using, which could have done a simple test before forcing a slow
>> install?
>>
>> Duncan Murdoch
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wdun|@p @end|ng |rom t|bco@com  Sat Nov  9 00:02:56 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 8 Nov 2019 15:02:56 -0800
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <3054fcf3-1242-ccc3-c15c-ca882ad57158@gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <3054fcf3-1242-ccc3-c15c-ca882ad57158@gmail.com>
Message-ID: <CAF8bMcYmtZ2eAuyhZb6nrvGgwf6OBPKtR9Y0yeNwDVg-iDeOFg@mail.gmail.com>

Suppose update.packages("pkg") installed "pkg" if it were not already
installed, in addition to its current behavior of installing "pkg" if "pkg"
is installed but a newer version is available.  The OP could then use
update.packages() all the time instead of install.packages() the first time
and update.packages() subsequent times.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Fri, Nov 8, 2019 at 2:51 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 08/11/2019 2:55 p.m., Joshua Bradley wrote:
> > I could do this...and I have before. This brings up a more fundamental
> > question though. You're asking me to write code that changes the logic of
> > the installation process (i.e. writing my own package installer). Instead
> > of doing that, I would rather integrate that logic into R itself to
> improve
> > the baseline installation process. This api proposal change would be
> > additive and would not break legacy code.
>
> That's not true.  The current behaviour is equivalent to force=TRUE; I
> believe the proposal was to change the default to force=FALSE.
>
> If you didn't change the default, it wouldn't help your example:  the
> badly written script would run with force=TRUE, and wouldn't benefit at
> all.
>
> Duncan Murdoch
>
> >
> > Package managers like pip (python), conda (python), yum (CentOS), apt
> > (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
> > defaults) when to not download a package again. By proposing this change,
> > I'm essentially asking that R follow some of the same conventions and
> best
> > practices that other package managers have adopted over the decades.
> >
> > I assumed this list is used to discuss proposals like this to the R
> > codebase. If I'm on the wrong list, please let me know.
> >
> > P.S. if this change happened, it would be interesting to study the effect
> > it has on the bandwidth across all CRAN mirrors. A significant drop would
> > turn into actual $$ saved
> >
> > Josh Bradley
> >
> >
> > On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> > wrote:
> >
> >> On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
> >>> Hello,
> >>>
> >>> Currently if you install a package twice:
> >>>
> >>> install.packages("testit")
> >>> install.packages("testit")
> >>>
> >>> R will build the package from source (depending on what OS you're
> using)
> >>> twice by default. This becomes especially burdensome when people are
> >> using
> >>> big packages (i.e. lots of depends) and someone has a script with:
> >>>
> >>> install.packages("tidyverse")
> >>> ...
> >>> ... later on down the script
> >>> ...
> >>> install.packages("dplyr")
> >>>
> >>> In this case, "dplyr" is part of the tidyverse and will install twice.
> As
> >>> the primary "package manager" for R, it should not install a package
> >> twice
> >>> (by default) when it can be so easily checked. Indeed, many people
> resort
> >>> to writing a few lines of code to filter out already-installed packages
> >> An
> >>> r-help post from 2010 proposed a solution to improving the default
> >>> behavior, by adding "force=FALSE" as a api addition to
> install.packages.(
> >>> https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
> >>>
> >>> Would the R-core devs still consider this proposal?
> >>
> >> Whether or not they'd do it, it's easy for you to do it.
> >>
> >> install.packages <- function(pkgs, ..., force = FALSE) {
> >>     if (!force) {
> >>       pkgs <- Filter(Negate(requireNamespace), pkgs
> >>
> >>     utils::install.packages(pkgs, ...)
> >> }
> >>
> >> You might want to make this more elaborate, e.g. doing update.packages()
> >> on the ones that exist.  But really, isn't the problem with the script
> >> you're using, which could have done a simple test before forcing a slow
> >> install?
> >>
> >> Duncan Murdoch
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Sat Nov  9 00:05:45 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 8 Nov 2019 23:05:45 +0000
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
Message-ID: <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>

Hi Gabe,

Keeping track of where a package was installed from would be a nice 
feature. However it wouldn't be as reliable as comparing hashes to 
decide whether a package needs re-installation or not.

H.

On 11/8/19 12:37, Gabriel Becker wrote:
> Hi Josh,
> 
> There are a few issues I can think of with this. The primary one is that
> CRAN(/Bioconductor) is not the only place one can install packages from. I
> might have version x.y.z of a package installed that was, at the time, a
> development version I got from github, or installed locally, etc. Hell I
> might have a later devel version but want the CRAN version. Not common,
> sure, but wiill likely happen often enough that install.packages not doing
> that for me when I tell it to is probably bad.
> 
> Currently (though there has been some discussion of changing this) packages
> do not remember where they were installed from, so R wouldn't know if the
> version you have is actually fully the same one on the repository you
> pointed install.packages to or not.  If that were changed  and we knew that
> we were getting the byte identical package from the actual same source, I
> think this would be a nice addition, though without it I think it would be
> right a high but not high enough proportion of the time.
> 
> R will build the package from source (depending on what OS you're using)
>> twice by default. This becomes especially burdensome when people are using
>> big packages (i.e. lots of depends) and someone has a script with:
>>
> 
> 
> install.packages("tidyverse")
>> ...
>> ... later on down the script
>> ...
>> install.packages("dplyr")
>>
> 
> I mean, IMHO and as I think Duncan was alluding to, that's straight up an
> error by the script author. I think its a few of them, actually, but its at
> least one. An understandable one, sure, but thats still what it is. Scripts
> (which are meant to be run more than once, generally) usually shouldn't
> really be calling install.packages in the first place, but if they do, they
> should certainly not be installing umbrella packages and the packages they
> bring with them separately.
> 
> Even having one vectorized call to install.packages where all the packages
> are installed would prevent this issue, including in the case where the
> user doesn't understand the purpose of the tidyverse package. Though the
> installation would still occur every time the script was run.
> 
> 
> The last thing to note is that there are at least 2 packages which provide
> a function which does this already (install.load and remotes), so people
> can get this functionality if they need it.
> 
> 
> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:
> 
>>
>>
>> I assumed this list is used to discuss proposals like this to the R
>> codebase. If I'm on the wrong list, please let me know.
>>
> 
> This is the right place to discuss things like this. Thanks for starting
> the conversation.
> 
> Best,
> ~G
> 
>>
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=XG4gVQKZam41YLfI3w8XRAu8s7f2I5jCppA45q6NBu0&s=cOXQGMA9Va3o9x1USGggzF82D1LtFQb2ALpLRLQs2k4&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov  9 00:07:39 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 8 Nov 2019 18:07:39 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAF8bMcYmtZ2eAuyhZb6nrvGgwf6OBPKtR9Y0yeNwDVg-iDeOFg@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <3054fcf3-1242-ccc3-c15c-ca882ad57158@gmail.com>
 <CAF8bMcYmtZ2eAuyhZb6nrvGgwf6OBPKtR9Y0yeNwDVg-iDeOFg@mail.gmail.com>
Message-ID: <76802064-e637-d4c6-d986-4295943c92d0@gmail.com>

On 08/11/2019 6:02 p.m., William Dunlap wrote:
> Suppose update.packages("pkg") installed "pkg" if it were not already 
> installed, in addition to its current behavior of installing "pkg" if 
> "pkg" is installed but a newer version is available.? The OP could then 
> use update.packages() all the time instead of install.packages() the 
> first time and update.packages() subsequent times.

That makes more sense to me than the "force = FALSE" proposal.

Duncan Murdoch

> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com <http://tibco.com>
> 
> 
> On Fri, Nov 8, 2019 at 2:51 PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     On 08/11/2019 2:55 p.m., Joshua Bradley wrote:
>      > I could do this...and I have before. This brings up a more
>     fundamental
>      > question though. You're asking me to write code that changes the
>     logic of
>      > the installation process (i.e. writing my own package installer).
>     Instead
>      > of doing that, I would rather integrate that logic into R itself
>     to improve
>      > the baseline installation process. This api proposal change would be
>      > additive and would not break legacy code.
> 
>     That's not true.? The current behaviour is equivalent to force=TRUE; I
>     believe the proposal was to change the default to force=FALSE.
> 
>     If you didn't change the default, it wouldn't help your example:? the
>     badly written script would run with force=TRUE, and wouldn't benefit
>     at all.
> 
>     Duncan Murdoch
> 
>      >
>      > Package managers like pip (python), conda (python), yum (CentOS), apt
>      > (Ubuntu), and apk (Alpine) are all "smart" enough to know (by their
>      > defaults) when to not download a package again. By proposing this
>     change,
>      > I'm essentially asking that R follow some of the same conventions
>     and best
>      > practices that other package managers have adopted over the decades.
>      >
>      > I assumed this list is used to discuss proposals like this to the R
>      > codebase. If I'm on the wrong list, please let me know.
>      >
>      > P.S. if this change happened, it would be interesting to study
>     the effect
>      > it has on the bandwidth across all CRAN mirrors. A significant
>     drop would
>      > turn into actual $$ saved
>      >
>      > Josh Bradley
>      >
>      >
>      > On Fri, Nov 8, 2019 at 5:00 AM Duncan Murdoch
>     <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>
>      > wrote:
>      >
>      >> On 08/11/2019 2:06 a.m., Joshua Bradley wrote:
>      >>> Hello,
>      >>>
>      >>> Currently if you install a package twice:
>      >>>
>      >>> install.packages("testit")
>      >>> install.packages("testit")
>      >>>
>      >>> R will build the package from source (depending on what OS
>     you're using)
>      >>> twice by default. This becomes especially burdensome when
>     people are
>      >> using
>      >>> big packages (i.e. lots of depends) and someone has a script with:
>      >>>
>      >>> install.packages("tidyverse")
>      >>> ...
>      >>> ... later on down the script
>      >>> ...
>      >>> install.packages("dplyr")
>      >>>
>      >>> In this case, "dplyr" is part of the tidyverse and will install
>     twice. As
>      >>> the primary "package manager" for R, it should not install a
>     package
>      >> twice
>      >>> (by default) when it can be so easily checked. Indeed, many
>     people resort
>      >>> to writing a few lines of code to filter out already-installed
>     packages
>      >> An
>      >>> r-help post from 2010 proposed a solution to improving the default
>      >>> behavior, by adding "force=FALSE" as a api addition to
>     install.packages.(
>      >>> https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
>      >>>
>      >>> Would the R-core devs still consider this proposal?
>      >>
>      >> Whether or not they'd do it, it's easy for you to do it.
>      >>
>      >> install.packages <- function(pkgs, ..., force = FALSE) {
>      >>? ? ?if (!force) {
>      >>? ? ? ?pkgs <- Filter(Negate(requireNamespace), pkgs
>      >>
>      >>? ? ?utils::install.packages(pkgs, ...)
>      >> }
>      >>
>      >> You might want to make this more elaborate, e.g. doing
>     update.packages()
>      >> on the ones that exist.? But really, isn't the problem with the
>     script
>      >> you're using, which could have done a simple test before forcing
>     a slow
>      >> install?
>      >>
>      >> Duncan Murdoch
>      >>
>      >
>      >? ? ? ?[[alternative HTML version deleted]]
>      >
>      > ______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>      >
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sat Nov  9 00:17:56 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 8 Nov 2019 15:17:56 -0800
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
 <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
Message-ID: <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>

I believe introducing a backward compatible force=TRUE is a good
start, even if we're not ready for making force=FALSE the default at
this point.  It would help simplify quite-common instructions like:

if (requireNamespace("BiocManager"))
  install.packages("BiocManager")
BiocManager::install(...)

to

install.packages("BiocManager", force=FALSE)
BiocManager::install(...)

and more so when installing lots of packages conditionally, e.g.

if (requireNamespace("foo")) install.packages("foo")
if (requireNamespace("bar")) install.packages("bar")
...

to

install.packages(c("foo", "bar", ...), force = FALSE)

Before deciding on making force=FALSE the new default, I think it
would be valuable to play the devil's advocate and explore and
identify all possible downsides of such a default, e.g. breaking
existing instructions, downstream package code that uses
install.packages() internally, and so on.

/Henrik

PS. Although the idea of having update.packages() install missing
packages is not bad, I don't think I'm a not a fan for the sole
purpose of risking installation instructions starting using
update.packages() instead, which will certainly confuse those who
don't know the history (think require() vs library()).

On Fri, Nov 8, 2019 at 3:11 PM Pages, Herve <hpages at fredhutch.org> wrote:
>
> Hi Gabe,
>
> Keeping track of where a package was installed from would be a nice
> feature. However it wouldn't be as reliable as comparing hashes to
> decide whether a package needs re-installation or not.
>
> H.
>
> On 11/8/19 12:37, Gabriel Becker wrote:
> > Hi Josh,
> >
> > There are a few issues I can think of with this. The primary one is that
> > CRAN(/Bioconductor) is not the only place one can install packages from. I
> > might have version x.y.z of a package installed that was, at the time, a
> > development version I got from github, or installed locally, etc. Hell I
> > might have a later devel version but want the CRAN version. Not common,
> > sure, but wiill likely happen often enough that install.packages not doing
> > that for me when I tell it to is probably bad.
> >
> > Currently (though there has been some discussion of changing this) packages
> > do not remember where they were installed from, so R wouldn't know if the
> > version you have is actually fully the same one on the repository you
> > pointed install.packages to or not.  If that were changed  and we knew that
> > we were getting the byte identical package from the actual same source, I
> > think this would be a nice addition, though without it I think it would be
> > right a high but not high enough proportion of the time.
> >
> > R will build the package from source (depending on what OS you're using)
> >> twice by default. This becomes especially burdensome when people are using
> >> big packages (i.e. lots of depends) and someone has a script with:
> >>
> >
> >
> > install.packages("tidyverse")
> >> ...
> >> ... later on down the script
> >> ...
> >> install.packages("dplyr")
> >>
> >
> > I mean, IMHO and as I think Duncan was alluding to, that's straight up an
> > error by the script author. I think its a few of them, actually, but its at
> > least one. An understandable one, sure, but thats still what it is. Scripts
> > (which are meant to be run more than once, generally) usually shouldn't
> > really be calling install.packages in the first place, but if they do, they
> > should certainly not be installing umbrella packages and the packages they
> > bring with them separately.
> >
> > Even having one vectorized call to install.packages where all the packages
> > are installed would prevent this issue, including in the case where the
> > user doesn't understand the purpose of the tidyverse package. Though the
> > installation would still occur every time the script was run.
> >
> >
> > The last thing to note is that there are at least 2 packages which provide
> > a function which does this already (install.load and remotes), so people
> > can get this functionality if they need it.
> >
> >
> > On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:
> >
> >>
> >>
> >> I assumed this list is used to discuss proposals like this to the R
> >> codebase. If I'm on the wrong list, please let me know.
> >>
> >
> > This is the right place to discuss things like this. Thanks for starting
> > the conversation.
> >
> > Best,
> > ~G
> >
> >>
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=XG4gVQKZam41YLfI3w8XRAu8s7f2I5jCppA45q6NBu0&s=cOXQGMA9Va3o9x1USGggzF82D1LtFQb2ALpLRLQs2k4&e=
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Sat Nov  9 00:34:02 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 8 Nov 2019 23:34:02 +0000
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
 <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
Message-ID: <b96e212d-8a1d-b859-87b5-53935a6dc0d0@fredhutch.org>

Actually there is one gotcha here: even if a package has not changed 
(i.e. same exact hash), there are situations where you want to reinstall 
it because one package it depends on has changed. This is because some 
of the stuff that gets cached at installation time (e.g. method table) 
can become stale and needs to be resynced.

We sometimes have to deal with this kind of situation in Bioconductor 
when we make changes to some infrastructure packages. To avoid package 
caches to become out-of-sync on the user machine after the user gets the 
new version of the infrastructure package, we also bump the versions of 
all the reverse deps for which the cache needs to be resynced. A side 
effect of the version bumps is to also trigger build and propagation of 
new Windows and Mac binaries for the reverse deps affected by the 
change, which is good, because they also need to be rebuilt and 
reinstalled. This is an ugly situation but luckily a rare one and it 
generally happens in BioC devel only.

H.


On 11/8/19 15:05, Herv? Pag?s wrote:
> Hi Gabe,
> 
> Keeping track of where a package was installed from would be a nice 
> feature. However it wouldn't be as reliable as comparing hashes to 
> decide whether a package needs re-installation or not.
> 
> H.
> 
> On 11/8/19 12:37, Gabriel Becker wrote:
>> Hi Josh,
>>
>> There are a few issues I can think of with this. The primary one is that
>> CRAN(/Bioconductor) is not the only place one can install packages 
>> from. I
>> might have version x.y.z of a package installed that was, at the time, a
>> development version I got from github, or installed locally, etc. Hell I
>> might have a later devel version but want the CRAN version. Not common,
>> sure, but wiill likely happen often enough that install.packages not 
>> doing
>> that for me when I tell it to is probably bad.
>>
>> Currently (though there has been some discussion of changing this) 
>> packages
>> do not remember where they were installed from, so R wouldn't know if the
>> version you have is actually fully the same one on the repository you
>> pointed install.packages to or not.? If that were changed? and we knew 
>> that
>> we were getting the byte identical package from the actual same source, I
>> think this would be a nice addition, though without it I think it 
>> would be
>> right a high but not high enough proportion of the time.
>>
>> R will build the package from source (depending on what OS you're using)
>>> twice by default. This becomes especially burdensome when people are 
>>> using
>>> big packages (i.e. lots of depends) and someone has a script with:
>>>
>>
>>
>> install.packages("tidyverse")
>>> ...
>>> ... later on down the script
>>> ...
>>> install.packages("dplyr")
>>>
>>
>> I mean, IMHO and as I think Duncan was alluding to, that's straight up an
>> error by the script author. I think its a few of them, actually, but 
>> its at
>> least one. An understandable one, sure, but thats still what it is. 
>> Scripts
>> (which are meant to be run more than once, generally) usually shouldn't
>> really be calling install.packages in the first place, but if they do, 
>> they
>> should certainly not be installing umbrella packages and the packages 
>> they
>> bring with them separately.
>>
>> Even having one vectorized call to install.packages where all the 
>> packages
>> are installed would prevent this issue, including in the case where the
>> user doesn't understand the purpose of the tidyverse package. Though the
>> installation would still occur every time the script was run.
>>
>>
>> The last thing to note is that there are at least 2 packages which 
>> provide
>> a function which does this already (install.load and remotes), so people
>> can get this functionality if they need it.
>>
>>
>> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> 
>> wrote:
>>
>>>
>>>
>>> I assumed this list is used to discuss proposals like this to the R
>>> codebase. If I'm on the wrong list, please let me know.
>>>
>>
>> This is the right place to discuss things like this. Thanks for starting
>> the conversation.
>>
>> Best,
>> ~G
>>
>>>
>>>
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=XG4gVQKZam41YLfI3w8XRAu8s7f2I5jCppA45q6NBu0&s=cOXQGMA9Va3o9x1USGggzF82D1LtFQb2ALpLRLQs2k4&e= 
>>
>>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From hp@ge@ @end|ng |rom |redhutch@org  Sat Nov  9 01:10:18 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Sat, 9 Nov 2019 00:10:18 +0000
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
 <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
 <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>
Message-ID: <2a5c0597-4cfe-3587-2281-2e2487d1ee03@fredhutch.org>

Sounds a very reasonable approach to me.

H.

On 11/8/19 15:17, Henrik Bengtsson wrote:
> I believe introducing a backward compatible force=TRUE is a good
> start, even if we're not ready for making force=FALSE the default at
> this point.  It would help simplify quite-common instructions like:
> 
> if (requireNamespace("BiocManager"))
>    install.packages("BiocManager")
> BiocManager::install(...)
> 
> to
> 
> install.packages("BiocManager", force=FALSE)
> BiocManager::install(...)
> 
> and more so when installing lots of packages conditionally, e.g.
> 
> if (requireNamespace("foo")) install.packages("foo")
> if (requireNamespace("bar")) install.packages("bar")
> ...
> 
> to
> 
> install.packages(c("foo", "bar", ...), force = FALSE)
> 
> Before deciding on making force=FALSE the new default, I think it
> would be valuable to play the devil's advocate and explore and
> identify all possible downsides of such a default, e.g. breaking
> existing instructions, downstream package code that uses
> install.packages() internally, and so on.
> 
> /Henrik
> 
> PS. Although the idea of having update.packages() install missing
> packages is not bad, I don't think I'm a not a fan for the sole
> purpose of risking installation instructions starting using
> update.packages() instead, which will certainly confuse those who
> don't know the history (think require() vs library()).
> 
> On Fri, Nov 8, 2019 at 3:11 PM Pages, Herve <hpages at fredhutch.org> wrote:
>>
>> Hi Gabe,
>>
>> Keeping track of where a package was installed from would be a nice
>> feature. However it wouldn't be as reliable as comparing hashes to
>> decide whether a package needs re-installation or not.
>>
>> H.
>>
>> On 11/8/19 12:37, Gabriel Becker wrote:
>>> Hi Josh,
>>>
>>> There are a few issues I can think of with this. The primary one is that
>>> CRAN(/Bioconductor) is not the only place one can install packages from. I
>>> might have version x.y.z of a package installed that was, at the time, a
>>> development version I got from github, or installed locally, etc. Hell I
>>> might have a later devel version but want the CRAN version. Not common,
>>> sure, but wiill likely happen often enough that install.packages not doing
>>> that for me when I tell it to is probably bad.
>>>
>>> Currently (though there has been some discussion of changing this) packages
>>> do not remember where they were installed from, so R wouldn't know if the
>>> version you have is actually fully the same one on the repository you
>>> pointed install.packages to or not.  If that were changed  and we knew that
>>> we were getting the byte identical package from the actual same source, I
>>> think this would be a nice addition, though without it I think it would be
>>> right a high but not high enough proportion of the time.
>>>
>>> R will build the package from source (depending on what OS you're using)
>>>> twice by default. This becomes especially burdensome when people are using
>>>> big packages (i.e. lots of depends) and someone has a script with:
>>>>
>>>
>>>
>>> install.packages("tidyverse")
>>>> ...
>>>> ... later on down the script
>>>> ...
>>>> install.packages("dplyr")
>>>>
>>>
>>> I mean, IMHO and as I think Duncan was alluding to, that's straight up an
>>> error by the script author. I think its a few of them, actually, but its at
>>> least one. An understandable one, sure, but thats still what it is. Scripts
>>> (which are meant to be run more than once, generally) usually shouldn't
>>> really be calling install.packages in the first place, but if they do, they
>>> should certainly not be installing umbrella packages and the packages they
>>> bring with them separately.
>>>
>>> Even having one vectorized call to install.packages where all the packages
>>> are installed would prevent this issue, including in the case where the
>>> user doesn't understand the purpose of the tidyverse package. Though the
>>> installation would still occur every time the script was run.
>>>
>>>
>>> The last thing to note is that there are at least 2 packages which provide
>>> a function which does this already (install.load and remotes), so people
>>> can get this functionality if they need it.
>>>
>>>
>>> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:
>>>
>>>>
>>>>
>>>> I assumed this list is used to discuss proposals like this to the R
>>>> codebase. If I'm on the wrong list, please let me know.
>>>>
>>>
>>> This is the right place to discuss things like this. Thanks for starting
>>> the conversation.
>>>
>>> Best,
>>> ~G
>>>
>>>>
>>>>
>>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=XG4gVQKZam41YLfI3w8XRAu8s7f2I5jCppA45q6NBu0&s=cOXQGMA9Va3o9x1USGggzF82D1LtFQb2ALpLRLQs2k4&e=
>>>
>>
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=fGJJxDES27LnpzyoNVndAepN8xSbeWQ7mB48xpQ-5UU&s=OQXCqMhgyQJDnh8FbLqcbXNHOXbd3F1uDWvKDS6Fk3s&e=

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov  9 01:27:49 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 8 Nov 2019 19:27:49 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
 <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
 <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>
Message-ID: <818660eb-54ca-2864-c083-99fdfd0553ce@gmail.com>

On 08/11/2019 6:17 p.m., Henrik Bengtsson wrote:
> I believe introducing a backward compatible force=TRUE is a good
> start, even if we're not ready for making force=FALSE the default at
> this point.  It would help simplify quite-common instructions like
> 
> if (requireNamespace("BiocManager"))
>    install.packages("BiocManager")
> BiocManager::install(...)
> 
> to
> 
> install.packages("BiocManager", force=FALSE)
> BiocManager::install(...)

If simplifying instructions is the goal, it would be even simpler to 
just install it unconditionally:

install.packages("BiocManager")

Unlike dplyr (the original example in this thread), BiocManager is a 
tiny package with no compiling needed, so it hardly needs any time to 
install.

And as previously mentioned, the backward compatible force=TRUE wouldn't 
help with the bad script at all.  In fact, the bad script could be fixed 
simply by realizing that

install.packages("tidyverse")

means it's actually a bad idea to also include

install.packages("dplyr")

because the former would install dplyr if and only if it was not already 
installed.  So it seems to me that fixing the bad script (by deleting 
one line) is the solution to the problem, not fixing R with a multistage 
series of revisions, tests, etc.

Duncan Murdoch

> 
> and more so when installing lots of packages conditionally, e.g.
> 
> if (requireNamespace("foo")) install.packages("foo")
> if (requireNamespace("bar")) install.packages("bar")
> ...
> 
> to
> 
> install.packages(c("foo", "bar", ...), force = FALSE)
> 
> Before deciding on making force=FALSE the new default, I think it
> would be valuable to play the devil's advocate and explore and
> identify all possible downsides of such a default, e.g. breaking
> existing instructions, downstream package code that uses
> install.packages() internally, and so on.
> 
> /Henrik
> 
> PS. Although the idea of having update.packages() install missing
> packages is not bad, I don't think I'm a not a fan for the sole
> purpose of risking installation instructions starting using
> update.packages() instead, which will certainly confuse those who
> don't know the history (think require() vs library()).
> 
> On Fri, Nov 8, 2019 at 3:11 PM Pages, Herve <hpages at fredhutch.org> wrote:
>>
>> Hi Gabe,
>>
>> Keeping track of where a package was installed from would be a nice
>> feature. However it wouldn't be as reliable as comparing hashes to
>> decide whether a package needs re-installation or not.
>>
>> H.
>>
>> On 11/8/19 12:37, Gabriel Becker wrote:
>>> Hi Josh,
>>>
>>> There are a few issues I can think of with this. The primary one is that
>>> CRAN(/Bioconductor) is not the only place one can install packages from. I
>>> might have version x.y.z of a package installed that was, at the time, a
>>> development version I got from github, or installed locally, etc. Hell I
>>> might have a later devel version but want the CRAN version. Not common,
>>> sure, but wiill likely happen often enough that install.packages not doing
>>> that for me when I tell it to is probably bad.
>>>
>>> Currently (though there has been some discussion of changing this) packages
>>> do not remember where they were installed from, so R wouldn't know if the
>>> version you have is actually fully the same one on the repository you
>>> pointed install.packages to or not.  If that were changed  and we knew that
>>> we were getting the byte identical package from the actual same source, I
>>> think this would be a nice addition, though without it I think it would be
>>> right a high but not high enough proportion of the time.
>>>
>>> R will build the package from source (depending on what OS you're using)
>>>> twice by default. This becomes especially burdensome when people are using
>>>> big packages (i.e. lots of depends) and someone has a script with:
>>>>
>>>
>>>
>>> install.packages("tidyverse")
>>>> ...
>>>> ... later on down the script
>>>> ...
>>>> install.packages("dplyr")
>>>>
>>>
>>> I mean, IMHO and as I think Duncan was alluding to, that's straight up an
>>> error by the script author. I think its a few of them, actually, but its at
>>> least one. An understandable one, sure, but thats still what it is. Scripts
>>> (which are meant to be run more than once, generally) usually shouldn't
>>> really be calling install.packages in the first place, but if they do, they
>>> should certainly not be installing umbrella packages and the packages they
>>> bring with them separately.
>>>
>>> Even having one vectorized call to install.packages where all the packages
>>> are installed would prevent this issue, including in the case where the
>>> user doesn't understand the purpose of the tidyverse package. Though the
>>> installation would still occur every time the script was run.
>>>
>>>
>>> The last thing to note is that there are at least 2 packages which provide
>>> a function which does this already (install.load and remotes), so people
>>> can get this functionality if they need it.
>>>
>>>
>>> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:
>>>
>>>>
>>>>
>>>> I assumed this list is used to discuss proposals like this to the R
>>>> codebase. If I'm on the wrong list, please let me know.
>>>>
>>>
>>> This is the right place to discuss things like this. Thanks for starting
>>> the conversation.
>>>
>>> Best,
>>> ~G
>>>
>>>>
>>>>
>>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=XG4gVQKZam41YLfI3w8XRAu8s7f2I5jCppA45q6NBu0&s=cOXQGMA9Va3o9x1USGggzF82D1LtFQb2ALpLRLQs2k4&e=
>>>
>>
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jgbr@d|ey1 @end|ng |rom gm@||@com  Sat Nov  9 03:24:58 2019
From: jgbr@d|ey1 @end|ng |rom gm@||@com (Joshua Bradley)
Date: Fri, 8 Nov 2019 21:24:58 -0500
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <818660eb-54ca-2864-c083-99fdfd0553ce@gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
 <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
 <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>
 <818660eb-54ca-2864-c083-99fdfd0553ce@gmail.com>
Message-ID: <CAKShX4Bo-CO8DMvyOGTFB-sPWGWgLqeETq4vqGsg=9u_eoGY-A@mail.gmail.com>

Just to clarify the expected behavior I had in mind when proposing the
force argument.

force = T would mean you will "force" an install no matter what (aligns
with the current behavior of the command)

force = F means install a package if it is not found in the local R library
on your system. If it is already installed, do nothing and return as if a
successfull install occurred.



On Fri, Nov 8, 2019, 7:27 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 08/11/2019 6:17 p.m., Henrik Bengtsson wrote:
> > I believe introducing a backward compatible force=TRUE is a good
> > start, even if we're not ready for making force=FALSE the default at
> > this point.  It would help simplify quite-common instructions like
> >
> > if (requireNamespace("BiocManager"))
> >    install.packages("BiocManager")
> > BiocManager::install(...)
> >
> > to
> >
> > install.packages("BiocManager", force=FALSE)
> > BiocManager::install(...)
>
> If simplifying instructions is the goal, it would be even simpler to
> just install it unconditionally:
>
> install.packages("BiocManager")
>
> Unlike dplyr (the original example in this thread), BiocManager is a
> tiny package with no compiling needed, so it hardly needs any time to
> install.
>
> And as previously mentioned, the backward compatible force=TRUE wouldn't
> help with the bad script at all.  In fact, the bad script could be fixed
> simply by realizing that
>
> install.packages("tidyverse")
>
> means it's actually a bad idea to also include
>
> install.packages("dplyr")
>
> because the former would install dplyr if and only if it was not already
> installed.  So it seems to me that fixing the bad script (by deleting
> one line) is the solution to the problem, not fixing R with a multistage
> series of revisions, tests, etc.
>
> Duncan Murdoch
>
> >
> > and more so when installing lots of packages conditionally, e.g.
> >
> > if (requireNamespace("foo")) install.packages("foo")
> > if (requireNamespace("bar")) install.packages("bar")
> > ...
> >
> > to
> >
> > install.packages(c("foo", "bar", ...), force = FALSE)
> >
> > Before deciding on making force=FALSE the new default, I think it
> > would be valuable to play the devil's advocate and explore and
> > identify all possible downsides of such a default, e.g. breaking
> > existing instructions, downstream package code that uses
> > install.packages() internally, and so on.
> >
> > /Henrik
> >
> > PS. Although the idea of having update.packages() install missing
> > packages is not bad, I don't think I'm a not a fan for the sole
> > purpose of risking installation instructions starting using
> > update.packages() instead, which will certainly confuse those who
> > don't know the history (think require() vs library()).
> >
> > On Fri, Nov 8, 2019 at 3:11 PM Pages, Herve <hpages at fredhutch.org>
> wrote:
> >>
> >> Hi Gabe,
> >>
> >> Keeping track of where a package was installed from would be a nice
> >> feature. However it wouldn't be as reliable as comparing hashes to
> >> decide whether a package needs re-installation or not.
> >>
> >> H.
> >>
> >> On 11/8/19 12:37, Gabriel Becker wrote:
> >>> Hi Josh,
> >>>
> >>> There are a few issues I can think of with this. The primary one is
> that
> >>> CRAN(/Bioconductor) is not the only place one can install packages
> from. I
> >>> might have version x.y.z of a package installed that was, at the time,
> a
> >>> development version I got from github, or installed locally, etc. Hell
> I
> >>> might have a later devel version but want the CRAN version. Not common,
> >>> sure, but wiill likely happen often enough that install.packages not
> doing
> >>> that for me when I tell it to is probably bad.
> >>>
> >>> Currently (though there has been some discussion of changing this)
> packages
> >>> do not remember where they were installed from, so R wouldn't know if
> the
> >>> version you have is actually fully the same one on the repository you
> >>> pointed install.packages to or not.  If that were changed  and we knew
> that
> >>> we were getting the byte identical package from the actual same
> source, I
> >>> think this would be a nice addition, though without it I think it
> would be
> >>> right a high but not high enough proportion of the time.
> >>>
> >>> R will build the package from source (depending on what OS you're
> using)
> >>>> twice by default. This becomes especially burdensome when people are
> using
> >>>> big packages (i.e. lots of depends) and someone has a script with:
> >>>>
> >>>
> >>>
> >>> install.packages("tidyverse")
> >>>> ...
> >>>> ... later on down the script
> >>>> ...
> >>>> install.packages("dplyr")
> >>>>
> >>>
> >>> I mean, IMHO and as I think Duncan was alluding to, that's straight up
> an
> >>> error by the script author. I think its a few of them, actually, but
> its at
> >>> least one. An understandable one, sure, but thats still what it is.
> Scripts
> >>> (which are meant to be run more than once, generally) usually shouldn't
> >>> really be calling install.packages in the first place, but if they do,
> they
> >>> should certainly not be installing umbrella packages and the packages
> they
> >>> bring with them separately.
> >>>
> >>> Even having one vectorized call to install.packages where all the
> packages
> >>> are installed would prevent this issue, including in the case where the
> >>> user doesn't understand the purpose of the tidyverse package. Though
> the
> >>> installation would still occur every time the script was run.
> >>>
> >>>
> >>> The last thing to note is that there are at least 2 packages which
> provide
> >>> a function which does this already (install.load and remotes), so
> people
> >>> can get this functionality if they need it.
> >>>
> >>>
> >>> On Fri, Nov 8, 2019 at 11:56 AM Joshua Bradley <jgbradley1 at gmail.com>
> wrote:
> >>>
> >>>>
> >>>>
> >>>> I assumed this list is used to discuss proposals like this to the R
> >>>> codebase. If I'm on the wrong list, please let me know.
> >>>>
> >>>
> >>> This is the right place to discuss things like this. Thanks for
> starting
> >>> the conversation.
> >>>
> >>> Best,
> >>> ~G
> >>>
> >>>>
> >>>>
> >>>
> >>>        [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=XG4gVQKZam41YLfI3w8XRAu8s7f2I5jCppA45q6NBu0&s=cOXQGMA9Va3o9x1USGggzF82D1LtFQb2ALpLRLQs2k4&e=
> >>>
> >>
> >> --
> >> Herv? Pag?s
> >>
> >> Program in Computational Biology
> >> Division of Public Health Sciences
> >> Fred Hutchinson Cancer Research Center
> >> 1100 Fairview Ave. N, M1-B514
> >> P.O. Box 19024
> >> Seattle, WA 98109-1024
> >>
> >> E-mail: hpages at fredhutch.org
> >> Phone:  (206) 667-5791
> >> Fax:    (206) 667-1319
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From h@w|ckh@m @end|ng |rom gm@||@com  Sat Nov  9 15:57:16 2019
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Sat, 9 Nov 2019 08:57:16 -0600
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
Message-ID: <CABdHhvFc9WVubo7wx8U_NfLkN4mY05FqA4q8r2r1jPvUm=brkg@mail.gmail.com>

If this is the behaviour you are looking for, you might like to try
pak (https://pak.r-lib.org)

# Create a temporary library
path <- tempfile()
dir.create(path)
.libPaths(path)

pak::pkg_install("scales")
#> ? Will install 8 packages:
#>   colorspace (1.4-1), labeling (0.3), munsell (0.5.0), R6 (2.4.0),
RColorBrewer
#>   (1.1-2), Rcpp (1.0.2), scales (1.0.0), viridisLite (0.3.0)
#>
#> ? Will download 2 CRAN packages (4.7 MB), cached: 6 (3.69 MB).
#>
#> ? Installed colorspace 1.4-1 [139ms]
#> ? Installed labeling 0.3 [206ms]
#> ? Installed munsell 0.5.0 [288ms]
#> ? Installed R6 2.4.0 [375ms]
#> ? Installed RColorBrewer 1.1-2 [423ms]
#> ? Installed Rcpp 1.0.2 [472ms]
#> ? Installed scales 1.0.0 [511ms]
#> ? Installed viridisLite 0.3.0 [569ms]
#> ? 1 + 7 pkgs | kept 0, updated 0, new 8 | downloaded 2 (4.7 MB) [2.8s]

pak::pkg_install("scales")
#> ? No changes needed
#> ? 1 + 7 pkgs | kept 7, updated 0, new 0 | downloaded 0 (0 B) [855ms]

remove.packages(c("Rcpp", "munsell"))
pak::pkg_install("scales")
#> ? Will install 2 packages:
#>   munsell (0.5.0), Rcpp (1.0.2)
#>
#> ? All 2 packages (4.88 MB) are cached.
#>
#> ? Installed munsell 0.5.0 [75ms]
#> ? Installed Rcpp 1.0.2 [242ms]
#> ? 1 + 7 pkgs | kept 6, updated 0, new 2 | downloaded 0 (0 B) [1.5s]

On Fri, Nov 8, 2019 at 1:07 AM Joshua Bradley <jgbradley1 at gmail.com> wrote:
>
> Hello,
>
> Currently if you install a package twice:
>
> install.packages("testit")
> install.packages("testit")
>
> R will build the package from source (depending on what OS you're using)
> twice by default. This becomes especially burdensome when people are using
> big packages (i.e. lots of depends) and someone has a script with:
>
> install.packages("tidyverse")
> ...
> ... later on down the script
> ...
> install.packages("dplyr")
>
> In this case, "dplyr" is part of the tidyverse and will install twice. As
> the primary "package manager" for R, it should not install a package twice
> (by default) when it can be so easily checked. Indeed, many people resort
> to writing a few lines of code to filter out already-installed packages An
> r-help post from 2010 proposed a solution to improving the default
> behavior, by adding "force=FALSE" as a api addition to install.packages.(
> https://stat.ethz.ch/pipermail/r-help/2010-May/239492.html)
>
> Would the R-core devs still consider this proposal?
>
> Josh Bradley
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
http://hadley.nz


From edd @end|ng |rom deb|@n@org  Sat Nov  9 16:35:22 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 9 Nov 2019 09:35:22 -0600
Subject: [Rd] improving the performance of install.packages
In-Reply-To: <CAKShX4Bo-CO8DMvyOGTFB-sPWGWgLqeETq4vqGsg=9u_eoGY-A@mail.gmail.com>
References: <CAKShX4BiuLvT02z9=jR=eqCZLbfb54HWu_sKQU5ni+L7fhjhgQ@mail.gmail.com>
 <149ae987-cb1f-04d0-dcd6-784b0666f970@gmail.com>
 <CAKShX4Dr8RS0OTwWbmn+RvSDvVtJ-jARSs2wc7cOrdrd8xPV1A@mail.gmail.com>
 <CAD4oTHH+pCHKQXui8fNpbeALqfCgmwYo+35FpVBaG4UAFvj0+A@mail.gmail.com>
 <cfa06563-8b8b-9ec4-809f-81c90dee7d35@fredhutch.org>
 <CAFDcVCS4dnBoL0JKCEwo9j=nsTbaew3HpCy=tkiCo6sZG9C1VQ@mail.gmail.com>
 <818660eb-54ca-2864-c083-99fdfd0553ce@gmail.com>
 <CAKShX4Bo-CO8DMvyOGTFB-sPWGWgLqeETq4vqGsg=9u_eoGY-A@mail.gmail.com>
Message-ID: <24006.56506.503539.92037@rob.eddelbuettel.com>


Joshua,

Doing this well "horizontally" (across different OSs even though for just one
domain, like CRAN and R) is difficult.

We have decent "vertical" solutions (with one OS / distro) for (at least
some) use / deployment cases as I show in a brief blog post and video here

  http://dirk.eddelbuettel.com/blog/2019/06/09#022_rocker_and_ppas

  https://www.youtube.com/watch?v=qIjWirNma-8&t=19s

Installing either 'tidyverse' or 'rstan' reduces to a single 'apt-get
install' command invocation which installs everything needed in a minute or
two. In a vertical stack, we can control for other OS-specific dependencies
which is powerful.  But it doesn't span across OSs. Covering installations
both "horizontally" and "vertically" is hard.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sun Nov 10 09:36:56 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sun, 10 Nov 2019 09:36:56 +0100
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
Message-ID: <24007.52264.596794.767557@stat.math.ethz.ch>

>>>>> Gabriel Becker 
>>>>>     on Sat, 2 Nov 2019 12:37:08 -0700 writes:

    > I agree that we can be careful and narrow and still see a
    > nice improvement in behavior. While Herve's point is valid
    > and I understand his frustration, I think staying within
    > the matrix vs c(matrix, array) space is the right scope
    > for this work in terms of fiddling with inheritance.

 [.................]


> > Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
>
> good point, and that's why my usage of  inherits(.,.) was not
> quite to the point.  [OTOH, it was to the point, as indeed from
>       the ?class / ?inherits docu, S3 method dispatch and inherits
>       must be consistent ]
>
>     > which would break -- unless we change class(x) to return the whole
> set of inherited classes, which I sense that we'd rather not do....

  [................]

> Note again that both "matrix" and "array" are special [see ?class] as
> being of  __implicit class__  and I am considering that this
> implicit class behavior for these two should be slightly
> changed ....
>
> And indeed I think you are right on spot and this would mean
> that indeed the implicit class
> "matrix" should rather become c("matrix", "array").

I've made up my mind (and not been contradicted by my fellow R
corers) to try go there for  R 4.0.0   next April.

I've found the few places in base R that needed a change (to
pass 'make check-all' in the R sources) and found that indeed a
overzealous check in 'Matrix' needed also a change (a place
where the checking code assume  class(<matrix>) |--> "matrix" ).

There are certainly many more package (codes and checks) that
need adaption .. i.e., should be changed rather *before* the
above change is activated in R-devel (and then will affect all CRAN
and Bioconductor checks.)

To this end, I've published an  'R Blog' yesterday,

   http://bit.ly/R_blog_class_think_2x

which translates to

   https://developer.r-project.org/Blog/public/2019/11/09/when-you-think-class.-think-again/index.html

notably mentioning why using  class(x) == "...."  (or '!=')  or
switch(class(.) ...)  is quite unsafe and hence bad and you
should very often not replace  class(x)  by  class(x)[1]  but
really use the "only truly correct" ;-)

     inherits(x,  "...")
or
     is(x,  "....")   # if you're advanced/brave enough (:-) to
     	    	      # use formal classes (S4)
     
Martin Maechler
ETH Zurich and R Core Team


From h@n@on @end|ng |rom dep@uw@edu  Sun Nov 10 15:17:30 2019
From: h@n@on @end|ng |rom dep@uw@edu (Bryan Hanson)
Date: Sun, 10 Nov 2019 09:17:30 -0500
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <24007.52264.596794.767557@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
Message-ID: <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>



> On Nov 10, 2019, at 3:36 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Gabriel Becker 
>>>>>>    on Sat, 2 Nov 2019 12:37:08 -0700 writes:
> 
>> I agree that we can be careful and narrow and still see a
>> nice improvement in behavior. While Herve's point is valid
>> and I understand his frustration, I think staying within
>> the matrix vs c(matrix, array) space is the right scope
>> for this work in terms of fiddling with inheritance.
> 
> [.................]
> 
> 
>>> Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
>> 
>> good point, and that's why my usage of  inherits(.,.) was not
>> quite to the point.  [OTOH, it was to the point, as indeed from
>>      the ?class / ?inherits docu, S3 method dispatch and inherits
>>      must be consistent ]
>> 
>>> which would break -- unless we change class(x) to return the whole
>> set of inherited classes, which I sense that we'd rather not do....
> 
>  [................]
> 
>> Note again that both "matrix" and "array" are special [see ?class] as
>> being of  __implicit class__  and I am considering that this
>> implicit class behavior for these two should be slightly
>> changed ....
>> 
>> And indeed I think you are right on spot and this would mean
>> that indeed the implicit class
>> "matrix" should rather become c("matrix", "array").
> 
> I've made up my mind (and not been contradicted by my fellow R
> corers) to try go there for  R 4.0.0   next April.
> 
> I've found the few places in base R that needed a change (to
> pass 'make check-all' in the R sources) and found that indeed a
> overzealous check in 'Matrix' needed also a change (a place
> where the checking code assume  class(<matrix>) |--> "matrix" ).
> 
> There are certainly many more package (codes and checks) that
> need adaption .. i.e., should be changed rather *before* the
> above change is activated in R-devel (and then will affect all CRAN
> and Bioconductor checks.)
> 
> To this end, I've published an  'R Blog' yesterday,
> 
>   http://bit.ly/R_blog_class_think_2x
> 
> which translates to
> 
>   https://developer.r-project.org/Blog/public/2019/11/09/when-you-think-class.-think-again/index.html
> 
> notably mentioning why using  class(x) == "...."  (or '!=')  or
> switch(class(.) ...)  is quite unsafe and hence bad and you
> should very often not replace  class(x)  by  class(x)[1]  but
> really use the "only truly correct" ;-)
> 
>     inherits(x,  "...")
> or
>     is(x,  "....")   # if you're advanced/brave enough (:-) to
>     	    	      # use formal classes (S4)

Thanks for the helpful blog post Martin. Is the following

  ?test_class?  %in% class(some_object)

which I think in your symbols would be

  ??? %in% class(x)

safe as far as you see it? By safe, I mean equivalent to your suggestion of inherits(x, ???) .

Thanks, Bryan


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Nov 10 17:48:26 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 10 Nov 2019 11:48:26 -0500
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
Message-ID: <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>

On 10/11/2019 9:17 a.m., Bryan Hanson wrote:
> 
> 
>> On Nov 10, 2019, at 3:36 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> Gabriel Becker
>>>>>>>     on Sat, 2 Nov 2019 12:37:08 -0700 writes:
>>
>>> I agree that we can be careful and narrow and still see a
>>> nice improvement in behavior. While Herve's point is valid
>>> and I understand his frustration, I think staying within
>>> the matrix vs c(matrix, array) space is the right scope
>>> for this work in terms of fiddling with inheritance.
>>
>> [.................]
>>
>>
>>>> Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
>>>
>>> good point, and that's why my usage of  inherits(.,.) was not
>>> quite to the point.  [OTOH, it was to the point, as indeed from
>>>       the ?class / ?inherits docu, S3 method dispatch and inherits
>>>       must be consistent ]
>>>
>>>> which would break -- unless we change class(x) to return the whole
>>> set of inherited classes, which I sense that we'd rather not do....
>>
>>   [................]
>>
>>> Note again that both "matrix" and "array" are special [see ?class] as
>>> being of  __implicit class__  and I am considering that this
>>> implicit class behavior for these two should be slightly
>>> changed ....
>>>
>>> And indeed I think you are right on spot and this would mean
>>> that indeed the implicit class
>>> "matrix" should rather become c("matrix", "array").
>>
>> I've made up my mind (and not been contradicted by my fellow R
>> corers) to try go there for  R 4.0.0   next April.
>>
>> I've found the few places in base R that needed a change (to
>> pass 'make check-all' in the R sources) and found that indeed a
>> overzealous check in 'Matrix' needed also a change (a place
>> where the checking code assume  class(<matrix>) |--> "matrix" ).
>>
>> There are certainly many more package (codes and checks) that
>> need adaption .. i.e., should be changed rather *before* the
>> above change is activated in R-devel (and then will affect all CRAN
>> and Bioconductor checks.)
>>
>> To this end, I've published an  'R Blog' yesterday,
>>
>>    http://bit.ly/R_blog_class_think_2x
>>
>> which translates to
>>
>>    https://developer.r-project.org/Blog/public/2019/11/09/when-you-think-class.-think-again/index.html
>>
>> notably mentioning why using  class(x) == "...."  (or '!=')  or
>> switch(class(.) ...)  is quite unsafe and hence bad and you
>> should very often not replace  class(x)  by  class(x)[1]  but
>> really use the "only truly correct" ;-)
>>
>>      inherits(x,  "...")
>> or
>>      is(x,  "....")   # if you're advanced/brave enough (:-) to
>>      	    	      # use formal classes (S4)
> 
> Thanks for the helpful blog post Martin. Is the following
> 
>    ?test_class?  %in% class(some_object)
> 
> which I think in your symbols would be
> 
>    ??? %in% class(x)
> 
> safe as far as you see it? By safe, I mean equivalent to your suggestion of inherits(x, ???) .

Those aren't equivalent if S4 gets involved.  You can see it if you run 
this code:

example("new") # Creates an object named t2 of class "trackcurve"
                # that contains "track"
inherits(t2, "track")  # TRUE
"track" %in% class(t2) # FALSE

I can't think of any examples not involving S4.

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov 11 10:40:11 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 11 Nov 2019 10:40:11 +0100
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
 <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
Message-ID: <24009.11387.450978.455955@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Sun, 10 Nov 2019 11:48:26 -0500 writes:

    > On 10/11/2019 9:17 a.m., Bryan Hanson wrote:
    >> 
    >> 
    >>> On Nov 10, 2019, at 3:36 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >>> 
    >>>>>>>> Gabriel Becker
    >>>>>>>> on Sat, 2 Nov 2019 12:37:08 -0700 writes:
    >>> 
    >>>> I agree that we can be careful and narrow and still see a
    >>>> nice improvement in behavior. While Herve's point is valid
    >>>> and I understand his frustration, I think staying within
    >>>> the matrix vs c(matrix, array) space is the right scope
    >>>> for this work in terms of fiddling with inheritance.
    >>> 
    >>> [.................]
    >>> 
    >>> 
    >>>>> Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
    >>>> 
    >>>> good point, and that's why my usage of  inherits(.,.) was not
    >>>> quite to the point.  [OTOH, it was to the point, as indeed from
    >>>> the ?class / ?inherits docu, S3 method dispatch and inherits
    >>>> must be consistent ]
    >>>> 
    >>>>> which would break -- unless we change class(x) to return the whole
    >>>> set of inherited classes, which I sense that we'd rather not do....
    >>> 
    >>> [................]
    >>> 
    >>>> Note again that both "matrix" and "array" are special [see ?class] as
    >>>> being of  __implicit class__  and I am considering that this
    >>>> implicit class behavior for these two should be slightly
    >>>> changed ....
    >>>> 
    >>>> And indeed I think you are right on spot and this would mean
    >>>> that indeed the implicit class
    >>>> "matrix" should rather become c("matrix", "array").
    >>> 
    >>> I've made up my mind (and not been contradicted by my fellow R
    >>> corers) to try go there for  R 4.0.0   next April.
    >>> 
    >>> I've found the few places in base R that needed a change (to
    >>> pass 'make check-all' in the R sources) and found that indeed a
    >>> overzealous check in 'Matrix' needed also a change (a place
    >>> where the checking code assume  class(<matrix>) |--> "matrix" ).
    >>> 
    >>> There are certainly many more package (codes and checks) that
    >>> need adaption .. i.e., should be changed rather *before* the
    >>> above change is activated in R-devel (and then will affect all CRAN
    >>> and Bioconductor checks.)
    >>> 
    >>> To this end, I've published an  'R Blog' yesterday,
    >>> 
    >>> http://bit.ly/R_blog_class_think_2x
    >>> 
    >>> which translates to
    >>> 
    >>> https://developer.r-project.org/Blog/public/2019/11/09/when-you-think-class.-think-again/index.html
    >>> 
    >>> notably mentioning why using  class(x) == "...."  (or '!=')  or
    >>> switch(class(.) ...)  is quite unsafe and hence bad and you
    >>> should very often not replace  class(x)  by  class(x)[1]  but
    >>> really use the "only truly correct" ;-)
    >>> 
    >>> inherits(x,  "...")
    >>> or
    >>> is(x,  "....")   # if you're advanced/brave enough (:-) to
    >>> # use formal classes (S4)
    >> 
    >> Thanks for the helpful blog post Martin. Is the following
    >> 
    >> ?test_class?  %in% class(some_object)
    >> 
    >> which I think in your symbols would be
    >> 
    >> ??? %in% class(x)
    >> 
    >> safe as far as you see it? By safe, I mean equivalent to your suggestion of inherits(x, ???) .

    > Those aren't equivalent if S4 gets involved.  You can see it if you run 
    > this code:

    > example("new") # Creates an object named t2 of class "trackcurve"
    >                # that contains "track"

    > inherits(t2, "track")  # TRUE
    > "track" %in% class(t2) # FALSE

    > I can't think of any examples not involving S4.

    > Duncan Murdoch

Thank you, Duncan.
That's definitely a strong reason for inherits(), because often
in such code, you don't know in advance what objects will be
passed to your function.


On Twitter, others have asked "the same",  arguing that 

	"<someclass>"  %in%  class(.)

> uses usual syntax, and thus looks less intimidating than
> inherit() and less cryptic than is()

I think you should all use -- and *teach* --
inherits(.) more often, and it would no longer be intimidating.

Also, for the speed fetishists:  inherits() will typically be 
slightly (but significantly) faster than  ` %in% class(.) `

Martin


From hp@ge@ @end|ng |rom |redhutch@org  Tue Nov 12 07:05:22 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Tue, 12 Nov 2019 06:05:22 +0000
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <24009.11387.450978.455955@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
 <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
 <24009.11387.450978.455955@stat.math.ethz.ch>
Message-ID: <bddab8a8-9430-f050-3f51-985b60cd4df1@fredhutch.org>



On 11/11/19 01:40, Martin Maechler wrote:
>>>>>> Duncan Murdoch
>>>>>>      on Sun, 10 Nov 2019 11:48:26 -0500 writes:
> 
>      > On 10/11/2019 9:17 a.m., Bryan Hanson wrote:
>      >>
>      >>
>      >>> On Nov 10, 2019, at 3:36 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>      >>>
>      >>>>>>>> Gabriel Becker
>      >>>>>>>> on Sat, 2 Nov 2019 12:37:08 -0700 writes:
>      >>>
>      >>>> I agree that we can be careful and narrow and still see a
>      >>>> nice improvement in behavior. While Herve's point is valid
>      >>>> and I understand his frustration, I think staying within
>      >>>> the matrix vs c(matrix, array) space is the right scope
>      >>>> for this work in terms of fiddling with inheritance.
>      >>>
>      >>> [.................]
>      >>>
>      >>>
>      >>>>> Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
>      >>>>
>      >>>> good point, and that's why my usage of  inherits(.,.) was not
>      >>>> quite to the point.  [OTOH, it was to the point, as indeed from
>      >>>> the ?class / ?inherits docu, S3 method dispatch and inherits
>      >>>> must be consistent ]
>      >>>>
>      >>>>> which would break -- unless we change class(x) to return the whole
>      >>>> set of inherited classes, which I sense that we'd rather not do....
>      >>>
>      >>> [................]
>      >>>
>      >>>> Note again that both "matrix" and "array" are special [see ?class] as
>      >>>> being of  __implicit class__  and I am considering that this
>      >>>> implicit class behavior for these two should be slightly
>      >>>> changed ....
>      >>>>
>      >>>> And indeed I think you are right on spot and this would mean
>      >>>> that indeed the implicit class
>      >>>> "matrix" should rather become c("matrix", "array").
>      >>>
>      >>> I've made up my mind (and not been contradicted by my fellow R
>      >>> corers) to try go there for  R 4.0.0   next April.
>      >>>
>      >>> I've found the few places in base R that needed a change (to
>      >>> pass 'make check-all' in the R sources) and found that indeed a
>      >>> overzealous check in 'Matrix' needed also a change (a place
>      >>> where the checking code assume  class(<matrix>) |--> "matrix" ).
>      >>>
>      >>> There are certainly many more package (codes and checks) that
>      >>> need adaption .. i.e., should be changed rather *before* the
>      >>> above change is activated in R-devel (and then will affect all CRAN
>      >>> and Bioconductor checks.)
>      >>>
>      >>> To this end, I've published an  'R Blog' yesterday,
>      >>>
>      >>> https://urldefense.proofpoint.com/v2/url?u=http-3A__bit.ly_R-5Fblog-5Fclass-5Fthink-5F2x&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Haem9CPNVAwtpdrnFb50tn-RoEohzBVpzJRgkjRFqBg&s=TFCIJjbe482LLMV-P2B9vTc5G8nIcW0Ekx25qhuzCOg&e=
>      >>>
>      >>> which translates to
>      >>>
>      >>> https://urldefense.proofpoint.com/v2/url?u=https-3A__developer.r-2Dproject.org_Blog_public_2019_11_09_when-2Dyou-2Dthink-2Dclass.-2Dthink-2Dagain_index.html&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Haem9CPNVAwtpdrnFb50tn-RoEohzBVpzJRgkjRFqBg&s=kbZV1cxdT0uFW2gX8iCQmV-SANS8xCp678it1okCRqs&e=
>      >>>
>      >>> notably mentioning why using  class(x) == "...."  (or '!=')  or
>      >>> switch(class(.) ...)  is quite unsafe and hence bad and you
>      >>> should very often not replace  class(x)  by  class(x)[1]  but
>      >>> really use the "only truly correct" ;-)
>      >>>
>      >>> inherits(x,  "...")
>      >>> or
>      >>> is(x,  "....")   # if you're advanced/brave enough (:-) to
>      >>> # use formal classes (S4)
>      >>
>      >> Thanks for the helpful blog post Martin. Is the following
>      >>
>      >> ?test_class?  %in% class(some_object)
>      >>
>      >> which I think in your symbols would be
>      >>
>      >> ??? %in% class(x)
>      >>
>      >> safe as far as you see it? By safe, I mean equivalent to your suggestion of inherits(x, ???) .
> 
>      > Those aren't equivalent if S4 gets involved.  You can see it if you run
>      > this code:
> 
>      > example("new") # Creates an object named t2 of class "trackcurve"
>      >                # that contains "track"
> 
>      > inherits(t2, "track")  # TRUE
>      > "track" %in% class(t2) # FALSE
> 
>      > I can't think of any examples not involving S4.
> 
>      > Duncan Murdoch
> 
> Thank you, Duncan.
> That's definitely a strong reason for inherits(), because often
> in such code, you don't know in advance what objects will be
> passed to your function.
> 
> 
> On Twitter, others have asked "the same",  arguing that
> 
> 	"<someclass>"  %in%  class(.)
> 
>> uses usual syntax, and thus looks less intimidating than
>> inherit() and less cryptic than is()

%-/  (<- ASCII version of the rolling eyes emoji)

<ranting mode>

The most cryptic of the 3 forms being by far:

    "<someclass>" %in% class(x)

You need to be able to read thru this to understand that the intend is 
to find out whether 'x' belongs to class "<someclass>" or to one of its 
subclasses. What could be more natural and readable than using 
inherits(x, "<someclass>") for that? What's unusual or intimidating 
about its syntax?

OK I could see that maybe some people would like to be able to use a 
binary operator instead of a function call for this (a la instanceof in 
Java):

   `%inherits%` <- inherits

   library(data.table)

   x <- data.table()
   x %inherits% "data.frame"
   [1] TRUE

which would be a reasonable request (looks cute).

But trying to make the case for "<someclass>" %in% class(x) on 
Twitter??!  %-/

</ranting mode>

H.


> 
> I think you should all use -- and *teach* --
> inherits(.) more often, and it would no longer be intimidating.
> 
> Also, for the speed fetishists:  inherits() will typically be
> slightly (but significantly) faster than  ` %in% class(.) `
> 
> Martin
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Haem9CPNVAwtpdrnFb50tn-RoEohzBVpzJRgkjRFqBg&s=leJubS1ZTBLker3GGD9hOhoXb4NCoydeg_wIUDg8cHs&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From @purd|e@@ @end|ng |rom gm@||@com  Tue Nov 12 21:21:46 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 13 Nov 2019 09:21:46 +1300
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <bddab8a8-9430-f050-3f51-985b60cd4df1@fredhutch.org>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
 <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
 <24009.11387.450978.455955@stat.math.ethz.ch>
 <bddab8a8-9430-f050-3f51-985b60cd4df1@fredhutch.org>
Message-ID: <CAB8pepyyh6LoyBVbaNOjMG4diweBeg8qgpZS-egWMegRRC4uAQ@mail.gmail.com>

<polite mode>

>    x %inherits% "data.frame"

IMHO, I think that user-defined binary operators are being over-used
within the R community.

I don't think that they're "cute" or stylish.
I think their use should be limited to cases, where they significantly
increase the readability of the code.

However, readability, is a (partly) subjective topic...

</pilote mode>


From hp@ge@ @end|ng |rom |redhutch@org  Tue Nov 12 22:18:35 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Tue, 12 Nov 2019 21:18:35 +0000
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <CAB8pepyyh6LoyBVbaNOjMG4diweBeg8qgpZS-egWMegRRC4uAQ@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
 <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
 <24009.11387.450978.455955@stat.math.ethz.ch>
 <bddab8a8-9430-f050-3f51-985b60cd4df1@fredhutch.org>
 <CAB8pepyyh6LoyBVbaNOjMG4diweBeg8qgpZS-egWMegRRC4uAQ@mail.gmail.com>
Message-ID: <907c27ec-4438-2d5c-ce6d-30dd7468e2ec@fredhutch.org>

On 11/12/19 12:21, Abby Spurdle wrote:
> <polite mode>
> 
>>     x %inherits% "data.frame"
> 
> IMHO, I think that user-defined binary operators are being over-used
> within the R community.
> 
> I don't think that they're "cute" or stylish.
> I think their use should be limited to cases, where they significantly
> increase the readability of the code.
> 
> However, readability, is a (partly) subjective topic...
> 
> </pilote mode>
> 

You can have your own rant about "user-defined binary operators being 
over-used within the R community" without suggesting that my rant was 
rude. I don't think it was and, in any case, I was not going after a 
individual in particular. Contrary to popular belief and to what I tell 
my daughter, rolling your eyes in public is not rude at all and is 
actually a lot of fun. You should try it ;-)


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From wdun|@p @end|ng |rom t|bco@com  Tue Nov 12 23:01:43 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Tue, 12 Nov 2019 14:01:43 -0800
Subject: [Rd] calls with comment attribute
Message-ID: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>

In general R doesn't print the "comment" attribute of an object
   > structure(1:3, comment=c("a comment", "another comment"))
   [1] 1 2 3
but if the object is a call it prints it in an unusual format
   > structure(quote(func(arg)), comment=c("a comment", "another comment"))
   a comment
   another comment
   func(arg)

What is the rationale for the special treatment of calls?

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Tue Nov 12 23:03:31 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 13 Nov 2019 11:03:31 +1300
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <907c27ec-4438-2d5c-ce6d-30dd7468e2ec@fredhutch.org>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
 <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
 <24009.11387.450978.455955@stat.math.ethz.ch>
 <bddab8a8-9430-f050-3f51-985b60cd4df1@fredhutch.org>
 <CAB8pepyyh6LoyBVbaNOjMG4diweBeg8qgpZS-egWMegRRC4uAQ@mail.gmail.com>
 <907c27ec-4438-2d5c-ce6d-30dd7468e2ec@fredhutch.org>
Message-ID: <CAB8pepwYgXf2uaS0UzAiPbrgo+WstaCcJU5jDW1tqRpmyioSLg@mail.gmail.com>

> You can have your own rant about "user-defined binary operators being
> over-used within the R community" without suggesting that my rant was
> rude.

I wasn't suggesting that you were rude.
I was questioning a trend.


From g@bembecker @end|ng |rom gm@||@com  Tue Nov 12 23:10:34 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 12 Nov 2019 14:10:34 -0800
Subject: [Rd] calls with comment attribute
In-Reply-To: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
References: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
Message-ID: <CAD4oTHFSyiuLgvECrvEtBe8h0zQ7m+zzGy5RbLHSx3=wNRmk6g@mail.gmail.com>

Bill,

Without being involved in that code at all, it seems that this could be
used to (re)create commented source code from R objects. That format seems
to correspond directly to a call in a .R file with two comments above it. A
bit weird there's no comment character there but I guess thats expected to
be in the values of the comment attribute?

Anyway, just a guess.

Best,
~G

On Tue, Nov 12, 2019 at 2:02 PM William Dunlap via R-devel <
r-devel at r-project.org> wrote:

> In general R doesn't print the "comment" attribute of an object
>    > structure(1:3, comment=c("a comment", "another comment"))
>    [1] 1 2 3
> but if the object is a call it prints it in an unusual format
>    > structure(quote(func(arg)), comment=c("a comment", "another comment"))
>    a comment
>    another comment
>    func(arg)
>
> What is the rationale for the special treatment of calls?
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Nov 13 01:16:55 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 12 Nov 2019 19:16:55 -0500
Subject: [Rd] calls with comment attribute
In-Reply-To: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
References: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
Message-ID: <5bd1a88a-646b-33b3-7107-ca8ee0b3ab90@gmail.com>

On 12/11/2019 5:01 p.m., William Dunlap via R-devel wrote:
> In general R doesn't print the "comment" attribute of an object
>     > structure(1:3, comment=c("a comment", "another comment"))
>     [1] 1 2 3
> but if the object is a call it prints it in an unusual format
>     > structure(quote(func(arg)), comment=c("a comment", "another comment"))
>     a comment
>     another comment
>     func(arg)
> 
> What is the rationale for the special treatment of calls?

It was there in revision 2 of src/main/deparse.c in 1997.  (For those 
unfamiliar with R history:  the current revision of R is 77405.  That 
particular file has been revised 248 times since rev 2.)

I suspect either nobody has noticed it before, or nobody had the nerve 
to touch it.

Duncan Murdoch


From wdun|@p @end|ng |rom t|bco@com  Wed Nov 13 04:15:11 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Tue, 12 Nov 2019 19:15:11 -0800
Subject: [Rd] calls with comment attribute
In-Reply-To: <5bd1a88a-646b-33b3-7107-ca8ee0b3ab90@gmail.com>
References: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
 <5bd1a88a-646b-33b3-7107-ca8ee0b3ab90@gmail.com>
Message-ID: <CAF8bMcYg+BsPn8z_H-EqBHOAWV7vOjMf_VPPs1tG5W6ZqTsz_g@mail.gmail.com>

I suspect that the parser used it to store comments, including the initial
"#", before R started using the srcref attribute.  (S also stored comments
in the parse tree.)

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Tue, Nov 12, 2019 at 4:16 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 12/11/2019 5:01 p.m., William Dunlap via R-devel wrote:
> > In general R doesn't print the "comment" attribute of an object
> >     > structure(1:3, comment=c("a comment", "another comment"))
> >     [1] 1 2 3
> > but if the object is a call it prints it in an unusual format
> >     > structure(quote(func(arg)), comment=c("a comment", "another
> comment"))
> >     a comment
> >     another comment
> >     func(arg)
> >
> > What is the rationale for the special treatment of calls?
>
> It was there in revision 2 of src/main/deparse.c in 1997.  (For those
> unfamiliar with R history:  the current revision of R is 77405.  That
> particular file has been revised 248 times since rev 2.)
>
> I suspect either nobody has noticed it before, or nobody had the nerve
> to touch it.
>
> Duncan Murdoch
>

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Wed Nov 13 11:24:56 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 13 Nov 2019 11:24:56 +0100
Subject: [Rd] calls with comment attribute
In-Reply-To: <CAF8bMcYg+BsPn8z_H-EqBHOAWV7vOjMf_VPPs1tG5W6ZqTsz_g@mail.gmail.com>
References: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
 <5bd1a88a-646b-33b3-7107-ca8ee0b3ab90@gmail.com>
 <CAF8bMcYg+BsPn8z_H-EqBHOAWV7vOjMf_VPPs1tG5W6ZqTsz_g@mail.gmail.com>
Message-ID: <17D6C7B7-6CA8-4186-AC53-83DBEC7B50BA@gmail.com>

I think this is spot on. I remember all sorts of silliness when deparsing expressions while trying to retain comments - comments moving from beginning to end of loops or vice versa, that sort of thing. It was pretty much impossible to stick comments into the parse tree and have them come back out in a sensible position. After the keep.source changes, we didn't use comment() attributes anymore but print/deparse still acts on them. A peek at gram.y from an early R version should reveal the mechanism used then.

GB: presumably the comment character was considered part of the comment and stored with it, which is why it isn't added for printing.

-pd

> On 13 Nov 2019, at 04:15 , William Dunlap via R-devel <r-devel at r-project.org> wrote:
> 
> I suspect that the parser used it to store comments, including the initial
> "#", before R started using the srcref attribute.  (S also stored comments
> in the parse tree.)
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 
> On Tue, Nov 12, 2019 at 4:16 PM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> 
>> On 12/11/2019 5:01 p.m., William Dunlap via R-devel wrote:
>>> In general R doesn't print the "comment" attribute of an object
>>>> structure(1:3, comment=c("a comment", "another comment"))
>>>    [1] 1 2 3
>>> but if the object is a call it prints it in an unusual format
>>>> structure(quote(func(arg)), comment=c("a comment", "another
>> comment"))
>>>    a comment
>>>    another comment
>>>    func(arg)
>>> 
>>> What is the rationale for the special treatment of calls?
>> 
>> It was there in revision 2 of src/main/deparse.c in 1997.  (For those
>> unfamiliar with R history:  the current revision of R is 77405.  That
>> particular file has been revised 248 times since rev 2.)
>> 
>> I suspect either nobody has noticed it before, or nobody had the nerve
>> to touch it.
>> 
>> Duncan Murdoch
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ezztucker @end|ng |rom gm@||@com  Mon Nov 11 22:47:41 2019
From: ezztucker @end|ng |rom gm@||@com (Ezra Tucker)
Date: Mon, 11 Nov 2019 21:47:41 +0000
Subject: [Rd] Troubles using numeric in s4 class union
Message-ID: <CAP0QTepYgET5x+5aAZGwXKCZ+fs8bhHH5aswL1s3oebv6feU9A@mail.gmail.com>

Hi all,

I came across an issue in using the Matrix package which made it that I
could only subset Matrices using the numeric class, but could not using
integers. Steps to reproduce the problem:

library(Matrix)

# this class has *nothing* to do with Matrix
setClass("MyClass",
    representation(myvalue = "numeric"),
    prototype(myvalue = NA_real_))
# this class also has nothing to do with Matrix
setClassUnion("NumOrMyClass", c("numeric", "MyClass"))

# this is to demonstrate creating and subsetting a specific Matrix
m <- new("dgCMatrix", i = c(2L, 0L, 1L, 2L, 0L, 1L), p = c(0L, 1L, 2L, 4L,
4L, 6L),
    Dim = c(3L, 5L), Dimnames = list(NULL, NULL), x = c(2, 1, 2, 1, 2, 1),
factors = list())
# this next line fails:
m[1:2, 1:2]

The last line fails consistently with R 3.6.1 and Matrix 1.2-17 on a
variety of operating systems and computers (tested with ubuntu 19.10 &
windows 10). I'll note at this point that without the class union I defined
above, the rest of the code works perfectly fine.

There are 2 workarounds I've come up with. Firstly, one could change the
last line to
m[as.numeric(1:2), as.numeric(1:2)]
or as.numeric(seq()) or c(1, 2), etc.

The other workaround is to change setClassUnion("NumOrMyClass",
c("numeric", "MyClass")) to setClassUnion("NumOrMyClass", c("numeric",
"double", "integer", "MyClass")), which I believe should be the recommended
workaround here.

The underlying issue, though, is that I would not have expected *anything*
that I write to get in the way of Matrix; in fact, the classes that I
defined have nothing to do with Matrix at all. So, I have some fears that
this might be a bigger problem, possibly either in Methods or in Base.

1. Can others confirm that this is in fact an issue as I believe it to be?
2. If it is a legitimate issue, have others seen it manifested working with
other packages that are not Matrix? In this case, I believe that the class
union I defied is somehow interfering with the "index" class union in
Matrix, R/AllClass.R, line 809
3. Why should the class union I defined interfere with the inner workings
of a separate package?
4. Is this a bug in Base or Methods?

Thank you for your time!

Sincerely,
Ezra

	[[alternative HTML version deleted]]


From pd@me@ @end|ng |rom cb@@dk  Wed Nov 13 13:08:25 2019
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Wed, 13 Nov 2019 12:08:25 +0000
Subject: [Rd] R 3.6.2 scheduled for December 12
Message-ID: <8FF6B0D5-7342-4F5C-8B82-E0E884AF6F7F@cbs.dk>

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Wed Nov 13 16:55:53 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Wed, 13 Nov 2019 15:55:53 +0000
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <CAB8pepwYgXf2uaS0UzAiPbrgo+WstaCcJU5jDW1tqRpmyioSLg@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <4059B295-CA2B-408E-9CC8-B0CEA680867C@depauw.edu>
 <86fd2f38-8bd5-d7ea-10c7-edf4eb750720@gmail.com>
 <24009.11387.450978.455955@stat.math.ethz.ch>
 <bddab8a8-9430-f050-3f51-985b60cd4df1@fredhutch.org>
 <CAB8pepyyh6LoyBVbaNOjMG4diweBeg8qgpZS-egWMegRRC4uAQ@mail.gmail.com>
 <907c27ec-4438-2d5c-ce6d-30dd7468e2ec@fredhutch.org>
 <CAB8pepwYgXf2uaS0UzAiPbrgo+WstaCcJU5jDW1tqRpmyioSLg@mail.gmail.com>
Message-ID: <863240f1-df54-d7ad-25be-2e5cafa1a73c@fredhutch.org>

On 11/12/19 14:03, Abby Spurdle wrote:
>> You can have your own rant about "user-defined binary operators being
>> over-used within the R community" without suggesting that my rant was
>> rude.
> 
> I wasn't suggesting that you were rude.
> I was questioning a trend.

ok, well, I must ave misinterpreted the <polite> </polite> markup you've 
put around your rant then...

Have a nice day,
H.

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From h@w|ckh@m @end|ng |rom gm@||@com  Thu Nov 14 14:47:27 2019
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Thu, 14 Nov 2019 07:47:27 -0600
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <24007.52264.596794.767557@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
Message-ID: <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>

On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Gabriel Becker
> >>>>>     on Sat, 2 Nov 2019 12:37:08 -0700 writes:
>
>     > I agree that we can be careful and narrow and still see a
>     > nice improvement in behavior. While Herve's point is valid
>     > and I understand his frustration, I think staying within
>     > the matrix vs c(matrix, array) space is the right scope
>     > for this work in terms of fiddling with inheritance.
>
>  [.................]
>
>
> > > Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
> >
> > good point, and that's why my usage of  inherits(.,.) was not
> > quite to the point.  [OTOH, it was to the point, as indeed from
> >       the ?class / ?inherits docu, S3 method dispatch and inherits
> >       must be consistent ]
> >
> >     > which would break -- unless we change class(x) to return the whole
> > set of inherited classes, which I sense that we'd rather not do....
>
>   [................]
>
> > Note again that both "matrix" and "array" are special [see ?class] as
> > being of  __implicit class__  and I am considering that this
> > implicit class behavior for these two should be slightly
> > changed ....
> >
> > And indeed I think you are right on spot and this would mean
> > that indeed the implicit class
> > "matrix" should rather become c("matrix", "array").
>
> I've made up my mind (and not been contradicted by my fellow R
> corers) to try go there for  R 4.0.0   next April.

I can't seem to find the previous thread, so would you mind being a
bit more explicit here? Do you mean adding "array" to the implicit
class? Or adding it to the explicit class? Or adding it to inherits?
i.e. which of the following results are you proposing to change?

is_array <- function(x) UseMethod("is_array")
is_array.array <- function(x) TRUE
is_array.default <- function(x) FALSE

x <- matrix()
is_array(x)
#> [1] FALSE
x <- matrix()
inherits(x, "array")
#> [1] FALSE
class(x)
#> [1] "matrix"

It would be nice to make sure this is consistent with the behaviour of
integers, which have an implicit parent class of numeric:

is_numeric <- function(x) UseMethod("is_numeric")
is_numeric.numeric <- function(x) TRUE
is_numeric.default <- function(x) FALSE

x <- 1L
is_numeric(x)
#> [1] TRUE
inherits(x, "numeric")
#> [1] FALSE
class(x)
#> [1] "integer"

Hadley

-- 
http://hadley.nz


From hp@ge@ @end|ng |rom |redhutch@org  Thu Nov 14 20:13:47 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 14 Nov 2019 19:13:47 +0000
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
Message-ID: <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>



On 11/14/19 05:47, Hadley Wickham wrote:
> On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> Gabriel Becker
>>>>>>>      on Sat, 2 Nov 2019 12:37:08 -0700 writes:
>>
>>      > I agree that we can be careful and narrow and still see a
>>      > nice improvement in behavior. While Herve's point is valid
>>      > and I understand his frustration, I think staying within
>>      > the matrix vs c(matrix, array) space is the right scope
>>      > for this work in terms of fiddling with inheritance.
>>
>>   [.................]
>>
>>
>>>> Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
>>>
>>> good point, and that's why my usage of  inherits(.,.) was not
>>> quite to the point.  [OTOH, it was to the point, as indeed from
>>>        the ?class / ?inherits docu, S3 method dispatch and inherits
>>>        must be consistent ]
>>>
>>>      > which would break -- unless we change class(x) to return the whole
>>> set of inherited classes, which I sense that we'd rather not do....
>>
>>    [................]
>>
>>> Note again that both "matrix" and "array" are special [see ?class] as
>>> being of  __implicit class__  and I am considering that this
>>> implicit class behavior for these two should be slightly
>>> changed ....
>>>
>>> And indeed I think you are right on spot and this would mean
>>> that indeed the implicit class
>>> "matrix" should rather become c("matrix", "array").
>>
>> I've made up my mind (and not been contradicted by my fellow R
>> corers) to try go there for  R 4.0.0   next April.
> 
> I can't seem to find the previous thread, so would you mind being a
> bit more explicit here? Do you mean adding "array" to the implicit
> class?

It's late in Europe ;-)

That's my understanding. I think the plan is to have class(matrix()) 
return c("matrix", "array"). No class attributes added to matrix or 
array objects.

It's all what is needed to have inherits(matrix(), "array") return TRUE 
(instead of FALSE at the moment) and S3 dispatch pick up the foo.array 
method when foo(matrix()) is called and there is no foo.matrix method.

> Or adding it to the explicit class? Or adding it to inherits?
> i.e. which of the following results are you proposing to change?
> 
> is_array <- function(x) UseMethod("is_array")
> is_array.array <- function(x) TRUE
> is_array.default <- function(x) FALSE
> 
> x <- matrix()
> is_array(x)
> #> [1] FALSE
> x <- matrix()
> inherits(x, "array")
> #> [1] FALSE
> class(x)
> #> [1] "matrix"
> 
> It would be nice to make sure this is consistent with the behaviour of
> integers, which have an implicit parent class of numeric:

I agree but I don't know if Martin wants to go that far for R 4.0. 
Hopefully that's the longer term plan though (maybe for R 4.1?).
Note that there are other situations that could follow e.g. 
data.frame/list and probably more...

H.


> 
> is_numeric <- function(x) UseMethod("is_numeric")
> is_numeric.numeric <- function(x) TRUE
> is_numeric.default <- function(x) FALSE
> 
> x <- 1L
> is_numeric(x)
> #> [1] TRUE
> inherits(x, "numeric")
> #> [1] FALSE
> class(x)
> #> [1] "integer"
> 
> Hadley
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Nov 15 17:31:15 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 Nov 2019 17:31:15 +0100
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
Message-ID: <24014.53971.84201.964445@stat.math.ethz.ch>

>>>>> Pages, Herve 
>>>>>     on Thu, 14 Nov 2019 19:13:47 +0000 writes:

    > On 11/14/19 05:47, Hadley Wickham wrote:
    >> On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler
    >> <maechler at stat.math.ethz.ch> wrote:
    >>> 
    >>>>>>>> Gabriel Becker
    >>>>>>>> on Sat, 2 Nov 2019 12:37:08 -0700 writes:
    >>> 
    >>> > I agree that we can be careful and narrow and still see a
    >>> > nice improvement in behavior. While Herve's point is valid
    >>> > and I understand his frustration, I think staying within
    >>> > the matrix vs c(matrix, array) space is the right scope
    >>> > for this work in terms of fiddling with inheritance.
    >>> 
    >>> [.................]
    >>> 
    >>> 
    >>>>> Also, we seem to have a rule that inherits(x, c)  iff  c %in% class(x),
    >>>> 
    >>>> good point, and that's why my usage of  inherits(.,.) was not
    >>>> quite to the point.  [OTOH, it was to the point, as indeed from
    >>>> the ?class / ?inherits docu, S3 method dispatch and inherits
    >>>> must be consistent ]
    >>>> 
    >>>> > which would break -- unless we change class(x) to return the whole
    >>>> set of inherited classes, which I sense that we'd rather not do....
    >>> 
    >>> [................]
    >>> 
    >>>> Note again that both "matrix" and "array" are special [see ?class] as
    >>>> being of  __implicit class__  and I am considering that this
    >>>> implicit class behavior for these two should be slightly
    >>>> changed ....
    >>>> 
    >>>> And indeed I think you are right on spot and this would mean
    >>>> that indeed the implicit class
    >>>> "matrix" should rather become c("matrix", "array").
    >>> 
    >>> I've made up my mind (and not been contradicted by my fellow R
    >>> corers) to try go there for  R 4.0.0   next April.
    >> 
    >> I can't seem to find the previous thread, so would you mind being a
    >> bit more explicit here? Do you mean adding "array" to the implicit
    >> class?

    > It's late in Europe ;-)

    > That's my understanding. I think the plan is to have class(matrix()) 
    > return c("matrix", "array"). No class attributes added to matrix or 
    > array objects.


    > It's all what is needed to have inherits(matrix(), "array") return TRUE 
    > (instead of FALSE at the moment) and S3 dispatch pick up the foo.array 
    > method when foo(matrix()) is called and there is no foo.matrix method.

Thank you, Herv?!  That's exactly the plan.

    >> Or adding it to the explicit class? Or adding it to inherits?
    >> i.e. which of the following results are you proposing to change?
    >> 
    >> is_array <- function(x) UseMethod("is_array")
    >> is_array.array <- function(x) TRUE
    >> is_array.default <- function(x) FALSE
    >> 
    >> x <- matrix()
    >> is_array(x)
    >> #> [1] FALSE
    >> x <- matrix()
    >> inherits(x, "array")
    >> #> [1] FALSE
    >> class(x)
    >> #> [1] "matrix"
    >> 
    >> It would be nice to make sure this is consistent with the behaviour of
    >> integers, which have an implicit parent class of numeric:

    > I agree but I don't know if Martin wants to go that far for R 4.0. 

again, correct.
In the mean time, thanks to Tomas Kalibera,  my small change has
been tested on all of CRAN and Bioc (Software) packages

  R CMD check <pkg>

but no '--as-cran' nor any  environment variable settings such
as ((strongly recommended by me for package developers !))

      _R_CHECK_LENGTH_1_CONDITION_=true
      _R_CHECK_LENGTH_1_LOGIC2_=verbose

>From the package checks, and my own checks I've started noticing
only today, that indeed, the   _R_CHECK_LENGTH_1_CONDITION_=true
environment variable setting
--- stemming more or less directly from an R-devel (mailing list)
    proposal by  Henrik Bengtsson --
and documented in  help("if")  since R 3.5.0,

*together* with the proposal  of

  class(<matrix>)  |--> c("matrix", "array")

is triggering many new ERRORs because the bad use of    class(.) == "..."
which I've blogged about is very often inside if(), i.e.,

      if (class(object) == "foobar")  # or  ` != ` or 

Now in "new R-devel", and when object is a matrix, 

      if (  class(object)     == "foobar")
<===>
      if (c("matrix","array") == "foobar") 
<===>
      if (c(FALSE, FALSE))

which is "fine" (i.e, just giving the infamous warning.. which
      	 	 is often surpressed by testthat or similar wrappers)
unless you set the env.var .. as I think you R-devel readers all
should do :

    > Sys.unsetenv("_R_CHECK_LENGTH_1_CONDITION_")
    > if(c(FALSE,FALSE)) 1 else 2
    [1] 2
    Warning message:
    In if (c(FALSE, FALSE)) 1 else 2 :
      the condition has length > 1 and only the first element will be used

    > Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = TRUE)
    > if(c(FALSE,FALSE)) 1 else 2
    Error in if (c(FALSE, FALSE)) 1 else 2 : the condition has length > 1
    > 

    > Hopefully that's the longer term plan though (maybe for R 4.1?).

I'm not making promises here.
Maybe if we could agree to make the equivalent of
      _R_CHECK_LENGTH_1_CONDITION_=true
R 4.0.0's (unconditional?) default behavior,
then at least the introduction of 

   class(1L)  |--> c("integer", "numeric")

would be less problematic because most of the wrong uses of
if(class(..) == "integer")  would already have been eliminated ...

Martin


    > Note that there are other situations that could follow e.g. 
    > data.frame/list and probably more...

    > H.


    >> is_numeric <- function(x) UseMethod("is_numeric")
    >> is_numeric.numeric <- function(x) TRUE
    >> is_numeric.default <- function(x) FALSE
    >> 
    >> x <- 1L
    >> is_numeric(x)
    >> #> [1] TRUE
    >> inherits(x, "numeric")
    >> #> [1] FALSE
    >> class(x)
    >> #> [1] "integer"
    >> 
    >> Hadley
    >> 

    > -- 
    > Herv? Pag?s

    > Program in Computational Biology
    > Division of Public Health Sciences
    > Fred Hutchinson Cancer Research Center
    > 1100 Fairview Ave. N, M1-B514
    > P.O. Box 19024
    > Seattle, WA 98109-1024

    > E-mail: hpages at fredhutch.org
    > Phone:  (206) 667-5791
    > Fax:    (206) 667-1319


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Nov 15 17:59:33 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 Nov 2019 17:59:33 +0100
Subject: [Rd] _R_CHECK_LENGTH_1_LOGIC2_ setting  and Rstudio ..
In-Reply-To: <24014.53971.84201.964445@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
Message-ID: <24014.55669.55430.383436@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 15 Nov 2019 17:31:15 +0100 writes:

    > as ((strongly recommended by me for package developers !))

    > _R_CHECK_LENGTH_1_CONDITION_=true
    > _R_CHECK_LENGTH_1_LOGIC2_=verbose

Apropos, for many months now, when very occasionally using
Rstudio (notably for teaching to beginners),
I've needed to use a wrapper shell script *unsetting* these,
because otherwise I've got "a bomb" from trying to run Rstudio,
as it internally uses code that fails when
 _R_CHECK_LENGTH_1_LOGIC2_
is activated, see the screen shot (from the very latest
Rstudio 1.2.5019), 
at least in my case where I use a non-trival  'options(repos = ..)'
in my startup.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: rstudio_killed_by_R_CHECK_screenshot.png
Type: image/png
Size: 63993 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20191115/5caac0da/attachment.png>

From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Nov 15 18:54:46 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 15 Nov 2019 09:54:46 -0800
Subject: [Rd] _R_CHECK_LENGTH_1_LOGIC2_ setting and Rstudio ..
In-Reply-To: <24014.55669.55430.383436@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
 <24014.55669.55430.383436@stat.math.ethz.ch>
Message-ID: <CAFDcVCRMT7qAXqEUXuZc820=1ns=_nRvZ7A06AJxyo-NByqrkQ@mail.gmail.com>

Yes, I ran into this too. I think they fixed it for RStudio 1.3
(https://github.com/rstudio/rstudio/pull/5457/files).  My workaround
is to enable these checks conditionally on not running R in the
RStudio Console (it works in the RStudio Terminal).  To test for the
RStudio Console, you need to turn to .Rprofile rather than .Renviron,
e.g.

## Strict run-time checks, unless in the RStudio Console
if (Sys.getenv("RSTUDIO") != "1" || nzchar(Sys.getenv("RSTUDIO_TERM")) {
  Sys.setenv(
    "_R_CHECK_LENGTH_1_CONDITION_" = "true",
    "_R_CHECK_LENGTH_1_LOGIC2_" = "verbose"
  )
}

FWIW, for those who use 'startup::startup()` in ~/.Rprofile, the above
can also be done by having a file named (exactly)
'.Renviron.d/strict,rstudio=FALSE' containing:

_R_CHECK_LENGTH_1_CONDITION_=true
_R_CHECK_LENGTH_1_LOGIC2_=verbose

startup() will only process this file when R is *not* running in the
RStudio Console (`rstudio=FALSE`).

/Henrik

On Fri, Nov 15, 2019 at 9:00 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Martin Maechler
> >>>>>     on Fri, 15 Nov 2019 17:31:15 +0100 writes:
>
>     > as ((strongly recommended by me for package developers !))
>
>     > _R_CHECK_LENGTH_1_CONDITION_=true
>     > _R_CHECK_LENGTH_1_LOGIC2_=verbose
>
> Apropos, for many months now, when very occasionally using
> Rstudio (notably for teaching to beginners),
> I've needed to use a wrapper shell script *unsetting* these,
> because otherwise I've got "a bomb" from trying to run Rstudio,
> as it internally uses code that fails when
>  _R_CHECK_LENGTH_1_LOGIC2_
> is activated, see the screen shot (from the very latest
> Rstudio 1.2.5019),
> at least in my case where I use a non-trival  'options(repos = ..)'
> in my startup.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Fri Nov 15 22:19:24 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sat, 16 Nov 2019 10:19:24 +1300
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <24007.52264.596794.767557@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
Message-ID: <CAB8pepz6tjCTCQo3hHrHNZ_BMHgpg+6ZGAa8dNvbKK0C8_qSjg@mail.gmail.com>

> > And indeed I think you are right on spot and this would mean
> > that indeed the implicit class
> > "matrix" should rather become c("matrix", "array").
>
> I've made up my mind (and not been contradicted by my fellow R
> corers) to try go there for  R 4.0.0   next April.

I'm not enthusiastic about matrices extending arrays.
If a matrix is an array, then shouldn't all vectors in R, be arrays too?

> #mockup
> class (1)
[1] "numeric" "array"

Which is a bad idea.
It contradicts the central principle that R uses "Vectors" rather than "Arrays".
And I feel that matrices are and should be, a special case of vectors.
(With their inheritance from vectors taking precedence over anything else).

If the motivation is to solve the problem of 2D arrays, automatically
being mapped to matrices:

> class (array (1, c (2, 2) ) )
[1] "matrix"

Then wouldn't it be better, to treat 2D arrays, as a special case, and
leave matrices as they are?

> #mockup
> class (array (1, c (2, 2) ) )
[1] "array2d" "matrix" "array"

Then 2D arrays would have access to both matrix and array methods...

Note, I don't want to enter into (another) discussion on the
differences between implicit class and classes defined via a class
attribute.
That's another discussion, which has little to do with my points above.


From wdun|@p @end|ng |rom t|bco@com  Fri Nov 15 22:37:00 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 15 Nov 2019 13:37:00 -0800
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <CAB8pepz6tjCTCQo3hHrHNZ_BMHgpg+6ZGAa8dNvbKK0C8_qSjg@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CAB8pepz6tjCTCQo3hHrHNZ_BMHgpg+6ZGAa8dNvbKK0C8_qSjg@mail.gmail.com>
Message-ID: <CAF8bMcaTbKL2ixGuh806M94YTNxALL4wAJS13ava9F88UwOn4A@mail.gmail.com>

arrays and matrices have a numeric dims attribute, vectors don't.  If
statements lead to bad code.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Fri, Nov 15, 2019 at 1:19 PM Abby Spurdle <spurdle.a at gmail.com> wrote:

> > > And indeed I think you are right on spot and this would mean
> > > that indeed the implicit class
> > > "matrix" should rather become c("matrix", "array").
> >
> > I've made up my mind (and not been contradicted by my fellow R
> > corers) to try go there for  R 4.0.0   next April.
>
> I'm not enthusiastic about matrices extending arrays.
> If a matrix is an array, then shouldn't all vectors in R, be arrays too?
>
> > #mockup
> > class (1)
> [1] "numeric" "array"
>
> Which is a bad idea.
> It contradicts the central principle that R uses "Vectors" rather than
> "Arrays".
> And I feel that matrices are and should be, a special case of vectors.
> (With their inheritance from vectors taking precedence over anything else).
>
> If the motivation is to solve the problem of 2D arrays, automatically
> being mapped to matrices:
>
> > class (array (1, c (2, 2) ) )
> [1] "matrix"
>
> Then wouldn't it be better, to treat 2D arrays, as a special case, and
> leave matrices as they are?
>
> > #mockup
> > class (array (1, c (2, 2) ) )
> [1] "array2d" "matrix" "array"
>
> Then 2D arrays would have access to both matrix and array methods...
>
> Note, I don't want to enter into (another) discussion on the
> differences between implicit class and classes defined via a class
> attribute.
> That's another discussion, which has little to do with my points above.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Fri Nov 15 22:38:56 2019
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Fri, 15 Nov 2019 22:38:56 +0100
Subject: [Rd] class(<matrix>) |--> c("matrix",
 "arrary") [was "head.matrix ..."]
In-Reply-To: <CAB8pepz6tjCTCQo3hHrHNZ_BMHgpg+6ZGAa8dNvbKK0C8_qSjg@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CAB8pepz6tjCTCQo3hHrHNZ_BMHgpg+6ZGAa8dNvbKK0C8_qSjg@mail.gmail.com>
Message-ID: <72b73062-95ed-ba5e-add8-ac8231bcb14e@kogentum.hu>

Hi Abby,

On 11/15/19 10:19 PM, Abby Spurdle wrote:
>>> And indeed I think you are right on spot and this would mean
>>> that indeed the implicit class
>>> "matrix" should rather become c("matrix", "array").
>>
>> I've made up my mind (and not been contradicted by my fellow R
>> corers) to try go there for  R 4.0.0   next April.
> 
> I'm not enthusiastic about matrices extending arrays.
> If a matrix is an array, then shouldn't all vectors in R, be arrays too?

The main distinguishing feature of matrices (and arrays) vs vectors is 
that they have a dimension attribute.

x <- as.list(letters[1:8]) # just to show that it generalizes not only 
to atomic vectors
is.vector(x) # TRUE
inherits(x, "matrix") # FALSE

dim(x) <- c(2, 4)
is.vector(x) # FALSE
inherits(x, "matrix") # TRUE
inherits(x, "array") # FALSE, but should be TRUE for consistency

dim(x) <- c(2, 2, 2)
is.vector(x) # FALSE
inherits(x, "matrix") # FALSE
inherits(x, "array") # TRUE


A matrix should be really nothing else just an array where 
length(dim(x)) == 2L.

IMHO the only special object which has dimension attribute but is not a 
special case of arrays is the data.frame.


Denes



> 
>> #mockup
>> class (1)
> [1] "numeric" "array"
> 
> Which is a bad idea.
> It contradicts the central principle that R uses "Vectors" rather than "Arrays".
> And I feel that matrices are and should be, a special case of vectors.
> (With their inheritance from vectors taking precedence over anything else).
> 
> If the motivation is to solve the problem of 2D arrays, automatically
> being mapped to matrices:
> 
>> class (array (1, c (2, 2) ) )
> [1] "matrix"
> 
> Then wouldn't it be better, to treat 2D arrays, as a special case, and
> leave matrices as they are?
> 
>> #mockup
>> class (array (1, c (2, 2) ) )
> [1] "array2d" "matrix" "array"
> 
> Then 2D arrays would have access to both matrix and array methods...
> 
> Note, I don't want to enter into (another) discussion on the
> differences between implicit class and classes defined via a class
> attribute.
> That's another discussion, which has little to do with my points above.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From br@@e|m @end|ng |rom he|mho|tz-muenchen@de  Fri Nov 15 14:42:52 2019
From: br@@e|m @end|ng |rom he|mho|tz-muenchen@de (Herbert Braselmann)
Date: Fri, 15 Nov 2019 14:42:52 +0100
Subject: [Rd] S3 methods in packages. Change in R 4.0.0?
Message-ID: <a756cc27-e442-8c9e-de11-01aabc8fd300@helmholtz-muenchen.de>

Hello,

since Bioconductor devel branch 3.11 started, which is operating with 
R-devel 4.0.0 (for e.g. 2019-11-03 r77362 on OS X 10.11.6 El Capitan), 
my package CFAssay 1.21.0 is not built on none of all three Systems, 
Linux, Windos and Mac. The error message refers to xy.coords which is 
called by R function plot.default. I found out that it has to do with 
the S3 object system. In my package I defined an S3 method for R generic 
plot and three for print. To be free from the biological stuff I 
generated here a simple example package:

https://github.com/ZytoHMGU/myfirstS3steps

A simple method? 'print.my1stClass' is defined there, which writes the 
sumproduct of two numerical entries or numbers of a list, given a class 
attribut matching the name of the method. Up to R 3.6.1 it works as one 
is used to expect from S3 methods. After attaching the package in R 
4.0.0, a call of 'print' for a list object of that class falls back to 
'print.default' and writes the list entries. However, when the method is 
sourced, so that it appears in the global environment, it works as 
expected for S3 with a 'print'. Independently thereof, the method is 
shown in the list with .S3methods(print) or .S3methods(call="my1stClass").

A similar problem has function plot, I don't show it here. It leads to 
an error message, when plot.default and xy.coords cannot work with the 
object for which the method was written. I guess that methods for 
'summary' and all other R base generics, written in a package as I did 
it and attached with the library command would have the same problem in 
R-devel 4.0. I did not try it. My questions are now:

(1) Is action required or is it a bug in 4.0?
(2) Should I be more stringent, for e.g. using special directives in the 
NAMESPACE file of the package? I did not.
(3) Should I change to S4? For e.g. Bioconductor package CGHbase (Mark 
van de Wiel) contains S4 plot-methods for its objects.

For whom it may be interesting the URL of my Bioconductor package:
http://bioconductor.org/checkResults/devel/bioc-LATEST/CFAssay/

Herbert Braselmann
<http://bioconductor.org/checkResults/devel/bioc-LATEST/aCGH/>

-- 

Abteilung Strahlenzytogenetik / Research Unit Radiation Cytogenetics
AG Integrative Biologie / Working group Integrative Biology
Tel./Phone: +49 89 3187-2878


 


Helmholtz Zentrum Muenchen

Deutsches Forschungszentrum fuer Gesundheit und Umwelt (GmbH)

Ingolstaedter Landstr. 1

85764 Neuherberg

www.helmholtz-muenchen.de

Aufsichtsratsvorsitzende: MinDir'in Prof. Dr. Veronika von Messling

Geschaeftsfuehrung: Prof. Dr. med. Dr. h.c. Matthias Tschoep, Kerstin Guenther

Registergericht: Amtsgericht Muenchen HRB 6466

USt-IdNr: DE 129521671


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov 16 16:29:43 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 16 Nov 2019 10:29:43 -0500
Subject: [Rd] S3 methods in packages. Change in R 4.0.0?
In-Reply-To: <a756cc27-e442-8c9e-de11-01aabc8fd300@helmholtz-muenchen.de>
References: <a756cc27-e442-8c9e-de11-01aabc8fd300@helmholtz-muenchen.de>
Message-ID: <858d3a6c-a293-ede9-7edf-cb535e524fe4@gmail.com>

On 15/11/2019 8:42 a.m., Herbert Braselmann wrote:
> Hello,
> 
> since Bioconductor devel branch 3.11 started, which is operating with
> R-devel 4.0.0 (for e.g. 2019-11-03 r77362 on OS X 10.11.6 El Capitan),
> my package CFAssay 1.21.0 is not built on none of all three Systems,
> Linux, Windos and Mac. The error message refers to xy.coords which is
> called by R function plot.default. I found out that it has to do with
> the S3 object system. In my package I defined an S3 method for R generic
> plot and three for print. To be free from the biological stuff I
> generated here a simple example package:
> 
> https://github.com/ZytoHMGU/myfirstS3steps
> 
> A simple method? 'print.my1stClass' is defined there, which writes the
> sumproduct of two numerical entries or numbers of a list, given a class
> attribut matching the name of the method. Up to R 3.6.1 it works as one
> is used to expect from S3 methods. After attaching the package in R
> 4.0.0, a call of 'print' for a list object of that class falls back to
> 'print.default' and writes the list entries. However, when the method is
> sourced, so that it appears in the global environment, it works as
> expected for S3 with a 'print'. Independently thereof, the method is
> shown in the list with .S3methods(print) or .S3methods(call="my1stClass").

You aren't declaring your method as a method in the NAMESPACE file.  I 
hadn't noticed a news item saying that the necessity for this had 
changed, but it is definitely something you should do.  Put this into 
NAMESPACE:

S3method(print, my1stclass)

and it should be fine.

Duncan Murdoch


> 
> A similar problem has function plot, I don't show it here. It leads to
> an error message, when plot.default and xy.coords cannot work with the
> object for which the method was written. I guess that methods for
> 'summary' and all other R base generics, written in a package as I did
> it and attached with the library command would have the same problem in
> R-devel 4.0. I did not try it. My questions are now:
> 
> (1) Is action required or is it a bug in 4.0?
> (2) Should I be more stringent, for e.g. using special directives in the
> NAMESPACE file of the package? I did not.
> (3) Should I change to S4? For e.g. Bioconductor package CGHbase (Mark
> van de Wiel) contains S4 plot-methods for its objects.
> 
> For whom it may be interesting the URL of my Bioconductor package:
> http://bioconductor.org/checkResults/devel/bioc-LATEST/CFAssay/
> 
> Herbert Braselmann
> <http://bioconductor.org/checkResults/devel/bioc-LATEST/aCGH/>
>


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Sun Nov 17 11:34:31 2019
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Sun, 17 Nov 2019 10:34:31 +0000 (UTC)
Subject: [Rd] Inappropriate class(o)[!inherits(o,"AsIs")] in get_all_vars
Message-ID: <1709347581.898771.1573986871851@mail.yahoo.com>

SVN?revision?77401?changes
????????x[isM]?<-?lapply(x[isM],?function(o)?`class<-`(o,?class(o)[class(o)?!=?"AsIs"]))
to
????????x[isM]?<-?lapply(x[isM],?function(o)?`class<-`(o,?class(o)[!inherits(o,"AsIs")]))
in?function?'get_all_vars'?in?src/library/stats/R/models.R?in?R?devel.

The?change?is?inappropriate.

class(o)[class(o)?!=?"AsIs"]?removes?"AsIs"?from?class(o),?giving?class(o)?without?"AsIs".

On?the?other?hand,?inherits(o,"AsIs")?is?just?a?single?logical?value.?If?"AsIs"?is?in class(o),?inherits(o,"AsIs")?is?TRUE. In that case,?by?recycling?of?logical?index,?class(o)[!inherits(o,"AsIs")]?removes?all?elements?of?class(o),?giving?character(0).


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sun Nov 17 23:31:07 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sun, 17 Nov 2019 14:31:07 -0800
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
Message-ID: <CAFDcVCRthz6=XjH8=RZm85+BKHKzrVsrz9ZTUSWvi7As2U=hdA@mail.gmail.com>

$ R --vanilla
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)
...

> str(base::`+`)
function (e1, e2)

> plus <- structure(base::`+`, class = "plus")
> str(plus)
function (e1, e2)
 - attr(*, "class")= chr "plus"

## Hmm ...
> str(base::`+`)
function (e1, e2)
 - attr(*, "class")= chr "plus"

> class(base::`+`) <- NULL
> str(base::`+`)
function (e1, e2)

## Hmm ...
> str(plus)
function (e1, e2)

Even without assigning to `plus`, you get this behavior:

$ R --vanilla
> structure(base::`+`, class = "plus")
function (e1, e2)  .Primitive("+")
attr(,"class")
[1] "plus"

# Hmm...
> str(base::`+`)
function (e1, e2)
 - attr(*, "class")= chr "plus"

Looks to be the case for common (all?) .Primitive functions.  Is this
expected? Should I report this one to BugZilla?

/Henrik


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Nov 18 05:42:32 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sun, 17 Nov 2019 20:42:32 -0800
Subject: [Rd] Suggestion: Make _R_CHECK_LENGTH_1_LOGIC2_=warn the default
 for R 3.6.2
Message-ID: <CAFDcVCR7DQbVFDeNum=7hdMzs7auF_g7+Y5SW16vYZCFJ3SEiw@mail.gmail.com>

Hi,

I'm not sure where we are in getting CRAN packages getting their
_R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed (*), but maybe it'd help to
make _R_CHECK_LENGTH_1_LOGIC2_=warn the new default in the upcoming R
3.6.2? Warnings of type:

$ R --vanilla
> Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "warn")
> c(TRUE, FALSE) && TRUE
[1] TRUE
Warning message:
In c(TRUE, FALSE) && TRUE : 'length(x) = 2 > 1' in coercion to 'logical(1)'

could help encourage more package maintainers to fix these bugs
sooner. Enabling this warning by default is in line with what the
current default behavior for _R_CHECK_LENGTH_1_CONDITION_ bugs:

> if (c(TRUE, FALSE)) 42
[1] 42
Warning message:
In if (c(TRUE, FALSE)) 42 :
  the condition has length > 1 and only the first element will be used

which has been the case for many years.

Hopefully in a not too far future, we get to a point where we can have
_R_CHECK_LENGTH_1_LOGIC2_=true and _R_CHECK_LENGTH_1_CONDITION_=true
as the new defaults.

(*) I understand that CRAN incoming checks with
_R_CHECK_LENGTH_1_LOGIC2_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose,
so all packages submitted to CRAN have to pass this check.  I don't
think Bioconductor checks for these yet, but I could be wrong.

/Henrik


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov 18 09:18:00 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Nov 2019 09:18:00 +0100
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
In-Reply-To: <CAFDcVCRthz6=XjH8=RZm85+BKHKzrVsrz9ZTUSWvi7As2U=hdA@mail.gmail.com>
References: <CAFDcVCRthz6=XjH8=RZm85+BKHKzrVsrz9ZTUSWvi7As2U=hdA@mail.gmail.com>
Message-ID: <24018.21432.337451.272740@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Sun, 17 Nov 2019 14:31:07 -0800 writes:

    > $ R --vanilla R version 3.6.1 (2019-07-05) -- "Action of
    > the Toes" Copyright (C) 2019 The R Foundation for
    > Statistical Computing Platform: x86_64-pc-linux-gnu
    > (64-bit) ...

    >> str(base::`+`)
    > function (e1, e2)

    >> plus <- structure(base::`+`, class = "plus") str(plus)
    > function (e1, e2) - attr(*, "class")= chr "plus"

    > ## Hmm ...
    >> str(base::`+`)
    > function (e1, e2) - attr(*, "class")= chr "plus"

    >> class(base::`+`) <- NULL str(base::`+`)
    > function (e1, e2)

    > ## Hmm ...
    >> str(plus)
    > function (e1, e2)

    > Even without assigning to `plus`, you get this behavior:

    > $ R --vanilla
    >> structure(base::`+`, class = "plus")
    > function (e1, e2) .Primitive("+") attr(,"class") [1]
    > "plus"

    > # Hmm...
    >> str(base::`+`)
    > function (e1, e2) - attr(*, "class")= chr "plus"

    > Looks to be the case for common (all?) .Primitive
    > functions.

No need for 'base::' (who would be crazy enough to redefine `+`?)
nor str() actually:

attr(`+`, "class") <- NULL  # (reset)
`+`
structure(`+`, class = "plus")
`+`

is clearly convincing and minimal

> attr(`+`, "class") <- NULL
> `+`
function (e1, e2)  .Primitive("+")
> structure(`+`, class = "plus")
function (e1, e2)  .Primitive("+")
attr(,"class")
[1] "plus"
> `+`
function (e1, e2)  .Primitive("+")
attr(,"class")
[1] "plus"
> 

---------------------------------------------------------

    > Is this expected? 

no.  (at least not by 99.999% of R users)


    > Should I report this one to Bugzilla?
yes, please.

    > /Henrik


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov 18 09:35:25 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Nov 2019 09:35:25 +0100
Subject: [Rd] 
 Suggestion: Make _R_CHECK_LENGTH_1_LOGIC2_=warn the default
 for R 3.6.2
In-Reply-To: <CAFDcVCR7DQbVFDeNum=7hdMzs7auF_g7+Y5SW16vYZCFJ3SEiw@mail.gmail.com>
References: <CAFDcVCR7DQbVFDeNum=7hdMzs7auF_g7+Y5SW16vYZCFJ3SEiw@mail.gmail.com>
Message-ID: <24018.22477.950017.449779@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Sun, 17 Nov 2019 20:42:32 -0800 writes:

    > Hi,

    > I'm not sure where we are in getting CRAN packages getting their
    > _R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed (*), but maybe it'd help to
    > make _R_CHECK_LENGTH_1_LOGIC2_=warn the new default in the upcoming R
    > 3.6.2?

Interesting, I had similar thoughts the last few days
... but not for R 3.6.x --- I think it's out of the question to
do that for a "minor" update --- but for R 4.0.0.

    > Warnings of type:

    > $ R --vanilla
    >> Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "warn")
    >> c(TRUE, FALSE) && TRUE
    > [1] TRUE
    > Warning message:
    > In c(TRUE, FALSE) && TRUE : 'length(x) = 2 > 1' in coercion to 'logical(1)'

    > could help encourage more package maintainers to fix these bugs
    > sooner. Enabling this warning by default is in line with what the
    > current default behavior for _R_CHECK_LENGTH_1_CONDITION_ bugs:

    >> if (c(TRUE, FALSE)) 42
    > [1] 42
    > Warning message:
    > In if (c(TRUE, FALSE)) 42 :
    > the condition has length > 1 and only the first element will be used

    > which has been the case for many years.

    > Hopefully in a not too far future, we get to a point where we can have
    > _R_CHECK_LENGTH_1_LOGIC2_=true and _R_CHECK_LENGTH_1_CONDITION_=true
    > as the new defaults.

Exactly.  My own thoughts (mentioned above) were actually more about
the *other* _R_CHECK_LENGTH_1_* variable, i.e., _R_CHECK_LENGTH_1_CONDITION_
and that ---- as I have only noticed these days, when considering
the exact impact of the upcoming

    class(<matrix>)  |-->  c("matrix", "array")

change --- has actually *not* been part of the  '--as-cran'
checks, nor (AFAIK, but I don't really know) of extra CRAN
incoming checks.

I'm proposing to add   _R_CHECK_LENGTH_1_CONDITION_=true
to the --as-cran  checks  ASAP (within weeks)  and indeed, I 
think we should consider to have *both*  _R_CHECK_LENGTH_1_* = true
become the default in R 4.0.0.

Martin Maechler
ETH Zurich  and  R Core


    > (*) I understand that CRAN incoming checks with
    > _R_CHECK_LENGTH_1_LOGIC2_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose,
    > so all packages submitted to CRAN have to pass this check.  I don't
    > think Bioconductor checks for these yet, but I could be wrong.

    > /Henrik

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Nov 18 09:36:14 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Nov 2019 09:36:14 +0100
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
In-Reply-To: <24018.21432.337451.272740@stat.math.ethz.ch>
References: <CAFDcVCRthz6=XjH8=RZm85+BKHKzrVsrz9ZTUSWvi7As2U=hdA@mail.gmail.com>
 <24018.21432.337451.272740@stat.math.ethz.ch>
Message-ID: <83ab021c-9b67-a3a9-2b5d-c908754ba178@gmail.com>

On 11/18/19 9:18 AM, Martin Maechler wrote:
>>>>>> Henrik Bengtsson
>>>>>>      on Sun, 17 Nov 2019 14:31:07 -0800 writes:
>      > $ R --vanilla R version 3.6.1 (2019-07-05) -- "Action of
>      > the Toes" Copyright (C) 2019 The R Foundation for
>      > Statistical Computing Platform: x86_64-pc-linux-gnu
>      > (64-bit) ...
>
>      >> str(base::`+`)
>      > function (e1, e2)
>
>      >> plus <- structure(base::`+`, class = "plus") str(plus)
>      > function (e1, e2) - attr(*, "class")= chr "plus"
>
>      > ## Hmm ...
>      >> str(base::`+`)
>      > function (e1, e2) - attr(*, "class")= chr "plus"
>
>      >> class(base::`+`) <- NULL str(base::`+`)
>      > function (e1, e2)
>
>      > ## Hmm ...
>      >> str(plus)
>      > function (e1, e2)
>
>      > Even without assigning to `plus`, you get this behavior:
>
>      > $ R --vanilla
>      >> structure(base::`+`, class = "plus")
>      > function (e1, e2) .Primitive("+") attr(,"class") [1]
>      > "plus"
>
>      > # Hmm...
>      >> str(base::`+`)
>      > function (e1, e2) - attr(*, "class")= chr "plus"
>
>      > Looks to be the case for common (all?) .Primitive
>      > functions.
>
> No need for 'base::' (who would be crazy enough to redefine `+`?)
> nor str() actually:
>
> attr(`+`, "class") <- NULL  # (reset)
> `+`
> structure(`+`, class = "plus")
> `+`
>
> is clearly convincing and minimal
>
>> attr(`+`, "class") <- NULL
>> `+`
> function (e1, e2)  .Primitive("+")
>> structure(`+`, class = "plus")
> function (e1, e2)  .Primitive("+")
> attr(,"class")
> [1] "plus"
>> `+`
> function (e1, e2)  .Primitive("+")
> attr(,"class")
> [1] "plus"
> ---------------------------------------------------------
>
>      > Is this expected?
>
> no.  (at least not by 99.999% of R users)
>
>
>      > Should I report this one to Bugzilla?
> yes, please.
>
>      > /Henrik

A shorter example is

 > p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- 1 ; p2
function (e1, e2)? .Primitive("+")
attr(,"myattr")
[1] 1

Builtins have referential semantics in R (like e.g. environments, but 
also some other types).

Tomas


>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov 18 10:45:17 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Nov 2019 10:45:17 +0100
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
In-Reply-To: <83ab021c-9b67-a3a9-2b5d-c908754ba178@gmail.com>
References: <CAFDcVCRthz6=XjH8=RZm85+BKHKzrVsrz9ZTUSWvi7As2U=hdA@mail.gmail.com>
 <24018.21432.337451.272740@stat.math.ethz.ch>
 <83ab021c-9b67-a3a9-2b5d-c908754ba178@gmail.com>
Message-ID: <24018.26669.401949.733413@stat.math.ethz.ch>

>>>>> Tomas Kalibera 
>>>>>     on Mon, 18 Nov 2019 09:36:14 +0100 writes:

    > On 11/18/19 9:18 AM, Martin Maechler wrote:
    >>>>>>> Henrik Bengtsson
    >>>>>>> on Sun, 17 Nov 2019 14:31:07 -0800 writes:
    >> > $ R --vanilla R version 3.6.1 (2019-07-05) -- "Action of
    >> > the Toes" Copyright (C) 2019 The R Foundation for
    >> > Statistical Computing Platform: x86_64-pc-linux-gnu
    >> > (64-bit) ...
    >> 
    >> >> str(base::`+`)
    >> > function (e1, e2)
    >> 
    >> >> plus <- structure(base::`+`, class = "plus") str(plus)
    >> > function (e1, e2) - attr(*, "class")= chr "plus"
    >> 
    >> > ## Hmm ...
    >> >> str(base::`+`)
    >> > function (e1, e2) - attr(*, "class")= chr "plus"
    >> 
    >> >> class(base::`+`) <- NULL str(base::`+`)
    >> > function (e1, e2)
    >> 
    >> > ## Hmm ...
    >> >> str(plus)
    >> > function (e1, e2)
    >> 
    >> > Even without assigning to `plus`, you get this behavior:
    >> 
    >> > $ R --vanilla
    >> >> structure(base::`+`, class = "plus")
    >> > function (e1, e2) .Primitive("+") attr(,"class") [1]
    >> > "plus"
    >> 
    >> > # Hmm...
    >> >> str(base::`+`)
    >> > function (e1, e2) - attr(*, "class")= chr "plus"
    >> 
    >> > Looks to be the case for common (all?) .Primitive
    >> > functions.
    >> 
    >> No need for 'base::' (who would be crazy enough to redefine `+`?)
    >> nor str() actually:
    >> 
    >> attr(`+`, "class") <- NULL  # (reset)
    >> `+`
    >> structure(`+`, class = "plus")
    >> `+`
    >> 
    >> is clearly convincing and minimal
    >> 
    >>> attr(`+`, "class") <- NULL
    >>> `+`
    >> function (e1, e2)  .Primitive("+")
    >>> structure(`+`, class = "plus")
    >> function (e1, e2)  .Primitive("+")
    >> attr(,"class")
    >> [1] "plus"
    >>> `+`
    >> function (e1, e2)  .Primitive("+")
    >> attr(,"class")
    >> [1] "plus"
    >> ---------------------------------------------------------
    >> 
    >> > Is this expected?
    >> 
    >> no.  (at least not by 99.999% of R users)
    >> 
    >> 
    >> > Should I report this one to Bugzilla?
    >> yes, please.
    >> 
    >> > /Henrik

    > A shorter example is

    >> p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- 1 ; p2

    > function (e1, e2)? .Primitive("+")
    > attr(,"myattr")
    > [1] 1

beautiful ; thank you, Tomas !

    > Builtins have referential semantics in R (like e.g. environments, but 
    > also some other types).

    > Tomas

 [aarh.. I knew it ... but am showing my age:  I had forgotten about it.]

I forget (and don't have time just now to find out) where we
have documented it;  it may be good to document also in official
user exposed places such say the  ?.Primitive  help page.

Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov 18 12:15:38 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Nov 2019 12:15:38 +0100
Subject: [Rd] 
 Inappropriate class(o)[!inherits(o,"AsIs")] in get_all_vars
In-Reply-To: <1709347581.898771.1573986871851@mail.yahoo.com>
References: <1709347581.898771.1573986871851@mail.yahoo.com>
Message-ID: <24018.32090.951327.313003@stat.math.ethz.ch>

>>>>> suharto anggono--- via R-devel 
>>>>>     on Sun, 17 Nov 2019 10:34:31 +0000 writes:

    > SVN revision 77401 changes
    >         x[isM] <- lapply(x[isM], function(o) `class<-`(o, class(o)[class(o) != "AsIs"]))
    > to
    >         x[isM] <- lapply(x[isM], function(o) `class<-`(o, class(o)[!inherits(o,"AsIs")]))
    > in function 'get_all_vars' in src/library/stats/R/models.R in R devel.

    > The change is inappropriate.

    > class(o)[class(o) != "AsIs"] removes "AsIs" from class(o), giving class(o) without "AsIs".

    > On the other hand, inherits(o,"AsIs") is just a single logical value. If "AsIs" is in class(o), inherits(o,"AsIs") is TRUE. In that case, by recycling of logical index, class(o)[!inherits(o,"AsIs")] removes all elements of class(o), giving character(0).

Thank you, Suharto !

You are obviously right,  and I'm a bit embarrassed by my
overzealousness to follow my own recommendations in the  R Blog

  http://bit.ly/R_blog_class_think_2x

{*wrongly*: The recommendation was to "think again" ...}

It's a "shame" that the wrong code did not trigger any checks,
so if anybody has time... I'd be grateful for such a regression
check.

Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov 18 14:12:07 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Nov 2019 14:12:07 +0100
Subject: [Rd] 
 Inappropriate class(o)[!inherits(o,"AsIs")] in get_all_vars
In-Reply-To: <24018.32090.951327.313003@stat.math.ethz.ch>
References: <1709347581.898771.1573986871851@mail.yahoo.com>
 <24018.32090.951327.313003@stat.math.ethz.ch>
Message-ID: <24018.39079.286099.958408@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Mon, 18 Nov 2019 12:15:38 +0100 writes:

>>>>> suharto anggono--- via R-devel 
>>>>>     on Sun, 17 Nov 2019 10:34:31 +0000 writes:

    >> SVN revision 77401 changes
    >> x[isM] <- lapply(x[isM], function(o) `class<-`(o, class(o)[class(o) != "AsIs"]))
    >> to
    >> x[isM] <- lapply(x[isM], function(o) `class<-`(o, class(o)[!inherits(o,"AsIs")]))
    >> in function 'get_all_vars' in src/library/stats/R/models.R in R devel.

    >> The change is inappropriate.

    >> class(o)[class(o) != "AsIs"] removes "AsIs" from class(o), giving class(o) without "AsIs".

    >> On the other hand, inherits(o,"AsIs") is just a single logical value. If "AsIs" is in class(o), inherits(o,"AsIs") is TRUE. In that case, by recycling of logical index, class(o)[!inherits(o,"AsIs")] removes all elements of class(o), giving character(0).

    > Thank you, Suharto !

    > You are obviously right,  and I'm a bit embarrassed by my
    > overzealousness to follow my own recommendations in the  R Blog

    > http://bit.ly/R_blog_class_think_2x

    > {*wrongly*: The recommendation was to "think again" ...}

    > It's a "shame" that the wrong code did not trigger any checks,
    > so if anybody has time... I'd be grateful for such a regression
    > check.

Once I started thinking, it was easy to modify the previous
reg.check  to trigger in the case of the erronous r77401.

Fixed now in 77435.
Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Nov 18 14:23:12 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Nov 2019 14:23:12 +0100
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
In-Reply-To: <24018.26669.401949.733413@stat.math.ethz.ch>
References: <CAFDcVCRthz6=XjH8=RZm85+BKHKzrVsrz9ZTUSWvi7As2U=hdA@mail.gmail.com>
 <24018.21432.337451.272740@stat.math.ethz.ch>
 <83ab021c-9b67-a3a9-2b5d-c908754ba178@gmail.com>
 <24018.26669.401949.733413@stat.math.ethz.ch>
Message-ID: <e33fad79-22ac-cd00-ab47-7ad939544436@gmail.com>

On 11/18/19 10:45 AM, Martin Maechler wrote:
>>>>>> Tomas Kalibera
>>>>>>      on Mon, 18 Nov 2019 09:36:14 +0100 writes:
>      > On 11/18/19 9:18 AM, Martin Maechler wrote:
>      >>>>>>> Henrik Bengtsson
>      >>>>>>> on Sun, 17 Nov 2019 14:31:07 -0800 writes:
>      >> > $ R --vanilla R version 3.6.1 (2019-07-05) -- "Action of
>      >> > the Toes" Copyright (C) 2019 The R Foundation for
>      >> > Statistical Computing Platform: x86_64-pc-linux-gnu
>      >> > (64-bit) ...
>      >>
>      >> >> str(base::`+`)
>      >> > function (e1, e2)
>      >>
>      >> >> plus <- structure(base::`+`, class = "plus") str(plus)
>      >> > function (e1, e2) - attr(*, "class")= chr "plus"
>      >>
>      >> > ## Hmm ...
>      >> >> str(base::`+`)
>      >> > function (e1, e2) - attr(*, "class")= chr "plus"
>      >>
>      >> >> class(base::`+`) <- NULL str(base::`+`)
>      >> > function (e1, e2)
>      >>
>      >> > ## Hmm ...
>      >> >> str(plus)
>      >> > function (e1, e2)
>      >>
>      >> > Even without assigning to `plus`, you get this behavior:
>      >>
>      >> > $ R --vanilla
>      >> >> structure(base::`+`, class = "plus")
>      >> > function (e1, e2) .Primitive("+") attr(,"class") [1]
>      >> > "plus"
>      >>
>      >> > # Hmm...
>      >> >> str(base::`+`)
>      >> > function (e1, e2) - attr(*, "class")= chr "plus"
>      >>
>      >> > Looks to be the case for common (all?) .Primitive
>      >> > functions.
>      >>
>      >> No need for 'base::' (who would be crazy enough to redefine `+`?)
>      >> nor str() actually:
>      >>
>      >> attr(`+`, "class") <- NULL  # (reset)
>      >> `+`
>      >> structure(`+`, class = "plus")
>      >> `+`
>      >>
>      >> is clearly convincing and minimal
>      >>
>      >>> attr(`+`, "class") <- NULL
>      >>> `+`
>      >> function (e1, e2)  .Primitive("+")
>      >>> structure(`+`, class = "plus")
>      >> function (e1, e2)  .Primitive("+")
>      >> attr(,"class")
>      >> [1] "plus"
>      >>> `+`
>      >> function (e1, e2)  .Primitive("+")
>      >> attr(,"class")
>      >> [1] "plus"
>      >> ---------------------------------------------------------
>      >>
>      >> > Is this expected?
>      >>
>      >> no.  (at least not by 99.999% of R users)
>      >>
>      >>
>      >> > Should I report this one to Bugzilla?
>      >> yes, please.
>      >>
>      >> > /Henrik
>
>      > A shorter example is
>
>      >> p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- 1 ; p2
>
>      > function (e1, e2)? .Primitive("+")
>      > attr(,"myattr")
>      > [1] 1
>
> beautiful ; thank you, Tomas !
>
>      > Builtins have referential semantics in R (like e.g. environments, but
>      > also some other types).
>
>      > Tomas
>
>   [aarh.. I knew it ... but am showing my age:  I had forgotten about it.]
>
> I forget (and don't have time just now to find out) where we
> have documented it;  it may be good to document also in official
> user exposed places such say the  ?.Primitive  help page.

I think internal objects such as builtins should never be modified by 
user code in the first place. We had to add detection for modifications 
of NIL and symbols in the past, maybe we will have to do it for builtins 
as well.

Environments can be used in user code as objects with referential 
semantics, e.g. to keep mutable state.

Tomas
>
> Martin


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Nov 18 15:44:46 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 18 Nov 2019 06:44:46 -0800
Subject: [Rd] 
 Suggestion: Make _R_CHECK_LENGTH_1_LOGIC2_=warn the default
 for R 3.6.2
In-Reply-To: <24018.22477.950017.449779@stat.math.ethz.ch>
References: <CAFDcVCR7DQbVFDeNum=7hdMzs7auF_g7+Y5SW16vYZCFJ3SEiw@mail.gmail.com>
 <24018.22477.950017.449779@stat.math.ethz.ch>
Message-ID: <CAFDcVCRunAmkvTpZas13m+j1-evCcCdEHD+UTkD4gKm5_FfHAQ@mail.gmail.com>

.On Mon, Nov 18, 2019 at 12:35 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Henrik Bengtsson
> >>>>>     on Sun, 17 Nov 2019 20:42:32 -0800 writes:
>
>     > Hi,
>
>     > I'm not sure where we are in getting CRAN packages getting their
>     > _R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed (*), but maybe it'd help to
>     > make _R_CHECK_LENGTH_1_LOGIC2_=warn the new default in the upcoming R
>     > 3.6.2?
>
> Interesting, I had similar thoughts the last few days
> ... but not for R 3.6.x --- I think it's out of the question to
> do that for a "minor" update --- but for R 4.0.0.
>
>     > Warnings of type:
>
>     > $ R --vanilla
>     >> Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "warn")
>     >> c(TRUE, FALSE) && TRUE
>     > [1] TRUE
>     > Warning message:
>     > In c(TRUE, FALSE) && TRUE : 'length(x) = 2 > 1' in coercion to 'logical(1)'
>
>     > could help encourage more package maintainers to fix these bugs
>     > sooner. Enabling this warning by default is in line with what the
>     > current default behavior for _R_CHECK_LENGTH_1_CONDITION_ bugs:
>
>     >> if (c(TRUE, FALSE)) 42
>     > [1] 42
>     > Warning message:
>     > In if (c(TRUE, FALSE)) 42 :
>     > the condition has length > 1 and only the first element will be used
>
>     > which has been the case for many years.
>
>     > Hopefully in a not too far future, we get to a point where we can have
>     > _R_CHECK_LENGTH_1_LOGIC2_=true and _R_CHECK_LENGTH_1_CONDITION_=true
>     > as the new defaults.
>
> Exactly.  My own thoughts (mentioned above) were actually more about
> the *other* _R_CHECK_LENGTH_1_* variable, i.e., _R_CHECK_LENGTH_1_CONDITION_
> and that ---- as I have only noticed these days, when considering
> the exact impact of the upcoming
>
>     class(<matrix>)  |-->  c("matrix", "array")
>
> change --- has actually *not* been part of the  '--as-cran'
> checks, nor (AFAIK, but I don't really know) of extra CRAN
> incoming checks.
>
> I'm proposing to add   _R_CHECK_LENGTH_1_CONDITION_=true
> to the --as-cran  checks  ASAP (within weeks)

To do that, I think we would need:

_R_CHECK_LENGTH_1_CONDITION_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose

such that the check only applies to the code of the package being R
CMD check:ed and not to code elsewhere. If not, there will be lots of
confusing "false-positives" and extra work for CRAN. Unfortunately,
the (great) "package:_R_CHECK_PACKAGE_NAME_" mechanism is not
implemented for _R_CHECK_LENGTH_1_CONDITION_.

> and indeed, I
> think we should consider to have *both*  _R_CHECK_LENGTH_1_* = true
> become the default in R 4.0.0.

That would be great, but I'm a bit skeptical at the same time - I
think R 4.0.0 might be too optimistic but I won't complain if that
would be goal. I suspect there are still lots of CRAN packages that
would break this way overnight which would cause a major headache for
everything and much work for the CRAN Team.  This is why I wrote "I'm
not sure where we are in getting CRAN packages getting their
_R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed"; I'm not aware of anyone
having checked the CRAN status for this bug.

/Henrik

>
> Martin Maechler
> ETH Zurich  and  R Core
>
>
>     > (*) I understand that CRAN incoming checks with
>     > _R_CHECK_LENGTH_1_LOGIC2_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose,
>     > so all packages submitted to CRAN have to pass this check.  I don't
>     > think Bioconductor checks for these yet, but I could be wrong.
>
>     > /Henrik
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Nov 18 15:55:40 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Nov 2019 15:55:40 +0100
Subject: [Rd] 
 Suggestion: Make _R_CHECK_LENGTH_1_LOGIC2_=warn the default
 for R 3.6.2
In-Reply-To: <CAFDcVCRunAmkvTpZas13m+j1-evCcCdEHD+UTkD4gKm5_FfHAQ@mail.gmail.com>
References: <CAFDcVCR7DQbVFDeNum=7hdMzs7auF_g7+Y5SW16vYZCFJ3SEiw@mail.gmail.com>
 <24018.22477.950017.449779@stat.math.ethz.ch>
 <CAFDcVCRunAmkvTpZas13m+j1-evCcCdEHD+UTkD4gKm5_FfHAQ@mail.gmail.com>
Message-ID: <75ffd71f-25db-777d-b77f-dff0e3e9aac9@gmail.com>

On 11/18/19 3:44 PM, Henrik Bengtsson wrote:
> .On Mon, Nov 18, 2019 at 12:35 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
>>>>>>> Henrik Bengtsson
>>>>>>>      on Sun, 17 Nov 2019 20:42:32 -0800 writes:
>>      > Hi,
>>
>>      > I'm not sure where we are in getting CRAN packages getting their
>>      > _R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed (*), but maybe it'd help to
>>      > make _R_CHECK_LENGTH_1_LOGIC2_=warn the new default in the upcoming R
>>      > 3.6.2?
>>
>> Interesting, I had similar thoughts the last few days
>> ... but not for R 3.6.x --- I think it's out of the question to
>> do that for a "minor" update --- but for R 4.0.0.
>>
>>      > Warnings of type:
>>
>>      > $ R --vanilla
>>      >> Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "warn")
>>      >> c(TRUE, FALSE) && TRUE
>>      > [1] TRUE
>>      > Warning message:
>>      > In c(TRUE, FALSE) && TRUE : 'length(x) = 2 > 1' in coercion to 'logical(1)'
>>
>>      > could help encourage more package maintainers to fix these bugs
>>      > sooner. Enabling this warning by default is in line with what the
>>      > current default behavior for _R_CHECK_LENGTH_1_CONDITION_ bugs:
>>
>>      >> if (c(TRUE, FALSE)) 42
>>      > [1] 42
>>      > Warning message:
>>      > In if (c(TRUE, FALSE)) 42 :
>>      > the condition has length > 1 and only the first element will be used
>>
>>      > which has been the case for many years.
>>
>>      > Hopefully in a not too far future, we get to a point where we can have
>>      > _R_CHECK_LENGTH_1_LOGIC2_=true and _R_CHECK_LENGTH_1_CONDITION_=true
>>      > as the new defaults.
>>
>> Exactly.  My own thoughts (mentioned above) were actually more about
>> the *other* _R_CHECK_LENGTH_1_* variable, i.e., _R_CHECK_LENGTH_1_CONDITION_
>> and that ---- as I have only noticed these days, when considering
>> the exact impact of the upcoming
>>
>>      class(<matrix>)  |-->  c("matrix", "array")
>>
>> change --- has actually *not* been part of the  '--as-cran'
>> checks, nor (AFAIK, but I don't really know) of extra CRAN
>> incoming checks.
>>
>> I'm proposing to add   _R_CHECK_LENGTH_1_CONDITION_=true
>> to the --as-cran  checks  ASAP (within weeks)
> To do that, I think we would need:
>
> _R_CHECK_LENGTH_1_CONDITION_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose
>
> such that the check only applies to the code of the package being R
> CMD check:ed and not to code elsewhere. If not, there will be lots of
> confusing "false-positives" and extra work for CRAN. Unfortunately,
> the (great) "package:_R_CHECK_PACKAGE_NAME_" mechanism is not
> implemented for _R_CHECK_LENGTH_1_CONDITION_.

The mechanism should be the same for both variables (see R Internals). 
It is implemented using a single function in R-devel.

Tomas

>
>> and indeed, I
>> think we should consider to have *both*  _R_CHECK_LENGTH_1_* = true
>> become the default in R 4.0.0.
> That would be great, but I'm a bit skeptical at the same time - I
> think R 4.0.0 might be too optimistic but I won't complain if that
> would be goal. I suspect there are still lots of CRAN packages that
> would break this way overnight which would cause a major headache for
> everything and much work for the CRAN Team.  This is why I wrote "I'm
> not sure where we are in getting CRAN packages getting their
> _R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed"; I'm not aware of anyone
> having checked the CRAN status for this bug.
>
> /Henrik
>
>> Martin Maechler
>> ETH Zurich  and  R Core
>>
>>
>>      > (*) I understand that CRAN incoming checks with
>>      > _R_CHECK_LENGTH_1_LOGIC2_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose,
>>      > so all packages submitted to CRAN have to pass this check.  I don't
>>      > think Bioconductor checks for these yet, but I could be wrong.
>>
>>      > /Henrik
>>
>>      > ______________________________________________
>>      > R-devel at r-project.org mailing list
>>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Nov 18 16:42:43 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 18 Nov 2019 07:42:43 -0800
Subject: [Rd] 
 Suggestion: Make _R_CHECK_LENGTH_1_LOGIC2_=warn the default
 for R 3.6.2
In-Reply-To: <75ffd71f-25db-777d-b77f-dff0e3e9aac9@gmail.com>
References: <CAFDcVCR7DQbVFDeNum=7hdMzs7auF_g7+Y5SW16vYZCFJ3SEiw@mail.gmail.com>
 <24018.22477.950017.449779@stat.math.ethz.ch>
 <CAFDcVCRunAmkvTpZas13m+j1-evCcCdEHD+UTkD4gKm5_FfHAQ@mail.gmail.com>
 <75ffd71f-25db-777d-b77f-dff0e3e9aac9@gmail.com>
Message-ID: <CAFDcVCTycDPWH-0eM2YWrTqebRjFpUj_kQB6DzzC+UKJKbqAUg@mail.gmail.com>

On Mon, Nov 18, 2019 at 6:55 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 11/18/19 3:44 PM, Henrik Bengtsson wrote:
> > .On Mon, Nov 18, 2019 at 12:35 AM Martin Maechler
> > <maechler at stat.math.ethz.ch> wrote:
> >>>>>>> Henrik Bengtsson
> >>>>>>>      on Sun, 17 Nov 2019 20:42:32 -0800 writes:
> >>      > Hi,
> >>
> >>      > I'm not sure where we are in getting CRAN packages getting their
> >>      > _R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed (*), but maybe it'd help to
> >>      > make _R_CHECK_LENGTH_1_LOGIC2_=warn the new default in the upcoming R
> >>      > 3.6.2?
> >>
> >> Interesting, I had similar thoughts the last few days
> >> ... but not for R 3.6.x --- I think it's out of the question to
> >> do that for a "minor" update --- but for R 4.0.0.
> >>
> >>      > Warnings of type:
> >>
> >>      > $ R --vanilla
> >>      >> Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "warn")
> >>      >> c(TRUE, FALSE) && TRUE
> >>      > [1] TRUE
> >>      > Warning message:
> >>      > In c(TRUE, FALSE) && TRUE : 'length(x) = 2 > 1' in coercion to 'logical(1)'
> >>
> >>      > could help encourage more package maintainers to fix these bugs
> >>      > sooner. Enabling this warning by default is in line with what the
> >>      > current default behavior for _R_CHECK_LENGTH_1_CONDITION_ bugs:
> >>
> >>      >> if (c(TRUE, FALSE)) 42
> >>      > [1] 42
> >>      > Warning message:
> >>      > In if (c(TRUE, FALSE)) 42 :
> >>      > the condition has length > 1 and only the first element will be used
> >>
> >>      > which has been the case for many years.
> >>
> >>      > Hopefully in a not too far future, we get to a point where we can have
> >>      > _R_CHECK_LENGTH_1_LOGIC2_=true and _R_CHECK_LENGTH_1_CONDITION_=true
> >>      > as the new defaults.
> >>
> >> Exactly.  My own thoughts (mentioned above) were actually more about
> >> the *other* _R_CHECK_LENGTH_1_* variable, i.e., _R_CHECK_LENGTH_1_CONDITION_
> >> and that ---- as I have only noticed these days, when considering
> >> the exact impact of the upcoming
> >>
> >>      class(<matrix>)  |-->  c("matrix", "array")
> >>
> >> change --- has actually *not* been part of the  '--as-cran'
> >> checks, nor (AFAIK, but I don't really know) of extra CRAN
> >> incoming checks.
> >>
> >> I'm proposing to add   _R_CHECK_LENGTH_1_CONDITION_=true
> >> to the --as-cran  checks  ASAP (within weeks)
> > To do that, I think we would need:
> >
> > _R_CHECK_LENGTH_1_CONDITION_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose
> >
> > such that the check only applies to the code of the package being R
> > CMD check:ed and not to code elsewhere. If not, there will be lots of
> > confusing "false-positives" and extra work for CRAN. Unfortunately,
> > the (great) "package:_R_CHECK_PACKAGE_NAME_" mechanism is not
> > implemented for _R_CHECK_LENGTH_1_CONDITION_.
>
> The mechanism should be the same for both variables (see R Internals).
> It is implemented using a single function in R-devel.

Oh, I am glad I was wrong about this. This is great news. Then, it is
possible to enable this check by having --as-cran set:

_R_CHECK_LENGTH_1_CONDITION_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose

As Martin says, I think this would be great to add.  R CMD check
--cran already does:

_R_CHECK_LENGTH_1_LOGIC2_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose

For those who still follow, the main point of my original post had
nothing to do with 'R CMD check'.  Instead, I wanted base R to default
to:

_R_CHECK_LENGTH_1_LOGIC2_=warn

such that end users (and developers) will get run-time warnings about
this type of bug. Without "warn", there's a great risk these bugs will
not be fixed in a very long time.  Also, using "warn" will go
undetected by 'R CMD check' (as now).  And 'R CMD check --as-cran'
will still detect them (as now).

/Henrik

>
> Tomas
>
> >
> >> and indeed, I
> >> think we should consider to have *both*  _R_CHECK_LENGTH_1_* = true
> >> become the default in R 4.0.0.
> > That would be great, but I'm a bit skeptical at the same time - I
> > think R 4.0.0 might be too optimistic but I won't complain if that
> > would be goal. I suspect there are still lots of CRAN packages that
> > would break this way overnight which would cause a major headache for
> > everything and much work for the CRAN Team.  This is why I wrote "I'm
> > not sure where we are in getting CRAN packages getting their
> > _R_CHECK_LENGTH_1_LOGIC2_=true bugs fixed"; I'm not aware of anyone
> > having checked the CRAN status for this bug.
> >
> > /Henrik
> >
> >> Martin Maechler
> >> ETH Zurich  and  R Core
> >>
> >>
> >>      > (*) I understand that CRAN incoming checks with
> >>      > _R_CHECK_LENGTH_1_LOGIC2_=package:_R_CHECK_PACKAGE_NAME_,abort,verbose,
> >>      > so all packages submitted to CRAN have to pass this check.  I don't
> >>      > think Bioconductor checks for these yet, but I could be wrong.
> >>
> >>      > /Henrik
> >>
> >>      > ______________________________________________
> >>      > R-devel at r-project.org mailing list
> >>      > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From jenn||er@@@|yon @end|ng |rom gm@||@com  Mon Nov 18 23:22:48 2019
From: jenn||er@@@|yon @end|ng |rom gm@||@com (Jennifer Lyon)
Date: Mon, 18 Nov 2019 15:22:48 -0700
Subject: [Rd] readBin should check that its endian argument is a legal value
Message-ID: <CAKstpn4Ga1PEe3y7VG0GGYqm_+VV+B=KAHjrgkzjZYidnR=SHA@mail.gmail.com>

I think it would be helpful if readBin checked that its endian argument is
a legal value.

Why? I was reviewing some of our code and noticed that the author had
readBin(..., endian="network") and never having heard of "network", I
looked at the man page for readBin, and it hadn't heard of "network"
either. Not good.

I then looked at the R code for readBin, which has this line:
 swap <- endian != .Platform$endian

and swap is passed into the .Internal(readBin). Further use of Google
revealed that "network" is a known endian in the universe, and our code was
working by essentially a lucky chance that the data was "big" and our
current machines are "little". Really not good. I don't know enough about
endian stuff to know if it makes sense that "network" should be one of the
choices for endian for readBin (which from the documentation currently are:
"big", "little" or "swap"), but in my opinion R should have failed with the
choice of "network" in our code in the current version of R. I did
eventually find an aside in the R Data Import/Export document that
"network" is "big" so I will patch our code to be legal. Of course some
code may depend on this undocumented behavior, but I would guess that in
the vast majority of cases an illegal value really is a mistake.

Jen

> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /home/mbr/r-project/R-3.6.1/lib/libRblas.so
LAPACK: /home/mbr/r-project/R-3.6.1/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.6.1

	[[alternative HTML version deleted]]


From br@@e|m @end|ng |rom he|mho|tz-muenchen@de  Tue Nov 19 10:38:28 2019
From: br@@e|m @end|ng |rom he|mho|tz-muenchen@de (Herbert Braselmann)
Date: Tue, 19 Nov 2019 10:38:28 +0100
Subject: [Rd] S3 methods in packages. Change in R 4.0.0?
In-Reply-To: <858d3a6c-a293-ede9-7edf-cb535e524fe4@gmail.com>
References: <a756cc27-e442-8c9e-de11-01aabc8fd300@helmholtz-muenchen.de>
 <858d3a6c-a293-ede9-7edf-cb535e524fe4@gmail.com>
Message-ID: <d3726275-a032-890e-e9ed-9ab66ab883ff@helmholtz-muenchen.de>

Thank you Duncan,

I declared now my S3methods in the NAMESPACE file. This works, at least 
locally on my machine. But I assume that my package version on the devel 
branch of Bioconductor will be built in the next hours.

Herbert


Am 16.11.19 um 16:29 schrieb Duncan Murdoch:
> On 15/11/2019 8:42 a.m., Herbert Braselmann wrote:
>> Hello,
>>
>> since Bioconductor devel branch 3.11 started, which is operating with
>> R-devel 4.0.0 (for e.g. 2019-11-03 r77362 on OS X 10.11.6 El Capitan),
>> my package CFAssay 1.21.0 is not built on none of all three Systems,
>> Linux, Windos and Mac. The error message refers to xy.coords which is
>> called by R function plot.default. I found out that it has to do with
>> the S3 object system. In my package I defined an S3 method for R generic
>> plot and three for print. To be free from the biological stuff I
>> generated here a simple example package:
>>
>> https://github.com/ZytoHMGU/myfirstS3steps
>>
>> A simple method? 'print.my1stClass' is defined there, which writes the
>> sumproduct of two numerical entries or numbers of a list, given a class
>> attribut matching the name of the method. Up to R 3.6.1 it works as one
>> is used to expect from S3 methods. After attaching the package in R
>> 4.0.0, a call of 'print' for a list object of that class falls back to
>> 'print.default' and writes the list entries. However, when the method is
>> sourced, so that it appears in the global environment, it works as
>> expected for S3 with a 'print'. Independently thereof, the method is
>> shown in the list with .S3methods(print) or 
>> .S3methods(call="my1stClass").
>
> You aren't declaring your method as a method in the NAMESPACE file.? I 
> hadn't noticed a news item saying that the necessity for this had 
> changed, but it is definitely something you should do. Put this into 
> NAMESPACE:
>
> S3method(print, my1stclass)
>
> and it should be fine.
>
> Duncan Murdoch
>
>
>>
>> A similar problem has function plot, I don't show it here. It leads to
>> an error message, when plot.default and xy.coords cannot work with the
>> object for which the method was written. I guess that methods for
>> 'summary' and all other R base generics, written in a package as I did
>> it and attached with the library command would have the same problem in
>> R-devel 4.0. I did not try it. My questions are now:
>>
>> (1) Is action required or is it a bug in 4.0?
>> (2) Should I be more stringent, for e.g. using special directives in the
>> NAMESPACE file of the package? I did not.
>> (3) Should I change to S4? For e.g. Bioconductor package CGHbase (Mark
>> van de Wiel) contains S4 plot-methods for its objects.
>>
>> For whom it may be interesting the URL of my Bioconductor package:
>> http://bioconductor.org/checkResults/devel/bioc-LATEST/CFAssay/
>>
>> Herbert Braselmann
>> <http://bioconductor.org/checkResults/devel/bioc-LATEST/aCGH/>
>>
>
-- 
Abteilung Strahlenzytogenetik / Research Unit Radiation Cytogenetics
AG Integrative Biologie / Working group Integrative Biology
Tel./Phone: +49 89 3187-2878
  

 

Helmholtz Zentrum M?nchen


From ||or@@|@un@@gerber @end|ng |rom gm@||@com  Tue Nov 19 15:09:50 2019
From: ||or@@|@un@@gerber @end|ng |rom gm@||@com (Florian Gerber)
Date: Tue, 19 Nov 2019 07:09:50 -0700
Subject: [Rd] Why is matrix product slower when matrix has very small values?
Message-ID: <CA+6uv10Ok4o-2NRTBjqj_A3K6+_HG++3ss1k942eO279LixxHA@mail.gmail.com>

Hi,

I experience surprisingly large timing differences for the
multiplication of matrices of the same dimension. An example is given
below. How can this be explained?
I posted the question on Stackoverflow:
https://stackoverflow.com/questions/58886111/r-why-is-matrix-product-slower-when-matrix-has-very-small-values
Somebody could reproduce the behavior but I did not get any useful
explanations yet.

Many thanks for hints!
Florian

## disable openMP
library(RhpcBLASctl); blas_set_num_threads(1); omp_set_num_threads(1)

A <- exp(-as.matrix(dist(expand.grid(1:60, 1:60))))
summary(c(A))
#     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
# 0.000000 0.000000 0.000000 0.001738 0.000000 1.000000

B <- exp(-as.matrix(dist(expand.grid(1:60, 1:60)))*10)
summary(c(B))
#      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
# 0.0000000 0.0000000 0.0000000 0.0002778 0.0000000 1.0000000

identical(dim(A), dim(B))
## [1] TRUE

system.time(A %*% A)
#    user  system elapsed
#   2.387   0.001   2.389
system.time(B %*% B)
#    user  system elapsed
#  21.285   0.020  21.310

sessionInfo()
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-pc-linux-gnu (64-bit)
# Running under: Linux Mint 19.2

# Matrix products: default
# BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
# LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so


From berger @end|ng |rom mp||b-ber||n@mpg@de  Wed Nov 20 09:56:43 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Wed, 20 Nov 2019 09:56:43 +0100
Subject: [Rd] Why is matrix product slower when matrix has very small
 values?
In-Reply-To: <CA+6uv10Ok4o-2NRTBjqj_A3K6+_HG++3ss1k942eO279LixxHA@mail.gmail.com>
References: <CA+6uv10Ok4o-2NRTBjqj_A3K6+_HG++3ss1k942eO279LixxHA@mail.gmail.com>
Message-ID: <b4f9ff64-be86-13df-4f98-d3b179d1bae3@mpiib-berlin.mpg.de>

Hi Florian,

just a guess, but couldn't it be that the multiplication of very small 
values leads to FP underflow exceptions which have to be handled by BLAS 
in a less efficient way than "normal" multiplications handled by SIMD 
instructions ?

Best regards,
Hilmar

On 19/11/2019 15:09, Florian Gerber wrote:
> Hi,
>
> I experience surprisingly large timing differences for the
> multiplication of matrices of the same dimension. An example is given
> below. How can this be explained?
> I posted the question on Stackoverflow:
> https://stackoverflow.com/questions/58886111/r-why-is-matrix-product-slower-when-matrix-has-very-small-values
> Somebody could reproduce the behavior but I did not get any useful
> explanations yet.
>
> Many thanks for hints!
> Florian
>
> ## disable openMP
> library(RhpcBLASctl); blas_set_num_threads(1); omp_set_num_threads(1)
>
> A <- exp(-as.matrix(dist(expand.grid(1:60, 1:60))))
> summary(c(A))
> #     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
> # 0.000000 0.000000 0.000000 0.001738 0.000000 1.000000
>
> B <- exp(-as.matrix(dist(expand.grid(1:60, 1:60)))*10)
> summary(c(B))
> #      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
> # 0.0000000 0.0000000 0.0000000 0.0002778 0.0000000 1.0000000
>
> identical(dim(A), dim(B))
> ## [1] TRUE
>
> system.time(A %*% A)
> #    user  system elapsed
> #   2.387   0.001   2.389
> system.time(B %*% B)
> #    user  system elapsed
> #  21.285   0.020  21.310
>
> sessionInfo()
> # R version 3.6.1 (2019-07-05)
> # Platform: x86_64-pc-linux-gnu (64-bit)
> # Running under: Linux Mint 19.2
>
> # Matrix products: default
> # BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
> # LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Hilmar Berger, MD
Max Planck Institute for Infection Biology
Charit?platz 1
D-10117 Berlin
GERMANY

Phone:  + 49 30 28460 430
Fax:    + 49 30 28460 401
  
E-Mail: berger at mpiib-berlin.mpg.de
Web   : www.mpiib-berlin.mpg.de


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Wed Nov 20 10:14:44 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Wed, 20 Nov 2019 10:14:44 +0100
Subject: [Rd] Why is matrix product slower when matrix has very small
 values?
In-Reply-To: <b4f9ff64-be86-13df-4f98-d3b179d1bae3@mpiib-berlin.mpg.de>
References: <CA+6uv10Ok4o-2NRTBjqj_A3K6+_HG++3ss1k942eO279LixxHA@mail.gmail.com>
 <b4f9ff64-be86-13df-4f98-d3b179d1bae3@mpiib-berlin.mpg.de>
Message-ID: <0de9cebf-7a39-e48a-16f7-396b54b8e658@insa-toulouse.fr>

Le 20/11/2019 ? 09:56, Hilmar Berger a ?crit?:
> Hi Florian,
>
> just a guess, but couldn't it be that the multiplication of very small 
> values leads to FP underflow exceptions which have to be handled by 
> BLAS in a less efficient way than "normal" multiplications handled by 
> SIMD instructions ?
Another guess is that you are caught by what is called "denormal 
numbers" https://en.wikipedia.org/wiki/Denormal_number.
Arithmetic operations on them are different and slower that those on 
"normal" numbers.

Best,
Serguei.

>
> Best regards,
> Hilmar
>
> On 19/11/2019 15:09, Florian Gerber wrote:
>> Hi,
>>
>> I experience surprisingly large timing differences for the
>> multiplication of matrices of the same dimension. An example is given
>> below. How can this be explained?
>> I posted the question on Stackoverflow:
>> https://stackoverflow.com/questions/58886111/r-why-is-matrix-product-slower-when-matrix-has-very-small-values 
>>
>> Somebody could reproduce the behavior but I did not get any useful
>> explanations yet.
>>
>> Many thanks for hints!
>> Florian
>>
>> ## disable openMP
>> library(RhpcBLASctl); blas_set_num_threads(1); omp_set_num_threads(1)
>>
>> A <- exp(-as.matrix(dist(expand.grid(1:60, 1:60))))
>> summary(c(A))
>> #???? Min.? 1st Qu.?? Median???? Mean? 3rd Qu.???? Max.
>> # 0.000000 0.000000 0.000000 0.001738 0.000000 1.000000
>>
>> B <- exp(-as.matrix(dist(expand.grid(1:60, 1:60)))*10)
>> summary(c(B))
>> #????? Min.?? 1st Qu.??? Median????? Mean?? 3rd Qu.????? Max.
>> # 0.0000000 0.0000000 0.0000000 0.0002778 0.0000000 1.0000000
>>
>> identical(dim(A), dim(B))
>> ## [1] TRUE
>>
>> system.time(A %*% A)
>> #??? user? system elapsed
>> #?? 2.387?? 0.001?? 2.389
>> system.time(B %*% B)
>> #??? user? system elapsed
>> #? 21.285?? 0.020? 21.310
>>
>> sessionInfo()
>> # R version 3.6.1 (2019-07-05)
>> # Platform: x86_64-pc-linux-gnu (64-bit)
>> # Running under: Linux Mint 19.2
>>
>> # Matrix products: default
>> # BLAS:?? /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
>> # LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From morg@n@em@||box @end|ng |rom gm@||@com  Wed Nov 20 15:26:02 2019
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Wed, 20 Nov 2019 14:26:02 +0000
Subject: [Rd] Aggregate function FR
Message-ID: <CAL0QV_Pz8TJAJba5JvJJ=ey8L-+0jqt+z=GcUyNjAnFOgOFmNQ@mail.gmail.com>

Hi,

I was wondering if it would be possible to add an argument to the aggreagte
function to retain NA by categories?(default can not to in order to avoid
breaking code) Please see below example:

df = iris
df$Species[5] = NA
aggregate(`Petal.Width` ~ Species, df, sum) # does not include NA
aggregate(`Petal.Width` ~ addNA(Species), df, sum) # include NA

data.table and dplyr include NA by default.
Python pandas has an aggreagate function inspired by base R aggregate. An
option has been added to include NA.

Thank you
Best regards
Morgan

	[[alternative HTML version deleted]]


From @nto|ne@|@br| @end|ng |rom gm@||@com  Thu Nov 21 12:35:22 2019
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Thu, 21 Nov 2019 12:35:22 +0100
Subject: [Rd] `body<-` removes the class attributes
Message-ID: <CAEKh8uiXB4p06wpxriKh1JkLCuy7c-xKk9R-CZJiYj10vHUbvQ@mail.gmail.com>

Dear all,

`body<-` removes the class of the input function, it's undocumented and I
not what I would expect.

``` r
foo <- function() {1}
class(foo) <- "bar"
attr(foo, "class")
#> [1] "bar"
body(foo) <- 2
attr(foo, "class")
#> NULL
```

Best regards,

Antoine

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Nov 21 17:57:51 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 21 Nov 2019 17:57:51 +0100
Subject: [Rd] class(<matrix>) |--> c("matrix", "arrary") -- and S3 dispatch
In-Reply-To: <24014.53971.84201.964445@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
Message-ID: <24022.49679.656332.562828@stat.math.ethz.ch>


TLDR: This is quite technical, still somewhat important: 
     1)  R 4.0.0 will become a bit more coherent: a matrix is an array
     2)  Your package (or one you use) may be affected.


>>>>> Martin Maechler 
>>>>>     on Fri, 15 Nov 2019 17:31:15 +0100 writes:

>>>>> Pages, Herve 
>>>>>     on Thu, 14 Nov 2019 19:13:47 +0000 writes:

    >> On 11/14/19 05:47, Hadley Wickham wrote:
    >>> On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler ... wrote:

    [................]
    
    >>>>> Note again that both "matrix" and "array" are special [see ?class] as
    >>>>> being of  __implicit class__  and I am considering that this
    >>>>> implicit class behavior for these two should be slightly
    >>>>> changed ....
    >>>>> 
    >>>>> And indeed I think you are right on spot and this would mean
    >>>>> that indeed the implicit class
    >>>>> "matrix" should rather become c("matrix", "array").
    >>>> 
    >>>> I've made up my mind (and not been contradicted by my fellow R
    >>>> corers) to try go there for  R 4.0.0   next April.

    >>> I can't seem to find the previous thread, so would you mind being a
    >>> bit more explicit here? Do you mean adding "array" to the implicit
    >>> class?

    >> It's late in Europe ;-)

    >> That's my understanding. I think the plan is to have class(matrix()) 
    >> return c("matrix", "array"). No class attributes added to matrix or 
    >> array objects.

    >> It's all what is needed to have inherits(matrix(), "array") return TRUE 
    >> (instead of FALSE at the moment) and S3 dispatch pick up the foo.array 
    >> method when foo(matrix()) is called and there is no foo.matrix method.

    > Thank you, Herv?!  That's exactly the plan.

BUT it's wrong what I (and Peter and Herv? and ....) had assumed: 

If I just change the class
     (as I already did a few days ago, but you must activate the change 
      via environment variable, see below),

S3 dispatch does *NOT* at all pick it up:
"matrix" (and "array") are even more special here (see below),
and from Hadley's questions, in hindsight I now see that he's been aware
of that and I hereby apologize to Hadley for not having thought
and looked more, when he asked ..

Half an hour ago, I've done another source code commit (svn r77446),
to "R-devel" only, of course, and the R-devel NEWS now starts as

------------------------------------------------------------

CHANGES IN R-devel:

  USER-VISIBLE CHANGES:

    ?  .... intention that the next non-patch release should be 4.0.0.

    ? R now builds by default against a PCRE2 library ........
      ...................
      ...................

    ? For now only active when environment variable
      _R_CLASS_MATRIX_ARRAY_ is set to non-empty, but planned to be the
      new unconditional behavior when R 4.0.0 is released:

      Newly, matrix objects also inherit from class "array", namely,
      e.g., class(diag(1)) is c("matrix", "array") which invalidates
      code (wrongly) assuming that length(class(obj)) == 1, a wrong
      assumption that is less frequently fulfilled now.  (Currently
      only after setting _R_CLASS_MATRIX_ARRAY_ to non-empty.)

      S3 methods for "array", i.e., <someFun>.array(), are now also
      dispatched for matrix objects.

------------------------------------------------------------
(where only the very last 1.5 lines paragraph is new.)

Note the following
(if you use a version of R-devel, with svn rev >= 77446; which
 you may get as a binary for Windows in about one day; everyone
 else needs to compile for the sources .. or wait a bit, maybe
 also not much longer than one day, for a docker image) :


> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_") # ==> current R behavior
> class(m <- diag(1))
[1] "matrix"
> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !") # ==> future R behavior
> class(m)
[1] "matrix" "array" 
> 
> foo <- function(x) UseMethod("foo")
> foo.array <- function(x) "made in foo.array()"
> foo(m)
[1] "made in foo.array()"
> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_")# ==> current R behavior
> foo(m)
Error in UseMethod("foo") : 
  no applicable method for 'foo' applied to an object of class "c('matrix', 'double', 'numeric')"

> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = TRUE) # ==> future R behavior
> foo(m)
[1] "made in foo.array()"
> foo.A <- foo.array ; rm(foo.array)
> foo(m)
Error in UseMethod("foo") : 
  no applicable method for 'foo' applied to an object of class "c('matrix', 'array', 'double', 'numeric')"
> 

So, with my commit 77446, the  _R_CLASS_MATRIX_ARRAY_
environment variable also changes the 

   "S3 dispatch determining class"

mentioned as 'class' in the error message (of the two cases, old
and new) above,  which in R <= 3.6.x for a numeric matrix is

    c('matrix', 'double', 'numeric')

and from R 4.0.0 on  will be

    c('matrix', 'array', 'double', 'numeric')

Note that this is *not* (in R <= 3.6.x, nor very probably in R 4.0.0)
the same as  R's  class().
Hadley calls this long class vector the  'implicit class' -- which
is a good term but somewhat conflicting with R's (i.e. R-core's)
"definition" used in the  ?class  help page (for ca. 11 years).

R's internal C code has a nice function class R_data_class2()
which computes this 'S3-dispatch-class' character (vector) for
any R object, and R_data_class2() is indeed called from (the
underlying C function of)  R's UseMethod().

Using the above fact of an error message,
I wrote a nice (quite well tested) function  my.class2()  which
returns this S3_dispatch_class() also in current versions of R:

my.class2 <- function(x) { # use a fn name not used by any sane ..
    foo.7.3.343 <- function(x) UseMethod("foo.7.3.343")
    msg <- tryCatch(foo.7.3.343(x), error=function(e) e$message)
    clm <- sub('"$', '', sub(".* of class \"", '', msg))
    if(is.language(x) || is.function(x))
        clm
    else {
        cl <- str2lang(clm)
        if(is.symbol(cl)) as.character(cl) else eval(cl)
    }
}

## str2lang() needs R >= 3.6.0:
if(getRversion() < "3.6.0") ## substitute for str2lang(), good enough here:
    str2lang <- function(s) parse(text = s, keep.source=FALSE)[[1]]

  
Now you can look at such things yourself:

## --------------------- the "interesting" cases : ---
## integer and double
my.class2( pi) 	# == c("double",  "numeric")
my.class2(1:2) 	# == c("integer", "numeric")
## matrix and array [also combined with int / double ] :
my.class2(matrix(1L, 2,3))   	# == c(matrixCL, "integer", "numeric")  <<<
my.class2(matrix(pi, 2,3))   	# == c(matrixCL,  "double", "numeric")  <<<
my.class2(array("A", 2:3))   	# == c(matrixCL,  "character")          <<<
my.class2(array(1:24, 2:4))  	# == c("array",  "integer", "numeric")
my.class2(array( pi , 2:4))  	# == c("array",   "double", "numeric")
my.class2(array(TRUE, 2:4))  	# == c("array", "logical")
my.class2(array(letters, 2:4))	# == c("array", "character")
my.class2(array(1:24 + 1i, 2))	# == c("array", "complex")

## other cases
my.class2(NA) 	# == class(NA) : "logical"
my.class2("A") 	# == class("B"): "character"
my.class2(as.raw(0:2)) 	# == "raw"
my.class2(1 + 2i) 	# == "complex"
my.class2(USJudgeRatings)#== "data.frame"
my.class2(class) 	# == "function" # also for a primitive
my.class2(globalenv()) 	# == "environment"
my.class2(quote(sin(x)))# == "call"
my.class2(quote(sin) )  # == "name"
my.class2(quote({}))	# == class(*) == "{"
my.class2(quote((.)))	# == class(*) == "("

-----------------------------------------------------

note that of course, the lines marked "<<<" above, contain
'matrixCL'  which is "matrix" in "old" (i.e. current) R,
	    and is c("matrix", "array") in "new" (i.e. future) R.

Last but not least: It's quite trivial (only few words need to
be added to the sources; more to the documentation)  to add an R
function to base R which provides the same as my.class2() above,
(but much more efficiently, not via catching error messages !!),
and my current proposal for that function's name is  .class2()
{it should start with a dot ("."), as it's not for the simple
 minded average useR ... and you know how I'm happy with
 function names that do not need one single [Shift] key ...}

The current plan contains

1)  Notify CRAN package maintainers (ca 140) whose packages no
    longer pass R CMD check  when the feature is turned on
    (via setting the environment variable) in R-devel.

2a) (Some) CRAN team members set _R_CLASS_MATRIX_ARRAY_ (to non-empty),
    as part of the incoming checks, at least for all new CRAN submissions

2b) set the  _R_CLASS_MATRIX_ARRAY_ (to non-empty), as part of
    ' R CMD check --as-cran <pkg>'

3)  Before the end of 2019, change the R sources (for R-devel)
    such that it behaves as it behaves currently when the environment
    variable is set *AND* abolish this environment variable from
    the sources.  {read on to learn *why*}

Consequently (to 3), R 4.0.0 will behave as indicated, unconditionally.

Note that (as I've shown above in the first example set) this is
set up in such a manner that you can change the environment
variable during a *running* R session, and observe the effect immediately.
This however lead to some slow down of quite a bit of the R
code, because actually the environment variable has to be
checked quite often (easily dozens of times for simple R calls).

For that reason, we want to do "3)" as quickly as possible.

Please do not hesitate to ask or comment
-- here, not on Twitter, please --  noting that I'll be
basically offline for an extended weekend within 24h, now.

I hope this will eventually to lead to clean up and clarity in
R, and hence should be worth the pain of broken
back-compatibility and having to adapt your (almost always only
sub-optimally written ;-)) R code, 
see also my Blog   http://bit.ly/R_blog_class_think_2x

Martin Maechler
ETH Zurich and R Core team


From @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t  Thu Nov 21 19:07:16 2019
From: @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t (Saren Tasciyan)
Date: Thu, 21 Nov 2019 19:07:16 +0100
Subject: [Rd] Can't build R 3.6.1 or 3.5.3 on Ubuntu 18.04 LTS
Message-ID: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>

Hi,

I am trying to build a more recent version (3.6.1 or 3.5.3) of R on 
Ubuntu 18.04 LTS. I have installed build-deps with:

sudo apt-get build-dep r-base

and I ran ./configure

During "make", I get the following error:

platform.o: In function `do_eSoftVersion':
/home/user/Desktop/R-3.6.1/src/main/platform.c:3129: undefined reference 
to `u_getVersion_58'
/home/user/Desktop/R-3.6.1/src/main/platform.c:3130: undefined reference 
to `u_versionToString_58'
util.o: In function `resetICUcollator':
/home/user/Desktop/R-3.6.1/src/main/util.c:2025: undefined reference to 
`ucol_close_58'
util.o: In function `do_ICUset':
/home/user/Desktop/R-3.6.1/src/main/util.c:2103: undefined reference to 
`ucol_close_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2136: undefined reference to 
`ucol_setStrength_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2111: undefined reference to 
`uloc_setDefault_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2115: undefined reference to 
`ucol_open_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2112: undefined reference to 
`uloc_setDefault_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2138: undefined reference to 
`ucol_setAttribute_58'
util.o: In function `do_ICUget':
/home/user/Desktop/R-3.6.1/src/main/util.c:2161: undefined reference to 
`ucol_getLocaleByType_58'
util.o: In function `Rf_Scollate':
/home/user/Desktop/R-3.6.1/src/main/util.c:2219: undefined reference to 
`uiter_setUTF8_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2220: undefined reference to 
`uiter_setUTF8_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2222: undefined reference to 
`ucol_strcollIter_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2200: undefined reference to 
`uloc_setDefault_58'
/home/user/Desktop/R-3.6.1/src/main/util.c:2203: undefined reference to 
`ucol_open_58'
collect2: error: ld returned 1 exit status
Makefile:145: recipe for target 'R.bin' failed
make[3]: *** [R.bin] Error 1
make[3]: Leaving directory '/home/user/Desktop/R-3.6.1/src/main'
Makefile:137: recipe for target 'R' failed
make[2]: *** [R] Error 2
make[2]: Leaving directory '/home/user/Desktop/R-3.6.1/src/main'
Makefile:28: recipe for target 'R' failed
make[1]: *** [R] Error 1
make[1]: Leaving directory '/home/user/Desktop/R-3.6.1/src'
Makefile:60: recipe for target 'R' failed
make: *** [R] Error 1

I found some suggestiong related to libicu* libraries, but I have those 
libs insalled.

Any ideas, where this is failing?

Best,

SarenT




From pd@|gd @end|ng |rom gm@||@com  Fri Nov 22 15:04:12 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 22 Nov 2019 15:04:12 +0100
Subject: [Rd] Can't build R 3.6.1 or 3.5.3 on Ubuntu 18.04 LTS
In-Reply-To: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
References: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
Message-ID: <2E9AAE19-84D0-4CF9-8C3B-638390F4E3FA@gmail.com>

Pure guessing, but a frequent way to get the "have libs, still won't build" syndrome on Linux variants is not having installed the corresponding -dev or -devel package.

-pd

> On 21 Nov 2019, at 19:07 , Saren Tasciyan <saren.tasciyan at ist.ac.at> wrote:
> 
> Hi,
> 
> I am trying to build a more recent version (3.6.1 or 3.5.3) of R on Ubuntu 18.04 LTS. I have installed build-deps with:
> 
> sudo apt-get build-dep r-base
> 
> and I ran ./configure
> 
> During "make", I get the following error:
> 
> platform.o: In function `do_eSoftVersion':
> /home/user/Desktop/R-3.6.1/src/main/platform.c:3129: undefined reference to `u_getVersion_58'
> /home/user/Desktop/R-3.6.1/src/main/platform.c:3130: undefined reference to `u_versionToString_58'
> util.o: In function `resetICUcollator':
> /home/user/Desktop/R-3.6.1/src/main/util.c:2025: undefined reference to `ucol_close_58'
> util.o: In function `do_ICUset':
> /home/user/Desktop/R-3.6.1/src/main/util.c:2103: undefined reference to `ucol_close_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2136: undefined reference to `ucol_setStrength_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2111: undefined reference to `uloc_setDefault_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2115: undefined reference to `ucol_open_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2112: undefined reference to `uloc_setDefault_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2138: undefined reference to `ucol_setAttribute_58'
> util.o: In function `do_ICUget':
> /home/user/Desktop/R-3.6.1/src/main/util.c:2161: undefined reference to `ucol_getLocaleByType_58'
> util.o: In function `Rf_Scollate':
> /home/user/Desktop/R-3.6.1/src/main/util.c:2219: undefined reference to `uiter_setUTF8_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2220: undefined reference to `uiter_setUTF8_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2222: undefined reference to `ucol_strcollIter_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2200: undefined reference to `uloc_setDefault_58'
> /home/user/Desktop/R-3.6.1/src/main/util.c:2203: undefined reference to `ucol_open_58'
> collect2: error: ld returned 1 exit status
> Makefile:145: recipe for target 'R.bin' failed
> make[3]: *** [R.bin] Error 1
> make[3]: Leaving directory '/home/user/Desktop/R-3.6.1/src/main'
> Makefile:137: recipe for target 'R' failed
> make[2]: *** [R] Error 2
> make[2]: Leaving directory '/home/user/Desktop/R-3.6.1/src/main'
> Makefile:28: recipe for target 'R' failed
> make[1]: *** [R] Error 1
> make[1]: Leaving directory '/home/user/Desktop/R-3.6.1/src'
> Makefile:60: recipe for target 'R' failed
> make: *** [R] Error 1
> 
> I found some suggestiong related to libicu* libraries, but I have those libs insalled.
> 
> Any ideas, where this is failing?
> 
> Best,
> 
> SarenT
> 
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jeroenoom@ @end|ng |rom gm@||@com  Fri Nov 22 16:12:17 2019
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Fri, 22 Nov 2019 16:12:17 +0100
Subject: [Rd] Can't build R 3.6.1 or 3.5.3 on Ubuntu 18.04 LTS
In-Reply-To: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
References: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
Message-ID: <CABFfbXtXERjJoOFadiu4oKRqbopXsPrkqDsj=+EA_AtYrao_gg@mail.gmail.com>

On Fri, Nov 22, 2019 at 2:58 PM Saren Tasciyan <saren.tasciyan at ist.ac.at> wrote:
>
> Hi,
>
> I am trying to build a more recent version (3.6.1 or 3.5.3) of R on
> Ubuntu 18.04 LTS.

Are you aware you can get up-to-date binaries either from PPA or CRAN:

  sudo add-apt-repository ppa:marutter/rrutter
  sudo apt-get install r-base-dev

> and I ran ./configure
> During "make", I get the following error:
> platform.o: In function `do_eSoftVersion':
> /home/user/Desktop/R-3.6.1/src/main/platform.c:3129: undefined reference
> to `u_getVersion_58'

Such linking errors indicate you are not linking against the correct
library that you compiled against. In this case, there seems to be a
version conflict because you compiled against version 58 of ICU, but
Ubuntu Bionic actually has ICU60:
https://packages.ubuntu.com/bionic/libicu-dev

So the question is how do you end up with ICU58 headers? I am guessing
your either installed a custom libicu in /usr/local/, or you upgraded
from an older version of ubuntu but haven't upgraded libicu-dev.
Either way the solution is to clean up your system and make sure there
is only one version of libicu.


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Nov 22 21:25:42 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 22 Nov 2019 12:25:42 -0800
Subject: [Rd] 
 Patch idea: an environment variable for setting the user ID
In-Reply-To: <CAC-MUvuMTiXDAN1ES9Uk9vAatX=rV5g2V4+PV9DQu1dq_GqMdg@mail.gmail.com>
References: <CAC-MUvuBmqs31FX2Hv6w2RD7H7bmwXbV9kdWEEHVmzKLZvK+aA@mail.gmail.com>
 <23529.12236.875063.74972@hornik.net>
 <CAC-MUvuMTiXDAN1ES9Uk9vAatX=rV5g2V4+PV9DQu1dq_GqMdg@mail.gmail.com>
Message-ID: <CAFDcVCSwMMMi1XGtEME82LHH5z7xfb5S3hrHaTkc0F4XeuuhHg@mail.gmail.com>

Another thing to consider if one wants to anonymize the build is the
UID/GID of the files in the tarball.  So there might be a need for a
R_BUILD_UID and R_BUILD_GID, e.g. by setting those to 32767
("nobody").

/Henrik

On Fri, Jan 25, 2019 at 9:25 AM Will L <will.landau at gmail.com> wrote:
>
> Thanks, Kurt.
>
> I think I now have enough time to write a patch. What are the steps? I have
> read https://www.r-project.org/bugs.html#how-to-submit-patches but I do not
> seem to have permission to create a Bugzilla account at
> https://bugs.r-project.org/bugzilla/.
>
> Will
>
>
> On Mon, Nov 12, 2018 at 2:46 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
>
> > >>>>> Will L writes:
> >
> > > To R-devel,
> > > In `R CMD build`, the ID of the user is automatically inserted into the
> > > DESCRIPTION file, e.g.
> >
> > > Packaged: 2018-11-06 14:01:50 UTC; <MY USER ID>
> >
> >
> > > This is problematic for those of us who work in corporate settings. We
> > must
> > > not divulge our user IDs in the packages we develop and release.
> >
> > > Jim Hester pointed out that these two lines in
> > > `add_build_stamp_to_description_file()`
> > > <
> > https://github.com/wch/r-source/blob/521c90a175d67475b9f1b43d7ae68bc48062d8e6/src/library/tools/R/build.R#L170-L171
> > >
> > > are responsible. Could we consider his suggestion of using an optional
> > > environment variable to overwrite the default behavior?
> >
> > > user <- Sys.getenv("R_BUILD_USERNAME")
> > > if (!nzchar(user)) user <- Sys.info()["user"]
> > > if(user == "unknown") user <- Sys.getenv("LOGNAME")
> >
> > Yep, something along these lines should be possible.
> > R_BUILD_USER or R_BUILD_LOGNAME may seem more natural though ...
> >
> > Best
> > -k
> >
> >
> >
> > > Will Landau
> > > --
> > > wlandau.github.io
> > > linkedin.com/in/wlandau
> > > github.com/wlandau
> >
> > >       [[alternative HTML version deleted]]
> >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>
> --
> wlandau.github.io
> linkedin.com/in/wlandau
> github.com/wlandau
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From toth@dene@ @end|ng |rom kogentum@hu  Sat Nov 23 00:58:11 2019
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Sat, 23 Nov 2019 00:58:11 +0100
Subject: [Rd] 
 Patch idea: an environment variable for setting the user ID
In-Reply-To: <CAFDcVCSwMMMi1XGtEME82LHH5z7xfb5S3hrHaTkc0F4XeuuhHg@mail.gmail.com>
References: <CAC-MUvuBmqs31FX2Hv6w2RD7H7bmwXbV9kdWEEHVmzKLZvK+aA@mail.gmail.com>
 <23529.12236.875063.74972@hornik.net>
 <CAC-MUvuMTiXDAN1ES9Uk9vAatX=rV5g2V4+PV9DQu1dq_GqMdg@mail.gmail.com>
 <CAFDcVCSwMMMi1XGtEME82LHH5z7xfb5S3hrHaTkc0F4XeuuhHg@mail.gmail.com>
Message-ID: <096d4dc1-ab40-77bd-1224-d43684ac80a0@kogentum.hu>

Maybe a further thing to consider is to introduce an environment 
variable by which one can avoid `add_build_stamp_to_description_file()` 
and any other calls altogether which affect bitwise reproducibility 
during the build process. If two users build the same package on exactly 
the same hardware and in the same software environment, the tarballs are 
expected to be identical. This is not the case now.

Denes

On 11/22/19 9:25 PM, Henrik Bengtsson wrote:
> Another thing to consider if one wants to anonymize the build is the
> UID/GID of the files in the tarball.  So there might be a need for a
> R_BUILD_UID and R_BUILD_GID, e.g. by setting those to 32767
> ("nobody").
> 
> /Henrik
> 
> On Fri, Jan 25, 2019 at 9:25 AM Will L <will.landau at gmail.com> wrote:
>>
>> Thanks, Kurt.
>>
>> I think I now have enough time to write a patch. What are the steps? I have
>> read https://www.r-project.org/bugs.html#how-to-submit-patches but I do not
>> seem to have permission to create a Bugzilla account at
>> https://bugs.r-project.org/bugzilla/.
>>
>> Will
>>
>>
>> On Mon, Nov 12, 2018 at 2:46 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
>>
>>>>>>>> Will L writes:
>>>
>>>> To R-devel,
>>>> In `R CMD build`, the ID of the user is automatically inserted into the
>>>> DESCRIPTION file, e.g.
>>>
>>>> Packaged: 2018-11-06 14:01:50 UTC; <MY USER ID>
>>>
>>>
>>>> This is problematic for those of us who work in corporate settings. We
>>> must
>>>> not divulge our user IDs in the packages we develop and release.
>>>
>>>> Jim Hester pointed out that these two lines in
>>>> `add_build_stamp_to_description_file()`
>>>> <
>>> https://github.com/wch/r-source/blob/521c90a175d67475b9f1b43d7ae68bc48062d8e6/src/library/tools/R/build.R#L170-L171
>>>>
>>>> are responsible. Could we consider his suggestion of using an optional
>>>> environment variable to overwrite the default behavior?
>>>
>>>> user <- Sys.getenv("R_BUILD_USERNAME")
>>>> if (!nzchar(user)) user <- Sys.info()["user"]
>>>> if(user == "unknown") user <- Sys.getenv("LOGNAME")
>>>
>>> Yep, something along these lines should be possible.
>>> R_BUILD_USER or R_BUILD_LOGNAME may seem more natural though ...
>>>
>>> Best
>>> -k
>>>
>>>
>>>
>>>> Will Landau
>>>> --
>>>> wlandau.github.io
>>>> linkedin.com/in/wlandau
>>>> github.com/wlandau
>>>
>>>>        [[alternative HTML version deleted]]
>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>>
>> --
>> wlandau.github.io
>> linkedin.com/in/wlandau
>> github.com/wlandau
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |uke-t|erney @end|ng |rom u|ow@@edu  Sun Nov 24 15:30:01 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Sun, 24 Nov 2019 14:30:01 +0000
Subject: [Rd] switch to reference counting in R-devel
Message-ID: <alpine.OSX.2.21.1911240826360.566@macbook-air-5.local>

Baring any unforeseen issues R-devel will switch in about a week from
the NAMED mechanism to reference counting for determining when objects
can be safely mutated in base C code. This is expected to have minimal
impact on packages not using unsupported coding practices in their C
code.


The transition to reference counting has been in progress for a
number of years. Some older notes on this are available at
http://developer.r-project.org/Refcnt.html.  These may no longer be
completely accurate but should give you an idea of what is going on.

If you want to test your package under reference counting you can do
so by building R with -DSWITCH_TO_REFCNT added to CFLAGS or DEFS in a
config.site file.

A small number of packages are still using the NAMED or SET_NAMED
functions even though this has been discouraged for some  time.
For now these will not produce errors but also not do anything useful.
They will probably be removed before R 4.0.0 is released, so you
should look at why you are using them and adjust accordingly.

Best,

luke


-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pd@|gd @end|ng |rom gm@||@com  Sun Nov 24 15:48:15 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 24 Nov 2019 15:48:15 +0100
Subject: [Rd] switch to reference counting in R-devel
In-Reply-To: <alpine.OSX.2.21.1911240826360.566@macbook-air-5.local>
References: <alpine.OSX.2.21.1911240826360.566@macbook-air-5.local>
Message-ID: <7202C418-5290-43C5-98EC-046C0279DA53@gmail.com>


> On 24 Nov 2019, at 15:30 , Tierney, Luke <luke-tierney at uiowa.edu> wrote:
> 
> Baring any unforeseen issues 

Freudian slip, if ever I saw one....

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t  Sun Nov 24 22:24:15 2019
From: @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t (Saren Tasciyan)
Date: Sun, 24 Nov 2019 22:24:15 +0100
Subject: [Rd] Can't build R 3.6.1 or 3.5.3 on Ubuntu 18.04 LTS
In-Reply-To: <CABFfbXtXERjJoOFadiu4oKRqbopXsPrkqDsj=+EA_AtYrao_gg@mail.gmail.com>
References: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
 <CABFfbXtXERjJoOFadiu4oKRqbopXsPrkqDsj=+EA_AtYrao_gg@mail.gmail.com>
Message-ID: <46589d2a-999c-a2e6-75c2-ee37ca43a7db@ist.ac.at>

Hi,

Yes I am aware of it.

And yes, I have libicu60 installed. Is it the configure script making a 
mistake?

Best,

Saren

On 11/22/19 4:12 PM, Jeroen Ooms wrote:
> On Fri, Nov 22, 2019 at 2:58 PM Saren Tasciyan <saren.tasciyan at ist.ac.at> wrote:
>> Hi,
>>
>> I am trying to build a more recent version (3.6.1 or 3.5.3) of R on
>> Ubuntu 18.04 LTS.
> Are you aware you can get up-to-date binaries either from PPA or CRAN:
>
>    sudo add-apt-repository ppa:marutter/rrutter
>    sudo apt-get install r-base-dev
>
>> and I ran ./configure
>> During "make", I get the following error:
>> platform.o: In function `do_eSoftVersion':
>> /home/user/Desktop/R-3.6.1/src/main/platform.c:3129: undefined reference
>> to `u_getVersion_58'
> Such linking errors indicate you are not linking against the correct
> library that you compiled against. In this case, there seems to be a
> version conflict because you compiled against version 58 of ICU, but
> Ubuntu Bionic actually has ICU60:
> https://packages.ubuntu.com/bionic/libicu-dev
>
> So the question is how do you end up with ICU58 headers? I am guessing
> your either installed a custom libicu in /usr/local/, or you upgraded
> from an older version of ubuntu but haven't upgraded libicu-dev.
> Either way the solution is to clean up your system and make sure there
> is only one version of libicu.


From edd @end|ng |rom deb|@n@org  Mon Nov 25 17:54:37 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 25 Nov 2019 10:54:37 -0600
Subject: [Rd] Can't build R 3.6.1 or 3.5.3 on Ubuntu 18.04 LTS
In-Reply-To: <46589d2a-999c-a2e6-75c2-ee37ca43a7db@ist.ac.at>
References: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
 <CABFfbXtXERjJoOFadiu4oKRqbopXsPrkqDsj=+EA_AtYrao_gg@mail.gmail.com>
 <46589d2a-999c-a2e6-75c2-ee37ca43a7db@ist.ac.at>
Message-ID: <24028.1869.667064.975604@rob.eddelbuettel.com>


On 24 November 2019 at 22:24, Saren Tasciyan wrote:
| Yes I am aware of it.

So why not use them?
 
| And yes, I have libicu60 installed. Is it the configure script making a 
| mistake?

Err, no. The configure setup is as solid as they come.  But as Peter already
said: "have lib$FOO installed" often means having the _run-time_ library.
Yet to _build_, you also need the -dev package.

You could subscribe to the r-sig-debian list and we can walk you through all
of this there.  It is a pretty friendly low-volume low-noise list. This list
is not the best place for your questions.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t  Mon Nov 25 17:58:44 2019
From: @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t (Saren Tasciyan)
Date: Mon, 25 Nov 2019 17:58:44 +0100
Subject: [Rd] Can't build R 3.6.1 or 3.5.3 on Ubuntu 18.04 LTS
In-Reply-To: <24028.1869.667064.975604@rob.eddelbuettel.com>
References: <9dde45e3-4aff-642a-4e42-218a8b8f0a6a@ist.ac.at>
 <CABFfbXtXERjJoOFadiu4oKRqbopXsPrkqDsj=+EA_AtYrao_gg@mail.gmail.com>
 <46589d2a-999c-a2e6-75c2-ee37ca43a7db@ist.ac.at>
 <24028.1869.667064.975604@rob.eddelbuettel.com>
Message-ID: <07f3b6b3-d911-795b-162a-6f50f3538442@ist.ac.at>


On 11/25/19 5:54 PM, Dirk Eddelbuettel wrote:
> On 24 November 2019 at 22:24, Saren Tasciyan wrote:
> | Yes I am aware of it.
>
> So why not use them?
I did at the end. But one might be maybe paranoid, maybe develop R, 
maybe this is what open source means
>   
> | And yes, I have libicu60 installed. Is it the configure script making a
> | mistake?
>
> Err, no. The configure setup is as solid as they come.  But as Peter already
> said: "have lib$FOO installed" often means having the _run-time_ library.
> Yet to _build_, you also need the -dev package.
>
> You could subscribe to the r-sig-debian list and we can walk you through all
> of this there.  It is a pretty friendly low-volume low-noise list. This list
> is not the best place for your questions.
Sure thanks a lot. I will join there. Actually, problem was with ggpubr, 
which required a more recent version of R. Then I thought compiling was 
the only option and got into this mess. Finally, I found binaries from 
CRAN. But I wanted to report the issue to help with development.
>
> Dirk
>


From edd @end|ng |rom deb|@n@org  Mon Nov 25 18:01:14 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 25 Nov 2019 11:01:14 -0600
Subject: [Rd] 
 class(<matrix>) |--> c("matrix", "arrary") -- and S3 dispatch
In-Reply-To: <24022.49679.656332.562828@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
 <24022.49679.656332.562828@stat.math.ethz.ch>
Message-ID: <24028.2266.688971.570663@rob.eddelbuettel.com>


On 21 November 2019 at 17:57, Martin Maechler wrote:
| (if you use a version of R-devel, with svn rev >= 77446; which
|  you may get as a binary for Windows in about one day; everyone
|  else needs to compile for the sources .. or wait a bit, maybe
|  also not much longer than one day, for a docker image) :

FYI: rocker/drd [1] and rocker/r-devel both have rev 77455 now (as they are
both on weekend auto-rebuild schedule).  The former is smaller, both should
work to test this. Quick demo below [2].

Dirk

[1] This comes from 'drd == daily r-devel' but we do not build it daily.
[2] Quick demo follows

edd at rob:~$ docker run --rm -ti rocker/r-devel bash
root at a30e4a5c89ba:/# RD

R Under development (unstable) (2019-11-23 r77455) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !") # ==> future R behavior
> class(m <- diag(1))
[1] "matrix" "array" 
> 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From j@goreck| @end|ng |rom w|t@edu@p|  Mon Nov 25 19:49:46 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Tue, 26 Nov 2019 00:19:46 +0530
Subject: [Rd] 
 class(<matrix>) |--> c("matrix", "arrary") -- and S3 dispatch
In-Reply-To: <24028.2266.688971.570663@rob.eddelbuettel.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
 <24022.49679.656332.562828@stat.math.ethz.ch>
 <24028.2266.688971.570663@rob.eddelbuettel.com>
Message-ID: <CAOO9MKW4d6mrpgFR4tAeRFOFt-3B0Q39xvv7tRc+kY2nUCJZow@mail.gmail.com>

In case if anyone needs daily R-devel there is my build scheduled on GitLab.
As of now based on Ubuntu 16.04, R built using:
--with-recommended-packages --enable-strict-barrier
--disable-long-double
Predefined Makevars for building pkgs using: -g -O2 -Wall -pedantic
-fstack-protector-strong -D_FORTIFY_SOURCE=2

$ docker run --rm -ti registry.gitlab.com/jangorecki/dockerfiles/r-devel:latest
R Under development (unstable) (2019-11-23 r77455) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !")
> class(m <- diag(1))
[1] "matrix" "array"

On Mon, Nov 25, 2019 at 10:31 PM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 21 November 2019 at 17:57, Martin Maechler wrote:
> | (if you use a version of R-devel, with svn rev >= 77446; which
> |  you may get as a binary for Windows in about one day; everyone
> |  else needs to compile for the sources .. or wait a bit, maybe
> |  also not much longer than one day, for a docker image) :
>
> FYI: rocker/drd [1] and rocker/r-devel both have rev 77455 now (as they are
> both on weekend auto-rebuild schedule).  The former is smaller, both should
> work to test this. Quick demo below [2].
>
> Dirk
>
> [1] This comes from 'drd == daily r-devel' but we do not build it daily.
> [2] Quick demo follows
>
> edd at rob:~$ docker run --rm -ti rocker/r-devel bash
> root at a30e4a5c89ba:/# RD
>
> R Under development (unstable) (2019-11-23 r77455) -- "Unsuffered Consequences"
> Copyright (C) 2019 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
>   Natural language support but running in an English locale
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
> > Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !") # ==> future R behavior
> > class(m <- diag(1))
> [1] "matrix" "array"
> >
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From btyner @end|ng |rom gm@||@com  Tue Nov 26 04:34:33 2019
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Mon, 25 Nov 2019 22:34:33 -0500
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
In-Reply-To: <e33fad79-22ac-cd00-ab47-7ad939544436@gmail.com>
References: <e33fad79-22ac-cd00-ab47-7ad939544436@gmail.com>
Message-ID: <e5560820-c958-877f-a5b5-0cd41d2e527c@gmail.com>

For what it's worth, the current behavior seems to have begun starting 
with version 3.6.0. If I run in version 3.5.3:

 > p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- 1 ; p2
function (e1, e2)? .Primitive("+")


> On 11/18/19 10:45 AM, Martin Maechler wrote:
> >>>>>>/Tomas Kalibera />>>>>>/on Mon, 18 Nov 2019 09:36:14 +0100 writes: />/> On 11/18/19 9:18 AM, Martin Maechler wrote: />/>>>>>>> Henrik Bengtsson />/>>>>>>> on Sun, 17 Nov 2019 14:31:07 -0800 writes: />/>> > $ R --vanilla R version 3.6.1 (2019-07-05) -- "Action of />/>> > the Toes" Copyright (C) 2019 The R Foundation for />/>> > Statistical Computing Platform: x86_64-pc-linux-gnu />/>> > (64-bit) ... />/>> />/>> >> str(base::`+`) />/>> > function (e1, e2) />/>> />/>> >> plus <- structure(base::`+`, class = "plus") str(plus) />/>> > function (e1, e2) - attr(*, "class")= chr "plus" />/>> />/>> > ## Hmm ... />/>> >> str(base::`+`) />/>> > function (e1, e2) - attr(*, "class")= chr "plus" />/>> />/>> >> class(base::`+`) <- NULL str(base::`+`) />/>> > function (e1, e2) />/>> />/>> > ## Hmm ... />/>> >> str(plus) />/>> > function (e1, e2) />/>> />/>> > Even without assigning to `plus`, you get this behavior: />/>> />/>> > $ R --vanilla />/>> >> structure(base::`+`, class = "plus") />/>> > function (e1, e2) .Primitive("+") attr(,"class") [1] />/>> > "plus" />/>> />/>> > # Hmm... />/>> >> str(base::`+`) />/>> > function (e1, e2) - attr(*, "class")= chr "plus" />/>> />/>> > Looks to be the case for common (all?) .Primitive />/>> > functions. />/>> />/>> No need for 'base::' (who would be crazy enough to redefine `+`?) />/>> nor str() actually: />/>> />/>> attr(`+`, "class") <- NULL # (reset) />/>> `+` />/>> structure(`+`, class = "plus") />/>> `+` />/>> />/>> is clearly convincing and minimal />/>> />/>>> attr(`+`, "class") <- NULL />/>>> `+` />/>> function (e1, e2) .Primitive("+") />/>>> structure(`+`, class = "plus") />/>> function (e1, e2) .Primitive("+") />/>> attr(,"class") />/>> [1] "plus" />/>>> `+` />/>> function (e1, e2) .Primitive("+") />/>> attr(,"class") />/>> [1] "plus" />/>> --------------------------------------------------------- />/>> />/>> > Is this expected? />/>> />/>> no. (at least not by 99.999% of R users) />/>> />/>> />/>> > Should I report this one to Bugzilla? />/>> yes, please. />/>> />/>> > /Henrik />//>/> A shorter example is />//>/>> p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- 1 ; p2 />//>/> function (e1, e2)? .Primitive("+") />/> attr(,"myattr") />/> [1] 1 />//>/beautiful ; thank you, Tomas ! />//>/> Builtins have referential semantics in R (like e.g. environments, but />/> also some other types). />//>/> Tomas />//>/[aarh.. I knew it ... but am showing my age: I had forgotten about it.] />//>/I forget (and don't have time just now to find out) where we />/have documented it; it may be good to document also in official />/user exposed places such say the ?.Primitive help page. /
> I think internal objects such as builtins should never be modified by
> user code in the first place. We had to add detection for modifications
> of NIL and symbols in the past, maybe we will have to do it for builtins
> as well.
>
> Environments can be used in user code as objects with referential
> semantics, e.g. to keep mutable state.
>
> Tomas
> >//>/Martin /


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Nov 26 09:00:27 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 26 Nov 2019 09:00:27 +0100
Subject: [Rd] BUG?: A copy of base::`+` (primitive) is not a clone but a
 "pointer"
In-Reply-To: <e5560820-c958-877f-a5b5-0cd41d2e527c@gmail.com>
References: <e33fad79-22ac-cd00-ab47-7ad939544436@gmail.com>
 <e5560820-c958-877f-a5b5-0cd41d2e527c@gmail.com>
Message-ID: <24028.56219.587473.868323@stat.math.ethz.ch>

>>>>> Benjamin Tyner 
>>>>>     on Mon, 25 Nov 2019 22:34:33 -0500 writes:

    > For what it's worth, the current behavior seems to have begun starting 
    > with version 3.6.0. If I run in version 3.5.3:

    >> p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- 1 ; p2

    > function (e1, e2)? .Primitive("+")

No.  What changed was just the *printing* !
(still in R 3.5.x) :

> p1 <- .Primitive('+') ; p2 <- p1 ; attr(p1, "myattr") <- pi ; attributes(p2)
$myattr
[1] 3.141593

>


From r-deve| @end|ng |rom @ker@t|ng@de  Wed Nov 27 12:10:27 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 27 Nov 2019 12:10:27 +0100 (CET)
Subject: [Rd] error in parallel:::sendMaster
Message-ID: <E1iZvDH-0002Zc-E6@rmmprod05.runbox>

Hi,

I am facing a very weird problem with parallel::mclapply. I have a script which does some data wrangling on an input dataset in parallel and then writes the results to disk. I have been using this script daily for more than one year always on an EC2 instance launched from the same AMI (no updates installed after launch) and processed thousands of different input data sets successfully. I now have an input dataset for which I face the following bug:

The basic outline of the problematic section of the script:

# parts is a data.table with 88 rows
mc_ret <- parallel::mclapply(sample.int(nrow(parts)), function(i) {
  # do some data wrangling and write the result to a file
  # ...

  print(paste0("part ", i, " written successfully."))
  return(TRUE)
}, mc.preschedule = FALSE, mc.cores = 2L)

str(mc_ret)


Expected output: "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed once. All outputs are created successfully.

Actual output (see end of the message): "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed. All outputs are created successfully. So far so good.

But then "part i written successfully." it is printed another X times, for values of i for which it was already printed. This output is intermingled with X-1 times the following error message:

Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster

and Y times the message "Execution halted". mc_ret is printed again, now being a list of length 85, with the first element being TRUE and all other elements being NULL. X and Y vary from run to run.


Now to the main problem: I tried very hard to create a reproducible example, but I failed. What I observed:
- The output is (and has always been) written to path which is on an NFS share. If I instead write to a path on a local disk it will work.
- The script is invoked using Rscript. If I instead source it from an interactive R session it works. There are at least two more people who have observed this: https://stackoverflow.com/questions/51986674/mclapply-sendmaster-error-only-with-rscript
- Before the call to mclapply the code acquires an exclusive file lock on a dedicated lock file, not written to but also on the NFS share. If I remove the code acquiring the lock, the whole script will also work if called using Rscript.
- The problem also occurs for mc.preschedule = TRUE.
- There is no error if I set mc.cores to 1.
- And stressing again: the code works without any changes from Rscript for thousands of other data sets.


Rscript -e "sessionInfo()":
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.2 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2


I know this is a fairly old R version. I have not been able to reproduce the bug with a more recent version, but since it is so difficult to trigger, this does not mean much, I guess. I have looked through the changes made to the code of mclapply since that version and could not find something directly related. I am not even sure if it is a problem in the parallel package or some other (memory) bug. What strikes me is that others have observed a very similar error when using Rscript but not when using an interactive R session, just like I do.

I am not expecting a fix based on the information I provide, but maybe someone has some thoughts on this!?

Regards,
Andreas




Actual output:

[1] "part 51 written successfully."
[1] "part 30 written successfully."
[1] "part 32 written successfully."
[1] "part 48 written successfully."
[1] "part 63 written successfully."
[1] "part 5 written successfully."
[1][1] "part 14 written successfully." "part 18 written successfully."

[1] "part 38 written successfully."
[1] "part 11 written successfully."
[1] "part 68 written successfully."
[1] "part 45 written successfully."
[1] "part 88 written successfully."
[1] "part 36 written successfully."
[1] "part 44 written successfully."
[1] "part 55 written successfully."
[1] "part 26 written successfully."
[1] "part 37 written successfully."
[1] "part 22 written successfully."
[1] "part 13 written successfully."
[1] "part 67 written successfully."
[1] "part 10 written successfully."
[1] "part 24 written successfully."
[1] "part 20 written successfully."
[1] "part 74 written successfully."
[1] "part 50 written successfully."
[1] "part 2 written successfully."
[1] "part 17 written successfully."
[1] "part 66 written successfully."
[1] "part 61 written successfully."
[1][1] "part 7 written successfully." "part 31 written successfully."

[1] "part 70 written successfully."
[1] "part 71 written successfully."
[1][1] "part 76 written successfully."
 "part 42 written successfully."
[1][1] "part 72 written successfully." "part 12 written successfully."

[1] "part 39 written successfully."
[1] "part 58 written successfully."
[1] "part 87 written successfully."
[1] "part 81 written successfully."
[1] "part 3 written successfully."
[1] "part 29 written successfully."
[1] "part 82 written successfully."
[1] "part 54 written successfully."
[1] "part 23 written successfully."
[1] "part 56 written successfully."
[1] "part 73 written successfully."
[1] "part 27 written successfully."
[1] "part 64 written successfully."
[1] "part 46 written successfully."
[1] "part 80 written successfully."
[1] "part 53 written successfully."
[1] "part 43 written successfully."
[1] "part 47 written successfully."
[1] "part 57 written successfully."
[1] "part 75 written successfully."
[1] "part 84 written successfully."
[1] "part 85 written successfully."
[1][1] "part 86 written successfully."
 "part 19 written successfully."
[1][1] "part 33 written successfully." "part 34 written successfully."

[1] "part 21 written successfully."
[1] "part 40 written successfully."
[1][1] "part 4 written successfully."
 "part 28 written successfully."
[1] "part 62 written successfully."
[1] "part 16 written successfully."
[1] "part 79 written successfully."
[1] "part 6 written successfully."
[1] "part 77 written successfully."
[1] "part 65 written successfully."
[1] "part 60 written successfully."
[1] "part 78 written successfully."
[1] "part 1 written successfully."
[1] "part 83 written successfully."
[1] "part 9 written successfully."
[1] "part 15 written successfully."
[1][1] "part 41 written successfully."
 "part 35 written successfully."
[1][1] "part 8 written successfully." "part 69 written successfully."

[1] "part 59 written successfully."
[1] "part 25 written successfully."
[1] "part 49 written successfully."
[1] "part 52 written successfully."
List of 88
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
 $ : logi TRUE
[1] "part 31 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> lapply -> FUN -> mcparallel -> sendMaster
[1] "part 71 written successfully."
[1] "part 35 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 42 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 4 written successfully."
Execution halted
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1][1] "part 30 written successfully." "part 40 written successfully."

Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 41 written successfully."
[1] "part 80 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 45 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 82 written successfully."
[1] "part 54 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 59 written successfully."
Execution halted
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 27 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 36 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 44 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
Execution halted
[1] "part 83 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 61 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 70 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 66 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 10 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
Execution halted
[1] "part 53 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 55 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 15 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 50 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 5 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
Execution halted
[1] "part 48 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 32 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 69 written successfully."
Execution halted
[1] "part 52 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 77 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
Execution halted
[1] "part 24 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 56 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 6 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 62 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 33 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 16 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 34 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 74 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 2 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 19 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
[1] "part 9 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 11 written successfully."
[1] "part 28 written successfully."
[1] "part 29 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 17 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 65 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
Execution halted
Execution halted
[1] "part 68 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 43 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 38 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 1 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 57 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 8 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1] "part 25 written successfully."
Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
[1]List of 85
 $ : logi TRUE
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL

From r-deve| @end|ng |rom @ker@t|ng@de  Wed Nov 27 12:40:41 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 27 Nov 2019 12:40:41 +0100 (CET)
Subject: [Rd] error in parallel:::sendMaster
In-Reply-To: <E1iZvDH-0002Zc-E6@rmmprod05.runbox>
Message-ID: <E1iZvgY-0005AZ-48@rmmprod05.runbox>

Hi again,

One important correction of my first message: I misinterpreted the output. Actually in that R session 2 input files were processed one after the other in a loop. The first (with 88 parts went fine). The second (with 85 parts) produced the sendMaster errors and failed. If (in a new session via Rscript) I only process the second input file it will work. The other observations on R vs Rscript, NFS share etc. still hold.

Sorry for this! Regards,
Andreas

2019-11-27 12:10 GMT+01:00 Andreas Kersting<r-devel at akersting.de>:
> Hi,
> 
> I am facing a very weird problem with parallel::mclapply. I have a script which does some data wrangling on an input dataset in parallel and then writes the results to disk. I have been using this script daily for more than one year always on an EC2 instance launched from the same AMI (no updates installed after launch) and processed thousands of different input data sets successfully. I now have an input dataset for which I face the following bug:
> 
> The basic outline of the problematic section of the script:
> 
> # parts is a data.table with 88 rows
> mc_ret <- parallel::mclapply(sample.int(nrow(parts)), function(i) {
>   # do some data wrangling and write the result to a file
>   # ...
> 
>   print(paste0("part ", i, " written successfully."))
>   return(TRUE)
> }, mc.preschedule = FALSE, mc.cores = 2L)
> 
> str(mc_ret)
> 
> 
> Expected output: "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed once. All outputs are created successfully.
> 
> Actual output (see end of the message): "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed. All outputs are created successfully. So far so good.
> 
> But then "part i written successfully." it is printed another X times, for values of i for which it was already printed. This output is intermingled with X-1 times the following error message:
> 
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> 
> and Y times the message "Execution halted". mc_ret is printed again, now being a list of length 85, with the first element being TRUE and all other elements being NULL. X and Y vary from run to run.
> 
> 
> Now to the main problem: I tried very hard to create a reproducible example, but I failed. What I observed:
> - The output is (and has always been) written to path which is on an NFS share. If I instead write to a path on a local disk it will work.
> - The script is invoked using Rscript. If I instead source it from an interactive R session it works. There are at least two more people who have observed this: https://stackoverflow.com/questions/51986674/mclapply-sendmaster-error-only-with-rscript
> - Before the call to mclapply the code acquires an exclusive file lock on a dedicated lock file, not written to but also on the NFS share. If I remove the code acquiring the lock, the whole script will also work if called using Rscript.
> - The problem also occurs for mc.preschedule = TRUE.
> - There is no error if I set mc.cores to 1.
> - And stressing again: the code works without any changes from Rscript for thousands of other data sets.
> 
> 
> Rscript -e "sessionInfo()":
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.2 LTS
> 
> Matrix products: default
> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
> 
> locale:
>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8
>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8
>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C
> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.5.2
> 
> 
> I know this is a fairly old R version. I have not been able to reproduce the bug with a more recent version, but since it is so difficult to trigger, this does not mean much, I guess. I have looked through the changes made to the code of mclapply since that version and could not find something directly related. I am not even sure if it is a problem in the parallel package or some other (memory) bug. What strikes me is that others have observed a very similar error when using Rscript but not when using an interactive R session, just like I do.
> 
> I am not expecting a fix based on the information I provide, but maybe someone has some thoughts on this!?
> 
> Regards,
> Andreas
> 
> 
> 
> 
> Actual output:
> 
> [1] "part 51 written successfully."
> [1] "part 30 written successfully."
> [1] "part 32 written successfully."
> [1] "part 48 written successfully."
> [1] "part 63 written successfully."
> [1] "part 5 written successfully."
> [1][1] "part 14 written successfully." "part 18 written successfully."
> 
> [1] "part 38 written successfully."
> [1] "part 11 written successfully."
> [1] "part 68 written successfully."
> [1] "part 45 written successfully."
> [1] "part 88 written successfully."
> [1] "part 36 written successfully."
> [1] "part 44 written successfully."
> [1] "part 55 written successfully."
> [1] "part 26 written successfully."
> [1] "part 37 written successfully."
> [1] "part 22 written successfully."
> [1] "part 13 written successfully."
> [1] "part 67 written successfully."
> [1] "part 10 written successfully."
> [1] "part 24 written successfully."
> [1] "part 20 written successfully."
> [1] "part 74 written successfully."
> [1] "part 50 written successfully."
> [1] "part 2 written successfully."
> [1] "part 17 written successfully."
> [1] "part 66 written successfully."
> [1] "part 61 written successfully."
> [1][1] "part 7 written successfully." "part 31 written successfully."
> 
> [1] "part 70 written successfully."
> [1] "part 71 written successfully."
> [1][1] "part 76 written successfully."
>  "part 42 written successfully."
> [1][1] "part 72 written successfully." "part 12 written successfully."
> 
> [1] "part 39 written successfully."
> [1] "part 58 written successfully."
> [1] "part 87 written successfully."
> [1] "part 81 written successfully."
> [1] "part 3 written successfully."
> [1] "part 29 written successfully."
> [1] "part 82 written successfully."
> [1] "part 54 written successfully."
> [1] "part 23 written successfully."
> [1] "part 56 written successfully."
> [1] "part 73 written successfully."
> [1] "part 27 written successfully."
> [1] "part 64 written successfully."
> [1] "part 46 written successfully."
> [1] "part 80 written successfully."
> [1] "part 53 written successfully."
> [1] "part 43 written successfully."
> [1] "part 47 written successfully."
> [1] "part 57 written successfully."
> [1] "part 75 written successfully."
> [1] "part 84 written successfully."
> [1] "part 85 written successfully."
> [1][1] "part 86 written successfully."
>  "part 19 written successfully."
> [1][1] "part 33 written successfully." "part 34 written successfully."
> 
> [1] "part 21 written successfully."
> [1] "part 40 written successfully."
> [1][1] "part 4 written successfully."
>  "part 28 written successfully."
> [1] "part 62 written successfully."
> [1] "part 16 written successfully."
> [1] "part 79 written successfully."
> [1] "part 6 written successfully."
> [1] "part 77 written successfully."
> [1] "part 65 written successfully."
> [1] "part 60 written successfully."
> [1] "part 78 written successfully."
> [1] "part 1 written successfully."
> [1] "part 83 written successfully."
> [1] "part 9 written successfully."
> [1] "part 15 written successfully."
> [1][1] "part 41 written successfully."
>  "part 35 written successfully."
> [1][1] "part 8 written successfully." "part 69 written successfully."
> 
> [1] "part 59 written successfully."
> [1] "part 25 written successfully."
> [1] "part 49 written successfully."
> [1] "part 52 written successfully."
> List of 88
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
>  $ : logi TRUE
> [1] "part 31 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> lapply -> FUN -> mcparallel -> sendMaster
> [1] "part 71 written successfully."
> [1] "part 35 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 42 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 4 written successfully."
> Execution halted
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1][1] "part 30 written successfully." "part 40 written successfully."
> 
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 41 written successfully."
> [1] "part 80 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 45 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 82 written successfully."
> [1] "part 54 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 59 written successfully."
> Execution halted
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 27 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 36 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 44 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> Execution halted
> [1] "part 83 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 61 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 70 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 66 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 10 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> Execution halted
> [1] "part 53 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 55 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 15 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 50 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 5 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> Execution halted
> [1] "part 48 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 32 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 69 written successfully."
> Execution halted
> [1] "part 52 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 77 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> Execution halted
> [1] "part 24 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 56 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 6 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 62 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 33 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 16 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 34 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 74 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 2 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 19 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> [1] "part 9 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 11 written successfully."
> [1] "part 28 written successfully."
> [1] "part 29 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 17 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 65 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> Execution halted
> Execution halted
> [1] "part 68 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 43 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 38 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 1 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 57 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 8 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1] "part 25 written successfully."
> Error in sendMaster(try(eval(expr, env), silent = TRUE)) : 
>   write error, closing pipe to the master
> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
> [1]List of 85
>  $ : logi TRUE
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
>  $ : NULL
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Nov 27 12:52:48 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 27 Nov 2019 12:52:48 +0100
Subject: [Rd] Troubles using numeric in s4 class union
In-Reply-To: <CAP0QTepYgET5x+5aAZGwXKCZ+fs8bhHH5aswL1s3oebv6feU9A@mail.gmail.com>
References: <CAP0QTepYgET5x+5aAZGwXKCZ+fs8bhHH5aswL1s3oebv6feU9A@mail.gmail.com>
Message-ID: <24030.25488.546854.295498@stat.math.ethz.ch>

>>>>> Ezra Tucker 
>>>>>     on Mon, 11 Nov 2019 21:47:41 +0000 writes:

> Hi all,
> 
> I came across an issue in using the Matrix package which made it that I
> could only subset Matrices using the numeric class, but could not using
> integers. Steps to reproduce the problem:
> 
> library(Matrix)
> 
> # this class has *nothing* to do with Matrix
> setClass("MyClass",
>     representation(myvalue = "numeric"),
>     prototype(myvalue = NA_real_))
> # this class also has nothing to do with Matrix
> setClassUnion("NumOrMyClass", c("numeric", "MyClass"))
> 
> # this is to demonstrate creating and subsetting a specific Matrix
> m <- new("dgCMatrix", i = c(2L, 0L, 1L, 2L, 0L, 1L), p = c(0L, 1L, 2L, 4L,
> 4L, 6L),
>     Dim = c(3L, 5L), Dimnames = list(NULL, NULL), x = c(2, 1, 2, 1, 2, 1),
> factors = list())
> # this next line fails:
> m[1:2, 1:2]
> 
> The last line fails consistently with R 3.6.1 and Matrix 1.2-17 on a
> variety of operating systems and computers (tested with ubuntu 19.10 &
> windows 10). I'll note at this point that without the class union I defined
> above, the rest of the code works perfectly fine.
> 
> There are 2 workarounds I've come up with. Firstly, one could change the
> last line to
> m[as.numeric(1:2), as.numeric(1:2)]
> or as.numeric(seq()) or c(1, 2), etc.
> 
> The other workaround is to change setClassUnion("NumOrMyClass",
> c("numeric", "MyClass")) to setClassUnion("NumOrMyClass", c("numeric",
> "double", "integer", "MyClass")), which I believe should be the recommended
> workaround here.
> 
> The underlying issue, though, is that I would not have expected *anything*
> that I write to get in the way of Matrix; in fact, the classes that I
> defined have nothing to do with Matrix at all. So, I have some fears that
> this might be a bigger problem, possibly either in Methods or in Base.
> 
> 1. Can others confirm that this is in fact an issue as I believe it to be?

yes, others have confirmed this is an issue .. (unfortunately
not in this R-devel thread).

Thank you, Ezra, very much for your helpful report, including a
simple reproducible example.

> 2. If it is a legitimate issue, have others seen it manifested working with
> other packages that are not Matrix? In this case, I believe that the class
> union I defied is somehow interfering with the "index" class union in
> Matrix, R/AllClass.R, line 809

> 3. Why should the class union I defined interfere with the inner workings
> of a separate package?

There is no good reason ...

> 4. Is this a bug in Base or Methods?

This is a bug in "base R", in package 'methods'.

The R core team had taken the issue up, already two weeks ago,
but unfortunately did not get to address this in a definitive
way.  ==>  I'll remind us about it !

Martin Maechler
ETH Zurich and R Core


> Thank you for your time!
> 
> Sincerely,
> Ezra


From |@wrence@m|ch@e| @end|ng |rom gene@com  Wed Nov 27 12:57:39 2019
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Wed, 27 Nov 2019 03:57:39 -0800
Subject: [Rd] Troubles using numeric in s4 class union
In-Reply-To: <24030.25488.546854.295498@stat.math.ethz.ch>
References: <CAP0QTepYgET5x+5aAZGwXKCZ+fs8bhHH5aswL1s3oebv6feU9A@mail.gmail.com>
 <24030.25488.546854.295498@stat.math.ethz.ch>
Message-ID: <CAOQ5Nyf47MMXRtfr3Kgt6O35TfHCR0eqJ+42Y+YMguUG-uaB5A@mail.gmail.com>

I've been working on this and will hopefully get a fix checked in today.

On Wed, Nov 27, 2019 at 3:53 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Ezra Tucker
> >>>>>     on Mon, 11 Nov 2019 21:47:41 +0000 writes:
>
> > Hi all,
> >
> > I came across an issue in using the Matrix package which made it that I
> > could only subset Matrices using the numeric class, but could not using
> > integers. Steps to reproduce the problem:
> >
> > library(Matrix)
> >
> > # this class has *nothing* to do with Matrix
> > setClass("MyClass",
> >     representation(myvalue = "numeric"),
> >     prototype(myvalue = NA_real_))
> > # this class also has nothing to do with Matrix
> > setClassUnion("NumOrMyClass", c("numeric", "MyClass"))
> >
> > # this is to demonstrate creating and subsetting a specific Matrix
> > m <- new("dgCMatrix", i = c(2L, 0L, 1L, 2L, 0L, 1L), p = c(0L, 1L, 2L, 4L,
> > 4L, 6L),
> >     Dim = c(3L, 5L), Dimnames = list(NULL, NULL), x = c(2, 1, 2, 1, 2, 1),
> > factors = list())
> > # this next line fails:
> > m[1:2, 1:2]
> >
> > The last line fails consistently with R 3.6.1 and Matrix 1.2-17 on a
> > variety of operating systems and computers (tested with ubuntu 19.10 &
> > windows 10). I'll note at this point that without the class union I defined
> > above, the rest of the code works perfectly fine.
> >
> > There are 2 workarounds I've come up with. Firstly, one could change the
> > last line to
> > m[as.numeric(1:2), as.numeric(1:2)]
> > or as.numeric(seq()) or c(1, 2), etc.
> >
> > The other workaround is to change setClassUnion("NumOrMyClass",
> > c("numeric", "MyClass")) to setClassUnion("NumOrMyClass", c("numeric",
> > "double", "integer", "MyClass")), which I believe should be the recommended
> > workaround here.
> >
> > The underlying issue, though, is that I would not have expected *anything*
> > that I write to get in the way of Matrix; in fact, the classes that I
> > defined have nothing to do with Matrix at all. So, I have some fears that
> > this might be a bigger problem, possibly either in Methods or in Base.
> >
> > 1. Can others confirm that this is in fact an issue as I believe it to be?
>
> yes, others have confirmed this is an issue .. (unfortunately
> not in this R-devel thread).
>
> Thank you, Ezra, very much for your helpful report, including a
> simple reproducible example.
>
> > 2. If it is a legitimate issue, have others seen it manifested working with
> > other packages that are not Matrix? In this case, I believe that the class
> > union I defied is somehow interfering with the "index" class union in
> > Matrix, R/AllClass.R, line 809
>
> > 3. Why should the class union I defined interfere with the inner workings
> > of a separate package?
>
> There is no good reason ...
>
> > 4. Is this a bug in Base or Methods?
>
> This is a bug in "base R", in package 'methods'.
>
> The R core team had taken the issue up, already two weeks ago,
> but unfortunately did not get to address this in a definitive
> way.  ==>  I'll remind us about it !
>
> Martin Maechler
> ETH Zurich and R Core
>
>
> > Thank you for your time!
> >
> > Sincerely,
> > Ezra
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Senior Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Nov 27 15:04:04 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 27 Nov 2019 15:04:04 +0100
Subject: [Rd] error in parallel:::sendMaster
In-Reply-To: <E1iZvgY-0005AZ-48@rmmprod05.runbox>
References: <E1iZvgY-0005AZ-48@rmmprod05.runbox>
Message-ID: <e0586e91-2a9f-eeac-e6b8-583e1a2811bd@gmail.com>

Hi Andreas,

the error is reported when some child process cannot send results to the 
master process, which originates from an error returned by write() - 
when write() returns -1 or 0. The logic around the writing has not 
changed since R 3.5.2. It should not be related to the printing in the 
child, only to returning the value. The problem may be originating from 
the execution environment, virtualization, and/or possibly from a lack 
of robustness in R. To resolve this we need to find out which error was 
returned and why. Either you can try to create a reproducible example 
(something I could use to trigger an error on my system and then debug) 
or to debug on your system (build R from source, ensure the bug is still 
triggered, then instrument to print the exact error from the OS and 
where it was detected, etc). In principle you could also try without 
code instrumentation just using strace. Just from looking at the code in 
R around the writing I am not seeing any bug there. If you choose to 
debug on your system I can help with the instrumentation.

Best
Tomas

On 11/27/19 12:40 PM, Andreas Kersting wrote:
> Hi again,
>
> One important correction of my first message: I misinterpreted the output. Actually in that R session 2 input files were processed one after the other in a loop. The first (with 88 parts went fine). The second (with 85 parts) produced the sendMaster errors and failed. If (in a new session via Rscript) I only process the second input file it will work. The other observations on R vs Rscript, NFS share etc. still hold.
>
> Sorry for this! Regards,
> Andreas
>
> 2019-11-27 12:10 GMT+01:00 Andreas Kersting<r-devel at akersting.de>:
>> Hi,
>>
>> I am facing a very weird problem with parallel::mclapply. I have a script which does some data wrangling on an input dataset in parallel and then writes the results to disk. I have been using this script daily for more than one year always on an EC2 instance launched from the same AMI (no updates installed after launch) and processed thousands of different input data sets successfully. I now have an input dataset for which I face the following bug:
>>
>> The basic outline of the problematic section of the script:
>>
>> # parts is a data.table with 88 rows
>> mc_ret <- parallel::mclapply(sample.int(nrow(parts)), function(i) {
>>    # do some data wrangling and write the result to a file
>>    # ...
>>
>>    print(paste0("part ", i, " written successfully."))
>>    return(TRUE)
>> }, mc.preschedule = FALSE, mc.cores = 2L)
>>
>> str(mc_ret)
>>
>>
>> Expected output: "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed once. All outputs are created successfully.
>>
>> Actual output (see end of the message): "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed. All outputs are created successfully. So far so good.
>>
>> But then "part i written successfully." it is printed another X times, for values of i for which it was already printed. This output is intermingled with X-1 times the following error message:
>>
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>
>> and Y times the message "Execution halted". mc_ret is printed again, now being a list of length 85, with the first element being TRUE and all other elements being NULL. X and Y vary from run to run.
>>
>>
>> Now to the main problem: I tried very hard to create a reproducible example, but I failed. What I observed:
>> - The output is (and has always been) written to path which is on an NFS share. If I instead write to a path on a local disk it will work.
>> - The script is invoked using Rscript. If I instead source it from an interactive R session it works. There are at least two more people who have observed this: https://stackoverflow.com/questions/51986674/mclapply-sendmaster-error-only-with-rscript
>> - Before the call to mclapply the code acquires an exclusive file lock on a dedicated lock file, not written to but also on the NFS share. If I remove the code acquiring the lock, the whole script will also work if called using Rscript.
>> - The problem also occurs for mc.preschedule = TRUE.
>> - There is no error if I set mc.cores to 1.
>> - And stressing again: the code works without any changes from Rscript for thousands of other data sets.
>>
>>
>> Rscript -e "sessionInfo()":
>> R version 3.5.2 (2018-12-20)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Ubuntu 18.04.2 LTS
>>
>> Matrix products: default
>> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
>> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
>>
>> locale:
>>   [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8
>>   [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8
>>   [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C
>> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.5.2
>>
>>
>> I know this is a fairly old R version. I have not been able to reproduce the bug with a more recent version, but since it is so difficult to trigger, this does not mean much, I guess. I have looked through the changes made to the code of mclapply since that version and could not find something directly related. I am not even sure if it is a problem in the parallel package or some other (memory) bug. What strikes me is that others have observed a very similar error when using Rscript but not when using an interactive R session, just like I do.
>>
>> I am not expecting a fix based on the information I provide, but maybe someone has some thoughts on this!?
>>
>> Regards,
>> Andreas
>>
>>
>>
>>
>> Actual output:
>>
>> [1] "part 51 written successfully."
>> [1] "part 30 written successfully."
>> [1] "part 32 written successfully."
>> [1] "part 48 written successfully."
>> [1] "part 63 written successfully."
>> [1] "part 5 written successfully."
>> [1][1] "part 14 written successfully." "part 18 written successfully."
>>
>> [1] "part 38 written successfully."
>> [1] "part 11 written successfully."
>> [1] "part 68 written successfully."
>> [1] "part 45 written successfully."
>> [1] "part 88 written successfully."
>> [1] "part 36 written successfully."
>> [1] "part 44 written successfully."
>> [1] "part 55 written successfully."
>> [1] "part 26 written successfully."
>> [1] "part 37 written successfully."
>> [1] "part 22 written successfully."
>> [1] "part 13 written successfully."
>> [1] "part 67 written successfully."
>> [1] "part 10 written successfully."
>> [1] "part 24 written successfully."
>> [1] "part 20 written successfully."
>> [1] "part 74 written successfully."
>> [1] "part 50 written successfully."
>> [1] "part 2 written successfully."
>> [1] "part 17 written successfully."
>> [1] "part 66 written successfully."
>> [1] "part 61 written successfully."
>> [1][1] "part 7 written successfully." "part 31 written successfully."
>>
>> [1] "part 70 written successfully."
>> [1] "part 71 written successfully."
>> [1][1] "part 76 written successfully."
>>   "part 42 written successfully."
>> [1][1] "part 72 written successfully." "part 12 written successfully."
>>
>> [1] "part 39 written successfully."
>> [1] "part 58 written successfully."
>> [1] "part 87 written successfully."
>> [1] "part 81 written successfully."
>> [1] "part 3 written successfully."
>> [1] "part 29 written successfully."
>> [1] "part 82 written successfully."
>> [1] "part 54 written successfully."
>> [1] "part 23 written successfully."
>> [1] "part 56 written successfully."
>> [1] "part 73 written successfully."
>> [1] "part 27 written successfully."
>> [1] "part 64 written successfully."
>> [1] "part 46 written successfully."
>> [1] "part 80 written successfully."
>> [1] "part 53 written successfully."
>> [1] "part 43 written successfully."
>> [1] "part 47 written successfully."
>> [1] "part 57 written successfully."
>> [1] "part 75 written successfully."
>> [1] "part 84 written successfully."
>> [1] "part 85 written successfully."
>> [1][1] "part 86 written successfully."
>>   "part 19 written successfully."
>> [1][1] "part 33 written successfully." "part 34 written successfully."
>>
>> [1] "part 21 written successfully."
>> [1] "part 40 written successfully."
>> [1][1] "part 4 written successfully."
>>   "part 28 written successfully."
>> [1] "part 62 written successfully."
>> [1] "part 16 written successfully."
>> [1] "part 79 written successfully."
>> [1] "part 6 written successfully."
>> [1] "part 77 written successfully."
>> [1] "part 65 written successfully."
>> [1] "part 60 written successfully."
>> [1] "part 78 written successfully."
>> [1] "part 1 written successfully."
>> [1] "part 83 written successfully."
>> [1] "part 9 written successfully."
>> [1] "part 15 written successfully."
>> [1][1] "part 41 written successfully."
>>   "part 35 written successfully."
>> [1][1] "part 8 written successfully." "part 69 written successfully."
>>
>> [1] "part 59 written successfully."
>> [1] "part 25 written successfully."
>> [1] "part 49 written successfully."
>> [1] "part 52 written successfully."
>> List of 88
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>>   $ : logi TRUE
>> [1] "part 31 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> lapply -> FUN -> mcparallel -> sendMaster
>> [1] "part 71 written successfully."
>> [1] "part 35 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 42 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 4 written successfully."
>> Execution halted
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1][1] "part 30 written successfully." "part 40 written successfully."
>>
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 41 written successfully."
>> [1] "part 80 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 45 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 82 written successfully."
>> [1] "part 54 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 59 written successfully."
>> Execution halted
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 27 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 36 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 44 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> Execution halted
>> [1] "part 83 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 61 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 70 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 66 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 10 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> Execution halted
>> [1] "part 53 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 55 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 15 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 50 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 5 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> Execution halted
>> [1] "part 48 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 32 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 69 written successfully."
>> Execution halted
>> [1] "part 52 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 77 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> Execution halted
>> [1] "part 24 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 56 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 6 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 62 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 33 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 16 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 34 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 74 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 2 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 19 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> [1] "part 9 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 11 written successfully."
>> [1] "part 28 written successfully."
>> [1] "part 29 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 17 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 65 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> Execution halted
>> Execution halted
>> [1] "part 68 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 43 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 38 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 1 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 57 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 8 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1] "part 25 written successfully."
>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>    write error, closing pipe to the master
>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>> [1]List of 85
>>   $ : logi TRUE
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>>   $ : NULL
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r-deve| @end|ng |rom @ker@t|ng@de  Thu Nov 28 06:35:42 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Thu, 28 Nov 2019 06:35:42 +0100 (CET)
Subject: [Rd] error in parallel:::sendMaster
In-Reply-To: <e0586e91-2a9f-eeac-e6b8-583e1a2811bd@gmail.com>
Message-ID: <E1iaCSt-0005ir-0n@rmmprod05.runbox>

Hi Tomas,

Thanks for your prompt reply and your offer to help. I might need to get back to this since I am not too experienced in debugging these kinds of issues. Anyway, I gave it a try and I think I have found the immediate cause:

I installed the debug symbols (r-base-core-dbg), placed https://github.com/wch/r-source/blob/tags/R-3-5-2/src/library/parallel/src/fork.c in cwd and changed the wrapper code to:

mc_ret <- parallel::mclapply(seq_len(nrow(parts)), function(i) {
    # we fail for the input resulting in parts having 85 rows
    if (nrow(parts) == 85L && !file.exists(as.character(Sys.getpid()))) {
      file.create(as.character(Sys.getpid()))
      print(Sys.getpid())
      Sys.sleep(30)
    }

    # ...

    return(TRUE)
  }, mc.preschedule = TRUE, mc.cores = 2L)

This way I ended up with only two child processes to which I each attached a debugger. In total I ran about 10 debugging sessions and it was always the second child process failing. The errno after write returned -1 was 9 (EBADF). 

>From what I can see, the reason for this is that the second child tries to write to fd 7, but already during the very beginning of the first invocation of the anonymous function to parallelize, i.e. during Sys.sleep(30), there is no such file descriptor. From this observation I would conclude that it is NOT the code run from that function, i.e. # ...,  causing the issue. Let me point out again, that this is NOT the very first invocation of mclapply in this R session. There is at least one previous call to it, which works fine.


File descriptors directly after attaching gdb to both child processes during Sys.sleep(30):

### master
root at ip-10-0-48-30:~/latest_test# ls -l /proc/22119/fd
total 0
lrwx------ 1 root root 64 Nov 28 04:49 0 -> /dev/pts/0
lrwx------ 1 root root 64 Nov 28 04:49 1 -> /dev/pts/0
lrwx------ 1 root root 64 Nov 28 04:49 2 -> /dev/pts/0
lr-x------ 1 root root 64 Nov 28 04:49 3 -> /path/to/script.R
lrwx------ 1 root root 64 Nov 28 04:49 4 -> /path/on/nfs/write.lock
lr-x------ 1 root root 64 Nov 28 04:49 5 -> 'pipe:[266120]'
l-wx------ 1 root root 64 Nov 28 04:49 8 -> 'pipe:[266121]'


### first child (writes to fd 6)
(gdb) shell ls -l /proc/22134/fd
total 0
lrwx------ 1 root root 64 Nov 28 04:42 0 -> /dev/pts/0
lrwx------ 1 root root 64 Nov 28 04:42 1 -> /dev/pts/0
lrwx------ 1 root root 64 Nov 28 04:42 2 -> /dev/pts/0
lr-x------ 1 root root 64 Nov 28 04:42 3 -> /path/to/script.R
lrwx------ 1 root root 64 Nov 28 04:42 4 -> /path/on/nfs/write.lock
l-wx------ 1 root root 64 Nov 28 04:42 6 -> 'pipe:[266120]'
l-wx------ 1 root root 64 Nov 28 04:42 8 -> 'pipe:[266121]'

### second child (tries writing to fd 7)
(gdb) shell ls -l /proc/22135/fd
total 0
lr-x------ 1 root root 64 Nov 28 04:42 0 -> 'pipe:[266123]'
lrwx------ 1 root root 64 Nov 28 04:42 1 -> /dev/pts/0
l-wx------ 1 root root 64 Nov 28 04:42 10 -> 'pipe:[266123]'
lrwx------ 1 root root 64 Nov 28 04:42 2 -> /dev/pts/0
lr-x------ 1 root root 64 Nov 28 04:42 3 -> /path/to/script.R
lrwx------ 1 root root 64 Nov 28 04:42 4 -> /path/on/nfs/write.lock


# debugging mc_send_master in both child processes:

### first child (all OK):
(gdb) break mc_send_master
Breakpoint 1 at 0x7f5b2687b0a0: file fork.c, line 681.
(gdb) c
Continuing.

Breakpoint 1, mc_send_master (what=0x555c6dd2cd00) at fork.c:681
warning: Source file is more recent than executable.
681	{
(gdb) info args
what = 0x555c6dd2cd00
(gdb) n
682	    if (is_master)
(gdb) n
684	    if (master_fd == -1) 
(gdb) n
686	    if (TYPEOF(what) != RAWSXP) 
(gdb) n
688	    R_xlen_t len = XLENGTH(what);
(gdb) n
689	    unsigned char *b = RAW(what);
(gdb) n
693	    if (writerep(master_fd, &len, sizeof(len)) != sizeof(len)) {
(gdb) info locals
len = 538
b = <optimized out>
n = <optimized out>
(gdb) s
writerep (fildes=6, buf=buf at entry=0x7ffdd6da7db0, nbyte=nbyte at entry=8)
    at fork.c:653
653	{
(gdb) info args
fildes = 6
buf = 0x7ffdd6da7db0
nbyte = 8
(gdb) n
654	    size_t wbyte = 0;
(gdb) n
653	{
(gdb) n
657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
(gdb) n
658		if (w == -1) {
(gdb) n
657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
(gdb) n
658		if (w == -1) {
(gdb) n
664		if (w == 0) {
(gdb) n
670		wbyte += w;
(gdb) n
671		if (wbyte == nbyte)
(gdb) n
672		    return wbyte;
(gdb) n
674	}
(gdb) n
mc_send_master (what=<optimized out>) at fork.c:699
699	    for (R_xlen_t i = 0; i < len; i += n) {
(gdb) n
700		n = writerep(master_fd, b + i, len - i);
(gdb) n
701		if (n < 1) {
(gdb) n
699	    for (R_xlen_t i = 0; i < len; i += n) {
(gdb) n
707	    return ScalarLogical(1);
(gdb) n
708	}



### second child (write fails with EBADF):
(gdb) break mc_send_master
Breakpoint 1 at 0x7f5016f3e0a0: file fork.c, line 681.
(gdb) c
Continuing.

Breakpoint 1, mc_send_master (what=0x563382a71910) at fork.c:681
warning: Source file is more recent than executable.
681	{
(gdb) info args
what = 0x563382a71910
(gdb) n
682	    if (is_master)
(gdb) n
684	    if (master_fd == -1) 
(gdb) n
686	    if (TYPEOF(what) != RAWSXP) 
(gdb) n
688	    R_xlen_t len = XLENGTH(what);
(gdb) n
689	    unsigned char *b = RAW(what);
(gdb) n
693	    if (writerep(master_fd, &len, sizeof(len)) != sizeof(len)) {
(gdb) info locals
len = 526
b = <optimized out>
n = <optimized out>
(gdb) s
writerep (fildes=7, buf=buf at entry=0x7fff4027ad60, nbyte=nbyte at entry=8)
    at fork.c:653
653	{
(gdb) info args
fildes = 7
buf = 0x7fff4027ad60
nbyte = 8
(gdb) n
654	    size_t wbyte = 0;
(gdb) n
653	{
(gdb) n
657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
(gdb) n
658		if (w == -1) {
(gdb) info locals
w = <optimized out>
wbyte = 0
ptr = 0x7fff4027ad60 "\016\002"
(gdb) n
657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
(gdb) n
658		if (w == -1) {
(gdb) n
659		    if (errno == EINTR)
(gdb) n
674	}
(gdb) p __errno_location()
$1 = (int *) 0x7f50322cb540
(gdb) x/x $1
0x7f50322cb540:	0x00000009
(gdb) python import errno
(gdb) python print(errno.errorcode[9])
EBADF
(gdb) n
mc_send_master (what=<optimized out>) at fork.c:702
702		    close(master_fd);
(gdb) n
704		    error(_("write error, closing pipe to the master"));
(gdb) n
703		    master_fd = -1;
(gdb) n
704		    error(_("write error, closing pipe to the master"));
(gdb) n
685		error(_("there is no pipe to the master process"));


Does this help in any way? 

Is there something else I can/should look at?

Regards,
Andreas


2019-11-27 15:04 GMT+01:00 Tomas Kalibera<tomas.kalibera at gmail.com>:
> Hi Andreas,
> the error is reported when some child process cannot send results to the master process, which originates from an error returned by write() - when write() returns -1 or 0. The logic around the writing has not changed since R 3.5.2. It should not be related to the printing in the child, only to returning the value. The problem may be originating from the execution environment, virtualization, and/or possibly from a lack of robustness in R. To resolve this we need to find out which error was returned and why. Either you can try to create a reproducible example (something I could use to trigger an error on my system and then debug) or to debug on your system (build R from source, ensure the bug is still triggered, then instrument to print the exact error from the OS and where it was detected, etc). In principle you could also try without code instrumentation just using strace. Just from looking at the code in R around the writing I am not seeing any bug there. If you choose to debug on your system I can help with the instrumentation.
> 
> Best
> Tomas
> 
> On 11/27/19 12:40 PM, Andreas Kersting wrote:
>> Hi again,
>>
>> One important correction of my first message: I misinterpreted the output. Actually in that R session 2 input files were processed one after the other in a loop. The first (with 88 parts went fine). The second (with 85 parts) produced the sendMaster errors and failed. If (in a new session via Rscript) I only process the second input file it will work. The other observations on R vs Rscript, NFS share etc. still hold.
>>
>> Sorry for this! Regards,
>> Andreas
>>
>> 2019-11-27 12:10 GMT+01:00 Andreas Kersting<r-devel at akersting.de>:
>>> Hi,
>>>
>>> I am facing a very weird problem with parallel::mclapply. I have a script which does some data wrangling on an input dataset in parallel and then writes the results to disk. I have been using this script daily for more than one year always on an EC2 instance launched from the same AMI (no updates installed after launch) and processed thousands of different input data sets successfully. I now have an input dataset for which I face the following bug:
>>>
>>> The basic outline of the problematic section of the script:
>>>
>>> # parts is a data.table with 88 rows
>>> mc_ret <- parallel::mclapply(sample.int(nrow(parts)), function(i) {
>>>    # do some data wrangling and write the result to a file
>>>    # ...
>>>
>>>    print(paste0("part ", i, " written successfully."))
>>>    return(TRUE)
>>> }, mc.preschedule = FALSE, mc.cores = 2L)
>>>
>>> str(mc_ret)
>>>
>>>
>>> Expected output: "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed once. All outputs are created successfully.
>>>
>>> Actual output (see end of the message): "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed. All outputs are created successfully. So far so good.
>>>
>>> But then "part i written successfully." it is printed another X times, for values of i for which it was already printed. This output is intermingled with X-1 times the following error message:
>>>
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>
>>> and Y times the message "Execution halted". mc_ret is printed again, now being a list of length 85, with the first element being TRUE and all other elements being NULL. X and Y vary from run to run.
>>>
>>>
>>> Now to the main problem: I tried very hard to create a reproducible example, but I failed. What I observed:
>>> - The output is (and has always been) written to path which is on an NFS share. If I instead write to a path on a local disk it will work.
>>> - The script is invoked using Rscript. If I instead source it from an interactive R session it works. There are at least two more people who have observed this: https://stackoverflow.com/questions/51986674/mclapply-sendmaster-error-only-with-rscript
>>> - Before the call to mclapply the code acquires an exclusive file lock on a dedicated lock file, not written to but also on the NFS share. If I remove the code acquiring the lock, the whole script will also work if called using Rscript.
>>> - The problem also occurs for mc.preschedule = TRUE.
>>> - There is no error if I set mc.cores to 1.
>>> - And stressing again: the code works without any changes from Rscript for thousands of other data sets.
>>>
>>>
>>> Rscript -e "sessionInfo()":
>>> R version 3.5.2 (2018-12-20)
>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>> Running under: Ubuntu 18.04.2 LTS
>>>
>>> Matrix products: default
>>> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
>>> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
>>>
>>> locale:
>>>   [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8
>>>   [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8
>>>   [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C
>>> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C
>>>
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>> loaded via a namespace (and not attached):
>>> [1] compiler_3.5.2
>>>
>>>
>>> I know this is a fairly old R version. I have not been able to reproduce the bug with a more recent version, but since it is so difficult to trigger, this does not mean much, I guess. I have looked through the changes made to the code of mclapply since that version and could not find something directly related. I am not even sure if it is a problem in the parallel package or some other (memory) bug. What strikes me is that others have observed a very similar error when using Rscript but not when using an interactive R session, just like I do.
>>>
>>> I am not expecting a fix based on the information I provide, but maybe someone has some thoughts on this!?
>>>
>>> Regards,
>>> Andreas
>>>
>>>
>>>
>>>
>>> Actual output:
>>>
>>> [1] "part 51 written successfully."
>>> [1] "part 30 written successfully."
>>> [1] "part 32 written successfully."
>>> [1] "part 48 written successfully."
>>> [1] "part 63 written successfully."
>>> [1] "part 5 written successfully."
>>> [1][1] "part 14 written successfully." "part 18 written successfully."
>>>
>>> [1] "part 38 written successfully."
>>> [1] "part 11 written successfully."
>>> [1] "part 68 written successfully."
>>> [1] "part 45 written successfully."
>>> [1] "part 88 written successfully."
>>> [1] "part 36 written successfully."
>>> [1] "part 44 written successfully."
>>> [1] "part 55 written successfully."
>>> [1] "part 26 written successfully."
>>> [1] "part 37 written successfully."
>>> [1] "part 22 written successfully."
>>> [1] "part 13 written successfully."
>>> [1] "part 67 written successfully."
>>> [1] "part 10 written successfully."
>>> [1] "part 24 written successfully."
>>> [1] "part 20 written successfully."
>>> [1] "part 74 written successfully."
>>> [1] "part 50 written successfully."
>>> [1] "part 2 written successfully."
>>> [1] "part 17 written successfully."
>>> [1] "part 66 written successfully."
>>> [1] "part 61 written successfully."
>>> [1][1] "part 7 written successfully." "part 31 written successfully."
>>>
>>> [1] "part 70 written successfully."
>>> [1] "part 71 written successfully."
>>> [1][1] "part 76 written successfully."
>>>   "part 42 written successfully."
>>> [1][1] "part 72 written successfully." "part 12 written successfully."
>>>
>>> [1] "part 39 written successfully."
>>> [1] "part 58 written successfully."
>>> [1] "part 87 written successfully."
>>> [1] "part 81 written successfully."
>>> [1] "part 3 written successfully."
>>> [1] "part 29 written successfully."
>>> [1] "part 82 written successfully."
>>> [1] "part 54 written successfully."
>>> [1] "part 23 written successfully."
>>> [1] "part 56 written successfully."
>>> [1] "part 73 written successfully."
>>> [1] "part 27 written successfully."
>>> [1] "part 64 written successfully."
>>> [1] "part 46 written successfully."
>>> [1] "part 80 written successfully."
>>> [1] "part 53 written successfully."
>>> [1] "part 43 written successfully."
>>> [1] "part 47 written successfully."
>>> [1] "part 57 written successfully."
>>> [1] "part 75 written successfully."
>>> [1] "part 84 written successfully."
>>> [1] "part 85 written successfully."
>>> [1][1] "part 86 written successfully."
>>>   "part 19 written successfully."
>>> [1][1] "part 33 written successfully." "part 34 written successfully."
>>>
>>> [1] "part 21 written successfully."
>>> [1] "part 40 written successfully."
>>> [1][1] "part 4 written successfully."
>>>   "part 28 written successfully."
>>> [1] "part 62 written successfully."
>>> [1] "part 16 written successfully."
>>> [1] "part 79 written successfully."
>>> [1] "part 6 written successfully."
>>> [1] "part 77 written successfully."
>>> [1] "part 65 written successfully."
>>> [1] "part 60 written successfully."
>>> [1] "part 78 written successfully."
>>> [1] "part 1 written successfully."
>>> [1] "part 83 written successfully."
>>> [1] "part 9 written successfully."
>>> [1] "part 15 written successfully."
>>> [1][1] "part 41 written successfully."
>>>   "part 35 written successfully."
>>> [1][1] "part 8 written successfully." "part 69 written successfully."
>>>
>>> [1] "part 59 written successfully."
>>> [1] "part 25 written successfully."
>>> [1] "part 49 written successfully."
>>> [1] "part 52 written successfully."
>>> List of 88
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>>   $ : logi TRUE
>>> [1] "part 31 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> lapply -> FUN -> mcparallel -> sendMaster
>>> [1] "part 71 written successfully."
>>> [1] "part 35 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 42 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 4 written successfully."
>>> Execution halted
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1][1] "part 30 written successfully." "part 40 written successfully."
>>>
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 41 written successfully."
>>> [1] "part 80 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 45 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 82 written successfully."
>>> [1] "part 54 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 59 written successfully."
>>> Execution halted
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 27 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 36 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 44 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> Execution halted
>>> [1] "part 83 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 61 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 70 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 66 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 10 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> Execution halted
>>> [1] "part 53 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 55 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 15 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 50 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 5 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> Execution halted
>>> [1] "part 48 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 32 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 69 written successfully."
>>> Execution halted
>>> [1] "part 52 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 77 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> Execution halted
>>> [1] "part 24 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 56 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 6 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 62 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 33 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 16 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 34 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 74 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 2 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 19 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> [1] "part 9 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 11 written successfully."
>>> [1] "part 28 written successfully."
>>> [1] "part 29 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 17 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 65 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> Execution halted
>>> Execution halted
>>> [1] "part 68 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 43 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 38 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 1 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 57 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 8 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1] "part 25 written successfully."
>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>    write error, closing pipe to the master
>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>> [1]List of 85
>>>   $ : logi TRUE
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>>   $ : NULL
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Nov 28 10:40:31 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 28 Nov 2019 10:40:31 +0100
Subject: [Rd] error in parallel:::sendMaster
In-Reply-To: <E1iaCSt-0005ir-0n@rmmprod05.runbox>
References: <E1iaCSt-0005ir-0n@rmmprod05.runbox>
Message-ID: <47cd55ca-294a-81a2-894a-e48cc588aa45@gmail.com>

Hi Andreas,

thank you very much, good job finding it was EBADF. Now the question is 
why the pipe has been closed prematurely; it could be accidentally by R 
(a race condition in the cleanup code in fork.c) or possibly by some 
other code running in the same process (maybe the R program itself or 
some other code it runs). Maybe we can take this off the list and come 
back when we know the cause or have it fixed.

It would help a lot if you could try with R built from source, with 
optimizations disabled to get more accurate debug symbols (e.g. env 
CFLAGS="-Wall -O0 -gdwarf-2 -g3" CXXFLAGS="-Wall -O0 -gdwarf-2 -g3" 
./configure), and with MC_DEBUG defined in fork.c - line 26. Ideally in 
R-devel, so that we are sure the problem still exists. The debug 
messages should give a hint whether it was R (fork.c) that closed the 
pipe and why. Maybe you could also add a debug message to 
close_fds_child_ci() to see if it was closed there. Maybe you could find 
this out even in your current debugging setup via breakpoints and 
backtraces, but I think it may be easier to build from source with these 
debugging messages.

Also if you could send me a complete example I could run that causes 
this on your system, that would be nice (even if it didn't cause the 
problem on my system).

Thanks
Tomas

On 11/28/19 6:35 AM, Andreas Kersting wrote:
> Hi Tomas,
>
> Thanks for your prompt reply and your offer to help. I might need to get back to this since I am not too experienced in debugging these kinds of issues. Anyway, I gave it a try and I think I have found the immediate cause:
>
> I installed the debug symbols (r-base-core-dbg), placed https://github.com/wch/r-source/blob/tags/R-3-5-2/src/library/parallel/src/fork.c in cwd and changed the wrapper code to:
>
> mc_ret <- parallel::mclapply(seq_len(nrow(parts)), function(i) {
>      # we fail for the input resulting in parts having 85 rows
>      if (nrow(parts) == 85L && !file.exists(as.character(Sys.getpid()))) {
>        file.create(as.character(Sys.getpid()))
>        print(Sys.getpid())
>        Sys.sleep(30)
>      }
>
>      # ...
>
>      return(TRUE)
>    }, mc.preschedule = TRUE, mc.cores = 2L)
>
> This way I ended up with only two child processes to which I each attached a debugger. In total I ran about 10 debugging sessions and it was always the second child process failing. The errno after write returned -1 was 9 (EBADF).
>
>  From what I can see, the reason for this is that the second child tries to write to fd 7, but already during the very beginning of the first invocation of the anonymous function to parallelize, i.e. during Sys.sleep(30), there is no such file descriptor. From this observation I would conclude that it is NOT the code run from that function, i.e. # ...,  causing the issue. Let me point out again, that this is NOT the very first invocation of mclapply in this R session. There is at least one previous call to it, which works fine.
>
>
> File descriptors directly after attaching gdb to both child processes during Sys.sleep(30):
>
> ### master
> root at ip-10-0-48-30:~/latest_test# ls -l /proc/22119/fd
> total 0
> lrwx------ 1 root root 64 Nov 28 04:49 0 -> /dev/pts/0
> lrwx------ 1 root root 64 Nov 28 04:49 1 -> /dev/pts/0
> lrwx------ 1 root root 64 Nov 28 04:49 2 -> /dev/pts/0
> lr-x------ 1 root root 64 Nov 28 04:49 3 -> /path/to/script.R
> lrwx------ 1 root root 64 Nov 28 04:49 4 -> /path/on/nfs/write.lock
> lr-x------ 1 root root 64 Nov 28 04:49 5 -> 'pipe:[266120]'
> l-wx------ 1 root root 64 Nov 28 04:49 8 -> 'pipe:[266121]'
>
>
> ### first child (writes to fd 6)
> (gdb) shell ls -l /proc/22134/fd
> total 0
> lrwx------ 1 root root 64 Nov 28 04:42 0 -> /dev/pts/0
> lrwx------ 1 root root 64 Nov 28 04:42 1 -> /dev/pts/0
> lrwx------ 1 root root 64 Nov 28 04:42 2 -> /dev/pts/0
> lr-x------ 1 root root 64 Nov 28 04:42 3 -> /path/to/script.R
> lrwx------ 1 root root 64 Nov 28 04:42 4 -> /path/on/nfs/write.lock
> l-wx------ 1 root root 64 Nov 28 04:42 6 -> 'pipe:[266120]'
> l-wx------ 1 root root 64 Nov 28 04:42 8 -> 'pipe:[266121]'
>
> ### second child (tries writing to fd 7)
> (gdb) shell ls -l /proc/22135/fd
> total 0
> lr-x------ 1 root root 64 Nov 28 04:42 0 -> 'pipe:[266123]'
> lrwx------ 1 root root 64 Nov 28 04:42 1 -> /dev/pts/0
> l-wx------ 1 root root 64 Nov 28 04:42 10 -> 'pipe:[266123]'
> lrwx------ 1 root root 64 Nov 28 04:42 2 -> /dev/pts/0
> lr-x------ 1 root root 64 Nov 28 04:42 3 -> /path/to/script.R
> lrwx------ 1 root root 64 Nov 28 04:42 4 -> /path/on/nfs/write.lock
>
>
> # debugging mc_send_master in both child processes:
>
> ### first child (all OK):
> (gdb) break mc_send_master
> Breakpoint 1 at 0x7f5b2687b0a0: file fork.c, line 681.
> (gdb) c
> Continuing.
>
> Breakpoint 1, mc_send_master (what=0x555c6dd2cd00) at fork.c:681
> warning: Source file is more recent than executable.
> 681	{
> (gdb) info args
> what = 0x555c6dd2cd00
> (gdb) n
> 682	    if (is_master)
> (gdb) n
> 684	    if (master_fd == -1)
> (gdb) n
> 686	    if (TYPEOF(what) != RAWSXP)
> (gdb) n
> 688	    R_xlen_t len = XLENGTH(what);
> (gdb) n
> 689	    unsigned char *b = RAW(what);
> (gdb) n
> 693	    if (writerep(master_fd, &len, sizeof(len)) != sizeof(len)) {
> (gdb) info locals
> len = 538
> b = <optimized out>
> n = <optimized out>
> (gdb) s
> writerep (fildes=6, buf=buf at entry=0x7ffdd6da7db0, nbyte=nbyte at entry=8)
>      at fork.c:653
> 653	{
> (gdb) info args
> fildes = 6
> buf = 0x7ffdd6da7db0
> nbyte = 8
> (gdb) n
> 654	    size_t wbyte = 0;
> (gdb) n
> 653	{
> (gdb) n
> 657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
> (gdb) n
> 658		if (w == -1) {
> (gdb) n
> 657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
> (gdb) n
> 658		if (w == -1) {
> (gdb) n
> 664		if (w == 0) {
> (gdb) n
> 670		wbyte += w;
> (gdb) n
> 671		if (wbyte == nbyte)
> (gdb) n
> 672		    return wbyte;
> (gdb) n
> 674	}
> (gdb) n
> mc_send_master (what=<optimized out>) at fork.c:699
> 699	    for (R_xlen_t i = 0; i < len; i += n) {
> (gdb) n
> 700		n = writerep(master_fd, b + i, len - i);
> (gdb) n
> 701		if (n < 1) {
> (gdb) n
> 699	    for (R_xlen_t i = 0; i < len; i += n) {
> (gdb) n
> 707	    return ScalarLogical(1);
> (gdb) n
> 708	}
>
>
>
> ### second child (write fails with EBADF):
> (gdb) break mc_send_master
> Breakpoint 1 at 0x7f5016f3e0a0: file fork.c, line 681.
> (gdb) c
> Continuing.
>
> Breakpoint 1, mc_send_master (what=0x563382a71910) at fork.c:681
> warning: Source file is more recent than executable.
> 681	{
> (gdb) info args
> what = 0x563382a71910
> (gdb) n
> 682	    if (is_master)
> (gdb) n
> 684	    if (master_fd == -1)
> (gdb) n
> 686	    if (TYPEOF(what) != RAWSXP)
> (gdb) n
> 688	    R_xlen_t len = XLENGTH(what);
> (gdb) n
> 689	    unsigned char *b = RAW(what);
> (gdb) n
> 693	    if (writerep(master_fd, &len, sizeof(len)) != sizeof(len)) {
> (gdb) info locals
> len = 526
> b = <optimized out>
> n = <optimized out>
> (gdb) s
> writerep (fildes=7, buf=buf at entry=0x7fff4027ad60, nbyte=nbyte at entry=8)
>      at fork.c:653
> 653	{
> (gdb) info args
> fildes = 7
> buf = 0x7fff4027ad60
> nbyte = 8
> (gdb) n
> 654	    size_t wbyte = 0;
> (gdb) n
> 653	{
> (gdb) n
> 657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
> (gdb) n
> 658		if (w == -1) {
> (gdb) info locals
> w = <optimized out>
> wbyte = 0
> ptr = 0x7fff4027ad60 "\016\002"
> (gdb) n
> 657		ssize_t w = write(fildes, ptr + wbyte, nbyte - wbyte);
> (gdb) n
> 658		if (w == -1) {
> (gdb) n
> 659		    if (errno == EINTR)
> (gdb) n
> 674	}
> (gdb) p __errno_location()
> $1 = (int *) 0x7f50322cb540
> (gdb) x/x $1
> 0x7f50322cb540:	0x00000009
> (gdb) python import errno
> (gdb) python print(errno.errorcode[9])
> EBADF
> (gdb) n
> mc_send_master (what=<optimized out>) at fork.c:702
> 702		    close(master_fd);
> (gdb) n
> 704		    error(_("write error, closing pipe to the master"));
> (gdb) n
> 703		    master_fd = -1;
> (gdb) n
> 704		    error(_("write error, closing pipe to the master"));
> (gdb) n
> 685		error(_("there is no pipe to the master process"));
>
>
> Does this help in any way?
>
> Is there something else I can/should look at?
>
> Regards,
> Andreas
>
>
> 2019-11-27 15:04 GMT+01:00 Tomas Kalibera<tomas.kalibera at gmail.com>:
>> Hi Andreas,
>> the error is reported when some child process cannot send results to the master process, which originates from an error returned by write() - when write() returns -1 or 0. The logic around the writing has not changed since R 3.5.2. It should not be related to the printing in the child, only to returning the value. The problem may be originating from the execution environment, virtualization, and/or possibly from a lack of robustness in R. To resolve this we need to find out which error was returned and why. Either you can try to create a reproducible example (something I could use to trigger an error on my system and then debug) or to debug on your system (build R from source, ensure the bug is still triggered, then instrument to print the exact error from the OS and where it was detected, etc). In principle you could also try without code instrumentation just using strace. Just from looking at the code in R around the writing I am not seeing any bug there. If you choose to debug on your system I can help with the instrumentation.
>>
>> Best
>> Tomas
>>
>> On 11/27/19 12:40 PM, Andreas Kersting wrote:
>>> Hi again,
>>>
>>> One important correction of my first message: I misinterpreted the output. Actually in that R session 2 input files were processed one after the other in a loop. The first (with 88 parts went fine). The second (with 85 parts) produced the sendMaster errors and failed. If (in a new session via Rscript) I only process the second input file it will work. The other observations on R vs Rscript, NFS share etc. still hold.
>>>
>>> Sorry for this! Regards,
>>> Andreas
>>>
>>> 2019-11-27 12:10 GMT+01:00 Andreas Kersting<r-devel at akersting.de>:
>>>> Hi,
>>>>
>>>> I am facing a very weird problem with parallel::mclapply. I have a script which does some data wrangling on an input dataset in parallel and then writes the results to disk. I have been using this script daily for more than one year always on an EC2 instance launched from the same AMI (no updates installed after launch) and processed thousands of different input data sets successfully. I now have an input dataset for which I face the following bug:
>>>>
>>>> The basic outline of the problematic section of the script:
>>>>
>>>> # parts is a data.table with 88 rows
>>>> mc_ret <- parallel::mclapply(sample.int(nrow(parts)), function(i) {
>>>>     # do some data wrangling and write the result to a file
>>>>     # ...
>>>>
>>>>     print(paste0("part ", i, " written successfully."))
>>>>     return(TRUE)
>>>> }, mc.preschedule = FALSE, mc.cores = 2L)
>>>>
>>>> str(mc_ret)
>>>>
>>>>
>>>> Expected output: "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed once. All outputs are created successfully.
>>>>
>>>> Actual output (see end of the message): "part i written successfully." is printed 88 times, once for each value of i. mc_ret is a list of length 88, each element being TRUE. Its structure is printed. All outputs are created successfully. So far so good.
>>>>
>>>> But then "part i written successfully." it is printed another X times, for values of i for which it was already printed. This output is intermingled with X-1 times the following error message:
>>>>
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>>
>>>> and Y times the message "Execution halted". mc_ret is printed again, now being a list of length 85, with the first element being TRUE and all other elements being NULL. X and Y vary from run to run.
>>>>
>>>>
>>>> Now to the main problem: I tried very hard to create a reproducible example, but I failed. What I observed:
>>>> - The output is (and has always been) written to path which is on an NFS share. If I instead write to a path on a local disk it will work.
>>>> - The script is invoked using Rscript. If I instead source it from an interactive R session it works. There are at least two more people who have observed this: https://stackoverflow.com/questions/51986674/mclapply-sendmaster-error-only-with-rscript
>>>> - Before the call to mclapply the code acquires an exclusive file lock on a dedicated lock file, not written to but also on the NFS share. If I remove the code acquiring the lock, the whole script will also work if called using Rscript.
>>>> - The problem also occurs for mc.preschedule = TRUE.
>>>> - There is no error if I set mc.cores to 1.
>>>> - And stressing again: the code works without any changes from Rscript for thousands of other data sets.
>>>>
>>>>
>>>> Rscript -e "sessionInfo()":
>>>> R version 3.5.2 (2018-12-20)
>>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>>> Running under: Ubuntu 18.04.2 LTS
>>>>
>>>> Matrix products: default
>>>> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
>>>> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
>>>>
>>>> locale:
>>>>    [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8
>>>>    [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8
>>>>    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C
>>>> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C
>>>>
>>>> attached base packages:
>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>>
>>>> loaded via a namespace (and not attached):
>>>> [1] compiler_3.5.2
>>>>
>>>>
>>>> I know this is a fairly old R version. I have not been able to reproduce the bug with a more recent version, but since it is so difficult to trigger, this does not mean much, I guess. I have looked through the changes made to the code of mclapply since that version and could not find something directly related. I am not even sure if it is a problem in the parallel package or some other (memory) bug. What strikes me is that others have observed a very similar error when using Rscript but not when using an interactive R session, just like I do.
>>>>
>>>> I am not expecting a fix based on the information I provide, but maybe someone has some thoughts on this!?
>>>>
>>>> Regards,
>>>> Andreas
>>>>
>>>>
>>>>
>>>>
>>>> Actual output:
>>>>
>>>> [1] "part 51 written successfully."
>>>> [1] "part 30 written successfully."
>>>> [1] "part 32 written successfully."
>>>> [1] "part 48 written successfully."
>>>> [1] "part 63 written successfully."
>>>> [1] "part 5 written successfully."
>>>> [1][1] "part 14 written successfully." "part 18 written successfully."
>>>>
>>>> [1] "part 38 written successfully."
>>>> [1] "part 11 written successfully."
>>>> [1] "part 68 written successfully."
>>>> [1] "part 45 written successfully."
>>>> [1] "part 88 written successfully."
>>>> [1] "part 36 written successfully."
>>>> [1] "part 44 written successfully."
>>>> [1] "part 55 written successfully."
>>>> [1] "part 26 written successfully."
>>>> [1] "part 37 written successfully."
>>>> [1] "part 22 written successfully."
>>>> [1] "part 13 written successfully."
>>>> [1] "part 67 written successfully."
>>>> [1] "part 10 written successfully."
>>>> [1] "part 24 written successfully."
>>>> [1] "part 20 written successfully."
>>>> [1] "part 74 written successfully."
>>>> [1] "part 50 written successfully."
>>>> [1] "part 2 written successfully."
>>>> [1] "part 17 written successfully."
>>>> [1] "part 66 written successfully."
>>>> [1] "part 61 written successfully."
>>>> [1][1] "part 7 written successfully." "part 31 written successfully."
>>>>
>>>> [1] "part 70 written successfully."
>>>> [1] "part 71 written successfully."
>>>> [1][1] "part 76 written successfully."
>>>>    "part 42 written successfully."
>>>> [1][1] "part 72 written successfully." "part 12 written successfully."
>>>>
>>>> [1] "part 39 written successfully."
>>>> [1] "part 58 written successfully."
>>>> [1] "part 87 written successfully."
>>>> [1] "part 81 written successfully."
>>>> [1] "part 3 written successfully."
>>>> [1] "part 29 written successfully."
>>>> [1] "part 82 written successfully."
>>>> [1] "part 54 written successfully."
>>>> [1] "part 23 written successfully."
>>>> [1] "part 56 written successfully."
>>>> [1] "part 73 written successfully."
>>>> [1] "part 27 written successfully."
>>>> [1] "part 64 written successfully."
>>>> [1] "part 46 written successfully."
>>>> [1] "part 80 written successfully."
>>>> [1] "part 53 written successfully."
>>>> [1] "part 43 written successfully."
>>>> [1] "part 47 written successfully."
>>>> [1] "part 57 written successfully."
>>>> [1] "part 75 written successfully."
>>>> [1] "part 84 written successfully."
>>>> [1] "part 85 written successfully."
>>>> [1][1] "part 86 written successfully."
>>>>    "part 19 written successfully."
>>>> [1][1] "part 33 written successfully." "part 34 written successfully."
>>>>
>>>> [1] "part 21 written successfully."
>>>> [1] "part 40 written successfully."
>>>> [1][1] "part 4 written successfully."
>>>>    "part 28 written successfully."
>>>> [1] "part 62 written successfully."
>>>> [1] "part 16 written successfully."
>>>> [1] "part 79 written successfully."
>>>> [1] "part 6 written successfully."
>>>> [1] "part 77 written successfully."
>>>> [1] "part 65 written successfully."
>>>> [1] "part 60 written successfully."
>>>> [1] "part 78 written successfully."
>>>> [1] "part 1 written successfully."
>>>> [1] "part 83 written successfully."
>>>> [1] "part 9 written successfully."
>>>> [1] "part 15 written successfully."
>>>> [1][1] "part 41 written successfully."
>>>>    "part 35 written successfully."
>>>> [1][1] "part 8 written successfully." "part 69 written successfully."
>>>>
>>>> [1] "part 59 written successfully."
>>>> [1] "part 25 written successfully."
>>>> [1] "part 49 written successfully."
>>>> [1] "part 52 written successfully."
>>>> List of 88
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>>    $ : logi TRUE
>>>> [1] "part 31 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> lapply -> FUN -> mcparallel -> sendMaster
>>>> [1] "part 71 written successfully."
>>>> [1] "part 35 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 42 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 4 written successfully."
>>>> Execution halted
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1][1] "part 30 written successfully." "part 40 written successfully."
>>>>
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 41 written successfully."
>>>> [1] "part 80 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 45 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 82 written successfully."
>>>> [1] "part 54 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 59 written successfully."
>>>> Execution halted
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 27 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 36 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 44 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> Execution halted
>>>> [1] "part 83 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 61 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 70 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 66 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 10 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> Execution halted
>>>> [1] "part 53 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 55 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 15 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 50 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 5 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> Execution halted
>>>> [1] "part 48 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 32 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 69 written successfully."
>>>> Execution halted
>>>> [1] "part 52 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 77 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> Execution halted
>>>> [1] "part 24 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 56 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 6 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 62 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 33 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 16 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 34 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 74 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 2 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 19 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> [1] "part 9 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 11 written successfully."
>>>> [1] "part 28 written successfully."
>>>> [1] "part 29 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 17 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 65 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> Execution halted
>>>> Execution halted
>>>> [1] "part 68 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 43 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 38 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 1 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 57 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 8 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1] "part 25 written successfully."
>>>> Error in sendMaster(try(eval(expr, env), silent = TRUE)) :
>>>>     write error, closing pipe to the master
>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMaster
>>>> [1]List of 85
>>>>    $ : logi TRUE
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>>    $ : NULL
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From r-deve| @end|ng |rom @ker@t|ng@de  Thu Nov 28 13:54:31 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Thu, 28 Nov 2019 13:54:31 +0100 (CET)
Subject: [Rd] error in parallel:::sendMaster
In-Reply-To: <47cd55ca-294a-81a2-894a-e48cc588aa45@gmail.com>
Message-ID: <E1iaJJX-000885-Ed@rmmprod05.runbox>

Hi Tomas,

I rebuild R (v3.5.2 for now, R-devel to follow) from the Debian package with MC_DEBUG defined and hopefully also with "-Wall -O0 -gdwarf-2 -g3", though I still have to verify this.

Below is the output. I think it is a total of two mclapply invocations in this R session, the failing one starting around the lines "[1] 15381" and "[1] 15382". The "Error in partDF::write_partDF ..." is because the script/package checks the return value of mclapply and detects that it is not a list of length 85 with only the elements "TRUE".

Regarding sending you the complete example: I first have to figure out if this is possible at all, because it would involve data of a client.

Regards,
Andreas

parent[15366] created pipes: comm (6->5), sir (8->7)
parent registers new child 15379
child process 15379 started
parent[15366] created pipes: comm (7->6), sir (10->9)
parent registers new child 15380
child process 15380 started
select_children: added child 15380 (6)
select_children: added child 15379 (5)
select_children: maxfd=6, wlen=2, wcount=2, timeout=-1.000000
child 15380: send_master (550 bytes)
  sr = 1
 - read select 1 children: 15380 
child 15380: 'mcexit' called
child 15380 is waiting for permission to exit
read_child_ci(15380) - read length returned 8
read_child_ci(15380) - read 550 at 0 returned 550
select_children: added child 15380 (6)
select_children: added child 15379 (5)
select_children: maxfd=6, wlen=2, wcount=2, timeout=-1.000000
  sr = 1
 - read select 1 children: 15380 
read_child_ci(15380) - read length returned 8
detached child 15380 (signal 10)
child process 15380 got SIGUSR1; child_exit_status=-1
child 15380: exiting
select_children: added child 15379 (5)
select_children: maxfd=5, wlen=1, wcount=1, timeout=-1.000000
child 15380 terminated with exit status 0
child 15379: send_master (550 bytes)
  sr = 1
 - read select 1 children: 15379 
read_child_ci(15379) - read length returned 8
read_child_ci(15379) - read 550 at 0 returned 550
select_children: added child 15379 (5)
select_children: maxfd=5, wlen=1, wcount=1, timeout=-1.000000
child 15379: 'mcexit' called
child 15379 is waiting for permission to exit
  sr = 1
 - read select 1 children: 15379 
read_child_ci(15379) - read length returned 8
detached child 15379 (signal 10)
child process 15379 got SIGUSR1; child_exit_status=-1
child 15379: exiting
removing waited-for child 15380 from the list
killed detached child 15379 (signal 15)
removing waited-for child 2147483647 from the list
child 15379 terminated with exit status 0
removing waited-for child 15379 from the list
parent[15366] created pipes: comm (6->5), sir (8->7)
parent registers new child 15381
child process 15381 started
parent[15366] created pipes: comm (7->6), sir (10->9)
[1] 15381
parent registers new child 15382
child process 15382 started
select_children: added child 15382 (6)
select_children: added child 15381 (5)
select_children: maxfd=6, wlen=2, wcount=2, timeout=-1.000000
  sr = 1
 - read select 1 children: 15382 
read_child_ci(15382) - read length returned 0
detached child 15382 (signal 10)
child process 15382 got SIGUSR1; child_exit_status=-1
select_children: added child 15381 (5)
select_children: maxfd=5, wlen=1, wcount=1, timeout=-1.000000
[1] 15382
child 15382: send_master (526 bytes)
Error in sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE)) : 
  write error, closing pipe to the master
Calls: lapply ... <Anonymous> -> <Anonymous> -> lapply -> FUN -> sendMaster
child 15382: 'mcexit' called
child 15382: exiting
child 15382 terminated with exit status 1
child 15381: send_master (538 bytes)
  sr = 1
 - read select 1 children: 15381 
read_child_ci(15381) - read length returned 8
read_child_ci(15381) - read 538 at 0 returned 538
child 15381: 'mcexit' called
child 15381 is waiting for permission to exit
select_children: added child 15381 (5)
select_children: maxfd=5, wlen=1, wcount=1, timeout=-1.000000
  sr = 1
 - read select 1 children: 15381 
read_child_ci(15381) - read length returned 8
detached child 15381 (signal 10)
child process 15381 got SIGUSR1; child_exit_status=-1
child 15381: exiting
removing waited-for child 15382 from the list
killed detached child 15381 (signal 15)
removing waited-for child 2147483647 from the list
Error in partDF::write_partDF(X, out_path, c("Date", "Panel", "Type",  : 
  at least one core did not return from parllel write; maybe it was killed (be the Linux Out of Memory Killer ?) or there was a fatal error in the forked process(es)
Calls: lapply -> FUN -> write_partDF_repo -> <Anonymous>
Execution halted
killed detached child 15381 (signal 9)
child 15381 terminated with exit status 0
removing waited-for child 15381 from the list
process 15366 parallel shutdown ok


2019-11-28 10:40 GMT+01:00 Tomas Kalibera<tomas.kalibera at gmail.com>:
> Hi Andreas,
> thank you very much, good job finding it was EBADF. Now the question is=20
> why the pipe has been closed prematurely; it could be accidentally by R=20
> (a race condition in the cleanup code in fork.c) or possibly by some=20
> other code running in the same process (maybe the R program itself or=20
> some other code it runs). Maybe we can take this off the list and come=20
> back when we know the cause or have it fixed.
> 
> It would help a lot if you could try with R built from source, with=20
> optimizations disabled to get more accurate debug symbols (e.g. env=20
> CFLAGS=3D"-Wall -O0 -gdwarf-2 -g3" CXXFLAGS=3D"-Wall -O0 -gdwarf-2 -g3"=20
> =2E/configure), and with MC_DEBUG defined in fork.c - line 26. Ideally in=
> =20
> R-devel, so that we are sure the problem still exists. The debug=20
> messages should give a hint whether it was R (fork.c) that closed the=20
> pipe and why. Maybe you could also add a debug message to=20
> close_fds_child_ci() to see if it was closed there. Maybe you could find =
> 
> this out even in your current debugging setup via breakpoints and=20
> backtraces, but I think it may be easier to build from source with these =
> 
> debugging messages.
> 
> Also if you could send me a complete example I could run that causes=20
> this on your system, that would be nice (even if it didn't cause the=20
> problem on my system).
> 
> Thanks
> Tomas
> 
> On 11/28/19 6:35 AM, Andreas Kersting wrote:
>> Hi Tomas,
>>
>> Thanks for your prompt reply and your offer to help. I might need to ge=
> t back to this since I am not too experienced in debugging these kinds of=
> issues. Anyway, I gave it a try and I think I have found the immediate c=
> ause:
>>
>> I installed the debug symbols (r-base-core-dbg), placed https://github.=
> com/wch/r-source/blob/tags/R-3-5-2/src/library/parallel/src/fork.c in cwd=
> and changed the wrapper code to:
>>
>> mc_ret <- parallel::mclapply(seq_len(nrow(parts)), function(i) {
>>      # we fail for the input resulting in parts having 85 rows
>>      if (nrow(parts) =3D=3D 85L && !file.exists(as.character(Sys.getpid=
> ()))) {
>>        file.create(as.character(Sys.getpid()))
>>        print(Sys.getpid())
>>        Sys.sleep(30)
>>      }
>>
>>      # ...
>>
>>      return(TRUE)
>>    }, mc.preschedule =3D TRUE, mc.cores =3D 2L)
>>
>> This way I ended up with only two child processes to which I each attac=
> hed a debugger. In total I ran about 10 debugging sessions and it was alw=
> ays the second child process failing. The errno after write returned -1 w=
> as 9 (EBADF).
>>
>>  From what I can see, the reason for this is that the second child trie=
> s to write to fd 7, but already during the very beginning of the first in=
> vocation of the anonymous function to parallelize, i.e. during Sys.sleep(=
> 30), there is no such file descriptor. From this observation I would conc=
> lude that it is NOT the code run from that function, i.e. # ...,  causing=
> the issue. Let me point out again, that this is NOT the very first invoc=
> ation of mclapply in this R session. There is at least one previous call =
> to it, which works fine.
>>
>>
>> File descriptors directly after attaching gdb to both child processes d=
> uring Sys.sleep(30):
>>
>> ### master
>> root at ip-10-0-48-30:~/latest_test# ls -l /proc/22119/fd
>> total 0
>> lrwx------ 1 root root 64 Nov 28 04:49 0 -> /dev/pts/0
>> lrwx------ 1 root root 64 Nov 28 04:49 1 -> /dev/pts/0
>> lrwx------ 1 root root 64 Nov 28 04:49 2 -> /dev/pts/0
>> lr-x------ 1 root root 64 Nov 28 04:49 3 -> /path/to/script.R
>> lrwx------ 1 root root 64 Nov 28 04:49 4 -> /path/on/nfs/write.lock
>> lr-x------ 1 root root 64 Nov 28 04:49 5 -> 'pipe:[266120]'
>> l-wx------ 1 root root 64 Nov 28 04:49 8 -> 'pipe:[266121]'
>>
>>
>> ### first child (writes to fd 6)
>> (gdb) shell ls -l /proc/22134/fd
>> total 0
>> lrwx------ 1 root root 64 Nov 28 04:42 0 -> /dev/pts/0
>> lrwx------ 1 root root 64 Nov 28 04:42 1 -> /dev/pts/0
>> lrwx------ 1 root root 64 Nov 28 04:42 2 -> /dev/pts/0
>> lr-x------ 1 root root 64 Nov 28 04:42 3 -> /path/to/script.R
>> lrwx------ 1 root root 64 Nov 28 04:42 4 -> /path/on/nfs/write.lock
>> l-wx------ 1 root root 64 Nov 28 04:42 6 -> 'pipe:[266120]'
>> l-wx------ 1 root root 64 Nov 28 04:42 8 -> 'pipe:[266121]'
>>
>> ### second child (tries writing to fd 7)
>> (gdb) shell ls -l /proc/22135/fd
>> total 0
>> lr-x------ 1 root root 64 Nov 28 04:42 0 -> 'pipe:[266123]'
>> lrwx------ 1 root root 64 Nov 28 04:42 1 -> /dev/pts/0
>> l-wx------ 1 root root 64 Nov 28 04:42 10 -> 'pipe:[266123]'
>> lrwx------ 1 root root 64 Nov 28 04:42 2 -> /dev/pts/0
>> lr-x------ 1 root root 64 Nov 28 04:42 3 -> /path/to/script.R
>> lrwx------ 1 root root 64 Nov 28 04:42 4 -> /path/on/nfs/write.lock
>>
>>
>> # debugging mc_send_master in both child processes:
>>
>> ### first child (all OK):
>> (gdb) break mc_send_master
>> Breakpoint 1 at 0x7f5b2687b0a0: file fork.c, line 681.
>> (gdb) c
>> Continuing.
>>
>> Breakpoint 1, mc_send_master (what=3D0x555c6dd2cd00) at fork.c:681
>> warning: Source file is more recent than executable.
>> 681	{
>> (gdb) info args
>> what =3D 0x555c6dd2cd00
>> (gdb) n
>> 682	    if (is_master)
>> (gdb) n
>> 684	    if (master_fd =3D=3D -1)
>> (gdb) n
>> 686	    if (TYPEOF(what) !=3D RAWSXP)
>> (gdb) n
>> 688	    R_xlen_t len =3D XLENGTH(what);
>> (gdb) n
>> 689	    unsigned char *b =3D RAW(what);
>> (gdb) n
>> 693	    if (writerep(master_fd, &len, sizeof(len)) !=3D sizeof(len)) {
>> (gdb) info locals
>> len =3D 538
>> b =3D <optimized out>
>> n =3D <optimized out>
>> (gdb) s
>> writerep (fildes=3D6, buf=3Dbuf at entry=3D0x7ffdd6da7db0, nbyte=3Dnbyte at e=
> ntry=3D8)
>>      at fork.c:653
>> 653	{
>> (gdb) info args
>> fildes =3D 6
>> buf =3D 0x7ffdd6da7db0
>> nbyte =3D 8
>> (gdb) n
>> 654	    size_t wbyte =3D 0;
>> (gdb) n
>> 653	{
>> (gdb) n
>> 657		ssize_t w =3D write(fildes, ptr + wbyte, nbyte - wbyte);
>> (gdb) n
>> 658		if (w =3D=3D -1) {
>> (gdb) n
>> 657		ssize_t w =3D write(fildes, ptr + wbyte, nbyte - wbyte);
>> (gdb) n
>> 658		if (w =3D=3D -1) {
>> (gdb) n
>> 664		if (w =3D=3D 0) {
>> (gdb) n
>> 670		wbyte +=3D w;
>> (gdb) n
>> 671		if (wbyte =3D=3D nbyte)
>> (gdb) n
>> 672		    return wbyte;
>> (gdb) n
>> 674	}
>> (gdb) n
>> mc_send_master (what=3D<optimized out>) at fork.c:699
>> 699	    for (R_xlen_t i =3D 0; i < len; i +=3D n) {
>> (gdb) n
>> 700		n =3D writerep(master_fd, b + i, len - i);
>> (gdb) n
>> 701		if (n < 1) {
>> (gdb) n
>> 699	    for (R_xlen_t i =3D 0; i < len; i +=3D n) {
>> (gdb) n
>> 707	    return ScalarLogical(1);
>> (gdb) n
>> 708	}
>>
>>
>>
>> ### second child (write fails with EBADF):
>> (gdb) break mc_send_master
>> Breakpoint 1 at 0x7f5016f3e0a0: file fork.c, line 681.
>> (gdb) c
>> Continuing.
>>
>> Breakpoint 1, mc_send_master (what=3D0x563382a71910) at fork.c:681
>> warning: Source file is more recent than executable.
>> 681	{
>> (gdb) info args
>> what =3D 0x563382a71910
>> (gdb) n
>> 682	    if (is_master)
>> (gdb) n
>> 684	    if (master_fd =3D=3D -1)
>> (gdb) n
>> 686	    if (TYPEOF(what) !=3D RAWSXP)
>> (gdb) n
>> 688	    R_xlen_t len =3D XLENGTH(what);
>> (gdb) n
>> 689	    unsigned char *b =3D RAW(what);
>> (gdb) n
>> 693	    if (writerep(master_fd, &len, sizeof(len)) !=3D sizeof(len)) {
>> (gdb) info locals
>> len =3D 526
>> b =3D <optimized out>
>> n =3D <optimized out>
>> (gdb) s
>> writerep (fildes=3D7, buf=3Dbuf at entry=3D0x7fff4027ad60, nbyte=3Dnbyte at e=
> ntry=3D8)
>>      at fork.c:653
>> 653	{
>> (gdb) info args
>> fildes =3D 7
>> buf =3D 0x7fff4027ad60
>> nbyte =3D 8
>> (gdb) n
>> 654	    size_t wbyte =3D 0;
>> (gdb) n
>> 653	{
>> (gdb) n
>> 657		ssize_t w =3D write(fildes, ptr + wbyte, nbyte - wbyte);
>> (gdb) n
>> 658		if (w =3D=3D -1) {
>> (gdb) info locals
>> w =3D <optimized out>
>> wbyte =3D 0
>> ptr =3D 0x7fff4027ad60 "\016\002"
>> (gdb) n
>> 657		ssize_t w =3D write(fildes, ptr + wbyte, nbyte - wbyte);
>> (gdb) n
>> 658		if (w =3D=3D -1) {
>> (gdb) n
>> 659		    if (errno =3D=3D EINTR)
>> (gdb) n
>> 674	}
>> (gdb) p __errno_location()
>> $1 =3D (int *) 0x7f50322cb540
>> (gdb) x/x $1
>> 0x7f50322cb540:	0x00000009
>> (gdb) python import errno
>> (gdb) python print(errno.errorcode[9])
>> EBADF
>> (gdb) n
>> mc_send_master (what=3D<optimized out>) at fork.c:702
>> 702		    close(master_fd);
>> (gdb) n
>> 704		    error(_("write error, closing pipe to the master"));
>> (gdb) n
>> 703		    master_fd =3D -1;
>> (gdb) n
>> 704		    error(_("write error, closing pipe to the master"));
>> (gdb) n
>> 685		error(_("there is no pipe to the master process"));
>>
>>
>> Does this help in any way?
>>
>> Is there something else I can/should look at?
>>
>> Regards,
>> Andreas
>>
>>
>> 2019-11-27 15:04 GMT+01:00 Tomas Kalibera<tomas.kalibera at gmail.com>:
>>> Hi Andreas,
>>> the error is reported when some child process cannot send results to t=
> he master process, which originates from an error returned by write() - w=
> hen write() returns -1 or 0. The logic around the writing has not changed=
> since R 3.5.2. It should not be related to the printing in the child, on=
> ly to returning the value. The problem may be originating from the execut=
> ion environment, virtualization, and/or possibly from a lack of robustnes=
> s in R. To resolve this we need to find out which error was returned and =
> why. Either you can try to create a reproducible example (something I cou=
> ld use to trigger an error on my system and then debug) or to debug on yo=
> ur system (build R from source, ensure the bug is still triggered, then i=
> nstrument to print the exact error from the OS and where it was detected,=
> etc). In principle you could also try without code instrumentation just =
> using strace. Just from looking at the code in R around the writing I am =
> not seeing any bug there. If you choose to debug on your system I can hel=
> p with the instrumentation.
>>>
>>> Best
>>> Tomas
>>>
>>> On 11/27/19 12:40 PM, Andreas Kersting wrote:
>>>> Hi again,
>>>>
>>>> One important correction of my first message: I misinterpreted the ou=
> tput. Actually in that R session 2 input files were processed one after t=
> he other in a loop. The first (with 88 parts went fine). The second (with=
> 85 parts) produced the sendMaster errors and failed. If (in a new sessio=
> n via Rscript) I only process the second input file it will work. The oth=
> er observations on R vs Rscript, NFS share etc. still hold.
>>>>
>>>> Sorry for this! Regards,
>>>> Andreas
>>>>
>>>> 2019-11-27 12:10 GMT+01:00 Andreas Kersting<r-devel at akersting.de>:
>>>>> Hi,
>>>>>
>>>>> I am facing a very weird problem with parallel::mclapply. I have a s=
> cript which does some data wrangling on an input dataset in parallel and =
> then writes the results to disk. I have been using this script daily for =
> more than one year always on an EC2 instance launched from the same AMI (=
> no updates installed after launch) and processed thousands of different i=
> nput data sets successfully. I now have an input dataset for which I face=
> the following bug:
>>>>>
>>>>> The basic outline of the problematic section of the script:
>>>>>
>>>>> # parts is a data.table with 88 rows
>>>>> mc_ret <- parallel::mclapply(sample.int(nrow(parts)), function(i) {
>>>>>     # do some data wrangling and write the result to a file
>>>>>     # ...
>>>>>
>>>>>     print(paste0("part ", i, " written successfully."))
>>>>>     return(TRUE)
>>>>> }, mc.preschedule =3D FALSE, mc.cores =3D 2L)
>>>>>
>>>>> str(mc_ret)
>>>>>
>>>>>
>>>>> Expected output: "part i written successfully." is printed 88 times,=
> once for each value of i. mc_ret is a list of length 88, each element be=
> ing TRUE. Its structure is printed once. All outputs are created successf=
> ully.
>>>>>
>>>>> Actual output (see end of the message): "part i written successfully=
> =2E" is printed 88 times, once for each value of i. mc_ret is a list of l=
> ength 88, each element being TRUE. Its structure is printed. All outputs =
> are created successfully. So far so good.
>>>>>
>>>>> But then "part i written successfully." it is printed another X time=
> s, for values of i for which it was already printed. This output is inter=
> mingled with X-1 times the following error message:
>>>>>
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>>
>>>>> and Y times the message "Execution halted". mc_ret is printed again,=
> now being a list of length 85, with the first element being TRUE and all=
> other elements being NULL. X and Y vary from run to run.
>>>>>
>>>>>
>>>>> Now to the main problem: I tried very hard to create a reproducible =
> example, but I failed. What I observed:
>>>>> - The output is (and has always been) written to path which is on an=
> NFS share. If I instead write to a path on a local disk it will work.
>>>>> - The script is invoked using Rscript. If I instead source it from a=
> n interactive R session it works. There are at least two more people who =
> have observed this: https://stackoverflow.com/questions/51986674/mclapply=
> -sendmaster-error-only-with-rscript
>>>>> - Before the call to mclapply the code acquires an exclusive file lo=
> ck on a dedicated lock file, not written to but also on the NFS share. If=
> I remove the code acquiring the lock, the whole script will also work if=
> called using Rscript.
>>>>> - The problem also occurs for mc.preschedule =3D TRUE.
>>>>> - There is no error if I set mc.cores to 1.
>>>>> - And stressing again: the code works without any changes from Rscri=
> pt for thousands of other data sets.
>>>>>
>>>>>
>>>>> Rscript -e "sessionInfo()":
>>>>> R version 3.5.2 (2018-12-20)
>>>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>>>> Running under: Ubuntu 18.04.2 LTS
>>>>>
>>>>> Matrix products: default
>>>>> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
>>>>> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
>>>>>
>>>>> locale:
>>>>>    [1] LC_CTYPE=3DC.UTF-8       LC_NUMERIC=3DC           LC_TIME=3DC=
> =2EUTF-8
>>>>>    [4] LC_COLLATE=3DC.UTF-8     LC_MONETARY=3DC.UTF-8    LC_MESSAGES=
> =3DC.UTF-8
>>>>>    [7] LC_PAPER=3DC.UTF-8       LC_NAME=3DC              LC_ADDRESS=3D=
> C
>>>>> [10] LC_TELEPHONE=3DC         LC_MEASUREMENT=3DC.UTF-8 LC_IDENTIFICA=
> TION=3DC
>>>>>
>>>>> attached base packages:
>>>>> [1] stats     graphics  grDevices utils     datasets  methods   base=
> 
>>>>>
>>>>> loaded via a namespace (and not attached):
>>>>> [1] compiler_3.5.2
>>>>>
>>>>>
>>>>> I know this is a fairly old R version. I have not been able to repro=
> duce the bug with a more recent version, but since it is so difficult to =
> trigger, this does not mean much, I guess. I have looked through the chan=
> ges made to the code of mclapply since that version and could not find so=
> mething directly related. I am not even sure if it is a problem in the pa=
> rallel package or some other (memory) bug. What strikes me is that others=
> have observed a very similar error when using Rscript but not when using=
> an interactive R session, just like I do.
>>>>>
>>>>> I am not expecting a fix based on the information I provide, but may=
> be someone has some thoughts on this!?
>>>>>
>>>>> Regards,
>>>>> Andreas
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> Actual output:
>>>>>
>>>>> [1] "part 51 written successfully."
>>>>> [1] "part 30 written successfully."
>>>>> [1] "part 32 written successfully."
>>>>> [1] "part 48 written successfully."
>>>>> [1] "part 63 written successfully."
>>>>> [1] "part 5 written successfully."
>>>>> [1][1] "part 14 written successfully." "part 18 written successfully=
> =2E"
>>>>>
>>>>> [1] "part 38 written successfully."
>>>>> [1] "part 11 written successfully."
>>>>> [1] "part 68 written successfully."
>>>>> [1] "part 45 written successfully."
>>>>> [1] "part 88 written successfully."
>>>>> [1] "part 36 written successfully."
>>>>> [1] "part 44 written successfully."
>>>>> [1] "part 55 written successfully."
>>>>> [1] "part 26 written successfully."
>>>>> [1] "part 37 written successfully."
>>>>> [1] "part 22 written successfully."
>>>>> [1] "part 13 written successfully."
>>>>> [1] "part 67 written successfully."
>>>>> [1] "part 10 written successfully."
>>>>> [1] "part 24 written successfully."
>>>>> [1] "part 20 written successfully."
>>>>> [1] "part 74 written successfully."
>>>>> [1] "part 50 written successfully."
>>>>> [1] "part 2 written successfully."
>>>>> [1] "part 17 written successfully."
>>>>> [1] "part 66 written successfully."
>>>>> [1] "part 61 written successfully."
>>>>> [1][1] "part 7 written successfully." "part 31 written successfully.=
> "
>>>>>
>>>>> [1] "part 70 written successfully."
>>>>> [1] "part 71 written successfully."
>>>>> [1][1] "part 76 written successfully."
>>>>>    "part 42 written successfully."
>>>>> [1][1] "part 72 written successfully." "part 12 written successfully=
> =2E"
>>>>>
>>>>> [1] "part 39 written successfully."
>>>>> [1] "part 58 written successfully."
>>>>> [1] "part 87 written successfully."
>>>>> [1] "part 81 written successfully."
>>>>> [1] "part 3 written successfully."
>>>>> [1] "part 29 written successfully."
>>>>> [1] "part 82 written successfully."
>>>>> [1] "part 54 written successfully."
>>>>> [1] "part 23 written successfully."
>>>>> [1] "part 56 written successfully."
>>>>> [1] "part 73 written successfully."
>>>>> [1] "part 27 written successfully."
>>>>> [1] "part 64 written successfully."
>>>>> [1] "part 46 written successfully."
>>>>> [1] "part 80 written successfully."
>>>>> [1] "part 53 written successfully."
>>>>> [1] "part 43 written successfully."
>>>>> [1] "part 47 written successfully."
>>>>> [1] "part 57 written successfully."
>>>>> [1] "part 75 written successfully."
>>>>> [1] "part 84 written successfully."
>>>>> [1] "part 85 written successfully."
>>>>> [1][1] "part 86 written successfully."
>>>>>    "part 19 written successfully."
>>>>> [1][1] "part 33 written successfully." "part 34 written successfully=
> =2E"
>>>>>
>>>>> [1] "part 21 written successfully."
>>>>> [1] "part 40 written successfully."
>>>>> [1][1] "part 4 written successfully."
>>>>>    "part 28 written successfully."
>>>>> [1] "part 62 written successfully."
>>>>> [1] "part 16 written successfully."
>>>>> [1] "part 79 written successfully."
>>>>> [1] "part 6 written successfully."
>>>>> [1] "part 77 written successfully."
>>>>> [1] "part 65 written successfully."
>>>>> [1] "part 60 written successfully."
>>>>> [1] "part 78 written successfully."
>>>>> [1] "part 1 written successfully."
>>>>> [1] "part 83 written successfully."
>>>>> [1] "part 9 written successfully."
>>>>> [1] "part 15 written successfully."
>>>>> [1][1] "part 41 written successfully."
>>>>>    "part 35 written successfully."
>>>>> [1][1] "part 8 written successfully." "part 69 written successfully.=
> "
>>>>>
>>>>> [1] "part 59 written successfully."
>>>>> [1] "part 25 written successfully."
>>>>> [1] "part 49 written successfully."
>>>>> [1] "part 52 written successfully."
>>>>> List of 88
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>>    $ : logi TRUE
>>>>> [1] "part 31 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> lapply -> FUN -> mcparallel -> send=
> Master
>>>>> [1] "part 71 written successfully."
>>>>> [1] "part 35 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 42 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 4 written successfully."
>>>>> Execution halted
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1][1] "part 30 written successfully." "part 40 written successfully=
> =2E"
>>>>>
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 41 written successfully."
>>>>> [1] "part 80 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 45 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 82 written successfully."
>>>>> [1] "part 54 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 59 written successfully."
>>>>> Execution halted
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 27 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 36 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 44 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> Execution halted
>>>>> [1] "part 83 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 61 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 70 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 66 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 10 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> Execution halted
>>>>> [1] "part 53 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 55 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 15 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 50 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 5 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> Execution halted
>>>>> [1] "part 48 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 32 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 69 written successfully."
>>>>> Execution halted
>>>>> [1] "part 52 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 77 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> Execution halted
>>>>> [1] "part 24 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 56 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 6 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 62 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 33 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 16 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 34 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 74 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 2 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 19 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> [1] "part 9 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 11 written successfully."
>>>>> [1] "part 28 written successfully."
>>>>> [1] "part 29 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 17 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 65 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> Execution halted
>>>>> Execution halted
>>>>> [1] "part 68 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 43 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 38 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 1 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 57 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 8 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1] "part 25 written successfully."
>>>>> Error in sendMaster(try(eval(expr, env), silent =3D TRUE)) :
>>>>>     write error, closing pipe to the master
>>>>> Calls: lapply ... <Anonymous> -> <Anonymous> -> mcparallel -> sendMa=
> ster
>>>>> [1]List of 85
>>>>>    $ : logi TRUE
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>>    $ : NULL
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
> 
> 
> 

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Nov 28 15:30:51 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 28 Nov 2019 15:30:51 +0100
Subject: [Rd] head.matrix can return 1000s of columns ..
In-Reply-To: <CAD4oTHHxHmK6jmBSGrBsyZnCnxtLTrSyGyL726VHJd=rsGri8Q@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <CAD4oTHHxHmK6jmBSGrBsyZnCnxtLTrSyGyL726VHJd=rsGri8Q@mail.gmail.com>
Message-ID: <24031.55835.391659.40382@stat.math.ethz.ch>

>>>>> Gabriel Becker 
>>>>>     on Sat, 2 Nov 2019 12:40:16 -0700 writes:

    [....................]

In the mean time,  Gabe had worked quite a bit and provided a
patch proposal  at R's bugzilla,  PR#17652 ,
i.e., here
      https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17652

A few days ago, I had committed a (slightly simplified) version
of that to R-devel (svn rev 77462 )
with NEWS entry

    * head(x, n) and tail() default and other S3 methods notably for
      _vector_ n, e.g. to get a "corner" of a matrix, also extended for
      array's of higher dimension, thanks to the patch proposal by Gabe
      Becker in PR#16764.

 (which contains a *wrong* PR number that I've corrected in the
  mean time)

A day or so later, the CRAN has alerted me to the fact that this
change breaks the checks of some CRAN packages, as it seems
about 30 now.

There were at least two principal reasons, one of which was the
fact that data frame subsetting has been somewhat surprising in R,
without being documented so, *and* some packages have
inadvertently made use of this pecularity -- which was
inadvertently changed by r77462.

In short,   head(<data frame>)  kept extraneous attributes
because indeed
                d[i, ]
keeps those attributes ... for data frames.

I will amend the  head() and tail() methods to remain back
compatible (as much as sensible) for now,  but here's what I've
found about subsetting, i.e., behavior of the (partly C code
internal)  `[`  methods in R :

1)  For a data frame d,  d[i, ]  differs  from  d[i,j],
    as the former keeps (extra) attributes,
2)  For a matrix both forms of indexing do not keep (extra) attributes.

Here's some simple reproducible R code exhibiting the claim:

##==== Data frame subsetting (vs. matrix, array)  "with extra attributes": =====
## data frame w/ a (non-standard) attribute:
str(treeS <- structure(trees, foo = "bar"))

chkMat <- function(M) {
    stopifnot(nzchar(Mfoo <- attr(M, "foo")),
              length(d <- dim(M)) == 2,
              (n <- d[1]) >= 6, d[2] >= 3)
    ## n = nrow(M)
    stopifnot(exprs = { # attribute is kept
        if(inherits(M, "data.frame")) {
            identical(  attr(M[    1:3 , ] , "foo") , "bar") &&
            identical(  attr(M[(n-2):n , ] , "foo") , "bar")
        } else { ## matrix
            is.null  (  attr(M[    1:3 , ] , "foo")) &&
            is.null  (  attr(M[(n-2):n , ] , "foo"))
        }
        ## OTOH,  [i,j]-indexing of data frames *does* drop "other" attributes:
        inherits(print(t.ij <- M[(n-2):n, 2:3] ), class(M))
        ## now, the "foo" attribute of  M[i,j] is gone!
        is.null(attr(t.ij, "foo"))
    })
}

chkMat(treeS)
chkMat(as.matrix(treeS))

-------

And (to repeat), currently  head(d, n)  is the same as   d[1:n , ]
when n >= 1,  length(n) == 1  and this equality is relied upon
by CRAN package code out there .. and hence I'll keep it with
the "generalized" head() & tail() in R-devel.

Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Nov 28 23:18:07 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 28 Nov 2019 23:18:07 +0100
Subject: [Rd] calls with comment attribute
In-Reply-To: <CAF8bMcYg+BsPn8z_H-EqBHOAWV7vOjMf_VPPs1tG5W6ZqTsz_g@mail.gmail.com>
References: <CAF8bMcZcPwUZsoC_sg3SpUm2PeGentV0DcKQRdN8JtYb5K_Scw@mail.gmail.com>
 <5bd1a88a-646b-33b3-7107-ca8ee0b3ab90@gmail.com>
 <CAF8bMcYg+BsPn8z_H-EqBHOAWV7vOjMf_VPPs1tG5W6ZqTsz_g@mail.gmail.com>
Message-ID: <309fb270-ec62-c05c-dd71-82cc3ee74e57@gmail.com>


Thanks for spotting this, I've removed the old code in deparse so that 
now the comment attribute is really not printed, as documented in 
?comment. The removed code was needed at the time when comments were 
collected by the parser and stored in the comment attribute, but that is 
no longer the case, now comments are part of source references.

Best
Tomas

On 11/13/19 4:15 AM, William Dunlap via R-devel wrote:
> I suspect that the parser used it to store comments, including the initial
> "#", before R started using the srcref attribute.  (S also stored comments
> in the parse tree.)
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Tue, Nov 12, 2019 at 4:16 PM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
>
>> On 12/11/2019 5:01 p.m., William Dunlap via R-devel wrote:
>>> In general R doesn't print the "comment" attribute of an object
>>>      > structure(1:3, comment=c("a comment", "another comment"))
>>>      [1] 1 2 3
>>> but if the object is a call it prints it in an unusual format
>>>      > structure(quote(func(arg)), comment=c("a comment", "another
>> comment"))
>>>      a comment
>>>      another comment
>>>      func(arg)
>>>
>>> What is the rationale for the special treatment of calls?
>> It was there in revision 2 of src/main/deparse.c in 1997.  (For those
>> unfamiliar with R history:  the current revision of R is 77405.  That
>> particular file has been revised 248 times since rev 2.)
>>
>> I suspect either nobody has noticed it before, or nobody had the nerve
>> to touch it.
>>
>> Duncan Murdoch
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Fri Nov 29 19:05:34 2019
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Fri, 29 Nov 2019 18:05:34 +0000 (UTC)
Subject: [Rd] 
 Inappropriate class(o)[!inherits(o,"AsIs")] in get_all_vars
In-Reply-To: <24018.39079.286099.958408@stat.math.ethz.ch>
References: <1709347581.898771.1573986871851@mail.yahoo.com>
 <24018.32090.951327.313003@stat.math.ethz.ch>
 <24018.39079.286099.958408@stat.math.ethz.ch>
Message-ID: <2095928073.968101.1575050734883@mail.yahoo.com>

 
class(o)[!inherits(o,"AsIs")] is still in function 'get_all_vars' in R patched (in https://svn.r-project.org/R/branches/R-3-6-branch/src/library/stats/R/models.R). It was ported to R patched by r77402.     On Monday, 18 November 2019, 8:12:10 PM GMT+7, Martin Maechler <maechler at stat.math.ethz.ch> wrote:  
 
 >>>>> Martin Maechler 
>>>>>? ? on Mon, 18 Nov 2019 12:15:38 +0100 writes:

>>>>> suharto anggono--- via R-devel 
>>>>>? ? on Sun, 17 Nov 2019 10:34:31 +0000 writes:

? ? >> SVN revision 77401 changes
? ? >> x[isM] <- lapply(x[isM], function(o) `class<-`(o, class(o)[class(o) != "AsIs"]))
? ? >> to
? ? >> x[isM] <- lapply(x[isM], function(o) `class<-`(o, class(o)[!inherits(o,"AsIs")]))
? ? >> in function 'get_all_vars' in src/library/stats/R/models.R in R devel.

? ? >> The change is inappropriate.

? ? >> class(o)[class(o) != "AsIs"] removes "AsIs" from class(o), giving class(o) without "AsIs".

? ? >> On the other hand, inherits(o,"AsIs") is just a single logical value. If "AsIs" is in class(o), inherits(o,"AsIs") is TRUE. In that case, by recycling of logical index, class(o)[!inherits(o,"AsIs")] removes all elements of class(o), giving character(0).

? ? > Thank you, Suharto !

? ? > You are obviously right,? and I'm a bit embarrassed by my
? ? > overzealousness to follow my own recommendations in the? R Blog

? ? > http://bit.ly/R_blog_class_think_2x

? ? > {*wrongly*: The recommendation was to "think again" ...}

? ? > It's a "shame" that the wrong code did not trigger any checks,
? ? > so if anybody has time... I'd be grateful for such a regression
? ? > check.

Once I started thinking, it was easy to modify the previous
reg.check? to trigger in the case of the erronous r77401.

Fixed now in 77435.
Martin
  
	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sat Nov 30 20:04:25 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sat, 30 Nov 2019 14:04:25 -0500
Subject: [Rd] Inconsistent behavior for the C AP's R_ParseVector() ?
Message-ID: <CA+JCgN0vZ8O1ekweEgPqcH202PKU2dfMW959eF=Q2S8K1OSKeQ@mail.gmail.com>

Hi,

The behavior of
```
SEXP R_ParseVector(SEXP, int, ParseStatus *, SEXP);
```
defined in `src/include/R_ext/Parse.h` appears to be inconsistent depending
on the string to be parsed.

Trying to parse a string such as `"list(''=1+"` sets the
`ParseStatus` to incomplete parsing error but trying to parse
`"list(''=123"` will result in R sending a message to the console
(followed but a crash):

```
R[write to console]: Error: attempt to use zero-length variable
nameR[write to console]: Fatal error: unable to initialize the JIT***
stack smashing detected ***: <unknown> terminated
```

Is there a reason for the difference in behavior, and is there a workaround ?

Thanks,


Laurent

	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sat Nov 30 23:33:33 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sat, 30 Nov 2019 17:33:33 -0500
Subject: [Rd] Inconsistent behavior for the C AP's R_ParseVector() ?
In-Reply-To: <CA+JCgN0vZ8O1ekweEgPqcH202PKU2dfMW959eF=Q2S8K1OSKeQ@mail.gmail.com>
References: <CA+JCgN0vZ8O1ekweEgPqcH202PKU2dfMW959eF=Q2S8K1OSKeQ@mail.gmail.com>
Message-ID: <CA+JCgN05ZRAuWwMEKX77jcfOw7s3g=Sf+vxRjVrVQbUfEutmoA@mail.gmail.com>

I found the following code comment in `src/main/gram.c`:

```

/* Memory leak

yyparse(), as generated by bison, allocates extra space for the parser
stack using malloc(). Unfortunately this means that there is a memory
leak in case of an R error (long-jump). In principle, we could define
yyoverflow() to relocate the parser stacks for bison and allocate say on
the R heap, but yyoverflow() is undocumented and somewhat complicated
(we would have to replicate some macros from the generated parser here).
The same problem exists at least in the Rd and LaTeX parsers in tools.
*/

```

Could this be related to be issue ?

Le sam. 30 nov. 2019 ? 14:04, Laurent Gautier <lgautier at gmail.com> a ?crit :

> Hi,
>
> The behavior of
> ```
> SEXP R_ParseVector(SEXP, int, ParseStatus *, SEXP);
> ```
> defined in `src/include/R_ext/Parse.h` appears to be inconsistent
> depending on the string to be parsed.
>
> Trying to parse a string such as `"list(''=1+"` sets the
> `ParseStatus` to incomplete parsing error but trying to parse
> `"list(''=123"` will result in R sending a message to the console (followed but a crash):
>
> ```
> R[write to console]: Error: attempt to use zero-length variable nameR[write to console]: Fatal error: unable to initialize the JIT*** stack smashing detected ***: <unknown> terminated
> ```
>
> Is there a reason for the difference in behavior, and is there a workaround ?
>
> Thanks,
>
>
> Laurent
>
>

	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sat Nov 30 23:55:43 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sat, 30 Nov 2019 17:55:43 -0500
Subject: [Rd] Inconsistent behavior for the C AP's R_ParseVector() ?
In-Reply-To: <CA+JCgN05ZRAuWwMEKX77jcfOw7s3g=Sf+vxRjVrVQbUfEutmoA@mail.gmail.com>
References: <CA+JCgN0vZ8O1ekweEgPqcH202PKU2dfMW959eF=Q2S8K1OSKeQ@mail.gmail.com>
 <CA+JCgN05ZRAuWwMEKX77jcfOw7s3g=Sf+vxRjVrVQbUfEutmoA@mail.gmail.com>
Message-ID: <CA+JCgN3iocdn8xVxVuYcsqNSeQ3KQHg3P3FHBf=VV7=zDzxQaQ@mail.gmail.com>

Hi again,

Beside R_ParseVector()'s possible inconsistent behavior, R's handling of
zero-length named elements does not seem consistent either:

```
> lst <- list()
> lst[[""]] <- 1
> names(lst)
[1] ""
> list("" = 1)
Error: attempt to use zero-length variable name
```

Should the parser be made to accept as valid what is otherwise possible
when using `[[<` ?


Best,

Laurent



Le sam. 30 nov. 2019 ? 17:33, Laurent Gautier <lgautier at gmail.com> a ?crit :

> I found the following code comment in `src/main/gram.c`:
>
> ```
>
> /* Memory leak
>
> yyparse(), as generated by bison, allocates extra space for the parser
> stack using malloc(). Unfortunately this means that there is a memory
> leak in case of an R error (long-jump). In principle, we could define
> yyoverflow() to relocate the parser stacks for bison and allocate say on
> the R heap, but yyoverflow() is undocumented and somewhat complicated
> (we would have to replicate some macros from the generated parser here).
> The same problem exists at least in the Rd and LaTeX parsers in tools.
> */
>
> ```
>
> Could this be related to be issue ?
>
> Le sam. 30 nov. 2019 ? 14:04, Laurent Gautier <lgautier at gmail.com> a
> ?crit :
>
>> Hi,
>>
>> The behavior of
>> ```
>> SEXP R_ParseVector(SEXP, int, ParseStatus *, SEXP);
>> ```
>> defined in `src/include/R_ext/Parse.h` appears to be inconsistent
>> depending on the string to be parsed.
>>
>> Trying to parse a string such as `"list(''=1+"` sets the
>> `ParseStatus` to incomplete parsing error but trying to parse
>> `"list(''=123"` will result in R sending a message to the console (followed but a crash):
>>
>> ```
>> R[write to console]: Error: attempt to use zero-length variable nameR[write to console]: Fatal error: unable to initialize the JIT*** stack smashing detected ***: <unknown> terminated
>> ```
>>
>> Is there a reason for the difference in behavior, and is there a workaround ?
>>
>> Thanks,
>>
>>
>> Laurent
>>
>>

	[[alternative HTML version deleted]]


