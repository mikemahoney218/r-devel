From ||u|@@rev|||@ @end|ng |rom gm@||@com  Sat Mar  1 13:07:24 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Sat, 1 Mar 2025 13:07:24 +0100
Subject: [Rd] write_PACKAGES's fields default
Message-ID: <CAN+W6_uyiPFrxZY+1jpZfWr2OuyB8GjZWGasyKe3-0=Uj2R3iQ@mail.gmail.com>

Dear list,

I'm trying to get some details from repositories with
available.packages. However, despite being included on the DESCRIPTION
files they are not available.

ap <- utils::available.packages(fields = "Additional_repositories",
    filters = c("CRAN", "duplicates"),
    ignore_repo_cache =  TRUE,
    repos = "https://cran.r-project.org")
ap[, "Additional_repositories"] |> is.na() |> all()
## [1] TRUE

However, some packages like Seurat have the Additional_repositories
field [2]. If I try with another repository (Bioconductor software
repository):

ap <- available.packages(fields = "biocViews",
    ignore_repo_cache =  TRUE,
    repos = "https://bioconductor.org/packages/3.21/bioc")
ap[, "biocViews"] |> is.na() |> all()
## [1] TRUE

It also misses the BiocViews field compulsory on that repository.
Both repositories use tools::write_PACKAGES [3][4] to generate the
file read by available.packages. This function writes by default
fields "needed by available.packages".

However, it is unclear what is needed for available.packages.
According to its documentation, it returns "details corresponding to
packages currently available at one or more repositories". To me this
would mean that fields on the DESCRIPTION files should appear, but the
default of write_PACKAGES doesn't write other fields besides
'"Package"', '"Version"', '"Priority"',  '"Depends"', '"Imports"',
'"LinkingTo"', '"Suggests"', '"Enhances"', '"OS_type"', '"License"'
and '"Archs"'.

I could approach each repository and ask to include more fields.
However, to match the documentation on available.packages and help all
repository administrators it would make sense to change the default on
write_PACKAGES.
Could the default fields be changed, so
that all fields available on packages' DESCRIPTION to
PACKAGES(.gz,.rds). Perhaps with fields = TRUE?
If this is too much it would be great if fields documented by Writing
R Extensions are written on PACKAGES.
This modification would make it easier for all to reuse repository data.

Many thanks for your consideration,

Llu?s

PD: From CRAN perspective CRAN_packages_db() function can be used to
get Additional_repositories, but this is limited to CRAN and won't
work for BiocViews on Bioconductor or for other arbitrary fields like
'"RoxygenNote"'.

[1]: https://stat.ethz.ch/pipermail/r-devel/2024-June/083477.html
[2]: https://cran.r-project.org/package=Seurat
[3]: https://svn.r-project.org/R-dev-web/trunk/CRAN/QA/Uwe/make/writeCRANPackages.R
[4]: https://github.com/Bioconductor/BBS/blob/devel/utils/makePropagationStatusDb.R#L348


From mo@@@ @end|ng |rom @und@ku@dk  Sat Mar  1 20:45:45 2025
From: mo@@@ @end|ng |rom @und@ku@dk (Mossa Merhi Reimert)
Date: Sat, 1 Mar 2025 19:45:45 +0000
Subject: [Rd] R CMD check and CRAN's Rust policy
Message-ID: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>

Hello everyone!

I'm Mossa, I'm one of the maintainers of extendr, an automated generation of bindings project for
Rust code, for use in R-packages.

I'm writing to you, as R 4.4.3 was just released, and there have not been
follow-up on an issue important to us. Link to the issue as discussed on r-devel
https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html

A community member has provided a suggestion to a patch here https://github.com/r-devel/r-svn/pull/182, and we have also attempted to bring it up on
Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806

TLDR: Default `R CMD check` uses additional CRAN-specific checks for Rust,
instead of keeping this behind the --as-cran flag.

I would like to say, that there is a growing interest in Rust within the R community.
And generally, Rust becoming a widely adopted language within the Python community (including the scientific part of that community). It is time to deal with the
pain points with using Rust in R.

Therefore, I would kindly ask that we have a dialogue on how to remedy the issue above first, and how we may deal with other issues going forward. There are both challenges embedded in R itself, and the current CRAN policy for Rust is prohibitive.



Mossa Merhi Reimert
Postdoctoral Researcher

K?benhavns Universitet
Department of Veterinary and Animal Sciences
Animal Welfare and Disease Control
Gr?nneg?rdsvej 8
1870 Frederiksberg C
Denmark

+45 35324135
mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>


	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Mar  2 00:39:31 2025
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 2 Mar 2025 12:39:31 +1300
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
Message-ID: <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>

Mossa,

the issue you cite is lacking any pertinent information and it's not even clear why it should be an issue. The check is perfectly justified, it just reports whether a package using rust declares this correctly and where it downloads 3rd party content - something that is important to R users in general and not related to CRAN. I don't see how any of this is "prohibitive" it just calls out what the package is already doing.

As discussed before, my hope was that the "R"ust community will mature enough to work on proper support. It is not clear that it happened yet, but once it does it would make sense to talk about support just as we have for C, C++ and Java, so certainly that should be the right discussion. However, it will have to start with some thinking and a proposal on how the associated issues (compiler support, versioning, dependency sources etc.) are to be addressed, as opposed to making random demands. All this has nothing to do with CRAN so the issue you mention seems irrelevant to the progress. Also I'd like to know what are the "challenges embedded in R itself".

Cheers,
Simon


> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel <r-devel at r-project.org> wrote:
> 
> Hello everyone!
> 
> I'm Mossa, I'm one of the maintainers of extendr, an automated generation of bindings project for
> Rust code, for use in R-packages.
> 
> I'm writing to you, as R 4.4.3 was just released, and there have not been
> follow-up on an issue important to us. Link to the issue as discussed on r-devel
> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
> 
> A community member has provided a suggestion to a patch here https://github.com/r-devel/r-svn/pull/182, and we have also attempted to bring it up on
> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
> 
> TLDR: Default `R CMD check` uses additional CRAN-specific checks for Rust,
> instead of keeping this behind the --as-cran flag.
> 
> I would like to say, that there is a growing interest in Rust within the R community.
> And generally, Rust becoming a widely adopted language within the Python community (including the scientific part of that community). It is time to deal with the
> pain points with using Rust in R.
> 
> Therefore, I would kindly ask that we have a dialogue on how to remedy the issue above first, and how we may deal with other issues going forward. There are both challenges embedded in R itself, and the current CRAN policy for Rust is prohibitive.
> 
> 
> 
> Mossa Merhi Reimert
> Postdoctoral Researcher
> 
> K?benhavns Universitet
> Department of Veterinary and Animal Sciences
> Animal Welfare and Disease Control
> Gr?nneg?rdsvej 8
> 1870 Frederiksberg C
> Denmark
> 
> +45 35324135
> mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


