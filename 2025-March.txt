From ||u|@@rev|||@ @end|ng |rom gm@||@com  Sat Mar  1 13:07:24 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Sat, 1 Mar 2025 13:07:24 +0100
Subject: [Rd] write_PACKAGES's fields default
Message-ID: <CAN+W6_uyiPFrxZY+1jpZfWr2OuyB8GjZWGasyKe3-0=Uj2R3iQ@mail.gmail.com>

Dear list,

I'm trying to get some details from repositories with
available.packages. However, despite being included on the DESCRIPTION
files they are not available.

ap <- utils::available.packages(fields = "Additional_repositories",
    filters = c("CRAN", "duplicates"),
    ignore_repo_cache =  TRUE,
    repos = "https://cran.r-project.org")
ap[, "Additional_repositories"] |> is.na() |> all()
## [1] TRUE

However, some packages like Seurat have the Additional_repositories
field [2]. If I try with another repository (Bioconductor software
repository):

ap <- available.packages(fields = "biocViews",
    ignore_repo_cache =  TRUE,
    repos = "https://bioconductor.org/packages/3.21/bioc")
ap[, "biocViews"] |> is.na() |> all()
## [1] TRUE

It also misses the BiocViews field compulsory on that repository.
Both repositories use tools::write_PACKAGES [3][4] to generate the
file read by available.packages. This function writes by default
fields "needed by available.packages".

However, it is unclear what is needed for available.packages.
According to its documentation, it returns "details corresponding to
packages currently available at one or more repositories". To me this
would mean that fields on the DESCRIPTION files should appear, but the
default of write_PACKAGES doesn't write other fields besides
'"Package"', '"Version"', '"Priority"',  '"Depends"', '"Imports"',
'"LinkingTo"', '"Suggests"', '"Enhances"', '"OS_type"', '"License"'
and '"Archs"'.

I could approach each repository and ask to include more fields.
However, to match the documentation on available.packages and help all
repository administrators it would make sense to change the default on
write_PACKAGES.
Could the default fields be changed, so
that all fields available on packages' DESCRIPTION to
PACKAGES(.gz,.rds). Perhaps with fields = TRUE?
If this is too much it would be great if fields documented by Writing
R Extensions are written on PACKAGES.
This modification would make it easier for all to reuse repository data.

Many thanks for your consideration,

Llu?s

PD: From CRAN perspective CRAN_packages_db() function can be used to
get Additional_repositories, but this is limited to CRAN and won't
work for BiocViews on Bioconductor or for other arbitrary fields like
'"RoxygenNote"'.

[1]: https://stat.ethz.ch/pipermail/r-devel/2024-June/083477.html
[2]: https://cran.r-project.org/package=Seurat
[3]: https://svn.r-project.org/R-dev-web/trunk/CRAN/QA/Uwe/make/writeCRANPackages.R
[4]: https://github.com/Bioconductor/BBS/blob/devel/utils/makePropagationStatusDb.R#L348


From mo@@@ @end|ng |rom @und@ku@dk  Sat Mar  1 20:45:45 2025
From: mo@@@ @end|ng |rom @und@ku@dk (Mossa Merhi Reimert)
Date: Sat, 1 Mar 2025 19:45:45 +0000
Subject: [Rd] R CMD check and CRAN's Rust policy
Message-ID: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>

Hello everyone!

I'm Mossa, I'm one of the maintainers of extendr, an automated generation of bindings project for
Rust code, for use in R-packages.

I'm writing to you, as R 4.4.3 was just released, and there have not been
follow-up on an issue important to us. Link to the issue as discussed on r-devel
https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html

A community member has provided a suggestion to a patch here https://github.com/r-devel/r-svn/pull/182, and we have also attempted to bring it up on
Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806

TLDR: Default `R CMD check` uses additional CRAN-specific checks for Rust,
instead of keeping this behind the --as-cran flag.

I would like to say, that there is a growing interest in Rust within the R community.
And generally, Rust becoming a widely adopted language within the Python community (including the scientific part of that community). It is time to deal with the
pain points with using Rust in R.

Therefore, I would kindly ask that we have a dialogue on how to remedy the issue above first, and how we may deal with other issues going forward. There are both challenges embedded in R itself, and the current CRAN policy for Rust is prohibitive.



Mossa Merhi Reimert
Postdoctoral Researcher

K?benhavns Universitet
Department of Veterinary and Animal Sciences
Animal Welfare and Disease Control
Gr?nneg?rdsvej 8
1870 Frederiksberg C
Denmark

+45 35324135
mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>


	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Mar  2 00:39:31 2025
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 2 Mar 2025 12:39:31 +1300
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
Message-ID: <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>

Mossa,

the issue you cite is lacking any pertinent information and it's not even clear why it should be an issue. The check is perfectly justified, it just reports whether a package using rust declares this correctly and where it downloads 3rd party content - something that is important to R users in general and not related to CRAN. I don't see how any of this is "prohibitive" it just calls out what the package is already doing.

As discussed before, my hope was that the "R"ust community will mature enough to work on proper support. It is not clear that it happened yet, but once it does it would make sense to talk about support just as we have for C, C++ and Java, so certainly that should be the right discussion. However, it will have to start with some thinking and a proposal on how the associated issues (compiler support, versioning, dependency sources etc.) are to be addressed, as opposed to making random demands. All this has nothing to do with CRAN so the issue you mention seems irrelevant to the progress. Also I'd like to know what are the "challenges embedded in R itself".

Cheers,
Simon


> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel <r-devel at r-project.org> wrote:
> 
> Hello everyone!
> 
> I'm Mossa, I'm one of the maintainers of extendr, an automated generation of bindings project for
> Rust code, for use in R-packages.
> 
> I'm writing to you, as R 4.4.3 was just released, and there have not been
> follow-up on an issue important to us. Link to the issue as discussed on r-devel
> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
> 
> A community member has provided a suggestion to a patch here https://github.com/r-devel/r-svn/pull/182, and we have also attempted to bring it up on
> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
> 
> TLDR: Default `R CMD check` uses additional CRAN-specific checks for Rust,
> instead of keeping this behind the --as-cran flag.
> 
> I would like to say, that there is a growing interest in Rust within the R community.
> And generally, Rust becoming a widely adopted language within the Python community (including the scientific part of that community). It is time to deal with the
> pain points with using Rust in R.
> 
> Therefore, I would kindly ask that we have a dialogue on how to remedy the issue above first, and how we may deal with other issues going forward. There are both challenges embedded in R itself, and the current CRAN policy for Rust is prohibitive.
> 
> 
> 
> Mossa Merhi Reimert
> Postdoctoral Researcher
> 
> K?benhavns Universitet
> Department of Veterinary and Animal Sciences
> Animal Welfare and Disease Control
> Gr?nneg?rdsvej 8
> 1870 Frederiksberg C
> Denmark
> 
> +45 35324135
> mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From mo@@@ @end|ng |rom @und@ku@dk  Sun Mar  2 11:45:41 2025
From: mo@@@ @end|ng |rom @und@ku@dk (Mossa Merhi Reimert)
Date: Sun, 2 Mar 2025 10:45:41 +0000
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>,
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
Message-ID: <32ad0520e7784407b08ad105304b714b@sund.ku.dk>

Dear Simon Urbanek,

There has been very little engagement with the issue I referred to. If it was decided that this ?check? ought to be part of the default checks for R,
then that could have been written to us. Either on the bugs.r-project.org or the proposed patch. Before we talk about anything else,
it does seem very strange that we cannot get a reasonable dialogue going.

I would like to say that the R/Rust community has grown substantially. From my end, there are 3 bindings project, extendr, savvy, and roxido.
Then, there are now many rust-based packages on CRAN, see this most recent compiled list https://github.com/nanxstats/r-rust-pkgs.
There is also proof-of-concept https://github.com/r-rust/hellorust that integrates `cargo`, rust?s official build system, with R?s package build system,
and https://github.com/extendr/hellorustc, which showcases how Rust compiler could be directly linked with R?s package system.

 Let me say, that the current R CMD check is not meant to be ?helpful?. When a package is built, `cargo` tells the user ?Downloading crates?.
Thus, this information is already conveyed to the user.

Personally, I do wish we could debate this requirement further. I do not believe that having R-packages on CRAN vendor rust dependencies
as a good policy. Download statistics is a success metric of a given r-package and rust packages. By insisting on vendoring, and thus
side-stepping `cargo` / crates.io, we are robbing upstream authors of their download-numbers. I do not think such policy is honourable.

While C/C++ do not have official package repositories, it could be thought of, as fair game, to have CRAN act as a pseudo package manager for C/C++ libraries.
I?m not going to argue for or against this part.

There are many objections from the CRAN side to all things related to Rust. I don?t want to open multiple topics in the same thread.
But there is plenty to bring up. And I had hoped we could talk this little issue through, before embarking on a larger discussion.
I do not appreciate the ?random demands? comment, as this is not a demand, nor is it random.
I have inquired my end of the community for suggestions
to compile a larger proposal, but then I was afraid that this would be perceived as a big, bulky demand.

Rust is not C/C++/Java, and the support for Rust cannot look like the support for these languages.



From: Simon Urbanek <simon.urbanek at R-project.org>
Date: Sunday, 2 March 2025 at 00.39
To: Mossa Merhi Reimert <mossa at sund.ku.dk>
Cc: r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] R CMD check and CRAN's Rust policy
[Du f?r ikke ofte mails fra simon.urbanek at r-project.org. F? mere at vide om, hvorfor dette er vigtigt, p? https://aka.ms/LearnAboutSenderIdentification ]

Mossa,

the issue you cite is lacking any pertinent information and it's not even clear why it should be an issue. The check is perfectly justified, it just reports whether a package using rust declares this correctly and where it downloads 3rd party content - something that is important to R users in general and not related to CRAN. I don't see how any of this is "prohibitive" it just calls out what the package is already doing.

As discussed before, my hope was that the "R"ust community will mature enough to work on proper support. It is not clear that it happened yet, but once it does it would make sense to talk about support just as we have for C, C++ and Java, so certainly that should be the right discussion. However, it will have to start with some thinking and a proposal on how the associated issues (compiler support, versioning, dependency sources etc.) are to be addressed, as opposed to making random demands. All this has nothing to do with CRAN so the issue you mention seems irrelevant to the progress. Also I'd like to know what are the "challenges embedded in R itself".

Cheers,
Simon


> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel <r-devel at r-project.org> wrote:
>
> Hello everyone!
>
> I'm Mossa, I'm one of the maintainers of extendr, an automated generation of bindings project for
> Rust code, for use in R-packages.
>
> I'm writing to you, as R 4.4.3 was just released, and there have not been
> follow-up on an issue important to us. Link to the issue as discussed on r-devel
> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
>
> A community member has provided a suggestion to a patch here https://github.com/r-devel/r-svn/pull/182, and we have also attempted to bring it up on
> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
>
> TLDR: Default `R CMD check` uses additional CRAN-specific checks for Rust,
> instead of keeping this behind the --as-cran flag.
>
> I would like to say, that there is a growing interest in Rust within the R community.
> And generally, Rust becoming a widely adopted language within the Python community (including the scientific part of that community). It is time to deal with the
> pain points with using Rust in R.
>
> Therefore, I would kindly ask that we have a dialogue on how to remedy the issue above first, and how we may deal with other issues going forward. There are both challenges embedded in R itself, and the current CRAN policy for Rust is prohibitive.
>
>
>
> Mossa Merhi Reimert
> Postdoctoral Researcher
>
> K?benhavns Universitet
> Department of Veterinary and Animal Sciences
> Animal Welfare and Disease Control
> Gr?nneg?rdsvej 8
> 1870 Frederiksberg C
> Denmark
>
> +45 35324135
> mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>
>
>
>       [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Mar  2 15:49:02 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 2 Mar 2025 09:49:02 -0500
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
Message-ID: <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>

You seem to be taking a confontational tone, which isn't likely to 
encourage a reasonable dialogue.

I've looked for other messages on this, and didn't see any besides this 
one explaining why including check_rust() in the checks is a problem. 
The problem you talk about here is that it encourages vendoring, which 
makes it harder for package authors to count downloads.

To be honest, that doesn't seem like a very serious problem.  I assume 
the packages ("crates") we are talking about are open source, so this is 
entirely in the spirit of how they are allowed to be distributed.

If they aren't open source, then users of those packages should be 
warned about that, and a check failure is a good way to do that.

So you need to explain why it is important to be able to download and 
install software and not be warned about it.

I am not in R Core or CRAN, but I can suggest why it is better to 
include source in the package:  it makes the use of that package more 
reliable in the future.  It's not uncommon to run an R computation that 
was written a few years ago.  Sometimes libraries or R have changed, and 
a user will need to go back to a previous version to reproduce the 
calculation.  Being able to able to rebuild a system as it would have 
been back then is important.

Is that possible if the package needs to make a download?  The download 
site that worked a few years ago may no longer exist.  If the site 
exists, the code versions there may be different.

Those are some of the issues that Simon was alluding to.

Duncan Murdoch



On 2025-03-02 5:45 a.m., Mossa Merhi Reimert via R-devel wrote:
> Dear Simon Urbanek,
> 
> There has been very little engagement with the issue I referred to. If it was decided that this ?check? ought to be part of the default checks for R,
> then that could have been written to us. Either on the bugs.r-project.org or the proposed patch. Before we talk about anything else,
> it does seem very strange that we cannot get a reasonable dialogue going.
> 
> I would like to say that the R/Rust community has grown substantially. From my end, there are 3 bindings project, extendr, savvy, and roxido.
> Then, there are now many rust-based packages on CRAN, see this most recent compiled list https://github.com/nanxstats/r-rust-pkgs.
> There is also proof-of-concept https://github.com/r-rust/hellorust that integrates `cargo`, rust?s official build system, with R?s package build system,
> and https://github.com/extendr/hellorustc, which showcases how Rust compiler could be directly linked with R?s package system.
> 
>   Let me say, that the current R CMD check is not meant to be ?helpful?. When a package is built, `cargo` tells the user ?Downloading crates?.
> Thus, this information is already conveyed to the user.
> 
> Personally, I do wish we could debate this requirement further. I do not believe that having R-packages on CRAN vendor rust dependencies
> as a good policy. Download statistics is a success metric of a given r-package and rust packages. By insisting on vendoring, and thus
> side-stepping `cargo` / crates.io, we are robbing upstream authors of their download-numbers. I do not think such policy is honourable.
> 
> While C/C++ do not have official package repositories, it could be thought of, as fair game, to have CRAN act as a pseudo package manager for C/C++ libraries.
> I?m not going to argue for or against this part.
> 
> There are many objections from the CRAN side to all things related to Rust. I don?t want to open multiple topics in the same thread.
> But there is plenty to bring up. And I had hoped we could talk this little issue through, before embarking on a larger discussion.
> I do not appreciate the ?random demands? comment, as this is not a demand, nor is it random.
> I have inquired my end of the community for suggestions
> to compile a larger proposal, but then I was afraid that this would be perceived as a big, bulky demand.
> 
> Rust is not C/C++/Java, and the support for Rust cannot look like the support for these languages.
> 
> 
> 
> From: Simon Urbanek <simon.urbanek at R-project.org>
> Date: Sunday, 2 March 2025 at 00.39
> To: Mossa Merhi Reimert <mossa at sund.ku.dk>
> Cc: r-devel at r-project.org <r-devel at r-project.org>
> Subject: Re: [Rd] R CMD check and CRAN's Rust policy
> [Du f?r ikke ofte mails fra simon.urbanek at r-project.org. F? mere at vide om, hvorfor dette er vigtigt, p? https://aka.ms/LearnAboutSenderIdentification ]
> 
> Mossa,
> 
> the issue you cite is lacking any pertinent information and it's not even clear why it should be an issue. The check is perfectly justified, it just reports whether a package using rust declares this correctly and where it downloads 3rd party content - something that is important to R users in general and not related to CRAN. I don't see how any of this is "prohibitive" it just calls out what the package is already doing.
> 
> As discussed before, my hope was that the "R"ust community will mature enough to work on proper support. It is not clear that it happened yet, but once it does it would make sense to talk about support just as we have for C, C++ and Java, so certainly that should be the right discussion. However, it will have to start with some thinking and a proposal on how the associated issues (compiler support, versioning, dependency sources etc.) are to be addressed, as opposed to making random demands. All this has nothing to do with CRAN so the issue you mention seems irrelevant to the progress. Also I'd like to know what are the "challenges embedded in R itself".
> 
> Cheers,
> Simon
> 
> 
>> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel <r-devel at r-project.org> wrote:
>>
>> Hello everyone!
>>
>> I'm Mossa, I'm one of the maintainers of extendr, an automated generation of bindings project for
>> Rust code, for use in R-packages.
>>
>> I'm writing to you, as R 4.4.3 was just released, and there have not been
>> follow-up on an issue important to us. Link to the issue as discussed on r-devel
>> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
>>
>> A community member has provided a suggestion to a patch here https://github.com/r-devel/r-svn/pull/182, and we have also attempted to bring it up on
>> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
>>
>> TLDR: Default `R CMD check` uses additional CRAN-specific checks for Rust,
>> instead of keeping this behind the --as-cran flag.
>>
>> I would like to say, that there is a growing interest in Rust within the R community.
>> And generally, Rust becoming a widely adopted language within the Python community (including the scientific part of that community). It is time to deal with the
>> pain points with using Rust in R.
>>
>> Therefore, I would kindly ask that we have a dialogue on how to remedy the issue above first, and how we may deal with other issues going forward. There are both challenges embedded in R itself, and the current CRAN policy for Rust is prohibitive.
>>
>>
>>
>> Mossa Merhi Reimert
>> Postdoctoral Researcher
>>
>> K?benhavns Universitet
>> Department of Veterinary and Animal Sciences
>> Animal Welfare and Disease Control
>> Gr?nneg?rdsvej 8
>> 1870 Frederiksberg C
>> Denmark
>>
>> +45 35324135
>> mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>
>>
>>
>>        [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From yut@n|@|n| @end|ng |rom gm@||@com  Sun Mar  2 16:44:51 2025
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Mon, 3 Mar 2025 00:44:51 +0900
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
 <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
Message-ID: <CALyqOb868v51RcrEZNc7TCfg9aOb5D23Kjnvei0HAtgj4sEVzw@mail.gmail.com>

> I've looked for other messages on this, and didn't see any besides this
> one explaining why including check_rust() in the checks is a problem.

I agree with you. It seems no one explained what problem it causes to them.
In my understanding (disclaimer: I haven't hit this by myself yet), the
problem is that the "Downloading crates ..." log raises a warning, which
makes the CI check fail. Although it's true that none of this is
"prohibitive," it's just inconvenient.

Maybe it's possible to make it a NOTE instead of a WARNING at least?

I'm suggesting so because otherwise this will end up encouraging the
package authors to hide these logs as a workaround to avoid the CI failure.
As it's very easy, I'm personally fine with the status quo, but if it
becomes a common practice, it makes it harder for the CRAN maintainers to
investigate the installation logs.

Best,
Yutani


2025?3?2?(?) 23:49 Duncan Murdoch <murdoch.duncan at gmail.com>:

> You seem to be taking a confontational tone, which isn't likely to
> encourage a reasonable dialogue.
>
> I've looked for other messages on this, and didn't see any besides this
> one explaining why including check_rust() in the checks is a problem.
> The problem you talk about here is that it encourages vendoring, which
> makes it harder for package authors to count downloads.
>
> To be honest, that doesn't seem like a very serious problem.  I assume
> the packages ("crates") we are talking about are open source, so this is
> entirely in the spirit of how they are allowed to be distributed.
>
> If they aren't open source, then users of those packages should be
> warned about that, and a check failure is a good way to do that.
>
> So you need to explain why it is important to be able to download and
> install software and not be warned about it.
>
> I am not in R Core or CRAN, but I can suggest why it is better to
> include source in the package:  it makes the use of that package more
> reliable in the future.  It's not uncommon to run an R computation that
> was written a few years ago.  Sometimes libraries or R have changed, and
> a user will need to go back to a previous version to reproduce the
> calculation.  Being able to able to rebuild a system as it would have
> been back then is important.
>
> Is that possible if the package needs to make a download?  The download
> site that worked a few years ago may no longer exist.  If the site
> exists, the code versions there may be different.
>
> Those are some of the issues that Simon was alluding to.
>
> Duncan Murdoch
>
>
>
> On 2025-03-02 5:45 a.m., Mossa Merhi Reimert via R-devel wrote:
> > Dear Simon Urbanek,
> >
> > There has been very little engagement with the issue I referred to. If
> it was decided that this ?check? ought to be part of the default checks for
> R,
> > then that could have been written to us. Either on the
> bugs.r-project.org or the proposed patch. Before we talk about anything
> else,
> > it does seem very strange that we cannot get a reasonable dialogue going.
> >
> > I would like to say that the R/Rust community has grown substantially.
> From my end, there are 3 bindings project, extendr, savvy, and roxido.
> > Then, there are now many rust-based packages on CRAN, see this most
> recent compiled list https://github.com/nanxstats/r-rust-pkgs.
> > There is also proof-of-concept https://github.com/r-rust/hellorust that
> integrates `cargo`, rust?s official build system, with R?s package build
> system,
> > and https://github.com/extendr/hellorustc, which showcases how Rust
> compiler could be directly linked with R?s package system.
> >
> >   Let me say, that the current R CMD check is not meant to be ?helpful?.
> When a package is built, `cargo` tells the user ?Downloading crates?.
> > Thus, this information is already conveyed to the user.
> >
> > Personally, I do wish we could debate this requirement further. I do not
> believe that having R-packages on CRAN vendor rust dependencies
> > as a good policy. Download statistics is a success metric of a given
> r-package and rust packages. By insisting on vendoring, and thus
> > side-stepping `cargo` / crates.io, we are robbing upstream authors of
> their download-numbers. I do not think such policy is honourable.
> >
> > While C/C++ do not have official package repositories, it could be
> thought of, as fair game, to have CRAN act as a pseudo package manager for
> C/C++ libraries.
> > I?m not going to argue for or against this part.
> >
> > There are many objections from the CRAN side to all things related to
> Rust. I don?t want to open multiple topics in the same thread.
> > But there is plenty to bring up. And I had hoped we could talk this
> little issue through, before embarking on a larger discussion.
> > I do not appreciate the ?random demands? comment, as this is not a
> demand, nor is it random.
> > I have inquired my end of the community for suggestions
> > to compile a larger proposal, but then I was afraid that this would be
> perceived as a big, bulky demand.
> >
> > Rust is not C/C++/Java, and the support for Rust cannot look like the
> support for these languages.
> >
> >
> >
> > From: Simon Urbanek <simon.urbanek at R-project.org>
> > Date: Sunday, 2 March 2025 at 00.39
> > To: Mossa Merhi Reimert <mossa at sund.ku.dk>
> > Cc: r-devel at r-project.org <r-devel at r-project.org>
> > Subject: Re: [Rd] R CMD check and CRAN's Rust policy
> > [Du f?r ikke ofte mails fra simon.urbanek at r-project.org. F? mere at
> vide om, hvorfor dette er vigtigt, p?
> https://aka.ms/LearnAboutSenderIdentification ]
> >
> > Mossa,
> >
> > the issue you cite is lacking any pertinent information and it's not
> even clear why it should be an issue. The check is perfectly justified, it
> just reports whether a package using rust declares this correctly and where
> it downloads 3rd party content - something that is important to R users in
> general and not related to CRAN. I don't see how any of this is
> "prohibitive" it just calls out what the package is already doing.
> >
> > As discussed before, my hope was that the "R"ust community will mature
> enough to work on proper support. It is not clear that it happened yet, but
> once it does it would make sense to talk about support just as we have for
> C, C++ and Java, so certainly that should be the right discussion. However,
> it will have to start with some thinking and a proposal on how the
> associated issues (compiler support, versioning, dependency sources etc.)
> are to be addressed, as opposed to making random demands. All this has
> nothing to do with CRAN so the issue you mention seems irrelevant to the
> progress. Also I'd like to know what are the "challenges embedded in R
> itself".
> >
> > Cheers,
> > Simon
> >
> >
> >> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel <
> r-devel at r-project.org> wrote:
> >>
> >> Hello everyone!
> >>
> >> I'm Mossa, I'm one of the maintainers of extendr, an automated
> generation of bindings project for
> >> Rust code, for use in R-packages.
> >>
> >> I'm writing to you, as R 4.4.3 was just released, and there have not
> been
> >> follow-up on an issue important to us. Link to the issue as discussed
> on r-devel
> >> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
> >>
> >> A community member has provided a suggestion to a patch here
> https://github.com/r-devel/r-svn/pull/182, and we have also attempted to
> bring it up on
> >> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
> >>
> >> TLDR: Default `R CMD check` uses additional CRAN-specific checks for
> Rust,
> >> instead of keeping this behind the --as-cran flag.
> >>
> >> I would like to say, that there is a growing interest in Rust within
> the R community.
> >> And generally, Rust becoming a widely adopted language within the
> Python community (including the scientific part of that community). It is
> time to deal with the
> >> pain points with using Rust in R.
> >>
> >> Therefore, I would kindly ask that we have a dialogue on how to remedy
> the issue above first, and how we may deal with other issues going forward.
> There are both challenges embedded in R itself, and the current CRAN policy
> for Rust is prohibitive.
> >>
> >>
> >>
> >> Mossa Merhi Reimert
> >> Postdoctoral Researcher
> >>
> >> K?benhavns Universitet
> >> Department of Veterinary and Animal Sciences
> >> Animal Welfare and Disease Control
> >> Gr?nneg?rdsvej 8
> >> 1870 Frederiksberg C
> >> Denmark
> >>
> >> +45 35324135
> >> mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>
> >>
> >>
> >>        [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From jo@|@h@p@rry @end|ng |rom gm@||@com  Sun Mar  2 17:03:13 2025
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Sun, 2 Mar 2025 08:03:13 -0800
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
 <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
Message-ID: <CAL3ufUKSkMXpgSD6-o7dC7tZuD+DmpHaq2JUzuF9+9dosE+XEA@mail.gmail.com>

Well this has surely veered off course!

As the one who filed the BugZilla report, I'd like to redirect the
conversation and provide further context.

The question should be *"how do we get a dialogue started on this bugzilla
issue before the next minor *
*release of R?"*

The current check for Rust-based R package's downloading external
dependencies works by looking at
the output logs for the presence of  "Downloading crates." This can is an
entirely fine requirement for
CRAN?however, due to the fact that it is an error, packages distributed
through other repositories
fail the R-CMD check.

Folks who use R-universe or PPM or some mysterious third thing may not
share the same philosophy as
CRAN and prefer the convenience of fetching the dependencies at compile
time and not vendoring them.

An alternative would be for the check to be optionally skipped or become a
NOTE when the CRAN
flag is not set and an ERROR otherwise. Skipping this CRAN check is as easy
as adding `--quiet`
or setting an environment variable?but that is against the spirit of the
check.

Ideally, the check can remain, but scoped appropriately.


On Sun, Mar 2, 2025 at 6:49?AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> You seem to be taking a confontational tone, which isn't likely to
> encourage a reasonable dialogue.
>
> I've looked for other messages on this, and didn't see any besides this
> one explaining why including check_rust() in the checks is a problem.
> The problem you talk about here is that it encourages vendoring, which
> makes it harder for package authors to count downloads.
>
> To be honest, that doesn't seem like a very serious problem.  I assume
> the packages ("crates") we are talking about are open source, so this is
> entirely in the spirit of how they are allowed to be distributed.
>
> If they aren't open source, then users of those packages should be
> warned about that, and a check failure is a good way to do that.
>
> So you need to explain why it is important to be able to download and
> install software and not be warned about it.
>
> I am not in R Core or CRAN, but I can suggest why it is better to
> include source in the package:  it makes the use of that package more
> reliable in the future.  It's not uncommon to run an R computation that
> was written a few years ago.  Sometimes libraries or R have changed, and
> a user will need to go back to a previous version to reproduce the
> calculation.  Being able to able to rebuild a system as it would have
> been back then is important.
>
> Is that possible if the package needs to make a download?  The download
> site that worked a few years ago may no longer exist.  If the site
> exists, the code versions there may be different.
>
> Those are some of the issues that Simon was alluding to.
>
> Duncan Murdoch
>
>
>
> On 2025-03-02 5:45 a.m., Mossa Merhi Reimert via R-devel wrote:
> > Dear Simon Urbanek,
> >
> > There has been very little engagement with the issue I referred to. If
> it was decided that this ?check? ought to be part of the default checks for
> R,
> > then that could have been written to us. Either on the
> bugs.r-project.org or the proposed patch. Before we talk about anything
> else,
> > it does seem very strange that we cannot get a reasonable dialogue going.
> >
> > I would like to say that the R/Rust community has grown substantially.
> From my end, there are 3 bindings project, extendr, savvy, and roxido.
> > Then, there are now many rust-based packages on CRAN, see this most
> recent compiled list https://github.com/nanxstats/r-rust-pkgs.
> > There is also proof-of-concept https://github.com/r-rust/hellorust that
> integrates `cargo`, rust?s official build system, with R?s package build
> system,
> > and https://github.com/extendr/hellorustc, which showcases how Rust
> compiler could be directly linked with R?s package system.
> >
> >   Let me say, that the current R CMD check is not meant to be ?helpful?.
> When a package is built, `cargo` tells the user ?Downloading crates?.
> > Thus, this information is already conveyed to the user.
> >
> > Personally, I do wish we could debate this requirement further. I do not
> believe that having R-packages on CRAN vendor rust dependencies
> > as a good policy. Download statistics is a success metric of a given
> r-package and rust packages. By insisting on vendoring, and thus
> > side-stepping `cargo` / crates.io, we are robbing upstream authors of
> their download-numbers. I do not think such policy is honourable.
> >
> > While C/C++ do not have official package repositories, it could be
> thought of, as fair game, to have CRAN act as a pseudo package manager for
> C/C++ libraries.
> > I?m not going to argue for or against this part.
> >
> > There are many objections from the CRAN side to all things related to
> Rust. I don?t want to open multiple topics in the same thread.
> > But there is plenty to bring up. And I had hoped we could talk this
> little issue through, before embarking on a larger discussion.
> > I do not appreciate the ?random demands? comment, as this is not a
> demand, nor is it random.
> > I have inquired my end of the community for suggestions
> > to compile a larger proposal, but then I was afraid that this would be
> perceived as a big, bulky demand.
> >
> > Rust is not C/C++/Java, and the support for Rust cannot look like the
> support for these languages.
> >
> >
> >
> > From: Simon Urbanek <simon.urbanek at R-project.org>
> > Date: Sunday, 2 March 2025 at 00.39
> > To: Mossa Merhi Reimert <mossa at sund.ku.dk>
> > Cc: r-devel at r-project.org <r-devel at r-project.org>
> > Subject: Re: [Rd] R CMD check and CRAN's Rust policy
> > [Du f?r ikke ofte mails fra simon.urbanek at r-project.org. F? mere at
> vide om, hvorfor dette er vigtigt, p?
> https://aka.ms/LearnAboutSenderIdentification ]
> >
> > Mossa,
> >
> > the issue you cite is lacking any pertinent information and it's not
> even clear why it should be an issue. The check is perfectly justified, it
> just reports whether a package using rust declares this correctly and where
> it downloads 3rd party content - something that is important to R users in
> general and not related to CRAN. I don't see how any of this is
> "prohibitive" it just calls out what the package is already doing.
> >
> > As discussed before, my hope was that the "R"ust community will mature
> enough to work on proper support. It is not clear that it happened yet, but
> once it does it would make sense to talk about support just as we have for
> C, C++ and Java, so certainly that should be the right discussion. However,
> it will have to start with some thinking and a proposal on how the
> associated issues (compiler support, versioning, dependency sources etc.)
> are to be addressed, as opposed to making random demands. All this has
> nothing to do with CRAN so the issue you mention seems irrelevant to the
> progress. Also I'd like to know what are the "challenges embedded in R
> itself".
> >
> > Cheers,
> > Simon
> >
> >
> >> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel <
> r-devel at r-project.org> wrote:
> >>
> >> Hello everyone!
> >>
> >> I'm Mossa, I'm one of the maintainers of extendr, an automated
> generation of bindings project for
> >> Rust code, for use in R-packages.
> >>
> >> I'm writing to you, as R 4.4.3 was just released, and there have not
> been
> >> follow-up on an issue important to us. Link to the issue as discussed
> on r-devel
> >> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
> >>
> >> A community member has provided a suggestion to a patch here
> https://github.com/r-devel/r-svn/pull/182, and we have also attempted to
> bring it up on
> >> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
> >>
> >> TLDR: Default `R CMD check` uses additional CRAN-specific checks for
> Rust,
> >> instead of keeping this behind the --as-cran flag.
> >>
> >> I would like to say, that there is a growing interest in Rust within
> the R community.
> >> And generally, Rust becoming a widely adopted language within the
> Python community (including the scientific part of that community). It is
> time to deal with the
> >> pain points with using Rust in R.
> >>
> >> Therefore, I would kindly ask that we have a dialogue on how to remedy
> the issue above first, and how we may deal with other issues going forward.
> There are both challenges embedded in R itself, and the current CRAN policy
> for Rust is prohibitive.
> >>
> >>
> >>
> >> Mossa Merhi Reimert
> >> Postdoctoral Researcher
> >>
> >> K?benhavns Universitet
> >> Department of Veterinary and Animal Sciences
> >> Animal Welfare and Disease Control
> >> Gr?nneg?rdsvej 8
> >> 1870 Frederiksberg C
> >> Denmark
> >>
> >> +45 35324135
> >> mossa at sund.ku.dk<mailto:mossa at sund.ku.dk>
> >>
> >>
> >>        [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Mar  2 18:21:39 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 2 Mar 2025 12:21:39 -0500
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <CAL3ufUKSkMXpgSD6-o7dC7tZuD+DmpHaq2JUzuF9+9dosE+XEA@mail.gmail.com>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
 <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
 <CAL3ufUKSkMXpgSD6-o7dC7tZuD+DmpHaq2JUzuF9+9dosE+XEA@mail.gmail.com>
Message-ID: <4eb96716-9f8c-4f4e-8d2d-a43feba44392@gmail.com>

On 2025-03-02 11:03 a.m., Josiah Parry wrote:
> Well this has surely veered off course!
> 
> As the one who filed the BugZilla report, I'd like to redirect the 
> conversation and provide further context.
> 
> The question should?be /"how do we get a dialogue started on this 
> bugzilla issue before the next minor /
> /release of R?"/

Isn't this exactly that dialogue?

> 
> The current check for Rust-based R package's downloading external 
> dependencies works by looking at
> the output logs for the presence of? "Downloading crates." This can is 
> an entirely fine requirement for
> CRAN?however, due to the fact that it is an error, packages distributed 
> through other repositories
> fail the R-CMD check.

I think you misunderstood me.  CRAN shares the view I gave that you 
should be able to run old code to reproduce old results, but they aren't 
the only ones.  That's always been a goal of R.

> Folks who use R-universe or PPM or some mysterious third thing may not 
> share the same philosophy as
> CRAN and prefer the convenience of fetching the dependencies at compile 
> time and not vendoring them.
> An alternative would be for the check to be optionally skipped or become 
> a NOTE when the CRAN
> flag is not set and an ERROR otherwise. Skipping this CRAN check is as 
> easy as adding `--quiet`
> or setting an environment variable?but that is against the spirit of the 
> check.

If it is that easy to skip the check, then I really don't see the issue. 
  Just ask the repository where you want to put your package to put that 
option or environment variable in place, and there's no longer a problem.

Duncan Murdoch

> Ideally, the check can remain, but scoped appropriately.
> 
> 
> On Sun, Mar 2, 2025 at 6:49?AM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     You seem to be taking a confontational tone, which isn't likely to
>     encourage a reasonable dialogue.
> 
>     I've looked for other messages on this, and didn't see any besides this
>     one explaining why including check_rust() in the checks is a problem.
>     The problem you talk about here is that it encourages vendoring, which
>     makes it harder for package authors to count downloads.
> 
>     To be honest, that doesn't seem like a very serious problem.? I assume
>     the packages ("crates") we are talking about are open source, so
>     this is
>     entirely in the spirit of how they are allowed to be distributed.
> 
>     If they aren't open source, then users of those packages should be
>     warned about that, and a check failure is a good way to do that.
> 
>     So you need to explain why it is important to be able to download and
>     install software and not be warned about it.
> 
>     I am not in R Core or CRAN, but I can suggest why it is better to
>     include source in the package:? it makes the use of that package more
>     reliable in the future.? It's not uncommon to run an R computation that
>     was written a few years ago.? Sometimes libraries or R have changed,
>     and
>     a user will need to go back to a previous version to reproduce the
>     calculation.? Being able to able to rebuild a system as it would have
>     been back then is important.
> 
>     Is that possible if the package needs to make a download?? The download
>     site that worked a few years ago may no longer exist.? If the site
>     exists, the code versions there may be different.
> 
>     Those are some of the issues that Simon was alluding to.
> 
>     Duncan Murdoch
> 
> 
> 
>     On 2025-03-02 5:45 a.m., Mossa Merhi Reimert via R-devel wrote:
>      > Dear Simon Urbanek,
>      >
>      > There has been very little engagement with the issue I referred
>     to. If it was decided that this ?check? ought to be part of the
>     default checks for R,
>      > then that could have been written to us. Either on the
>     bugs.r-project.org <http://bugs.r-project.org> or the proposed
>     patch. Before we talk about anything else,
>      > it does seem very strange that we cannot get a reasonable
>     dialogue going.
>      >
>      > I would like to say that the R/Rust community has grown
>     substantially. From my end, there are 3 bindings project, extendr,
>     savvy, and roxido.
>      > Then, there are now many rust-based packages on CRAN, see this
>     most recent compiled list https://github.com/nanxstats/r-rust-pkgs
>     <https://github.com/nanxstats/r-rust-pkgs>.
>      > There is also proof-of-concept
>     https://github.com/r-rust/hellorust
>     <https://github.com/r-rust/hellorust> that integrates `cargo`,
>     rust?s official build system, with R?s package build system,
>      > and https://github.com/extendr/hellorustc
>     <https://github.com/extendr/hellorustc>, which showcases how Rust
>     compiler could be directly linked with R?s package system.
>      >
>      >? ?Let me say, that the current R CMD check is not meant to be
>     ?helpful?. When a package is built, `cargo` tells the user
>     ?Downloading crates?.
>      > Thus, this information is already conveyed to the user.
>      >
>      > Personally, I do wish we could debate this requirement further. I
>     do not believe that having R-packages on CRAN vendor rust dependencies
>      > as a good policy. Download statistics is a success metric of a
>     given r-package and rust packages. By insisting on vendoring, and thus
>      > side-stepping `cargo` / crates.io <http://crates.io>, we are
>     robbing upstream authors of their download-numbers. I do not think
>     such policy is honourable.
>      >
>      > While C/C++ do not have official package repositories, it could
>     be thought of, as fair game, to have CRAN act as a pseudo package
>     manager for C/C++ libraries.
>      > I?m not going to argue for or against this part.
>      >
>      > There are many objections from the CRAN side to all things
>     related to Rust. I don?t want to open multiple topics in the same
>     thread.
>      > But there is plenty to bring up. And I had hoped we could talk
>     this little issue through, before embarking on a larger discussion.
>      > I do not appreciate the ?random demands? comment, as this is not
>     a demand, nor is it random.
>      > I have inquired my end of the community for suggestions
>      > to compile a larger proposal, but then I was afraid that this
>     would be perceived as a big, bulky demand.
>      >
>      > Rust is not C/C++/Java, and the support for Rust cannot look like
>     the support for these languages.
>      >
>      >
>      >
>      > From: Simon Urbanek <simon.urbanek at R-project.org>
>      > Date: Sunday, 2 March 2025 at 00.39
>      > To: Mossa Merhi Reimert <mossa at sund.ku.dk <mailto:mossa at sund.ku.dk>>
>      > Cc: r-devel at r-project.org <mailto:r-devel at r-project.org>
>     <r-devel at r-project.org <mailto:r-devel at r-project.org>>
>      > Subject: Re: [Rd] R CMD check and CRAN's Rust policy
>      > [Du f?r ikke ofte mails fra simon.urbanek at r-project.org
>     <mailto:simon.urbanek at r-project.org>. F? mere at vide om, hvorfor
>     dette er vigtigt, p? https://aka.ms/LearnAboutSenderIdentification
>     <https://aka.ms/LearnAboutSenderIdentification> ]
>      >
>      > Mossa,
>      >
>      > the issue you cite is lacking any pertinent information and it's
>     not even clear why it should be an issue. The check is perfectly
>     justified, it just reports whether a package using rust declares
>     this correctly and where it downloads 3rd party content - something
>     that is important to R users in general and not related to CRAN. I
>     don't see how any of this is "prohibitive" it just calls out what
>     the package is already doing.
>      >
>      > As discussed before, my hope was that the "R"ust community will
>     mature enough to work on proper support. It is not clear that it
>     happened yet, but once it does it would make sense to talk about
>     support just as we have for C, C++ and Java, so certainly that
>     should be the right discussion. However, it will have to start with
>     some thinking and a proposal on how the associated issues (compiler
>     support, versioning, dependency sources etc.) are to be addressed,
>     as opposed to making random demands. All this has nothing to do with
>     CRAN so the issue you mention seems irrelevant to the progress. Also
>     I'd like to know what are the "challenges embedded in R itself".
>      >
>      > Cheers,
>      > Simon
>      >
>      >
>      >> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel
>     <r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
>      >>
>      >> Hello everyone!
>      >>
>      >> I'm Mossa, I'm one of the maintainers of extendr, an automated
>     generation of bindings project for
>      >> Rust code, for use in R-packages.
>      >>
>      >> I'm writing to you, as R 4.4.3 was just released, and there have
>     not been
>      >> follow-up on an issue important to us. Link to the issue as
>     discussed on r-devel
>      >> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
>     <https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html>
>      >>
>      >> A community member has provided a suggestion to a patch here
>     https://github.com/r-devel/r-svn/pull/182
>     <https://github.com/r-devel/r-svn/pull/182>, and we have also
>     attempted to bring it up on
>      >> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
>     <https://bugs.r-project.org/show_bug.cgi?id=18806>
>      >>
>      >> TLDR: Default `R CMD check` uses additional CRAN-specific checks
>     for Rust,
>      >> instead of keeping this behind the --as-cran flag.
>      >>
>      >> I would like to say, that there is a growing interest in Rust
>     within the R community.
>      >> And generally, Rust becoming a widely adopted language within
>     the Python community (including the scientific part of that
>     community). It is time to deal with the
>      >> pain points with using Rust in R.
>      >>
>      >> Therefore, I would kindly ask that we have a dialogue on how to
>     remedy the issue above first, and how we may deal with other issues
>     going forward. There are both challenges embedded in R itself, and
>     the current CRAN policy for Rust is prohibitive.
>      >>
>      >>
>      >>
>      >> Mossa Merhi Reimert
>      >> Postdoctoral Researcher
>      >>
>      >> K?benhavns Universitet
>      >> Department of Veterinary and Animal Sciences
>      >> Animal Welfare and Disease Control
>      >> Gr?nneg?rdsvej 8
>      >> 1870 Frederiksberg C
>      >> Denmark
>      >>
>      >> +45 35324135
>      >> mossa at sund.ku.dk
>     <mailto:mossa at sund.ku.dk><mailto:mossa at sund.ku.dk
>     <mailto:mossa at sund.ku.dk>>
>      >>
>      >>
>      >>? ? ? ? [[alternative HTML version deleted]]
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>      >
>      >? ? ? ?[[alternative HTML version deleted]]
>      >
>      > ______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>


From bbo|ker @end|ng |rom gm@||@com  Sun Mar  2 19:09:28 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 2 Mar 2025 13:09:28 -0500
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <4eb96716-9f8c-4f4e-8d2d-a43feba44392@gmail.com>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
 <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
 <CAL3ufUKSkMXpgSD6-o7dC7tZuD+DmpHaq2JUzuF9+9dosE+XEA@mail.gmail.com>
 <4eb96716-9f8c-4f4e-8d2d-a43feba44392@gmail.com>
Message-ID: <df6bc0fc-1699-4691-a83c-1606d5db72a7@gmail.com>

  I, like Duncan, am just following along here. I think there might be 
two distinct questions which it would be useful to keep distinct:

  * how to silence the rust-check if desired?

   rather than debating whether the rust-check should be always-on, 
on-for-CRAN-only, etc., would it provide for useful flexibility to add 
an environment variable that enables/disables this functionality?  There 
are already 168 of these environment variables, how much would one more 
cost?

   I'm not sure how adding an environment variable to allow easier 
user/alternate-repository control of the check is "against the spirit of 
the check" ...

   All the existing check-regulating env variables ...

cd src/library/tools/R
grep 'Sys.getenv("_R_CHECK' * | sed -e 's/^.*Sys.getenv(//' | sed -e 
's/[,)].*//' | sort | uniq | wc


   * should CRAN allow Rust crates to be downloaded?

   This is a much more fundamental policy decision, which I have no 
opinion about.

   cheers
    Ben Bolker




On 2025-03-02 12:21 p.m., Duncan Murdoch wrote:
> On 2025-03-02 11:03 a.m., Josiah Parry wrote:
>> Well this has surely veered off course!
>>
>> As the one who filed the BugZilla report, I'd like to redirect the 
>> conversation and provide further context.
>>
>> The question should?be /"how do we get a dialogue started on this 
>> bugzilla issue before the next minor /
>> /release of R?"/
> 
> Isn't this exactly that dialogue?
> 
>>
>> The current check for Rust-based R package's downloading external 
>> dependencies works by looking at
>> the output logs for the presence of? "Downloading crates." This can is 
>> an entirely fine requirement for
>> CRAN?however, due to the fact that it is an error, packages 
>> distributed through other repositories
>> fail the R-CMD check.
> 
> I think you misunderstood me.? CRAN shares the view I gave that you 
> should be able to run old code to reproduce old results, but they aren't 
> the only ones.? That's always been a goal of R.
> 
>> Folks who use R-universe or PPM or some mysterious third thing may not 
>> share the same philosophy as
>> CRAN and prefer the convenience of fetching the dependencies at 
>> compile time and not vendoring them.
>> An alternative would be for the check to be optionally skipped or 
>> become a NOTE when the CRAN
>> flag is not set and an ERROR otherwise. Skipping this CRAN check is as 
>> easy as adding `--quiet`
>> or setting an environment variable?but that is against the spirit of 
>> the check.
> 
> If it is that easy to skip the check, then I really don't see the issue. 
>  ?Just ask the repository where you want to put your package to put that 
> option or environment variable in place, and there's no longer a problem.
> 
> Duncan Murdoch
> 
>> Ideally, the check can remain, but scoped appropriately.
>>
>>
>> On Sun, Mar 2, 2025 at 6:49?AM Duncan Murdoch 
>> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>> wrote:
>>
>> ??? You seem to be taking a confontational tone, which isn't likely to
>> ??? encourage a reasonable dialogue.
>>
>> ??? I've looked for other messages on this, and didn't see any besides 
>> this
>> ??? one explaining why including check_rust() in the checks is a problem.
>> ??? The problem you talk about here is that it encourages vendoring, 
>> which
>> ??? makes it harder for package authors to count downloads.
>>
>> ??? To be honest, that doesn't seem like a very serious problem.? I 
>> assume
>> ??? the packages ("crates") we are talking about are open source, so
>> ??? this is
>> ??? entirely in the spirit of how they are allowed to be distributed.
>>
>> ??? If they aren't open source, then users of those packages should be
>> ??? warned about that, and a check failure is a good way to do that.
>>
>> ??? So you need to explain why it is important to be able to download and
>> ??? install software and not be warned about it.
>>
>> ??? I am not in R Core or CRAN, but I can suggest why it is better to
>> ??? include source in the package:? it makes the use of that package more
>> ??? reliable in the future.? It's not uncommon to run an R computation 
>> that
>> ??? was written a few years ago.? Sometimes libraries or R have changed,
>> ??? and
>> ??? a user will need to go back to a previous version to reproduce the
>> ??? calculation.? Being able to able to rebuild a system as it would have
>> ??? been back then is important.
>>
>> ??? Is that possible if the package needs to make a download?? The 
>> download
>> ??? site that worked a few years ago may no longer exist.? If the site
>> ??? exists, the code versions there may be different.
>>
>> ??? Those are some of the issues that Simon was alluding to.
>>
>> ??? Duncan Murdoch
>>
>>
>>
>> ??? On 2025-03-02 5:45 a.m., Mossa Merhi Reimert via R-devel wrote:
>> ???? > Dear Simon Urbanek,
>> ???? >
>> ???? > There has been very little engagement with the issue I referred
>> ??? to. If it was decided that this ?check? ought to be part of the
>> ??? default checks for R,
>> ???? > then that could have been written to us. Either on the
>> ??? bugs.r-project.org <http://bugs.r-project.org> or the proposed
>> ??? patch. Before we talk about anything else,
>> ???? > it does seem very strange that we cannot get a reasonable
>> ??? dialogue going.
>> ???? >
>> ???? > I would like to say that the R/Rust community has grown
>> ??? substantially. From my end, there are 3 bindings project, extendr,
>> ??? savvy, and roxido.
>> ???? > Then, there are now many rust-based packages on CRAN, see this
>> ??? most recent compiled list https://github.com/nanxstats/r-rust-pkgs
>> ??? <https://github.com/nanxstats/r-rust-pkgs>.
>> ???? > There is also proof-of-concept
>> ??? https://github.com/r-rust/hellorust
>> ??? <https://github.com/r-rust/hellorust> that integrates `cargo`,
>> ??? rust?s official build system, with R?s package build system,
>> ???? > and https://github.com/extendr/hellorustc
>> ??? <https://github.com/extendr/hellorustc>, which showcases how Rust
>> ??? compiler could be directly linked with R?s package system.
>> ???? >
>> ???? >? ?Let me say, that the current R CMD check is not meant to be
>> ??? ?helpful?. When a package is built, `cargo` tells the user
>> ??? ?Downloading crates?.
>> ???? > Thus, this information is already conveyed to the user.
>> ???? >
>> ???? > Personally, I do wish we could debate this requirement further. I
>> ??? do not believe that having R-packages on CRAN vendor rust 
>> dependencies
>> ???? > as a good policy. Download statistics is a success metric of a
>> ??? given r-package and rust packages. By insisting on vendoring, and 
>> thus
>> ???? > side-stepping `cargo` / crates.io <http://crates.io>, we are
>> ??? robbing upstream authors of their download-numbers. I do not think
>> ??? such policy is honourable.
>> ???? >
>> ???? > While C/C++ do not have official package repositories, it could
>> ??? be thought of, as fair game, to have CRAN act as a pseudo package
>> ??? manager for C/C++ libraries.
>> ???? > I?m not going to argue for or against this part.
>> ???? >
>> ???? > There are many objections from the CRAN side to all things
>> ??? related to Rust. I don?t want to open multiple topics in the same
>> ??? thread.
>> ???? > But there is plenty to bring up. And I had hoped we could talk
>> ??? this little issue through, before embarking on a larger discussion.
>> ???? > I do not appreciate the ?random demands? comment, as this is not
>> ??? a demand, nor is it random.
>> ???? > I have inquired my end of the community for suggestions
>> ???? > to compile a larger proposal, but then I was afraid that this
>> ??? would be perceived as a big, bulky demand.
>> ???? >
>> ???? > Rust is not C/C++/Java, and the support for Rust cannot look like
>> ??? the support for these languages.
>> ???? >
>> ???? >
>> ???? >
>> ???? > From: Simon Urbanek <simon.urbanek at R-project.org>
>> ???? > Date: Sunday, 2 March 2025 at 00.39
>> ???? > To: Mossa Merhi Reimert <mossa at sund.ku.dk 
>> <mailto:mossa at sund.ku.dk>>
>> ???? > Cc: r-devel at r-project.org <mailto:r-devel at r-project.org>
>> ??? <r-devel at r-project.org <mailto:r-devel at r-project.org>>
>> ???? > Subject: Re: [Rd] R CMD check and CRAN's Rust policy
>> ???? > [Du f?r ikke ofte mails fra simon.urbanek at r-project.org
>> ??? <mailto:simon.urbanek at r-project.org>. F? mere at vide om, hvorfor
>> ??? dette er vigtigt, p? https://aka.ms/LearnAboutSenderIdentification
>> ??? <https://aka.ms/LearnAboutSenderIdentification> ]
>> ???? >
>> ???? > Mossa,
>> ???? >
>> ???? > the issue you cite is lacking any pertinent information and it's
>> ??? not even clear why it should be an issue. The check is perfectly
>> ??? justified, it just reports whether a package using rust declares
>> ??? this correctly and where it downloads 3rd party content - something
>> ??? that is important to R users in general and not related to CRAN. I
>> ??? don't see how any of this is "prohibitive" it just calls out what
>> ??? the package is already doing.
>> ???? >
>> ???? > As discussed before, my hope was that the "R"ust community will
>> ??? mature enough to work on proper support. It is not clear that it
>> ??? happened yet, but once it does it would make sense to talk about
>> ??? support just as we have for C, C++ and Java, so certainly that
>> ??? should be the right discussion. However, it will have to start with
>> ??? some thinking and a proposal on how the associated issues (compiler
>> ??? support, versioning, dependency sources etc.) are to be addressed,
>> ??? as opposed to making random demands. All this has nothing to do with
>> ??? CRAN so the issue you mention seems irrelevant to the progress. Also
>> ??? I'd like to know what are the "challenges embedded in R itself".
>> ???? >
>> ???? > Cheers,
>> ???? > Simon
>> ???? >
>> ???? >
>> ???? >> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel
>> ??? <r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
>> ???? >>
>> ???? >> Hello everyone!
>> ???? >>
>> ???? >> I'm Mossa, I'm one of the maintainers of extendr, an automated
>> ??? generation of bindings project for
>> ???? >> Rust code, for use in R-packages.
>> ???? >>
>> ???? >> I'm writing to you, as R 4.4.3 was just released, and there have
>> ??? not been
>> ???? >> follow-up on an issue important to us. Link to the issue as
>> ??? discussed on r-devel
>> ???? >> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
>> ??? <https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html>
>> ???? >>
>> ???? >> A community member has provided a suggestion to a patch here
>> ??? https://github.com/r-devel/r-svn/pull/182
>> ??? <https://github.com/r-devel/r-svn/pull/182>, and we have also
>> ??? attempted to bring it up on
>> ???? >> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
>> ??? <https://bugs.r-project.org/show_bug.cgi?id=18806>
>> ???? >>
>> ???? >> TLDR: Default `R CMD check` uses additional CRAN-specific checks
>> ??? for Rust,
>> ???? >> instead of keeping this behind the --as-cran flag.
>> ???? >>
>> ???? >> I would like to say, that there is a growing interest in Rust
>> ??? within the R community.
>> ???? >> And generally, Rust becoming a widely adopted language within
>> ??? the Python community (including the scientific part of that
>> ??? community). It is time to deal with the
>> ???? >> pain points with using Rust in R.
>> ???? >>
>> ???? >> Therefore, I would kindly ask that we have a dialogue on how to
>> ??? remedy the issue above first, and how we may deal with other issues
>> ??? going forward. There are both challenges embedded in R itself, and
>> ??? the current CRAN policy for Rust is prohibitive.
>> ???? >>
>> ???? >>
>> ???? >>
>> ???? >> Mossa Merhi Reimert
>> ???? >> Postdoctoral Researcher
>> ???? >>
>> ???? >> K?benhavns Universitet
>> ???? >> Department of Veterinary and Animal Sciences
>> ???? >> Animal Welfare and Disease Control
>> ???? >> Gr?nneg?rdsvej 8
>> ???? >> 1870 Frederiksberg C
>> ???? >> Denmark
>> ???? >>
>> ???? >> +45 35324135
>> ???? >> mossa at sund.ku.dk
>> ??? <mailto:mossa at sund.ku.dk><mailto:mossa at sund.ku.dk
>> ??? <mailto:mossa at sund.ku.dk>>
>> ???? >>
>> ???? >>
>> ???? >>? ? ? ? [[alternative HTML version deleted]]
>> ???? >>
>> ???? >> ______________________________________________
>> ???? >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> ???? >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ??? <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> ???? >
>> ???? >? ? ? ?[[alternative HTML version deleted]]
>> ???? >
>> ???? > ______________________________________________
>> ???? > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>> ??? <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>
>> ??? ______________________________________________
>> ??? R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> ??? https://stat.ethz.ch/mailman/listinfo/r-devel
>> ??? <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Mar  2 20:41:50 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 2 Mar 2025 14:41:50 -0500
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <df6bc0fc-1699-4691-a83c-1606d5db72a7@gmail.com>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
 <66df3450-ed40-4d0c-b40b-626b75eabf0b@gmail.com>
 <CAL3ufUKSkMXpgSD6-o7dC7tZuD+DmpHaq2JUzuF9+9dosE+XEA@mail.gmail.com>
 <4eb96716-9f8c-4f4e-8d2d-a43feba44392@gmail.com>
 <df6bc0fc-1699-4691-a83c-1606d5db72a7@gmail.com>
Message-ID: <19f561ae-d787-4f27-b3ba-f63c9b65fba5@gmail.com>

On 2025-03-02 1:09 p.m., Ben Bolker wrote:
>    I, like Duncan, am just following along here. I think there might be
> two distinct questions which it would be useful to keep distinct:
> 
>    * how to silence the rust-check if desired?
> 
>     rather than debating whether the rust-check should be always-on,
> on-for-CRAN-only, etc., would it provide for useful flexibility to add
> an environment variable that enables/disables this functionality?  There
> are already 168 of these environment variables, how much would one more
> cost?

I may have misunderstood Josiah.  I thought his message said that it is 
already easy to silence the check, by stopping the code from issuing the 
message the check is looking for.

Presumably the package shouldn't do that, but if there's an environment 
variable that can be set to do it, then the repository or user can 
choose to do it, so there's no need for R to add another environment 
variable.

BTW, as far as I can see current R-devel doesn't issue an error, it just 
issues warnings about two issues:

  - the package is downloading crates
  - the rustc compiler doesn't report a version number

Duncan Murdoch

> 
>     I'm not sure how adding an environment variable to allow easier
> user/alternate-repository control of the check is "against the spirit of
> the check" ...
> 
>     All the existing check-regulating env variables ...
> 
> cd src/library/tools/R
> grep 'Sys.getenv("_R_CHECK' * | sed -e 's/^.*Sys.getenv(//' | sed -e
> 's/[,)].*//' | sort | uniq | wc
> 
> 
>     * should CRAN allow Rust crates to be downloaded?
> 
>     This is a much more fundamental policy decision, which I have no
> opinion about.
> 
>     cheers
>      Ben Bolker
> 
> 
> 
> 
> On 2025-03-02 12:21 p.m., Duncan Murdoch wrote:
>> On 2025-03-02 11:03 a.m., Josiah Parry wrote:
>>> Well this has surely veered off course!
>>>
>>> As the one who filed the BugZilla report, I'd like to redirect the
>>> conversation and provide further context.
>>>
>>> The question should?be /"how do we get a dialogue started on this
>>> bugzilla issue before the next minor /
>>> /release of R?"/
>>
>> Isn't this exactly that dialogue?
>>
>>>
>>> The current check for Rust-based R package's downloading external
>>> dependencies works by looking at
>>> the output logs for the presence of? "Downloading crates." This can is
>>> an entirely fine requirement for
>>> CRAN?however, due to the fact that it is an error, packages
>>> distributed through other repositories
>>> fail the R-CMD check.
>>
>> I think you misunderstood me.? CRAN shares the view I gave that you
>> should be able to run old code to reproduce old results, but they aren't
>> the only ones.? That's always been a goal of R.
>>
>>> Folks who use R-universe or PPM or some mysterious third thing may not
>>> share the same philosophy as
>>> CRAN and prefer the convenience of fetching the dependencies at
>>> compile time and not vendoring them.
>>> An alternative would be for the check to be optionally skipped or
>>> become a NOTE when the CRAN
>>> flag is not set and an ERROR otherwise. Skipping this CRAN check is as
>>> easy as adding `--quiet`
>>> or setting an environment variable?but that is against the spirit of
>>> the check.
>>
>> If it is that easy to skip the check, then I really don't see the issue.
>>   ?Just ask the repository where you want to put your package to put that
>> option or environment variable in place, and there's no longer a problem.
>>
>> Duncan Murdoch
>>
>>> Ideally, the check can remain, but scoped appropriately.
>>>
>>>
>>> On Sun, Mar 2, 2025 at 6:49?AM Duncan Murdoch
>>> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>> wrote:
>>>
>>>  ??? You seem to be taking a confontational tone, which isn't likely to
>>>  ??? encourage a reasonable dialogue.
>>>
>>>  ??? I've looked for other messages on this, and didn't see any besides
>>> this
>>>  ??? one explaining why including check_rust() in the checks is a problem.
>>>  ??? The problem you talk about here is that it encourages vendoring,
>>> which
>>>  ??? makes it harder for package authors to count downloads.
>>>
>>>  ??? To be honest, that doesn't seem like a very serious problem.? I
>>> assume
>>>  ??? the packages ("crates") we are talking about are open source, so
>>>  ??? this is
>>>  ??? entirely in the spirit of how they are allowed to be distributed.
>>>
>>>  ??? If they aren't open source, then users of those packages should be
>>>  ??? warned about that, and a check failure is a good way to do that.
>>>
>>>  ??? So you need to explain why it is important to be able to download and
>>>  ??? install software and not be warned about it.
>>>
>>>  ??? I am not in R Core or CRAN, but I can suggest why it is better to
>>>  ??? include source in the package:? it makes the use of that package more
>>>  ??? reliable in the future.? It's not uncommon to run an R computation
>>> that
>>>  ??? was written a few years ago.? Sometimes libraries or R have changed,
>>>  ??? and
>>>  ??? a user will need to go back to a previous version to reproduce the
>>>  ??? calculation.? Being able to able to rebuild a system as it would have
>>>  ??? been back then is important.
>>>
>>>  ??? Is that possible if the package needs to make a download?? The
>>> download
>>>  ??? site that worked a few years ago may no longer exist.? If the site
>>>  ??? exists, the code versions there may be different.
>>>
>>>  ??? Those are some of the issues that Simon was alluding to.
>>>
>>>  ??? Duncan Murdoch
>>>
>>>
>>>
>>>  ??? On 2025-03-02 5:45 a.m., Mossa Merhi Reimert via R-devel wrote:
>>>  ???? > Dear Simon Urbanek,
>>>  ???? >
>>>  ???? > There has been very little engagement with the issue I referred
>>>  ??? to. If it was decided that this ?check? ought to be part of the
>>>  ??? default checks for R,
>>>  ???? > then that could have been written to us. Either on the
>>>  ??? bugs.r-project.org <http://bugs.r-project.org> or the proposed
>>>  ??? patch. Before we talk about anything else,
>>>  ???? > it does seem very strange that we cannot get a reasonable
>>>  ??? dialogue going.
>>>  ???? >
>>>  ???? > I would like to say that the R/Rust community has grown
>>>  ??? substantially. From my end, there are 3 bindings project, extendr,
>>>  ??? savvy, and roxido.
>>>  ???? > Then, there are now many rust-based packages on CRAN, see this
>>>  ??? most recent compiled list https://github.com/nanxstats/r-rust-pkgs
>>>  ??? <https://github.com/nanxstats/r-rust-pkgs>.
>>>  ???? > There is also proof-of-concept
>>>  ??? https://github.com/r-rust/hellorust
>>>  ??? <https://github.com/r-rust/hellorust> that integrates `cargo`,
>>>  ??? rust?s official build system, with R?s package build system,
>>>  ???? > and https://github.com/extendr/hellorustc
>>>  ??? <https://github.com/extendr/hellorustc>, which showcases how Rust
>>>  ??? compiler could be directly linked with R?s package system.
>>>  ???? >
>>>  ???? >? ?Let me say, that the current R CMD check is not meant to be
>>>  ??? ?helpful?. When a package is built, `cargo` tells the user
>>>  ??? ?Downloading crates?.
>>>  ???? > Thus, this information is already conveyed to the user.
>>>  ???? >
>>>  ???? > Personally, I do wish we could debate this requirement further. I
>>>  ??? do not believe that having R-packages on CRAN vendor rust
>>> dependencies
>>>  ???? > as a good policy. Download statistics is a success metric of a
>>>  ??? given r-package and rust packages. By insisting on vendoring, and
>>> thus
>>>  ???? > side-stepping `cargo` / crates.io <http://crates.io>, we are
>>>  ??? robbing upstream authors of their download-numbers. I do not think
>>>  ??? such policy is honourable.
>>>  ???? >
>>>  ???? > While C/C++ do not have official package repositories, it could
>>>  ??? be thought of, as fair game, to have CRAN act as a pseudo package
>>>  ??? manager for C/C++ libraries.
>>>  ???? > I?m not going to argue for or against this part.
>>>  ???? >
>>>  ???? > There are many objections from the CRAN side to all things
>>>  ??? related to Rust. I don?t want to open multiple topics in the same
>>>  ??? thread.
>>>  ???? > But there is plenty to bring up. And I had hoped we could talk
>>>  ??? this little issue through, before embarking on a larger discussion.
>>>  ???? > I do not appreciate the ?random demands? comment, as this is not
>>>  ??? a demand, nor is it random.
>>>  ???? > I have inquired my end of the community for suggestions
>>>  ???? > to compile a larger proposal, but then I was afraid that this
>>>  ??? would be perceived as a big, bulky demand.
>>>  ???? >
>>>  ???? > Rust is not C/C++/Java, and the support for Rust cannot look like
>>>  ??? the support for these languages.
>>>  ???? >
>>>  ???? >
>>>  ???? >
>>>  ???? > From: Simon Urbanek <simon.urbanek at R-project.org>
>>>  ???? > Date: Sunday, 2 March 2025 at 00.39
>>>  ???? > To: Mossa Merhi Reimert <mossa at sund.ku.dk
>>> <mailto:mossa at sund.ku.dk>>
>>>  ???? > Cc: r-devel at r-project.org <mailto:r-devel at r-project.org>
>>>  ??? <r-devel at r-project.org <mailto:r-devel at r-project.org>>
>>>  ???? > Subject: Re: [Rd] R CMD check and CRAN's Rust policy
>>>  ???? > [Du f?r ikke ofte mails fra simon.urbanek at r-project.org
>>>  ??? <mailto:simon.urbanek at r-project.org>. F? mere at vide om, hvorfor
>>>  ??? dette er vigtigt, p? https://aka.ms/LearnAboutSenderIdentification
>>>  ??? <https://aka.ms/LearnAboutSenderIdentification> ]
>>>  ???? >
>>>  ???? > Mossa,
>>>  ???? >
>>>  ???? > the issue you cite is lacking any pertinent information and it's
>>>  ??? not even clear why it should be an issue. The check is perfectly
>>>  ??? justified, it just reports whether a package using rust declares
>>>  ??? this correctly and where it downloads 3rd party content - something
>>>  ??? that is important to R users in general and not related to CRAN. I
>>>  ??? don't see how any of this is "prohibitive" it just calls out what
>>>  ??? the package is already doing.
>>>  ???? >
>>>  ???? > As discussed before, my hope was that the "R"ust community will
>>>  ??? mature enough to work on proper support. It is not clear that it
>>>  ??? happened yet, but once it does it would make sense to talk about
>>>  ??? support just as we have for C, C++ and Java, so certainly that
>>>  ??? should be the right discussion. However, it will have to start with
>>>  ??? some thinking and a proposal on how the associated issues (compiler
>>>  ??? support, versioning, dependency sources etc.) are to be addressed,
>>>  ??? as opposed to making random demands. All this has nothing to do with
>>>  ??? CRAN so the issue you mention seems irrelevant to the progress. Also
>>>  ??? I'd like to know what are the "challenges embedded in R itself".
>>>  ???? >
>>>  ???? > Cheers,
>>>  ???? > Simon
>>>  ???? >
>>>  ???? >
>>>  ???? >> On Mar 2, 2025, at 8:45 AM, Mossa Merhi Reimert via R-devel
>>>  ??? <r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
>>>  ???? >>
>>>  ???? >> Hello everyone!
>>>  ???? >>
>>>  ???? >> I'm Mossa, I'm one of the maintainers of extendr, an automated
>>>  ??? generation of bindings project for
>>>  ???? >> Rust code, for use in R-packages.
>>>  ???? >>
>>>  ???? >> I'm writing to you, as R 4.4.3 was just released, and there have
>>>  ??? not been
>>>  ???? >> follow-up on an issue important to us. Link to the issue as
>>>  ??? discussed on r-devel
>>>  ???? >> https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html
>>>  ??? <https://stat.ethz.ch/pipermail/r-devel/2024-October/083666.html>
>>>  ???? >>
>>>  ???? >> A community member has provided a suggestion to a patch here
>>>  ??? https://github.com/r-devel/r-svn/pull/182
>>>  ??? <https://github.com/r-devel/r-svn/pull/182>, and we have also
>>>  ??? attempted to bring it up on
>>>  ???? >> Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18806
>>>  ??? <https://bugs.r-project.org/show_bug.cgi?id=18806>
>>>  ???? >>
>>>  ???? >> TLDR: Default `R CMD check` uses additional CRAN-specific checks
>>>  ??? for Rust,
>>>  ???? >> instead of keeping this behind the --as-cran flag.
>>>  ???? >>
>>>  ???? >> I would like to say, that there is a growing interest in Rust
>>>  ??? within the R community.
>>>  ???? >> And generally, Rust becoming a widely adopted language within
>>>  ??? the Python community (including the scientific part of that
>>>  ??? community). It is time to deal with the
>>>  ???? >> pain points with using Rust in R.
>>>  ???? >>
>>>  ???? >> Therefore, I would kindly ask that we have a dialogue on how to
>>>  ??? remedy the issue above first, and how we may deal with other issues
>>>  ??? going forward. There are both challenges embedded in R itself, and
>>>  ??? the current CRAN policy for Rust is prohibitive.
>>>  ???? >>
>>>  ???? >>
>>>  ???? >>
>>>  ???? >> Mossa Merhi Reimert
>>>  ???? >> Postdoctoral Researcher
>>>  ???? >>
>>>  ???? >> K?benhavns Universitet
>>>  ???? >> Department of Veterinary and Animal Sciences
>>>  ???? >> Animal Welfare and Disease Control
>>>  ???? >> Gr?nneg?rdsvej 8
>>>  ???? >> 1870 Frederiksberg C
>>>  ???? >> Denmark
>>>  ???? >>
>>>  ???? >> +45 35324135
>>>  ???? >> mossa at sund.ku.dk
>>>  ??? <mailto:mossa at sund.ku.dk><mailto:mossa at sund.ku.dk
>>>  ??? <mailto:mossa at sund.ku.dk>>
>>>  ???? >>
>>>  ???? >>
>>>  ???? >>? ? ? ? [[alternative HTML version deleted]]
>>>  ???? >>
>>>  ???? >> ______________________________________________
>>>  ???? >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>>  ???? >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>  ??? <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>>  ???? >
>>>  ???? >? ? ? ?[[alternative HTML version deleted]]
>>>  ???? >
>>>  ???? > ______________________________________________
>>>  ???? > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>>  ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>  ??? <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>>
>>>  ??? ______________________________________________
>>>  ??? R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>>  ??? https://stat.ethz.ch/mailman/listinfo/r-devel
>>>  ??? <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Mar  2 20:59:18 2025
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 3 Mar 2025 08:59:18 +1300
Subject: [Rd] R CMD check and CRAN's Rust policy
In-Reply-To: <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
References: <6ea9752b54b347e682240bc024665cef@sund.ku.dk>
 <9CB72F1A-D397-4133-B8D6-C7B9CD04A4A1@R-project.org>
 <32ad0520e7784407b08ad105304b714b@sund.ku.dk>
Message-ID: <6156CEC1-8C11-4E5A-9871-67E27E5C9F48@R-project.org>

Mossa,


> On Mar 2, 2025, at 11:45 PM, Mossa Merhi Reimert <mossa at sund.ku.dk> wrote:
> 
> There has been very little engagement with the issue I referred to. If it was decided that this ?check? ought to be part of the default checks for R, then that could have been written to us. Either on the bugs.r-project.org or the proposed patch. Before we talk about anything else, it does seem very strange that we cannot get a reasonable dialogue going.
>  

I don't see anything from you on this list - your first engagement was yesterday. I have no idea what you refer to as "us" and what makes you think you should have been notified if no one heard from you before. A start of any engagement is to start communication, so here we are, perhaps not the most fortunate way to start off, but we have a discussion and there is hope.


> I would like to say that the R/Rust community has grown substantially. From my end, there are 3 bindings project, extendr, savvy, and roxido. Then, there are now many rust-based packages on CRAN, see this most recent compiled list https://github.com/nanxstats/r-rust-pkgs. There is also proof-of-concept https://github.com/r-rust/hellorust that integrates `cargo`, rust?s official build system, with R?s package build system, and https://github.com/extendr/hellorustc, which showcases how Rust compiler could be directly linked with R?s package system.
>  

I think this part of the problem - there is no systematic rust support, so each package author does something differently. As much as it is nice to have the freedom to have many different implementation of the same thing, I would argue that in cases like language support it makes more sense to combine the effort into one solution (after everyone experimented and gained enough experience) that is easy to manage and is well maintained. This is what happened to most mature languages such as C++, Java and Python. That would avoid the "hacks" in place today (I'm referring to the check).


>  Let me say, that the current R CMD check is not meant to be ?helpful?. When a package is built, `cargo` tells the user ?Downloading crates?. Thus, this information is already conveyed to the user.
>  
> Personally, I do wish we could debate this requirement further. I do not believe that having R-packages on CRAN vendor rust dependencies as a good policy. Download statistics is a success metric of a given r-package and rust packages. By insisting on vendoring, and thus side-stepping `cargo` / crates.io, we are robbing upstream authors of their download-numbers. I do not think such policy is honourable.
>  


You are jumping issues here: as I said before this has nothing to do with CRAN. So let us first take CRAN out of the picture and talk about the check. The check does two things: a) it checks that the package correctly declares rust dependency and  b) checks whether the package uses 3rd party dynamic downloads. Since the "R"ust community has yet to come up with any systematic rust support, both seem very reasonable checks. We want to know if a package requires rust by checking the DESCRIPTION file alone so the user can make an informed decision whether they want (or even can) use the package. It is also important to know if a package can accesses 3rd party resources online. Due to rising security threats it is increasingly common to not allow analytics machines to have access to the Internet so sensitive data cannot be leaked. It also opens the can of legality as the resulting software may not adhere to the license of the package and there is no guarantee that the user will still have the license. Moreover, reproducibility is very important to R users so it should be possible to reproduce the installation - which excludes 3rd party distributed systems which don't have any such guarantees unless they provide a way to fully vendor dependencies. So, in short, there are many reasons why the user should know about the things checked so they can make informed decisions. Whether this is the best way to signal that is up for debate.

Your argument is that the important reason is a popularity contest based on download statistics. I would argue that it is a very weak reason, since vast majority of R users does not use source installations to install packages, so there is no "robbing" of upstream authors - the statistics don't reflect real usage anyway.

If you want to propose improvements to the check, I'm sure it would be appreciated, but putting it behind --as-cran doesn't seem the right approach nor does that solve the problem in any way as the issues are not CRAN-specifc. I would think that some proposal to declare rust requirements (incl. toolchain) and have declared a way to vendor dependencies to address off-line install, licensing and security issues uniformly for rust packages would be steps in the right direction.


> While C/C++ do not have official package repositories, it could be thought of, as fair game, to have CRAN act as a pseudo package manager for C/C++ libraries.
> I?m not going to argue for or against this part.
>  
> There are many objections from the CRAN side to all things related to Rust. I don?t want to open multiple topics in the same thread.
> But there is plenty to bring up. And I had hoped we could talk this little issue through, before embarking on a larger discussion.
> I do not appreciate the ?random demands? comment, as this is not a demand, nor is it random.
> I have inquired my end of the community for suggestions
> to compile a larger proposal, but then I was afraid that this would be perceived as a big, bulky demand.
>  
> Rust is not C/C++/Java, and the support for Rust cannot look like the support for these languages.
>  


Why not? They all require compilers, ways to deal with dependencies and produce binaries - so does Rust. It's just one of many similar languages. The key is to have proper support instead of having each package deal with the complexities alone.

Cheers,
Simon


From h@w|ckh@m @end|ng |rom gm@||@com  Wed Mar  5 14:47:04 2025
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Wed, 5 Mar 2025 07:47:04 -0600
Subject: [Rd] Depends: R (>= 4.1) for packages that use |> and \(...)
In-Reply-To: <20250206181812.5155d6ed@arachnoid>
References: <20250116144121.5520a9cc@arachnoid>
 <CAFDcVCTTVa+Ea+BoVoag0RJ7LK3P1tyPzBG9vP4U-4w6a4kKKQ@mail.gmail.com>
 <26506.26949.241762.7373@hornik.net> <26509.10892.521351.954386@hornik.net>
 <26512.37984.542732.125792@hornik.net>
 <CAP8nD2xthJ5TzwYdok5tjXiWyf4=Y=uGf-sf7FFQKCjzNAACOA@mail.gmail.com>
 <20250123121008.4338cff0@Tarkus> <26514.5904.863904.292546@hornik.net>
 <20250206181812.5155d6ed@arachnoid>
Message-ID: <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>

Unfortunately your test generates a false positive for httr2 (
https://cran.r-project.org/web/checks/check_results_httr2.html) and other
tidyverse packages where we use the base pipe in examples, but carefully
disable them for older versions of R.

Hadley

On Thu, Feb 6, 2025 at 9:18?AM Ivan Krylov via R-devel <
r-devel at r-project.org> wrote:

> On Thu, 23 Jan 2025 11:16:48 +0100
> Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
>
> > My guess would be that the new syntax is particularly prominently used
> > in examples: if so, it would be good to also have coverage for this.
>
> In today's CRAN snapshot, there turned out to be 198 packages that use
> 4.1 syntax in examples but not in code, 5 packages that use 4.2 syntax
> in examples but 4.1 in the code, and 3 packages that use 4.2 syntax in
> examples but not the code. This may be slightly imprecise because I
> don't have some of the Rd macro packages installed and run
> Rd2ex(stages=NULL) on manually-parsed Rd files without installing the
> packages.
>
> Attaching a patch that checks the syntax used in Rd examples at the
> same time as the main R code, not necessarily the best way to perform
> this check. Is it perhaps worth separating R/* checks from man/*.Rd
> checks? Should R CMD check try to reuse the Rd database from the
> installed copy of the package?
>
> --
> Best regards,
> Ivan
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Wed Mar  5 15:03:24 2025
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Wed, 5 Mar 2025 15:03:24 +0100
Subject: [Rd] Depends: R (>= 4.1) for packages that use |> and \(...)
In-Reply-To: <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>
References: <20250116144121.5520a9cc@arachnoid>
 <CAFDcVCTTVa+Ea+BoVoag0RJ7LK3P1tyPzBG9vP4U-4w6a4kKKQ@mail.gmail.com>
 <26506.26949.241762.7373@hornik.net> <26509.10892.521351.954386@hornik.net>
 <26512.37984.542732.125792@hornik.net>
 <CAP8nD2xthJ5TzwYdok5tjXiWyf4=Y=uGf-sf7FFQKCjzNAACOA@mail.gmail.com>
 <20250123121008.4338cff0@Tarkus> <26514.5904.863904.292546@hornik.net>
 <20250206181812.5155d6ed@arachnoid>
 <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>
Message-ID: <2b855a17-2e93-418b-85a9-afa2e0e8100f@insa-toulouse.fr>

Le 05/03/2025 ? 14:47, Hadley Wickham a ?crit?:
> Unfortunately your test generates a false positive for httr2 (
> https://cran.r-project.org/web/checks/check_results_httr2.html) and other
> tidyverse packages where we use the base pipe in examples, but carefully
> disable them for older versions of R.
For exemple,? in one of reported files 'iterate_with_offset.Rd' ( 
https://github.com/r-lib/httr2/blob/main/man/iterate_with_offset.Rd ), 
we can see :

\examples{
req <- request(example_url()) |>
 ? req_url_path("/iris") |>
 ? req_throttle(10) |>
 ? req_url_query(limit = 50)
...

the pipe '|>' is well used but I didn't find any check for R version 
prior to 4.1. May be it is done elsewhere?

Best,
Serguei.

>
> Hadley
>
> On Thu, Feb 6, 2025 at 9:18?AM Ivan Krylov via R-devel <
> r-devel at r-project.org> wrote:
>
>> On Thu, 23 Jan 2025 11:16:48 +0100
>> Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
>>
>>> My guess would be that the new syntax is particularly prominently used
>>> in examples: if so, it would be good to also have coverage for this.
>> In today's CRAN snapshot, there turned out to be 198 packages that use
>> 4.1 syntax in examples but not in code, 5 packages that use 4.2 syntax
>> in examples but 4.1 in the code, and 3 packages that use 4.2 syntax in
>> examples but not the code. This may be slightly imprecise because I
>> don't have some of the Rd macro packages installed and run
>> Rd2ex(stages=NULL) on manually-parsed Rd files without installing the
>> packages.
>>
>> Attaching a patch that checks the syntax used in Rd examples at the
>> same time as the main R code, not necessarily the best way to perform
>> this check. Is it perhaps worth separating R/* checks from man/*.Rd
>> checks? Should R CMD check try to reuse the Rd database from the
>> installed copy of the package?
>>
>> --
>> Best regards,
>> Ivan
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
https://www.toulouse-biotechnology-institute.fr/en/plateformes-plateaux/cellule-mathematiques/


From h@w|ckh@m @end|ng |rom gm@||@com  Wed Mar  5 15:52:54 2025
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Wed, 5 Mar 2025 08:52:54 -0600
Subject: [Rd] Depends: R (>= 4.1) for packages that use |> and \(...)
In-Reply-To: <2b855a17-2e93-418b-85a9-afa2e0e8100f@insa-toulouse.fr>
References: <20250116144121.5520a9cc@arachnoid>
 <CAFDcVCTTVa+Ea+BoVoag0RJ7LK3P1tyPzBG9vP4U-4w6a4kKKQ@mail.gmail.com>
 <26506.26949.241762.7373@hornik.net> <26509.10892.521351.954386@hornik.net>
 <26512.37984.542732.125792@hornik.net>
 <CAP8nD2xthJ5TzwYdok5tjXiWyf4=Y=uGf-sf7FFQKCjzNAACOA@mail.gmail.com>
 <20250123121008.4338cff0@Tarkus> <26514.5904.863904.292546@hornik.net>
 <20250206181812.5155d6ed@arachnoid>
 <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>
 <2b855a17-2e93-418b-85a9-afa2e0e8100f@insa-toulouse.fr>
Message-ID: <CABdHhvHDkFm51UuQ1HEvW+ZtG2TkDAgooqELF7CySuhFrEtXug@mail.gmail.com>

On Wed, Mar 5, 2025 at 8:04?AM Serguei Sokol via R-devel <
r-devel at r-project.org> wrote:

> Le 05/03/2025 ? 14:47, Hadley Wickham a ?crit :
> > Unfortunately your test generates a false positive for httr2 (
> > https://cran.r-project.org/web/checks/check_results_httr2.html) and
> other
> > tidyverse packages where we use the base pipe in examples, but carefully
> > disable them for older versions of R.
> For exemple,  in one of reported files 'iterate_with_offset.Rd' (
> https://github.com/r-lib/httr2/blob/main/man/iterate_with_offset.Rd ),
> we can see :
>
> \examples{
> req <- request(example_url()) |>
>    req_url_path("/iris") |>
>    req_throttle(10) |>
>    req_url_query(limit = 50)
> ...
>
> the pipe '|>' is well used but I didn't find any check for R version
> prior to 4.1. May be it is done elsewhere?
>

Yes: look at the configure script + tools/examples.R

We automatically test all tidyverse packages with the last four versions of
R, and you can see that all checks are fine with R 4.0.5 at (e.g.)
https://github.com/r-lib/httr2/actions/runs/13665095780/job/38204665013

Hadley

-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Wed Mar  5 16:49:01 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 5 Mar 2025 18:49:01 +0300
Subject: [Rd] Depends: R (>= 4.1) for packages that use |> and \(...)
In-Reply-To: <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>
References: <20250116144121.5520a9cc@arachnoid>
 <CAFDcVCTTVa+Ea+BoVoag0RJ7LK3P1tyPzBG9vP4U-4w6a4kKKQ@mail.gmail.com>
 <26506.26949.241762.7373@hornik.net>
 <26509.10892.521351.954386@hornik.net>
 <26512.37984.542732.125792@hornik.net>
 <CAP8nD2xthJ5TzwYdok5tjXiWyf4=Y=uGf-sf7FFQKCjzNAACOA@mail.gmail.com>
 <20250123121008.4338cff0@Tarkus>
 <26514.5904.863904.292546@hornik.net>
 <20250206181812.5155d6ed@arachnoid>
 <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>
Message-ID: <20250305184901.37c54b4c@arachnoid>

? Wed, 5 Mar 2025 07:47:04 -0600
Hadley Wickham <h.wickham at gmail.com> ?????:

> Unfortunately your test generates a false positive for httr2 (
> https://cran.r-project.org/web/checks/check_results_httr2.html) and
> other tidyverse packages where we use the base pipe in examples, but
> carefully disable them for older versions of R.

Please accept my apologies. Indeed, the script [1] called at
configuration time does replace the examples section to avoid parse
errors for example(...). And having example() do nothing (with all code
and an explanation in the help page) is a small cost for having the
rest of the package work on R versions as old as 3.5.

I don't see a way to take this into account, since the workaround is
completely invisible to sufficiently new versions of R. It might be
that the best way forward is to revert the Rd example check.

-- 
Best regards,
Ivan

[1] https://github.com/r-lib/httr2/blob/main/tools/examples.R


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Sat Mar  8 09:23:18 2025
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Sat, 8 Mar 2025 09:23:18 +0100
Subject: [Rd] Depends: R (>= 4.1) for packages that use |> and \(...)
In-Reply-To: <20250305184901.37c54b4c@arachnoid>
References: <20250116144121.5520a9cc@arachnoid>
 <CAFDcVCTTVa+Ea+BoVoag0RJ7LK3P1tyPzBG9vP4U-4w6a4kKKQ@mail.gmail.com>
 <26506.26949.241762.7373@hornik.net>
 <26509.10892.521351.954386@hornik.net>
 <26512.37984.542732.125792@hornik.net>
 <CAP8nD2xthJ5TzwYdok5tjXiWyf4=Y=uGf-sf7FFQKCjzNAACOA@mail.gmail.com>
 <20250123121008.4338cff0@Tarkus>
 <26514.5904.863904.292546@hornik.net>
 <20250206181812.5155d6ed@arachnoid>
 <CABdHhvHVftEyQQ3TRA8xR9xYCLgOYRPFPiQ-4TMqcbyBokAisQ@mail.gmail.com>
 <20250305184901.37c54b4c@arachnoid>
Message-ID: <26571.65142.58708.103532@hornik.net>

>>>>> Ivan Krylov via R-devel writes:

Currently, we have 146 CRAN packages for which the check code finds 4.1
or later syntax additions in the Rd file examples only.  

Ivan kindly tried the effect of checking these with 4.0 (thanks again: I
cannot "easily" do this as Debian testing has libcurl 8 and the 4.0
configure code insists on libcurl 7).  This had 140 packages fail with
parse errors, 3 more for other reasons, and packages

  gmailr httr2 purrr

still pass as using the configure plus tools/examples.R renewcommand for
\examples trick.

So in c87900 I just committed I have simply stoplisted these three in
the check code, and the false positive NOTEs for these should be gone
when this gets picked up.

Thanks for spotting and helping to fix :-)

Best
-k

> ? Wed, 5 Mar 2025 07:47:04 -0600
> Hadley Wickham <h.wickham at gmail.com> ?????:

>> Unfortunately your test generates a false positive for httr2 (
>> https://cran.r-project.org/web/checks/check_results_httr2.html) and
>> other tidyverse packages where we use the base pipe in examples, but
>> carefully disable them for older versions of R.

> Please accept my apologies. Indeed, the script [1] called at
> configuration time does replace the examples section to avoid parse
> errors for example(...). And having example() do nothing (with all code
> and an explanation in the help page) is a small cost for having the
> rest of the package work on R versions as old as 3.5.

> I don't see a way to take this into account, since the workaround is
> completely invisible to sufficiently new versions of R. It might be
> that the best way forward is to revert the Rd example check.

> -- 
> Best regards,
> Ivan

> [1] https://github.com/r-lib/httr2/blob/main/tools/examples.R

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Mar  9 18:15:57 2025
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 9 Mar 2025 13:15:57 -0400
Subject: [Rd] R-devel (87913) compilation fails at "make vignettes";
 R-4-4 completes and fails "make check"
Message-ID: <CAL6gwnKvncaoD_GSniDQ7jf3VjbbUEcPE+J8EqdbZ92wkuK7FQ@mail.gmail.com>

Hello.

I recently built a new computer and I am now using Windows 11. When
building a distribution of R-devel from source using the most recent
Rtools44, the build consistently fails at the point it is supposed to
build the vignettes from base with the message below. R-4-4-branch
(also 87913) completes without error but fails "make check".

R-devel Error:
```
* DONE (mgcv)
building/updating vignettes for package 'grid' ...
processing 'displaylist.Rnw'
make[2]: *** [Makefile.win:99: vignettes] Error 1
make[1]: *** [Makefile:345: vignettes] Error 2
make: *** [Makefile:395: distribution] Error 2
```
Looking at Makefile.win in .src/library at line 99 shows:

```
vignettes:
@for pkg in grid parallel utils stats; do \
    $(ECHO) "building/updating vignettes for package '$${pkg}' ..."; \
    ($(ECHO) "tools:::.install_package_vignettes(\"$(srcdir)/$${pkg}\",
\"$(top_builddir)/library/$${pkg}\")") | \
        R_DEFAULT_PACKAGES="utils,tools" LC_ALL=C \
  R_LIBS_USER=NULL R_LIBS_SITE=NULL \
          $(R_EXE) > /dev/null || exit 1; \
done
@rm -Rf .vignettes
```

While R-4-4 completes "make distribution" compilation, it fails make check with:

```
Testing examples for package 'tools'
  comparing 'tools-Ex.Rout' to 'tools-Ex.Rout.save' ... NOTE
  1062,1063d1061
  < Warning in file(con, "r") :
  <   file("") only supports open = "w+" and open = "w+b": using the former
  1066,1067c1064,1065
  <  $ file    : chr ""
  <  $ title   : chr ""
  ---
  >  $ file    : chr "grid.Rnw"
  >  $ title   : chr "Introduction to grid"
Testing examples for package 'utils'
Error: running examples in 'utils-Ex.R' failed
Error: testing 'utils' failed
Execution halted
make[3]: *** [Makefile.win:29: test-Examples-Base] Error 1
make[2]: *** [Makefile.common:208: test-Examples] Error 2
make[1]: *** [Makefile.common:193: test-all-basics] Error 1
make: *** [Makefile:333: check-devel] Error 2
```

Some initial research indicated that permission issues can interfere
with vignette building. I have set Rtools44 to run as an administrator
and I confirmed that my build directory and all its subdirectories are
allowed full control by the logged-in windows account.

The only major difference between these sets of runs and those over
the last decade is the chip (Ryzen 9800X3D), which for vignettes
should be irrelevant, and the operating system?Windows 11 Pro instead
of Windows 10 Home. I don't know which change from R-4-4 to R-devel
triggers the error or why R-4-4 completes and fails the check. I have
exhausted my limited knowledge as to how to address the issue. Any
ideas as to why this may be happening and what I could do would be
greatly appreciated.

For completeness:

R VERSION AND TOOLS
R-devel version: 87913
R-4-4-branch:     87913
Rtools version: 6459

HARDWARE
Processor: AMD Ryzen 7 9800X3D 8-Core Processor
Installed RAM :192 GB (190 GB usable)
System type 64-bit operating system, x64-based processor

OPERATING SYSTEM
Edition Windows 11 Pro
Version 24H2
Installed on ?3/?7/?2025
OS build 26100.3194
Experience Windows Feature Experience Pack 1000.26100.48.0

Thank you,

Avi


From @eb@meyer @end|ng |rom |@u@de  Sun Mar  9 18:55:21 2025
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Sun, 9 Mar 2025 18:55:21 +0100
Subject: [Rd] R-devel (87913) compilation fails at "make vignettes";
 R-4-4 completes and fails "make check"
In-Reply-To: <CAL6gwnKvncaoD_GSniDQ7jf3VjbbUEcPE+J8EqdbZ92wkuK7FQ@mail.gmail.com>
References: <CAL6gwnKvncaoD_GSniDQ7jf3VjbbUEcPE+J8EqdbZ92wkuK7FQ@mail.gmail.com>
Message-ID: <97c1b0d7-14f0-415a-8966-b117b59e0c3a@fau.de>

Am 09.03.25 um 18:15 schrieb Avraham Adler:
> Hello.
> 
> I recently built a new computer and I am now using Windows 11. When
> building a distribution of R-devel from source using the most recent
> Rtools44, the build consistently fails at the point it is supposed to
> build the vignettes from base with the message below. R-4-4-branch
> (also 87913) completes without error but fails "make check".
> 
> R-devel Error:
> ```
> * DONE (mgcv)
> building/updating vignettes for package 'grid' ...
> processing 'displaylist.Rnw'
> make[2]: *** [Makefile.win:99: vignettes] Error 1
> make[1]: *** [Makefile:345: vignettes] Error 2
> make: *** [Makefile:395: distribution] Error 2
> ```
> Looking at Makefile.win in .src/library at line 99 shows:
> 
> ```
> vignettes:
> @for pkg in grid parallel utils stats; do \
>      $(ECHO) "building/updating vignettes for package '$${pkg}' ..."; \
>      ($(ECHO) "tools:::.install_package_vignettes(\"$(srcdir)/$${pkg}\",
> \"$(top_builddir)/library/$${pkg}\")") | \
>          R_DEFAULT_PACKAGES="utils,tools" LC_ALL=C \
>    R_LIBS_USER=NULL R_LIBS_SITE=NULL \
>            $(R_EXE) > /dev/null || exit 1; \

The '|| exit 1' only exists since r87822: previously, failures from 
building the base vignettes would be missed.

> done
> @rm -Rf .vignettes
> ```
> 
> While R-4-4 completes "make distribution" compilation, it fails make check with:
> 
> ```
> Testing examples for package 'tools'
>    comparing 'tools-Ex.Rout' to 'tools-Ex.Rout.save' ... NOTE
>    1062,1063d1061
>    < Warning in file(con, "r") :
>    <   file("") only supports open = "w+" and open = "w+b": using the former
>    1066,1067c1064,1065
>    <  $ file    : chr ""
>    <  $ title   : chr ""
>    ---
>    >  $ file    : chr "grid.Rnw"
>    >  $ title   : chr "Introduction to grid"

This output diff from the example in ?tools::vignetteInfo shows that 
your R-4-4 installation indeed lacks base vignettes. Maybe pdflatex 
isn't installed or in the PATH on your new system?

> Testing examples for package 'utils'
> Error: running examples in 'utils-Ex.R' failed
> Error: testing 'utils' failed
> Execution halted
> make[3]: *** [Makefile.win:29: test-Examples-Base] Error 1
> make[2]: *** [Makefile.common:208: test-Examples] Error 2
> make[1]: *** [Makefile.common:193: test-all-basics] Error 1
> make: *** [Makefile:333: check-devel] Error 2
> ```

There should be a file utils-Ex.Rout.fail (I think in tests/Examples/). 
What does it say about the error?

Hope this helps!

	Sebastian Meyer

> 
> Some initial research indicated that permission issues can interfere
> with vignette building. I have set Rtools44 to run as an administrator
> and I confirmed that my build directory and all its subdirectories are
> allowed full control by the logged-in windows account.
> 
> The only major difference between these sets of runs and those over
> the last decade is the chip (Ryzen 9800X3D), which for vignettes
> should be irrelevant, and the operating system?Windows 11 Pro instead
> of Windows 10 Home. I don't know which change from R-4-4 to R-devel
> triggers the error or why R-4-4 completes and fails the check. I have
> exhausted my limited knowledge as to how to address the issue. Any
> ideas as to why this may be happening and what I could do would be
> greatly appreciated.
> 
> For completeness:
> 
> R VERSION AND TOOLS
> R-devel version: 87913
> R-4-4-branch:     87913
> Rtools version: 6459
> 
> HARDWARE
> Processor: AMD Ryzen 7 9800X3D 8-Core Processor
> Installed RAM :192 GB (190 GB usable)
> System type 64-bit operating system, x64-based processor
> 
> OPERATING SYSTEM
> Edition Windows 11 Pro
> Version 24H2
> Installed on ?3/?7/?2025
> OS build 26100.3194
> Experience Windows Feature Experience Pack 1000.26100.48.0
> 
> Thank you,
> 
> Avi
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Mar  9 20:15:12 2025
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 9 Mar 2025 15:15:12 -0400
Subject: [Rd] R-devel (87913) compilation fails at "make vignettes";
 R-4-4 completes and fails "make check"
In-Reply-To: <97c1b0d7-14f0-415a-8966-b117b59e0c3a@fau.de>
References: <CAL6gwnKvncaoD_GSniDQ7jf3VjbbUEcPE+J8EqdbZ92wkuK7FQ@mail.gmail.com>
 <97c1b0d7-14f0-415a-8966-b117b59e0c3a@fau.de>
Message-ID: <CAL6gwnLbzSA7u_Xk78FkaggbD6fAUy6nAXn3NCWsNMnAsuYK5w@mail.gmail.com>

Thank you very much, Sebastian. Your suggestion about checking the
FAIL solved the problem. It reminded me that GCC 12+ has a bug
regarding AVX2 alignments on Windows, which manifests when calling
`agrep` or `adist`, the latter being precisely the point of failure in
the FAIL file. See this thread [1] and this post in particular [2] for
more detail. Restoring passing "-Wa,-muse-unaligned-vector-move" to
EOPTS and Makevars solved the problem and check-devel passes. Tomas is
going to be rightfully annoyed with me for forgetting!

Thank you again!!

Avi

[1] https://stat.ethz.ch/pipermail/r-sig-windows/2024q1/000106.html
[2] https://stat.ethz.ch/pipermail/r-sig-windows/2024q1/000113.html

On Sun, Mar 9, 2025 at 1:55?PM Sebastian Meyer <seb.meyer at fau.de> wrote:
>
> Am 09.03.25 um 18:15 schrieb Avraham Adler:
> > Hello.
> >
> > I recently built a new computer and I am now using Windows 11. When
> > building a distribution of R-devel from source using the most recent
> > Rtools44, the build consistently fails at the point it is supposed to
> > build the vignettes from base with the message below. R-4-4-branch
> > (also 87913) completes without error but fails "make check".
> >
> > R-devel Error:
> > ```
> > * DONE (mgcv)
> > building/updating vignettes for package 'grid' ...
> > processing 'displaylist.Rnw'
> > make[2]: *** [Makefile.win:99: vignettes] Error 1
> > make[1]: *** [Makefile:345: vignettes] Error 2
> > make: *** [Makefile:395: distribution] Error 2
> > ```
> > Looking at Makefile.win in .src/library at line 99 shows:
> >
> > ```
> > vignettes:
> > @for pkg in grid parallel utils stats; do \
> >      $(ECHO) "building/updating vignettes for package '$${pkg}' ..."; \
> >      ($(ECHO) "tools:::.install_package_vignettes(\"$(srcdir)/$${pkg}\",
> > \"$(top_builddir)/library/$${pkg}\")") | \
> >          R_DEFAULT_PACKAGES="utils,tools" LC_ALL=C \
> >    R_LIBS_USER=NULL R_LIBS_SITE=NULL \
> >            $(R_EXE) > /dev/null || exit 1; \
>
> The '|| exit 1' only exists since r87822: previously, failures from
> building the base vignettes would be missed.
>
> > done
> > @rm -Rf .vignettes
> > ```
> >
> > While R-4-4 completes "make distribution" compilation, it fails make check with:
> >
> > ```
> > Testing examples for package 'tools'
> >    comparing 'tools-Ex.Rout' to 'tools-Ex.Rout.save' ... NOTE
> >    1062,1063d1061
> >    < Warning in file(con, "r") :
> >    <   file("") only supports open = "w+" and open = "w+b": using the former
> >    1066,1067c1064,1065
> >    <  $ file    : chr ""
> >    <  $ title   : chr ""
> >    ---
> >    >  $ file    : chr "grid.Rnw"
> >    >  $ title   : chr "Introduction to grid"
>
> This output diff from the example in ?tools::vignetteInfo shows that
> your R-4-4 installation indeed lacks base vignettes. Maybe pdflatex
> isn't installed or in the PATH on your new system?
>
> > Testing examples for package 'utils'
> > Error: running examples in 'utils-Ex.R' failed
> > Error: testing 'utils' failed
> > Execution halted
> > make[3]: *** [Makefile.win:29: test-Examples-Base] Error 1
> > make[2]: *** [Makefile.common:208: test-Examples] Error 2
> > make[1]: *** [Makefile.common:193: test-all-basics] Error 1
> > make: *** [Makefile:333: check-devel] Error 2
> > ```
>
> There should be a file utils-Ex.Rout.fail (I think in tests/Examples/).
> What does it say about the error?
>
> Hope this helps!
>
>         Sebastian Meyer
>
> >
> > Some initial research indicated that permission issues can interfere
> > with vignette building. I have set Rtools44 to run as an administrator
> > and I confirmed that my build directory and all its subdirectories are
> > allowed full control by the logged-in windows account.
> >
> > The only major difference between these sets of runs and those over
> > the last decade is the chip (Ryzen 9800X3D), which for vignettes
> > should be irrelevant, and the operating system?Windows 11 Pro instead
> > of Windows 10 Home. I don't know which change from R-4-4 to R-devel
> > triggers the error or why R-4-4 completes and fails the check. I have
> > exhausted my limited knowledge as to how to address the issue. Any
> > ideas as to why this may be happening and what I could do would be
> > greatly appreciated.
> >
> > For completeness:
> >
> > R VERSION AND TOOLS
> > R-devel version: 87913
> > R-4-4-branch:     87913
> > Rtools version: 6459
> >
> > HARDWARE
> > Processor: AMD Ryzen 7 9800X3D 8-Core Processor
> > Installed RAM :192 GB (190 GB usable)
> > System type 64-bit operating system, x64-based processor
> >
> > OPERATING SYSTEM
> > Edition Windows 11 Pro
> > Version 24H2
> > Installed on ?3/?7/?2025
> > OS build 26100.3194
> > Experience Windows Feature Experience Pack 1000.26100.48.0
> >
> > Thank you,
> >
> > Avi
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Mon Mar 10 14:19:50 2025
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 10 Mar 2025 14:19:50 +0100
Subject: [Rd] R 4.5.0 scheduled for April 11
Message-ID: <983AEC97-BB06-46E4-8691-4C0F90F76F7B@gmail.com>

Full schedule is available on developer.r-project.org (pending update from SVN).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Mon Mar 10 14:36:57 2025
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Mon, 10 Mar 2025 14:36:57 +0100
Subject: [Rd] write_PACKAGES's fields default
In-Reply-To: <CAN+W6_uyiPFrxZY+1jpZfWr2OuyB8GjZWGasyKe3-0=Uj2R3iQ@mail.gmail.com>
References: <CAN+W6_uyiPFrxZY+1jpZfWr2OuyB8GjZWGasyKe3-0=Uj2R3iQ@mail.gmail.com>
Message-ID: <945a0cfd-76ea-402b-941f-6f74474ec156@statistik.tu-dortmund.de>



On 01.03.2025 13:07, Llu?s Revilla wrote:
> Dear list,
> 
> I'm trying to get some details from repositories with
> available.packages. However, despite being included on the DESCRIPTION
> files they are not available.
> 
> ap <- utils::available.packages(fields = "Additional_repositories",
>      filters = c("CRAN", "duplicates"),
>      ignore_repo_cache =  TRUE,
>      repos = "https://cran.r-project.org")
> ap[, "Additional_repositories"] |> is.na() |> all()
> ## [1] TRUE
> 
> However, some packages like Seurat have the Additional_repositories
> field [2]. If I try with another repository (Bioconductor software
> repository):
> 
> ap <- available.packages(fields = "biocViews",
>      ignore_repo_cache =  TRUE,
>      repos = "https://bioconductor.org/packages/3.21/bioc")
> ap[, "biocViews"] |> is.na() |> all()
> ## [1] TRUE
> 
> It also misses the BiocViews field compulsory on that repository.
> Both repositories use tools::write_PACKAGES [3][4] to generate the
> file read by available.packages. This function writes by default
> fields "needed by available.packages".
> 
> However, it is unclear what is needed for available.packages.
> According to its documentation, it returns "details corresponding to
> packages currently available at one or more repositories". To me this
> would mean that fields on the DESCRIPTION files should appear, but the
> default of write_PACKAGES doesn't write other fields besides
> '"Package"', '"Version"', '"Priority"',  '"Depends"', '"Imports"',
> '"LinkingTo"', '"Suggests"', '"Enhances"', '"OS_type"', '"License"'
> and '"Archs"'.
> 
> I could approach each repository and ask to include more fields.
> However, to match the documentation on available.packages and help all
> repository administrators it would make sense to change the default on
> write_PACKAGES.
> Could the default fields be changed, so
> that all fields available on packages' DESCRIPTION to
> PACKAGES(.gz,.rds). Perhaps with fields = TRUE?
> If this is too much it would be great if fields documented by Writing
> R Extensions are written on PACKAGES.
> This modification would make it easier for all to reuse repository data.
> 
> Many thanks for your consideration,
> 
> Llu?s
> 
> PD: From CRAN perspective CRAN_packages_db() function can be used to
> get Additional_repositories, but this is limited to CRAN and won't
> work for BiocViews on Bioconductor or for other arbitrary fields like
> '"RoxygenNote"'.


I'd indeed use

Cpdb <- tools:::CRAN_package_db()
Bpdb <- tools:::BioC_package_db()

for the two mentioned repos. ALso, PACLAGES.... is downloaded very 
frequently and should not grow too much.

Is there a use case why available.packages() should provide this info 
while not being less performant for package installatons etc.?

Best,
Uwe Ligges




> 
> [1]: https://stat.ethz.ch/pipermail/r-devel/2024-June/083477.html
> [2]: https://cran.r-project.org/package=Seurat
> [3]: https://svn.r-project.org/R-dev-web/trunk/CRAN/QA/Uwe/make/writeCRANPackages.R
> [4]: https://github.com/Bioconductor/BBS/blob/devel/utils/makePropagationStatusDb.R#L348
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar 10 16:52:59 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 10 Mar 2025 16:52:59 +0100
Subject: [Rd] S4: show() method for "MethodDefinition": show non-trivial
 generic
Message-ID: <26575.2779.682772.959686@stat.math.ethz.ch>

Context: We are working to add complex and integer (sparse and dense)
	 matrix classes to package Matrix.

I'm working with "Ops", notably "Arith" group methods in order
to ensure that all combinations of classes  and arithmetic,
comparison, etc operators work.
 { and yes, if you don't know anything about S4 or group methods
   (which also exist for S3 or S7) you may now press "delete message"
   and go on to something else ...

   In the other case, maybe browse ?S4groupGeneric in R or on the web
   https://rdrr.io/r/methods/S4groupGeneric.html  
 }

Debugging problems and testing, for me always involves lots of
showMethods(..) and selectMethod(..) calls such as, say,

 selectMethod("+", c("lgCMatrix", "nMatrix"))

For the current (CRAN) version of Matrix, this prints the method
definition, and then ends in

   ...............
   }
   <environment: namespace:Matrix>

   Signatures:
	   e1          e2       
   target  "lgCMatrix" "nMatrix"
   defined "lMatrix"   "nMatrix"
   >

I did only ask for the "+" method, but of course,
e.g., when looking where we got this implemented, it is interesting
to note if this is from a "+" or an "Arith" or even (most
generally), an "Ops" method definition.

Now, fortunately, the selectMethod() object *does* contain this
information in its `generic` slot, but the show() method does not show it.

I propose to look into fixing this situation, such that in cases
as this one, there would be one additional line of show() output
   ` Generic: "Ops" `
and it would show (not the '~~~~~~~~~~~~~~' line I only added
here for visibility) :


   ...............
   }
   <environment: namespace:Matrix>

   Generic: "Ops"
   ~~~~~~~~~~~~~~
   Signatures:
	   e1          e2       
   target  "lgCMatrix" "nMatrix"
   defined "lMatrix"   "nMatrix"
   >


Of course this may break people's "pipelines" if they rely on
exact reproduction of R's console (or *.Rout R batch) output.
Apart from that, I see really advantages here, and I don't expect
the net effect to be problematic.

It may affect  the many Bioconductor packages using S4, and I'm
particularly glad for feedback from "there".

With thanks in advance,
Martin


--
Martin Maechler
ETH Zurich   and   R Core team


From |@go@g|ne @end|ng |rom @jd@e@  Mon Mar 10 17:22:23 2025
From: |@go@g|ne @end|ng |rom @jd@e@ (=?UTF-8?Q?Iago_Gin=C3=A9-V=C3=A1zquez?=)
Date: Mon, 10 Mar 2025 17:22:23 +0100
Subject: [Rd] Customizing width of input in Rterm
In-Reply-To: <20250226144203.203a8a31@arachnoid>
References: <725b0cf4-4874-4747-9bba-4ae24891ba38@sjd.es>
 <20250226144203.203a8a31@arachnoid>
Message-ID: <8c90ae43-cad4-411a-af12-1ef08d7f492f@sjd.es>

Thank you, Ivan!

On 26/02/2025 12:42, Ivan Krylov wrote:

> ? Fri, 21 Feb 2025 11:52:41 +0100
> Iago Gin?-V?zquez<iago.gine at sjd.es> ?????:
>
>> When using Rterm.exe (on Windows, I didn?t check Linux) only a
>> limited number of characters is displayed in the input lines,
>> independent on the |width| option, and, when navigating through the
>> command history this becomes very uncomfortable, since a command is
>> not fully displayed and, for example, it is very difficult to know
>> which parts of a command are being edited.
> The patch at the end of this message reads the console width on startup
> and handles the console resize events while getline() is running. The
> automatic resizing doesn't look nice due to gl_redraw() starting a new
> line newline before redrawing the prompt, but it works.
>
> This may have accessibility implications since it changes the behaviour
> of Rterm.exe, which is what A. Jonathan R. Godfrey recommends for blind
> Windows users [1]. I've experimented with NVDA and didn't notice
> anything breaking in Windows 10 terminal or mintty.exe, but it's hard
> to be sure without the real experience of using a screen reader.
>
> Is this approach worth adopting? Is it better to erase the current line
> instead of starting a new one? options(setWidthOnResize) could be
> implemented similarly but may require more care due to
> R_SetOptionWidth(...) evaluating R code.
>
> Index: src/gnuwin32/getline/getline.c
> ===================================================================
> --- src/gnuwin32/getline/getline.c	(revision 87795)
> +++ src/gnuwin32/getline/getline.c	(working copy)
> @@ -25,6 +25,7 @@
>   int 		(*gl_in_hook)(char *) = 0;
>   int 		(*gl_out_hook)(char *) = 0;
>   int 		(*gl_tab_hook)(char *, int, int *) = gl_tab;
> +static int      do_setwidth(int w);
>   
>   #include <Rconfig.h>
>   #include <R_ext/Riconv.h>
> @@ -214,6 +215,10 @@
>            The bug still exists in Windows 10, and thus we now call
>            GetConsoleInputW to get uchar.UnicodeChar. */
>         ReadConsoleInputW(Win32InputStream, &r, 1, &a);
> +      if (r.EventType == WINDOW_BUFFER_SIZE_EVENT) {
> +        if (do_setwidth(r.Event.WindowBufferSizeEvent.dwSize.X))
> +          gl_redraw();
> +      }
>         if (!(r.EventType == KEY_EVENT)) break;
>         st = r.Event.KeyEvent.dwControlKeyState;
>         vk = r.Event.KeyEvent.wVirtualKeyCode;
> @@ -487,6 +492,11 @@
>       gl_w2e_map = gl_realloc(NULL, 0, BUF_SIZE, sizeof(size_t));
>   
>       gl_char_init();
> +
> +    CONSOLE_SCREEN_BUFFER_INFO csb;
> +    GetConsoleScreenBufferInfo(Win32OutputStream, &csb);
> +    do_setwidth(csb.dwSize.X);
> +
>       gl_init_done = 1;
>   }
>   
> @@ -536,13 +546,21 @@
>       BUF_SIZE = newsize;
>   }
>   
> +static int
> +do_setwidth(int w)
> +{
> +    /* may be called from gl_getc if a resize event is received */
> +    if (w > 20) {
> +	gl_w_termw = w;
> +	return 1;
> +    }
> +    return 0;
> +}
> +
>   void
>   gl_setwidth(int w)
>   {
> -    /* not used in R; should arrange for redraw */
> -    if (w > 20)
> -	gl_w_termw = w;
> -    else
> +    if (!do_setwidth(w))
>   	gl_error("\n*** Error: minimum screen width is 21\n");
>   }
>   
>
>
&#8203;

-------------- next part --------------
A non-text attachment was scrubbed...
Name: OpenPGP_signature.asc
Type: application/pgp-signature
Size: 665 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20250310/365bb625/attachment.sig>

From ||u|@@rev|||@ @end|ng |rom gm@||@com  Tue Mar 11 23:29:34 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Tue, 11 Mar 2025 23:29:34 +0100
Subject: [Rd] write_PACKAGES's fields default
In-Reply-To: <945a0cfd-76ea-402b-941f-6f74474ec156@statistik.tu-dortmund.de>
References: <CAN+W6_uyiPFrxZY+1jpZfWr2OuyB8GjZWGasyKe3-0=Uj2R3iQ@mail.gmail.com>
 <945a0cfd-76ea-402b-941f-6f74474ec156@statistik.tu-dortmund.de>
Message-ID: <CAN+W6_so=Vgc3AhBFLscff9YGwNCb8NjRC-aJLxVkENObqyzaw@mail.gmail.com>

Dear Uwe,

I would like to outline three key reasons, in increasing order of
importance, for my proposal:

1) The current documentation does not fully reflect actual repository
practices. The available documentation suggests that
available.packages provides "details corresponding to packages
currently available at one or more repositories." However, in
practice, this function serves mostly one purpose: retrieving
information for installation. This dual purpose likely explains its
high frequency of use, but it does not align precisely with its
documented functionality.

2) The function already provides more fields than the mandatory
canonical ones outlined in the Writing R Extensions (WRE) manual:
'Package', 'Version', 'License', 'Description', 'Title', 'Author', and
'Maintainer' [1]. Expanding the available fields would benefit users,
package developers, and repository maintainers by offering greater
transparency and usability.

3) The absence of the 'Additional_repositories' field in the output
often forces users to resort to complex manual installations when
repository installations fail. Additionally, exposing the 'Packaged'
field could provide clarity about whether a package update was made by
the repository team or the original maintainer. Anticipating useful
fields is an ongoing challenge, adopting a flexible yet comprehensive
approach would better serve the community.

Regarding performance considerations, the available.packages output is
cached for one hour by default. While increasing this cache duration
might reduce repository demand, I have observed approximately 50
updates per day on CRAN (with significantly fewer on Bioconductor due
to synchronized releases). The frequency of updates has grown
alongside the number of packages on CRAN (up to 2022). Extending the
cache duration may reduce bandwidth usage, but it would also delay
users from accessing the latest package updates. The impact on the
server load and connection times remain unclear, particularly if the
file size increases.

To mitigate any performance slowdowns resulting from the addition of
new fields, I am considering providing a patch to optimize certain
steps in install.packages related to available.packages output.
Potential improvements include vectorizing package dependency
extraction and converting the output object to a matrix format before
comparisons. Additionally, the package_version function required to
compare versions seems slow too. There may be other opportunities for
speed and memory optimizations as well.

Concerning concerns about writing performance, the documentation on
update_PACKAGES indicates that the penalty for adding new fields would
be incurred once per field added. The impact at CRAN's scale or how it
scales with the number of fields and packages is unclear. Writing the
file with multiple new fields at once would be preferable to
incremental updates.

I initially proposed expanding and reusing existing functions. A
common alternative approach to providing this information would also
be appreciated. Other repositories have adopted different distribution
methods, as reflected in these private functions, and adding this
feature would not prevent using of those methods, but could raise them
to a canonical status on R itself.

I appreciate your time considering this.
Best,

Llu?s

[1]: https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#The-DESCRIPTION-file


On Mon, 10 Mar 2025 at 14:37, Uwe Ligges
<ligges at statistik.tu-dortmund.de> wrote:
>
>
>
> On 01.03.2025 13:07, Llu?s Revilla wrote:
> > Dear list,
> >
> > I'm trying to get some details from repositories with
> > available.packages. However, despite being included on the DESCRIPTION
> > files they are not available.
> >
> > ap <- utils::available.packages(fields = "Additional_repositories",
> >      filters = c("CRAN", "duplicates"),
> >      ignore_repo_cache =  TRUE,
> >      repos = "https://cran.r-project.org")
> > ap[, "Additional_repositories"] |> is.na() |> all()
> > ## [1] TRUE
> >
> > However, some packages like Seurat have the Additional_repositories
> > field [2]. If I try with another repository (Bioconductor software
> > repository):
> >
> > ap <- available.packages(fields = "biocViews",
> >      ignore_repo_cache =  TRUE,
> >      repos = "https://bioconductor.org/packages/3.21/bioc")
> > ap[, "biocViews"] |> is.na() |> all()
> > ## [1] TRUE
> >
> > It also misses the BiocViews field compulsory on that repository.
> > Both repositories use tools::write_PACKAGES [3][4] to generate the
> > file read by available.packages. This function writes by default
> > fields "needed by available.packages".
> >
> > However, it is unclear what is needed for available.packages.
> > According to its documentation, it returns "details corresponding to
> > packages currently available at one or more repositories". To me this
> > would mean that fields on the DESCRIPTION files should appear, but the
> > default of write_PACKAGES doesn't write other fields besides
> > '"Package"', '"Version"', '"Priority"',  '"Depends"', '"Imports"',
> > '"LinkingTo"', '"Suggests"', '"Enhances"', '"OS_type"', '"License"'
> > and '"Archs"'.
> >
> > I could approach each repository and ask to include more fields.
> > However, to match the documentation on available.packages and help all
> > repository administrators it would make sense to change the default on
> > write_PACKAGES.
> > Could the default fields be changed, so
> > that all fields available on packages' DESCRIPTION to
> > PACKAGES(.gz,.rds). Perhaps with fields = TRUE?
> > If this is too much it would be great if fields documented by Writing
> > R Extensions are written on PACKAGES.
> > This modification would make it easier for all to reuse repository data.
> >
> > Many thanks for your consideration,
> >
> > Llu?s
> >
> > PD: From CRAN perspective CRAN_packages_db() function can be used to
> > get Additional_repositories, but this is limited to CRAN and won't
> > work for BiocViews on Bioconductor or for other arbitrary fields like
> > '"RoxygenNote"'.
>
>
> I'd indeed use
>
> Cpdb <- tools:::CRAN_package_db()
> Bpdb <- tools:::BioC_package_db()
>
> for the two mentioned repos. ALso, PACLAGES.... is downloaded very
> frequently and should not grow too much.
>
> Is there a use case why available.packages() should provide this info
> while not being less performant for package installatons etc.?
>
> Best,
> Uwe Ligges
>
>
>
>
> >
> > [1]: https://stat.ethz.ch/pipermail/r-devel/2024-June/083477.html
> > [2]: https://cran.r-project.org/package=Seurat
> > [3]: https://svn.r-project.org/R-dev-web/trunk/CRAN/QA/Uwe/make/writeCRANPackages.R
> > [4]: https://github.com/Bioconductor/BBS/blob/devel/utils/makePropagationStatusDb.R#L348
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From edd @end|ng |rom deb|@n@org  Sat Mar 15 04:25:54 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 14 Mar 2025 22:25:54 -0500
Subject: [Rd] R-devel, bool, and C23
Message-ID: <26580.62274.590859.894472@rob.eddelbuettel.com>


An older package I looked at apparently currently fails to build under
r-devel (and with that my thanks to R-universe for giving us a 'broad' range
of builds for free -- off our development sources) over 'bool' related
changes and enum definitions.

I can get it to behave and build by declaring

  PKG_CFLAGS = -std=gnu23

but then I get a nag from both r-devel and r-release that

  W  checking compilation flags in Makevars ...
     Non-portable flags in variable 'PKG_CFLAGS':
       -std=gnu23

Reading the texi sources of r-devel's update WRE did not reveal a better way,
but maybe I missed it. Is there are preferred approach?

(My r-release and r-devel are current(ish): 4.4.3 and r87909, respectively.)

Thanks in advance for any pointers.

Cheers, Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |kry|ov @end|ng |rom d|@root@org  Sat Mar 15 07:49:58 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 15 Mar 2025 09:49:58 +0300
Subject: [Rd] R-devel, bool, and C23
In-Reply-To: <26580.62274.590859.894472@rob.eddelbuettel.com>
References: <26580.62274.590859.894472@rob.eddelbuettel.com>
Message-ID: <20250315094958.3ae62fe7@Tarkus>

On Fri, 14 Mar 2025 22:25:54 -0500
Dirk Eddelbuettel <edd at debian.org> wrote:

> An older package I looked at apparently currently fails to build under
> r-devel (and with that my thanks to R-universe for giving us a
> 'broad' range of builds for free -- off our development sources) over
> 'bool' related changes and enum definitions.
> 
> I can get it to behave and build by declaring
> 
>   PKG_CFLAGS = -std=gnu23

Could you please share the compilation failure messages? The -std=gnu23
flag causes R_ext/Boolean.h to _not_ #include <stdbool.h> before
defining enum Rboolean, so the problem is likely related to that.

-- 
Best regards,
Ivan


From edd @end|ng |rom deb|@n@org  Sat Mar 15 13:51:11 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 15 Mar 2025 07:51:11 -0500
Subject: [Rd] R-devel, bool, and C23
In-Reply-To: <20250315094958.3ae62fe7@Tarkus>
References: <26580.62274.590859.894472@rob.eddelbuettel.com>
 <20250315094958.3ae62fe7@Tarkus>
Message-ID: <26581.30655.401159.119676@rob.eddelbuettel.com>


On 15 March 2025 at 09:49, Ivan Krylov wrote:
| On Fri, 14 Mar 2025 22:25:54 -0500
| Dirk Eddelbuettel <edd at debian.org> wrote:
| 
| > An older package I looked at apparently currently fails to build under
| > r-devel (and with that my thanks to R-universe for giving us a
| > 'broad' range of builds for free -- off our development sources) over
| > 'bool' related changes and enum definitions.
| > 
| > I can get it to behave and build by declaring
| > 
| >   PKG_CFLAGS = -std=gnu23
| 
| Could you please share the compilation failure messages? The -std=gnu23
| flag causes R_ext/Boolean.h to _not_ #include <stdbool.h> before
| defining enum Rboolean, so the problem is likely related to that.

Sure thing. It is as so often a C++ package but has one C file src/init.c
which begins with

  #include <R.h>
  #include <Rinternals.h>
  #include <stdlib.h> // for NULL
  #include <R_ext/Rdynload.h>

and compilation then fails with

  In file included from /usr/local/lib/R-devel/lib/R/include/R.h:70,
                   from init.c:1:
  /usr/local/lib/R-devel/lib/R/include/R_ext/Boolean.h:62:16: warning: ISO C does not support specifying ?enum? underlying types before C23 [-Wpedantic]
     62 |   typedef enum :int { FALSE = 0, TRUE } Rboolean;  // so NOT NA
        |                ^

so apparently R.h as it is upsets it.

Cheers, Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |kry|ov @end|ng |rom d|@root@org  Sat Mar 15 14:26:31 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 15 Mar 2025 16:26:31 +0300
Subject: [Rd] R-devel, bool, and C23
In-Reply-To: <26581.30655.401159.119676@rob.eddelbuettel.com>
References: <26580.62274.590859.894472@rob.eddelbuettel.com>
 <20250315094958.3ae62fe7@Tarkus>
 <26581.30655.401159.119676@rob.eddelbuettel.com>
Message-ID: <20250315162631.6424c52b@Tarkus>

On Sat, 15 Mar 2025 07:51:11 -0500
Dirk Eddelbuettel <edd at debian.org> wrote:

>   /usr/local/lib/R-devel/lib/R/include/R_ext/Boolean.h:62:16: warning: ISO C does not support specifying ?enum? underlying types before C23 [-Wpedantic]
>      62 |   typedef enum :int { FALSE = 0, TRUE } Rboolean;  // so NOT NA
>       A |                ^

I think that the configure test [1] succeeds in non-C23 mode because
the test program compiles successfully (despite the warning), causing
the enum-related warning for any compilation units that include
R_ext/Boolean.h.

Since there may be no portable way to specify CFLAGS=-Werror for the
AC_RUN_IFELSE(...) test, perhaps the configure test should also test
for the reported C standard version? But that of course could also be
wrong...

-- 
Best regards,
Ivan

[1]
https://github.com/r-devel/r-svn/blob/886ba5f282a82d6f327211b08b4fa502641c7ef8/m4/R.m4#L5442-L5459


From edd @end|ng |rom deb|@n@org  Sat Mar 15 20:53:41 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 15 Mar 2025 14:53:41 -0500
Subject: [Rd] R-devel, bool, and C23
In-Reply-To: <20250315162631.6424c52b@Tarkus>
References: <26580.62274.590859.894472@rob.eddelbuettel.com>
 <20250315094958.3ae62fe7@Tarkus>
 <26581.30655.401159.119676@rob.eddelbuettel.com>
 <20250315162631.6424c52b@Tarkus>
Message-ID: <26581.56005.953244.379850@rob.eddelbuettel.com>


Follow-up and 'case (sort of) closed': Tomas and I dug around some more and
it is due to me setting CC in ~/.R/Makevars (to

  VER=-14
  CCACHE=ccache
  CC=$(CCACHE) gcc$(VER)

which drops the compilation standard flag (needed here for C23) and attached
to CC by configure.

I think that is actually buggy. It should attach it to CFLAGS, no?

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Mar 17 08:30:40 2025
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 17 Mar 2025 08:30:40 +0100
Subject: [Rd] Export tools:::analyze_license()?
In-Reply-To: <CAEjRNrmHbDLWwk0_JKcPrZaKVUPHfFATbaV-aLPvaNMAyxQMTw@mail.gmail.com>
References: <CAEjRNrmHbDLWwk0_JKcPrZaKVUPHfFATbaV-aLPvaNMAyxQMTw@mail.gmail.com>
Message-ID: <26583.53152.548080.314312@hornik.net>

>>>>> Will Landau writes:

Thanks: last night I committed

r87983 | hornik | 2025-03-16 21:56:27 +0100 (Sun, 16 Mar 2025) | 1 line
Document and export analyze_license().

and will soon port this to the 4.5 branch.

Best
-k

> To R-devel,
> In a future release of R, would it be possible to
> export tools:::analyze_license()? This would make it easier to implement
> copyright protections in alternative CRAN-like repositories. I would like
> to be able to programmatically scan an individual license string before
> accepting a new package.

> Will Landau

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ht @end|ng |rom he@therturner@net  Wed Mar 19 14:45:28 2025
From: ht @end|ng |rom he@therturner@net (Heather Turner)
Date: Wed, 19 Mar 2025 13:45:28 +0000
Subject: [Rd] R Dev Day @ useR! 2025, Mon 11 Aug, Duke University
Message-ID: <5fd362a2-252c-4859-9460-209fb5e56db0@app.fastmail.com>

Dear All,

The next R Dev Day will be the day after useR! 2025, at Duke University, Durham, NC, USA on Monday 11 August.

Read more details and apply for a place: https://user2025.r-project.org/additional/r-dev-day

*Deadline: Tuesday, 15 April (midnight anywhere on earth).*

The latest information for all upcoming R Dev Days can be found on the contributor site: https://contributor.r-project.org/events/r-dev-days/.

Best wishes,

Heather


From therne@u @end|ng |rom m@yo@edu  Wed Mar 19 17:49:31 2025
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 19 Mar 2025 16:49:31 +0000
Subject: [Rd] Problems with ::
Message-ID: <BL0PR01MB4625B1FDA4ACA669297120E3AED92@BL0PR01MB4625.prod.exchangelabs.com>

In response to the tidyverse habit of adding another zillion functions to one's search space, the use of things like survival::coxph is becoming more common.  But this practice breaks the use of the specials argument in terms.formula, something that I make heavy use of in the survival package.   The following two pairs of models give different answers, and the second is wrong.

fit1a <- lm(GNP ~  Year + offset(Unemployed), longley)
fit1b<- lm(GNP ~  Year + stats::offset(Unemployed), longley)

fit1a <- survdiff(Surv(time, status) ~ rx + cluster(litter), rats)
fit1b <- survdiff(Surv(time, status) ~ rx + survival::cluster(litter), rats)
zed <- survival::cluster(rats$litter)
fit1c <- survdiff(Surv(time, status) ~ rx + zed, rats)

In the most recent CRAN version of survival I added some pre-processing steps that successfully catch fit1b, by stripping off  "survival::" from formulas before calling terms.formula.   But I can't prevent fit1c, and don't yet know if there are other case not covered by my current hack.  At least one of the CRAN packages that depends on survival has an example of exactly fit1c in their test suite.

The survival package uses the special argument a lot: strata, cluster, pspline, tt, frailty, and ridge.  I'm trying to think of a good plan for long term changes.   I list 3 below, and am hoping for better ideas or input.

a. Caveat emptor:  If you work hard to fool the specials argument, and succeed, then "Congratulations, you fooled the parser."

b. What I did early on with tt(), which is to make the function defition completely internal to coxph (the only survival function that uses tt).   People who type survival::tt or  survival:::tt get an error message.   A plus of this is that the error message will  wean users from pasting survival:: to everything inside a formula.   The disadvantages are first that it will break existing user code (most of which should be broken -- its not doing what they think), a second is that there may be use cases for strata, say, outside of a survival formula; it is essentially factor with shorter default labels.

c. Make all of these functions have a class, and rewrite the code to depend on the class rather than specials.  The Surv function is recognized in this way, so is not harmed by survival::Surv.  It is also why calling Surv to create a new variable is fine.  I'd still retain specials,  to support legacy code.

The more ornery part of me votes for b (what is the effect on help files)?    In any case a change won't happen overnight.
Do we leave offset in the caveat emptor group?
A small section needs to be added to the "user written packages" document, where it talks about specials.
What other packages use specials?

Terry T.







	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Mar 19 18:58:46 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 19 Mar 2025 10:58:46 -0700
Subject: [Rd] structure(<primitive function>, ...) is sticky: a bug,
 or should it be an error?
Message-ID: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>

Hello.

I just (re-)discovered that structure(sum, init = 100) is "sticky",
i.e. it stays with base::sum(). Here's an minimal example:

$ R --vanilla --quiet
> void <- structure(sum, some_attr = TRUE)
> str(sum)
function (..., na.rm = FALSE)
 - attr(*, "some_attr")= logi TRUE

>From my very basic troubleshooting, it looks like this is happening
for primitive functions. I think I understand that this comes down to
primitive functions cannot be copied and baseenv() being special, i.e.
in structure() there will be no copy made of the primitive function,
and then attributes()<- ends up modifying the original primitive
function. Even if this is a documented feature, I believe, it is a
silent feature with risky side effects. We might already have code out
there that silently produces incorrect results, because of this
behavior. For example, I was about to a custom reduce() function where
I control the initial value via an "init" attribute of the reducer
function, e.g.

x <- 1:10
sum1 <- reduce(x, `+`)
sum2 <- reduce(x, structure(`+`, init = 100))  # == 100 + sum1

If I then call:

sum3 <- reduce(x, `+`)

the 'init' attribute that was set in the sum2 statement will affect
sum3 such that sum3 == sum2, not sum3 == sum1 as one would expect.


SUGGESTIONS:

If this is a bug, then I think it needs to be fixed. If it cannot be
fixed, maybe this could be protected against, e.g.

> void <- structure(sum, some_attr = TRUE)
Error: You must not set attributes on a primitive function: sum

Maybe it's sufficient to implement a protection against this in
attr()<-, attributes()<-, and class()<-.

Comments?

/Henrik

PS. I've verified this with R 4.4.3 and  R Under development
(unstable) (2025-03-19 r88003).


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Mar 19 19:37:03 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 19 Mar 2025 14:37:03 -0400
Subject: [Rd] Problems with ::
In-Reply-To: <BL0PR01MB4625B1FDA4ACA669297120E3AED92@BL0PR01MB4625.prod.exchangelabs.com>
References: <BL0PR01MB4625B1FDA4ACA669297120E3AED92@BL0PR01MB4625.prod.exchangelabs.com>
Message-ID: <b0a6c71d-65b6-441c-a5e2-38f79792c47b@gmail.com>

On 2025-03-19 12:49 p.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> In response to the tidyverse habit of adding another zillion functions to one's search space, the use of things like survival::coxph is becoming more common.  But this practice breaks the use of the specials argument in terms.formula, something that I make heavy use of in the survival package.   The following two pairs of models give different answers, and the second is wrong.
> 
> fit1a <- lm(GNP ~  Year + offset(Unemployed), longley)
> fit1b<- lm(GNP ~  Year + stats::offset(Unemployed), longley)
> 
> fit1a <- survdiff(Surv(time, status) ~ rx + cluster(litter), rats)
> fit1b <- survdiff(Surv(time, status) ~ rx + survival::cluster(litter), rats)
> zed <- survival::cluster(rats$litter)
> fit1c <- survdiff(Surv(time, status) ~ rx + zed, rats)
> 
> In the most recent CRAN version of survival I added some pre-processing steps that successfully catch fit1b, by stripping off  "survival::" from formulas before calling terms.formula.   But I can't prevent fit1c, and don't yet know if there are other case not covered by my current hack.  At least one of the CRAN packages that depends on survival has an example of exactly fit1c in their test suite.
> 
> The survival package uses the special argument a lot: strata, cluster, pspline, tt, frailty, and ridge.  I'm trying to think of a good plan for long term changes.   I list 3 below, and am hoping for better ideas or input.
> 
> a. Caveat emptor:  If you work hard to fool the specials argument, and succeed, then "Congratulations, you fooled the parser."
> 
> b. What I did early on with tt(), which is to make the function defition completely internal to coxph (the only survival function that uses tt).   People who type survival::tt or  survival:::tt get an error message.   A plus of this is that the error message will  wean users from pasting survival:: to everything inside a formula.   The disadvantages are first that it will break existing user code (most of which should be broken -- its not doing what they think), a second is that there may be use cases for strata, say, outside of a survival formula; it is essentially factor with shorter default labels.
> 
> c. Make all of these functions have a class, and rewrite the code to depend on the class rather than specials.  The Surv function is recognized in this way, so is not harmed by survival::Surv.  It is also why calling Surv to create a new variable is fine.  I'd still retain specials,  to support legacy code.
> 
> The more ornery part of me votes for b (what is the effect on help files)?    In any case a change won't happen overnight.
> Do we leave offset in the caveat emptor group?
> A small section needs to be added to the "user written packages" document, where it talks about specials.
> What other packages use specials?

For those functions where the "survival::" prefix leads to the wrong 
behaviour, I'd suggest defining a function that always generates an 
error. For example,

cluster <- function(...)
   stop("In the survival package, cluster() is not a real function.  It 
has special meaning in formulas and should only be used there.")


This will conflict with any of those functions (like survival::strata?) 
that are supposed to be meaningful outside of a formula.  In that case 
you'd have to rename either the special or the function, so you use two 
different names, e.g.
rata

strata <- function(...)
   stop("In the survival package version x.y or later, strata() is not a 
real function.  It has special meaning in formulas and should only be 
used there.  Use Strata() outside of a formula.")

Duncan Murdoch


From @vi@e@gross m@iii@g oii gm@ii@com  Wed Mar 19 19:52:51 2025
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Wed, 19 Mar 2025 14:52:51 -0400
Subject: [Rd] Problems with ::
In-Reply-To: <BL0PR01MB4625B1FDA4ACA669297120E3AED92@BL0PR01MB4625.prod.exchangelabs.com>
References: <BL0PR01MB4625B1FDA4ACA669297120E3AED92@BL0PR01MB4625.prod.exchangelabs.com>
Message-ID: <008001db9900$1db013d0$59103b70$@gmail.com>

Terry,

If I understand you, this is a problem anytime you include more than one
function with the same name and the latest masks all others. It is not only
a problem with the tidyverse, albeit that is an example of bringing in quite
a few functions from many packages at once.

I wonder if the following work-around makes some sense or will just cause
more issues somewhere.

Your concern is that if the user asks for something like package::function
it can cause issues. You are exploring options but I wonder if t can be
handled somewhat by the caller not using that.

Consider a function like stats::filter which is often masked by
dplyr::filter. If I ask for help on "filter" BEFORE loading tidyverse, I see
the stats version and can use it. After loading, the dplyr version is used
and the help shows both as it looks.

But when I add the line: 

filter <- stats::filter

I can reset it so the proper function is called. If you need both, you can
do something like this:

statsfilter <- stats::filter

The point is when calling another function such as your example, the
"package::" need not be passed along and all the other side would see is
"filter" which it would evaluate in an environment that hopefully now works
properly. 

In your case, would the following change work?

workaround_cluster<- survival::cluster

And then use "workaround_cluster" to avoid the confusion you need.

This is not a SOLUTION in any real sense but if it works, could be helpful
to some. Assuming dplyr has no compatibility, you can then use dplyr::filter
when you want the other one or ...

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Therneau, Terry
M., Ph.D. via R-devel
Sent: Wednesday, March 19, 2025 12:50 PM
To: r-devel at r-project.org
Subject: [Rd] Problems with ::

In response to the tidyverse habit of adding another zillion functions to
one's search space, the use of things like survival::coxph is becoming more
common.  But this practice breaks the use of the specials argument in
terms.formula, something that I make heavy use of in the survival package.
The following two pairs of models give different answers, and the second is
wrong.

fit1a <- lm(GNP ~  Year + offset(Unemployed), longley)
fit1b<- lm(GNP ~  Year + stats::offset(Unemployed), longley)

fit1a <- survdiff(Surv(time, status) ~ rx + cluster(litter), rats)
fit1b <- survdiff(Surv(time, status) ~ rx + survival::cluster(litter), rats)
zed <- survival::cluster(rats$litter)
fit1c <- survdiff(Surv(time, status) ~ rx + zed, rats)

In the most recent CRAN version of survival I added some pre-processing
steps that successfully catch fit1b, by stripping off  "survival::" from
formulas before calling terms.formula.   But I can't prevent fit1c, and
don't yet know if there are other case not covered by my current hack.  At
least one of the CRAN packages that depends on survival has an example of
exactly fit1c in their test suite.

The survival package uses the special argument a lot: strata, cluster,
pspline, tt, frailty, and ridge.  I'm trying to think of a good plan for
long term changes.   I list 3 below, and am hoping for better ideas or
input.

a. Caveat emptor:  If you work hard to fool the specials argument, and
succeed, then "Congratulations, you fooled the parser."

b. What I did early on with tt(), which is to make the function defition
completely internal to coxph (the only survival function that uses tt).
People who type survival::tt or  survival:::tt get an error message.   A
plus of this is that the error message will  wean users from pasting
survival:: to everything inside a formula.   The disadvantages are first
that it will break existing user code (most of which should be broken -- its
not doing what they think), a second is that there may be use cases for
strata, say, outside of a survival formula; it is essentially factor with
shorter default labels.

c. Make all of these functions have a class, and rewrite the code to depend
on the class rather than specials.  The Surv function is recognized in this
way, so is not harmed by survival::Surv.  It is also why calling Surv to
create a new variable is fine.  I'd still retain specials,  to support
legacy code.

The more ornery part of me votes for b (what is the effect on help files)?
In any case a change won't happen overnight.
Do we leave offset in the caveat emptor group?
A small section needs to be added to the "user written packages" document,
where it talks about specials.
What other packages use specials?

Terry T.







	[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Mar 20 11:31:40 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 20 Mar 2025 11:31:40 +0100
Subject: [Rd] structure(<primitive function>, ...) is sticky: a bug,
 or should it be an error?
In-Reply-To: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>
References: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>
Message-ID: <26587.61068.527937.384919@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Wed, 19 Mar 2025 10:58:46 -0700 writes:

    > Hello.
    > I just (re-)discovered that structure(sum, init = 100) is "sticky",
    > i.e. it stays with base::sum(). Here's an minimal example:

    > $ R --vanilla --quiet
    >> void <- structure(sum, some_attr = TRUE)
    >> str(sum)
    > function (..., na.rm = FALSE)
    > - attr(*, "some_attr")= logi TRUE

    >> From my very basic troubleshooting, it looks like this is happening
    > for primitive functions. I think I understand that this comes down to
    > primitive functions cannot be copied and baseenv() being special, i.e.
    > in structure() there will be no copy made of the primitive function,
    > and then attributes()<- ends up modifying the original primitive
    > function. Even if this is a documented feature, I believe, it is a
    > silent feature with risky side effects. We might already have code out
    > there that silently produces incorrect results, because of this
    > behavior. For example, I was about to a custom reduce() function where
    > I control the initial value via an "init" attribute of the reducer
    > function, e.g.

    > x <- 1:10
    > sum1 <- reduce(x, `+`)
    > sum2 <- reduce(x, structure(`+`, init = 100))  # == 100 + sum1

    > If I then call:

    > sum3 <- reduce(x, `+`)

    > the 'init' attribute that was set in the sum2 statement will affect
    > sum3 such that sum3 == sum2, not sum3 == sum1 as one would expect.


    > SUGGESTIONS:

    > If this is a bug, then I think it needs to be fixed. If it cannot be
    > fixed, maybe this could be protected against, e.g.

    >> void <- structure(sum, some_attr = TRUE)
    > Error: You must not set attributes on a primitive function: sum

    > Maybe it's sufficient to implement a protection against this in
    > attr()<-, attributes()<-, and class()<-.

    > Comments?

    > /Henrik

Yes, this is a bug -- a version of your code above:

> void <- structure(sum, foo = TRUE)
> identical(void, sum)
[1] TRUE
> sum
function (..., na.rm = FALSE)  .Primitive("sum")
attr(,"foo")
[1] TRUE
> 

Above, you are already looking at ways to deal with it; and that
*is* more delicate, indeed:

One thing we (R core) found previously (a couple of years ago)
 was that the  `structure(..)` function was
already too "slow" for it to be used in some base R functions,
and adding another  if(..) to it will not help making it faster ...

OTOH, structure() being a pure R function (no direct .Internal(), .Call() ..)
is also important I think,  as it keeps its code nicely self documenting.

I'm pretty convinced we should fix it by checking for primitive
functions inside the C code of `attributes<-` :
arguably the bug is really there, rather than in structure().

Patches are welcome (via R's Bugzilla or just here).

Martin


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Mar 20 19:55:05 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 20 Mar 2025 11:55:05 -0700
Subject: [Rd] structure(<primitive function>, ...) is sticky: a bug,
 or should it be an error?
In-Reply-To: <26587.61068.527937.384919@stat.math.ethz.ch>
References: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>
 <26587.61068.527937.384919@stat.math.ethz.ch>
Message-ID: <CAFDcVCSyG1HxUO1ZNUxQ=BGUGgPtoVQBqySnWg_EJyLa_VtzZA@mail.gmail.com>

> I'm pretty convinced we should fix it by checking for primitive
> functions inside the C code of `attributes<-` :
> arguably the bug is really there, rather than in structure().
>
> Patches are welcome (via R's Bugzilla or just here).

Thank you Martin. I'll make sure I create a brief BugZilla report on
this, and hopefully a follow with a patch later on.

One question on urgency or not: Is it too late to get such a change in
for the R 4.5.0 release? I suspect so, because it has a potential of
breaking existing packages. But if there's a possibility of fixing
this in R 4.5.0, I'll make this a top priority.  Please let me know.

/Henrik

On Thu, Mar 20, 2025 at 3:31?AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Henrik Bengtsson
> >>>>>     on Wed, 19 Mar 2025 10:58:46 -0700 writes:
>
>     > Hello.
>     > I just (re-)discovered that structure(sum, init = 100) is "sticky",
>     > i.e. it stays with base::sum(). Here's an minimal example:
>
>     > $ R --vanilla --quiet
>     >> void <- structure(sum, some_attr = TRUE)
>     >> str(sum)
>     > function (..., na.rm = FALSE)
>     > - attr(*, "some_attr")= logi TRUE
>
>     >> From my very basic troubleshooting, it looks like this is happening
>     > for primitive functions. I think I understand that this comes down to
>     > primitive functions cannot be copied and baseenv() being special, i.e.
>     > in structure() there will be no copy made of the primitive function,
>     > and then attributes()<- ends up modifying the original primitive
>     > function. Even if this is a documented feature, I believe, it is a
>     > silent feature with risky side effects. We might already have code out
>     > there that silently produces incorrect results, because of this
>     > behavior. For example, I was about to a custom reduce() function where
>     > I control the initial value via an "init" attribute of the reducer
>     > function, e.g.
>
>     > x <- 1:10
>     > sum1 <- reduce(x, `+`)
>     > sum2 <- reduce(x, structure(`+`, init = 100))  # == 100 + sum1
>
>     > If I then call:
>
>     > sum3 <- reduce(x, `+`)
>
>     > the 'init' attribute that was set in the sum2 statement will affect
>     > sum3 such that sum3 == sum2, not sum3 == sum1 as one would expect.
>
>
>     > SUGGESTIONS:
>
>     > If this is a bug, then I think it needs to be fixed. If it cannot be
>     > fixed, maybe this could be protected against, e.g.
>
>     >> void <- structure(sum, some_attr = TRUE)
>     > Error: You must not set attributes on a primitive function: sum
>
>     > Maybe it's sufficient to implement a protection against this in
>     > attr()<-, attributes()<-, and class()<-.
>
>     > Comments?
>
>     > /Henrik
>
> Yes, this is a bug -- a version of your code above:
>
> > void <- structure(sum, foo = TRUE)
> > identical(void, sum)
> [1] TRUE
> > sum
> function (..., na.rm = FALSE)  .Primitive("sum")
> attr(,"foo")
> [1] TRUE
> >
>
> Above, you are already looking at ways to deal with it; and that
> *is* more delicate, indeed:
>
> One thing we (R core) found previously (a couple of years ago)
>  was that the  `structure(..)` function was
> already too "slow" for it to be used in some base R functions,
> and adding another  if(..) to it will not help making it faster ...
>
> OTOH, structure() being a pure R function (no direct .Internal(), .Call() ..)
> is also important I think,  as it keeps its code nicely self documenting.
>
> I'm pretty convinced we should fix it by checking for primitive
> functions inside the C code of `attributes<-` :
> arguably the bug is really there, rather than in structure().
>
> Patches are welcome (via R's Bugzilla or just here).
>
> Martin


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Mar 21 06:51:10 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 20 Mar 2025 22:51:10 -0700
Subject: [Rd] Suppressed "graphical parameter" warnings reviving themselves
 magically
Message-ID: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>

What's going on here?

$ R --vanilla --quiet
> plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
> NULL
NULL
Warning messages:
1: "foo" is not a graphical parameter
2: "foo" is not a graphical parameter

Note how the warnings are revived in that second "NULL" call.  I can
reproduce this in R 4.4.3 and R-devel (2025-03-19 r88003). This might
be specific to "graphical parameter" warnings, because it won't happen
with, say, suppressWarnings({ log(-1) }).

It also doesn't appear if I call split up the first call into to
different REPL calls;

$ R --vanilla --quiet
> plot.new()
> suppressWarnings({ points(0, 0, foo = TRUE) })
> NULL
NULL

/Henrik

PS. I thought I had sent this many months ago, but I just now found
this message in my draft folder, so now I'm not sure. Sorry, if this
is a duplicate.


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar 21 10:34:12 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 21 Mar 2025 05:34:12 -0400
Subject: [Rd] 
 Suppressed "graphical parameter" warnings reviving themselves
 magically
In-Reply-To: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>
References: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>
Message-ID: <00252fbd-4a7e-4b52-a2c4-135aff4c4127@gmail.com>

I don't know what's going on, but I see a version of it in R 4.4.2 on 
MacOS in the console, but not in R.app.

The difference is I only get one of the warnings, and only on the first 
attempt:

> $ R
> 
> R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
> Copyright (C) 2024 The R Foundation for Statistical Computing
> Platform: aarch64-apple-darwin20
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
> 
>   Natural language support but running in an English locale
> 
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> 
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> 
>> plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
> Warning message:
> "foo" is not a graphical parameter 
>> plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL

In R.app I don't seem to see it at all.

Duncan Murdoch



On 2025-03-21 1:51 a.m., Henrik Bengtsson wrote:
> What's going on here?
> 
> $ R --vanilla --quiet
>> plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
> Warning messages:
> 1: "foo" is not a graphical parameter
> 2: "foo" is not a graphical parameter
> 
> Note how the warnings are revived in that second "NULL" call.  I can
> reproduce this in R 4.4.3 and R-devel (2025-03-19 r88003). This might
> be specific to "graphical parameter" warnings, because it won't happen
> with, say, suppressWarnings({ log(-1) }).
> 
> It also doesn't appear if I call split up the first call into to
> different REPL calls;
> 
> $ R --vanilla --quiet
>> plot.new()
>> suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
> 
> /Henrik
> 
> PS. I thought I had sent this many months ago, but I just now found
> this message in my draft folder, so now I'm not sure. Sorry, if this
> is a duplicate.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Mar 21 11:14:14 2025
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 21 Mar 2025 10:14:14 +0000
Subject: [Rd] 
 Suppressed "graphical parameter" warnings reviving themselves
 magically
In-Reply-To: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>
References: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>
Message-ID: <286b3f3f-2ff3-4c10-b897-2c5e695d9173@sapo.pt>

?s 05:51 de 21/03/2025, Henrik Bengtsson escreveu:
> What's going on here?
> 
> $ R --vanilla --quiet
>> plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
> Warning messages:
> 1: "foo" is not a graphical parameter
> 2: "foo" is not a graphical parameter
> 
> Note how the warnings are revived in that second "NULL" call.  I can
> reproduce this in R 4.4.3 and R-devel (2025-03-19 r88003). This might
> be specific to "graphical parameter" warnings, because it won't happen
> with, say, suppressWarnings({ log(-1) }).
> 
> It also doesn't appear if I call split up the first call into to
> different REPL calls;
> 
> $ R --vanilla --quiet
>> plot.new()
>> suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
> 
> /Henrik
> 
> PS. I thought I had sent this many months ago, but I just now found
> this message in my draft folder, so now I'm not sure. Sorry, if this
> is a duplicate.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
Hello,

I cannot reproduce this on Windows 11, R 4.4.3.
The command below is not exactly the same but I have tried it with the 
command in the OP and got the same result.



$ R --vanilla --quiet -f "rdevel.R" > ./Temp/rdevel.txt
 > plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
 > NULL
NULL
 > sessionInfo()
R version 4.4.3 (2025-02-28 ucrt)
Platform: x86_64-w64-mingw32/x64
Running under: Windows 11 x64 (build 22631)

Matrix products: default


locale:
[1] LC_COLLATE=Portuguese_Portugal.utf8 
LC_CTYPE=Portuguese_Portugal.utf8
[3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C 

[5] LC_TIME=Portuguese_Portugal.utf8

time zone: Europe/Lisbon
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.4.3
 >



Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From k@ro||@@koncev|c|u@ @end|ng |rom gm@||@com  Fri Mar 21 13:26:44 2025
From: k@ro||@@koncev|c|u@ @end|ng |rom gm@||@com (=?utf-8?Q?Karolis_Koncevi=C4=8Dius?=)
Date: Fri, 21 Mar 2025 14:26:44 +0200
Subject: [Rd] table() and as.character() performance for logical values
Message-ID: <B9F8C2E9-0D85-4F79-9259-DC0E5B6F250A@gmail.com>

I was calling table() on some long logical vectors and noticed that it took a long time.

Out of curiosity I checked the performance of table() on different types, and had some unexpected results:

    C <- sample(c("yes", "no"), 10^7, replace = TRUE)
    F <- factor(sample(c("yes", "no"), 10^7, replace = TRUE))
    N <- sample(c(1,0), 10^7, replace = TRUE)
    I <- sample(c(1L,0L), 10^7, replace = TRUE)
    L <- sample(c(TRUE, FALSE), 10^7, replace = TRUE)

                           # ordered by execution time
                           #   user  system elapsed
    system.time(table(F))  #  0.088   0.006   0.093
    system.time(table(C))  #  0.208   0.017   0.224
    system.time(table(I))  #  0.242   0.019   0.261
    system.time(table(L))  #  0.665   0.015   0.680
    system.time(table(N))  #  1.771   0.019   1.791


The performance for Integers and specially booleans is quite surprising.
After investigating the source of table, I ended up on the reason being ?as.character()?:

    system.time(as.character(L))
     user  system elapsed       
    0.461   0.002   0.462       

Even a manual conversion can achieve a speed-up by a factor of ~7:

    system.time(c("FALSE", "TRUE")[L+1])
     user  system elapsed               
    0.061   0.006   0.067               
   

Tested on 4.4.3 as well as devel trunk.

Just reporting for comments and attention.
Karolis K.

From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Mar 21 13:57:39 2025
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 21 Mar 2025 07:57:39 -0500 (CDT)
Subject: [Rd] 
 [External] Suppressed "graphical parameter" warnings reviving
 themselves magically
In-Reply-To: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>
References: <CAFDcVCRKhfoycdjUmEbrO04uhRA87o8SFpUB4fUgEbbprTxcjA@mail.gmail.com>
Message-ID: <7ac9f86d-6883-65ff-2aab-14a4e6c6a4f3@uiowa.edu>

Warnings are not "reviving themselves magically". Try resizing the
window a few times and hitting return in the REPL. That should give
you a hint on what is going on.

Best,

luke

On Fri, 21 Mar 2025, Henrik Bengtsson wrote:

> What's going on here?
>
> $ R --vanilla --quiet
>> plot.new(); suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
> Warning messages:
> 1: "foo" is not a graphical parameter
> 2: "foo" is not a graphical parameter
>
> Note how the warnings are revived in that second "NULL" call.  I can
> reproduce this in R 4.4.3 and R-devel (2025-03-19 r88003). This might
> be specific to "graphical parameter" warnings, because it won't happen
> with, say, suppressWarnings({ log(-1) }).
>
> It also doesn't appear if I call split up the first call into to
> different REPL calls;
>
> $ R --vanilla --quiet
>> plot.new()
>> suppressWarnings({ points(0, 0, foo = TRUE) })
>> NULL
> NULL
>
> /Henrik
>
> PS. I thought I had sent this many months ago, but I just now found
> this message in my draft folder, so now I'm not sure. Sorry, if this
> is a duplicate.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 21 14:49:16 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 21 Mar 2025 14:49:16 +0100
Subject: [Rd] structure(<primitive function>, ...) is sticky: a bug,
 or should it be an error?
In-Reply-To: <CAFDcVCSyG1HxUO1ZNUxQ=BGUGgPtoVQBqySnWg_EJyLa_VtzZA@mail.gmail.com>
References: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>
 <26587.61068.527937.384919@stat.math.ethz.ch>
 <CAFDcVCSyG1HxUO1ZNUxQ=BGUGgPtoVQBqySnWg_EJyLa_VtzZA@mail.gmail.com>
Message-ID: <26589.28252.677695.886493@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Thu, 20 Mar 2025 11:55:05 -0700 writes:

    >> I'm pretty convinced we should fix it by checking for
    >> primitive functions inside the C code of `attributes<-` :
    >> arguably the bug is really there, rather than in
    >> structure().
    >> 
    >> Patches are welcome (via R's Bugzilla or just here).

    > Thank you Martin. I'll make sure I create a brief BugZilla
    > report on this, and hopefully a follow with a patch later
    > on.

    > One question on urgency or not: Is it too late to get such
    > a change in for the R 4.5.0 release? I suspect so, because
    > it has a potential of breaking existing packages. But if
    > there's a possibility of fixing this in R 4.5.0, I'll make
    > this a top priority.  Please let me know.

    > /Henrik

In such cases, I always go to  https://developer.r-project.org/
and look at the release schedule.

Important for this Q seems

* Friday 2025-03-14: GRAND-FEATURE FREEZE (4.5.0 alpha)
* Friday 2025-03-28: FEATURE FREEZE (4.5.0 beta)
* Friday 2025-04-04: CODE FREEZE (4.5.0 RC) 

So, yes there's a possibility  ... but as you mentioned, too,
it depends quite a bit on if the fix is easily affectiong useR
and CRAN/Bioc package space.

Martin

    > On Thu, Mar 20, 2025 at 3:31?AM Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> >>>>> Henrik Bengtsson >>>>> on Wed, 19 Mar 2025 10:58:46
    >> -0700 writes:
    >> 
    >> > Hello.  > I just (re-)discovered that structure(sum,
    >> init = 100) is "sticky", > i.e. it stays with
    >> base::sum(). Here's an minimal example:
    >> 
    >> > $ R --vanilla --quiet >> void <- structure(sum,
    >> some_attr = TRUE) >> str(sum) > function (..., na.rm =
    >> FALSE) > - attr(*, "some_attr")= logi TRUE
    >> 
    >> >> From my very basic troubleshooting, it looks like this
    >> is happening > for primitive functions. I think I
    >> understand that this comes down to > primitive functions
    >> cannot be copied and baseenv() being special, i.e.  > in
    >> structure() there will be no copy made of the primitive
    >> function, > and then attributes()<- ends up modifying the
    >> original primitive > function. Even if this is a
    >> documented feature, I believe, it is a > silent feature
    >> with risky side effects. We might already have code out >
    >> there that silently produces incorrect results, because
    >> of this > behavior. For example, I was about to a custom
    >> reduce() function where > I control the initial value via
    >> an "init" attribute of the reducer > function, e.g.
    >> 
    >> > x <- 1:10 > sum1 <- reduce(x, `+`) > sum2 <- reduce(x,
    >> structure(`+`, init = 100)) # == 100 + sum1
    >> 
    >> > If I then call:
    >> 
    >> > sum3 <- reduce(x, `+`)
    >> 
    >> > the 'init' attribute that was set in the sum2 statement
    >> will affect > sum3 such that sum3 == sum2, not sum3 ==
    >> sum1 as one would expect.
    >> 
    >> 
    >> > SUGGESTIONS:
    >> 
    >> > If this is a bug, then I think it needs to be fixed. If
    >> it cannot be > fixed, maybe this could be protected
    >> against, e.g.
    >> 
    >> >> void <- structure(sum, some_attr = TRUE) > Error: You
    >> must not set attributes on a primitive function: sum
    >> 
    >> > Maybe it's sufficient to implement a protection against
    >> this in > attr()<-, attributes()<-, and class()<-.
    >> 
    >> > Comments?
    >> 
    >> > /Henrik
    >> 
    >> Yes, this is a bug -- a version of your code above:
    >> 
    >> > void <- structure(sum, foo = TRUE) > identical(void,
    >> sum) [1] TRUE > sum function (..., na.rm = FALSE)
    >> .Primitive("sum") attr(,"foo") [1] TRUE
    >> >
    >> 
    >> Above, you are already looking at ways to deal with it;
    >> and that *is* more delicate, indeed:
    >> 
    >> One thing we (R core) found previously (a couple of years
    >> ago) was that the `structure(..)` function was already
    >> too "slow" for it to be used in some base R functions,
    >> and adding another if(..) to it will not help making it
    >> faster ...
    >> 
    >> OTOH, structure() being a pure R function (no direct
    >> .Internal(), .Call() ..)  is also important I think, as
    >> it keeps its code nicely self documenting.
    >> 
    >> I'm pretty convinced we should fix it by checking for
    >> primitive functions inside the C code of `attributes<-` :
    >> arguably the bug is really there, rather than in
    >> structure().
    >> 
    >> Patches are welcome (via R's Bugzilla or just here).
    >> 
    >> Martin


From AHL27 @end|ng |rom p|tt@edu  Fri Mar 21 15:42:21 2025
From: AHL27 @end|ng |rom p|tt@edu (Aidan Lakshman)
Date: Fri, 21 Mar 2025 10:42:21 -0400
Subject: [Rd] table() and as.character() performance for logical values
In-Reply-To: <B9F8C2E9-0D85-4F79-9259-DC0E5B6F250A@gmail.com>
References: <B9F8C2E9-0D85-4F79-9259-DC0E5B6F250A@gmail.com>
Message-ID: <2412F28E-095C-439D-8FC5-1DF864AA67C3@pitt.edu>

Some small points to add on this discussion:

> After investigating the source of table, I ended up on the reason being ?as.character()?:

This is specifically happening within the conversion of the input to type factor, which is where the as.character conversion happens.

  # Timing is all on my local machine (OSX)
  N_v <- sample(c(1,0), 10^7, replace = TRUE)
  L_v <- sample(c(TRUE, FALSE), 10^7, replace = TRUE)
                                         #  user  system elapsed
  system.time(table(N_v))                # 2.155   0.039   2.192
  system.time(table(L_v))                # 0.806   0.030   0.838

  system.time(N_fv <- as.factor(N_v))    # 2.026   0.024   2.050
  system.time(L_fv <- as.factor(L_v))    # 0.668   0.015   0.683

  system.time(table(N_fv))               # 0.133   0.022   0.156
  system.time(table(L_fv))               # 0.134   0.018   0.151

> The performance for Integers and specially booleans is quite surprising.

Of note is that the performance is significantly better if using `tabulate`, since this doesn't involve a conversion to factor (though input must be numeric/factor, results aren't named, and it has worse handling of NA values). If you have performance critical calls like this you could consider using `tabulate` instead.

  system.time(tabulate(N_v))             # 0.054   0.002   0.056
  system.time(tabulate(as.integer(L_v))) # 0.052   0.002   0.055


I don't know if this is a known issue or not; most of my colleagues are aware of the slow-down and use `tabulate` when performance is required. My understanding was that the slower performance is a trade-off for more consistent performance (better output, better handling of ambiguities/NA, etc.), and that speed isn't the highest priority with `table`. Maybe someone else has a better understanding of the history of the function.

As for improving the speed, it would basically come down to refactoring `table` to not use a `factor` conversion. I'd be concerned about introducing a lot of edge cases with that, but it's theoretically possible. Based on 30 seconds of thinking, it may be possible to do something like:

## just a sketch of a barebones non-factor implementation
  test_tab <- function(x){
    lookup <- unique(x)
    counts <- tabulate(match(x, lookup))
    names(counts) <- as.character(lookup)
    counts
  }

  system.time(test_tab(L_v))  # 0.101   0.006   0.107
  system.time(test_tab(N_v))  # 0.129   0.015   0.144

This is also faster in the case where there are lots of categories with few entries per category:

  N_v2 <- 1:1e7
  system.time(test_tab(N_v2)) # 0.383   0.024   0.411
  system.time(table(N_v2))    # 6.122   0.228   6.398

Obviously there are some big shortcomings:
- it's missing a lot of error checking etc. that the standard `table` has
- it only works with 1D vectors
- NA handling isn't quite the same as `table` (though it would be easy to adapt)

Just including to potentially start discussion for optimization.

For reference, the relevant section is in src/library/base/R/table.R:L75-85

-Aidan

-----------------------
Aidan Lakshman (he/him)
http://www.ahl27.com/

On 21 Mar 2025, at 8:26, Karolis Koncevi?ius wrote:

> [You don't often get email from karolis.koncevicius at gmail.com. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>
> I was calling table() on some long logical vectors and noticed that it took a long time.
>
> Out of curiosity I checked the performance of table() on different types, and had some unexpected results:
>
>     C <- sample(c("yes", "no"), 10^7, replace = TRUE)
>     F <- factor(sample(c("yes", "no"), 10^7, replace = TRUE))
>     N <- sample(c(1,0), 10^7, replace = TRUE)
>     I <- sample(c(1L,0L), 10^7, replace = TRUE)
>     L <- sample(c(TRUE, FALSE), 10^7, replace = TRUE)
>
>                            # ordered by execution time
>                            #   user  system elapsed
>     system.time(table(F))  #  0.088   0.006   0.093
>     system.time(table(C))  #  0.208   0.017   0.224
>     system.time(table(I))  #  0.242   0.019   0.261
>     system.time(table(L))  #  0.665   0.015   0.680
>     system.time(table(N))  #  1.771   0.019   1.791
>
>
> The performance for Integers and specially booleans is quite surprising.
> After investigating the source of table, I ended up on the reason being ?as.character()?:
>
>     system.time(as.character(L))
>      user  system elapsed
>     0.461   0.002   0.462
>
> Even a manual conversion can achieve a speed-up by a factor of ~7:
>
>     system.time(c("FALSE", "TRUE")[L+1])
>      user  system elapsed
>     0.061   0.006   0.067
>
>
> Tested on 4.4.3 as well as devel trunk.
>
> Just reporting for comments and attention.
> Karolis K.
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 21 16:55:44 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 21 Mar 2025 16:55:44 +0100
Subject: [Rd] structure(<primitive function>, ...) is sticky: a bug,
 or should it be an error?
In-Reply-To: <26589.28252.677695.886493@stat.math.ethz.ch>
References: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>
 <26587.61068.527937.384919@stat.math.ethz.ch>
 <CAFDcVCSyG1HxUO1ZNUxQ=BGUGgPtoVQBqySnWg_EJyLa_VtzZA@mail.gmail.com>
 <26589.28252.677695.886493@stat.math.ethz.ch>
Message-ID: <26589.35840.771000.991255@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 21 Mar 2025 14:49:16 +0100 writes:

>>>>> Henrik Bengtsson 
>>>>>     on Thu, 20 Mar 2025 11:55:05 -0700 writes:

    >>> I'm pretty convinced we should fix it by checking for
    >>> primitive functions inside the C code of `attributes<-` :
    >>> arguably the bug is really there, rather than in
    >>> structure().
    >>> 
    >>> Patches are welcome (via R's Bugzilla or just here).

    >> Thank you Martin. I'll make sure I create a brief BugZilla
    >> report on this, and hopefully a follow with a patch later
    >> on.

    >> One question on urgency or not: Is it too late to get such
    >> a change in for the R 4.5.0 release? I suspect so, because
    >> it has a potential of breaking existing packages. But if
    >> there's a possibility of fixing this in R 4.5.0, I'll make
    >> this a top priority.  Please let me know.

    >> /Henrik

    > In such cases, I always go to  https://developer.r-project.org/
    > and look at the release schedule.

    > Important for this Q seems

    > * Friday 2025-03-14: GRAND-FEATURE FREEZE (4.5.0 alpha)
    > * Friday 2025-03-28: FEATURE FREEZE (4.5.0 beta)
    > * Friday 2025-04-04: CODE FREEZE (4.5.0 RC) 

    > So, yes there's a possibility  ... but as you mentioned, too,
    > it depends quite a bit on if the fix is easily affectiong useR
    > and CRAN/Bioc package space.

    > Martin

As a matter of fact, I'm testing already a simple patch I wrote
myself.
So, sorry, but I must renounce the above  "Patches are welcome".

Martin


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Mar 21 18:07:52 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 21 Mar 2025 10:07:52 -0700
Subject: [Rd] structure(<primitive function>, ...) is sticky: a bug,
 or should it be an error?
In-Reply-To: <26589.35840.771000.991255@stat.math.ethz.ch>
References: <CAFDcVCTka7-qHEHZ6U42ynSVffpEgZwboqJBOuDMCAMEtyNaFQ@mail.gmail.com>
 <26587.61068.527937.384919@stat.math.ethz.ch>
 <CAFDcVCSyG1HxUO1ZNUxQ=BGUGgPtoVQBqySnWg_EJyLa_VtzZA@mail.gmail.com>
 <26589.28252.677695.886493@stat.math.ethz.ch>
 <26589.35840.771000.991255@stat.math.ethz.ch>
Message-ID: <CAFDcVCR14Tqoz4eKR5pFZLSTpoDxv2jE9fs3B0w4ZO6=CdmrXw@mail.gmail.com>

On Fri, Mar 21, 2025 at 8:55?AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Martin Maechler
> >>>>>     on Fri, 21 Mar 2025 14:49:16 +0100 writes:
>
> >>>>> Henrik Bengtsson
> >>>>>     on Thu, 20 Mar 2025 11:55:05 -0700 writes:
>
>     >>> I'm pretty convinced we should fix it by checking for
>     >>> primitive functions inside the C code of `attributes<-` :
>     >>> arguably the bug is really there, rather than in
>     >>> structure().
>     >>>
>     >>> Patches are welcome (via R's Bugzilla or just here).
>
>     >> Thank you Martin. I'll make sure I create a brief BugZilla
>     >> report on this, and hopefully a follow with a patch later
>     >> on.
>
>     >> One question on urgency or not: Is it too late to get such
>     >> a change in for the R 4.5.0 release? I suspect so, because
>     >> it has a potential of breaking existing packages. But if
>     >> there's a possibility of fixing this in R 4.5.0, I'll make
>     >> this a top priority.  Please let me know.
>
>     >> /Henrik
>
>     > In such cases, I always go to  https://developer.r-project.org/
>     > and look at the release schedule.
>
>     > Important for this Q seems
>
>     > * Friday 2025-03-14: GRAND-FEATURE FREEZE (4.5.0 alpha)
>     > * Friday 2025-03-28: FEATURE FREEZE (4.5.0 beta)
>     > * Friday 2025-04-04: CODE FREEZE (4.5.0 RC)
>
>     > So, yes there's a possibility  ... but as you mentioned, too,
>     > it depends quite a bit on if the fix is easily affectiong useR
>     > and CRAN/Bioc package space.
>
>     > Martin
>
> As a matter of fact, I'm testing already a simple patch I wrote
> myself.
> So, sorry, but I must renounce the above  "Patches are welcome".

Excellent and even better (for me). Thank you Martin!

/Henrik

>
> Martin


From j@g@nmn2 @end|ng |rom gm@||@com  Fri Mar 21 20:46:54 2025
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Fri, 21 Mar 2025 15:46:54 -0400
Subject: [Rd] Problems with ::
In-Reply-To: <mailman.54763.3.1742468402.5825.r-devel@r-project.org>
References: <mailman.54763.3.1742468402.5825.r-devel@r-project.org>
Message-ID: <23f2cb10-3581-49be-9f2a-3ef9b1a5ef78@gmail.com>

I've wanted to use specials to detect random effect terms as in ~(f | g), but
non-syntactic function names (in this case, '|') are currently not supported.
I proposed a patch some time ago:

     https://bugs.r-project.org/show_bug.cgi?id=18568

I wonder if some of these issues with '::' could be solved backwards compatibly
with a patch along similar lines, i.e., not requiring specials to be syntactic
names, and avoiding doing string comparison with deparse(<language>).  One idea:

* At R level, allow something like

       specials=structure(c("cluster", "cluster"), package = c("", "survival"))

   to separately mark as special calls cluster() and survival::cluster() in the
   model formula.

* At C level, test for calls whose first component is a symbol (like 'cluster')
   or a call to '::' whose two arguments are symbols (like 'survival::cluster'),
   matching these against the 'specials', respecting attr(specials, "package")
   if that is a character vector of length equal to length(specials).

where I recommend using attribute 'package' rather than 'names' because:

* It's not hard to imagine that code "out there" is using
   specials=<named character>, and we should not change the behaviour of that
   code.

* Package 'methods' defines formal class 'ObjectsWithPackage' with the same
   layout as well as utilities 'PackageSlot', 'PackageSlot<-', ...

Well, that's just just one idea ...  I understand reluctance to make non-trivial
changes to model.c, but maybe there is a basis here, if people are more and more
(for better or worse (mostly worse)) trying to use '::' everywhere including in
model formulas.

Mikael

> Date: Wed, 19 Mar 2025 16:49:31 +0000
> From: "Therneau, Terry M., Ph.D."<therneau at mayo.edu>
> 
> In response to the tidyverse habit of adding another zillion functions to one's search space, the use of things like survival::coxph is becoming more common.  But this practice breaks the use of the specials argument in terms.formula, something that I make heavy use of in the survival package.   The following two pairs of models give different answers, and the second is wrong.
> 
> fit1a <- lm(GNP ~  Year + offset(Unemployed), longley)
> fit1b<- lm(GNP ~  Year + stats::offset(Unemployed), longley)
> 
> fit1a <- survdiff(Surv(time, status) ~ rx + cluster(litter), rats)
> fit1b <- survdiff(Surv(time, status) ~ rx + survival::cluster(litter), rats)
> zed <- survival::cluster(rats$litter)
> fit1c <- survdiff(Surv(time, status) ~ rx + zed, rats)
> 
> In the most recent CRAN version of survival I added some pre-processing steps that successfully catch fit1b, by stripping off  "survival::" from formulas before calling terms.formula.   But I can't prevent fit1c, and don't yet know if there are other case not covered by my current hack.  At least one of the CRAN packages that depends on survival has an example of exactly fit1c in their test suite.
> 
> The survival package uses the special argument a lot: strata, cluster, pspline, tt, frailty, and ridge.  I'm trying to think of a good plan for long term changes.   I list 3 below, and am hoping for better ideas or input.
> 
> a. Caveat emptor:  If you work hard to fool the specials argument, and succeed, then "Congratulations, you fooled the parser."
> 
> b. What I did early on with tt(), which is to make the function defition completely internal to coxph (the only survival function that uses tt).   People who type survival::tt or  survival:::tt get an error message.   A plus of this is that the error message will  wean users from pasting survival:: to everything inside a formula.   The disadvantages are first that it will break existing user code (most of which should be broken -- its not doing what they think), a second is that there may be use cases for strata, say, outside of a survival formula; it is essentially factor with shorter default labels.
> 
> c. Make all of these functions have a class, and rewrite the code to depend on the class rather than specials.  The Surv function is recognized in this way, so is not harmed by survival::Surv.  It is also why calling Surv to create a new variable is fine.  I'd still retain specials,  to support legacy code.
> 
> The more ornery part of me votes for b (what is the effect on help files)?    In any case a change won't happen overnight.
> Do we leave offset in the caveat emptor group?
> A small section needs to be added to the "user written packages" document, where it talks about specials.
> What other packages use specials?
> 
> Terry T.


From @eb@meyer @end|ng |rom |@u@de  Mon Mar 24 12:49:40 2025
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Mon, 24 Mar 2025 12:49:40 +0100
Subject: [Rd] table() and as.character() performance for logical values
In-Reply-To: <2412F28E-095C-439D-8FC5-1DF864AA67C3@pitt.edu>
References: <B9F8C2E9-0D85-4F79-9259-DC0E5B6F250A@gmail.com>
 <2412F28E-095C-439D-8FC5-1DF864AA67C3@pitt.edu>
Message-ID: <b9b7ace1-8bda-484a-8277-2db3fc4bd699@fau.de>

Am 21.03.25 um 15:42 schrieb Aidan Lakshman via R-devel:
>> After investigating the source of table, I ended up on the reason being ?as.character()?:
> 
> This is specifically happening within the conversion of the input to type factor, which is where the as.character conversion happens.

Yes, I also think 'factor' could do a bit better for unclassed integers 
(such as when called from 'cut') as well as for logical input (such as 
from 'summary' -> 'table').

Note that 'as.factor' already has a "fast track" for plain integers 
(originally for 'split.default' from 'tapply'), so can be used instead 
of 'factor' when there is no need for custom 'levels', 'labels', or 
'exclude'. (Thanks for already mentioning 'tabulate'.)

A 'factor' patch would apply more broadly, e.g.:

===================================================================
--- src/library/base/R/factor.R	(Revision 88042)
+++ src/library/base/R/factor.R	(Arbeitskopie)
@@ -20,14 +20,18 @@
                     exclude = NA, ordered = is.ordered(x), nmax = NA)
  {
      if(is.null(x)) x <- character()
+    directmatch <- !is.object(x) &&
+        (is.character(x) || is.integer(x) || is.logical(x))
      nx <- names(x)
      if (missing(levels)) {
  	y <- unique(x, nmax = nmax)
  	ind <- order(y)
-	levels <- unique(as.character(y)[ind])
+        if (!directmatch)
+            y <- as.character(y)
+	levels <- unique(y[ind])
      }
      force(ordered) # check if original x is an ordered factor
-    if(!is.character(x))
+    if(!directmatch)
  	x <- as.character(x)
      ## levels could be a long vector, but match will not handle that.
      levels <- levels[is.na(match(levels, exclude))]
      f <- match(x, levels)
===================================================================

This skips as.character() also for integer/logical 'x' and would indeed 
bring table() runtimes "in order":

     set.seed(1)
     C <- sample(c("no", "yes"), 10^7, replace = TRUE)
     F <- as.factor(C)
     L <- F == "yes"
     I <- as.integer(L)
     N <- as.numeric(I)

     ## Median system.time(table(.)) in ms:
     ## table(F)   256
     ## table(I)   384   # not  696
     ## table(L)   409   # not 1159
     ## table(C)   591
     ## table(N)  3324

The (seemingly) small patch passes check-all, but maybe it overlooks 
some edge cases. I'd test it on a subset of CRAN/BIOC packages.

Best,

	Sebastian Meyer

> 
>    # Timing is all on my local machine (OSX)
>    N_v <- sample(c(1,0), 10^7, replace = TRUE)
>    L_v <- sample(c(TRUE, FALSE), 10^7, replace = TRUE)
>                                           #  user  system elapsed
>    system.time(table(N_v))                # 2.155   0.039   2.192
>    system.time(table(L_v))                # 0.806   0.030   0.838
> 
>    system.time(N_fv <- as.factor(N_v))    # 2.026   0.024   2.050
>    system.time(L_fv <- as.factor(L_v))    # 0.668   0.015   0.683
> 
>    system.time(table(N_fv))               # 0.133   0.022   0.156
>    system.time(table(L_fv))               # 0.134   0.018   0.151
> 
>> The performance for Integers and specially booleans is quite surprising.
> 
> Of note is that the performance is significantly better if using `tabulate`, since this doesn't involve a conversion to factor (though input must be numeric/factor, results aren't named, and it has worse handling of NA values). If you have performance critical calls like this you could consider using `tabulate` instead.
> 
>    system.time(tabulate(N_v))             # 0.054   0.002   0.056
>    system.time(tabulate(as.integer(L_v))) # 0.052   0.002   0.055
> 
> 
> I don't know if this is a known issue or not; most of my colleagues are aware of the slow-down and use `tabulate` when performance is required. My understanding was that the slower performance is a trade-off for more consistent performance (better output, better handling of ambiguities/NA, etc.), and that speed isn't the highest priority with `table`. Maybe someone else has a better understanding of the history of the function.
> 
> As for improving the speed, it would basically come down to refactoring `table` to not use a `factor` conversion. I'd be concerned about introducing a lot of edge cases with that, but it's theoretically possible. Based on 30 seconds of thinking, it may be possible to do something like:
> 
> ## just a sketch of a barebones non-factor implementation
>    test_tab <- function(x){
>      lookup <- unique(x)
>      counts <- tabulate(match(x, lookup))
>      names(counts) <- as.character(lookup)
>      counts
>    }
> 
>    system.time(test_tab(L_v))  # 0.101   0.006   0.107
>    system.time(test_tab(N_v))  # 0.129   0.015   0.144
> 
> This is also faster in the case where there are lots of categories with few entries per category:
> 
>    N_v2 <- 1:1e7
>    system.time(test_tab(N_v2)) # 0.383   0.024   0.411
>    system.time(table(N_v2))    # 6.122   0.228   6.398
> 
> Obviously there are some big shortcomings:
> - it's missing a lot of error checking etc. that the standard `table` has
> - it only works with 1D vectors
> - NA handling isn't quite the same as `table` (though it would be easy to adapt)
> 
> Just including to potentially start discussion for optimization.
> 
> For reference, the relevant section is in src/library/base/R/table.R:L75-85
> 
> -Aidan
> 
> -----------------------
> Aidan Lakshman (he/him)
> http://www.ahl27.com/
> 
> On 21 Mar 2025, at 8:26, Karolis Koncevi?ius wrote:
> 
>> [You don't often get email from karolis.koncevicius at gmail.com. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>>
>> I was calling table() on some long logical vectors and noticed that it took a long time.
>>
>> Out of curiosity I checked the performance of table() on different types, and had some unexpected results:
>>
>>      C <- sample(c("yes", "no"), 10^7, replace = TRUE)
>>      F <- factor(sample(c("yes", "no"), 10^7, replace = TRUE))
>>      N <- sample(c(1,0), 10^7, replace = TRUE)
>>      I <- sample(c(1L,0L), 10^7, replace = TRUE)
>>      L <- sample(c(TRUE, FALSE), 10^7, replace = TRUE)
>>
>>                             # ordered by execution time
>>                             #   user  system elapsed
>>      system.time(table(F))  #  0.088   0.006   0.093
>>      system.time(table(C))  #  0.208   0.017   0.224
>>      system.time(table(I))  #  0.242   0.019   0.261
>>      system.time(table(L))  #  0.665   0.015   0.680
>>      system.time(table(N))  #  1.771   0.019   1.791
>>
>>
>> The performance for Integers and specially booleans is quite surprising.
>> After investigating the source of table, I ended up on the reason being ?as.character()?:
>>
>>      system.time(as.character(L))
>>       user  system elapsed
>>      0.461   0.002   0.462
>>
>> Even a manual conversion can achieve a speed-up by a factor of ~7:
>>
>>      system.time(c("FALSE", "TRUE")[L+1])
>>       user  system elapsed
>>      0.061   0.006   0.067
>>
>>
>> Tested on 4.4.3 as well as devel trunk.
>>
>> Just reporting for comments and attention.
>> Karolis K.
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Mon Mar 24 18:18:18 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 24 Mar 2025 13:18:18 -0400
Subject: [Rd] request for discussion on lonely doc patch suggestion
Message-ID: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>

   Aki Vehtari and I suggested a revision to some of the man pages 
involving NA/is.nan/is.na about a year ago, but it never seems to have 
gotten any traction.

https://bugs.r-project.org/show_bug.cgi?id=18691

Discussion here:

https://fediscience.org/@avehtari at bayes.club/112043521852737720

   The patch file is attached (also available at bugzilla, if it doesn't 
get through to the list). I find the patch format a little hard to read, 
so I'm reproducing just the *new* text below.

   Any ideas or suggestions would be welcome.

   cheers
    Ben Bolker


----
src/library/base/man/NA.Rd:

  The generic function \code{is.na} indicates which elements are missing
   (\code{NA}) or \sQuote{Not a Number} (\code{link{NaN}}).

in examples from this page:

is.na(c(1, NA, NA_real_, NaN))        #> FALSE  TRUE  TRUE  TRUE
is.na(paste(c(1, NA, NA_real_, NaN))) #> FALSE FALSE FALSE FALSE

# When NaN should not be considered as missing value
is.na(c(1, NA, NA_real_, NaN)) & !is.nan(c(1, NA, NA_real_, NaN))

   (POSSIBLE EDITS: more explanatory comments, especially explaining 
that paste() is converting NA values to "NA" strings ...)

---
 From src/library/base/man/is.finite.Rd:

whereas \code{NaN} means \sQuote{Not a Number}.  \code{Inf} and
   \code{NaN} are class of \code{numeric} and type of \code{double},
   and can be used in real and imaginary parts of complex values, but not
   as values in integer vectors.

  (POSSIBLE EDITS: "class of", "type of" -> "of class"/"of type" or 
"have class"/"have type" ?)

   in "See Also":

\code{\link{NA}}, \sQuote{\emph{Not Available}}, which is usually used
   to denote a missing value. The default mode of \code{NA} is
   \code{logical}, unlike \code{NaN}, which is always of mode
   \code{double}.

---
 From src/library/base/man/numeric.Rd

\code{is.numeric} is a more general test of an object being
   interpretable as numbers. These include special numeric objects
   \code{\link{Inf}}, \code{\link{NaN}}, \code{\link{NA_integer_}},
   and \code{\link{NA_real_}}.

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: nan.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20250324/f5c9606b/attachment.txt>

From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar 24 20:21:42 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 24 Mar 2025 15:21:42 -0400
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>
References: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>
Message-ID: <5ca819d3-1c9d-4264-a832-67b8a28b4608@gmail.com>

I sent some comments directly to Ben.  I just want to reply publicly to 
this part:

On 2025-03-24 1:18 p.m., Ben Bolker wrote:

>     The patch file is attached (also available at bugzilla, if it doesn't
> get through to the list). I find the patch format a little hard to read,
> so I'm reproducing just the *new* text below.

I agree absolutely about the lack of readability of patch files.  A side 
by side display is much nicer.  If anyone out there isn't using one, you 
should.

I really like the one I use ("Beyond Compare"), but it's not open 
source.  I've been using it for a very long time (20 years or more, I 
think), and I suspect there are very good open source competitors out 
there now (and may have been for all the time I've been using BC). 
Suggestions?

Duncan Murdoch


From pro|jcn@@h @end|ng |rom gm@||@com  Mon Mar 24 20:28:50 2025
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Mon, 24 Mar 2025 15:28:50 -0400
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <5ca819d3-1c9d-4264-a832-67b8a28b4608@gmail.com>
References: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>
 <5ca819d3-1c9d-4264-a832-67b8a28b4608@gmail.com>
Message-ID: <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>

For Linux users, meld is quite nice for side by side editing, though I've never tried using it for
display. Just checking now suggests it isn't obvious how to "print" side by side display.

I've made meld easier for my own use by creating an icon in Double Commander (DC allows
the user to create iconized links to scripts and programs). There are two panes in the DC
file manager. I highlight one file in each then click. This saves typing two full paths in
a command

    meld  path/to/file1 path/to/file2

I suspect the highlight and click makes my use of meld reasonably attractive. I'm not sure
I'd use it in the raw command line mode.

Like Duncan, I welcome suggestions for similar tools, especially if there's a display option.

John Nash

On 2025-03-24 15:21, Duncan Murdoch wrote:
> I sent some comments directly to Ben.? I just want to reply publicly to this part:
> 
> On 2025-03-24 1:18 p.m., Ben Bolker wrote:
> 
>> ??? The patch file is attached (also available at bugzilla, if it doesn't
>> get through to the list). I find the patch format a little hard to read,
>> so I'm reproducing just the *new* text below.
> 
> I agree absolutely about the lack of readability of patch files.? A side by side display is much nicer.? If anyone out 
> there isn't using one, you should.
> 
> I really like the one I use ("Beyond Compare"), but it's not open source.? I've been using it for a very long time (20 
> years or more, I think), and I suspect there are very good open source competitors out there now (and may have been for 
> all the time I've been using BC). Suggestions?
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Mon Mar 24 21:05:36 2025
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Mon, 24 Mar 2025 20:05:36 +0000
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
References: <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
Message-ID: <77E13D24-F617-4990-9F86-0C6EC8B6ECB5@hiddenelephants.co.uk>

FWIW, on the command line I?m a happy 'delta' user for a quick side by side comparison (https://github.com/dandavison/delta)

>  On 24 Mar 2025, at 19:32, J C Nash <profjcnash at gmail.com> wrote:
> 
> ?For Linux users, meld is quite nice for side by side editing, though I've never tried using it for
> display. Just checking now suggests it isn't obvious how to "print" side by side display.
> 
> I've made meld easier for my own use by creating an icon in Double Commander (DC allows
> the user to create iconized links to scripts and programs). There are two panes in the DC
> file manager. I highlight one file in each then click. This saves typing two full paths in
> a command
> 
>   meld  path/to/file1 path/to/file2
> 
> I suspect the highlight and click makes my use of meld reasonably attractive. I'm not sure
> I'd use it in the raw command line mode.
> 
> Like Duncan, I welcome suggestions for similar tools, especially if there's a display option.
> 
> John Nash
> 
>> On 2025-03-24 15:21, Duncan Murdoch wrote:
>> I sent some comments directly to Ben.  I just want to reply publicly to this part:
>>> On 2025-03-24 1:18 p.m., Ben Bolker wrote:
>>>     The patch file is attached (also available at bugzilla, if it doesn't
>>> get through to the list). I find the patch format a little hard to read,
>>> so I'm reproducing just the *new* text below.
>> I agree absolutely about the lack of readability of patch files.  A side by side display is much nicer.  If anyone out there isn't using one, you should.
>> I really like the one I use ("Beyond Compare"), but it's not open source.  I've been using it for a very long time (20 years or more, I think), and I suspect there are very good open source competitors out there now (and may have been for all the time I've been using BC). Suggestions?
>> Duncan Murdoch
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar 24 21:35:04 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 24 Mar 2025 16:35:04 -0400
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <77E13D24-F617-4990-9F86-0C6EC8B6ECB5@hiddenelephants.co.uk>
References: <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
 <77E13D24-F617-4990-9F86-0C6EC8B6ECB5@hiddenelephants.co.uk>
Message-ID: <918cbadf-9fae-467f-98f3-a0295e9e9931@gmail.com>

Thanks for the suggestion.  I did a quick scan of the delta manual, but 
couldn't spot anything on integration with svn, just git.  Have you 
worked out the necessary config options for svn so that it would work 
with diffs like Ben's, or for running `svn diff` on some local changes?

Currently I don't use svn for anything but the R sources, but I suspect 
that will continue for some time...

Duncan Murdoch



On 2025-03-24 4:05 p.m., Tim Taylor wrote:
> FWIW, on the command line I?m a happy 'delta' user for a quick side by 
> side comparison (https://github.com/dandavison/delta 
> <https://github.com/dandavison/delta>)
> 
>> ?On 24 Mar 2025, at 19:32, J C Nash <profjcnash at gmail.com> wrote:
>>
>> ?For Linux users, meld is quite nice for side by side editing, though 
>> I've never tried using it for
>> display. Just checking now suggests it isn't obvious how to "print" 
>> side by side display.
>>
>> I've made meld easier for my own use by creating an icon in Double 
>> Commander (DC allows
>> the user to create iconized links to scripts and programs). There are 
>> two panes in the DC
>> file manager. I highlight one file in each then click. This saves 
>> typing two full paths in
>> a command
>>
>> ??meld ?path/to/file1 path/to/file2
>>
>> I suspect the highlight and click makes my use of meld reasonably 
>> attractive. I'm not sure
>> I'd use it in the raw command line mode.
>>
>> Like Duncan, I welcome suggestions for similar tools, especially if 
>> there's a display option.
>>
>> John Nash
>>
>> On 2025-03-24 15:21, Duncan Murdoch wrote:
>>> I sent some comments directly to Ben.? I just want to reply publicly 
>>> to this part:
>>> On 2025-03-24 1:18 p.m., Ben Bolker wrote:
>>>> ??? The patch file is attached (also available at bugzilla, if it 
>>>> doesn't
>>>> get through to the list). I find the patch format a little hard to read,
>>>> so I'm reproducing just the *new* text below.
>>> I agree absolutely about the lack of readability of patch files.? A 
>>> side by side display is much nicer.? If anyone out there isn't using 
>>> one, you should.
>>> I really like the one I use ("Beyond Compare"), but it's not open 
>>> source.? I've been using it for a very long time (20 years or more, I 
>>> think), and I suspect there are very good open source competitors out 
>>> there now (and may have been for all the time I've been using BC). 
>>> Suggestions?
>>> Duncan Murdoch
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Tue Mar 25 07:12:26 2025
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 24 Mar 2025 23:12:26 -0700
Subject: [Rd] Why does NextMethod() pick up duplicate arguments in '...' if
 given positionally at top level?
Message-ID: <CAPRVBcww0W_UzV6V5kvgJCGPLuNWg_=g2KiM-j73m3J2cNsSNQ@mail.gmail.com>

Consider:

foo <- function(x, y, ...) {
    UseMethod("foo")
}

foo.default <- function(x, y = 0, ...) {
    cat(sprintf("%s: x=%s, y=%s\n", as.character(match.call()[[1L]]), x, y))
    if (...length()) str(list(...))
}

foo.C <- function(x, y = 3, ...) {
    cat(sprintf("%s: x=%s, y=%s\n", as.character(match.call()[[1L]]), x, y))
    if (...length()) str(list(...))
    NextMethod("foo", x = x, y = y)
}

c <- structure(class = "C", 1)

# 'x' winds up in ..1
foo(c)
# foo.C: x=1, y=3
# foo.default: x=1, y=3
# List of 1
#  $ : 'C' num 1

# empty ...!
foo(x=c)
# foo.C: x=1, y=3
# foo.default: x=1, y=3

# now both x is ..1, y is ..2
foo(c, 4)
# foo.C: x=1, y=4
# foo.default: x=1, y=4
# List of 2
#  $ : 'C' num 1
#  $ : num 4

# perhaps predictably, ...length()==0
foo(x=c, y=4)
# foo.C: x=1, y=4
# foo.default: x=1, y=4

I've tried re-reading ?NextMethod a few times as well as R-lang [1] &
can't make heads or tails of this. I've also come across related 2012
(!) thread [2] and tangentially-related bug [3].

Is this intended behavior? If so, might I reiterate Henrik's long-ago
request for better documentation of how to work around this?

For some added context, where I actually encountered this, my S3
method is mainly written to overwrite the defaults of a parent class's
method.

Mike C

[1] https://cran.r-project.org/doc/manuals/r-devel/R-lang.html#NextMethod
[2] https://stat.ethz.ch/pipermail/r-devel/2012-October/065016.html
[3] https://bugs.r-project.org/show_bug.cgi?id=15654


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Mar 25 11:30:32 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 25 Mar 2025 06:30:32 -0400
Subject: [Rd] 
 Why does NextMethod() pick up duplicate arguments in '...' if
 given positionally at top level?
In-Reply-To: <CAPRVBcww0W_UzV6V5kvgJCGPLuNWg_=g2KiM-j73m3J2cNsSNQ@mail.gmail.com>
References: <CAPRVBcww0W_UzV6V5kvgJCGPLuNWg_=g2KiM-j73m3J2cNsSNQ@mail.gmail.com>
Message-ID: <d3d29ec2-69d7-4253-94b9-cfef9cb0f26b@gmail.com>

I don't think there's any valid reason for this behaviour, i.e. it's a 
bug.  For those who haven't read closely, the bug is that in the 
`foo(c)` call, within foo.default() the value of `c` is bound to both
x and to the first element of ... .

The 2012 thread you link to started with a slightly different setup and 
arguments were made by Simon that the behaviour is documented, but the 
final message in the thread is about the same bug as here.

I think the bug report 15654 is about the first setup, not the current one.

So what I'd suggest you do is report this example in a new bug report, 
and if you have the energy (seems nobody else does!), track down where 
the duplication happens, and include a patch to fix it.

If you do attempt that, you'll probably learn enough about NextMethod to 
decide whether to follow the suggestion in 15654, and could maybe submit 
a patch for that, too.

Duncan Murdoch


On 2025-03-25 2:12 a.m., Michael Chirico wrote:
> Consider:
> 
> foo <- function(x, y, ...) {
>      UseMethod("foo")
> }
> 
> foo.default <- function(x, y = 0, ...) {
>      cat(sprintf("%s: x=%s, y=%s\n", as.character(match.call()[[1L]]), x, y))
>      if (...length()) str(list(...))
> }
> 
> foo.C <- function(x, y = 3, ...) {
>      cat(sprintf("%s: x=%s, y=%s\n", as.character(match.call()[[1L]]), x, y))
>      if (...length()) str(list(...))
>      NextMethod("foo", x = x, y = y)
> }
> 
> c <- structure(class = "C", 1)
> 
> # 'x' winds up in ..1
> foo(c)
> # foo.C: x=1, y=3
> # foo.default: x=1, y=3
> # List of 1
> #  $ : 'C' num 1
> 
> # empty ...!
> foo(x=c)
> # foo.C: x=1, y=3
> # foo.default: x=1, y=3
> 
> # now both x is ..1, y is ..2
> foo(c, 4)
> # foo.C: x=1, y=4
> # foo.default: x=1, y=4
> # List of 2
> #  $ : 'C' num 1
> #  $ : num 4
> 
> # perhaps predictably, ...length()==0
> foo(x=c, y=4)
> # foo.C: x=1, y=4
> # foo.default: x=1, y=4
> 
> I've tried re-reading ?NextMethod a few times as well as R-lang [1] &
> can't make heads or tails of this. I've also come across related 2012
> (!) thread [2] and tangentially-related bug [3].
> 
> Is this intended behavior? If so, might I reiterate Henrik's long-ago
> request for better documentation of how to work around this?
> 
> For some added context, where I actually encountered this, my S3
> method is mainly written to overwrite the defaults of a parent class's
> method.
> 
> Mike C
> 
> [1] https://cran.r-project.org/doc/manuals/r-devel/R-lang.html#NextMethod
> [2] https://stat.ethz.ch/pipermail/r-devel/2012-October/065016.html
> [3] https://bugs.r-project.org/show_bug.cgi?id=15654
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Mar 25 11:53:19 2025
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 25 Mar 2025 11:53:19 +0100
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
References: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>
 <5ca819d3-1c9d-4264-a832-67b8a28b4608@gmail.com>
 <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
Message-ID: <c6b9cd3c-cfa6-4933-ba21-2df4ea8a54cb@insa-toulouse.fr>

Le 24/03/2025 ? 20:28, J C Nash a ?crit?:
> For Linux users, meld is quite nice for side by side editing, though 
> I've never tried using it for
> display. Just checking now suggests it isn't obvious how to "print" 
> side by side display.
>
> I've made meld easier for my own use by creating an icon in Double 
> Commander (DC allows
> the user to create iconized links to scripts and programs). There are 
> two panes in the DC
> file manager. I highlight one file in each then click. This saves 
> typing two full paths in
> a command
>
> ?? meld? path/to/file1 path/to/file2
>
> I suspect the highlight and click makes my use of meld reasonably 
> attractive. I'm not sure
> I'd use it in the raw command line mode.
>
> Like Duncan, I welcome suggestions for similar tools, especially if 
> there's a display option.
I like tkdiff.

Serguei.

>
> John Nash
>
> On 2025-03-24 15:21, Duncan Murdoch wrote:
>> I sent some comments directly to Ben.? I just want to reply publicly 
>> to this part:
>>
>> On 2025-03-24 1:18 p.m., Ben Bolker wrote:
>>
>>> ??? The patch file is attached (also available at bugzilla, if it 
>>> doesn't
>>> get through to the list). I find the patch format a little hard to 
>>> read,
>>> so I'm reproducing just the *new* text below.
>>
>> I agree absolutely about the lack of readability of patch files.? A 
>> side by side display is much nicer.? If anyone out there isn't using 
>> one, you should.
>>
>> I really like the one I use ("Beyond Compare"), but it's not open 
>> source.? I've been using it for a very long time (20 years or more, I 
>> think), and I suspect there are very good open source competitors out 
>> there now (and may have been for all the time I've been using BC). 
>> Suggestions?
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
https://www.toulouse-biotechnology-institute.fr/en/plateformes-plateaux/cellule-mathematiques/


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Mar 25 12:57:10 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 25 Mar 2025 07:57:10 -0400
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <c6b9cd3c-cfa6-4933-ba21-2df4ea8a54cb@insa-toulouse.fr>
References: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>
 <5ca819d3-1c9d-4264-a832-67b8a28b4608@gmail.com>
 <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
 <c6b9cd3c-cfa6-4933-ba21-2df4ea8a54cb@insa-toulouse.fr>
Message-ID: <edc57f9f-2edd-4f3f-b547-0061f3d4080f@gmail.com>

Thanks.  When I went looking for a web page about tkdiff, I found this 
one comparing multiple diff tools:

  https://www.tecmint.com/best-linux-file-diff-tools-comparison/

It says it's for Linux, but they may be available on other platforms 
too.  For example, tkdiff is based on TCL/TK, so it is cross-platform.

Based just on that comparison page, I'd probably choose DiffMerge or 
Diffuse, but I imagine some of the others can match them.

Duncan Murdoch

On 2025-03-25 6:53 a.m., Serguei Sokol via R-devel wrote:
> Le 24/03/2025 ? 20:28, J C Nash a ?crit?:
>> For Linux users, meld is quite nice for side by side editing, though
>> I've never tried using it for
>> display. Just checking now suggests it isn't obvious how to "print"
>> side by side display.
>>
>> I've made meld easier for my own use by creating an icon in Double
>> Commander (DC allows
>> the user to create iconized links to scripts and programs). There are
>> two panes in the DC
>> file manager. I highlight one file in each then click. This saves
>> typing two full paths in
>> a command
>>
>>  ?? meld? path/to/file1 path/to/file2
>>
>> I suspect the highlight and click makes my use of meld reasonably
>> attractive. I'm not sure
>> I'd use it in the raw command line mode.
>>
>> Like Duncan, I welcome suggestions for similar tools, especially if
>> there's a display option.
> I like tkdiff.
> 
> Serguei.
> 
>>
>> John Nash
>>
>> On 2025-03-24 15:21, Duncan Murdoch wrote:
>>> I sent some comments directly to Ben.? I just want to reply publicly
>>> to this part:
>>>
>>> On 2025-03-24 1:18 p.m., Ben Bolker wrote:
>>>
>>>>  ??? The patch file is attached (also available at bugzilla, if it
>>>> doesn't
>>>> get through to the list). I find the patch format a little hard to
>>>> read,
>>>> so I'm reproducing just the *new* text below.
>>>
>>> I agree absolutely about the lack of readability of patch files.? A
>>> side by side display is much nicer.? If anyone out there isn't using
>>> one, you should.
>>>
>>> I really like the one I use ("Beyond Compare"), but it's not open
>>> source.? I've been using it for a very long time (20 years or more, I
>>> think), and I suspect there are very good open source competitors out
>>> there now (and may have been for all the time I've been using BC).
>>> Suggestions?
>>>
>>> Duncan Murdoch
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Tue Mar 25 13:38:24 2025
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Tue, 25 Mar 2025 18:08:24 +0530
Subject: [Rd] request for discussion on lonely doc patch suggestion
In-Reply-To: <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
References: <afc37678-3cbd-49c8-96c1-e815513ed529@gmail.com>
 <5ca819d3-1c9d-4264-a832-67b8a28b4608@gmail.com>
 <46cf0a61-7f78-4898-a3ba-db3a087274a3@gmail.com>
Message-ID: <CADfFDC6K=BmMJstDbLkCKm8mvXa4pRdGvTN65d_ThzGZjbm4=g@mail.gmail.com>

I like kompare very much, but I think it's Linux only.

https://apps.kde.org/kompare/

-Deepayan

On Tue, 25 Mar 2025 at 01:01, J C Nash <profjcnash at gmail.com> wrote:

> For Linux users, meld is quite nice for side by side editing, though I've
> never tried using it for
> display. Just checking now suggests it isn't obvious how to "print" side
> by side display.
>
> I've made meld easier for my own use by creating an icon in Double
> Commander (DC allows
> the user to create iconized links to scripts and programs). There are two
> panes in the DC
> file manager. I highlight one file in each then click. This saves typing
> two full paths in
> a command
>
>     meld  path/to/file1 path/to/file2
>
> I suspect the highlight and click makes my use of meld reasonably
> attractive. I'm not sure
> I'd use it in the raw command line mode.
>
> Like Duncan, I welcome suggestions for similar tools, especially if
> there's a display option.
>
> John Nash
>
> On 2025-03-24 15:21, Duncan Murdoch wrote:
> > I sent some comments directly to Ben.  I just want to reply publicly to
> this part:
> >
> > On 2025-03-24 1:18 p.m., Ben Bolker wrote:
> >
> >>     The patch file is attached (also available at bugzilla, if it
> doesn't
> >> get through to the list). I find the patch format a little hard to read,
> >> so I'm reproducing just the *new* text below.
> >
> > I agree absolutely about the lack of readability of patch files.  A side
> by side display is much nicer.  If anyone out
> > there isn't using one, you should.
> >
> > I really like the one I use ("Beyond Compare"), but it's not open
> source.  I've been using it for a very long time (20
> > years or more, I think), and I suspect there are very good open source
> competitors out there now (and may have been for
> > all the time I've been using BC). Suggestions?
> >
> > Duncan Murdoch
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Tue Mar 25 23:53:02 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 25 Mar 2025 17:53:02 -0500
Subject: [Rd] Patch for RJSONIO
Message-ID: <26595.13262.945659.157308@rob.eddelbuettel.com>


I can never remember where the canonical sources are for the effectively-CRAN
maintained packages so I am dropping it here -- yesterday's update to RJSONIO
does not build on anything older than r-devel.  This patch helps, feel free
to adjust as needed.

Dirk


diff -ru RJSONIO.orig/src/RJSON.c RJSONIO/src/RJSON.c
--- RJSONIO.orig/src/RJSON.c	2025-03-24 02:10:08.000000000 -0500
+++ RJSONIO/src/RJSON.c	2025-03-25 17:49:50.490016649 -0500
@@ -2,6 +2,7 @@
 
 #include <Rinternals.h>
 #include <Rdefines.h>
+#include <Rversion.h>
 
 #include "ConvertUTF.h"
 
@@ -70,7 +71,11 @@
 	    ptr = REAL(tmp);
 	    break;
 	case VECSXP:
+#if R_VERSION >= R_Version(4,5,0)
 	    ptr = (void *) VECTOR_PTR_RO(tmp);
+#else
+	    ptr = (void *) VECTOR_PTR(tmp);
+#endif
 	    break;
 	default:
 	    ptr = NULL;


-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bbo|ker @end|ng |rom gm@||@com  Tue Mar 25 23:58:05 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 25 Mar 2025 18:58:05 -0400
Subject: [Rd] Patch for RJSONIO
In-Reply-To: <26595.13262.945659.157308@rob.eddelbuettel.com>
References: <26595.13262.945659.157308@rob.eddelbuettel.com>
Message-ID: <aa40a238-ddba-40f7-bba5-c2f4be8aef16@gmail.com>

Maybe https://github.com/duncantl/RJSONIO ?

(That page also points to https://omegahat.org/RJSONIO, which is now 
defunct ...)

On 3/25/25 18:53, Dirk Eddelbuettel wrote:
> 
> I can never remember where the canonical sources are for the effectively-CRAN
> maintained packages so I am dropping it here -- yesterday's update to RJSONIO
> does not build on anything older than r-devel.  This patch helps, feel free
> to adjust as needed.
> 
> Dirk
> 
> 
> diff -ru RJSONIO.orig/src/RJSON.c RJSONIO/src/RJSON.c
> --- RJSONIO.orig/src/RJSON.c	2025-03-24 02:10:08.000000000 -0500
> +++ RJSONIO/src/RJSON.c	2025-03-25 17:49:50.490016649 -0500
> @@ -2,6 +2,7 @@
>   
>   #include <Rinternals.h>
>   #include <Rdefines.h>
> +#include <Rversion.h>
>   
>   #include "ConvertUTF.h"
>   
> @@ -70,7 +71,11 @@
>   	    ptr = REAL(tmp);
>   	    break;
>   	case VECSXP:
> +#if R_VERSION >= R_Version(4,5,0)
>   	    ptr = (void *) VECTOR_PTR_RO(tmp);
> +#else
> +	    ptr = (void *) VECTOR_PTR(tmp);
> +#endif
>   	    break;
>   	default:
>   	    ptr = NULL;
> 
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Mar 26 01:10:02 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 25 Mar 2025 20:10:02 -0400
Subject: [Rd] Patch for RJSONIO
In-Reply-To: <aa40a238-ddba-40f7-bba5-c2f4be8aef16@gmail.com>
References: <26595.13262.945659.157308@rob.eddelbuettel.com>
 <aa40a238-ddba-40f7-bba5-c2f4be8aef16@gmail.com>
Message-ID: <1c47587a-9397-4783-b8c0-bac3e7e98164@gmail.com>

I think email to the maintainer is likely the only choice.  The 
maintainer is "CRAN Team <CRAN at r-project.org>".

Duncan Murdoch


On 2025-03-25 6:58 p.m., Ben Bolker wrote:
> Maybe https://github.com/duncantl/RJSONIO ?
> 
> (That page also points to https://omegahat.org/RJSONIO, which is now
> defunct ...)
> 
> On 3/25/25 18:53, Dirk Eddelbuettel wrote:
>>
>> I can never remember where the canonical sources are for the effectively-CRAN
>> maintained packages so I am dropping it here -- yesterday's update to RJSONIO
>> does not build on anything older than r-devel.  This patch helps, feel free
>> to adjust as needed.
>>
>> Dirk
>>
>>
>> diff -ru RJSONIO.orig/src/RJSON.c RJSONIO/src/RJSON.c
>> --- RJSONIO.orig/src/RJSON.c	2025-03-24 02:10:08.000000000 -0500
>> +++ RJSONIO/src/RJSON.c	2025-03-25 17:49:50.490016649 -0500
>> @@ -2,6 +2,7 @@
>>    
>>    #include <Rinternals.h>
>>    #include <Rdefines.h>
>> +#include <Rversion.h>
>>    
>>    #include "ConvertUTF.h"
>>    
>> @@ -70,7 +71,11 @@
>>    	    ptr = REAL(tmp);
>>    	    break;
>>    	case VECSXP:
>> +#if R_VERSION >= R_Version(4,5,0)
>>    	    ptr = (void *) VECTOR_PTR_RO(tmp);
>> +#else
>> +	    ptr = (void *) VECTOR_PTR(tmp);
>> +#endif
>>    	    break;
>>    	default:
>>    	    ptr = NULL;
>>
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Wed Mar 26 01:23:58 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 25 Mar 2025 20:23:58 -0400
Subject: [Rd] Patch for RJSONIO
In-Reply-To: <1c47587a-9397-4783-b8c0-bac3e7e98164@gmail.com>
References: <26595.13262.945659.157308@rob.eddelbuettel.com>
 <aa40a238-ddba-40f7-bba5-c2f4be8aef16@gmail.com>
 <1c47587a-9397-4783-b8c0-bac3e7e98164@gmail.com>
Message-ID: <CABghstTWFxi7tQ2bOmLno1_-7KLP1a3KXNs1w6ab-DBaobipVA@mail.gmail.com>

  Dirk points out via Jeroen Ooms that

https://github.com/r-devel/r-svn-packages

is a  mirror of

https://svn.r-project.org/R-packages/trunk/RJSONIO/

which is where the package really lives ...

On Tue, Mar 25, 2025 at 8:10?PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> I think email to the maintainer is likely the only choice.  The
> maintainer is "CRAN Team <CRAN at r-project.org>".
>
> Duncan Murdoch
>
>
> On 2025-03-25 6:58 p.m., Ben Bolker wrote:
> > Maybe https://github.com/duncantl/RJSONIO ?
> >
> > (That page also points to https://omegahat.org/RJSONIO, which is now
> > defunct ...)
> >
> > On 3/25/25 18:53, Dirk Eddelbuettel wrote:
> >>
> >> I can never remember where the canonical sources are for the effectively-CRAN
> >> maintained packages so I am dropping it here -- yesterday's update to RJSONIO
> >> does not build on anything older than r-devel.  This patch helps, feel free
> >> to adjust as needed.
> >>
> >> Dirk
> >>
> >>
> >> diff -ru RJSONIO.orig/src/RJSON.c RJSONIO/src/RJSON.c
> >> --- RJSONIO.orig/src/RJSON.c 2025-03-24 02:10:08.000000000 -0500
> >> +++ RJSONIO/src/RJSON.c      2025-03-25 17:49:50.490016649 -0500
> >> @@ -2,6 +2,7 @@
> >>
> >>    #include <Rinternals.h>
> >>    #include <Rdefines.h>
> >> +#include <Rversion.h>
> >>
> >>    #include "ConvertUTF.h"
> >>
> >> @@ -70,7 +71,11 @@
> >>          ptr = REAL(tmp);
> >>          break;
> >>      case VECSXP:
> >> +#if R_VERSION >= R_Version(4,5,0)
> >>          ptr = (void *) VECTOR_PTR_RO(tmp);
> >> +#else
> >> +        ptr = (void *) VECTOR_PTR(tmp);
> >> +#endif
> >>          break;
> >>      default:
> >>          ptr = NULL;
> >>
> >>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Wed Mar 26 07:13:20 2025
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Tue, 25 Mar 2025 23:13:20 -0700
Subject: [Rd] 
 Why does NextMethod() pick up duplicate arguments in '...' if
 given positionally at top level?
In-Reply-To: <d3d29ec2-69d7-4253-94b9-cfef9cb0f26b@gmail.com>
References: <CAPRVBcww0W_UzV6V5kvgJCGPLuNWg_=g2KiM-j73m3J2cNsSNQ@mail.gmail.com>
 <d3d29ec2-69d7-4253-94b9-cfef9cb0f26b@gmail.com>
Message-ID: <CAPRVBczPtvKafcHZBz6n2JAm3N_NNx__Jt49ap=mj9vTzva77A@mail.gmail.com>

Thanks Duncan! I filed [1]. I didn't have a clue how to fix it, so I
figured, why not ask an LLM [2].

It got the solution quite wrong (unless I'm just not zen enough to
understand its wisdom), but it _did_ focus my attention on the right
place. I have a patch going through CI at [3] that fixes the bug, I
just don't know what knock-on effects it might have.

[1] https://bugs.r-project.org/show_bug.cgi?id=18875
[2] https://claude.ai/share/2b702387-6aef-44ee-9e28-17c9096ce8f0
[3] https://github.com/r-devel/r-svn/pull/198

On Tue, Mar 25, 2025 at 3:30?AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> I don't think there's any valid reason for this behaviour, i.e. it's a
> bug.  For those who haven't read closely, the bug is that in the
> `foo(c)` call, within foo.default() the value of `c` is bound to both
> x and to the first element of ... .
>
> The 2012 thread you link to started with a slightly different setup and
> arguments were made by Simon that the behaviour is documented, but the
> final message in the thread is about the same bug as here.
>
> I think the bug report 15654 is about the first setup, not the current one.
>
> So what I'd suggest you do is report this example in a new bug report,
> and if you have the energy (seems nobody else does!), track down where
> the duplication happens, and include a patch to fix it.
>
> If you do attempt that, you'll probably learn enough about NextMethod to
> decide whether to follow the suggestion in 15654, and could maybe submit
> a patch for that, too.
>
> Duncan Murdoch
>
>
> On 2025-03-25 2:12 a.m., Michael Chirico wrote:
> > Consider:
> >
> > foo <- function(x, y, ...) {
> >      UseMethod("foo")
> > }
> >
> > foo.default <- function(x, y = 0, ...) {
> >      cat(sprintf("%s: x=%s, y=%s\n", as.character(match.call()[[1L]]), x, y))
> >      if (...length()) str(list(...))
> > }
> >
> > foo.C <- function(x, y = 3, ...) {
> >      cat(sprintf("%s: x=%s, y=%s\n", as.character(match.call()[[1L]]), x, y))
> >      if (...length()) str(list(...))
> >      NextMethod("foo", x = x, y = y)
> > }
> >
> > c <- structure(class = "C", 1)
> >
> > # 'x' winds up in ..1
> > foo(c)
> > # foo.C: x=1, y=3
> > # foo.default: x=1, y=3
> > # List of 1
> > #  $ : 'C' num 1
> >
> > # empty ...!
> > foo(x=c)
> > # foo.C: x=1, y=3
> > # foo.default: x=1, y=3
> >
> > # now both x is ..1, y is ..2
> > foo(c, 4)
> > # foo.C: x=1, y=4
> > # foo.default: x=1, y=4
> > # List of 2
> > #  $ : 'C' num 1
> > #  $ : num 4
> >
> > # perhaps predictably, ...length()==0
> > foo(x=c, y=4)
> > # foo.C: x=1, y=4
> > # foo.default: x=1, y=4
> >
> > I've tried re-reading ?NextMethod a few times as well as R-lang [1] &
> > can't make heads or tails of this. I've also come across related 2012
> > (!) thread [2] and tangentially-related bug [3].
> >
> > Is this intended behavior? If so, might I reiterate Henrik's long-ago
> > request for better documentation of how to work around this?
> >
> > For some added context, where I actually encountered this, my S3
> > method is mainly written to overwrite the defaults of a parent class's
> > method.
> >
> > Mike C
> >
> > [1] https://cran.r-project.org/doc/manuals/r-devel/R-lang.html#NextMethod
> > [2] https://stat.ethz.ch/pipermail/r-devel/2012-October/065016.html
> > [3] https://bugs.r-project.org/show_bug.cgi?id=15654
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Mar 26 07:17:45 2025
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 26 Mar 2025 07:17:45 +0100
Subject: [Rd] Patch for RJSONIO
In-Reply-To: <26595.13262.945659.157308@rob.eddelbuettel.com>
References: <26595.13262.945659.157308@rob.eddelbuettel.com>
Message-ID: <26595.39945.471375.82303@hornik.net>

>>>>> Dirk Eddelbuettel writes:

Great, thanks!  Will put up a fixed RJSONIO shortly ...

Best
-k

> I can never remember where the canonical sources are for the effectively-CRAN
> maintained packages so I am dropping it here -- yesterday's update to RJSONIO
> does not build on anything older than r-devel.  This patch helps, feel free
> to adjust as needed.

> Dirk


> diff -ru RJSONIO.orig/src/RJSON.c RJSONIO/src/RJSON.c
> --- RJSONIO.orig/src/RJSON.c	2025-03-24 02:10:08.000000000 -0500
> +++ RJSONIO/src/RJSON.c	2025-03-25 17:49:50.490016649 -0500
> @@ -2,6 +2,7 @@
 
>  #include <Rinternals.h>
>  #include <Rdefines.h>
> +#include <Rversion.h>
 
>  #include "ConvertUTF.h"
 
> @@ -70,7 +71,11 @@
>  	    ptr = REAL(tmp);
>  	    break;
>  	case VECSXP:
> +#if R_VERSION >= R_Version(4,5,0)
>  	    ptr = (void *) VECTOR_PTR_RO(tmp);
> +#else
> +	    ptr = (void *) VECTOR_PTR(tmp);
> +#endif
>  	    break;
>  	default:
>  	    ptr = NULL;


> -- 
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @erg|o||er @end|ng |rom gm@||@com  Wed Mar 26 17:47:26 2025
From: @erg|o||er @end|ng |rom gm@||@com (Sergio Oller)
Date: Wed, 26 Mar 2025 17:47:26 +0100
Subject: [Rd] Suggestion: Install packages on non-appendable file systems
 (e.g. databricks volumes)
Message-ID: <CAGBo=GnvV_udrRMWmL_hCsRceUZibtDfpR05sxs8ZSxkbd8rOg@mail.gmail.com>

Hello,

I would like to submit a patch to R. Following 5  Submitting Feature
Requests ? R Development Guide
<https://contributor.r-project.org/rdevguide/chapters/submitting_feature_requests.html>,
I would like to ask for feedback before proceeding with a ?formal?
submission on bugzilla. It's my first attempt contributing to R and I do
not currently have a bugzilla account.

I am working at a company, and we use R with databricks. We want to install
some packages on a distributed filesystem that is not fully POSIX
compliant, as it does not support opening files in append mode. In C terms,
`open(filename, "a")` gives an error. I guess other distributed file
systems beyond the ones in databricks may have issues with append mode as
well.

Our current workaround is to install all packages on a local folder, and
then copy/move the folder to the distributed file system.

If I understand package installation correctly, when a package is
installed, the installation happens inside a 00LOCK directory, and then the
outcome is moved to the final destination.

The contribution I would like to submit allows users/sysadmins to set an
environment variable named PKG_LOCKDIR_PREFIX, that defines the location
where the "00LOCK-" directories are created. The patch is backwards
compatible and it consists of +28,-10 lines, hopefully easy enough to
review.

https://github.com/r-devel/r-svn/pull/196.diff

When I use this patch, I can successfully install packages on a distributed
file system by setting PKG_LOCKDIR_PREFIX to a directory in my local
filesystem (R does all the file append stuff in the local file system, and
finally copies all the package files to the distributed file system)

This setting makes package installation transparent for all data
scientists, since they may not even know that PKG_LOCKDIR_PREFIX has been
set. Package installation just works as expected.

I feel the patch has some added value over our workaround: Even if we
implement the workaround with a simple wrapper over install.packages(), any
third party package that depends on install.packages() (such as renv or
others) won't use our workaround. Besides, with this patch merged any other
R user benefits from being able to install packages in those filesystems.

Any feedback is very much appreciated.

Thanks for your time,

Sergio

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Mar 26 21:34:42 2025
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 26 Mar 2025 21:34:42 +0100
Subject: [Rd] 
 Suggestion: Install packages on non-appendable file systems
 (e.g. databricks volumes)
In-Reply-To: <CAGBo=GnvV_udrRMWmL_hCsRceUZibtDfpR05sxs8ZSxkbd8rOg@mail.gmail.com>
References: <CAGBo=GnvV_udrRMWmL_hCsRceUZibtDfpR05sxs8ZSxkbd8rOg@mail.gmail.com>
Message-ID: <ec874f23-cdb9-4902-b7a6-24cd64d6659f@gmail.com>


On 3/26/25 17:47, Sergio Oller wrote:
> Hello,
>
> I would like to submit a patch to R. Following 5  Submitting Feature
> Requests ? R Development Guide
> <https://contributor.r-project.org/rdevguide/chapters/submitting_feature_requests.html>,
> I would like to ask for feedback before proceeding with a ?formal?
> submission on bugzilla. It's my first attempt contributing to R and I do
> not currently have a bugzilla account.
>
> I am working at a company, and we use R with databricks. We want to install
> some packages on a distributed filesystem that is not fully POSIX
> compliant, as it does not support opening files in append mode. In C terms,
> `open(filename, "a")` gives an error. I guess other distributed file
> systems beyond the ones in databricks may have issues with append mode as
> well.
>
> Our current workaround is to install all packages on a local folder, and
> then copy/move the folder to the distributed file system.

This is something we try to keep working in R if possible, to allow 
users moving installed packages by moving the installation directories. 
If this practice works for you, it is probably fine.

Currently, installing a binary package just means unpacking it to the 
target directory. Probably you could do this also? via binary packages: 
build binary packages on a local filesystem, and then install them to 
the non-POSIX filesystem (provided the unpacking/installation would work 
on such a filesystem). If the installation of a binary package doesn't 
work but could be (possibly optionally) made work, that might be of 
interest.

> If I understand package installation correctly, when a package is
> installed, the installation happens inside a 00LOCK directory, and then the
> outcome is moved to the final destination.
>
> The contribution I would like to submit allows users/sysadmins to set an
> environment variable named PKG_LOCKDIR_PREFIX, that defines the location
> where the "00LOCK-" directories are created. The patch is backwards
> compatible and it consists of +28,-10 lines, hopefully easy enough to
> review.
>
> https://github.com/r-devel/r-svn/pull/196.diff
>
> When I use this patch, I can successfully install packages on a distributed
> file system by setting PKG_LOCKDIR_PREFIX to a directory in my local
> filesystem (R does all the file append stuff in the local file system, and
> finally copies all the package files to the distributed file system)

I am not excited about the idea combining this with the locking 
mechanism and staged installation in the described way. The current 
implementation takes advantage of that on a single filesystem, a move 
operation is either atomic (POSIX) or at least very fast (Windows). 
Copying an installed package to a different filesystem isn't. There is a 
risk that some other R session could see a partial installation of a 
package. Then, if the library was on a distributed filesystem accessed 
from different machines, there could even be corruption due to 
concurrent installation from multiple machines. In principle, this could 
be even on a single machine (checking existence of a directory on one 
filesystem and creating it on another wouldn't be atomic).

Perhaps the staging/locking could be implemented in some special way on 
the target filesystem, some second-level staging and installation - but 
it is questionable whether it is worth the effort/maintenance in base R. 
Also keep in mind this could hardly be regularly tested as such 
filesystems are rare.

Best
Tomas

P.S.

about staged installation: 
https://developer.r-project.org/Blog/public/2019/02/14/staged-install/index.html


>
> This setting makes package installation transparent for all data
> scientists, since they may not even know that PKG_LOCKDIR_PREFIX has been
> set. Package installation just works as expected.
>
> I feel the patch has some added value over our workaround: Even if we
> implement the workaround with a simple wrapper over install.packages(), any
> third party package that depends on install.packages() (such as renv or
> others) won't use our workaround. Besides, with this patch merged any other
> R user benefits from being able to install packages in those filesystems.
>
> Any feedback is very much appreciated.
>
> Thanks for your time,
>
> Sergio
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


