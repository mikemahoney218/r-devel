From c@@rdi@g@bor @ending from gm@il@com  Tue May  1 14:05:32 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 01 May 2018 12:05:32 +0000
Subject: [Rd] possible internal (un)tar bug
Message-ID: <CABtg=K=OBTOPAwKjcb2ACHNZ1cNt8MAdwzN+F2Nn23RXetpeRg@mail.gmail.com>

This is a not too old R-devel on Linux, it already fails in R 3.4.4, and on
macOS as well.

The tar file seems valid, external tar can untar it, so maybe an untar()
bug.

setwd(tempdir())
dir.create("pkg")
cat("foobar\n",  file = file.path("pkg", "NAMESPACE"))
cat("this: that\n", file = file.path("pkg", "DESCRIPTION"))

tar("pkg_1.0.tar.gz", "pkg", compression = "gzip", tar = "internal")
unlink("pkg", recursive = TRUE)

con <- file("pkg_1.0.tar.gz", open = "rb")
ex <- tempfile()
untar(con, files = "pkg/DESCRIPTION", exdir = ex)

#> Error in untar2(tarfile, files, list, exdir, restore_times) :
#>   incomplete block on file



From therne@u @ending from m@yo@edu  Tue May  1 15:11:44 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 01 May 2018 08:11:44 -0500
Subject: [Rd] issue with model.frame()
Message-ID: <bb6fa2$9b935h@ironport10.mayo.edu>

A user sent me an example where coxph fails, and the root of the failure is a case where 
names(mf) is not equal to the term.labels attribute of the formula -- the latter has an 
extraneous newline. Here is an example that does not use the survival library.

# first create a data set with many long names
n <- 30? # number of rows for the dummy data set
vname <- vector("character", 26)
for (i in 1:26) vname[i] <- paste(rep(letters[1:i],2), collapse='')? # long variable names

tdata <- data.frame(y=1:n, matrix(runif(n*26), nrow=n))
names(tdata) <- c('y', vname)

# Use it in a formula
myform <- paste("y ~ cbind(", paste(vname, collapse=", "), ")")
mf <- model.frame(formula(myform), data=tdata)

match(attr(terms(mf), "term.labels"), names(mf))?? # gives NA

----

In the user's case the function is ridge(x1, x2, ....) rather than cbind, but the effect 
is the same.
Any ideas for a work around?

Aside: the ridge() function is very simple, it was added as an example to show how a user 
can add their own penalization to coxph.? I never expected serious use of it.? For this 
particular user the best answer is to use glmnet instead.?? He/she is trying to apply an 
L2 penalty to a large number of SNP * covariate interactions.

Terry T.



From m@echler @ending from @t@t@m@th@ethz@ch  Tue May  1 16:14:43 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 1 May 2018 16:14:43 +0200
Subject: [Rd] possible internal (un)tar bug
In-Reply-To: <CABtg=K=OBTOPAwKjcb2ACHNZ1cNt8MAdwzN+F2Nn23RXetpeRg@mail.gmail.com>
References: <CABtg=K=OBTOPAwKjcb2ACHNZ1cNt8MAdwzN+F2Nn23RXetpeRg@mail.gmail.com>
Message-ID: <23272.30291.224292.957637@stat.math.ethz.ch>

>>>>> G?bor Cs?rdi <csardi.gabor at gmail.com>
>>>>>     on Tue, 1 May 2018 12:05:32 +0000 writes:

    > This is a not too old R-devel on Linux, it already fails
    > in R 3.4.4, and on macOS as well.

and fails in considerably older R versions, too.

Basically  untar() seems to fail on a connection, but works fine
on a plain file name.

This is a bug --> Thank you for the report, G?bor !

I'm investigating.
Martin

----------- my version of your reprex :

setwd(tempdir())
dir.create("pkg")
cat("this: that\n", file = file.path("pkg", "DESCRIPTION"))
tf <- "pkg_1.0.tar.gz"
tar(tf, "pkg", compression = "gzip", tar = "internal")
unlink("pkg", recursive = TRUE)

## MM: tar *file* is good
stopifnot(identical(untar(tf, list=TRUE), "pkg/DESCRIPTION"))
untar(tf, files = (f <- "pkg/DESCRIPTION")) # no problem
stopifnot(file.exists(f))
unlink("pkg", recursive = TRUE)

## Now with a connection -- "nothing works":
con <- file(tf, open = "rb"); try( untar(con, list = TRUE) ) ## -> Error
con <- file(tf, open = "rb"); try( untar(con, files = "pkg/DESCRIPTION") )
## The error message is the same in both cases:
'
Error in untar2(tarfile, files, list, exdir, restore_times) :
   incomplete block on file
'



From m@echler @ending from @t@t@m@th@ethz@ch  Tue May  1 16:39:57 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 1 May 2018 16:39:57 +0200
Subject: [Rd] possible internal (un)tar bug
In-Reply-To: <23272.30291.224292.957637@stat.math.ethz.ch>
References: <CABtg=K=OBTOPAwKjcb2ACHNZ1cNt8MAdwzN+F2Nn23RXetpeRg@mail.gmail.com>
 <23272.30291.224292.957637@stat.math.ethz.ch>
Message-ID: <23272.31805.325043.227639@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Tue, 1 May 2018 16:14:43 +0200 writes:

>>>>> G?bor Cs?rdi <csardi.gabor at gmail.com>
>>>>>     on Tue, 1 May 2018 12:05:32 +0000 writes:

    >> This is a not too old R-devel on Linux, it already fails
    >> in R 3.4.4, and on macOS as well.

    > and fails in considerably older R versions, too.

    > Basically untar() seems to fail on a connection, but works
    > fine on a plain file name.

Well, there's an easy workaround:   If you want to use a
connection (instead of a simple filename) with  untar() and want
to use compression (as in the example), you
can currently  do that easily when you ensure the connection is
a "gzcon" one :

##=========>  Workaround for now:

## Create :
setwd(tempdir()) ; dir.create("pkg")
cat("this: that\n", file = file.path("pkg", "DESCRIPTION"))
tf <- "pkg_1.0.tar.gz"
tar(tf, "pkg", compression = "gzip", tar = "internal")
unlink("pkg", recursive = TRUE)

## As it is a compressed tar file, use it via a gzcon() connection,
## and both cases work fine:
con <- gzcon(file(tf, open = "rb")) ; (f <- untar(con, list = TRUE))
##     ~~~~~
con <- gzcon(file(tf, open = "rb")) ; untar(con, files = f)
stopifnot(identical(f, "pkg/DESCRIPTION"),
          file.exists(f))
unlink(c(tf,"pkg"), recursive = TRUE) # clean after me


------------

Of course, ideally untar() should do that for us and I'm testing
a simple patch to do that.

Martin



From ccberry @ending from uc@d@edu  Tue May  1 18:43:18 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Tue, 1 May 2018 16:43:18 +0000
Subject: [Rd] issue with model.frame()
In-Reply-To: <bb6fa2$9b935h@ironport10.mayo.edu>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
Message-ID: <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>



> On May 1, 2018, at 6:11 AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
> 
> A user sent me an example where coxph fails, and the root of the failure is a case where names(mf) is not equal to the term.labels attribute of the formula -- the latter has an extraneous newline. Here is an example that does not use the survival library.
> 
> # first create a data set with many long names
> n <- 30  # number of rows for the dummy data set
> vname <- vector("character", 26)
> for (i in 1:26) vname[i] <- paste(rep(letters[1:i],2), collapse='')  # long variable names
> 
> tdata <- data.frame(y=1:n, matrix(runif(n*26), nrow=n))
> names(tdata) <- c('y', vname)
> 
> # Use it in a formula
> myform <- paste("y ~ cbind(", paste(vname, collapse=", "), ")")
> mf <- model.frame(formula(myform), data=tdata)
> 
> match(attr(terms(mf), "term.labels"), names(mf))   # gives NA
> 
> ----
> 
> In the user's case the function is ridge(x1, x2, ....) rather than cbind, but the effect is the same.
> Any ideas for a work around?

Maybe add a `yourclass' class to mf and dispatch to a model.frame.yourclass method where the width cutoff arg here (around lines 57-58 of model.frame.default) is made larger:

varnames <- sapply(vars, function(x) paste(deparse(x, width.cutoff = 500), 
        collapse = " "))[-1L]

??

> 
> Aside: the ridge() function is very simple, it was added as an example to show how a user can add their own penalization to coxph.  I never expected serious use of it.  For this particular user the best answer is to use glmnet instead.   He/she is trying to apply an L2 penalty to a large number of SNP * covariate interactions.
> 
> Terry T.
> 


HTH,

Chuck


From m@echler @ending from @t@t@m@th@ethz@ch  Tue May  1 18:45:00 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 1 May 2018 18:45:00 +0200
Subject: [Rd] possible internal (un)tar bug
In-Reply-To: <23272.31805.325043.227639@stat.math.ethz.ch>
References: <CABtg=K=OBTOPAwKjcb2ACHNZ1cNt8MAdwzN+F2Nn23RXetpeRg@mail.gmail.com>
 <23272.30291.224292.957637@stat.math.ethz.ch>
 <23272.31805.325043.227639@stat.math.ethz.ch>
Message-ID: <23272.39308.620323.937240@stat.math.ethz.ch>

TLDR:  Use  gzfile(), not file()  .. and you have no problems.

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Tue, 1 May 2018 16:39:57 +0200 writes:

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Tue, 1 May 2018 16:14:43 +0200 writes:

>>>>> G?bor Cs?rdi <csardi.gabor at gmail.com>
>>>>>     on Tue, 1 May 2018 12:05:32 +0000 writes:

    >>> This is a not too old R-devel on Linux, it already fails
    >>> in R 3.4.4, and on macOS as well.

    >> and fails in considerably older R versions, too.

    >> Basically untar() seems to fail on a connection, but works
    >> fine on a plain file name.

    > Well, there's an easy workaround:   If you want to use a
    > connection (instead of a simple filename) with  untar() and want
    > to use compression (as in the example), you
    > can currently  do that easily when you ensure the connection is
    > a "gzcon" one :

    > ##=========>  Workaround for now:

    > ## Create :
    > setwd(tempdir()) ; dir.create("pkg")
    > cat("this: that\n", file = file.path("pkg", "DESCRIPTION"))
    > tf <- "pkg_1.0.tar.gz"
    > tar(tf, "pkg", compression = "gzip", tar = "internal")
    > unlink("pkg", recursive = TRUE)

    > ## As it is a compressed tar file, use it via a gzcon() connection,
    > ## and both cases work fine:
    > con <- gzcon(file(tf, open = "rb")) ; (f <- untar(con, list = TRUE))
    > ##     ~~~~~
    > con <- gzcon(file(tf, open = "rb")) ; untar(con, files = f)
    > stopifnot(identical(f, "pkg/DESCRIPTION"),
    > file.exists(f))
    > unlink(c(tf,"pkg"), recursive = TRUE) # clean after me

Actually, much better than  gzcon(file(....))  is  gzfile(....)
The latter works for all compression types that are supported by
tar(), not just for  gzip compression.

In the end, I'd conclude for now that the bug is mostly in the
documentation and the unhelpful error message.

We could try to "fix" your use case by wrapping the connection
by  gzcon(.) and that is okay also for uncompressed tar
files. However it fails for the newer compression schemes which
are all supported via gzfile().

I propose to commit the following change :

1) change the documentation of untar() to say that a connection
   to a compressed tar file should be created by gzfile().
2) in the case of a connection which gave the "block error",
   the error would newly be more helpful, mentioning gzfile().

Currently:

> con <- file(tf, open = "rb"); try( untar(con, list = TRUE) ) ## -> Error
Error in untar2(tarfile, files, list, exdir, restore_times) : 
  incomplete block: rather use gzfile(.) created connection?
> 

Feedback (by anyone)  ??

Martin



From becker@g@be @ending from gene@com  Tue May  1 19:05:38 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Tue, 1 May 2018 10:05:38 -0700
Subject: [Rd] debugonce() functions are not considered as debugged
In-Reply-To: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
References: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
Message-ID: <CAMFmJs=BHa9_f3bB-rsuVq-KOEQ4H9g=70q1H6pdPMOZ9PxvaQ@mail.gmail.com>

Gabor,

Others can speak to the origins of this more directly, but from what I
recall this has been true at least since I was working in this space on the
debugcall stuff a couple years ago. I imagine the reasoning  is what you
would expect: a single bit of course can't tell R both that a function is
debugged AND that it should undebug after the first call.  I don't know of
any R-facing way to check for debugonce status, though its possible I
missed it

That said, it would be possible to alter how the two bits are used so that
debugonce sets both of them, and debug (not once) only sets one, rather
them being treated as mutually exclusive. This would alter the behavior so
that debugonce'ed functions that haven't been called yet are considered
debugged, e.g., by isdebugged.

This would not, strictly speaking, be backwards compatible, but by the very
nature of what debugging means, it would not break any existing script
code. It could, and likely would, effect code implementing GUIs, however.

R-core - is this a patch that you are interested in and would consider
incorporating? If so I can volunteer to work on it.

Best,
~G

On Sat, Apr 28, 2018 at 4:57 AM, G?bor Cs?rdi <csardi.gabor at gmail.com>
wrote:

> debugonce() sets a different flag (RSTEP), and this is not queried by
> isdebugged(), and it is also not unset by undebug().
>
> Is this expected? If yes, is there a way to query and unset the RSTEP flag
> from R code?
>
> ? f <- function() { }
> ? debugonce(f)
> ? isdebugged(f)
> [1] FALSE
>
> ? undebug(f)
> Warning message:
> In undebug(f) : argument is not being debugged
>
> ? f()
> debugging in: f()
> debug at #1: {
> }
> Browse[2]>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]



From therne@u @ending from m@yo@edu  Tue May  1 19:55:27 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 01 May 2018 12:55:27 -0500
Subject: [Rd] [EXTERNAL] Re: issue with model.frame()
In-Reply-To: <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
 <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
Message-ID: <bb6fa2$9bcetc@ironport10.mayo.edu>

Great catch.  I'm very reluctant to use my own model.frame, since that locks me into 
tracking all the base R changes, potentially breaking survival in a bad way if I miss one.

But, this shows me clearly what the issue is and will allow me to think about it.

Another solution for the user is to use multiple ridge() calls to break it up; since 
he/she was using a fixed tuning parameter the result is the same.

Terry T.


On 05/01/2018 11:43 AM, Berry, Charles wrote:
> 
> 
>> On May 1, 2018, at 6:11 AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
>>
>> A user sent me an example where coxph fails, and the root of the failure is a case where names(mf) is not equal to the term.labels attribute of the formula -- the latter has an extraneous newline. Here is an example that does not use the survival library.
>>
>> # first create a data set with many long names
>> n <- 30  # number of rows for the dummy data set
>> vname <- vector("character", 26)
>> for (i in 1:26) vname[i] <- paste(rep(letters[1:i],2), collapse='')  # long variable names
>>
>> tdata <- data.frame(y=1:n, matrix(runif(n*26), nrow=n))
>> names(tdata) <- c('y', vname)
>>
>> # Use it in a formula
>> myform <- paste("y ~ cbind(", paste(vname, collapse=", "), ")")
>> mf <- model.frame(formula(myform), data=tdata)
>>
>> match(attr(terms(mf), "term.labels"), names(mf))   # gives NA
>>
>> ----
>>
>> In the user's case the function is ridge(x1, x2, ....) rather than cbind, but the effect is the same.
>> Any ideas for a work around?
> 
> Maybe add a `yourclass' class to mf and dispatch to a model.frame.yourclass method where the width cutoff arg here (around lines 57-58 of model.frame.default) is made larger:
> 
> varnames <- sapply(vars, function(x) paste(deparse(x, width.cutoff = 500),
>          collapse = " "))[-1L]
> 
> ??
> 
>>
>> Aside: the ridge() function is very simple, it was added as an example to show how a user can add their own penalization to coxph.  I never expected serious use of it.  For this particular user the best answer is to use glmnet instead.   He/she is trying to apply an L2 penalty to a large number of SNP * covariate interactions.
>>
>> Terry T.
>>
> 
> 
> HTH,
> 
> Chuck
>



From wdunl@p @ending from tibco@com  Tue May  1 20:38:18 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Tue, 1 May 2018 11:38:18 -0700
Subject: [Rd] issue with model.frame()
In-Reply-To: <bb6fa2$9b935h@ironport10.mayo.edu>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
Message-ID: <CAF8bMca1PK=oxGY5mWy+_22QcwqVVQ1b9Db4GvZG6w3MHsFfKw@mail.gmail.com>

You run into the same problem when using 'non-syntactical' names:

> mfB <- model.frame(y ~ `Temp(C)` + `Pres(mb)`,
data=data.frame(check.names=FALSE, y=1:10, `Temp(C)`=21:30,
`Pres(mb)`=991:1000))
> match(attr(terms(mfB), "term.labels"), names(mfB))   # gives NA's
[1] NA NA
> attr(terms(mfB), "term.labels")
[1] "`Temp(C)`"  "`Pres(mb)`"
> names(mfB)
[1] "y"        "Temp(C)"  "Pres(mb)"

Note that names(mfB) does not give a hint as whether they represent R
expressions or not (in this case they do not).  When they do represent R
expressions then one could parse() them and compare them to
as.list(attr(mfB),"variables")[-1]).


Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Tue, May 1, 2018 at 6:11 AM, Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

> A user sent me an example where coxph fails, and the root of the failure
> is a case where names(mf) is not equal to the term.labels attribute of the
> formula -- the latter has an extraneous newline. Here is an example that
> does not use the survival library.
>
> # first create a data set with many long names
> n <- 30  # number of rows for the dummy data set
> vname <- vector("character", 26)
> for (i in 1:26) vname[i] <- paste(rep(letters[1:i],2), collapse='')  #
> long variable names
>
> tdata <- data.frame(y=1:n, matrix(runif(n*26), nrow=n))
> names(tdata) <- c('y', vname)
>
> # Use it in a formula
> myform <- paste("y ~ cbind(", paste(vname, collapse=", "), ")")
> mf <- model.frame(formula(myform), data=tdata)
>
> match(attr(terms(mf), "term.labels"), names(mf))   # gives NA
>
> ----
>
> In the user's case the function is ridge(x1, x2, ....) rather than cbind,
> but the effect is the same.
> Any ideas for a work around?
>
> Aside: the ridge() function is very simple, it was added as an example to
> show how a user can add their own penalization to coxph.  I never expected
> serious use of it.  For this particular user the best answer is to use
> glmnet instead.   He/she is trying to apply an L2 penalty to a large number
> of SNP * covariate interactions.
>
> Terry T.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]



From ccberry @ending from uc@d@edu  Tue May  1 20:48:26 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Tue, 1 May 2018 18:48:26 +0000
Subject: [Rd] [EXTERNAL] Re: issue with model.frame()
In-Reply-To: <bb6fa2$9bcetc@ironport10.mayo.edu>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
 <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
 <bb6fa2$9bcetc@ironport10.mayo.edu>
Message-ID: <6F61CD6E-A88D-4146-8937-61B30B804C48@ucsd.edu>

Unfortunately, I spoke too soon.

model.frame calls formula <- terms(formula, data = data) if formula does not inherit from class "terms" as in your case.

And that is where the bad terms.labels attribute comes from.

So, the fix I suggested won't work.

But maybe you can just supply a terms object to model.frame that has correct term.labels.

Chuck


> On May 1, 2018, at 10:55 AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
> 
> Great catch.  I'm very reluctant to use my own model.frame, since that locks me into tracking all the base R changes, potentially breaking survival in a bad way if I miss one.



From @ko@ty@h@k @ending from ufl@edu  Tue May  1 20:57:50 2018
From: @ko@ty@h@k @ending from ufl@edu (Scott Kostyshak)
Date: Tue, 1 May 2018 14:57:50 -0400
Subject: [Rd] source(echo = TRUE) with a iso-8859-1 encoded file gives an
 error
Message-ID: <20180501185750.445oub53vcdnyyyx@steph>

I have very little knowledge about file encodings and would like to
learn more.

I've read the following pages to learn more:

  https://urldefense.proofpoint.com/v2/url?u=http-3A__stat.ethz.ch_R-2Dmanual_R-2Ddevel_library_base_html_Encoding.html&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=HegPJMcZ_5R6vYtdQLgIsh-M6ElOlewHPBZxe8IPSlI&e=
  https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_questions_4806823_how-2Dto-2Ddetect-2Dthe-2Dright-2Dencoding-2Dfor-2Dread-2Dcsv&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=KGDvHJrfkvqbwyKnIiY0V45HtN-W4Rpq4ZBXfIFaFMk&e=
  https://urldefense.proofpoint.com/v2/url?u=https-3A__developer.r-2Dproject.org_Encodings-5Fand-5FR.html&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=Ka1kGiCw3w22tOLfA50AyrKsMT-La14TQdutJJkdE04&e=

The last one, in particular, has been very helpful. I would be
interested in any further references that you suggest.

I attach a file that reproduces the issue I would like to learn more
about. I do not know if the file encoding will be correctly preserved
through email, so I also provide the file (temporarily) on Dropbox here:

  https://urldefense.proofpoint.com/v2/url?u=https-3A__www.dropbox.com_s_3lbgebk7b5uaia7_encoding-5Fexport-5Fissue.R-3Fdl-3D0&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=58a7qB9IHt3s2ZLDglGEHwWARuo8xvSlH_z8G5jDaUY&e=

The file gives an error when using "source()" with the
argument echo = TRUE:

  > source("encoding_export_issue.R", echo = TRUE)
  Error in nchar(dep, "c") : invalid multibyte string, element 1
  In addition: Warning message:
  In grepl("^[[:blank:]]*$", dep[1L]) :
    input string 1 is invalid in this locale

The problem comes from the "?" character in the .R file. The file
appears to be encoded as "iso-8859-1":

  $ file --mime-encoding encoding_export_issue.R 
  encoding_export_issue.R: iso-8859-1

Note that for me:

  > getOption("encoding")
  [1] "native.enc"

so "native.enc" is used for the "encoding" argument of source().

The following two calls succeed:

  > source("encoding_export_issue.R", echo = TRUE, encoding = "unknown")
  > source("encoding_export_issue.R", echo = TRUE, encoding = "iso-8859-1")

Is this file a valid "iso-8859-1" encoded file?  Why does source() fail
in the case of encoding set to "native.enc"? Is it because of the
settings to UTF-8 in my locale (see info on my system at the bottom of
this email).

I'm guessing it would be a bad idea to put

  options(encoding = "unknown")

in my .Rprofile, because it is difficult to always correctly guess the
encoding of files? Is there a reason why setting it to "unknown" would
lead to more problems than leaving it set to "native.enc"?

I've reproduced the above behavior on R-devel (r74677) and 3.4.3. Below
is my session info and locale info for my system with the 3.4.3 version:

> sessionInfo()
R version 3.4.3 (2017-11-30)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.3 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.4.3

> Sys.getlocale()
[1] "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C"

Thanks for your time,

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: encoding_export_issue.R
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180501/673e72aa/attachment-0005.ksh>

From i@t@z@hn @ending from gm@il@com  Tue May  1 21:15:30 2018
From: i@t@z@hn @ending from gm@il@com (Ista Zahn)
Date: Tue, 1 May 2018 15:15:30 -0400
Subject: [Rd] 
 source(echo = TRUE) with a iso-8859-1 encoded file gives an error
In-Reply-To: <20180501185750.445oub53vcdnyyyx@steph>
References: <20180501185750.445oub53vcdnyyyx@steph>
Message-ID: <CA+vqiLEaZVDgCnJGByna2+Vw8soWFeLMJr9qci1eBtm2puhR2g@mail.gmail.com>

Hi Scott,

This question is appropriate for the r-help mailing list, but probably
off-topic here on r-devel.

Best,
Ista

On Tue, May 1, 2018 at 2:57 PM, Scott Kostyshak <skostyshak at ufl.edu> wrote:
> I have very little knowledge about file encodings and would like to
> learn more.
>
> I've read the following pages to learn more:
>
>   https://urldefense.proofpoint.com/v2/url?u=http-3A__stat.ethz.ch_R-2Dmanual_R-2Ddevel_library_base_html_Encoding.html&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=HegPJMcZ_5R6vYtdQLgIsh-M6ElOlewHPBZxe8IPSlI&e=
>   https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_questions_4806823_how-2Dto-2Ddetect-2Dthe-2Dright-2Dencoding-2Dfor-2Dread-2Dcsv&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=KGDvHJrfkvqbwyKnIiY0V45HtN-W4Rpq4ZBXfIFaFMk&e=
>   https://urldefense.proofpoint.com/v2/url?u=https-3A__developer.r-2Dproject.org_Encodings-5Fand-5FR.html&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=Ka1kGiCw3w22tOLfA50AyrKsMT-La14TQdutJJkdE04&e=
>
> The last one, in particular, has been very helpful. I would be
> interested in any further references that you suggest.
>
> I attach a file that reproduces the issue I would like to learn more
> about. I do not know if the file encoding will be correctly preserved
> through email, so I also provide the file (temporarily) on Dropbox here:
>
>   https://urldefense.proofpoint.com/v2/url?u=https-3A__www.dropbox.com_s_3lbgebk7b5uaia7_encoding-5Fexport-5Fissue.R-3Fdl-3D0&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=58a7qB9IHt3s2ZLDglGEHwWARuo8xvSlH_z8G5jDaUY&e=
>
> The file gives an error when using "source()" with the
> argument echo = TRUE:
>
>   > source("encoding_export_issue.R", echo = TRUE)
>   Error in nchar(dep, "c") : invalid multibyte string, element 1
>   In addition: Warning message:
>   In grepl("^[[:blank:]]*$", dep[1L]) :
>     input string 1 is invalid in this locale
>
> The problem comes from the "?" character in the .R file. The file
> appears to be encoded as "iso-8859-1":
>
>   $ file --mime-encoding encoding_export_issue.R
>   encoding_export_issue.R: iso-8859-1
>
> Note that for me:
>
>   > getOption("encoding")
>   [1] "native.enc"
>
> so "native.enc" is used for the "encoding" argument of source().
>
> The following two calls succeed:
>
>   > source("encoding_export_issue.R", echo = TRUE, encoding = "unknown")
>   > source("encoding_export_issue.R", echo = TRUE, encoding = "iso-8859-1")
>
> Is this file a valid "iso-8859-1" encoded file?  Why does source() fail
> in the case of encoding set to "native.enc"? Is it because of the
> settings to UTF-8 in my locale (see info on my system at the bottom of
> this email).
>
> I'm guessing it would be a bad idea to put
>
>   options(encoding = "unknown")
>
> in my .Rprofile, because it is difficult to always correctly guess the
> encoding of files? Is there a reason why setting it to "unknown" would
> lead to more problems than leaving it set to "native.enc"?
>
> I've reproduced the above behavior on R-devel (r74677) and 3.4.3. Below
> is my session info and locale info for my system with the 3.4.3 version:
>
>> sessionInfo()
> R version 3.4.3 (2017-11-30)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 16.04.3 LTS
>
> Matrix products: default
> BLAS: /usr/lib/libblas/libblas.so.3.6.0
> LAPACK: /usr/lib/lapack/liblapack.so.3.6.0
>
> locale:
>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.4.3
>
>> Sys.getlocale()
> [1] "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C"
>
> Thanks for your time,
>
> Scott
>
>
> --
> Scott Kostyshak
> Assistant Professor of Economics
> University of Florida
> https://people.clas.ufl.edu/skostyshak/
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



From m@echler @ending from @t@t@m@th@ethz@ch  Tue May  1 22:15:36 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 1 May 2018 22:15:36 +0200
Subject: [Rd] issue with model.frame()
In-Reply-To: <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
 <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
Message-ID: <23272.51944.116829.707510@stat.math.ethz.ch>

>>>>> Berry, Charles <ccberry at ucsd.edu>
>>>>>     on Tue, 1 May 2018 16:43:18 +0000 writes:

    >> On May 1, 2018, at 6:11 AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
    >> 
    >> A user sent me an example where coxph fails, and the root of the failure is a case where names(mf) is not equal to the term.labels attribute of the formula -- the latter has an extraneous newline. Here is an example that does not use the survival library.
    >> 
    >> # first create a data set with many long names
    >> n <- 30  # number of rows for the dummy data set
    >> vname <- vector("character", 26)
    >> for (i in 1:26) vname[i] <- paste(rep(letters[1:i],2), collapse='')  # long variable names
    >> 
    >> tdata <- data.frame(y=1:n, matrix(runif(n*26), nrow=n))
    >> names(tdata) <- c('y', vname)
    >> 
    >> # Use it in a formula
    >> myform <- paste("y ~ cbind(", paste(vname, collapse=", "), ")")
    >> mf <- model.frame(formula(myform), data=tdata)
    >> 
    >> match(attr(terms(mf), "term.labels"), names(mf))   # gives NA
    >> 
    >> ----
    >> 
    >> In the user's case the function is ridge(x1, x2, ....) rather than cbind, but the effect is the same.
    >> Any ideas for a work around?

    > Maybe add a `yourclass' class to mf and dispatch to a model.frame.yourclass method where the width cutoff arg here (around lines 57-58 of model.frame.default) is made larger:

    > varnames <- sapply(vars, function(x) paste(deparse(x, width.cutoff = 500), 
    > collapse = " "))[-1L]

What version of R is that ?  In current versions it is

    varnames <- vapply(vars, deparse2, " ")[-1L]

and deparse2() is a slightly enhanced version of the above
function, again with  'width.cutoff = 500'

*BUT* if you read  help(deparse)  you will learn that 500 is the
upper bound allowed currently.  (and yes, one could consider
increasing that as it has been unchanged in R since the very
beginning (I have checked R version 0.49 from 1997).

On the other hand, deparse2 (and your older code above) do paste
all the parts together  via  collapse = " "  so I don't see
quite yet ...

Martin


    >> Aside: the ridge() function is very simple, it was added as an example to show how a user can add their own penalization to coxph.  I never expected serious use of it.  For this particular user the best answer is to use glmnet instead.   He/she is trying to apply an L2 penalty to a large number of SNP * covariate interactions.
    >> 
    >> Terry T.



    > HTH,

    > Chuck
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel



From ccberry @ending from uc@d@edu  Tue May  1 22:20:35 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Tue, 1 May 2018 20:20:35 +0000
Subject: [Rd] issue with model.frame()
In-Reply-To: <23272.51944.116829.707510@stat.math.ethz.ch>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
 <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
 <23272.51944.116829.707510@stat.math.ethz.ch>
Message-ID: <49E8B791-1588-4825-8DB8-DF6163FC075D@ucsd.edu>



> On May 1, 2018, at 1:15 PM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
> What version of R is that ?

Sorry. It was 3.4.2. But it doesn't matter, because my diagnosis was wrong even there.  I think (based on my reading of my outdated version) the problem is a bit upstream in terms() as I noted in a follow up to the Terry.

>  In current versions it is
> 
>    varnames <- vapply(vars, deparse2, " ")[-1L]
> 
> and deparse2() is a slightly enhanced version of the above
> function, again with  'width.cutoff = 500'
> 
> *BUT* if you read  help(deparse)  you will learn that 500 is the
> upper bound allowed currently.  (and yes, one could consider
> increasing that as it has been unchanged in R since the very
> beginning (I have checked R version 0.49 from 1997).
> 
> On the other hand, deparse2 (and your older code above) do paste
> all the parts together  via  collapse = " "  so I don't see
> quite yet ...
> 

Again, due to my bad diagnosis, I guess.

Chuck


From therne@u @ending from m@yo@edu  Tue May  1 23:09:44 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 01 May 2018 16:09:44 -0500
Subject: [Rd] issue with model.frame()
In-Reply-To: <23272.51944.116829.707510@stat.math.ethz.ch>
References: <bb6fa2$9b935h@ironport10.mayo.edu>
 <EF41437C-933A-44C7-86C0-992953B39E9E@ucsd.edu>
 <23272.51944.116829.707510@stat.math.ethz.ch>
Message-ID: <bb6fa2$9beirt@ironport10.mayo.edu>

I want to add that the priority for this is rather low, since we have a couple of work 
arounds for the user/data set in question.  I have some ideas about changing the way in 
which ridge() works, which might make the problem moot.  The important short-term result 
was finding that it wasn't an error of mine in the survival package. :-)

Add it to your "think about it" list.

Terry


On 05/01/2018 03:15 PM, Martin Maechler wrote:
> What version of R is that ?  In current versions it is
> 
>      varnames <- vapply(vars, deparse2, " ")[-1L]
> 
> and deparse2() is a slightly enhanced version of the above
> function, again with  'width.cutoff = 500'
> 
> *BUT*  if you read  help(deparse)  you will learn that 500 is the
> upper bound allowed currently.  (and yes, one could consider
> increasing that as it has been unchanged in R since the very
> beginning (I have checked R version 0.49 from 1997).
> 
> On the other hand, deparse2 (and your older code above) do paste
> all the parts together  via  collapse = " "  so I don't see
> quite yet ...
> 
> Martin



From hugh@p@r@on@ge @ending from gm@il@com  Thu May  3 05:58:34 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Thu, 3 May 2018 13:58:34 +1000
Subject: [Rd] Proposed speedup of ifelse
Message-ID: <CAJmOi+MMfdGfqm+BmYfpToqLsSM9Bu5fE7j6e9i7+PuaVExKRw@mail.gmail.com>

I propose a patch to ifelse that leverages anyNA(test) to achieve an
improvement in performance. For a test vector of length 10, the change
nearly halves the time taken and for a test of length 1 million, there
is a tenfold increase in speed. Even for small vectors, the
distributions of timings between the old and the proposed ifelse do
not intersect.

The patch does not intend to change the behaviour of ifelse (i.e. it
is intended to be a drop-in replacement). However, the patch
inadvertently corrects what I believe to be a bug in the release
version of ifelse: the documentation says that attributes of test are
kept; however, this is not true unless test is atomic.

  library(Matrix)
  M <- Matrix(-10 + 1:28, 4, 7)
  ifelse(M, 1, 2)

The performance improvement does not rely on this, however; so if
current behaviour in these cases is intended, the patch can be
trivially amended to reflect this.

I've written up a short note detailing the performance improvements
and some unit tests at
https://hughparsonage.github.io/content/post/A-new-ifelse.html


Best

Hugh Parsonage


From hugh@p@r@on@ge @ending from gm@il@com  Thu May  3 06:13:03 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Thu, 3 May 2018 14:13:03 +1000
Subject: [Rd] Proposed speedup of ifelse
In-Reply-To: <CAJmOi+MMfdGfqm+BmYfpToqLsSM9Bu5fE7j6e9i7+PuaVExKRw@mail.gmail.com>
References: <CAJmOi+MMfdGfqm+BmYfpToqLsSM9Bu5fE7j6e9i7+PuaVExKRw@mail.gmail.com>
Message-ID: <CAJmOi+No5YCP3kjYYtuv4TWh=y3jYxj0Tb6Zng+SOoy1g=q7YA@mail.gmail.com>

And the patch itself:


--- a/src/library/base/R/ifelse.R
+++ b/src/library/base/R/ifelse.R
@@ -18,12 +18,14 @@

 ifelse <- function (test, yes, no)
 {
+  attributes_of_test <- attributes(test)
+
   if(is.atomic(test)) { # do not lose attributes
     if (typeof(test) != "logical")
       storage.mode(test) <- "logical"
     ## quick return for cases where 'ifelse(a, x, y)' is used
     ## instead of 'if (a) x else y'
-        if (length(test) == 1 && is.null(attributes(test))) {
+    if (length(test) == 1 && is.null(attributes_of_test)) {
       if (is.na(test)) return(NA)
       else if (test) {
         if (length(yes) == 1) {
@@ -43,6 +45,62 @@ ifelse <- function (test, yes, no)
   }
   else ## typically a "class"; storage.mode<-() typically fails
     test <- if(isS4(test)) methods::as(test, "logical") else as.logical(test)
+
+  # Give up attempting backwards-compatibility under these conditions:
+  if (typeof(yes) %in% c("logical", "integer", "double", "character") &&
+      typeof(no)  %in% c("logical", "integer", "double", "character") &&
+      !is.factor(yes) &&
+      !is.factor(no) &&
+      length(no) != 0L &&
+      length(yes) != 0L) {
+    if (length(no) == length(test)) {
+      out <- no
+    } else if (length(no) == 1L) {
+      out <- rep_len(no, length(test))
+    } else if (length(no) != 0L) {
+      out <- rep_len(no[1L], length(test))
+    } else {
+      return(.ifelse(test, yes, no))
+    }
+
+    if (length(yes) != 1L && length(yes) != length(test)) {
+      return(.ifelse(test, yes, no))
+    }
+
+
+    if (anyNA(test)) {
+      # no benefit to saving the na results
+      Yes <- which(test)
+      out[is.na(test)] <- NA
+      if (length(yes) == 1L) {
+        out[Yes] <- yes
+      } else if (length(yes) == length(test)) {
+        out[Yes] <- yes[Yes]
+      } else {
+        return(.ifelse(test, yes, no))
+      }
+    } else {
+      # No NAs to deal with
+      if (length(yes) == 1L) {
+        out[test] <- yes
+      } else if (length(yes) == length(test)) {
+        wtest <- which(test) # faster than test directly
+        out[wtest] <- yes[wtest]
+      } else {
+        return(.ifelse(test, yes, no))
+      }
+    }
+    if (!is.null(attributes_of_test)) {
+      attributes(out) <- attributes_of_test
+    }
+
+    out
+  } else {
+    return(.ifelse(test, yes, no))
+  }
+}
+
+.ifelse <- function(test, yes, no) {
   ans <- test
   ok <- !is.na(test)
   if (any(test[ok]))

On 3 May 2018 at 13:58, Hugh Parsonage <hugh.parsonage at gmail.com> wrote:
> I propose a patch to ifelse that leverages anyNA(test) to achieve an
> improvement in performance. For a test vector of length 10, the change
> nearly halves the time taken and for a test of length 1 million, there
> is a tenfold increase in speed. Even for small vectors, the
> distributions of timings between the old and the proposed ifelse do
> not intersect.
>
> The patch does not intend to change the behaviour of ifelse (i.e. it
> is intended to be a drop-in replacement). However, the patch
> inadvertently corrects what I believe to be a bug in the release
> version of ifelse: the documentation says that attributes of test are
> kept; however, this is not true unless test is atomic.
>
>   library(Matrix)
>   M <- Matrix(-10 + 1:28, 4, 7)
>   ifelse(M, 1, 2)
>
> The performance improvement does not rely on this, however; so if
> current behaviour in these cases is intended, the patch can be
> trivially amended to reflect this.
>
> I've written up a short note detailing the performance improvements
> and some unit tests at
> https://hughparsonage.github.io/content/post/A-new-ifelse.html
>
>
> Best
>
> Hugh Parsonage



From jori@mey@ @ending from gm@il@com  Wed May  2 21:21:47 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Wed, 2 May 2018 21:21:47 +0200
Subject: [Rd] download.file does not process gz files correctly (truncates
 them?)
Message-ID: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>

Dear all,

I've noticed by trying to download gz files from here :
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811

At the bottom one can download GSM907811.CEL.gz . If I download this
manually and try

oligo::read.celfiles("GSM907811.CEL.gz")

everything works fine. (oligo is a bioConductor package)

However, if I download using

download.file("
https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907811&format=file&file=GSM907811%2ECEL%2Egz
",
              destfile = "GSM907811.CEL.gz")

The file is downloaded, but oligo::read.celfiles() returns the following
error:

Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
  End of gz file reached unexpectedly. Perhaps this file is truncated.

Moreover, if I try to delete it after using download.file(), I get a
warning that permission is denied. I can only remove it using Windows file
explorer after I closed the R session, indicating that the connection is
still open. Yet, showConnections() doesn't show any open connections either.

Session info below. Note that I started from a completely fresh R session.
oligo is needed due to the specific file format of these gz files. They're
not standard tarred files.

Cheers
Joris

Session Info
-------------------------------------------------------------------------------------

R version 3.5.0 (2018-04-23)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
Kingdom.1252
[3] LC_MONETARY=English_United Kingdom.1252
LC_NUMERIC=C
[5] LC_TIME=English_United Kingdom.1252

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets
methods
[9] base

other attached packages:
 [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
oligo_1.44.0
 [4] Biobase_2.39.2             oligoClasses_1.42.0
RSQLite_2.1.0
 [7] Biostrings_2.48.0          XVector_0.19.9
IRanges_2.13.28
[10] S4Vectors_0.17.42          BiocGenerics_0.25.3

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16                compiler_3.5.0
 [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
 [5] bitops_1.0-6                iterators_1.0.9
 [7] tools_3.5.0                 zlibbioc_1.25.0
 [9] digest_0.6.15               bit_1.1-12
[11] memoise_1.1.0               preprocessCore_1.41.0
[13] lattice_0.20-35             ff_2.2-13
[15] pkgconfig_2.0.1             Matrix_1.2-14
[17] foreach_1.4.4               DelayedArray_0.5.31
[19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
[21] affxparser_1.52.0           bit64_0.9-7
[23] grid_3.5.0                  BiocParallel_1.13.3
[25] blob_1.1.1                  codetools_0.2-15
[27] matrixStats_0.53.1          GenomicRanges_1.31.23
[29] splines_3.5.0               SummarizedExperiment_1.9.17
[31] RCurl_1.95-4.10             affyio_1.49.2


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]



From jori@mey@ @ending from gm@il@com  Thu May  3 14:15:06 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 3 May 2018 14:15:06 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <9fe63a57-6279-dd41-a24d-311e88d7a081@roswellpark.org>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <9fe63a57-6279-dd41-a24d-311e88d7a081@roswellpark.org>
Message-ID: <CAO1zAVYj3b_78vQK3R_rWrxYw2bOLeJBdM487Z6hnuOCs+BHiQ@mail.gmail.com>

Using the correct mode absolutely solves it. Apologies for not trying the
obvious.

Cheers
Joris

On Thu, May 3, 2018 at 2:10 PM, Martin Morgan <martin.morgan at roswellpark.org
> wrote:

>
>
> On 05/02/2018 03:21 PM, Joris Meys wrote:
>
>> Dear all,
>>
>> I've noticed by trying to download gz files from here :
>> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811
>>
>> At the bottom one can download GSM907811.CEL.gz . If I download this
>> manually and try
>>
>> oligo::read.celfiles("GSM907811.CEL.gz")
>>
>> everything works fine. (oligo is a bioConductor package)
>>
>> However, if I download using
>>
>> download.file("
>> https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907811&for
>> mat=file&file=GSM907811%2ECEL%2Egz
>> ",
>>                destfile = "GSM907811.CEL.gz")
>>
>
> On windows, the 'mode' argument to download.file() needs to be "wb" (write
> binary) for binary files.
>
> Martin
>
>
>> The file is downloaded, but oligo::read.celfiles() returns the following
>> error:
>>
>> Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
>>    End of gz file reached unexpectedly. Perhaps this file is truncated.
>>
>> Moreover, if I try to delete it after using download.file(), I get a
>> warning that permission is denied. I can only remove it using Windows file
>> explorer after I closed the R session, indicating that the connection is
>> still open. Yet, showConnections() doesn't show any open connections
>> either.
>>
>> Session info below. Note that I started from a completely fresh R session.
>> oligo is needed due to the specific file format of these gz files. They're
>> not standard tarred files.
>>
>> Cheers
>> Joris
>>
>> Session Info
>> ------------------------------------------------------------
>> -------------------------
>>
>> R version 3.5.0 (2018-04-23)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows >= 8 x64 (build 9200)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
>> Kingdom.1252
>> [3] LC_MONETARY=English_United Kingdom.1252
>> LC_NUMERIC=C
>> [5] LC_TIME=English_United Kingdom.1252
>>
>> attached base packages:
>> [1] stats4    parallel  stats     graphics  grDevices utils     datasets
>> methods
>> [9] base
>>
>> other attached packages:
>>   [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
>> oligo_1.44.0
>>   [4] Biobase_2.39.2             oligoClasses_1.42.0
>> RSQLite_2.1.0
>>   [7] Biostrings_2.48.0          XVector_0.19.9
>> IRanges_2.13.28
>> [10] S4Vectors_0.17.42          BiocGenerics_0.25.3
>>
>> loaded via a namespace (and not attached):
>>   [1] Rcpp_0.12.16                compiler_3.5.0
>>   [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
>>   [5] bitops_1.0-6                iterators_1.0.9
>>   [7] tools_3.5.0                 zlibbioc_1.25.0
>>   [9] digest_0.6.15               bit_1.1-12
>> [11] memoise_1.1.0               preprocessCore_1.41.0
>> [13] lattice_0.20-35             ff_2.2-13
>> [15] pkgconfig_2.0.1             Matrix_1.2-14
>> [17] foreach_1.4.4               DelayedArray_0.5.31
>> [19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
>> [21] affxparser_1.52.0           bit64_0.9-7
>> [23] grid_3.5.0                  BiocParallel_1.13.3
>> [25] blob_1.1.1                  codetools_0.2-15
>> [27] matrixStats_0.53.1          GenomicRanges_1.31.23
>> [29] splines_3.5.0               SummarizedExperiment_1.9.17
>> [31] RCurl_1.95-4.10             affyio_1.49.2
>>
>>
>>
>
> This email message may contain legally privileged and/or confidential
> information.  If you are not the intended recipient(s), or the employee or
> agent responsible for the delivery of this message to the intended
> recipient(s), you are hereby notified that any disclosure, copying,
> distribution, or use of this email message is prohibited.  If you have
> received this message in error, please notify the sender immediately by
> e-mail and delete this email message from your computer. Thank you.
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]



From m@rtin@morg@n @ending from ro@wellp@rk@org  Thu May  3 14:10:49 2018
From: m@rtin@morg@n @ending from ro@wellp@rk@org (Martin Morgan)
Date: Thu, 3 May 2018 08:10:49 -0400
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
Message-ID: <9fe63a57-6279-dd41-a24d-311e88d7a081@roswellpark.org>



On 05/02/2018 03:21 PM, Joris Meys wrote:
> Dear all,
> 
> I've noticed by trying to download gz files from here :
> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811
> 
> At the bottom one can download GSM907811.CEL.gz . If I download this
> manually and try
> 
> oligo::read.celfiles("GSM907811.CEL.gz")
> 
> everything works fine. (oligo is a bioConductor package)
> 
> However, if I download using
> 
> download.file("
> https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907811&format=file&file=GSM907811%2ECEL%2Egz
> ",
>                destfile = "GSM907811.CEL.gz")

On windows, the 'mode' argument to download.file() needs to be "wb" 
(write binary) for binary files.

Martin

> 
> The file is downloaded, but oligo::read.celfiles() returns the following
> error:
> 
> Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
>    End of gz file reached unexpectedly. Perhaps this file is truncated.
> 
> Moreover, if I try to delete it after using download.file(), I get a
> warning that permission is denied. I can only remove it using Windows file
> explorer after I closed the R session, indicating that the connection is
> still open. Yet, showConnections() doesn't show any open connections either.
> 
> Session info below. Note that I started from a completely fresh R session.
> oligo is needed due to the specific file format of these gz files. They're
> not standard tarred files.
> 
> Cheers
> Joris
> 
> Session Info
> -------------------------------------------------------------------------------------
> 
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows >= 8 x64 (build 9200)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
> Kingdom.1252
> [3] LC_MONETARY=English_United Kingdom.1252
> LC_NUMERIC=C
> [5] LC_TIME=English_United Kingdom.1252
> 
> attached base packages:
> [1] stats4    parallel  stats     graphics  grDevices utils     datasets
> methods
> [9] base
> 
> other attached packages:
>   [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
> oligo_1.44.0
>   [4] Biobase_2.39.2             oligoClasses_1.42.0
> RSQLite_2.1.0
>   [7] Biostrings_2.48.0          XVector_0.19.9
> IRanges_2.13.28
> [10] S4Vectors_0.17.42          BiocGenerics_0.25.3
> 
> loaded via a namespace (and not attached):
>   [1] Rcpp_0.12.16                compiler_3.5.0
>   [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
>   [5] bitops_1.0-6                iterators_1.0.9
>   [7] tools_3.5.0                 zlibbioc_1.25.0
>   [9] digest_0.6.15               bit_1.1-12
> [11] memoise_1.1.0               preprocessCore_1.41.0
> [13] lattice_0.20-35             ff_2.2-13
> [15] pkgconfig_2.0.1             Matrix_1.2-14
> [17] foreach_1.4.4               DelayedArray_0.5.31
> [19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
> [21] affxparser_1.52.0           bit64_0.9-7
> [23] grid_3.5.0                  BiocParallel_1.13.3
> [25] blob_1.1.1                  codetools_0.2-15
> [27] matrixStats_0.53.1          GenomicRanges_1.31.23
> [29] splines_3.5.0               SummarizedExperiment_1.9.17
> [31] RCurl_1.95-4.10             affyio_1.49.2
> 
> 


This email message may contain legally privileged and/or...{{dropped:2}}



From henrik@bengt@@on @ending from gm@il@com  Thu May  3 14:42:08 2018
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Thu, 03 May 2018 12:42:08 +0000
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
Message-ID: <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>

Use mode="wb" when you download the file. See
https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.

R core, and others, is there a good argument for why we are not making this
the default download mode? It seems like a such a simple fix to such a
common "mistake".

Henrik

On Thu, May 3, 2018, 00:44 Joris Meys <jorismeys at gmail.com> wrote:

> Dear all,
>
> I've noticed by trying to download gz files from here :
> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811
>
> At the bottom one can download GSM907811.CEL.gz . If I download this
> manually and try
>
> oligo::read.celfiles("GSM907811.CEL.gz")
>
> everything works fine. (oligo is a bioConductor package)
>
> However, if I download using
>
> download.file("
>
> https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907811&format=file&file=GSM907811%2ECEL%2Egz
> ",
>               destfile = "GSM907811.CEL.gz")
>
> The file is downloaded, but oligo::read.celfiles() returns the following
> error:
>
> Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
>   End of gz file reached unexpectedly. Perhaps this file is truncated.
>
> Moreover, if I try to delete it after using download.file(), I get a
> warning that permission is denied. I can only remove it using Windows file
> explorer after I closed the R session, indicating that the connection is
> still open. Yet, showConnections() doesn't show any open connections
> either.
>
> Session info below. Note that I started from a completely fresh R session.
> oligo is needed due to the specific file format of these gz files. They're
> not standard tarred files.
>
> Cheers
> Joris
>
> Session Info
>
> -------------------------------------------------------------------------------------
>
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows >= 8 x64 (build 9200)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
> Kingdom.1252
> [3] LC_MONETARY=English_United Kingdom.1252
> LC_NUMERIC=C
> [5] LC_TIME=English_United Kingdom.1252
>
> attached base packages:
> [1] stats4    parallel  stats     graphics  grDevices utils     datasets
> methods
> [9] base
>
> other attached packages:
>  [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
> oligo_1.44.0
>  [4] Biobase_2.39.2             oligoClasses_1.42.0
> RSQLite_2.1.0
>  [7] Biostrings_2.48.0          XVector_0.19.9
> IRanges_2.13.28
> [10] S4Vectors_0.17.42          BiocGenerics_0.25.3
>
> loaded via a namespace (and not attached):
>  [1] Rcpp_0.12.16                compiler_3.5.0
>  [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
>  [5] bitops_1.0-6                iterators_1.0.9
>  [7] tools_3.5.0                 zlibbioc_1.25.0
>  [9] digest_0.6.15               bit_1.1-12
> [11] memoise_1.1.0               preprocessCore_1.41.0
> [13] lattice_0.20-35             ff_2.2-13
> [15] pkgconfig_2.0.1             Matrix_1.2-14
> [17] foreach_1.4.4               DelayedArray_0.5.31
> [19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
> [21] affxparser_1.52.0           bit64_0.9-7
> [23] grid_3.5.0                  BiocParallel_1.13.3
> [25] blob_1.1.1                  codetools_0.2-15
> [27] matrixStats_0.53.1          GenomicRanges_1.31.23
> [29] splines_3.5.0               SummarizedExperiment_1.9.17
> [31] RCurl_1.95-4.10             affyio_1.49.2
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
> <
> https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g
> >
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]



From jori@mey@ @ending from gm@il@com  Thu May  3 11:48:37 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 3 May 2018 11:48:37 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
Message-ID: <CAO1zAVZevsHQkZbvOpN4ZwPfiMEoLWMA=8tfwg0pcaHoYhmfJA@mail.gmail.com>

Dear all,

I've been diving a bit deeper into this per request of Tomas Kalibra, and
found the following :

- the lock on the file is only after trying to read it using oligo, so
that's not a R problem in itself. The problem is independent of extrenal
packages.

- using Windows' fc utility and cygwin's cmp utility I found out that every
so often the download.file() function inserts an extra byte. There's no
real obvious pattern in how these bytes are added, but the file downloaded
using download.file() is actually larger (in this case by about 8 kb). The
file xxx_inR.CEL.gz is read in using:

setwd("E:/Temp/genexpr/Compare")
id <- "GSM907854"
flink <- paste0("
https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907854&format=file&file=GSM907854%2ECEL%2Egz
")
fname <- paste0(id,"_inR.CEL.gz")
download.file(flink,
              destfile = fname)

The file xxx_direct.CEL.gz is downloaded from
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907854 (download link
at the bottom of the page).

Output of dir in CMD:

05/03/2018  11:02 AM         4,529,547 GSM907854_direct.CEL.gz
05/03/2018  11:17 AM         4,537,668 GSM907854_inR.CEL.gz

or from R :

> diff(file.size(dir())) # contains both CEL files.
[1] 8121

Strangely enough I get the following message from download.file() :

Content type 'application/octet-stream' length 4529547 bytes (4.3 MB)
downloaded 4.3 MB

So the reported length is exactly the same as if I would download the file
directly, but the file on disk itself is larger. So it seems
download.file() is adding bytes when saving the data on disk.  This
behaviour is independent of antivirus and/or firewalls turned on or off.

Also keep in mind that these are NOT standard gzipped files. These files
are a specific format for Affymetrix Human Gene 1.0 ST Arrays.

If I need to run other tests, please let me know.
Kind regards

Joris

On Wed, May 2, 2018 at 9:21 PM, Joris Meys <jorismeys at gmail.com> wrote:

> Dear all,
>
> I've noticed by trying to download gz files from here :
> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811
>
> At the bottom one can download GSM907811.CEL.gz . If I download this
> manually and try
>
> oligo::read.celfiles("GSM907811.CEL.gz")
>
> everything works fine. (oligo is a bioConductor package)
>
> However, if I download using
>
> download.file("https://www.ncbi.nlm.nih.gov/geo/download/
> ?acc=GSM907811&format=file&file=GSM907811%2ECEL%2Egz",
>               destfile = "GSM907811.CEL.gz")
>
> The file is downloaded, but oligo::read.celfiles() returns the following
> error:
>
> Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
>   End of gz file reached unexpectedly. Perhaps this file is truncated.
>
> Moreover, if I try to delete it after using download.file(), I get a
> warning that permission is denied. I can only remove it using Windows file
> explorer after I closed the R session, indicating that the connection is
> still open. Yet, showConnections() doesn't show any open connections either.
>
> Session info below. Note that I started from a completely fresh R session.
> oligo is needed due to the specific file format of these gz files. They're
> not standard tarred files.
>
> Cheers
> Joris
>
> Session Info
> ------------------------------------------------------------
> -------------------------
>
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows >= 8 x64 (build 9200)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
> Kingdom.1252
> [3] LC_MONETARY=English_United Kingdom.1252 LC_NUMERIC=C
>
> [5] LC_TIME=English_United Kingdom.1252
>
> attached base packages:
> [1] stats4    parallel  stats     graphics  grDevices utils     datasets
> methods
> [9] base
>
> other attached packages:
>  [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
> oligo_1.44.0
>  [4] Biobase_2.39.2             oligoClasses_1.42.0
> RSQLite_2.1.0
>  [7] Biostrings_2.48.0          XVector_0.19.9
> IRanges_2.13.28
> [10] S4Vectors_0.17.42          BiocGenerics_0.25.3
>
> loaded via a namespace (and not attached):
>  [1] Rcpp_0.12.16                compiler_3.5.0
>  [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
>  [5] bitops_1.0-6                iterators_1.0.9
>  [7] tools_3.5.0                 zlibbioc_1.25.0
>  [9] digest_0.6.15               bit_1.1-12
> [11] memoise_1.1.0               preprocessCore_1.41.0
> [13] lattice_0.20-35             ff_2.2-13
> [15] pkgconfig_2.0.1             Matrix_1.2-14
> [17] foreach_1.4.4               DelayedArray_0.5.31
> [19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
> [21] affxparser_1.52.0           bit64_0.9-7
> [23] grid_3.5.0                  BiocParallel_1.13.3
> [25] blob_1.1.1                  codetools_0.2-15
> [27] matrixStats_0.53.1          GenomicRanges_1.31.23
> [29] splines_3.5.0               SummarizedExperiment_1.9.17
> [31] RCurl_1.95-4.10             affyio_1.49.2
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
>
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]



From murdoch@dunc@n @ending from gm@il@com  Thu May  3 15:02:23 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 3 May 2018 09:02:23 -0400
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
Message-ID: <01868edb-8827-3d2c-0a5e-b00e5d15dcdd@gmail.com>

On 03/05/2018 8:42 AM, Henrik Bengtsson wrote:
> Use mode="wb" when you download the file. See
> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.
> 
> R core, and others, is there a good argument for why we are not making this
> the default download mode? It seems like a such a simple fix to such a
> common "mistake".

Many downloads are text files (HTML, CSV, etc.), and if those are 
downloaded in binary, a Windows user might end up with a file that 
Notepad can't handle, because it would have Unix-style line endings.
(It's possible Notepad no longer requires CR LF endings; I haven't used 
it in years.  But there are probably other brain-dead Windows programs 
that do.)

Duncan Murdoch


> 
> Henrik
> 
> On Thu, May 3, 2018, 00:44 Joris Meys <jorismeys at gmail.com> wrote:
> 
>> Dear all,
>>
>> I've noticed by trying to download gz files from here :
>> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811
>>
>> At the bottom one can download GSM907811.CEL.gz . If I download this
>> manually and try
>>
>> oligo::read.celfiles("GSM907811.CEL.gz")
>>
>> everything works fine. (oligo is a bioConductor package)
>>
>> However, if I download using
>>
>> download.file("
>>
>> https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907811&format=file&file=GSM907811%2ECEL%2Egz
>> ",
>>                destfile = "GSM907811.CEL.gz")
>>
>> The file is downloaded, but oligo::read.celfiles() returns the following
>> error:
>>
>> Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
>>    End of gz file reached unexpectedly. Perhaps this file is truncated.
>>
>> Moreover, if I try to delete it after using download.file(), I get a
>> warning that permission is denied. I can only remove it using Windows file
>> explorer after I closed the R session, indicating that the connection is
>> still open. Yet, showConnections() doesn't show any open connections
>> either.
>>
>> Session info below. Note that I started from a completely fresh R session.
>> oligo is needed due to the specific file format of these gz files. They're
>> not standard tarred files.
>>
>> Cheers
>> Joris
>>
>> Session Info
>>
>> -------------------------------------------------------------------------------------
>>
>> R version 3.5.0 (2018-04-23)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows >= 8 x64 (build 9200)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
>> Kingdom.1252
>> [3] LC_MONETARY=English_United Kingdom.1252
>> LC_NUMERIC=C
>> [5] LC_TIME=English_United Kingdom.1252
>>
>> attached base packages:
>> [1] stats4    parallel  stats     graphics  grDevices utils     datasets
>> methods
>> [9] base
>>
>> other attached packages:
>>   [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
>> oligo_1.44.0
>>   [4] Biobase_2.39.2             oligoClasses_1.42.0
>> RSQLite_2.1.0
>>   [7] Biostrings_2.48.0          XVector_0.19.9
>> IRanges_2.13.28
>> [10] S4Vectors_0.17.42          BiocGenerics_0.25.3
>>
>> loaded via a namespace (and not attached):
>>   [1] Rcpp_0.12.16                compiler_3.5.0
>>   [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
>>   [5] bitops_1.0-6                iterators_1.0.9
>>   [7] tools_3.5.0                 zlibbioc_1.25.0
>>   [9] digest_0.6.15               bit_1.1-12
>> [11] memoise_1.1.0               preprocessCore_1.41.0
>> [13] lattice_0.20-35             ff_2.2-13
>> [15] pkgconfig_2.0.1             Matrix_1.2-14
>> [17] foreach_1.4.4               DelayedArray_0.5.31
>> [19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
>> [21] affxparser_1.52.0           bit64_0.9-7
>> [23] grid_3.5.0                  BiocParallel_1.13.3
>> [25] blob_1.1.1                  codetools_0.2-15
>> [27] matrixStats_0.53.1          GenomicRanges_1.31.23
>> [29] splines_3.5.0               SummarizedExperiment_1.9.17
>> [31] RCurl_1.95-4.10             affyio_1.49.2
>>
>>
>> --
>> Joris Meys
>> Statistical consultant
>>
>> Department of Data Analysis and Mathematical Modelling
>> Ghent University
>> Coupure Links 653, B-9000 Gent (Belgium)
>> <
>> https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g
>>>
>>
>> -----------
>> Biowiskundedagen 2017-2018
>> http://www.biowiskundedagen.ugent.be/
>>
>> -------------------------------
>> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



From m@rtin@morg@n @ending from ro@wellp@rk@org  Thu May  3 15:40:02 2018
From: m@rtin@morg@n @ending from ro@wellp@rk@org (Martin Morgan)
Date: Thu, 3 May 2018 09:40:02 -0400
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVZevsHQkZbvOpN4ZwPfiMEoLWMA=8tfwg0pcaHoYhmfJA@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAO1zAVZevsHQkZbvOpN4ZwPfiMEoLWMA=8tfwg0pcaHoYhmfJA@mail.gmail.com>
Message-ID: <bcec5226-edaf-a7a8-2e71-06f6492be98c@roswellpark.org>


On 05/03/2018 05:48 AM, Joris Meys wrote:
> Dear all,
> 
> I've been diving a bit deeper into this per request of Tomas Kalibra, and
> found the following :
> 
> - the lock on the file is only after trying to read it using oligo, so
> that's not a R problem in itself. The problem is independent of extrenal
> packages.
> 
> - using Windows' fc utility and cygwin's cmp utility I found out that every
> so often the download.file() function inserts an extra byte. There's no
> real obvious pattern in how these bytes are added, but the file downloaded
> using download.file() is actually larger (in this case by about 8 kb). The
> file xxx_inR.CEL.gz is read in using:

I believe the difference in mode = "w" vs "wb", and the reason this is 
restricted to Windows downloads, is due to the difference in text file 
line endings, where with mode="w", download.file (and many other 
utilities outside R) recognize the "foo\n" as "foo\r\n". Obviously this 
messes up binary files.

I guess in the CEL.gz file there are about 8k "\n" characters.

Henrik's suggestion (default = "wb") would introduce the complementary 
problem -- text files would have incorrect line endings.

Martin



> 
> setwd("E:/Temp/genexpr/Compare")
> id <- "GSM907854"
> flink <- paste0("
> https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSM907854&format=file&file=GSM907854%2ECEL%2Egz
> ")
> fname <- paste0(id,"_inR.CEL.gz")
> download.file(flink,
>                destfile = fname)
> 
> The file xxx_direct.CEL.gz is downloaded from
> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907854 (download link
> at the bottom of the page).
> 
> Output of dir in CMD:
> 
> 05/03/2018  11:02 AM         4,529,547 GSM907854_direct.CEL.gz
> 05/03/2018  11:17 AM         4,537,668 GSM907854_inR.CEL.gz
> 
> or from R :
> 
>> diff(file.size(dir())) # contains both CEL files.
> [1] 8121
> 
> Strangely enough I get the following message from download.file() :
> 
> Content type 'application/octet-stream' length 4529547 bytes (4.3 MB)
> downloaded 4.3 MB
> 
> So the reported length is exactly the same as if I would download the file
> directly, but the file on disk itself is larger. So it seems
> download.file() is adding bytes when saving the data on disk.  This
> behaviour is independent of antivirus and/or firewalls turned on or off.
> 
> Also keep in mind that these are NOT standard gzipped files. These files
> are a specific format for Affymetrix Human Gene 1.0 ST Arrays.
> 
> If I need to run other tests, please let me know.
> Kind regards
> 
> Joris
> 
> On Wed, May 2, 2018 at 9:21 PM, Joris Meys <jorismeys at gmail.com> wrote:
> 
>> Dear all,
>>
>> I've noticed by trying to download gz files from here :
>> https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM907811
>>
>> At the bottom one can download GSM907811.CEL.gz . If I download this
>> manually and try
>>
>> oligo::read.celfiles("GSM907811.CEL.gz")
>>
>> everything works fine. (oligo is a bioConductor package)
>>
>> However, if I download using
>>
>> download.file("https://www.ncbi.nlm.nih.gov/geo/download/
>> ?acc=GSM907811&format=file&file=GSM907811%2ECEL%2Egz",
>>                destfile = "GSM907811.CEL.gz")
>>
>> The file is downloaded, but oligo::read.celfiles() returns the following
>> error:
>>
>> Error in checkChipTypes(filenames, verbose, "affymetrix", TRUE) :
>>    End of gz file reached unexpectedly. Perhaps this file is truncated.
>>
>> Moreover, if I try to delete it after using download.file(), I get a
>> warning that permission is denied. I can only remove it using Windows file
>> explorer after I closed the R session, indicating that the connection is
>> still open. Yet, showConnections() doesn't show any open connections either.
>>
>> Session info below. Note that I started from a completely fresh R session.
>> oligo is needed due to the specific file format of these gz files. They're
>> not standard tarred files.
>>
>> Cheers
>> Joris
>>
>> Session Info
>> ------------------------------------------------------------
>> -------------------------
>>
>> R version 3.5.0 (2018-04-23)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows >= 8 x64 (build 9200)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United
>> Kingdom.1252
>> [3] LC_MONETARY=English_United Kingdom.1252 LC_NUMERIC=C
>>
>> [5] LC_TIME=English_United Kingdom.1252
>>
>> attached base packages:
>> [1] stats4    parallel  stats     graphics  grDevices utils     datasets
>> methods
>> [9] base
>>
>> other attached packages:
>>   [1] pd.hugene.1.0.st.v1_3.14.1 DBI_0.8
>> oligo_1.44.0
>>   [4] Biobase_2.39.2             oligoClasses_1.42.0
>> RSQLite_2.1.0
>>   [7] Biostrings_2.48.0          XVector_0.19.9
>> IRanges_2.13.28
>> [10] S4Vectors_0.17.42          BiocGenerics_0.25.3
>>
>> loaded via a namespace (and not attached):
>>   [1] Rcpp_0.12.16                compiler_3.5.0
>>   [3] BiocInstaller_1.30.0        GenomeInfoDb_1.15.5
>>   [5] bitops_1.0-6                iterators_1.0.9
>>   [7] tools_3.5.0                 zlibbioc_1.25.0
>>   [9] digest_0.6.15               bit_1.1-12
>> [11] memoise_1.1.0               preprocessCore_1.41.0
>> [13] lattice_0.20-35             ff_2.2-13
>> [15] pkgconfig_2.0.1             Matrix_1.2-14
>> [17] foreach_1.4.4               DelayedArray_0.5.31
>> [19] yaml_2.1.18                 GenomeInfoDbData_1.1.0
>> [21] affxparser_1.52.0           bit64_0.9-7
>> [23] grid_3.5.0                  BiocParallel_1.13.3
>> [25] blob_1.1.1                  codetools_0.2-15
>> [27] matrixStats_0.53.1          GenomicRanges_1.31.23
>> [29] splines_3.5.0               SummarizedExperiment_1.9.17
>> [31] RCurl_1.95-4.10             affyio_1.49.2
>>
>>
>> --
>> Joris Meys
>> Statistical consultant
>>
>> Department of Data Analysis and Mathematical Modelling
>> Ghent University
>> Coupure Links 653, B-9000 Gent (Belgium)
>>
>> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>>
>> -----------
>> Biowiskundedagen 2017-2018
>> http://www.biowiskundedagen.ugent.be/
>>
>> -------------------------------
>> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>>
> 
> 
> 


This email message may contain legally privileged and/or...{{dropped:2}}



From jeroenoom@ @ending from gm@il@com  Thu May  3 16:21:40 2018
From: jeroenoom@ @ending from gm@il@com (Jeroen Ooms)
Date: Thu, 3 May 2018 16:21:40 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
Message-ID: <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>

On Thu, May 3, 2018 at 2:42 PM, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
> Use mode="wb" when you download the file. See
> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.
>
> R core, and others, is there a good argument for why we are not making this
> the default download mode? It seems like a such a simple fix to such a
> common "mistake".

I'd like to second this feature request. This default behaviour is
unexpected and often leads to r scripts that were written on
mac/linux, to produce corrupted files on windows, checksum mismatches,
etc.

Even for text files, the default should be to download the file as-is.
Trying to "fix" line-endings should be opt-in, never the default.
Downloading a file via a browser or ftp client on windows also doesn't
change the file, why should R?


On Thu, May 3, 2018 at 3:02 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> Many downloads are text files (HTML, CSV, etc.), and if those are downloaded
> in binary, a Windows user might end up with a file that Notepad can't
> handle, because it would have Unix-style line endings.

True but I don't think this is relevant. The same holds e.g. for the R
files in source packages, which also have unix line endings. Most
Windows users will use an actual editor that understands both types of
line endings, or can convert between the two.

Downloading-file should do just that.



From jori@mey@ @ending from gm@il@com  Thu May  3 16:27:50 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 3 May 2018 16:27:50 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
Message-ID: <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>

Thank you Henrik and Martin for explaining what was going on. Very
insightful!

On Thu, May 3, 2018 at 4:21 PM, Jeroen Ooms <jeroenooms at gmail.com> wrote:

> On Thu, May 3, 2018 at 2:42 PM, Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
> > Use mode="wb" when you download the file. See
> > https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.
> >
> > R core, and others, is there a good argument for why we are not making
> this
> > the default download mode? It seems like a such a simple fix to such a
> > common "mistake".
>
> I'd like to second this feature request. This default behaviour is
> unexpected and often leads to r scripts that were written on
> mac/linux, to produce corrupted files on windows, checksum mismatches,
> etc.
>
> Even for text files, the default should be to download the file as-is.
> Trying to "fix" line-endings should be opt-in, never the default.
> Downloading a file via a browser or ftp client on windows also doesn't
> change the file, why should R?
>

I third the feature request.


>
>
> On Thu, May 3, 2018 at 3:02 PM, Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> > Many downloads are text files (HTML, CSV, etc.), and if those are
> downloaded
> > in binary, a Windows user might end up with a file that Notepad can't
> > handle, because it would have Unix-style line endings.
>
> True but I don't think this is relevant. The same holds e.g. for the R
> files in source packages, which also have unix line endings. Most
> Windows users will use an actual editor that understands both types of
> line endings, or can convert between the two.
>
> Downloading-file should do just that.
>

Again, I agree. In my (limited) experience the only program that fails to
properly display \n as a line ending, is Notepad. But it can still open the
file regardless. If line ending conflicts cause bugs, it's almost always a
unix-like OS struggling with Windows-style endings. I have yet to meet the
first one the other way around.

Cheers
Joris


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]



From toth@dene@ @ending from kogentum@hu  Thu May  3 16:29:28 2018
From: toth@dene@ @ending from kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Thu, 3 May 2018 16:29:28 +0200
Subject: [Rd] length of `...`
Message-ID: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>

Hi,


In some cases the number of arguments passed as ... must be determined 
inside a function, without evaluating the arguments themselves. I use 
the following construct:

dotlength <- function(...) length(substitute(expression(...))) - 1L

# Usage (returns 3):
dotlength(1, 4, something = undefined)

How can I define a method for length() which could be called directly on 
`...`? Or is it an intention to extend the base length() function to 
accept ellipses?


Regards,
Denes



From m@rk@v@nderloo @ending from gm@il@com  Thu May  3 16:52:19 2018
From: m@rk@v@nderloo @ending from gm@il@com (Mark van der Loo)
Date: Thu, 03 May 2018 14:52:19 +0000
Subject: [Rd] length of `...`
In-Reply-To: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
Message-ID: <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>

This question is better aimed at the r-help mailinglist as it is not about
developing R itself.


having said that,

I can only gues why you want to do this, but why not do something like this:


f <- function(...){
   L <- list(...)
   len <- length()
  # you can stll pass the ... as follows:
  do.call(someotherfunction, L)

}


-Mark

Op do 3 mei 2018 om 16:29 schreef D?nes T?th <toth.denes at kogentum.hu>:

> Hi,
>
>
> In some cases the number of arguments passed as ... must be determined
> inside a function, without evaluating the arguments themselves. I use
> the following construct:
>
> dotlength <- function(...) length(substitute(expression(...))) - 1L
>
> # Usage (returns 3):
> dotlength(1, 4, something = undefined)
>
> How can I define a method for length() which could be called directly on
> `...`? Or is it an intention to extend the base length() function to
> accept ellipses?
>
>
> Regards,
> Denes
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]



From r@dford @ending from c@@toronto@edu  Thu May  3 17:01:52 2018
From: r@dford @ending from c@@toronto@edu (Radford Neal)
Date: Thu, 3 May 2018 11:01:52 -0400
Subject: [Rd] Proposed speedup of ifelse
In-Reply-To: <mailman.46997.7.1525341602.26470.r-devel@r-project.org>
References: <mailman.46997.7.1525341602.26470.r-devel@r-project.org>
Message-ID: <20180503150152.GA23984@mail.cs.toronto.edu>

> I propose a patch to ifelse that leverages anyNA(test) to achieve an
> improvement in performance. For a test vector of length 10, the change
> nearly halves the time taken and for a test of length 1 million, there
> is a tenfold increase in speed. Even for small vectors, the
> distributions of timings between the old and the proposed ifelse do
> not intersect.

For smaller vectors, your results are significantly affected by your
invoking the old version via base::ifelse.  You could try defining
your new version as new_ifelse, and invoking the old version as just
ifelse.  There might still be some issues with the two versions having
different context w.r.t environments, and hence looking up functions
in different ways.  You could copy the code of the old version and
define it in the global environment just like new_ifelse.

When using ifelse rather than base::ifelse, it seems the new version
is slower for vectors of length 10, but faster for long vectors.

Also, I'd use system.time rather than microbenchmark.  The latter will
mix invocations of the two functions in a way where it is unclear that
garbage collection time will be fairly attributed.  Also, it's a bit
silly to plot the distributions of times, which will mostly reflect
variations in when garbage collections at various levels occur - just
the mean is what is relevant.

Regards,

   Radford Neal



From wdunl@p @ending from tibco@com  Thu May  3 17:01:53 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Thu, 3 May 2018 08:01:53 -0700
Subject: [Rd] length of `...`
In-Reply-To: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
Message-ID: <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>

In R-3.5.0 you can use ...length():
  > f <- function(..., n) ...length()
  > f(stop("one"), stop("two"), stop("three"), n=7)
  [1] 3

Prior to that substitute() is the way to go
  > g <- function(..., n) length(substitute(...()))
  > g(stop("one"), stop("two"), stop("three"), n=7)
  [1] 3

R-3.5.0 also has the ...elt(n) function, which returns
the evaluated n'th entry in ... , without evaluating the
other ... entries.
  > fn <- function(..., n) ...elt(n)
  > fn(stop("one"), 3*5, stop("three"), n=2)
  [1] 15

Prior to 3.5.0, eval the appropriate component of the output
of substitute() in the appropriate environment:
  > gn <- function(..., n) {
  +   nthExpr <- substitute(...())[[n]]
  +   eval(nthExpr, envir=parent.frame())
  + }
  > gn(stop("one"), environment(), stop("two"), n=2)
  <environment: R_GlobalEnv>




Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Thu, May 3, 2018 at 7:29 AM, D?nes T?th <toth.denes at kogentum.hu> wrote:

> Hi,
>
>
> In some cases the number of arguments passed as ... must be determined
> inside a function, without evaluating the arguments themselves. I use the
> following construct:
>
> dotlength <- function(...) length(substitute(expression(...))) - 1L
>
> # Usage (returns 3):
> dotlength(1, 4, something = undefined)
>
> How can I define a method for length() which could be called directly on
> `...`? Or is it an intention to extend the base length() function to accept
> ellipses?
>
>
> Regards,
> Denes
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]



From becker@g@be @ending from gene@com  Thu May  3 17:00:02 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Thu, 3 May 2018 08:00:02 -0700
Subject: [Rd] length of `...`
In-Reply-To: <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>
Message-ID: <CAMFmJs=+skVenVSFMbQvSDCZofzpESgrvStpOns5m8Ov8tD40g@mail.gmail.com>

As of 3.5.0 the ...length() function does exactly what you are asking for.
Before that, I don't know of an easy way to get the length without
evaluation via R code. There may be one I'm not thinking of though, I
haven't needed to do this myself.

Hope that helps.

~G

On Thu, May 3, 2018 at 7:52 AM, Mark van der Loo <mark.vanderloo at gmail.com>
wrote:

> This question is better aimed at the r-help mailinglist as it is not about
> developing R itself.
>
>
> having said that,
>
> I can only gues why you want to do this, but why not do something like
> this:
>
>
> f <- function(...){
>    L <- list(...)
>    len <- length()
>   # you can stll pass the ... as follows:
>   do.call(someotherfunction, L)
>
> }
>
>
> -Mark
>
> Op do 3 mei 2018 om 16:29 schreef D?nes T?th <toth.denes at kogentum.hu>:
>
> > Hi,
> >
> >
> > In some cases the number of arguments passed as ... must be determined
> > inside a function, without evaluating the arguments themselves. I use
> > the following construct:
> >
> > dotlength <- function(...) length(substitute(expression(...))) - 1L
> >
> > # Usage (returns 3):
> > dotlength(1, 4, something = undefined)
> >
> > How can I define a method for length() which could be called directly on
> > `...`? Or is it an intention to extend the base length() function to
> > accept ellipses?
> >
> >
> > Regards,
> > Denes
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]



From toth@dene@ @ending from kogentum@hu  Thu May  3 17:10:41 2018
From: toth@dene@ @ending from kogentum@hu (=?UTF-8?B?VMOzdGggRMOpbmVz?=)
Date: Thu, 3 May 2018 17:10:41 +0200
Subject: [Rd] length of `...`
In-Reply-To: <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
Message-ID: <ee90e1bb-8a81-bfd0-f415-e2b0652a72e4@kogentum.hu>

Thank you Bill (and the R-Core Team), this is even more than what I 
thought of. I somehow missed this in the NEWS.

BTW, substitue(...()) is beautiful.


On 05/03/2018 05:01 PM, William Dunlap wrote:
> In R-3.5.0 you can use ...length():
>    > f <- function(..., n) ...length()
>    > f(stop("one"), stop("two"), stop("three"), n=7)
>    [1] 3
> 
> Prior to that substitute() is the way to go
>    > g <- function(..., n) length(substitute(...()))
>    > g(stop("one"), stop("two"), stop("three"), n=7)
>    [1] 3
> 
> R-3.5.0 also has the ...elt(n) function, which returns
> the evaluated n'th entry in ... , without evaluating the
> other ... entries.
>    > fn <- function(..., n) ...elt(n)
>    > fn(stop("one"), 3*5, stop("three"), n=2)
>    [1] 15
> 
> Prior to 3.5.0, eval the appropriate component of the output
> of substitute() in the appropriate environment:
>    > gn <- function(..., n) {
>    +   nthExpr <- substitute(...())[[n]]
>    +   eval(nthExpr, envir=parent.frame())
>    + }
>    > gn(stop("one"), environment(), stop("two"), n=2)
>    <environment: R_GlobalEnv>
> 
> 
> 
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com <http://tibco.com>
> 
> On Thu, May 3, 2018 at 7:29 AM, D?nes T?th <toth.denes at kogentum.hu 
> <mailto:toth.denes at kogentum.hu>> wrote:
> 
>     Hi,
> 
> 
>     In some cases the number of arguments passed as ... must be
>     determined inside a function, without evaluating the arguments
>     themselves. I use the following construct:
> 
>     dotlength <- function(...) length(substitute(expression(...))) - 1L
> 
>     # Usage (returns 3):
>     dotlength(1, 4, something = undefined)
> 
>     How can I define a method for length() which could be called
>     directly on `...`? Or is it an intention to extend the base length()
>     function to accept ellipses?
> 
> 
>     Regards,
>     Denes
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> 
> 

-- 
Dr. T?th D?nes ?gyvezet?
Kogentum Kft.
Tel.: 06-30-2583723
Web: www.kogentum.hu



From murdoch@dunc@n @ending from gm@il@com  Thu May  3 17:18:52 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 3 May 2018 11:18:52 -0400
Subject: [Rd] length of `...`
In-Reply-To: <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
Message-ID: <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>

On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
> In R-3.5.0 you can use ...length():
>    > f <- function(..., n) ...length()
>    > f(stop("one"), stop("two"), stop("three"), n=7)
>    [1] 3
> 
> Prior to that substitute() is the way to go
>    > g <- function(..., n) length(substitute(...()))
>    > g(stop("one"), stop("two"), stop("three"), n=7)
>    [1] 3
> 
> R-3.5.0 also has the ...elt(n) function, which returns
> the evaluated n'th entry in ... , without evaluating the
> other ... entries.
>    > fn <- function(..., n) ...elt(n)
>    > fn(stop("one"), 3*5, stop("three"), n=2)
>    [1] 15
> 
> Prior to 3.5.0, eval the appropriate component of the output
> of substitute() in the appropriate environment:
>    > gn <- function(..., n) {
>    +   nthExpr <- substitute(...())[[n]]
>    +   eval(nthExpr, envir=parent.frame())
>    + }
>    > gn(stop("one"), environment(), stop("two"), n=2)
>    <environment: R_GlobalEnv>
> 

Bill, the last of these doesn't quite work, because ... can be passed 
down through a string of callers.  You don't necessarily want to 
evaluate it in the parent.frame().  For example:

x <- "global"
f <- function(...) {
   x <- "f"
   g(...)
}
g <- function(...) {
   firstExpr <- substitute(...())[[1]]
   c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
}

Calling g(x) correctly prints "global" twice, but calling f(x) 
incorrectly prints

[1] "global" "f"

You can get the first element of ... without evaluating the rest using 
..1, but I don't know a way to do this for general n in pre-3.5.0 base R.

Duncan Murdoch



From pd@lgd @ending from gm@il@com  Thu May  3 17:21:03 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Thu, 3 May 2018 17:21:03 +0200
Subject: [Rd] length of `...`
In-Reply-To: <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>
Message-ID: <4AE62073-BC83-44FD-9044-BB3CA2787D91@gmail.com>



> On 3 May 2018, at 16:52 , Mark van der Loo <mark.vanderloo at gmail.com> wrote:
> 
> This question is better aimed at the r-help mailinglist as it is not about
> developing R itself.

Um, no... People there might well send you back here.

As for the original question, there are also variations over

dddlen <- function(...)length(match.call(expand.dots=FALSE)$...)



-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com



From m@rtin@morg@n @ending from ro@wellp@rk@org  Thu May  3 17:04:02 2018
From: m@rtin@morg@n @ending from ro@wellp@rk@org (Martin Morgan)
Date: Thu, 3 May 2018 11:04:02 -0400
Subject: [Rd] length of `...`
In-Reply-To: <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
Message-ID: <464bef71-68a2-65ba-045f-0576b2722834@roswellpark.org>

nargs() provides the number of arguments without evaluating them

 > f = function(x, ..., y) nargs()
 > f()
[1] 0
 > f(a=1, b=2)
[1] 2
 > f(1, a=1, b=2)
[1] 3
 > f(x=1, a=1, b=2)
[1] 3
 > f(stop())
[1] 1


On 05/03/2018 11:01 AM, William Dunlap via R-devel wrote:
> In R-3.5.0 you can use ...length():
>    > f <- function(..., n) ...length()
>    > f(stop("one"), stop("two"), stop("three"), n=7)
>    [1] 3
> 
> Prior to that substitute() is the way to go
>    > g <- function(..., n) length(substitute(...()))
>    > g(stop("one"), stop("two"), stop("three"), n=7)
>    [1] 3
> 
> R-3.5.0 also has the ...elt(n) function, which returns
> the evaluated n'th entry in ... , without evaluating the
> other ... entries.
>    > fn <- function(..., n) ...elt(n)
>    > fn(stop("one"), 3*5, stop("three"), n=2)
>    [1] 15
> 
> Prior to 3.5.0, eval the appropriate component of the output
> of substitute() in the appropriate environment:
>    > gn <- function(..., n) {
>    +   nthExpr <- substitute(...())[[n]]
>    +   eval(nthExpr, envir=parent.frame())
>    + }
>    > gn(stop("one"), environment(), stop("two"), n=2)
>    <environment: R_GlobalEnv>
> 
> 
> 
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> On Thu, May 3, 2018 at 7:29 AM, D?nes T?th <toth.denes at kogentum.hu> wrote:
> 
>> Hi,
>>
>>
>> In some cases the number of arguments passed as ... must be determined
>> inside a function, without evaluating the arguments themselves. I use the
>> following construct:
>>
>> dotlength <- function(...) length(substitute(expression(...))) - 1L
>>
>> # Usage (returns 3):
>> dotlength(1, 4, something = undefined)
>>
>> How can I define a method for length() which could be called directly on
>> `...`? Or is it an intention to extend the base length() function to accept
>> ellipses?
>>
>>
>> Regards,
>> Denes
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


This email message may contain legally privileged and/or...{{dropped:2}}



From h@wickh@m @ending from gm@il@com  Thu May  3 17:28:35 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Thu, 3 May 2018 08:28:35 -0700
Subject: [Rd] length of `...`
In-Reply-To: <CAMFmJs=+skVenVSFMbQvSDCZofzpESgrvStpOns5m8Ov8tD40g@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>
 <CAMFmJs=+skVenVSFMbQvSDCZofzpESgrvStpOns5m8Ov8tD40g@mail.gmail.com>
Message-ID: <CABdHhvHPxLMAiz5We97R8hixGDOLdrjUEpXwsZ-uW+H+x2jjNw@mail.gmail.com>

On Thu, May 3, 2018 at 8:00 AM, Gabe Becker <becker.gabe at gene.com> wrote:
> As of 3.5.0 the ...length() function does exactly what you are asking for.
> Before that, I don't know of an easy way to get the length without
> evaluation via R code. There may be one I'm not thinking of though, I
> haven't needed to do this myself.

dotlength <- function(...) length(nargs())

?

Hadley

-- 
http://hadley.nz



From h@wickh@m @ending from gm@il@com  Thu May  3 17:34:10 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Thu, 3 May 2018 08:34:10 -0700
Subject: [Rd] length of `...`
In-Reply-To: <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
Message-ID: <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>

On Thu, May 3, 2018 at 8:18 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
>>
>> In R-3.5.0 you can use ...length():
>>    > f <- function(..., n) ...length()
>>    > f(stop("one"), stop("two"), stop("three"), n=7)
>>    [1] 3
>>
>> Prior to that substitute() is the way to go
>>    > g <- function(..., n) length(substitute(...()))
>>    > g(stop("one"), stop("two"), stop("three"), n=7)
>>    [1] 3
>>
>> R-3.5.0 also has the ...elt(n) function, which returns
>> the evaluated n'th entry in ... , without evaluating the
>> other ... entries.
>>    > fn <- function(..., n) ...elt(n)
>>    > fn(stop("one"), 3*5, stop("three"), n=2)
>>    [1] 15
>>
>> Prior to 3.5.0, eval the appropriate component of the output
>> of substitute() in the appropriate environment:
>>    > gn <- function(..., n) {
>>    +   nthExpr <- substitute(...())[[n]]
>>    +   eval(nthExpr, envir=parent.frame())
>>    + }
>>    > gn(stop("one"), environment(), stop("two"), n=2)
>>    <environment: R_GlobalEnv>
>>
>
> Bill, the last of these doesn't quite work, because ... can be passed down
> through a string of callers.  You don't necessarily want to evaluate it in
> the parent.frame().  For example:
>
> x <- "global"
> f <- function(...) {
>   x <- "f"
>   g(...)
> }
> g <- function(...) {
>   firstExpr <- substitute(...())[[1]]
>   c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
> }
>
> Calling g(x) correctly prints "global" twice, but calling f(x) incorrectly
> prints
>
> [1] "global" "f"
>
> You can get the first element of ... without evaluating the rest using ..1,
> but I don't know a way to do this for general n in pre-3.5.0 base R.

If you don't mind using a package:

# works with R 3.1 and up
library(rlang)

x <- "global"
f <- function(...) {
  x <- "f"
  g(...)
}
g <- function(...) {
  dots <- enquos(...)
  eval_tidy(dots[[1]])
}

f(x, stop("!"))
#> [1] "global"
g(x, stop("!"))
#> [1] "global"

Hadley

-- 
http://hadley.nz



From h@wickh@m @ending from gm@il@com  Thu May  3 17:39:02 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Thu, 3 May 2018 08:39:02 -0700
Subject: [Rd] length of `...`
In-Reply-To: <CABdHhvHPxLMAiz5We97R8hixGDOLdrjUEpXwsZ-uW+H+x2jjNw@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAOKDuOjM0HZ+-e++P7J951DpWk4yn1uPO+e+j_N-xLHJmL_Oaw@mail.gmail.com>
 <CAMFmJs=+skVenVSFMbQvSDCZofzpESgrvStpOns5m8Ov8tD40g@mail.gmail.com>
 <CABdHhvHPxLMAiz5We97R8hixGDOLdrjUEpXwsZ-uW+H+x2jjNw@mail.gmail.com>
Message-ID: <CABdHhvEdKTt7tJx87Hdv0semK6+MzF3QdpV0Qz71bC7p+PF03A@mail.gmail.com>

On Thu, May 3, 2018 at 8:28 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> On Thu, May 3, 2018 at 8:00 AM, Gabe Becker <becker.gabe at gene.com> wrote:
>> As of 3.5.0 the ...length() function does exactly what you are asking for.
>> Before that, I don't know of an easy way to get the length without
>> evaluation via R code. There may be one I'm not thinking of though, I
>> haven't needed to do this myself.
>
> dotlength <- function(...) length(nargs())
>
> ?

Oops, I got a bit overzealous there: I mean

dotlength <- function(...) nargs()

(This is subtly different from calling nargs() directly as it will
only count the elements in ...)

Hadley

-- 
http://hadley.nz



From hp@ge@ @ending from fredhutch@org  Thu May  3 17:55:20 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 3 May 2018 08:55:20 -0700
Subject: [Rd] length of `...`
In-Reply-To: <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>
Message-ID: <3ffcd05b-6417-87be-94e0-f621c4a3116b@fredhutch.org>

Hi,

It would be great if one of the experts could comment on the
difference between Hadley's dotlength and ...length? The fact
that someone bothered to implement a new primitive for that
when there seems to be a very simple and straightforward R-only
solution suggests that there might be some gotchas/pitfalls with
the R-only solution.

Thanks,
H.


On 05/03/2018 08:34 AM, Hadley Wickham wrote:
> On Thu, May 3, 2018 at 8:18 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
>>>
>>> In R-3.5.0 you can use ...length():
>>>     > f <- function(..., n) ...length()
>>>     > f(stop("one"), stop("two"), stop("three"), n=7)
>>>     [1] 3
>>>
>>> Prior to that substitute() is the way to go
>>>     > g <- function(..., n) length(substitute(...()))
>>>     > g(stop("one"), stop("two"), stop("three"), n=7)
>>>     [1] 3
>>>
>>> R-3.5.0 also has the ...elt(n) function, which returns
>>> the evaluated n'th entry in ... , without evaluating the
>>> other ... entries.
>>>     > fn <- function(..., n) ...elt(n)
>>>     > fn(stop("one"), 3*5, stop("three"), n=2)
>>>     [1] 15
>>>
>>> Prior to 3.5.0, eval the appropriate component of the output
>>> of substitute() in the appropriate environment:
>>>     > gn <- function(..., n) {
>>>     +   nthExpr <- substitute(...())[[n]]
>>>     +   eval(nthExpr, envir=parent.frame())
>>>     + }
>>>     > gn(stop("one"), environment(), stop("two"), n=2)
>>>     <environment: R_GlobalEnv>
>>>
>>
>> Bill, the last of these doesn't quite work, because ... can be passed down
>> through a string of callers.  You don't necessarily want to evaluate it in
>> the parent.frame().  For example:
>>
>> x <- "global"
>> f <- function(...) {
>>    x <- "f"
>>    g(...)
>> }
>> g <- function(...) {
>>    firstExpr <- substitute(...())[[1]]
>>    c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
>> }
>>
>> Calling g(x) correctly prints "global" twice, but calling f(x) incorrectly
>> prints
>>
>> [1] "global" "f"
>>
>> You can get the first element of ... without evaluating the rest using ..1,
>> but I don't know a way to do this for general n in pre-3.5.0 base R.
> 
> If you don't mind using a package:
> 
> # works with R 3.1 and up
> library(rlang)
> 
> x <- "global"
> f <- function(...) {
>    x <- "f"
>    g(...)
> }
> g <- function(...) {
>    dots <- enquos(...)
>    eval_tidy(dots[[1]])
> }
> 
> f(x, stop("!"))
> #> [1] "global"
> g(x, stop("!"))
> #> [1] "global"
> 
> Hadley
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319



From murdoch@dunc@n @ending from gm@il@com  Thu May  3 18:50:37 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 3 May 2018 12:50:37 -0400
Subject: [Rd] length of `...`
In-Reply-To: <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
Message-ID: <5d2181bd-006b-c6f0-fc5a-539c208a7dd8@gmail.com>

On 03/05/2018 11:18 AM, Duncan Murdoch wrote:
> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
>> In R-3.5.0 you can use ...length():
>>     > f <- function(..., n) ...length()
>>     > f(stop("one"), stop("two"), stop("three"), n=7)
>>     [1] 3
>>
>> Prior to that substitute() is the way to go
>>     > g <- function(..., n) length(substitute(...()))
>>     > g(stop("one"), stop("two"), stop("three"), n=7)
>>     [1] 3
>>
>> R-3.5.0 also has the ...elt(n) function, which returns
>> the evaluated n'th entry in ... , without evaluating the
>> other ... entries.
>>     > fn <- function(..., n) ...elt(n)
>>     > fn(stop("one"), 3*5, stop("three"), n=2)
>>     [1] 15
>>
>> Prior to 3.5.0, eval the appropriate component of the output
>> of substitute() in the appropriate environment:
>>     > gn <- function(..., n) {
>>     +   nthExpr <- substitute(...())[[n]]
>>     +   eval(nthExpr, envir=parent.frame())
>>     + }
>>     > gn(stop("one"), environment(), stop("two"), n=2)
>>     <environment: R_GlobalEnv>
>>
> 
> Bill, the last of these doesn't quite work, because ... can be passed
> down through a string of callers.  You don't necessarily want to
> evaluate it in the parent.frame().  For example:
> 
> x <- "global"
> f <- function(...) {
>     x <- "f"
>     g(...)
> }
> g <- function(...) {
>     firstExpr <- substitute(...())[[1]]
>     c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
> }
> 
> Calling g(x) correctly prints "global" twice, but calling f(x)
> incorrectly prints
> 
> [1] "global" "f"
> 
> You can get the first element of ... without evaluating the rest using
> ..1, but I don't know a way to do this for general n in pre-3.5.0 base R.

Here's a way to do that:

eval(as.name(paste0("..", n)))

I was surprised this worked for n > 9, but it does.  Looking at the 
source, I think the largest legal value for n is huge; you'd hit other 
limits long before n was too big.

Duncan Murdoch



From h@wickh@m @ending from gm@il@com  Thu May  3 19:23:40 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Thu, 3 May 2018 10:23:40 -0700
Subject: [Rd] length of `...`
In-Reply-To: <5d2181bd-006b-c6f0-fc5a-539c208a7dd8@gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <5d2181bd-006b-c6f0-fc5a-539c208a7dd8@gmail.com>
Message-ID: <CABdHhvF_meM9uvs_zw3Vocm9dYWLR7HkRsYrkzNH5r+eqeKV9Q@mail.gmail.com>

On Thu, May 3, 2018 at 9:50 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> On 03/05/2018 11:18 AM, Duncan Murdoch wrote:
>>
>> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
>>>
>>> In R-3.5.0 you can use ...length():
>>>     > f <- function(..., n) ...length()
>>>     > f(stop("one"), stop("two"), stop("three"), n=7)
>>>     [1] 3
>>>
>>> Prior to that substitute() is the way to go
>>>     > g <- function(..., n) length(substitute(...()))
>>>     > g(stop("one"), stop("two"), stop("three"), n=7)
>>>     [1] 3
>>>
>>> R-3.5.0 also has the ...elt(n) function, which returns
>>> the evaluated n'th entry in ... , without evaluating the
>>> other ... entries.
>>>     > fn <- function(..., n) ...elt(n)
>>>     > fn(stop("one"), 3*5, stop("three"), n=2)
>>>     [1] 15
>>>
>>> Prior to 3.5.0, eval the appropriate component of the output
>>> of substitute() in the appropriate environment:
>>>     > gn <- function(..., n) {
>>>     +   nthExpr <- substitute(...())[[n]]
>>>     +   eval(nthExpr, envir=parent.frame())
>>>     + }
>>>     > gn(stop("one"), environment(), stop("two"), n=2)
>>>     <environment: R_GlobalEnv>
>>>
>>
>> Bill, the last of these doesn't quite work, because ... can be passed
>> down through a string of callers.  You don't necessarily want to
>> evaluate it in the parent.frame().  For example:
>>
>> x <- "global"
>> f <- function(...) {
>>     x <- "f"
>>     g(...)
>> }
>> g <- function(...) {
>>     firstExpr <- substitute(...())[[1]]
>>     c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
>> }
>>
>> Calling g(x) correctly prints "global" twice, but calling f(x)
>> incorrectly prints
>>
>> [1] "global" "f"
>>
>> You can get the first element of ... without evaluating the rest using
>> ..1, but I don't know a way to do this for general n in pre-3.5.0 base R.
>
>
> Here's a way to do that:
>
> eval(as.name(paste0("..", n)))
>
> I was surprised this worked for n > 9, but it does.  Looking at the source,
> I think the largest legal value for n is huge; you'd hit other limits long
> before n was too big.

Maybe just get(paste0("..", n)) ?

Hadley

-- 
http://hadley.nz



From pd@lgd @ending from gm@il@com  Thu May  3 19:41:37 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Thu, 3 May 2018 19:41:37 +0200
Subject: [Rd] length of `...`
In-Reply-To: <CABdHhvF_meM9uvs_zw3Vocm9dYWLR7HkRsYrkzNH5r+eqeKV9Q@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <5d2181bd-006b-c6f0-fc5a-539c208a7dd8@gmail.com>
 <CABdHhvF_meM9uvs_zw3Vocm9dYWLR7HkRsYrkzNH5r+eqeKV9Q@mail.gmail.com>
Message-ID: <5BDC3CE6-9EE2-45FC-B212-3BC2D9D7F65A@gmail.com>



> On 3 May 2018, at 19:23 , Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> Maybe just get(paste0("..", n)) ?
> 
> Hadley

Maybe not. These things are slippery.

> f <- function(...) get("..1")
> f(2)
Error in get("..1") : object '..1' not found

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com



From henrik@bengt@@on @ending from gm@il@com  Thu May  3 23:14:12 2018
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Thu, 3 May 2018 14:14:12 -0700
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
Message-ID: <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>

Also, as mentioned in my
https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html, when
not specifying the mode argument, the default on Windows is mode = "w"
*except* for certain, case-sensitive, filename extensions:

    if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$", url)))
        mode <- "wb"

Just like the need for mode = "wb" on Windows, the above
special-file-extension-hack is only happening on Windows, and is only
documented in ?download.file if you're on Windows; so someone who's on
Linux/macOS trying to help someone on Windows may not be aware of
this. This adds to even more confusions, e.g. "works for me".

/Henrik

On Thu, May 3, 2018 at 7:27 AM, Joris Meys <jorismeys at gmail.com> wrote:
> Thank you Henrik and Martin for explaining what was going on. Very
> insightful!
>
> On Thu, May 3, 2018 at 4:21 PM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>
>> On Thu, May 3, 2018 at 2:42 PM, Henrik Bengtsson
>> <henrik.bengtsson at gmail.com> wrote:
>> > Use mode="wb" when you download the file. See
>> > https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.
>> >
>> > R core, and others, is there a good argument for why we are not making
>> > this
>> > the default download mode? It seems like a such a simple fix to such a
>> > common "mistake".
>>
>> I'd like to second this feature request. This default behaviour is
>> unexpected and often leads to r scripts that were written on
>> mac/linux, to produce corrupted files on windows, checksum mismatches,
>> etc.
>>
>> Even for text files, the default should be to download the file as-is.
>> Trying to "fix" line-endings should be opt-in, never the default.
>> Downloading a file via a browser or ftp client on windows also doesn't
>> change the file, why should R?
>
>
> I third the feature request.
>
>>
>>
>>
>> On Thu, May 3, 2018 at 3:02 PM, Duncan Murdoch <murdoch.duncan at gmail.com>
>> wrote:
>> > Many downloads are text files (HTML, CSV, etc.), and if those are
>> > downloaded
>> > in binary, a Windows user might end up with a file that Notepad can't
>> > handle, because it would have Unix-style line endings.
>>
>> True but I don't think this is relevant. The same holds e.g. for the R
>> files in source packages, which also have unix line endings. Most
>> Windows users will use an actual editor that understands both types of
>> line endings, or can convert between the two.
>>
>> Downloading-file should do just that.
>
>
> Again, I agree. In my (limited) experience the only program that fails to
> properly display \n as a line ending, is Notepad. But it can still open the
> file regardless. If line ending conflicts cause bugs, it's almost always a
> unix-like OS struggling with Windows-style endings. I have yet to meet the
> first one the other way around.
>
> Cheers
> Joris
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php



From michell@ng @ending from gm@il@com  Fri May  4 01:08:51 2018
From: michell@ng @ending from gm@il@com (Michel Lang)
Date: Fri, 4 May 2018 01:08:51 +0200
Subject: [Rd] length of `...`
In-Reply-To: <5BDC3CE6-9EE2-45FC-B212-3BC2D9D7F65A@gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <5d2181bd-006b-c6f0-fc5a-539c208a7dd8@gmail.com>
 <CABdHhvF_meM9uvs_zw3Vocm9dYWLR7HkRsYrkzNH5r+eqeKV9Q@mail.gmail.com>
 <5BDC3CE6-9EE2-45FC-B212-3BC2D9D7F65A@gmail.com>
Message-ID: <CAF6EP_7GHQVz6dQtgx15B6L8M2kS+qqXMQXiPiy5Mhgurx3rJw@mail.gmail.com>

FWIW, there is also a backport of `...length()` for R versions >3.0.0
in my package backports (shameless self promotion):
<https://github.com/r-lib/backports>.


2018-05-03 19:41 GMT+02:00 peter dalgaard <pdalgd at gmail.com>:
>
>
>> On 3 May 2018, at 19:23 , Hadley Wickham <h.wickham at gmail.com> wrote:
>>
>> Maybe just get(paste0("..", n)) ?
>>
>> Hadley
>
> Maybe not. These things are slippery.
>
>> f <- function(...) get("..1")
>> f(2)
> Error in get("..1") : object '..1' not found
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



From hugh@p@r@on@ge @ending from gm@il@com  Fri May  4 06:58:37 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Fri, 4 May 2018 14:58:37 +1000
Subject: [Rd] Proposed speedup of ifelse
In-Reply-To: <20180503150152.GA23984@mail.cs.toronto.edu>
References: <mailman.46997.7.1525341602.26470.r-devel@r-project.org>
 <20180503150152.GA23984@mail.cs.toronto.edu>
Message-ID: <CAJmOi+P=E89SG1-Xj3TKy92PgA9vV-72iU6gZQAPvOucY2=2fw@mail.gmail.com>

Thanks Radford. I concur with all your points. I've attempted to address
the issues you raised through the github.io post.  The new method appears
to be slower for test lengths < 100 and possibly longer lengths (not just <
10). Of course length(test) < 100 is very quick, so I simply added this to
the conditions that cause the old ifelse method to be invoked. I'll leave
it to R-core to decide whether or not the benefits for longer vectors are
worth it.






On Fri, 4 May 2018 at 01:01 Radford Neal <radford at cs.toronto.edu> wrote:

> > I propose a patch to ifelse that leverages anyNA(test) to achieve an
> > improvement in performance. For a test vector of length 10, the change
> > nearly halves the time taken and for a test of length 1 million, there
> > is a tenfold increase in speed. Even for small vectors, the
> > distributions of timings between the old and the proposed ifelse do
> > not intersect.
>
> For smaller vectors, your results are significantly affected by your
> invoking the old version via base::ifelse.  You could try defining
> your new version as new_ifelse, and invoking the old version as just
> ifelse.  There might still be some issues with the two versions having
> different context w.r.t environments, and hence looking up functions
> in different ways.  You could copy the code of the old version and
> define it in the global environment just like new_ifelse.
>
> When using ifelse rather than base::ifelse, it seems the new version
> is slower for vectors of length 10, but faster for long vectors.
>
> Also, I'd use system.time rather than microbenchmark.  The latter will
> mix invocations of the two functions in a way where it is unclear that
> garbage collection time will be fairly attributed.  Also, it's a bit
> silly to plot the distributions of times, which will mostly reflect
> variations in when garbage collections at various levels occur - just
> the mean is what is relevant.
>
> Regards,
>
>    Radford Neal
>

	[[alternative HTML version deleted]]



From tom@@@k@liber@ @ending from gm@il@com  Fri May  4 08:34:03 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Fri, 4 May 2018 08:34:03 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
Message-ID: <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>

On 05/03/2018 11:14 PM, Henrik Bengtsson wrote:
> Also, as mentioned in my
> https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html, when
> not specifying the mode argument, the default on Windows is mode = "w"
> *except* for certain, case-sensitive, filename extensions:
>
>      if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$", url)))
>          mode <- "wb"
>
> Just like the need for mode = "wb" on Windows, the above
> special-file-extension-hack is only happening on Windows, and is only
> documented in ?download.file if you're on Windows; so someone who's on
> Linux/macOS trying to help someone on Windows may not be aware of
> this. This adds to even more confusions, e.g. "works for me".
If we were designing the API today, it would probably make more sense 
not to convert any line endings by default. Today's editors _usually_ 
can cope with different line endings and it is probably easier to detect 
that a text file has incorrect line endings rather than detecting that a 
binary file has been corrupted by an attempt to convert line endings. 
But whether to change existing, documented behavior is a different 
question. In order to help users and programmers who do not read the 
documentation carefully we would create problems for users and 
programmers who do. The current heuristic/hack is in line with the 
compatibility approach: it detects files that are obviously binary, so 
it changes the default behavior only for cases when it would obviously 
cause damage.

Tomas


>
> /Henrik
>
> On Thu, May 3, 2018 at 7:27 AM, Joris Meys <jorismeys at gmail.com> wrote:
>> Thank you Henrik and Martin for explaining what was going on. Very
>> insightful!
>>
>> On Thu, May 3, 2018 at 4:21 PM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> On Thu, May 3, 2018 at 2:42 PM, Henrik Bengtsson
>>> <henrik.bengtsson at gmail.com> wrote:
>>>> Use mode="wb" when you download the file. See
>>>> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.
>>>>
>>>> R core, and others, is there a good argument for why we are not making
>>>> this
>>>> the default download mode? It seems like a such a simple fix to such a
>>>> common "mistake".
>>> I'd like to second this feature request. This default behaviour is
>>> unexpected and often leads to r scripts that were written on
>>> mac/linux, to produce corrupted files on windows, checksum mismatches,
>>> etc.
>>>
>>> Even for text files, the default should be to download the file as-is.
>>> Trying to "fix" line-endings should be opt-in, never the default.
>>> Downloading a file via a browser or ftp client on windows also doesn't
>>> change the file, why should R?
>>
>> I third the feature request.
>>
>>>
>>>
>>> On Thu, May 3, 2018 at 3:02 PM, Duncan Murdoch <murdoch.duncan at gmail.com>
>>> wrote:
>>>> Many downloads are text files (HTML, CSV, etc.), and if those are
>>>> downloaded
>>>> in binary, a Windows user might end up with a file that Notepad can't
>>>> handle, because it would have Unix-style line endings.
>>> True but I don't think this is relevant. The same holds e.g. for the R
>>> files in source packages, which also have unix line endings. Most
>>> Windows users will use an actual editor that understands both types of
>>> line endings, or can convert between the two.
>>>
>>> Downloading-file should do just that.
>>
>> Again, I agree. In my (limited) experience the only program that fails to
>> properly display \n as a line ending, is Notepad. But it can still open the
>> file regardless. If line ending conflicts cause bugs, it's almost always a
>> unix-like OS struggling with Windows-style endings. I have yet to meet the
>> first one the other way around.
>>
>> Cheers
>> Joris
>>
>>
>> --
>> Joris Meys
>> Statistical consultant
>>
>> Department of Data Analysis and Mathematical Modelling
>> Ghent University
>> Coupure Links 653, B-9000 Gent (Belgium)
>>
>> -----------
>> Biowiskundedagen 2017-2018
>> http://www.biowiskundedagen.ugent.be/
>>
>> -------------------------------
>> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



From m@echler @ending from @t@t@m@th@ethz@ch  Fri May  4 09:06:15 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 4 May 2018 09:06:15 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
Message-ID: <23276.1639.439975.448292@stat.math.ethz.ch>

>>>>> Tomas Kalibera <tomas.kalibera at gmail.com>
>>>>>     on Fri, 4 May 2018 08:34:03 +0200 writes:

    > On 05/03/2018 11:14 PM, Henrik Bengtsson wrote:
    >> Also, as mentioned in my
    >> https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html,
    >> when not specifying the mode argument, the default on
    >> Windows is mode = "w" *except* for certain,
    >> case-sensitive, filename extensions:
    >> 
    >> if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$", url)))
    >>      mode <- "wb"
    >> 
    >> Just like the need for mode = "wb" on Windows, the above
    >> special-file-extension-hack is only happening on Windows,
    >> and is only documented in ?download.file if you're on
    >> Windows; so someone who's on Linux/macOS trying to help
    >> someone on Windows may not be aware of this. This adds to
    >> even more confusions, e.g. "works for me".

    > If we were designing the API today, it would probably make
    > more sense not to convert any line endings by
    > default. Today's editors _usually_ can cope with different
    > line endings and it is probably easier to detect that a
    > text file has incorrect line endings rather than detecting
    > that a binary file has been corrupted by an attempt to
    > convert line endings.  But whether to change existing,
    > documented behavior is a different question. In order to
    > help users and programmers who do not read the
    > documentation carefully we would create problems for users
    > and programmers who do. 

    > The current heuristic/hack is in
    > line with the compatibility approach: it detects files
    > that are obviously binary, so it changes the default
    > behavior only for cases when it would obviously cause
    > damage.

    > Tomas


Thank you, Tomas;  I was about to say something similar but
probably less convincingly. 

There's one thing I strongly agree with Henrik:  The
only-on-Windows documented Windows behavior should be documented
on all platforms.

I'll update the help page,

and will also add the .rds extension to the above list
[ --- yes, we all should use saveRDS() and readRDS() whenever
      sensible in favor of save() and load() ]

Martin


    >> /Henrik
    >> 
    >> On Thu, May 3, 2018 at 7:27 AM, Joris Meys
    >> <jorismeys at gmail.com> wrote:
    >>> Thank you Henrik and Martin for explaining what was
    >>> going on. Very insightful!
    >>> 
    >>> On Thu, May 3, 2018 at 4:21 PM, Jeroen Ooms
    >>> <jeroenooms at gmail.com> wrote:
    >>>> On Thu, May 3, 2018 at 2:42 PM, Henrik Bengtsson
    >>>> <henrik.bengtsson at gmail.com> wrote:
    >>>>> Use mode="wb" when you download the file. See
    >>>>> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/30.
    >>>>> 
    >>>>> R core, and others, is there a good argument for why
    >>>>> we are not making this the default download mode? It
    >>>>> seems like a such a simple fix to such a common
    >>>>> "mistake".
    >>>> I'd like to second this feature request. This default
    >>>> behaviour is unexpected and often leads to r scripts
    >>>> that were written on mac/linux, to produce corrupted
    >>>> files on windows, checksum mismatches, etc.
    >>>> 
    >>>> Even for text files, the default should be to download
    >>>> the file as-is.  Trying to "fix" line-endings should be
    >>>> opt-in, never the default.  Downloading a file via a
    >>>> browser or ftp client on windows also doesn't change
    >>>> the file, why should R?
    >>> 
    >>> I third the feature request.
    >>> 
    >>>> 
    >>>> 
    >>>> On Thu, May 3, 2018 at 3:02 PM, Duncan Murdoch
    >>>> <murdoch.duncan at gmail.com> wrote:
    >>>>> Many downloads are text files (HTML, CSV, etc.), and
    >>>>> if those are downloaded in binary, a Windows user
    >>>>> might end up with a file that Notepad can't handle,
    >>>>> because it would have Unix-style line endings.
    >>>> True but I don't think this is relevant. The same holds
    >>>> e.g. for the R files in source packages, which also
    >>>> have unix line endings. Most Windows users will use an
    >>>> actual editor that understands both types of line
    >>>> endings, or can convert between the two.
    >>>> 
    >>>> Downloading-file should do just that.
    >>> 
    >>> Again, I agree. In my (limited) experience the only
    >>> program that fails to properly display \n as a line
    >>> ending, is Notepad. But it can still open the file
    >>> regardless. If line ending conflicts cause bugs, it's
    >>> almost always a unix-like OS struggling with
    >>> Windows-style endings. I have yet to meet the first one
    >>> the other way around.
    >>> 
    >>> Cheers Joris
    >>> 
    >>> 
    >>> --
    >>> Joris Meys Statistical consultant
    >>> 
    >>> Department of Data Analysis and Mathematical Modelling
    >>> Ghent University Coupure Links 653, B-9000 Gent
    >>> (Belgium)
    >>> 
    >>> -----------
    >>> Biowiskundedagen 2017-2018
    >>> http://www.biowiskundedagen.ugent.be/
    >>> 
    >>> -------------------------------
    >>> Disclaimer :
    >>> http://helpdesk.ugent.be/e-maildisclaimer.php
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel



From jori@mey@ @ending from gm@il@com  Fri May  4 10:00:07 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Fri, 4 May 2018 10:00:07 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
Message-ID: <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>

On Fri, May 4, 2018 at 8:34 AM, Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> The current heuristic/hack is in line with the compatibility approach: it
> detects files that are obviously binary, so it changes the default behavior
> only for cases when it would obviously cause damage.
>
> Tomas


Well, I was trying to download a .gz file and download.file() didn't detect
that. Reason for that is obviously that the link doesn't contain .gz but
%2Egz , using the ASCII code for the dot instead of the dot itself. That's
general practice in a lot of links.

Hence I propose to change the line in download.file() that does this check
to:

  if (missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
                                   URLdecode(url))))

using URLdecode() ensures that .gz, .RData etc will be detected correctly
in an encoded URL.

Cheers
Joris

-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]



From m@echler @ending from @t@t@m@th@ethz@ch  Fri May  4 10:18:29 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 4 May 2018 10:18:29 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>
Message-ID: <23276.5973.364064.237925@stat.math.ethz.ch>

>>>>> Joris Meys <jorismeys at gmail.com>
>>>>>     on Fri, 4 May 2018 10:00:07 +0200 writes:

    > On Fri, May 4, 2018 at 8:34 AM, Tomas Kalibera
    > <tomas.kalibera at gmail.com> wrote:

    >> The current heuristic/hack is in line with the
    >> compatibility approach: it detects files that are
    >> obviously binary, so it changes the default behavior only
    >> for cases when it would obviously cause damage.
    >> 
    >> Tomas


    > Well, I was trying to download a .gz file and
    > download.file() didn't detect that. Reason for that is
    > obviously that the link doesn't contain .gz but %2Egz ,
    > using the ASCII code for the dot instead of the dot
    > itself. That's general practice in a lot of links.

    > Hence I propose to change the line in download.file() that
    > does this check to:

    >   if (missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
    >       URLdecode(url))))

    > using URLdecode() ensures that .gz, .RData etc will be
    > detected correctly in an encoded URL.

    > Cheers Joris

Makes sense to me and I plan to add it when also adding '.rds'

{ OTOH, after reading the thread about this: Shouldn't you make
  your code more robust and use   mode = "wb" (or "ab") in any case?
  ;-)
}
 
Martin



From tom@@@k@liber@ @ending from gm@il@com  Fri May  4 13:56:24 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Fri, 4 May 2018 13:56:24 +0200
Subject: [Rd] 
 [Bug report] Chinese characters are not handled correctly in
 Rterm for Windows
In-Reply-To: <SG2PR03MB286489FB462DEF379685AB35DD8C0@SG2PR03MB2864.apcprd03.prod.outlook.com>
References: <PS1PR0302MB250778E72D430F253CBE11AFDDDF0@PS1PR0302MB2507.apcprd03.prod.outlook.com>
 <5dd8df1b-50ae-bf59-a0dd-8af57feec541@gmail.com>
 <SG2PR03MB286489FB462DEF379685AB35DD8C0@SG2PR03MB2864.apcprd03.prod.outlook.com>
Message-ID: <c7dd51ea-0283-ff7f-9247-eaee27606962@gmail.com>


Thanks for the update. I believe I've fixed a part of the problem you 
have reported, the crash while entering Chinese characters to the 
console (e.g. via Pinyin, the error message about invalid multibyte 
character in mbcs_get_next). The fix is in R-devel 74693 - Windows 
function ReadConsoleInputA no longer works with multibyte characters (it 
is not documented, probably a Windows bug, according to reports online 
this problem exists since Windows 8, but I only reproduced/tested in 
Windows 10). Could you please verify the crash is no longer happening on 
your system?

Re the other problem, Chinese characters not being displayed. I found 
this is caused by R calling setlocale(LC_CTYPE, *). Setting this to 
"Chinese" and variants (code page 936) causes the problem, but running 
in the "C" locale as per default works fine. This is easily reproduced 
by an external program below - when setlocale() is called, the Chinese 
character disappears from the output. A workaround is to run R with 
environment variable LC_CTYPE=C. Could you please verify the printed 
characters are ok with this setting? Would you have an explanation for 
this behavior? It seems a bit odd - why would the CRT remove characters 
valid in the console code page, when both the console code page and the 
"setlocale" code page are 936.

Thanks
Tomas

 ??? #include <stdio.h>
 ??? #include <locale.h>
 ??? int main(int argc, char **argv) {
 ??????? //if (!setlocale(LC_CTYPE, "Chinese")) fprintf(stderr, 
"setlocale failed\n");
 ??????? int chars[] = { 67, 196, 227, 68 };
 ??????? for(int i = 0; i < 4; i++) fputc(chars[i], stdout);
 ??????? fprintf(stdout, "\n");
 ??????? return 0;
 ??? }

On 04/28/2018 04:53 PM, Azure wrote:
> Hi Tomas,
>
> Sorry for the delayed response. I have tested the problem on the latest R-devel build (2018-04-27 r74651), and it still exists. RGui is always fine with Chinese characters, but some IDEs rely on the CLI version of R (e.g. Visual Studio Code with R plugin).
>
>> Your example  print("ABC\u4f60\u597dDEF") is printing two Chinese characters, right?
> Yes. U+4F60, U+597D or C4E3, BAC3 in CP936.
>
>> Could you reproduce the problem with printing just one of the characters, say print("ABC\u4f60DEF") ?
> Yes. The console output is pasted in [ https://paste.ubuntu.com/p/TYgZWhdgXK/ ] (to avoid gibberish in e-mail).
> The Active Code Page is 936 before and after running Rterm.
>
>> As a sanity check - does this display the correct characters in RGui?
> Yes.
>
>> If you take the sequence of the "fputc" commands you captured by the debugger, and create a trivial console application to just run them - would the characters display correctly in the same terminal from which you run R.exe?
> Yes. I created an Win32 Console Application in VS [ https://paste.ubuntu.com/p/h3NFV6nQvs/ ], and all the characters were displayed correctly in two ways. The WriteConsoleA variant uses the current console CP settings, and it should behave like fputc.
>
> I guess the Rterm uses its own console I/O mechanism so the 2nd parameter of fputc is not stdout's handle. (I tried to read the source but unable to figure out how it works). The crash in mbcs_get_next, which is also mentioned in the previous post, may be related to this mechanism.
>
> If you need further information, please let me know.
>
> Thanks,
> i at azurefx.name
>
>
> Tomas Kalibera <tomas.kalibera at gmail.com> 2018/4/5 22:42
>>
>> Thank you for the report and initial debugging. I am not sure what is going wrong, we may have to rely on your help to debug this (I do not have a system to reproduce on). A user-targeted advice would be to use RGui (Rgui.exe).
>>
>> Does the problem also exist in R-devel?
>> https://cran.r-project.org/bin/windows/base/rdevel.html
>>
>> Your example  print("ABC\u4f60\u597dDEF") is printing two Chinese characters, right? The first one is C4E3 in CP936 (4F60 in Unicode) and the second one is BAC3 in CP936 (597D in Unicode)? Could you reproduce the problem with printing just one of the characters, say print("ABC\u4f60DEF") ?
>>
>> As a sanity check - does this display the correct characters in RGui? It should, and does on my system, as RGui uses Unicode internally. By correct I mean the characters shown e.g. here
>>
>> https://msdn.microsoft.com/en-us/library/cc194923.aspx
>> https://msdn.microsoft.com/en-us/library/cc194920.aspx
>>
>> What is the output of "chcp" in the terminal, before you run R.exe? It may be different from what Sys.getlocale() gives in R.
>>
>> If you take the sequence of the "fputc" commands you captured by the debugger, and create a trivial console application to just run them - would the characters display correctly in the same terminal from which you run R.exe?
>>
>> Thanks
>> Tomas
>>
>>
> >



From maechler at stat.math.ethz.ch  Fri May  4 15:02:22 2018
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 4 May 2018 15:02:22 +0200
Subject: [Rd] length of `...`
In-Reply-To: <3ffcd05b-6417-87be-94e0-f621c4a3116b@fredhutch.org>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>
 <3ffcd05b-6417-87be-94e0-f621c4a3116b@fredhutch.org>
Message-ID: <23276.23006.334586.473944@stat.math.ethz.ch>

>>>>> Herv? Pag?s <hpages at fredhutch.org>
>>>>>     on Thu, 3 May 2018 08:55:20 -0700 writes:

    > Hi,
    > It would be great if one of the experts could comment on the
    > difference between Hadley's dotlength and ...length? The fact
    > that someone bothered to implement a new primitive for that
    > when there seems to be a very simple and straightforward R-only
    > solution suggests that there might be some gotchas/pitfalls with
    > the R-only solution.

Namely

> dotlength <- function(...) nargs()

> (This is subtly different from calling nargs() directly as it will
> only count the elements in ...)

> Hadley


Well,  I was the "someone".  In the past I had seen (and used myself)

   length(list(...))       

and of course that was not usable.
I knew of some substitute() / match.call() tricks [but I think
did not know Bill's cute substitute(...()) !] at the time, but
found them too esoteric.

Aditionally and importantly,  ...length()  and  ..elt(n)  were
developed  "synchronously",  and the R-substitutes for ..elt()
definitely are less trivial (I did not find one at the time), as
Duncan's example to Bill's proposal has shown, so I had looked
at .Primitive() solutions of both.

In hindsight I should have asked here for advice,  but may at
the time I had been a bit frustrated by the results of some of
my RFCs ((nothing specific in mind !))

But __if__ there's really no example where current (3.5.0 and newer)

  ...length()

differs from Hadley's  dotlength()
I'd vert happy to replace ...length 's C based definition by
Hadley's beautiful minimal solution.

Martin


    > On 05/03/2018 08:34 AM, Hadley Wickham wrote:
    >> On Thu, May 3, 2018 at 8:18 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
    >>> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
    >>>> 
    >>>> In R-3.5.0 you can use ...length():
    >>>> > f <- function(..., n) ...length()
    >>>> > f(stop("one"), stop("two"), stop("three"), n=7)
    >>>> [1] 3
    >>>> 
    >>>> Prior to that substitute() is the way to go
    >>>> > g <- function(..., n) length(substitute(...()))
    >>>> > g(stop("one"), stop("two"), stop("three"), n=7)
    >>>> [1] 3
    >>>> 
    >>>> R-3.5.0 also has the ...elt(n) function, which returns
    >>>> the evaluated n'th entry in ... , without evaluating the
    >>>> other ... entries.
    >>>> > fn <- function(..., n) ...elt(n)
    >>>> > fn(stop("one"), 3*5, stop("three"), n=2)
    >>>> [1] 15
    >>>> 
    >>>> Prior to 3.5.0, eval the appropriate component of the output
    >>>> of substitute() in the appropriate environment:
    >>>> > gn <- function(..., n) {
    >>>> +   nthExpr <- substitute(...())[[n]]
    >>>> +   eval(nthExpr, envir=parent.frame())
    >>>> + }
    >>>> > gn(stop("one"), environment(), stop("two"), n=2)
    >>>> <environment: R_GlobalEnv>
    >>>> 
    >>> 
    >>> Bill, the last of these doesn't quite work, because ... can be passed down
    >>> through a string of callers.  You don't necessarily want to evaluate it in
    >>> the parent.frame().  For example:
    >>> 
    >>> x <- "global"
    >>> f <- function(...) {
    >>> x <- "f"
    >>> g(...)
    >>> }
    >>> g <- function(...) {
    >>> firstExpr <- substitute(...())[[1]]
    >>> c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
    >>> }
    >>> 
    >>> Calling g(x) correctly prints "global" twice, but calling f(x) incorrectly
    >>> prints
    >>> 
    >>> [1] "global" "f"
    >>> 
    >>> You can get the first element of ... without evaluating the rest using ..1,
    >>> but I don't know a way to do this for general n in pre-3.5.0 base R.
    >> 
    >> If you don't mind using a package:
    >> 
    >> # works with R 3.1 and up
    >> library(rlang)
    >> 
    >> x <- "global"
    >> f <- function(...) {
    >> x <- "f"
    >> g(...)
    >> }
    >> g <- function(...) {
    >> dots <- enquos(...)
    >> eval_tidy(dots[[1]])
    >> }
    >> 
    >> f(x, stop("!"))
    >> #> [1] "global"
    >> g(x, stop("!"))
    >> #> [1] "global"
    >> 
    >> Hadley
    >> 

    > -- 
    > Herv? Pag?s

    > Program in Computational Biology
    > Division of Public Health Sciences
    > Fred Hutchinson Cancer Research Center
    > 1100 Fairview Ave. N, M1-B514
    > P.O. Box 19024
    > Seattle, WA 98109-1024

    > E-mail: hpages at fredhutch.org
    > Phone:  (206) 667-5791
    > Fax:    (206) 667-1319

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From jorismeys at gmail.com  Fri May  4 15:37:27 2018
From: jorismeys at gmail.com (Joris Meys)
Date: Fri, 4 May 2018 15:37:27 +0200
Subject: [Rd] length of `...`
In-Reply-To: <23276.23006.334586.473944@stat.math.ethz.ch>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>
 <3ffcd05b-6417-87be-94e0-f621c4a3116b@fredhutch.org>
 <23276.23006.334586.473944@stat.math.ethz.ch>
Message-ID: <CAO1zAVZQFgum5BJL7hLbq0qGvAk2bf0ASpWVzWfHgT9o79dyyA@mail.gmail.com>

The one difference I see, is the necessity to pass the dots to the function
dotlength :

dotlength <- function(...) nargs()

myfun <- function(..., someArg = 1){
  n1 <- ...length()
  n2 <- dotlength()
  n3 <- dotlength(...)
  return(c(n1, n2, n3))
}

myfun(stop("A"), stop("B"), someArg = stop("c"))

I don't really see immediately how one can replace the C definition with
Hadley's solution without changing how the function has to be used.
Personally, I have no preference over the use, but changing it now would
break code dependent upon ...length() imho. Unless I'm overlooking
something of course.

Cheers
Joris


On Fri, May 4, 2018 at 3:02 PM, Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Herv? Pag?s <hpages at fredhutch.org>
> >>>>>     on Thu, 3 May 2018 08:55:20 -0700 writes:
>
>     > Hi,
>     > It would be great if one of the experts could comment on the
>     > difference between Hadley's dotlength and ...length? The fact
>     > that someone bothered to implement a new primitive for that
>     > when there seems to be a very simple and straightforward R-only
>     > solution suggests that there might be some gotchas/pitfalls with
>     > the R-only solution.
>
> Namely
>
> > dotlength <- function(...) nargs()
>
> > (This is subtly different from calling nargs() directly as it will
> > only count the elements in ...)
>
> > Hadley
>
>
> Well,  I was the "someone".  In the past I had seen (and used myself)
>
>    length(list(...))
>
> and of course that was not usable.
> I knew of some substitute() / match.call() tricks [but I think
> did not know Bill's cute substitute(...()) !] at the time, but
> found them too esoteric.
>
> Aditionally and importantly,  ...length()  and  ..elt(n)  were
> developed  "synchronously",  and the R-substitutes for ..elt()
> definitely are less trivial (I did not find one at the time), as
> Duncan's example to Bill's proposal has shown, so I had looked
> at .Primitive() solutions of both.
>
> In hindsight I should have asked here for advice,  but may at
> the time I had been a bit frustrated by the results of some of
> my RFCs ((nothing specific in mind !))
>
> But __if__ there's really no example where current (3.5.0 and newer)
>
>   ...length()
>
> differs from Hadley's  dotlength()
> I'd vert happy to replace ...length 's C based definition by
> Hadley's beautiful minimal solution.
>
> Martin
>
>
>     > On 05/03/2018 08:34 AM, Hadley Wickham wrote:
>     >> On Thu, May 3, 2018 at 8:18 AM, Duncan Murdoch <
> murdoch.duncan at gmail.com> wrote:
>     >>> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
>     >>>>
>     >>>> In R-3.5.0 you can use ...length():
>     >>>> > f <- function(..., n) ...length()
>     >>>> > f(stop("one"), stop("two"), stop("three"), n=7)
>     >>>> [1] 3
>     >>>>
>     >>>> Prior to that substitute() is the way to go
>     >>>> > g <- function(..., n) length(substitute(...()))
>     >>>> > g(stop("one"), stop("two"), stop("three"), n=7)
>     >>>> [1] 3
>     >>>>
>     >>>> R-3.5.0 also has the ...elt(n) function, which returns
>     >>>> the evaluated n'th entry in ... , without evaluating the
>     >>>> other ... entries.
>     >>>> > fn <- function(..., n) ...elt(n)
>     >>>> > fn(stop("one"), 3*5, stop("three"), n=2)
>     >>>> [1] 15
>     >>>>
>     >>>> Prior to 3.5.0, eval the appropriate component of the output
>     >>>> of substitute() in the appropriate environment:
>     >>>> > gn <- function(..., n) {
>     >>>> +   nthExpr <- substitute(...())[[n]]
>     >>>> +   eval(nthExpr, envir=parent.frame())
>     >>>> + }
>     >>>> > gn(stop("one"), environment(), stop("two"), n=2)
>     >>>> <environment: R_GlobalEnv>
>     >>>>
>     >>>
>     >>> Bill, the last of these doesn't quite work, because ... can be
> passed down
>     >>> through a string of callers.  You don't necessarily want to
> evaluate it in
>     >>> the parent.frame().  For example:
>     >>>
>     >>> x <- "global"
>     >>> f <- function(...) {
>     >>> x <- "f"
>     >>> g(...)
>     >>> }
>     >>> g <- function(...) {
>     >>> firstExpr <- substitute(...())[[1]]
>     >>> c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
>     >>> }
>     >>>
>     >>> Calling g(x) correctly prints "global" twice, but calling f(x)
> incorrectly
>     >>> prints
>     >>>
>     >>> [1] "global" "f"
>     >>>
>     >>> You can get the first element of ... without evaluating the rest
> using ..1,
>     >>> but I don't know a way to do this for general n in pre-3.5.0 base
> R.
>     >>
>     >> If you don't mind using a package:
>     >>
>     >> # works with R 3.1 and up
>     >> library(rlang)
>     >>
>     >> x <- "global"
>     >> f <- function(...) {
>     >> x <- "f"
>     >> g(...)
>     >> }
>     >> g <- function(...) {
>     >> dots <- enquos(...)
>     >> eval_tidy(dots[[1]])
>     >> }
>     >>
>     >> f(x, stop("!"))
>     >> #> [1] "global"
>     >> g(x, stop("!"))
>     >> #> [1] "global"
>     >>
>     >> Hadley
>     >>
>
>     > --
>     > Herv? Pag?s
>
>     > Program in Computational Biology
>     > Division of Public Health Sciences
>     > Fred Hutchinson Cancer Research Center
>     > 1100 Fairview Ave. N, M1-B514
>     > P.O. Box 19024
>     > Seattle, WA 98109-1024
>
>     > E-mail: hpages at fredhutch.org
>     > Phone:  (206) 667-5791
>     > Fax:    (206) 667-1319
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From maechler at stat.math.ethz.ch  Fri May  4 18:13:24 2018
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 4 May 2018 18:13:24 +0200
Subject: [Rd] length of `...`
In-Reply-To: <CAO1zAVZQFgum5BJL7hLbq0qGvAk2bf0ASpWVzWfHgT9o79dyyA@mail.gmail.com>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>
 <3ffcd05b-6417-87be-94e0-f621c4a3116b@fredhutch.org>
 <23276.23006.334586.473944@stat.math.ethz.ch>
 <CAO1zAVZQFgum5BJL7hLbq0qGvAk2bf0ASpWVzWfHgT9o79dyyA@mail.gmail.com>
Message-ID: <23276.34468.989042.502720@stat.math.ethz.ch>

>>>>> Joris Meys <jorismeys at gmail.com>
>>>>>     on Fri, 4 May 2018 15:37:27 +0200 writes:

    > The one difference I see, is the necessity to pass the dots to the function
    > dotlength :

    > dotlength <- function(...) nargs()

    > myfun <- function(..., someArg = 1){
    > n1 <- ...length()
    > n2 <- dotlength()
    > n3 <- dotlength(...)
    > return(c(n1, n2, n3))
    > }

    > myfun(stop("A"), stop("B"), someArg = stop("c"))

    > I don't really see immediately how one can replace the C definition with
    > Hadley's solution without changing how the function has to be used.

Yes, of course:  nargs() can only be applied to the function inside
which it is used, and hence  n2 <- dotlength()  must therefore be 0.
Thank you, Joris

    > Personally, I have no preference over the use, but changing it now would
    > break code dependent upon ...length() imho. Unless I'm overlooking
    > something of course.

Yes.  OTOH, as it's been very new, one could consider
deprecating it, and advertize say,  .length(...) instead of ...length()
[yes, in spite of the fact that the pure-R solution is slower
 than a primitive; both are fast enough for all purposes]
 
But such a deprecation cycle typically entails time more writing
etc, not something I've time for just these days.

Martin


    > On Fri, May 4, 2018 at 3:02 PM, Martin Maechler <maechler at stat.math.ethz.ch>
    > wrote:

    >> >>>>> Herv? Pag?s <hpages at fredhutch.org>
    >> >>>>>     on Thu, 3 May 2018 08:55:20 -0700 writes:
    >> 
    >> > Hi,
    >> > It would be great if one of the experts could comment on the
    >> > difference between Hadley's dotlength and ...length? The fact
    >> > that someone bothered to implement a new primitive for that
    >> > when there seems to be a very simple and straightforward R-only
    >> > solution suggests that there might be some gotchas/pitfalls with
    >> > the R-only solution.
    >> 
    >> Namely
    >> 
    >> > dotlength <- function(...) nargs()
    >> 
    >> > (This is subtly different from calling nargs() directly as it will
    >> > only count the elements in ...)
    >> 
    >> > Hadley
    >> 
    >> 
    >> Well,  I was the "someone".  In the past I had seen (and used myself)
    >> 
    >> length(list(...))
    >> 
    >> and of course that was not usable.
    >> I knew of some substitute() / match.call() tricks [but I think
    >> did not know Bill's cute substitute(...()) !] at the time, but
    >> found them too esoteric.
    >> 
    >> Aditionally and importantly,  ...length()  and  ..elt(n)  were
    >> developed  "synchronously",  and the R-substitutes for ..elt()
    >> definitely are less trivial (I did not find one at the time), as
    >> Duncan's example to Bill's proposal has shown, so I had looked
    >> at .Primitive() solutions of both.
    >> 
    >> In hindsight I should have asked here for advice,  but may at
    >> the time I had been a bit frustrated by the results of some of
    >> my RFCs ((nothing specific in mind !))
    >> 
    >> But __if__ there's really no example where current (3.5.0 and newer)
    >> 
    >> ...length()
    >> 
    >> differs from Hadley's  dotlength()
    >> I'd vert happy to replace ...length 's C based definition by
    >> Hadley's beautiful minimal solution.
    >> 
    >> Martin


From tal.galili at gmail.com  Fri May  4 21:46:37 2018
From: tal.galili at gmail.com (Tal Galili)
Date: Fri, 4 May 2018 22:46:37 +0300
Subject: [Rd] Debugging "SETLENGTH() cannot be applied to an ALTVEC object."?
Message-ID: <CANdJ3dV4+Cv+AkVR6EXToH39uZ+P7fo1qgW_EewkTLKJRAyvpQ@mail.gmail.com>

Hi all,
I wish to push a new version of a package (heatmaply).

I sent it to winbuild with no issues but after submitting it to CRAN I got
an update that it breaks on Debian, see:

package heatmaply_0.15.0.tar.gz does not pass the incoming checks
automatically, please see the following pre-tests:
Windows: <https://win-builder.r-project.org/incoming_pretest/
heatmaply_0.15.0_20180502_082353/Windows/00check.log>
Status: OK
Debian: <https://win-builder.r-project.org/incoming_pretest/
heatmaply_0.15.0_20180502_082353/Debian/00check.log>
Status: 1 ERROR, 1 WARNING



Looking at the errors I get, they are all of the type:
"SETLENGTH() cannot be applied to an ALTVEC object."
I assume this is somehow related to changes in R 3.5.0 (maybe related to
this
<https://github.com/wch/r-source/commit/0ba66a2bc236ae5b009af910688575aa4adddd2c>?),
but I'm not sure how to debug it (as I don't have this environment set-up),
not am I sure what is actually causing the issue.

Any suggestions would be most appreciated.

(I debated if to post it here or on r-package-devel, and it seems a more
general R issue than package development issue - but feel free to correct
me about this if you think otherwise)

Cheers,
Tal






----------------Contact
Details:-------------------------------------------------------
Tal Galili, Ph.D. in Statistics

Tal.Galili at gmail.com

www.r-statistics.com (English)
www.biostatistics.co.il (Hebrew)  | www.talgalili.com (Hebrew)
----------------------------------------------------------------------------------------------

	[[alternative HTML version deleted]]


From skostyshak at ufl.edu  Fri May  4 22:41:34 2018
From: skostyshak at ufl.edu (Scott Kostyshak)
Date: Fri, 4 May 2018 16:41:34 -0400
Subject: [Rd] 
 source(echo = TRUE) with a iso-8859-1 encoded file gives an error
In-Reply-To: <CA+vqiLEaZVDgCnJGByna2+Vw8soWFeLMJr9qci1eBtm2puhR2g@mail.gmail.com>
References: <20180501185750.445oub53vcdnyyyx@steph>
 <CA+vqiLEaZVDgCnJGByna2+Vw8soWFeLMJr9qci1eBtm2puhR2g@mail.gmail.com>
Message-ID: <20180504204134.7p4znxcvvbao6v4d@Opti1604>

Thanks for your reply, Ista, and your advice. I will re-post to r-help.

Best,

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/

On Tue, May 01, 2018 at 07:15:30PM +0000, Ista Zahn wrote:
> Hi Scott,
> 
> This question is appropriate for the r-help mailing list, but probably
> off-topic here on r-devel.
> 
> Best,
> Ista
> 
> On Tue, May 1, 2018 at 2:57 PM, Scott Kostyshak <skostyshak at ufl.edu> wrote:
> > I have very little knowledge about file encodings and would like to
> > learn more.
> >
> > I've read the following pages to learn more:
> >
> >   https://urldefense.proofpoint.com/v2/url?u=http-3A__stat.ethz.ch_R-2Dmanual_R-2Ddevel_library_base_html_Encoding.html&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=HegPJMcZ_5R6vYtdQLgIsh-M6ElOlewHPBZxe8IPSlI&e=
> >   https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_questions_4806823_how-2Dto-2Ddetect-2Dthe-2Dright-2Dencoding-2Dfor-2Dread-2Dcsv&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=KGDvHJrfkvqbwyKnIiY0V45HtN-W4Rpq4ZBXfIFaFMk&e=
> >   https://urldefense.proofpoint.com/v2/url?u=https-3A__developer.r-2Dproject.org_Encodings-5Fand-5FR.html&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=Ka1kGiCw3w22tOLfA50AyrKsMT-La14TQdutJJkdE04&e=
> >
> > The last one, in particular, has been very helpful. I would be
> > interested in any further references that you suggest.
> >
> > I attach a file that reproduces the issue I would like to learn more
> > about. I do not know if the file encoding will be correctly preserved
> > through email, so I also provide the file (temporarily) on Dropbox here:
> >
> >   https://urldefense.proofpoint.com/v2/url?u=https-3A__www.dropbox.com_s_3lbgebk7b5uaia7_encoding-5Fexport-5Fissue.R-3Fdl-3D0&d=DwIDAw&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=1fpq0SJ48L-zRWX2t0llEVIDZAHfU8S-4oINHlOA0rk&m=Hx2R8haOcpOy7nHCyZ63_tEVrmVn5txQk-yjGkgjKjw&s=58a7qB9IHt3s2ZLDglGEHwWARuo8xvSlH_z8G5jDaUY&e=
> >
> > The file gives an error when using "source()" with the
> > argument echo = TRUE:
> >
> >   > source("encoding_export_issue.R", echo = TRUE)
> >   Error in nchar(dep, "c") : invalid multibyte string, element 1
> >   In addition: Warning message:
> >   In grepl("^[[:blank:]]*$", dep[1L]) :
> >     input string 1 is invalid in this locale
> >
> > The problem comes from the "?" character in the .R file. The file
> > appears to be encoded as "iso-8859-1":
> >
> >   $ file --mime-encoding encoding_export_issue.R
> >   encoding_export_issue.R: iso-8859-1
> >
> > Note that for me:
> >
> >   > getOption("encoding")
> >   [1] "native.enc"
> >
> > so "native.enc" is used for the "encoding" argument of source().
> >
> > The following two calls succeed:
> >
> >   > source("encoding_export_issue.R", echo = TRUE, encoding = "unknown")
> >   > source("encoding_export_issue.R", echo = TRUE, encoding = "iso-8859-1")
> >
> > Is this file a valid "iso-8859-1" encoded file?  Why does source() fail
> > in the case of encoding set to "native.enc"? Is it because of the
> > settings to UTF-8 in my locale (see info on my system at the bottom of
> > this email).
> >
> > I'm guessing it would be a bad idea to put
> >
> >   options(encoding = "unknown")
> >
> > in my .Rprofile, because it is difficult to always correctly guess the
> > encoding of files? Is there a reason why setting it to "unknown" would
> > lead to more problems than leaving it set to "native.enc"?
> >
> > I've reproduced the above behavior on R-devel (r74677) and 3.4.3. Below
> > is my session info and locale info for my system with the 3.4.3 version:
> >
> >> sessionInfo()
> > R version 3.4.3 (2017-11-30)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Ubuntu 16.04.3 LTS
> >
> > Matrix products: default
> > BLAS: /usr/lib/libblas/libblas.so.3.6.0
> > LAPACK: /usr/lib/lapack/liblapack.so.3.6.0
> >
> > locale:
> >  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> >  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> >  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> > [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.4.3
> >
> >> Sys.getlocale()
> > [1] "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C"
> >
> > Thanks for your time,
> >
> > Scott
> >
> >
> > --
> > Scott Kostyshak
> > Assistant Professor of Economics
> > University of Florida
> > https://people.clas.ufl.edu/skostyshak/
> >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=pZJPUDQ3SB9JplYbifm4nt2lEVG5pWx2KikqINpWlZM&r=neJ42wVqpDzuvOKMBML6-HnbH0l0aXpb0ZUFWoGb-Bo&m=ACEONMqZnQSCcvrFpo-yWr9piCPKCvJhsdRJKdTd6b0&s=clTC2qDlDodnBISRH9uJKb0wKUZHErA7oJ98a6QZS8g&e=
> >


From becker.gabe at gene.com  Fri May  4 22:46:33 2018
From: becker.gabe at gene.com (Gabe Becker)
Date: Fri, 4 May 2018 13:46:33 -0700
Subject: [Rd] Debugging "SETLENGTH() cannot be applied to an ALTVEC
 object."?
In-Reply-To: <CANdJ3dV4+Cv+AkVR6EXToH39uZ+P7fo1qgW_EewkTLKJRAyvpQ@mail.gmail.com>
References: <CANdJ3dV4+Cv+AkVR6EXToH39uZ+P7fo1qgW_EewkTLKJRAyvpQ@mail.gmail.com>
Message-ID: <CAMFmJs=HXxjk0Li=OD5HF1dDMwUdGujmFmKx9dw7-ATB_JQR1g@mail.gmail.com>

Tal,

I don't have a debian machine at my fingertips, but I don't see that error
when installing heatmaply into a clean library in R 3.5.0 (that takes a
while...).

I suspect you're hitting old installed versions of packages in that build
on that machine, especially since the failure is not universal, but I don't
have any visibliity into the internals of that system so I have no way of
knowing if that's true or not.

You can use Gabor's builder.r-hub.io to try checking your package on the
Debian VMs over there. If it can pass there that would be more evidence
that something more complicated is going on.

Sorry I couldn't be more direct help.
~G

On Fri, May 4, 2018 at 12:46 PM, Tal Galili <tal.galili at gmail.com> wrote:

> Hi all,
> I wish to push a new version of a package (heatmaply).
>
> I sent it to winbuild with no issues but after submitting it to CRAN I got
> an update that it breaks on Debian, see:
>
> package heatmaply_0.15.0.tar.gz does not pass the incoming checks
> automatically, please see the following pre-tests:
> Windows: <https://win-builder.r-project.org/incoming_pretest/
> heatmaply_0.15.0_20180502_082353/Windows/00check.log>
> Status: OK
> Debian: <https://win-builder.r-project.org/incoming_pretest/
> heatmaply_0.15.0_20180502_082353/Debian/00check.log>
> Status: 1 ERROR, 1 WARNING
>
>
>
> Looking at the errors I get, they are all of the type:
> "SETLENGTH() cannot be applied to an ALTVEC object."
> I assume this is somehow related to changes in R 3.5.0 (maybe related to
> this
> <https://github.com/wch/r-source/commit/0ba66a2bc236ae5b009af910688575
> aa4adddd2c>?),
> but I'm not sure how to debug it (as I don't have this environment set-up),
> not am I sure what is actually causing the issue.
>
> Any suggestions would be most appreciated.
>
> (I debated if to post it here or on r-package-devel, and it seems a more
> general R issue than package development issue - but feel free to correct
> me about this if you think otherwise)
>
> Cheers,
> Tal
>
>
>
>
>
>
> ----------------Contact
> Details:-------------------------------------------------------
> Tal Galili, Ph.D. in Statistics
>
> Tal.Galili at gmail.com
>
> www.r-statistics.com (English)
> www.biostatistics.co.il (Hebrew)  | www.talgalili.com (Hebrew)
> ------------------------------------------------------------
> ----------------------------------
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From luke-tierney at uiowa.edu  Sat May  5 00:33:20 2018
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Fri, 4 May 2018 17:33:20 -0500 (CDT)
Subject: [Rd] Debugging "SETLENGTH() cannot be applied to an ALTVEC
 object."?
In-Reply-To: <CANdJ3dV4+Cv+AkVR6EXToH39uZ+P7fo1qgW_EewkTLKJRAyvpQ@mail.gmail.com>
References: <CANdJ3dV4+Cv+AkVR6EXToH39uZ+P7fo1qgW_EewkTLKJRAyvpQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.20.1805041730220.12276@luke-Latitude-7480>

The Debian failure is in R-devel, and you should see the same failure
in R-devel on all platforms. A recent change in R-devel has unmasked
an issue in data.table that needs to be fixed. The data.table
maintainer is working on this.

Best,

luke

On Fri, 4 May 2018, Tal Galili wrote:

> Hi all,
> I wish to push a new version of a package (heatmaply).
>
> I sent it to winbuild with no issues but after submitting it to CRAN I got
> an update that it breaks on Debian, see:
>
> package heatmaply_0.15.0.tar.gz does not pass the incoming checks
> automatically, please see the following pre-tests:
> Windows: <https://win-builder.r-project.org/incoming_pretest/
> heatmaply_0.15.0_20180502_082353/Windows/00check.log>
> Status: OK
> Debian: <https://win-builder.r-project.org/incoming_pretest/
> heatmaply_0.15.0_20180502_082353/Debian/00check.log>
> Status: 1 ERROR, 1 WARNING
>
>
>
> Looking at the errors I get, they are all of the type:
> "SETLENGTH() cannot be applied to an ALTVEC object."
> I assume this is somehow related to changes in R 3.5.0 (maybe related to
> this
> <https://github.com/wch/r-source/commit/0ba66a2bc236ae5b009af910688575aa4adddd2c>?),
> but I'm not sure how to debug it (as I don't have this environment set-up),
> not am I sure what is actually causing the issue.
>
> Any suggestions would be most appreciated.
>
> (I debated if to post it here or on r-package-devel, and it seems a more
> general R issue than package development issue - but feel free to correct
> me about this if you think otherwise)
>
> Cheers,
> Tal
>
>
>
>
>
>
> ----------------Contact
> Details:-------------------------------------------------------
> Tal Galili, Ph.D. in Statistics
>
> Tal.Galili at gmail.com
>
> www.r-statistics.com (English)
> www.biostatistics.co.il (Hebrew)  | www.talgalili.com (Hebrew)
> ----------------------------------------------------------------------------------------------
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From boennecd @ending from gm@il@com  Sat May  5 12:32:33 2018
From: boennecd @ending from gm@il@com (Benjamin Christoffersen)
Date: Sat, 5 May 2018 12:32:33 +0200
Subject: [Rd] Bug in profile.nls with algorithm = "plinear"
Message-ID: <CAHHSL8v4YOUCiGczY8OJdg+903u=kvk98+7+4Bj0kkqP5kBUWw@mail.gmail.com>

Dear sirs

It seems like there is a bug in `profile.nls` with `algorithm =
"plinear"` when a matrix is supplied on the right hand side. Here is
the bug and a potential fix

#####
# example where profile.nls does not work with `plinear` but does with
# `default`
require(graphics)
set.seed(1)
DNase1 <- subset(DNase, Run == 1)
x <- rnorm(nrow(DNase1))

f1 <- nls(density ~ b1/(1 + exp((xmid - log(conc))/scal)) + b2 / x,
          data = DNase1, start = list(xmid = 0, scal = 1, b1 = 1, b2 = 1))
coef   (f1)
#R>      xmid      scal        b1        b2
#R> 1.5055308 1.0455951 2.3707962 0.0006887
confint(f1)
#R> Waiting for profiling to be done...
#R>          2.5%    97.5%
#R> xmid  1.323034 1.727130
#R> scal  0.974952 1.123036
#R> b1    2.193703 2.600172
#R> b2   -0.001597 0.002978

f2 <- nls(density ~ cbind(1/(1 + exp((xmid - log(conc))/scal)), x),
          data = DNase1, start = list(xmid = 0, scal = 1),
          algorithm = "plinear")
coef   (f2)
#R>    xmid     scal    .lin1   .lin.x
#R> 1.461636 1.028726 2.323707 0.008807
confint(f2) # this fails
#R> Waiting for profiling to be done...
#R> Error in attr(ans, "gradient")[c(TRUE, TRUE, TRUE, TRUE, TRUE,
TRUE, TRUE,  :
#R>  (subscript) logical subscript too long
traceback()
# [output output abbreviated]

#####
# It seems to fail due to the dimension in gradCall
environment(f1$m$setPars)$gradCall
#R> attr(ans, "gradient")[c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,
#R> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE),
#R>    c(TRUE, TRUE, TRUE, TRUE), drop = FALSE]
(ca <- environment(f2$m$setPars)$gradCall)
#R> attr(ans, "gradient")[c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,
#R> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE),
#R>    c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,
#R>    TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), c(TRUE, TRUE)]

f2$m$setVarying
# [output output abbreviated]
environment(f2$m$setVarying)$getRHS.varying
#R> function ()
#R> {
#R>    ans <- getRHS.noVarying()
#R>    attr(ans, "gradient") <- eval(gradCall)
#R>    ans
#R> }
#R> <bytecode: 0x000000000ce31768>
#R> <environment: 0x000000000cbdbad0>
dim(attr(environment(f2$m$setVarying)$getRHS.noVarying(), "gradient"))
#R> [1] 16  2  2
sapply(ca[3:5], length)
#R> [1] 16 16  2

#####
# It seems like the `nlsModel.plinear` in `stats/R/nls.R` should be
#
#   # ...
#   for(i in 1:marg + 1L)
#      gradSetArgs[[i]] <- rep_len(TRUE, dimGrad[i-1])
#   # ...
#   gradCall <-
#     switch(length(gradSetArgs) - 1L,
#            call("[", gradSetArgs[[1L]], drop = FALSE, gradSetArgs[[2L]]),
#            call("[", gradSetArgs[[1L]], drop = FALSE,
gradSetArgs[[2L]], gradSetArgs[[3L]]),
#            call("[", gradSetArgs[[1L]], drop = FALSE,
gradSetArgs[[2L]], gradSetArgs[[3L]],
#                 gradSetArgs[[4L]]),
#            call("[", gradSetArgs[[1L]], drop = FALSE,
gradSetArgs[[2L]], gradSetArgs[[3L]],
#                 gradSetArgs[[4L]], gradSetArgs[[5L]]))

# this seems to fix the problem.
source("R/nls_mod.R") # `nls_mod` is assigned in `R/nls_mod.R`
f3 <- nls_mod(density ~ cbind(1/(1 + exp((xmid - log(conc))/scal)), x),
              data = DNase1, start = list(xmid = 0, scal = 1),
              algorithm = "plinear")
confint(f3)
#R> Waiting for profiling to be done...
#R>       2.5% 97.5%
#R> xmid 1.3169 1.635
#R> scal 0.9667 1.096

#####
# The example on the help page still gives the same
ca <- quote(nls(density ~ 1/(1 + exp((xmid - log(conc))/scal)),
                data = DNase1,
                start = list(xmid = 0, scal = 1),
                algorithm = "plinear"))
confint(eval(ca))
#R> Waiting for profiling to be done...
#R>       2.5% 97.5%
#R> xmid 1.3225 1.677
#R> scal 0.9748 1.114

ca[[1]] <- quote(nls_mod)
confint(eval(ca))
#R> Waiting for profiling to be done...
#R>       2.5% 97.5%
#R> xmid 1.3225 1.677
#R> scal 0.9748 1.114

#####
# session info
sessionInfo()
#R> R version 3.5.0 (2018-04-23)
#R> Platform: x86_64-w64-mingw32/x64 (64-bit)
#R> Running under: Windows >= 8 x64 (build 9200)
#R>
#R> Matrix products: default
#R>
#R> locale:
#R> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
States.1252    LC_MONETARY=English_United States.1252
#R> [4] LC_NUMERIC=C                           LC_TIME=English_United
States.1252
#R>
#R> attached base packages:
#R> [1] stats     graphics  grDevices utils     datasets  methods   base
#R>
#R> loaded via a namespace (and not attached):
#R> [1] MASS_7.3-49     compiler_3.5.0  tools_3.5.0     packrat_0.4.8-1

From @uh@rto_@nggono @ending from y@hoo@com  Sun May  6 13:44:04 2018
From: @uh@rto_@nggono @ending from y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Sun, 6 May 2018 11:44:04 +0000 (UTC)
Subject: [Rd] length of `...`
References: <861166304.350881.1525607044978.ref@mail.yahoo.com>
Message-ID: <861166304.350881.1525607044978@mail.yahoo.com>

Does anyone notice r-devel thread "stopifnot() does not stop at first non-TRUE argument" starting with https://stat.ethz.ch/pipermail/r-devel/2017-May/074179.html ?

I have mentioned
(function(...)nargs())(...)
in https://stat.ethz.ch/pipermail/r-devel/2017-May/074294.html .

Something like ..elt(n) is switch(n, ...) . I have mentioned it in https://stat.ethz.ch/pipermail/r-devel/2017-May/074270.html . See also response in https://stat.ethz.ch/pipermail/r-devel/2017-May/074282.html .

By the way, because 'stopifnot' in R 3.5.0 contains argument other than '...', it might be better to use
match.call(expand.dots=FALSE)$...
instead of
match.call()[-1L] .

-------------------------------------------
>>>>> Joris Meys <jorismeys at gmail.com>
>>>>>     on Fri, 4 May 2018 15:37:27 +0200 writes:

    > The one difference I see, is the necessity to pass the dots to the function
    > dotlength :

    > dotlength <- function(...) nargs()

    > myfun <- function(..., someArg = 1){
    > n1 <- ...length()
    > n2 <- dotlength()
    > n3 <- dotlength(...)
    > return(c(n1, n2, n3))
    > }

    > myfun(stop("A"), stop("B"), someArg = stop("c"))

    > I don't really see immediately how one can replace the C definition with
    > Hadley's solution without changing how the function has to be used.

Yes, of course:  nargs() can only be applied to the function inside
which it is used, and hence  n2 <- dotlength()  must therefore be 0.
Thank you, Joris

    > Personally, I have no preference over the use, but changing it now would
    > break code dependent upon ...length() imho. Unless I'm overlooking
    > something of course.

Yes.  OTOH, as it's been very new, one could consider
deprecating it, and advertize say,  .length(...) instead of ...length()
[yes, in spite of the fact that the pure-R solution is slower
 than a primitive; both are fast enough for all purposes]

But such a deprecation cycle typically entails time more writing
etc, not something I've time for just these days.

Martin


    > On Fri, May 4, 2018 at 3:02 PM, Martin Maechler <maechler at stat.math.ethz.ch>
    > wrote:

    >> >>>>> Herv? Pag?s <hpages at fredhutch.org>
    >> >>>>>     on Thu, 3 May 2018 08:55:20 -0700 writes:
    >> 
    >> > Hi,
    >> > It would be great if one of the experts could comment on the
    >> > difference between Hadley's dotlength and ...length? The fact
    >> > that someone bothered to implement a new primitive for that
    >> > when there seems to be a very simple and straightforward R-only
    >> > solution suggests that there might be some gotchas/pitfalls with
    >> > the R-only solution.
    >> 
    >> Namely
    >> 
    >> > dotlength <- function(...) nargs()
    >> 
    >> > (This is subtly different from calling nargs() directly as it will
    >> > only count the elements in ...)
    >> 
    >> > Hadley
    >> 
    >> 
    >> Well,  I was the "someone".  In the past I had seen (and used myself)
    >> 
    >> length(list(...))
    >> 
    >> and of course that was not usable.
    >> I knew of some substitute() / match.call() tricks [but I think
    >> did not know Bill's cute substitute(...()) !] at the time, but
    >> found them too esoteric.
    >> 
    >> Aditionally and importantly,  ...length()  and  ..elt(n)  were
    >> developed  "synchronously",  and the R-substitutes for ..elt()
    >> definitely are less trivial (I did not find one at the time), as
    >> Duncan's example to Bill's proposal has shown, so I had looked
    >> at .Primitive() solutions of both.
    >> 
    >> In hindsight I should have asked here for advice,  but may at
    >> the time I had been a bit frustrated by the results of some of
    >> my RFCs ((nothing specific in mind !))
    >> 
    >> But __if__ there's really no example where current (3.5.0 and newer)
    >> 
    >> ...length()
    >> 
    >> differs from Hadley's  dotlength()
    >> I'd vert happy to replace ...length 's C based definition by
    >> Hadley's beautiful minimal solution.
    >> 
    >> Martin


From j@gorecki @ending from wit@edu@pl  Sun May  6 06:46:09 2018
From: j@gorecki @ending from wit@edu@pl (Jan Gorecki)
Date: Sun, 6 May 2018 10:16:09 +0530
Subject: [Rd] Sys.timezone (timedatectl) unnecessarily warns loudly
Message-ID: <CAOO9MKVAYTOVZ+h=zG6nUGdv4uHwa5aAnsCzCkuthGKgc_rEuw@mail.gmail.com>

Dear R-devels,

timedatectl binary used by Sys.timezone does not always work reliably.
If it doesn't the warning is raised, unnecessarily because later on
Sys.timezone gets timezone successfully from /etc/timezone. This
obviously might not be true for different linux OSes, but it solves
the issue for simple dockerized Ubuntu 16.04.

Current behavior R Under development (unstable) (2018-05-04 r74695) --
"Unsuffered Consequences"

  Sys.timezone()
  #Failed to create bus connection: No such file or directory
  #[1] "Etc/UTC"
  #Warning message:
  #In system("timedatectl", intern = TRUE) :
  #  running command 'timedatectl' had status 1

There was small discussion where I initially put comment about it in:
https://github.com/wch/r-source/commit/9866ac2ad1e2f1c4565ae829ba33b5b98a08d10d#r28867164

Below patch makes timedatectl call silent, both suppressWarnings and
ignore.stderr are required to deal with R warning, and warning printed
directly to console from timedatectl.

diff --git src/library/base/R/datetime.R src/library/base/R/datetime.R
index 6b34267936..b81c049f3e 100644
--- src/library/base/R/datetime.R
+++ src/library/base/R/datetime.R
@@ -73,7 +73,7 @@ Sys.timezone <- function(location = TRUE)
     ## First try timedatectl: should work on any modern Linux
     ## as part of systemd (and probably nowhere else)
     if (nzchar(Sys.which("timedatectl"))) {
-        inf <- system("timedatectl", intern = TRUE)
+        inf <- suppressWarnings(system("timedatectl", intern = TRUE,
ignore.stderr=TRUE))
         ## typical format:
         ## "       Time zone: Europe/London (GMT, +0000)"
         ## "       Time zone: Europe/Vienna (CET, +0100)"

Regards,
Jan Gorecki


From henrik@bengt@@on @ending from gm@il@com  Mon May  7 02:28:31 2018
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Sun, 6 May 2018 17:28:31 -0700
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <23276.5973.364064.237925@stat.math.ethz.ch>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>
 <23276.5973.364064.237925@stat.math.ethz.ch>
Message-ID: <CAFDcVCSifJv7ahCViXsHmDcON1RFTr7EbysBLW6EK72EFmFRKA@mail.gmail.com>

Thanks for the comments, feedback, and improvements.

I still argue that the current behavior cause more harm than it helps.

First of all, it increases the risk for code that does not work on all
platforms, which I'd say is one of the strengths and design goals of
R.  To write cross-platform code, a developer basically needs to
specify argument 'mode'.

A second problem is that people who work on non-Windows platforms will
not be aware of this problem.  Yes, adding this Windows-specific
behavior to the help on all platforms will help a bit (thanks for
doing that).  However, since there are so many non-Windows users out
there that write documentation, vignettes, blog posts, host classes
and workshops, it is quite likely that you'll see things like
"Download the data file using `download.file(url, file)` and then
...".  Boom, a "beginner" on Windows will have problems and even the
non-Windows instructor may not know what's going and quickly lots of
time is wasted.

A third problem is wasted bandwidth because the same file has to be
downloaded a second time.  If the default is changed to mode="wb" and
someone truly needs mode="w", the penalty should be smaller because
such text-based files are likely to be much smaller than binary files,
which are often several GiB these days.

What could lower the risk for the above,and help the user and helpers,
is to give an informative warning whenever 'mode' is not specified,
e.g.

   The file 'NNN' is downloaded as a text file (mode = "w"). If you
meant to download it as a binary file, specify mode = "wb".

Deprecating the default mode="w" on Windows can be done in steps, e.g.
by making the argument mandatory for a while. This could be done on
all platforms because we're already all affected, i.e. we need to
specify 'mode' to avoid surprises.

Even if the default won't change, below are some more
comments/observations that is related to the current implementation of
download.file() on Windows:

ADD MORE EXTENSIONS?

What about case-insensitive matching, e.g. data.ZIP and data.Rdata?

A quick scan of the R source code suggests that R is also working with
the following filename extensions (using various case styles):

* Rbin (src/library/tools/R/install.R)
* rda, Rda (tests/reg-tests-1a.R)
* rdb (src/library/tools/R/install.R)
* rds, RDS, Rds (src/library/tools/R/install.R)
* rdx (src/library/tools/R/install.R)
* RData, Rdata, rdata (src/library/tools/R/install.R)

Should the tar extension also be added?

What about binary image formats that R produces, e.g. filename
extensions bmp, jpg, jpeg, pdf, png, tif, tiff?

What about all the other file extensions that we know for sure are binary?


VECTORIZATION:

For some value of the 'method' argument, the current implementation
will download the same file differently depending on other files
downloaded at the same time.  For example, here a PNG file is
downloaded in text mode and its content is translated:

> urls <- c("https://www.r-project.org/logo/Rlogo.png")
> download.file(urls, destfile = basename(urls), method = "libcurl")
trying URL 'https://www.r-project.org/logo/Rlogo.png'
Content length 48148 bytes (47 KB)
downloaded 47 KB
> file.size(basename(urls))
[1] 48281

But if we throw in a "known" binary extension, the PNG file be
downloaded as binary:

> urls <- c("https://www.r-project.org/logo/Rlogo.png", "https://cran.r-project.org/bin/windows/contrib/3.6/future_1.8.1.zip")
> download.file(urls, destfile = basename(urls), method = "libcurl")
trying URL 'https://www.r-project.org/logo/Rlogo.png'
trying URL 'https://cran.r-project.org/bin/windows/contrib/3.6/future_1.8.1.zip'
> file.size(basename(urls))
[1]  48148 527069

Best,

Henrik

On Fri, May 4, 2018 at 1:18 AM, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>>>>>> Joris Meys <jorismeys at gmail.com>
>>>>>>     on Fri, 4 May 2018 10:00:07 +0200 writes:
>
>     > On Fri, May 4, 2018 at 8:34 AM, Tomas Kalibera
>     > <tomas.kalibera at gmail.com> wrote:
>
>     >> The current heuristic/hack is in line with the
>     >> compatibility approach: it detects files that are
>     >> obviously binary, so it changes the default behavior only
>     >> for cases when it would obviously cause damage.
>     >>
>     >> Tomas
>
>
>     > Well, I was trying to download a .gz file and
>     > download.file() didn't detect that. Reason for that is
>     > obviously that the link doesn't contain .gz but %2Egz ,
>     > using the ASCII code for the dot instead of the dot
>     > itself. That's general practice in a lot of links.
>
>     > Hence I propose to change the line in download.file() that
>     > does this check to:
>
>     >   if (missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
>     >       URLdecode(url))))
>
>     > using URLdecode() ensures that .gz, .RData etc will be
>     > detected correctly in an encoded URL.
>
>     > Cheers Joris
>
> Makes sense to me and I plan to add it when also adding '.rds'
>
> { OTOH, after reading the thread about this: Shouldn't you make
>   your code more robust and use   mode = "wb" (or "ab") in any case?
>   ;-)
> }
>
> Martin
>


From jori@mey@ @ending from gm@il@com  Mon May  7 10:49:00 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Mon, 7 May 2018 10:49:00 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAFDcVCSifJv7ahCViXsHmDcON1RFTr7EbysBLW6EK72EFmFRKA@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>
 <23276.5973.364064.237925@stat.math.ethz.ch>
 <CAFDcVCSifJv7ahCViXsHmDcON1RFTr7EbysBLW6EK72EFmFRKA@mail.gmail.com>
Message-ID: <CAO1zAVYonxwXaGzueAvyKqR6LetQS8sZwrmXO4+WoK9vJVuJ_Q@mail.gmail.com>

Martin, also from me a heartfelt thank you for taking care of this. Some
thoughts on Henrik's response:

On Mon, May 7, 2018 at 2:28 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com
> wrote:

>
> I still argue that the current behavior cause more harm than it helps.
>

I agree with your analysis of the problems this legacy behaviour causes.

Deprecating the default mode="w" on Windows can be done in steps, e.g.
> by making the argument mandatory for a while. This could be done on
> all platforms because we're already all affected, i.e. we need to
> specify 'mode' to avoid surprises.
>

That sounds like a reasonable way to move away from this discrepancy
between OS.


> What about case-insensitive matching, e.g. data.ZIP and data.Rdata?
>

Totally agree, and easily solved by eg adding ignore.case = TRUE to the
grep() call.


> A quick scan of the R source code suggests that R is also working with
> the following filename extensions (using various case styles):
>
> What about all the other file extensions that we know for sure are binary?
>

If the default isn't changed, doesn't it make more sense to actually turn
the logic around? Text files that are downloaded over the internet are
almost always .txt, .csv, or a few other extensions used for text data .
Those are actually the only files where some people with very old Windows
programs for text processing can get into trouble. So instead of adding
every possible binary extension, one can put "wb" as default and change to
"w" if it is a text file instead of the other way around. That would not
change the concept of the behaviour, but ensures that the function doesn't
fail to detect a binary file. Not detecting a text file is far less of a
problem, as not converting the line endings doesn't destruct the file.

Cheers
Joris

-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From i @ending from @zurefx@n@me  Mon May  7 13:23:33 2018
From: i @ending from @zurefx@n@me (Azure)
Date: Mon, 7 May 2018 11:23:33 +0000
Subject: [Rd] 
 [Bug report] Chinese characters are not handled correctly in
 Rterm for Windows
In-Reply-To: <c7dd51ea-0283-ff7f-9247-eaee27606962@gmail.com>
References: <PS1PR0302MB250778E72D430F253CBE11AFDDDF0@PS1PR0302MB2507.apcprd03.prod.outlook.com>
 <5dd8df1b-50ae-bf59-a0dd-8af57feec541@gmail.com>
 <SG2PR03MB286489FB462DEF379685AB35DD8C0@SG2PR03MB2864.apcprd03.prod.outlook.com>,
 <c7dd51ea-0283-ff7f-9247-eaee27606962@gmail.com>
Message-ID: <KU1PR03MB285546CBD4CD50009C466D89DD9B0@KU1PR03MB2855.apcprd03.prod.outlook.com>

Hi Tomas,

The crash is no longer happening on Windows 10 16299 (R-devel 74699). I have seen your fix in trunk at 74693, which replaced ReadConsoleInputA with the -W alternative. Then I tested the A version on Win10 16299 and Win7 7600 with this code [ https://paste.ubuntu.com/p/Ggm6867yFC/ ]. The bytes of an MBCS string may not arrive at the buffer simutaneously, so GetNumberOfConsoleInputEvents can be used to determine the unread event count (to receive the full byte sequence). However, this API usually fails to return the correct number when MBCS characters are present.

On Windows 7, when I type U+4F60 U+597D in the test program, I get the following output (CP936):
[c4 | c4] [e3 | e3]
[ba | ba]
[c3 | 59c3]
The first group contains only two bytes. If I read the buffer with the W function, this is the expected behavior (I don't know what is "documented" before).
And the second character is splitted into two "groups".

On Windows 10 16299, only the first three bytes are available:
[c4 | c4] [e3 | e3]
[ba | ba]
The last byte can only be retrieved by emitting another console event (e.g. move the mouse cursor around).

Since the Windows kernel already supports Unicode, the -A functions are only provided for backward compatibility. (In fact, it converts the charset and calls the -W function so it is slower.)

>Could you please verify the printed characters are ok with this setting?
Unfortunately, when I set LC_CTYPE=C in cmd and run R, all Chinese characters became gibberish, and I cannot reproduce the problem with your sample code. Whether setlocal() was called or not, all the characters were displayed correctly.
Then I used Locale Emulator to change the default charset to English, and these behaviors are not affected.
(LE actually changes the option in [ Control Panel > Clock, Language, and Region > Region and Language > Administrative > Language for non-Unicode programs ] for a single program without restarting the computer. This option means the charset used for -A (ANSI) APIs.)

As far as I know, WriteConsoleW function can override locale settings, console codepages and system-wide ANSI charsets. Would you consider using this one?

Thanks,
i at azurefx.name

Tomas Kalibera <tomas.kalibera at gmail.com> 2018/5/4 19:56
>Thanks for the update. I believe I've fixed a part of the problem you 
>have reported, the crash while entering Chinese characters to the 
>console (e.g. via Pinyin, the error message about invalid multibyte 
>character in mbcs_get_next). The fix is in R-devel 74693 - Windows 
>function ReadConsoleInputA no longer works with multibyte characters (it 
>is not documented, probably a Windows bug, according to reports online 
>this problem exists since Windows 8, but I only reproduced/tested in 
>Windows 10). Could you please verify the crash is no longer happening on 
>your system?
>
>Re the other problem, Chinese characters not being displayed. I found 
>this is caused by R calling setlocale(LC_CTYPE, *). Setting this to 
>"Chinese" and variants (code page 936) causes the problem, but running 
>in the "C" locale as per default works fine. This is easily reproduced 
>by an external program below - when setlocale() is called, the Chinese 
>character disappears from the output. A workaround is to run R with 
>environment variable LC_CTYPE=C. Could you please verify the printed 
>characters are ok with this setting? Would you have an explanation for 
>this behavior? It seems a bit odd - why would the CRT remove characters 
>valid in the console code page, when both the console code page and the 
>"setlocale" code page are 936.
>
>Thanks
>Tomas
>
>     #include <stdio.h>
>     #include <locale.h>
>     int main(int argc, char **argv) {
>         //if (!setlocale(LC_CTYPE, "Chinese")) fprintf(stderr, 
>"setlocale failed\n");
>         int chars[] = { 67, 196, 227, 68 };
>         for(int i = 0; i < 4; i++) fputc(chars[i], stdout);
>         fprintf(stdout, "\n");
>         return 0;
>     }
>
>On 04/28/2018 04:53 PM, Azure wrote:
>> Hi Tomas,
>>
>> Sorry for the delayed response. I have tested the problem on the latest R-devel build (2018-04-27 r74651), and it still exists. RGui is always fine with Chinese characters, but some IDEs rely on the CLI version of R (e.g. Visual Studio Code with R plugin).
>>
>>> Your example  print("ABC\u4f60\u597dDEF") is printing two Chinese characters, right?
>> Yes. U+4F60, U+597D or C4E3, BAC3 in CP936.
>>
>>> Could you reproduce the problem with printing just one of the characters, say print("ABC\u4f60DEF") ?
>> Yes. The console output is pasted in [ https://paste.ubuntu.com/p/TYgZWhdgXK/ ] (to avoid gibberish in e-mail).
>> The Active Code Page is 936 before and after running Rterm.
>>
>>> As a sanity check - does this display the correct characters in RGui?
>> Yes.
>>
>>> If you take the sequence of the "fputc" commands you captured by the debugger, and create a trivial console application to just run them - would the characters display correctly in the same terminal from which you run R.exe?
>> Yes. I created an Win32 Console Application in VS [ https://paste.ubuntu.com/p/h3NFV6nQvs/ ], and all the characters were displayed correctly in two ways. The WriteConsoleA variant uses the current console CP settings, and it should behave like fputc.
>>
>> I guess the Rterm uses its own console I/O mechanism so the 2nd parameter of fputc is not stdout's handle. (I tried to read the source but unable to figure out how it works). The crash in mbcs_get_next, which is also mentioned in the previous post, may be related to this mechanism.
>>
>> If you need further information, please let me know.
>>
>> Thanks,
>> i at azurefx.name
>>
>>
>> Tomas Kalibera <tomas.kalibera at gmail.com> 2018/4/5 22:42
>>>
>>> Thank you for the report and initial debugging. I am not sure what is going wrong, we may have to rely on your help to debug this (I do not have a system to reproduce on). A user-targeted advice would be to use RGui (Rgui.exe).
>>>
>>> Does the problem also exist in R-devel?
>>> https://cran.r-project.org/bin/windows/base/rdevel.html
>>>
>>> Your example  print("ABC\u4f60\u597dDEF") is printing two Chinese characters, right? The first one is C4E3 in CP936 (4F60 in Unicode) and the second one is BAC3 in CP936 (597D in Unicode)? Could you reproduce the problem with printing just one of the characters,  say print("ABC\u4f60DEF") ?
>>>
>>> As a sanity check - does this display the correct characters in RGui? It should, and does on my system, as RGui uses Unicode internally. By correct I mean the characters shown e.g. here
>>>
>>> https://msdn.microsoft.com/en-us/library/cc194923.aspx
>>> https://msdn.microsoft.com/en-us/library/cc194920.aspx
>>>
>>> What is the output of "chcp" in the terminal, before you run R.exe? It may be different from what Sys.getlocale() gives in R.
>>>
>>> If you take the sequence of the "fputc" commands you captured by the debugger, and create a trivial console application to just run them - would the characters display correctly in the same terminal from which you run R.exe?
>>>
>>> Thanks
>>> Tomas
>>>
>>>
>>>

From hugh@p@r@on@ge @ending from gm@il@com  Mon May  7 14:32:36 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Mon, 7 May 2018 22:32:36 +1000
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAO1zAVYonxwXaGzueAvyKqR6LetQS8sZwrmXO4+WoK9vJVuJ_Q@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>
 <23276.5973.364064.237925@stat.math.ethz.ch>
 <CAFDcVCSifJv7ahCViXsHmDcON1RFTr7EbysBLW6EK72EFmFRKA@mail.gmail.com>
 <CAO1zAVYonxwXaGzueAvyKqR6LetQS8sZwrmXO4+WoK9vJVuJ_Q@mail.gmail.com>
Message-ID: <CAJmOi+ObVmZwVuRAj0d0=ioDeBXvNRHkT72wVsOgOAZntSHH6Q@mail.gmail.com>

I'd add my support for mode = "wb" to (eventually) become the default,
though I respect Tomas's comments about backwards-compatibility.

Instead of making the argument mandatory (which would immediately
break scripts -- even ones that won't be helped by changing to mode =
'wb') or otherwise changing behaviour, perhaps download.file could
start to emit a message (not a warning) whenever the argument is
missing on Windows. The message could say something like 'Using `mode
= 'w'` which will corrupt non-text files. Set `mode = 'wb'` for binary
downloads or see the help page for other options.' Emitting a message
has the lightest impact on existing scripts, while alerting new users
to future mistakes.

On 7 May 2018 at 18:49, Joris Meys <jorismeys at gmail.com> wrote:
> Martin, also from me a heartfelt thank you for taking care of this. Some
> thoughts on Henrik's response:
>
> On Mon, May 7, 2018 at 2:28 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com
>> wrote:
>
>>
>> I still argue that the current behavior cause more harm than it helps.
>>
>
> I agree with your analysis of the problems this legacy behaviour causes.
>
> Deprecating the default mode="w" on Windows can be done in steps, e.g.
>> by making the argument mandatory for a while. This could be done on
>> all platforms because we're already all affected, i.e. we need to
>> specify 'mode' to avoid surprises.
>>
>
> That sounds like a reasonable way to move away from this discrepancy
> between OS.
>
>
>> What about case-insensitive matching, e.g. data.ZIP and data.Rdata?
>>
>
> Totally agree, and easily solved by eg adding ignore.case = TRUE to the
> grep() call.
>
>
>> A quick scan of the R source code suggests that R is also working with
>> the following filename extensions (using various case styles):
>>
>> What about all the other file extensions that we know for sure are binary?
>>
>
> If the default isn't changed, doesn't it make more sense to actually turn
> the logic around? Text files that are downloaded over the internet are
> almost always .txt, .csv, or a few other extensions used for text data .
> Those are actually the only files where some people with very old Windows
> programs for text processing can get into trouble. So instead of adding
> every possible binary extension, one can put "wb" as default and change to
> "w" if it is a text file instead of the other way around. That would not
> change the concept of the behaviour, but ensures that the function doesn't
> fail to detect a binary file. Not detecting a text file is far less of a
> problem, as not converting the line endings doesn't destruct the file.
>
> Cheers
> Joris
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From becker@g@be @ending from gene@com  Mon May  7 17:06:09 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Mon, 7 May 2018 08:06:09 -0700
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CAJmOi+ObVmZwVuRAj0d0=ioDeBXvNRHkT72wVsOgOAZntSHH6Q@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CAO1zAVYnLqFZ3B3Sy8M+sYy0BzfAQ6-wfCQW=_U_Y39BwUcwBQ@mail.gmail.com>
 <23276.5973.364064.237925@stat.math.ethz.ch>
 <CAFDcVCSifJv7ahCViXsHmDcON1RFTr7EbysBLW6EK72EFmFRKA@mail.gmail.com>
 <CAO1zAVYonxwXaGzueAvyKqR6LetQS8sZwrmXO4+WoK9vJVuJ_Q@mail.gmail.com>
 <CAJmOi+ObVmZwVuRAj0d0=ioDeBXvNRHkT72wVsOgOAZntSHH6Q@mail.gmail.com>
Message-ID: <CAMFmJs=ECHpU2X9CNDheZ-1mQLPsZSiOSbRfKFhZcoLh1FmQhg@mail.gmail.com>

Hey all,

I don't have a strong opinion about whether the default should ultimately
eventually change or not. Many people who use windows (a set which does not
include me) seem to think it would be better.

I will say that like Hugh, I'm strongly against making the argument
mandatory as an interim step. That is much less backwards compatible (ie it
will break much more existing code) than just changing the default would. I
would be for smarter heuristics, perhaps a warning, and eventually a change
instead if the change is ultimately decided on as the way forward.

Best,
~G

On Mon, May 7, 2018 at 5:32 AM, Hugh Parsonage <hugh.parsonage at gmail.com>
wrote:

> I'd add my support for mode = "wb" to (eventually) become the default,
> though I respect Tomas's comments about backwards-compatibility.
>
> Instead of making the argument mandatory (which would immediately
> break scripts -- even ones that won't be helped by changing to mode =
> 'wb') or otherwise changing behaviour, perhaps download.file could
> start to emit a message (not a warning) whenever the argument is
> missing on Windows. The message could say something like 'Using `mode
> = 'w'` which will corrupt non-text files. Set `mode = 'wb'` for binary
> downloads or see the help page for other options.' Emitting a message
> has the lightest impact on existing scripts, while alerting new users
> to future mistakes.
>
> On 7 May 2018 at 18:49, Joris Meys <jorismeys at gmail.com> wrote:
> > Martin, also from me a heartfelt thank you for taking care of this. Some
> > thoughts on Henrik's response:
> >
> > On Mon, May 7, 2018 at 2:28 AM, Henrik Bengtsson <
> henrik.bengtsson at gmail.com
> >> wrote:
> >
> >>
> >> I still argue that the current behavior cause more harm than it helps.
> >>
> >
> > I agree with your analysis of the problems this legacy behaviour causes.
> >
> > Deprecating the default mode="w" on Windows can be done in steps, e.g.
> >> by making the argument mandatory for a while. This could be done on
> >> all platforms because we're already all affected, i.e. we need to
> >> specify 'mode' to avoid surprises.
> >>
> >
> > That sounds like a reasonable way to move away from this discrepancy
> > between OS.
> >
> >
> >> What about case-insensitive matching, e.g. data.ZIP and data.Rdata?
> >>
> >
> > Totally agree, and easily solved by eg adding ignore.case = TRUE to the
> > grep() call.
> >
> >
> >> A quick scan of the R source code suggests that R is also working with
> >> the following filename extensions (using various case styles):
> >>
> >> What about all the other file extensions that we know for sure are
> binary?
> >>
> >
> > If the default isn't changed, doesn't it make more sense to actually turn
> > the logic around? Text files that are downloaded over the internet are
> > almost always .txt, .csv, or a few other extensions used for text data .
> > Those are actually the only files where some people with very old Windows
> > programs for text processing can get into trouble. So instead of adding
> > every possible binary extension, one can put "wb" as default and change
> to
> > "w" if it is a text file instead of the other way around. That would not
> > change the concept of the behaviour, but ensures that the function
> doesn't
> > fail to detect a binary file. Not detecting a text file is far less of a
> > problem, as not converting the line endings doesn't destruct the file.
> >
> > Cheers
> > Joris
> >
> > --
> > Joris Meys
> > Statistical consultant
> >
> > Department of Data Analysis and Mathematical Modelling
> > Ghent University
> > Coupure Links 653, B-9000 Gent (Belgium)
> > <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-
> 9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
> >
> > -----------
> > Biowiskundedagen 2017-2018
> > http://www.biowiskundedagen.ugent.be/
> >
> > -------------------------------
> > Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From ccberry @ending from uc@d@edu  Tue May  8 00:16:15 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Mon, 7 May 2018 22:16:15 +0000
Subject: [Rd] BUG in .col(  c(1, 1) ) ?
Message-ID: <AD63FFC3-BDC8-4C5A-B5FE-695D6B29C3F9@ucsd.edu>

I would have expected coercion to an integer vector or at least a complaint that the user did not provide a valid matrix dimension.

> .col(c(1,1))
Error in .col(c(1, 1)) : 
  a matrix-like object is required as argument to 'col'
> .col(c(1L,1L))
     [,1]
[1,]    1
> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS High Sierra 10.13.4

Matrix products: default
BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.5.0
> 

HTH,

Chuck

p.s. Thanks for adding .col()

From becker@g@be @ending from gene@com  Tue May  8 04:04:19 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Tue, 08 May 2018 02:04:19 +0000
Subject: [Rd] Proposed speedup of ifelse
In-Reply-To: <CAJmOi+P=E89SG1-Xj3TKy92PgA9vV-72iU6gZQAPvOucY2=2fw@mail.gmail.com>
References: <mailman.46997.7.1525341602.26470.r-devel@r-project.org>
 <20180503150152.GA23984@mail.cs.toronto.edu>
 <CAJmOi+P=E89SG1-Xj3TKy92PgA9vV-72iU6gZQAPvOucY2=2fw@mail.gmail.com>
Message-ID: <CAMFmJsk8J=hEiZ78ct7TTBYqpvNZPVrmXGHtPmndVmKX4riXbg@mail.gmail.com>

Hugh,

(Note I speak for myself only and not for R-core) Thanks for looking into
this. I think it's great to have community members that are interested in
contributing to R and helping it continue to get better.

And I think, and my local experiments bear out, that using anyNA as a
fastpass condition does allow us to get a significant speedup over what's
in there now. To do so, though, I took a somewhat different approach than
your proposal:

ifelse2 = function(test, yes, no) {
    if (is.atomic(test)) {
        if (typeof(test) != "logical")
            storage.mode(test) <- "logical"
        if (length(test) == 1 && is.null(attributes(test))) {
            if (is.na(test))
                return(NA)
            else if (test) {
                if (length(yes) == 1) {
                    yat <- attributes(yes)
                    if (is.null(yat) || (is.function(yes) &&
identical(names(yat),

 "srcref")))
                        return(yes)
                }
            }
            else if (length(no) == 1) {
                nat <- attributes(no)
                if (is.null(nat) || (is.function(no) &&
identical(names(nat),

"srcref")))
                    return(no)
            }
        }
    }
    else test <- if (isS4(test))
                     methods::as(test, "logical")
                 else as.logical(test)
    ## this is to ensure the documented behavior re: attributes of result
    ans <- test
    len = length(ans)
    if(nonas <- !anyNA(test)) {
        ypos = test
        npos = !test
    } else {
        ok <- !(nas <- is.na(test))
        ypos = test & ok
        npos = !test & ok
    }
    if(any(ypos, na.rm = TRUE)) ##equivalent to any(test[ok])
        ans[ypos] = rep(yes, length.out = len)[ypos]
    if(any(npos, na.rm = TRUE)) ##equivalent to any(!test[ok])
        ans[npos] = rep(no, length.out = len)[npos]
    ## This is in the original but I don't see why it's necessary
    ## due to ans being initialized to test. The NAs should already
    ## be there...
    if(!nonas)
        ans[nas] = NA
    ans
}

On my machine, after an initial call to invoke the JIT and get the function
compiled, this is faster at lengths of test 100 and 10000 (with the lengths
of yes and no at 10% of the length of test) by ~1.7x and ~2x respectively
for no NAs and ~1.3x and ~1.6x respectively for 10% NAs.

The key, from what I saw, is to avoid as much &ing and subsetting as we
can.  If there are no NAs none of the test&ok or test[ok] operations do
anything because ok has only TRUEs in it. Even when there are, we want to
do the & once and avoid test[ok].

There are further savings for the NAs present case if I'm correct about the
ans[nas] = NA being redundant and we're able to remove that as well.

I'm happy to submit this as a patch and share credit if that is ok with
you. Let me know.

Best,

On Thu, May 3, 2018 at 9:58 PM, Hugh Parsonage <hugh.parsonage at gmail.com>
wrote:

> Thanks Radford. I concur with all your points. I've attempted to address
> the issues you raised through the github.io post.  The new method appears
> to be slower for test lengths < 100 and possibly longer lengths (not just <
> 10). Of course length(test) < 100 is very quick, so I simply added this to
> the conditions that cause the old ifelse method to be invoked. I'll leave
> it to R-core to decide whether or not the benefits for longer vectors are
> worth it.
>
>
>
>
>
>
> On Fri, 4 May 2018 at 01:01 Radford Neal <radford at cs.toronto.edu> wrote:
>
> > > I propose a patch to ifelse that leverages anyNA(test) to achieve an
> > > improvement in performance. For a test vector of length 10, the change
> > > nearly halves the time taken and for a test of length 1 million, there
> > > is a tenfold increase in speed. Even for small vectors, the
> > > distributions of timings between the old and the proposed ifelse do
> > > not intersect.
> >
> > For smaller vectors, your results are significantly affected by your
> > invoking the old version via base::ifelse.  You could try defining
> > your new version as new_ifelse, and invoking the old version as just
> > ifelse.  There might still be some issues with the two versions having
> > different context w.r.t environments, and hence looking up functions
> > in different ways.  You could copy the code of the old version and
> > define it in the global environment just like new_ifelse.
> >
> > When using ifelse rather than base::ifelse, it seems the new version
> > is slower for vectors of length 10, but faster for long vectors.
> >
> > Also, I'd use system.time rather than microbenchmark.  The latter will
> > mix invocations of the two functions in a way where it is unclear that
> > garbage collection time will be fairly attributed.  Also, it's a bit
> > silly to plot the distributions of times, which will mostly reflect
> > variations in when garbage collections at various levels occur - just
> > the mean is what is relevant.
> >
> > Regards,
> >
> >    Radford Neal
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From hugh@p@r@on@ge @ending from gm@il@com  Tue May  8 04:28:35 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Tue, 8 May 2018 12:28:35 +1000
Subject: [Rd] Proposed speedup of ifelse
In-Reply-To: <CAMFmJsk8J=hEiZ78ct7TTBYqpvNZPVrmXGHtPmndVmKX4riXbg@mail.gmail.com>
References: <mailman.46997.7.1525341602.26470.r-devel@r-project.org>
 <20180503150152.GA23984@mail.cs.toronto.edu>
 <CAJmOi+P=E89SG1-Xj3TKy92PgA9vV-72iU6gZQAPvOucY2=2fw@mail.gmail.com>
 <CAMFmJsk8J=hEiZ78ct7TTBYqpvNZPVrmXGHtPmndVmKX4riXbg@mail.gmail.com>
Message-ID: <CAJmOi+OJjVs9RXaKPeAp17tg9qBjpC72UQEwHKW5ZfHJF3ze5g@mail.gmail.com>

Thanks Gabe, and yes happy for you to submit the patch.

Some thoughts I've had in the interim:

1. Matt Dowle encouraged me to submit a patch as it could improve the
CRAN check farm timings since `ifelse` is presumably used a lot. I
thought the biggest benefit might come by improving the speed when
length(test) is large, though on reflection this may not be the case.
ifelse may be used much more often on small vectors.

2. a[which(x)] seems to be faster than a[x & !is.na(x)] but, again,
not really enough for small x

3. I think the documentation should note that if test is an S4 object
the value of ifelse may not retain its attributes in the first or
second sentence of the "Value" section.


On 8 May 2018 at 12:04, Gabe Becker <becker.gabe at gene.com> wrote:
> Hugh,
>
> (Note I speak for myself only and not for R-core) Thanks for looking into
> this. I think it's great to have community members that are interested in
> contributing to R and helping it continue to get better.
>
> And I think, and my local experiments bear out, that using anyNA as a
> fastpass condition does allow us to get a significant speedup over what's in
> there now. To do so, though, I took a somewhat different approach than your
> proposal:
>
> ifelse2 = function(test, yes, no) {
>     if (is.atomic(test)) {
>         if (typeof(test) != "logical")
>             storage.mode(test) <- "logical"
>         if (length(test) == 1 && is.null(attributes(test))) {
>             if (is.na(test))
>                 return(NA)
>             else if (test) {
>                 if (length(yes) == 1) {
>                     yat <- attributes(yes)
>                     if (is.null(yat) || (is.function(yes) &&
> identical(names(yat),
>
> "srcref")))
>                         return(yes)
>                 }
>             }
>             else if (length(no) == 1) {
>                 nat <- attributes(no)
>                 if (is.null(nat) || (is.function(no) &&
> identical(names(nat),
>
> "srcref")))
>                     return(no)
>             }
>         }
>     }
>     else test <- if (isS4(test))
>                      methods::as(test, "logical")
>                  else as.logical(test)
>     ## this is to ensure the documented behavior re: attributes of result
>     ans <- test
>     len = length(ans)
>     if(nonas <- !anyNA(test)) {
>         ypos = test
>         npos = !test
>     } else {
>         ok <- !(nas <- is.na(test))
>         ypos = test & ok
>         npos = !test & ok
>     }
>     if(any(ypos, na.rm = TRUE)) ##equivalent to any(test[ok])
>         ans[ypos] = rep(yes, length.out = len)[ypos]
>     if(any(npos, na.rm = TRUE)) ##equivalent to any(!test[ok])
>         ans[npos] = rep(no, length.out = len)[npos]
>     ## This is in the original but I don't see why it's necessary
>     ## due to ans being initialized to test. The NAs should already
>     ## be there...
>     if(!nonas)
>         ans[nas] = NA
>     ans
> }
>
> On my machine, after an initial call to invoke the JIT and get the function
> compiled, this is faster at lengths of test 100 and 10000 (with the lengths
> of yes and no at 10% of the length of test) by ~1.7x and ~2x respectively
> for no NAs and ~1.3x and ~1.6x respectively for 10% NAs.
>
> The key, from what I saw, is to avoid as much &ing and subsetting as we can.
> If there are no NAs none of the test&ok or test[ok] operations do anything
> because ok has only TRUEs in it. Even when there are, we want to do the &
> once and avoid test[ok].
>
> There are further savings for the NAs present case if I'm correct about the
> ans[nas] = NA being redundant and we're able to remove that as well.
>
> I'm happy to submit this as a patch and share credit if that is ok with you.
> Let me know.
>
> Best,
>
> On Thu, May 3, 2018 at 9:58 PM, Hugh Parsonage <hugh.parsonage at gmail.com>
> wrote:
>>
>> Thanks Radford. I concur with all your points. I've attempted to address
>> the issues you raised through the github.io post.  The new method appears
>> to be slower for test lengths < 100 and possibly longer lengths (not just
>> <
>> 10). Of course length(test) < 100 is very quick, so I simply added this to
>> the conditions that cause the old ifelse method to be invoked. I'll leave
>> it to R-core to decide whether or not the benefits for longer vectors are
>> worth it.
>>
>>
>>
>>
>>
>>
>> On Fri, 4 May 2018 at 01:01 Radford Neal <radford at cs.toronto.edu> wrote:
>>
>> > > I propose a patch to ifelse that leverages anyNA(test) to achieve an
>> > > improvement in performance. For a test vector of length 10, the change
>> > > nearly halves the time taken and for a test of length 1 million, there
>> > > is a tenfold increase in speed. Even for small vectors, the
>> > > distributions of timings between the old and the proposed ifelse do
>> > > not intersect.
>> >
>> > For smaller vectors, your results are significantly affected by your
>> > invoking the old version via base::ifelse.  You could try defining
>> > your new version as new_ifelse, and invoking the old version as just
>> > ifelse.  There might still be some issues with the two versions having
>> > different context w.r.t environments, and hence looking up functions
>> > in different ways.  You could copy the code of the old version and
>> > define it in the global environment just like new_ifelse.
>> >
>> > When using ifelse rather than base::ifelse, it seems the new version
>> > is slower for vectors of length 10, but faster for long vectors.
>> >
>> > Also, I'd use system.time rather than microbenchmark.  The latter will
>> > mix invocations of the two functions in a way where it is unclear that
>> > garbage collection time will be fairly attributed.  Also, it's a bit
>> > silly to plot the distributions of times, which will mostly reflect
>> > variations in when garbage collections at various levels occur - just
>> > the mean is what is relevant.
>> >
>> > Regards,
>> >
>> >    Radford Neal
>> >
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
>
> --
> Gabriel Becker, Ph.D
> Scientist
> Bioinformatics and Computational Biology
> Genentech Research


From h@wickh@m @ending from gm@il@com  Tue May  8 17:15:43 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Tue, 8 May 2018 08:15:43 -0700
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
Message-ID: <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>

On Thu, May 3, 2018 at 11:34 PM, Tomas Kalibera
<tomas.kalibera at gmail.com> wrote:
> On 05/03/2018 11:14 PM, Henrik Bengtsson wrote:
>>
>> Also, as mentioned in my
>> https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html, when
>> not specifying the mode argument, the default on Windows is mode = "w"
>> *except* for certain, case-sensitive, filename extensions:
>>
>>      if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
>> url)))
>>          mode <- "wb"
>>
>> Just like the need for mode = "wb" on Windows, the above
>> special-file-extension-hack is only happening on Windows, and is only
>> documented in ?download.file if you're on Windows; so someone who's on
>> Linux/macOS trying to help someone on Windows may not be aware of
>> this. This adds to even more confusions, e.g. "works for me".
>
> If we were designing the API today, it would probably make more sense not to
> convert any line endings by default. Today's editors _usually_ can cope with
> different line endings and it is probably easier to detect that a text file
> has incorrect line endings rather than detecting that a binary file has been
> corrupted by an attempt to convert line endings. But whether to change
> existing, documented behavior is a different question. In order to help
> users and programmers who do not read the documentation carefully we would
> create problems for users and programmers who do. The current heuristic/hack
> is in line with the compatibility approach: it detects files that are
> obviously binary, so it changes the default behavior only for cases when it
> would obviously cause damage.

>From a purely utilitarian standpoint, there are far more users who do
not carefully read the documentation than users who do ;)

(I'd also argue that basing the decision on the file extension is
suboptimal, and it would be better to use the mime type if provided by
the server)

Hadley

-- 
http://hadley.nz


From hp@ge@ @ending from fredhutch@org  Tue May  8 18:04:58 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 8 May 2018 09:04:58 -0700
Subject: [Rd] length of `...`
In-Reply-To: <23276.23006.334586.473944@stat.math.ethz.ch>
References: <d0b68216-4922-2249-e5e6-1589345dc6d7@kogentum.hu>
 <CAF8bMcaRW88VdyXw-kmCa9dw-awBiNiU+j+nktLRACCj4grPdQ@mail.gmail.com>
 <37141c6a-831b-b74a-7abf-a36d64130f81@gmail.com>
 <CABdHhvHzGECDQBsZsXTbakNGW7JuX4tw46_KmcYX8_b3kMB=Fg@mail.gmail.com>
 <3ffcd05b-6417-87be-94e0-f621c4a3116b@fredhutch.org>
 <23276.23006.334586.473944@stat.math.ethz.ch>
Message-ID: <2ce4d15c-87c4-68a7-e38c-31baf419ff8a@fredhutch.org>

Thanks Martin for the clarifications.  H.

On 05/04/2018 06:02 AM, Martin Maechler wrote:
>>>>>> Herv? Pag?s <hpages at fredhutch.org>
>>>>>>      on Thu, 3 May 2018 08:55:20 -0700 writes:
> 
>      > Hi,
>      > It would be great if one of the experts could comment on the
>      > difference between Hadley's dotlength and ...length? The fact
>      > that someone bothered to implement a new primitive for that
>      > when there seems to be a very simple and straightforward R-only
>      > solution suggests that there might be some gotchas/pitfalls with
>      > the R-only solution.
> 
> Namely
> 
>> dotlength <- function(...) nargs()
> 
>> (This is subtly different from calling nargs() directly as it will
>> only count the elements in ...)
> 
>> Hadley
> 
> 
> Well,  I was the "someone".  In the past I had seen (and used myself)
> 
>     length(list(...))
> 
> and of course that was not usable.
> I knew of some substitute() / match.call() tricks [but I think
> did not know Bill's cute substitute(...()) !] at the time, but
> found them too esoteric.
> 
> Aditionally and importantly,  ...length()  and  ..elt(n)  were
> developed  "synchronously",  and the R-substitutes for ..elt()
> definitely are less trivial (I did not find one at the time), as
> Duncan's example to Bill's proposal has shown, so I had looked
> at .Primitive() solutions of both.
> 
> In hindsight I should have asked here for advice,  but may at
> the time I had been a bit frustrated by the results of some of
> my RFCs ((nothing specific in mind !))
> 
> But __if__ there's really no example where current (3.5.0 and newer)
> 
>    ...length()
> 
> differs from Hadley's  dotlength()
> I'd vert happy to replace ...length 's C based definition by
> Hadley's beautiful minimal solution.
> 
> Martin
> 
> 
>      > On 05/03/2018 08:34 AM, Hadley Wickham wrote:
>      >> On Thu, May 3, 2018 at 8:18 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>      >>> On 03/05/2018 11:01 AM, William Dunlap via R-devel wrote:
>      >>>>
>      >>>> In R-3.5.0 you can use ...length():
>      >>>> > f <- function(..., n) ...length()
>      >>>> > f(stop("one"), stop("two"), stop("three"), n=7)
>      >>>> [1] 3
>      >>>>
>      >>>> Prior to that substitute() is the way to go
>      >>>> > g <- function(..., n) length(substitute(...()))
>      >>>> > g(stop("one"), stop("two"), stop("three"), n=7)
>      >>>> [1] 3
>      >>>>
>      >>>> R-3.5.0 also has the ...elt(n) function, which returns
>      >>>> the evaluated n'th entry in ... , without evaluating the
>      >>>> other ... entries.
>      >>>> > fn <- function(..., n) ...elt(n)
>      >>>> > fn(stop("one"), 3*5, stop("three"), n=2)
>      >>>> [1] 15
>      >>>>
>      >>>> Prior to 3.5.0, eval the appropriate component of the output
>      >>>> of substitute() in the appropriate environment:
>      >>>> > gn <- function(..., n) {
>      >>>> +   nthExpr <- substitute(...())[[n]]
>      >>>> +   eval(nthExpr, envir=parent.frame())
>      >>>> + }
>      >>>> > gn(stop("one"), environment(), stop("two"), n=2)
>      >>>> <environment: R_GlobalEnv>
>      >>>>
>      >>>
>      >>> Bill, the last of these doesn't quite work, because ... can be passed down
>      >>> through a string of callers.  You don't necessarily want to evaluate it in
>      >>> the parent.frame().  For example:
>      >>>
>      >>> x <- "global"
>      >>> f <- function(...) {
>      >>> x <- "f"
>      >>> g(...)
>      >>> }
>      >>> g <- function(...) {
>      >>> firstExpr <- substitute(...())[[1]]
>      >>> c(list(...)[[1]], eval(firstExpr, envir = parent.frame()))
>      >>> }
>      >>>
>      >>> Calling g(x) correctly prints "global" twice, but calling f(x) incorrectly
>      >>> prints
>      >>>
>      >>> [1] "global" "f"
>      >>>
>      >>> You can get the first element of ... without evaluating the rest using ..1,
>      >>> but I don't know a way to do this for general n in pre-3.5.0 base R.
>      >>
>      >> If you don't mind using a package:
>      >>
>      >> # works with R 3.1 and up
>      >> library(rlang)
>      >>
>      >> x <- "global"
>      >> f <- function(...) {
>      >> x <- "f"
>      >> g(...)
>      >> }
>      >> g <- function(...) {
>      >> dots <- enquos(...)
>      >> eval_tidy(dots[[1]])
>      >> }
>      >>
>      >> f(x, stop("!"))
>      >> #> [1] "global"
>      >> g(x, stop("!"))
>      >> #> [1] "global"
>      >>
>      >> Hadley
>      >>
> 
>      > --
>      > Herv? Pag?s
> 
>      > Program in Computational Biology
>      > Division of Public Health Sciences
>      > Fred Hutchinson Cancer Research Center
>      > 1100 Fairview Ave. N, M1-B514
>      > P.O. Box 19024
>      > Seattle, WA 98109-1024
> 
>      > E-mail: hpages at fredhutch.org
>      > Phone:  (206) 667-5791
>      > Fax:    (206) 667-1319
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIDAw&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=BGlRjScM4h5whbLQ891iVxeMRA4PY37vwG3cnC5kuDI&s=_XZhh9pIVv0VBjUYXBgW39dss7YCGQE3XCArLMDfvDo&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From @wnydick @ending from gm@il@com  Tue May  8 19:48:41 2018
From: @wnydick @ending from gm@il@com (Steven Nydick)
Date: Tue, 08 May 2018 17:48:41 +0000
Subject: [Rd] unlist errors on a nested list of empty lists
Message-ID: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>

Reproducible example:

x <- list(list(list(), list()))
unlist(x)

*> Error in as.character.factor(x) : malformed factor*

What should happen:

unlist(x)
> NULL

R.version
platform       x86_64-apple-darwin15.6.0
arch           x86_64
os             darwin15.6.0
system         x86_64, darwin15.6.0
status
major          3
minor          5.0
year           2018
month          04
day            23
svn rev        74626
language       R
version.string R version 3.5.0 (2018-04-23)
nickname       Joy in Playing
-- 
Steven Nydick
PhD, Quantitative Psychology
M.A., Psychology
M.S., Statistics
--
"Beware of the man who works hard to learn something, learns it, and finds
himself no wiser than before, Bokonon tells us. He is full of murderous
resentment of people who are ignorant without having come by their
ignorance the hard way."
-Kurt Vonnegut

	[[alternative HTML version deleted]]


From murdoch@dunc@n @ending from gm@il@com  Tue May  8 20:58:43 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Tue, 8 May 2018 14:58:43 -0400
Subject: [Rd] unlist errors on a nested list of empty lists
In-Reply-To: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
References: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
Message-ID: <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>

On 08/05/2018 1:48 PM, Steven Nydick wrote:
> Reproducible example:
> 
> x <- list(list(list(), list()))
> unlist(x)
> 
> *> Error in as.character.factor(x) : malformed factor*

The error comes from the line

structure(res, levels = lv, names = nm, class = "factor")

which is called because unlist() thinks that some entry is a factor, 
with NULL levels and NULL names.  It's not legal for a factor to have 
NULL levels.  Probably it should never get here; the earlier test

if (.Internal(islistfactor(x, recursive))) {

should have been false, and then the result would have been

.Internal(unlist(x, recursive, use.names))

(with both recursive and use.names being TRUE), which returns NULL.

Duncan Murdoch


> 
> What should happen:
> 
> unlist(x)
>> NULL
> 
> R.version
> platform       x86_64-apple-darwin15.6.0
> arch           x86_64
> os             darwin15.6.0
> system         x86_64, darwin15.6.0
> status
> major          3
> minor          5.0
> year           2018
> month          04
> day            23
> svn rev        74626
> language       R
> version.string R version 3.5.0 (2018-04-23)
> nickname       Joy in Playing
>


From murdoch@dunc@n @ending from gm@il@com  Tue May  8 21:22:08 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Tue, 8 May 2018 15:22:08 -0400
Subject: [Rd] unlist errors on a nested list of empty lists
In-Reply-To: <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>
References: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
 <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>
Message-ID: <1e9bec47-0ff0-16fc-a41d-cded04955ff4@gmail.com>

On 08/05/2018 2:58 PM, Duncan Murdoch wrote:
> On 08/05/2018 1:48 PM, Steven Nydick wrote:
>> Reproducible example:
>>
>> x <- list(list(list(), list()))
>> unlist(x)
>>
>> *> Error in as.character.factor(x) : malformed factor*
> 
> The error comes from the line
> 
> structure(res, levels = lv, names = nm, class = "factor")
> 
> which is called because unlist() thinks that some entry is a factor,
> with NULL levels and NULL names.  It's not legal for a factor to have
> NULL levels.  Probably it should never get here; the earlier test
> 
> if (.Internal(islistfactor(x, recursive))) {
> 
> should have been false, and then the result would have been
> 
> .Internal(unlist(x, recursive, use.names))
> 
> (with both recursive and use.names being TRUE), which returns NULL.

And the problem is in the islistfactor function in src/main/apply.c, 
which looks like this:

static Rboolean islistfactor(SEXP X)
{
     int i, n = length(X);

     switch(TYPEOF(X)) {
     case VECSXP:
     case EXPRSXP:
         if(n == 0) return NA_LOGICAL;
         for(i = 0; i < LENGTH(X); i++)
             if(!islistfactor(VECTOR_ELT(X, i))) return FALSE;
         return TRUE;
         break;
     }
     return isFactor(X);
}

One of those deeply nested lists is length 0, so at the lowest level it 
returns NA_LOGICAL.  But then it does C-style logical testing on the 
results.  I think to C NA_LOGICAL counts as true, so at the next level 
up we get the wrong answer.

A fix would be to rewrite it like this:

static Rboolean islistfactor(SEXP X)
{
     int i, n = length(X);
     Rboolean result = NA_LOGICAL, childresult;
     switch(TYPEOF(X)) {
     case VECSXP:
     case EXPRSXP:
         for(i = 0; i < LENGTH(X); i++) {
             childresult = islistfactor(VECTOR_ELT(X, i));
             if(childresult == FALSE) return FALSE;
             else if(childresult == TRUE) result = TRUE;
         }
         return result;
         break;
     }
     return isFactor(X);
}


From h@wickh@m @ending from gm@il@com  Tue May  8 22:47:57 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Tue, 8 May 2018 13:47:57 -0700
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
Message-ID: <CABdHhvHpdywicYS17PaPho46V12F4SGFKVB0aRZuH4WbKTe57A@mail.gmail.com>

On Tue, May 8, 2018 at 8:15 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> On Thu, May 3, 2018 at 11:34 PM, Tomas Kalibera
> <tomas.kalibera at gmail.com> wrote:
>> On 05/03/2018 11:14 PM, Henrik Bengtsson wrote:
>>>
>>> Also, as mentioned in my
>>> https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html, when
>>> not specifying the mode argument, the default on Windows is mode = "w"
>>> *except* for certain, case-sensitive, filename extensions:
>>>
>>>      if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
>>> url)))
>>>          mode <- "wb"
>>>
>>> Just like the need for mode = "wb" on Windows, the above
>>> special-file-extension-hack is only happening on Windows, and is only
>>> documented in ?download.file if you're on Windows; so someone who's on
>>> Linux/macOS trying to help someone on Windows may not be aware of
>>> this. This adds to even more confusions, e.g. "works for me".
>>
>> If we were designing the API today, it would probably make more sense not to
>> convert any line endings by default. Today's editors _usually_ can cope with
>> different line endings and it is probably easier to detect that a text file
>> has incorrect line endings rather than detecting that a binary file has been
>> corrupted by an attempt to convert line endings. But whether to change
>> existing, documented behavior is a different question. In order to help
>> users and programmers who do not read the documentation carefully we would
>> create problems for users and programmers who do. The current heuristic/hack
>> is in line with the compatibility approach: it detects files that are
>> obviously binary, so it changes the default behavior only for cases when it
>> would obviously cause damage.
>
> From a purely utilitarian standpoint, there are far more users who do
> not carefully read the documentation than users who do ;)
>
> (I'd also argue that basing the decision on the file extension is
> suboptimal, and it would be better to use the mime type if provided by
> the server)

Also note that MS just announced support for unix line endings in notepad

https://blogs.msdn.microsoft.com/commandline/2018/05/08/extended-eol-in-notepad/

Hadley

-- 
http://hadley.nz


From @wnydick @ending from gm@il@com  Tue May  8 22:50:56 2018
From: @wnydick @ending from gm@il@com (Steven Nydick)
Date: Tue, 08 May 2018 20:50:56 +0000
Subject: [Rd] unlist errors on a nested list of empty lists
In-Reply-To: <1e9bec47-0ff0-16fc-a41d-cded04955ff4@gmail.com>
References: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
 <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>
 <1e9bec47-0ff0-16fc-a41d-cded04955ff4@gmail.com>
Message-ID: <CAJMBSp0W0AYR1Tr4h75O+ozC_78kBmgi7oypE82h6ipz0SkzLQ@mail.gmail.com>

It also does the same thing if the factor is not on the first level of the
list, which seems to be due to the fact that the islistfactor is recursive,
but if a list is a list-factor, the first level lists are coerced into
character strings.

> x <- list(list(factor(LETTERS[1])))
> unlist(x)
Error in as.character.factor(x) : malformed factor

However, if one of the factors is at the top level, and one is nested, then
the result is:

> x <- list(list(factor(LETTERS[1])), factor(LETTERS[2]))
> unlist(x)

[1] <NA> B
Levels: B

... which does not seem to me to be desired behavior.


On Tue, May 8, 2018 at 2:22 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 08/05/2018 2:58 PM, Duncan Murdoch wrote:
> > On 08/05/2018 1:48 PM, Steven Nydick wrote:
> >> Reproducible example:
> >>
> >> x <- list(list(list(), list()))
> >> unlist(x)
> >>
> >> *> Error in as.character.factor(x) : malformed factor*
> >
> > The error comes from the line
> >
> > structure(res, levels = lv, names = nm, class = "factor")
> >
> > which is called because unlist() thinks that some entry is a factor,
> > with NULL levels and NULL names.  It's not legal for a factor to have
> > NULL levels.  Probably it should never get here; the earlier test
> >
> > if (.Internal(islistfactor(x, recursive))) {
> >
> > should have been false, and then the result would have been
> >
> > .Internal(unlist(x, recursive, use.names))
> >
> > (with both recursive and use.names being TRUE), which returns NULL.
>
> And the problem is in the islistfactor function in src/main/apply.c,
> which looks like this:
>
> static Rboolean islistfactor(SEXP X)
> {
>      int i, n = length(X);
>
>      switch(TYPEOF(X)) {
>      case VECSXP:
>      case EXPRSXP:
>          if(n == 0) return NA_LOGICAL;
>          for(i = 0; i < LENGTH(X); i++)
>              if(!islistfactor(VECTOR_ELT(X, i))) return FALSE;
>          return TRUE;
>          break;
>      }
>      return isFactor(X);
> }
>
> One of those deeply nested lists is length 0, so at the lowest level it
> returns NA_LOGICAL.  But then it does C-style logical testing on the
> results.  I think to C NA_LOGICAL counts as true, so at the next level
> up we get the wrong answer.
>
> A fix would be to rewrite it like this:
>
> static Rboolean islistfactor(SEXP X)
> {
>      int i, n = length(X);
>      Rboolean result = NA_LOGICAL, childresult;
>      switch(TYPEOF(X)) {
>      case VECSXP:
>      case EXPRSXP:
>          for(i = 0; i < LENGTH(X); i++) {
>              childresult = islistfactor(VECTOR_ELT(X, i));
>              if(childresult == FALSE) return FALSE;
>              else if(childresult == TRUE) result = TRUE;
>          }
>          return result;
>          break;
>      }
>      return isFactor(X);
> }
>


-- 
Steven Nydick
PhD, Quantitative Psychology
M.A., Psychology
M.S., Statistics
--
"Beware of the man who works hard to learn something, learns it, and finds
himself no wiser than before, Bokonon tells us. He is full of murderous
resentment of people who are ignorant without having come by their
ignorance the hard way."
-Kurt Vonnegut

	[[alternative HTML version deleted]]


From murdoch@dunc@n @ending from gm@il@com  Wed May  9 02:51:16 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Tue, 8 May 2018 20:51:16 -0400
Subject: [Rd] unlist errors on a nested list of empty lists
In-Reply-To: <CAJMBSp0W0AYR1Tr4h75O+ozC_78kBmgi7oypE82h6ipz0SkzLQ@mail.gmail.com>
References: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
 <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>
 <1e9bec47-0ff0-16fc-a41d-cded04955ff4@gmail.com>
 <CAJMBSp0W0AYR1Tr4h75O+ozC_78kBmgi7oypE82h6ipz0SkzLQ@mail.gmail.com>
Message-ID: <a6285602-b54d-4420-88a8-3cc2de367006@gmail.com>

On 08/05/2018 4:50 PM, Steven Nydick wrote:
> It also does the same thing if the factor is not on the first level of 
> the list, which seems to be due to the fact that the islistfactor is 
> recursive, but if a list is a list-factor, the first level lists are 
> coerced into character strings.
> 
>  > x <- list(list(factor(LETTERS[1])))
>  > unlist(x)
> Error in as.character.factor(x) : malformed factor
> 
> However, if one of the factors is at the top level, and one is nested, 
> then the result is:
> 
>  >?x <- list(list(factor(LETTERS[1])), factor(LETTERS[2]))
>  > unlist(x)
> 
> [1] <NA> B
> Levels: B
> 
> ... which does not seem to me to be desired behavior.

The patch I suggested doesn't help with either of these.  I'd suggest 
collecting examples, and posting a bug report to bugs.r-project.org.

Duncan Murdoch


> 
> 
> On Tue, May 8, 2018 at 2:22 PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     On 08/05/2018 2:58 PM, Duncan Murdoch wrote:
>      > On 08/05/2018 1:48 PM, Steven Nydick wrote:
>      >> Reproducible example:
>      >>
>      >> x <- list(list(list(), list()))
>      >> unlist(x)
>      >>
>      >> *> Error in as.character.factor(x) : malformed factor*
>      >
>      > The error comes from the line
>      >
>      > structure(res, levels = lv, names = nm, class = "factor")
>      >
>      > which is called because unlist() thinks that some entry is a factor,
>      > with NULL levels and NULL names.? It's not legal for a factor to have
>      > NULL levels.? Probably it should never get here; the earlier test
>      >
>      > if (.Internal(islistfactor(x, recursive))) {
>      >
>      > should have been false, and then the result would have been
>      >
>      > .Internal(unlist(x, recursive, use.names))
>      >
>      > (with both recursive and use.names being TRUE), which returns NULL.
> 
>     And the problem is in the islistfactor function in src/main/apply.c,
>     which looks like this:
> 
>     static Rboolean islistfactor(SEXP X)
>     {
>      ? ? ?int i, n = length(X);
> 
>      ? ? ?switch(TYPEOF(X)) {
>      ? ? ?case VECSXP:
>      ? ? ?case EXPRSXP:
>      ? ? ? ? ?if(n == 0) return NA_LOGICAL;
>      ? ? ? ? ?for(i = 0; i < LENGTH(X); i++)
>      ? ? ? ? ? ? ?if(!islistfactor(VECTOR_ELT(X, i))) return FALSE;
>      ? ? ? ? ?return TRUE;
>      ? ? ? ? ?break;
>      ? ? ?}
>      ? ? ?return isFactor(X);
>     }
> 
>     One of those deeply nested lists is length 0, so at the lowest level it
>     returns NA_LOGICAL.? But then it does C-style logical testing on the
>     results.? I think to C NA_LOGICAL counts as true, so at the next level
>     up we get the wrong answer.
> 
>     A fix would be to rewrite it like this:
> 
>     static Rboolean islistfactor(SEXP X)
>     {
>      ? ? ?int i, n = length(X);
>      ? ? ?Rboolean result = NA_LOGICAL, childresult;
>      ? ? ?switch(TYPEOF(X)) {
>      ? ? ?case VECSXP:
>      ? ? ?case EXPRSXP:
>      ? ? ? ? ?for(i = 0; i < LENGTH(X); i++) {
>      ? ? ? ? ? ? ?childresult = islistfactor(VECTOR_ELT(X, i));
>      ? ? ? ? ? ? ?if(childresult == FALSE) return FALSE;
>      ? ? ? ? ? ? ?else if(childresult == TRUE) result = TRUE;
>      ? ? ? ? ?}
>      ? ? ? ? ?return result;
>      ? ? ? ? ?break;
>      ? ? ?}
>      ? ? ?return isFactor(X);
>     }
> 
> 
> 
> -- 
> Steven Nydick
> PhD, Quantitative Psychology
> M.A., Psychology
> M.S., Statistics
> --
> "Beware of the man who works hard to learn something, learns it, and 
> finds himself no wiser than before, Bokonon tells us. He is full of 
> murderous resentment of people who are ignorant without having come by 
> their ignorance the hard way."
> -Kurt Vonnegut


From tom@@@k@liber@ @ending from gm@il@com  Wed May  9 10:37:06 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 9 May 2018 10:37:06 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
Message-ID: <b72c6aaa-ccc3-57f8-c588-a9484e28d28d@gmail.com>

On 05/08/2018 05:15 PM, Hadley Wickham wrote:
> On Thu, May 3, 2018 at 11:34 PM, Tomas Kalibera
> <tomas.kalibera at gmail.com> wrote:
>> On 05/03/2018 11:14 PM, Henrik Bengtsson wrote:
>>> Also, as mentioned in my
>>> https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html, when
>>> not specifying the mode argument, the default on Windows is mode = "w"
>>> *except* for certain, case-sensitive, filename extensions:
>>>
>>>       if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
>>> url)))
>>>           mode <- "wb"
>>>
>>> Just like the need for mode = "wb" on Windows, the above
>>> special-file-extension-hack is only happening on Windows, and is only
>>> documented in ?download.file if you're on Windows; so someone who's on
>>> Linux/macOS trying to help someone on Windows may not be aware of
>>> this. This adds to even more confusions, e.g. "works for me".
>> If we were designing the API today, it would probably make more sense not to
>> convert any line endings by default. Today's editors _usually_ can cope with
>> different line endings and it is probably easier to detect that a text file
>> has incorrect line endings rather than detecting that a binary file has been
>> corrupted by an attempt to convert line endings. But whether to change
>> existing, documented behavior is a different question. In order to help
>> users and programmers who do not read the documentation carefully we would
>> create problems for users and programmers who do. The current heuristic/hack
>> is in line with the compatibility approach: it detects files that are
>> obviously binary, so it changes the default behavior only for cases when it
>> would obviously cause damage.
>  From a purely utilitarian standpoint, there are far more users who do
> not carefully read the documentation than users who do ;)
And for that reason the behavior should be as intuitive as possible when 
designed. What was intuitive 15-20 years ago may not be intuitive now, 
but that should probably not be a justification for a change in 
documented behavior.
> (I'd also argue that basing the decision on the file extension is
> suboptimal, and it would be better to use the mime type if provided by
> the server)
Yes, that would be nice. Also some binary files could be detected via 
magic numbers (yet not all, e.g. RDS do not have them). It won't be as 
trivial as decoding the URL, though.

Tomas

>
> Hadley
>


From murdoch@dunc@n @ending from gm@il@com  Wed May  9 14:52:19 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Wed, 9 May 2018 08:52:19 -0400
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CABdHhvHpdywicYS17PaPho46V12F4SGFKVB0aRZuH4WbKTe57A@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
 <CABdHhvHpdywicYS17PaPho46V12F4SGFKVB0aRZuH4WbKTe57A@mail.gmail.com>
Message-ID: <0b8d19ea-7529-bc4e-3895-4cd16f74e535@gmail.com>

On 08/05/2018 4:47 PM, Hadley Wickham wrote:
> On Tue, May 8, 2018 at 8:15 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>> On Thu, May 3, 2018 at 11:34 PM, Tomas Kalibera
>> <tomas.kalibera at gmail.com> wrote:
>>> On 05/03/2018 11:14 PM, Henrik Bengtsson wrote:
>>>>
>>>> Also, as mentioned in my
>>>> https://stat.ethz.ch/pipermail/r-devel/2012-August/064739.html, when
>>>> not specifying the mode argument, the default on Windows is mode = "w"
>>>> *except* for certain, case-sensitive, filename extensions:
>>>>
>>>>       if(missing(mode) && length(grep("\\.(gz|bz2|xz|tgz|zip|rda|RData)$",
>>>> url)))
>>>>           mode <- "wb"
>>>>
>>>> Just like the need for mode = "wb" on Windows, the above
>>>> special-file-extension-hack is only happening on Windows, and is only
>>>> documented in ?download.file if you're on Windows; so someone who's on
>>>> Linux/macOS trying to help someone on Windows may not be aware of
>>>> this. This adds to even more confusions, e.g. "works for me".
>>>
>>> If we were designing the API today, it would probably make more sense not to
>>> convert any line endings by default. Today's editors _usually_ can cope with
>>> different line endings and it is probably easier to detect that a text file
>>> has incorrect line endings rather than detecting that a binary file has been
>>> corrupted by an attempt to convert line endings. But whether to change
>>> existing, documented behavior is a different question. In order to help
>>> users and programmers who do not read the documentation carefully we would
>>> create problems for users and programmers who do. The current heuristic/hack
>>> is in line with the compatibility approach: it detects files that are
>>> obviously binary, so it changes the default behavior only for cases when it
>>> would obviously cause damage.
>>
>>  From a purely utilitarian standpoint, there are far more users who do
>> not carefully read the documentation than users who do ;)
>>
>> (I'd also argue that basing the decision on the file extension is
>> suboptimal, and it would be better to use the mime type if provided by
>> the server)
> 
> Also note that MS just announced support for unix line endings in notepad
> 
> https://blogs.msdn.microsoft.com/commandline/2018/05/08/extended-eol-in-notepad/

Perhaps soon RStudio will follow Notepad's lead, and not convert line 
endings when it saves a non-native file.

Duncan Murdoch


From pd@lgd @ending from gm@il@com  Wed May  9 15:09:56 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Wed, 9 May 2018 15:09:56 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <CABdHhvHpdywicYS17PaPho46V12F4SGFKVB0aRZuH4WbKTe57A@mail.gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
 <CABdHhvHpdywicYS17PaPho46V12F4SGFKVB0aRZuH4WbKTe57A@mail.gmail.com>
Message-ID: <7129F3C3-1E92-42B3-950C-AB4A42D8247E@gmail.com>

There was a hint in the Twitterverse that Excel has issues with line endings in .csv. Can anyone elaborate on that? Then again, Excel goes belly-up on comma separators in central European locales anyway...

-pd

> On 8 May 2018, at 22:47 , Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> 
> Also note that MS just announced support for unix line endings in notepad
> 
> https://blogs.msdn.microsoft.com/commandline/2018/05/08/extended-eol-in-notepad/
> 
> Hadley
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @wnydick @ending from gm@il@com  Wed May  9 15:25:11 2018
From: @wnydick @ending from gm@il@com (Steven Nydick)
Date: Wed, 09 May 2018 13:25:11 +0000
Subject: [Rd] unlist errors on a nested list of empty lists
In-Reply-To: <a6285602-b54d-4420-88a8-3cc2de367006@gmail.com>
References: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
 <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>
 <1e9bec47-0ff0-16fc-a41d-cded04955ff4@gmail.com>
 <CAJMBSp0W0AYR1Tr4h75O+ozC_78kBmgi7oypE82h6ipz0SkzLQ@mail.gmail.com>
 <a6285602-b54d-4420-88a8-3cc2de367006@gmail.com>
Message-ID: <CAJMBSp0FjoCbfiOeoMGveJfuHw_e83fC6MxxKVab7K7VpE4dvA@mail.gmail.com>

I do not have access to the bug reporting system. If somebody can get me
access, I can create a formal bug report.

The latter issues seem like duplicates of:
https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=12572 (with slightly
different output), but as that bug was reported nearly 10 years ago, it
might be worth creating an update under R version 3. I could not find the
first issue when searching the bug reports (which I ran into when trying to
parse JSON files), which is why I posted on r-devel.

On Tue, May 8, 2018 at 7:51 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 08/05/2018 4:50 PM, Steven Nydick wrote:
> > It also does the same thing if the factor is not on the first level of
> > the list, which seems to be due to the fact that the islistfactor is
> > recursive, but if a list is a list-factor, the first level lists are
> > coerced into character strings.
> >
> >  > x <- list(list(factor(LETTERS[1])))
> >  > unlist(x)
> > Error in as.character.factor(x) : malformed factor
> >
> > However, if one of the factors is at the top level, and one is nested,
> > then the result is:
> >
> >  > x <- list(list(factor(LETTERS[1])), factor(LETTERS[2]))
> >  > unlist(x)
> >
> > [1] <NA> B
> > Levels: B
> >
> > ... which does not seem to me to be desired behavior.
>
> The patch I suggested doesn't help with either of these.  I'd suggest
> collecting examples, and posting a bug report to bugs.r-project.org.
>
> Duncan Murdoch
>
>
> >
> >
> > On Tue, May 8, 2018 at 2:22 PM Duncan Murdoch <murdoch.duncan at gmail.com
> > <mailto:murdoch.duncan at gmail.com>> wrote:
> >
> >     On 08/05/2018 2:58 PM, Duncan Murdoch wrote:
> >      > On 08/05/2018 1:48 PM, Steven Nydick wrote:
> >      >> Reproducible example:
> >      >>
> >      >> x <- list(list(list(), list()))
> >      >> unlist(x)
> >      >>
> >      >> *> Error in as.character.factor(x) : malformed factor*
> >      >
> >      > The error comes from the line
> >      >
> >      > structure(res, levels = lv, names = nm, class = "factor")
> >      >
> >      > which is called because unlist() thinks that some entry is a
> factor,
> >      > with NULL levels and NULL names.  It's not legal for a factor to
> have
> >      > NULL levels.  Probably it should never get here; the earlier test
> >      >
> >      > if (.Internal(islistfactor(x, recursive))) {
> >      >
> >      > should have been false, and then the result would have been
> >      >
> >      > .Internal(unlist(x, recursive, use.names))
> >      >
> >      > (with both recursive and use.names being TRUE), which returns
> NULL.
> >
> >     And the problem is in the islistfactor function in src/main/apply.c,
> >     which looks like this:
> >
> >     static Rboolean islistfactor(SEXP X)
> >     {
> >           int i, n = length(X);
> >
> >           switch(TYPEOF(X)) {
> >           case VECSXP:
> >           case EXPRSXP:
> >               if(n == 0) return NA_LOGICAL;
> >               for(i = 0; i < LENGTH(X); i++)
> >                   if(!islistfactor(VECTOR_ELT(X, i))) return FALSE;
> >               return TRUE;
> >               break;
> >           }
> >           return isFactor(X);
> >     }
> >
> >     One of those deeply nested lists is length 0, so at the lowest level
> it
> >     returns NA_LOGICAL.  But then it does C-style logical testing on the
> >     results.  I think to C NA_LOGICAL counts as true, so at the next
> level
> >     up we get the wrong answer.
> >
> >     A fix would be to rewrite it like this:
> >
> >     static Rboolean islistfactor(SEXP X)
> >     {
> >           int i, n = length(X);
> >           Rboolean result = NA_LOGICAL, childresult;
> >           switch(TYPEOF(X)) {
> >           case VECSXP:
> >           case EXPRSXP:
> >               for(i = 0; i < LENGTH(X); i++) {
> >                   childresult = islistfactor(VECTOR_ELT(X, i));
> >                   if(childresult == FALSE) return FALSE;
> >                   else if(childresult == TRUE) result = TRUE;
> >               }
> >               return result;
> >               break;
> >           }
> >           return isFactor(X);
> >     }
> >
> >
> >
> > --
> > Steven Nydick
> > PhD, Quantitative Psychology
> > M.A., Psychology
> > M.S., Statistics
> > --
> > "Beware of the man who works hard to learn something, learns it, and
> > finds himself no wiser than before, Bokonon tells us. He is full of
> > murderous resentment of people who are ignorant without having come by
> > their ignorance the hard way."
> > -Kurt Vonnegut
>
>

-- 
Steven Nydick
PhD, Quantitative Psychology
M.A., Psychology
M.S., Statistics
--
"Beware of the man who works hard to learn something, learns it, and finds
himself no wiser than before, Bokonon tells us. He is full of murderous
resentment of people who are ignorant without having come by their
ignorance the hard way."
-Kurt Vonnegut

	[[alternative HTML version deleted]]


From edd @ending from debi@n@org  Wed May  9 15:47:35 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Wed, 9 May 2018 08:47:35 -0500
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <b72c6aaa-ccc3-57f8-c588-a9484e28d28d@gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
 <b72c6aaa-ccc3-57f8-c588-a9484e28d28d@gmail.com>
Message-ID: <23282.64503.20020.488944@rob.eddelbuettel.com>


On 9 May 2018 at 10:37, Tomas Kalibera wrote:
| And for that reason the behavior should be as intuitive as possible when 
| designed. What was intuitive 15-20 years ago may not be intuitive now, 
| but that should probably not be a justification for a change in 
| documented behavior.

Time for downloadFile() (or download_file()) to complement the existing
download.file() but providing what we now think of as intuitive behaviour?

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@echler @ending from @t@t@m@th@ethz@ch  Thu May 10 09:33:23 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 10 May 2018 09:33:23 +0200
Subject: [Rd] unlist errors on a nested list of empty lists
In-Reply-To: <CAJMBSp0FjoCbfiOeoMGveJfuHw_e83fC6MxxKVab7K7VpE4dvA@mail.gmail.com>
References: <CAJMBSp1UX5z1Ou3bPdc0Nk4GT1Q1oqdqWEfs3wHH_r130ettrw@mail.gmail.com>
 <5947f0e5-ab4e-4ded-2605-01f2c1733ddc@gmail.com>
 <1e9bec47-0ff0-16fc-a41d-cded04955ff4@gmail.com>
 <CAJMBSp0W0AYR1Tr4h75O+ozC_78kBmgi7oypE82h6ipz0SkzLQ@mail.gmail.com>
 <a6285602-b54d-4420-88a8-3cc2de367006@gmail.com>
 <CAJMBSp0FjoCbfiOeoMGveJfuHw_e83fC6MxxKVab7K7VpE4dvA@mail.gmail.com>
Message-ID: <23283.62915.414168.559430@stat.math.ethz.ch>

>>>>> Steven Nydick <swnydick at gmail.com>
>>>>>     on Wed, 9 May 2018 13:25:11 +0000 writes:

    > I do not have access to the bug reporting system. If somebody can get me
    > access, I can create a formal bug report.

    > The latter issues seem like duplicates of:
    > https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=12572 (with slightly
    > different output), but as that bug was reported nearly 10 years ago, it
    > might be worth creating an update under R version 3. I could not find the
    > first issue when searching the bug reports (which I ran into when trying to
    > parse JSON files), which is why I posted on r-devel.

Indeed, thanks a lot Steven (and Duncan!),  I've found the
following:

1. The first issue is a new bug, in R "only" since R version
  3.4.0, i.e. working upto R 3.3.3.
  Duncan's patch basically fixes.
  I've found that the C code there can be simplified and
  deconvoluted, and after that, I will commit basically the bug
  fix of Duncan Murdoch.  	   

2. The second issues indeed are an entirely different bug, and I
   would say actually point to a "design problem" of the whole    thing.
   The C code in islistfactor() talks about arbitrary trees with
   all leaves factors,  whereas the R code -- in the
   islistfactor() is TRUE -- actually only correctly deals with
   simple trees, namely of depth exactly 1. That are those you typically
   get from e.g., lapply(), and so this old design-bug triggers
   relatively rarely.

Last but not least: I have created an account for you, Steven,
on the bugzilla site.

Given we have holidays till the weekend and private duties of
mine, I won't get to more for now.

Best
Martin Maechler

   > On Tue, May 8, 2018 at 7:51 PM Duncan Murdoch <murdoch.duncan at gmail.com>
    > wrote:

    >> On 08/05/2018 4:50 PM, Steven Nydick wrote:
    >> > It also does the same thing if the factor is not on the first level of
    >> > the list, which seems to be due to the fact that the islistfactor is
    >> > recursive, but if a list is a list-factor, the first level lists are
    >> > coerced into character strings.
    >> >
    >> >  > x <- list(list(factor(LETTERS[1])))
    >> >  > unlist(x)
    >> > Error in as.character.factor(x) : malformed factor
    >> >
    >> > However, if one of the factors is at the top level, and one is nested,
    >> > then the result is:
    >> >
    >> >  > x <- list(list(factor(LETTERS[1])), factor(LETTERS[2]))
    >> >  > unlist(x)
    >> >
    >> > [1] <NA> B
    >> > Levels: B
    >> >
    >> > ... which does not seem to me to be desired behavior.
    >> 
    >> The patch I suggested doesn't help with either of these.  I'd suggest
    >> collecting examples, and posting a bug report to bugs.r-project.org.
    >> 
    >> Duncan Murdoch
    >> 
    >> 
    >> >
    >> >
    >> > On Tue, May 8, 2018 at 2:22 PM Duncan Murdoch <murdoch.duncan at gmail.com
    >> > <mailto:murdoch.duncan at gmail.com>> wrote:
    >> >
    >> >     On 08/05/2018 2:58 PM, Duncan Murdoch wrote:
    >> >      > On 08/05/2018 1:48 PM, Steven Nydick wrote:
    >> >      >> Reproducible example:
    >> >      >>
    >> >      >> x <- list(list(list(), list()))
    >> >      >> unlist(x)
    >> >      >>
    >> >      >> *> Error in as.character.factor(x) : malformed factor*
    >> >      >
    >> >      > The error comes from the line
    >> >      >
    >> >      > structure(res, levels = lv, names = nm, class = "factor")
    >> >      >
    >> >      > which is called because unlist() thinks that some entry is a
    >> factor,
    >> >      > with NULL levels and NULL names.  It's not legal for a factor to
    >> have
    >> >      > NULL levels.  Probably it should never get here; the earlier test
    >> >      >
    >> >      > if (.Internal(islistfactor(x, recursive))) {
    >> >      >
    >> >      > should have been false, and then the result would have been
    >> >      >
    >> >      > .Internal(unlist(x, recursive, use.names))
    >> >      >
    >> >      > (with both recursive and use.names being TRUE), which returns
    >> NULL.
    >> >
    >> >     And the problem is in the islistfactor function in src/main/apply.c,
    >> >     which looks like this:
    >> >
    >> >     static Rboolean islistfactor(SEXP X)
    >> >     {
    >> >           int i, n = length(X);
    >> >
    >> >           switch(TYPEOF(X)) {
    >> >           case VECSXP:
    >> >           case EXPRSXP:
    >> >               if(n == 0) return NA_LOGICAL;
    >> >               for(i = 0; i < LENGTH(X); i++)
    >> >                   if(!islistfactor(VECTOR_ELT(X, i))) return FALSE;
    >> >               return TRUE;
    >> >               break;
    >> >           }
    >> >           return isFactor(X);
    >> >     }
    >> >
    >> >     One of those deeply nested lists is length 0, so at the lowest level
    >> it
    >> >     returns NA_LOGICAL.  But then it does C-style logical testing on the
    >> >     results.  I think to C NA_LOGICAL counts as true, so at the next
    >> level
    >> >     up we get the wrong answer.
    >> >
    >> >     A fix would be to rewrite it like this:
    >> >
    >> >     static Rboolean islistfactor(SEXP X)
    >> >     {
    >> >           int i, n = length(X);
    >> >           Rboolean result = NA_LOGICAL, childresult;
    >> >           switch(TYPEOF(X)) {
    >> >           case VECSXP:
    >> >           case EXPRSXP:
    >> >               for(i = 0; i < LENGTH(X); i++) {
    >> >                   childresult = islistfactor(VECTOR_ELT(X, i));
    >> >                   if(childresult == FALSE) return FALSE;
    >> >                   else if(childresult == TRUE) result = TRUE;
    >> >               }
    >> >               return result;
    >> >               break;
    >> >           }
    >> >           return isFactor(X);
    >> >     }
    >> >
    >> >
    >> >
    >> > --
    >> > Steven Nydick
    >> > PhD, Quantitative Psychology
    >> > M.A., Psychology
    >> > M.S., Statistics
    >> > --
    >> > "Beware of the man who works hard to learn something, learns it, and
    >> > finds himself no wiser than before, Bokonon tells us. He is full of
    >> > murderous resentment of people who are ignorant without having come by
    >> > their ignorance the hard way."
    >> > -Kurt Vonnegut
    >> 
    >> 

    > -- 
    > Steven Nydick
    > PhD, Quantitative Psychology
    > M.A., Psychology
    > M.S., Statistics
    > --
    > "Beware of the man who works hard to learn something, learns it, and finds
    > himself no wiser than before, Bokonon tells us. He is full of murderous
    > resentment of people who are ignorant without having come by their
    > ignorance the hard way."
    > -Kurt Vonnegut

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From hugh@p@r@on@ge @ending from gm@il@com  Thu May 10 15:17:32 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Thu, 10 May 2018 23:17:32 +1000
Subject: [Rd] grDevices::grey could provide clearer error message when
 length(alpha) != length(level)
Message-ID: <CAJmOi+NAtsQ_KL3etrswJuKGENR_2uhzxAP6VF1M3htRAX9RSg@mail.gmail.com>

e.g.

grDevices::grey(level = 0.1, alpha = c(0, 1))
#> Error in grey(level = 0.1, alpha = c(0, 1)) :
#>  attempt to set index 1/1 in SET_STRING_ELT

Perhaps
#> Error in grey(level = 0.1, alpha = c(0, 1)) :
#>  lengths of 'level' and 'alpha' differ


From murdoch@dunc@n @ending from gm@il@com  Thu May 10 15:31:41 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 10 May 2018 09:31:41 -0400
Subject: [Rd] grDevices::grey could provide clearer error message when
 length(alpha) != length(level)
In-Reply-To: <CAJmOi+NAtsQ_KL3etrswJuKGENR_2uhzxAP6VF1M3htRAX9RSg@mail.gmail.com>
References: <CAJmOi+NAtsQ_KL3etrswJuKGENR_2uhzxAP6VF1M3htRAX9RSg@mail.gmail.com>
Message-ID: <8fb6e76d-0f30-91c5-7413-f67acbd1e10f@gmail.com>

On 10/05/2018 9:17 AM, Hugh Parsonage wrote:
> e.g.
> 
> grDevices::grey(level = 0.1, alpha = c(0, 1))
> #> Error in grey(level = 0.1, alpha = c(0, 1)) :
> #>  attempt to set index 1/1 in SET_STRING_ELT
> 
> Perhaps
> #> Error in grey(level = 0.1, alpha = c(0, 1)) :
> #>  lengths of 'level' and 'alpha' differ
> 

Or it could return a vector of length 2.  This is not how it is 
documented to operate, but it is how many other R functions handle 
vectors of mixed lengths.

Duncan Murdoch


From bhe@vner @ending from gm@il@com  Fri May 11 00:31:56 2018
From: bhe@vner @ending from gm@il@com (Ben Heavner)
Date: Thu, 10 May 2018 15:31:56 -0700
Subject: [Rd] readLines() behaves differently for gzfile connection
Message-ID: <CAFsUf91sPtYv9QNcx5mbnFL_XD8_b46E8hPNGn6KY755ea8mYQ@mail.gmail.com>

When I read a .gz file with readLines() in 3.4.3, it returns text (and a
warning). In 3.5.0, it gives a warning, but no text. Is this expected
behavior or a bug?

3.4.3:
> source_file = "1k_annotation.gz"
> readfile_con <- gzfile(source_file, "r")
> readLines(readfile_con, n = 5)
[1] "#chr\tpos\tref\talt\t

<truncated output here>

Warning message:
In readLines(readfile_con, n = 5) :
  seek on a gzfile connection returned an internal error

> close(readfile_con)

> sessionInfo()
R version 3.4.3 (2017-11-30)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Sierra 10.12.6

Matrix products: default
BLAS:
/Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
LAPACK:
/Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.4.3

---------------------------------------------

3.5.0:
> source_file = "1k_annotation.gz"
> readfile_con <- gzfile(source_file, "r")
> readLines(readfile_con, n = 5)
[1] "" "" "" "" ""
Warning message:
In readLines(readfile_con, n = 5) :
  seek on a gzfile connection returned an internal error
> close(readfile_con)
> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux 9 (stretch)

Matrix products: default
BLAS: /usr/lib/openblas-base/libblas.so.3
LAPACK: /usr/lib/libopenblasp-r0.2.19.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=C
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.0

----------------------------------------
(note: I'm running 3.5.0 via the docker rocker/tidyverse:3.5 container, and
3.4.3 on my mac desktop machine)

Thanks!
Ben Heavner

	[[alternative HTML version deleted]]


From l@wrence@mich@el @ending from gene@com  Fri May 11 01:17:48 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Thu, 10 May 2018 16:17:48 -0700
Subject: [Rd] readLines() behaves differently for gzfile connection
In-Reply-To: <CAFsUf91sPtYv9QNcx5mbnFL_XD8_b46E8hPNGn6KY755ea8mYQ@mail.gmail.com>
References: <CAFsUf91sPtYv9QNcx5mbnFL_XD8_b46E8hPNGn6KY755ea8mYQ@mail.gmail.com>
Message-ID: <CAOQ5Nyf_FcvsbEhoQj=hf5BxzUdW0o8wRunzAhFbJ2-yMijp8g@mail.gmail.com>

Would it be possible to get that file or a representative subset of it
somewhere so that I can reproduce this?

Thanks,
Michael

On Thu, May 10, 2018 at 3:31 PM, Ben Heavner <bheavner at gmail.com> wrote:
> When I read a .gz file with readLines() in 3.4.3, it returns text (and a
> warning). In 3.5.0, it gives a warning, but no text. Is this expected
> behavior or a bug?
>
> 3.4.3:
>> source_file = "1k_annotation.gz"
>> readfile_con <- gzfile(source_file, "r")
>> readLines(readfile_con, n = 5)
> [1] "#chr\tpos\tref\talt\t
>
> <truncated output here>
>
> Warning message:
> In readLines(readfile_con, n = 5) :
>   seek on a gzfile connection returned an internal error
>
>> close(readfile_con)
>
>> sessionInfo()
> R version 3.4.3 (2017-11-30)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: macOS Sierra 10.12.6
>
> Matrix products: default
> BLAS:
> /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
> LAPACK:
> /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib
>
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.4.3
>
> ---------------------------------------------
>
> 3.5.0:
>> source_file = "1k_annotation.gz"
>> readfile_con <- gzfile(source_file, "r")
>> readLines(readfile_con, n = 5)
> [1] "" "" "" "" ""
> Warning message:
> In readLines(readfile_con, n = 5) :
>   seek on a gzfile connection returned an internal error
>> close(readfile_con)
>> sessionInfo()
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Debian GNU/Linux 9 (stretch)
>
> Matrix products: default
> BLAS: /usr/lib/openblas-base/libblas.so.3
> LAPACK: /usr/lib/libopenblasp-r0.2.19.so
>
> locale:
>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=C
>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.5.0
>
> ----------------------------------------
> (note: I'm running 3.5.0 via the docker rocker/tidyverse:3.5 container, and
> 3.4.3 on my mac desktop machine)
>
> Thanks!
> Ben Heavner
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bhe@vner @ending from gm@il@com  Fri May 11 01:21:19 2018
From: bhe@vner @ending from gm@il@com (Ben Heavner)
Date: Thu, 10 May 2018 16:21:19 -0700
Subject: [Rd] readLines() behaves differently for gzfile connection
In-Reply-To: <CAOQ5Nyf_FcvsbEhoQj=hf5BxzUdW0o8wRunzAhFbJ2-yMijp8g@mail.gmail.com>
References: <CAFsUf91sPtYv9QNcx5mbnFL_XD8_b46E8hPNGn6KY755ea8mYQ@mail.gmail.com>
 <CAOQ5Nyf_FcvsbEhoQj=hf5BxzUdW0o8wRunzAhFbJ2-yMijp8g@mail.gmail.com>
Message-ID: <CAFsUf91RTyY_AKBw_s5omZATfs4kKm6HUmgnp+9fu7FW5GWhuQ@mail.gmail.com>

You bet - it's available on github at
https://github.com/UW-GAC/wgsaparsr/blob/master/tests/testthat/1k_annotation.gz

-Ben

On Thu, May 10, 2018 at 4:17 PM, Michael Lawrence <lawrence.michael at gene.com
> wrote:

> Would it be possible to get that file or a representative subset of it
> somewhere so that I can reproduce this?
>
> Thanks,
> Michael
>
> On Thu, May 10, 2018 at 3:31 PM, Ben Heavner <bheavner at gmail.com> wrote:
> > When I read a .gz file with readLines() in 3.4.3, it returns text (and a
> > warning). In 3.5.0, it gives a warning, but no text. Is this expected
> > behavior or a bug?
> >
> > 3.4.3:
> >> source_file = "1k_annotation.gz"
> >> readfile_con <- gzfile(source_file, "r")
> >> readLines(readfile_con, n = 5)
> > [1] "#chr\tpos\tref\talt\t
> >
> > <truncated output here>
> >
> > Warning message:
> > In readLines(readfile_con, n = 5) :
> >   seek on a gzfile connection returned an internal error
> >
> >> close(readfile_con)
> >
> >> sessionInfo()
> > R version 3.4.3 (2017-11-30)
> > Platform: x86_64-apple-darwin15.6.0 (64-bit)
> > Running under: macOS Sierra 10.12.6
> >
> > Matrix products: default
> > BLAS:
> > /Library/Frameworks/R.framework/Versions/3.4/
> Resources/lib/libRblas.0.dylib
> > LAPACK:
> > /Library/Frameworks/R.framework/Versions/3.4/
> Resources/lib/libRlapack.dylib
> >
> > locale:
> > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.4.3
> >
> > ---------------------------------------------
> >
> > 3.5.0:
> >> source_file = "1k_annotation.gz"
> >> readfile_con <- gzfile(source_file, "r")
> >> readLines(readfile_con, n = 5)
> > [1] "" "" "" "" ""
> > Warning message:
> > In readLines(readfile_con, n = 5) :
> >   seek on a gzfile connection returned an internal error
> >> close(readfile_con)
> >> sessionInfo()
> > R version 3.5.0 (2018-04-23)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Debian GNU/Linux 9 (stretch)
> >
> > Matrix products: default
> > BLAS: /usr/lib/openblas-base/libblas.so.3
> > LAPACK: /usr/lib/libopenblasp-r0.2.19.so
> >
> > locale:
> >  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=C
> >  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> >  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> > [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.5.0
> >
> > ----------------------------------------
> > (note: I'm running 3.5.0 via the docker rocker/tidyverse:3.5 container,
> and
> > 3.4.3 on my mac desktop machine)
> >
> > Thanks!
> > Ben Heavner
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From edw@rd@m @ending from p@u@@c@th  Fri May 11 12:01:01 2018
From: edw@rd@m @ending from p@u@@c@th (Edward McNeil)
Date: Fri, 11 May 2018 17:01:01 +0700
Subject: [Rd] Bug in plot.lm function (stats package): positioning of labels
 for extreme points.
Message-ID: <f61a51022e96662601ee4bf958643be0.squirrel@webmail.psu.ac.th>

Hi,

====================
Reproducible example:
====================

data(Animals, package="MASS") # interesting dataset

# Run model
lm1 <- lm(log10(body)~log10(brain), data=Animals)

# Setup 2x2 graphics device
par(mfrow=c(2,2))

# Plot diagnostics, label the two most "extreme" points based on magnitude of residuals
plot(lm1, id.n=2)

==============================
Explanation of resulting plots:
==============================
Notice that the one of the two extreme points corresponding to the two largest dinosaurs
are labelled unintuitively, or counter to what is stated in the documentation for the
"label.pos" argument:

?plot.lm
label.pos: positioning of labels, for the left half and right half of the graph
respectively, for plots 1-3.

The default value for this argument is c(4,2), where 4 means "to the right of" and 2
means "to the left of" as stated in the help page for text (see the 'pos' argument).

The Q-Q plot positions the label for Dipliodocus "to the right", but clearly it should
be placed "to the left" since it is clearly on the right half of the graph. Similarly
for the Leverage plot, the label for Brachiosaurus is placed "to the left" when clearly
it should be placed "to the right".

====================================
Reason for error and possible patch:
====================================
The fix is hard to explain, because changes are required in many places.

On line 85 (or thereabouts) of the plot.lm function, there is a function called text.id
which does the labelling:

text.id <- function(x, y, ind, adj.x = TRUE) {
            labpos <- if (adj.x)
                label.pos[1 + as.numeric(x > mean(range(x)))]
            else 3
            text(x, y, labels.id[ind], cex = cex.id, xpd = TRUE,
                pos = labpos, offset = 0.25)
        }

This text.id function is called for plots corresponding to which==1 (lines 126:128),
which==2 (line 145), for example:

      text.id(qq$x[show.rs], qq$y[show.rs], show.rs)

which==3 (line 163), which==4 (line 180), which==5 (lines 270:272), and which==6 (line
312).

I believe the text.id function should be changed to:

text.id <- function(x, y, ind, adj.x = TRUE) {
      labpos <- if (adj.x)
        label.pos[1 + as.numeric(x[ind] > mean(range(x)))]
      else 3
      text(x[ind], y[ind], labels.id[ind], cex = cex.id, xpd = TRUE,
           pos = labpos, offset = 0.25)
    }

And the repeated calls to this function are changed so that the choice of position is
based on whether the extreme points are greater than the mean of the range of ALL the
data points, not just the extreme ones as it is currently doing. For example, at line
145 for the Q-Q plot (which==2), the [show.rs] index should be removed in the first two
arguments, so the code should be:

      text.id(qq$x, qq$y, show.rs)

and similar changes are required for plots 3, 4, and 5. For plots 1 and 6, the following
changes are needed:

Lines 126:128 (which==1)
      y.id <- r # delete [show.r]
      y.id[y.id < 0] <- y.id[y.id < 0] - strheight(" ")/3
      text.id(yh, y.id, show.r) # delete [show.r]

Lines 270:272 (which==6)
        y.id <- rsp # delete [show.rsp]
        y.id[y.id < 0] <- y.id[y.id < 0] - strheight(" ")/3
        text.id(xx, y.id, show.rsp) # delete [show.rsp]

I tested these changes and they seem to work without breaking anything. If you want me
to make a patch, then I can try. But I thought that these changes were quite significant
and better left to the experts.

Hope that all makes sense.
-- 
Edward McNeil
Assistant Professor,
Epidemiology Unit,
Prince of Songkla University,
Hat Yai,
Thailand


From jpritikin @ending from pobox@com  Fri May 11 15:07:13 2018
From: jpritikin @ending from pobox@com (Joshua N Pritikin)
Date: Fri, 11 May 2018 09:07:13 -0400
Subject: [Rd] valgrind issue in core R 3.5
Message-ID: <20180511130713.GC18719@tailwind>

wrapped <- strwrap("raw")
writeLines(wrapped)
q()

==8699== Conditional jump or move depends on uninitialised value(s)
==8699==    at 0x40310A9: ???
==8699==    by 0xB07F4EF: ???
==8699==    by 0xB07F4EF: ???
==8699==    by 0xB07F4F2: ???
==8699==    by 0x1FFEFFA88F: ???
==8699==


From luke-tier@ey m@ili@g off uiow@@edu  Fri May 11 16:41:36 2018
From: luke-tier@ey m@ili@g off uiow@@edu (luke-tier@ey m@ili@g off uiow@@edu)
Date: Fri, 11 May 2018 09:41:36 -0500 (CDT)
Subject: [Rd] valgrind issue in core R 3.5
In-Reply-To: <20180511130713.GC18719@tailwind>
References: <20180511130713.GC18719@tailwind>
Message-ID: <alpine.DEB.2.20.1805110939580.12276@luke-Latitude-7480>

I see this also on Ubuntu 16.04; simpler version is

.Internal(strsplit("raw", "\n[ \t\n]*\n", FALSE, TRUE, FALSE))

Looks like it is coming form inside a call to pcre_exec, so out of our
control.

Best,

luke

On Fri, 11 May 2018, Joshua N Pritikin wrote:

> wrapped <- strwrap("raw")
> writeLines(wrapped)
> q()
>
> ==8699== Conditional jump or move depends on uninitialised value(s)
> ==8699==    at 0x40310A9: ???
> ==8699==    by 0xB07F4EF: ???
> ==8699==    by 0xB07F4EF: ???
> ==8699==    by 0xB07F4F2: ???
> ==8699==    by 0x1FFEFFA88F: ???
> ==8699==
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jori@mey@ @ending from gm@il@com  Sat May 12 11:49:00 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Sat, 12 May 2018 11:49:00 +0200
Subject: [Rd] 
 download.file does not process gz files correctly (truncates them?)
In-Reply-To: <7129F3C3-1E92-42B3-950C-AB4A42D8247E@gmail.com>
References: <CAO1zAVbXOY-8PSCeHj5DRGj=MOoL5OmMX-ZcdY-P-yU6yVXVXw@mail.gmail.com>
 <CAFDcVCTcwYdpBayHAUuvncZ00RWTHtLGujf6-8_EUOLanQtOuQ@mail.gmail.com>
 <CABFfbXvBWLiFjCbpGtDN_HwRmYmh5Hpy6SFCfaS1meQmwC5hyw@mail.gmail.com>
 <CAO1zAVaGZYKFt12MhvUJFG_UjzkFnTToJjD2S6Mkpq=nLwdjAg@mail.gmail.com>
 <CAFDcVCSqj1woeDOdJmgP2rRwEpgTk0ZagFrHAUNkwRvk1cXnKQ@mail.gmail.com>
 <0a82df6b-556f-41ae-101f-8a95eaa64f75@gmail.com>
 <CABdHhvE-H68updR0gs49h4bLYVW_WT6e+An41WmHKCP=-jVWtg@mail.gmail.com>
 <CABdHhvHpdywicYS17PaPho46V12F4SGFKVB0aRZuH4WbKTe57A@mail.gmail.com>
 <7129F3C3-1E92-42B3-950C-AB4A42D8247E@gmail.com>
Message-ID: <CAO1zAVb-gGf1q5JiRbULm_-7BBq7y-4kvRDmJFr_w9Q6_3sJEQ@mail.gmail.com>

I can confirm that Excel does all kind of strange things when opening a csv
file and saving it from Excel, including adding unnecessarily another set
of quotes around already qouted text fields. But I never had problems with
Excel not getting linux-type line endings correctly. I'll see if I can make
Excel mess it up, but given the amount of excel crap I had to endure over
the years, I'd be surprised if I missed such behaviour until now.

Cheers
Joris

On Wed, May 9, 2018 at 3:09 PM, peter dalgaard <pdalgd at gmail.com> wrote:

> There was a hint in the Twitterverse that Excel has issues with line
> endings in .csv. Can anyone elaborate on that? Then again, Excel goes
> belly-up on comma separators in central European locales anyway...
>
> -pd
>
> > On 8 May 2018, at 22:47 , Hadley Wickham <h.wickham at gmail.com> wrote:
> >
> >
> > Also note that MS just announced support for unix line endings in notepad
> >
> > https://blogs.msdn.microsoft.com/commandline/2018/05/08/
> extended-eol-in-notepad/
> >
> > Hadley
> >
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Sun May 13 10:24:50 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Sun, 13 May 2018 08:24:50 +0000
Subject: [Rd] BUG: 'bibentry' methods change default bibstyle
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F659BDB@MBXP01.ds.man.ac.uk>

Hi,

Some 'bibentry' methods have the side effect of changing the default bibstyle.

Background:
tools::bibstyle() defines and registers bibtex styles for formatting 'bibentry' objects.
It optionally (and by default) sets a default style.  It is also used to get a particular style.

The last feature of bibstyle() is used in 'bibentry' methods defined  in packages 'tools' and 'utils' , see the excerpts below.
They have the side effect of resetting the default bibstyle. This seems like a bug. I t can be resolved by adding argument '.default = FALSE' to the calls of bibstyle() in the bibentry methods for sort() and toRd() (there maybe other methods using this and perhaps also unexported functions).

Here is the example from the help page of bibstyle():

======================
   refs <-
     c(bibentry(bibtype = "manual",
         title = "R: A Language and Environment for Statistical Computing",
         author = person("R Core Team"),
         organization = "R Foundation for Statistical Computing",
         address = "Vienna, Austria",
         year = 2013,
         url = "https://www.R-project.org"),
       bibentry(bibtype = "article",
         author = c(person(c("George", "E.", "P."), "Box"),
                    person(c("David",  "R."),      "Cox")),
         year = 1964,
         title = "An Analysis of Transformations",
         journal = "Journal of the Royal Statistical Society, Series B",
         volume = 26,
         pages = "211-252"))

     bibstyle("unsorted", sortKeys = function(refs) seq_along(refs),
         fmtPrefix = function(paper) paste0("[", paper$.index, "]"),
            .init = TRUE)

=======================

As expected, the bibstyle() call sets "unsorted" as default bibstyle but here is how calls to sort() and toRd() have the side effect of changing the default style:

> tools::getBibstyle()
[1] "unsorted"
> sort(refs, .bibstyle = "JSS")
> tools::getBibstyle()
[1] "JSS"
> tools::toRd(refs, style = "unsorted")
> tools::getBibstyle()
[1] "unsorted"
>
========================

The same happens with format() and print() but this seems due to their use of sort().

Excerpts from bibentry methods:
==================================

> utils:::sort.bibentry
function (x, decreasing = FALSE, .bibstyle = NULL, drop = FALSE,
    ...)
{
    x[order(tools::bibstyle(.bibstyle)$sortKeys(x), decreasing = decreasing),
        drop = drop]
}

> tools:::toRd.bibentry
function (obj, style = NULL, ...)
{
    obj <- sort(obj, .bibstyle = style)
    style <- bibstyle(style)

   ...

}

======================


Georgi Boshnakov


	[[alternative HTML version deleted]]


From b@rto@zekkj @ending from gm@il@com  Sun May 13 18:59:32 2018
From: b@rto@zekkj @ending from gm@il@com (Krzysztof Bartoszek)
Date: Sun, 13 May 2018 18:59:32 +0200
Subject: [Rd] different type of modification when code is sourced and pasted
Message-ID: <CADP6=aWqPx-gSYnuYCqVKfxaVrY43nAW_oZP7hP-FZiFhz8gkQ@mail.gmail.com>

Dear all,
I have a question about R's modification in place and replacement functions.
I was working through Hadley Wickham's Advanced R section on
Replacement Functions and
in a file (say test.R) I wrote:

`second<-` <- function(x, value) {
   x[2] <- value
   x
}
x <- 1:10
second(x) <- 5L
print(x)

library(pryr)
x <- 1:10
print(address(x))
second(x) <- 6L
print(address(x))
x <- 1:10
print(address(x))
x[2] <- 7L
print(address(x))

When I copy-paste the code the effect is as expected:
> `second<-` <- function(x, value) {
+    x[2] <- value
+    x
+ }
> x <- 1:10
> second(x) <- 5L
> print(x)
 [1]  1  5  3  4  5  6  7  8  9 10
>
> library(pryr)
> x <- 1:10
> print(address(x))
[1] "0x1b44ef40"
> second(x) <- 6L
> print(address(x))
[1] "0x1f955a38"
> x <- 1:10
> print(address(x))
[1] "0x1b447090"
> x[2] <- 7L
> print(address(x))
[1] "0x1b447090"

However, when I source the code the effect is a bit surprising:
> source("test.R")
 [1]  1  5  3  4  5  6  7  8  9 10
[1] "0x2f372320"
[1] "0x2f394888"
[1] "0x1b446ef0"
[1] "0x1f960f30"
Notice, that the last two addresses are different.
I would be grateful if somebody could point me to an explanation for this.
I have tried this on: R version 3.1.2 running on openSUSE 12.1, R
version 3.4.2 running on openSUSE Leap 42.3
and on R running on a friend's Mac.

Thank you
Best wishes
Krzysztof Bartoszek


From luke-tier@ey m@ili@g off uiow@@edu  Sun May 13 22:44:37 2018
From: luke-tier@ey m@ili@g off uiow@@edu (luke-tier@ey m@ili@g off uiow@@edu)
Date: Sun, 13 May 2018 15:44:37 -0500 (CDT)
Subject: [Rd] 
 different type of modification when code is sourced and pasted
In-Reply-To: <CADP6=aWqPx-gSYnuYCqVKfxaVrY43nAW_oZP7hP-FZiFhz8gkQ@mail.gmail.com>
References: <CADP6=aWqPx-gSYnuYCqVKfxaVrY43nAW_oZP7hP-FZiFhz8gkQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.20.1805131541330.6923@luke-Latitude-7480>

Basically as a result of all the bells and whistles source() supports
it ends up creating an additional reference to the value of each top
level expression. That forces a duplicate.

Best,

luke

On Sun, 13 May 2018, Krzysztof Bartoszek wrote:

> Dear all,
> I have a question about R's modification in place and replacement functions.
> I was working through Hadley Wickham's Advanced R section on
> Replacement Functions and
> in a file (say test.R) I wrote:
>
> `second<-` <- function(x, value) {
>   x[2] <- value
>   x
> }
> x <- 1:10
> second(x) <- 5L
> print(x)
>
> library(pryr)
> x <- 1:10
> print(address(x))
> second(x) <- 6L
> print(address(x))
> x <- 1:10
> print(address(x))
> x[2] <- 7L
> print(address(x))
>
> When I copy-paste the code the effect is as expected:
>> `second<-` <- function(x, value) {
> +    x[2] <- value
> +    x
> + }
>> x <- 1:10
>> second(x) <- 5L
>> print(x)
> [1]  1  5  3  4  5  6  7  8  9 10
>>
>> library(pryr)
>> x <- 1:10
>> print(address(x))
> [1] "0x1b44ef40"
>> second(x) <- 6L
>> print(address(x))
> [1] "0x1f955a38"
>> x <- 1:10
>> print(address(x))
> [1] "0x1b447090"
>> x[2] <- 7L
>> print(address(x))
> [1] "0x1b447090"
>
> However, when I source the code the effect is a bit surprising:
>> source("test.R")
> [1]  1  5  3  4  5  6  7  8  9 10
> [1] "0x2f372320"
> [1] "0x2f394888"
> [1] "0x1b446ef0"
> [1] "0x1f960f30"
> Notice, that the last two addresses are different.
> I would be grateful if somebody could point me to an explanation for this.
> I have tried this on: R version 3.1.2 running on openSUSE 12.1, R
> version 3.4.2 running on openSUSE Leap 42.3
> and on R running on a friend's Mac.
>
> Thank you
> Best wishes
> Krzysztof Bartoszek
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @okol @ending from in@@-toulou@e@fr  Mon May 14 15:54:09 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Mon, 14 May 2018 15:54:09 +0200
Subject: [Rd] access an element with empty name
Message-ID: <0477dba5-4e80-84ab-7ea5-51b670de88fc@insa-toulouse.fr>

Hi,

I came across a case where I cannot access a list element by its empty name.
Minimal example can be constructed as

 ??? x=list("A", 1)
 ??? names(x)=c("a", "")
 ??? x[["a"]]
 ??? #[1]? "A"
 ??? x[[""]]
 ??? #NULL
 ??? x$`a`
 ??? #[1]? "A"
 ??? x$``
 ??? # Error: attempt to use zero-length variable name
 ??? # but we can still access the second element by its index
 ??? x[[2]]
 ??? #[1] 1

To my mind, it should be perfectly legal to access an element by an 
empty name as we can have for example
 ??? match("", names(x))
 ??? #[1] 2
Hence a traditional question: is it a bug or feature?

Best,
Serguei.


 > sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Mageia 6

Matrix products: default
BLAS/LAPACK: /home/opt/OpenBLAS/lib/libopenblas_sandybridge-r0.3.0.dev.so

locale:
[1] C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_3.5.0


From Kurt@Hornik @ending from wu@@c@@t  Mon May 14 15:55:47 2018
From: Kurt@Hornik @ending from wu@@c@@t (Kurt Hornik)
Date: Mon, 14 May 2018 15:55:47 +0200
Subject: [Rd] access an element with empty name
In-Reply-To: <0477dba5-4e80-84ab-7ea5-51b670de88fc@insa-toulouse.fr>
References: <0477dba5-4e80-84ab-7ea5-51b670de88fc@insa-toulouse.fr>
Message-ID: <23289.38243.173216.323929@hornik.net>

>>>>> Serguei Sokol writes:

> Hi,
> I came across a case where I cannot access a list element by its empty name.
> Minimal example can be constructed as

>  ??? x=list("A", 1)
>  ??? names(x)=c("a", "")
>  ??? x[["a"]]
>  ??? #[1]? "A"
>  ??? x[[""]]
>  ??? #NULL
>  ??? x$`a`
>  ??? #[1]? "A"
>  ??? x$``
>  ??? # Error: attempt to use zero-length variable name
>  ??? # but we can still access the second element by its index
>  ??? x[[2]]
>  ??? #[1] 1

> To my mind, it should be perfectly legal to access an element by an 
> empty name as we can have for example
>  ??? match("", names(x))
>  ??? #[1] 2
> Hence a traditional question: is it a bug or feature?

A feature according to the docs: ? Extract says

    Neither empty (?""?) nor ?NA? indices match any names, not even
    empty nor missing names. 

-k



> Best,
> Serguei.


>> sessionInfo()
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Mageia 6

> Matrix products: default
> BLAS/LAPACK: /home/opt/OpenBLAS/lib/libopenblas_sandybridge-r0.3.0.dev.so

> locale:
> [1] C

> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base

> loaded via a namespace (and not attached):
> [1] compiler_3.5.0

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @okol @ending from in@@-toulou@e@fr  Mon May 14 16:00:14 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Mon, 14 May 2018 16:00:14 +0200
Subject: [Rd] access an element with empty name
In-Reply-To: <23289.38243.173216.323929@hornik.net>
References: <0477dba5-4e80-84ab-7ea5-51b670de88fc@insa-toulouse.fr>
 <23289.38243.173216.323929@hornik.net>
Message-ID: <d8918e0b-a932-9d76-c925-21c6e1cb9b6d@insa-toulouse.fr>

Le 14/05/2018 ? 15:55, Kurt Hornik a ?crit?:
>>>>>> Serguei Sokol writes:
>> Hi,
>> I came across a case where I cannot access a list element by its empty name.
>> Minimal example can be constructed as
>>   ??? x=list("A", 1)
>>   ??? names(x)=c("a", "")
>>   ??? x[["a"]]
>>   ??? #[1]? "A"
>>   ??? x[[""]]
>>   ??? #NULL
>>   ??? x$`a`
>>   ??? #[1]? "A"
>>   ??? x$``
>>   ??? # Error: attempt to use zero-length variable name
>>   ??? # but we can still access the second element by its index
>>   ??? x[[2]]
>>   ??? #[1] 1
>> To my mind, it should be perfectly legal to access an element by an
>> empty name as we can have for example
>>   ??? match("", names(x))
>>   ??? #[1] 2
>> Hence a traditional question: is it a bug or feature?
> A feature according to the docs: ? Extract says
>
>      Neither empty (?""?) nor ?NA? indices match any names, not even
>      empty nor missing names.
>

Thanks Kurt, I missed that one.


From l@wrence@mich@el @ending from gene@com  Mon May 14 17:45:26 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Mon, 14 May 2018 08:45:26 -0700
Subject: [Rd] readLines() behaves differently for gzfile connection
In-Reply-To: <CAFsUf91RTyY_AKBw_s5omZATfs4kKm6HUmgnp+9fu7FW5GWhuQ@mail.gmail.com>
References: <CAFsUf91sPtYv9QNcx5mbnFL_XD8_b46E8hPNGn6KY755ea8mYQ@mail.gmail.com>
 <CAOQ5Nyf_FcvsbEhoQj=hf5BxzUdW0o8wRunzAhFbJ2-yMijp8g@mail.gmail.com>
 <CAFsUf91RTyY_AKBw_s5omZATfs4kKm6HUmgnp+9fu7FW5GWhuQ@mail.gmail.com>
Message-ID: <CAOQ5NydsUDHEV8m=RwT0394key+uQQodTusfn0xu8-F=ddfhXw@mail.gmail.com>

I haven't been able to reproduce the empty lines issue on my Mac or
Linux laptop, but I have yet to try that container.

The warning is because of a SEEK_SET to -1, which apparently is
unsupported by zlib. Maybe the zlib version in that container is
getting confused. I'm not sure why readLines() wants to seek to -1
instead of 0, but it only does that on non-blocking connections. The
compressed file connections are effectively blocking but are marked as
non-blocking. Marking them as blocking removes the warning. I will get
that into devel and release soon. Hopefully that fixes the empty lines
issue also.

Michael

On Thu, May 10, 2018 at 4:21 PM, Ben Heavner <bheavner at gmail.com> wrote:
> You bet - it's available on github at
> https://github.com/UW-GAC/wgsaparsr/blob/master/tests/testthat/1k_annotation.gz
>
> -Ben
>
> On Thu, May 10, 2018 at 4:17 PM, Michael Lawrence
> <lawrence.michael at gene.com> wrote:
>>
>> Would it be possible to get that file or a representative subset of it
>> somewhere so that I can reproduce this?
>>
>> Thanks,
>> Michael
>>
>> On Thu, May 10, 2018 at 3:31 PM, Ben Heavner <bheavner at gmail.com> wrote:
>> > When I read a .gz file with readLines() in 3.4.3, it returns text (and a
>> > warning). In 3.5.0, it gives a warning, but no text. Is this expected
>> > behavior or a bug?
>> >
>> > 3.4.3:
>> >> source_file = "1k_annotation.gz"
>> >> readfile_con <- gzfile(source_file, "r")
>> >> readLines(readfile_con, n = 5)
>> > [1] "#chr\tpos\tref\talt\t
>> >
>> > <truncated output here>
>> >
>> > Warning message:
>> > In readLines(readfile_con, n = 5) :
>> >   seek on a gzfile connection returned an internal error
>> >
>> >> close(readfile_con)
>> >
>> >> sessionInfo()
>> > R version 3.4.3 (2017-11-30)
>> > Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> > Running under: macOS Sierra 10.12.6
>> >
>> > Matrix products: default
>> > BLAS:
>> >
>> > /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
>> > LAPACK:
>> >
>> > /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib
>> >
>> > locale:
>> > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>> >
>> > attached base packages:
>> > [1] stats     graphics  grDevices utils     datasets  methods   base
>> >
>> > loaded via a namespace (and not attached):
>> > [1] compiler_3.4.3
>> >
>> > ---------------------------------------------
>> >
>> > 3.5.0:
>> >> source_file = "1k_annotation.gz"
>> >> readfile_con <- gzfile(source_file, "r")
>> >> readLines(readfile_con, n = 5)
>> > [1] "" "" "" "" ""
>> > Warning message:
>> > In readLines(readfile_con, n = 5) :
>> >   seek on a gzfile connection returned an internal error
>> >> close(readfile_con)
>> >> sessionInfo()
>> > R version 3.5.0 (2018-04-23)
>> > Platform: x86_64-pc-linux-gnu (64-bit)
>> > Running under: Debian GNU/Linux 9 (stretch)
>> >
>> > Matrix products: default
>> > BLAS: /usr/lib/openblas-base/libblas.so.3
>> > LAPACK: /usr/lib/libopenblasp-r0.2.19.so
>> >
>> > locale:
>> >  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>> >  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>> >  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=C
>> >  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>> >  [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> > [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>> >
>> > attached base packages:
>> > [1] stats     graphics  grDevices utils     datasets  methods   base
>> >
>> > loaded via a namespace (and not attached):
>> > [1] compiler_3.5.0
>> >
>> > ----------------------------------------
>> > (note: I'm running 3.5.0 via the docker rocker/tidyverse:3.5 container,
>> > and
>> > 3.4.3 on my mac desktop machine)
>> >
>> > Thanks!
>> > Ben Heavner
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>
>


From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Mon May 14 23:23:57 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Mon, 14 May 2018 21:23:57 +0000
Subject: [Rd] Rd parser throws error for user macros invoked with empty
 argument
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>

Bug or feature?

I get the following error from parse_Rd() when a user Rd macro (including system ones) is invoked with empty argument {},
eg \mymacro{}:

Error in tools::parse_Rd(fn) :
  Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'

A full example is further below with the system macro \CRANpkg{}. In this example it doesn't make sense to use empty argument but the error is not specific to this particular macro.

------
Georgi Boshnakov


Create an Rd file containing system macro \CRANpkg{bibtex}, parse_Rd() is ok:

=================
fn <- tempfile()
writeLines("\\name{dummyfun}
\\alias{dummyfun}
\\title{Dummy title}
\\description{Dummy description}
\\usage{
dummyfun(x, ...)
}
\\arguments{
  \\item{x}{a value.}
  \\item{\\dots}{further arguments.}
}
\\details{
    \\CRANpkg{bibtex}
}
", fn)

> tools::parse_Rd(fn)
...
\details{
    \href{{https://CRAN.R-project.org/package=bibtex}{\pkg{bibtex}}}
}

================

With empty argument - \CRANpkg{} - Rd parser throws error. Of course it is silly in this example but I have used it with other user defined  macros where it may make sense to have empty argument.

================
> writeLines("\\name{dummyfun}
\\alias{dummyfun}
\\title{Dummy title}
\\description{Dummy description}
\\usage{
dummyfun(x, ...)
}
\\arguments{
  \\item{x}{a value.}
  \\item{\\dots}{further arguments.}
}
\\details{
    \\CRANpkg{}
}
", fn)
> tools::parse_Rd(fn)
Error in tools::parse_Rd(fn) :
  Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'

	[[alternative HTML version deleted]]


From tho@jleeper @ending from gm@il@com  Tue May 15 11:28:46 2018
From: tho@jleeper @ending from gm@il@com (Thomas J. Leeper)
Date: Tue, 15 May 2018 10:28:46 +0100
Subject: [Rd] Mention L suffix in integer man page?
Message-ID: <CAOC91MSJiDS7UDRXOBk2CWVzP=uvX4x7HxW8XsLfPWTO_yiNYw@mail.gmail.com>

This is just a suggestion for a documentation improvement. I went to `?
integer` (src/library/base/man/integer.Rd) expecting to find an explanation
of the L suffix described in:
https://cran.r-project.org/doc/manuals/R-lang.html#Constants and `?
NumericConstants` but it's not mentioned anywhere. It might be useful to
have:

1. An example of explicit declaration of integers, like the one from `?
NumericConstants`:

## If you actually wanted integers, use an "L" suffix.
class(2L)
typeof(2L)

## These are equal but not identical
2 == 2L
identical(2, 2L)

2. A cross-reference to the `? NumericConstants` man page and/or a
cross-reference to the `? ':'` or `? seq` man pages, which describe how
particularities of how integer sequences can be (reliably) constructed.

Again, just a suggestion.

-Thomas

Thomas J. Leeper


From rich@rd@rowe@dr@gonflie@ @ending from gm@il@com  Wed May 16 00:13:51 2018
From: rich@rd@rowe@dr@gonflie@ @ending from gm@il@com (Richard Rowe)
Date: Wed, 16 May 2018 08:13:51 +1000
Subject: [Rd] bug in {graphics} identify()
Message-ID: <CAJSH4L7SA6LVSJUCd7Amsigh_Rk8CkQw35HCOGqqhDtZ16+KRg@mail.gmail.com>

 R3.4.x, R3.5.0, Windows7 64 bit code

{graphics} identify()
is sorting results before returning the vector. As documented it should
return the raw sequence in the order selected ...

"If |pos| is |FALSE|, an integer vector containing the indices of the
identified points, in the order they were identified. "

 X<-rnorm(100)            # 100 random numbers
dim(X)<-c(50,2)          #  making a 50 x 2 matrix to give 50 'fixes' for
now

plot(X, asp=1)            # onto the screen
boundary.points<-identify(X)  # proceed to identify boundary points, right
click and end
boundary.points
# and results are sorted, not in the raw order obtained ...

I'm not on the bugzilla listing, I think my last core bug report was for
chisq in 1998 ...

Richard

	[[alternative HTML version deleted]]


From hp@ge@ @ending from fredhutch@org  Wed May 16 02:25:47 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 15 May 2018 17:25:47 -0700
Subject: [Rd] Dispatch mechanism seems to alter object before calling method
 on it
Message-ID: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>

Hi,

This was quite unexpected:

   setGeneric("foo", function(x) standardGeneric("foo"))

   setMethod("foo", "vector", identity)

   foo(matrix(1:12, ncol=3))
   # [1]  1  2  3  4  5  6  7  8  9 10 11 12

   foo(array(1:24, 4:2))
   # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 
22 23 24

If I define a method for array objects, things work as expected though:

   setMethod("foo", "array", identity)

   foo(matrix(1:12, ncol=3))
   #      [,1] [,2] [,3]
   # [1,]    1    5    9
   # [2,]    2    6   10
   # [3,]    3    7   11
   # [4,]    4    8   12

So, luckily, I have a workaround.

But shouldn't the dispatch mechanism stay away from the business of
altering objects before passed to it?

Thanks,
H.

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From l@wrence@mich@el @ending from gene@com  Wed May 16 06:13:39 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Tue, 15 May 2018 21:13:39 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
Message-ID: <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>

My understanding is that array (or any other structure) does not
"simply" inherit from vector, because structures are not vectors in
the strictest sense. Basically, once a vector gains attributes, it is
a structure, not a vector. The methods package accommodates this by
defining an "is" relationship between "structure" and "vector" via an
"explicit coerce", such that any "structure" passed to a "vector"
method is first passed to as.vector(), which strips attributes. This
is very much by design.

Michael


On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
> Hi,
>
> This was quite unexpected:
>
>   setGeneric("foo", function(x) standardGeneric("foo"))
>
>   setMethod("foo", "vector", identity)
>
>   foo(matrix(1:12, ncol=3))
>   # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>
>   foo(array(1:24, 4:2))
>   # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
> 24
>
> If I define a method for array objects, things work as expected though:
>
>   setMethod("foo", "array", identity)
>
>   foo(matrix(1:12, ncol=3))
>   #      [,1] [,2] [,3]
>   # [1,]    1    5    9
>   # [2,]    2    6   10
>   # [3,]    3    7   11
>   # [4,]    4    8   12
>
> So, luckily, I have a workaround.
>
> But shouldn't the dispatch mechanism stay away from the business of
> altering objects before passed to it?
>
> Thanks,
> H.
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From oy@tein@@oren@en@1985 @ending from gm@il@com  Wed May 16 09:22:19 2018
From: oy@tein@@oren@en@1985 @ending from gm@il@com (=?UTF-8?B?w5h5c3RlaW4gU8O4cmVuc2Vu?=)
Date: Wed, 16 May 2018 09:22:19 +0200
Subject: [Rd] xtfrm documentation typo
Message-ID: <CAEWpFgebC4XsxQ+D3XMbgANsh4t4K-Pi8i5ETOQ9bdV1u7ZbRQ@mail.gmail.com>

I believe there is a typo in the documentation to base::xtfrm, in the file
xtfrm.Rd:

Under Details, it says:

 "... The \code{\link[survival]{Surv}} method sorts first on times and then
on status code(s), finally on \code{timme2} if present. ...".

I believe timme2 should be replaced by time2, since time2 is an argument to
Surve. Then it becomes:

"... The \code{\link[survival]{Surv}} method sorts first on times and then
on status code(s), finally on \code{time2} if present. ..."

Best,
?ystein S?rensen

	[[alternative HTML version deleted]]


From tom@@@k@liber@ @ending from gm@il@com  Wed May 16 14:17:32 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 16 May 2018 14:17:32 +0200
Subject: [Rd] 
 Possible bug in package installation when R_ICU_LOCALE is set
In-Reply-To: <a1ae947c811a40cd847ae23cee08916d@C119S212VM016.msvyvi.vaha.local>
References: <a1ae947c811a40cd847ae23cee08916d@C119S212VM016.msvyvi.vaha.local>
Message-ID: <8c695d45-0e1b-1fc4-623c-0d6a92373e2d@gmail.com>

Thanks for the report, fixed in 74706.

Best,
Tomas

On 04/26/2018 08:43 AM, Korpela Mikko (MML) wrote:
> (Belated) thanks for the confirmation, Ista. I just reported this issue on the R bug tracker:
> https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=17412
>
> Best regards,
>
> - Mikko
>
> -----Alkuper?inen viesti-----
> L?hett?j?: Ista Zahn [mailto:istazahn at gmail.com]
> L?hetetty: 7. helmikuuta 2018 17:05
> Vastaanottaja: Korpela Mikko (MML)
> Kopio: r-devel at r-project.org
> Aihe: Re: [Rd] Possible bug in package installation when R_ICU_LOCALE is set
>
> I can reproduce this on Linux, so it is not Windows-specific.
>
>> sessionInfo()
> R version 3.4.3 (2017-11-30)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Arch Linux
>
> Matrix products: default
> BLAS/LAPACK: /usr/lib/libopenblas_haswellp-r0.2.20.so
>
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> LC_TIME=en_US.UTF-8
>   [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8
> LC_MESSAGES=en_US.UTF-8
>   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> LC_ADDRESS=C
> [10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8
> LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.4.3 rmsfact_0.0.3  tools_3.4.3    cowsay_0.5.0   fortunes_1.5-4
>
>
> On Wed, Feb 7, 2018 at 8:38 AM, Korpela Mikko (MML) <mikko.korpela at maanmittauslaitos.fi> wrote:
>> On a Windows computer (other platforms not tested), installing a
>> package from source may fail if the environment variable R_ICU_LOCALE
>> is set, depending on the package and the locale.
>>
>> For example, after setting R_ICU_LOCALE to "fi_FI",
>>
>>    install.packages("seriation", type = "source")
>>
>> (package version 1.2-3) fails with the following error:
>>
>> ** preparing package for lazy loading
>> Error in set_criterion_method("dist", "AR_events", criterion_ar_events,  :
>>    could not find function "set_criterion_method"
>> Error : unable to load R code in package 'seriation'
>>
>> Package "Epi" (version 2.24) fails similarly:
>>
>> ** preparing package for lazy loading
>> Error in eval(exprs[i], envir) : object 'Relevel.default' not found
>> Error : unable to load R code in package 'Epi'
>>
>> Whether R_ICU_LOCALE is set before R is launched or during the session
>> doesn't matter: installation of these two example packages fails
>> either way. If R_ICU_LOCALE is unset, calling
>>
>>    icuSetCollate(locale = "fi_FI")
>>
>> is harmless. Browsing through the R manuals, I did not find warnings
>> against using R_ICU_LOCALE, or any indication why package installation
>> should fail with the variable being set. About the collation order of
>> R code files, "Writing R Extensions" says:
>>
>>> The default is to collate according to the 'C' locale.
>> I interpret this (and the surrounding text) as a "promise" to package
>> developers that no matter what the end user does, the developer should
>> be able to rely on the collation order being 'C' unless the developer
>> defines another order.
>>
>>> sessionInfo()
>> R version 3.4.3 Patched (2018-02-03 r74231)
>> Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 7 x64
>> (build 7601) Service Pack 1
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=Finnish_Finland.1252  LC_CTYPE=Finnish_Finland.1252 [3]
>> LC_MONETARY=Finnish_Finland.1252 LC_NUMERIC=C [5]
>> LC_TIME=Finnish_Finland.1252
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.4.3 tools_3.4.3
>>
>> --
>> Mikko Korpela
>> Chief Expert, Valuations
>> National Land Survey of Finland
>> Opastinsilta 12 C, FI-00520 Helsinki, Finland
>> +358 50 462 6082
>> www.maanmittauslaitos.fi
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @ending from fredhutch@org  Wed May 16 17:33:44 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 16 May 2018 08:33:44 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
 <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
Message-ID: <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>

On 05/15/2018 09:13 PM, Michael Lawrence wrote:
> My understanding is that array (or any other structure) does not
> "simply" inherit from vector, because structures are not vectors in
> the strictest sense. Basically, once a vector gains attributes, it is
> a structure, not a vector. The methods package accommodates this by
> defining an "is" relationship between "structure" and "vector" via an
> "explicit coerce", such that any "structure" passed to a "vector"
> method is first passed to as.vector(), which strips attributes. This
> is very much by design.

It seems that the problem is really with matrices and arrays, not
with "structures" in general:

   f <- factor(c("z", "x", "z"), levels=letters)
   m <- matrix(1:12, ncol=3)
   df <- data.frame(f=f)
   x <- structure(1:3, titi="A")

Only the matrix looses its attributes when passed to a "vector"
method:

   setGeneric("foo", function(x) standardGeneric("foo"))
   setMethod("foo", "vector", identity)

   foo(f)     # attributes are preserved
   # [1] z x z
   # Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z

   foo(m)     # attributes are stripped
   # [1]  1  2  3  4  5  6  7  8  9 10 11 12

   foo(df)    # attributes are preserved
   #   f
   # 1 z
   # 2 x
   # 3 z

   foo(x)     # attributes are preserved
   # [1] 1 2 3
   # attr(,"titi")
   # [1] "A"

Also if structures are passed to as.vector() before being passed to
a "vector" method, shouldn't as.vector() and foo() be equivalent on
them? For 'f' and 'x' they're not:

   as.vector(f)
   # [1] "z" "x" "z"

   as.vector(x)
   # [1] 1 2 3

Finally note that for factors and data frames the "vector" method gets
selected despite the fact that is( , "vector") is FALSE:

   is(f, "vector")
   # [1] FALSE

   is(m, "vector")
   # [1] TRUE

   is(df, "vector")
   # [1] FALSE

   is(x, "vector")
   # [1] TRUE

Couldn't we recognize these problems as real, even if they are by
design? Hopefully we can all agree that:
- the dispatch mechanism should only dispatch, not alter objects;
- is() and selectMethod() should not contradict each other.

Thanks,
H.

> 
> Michael
> 
> 
> On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>> Hi,
>>
>> This was quite unexpected:
>>
>>    setGeneric("foo", function(x) standardGeneric("foo"))
>>
>>    setMethod("foo", "vector", identity)
>>
>>    foo(matrix(1:12, ncol=3))
>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>
>>    foo(array(1:24, 4:2))
>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
>> 24
>>
>> If I define a method for array objects, things work as expected though:
>>
>>    setMethod("foo", "array", identity)
>>
>>    foo(matrix(1:12, ncol=3))
>>    #      [,1] [,2] [,3]
>>    # [1,]    1    5    9
>>    # [2,]    2    6   10
>>    # [3,]    3    7   11
>>    # [4,]    4    8   12
>>
>> So, luckily, I have a workaround.
>>
>> But shouldn't the dispatch mechanism stay away from the business of
>> altering objects before passed to it?
>>
>> Thanks,
>> H.
>>
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=gynT4YhbmVKZhnX4srXlCWZZRyVBMXG211CKgftdEs0&s=_I0aFHQVnXdBfB5kTLg9TxK_2LHdSuaB6gqZwSx1orQ&e=
>>

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From rol@nd@fu@@ @ending from thuenen@de  Wed May 16 17:21:07 2018
From: rol@nd@fu@@ @ending from thuenen@de (=?UTF-8?Q?Roland_Fu=c3=9f?=)
Date: Wed, 16 May 2018 17:21:07 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
Message-ID: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>

R 3.5.0

Is it intended that the Date method of as.POSIXct does not respect the 
tz parameter? I suggest changing as.POSIXct.Date to this:

function (x, tz = "", ...)
   .POSIXct(unclass(x) * 86400, tz = tz)

Currently, the best workaround seems to be using the character method if 
one doesn't want the default timezone (which is often an annoying DST 
timezone).

This came up on Stack Overflow: https://stackoverflow.com/q/50373340/1412059

--
Roland


From l@wrence@mich@el @ending from gene@com  Wed May 16 19:22:49 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Wed, 16 May 2018 10:22:49 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
 <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
 <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>
Message-ID: <CAOQ5NyeM_niC+7o0r3B7iK8P5bFsyk9on9eJ_xFXEbt6u0mOYQ@mail.gmail.com>

Factors and data.frames are not structures, because they must have a
class attribute. Just call them "objects". They are higher level than
structures, which in practice just shape data without adding a lot of
semantics. Compare getClass("matrix") and getClass("factor").

I agree that inheritance through explicit coercion is confusing. As
far as I know, there are only 2 places where it is used:
1) Objects with attributes but no class, basically "structure" and its
subclasses "array" <- "matrix"
2) Classes that extend a reference type ("environment", "name" and
"externalptr") via hidden delegation (@.xData)

I'm not sure if anyone should be doing #2. For #1, a simple "fix"
would be just to drop inheritance of "structure" from "vector". I
think the intent was to mimic base R behavior, where it will happily
strip (or at least ignore) attributes when passing an array or matrix
to an internal function that expects a vector.

A related problem, which explains why factor and data.frame inherit
from "vector" even though they are objects, is that any S4 object
derived from those needs to be (for pragmatic compatibility reasons)
an integer vector or list, respectively, internally (the virtual
@.Data slot). Separating that from inheritance would probably be
difficult.

Yes, we can consider these to be problems, to some extent stemming
from the behavior and design of R itself, but I'm not sure it's worth
doing anything about them at this point.

Michael

On Wed, May 16, 2018 at 8:33 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
> On 05/15/2018 09:13 PM, Michael Lawrence wrote:
>>
>> My understanding is that array (or any other structure) does not
>> "simply" inherit from vector, because structures are not vectors in
>> the strictest sense. Basically, once a vector gains attributes, it is
>> a structure, not a vector. The methods package accommodates this by
>> defining an "is" relationship between "structure" and "vector" via an
>> "explicit coerce", such that any "structure" passed to a "vector"
>> method is first passed to as.vector(), which strips attributes. This
>> is very much by design.
>
>
> It seems that the problem is really with matrices and arrays, not
> with "structures" in general:
>
>   f <- factor(c("z", "x", "z"), levels=letters)
>   m <- matrix(1:12, ncol=3)
>   df <- data.frame(f=f)
>   x <- structure(1:3, titi="A")
>
> Only the matrix looses its attributes when passed to a "vector"
> method:
>
>   setGeneric("foo", function(x) standardGeneric("foo"))
>   setMethod("foo", "vector", identity)
>
>   foo(f)     # attributes are preserved
>   # [1] z x z
>   # Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z
>
>   foo(m)     # attributes are stripped
>   # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>
>   foo(df)    # attributes are preserved
>   #   f
>   # 1 z
>   # 2 x
>   # 3 z
>
>   foo(x)     # attributes are preserved
>   # [1] 1 2 3
>   # attr(,"titi")
>   # [1] "A"
>
> Also if structures are passed to as.vector() before being passed to
> a "vector" method, shouldn't as.vector() and foo() be equivalent on
> them? For 'f' and 'x' they're not:
>
>   as.vector(f)
>   # [1] "z" "x" "z"
>
>   as.vector(x)
>   # [1] 1 2 3
>
> Finally note that for factors and data frames the "vector" method gets
> selected despite the fact that is( , "vector") is FALSE:
>
>   is(f, "vector")
>   # [1] FALSE
>
>   is(m, "vector")
>   # [1] TRUE
>
>   is(df, "vector")
>   # [1] FALSE
>
>   is(x, "vector")
>   # [1] TRUE
>
> Couldn't we recognize these problems as real, even if they are by
> design? Hopefully we can all agree that:
> - the dispatch mechanism should only dispatch, not alter objects;
> - is() and selectMethod() should not contradict each other.
>
> Thanks,
> H.
>
>>
>> Michael
>>
>>
>> On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>
>>> Hi,
>>>
>>> This was quite unexpected:
>>>
>>>    setGeneric("foo", function(x) standardGeneric("foo"))
>>>
>>>    setMethod("foo", "vector", identity)
>>>
>>>    foo(matrix(1:12, ncol=3))
>>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>
>>>    foo(array(1:24, 4:2))
>>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21
>>> 22 23
>>> 24
>>>
>>> If I define a method for array objects, things work as expected though:
>>>
>>>    setMethod("foo", "array", identity)
>>>
>>>    foo(matrix(1:12, ncol=3))
>>>    #      [,1] [,2] [,3]
>>>    # [1,]    1    5    9
>>>    # [2,]    2    6   10
>>>    # [3,]    3    7   11
>>>    # [4,]    4    8   12
>>>
>>> So, luckily, I have a workaround.
>>>
>>> But shouldn't the dispatch mechanism stay away from the business of
>>> altering objects before passed to it?
>>>
>>> Thanks,
>>> H.
>>>
>>> --
>>> Herv? Pag?s
>>>
>>> Program in Computational Biology
>>> Division of Public Health Sciences
>>> Fred Hutchinson Cancer Research Center
>>> 1100 Fairview Ave. N, M1-B514
>>> P.O. Box 19024
>>> Seattle, WA 98109-1024
>>>
>>> E-mail: hpages at fredhutch.org
>>> Phone:  (206) 667-5791
>>> Fax:    (206) 667-1319
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>>
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=gynT4YhbmVKZhnX4srXlCWZZRyVBMXG211CKgftdEs0&s=_I0aFHQVnXdBfB5kTLg9TxK_2LHdSuaB6gqZwSx1orQ&e=
>>>
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319


From hp@ge@ @ending from fredhutch@org  Wed May 16 21:23:39 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 16 May 2018 12:23:39 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <CAOQ5NyeM_niC+7o0r3B7iK8P5bFsyk9on9eJ_xFXEbt6u0mOYQ@mail.gmail.com>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
 <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
 <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>
 <CAOQ5NyeM_niC+7o0r3B7iK8P5bFsyk9on9eJ_xFXEbt6u0mOYQ@mail.gmail.com>
Message-ID: <035064de-539a-9295-18ab-d315134126da@fredhutch.org>

On 05/16/2018 10:22 AM, Michael Lawrence wrote:
> Factors and data.frames are not structures, because they must have a
> class attribute. Just call them "objects". They are higher level than
> structures, which in practice just shape data without adding a lot of
> semantics. Compare getClass("matrix") and getClass("factor").
> 
> I agree that inheritance through explicit coercion is confusing. As
> far as I know, there are only 2 places where it is used:
> 1) Objects with attributes but no class, basically "structure" and its
> subclasses "array" <- "matrix"
> 2) Classes that extend a reference type ("environment", "name" and
> "externalptr") via hidden delegation (@.xData)
> 
> I'm not sure if anyone should be doing #2. For #1, a simple "fix"
> would be just to drop inheritance of "structure" from "vector". I
> think the intent was to mimic base R behavior, where it will happily
> strip (or at least ignore) attributes when passing an array or matrix
> to an internal function that expects a vector.
> 
> A related problem, which explains why factor and data.frame inherit
> from "vector" even though they are objects, is that any S4 object
> derived from those needs to be (for pragmatic compatibility reasons)
> an integer vector or list, respectively, internally (the virtual
> @.Data slot). Separating that from inheritance would probably be
> difficult.
> 
> Yes, we can consider these to be problems, to some extent stemming
> from the behavior and design of R itself, but I'm not sure it's worth
> doing anything about them at this point.

Thanks for the informative discussion. It still doesn't explain
why 'm' gets its attributes stripped and 'x' does not though:

   m <- matrix(1:12, ncol=3)
   x <- structure(1:3, titi="A")

   setGeneric("foo", function(x) standardGeneric("foo"))
   setMethod("foo", "vector", identity)

   foo(m)
   # [1]  1  2  3  4  5  6  7  8  9 10 11 12

   foo(x)
   # [1] 1 2 3
   # attr(,"titi")
   # [1] "A"

If I understand correctly, both are "structures", not "objects".

Why aren't these problems worth fixing? More generally speaking
the erratic behavior of the S4 system with respect to S3 objects
has been a plague since the beginning of the methods package.
And many people have complained about this in many occasions in
one way or another. For the record, here are some of the most
notorious problems:

   class(as.numeric(1:4))
   # [1] "numeric"
   class(as(1:4, "numeric"))
   # [1] "integer"

   is.vector(matrix())
   # [1] FALSE
   is(matrix(), "vector")
   # [1] TRUE

   is.list(data.frame())
   # [1] TRUE
   is(data.frame(), "list")
   # [1] FALSE
   extends("data.frame", "list")
   # [1] TRUE

   setClassUnion("vector_OR_factor", c("vector", "factor"))
   is(data.frame(), "vector")
   # [1] FALSE
   is(data.frame(), "factor")
   # [1] FALSE
   is(data.frame(), "vector_OR_factor")
   # [1] TRUE

   etc...

Many people stay away from S4 because of these incomprehensible
behaviors.

Finally note that even pure S3 operations can produce output that
doesn't make sense:

   is.list(data.frame())
   # [1] TRUE
   is.vector(list())
   # [1] TRUE
   is.vector(data.frame())
   # [1] FALSE

   (that is: a data frame is a list and a list is a vector but
   a data frame is not a vector!)

Why aren't these problems taken more seriously?

Thanks,
H.

> 
> Michael
> 
> On Wed, May 16, 2018 at 8:33 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>> On 05/15/2018 09:13 PM, Michael Lawrence wrote:
>>>
>>> My understanding is that array (or any other structure) does not
>>> "simply" inherit from vector, because structures are not vectors in
>>> the strictest sense. Basically, once a vector gains attributes, it is
>>> a structure, not a vector. The methods package accommodates this by
>>> defining an "is" relationship between "structure" and "vector" via an
>>> "explicit coerce", such that any "structure" passed to a "vector"
>>> method is first passed to as.vector(), which strips attributes. This
>>> is very much by design.
>>
>>
>> It seems that the problem is really with matrices and arrays, not
>> with "structures" in general:
>>
>>    f <- factor(c("z", "x", "z"), levels=letters)
>>    m <- matrix(1:12, ncol=3)
>>    df <- data.frame(f=f)
>>    x <- structure(1:3, titi="A")
>>
>> Only the matrix looses its attributes when passed to a "vector"
>> method:
>>
>>    setGeneric("foo", function(x) standardGeneric("foo"))
>>    setMethod("foo", "vector", identity)
>>
>>    foo(f)     # attributes are preserved
>>    # [1] z x z
>>    # Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z
>>
>>    foo(m)     # attributes are stripped
>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>
>>    foo(df)    # attributes are preserved
>>    #   f
>>    # 1 z
>>    # 2 x
>>    # 3 z
>>
>>    foo(x)     # attributes are preserved
>>    # [1] 1 2 3
>>    # attr(,"titi")
>>    # [1] "A"
>>
>> Also if structures are passed to as.vector() before being passed to
>> a "vector" method, shouldn't as.vector() and foo() be equivalent on
>> them? For 'f' and 'x' they're not:
>>
>>    as.vector(f)
>>    # [1] "z" "x" "z"
>>
>>    as.vector(x)
>>    # [1] 1 2 3
>>
>> Finally note that for factors and data frames the "vector" method gets
>> selected despite the fact that is( , "vector") is FALSE:
>>
>>    is(f, "vector")
>>    # [1] FALSE
>>
>>    is(m, "vector")
>>    # [1] TRUE
>>
>>    is(df, "vector")
>>    # [1] FALSE
>>
>>    is(x, "vector")
>>    # [1] TRUE
>>
>> Couldn't we recognize these problems as real, even if they are by
>> design? Hopefully we can all agree that:
>> - the dispatch mechanism should only dispatch, not alter objects;
>> - is() and selectMethod() should not contradict each other.
>>
>> Thanks,
>> H.
>>
>>>
>>> Michael
>>>
>>>
>>> On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>>
>>>> Hi,
>>>>
>>>> This was quite unexpected:
>>>>
>>>>     setGeneric("foo", function(x) standardGeneric("foo"))
>>>>
>>>>     setMethod("foo", "vector", identity)
>>>>
>>>>     foo(matrix(1:12, ncol=3))
>>>>     # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>>
>>>>     foo(array(1:24, 4:2))
>>>>     # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21
>>>> 22 23
>>>> 24
>>>>
>>>> If I define a method for array objects, things work as expected though:
>>>>
>>>>     setMethod("foo", "array", identity)
>>>>
>>>>     foo(matrix(1:12, ncol=3))
>>>>     #      [,1] [,2] [,3]
>>>>     # [1,]    1    5    9
>>>>     # [2,]    2    6   10
>>>>     # [3,]    3    7   11
>>>>     # [4,]    4    8   12
>>>>
>>>> So, luckily, I have a workaround.
>>>>
>>>> But shouldn't the dispatch mechanism stay away from the business of
>>>> altering objects before passed to it?
>>>>
>>>> Thanks,
>>>> H.
>>>>
>>>> --
>>>> Herv? Pag?s
>>>>
>>>> Program in Computational Biology
>>>> Division of Public Health Sciences
>>>> Fred Hutchinson Cancer Research Center
>>>> 1100 Fairview Ave. N, M1-B514
>>>> P.O. Box 19024
>>>> Seattle, WA 98109-1024
>>>>
>>>> E-mail: hpages at fredhutch.org
>>>> Phone:  (206) 667-5791
>>>> Fax:    (206) 667-1319
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>>
>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=gynT4YhbmVKZhnX4srXlCWZZRyVBMXG211CKgftdEs0&s=_I0aFHQVnXdBfB5kTLg9TxK_2LHdSuaB6gqZwSx1orQ&e=
>>>>
>>
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From l@wrence@mich@el @ending from gene@com  Wed May 16 22:24:26 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Wed, 16 May 2018 13:24:26 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <035064de-539a-9295-18ab-d315134126da@fredhutch.org>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
 <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
 <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>
 <CAOQ5NyeM_niC+7o0r3B7iK8P5bFsyk9on9eJ_xFXEbt6u0mOYQ@mail.gmail.com>
 <035064de-539a-9295-18ab-d315134126da@fredhutch.org>
Message-ID: <CAOQ5Nyfuv++2f_LPGXnWQRA_E01XDcP86d6yd1xAumnA3_BwGw@mail.gmail.com>

On Wed, May 16, 2018 at 12:23 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
> On 05/16/2018 10:22 AM, Michael Lawrence wrote:
>>
>> Factors and data.frames are not structures, because they must have a
>> class attribute. Just call them "objects". They are higher level than
>> structures, which in practice just shape data without adding a lot of
>> semantics. Compare getClass("matrix") and getClass("factor").
>>
>> I agree that inheritance through explicit coercion is confusing. As
>> far as I know, there are only 2 places where it is used:
>> 1) Objects with attributes but no class, basically "structure" and its
>> subclasses "array" <- "matrix"
>> 2) Classes that extend a reference type ("environment", "name" and
>> "externalptr") via hidden delegation (@.xData)
>>
>> I'm not sure if anyone should be doing #2. For #1, a simple "fix"
>> would be just to drop inheritance of "structure" from "vector". I
>> think the intent was to mimic base R behavior, where it will happily
>> strip (or at least ignore) attributes when passing an array or matrix
>> to an internal function that expects a vector.
>>
>> A related problem, which explains why factor and data.frame inherit
>> from "vector" even though they are objects, is that any S4 object
>> derived from those needs to be (for pragmatic compatibility reasons)
>> an integer vector or list, respectively, internally (the virtual
>> @.Data slot). Separating that from inheritance would probably be
>> difficult.
>>
>> Yes, we can consider these to be problems, to some extent stemming
>> from the behavior and design of R itself, but I'm not sure it's worth
>> doing anything about them at this point.
>
>
> Thanks for the informative discussion. It still doesn't explain
> why 'm' gets its attributes stripped and 'x' does not though:
>
>   m <- matrix(1:12, ncol=3)
>   x <- structure(1:3, titi="A")
>
>   setGeneric("foo", function(x) standardGeneric("foo"))
>   setMethod("foo", "vector", identity)
>
>   foo(m)
>   # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>
>   foo(x)
>   # [1] 1 2 3
>   # attr(,"titi")
>   # [1] "A"
>
> If I understand correctly, both are "structures", not "objects".
>

The structure 'x' has no class, so nothing special is going to happen.
As you know, S4 has a well-defined class hierarchy. Just look at
getClass("structure") to see its subclasses. There was at some point
an attempt to create a sort of dynamic inheritance, where a 'test'
function would be called and could figure this out. However, that was
never implemented. For one thing, it would be even more confusing.

> Why aren't these problems worth fixing? More generally speaking
> the erratic behavior of the S4 system with respect to S3 objects
> has been a plague since the beginning of the methods package.
> And many people have complained about this in many occasions in
> one way or another. For the record, here are some of the most
> notorious problems:
>
>   class(as.numeric(1:4))
>   # [1] "numeric"
>   class(as(1:4, "numeric"))
>   # [1] "integer"
>

This is not really a problem with the methods package. is.numeric(1L)
is TRUE, thus integer extends numeric, so coercing an integer to
numeric is a no-op. as.numeric() should really be called as.double()
or something. But that's not going to change, of course.

>   is.vector(matrix())
>   # [1] FALSE
>   is(matrix(), "vector")
>   # [1] TRUE
>

We already discussed this in the context of "structure" inheriting
from "vector" and explicit coercion.

>   is.list(data.frame())
>   # [1] TRUE
>   is(data.frame(), "list")
>   # [1] FALSE
>   extends("data.frame", "list")
>   # [1] TRUE
>

This is a compromise for compatibility with inherits(), since the
result of data.frame() is an S3 object.

>
>   is(data.frame(), "vector")
>   # [1] FALSE
>   is(data.frame(), "factor")
>   # [1] FALSE
>   is(data.frame(), "vector_OR_factor")
>   # [1] TRUE
>

The question is: which inheritance to follow, S3 or S4? Since "vector"
is a basic class, inheritance follows S3 rules. But the class union is
an S4 class, so it follows S4 rules.

>   etc...
>
> Many people stay away from S4 because of these incomprehensible
> behaviors.
>
> Finally note that even pure S3 operations can produce output that
> doesn't make sense:
>
>   is.list(data.frame())
>   # [1] TRUE
>   is.vector(list())
>   # [1] TRUE
>   is.vector(data.frame())
>   # [1] FALSE
>
>   (that is: a data frame is a list and a list is a vector but
>   a data frame is not a vector!)
>

R has no notion of inheritance here. These are just different
functions checking different things. Bringing this up again after so
many discussions borders on trolling.

> Why aren't these problems taken more seriously?
>

They are taken seriously. But there are serious semantic differences
between S3, S4 and base type checking functions. The S3/S4 integration
should be viewed as a tool that is useful in practice, despite forced
compromises.

There are changes that would resolve some of these issues, like those
suggested earlier in this thread, but it's likely too disruptive to
make them now. Energy is better spent thinking about how we will do it
"right" the next time around.

> Thanks,
> H.
>
>>
>> Michael
>>
>> On Wed, May 16, 2018 at 8:33 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>
>>> On 05/15/2018 09:13 PM, Michael Lawrence wrote:
>>>>
>>>>
>>>> My understanding is that array (or any other structure) does not
>>>> "simply" inherit from vector, because structures are not vectors in
>>>> the strictest sense. Basically, once a vector gains attributes, it is
>>>> a structure, not a vector. The methods package accommodates this by
>>>> defining an "is" relationship between "structure" and "vector" via an
>>>> "explicit coerce", such that any "structure" passed to a "vector"
>>>> method is first passed to as.vector(), which strips attributes. This
>>>> is very much by design.
>>>
>>>
>>>
>>> It seems that the problem is really with matrices and arrays, not
>>> with "structures" in general:
>>>
>>>    f <- factor(c("z", "x", "z"), levels=letters)
>>>    m <- matrix(1:12, ncol=3)
>>>    df <- data.frame(f=f)
>>>    x <- structure(1:3, titi="A")
>>>
>>> Only the matrix looses its attributes when passed to a "vector"
>>> method:
>>>
>>>    setGeneric("foo", function(x) standardGeneric("foo"))
>>>    setMethod("foo", "vector", identity)
>>>
>>>    foo(f)     # attributes are preserved
>>>    # [1] z x z
>>>    # Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z
>>>
>>>    foo(m)     # attributes are stripped
>>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>
>>>    foo(df)    # attributes are preserved
>>>    #   f
>>>    # 1 z
>>>    # 2 x
>>>    # 3 z
>>>
>>>    foo(x)     # attributes are preserved
>>>    # [1] 1 2 3
>>>    # attr(,"titi")
>>>    # [1] "A"
>>>
>>> Also if structures are passed to as.vector() before being passed to
>>> a "vector" method, shouldn't as.vector() and foo() be equivalent on
>>> them? For 'f' and 'x' they're not:
>>>
>>>    as.vector(f)
>>>    # [1] "z" "x" "z"
>>>
>>>    as.vector(x)
>>>    # [1] 1 2 3
>>>
>>> Finally note that for factors and data frames the "vector" method gets
>>> selected despite the fact that is( , "vector") is FALSE:
>>>
>>>    is(f, "vector")
>>>    # [1] FALSE
>>>
>>>    is(m, "vector")
>>>    # [1] TRUE
>>>
>>>    is(df, "vector")
>>>    # [1] FALSE
>>>
>>>    is(x, "vector")
>>>    # [1] TRUE
>>>
>>> Couldn't we recognize these problems as real, even if they are by
>>> design? Hopefully we can all agree that:
>>> - the dispatch mechanism should only dispatch, not alter objects;
>>> - is() and selectMethod() should not contradict each other.
>>>
>>> Thanks,
>>> H.
>>>
>>>>
>>>> Michael
>>>>
>>>>
>>>> On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org>
>>>> wrote:
>>>>>
>>>>>
>>>>> Hi,
>>>>>
>>>>> This was quite unexpected:
>>>>>
>>>>>     setGeneric("foo", function(x) standardGeneric("foo"))
>>>>>
>>>>>     setMethod("foo", "vector", identity)
>>>>>
>>>>>     foo(matrix(1:12, ncol=3))
>>>>>     # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>>>
>>>>>     foo(array(1:24, 4:2))
>>>>>     # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
>>>>> 21
>>>>> 22 23
>>>>> 24
>>>>>
>>>>> If I define a method for array objects, things work as expected though:
>>>>>
>>>>>     setMethod("foo", "array", identity)
>>>>>
>>>>>     foo(matrix(1:12, ncol=3))
>>>>>     #      [,1] [,2] [,3]
>>>>>     # [1,]    1    5    9
>>>>>     # [2,]    2    6   10
>>>>>     # [3,]    3    7   11
>>>>>     # [4,]    4    8   12
>>>>>
>>>>> So, luckily, I have a workaround.
>>>>>
>>>>> But shouldn't the dispatch mechanism stay away from the business of
>>>>> altering objects before passed to it?
>>>>>
>>>>> Thanks,
>>>>> H.
>>>>>
>>>>> --
>>>>> Herv? Pag?s
>>>>>
>>>>> Program in Computational Biology
>>>>> Division of Public Health Sciences
>>>>> Fred Hutchinson Cancer Research Center
>>>>> 1100 Fairview Ave. N, M1-B514
>>>>> P.O. Box 19024
>>>>> Seattle, WA 98109-1024
>>>>>
>>>>> E-mail: hpages at fredhutch.org
>>>>> Phone:  (206) 667-5791
>>>>> Fax:    (206) 667-1319
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>>
>>>>>
>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=gynT4YhbmVKZhnX4srXlCWZZRyVBMXG211CKgftdEs0&s=_I0aFHQVnXdBfB5kTLg9TxK_2LHdSuaB6gqZwSx1orQ&e=
>>>>>
>>>
>>> --
>>> Herv? Pag?s
>>>
>>> Program in Computational Biology
>>> Division of Public Health Sciences
>>> Fred Hutchinson Cancer Research Center
>>> 1100 Fairview Ave. N, M1-B514
>>> P.O. Box 19024
>>> Seattle, WA 98109-1024
>>>
>>> E-mail: hpages at fredhutch.org
>>> Phone:  (206) 667-5791
>>> Fax:    (206) 667-1319
>
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>


From hp@ge@ @ending from fredhutch@org  Thu May 17 00:45:02 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 16 May 2018 15:45:02 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <CAOQ5Nyfuv++2f_LPGXnWQRA_E01XDcP86d6yd1xAumnA3_BwGw@mail.gmail.com>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
 <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
 <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>
 <CAOQ5NyeM_niC+7o0r3B7iK8P5bFsyk9on9eJ_xFXEbt6u0mOYQ@mail.gmail.com>
 <035064de-539a-9295-18ab-d315134126da@fredhutch.org>
 <CAOQ5Nyfuv++2f_LPGXnWQRA_E01XDcP86d6yd1xAumnA3_BwGw@mail.gmail.com>
Message-ID: <4c235908-9976-1930-a6ef-cdf3ba2fcafd@fredhutch.org>

On 05/16/2018 01:24 PM, Michael Lawrence wrote:
> On Wed, May 16, 2018 at 12:23 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>> On 05/16/2018 10:22 AM, Michael Lawrence wrote:
>>>
>>> Factors and data.frames are not structures, because they must have a
>>> class attribute. Just call them "objects". They are higher level than
>>> structures, which in practice just shape data without adding a lot of
>>> semantics. Compare getClass("matrix") and getClass("factor").
>>>
>>> I agree that inheritance through explicit coercion is confusing. As
>>> far as I know, there are only 2 places where it is used:
>>> 1) Objects with attributes but no class, basically "structure" and its
>>> subclasses "array" <- "matrix"
>>> 2) Classes that extend a reference type ("environment", "name" and
>>> "externalptr") via hidden delegation (@.xData)
>>>
>>> I'm not sure if anyone should be doing #2. For #1, a simple "fix"
>>> would be just to drop inheritance of "structure" from "vector". I
>>> think the intent was to mimic base R behavior, where it will happily
>>> strip (or at least ignore) attributes when passing an array or matrix
>>> to an internal function that expects a vector.
>>>
>>> A related problem, which explains why factor and data.frame inherit
>>> from "vector" even though they are objects, is that any S4 object
>>> derived from those needs to be (for pragmatic compatibility reasons)
>>> an integer vector or list, respectively, internally (the virtual
>>> @.Data slot). Separating that from inheritance would probably be
>>> difficult.
>>>
>>> Yes, we can consider these to be problems, to some extent stemming
>>> from the behavior and design of R itself, but I'm not sure it's worth
>>> doing anything about them at this point.
>>
>>
>> Thanks for the informative discussion. It still doesn't explain
>> why 'm' gets its attributes stripped and 'x' does not though:
>>
>>    m <- matrix(1:12, ncol=3)
>>    x <- structure(1:3, titi="A")
>>
>>    setGeneric("foo", function(x) standardGeneric("foo"))
>>    setMethod("foo", "vector", identity)
>>
>>    foo(m)
>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>
>>    foo(x)
>>    # [1] 1 2 3
>>    # attr(,"titi")
>>    # [1] "A"
>>
>> If I understand correctly, both are "structures", not "objects".
>>
> 
> The structure 'x' has no class, so nothing special is going to happen.
> As you know, S4 has a well-defined class hierarchy. Just look at
> getClass("structure") to see its subclasses. There was at some point
> an attempt to create a sort of dynamic inheritance, where a 'test'
> function would be called and could figure this out. However, that was
> never implemented. For one thing, it would be even more confusing.
> 
>> Why aren't these problems worth fixing? More generally speaking
>> the erratic behavior of the S4 system with respect to S3 objects
>> has been a plague since the beginning of the methods package.
>> And many people have complained about this in many occasions in
>> one way or another. For the record, here are some of the most
>> notorious problems:
>>
>>    class(as.numeric(1:4))
>>    # [1] "numeric"
>>    class(as(1:4, "numeric"))
>>    # [1] "integer"
>>
> 
> This is not really a problem with the methods package. is.numeric(1L)
> is TRUE, thus integer extends numeric, so coercing an integer to
> numeric is a no-op.

Only as(1:4, "numeric", strict=FALSE) should be a no-op.
as(1:4, "numeric") should still coerce because as() is supposed
to perform strict coercion by default.

> as.numeric() should really be called as.double()
> or something. But that's not going to change, of course.

as.numeric() is doing the right thing (i.e. strict coercion) so there
is no need to touch it.

> 
>>    is.vector(matrix())
>>    # [1] FALSE
>>    is(matrix(), "vector")
>>    # [1] TRUE
>>
> 
> We already discussed this in the context of "structure" inheriting
> from "vector" and explicit coercion.
> 
>>    is.list(data.frame())
>>    # [1] TRUE
>>    is(data.frame(), "list")
>>    # [1] FALSE
>>    extends("data.frame", "list")
>>    # [1] TRUE
>>
> 
> This is a compromise for compatibility with inherits(), since the
> result of data.frame() is an S3 object.

So we should add to the list that inherits(data.frame(), "list") is
broken too. Once it gets fixed, is(data.frame(), "list") won't need
to compromise anymore and will be free to return the correct answer.

> 
>>
>>    is(data.frame(), "vector")
>>    # [1] FALSE
>>    is(data.frame(), "factor")
>>    # [1] FALSE
>>    is(data.frame(), "vector_OR_factor")
>>    # [1] TRUE
>>
> 
> The question is: which inheritance to follow, S3 or S4? Since "vector"
> is a basic class, inheritance follows S3 rules. But the class union is
> an S4 class, so it follows S4 rules.
> 
>>    etc...
>>
>> Many people stay away from S4 because of these incomprehensible
>> behaviors.
>>
>> Finally note that even pure S3 operations can produce output that
>> doesn't make sense:
>>
>>    is.list(data.frame())
>>    # [1] TRUE
>>    is.vector(list())
>>    # [1] TRUE
>>    is.vector(data.frame())
>>    # [1] FALSE
>>
>>    (that is: a data frame is a list and a list is a vector but
>>    a data frame is not a vector!)
>>
> 
> R has no notion of inheritance here. These are just different
> functions checking different things.

Yes, I see that R is does not care about inheritance here.
But is that it? Is that the end of the story? 3 different
functions checking 3 different things but isn't the last one
broken?

> Bringing this up again after so
> many discussions borders on trolling.

Hopefully these issues are not officially "closed".

As you know these issues are serious flaws. They've been biting me
and other Bioconductor developers (including you) over and over in
our development effort in S4Vectors and other Bioconductor packages
that heavily rely on the S4 system.

Unfortunately the discussions I've seen about these issues almost
always die under the weight of complex technical considerations
that are almost impossible to understand if one is not familiar
with the internals of the methods package. Very few of us are
(I'm not counting myself). The problem is that this complexity,
or some obscure early design decisions, seems to be used as an
excuse for not fixing these issues. So yes, I'm finding this
situation quite frustrating to be honest, and I'm only expressing
this frustration here. Note that this is not the same as trolling.
Forgive me if it sounded like that.

H.

> 
>> Why aren't these problems taken more seriously?
>>
> 
> They are taken seriously. But there are serious semantic differences
> between S3, S4 and base type checking functions. The S3/S4 integration
> should be viewed as a tool that is useful in practice, despite forced
> compromises.
> 
> There are changes that would resolve some of these issues, like those
> suggested earlier in this thread, but it's likely too disruptive to
> make them now. Energy is better spent thinking about how we will do it
> "right" the next time around.
> 
>> Thanks,
>> H.
>>
>>>
>>> Michael
>>>
>>> On Wed, May 16, 2018 at 8:33 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>>
>>>> On 05/15/2018 09:13 PM, Michael Lawrence wrote:
>>>>>
>>>>>
>>>>> My understanding is that array (or any other structure) does not
>>>>> "simply" inherit from vector, because structures are not vectors in
>>>>> the strictest sense. Basically, once a vector gains attributes, it is
>>>>> a structure, not a vector. The methods package accommodates this by
>>>>> defining an "is" relationship between "structure" and "vector" via an
>>>>> "explicit coerce", such that any "structure" passed to a "vector"
>>>>> method is first passed to as.vector(), which strips attributes. This
>>>>> is very much by design.
>>>>
>>>>
>>>>
>>>> It seems that the problem is really with matrices and arrays, not
>>>> with "structures" in general:
>>>>
>>>>     f <- factor(c("z", "x", "z"), levels=letters)
>>>>     m <- matrix(1:12, ncol=3)
>>>>     df <- data.frame(f=f)
>>>>     x <- structure(1:3, titi="A")
>>>>
>>>> Only the matrix looses its attributes when passed to a "vector"
>>>> method:
>>>>
>>>>     setGeneric("foo", function(x) standardGeneric("foo"))
>>>>     setMethod("foo", "vector", identity)
>>>>
>>>>     foo(f)     # attributes are preserved
>>>>     # [1] z x z
>>>>     # Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z
>>>>
>>>>     foo(m)     # attributes are stripped
>>>>     # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>>
>>>>     foo(df)    # attributes are preserved
>>>>     #   f
>>>>     # 1 z
>>>>     # 2 x
>>>>     # 3 z
>>>>
>>>>     foo(x)     # attributes are preserved
>>>>     # [1] 1 2 3
>>>>     # attr(,"titi")
>>>>     # [1] "A"
>>>>
>>>> Also if structures are passed to as.vector() before being passed to
>>>> a "vector" method, shouldn't as.vector() and foo() be equivalent on
>>>> them? For 'f' and 'x' they're not:
>>>>
>>>>     as.vector(f)
>>>>     # [1] "z" "x" "z"
>>>>
>>>>     as.vector(x)
>>>>     # [1] 1 2 3
>>>>
>>>> Finally note that for factors and data frames the "vector" method gets
>>>> selected despite the fact that is( , "vector") is FALSE:
>>>>
>>>>     is(f, "vector")
>>>>     # [1] FALSE
>>>>
>>>>     is(m, "vector")
>>>>     # [1] TRUE
>>>>
>>>>     is(df, "vector")
>>>>     # [1] FALSE
>>>>
>>>>     is(x, "vector")
>>>>     # [1] TRUE
>>>>
>>>> Couldn't we recognize these problems as real, even if they are by
>>>> design? Hopefully we can all agree that:
>>>> - the dispatch mechanism should only dispatch, not alter objects;
>>>> - is() and selectMethod() should not contradict each other.
>>>>
>>>> Thanks,
>>>> H.
>>>>
>>>>>
>>>>> Michael
>>>>>
>>>>>
>>>>> On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org>
>>>>> wrote:
>>>>>>
>>>>>>
>>>>>> Hi,
>>>>>>
>>>>>> This was quite unexpected:
>>>>>>
>>>>>>      setGeneric("foo", function(x) standardGeneric("foo"))
>>>>>>
>>>>>>      setMethod("foo", "vector", identity)
>>>>>>
>>>>>>      foo(matrix(1:12, ncol=3))
>>>>>>      # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>>>>
>>>>>>      foo(array(1:24, 4:2))
>>>>>>      # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
>>>>>> 21
>>>>>> 22 23
>>>>>> 24
>>>>>>
>>>>>> If I define a method for array objects, things work as expected though:
>>>>>>
>>>>>>      setMethod("foo", "array", identity)
>>>>>>
>>>>>>      foo(matrix(1:12, ncol=3))
>>>>>>      #      [,1] [,2] [,3]
>>>>>>      # [1,]    1    5    9
>>>>>>      # [2,]    2    6   10
>>>>>>      # [3,]    3    7   11
>>>>>>      # [4,]    4    8   12
>>>>>>
>>>>>> So, luckily, I have a workaround.
>>>>>>
>>>>>> But shouldn't the dispatch mechanism stay away from the business of
>>>>>> altering objects before passed to it?
>>>>>>
>>>>>> Thanks,
>>>>>> H.
>>>>>>
>>>>>> --
>>>>>> Herv? Pag?s
>>>>>>
>>>>>> Program in Computational Biology
>>>>>> Division of Public Health Sciences
>>>>>> Fred Hutchinson Cancer Research Center
>>>>>> 1100 Fairview Ave. N, M1-B514
>>>>>> P.O. Box 19024
>>>>>> Seattle, WA 98109-1024
>>>>>>
>>>>>> E-mail: hpages at fredhutch.org
>>>>>> Phone:  (206) 667-5791
>>>>>> Fax:    (206) 667-1319
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>>
>>>>>>
>>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=gynT4YhbmVKZhnX4srXlCWZZRyVBMXG211CKgftdEs0&s=_I0aFHQVnXdBfB5kTLg9TxK_2LHdSuaB6gqZwSx1orQ&e=
>>>>>>
>>>>
>>>> --
>>>> Herv? Pag?s
>>>>
>>>> Program in Computational Biology
>>>> Division of Public Health Sciences
>>>> Fred Hutchinson Cancer Research Center
>>>> 1100 Fairview Ave. N, M1-B514
>>>> P.O. Box 19024
>>>> Seattle, WA 98109-1024
>>>>
>>>> E-mail: hpages at fredhutch.org
>>>> Phone:  (206) 667-5791
>>>> Fax:    (206) 667-1319
>>
>>
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>>

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From p@ul @ending from @t@t@@uckl@nd@@c@nz  Thu May 17 01:09:43 2018
From: p@ul @ending from @t@t@@uckl@nd@@c@nz (Paul Murrell)
Date: Thu, 17 May 2018 11:09:43 +1200
Subject: [Rd] [FORGED]  bug in {graphics} identify()
In-Reply-To: <CAJSH4L7SA6LVSJUCd7Amsigh_Rk8CkQw35HCOGqqhDtZ16+KRg@mail.gmail.com>
References: <CAJSH4L7SA6LVSJUCd7Amsigh_Rk8CkQw35HCOGqqhDtZ16+KRg@mail.gmail.com>
Message-ID: <446c251b-fd1e-109d-b035-f2212c6a144e@stat.auckland.ac.nz>

Hi

Samuel Granjeaud spotted this recently too.
I have committed a change to r-devel 74732 that adds an 'order' argument 
to identify() so that you can get the order of the selections as part of 
the result (and updated the documentation).  For example ...

plot(1:10)

## Works as before
identify(1:10)

## Works as before
identify(1:10, pos=TRUE)

## New
identify(1:10, pos=TRUE, order=TRUE)

x <- identify(1:10, pos=TRUE, order=TRUE)
x$ind[x$order]

Paul

On 16/05/18 10:13, Richard Rowe wrote:
>   R3.4.x, R3.5.0, Windows7 64 bit code
> 
> {graphics} identify()
> is sorting results before returning the vector. As documented it should
> return the raw sequence in the order selected ...
> 
> "If |pos| is |FALSE|, an integer vector containing the indices of the
> identified points, in the order they were identified. "
> 
>   X<-rnorm(100)            # 100 random numbers
> dim(X)<-c(50,2)          #  making a 50 x 2 matrix to give 50 'fixes' for
> now
> 
> plot(X, asp=1)            # onto the screen
> boundary.points<-identify(X)  # proceed to identify boundary points, right
> click and end
> boundary.points
> # and results are sorted, not in the raw order obtained ...
> 
> I'm not on the bugzilla listing, I think my last core bug report was for
> chisq in 1998 ...
> 
> Richard
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From l@wrence@mich@el @ending from gene@com  Thu May 17 04:24:20 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Wed, 16 May 2018 19:24:20 -0700
Subject: [Rd] 
 Dispatch mechanism seems to alter object before calling method on it
In-Reply-To: <4c235908-9976-1930-a6ef-cdf3ba2fcafd@fredhutch.org>
References: <f4a42b94-f62d-29a1-723a-159aec52b580@fredhutch.org>
 <CAOQ5NyfxH=9D9u9gg5pAL-+u7MLPt9fc-+rk7wigTbPOrGCTsQ@mail.gmail.com>
 <c443e7f8-2ca3-602e-0abe-68874da5f724@fredhutch.org>
 <CAOQ5NyeM_niC+7o0r3B7iK8P5bFsyk9on9eJ_xFXEbt6u0mOYQ@mail.gmail.com>
 <035064de-539a-9295-18ab-d315134126da@fredhutch.org>
 <CAOQ5Nyfuv++2f_LPGXnWQRA_E01XDcP86d6yd1xAumnA3_BwGw@mail.gmail.com>
 <4c235908-9976-1930-a6ef-cdf3ba2fcafd@fredhutch.org>
Message-ID: <CAOQ5NydAZWY4XbfjQw19b_QW8AHPmv=LKAy9kbSPgUWb-Mif=g@mail.gmail.com>

On Wed, May 16, 2018 at 3:45 PM, Herv? Pag?s <hpages at fredhutch.org> wrote:
> On 05/16/2018 01:24 PM, Michael Lawrence wrote:
>>
>> On Wed, May 16, 2018 at 12:23 PM, Herv? Pag?s <hpages at fredhutch.org>
>> wrote:
>>>
>>> On 05/16/2018 10:22 AM, Michael Lawrence wrote:
>>>>
>>>>
>>>> Factors and data.frames are not structures, because they must have a
>>>> class attribute. Just call them "objects". They are higher level than
>>>> structures, which in practice just shape data without adding a lot of
>>>> semantics. Compare getClass("matrix") and getClass("factor").
>>>>
>>>> I agree that inheritance through explicit coercion is confusing. As
>>>> far as I know, there are only 2 places where it is used:
>>>> 1) Objects with attributes but no class, basically "structure" and its
>>>> subclasses "array" <- "matrix"
>>>> 2) Classes that extend a reference type ("environment", "name" and
>>>> "externalptr") via hidden delegation (@.xData)
>>>>
>>>> I'm not sure if anyone should be doing #2. For #1, a simple "fix"
>>>> would be just to drop inheritance of "structure" from "vector". I
>>>> think the intent was to mimic base R behavior, where it will happily
>>>> strip (or at least ignore) attributes when passing an array or matrix
>>>> to an internal function that expects a vector.
>>>>
>>>> A related problem, which explains why factor and data.frame inherit
>>>> from "vector" even though they are objects, is that any S4 object
>>>> derived from those needs to be (for pragmatic compatibility reasons)
>>>> an integer vector or list, respectively, internally (the virtual
>>>> @.Data slot). Separating that from inheritance would probably be
>>>> difficult.
>>>>
>>>> Yes, we can consider these to be problems, to some extent stemming
>>>> from the behavior and design of R itself, but I'm not sure it's worth
>>>> doing anything about them at this point.
>>>
>>>
>>>
>>> Thanks for the informative discussion. It still doesn't explain
>>> why 'm' gets its attributes stripped and 'x' does not though:
>>>
>>>    m <- matrix(1:12, ncol=3)
>>>    x <- structure(1:3, titi="A")
>>>
>>>    setGeneric("foo", function(x) standardGeneric("foo"))
>>>    setMethod("foo", "vector", identity)
>>>
>>>    foo(m)
>>>    # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>
>>>    foo(x)
>>>    # [1] 1 2 3
>>>    # attr(,"titi")
>>>    # [1] "A"
>>>
>>> If I understand correctly, both are "structures", not "objects".
>>>
>>
>> The structure 'x' has no class, so nothing special is going to happen.
>> As you know, S4 has a well-defined class hierarchy. Just look at
>> getClass("structure") to see its subclasses. There was at some point
>> an attempt to create a sort of dynamic inheritance, where a 'test'
>> function would be called and could figure this out. However, that was
>> never implemented. For one thing, it would be even more confusing.
>>
>>> Why aren't these problems worth fixing? More generally speaking
>>> the erratic behavior of the S4 system with respect to S3 objects
>>> has been a plague since the beginning of the methods package.
>>> And many people have complained about this in many occasions in
>>> one way or another. For the record, here are some of the most
>>> notorious problems:
>>>
>>>    class(as.numeric(1:4))
>>>    # [1] "numeric"
>>>    class(as(1:4, "numeric"))
>>>    # [1] "integer"
>>>
>>
>> This is not really a problem with the methods package. is.numeric(1L)
>> is TRUE, thus integer extends numeric, so coercing an integer to
>> numeric is a no-op.
>
>
> Only as(1:4, "numeric", strict=FALSE) should be a no-op.
> as(1:4, "numeric") should still coerce because as() is supposed
> to perform strict coercion by default.
>
>> as.numeric() should really be called as.double()
>> or something. But that's not going to change, of course.
>
>
> as.numeric() is doing the right thing (i.e. strict coercion) so there
> is no need to touch it.

Yes, sorry, you're right.

L342 of methods::as.R has a comment block explaining that this was
attempted in 2015 but it caused too many problems and so was reverted.

>
>>
>>>    is.vector(matrix())
>>>    # [1] FALSE
>>>    is(matrix(), "vector")
>>>    # [1] TRUE
>>>
>>
>> We already discussed this in the context of "structure" inheriting
>> from "vector" and explicit coercion.
>>
>>>    is.list(data.frame())
>>>    # [1] TRUE
>>>    is(data.frame(), "list")
>>>    # [1] FALSE
>>>    extends("data.frame", "list")
>>>    # [1] TRUE
>>>
>>
>> This is a compromise for compatibility with inherits(), since the
>> result of data.frame() is an S3 object.
>
>
> So we should add to the list that inherits(data.frame(), "list") is
> broken too. Once it gets fixed, is(data.frame(), "list") won't need
> to compromise anymore and will be free to return the correct answer.
>

But it's not broken according to S3 rules. Adding "list" to
class(data.frame()) would probably be very disruptive.

>>
>>>
>>>    is(data.frame(), "vector")
>>>    # [1] FALSE
>>>    is(data.frame(), "factor")
>>>    # [1] FALSE
>>>    is(data.frame(), "vector_OR_factor")
>>>    # [1] TRUE
>>>
>>
>> The question is: which inheritance to follow, S3 or S4? Since "vector"
>> is a basic class, inheritance follows S3 rules. But the class union is
>> an S4 class, so it follows S4 rules.
>>
>>>    etc...
>>>
>>> Many people stay away from S4 because of these incomprehensible
>>> behaviors.
>>>
>>> Finally note that even pure S3 operations can produce output that
>>> doesn't make sense:
>>>
>>>    is.list(data.frame())
>>>    # [1] TRUE
>>>    is.vector(list())
>>>    # [1] TRUE
>>>    is.vector(data.frame())
>>>    # [1] FALSE
>>>
>>>    (that is: a data frame is a list and a list is a vector but
>>>    a data frame is not a vector!)
>>>
>>
>> R has no notion of inheritance here. These are just different
>> functions checking different things.
>
>
> Yes, I see that R is does not care about inheritance here.
> But is that it? Is that the end of the story? 3 different
> functions checking 3 different things but isn't the last one
> broken?
>
>> Bringing this up again after so
>> many discussions borders on trolling.
>
>
> Hopefully these issues are not officially "closed".
>
> As you know these issues are serious flaws. They've been biting me
> and other Bioconductor developers (including you) over and over in
> our development effort in S4Vectors and other Bioconductor packages
> that heavily rely on the S4 system.
>
> Unfortunately the discussions I've seen about these issues almost
> always die under the weight of complex technical considerations
> that are almost impossible to understand if one is not familiar
> with the internals of the methods package. Very few of us are
> (I'm not counting myself). The problem is that this complexity,
> or some obscure early design decisions, seems to be used as an
> excuse for not fixing these issues. So yes, I'm finding this
> situation quite frustrating to be honest, and I'm only expressing
> this frustration here. Note that this is not the same as trolling.
> Forgive me if it sounded like that.

No worries. The problems here are mostly conceptual, because of the
incompatibility of the different type systems, or they are things that
could technically be fixed, but at an unacceptable loss of backwards
compatibility. It's helpful that you've identified these issues. We
could compile them somewhere so that others are not so easily bitten,
and so that future object systems avoid the same mistakes.

>
> H.
>
>
>>
>>> Why aren't these problems taken more seriously?
>>>
>>
>> They are taken seriously. But there are serious semantic differences
>> between S3, S4 and base type checking functions. The S3/S4 integration
>> should be viewed as a tool that is useful in practice, despite forced
>> compromises.
>>
>> There are changes that would resolve some of these issues, like those
>> suggested earlier in this thread, but it's likely too disruptive to
>> make them now. Energy is better spent thinking about how we will do it
>> "right" the next time around.
>>
>>> Thanks,
>>> H.
>>>
>>>>
>>>> Michael
>>>>
>>>> On Wed, May 16, 2018 at 8:33 AM, Herv? Pag?s <hpages at fredhutch.org>
>>>> wrote:
>>>>>
>>>>>
>>>>> On 05/15/2018 09:13 PM, Michael Lawrence wrote:
>>>>>>
>>>>>>
>>>>>>
>>>>>> My understanding is that array (or any other structure) does not
>>>>>> "simply" inherit from vector, because structures are not vectors in
>>>>>> the strictest sense. Basically, once a vector gains attributes, it is
>>>>>> a structure, not a vector. The methods package accommodates this by
>>>>>> defining an "is" relationship between "structure" and "vector" via an
>>>>>> "explicit coerce", such that any "structure" passed to a "vector"
>>>>>> method is first passed to as.vector(), which strips attributes. This
>>>>>> is very much by design.
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> It seems that the problem is really with matrices and arrays, not
>>>>> with "structures" in general:
>>>>>
>>>>>     f <- factor(c("z", "x", "z"), levels=letters)
>>>>>     m <- matrix(1:12, ncol=3)
>>>>>     df <- data.frame(f=f)
>>>>>     x <- structure(1:3, titi="A")
>>>>>
>>>>> Only the matrix looses its attributes when passed to a "vector"
>>>>> method:
>>>>>
>>>>>     setGeneric("foo", function(x) standardGeneric("foo"))
>>>>>     setMethod("foo", "vector", identity)
>>>>>
>>>>>     foo(f)     # attributes are preserved
>>>>>     # [1] z x z
>>>>>     # Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z
>>>>>
>>>>>     foo(m)     # attributes are stripped
>>>>>     # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>>>
>>>>>     foo(df)    # attributes are preserved
>>>>>     #   f
>>>>>     # 1 z
>>>>>     # 2 x
>>>>>     # 3 z
>>>>>
>>>>>     foo(x)     # attributes are preserved
>>>>>     # [1] 1 2 3
>>>>>     # attr(,"titi")
>>>>>     # [1] "A"
>>>>>
>>>>> Also if structures are passed to as.vector() before being passed to
>>>>> a "vector" method, shouldn't as.vector() and foo() be equivalent on
>>>>> them? For 'f' and 'x' they're not:
>>>>>
>>>>>     as.vector(f)
>>>>>     # [1] "z" "x" "z"
>>>>>
>>>>>     as.vector(x)
>>>>>     # [1] 1 2 3
>>>>>
>>>>> Finally note that for factors and data frames the "vector" method gets
>>>>> selected despite the fact that is( , "vector") is FALSE:
>>>>>
>>>>>     is(f, "vector")
>>>>>     # [1] FALSE
>>>>>
>>>>>     is(m, "vector")
>>>>>     # [1] TRUE
>>>>>
>>>>>     is(df, "vector")
>>>>>     # [1] FALSE
>>>>>
>>>>>     is(x, "vector")
>>>>>     # [1] TRUE
>>>>>
>>>>> Couldn't we recognize these problems as real, even if they are by
>>>>> design? Hopefully we can all agree that:
>>>>> - the dispatch mechanism should only dispatch, not alter objects;
>>>>> - is() and selectMethod() should not contradict each other.
>>>>>
>>>>> Thanks,
>>>>> H.
>>>>>
>>>>>>
>>>>>> Michael
>>>>>>
>>>>>>
>>>>>> On Tue, May 15, 2018 at 5:25 PM, Herv? Pag?s <hpages at fredhutch.org>
>>>>>> wrote:
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> Hi,
>>>>>>>
>>>>>>> This was quite unexpected:
>>>>>>>
>>>>>>>      setGeneric("foo", function(x) standardGeneric("foo"))
>>>>>>>
>>>>>>>      setMethod("foo", "vector", identity)
>>>>>>>
>>>>>>>      foo(matrix(1:12, ncol=3))
>>>>>>>      # [1]  1  2  3  4  5  6  7  8  9 10 11 12
>>>>>>>
>>>>>>>      foo(array(1:24, 4:2))
>>>>>>>      # [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19
>>>>>>> 20
>>>>>>> 21
>>>>>>> 22 23
>>>>>>> 24
>>>>>>>
>>>>>>> If I define a method for array objects, things work as expected
>>>>>>> though:
>>>>>>>
>>>>>>>      setMethod("foo", "array", identity)
>>>>>>>
>>>>>>>      foo(matrix(1:12, ncol=3))
>>>>>>>      #      [,1] [,2] [,3]
>>>>>>>      # [1,]    1    5    9
>>>>>>>      # [2,]    2    6   10
>>>>>>>      # [3,]    3    7   11
>>>>>>>      # [4,]    4    8   12
>>>>>>>
>>>>>>> So, luckily, I have a workaround.
>>>>>>>
>>>>>>> But shouldn't the dispatch mechanism stay away from the business of
>>>>>>> altering objects before passed to it?
>>>>>>>
>>>>>>> Thanks,
>>>>>>> H.
>>>>>>>
>>>>>>> --
>>>>>>> Herv? Pag?s
>>>>>>>
>>>>>>> Program in Computational Biology
>>>>>>> Division of Public Health Sciences
>>>>>>> Fred Hutchinson Cancer Research Center
>>>>>>> 1100 Fairview Ave. N, M1-B514
>>>>>>> P.O. Box 19024
>>>>>>> Seattle, WA 98109-1024
>>>>>>>
>>>>>>> E-mail: hpages at fredhutch.org
>>>>>>> Phone:  (206) 667-5791
>>>>>>> Fax:    (206) 667-1319
>>>>>>>
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=gynT4YhbmVKZhnX4srXlCWZZRyVBMXG211CKgftdEs0&s=_I0aFHQVnXdBfB5kTLg9TxK_2LHdSuaB6gqZwSx1orQ&e=
>>>>>>>
>>>>>
>>>>> --
>>>>> Herv? Pag?s
>>>>>
>>>>> Program in Computational Biology
>>>>> Division of Public Health Sciences
>>>>> Fred Hutchinson Cancer Research Center
>>>>> 1100 Fairview Ave. N, M1-B514
>>>>> P.O. Box 19024
>>>>> Seattle, WA 98109-1024
>>>>>
>>>>> E-mail: hpages at fredhutch.org
>>>>> Phone:  (206) 667-5791
>>>>> Fax:    (206) 667-1319
>>>
>>>
>>>
>>> --
>>> Herv? Pag?s
>>>
>>> Program in Computational Biology
>>> Division of Public Health Sciences
>>> Fred Hutchinson Cancer Research Center
>>> 1100 Fairview Ave. N, M1-B514
>>> P.O. Box 19024
>>> Seattle, WA 98109-1024
>>>
>>> E-mail: hpages at fredhutch.org
>>> Phone:  (206) 667-5791
>>> Fax:    (206) 667-1319
>>>
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>


From mnel@ @ending from doh@he@lth@n@w@gov@@u  Thu May 17 13:53:27 2018
From: mnel@ @ending from doh@he@lth@n@w@gov@@u (NELSON, Michael)
Date: Thu, 17 May 2018 11:53:27 +0000
Subject: [Rd] Patch for bug 17256 'possible bug in writeForeignSAS in the
 foreign library when string is NA'
Message-ID: <D10658826EC4E24A903AC423BC06BAF70247C3927A@DOHNSMXDB03.doh.health.nsw.gov.au>

Attached is a patch to fix https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=17256

'possible bug in writeForeignSAS in the foreign library when string is NA'



The patch
1. fixing the case where there were NA within a character column,   and the case where all values are strings of length 0
2. general replacement of calls to `sapply` with `vapply` (and replacing any(is.na()) with anyNA.



Happy to  add in bugzilla (but don't have an account there)

Regards

Michael Nelson

_______________________________________________________________________________________________________
Disclaimer: This message is intended for the addressee named and may contain confidential information.
If you are not the intended recipient, please delete it and notify the sender.
Views expressed in this message are those of the individual sender, and are not necessarily the views of the NSW Ministry of Health.
_______________________________________________________________________________________________________
This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
Emails and attachments are monitored to ensure compliance with the NSW Ministry of Health's Electronic Messaging Policy.
_______________________________________________________________________________________________________

From m@echler @ending from @t@t@m@th@ethz@ch  Thu May 17 15:34:15 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 17 May 2018 15:34:15 +0200
Subject: [Rd] 
 Patch for bug 17256 'possible bug in writeForeignSAS in the
 foreign library when string is NA'
In-Reply-To: <D10658826EC4E24A903AC423BC06BAF70247C3927A@DOHNSMXDB03.doh.health.nsw.gov.au>
References: <D10658826EC4E24A903AC423BC06BAF70247C3927A@DOHNSMXDB03.doh.health.nsw.gov.au>
Message-ID: <23293.34007.645572.435836@stat.math.ethz.ch>

>>>>> NELSON, Michael <mnels at doh.health.nsw.gov.au>
>>>>>     on Thu, 17 May 2018 11:53:27 +0000 writes:

    > Attached is a patch to fix
    > https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=17256
    > 'possible bug in writeForeignSAS in the foreign library
    > when string is NA'



    > The patch 1. fixing the case where there were NA within a
    > character column, and the case where all values are
    > strings of length 0 2. general replacement of calls to
    > `sapply` with `vapply` (and replacing any(is.na()) with
    > anyNA.



    > Happy to add in bugzilla (but don't have an account there)

The patch attachment did not make it through the (antispam /
antivirus /... ) filters:
Such attachments should have MIME type text/plain.

I have created a bugzilla account for you(r e-mail) and you
should've gotten an auto-email with info.

Thank you in advance for helping with this.

In this special case, we'd also be happy for other users testing the
problem and the fix, as access to SAS may have become difficult
for most R core members.

Martin Maechler
ETH Zurich


From m@echler @ending from @t@t@m@th@ethz@ch  Thu May 17 19:55:13 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 17 May 2018 19:55:13 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
Message-ID: <23293.49665.770796.423446@stat.math.ethz.ch>

>>>>> Roland Fu? 
>>>>>     on Wed, 16 May 2018 17:21:07 +0200 writes:

    > R 3.5.0 Is it intended that the Date method of as.POSIXct
    > does not respect the tz parameter? I suggest changing
    > as.POSIXct.Date

which is

     function (x, ...) .POSIXct(unclass(x) * 86400)

    > to this:

    function (x, tz = "", ...)
         .POSIXct(unclass(x) * 86400, tz = tz)

or rather just forward the '...', i.e., use

    function (x, ...) .POSIXct(unclass(x) * 86400, ...)

??

    > Currently, the best workaround seems to be using the
    > character method if one doesn't want the default timezone
    > (which is often an annoying DST timezone).

    > This came up on Stack Overflow:
    > https://stackoverflow.com/q/50373340/1412059

    > --
    > Roland

Thank you Roland for your notice (and the help on SO).

Best,
Martin


From mnel@ @ending from doh@he@lth@n@w@gov@@u  Fri May 18 00:55:50 2018
From: mnel@ @ending from doh@he@lth@n@w@gov@@u (NELSON, Michael)
Date: Thu, 17 May 2018 22:55:50 +0000
Subject: [Rd] 
 Patch for bug 17256 'possible bug in writeForeignSAS in the
 foreign library when string is NA'
In-Reply-To: <23293.34007.645572.435836@stat.math.ethz.ch>
References: <D10658826EC4E24A903AC423BC06BAF70247C3927A@DOHNSMXDB03.doh.health.nsw.gov.au>
 <23293.34007.645572.435836@stat.math.ethz.ch>
Message-ID: <D10658826EC4E24A903AC423BC06BAF70247C39466@DOHNSMXDB03.doh.health.nsw.gov.au>

Hi Martin,

Thanks - I will continue in Bugzilla.

Michael

-----Original Message-----
From: Martin Maechler [mailto:maechler at stat.math.ethz.ch] 
Sent: Thursday, 17 May 2018 11:34 PM
To: NELSON, Michael
Cc: r-devel at r-project.org
Subject: Re: [Rd] Patch for bug 17256 'possible bug in writeForeignSAS in the foreign library when string is NA'

>>>>> NELSON, Michael <mnels at doh.health.nsw.gov.au>
>>>>>     on Thu, 17 May 2018 11:53:27 +0000 writes:

    > Attached is a patch to fix
    > https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=17256
    > 'possible bug in writeForeignSAS in the foreign library
    > when string is NA'



    > The patch 1. fixing the case where there were NA within a
    > character column, and the case where all values are
    > strings of length 0 2. general replacement of calls to
    > `sapply` with `vapply` (and replacing any(is.na()) with
    > anyNA.



    > Happy to add in bugzilla (but don't have an account there)

The patch attachment did not make it through the (antispam / antivirus /... ) filters:
Such attachments should have MIME type text/plain.

I have created a bugzilla account for you(r e-mail) and you should've gotten an auto-email with info.

Thank you in advance for helping with this.

In this special case, we'd also be happy for other users testing the problem and the fix, as access to SAS may have become difficult for most R core members.

Martin Maechler
ETH Zurich
__________________________________________________________________________________________________________
This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
Emails and attachments are monitored to ensure compliance with the NSW Ministry of health's Electronic Messaging Policy.
__________________________________________________________________________________________________________
_______________________________________________________________________________________________________
Disclaimer: This message is intended for the addressee named and may contain confidential information.
If you are not the intended recipient, please delete it and notify the sender.
Views expressed in this message are those of the individual sender, and are not necessarily the views of the NSW Ministry of Health.
_______________________________________________________________________________________________________
This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
Emails and attachments are monitored to ensure compliance with the NSW Ministry of Health's Electronic Messaging Policy.


From rol@nd@fu@@ @ending from thuenen@de  Fri May 18 08:15:56 2018
From: rol@nd@fu@@ @ending from thuenen@de (=?UTF-8?Q?Roland_Fu=c3=9f?=)
Date: Fri, 18 May 2018 08:15:56 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <23293.49665.770796.423446@stat.math.ethz.ch>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
 <23293.49665.770796.423446@stat.math.ethz.ch>
Message-ID: <f2c2ea2b-e65f-b53a-5393-c8a503aada92@thuenen.de>


Am 17.05.2018 um 19:55 schrieb Martin Maechler:
>>>>>> Roland Fu?
>>>>>>     on Wed, 16 May 2018 17:21:07 +0200 writes:
>
>     > R 3.5.0 Is it intended that the Date method of as.POSIXct
>     > does not respect the tz parameter? I suggest changing
>     > as.POSIXct.Date
>
> which is
>
>      function (x, ...) .POSIXct(unclass(x) * 86400)
>
>     > to this:
>
>     function (x, tz = "", ...)
>          .POSIXct(unclass(x) * 86400, tz = tz)
>
> or rather just forward the '...', i.e., use
>
>     function (x, ...) .POSIXct(unclass(x) * 86400, ...)
>
> ??

Then .POSIXct should gain the ellipses as an argument if you don't want 
to break code that relies on as.POSIXct.Date accepting superfluous 
arguments.

Btw. I think it's a bit unfortunate that as.POSIXct and as.POSIXlt don't 
throw an error when passed an invalid timezone string. But that would be 
more difficult to change.

>
>     > Currently, the best workaround seems to be using the
>     > character method if one doesn't want the default timezone
>     > (which is often an annoying DST timezone).
>
>     > This came up on Stack Overflow:
>     > https://stackoverflow.com/q/50373340/1412059
>
>     > --
>     > Roland
>
> Thank you Roland for your notice (and the help on SO).

Thank you and the rest of R-core for maintaining and improving one of my 
work tools and my favorite programming language!

>
> Best,
> Martin
>

-- 
Roland


From mich@elchirico4 @ending from gm@il@com  Fri May 18 05:27:13 2018
From: mich@elchirico4 @ending from gm@il@com (Michael Chirico)
Date: Fri, 18 May 2018 11:27:13 +0800
Subject: [Rd] Error message truncation
Message-ID: <CAPRVBczudRHLYp6RUZy8Zdqc-+8DqRNrahD75MFMWQ9TfEtz1A@mail.gmail.com>

Help pages for stop/warning reference the option "warning.length", e.g.
from ?stop:

Errors will be truncated to getOption("warning.length") characters, default
> 1000.


Essentially the same is in ?warning.

Neither of these mention the hard-coded limits on the acceptable values of
this option in options.c
<https://github.com/wch/r-source/blob/a7356bf91b511287aacd3a992abfbcb75b60d93c/src/main/options.c#L546-L552>
:

if (streql(CHAR(namei), "warning.length")) {
  int k = asInteger(argi);
  if (k < 100 || k > 8170)
  error(_("invalid value for '%s'"), CHAR(namei));
  R_WarnLength = k;
  SET_VECTOR_ELT(value, i, SetOption(tag, argi));
}

Further, it appears there's a physical limit on the length of the error
message itself which is only slightly larger than 8170:

set.seed(1023)
NN = 10000L
str = paste(sample(letters, NN, TRUE), collapse = '')
# should of course be 10000
tryCatch(stop(str), error = function(e) nchar(e$message))
# [1] 8190

My questions are:


   - Can we add some information to the help pages indicating valid values
   of options('warning.length')?
   - Is there any way to increase the limit on error message length? I
   understand having such a limit is safer than potentially crashing a system
   that wants to print a massive error string.

This came up in relation to this SO Q&A:

https://stackoverflow.com/a/50387968/3576984

The user is submitting a database query; the error message will first
reproduce the entirety of the query and then give some diagnostic
information. Queries can get quite long, so it stands to reason that this
8190-length limit might be binding.

Thanks,
Michael Chirico

	[[alternative HTML version deleted]]


From renkun @ending from outlook@com  Sat May 19 10:17:37 2018
From: renkun @ending from outlook@com (Kun Ren)
Date: Sat, 19 May 2018 08:17:37 +0000
Subject: [Rd] Bug on qr.coef when qr is created by a zero matrix with
 colnames and all y equals zero
Message-ID: <CA42C690-92B8-4F46-AB4A-1A37A06C64CA@contoso.com>

Dear maintainers,

I'm reporting a bug in qr.coef that mishandles the colnames of matrix. A minimal reproducible example is as follows:

x <- cbind(rep(0, 10), rep(0, 10))
y <- rep(0, 10)
q <- qr.default(x)
qr.coef(q, y)
[1] NA NA

If x has colnames, then qr.coef will end up with an error:

x <- cbind(x1 = rep(0, 10), x2 = rep(0, 10))
y <- rep(0, 10)
q <- qr.default(x)
qr.coef(q, y)
Error in qr.coef(q, y) : object 'pivotted' not found

This happens only when x any y are all zeros. I found this problem when I implement a qr-based wls which stops when all weights are zero and the x matrix has colnames.

A brief debug on qr.coef shows that when `nam` is not NULL, no branch of code leads to creating `pivotted` before using it finally.?

Best,
Kun




From pd@lgd @ending from gm@il@com  Sat May 19 18:18:46 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Sat, 19 May 2018 18:18:46 +0200
Subject: [Rd] Bug in order function
In-Reply-To: <94542694-45f6-27a8-6aa3-9c6dea53ffc3@uni-saarland.de>
References: <94542694-45f6-27a8-6aa3-9c6dea53ffc3@uni-saarland.de>
Message-ID: <B84222CC-8289-4C41-BA4B-DD027522DEE1@gmail.com>

This caught my eye way late and only because of the Apple Mail random-scrollbag bug!

However it is still not fixed in 3.5.0 and as you say, it should be easy.

(Notice that you need to look at the last SO responses, the first 4 are useless...)

The cause of the trouble seems to be that if decreasing is a vector, you get as far as

if (method == "radix" || !is.na(na.last)) return(do.call("order", 
    c(z, na.last = na.last, decreasing = decreasing, method = method)))

and then the c() construct does you in, because of this effect

> c(list(1:10),decreasing=c(TRUE,FALSE))
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10

$decreasing1
[1] TRUE

$decreasing2
[1] FALSE

This should indeed be easily fixable by wrapping the vector or, maybe better, all arguments other than z in list(). Will fix (in R-devel for now as the urgency doesn't seem that great).

-pd


> On 14 Sep 2017, at 17:03 , Karl Nordstr?m <karl.nordstroem at uni-saarland.de> wrote:
> 
> Dear R-devel(opers),
> 
> I wanted to draw your attention to a small problem with the order function in base. According to the documentation, radix sort supports different orders for each argument. This breaks when one of the arguments is an object.
> 
> Please have a look to this stackoverflow question:
> 
> https://stackoverflow.com/questions/39737871/r-order-method-on-multiple-columns-gives-error-argument-lengths-differ
> 
> It describes the problem well and suggests a solution.
> 
> Although it is a niche case, it's a very easy thing to fix :)
> 
> Best regards,
> 
> Karl Nordstr?m
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@liber@ @ending from gm@il@com  Mon May 21 18:01:55 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 21 May 2018 18:01:55 +0200
Subject: [Rd] debugonce() functions are not considered as debugged
In-Reply-To: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
References: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
Message-ID: <63f24fd9-a224-7997-fb3a-ef8f87a24306@gmail.com>

debug(fun) marks "fun" for debugging, it makes sure that whenever "fun" 
is called, the debugger is entered
undebug(fun) removes this mark; it won't stop any current debugging of 
that function
isdebugged(fun) tells whether this mark is set or not; it does not tell 
whether "fun" is currently running in a debugger/browser

debugonce(func) adds a different mark to the function, one that makes 
sure the first time "fun" is called, the debugger is entered; this is 
the same as when entering that function via "s" while debugging its 
caller. There is no way to query or unset this mark.

Do you have a good use case when it would be useful to query/unset the 
mark for debugonce?

Best,
Tomas

On 04/28/2018 01:57 PM, G?bor Cs?rdi wrote:
> debugonce() sets a different flag (RSTEP), and this is not queried by
> isdebugged(), and it is also not unset by undebug().
>
> Is this expected? If yes, is there a way to query and unset the RSTEP flag
> from R code?
>
> ? f <- function() { }
> ? debugonce(f)
> ? isdebugged(f)
> [1] FALSE
>
> ? undebug(f)
> Warning message:
> In undebug(f) : argument is not being debugged
>
> ? f()
> debugging in: f()
> debug at #1: {
> }
> Browse[2]>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Tue May 22 15:13:05 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 22 May 2018 15:13:05 +0200
Subject: [Rd] R Bug: write.table for matrix of more than 2, 147, 483,
 648 elements
In-Reply-To: <c9b2730a-0575-25a5-3bad-cd6690108af8@gmail.com>
References: <20180418212319.34878428@hypatia.math.ethz.ch>
 <e523f994-7f4c-b94f-dcda-1a0b96c70d06@gmail.com>
 <ccd7638e-3105-cad1-1eb4-87120a47d0da@gmail.com>
 <0b1ada3d-fdf0-b975-d5c4-70fe353de7c9@insa-toulouse.fr>
 <c9b2730a-0575-25a5-3bad-cd6690108af8@gmail.com>
Message-ID: <a1abded9-08a4-1673-952f-4ad28e262099@gmail.com>

Fixed in R-devel 74754.
Tomas

On 04/19/2018 12:15 PM, Tomas Kalibera wrote:
> On 04/19/2018 11:47 AM, Serguei Sokol wrote:
>> Le 19/04/2018 ? 09:30, Tomas Kalibera a ?crit?:
>>> On 04/19/2018 02:06 AM, Duncan Murdoch wrote:
>>>> On 18/04/2018 5:08 PM, Tousey, Colton wrote:
>>>>> Hello,
>>>>>
>>>>> I want to report a bug in R that is limiting my capabilities to 
>>>>> export a matrix with write.csv or write.table with over 
>>>>> 2,147,483,648 elements (C's int limit). I found this bug already 
>>>>> reported about before: 
>>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17182. 
>>>>> However, there appears to be no solution or fixes in upcoming R 
>>>>> version releases.
>>>>>
>>>>> The error message is coming from the writetable part of the utils 
>>>>> package in the io.c source 
>>>>> code(https://svn.r-project.org/R/trunk/src/library/utils/src/io.c):
>>>>> /* quick integrity check */
>>>>> ???????????????? if(XLENGTH(x) != (R_len_t)nr * nc)
>>>>> ???????????????????? error(_("corrupt matrix -- dims not not match 
>>>>> length"));
>>>>>
>>>>> The issue is that nr*nc is an integer and the size of my matrix, 
>>>>> 2.8 billion elements, exceeds C's limit, so the check forces the 
>>>>> code to fail.
>>>>
>>>> Yes, looks like a typo:? R_len_t is an int, and that's how nr was 
>>>> declared.? It should be R_xlen_t, which is bigger on machines that 
>>>> support big vectors.
>>>>
>>>> I haven't tested the change; there may be something else in that 
>>>> function that assumes short vectors.
>>> Indeed, I think the function won't work for long vectors because of 
>>> EncodeElement2 and EncodeElement0. EncodeElement2/0 would have to be 
>>> changed, including their signatures
>>
>> That would be a definite fix but before such deep rewriting is 
>> undertaken may the following small fix (in addition to "(R_xlen_t)nr 
>> * nc") will be sufficient for cases where nr and nc are in int range 
>> but their product can reach long vector limit:
>>
>> replace
>> ??? tmp = EncodeElement2(x, i + j*nr, quote_col[j], qmethod,
>> ??? ??? ??? ??? ??? &strBuf, sdec);
>> by
>> ??? tmp = EncodeElement2(VECTOR_ELT(x, (R_xlen_t)i + j*nr), 0, 
>> quote_col[j], qmethod,
>> ??? ??? ??? ??? ??? &strBuf, sdec);
>
> Unfortunately we can't do that, x is a matrix of an atomic vector 
> type. VECTOR_ELT is taking elements of a generic vector, so it cannot 
> be applied to "x". But even if we extracted a single element from "x" 
> (e.g. via a type-switch etc), we would not be able to pass it to 
> EncodeElement0 which expects a full atomic vector (that is, including 
> its header). Instead we would have to call functions like 
> EncodeInteger, EncodeReal0, etc on the individual elements. Which is 
> then the same as changing EncodeElement0 or implementing a new version 
> of it. This does not seem that hard to fix, just is not as trivial as 
> changing the cast..
>
> Tomas
>
>
>>
>> Serguei
>
>


From c@@rdi@g@bor @ending from gm@il@com  Tue May 22 18:07:56 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 22 May 2018 17:07:56 +0100
Subject: [Rd] debugonce() functions are not considered as debugged
In-Reply-To: <63f24fd9-a224-7997-fb3a-ef8f87a24306@gmail.com>
References: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
 <63f24fd9-a224-7997-fb3a-ef8f87a24306@gmail.com>
Message-ID: <CABtg=KkU6wEoDWCUK8RqRv=3Z+PW1aNsK1Px7goF_K429vtphA@mail.gmail.com>

On Mon, May 21, 2018 at 5:01 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:
[...]
> Do you have a good use case when it would be useful to query/unset the
> mark for debugonce?

Well, I suppose the same use cases when it is useful to query/unset the
other debug
mark.

To be more specific, in debug helpers for a tool that works with callbacks
from a central event loop, it is nice to be able to tell which callbacks are
"debugged" currently, either via `debug()` or  `debugonce()`.

Gabor

> Best,
> Tomas

> On 04/28/2018 01:57 PM, G?bor Cs?rdi wrote:
> > debugonce() sets a different flag (RSTEP), and this is not queried by
> > isdebugged(), and it is also not unset by undebug().
> >
> > Is this expected? If yes, is there a way to query and unset the RSTEP
flag
> > from R code?
> >
> > ? f <- function() { }
> > ? debugonce(f)
> > ? isdebugged(f)
> > [1] FALSE
> >
> > ? undebug(f)
> > Warning message:
> > In undebug(f) : argument is not being debugged
> >
> > ? f()
> > debugging in: f()
> > debug at #1: {
> > }
> > Browse[2]>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From @@ronjgoodm@n @ending from gm@il@com  Wed May 23 06:16:11 2018
From: @@ronjgoodm@n @ending from gm@il@com (Aaron Goodman)
Date: Tue, 22 May 2018 21:16:11 -0700
Subject: [Rd] patch for scan.c for long vector support
Message-ID: <CAJvXDNZ3zJQZ=bCfHchnEtTcLPQ430LxdEZeg8yGyZib4hEZRw@mail.gmail.com>

I noticed that scan.c does not yet support long vectors. It was causing a
problem in the rstan library (https://github.com/stan-dev/rstan/issues/530)

I was able to patch base R to add long vector support. See the following
gist.
https://gist.github.com/aaronjg/f39e5966687ca004dab5a10e7655c648

I could not make a bugzilla account, so I am sending the patch here.

	[[alternative HTML version deleted]]


From tom@@@k@liber@ @ending from gm@il@com  Wed May 23 12:03:10 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 23 May 2018 12:03:10 +0200
Subject: [Rd] debugonce() functions are not considered as debugged
In-Reply-To: <CABtg=KkU6wEoDWCUK8RqRv=3Z+PW1aNsK1Px7goF_K429vtphA@mail.gmail.com>
References: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
 <63f24fd9-a224-7997-fb3a-ef8f87a24306@gmail.com>
 <CABtg=KkU6wEoDWCUK8RqRv=3Z+PW1aNsK1Px7goF_K429vtphA@mail.gmail.com>
Message-ID: <155e361e-1d93-295a-560e-29a9aa52ac49@gmail.com>

On 05/22/2018 06:07 PM, G?bor Cs?rdi wrote:
> On Mon, May 21, 2018 at 5:01 PM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
> [...]
>> Do you have a good use case when it would be useful to query/unset the
>> mark for debugonce?
> Well, I suppose the same use cases when it is useful to query/unset the
> other debug
> mark.
I asked because the use cases for undebug/debugonce I can think of do 
not apply. undebug() is needed once you have run a function through a 
debugger few times and figured out there is no bug there but you want to 
run again debugging from somewhere else. It is like deleting a 
breakpoint in say gdb. undebugonce() would make no sense in this 
context, because it is done implicitly. undebugonce() would only make 
sense if you called debugonce() but then changed your mind before 
running that function, but, that does not seem like a common use case 
worth supporting.

Re isdebugged(), I think the current semantics is already problematic. 
The name of the function and its existence makes it tempting to believe 
it tells us whether a given function is being run in a debugger 
currently, but it is not what isdebugged() does, the debugger can be 
entered by other means, including via debugonce(). Moreover, writing 
code that depends on whether a function is being run in a debugger feels 
wrong (e.g. even extra messages or assertions), because that would take 
different code path and the person debugging would not have control over 
it. It is better to turn on some extra messages/assertions via other 
means. Still, isdebugged() is sometimes used in this context and it 
sometimes returns the correct value: if a function has been entered as a 
result of debug() called on that function, isdebugged() will be TRUE. 
isdebuggedonce() would be always wrong in this context when debugging, 
because the flag has been cleared, which would add further confusion. 
isdebuggedonce() could only again help the user to refresh their memory 
on whether they set the flag, but that does not seem to be a use case 
worth supporting.

> To be more specific, in debug helpers for a tool that works with callbacks
> from a central event loop, it is nice to be able to tell which callbacks are
> "debugged" currently, either via `debug()` or  `debugonce()`.

As I said I think it would be wrong to use such function in code, but in 
principle isdebugged() could be changed to detect whether a given 
function will be debugged due to debug() or debugonce() or is currently 
being run in a debugger for those or any other reason (e.g. via explicit 
call to browser(), using "s" in the debugger, etc). This would abstract 
away the difference between debug() and debugonce(). It would still 
involve confusion when the function is being run in a debugger, but not 
on the top of the call stack... Is this the behavior you had in mind for 
the "helpers"? And, if so, why? What would the "helpers" do specially 
when isdebugged(fun) returned TRUE, why is that an important use case?

Tomas

>
> Gabor
>
>> Best,
>> Tomas
>> On 04/28/2018 01:57 PM, G?bor Cs?rdi wrote:
>>> debugonce() sets a different flag (RSTEP), and this is not queried by
>>> isdebugged(), and it is also not unset by undebug().
>>>
>>> Is this expected? If yes, is there a way to query and unset the RSTEP
> flag
>>> from R code?
>>>
>>> ? f <- function() { }
>>> ? debugonce(f)
>>> ? isdebugged(f)
>>> [1] FALSE
>>>
>>> ? undebug(f)
>>> Warning message:
>>> In undebug(f) : argument is not being debugged
>>>
>>> ? f()
>>> debugging in: f()
>>> debug at #1: {
>>> }
>>> Browse[2]>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rdi@g@bor @ending from gm@il@com  Wed May 23 12:16:54 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 23 May 2018 11:16:54 +0100
Subject: [Rd] debugonce() functions are not considered as debugged
In-Reply-To: <155e361e-1d93-295a-560e-29a9aa52ac49@gmail.com>
References: <CABtg=K=Q2k8Qr7uk=XQ2Qa76NWUcG0PmDMseZ37E2RZm4=XqDQ@mail.gmail.com>
 <63f24fd9-a224-7997-fb3a-ef8f87a24306@gmail.com>
 <CABtg=KkU6wEoDWCUK8RqRv=3Z+PW1aNsK1Px7goF_K429vtphA@mail.gmail.com>
 <155e361e-1d93-295a-560e-29a9aa52ac49@gmail.com>
Message-ID: <CABtg=KmskX7Fd1vv8xxvGbpFpnj=-i3Ci01X1_7EB6-n8wQrKQ@mail.gmail.com>

On Wed, May 23, 2018 at 11:03 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:
[...]
> As I said I think it would be wrong to use such function in code, but in
> principle isdebugged() could be changed to detect whether a given
> function will be debugged due to debug() or debugonce() or is currently
> being run in a debugger for those or any other reason (e.g. via explicit
> call to browser(), using "s" in the debugger, etc). This would abstract
> away the difference between debug() and debugonce(). It would still
> involve confusion when the function is being run in a debugger, but not
> on the top of the call stack... Is this the behavior you had in mind for
> the "helpers"?

No, not really. What I have is an event loop that performs tasks. A task is

basically a function call. The tasks are scheduled by a scheduler, and it
is painful to debug them, because they are always called from the event
loop,
and the stack is uninformative.

The helper functions aim to help with this, as much as possible.
You can call them from a browser(). They are things like:
- list all tasks
- perform one tick of the event loop
- run the event loop until a task finishes, etc.

There is a helper to debug a task, i.e. to debug() or debugonce() the
function that performs the task. So I get a(nother) browser() when the task
starts.

Now in the list of tasks, it would be nice to see which ones are
flagged with debugging and which ones are not, unset the debug flag, etc.

Anyway, if you think this is not useful, it is not essential for me.
Maybe I can also just use debug(). I just did not understand why
this was not part of the API, and seemed like an omission. If it is
a deliberate choice, that's fine then.

Gabor

> And, if so, why? What would the "helpers" do specially
> when isdebugged(fun) returned TRUE, why is that an important use case?

> Tomas

> >
> > Gabor
> >
> >> Best,
> >> Tomas
> >> On 04/28/2018 01:57 PM, G?bor Cs?rdi wrote:
> >>> debugonce() sets a different flag (RSTEP), and this is not queried by
> >>> isdebugged(), and it is also not unset by undebug().
> >>>
> >>> Is this expected? If yes, is there a way to query and unset the RSTEP
> > flag
> >>> from R code?
> >>>
> >>> ? f <- function() { }
> >>> ? debugonce(f)
> >>> ? isdebugged(f)
> >>> [1] FALSE
> >>>
> >>> ? undebug(f)
> >>> Warning message:
> >>> In undebug(f) : argument is not being debugged
> >>>
> >>> ? f()
> >>> debugging in: f()
> >>> debug at #1: {
> >>> }
> >>> Browse[2]>
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel


From jori@mey@ @ending from gm@il@com  Thu May 24 15:39:27 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 24 May 2018 15:39:27 +0200
Subject: [Rd] Creating S3 methods for S4 classes (coming from
 r-package-devel)
Message-ID: <CAO1zAVZUQukdm1Dr-428wDZ-g-ySgsTByKv-XUZ8cJihi0+Oyw@mail.gmail.com>

 Dear all,

I asked this question on r-package-devel but Martin Maechler pointed out
this was more suited on R-devel. So here it goes:

per the manual, one should create and register both the S3 and a S4 method
if one needs a method for an S4 class for a function using S3 dispatching.
This is cumbersome, and not very optimal.

I was wondering if there's a better way to do this. Currently I recreate a
generic in my package and create a default method that sends all the other
classes to the S3 generic, eg:

setGeneric("predict")
setMethod("predict", "ANY", stats::predict)

I'm not sure if this hasn't any adverse consequences, as it is not the
recommended approach.

It would be great if these generics could be made available through stats4.
If this would be the prefered route, I volunteer to create the patch for
that.

Any thoughts?
Cheers
Joris

(Original mail on r-package-devel :
https://stat.ethz.ch/pipermail/r-package-devel/2018q2/002757.html )


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Thu May 24 17:44:40 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 24 May 2018 17:44:40 +0200
Subject: [Rd] Bug on qr.coef when qr is created by a zero matrix with
 colnames and all y equals zero
In-Reply-To: <CA42C690-92B8-4F46-AB4A-1A37A06C64CA@contoso.com>
References: <CA42C690-92B8-4F46-AB4A-1A37A06C64CA@contoso.com>
Message-ID: <23302.56808.849660.344554@stat.math.ethz.ch>

>>>>> Kun Ren 
>>>>>     on Sat, 19 May 2018 08:17:37 +0000 writes:

    > Dear maintainers,
    > I'm reporting a bug in qr.coef that mishandles the colnames of matrix. A minimal reproducible example is as follows:

    > x <- cbind(rep(0, 10), rep(0, 10))
    > y <- rep(0, 10)
    > q <- qr.default(x)
    > qr.coef(q, y)
    > [1] NA NA

    > If x has colnames, then qr.coef will end up with an error:

    > x <- cbind(x1 = rep(0, 10), x2 = rep(0, 10))
    > y <- rep(0, 10)
    > q <- qr.default(x)
    > qr.coef(q, y)
    > Error in qr.coef(q, y) : object 'pivotted' not found

    > This happens only when x any y are all zeros. I found this problem when I implement a qr-based wls which stops when all weights are zero and the x matrix has colnames.

    > A brief debug on qr.coef shows that when `nam` is not NULL, no branch of code leads to creating `pivotted` before using it finally.?

Dear Kun,

this is indeed a bug, and I will address it.

Thank you very much for the reprex (:= [repr]oducible [ex]ample)!

Best,
Martin Maechler


From l@wrence@mich@el @ending from gene@com  Thu May 24 18:20:10 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Thu, 24 May 2018 09:20:10 -0700
Subject: [Rd] Creating S3 methods for S4 classes (coming from
 r-package-devel)
In-Reply-To: <CAO1zAVZUQukdm1Dr-428wDZ-g-ySgsTByKv-XUZ8cJihi0+Oyw@mail.gmail.com>
References: <CAO1zAVZUQukdm1Dr-428wDZ-g-ySgsTByKv-XUZ8cJihi0+Oyw@mail.gmail.com>
Message-ID: <CAOQ5NydMkLr9NP-Q+BZUyA=1seT-_t5khnXbe7uh0e1qn+7xsQ@mail.gmail.com>

You only have to make an S4 method if there is already an S4 generic.
If there is just an S3 generic, then just define S3 methods on it. I
think we should stay away from defining S4 generics when there is no
good reason for them. Good reasons include multiple dispatch, or a
non-default signature. Neither of those apply in this case.

Michael

On Thu, May 24, 2018 at 6:39 AM, Joris Meys <jorismeys at gmail.com> wrote:
>  Dear all,
>
> I asked this question on r-package-devel but Martin Maechler pointed out
> this was more suited on R-devel. So here it goes:
>
> per the manual, one should create and register both the S3 and a S4 method
> if one needs a method for an S4 class for a function using S3 dispatching.
> This is cumbersome, and not very optimal.
>
> I was wondering if there's a better way to do this. Currently I recreate a
> generic in my package and create a default method that sends all the other
> classes to the S3 generic, eg:
>
> setGeneric("predict")
> setMethod("predict", "ANY", stats::predict)
>
> I'm not sure if this hasn't any adverse consequences, as it is not the
> recommended approach.
>
> It would be great if these generics could be made available through stats4.
> If this would be the prefered route, I volunteer to create the patch for
> that.
>
> Any thoughts?
> Cheers
> Joris
>
> (Original mail on r-package-devel :
> https://stat.ethz.ch/pipermail/r-package-devel/2018q2/002757.html )
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jori@mey@ @ending from gm@il@com  Thu May 24 19:47:06 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 24 May 2018 19:47:06 +0200
Subject: [Rd] Creating S3 methods for S4 classes (coming from
 r-package-devel)
In-Reply-To: <CAOQ5NydMkLr9NP-Q+BZUyA=1seT-_t5khnXbe7uh0e1qn+7xsQ@mail.gmail.com>
References: <CAO1zAVZUQukdm1Dr-428wDZ-g-ySgsTByKv-XUZ8cJihi0+Oyw@mail.gmail.com>
 <CAOQ5NydMkLr9NP-Q+BZUyA=1seT-_t5khnXbe7uh0e1qn+7xsQ@mail.gmail.com>
Message-ID: <CAO1zAVY8Bvwfwq80b7Pk5-2dnpdwGCtw7MXf9_izPgkEa_chKg@mail.gmail.com>

On Thu, May 24, 2018 at 6:20 PM, Michael Lawrence <lawrence.michael at gene.com
> wrote:

> You only have to make an S4 method if there is already an S4 generic.
> If there is just an S3 generic, then just define S3 methods on it.


I was refering to the recommendations in ?Methods_for_S3 (
https://stat.ethz.ch/R-manual/R-devel/library/methods/html/Methods_for_S3.html).
:

"Two possible mechanisms for implementing a method corresponding to an S4
class, there are two possibilities are to register it as an S3 method with
the S4 class name or to define and set an S4 method, which will have the
side effect of creating an S4 generic version of this function.

For most situations either works, but the recommended approach is to do
both:"

The reasoning is described there as well, and I have no reason to believe
that information is not up to date. I can get away with defining an S3
generic, but this stops being useful when using superclasses for reasons
mentioned in the documentation.

I
> think we should stay away from defining S4 generics when there is no
> good reason for them. Good reasons include multiple dispatch, or a
> non-default signature. Neither of those apply in this case.
>

I would personally prefer to use dispatching that's tailored to the type of
class I work with, as that seems more consistent. But I agree we should
avoid defining generics for the same function in different packages, hence
my proposal about stats4.


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From l@wrence@mich@el @ending from gene@com  Thu May 24 20:06:48 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Thu, 24 May 2018 11:06:48 -0700
Subject: [Rd] Creating S3 methods for S4 classes (coming from
 r-package-devel)
In-Reply-To: <CAO1zAVY8Bvwfwq80b7Pk5-2dnpdwGCtw7MXf9_izPgkEa_chKg@mail.gmail.com>
References: <CAO1zAVZUQukdm1Dr-428wDZ-g-ySgsTByKv-XUZ8cJihi0+Oyw@mail.gmail.com>
 <CAOQ5NydMkLr9NP-Q+BZUyA=1seT-_t5khnXbe7uh0e1qn+7xsQ@mail.gmail.com>
 <CAO1zAVY8Bvwfwq80b7Pk5-2dnpdwGCtw7MXf9_izPgkEa_chKg@mail.gmail.com>
Message-ID: <CAOQ5NydBhcgTQregbxA=Are7iEcAgeoYbP9VjfdBLu6c1YZZMg@mail.gmail.com>

On Thu, May 24, 2018 at 10:47 AM, Joris Meys <jorismeys at gmail.com> wrote:
>
>
> On Thu, May 24, 2018 at 6:20 PM, Michael Lawrence
> <lawrence.michael at gene.com> wrote:
>>
>> You only have to make an S4 method if there is already an S4 generic.
>> If there is just an S3 generic, then just define S3 methods on it.
>
>
> I was refering to the recommendations in ?Methods_for_S3
> (https://stat.ethz.ch/R-manual/R-devel/library/methods/html/Methods_for_S3.html).
> :
>
> "Two possible mechanisms for implementing a method corresponding to an S4
> class, there are two possibilities are to register it as an S3 method with
> the S4 class name or to define and set an S4 method, which will have the
> side effect of creating an S4 generic version of this function.
>
> For most situations either works, but the recommended approach is to do
> both:"
>
> The reasoning is described there as well, and I have no reason to believe
> that information is not up to date. I can get away with defining an S3
> generic, but this stops being useful when using superclasses for reasons
> mentioned in the documentation.
>

The reason for having an S4 method is that if there is an S4 generic,
an S4 method (potentially on a superclass) will take precedence. But
if there is no S4 generic, then there are no S4 methods.

It is possible for another package to create an S4 generic. In that
case it would be defensive to define another generic locally. If they
use the same implicit generic, then it should be merged with the local
generic, and things should work. But that is assuming a lot. It would
be preferable for no package to define an S4 generic for predict(),
since there is no reason for it, and it only complicates things.

>
>> I
>> think we should stay away from defining S4 generics when there is no
>> good reason for them. Good reasons include multiple dispatch, or a
>> non-default signature. Neither of those apply in this case.
>
>
> I would personally prefer to use dispatching that's tailored to the type of
> class I work with, as that seems more consistent. But I agree we should
> avoid defining generics for the same function in different packages, hence
> my proposal about stats4.
>

Single dispatch should be consistent between S3 and S4. I think we
should keep things simple and just have one generic, the one we
already have.

>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php


From d@tr7320 @ending from uni@@ydney@edu@@u  Fri May 25 09:00:08 2018
From: d@tr7320 @ending from uni@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 25 May 2018 07:00:08 +0000
Subject: [Rd] Illegible Long S4 Methods in Reference Manual Index
Message-ID: <SYAPR01MB2558CF477E441A878A0F5DF0CD950@SYAPR01MB2558.ausprd01.prod.outlook.com>

Good day,

If there are S4 methods documented in an R package of the form

functionName,aVariableType,anotherVariableType-method

and some of the variable types have lengthy names and are defined in other developers' packages, such as MultiAssayExperiment, the Index section of the reference manual forces such functions to be on one line. If the function specification is in the first column, it overlaps with another function specification in the second column, making both of them illegible. If it's in the second column, the end of the specification goes beyond the right side of the page. May R CMD Rd2pdf automatically wrap these for legibility?

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia


From tom@@@k@liber@ @ending from gm@il@com  Fri May 25 11:04:31 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Fri, 25 May 2018 11:04:31 +0200
Subject: [Rd] Rd parser throws error for user macros invoked with empty
 argument
In-Reply-To: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>
References: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>
Message-ID: <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>

Thanks for the report and the examples - and they do not have to be that 
verbose, it is enough to just define and use a command, e.g.

cat("\\newcommand{\\mac1}{MAC1:#1}\\mac1{}", file=f)
rd <- tools::parse_Rd(f)

Whenever you get an error message like "Value of SET_STRING_ELT() must 
be a 'CHARSXP' not a 'NULL'", there is a bug (at least the error message 
should be relevant/informative).

I am testing a patch that will allow empty arguments to macros (they 
will expand to an empty string, like in LaTeX).

Best
Tomas

On 05/14/2018 11:23 PM, Georgi Boshnakov wrote:
> Bug or feature?
>
> I get the following error from parse_Rd() when a user Rd macro (including system ones) is invoked with empty argument {},
> eg \mymacro{}:
>
> Error in tools::parse_Rd(fn) :
>    Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> A full example is further below with the system macro \CRANpkg{}. In this example it doesn't make sense to use empty argument but the error is not specific to this particular macro.
>
> ------
> Georgi Boshnakov
>
>
> Create an Rd file containing system macro \CRANpkg{bibtex}, parse_Rd() is ok:
>
> =================
> fn <- tempfile()
> writeLines("\\name{dummyfun}
> \\alias{dummyfun}
> \\title{Dummy title}
> \\description{Dummy description}
> \\usage{
> dummyfun(x, ...)
> }
> \\arguments{
>    \\item{x}{a value.}
>    \\item{\\dots}{further arguments.}
> }
> \\details{
>      \\CRANpkg{bibtex}
> }
> ", fn)
>
>> tools::parse_Rd(fn)
> ...
> \details{
>      \href{{https://CRAN.R-project.org/package=bibtex}{\pkg{bibtex}}}
> }
>
> ================
>
> With empty argument - \CRANpkg{} - Rd parser throws error. Of course it is silly in this example but I have used it with other user defined  macros where it may make sense to have empty argument.
>
> ================
>> writeLines("\\name{dummyfun}
> \\alias{dummyfun}
> \\title{Dummy title}
> \\description{Dummy description}
> \\usage{
> dummyfun(x, ...)
> }
> \\arguments{
>    \\item{x}{a value.}
>    \\item{\\dots}{further arguments.}
> }
> \\details{
>      \\CRANpkg{}
> }
> ", fn)
>> tools::parse_Rd(fn)
> Error in tools::parse_Rd(fn) :
>    Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Fri May 25 12:01:09 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 25 May 2018 10:01:09 +0000
Subject: [Rd] Rd parser throws error for user macros invoked with empty
 argument
In-Reply-To: <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>
References: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>
 <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F65AED0@MBXP01.ds.man.ac.uk>

Thanks for looking into this, empty string is the natural solution indeed.

Georgi


-----Original Message-----
From: Tomas Kalibera [mailto:tomas.kalibera at gmail.com] 
Sent: 25 May 2018 10:05
To: Georgi Boshnakov; r-devel at r-project.org
Subject: Re: [Rd] Rd parser throws error for user macros invoked with empty argument

Thanks for the report and the examples - and they do not have to be that 
verbose, it is enough to just define and use a command, e.g.

cat("\\newcommand{\\mac1}{MAC1:#1}\\mac1{}", file=f)
rd <- tools::parse_Rd(f)

Whenever you get an error message like "Value of SET_STRING_ELT() must 
be a 'CHARSXP' not a 'NULL'", there is a bug (at least the error message 
should be relevant/informative).

I am testing a patch that will allow empty arguments to macros (they 
will expand to an empty string, like in LaTeX).

Best
Tomas

On 05/14/2018 11:23 PM, Georgi Boshnakov wrote:
> Bug or feature?
>
> I get the following error from parse_Rd() when a user Rd macro (including system ones) is invoked with empty argument {},
> eg \mymacro{}:
>
> Error in tools::parse_Rd(fn) :
>    Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> A full example is further below with the system macro \CRANpkg{}. In this example it doesn't make sense to use empty argument but the error is not specific to this particular macro.
>
> ------
> Georgi Boshnakov
>
>
> Create an Rd file containing system macro \CRANpkg{bibtex}, parse_Rd() is ok:
>
> =================
> fn <- tempfile()
> writeLines("\\name{dummyfun}
> \\alias{dummyfun}
> \\title{Dummy title}
> \\description{Dummy description}
> \\usage{
> dummyfun(x, ...)
> }
> \\arguments{
>    \\item{x}{a value.}
>    \\item{\\dots}{further arguments.}
> }
> \\details{
>      \\CRANpkg{bibtex}
> }
> ", fn)
>
>> tools::parse_Rd(fn)
> ...
> \details{
>      \href{{https://CRAN.R-project.org/package=bibtex}{\pkg{bibtex}}}
> }
>
> ================
>
> With empty argument - \CRANpkg{} - Rd parser throws error. Of course it is silly in this example but I have used it with other user defined  macros where it may make sense to have empty argument.
>
> ================
>> writeLines("\\name{dummyfun}
> \\alias{dummyfun}
> \\title{Dummy title}
> \\description{Dummy description}
> \\usage{
> dummyfun(x, ...)
> }
> \\arguments{
>    \\item{x}{a value.}
>    \\item{\\dots}{further arguments.}
> }
> \\details{
>      \\CRANpkg{}
> }
> ", fn)
>> tools::parse_Rd(fn)
> Error in tools::parse_Rd(fn) :
>    Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



From tom@@@k@liber@ @ending from gm@il@com  Fri May 25 16:03:05 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Fri, 25 May 2018 16:03:05 +0200
Subject: [Rd] patch for scan.c for long vector support
In-Reply-To: <CAJvXDNZ3zJQZ=bCfHchnEtTcLPQ430LxdEZeg8yGyZib4hEZRw@mail.gmail.com>
References: <CAJvXDNZ3zJQZ=bCfHchnEtTcLPQ430LxdEZeg8yGyZib4hEZRw@mail.gmail.com>
Message-ID: <c38e54b3-ecec-7e7a-ecec-f34102c8c9eb@gmail.com>

Thanks for the report, fixed in R-devel 74782.
Please report back if the fix is not sufficient for your use case.

Tomas

On 05/23/2018 06:16 AM, Aaron Goodman wrote:
> I noticed that scan.c does not yet support long vectors. It was causing a
> problem in the rstan library (https://github.com/stan-dev/rstan/issues/530)
>
> I was able to patch base R to add long vector support. See the following
> gist.
> https://gist.github.com/aaronjg/f39e5966687ca004dab5a10e7655c648
>
> I could not make a bugzilla account, so I am sending the patch here.
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Fri May 25 16:45:54 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 25 May 2018 14:45:54 +0000
Subject: [Rd] Rd parser throws error for user macros invoked with empty
 argument
In-Reply-To: <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>
References: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>
 <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F65AF5A@MBXP01.ds.man.ac.uk>

While on the topic of Rd macro arguments, it seems that  if a multiline argument is supplied, the lines after the first are silently ignored:

f <- tempfile()
mac6 <- "\\newcommand{\\mac6}{mac6: #1}"

cat(mac6, "\\mac6{2*3
2+2
sin(pi)
}\n", file = f)
rd <- tools::parse_Rd(f)

> rd
 mac6: 2*3

---

Georgi Boshnakov


-----Original Message-----
From: Tomas Kalibera [mailto:tomas.kalibera at gmail.com] 
Sent: 25 May 2018 10:05
To: Georgi Boshnakov; r-devel at r-project.org
Subject: Re: [Rd] Rd parser throws error for user macros invoked with empty argument

Thanks for the report and the examples - and they do not have to be that 
verbose, it is enough to just define and use a command, e.g.

cat("\\newcommand{\\mac1}{MAC1:#1}\\mac1{}", file=f)
rd <- tools::parse_Rd(f)

Whenever you get an error message like "Value of SET_STRING_ELT() must 
be a 'CHARSXP' not a 'NULL'", there is a bug (at least the error message 
should be relevant/informative).

I am testing a patch that will allow empty arguments to macros (they 
will expand to an empty string, like in LaTeX).

Best
Tomas

On 05/14/2018 11:23 PM, Georgi Boshnakov wrote:
> Bug or feature?
>
> I get the following error from parse_Rd() when a user Rd macro (including system ones) is invoked with empty argument {},
> eg \mymacro{}:
>
> Error in tools::parse_Rd(fn) :
>    Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> A full example is further below with the system macro \CRANpkg{}. In this example it doesn't make sense to use empty argument but the error is not specific to this particular macro.
>
> ------
> Georgi Boshnakov
>
>
> Create an Rd file containing system macro \CRANpkg{bibtex}, parse_Rd() is ok:
>
> =================
> fn <- tempfile()
> writeLines("\\name{dummyfun}
> \\alias{dummyfun}
> \\title{Dummy title}
> \\description{Dummy description}
> \\usage{
> dummyfun(x, ...)
> }
> \\arguments{
>    \\item{x}{a value.}
>    \\item{\\dots}{further arguments.}
> }
> \\details{
>      \\CRANpkg{bibtex}
> }
> ", fn)
>
>> tools::parse_Rd(fn)
> ...
> \details{
>      \href{{https://CRAN.R-project.org/package=bibtex}{\pkg{bibtex}}}
> }
>
> ================
>
> With empty argument - \CRANpkg{} - Rd parser throws error. Of course it is silly in this example but I have used it with other user defined  macros where it may make sense to have empty argument.
>
> ================
>> writeLines("\\name{dummyfun}
> \\alias{dummyfun}
> \\title{Dummy title}
> \\description{Dummy description}
> \\usage{
> dummyfun(x, ...)
> }
> \\arguments{
>    \\item{x}{a value.}
>    \\item{\\dots}{further arguments.}
> }
> \\details{
>      \\CRANpkg{}
> }
> ", fn)
>> tools::parse_Rd(fn)
> Error in tools::parse_Rd(fn) :
>    Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



From r@lf@@tubner @ending from d@q@n@@com  Fri May 25 19:18:58 2018
From: r@lf@@tubner @ending from d@q@n@@com (Ralf Stubner)
Date: Fri, 25 May 2018 19:18:58 +0200
Subject: [Rd] readLines function with R >= 3.5.0
Message-ID: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>

Dear all,

I would like to draw you attention to this question on SO:
https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r

Based on the OP's code I used the script

#######################################
create_matrix <- function() {
  cat("Write the numbers of vertices: ")
  user_input <- readLines("stdin", n=1)
  user_input <- as.numeric(user_input)
  print(user_input)
  }
create_matrix()
#######################################

and called it with "R -f ..." from the command line.

With 'R version 3.4.4 (2018-03-15) -- "Someone to Lean On"' the script
prints the inputed number as expected. With both 'R version 3.5.0
(2018-04-23) -- "Joy in Playing"' and 'R Under development (unstable)
(2018-05-19 r74746) -- "Unsuffered Consequences"' the script does not
continue after inputing a number.

All these tests where done using docker images from the rocker project,
i.e. effectively using Debian Linux.

Is this an error in the script or in R?

Thanks
Ralf

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966 P
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze


From @@ronjgoodm@n @ending from gm@il@com  Sat May 26 05:15:42 2018
From: @@ronjgoodm@n @ending from gm@il@com (Aaron Goodman)
Date: Fri, 25 May 2018 20:15:42 -0700
Subject: [Rd] Buffering in R 3.5 connections causes incorrect data in
 readChar
Message-ID: <CAJvXDNbV+oH_SQPOBP=4S_NiuFZ=0E6ZyzTNKEALz5t7VxfTJA@mail.gmail.com>

I noticed an issue where readChar does not return the correct value after a
call to readline. It appears that readChar is not aware of the buffering,
so it reads from the end of the buffer, rather than the current position in
the file. This is a significant change of behavior from R-3.4.4.

Below is a test case that I used to home in on the problem.

---

p<-"test2.txt"
cat("abcdefg
hijklmn
opqrstu",file=p)

cat("read char after readline (h)\n")
con <- file(p,"r")
invisible(readLines(con,1))
print(readChar(con,1))
close(con)

cat("read char after readline and seek (h)\n")
con <- file(p,"r")
invisible(readLines(con,1))
invisible(seek(con,seek(con)))
print(readChar(con,1))
close(con)

cat("read lines after readline (hijklmn)\n")
con <- file(p,"r")
invisible(readLines(con,1) )
print(readLines(con,1))
close(con)


cat("read line after char (bcdefg):\n")
con <- file(p,"r")
invisible(readChar(con,1) )
print(readLines(con,1))
close(con)

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Mon May 28 10:28:01 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 28 May 2018 10:28:01 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
Message-ID: <23307.48529.773039.904392@stat.math.ethz.ch>

>>>>> Ralf Stubner 
>>>>>     on Fri, 25 May 2018 19:18:58 +0200 writes:

    > Dear all, I would like to draw you attention to this
    > question on SO:
    > https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r


    > Based on the OP's code I used the script

    > #######################################
    > create_matrix <- function() {
    > cat("Write the numbers of vertices: ")
    > user_input <- readLines("stdin", n=1)
    > user_input <- as.numeric(user_input)
    > print(user_input)
    > }
    > create_matrix()
    > #######################################

    > and called it with "R -f <filename>" from the command line.

    > With 'R version 3.4.4 (2018-03-15) -- "Someone to Lean On"' the script
    > prints the inputed number as expected. With both 'R version 3.5.0
    > (2018-04-23) -- "Joy in Playing"' and 'R Under development (unstable)
    > (2018-05-19 r74746) -- "Unsuffered Consequences"' the script does not
    > continue after inputing a number.

I can confirm.
It "works" if you additionally (the [Enter], i.e., EOL) you also
"send" an EOF -- in Unix alikes via  <Ctrl>-D

The same happens if you use  'Rscript <filename>'

I'm not the expert here, but am close to sure that we (R core)
did not intend this change, when fixing other somewhat subtle
bugs in Rscript / 'R -f'

Martin Maechler


    > All these tests where done using docker images from the rocker project,
    > i.e. effectively using Debian Linux.

    > Is this an error in the script or in R?

    > Thanks
    > Ralf

    > -- 
    > Ralf Stubner
    > Senior Software Engineer / Trainer

    > daqana GmbH
    > Dortustra?e 48
    > 14467 Potsdam

    > T: +49 331 23 61 93 11
    > F: +49 331 23 61 93 90
    > M: +49 162 20 91 196
    > Mail: ralf.stubner at daqana.com

    > Sitz: Potsdam
    > Register: AG Potsdam HRB 27966 P
    > Ust.-IdNr.: DE300072622
    > Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@echler @ending from @t@t@m@th@ethz@ch  Mon May 28 10:41:15 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 28 May 2018 10:41:15 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <23307.48529.773039.904392@stat.math.ethz.ch>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
Message-ID: <23307.49323.908367.788461@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Mon, 28 May 2018 10:28:01 +0200 writes:

>>>>> Ralf Stubner 
>>>>>     on Fri, 25 May 2018 19:18:58 +0200 writes:

    >> Dear all, I would like to draw you attention to this
    >> question on SO:
    >> https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r


    >> Based on the OP's code I used the script

    >> #######################################
    >> create_matrix <- function() {
    >> cat("Write the numbers of vertices: ")
    >> user_input <- readLines("stdin", n=1)
    >> user_input <- as.numeric(user_input)
    >> print(user_input)
    >> }
    >> create_matrix()
    >> #######################################

    >> and called it with "R -f <filename>" from the command line.

    >> With 'R version 3.4.4 (2018-03-15) -- "Someone to Lean On"' the script
    >> prints the inputed number as expected. With both 'R version 3.5.0
    >> (2018-04-23) -- "Joy in Playing"' and 'R Under development (unstable)
    >> (2018-05-19 r74746) -- "Unsuffered Consequences"' the script does not
    >> continue after inputing a number.

    > I can confirm.
    > It "works" if you additionally (the [Enter], i.e., EOL) you also
    > "send" an EOF -- in Unix alikes via  <Ctrl>-D

    > The same happens if you use  'Rscript <filename>'

    > I'm not the expert here, but am close to sure that we (R core)
    > did not intend this change, when fixing other somewhat subtle
    > bugs in Rscript / 'R -f'

    > Martin Maechler

The same behavior in regular R , no need for a script etc.

> str(readLines("stdin", n=1))

then in addition to the input  you need to "give" an EOF (Ctrl D) in R >= 3.5.0

Interestingly, everything works fine if you use  stdin() instead
of "stdin" :

> rr <- readLines(stdin(), n=1)
foo
> rr
[1] "foo"
> 
----------

So, for now use  stdin()  which is much clearer than the string
"stdin" anyway

Martin Maechler


From c@@rdi@g@bor @ending from gm@il@com  Mon May 28 11:07:07 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 28 May 2018 10:07:07 +0100
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <23307.49323.908367.788461@stat.math.ethz.ch>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
Message-ID: <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>

stdin() is not the same as file("stdin"), see the note in ?stdin.

Gabor

On Mon, 28 May 2018, 10:41 Martin Maechler, <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Martin Maechler
> >>>>>     on Mon, 28 May 2018 10:28:01 +0200 writes:
>
> >>>>> Ralf Stubner
> >>>>>     on Fri, 25 May 2018 19:18:58 +0200 writes:
>
>     >> Dear all, I would like to draw you attention to this
>     >> question on SO:
>     >>
> https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r
>
>
>     >> Based on the OP's code I used the script
>
>     >> #######################################
>     >> create_matrix <- function() {
>     >> cat("Write the numbers of vertices: ")
>     >> user_input <- readLines("stdin", n=1)
>     >> user_input <- as.numeric(user_input)
>     >> print(user_input)
>     >> }
>     >> create_matrix()
>     >> #######################################
>
>     >> and called it with "R -f <filename>" from the command line.
>
>     >> With 'R version 3.4.4 (2018-03-15) -- "Someone to Lean On"' the
> script
>     >> prints the inputed number as expected. With both 'R version 3.5.0
>     >> (2018-04-23) -- "Joy in Playing"' and 'R Under development
> (unstable)
>     >> (2018-05-19 r74746) -- "Unsuffered Consequences"' the script does
> not
>     >> continue after inputing a number.
>
>     > I can confirm.
>     > It "works" if you additionally (the [Enter], i.e., EOL) you also
>     > "send" an EOF -- in Unix alikes via  <Ctrl>-D
>
>     > The same happens if you use  'Rscript <filename>'
>
>     > I'm not the expert here, but am close to sure that we (R core)
>     > did not intend this change, when fixing other somewhat subtle
>     > bugs in Rscript / 'R -f'
>
>     > Martin Maechler
>
> The same behavior in regular R , no need for a script etc.
>
> > str(readLines("stdin", n=1))
>
> then in addition to the input  you need to "give" an EOF (Ctrl D) in R >=
> 3.5.0
>
> Interestingly, everything works fine if you use  stdin() instead
> of "stdin" :
>
> > rr <- readLines(stdin(), n=1)
> foo
> > rr
> [1] "foo"
> >
> ----------
>
> So, for now use  stdin()  which is much clearer than the string
> "stdin" anyway
>
> Martin Maechler
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From r@lf@@tubner @ending from d@q@n@@com  Mon May 28 12:13:57 2018
From: r@lf@@tubner @ending from d@q@n@@com (Ralf Stubner)
Date: Mon, 28 May 2018 12:13:57 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
Message-ID: <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>

On 28.05.2018 11:07, G?bor Cs?rdi wrote:
> stdin() is not the same as file("stdin"), see the note in ?stdin.

In particular stdin() works in an interactive session but not when R -f
/ Rscript is used, since it does not wait for the user to input anything:

$ R -f readLines.R

R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)
[...]
> create_matrix <- function() {
+   cat("Write the numbers of vertices: ")
+   user_input <- readLines(stdin(), n=1)
+   user_input <- as.numeric(user_input)
+   print(user_input)
+   }
> create_matrix()
Write the numbers of vertices: numeric(0)
>

>>>>>>> Martin Maechler
>>>>>>>     on Mon, 28 May 2018 10:28:01 +0200 writes:
>>     > It "works" if you additionally (the [Enter], i.e., EOL) you also
>>     > "send" an EOF -- in Unix alikes via  <Ctrl>-D

From my point of view this is a reasonable workaround for now.

Thanks
Ralf

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966 P
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180528/945902d8/attachment.sig>

From m@echler @ending from @t@t@m@th@ethz@ch  Mon May 28 16:38:35 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 28 May 2018 16:38:35 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
Message-ID: <23308.5227.150150.598800@stat.math.ethz.ch>

>>>>> Ralf Stubner 
>>>>>     on Mon, 28 May 2018 12:13:57 +0200 writes:

    > On 28.05.2018 11:07, G?bor Cs?rdi wrote:
    >> stdin() is not the same as file("stdin"), see the note in ?stdin.

Of course it is not the same, otherwise using one for the other
had no effect, but you are right:
it is *NOT* a solution to the problem

    > In particular stdin() works in an interactive session but not when R -f
    > / Rscript is used, since it does not wait for the user to input anything:

    > $ R -f readLines.R

    > R version 3.5.0 (2018-04-23) -- "Joy in Playing"
    > Copyright (C) 2018 The R Foundation for Statistical Computing
    > Platform: x86_64-pc-linux-gnu (64-bit)
    > [...]
    >> create_matrix <- function() {
    > +   cat("Write the numbers of vertices: ")
    > +   user_input <- readLines(stdin(), n=1)
    > +   user_input <- as.numeric(user_input)
    > +   print(user_input)
    > +   }
    >> create_matrix()
    > Write the numbers of vertices: numeric(0)
    >> 

oh dear...  yes, that is true ..


    >>>>>>>> Martin Maechler
    >>>>>>>> on Mon, 28 May 2018 10:28:01 +0200 writes:
    >>> > It "works" if you additionally (the [Enter], i.e., EOL) you also
    >>> > "send" an EOF -- in Unix alikes via  <Ctrl>-D

    > From my point of view this is a reasonable workaround for now.

I'm glad to hear that.

Then, I now do think this needs to be dealt with as a bug
(but I'm not delving into fixing it!)

Martin


    > Thanks
    > Ralf

    > -- 
    > Ralf Stubner
    > Senior Software Engineer / Trainer

    > daqana GmbH
    > Dortustra?e 48
    > 14467 Potsdam

    > T: +49 331 23 61 93 11
    > F: +49 331 23 61 93 90
    > M: +49 162 20 91 196
    > Mail: ralf.stubner at daqana.com

    > Sitz: Potsdam
    > Register: AG Potsdam HRB 27966 P
    > Ust.-IdNr.: DE300072622
    > Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze

    > x[DELETED ATTACHMENT signature.asc, application/pgp-signature]
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From r@lf@@tubner @ending from d@q@n@@com  Tue May 29 11:21:28 2018
From: r@lf@@tubner @ending from d@q@n@@com (Ralf Stubner)
Date: Tue, 29 May 2018 11:21:28 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <23308.5227.150150.598800@stat.math.ethz.ch>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
 <23308.5227.150150.598800@stat.math.ethz.ch>
Message-ID: <1125ed0d-392c-3747-0235-917bef52a14f@daqana.com>

On 28.05.2018 16:38, Martin Maechler wrote:
> Then, I now do think this needs to be dealt with as a bug
> (but I'm not delving into fixing it!)

Ok. Can somebody with write privileges in bugzilla add the bug report? I
can also do this myself, if somebody with the required privileges can
create a user for me.

Greetings
Ralf

PS: I get an error message from https://bugs.r-project.org/bugzilla3/.

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966 P
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180529/b4819aa6/attachment.sig>

From tom@@@k@liber@ @ending from gm@il@com  Tue May 29 12:09:00 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 29 May 2018 12:09:00 +0200
Subject: [Rd] Buffering in R 3.5 connections causes incorrect data in
 readChar
In-Reply-To: <CAJvXDNbV+oH_SQPOBP=4S_NiuFZ=0E6ZyzTNKEALz5t7VxfTJA@mail.gmail.com>
References: <CAJvXDNbV+oH_SQPOBP=4S_NiuFZ=0E6ZyzTNKEALz5t7VxfTJA@mail.gmail.com>
Message-ID: <9d63bec8-b5c0-1099-7d47-0b2dd1aeb352@gmail.com>

On 05/26/2018 05:15 AM, Aaron Goodman wrote:
> I noticed an issue where readChar does not return the correct value after a
> call to readline. It appears that readChar is not aware of the buffering,
> so it reads from the end of the buffer, rather than the current position in
> the file. This is a significant change of behavior from R-3.4.4.
>
> Below is a test case that I used to home in on the problem.
Thanks for the report and analysis, you are right, readChar ignores the 
buffer (and it also ignores the pushback). But please note that this 
behavior is in line with the documentation, see ?readChar: readChar must 
only be used with binary connections, but the example uses it on a text 
connection. Buffering and pushback are only used on (readable) text 
connections. I will check whether we could report a runtime error.

Best
Tomas

> ---
>
> p<-"test2.txt"
> cat("abcdefg
> hijklmn
> opqrstu",file=p)
>
> cat("read char after readline (h)\n")
> con <- file(p,"r")
> invisible(readLines(con,1))
> print(readChar(con,1))
> close(con)
>
> cat("read char after readline and seek (h)\n")
> con <- file(p,"r")
> invisible(readLines(con,1))
> invisible(seek(con,seek(con)))
> print(readChar(con,1))
> close(con)
>
> cat("read lines after readline (hijklmn)\n")
> con <- file(p,"r")
> invisible(readLines(con,1) )
> print(readLines(con,1))
> close(con)
>
>
> cat("read line after char (bcdefg):\n")
> con <- file(p,"r")
> invisible(readChar(con,1) )
> print(readLines(con,1))
> close(con)
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@echler @ending from @t@t@m@th@ethz@ch  Tue May 29 15:17:11 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 29 May 2018 15:17:11 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <1125ed0d-392c-3747-0235-917bef52a14f@daqana.com>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
 <23308.5227.150150.598800@stat.math.ethz.ch>
 <1125ed0d-392c-3747-0235-917bef52a14f@daqana.com>
Message-ID: <23309.21207.552280.896535@stat.math.ethz.ch>

>>>>> Ralf Stubner 
>>>>>     on Tue, 29 May 2018 11:21:28 +0200 writes:

    > On 28.05.2018 16:38, Martin Maechler wrote:
    >> Then, I now do think this needs to be dealt with as a bug
    >> (but I'm not delving into fixing it!)

    > Ok. Can somebody with write privileges in bugzilla add the
    > bug report? I can also do this myself, if somebody with
    > the required privileges can create a user for me.

    > Greetings Ralf

<< PS: I get an error message from   https://bugs.r-project.org/bugzilla3/.

Yes, it is currently "down", i.e., in a wrong state.
I had alerted the owner of the server a few hours ago, but as
that is in California, it may need another few hours
before one of the  R Core members can add an account for you on
R bugzilla.

Best, Martin Maechler

    > -- 
    > Ralf Stubner Senior Software Engineer / Trainer

    > daqana GmbH Dortustra?e 48 14467 Potsdam

    > T: +49 331 23 61 93 11 F: +49 331 23 61 93 90 M: +49 162
    > 20 91 196 Mail: ralf.stubner at daqana.com

    > Sitz: Potsdam Register: AG Potsdam HRB 27966 P Ust.-IdNr.:
    > DE300072622 Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze


From @imon@urb@nek @ending from R-project@org  Tue May 29 15:58:37 2018
From: @imon@urb@nek @ending from R-project@org (Simon Urbanek)
Date: Tue, 29 May 2018 09:58:37 -0400
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <23309.21207.552280.896535@stat.math.ethz.ch>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
 <23308.5227.150150.598800@stat.math.ethz.ch>
 <1125ed0d-392c-3747-0235-917bef52a14f@daqana.com>
 <23309.21207.552280.896535@stat.math.ethz.ch>
Message-ID: <3FD5CC2A-2480-48C0-9C9E-EDA70A48B2A3@R-project.org>

The MySQL DB on the server died - not sure why. Restarted and it should be ok.


> On May 29, 2018, at 9:17 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Ralf Stubner 
>>>>>>    on Tue, 29 May 2018 11:21:28 +0200 writes:
> 
>> On 28.05.2018 16:38, Martin Maechler wrote:
>>> Then, I now do think this needs to be dealt with as a bug
>>> (but I'm not delving into fixing it!)
> 
>> Ok. Can somebody with write privileges in bugzilla add the
>> bug report? I can also do this myself, if somebody with
>> the required privileges can create a user for me.
> 
>> Greetings Ralf
> 
> << PS: I get an error message from   https://urldefense.proofpoint.com/v2/url?u=https-3A__bugs.r-2Dproject.org_bugzilla3_&d=DwIDAw&c=LFYZ-o9_HUMeMTSQicvjIg&r=wCho7riGUuXpdLf26yPBz3JyaZUEU6lK6CD_m7-_CA8&m=_xu-PG0SXp13I6r_aA_W4Q0HuUKSUyN_7nwKZIVCqbs&s=L6IIRWOHJ6EkANE7wuzf8l4cEORIkFhwi-SE5i_iqII&e=.
> 
> Yes, it is currently "down", i.e., in a wrong state.
> I had alerted the owner of the server a few hours ago, but as
> that is in California, it may need another few hours
> before one of the  R Core members can add an account for you on
> R bugzilla.
> 
> Best, Martin Maechler
> 
>> -- 
>> Ralf Stubner Senior Software Engineer / Trainer
> 
>> daqana GmbH Dortustra?e 48 14467 Potsdam
> 
>> T: +49 331 23 61 93 11 F: +49 331 23 61 93 90 M: +49 162
>> 20 91 196 Mail: ralf.stubner at daqana.com
> 
>> Sitz: Potsdam Register: AG Potsdam HRB 27966 P Ust.-IdNr.:
>> DE300072622 Gesch?ftsf?hrer: Prof. Dr. Dr. Karl-Kuno Kunze
> 


From wilke @ending from @u@tin@utex@@@edu  Tue May 29 16:54:42 2018
From: wilke @ending from @u@tin@utex@@@edu (Wilke, Claus O)
Date: Tue, 29 May 2018 14:54:42 +0000
Subject: [Rd] Quartz graphic device can be extremely slow in some cases
Message-ID: <DF8215D9-3154-41C3-AA47-6FF9F468C7AD@austin.utexas.edu>

Hello,

We?re receiving reports of extremely slow rendering by users who are using the new geom_sf() feature in ggplot2. Importantly, this seems to be a graphics device issue, because the exact same plot takes vastly different amounts of time to render under different devices. We?re talking about 2 seconds vs. 100 seconds here, so not a small effect.

In particular, the quartz device on OS X seems to be particularly slow. It appears to be the case that geom_sf() (which draws complex polygons for maps) hits a code-path in quartz that hasn?t been well optimized for performance. Importantly, on the same machine where rendering a specific map with quartz takes 100 seconds, I can render the map to pdf *and* open the pdf in Preview in about 2 seconds, so there is no fundamental reason why it should take that long with quartz.

For discussion and reproducible examples, please see here:
https://github.com/tidyverse/ggplot2/issues/2655
https://community.rstudio.com/t/ggplot2-geom-sf-performance/3251

Best wishes,
Claus
--
Claus Wilke
Professor and Department Chair, Integrative Biology
The University of Texas at Austin
2500 Speedway, C0930
Austin, Texas 78712
512 232 2459


	[[alternative HTML version deleted]]


From @@ronjgoodm@n @ending from gm@il@com  Wed May 30 00:00:38 2018
From: @@ronjgoodm@n @ending from gm@il@com (Aaron Goodman)
Date: Tue, 29 May 2018 15:00:38 -0700
Subject: [Rd] Buffering in R 3.5 connections causes incorrect data in
 readChar
In-Reply-To: <9d63bec8-b5c0-1099-7d47-0b2dd1aeb352@gmail.com>
References: <CAJvXDNbV+oH_SQPOBP=4S_NiuFZ=0E6ZyzTNKEALz5t7VxfTJA@mail.gmail.com>
 <9d63bec8-b5c0-1099-7d47-0b2dd1aeb352@gmail.com>
Message-ID: <CAJvXDNaBtR9+1uLDyLwm1t5XeuHo6BT6EbJCWy9X486TMghHpg@mail.gmail.com>

Tomas,

Thank you for the explanation. I see in the documentation: "These functions
are intended to be used with binary-mode connections."  So I see how using
it on a text connection is undefined, and not a bug. An error or warning
when attempting to use a it on a text connection would be helpful
considering how the behavior has changed in R-3.5.

On Tue, May 29, 2018 at 3:09 AM, Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 05/26/2018 05:15 AM, Aaron Goodman wrote:
>
>> I noticed an issue where readChar does not return the correct value after
>> a
>> call to readline. It appears that readChar is not aware of the buffering,
>> so it reads from the end of the buffer, rather than the current position
>> in
>> the file. This is a significant change of behavior from R-3.4.4.
>>
>> Below is a test case that I used to home in on the problem.
>>
> Thanks for the report and analysis, you are right, readChar ignores the
> buffer (and it also ignores the pushback). But please note that this
> behavior is in line with the documentation, see ?readChar: readChar must
> only be used with binary connections, but the example uses it on a text
> connection. Buffering and pushback are only used on (readable) text
> connections. I will check whether we could report a runtime error.
>
> Best
> Tomas
>
> ---
>>
>> p<-"test2.txt"
>> cat("abcdefg
>> hijklmn
>> opqrstu",file=p)
>>
>> cat("read char after readline (h)\n")
>> con <- file(p,"r")
>> invisible(readLines(con,1))
>> print(readChar(con,1))
>> close(con)
>>
>> cat("read char after readline and seek (h)\n")
>> con <- file(p,"r")
>> invisible(readLines(con,1))
>> invisible(seek(con,seek(con)))
>> print(readChar(con,1))
>> close(con)
>>
>> cat("read lines after readline (hijklmn)\n")
>> con <- file(p,"r")
>> invisible(readLines(con,1) )
>> print(readLines(con,1))
>> close(con)
>>
>>
>> cat("read line after char (bcdefg):\n")
>> con <- file(p,"r")
>> invisible(readChar(con,1) )
>> print(readLines(con,1))
>> close(con)
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
>

	[[alternative HTML version deleted]]


From jtelleri@@rproject @ending from gm@il@com  Wed May 30 11:01:12 2018
From: jtelleri@@rproject @ending from gm@il@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 30 May 2018 11:01:12 +0200
Subject: [Rd] Quartz graphic device can be extremely slow in some cases
In-Reply-To: <DF8215D9-3154-41C3-AA47-6FF9F468C7AD@austin.utexas.edu>
References: <DF8215D9-3154-41C3-AA47-6FF9F468C7AD@austin.utexas.edu>
Message-ID: <CAJXDcw0RDzFz1Asp+BQ4QW7grc83fgpzKowQdfBEEPQG_ZQ40Q@mail.gmail.com>

It might be related with this files:

https://github.com/wch/r-source/blob/trunk/src/library/grDevices/src/devQuartz.c

https://github.com/wch/r-source/blob/trunk/src/include/R_ext/QuartzDevice.h

Could we port some of the UNIX optimizations to previous code?

https://github.com/wch/r-source/blob/trunk/src/library/grDevices/R/unix/quartz.R


From tom@@@k@liber@ @ending from gm@il@com  Wed May 30 15:38:56 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 30 May 2018 15:38:56 +0200
Subject: [Rd] Buffering in R 3.5 connections causes incorrect data in
 readChar
In-Reply-To: <CAJvXDNaBtR9+1uLDyLwm1t5XeuHo6BT6EbJCWy9X486TMghHpg@mail.gmail.com>
References: <CAJvXDNbV+oH_SQPOBP=4S_NiuFZ=0E6ZyzTNKEALz5t7VxfTJA@mail.gmail.com>
 <9d63bec8-b5c0-1099-7d47-0b2dd1aeb352@gmail.com>
 <CAJvXDNaBtR9+1uLDyLwm1t5XeuHo6BT6EbJCWy9X486TMghHpg@mail.gmail.com>
Message-ID: <03da0bcc-4ede-c8a5-633b-c955d0c3403f@gmail.com>

For now I have added a warning that is issued (only) when there is 
definitely a problem (currently a read buffer, a pushback buffer or 
encoding conversion of the input). And I have added a similar warning 
for writing when there is encoding conversion of the output (writeChar). 
But, as you say, the behavior is undefined and it remains so regardless 
of whether there is a warning or not: programs should only use these 
functions with binary connections.

Best
Tomas

On 05/30/2018 12:00 AM, Aaron Goodman wrote:
> Tomas,
>
> Thank you for the explanation. I see in the documentation: "These 
> functions are intended to be used with binary-mode connections."? So I 
> see how using it on a text connection is undefined, and not a bug. An 
> error or warning when attempting to use a it on a text connection 
> would be helpful considering how the behavior has changed in R-3.5.
>
> On Tue, May 29, 2018 at 3:09 AM, Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     On 05/26/2018 05:15 AM, Aaron Goodman wrote:
>
>         I noticed an issue where readChar does not return the correct
>         value after a
>         call to readline. It appears that readChar is not aware of the
>         buffering,
>         so it reads from the end of the buffer, rather than the
>         current position in
>         the file. This is a significant change of behavior from R-3.4.4.
>
>         Below is a test case that I used to home in on the problem.
>
>     Thanks for the report and analysis, you are right, readChar
>     ignores the buffer (and it also ignores the pushback). But please
>     note that this behavior is in line with the documentation, see
>     ?readChar: readChar must only be used with binary connections, but
>     the example uses it on a text connection. Buffering and pushback
>     are only used on (readable) text connections. I will check whether
>     we could report a runtime error.
>
>     Best
>     Tomas
>
>         ---
>
>         p<-"test2.txt"
>         cat("abcdefg
>         hijklmn
>         opqrstu",file=p)
>
>         cat("read char after readline (h)\n")
>         con <- file(p,"r")
>         invisible(readLines(con,1))
>         print(readChar(con,1))
>         close(con)
>
>         cat("read char after readline and seek (h)\n")
>         con <- file(p,"r")
>         invisible(readLines(con,1))
>         invisible(seek(con,seek(con)))
>         print(readChar(con,1))
>         close(con)
>
>         cat("read lines after readline (hijklmn)\n")
>         con <- file(p,"r")
>         invisible(readLines(con,1) )
>         print(readLines(con,1))
>         close(con)
>
>
>         cat("read line after char (bcdefg):\n")
>         con <- file(p,"r")
>         invisible(readChar(con,1) )
>         print(readLines(con,1))
>         close(con)
>
>         ? ? ? ? [[alternative HTML version deleted]]
>
>         ______________________________________________
>         R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>         https://stat.ethz.ch/mailman/listinfo/r-devel
>         <https://stat.ethz.ch/mailman/listinfo/r-devel>
>
>
>
>


	[[alternative HTML version deleted]]


From jori@mey@ @ending from gm@il@com  Wed May 30 17:33:51 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Wed, 30 May 2018 17:33:51 +0200
Subject: [Rd] CRAN checks give errors when no tests are included
Message-ID: <CAO1zAVY=TjPEUWwH6wyOxd+yyxqoecOyrd76AtSN3c3-m0f5sA@mail.gmail.com>

Dear all,

as a follow-up to the question asked on R-package-devel (see link below):

Someone sent a package to CRAN with a few problems. There's more things
wrong with the submission, but one thing that really caught my eye was the
following error:

Warning message:
running command '"C:/PROGRA~1/R/R-33~1.2/bin/x64/R" CMD BATCH --vanilla
"testthat.R" "testthat.Rout"' had status 1  ERROR Running the tests in
'tests/testthat.R' failed.
Last 13 lines of output:

  Type 'demo()' for some demos, 'help()' for on-line help, or
  'help.start()' for an HTML browser interface to help.
  Type 'q()' to quit R.

  > library(testthat)
  Warning message:
  package 'testthat' was built under R version 3.3.3
  > library(bwt)
  >
  > test_check("bwt")
  Error: No tests found for bwt
  Execution halted
* DONE

I checked the package and it had no tests subfolder. Yet -as far as I can
judge- CRAN tried to run tests anyway and error'd when there were none to
be found. This would make sense of adding tests was obligatory, but I can't
find that back in the CRAN policies. Is this a hiccup at CRAN's side or am
I missing something obvious?

Cheers
Joris

link to the original mail on r-package-devel :
https://stat.ethz.ch/pipermail/r-package-devel/2018q2/002782.html

-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From jori@mey@ @ending from gm@il@com  Wed May 30 18:09:43 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Wed, 30 May 2018 18:09:43 +0200
Subject: [Rd] CRAN checks give errors when no tests are included
In-Reply-To: <CAO1zAVY=TjPEUWwH6wyOxd+yyxqoecOyrd76AtSN3c3-m0f5sA@mail.gmail.com>
References: <CAO1zAVY=TjPEUWwH6wyOxd+yyxqoecOyrd76AtSN3c3-m0f5sA@mail.gmail.com>
Message-ID: <CAO1zAVZapbdC0JXhOAjnogfz9iQkO=kbtEwrSDmkjOMXtADdrQ@mail.gmail.com>

Never mind my previous mail. It was his local check, not CRAN. My apologies
for not paying enough attention.
Cheers
Joris

On Wed, May 30, 2018 at 5:33 PM, Joris Meys <jorismeys at gmail.com> wrote:

> Dear all,
>
> as a follow-up to the question asked on R-package-devel (see link below):
>
> Someone sent a package to CRAN with a few problems. There's more things
> wrong with the submission, but one thing that really caught my eye was the
> following error:
>
> Warning message:
> running command '"C:/PROGRA~1/R/R-33~1.2/bin/x64/R" CMD BATCH --vanilla
> "testthat.R" "testthat.Rout"' had status 1  ERROR Running the tests in
> 'tests/testthat.R' failed.
> Last 13 lines of output:
>
>   Type 'demo()' for some demos, 'help()' for on-line help, or
>   'help.start()' for an HTML browser interface to help.
>   Type 'q()' to quit R.
>
>   > library(testthat)
>   Warning message:
>   package 'testthat' was built under R version 3.3.3
>   > library(bwt)
>   >
>   > test_check("bwt")
>   Error: No tests found for bwt
>   Execution halted
> * DONE
>
> I checked the package and it had no tests subfolder. Yet -as far as I can
> judge- CRAN tried to run tests anyway and error'd when there were none to
> be found. This would make sense of adding tests was obligatory, but I can't
> find that back in the CRAN policies. Is this a hiccup at CRAN's side or am
> I missing something obvious?
>
> Cheers
> Joris
>
> link to the original mail on r-package-devel : https://stat.ethz.ch/
> pipermail/r-package-devel/2018q2/002782.html
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
>
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From luke-tier@ey m@ili@g off uiow@@edu  Thu May 31 17:24:23 2018
From: luke-tier@ey m@ili@g off uiow@@edu (luke-tier@ey m@ili@g off uiow@@edu)
Date: Thu, 31 May 2018 10:24:23 -0500 (CDT)
Subject: [Rd] 
 Result of 'seq' doesn't use compact internal representation
In-Reply-To: <74699be7-4877-a233-78eb-1c8f6d58b149@uiowa.edu>
References: <1945318618.2079052.1524971485565.ref@mail.yahoo.com>
 <1945318618.2079052.1524971485565@mail.yahoo.com>
 <9aaa8065-8fc4-ad16-1c56-e673dfd7e1c5@gmail.com>
 <74699be7-4877-a233-78eb-1c8f6d58b149@uiowa.edu>
Message-ID: <alpine.DEB.2.20.1805311023020.13736@luke-Latitude-7480>

This is now resolved in R-devel and R_patched.

Best,

luke

On Sun, 29 Apr 2018, Luke Tierney wrote:

> Thanks -- I'll commit a fix after some testing.
>
> Best,
>
> luke
>
> On 04/29/2018 06:22 AM, Duncan Murdoch wrote:
>> On 28/04/2018 11:11 PM, Suharto Anggono Suharto Anggono via R-devel wrote:
>>>> .Internal(inspect(1:10))
>>> @300e4e8 13 INTSXP g0c0 [NAM(3)]? 1 : 10 (compact)
>>>> .Internal(inspect(seq(1,10)))
>>> @3b6e1f8 13 INTSXP g0c4 [] (len=10, tl=0) 1,2,3,4,5,...
>>>> system.time(1:1e7)
>>> ??? user? system elapsed
>>> ?????? 0?????? 0?????? 0
>>>> system.time(seq(1,1e7))
>>> ??? user? system elapsed
>>> ??? 0.05??? 0.00??? 0.04
>>> 
>>> It seems that result of function 'seq' doesn't use compact internal 
>>> representation. However, looking at the code of function 'seq.default', 
>>> seq(1,n) produces 1:n. What is going on?
>> 
>> It looks like it is related to using compiled or interpreted code:
>>
>>  > library(gtools)
>>  > seq2 <- unByteCode(seq.default)
>>  > .Internal(inspect(seq.default(1,10)))
>> @7fa53847dcd8 13 INTSXP g0c4 [] (len=10, tl=0) 1,2,3,4,5,...
>>  > .Internal(inspect(seq2(1,10)))
>> @7fa537fa0bf0 13 INTSXP g0c0 [NAM(3)]? 1 : 10 (compact)
>> 
>> Duncan Murdoch
>> 
>>> 
>>>> h <- seq.default
>>>> environment(h) <- .GlobalEnv
>>>> library(compiler)
>>>> enableJIT(0)
>>> [1] 3
>>>> .Internal(inspect(h(1,10)))
>>> @375ade8 13 INTSXP g0c0 [NAM(3)]? 1 : 10 (compact)
>>> 
>>> A non-byte-compiled version of function 'seq.default' can produce object 
>>> that uses compact internal representation.
>>> 
>>> 
>>>> sessionInfo()
>>> R version 3.5.0 (2018-04-23)
>>> Platform: i386-w64-mingw32/i386 (32-bit)
>>> Running under: Windows XP (build 2600) Service Pack 3
>>> 
>>> Matrix products: default
>>> 
>>> locale:
>>> [1] LC_COLLATE=English_United States.1252
>>> [2] LC_CTYPE=English_United States.1252
>>> [3] LC_MONETARY=English_United States.1252
>>> [4] LC_NUMERIC=C
>>> [5] LC_TIME=English_United States.1252
>>> 
>>> attached base packages:
>>> [1] compiler? stats???? graphics? grDevices utils???? datasets? methods
>>> [8] base
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From j@@on@@ervi@@ @ending from ki@@e  Thu May 31 17:25:36 2018
From: j@@on@@ervi@@ @ending from ki@@e (Jason Serviss)
Date: Thu, 31 May 2018 15:25:36 +0000
Subject: [Rd] Understanding the sequence of events when calling the R dpois
 function
Message-ID: <655E5620-4258-4EF7-BD65-ECAB12A748AB@ki.se>

Hello all,

I am trying to get a better understanding of the underlying code for the stats::dpois function in R and, specifically, what happens under the hood when it is called. I finally managed to track down the C course at: https://github.com/wch/r-source/blob/trunk/src/nmath/dpois.c. It would seem that the dpois C function is taking a double for each of the x and lambda arguments so I am a bit confused why I can provide a vector and matrix to dpois in R, e.g.

dpois(1:5, matrix(runif(2*5, 1, 10), nrow = 5)))

and get a matrix back with the results. Due to this, I was expecting to see a loop, or similar, in the underlying C source but? to no avail. So I have to conclude that either a) there is a step between when I call dpois in R and the C code getting executed that loops over the inputs or b) that there is a construct in the C code (my proficiency here is limited) that is called per input. Any help in enlightening me on what code is responsible for iterating over the multiple inputs (or if someone is feeling energetic, the exact stepwise code that is executed when calling dpois) would be greatly appreciated!!

Kind Regards,
Jason Serviss


	[[alternative HTML version deleted]]


From ccberry @ending from uc@d@edu  Thu May 31 19:09:04 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Thu, 31 May 2018 17:09:04 +0000
Subject: [Rd] 
 Understanding the sequence of events when calling the R dpois
 function
In-Reply-To: <655E5620-4258-4EF7-BD65-ECAB12A748AB@ki.se>
References: <655E5620-4258-4EF7-BD65-ECAB12A748AB@ki.se>
Message-ID: <8474A4D9-4F38-4270-82DC-747B7C47BE3D@ucsd.edu>



> On May 31, 2018, at 8:25 AM, Jason Serviss <jason.serviss at ki.se> wrote:
> 
> Hello all,
> 
> I am trying to get a better understanding of the underlying code for the stats::dpois function in R and, specifically, what happens under the hood when it is called. I finally managed to track down the C course at: https://github.com/wch/r-source/blob/trunk/src/nmath/dpois.c. It would seem that the dpois C function is taking a double for each of the x and lambda arguments so I am a bit confused why I can provide a vector and matrix to dpois in R, e.g.
> 
> dpois(1:5, matrix(runif(2*5, 1, 10), nrow = 5)))
> 
> and get a matrix back with the results. Due to this, I was expecting to see a loop, or similar, in the underlying C source but? to no avail. So I have to conclude that either a) there is a step between when I call dpois in R and the C code getting executed that loops over the inputs or b) that there is a construct in the C code (my proficiency here is limited) that is called per input. Any help in enlightening me on what code is responsible for iterating over the multiple inputs (or if someone is feeling energetic, the exact stepwise code that is executed when calling dpois) would be greatly appreciated!!

Have a look at arithmetic.c. The math2 function handles calling dpois in a vectorized fashion.  

You need to trace how it is that the compiler knows to use dpois.c in constructing `C_dpois' which is what the R function dpois is calling.

If you know how to grep the sources for dpois, that will get you started. You will need to look over a bunch of #define's and a few C utilities to see how it all fits together. 

If you dig in and find the `do { ... } while(0)' construct confusing you might look at

https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for

HTH,

Chuck

From min@h@ll @ending from @cm@org  Thu May 31 20:08:49 2018
From: min@h@ll @ending from @cm@org (Greg Minshall)
Date: Thu, 31 May 2018 14:08:49 -0400
Subject: [Rd] 
 Understanding the sequence of events when calling the R dpois
 function
In-Reply-To: Your message of "Thu, 31 May 2018 15:25:36 -0000."
 <655E5620-4258-4EF7-BD65-ECAB12A748AB@ki.se>
Message-ID: <7993.1527790129@minshall-apollo.minshall.org>

Jason,

as Chuck Berry (to whom, *thanks* for 'do {...} while(0)'!) suggested,
using grep, or even grep executed from find, such as
----
find . -type f -exec grep -H "dpois" \{\} \; | less
----
(executed from the root of an R source tree), is your friend.

cheers, Greg


