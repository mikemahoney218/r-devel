From |kry|ov @end|ng |rom d|@root@org  Sat Feb  1 10:39:04 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 1 Feb 2025 12:39:04 +0300
Subject: [Rd] 
 [SPAM Warning!] Suggestion to emphasize Rboolean is unrelated
 to LGLSXP in R-exts
In-Reply-To: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
References: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
Message-ID: <20250201123904.6fc253be@Tarkus>

On Thu, 30 Jan 2025 13:07:31 -0800
Michael Chirico <michaelchirico4 at gmail.com> wrote:

> There are at least dozens of other cases on CRAN [2],[3].

Some of these involve casting an int to Rboolean. Best case, the int is
compared against NA_LOGICAL beforehand, avoiding any mistake (there's
at least one like that). Worst case, NA_LOGICAL is not considered before
the cast, so NA will now be interpreted as TRUE. This is hard to check
without actually reading the code.

Some packages compare an Rboolean expression against NA_LOGICAL [1].
This implies having stored an int in an Rboolean value as in the
previous paragraph. I think that it wasn't disallowed according to the
C standard to store NA_LOGICAL in an enumeration type wide enough to
fit it (and it evidently worked in practice). With typedef bool
Rboolean, storing NA_LOGICAL in an Rboolean converts it to 'true', so
the comparison will definitely fail:

DPQ src/pnchisq-it.c:530,532
Rmpfr src/convert.c:535
checkmate src/helper.c:102
chron src/unpaste.c:21
collapse src/data.table_rbindlist.c:208,258,383,384,408,431
data.table (many; fixed in Git)
ff src/ordermerge.c:5074 (one declaration, many comparisons)
networkDynamic src/Rinit.c:209 src/is.active.c:75,76,96-98
slam src/util.c:258
this.path src/get_file_from_closure.h:13,43 src/thispath.c:14,17,19,39
 src/ext.c:25 src/setsyspath.c:8 src/get_file_from_closure.h:13,43

Four packages cast int* pointers returned by LOGICAL() to Rboolean* or
use sizeof(Rboolean) to calculate buffer sizes in calls to memcpy()
with LOGICAL() buffers [2]. With typedef bool Rboolean, this is a
serious mistake, because the memory layout of the types is no longer
compatible:

bit64 src/integer64.c:576,603,914,929,942,955,968,981,994
collapse src/data.table_rbindlist.c:19,67,105
data.table (many; fixed in Git)
kit src/utils.c:390

I don't know Coccinelle that well and there may be additional cases I
failed to consider. At which point is it appropriate to start notifying
maintainers of the bugs not caught by their test suites?

-- 
Best regards,
Ivan

[1] Coccinelle script:
@@
typedef Rboolean;
Rboolean E;
@@
* E == NA_LOGICAL

[2] Coccinelle scripts:

@@
typedef Rboolean;
int* E;
@@
* (Rboolean*)E

This one will offer a diff to fix the bug:

@@
int *E1;
int *E2;
typedef Rboolean;
@@
(
 memcpy
|
 memmove
)
 (E1, E2,
 <+...
-sizeof(Rboolean)
+sizeof(int)
 ...+>
 )


From |kry|ov @end|ng |rom d|@root@org  Sun Feb  2 16:50:58 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sun, 2 Feb 2025 18:50:58 +0300
Subject: [Rd] Suggestion to emphasize Rboolean is unrelated to LGLSXP in
 R-exts
In-Reply-To: <20250201123904.6fc253be@Tarkus>
References: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
 <20250201123904.6fc253be@Tarkus>
Message-ID: <20250202185058.531317c2@Tarkus>

The good news is that without a C23-enabled compiler, the problem will
only happen to source files that #include <stdbool.h>. The bad news is
that such a source file will technically disagree with the rest of R
about the type of Rboolean, including the prototypes of the API
functions that accept Rboolean:

#include <stdbool.h>
#include <Rinternals.h>
typedef void (*pordervector1)(int *, int, SEXP, Rboolean, Rboolean);
// ...
pordervector1 f = R_orderVector1;
f(pindx, length(indx), arg, nalast, decreasing);

foo.c:27:17: runtime error: call to function R_orderVector1 through
pointer to incorrect function type 'void (*)(int *, int, struct SEXPREC
*, bool, bool)'
/tmp/R-devel/src/main/sort.c:1135: note: R_orderVector1 defined here
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior foo.c:27:17

With sanitizers disabled, this doesn't seem to cause any real problems
thanks to the calling convention, where both 'enum's and 'bool's are
passed and returned in a register.

-- 
Best regards,
Ivan


From r|p|eybd @end|ng |rom |c|oud@com  Mon Feb  3 11:07:13 2025
From: r|p|eybd @end|ng |rom |c|oud@com (Prof Brian Ripley)
Date: Mon, 3 Feb 2025 10:07:13 +0000
Subject: [Rd] Suggestion to emphasize Rboolean is unrelated to LGLSXP in
 R-exts
In-Reply-To: <20250202185058.531317c2@Tarkus>
References: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
 <20250201123904.6fc253be@Tarkus> <20250202185058.531317c2@Tarkus>
Message-ID: <551e7875-03a3-4a94-99e5-751ac9c496f4@icloud.com>

On 02/02/2025 15:50, Ivan Krylov via R-devel wrote:
> The good news is that without a C23-enabled compiler, the problem will
> only happen to source files that #include <stdbool.h>. The bad news is
> that such a source file will technically disagree with the rest of R
> about the type of Rboolean, including the prototypes of the API
> functions that accept Rboolean:
> 
> #include <stdbool.h>
> #include <Rinternals.h>
> typedef void (*pordervector1)(int *, int, SEXP, Rboolean, Rboolean);
> // ...
> pordervector1 f = R_orderVector1;
> f(pindx, length(indx), arg, nalast, decreasing);
> 
> foo.c:27:17: runtime error: call to function R_orderVector1 through
> pointer to incorrect function type 'void (*)(int *, int, struct SEXPREC
> *, bool, bool)'
> /tmp/R-devel/src/main/sort.c:1135: note: R_orderVector1 defined here
> SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior foo.c:27:17
> 
> With sanitizers disabled, this doesn't seem to cause any real problems
> thanks to the calling convention, where both 'enum's and 'bool's are
> passed and returned in a register.

This is work in progress, and it was not intended to apply to R-devel 
unless configured with --with-C23 or using a compiler (such as GCC 
pre-15) that defaults to C23.  We will back that out pending further 
testing.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From r|p|eybd @end|ng |rom |c|oud@com  Mon Feb  3 18:36:28 2025
From: r|p|eybd @end|ng |rom |c|oud@com (Prof Brian Ripley)
Date: Mon, 3 Feb 2025 17:36:28 +0000
Subject: [Rd] boolean and logical types -draft
Message-ID: <93d0bc7e-9ad2-4193-b43e-34c1544bb1a7@icloud.com>

Tomas,

I am thinking of writing something for R-devel, and hope to have your 
input first.

I get moderated on R-devel as I am now subscribed as 
brian.ripley at R-project.org which of course I cannot send from. So I am 
even more discouraged from posting there.  (R-core is bad enough with 
Luke discouraging all innovation except by him and Simon completely 
misunderstanding the C23 status.)

Thanks,

Brian

----------------

There are several of these, and few guarantees for inter-working.

a) R's logical vectors, which include a value NA for its elements.
b) R's Rboolean type in C/C++

c) C++'s bool type
d) C23's bool type
e) C99's _Bool type to which bool is aliased if <stdbool.h> is included.
f) Fortran's LOGICAL type

a) is currently implemented as a C int (so 32-bit) type with NA as the C 
value NA_LOGICAL which is the same a NA_INTEGER.

b) is currently implemented as a C enum with two values.  I don't know 
of any guarantees on how that is stored except in char or an integer 
type -- however it seems common practice to use a 32-bit type (int or 
unsigned int would not be distinguishable).  (C23 ?6.7.3.3)  Enums can 
have a specified data type, but we do not.

C23 states that bool has 1 value bit and some padding bits (?6.2.6.2) so 
it can be stored in char-sized storage (i.e. bytes) or multiples 
thereof.  And that _Bool is a alternative name for bool.

f) is complier-dependent: for interoperability with C or R, code should 
use c_bool from iso_c_binding (Fortran 2003).  Fortran compilers store 
LOGICAL in compiler-dependent ways, and for a long time we got away with 
assuming that was equivalent to int (so LOGICAL values could be passed 
to and from with int* on the C/R side).  But sometime around GCC 8 they 
changed to int_least32_t, which on common platforms is the same as int 
but does not need to be.

It seems that in all cases coercion to an integer type coerces false 
values to 0 and true values to 1 (and this is guaranteed by C23 at 
least).  And C23 guarantees that when coercing from an integer type to 
bool zero values are coerced to false and non-zero ones to true (bool is 
'an unsigned integer type').  However, that does not seem to be true for 
C++ as UB sanitizers warn on coercing values other than 0/1.

I believe it to be the intention that c), d) and e) have the same 
representation and interwork using the same compiler, but I could not 
find that documented and see signs that e) might differ in C17 and C23 
modes.

----------------

I need to look again at the C and C++ standards which with my vision I 
need to do in very small chunks.  Oh for the vision I once had!

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From r|p|eybd @end|ng |rom |c|oud@com  Mon Feb  3 18:39:07 2025
From: r|p|eybd @end|ng |rom |c|oud@com (Prof Brian Ripley)
Date: Mon, 3 Feb 2025 17:39:07 +0000
Subject: [Rd] boolean and logical types -draft
In-Reply-To: <93d0bc7e-9ad2-4193-b43e-34c1544bb1a7@icloud.com>
References: <93d0bc7e-9ad2-4193-b43e-34c1544bb1a7@icloud.com>
Message-ID: <fd059a61-57ab-4592-80e5-7a68b3b1d6d0@icloud.com>

Sent in error (and not moderated).

On 03/02/2025 17:36, Prof Brian Ripley via R-devel wrote:
> Tomas,
> 
> I am thinking of writing something for R-devel, and hope to have your 
> input first.
> 
> I get moderated on R-devel as I am now subscribed as brian.ripley at R- 
> project.org which of course I cannot send from. So I am even more 
> discouraged from posting there.? (R-core is bad enough with Luke 
> discouraging all innovation except by him and Simon completely 
> misunderstanding the C23 status.)
> 
> Thanks,
> 
> Brian
> 
> ----------------
> 
> There are several of these, and few guarantees for inter-working.
> 
> a) R's logical vectors, which include a value NA for its elements.
> b) R's Rboolean type in C/C++
> 
> c) C++'s bool type
> d) C23's bool type
> e) C99's _Bool type to which bool is aliased if <stdbool.h> is included.
> f) Fortran's LOGICAL type
> 
> a) is currently implemented as a C int (so 32-bit) type with NA as the C 
> value NA_LOGICAL which is the same a NA_INTEGER.
> 
> b) is currently implemented as a C enum with two values.? I don't know 
> of any guarantees on how that is stored except in char or an integer 
> type -- however it seems common practice to use a 32-bit type (int or 
> unsigned int would not be distinguishable).? (C23 ?6.7.3.3)? Enums can 
> have a specified data type, but we do not.
> 
> C23 states that bool has 1 value bit and some padding bits (?6.2.6.2) so 
> it can be stored in char-sized storage (i.e. bytes) or multiples 
> thereof.? And that _Bool is a alternative name for bool.
> 
> f) is complier-dependent: for interoperability with C or R, code should 
> use c_bool from iso_c_binding (Fortran 2003).? Fortran compilers store 
> LOGICAL in compiler-dependent ways, and for a long time we got away with 
> assuming that was equivalent to int (so LOGICAL values could be passed 
> to and from with int* on the C/R side).? But sometime around GCC 8 they 
> changed to int_least32_t, which on common platforms is the same as int 
> but does not need to be.
> 
> It seems that in all cases coercion to an integer type coerces false 
> values to 0 and true values to 1 (and this is guaranteed by C23 at 
> least).? And C23 guarantees that when coercing from an integer type to 
> bool zero values are coerced to false and non-zero ones to true (bool is 
> 'an unsigned integer type').? However, that does not seem to be true for 
> C++ as UB sanitizers warn on coercing values other than 0/1.
> 
> I believe it to be the intention that c), d) and e) have the same 
> representation and interwork using the same compiler, but I could not 
> find that documented and see signs that e) might differ in C17 and C23 
> modes.
> 
> ----------------
> 
> I need to look again at the C and C++ standards which with my vision I 
> need to do in very small chunks.? Oh for the vision I once had!
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Feb  4 13:45:49 2025
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 4 Feb 2025 13:45:49 +0100
Subject: [Rd] Suggestion to emphasize Rboolean is unrelated to LGLSXP in
 R-exts
In-Reply-To: <20250201123904.6fc253be@Tarkus>
References: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
 <20250201123904.6fc253be@Tarkus>
Message-ID: <b9e0a7c2-ea92-43d8-ac7d-db816bd31123@gmail.com>


On 2/1/25 10:39, Ivan Krylov via R-devel wrote:
> On Thu, 30 Jan 2025 13:07:31 -0800
> Michael Chirico <michaelchirico4 at gmail.com> wrote:
>
>> There are at least dozens of other cases on CRAN [2],[3].
> Some of these involve casting an int to Rboolean. Best case, the int is
> compared against NA_LOGICAL beforehand, avoiding any mistake (there's
> at least one like that). Worst case, NA_LOGICAL is not considered before
> the cast, so NA will now be interpreted as TRUE. This is hard to check
> without actually reading the code.
>
> Some packages compare an Rboolean expression against NA_LOGICAL [1].
> This implies having stored an int in an Rboolean value as in the
> previous paragraph. I think that it wasn't disallowed according to the
> C standard to store NA_LOGICAL in an enumeration type wide enough to
> fit it (and it evidently worked in practice). With typedef bool
> Rboolean, storing NA_LOGICAL in an Rboolean converts it to 'true', so
> the comparison will definitely fail:
>
> DPQ src/pnchisq-it.c:530,532
> Rmpfr src/convert.c:535
> checkmate src/helper.c:102
> chron src/unpaste.c:21
> collapse src/data.table_rbindlist.c:208,258,383,384,408,431
> data.table (many; fixed in Git)
> ff src/ordermerge.c:5074 (one declaration, many comparisons)
> networkDynamic src/Rinit.c:209 src/is.active.c:75,76,96-98
> slam src/util.c:258
> this.path src/get_file_from_closure.h:13,43 src/thispath.c:14,17,19,39
>   src/ext.c:25 src/setsyspath.c:8 src/get_file_from_closure.h:13,43
>
> Four packages cast int* pointers returned by LOGICAL() to Rboolean* or
> use sizeof(Rboolean) to calculate buffer sizes in calls to memcpy()
> with LOGICAL() buffers [2]. With typedef bool Rboolean, this is a
> serious mistake, because the memory layout of the types is no longer
> compatible:
>
> bit64 src/integer64.c:576,603,914,929,942,955,968,981,994
> collapse src/data.table_rbindlist.c:19,67,105
> data.table (many; fixed in Git)
> kit src/utils.c:390
>
> I don't know Coccinelle that well and there may be additional cases I
> failed to consider. At which point is it appropriate to start notifying
> maintainers of the bugs not caught by their test suites?

Yes, thanks, if you have the energy, I think it would be great if you 
could contact the maintainers directly if you find obvious problems in 
their packages, as much as in any open-source project. Casting int* from 
LOGICAL() to Rboolean* falls into that category.

Any bug finding tool would only find a subset of the bugs, that's ok - 
helping to fix only some packages (and not all) is still a big help.

Tomas


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Feb  5 20:54:38 2025
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 5 Feb 2025 20:54:38 +0100
Subject: [Rd] Suggestion to emphasize Rboolean is unrelated to LGLSXP in
 R-exts
In-Reply-To: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
References: <CAPRVBcwA_j9=nPsjo272knqzK8Bdaoi6bgsGO+5YrKLhttHvDw@mail.gmail.com>
Message-ID: <cd429917-a8dd-4503-b85e-36c721874950@gmail.com>


On 1/30/25 22:07, Michael Chirico wrote:
> Hello all,
>
> The recent change (r87656) to make Rboolean map to type 'bool', not
> 'int', broke some tests & made me realize I've had totally the wrong
> impression about what Rboolean actually is, and I suspect I'm not
> alone.
>
> Till now, I've assumed that like Rbyte --> RAWSXP, Rboolean is the
> _correct_ storage type for LGLSXP, while idioms like int *ip =
> LOGICAL(...) only "happened to work" because Rboolean masks int, which
> could change at any time.
>
> Actually, it turns out Rboolean only "happened to be int" because of
> the use of 'enum', which is changing in now-and-future C standards!
>
> We made that mistake in 9 places [1], though only one happened to
> break tests. There are at least dozens of other cases on CRAN [2],[3].
>
> Here's the current exposition on Rboolean in R-exts [4]:
>
>> Further, the included header R_ext/Boolean.h has enumeration constants TRUE and FALSE of type Rboolean in order to provide a way of using ?logical? variables in C consistently. This can conflict with other software: for example it conflicts with the headers in IJG?s jpeg-9 (but not earlier versions).
> I suggest embellishing this, perhaps like so:
>
>> Further, the included header R_ext/Boolean.h has enumeration constants TRUE and FALSE of type Rboolean in order to provide a way of using ?logical? variables in C consistently. This has no concept of "missingness", and so is \emph{not} related to the R logical type LGLSXP. This can conflict with other software: for example it conflicts with the headers in IJG?s jpeg-9 (but not earlier versions).

 ?Probably worth an extra sentence making this more explicit. I've added 
one similar to your suggestion.

Tomas

> It would also be nice if this mistake could be caught by the compiler,
> but that's another issue.
>
> Michael Chirico
>
> [1] https://github.com/Rdatatable/data.table/pull/6782/files
> [2] https://github.com/search?q=org%3Acran+%2FRboolean.*%5CbLOGICAL%2F&type=code
> [3] https://github.com/search?q=org%3Acran+%2FLOGICAL.*sizeof%5B%28%5DRboolean%2F&type=code
> [4] https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Mathematical-constants
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Thu Feb  6 16:18:12 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 6 Feb 2025 18:18:12 +0300
Subject: [Rd] Depends: R (>= 4.1) for packages that use |> and \(...)
In-Reply-To: <26514.5904.863904.292546@hornik.net>
References: <20250116144121.5520a9cc@arachnoid>
 <CAFDcVCTTVa+Ea+BoVoag0RJ7LK3P1tyPzBG9vP4U-4w6a4kKKQ@mail.gmail.com>
 <26506.26949.241762.7373@hornik.net>
 <26509.10892.521351.954386@hornik.net>
 <26512.37984.542732.125792@hornik.net>
 <CAP8nD2xthJ5TzwYdok5tjXiWyf4=Y=uGf-sf7FFQKCjzNAACOA@mail.gmail.com>
 <20250123121008.4338cff0@Tarkus>
 <26514.5904.863904.292546@hornik.net>
Message-ID: <20250206181812.5155d6ed@arachnoid>

On Thu, 23 Jan 2025 11:16:48 +0100
Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

> My guess would be that the new syntax is particularly prominently used
> in examples: if so, it would be good to also have coverage for this.

In today's CRAN snapshot, there turned out to be 198 packages that use
4.1 syntax in examples but not in code, 5 packages that use 4.2 syntax
in examples but 4.1 in the code, and 3 packages that use 4.2 syntax in
examples but not the code. This may be slightly imprecise because I
don't have some of the Rd macro packages installed and run
Rd2ex(stages=NULL) on manually-parsed Rd files without installing the
packages.

Attaching a patch that checks the syntax used in Rd examples at the
same time as the main R code, not necessarily the best way to perform
this check. Is it perhaps worth separating R/* checks from man/*.Rd
checks? Should R CMD check try to reuse the Rd database from the
installed copy of the package?

-- 
Best regards,
Ivan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: check_R_syntax_in_examples.patch
Type: text/x-patch
Size: 4000 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20250206/9fd89fa8/attachment.bin>

From tob|@@@verbeke @end|ng |rom open@n@|yt|c@@eu  Fri Feb  7 19:20:50 2025
From: tob|@@@verbeke @end|ng |rom open@n@|yt|c@@eu (Tobias Verbeke)
Date: Fri, 7 Feb 2025 18:20:50 +0000
Subject: [Rd] typo in R-exts.texi
Message-ID: <01020194e1a4a011-d3f4864f-1f88-4fb4-b834-4c341ad9a5c6-000000@eu-west-1.amazonses.com>

L.S.

Please find below a tiny patch for a trivial typo.

Kind regards,
Tobias


diff --git a/doc/manual/R-exts.texi b/doc/manual/R-exts.texi
index c9c1015da6..e84bbd53f2 100644
--- a/doc/manual/R-exts.texi
+++ b/doc/manual/R-exts.texi
@@ -6814,7 +6814,7 @@ To negotiate with @I{Uwe Ligges} to host the additional components on
 @end itemize
 
 @noindent
-Be aware that license requirements you may require you to supply the
+Be aware that license requirements may require you to supply the
 sources for the additional components (and will if your package has a
 GPL-like license).


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb  7 20:15:43 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 7 Feb 2025 20:15:43 +0100
Subject: [Rd] typo in R-exts.texi
In-Reply-To: <01020194e1a4a011-d3f4864f-1f88-4fb4-b834-4c341ad9a5c6-000000@eu-west-1.amazonses.com>
References: <01020194e1a4a011-d3f4864f-1f88-4fb4-b834-4c341ad9a5c6-000000@eu-west-1.amazonses.com>
Message-ID: <26534.23519.718165.560064@stat.math.ethz.ch>

>>>>> Tobias Verbeke 
>>>>>     on Fri, 7 Feb 2025 18:20:50 +0000 writes:

    > L.S.  Please find below a tiny patch for a trivial typo.

    > Kind regards, Tobias

Thank you, Tobias!
-->  Fixed already.

Martin

    > diff --git a/doc/manual/R-exts.texi b/doc/manual/R-exts.texi
    > index c9c1015da6..e84bbd53f2 100644
    > --- a/doc/manual/R-exts.texi
    > +++ b/doc/manual/R-exts.texi
    > @@ -6814,7 +6814,7 @@ To negotiate with @I{Uwe Ligges} to host the additional components on
    > @end itemize
 
    > @noindent
    > -Be aware that license requirements you may require you to supply the
    > +Be aware that license requirements may require you to supply the
    > sources for the additional components (and will if your package has a
    > GPL-like license).


From edd @end|ng |rom deb|@n@org  Sat Feb  8 01:06:03 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 7 Feb 2025 18:06:03 -0600
Subject: [Rd] Another typo in R-exts.texi
Message-ID: <26534.40939.338286.387898@rob.eddelbuettel.com>


R Core,

Here is another minor typo which I had spotted three days ago and sent to
Brian, but have not heard back nor seen it incorporated. Doubly trivial as in
a comment but a dual typo nevertheless. Would be nice if someone could fold
this in. I still have the same diff here for the current r87707.

Cheers, Dirk

edd at rob:~/svn/r-devel$ svn diff doc/manual/R-exts.texi
Index: doc/manual/R-exts.texi
===================================================================
--- doc/manual/R-exts.texi      (revision 87685)
+++ doc/manual/R-exts.texi      (working copy)
@@ -5904,7 +5904,7 @@
 @c RHEL 7 came with GCC 4.8, with 4.4 available.
 @c RHEL 8 has GCC 8 with 9 available
 @c RHEL 9 has GCC 11
- at c All versions of Cwntos is now EOL.
+ at c All versions of Centos are now EOL.
 A common error is to assume recent versions of compilers or OSes.  In
 production environments `long term support' versions of OSes may be in
 use for many years, at footnote{Ubuntu provides 5 years of support (but
edd at rob:~/svn/r-devel$ 

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Sat Feb  8 08:06:00 2025
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Sat, 8 Feb 2025 08:06:00 +0100
Subject: [Rd] Another typo in R-exts.texi
In-Reply-To: <26534.40939.338286.387898@rob.eddelbuettel.com>
References: <26534.40939.338286.387898@rob.eddelbuettel.com>
Message-ID: <26535.600.857402.210912@hornik.net>

>>>>> Dirk Eddelbuettel writes:

Thanks: fixed now.

Best
-k

> R Core,

> Here is another minor typo which I had spotted three days ago and sent to
> Brian, but have not heard back nor seen it incorporated. Doubly trivial as in
> a comment but a dual typo nevertheless. Would be nice if someone could fold
> this in. I still have the same diff here for the current r87707.

> Cheers, Dirk

> edd at rob:~/svn/r-devel$ svn diff doc/manual/R-exts.texi
> Index: doc/manual/R-exts.texi
> ===================================================================
> --- doc/manual/R-exts.texi      (revision 87685)
> +++ doc/manual/R-exts.texi      (working copy)
> @@ -5904,7 +5904,7 @@
>  @c RHEL 7 came with GCC 4.8, with 4.4 available.
>  @c RHEL 8 has GCC 8 with 9 available
>  @c RHEL 9 has GCC 11
> - at c All versions of Cwntos is now EOL.
> + at c All versions of Centos are now EOL.
>  A common error is to assume recent versions of compilers or OSes.  In
>  production environments `long term support' versions of OSes may be in
>  use for many years, at footnote{Ubuntu provides 5 years of support (but
> edd at rob:~/svn/r-devel$ 

> -- 
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


