From ||nde|o| @end|ng |rom |eee@org  Fri Feb  1 09:44:13 2019
From: ||nde|o| @end|ng |rom |eee@org (David Lindelof)
Date: Fri, 1 Feb 2019 09:44:13 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
Message-ID: <CAKtMxAFDxp07eptT5viCi+PoSsHUzsV8u3b_B76HXqeDQeeodw@mail.gmail.com>

@Barry I'm not sure your proposal would work, since `R CMD INSTALL` won't
install a package's dependencies. Indeed it will fail with an error unless
all the dependencies are met before calling it.

Speaking of which, why doesn't R CMD INSTALL install a package's
dependencies? Would it make sense to submit this as a desirable feature?

Cheers,

David

On Thu, Jan 31, 2019 at 4:38 PM Barry Rowlingson <
b.rowlingson at lancaster.ac.uk> wrote:

>
>
> On Thu, Jan 31, 2019 at 3:14 PM David Lindelof <lindelof at ieee.org> wrote:
>
>>
>> In summary, I'm convinced R would benefit from something similar to Java's
>> `Main-Class` header or Python's `__main__()` function. A new R CMD command
>> would take a package, install its dependencies, and run its "main"
>> function.
>
>
>
> I just created and built a very boilerplate R package called "runme". I
> can install its dependencies and run its "main" function with:
>
>  $ R CMD INSTALL runme_0.0.0.9000.tar.gz
>  $ R -e 'runme::main()'
>
> No new R CMDs needed. Now my choice of "main" is arbitrary, whereas with
> python and java and C the entrypoint is more tightly specified (__name__ ==
> "__main__" in python, int main(..) in C and so on). But I don't think
> that's much of a problem.
>
> Does that not satisfy your requirements close enough? If you want it in
> one line then:
>
> R CMD INSTALL runme_0.0.0.9000.tar.gz && R -e 'runme::main()'
>
> will do the second if the first succeeds (Unix shells).
>
> You could write a script for $RHOME/bin/RUN which would be a two-liner and
> that could mandate the use of "main" as an entry point. But good luck
> getting anything into base R.
>
> Barry
>
>
>
>
>> If we have this machinery available, we could even consider
>> reaching out to Spark (and other tech stacks) developers and make it
>> easier
>> to develop R applications for those platforms.
>>
>>
>
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb  1 10:00:57 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 1 Feb 2019 10:00:57 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
Message-ID: <23636.2761.752118.1610@stat.math.ethz.ch>

>>>>> Kasper Kristensen via R-devel 
>>>>>     on Mon, 28 Jan 2019 08:56:39 +0000 writes:

    > I've noticed unstable behavior of nlminb on some Linux
    > systems. The problem can be reproduced by compiling
    > R-3.5.2 using gcc-8.2 and running the following snippet:

    > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
    > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
    > xhat <- rep(1, 10)
    > abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE

    > The example works perfectly when removing the bounds. However, when bounds are added the snippet returns 'FALSE'.

    > An older R version (3.4.4), compiled using the same gcc-8.2, did not have the problem. Between the two versions R has changed the flags to compile Fortran sources:

    > < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
    > ---
    >> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse

    > Reverting to the old SAFE_FFLAGS 'solves' the problem.

    >> sessionInfo()
    > R version 3.5.2 (2018-12-20)
    > Platform: x86_64-pc-linux-gnu (64-bit)
    > Running under: Scientific Linux release 6.4 (Carbon)

    > Matrix products: default
    > BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so

    > locale:
    > [1] C

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods   base

    > loaded via a namespace (and not attached):
    > [1] compiler_3.5.2

So you us Intel's MKL library for BLAS/LAPACK ..

I also use gcc 8.2 (on Fedora 28 Linux) and R's own BLAS/LAPACK
and don't see such problems:

The code

f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
str(opt)
xhat <- rep(1, 10)
all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE

gives

> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
List of 6
 $ par        : num [1:10] 1 1 1 1 1 ...
 $ objective  : num -41.4
 $ convergence: int 0
 $ iterations : int 66
 $ evaluations: Named int [1:2] 96 830
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
 $ message    : chr "relative convergence (4)"
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
[1] "Mean relative difference: 5.534757e-07"
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
[1] "Mean relative difference: 1.816536e-12"
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
[1] TRUE
>

for me. Maybe others can quickly run the above  7 lines and report ?

Maybe there's something else unusual with your Linux
distribution's libraries?

I'm not an expert on these compiler flags; have you seen what
the R-admin manual
    https://cran.r-project.org/doc/manuals/R-admin.html#Linux
says about them?

Best,
Martin


From r@||@@tubner @end|ng |rom d@q@n@@com  Fri Feb  1 11:42:13 2019
From: r@||@@tubner @end|ng |rom d@q@n@@com (Ralf Stubner)
Date: Fri, 1 Feb 2019 11:42:13 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <23636.2761.752118.1610@stat.math.ethz.ch>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
Message-ID: <43a555f1-76d1-220a-7d4a-fc547b1bd299@daqana.com>

On 01.02.19 10:00, Martin Maechler wrote:
>> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>> str(opt)
> List of 6
>  $ par        : num [1:10] 1 1 1 1 1 ...
>  $ objective  : num -41.4
>  $ convergence: int 0
>  $ iterations : int 66
>  $ evaluations: Named int [1:2] 96 830
>   ..- attr(*, "names")= chr [1:2] "function" "gradient"
>  $ message    : chr "relative convergence (4)"
>> xhat <- rep(1, 10)
>> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> [1] "Mean relative difference: 5.534757e-07"
>> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> [1] "Mean relative difference: 1.816536e-12"
>> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> [1] TRUE
>>
> 
> for me. Maybe others can quickly run the above  7 lines and report ?

Similar but not equal results for me:

> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
List of 6
 $ par        : num [1:10] 1 1 1 1 1 ...
 $ objective  : num -41.4
 $ convergence: int 0
 $ iterations : int 66
 $ evaluations: Named int [1:2] 96 830
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
 $ message    : chr "relative convergence (4)"
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
[1] "Mean relative difference: 3.266165e-07"
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
[1] "Mean relative difference: 6.722005e-13"
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
[1] TRUE


Setup:

* Debian Stable with gcc 6.2
* R 3.5.2 from CRAN repository
* OpenBLAS

Greetings
Ralf

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Dr.-Ing. Stefan Knirsch, Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190201/c3a3aa59/attachment.sig>

From bhh @end|ng |rom x@4@||@n|  Fri Feb  1 15:59:58 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Fri, 1 Feb 2019 15:59:58 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <23636.2761.752118.1610@stat.math.ethz.ch>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
Message-ID: <81BDC75A-ED23-4E70-A4AC-D34ADDCF6293@xs4all.nl>



> On 1 Feb 2019, at 10:00, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
> ........
>>> sessionInfo()
>> R version 3.5.2 (2018-12-20)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Scientific Linux release 6.4 (Carbon)
> 
>> Matrix products: default
>> BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
> 
>> locale:
>> [1] C
> 
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
>> loaded via a namespace (and not attached):
>> [1] compiler_3.5.2
> 
> So you us Intel's MKL library for BLAS/LAPACK ..
> 
> I also use gcc 8.2 (on Fedora 28 Linux) and R's own BLAS/LAPACK
> and don't see such problems:
> 
> The code
> 
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> 
> gives
> 
>> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>> str(opt)
> List of 6
> $ par        : num [1:10] 1 1 1 1 1 ...
> $ objective  : num -41.4
> $ convergence: int 0
> $ iterations : int 66
> $ evaluations: Named int [1:2] 96 830
>  ..- attr(*, "names")= chr [1:2] "function" "gradient"
> $ message    : chr "relative convergence (4)"
>> xhat <- rep(1, 10)
>> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> [1] "Mean relative difference: 5.534757e-07"
>> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> [1] "Mean relative difference: 1.816536e-12"
>> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> [1] TRUE
>> 
> 
> for me. Maybe others can quickly run the above  7 lines and report ?
> 

Identical result on R 3.5.2 on macOS 10.14.3 with the CRAN version of R.


Berend Hasselman

> Maybe there's something else unusual with your Linux
> distribution's libraries?
> 
> I'm not an expert on these compiler flags; have you seen what
> the R-admin manual
>    https://cran.r-project.org/doc/manuals/R-admin.html#Linux
> says about them?
> 
> Best,
> Martin
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb  1 17:31:42 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 1 Feb 2019 17:31:42 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <81BDC75A-ED23-4E70-A4AC-D34ADDCF6293@xs4all.nl>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
 <81BDC75A-ED23-4E70-A4AC-D34ADDCF6293@xs4all.nl>
Message-ID: <23636.29806.811582.405360@stat.math.ethz.ch>

>>>>> Berend Hasselman 
>>>>>     on Fri, 1 Feb 2019 15:59:58 +0100 writes:

    >> On 1 Feb 2019, at 10:00, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> ........
    >>>> sessionInfo()
    >>> R version 3.5.2 (2018-12-20)
    >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >>> Running under: Scientific Linux release 6.4 (Carbon)
    >> 
    >>> Matrix products: default
    >>> BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
    >> 
    >>> locale:
    >>> [1] C
    >> 
    >>> attached base packages:
    >>> [1] stats     graphics  grDevices utils     datasets  methods   base
    >> 
    >>> loaded via a namespace (and not attached):
    >>> [1] compiler_3.5.2
    >> 
    >> So you us Intel's MKL library for BLAS/LAPACK ..
    >> 
    >> I also use gcc 8.2 (on Fedora 28 Linux) and R's own BLAS/LAPACK
    >> and don't see such problems:
    >> 
    >> The code
    >> 
    >> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
    >> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
    >> str(opt)
    >> xhat <- rep(1, 10)
    >> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
    >> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
    >> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
    >> 
    >> gives
    >> 
    >>> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
    >>> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
    >>> str(opt)
    >> List of 6
    >> $ par        : num [1:10] 1 1 1 1 1 ...
    >> $ objective  : num -41.4
    >> $ convergence: int 0
    >> $ iterations : int 66
    >> $ evaluations: Named int [1:2] 96 830
    >> ..- attr(*, "names")= chr [1:2] "function" "gradient"
    >> $ message    : chr "relative convergence (4)"
    >>> xhat <- rep(1, 10)
    >>> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
    >> [1] "Mean relative difference: 5.534757e-07"
    >>> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
    >> [1] "Mean relative difference: 1.816536e-12"
    >>> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
    >> [1] TRUE
    >>> 
    >> 
    >> for me. Maybe others can quickly run the above  7 lines and report ?
    >> 

    > Identical result on R 3.5.2 on macOS 10.14.3 with the CRAN version of R.

    > Berend Hasselman

Thank you, Berend, and Ralf (with gcc 6.2 and OpenBLAS),
for your reports.

In the mean time I also had tried Windows 32bit and 64bit, today's
R-devel version from CRAN (on a Terminal server) and also got
identical results for 64 bit and astonishingly even a bit more
accuracy for the 32 bit version.

So far, Kasper's platform is the only one where there's been a
problem, but I think it would be good to see/hear more here,
notably for people with optimized non-default BLAS/LAPACK or
system libraries...

    >> Maybe there's something else unusual with your Linux
    >> distribution's libraries?
    >> 
    >> I'm not an expert on these compiler flags; have you seen what
    >> the R-admin manual
    >> https://cran.r-project.org/doc/manuals/R-admin.html#Linux
    >> says about them?
    >> 
    >> Best,
    >> Martin
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk  Fri Feb  1 21:19:54 2019
From: b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk (Barry Rowlingson)
Date: Fri, 1 Feb 2019 20:19:54 +0000
Subject: [Rd] Runnable R packages
In-Reply-To: <4d63d88fad534a6d89b03cfc45ba8397@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
 <4d63d88fad534a6d89b03cfc45ba8397@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
Message-ID: <CANVKczOJeaNLcwavFqsXkNBnXaQ6WndkdaA=01Goo6FAbXt5-w@mail.gmail.com>

Ummm oops. Magic pixies? It assumed all of CRAN was installed?

Maybe I'll write something that could go in /usr/lib/R/bin/RUN that
checks and gets deps, installs the package, and runs package::main,
which I think is what the OP wants - you could do R CMD RUN
foo_1.0.0.tar.gz and away it goes...

B


On Thu, Jan 31, 2019 at 3:56 PM David Lindelof <lindelof at ieee.org> wrote:
>
> Would you care to share how your package installs its own dependencies? I assume this is done during the call to `main()`? (Last time I checked, R CMD INSTALL would not install a package's dependencies...)
>
>
> On Thu, Jan 31, 2019 at 4:38 PM Barry Rowlingson <b.rowlingson at lancaster.ac.uk> wrote:
>>
>>
>>
>> On Thu, Jan 31, 2019 at 3:14 PM David Lindelof <lindelof at ieee.org> wrote:
>>>
>>>
>>> In summary, I'm convinced R would benefit from something similar to Java's
>>> `Main-Class` header or Python's `__main__()` function. A new R CMD command
>>> would take a package, install its dependencies, and run its "main"
>>> function.
>>
>>
>>
>> I just created and built a very boilerplate R package called "runme". I can install its dependencies and run its "main" function with:
>>
>>  $ R CMD INSTALL runme_0.0.0.9000.tar.gz
>>  $ R -e 'runme::main()'
>>
>> No new R CMDs needed. Now my choice of "main" is arbitrary, whereas with python and java and C the entrypoint is more tightly specified (__name__ == "__main__" in python, int main(..) in C and so on). But I don't think that's much of a problem.
>>
>> Does that not satisfy your requirements close enough? If you want it in one line then:
>>
>> R CMD INSTALL runme_0.0.0.9000.tar.gz && R -e 'runme::main()'
>>
>> will do the second if the first succeeds (Unix shells).
>>
>> You could write a script for $RHOME/bin/RUN which would be a two-liner and that could mandate the use of "main" as an entry point. But good luck getting anything into base R.
>>
>> Barry
>>
>>
>>
>>>
>>> If we have this machinery available, we could even consider
>>> reaching out to Spark (and other tech stacks) developers and make it easier
>>> to develop R applications for those platforms.
>>>
>>
>>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Feb  1 21:23:54 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 1 Feb 2019 20:23:54 +0000
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <23636.2761.752118.1610@stat.math.ethz.ch>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
Message-ID: <4e92eee6-a8f2-02bc-5e11-3c27b18e2339@sapo.pt>

Hello,

R 3.5.2 on ubuntu 18.04. sessionInfo() at the end.
Works with me, same results, cannot reproduce the error.


f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
str(opt)

xhat <- rep(1, 10)
all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
#[1] "Mean relative difference: 5.534757e-07"
all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
#[1] "Mean relative difference: 1.816536e-12"
abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
#[1] TRUE


Hope this helps,

Rui Barradas


sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.1 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
  [1] Rcpp_1.0.0       rstudioapi_0.8   bindr_0.1.1      magrittr_1.5
  [5] tidyselect_0.2.5 munsell_0.5.0    colorspace_1.3-2 lattice_0.20-38
  [9] R6_2.3.0         rlang_0.3.0.1    stringr_1.3.1    plyr_1.8.4
[13] dplyr_0.7.8      tools_3.5.2      grid_3.5.2       yaml_2.2.0
[17] assertthat_0.2.0 tibble_1.4.2     crayon_1.3.4     bindrcpp_0.2.2
[21] purrr_0.2.5      reshape2_1.4.3   glue_1.3.0       stringi_1.2.4
[25] compiler_3.5.2   pillar_1.3.1     scales_1.0.0     lubridate_1.7.4
[29] pkgconfig_2.0.2  zoo_1.8-4




?s 09:00 de 01/02/2019, Martin Maechler escreveu:
>>>>>> Kasper Kristensen via R-devel
>>>>>>      on Mon, 28 Jan 2019 08:56:39 +0000 writes:
> 
>      > I've noticed unstable behavior of nlminb on some Linux
>      > systems. The problem can be reproduced by compiling
>      > R-3.5.2 using gcc-8.2 and running the following snippet:
> 
>      > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>      > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>      > xhat <- rep(1, 10)
>      > abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> 
>      > The example works perfectly when removing the bounds. However, when bounds are added the snippet returns 'FALSE'.
> 
>      > An older R version (3.4.4), compiled using the same gcc-8.2, did not have the problem. Between the two versions R has changed the flags to compile Fortran sources:
> 
>      > < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
>      > ---
>      >> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
> 
>      > Reverting to the old SAFE_FFLAGS 'solves' the problem.
> 
>      >> sessionInfo()
>      > R version 3.5.2 (2018-12-20)
>      > Platform: x86_64-pc-linux-gnu (64-bit)
>      > Running under: Scientific Linux release 6.4 (Carbon)
> 
>      > Matrix products: default
>      > BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
> 
>      > locale:
>      > [1] C
> 
>      > attached base packages:
>      > [1] stats     graphics  grDevices utils     datasets  methods   base
> 
>      > loaded via a namespace (and not attached):
>      > [1] compiler_3.5.2
> 
> So you us Intel's MKL library for BLAS/LAPACK ..
> 
> I also use gcc 8.2 (on Fedora 28 Linux) and R's own BLAS/LAPACK
> and don't see such problems:
> 
> The code
> 
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> 
> gives
> 
>> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>> str(opt)
> List of 6
>   $ par        : num [1:10] 1 1 1 1 1 ...
>   $ objective  : num -41.4
>   $ convergence: int 0
>   $ iterations : int 66
>   $ evaluations: Named int [1:2] 96 830
>    ..- attr(*, "names")= chr [1:2] "function" "gradient"
>   $ message    : chr "relative convergence (4)"
>> xhat <- rep(1, 10)
>> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> [1] "Mean relative difference: 5.534757e-07"
>> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> [1] "Mean relative difference: 1.816536e-12"
>> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> [1] TRUE
>>
> 
> for me. Maybe others can quickly run the above  7 lines and report ?
> 
> Maybe there's something else unusual with your Linux
> distribution's libraries?
> 
> I'm not an expert on these compiler flags; have you seen what
> the R-admin manual
>      https://cran.r-project.org/doc/manuals/R-admin.html#Linux
> says about them?
> 
> Best,
> Martin
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Fri Feb  1 21:29:30 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Fri, 1 Feb 2019 15:29:30 -0500
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <4e92eee6-a8f2-02bc-5e11-3c27b18e2339@sapo.pt>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
 <4e92eee6-a8f2-02bc-5e11-3c27b18e2339@sapo.pt>
Message-ID: <CAL6gwnJUGZ+r6aD6EnKG=6s8s-WU12tw60eWbOTULhexRFgWYQ@mail.gmail.com>

No error on Windows 10, R.3.5.2 patched, Rblas compiled with OpenBLAS
0.20, Rlapack is base.

> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
List of 6
 $ par        : num [1:10] 1 1 1 1 1 ...
 $ objective  : num -41.4
 $ convergence: int 0
 $ iterations : int 66
 $ evaluations: Named int [1:2] 96 830
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
 $ message    : chr "relative convergence (4)"
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0)
[1] "Mean relative difference: 3.266165e-07"
> all.equal(opt$objective, f(xhat), tol=0)
[1] "Mean relative difference: 6.722005e-13"
> abs( opt$objective - f(xhat) ) < 1e-4
[1] TRUE

> sessionInfo()
R version 3.5.2 Patched (2018-12-26 r75909)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2 tools_3.5.2    yaml_2.2.0

On Fri, Feb 1, 2019 at 3:24 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> Hello,
>
> R 3.5.2 on ubuntu 18.04. sessionInfo() at the end.
> Works with me, same results, cannot reproduce the error.
>
>
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
>
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> #[1] "Mean relative difference: 5.534757e-07"
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> #[1] "Mean relative difference: 1.816536e-12"
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> #[1] TRUE
>
>
> Hope this helps,
>
> Rui Barradas
>
>
> sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.1 LTS
>
> Matrix products: default
> BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1
>
> locale:
>   [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
>   [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
>   [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
>   [1] Rcpp_1.0.0       rstudioapi_0.8   bindr_0.1.1      magrittr_1.5
>   [5] tidyselect_0.2.5 munsell_0.5.0    colorspace_1.3-2 lattice_0.20-38
>   [9] R6_2.3.0         rlang_0.3.0.1    stringr_1.3.1    plyr_1.8.4
> [13] dplyr_0.7.8      tools_3.5.2      grid_3.5.2       yaml_2.2.0
> [17] assertthat_0.2.0 tibble_1.4.2     crayon_1.3.4     bindrcpp_0.2.2
> [21] purrr_0.2.5      reshape2_1.4.3   glue_1.3.0       stringi_1.2.4
> [25] compiler_3.5.2   pillar_1.3.1     scales_1.0.0     lubridate_1.7.4
> [29] pkgconfig_2.0.2  zoo_1.8-4
>
>
>
>
> ?s 09:00 de 01/02/2019, Martin Maechler escreveu:
> >>>>>> Kasper Kristensen via R-devel
> >>>>>>      on Mon, 28 Jan 2019 08:56:39 +0000 writes:
> >
> >      > I've noticed unstable behavior of nlminb on some Linux
> >      > systems. The problem can be reproduced by compiling
> >      > R-3.5.2 using gcc-8.2 and running the following snippet:
> >
> >      > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> >      > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> >      > xhat <- rep(1, 10)
> >      > abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> >
> >      > The example works perfectly when removing the bounds. However, when bounds are added the snippet returns 'FALSE'.
> >
> >      > An older R version (3.4.4), compiled using the same gcc-8.2, did not have the problem. Between the two versions R has changed the flags to compile Fortran sources:
> >
> >      > < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
> >      > ---
> >      >> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
> >
> >      > Reverting to the old SAFE_FFLAGS 'solves' the problem.
> >
> >      >> sessionInfo()
> >      > R version 3.5.2 (2018-12-20)
> >      > Platform: x86_64-pc-linux-gnu (64-bit)
> >      > Running under: Scientific Linux release 6.4 (Carbon)
> >
> >      > Matrix products: default
> >      > BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
> >
> >      > locale:
> >      > [1] C
> >
> >      > attached base packages:
> >      > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> >      > loaded via a namespace (and not attached):
> >      > [1] compiler_3.5.2
> >
> > So you us Intel's MKL library for BLAS/LAPACK ..
> >
> > I also use gcc 8.2 (on Fedora 28 Linux) and R's own BLAS/LAPACK
> > and don't see such problems:
> >
> > The code
> >
> > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> > str(opt)
> > xhat <- rep(1, 10)
> > all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> > all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> > abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> >
> > gives
> >
> >> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> >> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> >> str(opt)
> > List of 6
> >   $ par        : num [1:10] 1 1 1 1 1 ...
> >   $ objective  : num -41.4
> >   $ convergence: int 0
> >   $ iterations : int 66
> >   $ evaluations: Named int [1:2] 96 830
> >    ..- attr(*, "names")= chr [1:2] "function" "gradient"
> >   $ message    : chr "relative convergence (4)"
> >> xhat <- rep(1, 10)
> >> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> > [1] "Mean relative difference: 5.534757e-07"
> >> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> > [1] "Mean relative difference: 1.816536e-12"
> >> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> > [1] TRUE
> >>
> >
> > for me. Maybe others can quickly run the above  7 lines and report ?
> >
> > Maybe there's something else unusual with your Linux
> > distribution's libraries?
> >
> > I'm not an expert on these compiler flags; have you seen what
> > the R-admin manual
> >      https://cran.r-project.org/doc/manuals/R-admin.html#Linux
> > says about them?
> >
> > Best,
> > Martin
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Fri Feb  1 22:31:50 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 1 Feb 2019 13:31:50 -0800
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAHuV1dioQbty8SHpgg15qvHfAheCNN+7qZ1JFuricAjJA@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
 <CAKtMxAHuV1dioQbty8SHpgg15qvHfAheCNN+7qZ1JFuricAjJA@mail.gmail.com>
Message-ID: <CAF8bMcZvsdq5D8w5W7=kfuuZHbKiP4B3EgeOE5M-DKCNRJE-=g@mail.gmail.com>

To download a package with all its dependencies and install it, use the
install.packages() functions instead of 'R CMD INSTALL'.  E.g., in bash:

mkdir /tmp/libJunk
env R_LIBS_SITE=libJunk R --quiet -e 'if
(!requireNamespace("purrr",quietly=TRUE)) install.packages("purrr")'

For corporate "production use" you probably want to set up your own
repository containing
fixed versions of packages instead of using CRAN.  Then edd repos="..." to
the install.packages()
call.  Of course you can put this into a package and somehow deal with the
bootstrapping issue.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, Jan 31, 2019 at 8:04 AM David Lindelof <lindelof at ieee.org> wrote:

> Would you care to share how your package installs its own dependencies? I
> assume this is done during the call to `main()`? (Last time I checked, R
> CMD INSTALL would not install a package's dependencies...)
>
>
> On Thu, Jan 31, 2019 at 4:38 PM Barry Rowlingson <
> b.rowlingson at lancaster.ac.uk> wrote:
>
> >
> >
> > On Thu, Jan 31, 2019 at 3:14 PM David Lindelof <lindelof at ieee.org>
> wrote:
> >
> >>
> >> In summary, I'm convinced R would benefit from something similar to
> Java's
> >> `Main-Class` header or Python's `__main__()` function. A new R CMD
> command
> >> would take a package, install its dependencies, and run its "main"
> >> function.
> >
> >
> >
> > I just created and built a very boilerplate R package called "runme". I
> > can install its dependencies and run its "main" function with:
> >
> >  $ R CMD INSTALL runme_0.0.0.9000.tar.gz
> >  $ R -e 'runme::main()'
> >
> > No new R CMDs needed. Now my choice of "main" is arbitrary, whereas with
> > python and java and C the entrypoint is more tightly specified (__name__
> ==
> > "__main__" in python, int main(..) in C and so on). But I don't think
> > that's much of a problem.
> >
> > Does that not satisfy your requirements close enough? If you want it in
> > one line then:
> >
> > R CMD INSTALL runme_0.0.0.9000.tar.gz && R -e 'runme::main()'
> >
> > will do the second if the first succeeds (Unix shells).
> >
> > You could write a script for $RHOME/bin/RUN which would be a two-liner
> and
> > that could mandate the use of "main" as an entry point. But good luck
> > getting anything into base R.
> >
> > Barry
> >
> >
> >
> >
> >> If we have this machinery available, we could even consider
> >> reaching out to Spark (and other tech stacks) developers and make it
> >> easier
> >> to develop R applications for those platforms.
> >>
> >>
> >
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Fri Feb  1 22:53:58 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 1 Feb 2019 15:53:58 -0600
Subject: [Rd] Runnable R packages
In-Reply-To: <CAF8bMcZvsdq5D8w5W7=kfuuZHbKiP4B3EgeOE5M-DKCNRJE-=g@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
 <CAKtMxAHuV1dioQbty8SHpgg15qvHfAheCNN+7qZ1JFuricAjJA@mail.gmail.com>
 <CAF8bMcZvsdq5D8w5W7=kfuuZHbKiP4B3EgeOE5M-DKCNRJE-=g@mail.gmail.com>
Message-ID: <23636.49142.456368.124053@rob.eddelbuettel.com>


On 1 February 2019 at 13:31, William Dunlap via R-devel wrote:
| To download a package with all its dependencies and install it, use the
| install.packages() functions instead of 'R CMD INSTALL'.  E.g., in bash:
| 
| mkdir /tmp/libJunk
| env R_LIBS_SITE=libJunk R --quiet -e 'if
| (!requireNamespace("purrr",quietly=TRUE)) install.packages("purrr")'

Or one could use 'littler' and install some of its examples in the $PATH path
(which I tend to do via softlinks to get updates easily).

Then it is simply

   $ install.r purrr

and there is also install2.r with docopt goodness and more options.

These have been my preferred tools for many years at home and work, and they
found their way through Rocker dockerfiles as well as install2.r was started
by Carl for added features.
 
| For corporate "production use" you probably want to set up your own
| repository containing
| fixed versions of packages instead of using CRAN.  Then edd repos="..." to
| the install.packages()
| call.  Of course you can put this into a package and somehow deal with the
| bootstrapping issue.

Absolutely. But what repo to source packages from is somewhat orthogonal to
how to install from there. Also, thanks to Gergely, repos is now an argument
to install2.r

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |gn@c|o82 @end|ng |rom gm@||@com  Fri Feb  1 22:51:10 2019
From: |gn@c|o82 @end|ng |rom gm@||@com (Ignacio Martinez)
Date: Fri, 1 Feb 2019 16:51:10 -0500
Subject: [Rd] Set the number of threads using openmp with .Fortran?
Message-ID: <CAJA1VFy0ub73Wa_rWFv1Vcvthsjp7_AC9OBd=1pMnr+59HSBXQ@mail.gmail.com>

Hi everybody,

I'm trying to develop an R package with Fortran and OpenMP. I wrote a
simple hello world but I'm not able to set the number of threads. I found this
old email chain
<http://r.789695.n4.nabble.com/Set-the-number-of-threads-using-openmp-with-C-td2284685.html>
and
I tried to set my compile instructions accordingly but i had no luck.

*This is my makevars:*

PKG_FCFLAGS="-fno-stack-protector"
F90FLAGS =  "-fopenmp"
LDFLAGS = "-fopenmp"

*This is my Fortran module:*

module hello_openmp
   use omp_lib
   implicit none
   contains

subroutine hello(ncores) bind(C, name="hello_")
  use, intrinsic                                         :: iso_c_binding,
only : c_double, c_int
  integer(c_int), intent(in)                             :: ncores
  integer                                                :: iam
  ! Specify number of threads to use:
  !$call omp_set_num_threads(ncores)
  !$omp parallel private(iam)
  iam=omp_get_thread_num()
  !$omp critical
  write(*,*) 'Hello from', iam
  !$omp end critical
  !$omp end parallel
end subroutine hello

end module hello_openmp


*and this is my R function:*

#'@export
#'@useDynLib helloOpenMP, .registration = TRUE

hello <- function(ncores=4) {
  .Fortran("hello", ncores = as.integer(ncores))
}


*Alas, when I call hello things only run with one thread:*

> hello(ncores = 2)$ncores
 Hello from           0
[1] 2


Could you point me in the right direction? What am I missing?


Thanks,


Ignacio

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Fri Feb  1 23:58:44 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abs Spurdle)
Date: Sat, 2 Feb 2019 11:58:44 +1300
Subject: [Rd] Runnable R packages
Message-ID: <CAB8pepz5fkB1oZmb1VbT8G3n8XVrdWnHh+dx0awb06oKpyYc5g@mail.gmail.com>

This is possibly the most redundant discussion I've ever seen on the R
mailing lists.

In the original post:

> 2) It provides no way to deal with dependencies on other packages
> 3) It provides no way to "run" an application provided as an R package

Both completely false statements.

> recently been a growing interest in developing full applications

R was originally designed for interpreted use, with statistics and graphics.
However, GUI, web and other applications are possible.
And it's been around for a while.
(So, not "recently").

Maybe your organization could/should pay a programmer to do it?

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Sat Feb  2 01:54:21 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abs Spurdle)
Date: Sat, 2 Feb 2019 13:54:21 +1300
Subject: [Rd] Runnable R packages
Message-ID: <CAB8pepzfX1od8kb6Ft1aKwDqA-VPKrMdzs6cDUnkpUMrzv__Tw@mail.gmail.com>

Further to my previous post,
it would be possible to create an .exe file, say:

my_r_application.exe

That starts R, loads your R package(s), calls the R function of your choice
and does whatever else you want.

However, I don't think that it would add much value.
But feel free to correct me if you think that I'm wrong.

	[[alternative HTML version deleted]]


From @te|@nML @end|ng |rom co||oc@t|on@@de  Sat Feb  2 10:47:50 2019
From: @te|@nML @end|ng |rom co||oc@t|on@@de (Stefan Evert)
Date: Sat, 2 Feb 2019 10:47:50 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <CAL6gwnJUGZ+r6aD6EnKG=6s8s-WU12tw60eWbOTULhexRFgWYQ@mail.gmail.com>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
 <4e92eee6-a8f2-02bc-5e11-3c27b18e2339@sapo.pt>
 <CAL6gwnJUGZ+r6aD6EnKG=6s8s-WU12tw60eWbOTULhexRFgWYQ@mail.gmail.com>
Message-ID: <772BF803-96C8-4CFF-9D8D-5738D5DE3974@collocations.de>

Also no error on MacOS 10.13.6, R 3.5.1 with system-supplied VecLib BLAS.

> > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> > str(opt)
> List of 6
>  $ par        : num [1:10] 1 1 1 1 1 ...
>  $ objective  : num -41.4
>  $ convergence: int 0
>  $ iterations : int 65
>  $ evaluations: Named int [1:2] 92 773
>   ..- attr(*, "names")= chr [1:2] "function" "gradient"
>  $ message    : chr "relative convergence (4)"
> > xhat <- rep(1, 10)
> > all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
> [1] "Mean relative difference: 3.368798e-06"
> > all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> [1] "Mean relative difference: 1.09683e-11"
> > abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> [1] TRUE


From b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk  Sat Feb  2 14:27:11 2019
From: b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk (Barry Rowlingson)
Date: Sat, 2 Feb 2019 13:27:11 +0000
Subject: [Rd] Runnable R packages
In-Reply-To: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
Message-ID: <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>

I don't think anyone denies that you *could* make an EXE to do all
that. The discussion is on *how easy* it should be to create a single
file that contains an initial "main" function plus a set of bundled
code (potentially as a package) and which when run will install its
package code (which is contained in itself, its not in a repo),
install dependencies, and run the main() function.

Now, I could build a self-executable shar file that bundled a package
together with a script to do all the above. But if there was a "RUN"
command in R, and a convention that a function called "foo::main"
would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
easier to develop and test.

If people think this adds value, then if they want to offer that value
to me as $ or ?, I'd consider writing it if their total value was more
than my cost....

Barry


On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>
> Further to my previous post,
> it would be possible to create an .exe file, say:
>
> my_r_application.exe
>
> That starts R, loads your R package(s), calls the R function of your choice
> and does whatever else you want.
>
> However, I don't think that it would add much value.
> But feel free to correct me if you think that I'm wrong.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Feb  2 15:30:49 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 2 Feb 2019 09:30:49 -0500
Subject: [Rd] Runnable R packages
In-Reply-To: <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
Message-ID: <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>

On 02/02/2019 8:27 a.m., Barry Rowlingson wrote:
> I don't think anyone denies that you *could* make an EXE to do all
> that. The discussion is on *how easy* it should be to create a single
> file that contains an initial "main" function plus a set of bundled
> code (potentially as a package) and which when run will install its
> package code (which is contained in itself, its not in a repo),
> install dependencies, and run the main() function.
> 
> Now, I could build a self-executable shar file that bundled a package
> together with a script to do all the above. But if there was a "RUN"
> command in R, and a convention that a function called "foo::main"
> would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
> easier to develop and test.

I don't believe the "so much easier" argument that this requires a 
change to base R.  If you put that functionality into a package, then 
the only extra effort the user would require is to install that other 
package.  After that, they could run

Rscript -e "yourpackage::run_main('foo_1.1.1.tar.gz')"

as I suggested before.  This is no harder than running

R CMD RUN foo_1.1.1.tar.gz

The advantage of this from R Core's perspective is that you would be 
developing and maintaining "yourpackage", you wouldn't be passing the 
burden on to them.  The advantage from your perspective is that you 
could work with whatever packages you liked.  The "remotes" package has 
almost everything you need so that "yourpackage" could be nearly 
trivial.  You wouldn't need to duplicate it within base R.

Duncan Murdoch

> 
> If people think this adds value, then if they want to offer that value
> to me as $ or ?, I'd consider writing it if their total value was more
> than my cost....
> 
> Barry
> 
> 
> On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>>
>> Further to my previous post,
>> it would be possible to create an .exe file, say:
>>
>> my_r_application.exe
>>
>> That starts R, loads your R package(s), calls the R function of your choice
>> and does whatever else you want.
>>
>> However, I don't think that it would add much value.
>> But feel free to correct me if you think that I'm wrong.
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ||nde|o| @end|ng |rom |eee@org  Sat Feb  2 17:31:29 2019
From: ||nde|o| @end|ng |rom |eee@org (David Lindelof)
Date: Sat, 2 Feb 2019 08:31:29 -0800
Subject: [Rd] Runnable R packages
In-Reply-To: <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
Message-ID: <CAKtMxAGfdd0o3E_dd_vRXR=8cXD7nUaJxV1JK4yazu_Jz+wY5w@mail.gmail.com>

I see some value in Duncan?s proposal to implement this as an extra package
instead of a change to base R, if only to see if the idea has legs. I?m
minded to do so myself using your suggestion, but is there a particular
reason why you recommend using the remotes package instead of devtools? The
latter seems to have the same functions I would need, and I believe it is
more widely installed that remotes?

Kind regards,

From: Duncan Murdoch <murdoch.duncan at gmail.com> <murdoch.duncan at gmail.com>
Reply: Duncan Murdoch <murdoch.duncan at gmail.com> <murdoch.duncan at gmail.com>
Date: 2 February 2019 at 15:37:16
To: Barry Rowlingson <b.rowlingson at lancaster.ac.uk>
<b.rowlingson at lancaster.ac.uk>, Abs Spurdle <spurdle.a at gmail.com>
<spurdle.a at gmail.com>
Cc: r-devel <r-devel at r-project.org> <r-devel at r-project.org>
Subject:  Re: [Rd] Runnable R packages

On 02/02/2019 8:27 a.m., Barry Rowlingson wrote:
> I don't think anyone denies that you *could* make an EXE to do all
> that. The discussion is on *how easy* it should be to create a single
> file that contains an initial "main" function plus a set of bundled
> code (potentially as a package) and which when run will install its
> package code (which is contained in itself, its not in a repo),
> install dependencies, and run the main() function.
>
> Now, I could build a self-executable shar file that bundled a package
> together with a script to do all the above. But if there was a "RUN"
> command in R, and a convention that a function called "foo::main"
> would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
> easier to develop and test.

I don't believe the "so much easier" argument that this requires a
change to base R. If you put that functionality into a package, then
the only extra effort the user would require is to install that other
package. After that, they could run

Rscript -e "yourpackage::run_main('foo_1.1.1.tar.gz')"

as I suggested before. This is no harder than running

R CMD RUN foo_1.1.1.tar.gz

The advantage of this from R Core's perspective is that you would be
developing and maintaining "yourpackage", you wouldn't be passing the
burden on to them. The advantage from your perspective is that you
could work with whatever packages you liked. The "remotes" package has
almost everything you need so that "yourpackage" could be nearly
trivial. You wouldn't need to duplicate it within base R.

Duncan Murdoch

>
> If people think this adds value, then if they want to offer that value
> to me as $ or ?, I'd consider writing it if their total value was more
> than my cost....
>
> Barry
>
>
> On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>>
>> Further to my previous post,
>> it would be possible to create an .exe file, say:
>>
>> my_r_application.exe
>>
>> That starts R, loads your R package(s), calls the R function of your
choice
>> and does whatever else you want.
>>
>> However, I don't think that it would add much value.
>> But feel free to correct me if you think that I'm wrong.
>>
>> [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


David Lindel?f, Ph.D.
+41 (0)79 415 66 41 <//415 66 41> or skype:david.lindelof
http://computersandbuildings.com
Follow me on Twitter:
http://twitter.com/dlindelof

	[[alternative HTML version deleted]]


From |gn@c|o82 @end|ng |rom gm@||@com  Sat Feb  2 17:34:15 2019
From: |gn@c|o82 @end|ng |rom gm@||@com (Ignacio Martinez)
Date: Sat, 2 Feb 2019 11:34:15 -0500
Subject: [Rd] Set the number of threads using openmp with .Fortran?
In-Reply-To: <CAJA1VFy0ub73Wa_rWFv1Vcvthsjp7_AC9OBd=1pMnr+59HSBXQ@mail.gmail.com>
References: <CAJA1VFy0ub73Wa_rWFv1Vcvthsjp7_AC9OBd=1pMnr+59HSBXQ@mail.gmail.com>
Message-ID: <CAJA1VFy4eOz4q=zi8A-p+hTgPcmpq27QL-OACu0r=Cb4hX3Jpw@mail.gmail.com>

I was able to make some progress by using this
<https://github.com/bert9bert/ParallelForest/blob/master/src/Makevars> as a
reference. Now:

*This is my makevars:*
#####  Compiler flags  #####
PKG_FCFLAGS = $(SHLIB_OPENMP_FFLAGS)
PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)

#####  Phony target for R's build system to invoke  #####
all: $(SHLIB)

#####  Clean target  #####
clean:
rm -f *.o *.mod

And when I run my hello world function all the threads are used
regardless of what i specify:

> hello(ncores = 2) Hello from           1
 Hello from           3
 Hello from           0
 Hello from           9
 Hello from           8
 Hello from           2
 Hello from           6
 Hello from          10
 Hello from          11
 Hello from           5
 Hello from           7
 Hello from           4
$ncores
[1] 2



What am I missing? My Fortran subroutine uses !$call
omp_set_num_threads(ncores) to set the number of threads. Why is this
not working? How can I fix it?

Thanks a lot for the help

Ignacio


On Fri, Feb 1, 2019 at 4:51 PM Ignacio Martinez <ignacio82 at gmail.com> wrote:

> Hi everybody,
>
> I'm trying to develop an R package with Fortran and OpenMP. I wrote a
> simple hello world but I'm not able to set the number of threads. I found this
> old email chain
> <http://r.789695.n4.nabble.com/Set-the-number-of-threads-using-openmp-with-C-td2284685.html> and
> I tried to set my compile instructions accordingly but i had no luck.
>
> *This is my makevars:*
>
> PKG_FCFLAGS="-fno-stack-protector"
> F90FLAGS =  "-fopenmp"
> LDFLAGS = "-fopenmp"
>
> *This is my Fortran module:*
>
> module hello_openmp
>    use omp_lib
>    implicit none
>    contains
>
> subroutine hello(ncores) bind(C, name="hello_")
>   use, intrinsic                                         :: iso_c_binding,
> only : c_double, c_int
>   integer(c_int), intent(in)                             :: ncores
>   integer                                                :: iam
>   ! Specify number of threads to use:
>   !$call omp_set_num_threads(ncores)
>   !$omp parallel private(iam)
>   iam=omp_get_thread_num()
>   !$omp critical
>   write(*,*) 'Hello from', iam
>   !$omp end critical
>   !$omp end parallel
> end subroutine hello
>
> end module hello_openmp
>
>
> *and this is my R function:*
>
> #'@export
> #'@useDynLib helloOpenMP, .registration = TRUE
>
> hello <- function(ncores=4) {
>   .Fortran("hello", ncores = as.integer(ncores))
> }
>
>
> *Alas, when I call hello things only run with one thread:*
>
> > hello(ncores = 2)$ncores
>  Hello from           0
> [1] 2
>
>
> Could you point me in the right direction? What am I missing?
>
>
> Thanks,
>
>
> Ignacio
>
>

	[[alternative HTML version deleted]]


From dech@nt @end|ng |rom d@|@c@  Fri Feb  1 21:40:58 2019
From: dech@nt @end|ng |rom d@|@c@ (Oliver Dechant)
Date: Fri, 1 Feb 2019 20:40:58 +0000
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <4e92eee6-a8f2-02bc-5e11-3c27b18e2339@sapo.pt>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <23636.2761.752118.1610@stat.math.ethz.ch>
 <4e92eee6-a8f2-02bc-5e11-3c27b18e2339@sapo.pt>
Message-ID: <ef609d48-48e5-34b8-cf80-746ac318c2b6@dal.ca>

Hello,

> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux 9 (stretch)

Matrix products: default
BLAS/LAPACK:
/opt/intel/compilers_and_libraries_2019.1.144/linux/mkl/lib/intel64_lin/libmkl_rt.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
List of 6
 $ par        : num [1:10] 1 1 1 1 1 ...
 $ objective  : num -41.4
 $ convergence: int 0
 $ iterations : int 67
 $ evaluations: Named int [1:2] 98 850
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
 $ message    : chr "relative convergence (4)"
> xhat <- rep(1, 10)
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
[1] "Mean relative difference: 5.349781e-07"
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
[1] "Mean relative difference: 3.812222e-12"
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
[1] TRUE


On 2019-02-01 4:23 p.m., Rui Barradas wrote:
> Hello,
> 
> R 3.5.2 on ubuntu 18.04. sessionInfo() at the end.
> Works with me, same results, cannot reproduce the error.
> 
> 
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
> 
> xhat <- rep(1, 10)
> all.equal(opt$par,???????? xhat,? tol=0) # good: 5.53 e-7
> #[1] "Mean relative difference: 5.534757e-07"
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
> #[1] "Mean relative difference: 1.816536e-12"
> abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
> #[1] TRUE
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
> 
> sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.1 LTS
> 
> Matrix products: default
> BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1
> 
> locale:
> ?[1] LC_CTYPE=pt_PT.UTF-8?????? LC_NUMERIC=C
> ?[3] LC_TIME=pt_PT.UTF-8??????? LC_COLLATE=pt_PT.UTF-8
> ?[5] LC_MONETARY=pt_PT.UTF-8??? LC_MESSAGES=pt_PT.UTF-8
> ?[7] LC_PAPER=pt_PT.UTF-8?????? LC_NAME=C
> ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> [11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
> 
> loaded via a namespace (and not attached):
> ?[1] Rcpp_1.0.0?????? rstudioapi_0.8?? bindr_0.1.1????? magrittr_1.5
> ?[5] tidyselect_0.2.5 munsell_0.5.0??? colorspace_1.3-2 lattice_0.20-38
> ?[9] R6_2.3.0???????? rlang_0.3.0.1??? stringr_1.3.1??? plyr_1.8.4
> [13] dplyr_0.7.8????? tools_3.5.2????? grid_3.5.2?????? yaml_2.2.0
> [17] assertthat_0.2.0 tibble_1.4.2???? crayon_1.3.4???? bindrcpp_0.2.2
> [21] purrr_0.2.5????? reshape2_1.4.3?? glue_1.3.0?????? stringi_1.2.4
> [25] compiler_3.5.2?? pillar_1.3.1???? scales_1.0.0???? lubridate_1.7.4
> [29] pkgconfig_2.0.2? zoo_1.8-4
> 
> 
> 
> 
> ?s 09:00 de 01/02/2019, Martin Maechler escreveu:
>>>>>>> Kasper Kristensen via R-devel
>>>>>>> ???? on Mon, 28 Jan 2019 08:56:39 +0000 writes:
>>
>> ???? > I've noticed unstable behavior of nlminb on some Linux
>> ???? > systems. The problem can be reproduced by compiling
>> ???? > R-3.5.2 using gcc-8.2 and running the following snippet:
>>
>> ???? > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>> ???? > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>> ???? > xhat <- rep(1, 10)
>> ???? > abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
>>
>> ???? > The example works perfectly when removing the bounds. However,
>> when bounds are added the snippet returns 'FALSE'.
>>
>> ???? > An older R version (3.4.4), compiled using the same gcc-8.2,
>> did not have the problem. Between the two versions R has changed the
>> flags to compile Fortran sources:
>>
>> ???? > < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
>> ???? > ---
>> ???? >> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
>>
>> ???? > Reverting to the old SAFE_FFLAGS 'solves' the problem.
>>
>> ???? >> sessionInfo()
>> ???? > R version 3.5.2 (2018-12-20)
>> ???? > Platform: x86_64-pc-linux-gnu (64-bit)
>> ???? > Running under: Scientific Linux release 6.4 (Carbon)
>>
>> ???? > Matrix products: default
>> ???? > BLAS/LAPACK:
>> /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
>>
>>
>> ???? > locale:
>> ???? > [1] C
>>
>> ???? > attached base packages:
>> ???? > [1] stats???? graphics? grDevices utils???? datasets? methods??
>> base
>>
>> ???? > loaded via a namespace (and not attached):
>> ???? > [1] compiler_3.5.2
>>
>> So you us Intel's MKL library for BLAS/LAPACK ..
>>
>> I also use gcc 8.2 (on Fedora 28 Linux) and R's own BLAS/LAPACK
>> and don't see such problems:
>>
>> The code
>>
>> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>> str(opt)
>> xhat <- rep(1, 10)
>> all.equal(opt$par,???????? xhat,? tol=0) # good: 5.53 e-7
>> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
>> abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
>>
>> gives
>>
>>> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>>> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>>> str(opt)
>> List of 6
>> ? $ par??????? : num [1:10] 1 1 1 1 1 ...
>> ? $ objective? : num -41.4
>> ? $ convergence: int 0
>> ? $ iterations : int 66
>> ? $ evaluations: Named int [1:2] 96 830
>> ?? ..- attr(*, "names")= chr [1:2] "function" "gradient"
>> ? $ message??? : chr "relative convergence (4)"
>>> xhat <- rep(1, 10)
>>> all.equal(opt$par,???????? xhat,? tol=0) # good: 5.53 e-7
>> [1] "Mean relative difference: 5.534757e-07"
>>> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
>> [1] "Mean relative difference: 1.816536e-12"
>>> abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
>> [1] TRUE
>>>
>>
>> for me. Maybe others can quickly run the above? 7 lines and report ?
>>
>> Maybe there's something else unusual with your Linux
>> distribution's libraries?
>>
>> I'm not an expert on these compiler flags; have you seen what
>> the R-admin manual
>> ???? https://cran.r-project.org/doc/manuals/R-admin.html#Linux
>> says about them?
>>
>> Best,
>> Martin
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From bbo|ker @end|ng |rom gm@||@com  Sat Feb  2 17:56:43 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 2 Feb 2019 11:56:43 -0500
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAGfdd0o3E_dd_vRXR=8cXD7nUaJxV1JK4yazu_Jz+wY5w@mail.gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
 <CAKtMxAGfdd0o3E_dd_vRXR=8cXD7nUaJxV1JK4yazu_Jz+wY5w@mail.gmail.com>
Message-ID: <fe44ef30-5d7d-8042-1a4e-d2b3e0d3422f@gmail.com>


  remotes has fewer dependencies.  I believe that the current version of
devtools just re-exports install_github etc. from the remotes package.

On 2019-02-02 11:31 a.m., David Lindelof wrote:
> I see some value in Duncan?s proposal to implement this as an extra package
> instead of a change to base R, if only to see if the idea has legs. I?m
> minded to do so myself using your suggestion, but is there a particular
> reason why you recommend using the remotes package instead of devtools? The
> latter seems to have the same functions I would need, and I believe it is
> more widely installed that remotes?
> 
> Kind regards,
> 
> From: Duncan Murdoch <murdoch.duncan at gmail.com> <murdoch.duncan at gmail.com>
> Reply: Duncan Murdoch <murdoch.duncan at gmail.com> <murdoch.duncan at gmail.com>
> Date: 2 February 2019 at 15:37:16
> To: Barry Rowlingson <b.rowlingson at lancaster.ac.uk>
> <b.rowlingson at lancaster.ac.uk>, Abs Spurdle <spurdle.a at gmail.com>
> <spurdle.a at gmail.com>
> Cc: r-devel <r-devel at r-project.org> <r-devel at r-project.org>
> Subject:  Re: [Rd] Runnable R packages
> 
> On 02/02/2019 8:27 a.m., Barry Rowlingson wrote:
>> I don't think anyone denies that you *could* make an EXE to do all
>> that. The discussion is on *how easy* it should be to create a single
>> file that contains an initial "main" function plus a set of bundled
>> code (potentially as a package) and which when run will install its
>> package code (which is contained in itself, its not in a repo),
>> install dependencies, and run the main() function.
>>
>> Now, I could build a self-executable shar file that bundled a package
>> together with a script to do all the above. But if there was a "RUN"
>> command in R, and a convention that a function called "foo::main"
>> would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
>> easier to develop and test.
> 
> I don't believe the "so much easier" argument that this requires a
> change to base R. If you put that functionality into a package, then
> the only extra effort the user would require is to install that other
> package. After that, they could run
> 
> Rscript -e "yourpackage::run_main('foo_1.1.1.tar.gz')"
> 
> as I suggested before. This is no harder than running
> 
> R CMD RUN foo_1.1.1.tar.gz
> 
> The advantage of this from R Core's perspective is that you would be
> developing and maintaining "yourpackage", you wouldn't be passing the
> burden on to them. The advantage from your perspective is that you
> could work with whatever packages you liked. The "remotes" package has
> almost everything you need so that "yourpackage" could be nearly
> trivial. You wouldn't need to duplicate it within base R.
> 
> Duncan Murdoch
> 
>>
>> If people think this adds value, then if they want to offer that value
>> to me as $ or ?, I'd consider writing it if their total value was more
>> than my cost....
>>
>> Barry
>>
>>
>> On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>>>
>>> Further to my previous post,
>>> it would be possible to create an .exe file, say:
>>>
>>> my_r_application.exe
>>>
>>> That starts R, loads your R package(s), calls the R function of your
> choice
>>> and does whatever else you want.
>>>
>>> However, I don't think that it would add much value.
>>> But feel free to correct me if you think that I'm wrong.
>>>
>>> [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> David Lindel?f, Ph.D.
> +41 (0)79 415 66 41 <//415 66 41> or skype:david.lindelof
> http://computersandbuildings.com
> Follow me on Twitter:
> http://twitter.com/dlindelof
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wdun|@p @end|ng |rom t|bco@com  Sat Feb  2 18:18:00 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Sat, 2 Feb 2019 09:18:00 -0800
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
Message-ID: <CAF8bMcYgwNgE=S063_dhjqt54Sa+UnBh6u0hWtkwoMcHNWOKhQ@mail.gmail.com>

Microsoft R Open 3.4.2
The enhanced R distribution from Microsoft
Microsoft packages Copyright (C) 2017 Microsoft Corporation

Using the Intel MKL for parallel mathematical computing (using 12 cores).

Default CRAN mirror snapshot taken on 2017-10-15.
See: https://mran.microsoft.com/.

> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> xhat <- rep(1, 10)
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
[1] FALSE
> opt$objective - f(xhat)
[1] 3.696533
> str(opt)
List of 6
 $ par        : num [1:10] 0.797 0.303 0.285 0.271 0.258 ...
 $ objective  : num -37.7
 $ convergence: int 1
 $ iterations : int 150
 $ evaluations: Named int [1:2] 155 1611
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
 $ message    : chr "iteration limit reached without convergence (10)"

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Tue, Jan 29, 2019 at 3:59 AM Kasper Kristensen via R-devel <
r-devel at r-project.org> wrote:

> I've noticed unstable behavior of nlminb on some Linux systems. The
> problem can be reproduced by compiling R-3.5.2 using gcc-8.2 and running
> the following snippet:
>
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> xhat <- rep(1, 10)
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
>
> The example works perfectly when removing the bounds. However, when bounds
> are added the snippet returns 'FALSE'.
>
> An older R version (3.4.4), compiled using the same gcc-8.2, did not have
> the problem. Between the two versions R has changed the flags to compile
> Fortran sources:
>
> < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
> ---
> > SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
>
> Reverting to the old SAFE_FFLAGS 'solves' the problem.
>
> > sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Scientific Linux release 6.4 (Carbon)
>
> Matrix products: default
> BLAS/LAPACK:
> /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
>
> locale:
> [1] C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.5.2
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Sat Feb  2 22:28:44 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abs Spurdle)
Date: Sun, 3 Feb 2019 10:28:44 +1300
Subject: [Rd] Runnable R packages
In-Reply-To: <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
Message-ID: <CAB8pepwO_PW+2N2ZS=iUWUBPxOSkoyEnPaVB7ZTgh_re5VJfWA@mail.gmail.com>

Creating an .exe file isn't necessarily difficult.
The main problems are that you have to write and compile the C (or other)
files.
Otherwise, the complexity depends on the level of Inter Process
Communication that's required.

Simply starting R with some initial conditions, is easy.
Even if you want to prompt the user to install missing packages, it isn't
necessarily difficult.

It would be possible to take this one step further, and write an .exe
builder, that automates the process of creating .exe files.
Obviously, it would require a compiler and supporting libraries.
I have a preference for GCC, and I'm not sure if you can run GCC on Windows
without Cygwin.

I may (or may not) look into this further, in a few weeks time.


On Sun, Feb 3, 2019 at 2:27 AM Barry Rowlingson <
b.rowlingson at lancaster.ac.uk> wrote:

> I don't think anyone denies that you *could* make an EXE to do all
> that. The discussion is on *how easy* it should be to create a single
> file that contains an initial "main" function plus a set of bundled
> code (potentially as a package) and which when run will install its
> package code (which is contained in itself, its not in a repo),
> install dependencies, and run the main() function.
>
> Now, I could build a self-executable shar file that bundled a package
> together with a script to do all the above. But if there was a "RUN"
> command in R, and a convention that a function called "foo::main"
> would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
> easier to develop and test.
>
> If people think this adds value, then if they want to offer that value
> to me as $ or ?, I'd consider writing it if their total value was more
> than my cost....
>
> Barry
>


___________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |gn@c|o82 @end|ng |rom gm@||@com  Sat Feb  2 23:14:46 2019
From: |gn@c|o82 @end|ng |rom gm@||@com (Ignacio Martinez)
Date: Sat, 2 Feb 2019 17:14:46 -0500
Subject: [Rd] Set the number of threads using openmp with .Fortran?
In-Reply-To: <CAJA1VFy4eOz4q=zi8A-p+hTgPcmpq27QL-OACu0r=Cb4hX3Jpw@mail.gmail.com>
References: <CAJA1VFy0ub73Wa_rWFv1Vcvthsjp7_AC9OBd=1pMnr+59HSBXQ@mail.gmail.com>
 <CAJA1VFy4eOz4q=zi8A-p+hTgPcmpq27QL-OACu0r=Cb4hX3Jpw@mail.gmail.com>
Message-ID: <CAJA1VFyubjLC0JYdB1g3c0t7ZLmPv-a1_KWguqz68-mknfc5fg@mail.gmail.com>

I got this to work on Linux but it is not working on Windows. *My
understanding is that this should also work on windows, is that correct?*
If so, what should I do? differently?

To get it to work on Linux, I modified my R script as follows:

#' OpenMP Hello World
#'
#' @param nthreads The number of threads that you want to use
#' @example
#' hello(nthreads=2)
#' @export
#' @useDynLib helloOpenMP, .registration = TRUE

hello <- function(nthreads=4) {
   (OpenMPController::omp_set_num_threads(nthreads))
  .Fortran("hello")
  return('Each thread will say hi to you!')
}

> hello(nthreads = 2) Hello from           0
 Hello from           1
[1] "Each thread will say hi to you!"



Alas, on Windows the same command just returns "Each thread will say hi to
you!" without the Hello from X

Thanks for your help,

Ignacio





On Sat, Feb 2, 2019 at 11:34 AM Ignacio Martinez <ignacio82 at gmail.com>
wrote:

>
>
> I was able to make some progress by using this
> <https://github.com/bert9bert/ParallelForest/blob/master/src/Makevars> as
> a reference. Now:
>
> *This is my makevars:*
> #####  Compiler flags  #####
> PKG_FCFLAGS = $(SHLIB_OPENMP_FFLAGS)
> PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)
>
> #####  Phony target for R's build system to invoke  #####
> all: $(SHLIB)
>
> #####  Clean target  #####
> clean:
> rm -f *.o *.mod
>
> And when I run my hello world function all the threads are used
> regardless of what i specify:
>
> > hello(ncores = 2) Hello from           1
>  Hello from           3
>  Hello from           0
>  Hello from           9
>  Hello from           8
>  Hello from           2
>  Hello from           6
>  Hello from          10
>  Hello from          11
>  Hello from           5
>  Hello from           7
>  Hello from           4
> $ncores
> [1] 2
>
>
>
> What am I missing? My Fortran subroutine uses !$call
> omp_set_num_threads(ncores) to set the number of threads. Why is this
> not working? How can I fix it?
>
> Thanks a lot for the help
>
> Ignacio
>
>
> On Fri, Feb 1, 2019 at 4:51 PM Ignacio Martinez <ignacio82 at gmail.com>
> wrote:
>
>> Hi everybody,
>>
>> I'm trying to develop an R package with Fortran and OpenMP. I wrote a
>> simple hello world but I'm not able to set the number of threads. I found this
>> old email chain
>> <http://r.789695.n4.nabble.com/Set-the-number-of-threads-using-openmp-with-C-td2284685.html> and
>> I tried to set my compile instructions accordingly but i had no luck.
>>
>> *This is my makevars:*
>>
>> PKG_FCFLAGS="-fno-stack-protector"
>> F90FLAGS =  "-fopenmp"
>> LDFLAGS = "-fopenmp"
>>
>> *This is my Fortran module:*
>>
>> module hello_openmp
>>    use omp_lib
>>    implicit none
>>    contains
>>
>> subroutine hello(ncores) bind(C, name="hello_")
>>   use, intrinsic                                         ::
>> iso_c_binding, only : c_double, c_int
>>   integer(c_int), intent(in)                             :: ncores
>>   integer                                                :: iam
>>   ! Specify number of threads to use:
>>   !$call omp_set_num_threads(ncores)
>>   !$omp parallel private(iam)
>>   iam=omp_get_thread_num()
>>   !$omp critical
>>   write(*,*) 'Hello from', iam
>>   !$omp end critical
>>   !$omp end parallel
>> end subroutine hello
>>
>> end module hello_openmp
>>
>>
>> *and this is my R function:*
>>
>> #'@export
>> #'@useDynLib helloOpenMP, .registration = TRUE
>>
>> hello <- function(ncores=4) {
>>   .Fortran("hello", ncores = as.integer(ncores))
>> }
>>
>>
>> *Alas, when I call hello things only run with one thread:*
>>
>> > hello(ncores = 2)$ncores
>>  Hello from           0
>> [1] 2
>>
>>
>> Could you point me in the right direction? What am I missing?
>>
>>
>> Thanks,
>>
>>
>> Ignacio
>>
>>

	[[alternative HTML version deleted]]


From r@d|ord @end|ng |rom c@@toronto@edu  Sun Feb  3 18:04:55 2019
From: r@d|ord @end|ng |rom c@@toronto@edu (Radford Neal)
Date: Sun, 3 Feb 2019 12:04:55 -0500
Subject: [Rd] Inefficiency in df$col
Message-ID: <20190203170455.GA20577@mail.cs.toronto.edu>

While doing some performance testing with the new version of pqR (see
pqR-project.org), I've encountered an extreme, and quite unnecessary,
inefficiency in the current R Core implementation of R, which I think
you might want to correct.

The inefficiency is in access to columns of a data frame, as in
expressions such as df$col[i], which I think are very common (the
alternatives of df[i,"col"] and df[["col"]][i] are, I think, less
common).

Here is the setup for an example showing the issue:

  L <- list (abc=1:9, xyz=11:19)
  Lc <- L; class(Lc) <- "glub"
  df <- data.frame(L)

And here are some times for R-3.5.2 (r-devel of 2019-02-01 is much
the same):

  > system.time (for (i in 1:1000000) r <- L$xyz)
     user  system elapsed 
    0.086   0.004   0.089 
  > system.time (for (i in 1:1000000) r <- Lc$xyz)
     user  system elapsed 
    0.494   0.000   0.495 
  > system.time (for (i in 1:1000000) r <- df$xyz)
     user  system elapsed 
    3.425   0.000   3.426 

So accessing a column of a data frame is 38 times slower than
accessing a list element (which is what happens in the underlying
implementation of a data frame), and 7 times slower than accessing an
element of a list with a class attribute (for which it's necessary to
check whether there is a $.glub method, which there isn't here).

For comparison, here are the times for pqR-2019-01-25:

  > system.time (for (i in 1:1000000) r <- L$xyz)
     user  system elapsed 
    0.057   0.000   0.058 
  > system.time (for (i in 1:1000000) r <- Lc$xyz)
     user  system elapsed 
    0.251   0.000   0.251 
  > system.time (for (i in 1:1000000) r <- df$xyz)
     user  system elapsed 
    0.247   0.000   0.247 

So when accessing df$xyz, R-3.5.2 is 14 times slower than pqR-2019-01-25.
(For a partial match, like df$xy, R-3.5.2 is 34 times slower.)

I wasn't surprised that pqR was faster, but I didn't expect this big a
difference.  Then I remembered having seen a NEWS item from R-3.1.0:

  * Partial matching when using the $ operator _on data frames_ now
    throws a warning and may become defunct in the future. If partial
    matching is intended, replace foo$bar by foo[["bar", exact =
    FALSE]].

and having looked at the code then:

  `$.data.frame` <- function(x,name) {
    a <- x[[name]]
    if (!is.null(a)) return(a)
  
    a <- x[[name, exact=FALSE]]
    if (!is.null(a)) warning("Name partially matched in data frame")
    return(a)
  }

I recall thinking at the time that this involved a pretty big
performance hit, compared to letting the primitive $ operator do it,
just to produce a warning.  But it wasn't until now that I noticed
this NEWS in R-3.1.1:

  * The warning when using partial matching with the $ operator on
    data frames is now only given when
    options("warnPartialMatchDollar") is TRUE.

for which the code was changed to:

  `$.data.frame` <- function(x,name) {
    a <- x[[name]]
    if (!is.null(a)) return(a)
  
    a <- x[[name, exact=FALSE]]
    if (!is.null(a) && getOption("warnPartialMatchDollar", default=FALSE)) {
          names <- names(x)
          warning(gettextf("Partial match of '%s' to '%s' in data frame",
                                     name, names[pmatch(name, names)]))
    }
    return(a)
  }

One can see the effect now when warnPartialMatchDollar is enabled:

  > options(warnPartialMatchDollar=TRUE)
  > Lc$xy
  [1] 11 12 13 14 15 16 17 18 19
  Warning message:
  In Lc$xy : partial match of 'xy' to 'xyz'
  > df$xy
  [1] 11 12 13 14 15 16 17 18 19
  Warning message:
  In `$.data.frame`(df, xy) : Partial match of 'xy' to 'xyz' in data frame

So the only thing that slowing down acesses like df$xyz by a factor of
seven achieves now is to add the words "in data frame" to the warning
message (while making the earlier part of the message less intelligible).

I think you might want to just delete the definition of $.data.frame,
reverting to the situation before R-3.1.0.

   Radford Neal


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  4 02:41:16 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 3 Feb 2019 20:41:16 -0500
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <20190203170455.GA20577@mail.cs.toronto.edu>
References: <20190203170455.GA20577@mail.cs.toronto.edu>
Message-ID: <1d7dec95-dd84-b6e6-799f-23e5a29eb55e@gmail.com>

On 03/02/2019 12:04 p.m., Radford Neal wrote:
> While doing some performance testing with the new version of pqR (see
> pqR-project.org), I've encountered an extreme, and quite unnecessary,
> inefficiency in the current R Core implementation of R, which I think
> you might want to correct.
> 
> The inefficiency is in access to columns of a data frame, as in
> expressions such as df$col[i], which I think are very common (the
> alternatives of df[i,"col"] and df[["col"]][i] are, I think, less
> common).
> 
> Here is the setup for an example showing the issue:
> 
>    L <- list (abc=1:9, xyz=11:19)
>    Lc <- L; class(Lc) <- "glub"
>    df <- data.frame(L)
> 
> And here are some times for R-3.5.2 (r-devel of 2019-02-01 is much
> the same):
> 
>    > system.time (for (i in 1:1000000) r <- L$xyz)
>       user  system elapsed
>      0.086   0.004   0.089
>    > system.time (for (i in 1:1000000) r <- Lc$xyz)
>       user  system elapsed
>      0.494   0.000   0.495
>    > system.time (for (i in 1:1000000) r <- df$xyz)
>       user  system elapsed
>      3.425   0.000   3.426
> 
> So accessing a column of a data frame is 38 times slower than
> accessing a list element (which is what happens in the underlying
> implementation of a data frame), and 7 times slower than accessing an
> element of a list with a class attribute (for which it's necessary to
> check whether there is a $.glub method, which there isn't here).
> 
> For comparison, here are the times for pqR-2019-01-25:
> 
>    > system.time (for (i in 1:1000000) r <- L$xyz)
>       user  system elapsed
>      0.057   0.000   0.058
>    > system.time (for (i in 1:1000000) r <- Lc$xyz)
>       user  system elapsed
>      0.251   0.000   0.251
>    > system.time (for (i in 1:1000000) r <- df$xyz)
>       user  system elapsed
>      0.247   0.000   0.247
> 
> So when accessing df$xyz, R-3.5.2 is 14 times slower than pqR-2019-01-25.
> (For a partial match, like df$xy, R-3.5.2 is 34 times slower.)
> 
> I wasn't surprised that pqR was faster, but I didn't expect this big a
> difference.  Then I remembered having seen a NEWS item from R-3.1.0:
> 
>    * Partial matching when using the $ operator _on data frames_ now
>      throws a warning and may become defunct in the future. If partial
>      matching is intended, replace foo$bar by foo[["bar", exact =
>      FALSE]].
> 
> and having looked at the code then:
> 
>    `$.data.frame` <- function(x,name) {
>      a <- x[[name]]
>      if (!is.null(a)) return(a)
>    
>      a <- x[[name, exact=FALSE]]
>      if (!is.null(a)) warning("Name partially matched in data frame")
>      return(a)
>    }
> 
> I recall thinking at the time that this involved a pretty big
> performance hit, compared to letting the primitive $ operator do it,
> just to produce a warning.  But it wasn't until now that I noticed
> this NEWS in R-3.1.1:
> 
>    * The warning when using partial matching with the $ operator on
>      data frames is now only given when
>      options("warnPartialMatchDollar") is TRUE.
> 
> for which the code was changed to:
> 
>    `$.data.frame` <- function(x,name) {
>      a <- x[[name]]
>      if (!is.null(a)) return(a)
>    
>      a <- x[[name, exact=FALSE]]
>      if (!is.null(a) && getOption("warnPartialMatchDollar", default=FALSE)) {
>            names <- names(x)
>            warning(gettextf("Partial match of '%s' to '%s' in data frame",
>                                       name, names[pmatch(name, names)]))
>      }
>      return(a)
>    }
> 
> One can see the effect now when warnPartialMatchDollar is enabled:
> 
>    > options(warnPartialMatchDollar=TRUE)
>    > Lc$xy
>    [1] 11 12 13 14 15 16 17 18 19
>    Warning message:
>    In Lc$xy : partial match of 'xy' to 'xyz'
>    > df$xy
>    [1] 11 12 13 14 15 16 17 18 19
>    Warning message:
>    In `$.data.frame`(df, xy) : Partial match of 'xy' to 'xyz' in data frame
> 
> So the only thing that slowing down acesses like df$xyz by a factor of
> seven achieves now is to add the words "in data frame" to the warning
> message (while making the earlier part of the message less intelligible).
> 
> I think you might want to just delete the definition of $.data.frame,
> reverting to the situation before R-3.1.0.

I imagine the cause is that the list version is done in C code rather 
than R code (i.e. there's no R function `$.list`).  So an alternative 
solution would be to also implement `$.data.frame` in the underlying C 
code.  This won't be quite as fast (it needs that test for NULL), but 
should be close in the full match case.

Duncan Murdoch


From r@d|ord @end|ng |rom c@@toronto@edu  Mon Feb  4 15:20:13 2019
From: r@d|ord @end|ng |rom c@@toronto@edu (Radford Neal)
Date: Mon, 4 Feb 2019 09:20:13 -0500
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
References: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
Message-ID: <20190204142013.GA10151@mail.cs.toronto.edu>

> > I think you might want to just delete the definition of $.data.frame,
> > reverting to the situation before R-3.1.0.
> 
> I imagine the cause is that the list version is done in C code rather 
> than R code (i.e. there's no R function `$.list`).  So an alternative 
> solution would be to also implement `$.data.frame` in the underlying C 
> code.  This won't be quite as fast (it needs that test for NULL), but 
> should be close in the full match case.

I maybe wasn't completely clear.  The $ operator for data frames was
previously done in C - since it was done by the same primitive as for
lists.  In R-3.1.0, this was changed - producing a massive slowdown -
for the purpose of giving a warning on partial matches even if the
user had not set the warnPartialMatchDollar option to TRUE.  In
R-3.1.1, this was changed to not warn unless warnPartialMatchDollar was
TRUE which was the PREVIOUS behaviour.  In other words, this change
reverted the change made in R-3.1.0.  But instead of simply deleting
the definition of $.data.frame, R-3.1.1 added extra code to it, the
only effect of which is to slightly change the wording of the warning
message from what is produced for any other list, while still retaining
the massive slowdown.

There is no need for you to write $.data.frame in C.  You just need
to delete the version written in R.

   Radford Neal


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  4 15:32:11 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 4 Feb 2019 09:32:11 -0500
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <20190204142013.GA10151@mail.cs.toronto.edu>
References: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
 <20190204142013.GA10151@mail.cs.toronto.edu>
Message-ID: <881488b4-7225-1f0b-bde5-9ceed235533d@gmail.com>

On 04/02/2019 9:20 a.m., Radford Neal wrote:
>>> I think you might want to just delete the definition of $.data.frame,
>>> reverting to the situation before R-3.1.0.
>>
>> I imagine the cause is that the list version is done in C code rather
>> than R code (i.e. there's no R function `$.list`).  So an alternative
>> solution would be to also implement `$.data.frame` in the underlying C
>> code.  This won't be quite as fast (it needs that test for NULL), but
>> should be close in the full match case.
> 
> I maybe wasn't completely clear.  The $ operator for data frames was
> previously done in C - since it was done by the same primitive as for
> lists.  In R-3.1.0, this was changed - producing a massive slowdown -
> for the purpose of giving a warning on partial matches even if the
> user had not set the warnPartialMatchDollar option to TRUE.  In
> R-3.1.1, this was changed to not warn unless warnPartialMatchDollar was
> TRUE which was the PREVIOUS behaviour.  In other words, this change
> reverted the change made in R-3.1.0.  But instead of simply deleting
> the definition of $.data.frame, R-3.1.1 added extra code to it, the
> only effect of which is to slightly change the wording of the warning
> message from what is produced for any other list, while still retaining
> the massive slowdown.
> 
> There is no need for you to write $.data.frame in C.  You just need
> to delete the version written in R.

Sorry, I did misunderstand.  Thanks for the clarification.

But if the "You" in your last sentence meant me, it needs to be "They": 
I am not a member of R Core and can't make any changes to the sources.

Duncan Murdoch


From br@dbe|| @end|ng |rom @e@net@com  Mon Feb  4 15:21:18 2019
From: br@dbe|| @end|ng |rom @e@net@com (Brad Bell)
Date: Mon, 4 Feb 2019 07:21:18 -0700
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <23636.2761.752118.1610@stat.math.ethz.ch>
References: <23636.2761.752118.1610@stat.math.ethz.ch>
Message-ID: <7389c349-d3e9-d421-6907-f130149f138b@seanet.com>

I get the failure message. To be specific:

adcomp.git>R CMD BATCH --quiet test_nlminb.R
adcomp.git>cat test_nlminb.Rout
 > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
 > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
 > xhat <- rep(1, 10)
 > abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
[1] FALSE

My system is described by:
adcomp.git>uname -a
Linux localhost.localdomain 4.17.7-200.fc28.x86_64 #1 SMP Tue Jul 17 16:28:31 UTC 2018 x86_64 x86_64 
x86_64 GNU/Linux

My version of R is described by:
Source?????? : R-3.5.2-2.fc28.src.rpm

I have tried passing in the gradient and turning on the trace and it gives nearly the exact same 
trace with and without the gradient.
Here is the output of a very similar case with the gradient:

 > n??? <- 10
 > f??? <- function(x) {
+?????? result <- 0.0
+?????? for( i in 2 : n ) {
+?????????????? result <- result + log( (x[i] - x[i-1])^2 + 0.01 ) + (x[1] - 1.0)^2
+?????? }
+?????? result
+ }
 > g??? <- function(x) {
+?????? result <- rep(0.0, n)
+?????? for( i in 2 : n ) {
+?????????????? result[1]?? <- result[1] + 2.0 * (x[1] - 1.0)
+?????????????? log_arg???? <- ( x[i] - x[i-1] )^2 + 0.01
+?????????????? log_arg_i?? <- 2.0 * (x[i] - x[i-1])
+?????????????? result[i]?? <- result[i]?? + log_arg_i / log_arg
+?????????????? result[i-1] <- result[i-1] - log_arg_i / log_arg
+?????? }
+?????? result
+ }
 > xstart <- rep(0.0, n)
 > opt??? <- nlminb(
+?????? xstart,
+?????? objective=f ,
+?????? gradient=g,
+?????? lower=-3,
+?????? upper=3,
+?????? control=list(trace=1)
+ )
 ? 0:??? -32.446532:? 0.00000? 0.00000? 0.00000? 0.00000? 0.00000 0.00000? 0.00000? 0.00000? 
0.00000? 0.00000
... snip ...
150:??? -37.750217: 0.796764 0.303221 0.285377 0.271175 0.257584 0.248540 0.239230 0.234184 0.229395 
0.227872
 > opt$par
 ?[1] 0.7967636 0.3032208 0.2853775 0.2711747 0.2575838 0.2485403 0.2392304
 ?[8] 0.2341841 0.2293946 0.2278722
 > g(opt$par)
 ?[1]? 0.23427575 -0.43398577 -0.67415314 -0.11550223 -0.87486481 0.05194325
 ?[7] -0.83926642 -0.05100054 -0.65128392 -0.30441806
 >


From pd@|gd @end|ng |rom gm@||@com  Mon Feb  4 16:48:12 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 4 Feb 2019 16:48:12 +0100
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <881488b4-7225-1f0b-bde5-9ceed235533d@gmail.com>
References: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
 <20190204142013.GA10151@mail.cs.toronto.edu>
 <881488b4-7225-1f0b-bde5-9ceed235533d@gmail.com>
Message-ID: <45CEFFBB-DE6E-4CEC-A98E-F23E5427A4A8@gmail.com>

Does either of you have a patch against current R-devel? 

I tried the obvious, but the build dies with

building package 'tools'
all.R is unchanged
../../../../library/tools/libs/x86_64/tools.so is unchanged
installing 'sysdata.rda'
Error in get(method, envir = home) : object '$.data.frame' not found
Error: unable to load R code in package 'tools'
Execution halted

...and I can't really be arsed to dig into tools to see exactly where it is hardcoding the existence of $.data.frame.

-pd

> On 4 Feb 2019, at 15:32 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 04/02/2019 9:20 a.m., Radford Neal wrote:
>>>> I think you might want to just delete the definition of $.data.frame,
>>>> reverting to the situation before R-3.1.0.
>>> 
>>> I imagine the cause is that the list version is done in C code rather
>>> than R code (i.e. there's no R function `$.list`).  So an alternative
>>> solution would be to also implement `$.data.frame` in the underlying C
>>> code.  This won't be quite as fast (it needs that test for NULL), but
>>> should be close in the full match case.
>> I maybe wasn't completely clear.  The $ operator for data frames was
>> previously done in C - since it was done by the same primitive as for
>> lists.  In R-3.1.0, this was changed - producing a massive slowdown -
>> for the purpose of giving a warning on partial matches even if the
>> user had not set the warnPartialMatchDollar option to TRUE.  In
>> R-3.1.1, this was changed to not warn unless warnPartialMatchDollar was
>> TRUE which was the PREVIOUS behaviour.  In other words, this change
>> reverted the change made in R-3.1.0.  But instead of simply deleting
>> the definition of $.data.frame, R-3.1.1 added extra code to it, the
>> only effect of which is to slightly change the wording of the warning
>> message from what is produced for any other list, while still retaining
>> the massive slowdown.
>> There is no need for you to write $.data.frame in C.  You just need
>> to delete the version written in R.
> 
> Sorry, I did misunderstand.  Thanks for the clarification.
> 
> But if the "You" in your last sentence meant me, it needs to be "They": I am not a member of R Core and can't make any changes to the sources.
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Feb  4 17:34:34 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 4 Feb 2019 17:34:34 +0100
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <45CEFFBB-DE6E-4CEC-A98E-F23E5427A4A8@gmail.com>
References: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
 <20190204142013.GA10151@mail.cs.toronto.edu>
 <881488b4-7225-1f0b-bde5-9ceed235533d@gmail.com>
 <45CEFFBB-DE6E-4CEC-A98E-F23E5427A4A8@gmail.com>
Message-ID: <23640.27034.714960.445873@stat.math.ethz.ch>

>>>>> peter dalgaard 
>>>>>     on Mon, 4 Feb 2019 16:48:12 +0100 writes:

    > Does either of you have a patch against current R-devel? 
    > I tried the obvious, but the build dies with

    > building package 'tools'
    > all.R is unchanged
    > ../../../../library/tools/libs/x86_64/tools.so is unchanged
    > installing 'sysdata.rda'
    > Error in get(method, envir = home) : object '$.data.frame' not found
    > Error: unable to load R code in package 'tools'
    > Execution halted

    > ...and I can't really be arsed to dig into tools to see exactly where it is hardcoding the existence of $.data.frame.

    > -pd

Well, we two have been working "in parallel"...

I've just sent an e-mail to R-core about this:

It's really  file.size() which does need a 'data.frame' method for `$`
because it is basically a wrapper  file.info(..)$size  and
file.info(..) does return a data frame.

I've been suggesting the byte compiler's optimizations here to be
the problem ...

    >> On 4 Feb 2019, at 15:32 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
    >> 
    >> On 04/02/2019 9:20 a.m., Radford Neal wrote:
    >>>>> I think you might want to just delete the definition of $.data.frame,
    >>>>> reverting to the situation before R-3.1.0.
    >>>> 
    >>>> I imagine the cause is that the list version is done in C code rather
    >>>> than R code (i.e. there's no R function `$.list`).  So an alternative
    >>>> solution would be to also implement `$.data.frame` in the underlying C
    >>>> code.  This won't be quite as fast (it needs that test for NULL), but
    >>>> should be close in the full match case.
    >>> I maybe wasn't completely clear.  The $ operator for data frames was
    >>> previously done in C - since it was done by the same primitive as for
    >>> lists.  In R-3.1.0, this was changed - producing a massive slowdown -
    >>> for the purpose of giving a warning on partial matches even if the
    >>> user had not set the warnPartialMatchDollar option to TRUE.  In
    >>> R-3.1.1, this was changed to not warn unless warnPartialMatchDollar was
    >>> TRUE which was the PREVIOUS behaviour.  In other words, this change
    >>> reverted the change made in R-3.1.0.  But instead of simply deleting
    >>> the definition of $.data.frame, R-3.1.1 added extra code to it, the
    >>> only effect of which is to slightly change the wording of the warning
    >>> message from what is produced for any other list, while still retaining
    >>> the massive slowdown.
    >>> There is no need for you to write $.data.frame in C.  You just need
    >>> to delete the version written in R.
    >> 
    >> Sorry, I did misunderstand.  Thanks for the clarification.
    >> 
    >> But if the "You" in your last sentence meant me, it needs to be "They": I am not a member of R Core and can't make any changes to the sources.
    >> 
    >> Duncan Murdoch
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > -- 
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  4 18:11:40 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 4 Feb 2019 12:11:40 -0500
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <45CEFFBB-DE6E-4CEC-A98E-F23E5427A4A8@gmail.com>
References: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
 <20190204142013.GA10151@mail.cs.toronto.edu>
 <881488b4-7225-1f0b-bde5-9ceed235533d@gmail.com>
 <45CEFFBB-DE6E-4CEC-A98E-F23E5427A4A8@gmail.com>
Message-ID: <75641a74-5910-90d7-40c2-7d8651a6786d@gmail.com>

On 04/02/2019 10:48 a.m., peter dalgaard wrote:
> Does either of you have a patch against current R-devel?
> 
> I tried the obvious, but the build dies with
> 
> building package 'tools'
> all.R is unchanged
> ../../../../library/tools/libs/x86_64/tools.so is unchanged
> installing 'sysdata.rda'
> Error in get(method, envir = home) : object '$.data.frame' not found
> Error: unable to load R code in package 'tools'
> Execution halted
> 
> ...and I can't really be arsed to dig into tools to see exactly where it is hardcoding the existence of $.data.frame.

Since $.data.frame is in the base package, it is handled specially in 
src/library/base/R/zzz.R.  I'll email you a patch if it compiles and 
passes checks.

Duncan Murdoch
> 
> -pd
> 
>> On 4 Feb 2019, at 15:32 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 04/02/2019 9:20 a.m., Radford Neal wrote:
>>>>> I think you might want to just delete the definition of $.data.frame,
>>>>> reverting to the situation before R-3.1.0.
>>>>
>>>> I imagine the cause is that the list version is done in C code rather
>>>> than R code (i.e. there's no R function `$.list`).  So an alternative
>>>> solution would be to also implement `$.data.frame` in the underlying C
>>>> code.  This won't be quite as fast (it needs that test for NULL), but
>>>> should be close in the full match case.
>>> I maybe wasn't completely clear.  The $ operator for data frames was
>>> previously done in C - since it was done by the same primitive as for
>>> lists.  In R-3.1.0, this was changed - producing a massive slowdown -
>>> for the purpose of giving a warning on partial matches even if the
>>> user had not set the warnPartialMatchDollar option to TRUE.  In
>>> R-3.1.1, this was changed to not warn unless warnPartialMatchDollar was
>>> TRUE which was the PREVIOUS behaviour.  In other words, this change
>>> reverted the change made in R-3.1.0.  But instead of simply deleting
>>> the definition of $.data.frame, R-3.1.1 added extra code to it, the
>>> only effect of which is to slightly change the wording of the warning
>>> message from what is produced for any other list, while still retaining
>>> the massive slowdown.
>>> There is no need for you to write $.data.frame in C.  You just need
>>> to delete the version written in R.
>>
>> Sorry, I did misunderstand.  Thanks for the clarification.
>>
>> But if the "You" in your last sentence meant me, it needs to be "They": I am not a member of R Core and can't make any changes to the sources.
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  4 18:15:51 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 4 Feb 2019 12:15:51 -0500
Subject: [Rd] Inefficiency in df$col
In-Reply-To: <23640.27034.714960.445873@stat.math.ethz.ch>
References: <mailman.48126.3.1549278001.57232.r-devel@r-project.org>
 <20190204142013.GA10151@mail.cs.toronto.edu>
 <881488b4-7225-1f0b-bde5-9ceed235533d@gmail.com>
 <45CEFFBB-DE6E-4CEC-A98E-F23E5427A4A8@gmail.com>
 <23640.27034.714960.445873@stat.math.ethz.ch>
Message-ID: <cb89ac93-eb68-8bac-420f-49d73caf9805@gmail.com>

On 04/02/2019 11:34 a.m., Martin Maechler wrote:
>>>>>> peter dalgaard
>>>>>>      on Mon, 4 Feb 2019 16:48:12 +0100 writes:
> 
>      > Does either of you have a patch against current R-devel?
>      > I tried the obvious, but the build dies with
> 
>      > building package 'tools'
>      > all.R is unchanged
>      > ../../../../library/tools/libs/x86_64/tools.so is unchanged
>      > installing 'sysdata.rda'
>      > Error in get(method, envir = home) : object '$.data.frame' not found
>      > Error: unable to load R code in package 'tools'
>      > Execution halted
> 
>      > ...and I can't really be arsed to dig into tools to see exactly where it is hardcoding the existence of $.data.frame.
> 
>      > -pd
> 
> Well, we two have been working "in parallel"...
> 
> I've just sent an e-mail to R-core about this:
> 
> It's really  file.size() which does need a 'data.frame' method for `$`
> because it is basically a wrapper  file.info(..)$size  and
> file.info(..) does return a data frame.
> 
> I've been suggesting the byte compiler's optimizations here to be
> the problem ...

I think Radford's point is that there is no difference between the 
behaviour of $ on a data.frame or a list (except for the wording of the 
warning message), so the $.list method (which is fast) is sufficient.

Duncan Murdoch

> 
>      >> On 4 Feb 2019, at 15:32 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>      >>
>      >> On 04/02/2019 9:20 a.m., Radford Neal wrote:
>      >>>>> I think you might want to just delete the definition of $.data.frame,
>      >>>>> reverting to the situation before R-3.1.0.
>      >>>>
>      >>>> I imagine the cause is that the list version is done in C code rather
>      >>>> than R code (i.e. there's no R function `$.list`).  So an alternative
>      >>>> solution would be to also implement `$.data.frame` in the underlying C
>      >>>> code.  This won't be quite as fast (it needs that test for NULL), but
>      >>>> should be close in the full match case.
>      >>> I maybe wasn't completely clear.  The $ operator for data frames was
>      >>> previously done in C - since it was done by the same primitive as for
>      >>> lists.  In R-3.1.0, this was changed - producing a massive slowdown -
>      >>> for the purpose of giving a warning on partial matches even if the
>      >>> user had not set the warnPartialMatchDollar option to TRUE.  In
>      >>> R-3.1.1, this was changed to not warn unless warnPartialMatchDollar was
>      >>> TRUE which was the PREVIOUS behaviour.  In other words, this change
>      >>> reverted the change made in R-3.1.0.  But instead of simply deleting
>      >>> the definition of $.data.frame, R-3.1.1 added extra code to it, the
>      >>> only effect of which is to slightly change the wording of the warning
>      >>> message from what is produced for any other list, while still retaining
>      >>> the massive slowdown.
>      >>> There is no need for you to write $.data.frame in C.  You just need
>      >>> to delete the version written in R.
>      >>
>      >> Sorry, I did misunderstand.  Thanks for the clarification.
>      >>
>      >> But if the "You" in your last sentence meant me, it needs to be "They": I am not a member of R Core and can't make any changes to the sources.
>      >>
>      >> Duncan Murdoch
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>      > --
>      > Peter Dalgaard, Professor,
>      > Center for Statistics, Copenhagen Business School
>      > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>      > Phone: (+45)38153501
>      > Office: A 4.23
>      > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Feb  6 10:58:25 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 6 Feb 2019 10:58:25 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <7389c349-d3e9-d421-6907-f130149f138b@seanet.com>
References: <23636.2761.752118.1610@stat.math.ethz.ch>
 <7389c349-d3e9-d421-6907-f130149f138b@seanet.com>
Message-ID: <23642.44993.488084.34323@stat.math.ethz.ch>

Thank you, Brad (and others),

>>>>> Brad Bell on Mon, 4 Feb 2019 07:21:18 -0700 writes:

    > I get the failure message. To be specific:

    adcomp.git> R CMD BATCH --quiet test_nlminb.R
    adcomp.git> cat test_nlminb.Rout
    >> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
    >> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
    >> xhat <- rep(1, 10)
    >> abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
    > [1] FALSE

ok... [I gave a version of the above which reveals a bit more ...]

    > My system is described by:
    adcomp.git> uname -a
    > Linux localhost.localdomain 4.17.7-200.fc28.x86_64 #1 SMP Tue Jul 17 16:28:31 UTC 2018 x86_64 x86_64 
    > x86_64 GNU/Linux

That (uname -a) is almost only a description of your kernel + hardware
(including of where the kernel was possibly built), and by the
way, almost equivalent to R's

   Sys.info()

In your case, I guess Fedora 28 Linux (which I also use, ..),
but we'd like a bit more information, notably  sessionInfo()

    > My version of R is described by:
    > Source?????? : R-3.5.2-2.fc28.src.rpm

The above also is not so informative.
I assume it means this is /usr/bin/R you got as a regular Fedora
package, and the above would actually by one of the output lines
of
   dnf inst /usr/bin/R

Indeed, now when I also try Fedora 28's /usr/bin/R,
I do see the same problem....
... and it is *also* *not* using R's own BLAS + LAPACK, but the
OpenBLAS  BLAS+LAPACK combination that comes with Fedora's R, 
 /usr/lib64/R/lib/libRblas.so :

> R.home()
[1] "/usr/lib64/R"
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> str(opt)
List of 6
 $ par        : num [1:10] 0.797 0.303 0.285 0.271 0.258 ...
 $ objective  : num -37.7
 $ convergence: int 1
 $ iterations : int 150
 $ evaluations: Named int [1:2] 155 1611
  ..- attr(*, "names")= chr [1:2] "function" "gradient"
 $ message    : chr "iteration limit reached without convergence (10)"
> xhat <- rep(1, 10)                       # 64b Lnx/Win: -- 32bit even better
> all.equal(opt$par,         xhat,  tol=0) # good: 5.53 e-7
[1] "Mean relative difference: 2.233284"
> all.equal(opt$objective, f(xhat), tol=0) # good: 1.8 e-12
[1] "Mean relative difference: 0.0979214"
> print(abs(opt$objective- f(xhat) )) < 1e-4 # see 7.53 e-11  [Must be TRUE]
[1] 3.696533
[1] FALSE
> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: Fedora 28 (Twenty Eight)

Matrix products: default
BLAS/LAPACK: /usr/lib64/R/lib/libRblas.so

locale:
 [1] LC_CTYPE=de_CH.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=de_CH.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=de_CH.UTF-8   
 [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] graphics  grDevices datasets  stats     utils     methods   base     

other attached packages:
[1] fortunes_1.5-4 sfsmisc_1.1-3 

loaded via a namespace (and not attached):
[1] compiler_3.5.2 tools_3.5.2   
>
---------------------

And indeed BLAS/LAPACK  is  /usr/lib64/R/lib/libRblas.so
and that is described as

$ dnf info /usr/lib64/R/lib/libRblas.so
Updating .... repositories.
Last metadata expiration check: 0:08:10 ago on Wed 06 Feb 2019 09:31:40 AM CET.
Installed Packages
Name         : openblas-Rblas
Version      : 0.3.5
Release      : 1.fc28
Arch         : x86_64
Size         : 39 M
Source       : openblas-0.3.5-1.fc28.src.rpm
Repo         : @System
>From repo    : updates
Summary      : A version of OpenBLAS for R to use as libRblas
URL          : https://github.com/xianyi/OpenBLAS/
License      : BSD
Description  : 
             : OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD
             : version. The project is supported by the Lab of Parallel Software and
             : Computational Science, ISCAS. http://www.rdcps.ac.cn

---------------------------------------------------------------------------

I summarize what has been reported till:

Failure in these cases
========
1. Kasper K ("Scientific Linux", self compiled R, using Intel's MKL
  	    for BLAS/LAPACK)
2. (By Bill Dunlap): Microsoft R Open (MRO) 3.4.2, also using
  	    MKL with 12 cores
3. (By Brad Bell)  : R 3.5.2 Fedora 28 (x86_64) pkg, OpenBLAS(?)
4. (by MM)         : R 3.5.2 Fedora 28 (x86_64) pkg, BLAS+Lapack = OpenBLAS

Success
=======

- (by MM)	   : R-devel, R 3.5.2 patched on FC28, *self compiled* gcc 8.2,
      		     using R's BLAS/Lapack 
- (by Ralf Stubner): R 3.5.2 from Debian Stable (gcc 6.2) + OpenBLAS
- (by Berend H.)   : R 3.5.2 [from CRAN] on macOS 10.14.3 (BLAS/Lapack ??)
- (by MM)          : R-devel & R 3.5.2 (from CRAN) on Windows 32-bit & 64-b
- (by Rui Barradas): R 3.5.2 on ubuntu 18.04.1, BLAS/Lapack separate, /usr/lib/..
- (by Oliver Dechant)R 3.5.2 on Debian 9(stretch) + Intel MKL
- (by Avraham Adler):R 3.5.2 patched on Windows 10, Rblas=OpenBLAS 0.20, Lapack="base"
- (by Stefan Evert): R 3.5.1 on MacOS 10.13.6, system-supplied VecLib BLAS.

.............

and unfortunately I can not draw any clear conclusion from the
above.  It can't be MKL or OpenBLAS fault, alone.  
On the other hand, we've seen no failure when R's own BLAS was used.
Maybe MKL / OpenBLAS give no problems when only using 1 or 2
threads (and where doing that in the "good" cases), or could it
be that the behavior is even somewhat random on the platforms
with optimzing BLAS, depending on the CPUs' loads etc??

Apropos BLAS/Lapack :
  R's C+Fortran code does use (very little, I think) BLAS, but
  no Lapack routines.

Still, I don't  have much further clues, currently I think.
The only "failure" case, where R was 'self compiled' has been by
Kasper where he even found out that he could solve the problem
by using different F77 SAFE_FLAGS, and indeed these *are* used
when compiling <Rsource>/src/library/stats/portsrc.f ...

It would be great if this could be solved...

Martin


	
    > I have tried passing in the gradient and turning on the trace and it gives nearly the exact same trace with and without the gradient.
    [.......................]


From bhh @end|ng |rom x@4@||@n|  Wed Feb  6 12:47:21 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Wed, 6 Feb 2019 12:47:21 +0100
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <23642.44993.488084.34323@stat.math.ethz.ch>
References: <23636.2761.752118.1610@stat.math.ethz.ch>
 <7389c349-d3e9-d421-6907-f130149f138b@seanet.com>
 <23642.44993.488084.34323@stat.math.ethz.ch>
Message-ID: <E46F8E9E-97C7-4F98-B089-0DF982ED42DB@xs4all.nl>



> On 6 Feb 2019, at 10:58, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 

.....
> ---------------------------------------------------------------------------
> 
> I summarize what has been reported till:
> 
> Failure in these cases
> ========
> 1. Kasper K ("Scientific Linux", self compiled R, using Intel's MKL
>  	    for BLAS/LAPACK)
> 2. (By Bill Dunlap): Microsoft R Open (MRO) 3.4.2, also using
>  	    MKL with 12 cores
> 3. (By Brad Bell)  : R 3.5.2 Fedora 28 (x86_64) pkg, OpenBLAS(?)
> 4. (by MM)         : R 3.5.2 Fedora 28 (x86_64) pkg, BLAS+Lapack = OpenBLAS
> 
> Success
> =======
> 
> - (by MM)	   : R-devel, R 3.5.2 patched on FC28, *self compiled* gcc 8.2,
>      		     using R's BLAS/Lapack 
> - (by Ralf Stubner): R 3.5.2 from Debian Stable (gcc 6.2) + OpenBLAS
> - (by Berend H.)   : R 3.5.2 [from CRAN] on macOS 10.14.3 (BLAS/Lapack ??)

R 3.5.2 from CRAN using R's BLAS/Lapack.

Berend

....

> It would be great if this could be solved...
> 
> Martin
> 
> 
> 	
>> I have tried passing in the gradient and turning on the trace and it gives nearly the exact same trace with and without the gradient.
>    [.......................]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Wed Feb  6 13:15:46 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Wed, 6 Feb 2019 04:15:46 -0800
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <E46F8E9E-97C7-4F98-B089-0DF982ED42DB@xs4all.nl>
References: <23636.2761.752118.1610@stat.math.ethz.ch>
 <7389c349-d3e9-d421-6907-f130149f138b@seanet.com>
 <23642.44993.488084.34323@stat.math.ethz.ch>
 <E46F8E9E-97C7-4F98-B089-0DF982ED42DB@xs4all.nl>
Message-ID: <CAL6gwnKchKQatZ_JT3ss9_EYeOL=5cwiMGKw9wjKhZoexrj+ug@mail.gmail.com>

If it helps, the BLAS I used is compiled to use 6 threads.

On Wed, Feb 6, 2019 at 3:47 AM Berend Hasselman <bhh at xs4all.nl> wrote:

>
>
> > On 6 Feb 2019, at 10:58, Martin Maechler <maechler at stat.math.ethz.ch>
> wrote:
> >
>
> .....
> >
> ---------------------------------------------------------------------------
> >
> > I summarize what has been reported till:
> >
> > Failure in these cases
> > ========
> > 1. Kasper K ("Scientific Linux", self compiled R, using Intel's MKL
> >           for BLAS/LAPACK)
> > 2. (By Bill Dunlap): Microsoft R Open (MRO) 3.4.2, also using
> >           MKL with 12 cores
> > 3. (By Brad Bell)  : R 3.5.2 Fedora 28 (x86_64) pkg, OpenBLAS(?)
> > 4. (by MM)         : R 3.5.2 Fedora 28 (x86_64) pkg, BLAS+Lapack =
> OpenBLAS
> >
> > Success
> > =======
> >
> > - (by MM)        : R-devel, R 3.5.2 patched on FC28, *self compiled* gcc
> 8.2,
> >                    using R's BLAS/Lapack
> > - (by Ralf Stubner): R 3.5.2 from Debian Stable (gcc 6.2) + OpenBLAS
> > - (by Berend H.)   : R 3.5.2 [from CRAN] on macOS 10.14.3 (BLAS/Lapack
> ??)
>
> R 3.5.2 from CRAN using R's BLAS/Lapack.
>
> Berend
>
> ....
>
> > It would be great if this could be solved...
> >
> > Martin
> >
> >
> >
> >> I have tried passing in the gradient and turning on the trace and it
> gives nearly the exact same trace with and without the gradient.
> >    [.......................]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From retep@me|@@ner @end|ng |rom gm@||@com  Thu Feb  7 09:38:44 2019
From: retep@me|@@ner @end|ng |rom gm@||@com (Peter Meissner)
Date: Thu, 7 Feb 2019 09:38:44 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CAB8pepwO_PW+2N2ZS=iUWUBPxOSkoyEnPaVB7ZTgh_re5VJfWA@mail.gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <CAB8pepwO_PW+2N2ZS=iUWUBPxOSkoyEnPaVB7ZTgh_re5VJfWA@mail.gmail.com>
Message-ID: <CAB-BFRoicRyFpLRyLLedPrGrY2VPzcJoMYqk4-GKKf8ScCEhqg@mail.gmail.com>

Doesn't Rtools provide everything needed to build R packages and R on
Windows - including gcc?

Am Sa., 2. Feb. 2019 um 22:29 Uhr schrieb Abs Spurdle <spurdle.a at gmail.com>:

> Creating an .exe file isn't necessarily difficult.
> The main problems are that you have to write and compile the C (or other)
> files.
> Otherwise, the complexity depends on the level of Inter Process
> Communication that's required.
>
> Simply starting R with some initial conditions, is easy.
> Even if you want to prompt the user to install missing packages, it isn't
> necessarily difficult.
>
> It would be possible to take this one step further, and write an .exe
> builder, that automates the process of creating .exe files.
> Obviously, it would require a compiler and supporting libraries.
> I have a preference for GCC, and I'm not sure if you can run GCC on Windows
> without Cygwin.
>
> I may (or may not) look into this further, in a few weeks time.
>
>
> On Sun, Feb 3, 2019 at 2:27 AM Barry Rowlingson <
> b.rowlingson at lancaster.ac.uk> wrote:
>
> > I don't think anyone denies that you *could* make an EXE to do all
> > that. The discussion is on *how easy* it should be to create a single
> > file that contains an initial "main" function plus a set of bundled
> > code (potentially as a package) and which when run will install its
> > package code (which is contained in itself, its not in a repo),
> > install dependencies, and run the main() function.
> >
> > Now, I could build a self-executable shar file that bundled a package
> > together with a script to do all the above. But if there was a "RUN"
> > command in R, and a convention that a function called "foo::main"
> > would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
> > easier to develop and test.
> >
> > If people think this adds value, then if they want to offer that value
> > to me as $ or ?, I'd consider writing it if their total value was more
> > than my cost....
> >
> > Barry
> >
>
>
> ___________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From d@v|d@byrne222 @end|ng |rom gm@||@com  Thu Feb  7 11:17:08 2019
From: d@v|d@byrne222 @end|ng |rom gm@||@com (David Byrne)
Date: Thu, 7 Feb 2019 10:17:08 +0000
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
Message-ID: <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>

Bug
Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
file containing the infinity symbol (' ? ') results in the infinity
symbol imported as the number 8. Other Unicode characters seem
unaffected, example, Zhe: ?

Expected Behavior:
The imported data.frame should represent the infinity symbol as the
expected 'Inf' so that normal mathematical operations can be processed

Stack Overflow Post:
I created a question on Stack Overflow where one other member was able
to reproduce the same issues I was having. This question can be found
at:
https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int

Method to Reproduce - 1:
A simple method to reproduce this issues is to use R-Studio: In the
console, type the following:
> read.table(text=" ?", encoding="UTF-8")

The result should be a data.frame with a single value of '8'

Repeating the same with ? Results in correct expected behavior

Method to Reproduce - 2:
Create a .csv file containing the infinity and Zhe characters (I have
attached the file for convenience, hopefully it is no rejected by your
email service). Launch an interactive session using

> r --vanilla

Enter the following statement taking care to replace the
<path-to-file> with the appropriate one:

> read.table("<path-to-file>/unicode_chars.csv", sep=",", encoding="UTF-8")


This should result in a two element data.frame; the first being the
incorrect value of 8 with an additional <U+FEFF> and the second the
correct value of Zhe.

Note the additional <U+FEFF> prefixed to the front of the '8'. This
appears to be a hidden character for the purposes of letting editors
know the encoding. The following link has some explanation however, it
states this is caused by excel. The file I created was done so using
notepad and not Excel.

https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7

System Details:
OS:
> Windows 10.0.17134 Build 17134


R Version:
> platform       x86_64-w64-mingw32
> arch           x86_64
> os             mingw32
> system         x86_64, mingw32
> status
> major          3
> minor          4.1
> year           2017
> month          06
> day            30
> svn rev        72865
> language       R
> version.string R version 3.4.1 (2017-06-30)
> nickname       Single Candle

From pd@|gd @end|ng |rom gm@||@com  Thu Feb  7 13:55:53 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 7 Feb 2019 13:55:53 +0100
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
Message-ID: <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>

This doesn't seem to be happening on MacOS, neither in Terminal nor RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific. 

-pd

> On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com> wrote:
> 
> Bug
> Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
> file containing the infinity symbol (' ? ') results in the infinity
> symbol imported as the number 8. Other Unicode characters seem
> unaffected, example, Zhe: ?
> 
> Expected Behavior:
> The imported data.frame should represent the infinity symbol as the
> expected 'Inf' so that normal mathematical operations can be processed
> 
> Stack Overflow Post:
> I created a question on Stack Overflow where one other member was able
> to reproduce the same issues I was having. This question can be found
> at:
> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
> 
> Method to Reproduce - 1:
> A simple method to reproduce this issues is to use R-Studio: In the
> console, type the following:
>> read.table(text=" ?", encoding="UTF-8")
> 
> The result should be a data.frame with a single value of '8'
> 
> Repeating the same with ? Results in correct expected behavior
> 
> Method to Reproduce - 2:
> Create a .csv file containing the infinity and Zhe characters (I have
> attached the file for convenience, hopefully it is no rejected by your
> email service). Launch an interactive session using
> 
>> r --vanilla
> 
> Enter the following statement taking care to replace the
> <path-to-file> with the appropriate one:
> 
>> read.table("<path-to-file>/unicode_chars.csv", sep=",", encoding="UTF-8")
> 
> 
> This should result in a two element data.frame; the first being the
> incorrect value of 8 with an additional <U+FEFF> and the second the
> correct value of Zhe.
> 
> Note the additional <U+FEFF> prefixed to the front of the '8'. This
> appears to be a hidden character for the purposes of letting editors
> know the encoding. The following link has some explanation however, it
> states this is caused by excel. The file I created was done so using
> notepad and not Excel.
> 
> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
> 
> System Details:
> OS:
>> Windows 10.0.17134 Build 17134
> 
> 
> R Version:
>> platform       x86_64-w64-mingw32
>> arch           x86_64
>> os             mingw32
>> system         x86_64, mingw32
>> status
>> major          3
>> minor          4.1
>> year           2017
>> month          06
>> day            30
>> svn rev        72865
>> language       R
>> version.string R version 3.4.1 (2017-06-30)
>> nickname       Single Candle
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From d@v|d@byrne222 @end|ng |rom gm@||@com  Thu Feb  7 14:33:01 2019
From: d@v|d@byrne222 @end|ng |rom gm@||@com (David Byrne)
Date: Thu, 7 Feb 2019 13:33:01 +0000
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
Message-ID: <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>

I can confirm that it doesn't happen on Ubuntu 18.04.1 so Peter is
most likely correct; it looks like its Windows specific.

On Thu, 7 Feb 2019 at 12:55, peter dalgaard <pdalgd at gmail.com> wrote:
>
> This doesn't seem to be happening on MacOS, neither in Terminal nor RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific.
>
> -pd
>
> > On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com> wrote:
> >
> > Bug
> > Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
> > file containing the infinity symbol (' ? ') results in the infinity
> > symbol imported as the number 8. Other Unicode characters seem
> > unaffected, example, Zhe: ?
> >
> > Expected Behavior:
> > The imported data.frame should represent the infinity symbol as the
> > expected 'Inf' so that normal mathematical operations can be processed
> >
> > Stack Overflow Post:
> > I created a question on Stack Overflow where one other member was able
> > to reproduce the same issues I was having. This question can be found
> > at:
> > https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
> >
> > Method to Reproduce - 1:
> > A simple method to reproduce this issues is to use R-Studio: In the
> > console, type the following:
> >> read.table(text=" ?", encoding="UTF-8")
> >
> > The result should be a data.frame with a single value of '8'
> >
> > Repeating the same with ? Results in correct expected behavior
> >
> > Method to Reproduce - 2:
> > Create a .csv file containing the infinity and Zhe characters (I have
> > attached the file for convenience, hopefully it is no rejected by your
> > email service). Launch an interactive session using
> >
> >> r --vanilla
> >
> > Enter the following statement taking care to replace the
> > <path-to-file> with the appropriate one:
> >
> >> read.table("<path-to-file>/unicode_chars.csv", sep=",", encoding="UTF-8")
> >
> >
> > This should result in a two element data.frame; the first being the
> > incorrect value of 8 with an additional <U+FEFF> and the second the
> > correct value of Zhe.
> >
> > Note the additional <U+FEFF> prefixed to the front of the '8'. This
> > appears to be a hidden character for the purposes of letting editors
> > know the encoding. The following link has some explanation however, it
> > states this is caused by excel. The file I created was done so using
> > notepad and not Excel.
> >
> > https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
> >
> > System Details:
> > OS:
> >> Windows 10.0.17134 Build 17134
> >
> >
> > R Version:
> >> platform       x86_64-w64-mingw32
> >> arch           x86_64
> >> os             mingw32
> >> system         x86_64, mingw32
> >> status
> >> major          3
> >> minor          4.1
> >> year           2017
> >> month          06
> >> day            30
> >> svn rev        72865
> >> language       R
> >> version.string R version 3.4.1 (2017-06-30)
> >> nickname       Single Candle
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>


From po@@enr|ede @end|ng |rom gm@||@com  Thu Feb  7 15:10:11 2019
From: po@@enr|ede @end|ng |rom gm@||@com (Daniel Possenriede)
Date: Thu, 7 Feb 2019 15:10:11 +0100
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
 <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
Message-ID: <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>

There seems to be something odd with "?" on Windows (and not only with
read.table)
In native encoding (cp-1252 in my case), "?" gets converted to "8"

x <-  "?"
Encoding(x)
#> [1] "unknown"
print(x)
#> [1] "8"
charToRaw(x)
#> [1] 38

"?" is indeed "8"

identical(x, "8")
#> [1] TRUE

Everything seems fine if  "?" is UTF-8 encoded.

y <- "\u221E"
Encoding(y)
#> [1] "UTF-8"
print(y)
#> [1]  "?"
charToRaw(y)
#> [1] e2 88 9e

Unless the string is converted back to native encoding.

format(y)
#> [1] "8"

This ought to be "<U+221E>", equivalently to

format("?")
#> [1] "<U+221D>"

Session Info:

si <- sessionInfo()
si$running
#> [1] "Windows 10 x64 (build 17134)"
si$R.version$version.string
#> [1] "R version 3.5.2 (2018-12-20)"
si$locale
#> [1]
"LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"



Am Do., 7. Feb. 2019 um 14:33 Uhr schrieb David Byrne <
david.byrne222 at gmail.com>:

> I can confirm that it doesn't happen on Ubuntu 18.04.1 so Peter is
> most likely correct; it looks like its Windows specific.
>
> On Thu, 7 Feb 2019 at 12:55, peter dalgaard <pdalgd at gmail.com> wrote:
> >
> > This doesn't seem to be happening on MacOS, neither in Terminal nor
> RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific.
> >
> > -pd
> >
> > > On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com>
> wrote:
> > >
> > > Bug
> > > Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
> > > file containing the infinity symbol (' ? ') results in the infinity
> > > symbol imported as the number 8. Other Unicode characters seem
> > > unaffected, example, Zhe: ?
> > >
> > > Expected Behavior:
> > > The imported data.frame should represent the infinity symbol as the
> > > expected 'Inf' so that normal mathematical operations can be processed
> > >
> > > Stack Overflow Post:
> > > I created a question on Stack Overflow where one other member was able
> > > to reproduce the same issues I was having. This question can be found
> > > at:
> > >
> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
> > >
> > > Method to Reproduce - 1:
> > > A simple method to reproduce this issues is to use R-Studio: In the
> > > console, type the following:
> > >> read.table(text=" ?", encoding="UTF-8")
> > >
> > > The result should be a data.frame with a single value of '8'
> > >
> > > Repeating the same with ? Results in correct expected behavior
> > >
> > > Method to Reproduce - 2:
> > > Create a .csv file containing the infinity and Zhe characters (I have
> > > attached the file for convenience, hopefully it is no rejected by your
> > > email service). Launch an interactive session using
> > >
> > >> r --vanilla
> > >
> > > Enter the following statement taking care to replace the
> > > <path-to-file> with the appropriate one:
> > >
> > >> read.table("<path-to-file>/unicode_chars.csv", sep=",",
> encoding="UTF-8")
> > >
> > >
> > > This should result in a two element data.frame; the first being the
> > > incorrect value of 8 with an additional <U+FEFF> and the second the
> > > correct value of Zhe.
> > >
> > > Note the additional <U+FEFF> prefixed to the front of the '8'. This
> > > appears to be a hidden character for the purposes of letting editors
> > > know the encoding. The following link has some explanation however, it
> > > states this is caused by excel. The file I created was done so using
> > > notepad and not Excel.
> > >
> > >
> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
> > >
> > > System Details:
> > > OS:
> > >> Windows 10.0.17134 Build 17134
> > >
> > >
> > > R Version:
> > >> platform       x86_64-w64-mingw32
> > >> arch           x86_64
> > >> os             mingw32
> > >> system         x86_64, mingw32
> > >> status
> > >> major          3
> > >> minor          4.1
> > >> year           2017
> > >> month          06
> > >> day            30
> > >> svn rev        72865
> > >> language       R
> > >> version.string R version 3.4.1 (2017-06-30)
> > >> nickname       Single Candle
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > --
> > Peter Dalgaard, Professor,
> > Center for Statistics, Copenhagen Business School
> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > Phone: (+45)38153501
> > Office: A 4.23
> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >
> >
> >
> >
> >
> >
> >
> >
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From mcque@ten @end|ng |rom gm@||@com  Thu Feb  7 15:38:55 2019
From: mcque@ten @end|ng |rom gm@||@com (Paul McQuesten)
Date: Thu, 7 Feb 2019 08:38:55 -0600
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
 <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
 <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
Message-ID: <CAN6Gc-3m3FzFG6QqQY5L=Ce1+79JvnQ1JmAsWpm5V3r=QfwiPw@mail.gmail.com>

Windows Notepad prefixes UTF-8 files with a Byte Order Mark (\UFEFF).
Per https://en.wikipedia.org/wiki/Byte_order_mark, this is permitted in
UTF-8, but not required.
I suppose that there are other Windows programs which do likewise (in
addition to Excel and Notepad).

"The Unicode Standard permits the BOM in UTF-8
<https://en.wikipedia.org/wiki/UTF-8>,[3]
<https://en.wikipedia.org/wiki/Byte_order_mark#cite_note-3> but does not
require or recommend its use.[4]
<https://en.wikipedia.org/wiki/Byte_order_mark#cite_note-4> Byte order has
no meaning in UTF-8,[5]
<https://en.wikipedia.org/wiki/Byte_order_mark#cite_note-utf-8-bom-5> so
its only use in UTF-8 is to signal at the start that the text stream is
encoded in UTF-8, or that it was converted to UTF-8 from a stream that
contained an optional BOM. The standard also does not recommend removing a
BOM when it is there, so that round-tripping between encodings does not
lose information, and so that code that relies on it continues to work.[6]
<https://en.wikipedia.org/wiki/Byte_order_mark#cite_note-6>[7]
<https://en.wikipedia.org/wiki/Byte_order_mark#cite_note-7> The IETF
recommends that if a protocol either (a) always uses UTF-8, or (b) has some
other way to indicate what encoding is being used, then it "SHOULD forbid
use of U+FEFF as a signature."[8]
<https://en.wikipedia.org/wiki/Byte_order_mark#cite_note-rfc3629-8>"

On Thu, Feb 7, 2019 at 8:10 AM Daniel Possenriede <possenriede at gmail.com>
wrote:

> There seems to be something odd with "?" on Windows (and not only with
> read.table)
> In native encoding (cp-1252 in my case), "?" gets converted to "8"
>
> x <-  "?"
> Encoding(x)
> #> [1] "unknown"
> print(x)
> #> [1] "8"
> charToRaw(x)
> #> [1] 38
>
> "?" is indeed "8"
>
> identical(x, "8")
> #> [1] TRUE
>
> Everything seems fine if  "?" is UTF-8 encoded.
>
> y <- "\u221E"
> Encoding(y)
> #> [1] "UTF-8"
> print(y)
> #> [1]  "?"
> charToRaw(y)
> #> [1] e2 88 9e
>
> Unless the string is converted back to native encoding.
>
> format(y)
> #> [1] "8"
>
> This ought to be "<U+221E>", equivalently to
>
> format("?")
> #> [1] "<U+221D>"
>
> Session Info:
>
> si <- sessionInfo()
> si$running
> #> [1] "Windows 10 x64 (build 17134)"
> si$R.version$version.string
> #> [1] "R version 3.5.2 (2018-12-20)"
> si$locale
> #> [1]
>
> "LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"
>
>
>
> Am Do., 7. Feb. 2019 um 14:33 Uhr schrieb David Byrne <
> david.byrne222 at gmail.com>:
>
> > I can confirm that it doesn't happen on Ubuntu 18.04.1 so Peter is
> > most likely correct; it looks like its Windows specific.
> >
> > On Thu, 7 Feb 2019 at 12:55, peter dalgaard <pdalgd at gmail.com> wrote:
> > >
> > > This doesn't seem to be happening on MacOS, neither in Terminal nor
> > RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific.
> > >
> > > -pd
> > >
> > > > On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com>
> > wrote:
> > > >
> > > > Bug
> > > > Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
> > > > file containing the infinity symbol (' ? ') results in the infinity
> > > > symbol imported as the number 8. Other Unicode characters seem
> > > > unaffected, example, Zhe: ?
> > > >
> > > > Expected Behavior:
> > > > The imported data.frame should represent the infinity symbol as the
> > > > expected 'Inf' so that normal mathematical operations can be
> processed
> > > >
> > > > Stack Overflow Post:
> > > > I created a question on Stack Overflow where one other member was
> able
> > > > to reproduce the same issues I was having. This question can be found
> > > > at:
> > > >
> >
> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
> > > >
> > > > Method to Reproduce - 1:
> > > > A simple method to reproduce this issues is to use R-Studio: In the
> > > > console, type the following:
> > > >> read.table(text=" ?", encoding="UTF-8")
> > > >
> > > > The result should be a data.frame with a single value of '8'
> > > >
> > > > Repeating the same with ? Results in correct expected behavior
> > > >
> > > > Method to Reproduce - 2:
> > > > Create a .csv file containing the infinity and Zhe characters (I have
> > > > attached the file for convenience, hopefully it is no rejected by
> your
> > > > email service). Launch an interactive session using
> > > >
> > > >> r --vanilla
> > > >
> > > > Enter the following statement taking care to replace the
> > > > <path-to-file> with the appropriate one:
> > > >
> > > >> read.table("<path-to-file>/unicode_chars.csv", sep=",",
> > encoding="UTF-8")
> > > >
> > > >
> > > > This should result in a two element data.frame; the first being the
> > > > incorrect value of 8 with an additional <U+FEFF> and the second the
> > > > correct value of Zhe.
> > > >
> > > > Note the additional <U+FEFF> prefixed to the front of the '8'. This
> > > > appears to be a hidden character for the purposes of letting editors
> > > > know the encoding. The following link has some explanation however,
> it
> > > > states this is caused by excel. The file I created was done so using
> > > > notepad and not Excel.
> > > >
> > > >
> >
> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
> > > >
> > > > System Details:
> > > > OS:
> > > >> Windows 10.0.17134 Build 17134
> > > >
> > > >
> > > > R Version:
> > > >> platform       x86_64-w64-mingw32
> > > >> arch           x86_64
> > > >> os             mingw32
> > > >> system         x86_64, mingw32
> > > >> status
> > > >> major          3
> > > >> minor          4.1
> > > >> year           2017
> > > >> month          06
> > > >> day            30
> > > >> svn rev        72865
> > > >> language       R
> > > >> version.string R version 3.4.1 (2017-06-30)
> > > >> nickname       Single Candle
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > > --
> > > Peter Dalgaard, Professor,
> > > Center for Statistics, Copenhagen Business School
> > > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > > Phone: (+45)38153501
> > > Office: A 4.23
> > > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ||nde|o| @end|ng |rom |eee@org  Fri Feb  8 09:09:04 2019
From: ||nde|o| @end|ng |rom |eee@org (David Lindelof)
Date: Fri, 8 Feb 2019 09:09:04 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
Message-ID: <CAKtMxAH=By6A0TiGyX4m1NnBWkWHsOiMVH-xQnp6=dE3gayL1A@mail.gmail.com>

Yesterday I wrote and submitted to CRAN a package `run`, which implements
the ideas discussed in this thread. Given a package tarball
foo_0.1.0.tar.gz, users will be able to run

Rscript -e "run::run('foo_0.1.0.tar.gz')"

which will pull all the dependencies of package `foo`, lookup a function
`main` in that package's namespace, and call it.

It's an early draft but I'd appreciate any feedback (once its submission is
accepted, of course).

Thanks all for your help and advice,

David

On Sat, Feb 2, 2019 at 3:37 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 02/02/2019 8:27 a.m., Barry Rowlingson wrote:
> > I don't think anyone denies that you *could* make an EXE to do all
> > that. The discussion is on *how easy* it should be to create a single
> > file that contains an initial "main" function plus a set of bundled
> > code (potentially as a package) and which when run will install its
> > package code (which is contained in itself, its not in a repo),
> > install dependencies, and run the main() function.
> >
> > Now, I could build a self-executable shar file that bundled a package
> > together with a script to do all the above. But if there was a "RUN"
> > command in R, and a convention that a function called "foo::main"
> > would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
> > easier to develop and test.
>
> I don't believe the "so much easier" argument that this requires a
> change to base R.  If you put that functionality into a package, then
> the only extra effort the user would require is to install that other
> package.  After that, they could run
>
> Rscript -e "yourpackage::run_main('foo_1.1.1.tar.gz')"
>
> as I suggested before.  This is no harder than running
>
> R CMD RUN foo_1.1.1.tar.gz
>
> The advantage of this from R Core's perspective is that you would be
> developing and maintaining "yourpackage", you wouldn't be passing the
> burden on to them.  The advantage from your perspective is that you
> could work with whatever packages you liked.  The "remotes" package has
> almost everything you need so that "yourpackage" could be nearly
> trivial.  You wouldn't need to duplicate it within base R.
>
> Duncan Murdoch
>
> >
> > If people think this adds value, then if they want to offer that value
> > to me as $ or ?, I'd consider writing it if their total value was more
> > than my cost....
> >
> > Barry
> >
> >
> > On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
> >>
> >> Further to my previous post,
> >> it would be possible to create an .exe file, say:
> >>
> >> my_r_application.exe
> >>
> >> That starts R, loads your R package(s), calls the R function of your
> choice
> >> and does whatever else you want.
> >>
> >> However, I don't think that it would add much value.
> >> But feel free to correct me if you think that I'm wrong.
> >>
> >>          [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From R@|ner @end|ng |rom krug@@de  Fri Feb  8 09:41:50 2019
From: R@|ner @end|ng |rom krug@@de (Rainer M Krug)
Date: Fri, 8 Feb 2019 09:41:50 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAH=By6A0TiGyX4m1NnBWkWHsOiMVH-xQnp6=dE3gayL1A@mail.gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
 <CAKtMxAH=By6A0TiGyX4m1NnBWkWHsOiMVH-xQnp6=dE3gayL1A@mail.gmail.com>
Message-ID: <925ACD85-9AC3-4927-AA11-CB81F5D72881@krugs.de>

Sounds interesting. Do you have it on GitHub or similar?

Rainer

> On 8 Feb 2019, at 09:09, David Lindelof <lindelof at ieee.org> wrote:
> 
> Yesterday I wrote and submitted to CRAN a package `run`, which implements
> the ideas discussed in this thread. Given a package tarball
> foo_0.1.0.tar.gz, users will be able to run
> 
> Rscript -e "run::run('foo_0.1.0.tar.gz')"
> 
> which will pull all the dependencies of package `foo`, lookup a function
> `main` in that package's namespace, and call it.
> 
> It's an early draft but I'd appreciate any feedback (once its submission is
> accepted, of course).
> 
> Thanks all for your help and advice,
> 
> David
> 
> On Sat, Feb 2, 2019 at 3:37 PM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> 
>> On 02/02/2019 8:27 a.m., Barry Rowlingson wrote:
>>> I don't think anyone denies that you *could* make an EXE to do all
>>> that. The discussion is on *how easy* it should be to create a single
>>> file that contains an initial "main" function plus a set of bundled
>>> code (potentially as a package) and which when run will install its
>>> package code (which is contained in itself, its not in a repo),
>>> install dependencies, and run the main() function.
>>> 
>>> Now, I could build a self-executable shar file that bundled a package
>>> together with a script to do all the above. But if there was a "RUN"
>>> command in R, and a convention that a function called "foo::main"
>>> would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
>>> easier to develop and test.
>> 
>> I don't believe the "so much easier" argument that this requires a
>> change to base R.  If you put that functionality into a package, then
>> the only extra effort the user would require is to install that other
>> package.  After that, they could run
>> 
>> Rscript -e "yourpackage::run_main('foo_1.1.1.tar.gz')"
>> 
>> as I suggested before.  This is no harder than running
>> 
>> R CMD RUN foo_1.1.1.tar.gz
>> 
>> The advantage of this from R Core's perspective is that you would be
>> developing and maintaining "yourpackage", you wouldn't be passing the
>> burden on to them.  The advantage from your perspective is that you
>> could work with whatever packages you liked.  The "remotes" package has
>> almost everything you need so that "yourpackage" could be nearly
>> trivial.  You wouldn't need to duplicate it within base R.
>> 
>> Duncan Murdoch
>> 
>>> 
>>> If people think this adds value, then if they want to offer that value
>>> to me as $ or ?, I'd consider writing it if their total value was more
>>> than my cost....
>>> 
>>> Barry
>>> 
>>> 
>>> On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>>>> 
>>>> Further to my previous post,
>>>> it would be possible to create an .exe file, say:
>>>> 
>>>> my_r_application.exe
>>>> 
>>>> That starts R, loads your R package(s), calls the R function of your
>> choice
>>>> and does whatever else you want.
>>>> 
>>>> However, I don't think that it would add much value.
>>>> But feel free to correct me if you think that I'm wrong.
>>>> 
>>>>         [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--
Rainer M. Krug, PhD (Conservation Ecology, SUN), MSc (Conservation Biology, UCT), Dipl. Phys. (Germany)

Department of Evolutionary Biology and Environmental Studies
University of Z?rich
Office Y34-J-74
Winterthurerstrasse 190
8075 Z?rich
Switzerland

Office:	+41 (0)44 635 47 64
Cell:       	+41 (0)78 630 66 57
email:      Rainer.Krug at uzh.ch
		Rainer at krugs.de
Skype:     RMkrug

PGP: 0x0F52F982




	[[alternative HTML version deleted]]


From ||nde|o| @end|ng |rom |eee@org  Fri Feb  8 10:58:10 2019
From: ||nde|o| @end|ng |rom |eee@org (David Lindelof)
Date: Fri, 8 Feb 2019 10:58:10 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <925ACD85-9AC3-4927-AA11-CB81F5D72881@krugs.de>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <250a197e-ddb2-caac-76fc-d87aa43e01be@gmail.com>
 <CAKtMxAH=By6A0TiGyX4m1NnBWkWHsOiMVH-xQnp6=dE3gayL1A@mail.gmail.com>
 <925ACD85-9AC3-4927-AA11-CB81F5D72881@krugs.de>
Message-ID: <CAKtMxAHUiKncg83dmjjpjGhcD3LBDUgppvbOmThDtOizRX0h2Q@mail.gmail.com>

Sure, you can find it here:

https://github.com/dlindelof/run


On Fri, Feb 8, 2019 at 9:41 AM Rainer M Krug <Rainer at krugs.de> wrote:

> Sounds interesting. Do you have it on GitHub or similar?
>
> Rainer
>
> On 8 Feb 2019, at 09:09, David Lindelof <lindelof at ieee.org> wrote:
>
> Yesterday I wrote and submitted to CRAN a package `run`, which implements
> the ideas discussed in this thread. Given a package tarball
> foo_0.1.0.tar.gz, users will be able to run
>
> Rscript -e "run::run('foo_0.1.0.tar.gz')"
>
> which will pull all the dependencies of package `foo`, lookup a function
> `main` in that package's namespace, and call it.
>
> It's an early draft but I'd appreciate any feedback (once its submission is
> accepted, of course).
>
> Thanks all for your help and advice,
>
> David
>
> On Sat, Feb 2, 2019 at 3:37 PM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
>
> On 02/02/2019 8:27 a.m., Barry Rowlingson wrote:
>
> I don't think anyone denies that you *could* make an EXE to do all
> that. The discussion is on *how easy* it should be to create a single
> file that contains an initial "main" function plus a set of bundled
> code (potentially as a package) and which when run will install its
> package code (which is contained in itself, its not in a repo),
> install dependencies, and run the main() function.
>
> Now, I could build a self-executable shar file that bundled a package
> together with a script to do all the above. But if there was a "RUN"
> command in R, and a convention that a function called "foo::main"
> would be run by `R CMD RUN foo_1.1.1.tar.gz` then it would be so much
> easier to develop and test.
>
>
> I don't believe the "so much easier" argument that this requires a
> change to base R.  If you put that functionality into a package, then
> the only extra effort the user would require is to install that other
> package.  After that, they could run
>
> Rscript -e "yourpackage::run_main('foo_1.1.1.tar.gz')"
>
> as I suggested before.  This is no harder than running
>
> R CMD RUN foo_1.1.1.tar.gz
>
> The advantage of this from R Core's perspective is that you would be
> developing and maintaining "yourpackage", you wouldn't be passing the
> burden on to them.  The advantage from your perspective is that you
> could work with whatever packages you liked.  The "remotes" package has
> almost everything you need so that "yourpackage" could be nearly
> trivial.  You wouldn't need to duplicate it within base R.
>
> Duncan Murdoch
>
>
> If people think this adds value, then if they want to offer that value
> to me as $ or ?, I'd consider writing it if their total value was more
> than my cost....
>
> Barry
>
>
> On Sat, Feb 2, 2019 at 12:54 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>
>
> Further to my previous post,
> it would be possible to create an .exe file, say:
>
> my_r_application.exe
>
> That starts R, loads your R package(s), calls the R function of your
>
> choice
>
> and does whatever else you want.
>
> However, I don't think that it would add much value.
> But feel free to correct me if you think that I'm wrong.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> --
> Rainer M. Krug, PhD (Conservation Ecology, SUN), MSc
> (Conservation Biology, UCT), Dipl. Phys. (Germany)
>
> Department of Evolutionary Biology and Environmental Studies
> University of Z?rich
> Office Y34-J-74
> Winterthurerstrasse 190
> 8075 Z?rich
> Switzerland
>
> Office: +41 (0)44 635 47 64
> Cell:        +41 (0)78 630 66 57
> email:      Rainer.Krug at uzh.ch <Rainer.Krug at uzh.ch>
> Rainer at krugs.de
> Skype:     RMkrug
>
> PGP: 0x0F52F982
>
>
>
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Feb  8 13:07:11 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 8 Feb 2019 13:07:11 +0100
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
 <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
 <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
Message-ID: <6f164feb-7b42-22c7-4c78-7bbaeb8778fb@gmail.com>

I can reproduce this behavior on my Windows 10 system in RGui (cp1252): 
when I paste the Unicode infinity symbol into the console, it is treated 
as number 8. This is caused by Windows "best fit" default behavior in 
conversion of unicode characters to characters in the current native 
encoding: at some point in the past, 8 has been chosen as a good fit for 
infinity in Windows. In my scenario, the conversion is invoked by RGui 
before returning the input to the main R loop, even before the input 
gets to the parser. In principle, we could change this particular 
conversion in RGui to avoid the substitution. RGui uses "\uxxxx" escapes 
to pass characters that cannot be represented, this is why e.g. the 
Cyrillic Zhe \u0436 worked, so we could tell Windows not to do the 
substitution and pass "\u221e" for Infinity, and then the string after 
being processed by the parser will be represented in UTF-8 inside R and 
could be e.g. printed by the RGui console. That is something that could 
be considered, but it will not solve the main problem and it may 
actually cause trouble to users who are used to such substitutions 
(especially when the substitutions are more intuitive, but, that may be 
a matter of opinion).

The main problem is that in normal use, sooner or later R will get to 
the point when it will need to do the conversion to native encoding, and 
in some context where "\uxxxx" escapes will not be possible. One cannot 
reliably work with strings in R that cannot be represented in the 
current native encoding (except when one knows precisely how to avoid 
the conversion in some specific task, but that may be brittle; so the 
best-fit substitution might in principle help here). This problem does 
not exist on Unix/macOS systems where the current native encoding is 
UTF-8 these days, so today it only exists on Windows where UTF-8 cannot 
be the current native encoding. As has been discussed before, even 
though we could rewrite in principle all calls to Windows API to use 
Unicode and have all strings in UTF-8 in R, we would still have problems 
when interfacing with packages that assume strings are in current native 
encoding (without checking), so this problem won't be easy to fix.

Best,
Tomas

On 2/7/19 3:10 PM, Daniel Possenriede wrote:
> There seems to be something odd with "?" on Windows (and not only with
> read.table)
> In native encoding (cp-1252 in my case), "?" gets converted to "8"
>
> x <-  "?"
> Encoding(x)
> #> [1] "unknown"
> print(x)
> #> [1] "8"
> charToRaw(x)
> #> [1] 38
>
> "?" is indeed "8"
>
> identical(x, "8")
> #> [1] TRUE
>
> Everything seems fine if  "?" is UTF-8 encoded.
>
> y <- "\u221E"
> Encoding(y)
> #> [1] "UTF-8"
> print(y)
> #> [1]  "?"
> charToRaw(y)
> #> [1] e2 88 9e
>
> Unless the string is converted back to native encoding.
>
> format(y)
> #> [1] "8"
>
> This ought to be "<U+221E>", equivalently to
>
> format("?")
> #> [1] "<U+221D>"
>
> Session Info:
>
> si <- sessionInfo()
> si$running
> #> [1] "Windows 10 x64 (build 17134)"
> si$R.version$version.string
> #> [1] "R version 3.5.2 (2018-12-20)"
> si$locale
> #> [1]
> "LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"
>
>
>
> Am Do., 7. Feb. 2019 um 14:33 Uhr schrieb David Byrne <
> david.byrne222 at gmail.com>:
>
>> I can confirm that it doesn't happen on Ubuntu 18.04.1 so Peter is
>> most likely correct; it looks like its Windows specific.
>>
>> On Thu, 7 Feb 2019 at 12:55, peter dalgaard <pdalgd at gmail.com> wrote:
>>> This doesn't seem to be happening on MacOS, neither in Terminal nor
>> RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific.
>>> -pd
>>>
>>>> On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com>
>> wrote:
>>>> Bug
>>>> Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
>>>> file containing the infinity symbol (' ? ') results in the infinity
>>>> symbol imported as the number 8. Other Unicode characters seem
>>>> unaffected, example, Zhe: ?
>>>>
>>>> Expected Behavior:
>>>> The imported data.frame should represent the infinity symbol as the
>>>> expected 'Inf' so that normal mathematical operations can be processed
>>>>
>>>> Stack Overflow Post:
>>>> I created a question on Stack Overflow where one other member was able
>>>> to reproduce the same issues I was having. This question can be found
>>>> at:
>>>>
>> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
>>>> Method to Reproduce - 1:
>>>> A simple method to reproduce this issues is to use R-Studio: In the
>>>> console, type the following:
>>>>> read.table(text=" ?", encoding="UTF-8")
>>>> The result should be a data.frame with a single value of '8'
>>>>
>>>> Repeating the same with ? Results in correct expected behavior
>>>>
>>>> Method to Reproduce - 2:
>>>> Create a .csv file containing the infinity and Zhe characters (I have
>>>> attached the file for convenience, hopefully it is no rejected by your
>>>> email service). Launch an interactive session using
>>>>
>>>>> r --vanilla
>>>> Enter the following statement taking care to replace the
>>>> <path-to-file> with the appropriate one:
>>>>
>>>>> read.table("<path-to-file>/unicode_chars.csv", sep=",",
>> encoding="UTF-8")
>>>>
>>>> This should result in a two element data.frame; the first being the
>>>> incorrect value of 8 with an additional <U+FEFF> and the second the
>>>> correct value of Zhe.
>>>>
>>>> Note the additional <U+FEFF> prefixed to the front of the '8'. This
>>>> appears to be a hidden character for the purposes of letting editors
>>>> know the encoding. The following link has some explanation however, it
>>>> states this is caused by excel. The file I created was done so using
>>>> notepad and not Excel.
>>>>
>>>>
>> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
>>>> System Details:
>>>> OS:
>>>>> Windows 10.0.17134 Build 17134
>>>>
>>>> R Version:
>>>>> platform       x86_64-w64-mingw32
>>>>> arch           x86_64
>>>>> os             mingw32
>>>>> system         x86_64, mingw32
>>>>> status
>>>>> major          3
>>>>> minor          4.1
>>>>> year           2017
>>>>> month          06
>>>>> day            30
>>>>> svn rev        72865
>>>>> language       R
>>>>> version.string R version 3.4.1 (2017-06-30)
>>>>> nickname       Single Candle
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Fri Feb  8 13:10:41 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 8 Feb 2019 13:10:41 +0100
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <6f164feb-7b42-22c7-4c78-7bbaeb8778fb@gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
 <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
 <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
 <6f164feb-7b42-22c7-4c78-7bbaeb8778fb@gmail.com>
Message-ID: <0E139419-85C0-4354-9D7D-96B7D8E36B05@gmail.com>

Fortune nomination...

> On 8 Feb 2019, at 13:07 , Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> 
> This is caused by Windows "best fit" default behavior in conversion of unicode characters to characters in the current native encoding: at some point in the past, 8 has been chosen as a good fit for infinity in Windows.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pro|jcn@@h @end|ng |rom gm@||@com  Fri Feb  8 14:49:24 2019
From: pro|jcn@@h @end|ng |rom gm@||@com (ProfJCNash)
Date: Fri, 8 Feb 2019 08:49:24 -0500
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <7b5c5816-ad64-3b9b-03a3-cf1adf33c280@ncf.ca>
References: <23636.2761.752118.1610@stat.math.ethz.ch>
 <7389c349-d3e9-d421-6907-f130149f138b@seanet.com>
 <23642.44993.488084.34323@stat.math.ethz.ch>
 <E46F8E9E-97C7-4F98-B089-0DF982ED42DB@xs4all.nl>
 <CAL6gwnKchKQatZ_JT3ss9_EYeOL=5cwiMGKw9wjKhZoexrj+ug@mail.gmail.com>
 <7b5c5816-ad64-3b9b-03a3-cf1adf33c280@ncf.ca>
Message-ID: <47af8170-e7e1-d610-02c6-1987a7ff5c72@gmail.com>

It may be worth noting that both Avraham and I are members of the

histoRicalg project
(https://gitlab.com/nashjc/histoRicalg) that has some modest funding
from R-Consortium.
The type of concern this nlminb thread raises is why the project was
proposed. That is,
older codes that may predate IEEE arithmetic and modern programming
language processors
often were built with a different understanding of how algorithm
expressions would be
executed.

Documenting the resolution of this issue and others like it will be
welcome and we will hope
to be able to collect such results in a form that may help resolve
similar matters in future.

Best, JN


On 2019-02-06 7:15 a.m., Avraham Adler wrote:

> If it helps, the BLAS I used is compiled to use 6 threads.
>
> On Wed, Feb 6, 2019 at 3:47 AM Berend Hasselman <bhh at xs4all.nl> wrote:
>
>>> On 6 Feb 2019, at 10:58, Martin Maechler <maechler at stat.math.ethz.ch>
>> wrote:
>> .....
>> ---------------------------------------------------------------------------
>>> I summarize what has been reported till:
>>>
>>> Failure in these cases
>>> ========
>>> 1. Kasper K ("Scientific Linux", self compiled R, using Intel's MKL
>>>           for BLAS/LAPACK)
>>> 2. (By Bill Dunlap): Microsoft R Open (MRO) 3.4.2, also using
>>>           MKL with 12 cores
>>> 3. (By Brad Bell)  : R 3.5.2 Fedora 28 (x86_64) pkg, OpenBLAS(?)
>>> 4. (by MM)         : R 3.5.2 Fedora 28 (x86_64) pkg, BLAS+Lapack =
>> OpenBLAS
>>> Success
>>> =======
>>>
>>> - (by MM)        : R-devel, R 3.5.2 patched on FC28, *self compiled* gcc
>> 8.2,
>>>                    using R's BLAS/Lapack
>>> - (by Ralf Stubner): R 3.5.2 from Debian Stable (gcc 6.2) + OpenBLAS
>>> - (by Berend H.)   : R 3.5.2 [from CRAN] on macOS 10.14.3 (BLAS/Lapack
>> ??)
>>
>> R 3.5.2 from CRAN using R's BLAS/Lapack.
>>
>> Berend
>>
>> ....
>>
>>> It would be great if this could be solved...
>>>
>>> Martin
>>>
>>>
>>>
>>>> I have tried passing in the gradient and turning on the trace and it
>> gives nearly the exact same trace with and without the gradient.
>>>    [.......................]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From po@@enr|ede @end|ng |rom gm@||@com  Fri Feb  8 17:12:06 2019
From: po@@enr|ede @end|ng |rom gm@||@com (Daniel Possenriede)
Date: Fri, 8 Feb 2019 17:12:06 +0100
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <6f164feb-7b42-22c7-4c78-7bbaeb8778fb@gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
 <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
 <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
 <6f164feb-7b42-22c7-4c78-7bbaeb8778fb@gmail.com>
Message-ID: <CANu2KkMnP587T7hXP=fgTDHkcwXkitho9zeyjaC+=bs5j_O_6A@mail.gmail.com>

Tomas,

> In my scenario, the conversion is invoked by RGui before returning the
input to the main R loop, even before the input gets to the parser. In
principle, we could change this particular conversion in RGui to avoid the
substitution.

Not sure whether I am missing something here, but I used RStudio for my
examples (I should have said) and David's mentioned RStudio as well, so it
does not seem to be a problem with RGui only.

Another example for the "best fit" behaviour seems to be "?"
("\u03A3", greek capital letter sigma, not "\u2211", n-ary summation):

print("?")
#> [1] "S"

Again with cp1252 on Windows 10, R 3.5.2, RStudio 1.2.1256 preview.

> even though we could rewrite in principle all calls to Windows API to use
Unicode and have all strings in UTF-8 in R, we would still have problems
when interfacing with packages that assume strings are in current native
encoding (without checking), so this problem won't be easy to fix.

Since I regularly encounter the reverse problem, i.e. packages that assume
strings are in UTF-8 encoding without checking (which isn't very
surprising, assuming that most package developers develop on Unix/macOS
systems), I'd say, "rip of the bandaid rather sooner than later". Obviously
I don't know how many bugs would surface in packages if R for Windows'
native encoding were to switch to UTF-8, but these bugs would only be
transitory, I suppose. Whereas there is a steady inflow of
assume-UTF-8-encoding-bugs in new packages and functions with the current
situation.

Best,
Daniel


Am Fr., 8. Feb. 2019 um 13:07 Uhr schrieb Tomas Kalibera <
tomas.kalibera at gmail.com>:

> I can reproduce this behavior on my Windows 10 system in RGui (cp1252):
> when I paste the Unicode infinity symbol into the console, it is treated
> as number 8. This is caused by Windows "best fit" default behavior in
> conversion of unicode characters to characters in the current native
> encoding: at some point in the past, 8 has been chosen as a good fit for
> infinity in Windows. In my scenario, the conversion is invoked by RGui
> before returning the input to the main R loop, even before the input
> gets to the parser. In principle, we could change this particular
> conversion in RGui to avoid the substitution. RGui uses "\uxxxx" escapes
> to pass characters that cannot be represented, this is why e.g. the
> Cyrillic Zhe \u0436 worked, so we could tell Windows not to do the
> substitution and pass "\u221e" for Infinity, and then the string after
> being processed by the parser will be represented in UTF-8 inside R and
> could be e.g. printed by the RGui console. That is something that could
> be considered, but it will not solve the main problem and it may
> actually cause trouble to users who are used to such substitutions
> (especially when the substitutions are more intuitive, but, that may be
> a matter of opinion).
>
> The main problem is that in normal use, sooner or later R will get to
> the point when it will need to do the conversion to native encoding, and
> in some context where "\uxxxx" escapes will not be possible. One cannot
> reliably work with strings in R that cannot be represented in the
> current native encoding (except when one knows precisely how to avoid
> the conversion in some specific task, but that may be brittle; so the
> best-fit substitution might in principle help here). This problem does
> not exist on Unix/macOS systems where the current native encoding is
> UTF-8 these days, so today it only exists on Windows where UTF-8 cannot
> be the current native encoding. As has been discussed before, even
> though we could rewrite in principle all calls to Windows API to use
> Unicode and have all strings in UTF-8 in R, we would still have problems
> when interfacing with packages that assume strings are in current native
> encoding (without checking), so this problem won't be easy to fix.
>
> Best,
> Tomas
>
> On 2/7/19 3:10 PM, Daniel Possenriede wrote:
> > There seems to be something odd with "?" on Windows (and not only with
> > read.table)
> > In native encoding (cp-1252 in my case), "?" gets converted to "8"
> >
> > x <-  "?"
> > Encoding(x)
> > #> [1] "unknown"
> > print(x)
> > #> [1] "8"
> > charToRaw(x)
> > #> [1] 38
> >
> > "?" is indeed "8"
> >
> > identical(x, "8")
> > #> [1] TRUE
> >
> > Everything seems fine if  "?" is UTF-8 encoded.
> >
> > y <- "\u221E"
> > Encoding(y)
> > #> [1] "UTF-8"
> > print(y)
> > #> [1]  "?"
> > charToRaw(y)
> > #> [1] e2 88 9e
> >
> > Unless the string is converted back to native encoding.
> >
> > format(y)
> > #> [1] "8"
> >
> > This ought to be "<U+221E>", equivalently to
> >
> > format("?")
> > #> [1] "<U+221D>"
> >
> > Session Info:
> >
> > si <- sessionInfo()
> > si$running
> > #> [1] "Windows 10 x64 (build 17134)"
> > si$R.version$version.string
> > #> [1] "R version 3.5.2 (2018-12-20)"
> > si$locale
> > #> [1]
> >
> "LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"
> >
> >
> >
> > Am Do., 7. Feb. 2019 um 14:33 Uhr schrieb David Byrne <
> > david.byrne222 at gmail.com>:
> >
> >> I can confirm that it doesn't happen on Ubuntu 18.04.1 so Peter is
> >> most likely correct; it looks like its Windows specific.
> >>
> >> On Thu, 7 Feb 2019 at 12:55, peter dalgaard <pdalgd at gmail.com> wrote:
> >>> This doesn't seem to be happening on MacOS, neither in Terminal nor
> >> RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific.
> >>> -pd
> >>>
> >>>> On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com>
> >> wrote:
> >>>> Bug
> >>>> Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
> >>>> file containing the infinity symbol (' ? ') results in the infinity
> >>>> symbol imported as the number 8. Other Unicode characters seem
> >>>> unaffected, example, Zhe: ?
> >>>>
> >>>> Expected Behavior:
> >>>> The imported data.frame should represent the infinity symbol as the
> >>>> expected 'Inf' so that normal mathematical operations can be processed
> >>>>
> >>>> Stack Overflow Post:
> >>>> I created a question on Stack Overflow where one other member was able
> >>>> to reproduce the same issues I was having. This question can be found
> >>>> at:
> >>>>
> >>
> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
> >>>> Method to Reproduce - 1:
> >>>> A simple method to reproduce this issues is to use R-Studio: In the
> >>>> console, type the following:
> >>>>> read.table(text=" ?", encoding="UTF-8")
> >>>> The result should be a data.frame with a single value of '8'
> >>>>
> >>>> Repeating the same with ? Results in correct expected behavior
> >>>>
> >>>> Method to Reproduce - 2:
> >>>> Create a .csv file containing the infinity and Zhe characters (I have
> >>>> attached the file for convenience, hopefully it is no rejected by your
> >>>> email service). Launch an interactive session using
> >>>>
> >>>>> r --vanilla
> >>>> Enter the following statement taking care to replace the
> >>>> <path-to-file> with the appropriate one:
> >>>>
> >>>>> read.table("<path-to-file>/unicode_chars.csv", sep=",",
> >> encoding="UTF-8")
> >>>>
> >>>> This should result in a two element data.frame; the first being the
> >>>> incorrect value of 8 with an additional <U+FEFF> and the second the
> >>>> correct value of Zhe.
> >>>>
> >>>> Note the additional <U+FEFF> prefixed to the front of the '8'. This
> >>>> appears to be a hidden character for the purposes of letting editors
> >>>> know the encoding. The following link has some explanation however, it
> >>>> states this is caused by excel. The file I created was done so using
> >>>> notepad and not Excel.
> >>>>
> >>>>
> >>
> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
> >>>> System Details:
> >>>> OS:
> >>>>> Windows 10.0.17134 Build 17134
> >>>>
> >>>> R Version:
> >>>>> platform       x86_64-w64-mingw32
> >>>>> arch           x86_64
> >>>>> os             mingw32
> >>>>> system         x86_64, mingw32
> >>>>> status
> >>>>> major          3
> >>>>> minor          4.1
> >>>>> year           2017
> >>>>> month          06
> >>>>> day            30
> >>>>> svn rev        72865
> >>>>> language       R
> >>>>> version.string R version 3.4.1 (2017-06-30)
> >>>>> nickname       Single Candle
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>> --
> >>> Peter Dalgaard, Professor,
> >>> Center for Statistics, Copenhagen Business School
> >>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >>> Phone: (+45)38153501
> >>> Office: A 4.23
> >>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Feb  8 17:23:17 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 8 Feb 2019 17:23:17 +0100
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
Message-ID: <b04b9c8e-3eb2-25e2-1a73-0c2d1a04da34@gmail.com>


I can reproduce with read.table(encoding="UTF-8") in RGui on Windows 10, 
reading a file containing the two UTF-8 characters. The table is read 
correctly into R as documented (both characters are represented in UTF-8 
and marked as such), but, the conversion of Infinity to 8 and of Zhe to 
<U+0436> happens later during printing using print.data.frame(). For 
instance, it currently does not happen during print(as.matrix()). As I 
wrote in more detail in another email in this thread, R sometimes needs 
to convert strings to the current native encoding, Windows converts 
Infinity to 8 by default as "best fit", but fails to convert Zhe, so R 
displays the <U+436>.

It is easiest to only use input files in current native encoding, so one 
could convert before passing them to R and make sure the conversion does 
not have similar problems...? or use R on a non-Windows platform. 
Relying on which R functions/packages can work with non-native encodings 
may be brittle, but of course any R function that documents to work with 
non-native encodings (like read.table(encoding=)) should do so. If not, 
it will be fixed following a bug report.

I am not sure if that is what you had in mind, but conversion of 
character (string) to double is a different matter. as.double() now as 
documented in ?as.double returns NA for "?" (on Linux).

Best
Tomas


On 2/7/19 11:17 AM, David Byrne wrote:
> Bug
> Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
> file containing the infinity symbol (' ? ') results in the infinity
> symbol imported as the number 8. Other Unicode characters seem
> unaffected, example, Zhe: ?
>
> Expected Behavior:
> The imported data.frame should represent the infinity symbol as the
> expected 'Inf' so that normal mathematical operations can be processed
>
> Stack Overflow Post:
> I created a question on Stack Overflow where one other member was able
> to reproduce the same issues I was having. This question can be found
> at:
> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
>
> Method to Reproduce - 1:
> A simple method to reproduce this issues is to use R-Studio: In the
> console, type the following:
>> read.table(text=" ?", encoding="UTF-8")
> The result should be a data.frame with a single value of '8'
>
> Repeating the same with ? Results in correct expected behavior
>
> Method to Reproduce - 2:
> Create a .csv file containing the infinity and Zhe characters (I have
> attached the file for convenience, hopefully it is no rejected by your
> email service). Launch an interactive session using
>
>> r --vanilla
> Enter the following statement taking care to replace the
> <path-to-file> with the appropriate one:
>
>> read.table("<path-to-file>/unicode_chars.csv", sep=",", encoding="UTF-8")
>
> This should result in a two element data.frame; the first being the
> incorrect value of 8 with an additional <U+FEFF> and the second the
> correct value of Zhe.
>
> Note the additional <U+FEFF> prefixed to the front of the '8'. This
> appears to be a hidden character for the purposes of letting editors
> know the encoding. The following link has some explanation however, it
> states this is caused by excel. The file I created was done so using
> notepad and not Excel.
>
> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
>
> System Details:
> OS:
>> Windows 10.0.17134 Build 17134
>
> R Version:
>> platform       x86_64-w64-mingw32
>> arch           x86_64
>> os             mingw32
>> system         x86_64, mingw32
>> status
>> major          3
>> minor          4.1
>> year           2017
>> month          06
>> day            30
>> svn rev        72865
>> language       R
>> version.string R version 3.4.1 (2017-06-30)
>> nickname       Single Candle
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Feb  8 17:31:52 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 8 Feb 2019 11:31:52 -0500
Subject: [Rd] Bug Report: read.table with UTF-8 encoded file imports
 infinity symbol as Integer 8
In-Reply-To: <CANu2KkMnP587T7hXP=fgTDHkcwXkitho9zeyjaC+=bs5j_O_6A@mail.gmail.com>
References: <CAMnF34T+3NEt31htduHX=de+0hkZEgwxOVgMokboAVQFujtrKQ@mail.gmail.com>
 <CAMnF34ROthpv4ysLXaDSJZLD20zhpDnXL6fBu5NtcQH_B8hCJw@mail.gmail.com>
 <F662DDAA-CC89-41A6-AA21-463B60CD89B7@gmail.com>
 <CAMnF34RwmvLf0QRLH2MJ17qucKWJRG3Z6x5_vR8it8FOUmREFQ@mail.gmail.com>
 <CANu2KkOBF+UFA0r7ZEdV-D_G78bPzng+ySp+jh8ZpuV+weMC8A@mail.gmail.com>
 <6f164feb-7b42-22c7-4c78-7bbaeb8778fb@gmail.com>
 <CANu2KkMnP587T7hXP=fgTDHkcwXkitho9zeyjaC+=bs5j_O_6A@mail.gmail.com>
Message-ID: <8d6e6d3a-922d-190c-8c7b-0901dd5d8300@gmail.com>

On 08/02/2019 11:12 a.m., Daniel Possenriede wrote:
> Tomas,
> 
>> In my scenario, the conversion is invoked by RGui before returning the
> input to the main R loop, even before the input gets to the parser. In
> principle, we could change this particular conversion in RGui to avoid the
> substitution.
> 
> Not sure whether I am missing something here, but I used RStudio for my
> examples (I should have said) and David's mentioned RStudio as well, so it
> does not seem to be a problem with RGui only.
> 
> Another example for the "best fit" behaviour seems to be "?"
> ("\u03A3", greek capital letter sigma, not "\u2211", n-ary summation):
> 
> print("?")
> #> [1] "S"
> 
> Again with cp1252 on Windows 10, R 3.5.2, RStudio 1.2.1256 preview.
> 
>> even though we could rewrite in principle all calls to Windows API to use
> Unicode and have all strings in UTF-8 in R, we would still have problems
> when interfacing with packages that assume strings are in current native
> encoding (without checking), so this problem won't be easy to fix.
> 
> Since I regularly encounter the reverse problem, i.e. packages that assume
> strings are in UTF-8 encoding without checking (which isn't very
> surprising, assuming that most package developers develop on Unix/macOS
> systems), I'd say, "rip of the bandaid rather sooner than later". Obviously
> I don't know how many bugs would surface in packages if R for Windows'
> native encoding were to switch to UTF-8, but these bugs would only be
> transitory, I suppose. Whereas there is a steady inflow of
> assume-UTF-8-encoding-bugs in new packages and functions with the current
> situation.

Just one minor comment:  it is *impossible* for R for Windows "native" 
encoding to switch to UTF-8, since Windows doesn't support that.  The 
necessary change (which I'd support, but it's a really large amount of 
work) would be for R to drop its use of native encodings internally. 
Convert everything to UTF-8 on the way in, convert to native on the way out.

This is a large amount of work because R has preferred native encodings 
basically forever, so there are tons of locations needing changes, and a 
large effort would be required to make them.  It would likely be easier 
for Windows to add UTF-8 as a native encoding.  Converting between that 
and Windows internal UTF-16 is nearly trivial, much easier than many of 
the conversions it does.  And Microsoft has revenues of $90 billion per 
year, while R Core only has a few individuals donating their time:  so 
wouldn't it make more sense to ask them to act like responsible members 
of the computing community?

Duncan Murdoch

> 
> Best,
> Daniel
> 
> 
> Am Fr., 8. Feb. 2019 um 13:07 Uhr schrieb Tomas Kalibera <
> tomas.kalibera at gmail.com>:
> 
>> I can reproduce this behavior on my Windows 10 system in RGui (cp1252):
>> when I paste the Unicode infinity symbol into the console, it is treated
>> as number 8. This is caused by Windows "best fit" default behavior in
>> conversion of unicode characters to characters in the current native
>> encoding: at some point in the past, 8 has been chosen as a good fit for
>> infinity in Windows. In my scenario, the conversion is invoked by RGui
>> before returning the input to the main R loop, even before the input
>> gets to the parser. In principle, we could change this particular
>> conversion in RGui to avoid the substitution. RGui uses "\uxxxx" escapes
>> to pass characters that cannot be represented, this is why e.g. the
>> Cyrillic Zhe \u0436 worked, so we could tell Windows not to do the
>> substitution and pass "\u221e" for Infinity, and then the string after
>> being processed by the parser will be represented in UTF-8 inside R and
>> could be e.g. printed by the RGui console. That is something that could
>> be considered, but it will not solve the main problem and it may
>> actually cause trouble to users who are used to such substitutions
>> (especially when the substitutions are more intuitive, but, that may be
>> a matter of opinion).
>>
>> The main problem is that in normal use, sooner or later R will get to
>> the point when it will need to do the conversion to native encoding, and
>> in some context where "\uxxxx" escapes will not be possible. One cannot
>> reliably work with strings in R that cannot be represented in the
>> current native encoding (except when one knows precisely how to avoid
>> the conversion in some specific task, but that may be brittle; so the
>> best-fit substitution might in principle help here). This problem does
>> not exist on Unix/macOS systems where the current native encoding is
>> UTF-8 these days, so today it only exists on Windows where UTF-8 cannot
>> be the current native encoding. As has been discussed before, even
>> though we could rewrite in principle all calls to Windows API to use
>> Unicode and have all strings in UTF-8 in R, we would still have problems
>> when interfacing with packages that assume strings are in current native
>> encoding (without checking), so this problem won't be easy to fix.
>>
>> Best,
>> Tomas
>>
>> On 2/7/19 3:10 PM, Daniel Possenriede wrote:
>>> There seems to be something odd with "?" on Windows (and not only with
>>> read.table)
>>> In native encoding (cp-1252 in my case), "?" gets converted to "8"
>>>
>>> x <-  "?"
>>> Encoding(x)
>>> #> [1] "unknown"
>>> print(x)
>>> #> [1] "8"
>>> charToRaw(x)
>>> #> [1] 38
>>>
>>> "?" is indeed "8"
>>>
>>> identical(x, "8")
>>> #> [1] TRUE
>>>
>>> Everything seems fine if  "?" is UTF-8 encoded.
>>>
>>> y <- "\u221E"
>>> Encoding(y)
>>> #> [1] "UTF-8"
>>> print(y)
>>> #> [1]  "?"
>>> charToRaw(y)
>>> #> [1] e2 88 9e
>>>
>>> Unless the string is converted back to native encoding.
>>>
>>> format(y)
>>> #> [1] "8"
>>>
>>> This ought to be "<U+221E>", equivalently to
>>>
>>> format("?")
>>> #> [1] "<U+221D>"
>>>
>>> Session Info:
>>>
>>> si <- sessionInfo()
>>> si$running
>>> #> [1] "Windows 10 x64 (build 17134)"
>>> si$R.version$version.string
>>> #> [1] "R version 3.5.2 (2018-12-20)"
>>> si$locale
>>> #> [1]
>>>
>> "LC_COLLATE=German_Germany.1252;LC_CTYPE=German_Germany.1252;LC_MONETARY=German_Germany.1252;LC_NUMERIC=C;LC_TIME=German_Germany.1252"
>>>
>>>
>>>
>>> Am Do., 7. Feb. 2019 um 14:33 Uhr schrieb David Byrne <
>>> david.byrne222 at gmail.com>:
>>>
>>>> I can confirm that it doesn't happen on Ubuntu 18.04.1 so Peter is
>>>> most likely correct; it looks like its Windows specific.
>>>>
>>>> On Thu, 7 Feb 2019 at 12:55, peter dalgaard <pdalgd at gmail.com> wrote:
>>>>> This doesn't seem to be happening on MacOS, neither in Terminal nor
>>>> RStudio, (R 3.5.1, R-devel, R-patched). So probably Windows specific.
>>>>> -pd
>>>>>
>>>>>> On 7 Feb 2019, at 11:17 , David Byrne <david.byrne222 at gmail.com>
>>>> wrote:
>>>>>> Bug
>>>>>> Using read.table(file, encoding="UTF-8") to import a UTF-8 encoded
>>>>>> file containing the infinity symbol (' ? ') results in the infinity
>>>>>> symbol imported as the number 8. Other Unicode characters seem
>>>>>> unaffected, example, Zhe: ?
>>>>>>
>>>>>> Expected Behavior:
>>>>>> The imported data.frame should represent the infinity symbol as the
>>>>>> expected 'Inf' so that normal mathematical operations can be processed
>>>>>>
>>>>>> Stack Overflow Post:
>>>>>> I created a question on Stack Overflow where one other member was able
>>>>>> to reproduce the same issues I was having. This question can be found
>>>>>> at:
>>>>>>
>>>>
>> https://stackoverflow.com/questions/54522196/r-read-table-with-utf-8-encoded-file-reads-infinity-symbol-as-8-int
>>>>>> Method to Reproduce - 1:
>>>>>> A simple method to reproduce this issues is to use R-Studio: In the
>>>>>> console, type the following:
>>>>>>> read.table(text=" ?", encoding="UTF-8")
>>>>>> The result should be a data.frame with a single value of '8'
>>>>>>
>>>>>> Repeating the same with ? Results in correct expected behavior
>>>>>>
>>>>>> Method to Reproduce - 2:
>>>>>> Create a .csv file containing the infinity and Zhe characters (I have
>>>>>> attached the file for convenience, hopefully it is no rejected by your
>>>>>> email service). Launch an interactive session using
>>>>>>
>>>>>>> r --vanilla
>>>>>> Enter the following statement taking care to replace the
>>>>>> <path-to-file> with the appropriate one:
>>>>>>
>>>>>>> read.table("<path-to-file>/unicode_chars.csv", sep=",",
>>>> encoding="UTF-8")
>>>>>>
>>>>>> This should result in a two element data.frame; the first being the
>>>>>> incorrect value of 8 with an additional <U+FEFF> and the second the
>>>>>> correct value of Zhe.
>>>>>>
>>>>>> Note the additional <U+FEFF> prefixed to the front of the '8'. This
>>>>>> appears to be a hidden character for the purposes of letting editors
>>>>>> know the encoding. The following link has some explanation however, it
>>>>>> states this is caused by excel. The file I created was done so using
>>>>>> notepad and not Excel.
>>>>>>
>>>>>>
>>>>
>> https://medium.freecodecamp.org/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7
>>>>>> System Details:
>>>>>> OS:
>>>>>>> Windows 10.0.17134 Build 17134
>>>>>>
>>>>>> R Version:
>>>>>>> platform       x86_64-w64-mingw32
>>>>>>> arch           x86_64
>>>>>>> os             mingw32
>>>>>>> system         x86_64, mingw32
>>>>>>> status
>>>>>>> major          3
>>>>>>> minor          4.1
>>>>>>> year           2017
>>>>>>> month          06
>>>>>>> day            30
>>>>>>> svn rev        72865
>>>>>>> language       R
>>>>>>> version.string R version 3.4.1 (2017-06-30)
>>>>>>> nickname       Single Candle
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> --
>>>>> Peter Dalgaard, Professor,
>>>>> Center for Statistics, Copenhagen Business School
>>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>> Phone: (+45)38153501
>>>>> Office: A 4.23
>>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sat Feb  9 01:47:27 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 8 Feb 2019 16:47:27 -0800
Subject: [Rd] PATCH: Asserting that 'connection' used has not changed +
 R_GetConnection2()
In-Reply-To: <CAFDcVCQw6Cfus+sSi5ttk9cVwkwUbHwaA_Lr3EtBvW_ynry4HA@mail.gmail.com>
References: <CAFDcVCQw6Cfus+sSi5ttk9cVwkwUbHwaA_Lr3EtBvW_ynry4HA@mail.gmail.com>
Message-ID: <CAFDcVCRRy-hnY97Pky2aVE9+Ku-NXR50wn8YvNod=R3_wPSEZw@mail.gmail.com>

Bumping this thread in the hope to catch the attention from R core.

As I try to argue in my original post, given the existing internal
structure of connections, I don't think it's too hard to add protection
against the use of corrupted R connection.

Writing to corrupted connection is a mistake that currently may pass
silently while corrupting a non-intended target.

Henrik

On Tue, Oct 30, 2018, 19:51 Henrik Bengtsson <henrik.bengtsson at gmail.com
wrote:

> SUMMARY:
>
> I'm proposing that R assert that 'connection' options have not changed
> since first created such that R will produce the following error:
>
> > fh <- file("a.txt", open = "w+")
> > cat("hello\n", file = fh)
> > close(fh)
>
> > fh2 <- file("b.txt", open = "w+")
> > cat("world\n", file = fh2)
>
> > cat("hello again\n", file = fh)
> Error in cat("hello again\n", file = fh) :
>   invalid connection (non-existing 'conn_id')
>
> Note that, currently in R, the latter silently writes to 'b.txt' - not
> 'a.txt' (for more details, see
> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/81).
>
>
> BACKGROUND:
>
> In R, connections are indexed by their (zero-based) row indices in the
> table of available connections.  For example,
>
> > fh <- file("a.txt", open = "w")
> > showConnections(all = TRUE)
>   description class      mode text   isopen   can read can write
> 0 "stdin"     "terminal" "r"  "text" "opened" "yes"    "no"
> 1 "stdout"    "terminal" "w"  "text" "opened" "no"     "yes"
> 2 "stderr"    "terminal" "w"  "text" "opened" "no"     "yes"
> 3 "a.txt"     "file"     "w"  "text" "opened" "no"     "yes"
> > con <- getConnection(3)
> > identical(con, fh)
> [1] TRUE
>
>
> ISSUE:
>
> The problem with the current design/implementation where connections
> are referred to by their index (only), is that
>
> (i) the table of connections changes over time and
> (ii) connection indices are recycled.
>
> Because a `connection` object holds the connection row index, it means
> that *the actual underlying connection that a `connection` object
> refers to may change over its lifetime*.
>
>
> SUGGESTION:
>
> Make use of the 'Rconn' struct field 'id', which is unique, to assert
> that the 'connection' object used is referring to the
> original/expected connection.  The 'id' field is available via
> attribute 'conn_id' part of a 'connection' object.
>
>
> PATCH:
>
> See attached 'connection.patch' file (or
>
> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/81#issuecomment-434210222
> ).
> The patch introduces a new SEXP R_GetConnection2(SEXP sConn) function,
> which looks up a connection by its index *and* the 'id' field. This
> function is backward compatible with R_GetConnection(), which looks up
> a connection by its index (only). In addition, R_GetConnection2() also
> accepts 'sConn' of type integer, which the looks up the connection
> similar to how the internal getConnection() function does it.
>
> Comment: The patch is just one of many alternatives.  Hopefully, it
> helps clarify what I'm suggesting.  It passes 'make check' and I've
> tested it on a few packages of mine that make heavy use of different
> types of connections.
>
> In addition to "overridden" connections, the patch protects against
> invalid 'connection':s that have been serialized, e.g.
>
> > fh2 <- file("b.txt", open = "w+")
> > saveRDS(fh2, file = "fh2.rds")
> > fh3 <- readRDS("fh2.rds")
> > attr(fh2, "conn_id")
> <pointer: 0x78>
> > attr(fh3, "conn_id")
> <pointer: (nil)>  #<== NIL because external pointer was lost when
> serialized
> > isOpen(fh2)
> [1] TRUE
> > isOpen(fh3)
> Error in isOpen(fh3) : invalid connection ('conn_id' is NULL)
>
> This is useful, when for instance 'connection':s are (incorrectly)
> passed to background R sessions (e.g. PSOCK cluster nodes).
>
>
> SEE ALSO:
>
> * More details of the above are scribbled down on
> https://github.com/HenrikBengtsson/Wishlist-for-R/issues/81
> * R-devel post 'closeAllConnections() can really mess things up',
> 2016-10-30,
> https://stat.ethz.ch/pipermail/r-devel/2016-October/073331.html
>
> All the best,
>
> Henrik
>

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Sat Feb  9 02:46:19 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abs Spurdle)
Date: Sat, 9 Feb 2019 14:46:19 +1300
Subject: [Rd] Runnable R packages
In-Reply-To: <CAB-BFRoicRyFpLRyLLedPrGrY2VPzcJoMYqk4-GKKf8ScCEhqg@mail.gmail.com>
References: <a8d7658b8d70467987e724724667ad19@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczMRW=8kHvxA3WazD_sF_hTDfhkpXxAe-QBkxos69F0VmA@mail.gmail.com>
 <CAB8pepwO_PW+2N2ZS=iUWUBPxOSkoyEnPaVB7ZTgh_re5VJfWA@mail.gmail.com>
 <CAB-BFRoicRyFpLRyLLedPrGrY2VPzcJoMYqk4-GKKf8ScCEhqg@mail.gmail.com>
Message-ID: <CAB8pepzfgWYkVQfivksOx_h5y0AW5=Tz-RLo_BKqb6cWfZCchw@mail.gmail.com>

I'm not sure whether GCC is in Rtools or not.
I will check on Monday.

However, that's not the main point.
In Rtools, there's nothing like the following:

R CMD Rpkg2exe -o my_r_application.exe my_r_package

or

R CMD Rpkg2exe -o my_r_application.exe my_r_package_0.1.0.tar.gz

Which would convert an R package into an executable file.


On Thu, Feb 7, 2019 at 9:38 PM Peter Meissner <retep.meissner at gmail.com>
wrote:

> Doesn't Rtools provide everything needed to build R packages and R on
> Windows - including gcc?
>
>>
>>

	[[alternative HTML version deleted]]


From @ndre_m|ku|ec @end|ng |rom hotm@||@com  Sat Feb  9 06:01:18 2019
From: @ndre_m|ku|ec @end|ng |rom hotm@||@com (Andre Mikulec)
Date: Sat, 9 Feb 2019 05:01:18 +0000
Subject: [Rd] Set the number of threads using openmp with .Fortran?
In-Reply-To: <CAJA1VFyubjLC0JYdB1g3c0t7ZLmPv-a1_KWguqz68-mknfc5fg@mail.gmail.com>
References: <CAJA1VFy0ub73Wa_rWFv1Vcvthsjp7_AC9OBd=1pMnr+59HSBXQ@mail.gmail.com>
 <CAJA1VFy4eOz4q=zi8A-p+hTgPcmpq27QL-OACu0r=Cb4hX3Jpw@mail.gmail.com>,
 <CAJA1VFyubjLC0JYdB1g3c0t7ZLmPv-a1_KWguqz68-mknfc5fg@mail.gmail.com>
Message-ID: <DM6PR03MB4316C620405078C0B5CD453D9C6A0@DM6PR03MB4316.namprd03.prod.outlook.com>

Ignacio,
Maybe this is something else to try.
Write back and explain if this works or not.

Parallel Programming in Fortran 95 using OpenMP
OMP_NUM_THREADS
This environment variable specifies the number of threads to be used during execution of
the parallel regions
https://www.openmp.org/wp-content/uploads/F95_OpenMPv1_v2.pdf

Andre Mikulec
Andre_Mikulec at Hotmail.com

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Ignacio Martinez <ignacio82 at gmail.com>
Sent: Saturday, February 2, 2019 5:14 PM
To: R-devel
Subject: Re: [Rd] Set the number of threads using openmp with .Fortran?


understanding is that this should also work on windows, is that correct?*
If so, what should I do? differently?

To get it to work on Linux, I modified my R script as follows:

#' OpenMP Hello World
#'
#' @param nthreads The number of threads that you want to use
#' @example
#' hello(nthreads=2)
#' @export
#' @useDynLib helloOpenMP, .registration = TRUE

hello <- function(nthreads=4) {
   (OpenMPController::omp_set_num_threads(nthreads))
  .Fortran("hello")
  return('Each thread will say hi to you!')
}

> hello(nthreads = 2) Hello from           0
 Hello from           1
[1] "Each thread will say hi to you!"




you!" without the Hello from X

Thanks for your help,

Ignacio





On Sat, Feb 2, 2019 at 11:34 AM Ignacio Martinez <ignacio82 at gmail.com>
wrote:

>
>
> I was able to make some progress by using this
> <https://github.com/bert9bert/ParallelForest/blob/master/src/Makevars> as
> a reference. Now:
>
> *This is my makevars:*
> #####  Compiler flags  #####
> PKG_FCFLAGS = $(SHLIB_OPENMP_FFLAGS)
> PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)
>
> #####  Phony target for R's build system to invoke  #####
> all: $(SHLIB)
>
> #####  Clean target  #####
> clean:
> rm -f *.o *.mod
>
> And when I run my hello world function all the threads are used
> regardless of what i specify:
>
> > hello(ncores = 2) Hello from           1
>  Hello from           3
>  Hello from           0
>  Hello from           9
>  Hello from           8
>  Hello from           2
>  Hello from           6
>  Hello from          10
>  Hello from          11
>  Hello from           5
>  Hello from           7
>  Hello from           4
> $ncores
> [1] 2
>
>
>
> What am I missing? My Fortran subroutine uses !$call
> omp_set_num_threads(ncores) to set the number of threads. Why is this
> not working? How can I fix it?
>
> Thanks a lot for the help
>
> Ignacio
>
>
> On Fri, Feb 1, 2019 at 4:51 PM Ignacio Martinez <ignacio82 at gmail.com>
> wrote:
>
>> Hi everybody,
>>
>> I'm trying to develop an R package with Fortran and OpenMP. I wrote a
>> simple hello world but I'm not able to set the number of threads. I found this
>> old email chain
>> <http://r.789695.n4.nabble.com/Set-the-number-of-threads-using-openmp-with-C-td2284685.html> and
>> I tried to set my compile instructions accordingly but i had no luck.
>>
>> *This is my makevars:*
>>
>> PKG_FCFLAGS="-fno-stack-protector"
>> F90FLAGS =  "-fopenmp"
>> LDFLAGS = "-fopenmp"
>>
>> *This is my Fortran module:*
>>
>> module hello_openmp
>>    use omp_lib
>>    implicit none
>>    contains
>>
>> subroutine hello(ncores) bind(C, name="hello_")
>>   use, intrinsic                                         ::
>> iso_c_binding, only : c_double, c_int
>>   integer(c_int), intent(in)                             :: ncores
>>   integer                                                :: iam
>>   ! Specify number of threads to use:
>>   !$call omp_set_num_threads(ncores)
>>   !$omp parallel private(iam)
>>   iam=omp_get_thread_num()
>>   !$omp critical
>>   write(*,*) 'Hello from', iam
>>   !$omp end critical
>>   !$omp end parallel
>> end subroutine hello
>>
>> end module hello_openmp
>>
>>
>> *and this is my R function:*
>>
>> #'@export
>> #'@useDynLib helloOpenMP, .registration = TRUE
>>
>> hello <- function(ncores=4) {
>>   .Fortran("hello", ncores = as.integer(ncores))
>> }
>>
>>
>> *Alas, when I call hello things only run with one thread:*
>>
>> > hello(ncores = 2)$ncores
>>  Hello from           0
>> [1] 2
>>
>>
>> Could you point me in the right direction? What am I missing?
>>
>>
>> Thanks,
>>
>>
>> Ignacio
>>
>>

        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Sun Feb 10 17:33:25 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Sun, 10 Feb 2019 16:33:25 +0000 (UTC)
Subject: [Rd] Extract.data.frame.Rd about $.data.frame
References: <2093541195.1179128.1549816405629.ref@mail.yahoo.com>
Message-ID: <2093541195.1179128.1549816405629@mail.yahoo.com>

In R devel, data.frame method of '$' has been removed, but this part of "Details" section of Extract.data.frame.Rd still implies existence of the method.

  The \code{data.frame} method for \code{$}, treats \code{x} as a
  list, except that (as of R-3.1.0) partial matching of \code{name} to
  the names of \code{x} will generate a warning; this may become an
  error in future versions.  The replacement method checks
  \code{value} for the correct number of rows, and replicates it if
  necessary.


Statement from before R 3.1.0 could be used again:

  There is no \code{data.frame} method for \code{$}, so \code{x$name}
  uses the default method which treats \code{x} as a list.  There is a
  replacement method which checks \code{value} for the correct number
  of rows, and replicates it if necessary.


From jono @end|ng |rom jc@rro||@com@@u  Mon Feb 11 11:49:42 2019
From: jono @end|ng |rom jc@rro||@com@@u (Jonathan Carroll)
Date: Mon, 11 Feb 2019 21:19:42 +1030
Subject: [Rd] make.unique rbind examples
Message-ID: <CAAjDRiiacrP1aa8fn+_AEzqfABRzVPbsPrW2gkdRS2VsQB0G4A@mail.gmail.com>

The final two examples in ?make.unique do not appear to be relevant to
that function, namely

rbind(data.frame(x = 1), data.frame(x = 2), data.frame(x = 3))
rbind(rbind(data.frame(x = 1), data.frame(x = 2)), data.frame(x = 3))

both producing

  x
1 1
2 2
3 3

(identically) on R 3.4.3 and 3.5.1. Following a brief discussion on
Twitter, Rich FitzJohn [1] identified that under R 1.8.0 (circa 2003,
around the time these examples were added) the rownames for the output
of these lines was c("1", "11", "12"). This suggests that perhaps the
example was added to demonstrate behaviour which is no longer
supported.

A more relevant example might be

data.frame(x = 1, x = 2, x = 3)

producing

  x x.1 x.2
1 1   2   3

or, perhaps more in keeping with the original intention,

rbind(data.frame(x = 1, row.names = "a"), data.frame(x = 2, row.names
= "a"), data.frame(x = 3, row.names = "a"))

producing output with rownames c("a", "a1", "a2").

Regards,

- Jonathan.

[1] https://twitter.com/rgfitzjohn/status/1094885131532275712


From p@u|john32 @end|ng |rom gm@||@com  Thu Feb 14 20:02:12 2019
From: p@u|john32 @end|ng |rom gm@||@com (Paul Johnson)
Date: Thu, 14 Feb 2019 13:02:12 -0600
Subject: [Rd] Proposed function file.backup
Message-ID: <CAErODj8VTDF-XYR4H1Bq34q9p-tsJaL_ni9iKHBA6+hT=AL5wg@mail.gmail.com>

Dear R Core:

In the kutils package, I wrote a function that is so handy that I would
like to ask you put it in R itself.

file.backup() will look at a file, find its last modification time, and
create a new backup with a name that appends YYYYMMDD-HHMM to the file
name. So now, whenever I worry that running write.csv or saving a graph
might destroy something valuable, I use an idiom like

fn <- "filename.csv"
file.backup(fn)
write.csv(fn)

So If "filename.csv" already exists, it will get a backup copy.  If an old
backup version exists, the function doesn't re-copy.  In my workflow, this
is very convenient and it could be integrated with other R file writers
that have overwrite as a parameter.  If overwrite could be set as "backup"
instead of TRUE or FALSE, it would be convenient.

I sincerely hope you will consider it:

##' Create a backup version of a file by renaming it.
##'
##' Inserts the date-time of the most recent modification at the
##' end of the file name, before the extension.
##'
##' Return is the new file name that was created, using whatever
##' path information was provided in the file's original name. However,
##' the fullpath argument can be set to TRUE, so a path with the
##' full directory name will be created and returned.
##'
##' @param name A character string for the name of the file.
##' @param fullpath Return the full directory path to the
##'     file. Default FALSE, return only the file name.
##' @param keep.old If FALSE (default), rename the file. Otherwise, keep
old copy.
##' @param verbose If TRUE, list the files in the output directory
##' @author Shadi Pirhosseinloo <shadi@@ku.edu> Paul Johnson <pauljohn@@
ku.edu>
##' @return The name of the newly created file.
##' @importFrom tools file_ext
##' @importFrom tools file_path_sans_ext
##' @export
##' @examples
##' tdir <- tempdir()
##' owd <- getwd()
##'
##' setwd(tdir)
##' system("touch test.1.txt")
##' system("touch test.2.txt")
##' system("touch test.3.txt")
##' system("touch test.4.txt")
##' system("touch test.5.txt")
##' ## note: no extension next
##' system("touch test.6")
##' list.files()
##' file.backup("test.1.txt")
##' file.backup("test.2.txt", fullpath=TRUE)
##' list.files()
##' setwd(owd)
##' file.backup(file.path(tdir, "test.3.txt"))
##' ## Next should be same path because input had a full path
##' file.backup(file.path(tdir, "test.4.txt"), fullpath=TRUE)
##' file.backup(file.path(tdir, "test.5.txt"), fullpath = TRUE, verbose =
TRUE)
##' file.backup(file.path(tdir, "test.6"))
file.backup <- function(name, fullpath = FALSE, keep.old = FALSE, verbose =
FALSE){
    if(!file.exists(name)){
        MESSG <- paste("file", name, "does not exist. No backup created.")
        warning(MESSG)
        return(NULL)
    }
    dir.source <- dirname(normalizePath(name))

    date_cr <- base::format(base::file.info(name)$mtime, "%Y%m%d-%H%M")
    ext_name <- tools::file_ext(name)
    noext_name <- tools::file_path_sans_ext(name)
    new_name <- paste0(noext_name, "-", date_cr,
                       if(!ext_name == "") {paste0( ".", ext_name)})

    ## Abort if new file name already exists
    if (file.exists(new_name)){
        MESSG <- paste("backup file already exists. No new backup created.")
        warning(MESSG)
        return(new_name)
    }
    ret <- if(keep.old){
               file.copy(name, new_name, recursive = TRUE, overwrite = TRUE,
                         copy.mode = TRUE, copy.date = TRUE)
           }else{
               file.rename(name, new_name)
           }
    if(!ret) {
        MESSG <- paste("file.rename(", name, ",", new_name, "failed")
        stop(MESSG)
    }
    if(verbose){
        cat("Full file list of directory:", dir.source, "\n")
        print(list.files(dir.source))
        cat("End of file list\n")
    }
    if(fullpath){
        new_name_fullpath <- normalizePath(new_name)
        return(new_name_fullpath)
    }

    ## else, give back adjusted with same path information it had
    new_name
}







-- 
Paul E. Johnson   http://pj.freefaculty.org
Director, Center for Research Methods and Data Analysis http://crmda.ku.edu

To write to me directly, please address me at pauljohn at ku.edu.

	[[alternative HTML version deleted]]


From br|@n @end|ng |rom br@verock@com  Thu Feb 14 21:29:47 2019
From: br|@n @end|ng |rom br@verock@com (Brian G. Peterson)
Date: Thu, 14 Feb 2019 14:29:47 -0600
Subject: [Rd] Proposed function file.backup
In-Reply-To: <CAErODj8VTDF-XYR4H1Bq34q9p-tsJaL_ni9iKHBA6+hT=AL5wg@mail.gmail.com>
References: <CAErODj8VTDF-XYR4H1Bq34q9p-tsJaL_ni9iKHBA6+hT=AL5wg@mail.gmail.com>
Message-ID: <185684ec57ac1429e42a1c35fb812bf7eeec736b.camel@braverock.com>

Paul,

Why not just pull file.backup our of kutils and put it in its own stand
alone package?

-- 
Brian
On Thu, 2019-02-14 at 13:02 -0600, Paul Johnson wrote:
> Dear R Core:
> 
> In the kutils package, I wrote a function that is so handy that I
> would like to ask you put it in R itself.
> 
> file.backup() will look at a file, find its last modification time,
> and create a new backup with a name that appends YYYYMMDD-HHMM to the
> file name. So now, whenever I worry that running write.csv or saving
> a graph might destroy something valuable, I use an idiom like
> 
> fn <- "filename.csv"
> file.backup(fn)
> write.csv(fn)
> 
> So If "filename.csv" already exists, it will get a backup copy.  If
> an old backup version exists, the function doesn't re-copy.  In my
> workflow, this is very convenient and it could be integrated with
> other R file writers that have overwrite as a parameter.  If
> overwrite could be set as "backup" instead of TRUE or FALSE, it would
> be convenient.
> 
> I sincerely hope you will consider it:
> 
> ##' Create a backup version of a file by renaming it.
> ##'
> ##' Inserts the date-time of the most recent modification at the
> ##' end of the file name, before the extension.
> ##'
> ##' Return is the new file name that was created, using whatever
> ##' path information was provided in the file's original name.
> However,
> ##' the fullpath argument can be set to TRUE, so a path with the
> ##' full directory name will be created and returned.
> ##'
> ##' @param name A character string for the name of the file.
> ##' @param fullpath Return the full directory path to the
> ##'     file. Default FALSE, return only the file name.
> ##' @param keep.old If FALSE (default), rename the file. Otherwise,
> keep
> old copy.
> ##' @param verbose If TRUE, list the files in the output directory
> ##' @author Shadi Pirhosseinloo <shadi@@ku.edu> Paul Johnson
> <pauljohn@@
> ku.edu>
> ##' @return The name of the newly created file.
> ##' @importFrom tools file_ext
> ##' @importFrom tools file_path_sans_ext
> ##' @export
> ##' @examples
> ##' tdir <- tempdir()
> ##' owd <- getwd()
> ##'
> ##' setwd(tdir)
> ##' system("touch test.1.txt")
> ##' system("touch test.2.txt")
> ##' system("touch test.3.txt")
> ##' system("touch test.4.txt")
> ##' system("touch test.5.txt")
> ##' ## note: no extension next
> ##' system("touch test.6")
> ##' list.files()
> ##' file.backup("test.1.txt")
> ##' file.backup("test.2.txt", fullpath=TRUE)
> ##' list.files()
> ##' setwd(owd)
> ##' file.backup(file.path(tdir, "test.3.txt"))
> ##' ## Next should be same path because input had a full path
> ##' file.backup(file.path(tdir, "test.4.txt"), fullpath=TRUE)
> ##' file.backup(file.path(tdir, "test.5.txt"), fullpath = TRUE,
> verbose =
> TRUE)
> ##' file.backup(file.path(tdir, "test.6"))
> file.backup <- function(name, fullpath = FALSE, keep.old = FALSE,
> verbose =
> FALSE){
>     if(!file.exists(name)){
>         MESSG <- paste("file", name, "does not exist. No backup
> created.")
>         warning(MESSG)
>         return(NULL)
>     }
>     dir.source <- dirname(normalizePath(name))
> 
>     date_cr <- base::format(base::file.info(name)$mtime, "%Y%m%d-
> %H%M")
>     ext_name <- tools::file_ext(name)
>     noext_name <- tools::file_path_sans_ext(name)
>     new_name <- paste0(noext_name, "-", date_cr,
>                        if(!ext_name == "") {paste0( ".", ext_name)})
> 
>     ## Abort if new file name already exists
>     if (file.exists(new_name)){
>         MESSG <- paste("backup file already exists. No new backup
> created.")
>         warning(MESSG)
>         return(new_name)
>     }
>     ret <- if(keep.old){
>                file.copy(name, new_name, recursive = TRUE, overwrite
> = TRUE,
>                          copy.mode = TRUE, copy.date = TRUE)
>            }else{
>                file.rename(name, new_name)
>            }
>     if(!ret) {
>         MESSG <- paste("file.rename(", name, ",", new_name, "failed")
>         stop(MESSG)
>     }
>     if(verbose){
>         cat("Full file list of directory:", dir.source, "\n")
>         print(list.files(dir.source))
>         cat("End of file list\n")
>     }
>     if(fullpath){
>         new_name_fullpath <- normalizePath(new_name)
>         return(new_name_fullpath)
>     }
> 
>     ## else, give back adjusted with same path information it had
>     new_name
> }
> 
> 
> 
> 
> 
> 
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb 15 10:15:56 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 Feb 2019 10:15:56 +0100
Subject: [Rd] Extract.data.frame.Rd about $.data.frame
In-Reply-To: <2093541195.1179128.1549816405629@mail.yahoo.com>
References: <2093541195.1179128.1549816405629.ref@mail.yahoo.com>
 <2093541195.1179128.1549816405629@mail.yahoo.com>
Message-ID: <23654.33612.376322.412414@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>     on Sun, 10 Feb 2019 16:33:25 +0000 writes:

    > In R devel, data.frame method of '$' has been removed, but this part of "Details" section of Extract.data.frame.Rd still implies existence of the method.
    > The \code{data.frame} method for \code{$}, treats \code{x} as a
    > list, except that (as of R-3.1.0) partial matching of \code{name} to
    > the names of \code{x} will generate a warning; this may become an
    > error in future versions.  The replacement method checks
    > \code{value} for the correct number of rows, and replicates it if
    > necessary.


    > Statement from before R 3.1.0 could be used again:

    > There is no \code{data.frame} method for \code{$}, so \code{x$name}
    > uses the default method which treats \code{x} as a list.  There is a
    > replacement method which checks \code{value} for the correct number
    > of rows, and replicates it if necessary.

Thanks a lot, Suharto, for finding and reporting this!
I've added a 2 x 2 words of explanation to make it easier to understand.

Now changed.
Martin


From @ndre_m|ku|ec @end|ng |rom hotm@||@com  Sat Feb 16 11:12:38 2019
From: @ndre_m|ku|ec @end|ng |rom hotm@||@com (Andre Mikulec)
Date: Sat, 16 Feb 2019 10:12:38 +0000
Subject: [Rd] Trying to compile R 3.5.2 - 32 bit R - on Windows 10 64 bit -
 with ICU support
Message-ID: <DM6PR03MB4316810DD414B5A167585F689C610@DM6PR03MB4316.namprd03.prod.outlook.com>

Hi,

I am trying to compile R with ICU support.

I am following
https://cran.r-project.org/doc/manuals/R-admin.html#Building-from-source

I have downloaded and extracted
https://www.stats.ox.ac.uk/pub/Rtools/goodies/ICU_531.zip
to
W:\R-3.5._\App\R-Portable\ICU

I have modified MkRules.local

# set to use ICU
USE_ICU = YES
# path to parent of ICU headers
ICU_PATH = w:/R-3.5._/App/R-Portable/ICU

I have done

export R_ICU_LOCALE=en_US

When I try to compile ( 32 bit compile ), I am getting these errors.

w:/Rtools35/mingw_32/bin/gcc -std=gnu99 -m32 -shared -s -mwindows -o R.dll R.def console.o dynload.o editor.o embeddedR.o extra.o malloc.o opt.o pager.o pr
eferences.o psignal.o rhome.o rt_complete.o rui.o run.o shext.o sys-win32.o system.o dos_wglob.o dllversion.o e_pow.o ../main/libmain.a ../appl/libappl.a .
./nmath/libnmath.a getline/gl.a ../extra/xdr/libxdr.a ../extra/intl/libintl.a ../extra/trio/libtrio.a ../extra/tzone/libtz.a ../extra/tre/libtre.a -fopenmp
 -L. -lgfortran -lquadmath -lRblas -L../../bin/i386 -lRgraphapp -lRiconv -lcomctl32 -lwinmm -lversion -L"../../extsoft"/lib/i386 -lpcre -lz -lbz2 -llzma -L
"w:/R-3.5._/App/R-Portable/ICU"/lib/i386 -lsicuin -lsicuuc -lsicudt -lstdc++
w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0x15): undefined reference to `__gxx_personality_sj0'
w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0x2b): undefined reference to `_Unwind_SjLj_Register'
w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0xde): undefined reference to `_Unwind_SjLj_Unregister'
w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0xf5): undefined reference to `_Unwind_SjLj_Unregister'
w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0x13e): undefined reference to `_Unwind_SjLj_Resume'

Thanks
Andre



[https://ipmcdn.avast.com/images/icons/icon-envelope-tick-green-avg-v1.png]<http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>     Virus-free. www.avg.com<http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>

	[[alternative HTML version deleted]]


From jeroenoom@ @end|ng |rom gm@||@com  Sat Feb 16 17:04:23 2019
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sat, 16 Feb 2019 17:04:23 +0100
Subject: [Rd] 
 Trying to compile R 3.5.2 - 32 bit R - on Windows 10 64 bit -
 with ICU support
In-Reply-To: <DM6PR03MB4316810DD414B5A167585F689C610@DM6PR03MB4316.namprd03.prod.outlook.com>
References: <DM6PR03MB4316810DD414B5A167585F689C610@DM6PR03MB4316.namprd03.prod.outlook.com>
Message-ID: <CABFfbXsaZe5giqauK17HvhXV_1Dq8EmmY+NTO4qgQENnv1aNNg@mail.gmail.com>

On Sat, Feb 16, 2019 at 11:13 AM Andre Mikulec
<andre_mikulec at hotmail.com> wrote:
>
> Hi,
>
> I am trying to compile R with ICU support.

Are you aware that the default R for Windows installation from CRAN
has ICU support?

> I am following
> https://cran.r-project.org/doc/manuals/R-admin.html#Building-from-source

These instructions are unfortunately outdated. The scripts and
instructions used to build the current version of R for Windows can be
found here: https://github.com/rwinlib/base#readme

> I have downloaded and extracted
> https://www.stats.ox.ac.uk/pub/Rtools/goodies/ICU_531.zip

That build of ICU was for the previous toolchain (up to R 3.2.5). You
need to use the ICU build which is included with Rtools (if you
checked the icu checkbox during the Rtools installation). The scripts
mentioned above will do this automatically.


From @ndre_m|ku|ec @end|ng |rom hotm@||@com  Sat Feb 16 22:30:10 2019
From: @ndre_m|ku|ec @end|ng |rom hotm@||@com (Andre Mikulec)
Date: Sat, 16 Feb 2019 21:30:10 +0000
Subject: [Rd] 
 Trying to compile R 3.5.2 - 32 bit R - on Windows 10 64 bit -
 with ICU support
In-Reply-To: <CABFfbXsaZe5giqauK17HvhXV_1Dq8EmmY+NTO4qgQENnv1aNNg@mail.gmail.com>
References: <DM6PR03MB4316810DD414B5A167585F689C610@DM6PR03MB4316.namprd03.prod.outlook.com>,
 <CABFfbXsaZe5giqauK17HvhXV_1Dq8EmmY+NTO4qgQENnv1aNNg@mail.gmail.com>
Message-ID: <DM6PR03MB431660BF2B71CAF4DDEF603F9C610@DM6PR03MB4316.namprd03.prod.outlook.com>

Jeroen Ooms,

O.K. thanks.
"
These instructions are unfortunately outdated. The scripts and
instructions used to build the current version of R for Windows can be
found here: https://github.com/rwinlib/base#readme
"
I will try that.

"
Are you aware that the default R for Windows installation from CRAN
has ICU support?
"
Yes.
(Actually I am trying to build an R with debugging symbols so that I may 'export' and
load some R internal debugging symbols into gdb.)

Thanks,
Andre

________________________________
From: Jeroen Ooms <jeroenooms at gmail.com>
Sent: Saturday, February 16, 2019 11:04 AM
To: Andre Mikulec
Cc: r-devel at r-project.org

it - with ICU support

On Sat, Feb 16, 2019 at 11:13 AM Andre Mikulec
<andre_mikulec at hotmail.com> wrote:
>
> Hi,
>
> I am trying to compile R with ICU support.


has ICU support?

> I am following
> https://cran.r-project.org/doc/manuals/R-admin.html#Building-from-source

These instructions are unfortunately outdated. The scripts and

found here: https://github.com/rwinlib/base#readme

> I have downloaded and extracted
> https://www.stats.ox.ac.uk/pub/Rtools/goodies/ICU_531.zip

That build of ICU was for the previous toolchain (up to R 3.2.5). You
need to use the ICU build which is included with Rtools (if you
checked the icu checkbox during the Rtools installation). The scripts
mentioned above will do this automatically.

[https://ipmcdn.avast.com/images/icons/icon-envelope-tick-green-avg-v1.png]<http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>     Virus-free. www.avg.com<http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Feb 18 10:53:11 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Feb 2019 10:53:11 +0100
Subject: [Rd] 
 Trying to compile R 3.5.2 - 32 bit R - on Windows 10 64 bit -
 with ICU support
In-Reply-To: <DM6PR03MB4316810DD414B5A167585F689C610@DM6PR03MB4316.namprd03.prod.outlook.com>
References: <DM6PR03MB4316810DD414B5A167585F689C610@DM6PR03MB4316.namprd03.prod.outlook.com>
Message-ID: <f8209a05-ce3e-6dfc-f4b4-ea37204baf02@gmail.com>


On 2/16/19 11:12 AM, Andre Mikulec wrote:
> Hi,
>
> I am trying to compile R with ICU support.
>
> I am following
> https://cran.r-project.org/doc/manuals/R-admin.html#Building-from-source
>
> I have downloaded and extracted
> https://www.stats.ox.ac.uk/pub/Rtools/goodies/ICU_531.zip
> to
> W:\R-3.5._\App\R-Portable\ICU
>
> I have modified MkRules.local
>
> # set to use ICU
> USE_ICU = YES
> # path to parent of ICU headers
> ICU_PATH = w:/R-3.5._/App/R-Portable/ICU

I also build recent versions of R following the documentation, with ICU, 
but have not run into these problems. Normally I use RTools 3.4 but now 
I tested just the build using RTools 3.5 and the linking went fine.

According to the error messages, the linking problems _may_ be due to 
incompatible exception handling in compilers used (e.g. when linking a 
library that has been built by an older version of the compiler than the 
one you are using to link via / build other parts of the application).

Best
Tomas

>
> I have done
>
> export R_ICU_LOCALE=en_US
>
> When I try to compile ( 32 bit compile ), I am getting these errors.
>
> w:/Rtools35/mingw_32/bin/gcc -std=gnu99 -m32 -shared -s -mwindows -o R.dll R.def console.o dynload.o editor.o embeddedR.o extra.o malloc.o opt.o pager.o pr
> eferences.o psignal.o rhome.o rt_complete.o rui.o run.o shext.o sys-win32.o system.o dos_wglob.o dllversion.o e_pow.o ../main/libmain.a ../appl/libappl.a .
> ./nmath/libnmath.a getline/gl.a ../extra/xdr/libxdr.a ../extra/intl/libintl.a ../extra/trio/libtrio.a ../extra/tzone/libtz.a ../extra/tre/libtre.a -fopenmp
>   -L. -lgfortran -lquadmath -lRblas -L../../bin/i386 -lRgraphapp -lRiconv -lcomctl32 -lwinmm -lversion -L"../../extsoft"/lib/i386 -lpcre -lz -lbz2 -llzma -L
> "w:/R-3.5._/App/R-Portable/ICU"/lib/i386 -lsicuin -lsicuuc -lsicudt -lstdc++
> w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0x15): undefined reference to `__gxx_personality_sj0'
> w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0x2b): undefined reference to `_Unwind_SjLj_Register'
> w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0xde): undefined reference to `_Unwind_SjLj_Unregister'
> w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0xf5): undefined reference to `_Unwind_SjLj_Unregister'
> w:/R-3.5._/App/R-Portable/ICU/lib/i386/libsicuin.a(ucol.ao):ucol.cpp:(.text+0x13e): undefined reference to `_Unwind_SjLj_Resume'
>
> Thanks
> Andre
>
>
>
> [https://ipmcdn.avast.com/images/icons/icon-envelope-tick-green-avg-v1.png]<http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>     Virus-free. www.avg.com<http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r@mp@|et|enne @end|ng |rom gm@||@com  Thu Feb 14 14:08:12 2019
From: r@mp@|et|enne @end|ng |rom gm@||@com (Rampal Etienne)
Date: Thu, 14 Feb 2019 14:08:12 +0100
Subject: [Rd] code for sum function
Message-ID: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>

Hello,

I am trying to write FORTRAN code to do the same as some R code I have. 
I get (small) differences when using the sum function in R. I know there 
are numerical routines to improve precision, but I have not been able to 
figure out what algorithm R is using. Does anyone know this? Or where 
can I find the code for the sum function?

Regards,

Rampal Etienne


From j2kenne| @end|ng |rom gm@||@com  Thu Feb 14 16:05:43 2019
From: j2kenne| @end|ng |rom gm@||@com (Jonathan Kennel)
Date: Thu, 14 Feb 2019 10:05:43 -0500
Subject: [Rd] Proposed speedup of spec.pgram from spectrum.R
Message-ID: <CABP0dEgpcH39qiMNDO76UXD7Bs-2EAPsKRAFiVXtwk2TV5Q3Sg@mail.gmail.com>

Hello,

I propose two small changes to spec.pgram to get modest speedup when
dealing with input (x) having multiple columns.  With plot = FALSE, I
commonly see ~10-20% speedup, for a two column input matrix and the speedup
increases for more columns with a maximum close to 45%.  In the function as
it currently exists, only the upper right triangle of pgram is necessary
and pgram is not returned by the function, therefore, calculating the lower
left portion (ie when j < i) is not required.  We change two nested loops
to index from i:ncol(x) instead of 1L:ncol(x) :

newspec.pgram <-
    function (x, spans = NULL, kernel = NULL, taper = 0.1,
              pad = 0, fast = TRUE,
              demean = FALSE, detrend = TRUE,
              plot = TRUE, na.action = na.fail, ...)
{
    ## Estimate spectral density from (smoothed) periodogram.
    series <- deparse(substitute(x))
    x <- na.action(as.ts(x))
    xfreq <- frequency(x)
    x <- as.matrix(x)
    N <- N0 <- nrow(x)
    nser <- ncol(x)
    if(!is.null(spans)) # allow user to mistake order of args
        kernel <- {
            if(is.tskernel(spans)) spans else
            kernel("modified.daniell", spans %/% 2)
        }
    if(!is.null(kernel) && !is.tskernel(kernel))
        stop("must specify 'spans' or a valid kernel")
    if (detrend) {
        t <- 1L:N - (N + 1)/2
        sumt2 <- N * (N^2 - 1)/12
        for (i in 1L:ncol(x))
            x[, i] <- x[, i] - mean(x[, i]) - sum(x[, i] * t) * t/sumt2
    }
    else if (demean) {
x <- sweep(x, 2, colMeans(x), check.margin=FALSE)
    }
    ## apply taper:
    x <- spec.taper(x, taper)
    ## to correct for tapering: Bloomfield (1976, p. 194)
    ## Total taper is taper*2
    u2 <- (1 - (5/8)*taper*2)
    u4 <- (1 - (93/128)*taper*2)
    if (pad > 0) {
        x <- rbind(x, matrix(0, nrow = N * pad, ncol = ncol(x)))
        N <- nrow(x)
    }
    NewN <- if(fast) nextn(N) else N
    x <- rbind(x, matrix(0, nrow = (NewN - N), ncol = ncol(x)))
    N <- nrow(x)
    Nspec <- floor(N/2)
    freq <- seq.int(from = xfreq/N, by = xfreq/N, length.out = Nspec)
    xfft <- mvfft(x)
    pgram <- array(NA, dim = c(N, ncol(x), ncol(x)))
    for (i in 1L:ncol(x)) {
        for (j in i:ncol(x)) { # N0 = #{non-0-padded}
            pgram[, i, j] <- xfft[, i] * Conj(xfft[, j])/(N0*xfreq)
            ## value at zero is invalid as mean has been removed, so
interpolate:
            pgram[1, i, j] <- 0.5*(pgram[2, i, j] + pgram[N, i, j])
        }
    }
    if(!is.null(kernel)) {
for (i in 1L:ncol(x)) for (j in i:ncol(x))
    pgram[, i, j] <- kernapply(pgram[, i, j], kernel, circular = TRUE)
df <- df.kernel(kernel)
bandwidth <- bandwidth.kernel(kernel)
    } else { # raw periodogram
df <- 2
bandwidth <- sqrt(1/12)
    }
    df <- df/(u4/u2^2)
    df <- df  * (N0 / N) ## << since R 1.9.0
    bandwidth <- bandwidth * xfreq/N
    pgram <- pgram[2:(Nspec+1),,, drop=FALSE]
    spec <- matrix(NA, nrow = Nspec, ncol = nser)
    for (i in 1L:nser) spec[, i] <- Re(pgram[1L:Nspec, i, i])
    if (nser == 1) {
        coh <- phase <- NULL
    } else {
        coh <- phase <- matrix(NA, nrow = Nspec, ncol = nser * (nser - 1)/2)
        for (i in 1L:(nser - 1)) {
            for (j in (i + 1):nser) {
                coh[, i + (j - 1) * (j - 2)/2] <-
                    Mod(pgram[, i, j])^2/(spec[, i] * spec[, j])
                phase[, i + (j - 1) * (j - 2)/2] <- Arg(pgram[, i, j])
            }
        }
    }
    ## correct for tapering
    for (i in 1L:nser) spec[, i] <- spec[, i]/u2
    spec <- drop(spec)
    spg.out <-
        list(freq = freq, spec = spec, coh = coh, phase = phase,
             kernel = kernel, df = df,
             bandwidth = bandwidth, n.used = N, orig.n = N0,# "n.orig" =
"n..."
             series = series, snames = colnames(x),
             method = ifelse(!is.null(kernel), "Smoothed Periodogram",
                             "Raw Periodogram"),
             taper = taper, pad = pad, detrend = detrend, demean = demean)
    class(spg.out) <- "spec"
    if(plot) {
plot(spg.out, ...)
        return(invisible(spg.out))
    } else return(spg.out)
}



If for some reason the entire pgram array is desired (for future changes to
spec.pgram) we can minimize calls to kernapply by calculating the lower
left portion as the complex conjugate:

for (i in 1L:ncol(x)) {
    for (j in 1L:ncol(x)) {
        if(i <= j) {
            pgram[, i, j] <- kernapply(pgram[, i, j], kernel, circular =
TRUE)
        } else {
            pgram[, i, j] <- Conj(pgram[, j, i])
        }
    }
}


Cheers,
Jonathan

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Mon Feb 18 16:36:24 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 18 Feb 2019 16:36:24 +0100
Subject: [Rd] Encoding issues
Message-ID: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>

Hi,

We found a (to our eyes) strange behaviour that might be a bug. First
a little bit of context. The 'units' package allows us to set the unit
using both SE or NSE. E.g., these both work in the same way:

units::set_units(1:10, "?m")
#> Units: [?m]
#> [1]  1  2  3  4  5  6  7  8  9 10

units::set_units(1:10, ?m)
#> Units: [?m]
#> [1]  1  2  3  4  5  6  7  8  9 10

That's micrometers, and works fine if the session charset is UTF-8.
Now the funny part comes with Windows. The first version, with quotes,
works fine, but the second one fails. This is easy to demonstrate from
Linux:

LC_CTYPE=en_US.iso88591 Rscript -e 'units::set_units(1:10, "?m")'
#> Units: [?m]
#> [1]  1  2  3  4  5  6  7  8  9 10

LC_CTYPE=en_US.iso88591 Rscript -e 'units::set_units(1:10, ?m)'
#> Error: unexpected input in "units::set_units(1:10, ?"
#> Execution halted

However, if you use the first version, with quotes, in an example, and
the package is checked on Windows, it fails too (see
https://ci.appveyor.com/project/edzer/units/builds/22440023#L747). The
package declares UTF-8 encoding, so none of these errors should, in
principle, happen. Am I wrong?

Thanks in advance, regards,
I?aki


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Feb 18 16:38:57 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Feb 2019 16:38:57 +0100
Subject: [Rd] code for sum function
In-Reply-To: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
Message-ID: <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>

See do_summary() in summary.c, rsum() for doubles. R uses long double 
type as accumulator on systems where available.

Best,
Tomas

On 2/14/19 2:08 PM, Rampal Etienne wrote:
> Hello,
>
> I am trying to write FORTRAN code to do the same as some R code I 
> have. I get (small) differences when using the sum function in R. I 
> know there are numerical routines to improve precision, but I have not 
> been able to figure out what algorithm R is using. Does anyone know 
> this? Or where can I find the code for the sum function?
>
> Regards,
>
> Rampal Etienne
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Feb 18 17:26:39 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 18 Feb 2019 16:26:39 +0000
Subject: [Rd] Encoding issues
In-Reply-To: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>
References: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>
Message-ID: <CABtg=K=dS=1geaahi=s7R2hd1ad=h-ez-CafFj5NV_O+kiDL3A@mail.gmail.com>

>From "Writing R Extensions":

"Only ASCII characters (and the control characters tab, formfeed, LF
and CR) should be used in code files."

So I am afraid you cannot use ?m.

Gabor

On Mon, Feb 18, 2019 at 3:36 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> Hi,
>
> We found a (to our eyes) strange behaviour that might be a bug. First
> a little bit of context. The 'units' package allows us to set the unit
> using both SE or NSE. E.g., these both work in the same way:
>
> units::set_units(1:10, "?m")
> #> Units: [?m]
> #> [1]  1  2  3  4  5  6  7  8  9 10
>
> units::set_units(1:10, ?m)
> #> Units: [?m]
> #> [1]  1  2  3  4  5  6  7  8  9 10
>
> That's micrometers, and works fine if the session charset is UTF-8.
> Now the funny part comes with Windows. The first version, with quotes,
> works fine, but the second one fails. This is easy to demonstrate from
> Linux:
>
> LC_CTYPE=en_US.iso88591 Rscript -e 'units::set_units(1:10, "?m")'
> #> Units: [?m]
> #> [1]  1  2  3  4  5  6  7  8  9 10
>
> LC_CTYPE=en_US.iso88591 Rscript -e 'units::set_units(1:10, ?m)'
> #> Error: unexpected input in "units::set_units(1:10, ?"
> #> Execution halted
>
> However, if you use the first version, with quotes, in an example, and
> the package is checked on Windows, it fails too (see
> https://ci.appveyor.com/project/edzer/units/builds/22440023#L747). The
> package declares UTF-8 encoding, so none of these errors should, in
> principle, happen. Am I wrong?
>
> Thanks in advance, regards,
> I?aki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Mon Feb 18 17:37:01 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Mon, 18 Feb 2019 16:37:01 +0000 (UTC)
Subject: [Rd] Extract.data.frame.Rd about $.data.frame
References: <123537925.1052826.1550507821051.ref@mail.yahoo.com>
Message-ID: <123537925.1052826.1550507821051@mail.yahoo.com>

The statement in R devel:
  There is no \code{data.frame} method for \code{$}, so \code{x$name}
  uses the default method which treats \code{x} as a list (with no partial
  matching of column names).  The replacement method (for \code{$}) checks
  \code{value} for the correct number of rows, and replicates it if necessary.

The added "(with no partial matching of column names)" is wrong. The default method of '$' (for extraction) allows partial matching for list; partial matching gives warning if option warnPartialMatchDollar is TRUE.

--------------------------------------------
On Fri, 15/2/19, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] Extract.data.frame.Rd about $.data.frame

 Cc: r-devel at r-project.org
 Date: Friday, 15 February, 2019, 4:15 PM
 
>>>>> Suharto Anggono Suharto Anggono via R-devel

>>>>>    on Sun, 10 Feb 2019 16:33:25 +0000 writes:

    > In R devel, data.frame method of '$' has been removed, but this part of "Details" section of Extract.data.frame.Rd still implies existence of the method.
    > The \code{data.frame} method for \code{$}, treats \code{x} as a
    > list, except that (as of R-3.1.0) partial matching of \code{name} to
    > the names of \code{x} will generate a warning; this may become an
    > error in future versions.  The replacement method checks
    > \code{value} for the correct number of rows, and replicates it if
    > necessary.


    > Statement from before R 3.1.0 could be used again:

    > There is no \code{data.frame} method for \code{$}, so \code{x$name}
    > uses the default method which treats \code{x} as a list.  There is a
    > replacement method which checks \code{value} for the correct number
    > of rows, and replicates it if necessary.


[[elided Yahoo spam]]
I've added a 2 x 2 words of explanation to make it easier to understand.

Now changed.
Martin


From |uc@r @end|ng |rom |edor@project@org  Mon Feb 18 17:42:40 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 18 Feb 2019 17:42:40 +0100
Subject: [Rd] Encoding issues
In-Reply-To: <CABtg=K=dS=1geaahi=s7R2hd1ad=h-ez-CafFj5NV_O+kiDL3A@mail.gmail.com>
References: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>
 <CABtg=K=dS=1geaahi=s7R2hd1ad=h-ez-CafFj5NV_O+kiDL3A@mail.gmail.com>
Message-ID: <CALEXWq1nDwk39dz=sOBbpn+XXJSayCMviRjEH55OHYLSoAVpCg@mail.gmail.com>

On Mon, 18 Feb 2019 at 17:27, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> From "Writing R Extensions":
>
> "Only ASCII characters (and the control characters tab, formfeed, LF
> and CR) should be used in code files."
>
> So I am afraid you cannot use ?m.

Thanks, G?bor, I missed that bit. Then, is an .Rd file considered a
"code file"? Our surprise comes from the fact that the quoted version
works fine in a test file, but not in an example. Anyway, if they
cause such a documented trouble, it seems that the safest option is to
avoid its use in the first place.

I?aki


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Feb 18 17:45:14 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Feb 2019 17:45:14 +0100
Subject: [Rd] Encoding issues
In-Reply-To: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>
References: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>
Message-ID: <c4ce3c17-0fc2-ce24-7057-03b277d70fa0@gmail.com>

On 2/18/19 4:36 PM, I?aki Ucar wrote:
> Hi,
>
> We found a (to our eyes) strange behaviour that might be a bug. First
> a little bit of context. The 'units' package allows us to set the unit
> using both SE or NSE. E.g., these both work in the same way:
>
> units::set_units(1:10, "?m")
> #> Units: [?m]
> #> [1]  1  2  3  4  5  6  7  8  9 10
>
> units::set_units(1:10, ?m)
> #> Units: [?m]
> #> [1]  1  2  3  4  5  6  7  8  9 10
>
> That's micrometers, and works fine if the session charset is UTF-8.
> Now the funny part comes with Windows. The first version, with quotes,
> works fine, but the second one fails. This is easy to demonstrate from
> Linux:
>
> LC_CTYPE=en_US.iso88591 Rscript -e 'units::set_units(1:10, "?m")'
> #> Units: [?m]
> #> [1]  1  2  3  4  5  6  7  8  9 10
>
> LC_CTYPE=en_US.iso88591 Rscript -e 'units::set_units(1:10, ?m)'
> #> Error: unexpected input in "units::set_units(1:10, ?"
> #> Execution halted
>
> However, if you use the first version, with quotes, in an example, and
> the package is checked on Windows, it fails too (see
> https://ci.appveyor.com/project/edzer/units/builds/22440023#L747). The
> package declares UTF-8 encoding, so none of these errors should, in
> principle, happen. Am I wrong?

Hi I?aki,

if you want to report a bug against R, please try to provide a minimum 
reproducible example that only uses base packages (not units) and please 
also see WRE sections 1.3, 1.6.3, including:

"There is a portable way to have arbitrary text in character strings 
(only) in your R code, which is to supply them in Unicode as ?\uxxxx? 
escapes."

"If your package specifies an encoding in its DESCRIPTION file, you 
should run these tools in a locale which makes use of that encoding" 
(includes R CMD check)

Even though there are portable ways to have a string constant literal in 
source code in UTF-8, not representable in the current native encoding 
(e.g. using \u escapes), it does not mean that such a string can be 
freely used in R. Many operations require conversion to the current 
native encoding, which will cause an error or unexpected result. Such 
conversions can happen any time (except when they are documented not to 
happen).

Implementing an API that will work with such strings in a package would 
be hard to get right, but not impossible. NSE will not work 
(non-representable strings, which are not string constant literals, are 
not supported). One can save a lot of headaches by using only ASCII in 
function APIs.

Best
Tomas

>
> Thanks in advance, regards,
> I?aki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Feb 18 17:46:53 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 18 Feb 2019 16:46:53 +0000
Subject: [Rd] Encoding issues
In-Reply-To: <CALEXWq1nDwk39dz=sOBbpn+XXJSayCMviRjEH55OHYLSoAVpCg@mail.gmail.com>
References: <CALEXWq344mKov29L4VrNvGrOWg-uOxiXXwjNajpmwkLv+ZvPYg@mail.gmail.com>
 <CABtg=K=dS=1geaahi=s7R2hd1ad=h-ez-CafFj5NV_O+kiDL3A@mail.gmail.com>
 <CALEXWq1nDwk39dz=sOBbpn+XXJSayCMviRjEH55OHYLSoAVpCg@mail.gmail.com>
Message-ID: <CABtg=KmWnPXxoHnXw=8=gG61VfGFeS9s-a2Y4CC=cYAL3x1yQA@mail.gmail.com>

On Mon, Feb 18, 2019 at 4:42 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Mon, 18 Feb 2019 at 17:27, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > From "Writing R Extensions":
> >
> > "Only ASCII characters (and the control characters tab, formfeed, LF
> > and CR) should be used in code files."
> >
> > So I am afraid you cannot use ?m.
>
> Thanks, G?bor, I missed that bit. Then, is an .Rd file considered a
> "code file"? Our surprise comes from the fact that the quoted version
> works fine in a test file, but not in an example. Anyway, if they
> cause such a documented trouble, it seems that the safest option is to
> avoid its use in the first place.

I don't think an Rd file is considered a code file, but you might have
problems there as well, as I believe that Rd files are manipulated in
the local encoding.

Gabor

>
> I?aki


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Feb 18 18:12:59 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Feb 2019 18:12:59 +0100
Subject: [Rd] Extract.data.frame.Rd about $.data.frame
In-Reply-To: <123537925.1052826.1550507821051@mail.yahoo.com>
References: <123537925.1052826.1550507821051.ref@mail.yahoo.com>
 <123537925.1052826.1550507821051@mail.yahoo.com>
Message-ID: <23658.59291.646340.17054@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>     on Mon, 18 Feb 2019 16:37:01 +0000 writes:

    > The statement in R devel: There is no \code{data.frame}
    > method for \code{$}, so \code{x$name} uses the default
    > method which treats \code{x} as a list (with no partial
    > matching of column names).  The replacement method (for
    > \code{$}) checks \code{value} for the correct number of
    > rows, and replicates it if necessary.

    > The added "(with no partial matching of column names)" is
    > wrong. The default method of '$' (for extraction) allows
    > partial matching for list; partial matching gives warning
    > if option warnPartialMatchDollar is TRUE.

Yes, thank you!
Indeed, of course it *is* matched when it can be matched uniquely;
otherwise it's silently not matched, returning NULL;
all as it has always been and well documented in ?Extract.

Martin

    > --------------------------------------------
    > On Fri, 15/2/19, Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:

    >  Subject: Re: [Rd] Extract.data.frame.Rd about
    > $.data.frame

    >  Cc: r-devel at r-project.org Date: Friday, 15 February,
    > 2019, 4:15 PM
 
>>>>> Suharto Anggono Suharto Anggono via R-devel

>>>>>    on Sun, 10 Feb 2019 16:33:25 +0000 writes:

    >> In R devel, data.frame method of '$' has been removed,
    >> but this part of "Details" section of
    >> Extract.data.frame.Rd still implies existence of the
    >> method.  The \code{data.frame} method for \code{$},
    >> treats \code{x} as a list, except that (as of R-3.1.0)
    >> partial matching of \code{name} to the names of \code{x}
    >> will generate a warning; this may become an error in
    >> future versions.  The replacement method checks
    >> \code{value} for the correct number of rows, and
    >> replicates it if necessary.


    >> Statement from before R 3.1.0 could be used again:

    >> There is no \code{data.frame} method for \code{$}, so
    >> \code{x$name} uses the default method which treats
    >> \code{x} as a list.  There is a replacement method which
    >> checks \code{value} for the correct number of rows, and
    >> replicates it if necessary.


    > [[elided Yahoo spam]] I've added a 2 x 2 words of
    > explanation to make it easier to understand.

    > Now changed.  Martin

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ttjdow|e @end|ng |rom gm@||@com  Mon Feb 18 22:08:10 2019
From: m@ttjdow|e @end|ng |rom gm@||@com (Matt Dowle)
Date: Mon, 18 Feb 2019 13:08:10 -0800
Subject: [Rd] Error in rbind(info, getNamespaceInfo(env, "S3methods"))
Message-ID: <CAOuOy3dRhE47j_W71qDeCc+sKruj2DC0-2AGD1Wyd_t0Bsr8Dg@mail.gmail.com>

Dear all,

I'm experiencing an unusual installation error for one package. Could
anyone suggest how I can best investigate this from here please?  I'm sorry
this isn't very much to go on. Hopefully someone can point me in the right
direction.

The problem seems to be my library.  It is large (3,418 packages) and I'd
like to avoid rebuilding it, if possible.  All packages are up to date
according to update.packages().

The error is :
** byte-compile and prepare package for lazy loading
Error in rbind(info, getNamespaceInfo(env, "S3methods")) :
  number of columns of matrices must match (see arg 2)
ERROR: lazy loading failed for package ?staRdom?
* removing ?/home/mdowle/build/revdeplib/staRdom?

This package (staRdom) has had a recent update but CRAN checks page is
showing OK, mostly:
https://cran.r-project.org/web/checks/check_results_staRdom.html.   The two
errors there don't seem to be related.

The package installs no problem when I don't include my revdeplib.  But
when I do include my revdeplib it fails with the error above.

I can reproduce as follows :

$ export R_LIBS=~/build/revdeplib/
$ R
> .libPaths()
[1] "/home/mdowle/build/revdeplib" "/usr/lib/R/library"
> install.packages("staRdom")
Installing package into ?/home/mdowle/build/revdeplib?
(as ?lib? is unspecified)
trying URL 'http://cloud.r-project.org/src/contrib/staRdom_1.0.12.tar.gz'
Content type 'application/x-gzip' length 2669832 bytes (2.5 MB)
==================================================
downloaded 2.5 MB
* installing *source* package ?staRdom? ...
** package ?staRdom? successfully unpacked and MD5 sums checked
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
Error in rbind(info, getNamespaceInfo(env, "S3methods")) :
  number of columns of matrices must match (see arg 2)
ERROR: lazy loading failed for package ?staRdom?
* removing ?/home/mdowle/build/revdeplib/staRdom?
The downloaded source packages are in
        ?/tmp/RtmprvTDCg/downloaded_packages?
Warning message:
In install.packages("staRdom") :
  installation of package ?staRdom? had non-zero exit status
>
> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.2 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
LC_PAPER=en_US.UTF-8
 [8] LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C
           LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2 tools_3.5.2
>


If I don't include my revdeplib library,  it works fine :

$ R
> .libPaths()
[1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
 "/usr/lib/R/library"
> install.packages("staRdom")
Installing package into ?/usr/local/lib/R/site-library?
(as ?lib? is unspecified)
trying URL 'http://cloud.r-project.org/src/contrib/staRdom_1.0.12.tar.gz'
Content type 'application/x-gzip' length 2669832 bytes (2.5 MB)
==================================================
downloaded 2.5 MB

* installing *source* package ?staRdom? ...
** package ?staRdom? successfully unpacked and MD5 sums checked
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded
* DONE (staRdom)

The downloaded source packages are in
        ?/tmp/RtmpmSiZLa/downloaded_packages?
>
> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.2 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
LC_PAPER=en_US.UTF-8
 [8] LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C
           LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2 tools_3.5.2
>

I'm not sure how to debug this because both install.packages() and `R CMD
check` start a new instance of R. How do a get debugger() prompt at the
point of the error? All I can think of is inserting a browser() in my own
compile of R-devel. But that seems a big step. I thought I'd post here
first to see if anyone had any suggestions in how to proceed.

Thanks in advance,
Matt

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb 18 22:28:13 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 18 Feb 2019 16:28:13 -0500
Subject: [Rd] Error in rbind(info, getNamespaceInfo(env, "S3methods"))
In-Reply-To: <CAOuOy3dRhE47j_W71qDeCc+sKruj2DC0-2AGD1Wyd_t0Bsr8Dg@mail.gmail.com>
References: <CAOuOy3dRhE47j_W71qDeCc+sKruj2DC0-2AGD1Wyd_t0Bsr8Dg@mail.gmail.com>
Message-ID: <4bc49f19-5fd4-d515-03eb-28954ac5ee55@gmail.com>

On 18/02/2019 4:08 p.m., Matt Dowle wrote:
> Dear all,
> 
> I'm experiencing an unusual installation error for one package. Could
> anyone suggest how I can best investigate this from here please?  I'm sorry
> this isn't very much to go on. Hopefully someone can point me in the right
> direction.

When packages are installed, a hidden environment is created called 
".__NAMESPACE__.".  It contains a number of objects; it looks as though 
one of yours called "S3methods" is corrupted.  I can't guess whether it 
is one coming from staRdom or one already in your library, but it 
appears yours doesn't have the usual number of columns (which I think is 3).

So you could get a list of all packages in your library, and run

sapply(allpackages, function(x) 
ncol(asNamespace(x)$.__NAMESPACE__.$S3methods))

to see which of them don't return 3 as the number of columns.  (This 
will load all of them, so might need to be broken up into batches.)

Duncan Murdoch

> 
> The problem seems to be my library.  It is large (3,418 packages) and I'd
> like to avoid rebuilding it, if possible.  All packages are up to date
> according to update.packages().
> 
> The error is :
> ** byte-compile and prepare package for lazy loading
> Error in rbind(info, getNamespaceInfo(env, "S3methods")) :
>    number of columns of matrices must match (see arg 2)
> ERROR: lazy loading failed for package ?staRdom?
> * removing ?/home/mdowle/build/revdeplib/staRdom?
> 
> This package (staRdom) has had a recent update but CRAN checks page is
> showing OK, mostly:
> https://cran.r-project.org/web/checks/check_results_staRdom.html.   The two
> errors there don't seem to be related.
> 
> The package installs no problem when I don't include my revdeplib.  But
> when I do include my revdeplib it fails with the error above.
> 
> I can reproduce as follows :
> 
> $ export R_LIBS=~/build/revdeplib/
> $ R
>> .libPaths()
> [1] "/home/mdowle/build/revdeplib" "/usr/lib/R/library"
>> install.packages("staRdom")
> Installing package into ?/home/mdowle/build/revdeplib?
> (as ?lib? is unspecified)
> trying URL 'http://cloud.r-project.org/src/contrib/staRdom_1.0.12.tar.gz'
> Content type 'application/x-gzip' length 2669832 bytes (2.5 MB)
> ==================================================
> downloaded 2.5 MB
> * installing *source* package ?staRdom? ...
> ** package ?staRdom? successfully unpacked and MD5 sums checked
> ** R
> ** data
> *** moving datasets to lazyload DB
> ** inst
> ** byte-compile and prepare package for lazy loading
> Error in rbind(info, getNamespaceInfo(env, "S3methods")) :
>    number of columns of matrices must match (see arg 2)
> ERROR: lazy loading failed for package ?staRdom?
> * removing ?/home/mdowle/build/revdeplib/staRdom?
> The downloaded source packages are in
>          ?/tmp/RtmprvTDCg/downloaded_packages?
> Warning message:
> In install.packages("staRdom") :
>    installation of package ?staRdom? had non-zero exit status
>>
>> sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.2 LTS
> 
> Matrix products: default
> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
> 
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>   LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>   LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> LC_PAPER=en_US.UTF-8
>   [8] LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C
>             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.5.2 tools_3.5.2
>>
> 
> 
> If I don't include my revdeplib library,  it works fine :
> 
> $ R
>> .libPaths()
> [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
>   "/usr/lib/R/library"
>> install.packages("staRdom")
> Installing package into ?/usr/local/lib/R/site-library?
> (as ?lib? is unspecified)
> trying URL 'http://cloud.r-project.org/src/contrib/staRdom_1.0.12.tar.gz'
> Content type 'application/x-gzip' length 2669832 bytes (2.5 MB)
> ==================================================
> downloaded 2.5 MB
> 
> * installing *source* package ?staRdom? ...
> ** package ?staRdom? successfully unpacked and MD5 sums checked
> ** R
> ** data
> *** moving datasets to lazyload DB
> ** inst
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** installing vignettes
> ** testing if installed package can be loaded
> * DONE (staRdom)
> 
> The downloaded source packages are in
>          ?/tmp/RtmpmSiZLa/downloaded_packages?
>>
>> sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.2 LTS
> 
> Matrix products: default
> BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
> LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
> 
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>   LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>   LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> LC_PAPER=en_US.UTF-8
>   [8] LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C
>             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.5.2 tools_3.5.2
>>
> 
> I'm not sure how to debug this because both install.packages() and `R CMD
> check` start a new instance of R. How do a get debugger() prompt at the
> point of the error? All I can think of is inserting a browser() in my own
> compile of R-devel. But that seems a big step. I thought I'd post here
> first to see if anyone had any suggestions in how to proceed.
> 
> Thanks in advance,
> Matt
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ttjdow|e @end|ng |rom gm@||@com  Tue Feb 19 00:26:02 2019
From: m@ttjdow|e @end|ng |rom gm@||@com (Matt Dowle)
Date: Mon, 18 Feb 2019 15:26:02 -0800
Subject: [Rd] Error in rbind(info, getNamespaceInfo(env, "S3methods"))
In-Reply-To: <4bc49f19-5fd4-d515-03eb-28954ac5ee55@gmail.com>
References: <CAOuOy3dRhE47j_W71qDeCc+sKruj2DC0-2AGD1Wyd_t0Bsr8Dg@mail.gmail.com>
 <4bc49f19-5fd4-d515-03eb-28954ac5ee55@gmail.com>
Message-ID: <CAOuOy3eMD3XsRecBpetP1RpBe+oxvepVq1XbX3Zg5VnZ049FsA@mail.gmail.com>

Thanks, Duncan.
I took the approach you suggested and eventually found it was due to
R.matlab (staRdom imports R.matlab).

> require(R.matlab)
Loading required package: R.matlab
Error: package or namespace load failed for ?R.matlab? in rbind(info,
getNamespaceInfo(env, "S3methods")):
 number of columns of matrices must match (see arg 2)
Warning message:
package ?R.matlab? was built under R version 3.6.0
> R.version.string
[1] "R version 3.5.2 (2018-12-20)"

At some point in the past I guess I used R-devel with this library and it
installed R.matlab using R-devel.

Reinstalling R.matlab did the trick and staRdom works fine now.
I checked that none of the other 2,643 packages in this library were built
using R>3.5.2.  It was just R.matlab.

Thanks for your help!
Best, Matt

On Mon, Feb 18, 2019 at 1:28 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 18/02/2019 4:08 p.m., Matt Dowle wrote:
> > Dear all,
> >
> > I'm experiencing an unusual installation error for one package. Could
> > anyone suggest how I can best investigate this from here please?  I'm
> sorry
> > this isn't very much to go on. Hopefully someone can point me in the
> right
> > direction.
>
> When packages are installed, a hidden environment is created called
> ".__NAMESPACE__.".  It contains a number of objects; it looks as though
> one of yours called "S3methods" is corrupted.  I can't guess whether it
> is one coming from staRdom or one already in your library, but it
> appears yours doesn't have the usual number of columns (which I think is
> 3).
>
> So you could get a list of all packages in your library, and run
>
> sapply(allpackages, function(x)
> ncol(asNamespace(x)$.__NAMESPACE__.$S3methods))
>
> to see which of them don't return 3 as the number of columns.  (This
> will load all of them, so might need to be broken up into batches.)
>
> Duncan Murdoch
>
> >
> > The problem seems to be my library.  It is large (3,418 packages) and I'd
> > like to avoid rebuilding it, if possible.  All packages are up to date
> > according to update.packages().
> >
> > The error is :
> > ** byte-compile and prepare package for lazy loading
> > Error in rbind(info, getNamespaceInfo(env, "S3methods")) :
> >    number of columns of matrices must match (see arg 2)
> > ERROR: lazy loading failed for package ?staRdom?
> > * removing ?/home/mdowle/build/revdeplib/staRdom?
> >
> > This package (staRdom) has had a recent update but CRAN checks page is
> > showing OK, mostly:
> > https://cran.r-project.org/web/checks/check_results_staRdom.html.   The
> two
> > errors there don't seem to be related.
> >
> > The package installs no problem when I don't include my revdeplib.  But
> > when I do include my revdeplib it fails with the error above.
> >
> > I can reproduce as follows :
> >
> > $ export R_LIBS=~/build/revdeplib/
> > $ R
> >> .libPaths()
> > [1] "/home/mdowle/build/revdeplib" "/usr/lib/R/library"
> >> install.packages("staRdom")
> > Installing package into ?/home/mdowle/build/revdeplib?
> > (as ?lib? is unspecified)
> > trying URL 'http://cloud.r-project.org/src/contrib/staRdom_1.0.12.tar.gz
> '
> > Content type 'application/x-gzip' length 2669832 bytes (2.5 MB)
> > ==================================================
> > downloaded 2.5 MB
> > * installing *source* package ?staRdom? ...
> > ** package ?staRdom? successfully unpacked and MD5 sums checked
> > ** R
> > ** data
> > *** moving datasets to lazyload DB
> > ** inst
> > ** byte-compile and prepare package for lazy loading
> > Error in rbind(info, getNamespaceInfo(env, "S3methods")) :
> >    number of columns of matrices must match (see arg 2)
> > ERROR: lazy loading failed for package ?staRdom?
> > * removing ?/home/mdowle/build/revdeplib/staRdom?
> > The downloaded source packages are in
> >          ?/tmp/RtmprvTDCg/downloaded_packages?
> > Warning message:
> > In install.packages("staRdom") :
> >    installation of package ?staRdom? had non-zero exit status
> >>
> >> sessionInfo()
> > R version 3.5.2 (2018-12-20)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Ubuntu 18.04.2 LTS
> >
> > Matrix products: default
> > BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
> > LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
> >
> > locale:
> >   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >   LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >   LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> > LC_PAPER=en_US.UTF-8
> >   [8] LC_NAME=C                  LC_ADDRESS=C
>  LC_TELEPHONE=C
> >             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.5.2 tools_3.5.2
> >>
> >
> >
> > If I don't include my revdeplib library,  it works fine :
> >
> > $ R
> >> .libPaths()
> > [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
> >   "/usr/lib/R/library"
> >> install.packages("staRdom")
> > Installing package into ?/usr/local/lib/R/site-library?
> > (as ?lib? is unspecified)
> > trying URL 'http://cloud.r-project.org/src/contrib/staRdom_1.0.12.tar.gz
> '
> > Content type 'application/x-gzip' length 2669832 bytes (2.5 MB)
> > ==================================================
> > downloaded 2.5 MB
> >
> > * installing *source* package ?staRdom? ...
> > ** package ?staRdom? successfully unpacked and MD5 sums checked
> > ** R
> > ** data
> > *** moving datasets to lazyload DB
> > ** inst
> > ** byte-compile and prepare package for lazy loading
> > ** help
> > *** installing help indices
> > ** building package indices
> > ** installing vignettes
> > ** testing if installed package can be loaded
> > * DONE (staRdom)
> >
> > The downloaded source packages are in
> >          ?/tmp/RtmpmSiZLa/downloaded_packages?
> >>
> >> sessionInfo()
> > R version 3.5.2 (2018-12-20)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Ubuntu 18.04.2 LTS
> >
> > Matrix products: default
> > BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
> > LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
> >
> > locale:
> >   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >   LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >   LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> > LC_PAPER=en_US.UTF-8
> >   [8] LC_NAME=C                  LC_ADDRESS=C
>  LC_TELEPHONE=C
> >             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.5.2 tools_3.5.2
> >>
> >
> > I'm not sure how to debug this because both install.packages() and `R CMD
> > check` start a new instance of R. How do a get debugger() prompt at the
> > point of the error? All I can think of is inserting a browser() in my own
> > compile of R-devel. But that seems a big step. I thought I'd post here
> > first to see if anyone had any suggestions in how to proceed.
> >
> > Thanks in advance,
> > Matt
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From @nnoporc| @end|ng |rom gm@||@com  Tue Feb 19 10:16:48 2019
From: @nnoporc| @end|ng |rom gm@||@com (PatrickT)
Date: Tue, 19 Feb 2019 17:16:48 +0800
Subject: [Rd] Documentation for sd (stats) + suggestion
Message-ID: <CAJOE-h3w1Qei99Czqcn=0MB=GiMFUvX3Fdtq-E3yJnGmBNyJNg@mail.gmail.com>

I cannot file suggestions on bugzilla, so writing here.

As far as I can tell, the manual help page for ``sd``

?sd

does not explicitly mention that the formula for the standard deviation is
the so-called "Bessel-corrected" formula (divide by n-1 rather than n).

I suggest it should be stated near the top.

I would also suggest (feature request!) that either

 - a population standard deviation formula, e.g. ``sdp`` or ``sd.p`` be
made available (that would be my preference)

or

 - the current ``sd`` be extended to accept a ``population=FALSE`` or
``sample=TRUE`` argument.

Same for the variance. Excel, Calc, etc. offer these.

Motivation: I encourage my students to use R rather than Python (which has
picked up big time in recent years) on the grounds that it is easier to get
started with and is specialized in statistics. But then there is no
"population" formula for the standard deviation. And ``mode`` is not the
mode they expect... (btw I suggest adding a ``modes`` function to the
core)  All things a beginner will look for in a stats software.

Thanks for listening. And thanks for the great work!

	[[alternative HTML version deleted]]


From S@E|||@on @end|ng |rom LGCGroup@com  Tue Feb 19 10:59:01 2019
From: S@E|||@on @end|ng |rom LGCGroup@com (S Ellison)
Date: Tue, 19 Feb 2019 09:59:01 +0000
Subject: [Rd] Documentation for sd (stats) + suggestion
In-Reply-To: <CAJOE-h3w1Qei99Czqcn=0MB=GiMFUvX3Fdtq-E3yJnGmBNyJNg@mail.gmail.com>
References: <CAJOE-h3w1Qei99Czqcn=0MB=GiMFUvX3Fdtq-E3yJnGmBNyJNg@mail.gmail.com>
Message-ID: <9ea52c6ff077403dae73c4b155fbc793@GBDCVPEXC08.corp.lgc-group.com>

> As far as I can tell, the manual help page for ``sd``
> 
> ?sd
> 
> does not explicitly mention that the formula for the standard deviation is
> the so-called "Bessel-corrected" formula (divide by n-1 rather than n).

See Details, where it says 
"Details:

     Like 'var' this uses denominator n - 1.
"



*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From |r@nc|@co@m@torr@@ @end|ng |rom un|c@n@e@  Tue Feb 19 18:02:29 2019
From: |r@nc|@co@m@torr@@ @end|ng |rom un|c@n@e@ (Francisco Matorras)
Date: Tue, 19 Feb 2019 18:02:29 +0100
Subject: [Rd] mle (stat4) crashing due to singular Hessian in covariance
 matrix calculation
Message-ID: <b379c738-7b0c-c47f-800f-1014d51185ee@unican.es>

Hi, R developers.
when running mle inside a loop I found a nasty behavior. From time to 
time, my model had a degenerate minimum and the loop just crashed. I 
tracked it down to "vcov <- if (length(coef)) solve(oout$hessian)" line, 
being the hessian singular.
Note that the minimum reached was good, it just did not make sense to 
calculate the covariance matrix as the inverse of a singular Hessian. In 
my case i am just interested on the value of the log-likelihood. For my 
application, I patched it easily in a local version of mle just removing 
this call since I am not using vcov at all, but i wonder if it can be 
improved in the official release. I can imagine of two simple solutions, 
either including vcov calculation as an option or avoiding the call to 
solve if the hessian is singular (setting vcov to NA). I am willing to 
write a few lines of coded if you think it is worth.

regards

Francisco Matorras
Instituto de F?sica de Cantabria
Universidad de Cantabria


From pg||bert902 @end|ng |rom gm@||@com  Tue Feb 19 19:35:12 2019
From: pg||bert902 @end|ng |rom gm@||@com (Paul Gilbert)
Date: Tue, 19 Feb 2019 19:35:12 +0100
Subject: [Rd] code for sum function
In-Reply-To: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
Message-ID: <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>

(I didn't see anyone else answer this, so ...)

You can probably find the R code in src/main/ but I'm not sure. You are 
talking about a very simple calculation, so it seems unlike that the 
algorithm is the cause of the difference. I have done much more 
complicated things and usually get machine precision comparisons. There 
are four possibilities I can think of that could cause (small) differences.

0/ Your code is wrong, but that seems unlikely on such a simple 
calculations.

1/ You are summing a very large number of numbers, in which case the sum 
can become very large compared to numbers being added, then things can 
get a bit funny.

2/ You are using single precision in fortran rather than double. Double 
is needed for all floating point numbers you use!

3/ You have not zeroed the double precision numbers in fortran. (Some 
compilers do not do this automatically and you have to specify it.) Then 
if you accidentally put singles, like a constant 0.0 rather than a 
constant 0.0D+0, into a double you will have small junk in the lower 
precision part.

(I am assuming you are talking about a sum of reals, not integer or 
complex.)

HTH,
Paul Gilbert

On 2/14/19 2:08 PM, Rampal Etienne wrote:
> Hello,
> 
> I am trying to write FORTRAN code to do the same as some R code I have. 
> I get (small) differences when using the sum function in R. I know there 
> are numerical routines to improve precision, but I have not been able to 
> figure out what algorithm R is using. Does anyone know this? Or where 
> can I find the code for the sum function?
> 
> Regards,
> 
> Rampal Etienne
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Tue Feb 19 20:08:18 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Tue, 19 Feb 2019 11:08:18 -0800
Subject: [Rd] code for sum function
In-Reply-To: <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
Message-ID: <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>

The algorithm does make a differece.  You can use Kahan's summation
algorithm (https://en.wikipedia.org/wiki/Kahan_summation_algorithm) to
reduce the error compared to the naive summation algorithm.  E.g., in R
code:

naiveSum <-
function(x) {
   s <- 0.0
   for(xi in x) s <- s + xi
   s
}
kahanSum <- function (x)
{
   s <- 0.0
   c <- 0.0 # running compensation for lost low-order bits
   for(xi in x) {
      y <- xi - c
      t <- s + y # low-order bits of y may be lost here
      c <- (t - s) - y
      s <- t
   }
   s
}

> rSum <- vapply(c(1:20,10^(2:7)), function(n) sum(rep(1/7,n)), 0)
> rNaiveSum <- vapply(c(1:20,10^(2:7)), function(n) naiveSum(rep(1/7,n)), 0)
> rKahanSum <- vapply(c(1:20,10^(2:7)), function(n) kahanSum(rep(1/7,n)), 0)
>
> table(rSum == rNaiveSum)

FALSE  TRUE
   21     5
> table(rSum == rKahanSum)

FALSE  TRUE
    3    23


Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Tue, Feb 19, 2019 at 10:36 AM Paul Gilbert <pgilbert902 at gmail.com> wrote:

> (I didn't see anyone else answer this, so ...)
>
> You can probably find the R code in src/main/ but I'm not sure. You are
> talking about a very simple calculation, so it seems unlike that the
> algorithm is the cause of the difference. I have done much more
> complicated things and usually get machine precision comparisons. There
> are four possibilities I can think of that could cause (small) differences.
>
> 0/ Your code is wrong, but that seems unlikely on such a simple
> calculations.
>
> 1/ You are summing a very large number of numbers, in which case the sum
> can become very large compared to numbers being added, then things can
> get a bit funny.
>
> 2/ You are using single precision in fortran rather than double. Double
> is needed for all floating point numbers you use!
>
> 3/ You have not zeroed the double precision numbers in fortran. (Some
> compilers do not do this automatically and you have to specify it.) Then
> if you accidentally put singles, like a constant 0.0 rather than a
> constant 0.0D+0, into a double you will have small junk in the lower
> precision part.
>
> (I am assuming you are talking about a sum of reals, not integer or
> complex.)
>
> HTH,
> Paul Gilbert
>
> On 2/14/19 2:08 PM, Rampal Etienne wrote:
> > Hello,
> >
> > I am trying to write FORTRAN code to do the same as some R code I have.
> > I get (small) differences when using the sum function in R. I know there
> > are numerical routines to improve precision, but I have not been able to
> > figure out what algorithm R is using. Does anyone know this? Or where
> > can I find the code for the sum function?
> >
> > Regards,
> >
> > Rampal Etienne
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Tue Feb 19 20:52:30 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Tue, 19 Feb 2019 19:52:30 +0000
Subject: [Rd] bias issue in sample() (PR 17494)
Message-ID: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>


Before the next release we really should to sort out the bias issue in
sample() reported by Ottoboni and Stark in
https://www.stat.berkeley.edu/~stark/Preprints/r-random-issues.pdf and
filed aa a bug report by Duncan Murdoch at
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17494.

Here are two examples of bad behavior through current R-devel:

     set.seed(123)
     m <- (2/5) * 2^32
     x <- sample(m, 1000000, replace = TRUE)
     table(x %% 2, x > m / 2)
     ##
     ##    FALSE   TRUE
     ## 0 300620 198792
     ## 1 200196 300392

     table(sample(2/7 * 2^32, 1000000, replace = TRUE) %% 2)
     ##
     ##      0      1
     ## 429054 570946

I committed a modification to R_unif_index to address this by
generating random bits (blocks of 16) and rejection sampling, but for
now this is only enabled if the environment variable R_NEW_SAMPLE is
set before the first call.

Some things still needed:

- someone to look over the change and see if there are any issues
- adjustment of RNGkind to allowing the old behavior to be selected
- make the new behavior the default
- adjust documentation
- ???

Unfortunately I don't have enough free cycles to do this, but I can
help if someone else can take the lead.

There are two other places I found that might suffer from the same
issue, in walker_ProbSampleReplace (pointed out bu O & S) and in
src/nmath/wilcox.c.  Both can be addressed by using R_unif_index. I
have done that for walker_ProbSampleReplace, but the wilcox change
might need adjusting to support the standalone math library and I
don't feel confident enough I'd get that right.

Best,

luke


-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From tdhock5 @end|ng |rom gm@||@com  Tue Feb 19 21:37:39 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Tue, 19 Feb 2019 13:37:39 -0700
Subject: [Rd] patch for gregexpr(perl=TRUE)
Message-ID: <CALK03d2R=L5ZvoEYv17hVRr6XX-aSwvvF65RL=ZgHiDzE8w6rA@mail.gmail.com>

Hi all,

Several people have noticed that gregexpr is very slow for large subject
strings when perl=TRUE is specified.
-
https://stackoverflow.com/questions/31216299/r-faster-gregexpr-for-very-large-strings
-
http://r.789695.n4.nabble.com/strsplit-perl-TRUE-gregexpr-perl-TRUE-very-slow-for-long-strings-td4727902.html
- https://stat.ethz.ch/pipermail/r-help/2008-October/178451.html

I figured out the issue, which is fixed by changing 1 line of code in
src/main/grep.c -- there is a strlen function call which is currently
inside of the while loop over matches, and the patch moves it before the
loop.
https://github.com/tdhock/namedCapture-article/blob/master/linear-time-gregexpr-perl.patch

I made some figures that show the quadratic time complexity before applying
the patch, and the linear time complexity after applying the patch
https://github.com/tdhock/namedCapture-article#19-feb-2019

I would have posted a bug report on bugs.r-project.org but I do not have an
account. So can an R-devel person please either (1) accept this patch, or
(2) give me an account so I can post the patch on the bug tracker?

Finally I would like to mention that Bill Dunlap noticed a similar problem
(time complexity which is quadratic in subject size) for strsplit with
perl=TRUE. My patch does NOT fix that, but I suspect that a similar fix
could be accomplished (because I see that strlen is being called in a while
loop in do_strsplit as well).

Thanks
Toby Dylan Hocking

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Tue Feb 19 21:43:00 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 19 Feb 2019 15:43:00 -0500
Subject: [Rd] code for sum function
In-Reply-To: <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
 <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>
Message-ID: <f9be94ba-6032-f127-7d37-6ba80f9e2425@gmail.com>


This SO question may be of interest:

https://stackoverflow.com/questions/38589705/difference-between-rs-sum-and-armadillos-accu/

  which points out that sum() isn't doing anything fancy *except* using
extended-precision registers when available.  (Using Kahan's algorithm
does come at a computational cost ...)

On 2019-02-19 2:08 p.m., William Dunlap via R-devel wrote:
> The algorithm does make a differece.  You can use Kahan's summation
> algorithm (https://en.wikipedia.org/wiki/Kahan_summation_algorithm) to
> reduce the error compared to the naive summation algorithm.  E.g., in R
> code:
> 
> naiveSum <-
> function(x) {
>    s <- 0.0
>    for(xi in x) s <- s + xi
>    s
> }
> kahanSum <- function (x)
> {
>    s <- 0.0
>    c <- 0.0 # running compensation for lost low-order bits
>    for(xi in x) {
>       y <- xi - c
>       t <- s + y # low-order bits of y may be lost here
>       c <- (t - s) - y
>       s <- t
>    }
>    s
> }
> 
>> rSum <- vapply(c(1:20,10^(2:7)), function(n) sum(rep(1/7,n)), 0)
>> rNaiveSum <- vapply(c(1:20,10^(2:7)), function(n) naiveSum(rep(1/7,n)), 0)
>> rKahanSum <- vapply(c(1:20,10^(2:7)), function(n) kahanSum(rep(1/7,n)), 0)
>>
>> table(rSum == rNaiveSum)
> 
> FALSE  TRUE
>    21     5
>> table(rSum == rKahanSum)
> 
> FALSE  TRUE
>     3    23
> 
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 
> On Tue, Feb 19, 2019 at 10:36 AM Paul Gilbert <pgilbert902 at gmail.com> wrote:
> 
>> (I didn't see anyone else answer this, so ...)
>>
>> You can probably find the R code in src/main/ but I'm not sure. You are
>> talking about a very simple calculation, so it seems unlike that the
>> algorithm is the cause of the difference. I have done much more
>> complicated things and usually get machine precision comparisons. There
>> are four possibilities I can think of that could cause (small) differences.
>>
>> 0/ Your code is wrong, but that seems unlikely on such a simple
>> calculations.
>>
>> 1/ You are summing a very large number of numbers, in which case the sum
>> can become very large compared to numbers being added, then things can
>> get a bit funny.
>>
>> 2/ You are using single precision in fortran rather than double. Double
>> is needed for all floating point numbers you use!
>>
>> 3/ You have not zeroed the double precision numbers in fortran. (Some
>> compilers do not do this automatically and you have to specify it.) Then
>> if you accidentally put singles, like a constant 0.0 rather than a
>> constant 0.0D+0, into a double you will have small junk in the lower
>> precision part.
>>
>> (I am assuming you are talking about a sum of reals, not integer or
>> complex.)
>>
>> HTH,
>> Paul Gilbert
>>
>> On 2/14/19 2:08 PM, Rampal Etienne wrote:
>>> Hello,
>>>
>>> I am trying to write FORTRAN code to do the same as some R code I have.
>>> I get (small) differences when using the sum function in R. I know there
>>> are numerical routines to improve precision, but I have not been able to
>>> figure out what algorithm R is using. Does anyone know this? Or where
>>> can I find the code for the sum function?
>>>
>>> Regards,
>>>
>>> Rampal Etienne
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bbo|ker @end|ng |rom gm@||@com  Tue Feb 19 22:07:16 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 19 Feb 2019 16:07:16 -0500
Subject: [Rd] mle (stat4) crashing due to singular Hessian in covariance
 matrix calculation
In-Reply-To: <b379c738-7b0c-c47f-800f-1014d51185ee@unican.es>
References: <b379c738-7b0c-c47f-800f-1014d51185ee@unican.es>
Message-ID: <242f0229-5221-0e3f-6429-8b1c779733b4@gmail.com>


  I don't know if this will get much response from the R developers;
they might just recommend that you protect your mle() call in a try() or
tryCatch() to stop it from breaking your loop.  Alternatively, you could
try mle2() function in the bbmle package, which started out long ago as
a slightly more flexible and robust version of stats4::mle(); I don't
remember/can't promise that it handles fits with singular Hessians, but
I'm guessing it does ...

  cheers
   Ben Bolker


On 2019-02-19 12:02 p.m., Francisco Matorras wrote:
> Hi, R developers.
> when running mle inside a loop I found a nasty behavior. From time to
> time, my model had a degenerate minimum and the loop just crashed. I
> tracked it down to "vcov <- if (length(coef)) solve(oout$hessian)" line,
> being the hessian singular.
> Note that the minimum reached was good, it just did not make sense to
> calculate the covariance matrix as the inverse of a singular Hessian. In
> my case i am just interested on the value of the log-likelihood. For my
> application, I patched it easily in a local version of mle just removing
> this call since I am not using vcov at all, but i wonder if it can be
> improved in the official release. I can imagine of two simple solutions,
> either including vcov calculation as an option or avoiding the call to
> solve if the hessian is singular (setting vcov to NA). I am willing to
> write a few lines of coded if you think it is worth.
> 
> regards
> 
> Francisco Matorras
> Instituto de F?sica de Cantabria
> Universidad de Cantabria
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Wed Feb 20 02:00:02 2019
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Wed, 20 Feb 2019 01:00:02 +0000
Subject: [Rd] Documentation for sd (stats) + suggestion
In-Reply-To: <9ea52c6ff077403dae73c4b155fbc793@GBDCVPEXC08.corp.lgc-group.com>
References: <CAJOE-h3w1Qei99Czqcn=0MB=GiMFUvX3Fdtq-E3yJnGmBNyJNg@mail.gmail.com>,
 <9ea52c6ff077403dae73c4b155fbc793@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <SYBPR01MB393143B27389E5C23E28F729CD7C0@SYBPR01MB3931.ausprd01.prod.outlook.com>

Good day,

It is implemented by the CRAN package multicon. The function is named popsd. But it does seem like something R should provide without creating a package dependency.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From g@bembecker @end|ng |rom gm@||@com  Wed Feb 20 08:01:53 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 19 Feb 2019 23:01:53 -0800
Subject: [Rd] bias issue in sample() (PR 17494)
In-Reply-To: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>
References: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>
Message-ID: <CAD4oTHGpZWCU6UCSbcYzj4wRsLp8M4T1koxbxDa9nVmODcYB1A@mail.gmail.com>

Luke,

I'm happy to help with this. Its great to see this get tackled (I've cc'ed
Kelli Ottoboni who helped flag this issue).

I can prepare a patch for the RNGkind related stuff and the doc update.

As for ???, what are your (and others') thoughts about the possibility of
a) a reproducibility API which takes either an R version (or maybe
alternatively a date) and sets the RNGkind to the default for that
version/date, and/or b) that sessionInfo be modified to capture (and
display) the RNGkind in effect.

Best,
~G


On Tue, Feb 19, 2019 at 11:52 AM Tierney, Luke <luke-tierney at uiowa.edu>
wrote:

>
> Before the next release we really should to sort out the bias issue in
> sample() reported by Ottoboni and Stark in
> https://www.stat.berkeley.edu/~stark/Preprints/r-random-issues.pdf and
> filed aa a bug report by Duncan Murdoch at
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17494.
>
> Here are two examples of bad behavior through current R-devel:
>
>      set.seed(123)
>      m <- (2/5) * 2^32
>      x <- sample(m, 1000000, replace = TRUE)
>      table(x %% 2, x > m / 2)
>      ##
>      ##    FALSE   TRUE
>      ## 0 300620 198792
>      ## 1 200196 300392
>
>      table(sample(2/7 * 2^32, 1000000, replace = TRUE) %% 2)
>      ##
>      ##      0      1
>      ## 429054 570946
>
> I committed a modification to R_unif_index to address this by
> generating random bits (blocks of 16) and rejection sampling, but for
> now this is only enabled if the environment variable R_NEW_SAMPLE is
> set before the first call.
>
> Some things still needed:
>
> - someone to look over the change and see if there are any issues
> - adjustment of RNGkind to allowing the old behavior to be selected
> - make the new behavior the default
> - adjust documentation
> - ???
>
> Unfortunately I don't have enough free cycles to do this, but I can
> help if someone else can take the lead.
>
> There are two other places I found that might suffer from the same
> issue, in walker_ProbSampleReplace (pointed out bu O & S) and in
> src/nmath/wilcox.c.  Both can be addressed by using R_unif_index. I
> have done that for walker_ProbSampleReplace, but the wilcox change
> might need adjusting to support the standalone math library and I
> don't feel confident enough I'd get that right.
>
> Best,
>
> luke
>
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From w||dert @end|ng |rom gm@||@com  Wed Feb 20 05:06:32 2019
From: w||dert @end|ng |rom gm@||@com (Todd Wilder)
Date: Tue, 19 Feb 2019 21:06:32 -0700
Subject: [Rd] Compile R to WebAssembly / Emscripten?
Message-ID: <CA+ispTGkO4Z8uQmmgF0XWk40Xmgk=uiAR0kR+6dmT+Thxd6YoQ@mail.gmail.com>

Has anyone attempted to compile R (probably without any OS bindings) to
WebAssembly / Emscripten? If so, how far did you get? (would be crazy
awesome if you could get all the way to a ggplot bitmap output). If not, is
this a waste of time or is there some daylight to doing this?

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Feb 20 09:56:34 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 20 Feb 2019 08:56:34 +0000
Subject: [Rd] Compile R to WebAssembly / Emscripten?
In-Reply-To: <CA+ispTGkO4Z8uQmmgF0XWk40Xmgk=uiAR0kR+6dmT+Thxd6YoQ@mail.gmail.com>
References: <CA+ispTGkO4Z8uQmmgF0XWk40Xmgk=uiAR0kR+6dmT+Thxd6YoQ@mail.gmail.com>
Message-ID: <CABtg=KmRB+7Fn6bLcfLUq1q0K=8p9XKYb0cxt+No2tVXonY97g@mail.gmail.com>

This was some time ago:
https://stat.ethz.ch/pipermail/r-devel/2013-May/066724.html

So probably not hopeless, but I would think it is a lot of work.

Gabor

On Wed, Feb 20, 2019 at 8:17 AM Todd Wilder <wildert at gmail.com> wrote:
>
> Has anyone attempted to compile R (probably without any OS bindings) to
> WebAssembly / Emscripten? If so, how far did you get? (would be crazy
> awesome if you could get all the way to a ggplot bitmap output). If not, is
> this a waste of time or is there some daylight to doing this?
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bhh @end|ng |rom x@4@||@n|  Wed Feb 20 11:11:50 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Wed, 20 Feb 2019 11:11:50 +0100
Subject: [Rd] code for sum function
In-Reply-To: <f9be94ba-6032-f127-7d37-6ba80f9e2425@gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
 <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>
 <f9be94ba-6032-f127-7d37-6ba80f9e2425@gmail.com>
Message-ID: <81CB2714-5031-49CB-BADC-68370AD946D0@xs4all.nl>

> 
> On 2019-02-19 2:08 p.m., William Dunlap via R-devel wrote:
>> The algorithm does make a differece.  You can use Kahan's summation
>> algorithm (https://en.wikipedia.org/wiki/Kahan_summation_algorithm) to
>> reduce the error compared to the naive summation algorithm.  E.g., in R
>> code:
>> 
>> naiveSum <-
>> function(x) {
>>   s <- 0.0
>>   for(xi in x) s <- s + xi
>>   s
>> }
>> kahanSum <- function (x)
>> {
>>   s <- 0.0
>>   c <- 0.0 # running compensation for lost low-order bits
>>   for(xi in x) {
>>      y <- xi - c
>>      t <- s + y # low-order bits of y may be lost here
>>      c <- (t - s) - y
>>      s <- t
>>   }
>>   s
>> }
>> 
>>> rSum <- vapply(c(1:20,10^(2:7)), function(n) sum(rep(1/7,n)), 0)
>>> rNaiveSum <- vapply(c(1:20,10^(2:7)), function(n) naiveSum(rep(1/7,n)), 0)
>>> rKahanSum <- vapply(c(1:20,10^(2:7)), function(n) kahanSum(rep(1/7,n)), 0)
>>> 
>>> table(rSum == rNaiveSum)
>> 
>> FALSE  TRUE
>>   21     5
>>> table(rSum == rKahanSum)
>> 
>> FALSE  TRUE
>>    3    23


If you use the vector  c(1,10^100,1,-10^100) as input then
sum, naiveSum or kahanSum will all give an incorrect answer.
All return 0 instead of 2.

From the wikipedia page we can try the pseudocode given of the modification by Neumaier.
My R version (with a small correction to avoid cancellation?) is

neumaierSum <- function (x)
{
  s <- 0.0
  z <- 0.0 # running compensation for lost low-order bits
  for(xi in x) {
     t <- s + xi
     if( abs(s) >= abs(xi) ){
         b <- (s-t)+xi #  intermediate step needed  in R otherwise cancellation
         z <- z+b      # If sum is bigger, low-order digits of xi are lost.
     } else {
         b <- (xi-t)+s #  intermediate step needed in R otherwise cancellation
         z <- z+b      # else low-order digits of sum are lost
     }
     s <- t
  }
  s+z   # correction only applied once in the very end
}

testx <-  c(1,10^100,1,-10^100)
neumaierSum(testx)

gives 2 as answer.

Berend Hasselman


From jono @end|ng |rom jc@rro||@com@@u  Wed Feb 20 13:39:07 2019
From: jono @end|ng |rom jc@rro||@com@@u (Jonathan Carroll)
Date: Wed, 20 Feb 2019 23:09:07 +1030
Subject: [Rd] make.unique rbind examples
In-Reply-To: <CAAjDRiiacrP1aa8fn+_AEzqfABRzVPbsPrW2gkdRS2VsQB0G4A@mail.gmail.com>
References: <CAAjDRiiacrP1aa8fn+_AEzqfABRzVPbsPrW2gkdRS2VsQB0G4A@mail.gmail.com>
Message-ID: <CAAjDRii+7Xeq_UfgQLuQmSGKebaj=0RU+Y-oKqkPZgB85csAMg@mail.gmail.com>

Entirely by coincidence I just now discovered that this issue was raised in
2013 [1] with similar suggestions for improvements. My search did not
initially uncover this message, so apologies for the repost which was
actually a nearly 16 year later "bump" posting.

[1] https://stat.ethz.ch/pipermail/r-devel/2013-May/066727.html

Regards,

- Jonathan.

On Mon, 11 Feb. 2019, 9:19 pm Jonathan Carroll, <jono at jcarroll.com.au>
wrote:

> The final two examples in ?make.unique do not appear to be relevant to
> that function, namely
>
> rbind(data.frame(x = 1), data.frame(x = 2), data.frame(x = 3))
> rbind(rbind(data.frame(x = 1), data.frame(x = 2)), data.frame(x = 3))
>
> both producing
>
>   x
> 1 1
> 2 2
> 3 3
>
> (identically) on R 3.4.3 and 3.5.1. Following a brief discussion on
> Twitter, Rich FitzJohn [1] identified that under R 1.8.0 (circa 2003,
> around the time these examples were added) the rownames for the output
> of these lines was c("1", "11", "12"). This suggests that perhaps the
> example was added to demonstrate behaviour which is no longer
> supported.
>
> A more relevant example might be
>
> data.frame(x = 1, x = 2, x = 3)
>
> producing
>
>   x x.1 x.2
> 1 1   2   3
>
> or, perhaps more in keeping with the original intention,
>
> rbind(data.frame(x = 1, row.names = "a"), data.frame(x = 2, row.names
> = "a"), data.frame(x = 3, row.names = "a"))
>
> producing output with rownames c("a", "a1", "a2").
>
> Regards,
>
> - Jonathan.
>
> [1] https://twitter.com/rgfitzjohn/status/1094885131532275712
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Feb 20 15:56:24 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 20 Feb 2019 15:56:24 +0100
Subject: [Rd] patch for gregexpr(perl=TRUE)
In-Reply-To: <CALK03d2R=L5ZvoEYv17hVRr6XX-aSwvvF65RL=ZgHiDzE8w6rA@mail.gmail.com>
References: <CALK03d2R=L5ZvoEYv17hVRr6XX-aSwvvF65RL=ZgHiDzE8w6rA@mail.gmail.com>
Message-ID: <f70dd502-d4f5-ef64-0a02-863a1d11175c@gmail.com>

Thanks, in R-devel 76138, I confirm it speeds up gregexpr() with pcre in 
Bill Dunlap's example from
https://stat.ethz.ch/pipermail/r-devel/2017-January/073577.html
(RegExprPCRE column)

The performance problem of StrSplitPCRE does not seem to be due to strlen().

Best
Tomas

On 2/19/19 9:37 PM, Toby Hocking wrote:
> Hi all,
>
> Several people have noticed that gregexpr is very slow for large subject
> strings when perl=TRUE is specified.
> -
> https://stackoverflow.com/questions/31216299/r-faster-gregexpr-for-very-large-strings
> -
> http://r.789695.n4.nabble.com/strsplit-perl-TRUE-gregexpr-perl-TRUE-very-slow-for-long-strings-td4727902.html
> - https://stat.ethz.ch/pipermail/r-help/2008-October/178451.html
>
> I figured out the issue, which is fixed by changing 1 line of code in
> src/main/grep.c -- there is a strlen function call which is currently
> inside of the while loop over matches, and the patch moves it before the
> loop.
> https://github.com/tdhock/namedCapture-article/blob/master/linear-time-gregexpr-perl.patch
>
> I made some figures that show the quadratic time complexity before applying
> the patch, and the linear time complexity after applying the patch
> https://github.com/tdhock/namedCapture-article#19-feb-2019
>
> I would have posted a bug report on bugs.r-project.org but I do not have an
> account. So can an R-devel person please either (1) accept this patch, or
> (2) give me an account so I can post the patch on the bug tracker?
>
> Finally I would like to mention that Bill Dunlap noticed a similar problem
> (time complexity which is quadratic in subject size) for strsplit with
> perl=TRUE. My patch does NOT fix that, but I suspect that a similar fix
> could be accomplished (because I see that strlen is being called in a while
> loop in do_strsplit as well).
>
> Thanks
> Toby Dylan Hocking
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @nnoporc| @end|ng |rom gm@||@com  Wed Feb 20 18:37:00 2019
From: @nnoporc| @end|ng |rom gm@||@com (PatrickT)
Date: Thu, 21 Feb 2019 01:37:00 +0800
Subject: [Rd] Documentation for sd (stats) + suggestion
In-Reply-To: <9ea52c6ff077403dae73c4b155fbc793@GBDCVPEXC08.corp.lgc-group.com>
References: <CAJOE-h3w1Qei99Czqcn=0MB=GiMFUvX3Fdtq-E3yJnGmBNyJNg@mail.gmail.com>
 <9ea52c6ff077403dae73c4b155fbc793@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <CAJOE-h3s5JUTxquSbTzcDZj3efas2AMCaY4R71DKghceF00UwQ@mail.gmail.com>

Oh thanks, missed that. I expected the explanation to be near the top under
"Description." I may have scanned for the word "sample", which doesn't
appear. I could have searched harder. Apologies for the noise.

On Tue, Feb 19, 2019 at 5:59 PM S Ellison <S.Ellison at lgcgroup.com> wrote:

> > As far as I can tell, the manual help page for ``sd``
> >
> > ?sd
> >
> > does not explicitly mention that the formula for the standard deviation
> is
> > the so-called "Bessel-corrected" formula (divide by n-1 rather than n).
>
> See Details, where it says
> "Details:
>
>      Like 'var' this uses denominator n - 1.
> "
>
>
>
> *******************************************************************
> This email and any attachments are confidential. Any u...{{dropped:12}}


From @nnoporc| @end|ng |rom gm@||@com  Wed Feb 20 18:49:38 2019
From: @nnoporc| @end|ng |rom gm@||@com (PatrickT)
Date: Thu, 21 Feb 2019 01:49:38 +0800
Subject: [Rd] Documentation for sd (stats) + suggestion
In-Reply-To: <SYBPR01MB393143B27389E5C23E28F729CD7C0@SYBPR01MB3931.ausprd01.prod.outlook.com>
References: <CAJOE-h3w1Qei99Czqcn=0MB=GiMFUvX3Fdtq-E3yJnGmBNyJNg@mail.gmail.com>
 <9ea52c6ff077403dae73c4b155fbc793@GBDCVPEXC08.corp.lgc-group.com>
 <SYBPR01MB393143B27389E5C23E28F729CD7C0@SYBPR01MB3931.ausprd01.prod.outlook.com>
Message-ID: <CAJOE-h3T98PoJ+53iNEBAttN5N2TV1Sh1cxQW_srQpqPJ8Kdrw@mail.gmail.com>

Indeed. Thanks for your suggestions.

To elaborate briefly. The ``quantile`` function offers 9 types of methods.
The ``sd`` function only one. The ``mad`` function offers ways to tweak the
bias correction. The ``sd`` function doesn't.

Are there good reasons against adding features to ``sd``? after all it must
be one of the most popular stats out there.

Moreover the default ``sd`` function, which divides by n-1, is not well
founded like the variance is. It's still biased for repeated small
samples...

While it's easy to roll your own function, I don't think we can expect
beginners to write something like:

sdp = function(x) sqrt(sum((x-mean(x))^2)/length(x))


On Wed, Feb 20, 2019 at 9:00 AM Dario Strbenac <dstr7320 at uni.sydney.edu.au>
wrote:

> Good day,
>
> It is implemented by the CRAN package multicon. The function is named
> popsd. But it does seem like something R should provide without creating a
> package dependency.
>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Wed Feb 20 19:16:39 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 20 Feb 2019 11:16:39 -0700
Subject: [Rd] Bug: time complexity of substring is quadratic as string size
 and number of substrings increases
Message-ID: <CALK03d1s36OCLD2Q=7frbL32jzUzhsEsLMHyH9tEqRB+dnrzGw@mail.gmail.com>

Hi all, (and especially hi to Tomas Kalibera who accepted my patch sent
yesterday)

I believe that I have found another bug, this time in the substring
function. The use case that I am concerned with is when there is a single
(character scalar) text/subject, and many substrings to extract. For example

substring("AAAA", 1:4, 1:4)

or more generally,

N=1000
substring(paste(rep("A", N), collapse=""), 1:N, 1:N)

The problem I observe is that the time complexity is quadratic in N, as
shown on this figure
https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png
source:
https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R

I expected the time complexity to be linear in N.

The example above may seem contrived/trivial, but it is indeed relevant to
a number of packages (rex, rematch2, namedCapture) which provide functions
that use gregexpr and then substring to extract the text in the captured
sub-patterns. The figure
https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.png
shows the issue: these packages have quadratic time complexity, whereas
other packages (and the gregexpr function with perl=TRUE after applying the
patch discussed yesterday) have linear time complexity. I believe the
problem is the substring function. Source for this figure:
https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.R

I suspect that a fix can be accomplished by optimizing the implementation
of substring, for the special case when the text/subject is a single
element (character scalar). Right now I notice that the substring R code
uses rep_len so that the text/subject which is passed to the C code is a
character vector with the same length as the number of substrings to
extract. Maybe the C code is calling strlen for each of these (identical)
text/subject elements?

Anyway, it would be useful to have some feedback to make sure this is
indeed a bug before I post on bugzilla. (btw thanks Martin for signing me
up for an account)

Toby

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Wed Feb 20 19:55:06 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 20 Feb 2019 11:55:06 -0700
Subject: [Rd] 
 Bug: time complexity of substring is quadratic as string size
 and number of substrings increases
In-Reply-To: <CALK03d1s36OCLD2Q=7frbL32jzUzhsEsLMHyH9tEqRB+dnrzGw@mail.gmail.com>
References: <CALK03d1s36OCLD2Q=7frbL32jzUzhsEsLMHyH9tEqRB+dnrzGw@mail.gmail.com>
Message-ID: <CALK03d1oR9u_WraZFAhRTrnWHMfYgJ0APgitGnp4ywok1kBOcg@mail.gmail.com>

Update: I have observed that stringi::stri_sub is linear time complexity,
and it computes the same thing as base::substring. figure
https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png
source:
https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R

To me this is a clear indication of a bug in substring, but again it would
be nice to have some feedback/confirmation before posting on bugzilla.

Also this suggests a fix -- just need to copy whatever stringi::stri_sub is
doing.




On Wed, Feb 20, 2019 at 11:16 AM Toby Hocking <tdhock5 at gmail.com> wrote:

> Hi all, (and especially hi to Tomas Kalibera who accepted my patch sent
> yesterday)
>
> I believe that I have found another bug, this time in the substring
> function. The use case that I am concerned with is when there is a single
> (character scalar) text/subject, and many substrings to extract. For example
>
> substring("AAAA", 1:4, 1:4)
>
> or more generally,
>
> N=1000
> substring(paste(rep("A", N), collapse=""), 1:N, 1:N)
>
> The problem I observe is that the time complexity is quadratic in N, as
> shown on this figure
> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png
> source:
> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R
>
> I expected the time complexity to be linear in N.
>
> The example above may seem contrived/trivial, but it is indeed relevant to
> a number of packages (rex, rematch2, namedCapture) which provide functions
> that use gregexpr and then substring to extract the text in the captured
> sub-patterns. The figure
> https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.png
> shows the issue: these packages have quadratic time complexity, whereas
> other packages (and the gregexpr function with perl=TRUE after applying the
> patch discussed yesterday) have linear time complexity. I believe the
> problem is the substring function. Source for this figure:
> https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.R
>
> I suspect that a fix can be accomplished by optimizing the implementation
> of substring, for the special case when the text/subject is a single
> element (character scalar). Right now I notice that the substring R code
> uses rep_len so that the text/subject which is passed to the C code is a
> character vector with the same length as the number of substrings to
> extract. Maybe the C code is calling strlen for each of these (identical)
> text/subject elements?
>
> Anyway, it would be useful to have some feedback to make sure this is
> indeed a bug before I post on bugzilla. (btw thanks Martin for signing me
> up for an account)
>
> Toby
>

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Thu Feb 21 00:37:56 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 20 Feb 2019 15:37:56 -0800
Subject: [Rd] code for sum function
In-Reply-To: <CAOuLjjS5o19+mKUQm7k33sqAMo3_nWp+Wygroqbr3G-PMJDUoQ@mail.gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
 <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>
 <CAOuLjjS5o19+mKUQm7k33sqAMo3_nWp+Wygroqbr3G-PMJDUoQ@mail.gmail.com>
Message-ID: <CAF8bMcbwBk9v0jNxA6mwoB3Cn-gfA5J=0N3MJoWVitErMah7cA@mail.gmail.com>

Someone said it used a possibly platform-dependent
higher-than-double-precision type.

By the way, in my example involving rep(1/3, n) I neglected to include the
most precise
way to calculate the sum: n%/%3 + (n%%3)/3.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Feb 20, 2019 at 2:45 PM Rampal Etienne <rampaletienne at gmail.com>
wrote:

> Dear Will,
>
> This is exactly what I find.
> My point is thus that the sum function in R is not a naive sum nor a
> Kahansum (in all cases), but what algorithm is it using then?
>
> Cheers, Rampal
>
>
> On Tue, Feb 19, 2019, 19:08 William Dunlap <wdunlap at tibco.com wrote:
>
>> The algorithm does make a differece.  You can use Kahan's summation
>> algorithm (https://en.wikipedia.org/wiki/Kahan_summation_algorithm) to
>> reduce the error compared to the naive summation algorithm.  E.g., in R
>> code:
>>
>> naiveSum <-
>> function(x) {
>>    s <- 0.0
>>    for(xi in x) s <- s + xi
>>    s
>> }
>> kahanSum <- function (x)
>> {
>>    s <- 0.0
>>    c <- 0.0 # running compensation for lost low-order bits
>>    for(xi in x) {
>>       y <- xi - c
>>       t <- s + y # low-order bits of y may be lost here
>>       c <- (t - s) - y
>>       s <- t
>>    }
>>    s
>> }
>>
>> > rSum <- vapply(c(1:20,10^(2:7)), function(n) sum(rep(1/7,n)), 0)
>> > rNaiveSum <- vapply(c(1:20,10^(2:7)), function(n) naiveSum(rep(1/7,n)),
>> 0)
>> > rKahanSum <- vapply(c(1:20,10^(2:7)), function(n) kahanSum(rep(1/7,n)),
>> 0)
>> >
>> > table(rSum == rNaiveSum)
>>
>> FALSE  TRUE
>>    21     5
>> > table(rSum == rKahanSum)
>>
>> FALSE  TRUE
>>     3    23
>>
>>
>> Bill Dunlap
>> TIBCO Software
>> wdunlap tibco.com
>>
>>
>> On Tue, Feb 19, 2019 at 10:36 AM Paul Gilbert <pgilbert902 at gmail.com>
>> wrote:
>>
>>> (I didn't see anyone else answer this, so ...)
>>>
>>> You can probably find the R code in src/main/ but I'm not sure. You are
>>> talking about a very simple calculation, so it seems unlike that the
>>> algorithm is the cause of the difference. I have done much more
>>> complicated things and usually get machine precision comparisons. There
>>> are four possibilities I can think of that could cause (small)
>>> differences.
>>>
>>> 0/ Your code is wrong, but that seems unlikely on such a simple
>>> calculations.
>>>
>>> 1/ You are summing a very large number of numbers, in which case the sum
>>> can become very large compared to numbers being added, then things can
>>> get a bit funny.
>>>
>>> 2/ You are using single precision in fortran rather than double. Double
>>> is needed for all floating point numbers you use!
>>>
>>> 3/ You have not zeroed the double precision numbers in fortran. (Some
>>> compilers do not do this automatically and you have to specify it.) Then
>>> if you accidentally put singles, like a constant 0.0 rather than a
>>> constant 0.0D+0, into a double you will have small junk in the lower
>>> precision part.
>>>
>>> (I am assuming you are talking about a sum of reals, not integer or
>>> complex.)
>>>
>>> HTH,
>>> Paul Gilbert
>>>
>>> On 2/14/19 2:08 PM, Rampal Etienne wrote:
>>> > Hello,
>>> >
>>> > I am trying to write FORTRAN code to do the same as some R code I
>>> have.
>>> > I get (small) differences when using the sum function in R. I know
>>> there
>>> > are numerical routines to improve precision, but I have not been able
>>> to
>>> > figure out what algorithm R is using. Does anyone know this? Or where
>>> > can I find the code for the sum function?
>>> >
>>> > Regards,
>>> >
>>> > Rampal Etienne
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Thu Feb 21 01:14:02 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 20 Feb 2019 19:14:02 -0500
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
Message-ID: <7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>

An lme4 user pointed out <https://github.com/lme4/lme4/issues/491> that
passing contrasts as a string or symbol to [g]lmer (which would work if
we were using `contrasts<-` to set contrasts on a factor variable) is
*silently ignored*. This goes back to model.matrix(), and seems bad
(this is a very easy mistake to make, because of the multitude of ways
to specify contrasts for factors in R  - e.g. options(contrasts=...);
setting contrasts on the specific factors; passing contrasts as a list
to the model function ... )

The relevant code is here:

https://github.com/wch/r-source/blob/trunk/src/library/stats/R/models.R#L578-L603

The following code shows the problem: a plain-vanilla model.matrix()
call with no contrasts argument, followed by two wrong contrasts
arguments, followed by a correct contrasts argument.

data(cbpp, package="lme4")
mf1 <- model.matrix(~period, data=cbpp)
mf2 <- model.matrix(~period, contrasts.arg="contr.sum", data=cbpp)
all.equal(mf1,mf2) ## TRUE
mf3 <- model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
all.equal(mf1,mf3)  ## TRUE
mf4 <- model.matrix(~period, contrasts.arg=list(period=contr.sum),
data=cbpp)
isTRUE(all.equal(mf1,mf4))  ## FALSE


  I've attached a potential patch for this, which is IMO the mildest
possible case (if contrasts.arg is non-NULL and not a list, it produces
a warning).  I haven't been able to test it because of some mysterious
issues I'm having with re-making R properly ...

  Thoughts?  Should I submit this as a bug report/patch?

  cheers
   Ben Bolker



-------------- next part --------------
A non-text attachment was scrubbed...
Name: models.R.diff
Type: text/x-patch
Size: 2138 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190220/7469d872/attachment.bin>

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 21 08:55:38 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 21 Feb 2019 08:55:38 +0100
Subject: [Rd] code for sum function
In-Reply-To: <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>
 <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>
Message-ID: <71f5408f-faf5-aeeb-76ca-0c4467c57c70@gmail.com>

Dear Rampal,

you can download R source code in form of a tarball or from subversion, 
please see
https://cran.r-project.org/doc/manuals/R-admin.html#Obtaining-R
https://cran.r-project.org/doc/manuals/R-admin.html#Using-Subversion-and-rsync

There is also a web access to subversion, so specifically the sum is 
available in
https://svn.r-project.org/R/trunk/src/main/summary.c

The definition of LDOUBLE is here
https://svn.r-project.org/R/trunk/src/include/Defn.h

The index of R manuals is here
https://cran.r-project.org/manuals.html

The online documentation inside R gives for ?sum
"??? Loss of accuracy can occur when summing values of different signs:
 ???? this can even occur for sufficiently long integer inputs if the
 ???? partial sums would cause integer overflow.? Where possible
 ???? extended-precision accumulators are used, typically well supported
 ???? with C99 and newer, but possibly platform-dependent.
"

Best,
Tomas


On 2/20/19 11:55 PM, Rampal Etienne wrote:
> Dear Tomas,
>
> Where do I find these files? Do they contain the code for the sum 
> function?
>
> What do you mean exactly with your point on long doubles? Where can I 
> find documentation on this?
>
> Cheers, Rampal
>
> On Mon, Feb 18, 2019, 15:38 Tomas Kalibera <tomas.kalibera at gmail.com 
> <mailto:tomas.kalibera at gmail.com> wrote:
>
>     See do_summary() in summary.c, rsum() for doubles. R uses long double
>     type as accumulator on systems where available.
>
>     Best,
>     Tomas
>
>     On 2/14/19 2:08 PM, Rampal Etienne wrote:
>     > Hello,
>     >
>     > I am trying to write FORTRAN code to do the same as some R code I
>     > have. I get (small) differences when using the sum function in R. I
>     > know there are numerical routines to improve precision, but I
>     have not
>     > been able to figure out what algorithm R is using. Does anyone know
>     > this? Or where can I find the code for the sum function?
>     >
>     > Regards,
>     >
>     > Rampal Etienne
>     >
>     > ______________________________________________
>     > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From d@@tt@|| @end|ng |rom gm@||@com  Thu Feb 21 00:07:32 2019
From: d@@tt@|| @end|ng |rom gm@||@com (Dean Attali)
Date: Wed, 20 Feb 2019 18:07:32 -0500
Subject: [Rd] Bug in print.default: dispatches to global show instead of
 methods::show
Message-ID: <CA+j8Z+kxiwaTZv-bLEVo_OdkT3s_Jhw0y+GqCKwZZ-CaFgn-_Q@mail.gmail.com>

This is related to a problem that was fixed in 2015
https://github.com/wch/r-source/commit/38ea40dcd0353af16d35296ee621338c49ae48c9
The problem then was that auto-printing by typing an object to the console
would search for show() in the globalenv instead of in the methods
namespace.

The problem I would like to report is that it seems that when an S4 object
is printed with print(), a similar issue happens. I do realize that S4
objects should be printed with show() rather than print(), which would
solve the issue, but this still seems like a bug to me.

Example:

library(methods)
show <- function(...) message("hijacked!")
setClass("Test", representation(test = "character"))
test <- new("Test")
print(test)
# hijacked!

	[[alternative HTML version deleted]]


From ||one| @end|ng |rom r@tud|o@com  Thu Feb 21 12:27:11 2019
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Thu, 21 Feb 2019 12:27:11 +0100
Subject: [Rd] Bug in print.default: dispatches to global show instead of
 methods::show
In-Reply-To: <CA+j8Z+kxiwaTZv-bLEVo_OdkT3s_Jhw0y+GqCKwZZ-CaFgn-_Q@mail.gmail.com>
References: <CA+j8Z+kxiwaTZv-bLEVo_OdkT3s_Jhw0y+GqCKwZZ-CaFgn-_Q@mail.gmail.com>
Message-ID: <AFE7E38A-3E42-4A20-9FAD-209AB44F3100@rstudio.com>

Hello,

This is already fixed in r-devel, I think by this commit:

https://github.com/wch/r-source/commit/b59a1526085d1b4375b184d35118c6fd6f003912#diff-12de104c9320556f0e99da345c6fb259 <https://github.com/wch/r-source/commit/b59a1526085d1b4375b184d35118c6fd6f003912#diff-12de104c9320556f0e99da345c6fb259>

Best,
Lionel

> On 21 Feb 2019, at 00:07, Dean Attali <daattali at gmail.com> wrote:
> 
> This is related to a problem that was fixed in 2015
> https://github.com/wch/r-source/commit/38ea40dcd0353af16d35296ee621338c49ae48c9
> The problem then was that auto-printing by typing an object to the console
> would search for show() in the globalenv instead of in the methods
> namespace.
> 
> The problem I would like to report is that it seems that when an S4 object
> is printed with print(), a similar issue happens. I do realize that S4
> objects should be printed with show() rather than print(), which would
> solve the issue, but this still seems like a bug to me.
> 
> Example:
> 
> library(methods)
> show <- function(...) message("hijacked!")
> setClass("Test", representation(test = "character"))
> test <- new("Test")
> print(test)
> # hijacked!
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From r@mp@|et|enne @end|ng |rom gm@||@com  Wed Feb 20 23:38:51 2019
From: r@mp@|et|enne @end|ng |rom gm@||@com (Rampal Etienne)
Date: Wed, 20 Feb 2019 22:38:51 +0000
Subject: [Rd] code for sum function
In-Reply-To: <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
Message-ID: <CAOuLjjRPbSwLgy2MoEtdLXFs3X_BYEFC3DFcFvEM2ODNq-V2hg@mail.gmail.com>

Dear Paul,

Thank you for thinking with me. I will respond to your options:

>
> 0/ Your code is wrong, but that seems unlikely on such a simple
> calculations.
>

It's really just a comparison of the sum function in Fortran with that of
R. If instead I use the naive summation with a for loop in both languages I
get the same answer.

>
> 1/ You are summing a very large number of numbers, in which case the sum
> can become very large compared to numbers being added, then things can
> get a bit funny.
>
Yes, this is what's happening and why I need to know what algorithm R uses
to overcome or reduce these precision issues.

>
> 2/ You are using single precision in fortran rather than double. Double
> is needed for all floating point numbers you use!
>
I use doubles.

>
> 3/ You have not zeroed the double precision numbers in fortran. (Some
> compilers do not do this automatically and you have to specify it.) Then
> if you accidentally put singles, like a constant 0.0 rather than a
> constant 0.0D+0, into a double you will have small junk in the lower
> precision part.
>
It doesn't matter if I double them in this way or not (they are declared as
doubles and I think the compiler treats then as doubles).

So my question remains what algorithm R uses.

Cheers, Rampal

>
> On 2/14/19 2:08 PM, Rampal Etienne wrote:
> > Hello,
> >
> > I am trying to write FORTRAN code to do the same as some R code I have.
> > I get (small) differences when using the sum function in R. I know there
> > are numerical routines to improve precision, but I have not been able to
> > figure out what algorithm R is using. Does anyone know this? Or where
> > can I find the code for the sum function?
> >
> > Regards,
> >
> > Rampal Etienne
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From r@mp@|et|enne @end|ng |rom gm@||@com  Wed Feb 20 23:45:42 2019
From: r@mp@|et|enne @end|ng |rom gm@||@com (Rampal Etienne)
Date: Wed, 20 Feb 2019 22:45:42 +0000
Subject: [Rd] code for sum function
In-Reply-To: <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <66adfaca-27fe-4671-c73d-fd0462c36af0@gmail.com>
 <CAF8bMcZyCHPB1JcQyhwO=zx+7V2HOVALMUwHXvutjQf3Sv2S-A@mail.gmail.com>
Message-ID: <CAOuLjjS5o19+mKUQm7k33sqAMo3_nWp+Wygroqbr3G-PMJDUoQ@mail.gmail.com>

Dear Will,

This is exactly what I find.
My point is thus that the sum function in R is not a naive sum nor a
Kahansum (in all cases), but what algorithm is it using then?

Cheers, Rampal


On Tue, Feb 19, 2019, 19:08 William Dunlap <wdunlap at tibco.com wrote:

> The algorithm does make a differece.  You can use Kahan's summation
> algorithm (https://en.wikipedia.org/wiki/Kahan_summation_algorithm) to
> reduce the error compared to the naive summation algorithm.  E.g., in R
> code:
>
> naiveSum <-
> function(x) {
>    s <- 0.0
>    for(xi in x) s <- s + xi
>    s
> }
> kahanSum <- function (x)
> {
>    s <- 0.0
>    c <- 0.0 # running compensation for lost low-order bits
>    for(xi in x) {
>       y <- xi - c
>       t <- s + y # low-order bits of y may be lost here
>       c <- (t - s) - y
>       s <- t
>    }
>    s
> }
>
> > rSum <- vapply(c(1:20,10^(2:7)), function(n) sum(rep(1/7,n)), 0)
> > rNaiveSum <- vapply(c(1:20,10^(2:7)), function(n) naiveSum(rep(1/7,n)),
> 0)
> > rKahanSum <- vapply(c(1:20,10^(2:7)), function(n) kahanSum(rep(1/7,n)),
> 0)
> >
> > table(rSum == rNaiveSum)
>
> FALSE  TRUE
>    21     5
> > table(rSum == rKahanSum)
>
> FALSE  TRUE
>     3    23
>
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Tue, Feb 19, 2019 at 10:36 AM Paul Gilbert <pgilbert902 at gmail.com>
> wrote:
>
>> (I didn't see anyone else answer this, so ...)
>>
>> You can probably find the R code in src/main/ but I'm not sure. You are
>> talking about a very simple calculation, so it seems unlike that the
>> algorithm is the cause of the difference. I have done much more
>> complicated things and usually get machine precision comparisons. There
>> are four possibilities I can think of that could cause (small)
>> differences.
>>
>> 0/ Your code is wrong, but that seems unlikely on such a simple
>> calculations.
>>
>> 1/ You are summing a very large number of numbers, in which case the sum
>> can become very large compared to numbers being added, then things can
>> get a bit funny.
>>
>> 2/ You are using single precision in fortran rather than double. Double
>> is needed for all floating point numbers you use!
>>
>> 3/ You have not zeroed the double precision numbers in fortran. (Some
>> compilers do not do this automatically and you have to specify it.) Then
>> if you accidentally put singles, like a constant 0.0 rather than a
>> constant 0.0D+0, into a double you will have small junk in the lower
>> precision part.
>>
>> (I am assuming you are talking about a sum of reals, not integer or
>> complex.)
>>
>> HTH,
>> Paul Gilbert
>>
>> On 2/14/19 2:08 PM, Rampal Etienne wrote:
>> > Hello,
>> >
>> > I am trying to write FORTRAN code to do the same as some R code I have.
>> > I get (small) differences when using the sum function in R. I know
>> there
>> > are numerical routines to improve precision, but I have not been able
>> to
>> > figure out what algorithm R is using. Does anyone know this? Or where
>> > can I find the code for the sum function?
>> >
>> > Regards,
>> >
>> > Rampal Etienne
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From r@mp@|et|enne @end|ng |rom gm@||@com  Wed Feb 20 23:55:13 2019
From: r@mp@|et|enne @end|ng |rom gm@||@com (Rampal Etienne)
Date: Wed, 20 Feb 2019 22:55:13 +0000
Subject: [Rd] code for sum function
In-Reply-To: <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>
Message-ID: <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>

Dear Tomas,

Where do I find these files? Do they contain the code for the sum function?

What do you mean exactly with your point on long doubles? Where can I find
documentation on this?

Cheers, Rampal

On Mon, Feb 18, 2019, 15:38 Tomas Kalibera <tomas.kalibera at gmail.com wrote:

> See do_summary() in summary.c, rsum() for doubles. R uses long double
> type as accumulator on systems where available.
>
> Best,
> Tomas
>
> On 2/14/19 2:08 PM, Rampal Etienne wrote:
> > Hello,
> >
> > I am trying to write FORTRAN code to do the same as some R code I
> > have. I get (small) differences when using the sum function in R. I
> > know there are numerical routines to improve precision, but I have not
> > been able to figure out what algorithm R is using. Does anyone know
> > this? Or where can I find the code for the sum function?
> >
> > Regards,
> >
> > Rampal Etienne
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>

	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Thu Feb 21 13:49:23 2019
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Thu, 21 Feb 2019 12:49:23 +0000
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
In-Reply-To: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
References: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
Message-ID: <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>

Dear Ben,

Perhaps I'm missing the point, but contrasts.arg is documented to be a list. From ?model.matrix: "contrasts.arg: A list, whose entries are values (numeric matrices or character strings naming functions) to be used as replacement values for the contrasts replacement function and whose names are the names of columns of data containing factors." 

This isn't entirely accurate because a function also works as a named element of the list (in addition to a character string naming a function and a contrast matrix), as your example demonstrates, but nowhere that I'm aware of is it suggested that a non-list should work.

It certainly would be an improvement if specifying contrast.arg as a non-list generated an error or warning message, and it at least arguably would be convenient to allow a general contrast specification such as contrasts.arg-"contr.sum", but I don't see a bug here.

Best,
 John

  -------------------------------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Feb 20, 2019, at 7:14 PM, Ben Bolker <bbolker at gmail.com> wrote:
> 
> An lme4 user pointed out <https://github.com/lme4/lme4/issues/491> that
> passing contrasts as a string or symbol to [g]lmer (which would work if
> we were using `contrasts<-` to set contrasts on a factor variable) is
> *silently ignored*. This goes back to model.matrix(), and seems bad
> (this is a very easy mistake to make, because of the multitude of ways
> to specify contrasts for factors in R  - e.g. options(contrasts=...);
> setting contrasts on the specific factors; passing contrasts as a list
> to the model function ... )
> 
> The relevant code is here:
> 
> https://github.com/wch/r-source/blob/trunk/src/library/stats/R/models.R#L578-L603
> 
> The following code shows the problem: a plain-vanilla model.matrix()
> call with no contrasts argument, followed by two wrong contrasts
> arguments, followed by a correct contrasts argument.
> 
> data(cbpp, package="lme4")
> mf1 <- model.matrix(~period, data=cbpp)
> mf2 <- model.matrix(~period, contrasts.arg="contr.sum", data=cbpp)
> all.equal(mf1,mf2) ## TRUE
> mf3 <- model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
> all.equal(mf1,mf3)  ## TRUE
> mf4 <- model.matrix(~period, contrasts.arg=list(period=contr.sum),
> data=cbpp)
> isTRUE(all.equal(mf1,mf4))  ## FALSE
> 
> 
>  I've attached a potential patch for this, which is IMO the mildest
> possible case (if contrasts.arg is non-NULL and not a list, it produces
> a warning).  I haven't been able to test it because of some mysterious
> issues I'm having with re-making R properly ...
> 
>  Thoughts?  Should I submit this as a bug report/patch?
> 
>  cheers
>   Ben Bolker
> 
> 
> <models.R.diff>______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Thu Feb 21 14:18:51 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 21 Feb 2019 08:18:51 -0500
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
In-Reply-To: <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>
References: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
 <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>
Message-ID: <CABghstS8qm9hgbz6Laj-juTu9ra02jPZqhuU41_GkoKKJbzFYw@mail.gmail.com>

On Thu, Feb 21, 2019 at 7:49 AM Fox, John <jfox at mcmaster.ca> wrote:
>
> Dear Ben,
>
> Perhaps I'm missing the point, but contrasts.arg is documented to be a list. From ?model.matrix: "contrasts.arg: A list, whose entries are values (numeric matrices or character strings naming functions) to be used as replacement values for the contrasts replacement function and whose names are the names of columns of data containing factors."

  I absolutely agree that this is not a bug/behaves as documented (I
could have said that more clearly).  It's just that (for reasons I
attempted to explain) this is a really easy mistake to make.

> This isn't entirely accurate because a function also works as a named element of the list (in addition to a character string naming a function and a contrast matrix), as your example demonstrates, but nowhere that I'm aware of is it suggested that a non-list should work.
>
> It certainly would be an improvement if specifying contrast.arg as a non-list generated an error or warning message, and it at least arguably would be convenient to allow a general contrast specification such as contrasts.arg-"contr.sum", but I don't see a bug here.

  I agree.  That's what my patch does (throws a warning message if
contrasts.arg is non-NULL and not a list).

  cheers
   Ben Bolker



>
> Best,
>  John
>
>   -------------------------------------------------
>   John Fox, Professor Emeritus
>   McMaster University
>   Hamilton, Ontario, Canada
>   Web: http::/socserv.mcmaster.ca/jfox
>
> > On Feb 20, 2019, at 7:14 PM, Ben Bolker <bbolker at gmail.com> wrote:
> >
> > An lme4 user pointed out <https://github.com/lme4/lme4/issues/491> that
> > passing contrasts as a string or symbol to [g]lmer (which would work if
> > we were using `contrasts<-` to set contrasts on a factor variable) is
> > *silently ignored*. This goes back to model.matrix(), and seems bad
> > (this is a very easy mistake to make, because of the multitude of ways
> > to specify contrasts for factors in R  - e.g. options(contrasts=...);
> > setting contrasts on the specific factors; passing contrasts as a list
> > to the model function ... )
> >
> > The relevant code is here:
> >
> > https://github.com/wch/r-source/blob/trunk/src/library/stats/R/models.R#L578-L603
> >
> > The following code shows the problem: a plain-vanilla model.matrix()
> > call with no contrasts argument, followed by two wrong contrasts
> > arguments, followed by a correct contrasts argument.
> >
> > data(cbpp, package="lme4")
> > mf1 <- model.matrix(~period, data=cbpp)
> > mf2 <- model.matrix(~period, contrasts.arg="contr.sum", data=cbpp)
> > all.equal(mf1,mf2) ## TRUE
> > mf3 <- model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
> > all.equal(mf1,mf3)  ## TRUE
> > mf4 <- model.matrix(~period, contrasts.arg=list(period=contr.sum),
> > data=cbpp)
> > isTRUE(all.equal(mf1,mf4))  ## FALSE
> >
> >
> >  I've attached a potential patch for this, which is IMO the mildest
> > possible case (if contrasts.arg is non-NULL and not a list, it produces
> > a warning).  I haven't been able to test it because of some mysterious
> > issues I'm having with re-making R properly ...
> >
> >  Thoughts?  Should I submit this as a bug report/patch?
> >
> >  cheers
> >   Ben Bolker
> >
> >
> > <models.R.diff>______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Feb 21 14:39:45 2019
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 21 Feb 2019 08:39:45 -0500
Subject: [Rd] Proposed patch for ?Extract
Message-ID: <6BDB33C2-D787-4C6A-8308-E5249AFABFCE@me.com>

Hi,

In follow up to the thread on R-Help yesterday:

  https://stat.ethz.ch/pipermail/r-help/2019-February/461725.html

I am attaching a proposed patch against the trunk version of Extract.Rd, with wording added to the "Matrices and arrays" section, to note that indexing these object by factors behaves in a manner consistent with vectors.

Regards,

Marc Schwartz


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190221/56d90a97/attachment.txt>

-------------- next part --------------



From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Feb 21 17:29:10 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 21 Feb 2019 17:29:10 +0100
Subject: [Rd] Bug in print.default: dispatches to global show instead of
 methods::show
In-Reply-To: <AFE7E38A-3E42-4A20-9FAD-209AB44F3100@rstudio.com>
References: <CA+j8Z+kxiwaTZv-bLEVo_OdkT3s_Jhw0y+GqCKwZZ-CaFgn-_Q@mail.gmail.com>
 <AFE7E38A-3E42-4A20-9FAD-209AB44F3100@rstudio.com>
Message-ID: <23662.53718.733046.9225@stat.math.ethz.ch>

>>>>> Lionel Henry 
>>>>>     on Thu, 21 Feb 2019 12:27:11 +0100 writes:

    > Hello,
    > This is already fixed in r-devel, I think by this commit:

    > https://github.com/wch/r-source/commit/b59a1526085d1b4375b184d35118c6fd6f003912#diff-12de104c9320556f0e99da345c6fb259 <https://github.com/wch/r-source/commit/b59a1526085d1b4375b184d35118c6fd6f003912#diff-12de104c9320556f0e99da345c6fb259>

    > Best,
    > Lionel

Yes, indeed... part of patches that Lionel had proposed himself!

Best,
Martin

    >> On 21 Feb 2019, at 00:07, Dean Attali <daattali at gmail.com> wrote:
    >> 
    >> This is related to a problem that was fixed in 2015
    >> https://github.com/wch/r-source/commit/38ea40dcd0353af16d35296ee621338c49ae48c9
    >> The problem then was that auto-printing by typing an object to the console
    >> would search for show() in the globalenv instead of in the methods
    >> namespace.
    >> 
    >> The problem I would like to report is that it seems that when an S4 object
    >> is printed with print(), a similar issue happens. I do realize that S4
    >> objects should be printed with show() rather than print(), which would
    >> solve the issue, but this still seems like a bug to me.
    >> 
    >> Example:
    >> 
    >> library(methods)
    >> show <- function(...) message("hijacked!")
    >> setClass("Test", representation(test = "character"))
    >> test <- new("Test")
    >> print(test)
    >> # hijacked!
    >> 
    >> [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From dw|n@em|u@ @end|ng |rom comc@@t@net  Thu Feb 21 17:57:15 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Thu, 21 Feb 2019 08:57:15 -0800
Subject: [Rd] code for sum function
In-Reply-To: <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>
 <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>
Message-ID: <e98672c8-ca55-ac34-5f2c-b55befc52077@comcast.net>


On 2/20/19 2:55 PM, Rampal Etienne wrote:
> Dear Tomas,
>
> Where do I find these files? Do they contain the code for the sum function?

Yes.

https://svn.r-project.org/R/trunk/


David

>
> What do you mean exactly with your point on long doubles? Where can I find
> documentation on this?
>
> Cheers, Rampal
>
> On Mon, Feb 18, 2019, 15:38 Tomas Kalibera <tomas.kalibera at gmail.com wrote:
>
>> See do_summary() in summary.c, rsum() for doubles. R uses long double
>> type as accumulator on systems where available.
>>
>> Best,
>> Tomas
>>
>> On 2/14/19 2:08 PM, Rampal Etienne wrote:
>>> Hello,
>>>
>>> I am trying to write FORTRAN code to do the same as some R code I
>>> have. I get (small) differences when using the sum function in R. I
>>> know there are numerical routines to improve precision, but I have not
>>> been able to figure out what algorithm R is using. Does anyone know
>>> this? Or where can I find the code for the sum function?
>>>
>>> Regards,
>>>
>>> Rampal Etienne
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Thu Feb 21 18:02:57 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 21 Feb 2019 12:02:57 -0500
Subject: [Rd] code for sum function
In-Reply-To: <e98672c8-ca55-ac34-5f2c-b55befc52077@comcast.net>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>
 <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>
 <e98672c8-ca55-ac34-5f2c-b55befc52077@comcast.net>
Message-ID: <CABghstTiOPRfJgFTgw7_V5UbG3wNn36oWHnch7YBfrbLwH_ZXw@mail.gmail.com>

Specifically: https://svn.r-project.org/R/trunk/src/main/summary.c

And if you don't want to deal with Subversion, you can look at the
read-only github mirror:

https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/main/summary.c#L115-L131

On Thu, Feb 21, 2019 at 11:57 AM David Winsemius <dwinsemius at comcast.net> wrote:
>
>
> On 2/20/19 2:55 PM, Rampal Etienne wrote:
> > Dear Tomas,
> >
> > Where do I find these files? Do they contain the code for the sum function?
>
> Yes.
>
> https://svn.r-project.org/R/trunk/
>
>
> David
>
> >
> > What do you mean exactly with your point on long doubles? Where can I find
> > documentation on this?
> >
> > Cheers, Rampal
> >
> > On Mon, Feb 18, 2019, 15:38 Tomas Kalibera <tomas.kalibera at gmail.com wrote:
> >
> >> See do_summary() in summary.c, rsum() for doubles. R uses long double
> >> type as accumulator on systems where available.
> >>
> >> Best,
> >> Tomas
> >>
> >> On 2/14/19 2:08 PM, Rampal Etienne wrote:
> >>> Hello,
> >>>
> >>> I am trying to write FORTRAN code to do the same as some R code I
> >>> have. I get (small) differences when using the sum function in R. I
> >>> know there are numerical routines to improve precision, but I have not
> >>> been able to figure out what algorithm R is using. Does anyone know
> >>> this? Or where can I find the code for the sum function?
> >>>
> >>> Regards,
> >>>
> >>> Rampal Etienne
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >>
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Thu Feb 21 20:42:55 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 21 Feb 2019 11:42:55 -0800
Subject: [Rd] code for sum function
In-Reply-To: <CABghstTiOPRfJgFTgw7_V5UbG3wNn36oWHnch7YBfrbLwH_ZXw@mail.gmail.com>
References: <c1495700-e265-4ff8-1f36-e149bd4d1961@gmail.com>
 <13de2483-4cb0-38eb-4bcc-138844a3c0a8@gmail.com>
 <CAOuLjjRV4cDb73re6JVsMsnVSgBNRdLEPrP=Z6cxSHtnUakUzw@mail.gmail.com>
 <e98672c8-ca55-ac34-5f2c-b55befc52077@comcast.net>
 <CABghstTiOPRfJgFTgw7_V5UbG3wNn36oWHnch7YBfrbLwH_ZXw@mail.gmail.com>
Message-ID: <CAD4oTHG1xF7TT5qnd0wA1QwTTHCZ5MuuzkVDO_p3EbVRHZmsog@mail.gmail.com>

Hi all,

>From what I can see from my checkout of the Rsources (in src/main/summary.c
as pointed out by others) sums are calculated the "naive" way (see rsum  c
function) but  means are actually calculated something akin to the Neumaier
way (see real_mean c function).

Just an fyi.
~G

On Thu, Feb 21, 2019 at 9:03 AM Ben Bolker <bbolker at gmail.com> wrote:

> Specifically: https://svn.r-project.org/R/trunk/src/main/summary.c
>
> And if you don't want to deal with Subversion, you can look at the
> read-only github mirror:
>
>
> https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/main/summary.c#L115-L131
>
> On Thu, Feb 21, 2019 at 11:57 AM David Winsemius <dwinsemius at comcast.net>
> wrote:
> >
> >
> > On 2/20/19 2:55 PM, Rampal Etienne wrote:
> > > Dear Tomas,
> > >
> > > Where do I find these files? Do they contain the code for the sum
> function?
> >
> > Yes.
> >
> > https://svn.r-project.org/R/trunk/
> >
> >
> > David
> >
> > >
> > > What do you mean exactly with your point on long doubles? Where can I
> find
> > > documentation on this?
> > >
> > > Cheers, Rampal
> > >
> > > On Mon, Feb 18, 2019, 15:38 Tomas Kalibera <tomas.kalibera at gmail.com
> wrote:
> > >
> > >> See do_summary() in summary.c, rsum() for doubles. R uses long double
> > >> type as accumulator on systems where available.
> > >>
> > >> Best,
> > >> Tomas
> > >>
> > >> On 2/14/19 2:08 PM, Rampal Etienne wrote:
> > >>> Hello,
> > >>>
> > >>> I am trying to write FORTRAN code to do the same as some R code I
> > >>> have. I get (small) differences when using the sum function in R. I
> > >>> know there are numerical routines to improve precision, but I have
> not
> > >>> been able to figure out what algorithm R is using. Does anyone know
> > >>> this? Or where can I find the code for the sum function?
> > >>>
> > >>> Regards,
> > >>>
> > >>> Rampal Etienne
> > >>>
> > >>> ______________________________________________
> > >>> R-devel at r-project.org mailing list
> > >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>
> > >>
> > >       [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tho@j|eeper @end|ng |rom gm@||@com  Thu Feb 21 21:57:15 2019
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Thu, 21 Feb 2019 20:57:15 +0000
Subject: [Rd] Return/print standard error in t.test()
Message-ID: <CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>

A recent thread on Twitter [1] by a Stata user highlighted that t.test()
does not return or print the standard error of the mean difference, despite
it being calculated by the function.

I know this isn?t the kind of change that?s likely to be made but could we
at least return the SE even if the print() method isn?t updated? Or,
better, update the print() method to display this as well?

Best,
Thomas

[1]
https://twitter.com/amandayagan/status/1098314654470819840?s=21
-- 

Thomas J. Leeper
http://www.thomasleeper.com

	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Thu Feb 21 22:51:15 2019
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Thu, 21 Feb 2019 21:51:15 +0000
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
Message-ID: <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>

Dear Thomas,

it is, unfortunately, not that simple. t.test() returns an object of class "htest" and not all such objects have standard errors. I'm not entirely sure what the point is since it's easy to compute the standard error of the difference from the information in the object (adapting an example from ?t.test):

> (res <- t.test(1:10, y = c(7:20)))

	Welch Two Sample t-test

data:  1:10 and c(7:20)
t = -5.4349, df = 21.982, p-value = 1.855e-05
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -11.052802  -4.947198
sample estimates:
mean of x mean of y 
      5.5      13.5 

> as.vector(abs(diff(res$estimate)/res$statistic)) # SE
[1] 1.47196
> class(res)
[1] "htest"

and if you really want to print the SE as a matter of course, you could always write your own wrapper for t.test() that returns an object of class, say, "t.test" for which you can provide a print() method. Much of the advantage of working in a statistical computing environment like R (or Stata, for that matter) is that you can make things work the way you like.

Best,
 John

  -------------------------------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
> 
> A recent thread on Twitter [1] by a Stata user highlighted that t.test()
> does not return or print the standard error of the mean difference, despite
> it being calculated by the function.
> 
> I know this isn?t the kind of change that?s likely to be made but could we
> at least return the SE even if the print() method isn?t updated? Or,
> better, update the print() method to display this as well?
> 
> Best,
> Thomas
> 
> [1]
> https://twitter.com/amandayagan/status/1098314654470819840?s=21
> -- 
> 
> Thomas J. Leeper
> http://www.thomasleeper.com
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Feb 21 23:19:13 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 21 Feb 2019 22:19:13 +0000
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
 <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
Message-ID: <42e3fe42-cbff-f07c-28dd-76fb805cb370@sapo.pt>

Hello,

Something like this?



t.test2 <- function(...) {
   ht <- t.test(...)
   class(ht) <- c("htest_tjl", class(ht))
   ht
}
print.htest_tjl <- function(x, ...) {
   NextMethod(x, ...)
   se <- as.vector(abs(diff(x$estimate)/x$statistic))
   cat("Standard error of the difference:", se, "\n\n")
   invisible(x)
}

t.test2(1:10, y = c(7:20))
t.test2(extra ~ group, data = sleep)  # last example from ?t.test



(The suffix tjl commes from the OP's initials.)


Hope this helps,

Rui Barradas

?s 21:51 de 21/02/2019, Fox, John escreveu:
> Dear Thomas,
> 
> it is, unfortunately, not that simple. t.test() returns an object of class "htest" and not all such objects have standard errors. I'm not entirely sure what the point is since it's easy to compute the standard error of the difference from the information in the object (adapting an example from ?t.test):
> 
>> (res <- t.test(1:10, y = c(7:20)))
> 
> 	Welch Two Sample t-test
> 
> data:  1:10 and c(7:20)
> t = -5.4349, df = 21.982, p-value = 1.855e-05
> alternative hypothesis: true difference in means is not equal to 0
> 95 percent confidence interval:
>   -11.052802  -4.947198
> sample estimates:
> mean of x mean of y
>        5.5      13.5
> 
>> as.vector(abs(diff(res$estimate)/res$statistic)) # SE
> [1] 1.47196
>> class(res)
> [1] "htest"
> 
> and if you really want to print the SE as a matter of course, you could always write your own wrapper for t.test() that returns an object of class, say, "t.test" for which you can provide a print() method. Much of the advantage of working in a statistical computing environment like R (or Stata, for that matter) is that you can make things work the way you like.
> 
> Best,
>   John
> 
>    -------------------------------------------------
>    John Fox, Professor Emeritus
>    McMaster University
>    Hamilton, Ontario, Canada
>    Web: http::/socserv.mcmaster.ca/jfox
> 
>> On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
>>
>> A recent thread on Twitter [1] by a Stata user highlighted that t.test()
>> does not return or print the standard error of the mean difference, despite
>> it being calculated by the function.
>>
>> I know this isn?t the kind of change that?s likely to be made but could we
>> at least return the SE even if the print() method isn?t updated? Or,
>> better, update the print() method to display this as well?
>>
>> Best,
>> Thomas
>>
>> [1]
>> https://twitter.com/amandayagan/status/1098314654470819840?s=21
>> -- 
>>
>> Thomas J. Leeper
>> http://www.thomasleeper.com
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From tho@j|eeper @end|ng |rom gm@||@com  Thu Feb 21 23:21:21 2019
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Thu, 21 Feb 2019 22:21:21 +0000
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
 <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
Message-ID: <CAOC91MS9RxfZ-3TWWFYikaBDO5vsRo1bFAdyACAcf0vaW0XcUA@mail.gmail.com>

Hi John,

Thanks for your reply. Of course I could write a package and of course I
would find that trivial to do. The point is this is a main entry point to R
for probably (at this point) hundreds of thousands of students. I?d like
them to be able to get a basic quantity of interest from a t-test without
four subsequent function calls.

I also don?t really see the point about the object class, given we?re
talking S3. print() doesn?t have to print everything in the object (see
e.g., print.lm() ), so there should be little harm in returning additional
information when relevant. Leaving the print() method unchanged and simply
returning the SE as an additional element should affect almost nothing.

I?m all for continuity and conservative development, but we also should aim
to make R as useful and usable as possible. This seems like a nice simple
way to do that.

Best,
Thomas


On Thu, 21 Feb 2019 at 21:51 Fox, John <jfox at mcmaster.ca> wrote:

> Dear Thomas,
>
> it is, unfortunately, not that simple. t.test() returns an object of class
> "htest" and not all such objects have standard errors. I'm not entirely
> sure what the point is since it's easy to compute the standard error of the
> difference from the information in the object (adapting an example from
> ?t.test):
>
> > (res <- t.test(1:10, y = c(7:20)))
>
>         Welch Two Sample t-test
>
> data:  1:10 and c(7:20)
> t = -5.4349, df = 21.982, p-value = 1.855e-05
> alternative hypothesis: true difference in means is not equal to 0
> 95 percent confidence interval:
>  -11.052802  -4.947198
> sample estimates:
> mean of x mean of y
>       5.5      13.5
>
> > as.vector(abs(diff(res$estimate)/res$statistic)) # SE
> [1] 1.47196
> > class(res)
> [1] "htest"
>
> and if you really want to print the SE as a matter of course, you could
> always write your own wrapper for t.test() that returns an object of class,
> say, "t.test" for which you can provide a print() method. Much of the
> advantage of working in a statistical computing environment like R (or
> Stata, for that matter) is that you can make things work the way you like.
>
> Best,
>  John
>
>   -------------------------------------------------
>   John Fox, Professor Emeritus
>   McMaster University
>   Hamilton, Ontario, Canada
>   Web: http::/socserv.mcmaster.ca/jfox
>
> > On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com>
> wrote:
> >
> > A recent thread on Twitter [1] by a Stata user highlighted that t.test()
> > does not return or print the standard error of the mean difference,
> despite
> > it being calculated by the function.
> >
> > I know this isn?t the kind of change that?s likely to be made but could
> we
> > at least return the SE even if the print() method isn?t updated? Or,
> > better, update the print() method to display this as well?
> >
> > Best,
> > Thomas
> >
> > [1]
> > https://twitter.com/amandayagan/status/1098314654470819840?s=21
> > --
> >
> > Thomas J. Leeper
> > http://www.thomasleeper.com
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --

Thomas J. Leeper
http://www.thomasleeper.com

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb 22 12:11:25 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 22 Feb 2019 12:11:25 +0100
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <CAOC91MS9RxfZ-3TWWFYikaBDO5vsRo1bFAdyACAcf0vaW0XcUA@mail.gmail.com>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
 <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
 <CAOC91MS9RxfZ-3TWWFYikaBDO5vsRo1bFAdyACAcf0vaW0XcUA@mail.gmail.com>
Message-ID: <23663.55517.897575.504738@stat.math.ethz.ch>

>>>>> Thomas J Leeper 
>>>>>     on Thu, 21 Feb 2019 22:21:21 +0000 writes:

    > Hi John,
    > Thanks for your reply. Of course I could write a package and of course I
    > would find that trivial to do. The point is this is a main entry point to R
    > for probably (at this point) hundreds of thousands of students. I?d like
    > them to be able to get a basic quantity of interest from a t-test without
    > four subsequent function calls.

    > I also don?t really see the point about the object class, given we?re
    > talking S3. print() doesn?t have to print everything in the object (see
    > e.g., print.lm() ), so there should be little harm in returning additional
    > information when relevant. Leaving the print() method unchanged and simply
    > returning the SE as an additional element should affect almost nothing.

    > I?m all for continuity and conservative development, but we also should aim
    > to make R as useful and usable as possible. This seems like a nice simple
    > way to do that.

I agree with both John Fox and Thomas Leeper
(well, with a subset of their union ;-)

John made the point [and Rui nicely showed how to implement it]
that *printing* such a standard error in addition to the other
stats needs potentially more changes via a specialized print() method.

Also, R in general has refused for good reasons to behave like
old batch stats software and printing all possibly interesting
output.
.. and I'd really like us to stay in that tradition and hence
*not* print such extra numbers.

Also, if your students learn slightly more about stats, they are
hopefully taught that the t.test is a simple special case of
linear (gaussian) regression, and you can teach them the
corresponding

   summary(lm( .. ))

which gives identical t-stat and p-value and does print SEs.

OTOH, I agree with Thomas (and IIRC earlier correspondents on
this issue) that it does seem natural to return the SE here, as
it is crucially used in the formula for the t-stat anyway, and
people can use it to easily compute confidence intervals (or
p-values if really desired) for other levels than 95% / 5% ..

So adding another component to the list returned by t.test()
seems fine to me, and hopefully saves us future e-mails on the topic
  [... well almost surely there will be those asking us to
   change the print() method too, but we'll survive that.]

Martin


    > On Thu, 21 Feb 2019 at 21:51 Fox, John <jfox at mcmaster.ca> wrote:

    >> Dear Thomas,
    >> 
    >> it is, unfortunately, not that simple. t.test() returns an object of class
    >> "htest" and not all such objects have standard errors. I'm not entirely
    >> sure what the point is since it's easy to compute the standard error of the
    >> difference from the information in the object (adapting an example from
    >> ?t.test):
    >> 
    >> > (res <- t.test(1:10, y = c(7:20)))
    >> 
    >> Welch Two Sample t-test
    >> 
    >> data:  1:10 and c(7:20)
    >> t = -5.4349, df = 21.982, p-value = 1.855e-05
    >> alternative hypothesis: true difference in means is not equal to 0
    >> 95 percent confidence interval:
    >> -11.052802  -4.947198
    >> sample estimates:
    >> mean of x mean of y
    >> 5.5      13.5
    >> 
    >> > as.vector(abs(diff(res$estimate)/res$statistic)) # SE
    >> [1] 1.47196
    >> > class(res)
    >> [1] "htest"
    >> 
    >> and if you really want to print the SE as a matter of course, you could
    >> always write your own wrapper for t.test() that returns an object of class,
    >> say, "t.test" for which you can provide a print() method. Much of the
    >> advantage of working in a statistical computing environment like R (or
    >> Stata, for that matter) is that you can make things work the way you like.
    >> 
    >> Best,
    >> John
    >> 
    >> -------------------------------------------------
    >> John Fox, Professor Emeritus
    >> McMaster University
    >> Hamilton, Ontario, Canada
    >> Web: http::/socserv.mcmaster.ca/jfox
    >> 
    >> > On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com>
    >> wrote:
    >> >
    >> > A recent thread on Twitter [1] by a Stata user highlighted that t.test()
    >> > does not return or print the standard error of the mean difference,
    >> despite
    >> > it being calculated by the function.
    >> >
    >> > I know this isn?t the kind of change that?s likely to be made but could
    >> we
    >> > at least return the SE even if the print() method isn?t updated? Or,
    >> > better, update the print() method to display this as well?
    >> >
    >> > Best,
    >> > Thomas
    >> >
    >> > [1]
    >> > https://twitter.com/amandayagan/status/1098314654470819840?s=21
    >> > --
    >> >
    >> > Thomas J. Leeper
    >> > http://www.thomasleeper.com
    >> >
    >> >       [[alternative HTML version deleted]]
    >> >
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> --

    > Thomas J. Leeper
    > http://www.thomasleeper.com

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb 22 12:15:57 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 22 Feb 2019 12:15:57 +0100
Subject: [Rd] Proposed patch for ?Extract
In-Reply-To: <6BDB33C2-D787-4C6A-8308-E5249AFABFCE@me.com>
References: <6BDB33C2-D787-4C6A-8308-E5249AFABFCE@me.com>
Message-ID: <23663.55789.466736.909116@stat.math.ethz.ch>

>>>>> Marc Schwartz via R-devel 
>>>>>     on Thu, 21 Feb 2019 14:39:45 +0100 writes:

 >   Hi,

> In follow up to the thread on R-Help yesterday:
>    https://stat.ethz.ch/pipermail/r-help/2019-February/461725.html

> I am attaching a proposed patch against the trunk version of
> Extract.Rd, with wording added to the "Matrices and arrays" section, to
> note that indexing these object by factors behaves in a manner
> consistent with vectors.
> Regards,
> Marc Schwartz

Seems reasonable to me: some redundancy is allowed even in the
reference manuals (:= union of all help pages).
{good useRs knowning that 'matrix' and 'arrays' are atomic
 vectors, too .. as was mentioned.}

Martin


From pd@|gd @end|ng |rom gm@||@com  Fri Feb 22 12:38:14 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 22 Feb 2019 12:38:14 +0100
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
 <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
Message-ID: <0A38DEBA-18D2-4ED2-BFE1-B4E98F657643@gmail.com>

It's not a problem per se to put additional information into class htest objects (hey, it's S3 after all...) and there is a precedent in chisq.test which returns $observed and $expected.

Getting such information printed by print.htest is more tricky, although it might be possible to (ab)use the $estimate slot. 

The further question is whether one would really want to do that (change the output and/or modify the current return values), at the risk of affecting a rather large bundle of existing scripts, books, lecture notes, etc. I don't think that I would want to do that for the case of the s.e.d., although I'll admit that there is another thing that has always been a bit of an eyesore to me: We give a confidence interval but not the corresponding point estimate (i.e. the _difference_ of the means).

It might be better to simply start over and write a new function. In the process one might address other things that people have been asking for, like calculations based on the sample mean and SDs (which would useful for dealing with published summaries and textbook examples). Oh, and a formula interface for the one-sample test.

-pd

> On 21 Feb 2019, at 22:51 , Fox, John <jfox at mcmaster.ca> wrote:
> 
> Dear Thomas,
> 
> it is, unfortunately, not that simple. t.test() returns an object of class "htest" and not all such objects have standard errors. I'm not entirely sure what the point is since it's easy to compute the standard error of the difference from the information in the object (adapting an example from ?t.test):
> 
>> (res <- t.test(1:10, y = c(7:20)))
> 
> 	Welch Two Sample t-test
> 
> data:  1:10 and c(7:20)
> t = -5.4349, df = 21.982, p-value = 1.855e-05
> alternative hypothesis: true difference in means is not equal to 0
> 95 percent confidence interval:
> -11.052802  -4.947198
> sample estimates:
> mean of x mean of y 
>      5.5      13.5 
> 
>> as.vector(abs(diff(res$estimate)/res$statistic)) # SE
> [1] 1.47196
>> class(res)
> [1] "htest"
> 
> and if you really want to print the SE as a matter of course, you could always write your own wrapper for t.test() that returns an object of class, say, "t.test" for which you can provide a print() method. Much of the advantage of working in a statistical computing environment like R (or Stata, for that matter) is that you can make things work the way you like.
> 
> Best,
> John
> 
>  -------------------------------------------------
>  John Fox, Professor Emeritus
>  McMaster University
>  Hamilton, Ontario, Canada
>  Web: http::/socserv.mcmaster.ca/jfox
> 
>> On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
>> 
>> A recent thread on Twitter [1] by a Stata user highlighted that t.test()
>> does not return or print the standard error of the mean difference, despite
>> it being calculated by the function.
>> 
>> I know this isn?t the kind of change that?s likely to be made but could we
>> at least return the SE even if the print() method isn?t updated? Or,
>> better, update the print() method to display this as well?
>> 
>> Best,
>> Thomas
>> 
>> [1]
>> https://twitter.com/amandayagan/status/1098314654470819840?s=21
>> -- 
>> 
>> Thomas J. Leeper
>> http://www.thomasleeper.com
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb 22 17:49:40 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 22 Feb 2019 17:49:40 +0100
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
In-Reply-To: <CABghstS8qm9hgbz6Laj-juTu9ra02jPZqhuU41_GkoKKJbzFYw@mail.gmail.com>
References: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
 <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>
 <CABghstS8qm9hgbz6Laj-juTu9ra02jPZqhuU41_GkoKKJbzFYw@mail.gmail.com>
Message-ID: <23664.10276.644277.668486@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Thu, 21 Feb 2019 08:18:51 -0500 writes:

    > On Thu, Feb 21, 2019 at 7:49 AM Fox, John <jfox at mcmaster.ca> wrote:
    >> 
    >> Dear Ben,
    >> 
    >> Perhaps I'm missing the point, but contrasts.arg is documented to be a list. From ?model.matrix: "contrasts.arg: A list, whose entries are values (numeric matrices or character strings naming functions) to be used as replacement values for the contrasts replacement function and whose names are the names of columns of data containing factors."

    > I absolutely agree that this is not a bug/behaves as documented (I
    > could have said that more clearly).  It's just that (for reasons I
    > attempted to explain) this is a really easy mistake to make.

    >> This isn't entirely accurate because a function also works as a named element of the list (in addition to a character string naming a function and a contrast matrix), as your example demonstrates, but nowhere that I'm aware of is it suggested that a non-list should work.
    >> 
    >> It certainly would be an improvement if specifying contrast.arg as a non-list generated an error or warning message, and it at least arguably would be convenient to allow a general contrast specification such as contrasts.arg-"contr.sum", but I don't see a bug here.

    > I agree.  That's what my patch does (throws a warning message if
    > contrasts.arg is non-NULL and not a list).

I currently do think this is a good idea... "even though" I'm 99%
sure that this will make work for package maintainers and others
whose code may suddenly show warnings.
I hope they would know better than suppressWarnings(.) ...

I see a version of the patch using old style indentation which
makes the diff even "considerably" smaller -- no need to submit
this different, though --
and I plan to test that a bit, and commit eventually to R-devel,
possibly in a 5 days or so. 

Thank you Ben for the suggestion and patch !
Martin

    > cheers
    > Ben Bolker

    >> Best,
    >> John
    >> 
    >> -------------------------------------------------
    >> John Fox, Professor Emeritus
    >> McMaster University
    >> Hamilton, Ontario, Canada
    >> Web: http::/socserv.mcmaster.ca/jfox
    >> 
    >> > On Feb 20, 2019, at 7:14 PM, Ben Bolker <bbolker at gmail.com> wrote:
    >> >
    >> > An lme4 user pointed out <https://github.com/lme4/lme4/issues/491> that
    >> > passing contrasts as a string or symbol to [g]lmer (which would work if
    >> > we were using `contrasts<-` to set contrasts on a factor variable) is
    >> > *silently ignored*. This goes back to model.matrix(), and seems bad
    >> > (this is a very easy mistake to make, because of the multitude of ways
    >> > to specify contrasts for factors in R  - e.g. options(contrasts=...);
    >> > setting contrasts on the specific factors; passing contrasts as a list
    >> > to the model function ... )
    >> >
    >> > The relevant code is here:
    >> >
    >> > https://github.com/wch/r-source/blob/trunk/src/library/stats/R/models.R#L578-L603
    >> >
    >> > The following code shows the problem: a plain-vanilla model.matrix()
    >> > call with no contrasts argument, followed by two wrong contrasts
    >> > arguments, followed by a correct contrasts argument.
    >> >
    >> > data(cbpp, package="lme4")
    >> > mf1 <- model.matrix(~period, data=cbpp)
    >> > mf2 <- model.matrix(~period, contrasts.arg="contr.sum", data=cbpp)
    >> > all.equal(mf1,mf2) ## TRUE
    >> > mf3 <- model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
    >> > all.equal(mf1,mf3)  ## TRUE
    >> > mf4 <- model.matrix(~period, contrasts.arg=list(period=contr.sum),
    >> > data=cbpp)
    >> > isTRUE(all.equal(mf1,mf4))  ## FALSE
    >> >
    >> >
    >> >  I've attached a potential patch for this, which is IMO the mildest
    >> > possible case (if contrasts.arg is non-NULL and not a list, it produces
    >> > a warning).  I haven't been able to test it because of some mysterious
    >> > issues I'm having with re-making R properly ...
    >> >
    >> >  Thoughts?  Should I submit this as a bug report/patch?
    >> >
    >> >  cheers
    >> >   Ben Bolker
    >>
    >> > <models.R.diff>______________________________________________


From j|ox @end|ng |rom mcm@@ter@c@  Fri Feb 22 18:40:15 2019
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Fri, 22 Feb 2019 17:40:15 +0000
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
In-Reply-To: <23664.10276.644277.668486@stat.math.ethz.ch>
References: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
 <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>
 <CABghstS8qm9hgbz6Laj-juTu9ra02jPZqhuU41_GkoKKJbzFYw@mail.gmail.com>
 <23664.10276.644277.668486@stat.math.ethz.ch>
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC836ACBF08@FHSDB2D11-2.csu.mcmaster.ca>

Dear Martin and Ben,

I agree that a warning is a good idea (and perhaps that wasn't clear in my response to Ben's post). 

Also, it would be nice to correct the omission in the help file, which as far as I could see doesn't mention that a contrast-generating function (as opposed to its quoted name) can be an element of the contrasts.arg list.

Best,
 John

> -----Original Message-----
> From: Martin Maechler [mailto:maechler at stat.math.ethz.ch]
> Sent: Friday, February 22, 2019 11:50 AM
> To: Ben Bolker <bbolker at gmail.com>
> Cc: Fox, John <jfox at mcmaster.ca>; r-devel at r-project.org
> Subject: Re: [Rd] model.matrix.default() silently ignores bad contrasts.arg
> 
> >>>>> Ben Bolker
> >>>>>     on Thu, 21 Feb 2019 08:18:51 -0500 writes:
> 
>     > On Thu, Feb 21, 2019 at 7:49 AM Fox, John <jfox at mcmaster.ca> wrote:
>     >>
>     >> Dear Ben,
>     >>
>     >> Perhaps I'm missing the point, but contrasts.arg is documented to be a
> list. From ?model.matrix: "contrasts.arg: A list, whose entries are values
> (numeric matrices or character strings naming functions) to be used as
> replacement values for the contrasts replacement function and whose
> names are the names of columns of data containing factors."
> 
>     > I absolutely agree that this is not a bug/behaves as documented (I
>     > could have said that more clearly).  It's just that (for reasons I
>     > attempted to explain) this is a really easy mistake to make.
> 
>     >> This isn't entirely accurate because a function also works as a named
> element of the list (in addition to a character string naming a function and a
> contrast matrix), as your example demonstrates, but nowhere that I'm
> aware of is it suggested that a non-list should work.
>     >>
>     >> It certainly would be an improvement if specifying contrast.arg as a non-
> list generated an error or warning message, and it at least arguably would be
> convenient to allow a general contrast specification such as contrasts.arg-
> "contr.sum", but I don't see a bug here.
> 
>     > I agree.  That's what my patch does (throws a warning message if
>     > contrasts.arg is non-NULL and not a list).
> 
> I currently do think this is a good idea... "even though" I'm 99% sure that this
> will make work for package maintainers and others whose code may
> suddenly show warnings.
> I hope they would know better than suppressWarnings(.) ...
> 
> I see a version of the patch using old style indentation which makes the diff
> even "considerably" smaller -- no need to submit this different, though --
> and I plan to test that a bit, and commit eventually to R-devel, possibly in a 5
> days or so.
> 
> Thank you Ben for the suggestion and patch !
> Martin
> 
>     > cheers
>     > Ben Bolker
> 
>     >> Best,
>     >> John
>     >>
>     >> -------------------------------------------------
>     >> John Fox, Professor Emeritus
>     >> McMaster University
>     >> Hamilton, Ontario, Canada
>     >> Web: http::/socserv.mcmaster.ca/jfox
>     >>
>     >> > On Feb 20, 2019, at 7:14 PM, Ben Bolker <bbolker at gmail.com> wrote:
>     >> >
>     >> > An lme4 user pointed out
> <https://github.com/lme4/lme4/issues/491> that
>     >> > passing contrasts as a string or symbol to [g]lmer (which would work if
>     >> > we were using `contrasts<-` to set contrasts on a factor variable) is
>     >> > *silently ignored*. This goes back to model.matrix(), and seems bad
>     >> > (this is a very easy mistake to make, because of the multitude of ways
>     >> > to specify contrasts for factors in R  - e.g. options(contrasts=...);
>     >> > setting contrasts on the specific factors; passing contrasts as a list
>     >> > to the model function ... )
>     >> >
>     >> > The relevant code is here:
>     >> >
>     >> > https://github.com/wch/r-
> source/blob/trunk/src/library/stats/R/models.R#L578-L603
>     >> >
>     >> > The following code shows the problem: a plain-vanilla model.matrix()
>     >> > call with no contrasts argument, followed by two wrong contrasts
>     >> > arguments, followed by a correct contrasts argument.
>     >> >
>     >> > data(cbpp, package="lme4")
>     >> > mf1 <- model.matrix(~period, data=cbpp)
>     >> > mf2 <- model.matrix(~period, contrasts.arg="contr.sum", data=cbpp)
>     >> > all.equal(mf1,mf2) ## TRUE
>     >> > mf3 <- model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
>     >> > all.equal(mf1,mf3)  ## TRUE
>     >> > mf4 <- model.matrix(~period, contrasts.arg=list(period=contr.sum),
>     >> > data=cbpp)
>     >> > isTRUE(all.equal(mf1,mf4))  ## FALSE
>     >> >
>     >> >
>     >> >  I've attached a potential patch for this, which is IMO the mildest
>     >> > possible case (if contrasts.arg is non-NULL and not a list, it produces
>     >> > a warning).  I haven't been able to test it because of some mysterious
>     >> > issues I'm having with re-making R properly ...
>     >> >
>     >> >  Thoughts?  Should I submit this as a bug report/patch?
>     >> >
>     >> >  cheers
>     >> >   Ben Bolker
>     >>
>     >> >
> <models.R.diff>______________________________________________


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Feb 22 20:16:09 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 22 Feb 2019 20:16:09 +0100
Subject: [Rd] 
 Bug: time complexity of substring is quadratic as string size
 and number of substrings increases
In-Reply-To: <CALK03d1oR9u_WraZFAhRTrnWHMfYgJ0APgitGnp4ywok1kBOcg@mail.gmail.com>
References: <CALK03d1s36OCLD2Q=7frbL32jzUzhsEsLMHyH9tEqRB+dnrzGw@mail.gmail.com>
 <CALK03d1oR9u_WraZFAhRTrnWHMfYgJ0APgitGnp4ywok1kBOcg@mail.gmail.com>
Message-ID: <290ca417-27ce-dd84-277e-9bf5f6d45782@gmail.com>

On 2/20/19 7:55 PM, Toby Hocking wrote:
> Update: I have observed that stringi::stri_sub is linear time complexity,
> and it computes the same thing as base::substring. figure
> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png
> source:
> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R
>
> To me this is a clear indication of a bug in substring, but again it would
> be nice to have some feedback/confirmation before posting on bugzilla.
>
> Also this suggests a fix -- just need to copy whatever stringi::stri_sub is
> doing.

Thanks for the report, I am working on a patch that will address this.

I confirm there is a lot of potential for speedup. On my system,

'N=200000; x <- substring(paste(rep("A", N), collapse=""), 1:N, 1:N)'

spends 96% time in checking if the string is ascii and 3% in strlen(); 
if we take advantage of the pre-computed value in the ASCII bit, the 
speed up is about 40x. Of course, with micro-benchmarks, any performance 
limitation can be arbitrarily inflated, users cannot expect to see these 
or any close speedups in applications as a result of the patch. The 
patch is going to do other easy optimizations that will not complicate 
the code, including avoiding the strlen() call (taking advantage of 
pre-computed length of R character object).

Best
Tomas

>
>
>
> On Wed, Feb 20, 2019 at 11:16 AM Toby Hocking <tdhock5 at gmail.com> wrote:
>
>> Hi all, (and especially hi to Tomas Kalibera who accepted my patch sent
>> yesterday)
>>
>> I believe that I have found another bug, this time in the substring
>> function. The use case that I am concerned with is when there is a single
>> (character scalar) text/subject, and many substrings to extract. For example
>>
>> substring("AAAA", 1:4, 1:4)
>>
>> or more generally,
>>
>> N=1000
>> substring(paste(rep("A", N), collapse=""), 1:N, 1:N)
>>
>> The problem I observe is that the time complexity is quadratic in N, as
>> shown on this figure
>> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png
>> source:
>> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R
>>
>> I expected the time complexity to be linear in N.
>>
>> The example above may seem contrived/trivial, but it is indeed relevant to
>> a number of packages (rex, rematch2, namedCapture) which provide functions
>> that use gregexpr and then substring to extract the text in the captured
>> sub-patterns. The figure
>> https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.png
>> shows the issue: these packages have quadratic time complexity, whereas
>> other packages (and the gregexpr function with perl=TRUE after applying the
>> patch discussed yesterday) have linear time complexity. I believe the
>> problem is the substring function. Source for this figure:
>> https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.R
>>
>> I suspect that a fix can be accomplished by optimizing the implementation
>> of substring, for the special case when the text/subject is a single
>> element (character scalar). Right now I notice that the substring R code
>> uses rep_len so that the text/subject which is passed to the C code is a
>> character vector with the same length as the number of substrings to
>> extract. Maybe the C code is calling strlen for each of these (identical)
>> text/subject elements?
>>
>> Anyway, it would be useful to have some feedback to make sure this is
>> indeed a bug before I post on bugzilla. (btw thanks Martin for signing me
>> up for an account)
>>
>> Toby
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Feb 23 11:42:39 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 23 Feb 2019 11:42:39 +0100
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC836ACBF08@FHSDB2D11-2.csu.mcmaster.ca>
References: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
 <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>
 <CABghstS8qm9hgbz6Laj-juTu9ra02jPZqhuU41_GkoKKJbzFYw@mail.gmail.com>
 <23664.10276.644277.668486@stat.math.ethz.ch>
 <ACD1644AA6C67E4FBD0C350625508EC836ACBF08@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <23665.9119.771386.205226@stat.math.ethz.ch>

>>>>> Fox, John 
>>>>>     on Fri, 22 Feb 2019 17:40:15 +0000 writes:

    > Dear Martin and Ben, I agree that a warning is a good idea
    > (and perhaps that wasn't clear in my response to Ben's
    > post).

    > Also, it would be nice to correct the omission in the help
    > file, which as far as I could see doesn't mention that a
    > contrast-generating function (as opposed to its quoted
    > name) can be an element of the contrasts.arg list.

    > Best, John

Thank you John for the clarification and the reminder about
filling the omission there!

Prepared to go (into the sources) now.
Martin


    >> -----Original Message----- From: Martin Maechler
    >> [mailto:maechler at stat.math.ethz.ch] Sent: Friday,
    >> February 22, 2019 11:50 AM To: Ben Bolker
    >> <bbolker at gmail.com> Cc: Fox, John <jfox at mcmaster.ca>;
    >> r-devel at r-project.org Subject: Re: [Rd]
    >> model.matrix.default() silently ignores bad contrasts.arg
    >> 
    >> >>>>> Ben Bolker >>>>> on Thu, 21 Feb 2019 08:18:51 -0500
    >> writes:
    >> 
    >> > On Thu, Feb 21, 2019 at 7:49 AM Fox, John
    >> <jfox at mcmaster.ca> wrote:
    >> >>
    >> >> Dear Ben,
    >> >>
    >> >> Perhaps I'm missing the point, but contrasts.arg is
    >> documented to be a list. From ?model.matrix:
    >> "contrasts.arg: A list, whose entries are values (numeric
    >> matrices or character strings naming functions) to be
    >> used as replacement values for the contrasts replacement
    >> function and whose names are the names of columns of data
    >> containing factors."
    >> 
    >> > I absolutely agree that this is not a bug/behaves as
    >> documented (I > could have said that more clearly).  It's
    >> just that (for reasons I > attempted to explain) this is
    >> a really easy mistake to make.
    >> 
    >> >> This isn't entirely accurate because a function also
    >> works as a named element of the list (in addition to a
    >> character string naming a function and a contrast
    >> matrix), as your example demonstrates, but nowhere that
    >> I'm aware of is it suggested that a non-list should work.
    >> >>
    >> >> It certainly would be an improvement if specifying
    >> contrast.arg as a non- list generated an error or warning
    >> message, and it at least arguably would be convenient to
    >> allow a general contrast specification such as
    >> contrasts.arg- "contr.sum", but I don't see a bug here.
    >> 
    >> > I agree.  That's what my patch does (throws a warning
    >> message if > contrasts.arg is non-NULL and not a list).
    >> 
    >> I currently do think this is a good idea... "even though"
    >> I'm 99% sure that this will make work for package
    >> maintainers and others whose code may suddenly show
    >> warnings.  I hope they would know better than
    >> suppressWarnings(.) ...
    >> 
    >> I see a version of the patch using old style indentation
    >> which makes the diff even "considerably" smaller -- no
    >> need to submit this different, though -- and I plan to
    >> test that a bit, and commit eventually to R-devel,
    >> possibly in a 5 days or so.
    >> 
    >> Thank you Ben for the suggestion and patch !  Martin
    >> 
    >> > cheers > Ben Bolker
    >> 
    >> >> Best, >> John
    >> >>
    >> >> -------------------------------------------------
    >> >> John Fox, Professor Emeritus >> McMaster University >>
    >> Hamilton, Ontario, Canada >> Web:
    >> http::/socserv.mcmaster.ca/jfox
    >> >>
    >> >> > On Feb 20, 2019, at 7:14 PM, Ben Bolker
    >> <bbolker at gmail.com> wrote:
    >> >> >
    >> >> > An lme4 user pointed out
    >> <https://github.com/lme4/lme4/issues/491> that >> >
    >> passing contrasts as a string or symbol to [g]lmer (which
    >> would work if >> > we were using `contrasts<-` to set
    >> contrasts on a factor variable) is >> > *silently
    >> ignored*. This goes back to model.matrix(), and seems bad
    >> >> > (this is a very easy mistake to make, because of the
    >> multitude of ways >> > to specify contrasts for factors
    >> in R - e.g. options(contrasts=...); >> > setting
    >> contrasts on the specific factors; passing contrasts as a
    >> list >> > to the model function ... )
    >> >> >
    >> >> > The relevant code is here:
    >> >> >
    >> >> > https://github.com/wch/r-
    >> source/blob/trunk/src/library/stats/R/models.R#L578-L603
    >> >> >
    >> >> > The following code shows the problem: a
    >> plain-vanilla model.matrix() >> > call with no contrasts
    >> argument, followed by two wrong contrasts >> > arguments,
    >> followed by a correct contrasts argument.
    >> >> >
    >> >> > data(cbpp, package="lme4") >> > mf1 <-
    >> model.matrix(~period, data=cbpp) >> > mf2 <-
    >> model.matrix(~period, contrasts.arg="contr.sum",
    >> data=cbpp) >> > all.equal(mf1,mf2) ## TRUE >> > mf3 <-
    >> model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
    >> >> > all.equal(mf1,mf3) ## TRUE >> > mf4 <-
    >> model.matrix(~period,
    >> contrasts.arg=list(period=contr.sum), >> > data=cbpp) >>
    >> > isTRUE(all.equal(mf1,mf4)) ## FALSE
    >> >> >
    >> >> >
    >> >> > I've attached a potential patch for this, which is
    >> IMO the mildest >> > possible case (if contrasts.arg is
    >> non-NULL and not a list, it produces >> > a warning).  I
    >> haven't been able to test it because of some mysterious
    >> >> > issues I'm having with re-making R properly ...
    >> >> >
    >> >> > Thoughts?  Should I submit this as a bug
    >> report/patch?
    >> >> >
    >> >> > cheers >> > Ben Bolker
    >> >>
    >> >> >
    >> <models.R.diff>______________________________________________


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Feb 23 12:14:44 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 23 Feb 2019 12:14:44 +0100
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <0A38DEBA-18D2-4ED2-BFE1-B4E98F657643@gmail.com>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
 <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
 <0A38DEBA-18D2-4ED2-BFE1-B4E98F657643@gmail.com>
Message-ID: <23665.11044.792776.730104@stat.math.ethz.ch>

>>>>> peter dalgaard 
>>>>>     on Fri, 22 Feb 2019 12:38:14 +0100 writes:

    > It's not a problem per se to put additional information
    > into class htest objects (hey, it's S3 after all...) and
    > there is a precedent in chisq.test which returns $observed
    > and $expected.

It seems the consent is to simply return the SE but *not* change
the print() method, and also be careful not to mess with
existing parts of the result.
So, a minimal patch is to add the short line

      stderr = stderr,

inside the list(..) constucting the return value...

and that's what I'm planning to commit (to the sources).

With thanks for the suggestion and considerations to
Thomas, John and Peter!

Martin

    > Getting such information printed by print.htest is more tricky, although it might be possible to (ab)use the $estimate slot. 

    > The further question is whether one would really want to do that (change the output and/or modify the current return values), at the risk of affecting a rather large bundle of existing scripts, books, lecture notes, etc. I don't think that I would want to do that for the case of the s.e.d., although I'll admit that there is another thing that has always been a bit of an eyesore to me: We give a confidence interval but not the corresponding point estimate (i.e. the _difference_ of the means).

    > It might be better to simply start over and write a new function. In the process one might address other things that people have been asking for, like calculations based on the sample mean and SDs (which would useful for dealing with published summaries and textbook examples). Oh, and a formula interface for the one-sample test.

    > -pd

    >> On 21 Feb 2019, at 22:51 , Fox, John <jfox at mcmaster.ca> wrote:
    >> 
    >> Dear Thomas,
    >> 
    >> it is, unfortunately, not that simple. t.test() returns an object of class "htest" and not all such objects have standard errors. I'm not entirely sure what the point is since it's easy to compute the standard error of the difference from the information in the object (adapting an example from ?t.test):
    >> 
    >>> (res <- t.test(1:10, y = c(7:20)))
    >> 
    >> Welch Two Sample t-test
    >> 
    >> data:  1:10 and c(7:20)
    >> t = -5.4349, df = 21.982, p-value = 1.855e-05
    >> alternative hypothesis: true difference in means is not equal to 0
    >> 95 percent confidence interval:
    >> -11.052802  -4.947198
    >> sample estimates:
    >> mean of x mean of y 
    >> 5.5      13.5 
    >> 
    >>> as.vector(abs(diff(res$estimate)/res$statistic)) # SE
    >> [1] 1.47196
    >>> class(res)
    >> [1] "htest"
    >> 
    >> and if you really want to print the SE as a matter of course, you could always write your own wrapper for t.test() that returns an object of class, say, "t.test" for which you can provide a print() method. Much of the advantage of working in a statistical computing environment like R (or Stata, for that matter) is that you can make things work the way you like.
    >> 
    >> Best,
    >> John
    >> 
    >> -------------------------------------------------
    >> John Fox, Professor Emeritus
    >> McMaster University
    >> Hamilton, Ontario, Canada
    >> Web: http::/socserv.mcmaster.ca/jfox
    >> 
    >>> On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
    >>> 
    >>> A recent thread on Twitter [1] by a Stata user highlighted that t.test()
    >>> does not return or print the standard error of the mean difference, despite
    >>> it being calculated by the function.
    >>> 
    >>> I know this isn?t the kind of change that?s likely to be made but could we
    >>> at least return the SE even if the print() method isn?t updated? Or,
    >>> better, update the print() method to display this as well?
    >>> 
    >>> Best,
    >>> Thomas
    >>> 
    >>> [1]
    >>> https://twitter.com/amandayagan/status/1098314654470819840?s=21
    >>> -- 
    >>> 
    >>> Thomas J. Leeper
    >>> http://www.thomasleeper.com
    >>> 
    >>> [[alternative HTML version deleted]]
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > -- 
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From tho@j|eeper @end|ng |rom gm@||@com  Sat Feb 23 13:38:19 2019
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Sat, 23 Feb 2019 12:38:19 +0000
Subject: [Rd] Return/print standard error in t.test()
In-Reply-To: <23665.11044.792776.730104@stat.math.ethz.ch>
References: <5880_1550782663_x1LKvgt1024492_CAOC91MRbfkM3Z-27xGjpq00yV0RrfVCnZT=s3f6YH374x_wpEw@mail.gmail.com>
 <FBFE4A3F-ACD3-4373-87E1-0B6D50EA14A5@mcmaster.ca>
 <0A38DEBA-18D2-4ED2-BFE1-B4E98F657643@gmail.com>
 <23665.11044.792776.730104@stat.math.ethz.ch>
Message-ID: <CAOC91MSTftTo-bH4dgk-C+f_rca_QJKdwCMs67BrvGKCNxrwig@mail.gmail.com>

That seems great to me. Thank you very much!

-Thomas

On Sat, Feb 23, 2019 at 11:14 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> peter dalgaard
> >>>>>     on Fri, 22 Feb 2019 12:38:14 +0100 writes:
>
>     > It's not a problem per se to put additional information
>     > into class htest objects (hey, it's S3 after all...) and
>     > there is a precedent in chisq.test which returns $observed
>     > and $expected.
>
> It seems the consent is to simply return the SE but *not* change
> the print() method, and also be careful not to mess with
> existing parts of the result.
> So, a minimal patch is to add the short line
>
>       stderr = stderr,
>
> inside the list(..) constucting the return value...
>
> and that's what I'm planning to commit (to the sources).
>
> With thanks for the suggestion and considerations to
> Thomas, John and Peter!
>
> Martin
>
>     > Getting such information printed by print.htest is more tricky, although it might be possible to (ab)use the $estimate slot.
>
>     > The further question is whether one would really want to do that (change the output and/or modify the current return values), at the risk of affecting a rather large bundle of existing scripts, books, lecture notes, etc. I don't think that I would want to do that for the case of the s.e.d., although I'll admit that there is another thing that has always been a bit of an eyesore to me: We give a confidence interval but not the corresponding point estimate (i.e. the _difference_ of the means).
>
>     > It might be better to simply start over and write a new function. In the process one might address other things that people have been asking for, like calculations based on the sample mean and SDs (which would useful for dealing with published summaries and textbook examples). Oh, and a formula interface for the one-sample test.
>
>     > -pd
>
>     >> On 21 Feb 2019, at 22:51 , Fox, John <jfox at mcmaster.ca> wrote:
>     >>
>     >> Dear Thomas,
>     >>
>     >> it is, unfortunately, not that simple. t.test() returns an object of class "htest" and not all such objects have standard errors. I'm not entirely sure what the point is since it's easy to compute the standard error of the difference from the information in the object (adapting an example from ?t.test):
>     >>
>     >>> (res <- t.test(1:10, y = c(7:20)))
>     >>
>     >> Welch Two Sample t-test
>     >>
>     >> data:  1:10 and c(7:20)
>     >> t = -5.4349, df = 21.982, p-value = 1.855e-05
>     >> alternative hypothesis: true difference in means is not equal to 0
>     >> 95 percent confidence interval:
>     >> -11.052802  -4.947198
>     >> sample estimates:
>     >> mean of x mean of y
>     >> 5.5      13.5
>     >>
>     >>> as.vector(abs(diff(res$estimate)/res$statistic)) # SE
>     >> [1] 1.47196
>     >>> class(res)
>     >> [1] "htest"
>     >>
>     >> and if you really want to print the SE as a matter of course, you could always write your own wrapper for t.test() that returns an object of class, say, "t.test" for which you can provide a print() method. Much of the advantage of working in a statistical computing environment like R (or Stata, for that matter) is that you can make things work the way you like.
>     >>
>     >> Best,
>     >> John
>     >>
>     >> -------------------------------------------------
>     >> John Fox, Professor Emeritus
>     >> McMaster University
>     >> Hamilton, Ontario, Canada
>     >> Web: http::/socserv.mcmaster.ca/jfox
>     >>
>     >>> On Feb 21, 2019, at 3:57 PM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
>     >>>
>     >>> A recent thread on Twitter [1] by a Stata user highlighted that t.test()
>     >>> does not return or print the standard error of the mean difference, despite
>     >>> it being calculated by the function.
>     >>>
>     >>> I know this isn?t the kind of change that?s likely to be made but could we
>     >>> at least return the SE even if the print() method isn?t updated? Or,
>     >>> better, update the print() method to display this as well?
>     >>>
>     >>> Best,
>     >>> Thomas
>     >>>
>     >>> [1]
>     >>> https://twitter.com/amandayagan/status/1098314654470819840?s=21
>     >>> --
>     >>>
>     >>> Thomas J. Leeper
>     >>> http://www.thomasleeper.com
>     >>>
>     >>> [[alternative HTML version deleted]]
>     >>>
>     >>> ______________________________________________
>     >>> R-devel at r-project.org mailing list
>     >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>     > --
>     > Peter Dalgaard, Professor,
>     > Center for Statistics, Copenhagen Business School
>     > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>     > Phone: (+45)38153501
>     > Office: A 4.23
>     > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Sat Feb 23 15:33:22 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 23 Feb 2019 09:33:22 -0500
Subject: [Rd] model.matrix.default() silently ignores bad contrasts.arg
In-Reply-To: <23665.9119.771386.205226@stat.math.ethz.ch>
References: <3553_1550708062_x1L0EMNQ028449_7bf65e6d-839d-9475-79fd-3a8ee341929a@gmail.com>
 <D3DC2A5A-7AE7-4EAE-B6EA-853C85972368@mcmaster.ca>
 <CABghstS8qm9hgbz6Laj-juTu9ra02jPZqhuU41_GkoKKJbzFYw@mail.gmail.com>
 <23664.10276.644277.668486@stat.math.ethz.ch>
 <ACD1644AA6C67E4FBD0C350625508EC836ACBF08@FHSDB2D11-2.csu.mcmaster.ca>
 <23665.9119.771386.205226@stat.math.ethz.ch>
Message-ID: <3472707f-123f-7c42-546d-f5f1596f613d@gmail.com>


 thanks!

On 2019-02-23 5:42 a.m., Martin Maechler wrote:
>>>>>> Fox, John 
>>>>>>     on Fri, 22 Feb 2019 17:40:15 +0000 writes:
> 
>     > Dear Martin and Ben, I agree that a warning is a good idea
>     > (and perhaps that wasn't clear in my response to Ben's
>     > post).
> 
>     > Also, it would be nice to correct the omission in the help
>     > file, which as far as I could see doesn't mention that a
>     > contrast-generating function (as opposed to its quoted
>     > name) can be an element of the contrasts.arg list.
> 
>     > Best, John
> 
> Thank you John for the clarification and the reminder about
> filling the omission there!
> 
> Prepared to go (into the sources) now.
> Martin
> 
> 
>     >> -----Original Message----- From: Martin Maechler
>     >> [mailto:maechler at stat.math.ethz.ch] Sent: Friday,
>     >> February 22, 2019 11:50 AM To: Ben Bolker
>     >> <bbolker at gmail.com> Cc: Fox, John <jfox at mcmaster.ca>;
>     >> r-devel at r-project.org Subject: Re: [Rd]
>     >> model.matrix.default() silently ignores bad contrasts.arg
>     >> 
>     >> >>>>> Ben Bolker >>>>> on Thu, 21 Feb 2019 08:18:51 -0500
>     >> writes:
>     >> 
>     >> > On Thu, Feb 21, 2019 at 7:49 AM Fox, John
>     >> <jfox at mcmaster.ca> wrote:
>     >> >>
>     >> >> Dear Ben,
>     >> >>
>     >> >> Perhaps I'm missing the point, but contrasts.arg is
>     >> documented to be a list. From ?model.matrix:
>     >> "contrasts.arg: A list, whose entries are values (numeric
>     >> matrices or character strings naming functions) to be
>     >> used as replacement values for the contrasts replacement
>     >> function and whose names are the names of columns of data
>     >> containing factors."
>     >> 
>     >> > I absolutely agree that this is not a bug/behaves as
>     >> documented (I > could have said that more clearly).  It's
>     >> just that (for reasons I > attempted to explain) this is
>     >> a really easy mistake to make.
>     >> 
>     >> >> This isn't entirely accurate because a function also
>     >> works as a named element of the list (in addition to a
>     >> character string naming a function and a contrast
>     >> matrix), as your example demonstrates, but nowhere that
>     >> I'm aware of is it suggested that a non-list should work.
>     >> >>
>     >> >> It certainly would be an improvement if specifying
>     >> contrast.arg as a non- list generated an error or warning
>     >> message, and it at least arguably would be convenient to
>     >> allow a general contrast specification such as
>     >> contrasts.arg- "contr.sum", but I don't see a bug here.
>     >> 
>     >> > I agree.  That's what my patch does (throws a warning
>     >> message if > contrasts.arg is non-NULL and not a list).
>     >> 
>     >> I currently do think this is a good idea... "even though"
>     >> I'm 99% sure that this will make work for package
>     >> maintainers and others whose code may suddenly show
>     >> warnings.  I hope they would know better than
>     >> suppressWarnings(.) ...
>     >> 
>     >> I see a version of the patch using old style indentation
>     >> which makes the diff even "considerably" smaller -- no
>     >> need to submit this different, though -- and I plan to
>     >> test that a bit, and commit eventually to R-devel,
>     >> possibly in a 5 days or so.
>     >> 
>     >> Thank you Ben for the suggestion and patch !  Martin
>     >> 
>     >> > cheers > Ben Bolker
>     >> 
>     >> >> Best, >> John
>     >> >>
>     >> >> -------------------------------------------------
>     >> >> John Fox, Professor Emeritus >> McMaster University >>
>     >> Hamilton, Ontario, Canada >> Web:
>     >> http::/socserv.mcmaster.ca/jfox
>     >> >>
>     >> >> > On Feb 20, 2019, at 7:14 PM, Ben Bolker
>     >> <bbolker at gmail.com> wrote:
>     >> >> >
>     >> >> > An lme4 user pointed out
>     >> <https://github.com/lme4/lme4/issues/491> that >> >
>     >> passing contrasts as a string or symbol to [g]lmer (which
>     >> would work if >> > we were using `contrasts<-` to set
>     >> contrasts on a factor variable) is >> > *silently
>     >> ignored*. This goes back to model.matrix(), and seems bad
>     >> >> > (this is a very easy mistake to make, because of the
>     >> multitude of ways >> > to specify contrasts for factors
>     >> in R - e.g. options(contrasts=...); >> > setting
>     >> contrasts on the specific factors; passing contrasts as a
>     >> list >> > to the model function ... )
>     >> >> >
>     >> >> > The relevant code is here:
>     >> >> >
>     >> >> > https://github.com/wch/r-
>     >> source/blob/trunk/src/library/stats/R/models.R#L578-L603
>     >> >> >
>     >> >> > The following code shows the problem: a
>     >> plain-vanilla model.matrix() >> > call with no contrasts
>     >> argument, followed by two wrong contrasts >> > arguments,
>     >> followed by a correct contrasts argument.
>     >> >> >
>     >> >> > data(cbpp, package="lme4") >> > mf1 <-
>     >> model.matrix(~period, data=cbpp) >> > mf2 <-
>     >> model.matrix(~period, contrasts.arg="contr.sum",
>     >> data=cbpp) >> > all.equal(mf1,mf2) ## TRUE >> > mf3 <-
>     >> model.matrix(~period, contrasts.arg=contr.sum, data=cbpp)
>     >> >> > all.equal(mf1,mf3) ## TRUE >> > mf4 <-
>     >> model.matrix(~period,
>     >> contrasts.arg=list(period=contr.sum), >> > data=cbpp) >>
>     >> > isTRUE(all.equal(mf1,mf4)) ## FALSE
>     >> >> >
>     >> >> >
>     >> >> > I've attached a potential patch for this, which is
>     >> IMO the mildest >> > possible case (if contrasts.arg is
>     >> non-NULL and not a list, it produces >> > a warning).  I
>     >> haven't been able to test it because of some mysterious
>     >> >> > issues I'm having with re-making R properly ...
>     >> >> >
>     >> >> > Thoughts?  Should I submit this as a bug
>     >> report/patch?
>     >> >> >
>     >> >> > cheers >> > Ben Bolker
>     >> >>
>     >> >> >
>     >> <models.R.diff>______________________________________________
>


From r@d|ord @end|ng |rom c@@toronto@edu  Sat Feb 23 18:37:19 2019
From: r@d|ord @end|ng |rom c@@toronto@edu (Radford Neal)
Date: Sat, 23 Feb 2019 12:37:19 -0500
Subject: [Rd] Bug: time complexity of substring is quadratic
In-Reply-To: <mailman.48222.5.1550919699.20547.r-devel@r-project.org>
References: <mailman.48222.5.1550919699.20547.r-devel@r-project.org>
Message-ID: <20190223173719.GA25565@mail.cs.toronto.edu>

> From: Tomas Kalibera <tomas.kalibera at gmail.com>
> 
> Thanks for the report, I am working on a patch that will address this.
> 
> I confirm there is a lot of potential for speedup. On my system,
> 
> 'N=200000; x <- substring(paste(rep("A", N), collapse=""), 1:N, 1:N)'
> 
> spends 96% time in checking if the string is ascii and 3% in strlen(); 
> if we take advantage of the pre-computed value in the ASCII bit, the 
> speed up is about 40x.


The latest version of pqR (at pqR-project.org) has changes that
considerably speed up both this and other string operations.

Here's a test (both compiled with gcc 8.2.0 with -O3 on a Skylake processor).

R-3.5.2:

> N=200000; system.time(for (i in 1:100) r<-paste(rep("A",N),collapse=""))
   user  system elapsed 
  1.548   0.023   1.572 
> system.time(for (i in 1:10) x<-substring(r,1:N,1:N))
   user  system elapsed 
  4.462   0.016   4.478 

pqR-2019-02-19:

> N=200000; system.time(for (i in 1:100) r<-paste(rep("A",N),collapse=""))
   user  system elapsed 
  0.318   0.071   0.388 
> system.time(for (i in 1:10) x<-substring(r,1:N,1:N))
   user  system elapsed 
  0.041   0.000   0.041 

Some of this may be due to pqR's faster garbage collector - R Core
implementatons have a particular GC problem with strings, as explained at
https://radfordneal.wordpress.com/2018/11/29/faster-garbage-collection-in-pqr/

But there are also some specific improvements to string operations that
you might want to have a look at.

    Radford Neal


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Sun Feb 24 15:22:48 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Sun, 24 Feb 2019 14:22:48 +0000 (UTC)
Subject: [Rd] stopifnot
References: <1959542111.4342391.1551018168623.ref@mail.yahoo.com>
Message-ID: <1959542111.4342391.1551018168623@mail.yahoo.com>

>From https://github.com/HenrikBengtsson/Wishlist-for-R/issues/70 :
... and follow up note from 2018-03-15: Ouch... in R-devel, stopifnot() has become yet 4-5 times slower;

...
which is due to a complete rewrite using tryCatch() and withCallingHandlers().


>From https://stat.ethz.ch/pipermail/r-devel/2017-May/074256.html , it seems that 'tryCatch' was used to avoid the following example from giving error message with 'eval' call and 'withCallingHandlers' was meant to handle similar case for warning.
tst <- function(y) { stopifnot(is.numeric(y)); y+ 1 }
try(tst())

However,
withCallingHandlers(<something>,
warning = function(w) { w$call <- cl.i; w })
actally has no effect. In current code of function 'stopifnot', 'eval' is used only in handling stopifnot(exprs=) . The warning message from
stopifnot(exprs={warning()})
has 'eval' call:
In eval(cl.i, envir = envir) : 

This may work.
withCallingHandlers(<something>,
warning = function(w) {
w$call <- cl.i; warning(w); invokeRestart("muffleWarning") })


Current documentation says:
Since R version 3.5.0, expressions are evaluated sequentially, and hence evaluation stops as soon as there is a "non-TRUE", asnindicated by the above conceptual equivalence statement. Further, when such an expression signals an error or warning, its conditionCall() no longer contains the full stopifnot call, but just the erroneous expression.

I assume that "no longer contains ..." is supposed to be the effect of the use of 'withCallingHandlers' and 'tryCatch' in 'stopifnot'.

Actually, "contains the full stopifnot call" is not always the case in R before version 3.5.0. Normally, the call is the "innermost context".

Example:
stopifnot((1:2) + (1:3) > 0)
Warning message:
In (1:2) + (1:3) :
? longer object length is not a multiple of shorter object length

Example that gives error:
stopifnot(is.na(log("a")))
R 3.5.0:
R 3.3.2:


From h@nk|n@rob|n @end|ng |rom gm@||@com  Mon Feb 25 06:25:03 2019
From: h@nk|n@rob|n @end|ng |rom gm@||@com (robin hankin)
Date: Mon, 25 Feb 2019 18:25:03 +1300
Subject: [Rd] pcre problems
Message-ID: <CAHHjBM7CJa6un7Up6nM4NHZjn17MdXFjRPxkYvkv+V2F6d4hDA@mail.gmail.com>

Hi there, ubuntu 18.04.2, trying to compile R-devel  3.6.0,  svn 76155.

I am having difficulty compiling R. I think I have pcre installed correctly:

OK~/Downloads/R-devel pcretest -C
PCRE version 8.41 2017-07-05
Compiled with
  8-bit support
  UTF-8 support
  No Unicode properties support
  No just-in-time compiler support
  Newline sequence is LF
  \R matches all Unicode newlines
  Internal link size = 2
  POSIX malloc threshold = 10
  Parentheses nest limit = 250
  Default match limit = 10000000
  Default recursion depth limit = 10000000
  Match recursion uses stack
OK~/Downloads/R-devel


But ./configure gives me this:

[snip]
checking for pcre.h... yes
checking pcre/pcre.h usability... no
checking pcre/pcre.h presence... no
checking for pcre/pcre.h... no
checking if PCRE version >= 8.20, < 10.0 and has UTF-8 support... no
checking whether PCRE support suffices... configure: error: pcre >=
8.20 library and headers are required
OK~/Downloads/R-devel

can anyone advise?






hankin.robin at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Feb 25 09:39:41 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 25 Feb 2019 09:39:41 +0100
Subject: [Rd] pcre problems
In-Reply-To: <CAHHjBM7CJa6un7Up6nM4NHZjn17MdXFjRPxkYvkv+V2F6d4hDA@mail.gmail.com>
References: <CAHHjBM7CJa6un7Up6nM4NHZjn17MdXFjRPxkYvkv+V2F6d4hDA@mail.gmail.com>
Message-ID: <2a6d5ab9-ccfd-c522-5718-baf270e098b5@gmail.com>

On 2/25/19 6:25 AM, robin hankin wrote:
> Hi there, ubuntu 18.04.2, trying to compile R-devel  3.6.0,  svn 76155.
>
> I am having difficulty compiling R. I think I have pcre installed correctly:

You can use

apt-get build-dep r-base

to install binary Ubuntu packages needed to build R from source, 
including PCRE, so there should be no need to compile PCRE from source. 
If you need for some special reason to compile PCRE from source, please 
see R Admin Manual, section A.1 on how to configure PCRE. The manual 
also says how to set compilation flags for R to look for headers in 
other directories. Sometimes it helps to search the config.log when 
configure fails. If still in trouble, please report how you built PCRE 
and how you told R where to find it, and the relevant part of 
config.log, to maximize chances people could offer useful advice.

Best,
Tomas

>
> OK~/Downloads/R-devel pcretest -C
> PCRE version 8.41 2017-07-05
> Compiled with
>    8-bit support
>    UTF-8 support
>    No Unicode properties support
>    No just-in-time compiler support
>    Newline sequence is LF
>    \R matches all Unicode newlines
>    Internal link size = 2
>    POSIX malloc threshold = 10
>    Parentheses nest limit = 250
>    Default match limit = 10000000
>    Default recursion depth limit = 10000000
>    Match recursion uses stack
> OK~/Downloads/R-devel
>
>
> But ./configure gives me this:
>
> [snip]
> checking for pcre.h... yes
> checking pcre/pcre.h usability... no
> checking pcre/pcre.h presence... no
> checking for pcre/pcre.h... no
> checking if PCRE version >= 8.20, < 10.0 and has UTF-8 support... no
> checking whether PCRE support suffices... configure: error: pcre >=
> 8.20 library and headers are required
> OK~/Downloads/R-devel
>
> can anyone advise?
>
>
>
>
>
>
> hankin.robin at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From b@h@mev|k @end|ng |rom u@|t@u|o@no  Mon Feb 25 11:11:34 2019
From: b@h@mev|k @end|ng |rom u@|t@u|o@no (=?utf-8?Q?Bj=C3=B8rn-Helge_Mevik?=)
Date: Mon, 25 Feb 2019 11:11:34 +0100
Subject: [Rd] Is libtiff >= 4.0.0 now required by R for TIFF support?
Message-ID: <s3smumktbxl.fsf@varelg.uio.no>


We recently discovered that since R 3.3.0, on our CentOS 6 based
cluster, R gets built without TIFF support.  The last version where TIFF
support was built, was 3.2.5.

We have libtiff 3.9.4 installed:

$ rpm -q libtiff-devel
libtiff-devel-3.9.4-21.el6_8.x86_64

(Since CentOS 6 is so old, we have manually installed newer versions of
some dependencies: curl 7.46.0, zlib 1.2.8, bzip2 1.0.6, xz 5.2.2 and
pcre 8.38.)

We configure R like this:

BLAS=--with-blas='-mkl=parallel'
LAPACK=--with-lapack
./configure --prefix=$destdir "$BLAS" "$LAPACK" --enable-BLAS-shlib --enable-R-shlib

(and build with Intel compilers.)



The tiff-related output of the configure script in R 3.2.5 was

$ grep -i tiff _log_3.2.5
checking tiffio.h usability... yes
checking tiffio.h presence... yes
checking for tiffio.h... yes
checking for TIFFOpen in -ltiff... yes
  Additional capabilities:   PNG, JPEG, TIFF, NLS, cairo

Beginning with R 3.3.0, it was just

$ grep -i tiff _log_3.3.0
  Capabilities skipped:      TIFF, ICU

(This has been the output for all versions we've installed since 3.3.0.)



I looked at the configure script, and in 3.2.5, the tests for libtiff
starts like this (I've adjusted the indentation):

if test "${use_libtiff}" = yes; then
    for ac_header in tiffio.h
    do :
	ac_fn_c_check_header_mongrel "$LINENO" "tiffio.h" "ac_cv_header_tiffio_h" "$ac_includes_default"
	if test "x$ac_cv_header_tiffio_h" = xyes; then :
	    cat >>confdefs.h <<_ACEOF
#define HAVE_TIFFIO_H 1
_ACEOF

From 3.3.0 on, it starts like this (with indentation adjusted):

if test "${use_libtiff}" = yes; then
    mod=
  ## pkg-config support was introduced in libtiff 4.0.0
  ## I guess the module name might change in future, so
  ## program defensively here.
    if "${PKGCONF}" --exists libtiff-4; then
	mod=libtiff-4
    fi
    if test -n "${mod}"; then
	save_CPPFLAGS=${CPPFLAGS}
	TIF_CPPFLAGS=`"${PKGCONF}" --cflags ${mod}`
	CPPFLAGS="${CPPFLAGS} ${TIF_CPPFLAGS}"
	for ac_header in tiffio.h
	do :
	    ac_fn_c_check_header_mongrel "$LINENO" "tiffio.h" "ac_cv_header_tiffio_h" "$ac_includes_default"
	    if test "x$ac_cv_header_tiffio_h" = xyes; then :
		cat >>confdefs.h <<_ACEOF
#define HAVE_TIFFIO_H 1
_ACEOF

And all the rest of the tests for libtiff are within the "if test -n
"${mod}"; then" branch.  As I read it, this means that if you don't have
libtiff >= 4.0.0 installed, the tests for libtiff will not be run, and
support for TIFF disabled.



On the other hand, Appendix A.2 "Useful libraries and programs" in
https://cran.r-project.org/doc/manuals/r-release/R-admin.html says

"The bitmapped graphics devices jpeg(), png() and tiff() need the
appropriate headers and libraries installed: jpeg (version 6b or later,
or libjpeg-turbo) or libpng (version 1.2.7 or later) and zlib or libtiff
(any recent version ? 3.9.[4-7] and 4.0.[2-10] have been tested)
respectively."

which seems to imply that libtiff 3.9.4 should be fine.



Is there a bug in the configure script, is the "R Installation and
Administration" not up to date, or is it me that misunderstands
something here?

-- 
Regards,
Bj?rn-Helge Mevik

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 832 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190225/6d7bd230/attachment.sig>

From edd @end|ng |rom deb|@n@org  Mon Feb 25 12:54:26 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 25 Feb 2019 05:54:26 -0600
Subject: [Rd] pcre problems
In-Reply-To: <CAHHjBM7CJa6un7Up6nM4NHZjn17MdXFjRPxkYvkv+V2F6d4hDA@mail.gmail.com>
References: <CAHHjBM7CJa6un7Up6nM4NHZjn17MdXFjRPxkYvkv+V2F6d4hDA@mail.gmail.com>
Message-ID: <23667.55154.750303.535379@rob.eddelbuettel.com>


On 25 February 2019 at 18:25, robin hankin wrote:
| Hi there, ubuntu 18.04.2, trying to compile R-devel  3.6.0,  svn 76155.
| 
| I am having difficulty compiling R. I think I have pcre installed correctly:
| 
| OK~/Downloads/R-devel pcretest -C
| PCRE version 8.41 2017-07-05
| Compiled with
|   8-bit support
|   UTF-8 support
|   No Unicode properties support
|   No just-in-time compiler support
|   Newline sequence is LF
|   \R matches all Unicode newlines
|   Internal link size = 2
|   POSIX malloc threshold = 10
|   Parentheses nest limit = 250
|   Default match limit = 10000000
|   Default recursion depth limit = 10000000
|   Match recursion uses stack
| OK~/Downloads/R-devel

That is a front-end tool. I don't even have it installed :)
 
| But ./configure gives me this:
| 
| [snip]
| checking for pcre.h... yes
| checking pcre/pcre.h usability... no
| checking pcre/pcre.h presence... no
| checking for pcre/pcre.h... no
| checking if PCRE version >= 8.20, < 10.0 and has UTF-8 support... no
| checking whether PCRE support suffices... configure: error: pcre >=
| 8.20 library and headers are required
| OK~/Downloads/R-devel
| 
| can anyone advise?

Ensure you have the corresponding -dev package. My system is now at the
current Ubuntu 18.10, not the Ubuntu LTS 18.04 you have -- but I have been
building R-devel on it about once every week or other week for years:

edd at rob:~$ COLUMNS=100 dpkg -l libpcre*dev | cut -c-100
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                Version        Architecture   Description
+++-===================-==============-==============-===========================================
ii  libpcre3-dev:amd64  2:8.39-11      amd64          Old Perl 5 Compatible Regular Expression Li
edd at rob:~$ 


Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jeroenoom@ @end|ng |rom gm@||@com  Mon Feb 25 13:29:22 2019
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Mon, 25 Feb 2019 13:29:22 +0100
Subject: [Rd] Is libtiff >= 4.0.0 now required by R for TIFF support?
In-Reply-To: <s3smumktbxl.fsf@varelg.uio.no>
References: <s3smumktbxl.fsf@varelg.uio.no>
Message-ID: <CABFfbXvSFgg-bCH_DSGCFZFnOrqqOGNLKOFE_8Wv=H2R55rdcg@mail.gmail.com>

On Mon, Feb 25, 2019 at 11:11 AM Bj?rn-Helge Mevik
<b.h.mevik at usit.uio.no> wrote:
>
> We recently discovered that since R 3.3.0, on our CentOS 6 based
> cluster, R gets built without TIFF support.  The last version where TIFF
> support was built, was 3.2.5.

It looks like the official R from EPEL6 also lacks tiff support:

  yum install epel-release
  yum install R-devel
  R -e 'capabilities()'

> capabilities()
       jpeg         png        tiff       tcltk         X11        aqua
       TRUE        TRUE       FALSE        TRUE       FALSE       FALSE
   http/ftp     sockets      libxml        fifo      cledit       iconv
       TRUE        TRUE        TRUE        TRUE       FALSE        TRUE
        NLS     profmem       cairo         ICU long.double     libcurl
       TRUE       FALSE        TRUE        TRUE        TRUE        TRUE

So your hypothesis that autoconf doesn't find libtiff < 4 is probably correct.


From pd@|gd @end|ng |rom gm@||@com  Mon Feb 25 14:06:06 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 25 Feb 2019 14:06:06 +0100
Subject: [Rd] R 3.5.3 scheduled for March 11
Message-ID: <5E0AD3BC-059D-4528-991D-B7CF3F2B5716@gmail.com>

Full schedule available on developer.r-project.org (pending auto-update from SVN)

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Mon Feb 25 20:07:26 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 25 Feb 2019 11:07:26 -0800
Subject: [Rd] Bugzilla down?
Message-ID: <CAD4oTHEVUmDrXWrE2sF_H8xM+XHATg4svPSyYnZgQuB2UXQ0ow@mail.gmail.com>

Hi Martin (who I believe manages bz?) et al.,

I'm getting 503 Service Unavailable from bugzilla currently (
https://bugs.r-project.org/bugzilla/ and direct links to specific bugs,
both). Is this a known issue?

Thanks,
~G

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Feb 25 20:45:20 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 25 Feb 2019 14:45:20 -0500
Subject: [Rd] Bugzilla down?
In-Reply-To: <CAD4oTHEVUmDrXWrE2sF_H8xM+XHATg4svPSyYnZgQuB2UXQ0ow@mail.gmail.com>
References: <CAD4oTHEVUmDrXWrE2sF_H8xM+XHATg4svPSyYnZgQuB2UXQ0ow@mail.gmail.com>
Message-ID: <7953BA93-778F-45C7-90D8-155EED31E8D0@R-project.org>

I do. The server ran out of disk earlier today and it seems that it killed bugzilla somehow. I'll have a look.
Thanks,
Simon


> On Feb 25, 2019, at 2:07 PM, Gabriel Becker <gabembecker at gmail.com> wrote:
> 
> Hi Martin (who I believe manages bz?) et al.,
> 
> I'm getting 503 Service Unavailable from bugzilla currently (
> https://bugs.r-project.org/bugzilla/ and direct links to specific bugs,
> both). Is this a known issue?
> 
> Thanks,
> ~G
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Feb 25 21:00:46 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 25 Feb 2019 15:00:46 -0500
Subject: [Rd] Bugzilla down?
In-Reply-To: <7953BA93-778F-45C7-90D8-155EED31E8D0@R-project.org>
References: <CAD4oTHEVUmDrXWrE2sF_H8xM+XHATg4svPSyYnZgQuB2UXQ0ow@mail.gmail.com>
 <7953BA93-778F-45C7-90D8-155EED31E8D0@R-project.org>
Message-ID: <F4B84FC0-101D-4BE1-B30D-737960DC7A21@R-project.org>

Ok, fixed.
Simon



> On Feb 25, 2019, at 2:45 PM, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> I do. The server ran out of disk earlier today and it seems that it killed bugzilla somehow. I'll have a look.
> Thanks,
> Simon
> 
> 
>> On Feb 25, 2019, at 2:07 PM, Gabriel Becker <gabembecker at gmail.com> wrote:
>> 
>> Hi Martin (who I believe manages bz?) et al.,
>> 
>> I'm getting 503 Service Unavailable from bugzilla currently (
>> https://bugs.r-project.org/bugzilla/ and direct links to specific bugs,
>> both). Is this a known issue?
>> 
>> Thanks,
>> ~G
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 


From g@bembecker @end|ng |rom gm@||@com  Mon Feb 25 21:13:58 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 25 Feb 2019 12:13:58 -0800
Subject: [Rd] Bugzilla down?
In-Reply-To: <F4B84FC0-101D-4BE1-B30D-737960DC7A21@R-project.org>
References: <CAD4oTHEVUmDrXWrE2sF_H8xM+XHATg4svPSyYnZgQuB2UXQ0ow@mail.gmail.com>
 <7953BA93-778F-45C7-90D8-155EED31E8D0@R-project.org>
 <F4B84FC0-101D-4BE1-B30D-737960DC7A21@R-project.org>
Message-ID: <CAD4oTHG0u1aZ=y4p_g1HC0YMqYmsbME=qHFD+rE7qLMshZdPJQ@mail.gmail.com>

Ah, I was inferring from Martin being the one who generally makes new
accounts for people afaik, sorry about that.

Thanks for thr quick fix!

~G

On Mon, Feb 25, 2019, 12:07 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Ok, fixed.
> Simon
>
>
>
> > On Feb 25, 2019, at 2:45 PM, Simon Urbanek <simon.urbanek at R-project.org>
> wrote:
> >
> > I do. The server ran out of disk earlier today and it seems that it
> killed bugzilla somehow. I'll have a look.
> > Thanks,
> > Simon
> >
> >
> >> On Feb 25, 2019, at 2:07 PM, Gabriel Becker <gabembecker at gmail.com>
> wrote:
> >>
> >> Hi Martin (who I believe manages bz?) et al.,
> >>
> >> I'm getting 503 Service Unavailable from bugzilla currently (
> >> https://bugs.r-project.org/bugzilla/ and direct links to specific bugs,
> >> both). Is this a known issue?
> >>
> >> Thanks,
> >> ~G
> >>
> >>      [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
>
>

	[[alternative HTML version deleted]]


From kr|m|r+m| @end|ng |rom m@||box@org  Tue Feb 26 07:06:24 2019
From: kr|m|r+m| @end|ng |rom m@||box@org (=?UTF-8?Q?Kirill_M=c3=bcller?=)
Date: Tue, 26 Feb 2019 07:06:24 +0100
Subject: [Rd] bias issue in sample() (PR 17494)
In-Reply-To: <CAD4oTHGpZWCU6UCSbcYzj4wRsLp8M4T1koxbxDa9nVmODcYB1A@mail.gmail.com>
References: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>
 <CAD4oTHGpZWCU6UCSbcYzj4wRsLp8M4T1koxbxDa9nVmODcYB1A@mail.gmail.com>
Message-ID: <3b3466d7-6aa0-6473-ac5a-1d230bde5187@mailbox.org>

Gabe


As mentioned on Twitter, I think the following behavior should be fixed 
as part of the upcoming changes:

R.version.string
## [1] "R Under development (unstable) (2019-02-25 r76160)"
.Machine$double.digits
## [1] 53
set.seed(123)
RNGkind()
## [1] "Mersenne-Twister" "Inversion"??????? "Rejection"
length(table(runif(1e6)))
## [1] 999863

I don't expect any collisions when using Mersenne-Twister to generate a 
million floating point values. I'm not sure what causes this behavior, 
but it's documented in ?Random:

"Do not rely on randomness of low-order bits from RNGs. Most of the 
supplied uniform generators return 32-bit integer values that are 
converted to doubles, so they take at most 2^32 distinct values and long 
runs will return duplicated values (Wichmann-Hill is the exception, and 
all give at least 30 varying bits.)"

The "Wichman-Hill" bit is interesting:

RNGkind("Wichmann-Hill")
length(table(runif(1e6)))
## [1] 1000000
length(table(runif(1e6)))
## [1] 1000000

Mersenne-Twister has a much much larger periodicity than Wichmann-Hill, 
it would be great to see the above behavior also for Mersenne-Twister. 
Thanks for considering.


Best regards

Kirill


On 20.02.19 08:01, Gabriel Becker wrote:
> Luke,
>
> I'm happy to help with this. Its great to see this get tackled (I've cc'ed
> Kelli Ottoboni who helped flag this issue).
>
> I can prepare a patch for the RNGkind related stuff and the doc update.
>
> As for ???, what are your (and others') thoughts about the possibility of
> a) a reproducibility API which takes either an R version (or maybe
> alternatively a date) and sets the RNGkind to the default for that
> version/date, and/or b) that sessionInfo be modified to capture (and
> display) the RNGkind in effect.
>
> Best,
> ~G
>
>
> On Tue, Feb 19, 2019 at 11:52 AM Tierney, Luke <luke-tierney at uiowa.edu>
> wrote:
>
>> Before the next release we really should to sort out the bias issue in
>> sample() reported by Ottoboni and Stark in
>> https://www.stat.berkeley.edu/~stark/Preprints/r-random-issues.pdf and
>> filed aa a bug report by Duncan Murdoch at
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17494.
>>
>> Here are two examples of bad behavior through current R-devel:
>>
>>       set.seed(123)
>>       m <- (2/5) * 2^32
>>       x <- sample(m, 1000000, replace = TRUE)
>>       table(x %% 2, x > m / 2)
>>       ##
>>       ##    FALSE   TRUE
>>       ## 0 300620 198792
>>       ## 1 200196 300392
>>
>>       table(sample(2/7 * 2^32, 1000000, replace = TRUE) %% 2)
>>       ##
>>       ##      0      1
>>       ## 429054 570946
>>
>> I committed a modification to R_unif_index to address this by
>> generating random bits (blocks of 16) and rejection sampling, but for
>> now this is only enabled if the environment variable R_NEW_SAMPLE is
>> set before the first call.
>>
>> Some things still needed:
>>
>> - someone to look over the change and see if there are any issues
>> - adjustment of RNGkind to allowing the old behavior to be selected
>> - make the new behavior the default
>> - adjust documentation
>> - ???
>>
>> Unfortunately I don't have enough free cycles to do this, but I can
>> help if someone else can take the lead.
>>
>> There are two other places I found that might suffer from the same
>> issue, in walker_ProbSampleReplace (pointed out bu O & S) and in
>> src/nmath/wilcox.c.  Both can be addressed by using R_unif_index. I
>> have done that for walker_ProbSampleReplace, but the wilcox change
>> might need adjusting to support the standalone math library and I
>> don't feel confident enough I'd get that right.
>>
>> Best,
>>
>> luke
>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>      Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r@||@@tubner @end|ng |rom d@q@n@@com  Tue Feb 26 10:18:41 2019
From: r@||@@tubner @end|ng |rom d@q@n@@com (Ralf Stubner)
Date: Tue, 26 Feb 2019 10:18:41 +0100
Subject: [Rd] bias issue in sample() (PR 17494)
In-Reply-To: <3b3466d7-6aa0-6473-ac5a-1d230bde5187@mailbox.org>
References: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>
 <CAD4oTHGpZWCU6UCSbcYzj4wRsLp8M4T1koxbxDa9nVmODcYB1A@mail.gmail.com>
 <3b3466d7-6aa0-6473-ac5a-1d230bde5187@mailbox.org>
Message-ID: <4b96dc62-9a5c-4d76-12cf-11965a4782c3@daqana.com>

Kirill,

I think some level of collision is actually expected! R uses a 32bit MT
that can produce 2^32 different doubles. The probability for a collision
within a million draws is

> pbirthday(1e6, classes = 2^32)
[1] 1

Greetings
Ralf


On 26.02.19 07:06, Kirill M?ller wrote:
> Gabe
> 
> 
> As mentioned on Twitter, I think the following behavior should be fixed
> as part of the upcoming changes:
> 
> R.version.string
> ## [1] "R Under development (unstable) (2019-02-25 r76160)"
> .Machine$double.digits
> ## [1] 53
> set.seed(123)
> RNGkind()
> ## [1] "Mersenne-Twister" "Inversion"??????? "Rejection"
> length(table(runif(1e6)))
> ## [1] 999863
> 
> I don't expect any collisions when using Mersenne-Twister to generate a
> million floating point values. I'm not sure what causes this behavior,
> but it's documented in ?Random:
> 
> "Do not rely on randomness of low-order bits from RNGs. Most of the
> supplied uniform generators return 32-bit integer values that are
> converted to doubles, so they take at most 2^32 distinct values and long
> runs will return duplicated values (Wichmann-Hill is the exception, and
> all give at least 30 varying bits.)"
> 
> The "Wichman-Hill" bit is interesting:
> 
> RNGkind("Wichmann-Hill")
> length(table(runif(1e6)))
> ## [1] 1000000
> length(table(runif(1e6)))
> ## [1] 1000000
> 
> Mersenne-Twister has a much much larger periodicity than Wichmann-Hill,
> it would be great to see the above behavior also for Mersenne-Twister.
> Thanks for considering.
> 
> 
> Best regards
> 
> Kirill
> 
> 
> On 20.02.19 08:01, Gabriel Becker wrote:
>> Luke,
>>
>> I'm happy to help with this. Its great to see this get tackled (I've
>> cc'ed
>> Kelli Ottoboni who helped flag this issue).
>>
>> I can prepare a patch for the RNGkind related stuff and the doc update.
>>
>> As for ???, what are your (and others') thoughts about the possibility of
>> a) a reproducibility API which takes either an R version (or maybe
>> alternatively a date) and sets the RNGkind to the default for that
>> version/date, and/or b) that sessionInfo be modified to capture (and
>> display) the RNGkind in effect.
>>
>> Best,
>> ~G
>>
>>
>> On Tue, Feb 19, 2019 at 11:52 AM Tierney, Luke <luke-tierney at uiowa.edu>
>> wrote:
>>
>>> Before the next release we really should to sort out the bias issue in
>>> sample() reported by Ottoboni and Stark in
>>> https://www.stat.berkeley.edu/~stark/Preprints/r-random-issues.pdf and
>>> filed aa a bug report by Duncan Murdoch at
>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17494.
>>>
>>> Here are two examples of bad behavior through current R-devel:
>>>
>>> ????? set.seed(123)
>>> ????? m <- (2/5) * 2^32
>>> ????? x <- sample(m, 1000000, replace = TRUE)
>>> ????? table(x %% 2, x > m / 2)
>>> ????? ##
>>> ????? ##??? FALSE?? TRUE
>>> ????? ## 0 300620 198792
>>> ????? ## 1 200196 300392
>>>
>>> ????? table(sample(2/7 * 2^32, 1000000, replace = TRUE) %% 2)
>>> ????? ##
>>> ????? ##????? 0????? 1
>>> ????? ## 429054 570946
>>>
>>> I committed a modification to R_unif_index to address this by
>>> generating random bits (blocks of 16) and rejection sampling, but for
>>> now this is only enabled if the environment variable R_NEW_SAMPLE is
>>> set before the first call.
>>>
>>> Some things still needed:
>>>
>>> - someone to look over the change and see if there are any issues
>>> - adjustment of RNGkind to allowing the old behavior to be selected
>>> - make the new behavior the default
>>> - adjust documentation
>>> - ???
>>>
>>> Unfortunately I don't have enough free cycles to do this, but I can
>>> help if someone else can take the lead.
>>>
>>> There are two other places I found that might suffer from the same
>>> issue, in walker_ProbSampleReplace (pointed out bu O & S) and in
>>> src/nmath/wilcox.c.? Both can be addressed by using R_unif_index. I
>>> have done that for walker_ProbSampleReplace, but the wilcox change
>>> might need adjusting to support the standalone math library and I
>>> don't feel confident enough I'd get that right.
>>>
>>> Best,
>>>
>>> luke
>>>
>>>
>>> -- 
>>> Luke Tierney
>>> Ralph E. Wareham Professor of Mathematical Sciences
>>> University of Iowa????????????????? Phone:???????????? 319-335-3386
>>> Department of Statistics and??????? Fax:?????????????? 319-335-3017
>>> ???? Actuarial Science
>>> 241 Schaeffer Hall????????????????? email:?? luke-tierney at uiowa.edu
>>> Iowa City, IA 52242???????????????? WWW:? http://www.stat.uiowa.edu
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Dr.-Ing. Stefan Knirsch, Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190226/2b4562c2/attachment.sig>

From kr|m|r+m| @end|ng |rom m@||box@org  Tue Feb 26 12:35:52 2019
From: kr|m|r+m| @end|ng |rom m@||box@org (=?UTF-8?Q?Kirill_M=c3=bcller?=)
Date: Tue, 26 Feb 2019 12:35:52 +0100
Subject: [Rd] bias issue in sample() (PR 17494)
In-Reply-To: <4b96dc62-9a5c-4d76-12cf-11965a4782c3@daqana.com>
References: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>
 <CAD4oTHGpZWCU6UCSbcYzj4wRsLp8M4T1koxbxDa9nVmODcYB1A@mail.gmail.com>
 <3b3466d7-6aa0-6473-ac5a-1d230bde5187@mailbox.org>
 <4b96dc62-9a5c-4d76-12cf-11965a4782c3@daqana.com>
Message-ID: <e8b670c5-990c-ea0a-3a4e-3c79db6c059f@mailbox.org>

Ralf


I don't doubt this is expected with the current implementation, I doubt 
the implementation is desirable. Suggesting to turn this to

pbirthday(1e6, classes = 2^53)
## [1] 5.550956e-05

(which is still non-zero, but much less likely to cause confusion.)


Best regards

Kirill

On 26.02.19 10:18, Ralf Stubner wrote:
> Kirill,
>
> I think some level of collision is actually expected! R uses a 32bit MT
> that can produce 2^32 different doubles. The probability for a collision
> within a million draws is
>
>> pbirthday(1e6, classes = 2^32)
> [1] 1
>
> Greetings
> Ralf
>
>
> On 26.02.19 07:06, Kirill M?ller wrote:
>> Gabe
>>
>>
>> As mentioned on Twitter, I think the following behavior should be fixed
>> as part of the upcoming changes:
>>
>> R.version.string
>> ## [1] "R Under development (unstable) (2019-02-25 r76160)"
>> .Machine$double.digits
>> ## [1] 53
>> set.seed(123)
>> RNGkind()
>> ## [1] "Mersenne-Twister" "Inversion"??????? "Rejection"
>> length(table(runif(1e6)))
>> ## [1] 999863
>>
>> I don't expect any collisions when using Mersenne-Twister to generate a
>> million floating point values. I'm not sure what causes this behavior,
>> but it's documented in ?Random:
>>
>> "Do not rely on randomness of low-order bits from RNGs. Most of the
>> supplied uniform generators return 32-bit integer values that are
>> converted to doubles, so they take at most 2^32 distinct values and long
>> runs will return duplicated values (Wichmann-Hill is the exception, and
>> all give at least 30 varying bits.)"
>>
>> The "Wichman-Hill" bit is interesting:
>>
>> RNGkind("Wichmann-Hill")
>> length(table(runif(1e6)))
>> ## [1] 1000000
>> length(table(runif(1e6)))
>> ## [1] 1000000
>>
>> Mersenne-Twister has a much much larger periodicity than Wichmann-Hill,
>> it would be great to see the above behavior also for Mersenne-Twister.
>> Thanks for considering.
>>
>>
>> Best regards
>>
>> Kirill
>>
>>
>> On 20.02.19 08:01, Gabriel Becker wrote:
>>> Luke,
>>>
>>> I'm happy to help with this. Its great to see this get tackled (I've
>>> cc'ed
>>> Kelli Ottoboni who helped flag this issue).
>>>
>>> I can prepare a patch for the RNGkind related stuff and the doc update.
>>>
>>> As for ???, what are your (and others') thoughts about the possibility of
>>> a) a reproducibility API which takes either an R version (or maybe
>>> alternatively a date) and sets the RNGkind to the default for that
>>> version/date, and/or b) that sessionInfo be modified to capture (and
>>> display) the RNGkind in effect.
>>>
>>> Best,
>>> ~G
>>>
>>>
>>> On Tue, Feb 19, 2019 at 11:52 AM Tierney, Luke <luke-tierney at uiowa.edu>
>>> wrote:
>>>
>>>> Before the next release we really should to sort out the bias issue in
>>>> sample() reported by Ottoboni and Stark in
>>>> https://www.stat.berkeley.edu/~stark/Preprints/r-random-issues.pdf and
>>>> filed aa a bug report by Duncan Murdoch at
>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17494.
>>>>
>>>> Here are two examples of bad behavior through current R-devel:
>>>>
>>>>  ????? set.seed(123)
>>>>  ????? m <- (2/5) * 2^32
>>>>  ????? x <- sample(m, 1000000, replace = TRUE)
>>>>  ????? table(x %% 2, x > m / 2)
>>>>  ????? ##
>>>>  ????? ##??? FALSE?? TRUE
>>>>  ????? ## 0 300620 198792
>>>>  ????? ## 1 200196 300392
>>>>
>>>>  ????? table(sample(2/7 * 2^32, 1000000, replace = TRUE) %% 2)
>>>>  ????? ##
>>>>  ????? ##????? 0????? 1
>>>>  ????? ## 429054 570946
>>>>
>>>> I committed a modification to R_unif_index to address this by
>>>> generating random bits (blocks of 16) and rejection sampling, but for
>>>> now this is only enabled if the environment variable R_NEW_SAMPLE is
>>>> set before the first call.
>>>>
>>>> Some things still needed:
>>>>
>>>> - someone to look over the change and see if there are any issues
>>>> - adjustment of RNGkind to allowing the old behavior to be selected
>>>> - make the new behavior the default
>>>> - adjust documentation
>>>> - ???
>>>>
>>>> Unfortunately I don't have enough free cycles to do this, but I can
>>>> help if someone else can take the lead.
>>>>
>>>> There are two other places I found that might suffer from the same
>>>> issue, in walker_ProbSampleReplace (pointed out bu O & S) and in
>>>> src/nmath/wilcox.c.? Both can be addressed by using R_unif_index. I
>>>> have done that for walker_ProbSampleReplace, but the wilcox change
>>>> might need adjusting to support the standalone math library and I
>>>> don't feel confident enough I'd get that right.
>>>>
>>>> Best,
>>>>
>>>> luke
>>>>
>>>>
>>>> -- 
>>>> Luke Tierney
>>>> Ralph E. Wareham Professor of Mathematical Sciences
>>>> University of Iowa????????????????? Phone:???????????? 319-335-3386
>>>> Department of Statistics and??????? Fax:?????????????? 319-335-3017
>>>>  ???? Actuarial Science
>>>> 241 Schaeffer Hall????????????????? email:?? luke-tierney at uiowa.edu
>>>> Iowa City, IA 52242???????????????? WWW:? http://www.stat.uiowa.edu
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>  ????[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uke-t|erney @end|ng |rom u|ow@@edu  Tue Feb 26 16:41:51 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Tue, 26 Feb 2019 15:41:51 +0000
Subject: [Rd] bias issue in sample() (PR 17494)
In-Reply-To: <e8b670c5-990c-ea0a-3a4e-3c79db6c059f@mailbox.org>
References: <alpine.DEB.2.21.1902191350590.4951@luke-Latitude-7480>
 <CAD4oTHGpZWCU6UCSbcYzj4wRsLp8M4T1koxbxDa9nVmODcYB1A@mail.gmail.com>
 <3b3466d7-6aa0-6473-ac5a-1d230bde5187@mailbox.org>
 <4b96dc62-9a5c-4d76-12cf-11965a4782c3@daqana.com>
 <e8b670c5-990c-ea0a-3a4e-3c79db6c059f@mailbox.org>
Message-ID: <alpine.DEB.2.21.1902260932410.4951@luke-Latitude-7480>

On Tue, 26 Feb 2019, Kirill M?ller wrote:

> Ralf
>
>
> I don't doubt this is expected with the current implementation, I doubt the 
> implementation is desirable. Suggesting to turn this to
>
> pbirthday(1e6, classes = 2^53)
> ## [1] 5.550956e-05

That isn't a small number given simulation sizes people routinely run
these days. Just about right to miss an issue in a pilot run and get
bitten on the real one.

In the inversion generator for normals we already use a higher
resolution uniform produced from two regular ones. I considered
switching to that approach for all uniforms, either in addition to or
instead of changing the uniform integer sampling algorithm used in
sample(). But that would have been even more disruptive:

- all simulation results (except normals) would change;
- there would be a performance penalty;
- the streams would be used up twice as fast;

I would also probably be necessary to rethink things like how to use
the L'Ecuyer generator to produce multiple streams in the `parallel`
package.

We may need to take this route in the future, but it didn't seem like
a good idea at this time.

Best,

luke

>
> (which is still non-zero, but much less likely to cause confusion.)
>
>
> Best regards
>
> Kirill
>
> On 26.02.19 10:18, Ralf Stubner wrote:
>> Kirill,
>> 
>> I think some level of collision is actually expected! R uses a 32bit MT
>> that can produce 2^32 different doubles. The probability for a collision
>> within a million draws is
>> 
>>> pbirthday(1e6, classes = 2^32)
>> [1] 1
>> 
>> Greetings
>> Ralf
>> 
>> 
>> On 26.02.19 07:06, Kirill M?ller wrote:
>>> Gabe
>>> 
>>> 
>>> As mentioned on Twitter, I think the following behavior should be fixed
>>> as part of the upcoming changes:
>>> 
>>> R.version.string
>>> ## [1] "R Under development (unstable) (2019-02-25 r76160)"
>>> .Machine$double.digits
>>> ## [1] 53
>>> set.seed(123)
>>> RNGkind()
>>> ## [1] "Mersenne-Twister" "Inversion"??????? "Rejection"
>>> length(table(runif(1e6)))
>>> ## [1] 999863
>>> 
>>> I don't expect any collisions when using Mersenne-Twister to generate a
>>> million floating point values. I'm not sure what causes this behavior,
>>> but it's documented in ?Random:
>>> 
>>> "Do not rely on randomness of low-order bits from RNGs. Most of the
>>> supplied uniform generators return 32-bit integer values that are
>>> converted to doubles, so they take at most 2^32 distinct values and long
>>> runs will return duplicated values (Wichmann-Hill is the exception, and
>>> all give at least 30 varying bits.)"
>>> 
>>> The "Wichman-Hill" bit is interesting:
>>> 
>>> RNGkind("Wichmann-Hill")
>>> length(table(runif(1e6)))
>>> ## [1] 1000000
>>> length(table(runif(1e6)))
>>> ## [1] 1000000
>>> 
>>> Mersenne-Twister has a much much larger periodicity than Wichmann-Hill,
>>> it would be great to see the above behavior also for Mersenne-Twister.
>>> Thanks for considering.
>>> 
>>> 
>>> Best regards
>>> 
>>> Kirill
>>> 
>>> 
>>> On 20.02.19 08:01, Gabriel Becker wrote:
>>>> Luke,
>>>> 
>>>> I'm happy to help with this. Its great to see this get tackled (I've
>>>> cc'ed
>>>> Kelli Ottoboni who helped flag this issue).
>>>> 
>>>> I can prepare a patch for the RNGkind related stuff and the doc update.
>>>> 
>>>> As for ???, what are your (and others') thoughts about the possibility of
>>>> a) a reproducibility API which takes either an R version (or maybe
>>>> alternatively a date) and sets the RNGkind to the default for that
>>>> version/date, and/or b) that sessionInfo be modified to capture (and
>>>> display) the RNGkind in effect.
>>>> 
>>>> Best,
>>>> ~G
>>>> 
>>>> 
>>>> On Tue, Feb 19, 2019 at 11:52 AM Tierney, Luke <luke-tierney at uiowa.edu>
>>>> wrote:
>>>> 
>>>>> Before the next release we really should to sort out the bias issue in
>>>>> sample() reported by Ottoboni and Stark in
>>>>> https://www.stat.berkeley.edu/~stark/Preprints/r-random-issues.pdf and
>>>>> filed aa a bug report by Duncan Murdoch at
>>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17494.
>>>>> 
>>>>> Here are two examples of bad behavior through current R-devel:
>>>>>
>>>>>  ????? set.seed(123)
>>>>>  ????? m <- (2/5) * 2^32
>>>>>  ????? x <- sample(m, 1000000, replace = TRUE)
>>>>>  ????? table(x %% 2, x > m / 2)
>>>>>  ????? ##
>>>>>  ????? ##??? FALSE?? TRUE
>>>>>  ????? ## 0 300620 198792
>>>>>  ????? ## 1 200196 300392
>>>>>
>>>>>  ????? table(sample(2/7 * 2^32, 1000000, replace = TRUE) %% 2)
>>>>>  ????? ##
>>>>>  ????? ##????? 0????? 1
>>>>>  ????? ## 429054 570946
>>>>> 
>>>>> I committed a modification to R_unif_index to address this by
>>>>> generating random bits (blocks of 16) and rejection sampling, but for
>>>>> now this is only enabled if the environment variable R_NEW_SAMPLE is
>>>>> set before the first call.
>>>>> 
>>>>> Some things still needed:
>>>>> 
>>>>> - someone to look over the change and see if there are any issues
>>>>> - adjustment of RNGkind to allowing the old behavior to be selected
>>>>> - make the new behavior the default
>>>>> - adjust documentation
>>>>> - ???
>>>>> 
>>>>> Unfortunately I don't have enough free cycles to do this, but I can
>>>>> help if someone else can take the lead.
>>>>> 
>>>>> There are two other places I found that might suffer from the same
>>>>> issue, in walker_ProbSampleReplace (pointed out bu O & S) and in
>>>>> src/nmath/wilcox.c.? Both can be addressed by using R_unif_index. I
>>>>> have done that for walker_ProbSampleReplace, but the wilcox change
>>>>> might need adjusting to support the standalone math library and I
>>>>> don't feel confident enough I'd get that right.
>>>>> 
>>>>> Best,
>>>>> 
>>>>> luke
>>>>> 
>>>>> 
>>>>> -- 
>>>>> Luke Tierney
>>>>> Ralph E. Wareham Professor of Mathematical Sciences
>>>>> University of Iowa????????????????? Phone:???????????? 319-335-3386
>>>>> Department of Statistics and??????? Fax:?????????????? 319-335-3017
>>>>>  ???? Actuarial Science
>>>>> 241 Schaeffer Hall????????????????? email:?? luke-tierney at uiowa.edu
>>>>> Iowa City, IA 52242???????????????? WWW:? http://www.stat.uiowa.edu
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>  ????[[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From brod|e@g@@|@m @end|ng |rom y@hoo@com  Tue Feb 26 16:49:33 2019
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Tue, 26 Feb 2019 15:49:33 +0000 (UTC)
Subject: [Rd] Possible Update to R-internals Manual
References: <280244503.5355377.1551196173840.ref@mail.yahoo.com>
Message-ID: <280244503.5355377.1551196173840@mail.yahoo.com>

According the R-ints the only current uses of the `truelength` meta datum is for environment hash tables.? Jim Hester just made me aware that R3.4.0 introduces a new use case: growable vectors.

I attach a patch to the R-ints manual that reflects this change.? The wording is obviously just a suggestion.? Additionally, it may be worth moving the footnote into the main body of the document now that there are more use cases.

Best,

Brodie.
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: R-ints-patch.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190226/edd23391/attachment.txt>

From g@bembecker @end|ng |rom gm@||@com  Tue Feb 26 20:46:51 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 26 Feb 2019 11:46:51 -0800
Subject: [Rd] Compile R to WebAssembly / Emscripten?
In-Reply-To: <CABtg=KmRB+7Fn6bLcfLUq1q0K=8p9XKYb0cxt+No2tVXonY97g@mail.gmail.com>
References: <CA+ispTGkO4Z8uQmmgF0XWk40Xmgk=uiAR0kR+6dmT+Thxd6YoQ@mail.gmail.com>
 <CABtg=KmRB+7Fn6bLcfLUq1q0K=8p9XKYb0cxt+No2tVXonY97g@mail.gmail.com>
Message-ID: <CAD4oTHH_9K_to2JhJ5T8c2dm5KsWrDrTMOFBhBJah_hz32rQYg@mail.gmail.com>

As I recall, the major blocker is that R links against a number of other
things (notably BLAS, pcre, etc) so while technically possible (?) I
suppose, the universe of things you'd have to compile over and then get
working is much larger than just the R internals.

I think most people who consider this (including me years ago, as well as
the poster of Gabor's message to rdevel) hit that point and then go try to
find a less herculean task to pursue.

~G

On Wed, Feb 20, 2019 at 12:57 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
wrote:

> This was some time ago:
> https://stat.ethz.ch/pipermail/r-devel/2013-May/066724.html
>
> So probably not hopeless, but I would think it is a lot of work.
>
> Gabor
>
> On Wed, Feb 20, 2019 at 8:17 AM Todd Wilder <wildert at gmail.com> wrote:
> >
> > Has anyone attempted to compile R (probably without any OS bindings) to
> > WebAssembly / Emscripten? If so, how far did you get? (would be crazy
> > awesome if you could get all the way to a ggplot bitmap output). If not,
> is
> > this a waste of time or is there some daylight to doing this?
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bmontgomery @end|ng |rom y@hoo@com  Tue Feb 26 05:18:19 2019
From: bmontgomery @end|ng |rom y@hoo@com (Brian Montgomery)
Date: Tue, 26 Feb 2019 04:18:19 +0000 (UTC)
Subject: [Rd] Intermittent crashes with inset `[<-` command
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
Message-ID: <1345861204.5109355.1551154699341@mail.yahoo.com>

The following code crashes after about 300 iterations on my?x86_64-w64-mingw32?machine on R 3.5.2 --vanilla.??
Others have duplicated this (see?https://github.com/tidyverse/magrittr/issues/190?if necessary), but I don't know how machine/OS-dependent it may be.??
If it doesn't crash for you, please try increasing the length of the x vector.

Substituting the commented-out line for the one below it works correctly (prints out 1:1000 and ends normally) every time.

x <- 1:200000
y <- rep(letters[1:5], length(x) / 5L)
for (i in 1:1000) {
? # x[y == 'a'] <- x[y == 'b']
? x <- `[<-`(x, y == 'a', x[y == 'b'])
? cat(i, '')
}
cat('\n')

The point of using this syntax is to make it work better with pipes, but the errors occur without pipes or magrittr.

Thank you for your help!


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Tue Feb 26 14:25:10 2019
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Tue, 26 Feb 2019 14:25:10 +0100
Subject: [Rd] Improved Data Aggregation and Summary Statistics in R
Message-ID: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>

Dear Developers,

Having spent time developing and thinking about how data aggregation and
summary statistics can be enhanced in R, I would like to present my
ideas/efforts in the form of two commands:

The first, which for now I called 'collap', is an upgrade of aggregate that
accommodates and extends the functionality of aggregate in various
respects, most importantly to work with multilevel and multi-type data,
multiple function calls, highly customized aggregation tasks, a much
greater flexibility in the passing of inputs and tidy output.

The second function, 'qsu', is an advanced and flexible summary command for
cross-sectional and multilevel (panel) data (i.e. it can provide overall,
between and within entities statistics, and allows for grouping, custom
functions and transformations). It also provides a quick method to compute
and output within-transformed data.

Both commands are efficiently built from core R, but provide for optional
integration with data.table, which renders them extremely fast on large
datasets. An explanation of the syntax, a demonstration and benchmark
results are provided in the attached vignette.

Since both commands accommodate existing functionality while adding
significant basic functionality, I though that their addition to the stats
package would be a worthwhile consideration. I am happy for your feedback.

Best regards,

Sebastian Krantz

-------------- next part --------------
A non-text attachment was scrubbed...
Name: collap & qsu vignette.pdf
Type: application/pdf
Size: 569278 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190226/eb4dd92d/attachment.pdf>

From myrmecocy@tu@ @end|ng |rom gm@||@com  Tue Feb 26 20:54:57 2019
From: myrmecocy@tu@ @end|ng |rom gm@||@com (Scott Chamberlain)
Date: Tue, 26 Feb 2019 11:54:57 -0800
Subject: [Rd] Compile R to WebAssembly / Emscripten?
In-Reply-To: <CAD4oTHH_9K_to2JhJ5T8c2dm5KsWrDrTMOFBhBJah_hz32rQYg@mail.gmail.com>
References: <CA+ispTGkO4Z8uQmmgF0XWk40Xmgk=uiAR0kR+6dmT+Thxd6YoQ@mail.gmail.com>
 <CABtg=KmRB+7Fn6bLcfLUq1q0K=8p9XKYb0cxt+No2tVXonY97g@mail.gmail.com>
 <CAD4oTHH_9K_to2JhJ5T8c2dm5KsWrDrTMOFBhBJah_hz32rQYg@mail.gmail.com>
Message-ID: <CAD-oS=9OmpkELyCRRcjLRq1chJk=3se0jjXDC3MF6p4Q0Bcycw@mail.gmail.com>

Recently Michael Droettboom at Mozilla was asking around about
doing for R what they've done for Python here
https://github.com/iodide-project/pyodide
with the Iodide project

S

On Tue, Feb 26, 2019 at 11:47 AM Gabriel Becker <gabembecker at gmail.com>
wrote:

> As I recall, the major blocker is that R links against a number of other
> things (notably BLAS, pcre, etc) so while technically possible (?) I
> suppose, the universe of things you'd have to compile over and then get
> working is much larger than just the R internals.
>
> I think most people who consider this (including me years ago, as well as
> the poster of Gabor's message to rdevel) hit that point and then go try to
> find a less herculean task to pursue.
>
> ~G
>
> On Wed, Feb 20, 2019 at 12:57 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
>
> > This was some time ago:
> > https://stat.ethz.ch/pipermail/r-devel/2013-May/066724.html
> >
> > So probably not hopeless, but I would think it is a lot of work.
> >
> > Gabor
> >
> > On Wed, Feb 20, 2019 at 8:17 AM Todd Wilder <wildert at gmail.com> wrote:
> > >
> > > Has anyone attempted to compile R (probably without any OS bindings) to
> > > WebAssembly / Emscripten? If so, how far did you get? (would be crazy
> > > awesome if you could get all the way to a ggplot bitmap output). If
> not,
> > is
> > > this a waste of time or is there some daylight to doing this?
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Wed Feb 27 09:19:35 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 27 Feb 2019 00:19:35 -0800
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <1345861204.5109355.1551154699341@mail.yahoo.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
Message-ID: <CAD4oTHFgrBKncycjoFLpN3mgb1KQqNHE5eU86GaTDXvJoHsjMw@mail.gmail.com>

Hi Brian,

I don't have a windows machine, but on a modern macbook pro I'm not able to
get this to crash in 3.5.1 or a very recent built-from-source R-devel.  I
increased the length of x by 2 orders of magnitude but that just made the
loop take a lot longer to successfully run in both R versions i tested.

So seems like there is some OS/machine dependency at work here (?).

Best,
~G

On Wed, Feb 27, 2019 at 12:01 AM Brian Montgomery via R-devel <
r-devel at r-project.org> wrote:

> The following code crashes after about 300 iterations on
> my x86_64-w64-mingw32 machine on R 3.5.2 --vanilla.
> Others have duplicated this (see
> https://github.com/tidyverse/magrittr/issues/190 if necessary), but I
> don't know how machine/OS-dependent it may be.
> If it doesn't crash for you, please try increasing the length of the x
> vector.
>
> Substituting the commented-out line for the one below it works correctly
> (prints out 1:1000 and ends normally) every time.
>
> x <- 1:200000
> y <- rep(letters[1:5], length(x) / 5L)
> for (i in 1:1000) {
>   # x[y == 'a'] <- x[y == 'b']
>   x <- `[<-`(x, y == 'a', x[y == 'b'])
>   cat(i, '')
> }
> cat('\n')
>
> The point of using this syntax is to make it work better with pipes, but
> the errors occur without pipes or magrittr.
>
> Thank you for your help!
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Wed Feb 27 09:46:48 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Wed, 27 Feb 2019 09:46:48 +0100
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <1345861204.5109355.1551154699341@mail.yahoo.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
Message-ID: <deca7295-aaa9-59fd-30e1-c7361a7d254e@insa-toulouse.fr>

On 26/02/2019 05:18, Brian Montgomery via R-devel wrote:
> The following code crashes after about 300 iterations on my?x86_64-w64-mingw32?machine on R 3.5.2 --vanilla.
> Others have duplicated this (see?https://github.com/tidyverse/magrittr/issues/190?if necessary), but I don't know how machine/OS-dependent it may be.
It crashes too on my Mageia6 (RPM based Linux distribution):
 ?184 185 186 187
 ?*** caught segfault ***
address 0x700000002, cause 'memory not mapped'

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace

The crash can happen at different moments, sometimes after i=187 like in 
the example above, sometimes after i=915. The error is not always 
segfault. It can also be

915 Error in `[<-`(x, y == "a", x[y == "b"]) : replacement has length zero

or

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Error in 
`[<-`(x, y == "a", x[y == "b"]) :
 ? types (de raw a integer) incompatibles dans l'ajustement 
d'affectation de type

(sorry, this crash was in french locale)

Hoping this helps.
Serguei.

 >? sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Mageia 6

Matrix products: default
BLAS/LAPACK: /home/opt/OpenBLAS/lib/libopenblas_sandybridge-r0.3.3.so

locale:
[1] C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_3.5.2

> If it doesn't crash for you, please try increasing the length of the x vector.
>
> Substituting the commented-out line for the one below it works correctly (prints out 1:1000 and ends normally) every time.
>
> x <- 1:200000
> y <- rep(letters[1:5], length(x) / 5L)
> for (i in 1:1000) {
>  ? # x[y == 'a'] <- x[y == 'b']
>  ? x <- `[<-`(x, y == 'a', x[y == 'b'])
>  ? cat(i, '')
> }
> cat('\n')
>
> The point of using this syntax is to make it work better with pipes, but the errors occur without pipes or magrittr.
>
> Thank you for your help!
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |uc@r @end|ng |rom |edor@project@org  Wed Feb 27 10:23:54 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 27 Feb 2019 10:23:54 +0100
Subject: [Rd] Improved Data Aggregation and Summary Statistics in R
In-Reply-To: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
References: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
Message-ID: <CALEXWq3bK6Xi1QqNW2AMazdKe0emfZP3Ai4+EBNtMZ9uaNpybA@mail.gmail.com>

On Wed, 27 Feb 2019 at 09:02, Sebastian Martin Krantz
<sebastian.krantz at graduateinstitute.ch> wrote:
>
> Dear Developers,
>
> Having spent time developing and thinking about how data aggregation and
> summary statistics can be enhanced in R, I would like to present my
> ideas/efforts in the form of two commands:
>
> The first, which for now I called 'collap', is an upgrade of aggregate that
> accommodates and extends the functionality of aggregate in various
> respects, most importantly to work with multilevel and multi-type data,
> multiple function calls, highly customized aggregation tasks, a much
> greater flexibility in the passing of inputs and tidy output.
>
> The second function, 'qsu', is an advanced and flexible summary command for
> cross-sectional and multilevel (panel) data (i.e. it can provide overall,
> between and within entities statistics, and allows for grouping, custom
> functions and transformations). It also provides a quick method to compute
> and output within-transformed data.
>
> Both commands are efficiently built from core R, but provide for optional
> integration with data.table, which renders them extremely fast on large
> datasets. An explanation of the syntax, a demonstration and benchmark
> results are provided in the attached vignette.

Looks interesting. Sorry if it's there and I didn't find it: is there
any package implementing these functions so that we can try them?

I?aki


From |uc@r @end|ng |rom |edor@project@org  Wed Feb 27 10:43:10 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 27 Feb 2019 10:43:10 +0100
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <deca7295-aaa9-59fd-30e1-c7361a7d254e@insa-toulouse.fr>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
 <deca7295-aaa9-59fd-30e1-c7361a7d254e@insa-toulouse.fr>
Message-ID: <CALEXWq1ZcfuK0TswrhpZeZiXeFKb2oqQYzuPnj3GdQ2cTm04Tw@mail.gmail.com>

On Wed, 27 Feb 2019 at 09:51, Serguei Sokol <sokol at insa-toulouse.fr> wrote:
>
> On 26/02/2019 05:18, Brian Montgomery via R-devel wrote:
> > The following code crashes after about 300 iterations on my x86_64-w64-mingw32 machine on R 3.5.2 --vanilla.
> > Others have duplicated this (see https://github.com/tidyverse/magrittr/issues/190 if necessary), but I don't know how machine/OS-dependent it may be.
> It crashes too on my Mageia6 (RPM based Linux distribution):
>   184 185 186 187
>   *** caught segfault ***
> address 0x700000002, cause 'memory not mapped'

I can reproduce it too. This is the output from valgrind (sessionInfo below):

==3296== Invalid read of size 1
==3296==    at 0x4A2D7F7: UnknownInlinedFun (Rinlinedfuns.h:542)
==3296==    by 0x4A2D7F7: VectorAssign (subassign.c:658)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafab90 is 0 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 1
==3296==    at 0x4A2E2C0: UnknownInlinedFun (Rinlinedfuns.h:189)
==3296==    by 0x4A2E2C0: UnknownInlinedFun (Rinlinedfuns.h:554)
==3296==    by 0x4A2E2C0: VectorAssign (subassign.c:658)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafab90 is 0 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 8
==3296==    at 0x4A2E2C9: UnknownInlinedFun (Rinlinedfuns.h:189)
==3296==    by 0x4A2E2C9: UnknownInlinedFun (Rinlinedfuns.h:554)
==3296==    by 0x4A2E2C9: VectorAssign (subassign.c:658)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafabb0 is 32 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 1
==3296==    at 0x4A2CCC0: SubassignTypeFix (subassign.c:318)
==3296==    by 0x4A2D8F8: VectorAssign (subassign.c:666)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafab90 is 0 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 1
==3296==    at 0x4A2D858: UnknownInlinedFun (Rinlinedfuns.h:542)
==3296==    by 0x4A2D858: VectorAssign (subassign.c:672)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafab90 is 0 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 1
==3296==    at 0x4A2DBA0: UnknownInlinedFun (Rinlinedfuns.h:189)
==3296==    by 0x4A2DBA0: UnknownInlinedFun (Rinlinedfuns.h:554)
==3296==    by 0x4A2DBA0: VectorAssign (subassign.c:672)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafab90 is 0 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 8
==3296==    at 0x4A2DBA9: UnknownInlinedFun (Rinlinedfuns.h:189)
==3296==    by 0x4A2DBA9: UnknownInlinedFun (Rinlinedfuns.h:554)
==3296==    by 0x4A2DBA9: VectorAssign (subassign.c:672)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafabb0 is 32 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 1
==3296==    at 0x4A2F9C2: UnknownInlinedFun (Rinlinedfuns.h:381)
==3296==    by 0x4A2F9C2: VectorAssign (subassign.c:710)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafab90 is 0 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==
==3296== Invalid read of size 4
==3296==    at 0x4A2F9C7: UnknownInlinedFun (Rinlinedfuns.h:381)
==3296==    by 0x4A2F9C7: VectorAssign (subassign.c:710)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:258)
==3296==    by 0x49B5131: Rf_ReplIteration (main.c:198)
==3296==    by 0x49B54F0: R_ReplConsole (main.c:308)
==3296==    by 0x49B55AF: run_Rmainloop (main.c:1082)
==3296==    by 0x1090AE: main (Rmain.c:29)
==3296==  Address 0x1dafabc0 is 48 bytes inside a block of size 160,048 free'd
==3296==    at 0x4839A0C: free (vg_replace_malloc.c:540)
==3296==    by 0x49BCA56: ReleaseLargeFreeVectors (memory.c:1055)
==3296==    by 0x49BCA56: RunGenCollect (memory.c:1825)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2998)
==3296==    by 0x49BCA56: R_gc_internal (memory.c:2964)
==3296==    by 0x49BFB2C: Rf_allocVector3 (memory.c:2682)
==3296==    by 0x49C09FC: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x49C09FC: R_alloc (memory.c:2197)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:575)
==3296==    by 0x4A377F5: logicalSubscript (subscript.c:503)
==3296==    by 0x4A3A8D3: Rf_makeSubscript (subscript.c:994)
==3296==    by 0x4A2D63D: VectorAssign (subassign.c:656)
==3296==    by 0x4A30540: do_subassign_dflt (subassign.c:1641)
==3296==    by 0x4A338F2: do_subassign (subassign.c:1571)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==  Block was alloc'd at
==3296==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==3296==    by 0x49C0031: Rf_allocVector3 (memory.c:2713)
==3296==    by 0x4A3B041: UnknownInlinedFun (Rinlinedfuns.h:577)
==3296==    by 0x4A3B041: Rf_ExtractSubset (subset.c:115)
==3296==    by 0x4A3DA8A: VectorSubset (subset.c:198)
==3296==    by 0x4A3DA8A: do_subset_dflt (subset.c:823)
==3296==    by 0x4A3FCAA: do_subset (subset.c:661)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)
==3296==    by 0x4989600: Rf_evalListKeepMissing (eval.c:2955)
==3296==    by 0x4A3390B: R_DispatchOrEvalSP (subassign.c:1535)
==3296==    by 0x4A3390B: do_subassign (subassign.c:1567)
==3296==    by 0x49769A1: bcEval (eval.c:6795)
==3296==    by 0x498B415: R_compileAndExecute (eval.c:1407)
==3296==    by 0x498B985: do_for (eval.c:2185)
==3296==    by 0x49848A8: Rf_eval (eval.c:691)

> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: Fedora 29 (Twenty Nine)

Matrix products: default
BLAS/LAPACK: /usr/lib64/R/lib/libRblas.so

locale:
[1] LC_CTYPE=es_ES.UTF-8       LC_NUMERIC=C
[3] LC_TIME=en_US.UTF-8        LC_COLLATE=es_ES.UTF-8
[5] LC_MONETARY=es_ES.UTF-8    LC_MESSAGES=es_ES.UTF-8
[7] LC_PAPER=es_ES.UTF-8       LC_NAME=C
[9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=es_ES.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2

--
I?aki


From jor|@mey@ @end|ng |rom gm@||@com  Wed Feb 27 11:17:25 2019
From: jor|@mey@ @end|ng |rom gm@||@com (Joris Meys)
Date: Wed, 27 Feb 2019 11:17:25 +0100
Subject: [Rd] Improved Data Aggregation and Summary Statistics in R
In-Reply-To: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
References: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
Message-ID: <CAO1zAVYUDqbUpGcG=-cjhXABpNB+enH2HXf_LAe1-16nzxv0Eg@mail.gmail.com>

Dear Sebastian,

Initially I was a bit hesitant to think about yet another way to summarize
data, but your illustrations convinced me this is actually a great addition
to the toolset currently available in different R packages. Many of us have
written custom functions to get the required tables for specific data sets,
but this would reduce that effort to simply using the right collap() call.

Like Inaki, I'm very interested in trying it out if you have the code
available somewhere.

Cheers
Joris





On Wed, Feb 27, 2019 at 9:01 AM Sebastian Martin Krantz <
sebastian.krantz at graduateinstitute.ch> wrote:

> Dear Developers,
>
> Having spent time developing and thinking about how data aggregation and
> summary statistics can be enhanced in R, I would like to present my
> ideas/efforts in the form of two commands:
>
> The first, which for now I called 'collap', is an upgrade of aggregate that
> accommodates and extends the functionality of aggregate in various
> respects, most importantly to work with multilevel and multi-type data,
> multiple function calls, highly customized aggregation tasks, a much
> greater flexibility in the passing of inputs and tidy output.
>
> The second function, 'qsu', is an advanced and flexible summary command for
> cross-sectional and multilevel (panel) data (i.e. it can provide overall,
> between and within entities statistics, and allows for grouping, custom
> functions and transformations). It also provides a quick method to compute
> and output within-transformed data.
>
> Both commands are efficiently built from core R, but provide for optional
> integration with data.table, which renders them extremely fast on large
> datasets. An explanation of the syntax, a demonstration and benchmark
> results are provided in the attached vignette.
>
> Since both commands accommodate existing functionality while adding
> significant basic functionality, I though that their addition to the stats
> package would be a worthwhile consideration. I am happy for your feedback.
>
> Best regards,
>
> Sebastian Krantz
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2018-2019
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Feb 27 11:33:36 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 27 Feb 2019 10:33:36 +0000
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <deca7295-aaa9-59fd-30e1-c7361a7d254e@insa-toulouse.fr>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
 <deca7295-aaa9-59fd-30e1-c7361a7d254e@insa-toulouse.fr>
Message-ID: <f7ac84cb-3e75-d029-2a25-7350cb6d2de4@sapo.pt>

Hello,

I can also reproduce this, R 3.5.2 on Ubuntu 18.04 LTS.


First run gives error after 148.

After 148:

Error in `[<-`(x, y == "a", x[y == "b"]) :
   substituto tem comprimento zero
Execu??o interrompida

Translation:

replacement has length zero
Execution stopped


Second run gives a different error, I changed the script to start with a 
sessionInfo() instruction, everything else is the same as in the OP.

After 180:

  *** caught segfault ***
address 0x700000002, cause 'memory not mapped'
An irrecoverable exception occurred. R is aborting now ...


Several runs with or without the sessionInfo() always give the two 
different errors above.

The sessionInfo() was the following.

sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.1 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2


Hope this helps,

Rui Barradas


?s 08:46 de 27/02/2019, Serguei Sokol escreveu:
> On 26/02/2019 05:18, Brian Montgomery via R-devel wrote:
>> The following code crashes after about 300 iterations on 
>> my?x86_64-w64-mingw32?machine on R 3.5.2 --vanilla.
>> Others have duplicated this 
>> (see?https://github.com/tidyverse/magrittr/issues/190?if necessary), 
>> but I don't know how machine/OS-dependent it may be.
> It crashes too on my Mageia6 (RPM based Linux distribution):
>  ?184 185 186 187
>  ?*** caught segfault ***
> address 0x700000002, cause 'memory not mapped'
> 
> Possible actions:
> 1: abort (with core dump, if enabled)
> 2: normal R exit
> 3: exit R without saving workspace
> 4: exit R saving workspace
> 
> The crash can happen at different moments, sometimes after i=187 like in 
> the example above, sometimes after i=915. The error is not always 
> segfault. It can also be
> 
> 915 Error in `[<-`(x, y == "a", x[y == "b"]) : replacement has length zero
> 
> or
> 
> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Error in 
> `[<-`(x, y == "a", x[y == "b"]) :
>  ? types (de raw a integer) incompatibles dans l'ajustement 
> d'affectation de type
> 
> (sorry, this crash was in french locale)
> 
> Hoping this helps.
> Serguei.
> 
>  >? sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Mageia 6
> 
> Matrix products: default
> BLAS/LAPACK: /home/opt/OpenBLAS/lib/libopenblas_sandybridge-r0.3.3.so
> 
> locale:
> [1] C
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.5.2
> 
>> If it doesn't crash for you, please try increasing the length of the x 
>> vector.
>>
>> Substituting the commented-out line for the one below it works 
>> correctly (prints out 1:1000 and ends normally) every time.
>>
>> x <- 1:200000
>> y <- rep(letters[1:5], length(x) / 5L)
>> for (i in 1:1000) {
>> ?? # x[y == 'a'] <- x[y == 'b']
>> ?? x <- `[<-`(x, y == 'a', x[y == 'b'])
>> ?? cat(i, '')
>> }
>> cat('\n')
>>
>> The point of using this syntax is to make it work better with pipes, 
>> but the errors occur without pipes or magrittr.
>>
>> Thank you for your help!
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Feb 27 11:36:17 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 27 Feb 2019 11:36:17 +0100
Subject: [Rd] stopifnot
In-Reply-To: <1959542111.4342391.1551018168623@mail.yahoo.com>
References: <1959542111.4342391.1551018168623.ref@mail.yahoo.com>
 <1959542111.4342391.1551018168623@mail.yahoo.com>
Message-ID: <23670.26657.767567.364913@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>     on Sun, 24 Feb 2019 14:22:48 +0000 writes:

    >> From https://github.com/HenrikBengtsson/Wishlist-for-R/issues/70 :
    > ... and follow up note from 2018-03-15: Ouch... in R-devel, stopifnot() has become yet 4-5 times slower;

    > ...
    > which is due to a complete rewrite using tryCatch() and withCallingHandlers().


    >> From https://stat.ethz.ch/pipermail/r-devel/2017-May/074256.html , it seems that 'tryCatch' was used to avoid the following example from giving error message with 'eval' call and 'withCallingHandlers' was meant to handle similar case for warning.
    > tst <- function(y) { stopifnot(is.numeric(y)); y+ 1 }
    > try(tst())

    > However,
    > withCallingHandlers(<something>,
    > warning = function(w) { w$call <- cl.i; w })
    > actally has no effect. In current code of function 'stopifnot', 'eval' is used only in handling stopifnot(exprs=) . The warning message from
    > stopifnot(exprs={warning()})
    > has 'eval' call:
    > In eval(cl.i, envir = envir) : 

    > This may work.
    > withCallingHandlers(<something>,
    > warning = function(w) {
    > w$call <- cl.i; warning(w); invokeRestart("muffleWarning") })


    > Current documentation says:
    > Since R version 3.5.0, expressions are evaluated sequentially, and hence evaluation stops as soon as there is a "non-TRUE", asnindicated by the above conceptual equivalence statement. Further, when such an expression signals an error or warning, its conditionCall() no longer contains the full stopifnot call, but just the erroneous expression.

    > I assume that "no longer contains ..." is supposed to be the effect of the use of 'withCallingHandlers' and 'tryCatch' in 'stopifnot'.

    > Actually, "contains the full stopifnot call" is not always the case in R before version 3.5.0. Normally, the call is the "innermost context".

Thank you Suharto, for thinking about these issues and being
constructive, trying to improve the current state.

Unfortunately, I do not quite understand what you are trying to
say here.

The main somewhat recent changes to stopifnot() have been (in
inverse time ordering)

1) Do what the documentation always promised, namely eval() the
   expressions one by one, and stop evaluation as soon as one of
   them is not all(.) TRUE.
   For that reason, the previously used idiom   'list(...)'
   is a no go, as "of course", it evaluates all the expressions in '...'

2) Try to ensure that warning() and stop()/error messages are
   shown the same {as closely as feasible}  to how they are
   shown outside of stopifnot(.)
   	 	  ==> partly the topic of this e-mail.

3) [2.5 years ago:] stopifnot() became smart about all.equal(.) expressions,
  showing the all.equal() string if it was not TRUE:
  In older R versions (<= 3.3.x ?), we had

      > stopifnot(all.equal(pi, 3.1415))
     Error: all.equal(pi, 3.1415) is not TRUE

  where as in R (>= 3.4.0 at least):

      > stopifnot(all.equal(pi, 3.1415)) 
      Error: pi and 3.1415 are not equal:
	Mean relative difference: 2.949255e-05


One example of what I meant with the above documentation ("no
longer contains")  is the following:

In R 3.5.x, 

   > lf <- list(fm = y ~ f(x), osf = ~ sin(x))
   > stopifnot(identical(deparse(lf), deparse(lf, control="all")))
   Warning message:
   In deparse(lf, control = "all") : deparse may be incomplete
   > 

If I change the calling handler to use the
invokeRestart("muffleWarning") which I understand you are
proposing, then the message becomes

   Warning message:
   In identical(deparse(lf, control = "all"), deparse(lf)) :
     deparse may be incomplete

which is less useful as I can no longer see directly which of
the deparse() produced the warning.

    > Example:
    > stopifnot((1:2) + (1:3) > 0)
    > Warning message:
    > In (1:2) + (1:3) :
    > ? longer object length is not a multiple of shorter object length

Which is the good answer
(whereas also showing "> 0" in the warning is slightly off).

Again, if I'd use the  ..muffleWarning.. code instead, the above
would change to the worse

     Warning message:
     In (1:2) + (1:3) > 0 :
       longer object length is not a multiple of shorter object length

which "wrongly includes the '> 0'.
So I guess I really don't understand what you are proposing, or
would like to change  ...


    > Example that gives error:
    > stopifnot(is.na(log("a")))
    > R 3.5.0:
    > R 3.3.2:

That's a good one: we want the error message *not to* mention
is.na(.) but just 'log': i.e.,

We'd like  [ R versions <= 3.4.4 ] :

> stopifnot(is.na(log("a")))
Error in log("a") : non-numeric argument to mathematical function

as opposed to [ R version >= 3.5.0 ] :

> stopifnot(is.na(log("a")))
Error in is.na(log("a")) : non-numeric argument to mathematical function

-----------------------------------------

Again, I'm sure I partly failed to understand what you said in
your e-mail and apologize for that.

Of course, I'm happy and glad to discuss improvements to
stopifnot() which improve speed (while retaining important
current functionality)  or also just improve current
functionality
-- e.g. get the "better" error message in the stopifnot(is.na(log("a")))
   example.

High regards,
Martin Maechler


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Wed Feb 27 11:44:05 2019
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Wed, 27 Feb 2019 11:44:05 +0100
Subject: [Rd] Improved Data Aggregation and Summary Statistics in R
In-Reply-To: <CAO1zAVYUDqbUpGcG=-cjhXABpNB+enH2HXf_LAe1-16nzxv0Eg@mail.gmail.com>
References: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
 <CAO1zAVYUDqbUpGcG=-cjhXABpNB+enH2HXf_LAe1-16nzxv0Eg@mail.gmail.com>
Message-ID: <CAOsNuxB_-cuPpjVP5vrYJ01yZ2jEbTZzbTVodOFgZ7xrKXDrUw@mail.gmail.com>

Dear I?aki and Joris,

thank you for the positive feedback! I had attached a code file to the
post, but apparently it was removed.
I will attach it again to this e-mail, otherwise both vignette and code can
be downloaded from the following link:
https://www.dropbox.com/sh/s0k1tiz7el55g1q/AACpri-nruXjcMwUnNcHoycKa?dl=0
Best,
Sebastian

On Wed, 27 Feb 2019 at 11:14, Joris Meys <jorismeys at gmail.com> wrote:

> Dear Sebastian,
>
> Initially I was a bit hesitant to think about yet another way to summarize
> data, but your illustrations convinced me this is actually a great addition
> to the toolset currently available in different R packages. Many of us have
> written custom functions to get the required tables for specific data sets,
> but this would reduce that effort to simply using the right collap() call.
>
> Like Inaki, I'm very interested in trying it out if you have the code
> available somewhere.
>
> Cheers
> Joris
>
>
>
>
>
> On Wed, Feb 27, 2019 at 9:01 AM Sebastian Martin Krantz <
> sebastian.krantz at graduateinstitute.ch> wrote:
>
>> Dear Developers,
>>
>> Having spent time developing and thinking about how data aggregation and
>> summary statistics can be enhanced in R, I would like to present my
>> ideas/efforts in the form of two commands:
>>
>> The first, which for now I called 'collap', is an upgrade of aggregate
>> that
>> accommodates and extends the functionality of aggregate in various
>> respects, most importantly to work with multilevel and multi-type data,
>> multiple function calls, highly customized aggregation tasks, a much
>> greater flexibility in the passing of inputs and tidy output.
>>
>> The second function, 'qsu', is an advanced and flexible summary command
>> for
>> cross-sectional and multilevel (panel) data (i.e. it can provide overall,
>> between and within entities statistics, and allows for grouping, custom
>> functions and transformations). It also provides a quick method to compute
>> and output within-transformed data.
>>
>> Both commands are efficiently built from core R, but provide for optional
>> integration with data.table, which renders them extremely fast on large
>> datasets. An explanation of the syntax, a demonstration and benchmark
>> results are provided in the attached vignette.
>>
>> Since both commands accommodate existing functionality while adding
>> significant basic functionality, I though that their addition to the stats
>> package would be a worthwhile consideration. I am happy for your feedback.
>>
>> Best regards,
>>
>> Sebastian Krantz
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
>
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
> -----------
> Biowiskundedagen 2018-2019
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>

From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Feb 27 12:48:53 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 27 Feb 2019 06:48:53 -0500
Subject: [Rd] Improved Data Aggregation and Summary Statistics in R
In-Reply-To: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
References: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
Message-ID: <d17f7549-38bc-1c91-addc-6874a414fb16@gmail.com>

On 26/02/2019 8:25 a.m., Sebastian Martin Krantz wrote:
> Dear Developers,
> 
> Having spent time developing and thinking about how data aggregation and
> summary statistics can be enhanced in R, I would like to present my
> ideas/efforts in the form of two commands:
> 
> The first, which for now I called 'collap', is an upgrade of aggregate that
> accommodates and extends the functionality of aggregate in various
> respects, most importantly to work with multilevel and multi-type data,
> multiple function calls, highly customized aggregation tasks, a much
> greater flexibility in the passing of inputs and tidy output.
> 
> The second function, 'qsu', is an advanced and flexible summary command for
> cross-sectional and multilevel (panel) data (i.e. it can provide overall,
> between and within entities statistics, and allows for grouping, custom
> functions and transformations). It also provides a quick method to compute
> and output within-transformed data.
> 
> Both commands are efficiently built from core R, but provide for optional
> integration with data.table, which renders them extremely fast on large
> datasets. An explanation of the syntax, a demonstration and benchmark
> results are provided in the attached vignette.
> 
> Since both commands accommodate existing functionality while adding
> significant basic functionality, I though that their addition to the stats
> package would be a worthwhile consideration. I am happy for your feedback.

Generally the R Core group is reluctant to incorporate new functions 
into the base packages.  Each function that is added adds to their work, 
and they already have too much to do.  (I am no longer a member of R 
Core, but I don't think things have changed since I retired.)

It is much easier for them if volunteers publish functions themselves, 
via contributed packages.

Nowadays Github provides a very convenient platform on which you can 
develop a package containing your functions.  If other users find bugs 
or have suggested improvements, it's very easy for them to send those to 
you, and you can make the fixes available immediately.  Once you are 
satisfied that it is stable, you can submit it to CRAN, and anyone using 
R can easily install it.

If you find the prospect of writing a package daunting, you shouldn't. 
It's actually quite easy, especially if you are using RStudio or ESS (or 
some other helpful front-end.)  Hadley Wickham's book
<http://r-pkgs.had.co.nz/> is a pretty accessible description of a 
development strategy.  (It's not the only strategy, but lots of people 
use it.)

Duncan Murdoch


From wdun|@p @end|ng |rom t|bco@com  Wed Feb 27 18:07:48 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 27 Feb 2019 09:07:48 -0800
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <CAD4oTHFgrBKncycjoFLpN3mgb1KQqNHE5eU86GaTDXvJoHsjMw@mail.gmail.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
 <CAD4oTHFgrBKncycjoFLpN3mgb1KQqNHE5eU86GaTDXvJoHsjMw@mail.gmail.com>
Message-ID: <CAF8bMcYZgubfYQYi29n1RNBiA1EU2APN+HAJeGuN4M5Ok_Q7sg@mail.gmail.com>

Valgrind (without gctorture) reports memory misuse:

% R --debugger=valgrind --debugger-args="--leak-check=full --num-callers=18"
...
> x <- 1:200000
> y <- rep(letters[1:5], length(x) / 5L)
> for (i in 1:1000) {
+   # x[y == 'a'] <- x[y == 'b']
+   x <- `[<-`(x, y == 'a', x[y == 'b'])
+   cat(i, '')
+ }
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
29 30 31 32 33 34 35 36 37 ==4711== Invalid read of size 1
==4711==    at 0x501A40F: Rf_xlength (Rinlinedfuns.h:542)
==4711==    by 0x501A40F: VectorAssign (subassign.c:658)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
==4711== Invalid read of size 8
==4711==    at 0x501A856: XLENGTH_EX (Rinlinedfuns.h:189)
==4711==    by 0x501A856: Rf_xlength (Rinlinedfuns.h:554)
==4711==    by 0x501A856: VectorAssign (subassign.c:658)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3abb0 is 32 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
==4711== Invalid read of size 1
==4711==    at 0x501997E: SubassignTypeFix (subassign.c:318)
==4711==    by 0x501A4A2: VectorAssign (subassign.c:666)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
==4711== Invalid read of size 1
==4711==    at 0x501A4B4: Rf_xlength (Rinlinedfuns.h:542)
==4711==    by 0x501A4B4: VectorAssign (subassign.c:672)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
==4711== Invalid read of size 8
==4711==    at 0x501A573: XLENGTH_EX (Rinlinedfuns.h:189)
==4711==    by 0x501A573: Rf_xlength (Rinlinedfuns.h:554)
==4711==    by 0x501A573: VectorAssign (subassign.c:672)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3abb0 is 32 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
==4711== Invalid read of size 1
==4711==    at 0x501C582: INTEGER_ELT (Rinlinedfuns.h:381)
==4711==    by 0x501C582: VectorAssign (subassign.c:710)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
==4711== Invalid read of size 4
==4711==    at 0x501C587: INTEGER_ELT (Rinlinedfuns.h:381)
==4711==    by 0x501C587: VectorAssign (subassign.c:710)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Address 0x19b3abc0 is 48 bytes inside a block of size 160,048
free'd
==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
==4711==    by 0x5020100: do_subassign (subassign.c:1571)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==  Block was alloc'd at
==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
==4711==    by 0x502BE90: do_subset (subset.c:661)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
==4711==    by 0x4F66398: bcEval (eval.c:6795)
==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
==4711==    by 0x4F7DA70: do_for (eval.c:2185)
==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
==4711==    by 0x40075A: main (Rmain.c:29)
==4711==
38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
...

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Feb 27, 2019 at 12:31 AM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Brian,
>
> I don't have a windows machine, but on a modern macbook pro I'm not able to
> get this to crash in 3.5.1 or a very recent built-from-source R-devel.  I
> increased the length of x by 2 orders of magnitude but that just made the
> loop take a lot longer to successfully run in both R versions i tested.
>
> So seems like there is some OS/machine dependency at work here (?).
>
> Best,
> ~G
>
> On Wed, Feb 27, 2019 at 12:01 AM Brian Montgomery via R-devel <
> r-devel at r-project.org> wrote:
>
> > The following code crashes after about 300 iterations on
> > my x86_64-w64-mingw32 machine on R 3.5.2 --vanilla.
> > Others have duplicated this (see
> > https://github.com/tidyverse/magrittr/issues/190 if necessary), but I
> > don't know how machine/OS-dependent it may be.
> > If it doesn't crash for you, please try increasing the length of the x
> > vector.
> >
> > Substituting the commented-out line for the one below it works correctly
> > (prints out 1:1000 and ends normally) every time.
> >
> > x <- 1:200000
> > y <- rep(letters[1:5], length(x) / 5L)
> > for (i in 1:1000) {
> >   # x[y == 'a'] <- x[y == 'b']
> >   x <- `[<-`(x, y == 'a', x[y == 'b'])
> >   cat(i, '')
> > }
> > cat('\n')
> >
> > The point of using this syntax is to make it work better with pipes, but
> > the errors occur without pipes or magrittr.
> >
> > Thank you for your help!
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From er|nm@hodge@@ @end|ng |rom gm@||@com  Wed Feb 27 18:06:22 2019
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Wed, 27 Feb 2019 10:06:22 -0700
Subject: [Rd] Problem with compiling OpenBLAS to work with R
Message-ID: <CACxE24kZSEVgfah=fGXqx0jzrGoc6RBwUSgBWTMgoyi4q0z84A@mail.gmail.com>

Hello!

I'm not sure if this is the right place to post this, so apologies
in advance if I'm not in the right list.

I downloaded the OpenBLAS and am following Avraham Adler's great
instructions.  However, when I run make, things go well to a certain point,
and then go bad:

make
[snip]

touch cygopenblas_haswellp-r0.3.5.a
make -j 1 -C test all
make[1]: Entering directory
'/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
gfortran -O2 -Wall -frecursive -m64 -mavx2   -o sblat1 sblat1.o
../cygopenblas_haswellp-r0.3.5.a  -L/usr/lib/gcc/x86_64-pc-msys/7.3.0
-L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib/../lib
-L/usr/lib/../lib
-L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib
-L/usr/lib/w32api  -lmsys-2.0
D:/msys64/usr/lib/../lib/libpthread.a(t-d001088.o):fake:(.text+0x2):
undefined reference to `__imp_pthread_mutex_destroy'
D:/msys64/usr/lib/../lib/libpthread.a(t-d001090.o):fake:(.text+0x2):
undefined reference to `__imp_pthread_mutex_init'
D:/msys64/usr/lib/../lib/libpthread.a(t-d001091.o):fake:(.text+0x2):
undefined reference to `__imp_pthread_mutex_lock'
D:/msys64/usr/lib/../lib/libpthread.a(t-d001094.o):fake:(.text+0x2):
undefined reference to `__imp_pthread_mutex_trylock'
D:/msys64/usr/lib/../lib/libpthread.a(t-d001095.o):fake:(.text+0x2):
undefined reference to `__imp_pthread_mutex_unlock'
collect2.exe: error: ld returned 1 exit status
make[1]: *** [Makefile:134: sblat1] Error 1
make[1]: Leaving directory
'/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
make: *** [Makefile:124: tests] Error 2


I think it has something to do with the threads/pthreads but am not sure
how to fix it.  Any suggestions much appreciated.

Thanks,
Sincerely,
Erin

Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com

	[[alternative HTML version deleted]]


From tr@ver@c @end|ng |rom gm@||@com  Wed Feb 27 20:48:12 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Wed, 27 Feb 2019 11:48:12 -0800
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <CAF8bMcYZgubfYQYi29n1RNBiA1EU2APN+HAJeGuN4M5Ok_Q7sg@mail.gmail.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
 <CAD4oTHFgrBKncycjoFLpN3mgb1KQqNHE5eU86GaTDXvJoHsjMw@mail.gmail.com>
 <CAF8bMcYZgubfYQYi29n1RNBiA1EU2APN+HAJeGuN4M5Ok_Q7sg@mail.gmail.com>
Message-ID: <CAPLMX9Fn4PVN5VL4SSAzXU0_9CX35QH-D12UvOEOyA2GCUaWgA@mail.gmail.com>

On an azure centos VM, I can reproduce this bug which reports either:

 *** caught segfault ***
address 0x70000006a, cause 'memory not mapped' (crash)

Or

incompatible types (from builtin to integer) in subassignment type fix
(no crash)

Like Gabriel, I could not reproduce the bug on a mac laptop.  Both R
versions 3.5.1.

Travers

On Wed, Feb 27, 2019 at 9:08 AM William Dunlap via R-devel
<r-devel at r-project.org> wrote:
>
> Valgrind (without gctorture) reports memory misuse:
>
> % R --debugger=valgrind --debugger-args="--leak-check=full --num-callers=18"
> ...
> > x <- 1:200000
> > y <- rep(letters[1:5], length(x) / 5L)
> > for (i in 1:1000) {
> +   # x[y == 'a'] <- x[y == 'b']
> +   x <- `[<-`(x, y == 'a', x[y == 'b'])
> +   cat(i, '')
> + }
> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
> 29 30 31 32 33 34 35 36 37 ==4711== Invalid read of size 1
> ==4711==    at 0x501A40F: Rf_xlength (Rinlinedfuns.h:542)
> ==4711==    by 0x501A40F: VectorAssign (subassign.c:658)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> ==4711== Invalid read of size 8
> ==4711==    at 0x501A856: XLENGTH_EX (Rinlinedfuns.h:189)
> ==4711==    by 0x501A856: Rf_xlength (Rinlinedfuns.h:554)
> ==4711==    by 0x501A856: VectorAssign (subassign.c:658)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3abb0 is 32 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> ==4711== Invalid read of size 1
> ==4711==    at 0x501997E: SubassignTypeFix (subassign.c:318)
> ==4711==    by 0x501A4A2: VectorAssign (subassign.c:666)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> ==4711== Invalid read of size 1
> ==4711==    at 0x501A4B4: Rf_xlength (Rinlinedfuns.h:542)
> ==4711==    by 0x501A4B4: VectorAssign (subassign.c:672)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> ==4711== Invalid read of size 8
> ==4711==    at 0x501A573: XLENGTH_EX (Rinlinedfuns.h:189)
> ==4711==    by 0x501A573: Rf_xlength (Rinlinedfuns.h:554)
> ==4711==    by 0x501A573: VectorAssign (subassign.c:672)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3abb0 is 32 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> ==4711== Invalid read of size 1
> ==4711==    at 0x501C582: INTEGER_ELT (Rinlinedfuns.h:381)
> ==4711==    by 0x501C582: VectorAssign (subassign.c:710)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> ==4711== Invalid read of size 4
> ==4711==    at 0x501C587: INTEGER_ELT (Rinlinedfuns.h:381)
> ==4711==    by 0x501C587: VectorAssign (subassign.c:710)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Address 0x19b3abc0 is 48 bytes inside a block of size 160,048
> free'd
> ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==  Block was alloc'd at
> ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> ==4711==    by 0x502BE90: do_subset (subset.c:661)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> ==4711==    by 0x40075A: main (Rmain.c:29)
> ==4711==
> 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
> ...
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Wed, Feb 27, 2019 at 12:31 AM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
> > Hi Brian,
> >
> > I don't have a windows machine, but on a modern macbook pro I'm not able to
> > get this to crash in 3.5.1 or a very recent built-from-source R-devel.  I
> > increased the length of x by 2 orders of magnitude but that just made the
> > loop take a lot longer to successfully run in both R versions i tested.
> >
> > So seems like there is some OS/machine dependency at work here (?).
> >
> > Best,
> > ~G
> >
> > On Wed, Feb 27, 2019 at 12:01 AM Brian Montgomery via R-devel <
> > r-devel at r-project.org> wrote:
> >
> > > The following code crashes after about 300 iterations on
> > > my x86_64-w64-mingw32 machine on R 3.5.2 --vanilla.
> > > Others have duplicated this (see
> > > https://github.com/tidyverse/magrittr/issues/190 if necessary), but I
> > > don't know how machine/OS-dependent it may be.
> > > If it doesn't crash for you, please try increasing the length of the x
> > > vector.
> > >
> > > Substituting the commented-out line for the one below it works correctly
> > > (prints out 1:1000 and ends normally) every time.
> > >
> > > x <- 1:200000
> > > y <- rep(letters[1:5], length(x) / 5L)
> > > for (i in 1:1000) {
> > >   # x[y == 'a'] <- x[y == 'b']
> > >   x <- `[<-`(x, y == 'a', x[y == 'b'])
> > >   cat(i, '')
> > > }
> > > cat('\n')
> > >
> > > The point of using this syntax is to make it work better with pipes, but
> > > the errors occur without pipes or magrittr.
> > >
> > > Thank you for your help!
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tr@ver@c @end|ng |rom gm@||@com  Wed Feb 27 21:33:37 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Wed, 27 Feb 2019 12:33:37 -0800
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <CAPLMX9Fn4PVN5VL4SSAzXU0_9CX35QH-D12UvOEOyA2GCUaWgA@mail.gmail.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
 <CAD4oTHFgrBKncycjoFLpN3mgb1KQqNHE5eU86GaTDXvJoHsjMw@mail.gmail.com>
 <CAF8bMcYZgubfYQYi29n1RNBiA1EU2APN+HAJeGuN4M5Ok_Q7sg@mail.gmail.com>
 <CAPLMX9Fn4PVN5VL4SSAzXU0_9CX35QH-D12UvOEOyA2GCUaWgA@mail.gmail.com>
Message-ID: <CAPLMX9GK0T=fwTGB4x=OOmuyJgDh+fePaACi3C026TjeaW9RaQ@mail.gmail.com>

Some testing:

Adding `gc()` inside the for loop prevented a crash for 10,000+
iterations, whereas adding `Sys.sleep(.2)` (which takes longer) did
not.  I couldn't wrap my head around the `vectorAssign` source code,
but I suspect it is a matter of an intermediate object not being
protected and being gc'ed.  Hope that helps someone....

Travers


Travers

On Wed, Feb 27, 2019 at 11:48 AM Travers Ching <traversc at gmail.com> wrote:
>
> On an azure centos VM, I can reproduce this bug which reports either:
>
>  *** caught segfault ***
> address 0x70000006a, cause 'memory not mapped' (crash)
>
> Or
>
> incompatible types (from builtin to integer) in subassignment type fix
> (no crash)
>
> Like Gabriel, I could not reproduce the bug on a mac laptop.  Both R
> versions 3.5.1.
>
> Travers
>
> On Wed, Feb 27, 2019 at 9:08 AM William Dunlap via R-devel
> <r-devel at r-project.org> wrote:
> >
> > Valgrind (without gctorture) reports memory misuse:
> >
> > % R --debugger=valgrind --debugger-args="--leak-check=full --num-callers=18"
> > ...
> > > x <- 1:200000
> > > y <- rep(letters[1:5], length(x) / 5L)
> > > for (i in 1:1000) {
> > +   # x[y == 'a'] <- x[y == 'b']
> > +   x <- `[<-`(x, y == 'a', x[y == 'b'])
> > +   cat(i, '')
> > + }
> > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
> > 29 30 31 32 33 34 35 36 37 ==4711== Invalid read of size 1
> > ==4711==    at 0x501A40F: Rf_xlength (Rinlinedfuns.h:542)
> > ==4711==    by 0x501A40F: VectorAssign (subassign.c:658)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > ==4711== Invalid read of size 8
> > ==4711==    at 0x501A856: XLENGTH_EX (Rinlinedfuns.h:189)
> > ==4711==    by 0x501A856: Rf_xlength (Rinlinedfuns.h:554)
> > ==4711==    by 0x501A856: VectorAssign (subassign.c:658)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3abb0 is 32 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > ==4711== Invalid read of size 1
> > ==4711==    at 0x501997E: SubassignTypeFix (subassign.c:318)
> > ==4711==    by 0x501A4A2: VectorAssign (subassign.c:666)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > ==4711== Invalid read of size 1
> > ==4711==    at 0x501A4B4: Rf_xlength (Rinlinedfuns.h:542)
> > ==4711==    by 0x501A4B4: VectorAssign (subassign.c:672)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > ==4711== Invalid read of size 8
> > ==4711==    at 0x501A573: XLENGTH_EX (Rinlinedfuns.h:189)
> > ==4711==    by 0x501A573: Rf_xlength (Rinlinedfuns.h:554)
> > ==4711==    by 0x501A573: VectorAssign (subassign.c:672)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3abb0 is 32 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > ==4711== Invalid read of size 1
> > ==4711==    at 0x501C582: INTEGER_ELT (Rinlinedfuns.h:381)
> > ==4711==    by 0x501C582: VectorAssign (subassign.c:710)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3ab90 is 0 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > ==4711== Invalid read of size 4
> > ==4711==    at 0x501C587: INTEGER_ELT (Rinlinedfuns.h:381)
> > ==4711==    by 0x501C587: VectorAssign (subassign.c:710)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Address 0x19b3abc0 is 48 bytes inside a block of size 160,048
> > free'd
> > ==4711==    at 0x4C2ACBD: free (vg_replace_malloc.c:530)
> > ==4711==    by 0x4FAFCB2: ReleaseLargeFreeVectors (memory.c:1055)
> > ==4711==    by 0x4FAFCB2: RunGenCollect (memory.c:1825)
> > ==4711==    by 0x4FAFCB2: R_gc_internal (memory.c:2998)
> > ==4711==    by 0x4FB166F: Rf_allocVector3 (memory.c:2682)
> > ==4711==    by 0x4FB2310: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x4FB2310: R_alloc (memory.c:2197)
> > ==4711==    by 0x5023F7A: logicalSubscript (subscript.c:575)
> > ==4711==    by 0x5026DA3: Rf_makeSubscript (subscript.c:994)
> > ==4711==    by 0x501A2F3: VectorAssign (subassign.c:656)
> > ==4711==    by 0x501CDFE: do_subassign_dflt (subassign.c:1641)
> > ==4711==    by 0x5020100: do_subassign (subassign.c:1571)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==  Block was alloc'd at
> > ==4711==    at 0x4C29BC3: malloc (vg_replace_malloc.c:299)
> > ==4711==    by 0x4FB1B04: Rf_allocVector3 (memory.c:2712)
> > ==4711==    by 0x5027574: Rf_allocVector (Rinlinedfuns.h:577)
> > ==4711==    by 0x5027574: Rf_ExtractSubset (subset.c:115)
> > ==4711==    by 0x502ADCD: VectorSubset (subset.c:198)
> > ==4711==    by 0x502ADCD: do_subset_dflt (subset.c:823)
> > ==4711==    by 0x502BE90: do_subset (subset.c:661)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4F7BAC3: Rf_evalListKeepMissing (eval.c:2955)
> > ==4711==    by 0x50200CB: R_DispatchOrEvalSP (subassign.c:1535)
> > ==4711==    by 0x50200CB: do_subassign (subassign.c:1567)
> > ==4711==    by 0x4F66398: bcEval (eval.c:6795)
> > ==4711==    by 0x4F7D86D: R_compileAndExecute (eval.c:1407)
> > ==4711==    by 0x4F7DA70: do_for (eval.c:2185)
> > ==4711==    by 0x4F7741C: Rf_eval (eval.c:691)
> > ==4711==    by 0x4FA7181: Rf_ReplIteration (main.c:258)
> > ==4711==    by 0x4FA7570: R_ReplConsole (main.c:308)
> > ==4711==    by 0x4FA760E: run_Rmainloop (main.c:1082)
> > ==4711==    by 0x40075A: main (Rmain.c:29)
> > ==4711==
> > 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
> > ...
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com
> >
> >
> > On Wed, Feb 27, 2019 at 12:31 AM Gabriel Becker <gabembecker at gmail.com>
> > wrote:
> >
> > > Hi Brian,
> > >
> > > I don't have a windows machine, but on a modern macbook pro I'm not able to
> > > get this to crash in 3.5.1 or a very recent built-from-source R-devel.  I
> > > increased the length of x by 2 orders of magnitude but that just made the
> > > loop take a lot longer to successfully run in both R versions i tested.
> > >
> > > So seems like there is some OS/machine dependency at work here (?).
> > >
> > > Best,
> > > ~G
> > >
> > > On Wed, Feb 27, 2019 at 12:01 AM Brian Montgomery via R-devel <
> > > r-devel at r-project.org> wrote:
> > >
> > > > The following code crashes after about 300 iterations on
> > > > my x86_64-w64-mingw32 machine on R 3.5.2 --vanilla.
> > > > Others have duplicated this (see
> > > > https://github.com/tidyverse/magrittr/issues/190 if necessary), but I
> > > > don't know how machine/OS-dependent it may be.
> > > > If it doesn't crash for you, please try increasing the length of the x
> > > > vector.
> > > >
> > > > Substituting the commented-out line for the one below it works correctly
> > > > (prints out 1:1000 and ends normally) every time.
> > > >
> > > > x <- 1:200000
> > > > y <- rep(letters[1:5], length(x) / 5L)
> > > > for (i in 1:1000) {
> > > >   # x[y == 'a'] <- x[y == 'b']
> > > >   x <- `[<-`(x, y == 'a', x[y == 'b'])
> > > >   cat(i, '')
> > > > }
> > > > cat('\n')
> > > >
> > > > The point of using this syntax is to make it work better with pipes, but
> > > > the errors occur without pipes or magrittr.
> > > >
> > > > Thank you for your help!
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From |uke-t|erney @end|ng |rom u|ow@@edu  Wed Feb 27 21:39:39 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Wed, 27 Feb 2019 20:39:39 +0000
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <1345861204.5109355.1551154699341@mail.yahoo.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
Message-ID: <alpine.DEB.2.21.1902271439150.4951@luke-Latitude-7480>

Thanks for the report. Should be fixed shortly.

Best,

luke

On Tue, 26 Feb 2019, Brian Montgomery via R-devel wrote:

> The following code crashes after about 300 iterations on my?x86_64-w64-mingw32?machine on R 3.5.2 --vanilla.??
> Others have duplicated this (see?https://github.com/tidyverse/magrittr/issues/190?if necessary), but I don't know how machine/OS-dependent it may be.??
> If it doesn't crash for you, please try increasing the length of the x vector.
>
> Substituting the commented-out line for the one below it works correctly (prints out 1:1000 and ends normally) every time.
>
> x <- 1:200000
> y <- rep(letters[1:5], length(x) / 5L)
> for (i in 1:1000) {
> ? # x[y == 'a'] <- x[y == 'b']
> ? x <- `[<-`(x, y == 'a', x[y == 'b'])
> ? cat(i, '')
> }
> cat('\n')
>
> The point of using this syntax is to make it work better with pipes, but the errors occur without pipes or magrittr.
>
> Thank you for your help!
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From |uke-t|erney @end|ng |rom u|ow@@edu  Wed Feb 27 21:42:05 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Wed, 27 Feb 2019 20:42:05 +0000
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <1345861204.5109355.1551154699341@mail.yahoo.com>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
Message-ID: <alpine.DEB.2.21.1902271440210.4951@luke-Latitude-7480>

On Tue, 26 Feb 2019, Brian Montgomery via R-devel wrote:

> The following code crashes after about 300 iterations on my?x86_64-w64-mingw32?machine on R 3.5.2 --vanilla.??
> Others have duplicated this (see?https://github.com/tidyverse/magrittr/issues/190?if necessary), but I don't know how machine/OS-dependent it may be.??
> If it doesn't crash for you, please try increasing the length of the x vector.
>
> Substituting the commented-out line for the one below it works correctly (prints out 1:1000 and ends normally) every time.
>
> x <- 1:200000
> y <- rep(letters[1:5], length(x) / 5L)
> for (i in 1:1000) {
> ? # x[y == 'a'] <- x[y == 'b']
> ? x <- `[<-`(x, y == 'a', x[y == 'b'])
> ? cat(i, '')
> }
> cat('\n')
>
> The point of using this syntax is to make it work better with pipes, but the errors occur without pipes or magrittr.

Calling replacement functions this way is a Really Bad Idea. Some
assume they are being called properly and will end up mutating data
they should not when called this way.

Best,

luke

>
> Thank you for your help!
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From |uke-t|erney @end|ng |rom u|ow@@edu  Wed Feb 27 22:29:51 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Wed, 27 Feb 2019 21:29:51 +0000
Subject: [Rd] Intermittent crashes with inset `[<-` command
In-Reply-To: <alpine.DEB.2.21.1902271439150.4951@luke-Latitude-7480>
References: <1345861204.5109355.1551154699341.ref@mail.yahoo.com>
 <1345861204.5109355.1551154699341@mail.yahoo.com>
 <alpine.DEB.2.21.1902271439150.4951@luke-Latitude-7480>
Message-ID: <alpine.DEB.2.21.1902271529290.4951@luke-Latitude-7480>

Fixed in R-devel and R-patched.

Best,

luke

On Wed, 27 Feb 2019, Tierney, Luke wrote:

> Thanks for the report. Should be fixed shortly.
>
> Best,
>
> luke
>
> On Tue, 26 Feb 2019, Brian Montgomery via R-devel wrote:
>
>> The following code crashes after about 300 iterations on my?x86_64-w64-mingw32?machine on R 3.5.2 --vanilla.??
>> Others have duplicated this (see?https://github.com/tidyverse/magrittr/issues/190?if necessary), but I don't know how machine/OS-dependent it may be.??
>> If it doesn't crash for you, please try increasing the length of the x vector.
>>
>> Substituting the commented-out line for the one below it works correctly (prints out 1:1000 and ends normally) every time.
>>
>> x <- 1:200000
>> y <- rep(letters[1:5], length(x) / 5L)
>> for (i in 1:1000) {
>> ? # x[y == 'a'] <- x[y == 'b']
>> ? x <- `[<-`(x, y == 'a', x[y == 'b'])
>> ? cat(i, '')
>> }
>> cat('\n')
>>
>> The point of using this syntax is to make it work better with pipes, but the errors occur without pipes or magrittr.
>>
>> Thank you for your help!
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From @uh@rto_@nggono @end|ng |rom y@hoo@com  Wed Feb 27 23:46:04 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Wed, 27 Feb 2019 22:46:04 +0000 (UTC)
Subject: [Rd] stopifnot
References: <164850320.6530706.1551307564070.ref@mail.yahoo.com>
Message-ID: <164850320.6530706.1551307564070@mail.yahoo.com>

My points:
- The 'withCallingHandlers' construct that is used in current 'stopifnot' code has no effect. Without it, the warning message is the same. The overridden warning is not raised. The original warning stays.
- Overriding call in error and warning to 'cl.i' doesn't always give better outcome. The original call may be "narrower" than 'cl.i'.

I have found these examples.
identity(is.na(log()))
identity(is.na(log("a")))

Error message from the first contains full call. Error message from the second doesn't.

So, how about being "natural", not using 'withCallingHandlers' and 'tryCatch' in 'stopifnot'?

Another thing: currently,
stopifnot(exprs=TRUE)
fails.

A patch:
--- stop.R	2019-02-27 16:15:45.324167577 +0000
+++ stop_new.R	2019-02-27 16:22:15.936203541 +0000
@@ -1,7 +1,7 @@
 #  File src/library/base/R/stop.R
 #  Part of the R package, https://www.R-project.org
 #
-#  Copyright (C) 1995-2018 The R Core Team
+#  Copyright (C) 1995-2019 The R Core Team
 #
 #  This program is free software; you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
@@ -33,25 +33,27 @@
 
 stopifnot <- function(..., exprs, local = TRUE)
 {
+    n <- ...length()
     missE <- missing(exprs)
-    cl <-
 	if(missE) {  ## use '...' instead of exprs
-	    match.call(expand.dots=FALSE)$...
 	} else {
-	    if(...length())
+	    if(n)
 		stop("Must use 'exprs' or unnamed expressions, but not both")
 	    envir <- if (isTRUE(local)) parent.frame()
 		     else if(isFALSE(local)) .GlobalEnv
 		     else if (is.environment(local)) local
 		     else stop("'local' must be TRUE, FALSE or an environment")
 	    exprs <- substitute(exprs) # protect from evaluation
-	    E1 <- exprs[[1]]
+	    E1 <- if(is.call(exprs)) exprs[[1]]
+	    cl <-
 	    if(identical(quote(`{`), E1)) # { ... }
-		do.call(expression, as.list(exprs[-1]))
+		exprs[-1]
 	    else if(identical(quote(expression), E1))
 		eval(exprs, envir=envir)
 	    else
 		as.expression(exprs) # or fail ..
+	    if(!is.null(names(cl))) names(cl) <- NULL
+	    return(eval(as.call(c(sys.call()[[1]], as.list(cl))), envir=envir))
 	}
     Dparse <- function(call, cutoff = 60L) {
 	ch <- deparse(call, width.cutoff = cutoff)
@@ -62,14 +64,10 @@
     abbrev <- function(ae, n = 3L)
 	paste(c(head(ae, n), if(length(ae) > n) "...."), collapse="\n  ")
     ##
-    for (i in seq_along(cl)) {
-	cl.i <- cl[[i]]
-	## r <- eval(cl.i, ..)   # with correct warn/err messages:
-	r <- withCallingHandlers(
-		tryCatch(if(missE) ...elt(i) else eval(cl.i, envir=envir),
-			 error = function(e) { e$call <- cl.i; stop(e) }),
-		warning = function(w) { w$call <- cl.i; w })
+    for (i in seq_len(n)) {
+	r <- ...elt(i)
 	if (!(is.logical(r) && !anyNA(r) && all(r))) {
+	    cl.i <- match.call(expand.dots=FALSE)$...[[i]]
 	    msg <- ## special case for decently written 'all.equal(*)':
 		if(is.call(cl.i) && identical(cl.i[[1]], quote(all.equal)) &&
 		   (is.null(ni <- names(cl.i)) || length(cl.i) == 3L ||
@@ -84,7 +82,11 @@
 				     "%s are not all TRUE"),
 			    Dparse(cl.i))
 
-	    stop(simpleError(msg, call = sys.call(-1)))
+	    p <- sys.parent()
+	    if(p && identical(sys.function(p), stopifnot) &&
+	       !eval(expression(missE), p)) # originally stopifnot(exprs=*)
+		p <- sys.parent(2)
+	    stop(simpleError(msg, call = if(p) sys.call(p)))
 	}
     }
     invisible()

--------------------------------------------
On Wed, 27/2/19, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] stopifnot

 Cc: r-devel at r-project.org
 Date: Wednesday, 27 February, 2019, 5:36 PM

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>? ? on Sun, 24 Feb 2019 14:22:48 +0000 writes:

? ? >> From https://github.com/HenrikBengtsson/Wishlist-for-R/issues/70 :
? ? > ... and follow up note from 2018-03-15: Ouch... in R-devel, stopifnot() has become yet 4-5 times slower;

? ? > ...
? ? > which is due to a complete rewrite using tryCatch() and withCallingHandlers().


? ? >> From https://stat.ethz.ch/pipermail/r-devel/2017-May/074256.html , it seems that 'tryCatch' was used to avoid the following example from giving error message with 'eval' call and 'withCallingHandlers' was meant to handle similar case for warning.
? ? > tst <- function(y) { stopifnot(is.numeric(y)); y+ 1 }
? ? > try(tst())

? ? > However,
? ? > withCallingHandlers(<something>,
? ? > warning = function(w) { w$call <- cl.i; w })
? ? > actally has no effect. In current code of function 'stopifnot', 'eval' is used only in handling stopifnot(exprs=) . The warning message from
? ? > stopifnot(exprs={warning()})
? ? > has 'eval' call:
? ? > In eval(cl.i, envir = envir) : 

? ? > This may work.
? ? > withCallingHandlers(<something>,
? ? > warning = function(w) {
? ? > w$call <- cl.i; warning(w); invokeRestart("muffleWarning") })


? ? > Current documentation says:
? ? > Since R version 3.5.0, expressions are evaluated sequentially, and hence evaluation stops as soon as there is a "non-TRUE", asnindicated by the above conceptual equivalence statement. Further, when such an expression signals an error or warning, its conditionCall() no longer contains the full stopifnot call, but just the erroneous expression.

? ? > I assume that "no longer contains ..." is supposed to be the effect of the use of 'withCallingHandlers' and 'tryCatch' in 'stopifnot'.

? ? > Actually, "contains the full stopifnot call" is not always the case in R before version 3.5.0. Normally, the call is the "innermost context".

Thank you Suharto, for thinking about these issues and being
constructive, trying to improve the current state.

Unfortunately, I do not quite understand what you are trying to
say here.

The main somewhat recent changes to stopifnot() have been (in
inverse time ordering)

1) Do what the documentation always promised, namely eval() the
? expressions one by one, and stop evaluation as soon as one of
? them is not all(.) TRUE.
? For that reason, the previously used idiom? 'list(...)'
? is a no go, as "of course", it evaluates all the expressions in '...'

2) Try to ensure that warning() and stop()/error messages are
? shown the same {as closely as feasible}? to how they are
? shown outside of stopifnot(.)
? ? ? ? ? ? ==> partly the topic of this e-mail.

3) [2.5 years ago:] stopifnot() became smart about all.equal(.) expressions,
? showing the all.equal() string if it was not TRUE:
? In older R versions (<= 3.3.x ?), we had

? ? ? > stopifnot(all.equal(pi, 3.1415))
? ? Error: all.equal(pi, 3.1415) is not TRUE

? where as in R (>= 3.4.0 at least):

? ? ? > stopifnot(all.equal(pi, 3.1415)) 
? ? ? Error: pi and 3.1415 are not equal:
? ? Mean relative difference: 2.949255e-05


One example of what I meant with the above documentation ("no
longer contains")? is the following:

In R 3.5.x, 

? > lf <- list(fm = y ~ f(x), osf = ~ sin(x))
? > stopifnot(identical(deparse(lf), deparse(lf, control="all")))
? Warning message:
? In deparse(lf, control = "all") : deparse may be incomplete
? > 

If I change the calling handler to use the
invokeRestart("muffleWarning") which I understand you are
proposing, then the message becomes

? Warning message:
? In identical(deparse(lf, control = "all"), deparse(lf)) :
? ? deparse may be incomplete

which is less useful as I can no longer see directly which of
the deparse() produced the warning.

? ? > Example:
? ? > stopifnot((1:2) + (1:3) > 0)
? ? > Warning message:
? ? > In (1:2) + (1:3) :
? ? >?? longer object length is not a multiple of shorter object length

Which is the good answer
(whereas also showing "> 0" in the warning is slightly off).

Again, if I'd use the? ..muffleWarning.. code instead, the above
would change to the worse

? ? Warning message:
? ? In (1:2) + (1:3) > 0 :
? ? ? longer object length is not a multiple of shorter object length

which "wrongly includes the '> 0'.
So I guess I really don't understand what you are proposing, or
would like to change? ...


? ? > Example that gives error:
? ? > stopifnot(is.na(log("a")))
? ? > R 3.5.0:
? ? > R 3.3.2:

That's a good one: we want the error message *not to* mention
is.na(.) but just 'log': i.e.,

We'd like? [ R versions <= 3.4.4 ] :

> stopifnot(is.na(log("a")))
Error in log("a") : non-numeric argument to mathematical function

as opposed to [ R version >= 3.5.0 ] :

> stopifnot(is.na(log("a")))
Error in is.na(log("a")) : non-numeric argument to mathematical function

-----------------------------------------

Again, I'm sure I partly failed to understand what you said in
your e-mail and apologize for that.

Of course, I'm happy and glad to discuss improvements to
stopifnot() which improve speed (while retaining important
current functionality)? or also just improve current
functionality
-- e.g. get the "better" error message in the stopifnot(is.na(log("a")))

? example.


High regards,
Martin Maechler


From kmbe||56 @end|ng |rom gm@||@com  Thu Feb 28 06:10:40 2019
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Thu, 28 Feb 2019 18:10:40 +1300
Subject: [Rd] Problem with compiling OpenBLAS to work with R
In-Reply-To: <CACxE24kZSEVgfah=fGXqx0jzrGoc6RBwUSgBWTMgoyi4q0z84A@mail.gmail.com>
References: <CACxE24kZSEVgfah=fGXqx0jzrGoc6RBwUSgBWTMgoyi4q0z84A@mail.gmail.com>
Message-ID: <CAPekMCkox-bmcVjZbn2uNE5AipWkbdVg7-C=QddEhDhNUU830w@mail.gmail.com>

This person has had apparent success - you could follow what they did or
just download their product (with appropriate caution downloading a random
.exe).

https://github.com/thequackdaddy/R-OpenBLAS

On Thu, Feb 28, 2019 at 6:28 AM Erin Hodgess <erinm.hodgess at gmail.com>
wrote:

> Hello!
>
> I'm not sure if this is the right place to post this, so apologies
> in advance if I'm not in the right list.
>
> I downloaded the OpenBLAS and am following Avraham Adler's great
> instructions.  However, when I run make, things go well to a certain point,
> and then go bad:
>
> make
> [snip]
>
> touch cygopenblas_haswellp-r0.3.5.a
> make -j 1 -C test all
> make[1]: Entering directory
> '/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
> gfortran -O2 -Wall -frecursive -m64 -mavx2   -o sblat1 sblat1.o
> ../cygopenblas_haswellp-r0.3.5.a  -L/usr/lib/gcc/x86_64-pc-msys/7.3.0
> -L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib/../lib
> -L/usr/lib/../lib
> -L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib
> -L/usr/lib/w32api  -lmsys-2.0
> D:/msys64/usr/lib/../lib/libpthread.a(t-d001088.o):fake:(.text+0x2):
> undefined reference to `__imp_pthread_mutex_destroy'
> D:/msys64/usr/lib/../lib/libpthread.a(t-d001090.o):fake:(.text+0x2):
> undefined reference to `__imp_pthread_mutex_init'
> D:/msys64/usr/lib/../lib/libpthread.a(t-d001091.o):fake:(.text+0x2):
> undefined reference to `__imp_pthread_mutex_lock'
> D:/msys64/usr/lib/../lib/libpthread.a(t-d001094.o):fake:(.text+0x2):
> undefined reference to `__imp_pthread_mutex_trylock'
> D:/msys64/usr/lib/../lib/libpthread.a(t-d001095.o):fake:(.text+0x2):
> undefined reference to `__imp_pthread_mutex_unlock'
> collect2.exe: error: ld returned 1 exit status
> make[1]: *** [Makefile:134: sblat1] Error 1
> make[1]: Leaving directory
> '/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
> make: *** [Makefile:124: tests] Error 2
>
>
> I think it has something to do with the threads/pthreads but am not sure
> how to fix it.  Any suggestions much appreciated.
>
> Thanks,
> Sincerely,
> Erin
>
> Erin Hodgess, PhD
> mailto: erinm.hodgess at gmail.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Thu Feb 28 06:22:21 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Thu, 28 Feb 2019 00:22:21 -0500
Subject: [Rd] Problem with compiling OpenBLAS to work with R
In-Reply-To: <CAPekMCkox-bmcVjZbn2uNE5AipWkbdVg7-C=QddEhDhNUU830w@mail.gmail.com>
References: <CACxE24kZSEVgfah=fGXqx0jzrGoc6RBwUSgBWTMgoyi4q0z84A@mail.gmail.com>
 <CAPekMCkox-bmcVjZbn2uNE5AipWkbdVg7-C=QddEhDhNUU830w@mail.gmail.com>
Message-ID: <CAL6gwn+hEg8BJBFOuksEQyvQXknzdFpTpHmTZ080wrAeoWA-Hw@mail.gmail.com>

I believe that repo just follows the directions on my blog. Without seeing
Dr. Hodges?s code, my initial concern is the many references to Cygwin. My
method specifically does not use Cygwin but MSYS2 and Mingw64/Rtools35.
That will likely change to solely Rtools40 once R3.6 is released due to the
Msys system being built in to it.

There may be some library conflicts between Cygwin and msys2/mingw64. If
possible, my suggestion would be uninstall everything and then just install
msys2 (and add in make after you to the first msys update) and rtools35.
Then there should be no conflicting libraries.

Thanks,

Avi

On Thu, Feb 28, 2019 at 12:11 AM Kenny Bell <kmbell56 at gmail.com> wrote:

> This person has had apparent success - you could follow what they did or
> just download their product (with appropriate caution downloading a random
> .exe).
>
> https://github.com/thequackdaddy/R-OpenBLAS
>
> On Thu, Feb 28, 2019 at 6:28 AM Erin Hodgess <erinm.hodgess at gmail.com>
> wrote:
>
> > Hello!
> >
> > I'm not sure if this is the right place to post this, so apologies
> > in advance if I'm not in the right list.
> >
> > I downloaded the OpenBLAS and am following Avraham Adler's great
> > instructions.  However, when I run make, things go well to a certain
> point,
> > and then go bad:
> >
> > make
> > [snip]
> >
> > touch cygopenblas_haswellp-r0.3.5.a
> > make -j 1 -C test all
> > make[1]: Entering directory
> > '/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
> > gfortran -O2 -Wall -frecursive -m64 -mavx2   -o sblat1 sblat1.o
> > ../cygopenblas_haswellp-r0.3.5.a  -L/usr/lib/gcc/x86_64-pc-msys/7.3.0
> > -L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib/../lib
> > -L/usr/lib/../lib
> > -L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib
> > -L/usr/lib/w32api  -lmsys-2.0
> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001088.o):fake:(.text+0x2):
> > undefined reference to `__imp_pthread_mutex_destroy'
> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001090.o):fake:(.text+0x2):
> > undefined reference to `__imp_pthread_mutex_init'
> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001091.o):fake:(.text+0x2):
> > undefined reference to `__imp_pthread_mutex_lock'
> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001094.o):fake:(.text+0x2):
> > undefined reference to `__imp_pthread_mutex_trylock'
> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001095.o):fake:(.text+0x2):
> > undefined reference to `__imp_pthread_mutex_unlock'
> > collect2.exe: error: ld returned 1 exit status
> > make[1]: *** [Makefile:134: sblat1] Error 1
> > make[1]: Leaving directory
> > '/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
> > make: *** [Makefile:124: tests] Error 2
> >
> >
> > I think it has something to do with the threads/pthreads but am not sure
> > how to fix it.  Any suggestions much appreciated.
> >
> > Thanks,
> > Sincerely,
> > Erin
> >
> > Erin Hodgess, PhD
> > mailto: erinm.hodgess at gmail.com
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Thu Feb 28 10:06:20 2019
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Thu, 28 Feb 2019 10:06:20 +0100
Subject: [Rd] Improved Data Aggregation and Summary Statistics in R
In-Reply-To: <d17f7549-38bc-1c91-addc-6874a414fb16@gmail.com>
References: <CAOsNuxA4PsWg9XkoADO1vcUXQVSmN=XzzBkV869=6r4Mqtbzmg@mail.gmail.com>
 <d17f7549-38bc-1c91-addc-6874a414fb16@gmail.com>
Message-ID: <CAOsNuxAkz2=WZVM0ibwfxxiAU79mJBco1Tsps5A1h_uDs_p7Bw@mail.gmail.com>

Thanks to all who gave feedback so far, there is now a version of the
package on Github, it can be installed by

remotes::install_github("SebKrantz/collapse")

further feedback is still very welcome!


On Wed, 27 Feb 2019 at 12:48, Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 26/02/2019 8:25 a.m., Sebastian Martin Krantz wrote:
> > Dear Developers,
> >
> > Having spent time developing and thinking about how data aggregation and
> > summary statistics can be enhanced in R, I would like to present my
> > ideas/efforts in the form of two commands:
> >
> > The first, which for now I called 'collap', is an upgrade of aggregate
> that
> > accommodates and extends the functionality of aggregate in various
> > respects, most importantly to work with multilevel and multi-type data,
> > multiple function calls, highly customized aggregation tasks, a much
> > greater flexibility in the passing of inputs and tidy output.
> >
> > The second function, 'qsu', is an advanced and flexible summary command
> for
> > cross-sectional and multilevel (panel) data (i.e. it can provide overall,
> > between and within entities statistics, and allows for grouping, custom
> > functions and transformations). It also provides a quick method to
> compute
> > and output within-transformed data.
> >
> > Both commands are efficiently built from core R, but provide for optional
> > integration with data.table, which renders them extremely fast on large
> > datasets. An explanation of the syntax, a demonstration and benchmark
> > results are provided in the attached vignette.
> >
> > Since both commands accommodate existing functionality while adding
> > significant basic functionality, I though that their addition to the
> stats
> > package would be a worthwhile consideration. I am happy for your
> feedback.
>
> Generally the R Core group is reluctant to incorporate new functions
> into the base packages.  Each function that is added adds to their work,
> and they already have too much to do.  (I am no longer a member of R
> Core, but I don't think things have changed since I retired.)
>
> It is much easier for them if volunteers publish functions themselves,
> via contributed packages.
>
> Nowadays Github provides a very convenient platform on which you can
> develop a package containing your functions.  If other users find bugs
> or have suggested improvements, it's very easy for them to send those to
> you, and you can make the fixes available immediately.  Once you are
> satisfied that it is stable, you can submit it to CRAN, and anyone using
> R can easily install it.
>
> If you find the prospect of writing a package daunting, you shouldn't.
> It's actually quite easy, especially if you are using RStudio or ESS (or
> some other helpful front-end.)  Hadley Wickham's book
> <http://r-pkgs.had.co.nz/> is a pretty accessible description of a
> development strategy.  (It's not the only strategy, but lots of people
> use it.)
>
> Duncan Murdoch
>

	[[alternative HTML version deleted]]


From er|nm@hodge@@ @end|ng |rom gm@||@com  Thu Feb 28 11:23:35 2019
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Thu, 28 Feb 2019 03:23:35 -0700
Subject: [Rd] Problem with compiling OpenBLAS to work with R
In-Reply-To: <CAL6gwn+hEg8BJBFOuksEQyvQXknzdFpTpHmTZ080wrAeoWA-Hw@mail.gmail.com>
References: <CACxE24kZSEVgfah=fGXqx0jzrGoc6RBwUSgBWTMgoyi4q0z84A@mail.gmail.com>
 <CAPekMCkox-bmcVjZbn2uNE5AipWkbdVg7-C=QddEhDhNUU830w@mail.gmail.com>
 <CAL6gwn+hEg8BJBFOuksEQyvQXknzdFpTpHmTZ080wrAeoWA-Hw@mail.gmail.com>
Message-ID: <CACxE24kqihn5ZJuznJPFOMNTN4Kh0_+WqasUR9YwRRmTAwGs4g@mail.gmail.com>

The Cygwin is the problem.

I am redoing and will let you know how it goes.

Thanks for your help.

Sincerely,
Erin

On Wed, Feb 27, 2019 at 10:22 PM Avraham Adler <avraham.adler at gmail.com>
wrote:

> I believe that repo just follows the directions on my blog. Without seeing
> Dr. Hodges?s code, my initial concern is the many references to Cygwin. My
> method specifically does not use Cygwin but MSYS2 and Mingw64/Rtools35.
> That will likely change to solely Rtools40 once R3.6 is released due to the
> Msys system being built in to it.
>
> There may be some library conflicts between Cygwin and msys2/mingw64. If
> possible, my suggestion would be uninstall everything and then just install
> msys2 (and add in make after you to the first msys update) and rtools35.
> Then there should be no conflicting libraries.
>
> Thanks,
>
> Avi
>
> On Thu, Feb 28, 2019 at 12:11 AM Kenny Bell <kmbell56 at gmail.com> wrote:
>
>> This person has had apparent success - you could follow what they did or
>> just download their product (with appropriate caution downloading a random
>> .exe).
>>
>> https://github.com/thequackdaddy/R-OpenBLAS
>>
>> On Thu, Feb 28, 2019 at 6:28 AM Erin Hodgess <erinm.hodgess at gmail.com>
>> wrote:
>>
>> > Hello!
>> >
>> > I'm not sure if this is the right place to post this, so apologies
>> > in advance if I'm not in the right list.
>> >
>> > I downloaded the OpenBLAS and am following Avraham Adler's great
>> > instructions.  However, when I run make, things go well to a certain
>> point,
>> > and then go bad:
>> >
>> > make
>> > [snip]
>> >
>> > touch cygopenblas_haswellp-r0.3.5.a
>> > make -j 1 -C test all
>> > make[1]: Entering directory
>> > '/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
>> > gfortran -O2 -Wall -frecursive -m64 -mavx2   -o sblat1 sblat1.o
>> > ../cygopenblas_haswellp-r0.3.5.a  -L/usr/lib/gcc/x86_64-pc-msys/7.3.0
>> >
>> -L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib/../lib
>> > -L/usr/lib/../lib
>> > -L/usr/lib/gcc/x86_64-pc-msys/7.3.0/../../../../x86_64-pc-msys/lib
>> > -L/usr/lib/w32api  -lmsys-2.0
>> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001088.o):fake:(.text+0x2):
>> > undefined reference to `__imp_pthread_mutex_destroy'
>> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001090.o):fake:(.text+0x2):
>> > undefined reference to `__imp_pthread_mutex_init'
>> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001091.o):fake:(.text+0x2):
>> > undefined reference to `__imp_pthread_mutex_lock'
>> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001094.o):fake:(.text+0x2):
>> > undefined reference to `__imp_pthread_mutex_trylock'
>> > D:/msys64/usr/lib/../lib/libpthread.a(t-d001095.o):fake:(.text+0x2):
>> > undefined reference to `__imp_pthread_mutex_unlock'
>> > collect2.exe: error: ld returned 1 exit status
>> > make[1]: *** [Makefile:134: sblat1] Error 1
>> > make[1]: Leaving directory
>> > '/home/erinm/OPB_HOME/xianyi-OpenBLAS-eebc189/test'
>> > make: *** [Makefile:124: tests] Error 2
>> >
>> >
>> > I think it has something to do with the threads/pthreads but am not sure
>> > how to fix it.  Any suggestions much appreciated.
>> >
>> > Thanks,
>> > Sincerely,
>> > Erin
>> >
>> > Erin Hodgess, PhD
>> > mailto: erinm.hodgess at gmail.com
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> --
> Sent from Gmail Mobile
>
-- 
Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com

	[[alternative HTML version deleted]]


From m|che||@ng @end|ng |rom gm@||@com  Thu Feb 28 13:23:13 2019
From: m|che||@ng @end|ng |rom gm@||@com (Michel Lang)
Date: Thu, 28 Feb 2019 13:23:13 +0100
Subject: [Rd] Exit status of Rscript
Message-ID: <CAF6EP_5U1UEG+q36mcmWOGj8-fHb7foEQ2-+Wv0+wOY252Pkow@mail.gmail.com>

Current R release (3.5.2) and devel return a 0 exit status on error,
while prior versions returned a non-zero exit status. On Linux and
MacOs, the following line returns TRUE for R-3.5.2 and R-devel, and
FALSE for R-3.5.1 and R-3.5.0:

system2("Rscript", c("-e", shQuote("stop('foo')"))) == 0

I didn't find this in the NEWS, so I believe this is a bug.

Best,
Michel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Feb 28 13:29:58 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 28 Feb 2019 12:29:58 +0000
Subject: [Rd] Exit status of Rscript
In-Reply-To: <CAF6EP_5U1UEG+q36mcmWOGj8-fHb7foEQ2-+Wv0+wOY252Pkow@mail.gmail.com>
References: <CAF6EP_5U1UEG+q36mcmWOGj8-fHb7foEQ2-+Wv0+wOY252Pkow@mail.gmail.com>
Message-ID: <067a000f-5cbd-d570-d9c8-9f7738d1791f@sapo.pt>

Hello,

I cannot reproduce this, R 3.5.2 on Ubuntu 18.04 LTS. sessionInfo() below.

system2("Rscript", c("-e", shQuote("stop('foo')"))) == 0
#Erro: foo
#Execu??o interrompida
#[1] FALSE

r <- system2("Rscript", c("-e", shQuote("stop('foo')")))
#Erro: foo
#Execu??o interrompida

print(r)
#[1] 1


sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.1 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods
[7] base

loaded via a namespace (and not attached):
[1] compiler_3.5.2 tools_3.5.2    yaml_2.2.0


Hope this helps,

Rui Barradas

?s 12:23 de 28/02/2019, Michel Lang escreveu:
> Current R release (3.5.2) and devel return a 0 exit status on error,
> while prior versions returned a non-zero exit status. On Linux and
> MacOs, the following line returns TRUE for R-3.5.2 and R-devel, and
> FALSE for R-3.5.1 and R-3.5.0:
> 
> system2("Rscript", c("-e", shQuote("stop('foo')"))) == 0
> 
> I didn't find this in the NEWS, so I believe this is a bug.
> 
> Best,
> Michel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 28 14:53:44 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 28 Feb 2019 14:53:44 +0100
Subject: [Rd] 
 Bug: time complexity of substring is quadratic as string size
 and number of substrings increases
In-Reply-To: <290ca417-27ce-dd84-277e-9bf5f6d45782@gmail.com>
References: <CALK03d1s36OCLD2Q=7frbL32jzUzhsEsLMHyH9tEqRB+dnrzGw@mail.gmail.com>
 <CALK03d1oR9u_WraZFAhRTrnWHMfYgJ0APgitGnp4ywok1kBOcg@mail.gmail.com>
 <290ca417-27ce-dd84-277e-9bf5f6d45782@gmail.com>
Message-ID: <f33b3cd2-9b2c-1014-1661-445a75c4f516@gmail.com>

An optimized version of substring/substr is now in R-devel (76172).

Best,
Tomas

On 2/22/19 8:16 PM, Tomas Kalibera wrote:
> On 2/20/19 7:55 PM, Toby Hocking wrote:
>> Update: I have observed that stringi::stri_sub is linear time 
>> complexity,
>> and it computes the same thing as base::substring. figure
>> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png 
>>
>> source:
>> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R 
>>
>>
>> To me this is a clear indication of a bug in substring, but again it 
>> would
>> be nice to have some feedback/confirmation before posting on bugzilla.
>>
>> Also this suggests a fix -- just need to copy whatever 
>> stringi::stri_sub is
>> doing.
>
> Thanks for the report, I am working on a patch that will address this.
>
> I confirm there is a lot of potential for speedup. On my system,
>
> 'N=200000; x <- substring(paste(rep("A", N), collapse=""), 1:N, 1:N)'
>
> spends 96% time in checking if the string is ascii and 3% in strlen(); 
> if we take advantage of the pre-computed value in the ASCII bit, the 
> speed up is about 40x. Of course, with micro-benchmarks, any 
> performance limitation can be arbitrarily inflated, users cannot 
> expect to see these or any close speedups in applications as a result 
> of the patch. The patch is going to do other easy optimizations that 
> will not complicate the code, including avoiding the strlen() call 
> (taking advantage of pre-computed length of R character object).
>
> Best
> Tomas
>
>>
>>
>>
>> On Wed, Feb 20, 2019 at 11:16 AM Toby Hocking <tdhock5 at gmail.com> wrote:
>>
>>> Hi all, (and especially hi to Tomas Kalibera who accepted my patch sent
>>> yesterday)
>>>
>>> I believe that I have found another bug, this time in the substring
>>> function. The use case that I am concerned with is when there is a 
>>> single
>>> (character scalar) text/subject, and many substrings to extract. For 
>>> example
>>>
>>> substring("AAAA", 1:4, 1:4)
>>>
>>> or more generally,
>>>
>>> N=1000
>>> substring(paste(rep("A", N), collapse=""), 1:N, 1:N)
>>>
>>> The problem I observe is that the time complexity is quadratic in N, as
>>> shown on this figure
>>> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.png 
>>>
>>> source:
>>> https://github.com/tdhock/namedCapture-article/blob/master/figure-substring-bug.R 
>>>
>>>
>>> I expected the time complexity to be linear in N.
>>>
>>> The example above may seem contrived/trivial, but it is indeed 
>>> relevant to
>>> a number of packages (rex, rematch2, namedCapture) which provide 
>>> functions
>>> that use gregexpr and then substring to extract the text in the 
>>> captured
>>> sub-patterns. The figure
>>> https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.png 
>>>
>>> shows the issue: these packages have quadratic time complexity, whereas
>>> other packages (and the gregexpr function with perl=TRUE after 
>>> applying the
>>> patch discussed yesterday) have linear time complexity. I believe the
>>> problem is the substring function. Source for this figure:
>>> https://github.com/tdhock/namedCapture-article/blob/master/figure-trackDb-pkgs.R 
>>>
>>>
>>> I suspect that a fix can be accomplished by optimizing the 
>>> implementation
>>> of substring, for the special case when the text/subject is a single
>>> element (character scalar). Right now I notice that the substring R 
>>> code
>>> uses rep_len so that the text/subject which is passed to the C code 
>>> is a
>>> character vector with the same length as the number of substrings to
>>> extract. Maybe the C code is calling strlen for each of these 
>>> (identical)
>>> text/subject elements?
>>>
>>> Anyway, it would be useful to have some feedback to make sure this is
>>> indeed a bug before I post on bugzilla. (btw thanks Martin for 
>>> signing me
>>> up for an account)
>>>
>>> Toby
>>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Feb 28 15:36:19 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 28 Feb 2019 09:36:19 -0500
Subject: [Rd] Exit status of Rscript
In-Reply-To: <CAF6EP_5U1UEG+q36mcmWOGj8-fHb7foEQ2-+Wv0+wOY252Pkow@mail.gmail.com>
References: <CAF6EP_5U1UEG+q36mcmWOGj8-fHb7foEQ2-+Wv0+wOY252Pkow@mail.gmail.com>
Message-ID: <E2D7088D-5D23-41A3-AAA9-7A882FDA0965@R-project.org>

> system2("Rscript", c("-e", shQuote("stop('foo')"))) == 0
Error: foo
Execution halted
[1] FALSE
> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: OS X El Capitan 10.11.6

> system2("Rscript", c("-e", shQuote("stop('foo')"))) == 0
Error: foo
Execution halted
[1] FALSE
> sessionInfo()
R Under development (unstable) (2019-02-27 r76167)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: OS X El Capitan 10.11.6

You may also want to check that you run what you think you do in the shell:

$ Rscript -e 'print(R.version.string); stop("foo")'; echo $?
[1] "R Under development (unstable) (2019-02-27 r76167)"
Error: foo
Execution halted
1

$ Rscript -e 'print(R.version.string); stop("foo")'; echo $?
[1] "R version 3.5.2 (2018-12-20)"
Error: foo
Execution halted
1

$ Rscript -e 'print(R.version.string); stop("foo")'; echo $?
[1] "R version 3.4.4 Patched (2018-03-19 r75535)"
Error: foo
Execution halted
1


> On Feb 28, 2019, at 7:23 AM, Michel Lang <michellang at gmail.com> wrote:
> 
> Current R release (3.5.2) and devel return a 0 exit status on error,
> while prior versions returned a non-zero exit status. On Linux and
> MacOs, the following line returns TRUE for R-3.5.2 and R-devel, and
> FALSE for R-3.5.1 and R-3.5.0:
> 
> system2("Rscript", c("-e", shQuote("stop('foo')"))) == 0
> 
> I didn't find this in the NEWS, so I believe this is a bug.
> 
> Best,
> Michel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From morg@n@em@||box @end|ng |rom gm@||@com  Thu Feb 28 21:29:54 2019
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Thu, 28 Feb 2019 20:29:54 +0000
Subject: [Rd] Package inclusion in R core implementation
In-Reply-To: <CAL0QV_MRORtsqzXbbY69-v2CUEy8Nmd6gk3VJPBvSt=sa=v8uQ@mail.gmail.com>
References: <CAL0QV_MRORtsqzXbbY69-v2CUEy8Nmd6gk3VJPBvSt=sa=v8uQ@mail.gmail.com>
Message-ID: <CAL0QV_Pgbif3=Hf1sw-O7Fy685N9upyYPyUK7c7FhgUd6yLMjg@mail.gmail.com>

Hi,

It sometimes happens that some packages get included to R like for example
the parallel package.

I was wondering if there is a process to decide whether or not to include a
package in the core implementation of R?

For example, why not include the Rcpp package, which became for a lot of
user the main tool to extend R?

What is our view on the (not so well known) dotCall64 package which is an
interesting alternative for extending R?

Thank you
Best regards,
Morgan

	[[alternative HTML version deleted]]


