From dm|tr|@pop@venko @end|ng |rom gm@||@com  Fri Mar  1 10:17:34 2024
From: dm|tr|@pop@venko @end|ng |rom gm@||@com (Dmitri Popavenko)
Date: Fri, 1 Mar 2024 11:17:34 +0200
Subject: [Rd] capture "->"
Message-ID: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>

Hi everyone,

I am aware this is a parser issue, but is there any possibility to capture
the use of the inverse assignment operator into a formula?

Something like:

> foo <- function(x) substitute(x)

gives:

> foo(A -> B)
B <- A

I wonder if there is any possibility whatsoever to signal the use of ->
instead of <-

Thank you,
Dmitri

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar  1 10:30:37 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 1 Mar 2024 04:30:37 -0500
Subject: [Rd] capture "->"
In-Reply-To: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
Message-ID: <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>

On 01/03/2024 4:17 a.m., Dmitri Popavenko wrote:
> Hi everyone,
> 
> I am aware this is a parser issue, but is there any possibility to capture
> the use of the inverse assignment operator into a formula?
> 
> Something like:
> 
>> foo <- function(x) substitute(x)
> 
> gives:
> 
>> foo(A -> B)
> B <- A
> 
> I wonder if there is any possibility whatsoever to signal the use of ->
> instead of <-

If you parse it with srcrefs, you could look at the source.  The parser 
doesn't record whether it was A -> B or B <- A anywhere else.

Duncan Murdoch


From dm|tr|@pop@venko @end|ng |rom gm@||@com  Fri Mar  1 11:25:09 2024
From: dm|tr|@pop@venko @end|ng |rom gm@||@com (Dmitri Popavenko)
Date: Fri, 1 Mar 2024 12:25:09 +0200
Subject: [Rd] capture "->"
In-Reply-To: <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
Message-ID: <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>

Dear Duncan,

On Fri, Mar 1, 2024 at 11:30?AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> ...
> If you parse it with srcrefs, you could look at the source.  The parser
> doesn't record whether it was A -> B or B <- A anywhere else.
>

Thank you, this gets me closer but it still needs a little push:

> foo <- function(x) {
  x <- substitute(x)
  return(attr(x, "srcref")[[2]])
}

> foo(A -> B)
NULL

This seems to work, however:
> foo({A -> B})
A -> B

Is there a way to treat the formula as if it was enclosed between the curly
brackets?
Dmitri

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar  1 12:00:42 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 1 Mar 2024 06:00:42 -0500
Subject: [Rd] capture "->"
In-Reply-To: <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
Message-ID: <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>

On 01/03/2024 5:25 a.m., Dmitri Popavenko wrote:
> Dear?Duncan,
> 
> On Fri, Mar 1, 2024 at 11:30?AM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     ...
>     If you parse it with srcrefs, you could look at the source.? The parser
>     doesn't record whether it was A -> B or B <- A anywhere else.
> 
> 
> Thank you, this gets me closer but it still needs a little push:
> 
>  > foo <- function(x) {
>  ? x <- substitute(x)
>  ? return(attr(x, "srcref")[[2]])
> }
> 
>  > foo(A -> B)
> NULL
> 
> This seems to work, however:
>  > foo({A -> B})
> A -> B
> 
> Is there a way to treat the formula as if it was enclosed between the 
> curly brackets?
> Dmitri

I was thinking more of you doing something like

  parse(text = "A -> B", keep.source = TRUE)

I forget what the exact rules are for attaching srcrefs to arguments of 
functions, but I do remember they are a little strange, because not 
every possible argument can accept a srcref attribute.  For example, you 
can't attach one to NULL, or to a name.

Srcrefs are also fairly big and building them is slow, so I think we 
tried to limit them to where they were needed, we didn't try to attach 
them to every subexpression, just one per statement.  Each expression 
within {} is a separate statement, so we get srcrefs attached to the {. 
But in "foo(A -> B)" probably you only get one on the foo call.

In some circumstances you could get the srcref on that call by looking 
at sys.call().  But then things are complicated again, because R doesn't 
attach srcrefs to things typed at the console, only to things that are 
sourced from files or text strings (and parsed with keep.source=TRUE).

So I think you should probably require input from a string or a file, or 
not expect foo(A -> B) to work without some decoration.

Duncan Murdoch


From dm|tr|@pop@venko @end|ng |rom gm@||@com  Fri Mar  1 14:51:42 2024
From: dm|tr|@pop@venko @end|ng |rom gm@||@com (Dmitri Popavenko)
Date: Fri, 1 Mar 2024 15:51:42 +0200
Subject: [Rd] capture "->"
In-Reply-To: <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
Message-ID: <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>

On Fri, Mar 1, 2024 at 1:00?PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> ...
> I was thinking more of you doing something like
>
>   parse(text = "A -> B", keep.source = TRUE)
>
> I forget what the exact rules are for attaching srcrefs to arguments of
> functions, but I do remember they are a little strange, because not
> every possible argument can accept a srcref attribute.  For example, you
> can't attach one to NULL, or to a name.
>
> Srcrefs are also fairly big and building them is slow, so I think we
> tried to limit them to where they were needed, we didn't try to attach
> them to every subexpression, just one per statement.  Each expression
> within {} is a separate statement, so we get srcrefs attached to the {.
> But in "foo(A -> B)" probably you only get one on the foo call.
>
> In some circumstances you could get the srcref on that call by looking
> at sys.call().  But then things are complicated again, because R doesn't
> attach srcrefs to things typed at the console, only to things that are
> sourced from files or text strings (and parsed with keep.source=TRUE).
>
> So I think you should probably require input from a string or a file, or
> not expect foo(A -> B) to work without some decoration.
>

Indeed, the more challenging task is to identify "->" at the console
(from a script or a string, seems trivial now).

I would be willing to decorate as much as it takes to make this work, I am
just empty on more ideas how to persuade the parser.
Dmitri

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar  1 15:22:41 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 1 Mar 2024 09:22:41 -0500
Subject: [Rd] capture "->"
In-Reply-To: <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
Message-ID: <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>

On 01/03/2024 8:51 a.m., Dmitri Popavenko wrote:
> On Fri, Mar 1, 2024 at 1:00?PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     ...
>     I was thinking more of you doing something like
> 
>      ? parse(text = "A -> B", keep.source = TRUE)
> 
>     I forget what the exact rules are for attaching srcrefs to arguments of
>     functions, but I do remember they are a little strange, because not
>     every possible argument can accept a srcref attribute.? For example,
>     you
>     can't attach one to NULL, or to a name.
> 
>     Srcrefs are also fairly big and building them is slow, so I think we
>     tried to limit them to where they were needed, we didn't try to attach
>     them to every subexpression, just one per statement.? Each expression
>     within {} is a separate statement, so we get srcrefs attached to the {.
>     But in "foo(A -> B)" probably you only get one on the foo call.
> 
>     In some circumstances you could get the srcref on that call by looking
>     at sys.call().? But then things are complicated again, because R
>     doesn't
>     attach srcrefs to things typed at the console, only to things that are
>     sourced from files or text strings (and parsed with keep.source=TRUE).
> 
>     So I think you should probably require input from a string or a
>     file, or
>     not expect foo(A -> B) to work without some decoration.
> 
> 
> Indeed, the more challenging task is to identify "->" at the console
> (from a script or a string, seems trivial now).
> 
> I would be willing to decorate as much as it takes to make this work, I 
> am just empty on more ideas how to persuade the parser.

By "decorate", I meant putting it in quotes and parsing it using 
parse(text=...), or putting it in braces as you found.  I think parsing 
a string is most likely to be reliable because someone might turn off 
`keep.source` and then the braced approach would fail.  But you have 
control over it when you call parse() yourself.

Duncan Murdoch


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Mar  1 15:30:30 2024
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Fri, 1 Mar 2024 09:30:30 -0500
Subject: [Rd] capture "->"
In-Reply-To: <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
Message-ID: <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>

I am wondering what the specific need for this is or is it just an exercise?

Where does it matter if a chunk of code assigns using "<-" beforehand or "->" after hand, or for that matter assigns indirectly without a symbol?

And whatever you come up with, will it also support the global assignment of "->>" as compared to ""<<-" too?

I do wonder if you can re-declare the assignment operators or would that mess up the parser.

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Duncan Murdoch
Sent: Friday, March 1, 2024 9:23 AM
To: Dmitri Popavenko <dmitri.popavenko at gmail.com>
Cc: r-devel <r-devel at r-project.org>
Subject: Re: [Rd] capture "->"

On 01/03/2024 8:51 a.m., Dmitri Popavenko wrote:
> On Fri, Mar 1, 2024 at 1:00?PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     ...
>     I was thinking more of you doing something like
> 
>        parse(text = "A -> B", keep.source = TRUE)
> 
>     I forget what the exact rules are for attaching srcrefs to arguments of
>     functions, but I do remember they are a little strange, because not
>     every possible argument can accept a srcref attribute.  For example,
>     you
>     can't attach one to NULL, or to a name.
> 
>     Srcrefs are also fairly big and building them is slow, so I think we
>     tried to limit them to where they were needed, we didn't try to attach
>     them to every subexpression, just one per statement.  Each expression
>     within {} is a separate statement, so we get srcrefs attached to the {.
>     But in "foo(A -> B)" probably you only get one on the foo call.
> 
>     In some circumstances you could get the srcref on that call by looking
>     at sys.call().  But then things are complicated again, because R
>     doesn't
>     attach srcrefs to things typed at the console, only to things that are
>     sourced from files or text strings (and parsed with keep.source=TRUE).
> 
>     So I think you should probably require input from a string or a
>     file, or
>     not expect foo(A -> B) to work without some decoration.
> 
> 
> Indeed, the more challenging task is to identify "->" at the console
> (from a script or a string, seems trivial now).
> 
> I would be willing to decorate as much as it takes to make this work, I 
> am just empty on more ideas how to persuade the parser.

By "decorate", I meant putting it in quotes and parsing it using 
parse(text=...), or putting it in braces as you found.  I think parsing 
a string is most likely to be reliable because someone might turn off 
`keep.source` and then the braced approach would fail.  But you have 
control over it when you call parse() yourself.

Duncan Murdoch

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From du@@@@dr|@n @end|ng |rom gm@||@com  Fri Mar  1 17:37:31 2024
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Fri, 1 Mar 2024 18:37:31 +0200
Subject: [Rd] capture "->"
In-Reply-To: <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
 <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
Message-ID: <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>

I would also be interested in that.
For me, this is interesting for my QCA package, over which Dmitri and I
have exchanged a couple of messages.
The "<-" operator is used to denote necessity, and the "->" is used for
sufficiency.

Users often make use of Boolean expressions such as A*B + C -> Y
(to calculate if the expression A*B + C is sufficient for the outcome Y)

The parser inverses it into Y <- A*B + C, as if the outcome Y is necessary
for the expression A*B + C, which changes the nature of the expression.

Quoting such expressions is already possible and it works as expected. We
were trying to avoid the quotes, if at all possible, to simplify the
command use in the manuals.

Best wishes,
Adrian

On Fri, Mar 1, 2024 at 4:33?PM <avi.e.gross at gmail.com> wrote:

> I am wondering what the specific need for this is or is it just an
> exercise?
>
> Where does it matter if a chunk of code assigns using "<-" beforehand or
> "->" after hand, or for that matter assigns indirectly without a symbol?
>
> And whatever you come up with, will it also support the global assignment
> of "->>" as compared to ""<<-" too?
>
> I do wonder if you can re-declare the assignment operators or would that
> mess up the parser.
>
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Duncan Murdoch
> Sent: Friday, March 1, 2024 9:23 AM
> To: Dmitri Popavenko <dmitri.popavenko at gmail.com>
> Cc: r-devel <r-devel at r-project.org>
> Subject: Re: [Rd] capture "->"
>
> On 01/03/2024 8:51 a.m., Dmitri Popavenko wrote:
> > On Fri, Mar 1, 2024 at 1:00?PM Duncan Murdoch <murdoch.duncan at gmail.com
> > <mailto:murdoch.duncan at gmail.com>> wrote:
> >
> >     ...
> >     I was thinking more of you doing something like
> >
> >        parse(text = "A -> B", keep.source = TRUE)
> >
> >     I forget what the exact rules are for attaching srcrefs to arguments
> of
> >     functions, but I do remember they are a little strange, because not
> >     every possible argument can accept a srcref attribute.  For example,
> >     you
> >     can't attach one to NULL, or to a name.
> >
> >     Srcrefs are also fairly big and building them is slow, so I think we
> >     tried to limit them to where they were needed, we didn't try to
> attach
> >     them to every subexpression, just one per statement.  Each expression
> >     within {} is a separate statement, so we get srcrefs attached to the
> {.
> >     But in "foo(A -> B)" probably you only get one on the foo call.
> >
> >     In some circumstances you could get the srcref on that call by
> looking
> >     at sys.call().  But then things are complicated again, because R
> >     doesn't
> >     attach srcrefs to things typed at the console, only to things that
> are
> >     sourced from files or text strings (and parsed with
> keep.source=TRUE).
> >
> >     So I think you should probably require input from a string or a
> >     file, or
> >     not expect foo(A -> B) to work without some decoration.
> >
> >
> > Indeed, the more challenging task is to identify "->" at the console
> > (from a script or a string, seems trivial now).
> >
> > I would be willing to decorate as much as it takes to make this work, I
> > am just empty on more ideas how to persuade the parser.
>
> By "decorate", I meant putting it in quotes and parsing it using
> parse(text=...), or putting it in braces as you found.  I think parsing
> a string is most likely to be reliable because someone might turn off
> `keep.source` and then the braced approach would fail.  But you have
> control over it when you call parse() yourself.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Mar  1 22:30:37 2024
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Fri, 1 Mar 2024 16:30:37 -0500
Subject: [Rd] capture "->"
In-Reply-To: <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
 <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
 <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>
Message-ID: <003d01da6c1f$b4326b00$1c974100$@gmail.com>

Adrian,
 
That is indeed a specialized need albeit not necessarily one that cannot be done by requiring an alternate way of typing a formula that avoids being something the parser sees as needed to do at that level.
 
In this case, my other questions become moot as I assume the global assignment operator and somethings like assign(?xyz?, 5) will not be in the way.
 
What I was wondering about is what happens if you temporarily disable the meaning of the assignment operator <- and turn it back on after.
 
In the following code, for no reason, I redefine + to mean ? and then undo it:
 
 
> temp <- `+`
> `+` <- `-`
> 5 + 3
[1] 2
> `+` <- temp
> 5 + 3
[1] 8
 
I have no idea if a similar technique could save and later restore the meaning of <- and replace it with something appropriate so that an expression using it is not evaluated the same way and leaves it alone long enough ?
 
Of course, even if this works, it could cause side effects if anything else is done between changes that invokes it (maybe not likely) or the change back is not done perhaps due to an error interruption.
 
 
Avi
 
From: Adrian Du?a <dusa.adrian at gmail.com> 
Sent: Friday, March 1, 2024 11:38 AM
To: avi.e.gross at gmail.com
Cc: r-devel <r-devel at r-project.org>; Dmitri Popavenko <dmitri.popavenko at gmail.com>
Subject: Re: [Rd] capture "->"
 
I would also be interested in that.
For me, this is interesting for my QCA package, over which Dmitri and I have exchanged a couple of messages.
The "<-" operator is used to denote necessity, and the "->" is used for sufficiency.
 
Users often make use of Boolean expressions such as A*B + C -> Y
(to calculate if the expression A*B + C is sufficient for the outcome Y)
 
The parser inverses it into Y <- A*B + C, as if the outcome Y is necessary for the expression A*B + C, which changes the nature of the expression.
 
Quoting such expressions is already possible and it works as expected. We were trying to avoid the quotes, if at all possible, to simplify the command use in the manuals.
 
Best wishes,
Adrian
 
On Fri, Mar 1, 2024 at 4:33?PM <avi.e.gross at gmail.com <mailto:avi.e.gross at gmail.com> > wrote:
I am wondering what the specific need for this is or is it just an exercise?

Where does it matter if a chunk of code assigns using "<-" beforehand or "->" after hand, or for that matter assigns indirectly without a symbol?

And whatever you come up with, will it also support the global assignment of "->>" as compared to ""<<-" too?

I do wonder if you can re-declare the assignment operators or would that mess up the parser.

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org <mailto:r-devel-bounces at r-project.org> > On Behalf Of Duncan Murdoch
Sent: Friday, March 1, 2024 9:23 AM
To: Dmitri Popavenko <dmitri.popavenko at gmail.com <mailto:dmitri.popavenko at gmail.com> >
Cc: r-devel <r-devel at r-project.org <mailto:r-devel at r-project.org> >
Subject: Re: [Rd] capture "->"

On 01/03/2024 8:51 a.m., Dmitri Popavenko wrote:
> On Fri, Mar 1, 2024 at 1:00?PM Duncan Murdoch <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>  
> <mailto:murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com> >> wrote:
> 
>     ...
>     I was thinking more of you doing something like
> 
>        parse(text = "A -> B", keep.source = TRUE)
> 
>     I forget what the exact rules are for attaching srcrefs to arguments of
>     functions, but I do remember they are a little strange, because not
>     every possible argument can accept a srcref attribute.  For example,
>     you
>     can't attach one to NULL, or to a name.
> 
>     Srcrefs are also fairly big and building them is slow, so I think we
>     tried to limit them to where they were needed, we didn't try to attach
>     them to every subexpression, just one per statement.  Each expression
>     within {} is a separate statement, so we get srcrefs attached to the {.
>     But in "foo(A -> B)" probably you only get one on the foo call.
> 
>     In some circumstances you could get the srcref on that call by looking
>     at sys.call().  But then things are complicated again, because R
>     doesn't
>     attach srcrefs to things typed at the console, only to things that are
>     sourced from files or text strings (and parsed with keep.source=TRUE).
> 
>     So I think you should probably require input from a string or a
>     file, or
>     not expect foo(A -> B) to work without some decoration.
> 
> 
> Indeed, the more challenging task is to identify "->" at the console
> (from a script or a string, seems trivial now).
> 
> I would be willing to decorate as much as it takes to make this work, I 
> am just empty on more ideas how to persuade the parser.

By "decorate", I meant putting it in quotes and parsing it using 
parse(text=...), or putting it in braces as you found.  I think parsing 
a string is most likely to be reliable because someone might turn off 
`keep.source` and then the braced approach would fail.  But you have 
control over it when you call parse() yourself.

Duncan Murdoch

______________________________________________
R-devel at r-project.org <mailto:R-devel at r-project.org>  mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org <mailto:R-devel at r-project.org>  mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom gm@||@com  Sat Mar  2 12:06:08 2024
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Sat, 2 Mar 2024 13:06:08 +0200
Subject: [Rd] capture "->"
In-Reply-To: <003d01da6c1f$b4326b00$1c974100$@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
 <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
 <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>
 <003d01da6c1f$b4326b00$1c974100$@gmail.com>
Message-ID: <CAJ=0CtCdmFC_VQd7arvp5AvkeZzhrJXV=fnB5kDUtdu2b0NA4g@mail.gmail.com>

That would have been an elegant solution, but it doesn't seem to work:

> `->` <- `+`
> 1 -> 3 # expecting 4
Error in 3 <- 1 : invalid (do_set) left-hand side to assignment

It is possible to reassign other multiple character operators:
> `%%` <- `+`
> 1 %% 3
[1] 4

The assignment operator `->` is so special for the R parser, that it seems
impossible to change.

On Fri, Mar 1, 2024 at 11:30?PM <avi.e.gross at gmail.com> wrote:

> Adrian,
>
> That is indeed a specialized need albeit not necessarily one that cannot
> be done by requiring an alternate way of typing a formula that avoids being
> something the parser sees as needed to do at that level.
>
> In this case, my other questions become moot as I assume the global
> assignment operator and somethings like assign(?xyz?, 5) will not be in the
> way.
>
> What I was wondering about is what happens if you temporarily disable the
> meaning of the assignment operator <- and turn it back on after.
>
> In the following code, for no reason, I redefine + to mean ? and then undo
> it:
>
>
> > temp <- `+`
> > `+` <- `-`
> > 5 + 3
> [1] 2
> > `+` <- temp
> > 5 + 3
> [1] 8
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Mar  2 12:31:38 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 2 Mar 2024 06:31:38 -0500
Subject: [Rd] capture "->"
In-Reply-To: <CAJ=0CtCdmFC_VQd7arvp5AvkeZzhrJXV=fnB5kDUtdu2b0NA4g@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
 <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
 <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>
 <003d01da6c1f$b4326b00$1c974100$@gmail.com>
 <CAJ=0CtCdmFC_VQd7arvp5AvkeZzhrJXV=fnB5kDUtdu2b0NA4g@mail.gmail.com>
Message-ID: <42ad1f68-4cd6-407b-842a-d9917758d93e@gmail.com>

You can't change the parser.  Changes like `+` <- `-` change the 
function that is called when the expression contains a function call to 
`+`; this happens in `eval()`, not in `parse()`.  There are never any 
function calls to `->`, because the parser outputs a call to `<-` with 
the operands reversed when it sees that token.

Duncan Murdoch

On 02/03/2024 6:06 a.m., Adrian Du?a wrote:
> That would have been an elegant solution, but it doesn't seem to work:
> 
>> `->` <- `+`
>> 1 -> 3 # expecting 4
> Error in 3 <- 1 : invalid (do_set) left-hand side to assignment
> 
> It is possible to reassign other multiple character operators:
>> `%%` <- `+`
>> 1 %% 3
> [1] 4
> 
> The assignment operator `->` is so special for the R parser, that it seems
> impossible to change.
> 
> On Fri, Mar 1, 2024 at 11:30?PM <avi.e.gross at gmail.com> wrote:
> 
>> Adrian,
>>
>> That is indeed a specialized need albeit not necessarily one that cannot
>> be done by requiring an alternate way of typing a formula that avoids being
>> something the parser sees as needed to do at that level.
>>
>> In this case, my other questions become moot as I assume the global
>> assignment operator and somethings like assign(?xyz?, 5) will not be in the
>> way.
>>
>> What I was wondering about is what happens if you temporarily disable the
>> meaning of the assignment operator <- and turn it back on after.
>>
>> In the following code, for no reason, I redefine + to mean ? and then undo
>> it:
>>
>>
>>> temp <- `+`
>>> `+` <- `-`
>>> 5 + 3
>> [1] 2
>>> `+` <- temp
>>> 5 + 3
>> [1] 8
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From dm|tr|@pop@venko @end|ng |rom gm@||@com  Sat Mar  2 15:05:07 2024
From: dm|tr|@pop@venko @end|ng |rom gm@||@com (Dmitri Popavenko)
Date: Sat, 2 Mar 2024 16:05:07 +0200
Subject: [Rd] capture "->"
In-Reply-To: <42ad1f68-4cd6-407b-842a-d9917758d93e@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
 <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
 <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>
 <003d01da6c1f$b4326b00$1c974100$@gmail.com>
 <CAJ=0CtCdmFC_VQd7arvp5AvkeZzhrJXV=fnB5kDUtdu2b0NA4g@mail.gmail.com>
 <42ad1f68-4cd6-407b-842a-d9917758d93e@gmail.com>
Message-ID: <CAJL_poi4CY+MFCosVROsm89Txai3LZLpp_CS0JRp5PPiUtYykQ@mail.gmail.com>

On Sat, Mar 2, 2024 at 1:31?PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> You can't change the parser.  Changes like `+` <- `-` change the
> function that is called when the expression contains a function call to
> `+`; this happens in `eval()`, not in `parse()`.  There are never any
> function calls to `->`, because the parser outputs a call to `<-` with
> the operands reversed when it sees that token.
>

Another idea would have been to use "=>", which is disabled by default:
> substitute(A => B)
Error: '=>' is disabled; set '_R_USE_PIPEBIND_' envvar to a true value ...

> Sys.setenv(`_R_USE_PIPEBIND_` = TRUE)
> substitute(A => B)
Error in substitute(`=>`(A, B)) :
  invalid use of pipe bind symbol (<input>:1:0)

The quest is to obtain a valid expression to get past substitute(), but it
proves to be more difficult than I initially thought.
Dmitri

	[[alternative HTML version deleted]]


From jeroenoom@ @end|ng |rom gm@||@com  Sat Mar  2 15:07:08 2024
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sat, 2 Mar 2024 14:07:08 +0000
Subject: [Rd] Big speedup in install.packages() by re-using connections
Message-ID: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>

Currently download.file() creates and terminates a new TLS connection
for each download. This creates a lot of overhead which is expensive
for both client and server (in particular the TLS handshake). Modern
internet clients (including browsers) re-use connections for many http
requests.

We can do this in R by creating a persistent libcurl "multi-handle".
The R libcurl implementation already uses a multi-handle, however it
destroys it after each download, which defeats the purpose. The
purpose of the multi-handle is to keep it alive and let libcurl
maintain a persistent connection pool. This is particularly relevant
for install.packages() which needs to download many files from one and
the same server.

Here is a bare minimal proof of concept patch that re-uses one and the
same multi-handle for all requests in R:
https://github.com/r-devel/r-svn/pull/155/files

Some quick benchmarking shows that this can lead to big speedups for
download.packages() on high-bandwidth servers (such as CI). This quick
test to download 100 packages from CRAN showed more than 10x speedup
for me: https://github.com/r-devel/r-svn/pull/155

Moreover, I think this may make install.packages() more robust. In CI
build logs that download many packages, I often see one or two
downloads randomly failing with a TLS-connect error. I am hopeful this
problem will disappear when using a single connection to the CRAN
server to download all the packages.


From @vi@e@gross m@iii@g oii gm@ii@com  Sat Mar  2 16:42:59 2024
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Sat, 2 Mar 2024 10:42:59 -0500
Subject: [Rd] capture "->"
In-Reply-To: <42ad1f68-4cd6-407b-842a-d9917758d93e@gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <ff87b48a-ccad-40ec-b79e-3fb4c945d3a9@gmail.com>
 <CAJL_pogbYhhLxsXQN0jjm83sZybh1nO1wE6F+CwNV18F9EkYUA@mail.gmail.com>
 <79f6c330-e5bf-4ad4-9ccc-ed47ab8dcb69@gmail.com>
 <CAJL_poiOUuBfPLqa3uTswA=1LG=1CZeBR9XudSaFQYbesQG+cA@mail.gmail.com>
 <1cef84f8-a9d4-436a-a606-765a084a4a91@gmail.com>
 <005b01da6be5$0361b9f0$0a252dd0$@gmail.com>
 <CAJ=0CtBZPv+Sia-OkGQBCAj+ogSUeTyQ3hVWorbv-DaOZwi64A@mail.gmail.com>
 <003d01da6c1f$b4326b00$1c974100$@gmail.com>
 <CAJ=0CtCdmFC_VQd7arvp5AvkeZzhrJXV=fnB5kDUtdu2b0NA4g@mail.gmail.com>
 <42ad1f68-4cd6-407b-842a-d9917758d93e@gmail.com>
Message-ID: <005c01da6cb8$4e0df210$ea29d630$@gmail.com>

Duncan, Adrian and all,

I decided to look a bit at how various operators are seen by typeof() in light of this discussion and it seems there are quite a few categories as shown below and I suspect more exist. R, like many languages was not initially designed to have some object-oriented aspects and some have been cobbled on over the years including multiple emulations of what it means to be an object. So, explicit or implicit functions may be of different kinds.

> typeof(`<-`)
[1] "special"
> typeof(`->`)
Error: object '->' not found
> typeof(`+`)
[1] "builtin"
> typeof(`=`)
[1] "special"
> typeof(`|>`)
Error: object '|>' not found
> typeof(`%>%`)
[1] "closure"

In principle, and someone can probably point to languages that do something like this, all assignments could be centralized into some kind of primitive function call along the lines of:

assign("A", 5)

Then you could build on that so that the definition of = and <- and even <-- would mean that the following might result in something like the above:

A = 5
A <- 5

Bothe become an assign statement like the above meaning a function with a side effect.

A <- 5

Would simply be an assign with an added argument specifying the global environment.

The other two forms would just invert it so that

5 -> A
5 --> A

Simply generate the same assignment statement.

I am not sure if such a system would work well for all needs but I can see a language doing that even if it makes it slower. And, in such a system, you could create your own assignment operators or redirect the ones already existing as I considered a possibility.

But for some purposes, it may be way easier to have the ability to have some elements of absolutely fixed syntax that allow functionality even before an expression is fully evaluated. As one example, a comma that is not hidden in quotes is generally considered to be a way to determine how to break an expression into parts. Otherwise, how would you know that f(a,b,c) has three arguments. So what happens if your country uses a comma like other use a period as in numbers? Yes, in some environments you can specify that this is being done but it is really not trivial to make a system that is completely flexible in all aspects and allows you to flip from one way of using numbers to the other while also changing any other places the symbols are used in different ways.

So the problem becomes whether you can graft the mini language required for dealing with graphs that can include A -> B and A <- B and perhaps A <-> B in ways that are either not seen as they are parsed or even evaluated or that over-ride normal behavior.

One obvious idea is to avoid re-using the same symbols. R frequently just wraps symbols in percent signs so you might consider transforming anything to be A %->% B or maybe something like A %_>% or other notations that the parser does not see. It may be a pain but %FORWARD% versus %BACKWARD% or other gimmicks might work enough and you can always substitute out to the original version after you pass this danger zone.

And if your formulas are wrapped into some kind of object, they can store several versions or have the ability to do conversions.

But those ideas belong in  a more mainstream R mailing list.



-----Original Message-----
From: Duncan Murdoch <murdoch.duncan at gmail.com> 
Sent: Saturday, March 2, 2024 6:32 AM
To: Adrian Du?a <dusa.adrian at gmail.com>; avi.e.gross at gmail.com
Cc: r-devel <r-devel at r-project.org>
Subject: Re: [Rd] capture "->"

You can't change the parser.  Changes like `+` <- `-` change the 
function that is called when the expression contains a function call to 
`+`; this happens in `eval()`, not in `parse()`.  There are never any 
function calls to `->`, because the parser outputs a call to `<-` with 
the operands reversed when it sees that token.

Duncan Murdoch

On 02/03/2024 6:06 a.m., Adrian Du?a wrote:
> That would have been an elegant solution, but it doesn't seem to work:
> 
>> `->` <- `+`
>> 1 -> 3 # expecting 4
> Error in 3 <- 1 : invalid (do_set) left-hand side to assignment
> 
> It is possible to reassign other multiple character operators:
>> `%%` <- `+`
>> 1 %% 3
> [1] 4
> 
> The assignment operator `->` is so special for the R parser, that it seems
> impossible to change.
> 
> On Fri, Mar 1, 2024 at 11:30?PM <avi.e.gross at gmail.com> wrote:
> 
>> Adrian,
>>
>> That is indeed a specialized need albeit not necessarily one that cannot
>> be done by requiring an alternate way of typing a formula that avoids being
>> something the parser sees as needed to do at that level.
>>
>> In this case, my other questions become moot as I assume the global
>> assignment operator and somethings like assign(?xyz?, 5) will not be in the
>> way.
>>
>> What I was wondering about is what happens if you temporarily disable the
>> meaning of the assignment operator <- and turn it back on after.
>>
>> In the following code, for no reason, I redefine + to mean ? and then undo
>> it:
>>
>>
>>> temp <- `+`
>>> `+` <- `-`
>>> 5 + 3
>> [1] 2
>>> `+` <- temp
>>> 5 + 3
>> [1] 8
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Sat Mar  2 18:57:34 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sat, 2 Mar 2024 12:57:34 -0500
Subject: [Rd] capture "->"
In-Reply-To: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
Message-ID: <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>

Would it be good enough to pass it as a formula?  Using your definition of foo

  foo(~ A -> result)
  ## result <- ~A

  foo(~ result <- A)
  ## ~result <- A

On Fri, Mar 1, 2024 at 4:18?AM Dmitri Popavenko
<dmitri.popavenko at gmail.com> wrote:
>
> Hi everyone,
>
> I am aware this is a parser issue, but is there any possibility to capture
> the use of the inverse assignment operator into a formula?
>
> Something like:
>
> > foo <- function(x) substitute(x)
>
> gives:
>
> > foo(A -> B)
> B <- A
>
> I wonder if there is any possibility whatsoever to signal the use of ->
> instead of <-
>
> Thank you,
> Dmitri
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From dm|tr|@pop@venko @end|ng |rom gm@||@com  Sun Mar  3 13:25:15 2024
From: dm|tr|@pop@venko @end|ng |rom gm@||@com (Dmitri Popavenko)
Date: Sun, 3 Mar 2024 14:25:15 +0200
Subject: [Rd] capture "->"
In-Reply-To: <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>
Message-ID: <CAJL_poj8Kvs9aA8SWBDdZjFQ3z5O5WyHypS7OvVDVRzj_DjVCg@mail.gmail.com>

On Sat, Mar 2, 2024 at 7:58?PM Gabor Grothendieck <ggrothendieck at gmail.com>
wrote:

> Would it be good enough to pass it as a formula?  Using your definition of
> foo
>
>   foo(~ A -> result)
>   ## result <- ~A
>
>   foo(~ result <- A)
>   ## ~result <- A
>

Yes, to pass as a formula would be the idea.
It's just that the parser inverses "~A -> result" into "result <- ~A".
We are seeking for any way possible to flag this inversion.

Avi, thank you for your efforts too. Wrapping symbols into percent signs is
an option, but as Duncan says it is much more intuitive to just quote the
expression.
The challenge is to somehow flag the parser inversion, otherwise a quoted
expression seems to be the only solution possible.

Regards,
Dmitri

	[[alternative HTML version deleted]]


From b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk  Mon Mar  4 10:40:39 2024
From: b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk (Barry Rowlingson)
Date: Mon, 4 Mar 2024 09:40:39 +0000
Subject: [Rd] [External] Re:  capture "->"
In-Reply-To: <a75b4ccc217048fc860fd70db8766668@LO6P265MB6080.GBRP265.PROD.OUTLOOK.COM>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>
 <a75b4ccc217048fc860fd70db8766668@LO6P265MB6080.GBRP265.PROD.OUTLOOK.COM>
Message-ID: <CANVKczOaiVjS4nNm2ht1tHhz0SHjeKSHkneeAHbW1pyShkgsOw@mail.gmail.com>

It seems like you want to use -> and <- as arrows with different meanings
to "A gets the value of B" in your package, as a means of writing
expressions in your package language.

Another possibility would be to use different symbols instead of the
problematic -> and <-, for example you could use <.~ and ~.> which are not
at all flipped or changed before you get a chance to parse your expression.
It might make your language parser a bit trickier though. Let's see how
these things turn into R's AST using `lobstr`:

 > library(lobstr)
 > ast(A ~.> B)
??`~`
??A
????`>`
  ??.
  ??B
 > ast(A <.~ B)
??`~`
????`<`
? ??A
? ??.
??B

You'd have to unpick that tree to figure out you've got A and B on either
side of your expression, and that the direction of the expression is L-R or
R-L.

You could also use -.> and <.- symbols, leading to a different tree

 > ast(A -.> B)
??`>`
????`-`
? ??A
? ??.
??B
 > ast(A <.- B)
??`<`
??A
????`-`
  ??.
  ??B

Without knowing the complexity of your language expressions (especially if
it allows dots and minus signs with special meanings) I'm not sure if A)
this will work or B) this will bend your brain in horrible directions in
order to make it work... Although you don't need to parse the AST as above,
you can always deparse to get the text version of it:

 > textex = function(x){deparse(substitute(x))}
 > textex(A <.~ B)
[1] "A < . ~ B"

The <.~ form has an advantage over the <.- form if you want to do complex
expressions with more than one arrow, since the ~ form is syntactically
correct but the - form isnt:

 > textex(A <.~ B ~.> C)
[1] "A < . ~ B ~ . > C"
 > textex(A <.- B -.> C)
Error: unexpected '>' in "textex(A <.- B -.>"


Barry


On Sun, Mar 3, 2024 at 12:25?PM Dmitri Popavenko <dmitri.popavenko at gmail.com>
wrote:

> This email originated outside the University. Check before clicking links
> or attachments.
>
> On Sat, Mar 2, 2024 at 7:58?PM Gabor Grothendieck <ggrothendieck at gmail.com
> >
> wrote:
>
> > Would it be good enough to pass it as a formula?  Using your definition
> of
> > foo
> >
> >   foo(~ A -> result)
> >   ## result <- ~A
> >
> >   foo(~ result <- A)
> >   ## ~result <- A
> >
>
> Yes, to pass as a formula would be the idea.
> It's just that the parser inverses "~A -> result" into "result <- ~A".
> We are seeking for any way possible to flag this inversion.
>
> Avi, thank you for your efforts too. Wrapping symbols into percent signs is
> an option, but as Duncan says it is much more intuitive to just quote the
> expression.
> The challenge is to somehow flag the parser inversion, otherwise a quoted
> expression seems to be the only solution possible.
>
> Regards,
> Dmitri
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From dm|tr|@pop@venko @end|ng |rom gm@||@com  Mon Mar  4 10:58:45 2024
From: dm|tr|@pop@venko @end|ng |rom gm@||@com (Dmitri Popavenko)
Date: Mon, 4 Mar 2024 11:58:45 +0200
Subject: [Rd] [External] Re:  capture "->"
In-Reply-To: <CANVKczOaiVjS4nNm2ht1tHhz0SHjeKSHkneeAHbW1pyShkgsOw@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>
 <a75b4ccc217048fc860fd70db8766668@LO6P265MB6080.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOaiVjS4nNm2ht1tHhz0SHjeKSHkneeAHbW1pyShkgsOw@mail.gmail.com>
Message-ID: <CAJL_pogKj-WGoQ1LiarBH--ebtrmAo5cQQ=aJt3suRU3+2ZHSw@mail.gmail.com>

Dear Barry,

In general, I believe users are already accustomed with the classical
arrows "->" and "<-" which are used as such in quoted expressions.
But I agree that "-.>" is a very neat trick, thanks a lot. A small dot,
what a difference.

All the best,
Dmitri

On Mon, Mar 4, 2024 at 11:40?AM Barry Rowlingson <
b.rowlingson at lancaster.ac.uk> wrote:

> It seems like you want to use -> and <- as arrows with different meanings
> to "A gets the value of B" in your package, as a means of writing
> expressions in your package language.
>
> Another possibility would be to use different symbols instead of the
> problematic -> and <-, for example you could use <.~ and ~.> which are not
> at all flipped or changed before you get a chance to parse your expression.
> It might make your language parser a bit trickier though. Let's see how
> these things turn into R's AST using `lobstr`:
>
>  > library(lobstr)
>  > ast(A ~.> B)
> ??`~`
> ??A
> ????`>`
>   ??.
>   ??B
>  > ast(A <.~ B)
> ??`~`
> ????`<`
> ? ??A
> ? ??.
> ??B
>
> You'd have to unpick that tree to figure out you've got A and B on either
> side of your expression, and that the direction of the expression is L-R or
> R-L.
>
> You could also use -.> and <.- symbols, leading to a different tree
>
>  > ast(A -.> B)
> ??`>`
> ????`-`
> ? ??A
> ? ??.
> ??B
>  > ast(A <.- B)
> ??`<`
> ??A
> ????`-`
>   ??.
>   ??B
>
> Without knowing the complexity of your language expressions (especially if
> it allows dots and minus signs with special meanings) I'm not sure if A)
> this will work or B) this will bend your brain in horrible directions in
> order to make it work... Although you don't need to parse the AST as above,
> you can always deparse to get the text version of it:
>
>  > textex = function(x){deparse(substitute(x))}
>  > textex(A <.~ B)
> [1] "A < . ~ B"
>
> The <.~ form has an advantage over the <.- form if you want to do complex
> expressions with more than one arrow, since the ~ form is syntactically
> correct but the - form isnt:
>
>  > textex(A <.~ B ~.> C)
> [1] "A < . ~ B ~ . > C"
>  > textex(A <.- B -.> C)
> Error: unexpected '>' in "textex(A <.- B -.>"
>
>
> Barry
>
>
> On Sun, Mar 3, 2024 at 12:25?PM Dmitri Popavenko <
> dmitri.popavenko at gmail.com> wrote:
>
>> This email originated outside the University. Check before clicking links
>> or attachments.
>>
>> On Sat, Mar 2, 2024 at 7:58?PM Gabor Grothendieck <
>> ggrothendieck at gmail.com>
>> wrote:
>>
>> > Would it be good enough to pass it as a formula?  Using your definition
>> of
>> > foo
>> >
>> >   foo(~ A -> result)
>> >   ## result <- ~A
>> >
>> >   foo(~ result <- A)
>> >   ## ~result <- A
>> >
>>
>> Yes, to pass as a formula would be the idea.
>> It's just that the parser inverses "~A -> result" into "result <- ~A".
>> We are seeking for any way possible to flag this inversion.
>>
>> Avi, thank you for your efforts too. Wrapping symbols into percent signs
>> is
>> an option, but as Duncan says it is much more intuitive to just quote the
>> expression.
>> The challenge is to somehow flag the parser inversion, otherwise a quoted
>> expression seems to be the only solution possible.
>>
>> Regards,
>> Dmitri
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Mon Mar  4 17:45:05 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Mon, 4 Mar 2024 10:45:05 -0600 (CST)
Subject: [Rd] Ordered comparison operators on language objects will signal
 errors
Message-ID: <1fe13b32-f40c-5995-ad95-01347ac5bb80@uiowa.edu>

Comparison operators == and != can be used on language objects
(i.e. call objects and symbols). The == operator in particular often
seems to be used as a shorthand for calling identical(). The current
implementation involves comparing deparsed calls as strings. This has
a number of drawbacks and we would like to transition to a more robust
and efficient implementation. As a first step, R-devel will soon be
modified to signal an error when the ordered comparison operators <,
<=, >, >= are used on language objects. A small number of CRAN and
BIOC packages will fail after this change. If you want to check your
packages or code before the change is committed you can run the
current R-devel with the environment variable setting

     _R_COMPARE_LANG_OBJECTS=eqonly

where using such a comparison now produces

     > quote(x + y) > 1
     Error in quote(x + y) > 1 :
       comparison (>) is not possible for language types

Best,

luke


-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From w||||@mwdun|@p @end|ng |rom gm@||@com  Mon Mar  4 17:51:00 2024
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Mon, 4 Mar 2024 08:51:00 -0800
Subject: [Rd] [External] Re: capture "->"
In-Reply-To: <CAJL_pogKj-WGoQ1LiarBH--ebtrmAo5cQQ=aJt3suRU3+2ZHSw@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>
 <a75b4ccc217048fc860fd70db8766668@LO6P265MB6080.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOaiVjS4nNm2ht1tHhz0SHjeKSHkneeAHbW1pyShkgsOw@mail.gmail.com>
 <CAJL_pogKj-WGoQ1LiarBH--ebtrmAo5cQQ=aJt3suRU3+2ZHSw@mail.gmail.com>
Message-ID: <CAHqSRuQ39Kt+Xgq6H-9m-q9tS7DgVe6VCUaiKWx6A8CzYd8JQw@mail.gmail.com>

Maybe someone has already suggested this, but if your functions accepted
strings you could use sub or gsub to replace the -> with a symbol that
parsed at the same precedence as <-,
say <<-.  Then parse it and deal with it.  When it is time to display the
parsed and perhaps manipulated formulae to the user, deparse it and do the
reverse replacement.

> encode <- function(string)gsub(perl=TRUE, "->", "<<-", x=string)
> decode <- function(string)gsub(perl=TRUE, "<<-", "->", x=string)
> rightArrow <- as.name("<<-")
> leftArrow <- as.name("<-")
> ast1 <- parse(text=encode("x1 + x2 -> a3"))[[1]]
> ast2 <- parse(text=encode("y4 <- b5 + (b6 / b7)"))[[1]]
> identical(ast1[[1]], rightArrow)
[1] TRUE
> identical(ast2[[1]], leftArrow)
[1] TRUE
> ast1[[3]] <- as.name("new_a3")
> decode(deparse(ast1))
[1] "x1 + x2 -> new_a3"

-Bill

On Mon, Mar 4, 2024 at 1:59?AM Dmitri Popavenko <dmitri.popavenko at gmail.com>
wrote:

> Dear Barry,
>
> In general, I believe users are already accustomed with the classical
> arrows "->" and "<-" which are used as such in quoted expressions.
> But I agree that "-.>" is a very neat trick, thanks a lot. A small dot,
> what a difference.
>
> All the best,
> Dmitri
>
> On Mon, Mar 4, 2024 at 11:40?AM Barry Rowlingson <
> b.rowlingson at lancaster.ac.uk> wrote:
>
> > It seems like you want to use -> and <- as arrows with different meanings
> > to "A gets the value of B" in your package, as a means of writing
> > expressions in your package language.
> >
> > Another possibility would be to use different symbols instead of the
> > problematic -> and <-, for example you could use <.~ and ~.> which are
> not
> > at all flipped or changed before you get a chance to parse your
> expression.
> > It might make your language parser a bit trickier though. Let's see how
> > these things turn into R's AST using `lobstr`:
> >
> >  > library(lobstr)
> >  > ast(A ~.> B)
> > ??`~`
> > ??A
> > ????`>`
> >   ??.
> >   ??B
> >  > ast(A <.~ B)
> > ??`~`
> > ????`<`
> > ? ??A
> > ? ??.
> > ??B
> >
> > You'd have to unpick that tree to figure out you've got A and B on either
> > side of your expression, and that the direction of the expression is L-R
> or
> > R-L.
> >
> > You could also use -.> and <.- symbols, leading to a different tree
> >
> >  > ast(A -.> B)
> > ??`>`
> > ????`-`
> > ? ??A
> > ? ??.
> > ??B
> >  > ast(A <.- B)
> > ??`<`
> > ??A
> > ????`-`
> >   ??.
> >   ??B
> >
> > Without knowing the complexity of your language expressions (especially
> if
> > it allows dots and minus signs with special meanings) I'm not sure if A)
> > this will work or B) this will bend your brain in horrible directions in
> > order to make it work... Although you don't need to parse the AST as
> above,
> > you can always deparse to get the text version of it:
> >
> >  > textex = function(x){deparse(substitute(x))}
> >  > textex(A <.~ B)
> > [1] "A < . ~ B"
> >
> > The <.~ form has an advantage over the <.- form if you want to do complex
> > expressions with more than one arrow, since the ~ form is syntactically
> > correct but the - form isnt:
> >
> >  > textex(A <.~ B ~.> C)
> > [1] "A < . ~ B ~ . > C"
> >  > textex(A <.- B -.> C)
> > Error: unexpected '>' in "textex(A <.- B -.>"
> >
> >
> > Barry
> >
> >
> > On Sun, Mar 3, 2024 at 12:25?PM Dmitri Popavenko <
> > dmitri.popavenko at gmail.com> wrote:
> >
> >> This email originated outside the University. Check before clicking
> links
> >> or attachments.
> >>
> >> On Sat, Mar 2, 2024 at 7:58?PM Gabor Grothendieck <
> >> ggrothendieck at gmail.com>
> >> wrote:
> >>
> >> > Would it be good enough to pass it as a formula?  Using your
> definition
> >> of
> >> > foo
> >> >
> >> >   foo(~ A -> result)
> >> >   ## result <- ~A
> >> >
> >> >   foo(~ result <- A)
> >> >   ## ~result <- A
> >> >
> >>
> >> Yes, to pass as a formula would be the idea.
> >> It's just that the parser inverses "~A -> result" into "result <- ~A".
> >> We are seeking for any way possible to flag this inversion.
> >>
> >> Avi, thank you for your efforts too. Wrapping symbols into percent signs
> >> is
> >> an option, but as Duncan says it is much more intuitive to just quote
> the
> >> expression.
> >> The challenge is to somehow flag the parser inversion, otherwise a
> quoted
> >> expression seems to be the only solution possible.
> >>
> >> Regards,
> >> Dmitri
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar  4 18:15:12 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 4 Mar 2024 12:15:12 -0500
Subject: [Rd] [External] Re: capture "->"
In-Reply-To: <CAHqSRuQ39Kt+Xgq6H-9m-q9tS7DgVe6VCUaiKWx6A8CzYd8JQw@mail.gmail.com>
References: <CAJL_pojF-Qc8YA0_eB+Ab9w3qD5sgMkjm0C3b0ooOmoOUy769w@mail.gmail.com>
 <CAP01uRk-aKErTBoWNUeFaF23doSJP5v8nz4WGT+jxCgiFXip7A@mail.gmail.com>
 <a75b4ccc217048fc860fd70db8766668@LO6P265MB6080.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOaiVjS4nNm2ht1tHhz0SHjeKSHkneeAHbW1pyShkgsOw@mail.gmail.com>
 <CAJL_pogKj-WGoQ1LiarBH--ebtrmAo5cQQ=aJt3suRU3+2ZHSw@mail.gmail.com>
 <CAHqSRuQ39Kt+Xgq6H-9m-q9tS7DgVe6VCUaiKWx6A8CzYd8JQw@mail.gmail.com>
Message-ID: <a92ef4cc-786e-4ed5-98f3-3875f4292ff4@gmail.com>

That's a good suggestion, but if the function accepts strings, the 
problem is fairly easy using the parser.  E.g. compare

 > getParseData( parse(text="x1 + x2 -> a3") )
    line1 col1 line2 col2 id parent        token terminal text
11     1    1     1   13 11      0         expr    FALSE
7      1    1     1    7  7     11         expr    FALSE
1      1    1     1    2  1      3       SYMBOL     TRUE   x1
3      1    1     1    2  3      7         expr    FALSE
2      1    4     1    4  2      7          '+'     TRUE    +
4      1    6     1    7  4      6       SYMBOL     TRUE   x2
6      1    6     1    7  6      7         expr    FALSE
5      1    9     1   10  5     11 RIGHT_ASSIGN     TRUE   ->
8      1   12     1   13  8     10       SYMBOL     TRUE   a3
10     1   12     1   13 10     11         expr    FALSE

 > getParseData( parse(text="a3 <- x1 + x2") )
    line1 col1 line2 col2 id parent       token terminal text
11     1    1     1   13 11      0        expr    FALSE
1      1    1     1    2  1      3      SYMBOL     TRUE   a3
3      1    1     1    2  3     11        expr    FALSE
2      1    4     1    5  2     11 LEFT_ASSIGN     TRUE   <-
10     1    7     1   13 10     11        expr    FALSE
4      1    7     1    8  4      6      SYMBOL     TRUE   x1
6      1    7     1    8  6     10        expr    FALSE
5      1   10     1   10  5     10         '+'     TRUE    +
7      1   12     1   13  7      9      SYMBOL     TRUE   x2
9      1   12     1   13  9     10        expr    FALSE

The expressions produced are the same, but the parse data is different.

Duncan Murdoch

On 04/03/2024 11:51 a.m., Bill Dunlap wrote:
> Maybe someone has already suggested this, but if your functions accepted
> strings you could use sub or gsub to replace the -> with a symbol that
> parsed at the same precedence as <-,
> say <<-.  Then parse it and deal with it.  When it is time to display the
> parsed and perhaps manipulated formulae to the user, deparse it and do the
> reverse replacement.
> 
>> encode <- function(string)gsub(perl=TRUE, "->", "<<-", x=string)
>> decode <- function(string)gsub(perl=TRUE, "<<-", "->", x=string)
>> rightArrow <- as.name("<<-")
>> leftArrow <- as.name("<-")
>> ast1 <- parse(text=encode("x1 + x2 -> a3"))[[1]]
>> ast2 <- parse(text=encode("y4 <- b5 + (b6 / b7)"))[[1]]
>> identical(ast1[[1]], rightArrow)
> [1] TRUE
>> identical(ast2[[1]], leftArrow)
> [1] TRUE
>> ast1[[3]] <- as.name("new_a3")
>> decode(deparse(ast1))
> [1] "x1 + x2 -> new_a3"
> 
> -Bill
> 
> On Mon, Mar 4, 2024 at 1:59?AM Dmitri Popavenko <dmitri.popavenko at gmail.com>
> wrote:
> 
>> Dear Barry,
>>
>> In general, I believe users are already accustomed with the classical
>> arrows "->" and "<-" which are used as such in quoted expressions.
>> But I agree that "-.>" is a very neat trick, thanks a lot. A small dot,
>> what a difference.
>>
>> All the best,
>> Dmitri
>>
>> On Mon, Mar 4, 2024 at 11:40?AM Barry Rowlingson <
>> b.rowlingson at lancaster.ac.uk> wrote:
>>
>>> It seems like you want to use -> and <- as arrows with different meanings
>>> to "A gets the value of B" in your package, as a means of writing
>>> expressions in your package language.
>>>
>>> Another possibility would be to use different symbols instead of the
>>> problematic -> and <-, for example you could use <.~ and ~.> which are
>> not
>>> at all flipped or changed before you get a chance to parse your
>> expression.
>>> It might make your language parser a bit trickier though. Let's see how
>>> these things turn into R's AST using `lobstr`:
>>>
>>>   > library(lobstr)
>>>   > ast(A ~.> B)
>>> ??`~`
>>> ??A
>>> ????`>`
>>>    ??.
>>>    ??B
>>>   > ast(A <.~ B)
>>> ??`~`
>>> ????`<`
>>> ? ??A
>>> ? ??.
>>> ??B
>>>
>>> You'd have to unpick that tree to figure out you've got A and B on either
>>> side of your expression, and that the direction of the expression is L-R
>> or
>>> R-L.
>>>
>>> You could also use -.> and <.- symbols, leading to a different tree
>>>
>>>   > ast(A -.> B)
>>> ??`>`
>>> ????`-`
>>> ? ??A
>>> ? ??.
>>> ??B
>>>   > ast(A <.- B)
>>> ??`<`
>>> ??A
>>> ????`-`
>>>    ??.
>>>    ??B
>>>
>>> Without knowing the complexity of your language expressions (especially
>> if
>>> it allows dots and minus signs with special meanings) I'm not sure if A)
>>> this will work or B) this will bend your brain in horrible directions in
>>> order to make it work... Although you don't need to parse the AST as
>> above,
>>> you can always deparse to get the text version of it:
>>>
>>>   > textex = function(x){deparse(substitute(x))}
>>>   > textex(A <.~ B)
>>> [1] "A < . ~ B"
>>>
>>> The <.~ form has an advantage over the <.- form if you want to do complex
>>> expressions with more than one arrow, since the ~ form is syntactically
>>> correct but the - form isnt:
>>>
>>>   > textex(A <.~ B ~.> C)
>>> [1] "A < . ~ B ~ . > C"
>>>   > textex(A <.- B -.> C)
>>> Error: unexpected '>' in "textex(A <.- B -.>"
>>>
>>>
>>> Barry
>>>
>>>
>>> On Sun, Mar 3, 2024 at 12:25?PM Dmitri Popavenko <
>>> dmitri.popavenko at gmail.com> wrote:
>>>
>>>> This email originated outside the University. Check before clicking
>> links
>>>> or attachments.
>>>>
>>>> On Sat, Mar 2, 2024 at 7:58?PM Gabor Grothendieck <
>>>> ggrothendieck at gmail.com>
>>>> wrote:
>>>>
>>>>> Would it be good enough to pass it as a formula?  Using your
>> definition
>>>> of
>>>>> foo
>>>>>
>>>>>    foo(~ A -> result)
>>>>>    ## result <- ~A
>>>>>
>>>>>    foo(~ result <- A)
>>>>>    ## ~result <- A
>>>>>
>>>>
>>>> Yes, to pass as a formula would be the idea.
>>>> It's just that the parser inverses "~A -> result" into "result <- ~A".
>>>> We are seeking for any way possible to flag this inversion.
>>>>
>>>> Avi, thank you for your efforts too. Wrapping symbols into percent signs
>>>> is
>>>> an option, but as Duncan says it is much more intuitive to just quote
>> the
>>>> expression.
>>>> The challenge is to somehow flag the parser inversion, otherwise a
>> quoted
>>>> expression seems to be the only solution possible.
>>>>
>>>> Regards,
>>>> Dmitri
>>>>
>>>>          [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Mar  5 03:03:30 2024
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 4 Mar 2024 18:03:30 -0800
Subject: [Rd] 
 Ordered comparison operators on language objects will signal errors
In-Reply-To: <1fe13b32-f40c-5995-ad95-01347ac5bb80@uiowa.edu>
References: <1fe13b32-f40c-5995-ad95-01347ac5bb80@uiowa.edu>
Message-ID: <CAFDcVCQYJJbu7bhYXMVdgPSm8biB0-Tqu9izdbfh3SS9gPU-SQ@mail.gmail.com>

On Mon, Mar 4, 2024 at 8:45?AM luke-tierney--- via R-devel
<r-devel at r-project.org> wrote:
>
> Comparison operators == and != can be used on language objects
> (i.e. call objects and symbols). The == operator in particular often
> seems to be used as a shorthand for calling identical(). The current
> implementation involves comparing deparsed calls as strings. This has
> a number of drawbacks and we would like to transition to a more robust
> and efficient implementation. As a first step, R-devel will soon be
> modified to signal an error when the ordered comparison operators <,
> <=, >, >= are used on language objects. A small number of CRAN and
> BIOC packages will fail after this change. If you want to check your
> packages or code before the change is committed you can run the
> current R-devel with the environment variable setting
>
>      _R_COMPARE_LANG_OBJECTS=eqonly

A minor comment, which or may not matter, depending on how long you're
planning to keep that variable around. I believe all other "internal"
environment variables in the R source code that starts with _R_ also
ends with an underscore (_).  This name is an outlier in that sense.
So, maybe it should be named '_R_COMPARE_LANG_OBJECTS_' instead? (I
checked the source code - it's indeed without the trailing
underscore).

/Henrik

>
> where using such a comparison now produces
>
>      > quote(x + y) > 1
>      Error in quote(x + y) > 1 :
>        comparison (>) is not possible for language types
>
> Best,
>
> luke
>
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Wed Mar  6 12:24:44 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 6 Mar 2024 14:24:44 +0300
Subject: [Rd] Never exporting .__global__ and .__suppressForeign__?
Message-ID: <20240306142444.7c8334f5@arachnoid>

Hello,

(Dear Richard, I hope you don't mind being Cc:'d on this thread in
R-devel. This is one of the ways we can prevent similar problems from
happening in the future.)

Sometimes, package authors who use both exportPattern('.') and
utils::globalVariables(...) get confusing WARNINGs about undocumented
exports:
https://stat.ethz.ch/pipermail/r-package-devel/2024q1/010531.html

I would like to suggest adding the variables used by
utils::globalVariables and utils::suppressForeignCheck to the list of
things that should never be exported:

Index: src/library/base/R/namespace.R
===================================================================
--- src/library/base/R/namespace.R	(revision 86054)
+++ src/library/base/R/namespace.R	(working copy)
@@ -806,7 +806,8 @@
         if (length(exports)) {
             stoplist <- c(".__NAMESPACE__.", ".__S3MethodsTable__.",
                           ".packageName", ".First.lib", ".onLoad",
-                          ".onAttach", ".conflicts.OK", ".noGenerics")
+                          ".onAttach", ".conflicts.OK", ".noGenerics",
+                          ".__global__", ".__suppressForeign__")
             exports <- exports[! exports %in% stoplist]
         }
 	if(lev > 2L) message("--- processing exports for ", dQuote(package))

(Indeed, R CMD check is very careful to only access these variables
using the interface functions in the utils package, so there doesn't
seem to be any code that depends on them being exported, and they
usually aren't.)

Alternatively (or maybe additionally), it may be possible to enhance
the R CMD check diagnostics by checking whether the name of the
undocumented object starts with a dot and asking the user whether it
was intended to be exported. This is not as easy to implement due to
tools:::.check_packages working with the log output from
tools::undoc(), not the object itself. Would a change to
tools:::format.undoc be warranted?

-- 
Best regards,
Ivan


From rmh @end|ng |rom temp|e@edu  Wed Mar  6 17:48:21 2024
From: rmh @end|ng |rom temp|e@edu (Richard M. Heiberger)
Date: Wed, 6 Mar 2024 16:48:21 +0000
Subject: [Rd] [External] Never exporting .__global__ and
 .__suppressForeign__?
In-Reply-To: <20240306142444.7c8334f5@arachnoid>
References: <20240306142444.7c8334f5@arachnoid>
Message-ID: <2DBC3315-F87F-409D-9E8A-BE739CAD3A73@temple.edu>

Ivan,

thank you for including me on this thread on R-devel.

Please be sure to see the last email in my R-pkg-devel thread on RcmdrPlugin.HH_1.1-48.tar.gz,
in which I discuss how I responded to this issue, specifically to my detailed discussion
in the RcmdrPlugion.HH/NEWS.

Rich


> On Mar 6, 2024, at 06:24, Ivan Krylov <ikrylov at disroot.org> wrote:
>
> Hello,
>
> (Dear Richard, I hope you don't mind being Cc:'d on this thread in
> R-devel. This is one of the ways we can prevent similar problems from
> happening in the future.)
>
> Sometimes, package authors who use both exportPattern('.') and
> utils::globalVariables(...) get confusing WARNINGs about undocumented
> exports:
> https://stat.ethz.ch/pipermail/r-package-devel/2024q1/010531.html
>
> I would like to suggest adding the variables used by
> utils::globalVariables and utils::suppressForeignCheck to the list of
> things that should never be exported:
>
> Index: src/library/base/R/namespace.R
> ===================================================================
> --- src/library/base/R/namespace.R (revision 86054)
> +++ src/library/base/R/namespace.R (working copy)
> @@ -806,7 +806,8 @@
>         if (length(exports)) {
>             stoplist <- c(".__NAMESPACE__.", ".__S3MethodsTable__.",
>                           ".packageName", ".First.lib", ".onLoad",
> -                          ".onAttach", ".conflicts.OK", ".noGenerics")
> +                          ".onAttach", ".conflicts.OK", ".noGenerics",
> +                          ".__global__", ".__suppressForeign__")
>             exports <- exports[! exports %in% stoplist]
>         }
> if(lev > 2L) message("--- processing exports for ", dQuote(package))
>
> (Indeed, R CMD check is very careful to only access these variables
> using the interface functions in the utils package, so there doesn't
> seem to be any code that depends on them being exported, and they
> usually aren't.)
>
> Alternatively (or maybe additionally), it may be possible to enhance
> the R CMD check diagnostics by checking whether the name of the
> undocumented object starts with a dot and asking the user whether it
> was intended to be exported. This is not as easy to implement due to
> tools:::.check_packages working with the log output from
> tools::undoc(), not the object itself. Would a change to
> tools:::format.undoc be warranted?
>
> --
> Best regards,
> Ivan


From b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk  Mon Mar 11 13:15:20 2024
From: b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk (Barry Rowlingson)
Date: Mon, 11 Mar 2024 12:15:20 +0000
Subject: [Rd] R6 "classname" and generator name
Message-ID: <CANVKczP7UBx4b9=qXeBHXbf4S4p_MG+S50VPJ7_ze8Rj3U20DQ@mail.gmail.com>

I'm writing some code that does a bit of introspection of R6 classes and am
wondering about the "classname" parameter. Its the first parameter to the
"R6Class" class generator generator function, and the few examples I've
looked at on CRAN set it the same as the name of the generator function,
for example, from the docs:

Queue <- R6Class("Queue", .....)

but this isn't mandatory, it can be anything. Or NULL. (side quest: do
linters exist that flag this as bad style?).

Does anyone have an example of a CRAN package where this isn't the case? Or
even where an R6 class generator uses the default "NULL" for its classname
parameter? My introspection code is in two minds whether to use the
classname to label diagrams of classes, or to use the names of the actual
generator functions (which are what the package users should be using), or
show both if different, or flag up NULL values etc...

Never should have opened this can of worms. I don't even like worms.

Barry

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar 11 14:32:31 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 11 Mar 2024 09:32:31 -0400
Subject: [Rd] R6 "classname" and generator name
In-Reply-To: <CANVKczP7UBx4b9=qXeBHXbf4S4p_MG+S50VPJ7_ze8Rj3U20DQ@mail.gmail.com>
References: <CANVKczP7UBx4b9=qXeBHXbf4S4p_MG+S50VPJ7_ze8Rj3U20DQ@mail.gmail.com>
Message-ID: <91b89e18-424c-4613-90cd-7a172a3276e2@gmail.com>

On 11/03/2024 8:15 a.m., Barry Rowlingson wrote:
> I'm writing some code that does a bit of introspection of R6 classes and am
> wondering about the "classname" parameter. Its the first parameter to the
> "R6Class" class generator generator function, and the few examples I've
> looked at on CRAN set it the same as the name of the generator function,
> for example, from the docs:
> 
> Queue <- R6Class("Queue", .....)
> 
> but this isn't mandatory, it can be anything. Or NULL. (side quest: do
> linters exist that flag this as bad style?).
> 
> Does anyone have an example of a CRAN package where this isn't the case? Or
> even where an R6 class generator uses the default "NULL" for its classname
> parameter? My introspection code is in two minds whether to use the
> classname to label diagrams of classes, or to use the names of the actual
> generator functions (which are what the package users should be using), or
> show both if different, or flag up NULL values etc...
> 
> Never should have opened this can of worms. I don't even like worms.

Here's an example:

https://github.com/saraswatmks/superml/blob/0d7f6aea09968267a11612475424d4635d57877c/R/RandomSearch.R#L11-L12

I don't have any idea if this is intentional or not.

Duncan Murdoch


From therne@u @end|ng |rom m@yo@edu  Mon Mar 11 16:43:46 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 11 Mar 2024 10:43:46 -0500
Subject: [Rd] Vignettes with long compute time
Message-ID: <d2a753$lln78o@ironport10.mayo.edu>

Is there a way to include the compiled version of a vignette in the doc directory but mark 
it to NOT be rerun by CRAN??? I think I remember that this is possible, but have forgotton 
how.?? (It might even be a false memory.)

Terry T.

Background:? Beth Atkinson and I are splitting out many of the vignettes from the survival 
package into a separate package survivalVignettes.? There are a few reasons

 ?1. Some vignettes use packages outside of the base + recommended set; psueodovalues for 
instance are normally used as input to a subsequent GEE model.??? Since survival is itself 
a recommended package, it can't legally host the pseudo.Rnw vignette.
 ?2. The set of vignettes for survival is large, and likely to get larger.??? It makes 
sense to slim down the size of the package itself.
 ?3. It allows us to use Rmd.? (Again, survival can't use anything outside of base + 
recommended).
 ?4. We have a couple of 'optional' vignettes that talk about edge cases, useful to some 
people but not worth the size cost of cluttering up the main package.

The current submission fails due to one vignette in group 4 which takes a looong time to 
run.? This vignette in particular is talking about compute time, and illustrates a cases 
where an O(n^2) case arises.?? As sentence that warns the use "of you do this it will take 
hours to run" is a perfect case for a pdf that should not be recreated by R CMD check.

-- 
Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


From trevor@|@d@v|@ @end|ng |rom gm@||@com  Mon Mar 11 16:59:31 2024
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Mon, 11 Mar 2024 08:59:31 -0700
Subject: [Rd] Vignettes with long compute time
In-Reply-To: <d2a753$lln78o@ironport10.mayo.edu>
References: <d2a753$lln78o@ironport10.mayo.edu>
Message-ID: <CAMigB8GOmZWSY-OQPPmhA4eb1AzwopFM1tGOiyDJDue4Rm=TGA@mail.gmail.com>

> Is there a way to include the compiled version of a vignette in the doc
directory but mark
it to NOT be rerun by CRAN?

Some developers "precompute" their vignettes so CRAN has nothing left to
run: https://ropensci.org/blog/2019/12/08/precompute-vignettes/

> Beth Atkinson and I are splitting out many of the vignettes from the
survival
package into a separate package survivalVignettes.

An alternative some authors use is to temporarily use a special
`.Rbuildignore` file to omit large vignettes when building the CRAN package
but don't use that file for the normal development version (so that all the
vignettes are available in the `{pkgdown}` website and for users who
install using alternative channels like `remotes::install_github()`).

Trevor

On Mon, Mar 11, 2024 at 8:44?AM Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

> Is there a way to include the compiled version of a vignette in the doc
> directory but mark
> it to NOT be rerun by CRAN?   I think I remember that this is possible,
> but have forgotton
> how.   (It might even be a false memory.)
>
> Terry T.
>
> Background:  Beth Atkinson and I are splitting out many of the vignettes
> from the survival
> package into a separate package survivalVignettes.  There are a few reasons
>
>   1. Some vignettes use packages outside of the base + recommended set;
> psueodovalues for
> instance are normally used as input to a subsequent GEE model.    Since
> survival is itself
> a recommended package, it can't legally host the pseudo.Rnw vignette.
>   2. The set of vignettes for survival is large, and likely to get
> larger.    It makes
> sense to slim down the size of the package itself.
>   3. It allows us to use Rmd.  (Again, survival can't use anything outside
> of base +
> recommended).
>   4. We have a couple of 'optional' vignettes that talk about edge cases,
> useful to some
> people but not worth the size cost of cluttering up the main package.
>
> The current submission fails due to one vignette in group 4 which takes a
> looong time to
> run.  This vignette in particular is talking about compute time, and
> illustrates a cases
> where an O(n^2) case arises.   As sentence that warns the use "of you do
> this it will take
> hours to run" is a perfect case for a pdf that should not be recreated by
> R CMD check.
>
> --
> Terry M Therneau, PhD
> Department of Quantitative Health Sciences
> Mayo Clinic
> therneau at mayo.edu
>
> "TERR-ree THUR-noh"
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar 11 17:12:55 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 11 Mar 2024 12:12:55 -0400
Subject: [Rd] Vignettes with long compute time
In-Reply-To: <d2a753$lln78o@ironport10.mayo.edu>
References: <d2a753$lln78o@ironport10.mayo.edu>
Message-ID: <ad0acfd2-919b-4cd4-b1db-81aeaec891a4@gmail.com>

On 11/03/2024 11:43 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> Is there a way to include the compiled version of a vignette in the doc directory but mark
> it to NOT be rerun by CRAN??? I think I remember that this is possible, but have forgotton
> how.?? (It might even be a false memory.)

You could use a method similar to the testthat::skip_on_cran() approach. 
  Have the long running chunks only run conditional on having a special 
environment variable present.  This would be a little easier with knitr 
than with Sweave, since there you can use expressions for the chunk 
options, but you could always write the code something like this:

   if (Sys.getenv("RUN_SLOW_CHUNKS", 0)) {

     ... the slow code goes here ...

   } else
     cat("This chunk takes several hours to compute.  If you want to run
          it, set the environment variable RUN_SLOW_CHUNKS to 1.\n")

Duncan Murdoch

> 
> Terry T.
> 
> Background:? Beth Atkinson and I are splitting out many of the vignettes from the survival
> package into a separate package survivalVignettes.? There are a few reasons
> 
>   ?1. Some vignettes use packages outside of the base + recommended set; psueodovalues for
> instance are normally used as input to a subsequent GEE model.??? Since survival is itself
> a recommended package, it can't legally host the pseudo.Rnw vignette.
>   ?2. The set of vignettes for survival is large, and likely to get larger.??? It makes
> sense to slim down the size of the package itself.
>   ?3. It allows us to use Rmd.? (Again, survival can't use anything outside of base +
> recommended).
>   ?4. We have a couple of 'optional' vignettes that talk about edge cases, useful to some
> people but not worth the size cost of cluttering up the main package.
> 
> The current submission fails due to one vignette in group 4 which takes a looong time to
> run.? This vignette in particular is talking about compute time, and illustrates a cases
> where an O(n^2) case arises.?? As sentence that warns the use "of you do this it will take
> hours to run" is a perfect case for a pdf that should not be recreated by R CMD check.
>


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Tue Mar 12 20:33:17 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 12 Mar 2024 12:33:17 -0700
Subject: [Rd] Spurious warning in as.data.frame.factor()
Message-ID: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>

Hi,

The acrobatics that as.data.frame.factor() is going thru in order to 
recognize a direct call don't play nice if as.data.frame() is an S4 
generic:

 ??? df <- as.data.frame(factor(11:12))

 ??? suppressPackageStartupMessages(library(BiocGenerics))
 ??? isGeneric("as.data.frame")
 ??? # [1] TRUE

 ??? df <- as.data.frame(factor(11:12))
 ??? # Warning message:
 ??? # In as.data.frame.factor(factor(11:12)) :
 ??? # ? Direct call of 'as.data.frame.factor()' is deprecated. Use 
'as.data.frame.vector()' or 'as.data.frame()' instead

This spurious warning showed up on the recent Bioconductor daily build 
reports after we've updated the build machines to the latest R devel. 
It's causing some confusion and breaks at least one unit test.

Thanks,

H.

 > sessionInfo()
R Under development (unstable) (2024-03-06 r86056)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 22.04.4 LTS

Matrix products: default
BLAS:?? /home/biocbuild/bbs-3.19-bioc/R/lib/libRblas.so
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0

locale:
 ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
 ?[3] LC_TIME=en_GB????????????? LC_COLLATE=en_US.UTF-8
 ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
 ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
 ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

time zone: America/New_York
tzcode source: system (glibc)

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

other attached packages:
[1] BiocGenerics_0.49.1

loaded via a namespace (and not attached):
[1] compiler_4.4.0

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Wed Mar 13 09:02:25 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 13 Mar 2024 11:02:25 +0300
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
Message-ID: <20240313110225.0c39202b@Tarkus>

? Tue, 12 Mar 2024 12:33:17 -0700
Herv? Pag?s <hpages.on.github at gmail.com> ?????:

> The acrobatics that as.data.frame.factor() is going thru in order to 
> recognize a direct call don't play nice if as.data.frame() is an S4 
> generic:
> 
>  ??? df <- as.data.frame(factor(11:12))
> 
>  ??? suppressPackageStartupMessages(library(BiocGenerics))
>  ??? isGeneric("as.data.frame")
>  ??? # [1] TRUE
> 
>  ??? df <- as.data.frame(factor(11:12))
>  ??? # Warning message:
>  ??? # In as.data.frame.factor(factor(11:12)) :
>  ??? # ? Direct call of 'as.data.frame.factor()' is deprecated.

How about something like the following:

Index: src/library/base/R/zzz.R
===================================================================
--- src/library/base/R/zzz.R	(revision 86109)
+++ src/library/base/R/zzz.R	(working copy)
@@ -681,7 +681,14 @@
     bdy <- body(as.data.frame.vector)
     bdy <- bdy[c(1:2, seq_along(bdy)[-1L])] # taking [(1,2,2:n)] to insert at [2]:
     ## deprecation warning only when not called by method dispatch from as.data.frame():
-    bdy[[2L]] <- quote(if((sys.nframe() <= 1L || !identical(sys.function(-1L), as.data.frame)))
+    bdy[[2L]] <- quote(if((sys.nframe() <= 1L || !(
+	identical(sys.function(-1L), as.data.frame) || (
+	    .isMethodsDispatchOn() &&
+	    methods::is(sys.function(-1L), 'derivedDefaultMethod') &&
+	    identical(
+		sys.function(-1L)@generic,
+		structure('as.data.frame', package = 'base')
+	    )))))
 	.Deprecated(
 	    msg = gettextf(
 		"Direct call of '%s()' is deprecated.  Use '%s()' or
 		'%s()' instead",

The patch passes make check-devel, but I'm not sure how to safely put
setGeneric('as.data.frame'); as.data.frame(factor(1:10)) in a
regression test.

-- 
Best regards,
Ivan


From ht @end|ng |rom he@therturner@net  Wed Mar 13 10:16:16 2024
From: ht @end|ng |rom he@therturner@net (Heather Turner)
Date: Wed, 13 Mar 2024 09:16:16 +0000
Subject: [Rd] R Dev Day @ Imperial, London, Fri Apr 26
Message-ID: <b9a5797c-ccca-4c33-8756-5d931c1730bd@app.fastmail.com>

Dear All,

R Dev Day @ Imperial will take place on Friday 26 April at Imperial College London:
https://pretix.eu/r-contributors/r-dev-day-imperial-2024/

This event is aimed at current or aspiring R contributors based in the UK. Unlike other contributor events, we may not have representation from the R Core Team, however it is a chance for interested folk to get together to learn more, or to work collaboratively on potential contributions to base R.

This R Dev Day is a satellite to London satRday, Saturday 27 April: https://satrday-london-2024.jumpingrivers.com/. Thanks to Jumping Rivers and Imperial Central RSE Team, coffee and lunch breaks are catered for participants.

There is no selective application for this event. Registration is free and open until Sunday 14 April or until places are filled.

Best wishes,

Heather
	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Mar 14 10:41:54 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 14 Mar 2024 10:41:54 +0100
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <20240313110225.0c39202b@Tarkus>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
 <20240313110225.0c39202b@Tarkus>
Message-ID: <26098.50786.729690.363734@stat.math.ethz.ch>


> ? Tue, 12 Mar 2024 12:33:17 -0700
> Herv? Pag?s <hpages.on.github at gmail.com> ?????:

> > The acrobatics that as.data.frame.factor() is going thru in order to 
> > recognize a direct call don't play nice if as.data.frame() is an S4 
> > generic:

> >  ??? df <- as.data.frame(factor(11:12))
> > 
> >  ??? suppressPackageStartupMessages(library(BiocGenerics))
> >  ??? isGeneric("as.data.frame")
> >  ??? # [1] TRUE
> > 
> >  ??? df <- as.data.frame(factor(11:12))
> >  ??? # Warning message:
> >  ??? # In as.data.frame.factor(factor(11:12)) :
> >  ??? # ? Direct call of 'as.data.frame.factor()' is deprecated.

aargh ... yes, all that's been a hack because in the end we do
want to get rid of 12  base (hence "exported") 
as.data.frame.<some>  methods, which will lead to *less*
acrobatics, but alas for now ...


> How about something like the following:

> Index: src/library/base/R/zzz.R
> ===================================================================
> --- src/library/base/R/zzz.R	(revision 86109)
> +++ src/library/base/R/zzz.R	(working copy)
> @@ -681,7 +681,14 @@
>      bdy <- body(as.data.frame.vector)
>      bdy <- bdy[c(1:2, seq_along(bdy)[-1L])] # taking [(1,2,2:n)] to insert at [2]:
>      ## deprecation warning only when not called by method dispatch from as.data.frame():
> -    bdy[[2L]] <- quote(if((sys.nframe() <= 1L || !identical(sys.function(-1L), as.data.frame)))
> +    bdy[[2L]] <- quote(if((sys.nframe() <= 1L || !(
> +	identical(sys.function(-1L), as.data.frame) || (
> +	    .isMethodsDispatchOn() &&
> +	    methods::is(sys.function(-1L), 'derivedDefaultMethod') &&
> +	    identical(
> +		sys.function(-1L)@generic,
> +		structure('as.data.frame', package = 'base')
> +	    )))))
>  	.Deprecated(
>  	    msg = gettextf(
>  		"Direct call of '%s()' is deprecated.  Use '%s()' or
>  		'%s()' instead",

Of course it's "sad" to need even more "acrobatics" ... but as it
should only be temporary {but several years:
       deprecation --> defunct --> complete }
I (as "responsible" of the gymnastics) am grateful for Ivan's proposed
additional S4-related conditions.

Anybody trying S7 examples and see if they work w/o producing
wrong warnings?


> The patch passes make check-devel, but I'm not sure how to safely put
> setGeneric('as.data.frame'); as.data.frame(factor(1:10)) in a
> regression test.

{What's the danger/problem?  we do have "similar" tests in both
  src/library/methods/tests/*.R
  tests/reg-S4.R

 -- maybe we can discuss bi-laterally  (or here, as you prefer)
}

Martin

> -- 
> Best regards,
> Ivan


From |kry|ov @end|ng |rom d|@root@org  Thu Mar 14 12:17:38 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 14 Mar 2024 14:17:38 +0300
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <26098.50786.729690.363734@stat.math.ethz.ch>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
 <20240313110225.0c39202b@Tarkus>
 <26098.50786.729690.363734@stat.math.ethz.ch>
Message-ID: <20240314141738.4f9a73ac@arachnoid>

On Thu, 14 Mar 2024 10:41:54 +0100
Martin Maechler <maechler at stat.math.ethz.ch> wrote:

> Anybody trying S7 examples and see if they work w/o producing
> wrong warnings?

It looks like this is not applicable to S7. If I overwrite
as.data.frame with a newly created S7 generic, it fails to dispatch on
existing S3 classes:

new_generic('as.data.frame', 'x')(factor(1))
# Error: Can't find method for `as.data.frame(S3<factor>)`.

But there is no need to overwrite the generic, because S7 classes
should work with existing S3 generics:

foo <- new_class('foo', parent = class_double)
method(as.data.frame, foo) <- function(x) structure(
 # this is probably not generally correct
 list(x),
 names = deparse1(substitute(x)),
 row.names = seq_len(length(x)),
 class = 'data.frame'
)
str(as.data.frame(foo(pi)))
# 'data.frame':   1 obs. of  1 variable:
#  $ x: <foo> num 3.14

So I think that is nothing to break because S7 methods for
as.data.frame will rely on S3 for dispatch.

> > The patch passes make check-devel, but I'm not sure how to safely
> > put setGeneric('as.data.frame'); as.data.frame(factor(1:10)) in a
> > regression test.  
> 
> {What's the danger/problem?  we do have "similar" tests in both
>   src/library/methods/tests/*.R
>   tests/reg-S4.R
> 
>  -- maybe we can discuss bi-laterally  (or here, as you prefer)
> }

This might be educational for other people wanting to add a regression
test to their patch. I see that tests/reg-tests-1e.R is already running
under options(warn = 2), so if I add the following near line 750
("Deprecation of *direct* calls to as.data.frame.<someVector>")...

# Should not warn for a call from a derivedDefaultMethod to the raw
# S3 method -- implementation detail of S4 dispatch
setGeneric('as.data.frame')
as.data.frame(factor(1))

...then as.data.frame will remain an S4 generic. Should the test then
rm(as.data.frame) and keep going? (Or even keep the S4 generic?) Is
there any hidden state I may be breaking for the rest of the test this
way? The test does pass like this, so this may be worrying about
nothing.

-- 
Best regards,
Ivan


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 15 11:24:22 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 Mar 2024 11:24:22 +0100
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <20240314141738.4f9a73ac@arachnoid>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
 <20240313110225.0c39202b@Tarkus>
 <26098.50786.729690.363734@stat.math.ethz.ch>
 <20240314141738.4f9a73ac@arachnoid>
Message-ID: <26100.8662.133771.419879@stat.math.ethz.ch>

>>>>> Ivan Krylov 
>>>>>     on Thu, 14 Mar 2024 14:17:38 +0300 writes:

    > On Thu, 14 Mar 2024 10:41:54 +0100
    > Martin Maechler <maechler at stat.math.ethz.ch> wrote:

    >> Anybody trying S7 examples and see if they work w/o producing
    >> wrong warnings?

    > It looks like this is not applicable to S7. If I overwrite
    > as.data.frame with a newly created S7 generic, it fails to dispatch on
    > existing S3 classes:

    > new_generic('as.data.frame', 'x')(factor(1))
    > # Error: Can't find method for `as.data.frame(S3<factor>)`.

    > But there is no need to overwrite the generic, because S7 classes
    > should work with existing S3 generics:

    > foo <- new_class('foo', parent = class_double)
    > method(as.data.frame, foo) <- function(x) structure(
    >   # this is probably not generally correct
    >   list(x),
    >   names = deparse1(substitute(x)),
    >   row.names = seq_len(length(x)),
    >   class = 'data.frame'
    > )
    > str(as.data.frame(foo(pi)))
    > # 'data.frame':   1 obs. of  1 variable:
    > #  $ x: <foo> num 3.14

    > So I think that is nothing to break because S7 methods for
    > as.data.frame will rely on S3 for dispatch.

Yes, as it should be.  Thank you for checking..


    >> > The patch passes make check-devel, but I'm not sure how to safely
    >> > put setGeneric('as.data.frame'); as.data.frame(factor(1:10)) in a
    >> > regression test.  
    >> 
    >> {What's the danger/problem?  we do have "similar" tests in both
    >> src/library/methods/tests/*.R
    >> tests/reg-S4.R
    >> 
    >> -- maybe we can discuss bi-laterally  (or here, as you prefer)
    >> }

    > This might be educational for other people wanting to add a regression
    > test to their patch. I see that tests/reg-tests-1e.R is already running
    > under options(warn = 2), so if I add the following near line 750
    > ("Deprecation of *direct* calls to as.data.frame.<someVector>")...

    > # Should not warn for a call from a derivedDefaultMethod to the raw
    > # S3 method -- implementation detail of S4 dispatch
    > setGeneric('as.data.frame')
    > as.data.frame(factor(1))

    > ...then as.data.frame will remain an S4 generic. Should the test then
    > rm(as.data.frame) and keep going? (Or even keep the S4 generic?) Is
    > there any hidden state I may be breaking for the rest of the test this
    > way? 
    > The test does pass like this, so this may be worrying about nothing.

Indeed, this could be educational;  I think just adding

     removeGeneric('as.data.frame')

is appropriate here as it is self-explaining and should not leave
much traces.

I'm about to test this in reg-tests-1e.R and with make check-all
and commit later today,
thanking you, Ivan!

Martin


From edd @end|ng |rom deb|@n@org  Fri Mar 15 13:50:01 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 15 Mar 2024 07:50:01 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
Message-ID: <26100.17401.311680.961701@rob.eddelbuettel.com>


Years ago Duncan set up a nightly job to feed RSS based off changes to NEWS,
borrowing some setup parts from CRANberries as for example the RSS 'compiler'.

That job is currently showing the new \I{...} curly protection in an
unfavourable light. Copying from the RSS reader I had pointed at this since
the start [1], for today I see (indented by four spaces)

    CHANGES IN R-devel INSTALLATION on WINDOWS
    
    The makefiles and installer scripts for Windows have been tailored to
    \IRtools44, an update of the \IRtools43 toolchain. It is based on GCC 13
    and newer versions of \IMinGW-W64, \Ibinutils and libraries (targeting
    64-bit Intel CPUs). R-devel can no longer be built using \IRtools43
    without changes. 

    \IRtools44 has experimental suport for 64-bit ARM (aarch64) CPUs via LLVM
    17 toolchain using lld, clang/flang-new and libc++. 

Can some kind soul put a filter over it to remove the \I ?

Thanks,  Dirk

[1] Feedly. Unless we set this up so early that I once used Google
Reader. It's been a while...

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Fri Mar 15 17:04:14 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Fri, 15 Mar 2024 17:04:14 +0100
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26100.17401.311680.961701@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
Message-ID: <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>

Hi!

Thanks for this service! It is very helpful to know what is being developed.

I distribute the content to other venues and I noticed some times that the
updates are duplicated.
For example, the sentence "?is.R()? is deprecated as no other S dialect is
known to be in use (and this could only identify historical dialects, not
future ones)." is duplicated in different days:
Day 1:
https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/07#n2024-03-07
Day 2:
https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/09#n2024-03-09

I tried to look up how to avoid duplications with Blosxom
<http://blosxom.sourceforge.net/> but I didn't find a way.
It would be great if this could be further improved to avoid this
duplication.

Thanks!

Llu?s

On Fri, 15 Mar 2024 at 13:50, Dirk Eddelbuettel <edd at debian.org> wrote:

>
> Years ago Duncan set up a nightly job to feed RSS based off changes to
> NEWS,
> borrowing some setup parts from CRANberries as for example the RSS
> 'compiler'.
>
> That job is currently showing the new \I{...} curly protection in an
> unfavourable light. Copying from the RSS reader I had pointed at this since
> the start [1], for today I see (indented by four spaces)
>
>     CHANGES IN R-devel INSTALLATION on WINDOWS
>
>     The makefiles and installer scripts for Windows have been tailored to
>     \IRtools44, an update of the \IRtools43 toolchain. It is based on GCC
> 13
>     and newer versions of \IMinGW-W64, \Ibinutils and libraries (targeting
>     64-bit Intel CPUs). R-devel can no longer be built using \IRtools43
>     without changes.
>
>     \IRtools44 has experimental suport for 64-bit ARM (aarch64) CPUs via
> LLVM
>     17 toolchain using lld, clang/flang-new and libc++.
>
> Can some kind soul put a filter over it to remove the \I ?
>
> Thanks,  Dirk
>
> [1] Feedly. Unless we set this up so early that I once used Google
> Reader. It's been a while...
>
> --
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar 15 17:42:54 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 15 Mar 2024 12:42:54 -0400
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
Message-ID: <4d680779-c5cd-448d-8aed-add354c81466@gmail.com>

Usually the duplication happens because there's a small change between 
the entries, e.g. a spelling correction.  Other times it's not 
duplication, but a substantive change to the NEWS entry, so those really 
should be duplicated.

I can't spot a change in the example you gave, so it's probably a change 
to the white space.  The comparison code tries to ignore those changes, 
but it doesn't always get it right.

Sometime I should put the code on Github so others can fix bugs like 
this.  It's currently in a private SVN repository (and has been since I 
wrote it about 16 years ago).

Duncan Murdoch

On 15/03/2024 12:04 p.m., Llu?s Revilla wrote:
> Hi!
> 
> Thanks for this service! It is very helpful to know what is being developed.
> 
> I distribute the content to other venues and I noticed some times that the
> updates are duplicated.
> For example, the sentence "?is.R()? is deprecated as no other S dialect is
> known to be in use (and this could only identify historical dialects, not
> future ones)." is duplicated in different days:
> Day 1:
> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/07#n2024-03-07
> Day 2:
> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/09#n2024-03-09
> 
> I tried to look up how to avoid duplications with Blosxom
> <http://blosxom.sourceforge.net/> but I didn't find a way.
> It would be great if this could be further improved to avoid this
> duplication.
> 
> Thanks!
> 
> Llu?s
> 
> On Fri, 15 Mar 2024 at 13:50, Dirk Eddelbuettel <edd at debian.org> wrote:
> 
>>
>> Years ago Duncan set up a nightly job to feed RSS based off changes to
>> NEWS,
>> borrowing some setup parts from CRANberries as for example the RSS
>> 'compiler'.
>>
>> That job is currently showing the new \I{...} curly protection in an
>> unfavourable light. Copying from the RSS reader I had pointed at this since
>> the start [1], for today I see (indented by four spaces)
>>
>>      CHANGES IN R-devel INSTALLATION on WINDOWS
>>
>>      The makefiles and installer scripts for Windows have been tailored to
>>      \IRtools44, an update of the \IRtools43 toolchain. It is based on GCC
>> 13
>>      and newer versions of \IMinGW-W64, \Ibinutils and libraries (targeting
>>      64-bit Intel CPUs). R-devel can no longer be built using \IRtools43
>>      without changes.
>>
>>      \IRtools44 has experimental suport for 64-bit ARM (aarch64) CPUs via
>> LLVM
>>      17 toolchain using lld, clang/flang-new and libc++.
>>
>> Can some kind soul put a filter over it to remove the \I ?
>>
>> Thanks,  Dirk
>>
>> [1] Feedly. Unless we set this up so early that I once used Google
>> Reader. It's been a while...
>>
>> --
>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 15 18:26:30 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 Mar 2024 18:26:30 +0100
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <26100.8662.133771.419879@stat.math.ethz.ch>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
 <20240313110225.0c39202b@Tarkus>
 <26098.50786.729690.363734@stat.math.ethz.ch>
 <20240314141738.4f9a73ac@arachnoid>
 <26100.8662.133771.419879@stat.math.ethz.ch>
Message-ID: <26100.33990.309092.728439@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 15 Mar 2024 11:24:22 +0100 writes:

>>>>> Ivan Krylov 
>>>>>     on Thu, 14 Mar 2024 14:17:38 +0300 writes:

    >> On Thu, 14 Mar 2024 10:41:54 +0100
    >> Martin Maechler <maechler at stat.math.ethz.ch> wrote:

    >>> Anybody trying S7 examples and see if they work w/o producing
    >>> wrong warnings?

    >> It looks like this is not applicable to S7. If I overwrite
    >> as.data.frame with a newly created S7 generic, it fails to dispatch on
    >> existing S3 classes:

    >> new_generic('as.data.frame', 'x')(factor(1))
    >> # Error: Can't find method for `as.data.frame(S3<factor>)`.

    >> But there is no need to overwrite the generic, because S7 classes
    >> should work with existing S3 generics:

    >> foo <- new_class('foo', parent = class_double)
    >> method(as.data.frame, foo) <- function(x) structure(
    >> # this is probably not generally correct
    >> list(x),
    >> names = deparse1(substitute(x)),
    >> row.names = seq_len(length(x)),
    >> class = 'data.frame'
    >> )
    >> str(as.data.frame(foo(pi)))
    >> # 'data.frame':   1 obs. of  1 variable:
    >> #  $ x: <foo> num 3.14

    >> So I think that is nothing to break because S7 methods for
    >> as.data.frame will rely on S3 for dispatch.

    > Yes, as it should be.  Thank you for checking..


    >>> > The patch passes make check-devel, but I'm not sure how to safely
    >>> > put setGeneric('as.data.frame'); as.data.frame(factor(1:10)) in a
    >>> > regression test.  
    >>> 
    >>> {What's the danger/problem?  we do have "similar" tests in both
    >>> src/library/methods/tests/*.R
    >>> tests/reg-S4.R
    >>> 
    >>> -- maybe we can discuss bi-laterally  (or here, as you prefer)
    >>> }

    >> This might be educational for other people wanting to add a regression
    >> test to their patch. I see that tests/reg-tests-1e.R is already running
    >> under options(warn = 2), so if I add the following near line 750
    >> ("Deprecation of *direct* calls to as.data.frame.<someVector>")...

    >> # Should not warn for a call from a derivedDefaultMethod to the raw
    >> # S3 method -- implementation detail of S4 dispatch
    >> setGeneric('as.data.frame')
    >> as.data.frame(factor(1))

    >> ...then as.data.frame will remain an S4 generic. Should the test then
    >> rm(as.data.frame) and keep going? (Or even keep the S4 generic?) Is
    >> there any hidden state I may be breaking for the rest of the test this
    >> way? 
    >> The test does pass like this, so this may be worrying about nothing.

    > Indeed, this could be educational;  I think just adding

    > removeGeneric('as.data.frame')

    > is appropriate here as it is self-explaining and should not leave
    > much traces.

    > I'm about to test this in reg-tests-1e.R and with make check-all
    > and commit later today,
    > thanking you, Ivan!

This has been committed to R-devel svn rev 86139 now.

So these spurious warnings in situations where  as.data.frame()
is an S4 generic --- notably for the many Bioconductor package
depending on {BiocGenerics} ---  should disappear within 24
hours or less.

Martin


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Mar 16 13:47:45 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 16 Mar 2024 08:47:45 -0400
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
Message-ID: <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>

I have now put the files online at https://github.com/dmurdoch/diffnews 
.  It seemed like too much trouble to include the SVN history, so this 
is just a copy of the current version of the files.

Duncan Murdoch

On 15/03/2024 12:04 p.m., Llu?s Revilla wrote:
> Hi!
> 
> Thanks for this service! It is very helpful to know what is being developed.
> 
> I distribute the content to other venues and I noticed some times that the
> updates are duplicated.
> For example, the sentence "?is.R()? is deprecated as no other S dialect is
> known to be in use (and this could only identify historical dialects, not
> future ones)." is duplicated in different days:
> Day 1:
> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/07#n2024-03-07
> Day 2:
> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/09#n2024-03-09
> 
> I tried to look up how to avoid duplications with Blosxom
> <http://blosxom.sourceforge.net/> but I didn't find a way.
> It would be great if this could be further improved to avoid this
> duplication.
> 
> Thanks!
> 
> Llu?s
> 
> On Fri, 15 Mar 2024 at 13:50, Dirk Eddelbuettel <edd at debian.org> wrote:
> 
>>
>> Years ago Duncan set up a nightly job to feed RSS based off changes to
>> NEWS,
>> borrowing some setup parts from CRANberries as for example the RSS
>> 'compiler'.
>>
>> That job is currently showing the new \I{...} curly protection in an
>> unfavourable light. Copying from the RSS reader I had pointed at this since
>> the start [1], for today I see (indented by four spaces)
>>
>>      CHANGES IN R-devel INSTALLATION on WINDOWS
>>
>>      The makefiles and installer scripts for Windows have been tailored to
>>      \IRtools44, an update of the \IRtools43 toolchain. It is based on GCC
>> 13
>>      and newer versions of \IMinGW-W64, \Ibinutils and libraries (targeting
>>      64-bit Intel CPUs). R-devel can no longer be built using \IRtools43
>>      without changes.
>>
>>      \IRtools44 has experimental suport for 64-bit ARM (aarch64) CPUs via
>> LLVM
>>      17 toolchain using lld, clang/flang-new and libc++.
>>
>> Can some kind soul put a filter over it to remove the \I ?
>>
>> Thanks,  Dirk
>>
>> [1] Feedly. Unless we set this up so early that I once used Google
>> Reader. It's been a while...
>>
>> --
>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Sun Mar 17 21:40:28 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sun, 17 Mar 2024 23:40:28 +0300
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <26100.8662.133771.419879@stat.math.ethz.ch>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
 <20240313110225.0c39202b@Tarkus>
 <26098.50786.729690.363734@stat.math.ethz.ch>
 <20240314141738.4f9a73ac@arachnoid>
 <26100.8662.133771.419879@stat.math.ethz.ch>
Message-ID: <20240317234028.40ab69fb@Tarkus>

On Fri, 15 Mar 2024 11:24:22 +0100
Martin Maechler <maechler at stat.math.ethz.ch> wrote:

> I think just adding
> 
>      removeGeneric('as.data.frame')
> 
> is appropriate here as it is self-explaining and should not leave
> much traces.

Thanks for letting me know! I'll make sure to use removeGeneric() in
similar cases in the future.

-- 
Best regards,
Ivan


From pd@me@ @end|ng |rom cb@@dk  Mon Mar 18 14:01:49 2024
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Mon, 18 Mar 2024 13:01:49 +0000
Subject: [Rd] R 4.4.0 scheduled for April 24
Message-ID: <8316F3E9-6465-4FA5-BE2F-019E8C2B45FA@cbs.dk>

Full schedule is available on developer.r-project.org (pending update from SVN).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Mon Mar 18 19:36:20 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Mon, 18 Mar 2024 11:36:20 -0700
Subject: [Rd] Spurious warning in as.data.frame.factor()
In-Reply-To: <26100.33990.309092.728439@stat.math.ethz.ch>
References: <ace9e76c-bad0-4eb3-b3f8-c9cccd6e9a9d@gmail.com>
 <20240313110225.0c39202b@Tarkus>
 <26098.50786.729690.363734@stat.math.ethz.ch>
 <20240314141738.4f9a73ac@arachnoid>
 <26100.8662.133771.419879@stat.math.ethz.ch>
 <26100.33990.309092.728439@stat.math.ethz.ch>
Message-ID: <17eb0f6d-b448-46a7-84da-220080e09099@gmail.com>

Thanks Martin. We'll update the BioC builders to the latest R devel soon.

Cheers,

H.

On 3/15/24 10:26, Martin Maechler wrote:
>>>>>> Martin Maechler
>>>>>>      on Fri, 15 Mar 2024 11:24:22 +0100 writes:
>>>>>> Ivan Krylov
>>>>>>      on Thu, 14 Mar 2024 14:17:38 +0300 writes:
>      >> On Thu, 14 Mar 2024 10:41:54 +0100
>      >> Martin Maechler<maechler at stat.math.ethz.ch>  wrote:
>
>      >>> Anybody trying S7 examples and see if they work w/o producing
>      >>> wrong warnings?
>
>      >> It looks like this is not applicable to S7. If I overwrite
>      >> as.data.frame with a newly created S7 generic, it fails to dispatch on
>      >> existing S3 classes:
>
>      >> new_generic('as.data.frame', 'x')(factor(1))
>      >> # Error: Can't find method for `as.data.frame(S3<factor>)`.
>
>      >> But there is no need to overwrite the generic, because S7 classes
>      >> should work with existing S3 generics:
>
>      >> foo <- new_class('foo', parent = class_double)
>      >> method(as.data.frame, foo) <- function(x) structure(
>      >> # this is probably not generally correct
>      >> list(x),
>      >> names = deparse1(substitute(x)),
>      >> row.names = seq_len(length(x)),
>      >> class = 'data.frame'
>      >> )
>      >> str(as.data.frame(foo(pi)))
>      >> # 'data.frame':   1 obs. of  1 variable:
>      >> #  $ x: <foo> num 3.14
>
>      >> So I think that is nothing to break because S7 methods for
>      >> as.data.frame will rely on S3 for dispatch.
>
>      > Yes, as it should be.  Thank you for checking..
>
>
>      >>> > The patch passes make check-devel, but I'm not sure how to safely
>      >>> > put setGeneric('as.data.frame'); as.data.frame(factor(1:10)) in a
>      >>> > regression test.
>      >>>
>      >>> {What's the danger/problem?  we do have "similar" tests in both
>      >>> src/library/methods/tests/*.R
>      >>> tests/reg-S4.R
>      >>>
>      >>> -- maybe we can discuss bi-laterally  (or here, as you prefer)
>      >>> }
>
>      >> This might be educational for other people wanting to add a regression
>      >> test to their patch. I see that tests/reg-tests-1e.R is already running
>      >> under options(warn = 2), so if I add the following near line 750
>      >> ("Deprecation of *direct* calls to as.data.frame.<someVector>")...
>
>      >> # Should not warn for a call from a derivedDefaultMethod to the raw
>      >> # S3 method -- implementation detail of S4 dispatch
>      >> setGeneric('as.data.frame')
>      >> as.data.frame(factor(1))
>
>      >> ...then as.data.frame will remain an S4 generic. Should the test then
>      >> rm(as.data.frame) and keep going? (Or even keep the S4 generic?) Is
>      >> there any hidden state I may be breaking for the rest of the test this
>      >> way?
>      >> The test does pass like this, so this may be worrying about nothing.
>
>      > Indeed, this could be educational;  I think just adding
>
>      > removeGeneric('as.data.frame')
>
>      > is appropriate here as it is self-explaining and should not leave
>      > much traces.
>
>      > I'm about to test this in reg-tests-1e.R and with make check-all
>      > and commit later today,
>      > thanking you, Ivan!
>
> This has been committed to R-devel svn rev 86139 now.
>
> So these spurious warnings in situations where  as.data.frame()
> is an S4 generic --- notably for the many Bioconductor package
> depending on {BiocGenerics} ---  should disappear within 24
> hours or less.
>
> Martin

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From d@v|@ @end|ng |rom po@|t@co  Thu Mar 21 20:10:29 2024
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Thu, 21 Mar 2024 15:10:29 -0400
Subject: [Rd] `as.data.frame.matrix()` can produce a data frame without a
 `names` attribute
Message-ID: <CABzLhzzAVngai10h=Wk=XchSyv6aHWUd2AfzFCEsgkTJSJx=sw@mail.gmail.com>

Hi all,

I recently learned that it is possible for `as.data.frame.matrix()` to
produce a data frame with 0 columns that is also entirely missing a
`names` attribute, and I think this is a bug:

```
# No `names`, weird!
attributes(as.data.frame(matrix(nrow = 0, ncol = 0)))
#> $class
#> [1] "data.frame"
#>
#> $row.names
#> integer(0)

# This is what I expected
attributes(data.frame())
#> $names
#> character(0)
#>
#> $row.names
#> integer(0)
#>
#> $class
#> [1] "data.frame"
```

In my experience, 0 column data frames should probably still have a
`names` attribute, and it should be set to `character()`. Some
evidence to support my theory is that OOB subsetting doesn't give the
intended error with this weird data frame:

```
# Good OOB error
df <- data.frame()
df[1]
#> Error in `[.data.frame`(df, 1): undefined columns selected

# This is weird!
df <- as.data.frame(matrix(nrow = 0, ncol = 0))
df[1]
#> NULL
#> <0 rows> (or 0-length row.names)
```

The one exception to requiring a `names` attribute that I can think of
is `as.data.frame(optional = TRUE)`, mostly for internal use by
`data.frame()` on each of the columns, but that doesn't seem to apply
here.

Thanks,
Davis Vaughan


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 22 11:17:34 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 22 Mar 2024 11:17:34 +0100
Subject: [Rd] 
 `as.data.frame.matrix()` can produce a data frame without a
 `names` attribute
In-Reply-To: <CABzLhzzAVngai10h=Wk=XchSyv6aHWUd2AfzFCEsgkTJSJx=sw@mail.gmail.com>
References: <CABzLhzzAVngai10h=Wk=XchSyv6aHWUd2AfzFCEsgkTJSJx=sw@mail.gmail.com>
Message-ID: <26109.23230.960675.591255@stat.math.ethz.ch>

>>>>> Davis Vaughan via R-devel 
>>>>>     on Thu, 21 Mar 2024 15:10:29 -0400 writes:

    > Hi all,

    > I recently learned that it is possible for
    > `as.data.frame.matrix()` to produce a data frame with 0
    > columns that is also entirely missing a `names` attribute,
    > and I think this is a bug:

    > ``` # No `names`, weird!
    > attributes(as.data.frame(matrix(nrow = 0, ncol = 0))) #>
    > $class #> [1] "data.frame"
    > #>
    > #> $row.names #> integer(0)

    > # This is what I expected attributes(data.frame()) #>
    > $names #> character(0)
    > #>
    > #> $row.names #> integer(0)
    > #>
    > #> $class #> [1] "data.frame" ```

    > In my experience, 0 column data frames should probably
    > still have a `names` attribute, and it should be set to
    > `character()`. 

I agree.

A (very nice IMO) patch  I'm currently testing is

317c317
< 	names(value) <- collabs
---
> 	names(value) <- collabs %||% character()

Martin

    > Some evidence to support my theory is that
    > OOB subsetting doesn't give the intended error with this
    > weird data frame:

    > ``` # Good OOB error df <- data.frame() df[1] #> Error in
    > `[.data.frame`(df, 1): undefined columns selected

    > # This is weird!  df <- as.data.frame(matrix(nrow = 0,
    > ncol = 0)) df[1] #> NULL #> <0 rows> (or 0-length
    > row.names) ```

    > The one exception to requiring a `names` attribute that I
    > can think of is `as.data.frame(optional = TRUE)`, mostly
    > for internal use by `data.frame()` on each of the columns,
    > but that doesn't seem to apply here.

    > Thanks, Davis Vaughan

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 22 11:54:34 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 22 Mar 2024 11:54:34 +0100
Subject: [Rd] 
 `as.data.frame.matrix()` can produce a data frame without a
 `names` attribute
In-Reply-To: <26109.23230.960675.591255@stat.math.ethz.ch>
References: <CABzLhzzAVngai10h=Wk=XchSyv6aHWUd2AfzFCEsgkTJSJx=sw@mail.gmail.com>
 <26109.23230.960675.591255@stat.math.ethz.ch>
Message-ID: <26109.25450.818514.709801@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 22 Mar 2024 11:17:34 +0100 writes:

>>>>> Davis Vaughan via R-devel 
>>>>>     on Thu, 21 Mar 2024 15:10:29 -0400 writes:

    >> Hi all,

    >> I recently learned that it is possible for
    >> `as.data.frame.matrix()` to produce a data frame with 0
    >> columns that is also entirely missing a `names`
    >> attribute, and I think this is a bug:

    >> ``` # No `names`, weird!
    >> attributes(as.data.frame(matrix(nrow = 0, ncol = 0))) #>
    >> $class #> [1] "data.frame"
    >> #>
    >> #> $row.names #> integer(0)

    >> # This is what I expected attributes(data.frame()) #>
    >> $names #> character(0)
    >> #>
    >> #> $row.names #> integer(0)
    >> #>
    >> #> $class #> [1] "data.frame" ```

    >> In my experience, 0 column data frames should probably
    >> still have a `names` attribute, and it should be set to
    >> `character()`.

    > I agree.

    > A (very nice IMO) patch I'm currently testing is

>     317c317
>     < 	names(value) <- collabs
>     ---
>     > 	names(value) <- collabs %||% character()


Commited to R's (R-devel) sources in svn rev 86169   .. to
become R 4.4.0 soonish.

Martin


From ht @end|ng |rom he@therturner@net  Fri Mar 22 15:43:56 2024
From: ht @end|ng |rom he@therturner@net (Heather Turner)
Date: Fri, 22 Mar 2024 14:43:56 +0000
Subject: [Rd] R Dev Day @ PLUS, Salzburg, Austria on Fri 12 July
In-Reply-To: <1fe3f234-f06e-47b0-8f6c-1bc38ebc9fe9@app.fastmail.com>
References: <1fe3f234-f06e-47b0-8f6c-1bc38ebc9fe9@app.fastmail.com>
Message-ID: <3495771b-38a1-4561-a9a9-50dbd3aa5c24@app.fastmail.com>

Reminder that the deadline for applications to this event is end of day Sunday March 24 (anywhere on earth).

On Wed, Feb 28, 2024, at 2:43 PM, Heather Turner wrote:
> Dear All,
>
> Information is now up for the R Dev Day that will take place as a 
> satellite event to useR! 2024 on Friday 12 July:
> https://contributor.r-project.org/r-dev-day-plus-2024
>
> This will be an opportunity for contributors to work alongside members 
> of the R Core Team on contributions to base R.
>
> Places will be allocated via an application process, balancing across 
> experience levels and giving opportunity to members of historically 
> underrepresented groups. 
>
> If you would like to attend, please apply by *Sunday March 24*.
>
> Best wishes,
>
> Heather
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Mon Mar 25 16:40:49 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Mon, 25 Mar 2024 18:40:49 +0300
Subject: [Rd] Wish: a way to track progress of parallel operations
Message-ID: <20240325184049.745179e0@arachnoid>

Hello R-devel,

A function to be run inside lapply() or one of its friends is trivial
to augment with side effects to show a progress bar. When the code is
intended to be run on a 'parallel' cluster, it generally cannot rely on
its own side effects to report progress.

I've found three approaches to progress bars for parallel processes on
CRAN:

 - Importing 'snow' (not 'parallel') internals like sendCall and
   implementing parallel processing on top of them (doSNOW). This has
   the downside of having to write higher-level code from scratch
   using undocumented inferfaces.

 - Splitting the workload into length(cluster)-sized chunks and
   processing them in separate parLapply() calls between updating the
   progress bar (pbapply). This approach trades off parallelism against
   the precision of the progress information: the function has to wait
   until all chunk elements have been processed before updating the
   progress bar and submitting a new portion; dynamic load balancing
   becomes much less efficient.

 - Adding local side effects to the function and detecting them while
   the parallel function is running in a child process (parabar). A
   clever hack, but much harder to extend to distributed clusters.

With recvData and recvOneData becoming exported in R-4.4 [*], another
approach becomes feasible: wrap the cluster object (and all nodes) into
another class, attach the progress callback as an attribute, and let
recvData / recvOneData call it. This makes it possible to give wrapped
cluster objects to unchanged code, but requires knowing the precise
number of chunks that the workload will be split into.

Could it be feasible to add an optional .progress argument after the
ellipsis to parLapply() and its friends? We can require it to be a
function accepting (done_chunk, total_chunks, ...). If not a new
argument, what other interfaces could be used to get accurate progress
information from staticClusterApply and dynamicClusterApply?

I understand that the default parLapply() behaviour is not very
amenable to progress tracking, but when running clusterMap(.scheduling
= 'dynamic') spanning multiple hours if not whole days, having progress
information sets the mind at ease.

I would be happy to prepare code and documentation. If there is no time
now, we can return to it after R-4.4 is released.

-- 
Best regards,
Ivan

[*] https://bugs.r-project.org/show_bug.cgi?id=18587


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Mar 25 18:19:38 2024
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 25 Mar 2024 10:19:38 -0700
Subject: [Rd] Wish: a way to track progress of parallel operations
In-Reply-To: <20240325184049.745179e0@arachnoid>
References: <20240325184049.745179e0@arachnoid>
Message-ID: <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>

Hello,

thanks for bringing this topic up, and it would be excellent if we
could come of with a generic solution for this in base R.  It is one
of the top frequently asked questions and requested features in
parallel processing, but also in sequential processing. We have also
seen lots of variants on how to attack the problem of reporting on
progress when running in parallel.

As the author Futureverse (a parallel framework), I've been exposed to
these requests and I thought quite a bit about how we could solve this
problem. I'll outline my opinionated view and suggestions on this
below:

* Target a solution that works the same regardless whether we run in
parallel or not, i.e. the code/API should look the same regardless of
using, say, parallel::parLapply(), parallel::mclapply(), or
base::lapply(). The solution should also work as-is in other parallel
frameworks.

* Consider who owns the control of whether progress updates should be
reported or not. I believe it's best to separate what the end-user and
the developer controls.  I argue the end-user should be able to
decided whether they want to "see" progress updates or not, and the
developer should focus on where to report on progress, but not how and
when.

* In line with the previous comment, controlling progress reporting
via an argument (e.g. `.progress`) is not powerful enough. With such
an approach, one need to make sure that that argument is exposed and
relayed throughout in all nested function calls. If a package decides
to introduce such an argument, what should the default be? If they set
`.progress = TRUE`, then all of a sudden, any code/packages that
depend on this function will all of a sudden see progress updates.
There are endless per-package versions of this on CRAN and
Bioconductor, any they rarely work in harmony.

* Consider accessibility as well as graphical user interfaces. This
means, don't assume progress is necessarily reported in the terminal.
I found it a good practice to never use the term "progress bar",
because that is too focused on how progress is reported.

* Let the end-user control how progress is reported, e.g. a progress
bar in the terminal, a progress bar in their favorite IDE/GUI,
OS-specific notifications, third-party notification services, auditory
output, etc.

The above objectives challenge you to take a step back and think about
what progress reporting is about, because the most immediate needs.
Based on these, I came up with the 'progressr' package
(https://progressr.futureverse.org/). FWIW, it was originally actually
meant to be a proof-of-concept proposal for a universal, generic
solution to this problem, but as the demands grew and the prototype
showed to be useful, I made it official.  Here is the gist:

* Motto: "The developer is responsible for providing progress updates,
but it?s only the end user who decides if, when, and how progress
should be presented. No exceptions will be allowed."

* It rely on R's condition system to signal progress. The developer
signals progress conditions. Condition handlers, which the end-user
controls, are used to report/render these progress updates. The
support for global condition handlers, introduced in R 4.0.0, makes
this much more convenient. It is useful to think of the condition
mechanism in R as a back channel for communication that operates
separately from the rest of the "communication" stream (calling
functions with arguments and returning value).

* For parallel processing, progress conditions can be relayed back to
the parent process via back channels in a "near-live" fashion, or at
the very end when the parallel task is completed. Technically,
progress conditions inherit from 'immediateCondition', which is a
special class indicating that such conditions are allowed to be
relayed immediately and out of order. It is possible to use the
existing PSOCK socket connections to send such 'immediateCondition':s.

* No assumption is made on progress updates arriving in a certain
order. They are just a stream of "progress of this and that amount"
was made.

* There is a progress handler API. Using this API, various types of
progress reporting can be implemented. This allows anyone to implement
progress handlers in contributed R packages.

See https://progressr.futureverse.org/ for more details.

> I would be happy to prepare code and documentation. If there is no time now, we can return to it after R-4.4 is released.

I strongly recommend to not rush this. This is an important, big
problem that goes beyond the 'parallel' package. I think it would be a
disfavor to introduce a '.progress' argument. As mentioned above, I
think a solution should work throughout the R ecosystem - all base-R
packages and beyond. I honestly think we could arrive at a solution
where base-R proposes a very light, yet powerful, progress API that
handles all of the above. The main task is to come up with a standard
API/protocol - then the implementation does not matter.

/Henrik

On Mon, Mar 25, 2024 at 8:41?AM Ivan Krylov via R-devel
<r-devel at r-project.org> wrote:
>
> Hello R-devel,
>
> A function to be run inside lapply() or one of its friends is trivial
> to augment with side effects to show a progress bar. When the code is
> intended to be run on a 'parallel' cluster, it generally cannot rely on
> its own side effects to report progress.
>
> I've found three approaches to progress bars for parallel processes on
> CRAN:
>
>  - Importing 'snow' (not 'parallel') internals like sendCall and
>    implementing parallel processing on top of them (doSNOW). This has
>    the downside of having to write higher-level code from scratch
>    using undocumented inferfaces.
>
>  - Splitting the workload into length(cluster)-sized chunks and
>    processing them in separate parLapply() calls between updating the
>    progress bar (pbapply). This approach trades off parallelism against
>    the precision of the progress information: the function has to wait
>    until all chunk elements have been processed before updating the
>    progress bar and submitting a new portion; dynamic load balancing
>    becomes much less efficient.
>
>  - Adding local side effects to the function and detecting them while
>    the parallel function is running in a child process (parabar). A
>    clever hack, but much harder to extend to distributed clusters.
>
> With recvData and recvOneData becoming exported in R-4.4 [*], another
> approach becomes feasible: wrap the cluster object (and all nodes) into
> another class, attach the progress callback as an attribute, and let
> recvData / recvOneData call it. This makes it possible to give wrapped
> cluster objects to unchanged code, but requires knowing the precise
> number of chunks that the workload will be split into.
>
> Could it be feasible to add an optional .progress argument after the
> ellipsis to parLapply() and its friends? We can require it to be a
> function accepting (done_chunk, total_chunks, ...). If not a new
> argument, what other interfaces could be used to get accurate progress
> information from staticClusterApply and dynamicClusterApply?
>
> I understand that the default parLapply() behaviour is not very
> amenable to progress tracking, but when running clusterMap(.scheduling
> = 'dynamic') spanning multiple hours if not whole days, having progress
> information sets the mind at ease.
>
> I would be happy to prepare code and documentation. If there is no time
> now, we can return to it after R-4.4 is released.
>
> --
> Best regards,
> Ivan
>
> [*] https://bugs.r-project.org/show_bug.cgi?id=18587
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @erv|ce @end|ng |rom @hd@w@on@com  Mon Mar 25 21:09:04 2024
From: @erv|ce @end|ng |rom @hd@w@on@com (Stephen H. Dawson, DSL)
Date: Mon, 25 Mar 2024 16:09:04 -0400
Subject: [Rd] Wish: a way to track progress of parallel operations
In-Reply-To: <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>
References: <20240325184049.745179e0@arachnoid>
 <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>
Message-ID: <f78f2e0a-8094-600e-5d05-d77a35f0c8d3@shdawson.com>

Thanks Ivan and Henrik for considering this work. It would be a valuable 
contribution.

Kindly,
*Stephen Dawson, DSL*
/Executive Strategy Consultant/
Business & Technology
+1 (865) 804-3454
http://www.shdawson.com


On 3/25/24 13:19, Henrik Bengtsson wrote:
> Hello,
>
> thanks for bringing this topic up, and it would be excellent if we
> could come of with a generic solution for this in base R.  It is one
> of the top frequently asked questions and requested features in
> parallel processing, but also in sequential processing. We have also
> seen lots of variants on how to attack the problem of reporting on
> progress when running in parallel.
>
> As the author Futureverse (a parallel framework), I've been exposed to
> these requests and I thought quite a bit about how we could solve this
> problem. I'll outline my opinionated view and suggestions on this
> below:
>
> * Target a solution that works the same regardless whether we run in
> parallel or not, i.e. the code/API should look the same regardless of
> using, say, parallel::parLapply(), parallel::mclapply(), or
> base::lapply(). The solution should also work as-is in other parallel
> frameworks.
>
> * Consider who owns the control of whether progress updates should be
> reported or not. I believe it's best to separate what the end-user and
> the developer controls.  I argue the end-user should be able to
> decided whether they want to "see" progress updates or not, and the
> developer should focus on where to report on progress, but not how and
> when.
>
> * In line with the previous comment, controlling progress reporting
> via an argument (e.g. `.progress`) is not powerful enough. With such
> an approach, one need to make sure that that argument is exposed and
> relayed throughout in all nested function calls. If a package decides
> to introduce such an argument, what should the default be? If they set
> `.progress = TRUE`, then all of a sudden, any code/packages that
> depend on this function will all of a sudden see progress updates.
> There are endless per-package versions of this on CRAN and
> Bioconductor, any they rarely work in harmony.
>
> * Consider accessibility as well as graphical user interfaces. This
> means, don't assume progress is necessarily reported in the terminal.
> I found it a good practice to never use the term "progress bar",
> because that is too focused on how progress is reported.
>
> * Let the end-user control how progress is reported, e.g. a progress
> bar in the terminal, a progress bar in their favorite IDE/GUI,
> OS-specific notifications, third-party notification services, auditory
> output, etc.
>
> The above objectives challenge you to take a step back and think about
> what progress reporting is about, because the most immediate needs.
> Based on these, I came up with the 'progressr' package
> (https://progressr.futureverse.org/). FWIW, it was originally actually
> meant to be a proof-of-concept proposal for a universal, generic
> solution to this problem, but as the demands grew and the prototype
> showed to be useful, I made it official.  Here is the gist:
>
> * Motto: "The developer is responsible for providing progress updates,
> but it?s only the end user who decides if, when, and how progress
> should be presented. No exceptions will be allowed."
>
> * It rely on R's condition system to signal progress. The developer
> signals progress conditions. Condition handlers, which the end-user
> controls, are used to report/render these progress updates. The
> support for global condition handlers, introduced in R 4.0.0, makes
> this much more convenient. It is useful to think of the condition
> mechanism in R as a back channel for communication that operates
> separately from the rest of the "communication" stream (calling
> functions with arguments and returning value).
>
> * For parallel processing, progress conditions can be relayed back to
> the parent process via back channels in a "near-live" fashion, or at
> the very end when the parallel task is completed. Technically,
> progress conditions inherit from 'immediateCondition', which is a
> special class indicating that such conditions are allowed to be
> relayed immediately and out of order. It is possible to use the
> existing PSOCK socket connections to send such 'immediateCondition':s.
>
> * No assumption is made on progress updates arriving in a certain
> order. They are just a stream of "progress of this and that amount"
> was made.
>
> * There is a progress handler API. Using this API, various types of
> progress reporting can be implemented. This allows anyone to implement
> progress handlers in contributed R packages.
>
> See https://progressr.futureverse.org/ for more details.
>
>> I would be happy to prepare code and documentation. If there is no time now, we can return to it after R-4.4 is released.
> I strongly recommend to not rush this. This is an important, big
> problem that goes beyond the 'parallel' package. I think it would be a
> disfavor to introduce a '.progress' argument. As mentioned above, I
> think a solution should work throughout the R ecosystem - all base-R
> packages and beyond. I honestly think we could arrive at a solution
> where base-R proposes a very light, yet powerful, progress API that
> handles all of the above. The main task is to come up with a standard
> API/protocol - then the implementation does not matter.
>
> /Henrik
>
> On Mon, Mar 25, 2024 at 8:41?AM Ivan Krylov via R-devel
> <r-devel at r-project.org> wrote:
>> Hello R-devel,
>>
>> A function to be run inside lapply() or one of its friends is trivial
>> to augment with side effects to show a progress bar. When the code is
>> intended to be run on a 'parallel' cluster, it generally cannot rely on
>> its own side effects to report progress.
>>
>> I've found three approaches to progress bars for parallel processes on
>> CRAN:
>>
>>   - Importing 'snow' (not 'parallel') internals like sendCall and
>>     implementing parallel processing on top of them (doSNOW). This has
>>     the downside of having to write higher-level code from scratch
>>     using undocumented inferfaces.
>>
>>   - Splitting the workload into length(cluster)-sized chunks and
>>     processing them in separate parLapply() calls between updating the
>>     progress bar (pbapply). This approach trades off parallelism against
>>     the precision of the progress information: the function has to wait
>>     until all chunk elements have been processed before updating the
>>     progress bar and submitting a new portion; dynamic load balancing
>>     becomes much less efficient.
>>
>>   - Adding local side effects to the function and detecting them while
>>     the parallel function is running in a child process (parabar). A
>>     clever hack, but much harder to extend to distributed clusters.
>>
>> With recvData and recvOneData becoming exported in R-4.4 [*], another
>> approach becomes feasible: wrap the cluster object (and all nodes) into
>> another class, attach the progress callback as an attribute, and let
>> recvData / recvOneData call it. This makes it possible to give wrapped
>> cluster objects to unchanged code, but requires knowing the precise
>> number of chunks that the workload will be split into.
>>
>> Could it be feasible to add an optional .progress argument after the
>> ellipsis to parLapply() and its friends? We can require it to be a
>> function accepting (done_chunk, total_chunks, ...). If not a new
>> argument, what other interfaces could be used to get accurate progress
>> information from staticClusterApply and dynamicClusterApply?
>>
>> I understand that the default parLapply() behaviour is not very
>> amenable to progress tracking, but when running clusterMap(.scheduling
>> = 'dynamic') spanning multiple hours if not whole days, having progress
>> information sets the mind at ease.
>>
>> I would be happy to prepare code and documentation. If there is no time
>> now, we can return to it after R-4.4 is released.
>>
>> --
>> Best regards,
>> Ivan
>>
>> [*] https://bugs.r-project.org/show_bug.cgi?id=18587
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Tue Mar 26 12:14:40 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 26 Mar 2024 14:14:40 +0300
Subject: [Rd] Wish: a way to track progress of parallel operations
In-Reply-To: <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>
References: <20240325184049.745179e0@arachnoid>
 <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>
Message-ID: <20240326141440.391746bd@arachnoid>

Henrik,

Thank you for taking the time to read and reply to my message!

On Mon, 25 Mar 2024 10:19:38 -0700
Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:

> * Target a solution that works the same regardless whether we run in
> parallel or not, i.e. the code/API should look the same regardless of
> using, say, parallel::parLapply(), parallel::mclapply(), or
> base::lapply(). The solution should also work as-is in other parallel
> frameworks.

You are absolutely right about mclapply(): it suffers from the same
problem where the task running inside it has no reliable mechanism of
reporting progress. Just like on a 'parallel' cluster (which can be
running on top of an R connection, MPI, the 'mirai' package, a server
pretending to be multiple cluster nodes, or something completely
different), there is currently no documented interface for the task to
report any additional data except the result of the computation.

> I argue the end-user should be able to decided whether they want to
> "see" progress updates or not, and the developer should focus on
> where to report on progress, but not how and when.

Agreed. As a package developer, I don't even want to bother calling
setTxtProgressBar(...), but it gets most of the job done at zero
dependency cost, and the users don't complain. The situation could
definitely be improved.

> It is possible to use the existing PSOCK socket connections to send
> such 'immediateCondition':s.

Thanks for pointing me towards ClusterFuture, that's a great hack, and
conditions are a much better fit for progress tracking than callbacks.

It would be even better if 'parallel' clusters could "officially"
handle immediateConditions and re-signal them in the main R session.
Since R-4.4 exports (but not yet documents) sendData, recvData and
recvOneData generics from 'parallel', we are still in a position to
codify and implement the change to the 'parallel' cluster back-end API.

It shouldn't be too hard to document the requirement that recvData() /
recvOneData() must signal immediateConditions arriving from the nodes
and patch the existing cluster types (socket and MPI). Not sure how
hard it will be to implement for 'mirai' clusters.

> I honestly think we could arrive at a solution where base-R proposes
> a very light, yet powerful, progress API that handles all of the
> above. The main task is to come up with a standard API/protocol -
> then the implementation does not matter.

Since you've already given it a lot of thought, which parts of
progressr would you suggest for inclusion into R, besides 'parallel'
clusters and mclapply() forwarding immediateConditions from the worker
processes?

-- 
Best regards,
Ivan


From @|ex@ndre@court|o| @end|ng |rom gm@||@com  Wed Mar 27 11:28:17 2024
From: @|ex@ndre@court|o| @end|ng |rom gm@||@com (Alexandre Courtiol)
Date: Wed, 27 Mar 2024 11:28:17 +0100
Subject: [Rd] paths capability FALSE on devel?
Message-ID: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>

Hi all,

I don't know if it is a local issue on my hands or not, but after
installing R-devel the output of grDevices::dev.capabilities()$paths is
FALSE, while it is TRUE for R 4.3.3.
Relatedly, I have issues with plotting paths on devel.

At this stage, I simply would like to know if others running R devel and R
4.3.3 can replicate this behaviour and if there are obvious reasons why the
observed change would be expected.

Man thanks,

Alex
-- 
Alexandre Courtiol, www.datazoogang.de

	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Mar 27 12:03:18 2024
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 27 Mar 2024 11:03:18 +0000
Subject: [Rd] paths capability FALSE on devel?
In-Reply-To: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
References: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
Message-ID: <4e361dcd-dc85-467b-b35b-d794d54d753c@stats.ox.ac.uk>

On 27/03/2024 10:28, Alexandre Courtiol wrote:
> Hi all,
> 
> I don't know if it is a local issue on my hands or not, but after
> installing R-devel the output of grDevices::dev.capabilities()$paths is
> FALSE, while it is TRUE for R 4.3.3.
> Relatedly, I have issues with plotting paths on devel.
> 
> At this stage, I simply would like to know if others running R devel and R
> 4.3.3 can replicate this behaviour and if there are obvious reasons why the
> observed change would be expected.

The help says

      Query the capabilities of the current graphics device.

You haven't told us what that was.  See the posting guide for the "at a 
minimum" information you also did not provide ....


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From edd @end|ng |rom deb|@n@org  Wed Mar 27 12:17:08 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 27 Mar 2024 06:17:08 -0500
Subject: [Rd] paths capability FALSE on devel?
In-Reply-To: <4e361dcd-dc85-467b-b35b-d794d54d753c@stats.ox.ac.uk>
References: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
 <4e361dcd-dc85-467b-b35b-d794d54d753c@stats.ox.ac.uk>
Message-ID: <26116.52.685330.376710@rob.eddelbuettel.com>


On 27 March 2024 at 11:03, Prof Brian Ripley via R-devel wrote:
| On 27/03/2024 10:28, Alexandre Courtiol wrote:
| > Hi all,
| > 
| > I don't know if it is a local issue on my hands or not, but after
| > installing R-devel the output of grDevices::dev.capabilities()$paths is
| > FALSE, while it is TRUE for R 4.3.3.
| > Relatedly, I have issues with plotting paths on devel.
| > 
| > At this stage, I simply would like to know if others running R devel and R
| > 4.3.3 can replicate this behaviour and if there are obvious reasons why the
| > observed change would be expected.
| 
| The help says
| 
|       Query the capabilities of the current graphics device.
| 
| You haven't told us what that was.  See the posting guide for the "at a 
| minimum" information you also did not provide ....

Yes, with that I see

> x11()
> grDevices::dev.capabilities()$paths
[1] TRUE
>
> getRversion()
[1] ?4.5.0?
>
> R.version
               _                                                 
platform       x86_64-pc-linux-gnu                               
arch           x86_64                                            
os             linux-gnu                                         
system         x86_64, linux-gnu                                 
status         Under development (unstable)                      
major          4                                                 
minor          5.0                                               
year           2024                                              
month          03                                                
day            27                                                
svn rev        86214                                             
language       R                                                 
version.string R Under development (unstable) (2024-03-27 r86214)
nickname       Unsuffered Consequences                           
> 

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |kry|ov @end|ng |rom d|@root@org  Wed Mar 27 12:19:36 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 27 Mar 2024 14:19:36 +0300
Subject: [Rd] paths capability FALSE on devel?
In-Reply-To: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
References: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
Message-ID: <20240327141936.51dbddec@arachnoid>

? Wed, 27 Mar 2024 11:28:17 +0100
Alexandre Courtiol <alexandre.courtiol at gmail.com> ?????:

> after installing R-devel the output of
> grDevices::dev.capabilities()$paths is FALSE, while it is TRUE for R
> 4.3.3

Your system must be missing Cairo development headers, making x11()
fall back to type = 'Xlib':

$ R-devel -q -s -e 'x11(); grDevices::dev.capabilities()$paths'
 [1] TRUE
$ R-devel -q -s -e \
 'x11(type="Xlib"); grDevices::dev.capabilities()$paths'
 [1] FALSE

If that's not the case and capabilities()['cairo'] is TRUE in your
build of R-devel, please show us the sessionInfo() from your build of
R-devel.

-- 
Best regards,
Ivan


From @|ex@ndre@court|o| @end|ng |rom gm@||@com  Wed Mar 27 13:55:45 2024
From: @|ex@ndre@court|o| @end|ng |rom gm@||@com (Alexandre Courtiol)
Date: Wed, 27 Mar 2024 13:55:45 +0100
Subject: [Rd] paths capability FALSE on devel?
In-Reply-To: <20240327141936.51dbddec@arachnoid>
References: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
 <20240327141936.51dbddec@arachnoid>
Message-ID: <CAERMt4e=S5YWRkeuAdUC5w_aS31K8F9_0sLpNET=Vp6DUzzkFQ@mail.gmail.com>

On Wed, 27 Mar 2024 at 12:19, Ivan Krylov <ikrylov at disroot.org> wrote:

> ? Wed, 27 Mar 2024 11:28:17 +0100
> Alexandre Courtiol <alexandre.courtiol at gmail.com> ?????:
>
> > after installing R-devel the output of
> > grDevices::dev.capabilities()$paths is FALSE, while it is TRUE for R
> > 4.3.3
>
> Your system must be missing Cairo development headers, making x11()
> fall back to type = 'Xlib':
>
> $ R-devel -q -s -e 'x11(); grDevices::dev.capabilities()$paths'
>  [1] TRUE
> $ R-devel -q -s -e \
>  'x11(type="Xlib"); grDevices::dev.capabilities()$paths'
>  [1] FALSE
>
> If that's not the case and capabilities()['cairo'] is TRUE in your
> build of R-devel, please show us the sessionInfo() from your build of
> R-devel.
>
> --
> Best regards,
> Ivan
>

Thanks everyone for your feedback.
Here is the requested information:

> x11()
> grDevices::dev.capabilities()$paths
[1] FALSE
> capabilities()['cairo']
cairo
TRUE
> sessionInfo()
R version 4.3.3 Patched (2024-02-29 r86166)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 22.04.4 LTS

Matrix products: default
BLAS:   /home/courtiol/R-devel/lib/R/lib/libRblas.so
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0

locale:
[1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
[3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
[5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
[7] LC_PAPER=en_US.UTF-8       LC_NAME=C
[9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

time zone: Europe/Berlin
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.3.3

However, since it works on your side, I think there is nothing to worry
about, I must have simply failed to install R-devel properly.

-- 
Alexandre Courtiol, www.datazoogang.de

	[[alternative HTML version deleted]]


From trevor@|@d@v|@ @end|ng |rom gm@||@com  Wed Mar 27 17:05:53 2024
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Wed, 27 Mar 2024 09:05:53 -0700
Subject: [Rd] paths capability FALSE on devel?
In-Reply-To: <CAERMt4e=S5YWRkeuAdUC5w_aS31K8F9_0sLpNET=Vp6DUzzkFQ@mail.gmail.com>
References: <CAERMt4fHRROfogwU-jHhYeKagYRxUGXKZLi78hnVsU5nwfqFBg@mail.gmail.com>
 <20240327141936.51dbddec@arachnoid>
 <CAERMt4e=S5YWRkeuAdUC5w_aS31K8F9_0sLpNET=Vp6DUzzkFQ@mail.gmail.com>
Message-ID: <CAMigB8HTXi=uTR4y1nupUKoPRFbgYv_hL3cAQmQctZwR2e57=g@mail.gmail.com>

In the past I've observed similar behaviour with R compiled with support
for cairo but no pango:

https://stat.ethz.ch/pipermail/r-devel/2022-April/081587.html

Despite cairo support if no pango then the documentation in ?X11 says R
defaults to type "Xlib" instead of type "cairo" even though both seem to
work and only type "cairo" supports all the new grid features like paths...

What happens if you set `X11.options(type = "cairo")`?

Trevor

	[[alternative HTML version deleted]]


From @nto|ne@|@br| @end|ng |rom gm@||@com  Fri Mar 29 15:52:59 2024
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Fri, 29 Mar 2024 15:52:59 +0100
Subject: [Rd] declare and validate options
Message-ID: <CAEKh8uh6OETodW+dFtYuPGxqf08biTpCz+Hxy5_NjTA_LXfUtQ@mail.gmail.com>

Dear r-devel,

options() are basically global variables and they come with several issues:
* they're not really truly owned by a package aside from loose naming
conventions
* they're not validated
* their documentation is not standard, and they're often not documented at
all, it's hard to know what options exist
* in practice they're sometimes used for internal purposes, which is at
odds with their global nature and contribute to the mess, I think they can
almost always be replaced by objects under a `globals` environment in the
namespace, it's just a bit more work

I tried to do as much as possible with static analysis using my package opt
but it can only go so far : https://github.com/moodymudskipper/opt

I think we can do a bit better and that it's not necessarily so complex,
here's a draft of possible design :

We could have something like this in a package to register options along
with an optional validator, triggered on `options(..)` (or a new function).

# similar to registerS3method() :
registerOption("mypkg.my_option1")
registerOption("mypkg.my_option2", function(x) stopifnot(is.numeric(x))
# maybe a `default` arg too to avoid the .onLoad() gymnastics and invisible
NULL options

* validation is a breaking change so we'd have an environment variable to
opt in
* validation occurs when an option is set AND the namespace is already
loaded (so we can still set options without loading a namespace) OR it
occurs later when an applicable namespace is loaded
* if we register an option that has already been registered by another
package, we get a message, the validator of the last loaded namespace is
used, in practice due to naming conventions it doesn't really happen, CRAN
could also enforce naming conventions for new packages
* New packages must use registerOption() if they define options, and there
must be a standard documentation page for those, separately or together
(with aliases), accessible with `?mypkg.my_option1` etc...

This could certainly be done in different ways and I'd love to hear about
other ideas or obstacles to improvements in this area.

Thanks,

Antoine

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar 29 16:25:10 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 29 Mar 2024 11:25:10 -0400
Subject: [Rd] declare and validate options
In-Reply-To: <CAEKh8uh6OETodW+dFtYuPGxqf08biTpCz+Hxy5_NjTA_LXfUtQ@mail.gmail.com>
References: <CAEKh8uh6OETodW+dFtYuPGxqf08biTpCz+Hxy5_NjTA_LXfUtQ@mail.gmail.com>
Message-ID: <05c41377-c2ba-48a3-8f9c-efa87c0843ee@gmail.com>

On 29/03/2024 10:52 a.m., Antoine Fabri wrote:
> Dear r-devel,
> 
> options() are basically global variables and they come with several issues:
> * they're not really truly owned by a package aside from loose naming
> conventions
> * they're not validated
> * their documentation is not standard, and they're often not documented at
> all, it's hard to know what options exist
> * in practice they're sometimes used for internal purposes, which is at
> odds with their global nature and contribute to the mess, I think they can
> almost always be replaced by objects under a `globals` environment in the
> namespace, it's just a bit more work
> 
> I tried to do as much as possible with static analysis using my package opt
> but it can only go so far : https://github.com/moodymudskipper/opt
> 
> I think we can do a bit better and that it's not necessarily so complex,
> here's a draft of possible design :
> 
> We could have something like this in a package to register options along
> with an optional validator, triggered on `options(..)` (or a new function).
> 
> # similar to registerS3method() :
> registerOption("mypkg.my_option1")
> registerOption("mypkg.my_option2", function(x) stopifnot(is.numeric(x))
> # maybe a `default` arg too to avoid the .onLoad() gymnastics and invisible
> NULL options
> 
> * validation is a breaking change so we'd have an environment variable to
> opt in
> * validation occurs when an option is set AND the namespace is already
> loaded (so we can still set options without loading a namespace) OR it
> occurs later when an applicable namespace is loaded
> * if we register an option that has already been registered by another
> package, we get a message, the validator of the last loaded namespace is
> used, in practice due to naming conventions it doesn't really happen, CRAN
> could also enforce naming conventions for new packages
> * New packages must use registerOption() if they define options, and there
> must be a standard documentation page for those, separately or together
> (with aliases), accessible with `?mypkg.my_option1` etc...
> 
> This could certainly be done in different ways and I'd love to hear about
> other ideas or obstacles to improvements in this area.
> 

I think there are too many packages that would need changes under this 
scheme.

A more easily achievable improvement would be to provide functions to 
support registration, validation and documentation, and leave it up to 
the package author to call those.  This wouldn't give you validation at 
the time a user set an option, but could make it easier to validate when 
the package retrieved the value:  specify rules in one place, then 
retrieve from multiple places, without needing to duplicate the rules.

If those functions could be made simple enough and bulletproof and were 
widely adopted, maybe they'd be copied into one of the base packages, 
but really the only need for that would be to support validation on 
setting, rather than validation on retrieval.

Duncan Murdoch


From @nto|ne@|@br| @end|ng |rom gm@||@com  Fri Mar 29 16:59:16 2024
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Fri, 29 Mar 2024 16:59:16 +0100
Subject: [Rd] declare and validate options
In-Reply-To: <05c41377-c2ba-48a3-8f9c-efa87c0843ee@gmail.com>
References: <CAEKh8uh6OETodW+dFtYuPGxqf08biTpCz+Hxy5_NjTA_LXfUtQ@mail.gmail.com>
 <05c41377-c2ba-48a3-8f9c-efa87c0843ee@gmail.com>
Message-ID: <CAEKh8uh87uE77vYiBrmyNtKxJPRmMP1Ut3TO2cmC_LLnYxL69w@mail.gmail.com>

>
> I think there are too many packages that would need changes under this
> scheme.


There would be zero if the registration of options is not required for
packages first uploaded on CRAN before the feature is implemented.
If an option is not registered no validation is triggered and nothing
breaks even if we opt in the behavior.


> If those functions could be made simple enough and bulletproof and were
> widely adopted, maybe they'd be copied into one of the base packages,
>

Sure but realistically few maintainers will opt-in for more restrictions.
if posit did something on those lines maybe it would have a chance but
otherwise I don't see an optional feature like this spread very far.
Or we need this package to make working with options really really much
easier for themselves as developers, not just beneficial for users in the
long run.

Le ven. 29 mars 2024 ? 16:25, Duncan Murdoch <murdoch.duncan at gmail.com> a
?crit :

> On 29/03/2024 10:52 a.m., Antoine Fabri wrote:
> > Dear r-devel,
> >
> > options() are basically global variables and they come with several
> issues:
> > * they're not really truly owned by a package aside from loose naming
> > conventions
> > * they're not validated
> > * their documentation is not standard, and they're often not documented
> at
> > all, it's hard to know what options exist
> > * in practice they're sometimes used for internal purposes, which is at
> > odds with their global nature and contribute to the mess, I think they
> can
> > almost always be replaced by objects under a `globals` environment in the
> > namespace, it's just a bit more work
> >
> > I tried to do as much as possible with static analysis using my package
> opt
> > but it can only go so far : https://github.com/moodymudskipper/opt
> >
> > I think we can do a bit better and that it's not necessarily so complex,
> > here's a draft of possible design :
> >
> > We could have something like this in a package to register options along
> > with an optional validator, triggered on `options(..)` (or a new
> function).
> >
> > # similar to registerS3method() :
> > registerOption("mypkg.my_option1")
> > registerOption("mypkg.my_option2", function(x) stopifnot(is.numeric(x))
> > # maybe a `default` arg too to avoid the .onLoad() gymnastics and
> invisible
> > NULL options
> >
> > * validation is a breaking change so we'd have an environment variable to
> > opt in
> > * validation occurs when an option is set AND the namespace is already
> > loaded (so we can still set options without loading a namespace) OR it
> > occurs later when an applicable namespace is loaded
> > * if we register an option that has already been registered by another
> > package, we get a message, the validator of the last loaded namespace is
> > used, in practice due to naming conventions it doesn't really happen,
> CRAN
> > could also enforce naming conventions for new packages
> > * New packages must use registerOption() if they define options, and
> there
> > must be a standard documentation page for those, separately or together
> > (with aliases), accessible with `?mypkg.my_option1` etc...
> >
> > This could certainly be done in different ways and I'd love to hear about
> > other ideas or obstacles to improvements in this area.
> >
>
> I think there are too many packages that would need changes under this
> scheme.
>
> A more easily achievable improvement would be to provide functions to
> support registration, validation and documentation, and leave it up to
> the package author to call those.  This wouldn't give you validation at
> the time a user set an option, but could make it easier to validate when
> the package retrieved the value:  specify rules in one place, then
> retrieve from multiple places, without needing to duplicate the rules.
>
> If those functions could be made simple enough and bulletproof and were
> widely adopted, maybe they'd be copied into one of the base packages,
> but really the only need for that would be to support validation on
> setting, rather than validation on retrieval.
>
> Duncan Murdoch
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Mar 29 18:05:11 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 29 Mar 2024 13:05:11 -0400
Subject: [Rd] declare and validate options
In-Reply-To: <CAEKh8uh87uE77vYiBrmyNtKxJPRmMP1Ut3TO2cmC_LLnYxL69w@mail.gmail.com>
References: <CAEKh8uh6OETodW+dFtYuPGxqf08biTpCz+Hxy5_NjTA_LXfUtQ@mail.gmail.com>
 <05c41377-c2ba-48a3-8f9c-efa87c0843ee@gmail.com>
 <CAEKh8uh87uE77vYiBrmyNtKxJPRmMP1Ut3TO2cmC_LLnYxL69w@mail.gmail.com>
Message-ID: <55db1d35-7d39-4fd1-adcb-39a8b0192823@gmail.com>

On 29/03/2024 11:59 a.m., Antoine Fabri wrote:
>     I think there are too many packages that would need changes under this
>     scheme.
> 
> 
> There would be zero if the registration of options is not required for 
> packages first uploaded on CRAN before the feature is implemented.
> If an option is not registered no validation is triggered and nothing 
> breaks even if we opt in the behavior.

Sorry, I missed that.  Then the objection is that this would require 
CRAN to apply two different sets of rules on submissions. When a 
resubmission arrived, they'd need to look in the archive to find out 
which set of rules applied to it.  They do a bit of that now 
(determining if a submission is a resubmission, for example), but this 
would be a bigger change.  I don't think date of first submission is 
ever currently used.

>     If those functions could be made simple enough and bulletproof and were
>     widely adopted, maybe they'd be copied into one of the base packages,
> 
> Sure but realistically few maintainers will opt-in for more restrictions.

If this is something that you want CRAN to force on package authors, 
then you need to give some hard evidence that it will fix things that 
cause trouble.  But if you only apply the rule to new packages, not 
updates to old ones, it's hard to believe that it will really make much 
difference, though it will still be extra work for CRAN and R Core.

> if posit did something on those lines maybe it would have a chance but 
> otherwise I don't see an optional feature like this spread very far.
> Or we need this package to make working with options really really much 
> easier for themselves as developers, not just beneficial for users in 
> the long run.

That should be a goal regardless of who does it.

Think about the development of the pipe operator:  it was in magrittr 
(and I think another package, but I forget the name) first, was widely 
adopted, then a simpler version was brought into base R.

Duncan Murdoch


> 
> Le?ven. 29 mars 2024 ??16:25, Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> a ?crit?:
> 
>     On 29/03/2024 10:52 a.m., Antoine Fabri wrote:
>      > Dear r-devel,
>      >
>      > options() are basically global variables and they come with
>     several issues:
>      > * they're not really truly owned by a package aside from loose naming
>      > conventions
>      > * they're not validated
>      > * their documentation is not standard, and they're often not
>     documented at
>      > all, it's hard to know what options exist
>      > * in practice they're sometimes used for internal purposes, which
>     is at
>      > odds with their global nature and contribute to the mess, I think
>     they can
>      > almost always be replaced by objects under a `globals`
>     environment in the
>      > namespace, it's just a bit more work
>      >
>      > I tried to do as much as possible with static analysis using my
>     package opt
>      > but it can only go so far :
>     https://github.com/moodymudskipper/opt
>     <https://github.com/moodymudskipper/opt>
>      >
>      > I think we can do a bit better and that it's not necessarily so
>     complex,
>      > here's a draft of possible design :
>      >
>      > We could have something like this in a package to register
>     options along
>      > with an optional validator, triggered on `options(..)` (or a new
>     function).
>      >
>      > # similar to registerS3method() :
>      > registerOption("mypkg.my_option1")
>      > registerOption("mypkg.my_option2", function(x)
>     stopifnot(is.numeric(x))
>      > # maybe a `default` arg too to avoid the .onLoad() gymnastics and
>     invisible
>      > NULL options
>      >
>      > * validation is a breaking change so we'd have an environment
>     variable to
>      > opt in
>      > * validation occurs when an option is set AND the namespace is
>     already
>      > loaded (so we can still set options without loading a namespace)
>     OR it
>      > occurs later when an applicable namespace is loaded
>      > * if we register an option that has already been registered by
>     another
>      > package, we get a message, the validator of the last loaded
>     namespace is
>      > used, in practice due to naming conventions it doesn't really
>     happen, CRAN
>      > could also enforce naming conventions for new packages
>      > * New packages must use registerOption() if they define options,
>     and there
>      > must be a standard documentation page for those, separately or
>     together
>      > (with aliases), accessible with `?mypkg.my_option1` etc...
>      >
>      > This could certainly be done in different ways and I'd love to
>     hear about
>      > other ideas or obstacles to improvements in this area.
>      >
> 
>     I think there are too many packages that would need changes under this
>     scheme.
> 
>     A more easily achievable improvement would be to provide functions to
>     support registration, validation and documentation, and leave it up to
>     the package author to call those.? This wouldn't give you validation at
>     the time a user set an option, but could make it easier to validate
>     when
>     the package retrieved the value:? specify rules in one place, then
>     retrieve from multiple places, without needing to duplicate the rules.
> 
>     If those functions could be made simple enough and bulletproof and were
>     widely adopted, maybe they'd be copied into one of the base packages,
>     but really the only need for that would be to support validation on
>     setting, rather than validation on retrieval.
> 
>     Duncan Murdoch
>


From @ndre@@g||@rd| @end|ng |rom po||m|@|t  Fri Mar 29 18:56:48 2024
From: @ndre@@g||@rd| @end|ng |rom po||m|@|t (Andrea Gilardi)
Date: Fri, 29 Mar 2024 17:56:48 +0000
Subject: [Rd] Question regarding .make_numeric_version with non-character
 input
Message-ID: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>

Dear all,

I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:

1. It creates a message named msg using gettextf.
2. Such object is then passed to stop(msg) or warning(msg) according to the following condition

tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")

However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something? 

Thank you very much for your help
Kind regards

Andrea




From edd @end|ng |rom deb|@n@org  Fri Mar 29 20:14:25 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 29 Mar 2024 14:14:25 -0500
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
Message-ID: <26119.4881.618411.645248@rob.eddelbuettel.com>


On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
| Dear all,
| 
| I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
| 
| 1. It creates a message named msg using gettextf.
| 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
| 
| tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
| 
| However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something? 

Yes, agreed -- good catch.  In full, the code is (removing leading
whitespace, and putting it back onto single lines)

  msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
  if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
      stop(msg, domain = NA)
  else
      warning(msg, domain = NA, immediate. = TRUE)  

where msg is constant (but reflecting language settings via standard i18n)
and as you not the parentheses appear wrong.  What was intended is likely

  msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
  if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
      stop(msg, domain = NA)
  else
      warning(msg, domain = NA, immediate. = TRUE)  

If you use bugzilla before and have a handle, maybe file a bug report with
this as patch at https://bugs.r-project.org/

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


