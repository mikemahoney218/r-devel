From je|| @end|ng |rom vtke||er@@com  Sun Nov  1 15:39:55 2020
From: je|| @end|ng |rom vtke||er@@com (Jeff)
Date: Sun, 01 Nov 2020 09:39:55 -0500
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
Message-ID: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>

I'm exploring latency overhead of parallel PSOCK workers and noticed 
that serializing/unserializing data back to the main R session is 
significantly slower on Linux than it is on Windows/MacOS with similar 
hardware. Is there a reason for this difference and is there a way to 
avoid the apparent additional Linux overhead?

I attempted to isolate the behavior with a test that simply returns an 
existing object from the worker back to the main R session.

library(parallel)
library(microbenchmark)
gcinfo(TRUE)
cl <- makeCluster(1)
(x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
plot(x$time, ylab = "microseconds")
head(x$time, n = 10)

On Windows/MacOS, the test runs in 300-500 microseconds depending on 
hardware. A few of the 1000 runs are an order of magnitude slower but 
this can probably be attributed to garbage collection on the worker.

On Linux, the first 5 or so executions run at comparable speeds but all 
subsequent executions are two orders of magnitude slower (~40 
milliseconds).

I see this behavior across various platforms and hardware combinations:

Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
Linux Mint 19.3 (AMD Ryzen 7 1800X)
Linux Mint 20 (AMD Ryzen 7 3700X)
Windows 10 (AMD Ryzen 7 4800H)
MacOS 10.15.7 (Intel Core i7-8850H)


From @|ex@ndre@court|o| @end|ng |rom gm@||@com  Sun Nov  1 17:22:22 2020
From: @|ex@ndre@court|o| @end|ng |rom gm@||@com (Alexandre Courtiol)
Date: Sun, 1 Nov 2020 17:22:22 +0100
Subject: [Rd] vignettes present in 2 folders or won't work
Message-ID: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>

Dear all,

I am struggling with an issue related to static vignettes: they work, but
only when present in double in the tarball -- in the folder inst/doc and
vignettes; see below for details.

Details:

I am pre-compiling heavy vignettes thanks to the vignette builder R.rsp.
So basically, I have PDF files which I want the package to use as Vignettes.

For this, I have the following in my Description file:
VignetteBuilder: R.rsp

I am organising the vignette by hand using a Makefile (because this is the
only way that has proven 100% reliable to me, across a variety of
situations).

In my Makefile, I have something like:

build: clean
  mkdir -p inst/doc
  mkdir vignettes
  -cp sources_vignettes/*/*.pdf* vignettes
  Rscript -e "tools::compactPDF(paths = 'vignettes', gs_quality =
'printer')"
  cp vignettes/*.pdf* inst/doc
  Rscript -e "devtools::document()"
  mkdir inst/extdata/sources_vignettes
  cp sources_vignettes/*/*.Rnw inst/extdata/sources_vignettes
  Rscript -e "devtools::build(vignettes = FALSE)"

That works fine, the vignettes show up using browseVignettes() after
installing the package the normal way.

However, after building, the tar.gz contains each pdf corresponding to a
vignette twice: once in vignettes and once in inst/doc (which is obvious,
when reading the Makefile).

>From the reading of "Writing R Extensions" and other material, I cannot
tell if that is a must or not, but I hope it is not since I wish to avoid
that (my pdfs are large even once compressed).

My problem is that when I delete either inst/doc or vignette just before
calling the last command of the Makefile (Rscript -e
"devtools::build(vignettes = FALSE)"), then browseVignettes() does not find
the vignettes after a normal installation.

If anyone knows of some _complete_ documentation about the ever troublesome
topic of vignettes building in R, I would be very grateful too...

Many thanks!

Alex

-- 
Alexandre Courtiol

http://sites.google.com/site/alexandrecourtiol/home

*"Science is the belief in the ignorance of experts"*, R. Feynman

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Nov  1 18:19:09 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 1 Nov 2020 12:19:09 -0500
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
Message-ID: <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>

You are doing a lot of things that are non-standard, so I doubt if 
anyone is going to be able to help you without access to a simple 
reproducible example of a package that does what you do.  Try to cut out 
as much as you can to make it minimal.  For example, 
devtools::document() (indeed, most of your code) is probably irrelevant 
to your problem with vignettes, but things like your .Rbuildignore file 
are not.

Duncan Murdoch

On 01/11/2020 11:22 a.m., Alexandre Courtiol wrote:
> Dear all,
> 
> I am struggling with an issue related to static vignettes: they work, but
> only when present in double in the tarball -- in the folder inst/doc and
> vignettes; see below for details.
> 
> Details:
> 
> I am pre-compiling heavy vignettes thanks to the vignette builder R.rsp.
> So basically, I have PDF files which I want the package to use as Vignettes.
> 
> For this, I have the following in my Description file:
> VignetteBuilder: R.rsp
> 
> I am organising the vignette by hand using a Makefile (because this is the
> only way that has proven 100% reliable to me, across a variety of
> situations).
> 
> In my Makefile, I have something like:
> 
> build: clean
>    mkdir -p inst/doc
>    mkdir vignettes
>    -cp sources_vignettes/*/*.pdf* vignettes
>    Rscript -e "tools::compactPDF(paths = 'vignettes', gs_quality =
> 'printer')"
>    cp vignettes/*.pdf* inst/doc
>    Rscript -e "devtools::document()"
>    mkdir inst/extdata/sources_vignettes
>    cp sources_vignettes/*/*.Rnw inst/extdata/sources_vignettes
>    Rscript -e "devtools::build(vignettes = FALSE)"
> 
> That works fine, the vignettes show up using browseVignettes() after
> installing the package the normal way.
> 
> However, after building, the tar.gz contains each pdf corresponding to a
> vignette twice: once in vignettes and once in inst/doc (which is obvious,
> when reading the Makefile).
> 
>  From the reading of "Writing R Extensions" and other material, I cannot
> tell if that is a must or not, but I hope it is not since I wish to avoid
> that (my pdfs are large even once compressed).
> 
> My problem is that when I delete either inst/doc or vignette just before
> calling the last command of the Makefile (Rscript -e
> "devtools::build(vignettes = FALSE)"), then browseVignettes() does not find
> the vignettes after a normal installation.
> 
> If anyone knows of some _complete_ documentation about the ever troublesome
> topic of vignettes building in R, I would be very grateful too...
> 
> Many thanks!
> 
> Alex
>


From @|ex@ndre@court|o| @end|ng |rom gm@||@com  Sun Nov  1 19:02:26 2020
From: @|ex@ndre@court|o| @end|ng |rom gm@||@com (Alexandre Courtiol)
Date: Sun, 1 Nov 2020 19:02:26 +0100
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
Message-ID: <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>

Noted Duncan and TRUE...

I cannot do more immediately unfortunately, that is always the issue of
asking a last minute panic attack question before teaching a course
involving the package...
I do have /doc in my .Rbuildignore for reasons I can no longer remember...
I will dig and create a MRE/reprex.
The students will download heavy packages, but they probably won't notice.
*Apologies*

In the meantime, perhaps my question was clear enough to get clarity on:
1) whether having vignettes twice in foders inst/doc and vignettes is
normal or not when vignettes are static.
2) where could anyone find a complete documentation on R vignettes since it
is a recurring issue in this list and elsewhere.

Many thanks

On Sun, 1 Nov 2020 at 18:19, Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> You are doing a lot of things that are non-standard, so I doubt if
> anyone is going to be able to help you without access to a simple
> reproducible example of a package that does what you do.  Try to cut out
> as much as you can to make it minimal.  For example,
> devtools::document() (indeed, most of your code) is probably irrelevant
> to your problem with vignettes, but things like your .Rbuildignore file
> are not.
>
> Duncan Murdoch
>
> On 01/11/2020 11:22 a.m., Alexandre Courtiol wrote:
> > Dear all,
> >
> > I am struggling with an issue related to static vignettes: they work, but
> > only when present in double in the tarball -- in the folder inst/doc and
> > vignettes; see below for details.
> >
> > Details:
> >
> > I am pre-compiling heavy vignettes thanks to the vignette builder R.rsp.
> > So basically, I have PDF files which I want the package to use as
> Vignettes.
> >
> > For this, I have the following in my Description file:
> > VignetteBuilder: R.rsp
> >
> > I am organising the vignette by hand using a Makefile (because this is
> the
> > only way that has proven 100% reliable to me, across a variety of
> > situations).
> >
> > In my Makefile, I have something like:
> >
> > build: clean
> >    mkdir -p inst/doc
> >    mkdir vignettes
> >    -cp sources_vignettes/*/*.pdf* vignettes
> >    Rscript -e "tools::compactPDF(paths = 'vignettes', gs_quality =
> > 'printer')"
> >    cp vignettes/*.pdf* inst/doc
> >    Rscript -e "devtools::document()"
> >    mkdir inst/extdata/sources_vignettes
> >    cp sources_vignettes/*/*.Rnw inst/extdata/sources_vignettes
> >    Rscript -e "devtools::build(vignettes = FALSE)"
> >
> > That works fine, the vignettes show up using browseVignettes() after
> > installing the package the normal way.
> >
> > However, after building, the tar.gz contains each pdf corresponding to a
> > vignette twice: once in vignettes and once in inst/doc (which is obvious,
> > when reading the Makefile).
> >
> >  From the reading of "Writing R Extensions" and other material, I cannot
> > tell if that is a must or not, but I hope it is not since I wish to avoid
> > that (my pdfs are large even once compressed).
> >
> > My problem is that when I delete either inst/doc or vignette just before
> > calling the last command of the Makefile (Rscript -e
> > "devtools::build(vignettes = FALSE)"), then browseVignettes() does not
> find
> > the vignettes after a normal installation.
> >
> > If anyone knows of some _complete_ documentation about the ever
> troublesome
> > topic of vignettes building in R, I would be very grateful too...
> >
> > Many thanks!
> >
> > Alex
> >
>
>

-- 
Alexandre Courtiol

http://sites.google.com/site/alexandrecourtiol/home

*"Science is the belief in the ignorance of experts"*, R. Feynman

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Nov  1 20:29:50 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 1 Nov 2020 14:29:50 -0500
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
Message-ID: <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>

On 01/11/2020 1:02 p.m., Alexandre Courtiol wrote:
> Noted Duncan and TRUE...
> 
> I cannot do more immediately unfortunately, that is always the issue of 
> asking a last minute panic attack question before teaching a course 
> involving the package...
> I do have /doc in my .Rbuildignore for reasons I can no longer 
> remember... I will dig and create a MRE/reprex.
> The students will download heavy packages, but they probably won't notice.
> *Apologies*
> 
> In the meantime, perhaps my question was clear enough to get clarity on:
> 1) whether having vignettes twice in foders inst/doc and vignettes is 
> normal or not when vignettes are static.
> 2) where could anyone find a complete documentation on R vignettes since 
> it is a recurring issue in this list and elsewhere.

The Writing R Extensions manual describes vignette support in R, but R 
allows contributed packages (like knitr, rmarkdown, R.rsp) to handle 
vignettes.  WRE explains enough to write such a package, but it's up to 
their authors to document how to use them, so "complete documentation" 
is spread out all over the place.  As with any documentation, there are 
probably errors and omissions.

Duncan Murdoch


From bbo|ker @end|ng |rom gm@||@com  Sun Nov  1 20:35:55 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 1 Nov 2020 14:35:55 -0500
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
 <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
Message-ID: <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>

   I take Duncan's point but would second the motion to have WRE clarify 
how static vignettes are supposed to work; it's a topic I am repeatedly 
confused about despite being an experienced package maintainer. If 
knowledgeable outsiders compiled a documentation patch would it be 
likely to be considered ...??

On 11/1/20 2:29 PM, Duncan Murdoch wrote:
> On 01/11/2020 1:02 p.m., Alexandre Courtiol wrote:
>> Noted Duncan and TRUE...
>>
>> I cannot do more immediately unfortunately, that is always the issue 
>> of asking a last minute panic attack question before teaching a course 
>> involving the package...
>> I do have /doc in my .Rbuildignore for reasons I can no longer 
>> remember... I will dig and create a MRE/reprex.
>> The students will download heavy packages, but they probably won't 
>> notice.
>> *Apologies*
>>
>> In the meantime, perhaps my question was clear enough to get clarity on:
>> 1) whether having vignettes twice in foders inst/doc and vignettes is 
>> normal or not when vignettes are static.
>> 2) where could anyone find a complete documentation on R vignettes 
>> since it is a recurring issue in this list and elsewhere.
> 
> The Writing R Extensions manual describes vignette support in R, but R 
> allows contributed packages (like knitr, rmarkdown, R.rsp) to handle 
> vignettes.? WRE explains enough to write such a package, but it's up to 
> their authors to document how to use them, so "complete documentation" 
> is spread out all over the place.? As with any documentation, there are 
> probably errors and omissions.
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Sun Nov  1 20:57:32 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 1 Nov 2020 13:57:32 -0600
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
 <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
 <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
Message-ID: <24479.4908.672903.801397@rob.eddelbuettel.com>


The closest to a canonical reference for a static vignette is the basic blog
post by Mark at

 https://www.markvanderloo.eu/yaRb/2019/01/11/add-a-static-pdf-vignette-to-an-r-package/

which I follow in a number of packages.

Back to the original point by Alexandre: No, I do _not_ think we can do
without a double copy of the _pre-made_ pdf ("input") and the _resulting_ pdf
("output").

That bugs me a little too but I take it as a given as static / pre-made
vignettes are non-standard (given lack of any mention in WRE, and the pretty
obvious violation of the "spirit of the law" of vignette which is after all
made to run code, not to avoid it). Yet uses for static vignettes are pretty
valid and here we are with another clear as mud situation.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Nov  1 20:58:06 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 1 Nov 2020 13:58:06 -0600
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
 <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
 <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
Message-ID: <62244686-9417-9715-07ed-f4b66950dc3d@prodsyse.com>

	  CRAN policies say, "neither data nor documentation should exceed 5MB 
(which covers several books). A CRAN package is not an appropriate way 
to distribute course notes, and authors will be asked to trim their 
documentation to a maximum of 5MB."[1]


	  I post R Markdown vignettes as companions to Wikiversity articles. 
For example, the Wikiversity article on "Forecasting nuclear 
proliferation" is a tech report on the indicated topic with two R 
Markdown vignettes as part of an appendix.[2]


	  Wikiversity is similar to Wikipedia but supports teaching materials 
and original research, which are forbidden on Wikipedia.  Both are 
projects of the Wikimedia Foundation and have very similar rules and 
management.  For both, almost anybody can change almost anything.  What 
stays tends to be written from a neutral point of view citing credible 
sources.  If you don't do that, your work may be speedily deleted or 
reverted.  Shi et al (2017) "The wisdom of polarized crowds" did a 
content analysis of all edits to English Wikipedia articles relating to 
politics, social issues and science from its start to December 1, 2016. 
This included almost 233,000 articles representing approximately 5 
percent of the English Wikipedia.  They found that the best articles had 
a large number of editors with a very diverse views.  They said that 95% 
of articles could benefit from greater conflict;  the conflict became 
counterproductive in only about 5% of articles.[3]


	  Spencer Graves


[1]
https://cran.r-project.org/web/packages/policies.html


[2]
https://en.wikiversity.org/wiki/Forecasting_nuclear_proliferation#Appendix._Companion_R_Markdown_vignettes


[3]
https://en.wikipedia.org/wiki/Reliability_of_Wikipedia#Articles_on_contentious_issue


On 2020-11-01 13:35, Ben Bolker wrote:
>  ? I take Duncan's point but would second the motion to have WRE clarify 
> how static vignettes are supposed to work; it's a topic I am repeatedly 
> confused about despite being an experienced package maintainer. If 
> knowledgeable outsiders compiled a documentation patch would it be 
> likely to be considered ...??
> 
> On 11/1/20 2:29 PM, Duncan Murdoch wrote:
>> On 01/11/2020 1:02 p.m., Alexandre Courtiol wrote:
>>> Noted Duncan and TRUE...
>>>
>>> I cannot do more immediately unfortunately, that is always the issue 
>>> of asking a last minute panic attack question before teaching a 
>>> course involving the package...
>>> I do have /doc in my .Rbuildignore for reasons I can no longer 
>>> remember... I will dig and create a MRE/reprex.
>>> The students will download heavy packages, but they probably won't 
>>> notice.
>>> *Apologies*
>>>
>>> In the meantime, perhaps my question was clear enough to get clarity on:
>>> 1) whether having vignettes twice in foders inst/doc and vignettes is 
>>> normal or not when vignettes are static.
>>> 2) where could anyone find a complete documentation on R vignettes 
>>> since it is a recurring issue in this list and elsewhere.
>>
>> The Writing R Extensions manual describes vignette support in R, but R 
>> allows contributed packages (like knitr, rmarkdown, R.rsp) to handle 
>> vignettes.? WRE explains enough to write such a package, but it's up 
>> to their authors to document how to use them, so "complete 
>> documentation" is spread out all over the place.? As with any 
>> documentation, there are probably errors and omissions.
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Nov  1 22:38:53 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 1 Nov 2020 16:38:53 -0500
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <24479.4908.672903.801397@rob.eddelbuettel.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
 <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
 <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
 <24479.4908.672903.801397@rob.eddelbuettel.com>
Message-ID: <e271b365-a2cf-488a-b316-f89e7b46e885@gmail.com>

On 01/11/2020 2:57 p.m., Dirk Eddelbuettel wrote:
> 
> The closest to a canonical reference for a static vignette is the basic blog
> post by Mark at
> 
>   https://www.markvanderloo.eu/yaRb/2019/01/11/add-a-static-pdf-vignette-to-an-r-package/
> 
> which I follow in a number of packages.
> 
> Back to the original point by Alexandre: No, I do _not_ think we can do
> without a double copy of the _pre-made_ pdf ("input") and the _resulting_ pdf
> ("output").
> 
> That bugs me a little too but I take it as a given as static / pre-made
> vignettes are non-standard (given lack of any mention in WRE, and the pretty
> obvious violation of the "spirit of the law" of vignette which is after all
> made to run code, not to avoid it). Yet uses for static vignettes are pretty
> valid and here we are with another clear as mud situation.
> 

In many cases such files aren't vignettes.

By definition, packages should contain plain text source code for 
vignettes.  They can contain other PDF files in inst/doc, but if you 
don't include the plain text source, those aren't vignettes.

An exception would be a package that contains the source code but 
doesn't want to require CRAN or other users to run it, because it's too 
time-consuming, or needs obscure resources.  The CRAN policy discusses this.

Duncan Murdoch


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Nov  2 02:21:15 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 2 Nov 2020 14:21:15 +1300
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
Message-ID: <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>

It looks like R sockets on Linux could do with TCP_NODELAY -- without (status quo):

Unit: microseconds
                   expr      min       lq     mean  median       uq      max
 clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 48027.83
 neval
  1000

exactly the same machine + R but with TCP_NODELAY enabled in R_SockConnect():

Unit: microseconds
                   expr     min     lq     mean  median      uq      max neval
 clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 5322.234  1000

Cheers,
Simon


> On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
> 
> I'm exploring latency overhead of parallel PSOCK workers and noticed that serializing/unserializing data back to the main R session is significantly slower on Linux than it is on Windows/MacOS with similar hardware. Is there a reason for this difference and is there a way to avoid the apparent additional Linux overhead?
> 
> I attempted to isolate the behavior with a test that simply returns an existing object from the worker back to the main R session.
> 
> library(parallel)
> library(microbenchmark)
> gcinfo(TRUE)
> cl <- makeCluster(1)
> (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
> plot(x$time, ylab = "microseconds")
> head(x$time, n = 10)
> 
> On Windows/MacOS, the test runs in 300-500 microseconds depending on hardware. A few of the 1000 runs are an order of magnitude slower but this can probably be attributed to garbage collection on the worker.
> 
> On Linux, the first 5 or so executions run at comparable speeds but all subsequent executions are two orders of magnitude slower (~40 milliseconds).
> 
> I see this behavior across various platforms and hardware combinations:
> 
> Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
> Linux Mint 19.3 (AMD Ryzen 7 1800X)
> Linux Mint 20 (AMD Ryzen 7 3700X)
> Windows 10 (AMD Ryzen 7 4800H)
> MacOS 10.15.7 (Intel Core i7-8850H)
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From m@rk@v@nder|oo @end|ng |rom gm@||@com  Mon Nov  2 10:07:48 2020
From: m@rk@v@nder|oo @end|ng |rom gm@||@com (Mark van der Loo)
Date: Mon, 2 Nov 2020 10:07:48 +0100
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <e271b365-a2cf-488a-b316-f89e7b46e885@gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
 <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
 <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
 <24479.4908.672903.801397@rob.eddelbuettel.com>
 <e271b365-a2cf-488a-b316-f89e7b46e885@gmail.com>
Message-ID: <CAOKDuOjXytZnPFbrsq_P-z61e3uZPTRG=JDHi1p7WWoxbpH=AQ@mail.gmail.com>

On Sun, Nov 1, 2020 at 10:39 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 01/11/2020 2:57 p.m., Dirk Eddelbuettel wrote:
> >
> > The closest to a canonical reference for a static vignette is the basic
> blog
> > post by Mark at
> >
> >
> https://www.markvanderloo.eu/yaRb/2019/01/11/add-a-static-pdf-vignette-to-an-r-package/
> >
> > which I follow in a number of packages.
> >
> > Back to the original point by Alexandre: No, I do _not_ think we can do
> > without a double copy of the _pre-made_ pdf ("input") and the
> _resulting_ pdf
> > ("output").
> >
> > That bugs me a little too but I take it as a given as static / pre-made
> > vignettes are non-standard (given lack of any mention in WRE, and the
> pretty
> > obvious violation of the "spirit of the law" of vignette which is after
> all
> > made to run code, not to avoid it). Yet uses for static vignettes are
> pretty
> > valid and here we are with another clear as mud situation.
> >
>
> In many cases such files aren't vignettes.
>
> By definition, packages should contain plain text source code for
> vignettes.  They can contain other PDF files in inst/doc, but if you
> don't include the plain text source, those aren't vignettes.
>
> An exception would be a package that contains the source code but
> doesn't want to require CRAN or other users to run it, because it's too
> time-consuming, or needs obscure resources.  The CRAN policy discusses
> this.
>
> Duncan Murdoch
>
>
It would be nice if the documents in inst/doc were linked to on the CRAN
landing page of a package. I think that documents under inst/doc are a bit
hard to find if package authors do not create (possibly many) links to them
in Rd files or vignettes.

Cheers,
Mark

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Nov  2 11:22:02 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Nov 2020 05:22:02 -0500
Subject: [Rd] vignettes present in 2 folders or won't work
In-Reply-To: <CAOKDuOjXytZnPFbrsq_P-z61e3uZPTRG=JDHi1p7WWoxbpH=AQ@mail.gmail.com>
References: <CAERMt4eKagsBYjGRbJOJugWgB03b0QeenJMSdRwbXcy0qqxCMA@mail.gmail.com>
 <aed3b504-93f0-fc77-3bc3-5c7b7286286b@gmail.com>
 <CAERMt4eknfdoHjgxN9gCbHeQ=odtO_YargCWNK=Ntsuv5HbyhQ@mail.gmail.com>
 <6c01a1ec-9846-e906-d46f-1175c866c4f1@gmail.com>
 <18624aa0-215e-3afe-28bd-d450a3bae725@gmail.com>
 <24479.4908.672903.801397@rob.eddelbuettel.com>
 <e271b365-a2cf-488a-b316-f89e7b46e885@gmail.com>
 <CAOKDuOjXytZnPFbrsq_P-z61e3uZPTRG=JDHi1p7WWoxbpH=AQ@mail.gmail.com>
Message-ID: <92e51613-b647-5d72-793a-dd64e0edac3c@gmail.com>

On 02/11/2020 4:07 a.m., Mark van der Loo wrote:
> 
> 
> On Sun, Nov 1, 2020 at 10:39 PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     On 01/11/2020 2:57 p.m., Dirk Eddelbuettel wrote:
>      >
>      > The closest to a canonical reference for a static vignette is the
>     basic blog
>      > post by Mark at
>      >
>      >
>     https://www.markvanderloo.eu/yaRb/2019/01/11/add-a-static-pdf-vignette-to-an-r-package/
>      >
>      > which I follow in a number of packages.
>      >
>      > Back to the original point by Alexandre: No, I do _not_ think we
>     can do
>      > without a double copy of the _pre-made_ pdf ("input") and the
>     _resulting_ pdf
>      > ("output").
>      >
>      > That bugs me a little too but I take it as a given as static /
>     pre-made
>      > vignettes are non-standard (given lack of any mention in WRE, and
>     the pretty
>      > obvious violation of the "spirit of the law" of vignette which is
>     after all
>      > made to run code, not to avoid it). Yet uses for static vignettes
>     are pretty
>      > valid and here we are with another clear as mud situation.
>      >
> 
>     In many cases such files aren't vignettes.
> 
>     By definition, packages should contain plain text source code for
>     vignettes.? They can contain other PDF files in inst/doc, but if you
>     don't include the plain text source, those aren't vignettes.
> 
>     An exception would be a package that contains the source code but
>     doesn't want to require CRAN or other users to run it, because it's too
>     time-consuming, or needs obscure resources.? The CRAN policy
>     discusses this.
> 
>     Duncan Murdoch
> 
> 
> It would be nice if the documents in inst/doc were linked to on the CRAN 
> landing page of a package. I think that documents under inst/doc are a 
> bit hard to find if package authors do not create (possibly many) links 
> to them in Rd files or vignettes.

What I'd suggest is that you write a "browseDocs" function that displays 
them in some nice format (similar to "browseVignettes").  Maybe CRAN 
would choose to add a new category listing its results, but at a 
minimum, you could very easily add a vignette called "Other documents" 
that contains a list of links.   It wouldn't be as prominent as 
"Vignettes" on CRAN, but you could make the display as prominent as you 
want on your own web page.

Duncan Murdoch


From |uc@r @end|ng |rom |edor@project@org  Mon Nov  2 14:05:25 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 2 Nov 2020 14:05:25 +0100
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
Message-ID: <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>

On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>
> It looks like R sockets on Linux could do with TCP_NODELAY -- without (status quo):

How many network packets are generated with and without it? If there
are many small writes and thus setting TCP_NODELAY causes many small
packets to be sent, it might make more sense to set TCP_QUICKACK
instead.

I?aki

> Unit: microseconds
>                    expr      min       lq     mean  median       uq      max
>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 48027.83
>  neval
>   1000
>
> exactly the same machine + R but with TCP_NODELAY enabled in R_SockConnect():
>
> Unit: microseconds
>                    expr     min     lq     mean  median      uq      max neval
>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 5322.234  1000
>
> Cheers,
> Simon
>
>
> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
> >
> > I'm exploring latency overhead of parallel PSOCK workers and noticed that serializing/unserializing data back to the main R session is significantly slower on Linux than it is on Windows/MacOS with similar hardware. Is there a reason for this difference and is there a way to avoid the apparent additional Linux overhead?
> >
> > I attempted to isolate the behavior with a test that simply returns an existing object from the worker back to the main R session.
> >
> > library(parallel)
> > library(microbenchmark)
> > gcinfo(TRUE)
> > cl <- makeCluster(1)
> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
> > plot(x$time, ylab = "microseconds")
> > head(x$time, n = 10)
> >
> > On Windows/MacOS, the test runs in 300-500 microseconds depending on hardware. A few of the 1000 runs are an order of magnitude slower but this can probably be attributed to garbage collection on the worker.
> >
> > On Linux, the first 5 or so executions run at comparable speeds but all subsequent executions are two orders of magnitude slower (~40 milliseconds).
> >
> > I see this behavior across various platforms and hardware combinations:
> >
> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
> > Linux Mint 20 (AMD Ryzen 7 3700X)
> > Windows 10 (AMD Ryzen 7 4800H)
> > MacOS 10.15.7 (Intel Core i7-8850H)
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Mon Nov  2 14:42:13 2020
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Mon, 2 Nov 2020 13:42:13 +0000
Subject: [Rd] vignettes present in 2 folders or won't work
Message-ID: <AM0PR0102MB3443DE5699D01FF88C644A0CAE100@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>

From: Duncan Murdoch <murdoch.duncan at gmail.com>
To: Mark van der Loo <mark.vanderloo at gmail.com>
Cc: Dirk Eddelbuettel <edd at debian.org>, r-devel
	<r-devel at r-project.org>


Further to Duncan's comments:

> It would be nice if the documents in inst/doc were linked to on the CRAN 
> landing page of a package. I think that documents under inst/doc are a 
> bit hard to find if package authors do not create (possibly many) links 
> to them in Rd files or vignettes.

There is the seemingly underused option "package" of help():

help(package = "pkgname", help_type = "html")

The vignettes and other documents (including sources of vignettes, etc) are at the top of the html page (help_type is used in case the default for help is text format, when the output is less convenient in this case). 

What is shown can be customised by a custom index.tml under inst/doc (described in WRE).  An inconvenience for users of devtools::check()  is that it wipes out inst/doc (but it does ask for confirmation).


Georgi Boshnakov



------------------------------

Message: 12
Date: Mon, 2 Nov 2020 05:22:02 -0500
From: Duncan Murdoch <murdoch.duncan at gmail.com>
To: Mark van der Loo <mark.vanderloo at gmail.com>
Cc: Dirk Eddelbuettel <edd at debian.org>, r-devel
	<r-devel at r-project.org>
Subject: Re: [Rd] vignettes present in 2 folders or won't work
Message-ID: <92e51613-b647-5d72-793a-dd64e0edac3c at gmail.com>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

On 02/11/2020 4:07 a.m., Mark van der Loo wrote:
> 
> 
> On Sun, Nov 1, 2020 at 10:39 PM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     On 01/11/2020 2:57 p.m., Dirk Eddelbuettel wrote:
>      >
>      > The closest to a canonical reference for a static vignette is the
>     basic blog
>      > post by Mark at
>      >
>      >
>     https://www.markvanderloo.eu/yaRb/2019/01/11/add-a-static-pdf-vignette-to-an-r-package/
>      >
>      > which I follow in a number of packages.
>      >
>      > Back to the original point by Alexandre: No, I do _not_ think we
>     can do
>      > without a double copy of the _pre-made_ pdf ("input") and the
>     _resulting_ pdf
>      > ("output").
>      >
>      > That bugs me a little too but I take it as a given as static /
>     pre-made
>      > vignettes are non-standard (given lack of any mention in WRE, and
>     the pretty
>      > obvious violation of the "spirit of the law" of vignette which is
>     after all
>      > made to run code, not to avoid it). Yet uses for static vignettes
>     are pretty
>      > valid and here we are with another clear as mud situation.
>      >
> 
>     In many cases such files aren't vignettes.
> 
>     By definition, packages should contain plain text source code for
>     vignettes.? They can contain other PDF files in inst/doc, but if you
>     don't include the plain text source, those aren't vignettes.
> 
>     An exception would be a package that contains the source code but
>     doesn't want to require CRAN or other users to run it, because it's too
>     time-consuming, or needs obscure resources.? The CRAN policy
>     discusses this.
> 
>     Duncan Murdoch
> 
> 
> It would be nice if the documents in inst/doc were linked to on the CRAN 
> landing page of a package. I think that documents under inst/doc are a 
> bit hard to find if package authors do not create (possibly many) links 
> to them in Rd files or vignettes.

What I'd suggest is that you write a "browseDocs" function that displays 
them in some nice format (similar to "browseVignettes").  Maybe CRAN 
would choose to add a new category listing its results, but at a 
minimum, you could very easily add a vignette called "Other documents" 
that contains a list of links.   It wouldn't be as prominent as 
"Vignettes" on CRAN, but you could make the display as prominent as you 
want on your own web page.

Duncan Murdoch




------------------------------

Subject: Digest Footer

_______________________________________________
R-devel at r-project.org mailing list  DIGESTED
https://stat.ethz.ch/mailman/listinfo/r-devel


------------------------------

End of R-devel Digest, Vol 213, Issue 1
***************************************

From je|| @end|ng |rom vtke||er@@com  Mon Nov  2 14:28:55 2020
From: je|| @end|ng |rom vtke||er@@com (Jeff)
Date: Mon, 02 Nov 2020 08:28:55 -0500
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
Message-ID: <7486JQ.F60K6EHKGCP02@vtkellers.com>

Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that 
they might determine what is best for their potentially latency- or 
throughput-sensitive application?

Best,
Jeff

On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org> 
wrote:
> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek 
> <simon.urbanek at r-project.org> wrote:
>> 
>>  It looks like R sockets on Linux could do with TCP_NODELAY -- 
>> without (status quo):
> 
> How many network packets are generated with and without it? If there
> are many small writes and thus setting TCP_NODELAY causes many small
> packets to be sent, it might make more sense to set TCP_QUICKACK
> instead.
> 
> I?aki
> 
>>  Unit: microseconds
>>                     expr      min       lq     mean  median       uq 
>>      max
>>   clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 
>> 48027.83
>>   neval
>>    1000
>> 
>>  exactly the same machine + R but with TCP_NODELAY enabled in 
>> R_SockConnect():
>> 
>>  Unit: microseconds
>>                     expr     min     lq     mean  median      uq     
>>  max neval
>>   clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 
>> 5322.234  1000
>> 
>>  Cheers,
>>  Simon
>> 
>> 
>>  > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
>>  >
>>  > I'm exploring latency overhead of parallel PSOCK workers and 
>> noticed that serializing/unserializing data back to the main R 
>> session is significantly slower on Linux than it is on Windows/MacOS 
>> with similar hardware. Is there a reason for this difference and is 
>> there a way to avoid the apparent additional Linux overhead?
>>  >
>>  > I attempted to isolate the behavior with a test that simply 
>> returns an existing object from the worker back to the main R 
>> session.
>>  >
>>  > library(parallel)
>>  > library(microbenchmark)
>>  > gcinfo(TRUE)
>>  > cl <- makeCluster(1)
>>  > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = 
>> "us"))
>>  > plot(x$time, ylab = "microseconds")
>>  > head(x$time, n = 10)
>>  >
>>  > On Windows/MacOS, the test runs in 300-500 microseconds depending 
>> on hardware. A few of the 1000 runs are an order of magnitude slower 
>> but this can probably be attributed to garbage collection on the 
>> worker.
>>  >
>>  > On Linux, the first 5 or so executions run at comparable speeds 
>> but all subsequent executions are two orders of magnitude slower 
>> (~40 milliseconds).
>>  >
>>  > I see this behavior across various platforms and hardware 
>> combinations:
>>  >
>>  > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
>>  > Linux Mint 19.3 (AMD Ryzen 7 1800X)
>>  > Linux Mint 20 (AMD Ryzen 7 3700X)
>>  > Windows 10 (AMD Ryzen 7 4800H)
>>  > MacOS 10.15.7 (Intel Core i7-8850H)
>>  >
>>  > ______________________________________________
>>  > R-devel at r-project.org mailing list
>>  > https://stat.ethz.ch/mailman/listinfo/r-devel
>>  >
>> 
>>  ______________________________________________
>>  R-devel at r-project.org mailing list
>>  https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> --
> I?aki ?car


From |uc@r @end|ng |rom |edor@project@org  Mon Nov  2 14:47:36 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 2 Nov 2020 14:47:36 +0100
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <7486JQ.F60K6EHKGCP02@vtkellers.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
Message-ID: <CALEXWq36bnR-+Gv8XU2U1BwaaM12V381fTCRUaN72dO2NKbmLg@mail.gmail.com>

On Mon, 2 Nov 2020 at 14:29, Jeff <jeff at vtkellers.com> wrote:
>
> Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that
> they might determine what is best for their potentially latency- or
> throughput-sensitive application?

I think it makes sense (with a sensible default). E.g., Julia does this [1-2].

[1] https://docs.julialang.org/en/v1/stdlib/Sockets/#Sockets.nagle
[2] https://docs.julialang.org/en/v1/stdlib/Sockets/#Sockets.quickack

-- 
I?aki ?car


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Nov  2 20:46:27 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 2 Nov 2020 20:46:27 +0100
Subject: [Rd] bug report for make check
In-Reply-To: <CAC2h7uvO5dYdLf6G+FaM8x0bhp6MuduprQExKL2TB3SwN5E-nw@mail.gmail.com>
References: <CAC2h7uvMt+Eyd7=ppR2HtZgpCeVyBc6ufJG2ghYK6HaL-RyDgw@mail.gmail.com>
 <bee4b0dc-58e8-137c-5e27-0719bffaee1d@gmail.com>
 <CAC2h7uvO5dYdLf6G+FaM8x0bhp6MuduprQExKL2TB3SwN5E-nw@mail.gmail.com>
Message-ID: <e276dd4c-6532-31bb-9178-30869823e370@gmail.com>

We've fixed the test to allow the current behavior of all.equal.POSIXt 
for now. It became clear that figuring out how to best improve 
all.equal.POSIXt would take much longer.

Best
Tomas

On 10/30/20 12:00 PM, Kasper Daniel Hansen wrote:
> Thanks, I'm going to shut up then.
>
> Despite having been reported multiple times, it was not at all clear 
> to me that this was being worked on with the intention of addressing 
> make check - that is one of the limitations of the communication 
> system we use.
>
> Best,
> Kasper
>
> On Fri, Oct 30, 2020 at 11:38 AM Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     Dear Kasper,
>
>     if you want to submit a bug via bugzilla, please first read
>
>     https://www.r-project.org/bugs.html
>
>     and you will learn there that there is an email address to use when
>     asking for an account, not all R-devel mailing list readers need
>     to read
>     that.
>
>     Moreover, I can see you already have an account in R bugzilla.
>
>     Moreover, bugs can be reported also on R-devel mailing list and
>     this has
>     been reported already several times, we are working on it, it is not
>     clear what is the right way to fix this.
>
>     Thanks for your patience,
>     Tomas
>
>     On 10/30/20 11:24 AM, Kasper Daniel Hansen wrote:
>     > I would like to request access to bugzilla to file a bug report
>     on make
>     > check for R-devel.
>     >
>     > Following changes to all.equal.POSIXt,
>     >? ? make check
>     > now reports an error if the environment variable TZ is set to
>     >? ? TZ="US/Eastern"
>     > (and likely other values). This can be addressed by using the
>     argument
>     > check.tzone=FALSE in the call to all.equal.POSIXt in
>     reg-tests-2.R. A patch
>     > has been posted by Sebastian Meyer in the R-devel thread
>     "timezone tests
>     > and R-devel".
>     >
>
>
>
> -- 
> Best,
> Kasper



	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom r-project@org  Wed Nov  4 02:06:37 2020
From: @|mon@urb@nek @end|ng |rom r-project@org (Simon Urbanek)
Date: Wed, 4 Nov 2020 14:06:37 +1300
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <7486JQ.F60K6EHKGCP02@vtkellers.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
Message-ID: <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>

I'm not sure the user would know ;). This is very system-specific issue just because the Linux network stack behaves so differently from other OSes (for purely historical reasons). That makes it hard to abstract as a "feature" for the R sockets that are supposed to be platform-independent. At least TCP_NODELAY is actually part of POSIX so it is on better footing, and disabling delayed ACK is practically only useful to work around the other side having Nagle on, so I would expect it to be rarely used.

This is essentially RFC since we don't have a mechanism for socket options (well, almost, there is timeout and blocking already...) and I don't think we want to expose low-level details so perhaps one idea would be to add something like delay=NA to socketConnection() in order to not touch (NA), enable (TRUE) or disable (FALSE) TCP_NODELAY. I wonder if there is any other way we could infer the intention of the user to try to choose the right approach...

Cheers,
Simon


> On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com> wrote:
> 
> Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that they might determine what is best for their potentially latency- or throughput-sensitive application?
> 
> Best,
> Jeff
> 
> On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org> wrote:
>> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>> It looks like R sockets on Linux could do with TCP_NODELAY -- without (status quo):
>> How many network packets are generated with and without it? If there
>> are many small writes and thus setting TCP_NODELAY causes many small
>> packets to be sent, it might make more sense to set TCP_QUICKACK
>> instead.
>> I?aki
>>> Unit: microseconds
>>>                    expr      min       lq     mean  median       uq      max
>>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 48027.83
>>>  neval
>>>   1000
>>> exactly the same machine + R but with TCP_NODELAY enabled in R_SockConnect():
>>> Unit: microseconds
>>>                    expr     min     lq     mean  median      uq      max neval
>>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 5322.234  1000
>>> Cheers,
>>> Simon
>>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
>>> >
>>> > I'm exploring latency overhead of parallel PSOCK workers and noticed that serializing/unserializing data back to the main R session is significantly slower on Linux than it is on Windows/MacOS with similar hardware. Is there a reason for this difference and is there a way to avoid the apparent additional Linux overhead?
>>> >
>>> > I attempted to isolate the behavior with a test that simply returns an existing object from the worker back to the main R session.
>>> >
>>> > library(parallel)
>>> > library(microbenchmark)
>>> > gcinfo(TRUE)
>>> > cl <- makeCluster(1)
>>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
>>> > plot(x$time, ylab = "microseconds")
>>> > head(x$time, n = 10)
>>> >
>>> > On Windows/MacOS, the test runs in 300-500 microseconds depending on hardware. A few of the 1000 runs are an order of magnitude slower but this can probably be attributed to garbage collection on the worker.
>>> >
>>> > On Linux, the first 5 or so executions run at comparable speeds but all subsequent executions are two orders of magnitude slower (~40 milliseconds).
>>> >
>>> > I see this behavior across various platforms and hardware combinations:
>>> >
>>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
>>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
>>> > Linux Mint 20 (AMD Ryzen 7 3700X)
>>> > Windows 10 (AMD Ryzen 7 4800H)
>>> > MacOS 10.15.7 (Intel Core i7-8850H)
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>> >
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> --
>> I?aki ?car
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From |uc@r @end|ng |rom |edor@project@org  Wed Nov  4 11:41:24 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 4 Nov 2020 11:41:24 +0100
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
Message-ID: <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>

Please, check a tcpdump session on localhost while running the following script:

library(parallel)
library(tictoc)
cl <- makeCluster(1)
Sys.sleep(1)

for (i in 1:10) {
  tic()
  x <- clusterEvalQ(cl, iris)
  toc()
}

The initialization phase comprises 7 packets. Then, the 1-second sleep
will help you see where the evaluation starts. Each clusterEvalQ
generates 6 packets:

1. main -> worker PSH, ACK 1026 bytes
2. worker -> main ACK 66 bytes
3. worker -> main PSH, ACK 3758 bytes
4. main -> worker ACK 66 bytes
5. worker -> main PSH, ACK 2484 bytes
6. main -> worker ACK 66 bytes

The first two are the command and its ACK, the following are the data
back and their ACKs. In the first 4-5 iterations, I see no delay at
all. Then, in the following iterations, a 40 ms delay starts to happen
between packets 3 and 4, that is: the main process delays the ACK to
the first packet of the incoming result.

So I'd say Nagle is hardly to blame for this. It would be interesting
to see how many packets are generated with TCP_NODELAY on. If there
are still 6 packets, then we are fine. If we suddenly see a gazillion
packets, then TCP_NODELAY does more harm than good. On the other hand,
TCP_QUICKACK would surely solve the issue without any drawback. As
Nagle himself put it once, "set TCP_QUICKACK. If you find a case where
that makes things worse, let me know."

I?aki

On Wed, 4 Nov 2020 at 04:34, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>
> I'm not sure the user would know ;). This is very system-specific issue just because the Linux network stack behaves so differently from other OSes (for purely historical reasons). That makes it hard to abstract as a "feature" for the R sockets that are supposed to be platform-independent. At least TCP_NODELAY is actually part of POSIX so it is on better footing, and disabling delayed ACK is practically only useful to work around the other side having Nagle on, so I would expect it to be rarely used.
>
> This is essentially RFC since we don't have a mechanism for socket options (well, almost, there is timeout and blocking already...) and I don't think we want to expose low-level details so perhaps one idea would be to add something like delay=NA to socketConnection() in order to not touch (NA), enable (TRUE) or disable (FALSE) TCP_NODELAY. I wonder if there is any other way we could infer the intention of the user to try to choose the right approach...
>
> Cheers,
> Simon
>
>
> > On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com> wrote:
> >
> > Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that they might determine what is best for their potentially latency- or throughput-sensitive application?
> >
> > Best,
> > Jeff
> >
> > On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org> wrote:
> >> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> >>> It looks like R sockets on Linux could do with TCP_NODELAY -- without (status quo):
> >> How many network packets are generated with and without it? If there
> >> are many small writes and thus setting TCP_NODELAY causes many small
> >> packets to be sent, it might make more sense to set TCP_QUICKACK
> >> instead.
> >> I?aki
> >>> Unit: microseconds
> >>>                    expr      min       lq     mean  median       uq      max
> >>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 48027.83
> >>>  neval
> >>>   1000
> >>> exactly the same machine + R but with TCP_NODELAY enabled in R_SockConnect():
> >>> Unit: microseconds
> >>>                    expr     min     lq     mean  median      uq      max neval
> >>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 5322.234  1000
> >>> Cheers,
> >>> Simon
> >>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
> >>> >
> >>> > I'm exploring latency overhead of parallel PSOCK workers and noticed that serializing/unserializing data back to the main R session is significantly slower on Linux than it is on Windows/MacOS with similar hardware. Is there a reason for this difference and is there a way to avoid the apparent additional Linux overhead?
> >>> >
> >>> > I attempted to isolate the behavior with a test that simply returns an existing object from the worker back to the main R session.
> >>> >
> >>> > library(parallel)
> >>> > library(microbenchmark)
> >>> > gcinfo(TRUE)
> >>> > cl <- makeCluster(1)
> >>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
> >>> > plot(x$time, ylab = "microseconds")
> >>> > head(x$time, n = 10)
> >>> >
> >>> > On Windows/MacOS, the test runs in 300-500 microseconds depending on hardware. A few of the 1000 runs are an order of magnitude slower but this can probably be attributed to garbage collection on the worker.
> >>> >
> >>> > On Linux, the first 5 or so executions run at comparable speeds but all subsequent executions are two orders of magnitude slower (~40 milliseconds).
> >>> >
> >>> > I see this behavior across various platforms and hardware combinations:
> >>> >
> >>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
> >>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
> >>> > Linux Mint 20 (AMD Ryzen 7 3700X)
> >>> > Windows 10 (AMD Ryzen 7 4800H)
> >>> > MacOS 10.15.7 (Intel Core i7-8850H)
> >>> >
> >>> > ______________________________________________
> >>> > R-devel at r-project.org mailing list
> >>> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>> >
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >> --
> >> I?aki ?car
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


-- 
I?aki ?car


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Nov  4 15:43:41 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 4 Nov 2020 15:43:41 +0100
Subject: [Rd] sprintf, check number of parameters
In-Reply-To: <1N8GMk-1kXJ7R1NuC-0148bP@mail.gmx.com>
References: <1N8GMk-1kXJ7R1NuC-0148bP@mail.gmx.com>
Message-ID: <3547d606-810e-6d6c-df92-d05a0d3b8f68@gmail.com>

Dear Matthias,

thanks for the suggestion, R-devel now warns on unused arguments by 
format (both numbered and un-numbered). It seems that the new warning is 
useful, often it finds cases when arguments were accidentally passed to 
sprintf but had been meant for a different function.

R allows combining both numbered and un-numbered references in a single 
format, even though it may be better to avoid and POSIX does not allow 
that.

Best
Tomas

On 9/20/20 1:03 PM, Matthias Gondan wrote:
> Dear R developers,
>
> I am wondering if this should raise an error or a warning.
>
>> sprintf('%.f, %.f', 1, 2, 3)
> [1] "1, 2"
>
> I am aware that R has ?numbered? sprintf arguments (sprintf('%1$.f', ?), and in that case, omissing of specific arguments may be intended. But in the usual syntax, omission of an argument is probably a mistake.
>
> Thank you for your consideration.
>
> Best wishes,
>
> Matthias
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@tth|@@-gond@n @end|ng |rom gmx@de  Wed Nov  4 16:01:59 2020
From: m@tth|@@-gond@n @end|ng |rom gmx@de (matthias-gondan)
Date: Wed, 04 Nov 2020 16:01:59 +0100
Subject: [Rd] sprintf, check number of parameters
In-Reply-To: <3547d606-810e-6d6c-df92-d05a0d3b8f68@gmail.com>
Message-ID: <1MyKDU-1kQFdI0KZI-00yjJP@mail.gmx.com>


Dear Tomas,Thank you.Regarding the "unnumbered" arguments, i.e. sprintf('%f %f', 1, 2, 3). This was the case I wanted to report, here a warning can be very useful.Regarding the "numbered" arguments, that is, sprintf('%$1f %$3f', 1, 2, 3). Here, omission of an argument might be intended, for example, in an application with support for multiple languages. Therefore, I am wondering if a warning should be raised.Regarding the mixture: never heard that this works, and I would probably not want to use it...Your work is much appreciated, thanks again.Best regards,Matthias
-------- Urspr?ngliche Nachricht --------Von: Tomas Kalibera <tomas.kalibera at gmail.com> Datum: 04.11.20  15:43  (GMT+01:00) An: Matthias Gondan <matthias-gondan at gmx.de>, r-devel at r-project.org Betreff: Re: [Rd] sprintf, check number of parameters Dear Matthias,thanks for the suggestion, R-devel now warns on unused arguments by format (both numbered and un-numbered). It seems that the new warning is useful, often it finds cases when arguments were accidentally passed to sprintf but had been meant for a different function.R allows combining both numbered and un-numbered references in a single format, even though it may be better to avoid and POSIX does not allow that.BestTomasOn 9/20/20 1:03 PM, Matthias Gondan wrote:> Dear R developers,>> I am wondering if this should raise an error or a warning.>>> sprintf('%.f, %.f', 1, 2, 3)> [1] "1, 2">> I am aware that R has ?numbered? sprintf arguments (sprintf('%1$.f', ?), and in that case, omissing of specific arguments may be intended. But in the usual syntax, omission of an argument is probably a mistake.>> Thank you for your consideration.>> Best wishes,>> Matthias>>> 	[[alternative HTML version deleted]]>> ______________________________________________> R-devel at r-project.org mailing list> https://stat.ethz.ch/mailman/listinfo/r-devel
	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Nov  4 16:26:12 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 4 Nov 2020 16:26:12 +0100
Subject: [Rd] sprintf, check number of parameters
In-Reply-To: <1MyKDU-1kQFdI0KZI-00yjJP@mail.gmx.com>
References: <1MyKDU-1kQFdI0KZI-00yjJP@mail.gmx.com>
Message-ID: <cd471ca4-2322-95f1-7975-a71594cf8df2@gmail.com>


Dear Matthias,

On 11/4/20 4:01 PM, matthias-gondan wrote:
> Dear Tomas,
>
> Thank you.
>
> Regarding the "unnumbered" arguments, i.e. sprintf('%f %f', 1, 2, 3). 
> This was the case I wanted to report, here a warning can be very useful.
>
> Regarding the "numbered" arguments, that is, sprintf('%$1f %$3f', 1, 
> 2, 3). Here, omission of an argument might be intended, for example, 
> in an application with support for multiple languages. Therefore, I am 
> wondering if a warning should be raised.

It is rather "%$1f", etc.

Say GCC warns also on unused arguments with numbered references ("unused 
arguments in $-style format"). I have not yet received any feedback from 
package maintainers who would have found a problem with the new warning 
for message translation. Would you have an example pattern that should 
be supported? Shouldn't all arguments be used, anyway, just possibly in 
different order?

Unless there is a strong reason to do otherwise, I would rather not 
introduce more deviations from the C behavior. Of course, technically it 
would be simple: not print a warning when there is at least one numbered 
reference.

Best
Tomas

> Regarding the mixture: never heard that this works, and I would 
> probably not want to use it...
>
> Your work is much appreciated, thanks again.
>
> Best regards,
>
> Matthias
>
>
> -------- Urspr?ngliche Nachricht --------
> Von: Tomas Kalibera <tomas.kalibera at gmail.com>
> Datum: 04.11.20 15:43 (GMT+01:00)
> An: Matthias Gondan <matthias-gondan at gmx.de>, r-devel at r-project.org
> Betreff: Re: [Rd] sprintf, check number of parameters
>
> Dear Matthias,
>
> thanks for the suggestion, R-devel now warns on unused arguments by
> format (both numbered and un-numbered). It seems that the new warning is
> useful, often it finds cases when arguments were accidentally passed to
> sprintf but had been meant for a different function.
>
> R allows combining both numbered and un-numbered references in a single
> format, even though it may be better to avoid and POSIX does not allow
> that.
>
> Best
> Tomas
>
> On 9/20/20 1:03 PM, Matthias Gondan wrote:
> > Dear R developers,
> >
> > I am wondering if this should raise an error or a warning.
> >
> >> sprintf('%.f, %.f', 1, 2, 3)
> > [1] "1, 2"
> >
> > I am aware that R has ?numbered? sprintf arguments (sprintf('%1$.f', 
> ?), and in that case, omissing of specific arguments may be intended. 
> But in the usual syntax, omission of an argument is probably a mistake.
> >
> > Thank you for your consideration.
> >
> > Best wishes,
> >
> > Matthias
> >
> >
> > [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From m@tth|@@-gond@n @end|ng |rom gmx@de  Wed Nov  4 17:32:51 2020
From: m@tth|@@-gond@n @end|ng |rom gmx@de (matthias-gondan)
Date: Wed, 04 Nov 2020 17:32:51 +0100
Subject: [Rd] sprintf, check number of parameters
In-Reply-To: <cd471ca4-2322-95f1-7975-a71594cf8df2@gmail.com>
Message-ID: <1N6bk4-1kGufu45vy-0182SI@mail.gmx.com>

Now that you ask, no real use case comes to my mind in which an argument is skipped in one language but not another.?Thank you for implementing the warning, I guess it will be useful on the long run.Best wishesMatthias
-------- Urspr?ngliche Nachricht --------Von: Tomas Kalibera <tomas.kalibera at gmail.com> Datum: 04.11.20  16:26  (GMT+01:00) An: matthias-gondan <matthias-gondan at gmx.de>, r-devel at r-project.org Betreff: Re: [Rd] sprintf, check number of parameters 
    
    
    Dear Matthias,
    
    
    On 11/4/20 4:01 PM, matthias-gondan
      wrote:
    
    
      
      Dear Tomas,
      
      
      Thank you.
      
      
      Regarding the "unnumbered" arguments, i.e.
        sprintf('%f %f', 1, 2, 3). This was the case I wanted to report,
        here a warning can be very useful.
      
      
      Regarding the "numbered" arguments, that is,
        sprintf('%$1f %$3f', 1, 2, 3). Here, omission of an argument
        might be intended, for example, in an application with support
        for multiple languages. Therefore, I am wondering if a warning
        should be raised.
    
    It is rather "%$1f", etc.
    Say GCC warns also on unused arguments with numbered references
      ("unused arguments in $-style format"). I have not yet received
      any feedback from package maintainers who would have found a
      problem with the new warning for message translation. Would you
      have an example pattern that should be supported? Shouldn't all
      arguments be used, anyway, just possibly in different order?
    Unless there is a strong reason to do otherwise, I would rather
      not introduce more deviations from the C behavior. Of course,
      technically it would be simple: not print a warning when there is
      at least one numbered reference.
    
    Best
      Tomas
    
    
      Regarding the mixture: never heard that this
        works, and I would probably not want to use it...
      
      
      Your work is much appreciated, thanks again.
      
      
      Best regards,
      
      
      
        
        Matthias
      
      
      
      
      
        -------- Urspr?ngliche Nachricht --------
        Von: Tomas Kalibera <tomas.kalibera at gmail.com> 
        Datum: 04.11.20 15:43 (GMT+01:00) 
        An: Matthias Gondan <matthias-gondan at gmx.de>,
          r-devel at r-project.org 
        Betreff: Re: [Rd] sprintf, check number of parameters 
        
        
      
      Dear Matthias,
      
      thanks for the suggestion, R-devel now warns on unused arguments
      by 
      format (both numbered and un-numbered). It seems that the new
      warning is 
      useful, often it finds cases when arguments were accidentally
      passed to 
      sprintf but had been meant for a different function.
      
      R allows combining both numbered and un-numbered references in a
      single 
      format, even though it may be better to avoid and POSIX does not
      allow 
      that.
      
      Best
      Tomas
      
      On 9/20/20 1:03 PM, Matthias Gondan wrote:
      > Dear R developers,
      >
      > I am wondering if this should raise an error or a warning.
      >
      >> sprintf('%.f, %.f', 1, 2, 3)
      > [1] "1, 2"
      >
      > I am aware that R has ?numbered? sprintf arguments
      (sprintf('%1$.f', ?), and in that case, omissing of specific
      arguments may be intended. But in the usual syntax, omission of an
      argument is probably a mistake.
      >
      > Thank you for your consideration.
      >
      > Best wishes,
      >
      > Matthias
      >
      >
      > [[alternative HTML version deleted]]
      >
      > ______________________________________________
      > R-devel at r-project.org mailing list
      > https://stat.ethz.ch/mailman/listinfo/r-devel
      
      
    
    
    
  


	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Thu Nov  5 03:36:27 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Wed, 4 Nov 2020 18:36:27 -0800
Subject: [Rd] (no subject)
Message-ID: <CAHqSRuRHKo95y_Tt6GysYtUumxcUZRUbxQHaVfiBq7jLi2zwkA@mail.gmail.com>

Hi All,

I am no longer with TIBCO and hope to be able to contribute more directly
to R now.  It will take a little while to set up a build environment and to
start working on some bugzilla issues.

-Bill Dunlap
williamwdunlap at gmail.com

	[[alternative HTML version deleted]]


From I@J@Kocken @end|ng |rom uu@n|  Thu Nov  5 11:15:50 2020
From: I@J@Kocken @end|ng |rom uu@n| (Kocken, I.J. (Ilja))
Date: Thu, 5 Nov 2020 10:15:50 +0000
Subject: [Rd] Some packages have non-POSIX-compliant shell scripts.
 Implement a CRAN check for bashisms?
Message-ID: <AM6PR05MB4360AE234461D3DF8B659F16D2EE0@AM6PR05MB4360.eurprd05.prod.outlook.com>

Dear R-devel,

Recently I ran into trouble installing two separate packages, nloptr and ncdf4, both due to the same issue: they have scripts that have the shebang `#! /bin/sh', but have bashisms in them, i.e. non-POSIX-compliant bash scripts.

I use dash [1] as my shell environment, since it's about 4x as fast as bash. It looks like it's recently also become the default shell for Debian (and thus Ubuntu).

It took quite a while to figure out what the issue was in great collaboration with the author of ncdf4 (CC).

Perhaps it would be good to implement the utility checkbashisms [2] into the CRAN make pipeline to help discover these kinds of issues? Running `checkbashisms -f pkg/configure` on files that have the `#! /bin/sh` shebang gives useful information about which lines of code are secretly bash code, with some hints on how to make them POSIX-compliant. The alternative would of course be to change the shebang into `#! /bin/bash`.

Kind regards,

Ilja Kocken



[1]: http://gondor.apana.org.au/~herbert/dash/
[2]: https://packages.qa.debian.org/d/devscripts.html

From @eb@meyer @end|ng |rom |@u@de  Thu Nov  5 14:38:50 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Thu, 5 Nov 2020 14:38:50 +0100
Subject: [Rd] Some packages have non-POSIX-compliant shell scripts.
 Implement a CRAN check for bashisms?
In-Reply-To: <AM6PR05MB4360AE234461D3DF8B659F16D2EE0@AM6PR05MB4360.eurprd05.prod.outlook.com>
References: <AM6PR05MB4360AE234461D3DF8B659F16D2EE0@AM6PR05MB4360.eurprd05.prod.outlook.com>
Message-ID: <9252cc81-c549-ec90-4689-370734af82be@fau.de>

Your report underlines the importance of the checks implemented by CRAN.

In fact, checkbashisms has become an optional part of R CMD check in R
4.0.0, whose NEWS say

> R CMD check now optionally checks configure and cleanup scripts for non-Bourne-shell code ('bashisms').

The R Internals manual at
https://cran.r-project.org/doc/manuals/r-devel/R-ints.html reveals that
the corresponding environment variable is called "_R_CHECK_BASHISMS_".
It is false by default but true for CRAN submission checks (--as-cran),
except on Windows. The check is probably not enabled for the routine
checks on the CRAN check farm.


Am 05.11.20 um 11:15 schrieb Kocken, I.J. (Ilja):
> Dear R-devel,
> 
> Recently I ran into trouble installing two separate packages, nloptr and ncdf4, both due to the same issue: they have scripts that have the shebang `#! /bin/sh', but have bashisms in them, i.e. non-POSIX-compliant bash scripts.
> 
> I use dash [1] as my shell environment, since it's about 4x as fast as bash. It looks like it's recently also become the default shell for Debian (and thus Ubuntu).
> 
> It took quite a while to figure out what the issue was in great collaboration with the author of ncdf4 (CC).
> 
> Perhaps it would be good to implement the utility checkbashisms [2] into the CRAN make pipeline to help discover these kinds of issues? Running `checkbashisms -f pkg/configure` on files that have the `#! /bin/sh` shebang gives useful information about which lines of code are secretly bash code, with some hints on how to make them POSIX-compliant. The alternative would of course be to change the shebang into `#! /bin/bash`.
> 
> Kind regards,
> 
> Ilja Kocken
> 
> 
> 
> [1]: http://gondor.apana.org.au/~herbert/dash/
> [2]: https://packages.qa.debian.org/d/devscripts.html
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Nov  5 15:00:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 5 Nov 2020 09:00:40 -0500
Subject: [Rd] Named class vector
Message-ID: <fc627157-1e84-31d2-18d4-c8105ac05e42@gmail.com>

The source to the noquote() function looks like this:

noquote <- function(obj, right = FALSE) {
     ## constructor for a useful "minor" class
     if(!inherits(obj,"noquote"))
         class(obj) <- c(attr(obj, "class"),
                         if(right) c(right = "noquote") else "noquote")
     obj
}

Notice what happens with right = TRUE:

 > x <- noquote("a", right = TRUE)
 > x
[1] a
 > class(x)
     right
"noquote"

The class vector for x is named.  The print method pays attention to the 
name, so we get different behaviour for a class of "noquote" and a class 
of c(right = "noquote").

I had never noticed a named class vector before, and it raised some 
questions for me:

- Is this used anywhere else?
- Are names preserved in all the operations normally done on a class 
vector?  (As far as I can see they are, but maybe I've missed something.)
- Is it a good idea to encode a string value worth of information in the 
name, rather than setting the class to something like c("noquote", 
"right") instead?

Comments would be welcome.

Duncan Murdoch


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Nov  5 15:40:50 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 5 Nov 2020 15:40:50 +0100
Subject: [Rd] Named class vector
In-Reply-To: <fc627157-1e84-31d2-18d4-c8105ac05e42@gmail.com>
References: <fc627157-1e84-31d2-18d4-c8105ac05e42@gmail.com>
Message-ID: <24484.3826.756259.583705@hornik.net>

>>>>> Duncan Murdoch writes:

> The source to the noquote() function looks like this:
> noquote <- function(obj, right = FALSE) {
>      ## constructor for a useful "minor" class
>      if(!inherits(obj,"noquote"))
>          class(obj) <- c(attr(obj, "class"),
>                          if(right) c(right = "noquote") else "noquote")
>      obj
> }

> Notice what happens with right = TRUE:

>> x <- noquote("a", right = TRUE)
>> x
> [1] a
>> class(x)
>      right
> "noquote"

> The class vector for x is named.  The print method pays attention to the 
> name, so we get different behaviour for a class of "noquote" and a class 
> of c(right = "noquote").

> I had never noticed a named class vector before, and it raised some 
> questions for me:

> - Is this used anywhere else?

Not that I'd be aware of: I think MMae is the expert here.

> - Are names preserved in all the operations normally done on a class 
> vector?  (As far as I can see they are, but maybe I've missed something.)
> - Is it a good idea to encode a string value worth of information in the 
> name, rather than setting the class to something like c("noquote", 
> "right") instead?

My preference would be to have unnamed class vectors, so that the names
could perhaps eventually be used to store the name of the package which
owns the class.  For noquote, I guess you'd want something like

  c("noquote_right", "noquote")

Best
-k

> Comments would be welcome.

> Duncan Murdoch

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From b@|@mut2 @end|ng |rom ||||no|@@edu  Fri Nov  6 22:47:45 2020
From: b@|@mut2 @end|ng |rom ||||no|@@edu (Balamuta, James Joseph)
Date: Fri, 6 Nov 2020 21:47:45 +0000
Subject: [Rd] Process to Incorporate Functions from {parallely} into base
 R's {parallel} package
Message-ID: <F71707B2-61E9-4757-8B53-9F73886BE01D@illinois.edu>

Hi all,

Henrik Bengtsson has done some fantastic work with {future} and, more importantly, greatly improved constructing and deconstructing a parallelized environment within R. It was with great joy that I saw Henrik slowly split off some functionality of {future} into {parallelly} package. Reading over the package?s README, he states:

> The functions and features added to this package are written to be backward compatible with the parallel package, such that they may be incorporated there later.
> The parallelly package comes with an open invitation for the R Core Team to adopt all or parts of its code into the parallel package.

https://github.com/HenrikBengtsson/parallelly

I?m wondering what the appropriate process would be to slowly merge some functions from {parallelly} into the base R {parallel} package. Should this be done with targeted issues on Bugzilla for different fields Henrik has identified? Or would an omnibus patch bringing in all suggested modifications be preferred? Or is it best to discuss via the list-serv appropriate contributions?

Best,

JJB

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov  7 01:37:11 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 6 Nov 2020 19:37:11 -0500
Subject: [Rd] 
 Process to Incorporate Functions from {parallely} into base
 R's {parallel} package
In-Reply-To: <F71707B2-61E9-4757-8B53-9F73886BE01D@illinois.edu>
References: <F71707B2-61E9-4757-8B53-9F73886BE01D@illinois.edu>
Message-ID: <aa91f7bc-37be-73b8-cb99-f9e0223225f5@gmail.com>

On 06/11/2020 4:47 p.m., Balamuta, James Joseph wrote:
> Hi all,
> 
> Henrik Bengtsson has done some fantastic work with {future} and, more importantly, greatly improved constructing and deconstructing a parallelized environment within R. It was with great joy that I saw Henrik slowly split off some functionality of {future} into {parallelly} package. Reading over the package?s README, he states:
> 
>> The functions and features added to this package are written to be backward compatible with the parallel package, such that they may be incorporated there later.
>> The parallelly package comes with an open invitation for the R Core Team to adopt all or parts of its code into the parallel package.
> 
> https://github.com/HenrikBengtsson/parallelly
> 
> I?m wondering what the appropriate process would be to slowly merge some functions from {parallelly} into the base R {parallel} package. Should this be done with targeted issues on Bugzilla for different fields Henrik has identified? Or would an omnibus patch bringing in all suggested modifications be preferred? Or is it best to discuss via the list-serv appropriate contributions?

One way is to convince R Core that incorporating this into the parallel 
package would

  - make less work for them, or
  - add a lot to R that couldn't happen if it was a contributed package.

The fact that it's good isn't a good reason to put it into a base 
package, which would largely mean transferring Henrik's workload to R 
Core.  There are lots of good packages, and their maintainers should 
continue to maintain them.

Duncan Murdoch


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Nov  7 16:57:44 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 7 Nov 2020 15:57:44 +0000
Subject: [Rd] [R] Data Table not rendering properly using R shiny
In-Reply-To: <CCD71CB9-FF37-4621-AB4F-74C8720350B3@dcn.davis.ca.us>
References: <CAGY2U92qYgz1bNR4qRufB1AebgK4SiRRhXF6Wgk_haZowHR9aw@mail.gmail.com>
 <CCD71CB9-FF37-4621-AB4F-74C8720350B3@dcn.davis.ca.us>
Message-ID: <b5a292d0-b467-05ab-f00f-4273448e1dc7@sapo.pt>

Hello,

Or maybe


logical_idx <- max_usage_hours_per_region$Region %in% input$Region


Another option is ?match


Hope this helps,

Rui Barradas


?s 15:41 de 07/11/20, Jeff Newmiller escreveu:
> This looks odd...
> 
> max_usage_hours_per_region[input$Region,]
> 
> This would only work if you had rownames on that data frame corresponding to the names of the Regions. This is a common R mistake... you probably need
> 
> logical_idx <- max_usage_hours_per_region$Region == input$Region
> max_usage_hours_per_region[  logical_idx,]
> 
> That said, it is very difficult to separate out R questions when mixed into shiny code, so you would help yourself and this list to work on minimal reproducible examples that focus on the R syntax if possible for posts here. Read the Posting Guide.
> 
> On November 7, 2020 2:42:58 AM PST, Ritwik Mohapatra <ritm84 at gmail.com> wrote:
>> Hi All,
>>
>> I have a data output as below.I want to display them in an interactive
>> html
>> report using shiny but the data table is not rendering properly and
>> instead
>> giving NA values.
>>
>> max_usage_hours_per_region<-setNames(aggregate(df3_machine_region$sum_as_hours~df3_machine_region$Region,df3_machine_region,max),c("Region","Sum_as_Hours"))
>>
>> Region Sum_as_Hours
>> 1 Africa 1156.0833
>> 2 Americas 740.1667
>> 3 APAC 740.2833
>> 4 Europe 1895.2000
>> 5 PDO 1053.3500
>> 6 UK 0.0000
>>
>>
>> Rshiny code:
>>
>> library(shiny)
>>
>> ui <- fluidPage(
>> selectInput("Region","Select
>> Region",max_usage_hours_per_region$Region,selected = TRUE),
>> tableOutput("table")
>> )
>> server <- function(input, output) {
>> output$table <- renderTable(
>> max_usage_hours_per_region[input$Region,])
>> }
>> shinyApp(ui = ui, server = server)
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sat Nov  7 19:39:48 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sat, 7 Nov 2020 10:39:48 -0800
Subject: [Rd] 
 Process to Incorporate Functions from {parallely} into base
 R's {parallel} package
In-Reply-To: <aa91f7bc-37be-73b8-cb99-f9e0223225f5@gmail.com>
References: <F71707B2-61E9-4757-8B53-9F73886BE01D@illinois.edu>
 <aa91f7bc-37be-73b8-cb99-f9e0223225f5@gmail.com>
Message-ID: <CAFDcVCQ7Q1Wu7a7k2Rx41vMGqGJLhm_=OE6Sq35yZxmmBH6P-g@mail.gmail.com>

FWIW, there are indeed a few low hanging bug fixes in 'parallelly'
that should be easy to incorporate into 'parallel' without adding
extra maintenance.  For example, in parallel::makePSOCKcluster(), it
is not possible to disable SSH option '-l USER' so that it can be set
in ~/.ssh/config.  The remote user name will be the user name of your
local machine and if you try to set user=NULL, you'll end up with an
invalid SSH call.   The current behavior means that you are forced to
specify the remote user name in your R code.  All that it takes is to
fix this is to update:

  cmd <- paste(rshcmd, "-l", user, machine, cmd)

to something like:

  cmd <- paste(rshcmd, if (length(user) == 1L) paste("-l", user), machine, cmd)

This is one example of what I've patched in
parallelly::makeClusterPSOCK() over the years.  Another is the use of
reverse tunneling in SSH - that completely avoids the need to know and
specify your public IP and reconfiguring the firewalls from the remote
server back to your local machine so that the worker can connect back
to your local machine.  Not many users have the permission to
reconfigure firewalls and it's also extremely tedious.  Reverse SSH
tunneling is super simply; all you need to to is something like:

rshopts <- c(sprintf("-R %d:%s:%d", rscript_port, master, port), rshopts)

/Henrik

On Fri, Nov 6, 2020 at 4:37 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 06/11/2020 4:47 p.m., Balamuta, James Joseph wrote:
> > Hi all,
> >
> > Henrik Bengtsson has done some fantastic work with {future} and, more importantly, greatly improved constructing and deconstructing a parallelized environment within R. It was with great joy that I saw Henrik slowly split off some functionality of {future} into {parallelly} package. Reading over the package?s README, he states:
> >
> >> The functions and features added to this package are written to be backward compatible with the parallel package, such that they may be incorporated there later.
> >> The parallelly package comes with an open invitation for the R Core Team to adopt all or parts of its code into the parallel package.
> >
> > https://github.com/HenrikBengtsson/parallelly
> >
> > I?m wondering what the appropriate process would be to slowly merge some functions from {parallelly} into the base R {parallel} package. Should this be done with targeted issues on Bugzilla for different fields Henrik has identified? Or would an omnibus patch bringing in all suggested modifications be preferred? Or is it best to discuss via the list-serv appropriate contributions?
>
> One way is to convince R Core that incorporating this into the parallel
> package would
>
>   - make less work for them, or
>   - add a lot to R that couldn't happen if it was a contributed package.
>
> The fact that it's good isn't a good reason to put it into a base
> package, which would largely mean transferring Henrik's workload to R
> Core.  There are lots of good packages, and their maintainers should
> continue to maintain them.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov  7 21:44:32 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 7 Nov 2020 15:44:32 -0500
Subject: [Rd] 
 Process to Incorporate Functions from {parallely} into base
 R's {parallel} package
In-Reply-To: <CAFDcVCQ7Q1Wu7a7k2Rx41vMGqGJLhm_=OE6Sq35yZxmmBH6P-g@mail.gmail.com>
References: <F71707B2-61E9-4757-8B53-9F73886BE01D@illinois.edu>
 <aa91f7bc-37be-73b8-cb99-f9e0223225f5@gmail.com>
 <CAFDcVCQ7Q1Wu7a7k2Rx41vMGqGJLhm_=OE6Sq35yZxmmBH6P-g@mail.gmail.com>
Message-ID: <5ce800c3-34a3-3dd8-ce4f-8afb6638fb7a@gmail.com>

If these are easy changes, maybe someone will incorporate them.  You'll 
make the argument stronger for doing that if you can explain why it's 
better to do that than to keep them in parallely.

Duncan Murdoch

On 07/11/2020 1:39 p.m., Henrik Bengtsson wrote:
> FWIW, there are indeed a few low hanging bug fixes in 'parallelly'
> that should be easy to incorporate into 'parallel' without adding
> extra maintenance.  For example, in parallel::makePSOCKcluster(), it
> is not possible to disable SSH option '-l USER' so that it can be set
> in ~/.ssh/config.  The remote user name will be the user name of your
> local machine and if you try to set user=NULL, you'll end up with an
> invalid SSH call.   The current behavior means that you are forced to
> specify the remote user name in your R code.  All that it takes is to
> fix this is to update:
> 
>    cmd <- paste(rshcmd, "-l", user, machine, cmd)
> 
> to something like:
> 
>    cmd <- paste(rshcmd, if (length(user) == 1L) paste("-l", user), machine, cmd)
> 
> This is one example of what I've patched in
> parallelly::makeClusterPSOCK() over the years.  Another is the use of
> reverse tunneling in SSH - that completely avoids the need to know and
> specify your public IP and reconfiguring the firewalls from the remote
> server back to your local machine so that the worker can connect back
> to your local machine.  Not many users have the permission to
> reconfigure firewalls and it's also extremely tedious.  Reverse SSH
> tunneling is super simply; all you need to to is something like:
> 
> rshopts <- c(sprintf("-R %d:%s:%d", rscript_port, master, port), rshopts)
> 
> /Henrik
> 
> On Fri, Nov 6, 2020 at 4:37 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 06/11/2020 4:47 p.m., Balamuta, James Joseph wrote:
>>> Hi all,
>>>
>>> Henrik Bengtsson has done some fantastic work with {future} and, more importantly, greatly improved constructing and deconstructing a parallelized environment within R. It was with great joy that I saw Henrik slowly split off some functionality of {future} into {parallelly} package. Reading over the package?s README, he states:
>>>
>>>> The functions and features added to this package are written to be backward compatible with the parallel package, such that they may be incorporated there later.
>>>> The parallelly package comes with an open invitation for the R Core Team to adopt all or parts of its code into the parallel package.
>>>
>>> https://github.com/HenrikBengtsson/parallelly
>>>
>>> I?m wondering what the appropriate process would be to slowly merge some functions from {parallelly} into the base R {parallel} package. Should this be done with targeted issues on Bugzilla for different fields Henrik has identified? Or would an omnibus patch bringing in all suggested modifications be preferred? Or is it best to discuss via the list-serv appropriate contributions?
>>
>> One way is to convince R Core that incorporating this into the parallel
>> package would
>>
>>    - make less work for them, or
>>    - add a lot to R that couldn't happen if it was a contributed package.
>>
>> The fact that it's good isn't a good reason to put it into a base
>> package, which would largely mean transferring Henrik's workload to R
>> Core.  There are lots of good packages, and their maintainers should
>> continue to maintain them.
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From je|| @end|ng |rom vtke||er@@com  Tue Nov 10 01:38:51 2020
From: je|| @end|ng |rom vtke||er@@com (Jeff)
Date: Mon, 09 Nov 2020 19:38:51 -0500
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
 <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
Message-ID: <RS1KJQ.D5FP8XHL2VCZ2@vtkellers.com>

I do enjoy free lunch solutions if they exist.

That said, I think the abstraction proposed by Simon is reasonable. 
Whether it should be applied to TCP_NODELAY or TCP_QUICKACK is 
unfortunately beyond my Linux/networking knowledge.

Jeff Keller

On Wed, Nov 4, 2020 at 11:41, I?aki Ucar <iucar at fedoraproject.org> 
wrote:
> Please, check a tcpdump session on localhost while running the 
> following script:
> 
> library(parallel)
> library(tictoc)
> cl <- makeCluster(1)
> Sys.sleep(1)
> 
> for (i in 1:10) {
>   tic()
>   x <- clusterEvalQ(cl, iris)
>   toc()
> }
> 
> The initialization phase comprises 7 packets. Then, the 1-second sleep
> will help you see where the evaluation starts. Each clusterEvalQ
> generates 6 packets:
> 
> 1. main -> worker PSH, ACK 1026 bytes
> 2. worker -> main ACK 66 bytes
> 3. worker -> main PSH, ACK 3758 bytes
> 4. main -> worker ACK 66 bytes
> 5. worker -> main PSH, ACK 2484 bytes
> 6. main -> worker ACK 66 bytes
> 
> The first two are the command and its ACK, the following are the data
> back and their ACKs. In the first 4-5 iterations, I see no delay at
> all. Then, in the following iterations, a 40 ms delay starts to happen
> between packets 3 and 4, that is: the main process delays the ACK to
> the first packet of the incoming result.
> 
> So I'd say Nagle is hardly to blame for this. It would be interesting
> to see how many packets are generated with TCP_NODELAY on. If there
> are still 6 packets, then we are fine. If we suddenly see a gazillion
> packets, then TCP_NODELAY does more harm than good. On the other hand,
> TCP_QUICKACK would surely solve the issue without any drawback. As
> Nagle himself put it once, "set TCP_QUICKACK. If you find a case where
> that makes things worse, let me know."
> 
> I?aki
> 
> On Wed, 4 Nov 2020 at 04:34, Simon Urbanek 
> <simon.urbanek at r-project.org <mailto:simon.urbanek at r-project.org>> 
> wrote:
>> 
>>  I'm not sure the user would know ;). This is very system-specific 
>> issue just because the Linux network stack behaves so differently 
>> from other OSes (for purely historical reasons). That makes it hard 
>> to abstract as a "feature" for the R sockets that are supposed to be 
>> platform-independent. At least TCP_NODELAY is actually part of POSIX 
>> so it is on better footing, and disabling delayed ACK is practically 
>> only useful to work around the other side having Nagle on, so I 
>> would expect it to be rarely used.
>> 
>>  This is essentially RFC since we don't have a mechanism for socket 
>> options (well, almost, there is timeout and blocking already...) and 
>> I don't think we want to expose low-level details so perhaps one 
>> idea would be to add something like delay=NA to socketConnection() 
>> in order to not touch (NA), enable (TRUE) or disable (FALSE) 
>> TCP_NODELAY. I wonder if there is any other way we could infer the 
>> intention of the user to try to choose the right approach...
>> 
>>  Cheers,
>>  Simon
>> 
>> 
>>  > On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com 
>> <mailto:jeff at vtkellers.com>> wrote:
>>  >
>>  > Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so 
>> that they might determine what is best for their potentially 
>> latency- or throughput-sensitive application?
>>  >
>>  > Best,
>>  > Jeff
>>  >
>>  > On Mon, Nov 2, 2020 at 14:05, I?aki Ucar 
>> <iucar at fedoraproject.org <mailto:iucar at fedoraproject.org>> wrote:
>>  >> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek 
>> <simon.urbanek at r-project.org <mailto:simon.urbanek at r-project.org>> 
>> wrote:
>>  >>> It looks like R sockets on Linux could do with TCP_NODELAY -- 
>> without (status quo):
>>  >> How many network packets are generated with and without it? If 
>> there
>>  >> are many small writes and thus setting TCP_NODELAY causes many 
>> small
>>  >> packets to be sent, it might make more sense to set TCP_QUICKACK
>>  >> instead.
>>  >> I?aki
>>  >>> Unit: microseconds
>>  >>>                    expr      min       lq     mean  median      
>>  uq      max
>>  >>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 
>> 44001.91 48027.83
>>  >>>  neval
>>  >>>   1000
>>  >>> exactly the same machine + R but with TCP_NODELAY enabled in 
>> R_SockConnect():
>>  >>> Unit: microseconds
>>  >>>                    expr     min     lq     mean  median      uq 
>>      max neval
>>  >>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 
>> 5322.234  1000
>>  >>> Cheers,
>>  >>> Simon
>>  >>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com 
>> <mailto:jeff at vtkellers.com>> wrote:
>>  >>> >
>>  >>> > I'm exploring latency overhead of parallel PSOCK workers and 
>> noticed that serializing/unserializing data back to the main R 
>> session is significantly slower on Linux than it is on Windows/MacOS 
>> with similar hardware. Is there a reason for this difference and is 
>> there a way to avoid the apparent additional Linux overhead?
>>  >>> >
>>  >>> > I attempted to isolate the behavior with a test that simply 
>> returns an existing object from the worker back to the main R 
>> session.
>>  >>> >
>>  >>> > library(parallel)
>>  >>> > library(microbenchmark)
>>  >>> > gcinfo(TRUE)
>>  >>> > cl <- makeCluster(1)
>>  >>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, 
>> unit = "us"))
>>  >>> > plot(x$time, ylab = "microseconds")
>>  >>> > head(x$time, n = 10)
>>  >>> >
>>  >>> > On Windows/MacOS, the test runs in 300-500 microseconds 
>> depending on hardware. A few of the 1000 runs are an order of 
>> magnitude slower but this can probably be attributed to garbage 
>> collection on the worker.
>>  >>> >
>>  >>> > On Linux, the first 5 or so executions run at comparable 
>> speeds but all subsequent executions are two orders of magnitude 
>> slower (~40 milliseconds).
>>  >>> >
>>  >>> > I see this behavior across various platforms and hardware 
>> combinations:
>>  >>> >
>>  >>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
>>  >>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
>>  >>> > Linux Mint 20 (AMD Ryzen 7 3700X)
>>  >>> > Windows 10 (AMD Ryzen 7 4800H)
>>  >>> > MacOS 10.15.7 (Intel Core i7-8850H)
>>  >>> >
>>  >>> > ______________________________________________
>>  >>> > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing 
>> list
>>  >>> > <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>  >>> >
>>  >>> ______________________________________________
>>  >>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing 
>> list
>>  >>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>  >> --
>>  >> I?aki ?car
>>  >
>>  > ______________________________________________
>>  > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>  > <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>  >
>> 
> 
> 
> --
> I?aki ?car


	[[alternative HTML version deleted]]


From j|nghu@zh@o @end|ng |rom hotm@||@com  Tue Nov 10 11:39:28 2020
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Tue, 10 Nov 2020 10:39:28 +0000
Subject: [Rd] Help on mapping memory
Message-ID: <DB8P189MB07163CE1FEDC5888FE959606A5E90@DB8P189MB0716.EURP189.PROD.OUTLOOK.COM>

Dear everyone,

I have maintained JL Schafer's package 'pan' for a while and recently been contacted for the possibility to fix a crash but it turned to be elusive -- I am wondering what is the best to resolve this.

First, the error message is as follows,

*** caught segfault ***
address 0x1b0000001b3, cause 'memory not mapped'
Traceback:
1: pan(test$Y1, test$ID, X, 1:4, 4, prior, seed = m, iter = 100)
An irrecoverable exception occurred. R is aborting now ...

and I gather this is to do with R/fortran mismatch nevertheless the tricky thing is that it works fine with the documentation data and even with this data there were times it could be tweaked to work (therefore PAN.txt, test.rda and test.log were as intended there). I have extracted the pan.f, pan.R from the package and leave the Bash/R scripts all here, https://github.com/jinghuazhao/R/tree/master/tests, short of adding a driver program to pan.f and debug without R but before doing that any idea/insight would be greatly appreciated.

Thank you so much,


Jing Hua Zhao



	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Tue Nov 10 14:58:31 2020
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Tue, 10 Nov 2020 07:58:31 -0600
Subject: [Rd] one thing to check
In-Reply-To: <6F12BE7A-447F-48C2-BD8B-373EA350B5F1@mcgill.ca>
References: <6F12BE7A-447F-48C2-BD8B-373EA350B5F1@mcgill.ca>
Message-ID: <f90e075a-80e0-42ea-e9aa-47099512465c@effectivedefense.org>

Hi, Jim:


	  Could you please look at svd2.Rd and see what it says?  It may give 
an example, where it gave a better answer than svd -- i.e., a marginal 
case, where svd2 honestly gave a better answer than svd.


	  If we find -- either in svd2.Rd or in one of the revdepchecks -- an 
example where svd2 gives a demonstrably different answer, we need to 
consider what to do about that.


		    1.  Is the different answer demonstrably better?  If yes, can we 
fix it without LINPACK?  If yes, do that.  If no, we document those 
concerns, send them to R-Devel <r-devel at r-project.org>, and retain svd2 
in fda and keep its use as it was.  Then R-Devel can deal with the 
problem however they want, and it won't affect fda -- at least not right 
now.


		    2.  Does the different answer break something in revdepcheck 
because of a cosmetic problem?  If yes, try to communicate that issue 
with the maintainer(s) of the package(s) that would be affected by such 
a change.  I suggest you send them tell then that svd2 is now deprecated 
-- AND mark svd2.Rd with such a message -- while also sending them code 
for the function(s) they call that give them an error message, and tell 
them that you plan to remove svd2 from the next release, and ask them to 
fix that so a revdepcheck with that new code won't be flagged as an 
error.  AND ask them to notify you when they have a version on CRAN that 
works with your new code.


		    3.  If the new code gives a different answer that doesn't seem 
better in at least one example AND deleting svd2 doesn't break anything 
in revdepcheck, then delete it.


		    4.  If you still need to retain svd2 because of a revdepcheck 
problem, I'd also document that in "cran-comments.md".


	  What do you think?
	  spencer


On 2020-11-10 07:10, James Ramsay wrote:
> Hi Spencer,
> 
> One thing I?d like check with you:
> 
> I removed svd2 because CRAN indicated that LINPACK had been deprecated.  I replaced calls to svd2 with svd in geigen and CSTRfn.
> 
> This could be the issue with the two broken codes ? or not.  But what is your view about using svd instead of svd2, and do you have an idea of what to do about the LINPACK calls?
> 
> Best,
> 
> Jim
>


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Tue Nov 10 15:36:43 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Tue, 10 Nov 2020 08:36:43 -0600
Subject: [Rd] one thing to check
In-Reply-To: <f90e075a-80e0-42ea-e9aa-47099512465c@effectivedefense.org>
References: <6F12BE7A-447F-48C2-BD8B-373EA350B5F1@mcgill.ca>
 <f90e075a-80e0-42ea-e9aa-47099512465c@effectivedefense.org>
Message-ID: <198cd211-5a6b-c920-a0c6-fd32fcba5798@prodsyse.com>

	  Please excuse:  I did NOT intend to send this to R-Devel at this 
time.  I was suggesting to Jim Ramsay a question we MIGHT want to pose 
to R-Devel.  (I've since decided we probably won't need to.)


	  Spencer


On 2020-11-10 07:58, Spencer Graves wrote:
> Hi, Jim:
> 
> 
>  ????? Could you please look at svd2.Rd and see what it says?? It may 
> give an example, where it gave a better answer than svd -- i.e., a 
> marginal case, where svd2 honestly gave a better answer than svd.
> 
> 
>  ????? If we find -- either in svd2.Rd or in one of the revdepchecks -- 
> an example where svd2 gives a demonstrably different answer, we need to 
> consider what to do about that.
> 
> 
>  ??????????? 1.? Is the different answer demonstrably better?? If yes, 
> can we fix it without LINPACK?? If yes, do that.? If no, we document 
> those concerns, send them to R-Devel <r-devel at r-project.org>, and retain 
> svd2 in fda and keep its use as it was.? Then R-Devel can deal with the 
> problem however they want, and it won't affect fda -- at least not right 
> now.
> 
> 
>  ??????????? 2.? Does the different answer break something in 
> revdepcheck because of a cosmetic problem?? If yes, try to communicate 
> that issue with the maintainer(s) of the package(s) that would be 
> affected by such a change.? I suggest you send them tell then that svd2 
> is now deprecated -- AND mark svd2.Rd with such a message -- while also 
> sending them code for the function(s) they call that give them an error 
> message, and tell them that you plan to remove svd2 from the next 
> release, and ask them to fix that so a revdepcheck with that new code 
> won't be flagged as an error.? AND ask them to notify you when they have 
> a version on CRAN that works with your new code.
> 
> 
>  ??????????? 3.? If the new code gives a different answer that doesn't 
> seem better in at least one example AND deleting svd2 doesn't break 
> anything in revdepcheck, then delete it.
> 
> 
>  ??????????? 4.? If you still need to retain svd2 because of a 
> revdepcheck problem, I'd also document that in "cran-comments.md".
> 
> 
>  ????? What do you think?
>  ????? spencer
> 
> 
> On 2020-11-10 07:10, James Ramsay wrote:
>> Hi Spencer,
>>
>> One thing I?d like check with you:
>>
>> I removed svd2 because CRAN indicated that LINPACK had been 
>> deprecated.? I replaced calls to svd2 with svd in geigen and CSTRfn.
>>
>> This could be the issue with the two broken codes ? or not.? But what 
>> is your view about using svd instead of svd2, and do you have an idea 
>> of what to do about the LINPACK calls?
>>
>> Best,
>>
>> Jim
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Nov 11 11:02:47 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 11 Nov 2020 11:02:47 +0100
Subject: [Rd] 
 Process to Incorporate Functions from {parallely} into base
 R's {parallel} package
In-Reply-To: <5ce800c3-34a3-3dd8-ce4f-8afb6638fb7a@gmail.com>
References: <F71707B2-61E9-4757-8B53-9F73886BE01D@illinois.edu>
 <aa91f7bc-37be-73b8-cb99-f9e0223225f5@gmail.com>
 <CAFDcVCQ7Q1Wu7a7k2Rx41vMGqGJLhm_=OE6Sq35yZxmmBH6P-g@mail.gmail.com>
 <5ce800c3-34a3-3dd8-ce4f-8afb6638fb7a@gmail.com>
Message-ID: <24491.46791.296870.193670@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Sat, 7 Nov 2020 15:44:32 -0500 writes:

    > If these are easy changes, maybe someone will incorporate
    > them.  You'll make the argument stronger for doing that if
    > you can explain why it's better to do that than to keep
    > them in parallely.

    > Duncan Murdoch

Thank you, Duncan, Henrik, and James Joseph.

>From reading, I agree that this is something worth updating in
R's own `parallel` (and I have tried and checked it does not
break our own  'make check-all').

Henrik (or anyone): Is there a small repr.ex. I could add to
parallel/tests/*.R which will show the advantage of allowing an
empty 'user'  here?

Martin Maechler


    > On 07/11/2020 1:39 p.m., Henrik Bengtsson wrote:
    >> FWIW, there are indeed a few low hanging bug fixes in
    >> 'parallelly' that should be easy to incorporate into
    >> 'parallel' without adding extra maintenance.  For
    >> example, in parallel::makePSOCKcluster(), it is not
    >> possible to disable SSH option '-l USER' so that it can
    >> be set in ~/.ssh/config.  The remote user name will be
    >> the user name of your local machine and if you try to set
    >> user=NULL, you'll end up with an invalid SSH call.  The
    >> current behavior means that you are forced to specify the
    >> remote user name in your R code.  All that it takes is to
    >> fix this is to update:
    >> 
    >> cmd <- paste(rshcmd, "-l", user, machine, cmd)
    >> 
    >> to something like:
    >> 
    >> cmd <- paste(rshcmd, if (length(user) == 1L) paste("-l",
    >> user), machine, cmd)
    >> 
    >> This is one example of what I've patched in
    >> parallelly::makeClusterPSOCK() over the years.  Another
    >> is the use of reverse tunneling in SSH - that completely
    >> avoids the need to know and specify your public IP and
    >> reconfiguring the firewalls from the remote server back
    >> to your local machine so that the worker can connect back
    >> to your local machine.  Not many users have the
    >> permission to reconfigure firewalls and it's also
    >> extremely tedious.  Reverse SSH tunneling is super
    >> simply; all you need to to is something like:
    >> 
    >> rshopts <- c(sprintf("-R %d:%s:%d", rscript_port, master,
    >> port), rshopts)
    >> 
    >> /Henrik
    >> 
    >> On Fri, Nov 6, 2020 at 4:37 PM Duncan Murdoch
    >> <murdoch.duncan at gmail.com> wrote:
    >>> 
    >>> On 06/11/2020 4:47 p.m., Balamuta, James Joseph wrote:
    >>>> Hi all,
    >>>> 
    >>>> Henrik Bengtsson has done some fantastic work with
    >>>> {future} and, more importantly, greatly improved
    >>>> constructing and deconstructing a parallelized
    >>>> environment within R. It was with great joy that I saw
    >>>> Henrik slowly split off some functionality of {future}
    >>>> into {parallelly} package. Reading over the package?s
    >>>> README, he states:
    >>>> 
    >>>>> The functions and features added to this package are
    >>>>> written to be backward compatible with the parallel
    >>>>> package, such that they may be incorporated there
    >>>>> later.  The parallelly package comes with an open
    >>>>> invitation for the R Core Team to adopt all or parts
    >>>>> of its code into the parallel package.
    >>>> 
    >>>> https://github.com/HenrikBengtsson/parallelly
    >>>> 
    >>>> I?m wondering what the appropriate process would be to
    >>>> slowly merge some functions from {parallelly} into the
    >>>> base R {parallel} package. Should this be done with
    >>>> targeted issues on Bugzilla for different fields Henrik
    >>>> has identified? Or would an omnibus patch bringing in
    >>>> all suggested modifications be preferred? Or is it best
    >>>> to discuss via the list-serv appropriate contributions?
    >>> 
    >>> One way is to convince R Core that incorporating this
    >>> into the parallel package would
    >>> 
    >>> - make less work for them, or - add a lot to R that
    >>> couldn't happen if it was a contributed package.
    >>> 
    >>> The fact that it's good isn't a good reason to put it
    >>> into a base package, which would largely mean
    >>> transferring Henrik's workload to R Core.  There are
    >>> lots of good packages, and their maintainers should
    >>> continue to maintain them.
    >>> 
    >>> Duncan Murdoch
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Nov 12 22:17:02 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 12 Nov 2020 16:17:02 -0500
Subject: [Rd] Bug in R-devel R CMD check --as-cran (was: [R-pkg-devel]
 Strange error from CRAN on package submission)
In-Reply-To: <4e8f1ec8-d3a6-abb2-f81c-d33f8a708738@gmail.com>
References: <4e8f1ec8-d3a6-abb2-f81c-d33f8a708738@gmail.com>
Message-ID: <c403a9e8-3408-083a-2898-eb110300fd55@gmail.com>

I believe the message below on the R-package-devel list is due to a bug 
in R-devel.  The bug doesn't seem to be present in R 4.0.3.

Here's the issue:

The Mercator package Depends on Thresher, which Imports movMF, which 
Suggests flexmix.  In the .onLoad code for movMF, it checks whether 
flexmix is available, and if so, loads it.

Since flexmix sets a method on plot(), its namespace is referred to from 
the plot() method table.

During R CMD check --as-cran Mercator.0.11.4, in the step

* checking whether package ?Mercator? can be installed ...

R prints this warning:

    Warning: namespace 'flexmix'  is not available and has been replaced
    by .GlobalEnv when processing  object '<unknown>'

I believe this message happens when R CMD check is seeing whether the 
package can be installed without undeclared recommended packages.  When 
it tries to load the flexmix namespace in the movMF .onLoad() function, 
it fails, because it can't see "nnet".  Normally it doesn't worry if a 
dependency is declared, but it misses the flexmix declaration of a 
dependency on nnet, presumably because flexmix got loaded in an unusual way.

This is fairly old code, so I'm not sure what change triggered the 
error.  I suppose I could bisect commits to find it, but not today.

Duncan Murdoch


On 11/11/2020 8:44 a.m., Kevin R. Coombes wrote:
> Hi,
> 
> I am trying to figure out how to fix warnings from two of the CRAN
> machines on the submission of an update to a package. The only change to
> my package was to add a "show" method to one of the S4 classes, which
> was requested by a reviewer of the paper we submitted. The inability to
> get this updated package into CRAN? is the only thing holding up the
> revision (and probable acceptance) of the manuscript.
> 
> The same "warnings"s were found in the previous version. The package is
> called Mercator, and the CRAN check results from the? last version are here:
>   ? https://cran.r-project.org/web/checks/check_results_Mercator.html
> 
> I get warnings from the two fedora machine instances (clang and gcc).
> They both report
> 
>> Check: whether package can be  installed.
>> Result: WARN
>>  ? ?? Found the following significant  warnings:
>>  ? ?? Warning: namespace ?flexmix? is  not available and has been replaced
>   >
>   > Check: data for non-ASCII characters
>> Result: WARN
>>  ? ??? Warning: namespace 'flexmix'  is not available and has been replaced
>>  ? ??? by .GlobalEnv when processing  object '<unknown>'
> 
> The relationships in the DESCRIPTION files are:
> 
> 1. Mercator depends on Thresher
> 2. Thresher imports moVMF
> 3. moMVF suggests flexmix
> 
> On my Windows machine, the package builds and installs with no errors or
> warnings even if flexmix is not available (which I believe to be the
> correct behavior). On R-Forge, both the Windows and LINUX versions build
> and install with no errors or warnings. On R-Hub, tested on multiple
> LINUX versions, the package builds and installs with no errors or warnings.
> 
> And flexmix is still clearly available from CRAN:
>   ? https://cran.r-project.org/web/packages/flexmix/index.html
> 
> In the latest attempt to get things to work, I added
>   ? Suggests: flexmix
> into the DESCRIPTION file for Mercator, but this didn't help fix the
> problem on CRAN.
> 
> Is there anything I can do to fix this problem (other than moan here on
> this list and hope that CRAN can just install flexmix on those machines)?
> 
> Thanks in advance for your help,
>   ? Kevin
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From @nto|ne@|@br| @end|ng |rom gm@||@com  Fri Nov 13 15:15:37 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Fri, 13 Nov 2020 15:15:37 +0100
Subject: [Rd] exists, get and get0 accept silently inputs of length > 1
Message-ID: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>

Dear R-devel,

The doc of exists, get and get0 is unambiguous, x should be an object given
as a character string. However these accept longer inputs. It can lead an
uncareful user to think these functions are vectorized when they're not,
and generally lets through bugs that one might have preferred to trigger
earlier failure.

``` r
exists("d")
#> [1] FALSE
exists(c("c", "d"))
#> [1] TRUE
get(c("c", "d"))
#> function (...)  .Primitive("c")
get0(c("c", "d"))
#> function (...)  .Primitive("c")
```

I believe these should either fail, or be vectorized, probably the former.

Thanks,

Antoine

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Nov 13 15:33:49 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 13 Nov 2020 08:33:49 -0600 (CST)
Subject: [Rd] [External]  exists,
 get and get0 accept silently inputs of length > 1
In-Reply-To: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
References: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2011130830520.3311@luke-Latitude-7480>

Worth looking into. It would probably cause some check failures, so
would probably be a good idea to run a check across BIOC/CRAN.  At the
same time it would be worth allowing name objects (type "symbol") so
thee don't have to be converted to character for the call and then
back to names internally for the environment lookup.

Best,

luke

On Fri, 13 Nov 2020, Antoine Fabri wrote:

> Dear R-devel,
>
> The doc of exists, get and get0 is unambiguous, x should be an object given
> as a character string. However these accept longer inputs. It can lead an
> uncareful user to think these functions are vectorized when they're not,
> and generally lets through bugs that one might have preferred to trigger
> earlier failure.
>
> ``` r
> exists("d")
> #> [1] FALSE
> exists(c("c", "d"))
> #> [1] TRUE
> get(c("c", "d"))
> #> function (...)  .Primitive("c")
> get0(c("c", "d"))
> #> function (...)  .Primitive("c")
> ```
>
> I believe these should either fail, or be vectorized, probably the former.
>
> Thanks,
>
> Antoine
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Tue Nov 17 02:30:32 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Tue, 17 Nov 2020 12:30:32 +1100
Subject: [Rd] [External] exists,
 get and get0 accept silently inputs of length > 1
In-Reply-To: <alpine.DEB.2.21.2011130830520.3311@luke-Latitude-7480>
References: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
 <alpine.DEB.2.21.2011130830520.3311@luke-Latitude-7480>
Message-ID: <CAJmOi+Ngoo5YtKo0oNZFrVs_5Hze0Knea5bi320-3wkC_NF-Ag@mail.gmail.com>

I noticed the recent commit to R-dev (r79434).  Is this wise? I've
often used get() in constructions like

for (j in ls()) if (is.numeric(x <- get(j))) ...

(and often interactively, rather than in a package)

Am I to understand that get(j) will now be equivalent to `j` even if j
is a string referring putatively to another object?

On Sat, 14 Nov 2020 at 01:34, <luke-tierney at uiowa.edu> wrote:
>
> Worth looking into. It would probably cause some check failures, so
> would probably be a good idea to run a check across BIOC/CRAN.  At the
> same time it would be worth allowing name objects (type "symbol") so
> thee don't have to be converted to character for the call and then
> back to names internally for the environment lookup.
>
> Best,
>
> luke
>
> On Fri, 13 Nov 2020, Antoine Fabri wrote:
>
> > Dear R-devel,
> >
> > The doc of exists, get and get0 is unambiguous, x should be an object given
> > as a character string. However these accept longer inputs. It can lead an
> > uncareful user to think these functions are vectorized when they're not,
> > and generally lets through bugs that one might have preferred to trigger
> > earlier failure.
> >
> > ``` r
> > exists("d")
> > #> [1] FALSE
> > exists(c("c", "d"))
> > #> [1] TRUE
> > get(c("c", "d"))
> > #> function (...)  .Primitive("c")
> > get0(c("c", "d"))
> > #> function (...)  .Primitive("c")
> > ```
> >
> > I believe these should either fail, or be vectorized, probably the former.
> >
> > Thanks,
> >
> > Antoine
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Tue Nov 17 05:05:49 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 16 Nov 2020 20:05:49 -0800
Subject: [Rd] [External] exists,
 get and get0 accept silently inputs of length > 1
In-Reply-To: <CAJmOi+Ngoo5YtKo0oNZFrVs_5Hze0Knea5bi320-3wkC_NF-Ag@mail.gmail.com>
References: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
 <alpine.DEB.2.21.2011130830520.3311@luke-Latitude-7480>
 <CAJmOi+Ngoo5YtKo0oNZFrVs_5Hze0Knea5bi320-3wkC_NF-Ag@mail.gmail.com>
Message-ID: <CAD4oTHFHSQGymBxoCPw=tw-QA-xJe+=w+H4pxjP+bjC9BuhNdQ@mail.gmail.com>

Hi all,

I have used variable values in get() as well, and including, I think, in
package code (though pretty infrequently).

Perhaps a character.only argument similar to library?

~G

On Mon, Nov 16, 2020 at 5:31 PM Hugh Parsonage <hugh.parsonage at gmail.com>
wrote:

> I noticed the recent commit to R-dev (r79434).  Is this wise? I've
> often used get() in constructions like
>
> for (j in ls()) if (is.numeric(x <- get(j))) ...
>
> (and often interactively, rather than in a package)
>
> Am I to understand that get(j) will now be equivalent to `j` even if j
> is a string referring putatively to another object?
>
> On Sat, 14 Nov 2020 at 01:34, <luke-tierney at uiowa.edu> wrote:
> >
> > Worth looking into. It would probably cause some check failures, so
> > would probably be a good idea to run a check across BIOC/CRAN.  At the
> > same time it would be worth allowing name objects (type "symbol") so
> > thee don't have to be converted to character for the call and then
> > back to names internally for the environment lookup.
> >
> > Best,
> >
> > luke
> >
> > On Fri, 13 Nov 2020, Antoine Fabri wrote:
> >
> > > Dear R-devel,
> > >
> > > The doc of exists, get and get0 is unambiguous, x should be an object
> given
> > > as a character string. However these accept longer inputs. It can lead
> an
> > > uncareful user to think these functions are vectorized when they're
> not,
> > > and generally lets through bugs that one might have preferred to
> trigger
> > > earlier failure.
> > >
> > > ``` r
> > > exists("d")
> > > #> [1] FALSE
> > > exists(c("c", "d"))
> > > #> [1] TRUE
> > > get(c("c", "d"))
> > > #> function (...)  .Primitive("c")
> > > get0(c("c", "d"))
> > > #> function (...)  .Primitive("c")
> > > ```
> > >
> > > I believe these should either fail, or be vectorized, probably the
> former.
> > >
> > > Thanks,
> > >
> > > Antoine
> > >
> > >       [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >     Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Nov 17 05:39:18 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Mon, 16 Nov 2020 22:39:18 -0600 (CST)
Subject: [Rd] [External] exists,
 get and get0 accept silently inputs of length > 1
In-Reply-To: <CAD4oTHFHSQGymBxoCPw=tw-QA-xJe+=w+H4pxjP+bjC9BuhNdQ@mail.gmail.com>
References: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
 <alpine.DEB.2.21.2011130830520.3311@luke-Latitude-7480>
 <CAJmOi+Ngoo5YtKo0oNZFrVs_5Hze0Knea5bi320-3wkC_NF-Ag@mail.gmail.com>
 <CAD4oTHFHSQGymBxoCPw=tw-QA-xJe+=w+H4pxjP+bjC9BuhNdQ@mail.gmail.com>
Message-ID: <alpine.OSX.2.23.453.2011162227450.1695@macbook-air-5.local>

Come on, folks. There is no NSE involved in calls to get(): it's
standard evaluation all the way into the C code. Prior to the change a
first argument that is anything other than a character vector would
produce an error. After the change, passing in a symbol will do the
obvious thing. Code that worked previously without error (i.e. called
get() with string values) will continue to work exactly as it did
before.

It's a little more convenient and a little more efficient for some
computations on the language not to have to call as.character on
symbols before passing them to get(). Hence the change expanding the
domain of get().

luke

On Tue, 17 Nov 2020, Gabriel Becker wrote:

> Hi all,
> I have used variable values in get() as well, and including, I think, in
> package code (though pretty infrequently).
> Perhaps a character.only argument similar to library?
> 
> ~G
> 
> On Mon, Nov 16, 2020 at 5:31 PM Hugh Parsonage <hugh.parsonage at gmail.com>
> wrote:
>       I noticed the recent commit to R-dev (r79434).? Is this wise?
>       I've
>       often used get() in constructions like
>
>       for (j in ls()) if (is.numeric(x <- get(j))) ...
>
>       (and often interactively, rather than in a package)
>
>       Am I to understand that get(j) will now be equivalent to `j`
>       even if j
>       is a string referring putatively to another object?
>
>       On Sat, 14 Nov 2020 at 01:34, <luke-tierney at uiowa.edu> wrote:
>       >
>       > Worth looking into. It would probably cause some check
>       failures, so
>       > would probably be a good idea to run a check across
>       BIOC/CRAN.? At the
>       > same time it would be worth allowing name objects (type
>       "symbol") so
>       > thee don't have to be converted to character for the call and
>       then
>       > back to names internally for the environment lookup.
>       >
>       > Best,
>       >
>       > luke
>       >
>       > On Fri, 13 Nov 2020, Antoine Fabri wrote:
>       >
>       > > Dear R-devel,
>       > >
>       > > The doc of exists, get and get0 is unambiguous, x should be
>       an object given
>       > > as a character string. However these accept longer inputs.
>       It can lead an
>       > > uncareful user to think these functions are vectorized when
>       they're not,
>       > > and generally lets through bugs that one might have
>       preferred to trigger
>       > > earlier failure.
>       > >
>       > > ``` r
>       > > exists("d")
>       > > #> [1] FALSE
>       > > exists(c("c", "d"))
>       > > #> [1] TRUE
>       > > get(c("c", "d"))
>       > > #> function (...)? .Primitive("c")
>       > > get0(c("c", "d"))
>       > > #> function (...)? .Primitive("c")
>       > > ```
>       > >
>       > > I believe these should either fail, or be vectorized,
>       probably the former.
>       > >
>       > > Thanks,
>       > >
>       > > Antoine
>       > >
>       > >? ? ? ?[[alternative HTML version deleted]]
>       > >
>       > > ______________________________________________
>       > > R-devel at r-project.org mailing list
>       > > https://stat.ethz.ch/mailman/listinfo/r-devel
>       > >
>       >
>       > --
>       > Luke Tierney
>       > Ralph E. Wareham Professor of Mathematical Sciences
>       > University of Iowa? ? ? ? ? ? ? ? ? Phone:
>       ?319-335-3386
>       > Department of Statistics and? ? ? ? Fax:
>       ?319-335-3017
>       >? ? ?Actuarial Science
>       > 241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:
>       ?luke-tierney at uiowa.edu
>       > Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:
>       http://www.stat.uiowa.edu
>       >
>       > ______________________________________________
>       > R-devel at r-project.org mailing list
>       > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>       ______________________________________________
>       R-devel at r-project.org mailing list
>       https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From g@bembecker @end|ng |rom gm@||@com  Tue Nov 17 06:12:26 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 16 Nov 2020 21:12:26 -0800
Subject: [Rd] [External] exists,
 get and get0 accept silently inputs of length > 1
In-Reply-To: <alpine.OSX.2.23.453.2011162227450.1695@macbook-air-5.local>
References: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
 <alpine.DEB.2.21.2011130830520.3311@luke-Latitude-7480>
 <CAJmOi+Ngoo5YtKo0oNZFrVs_5Hze0Knea5bi320-3wkC_NF-Ag@mail.gmail.com>
 <CAD4oTHFHSQGymBxoCPw=tw-QA-xJe+=w+H4pxjP+bjC9BuhNdQ@mail.gmail.com>
 <alpine.OSX.2.23.453.2011162227450.1695@macbook-air-5.local>
Message-ID: <CAD4oTHH6jb3HOh1A1VtqQvFGs-yp2pif=AXO=EqLgq1kEAeYbQ@mail.gmail.com>

Hi Luke et al.,

Apologies. I knew there was no NSE before but incorrectly inferred from the
previous message that some had been added. Should have looked at the commit
myself before chiming in. Sorry for the noise.

~G

On Mon, Nov 16, 2020 at 8:39 PM <luke-tierney at uiowa.edu> wrote:

> Come on, folks. There is no NSE involved in calls to get(): it's
> standard evaluation all the way into the C code. Prior to the change a
> first argument that is anything other than a character vector would
> produce an error. After the change, passing in a symbol will do the
> obvious thing. Code that worked previously without error (i.e. called
> get() with string values) will continue to work exactly as it did
> before.
>
> It's a little more convenient and a little more efficient for some
> computations on the language not to have to call as.character on
> symbols before passing them to get(). Hence the change expanding the
> domain of get().
>
> luke
>
> On Tue, 17 Nov 2020, Gabriel Becker wrote:
>
> > Hi all,
> > I have used variable values in get() as well, and including, I think, in
> > package code (though pretty infrequently).
> > Perhaps a character.only argument similar to library?
> >
> > ~G
> >
> > On Mon, Nov 16, 2020 at 5:31 PM Hugh Parsonage <hugh.parsonage at gmail.com
> >
> > wrote:
> >       I noticed the recent commit to R-dev (r79434).  Is this wise?
> >       I've
> >       often used get() in constructions like
> >
> >       for (j in ls()) if (is.numeric(x <- get(j))) ...
> >
> >       (and often interactively, rather than in a package)
> >
> >       Am I to understand that get(j) will now be equivalent to `j`
> >       even if j
> >       is a string referring putatively to another object?
> >
> >       On Sat, 14 Nov 2020 at 01:34, <luke-tierney at uiowa.edu> wrote:
> >       >
> >       > Worth looking into. It would probably cause some check
> >       failures, so
> >       > would probably be a good idea to run a check across
> >       BIOC/CRAN.  At the
> >       > same time it would be worth allowing name objects (type
> >       "symbol") so
> >       > thee don't have to be converted to character for the call and
> >       then
> >       > back to names internally for the environment lookup.
> >       >
> >       > Best,
> >       >
> >       > luke
> >       >
> >       > On Fri, 13 Nov 2020, Antoine Fabri wrote:
> >       >
> >       > > Dear R-devel,
> >       > >
> >       > > The doc of exists, get and get0 is unambiguous, x should be
> >       an object given
> >       > > as a character string. However these accept longer inputs.
> >       It can lead an
> >       > > uncareful user to think these functions are vectorized when
> >       they're not,
> >       > > and generally lets through bugs that one might have
> >       preferred to trigger
> >       > > earlier failure.
> >       > >
> >       > > ``` r
> >       > > exists("d")
> >       > > #> [1] FALSE
> >       > > exists(c("c", "d"))
> >       > > #> [1] TRUE
> >       > > get(c("c", "d"))
> >       > > #> function (...)  .Primitive("c")
> >       > > get0(c("c", "d"))
> >       > > #> function (...)  .Primitive("c")
> >       > > ```
> >       > >
> >       > > I believe these should either fail, or be vectorized,
> >       probably the former.
> >       > >
> >       > > Thanks,
> >       > >
> >       > > Antoine
> >       > >
> >       > >       [[alternative HTML version deleted]]
> >       > >
> >       > > ______________________________________________
> >       > > R-devel at r-project.org mailing list
> >       > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >       > >
> >       >
> >       > --
> >       > Luke Tierney
> >       > Ralph E. Wareham Professor of Mathematical Sciences
> >       > University of Iowa                  Phone:
> >        319-335-3386
> >       > Department of Statistics and        Fax:
> >        319-335-3017
> >       >     Actuarial Science
> >       > 241 Schaeffer Hall                  email:
> >        luke-tierney at uiowa.edu
> >       > Iowa City, IA 52242                 WWW:
> >       http://www.stat.uiowa.edu
> >       >
> >       > ______________________________________________
> >       > R-devel at r-project.org mailing list
> >       > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >       ______________________________________________
> >       R-devel at r-project.org mailing list
> >       https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Tue Nov 17 21:34:59 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Tue, 17 Nov 2020 12:34:59 -0800
Subject: [Rd] formatting issue with gcc 9.3.0 on Ubuntu on WSL2
Message-ID: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>

I just got a new Windows laptop (i7, 10th generation CPU), installed
'Windows Subsystem for Linux 2' and then installed Ubuntu 20.04 and
used 'apt-get install' to install packages that the R build seems
to require.  In particular, I am using gcc version 9.3.0.   The
build went without a hitch but the tests showed that deparse(1e-16)
produced "1.00000000000000e-16" instead of the expected "1e-16".

It looks like the problem is in src/main/format.c:scientific().  The
lowest two+ bytes in the fractional part of the long double (80-bit)
return value of powl(10.0L, -30L), seem to be corrupted.  I made a
standalong program to test powl and saw no problem - it gives the
same results for the fractional part as bc does.

        bc: A2425FF7 5E14FC31 A125...
standalone: 22425FF7 5E14FC32
         R: 22425FF7 5E151800

There are lots of other small numbers with the same problem:


                             > grep(value=TRUE, "0e",
vapply((1+(0:10000)/1000)*1e-15, deparse, ""))
[1] "8.56000000000000e-15" "8.71700000000000e-15" "8.77800000000000e-15"
[4] "8.93500000000000e-15" "9.50800000000000e-15" "9.83800000000000e-15"
[7] "9.89900000000000e-15" "9.93400000000000e-15" "9.99500000000000e-15"
> str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse, "")))
 chr [1:295] "8.00200000000000e-14" "8.00500000000000e-14" ...

Has anyone else seen this?  I am wondering if this is an oddity in WSL2

                             or Ubuntu's gcc-9.3.0.




           -Bill

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Tue Nov 17 22:32:02 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 17 Nov 2020 15:32:02 -0600
Subject: [Rd] formatting issue with gcc 9.3.0 on Ubuntu on WSL2
In-Reply-To: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
References: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
Message-ID: <24500.16722.405544.8638@rob.eddelbuettel.com>


On 17 November 2020 at 12:34, Bill Dunlap wrote:
| I just got a new Windows laptop (i7, 10th generation CPU), installed
| 'Windows Subsystem for Linux 2' and then installed Ubuntu 20.04 and
| used 'apt-get install' to install packages that the R build seems
| to require.  In particular, I am using gcc version 9.3.0.   The
| build went without a hitch but the tests showed that deparse(1e-16)
| produced "1.00000000000000e-16" instead of the expected "1e-16".
| 
| It looks like the problem is in src/main/format.c:scientific().  The
| lowest two+ bytes in the fractional part of the long double (80-bit)
| return value of powl(10.0L, -30L), seem to be corrupted.  I made a
| standalong program to test powl and saw no problem - it gives the
| same results for the fractional part as bc does.
| 
|         bc: A2425FF7 5E14FC31 A125...
| standalone: 22425FF7 5E14FC32
|          R: 22425FF7 5E151800
| 
| There are lots of other small numbers with the same problem:
| 
| 
|                              > grep(value=TRUE, "0e",
| vapply((1+(0:10000)/1000)*1e-15, deparse, ""))
| [1] "8.56000000000000e-15" "8.71700000000000e-15" "8.77800000000000e-15"
| [4] "8.93500000000000e-15" "9.50800000000000e-15" "9.83800000000000e-15"
| [7] "9.89900000000000e-15" "9.93400000000000e-15" "9.99500000000000e-15"
| > str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse, "")))
|  chr [1:295] "8.00200000000000e-14" "8.00500000000000e-14" ...
| 
| Has anyone else seen this?  I am wondering if this is an oddity in WSL2
| 
|                              or Ubuntu's gcc-9.3.0.

Plain Ubuntu 20.04.1 here, current. No issue:

  > str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse, "")))
   chr(0) 
  > 

I made sure to start R as `R --vanilla` to not have anything in my dotfiles
affect printing.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Nov 18 10:25:27 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 18 Nov 2020 10:25:27 +0100
Subject: [Rd] formatting issue with gcc 9.3.0 on Ubuntu on WSL2
In-Reply-To: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
References: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
Message-ID: <7b6f6ba5-3c73-c0c4-4edc-db1943acf471@gmail.com>

On 11/17/20 9:34 PM, Bill Dunlap wrote:
> I just got a new Windows laptop (i7, 10th generation CPU), installed
> 'Windows Subsystem for Linux 2' and then installed Ubuntu 20.04 and
> used 'apt-get install' to install packages that the R build seems
> to require.  In particular, I am using gcc version 9.3.0.   The
> build went without a hitch but the tests showed that deparse(1e-16)
> produced "1.00000000000000e-16" instead of the expected "1e-16".
>
> It looks like the problem is in src/main/format.c:scientific().  The
> lowest two+ bytes in the fractional part of the long double (80-bit)
> return value of powl(10.0L, -30L), seem to be corrupted.  I made a
> standalong program to test powl and saw no problem - it gives the
> same results for the fractional part as bc does.
>
>          bc: A2425FF7 5E14FC31 A125...
> standalone: 22425FF7 5E14FC32
>           R: 22425FF7 5E151800
>
> There are lots of other small numbers with the same problem:
>
>
>                               > grep(value=TRUE, "0e",
> vapply((1+(0:10000)/1000)*1e-15, deparse, ""))
> [1] "8.56000000000000e-15" "8.71700000000000e-15" "8.77800000000000e-15"
> [4] "8.93500000000000e-15" "9.50800000000000e-15" "9.83800000000000e-15"
> [7] "9.89900000000000e-15" "9.93400000000000e-15" "9.99500000000000e-15"
>> str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse, "")))
>   chr [1:295] "8.00200000000000e-14" "8.00500000000000e-14" ...
>
> Has anyone else seen this?  I am wondering if this is an oddity in WSL2
>
>                               or Ubuntu's gcc-9.3.0.

Almost surely it is Windows/WSL related, I'm not seeing this on Ubuntu 
20.04.

One thing to check might be the FPU control word. In a Windows build, R 
will set as it is on Unix, to use all 80 bits when values stay in FPU 
registers, which is not the Windows default. This should not matter with 
SSE anymore, but maybe something is still using the FPU. This is just 
using inline assembly, so one could enable it as experiment. In 
principle, this could be also due to some other things specific to 
Windows that R works around in Windows builds, but doesn't in Linux 
builds assuming they will not run on Windows.

Other issues I had with WSL in the past (trying to build R and run 
checks) included time-zones and surprising encodings, but I didn't check 
recently. I would not use R on WSL unless my goal was to diagnose these 
issues and see if they could be overcome on the R side.

Best
Tomas

>
>
>
>
>             -Bill
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uc@r @end|ng |rom |edor@project@org  Wed Nov 18 12:56:33 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 18 Nov 2020 12:56:33 +0100
Subject: [Rd] formatting issue with gcc 9.3.0 on Ubuntu on WSL2
In-Reply-To: <7b6f6ba5-3c73-c0c4-4edc-db1943acf471@gmail.com>
References: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
 <7b6f6ba5-3c73-c0c4-4edc-db1943acf471@gmail.com>
Message-ID: <CALEXWq2CJ289BvK_iuj-FEM7Tmm3c2=U7KYvZ0oTtHAuy0c14w@mail.gmail.com>

On Wed, 18 Nov 2020 at 10:26, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 11/17/20 9:34 PM, Bill Dunlap wrote:
> > I just got a new Windows laptop (i7, 10th generation CPU), installed
> > 'Windows Subsystem for Linux 2' and then installed Ubuntu 20.04 and
> > used 'apt-get install' to install packages that the R build seems
> > to require.  In particular, I am using gcc version 9.3.0.   The
> > build went without a hitch but the tests showed that deparse(1e-16)
> > produced "1.00000000000000e-16" instead of the expected "1e-16".
> >
> > It looks like the problem is in src/main/format.c:scientific().  The
> > lowest two+ bytes in the fractional part of the long double (80-bit)
> > return value of powl(10.0L, -30L), seem to be corrupted.  I made a
> > standalong program to test powl and saw no problem - it gives the
> > same results for the fractional part as bc does.
> >
> >          bc: A2425FF7 5E14FC31 A125...
> > standalone: 22425FF7 5E14FC32
> >           R: 22425FF7 5E151800
> >
> > There are lots of other small numbers with the same problem:
> >
> >
> >                               > grep(value=TRUE, "0e",
> > vapply((1+(0:10000)/1000)*1e-15, deparse, ""))
> > [1] "8.56000000000000e-15" "8.71700000000000e-15" "8.77800000000000e-15"
> > [4] "8.93500000000000e-15" "9.50800000000000e-15" "9.83800000000000e-15"
> > [7] "9.89900000000000e-15" "9.93400000000000e-15" "9.99500000000000e-15"
> >> str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse, "")))
> >   chr [1:295] "8.00200000000000e-14" "8.00500000000000e-14" ...
> >
> > Has anyone else seen this?  I am wondering if this is an oddity in WSL2
> >
> >                               or Ubuntu's gcc-9.3.0.

I cannot reproduce this issue (version 20H2, build 19042.630; Ubuntu
20.04 installed from the store). Are you sure you are running on WSL2?
(You can check this with `wsl --list --verbose`).

> Almost surely it is Windows/WSL related, I'm not seeing this on Ubuntu
> 20.04.
>
> One thing to check might be the FPU control word. In a Windows build, R
> will set as it is on Unix, to use all 80 bits when values stay in FPU
> registers, which is not the Windows default. This should not matter with
> SSE anymore, but maybe something is still using the FPU. This is just
> using inline assembly, so one could enable it as experiment. In
> principle, this could be also due to some other things specific to
> Windows that R works around in Windows builds, but doesn't in Linux
> builds assuming they will not run on Windows.

It does run on Linux. WSL2 runs a modified version of the Linux kernel
on top of Hyper-V. Unless Bill is running WSL1, which runs on top of
the Windows kernel with a syscall translation layer.

> Other issues I had with WSL in the past (trying to build R and run
> checks) included time-zones and surprising encodings, but I didn't check
> recently. I would not use R on WSL unless my goal was to diagnose these
> issues and see if they could be overcome on the R side.
>
> Best
> Tomas

-- 
I?aki ?car


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Nov 18 14:17:12 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 18 Nov 2020 14:17:12 +0100
Subject: [Rd] formatting issue with gcc 9.3.0 on Ubuntu on WSL2
In-Reply-To: <CALEXWq2CJ289BvK_iuj-FEM7Tmm3c2=U7KYvZ0oTtHAuy0c14w@mail.gmail.com>
References: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
 <7b6f6ba5-3c73-c0c4-4edc-db1943acf471@gmail.com>
 <CALEXWq2CJ289BvK_iuj-FEM7Tmm3c2=U7KYvZ0oTtHAuy0c14w@mail.gmail.com>
Message-ID: <ee535e1b-9c46-d4af-da93-9609ae15fe90@gmail.com>

On 11/18/20 12:56 PM, I?aki Ucar wrote:
> On Wed, 18 Nov 2020 at 10:26, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 11/17/20 9:34 PM, Bill Dunlap wrote:
>>> I just got a new Windows laptop (i7, 10th generation CPU), installed
>>> 'Windows Subsystem for Linux 2' and then installed Ubuntu 20.04 and
>>> used 'apt-get install' to install packages that the R build seems
>>> to require.  In particular, I am using gcc version 9.3.0.   The
>>> build went without a hitch but the tests showed that deparse(1e-16)
>>> produced "1.00000000000000e-16" instead of the expected "1e-16".
>>>
>>> It looks like the problem is in src/main/format.c:scientific().  The
>>> lowest two+ bytes in the fractional part of the long double (80-bit)
>>> return value of powl(10.0L, -30L), seem to be corrupted.  I made a
>>> standalong program to test powl and saw no problem - it gives the
>>> same results for the fractional part as bc does.
>>>
>>>           bc: A2425FF7 5E14FC31 A125...
>>> standalone: 22425FF7 5E14FC32
>>>            R: 22425FF7 5E151800
>>>
>>> There are lots of other small numbers with the same problem:
>>>
>>>
>>>                                > grep(value=TRUE, "0e",
>>> vapply((1+(0:10000)/1000)*1e-15, deparse, ""))
>>> [1] "8.56000000000000e-15" "8.71700000000000e-15" "8.77800000000000e-15"
>>> [4] "8.93500000000000e-15" "9.50800000000000e-15" "9.83800000000000e-15"
>>> [7] "9.89900000000000e-15" "9.93400000000000e-15" "9.99500000000000e-15"
>>>> str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse, "")))
>>>    chr [1:295] "8.00200000000000e-14" "8.00500000000000e-14" ...
>>>
>>> Has anyone else seen this?  I am wondering if this is an oddity in WSL2
>>>
>>>                                or Ubuntu's gcc-9.3.0.
> I cannot reproduce this issue (version 20H2, build 19042.630; Ubuntu
> 20.04 installed from the store). Are you sure you are running on WSL2?
> (You can check this with `wsl --list --verbose`).
>
>> Almost surely it is Windows/WSL related, I'm not seeing this on Ubuntu
>> 20.04.
>>
>> One thing to check might be the FPU control word. In a Windows build, R
>> will set as it is on Unix, to use all 80 bits when values stay in FPU
>> registers, which is not the Windows default. This should not matter with
>> SSE anymore, but maybe something is still using the FPU. This is just
>> using inline assembly, so one could enable it as experiment. In
>> principle, this could be also due to some other things specific to
>> Windows that R works around in Windows builds, but doesn't in Linux
>> builds assuming they will not run on Windows.
> It does run on Linux. WSL2 runs a modified version of the Linux kernel
> on top of Hyper-V. Unless Bill is running WSL1, which runs on top of
> the Windows kernel with a syscall translation layer.
Yes, those experiments were with WSL 1.

I can reproduce the issue with "deparse(1e-16)" in Ubuntu 18.04 running 
in WSL 1, using r-base-core (not building R from source).

After upgrading the image to WSL 2 using "wsl --set-version Ubuntu-18.04 
2",? "deparse(1e-16)" works as it should on my system.

Best
Tomas

>
>> Other issues I had with WSL in the past (trying to build R and run
>> checks) included time-zones and surprising encodings, but I didn't check
>> recently. I would not use R on WSL unless my goal was to diagnose these
>> issues and see if they could be overcome on the R side.
>>
>> Best
>> Tomas


From w||||@mwdun|@p @end|ng |rom gm@||@com  Wed Nov 18 17:51:50 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Wed, 18 Nov 2020 08:51:50 -0800
Subject: [Rd] formatting issue with gcc 9.3.0 on Ubuntu on WSL2
In-Reply-To: <CALEXWq2CJ289BvK_iuj-FEM7Tmm3c2=U7KYvZ0oTtHAuy0c14w@mail.gmail.com>
References: <CAHqSRuSD7kgf8Ma9nCaLk1gXU7v3-O2hFsSOr7B5egP+NKV2NQ@mail.gmail.com>
 <7b6f6ba5-3c73-c0c4-4edc-db1943acf471@gmail.com>
 <CALEXWq2CJ289BvK_iuj-FEM7Tmm3c2=U7KYvZ0oTtHAuy0c14w@mail.gmail.com>
Message-ID: <CAHqSRuTg+SJJ_6Z8+e=Ld0QB0OPRnapuwjbvYxGCEc9ttbEQ9A@mail.gmail.com>

Thanks all.! I was running WSL 1 instead of 2 because I ignored the error
message from 'wsl --set-default-version 2'.  The BIOS was set up correctly
but the Hypervisor wasn't enabled - enabling all the Hypervisor features in
Control Panel and then doing ' wsl --set-version Ubuntu 2' in
Poweshell fixed the problem.

This also fixed one of my test C programs: '1.0L + 1e-60L > 1.0L' was true
if I compiled with gcc -O but false with no optimization.

On Wed, Nov 18, 2020 at 3:56 AM I?aki Ucar <iucar at fedoraproject.org> wrote:

> On Wed, 18 Nov 2020 at 10:26, Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
> >
> > On 11/17/20 9:34 PM, Bill Dunlap wrote:
> > > I just got a new Windows laptop (i7, 10th generation CPU), installed
> > > 'Windows Subsystem for Linux 2' and then installed Ubuntu 20.04 and
> > > used 'apt-get install' to install packages that the R build seems
> > > to require.  In particular, I am using gcc version 9.3.0.   The
> > > build went without a hitch but the tests showed that deparse(1e-16)
> > > produced "1.00000000000000e-16" instead of the expected "1e-16".
> > >
> > > It looks like the problem is in src/main/format.c:scientific().  The
> > > lowest two+ bytes in the fractional part of the long double (80-bit)
> > > return value of powl(10.0L, -30L), seem to be corrupted.  I made a
> > > standalong program to test powl and saw no problem - it gives the
> > > same results for the fractional part as bc does.
> > >
> > >          bc: A2425FF7 5E14FC31 A125...
> > > standalone: 22425FF7 5E14FC32
> > >           R: 22425FF7 5E151800
> > >
> > > There are lots of other small numbers with the same problem:
> > >
> > >
> > >                               > grep(value=TRUE, "0e",
> > > vapply((1+(0:10000)/1000)*1e-15, deparse, ""))
> > > [1] "8.56000000000000e-15" "8.71700000000000e-15"
> "8.77800000000000e-15"
> > > [4] "8.93500000000000e-15" "9.50800000000000e-15"
> "9.83800000000000e-15"
> > > [7] "9.89900000000000e-15" "9.93400000000000e-15"
> "9.99500000000000e-15"
> > >> str(grep(value=TRUE, "0e", vapply((1+(0:10000)/1000)*1e-14, deparse,
> "")))
> > >   chr [1:295] "8.00200000000000e-14" "8.00500000000000e-14" ...
> > >
> > > Has anyone else seen this?  I am wondering if this is an oddity in WSL2
> > >
> > >                               or Ubuntu's gcc-9.3.0.
>
> I cannot reproduce this issue (version 20H2, build 19042.630; Ubuntu
> 20.04 installed from the store). Are you sure you are running on WSL2?
> (You can check this with `wsl --list --verbose`).
>
> > Almost surely it is Windows/WSL related, I'm not seeing this on Ubuntu
> > 20.04.
> >
> > One thing to check might be the FPU control word. In a Windows build, R
> > will set as it is on Unix, to use all 80 bits when values stay in FPU
> > registers, which is not the Windows default. This should not matter with
> > SSE anymore, but maybe something is still using the FPU. This is just
> > using inline assembly, so one could enable it as experiment. In
> > principle, this could be also due to some other things specific to
> > Windows that R works around in Windows builds, but doesn't in Linux
> > builds assuming they will not run on Windows.
>
> It does run on Linux. WSL2 runs a modified version of the Linux kernel
> on top of Hyper-V. Unless Bill is running WSL1, which runs on top of
> the Windows kernel with a syscall translation layer.
>
> > Other issues I had with WSL in the past (trying to build R and run
> > checks) included time-zones and surprising encodings, but I didn't check
> > recently. I would not use R on WSL unless my goal was to diagnose these
> > issues and see if they could be overcome on the R side.
> >
> > Best
> > Tomas
>
> --
> I?aki ?car
>

	[[alternative HTML version deleted]]


From obregonm@teo @end|ng |rom gm@||@com  Fri Nov 20 22:12:33 2020
From: obregonm@teo @end|ng |rom gm@||@com (Mateo =?ISO-8859-1?Q?Obreg=F3n?=)
Date: Fri, 20 Nov 2020 21:12:33 +0000
Subject: [Rd] return (x+1)  * 1000
Message-ID: <2346654.07fb9yRiOW@tikre>

Dear r-developers-

After many years of using and coding in R and other languages, I came across 
something that I think should be flagged by the parser:

bug <- function (x) {
     return (x + 1) * 1000
}
> bug(1)
[1] 2

The return() call is not like any other function call that returns a value to 
the point where it was called from. I think this should straightforwardly be 
handled in the parser by flagging it as a syntactic error.

Thoughts?

Mateo.
--  
Mateo Obreg?n.


From g@bembecker @end|ng |rom gm@||@com  Fri Nov 20 22:58:29 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 20 Nov 2020 13:58:29 -0800
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <2346654.07fb9yRiOW@tikre>
References: <2346654.07fb9yRiOW@tikre>
Message-ID: <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>

Hi all,

I can confirm this occurs for me as well.

The one thing that comes to mind is that there are certain larger
expressions that contain calls to return which we absolutely don't want to
be an error, e.g

if(somestuff)
    return(TRUE)


That said, the actual expression Mateo pointed out certainly does look like
an error (it definitely isn't going to do what the developer intended).

I haven't looked at the parser much, to be honest. I assume there is
perhaps enough differentiation of if/else that return() could be allowed
within that but not inside a larger expression without it?

There would be things that are legal (though horrifying) now that would
stop working though, such as:

f = function(a) {

    ret = switch(a,

                 "1"= return("haha got 1!"),

                 "2" = "regular ole 2")

    ret

}


Whether it would be a problem or not that such insanity wouldn't work is
less clear. Are there valid non-if embedded return() cases that are
important to allow? If so (and if they're not differentiated by the parser,
which I somewhat doubt switch is, for example, though I'm not certain), I'm
skeptical we'd be able to do as he suggests.

It does seem worth considering though. If it can't be a hard parse error
but we agree many/most cases are problematic, perhaps adding detecting this
to the static checks that R CMD CHECK performs is another way forward.

Best,
~G

On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
wrote:

> Dear r-developers-
>
> After many years of using and coding in R and other languages, I came
> across
> something that I think should be flagged by the parser:
>
> bug <- function (x) {
>      return (x + 1) * 1000
> }
> > bug(1)
> [1] 2
>
> The return() call is not like any other function call that returns a value
> to
> the point where it was called from. I think this should straightforwardly
> be
> handled in the parser by flagging it as a syntactic error.
>
> Thoughts?
>
> Mateo.
> --
> Mateo Obreg?n.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Nov 20 23:16:18 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 20 Nov 2020 14:16:18 -0800
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
Message-ID: <CAFDcVCT9=CxoLtdibaHoaf55BT-ON7YYGdYrOtFUSPCV53J9Aw@mail.gmail.com>

FWIW, 'R CMD check --as-cran' in R-devel checks for "bogus return"
statements but I think that's only for the case when one forgets the
parentheses, e.g. 'return' instead of 'return()'.

I don't think it catches this case but I'm also not sure. Though, I can
imagine it might be possible to enhance the current check to include also
this case.

It could be that setting _R_CHECK_BOGUS_RETURN_=true will enable this check
also in earlier versions in R; not sure when it was introduced.

/Henrik

On Fri, Nov 20, 2020, 13:58 Gabriel Becker <gabembecker at gmail.com> wrote:

> Hi all,
>
> I can confirm this occurs for me as well.
>
> The one thing that comes to mind is that there are certain larger
> expressions that contain calls to return which we absolutely don't want to
> be an error, e.g
>
> if(somestuff)
>     return(TRUE)
>
>
> That said, the actual expression Mateo pointed out certainly does look like
> an error (it definitely isn't going to do what the developer intended).
>
> I haven't looked at the parser much, to be honest. I assume there is
> perhaps enough differentiation of if/else that return() could be allowed
> within that but not inside a larger expression without it?
>
> There would be things that are legal (though horrifying) now that would
> stop working though, such as:
>
> f = function(a) {
>
>     ret = switch(a,
>
>                  "1"= return("haha got 1!"),
>
>                  "2" = "regular ole 2")
>
>     ret
>
> }
>
>
> Whether it would be a problem or not that such insanity wouldn't work is
> less clear. Are there valid non-if embedded return() cases that are
> important to allow? If so (and if they're not differentiated by the parser,
> which I somewhat doubt switch is, for example, though I'm not certain), I'm
> skeptical we'd be able to do as he suggests.
>
> It does seem worth considering though. If it can't be a hard parse error
> but we agree many/most cases are problematic, perhaps adding detecting this
> to the static checks that R CMD CHECK performs is another way forward.
>
> Best,
> ~G
>
> On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
> wrote:
>
> > Dear r-developers-
> >
> > After many years of using and coding in R and other languages, I came
> > across
> > something that I think should be flagged by the parser:
> >
> > bug <- function (x) {
> >      return (x + 1) * 1000
> > }
> > > bug(1)
> > [1] 2
> >
> > The return() call is not like any other function call that returns a
> value
> > to
> > the point where it was called from. I think this should straightforwardly
> > be
> > handled in the parser by flagging it as a syntactic error.
> >
> > Thoughts?
> >
> > Mateo.
> > --
> > Mateo Obreg?n.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From obregonm@teo @end|ng |rom gm@||@com  Fri Nov 20 23:36:52 2020
From: obregonm@teo @end|ng |rom gm@||@com (Mateo =?ISO-8859-1?Q?Obreg=F3n?=)
Date: Fri, 20 Nov 2020 22:36:52 +0000
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
Message-ID: <4607801.TGRbt1cChS@tikre>

I'm not thinking of complicated cases.

This happened to me in a function that returns 10 minute slots

slot <- function (seconds) {
    return (seconds %/% 600) * 600
}

Obviously I found the issue while debugging and corrected my code with 
surrounding parenthesis, but I was surprised that the R parser did not catch 
this syntactic error.

This is especially poignant when we have to switch between languages like 
python where the original line would produce the desired result.

Mateo.
--  
Mateo Obreg?n.

On Friday, 20 November 2020 21:58:29 GMT Gabriel Becker wrote:
> Hi all,
> 
> I can confirm this occurs for me as well.
> 
> The one thing that comes to mind is that there are certain larger
> expressions that contain calls to return which we absolutely don't want to
> be an error, e.g
> 
> if(somestuff)
>     return(TRUE)
> 
> 
> That said, the actual expression Mateo pointed out certainly does look like
> an error (it definitely isn't going to do what the developer intended).
> 
> I haven't looked at the parser much, to be honest. I assume there is
> perhaps enough differentiation of if/else that return() could be allowed
> within that but not inside a larger expression without it?
> 
> There would be things that are legal (though horrifying) now that would
> stop working though, such as:
> 
> f = function(a) {
> 
>     ret = switch(a,
> 
>                  "1"= return("haha got 1!"),
> 
>                  "2" = "regular ole 2")
> 
>     ret
> 
> }
> 
> 
> Whether it would be a problem or not that such insanity wouldn't work is
> less clear. Are there valid non-if embedded return() cases that are
> important to allow? If so (and if they're not differentiated by the parser,
> which I somewhat doubt switch is, for example, though I'm not certain), I'm
> skeptical we'd be able to do as he suggests.
> 
> It does seem worth considering though. If it can't be a hard parse error
> but we agree many/most cases are problematic, perhaps adding detecting this
> to the static checks that R CMD CHECK performs is another way forward.
> 
> Best,
> ~G
> 
> On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
> 
> wrote:
> > Dear r-developers-
> > 
> > After many years of using and coding in R and other languages, I came
> > across
> > something that I think should be flagged by the parser:
> > 
> > bug <- function (x) {
> > 
> >      return (x + 1) * 1000
> > 
> > }
> > 
> > > bug(1)
> > 
> > [1] 2
> > 
> > The return() call is not like any other function call that returns a value
> > to
> > the point where it was called from. I think this should straightforwardly
> > be
> > handled in the parser by flagging it as a syntactic error.
> > 
> > Thoughts?
> > 
> > Mateo.
> > --
> > Mateo Obreg?n.
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Nov 20 23:43:53 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 20 Nov 2020 17:43:53 -0500
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CAFDcVCT9=CxoLtdibaHoaf55BT-ON7YYGdYrOtFUSPCV53J9Aw@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
 <CAFDcVCT9=CxoLtdibaHoaf55BT-ON7YYGdYrOtFUSPCV53J9Aw@mail.gmail.com>
Message-ID: <4c7c4a89-b625-42ce-0afd-af13c28357c1@gmail.com>

On 20/11/2020 5:16 p.m., Henrik Bengtsson wrote:
> FWIW, 'R CMD check --as-cran' in R-devel checks for "bogus return"
> statements but I think that's only for the case when one forgets the
> parentheses, e.g. 'return' instead of 'return()'.
> 
> I don't think it catches this case but I'm also not sure. Though, I can
> imagine it might be possible to enhance the current check to include also
> this case.
> 
> It could be that setting _R_CHECK_BOGUS_RETURN_=true will enable this check
> also in earlier versions in R; not sure when it was introduced.

It's quite recent (August of this year):  see 
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17180.

Duncan Murdoch
> 
> /Henrik
> 
> On Fri, Nov 20, 2020, 13:58 Gabriel Becker <gabembecker at gmail.com> wrote:
> 
>> Hi all,
>>
>> I can confirm this occurs for me as well.
>>
>> The one thing that comes to mind is that there are certain larger
>> expressions that contain calls to return which we absolutely don't want to
>> be an error, e.g
>>
>> if(somestuff)
>>      return(TRUE)
>>
>>
>> That said, the actual expression Mateo pointed out certainly does look like
>> an error (it definitely isn't going to do what the developer intended).
>>
>> I haven't looked at the parser much, to be honest. I assume there is
>> perhaps enough differentiation of if/else that return() could be allowed
>> within that but not inside a larger expression without it?
>>
>> There would be things that are legal (though horrifying) now that would
>> stop working though, such as:
>>
>> f = function(a) {
>>
>>      ret = switch(a,
>>
>>                   "1"= return("haha got 1!"),
>>
>>                   "2" = "regular ole 2")
>>
>>      ret
>>
>> }
>>
>>
>> Whether it would be a problem or not that such insanity wouldn't work is
>> less clear. Are there valid non-if embedded return() cases that are
>> important to allow? If so (and if they're not differentiated by the parser,
>> which I somewhat doubt switch is, for example, though I'm not certain), I'm
>> skeptical we'd be able to do as he suggests.
>>
>> It does seem worth considering though. If it can't be a hard parse error
>> but we agree many/most cases are problematic, perhaps adding detecting this
>> to the static checks that R CMD CHECK performs is another way forward.
>>
>> Best,
>> ~G
>>
>> On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
>> wrote:
>>
>>> Dear r-developers-
>>>
>>> After many years of using and coding in R and other languages, I came
>>> across
>>> something that I think should be flagged by the parser:
>>>
>>> bug <- function (x) {
>>>       return (x + 1) * 1000
>>> }
>>>> bug(1)
>>> [1] 2
>>>
>>> The return() call is not like any other function call that returns a
>> value
>>> to
>>> the point where it was called from. I think this should straightforwardly
>>> be
>>> handled in the parser by flagging it as a syntactic error.
>>>
>>> Thoughts?
>>>
>>> Mateo.
>>> --
>>> Mateo Obreg?n.
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Nov 20 23:52:58 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 20 Nov 2020 17:52:58 -0500
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <4607801.TGRbt1cChS@tikre>
References: <2346654.07fb9yRiOW@tikre>
 <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
 <4607801.TGRbt1cChS@tikre>
Message-ID: <62a99a41-5a63-8640-067c-65284b1b04cf@gmail.com>

On 20/11/2020 5:36 p.m., Mateo Obreg?n wrote:
> I'm not thinking of complicated cases.
> 
> This happened to me in a function that returns 10 minute slots
> 
> slot <- function (seconds) {
>      return (seconds %/% 600) * 600
> }
> 
> Obviously I found the issue while debugging and corrected my code with
> surrounding parenthesis, but I was surprised that the R parser did not catch
> this syntactic error.
> 
> This is especially poignant when we have to switch between languages like
> python where the original line would produce the desired result.

That's legal code, so the parser can't catch it, it needs to be caught 
by some lint-like thing that looks for bad usage.  The package check 
code has lots of that kind of check (including this one, though not yet 
in released R).  So if you put this in a package and run the --as-cran 
checks in R-devel, you'll be notified about it.

The fact that Python is different is something that's always going to 
cause problems for people who are more familiar with Python.  I don't 
know Python well enough to list all the gotchas, but I'm sure there are 
lots of them.

Duncan Murdoch

> 
> Mateo.
> --
> Mateo Obreg?n.
> 
> On Friday, 20 November 2020 21:58:29 GMT Gabriel Becker wrote:
>> Hi all,
>>
>> I can confirm this occurs for me as well.
>>
>> The one thing that comes to mind is that there are certain larger
>> expressions that contain calls to return which we absolutely don't want to
>> be an error, e.g
>>
>> if(somestuff)
>>      return(TRUE)
>>
>>
>> That said, the actual expression Mateo pointed out certainly does look like
>> an error (it definitely isn't going to do what the developer intended).
>>
>> I haven't looked at the parser much, to be honest. I assume there is
>> perhaps enough differentiation of if/else that return() could be allowed
>> within that but not inside a larger expression without it?
>>
>> There would be things that are legal (though horrifying) now that would
>> stop working though, such as:
>>
>> f = function(a) {
>>
>>      ret = switch(a,
>>
>>                   "1"= return("haha got 1!"),
>>
>>                   "2" = "regular ole 2")
>>
>>      ret
>>
>> }
>>
>>
>> Whether it would be a problem or not that such insanity wouldn't work is
>> less clear. Are there valid non-if embedded return() cases that are
>> important to allow? If so (and if they're not differentiated by the parser,
>> which I somewhat doubt switch is, for example, though I'm not certain), I'm
>> skeptical we'd be able to do as he suggests.
>>
>> It does seem worth considering though. If it can't be a hard parse error
>> but we agree many/most cases are problematic, perhaps adding detecting this
>> to the static checks that R CMD CHECK performs is another way forward.
>>
>> Best,
>> ~G
>>
>> On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
>>
>> wrote:
>>> Dear r-developers-
>>>
>>> After many years of using and coding in R and other languages, I came
>>> across
>>> something that I think should be flagged by the parser:
>>>
>>> bug <- function (x) {
>>>
>>>       return (x + 1) * 1000
>>>
>>> }
>>>
>>>> bug(1)
>>>
>>> [1] 2
>>>
>>> The return() call is not like any other function call that returns a value
>>> to
>>> the point where it was called from. I think this should straightforwardly
>>> be
>>> handled in the parser by flagging it as a syntactic error.
>>>
>>> Thoughts?
>>>
>>> Mateo.
>>> --
>>> Mateo Obreg?n.
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From w||||@mwdun|@p @end|ng |rom gm@||@com  Fri Nov 20 23:48:11 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Fri, 20 Nov 2020 14:48:11 -0800
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <4607801.TGRbt1cChS@tikre>
References: <2346654.07fb9yRiOW@tikre>
 <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
 <4607801.TGRbt1cChS@tikre>
Message-ID: <CAHqSRuQnBcjzi-x5sczyQ=1n0y37Xo9BWCMRA1Y0w_bh2vjo+g@mail.gmail.com>

Perhaps the parser should warn if you use return() at all.  It is rarely
needed and is akin to the evil 'GOTO' statement in that it makes the flow
of control less obvious to the reader.

-Bill

On Fri, Nov 20, 2020 at 2:37 PM Mateo Obreg?n <obregonmateo at gmail.com>
wrote:

> I'm not thinking of complicated cases.
>
> This happened to me in a function that returns 10 minute slots
>
> slot <- function (seconds) {
>     return (seconds %/% 600) * 600
> }
>
> Obviously I found the issue while debugging and corrected my code with
> surrounding parenthesis, but I was surprised that the R parser did not
> catch
> this syntactic error.
>
> This is especially poignant when we have to switch between languages like
> python where the original line would produce the desired result.
>
> Mateo.
> --
> Mateo Obreg?n.
>
> On Friday, 20 November 2020 21:58:29 GMT Gabriel Becker wrote:
> > Hi all,
> >
> > I can confirm this occurs for me as well.
> >
> > The one thing that comes to mind is that there are certain larger
> > expressions that contain calls to return which we absolutely don't want
> to
> > be an error, e.g
> >
> > if(somestuff)
> >     return(TRUE)
> >
> >
> > That said, the actual expression Mateo pointed out certainly does look
> like
> > an error (it definitely isn't going to do what the developer intended).
> >
> > I haven't looked at the parser much, to be honest. I assume there is
> > perhaps enough differentiation of if/else that return() could be allowed
> > within that but not inside a larger expression without it?
> >
> > There would be things that are legal (though horrifying) now that would
> > stop working though, such as:
> >
> > f = function(a) {
> >
> >     ret = switch(a,
> >
> >                  "1"= return("haha got 1!"),
> >
> >                  "2" = "regular ole 2")
> >
> >     ret
> >
> > }
> >
> >
> > Whether it would be a problem or not that such insanity wouldn't work is
> > less clear. Are there valid non-if embedded return() cases that are
> > important to allow? If so (and if they're not differentiated by the
> parser,
> > which I somewhat doubt switch is, for example, though I'm not certain),
> I'm
> > skeptical we'd be able to do as he suggests.
> >
> > It does seem worth considering though. If it can't be a hard parse error
> > but we agree many/most cases are problematic, perhaps adding detecting
> this
> > to the static checks that R CMD CHECK performs is another way forward.
> >
> > Best,
> > ~G
> >
> > On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
> >
> > wrote:
> > > Dear r-developers-
> > >
> > > After many years of using and coding in R and other languages, I came
> > > across
> > > something that I think should be flagged by the parser:
> > >
> > > bug <- function (x) {
> > >
> > >      return (x + 1) * 1000
> > >
> > > }
> > >
> > > > bug(1)
> > >
> > > [1] 2
> > >
> > > The return() call is not like any other function call that returns a
> value
> > > to
> > > the point where it was called from. I think this should
> straightforwardly
> > > be
> > > handled in the parser by flagging it as a syntactic error.
> > >
> > > Thoughts?
> > >
> > > Mateo.
> > > --
> > > Mateo Obreg?n.
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From obregonm@teo @end|ng |rom gm@||@com  Fri Nov 20 23:58:12 2020
From: obregonm@teo @end|ng |rom gm@||@com (Mateo =?ISO-8859-1?Q?Obreg=F3n?=)
Date: Fri, 20 Nov 2020 22:58:12 +0000
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <62a99a41-5a63-8640-067c-65284b1b04cf@gmail.com>
References: <2346654.07fb9yRiOW@tikre> <4607801.TGRbt1cChS@tikre>
 <62a99a41-5a63-8640-067c-65284b1b04cf@gmail.com>
Message-ID: <2076643.zZsHiRKVhT@tikre>

I don't see how anything operating on the "result" of a return() call could be 
legal. The special semantics of the return() call is that it does **not** 
return control to the place it was called from, but rather to the location 
where its surrounding function(){} was called from.

Mateo.
--  
Mateo Obreg?n.

On Friday, 20 November 2020 22:52:58 GMT Duncan Murdoch wrote:
> On 20/11/2020 5:36 p.m., Mateo Obreg?n wrote:
> > I'm not thinking of complicated cases.
> > 
> > This happened to me in a function that returns 10 minute slots
> > 
> > slot <- function (seconds) {
> > 
> >      return (seconds %/% 600) * 600
> > 
> > }
> > 
> > Obviously I found the issue while debugging and corrected my code with
> > surrounding parenthesis, but I was surprised that the R parser did not
> > catch this syntactic error.
> > 
> > This is especially poignant when we have to switch between languages like
> > python where the original line would produce the desired result.
> 
> That's legal code, so the parser can't catch it, it needs to be caught
> by some lint-like thing that looks for bad usage.  The package check
> code has lots of that kind of check (including this one, though not yet
> in released R).  So if you put this in a package and run the --as-cran
> checks in R-devel, you'll be notified about it.
> 
> The fact that Python is different is something that's always going to
> cause problems for people who are more familiar with Python.  I don't
> know Python well enough to list all the gotchas, but I'm sure there are
> lots of them.
> 
> Duncan Murdoch
> 
> > Mateo.
> > --
> > Mateo Obreg?n.
> > 
> > On Friday, 20 November 2020 21:58:29 GMT Gabriel Becker wrote:
> >> Hi all,
> >> 
> >> I can confirm this occurs for me as well.
> >> 
> >> The one thing that comes to mind is that there are certain larger
> >> expressions that contain calls to return which we absolutely don't want
> >> to
> >> be an error, e.g
> >> 
> >> if(somestuff)
> >> 
> >>      return(TRUE)
> >> 
> >> That said, the actual expression Mateo pointed out certainly does look
> >> like
> >> an error (it definitely isn't going to do what the developer intended).
> >> 
> >> I haven't looked at the parser much, to be honest. I assume there is
> >> perhaps enough differentiation of if/else that return() could be allowed
> >> within that but not inside a larger expression without it?
> >> 
> >> There would be things that are legal (though horrifying) now that would
> >> stop working though, such as:
> >> 
> >> f = function(a) {
> >> 
> >>      ret = switch(a,
> >>      
> >>                   "1"= return("haha got 1!"),
> >>                   
> >>                   "2" = "regular ole 2")
> >>      
> >>      ret
> >> 
> >> }
> >> 
> >> 
> >> Whether it would be a problem or not that such insanity wouldn't work is
> >> less clear. Are there valid non-if embedded return() cases that are
> >> important to allow? If so (and if they're not differentiated by the
> >> parser,
> >> which I somewhat doubt switch is, for example, though I'm not certain),
> >> I'm
> >> skeptical we'd be able to do as he suggests.
> >> 
> >> It does seem worth considering though. If it can't be a hard parse error
> >> but we agree many/most cases are problematic, perhaps adding detecting
> >> this
> >> to the static checks that R CMD CHECK performs is another way forward.
> >> 
> >> Best,
> >> ~G
> >> 
> >> On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
> >> 
> >> wrote:
> >>> Dear r-developers-
> >>> 
> >>> After many years of using and coding in R and other languages, I came
> >>> across
> >>> something that I think should be flagged by the parser:
> >>> 
> >>> bug <- function (x) {
> >>> 
> >>>       return (x + 1) * 1000
> >>> 
> >>> }
> >>> 
> >>>> bug(1)
> >>> 
> >>> [1] 2
> >>> 
> >>> The return() call is not like any other function call that returns a
> >>> value
> >>> to
> >>> the point where it was called from. I think this should
> >>> straightforwardly
> >>> be
> >>> handled in the parser by flagging it as a syntactic error.
> >>> 
> >>> Thoughts?
> >>> 
> >>> Mateo.
> >>> --
> >>> Mateo Obreg?n.
> >>> 
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From toth@dene@ @end|ng |rom kogentum@hu  Sat Nov 21 00:21:16 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Sat, 21 Nov 2020 00:21:16 +0100
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <2346654.07fb9yRiOW@tikre>
References: <2346654.07fb9yRiOW@tikre>
Message-ID: <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>

Or even more illustratively:

uneval_after_return <- function(x) {
   return(x) * stop("Not evaluated")
}
uneval_after_return(1)
# [1] 1

On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
> Dear r-developers-
> 
> After many years of using and coding in R and other languages, I came across
> something that I think should be flagged by the parser:
> 
> bug <- function (x) {
>       return (x + 1) * 1000
> }
>> bug(1)
> [1] 2
> 
> The return() call is not like any other function call that returns a value to
> the point where it was called from. I think this should straightforwardly be
> handled in the parser by flagging it as a syntactic error.
> 
> Thoughts?
> 
> Mateo.
> --
> Mateo Obreg?n.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From g@bembecker @end|ng |rom gm@||@com  Sat Nov 21 00:33:49 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 20 Nov 2020 15:33:49 -0800
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
References: <2346654.07fb9yRiOW@tikre>
 <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
Message-ID: <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>

And the related:

> f = function() stop(return("lol"))

> f()

[1] "lol"


I have a feeling all of this is just return() performing correctly though.
If there are already R CMD CHECK checks for this kind of thing (I
wasnt sure but I'm hearing from others there may be/are) that may be
(and/or may need to be) sufficient.

~G

On Fri, Nov 20, 2020 at 3:27 PM D?nes T?th <toth.denes at kogentum.hu> wrote:

> Or even more illustratively:
>
> uneval_after_return <- function(x) {
>    return(x) * stop("Not evaluated")
> }
> uneval_after_return(1)
> # [1] 1
>
> On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
> > Dear r-developers-
> >
> > After many years of using and coding in R and other languages, I came
> across
> > something that I think should be flagged by the parser:
> >
> > bug <- function (x) {
> >       return (x + 1) * 1000
> > }
> >> bug(1)
> > [1] 2
> >
> > The return() call is not like any other function call that returns a
> value to
> > the point where it was called from. I think this should
> straightforwardly be
> > handled in the parser by flagging it as a syntactic error.
> >
> > Thoughts?
> >
> > Mateo.
> > --
> > Mateo Obreg?n.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Sat Nov 21 00:36:58 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Sat, 21 Nov 2020 00:36:58 +0100
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
 <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>
Message-ID: <9b9fe313-f531-17c8-6ac6-5c020391f561@kogentum.hu>

Yes, the behaviour of return() is absolutely consistent. I am wondering 
though how many experienced R developers would predict the correct 
return value just by looking at those code snippets.

On 11/21/20 12:33 AM, Gabriel Becker wrote:
> And the related:
> 
>     > f = function() stop(return("lol"))
> 
>     > f()
> 
>     [1] "lol"
> 
> 
> I have a feeling all of this is just return() performing correctly 
> though. If there are already R CMD CHECK checks for this kind of thing 
> (I wasnt?sure but I'm hearing from others there may be/are) that may be 
> (and/or may need to be) sufficient.
> 
> ~G
> 
> On Fri, Nov 20, 2020 at 3:27 PM D?nes T?th <toth.denes at kogentum.hu 
> <mailto:toth.denes at kogentum.hu>> wrote:
> 
>     Or even more illustratively:
> 
>     uneval_after_return <- function(x) {
>      ? ?return(x) * stop("Not evaluated")
>     }
>     uneval_after_return(1)
>     # [1] 1
> 
>     On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
>      > Dear r-developers-
>      >
>      > After many years of using and coding in R and other languages, I
>     came across
>      > something that I think should be flagged by the parser:
>      >
>      > bug <- function (x) {
>      >? ? ? ?return (x + 1) * 1000
>      > }
>      >> bug(1)
>      > [1] 2
>      >
>      > The return() call is not like any other function call that
>     returns a value to
>      > the point where it was called from. I think this should
>     straightforwardly be
>      > handled in the parser by flagging it as a syntactic error.
>      >
>      > Thoughts?
>      >
>      > Mateo.
>      > --
>      > Mateo Obreg?n.
>      >
>      > ______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>      >
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sat Nov 21 00:52:10 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 20 Nov 2020 15:52:10 -0800
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <9b9fe313-f531-17c8-6ac6-5c020391f561@kogentum.hu>
References: <2346654.07fb9yRiOW@tikre>
 <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
 <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>
 <9b9fe313-f531-17c8-6ac6-5c020391f561@kogentum.hu>
Message-ID: <CAFDcVCT1M7eRTHw=ndR2XQD-wXuja=SHF=5cCM_U0m9LWn=udw@mail.gmail.com>

Without having dug into the details, it could be that one could update
the parser by making a 'return' a keyword and require it to be
followed by a parenthesis that optionally contains an expression
followed by end of statement (newline or semicolon).  Such a
"promotion" of the 'return' statement seems backward compatible and
would end up throwing syntax errors on:

function() return
function() return 2*x
function() return (2*x) + 1

while still accepting:

function() return()
function() return(2*x)
function() return((2*x) + 1)

Just my two Friday cents

/Henrik

On Fri, Nov 20, 2020 at 3:37 PM D?nes T?th <toth.denes at kogentum.hu> wrote:
>
> Yes, the behaviour of return() is absolutely consistent. I am wondering
> though how many experienced R developers would predict the correct
> return value just by looking at those code snippets.
>
> On 11/21/20 12:33 AM, Gabriel Becker wrote:
> > And the related:
> >
> >     > f = function() stop(return("lol"))
> >
> >     > f()
> >
> >     [1] "lol"
> >
> >
> > I have a feeling all of this is just return() performing correctly
> > though. If there are already R CMD CHECK checks for this kind of thing
> > (I wasnt sure but I'm hearing from others there may be/are) that may be
> > (and/or may need to be) sufficient.
> >
> > ~G
> >
> > On Fri, Nov 20, 2020 at 3:27 PM D?nes T?th <toth.denes at kogentum.hu
> > <mailto:toth.denes at kogentum.hu>> wrote:
> >
> >     Or even more illustratively:
> >
> >     uneval_after_return <- function(x) {
> >         return(x) * stop("Not evaluated")
> >     }
> >     uneval_after_return(1)
> >     # [1] 1
> >
> >     On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
> >      > Dear r-developers-
> >      >
> >      > After many years of using and coding in R and other languages, I
> >     came across
> >      > something that I think should be flagged by the parser:
> >      >
> >      > bug <- function (x) {
> >      >       return (x + 1) * 1000
> >      > }
> >      >> bug(1)
> >      > [1] 2
> >      >
> >      > The return() call is not like any other function call that
> >     returns a value to
> >      > the point where it was called from. I think this should
> >     straightforwardly be
> >      > handled in the parser by flagging it as a syntactic error.
> >      >
> >      > Thoughts?
> >      >
> >      > Mateo.
> >      > --
> >      > Mateo Obreg?n.
> >      >
> >      > ______________________________________________
> >      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >      > https://stat.ethz.ch/mailman/listinfo/r-devel
> >      >
> >
> >     ______________________________________________
> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Sat Nov 21 01:01:54 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 20 Nov 2020 19:01:54 -0500
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CAFDcVCT1M7eRTHw=ndR2XQD-wXuja=SHF=5cCM_U0m9LWn=udw@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
 <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>
 <9b9fe313-f531-17c8-6ac6-5c020391f561@kogentum.hu>
 <CAFDcVCT1M7eRTHw=ndR2XQD-wXuja=SHF=5cCM_U0m9LWn=udw@mail.gmail.com>
Message-ID: <CABghstQAcwk4ytdDrL=9ZN5ntfLZWkv-vWhvesBrwPfW+i8Lsw@mail.gmail.com>

  I may be unusual but I don't find these examples surprising at all/
I don't think I would make these mistakes (maybe it's easier to make
that mistake if you're used to a language where 'return' is a keyword
rather than a function?

   My two cents would be that it would make more sense to (1) write
code to detect these constructions in existing R code (I'm not good at
this, but presumably "return() as anything other than the head of an
element of the body of a function" would work?) (2) apply it to some
corpus of R code to see whether it actually happens much; (3) if so,
add the test you wrote in step 1 to the QA tools in the utils
package/CRAN checks.

On Fri, Nov 20, 2020 at 6:58 PM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> Without having dug into the details, it could be that one could update
> the parser by making a 'return' a keyword and require it to be
> followed by a parenthesis that optionally contains an expression
> followed by end of statement (newline or semicolon).  Such a
> "promotion" of the 'return' statement seems backward compatible and
> would end up throwing syntax errors on:
>
> function() return
> function() return 2*x
> function() return (2*x) + 1
>
> while still accepting:
>
> function() return()
> function() return(2*x)
> function() return((2*x) + 1)
>
> Just my two Friday cents
>
> /Henrik
>
> On Fri, Nov 20, 2020 at 3:37 PM D?nes T?th <toth.denes at kogentum.hu> wrote:
> >
> > Yes, the behaviour of return() is absolutely consistent. I am wondering
> > though how many experienced R developers would predict the correct
> > return value just by looking at those code snippets.
> >
> > On 11/21/20 12:33 AM, Gabriel Becker wrote:
> > > And the related:
> > >
> > >     > f = function() stop(return("lol"))
> > >
> > >     > f()
> > >
> > >     [1] "lol"
> > >
> > >
> > > I have a feeling all of this is just return() performing correctly
> > > though. If there are already R CMD CHECK checks for this kind of thing
> > > (I wasnt sure but I'm hearing from others there may be/are) that may be
> > > (and/or may need to be) sufficient.
> > >
> > > ~G
> > >
> > > On Fri, Nov 20, 2020 at 3:27 PM D?nes T?th <toth.denes at kogentum.hu
> > > <mailto:toth.denes at kogentum.hu>> wrote:
> > >
> > >     Or even more illustratively:
> > >
> > >     uneval_after_return <- function(x) {
> > >         return(x) * stop("Not evaluated")
> > >     }
> > >     uneval_after_return(1)
> > >     # [1] 1
> > >
> > >     On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
> > >      > Dear r-developers-
> > >      >
> > >      > After many years of using and coding in R and other languages, I
> > >     came across
> > >      > something that I think should be flagged by the parser:
> > >      >
> > >      > bug <- function (x) {
> > >      >       return (x + 1) * 1000
> > >      > }
> > >      >> bug(1)
> > >      > [1] 2
> > >      >
> > >      > The return() call is not like any other function call that
> > >     returns a value to
> > >      > the point where it was called from. I think this should
> > >     straightforwardly be
> > >      > handled in the parser by flagging it as a syntactic error.
> > >      >
> > >      > Thoughts?
> > >      >
> > >      > Mateo.
> > >      > --
> > >      > Mateo Obreg?n.
> > >      >
> > >      > ______________________________________________
> > >      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> > >      > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >      >
> > >
> > >     ______________________________________________
> > >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> > >     https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov 21 01:37:51 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 20 Nov 2020 19:37:51 -0500
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <2076643.zZsHiRKVhT@tikre>
References: <2346654.07fb9yRiOW@tikre> <4607801.TGRbt1cChS@tikre>
 <62a99a41-5a63-8640-067c-65284b1b04cf@gmail.com> <2076643.zZsHiRKVhT@tikre>
Message-ID: <4430ae77-359b-6b11-22ad-606912bfad0c@gmail.com>

On 20/11/2020 5:58 p.m., Mateo Obreg?n wrote:
> I don't see how anything operating on the "result" of a return() call could be
> legal. The special semantics of the return() call is that it does **not**
> return control to the place it was called from, but rather to the location
> where its surrounding function(){} was called from.

The problem is that in R, return() is a function.  It's a function that 
does weird things, but it's not a reserved word like it is in some other 
languages.  If you don't like the standard definition, you can change it:

return <- function() 3

f <- function() return()

f()

which will return 3.

Duncan Murdoch

> 
> Mateo.
> --
> Mateo Obreg?n.
> 
> On Friday, 20 November 2020 22:52:58 GMT Duncan Murdoch wrote:
>> On 20/11/2020 5:36 p.m., Mateo Obreg?n wrote:
>>> I'm not thinking of complicated cases.
>>>
>>> This happened to me in a function that returns 10 minute slots
>>>
>>> slot <- function (seconds) {
>>>
>>>       return (seconds %/% 600) * 600
>>>
>>> }
>>>
>>> Obviously I found the issue while debugging and corrected my code with
>>> surrounding parenthesis, but I was surprised that the R parser did not
>>> catch this syntactic error.
>>>
>>> This is especially poignant when we have to switch between languages like
>>> python where the original line would produce the desired result.
>>
>> That's legal code, so the parser can't catch it, it needs to be caught
>> by some lint-like thing that looks for bad usage.  The package check
>> code has lots of that kind of check (including this one, though not yet
>> in released R).  So if you put this in a package and run the --as-cran
>> checks in R-devel, you'll be notified about it.
>>
>> The fact that Python is different is something that's always going to
>> cause problems for people who are more familiar with Python.  I don't
>> know Python well enough to list all the gotchas, but I'm sure there are
>> lots of them.
>>
>> Duncan Murdoch
>>
>>> Mateo.
>>> --
>>> Mateo Obreg?n.
>>>
>>> On Friday, 20 November 2020 21:58:29 GMT Gabriel Becker wrote:
>>>> Hi all,
>>>>
>>>> I can confirm this occurs for me as well.
>>>>
>>>> The one thing that comes to mind is that there are certain larger
>>>> expressions that contain calls to return which we absolutely don't want
>>>> to
>>>> be an error, e.g
>>>>
>>>> if(somestuff)
>>>>
>>>>       return(TRUE)
>>>>
>>>> That said, the actual expression Mateo pointed out certainly does look
>>>> like
>>>> an error (it definitely isn't going to do what the developer intended).
>>>>
>>>> I haven't looked at the parser much, to be honest. I assume there is
>>>> perhaps enough differentiation of if/else that return() could be allowed
>>>> within that but not inside a larger expression without it?
>>>>
>>>> There would be things that are legal (though horrifying) now that would
>>>> stop working though, such as:
>>>>
>>>> f = function(a) {
>>>>
>>>>       ret = switch(a,
>>>>       
>>>>                    "1"= return("haha got 1!"),
>>>>                    
>>>>                    "2" = "regular ole 2")
>>>>       
>>>>       ret
>>>>
>>>> }
>>>>
>>>>
>>>> Whether it would be a problem or not that such insanity wouldn't work is
>>>> less clear. Are there valid non-if embedded return() cases that are
>>>> important to allow? If so (and if they're not differentiated by the
>>>> parser,
>>>> which I somewhat doubt switch is, for example, though I'm not certain),
>>>> I'm
>>>> skeptical we'd be able to do as he suggests.
>>>>
>>>> It does seem worth considering though. If it can't be a hard parse error
>>>> but we agree many/most cases are problematic, perhaps adding detecting
>>>> this
>>>> to the static checks that R CMD CHECK performs is another way forward.
>>>>
>>>> Best,
>>>> ~G
>>>>
>>>> On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
>>>>
>>>> wrote:
>>>>> Dear r-developers-
>>>>>
>>>>> After many years of using and coding in R and other languages, I came
>>>>> across
>>>>> something that I think should be flagged by the parser:
>>>>>
>>>>> bug <- function (x) {
>>>>>
>>>>>        return (x + 1) * 1000
>>>>>
>>>>> }
>>>>>
>>>>>> bug(1)
>>>>>
>>>>> [1] 2
>>>>>
>>>>> The return() call is not like any other function call that returns a
>>>>> value
>>>>> to
>>>>> the point where it was called from. I think this should
>>>>> straightforwardly
>>>>> be
>>>>> handled in the parser by flagging it as a syntactic error.
>>>>>
>>>>> Thoughts?
>>>>>
>>>>> Mateo.
>>>>> --
>>>>> Mateo Obreg?n.
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
>


From jttk|m @end|ng |rom goog|em@||@com  Sat Nov 21 01:42:03 2020
From: jttk|m @end|ng |rom goog|em@||@com (Jan T. Kim)
Date: Sat, 21 Nov 2020 00:42:03 +0000
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CAHqSRuQnBcjzi-x5sczyQ=1n0y37Xo9BWCMRA1Y0w_bh2vjo+g@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <CAD4oTHF9ZMUU=L1Zof=kXwA3yL_jGjDyv3z9D1Ty6L8TZkeiaw@mail.gmail.com>
 <4607801.TGRbt1cChS@tikre>
 <CAHqSRuQnBcjzi-x5sczyQ=1n0y37Xo9BWCMRA1Y0w_bh2vjo+g@mail.gmail.com>
Message-ID: <20201121004203.GD22962@titania>

On Fri, Nov 20, 2020 at 02:48:11PM -0800, Bill Dunlap wrote:
> Perhaps the parser should warn if you use return() at all.  It is rarely
> needed and is akin to the evil 'GOTO' statement in that it makes the flow
> of control less obvious to the reader.

My experience is contrary to this, using return explicitly makes
code more readable for a substantial proportion of coders. This is
based on debugging return-unaware code, and helping others debug,
over many years, and finding that a considerable proportion of people
aren't very aware of the implicit return of the last evaluated
expression. Examples that I've known to cause people to despair
include code "mysteriously" going wrong after appending an "innocent"
statement like

    print(x);

to a function (so the function now returns x, rather than whatever
it was returning before), or functions returning something unintended
in some rather rare combination of conditions.

>From a language design perspective it seems to me that perhaps a cause
of the problem is that return is not a keyword like "function", but a
function itself -- and, of necessity, a rather peculiar one.

Personally, I'd prefer upgrading return to a keyword, as I can't think
of any way of preventing the weirdnesses discussed in this thread while
preserving the function implementation of "return". This would also be
a step towards getting the parser to warn about uses of return that
are considered undesirable -- with the current function implementation,
the parser can't really tell whether any call will effectively be to
return, it could be anything looking as innocent as "f":

    demo <- function(x, f) { message("hello"); print(f(x)); message("bye"); }
    demo(3, mean);
    demo(3, return);

Best regards, Jan


> -Bill
> 
> On Fri, Nov 20, 2020 at 2:37 PM Mateo Obreg?n <obregonmateo at gmail.com>
> wrote:
> 
> > I'm not thinking of complicated cases.
> >
> > This happened to me in a function that returns 10 minute slots
> >
> > slot <- function (seconds) {
> >     return (seconds %/% 600) * 600
> > }
> >
> > Obviously I found the issue while debugging and corrected my code with
> > surrounding parenthesis, but I was surprised that the R parser did not
> > catch
> > this syntactic error.
> >
> > This is especially poignant when we have to switch between languages like
> > python where the original line would produce the desired result.
> >
> > Mateo.
> > --
> > Mateo Obreg?n.
> >
> > On Friday, 20 November 2020 21:58:29 GMT Gabriel Becker wrote:
> > > Hi all,
> > >
> > > I can confirm this occurs for me as well.
> > >
> > > The one thing that comes to mind is that there are certain larger
> > > expressions that contain calls to return which we absolutely don't want
> > to
> > > be an error, e.g
> > >
> > > if(somestuff)
> > >     return(TRUE)
> > >
> > >
> > > That said, the actual expression Mateo pointed out certainly does look
> > like
> > > an error (it definitely isn't going to do what the developer intended).
> > >
> > > I haven't looked at the parser much, to be honest. I assume there is
> > > perhaps enough differentiation of if/else that return() could be allowed
> > > within that but not inside a larger expression without it?
> > >
> > > There would be things that are legal (though horrifying) now that would
> > > stop working though, such as:
> > >
> > > f = function(a) {
> > >
> > >     ret = switch(a,
> > >
> > >                  "1"= return("haha got 1!"),
> > >
> > >                  "2" = "regular ole 2")
> > >
> > >     ret
> > >
> > > }
> > >
> > >
> > > Whether it would be a problem or not that such insanity wouldn't work is
> > > less clear. Are there valid non-if embedded return() cases that are
> > > important to allow? If so (and if they're not differentiated by the
> > parser,
> > > which I somewhat doubt switch is, for example, though I'm not certain),
> > I'm
> > > skeptical we'd be able to do as he suggests.
> > >
> > > It does seem worth considering though. If it can't be a hard parse error
> > > but we agree many/most cases are problematic, perhaps adding detecting
> > this
> > > to the static checks that R CMD CHECK performs is another way forward.
> > >
> > > Best,
> > > ~G
> > >
> > > On Fri, Nov 20, 2020 at 1:34 PM Mateo Obreg?n <obregonmateo at gmail.com>
> > >
> > > wrote:
> > > > Dear r-developers-
> > > >
> > > > After many years of using and coding in R and other languages, I came
> > > > across
> > > > something that I think should be flagged by the parser:
> > > >
> > > > bug <- function (x) {
> > > >
> > > >      return (x + 1) * 1000
> > > >
> > > > }
> > > >
> > > > > bug(1)
> > > >
> > > > [1] 2
> > > >
> > > > The return() call is not like any other function call that returns a
> > value
> > > > to
> > > > the point where it was called from. I think this should
> > straightforwardly
> > > > be
> > > > handled in the parser by flagging it as a syntactic error.
> > > >
> > > > Thoughts?
> > > >
> > > > Mateo.
> > > > --
> > > > Mateo Obreg?n.
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov 21 01:43:49 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 20 Nov 2020 19:43:49 -0500
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <CABghstQAcwk4ytdDrL=9ZN5ntfLZWkv-vWhvesBrwPfW+i8Lsw@mail.gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
 <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>
 <9b9fe313-f531-17c8-6ac6-5c020391f561@kogentum.hu>
 <CAFDcVCT1M7eRTHw=ndR2XQD-wXuja=SHF=5cCM_U0m9LWn=udw@mail.gmail.com>
 <CABghstQAcwk4ytdDrL=9ZN5ntfLZWkv-vWhvesBrwPfW+i8Lsw@mail.gmail.com>
Message-ID: <67e0f7a8-3ca6-226c-88db-c6c37a4d65d1@gmail.com>

On 20/11/2020 7:01 p.m., Ben Bolker wrote:
>    I may be unusual but I don't find these examples surprising at all/
> I don't think I would make these mistakes (maybe it's easier to make
> that mistake if you're used to a language where 'return' is a keyword
> rather than a function?
> 
>     My two cents would be that it would make more sense to (1) write
> code to detect these constructions in existing R code (I'm not good at
> this, but presumably "return() as anything other than the head of an
> element of the body of a function" would work?)

No, it's commonly nested within an if() expression, and could appear 
anywhere else.

  (2) apply it to some
> corpus of R code to see whether it actually happens much; 

I did that, in the bug report #17180 I cited.  In 2016 it appeared to be 
misused in about 100 packages.

(3) if so,
> add the test you wrote in step 1 to the QA tools in the utils
> package/CRAN checks.

That was done this year.

Duncan Murdoch

> 
> On Fri, Nov 20, 2020 at 6:58 PM Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
>>
>> Without having dug into the details, it could be that one could update
>> the parser by making a 'return' a keyword and require it to be
>> followed by a parenthesis that optionally contains an expression
>> followed by end of statement (newline or semicolon).  Such a
>> "promotion" of the 'return' statement seems backward compatible and
>> would end up throwing syntax errors on:
>>
>> function() return
>> function() return 2*x
>> function() return (2*x) + 1
>>
>> while still accepting:
>>
>> function() return()
>> function() return(2*x)
>> function() return((2*x) + 1)
>>
>> Just my two Friday cents
>>
>> /Henrik
>>
>> On Fri, Nov 20, 2020 at 3:37 PM D?nes T?th <toth.denes at kogentum.hu> wrote:
>>>
>>> Yes, the behaviour of return() is absolutely consistent. I am wondering
>>> though how many experienced R developers would predict the correct
>>> return value just by looking at those code snippets.
>>>
>>> On 11/21/20 12:33 AM, Gabriel Becker wrote:
>>>> And the related:
>>>>
>>>>      > f = function() stop(return("lol"))
>>>>
>>>>      > f()
>>>>
>>>>      [1] "lol"
>>>>
>>>>
>>>> I have a feeling all of this is just return() performing correctly
>>>> though. If there are already R CMD CHECK checks for this kind of thing
>>>> (I wasnt sure but I'm hearing from others there may be/are) that may be
>>>> (and/or may need to be) sufficient.
>>>>
>>>> ~G
>>>>
>>>> On Fri, Nov 20, 2020 at 3:27 PM D?nes T?th <toth.denes at kogentum.hu
>>>> <mailto:toth.denes at kogentum.hu>> wrote:
>>>>
>>>>      Or even more illustratively:
>>>>
>>>>      uneval_after_return <- function(x) {
>>>>          return(x) * stop("Not evaluated")
>>>>      }
>>>>      uneval_after_return(1)
>>>>      # [1] 1
>>>>
>>>>      On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
>>>>       > Dear r-developers-
>>>>       >
>>>>       > After many years of using and coding in R and other languages, I
>>>>      came across
>>>>       > something that I think should be flagged by the parser:
>>>>       >
>>>>       > bug <- function (x) {
>>>>       >       return (x + 1) * 1000
>>>>       > }
>>>>       >> bug(1)
>>>>       > [1] 2
>>>>       >
>>>>       > The return() call is not like any other function call that
>>>>      returns a value to
>>>>       > the point where it was called from. I think this should
>>>>      straightforwardly be
>>>>       > handled in the parser by flagging it as a syntactic error.
>>>>       >
>>>>       > Thoughts?
>>>>       >
>>>>       > Mateo.
>>>>       > --
>>>>       > Mateo Obreg?n.
>>>>       >
>>>>       > ______________________________________________
>>>>       > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>>>       > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>       >
>>>>
>>>>      ______________________________________________
>>>>      R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>>>      https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bbo|ker @end|ng |rom gm@||@com  Sat Nov 21 01:48:40 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 20 Nov 2020 19:48:40 -0500
Subject: [Rd] return (x+1) * 1000
In-Reply-To: <67e0f7a8-3ca6-226c-88db-c6c37a4d65d1@gmail.com>
References: <2346654.07fb9yRiOW@tikre>
 <d6add599-36e3-bbb6-4fd4-67cb2f2b5553@kogentum.hu>
 <CAD4oTHGDqKa4u7SoPM1yQspiEEZBHYi3kr7myS+Hox_djqiYEA@mail.gmail.com>
 <9b9fe313-f531-17c8-6ac6-5c020391f561@kogentum.hu>
 <CAFDcVCT1M7eRTHw=ndR2XQD-wXuja=SHF=5cCM_U0m9LWn=udw@mail.gmail.com>
 <CABghstQAcwk4ytdDrL=9ZN5ntfLZWkv-vWhvesBrwPfW+i8Lsw@mail.gmail.com>
 <67e0f7a8-3ca6-226c-88db-c6c37a4d65d1@gmail.com>
Message-ID: <CABghstTm+Tp_2gk3gJyNqhP3csR36WDF48jezuOda7e3YiJ+ag@mail.gmail.com>

  OK, you're way ahead of me.  If this is in the QA tools, I guess I
don't really see the need to change the parser and/or the language to
flag it immediately?

On Fri, Nov 20, 2020 at 7:43 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 20/11/2020 7:01 p.m., Ben Bolker wrote:
> >    I may be unusual but I don't find these examples surprising at all/
> > I don't think I would make these mistakes (maybe it's easier to make
> > that mistake if you're used to a language where 'return' is a keyword
> > rather than a function?
> >
> >     My two cents would be that it would make more sense to (1) write
> > code to detect these constructions in existing R code (I'm not good at
> > this, but presumably "return() as anything other than the head of an
> > element of the body of a function" would work?)
>
> No, it's commonly nested within an if() expression, and could appear
> anywhere else.
>
>   (2) apply it to some
> > corpus of R code to see whether it actually happens much;
>
> I did that, in the bug report #17180 I cited.  In 2016 it appeared to be
> misused in about 100 packages.
>
> (3) if so,
> > add the test you wrote in step 1 to the QA tools in the utils
> > package/CRAN checks.
>
> That was done this year.
>
> Duncan Murdoch
>
> >
> > On Fri, Nov 20, 2020 at 6:58 PM Henrik Bengtsson
> > <henrik.bengtsson at gmail.com> wrote:
> >>
> >> Without having dug into the details, it could be that one could update
> >> the parser by making a 'return' a keyword and require it to be
> >> followed by a parenthesis that optionally contains an expression
> >> followed by end of statement (newline or semicolon).  Such a
> >> "promotion" of the 'return' statement seems backward compatible and
> >> would end up throwing syntax errors on:
> >>
> >> function() return
> >> function() return 2*x
> >> function() return (2*x) + 1
> >>
> >> while still accepting:
> >>
> >> function() return()
> >> function() return(2*x)
> >> function() return((2*x) + 1)
> >>
> >> Just my two Friday cents
> >>
> >> /Henrik
> >>
> >> On Fri, Nov 20, 2020 at 3:37 PM D?nes T?th <toth.denes at kogentum.hu> wrote:
> >>>
> >>> Yes, the behaviour of return() is absolutely consistent. I am wondering
> >>> though how many experienced R developers would predict the correct
> >>> return value just by looking at those code snippets.
> >>>
> >>> On 11/21/20 12:33 AM, Gabriel Becker wrote:
> >>>> And the related:
> >>>>
> >>>>      > f = function() stop(return("lol"))
> >>>>
> >>>>      > f()
> >>>>
> >>>>      [1] "lol"
> >>>>
> >>>>
> >>>> I have a feeling all of this is just return() performing correctly
> >>>> though. If there are already R CMD CHECK checks for this kind of thing
> >>>> (I wasnt sure but I'm hearing from others there may be/are) that may be
> >>>> (and/or may need to be) sufficient.
> >>>>
> >>>> ~G
> >>>>
> >>>> On Fri, Nov 20, 2020 at 3:27 PM D?nes T?th <toth.denes at kogentum.hu
> >>>> <mailto:toth.denes at kogentum.hu>> wrote:
> >>>>
> >>>>      Or even more illustratively:
> >>>>
> >>>>      uneval_after_return <- function(x) {
> >>>>          return(x) * stop("Not evaluated")
> >>>>      }
> >>>>      uneval_after_return(1)
> >>>>      # [1] 1
> >>>>
> >>>>      On 11/20/20 10:12 PM, Mateo Obreg?n wrote:
> >>>>       > Dear r-developers-
> >>>>       >
> >>>>       > After many years of using and coding in R and other languages, I
> >>>>      came across
> >>>>       > something that I think should be flagged by the parser:
> >>>>       >
> >>>>       > bug <- function (x) {
> >>>>       >       return (x + 1) * 1000
> >>>>       > }
> >>>>       >> bug(1)
> >>>>       > [1] 2
> >>>>       >
> >>>>       > The return() call is not like any other function call that
> >>>>      returns a value to
> >>>>       > the point where it was called from. I think this should
> >>>>      straightforwardly be
> >>>>       > handled in the parser by flagging it as a syntactic error.
> >>>>       >
> >>>>       > Thoughts?
> >>>>       >
> >>>>       > Mateo.
> >>>>       > --
> >>>>       > Mateo Obreg?n.
> >>>>       >
> >>>>       > ______________________________________________
> >>>>       > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >>>>       > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>       >
> >>>>
> >>>>      ______________________________________________
> >>>>      R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >>>>      https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From @zwj|08 @end|ng |rom gm@||@com  Sat Nov 21 13:56:59 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sat, 21 Nov 2020 20:56:59 +0800
Subject: [Rd] Two ALTREP questions
Message-ID: <CAGiFhPNDvLFawx3VKV=wnSF_mNEqa-Fq-OJVxOT-SpvX=DcDsA@mail.gmail.com>

Hello,

I have two related ALTREP questions. It seems like there is no way to
assign attributes to an ALTREP vector without using C++ code. To be more
specifically, I want to make an ALTREP matrix, I have tried the following R
code but none of them work.
```
.Internal(inspect(1:6))
.Internal(inspect(matrix(1:6, 2,3)))
.Internal(inspect(as.matrix(1:6)))
.Internal(inspect(structure(1:6, dim = c(2L,3L))))
.Internal(inspect({x <- 1:6;attr(x, "dim") <- c(2L,3L);x}))
.Internal(inspect({x <- 1:6;attributes(x)<- list(dim = c(2L,3L));x}))
```

The only way to make an ALTREP matrix is to use the C level function
```
attachAttrib <- inline::cxxfunction( signature(x = "SEXP", attr = "SEXP" )
, '
SET_ATTRIB(x,attr);
return(R_NilValue);
')
x <- 1:6
attachAttrib(x, pairlist(dim = c(2L, 3L)))
.Internal(inspect(x))
```

Since the matrix, or adding attributes, is a common need for the object
operation, I wonder if this missing feature is intended? This also brings
my second question, it seems like the ALTREP coercion function does not
handle attributes correctly.  After the coercion, the ALTREP object will
lose its attributes.
```
coerceFunc <- inline::cxxfunction( signature(x = "SEXP", attr = "SEXP" ) , '
SET_ATTRIB(x,attr);
return(Rf_coerceVector(x, REALSXP));
')
> coerceFunc(1:6, pairlist(dim = c(2L, 3L)))
[1] 1 2 3 4 5 6
> coerceFunc(1:6 + 0L, pairlist(dim = c(2L, 3L)))
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
```
The problem is that the coercion function is directly dispatched to the
user-defined ALTREP coercion function, so the user is responsible to attach
the attributes after the coercion. If he forgets to do so, then the result
is a plain vector. Similar to the `Duplicate` and `DuplicateEX` functions
where the former one will attach the attributes by default, I feel that the
`Coerce` function should only return a plain vector and there should be a
`CoerceEx` function to do the attribute assignment, so the logic in the
no-EX ALTREP functions can be consistent. I do not know how dramastic the
change would be, so maybe this is too hard to do.

BTW, is there any way to contribute to the R source? I know R has a limited
resouces, so if possible, I will be happy to fix the matrix issue myself
and make some minor contributions to the R community.

Best,
Jiefei

	[[alternative HTML version deleted]]


From m@r|o@@nn@u @end|ng |rom gm@||@com  Sat Nov 21 16:55:26 2020
From: m@r|o@@nn@u @end|ng |rom gm@||@com (Mario Annau)
Date: Sat, 21 Nov 2020 16:55:26 +0100
Subject: [Rd] Error in unsplit() with tibbles
Message-ID: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>

Hello,

using the `unsplit()` function with tibbles currently leads to the
following error:

> mtcars_tb <- as_tibble(mtcars, rownames = NULL)
> s <- split(mtcars_tb, mtcars_tb$gear)
> unsplit(s, mtcars_tb$gear)
 Error: Must subset rows with a valid subscript vector.
? Logical subscripts must match the size of the indexed input.
x Input has size 15 but subscript `rep(NA, len)` has size 32.
Run `rlang::last_error()` to see where the error occurred.

Tibble seems to (rightly) complain, that a logical vector has been used for
subsetting which does not have the same length as the data.frame (rows).
Since `NA` is a logical value, the subset should be changed to
`NA_integer_` in `unsplit()`:

> unsplit
function (value, f, drop = FALSE)
{
    len <- length(if (is.list(f)) f[[1L]] else f)
    if (is.data.frame(value[[1L]])) {
        x <- value[[1L]][rep(*NA_integer_*, len), , drop = FALSE]
        rownames(x) <- unsplit(lapply(value, rownames), f, drop = drop)
    }
    else x <- value[[1L]][rep(NA, len)]
    split(x, f, drop = drop) <- value
    x
}

Cheers,
Mario

	[[alternative HTML version deleted]]


From m@rc_@chw@rtz @end|ng |rom me@com  Sat Nov 21 17:42:47 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Sat, 21 Nov 2020 11:42:47 -0500
Subject: [Rd] Error in unsplit() with tibbles
In-Reply-To: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
References: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
Message-ID: <C199FCEB-1966-4259-B011-199529FE4E4F@me.com>


> On Nov 21, 2020, at 10:55 AM, Mario Annau <mario.annau at gmail.com> wrote:
> 
> Hello,
> 
> using the `unsplit()` function with tibbles currently leads to the
> following error:
> 
>> mtcars_tb <- as_tibble(mtcars, rownames = NULL)
>> s <- split(mtcars_tb, mtcars_tb$gear)
>> unsplit(s, mtcars_tb$gear)
> Error: Must subset rows with a valid subscript vector.
> ? Logical subscripts must match the size of the indexed input.
> x Input has size 15 but subscript `rep(NA, len)` has size 32.
> Run `rlang::last_error()` to see where the error occurred.
> 
> Tibble seems to (rightly) complain, that a logical vector has been used for
> subsetting which does not have the same length as the data.frame (rows).
> Since `NA` is a logical value, the subset should be changed to
> `NA_integer_` in `unsplit()`:
> 
>> unsplit
> function (value, f, drop = FALSE)
> {
>    len <- length(if (is.list(f)) f[[1L]] else f)
>    if (is.data.frame(value[[1L]])) {
>        x <- value[[1L]][rep(*NA_integer_*, len), , drop = FALSE]
>        rownames(x) <- unsplit(lapply(value, rownames), f, drop = drop)
>    }
>    else x <- value[[1L]][rep(NA, len)]
>    split(x, f, drop = drop) <- value
>    x
> }
> 
> Cheers,
> Mario


Hi,

Perhaps I am missing something, but if you are using objects, like tibbles, that are intended to be part of another environment, in this case the tidyverse, why would you not use functions to manipulate these objects that were specifically created in the other environment?

I don't use the tidyverse, but it seems to me that to expect base R functions to work with objects not created in base R, is problematic, even though, perhaps by coincidence, they may work without adverse effects, as appears to be the case with split(). 

In other words, you should not, in reality, have had an a priori expectation that split() would work with a tibble either.

Rather than modifying the base R functions, like unsplit(), as you are suggesting, to be compatible with these third party objects, the burden should either be on you to use relevant tidyverse functions, or on the authors of the tidyverse to provide relevant class methods to provide that functionality.

Regards,

Marc Schwartz


From pd@|gd @end|ng |rom gm@||@com  Sat Nov 21 17:50:13 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sat, 21 Nov 2020 17:50:13 +0100
Subject: [Rd] Error in unsplit() with tibbles
In-Reply-To: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
References: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
Message-ID: <1136B0F0-BE55-46F3-9A69-A467BF1E5EC9@gmail.com>

Yes. Nevermind tibbles, the [rep(NA, len),] construction only happens to work because len will always be >= the number of rows in  value[[1L]], witness

> (1:10)[rep(NA, 20)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
> (1:20)[rep(NA, 10)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
> (1:20)[rep(NA_integer_, 10)]
 [1] NA NA NA NA NA NA NA NA NA NA
> (1:10)[rep(NA_integer_, 20)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

-pd


> On 21 Nov 2020, at 16:55 , Mario Annau <mario.annau at gmail.com> wrote:
> 
> Hello,
> 
> using the `unsplit()` function with tibbles currently leads to the
> following error:
> 
>> mtcars_tb <- as_tibble(mtcars, rownames = NULL)
>> s <- split(mtcars_tb, mtcars_tb$gear)
>> unsplit(s, mtcars_tb$gear)
> Error: Must subset rows with a valid subscript vector.
> ? Logical subscripts must match the size of the indexed input.
> x Input has size 15 but subscript `rep(NA, len)` has size 32.
> Run `rlang::last_error()` to see where the error occurred.
> 
> Tibble seems to (rightly) complain, that a logical vector has been used for
> subsetting which does not have the same length as the data.frame (rows).
> Since `NA` is a logical value, the subset should be changed to
> `NA_integer_` in `unsplit()`:
> 
>> unsplit
> function (value, f, drop = FALSE)
> {
>    len <- length(if (is.list(f)) f[[1L]] else f)
>    if (is.data.frame(value[[1L]])) {
>        x <- value[[1L]][rep(*NA_integer_*, len), , drop = FALSE]
>        rownames(x) <- unsplit(lapply(value, rownames), f, drop = drop)
>    }
>    else x <- value[[1L]][rep(NA, len)]
>    split(x, f, drop = drop) <- value
>    x
> }
> 
> Cheers,
> Mario
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sat Nov 21 17:54:04 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sat, 21 Nov 2020 17:54:04 +0100
Subject: [Rd] Error in unsplit() with tibbles
In-Reply-To: <C199FCEB-1966-4259-B011-199529FE4E4F@me.com>
References: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
 <C199FCEB-1966-4259-B011-199529FE4E4F@me.com>
Message-ID: <A9DC4F04-DEEF-42ED-B6DD-6151C53D8EF5@gmail.com>

I get the sentiment, but this is really just bad coding (on my own part, I suspect), so we might as well just fix it...

-pd

> On 21 Nov 2020, at 17:42 , Marc Schwartz via R-devel <r-devel at r-project.org> wrote:
> 
> 
>> On Nov 21, 2020, at 10:55 AM, Mario Annau <mario.annau at gmail.com> wrote:
>> 
>> Hello,
>> 
>> using the `unsplit()` function with tibbles currently leads to the
>> following error:
>> 
>>> mtcars_tb <- as_tibble(mtcars, rownames = NULL)
>>> s <- split(mtcars_tb, mtcars_tb$gear)
>>> unsplit(s, mtcars_tb$gear)
>> Error: Must subset rows with a valid subscript vector.
>> ? Logical subscripts must match the size of the indexed input.
>> x Input has size 15 but subscript `rep(NA, len)` has size 32.
>> Run `rlang::last_error()` to see where the error occurred.
>> 
>> Tibble seems to (rightly) complain, that a logical vector has been used for
>> subsetting which does not have the same length as the data.frame (rows).
>> Since `NA` is a logical value, the subset should be changed to
>> `NA_integer_` in `unsplit()`:
>> 
>>> unsplit
>> function (value, f, drop = FALSE)
>> {
>>   len <- length(if (is.list(f)) f[[1L]] else f)
>>   if (is.data.frame(value[[1L]])) {
>>       x <- value[[1L]][rep(*NA_integer_*, len), , drop = FALSE]
>>       rownames(x) <- unsplit(lapply(value, rownames), f, drop = drop)
>>   }
>>   else x <- value[[1L]][rep(NA, len)]
>>   split(x, f, drop = drop) <- value
>>   x
>> }
>> 
>> Cheers,
>> Mario
> 
> 
> Hi,
> 
> Perhaps I am missing something, but if you are using objects, like tibbles, that are intended to be part of another environment, in this case the tidyverse, why would you not use functions to manipulate these objects that were specifically created in the other environment?
> 
> I don't use the tidyverse, but it seems to me that to expect base R functions to work with objects not created in base R, is problematic, even though, perhaps by coincidence, they may work without adverse effects, as appears to be the case with split(). 
> 
> In other words, you should not, in reality, have had an a priori expectation that split() would work with a tibble either.
> 
> Rather than modifying the base R functions, like unsplit(), as you are suggesting, to be compatible with these third party objects, the burden should either be on you to use relevant tidyverse functions, or on the authors of the tidyverse to provide relevant class methods to provide that functionality.
> 
> Regards,
> 
> Marc Schwartz
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@r|o@@nn@u @end|ng |rom qu@nt@rgo@com  Sat Nov 21 18:04:18 2020
From: m@r|o@@nn@u @end|ng |rom qu@nt@rgo@com (Mario Annau)
Date: Sat, 21 Nov 2020 18:04:18 +0100
Subject: [Rd] Error in unsplit() with tibbles
In-Reply-To: <A9DC4F04-DEEF-42ED-B6DD-6151C53D8EF5@gmail.com>
References: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
 <C199FCEB-1966-4259-B011-199529FE4E4F@me.com>
 <A9DC4F04-DEEF-42ED-B6DD-6151C53D8EF5@gmail.com>
Message-ID: <CACavHJcaVbkrPN-D+irkvc4Nt1k4eY2b-8ypuu+rXnJi_+VinQ@mail.gmail.com>

Cool - thank you Peter!

@Marc: This is really not a tidyverse vs base-R debate and I personally
think that they should both work together for most parts. The common
environment is still R. But just to give you the full picture I also filed
a bug for tibbles (https://github.com/tidyverse/tibble/issues/829). With
these two fixes I think that split/unsplit would work for tibbles and users
(like me) just don't have to care in which "environments" they are working
in.

Cheers,
Mario


On Sat, 21 Nov 2020 at 17:54, Peter Dalgaard <pdalgd at gmail.com> wrote:

> I get the sentiment, but this is really just bad coding (on my own part, I
> suspect), so we might as well just fix it...
>
> -pd
>
> > On 21 Nov 2020, at 17:42 , Marc Schwartz via R-devel <
> r-devel at r-project.org> wrote:
> >
> >
> >> On Nov 21, 2020, at 10:55 AM, Mario Annau <mario.annau at gmail.com>
> wrote:
> >>
> >> Hello,
> >>
> >> using the `unsplit()` function with tibbles currently leads to the
> >> following error:
> >>
> >>> mtcars_tb <- as_tibble(mtcars, rownames = NULL)
> >>> s <- split(mtcars_tb, mtcars_tb$gear)
> >>> unsplit(s, mtcars_tb$gear)
> >> Error: Must subset rows with a valid subscript vector.
> >> ? Logical subscripts must match the size of the indexed input.
> >> x Input has size 15 but subscript `rep(NA, len)` has size 32.
> >> Run `rlang::last_error()` to see where the error occurred.
> >>
> >> Tibble seems to (rightly) complain, that a logical vector has been used
> for
> >> subsetting which does not have the same length as the data.frame (rows).
> >> Since `NA` is a logical value, the subset should be changed to
> >> `NA_integer_` in `unsplit()`:
> >>
> >>> unsplit
> >> function (value, f, drop = FALSE)
> >> {
> >>   len <- length(if (is.list(f)) f[[1L]] else f)
> >>   if (is.data.frame(value[[1L]])) {
> >>       x <- value[[1L]][rep(*NA_integer_*, len), , drop = FALSE]
> >>       rownames(x) <- unsplit(lapply(value, rownames), f, drop = drop)
> >>   }
> >>   else x <- value[[1L]][rep(NA, len)]
> >>   split(x, f, drop = drop) <- value
> >>   x
> >> }
> >>
> >> Cheers,
> >> Mario
> >
> >
> > Hi,
> >
> > Perhaps I am missing something, but if you are using objects, like
> tibbles, that are intended to be part of another environment, in this case
> the tidyverse, why would you not use functions to manipulate these objects
> that were specifically created in the other environment?
> >
> > I don't use the tidyverse, but it seems to me that to expect base R
> functions to work with objects not created in base R, is problematic, even
> though, perhaps by coincidence, they may work without adverse effects, as
> appears to be the case with split().
> >
> > In other words, you should not, in reality, have had an a priori
> expectation that split() would work with a tibble either.
> >
> > Rather than modifying the base R functions, like unsplit(), as you are
> suggesting, to be compatible with these third party objects, the burden
> should either be on you to use relevant tidyverse functions, or on the
> authors of the tidyverse to provide relevant class methods to provide that
> functionality.
> >
> > Regards,
> >
> > Marc Schwartz
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>
>

-- 
Mario Annau
Founder and CEO
Quantargo

Tel: +43 1 348 44 55-11 | mario.annau at quantargo.com
www.quantargo.com

	[[alternative HTML version deleted]]


From m@rc_@chw@rtz @end|ng |rom me@com  Sat Nov 21 18:23:12 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Sat, 21 Nov 2020 12:23:12 -0500
Subject: [Rd] Error in unsplit() with tibbles
In-Reply-To: <CACavHJcaVbkrPN-D+irkvc4Nt1k4eY2b-8ypuu+rXnJi_+VinQ@mail.gmail.com>
References: <CALUQZLy6CSqVQ1WFKbWYg5Lpg0Ws7dM2SJASrVbf84TMqFc9dw@mail.gmail.com>
 <C199FCEB-1966-4259-B011-199529FE4E4F@me.com>
 <A9DC4F04-DEEF-42ED-B6DD-6151C53D8EF5@gmail.com>
 <CACavHJcaVbkrPN-D+irkvc4Nt1k4eY2b-8ypuu+rXnJi_+VinQ@mail.gmail.com>
Message-ID: <6DC80AE1-2233-4BAB-8C2B-065173BD9A63@me.com>

Hi,

Peter, thanks for the clarification.


Mario, I was not looking to debate the pros and cons of each environment, simply to point out that expecting mutually compatible functionality is not generalizable, especially when third party authors can make structural changes to their objects over time, that can then make them incompatible with base R functions, even if they may be today.

That is a key basis for third party packages offering specific class methods, whether S3 or S4, for object classes that are unique to their packages. That approach provides the obvious level of transparency.

For the tidyverse folks to offer a variant of split() and unsplit() that have specific methods for tibbles would seem entirely reasonable, presuming that they don't have a philosophical barrier to doing so, in deference to other approaches that do conform to their preferred function syntax.

Regards,

Marc


> On Nov 21, 2020, at 12:04 PM, Mario Annau <mario.annau at quantargo.com> wrote:
> 
> Cool - thank you Peter!
> 
> @Marc: This is really not a tidyverse vs base-R debate and I personally think that they should both work together for most parts. The common environment is still R. But just to give you the full picture I also filed a bug for tibbles (https://github.com/tidyverse/tibble/issues/829 <https://github.com/tidyverse/tibble/issues/829>). With these two fixes I think that split/unsplit would work for tibbles and users (like me) just don't have to care in which "environments" they are working in.
> 
> Cheers,
> Mario
> 
> 
> On Sat, 21 Nov 2020 at 17:54, Peter Dalgaard <pdalgd at gmail.com <mailto:pdalgd at gmail.com>> wrote:
> I get the sentiment, but this is really just bad coding (on my own part, I suspect), so we might as well just fix it...
> 
> -pd
> 
> > On 21 Nov 2020, at 17:42 , Marc Schwartz via R-devel <r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
> > 
> > 
> >> On Nov 21, 2020, at 10:55 AM, Mario Annau <mario.annau at gmail.com <mailto:mario.annau at gmail.com>> wrote:
> >> 
> >> Hello,
> >> 
> >> using the `unsplit()` function with tibbles currently leads to the
> >> following error:
> >> 
> >>> mtcars_tb <- as_tibble(mtcars, rownames = NULL)
> >>> s <- split(mtcars_tb, mtcars_tb$gear)
> >>> unsplit(s, mtcars_tb$gear)
> >> Error: Must subset rows with a valid subscript vector.
> >> ? Logical subscripts must match the size of the indexed input.
> >> x Input has size 15 but subscript `rep(NA, len)` has size 32.
> >> Run `rlang::last_error()` to see where the error occurred.
> >> 
> >> Tibble seems to (rightly) complain, that a logical vector has been used for
> >> subsetting which does not have the same length as the data.frame (rows).
> >> Since `NA` is a logical value, the subset should be changed to
> >> `NA_integer_` in `unsplit()`:
> >> 
> >>> unsplit
> >> function (value, f, drop = FALSE)
> >> {
> >>   len <- length(if (is.list(f)) f[[1L]] else f)
> >>   if (is.data.frame(value[[1L]])) {
> >>       x <- value[[1L]][rep(*NA_integer_*, len), , drop = FALSE]
> >>       rownames(x) <- unsplit(lapply(value, rownames), f, drop = drop)
> >>   }
> >>   else x <- value[[1L]][rep(NA, len)]
> >>   split(x, f, drop = drop) <- value
> >>   x
> >> }
> >> 
> >> Cheers,
> >> Mario
> > 
> > 
> > Hi,
> > 
> > Perhaps I am missing something, but if you are using objects, like tibbles, that are intended to be part of another environment, in this case the tidyverse, why would you not use functions to manipulate these objects that were specifically created in the other environment?
> > 
> > I don't use the tidyverse, but it seems to me that to expect base R functions to work with objects not created in base R, is problematic, even though, perhaps by coincidence, they may work without adverse effects, as appears to be the case with split(). 
> > 
> > In other words, you should not, in reality, have had an a priori expectation that split() would work with a tibble either.
> > 
> > Rather than modifying the base R functions, like unsplit(), as you are suggesting, to be compatible with these third party objects, the burden should either be on you to use relevant tidyverse functions, or on the authors of the tidyverse to provide relevant class methods to provide that functionality.
> > 
> > Regards,
> > 
> > Marc Schwartz
> > 

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Sat Nov 21 18:51:02 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sat, 21 Nov 2020 19:51:02 +0200
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
Message-ID: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>

Dear R-developers,

Some of the more fat scripts (50+ GB mem used by R) that I am running,
when they finish they do quit with q("no", status=0)
Quite often it happens that there is an extra stderr output produced
at the very end which looks like this:

Warning message:
In .Internal(quit(save, status, runLast)) :
  system call failed: Cannot allocate memory

Is there any way to avoid this kind of warnings? I am using stderr
output for detecting failures in scripts and this warning is a false
positive of a failure.

Maybe quit function could wait little bit longer trying to allocate
before it raises this warning?

Best regards,
Jan Gorecki


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Nov 21 20:40:12 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 21 Nov 2020 14:40:12 -0500
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
Message-ID: <658979c3-f901-71d7-abb0-5e0588ea148e@gmail.com>

On 21/11/2020 12:51 p.m., Jan Gorecki wrote:
> Dear R-developers,
> 
> Some of the more fat scripts (50+ GB mem used by R) that I am running,
> when they finish they do quit with q("no", status=0)
> Quite often it happens that there is an extra stderr output produced
> at the very end which looks like this:
> 
> Warning message:
> In .Internal(quit(save, status, runLast)) :
>    system call failed: Cannot allocate memory
> 
> Is there any way to avoid this kind of warnings? I am using stderr
> output for detecting failures in scripts and this warning is a false
> positive of a failure.
> 
> Maybe quit function could wait little bit longer trying to allocate
> before it raises this warning?

I don't know what waiting would accomplish.  Generally speaking the 
allocation functions in R will try garbage collection before failing, so 
it looks like you are in a situation where there really is no memory 
available.  (I think code can prevent gc; maybe your code is doing that 
and not re-enabling it?)

Having a reproducible example would help, but I imagine it's not easy to 
put one together.

Duncan Murdoch


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Nov 21 23:57:03 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sat, 21 Nov 2020 16:57:03 -0600 (CST)
Subject: [Rd] [External]  Two ALTREP questions
In-Reply-To: <CAGiFhPNDvLFawx3VKV=wnSF_mNEqa-Fq-OJVxOT-SpvX=DcDsA@mail.gmail.com>
References: <CAGiFhPNDvLFawx3VKV=wnSF_mNEqa-Fq-OJVxOT-SpvX=DcDsA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2011211640280.3116@luke-Latitude-7480>

On Sat, 21 Nov 2020, Jiefei Wang wrote:

> Hello,
>
> I have two related ALTREP questions. It seems like there is no way to
> assign attributes to an ALTREP vector without using C++ code. To be more
> specifically, I want to make an ALTREP matrix, I have tried the following R
> code but none of them work.
> ```
> .Internal(inspect(1:6))
> .Internal(inspect(matrix(1:6, 2,3)))
> .Internal(inspect(as.matrix(1:6)))
> .Internal(inspect(structure(1:6, dim = c(2L,3L))))
> .Internal(inspect({x <- 1:6;attr(x, "dim") <- c(2L,3L);x}))
> .Internal(inspect({x <- 1:6;attributes(x)<- list(dim = c(2L,3L));x}))
> ```

Some things that my help you:

- Try with 1:6 replaced by as.character(1:6), and look at the REF
   values in both cases.

- In particular, look at what this gives you:

     x <- as.character(1:6)
     attr(x, "dim") <- c(2, 3)

- Things can be a little different with larger vectors; try variants
   of your examples for more than 64 elements.

> This also brings
> my second question, it seems like the ALTREP coercion function does not
> handle attributes correctly.  After the coercion, the ALTREP object will
> lose its attributes.
> ```
> coerceFunc <- inline::cxxfunction( signature(x = "SEXP", attr = "SEXP" ) , '
> SET_ATTRIB(x,attr);
> return(Rf_coerceVector(x, REALSXP));
> ')
>> coerceFunc(1:6, pairlist(dim = c(2L, 3L)))
> [1] 1 2 3 4 5 6
>> coerceFunc(1:6 + 0L, pairlist(dim = c(2L, 3L)))
>     [,1] [,2] [,3]
> [1,]    1    3    5
> [2,]    2    4    6
> ```
> The problem is that the coercion function is directly dispatched to the
> user-defined ALTREP coercion function, so the user is responsible to attach
> the attributes after the coercion. If he forgets to do so, then the result
> is a plain vector. Similar to the `Duplicate` and `DuplicateEX` functions
> where the former one will attach the attributes by default, I feel that the
> `Coerce` function should only return a plain vector and there should be a
> `CoerceEx` function to do the attribute assignment, so the logic in the
> no-EX ALTREP functions can be consistent. I do not know how dramastic the
> change would be, so maybe this is too hard to do.

Since you raised this earlier I have been looking at it and also think
that this needs to he handled along the lines of
Duplicate/DuplicateEx. I need to find some time to think that through
and implement it; hopefully I'll get to it before the end of the year.

> BTW, is there any way to contribute to the R source? I know R has a limited
> resouces, so if possible, I will be happy to fix the matrix issue myself
> and make some minor contributions to the R community.

You can find the suggested process for contributing described in the
'Reporting Bugs' link on the R home page https://www.r-project.org/

Best,

luke

> Best,
> Jiefei
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @zwj|08 @end|ng |rom gm@||@com  Sun Nov 22 04:27:49 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sun, 22 Nov 2020 11:27:49 +0800
Subject: [Rd] [External]  Two ALTREP questions
In-Reply-To: <alpine.DEB.2.21.2011211640280.3116@luke-Latitude-7480>
References: <CAGiFhPNDvLFawx3VKV=wnSF_mNEqa-Fq-OJVxOT-SpvX=DcDsA@mail.gmail.com>
 <alpine.DEB.2.21.2011211640280.3116@luke-Latitude-7480>
Message-ID: <CAGiFhPOeVEsXnid8gZPk+OURx=t9Kv8YFFp_ZqdyKnX6+oPPkw@mail.gmail.com>

Thank Dirk and Luke for the answers!

(That's C code. The confusion here is partly our fault. When Romain and I
> extended the inline package with 'cxxfunction' to support the then-young
> but
> active Rcpp package, we picked C++. Strictly speaking that isn't required;
> you are only in C++ here because ... "it made sense to us 10 years ago" and
> it could generalized to C++ or C.  All ALTREP is, of course, purely C as it
> is an R API.)


Sometimes I forget to distinguish C/C++ code. Yes, this should be C code
and it is just C++ compatible.
Anyway, `inline` is a great package, `cxxfunction` makes life much easier
for reporting the low-level problem to the devel team.

- Try with 1:6 replaced by as.character(1:6), and look at the REF
>    values in both cases.
> - In particular, look at what this gives you:
>      x <- as.character(1:6)
>      attr(x, "dim") <- c(2, 3)
> - Things can be a little different with larger vectors; try variants
>    of your examples for more than 64 elements.


I see why we cannot change the attribute of the compact sequence(It is
shared, or at least marked as shared)
and the use of the wrapper for the large vector. Only the matrix function
needs to be patched.

The generally recommended way is via a bug report at bugs.r-project.org


You can find the suggested process for contributing described in the
> 'Reporting Bugs' link on the R home page https://www.r-project.org/


Bugzilla sounds like a good place to start, I will send an email to acquire
an account.

Best,
Jiefei


On Sun, Nov 22, 2020 at 6:57 AM <luke-tierney at uiowa.edu> wrote:

> On Sat, 21 Nov 2020, Jiefei Wang wrote:
>
> > Hello,
> >
> > I have two related ALTREP questions. It seems like there is no way to
> > assign attributes to an ALTREP vector without using C++ code. To be more
> > specifically, I want to make an ALTREP matrix, I have tried the
> following R
> > code but none of them work.
> > ```
> > .Internal(inspect(1:6))
> > .Internal(inspect(matrix(1:6, 2,3)))
> > .Internal(inspect(as.matrix(1:6)))
> > .Internal(inspect(structure(1:6, dim = c(2L,3L))))
> > .Internal(inspect({x <- 1:6;attr(x, "dim") <- c(2L,3L);x}))
> > .Internal(inspect({x <- 1:6;attributes(x)<- list(dim = c(2L,3L));x}))
> > ```
>
> Some things that my help you:
>
> - Try with 1:6 replaced by as.character(1:6), and look at the REF
>    values in both cases.
>
> - In particular, look at what this gives you:
>
>      x <- as.character(1:6)
>      attr(x, "dim") <- c(2, 3)
>
> - Things can be a little different with larger vectors; try variants
>    of your examples for more than 64 elements.
>
> > This also brings
> > my second question, it seems like the ALTREP coercion function does not
> > handle attributes correctly.  After the coercion, the ALTREP object will
> > lose its attributes.
> > ```
> > coerceFunc <- inline::cxxfunction( signature(x = "SEXP", attr = "SEXP" )
> , '
> > SET_ATTRIB(x,attr);
> > return(Rf_coerceVector(x, REALSXP));
> > ')
> >> coerceFunc(1:6, pairlist(dim = c(2L, 3L)))
> > [1] 1 2 3 4 5 6
> >> coerceFunc(1:6 + 0L, pairlist(dim = c(2L, 3L)))
> >     [,1] [,2] [,3]
> > [1,]    1    3    5
> > [2,]    2    4    6
> > ```
> > The problem is that the coercion function is directly dispatched to the
> > user-defined ALTREP coercion function, so the user is responsible to
> attach
> > the attributes after the coercion. If he forgets to do so, then the
> result
> > is a plain vector. Similar to the `Duplicate` and `DuplicateEX` functions
> > where the former one will attach the attributes by default, I feel that
> the
> > `Coerce` function should only return a plain vector and there should be a
> > `CoerceEx` function to do the attribute assignment, so the logic in the
> > no-EX ALTREP functions can be consistent. I do not know how dramastic the
> > change would be, so maybe this is too hard to do.
>
> Since you raised this earlier I have been looking at it and also think
> that this needs to he handled along the lines of
> Duplicate/DuplicateEx. I need to find some time to think that through
> and implement it; hopefully I'll get to it before the end of the year.
>
> > BTW, is there any way to contribute to the R source? I know R has a
> limited
> > resouces, so if possible, I will be happy to fix the matrix issue myself
> > and make some minor contributions to the R community.
>
> You can find the suggested process for contributing described in the
> 'Reporting Bugs' link on the R home page https://www.r-project.org/
>
> Best,
>
> luke
>
> > Best,
> > Jiefei
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

	[[alternative HTML version deleted]]


From dmedr| @end|ng |rom gm@||@com  Sun Nov 22 11:53:02 2020
From: dmedr| @end|ng |rom gm@||@com (Daniele Medri)
Date: Sun, 22 Nov 2020 11:53:02 +0100
Subject: [Rd] R - translations status and few notes
Message-ID: <c11f5692cdb4fbab1b5037be56d0b368160556a5.camel@gmail.com>

Dear R users/devs,

TL;TR

This is a translations status for R. Since I've revisited my own work
in a github repo, I think some notes could be useful to other
maintainers.

## Status

The supported languages for "base": da, de, en, en_GB, es, fa, fr, it,
ja, ko, nn, pl, pt_BR, ru, tr, zh_CN, zh_TW. Any single file is quite
close to be completed (# of translated labels), but some technical
long-standing mistakes (at least ~6+ months) are blocking their
installation or need some love. Just to name few...

1. in "base":

po/R-de.po:863
unrecognised format specification '%'
Package %s version %s cannot be unloaded:\n %s
Paket %s Version %s kann nicht entladen werden\n%s%

po/R-de.po:1271
too few entries
No generic function %s found corresponding to requested imported
methods from package %s when loading %s (malformed exports?)
Keine generische Funktion, die mit der angeforderten Importmethode
f<U+00FC>r\n%s aus Paket %s korrespondiert, gefunden (Fehler in
Exports?)
not installing

2. on all packages for .da (easy to fix):

po/R-da.po:2: warning: header field 'Language-Team' still has the
initial default value



## An easy solution to update/test (R and..) translations

# A working translation repo

My reference for this task is a Debian Linux distribution (install the
required packages if not already available).

'''
$ git clone https://github.com/dmedri/R-italian-lang
$ cp -a R-italian-lang R-german-lang
$ cd R-german-lang/
$ vi repo.conf
'''

change the LANG variable to fit your language (eg. "de"), save and
exit. Now copy your .po files in "R-4-0-BRANCH" directory, following
the existing paths.

Now, the scripts.

1. Create archives:

'''
$ ./repo.archives
'''

To help Martin Maechler work -- my reference for the task, the script
create archives ready for commits.

2. Search for a term:

'''
$ ./repo.search "not available"
'''

If you need to search an original label or a translated one.

3. Cleanup all unneeded files:

'''
$ ./repo.clean
'''

Remove spurious files in the repo directory (.mo files, archives
directory, and so on).

4. Test the new translations:

I did a tool, the "roaster", a bash-prototype to build-update R online
(see. the repo infos for more). Since this app have its own directory
for builds, everything goes here and will be propagated build-after-
build.

$ cd ..
$ git clone https://github.com/dmedri/roaster
$ cd roaster/
$ ./roaster --build-standard

If you don't want to overwrite your existing R bin, you could try the
"virtual environments" -- conceptually similar to the Python virtualenv
(see. the repo docs for more infos):

$ ./roaster --build-virtualenv

Now, to install and test your translations:

$ cd ../R-german-lang/
$ ./repo.roaster

The output will be quite similar to the status-report attached.


HTH

Best Wishes
-- 
DM

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: rlang-status-18nov2020.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20201122/f2310c99/attachment.txt>

From @ndre@@@|romkorth @end|ng |rom @tegm@nn@y@tem@@com  Mon Nov 23 08:38:05 2020
From: @ndre@@@|romkorth @end|ng |rom @tegm@nn@y@tem@@com (Andreas Fromkorth)
Date: Mon, 23 Nov 2020 07:38:05 +0000
Subject: [Rd] Different results from 'lm' for different 32-bit Windows
 versions
References: <f561592c-3384-4e42-8e0c-4918b269cc9d.5598fc88-062d-4cdd-8ef7-0f0095d12a9a.9f270cf5-8201-4ef8-a76d-f0ea03c63876@emailsignatures365.codetwo.com>
Message-ID: <AM9PR07MB769778CF7A4164C0E70F718DF6FC0@AM9PR07MB7697.eurprd07.prod.outlook.com>

Hello,

I recently stumbled upon the fact that different 32-bit R Windows versions produce slightly different results when calling 'lm'. More precisely, this seems to be caused by a change in the transition from R 3.2.x to R 3.3.0.

A minimal example, for reproducing this is "lm(y~x, data.frame(x=c(1,2,3), y=c(1,2,3)))".

In R 3.3.0 the result is
Call:
lm(formula = y ~ x, data = data.frame(x = c(1, 2, 3), y = c(1,
    2, 3)))

Coefficients:
(Intercept)            x

0                     1

In R 3.2.4 Revised on gets the result
Call:
lm(formula = y ~ x, data = data.frame(x = c(1, 2, 3), y = c(1,
    2, 3)))

Coefficients:
(Intercept)            x
-4.441e-16    1.000e+00

Both versions behave identically until the call C_Cdqrls in the fit.lm function. What causes this changed behavior?

Best regards,

Andreas Fromkorth.
Next PLA 3.0 Trainings (Business classes): www.bioassay.de/training <http://www.bioassay.de/training>
_____________________________________________________
Dr. Andreas Fromkorth
Project Manager
andreas.fromkorth at stegmannsystems.com

Stegmann Systems GmbH, Raiffeisenstr. 2, 63110 Rodgau, Germany
Fon: +49 (6106) 77010-0, Direct: +49 (6106) 77010-213, Fax: +49 (6106) 77010-190
Handelsregister/Commercial Register Offenbach HRB 43033
Gesch?ftsf?hrer/CEO: Dr. Ralf Stegmann

Pick a product: APS 2.10<https://www.aps-info.de/?utm_source=signatur&amp;utm_medium=email&amp;utm_campaign=E-Mail-Signatur> | PLA 3.0<https://www.bioassay.de/?utm_source=signatur&amp;utm_medium=email&amp;utm_campaign=E-Mail-Signatur>
www.stegmannsystems.com<https://www.stegmannsystems.com/?utm_source=signatur&amp;utm_medium=email&amp;utm_campaign=E-Mail-Signatur>
Follow us on LinkedIn<https://www.linkedin.com/company/stegmann-systems-gmbh>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Nov 23 12:14:52 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 23 Nov 2020 12:14:52 +0100
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
Message-ID: <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>

On 11/21/20 6:51 PM, Jan Gorecki wrote:
> Dear R-developers,
>
> Some of the more fat scripts (50+ GB mem used by R) that I am running,
> when they finish they do quit with q("no", status=0)
> Quite often it happens that there is an extra stderr output produced
> at the very end which looks like this:
>
> Warning message:
> In .Internal(quit(save, status, runLast)) :
>    system call failed: Cannot allocate memory
>
> Is there any way to avoid this kind of warnings? I am using stderr
> output for detecting failures in scripts and this warning is a false
> positive of a failure.
>
> Maybe quit function could wait little bit longer trying to allocate
> before it raises this warning?

If you see this warning, some call to system() or system2() or similar, 
which executes an external program, failed to even run a shell to run 
that external program, because there was not enough memory. You should 
be able to find out where it happens by checking the exit status of 
system().

Tomas


>
> Best regards,
> Jan Gorecki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From greg @end|ng |rom w@rne@@net  Mon Nov 23 16:04:03 2020
From: greg @end|ng |rom w@rne@@net (Gregory Warnes)
Date: Mon, 23 Nov 2020 10:04:03 -0500
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
Message-ID: <CAKorm_u6wn_TF3k28+L7U2=6Lr0XhWTtBXgOOthNuu21ZQ=+dA@mail.gmail.com>

Try explicitly deleting large data objects by calling `rm`, then `gc`.


On Mon, Nov 23, 2020 at 6:15 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 11/21/20 6:51 PM, Jan Gorecki wrote:
> > Dear R-developers,
> >
> > Some of the more fat scripts (50+ GB mem used by R) that I am running,
> > when they finish they do quit with q("no", status=0)
> > Quite often it happens that there is an extra stderr output produced
> > at the very end which looks like this:
> >
> > Warning message:
> > In .Internal(quit(save, status, runLast)) :
> >    system call failed: Cannot allocate memory
> >
> > Is there any way to avoid this kind of warnings? I am using stderr
> > output for detecting failures in scripts and this warning is a false
> > positive of a failure.
> >
> > Maybe quit function could wait little bit longer trying to allocate
> > before it raises this warning?
>
> If you see this warning, some call to system() or system2() or similar,
> which executes an external program, failed to even run a shell to run
> that external program, because there was not enough memory. You should
> be able to find out where it happens by checking the exit status of
> system().
>
> Tomas
>
>
> >
> > Best regards,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
"Whereas true religion and good morals are the only solid foundations of
public liberty and happiness . . . it is hereby earnestly recommended to
the several States to take the most effectual measures for the
encouragement thereof." Continental Congress, 1778

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Mon Nov 23 18:10:34 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Mon, 23 Nov 2020 09:10:34 -0800
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
Message-ID: <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>

The call to system() probably is an internal call used to delete the
session's tempdir().  This sort of failure means that a potentially large
amount of disk space is not being recovered when R is done.  Perhaps
R_CleanTempDir() could call R_unlink() instead of having a subprocess call
'rm -rf ...'.  Then it could also issue a specific warning if it was
impossible to delete all of tempdir().  (That should be very rare.)

> q("no")
Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf
/tmp/RtmppoKPXb") at sysutils.c:311
311     {
(gdb) where
#0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf
/tmp/RtmppoKPXb") at sysutils.c:311
#1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
#2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0,
runLast=<optimized out>) at sys-std.c:1243
#3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE,
status=status at entry=0, runLast=<optimized out>) at system.c:87
#4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized
out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393

-Bill

On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 11/21/20 6:51 PM, Jan Gorecki wrote:
> > Dear R-developers,
> >
> > Some of the more fat scripts (50+ GB mem used by R) that I am running,
> > when they finish they do quit with q("no", status=0)
> > Quite often it happens that there is an extra stderr output produced
> > at the very end which looks like this:
> >
> > Warning message:
> > In .Internal(quit(save, status, runLast)) :
> >    system call failed: Cannot allocate memory
> >
> > Is there any way to avoid this kind of warnings? I am using stderr
> > output for detecting failures in scripts and this warning is a false
> > positive of a failure.
> >
> > Maybe quit function could wait little bit longer trying to allocate
> > before it raises this warning?
>
> If you see this warning, some call to system() or system2() or similar,
> which executes an external program, failed to even run a shell to run
> that external program, because there was not enough memory. You should
> be able to find out where it happens by checking the exit status of
> system().
>
> Tomas
>
>
> >
> > Best regards,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat Nov 21 14:44:15 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 21 Nov 2020 07:44:15 -0600
Subject: [Rd] Two ALTREP questions
In-Reply-To: <CAGiFhPNDvLFawx3VKV=wnSF_mNEqa-Fq-OJVxOT-SpvX=DcDsA@mail.gmail.com>
References: <CAGiFhPNDvLFawx3VKV=wnSF_mNEqa-Fq-OJVxOT-SpvX=DcDsA@mail.gmail.com>
Message-ID: <24505.6575.239392.336583-7892@rob.eddelbuettel.com>



On 21 November 2020 at 20:56, Jiefei Wang wrote:
| Hello,
| 
| I have two related ALTREP questions. It seems like there is no way to
| assign attributes to an ALTREP vector without using C++ code. To be more
| specifically, I want to make an ALTREP matrix, I have tried the following R
| code but none of them work.
| ```
| .Internal(inspect(1:6))
| .Internal(inspect(matrix(1:6, 2,3)))
| .Internal(inspect(as.matrix(1:6)))
| .Internal(inspect(structure(1:6, dim = c(2L,3L))))
| .Internal(inspect({x <- 1:6;attr(x, "dim") <- c(2L,3L);x}))
| .Internal(inspect({x <- 1:6;attributes(x)<- list(dim = c(2L,3L));x}))
| ```
| 
| The only way to make an ALTREP matrix is to use the C level function
| ```
| attachAttrib <- inline::cxxfunction( signature(x = "SEXP", attr = "SEXP" )
| , '
| SET_ATTRIB(x,attr);
| return(R_NilValue);
| ')
| x <- 1:6
| attachAttrib(x, pairlist(dim = c(2L, 3L)))
| .Internal(inspect(x))
| ```

(That's C code. The confusion here is partly our fault. When Romain and I
extended the inline package with 'cxxfunction' to support the then-young but
active Rcpp package, we picked C++. Strictly speaking that isn't required;
you are only in C++ here because ... "it made sense to us 10 years ago" and
it could generalized to C++ or C.  All ALTREP is, of course, purely C as it
is an R API.)
 
| Since the matrix, or adding attributes, is a common need for the object
| operation, I wonder if this missing feature is intended? This also brings
| my second question, it seems like the ALTREP coercion function does not
| handle attributes correctly.  After the coercion, the ALTREP object will
| lose its attributes.
| ```
| coerceFunc <- inline::cxxfunction( signature(x = "SEXP", attr = "SEXP" ) , '
| SET_ATTRIB(x,attr);
| return(Rf_coerceVector(x, REALSXP));
| ')
| > coerceFunc(1:6, pairlist(dim = c(2L, 3L)))
| [1] 1 2 3 4 5 6
| > coerceFunc(1:6 + 0L, pairlist(dim = c(2L, 3L)))
|      [,1] [,2] [,3]
| [1,]    1    3    5
| [2,]    2    4    6
| ```
| The problem is that the coercion function is directly dispatched to the
| user-defined ALTREP coercion function, so the user is responsible to attach
| the attributes after the coercion. If he forgets to do so, then the result
| is a plain vector. Similar to the `Duplicate` and `DuplicateEX` functions
| where the former one will attach the attributes by default, I feel that the
| `Coerce` function should only return a plain vector and there should be a
| `CoerceEx` function to do the attribute assignment, so the logic in the
| no-EX ALTREP functions can be consistent. I do not know how dramastic the
| change would be, so maybe this is too hard to do.
| 
| BTW, is there any way to contribute to the R source? I know R has a limited
| resouces, so if possible, I will be happy to fix the matrix issue myself
| and make some minor contributions to the R community.

Yes. The generally recommended way is via a bug report at bugs.r-project.org
(for which you need an account there, and I always forget who the account
creation gatekeeper is ...) preferably with a patch. You effectively need an
R Core "sponsor" as someone has to actually put the code into R base.  So for
"everything else" the recommendation generally is to go via a package. Maybe
the easier route for you is to bundle a few ALTREP helper functions first?

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From iuke-tier@ey m@iii@g oii uiow@@edu  Mon Nov 23 21:50:54 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Mon, 23 Nov 2020 14:50:54 -0600 (CST)
Subject: [Rd] [External]  exists,
 get and get0 accept silently inputs of length > 1
In-Reply-To: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
References: <CAEKh8uhYFh5J_m1UjU1jqqR=fsA-MeS+OYDHTbAJGRYk9mmdiA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2011231448190.3003@luke-Latitude-7480>

Thanks for the suggestion.

In R-devel (as of r79474) exists(), get(), and get0() now signal an
error if the first argument has length > 1. This will cause about 30
CRAN packages and possibly a couple of Bioconductor packages to fail
under R-devel.

getS3method() now also signals an error if the class argument has
length > 1. Calls of the form getS2method(generic, class(x)) will now
fail if class(x) has length > 1. I believe most CRAN package issues
related to this change have already been resolved, but a few may
remain.

Best,

luke

On Fri, 13 Nov 2020, Antoine Fabri wrote:

> Dear R-devel,
>
> The doc of exists, get and get0 is unambiguous, x should be an object given
> as a character string. However these accept longer inputs. It can lead an
> uncareful user to think these functions are vectorized when they're not,
> and generally lets through bugs that one might have preferred to trigger
> earlier failure.
>
> ``` r
> exists("d")
> #> [1] FALSE
> exists(c("c", "d"))
> #> [1] TRUE
> get(c("c", "d"))
> #> function (...)  .Primitive("c")
> get0(c("c", "d"))
> #> function (...)  .Primitive("c")
> ```
>
> I believe these should either fail, or be vectorized, probably the former.
>
> Thanks,
>
> Antoine
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From j@goreck| @end|ng |rom w|t@edu@p|  Tue Nov 24 11:27:02 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Tue, 24 Nov 2020 12:27:02 +0200
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
 <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
Message-ID: <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>

Thanks Bill for checking that.
It was my impression that warnings are raised from some internal
system calls made when quitting R. At that point I don't have much
control over checking the return status of those.
Your suggestion looks good to me.

Tomas, do you think this could help? could this be implemented?

On Mon, Nov 23, 2020 at 7:10 PM Bill Dunlap <williamwdunlap at gmail.com> wrote:
>
> The call to system() probably is an internal call used to delete the session's tempdir().  This sort of failure means that a potentially large amount of disk space is not being recovered when R is done.  Perhaps R_CleanTempDir() could call R_unlink() instead of having a subprocess call 'rm -rf ...'.  Then it could also issue a specific warning if it was impossible to delete all of tempdir().  (That should be very rare.)
>
> > q("no")
> Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
> 311     {
> (gdb) where
> #0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
> #1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
> #2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0, runLast=<optimized out>) at sys-std.c:1243
> #3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE, status=status at entry=0, runLast=<optimized out>) at system.c:87
> #4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393
>
> -Bill
>
> On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> On 11/21/20 6:51 PM, Jan Gorecki wrote:
>> > Dear R-developers,
>> >
>> > Some of the more fat scripts (50+ GB mem used by R) that I am running,
>> > when they finish they do quit with q("no", status=0)
>> > Quite often it happens that there is an extra stderr output produced
>> > at the very end which looks like this:
>> >
>> > Warning message:
>> > In .Internal(quit(save, status, runLast)) :
>> >    system call failed: Cannot allocate memory
>> >
>> > Is there any way to avoid this kind of warnings? I am using stderr
>> > output for detecting failures in scripts and this warning is a false
>> > positive of a failure.
>> >
>> > Maybe quit function could wait little bit longer trying to allocate
>> > before it raises this warning?
>>
>> If you see this warning, some call to system() or system2() or similar,
>> which executes an external program, failed to even run a shell to run
>> that external program, because there was not enough memory. You should
>> be able to find out where it happens by checking the exit status of
>> system().
>>
>> Tomas
>>
>>
>> >
>> > Best regards,
>> > Jan Gorecki
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Nov 24 12:05:54 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 24 Nov 2020 12:05:54 +0100
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
 <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
 <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>
Message-ID: <cf311324-cc24-4ccc-c4df-b0fcc152cd86@gmail.com>

On 11/24/20 11:27 AM, Jan Gorecki wrote:
> Thanks Bill for checking that.
> It was my impression that warnings are raised from some internal
> system calls made when quitting R. At that point I don't have much
> control over checking the return status of those.
> Your suggestion looks good to me.
>
> Tomas, do you think this could help? could this be implemented?

I think this is a good suggestion. Deleting files on Unix was changed 
from system("rm") to doing that in C, and deleting the session directory 
should follow.

It might also help diagnosing your problem, but I don't think it would 
solve it. If the diagnostics in R works fine and the OS was so 
hopelessly out of memory that it couldn't run any more external 
processes, then really this is not a problem of R, but of having 
exhausted the resources. And it would be a coincidence that just this 
particular call to "system" at the end of the session did not work. 
Anything else could break as well close to the end of the script. This 
seems the most likely explanation to me.

Do you get this warning repeatedly, reproducibly at least in slightly 
different scripts at the very end, with this warning always from quit()? 
So that the "call" part of the warning message has .Internal(quit) like 
in the case you posted? Would adding another call to "system" before the 
call to "q()" work - with checking the return value? If it is always 
only the last call to "system" in "q()", then it is suspicious, perhaps 
an indication that some diagnostics in R is not correct. In that case, a 
reproducible example would be the key - so either if you could diagnose 
on your end what is the problem, or create a reproducible example that 
someone else can use to reproduce and debug.

Best
Tomas

>
> On Mon, Nov 23, 2020 at 7:10 PM Bill Dunlap <williamwdunlap at gmail.com> wrote:
>> The call to system() probably is an internal call used to delete the session's tempdir().  This sort of failure means that a potentially large amount of disk space is not being recovered when R is done.  Perhaps R_CleanTempDir() could call R_unlink() instead of having a subprocess call 'rm -rf ...'.  Then it could also issue a specific warning if it was impossible to delete all of tempdir().  (That should be very rare.)
>>
>>> q("no")
>> Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
>> 311     {
>> (gdb) where
>> #0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
>> #1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
>> #2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0, runLast=<optimized out>) at sys-std.c:1243
>> #3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE, status=status at entry=0, runLast=<optimized out>) at system.c:87
>> #4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393
>>
>> -Bill
>>
>> On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>> On 11/21/20 6:51 PM, Jan Gorecki wrote:
>>>> Dear R-developers,
>>>>
>>>> Some of the more fat scripts (50+ GB mem used by R) that I am running,
>>>> when they finish they do quit with q("no", status=0)
>>>> Quite often it happens that there is an extra stderr output produced
>>>> at the very end which looks like this:
>>>>
>>>> Warning message:
>>>> In .Internal(quit(save, status, runLast)) :
>>>>     system call failed: Cannot allocate memory
>>>>
>>>> Is there any way to avoid this kind of warnings? I am using stderr
>>>> output for detecting failures in scripts and this warning is a false
>>>> positive of a failure.
>>>>
>>>> Maybe quit function could wait little bit longer trying to allocate
>>>> before it raises this warning?
>>> If you see this warning, some call to system() or system2() or similar,
>>> which executes an external program, failed to even run a shell to run
>>> that external program, because there was not enough memory. You should
>>> be able to find out where it happens by checking the exit status of
>>> system().
>>>
>>> Tomas
>>>
>>>
>>>> Best regards,
>>>> Jan Gorecki
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@goreck| @end|ng |rom w|t@edu@p|  Tue Nov 24 15:48:54 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Tue, 24 Nov 2020 16:48:54 +0200
Subject: [Rd] .Internal(quit(...)): system call failed: Cannot allocate
 memory
In-Reply-To: <cf311324-cc24-4ccc-c4df-b0fcc152cd86@gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
 <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
 <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>
 <cf311324-cc24-4ccc-c4df-b0fcc152cd86@gmail.com>
Message-ID: <CAOO9MKWXVEv+LX_CdpA+WOP52zhPH30U23ZaZb8LLNncT1aYeg@mail.gmail.com>

As for other calls to system. I avoid calling system. In the past I
had some (to get memory stats from OS), but they were failing with
exactly the same issue. So yes, if I would add call to system before
calling quit, I believe it would fail with the same error.
At the same time I think (although I am not sure) that new allocations
made in R are working fine. So R seems to reserve some memory and can
continue to operate, while external call like system will fail. Maybe
it is like this by design, don't know.

Aside from this problem that is easy to report due to the warning
message, I think that gc() is choking at the same time. I tried to
make reproducible example for that, multiple times but couldn't, let
me try one more time.
It happens to manifest when there is 4e8+ unique characters/factors in
an R session. I am able to reproduce it using data.table and dplyr
(0.8.4 because 1.0.0+ fails even sooner), but using base R is not easy
because of the size. I described briefly problem in:
https://github.com/h2oai/db-benchmark/issues/110

It would help if gcinfo() could take FALSE/TRUE/2L where 2L will print
even more information about gc, like how much time the each gc()
process took, how many objects it has to check on each level.

Best regards,
Jan



On Tue, Nov 24, 2020 at 1:05 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 11/24/20 11:27 AM, Jan Gorecki wrote:
> > Thanks Bill for checking that.
> > It was my impression that warnings are raised from some internal
> > system calls made when quitting R. At that point I don't have much
> > control over checking the return status of those.
> > Your suggestion looks good to me.
> >
> > Tomas, do you think this could help? could this be implemented?
>
> I think this is a good suggestion. Deleting files on Unix was changed
> from system("rm") to doing that in C, and deleting the session directory
> should follow.
>
> It might also help diagnosing your problem, but I don't think it would
> solve it. If the diagnostics in R works fine and the OS was so
> hopelessly out of memory that it couldn't run any more external
> processes, then really this is not a problem of R, but of having
> exhausted the resources. And it would be a coincidence that just this
> particular call to "system" at the end of the session did not work.
> Anything else could break as well close to the end of the script. This
> seems the most likely explanation to me.
>
> Do you get this warning repeatedly, reproducibly at least in slightly
> different scripts at the very end, with this warning always from quit()?
> So that the "call" part of the warning message has .Internal(quit) like
> in the case you posted? Would adding another call to "system" before the
> call to "q()" work - with checking the return value? If it is always
> only the last call to "system" in "q()", then it is suspicious, perhaps
> an indication that some diagnostics in R is not correct. In that case, a
> reproducible example would be the key - so either if you could diagnose
> on your end what is the problem, or create a reproducible example that
> someone else can use to reproduce and debug.
>
> Best
> Tomas
>
> >
> > On Mon, Nov 23, 2020 at 7:10 PM Bill Dunlap <williamwdunlap at gmail.com> wrote:
> >> The call to system() probably is an internal call used to delete the session's tempdir().  This sort of failure means that a potentially large amount of disk space is not being recovered when R is done.  Perhaps R_CleanTempDir() could call R_unlink() instead of having a subprocess call 'rm -rf ...'.  Then it could also issue a specific warning if it was impossible to delete all of tempdir().  (That should be very rare.)
> >>
> >>> q("no")
> >> Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
> >> 311     {
> >> (gdb) where
> >> #0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
> >> #1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
> >> #2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0, runLast=<optimized out>) at sys-std.c:1243
> >> #3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE, status=status at entry=0, runLast=<optimized out>) at system.c:87
> >> #4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393
> >>
> >> -Bill
> >>
> >> On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>> On 11/21/20 6:51 PM, Jan Gorecki wrote:
> >>>> Dear R-developers,
> >>>>
> >>>> Some of the more fat scripts (50+ GB mem used by R) that I am running,
> >>>> when they finish they do quit with q("no", status=0)
> >>>> Quite often it happens that there is an extra stderr output produced
> >>>> at the very end which looks like this:
> >>>>
> >>>> Warning message:
> >>>> In .Internal(quit(save, status, runLast)) :
> >>>>     system call failed: Cannot allocate memory
> >>>>
> >>>> Is there any way to avoid this kind of warnings? I am using stderr
> >>>> output for detecting failures in scripts and this warning is a false
> >>>> positive of a failure.
> >>>>
> >>>> Maybe quit function could wait little bit longer trying to allocate
> >>>> before it raises this warning?
> >>> If you see this warning, some call to system() or system2() or similar,
> >>> which executes an external program, failed to even run a shell to run
> >>> that external program, because there was not enough memory. You should
> >>> be able to find out where it happens by checking the exit status of
> >>> system().
> >>>
> >>> Tomas
> >>>
> >>>
> >>>> Best regards,
> >>>> Jan Gorecki
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Nov 25 21:38:54 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 25 Nov 2020 14:38:54 -0600 (CST)
Subject: [Rd] [External] Re: .Internal(quit(...)): system call failed:
 Cannot allocate memory
In-Reply-To: <CAOO9MKWXVEv+LX_CdpA+WOP52zhPH30U23ZaZb8LLNncT1aYeg@mail.gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
 <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
 <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>
 <cf311324-cc24-4ccc-c4df-b0fcc152cd86@gmail.com>
 <CAOO9MKWXVEv+LX_CdpA+WOP52zhPH30U23ZaZb8LLNncT1aYeg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2011251432380.3003@luke-Latitude-7480>

On Tue, 24 Nov 2020, Jan Gorecki wrote:

> As for other calls to system. I avoid calling system. In the past I
> had some (to get memory stats from OS), but they were failing with
> exactly the same issue. So yes, if I would add call to system before
> calling quit, I believe it would fail with the same error.
> At the same time I think (although I am not sure) that new allocations
> made in R are working fine. So R seems to reserve some memory and can
> continue to operate, while external call like system will fail. Maybe
> it is like this by design, don't know.

Thanks for the report on quit(). We're exploring how to make the
cleanup on exit more robust to low memory situations like these.

>
> Aside from this problem that is easy to report due to the warning
> message, I think that gc() is choking at the same time. I tried to
> make reproducible example for that, multiple times but couldn't, let
> me try one more time.
> It happens to manifest when there is 4e8+ unique characters/factors in
> an R session. I am able to reproduce it using data.table and dplyr
> (0.8.4 because 1.0.0+ fails even sooner), but using base R is not easy
> because of the size. I described briefly problem in:
> https://github.com/h2oai/db-benchmark/issues/110

Because of the design of R's character vectors, with each element
allocated separately, R is never going to be great at handling huge
numbers of distinct strings. But it can do an adequate job given
enough memory to work with.

When I run your GitHub issue example on a machine with around 500 Gb
of RAM it seems to run OK; /usr/bin/time reports

2706.89user 161.89system 37:10.65elapsed 128%CPU (0avgtext+0avgdata 92180796maxresident)k
0inputs+103450552outputs (0major+38716351minor)pagefaults 0swaps

So the memory footprint is quite large. Using gc.time() it looks like
about 1/3 of the time is in GC. Not ideal, and maybe could be improved
on a bit, but probably not by much. The GC is basically doing an
adequate job, given enough RAM.

If you run this example on a system without enough RAM, or with other
programs competing for RAM, you are likely to end up fighting with
your OS/hardware's virtual memory system. When I try to run it on a
16Gb system it churns for an hour or so before getting killed, and
/usr/bin/time reports a huge number of page faults:

312523816inputs+0outputs (24761285major+25762068minor)pagefaults 0swaps

You are probably experiencing something similar.

There may be opportunities for more tuning of the GC to better handle
running this close to memory limits, but I doubt the payoff would be
worth the effort.

Best,

luke

> It would help if gcinfo() could take FALSE/TRUE/2L where 2L will print
> even more information about gc, like how much time the each gc()
> process took, how many objects it has to check on each level.
>
> Best regards,
> Jan
>
>
>
> On Tue, Nov 24, 2020 at 1:05 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> On 11/24/20 11:27 AM, Jan Gorecki wrote:
>>> Thanks Bill for checking that.
>>> It was my impression that warnings are raised from some internal
>>> system calls made when quitting R. At that point I don't have much
>>> control over checking the return status of those.
>>> Your suggestion looks good to me.
>>>
>>> Tomas, do you think this could help? could this be implemented?
>>
>> I think this is a good suggestion. Deleting files on Unix was changed
>> from system("rm") to doing that in C, and deleting the session directory
>> should follow.
>>
>> It might also help diagnosing your problem, but I don't think it would
>> solve it. If the diagnostics in R works fine and the OS was so
>> hopelessly out of memory that it couldn't run any more external
>> processes, then really this is not a problem of R, but of having
>> exhausted the resources. And it would be a coincidence that just this
>> particular call to "system" at the end of the session did not work.
>> Anything else could break as well close to the end of the script. This
>> seems the most likely explanation to me.
>>
>> Do you get this warning repeatedly, reproducibly at least in slightly
>> different scripts at the very end, with this warning always from quit()?
>> So that the "call" part of the warning message has .Internal(quit) like
>> in the case you posted? Would adding another call to "system" before the
>> call to "q()" work - with checking the return value? If it is always
>> only the last call to "system" in "q()", then it is suspicious, perhaps
>> an indication that some diagnostics in R is not correct. In that case, a
>> reproducible example would be the key - so either if you could diagnose
>> on your end what is the problem, or create a reproducible example that
>> someone else can use to reproduce and debug.
>>
>> Best
>> Tomas
>>
>>>
>>> On Mon, Nov 23, 2020 at 7:10 PM Bill Dunlap <williamwdunlap at gmail.com> wrote:
>>>> The call to system() probably is an internal call used to delete the session's tempdir().  This sort of failure means that a potentially large amount of disk space is not being recovered when R is done.  Perhaps R_CleanTempDir() could call R_unlink() instead of having a subprocess call 'rm -rf ...'.  Then it could also issue a specific warning if it was impossible to delete all of tempdir().  (That should be very rare.)
>>>>
>>>>> q("no")
>>>> Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
>>>> 311     {
>>>> (gdb) where
>>>> #0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
>>>> #1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
>>>> #2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0, runLast=<optimized out>) at sys-std.c:1243
>>>> #3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE, status=status at entry=0, runLast=<optimized out>) at system.c:87
>>>> #4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393
>>>>
>>>> -Bill
>>>>
>>>> On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>> On 11/21/20 6:51 PM, Jan Gorecki wrote:
>>>>>> Dear R-developers,
>>>>>>
>>>>>> Some of the more fat scripts (50+ GB mem used by R) that I am running,
>>>>>> when they finish they do quit with q("no", status=0)
>>>>>> Quite often it happens that there is an extra stderr output produced
>>>>>> at the very end which looks like this:
>>>>>>
>>>>>> Warning message:
>>>>>> In .Internal(quit(save, status, runLast)) :
>>>>>>     system call failed: Cannot allocate memory
>>>>>>
>>>>>> Is there any way to avoid this kind of warnings? I am using stderr
>>>>>> output for detecting failures in scripts and this warning is a false
>>>>>> positive of a failure.
>>>>>>
>>>>>> Maybe quit function could wait little bit longer trying to allocate
>>>>>> before it raises this warning?
>>>>> If you see this warning, some call to system() or system2() or similar,
>>>>> which executes an external program, failed to even run a shell to run
>>>>> that external program, because there was not enough memory. You should
>>>>> be able to find out where it happens by checking the exit status of
>>>>> system().
>>>>>
>>>>> Tomas
>>>>>
>>>>>
>>>>>> Best regards,
>>>>>> Jan Gorecki
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From j@goreck| @end|ng |rom w|t@edu@p|  Thu Nov 26 11:18:47 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 26 Nov 2020 12:18:47 +0200
Subject: [Rd] [External] Re: .Internal(quit(...)): system call failed:
 Cannot allocate memory
In-Reply-To: <alpine.DEB.2.21.2011251432380.3003@luke-Latitude-7480>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
 <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
 <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>
 <cf311324-cc24-4ccc-c4df-b0fcc152cd86@gmail.com>
 <CAOO9MKWXVEv+LX_CdpA+WOP52zhPH30U23ZaZb8LLNncT1aYeg@mail.gmail.com>
 <alpine.DEB.2.21.2011251432380.3003@luke-Latitude-7480>
Message-ID: <CAOO9MKWk3qdghJ0KJx0KemXdFEGr7QzzjHZHguWFzfSKYwFYPA@mail.gmail.com>

Thank you Luke for looking into it. Your knowledge of gc is definitely
helpful here. I put comments inline below.

Best,
Jan

On Wed, Nov 25, 2020 at 10:38 PM <luke-tierney at uiowa.edu> wrote:
>
> On Tue, 24 Nov 2020, Jan Gorecki wrote:
>
> > As for other calls to system. I avoid calling system. In the past I
> > had some (to get memory stats from OS), but they were failing with
> > exactly the same issue. So yes, if I would add call to system before
> > calling quit, I believe it would fail with the same error.
> > At the same time I think (although I am not sure) that new allocations
> > made in R are working fine. So R seems to reserve some memory and can
> > continue to operate, while external call like system will fail. Maybe
> > it is like this by design, don't know.
>
> Thanks for the report on quit(). We're exploring how to make the
> cleanup on exit more robust to low memory situations like these.
>
> >
> > Aside from this problem that is easy to report due to the warning
> > message, I think that gc() is choking at the same time. I tried to
> > make reproducible example for that, multiple times but couldn't, let
> > me try one more time.
> > It happens to manifest when there is 4e8+ unique characters/factors in
> > an R session. I am able to reproduce it using data.table and dplyr
> > (0.8.4 because 1.0.0+ fails even sooner), but using base R is not easy
> > because of the size. I described briefly problem in:
> > https://github.com/h2oai/db-benchmark/issues/110
>
> Because of the design of R's character vectors, with each element
> allocated separately, R is never going to be great at handling huge
> numbers of distinct strings. But it can do an adequate job given
> enough memory to work with.
>
> When I run your GitHub issue example on a machine with around 500 Gb
> of RAM it seems to run OK; /usr/bin/time reports
>
> 2706.89user 161.89system 37:10.65elapsed 128%CPU (0avgtext+0avgdata 92180796maxresident)k
> 0inputs+103450552outputs (0major+38716351minor)pagefaults 0swaps
>
> So the memory footprint is quite large. Using gc.time() it looks like
> about 1/3 of the time is in GC. Not ideal, and maybe could be improved
> on a bit, but probably not by much. The GC is basically doing an
> adequate job, given enough RAM.

Agree, 1/3 is a lot but still acceptable. So this strictly is not
something that requires intervention.
PS. I wasn't aware of gc.time(), it may be worth linking it from
SeeAlso in gc() manual.

>
> If you run this example on a system without enough RAM, or with other
> programs competing for RAM, you are likely to end up fighting with
> your OS/hardware's virtual memory system. When I try to run it on a
> 16Gb system it churns for an hour or so before getting killed, and
> /usr/bin/time reports a huge number of page faults:
>
> 312523816inputs+0outputs (24761285major+25762068minor)pagefaults 0swaps
>
> You are probably experiencing something similar.

Yes, this is exactly what I am experiencing.
The machine is a bare metal machine of 128GB mem, csv size 50GB,
data.frame size 74GB.
In my case it churns for ~3h before it gets killed with SIGINT from
the parent R process which uses 3h as a timeout for this script.
This is something I would like to be addressed because gc time is far
bigger than actual computation time. This is not really acceptable, I
would prefer to raise an exception instead.

>
> There may be opportunities for more tuning of the GC to better handle
> running this close to memory limits, but I doubt the payoff would be
> worth the effort.

If you don't have plans/time to work on that anytime soon, then I can
fill bugzilla for this problem so it won't get lost in the mailing
list.


>
> Best,
>
> luke
>
> > It would help if gcinfo() could take FALSE/TRUE/2L where 2L will print
> > even more information about gc, like how much time the each gc()
> > process took, how many objects it has to check on each level.
> >
> > Best regards,
> > Jan
> >
> >
> >
> > On Tue, Nov 24, 2020 at 1:05 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>
> >> On 11/24/20 11:27 AM, Jan Gorecki wrote:
> >>> Thanks Bill for checking that.
> >>> It was my impression that warnings are raised from some internal
> >>> system calls made when quitting R. At that point I don't have much
> >>> control over checking the return status of those.
> >>> Your suggestion looks good to me.
> >>>
> >>> Tomas, do you think this could help? could this be implemented?
> >>
> >> I think this is a good suggestion. Deleting files on Unix was changed
> >> from system("rm") to doing that in C, and deleting the session directory
> >> should follow.
> >>
> >> It might also help diagnosing your problem, but I don't think it would
> >> solve it. If the diagnostics in R works fine and the OS was so
> >> hopelessly out of memory that it couldn't run any more external
> >> processes, then really this is not a problem of R, but of having
> >> exhausted the resources. And it would be a coincidence that just this
> >> particular call to "system" at the end of the session did not work.
> >> Anything else could break as well close to the end of the script. This
> >> seems the most likely explanation to me.
> >>
> >> Do you get this warning repeatedly, reproducibly at least in slightly
> >> different scripts at the very end, with this warning always from quit()?
> >> So that the "call" part of the warning message has .Internal(quit) like
> >> in the case you posted? Would adding another call to "system" before the
> >> call to "q()" work - with checking the return value? If it is always
> >> only the last call to "system" in "q()", then it is suspicious, perhaps
> >> an indication that some diagnostics in R is not correct. In that case, a
> >> reproducible example would be the key - so either if you could diagnose
> >> on your end what is the problem, or create a reproducible example that
> >> someone else can use to reproduce and debug.
> >>
> >> Best
> >> Tomas
> >>
> >>>
> >>> On Mon, Nov 23, 2020 at 7:10 PM Bill Dunlap <williamwdunlap at gmail.com> wrote:
> >>>> The call to system() probably is an internal call used to delete the session's tempdir().  This sort of failure means that a potentially large amount of disk space is not being recovered when R is done.  Perhaps R_CleanTempDir() could call R_unlink() instead of having a subprocess call 'rm -rf ...'.  Then it could also issue a specific warning if it was impossible to delete all of tempdir().  (That should be very rare.)
> >>>>
> >>>>> q("no")
> >>>> Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
> >>>> 311     {
> >>>> (gdb) where
> >>>> #0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
> >>>> #1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
> >>>> #2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0, runLast=<optimized out>) at sys-std.c:1243
> >>>> #3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE, status=status at entry=0, runLast=<optimized out>) at system.c:87
> >>>> #4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393
> >>>>
> >>>> -Bill
> >>>>
> >>>> On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 11/21/20 6:51 PM, Jan Gorecki wrote:
> >>>>>> Dear R-developers,
> >>>>>>
> >>>>>> Some of the more fat scripts (50+ GB mem used by R) that I am running,
> >>>>>> when they finish they do quit with q("no", status=0)
> >>>>>> Quite often it happens that there is an extra stderr output produced
> >>>>>> at the very end which looks like this:
> >>>>>>
> >>>>>> Warning message:
> >>>>>> In .Internal(quit(save, status, runLast)) :
> >>>>>>     system call failed: Cannot allocate memory
> >>>>>>
> >>>>>> Is there any way to avoid this kind of warnings? I am using stderr
> >>>>>> output for detecting failures in scripts and this warning is a false
> >>>>>> positive of a failure.
> >>>>>>
> >>>>>> Maybe quit function could wait little bit longer trying to allocate
> >>>>>> before it raises this warning?
> >>>>> If you see this warning, some call to system() or system2() or similar,
> >>>>> which executes an external program, failed to even run a shell to run
> >>>>> that external program, because there was not enough memory. You should
> >>>>> be able to find out where it happens by checking the exit status of
> >>>>> system().
> >>>>>
> >>>>> Tomas
> >>>>>
> >>>>>
> >>>>>> Best regards,
> >>>>>> Jan Gorecki
> >>>>>>
> >>>>>> ______________________________________________
> >>>>>> R-devel at r-project.org mailing list
> >>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @ko@ty@h@k @end|ng |rom u||@edu  Fri Nov 27 03:03:08 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Thu, 26 Nov 2020 21:03:08 -0500
Subject: [Rd] 
 Marking a ticket as a (potential) regression in bug tracker?
In-Reply-To: <20200612141711.b67mfiizy46jyoo2@tallinn>
References: <20200612141711.b67mfiizy46jyoo2@tallinn>
Message-ID: <20201127020308.cx2nzy65oh7v3qbl@tallinn>

On Fri, Jun 12, 2020 at 10:17:11AM -0400, Scott Kostyshak wrote:
> 
> Is there a way to mark a ticket as a potential regression in the bug
> tracker? I think the following issue is a regression:
> 
>   https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17684
> 
> I've just tested (2020-06-12 r78687) and what I believe to be a
> regression is still there. I don't think the bug has bitten many people,
> so I don't think it is critical, but often it is helpful to mark bugs as
> regressions in trackers.

If there's no current way to mark something as a regression, would there
be support for adding a way?

Best,

Scott


-- 
Scott Kostyshak (he/him)
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Nov 27 21:18:35 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 27 Nov 2020 14:18:35 -0600 (CST)
Subject: [Rd] [External] Re: .Internal(quit(...)): system call failed:
 Cannot allocate memory
In-Reply-To: <CAOO9MKWk3qdghJ0KJx0KemXdFEGr7QzzjHZHguWFzfSKYwFYPA@mail.gmail.com>
References: <CAOO9MKUhAxhv_UAtBKBebN+zCQW+JVTuRHhzohdaUZ=tZYkWAg@mail.gmail.com>
 <2b09f5dd-0217-bd98-d427-38c6fa374d41@gmail.com>
 <CAHqSRuRPbuyq0T_Oh7XfbH6Ls_gOA6ifinAhG9D-vXn3DU2sHw@mail.gmail.com>
 <CAOO9MKWTUTXZeg2GG0v6OedG4zRPC0ospNvgb10h-9FeOJ0HYw@mail.gmail.com>
 <cf311324-cc24-4ccc-c4df-b0fcc152cd86@gmail.com>
 <CAOO9MKWXVEv+LX_CdpA+WOP52zhPH30U23ZaZb8LLNncT1aYeg@mail.gmail.com>
 <alpine.DEB.2.21.2011251432380.3003@luke-Latitude-7480>
 <CAOO9MKWk3qdghJ0KJx0KemXdFEGr7QzzjHZHguWFzfSKYwFYPA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2011271410260.3003@luke-Latitude-7480>

On Thu, 26 Nov 2020, Jan Gorecki wrote:

> Thank you Luke for looking into it. Your knowledge of gc is definitely
> helpful here. I put comments inline below.
>
> Best,
> Jan
>
> On Wed, Nov 25, 2020 at 10:38 PM <luke-tierney at uiowa.edu> wrote:
>>
>> On Tue, 24 Nov 2020, Jan Gorecki wrote:
>>
>>> As for other calls to system. I avoid calling system. In the past I
>>> had some (to get memory stats from OS), but they were failing with
>>> exactly the same issue. So yes, if I would add call to system before
>>> calling quit, I believe it would fail with the same error.
>>> At the same time I think (although I am not sure) that new allocations
>>> made in R are working fine. So R seems to reserve some memory and can
>>> continue to operate, while external call like system will fail. Maybe
>>> it is like this by design, don't know.
>>
>> Thanks for the report on quit(). We're exploring how to make the
>> cleanup on exit more robust to low memory situations like these.
>>
>>>
>>> Aside from this problem that is easy to report due to the warning
>>> message, I think that gc() is choking at the same time. I tried to
>>> make reproducible example for that, multiple times but couldn't, let
>>> me try one more time.
>>> It happens to manifest when there is 4e8+ unique characters/factors in
>>> an R session. I am able to reproduce it using data.table and dplyr
>>> (0.8.4 because 1.0.0+ fails even sooner), but using base R is not easy
>>> because of the size. I described briefly problem in:
>>> https://github.com/h2oai/db-benchmark/issues/110
>>
>> Because of the design of R's character vectors, with each element
>> allocated separately, R is never going to be great at handling huge
>> numbers of distinct strings. But it can do an adequate job given
>> enough memory to work with.
>>
>> When I run your GitHub issue example on a machine with around 500 Gb
>> of RAM it seems to run OK; /usr/bin/time reports
>>
>> 2706.89user 161.89system 37:10.65elapsed 128%CPU (0avgtext+0avgdata 92180796maxresident)k
>> 0inputs+103450552outputs (0major+38716351minor)pagefaults 0swaps
>>
>> So the memory footprint is quite large. Using gc.time() it looks like
>> about 1/3 of the time is in GC. Not ideal, and maybe could be improved
>> on a bit, but probably not by much. The GC is basically doing an
>> adequate job, given enough RAM.
>
> Agree, 1/3 is a lot but still acceptable. So this strictly is not
> something that requires intervention.
> PS. I wasn't aware of gc.time(), it may be worth linking it from
> SeeAlso in gc() manual.
>
>>
>> If you run this example on a system without enough RAM, or with other
>> programs competing for RAM, you are likely to end up fighting with
>> your OS/hardware's virtual memory system. When I try to run it on a
>> 16Gb system it churns for an hour or so before getting killed, and
>> /usr/bin/time reports a huge number of page faults:
>>
>> 312523816inputs+0outputs (24761285major+25762068minor)pagefaults 0swaps
>>
>> You are probably experiencing something similar.
>
> Yes, this is exactly what I am experiencing.
> The machine is a bare metal machine of 128GB mem, csv size 50GB,
> data.frame size 74GB.
> In my case it churns for ~3h before it gets killed with SIGINT from
> the parent R process which uses 3h as a timeout for this script.
> This is something I would like to be addressed because gc time is far
> bigger than actual computation time. This is not really acceptable, I
> would prefer to raise an exception instead.
>
>>
>> There may be opportunities for more tuning of the GC to better handle
>> running this close to memory limits, but I doubt the payoff would be
>> worth the effort.
>
> If you don't have plans/time to work on that anytime soon, then I can
> fill bugzilla for this problem so it won't get lost in the mailing
> list.

I'm not convinced anything useful can be done that would work well for
your application without working badly for others.

If you want to drive this close to your memory limits you are probably
going to have to take responsibility for some tuning at your end. One
option in ?Memory you might try is the R_MAX_VSIZE environment
variable. On my 16Gb machine with R_MAX_VSIZE=16Gb your example fails
very quickly with

Error: vector memory exhausted (limit reached?)

rather than churning for an hour trying to make things work. Setting
memory and/or virtual memory limits in your shell is another option.

Best,

luke

>
>
>>
>> Best,
>>
>> luke
>>
>>> It would help if gcinfo() could take FALSE/TRUE/2L where 2L will print
>>> even more information about gc, like how much time the each gc()
>>> process took, how many objects it has to check on each level.
>>>
>>> Best regards,
>>> Jan
>>>
>>>
>>>
>>> On Tue, Nov 24, 2020 at 1:05 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>
>>>> On 11/24/20 11:27 AM, Jan Gorecki wrote:
>>>>> Thanks Bill for checking that.
>>>>> It was my impression that warnings are raised from some internal
>>>>> system calls made when quitting R. At that point I don't have much
>>>>> control over checking the return status of those.
>>>>> Your suggestion looks good to me.
>>>>>
>>>>> Tomas, do you think this could help? could this be implemented?
>>>>
>>>> I think this is a good suggestion. Deleting files on Unix was changed
>>>> from system("rm") to doing that in C, and deleting the session directory
>>>> should follow.
>>>>
>>>> It might also help diagnosing your problem, but I don't think it would
>>>> solve it. If the diagnostics in R works fine and the OS was so
>>>> hopelessly out of memory that it couldn't run any more external
>>>> processes, then really this is not a problem of R, but of having
>>>> exhausted the resources. And it would be a coincidence that just this
>>>> particular call to "system" at the end of the session did not work.
>>>> Anything else could break as well close to the end of the script. This
>>>> seems the most likely explanation to me.
>>>>
>>>> Do you get this warning repeatedly, reproducibly at least in slightly
>>>> different scripts at the very end, with this warning always from quit()?
>>>> So that the "call" part of the warning message has .Internal(quit) like
>>>> in the case you posted? Would adding another call to "system" before the
>>>> call to "q()" work - with checking the return value? If it is always
>>>> only the last call to "system" in "q()", then it is suspicious, perhaps
>>>> an indication that some diagnostics in R is not correct. In that case, a
>>>> reproducible example would be the key - so either if you could diagnose
>>>> on your end what is the problem, or create a reproducible example that
>>>> someone else can use to reproduce and debug.
>>>>
>>>> Best
>>>> Tomas
>>>>
>>>>>
>>>>> On Mon, Nov 23, 2020 at 7:10 PM Bill Dunlap <williamwdunlap at gmail.com> wrote:
>>>>>> The call to system() probably is an internal call used to delete the session's tempdir().  This sort of failure means that a potentially large amount of disk space is not being recovered when R is done.  Perhaps R_CleanTempDir() could call R_unlink() instead of having a subprocess call 'rm -rf ...'.  Then it could also issue a specific warning if it was impossible to delete all of tempdir().  (That should be very rare.)
>>>>>>
>>>>>>> q("no")
>>>>>> Breakpoint 1, R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
>>>>>> 311     {
>>>>>> (gdb) where
>>>>>> #0  R_system (command=command at entry=0x7fffffffa1e0 "rm -Rf /tmp/RtmppoKPXb") at sysutils.c:311
>>>>>> #1  0x00005555557c30ec in R_CleanTempDir () at sys-std.c:1178
>>>>>> #2  0x00005555557c31d7 in Rstd_CleanUp (saveact=<optimized out>, status=0, runLast=<optimized out>) at sys-std.c:1243
>>>>>> #3  0x00005555557c593d in R_CleanUp (saveact=saveact at entry=SA_NOSAVE, status=status at entry=0, runLast=<optimized out>) at system.c:87
>>>>>> #4  0x00005555556cc85e in do_quit (call=<optimized out>, op=<optimized out>, args=0x555557813f90, rho=<optimized out>) at main.c:1393
>>>>>>
>>>>>> -Bill
>>>>>>
>>>>>> On Mon, Nov 23, 2020 at 3:15 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 11/21/20 6:51 PM, Jan Gorecki wrote:
>>>>>>>> Dear R-developers,
>>>>>>>>
>>>>>>>> Some of the more fat scripts (50+ GB mem used by R) that I am running,
>>>>>>>> when they finish they do quit with q("no", status=0)
>>>>>>>> Quite often it happens that there is an extra stderr output produced
>>>>>>>> at the very end which looks like this:
>>>>>>>>
>>>>>>>> Warning message:
>>>>>>>> In .Internal(quit(save, status, runLast)) :
>>>>>>>>     system call failed: Cannot allocate memory
>>>>>>>>
>>>>>>>> Is there any way to avoid this kind of warnings? I am using stderr
>>>>>>>> output for detecting failures in scripts and this warning is a false
>>>>>>>> positive of a failure.
>>>>>>>>
>>>>>>>> Maybe quit function could wait little bit longer trying to allocate
>>>>>>>> before it raises this warning?
>>>>>>> If you see this warning, some call to system() or system2() or similar,
>>>>>>> which executes an external program, failed to even run a shell to run
>>>>>>> that external program, because there was not enough memory. You should
>>>>>>> be able to find out where it happens by checking the exit status of
>>>>>>> system().
>>>>>>>
>>>>>>> Tomas
>>>>>>>
>>>>>>>
>>>>>>>> Best regards,
>>>>>>>> Jan Gorecki
>>>>>>>>
>>>>>>>> ______________________________________________
>>>>>>>> R-devel at r-project.org mailing list
>>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From v@nhorn @end|ng |rom @dobe@com  Mon Nov 30 19:05:52 2020
From: v@nhorn @end|ng |rom @dobe@com (Kevin Van Horn)
Date: Mon, 30 Nov 2020 18:05:52 +0000
Subject: [Rd] all.equal applied to function closures
Message-ID: <B43EED2F-F34F-436E-9822-AFB2A1C954DF@adobe.com>

Consider the following code:

    f <- function(x)function(y){x+y}
    all.equal(f(5), f(0))

This returns TRUE, when it should return FALSE; I think it?s hard to make the case that f(5) and f(0) are ?approximately equal? in any meaningful sense. Digging into the code for all.equal(), I see that all.equal(f(5), f(0)) results in a call to all.equal.language(f(5), f(0)), which only compares the function texts for equality.

If it is decided to leave this behavior as-is, then at least it should be documented. Currently I cannot find any documentation for all.equal applied to functions.

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Nov 30 19:36:50 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 30 Nov 2020 13:36:50 -0500
Subject: [Rd] all.equal applied to function closures
In-Reply-To: <B43EED2F-F34F-436E-9822-AFB2A1C954DF@adobe.com>
References: <B43EED2F-F34F-436E-9822-AFB2A1C954DF@adobe.com>
Message-ID: <8142836e-d8d5-1faa-fbfe-265a9c6f22e9@gmail.com>

On 30/11/2020 1:05 p.m., Kevin Van Horn via R-devel wrote:
> Consider the following code:
> 
>      f <- function(x)function(y){x+y}
>      all.equal(f(5), f(0))
> 
> This returns TRUE, when it should return FALSE; I think it?s hard to make the case that f(5) and f(0) are ?approximately equal? in any meaningful sense. Digging into the code for all.equal(), I see that all.equal(f(5), f(0)) results in a call to all.equal.language(f(5), f(0)), which only compares the function texts for equality.
> 
> If it is decided to leave this behavior as-is, then at least it should be documented. Currently I cannot find any documentation for all.equal applied to functions.

Clearly it should also compare the environments of the two functions, 
then it would see a difference:

 > all.equal(environment(f(5)), environment(f(0)))
[1] "Component ?x?: Mean relative difference: 1"

Changing the first few lines from

     if (is.language(target) || is.function(target))
         return(all.equal.language(target, current, ...))

to

     if (is.function(target)) {
         msg <- all.equal.language(target, current, ...)
         if (isTRUE(msg)) {
             msg <- all.equal.environment(environment(target), 
environment(current), ...)
             if (is.character(msg))
               msg <- paste("Environments:", msg)
         }
         return(msg)
     }
     if (is.language(target))
         return(all.equal.language(target, current, ...))

would fix it.

Duncan Murdoch


From bbo|ker @end|ng |rom gm@||@com  Mon Nov 30 22:33:23 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 30 Nov 2020 16:33:23 -0500
Subject: [Rd] undocumented 'offset' argument in
 src/library/grDevices/man/adjustcolor.Rd
Message-ID: <70078b99-0c2e-d456-a2e5-088c3a2cd49f@gmail.com>

   The 'offset' argument description is blank ...

   maybe 'additive adjustment to each of the (red, green, blue, alpha) 
values defining the colors, after adjustment by the corresponding 
\code{.f} factor' ...?

This is the relevant code:

  x <- col2rgb(col, alpha = TRUE)/255
     x[] <- pmax(0, pmin(1,
                         transform %*% x +
                         matrix(offset, nrow = 4L, ncol = ncol(x))))
     rgb(x[1L,], x[2L,], x[3L,], x[4L,])


From w||||@mwdun|@p @end|ng |rom gm@||@com  Mon Nov 30 22:41:54 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Mon, 30 Nov 2020 13:41:54 -0800
Subject: [Rd] all.equal applied to function closures
In-Reply-To: <8142836e-d8d5-1faa-fbfe-265a9c6f22e9@gmail.com>
References: <B43EED2F-F34F-436E-9822-AFB2A1C954DF@adobe.com>
 <8142836e-d8d5-1faa-fbfe-265a9c6f22e9@gmail.com>
Message-ID: <CAHqSRuR0CzvyB_CkC2mkxXrJ8XGvGugJDtct6VVOOhCdvU0C5Q@mail.gmail.com>

To make the comparison more complete, all.equal.environment could compare
the parents of the target and current environments.  That would have to be
recursive but could stop at the first 'top level environment' (the global,
empty, or a package-related environment generally) and use identical
there.  E.g.,

> f1 <- function(x) (function(){ expx <- exp(x) ; function(y) y + expx})()
> all.equal(f1(2), f1(3))
[1] "Environments: Component ?expx?: Mean relative difference: 1.718282"

[2] "Environments: <parent.env> Component ?x?: Mean relative difference:
0.5"

This is from the following, where I avoided putting the existing
non-recursive all.equal.environment into the body of this one.

all.equal.environment <-
function(target, current, ...)
{
    .all.equal.environment <- base::all.equal.environment # temporary hack
    stopifnot(is.environment(target), is.environment(current))
    if (identical(target, current)) {
        TRUE
    } else {
        msg <- NULL # TODO: check attributes
        # deal with emptyenv now since parent.env(emptyenv()) gives error
        # and topenv(emptyenv()) gives GlobalEnv
        eTarget <- identical(target, emptyenv()) ||
identical(target,topenv(target))
        eCurrent <- identical(current, emptyenv()) ||
identical(current,topenv(current))
        if (eTarget || eCurrent) {
            msg <- c(msg, paste("target is", format(target), "and current
is", format(current)))
        } else {
            thisComparison <- .all.equal.environment(target, current, ...)
            if (!isTRUE(thisComparison)) {
                msg <- c(msg, thisComparison)
            }
            parentComparison <- Recall(parent.env(target),
parent.env(current), ...)
            if (!isTRUE(parentComparison)) {
                msg <- c(msg, paste("<parent.env>", parentComparison))
            }
        }
        if (is.null(msg) || isTRUE(msg)) TRUE else msg
    }
}

On Mon, Nov 30, 2020 at 10:42 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 30/11/2020 1:05 p.m., Kevin Van Horn via R-devel wrote:
> > Consider the following code:
> >
> >      f <- function(x)function(y){x+y}
> >      all.equal(f(5), f(0))
> >
> > This returns TRUE, when it should return FALSE; I think it?s hard to
> make the case that f(5) and f(0) are ?approximately equal? in any
> meaningful sense. Digging into the code for all.equal(), I see that
> all.equal(f(5), f(0)) results in a call to all.equal.language(f(5), f(0)),
> which only compares the function texts for equality.
> >
> > If it is decided to leave this behavior as-is, then at least it should
> be documented. Currently I cannot find any documentation for all.equal
> applied to functions.
>
> Clearly it should also compare the environments of the two functions,
> then it would see a difference:
>
>  > all.equal(environment(f(5)), environment(f(0)))
> [1] "Component ?x?: Mean relative difference: 1"
>
> Changing the first few lines from
>
>      if (is.language(target) || is.function(target))
>          return(all.equal.language(target, current, ...))
>
> to
>
>      if (is.function(target)) {
>          msg <- all.equal.language(target, current, ...)
>          if (isTRUE(msg)) {
>              msg <- all.equal.environment(environment(target),
> environment(current), ...)
>              if (is.character(msg))
>                msg <- paste("Environments:", msg)
>          }
>          return(msg)
>      }
>      if (is.language(target))
>          return(all.equal.language(target, current, ...))
>
> would fix it.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


