From m@echler @ending from @t@t@m@th@ethz@ch  Mon Dec  3 10:55:34 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 3 Dec 2018 10:55:34 +0100
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <CAOQ5Nydwa1CqaA2oYmDwcVaWpg8Z6gRqDC2Ze4RG-Jcb-z_uWQ@mail.gmail.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>
 <b42a529f59634ed282821ddd23608e26@GBDCVPEXC08.corp.lgc-group.com>
 <F12950C3-65ED-457A-82BF-310F90EF9609@dans.knaw.nl>
 <CAOQ5Nydwa1CqaA2oYmDwcVaWpg8Z6gRqDC2Ze4RG-Jcb-z_uWQ@mail.gmail.com>
Message-ID: <23556.64918.936383.30460@stat.math.ethz.ch>

>>>>> Michael Lawrence 
>>>>>     on Fri, 30 Nov 2018 08:24:31 -0800 writes:

    > Argument matching is by name first, then the still missing
    > arguments are filled positionally. Unnamed missing
    > arguments are thus left missing. Does that help?

Thank you, Michael!
Unfortunately, it may not help sufficiently notably once this
thread will be forgotten, even though I had thought so exactly
as well.  Of course we two may find R's matching algorithm
entirely intuitive, but e.g., Ista expected R even "to throw an
error" in this case, and there are about 99% of R users less savvy than
him, so let me think loudly a bit further ...
IIUC, Emil's case is mostly about this

  > ff <- function(x,y,z,...) list(sysC=sys.call(), match=match.call())
  > str( ff(x=, z=pi, "foo") )
  List of 2
   $ sysC : language ff(x = , z = pi, "foo")
   $ match: language ff(x = "foo", z = pi)
  > 

where the argument matching rule above would have suggested to him that the
matched call should have become
  ff(y = "foo", z = pi)  rather than
  ff(x = "foo", z = pi)

because he'd expected the empty 'x =' to be matched by name and
hence *not* be matched again later when all the missing
arguments are matched positionally in the end.
NB because of the rule Michael cited above *of course*,
", ," (in your example below) is not equivalent to
"y = ," because the former leads to positional matching at position 2.

Now R's matching argument algorithm has therefore been consistent with
the above simple matching rule ((which did not include the exact vs
partial matching but that was not the topic here anyway))
that had been documented as that forever and AFAIK the same as S had.

What may be possible (and suggested in this thread ?) would be
to start signalling a warning when named empty arguments (the
" y = , "  in the example) are matched(*), i.e., it would give a
warning in match.call() but not sys.call(), and hence utilities
such as  alist()  would continue to work unchanged.

I have no idea (and no time currently to investigate) if such
warnings would be too disruptive for the current R code base or not.

Martin

----
*) "matched" in that case effectively means "dropped" as we have
    seen in the examples.
    

    > On Fri, Nov 30, 2018 at 8:18 AM Emil Bode <emil.bode at dans.knaw.nl> wrote:
    >> 
    >> But the main point is where arguments are mixed together:
    >> 
    >> > debugonce(plot.default)
    >> > plot(x=1:10, y=, 'l')
    >> ...
    >> Browse[2]> missing(y)
    >> [1] FALSE
    >> Browse[2]> y
    >> [1] "l"
    >> Browse[2]> type
    >> [1] "p"
    >> 
    >> I think that's what I fall over mostly: that named, empty arguments behave entirely different from omitting them (", ,")
    >> 
    >> And I definitely agree we need a guru to explain it all to us (
    >> 
    >> Cheers, Emil Bode
    >> 
    >> 
    >> ?On 30/11/2018, 15:35, "S Ellison" <S.Ellison at LGCGroup.com> wrote:
    >> 
    >> > Yes, I think all of that is correct. But y _is_ missing in this sense:
    >> > > plot(1:10, y=)
    >> > > ...
    >> > Browse[2]> missing(y)
    >> 
    >> Although I said what I meant by 'missing' vs 'not present', it wasn't exactly what missing() means. My bad.
    >> missing() returns TRUE if an argument is not specified in the call _whether or not_ it has a default, hence the behaviour of missing(y) in debug(plot).
    >> 
    >> But we can easily find out whether a default has been assigned:
    >> plot(1:10, y=, type=)
    >> Browse[2]> y
    >> NULL
    >> Browse[2]> type
    >> "p"
    >> 
    >> ... which is consistent with silent omission of 'y=' and 'type='
    >> 
    >> 
    >> Still waiting for a guru...
    >> 
    >> Steve E


From emil@bode @ending from d@n@@kn@w@nl  Mon Dec  3 11:14:16 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Mon, 3 Dec 2018 10:14:16 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <23556.64918.936383.30460@stat.math.ethz.ch>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>
 <b42a529f59634ed282821ddd23608e26@GBDCVPEXC08.corp.lgc-group.com>
 <F12950C3-65ED-457A-82BF-310F90EF9609@dans.knaw.nl>
 <CAOQ5Nydwa1CqaA2oYmDwcVaWpg8Z6gRqDC2Ze4RG-Jcb-z_uWQ@mail.gmail.com>
 <23556.64918.936383.30460@stat.math.ethz.ch>
Message-ID: <369F346B-3A55-461B-BD8E-1F257F991734@dans.knaw.nl>

Thanks as well!
I'm now getting how it's exactly matched, but it still "feels wrong".
Martins rewording is exactly what I meant/was concerned about.
My intuition would say that anyone using ff(x=, ...) would not intent x to be matched to something else, but maybe I'm overlooking certain cases.
Anyway, I agree that throwing a warning would probably be the best solution.
I don't exactly know how to test for compatibility for such changes (never really worked with CRAN/extensive testing), but if I can do something to help I'd be glad to.
And if it turns out to be too disruptive, maybe we can write Patrick Burns (the R-inferno) ; - )

Best regards, 
Emil Bode
 
?On 03/12/2018, 10:57, "Martin Maechler" <maechler at stat.math.ethz.ch> wrote:

    >>>>> Michael Lawrence 
    >>>>>     on Fri, 30 Nov 2018 08:24:31 -0800 writes:
    
        > Argument matching is by name first, then the still missing
        > arguments are filled positionally. Unnamed missing
        > arguments are thus left missing. Does that help?
    
    Thank you, Michael!
    Unfortunately, it may not help sufficiently notably once this
    thread will be forgotten, even though I had thought so exactly
    as well.  Of course we two may find R's matching algorithm
    entirely intuitive, but e.g., Ista expected R even "to throw an
    error" in this case, and there are about 99% of R users less savvy than
    him, so let me think loudly a bit further ...
    IIUC, Emil's case is mostly about this
    
      > ff <- function(x,y,z,...) list(sysC=sys.call(), match=match.call())
      > str( ff(x=, z=pi, "foo") )
      List of 2
       $ sysC : language ff(x = , z = pi, "foo")
       $ match: language ff(x = "foo", z = pi)
      > 
    
    where the argument matching rule above would have suggested to him that the
    matched call should have become
      ff(y = "foo", z = pi)  rather than
      ff(x = "foo", z = pi)
    
    because he'd expected the empty 'x =' to be matched by name and
    hence *not* be matched again later when all the missing
    arguments are matched positionally in the end.
    NB because of the rule Michael cited above *of course*,
    ", ," (in your example below) is not equivalent to
    "y = ," because the former leads to positional matching at position 2.
    
    Now R's matching argument algorithm has therefore been consistent with
    the above simple matching rule ((which did not include the exact vs
    partial matching but that was not the topic here anyway))
    that had been documented as that forever and AFAIK the same as S had.
    
    What may be possible (and suggested in this thread ?) would be
    to start signalling a warning when named empty arguments (the
    " y = , "  in the example) are matched(*), i.e., it would give a
    warning in match.call() but not sys.call(), and hence utilities
    such as  alist()  would continue to work unchanged.
    
    I have no idea (and no time currently to investigate) if such
    warnings would be too disruptive for the current R code base or not.
    
    Martin
    
    ----
    *) "matched" in that case effectively means "dropped" as we have
        seen in the examples.
        
    
        > On Fri, Nov 30, 2018 at 8:18 AM Emil Bode <emil.bode at dans.knaw.nl> wrote:
        >> 
        >> But the main point is where arguments are mixed together:
        >> 
        >> > debugonce(plot.default)
        >> > plot(x=1:10, y=, 'l')
        >> ...
        >> Browse[2]> missing(y)
        >> [1] FALSE
        >> Browse[2]> y
        >> [1] "l"
        >> Browse[2]> type
        >> [1] "p"
        >> 
        >> I think that's what I fall over mostly: that named, empty arguments behave entirely different from omitting them (", ,")
        >> 
        >> And I definitely agree we need a guru to explain it all to us (
        >> 
        >> Cheers, Emil Bode
        >> 
        >> 
        >> On 30/11/2018, 15:35, "S Ellison" <S.Ellison at LGCGroup.com> wrote:
        >> 
        >> > Yes, I think all of that is correct. But y _is_ missing in this sense:
        >> > > plot(1:10, y=)
        >> > > ...
        >> > Browse[2]> missing(y)
        >> 
        >> Although I said what I meant by 'missing' vs 'not present', it wasn't exactly what missing() means. My bad.
        >> missing() returns TRUE if an argument is not specified in the call _whether or not_ it has a default, hence the behaviour of missing(y) in debug(plot).
        >> 
        >> But we can easily find out whether a default has been assigned:
        >> plot(1:10, y=, type=)
        >> Browse[2]> y
        >> NULL
        >> Browse[2]> type
        >> "p"
        >> 
        >> ... which is consistent with silent omission of 'y=' and 'type='
        >> 
        >> 
        >> Still waiting for a guru...
        >> 
        >> Steve E
     
    

From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Mon Dec  3 13:48:49 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Mon, 3 Dec 2018 12:48:49 +0000
Subject: [Rd] incomplete description of return value of stats::uniroot()?
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F6CABE3@MBXP02.ds.man.ac.uk>

The "Value" section in the documentation of stats::uniroot() mentions component "init.it" of the returned result:

> "... Further components may be added in future: component \code{init.it}  was added in \R 3.1.0."

I don't see "init.it"  described anywhere in that help page. It is technically not an omission, since the description says "at least the following components...", so maybe it is absent on purpose?

>From my reading of the source something like the following could be added to src/library/stats/man/uniroot.Rd, before the sentence quoted above:

\code{iter} includes the number of iterations, if any, done initially to ensure opposite signs at the ends of the interval.
This number is available separately in component \code{init.it}. If no extension of the interval was attempted, \code{init.it} is set to NA. 


Georgi Boshnakov


From qweytr1 m@ili@g off m@il@ustc@edu@c@  Mon Dec  3 15:06:48 2018
From: qweytr1 m@ili@g off m@il@ustc@edu@c@ (qweytr1 m@ili@g off m@il@ustc@edu@c@)
Date: Mon, 3 Dec 2018 22:06:48 +0800 (GMT+08:00)
Subject: [Rd] Bug report: Function ppois(0:20,
 lambda=0.9) does not generate a non-decreasing result.
Message-ID: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>

function ppois is a function calculate the CDF of Poisson distribution, it should generate a non-decreasing result, but what I got is:


> any(diff(ppois(0:19,lambda=0.9))<0)
[1] TRUE


Actually,



> ppois(19,lambda=0.9)<ppois(18,lambda=0.9)
[1] TRUE



Which could not be TRUE.


Code is tested in both R 3.5.1 and Microsoft R Open 3.5.1.


               _                          
platform       x86_64-w64-mingw32         
arch           x86_64                     
os             mingw32                    
system         x86_64, mingw32            
status                                    
major          3                          
minor          5.1                        
year           2018                       
month          07                         
day            02                         
svn rev        74947                      
language       R                          
version.string R version 3.5.1 (2018-07-02)
nickname       Feather Spray      







PS. if set lambda=1, such bug will not appear.








	[[alternative HTML version deleted]]


From iuc@r @ending from fedor@project@org  Tue Dec  4 11:27:36 2018
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 4 Dec 2018 11:27:36 +0100
Subject: [Rd] Bug report: Function ppois(0:20,
 lambda=0.9) does not generate a non-decreasing result.
In-Reply-To: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>
References: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>
Message-ID: <CALEXWq1WFLzQBgm8oF1myry25DZEyEA_jT3kFEnLYP55-06QKg@mail.gmail.com>

On Tue, 4 Dec 2018 at 11:12, <qweytr1 at mail.ustc.edu.cn> wrote:
>
> function ppois is a function calculate the CDF of Poisson distribution, it should generate a non-decreasing result, but what I got is:
>
> > any(diff(ppois(0:19,lambda=0.9))<0)
> [1] TRUE
>
> Actually,
>
> > ppois(19,lambda=0.9)<ppois(18,lambda=0.9)
> [1] TRUE
>
> Which could not be TRUE.

This is just another manifestation of

0.1 * 3 > 0.3
#> [1] TRUE

This discussion returns to this list from time to time. TLDR; this is
not an R issue, but an unavoidable floating point issue. Solution:
work with log-probabilities instead.

any(diff(ppois(0:40, lambda=0.9, log.p=TRUE))<0)
#> [1] FALSE

I?aki


From @okol @ending from in@@-toulou@e@fr  Tue Dec  4 11:46:32 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Tue, 4 Dec 2018 11:46:32 +0100
Subject: [Rd] Bug report: Function ppois(0:20,
 lambda=0.9) does not generate a non-decreasing result.
In-Reply-To: <CALEXWq1WFLzQBgm8oF1myry25DZEyEA_jT3kFEnLYP55-06QKg@mail.gmail.com>
References: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>
 <CALEXWq1WFLzQBgm8oF1myry25DZEyEA_jT3kFEnLYP55-06QKg@mail.gmail.com>
Message-ID: <2787db5d-a009-40f5-bea6-8ddb10b10a50@insa-toulouse.fr>

Le 04/12/2018 ? 11:27, I?aki Ucar a ?crit?:
> On Tue, 4 Dec 2018 at 11:12, <qweytr1 at mail.ustc.edu.cn> wrote:
>> function ppois is a function calculate the CDF of Poisson distribution, it should generate a non-decreasing result, but what I got is:
>>
>>> any(diff(ppois(0:19,lambda=0.9))<0)
>> [1] TRUE
>>
>> Actually,
>>
>>> ppois(19,lambda=0.9)<ppois(18,lambda=0.9)
>> [1] TRUE
>>
>> Which could not be TRUE.
> This is just another manifestation of
>
> 0.1 * 3 > 0.3
> #> [1] TRUE
>
> This discussion returns to this list from time to time. TLDR; this is
> not an R issue, but an unavoidable floating point issue.
Well, here the request may be interpreted not as "do it without round 
error" which is indeed unavoidable but rather "please cope with rounding 
errors in a way that return consistent result for ppois()". You have 
indicated one way to do so (I have just added exp() in the row):

any(diff(exp(ppois(0:19, lambda=0.9, log.p=TRUE))) < 0)
#[1] FALSE

But may be there is another, more economic way?

Serguei.

>   Solution:
> work with log-probabilities instead.
>
> any(diff(ppois(0:40, lambda=0.9, log.p=TRUE))<0)
> #> [1] FALSE
>
> I?aki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Serguei Sokol
Ingenieur de recherche INRA

Cellule math?matiques
LISBP, INSA/INRA UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 62 25 01 27
email: sokol at insa-toulouse.fr
http://www.lisbp.fr


From bbolker @ending from gm@il@com  Tue Dec  4 17:23:09 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Tue, 4 Dec 2018 11:23:09 -0500
Subject: [Rd] Bug report: Function ppois(0:20,
 lambda=0.9) does not generate a non-decreasing result.
In-Reply-To: <2787db5d-a009-40f5-bea6-8ddb10b10a50@insa-toulouse.fr>
References: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>
 <CALEXWq1WFLzQBgm8oF1myry25DZEyEA_jT3kFEnLYP55-06QKg@mail.gmail.com>
 <2787db5d-a009-40f5-bea6-8ddb10b10a50@insa-toulouse.fr>
Message-ID: <8c485115-a156-23f1-12e3-d57876299b02@gmail.com>


  I do think it's plausible to expect that we could get *non-decreasing*
results.

I get

any(diff(exp(ppois(0:19, lambda=0.9, log.p=TRUE)))<0)

as FALSE.

But I do get diff(ppois(18:19, lambda=0.9)) < 0.

Looking at the code of ppois, it's just (within C code) calling pgamma
with pgamma(lambda, shape=1+x, scale=1, lower.tail=FALSE):


identical(
  ppois(18:19,0.9),
  pgamma(0.9,shape=1+(18:19),scale=1,lower.tail=FALSE)
)

is TRUE.  So the problem (if we choose to define it as such) would be in
pgamma (upper tail should be a non-decreasing function of the shape
parameter) ... the code is here
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/nmath/pgamma.c
 if anyone wants to dig in ...




On 2018-12-04 5:46 a.m., Serguei Sokol wrote:
> Le 04/12/2018 ? 11:27, I?aki Ucar a ?crit?:
>> On Tue, 4 Dec 2018 at 11:12, <qweytr1 at mail.ustc.edu.cn> wrote:
>>> function ppois is a function calculate the CDF of Poisson
>>> distribution, it should generate a non-decreasing result, but what I
>>> got is:
>>>
>>>> any(diff(ppois(0:19,lambda=0.9))<0)
>>> [1] TRUE
>>>
>>> Actually,
>>>
>>>> ppois(19,lambda=0.9)<ppois(18,lambda=0.9)
>>> [1] TRUE
>>>
>>> Which could not be TRUE.
>> This is just another manifestation of
>>
>> 0.1 * 3 > 0.3
>> #> [1] TRUE
>>
>> This discussion returns to this list from time to time. TLDR; this is
>> not an R issue, but an unavoidable floating point issue.
> Well, here the request may be interpreted not as "do it without round
> error" which is indeed unavoidable but rather "please cope with rounding
> errors in a way that return consistent result for ppois()". You have
> indicated one way to do so (I have just added exp() in the row):
> 
> any(diff(exp(ppois(0:19, lambda=0.9, log.p=TRUE))) < 0)
> #[1] FALSE
> 
> But may be there is another, more economic way?
> 
> Serguei.
> 
>> ? Solution:
>> work with log-probabilities instead.
>>
>> any(diff(ppois(0:40, lambda=0.9, log.p=TRUE))<0)
>> #> [1] FALSE
>>
>> I?aki
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
>


From m@echler @ending from @t@t@m@th@ethz@ch  Tue Dec  4 19:12:41 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 4 Dec 2018 19:12:41 +0100
Subject: [Rd] Bug report: Function ppois(0:20,
 lambda=0.9) does not generate a non-decreasing result.
In-Reply-To: <2787db5d-a009-40f5-bea6-8ddb10b10a50@insa-toulouse.fr>
References: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>
 <CALEXWq1WFLzQBgm8oF1myry25DZEyEA_jT3kFEnLYP55-06QKg@mail.gmail.com>
 <2787db5d-a009-40f5-bea6-8ddb10b10a50@insa-toulouse.fr>
Message-ID: <23558.50073.837856.602176@stat.math.ethz.ch>

>>>>> Serguei Sokol 
>>>>>     on Tue, 4 Dec 2018 11:46:32 +0100 writes:

    > Le 04/12/2018 ? 11:27, I?aki Ucar a ?crit?:
    >> On Tue, 4 Dec 2018 at 11:12, <qweytr1 at mail.ustc.edu.cn> wrote:
    >>> function ppois is a function calculate the CDF of Poisson distribution, it should generate a non-decreasing result, but what I got is:
    >>> 
    >>>> any(diff(ppois(0:19,lambda=0.9))<0)
    >>> [1] TRUE
    >>> 
    >>> Actually,
    >>> 
    >>>> ppois(19,lambda=0.9)<ppois(18,lambda=0.9)
    >>> [1] TRUE
    >>> 
    >>> Which could not be TRUE.
    >> This is just another manifestation of
    >> 
    >> 0.1 * 3 > 0.3
    >> #> [1] TRUE
    >> 
    >> This discussion returns to this list from time to time. TLDR; this is
    >> not an R issue, but an unavoidable floating point issue.
    > Well, here the request may be interpreted not as "do it without round 
    > error" which is indeed unavoidable but rather "please cope with rounding 
    > errors in a way that return consistent result for ppois()". You have 
    > indicated one way to do so (I have just added exp() in the row):

    > any(diff(exp(ppois(0:19, lambda=0.9, log.p=TRUE))) < 0)
    > #[1] FALSE

    > But may be there is another, more economic way?

Well, log probabilites *are* very economic for many such p*()
functions.

OTOH, I'm a bit surprised that nobody mentioned the
'lower.tail=FALSE' option which here makes so very much sense,
and is I think slightly more intuitive than the log-probabilities: 
It gives much much much more accurate results for such outermost
right tail probabilities where p*() ~= 1 :

> ppois(15:19, lambda=0.9)
[1] 1 1 1 1 1
> ppois(15:19, lambda=0.9, lower.tail=FALSE)
[1] 3.801404e-15 2.006332e-16 1.000417e-17 4.727147e-19 2.122484e-20
>

... and if you compare with

> ppois(15:19, lambda=0.9, log.p=TRUE)

and notice how similar the numbers are, you may remember that indeed

log(1-p)  ~=  -p   when  |p| ? 1

Martin

    > Serguei.

    >> Solution:
    >> work with log-probabilities instead.

or 

    >> 
    >> any(diff(ppois(0:40, lambda=0.9, log.p=TRUE))<0)
    >> #> [1] FALSE
    >> 
    >> I?aki
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 


    > -- 
    > Serguei Sokol
    > Ingenieur de recherche INRA

    > Cellule math?matiques
    > LISBP, INSA/INRA UMR 792, INSA/CNRS UMR 5504
    > 135 Avenue de Rangueil
    > 31077 Toulouse Cedex 04

    > tel: +33 5 62 25 01 27
    > email: sokol at insa-toulouse.fr
    > http://www.lisbp.fr

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From wdunl@p @ending from tibco@com  Tue Dec  4 21:02:48 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Tue, 4 Dec 2018 12:02:48 -0800
Subject: [Rd] order(decreasing=c(TRUE,FALSE),...)
Message-ID: <CAF8bMcaMQQQMDKtOGJVVi6x_yCsDXjK1mxKvC_B0nRxh+KS03g@mail.gmail.com>

The NEWS file for R-devel (as of  2018-11-28 r75702) says

 ? order(...., decreasing=c(TRUE,FALSE)) could fail in some cases.
    Reported from StackOverflow via Karl Nordstr?m.

However, either I don't understand the meaning of decreasing=c(TRUE,FALSE)
or there are still problems.  I thought order(x,y,decreasing=c(TRUE,FALSE)
meant to return indices, i, such that x[i] was non-increasing and that ties
among the x's would be broken by y in non-decreasing order.  E.g., that
interpretation works for numeric vectors:
  > d <- data.frame(X=c(2,1,2,1,2,2,1), N=c(4:7,1:3))
  > d[order(d$X, d$N, decreasing=c(TRUE, FALSE)), ] # expect decreasing X
and, within group of tied Xes, increasing N
    X N
  5 2 1
  6 2 2
  1 2 4
  3 2 6
  7 1 3
  2 1 5
  4 1 7
But it fails for character vectors:  E.g., add some of those that have the
same sort order as 'N':

  > d$Char <- LETTERS[d$N]
  > identical(order(d$N), order(d$Char)) # expect TRUE
  [1] TRUE

I expected the new columns to give the same sort order when they replace
'd$N' in the first call to order, but they do not:  It acts like it would
with decreasing=c(TRUE,TRUE).

  > order(d$X, d$Char, decreasing=c(TRUE, FALSE))
  [1] 3 1 6 5 4 2 7
  > d[order(d$X, d$Char, decreasing=c(TRUE, FALSE)), ]
    X N Char
  3 2 6    F
  1 2 4    D
  6 2 2    B
  5 2 1    A
  4 1 7    G
  2 1 5    E
  7 1 3    C

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From c@@rdi@g@bor @ending from gm@il@com  Tue Dec  4 22:23:20 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 4 Dec 2018 21:23:20 +0000
Subject: [Rd] patch to support custom HTTP headers in download.file() and
 url()
Message-ID: <CABtg=KkB-e75kms1vL7XvjdcShwarBP1VLPnT2nb0SEFAJkarg@mail.gmail.com>

The patch below adds support for custom HTTP headers in
download.file() and url().

My main motivation for this is performing basic http authentication.
Some web sites do not support embedding the credentials into the URI
itself, they only work if the username and password are sent in the
HTTP headers. In fact specifying the username and password in the URI
has been deprecated.(https://en.wikipedia.org/wiki/Basic_access_authentication#URL_encoding)

Unfortunately this means that download.file() and url() cannot access
these password protected URLs. This patch fixes that.

I am happy to update the patch as needed.

Details:

* This patch adds supports for custom HTTP headers in download.file() and url().
* They both get a headers = NULL argument.
* This is implemented for the internal, wininet and libcurl methods.
* For other methods headers is silently ignored.
* For non-HTTP URLs headers is silently ignored.
* The headers argument must be a named character vector without NAs, or NULL.
* If headers is not named or it contains NAs, or the names contain
NAs, an error is thrown.
* For download.file() the method is chosen in R, and we a character
vector to C for libcurl and a collapsed string constant for internal
and wininet.
* For url() the method is only chosen in C, so we pass both a string
vector and the collapsed string vector to C. This is simpler than
collapsing in C.
* It is not possible to specify headers for file(), even though it handles URLs.
* The user agent (coming from the HTTPUserAgent options), will the the
first header, for the methods that need it together with the other
headers.
* We don't check for duplicate headers, just pass to the methods as
the user specified them.
* We test all methods.
* We have run the tests on macOS, Debian Linux and Windows 2016 Server.

You can also browse the changes here:
https://github.com/gaborcsardi/r-source/pull/3/files
You can also download the diff below from
https://github.com/gaborcsardi/r-source/pull/3.diff

Best,
Gabor

diff --git a/src/include/Rconnections.h b/src/include/Rconnections.h
index a2c53f058f..32bb35e31f 100644
--- a/src/include/Rconnections.h
+++ b/src/include/Rconnections.h
@@ -36,6 +36,7 @@ typedef enum {HTTPsh, FTPsh, HTTPSsh, FTPSsh} UrlScheme;
 typedef struct urlconn {
     void *ctxt;
     UrlScheme type;
+    char *headers;
 } *Rurlconn;

 /* used in internet module */
@@ -67,7 +68,7 @@ Rconnection getConnection_no_err(int n);
 Rboolean switch_stdout(int icon, int closeOnExit);
 void init_con(Rconnection new, const char *description, int enc,
       const char * const mode);
-Rconnection R_newurl(const char *description, const char * const
mode, int type);
+Rconnection R_newurl(const char *description, const char * const
mode, SEXP headers, int type);
 Rconnection R_newsock(const char *host, int port, int server, const
char * const mode, int timeout);
 Rconnection in_R_newsock(const char *host, int port, int server,
const char *const mode, int timeout);
 Rconnection R_newunz(const char *description, const char * const mode);
diff --git a/src/include/Rmodules/Rinternet.h b/src/include/Rmodules/Rinternet.h
index 619992eeda..5f02b78514 100644
--- a/src/include/Rmodules/Rinternet.h
+++ b/src/include/Rmodules/Rinternet.h
@@ -25,10 +25,10 @@


 typedef SEXP (*R_DownloadRoutine)(SEXP args);
-typedef Rconnection (*R_NewUrlRoutine)(const char *description, const
char * const mode, int method);
+typedef Rconnection (*R_NewUrlRoutine)(const char *description, const
char * const mode, SEXP headers, int method);
 typedef Rconnection (*R_NewSockRoutine)(const char *host, int port,
int server, const char *const mode, int timeout);

-typedef void * (*R_HTTPOpenRoutine)(const char *url, const char
*headers, const int cacheOK);
+typedef void * (*R_HTTPOpenRoutine)(const char *url, const char
*agent, const char *headers, const int cacheOK);
 typedef int    (*R_HTTPReadRoutine)(void *ctx, char *dest, int len);
 typedef void   (*R_HTTPCloseRoutine)(void *ctx);

diff --git a/src/library/base/R/connections.R b/src/library/base/R/connections.R
index 7445d2327b..50c0ea0a1c 100644
--- a/src/library/base/R/connections.R
+++ b/src/library/base/R/connections.R
@@ -91,10 +91,18 @@ fifo <- function(description, open = "", blocking = FALSE,

 url <- function(description, open = "", blocking = TRUE,
                 encoding = getOption("encoding"),
-                method = getOption("url.method", "default"))
+                method = getOption("url.method", "default"),
+                headers = NULL)
 {
     method <- match.arg(method, c("default", "internal", "libcurl", "wininet"))
-    .Internal(url(description, open, blocking, encoding, method))
+    if (!is.null(headers)) {
+      if (length(names(headers)) != length(headers) ||
+          any(names(headers) == "") || anyNA(headers) || anyNA(names(headers)))
+        stop("'headers' must must have names and must not be NA")
+      headers <- paste0(names(headers), ": ", headers)
+      headers <- list(headers, paste0(headers, "\r\n", collapse = ""))
+    }
+    .Internal(url(description, open, blocking, encoding, method, headers))
 }

 gzfile <- function(description, open = "",
diff --git a/src/library/base/man/connections.Rd
b/src/library/base/man/connections.Rd
index 04c77d6cac..bce232ba86 100644
--- a/src/library/base/man/connections.Rd
+++ b/src/library/base/man/connections.Rd
@@ -46,7 +46,8 @@ file(description = "", open = "", blocking = TRUE,

 url(description, open = "", blocking = TRUE,
     encoding = getOption("encoding"),
-    method = getOption("url.method", "default"))
+    method = getOption("url.method", "default"),
+    headers = NULL)

 gzfile(description, open = "", encoding = getOption("encoding"),
        compression = 6)
@@ -98,6 +99,10 @@ isIncomplete(con)
     \code{c("default", "internal", "wininet", "libcurl")}:
 %% FIXME:  Consider  "auto", as in download.file()
     see \sQuote{Details}.}
+  \item{headers}{named character vector of HTTP headers to use in HTTP
+    requests. It is ignored for non-HTTP URLs. The \code{User-Agent}
+    header, coming from the \code{HTTPUserAgent} option (see
+    \code{\link{options}}) is used as the first header, automatically.}
   \item{compression}{integer in 0--9.  The amount of compression to be
     applied when writing, from none to maximal available.  For
     \code{xzfile} can also be negative: see the \sQuote{Compression}
diff --git a/src/library/utils/R/unix/download.file.R
b/src/library/utils/R/unix/download.file.R
index 460c4f350b..0e67b267d8 100644
--- a/src/library/utils/R/unix/download.file.R
+++ b/src/library/utils/R/unix/download.file.R
@@ -18,7 +18,8 @@

 download.file <-
     function(url, destfile, method, quiet = FALSE, mode = "w",
-             cacheOK = TRUE, extra = getOption("download.file.extra"), ...)
+             cacheOK = TRUE, extra = getOption("download.file.extra"),
+             headers = NULL, ...)
 {
     destfile # check supplied
     method <- if (missing(method))
@@ -33,14 +34,26 @@ download.file <-
  method <- if(startsWith(url, "file:")) "internal" else "libcurl"
     }

+    if (length(names(headers)) != length(headers) ||
+        any(names(headers) == "") || anyNA(headers) || anyNA(names(headers)))
+        stop("'headers' must must have names and must not be NA")
+
     switch(method,
    "internal" = {
-       status <- .External(C_download, url, destfile, quiet, mode, cacheOK)
+               if (!is.null(headers)) {
+                   headers <- paste0(names(headers), ": ", headers,
"\r\n", collapse = "")
+               }
+               status <- .External(C_download, url, destfile, quiet, mode,
+                                   cacheOK, headers)
        ## needed for Mac GUI from download.packages etc
        if(!quiet) flush.console()
    },
    "libcurl" = {
-       status <- .Internal(curlDownload(url, destfile, quiet, mode, cacheOK))
+               if (!is.null(headers)) {
+                   headers <- paste0(names(headers), ": ", headers)
+               }
+               status <- .Internal(curlDownload(url, destfile, quiet, mode,
+                                                cacheOK, headers))
        if(!quiet) flush.console()
    },
    "wget" = {
diff --git a/src/library/utils/R/windows/download.file.R
b/src/library/utils/R/windows/download.file.R
index 4a84134470..450c22304d 100644
--- a/src/library/utils/R/windows/download.file.R
+++ b/src/library/utils/R/windows/download.file.R
@@ -18,7 +18,8 @@

 download.file <-
     function(url, destfile, method, quiet = FALSE, mode = "w",
-             cacheOK = TRUE, extra = getOption("download.file.extra"), ...)
+             cacheOK = TRUE, extra = getOption("download.file.extra"),
+             headers = NULL, ...)
 {
     destfile # check supplied
     method <- if (missing(method))
@@ -38,13 +39,24 @@ download.file <-
             else "wininet"
     }

+    if (length(names(headers)) != length(headers) ||
+        any(names(headers) == "") || anyNA(headers) || anyNA(names(headers)))
+        stop("'headers' must must have names and must not be NA")
+
     switch(method,
    "internal" =, "wininet" = {
-       status <- .External(C_download, url, destfile, quiet, mode, cacheOK,
-   method == "wininet")
+               if (!is.null(headers)) {
+                   headers <- paste0(names(headers), ": ", headers,
"\r\n", collapse = "")
+               }
+               status <- .External(C_download, url, destfile, quiet,
mode, cacheOK,
+   headers, method == "wininet")
    },
    "libcurl" = {
-       status <- .Internal(curlDownload(url, destfile, quiet, mode, cacheOK))
+               if (!is.null(headers)) {
+                   headers <- paste0(names(headers), ": ", headers)
+               }
+               status <- .Internal(curlDownload(url, destfile, quiet,
mode, cacheOK,
+                                                headers))
    },
    "wget" = {
        if(length(url) != 1L || typeof(url) != "character")
diff --git a/src/library/utils/man/download.file.Rd
b/src/library/utils/man/download.file.Rd
index 1ce34e6953..6aa90719b2 100644
--- a/src/library/utils/man/download.file.Rd
+++ b/src/library/utils/man/download.file.Rd
@@ -15,7 +15,8 @@
 \usage{
 download.file(url, destfile, method, quiet = FALSE, mode = "w",
               cacheOK = TRUE,
-              extra = getOption("download.file.extra"), \dots)
+              extra = getOption("download.file.extra"),
+              headers = NULL, \dots)
 }
 \arguments{
   \item{url}{a \code{\link{character}} string (or longer vector e.g.,
@@ -48,6 +49,11 @@ download.file(url, destfile, method, quiet = FALSE,
mode = "w",
   \item{extra}{character vector of additional command-line arguments for
     the \code{"wget"} and \code{"curl"} methods.}

+  \item{headers}{named character vector of HTTP headers to use in HTTP
+    requests. It is ignored for non-HTTP URLs. The \code{User-Agent}
+    header, coming from the \code{HTTPUserAgent} option (see
+    \code{\link{options}}) is used as the first header, automatically.}
+
   \item{\dots}{allow additional arguments to be passed, unused.}
 }
 \details{
diff --git a/src/library/utils/src/init.c b/src/library/utils/src/init.c
index ebbaf1054a..785347b772 100644
--- a/src/library/utils/src/init.c
+++ b/src/library/utils/src/init.c
@@ -74,9 +74,9 @@ static const R_CallMethodDef CallEntries[] = {

 static const R_ExternalMethodDef ExtEntries[] = {
 #ifdef Win32
-    EXTDEF(download, 6),
+    EXTDEF(download, 7),
 #else
-    EXTDEF(download, 5),
+    EXTDEF(download, 6),
 #endif
     EXTDEF(unzip, 7),
     EXTDEF(Rprof, 8),
diff --git a/src/library/utils/tests/download.file.R
b/src/library/utils/tests/download.file.R
new file mode 100644
index 0000000000..1cbe2e0db1
--- /dev/null
+++ b/src/library/utils/tests/download.file.R
@@ -0,0 +1,173 @@
+
+## Tests for HTTP headers -----------------------------------------------
+
+is_online <- function() {
+  tryCatch({
+    con <- suppressWarnings(socketConnection("8.8.8.8", port = 53))
+    close(con)
+    con <- url("http://eu.httpbin.org/headers")
+    lines <- readLines(con)
+    close(con)
+    stopifnot(any(grepl("Host.*eu.httpbin.org", lines)))
+    TRUE
+  }, error = function(e) FALSE)
+}
+
+get_headers <- function(path = "anything", quiet = TRUE, ...,
+                        protocol = "http") {
+  url <- get_path(path, protocol)
+  tmp <-  tempfile()
+  on.exit(try(unlink(tmp)), add = TRUE)
+  download.file(url, tmp, quiet = quiet, ...)
+  readLines(tmp)
+}
+
+get_headers_url <- function(path = "anything", ..., protocol = "http") {
+  con <- url(get_path(path, protocol), ...)
+  on.exit(try(close(con)), add = TRUE)
+  readLines(con)
+}
+
+get_path <- function(path = "anything", protocol = "http") {
+  paste0(protocol, "://", "eu.httpbin.org/", path)
+}
+
+with_options <- function(opts, expr) {
+  old <- do.call(options, as.list(opts))
+  on.exit(options(old), add = TRUE)
+  expr
+}
+
+tests <- function() {
+  cat("- User agent is still set\n")
+  with_options(list(HTTPUserAgent = "foobar"), {
+    h <- get_headers()
+    stopifnot(any(grepl("User-Agent.*foobar", h)))
+  })
+
+  with_options(list(HTTPUserAgent = "foobar"), {
+    h <- get_headers(headers = c(foo = "bar", zzzz = "bee"))
+    stopifnot(any(grepl("User-Agent.*foobar", h)))
+    stopifnot(any(grepl("Foo.*bar", h)))
+    stopifnot(any(grepl("Zzzz.*bee", h)))
+  })
+
+  cat("- Can supply headers\n")
+  h <- get_headers(headers = c(foo = "bar", zzzz = "bee"))
+  stopifnot(any(grepl("Foo.*bar", h)))
+  stopifnot(any(grepl("Zzzz.*bee", h)))
+
+  cat("- Basic auth\n")
+  ret <- tryCatch({
+    h <- suppressWarnings(get_headers(
+      "basic-auth/Aladdin/OpenSesame",
+      headers = c(Authorization = "Basic QWxhZGRpbjpPcGVuU2VzYW1l")))
+    TRUE
+  }, error = function(e) FALSE)
+  stopifnot(any(grepl("authenticated.*true", h)))
+
+  if (getOption("download.file.method") == "libcurl") {
+    cat("- Multiple urls (libcurl only)\n")
+    urls <- get_path(c("anything", "headers"))
+    tmp1 <- tempfile()
+    tmp2 <- tempfile()
+    on.exit(unlink(c(tmp1, tmp2)), add = TRUE)
+    download.file(urls, c(tmp1, tmp2), quiet = TRUE,
+                  headers = c(foo = "bar", zzzz = "bee"))
+    h1 <- readLines(tmp1)
+    h2 <- readLines(tmp2)
+    stopifnot(any(grepl("Foo.*bar", h1)))
+    stopifnot(any(grepl("Zzzz.*bee", h1)))
+    stopifnot(any(grepl("Foo.*bar", h2)))
+    stopifnot(any(grepl("Zzzz.*bee", h2)))
+  }
+
+  if (getOption("download.file.method", "") != "internal") {
+    cat("- HTTPS\n")
+    h <- get_headers(headers = c(foo = "bar", zzzz = "bee"),
+                     protocol = "https")
+    stopifnot(any(grepl("Foo.*bar", h)))
+    stopifnot(any(grepl("Zzzz.*bee", h)))
+  }
+
+  cat("- If headers not named, then error\n")
+  ret <- tryCatch(
+    download.file(get_path(), headers = c("foo", "xxx" = "bar")),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+  ret <- tryCatch(
+    download.file(get_path(), headers = "foobar"),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+
+  cat("- If headers are NA, then error\n")
+  ret <- tryCatch(
+    download.file(get_path(), headers = c("foo" = NA, "xxx" = "bar")),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+  ret <- tryCatch(
+    download.file(
+      get_path(), quiet = TRUE,
+      headers = structure(c("foo", "bar", names = c("foo", NA)))),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+
+  cat("- user agent is set in url()\n")
+  with_options(list(HTTPUserAgent = "foobar"), {
+    h <- get_headers_url()
+    stopifnot(any(grepl("User-Agent.*foobar", h)))
+  })
+
+  cat("- file() still works with URLs\n")
+  con <- file(get_path("anything", "http"))
+  on.exit(close(con), add = TRUE)
+  h <- readLines(con)
+  stopifnot(any(grepl("Host.*eu.httpbin.org", h)))
+
+  cat("- If headers not named, then url() errors\n")
+  ret <- tryCatch(
+    url(get_path(), headers = c("foo", "xxx" = "bar")),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+
+  cat("- If headers are NA, then url() errors\n")
+  ret <- tryCatch(
+    url(get_path(), headers = c("foo" = "bar", "xxx" = NA)),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+  ret <- tryCatch(
+    url(get_path(),
+        headers = structure(c("1", "2"), names = c("foo", NA))),
+    error = function(err) TRUE)
+  stopifnot(isTRUE(ret))
+
+  cat("- Can supply headers in url()\n")
+  h <- get_headers_url(headers = c(foo = "bar", zzzz = "bee"))
+  stopifnot(any(grepl("Foo.*bar", h)))
+  stopifnot(any(grepl("Zzzz.*bee", h)))
+
+  if (getOption("download.file.method", "") != "internal") {
+    cat("- HTTPS with url()\n")
+    h <- get_headers_url(headers = c(foo = "bar", zzzz = "bee"),
+                         protocol = "https")
+    stopifnot(any(grepl("Foo.*bar", h)))
+    stopifnot(any(grepl("Zzzz.*bee", h)))
+  }
+}
+
+main <- function() {
+  cat("internal method\n")
+  with_options(c(download.file.method = "internal"), tests())
+
+  if (.Platform$OS.type == "windows")  {
+    cat("\nwininet method\n")
+    with_options(c(download.file.method = "wininet"), tests())
+  }
+
+  if (isTRUE(capabilities()[["libcurl"]])) {
+    cat("\nlibcurl method\n")
+    with_options(c(download.file.method = "libcurl"), tests())
+  }
+}
+
+if (is_online()) main()
diff --git a/src/main/connections.c b/src/main/connections.c
index c4cac3c92a..e534cfbaaf 100644
--- a/src/main/connections.c
+++ b/src/main/connections.c
@@ -5236,15 +5236,16 @@ SEXP attribute_hidden do_sumconnection(SEXP
call, SEXP op, SEXP args, SEXP env)

 // in internet module: 'type' is unused
 extern Rconnection
-R_newCurlUrl(const char *description, const char * const mode, int type);
+R_newCurlUrl(const char *description, const char * const mode, SEXP
headers, int type);


-/* op = 0: .Internal( url(description, open, blocking, encoding, method))
+/* op = 0: .Internal( url(description, open, blocking, encoding,
method, headers))
    op = 1: .Internal(file(description, open, blocking, encoding, method, raw))
 */
 SEXP attribute_hidden do_url(SEXP call, SEXP op, SEXP args, SEXP env)
 {
-    SEXP scmd, sopen, ans, class, enc;
+    SEXP scmd, sopen, ans, class, enc, headers = R_NilValue,
+ headers_flat = R_NilValue;
     char *class2 = "url";
     const char *url, *open;
     int ncon, block, raw = 0, defmeth,
@@ -5333,6 +5334,15 @@ SEXP attribute_hidden do_url(SEXP call, SEXP
op, SEXP args, SEXP env)
     error(_("invalid '%s' argument"), "raw");
     }

+    // --------- headers, for url() only
+    if(PRIMVAL(op) == 0) {
+ SEXP lheaders = CAD4R(CDR(args));
+ if (!isNull(lheaders)) {
+    headers = VECTOR_ELT(lheaders, 0);
+    headers_flat = VECTOR_ELT(lheaders, 1);
+ }
+    }
+
     if(!meth) {
  if (strncmp(url, "ftps://", 7) == 0) {
 #ifdef HAVE_LIBCURL
@@ -5369,12 +5379,12 @@ SEXP attribute_hidden do_url(SEXP call, SEXP
op, SEXP args, SEXP env)
     } else if (inet) {
  if(meth) {
 # ifdef HAVE_LIBCURL
-    con = R_newCurlUrl(url, strlen(open) ? open : "r", 0);
+    con = R_newCurlUrl(url, strlen(open) ? open : "r", headers, 0);
 # else
     error("url(method = \"libcurl\") is not supported on this platform");
 # endif
  } else {
-    con = R_newurl(url, strlen(open) ? open : "r", winmeth);
+    con = R_newurl(url, strlen(open) ? open : "r", headers_flat, winmeth);
     ((Rurlconn)con->private)->type = type;
  }
     } else {
diff --git a/src/main/internet.c b/src/main/internet.c
index 10dfa2b30a..801d9ed1cd 100644
--- a/src/main/internet.c
+++ b/src/main/internet.c
@@ -90,11 +90,11 @@ SEXP Rdownload(SEXP args)
 }

 Rconnection attribute_hidden
-R_newurl(const char *description, const char * const mode, int type)
+R_newurl(const char *description, const char * const mode, SEXP
headers, int type)
 {
     if(!initialized) internet_Init();
     if(initialized > 0)
- return (*ptr->newurl)(description, mode, type);
+ return (*ptr->newurl)(description, mode, headers, type);
     else {
  error(_("internet routines cannot be loaded"));
  return (Rconnection)0;
@@ -118,7 +118,7 @@ void *R_HTTPOpen(const char *url)
 {
     if(!initialized) internet_Init();
     if(initialized > 0)
- return (*ptr->HTTPOpen)(url, NULL, 0);
+ return (*ptr->HTTPOpen)(url, NULL, NULL, 0);
     else {
  error(_("internet routines cannot be loaded"));
  return NULL;
@@ -340,11 +340,11 @@ SEXP attribute_hidden do_curlDownload(SEXP call,
SEXP op, SEXP args, SEXP rho)
 }

 Rconnection attribute_hidden
-R_newCurlUrl(const char *description, const char * const mode, int type)
+R_newCurlUrl(const char *description, const char * const mode, SEXP
headers, int type)
 {
     if(!initialized) internet_Init();
     if(initialized > 0)
- return (*ptr->newcurlurl)(description, mode, type);
+ return (*ptr->newcurlurl)(description, mode, headers, type);
     else {
  error(_("internet routines cannot be loaded"));
  return (Rconnection)0;
diff --git a/src/main/names.c b/src/main/names.c
index ed21798a85..e03fdd4588 100644
--- a/src/main/names.c
+++ b/src/main/names.c
@@ -861,7 +861,7 @@ FUNTAB R_FunTab[] =
 {"close", do_close, 0,      111,     2,      {PP_FUNCALL, PREC_FN, 0}},
 {"flush", do_flush, 0,      111,     1,      {PP_FUNCALL, PREC_FN, 0}},
 {"file", do_url, 1,      11,     6,      {PP_FUNCALL, PREC_FN, 0}},
-{"url", do_url, 0,      11,     5,      {PP_FUNCALL, PREC_FN, 0}},
+{"url", do_url, 0,      11,     6,      {PP_FUNCALL, PREC_FN, 0}},
 {"pipe", do_pipe, 0,      11,     3,      {PP_FUNCALL, PREC_FN, 0}},
 {"fifo", do_fifo, 0,      11,     4,      {PP_FUNCALL, PREC_FN, 0}},
 {"gzfile", do_gzfile, 0,      11,     4,      {PP_FUNCALL, PREC_FN, 0}},
@@ -983,7 +983,7 @@ FUNTAB R_FunTab[] =
 {"eSoftVersion",do_eSoftVersion, 0, 11, 0, {PP_FUNCALL, PREC_FN, 0}},
 {"curlVersion", do_curlVersion, 0, 11, 0, {PP_FUNCALL, PREC_FN, 0}},
 {"curlGetHeaders",do_curlGetHeaders,0, 11, 3, {PP_FUNCALL, PREC_FN, 0}},
-{"curlDownload",do_curlDownload, 0, 11, 5, {PP_FUNCALL, PREC_FN, 0}},
+{"curlDownload",do_curlDownload, 0, 11, 6, {PP_FUNCALL, PREC_FN, 0}},

 {NULL, NULL, 0, 0, 0, {PP_INVALID, PREC_FN, 0}},
 };
diff --git a/src/modules/internet/internet.c b/src/modules/internet/internet.c
index 0a4305348f..8f6c75931c 100644
--- a/src/modules/internet/internet.c
+++ b/src/modules/internet/internet.c
@@ -32,7 +32,7 @@
 #include <errno.h>
 #include <R_ext/Print.h>

-static void *in_R_HTTPOpen(const char *url, const char *headers,
const int cacheOK);
+static void *in_R_HTTPOpen(const char *url, const char *agent, const
char *headers, const int cacheOK);
 static int   in_R_HTTPRead(void *ctx, char *dest, int len);
 static void  in_R_HTTPClose(void *ctx);

@@ -44,17 +44,17 @@ SEXP in_do_curlVersion(SEXP call, SEXP op, SEXP
args, SEXP rho);
 SEXP in_do_curlGetHeaders(SEXP call, SEXP op, SEXP args, SEXP rho);
 SEXP in_do_curlDownload(SEXP call, SEXP op, SEXP args, SEXP rho);
 Rconnection
-in_newCurlUrl(const char *description, const char * const mode, int type);
+in_newCurlUrl(const char *description, const char * const mode, SEXP
headers, int type);

 #ifdef Win32
-static void *in_R_HTTPOpen2(const char *url, const char *headers,
const int cacheOK);
+static void *in_R_HTTPOpen2(const char *url, const char *agent, const
char *headers, const int cacheOK);
 static int   in_R_HTTPRead2(void *ctx, char *dest, int len);
 static void  in_R_HTTPClose2(void *ctx);
 static void *in_R_FTPOpen2(const char *url);

-#define Ri_HTTPOpen(url, headers, cacheOK) \
-    (meth ? in_R_HTTPOpen2(url, headers, cacheOK) : \
- in_R_HTTPOpen(url, headers, cacheOK));
+#define Ri_HTTPOpen(url, agent, headers, cacheOK)   \
+    (meth ? in_R_HTTPOpen2(url, agent, headers, cacheOK) : \
+       in_R_HTTPOpen(url, agent, headers, cacheOK));

 #define Ri_HTTPRead(ctx, dest, len) \
     (meth ? in_R_HTTPRead2(ctx, dest, len) : in_R_HTTPRead(ctx, dest, len))
@@ -115,19 +115,20 @@ static Rboolean url_open(Rconnection con)
 #endif
     case HTTPsh:
     {
- SEXP sheaders, agentFun;
- const char *headers;
+ SEXP sagent, agentFun;
+ const char *agent;
  SEXP s_makeUserAgent = install("makeUserAgent");
  agentFun = PROTECT(lang1(s_makeUserAgent)); // defaults to ,TRUE
  SEXP utilsNS = PROTECT(R_FindNamespace(mkString("utils")));
- sheaders = eval(agentFun, utilsNS);
+ struct urlconn *uc = con->private;
+ sagent = eval(agentFun, utilsNS);
  UNPROTECT(1); /* utilsNS */
- PROTECT(sheaders);
- if(TYPEOF(sheaders) == NILSXP)
-    headers = NULL;
+ PROTECT(sagent);
+ if(TYPEOF(sagent) == NILSXP)
+    agent = NULL;
  else
-    headers = CHAR(STRING_ELT(sheaders, 0));
- ctxt = in_R_HTTPOpen(url, headers, 0);
+    agent = CHAR(STRING_ELT(sagent, 0));
+ ctxt = in_R_HTTPOpen(url, agent, uc->headers, 0);
  UNPROTECT(2);
  if(ctxt == NULL) {
   /* if we call error() we get a connection leak*/
@@ -167,13 +168,15 @@ static Rboolean url_open(Rconnection con)
 static void url_close(Rconnection con)
 {
     UrlScheme type = ((Rurlconn)(con->private))->type;
+    struct urlconn *uc = con->private;
     switch(type) {
     case HTTPsh:
     case HTTPSsh:
- in_R_HTTPClose(((Rurlconn)(con->private))->ctxt);
+ if (uc && uc->headers) free(uc->headers);
+ in_R_HTTPClose(uc->ctxt);
  break;
     case FTPsh:
- in_R_FTPClose(((Rurlconn)(con->private))->ctxt);
+ in_R_FTPClose(uc->ctxt);
  break;
     default:
  break;
@@ -239,16 +242,17 @@ static Rboolean url_open2(Rconnection con)
     case HTTPSsh:
     case HTTPsh:
     {
- SEXP sheaders, agentFun;
- const char *headers;
+ SEXP sagent, agentFun;
+ const char *agent;
  SEXP s_makeUserAgent = install("makeUserAgent");
+ struct urlconn * uc = con->private;
  agentFun = PROTECT(lang2(s_makeUserAgent, ScalarLogical(0)));
- sheaders = PROTECT(eval(agentFun, R_FindNamespace(mkString("utils"))));
- if(TYPEOF(sheaders) == NILSXP)
-    headers = NULL;
+ sagent = PROTECT(eval(agentFun, R_FindNamespace(mkString("utils"))));
+ if(TYPEOF(sagent) == NILSXP)
+    agent = NULL;
  else
-    headers = CHAR(STRING_ELT(sheaders, 0));
- ctxt = in_R_HTTPOpen2(url, headers, 0);
+    agent = CHAR(STRING_ELT(sagent, 0));
+ ctxt = in_R_HTTPOpen2(url, agent, uc->headers, 0);
  UNPROTECT(2);
  if(ctxt == NULL) {
   /* if we call error() we get a connection leak*/
@@ -340,10 +344,9 @@ static size_t url_read2(void *ptr, size_t size,
size_t nitems,
 #endif

 static Rconnection
-in_R_newurl(const char *description, const char * const mode, int type)
+in_R_newurl(const char *description, const char * const mode, SEXP
headers, int type)
 {
     Rconnection new;
-
     new = (Rconnection) malloc(sizeof(struct Rconn));
     if(!new) error(_("allocation of url connection failed"));
     new->class = (char *) malloc(strlen("url-wininet") + 1);
@@ -377,12 +380,21 @@ in_R_newurl(const char *description, const char
* const mode, int type)
  strcpy(new->class, "url");
     }
     new->fgetc = &dummy_fgetc;
-    new->private = (void *) malloc(sizeof(struct urlconn));
+    struct urlconn *uc = new->private = (void *) malloc(sizeof(struct
urlconn));
     if(!new->private) {
  free(new->description); free(new->class); free(new);
  error(_("allocation of url connection failed"));
  /* for Solaris 12.5 */ new = NULL;
     }
+    uc->headers = NULL;
+    if(!isNull(headers)) {
+ uc->headers = strdup(CHAR(STRING_ELT(headers, 0)));
+ if(!uc->headers) {
+    free(new->description); free(new->class); free(new->private); free(new);
+    error(_("allocation of url connection failed"));
+    /* for Solaris 12.5 */ new = NULL;
+ }
+    }

     IDquiet = TRUE;
     return new;
@@ -443,7 +455,7 @@ static void doneprogressbar(void *data)
 #define IBUFSIZE 4096
 static SEXP in_do_download(SEXP args)
 {
-    SEXP scmd, sfile, smode;
+    SEXP scmd, sfile, smode, sheaders;
     const char *url, *file, *mode;
     int quiet, status = 0, cacheOK;
 #ifdef Win32
@@ -470,10 +482,13 @@ static SEXP in_do_download(SEXP args)
     if(!isString(smode) || length(smode) != 1)
  error(_("invalid '%s' argument"), "mode");
     mode = CHAR(STRING_ELT(smode, 0));
-    cacheOK = asLogical(CAR(args));
+    cacheOK = asLogical(CAR(args)); args = CDR(args);
     if(cacheOK == NA_LOGICAL)
  error(_("invalid '%s' argument"), "cacheOK");
     Rboolean file_URL = (strncmp(url, "file://", 7) == 0);
+    sheaders = CAR(args);
+    if(TYPEOF(sheaders) != NILSXP && !isString(sheaders))
+        error(_("invalid '%s' argument"), "headers");
 #ifdef Win32
     int meth = asLogical(CADR(args));
     if(meth == NA_LOGICAL)
@@ -542,7 +557,7 @@ static SEXP in_do_download(SEXP args)

  R_Busy(1);
  if(!quiet) REprintf(_("trying URL '%s'\n"), url);
- SEXP agentFun, sheaders;
+ SEXP agentFun, sagent;
 #ifdef Win32
  R_FlushConsole();
  if(meth)
@@ -553,12 +568,15 @@ static SEXP in_do_download(SEXP args)
  agentFun = PROTECT(lang1(install("makeUserAgent")));
 #endif
  SEXP utilsNS = PROTECT(R_FindNamespace(mkString("utils")));
- sheaders = eval(agentFun, utilsNS);
+ sagent = eval(agentFun, utilsNS);
  UNPROTECT(1); /* utilsNS */
- PROTECT(sheaders);
- const char *headers = (TYPEOF(sheaders) == NILSXP) ?
+ PROTECT(sagent);
+ const char *cagent = (TYPEOF(sagent) == NILSXP) ?
+    NULL : CHAR(STRING_ELT(sagent, 0));
+ /* TODO: flatten headers */
+ const char *cheaders = (TYPEOF(sheaders) == NILSXP) ?
     NULL : CHAR(STRING_ELT(sheaders, 0));
- ctxt = Ri_HTTPOpen(url, headers, cacheOK);
+ ctxt = Ri_HTTPOpen(url, cagent, cheaders, cacheOK);
  UNPROTECT(2);
  if(ctxt == NULL) status = 1;
  else {
@@ -766,18 +784,31 @@ static SEXP in_do_download(SEXP args)
 }


-void *in_R_HTTPOpen(const char *url, const char *headers, const int cacheOK)
+void *in_R_HTTPOpen(const char *url, const char *agent, const char
*headers, const int cacheOK)
 {
     inetconn *con;
     void *ctxt;
     int timeout = asInteger(GetOption1(install("timeout")));
     DLsize_t len = -1;
     char *type = NULL;
+    char *fullheaders = NULL;

     if(timeout == NA_INTEGER || timeout <= 0) timeout = 60;

     RxmlNanoHTTPTimeout(timeout);
-    ctxt = RxmlNanoHTTPOpen(url, NULL, headers, cacheOK);
+
+    if (agent || headers) {
+ fullheaders = malloc((agent ? strlen(agent) : 0) +
+     (headers ? strlen(headers) : 0) + 1);
+ if(!fullheaders) error(_("could not allocate memory for http headers"));
+ fullheaders[0] = '\0';
+ if (agent) strcat(fullheaders, agent);
+ if (headers) strcat(fullheaders, headers);
+    }
+
+    ctxt = RxmlNanoHTTPOpen(url, NULL, fullheaders, cacheOK);
+    if (fullheaders) free(fullheaders);
+
     if(ctxt != NULL) {
  int rc = RxmlNanoHTTPReturnCode(ctxt);
  if(rc != 200) {
@@ -885,7 +916,7 @@ typedef struct wictxt {
     HINTERNET session;
 } wIctxt, *WIctxt;

-static void *in_R_HTTPOpen2(const char *url, const char *headers,
+static void *in_R_HTTPOpen2(const char *url, const char *agent, const
char *headers,
     const int cacheOK)
 {
     WIctxt  wictxt;
@@ -896,7 +927,7 @@ static void *in_R_HTTPOpen2(const char *url, const
char *headers,
     wictxt->length = -1;
     wictxt->type = NULL;
     wictxt->hand =
- InternetOpen(headers, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
+ InternetOpen(agent, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
     if(!wictxt->hand) {
  free(wictxt);
  /* error("cannot open Internet connection"); */
@@ -906,7 +937,7 @@ static void *in_R_HTTPOpen2(const char *url, const
char *headers,
     // use keep-alive semantics, do not use local WinINet cache.
     DWORD flags = INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_NO_CACHE_WRITE;
     if(!cacheOK) flags |= INTERNET_FLAG_PRAGMA_NOCACHE;
-    wictxt->session = InternetOpenUrl(wictxt->hand, url, NULL, 0, flags, 0);
+    wictxt->session = InternetOpenUrl(wictxt->hand, url, headers,
headers ? -1 : 0, flags, 0);
     if(!wictxt->session) {
  DWORD err1 = GetLastError(), err2, blen = 101;
  InternetCloseHandle(wictxt->hand);
diff --git a/src/modules/internet/libcurl.c b/src/modules/internet/libcurl.c
index 669c7240ef..6bf01ef175 100644
--- a/src/modules/internet/libcurl.c
+++ b/src/modules/internet/libcurl.c
@@ -222,7 +222,6 @@ static int curlMultiCheckerrs(CURLM *mhnd)
     }
     return retval;
 }
-
 static void curlCommon(CURL *hnd, int redirect, int verify)
 {
     const char *capath = getenv("CURL_CA_BUNDLE");
@@ -469,10 +468,10 @@ in_do_curlDownload(SEXP call, SEXP op, SEXP
args, SEXP rho)
     error(_("download.file(method = \"libcurl\") is not supported on
this platform"));
     return R_NilValue;
 #else
-    SEXP scmd, sfile, smode;
+    SEXP scmd, sfile, smode, sheaders;
     const char *url, *file, *mode;
     int quiet, cacheOK;
-    struct curl_slist *slist1 = NULL;
+    struct curl_slist *headers = NULL;

     scmd = CAR(args); args = CDR(args);
     if (!isString(scmd) || length(scmd) < 1)
@@ -490,9 +489,23 @@ in_do_curlDownload(SEXP call, SEXP op, SEXP args, SEXP rho)
     if (!isString(smode) || length(smode) != 1)
  error(_("invalid '%s' argument"), "mode");
     mode = CHAR(STRING_ELT(smode, 0));
-    cacheOK = asLogical(CAR(args));
+    cacheOK = asLogical(CAR(args)); args = CDR(args);
     if (cacheOK == NA_LOGICAL)
  error(_("invalid '%s' argument"), "cacheOK");
+    sheaders = CAR(args);
+    if(TYPEOF(sheaders) != NILSXP && !isString(sheaders))
+        error(_("invalid '%s' argument"), "headers");
+    if(TYPEOF(sheaders) != NILSXP) {
+ for (int i = 0; i < LENGTH(sheaders); i++) {
+    struct curl_slist *tmp =
+ curl_slist_append(headers, CHAR(STRING_ELT(sheaders, i)));
+    if (!tmp) {
+ curl_slist_free_all(headers);
+ error(_("out of memory"));
+    }
+    headers = tmp;
+ }
+    }

     /* This comes mainly from curl --libcurl on the call used by
        download.file(method = "curl").
@@ -502,7 +515,13 @@ in_do_curlDownload(SEXP call, SEXP op, SEXP args, SEXP rho)
     if (!cacheOK) {
  /* This _is_ the right way to do this: see ?14.9 of
    http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html */
- slist1 = curl_slist_append(slist1, "Pragma: no-cache");
+ struct curl_slist *tmp =
+    curl_slist_append(headers, "Pragma: no-cache");
+ if  (!tmp) {
+    curl_slist_free_all(headers);
+    error(_("out of memory"));
+ }
+ headers = tmp;
     }

     CURLM *mhnd = curl_multi_init();
@@ -521,8 +540,7 @@ in_do_curlDownload(SEXP call, SEXP op, SEXP args, SEXP rho)
 #if (LIBCURL_VERSION_MINOR >= 25)
  curl_easy_setopt(hnd[i], CURLOPT_TCP_KEEPALIVE, 1L);
 #endif
- if (!cacheOK)
-    curl_easy_setopt(hnd[i], CURLOPT_HTTPHEADER, slist1);
+ curl_easy_setopt(hnd[i], CURLOPT_HTTPHEADER, headers);

  /* check that destfile can be written */
  file = translateChar(STRING_ELT(sfile, i));
@@ -660,7 +678,7 @@ in_do_curlDownload(SEXP call, SEXP op, SEXP args, SEXP rho)
     if(nurls == 1)
  curl_easy_getinfo(hnd[0], CURLINFO_RESPONSE_CODE, &status);
     curl_multi_cleanup(mhnd);
-    if (!cacheOK) curl_slist_free_all(slist1);
+    curl_slist_free_all(headers);

     if(nurls > 1) {
  if (n_err == nurls) error(_("cannot download any files"));
@@ -703,6 +721,7 @@ typedef struct Curlconn {
     Rboolean available; // to be read out
     int sr; // 'still running' count
     CURLM *mh; CURL *hnd;
+    struct curl_slist *headers;
 } *RCurlconn;

 static size_t rcvData(void *ptr, size_t size, size_t nitems, void *ctx)
@@ -771,6 +790,7 @@ static void Curl_close(Rconnection con)
 {
     RCurlconn ctxt = (RCurlconn)(con->private);

+    curl_slist_free_all(ctxt->headers);
     curl_multi_remove_handle(ctxt->mh, ctxt->hnd);
     curl_easy_cleanup(ctxt->hnd);
     curl_multi_cleanup(ctxt->mh);
@@ -830,6 +850,9 @@ static Rboolean Curl_open(Rconnection con)
     curl_easy_setopt(ctxt->hnd, CURLOPT_TCP_KEEPALIVE, 1L);
 #endif

+    if (ctxt->headers) {
+ curl_easy_setopt(ctxt->hnd, CURLOPT_HTTPHEADER, ctxt->headers);
+    }
     curl_easy_setopt(ctxt->hnd, CURLOPT_WRITEFUNCTION, rcvData);
     curl_easy_setopt(ctxt->hnd, CURLOPT_WRITEDATA, ctxt);
     ctxt->mh = curl_multi_init();
@@ -868,7 +891,8 @@ static int Curl_fgetc_internal(Rconnection con)

 // 'type' is unused.
 Rconnection
-in_newCurlUrl(const char *description, const char * const mode, int type)
+in_newCurlUrl(const char *description, const char * const mode,
+      SEXP headers, int type)
 {
 #ifdef HAVE_LIBCURL
     Rconnection new = (Rconnection) malloc(sizeof(struct Rconn));
@@ -909,6 +933,18 @@ in_newCurlUrl(const char *description, const char
* const mode, int type)
  error(_("allocation of url connection failed"));
  /* for Solaris 12.5 */ new = NULL;
     }
+    ctxt->headers = NULL;
+    for (int i = 0; i < LENGTH(headers); i++) {
+ struct curl_slist *tmp =
+    curl_slist_append(ctxt->headers, CHAR(STRING_ELT(headers, i)));
+ if (!tmp) {
+    free(new->description); free(new->class); free(new->private);
+    free(new); curl_slist_free_all(ctxt->headers);
+    error(_("allocation of url connection failed"));
+    /* for Solaris 12.5 */ new = NULL;
+ }
+ ctxt->headers = tmp;
+    }
     return new;
 #else
     error(_("url(method = \"libcurl\") is not supported on this platform"));


From @okol @ending from in@@-toulou@e@fr  Wed Dec  5 10:08:47 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Wed, 5 Dec 2018 10:08:47 +0100
Subject: [Rd] Bug report: Function ppois(0:20,
 lambda=0.9) does not generate a non-decreasing result.
In-Reply-To: <23558.50073.837856.602176@stat.math.ethz.ch>
References: <f49f51f.a07fd.16774649817.Coremail.qweytr1@mail.ustc.edu.cn>
 <CALEXWq1WFLzQBgm8oF1myry25DZEyEA_jT3kFEnLYP55-06QKg@mail.gmail.com>
 <2787db5d-a009-40f5-bea6-8ddb10b10a50@insa-toulouse.fr>
 <23558.50073.837856.602176@stat.math.ethz.ch>
Message-ID: <77ce5483-a329-7dfc-869e-2e429d4987dd@insa-toulouse.fr>

Le 04/12/2018 ? 19:12, Martin Maechler a ?crit?:
>>>>>> Serguei Sokol
>>>>>>      on Tue, 4 Dec 2018 11:46:32 +0100 writes:
>      > Le 04/12/2018 ? 11:27, I?aki Ucar a ?crit?:
>      >> On Tue, 4 Dec 2018 at 11:12, <qweytr1 at mail.ustc.edu.cn> wrote:
>      >>> function ppois is a function calculate the CDF of Poisson distribution, it should generate a non-decreasing result, but what I got is:
>      >>>
>      >>>> any(diff(ppois(0:19,lambda=0.9))<0)
>      >>> [1] TRUE
> ...
>      > any(diff(exp(ppois(0:19, lambda=0.9, log.p=TRUE))) < 0)
>      > #[1] FALSE
>
>      > But may be there is another, more economic way?
>
> Well, log probabilites *are* very economic for many such p*()
> functions.
I have not doubt about it. My "economic way" was related to get ppois() 
*non decreasing*, at least, more economic than exp-log.p trick.

Serguei.


From edd @ending from debi@n@org  Thu Dec  6 04:19:14 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Wed, 5 Dec 2018 21:19:14 -0600
Subject: [Rd] Package 'tools' support for linux binary packages?
Message-ID: <23560.38194.438717.104690@rob.eddelbuettel.com>


I may have a deployment reason at work for Linux binary packages as created
by `R CMD INSTALL --build src`.  Using the example of my digest package this
creates eg

  digest_0.6.18.1_R_x86_64-pc-linux-gnu.tar.gz

where 'x86_64-pc-linux-gnu' is also what `R.version[["platform"]]` returns.

However, once I started to look into supporting this via my repository helper
package `drat`, I realized that the `tools::write_PACKAGES` function only
supports the three file types `drat` already knows about: source, and mac and
windows binaries.

>From the help page

    Usage:

         write_PACKAGES(dir = ".", fields = NULL,
                        type = c("source", "mac.binary", "win.binary"),
                        verbose = FALSE, unpacked = FALSE, subdirs = FALSE,
                        latestOnly = TRUE, addFiles = FALSE, rds_compress = "xz")
 
    [...]

        type: Type of packages: currently source ?.tar.{gz,bz2,xz}?
              archives, and macOS or Windows binary (?.tgz? or ?.zip?,
              respectively) packages are supported.  Defaults to
              ?"win.binary"? on Windows and to ?"source"? otherwise.

Would it make sense to add eg "lin.binary" ?

Or is that a bad idea because the binary packages do not have dependencies
etc encoded so that I may be better off punting with simpler helper functions
to 'push' to a directory and 'pull' from it where it just matches the largest
release version number given a package name (and maybe platform) ?

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jori@mey@ @ending from gm@il@com  Thu Dec  6 15:19:41 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 6 Dec 2018 15:19:41 +0100
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
Message-ID: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>

Dear all,

quite a few package tools depend on R CMD INSTALL today for rapid testing
of a package, eg:

- devtools::install()
- BiocCheck::BiocCheck()

I've noticed that at least BiocCheck() doesn't ignore version control
folders like .git. Trying to find out why this was, lead me to R CMD
INSTALL.

I know this R CMD build ignores these files and folders by default, but R
CMD INSTALL doesn't apparently. Is there a way to tell R CMD INSTALL to
ignore at least the .git folder, or are there plans to add this the R CMD
INSTALL? And if so, where do I file the request best?

Cheers
Joris
-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From edd @ending from debi@n@org  Thu Dec  6 15:37:33 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Thu, 6 Dec 2018 08:37:33 -0600
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
In-Reply-To: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
References: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
Message-ID: <23561.13357.439690.683278@rob.eddelbuettel.com>


On 6 December 2018 at 15:19, Joris Meys wrote:
| Dear all,
| 
| quite a few package tools depend on R CMD INSTALL today for rapid testing
| of a package, eg:
| 
| - devtools::install()
| - BiocCheck::BiocCheck()
| 
| I've noticed that at least BiocCheck() doesn't ignore version control
| folders like .git. Trying to find out why this was, lead me to R CMD
| INSTALL.
| 
| I know this R CMD build ignores these files and folders by default, but R
| CMD INSTALL doesn't apparently. Is there a way to tell R CMD INSTALL to
| ignore at least the .git folder, or are there plans to add this the R CMD
| INSTALL? And if so, where do I file the request best?

Are you sure?  Eg from src/library/tools/R/utils.R:

## Version control directory names: CVS, .svn (Subversion), .arch-ids
## (arch), .bzr, .git, .hg (mercurial) and _darcs (Darcs)
## And it seems .metadata (eclipse) is in the same category.

.vc_dir_names <-
    c("CVS", ".svn", ".arch-ids", ".bzr", ".git", ".hg", "_darcs", ".metadata")

## and RE version (beware of the need for escapes if amending)

.vc_dir_names_re <-
    "/(CVS|\\.svn|\\.arch-ids|\\.bzr|\\.git|\\.hg|_darcs|\\.metadata)(/|$)"


(and many more similar places in the sources)

These have been auto-ignored by R CMD build for a loooooong time. Are you
maybe making the mistake of installing from a _directory_ as opposed to first
creating a tarball?

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jori@mey@ @ending from gm@il@com  Thu Dec  6 15:53:20 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 6 Dec 2018 15:53:20 +0100
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
In-Reply-To: <23561.13357.439690.683278@rob.eddelbuettel.com>
References: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
 <23561.13357.439690.683278@rob.eddelbuettel.com>
Message-ID: <CAO1zAVbZPtb7ZCF1U-V7_O=sdXcwU-VVzx2OnYH+YpANQHjvVQ@mail.gmail.com>

On Thu, 6 Dec 2018, 15:37 Dirk Eddelbuettel <edd at debian.org wrote:

>
>
> These have been auto-ignored by R CMD build for a loooooong time. Are you
> maybe making the mistake of installing from a _directory_ as opposed to
> first
> creating a tarball?
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


That's indeed what devtools::install () and BiocCheck () are doing, and I
wondered if R CMD INSTALL could be made to ignore at least those.

Thx for the confirmation
Cheers
Joris

	[[alternative HTML version deleted]]


From r@lf@@tubner @ending from d@q@n@@com  Thu Dec  6 15:59:09 2018
From: r@lf@@tubner @ending from d@q@n@@com (Ralf Stubner)
Date: Thu, 6 Dec 2018 15:59:09 +0100
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
In-Reply-To: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
References: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
Message-ID: <03bff17f-0f25-57e1-61da-1a2235da978b@daqana.com>

On 06.12.18 15:19, Joris Meys wrote:
> I know this R CMD build ignores these files and folders by default, but R
> CMD INSTALL doesn't apparently.

to me this is not apparent. I just tried "R CMD INSTALL ." in a package
directory with a .git directory. This went without any problems. What do
you observe?

cheerio
ralf

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Dr.-Ing. Stefan Knirsch, Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181206/ace28937/attachment.sig>

From jori@mey@ @ending from gm@il@com  Thu Dec  6 16:12:12 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 6 Dec 2018 16:12:12 +0100
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
In-Reply-To: <03bff17f-0f25-57e1-61da-1a2235da978b@daqana.com>
References: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
 <03bff17f-0f25-57e1-61da-1a2235da978b@daqana.com>
Message-ID: <CAO1zAVbb0x2aqoKoCjLCpWeqKBgxZXmj-YievNm2jm-=+tXYZA@mail.gmail.com>

On Thu, 6 Dec 2018, 16:04 Ralf Stubner <ralf.stubner at daqana.com wrote:

> On 06.12.18 15:19, Joris Meys wrote:
> > I know this R CMD build ignores these files and folders by default, but R
> > CMD INSTALL doesn't apparently.
>
> to me this is not apparent. I just tried "R CMD INSTALL ." in a package
> directory with a .git directory. This went without any problems. What do
> you observe?
>

When running BiocCheck, I get complaints about file sizes in the .git
folder. Checking the code I have noticed it uses R CMD INSTALL on the pkg
directory. As .Rbuildignore is afaik not taken into account by INSTALL, I
reckoned somewhere in the process R CMD INSTALL drags the .git folder along.

I might have been too quick with my assessment, I will dig a bit deeper
tonight

Cheers
Joris

>
> cheerio
> ralf
>
> --
> Ralf Stubner
> Senior Software Engineer / Trainer
>
> daqana GmbH
> Dortustra?e 48
> 14467 Potsdam
>
> T: +49 331 23 61 93 11
> F: +49 331 23 61 93 90
> M: +49 162 20 91 196
> Mail: ralf.stubner at daqana.com
>
> Sitz: Potsdam
> Register: AG Potsdam HRB 27966
> Ust.-IdNr.: DE300072622
> Gesch?ftsf?hrer: Dr.-Ing. Stefan Knirsch, Prof. Dr. Dr. Karl-Kuno Kunze
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From edd @ending from debi@n@org  Thu Dec  6 16:13:01 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Thu, 6 Dec 2018 09:13:01 -0600
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
In-Reply-To: <03bff17f-0f25-57e1-61da-1a2235da978b@daqana.com>
References: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
 <03bff17f-0f25-57e1-61da-1a2235da978b@daqana.com>
Message-ID: <23561.15485.544650.763051@rob.eddelbuettel.com>


On 6 December 2018 at 15:59, Ralf Stubner wrote:
| On 06.12.18 15:19, Joris Meys wrote:
| > I know this R CMD build ignores these files and folders by default, but R
| > CMD INSTALL doesn't apparently.
| 
| to me this is not apparent. I just tried "R CMD INSTALL ." in a package
| directory with a .git directory. This went without any problems. What do
| you observe?

Seconded. I joked off-list to Joris that this post failed to contain a MCVE
(== minimally complete verifiable example).  Witness below -- two
installations from a directory containing .git yet none in the installed
directory.  Could what you describe be particular to your OS or filesystem?

edd at rob:~/git/dang$ ls -a
.          dang_0.0.7.tar.gz  dang.Rproj   .gitignore  R              .Rhistory
..         dang_0.0.8.tar.gz  DESCRIPTION  man         .Rbuildignore  .Rproj.user
ChangeLog  dang.Rcheck        .git         NAMESPACE   README.md      .travis.yml
edd at rob:~/git/dang$ R CMD INSTALL .
* installing to library ?/usr/local/lib/R/site-library?
* installing *source* package ?dang? ...
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (dang)
edd at rob:~/git/dang$ ls -a /usr/local/lib/R/site-library/dang/
.  ..  DESCRIPTION  help  html  INDEX  Meta  NAMESPACE  R
edd at rob:~/git/dang$ install.r 
* installing *source* package found in current working directory ...
* installing *source* package ?dang? ...
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (dang)
edd at rob:~/git/dang$ ls -a /usr/local/lib/R/site-library/dang/
.  ..  DESCRIPTION  help  html  INDEX  Meta  NAMESPACE  R
edd at rob:~/git/dang$


Dirk


-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jori@mey@ @ending from gm@il@com  Thu Dec  6 18:40:10 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 6 Dec 2018 18:40:10 +0100
Subject: [Rd] Dealing with .git folder when using R CMD INSTALL
In-Reply-To: <23561.15485.544650.763051@rob.eddelbuettel.com>
References: <CAO1zAVam+3Urckfga-OTSp7Fci9nCgfbD5CdNqyyJn_aoSfdVQ@mail.gmail.com>
 <03bff17f-0f25-57e1-61da-1a2235da978b@daqana.com>
 <23561.15485.544650.763051@rob.eddelbuettel.com>
Message-ID: <CAO1zAVbkBuo+0KhyVZkv=45jKFS589OnNj7Sb6OQXeUmLVNSoQ@mail.gmail.com>

I'm sorry, I should have indeed given a better description.

The package I'm seeing the issue with, can be found here :
https://github.com/CenterForStatistics-UGent/RCM

The problem becomes visible when opening an RStudio session and running
BiocCheck::BiocCheck() (This is a Bioconductor package)

> BiocCheck::BiocCheck()
This is BiocCheck version 1.18.0. BiocCheck is a
work in progress. Output and severity of issues may
change. Installing package...
* Checking vignette directory...
    This is a software package
    # of chunks: 39, # of eval=FALSE: 4 (10%)
* Checking version number...
    Checking version number validity...
    Package version 0.99.0; pre-release
* Checking R Version dependency...
* Checking package size...
        Skipped... only checked on source tarball
* Checking individual file sizes...
    * WARNING: The following files are over 5MB in size:
      '.git/objects/pack/pack-92e66ff77b78e7fa5121747871adeaa41fb1feb6.pack'
...

And at this point I start hitting myself so I can utter an apology and
inform you that BiocCheck doesn't check filesize on the installed package
but on the original project directory.

My mistake, and I should have been more careful before bothering you all.
Cheers
Joris


On Thu, Dec 6, 2018 at 4:14 PM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 6 December 2018 at 15:59, Ralf Stubner wrote:
> | On 06.12.18 15:19, Joris Meys wrote:
> | > I know this R CMD build ignores these files and folders by default,
> but R
> | > CMD INSTALL doesn't apparently.
> |
> | to me this is not apparent. I just tried "R CMD INSTALL ." in a package
> | directory with a .git directory. This went without any problems. What do
> | you observe?
>
> Seconded. I joked off-list to Joris that this post failed to contain a MCVE
> (== minimally complete verifiable example).  Witness below -- two
> installations from a directory containing .git yet none in the installed
> directory.  Could what you describe be particular to your OS or filesystem?
>
> edd at rob:~/git/dang$ ls -a
> .          dang_0.0.7.tar.gz  dang.Rproj   .gitignore  R
> .Rhistory
> ..         dang_0.0.8.tar.gz  DESCRIPTION  man         .Rbuildignore
> .Rproj.user
> ChangeLog  dang.Rcheck        .git         NAMESPACE   README.md
> .travis.yml
> edd at rob:~/git/dang$ R CMD INSTALL .
> * installing to library ?/usr/local/lib/R/site-library?
> * installing *source* package ?dang? ...
> ** R
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded
> * DONE (dang)
> edd at rob:~/git/dang$ ls -a /usr/local/lib/R/site-library/dang/
> .  ..  DESCRIPTION  help  html  INDEX  Meta  NAMESPACE  R
> edd at rob:~/git/dang$ install.r
> * installing *source* package found in current working directory ...
> * installing *source* package ?dang? ...
> ** R
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded
> * DONE (dang)
> edd at rob:~/git/dang$ ls -a /usr/local/lib/R/site-library/dang/
> .  ..  DESCRIPTION  help  html  INDEX  Meta  NAMESPACE  R
> edd at rob:~/git/dang$
>
>
> Dirk
>
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From mich@elchirico4 @ending from gm@il@com  Fri Dec  7 03:36:37 2018
From: mich@elchirico4 @ending from gm@il@com (Michael Chirico)
Date: Fri, 7 Dec 2018 10:36:37 +0800
Subject: [Rd] Dead link in documentation of ?timezones
Message-ID: <CAPRVBcw_iFKXo_RbLS8CdbZuP=6YM9KqRtT+cngWOxFMDiU9og@mail.gmail.com>

This link is referenced in ?timezones and appears to have been
moved/removed. Is there a replacement?

http://www.twinsun.com/tz/tz-link.htm

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Dec  7 11:21:46 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 7 Dec 2018 11:21:46 +0100
Subject: [Rd] Dead link in documentation of ?timezones
In-Reply-To: <CAPRVBcw_iFKXo_RbLS8CdbZuP=6YM9KqRtT+cngWOxFMDiU9og@mail.gmail.com>
References: <CAPRVBcw_iFKXo_RbLS8CdbZuP=6YM9KqRtT+cngWOxFMDiU9og@mail.gmail.com>
Message-ID: <23562.18874.943864.541241@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Fri, 7 Dec 2018 10:36:37 +0800 writes:

    > This link is referenced in ?timezones and appears to have been
    > moved/removed. Is there a replacement?

    > http://www.twinsun.com/tz/tz-link.htm

Yes, already in the sources (*) of R at

   https://svn.r-project.org/R/trunk/src/library/base/man/timezones.Rd

We (Kurt \in {R-core}) do regularly (but not daily!) check all our URLs
--- as they are also checked for all CRAN packages -- and so
found and fixed the problems there.

So, (in the future) you can look into the development sources to
see if a URL problem has already been addressed.

Still, of course "thank you!"  for noticing and caring about it!

Best,
Martin


--
*) the only official source, everything else is a mirror


From mich@elchirico4 @ending from gm@il@com  Fri Dec  7 11:39:15 2018
From: mich@elchirico4 @ending from gm@il@com (Michael Chirico)
Date: Fri, 7 Dec 2018 18:39:15 +0800
Subject: [Rd] Dead link in documentation of ?timezones
In-Reply-To: <23562.18874.943864.541241@stat.math.ethz.ch>
References: <CAPRVBcw_iFKXo_RbLS8CdbZuP=6YM9KqRtT+cngWOxFMDiU9og@mail.gmail.com>
 <23562.18874.943864.541241@stat.math.ethz.ch>
Message-ID: <CAPRVBcw3Hw=UuDRm1hok_MOGeQqw9V8TCBVZcq-Pf3Rqb+OKDw@mail.gmail.com>

Indeed! Sorry, I need more sleep, should have known better. Thanks!

On Fri, Dec 7, 2018 at 6:22 PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Michael Chirico
> >>>>>     on Fri, 7 Dec 2018 10:36:37 +0800 writes:
>
>     > This link is referenced in ?timezones and appears to have been
>     > moved/removed. Is there a replacement?
>
>     > http://www.twinsun.com/tz/tz-link.htm
>
> Yes, already in the sources (*) of R at
>
>    https://svn.r-project.org/R/trunk/src/library/base/man/timezones.Rd
>
> We (Kurt \in {R-core}) do regularly (but not daily!) check all our URLs
> --- as they are also checked for all CRAN packages -- and so
> found and fixed the problems there.
>
> So, (in the future) you can look into the development sources to
> see if a URL problem has already been addressed.
>
> Still, of course "thank you!"  for noticing and caring about it!
>
> Best,
> Martin
>
>
> --
> *) the only official source, everything else is a mirror
>

	[[alternative HTML version deleted]]


From xie @ending from yihui@n@me  Fri Dec  7 19:10:47 2018
From: xie @ending from yihui@n@me (Yihui Xie)
Date: Fri, 7 Dec 2018 12:10:47 -0600
Subject: [Rd] Inconsistent returned values of normalizePath(NA_character_)
 on Windows and *nix
In-Reply-To: <CABtg=KkB-e75kms1vL7XvjdcShwarBP1VLPnT2nb0SEFAJkarg@mail.gmail.com>
References: <CABtg=KkB-e75kms1vL7XvjdcShwarBP1VLPnT2nb0SEFAJkarg@mail.gmail.com>
Message-ID: <CANROs4cjRX5aiyp_pzVyeWPKwQNpmhPD6cveAwU6gBR7b4yKTA@mail.gmail.com>

Hi,

I just noticed normalizePath(NA_character_) returns NA_character_ on
*nix but "%HOME%\\NA" on Windows (with a warning by default), where
%HOME% denotes the HOME folder like "C:\\Users\\John". I'm not sure if
this is a bug or by design.

Regards,
Yihui
--
https://yihui.name


From mikko@korpel@ @ending from m@@nmitt@u@l@ito@@fi  Sat Dec  8 18:43:05 2018
From: mikko@korpel@ @ending from m@@nmitt@u@l@ito@@fi (Korpela Mikko (MML))
Date: Sat, 8 Dec 2018 17:43:05 +0000
Subject: [Rd] Typo in grep.Rd
Message-ID: <8f7cde250cb942ffbe8251bc98e0f402@C119S212VM016.msvyvi.vaha.local>

There is a small typo in file 'src/library/base/man/grep.Rd'.

Current text:
## collation order is aAbBcCdEe ...

Suggested text ("D" instead of "E"):
## collation order is aAbBcCdDe ...

Best regards,

- Mikko Korpela


From mikko@korpel@ @ending from m@@nmitt@u@l@ito@@fi  Sat Dec  8 19:42:30 2018
From: mikko@korpel@ @ending from m@@nmitt@u@l@ito@@fi (Korpela Mikko (MML))
Date: Sat, 8 Dec 2018 18:42:30 +0000
Subject: [Rd] Possible encoding bug in sub()
Message-ID: <4c6d4772955b470280617b928f91115b@C119S212VM016.msvyvi.vaha.local>

I noticed that sub() gives unexpected results for the following test
case. In the test case, the (initial) input is ASCII but the
replacements are UTF-8. The first sub() produces an UTF-8 result with
an "unknown" Encoding. This makes the result garbled in Windows (no
UTF-8 locale there). The second sub() produces a correct result,
although for some reason it is converted to the native Encoding in
Windows.

I think the best result would be UTF-8 output marked as such.

foo <- c("a", "b")
foo <- sub("a", "\u00e4", foo)
print(Encoding(foo))
## [1] "unknown" "unknown"
foo <- sub("b", "\u00f6", foo)
print(Encoding(foo))
## [1] "unknown" "unknown" # Windows
## [1] "unknown" "UTF-8"   # Linux
print(foo)
## [1] "??" "?"            # Windows
## [1] "?" "?"             # Linux

The output of sessionInfo() for both test systems follows.

> sessionInfo()
R version 3.5.1 Patched (2018-11-28 r75713)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
[1] LC_COLLATE=Finnish_Finland.1252  LC_CTYPE=Finnish_Finland.1252
[3] LC_MONETARY=Finnish_Finland.1252 LC_NUMERIC=C
[5] LC_TIME=Finnish_Finland.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.1

> sessionInfo()
R Under development (unstable) (2018-12-08 r75801)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.1 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/libf77blas.so.3.10.3
LAPACK: /home/mikko/root_R-devel-r75801/lib/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=fi_FI.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=fi_FI.UTF-8        LC_COLLATE=fi_FI.UTF-8    
 [5] LC_MONETARY=fi_FI.UTF-8    LC_MESSAGES=fi_FI.UTF-8   
 [7] LC_PAPER=fi_FI.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=fi_FI.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.6.0


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Dec 10 09:12:14 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 10 Dec 2018 09:12:14 +0100
Subject: [Rd] Typo in grep.Rd
In-Reply-To: <8f7cde250cb942ffbe8251bc98e0f402@C119S212VM016.msvyvi.vaha.local>
References: <8f7cde250cb942ffbe8251bc98e0f402@C119S212VM016.msvyvi.vaha.local>
Message-ID: <23566.8158.542191.173136@stat.math.ethz.ch>

>>>>> Korpela Mikko (MML) 
>>>>>     on Sat, 8 Dec 2018 17:43:05 +0000 writes:

    > There is a small typo in file 'src/library/base/man/grep.Rd'.
    > Current text:
    > ## collation order is aAbBcCdEe ...

    > Suggested text ("D" instead of "E"):
    > ## collation order is aAbBcCdDe ...

Indeed, now fixed.  Thank you Mikko!
Martin


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Dec 10 11:09:10 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 10 Dec 2018 11:09:10 +0100
Subject: [Rd] Possible encoding bug in sub()
In-Reply-To: <4c6d4772955b470280617b928f91115b@C119S212VM016.msvyvi.vaha.local>
References: <4c6d4772955b470280617b928f91115b@C119S212VM016.msvyvi.vaha.local>
Message-ID: <23566.15174.720644.875274@stat.math.ethz.ch>

>>>>> Korpela Mikko (MML) 
>>>>>     on Sat, 8 Dec 2018 18:42:30 +0000 writes:

    > I noticed that sub() gives unexpected results for the following test
    > case. In the test case, the (initial) input is ASCII but the
    > replacements are UTF-8. The first sub() produces an UTF-8 result with
    > an "unknown" Encoding. This makes the result garbled in Windows (no
    > UTF-8 locale there). The second sub() produces a correct result,
    > although for some reason it is converted to the native Encoding in
    > Windows.

    > I think the best result would be UTF-8 output marked as such.

    > foo <- c("a", "b")
    > foo <- sub("a", "\u00e4", foo)
    > print(Encoding(foo))
    > ## [1] "unknown" "unknown"
    > foo <- sub("b", "\u00f6", foo)
    > print(Encoding(foo))
    > ## [1] "unknown" "unknown" # Windows
    > ## [1] "unknown" "UTF-8"   # Linux
    > print(foo)
    > ## [1] "??" "?"            # Windows
    > ## [1] "?" "?"             # Linux

I can confirm the problem on Windows,
also for a recent version of R-devel.

Why not filing this as a proper bug report at R's bugzilla?
There's still no certainty that it will be fixed quickly, but
the bug PR's there are less easily forgotten.

Martin


    > The output of sessionInfo() for both test systems follows.

    >> sessionInfo()
    > R version 3.5.1 Patched (2018-11-28 r75713)
    > Platform: x86_64-w64-mingw32/x64 (64-bit)
    > Running under: Windows 7 x64 (build 7601) Service Pack 1

    > Matrix products: default

    > locale:
    > [1] LC_COLLATE=Finnish_Finland.1252  LC_CTYPE=Finnish_Finland.1252
    > [3] LC_MONETARY=Finnish_Finland.1252 LC_NUMERIC=C
    > [5] LC_TIME=Finnish_Finland.1252

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods   base

    > loaded via a namespace (and not attached):
    > [1] compiler_3.5.1

    >> sessionInfo()
    > R Under development (unstable) (2018-12-08 r75801)
    > Platform: x86_64-pc-linux-gnu (64-bit)
    > Running under: Ubuntu 18.04.1 LTS

    > Matrix products: default
    > BLAS: /usr/lib/x86_64-linux-gnu/libf77blas.so.3.10.3
    > LAPACK: /home/mikko/root_R-devel-r75801/lib/R/lib/libRlapack.so

    > locale:
    > [1] LC_CTYPE=fi_FI.UTF-8       LC_NUMERIC=C              
    > [3] LC_TIME=fi_FI.UTF-8        LC_COLLATE=fi_FI.UTF-8    
    > [5] LC_MONETARY=fi_FI.UTF-8    LC_MESSAGES=fi_FI.UTF-8   
    > [7] LC_PAPER=fi_FI.UTF-8       LC_NAME=C                 
    > [9] LC_ADDRESS=C               LC_TELEPHONE=C            
    > [11] LC_MEASUREMENT=fi_FI.UTF-8 LC_IDENTIFICATION=C       

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods   base     

    > loaded via a namespace (and not attached):
    > [1] compiler_3.6.0

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From mikko@korpel@ @ending from m@@nmitt@u@l@ito@@fi  Mon Dec 10 11:40:01 2018
From: mikko@korpel@ @ending from m@@nmitt@u@l@ito@@fi (Korpela Mikko (MML))
Date: Mon, 10 Dec 2018 10:40:01 +0000
Subject: [Rd] Possible encoding bug in sub()
In-Reply-To: <23566.15174.720644.875274@stat.math.ethz.ch>
References: <4c6d4772955b470280617b928f91115b@C119S212VM016.msvyvi.vaha.local>
 <23566.15174.720644.875274@stat.math.ethz.ch>
Message-ID: <4205eea230844e4cb28f3772ae59461c@C119S212VM016.msvyvi.vaha.local>

Thanks for the confirmation. The bug report is now online at
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17509

- Mikko

-----Original Message-----
From: Martin Maechler [mailto:maechler at stat.math.ethz.ch] 
Sent: Monday, December 10, 2018 12:09 PM
To: Korpela Mikko (MML)
Cc: r-devel at r-project.org
Subject: Re: [Rd] Possible encoding bug in sub()

>>>>> Korpela Mikko (MML) 
>>>>>     on Sat, 8 Dec 2018 18:42:30 +0000 writes:

    > I noticed that sub() gives unexpected results for the following test
    > case. In the test case, the (initial) input is ASCII but the
    > replacements are UTF-8. The first sub() produces an UTF-8 result with
    > an "unknown" Encoding. This makes the result garbled in Windows (no
    > UTF-8 locale there). The second sub() produces a correct result,
    > although for some reason it is converted to the native Encoding in
    > Windows.

    > I think the best result would be UTF-8 output marked as such.

    > foo <- c("a", "b")
    > foo <- sub("a", "\u00e4", foo)
    > print(Encoding(foo))
    > ## [1] "unknown" "unknown"
    > foo <- sub("b", "\u00f6", foo)
    > print(Encoding(foo))
    > ## [1] "unknown" "unknown" # Windows
    > ## [1] "unknown" "UTF-8"   # Linux
    > print(foo)
    > ## [1] "??" "?"            # Windows
    > ## [1] "?" "?"             # Linux

I can confirm the problem on Windows,
also for a recent version of R-devel.

Why not filing this as a proper bug report at R's bugzilla?
There's still no certainty that it will be fixed quickly, but the bug PR's there are less easily forgotten.

Martin


    > The output of sessionInfo() for both test systems follows.

    >> sessionInfo()
    > R version 3.5.1 Patched (2018-11-28 r75713)
    > Platform: x86_64-w64-mingw32/x64 (64-bit)
    > Running under: Windows 7 x64 (build 7601) Service Pack 1

    > Matrix products: default

    > locale:
    > [1] LC_COLLATE=Finnish_Finland.1252  LC_CTYPE=Finnish_Finland.1252
    > [3] LC_MONETARY=Finnish_Finland.1252 LC_NUMERIC=C
    > [5] LC_TIME=Finnish_Finland.1252

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods   base

    > loaded via a namespace (and not attached):
    > [1] compiler_3.5.1

    >> sessionInfo()
    > R Under development (unstable) (2018-12-08 r75801)
    > Platform: x86_64-pc-linux-gnu (64-bit)
    > Running under: Ubuntu 18.04.1 LTS

    > Matrix products: default
    > BLAS: /usr/lib/x86_64-linux-gnu/libf77blas.so.3.10.3
    > LAPACK: /home/mikko/root_R-devel-r75801/lib/R/lib/libRlapack.so

    > locale:
    > [1] LC_CTYPE=fi_FI.UTF-8       LC_NUMERIC=C              
    > [3] LC_TIME=fi_FI.UTF-8        LC_COLLATE=fi_FI.UTF-8    
    > [5] LC_MONETARY=fi_FI.UTF-8    LC_MESSAGES=fi_FI.UTF-8   
    > [7] LC_PAPER=fi_FI.UTF-8       LC_NAME=C                 
    > [9] LC_ADDRESS=C               LC_TELEPHONE=C            
    > [11] LC_MEASUREMENT=fi_FI.UTF-8 LC_IDENTIFICATION=C       

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods   base     

    > loaded via a namespace (and not attached):
    > [1] compiler_3.6.0

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel

From bbolker @ending from gm@il@com  Wed Dec 12 20:45:10 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Wed, 12 Dec 2018 14:45:10 -0500
Subject: [Rd] trivial typo in src/library/base/man/LongVectors.Rd
Message-ID: <6730cf69-f9b6-2724-ce15-f60ac37118a2@gmail.com>

  Line 23:

"In theory up they can to"

  should be

 "In theory they can be up to"

or (slightly more formally)

  "In theory they can contain up to"

  cheers
    Ben Bolker


From m@echler @ending from @t@t@m@th@ethz@ch  Thu Dec 13 09:08:23 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 13 Dec 2018 09:08:23 +0100
Subject: [Rd] trivial typo in src/library/base/man/LongVectors.Rd
In-Reply-To: <6730cf69-f9b6-2724-ce15-f60ac37118a2@gmail.com>
References: <6730cf69-f9b6-2724-ce15-f60ac37118a2@gmail.com>
Message-ID: <23570.4983.897012.591383@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Wed, 12 Dec 2018 14:45:10 -0500 writes:

    > Line 23:
    > "In theory up they can to"

    > should be

    > "In theory they can be up to"

    > or (slightly more formally)

    > "In theory they can contain up to"

    > cheers
    > Ben Bolker

Thank you, Ben!  (I've chosen the more formal one)

Martin


From t@yee @ending from @uckl@nd@@c@nz  Thu Dec 13 21:26:49 2018
From: t@yee @ending from @uckl@nd@@c@nz (Thomas Yee)
Date: Fri, 14 Dec 2018 09:26:49 +1300
Subject: [Rd] Documentation examples for lm and glm
Message-ID: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>

Hello,

something that has been on my mind for a decade or two has
been the examples for lm() and glm(). They encourage poor style
because of mismanagement of data frames. Also, having the
variables in a data frame means that predict()
is more likely to work properly.

For lm(), the variables should be put into a data frame.
As 2 vectors are assigned first in the general workspace they
should be deleted afterwards.

For the glm(), the data frame d.AD is constructed but not used. Also,
its 3 components were assigned first in the general workspace, so they
float around dangerously afterwards like in the lm() example.

Rather than attached improved .Rd files here, they are put at
www.stat.auckland.ac.nz/~yee/Rdfiles
You are welcome to use them!

Best,

Thomas


From bbolker @ending from gm@il@com  Thu Dec 13 21:36:04 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Thu, 13 Dec 2018 15:36:04 -0500
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
Message-ID: <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>


  Agree.  Or just create the data frame with those variables in it
directly ...

On 2018-12-13 3:26 p.m., Thomas Yee wrote:
> Hello,
> 
> something that has been on my mind for a decade or two has
> been the examples for lm() and glm(). They encourage poor style
> because of mismanagement of data frames. Also, having the
> variables in a data frame means that predict()
> is more likely to work properly.
> 
> For lm(), the variables should be put into a data frame.
> As 2 vectors are assigned first in the general workspace they
> should be deleted afterwards.
> 
> For the glm(), the data frame d.AD is constructed but not used. Also,
> its 3 components were assigned first in the general workspace, so they
> float around dangerously afterwards like in the lm() example.
> 
> Rather than attached improved .Rd files here, they are put at
> www.stat.auckland.ac.nz/~yee/Rdfiles
> You are welcome to use them!
> 
> Best,
> 
> Thomas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From S@Elli@on @ending from LGCGroup@com  Fri Dec 14 14:50:58 2018
From: S@Elli@on @ending from LGCGroup@com (S Ellison)
Date: Fri, 14 Dec 2018 13:50:58 +0000
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
Message-ID: <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>

FWIW, before all the examples are changed to data frame variants, I think there's fairly good reason to have at least _one_ example that does _not_ place variables in a data frame. 

The data argument in lm() is optional. And there is more than one way to manage data in a project. I personally don't much like lots of stray variables lurking about, but if those are the only variables out there and we can be sure they aren't affected by other code, it's hardly essential to create a data frame to hold something you already have. 
Also, attach() is still part of R, for those folk who have a data frame but want to reference the contents across a wider range of functions without using with() a lot. lm() can reasonably omit the data argument there, too.

So while there are good reasons to use data frames, there are also good reasons to provide examples that don't.

Steve Ellison


> -----Original Message-----
> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben
> Bolker
> Sent: 13 December 2018 20:36
> To: r-devel at r-project.org
> Subject: Re: [Rd] Documentation examples for lm and glm
> 
> 
>   Agree.  Or just create the data frame with those variables in it
> directly ...
> 
> On 2018-12-13 3:26 p.m., Thomas Yee wrote:
> > Hello,
> >
> > something that has been on my mind for a decade or two has
> > been the examples for lm() and glm(). They encourage poor style
> > because of mismanagement of data frames. Also, having the
> > variables in a data frame means that predict()
> > is more likely to work properly.
> >
> > For lm(), the variables should be put into a data frame.
> > As 2 vectors are assigned first in the general workspace they
> > should be deleted afterwards.
> >
> > For the glm(), the data frame d.AD is constructed but not used. Also,
> > its 3 components were assigned first in the general workspace, so they
> > float around dangerously afterwards like in the lm() example.
> >
> > Rather than attached improved .Rd files here, they are put at
> > www.stat.auckland.ac.nz/~yee/Rdfiles
> > You are welcome to use them!
> >
> > Best,
> >
> > Thomas
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From d@vidhughjone@ @ending from gm@il@com  Sat Dec 15 08:47:28 2018
From: d@vidhughjone@ @ending from gm@il@com (David Hugh-Jones)
Date: Sat, 15 Dec 2018 08:47:28 +0100
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
Message-ID: <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>

I would argue examples should encourage good practice. Beginners ought to
learn to keep data in data frames and not to overuse attach(). Experts can
do otherwise at their own risk, but they have less need of explicit
examples.

On Fri, 14 Dec 2018 at 14:51, S Ellison <S.Ellison at lgcgroup.com> wrote:

> FWIW, before all the examples are changed to data frame variants, I think
> there's fairly good reason to have at least _one_ example that does _not_
> place variables in a data frame.
>
> The data argument in lm() is optional. And there is more than one way to
> manage data in a project. I personally don't much like lots of stray
> variables lurking about, but if those are the only variables out there and
> we can be sure they aren't affected by other code, it's hardly essential to
> create a data frame to hold something you already have.
> Also, attach() is still part of R, for those folk who have a data frame
> but want to reference the contents across a wider range of functions
> without using with() a lot. lm() can reasonably omit the data argument
> there, too.
>
> So while there are good reasons to use data frames, there are also good
> reasons to provide examples that don't.
>
> Steve Ellison
>
>
> > -----Original Message-----
> > From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben
> > Bolker
> > Sent: 13 December 2018 20:36
> > To: r-devel at r-project.org
> > Subject: Re: [Rd] Documentation examples for lm and glm
> >
> >
> >   Agree.  Or just create the data frame with those variables in it
> > directly ...
> >
> > On 2018-12-13 3:26 p.m., Thomas Yee wrote:
> > > Hello,
> > >
> > > something that has been on my mind for a decade or two has
> > > been the examples for lm() and glm(). They encourage poor style
> > > because of mismanagement of data frames. Also, having the
> > > variables in a data frame means that predict()
> > > is more likely to work properly.
> > >
> > > For lm(), the variables should be put into a data frame.
> > > As 2 vectors are assigned first in the general workspace they
> > > should be deleted afterwards.
> > >
> > > For the glm(), the data frame d.AD is constructed but not used. Also,
> > > its 3 components were assigned first in the general workspace, so they
> > > float around dangerously afterwards like in the lm() example.
> > >
> > > Rather than attached improved .Rd files here, they are put at
> > > www.stat.auckland.ac.nz/~yee/Rdfiles
> > > You are welcome to use them!
> > >
> > > Best,
> > >
> > > Thomas
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> *******************************************************************
> This email and any attachments are confidential. Any u...{{dropped:12}}


From Achim@Zeilei@ @ending from uibk@@c@@t  Sat Dec 15 14:15:52 2018
From: Achim@Zeilei@ @ending from uibk@@c@@t (Achim Zeileis)
Date: Sat, 15 Dec 2018 14:15:52 +0100 (CET)
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1812151342530.19588@paninaro>

A pragmatic solution could be to create a simple linear regression example 
with variables in the global environment and then another example with a 
data.frame.

The latter might be somewhat more complex, e.g., with several regressors 
and/or mixed categorical and numeric covariates to illustrate how 
regression and analysis of (co-)variance can be combined. I like to use 
MASS's whiteside data for this:

data("whiteside", package = "MASS")
m1 <- lm(Gas ~ Temp, data = whiteside)
m2 <- lm(Gas ~ Insul + Temp, data = whiteside)
m3 <- lm(Gas ~ Insul * Temp, data = whiteside)
anova(m1, m2, m3)

Moreover, some binary response data.frame with a few covariates might be a 
useful addition to "datasets". For example a more granular version of the 
"Titanic" data (in addition to the 4-way tabel ?Titanic). Or another 
relatively straightforward data set, popular in econometrics and social 
sciences is the "Mroz" data, see e.g., help("PSID1976", package = "AER").

I would be happy to help with these if such additions were considered for 
datasets/stats.


On Sat, 15 Dec 2018, David Hugh-Jones wrote:

> I would argue examples should encourage good practice. Beginners ought to
> learn to keep data in data frames and not to overuse attach(). Experts can
> do otherwise at their own risk, but they have less need of explicit
> examples.
>
> On Fri, 14 Dec 2018 at 14:51, S Ellison <S.Ellison at lgcgroup.com> wrote:
>
>> FWIW, before all the examples are changed to data frame variants, I think
>> there's fairly good reason to have at least _one_ example that does _not_
>> place variables in a data frame.
>>
>> The data argument in lm() is optional. And there is more than one way to
>> manage data in a project. I personally don't much like lots of stray
>> variables lurking about, but if those are the only variables out there and
>> we can be sure they aren't affected by other code, it's hardly essential to
>> create a data frame to hold something you already have.
>> Also, attach() is still part of R, for those folk who have a data frame
>> but want to reference the contents across a wider range of functions
>> without using with() a lot. lm() can reasonably omit the data argument
>> there, too.
>>
>> So while there are good reasons to use data frames, there are also good
>> reasons to provide examples that don't.
>>
>> Steve Ellison
>>
>>
>>> -----Original Message-----
>>> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben
>>> Bolker
>>> Sent: 13 December 2018 20:36
>>> To: r-devel at r-project.org
>>> Subject: Re: [Rd] Documentation examples for lm and glm
>>>
>>>
>>>   Agree.  Or just create the data frame with those variables in it
>>> directly ...
>>>
>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote:
>>>> Hello,
>>>>
>>>> something that has been on my mind for a decade or two has
>>>> been the examples for lm() and glm(). They encourage poor style
>>>> because of mismanagement of data frames. Also, having the
>>>> variables in a data frame means that predict()
>>>> is more likely to work properly.
>>>>
>>>> For lm(), the variables should be put into a data frame.
>>>> As 2 vectors are assigned first in the general workspace they
>>>> should be deleted afterwards.
>>>>
>>>> For the glm(), the data frame d.AD is constructed but not used. Also,
>>>> its 3 components were assigned first in the general workspace, so they
>>>> float around dangerously afterwards like in the lm() example.
>>>>
>>>> Rather than attached improved .Rd files here, they are put at
>>>> www.stat.auckland.ac.nz/~yee/Rdfiles
>>>> You are welcome to use them!
>>>>
>>>> Best,
>>>>
>>>> Thomas
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>> *******************************************************************
>> This email and any attachments are confidential. Any u...{{dropped:12}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From frederik m@ili@g off ofb@@et  Sat Dec 15 15:24:00 2018
From: frederik m@ili@g off ofb@@et (frederik m@ili@g off ofb@@et)
Date: Sat, 15 Dec 2018 06:24:00 -0800
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <alpine.DEB.2.21.1812151342530.19588@paninaro>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <alpine.DEB.2.21.1812151342530.19588@paninaro>
Message-ID: <20181215142400.7h4onph6ruh2isq5@ofb.net>

I agree with Steve and Achim that we should keep some examples with no
data frame. That's Objectively Simpler, whether or not it leads to
clutter in the wrong hands. As Steve points out, we have attach()
which is an excellent language feature - not to mention with().

I would go even further and say that the examples that are in lm() now
should stay at the top. Because people may be used to referring to
them, and also because Historical Order is generally a good order in
which to learn things. However, if there is an important function
argument ("data=") not in the examples, then we should add examples
which use it. Likewise if there is a popular programming style
(putting things in a data frame). So let's do something along the
lines of what Thomas is requesting, but put it after the existing
documentation? Please?

On a bit of a tangent, I would like to see an example in lm() which
plots my data with a fitted line through it. I'm probably betraying my
ignorance here, but I was asked how to do this when showing R to a
friend and I thought it should be in lm(), after all it seems a bit
more basic than displaying a Normal Q-Q plot (whatever that is!
gasp...). Similarly for glm(). Perhaps all this can be accomplished
with merely doubling the size of the existing examples.

Thanks.

Frederick

On Sat, Dec 15, 2018 at 02:15:52PM +0100, Achim Zeileis wrote:
>A pragmatic solution could be to create a simple linear regression 
>example with variables in the global environment and then another 
>example with a data.frame.
>
>The latter might be somewhat more complex, e.g., with several 
>regressors and/or mixed categorical and numeric covariates to 
>illustrate how regression and analysis of (co-)variance can be 
>combined. I like to use MASS's whiteside data for this:
>
>data("whiteside", package = "MASS")
>m1 <- lm(Gas ~ Temp, data = whiteside)
>m2 <- lm(Gas ~ Insul + Temp, data = whiteside)
>m3 <- lm(Gas ~ Insul * Temp, data = whiteside)
>anova(m1, m2, m3)
>
>Moreover, some binary response data.frame with a few covariates might 
>be a useful addition to "datasets". For example a more granular 
>version of the "Titanic" data (in addition to the 4-way tabel 
>?Titanic). Or another relatively straightforward data set, popular in 
>econometrics and social sciences is the "Mroz" data, see e.g., 
>help("PSID1976", package = "AER").
>
>I would be happy to help with these if such additions were considered 
>for datasets/stats.
>
>
>On Sat, 15 Dec 2018, David Hugh-Jones wrote:
>
>>I would argue examples should encourage good practice. Beginners ought to
>>learn to keep data in data frames and not to overuse attach(). Experts can
>>do otherwise at their own risk, but they have less need of explicit
>>examples.
>>
>>On Fri, 14 Dec 2018 at 14:51, S Ellison <S.Ellison at lgcgroup.com> wrote:
>>
>>>FWIW, before all the examples are changed to data frame variants, I think
>>>there's fairly good reason to have at least _one_ example that does _not_
>>>place variables in a data frame.
>>>
>>>The data argument in lm() is optional. And there is more than one way to
>>>manage data in a project. I personally don't much like lots of stray
>>>variables lurking about, but if those are the only variables out there and
>>>we can be sure they aren't affected by other code, it's hardly essential to
>>>create a data frame to hold something you already have.
>>>Also, attach() is still part of R, for those folk who have a data frame
>>>but want to reference the contents across a wider range of functions
>>>without using with() a lot. lm() can reasonably omit the data argument
>>>there, too.
>>>
>>>So while there are good reasons to use data frames, there are also good
>>>reasons to provide examples that don't.
>>>
>>>Steve Ellison
>>>
>>>
>>>>-----Original Message-----
>>>>From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben
>>>>Bolker
>>>>Sent: 13 December 2018 20:36
>>>>To: r-devel at r-project.org
>>>>Subject: Re: [Rd] Documentation examples for lm and glm
>>>>
>>>>
>>>>  Agree.  Or just create the data frame with those variables in it
>>>>directly ...
>>>>
>>>>On 2018-12-13 3:26 p.m., Thomas Yee wrote:
>>>>>Hello,
>>>>>
>>>>>something that has been on my mind for a decade or two has
>>>>>been the examples for lm() and glm(). They encourage poor style
>>>>>because of mismanagement of data frames. Also, having the
>>>>>variables in a data frame means that predict()
>>>>>is more likely to work properly.
>>>>>
>>>>>For lm(), the variables should be put into a data frame.
>>>>>As 2 vectors are assigned first in the general workspace they
>>>>>should be deleted afterwards.
>>>>>
>>>>>For the glm(), the data frame d.AD is constructed but not used. Also,
>>>>>its 3 components were assigned first in the general workspace, so they
>>>>>float around dangerously afterwards like in the lm() example.
>>>>>
>>>>>Rather than attached improved .Rd files here, they are put at
>>>>>www.stat.auckland.ac.nz/~yee/Rdfiles
>>>>>You are welcome to use them!
>>>>>
>>>>>Best,
>>>>>
>>>>>Thomas
>>>>>
>>>>>______________________________________________
>>>>>R-devel at r-project.org mailing list
>>>>>https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>>______________________________________________
>>>>R-devel at r-project.org mailing list
>>>>https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>
>>>*******************************************************************
>>>This email and any attachments are confidential. Any u...{{dropped:12}}
>>
>>______________________________________________
>>R-devel at r-project.org mailing list
>>https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>______________________________________________
>R-devel at r-project.org mailing list
>https://stat.ethz.ch/mailman/listinfo/r-devel
>


From Achim@Zeilei@ @ending from uibk@@c@@t  Mon Dec 17 00:26:46 2018
From: Achim@Zeilei@ @ending from uibk@@c@@t (Achim Zeileis)
Date: Mon, 17 Dec 2018 00:26:46 +0100 (CET)
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <20181215142400.7h4onph6ruh2isq5@ofb.net>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <alpine.DEB.2.21.1812151342530.19588@paninaro>
 <20181215142400.7h4onph6ruh2isq5@ofb.net>
Message-ID: <alpine.DEB.2.21.1812170019110.14461@paninaro>

On Sat, 15 Dec 2018, frederik at ofb.net wrote:

> I agree with Steve and Achim that we should keep some examples with no
> data frame. That's Objectively Simpler, whether or not it leads to
> clutter in the wrong hands. As Steve points out, we have attach()
> which is an excellent language feature - not to mention with().

Just for the record: Personally, I wouldn't recommend using lm() with 
attach() or with() but would always encourage using data= instead.

In my previous e-mail I just wanted to point out that a pragmatic step for 
the man page could be to keep one example without data= argument when 
adding examples with data=.

> I would go even further and say that the examples that are in lm() now
> should stay at the top. Because people may be used to referring to
> them, and also because Historical Order is generally a good order in
> which to learn things. However, if there is an important function
> argument ("data=") not in the examples, then we should add examples
> which use it. Likewise if there is a popular programming style
> (putting things in a data frame). So let's do something along the
> lines of what Thomas is requesting, but put it after the existing
> documentation? Please?
>
> On a bit of a tangent, I would like to see an example in lm() which
> plots my data with a fitted line through it. I'm probably betraying my
> ignorance here, but I was asked how to do this when showing R to a
> friend and I thought it should be in lm(), after all it seems a bit
> more basic than displaying a Normal Q-Q plot (whatever that is!
> gasp...). Similarly for glm(). Perhaps all this can be accomplished
> with merely doubling the size of the existing examples.
>
> Thanks.
>
> Frederick
>
> On Sat, Dec 15, 2018 at 02:15:52PM +0100, Achim Zeileis wrote:
>> A pragmatic solution could be to create a simple linear regression example 
>> with variables in the global environment and then another example with a 
>> data.frame.
>> 
>> The latter might be somewhat more complex, e.g., with several regressors 
>> and/or mixed categorical and numeric covariates to illustrate how 
>> regression and analysis of (co-)variance can be combined. I like to use 
>> MASS's whiteside data for this:
>> 
>> data("whiteside", package = "MASS")
>> m1 <- lm(Gas ~ Temp, data = whiteside)
>> m2 <- lm(Gas ~ Insul + Temp, data = whiteside)
>> m3 <- lm(Gas ~ Insul * Temp, data = whiteside)
>> anova(m1, m2, m3)
>> 
>> Moreover, some binary response data.frame with a few covariates might be a 
>> useful addition to "datasets". For example a more granular version of the 
>> "Titanic" data (in addition to the 4-way tabel ?Titanic). Or another 
>> relatively straightforward data set, popular in econometrics and social 
>> sciences is the "Mroz" data, see e.g., help("PSID1976", package = "AER").
>> 
>> I would be happy to help with these if such additions were considered for 
>> datasets/stats.
>> 
>> 
>> On Sat, 15 Dec 2018, David Hugh-Jones wrote:
>> 
>>> I would argue examples should encourage good practice. Beginners ought to
>>> learn to keep data in data frames and not to overuse attach(). Experts can
>>> do otherwise at their own risk, but they have less need of explicit
>>> examples.
>>> 
>>> On Fri, 14 Dec 2018 at 14:51, S Ellison <S.Ellison at lgcgroup.com> wrote:
>>> 
>>>> FWIW, before all the examples are changed to data frame variants, I think
>>>> there's fairly good reason to have at least _one_ example that does _not_
>>>> place variables in a data frame.
>>>> 
>>>> The data argument in lm() is optional. And there is more than one way to
>>>> manage data in a project. I personally don't much like lots of stray
>>>> variables lurking about, but if those are the only variables out there 
>>>> and
>>>> we can be sure they aren't affected by other code, it's hardly essential 
>>>> to
>>>> create a data frame to hold something you already have.
>>>> Also, attach() is still part of R, for those folk who have a data frame
>>>> but want to reference the contents across a wider range of functions
>>>> without using with() a lot. lm() can reasonably omit the data argument
>>>> there, too.
>>>> 
>>>> So while there are good reasons to use data frames, there are also good
>>>> reasons to provide examples that don't.
>>>> 
>>>> Steve Ellison
>>>> 
>>>> 
>>>>> -----Original Message-----
>>>>> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben
>>>>> Bolker
>>>>> Sent: 13 December 2018 20:36
>>>>> To: r-devel at r-project.org
>>>>> Subject: Re: [Rd] Documentation examples for lm and glm
>>>>> 
>>>>>
>>>>>  Agree.  Or just create the data frame with those variables in it
>>>>> directly ...
>>>>> 
>>>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote:
>>>>>> Hello,
>>>>>> 
>>>>>> something that has been on my mind for a decade or two has
>>>>>> been the examples for lm() and glm(). They encourage poor style
>>>>>> because of mismanagement of data frames. Also, having the
>>>>>> variables in a data frame means that predict()
>>>>>> is more likely to work properly.
>>>>>> 
>>>>>> For lm(), the variables should be put into a data frame.
>>>>>> As 2 vectors are assigned first in the general workspace they
>>>>>> should be deleted afterwards.
>>>>>> 
>>>>>> For the glm(), the data frame d.AD is constructed but not used. Also,
>>>>>> its 3 components were assigned first in the general workspace, so they
>>>>>> float around dangerously afterwards like in the lm() example.
>>>>>> 
>>>>>> Rather than attached improved .Rd files here, they are put at
>>>>>> www.stat.auckland.ac.nz/~yee/Rdfiles
>>>>>> You are welcome to use them!
>>>>>> 
>>>>>> Best,
>>>>>> 
>>>>>> Thomas
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> 
>>>> *******************************************************************
>>>> This email and any attachments are confidential. Any u...{{dropped:12}}
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>


From t@yee @ending from @uckl@nd@@c@nz  Mon Dec 17 07:57:29 2018
From: t@yee @ending from @uckl@nd@@c@nz (Thomas Yee)
Date: Mon, 17 Dec 2018 19:57:29 +1300
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <alpine.DEB.2.21.1812170019110.14461@paninaro>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <alpine.DEB.2.21.1812151342530.19588@paninaro>
 <20181215142400.7h4onph6ruh2isq5@ofb.net>
 <alpine.DEB.2.21.1812170019110.14461@paninaro>
Message-ID: <8a02fe1f-179a-665f-376e-540e5857bbde@auckland.ac.nz>

Thanks for the discussion. I do feel quite strongly that
the variables should always be a part of a data frame. Then
functions such as summary() and pairs() can operate on them all
simultaneously.... regression is only one part of the analysis. And
what if there are lots of variables? Have them all scattered
about the workspace? One of them could be easily overwritten.

The generic predict() will still work when lm() was not assigned
a data frame, but then the 'newdata' argument needs be assigned
a data.frame. So this suggests that the original fit should have
used a data frame too.

BTW I believe attach() should be discouraged. Functions like
with() and within() are safer. Many users of attach() do not seem
to detach(), and subtle problems can arise with attach()---quite
dangerous really. The online help has a section called "Good
practice" which is good but I think it should go a little further
by actively discouraging its use in the first place.

I do not wish to be contentious on all this... just encouraging
good practice that's all.

cheers
Thomas



On 17/12/18 12:26 PM, Achim Zeileis wrote:
> On Sat, 15 Dec 2018, frederik at ofb.net wrote:
>
>> I agree with Steve and Achim that we should keep some examples with no
>> data frame. That's Objectively Simpler, whether or not it leads to
>> clutter in the wrong hands. As Steve points out, we have attach()
>> which is an excellent language feature - not to mention with().
>
> Just for the record: Personally, I wouldn't recommend using lm() with 
> attach() or with() but would always encourage using data= instead.
>
> In my previous e-mail I just wanted to point out that a pragmatic step 
> for the man page could be to keep one example without data= argument 
> when adding examples with data=.
>
>> I would go even further and say that the examples that are in lm() now
>> should stay at the top. Because people may be used to referring to
>> them, and also because Historical Order is generally a good order in
>> which to learn things. However, if there is an important function
>> argument ("data=") not in the examples, then we should add examples
>> which use it. Likewise if there is a popular programming style
>> (putting things in a data frame). So let's do something along the
>> lines of what Thomas is requesting, but put it after the existing
>> documentation? Please?
>>
>> On a bit of a tangent, I would like to see an example in lm() which
>> plots my data with a fitted line through it. I'm probably betraying my
>> ignorance here, but I was asked how to do this when showing R to a
>> friend and I thought it should be in lm(), after all it seems a bit
>> more basic than displaying a Normal Q-Q plot (whatever that is!
>> gasp...). Similarly for glm(). Perhaps all this can be accomplished
>> with merely doubling the size of the existing examples.
>>
>> Thanks.
>>
>> Frederick
>>
>> On Sat, Dec 15, 2018 at 02:15:52PM +0100, Achim Zeileis wrote:
>>> A pragmatic solution could be to create a simple linear regression 
>>> example with variables in the global environment and then another 
>>> example with a data.frame.
>>>
>>> The latter might be somewhat more complex, e.g., with several 
>>> regressors and/or mixed categorical and numeric covariates to 
>>> illustrate how regression and analysis of (co-)variance can be 
>>> combined. I like to use MASS's whiteside data for this:
>>>
>>> data("whiteside", package = "MASS")
>>> m1 <- lm(Gas ~ Temp, data = whiteside)
>>> m2 <- lm(Gas ~ Insul + Temp, data = whiteside)
>>> m3 <- lm(Gas ~ Insul * Temp, data = whiteside)
>>> anova(m1, m2, m3)
>>>
>>> Moreover, some binary response data.frame with a few covariates 
>>> might be a useful addition to "datasets". For example a more 
>>> granular version of the "Titanic" data (in addition to the 4-way 
>>> tabel ?Titanic). Or another relatively straightforward data set, 
>>> popular in econometrics and social sciences is the "Mroz" data, see 
>>> e.g., help("PSID1976", package = "AER").
>>>
>>> I would be happy to help with these if such additions were 
>>> considered for datasets/stats.
>>>
>>>
>>> On Sat, 15 Dec 2018, David Hugh-Jones wrote:
>>>
>>>> I would argue examples should encourage good practice. Beginners 
>>>> ought to
>>>> learn to keep data in data frames and not to overuse attach(). 
>>>> Experts can
>>>> do otherwise at their own risk, but they have less need of explicit
>>>> examples.
>>>>
>>>> On Fri, 14 Dec 2018 at 14:51, S Ellison <S.Ellison at lgcgroup.com> 
>>>> wrote:
>>>>
>>>>> FWIW, before all the examples are changed to data frame variants, 
>>>>> I think
>>>>> there's fairly good reason to have at least _one_ example that 
>>>>> does _not_
>>>>> place variables in a data frame.
>>>>>
>>>>> The data argument in lm() is optional. And there is more than one 
>>>>> way to
>>>>> manage data in a project. I personally don't much like lots of stray
>>>>> variables lurking about, but if those are the only variables out 
>>>>> there and
>>>>> we can be sure they aren't affected by other code, it's hardly 
>>>>> essential to
>>>>> create a data frame to hold something you already have.
>>>>> Also, attach() is still part of R, for those folk who have a data 
>>>>> frame
>>>>> but want to reference the contents across a wider range of functions
>>>>> without using with() a lot. lm() can reasonably omit the data 
>>>>> argument
>>>>> there, too.
>>>>>
>>>>> So while there are good reasons to use data frames, there are also 
>>>>> good
>>>>> reasons to provide examples that don't.
>>>>>
>>>>> Steve Ellison
>>>>>
>>>>>
>>>>>> -----Original Message-----
>>>>>> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of 
>>>>>> Ben
>>>>>> Bolker
>>>>>> Sent: 13 December 2018 20:36
>>>>>> To: r-devel at r-project.org
>>>>>> Subject: Re: [Rd] Documentation examples for lm and glm
>>>>>>
>>>>>>
>>>>>> ?Agree.? Or just create the data frame with those variables in it
>>>>>> directly ...
>>>>>>
>>>>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote:
>>>>>>> Hello,
>>>>>>>
>>>>>>> something that has been on my mind for a decade or two has
>>>>>>> been the examples for lm() and glm(). They encourage poor style
>>>>>>> because of mismanagement of data frames. Also, having the
>>>>>>> variables in a data frame means that predict()
>>>>>>> is more likely to work properly.
>>>>>>>
>>>>>>> For lm(), the variables should be put into a data frame.
>>>>>>> As 2 vectors are assigned first in the general workspace they
>>>>>>> should be deleted afterwards.
>>>>>>>
>>>>>>> For the glm(), the data frame d.AD is constructed but not used. 
>>>>>>> Also,
>>>>>>> its 3 components were assigned first in the general workspace, 
>>>>>>> so they
>>>>>>> float around dangerously afterwards like in the lm() example.
>>>>>>>
>>>>>>> Rather than attached improved .Rd files here, they are put at
>>>>>>> www.stat.auckland.ac.nz/~yee/Rdfiles
>>>>>>> You are welcome to use them!
>>>>>>>
>>>>>>> Best,
>>>>>>>
>>>>>>> Thomas
>>>>>>>
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>>
>>>>> *******************************************************************
>>>>> This email and any attachments are confidential. Any 
>>>>> u...{{dropped:12}}
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>


From m@rt@@k@r@@@ @ending from gm@il@com  Mon Dec 17 04:51:35 2018
From: m@rt@@k@r@@@ @ending from gm@il@com (=?UTF-8?B?TWFydGEgS2FyYcWb?=)
Date: Sun, 16 Dec 2018 22:51:35 -0500
Subject: [Rd] Function I mean not to export keeps being documented in a
 manual?
Message-ID: <CADVZz_pG=Pu4-FdtqF3vhYAgF7=7MML6qpCrX7WQBGtkvg1rrw@mail.gmail.com>

I am developing an R package which has a function I decided not to export.
I believe the roxygen information states that the function is not going to
be exported, yet I still see the function in the manual PDF (as generated
in command line via `CMD Rd2pdf package_dir`). What is wrong with my
preamble that the function is still being documented in a manual?

#' Generates plots for demo of package functions which take time series and
#' window width parameters
#'
#' @param func runstats package core function
#' @param plt.title.vec vector of function-specific plot titles
#'
#' @importFrom grDevices rgb
#' @importFrom graphics abline lines par plot points polygon title
#'
#' @return \code{NULL}
#'
#' @examples
#' \dontrun{
#' func <- RunningMean
#' vec <- c("black: x\nred: W-width running window",
#'          "RunningMean(x, W)",
#'          "RunningMean(x, W, circular = TRUE)")
#' plot.no.pattern(func, vec)
#' }
#'
#'
plot.no.pattern <- function(func, plt.title.vec){
...
}

Bests / Pozdrawiam,
Marta Karas

	[[alternative HTML version deleted]]


From thierry@onkelinx @ending from inbo@be  Mon Dec 17 09:04:31 2018
From: thierry@onkelinx @ending from inbo@be (Thierry Onkelinx)
Date: Mon, 17 Dec 2018 09:04:31 +0100
Subject: [Rd] Function I mean not to export keeps being documented in a
 manual?
In-Reply-To: <CADVZz_pG=Pu4-FdtqF3vhYAgF7=7MML6qpCrX7WQBGtkvg1rrw@mail.gmail.com>
References: <CADVZz_pG=Pu4-FdtqF3vhYAgF7=7MML6qpCrX7WQBGtkvg1rrw@mail.gmail.com>
Message-ID: <CAJuCY5xOEi7JoBRO0LE85UrW-JV4zFbdYiM5q3mO7UJzqkkrMA@mail.gmail.com>

Dear Marta,

Add the @noRd tag to the Roxygen documentation of the function.

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>


Op ma 17 dec. 2018 om 08:57 schreef Marta Kara? <marta.karass at gmail.com>:

> I am developing an R package which has a function I decided not to export.
> I believe the roxygen information states that the function is not going to
> be exported, yet I still see the function in the manual PDF (as generated
> in command line via `CMD Rd2pdf package_dir`). What is wrong with my
> preamble that the function is still being documented in a manual?
>
> #' Generates plots for demo of package functions which take time series and
> #' window width parameters
> #'
> #' @param func runstats package core function
> #' @param plt.title.vec vector of function-specific plot titles
> #'
> #' @importFrom grDevices rgb
> #' @importFrom graphics abline lines par plot points polygon title
> #'
> #' @return \code{NULL}
> #'
> #' @examples
> #' \dontrun{
> #' func <- RunningMean
> #' vec <- c("black: x\nred: W-width running window",
> #'          "RunningMean(x, W)",
> #'          "RunningMean(x, W, circular = TRUE)")
> #' plot.no.pattern(func, vec)
> #' }
> #'
> #'
> plot.no.pattern <- function(func, plt.title.vec){
> ...
> }
>
> Bests / Pozdrawiam,
> Marta Karas
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Dec 17 09:05:28 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 17 Dec 2018 09:05:28 +0100
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
Message-ID: <23575.22728.140810.518108@stat.math.ethz.ch>

>>>>> David Hugh-Jones 
>>>>>     on Sat, 15 Dec 2018 08:47:28 +0100 writes:

    > I would argue examples should encourage good
    > practice. Beginners ought to learn to keep data in data
    > frames and not to overuse attach(). 

Note there's no attach() there in any of these examples!

    > otherwise at their own risk, but they have less need of
    > explicit examples.

The glm examples are nice in sofar they show both uses.

I agree the lm() example(s) are  "didactically misleading" by
not using data frames at all.

I disagree that only data frame examples should be shown.
If  lm()  is one of the first R functions a beginneR must use --
because they are in a basic stats class, say --  it may be
*better* didactically to focus on lm()  in the very first
example, and use data frames in a next one ...
.... and instead of next one, we have the pretty clear comment
     
  ### less simple examples in "See Also" above

I'm not convinced (but you can try more) we should change those
examples or add more there.

Martin

    > On Fri, 14 Dec 2018 at 14:51, S Ellison
    > <S.Ellison at lgcgroup.com> wrote:

    >> FWIW, before all the examples are changed to data frame
    >> variants, I think there's fairly good reason to have at
    >> least _one_ example that does _not_ place variables in a
    >> data frame.
    >> 
    >> The data argument in lm() is optional. And there is more
    >> than one way to manage data in a project. I personally
    >> don't much like lots of stray variables lurking about,
    >> but if those are the only variables out there and we can
    >> be sure they aren't affected by other code, it's hardly
    >> essential to create a data frame to hold something you
    >> already have.  Also, attach() is still part of R, for
    >> those folk who have a data frame but want to reference
    >> the contents across a wider range of functions without
    >> using with() a lot. lm() can reasonably omit the data
    >> argument there, too.
    >> 
    >> So while there are good reasons to use data frames, there
    >> are also good reasons to provide examples that don't.
    >> 
    >> Steve Ellison
    >> 
    >> 
    >> > -----Original Message----- > From: R-devel
    >> [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben >
    >> Bolker > Sent: 13 December 2018 20:36 > To:
    >> r-devel at r-project.org > Subject: Re: [Rd] Documentation
    >> examples for lm and glm
    >> >
    >> >
    >> > Agree.  Or just create the data frame with those
    >> variables in it > directly ...
    >> >
    >> > On 2018-12-13 3:26 p.m., Thomas Yee wrote: > > Hello,
    >> > >
    >> > > something that has been on my mind for a decade or
    >> two has > > been the examples for lm() and glm(). They
    >> encourage poor style > > because of mismanagement of data
    >> frames. Also, having the > > variables in a data frame
    >> means that predict() > > is more likely to work properly.
    >> > >
    >> > > For lm(), the variables should be put into a data
    >> frame.  > > As 2 vectors are assigned first in the
    >> general workspace they > > should be deleted afterwards.
    >> > >
    >> > > For the glm(), the data frame d.AD is constructed but
    >> not used. Also, > > its 3 components were assigned first
    >> in the general workspace, so they > > float around
    >> dangerously afterwards like in the lm() example.
    >> > >
    >> > > Rather than attached improved .Rd files here, they
    >> are put at > > www.stat.auckland.ac.nz/~yee/Rdfiles > >
    >> You are welcome to use them!
    >> > >
    >> > > Best,
    >> > >
    >> > > Thomas
    >> > >
    >> > > ______________________________________________ > >
    >> R-devel at r-project.org mailing list > >
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >
    >> > ______________________________________________ >
    >> R-devel at r-project.org mailing list >
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> 
    >> *******************************************************************
    >> This email and any attachments are confidential. Any
    >> u...{{dropped:12}}

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From jfox @ending from mcm@@ter@c@  Mon Dec 17 15:21:33 2018
From: jfox @ending from mcm@@ter@c@ (Fox, John)
Date: Mon, 17 Dec 2018 14:21:33 +0000
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <4050_1545033965_wBH8640d000633_23575.22728.140810.518108@stat.math.ethz.ch>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <4050_1545033965_wBH8640d000633_23575.22728.140810.518108@stat.math.ethz.ch>
Message-ID: <6705BFA6-2208-435D-BA4A-8259C80BCA4C@mcmaster.ca>

Dear Martin,

I think that everyone agrees that it?s generally preferable to use the data argument to lm() and I have nothing significant to add to the substance of the discussion, but I think that it?s a mistake not to add to the current examples, for the following reasons:

(1) Relegating examples using the data argument to ?see also? doesn?t suggest that using the argument is a best practice. Most users won?t bother to click the links.

(2) In my opinion, an new initial example using the data argument would more clearly suggest that this is the normally the best option.

(3) I think that it would also be desirable to add a remark to the explanation of the data argument, something like, ?Although the argument is optional, it's generally preferable to specify it explicitly.? And similarly on the help page for glm().

My two (or three) cents.

John

  -------------------------------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Dec 17, 2018, at 3:05 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> David Hugh-Jones 
>>>>>>    on Sat, 15 Dec 2018 08:47:28 +0100 writes:
> 
>> I would argue examples should encourage good
>> practice. Beginners ought to learn to keep data in data
>> frames and not to overuse attach(). 
> 
> Note there's no attach() there in any of these examples!
> 
>> otherwise at their own risk, but they have less need of
>> explicit examples.
> 
> The glm examples are nice in sofar they show both uses.
> 
> I agree the lm() example(s) are  "didactically misleading" by
> not using data frames at all.
> 
> I disagree that only data frame examples should be shown.
> If  lm()  is one of the first R functions a beginneR must use --
> because they are in a basic stats class, say --  it may be
> *better* didactically to focus on lm()  in the very first
> example, and use data frames in a next one ...
> .... and instead of next one, we have the pretty clear comment
> 
>  ### less simple examples in "See Also" above
> 
> I'm not convinced (but you can try more) we should change those
> examples or add more there.
> 
> Martin
> 
>> On Fri, 14 Dec 2018 at 14:51, S Ellison
>> <S.Ellison at lgcgroup.com> wrote:
> 
>>> FWIW, before all the examples are changed to data frame
>>> variants, I think there's fairly good reason to have at
>>> least _one_ example that does _not_ place variables in a
>>> data frame.
>>> 
>>> The data argument in lm() is optional. And there is more
>>> than one way to manage data in a project. I personally
>>> don't much like lots of stray variables lurking about,
>>> but if those are the only variables out there and we can
>>> be sure they aren't affected by other code, it's hardly
>>> essential to create a data frame to hold something you
>>> already have.  Also, attach() is still part of R, for
>>> those folk who have a data frame but want to reference
>>> the contents across a wider range of functions without
>>> using with() a lot. lm() can reasonably omit the data
>>> argument there, too.
>>> 
>>> So while there are good reasons to use data frames, there
>>> are also good reasons to provide examples that don't.
>>> 
>>> Steve Ellison
>>> 
>>> 
>>>> -----Original Message----- > From: R-devel
>>> [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben >
>>> Bolker > Sent: 13 December 2018 20:36 > To:
>>> r-devel at r-project.org > Subject: Re: [Rd] Documentation
>>> examples for lm and glm
>>>> 
>>>> 
>>>> Agree.  Or just create the data frame with those
>>> variables in it > directly ...
>>>> 
>>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote: > > Hello,
>>>>> 
>>>>> something that has been on my mind for a decade or
>>> two has > > been the examples for lm() and glm(). They
>>> encourage poor style > > because of mismanagement of data
>>> frames. Also, having the > > variables in a data frame
>>> means that predict() > > is more likely to work properly.
>>>>> 
>>>>> For lm(), the variables should be put into a data
>>> frame.  > > As 2 vectors are assigned first in the
>>> general workspace they > > should be deleted afterwards.
>>>>> 
>>>>> For the glm(), the data frame d.AD is constructed but
>>> not used. Also, > > its 3 components were assigned first
>>> in the general workspace, so they > > float around
>>> dangerously afterwards like in the lm() example.
>>>>> 
>>>>> Rather than attached improved .Rd files here, they
>>> are put at > > www.stat.auckland.ac.nz/~yee/Rdfiles > >
>>> You are welcome to use them!
>>>>> 
>>>>> Best,
>>>>> 
>>>>> Thomas
>>>>> 
>>>>> ______________________________________________ > >
>>> R-devel at r-project.org mailing list > >
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________ >
>>> R-devel at r-project.org mailing list >
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> 
>>> *******************************************************************
>>> This email and any attachments are confidential. Any
>>> u...{{dropped:12}}
> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From S@Elli@on @ending from LGCGroup@com  Mon Dec 17 13:49:14 2018
From: S@Elli@on @ending from LGCGroup@com (S Ellison)
Date: Mon, 17 Dec 2018 12:49:14 +0000
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <8a02fe1f-179a-665f-376e-540e5857bbde@auckland.ac.nz>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <alpine.DEB.2.21.1812151342530.19588@paninaro>
 <20181215142400.7h4onph6ruh2isq5@ofb.net>
 <alpine.DEB.2.21.1812170019110.14461@paninaro>
 <8a02fe1f-179a-665f-376e-540e5857bbde@auckland.ac.nz>
Message-ID: <8dfc5e4497c54e7db43bb4e2a67b63e3@GBDCVPEXC04.corp.lgc-group.com>



> From: Thomas Yee [mailto:t.yee at auckland.ac.nz]
> 
> Thanks for the discussion. I do feel quite strongly that
> the variables should always be a part of a data frame. 

This seems pretty much a decision for R core, and I think it's useful to have raised the issue.

But I, er, feel strongly that strong feelings and 'always' are unsafe in a best practice argument. 

First, other folk with different use-cases or work practice may see 'best practice' quite differently. So I would pretty much always expect exceptions.

Second, for examples of capability, there are too many exceptions in this instance. For example:
glm() can take a two-column matrix as a single response variable. 
lm() can take a matrix as a response variable. 
lm() can take a complete data frame as a predictor (see ?stackloss)

None of these work naturally if everything is in a data frame, and some won?t work at all.

Steve E




*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From jfox @ending from mcm@@ter@c@  Mon Dec 17 15:33:27 2018
From: jfox @ending from mcm@@ter@c@ (Fox, John)
Date: Mon, 17 Dec 2018 14:33:27 +0000
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <30491_1545056764_wBHEQ3mD028078_8dfc5e4497c54e7db43bb4e2a67b63e3@GBDCVPEXC04.corp.lgc-group.com>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <alpine.DEB.2.21.1812151342530.19588@paninaro>
 <20181215142400.7h4onph6ruh2isq5@ofb.net>
 <alpine.DEB.2.21.1812170019110.14461@paninaro>
 <8a02fe1f-179a-665f-376e-540e5857bbde@auckland.ac.nz>
 <30491_1545056764_wBHEQ3mD028078_8dfc5e4497c54e7db43bb4e2a67b63e3@GBDCVPEXC04.corp.lgc-group.com>
Message-ID: <0119928F-8998-4B14-99E4-678EE74D1E99@mcmaster.ca>

Dear Steve,

Since this relates as well to the message I posted a couple of minutes before yours, I agree that it?s possible to phrase ?best practices? too categorically. In the current case, I believe that it?s reasonable to say that specifying the data argument is ?generally? or ?usually? the best option. That doesn?t rule out exceptions.

Best,
 John

  -------------------------------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Dec 17, 2018, at 7:49 AM, S Ellison <S.Ellison at LGCGroup.com> wrote:
> 
> 
> 
>> From: Thomas Yee [mailto:t.yee at auckland.ac.nz]
>> 
>> Thanks for the discussion. I do feel quite strongly that
>> the variables should always be a part of a data frame. 
> 
> This seems pretty much a decision for R core, and I think it's useful to have raised the issue.
> 
> But I, er, feel strongly that strong feelings and 'always' are unsafe in a best practice argument. 
> 
> First, other folk with different use-cases or work practice may see 'best practice' quite differently. So I would pretty much always expect exceptions.
> 
> Second, for examples of capability, there are too many exceptions in this instance. For example:
> glm() can take a two-column matrix as a single response variable. 
> lm() can take a matrix as a response variable. 
> lm() can take a complete data frame as a predictor (see ?stackloss)
> 
> None of these work naturally if everything is in a data frame, and some won?t work at all.
> 
> Steve E
> 
> 
> 
> 
> *******************************************************************
> This email and any attachments are confidential. Any use, copying or
> disclosure other than by the intended recipient is unauthorised. If 
> you have received this message in error, please notify the sender 
> immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
> and delete this message and any copies from your computer and network. 
> LGC Limited. Registered in England 2991879. 
> Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hcortin@71 @ending from gm@il@com  Mon Dec 17 09:35:14 2018
From: hcortin@71 @ending from gm@il@com (Hernando Cortina)
Date: Mon, 17 Dec 2018 03:35:14 -0500
Subject: [Rd] Unnecessary apostrophe in English base::summary() NA count
 output?
Message-ID: <CAJqKk207x-HiM31d07mo=Y0bos5FtMb4XmiPXv8B2e-Z-LjXBw@mail.gmail.com>

 Hello, this is quite a minor issue but as summary() is in all likelihood
one of the most widely used functions in R I decided to email this list.
When producing a count of missing values, summary() in English generates an
unnecessary and grammatically incorrect apostrophe (NA's rather than NAs)
in its table header.  For example:

> summary(c(1,2,NA,3,4,NA))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
   1.00    1.75    2.50    2.50    3.25    4.00       2

The issue can be traced to this file:
https://svn.r-project.org/R/trunk/src/library/base/R/summary.R
Unless this is being done intentionally for some reason, the solution would
seem to be to replace the string "NA's" with "NAs".  There are 9
occurrences in the file.

Thank you very much.

	[[alternative HTML version deleted]]


From tuechler @ending from gmx@@t  Mon Dec 17 16:19:26 2018
From: tuechler @ending from gmx@@t (Heinz Tuechler)
Date: Mon, 17 Dec 2018 16:19:26 +0100
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <6705BFA6-2208-435D-BA4A-8259C80BCA4C@mcmaster.ca>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <4050_1545033965_wBH8640d000633_23575.22728.140810.518108@stat.math.ethz.ch>
 <6705BFA6-2208-435D-BA4A-8259C80BCA4C@mcmaster.ca>
Message-ID: <c129d4c4-4578-4999-4682-98dbd06dae43@gmx.at>

Dear All,

do you think that use of a data argument is best practice in the example 
below?

regards,

Heinz

### trivial example
plotwithline <- function(x, y) {
     plot(x, y)
     abline(lm(y~x)) ## data argument?
}

set.seed(25)
df0 <- data.frame(x=rnorm(20), y=rnorm(20))

plotwithline(df0[['x']], df0[['y']])



Fox, John wrote/hat geschrieben on/am 17.12.2018 15:21:
> Dear Martin,
>
> I think that everyone agrees that it?s generally preferable to use the data argument to lm() and I have nothing significant to add to the substance of the discussion, but I think that it?s a mistake not to add to the current examples, for the following reasons:
>
> (1) Relegating examples using the data argument to ?see also? doesn?t suggest that using the argument is a best practice. Most users won?t bother to click the links.
>
> (2) In my opinion, an new initial example using the data argument would more clearly suggest that this is the normally the best option.
>
> (3) I think that it would also be desirable to add a remark to the explanation of the data argument, something like, ?Although the argument is optional, it's generally preferable to specify it explicitly.? And similarly on the help page for glm().
>
> My two (or three) cents.
>
> John
>
>   -------------------------------------------------
>   John Fox, Professor Emeritus
>   McMaster University
>   Hamilton, Ontario, Canada
>   Web: http::/socserv.mcmaster.ca/jfox
>
>> On Dec 17, 2018, at 3:05 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> David Hugh-Jones
>>>>>>>    on Sat, 15 Dec 2018 08:47:28 +0100 writes:
>>
>>> I would argue examples should encourage good
>>> practice. Beginners ought to learn to keep data in data
>>> frames and not to overuse attach().
>>
>> Note there's no attach() there in any of these examples!
>>
>>> otherwise at their own risk, but they have less need of
>>> explicit examples.
>>
>> The glm examples are nice in sofar they show both uses.
>>
>> I agree the lm() example(s) are  "didactically misleading" by
>> not using data frames at all.
>>
>> I disagree that only data frame examples should be shown.
>> If  lm()  is one of the first R functions a beginneR must use --
>> because they are in a basic stats class, say --  it may be
>> *better* didactically to focus on lm()  in the very first
>> example, and use data frames in a next one ...
>> .... and instead of next one, we have the pretty clear comment
>>
>>  ### less simple examples in "See Also" above
>>
>> I'm not convinced (but you can try more) we should change those
>> examples or add more there.
>>
>> Martin
>>
>>> On Fri, 14 Dec 2018 at 14:51, S Ellison
>>> <S.Ellison at lgcgroup.com> wrote:
>>
>>>> FWIW, before all the examples are changed to data frame
>>>> variants, I think there's fairly good reason to have at
>>>> least _one_ example that does _not_ place variables in a
>>>> data frame.
>>>>
>>>> The data argument in lm() is optional. And there is more
>>>> than one way to manage data in a project. I personally
>>>> don't much like lots of stray variables lurking about,
>>>> but if those are the only variables out there and we can
>>>> be sure they aren't affected by other code, it's hardly
>>>> essential to create a data frame to hold something you
>>>> already have.  Also, attach() is still part of R, for
>>>> those folk who have a data frame but want to reference
>>>> the contents across a wider range of functions without
>>>> using with() a lot. lm() can reasonably omit the data
>>>> argument there, too.
>>>>
>>>> So while there are good reasons to use data frames, there
>>>> are also good reasons to provide examples that don't.
>>>>
>>>> Steve Ellison
>>>>
>>>>
>>>>> -----Original Message----- > From: R-devel
>>>> [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben >
>>>> Bolker > Sent: 13 December 2018 20:36 > To:
>>>> r-devel at r-project.org > Subject: Re: [Rd] Documentation
>>>> examples for lm and glm
>>>>>
>>>>>
>>>>> Agree.  Or just create the data frame with those
>>>> variables in it > directly ...
>>>>>
>>>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote: > > Hello,
>>>>>>
>>>>>> something that has been on my mind for a decade or
>>>> two has > > been the examples for lm() and glm(). They
>>>> encourage poor style > > because of mismanagement of data
>>>> frames. Also, having the > > variables in a data frame
>>>> means that predict() > > is more likely to work properly.
>>>>>>
>>>>>> For lm(), the variables should be put into a data
>>>> frame.  > > As 2 vectors are assigned first in the
>>>> general workspace they > > should be deleted afterwards.
>>>>>>
>>>>>> For the glm(), the data frame d.AD is constructed but
>>>> not used. Also, > > its 3 components were assigned first
>>>> in the general workspace, so they > > float around
>>>> dangerously afterwards like in the lm() example.
>>>>>>
>>>>>> Rather than attached improved .Rd files here, they
>>>> are put at > > www.stat.auckland.ac.nz/~yee/Rdfiles > >
>>>> You are welcome to use them!
>>>>>>
>>>>>> Best,
>>>>>>
>>>>>> Thomas
>>>>>>
>>>>>> ______________________________________________ > >
>>>> R-devel at r-project.org mailing list > >
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>> ______________________________________________ >
>>>> R-devel at r-project.org mailing list >
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>>
>>>> *******************************************************************
>>>> This email and any attachments are confidential. Any
>>>> u...{{dropped:12}}
>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ligge@ @ending from @t@ti@tik@tu-dortmund@de  Mon Dec 17 16:19:59 2018
From: ligge@ @ending from @t@ti@tik@tu-dortmund@de (Uwe Ligges)
Date: Mon, 17 Dec 2018 16:19:59 +0100
Subject: [Rd] CRAN incoming queue closed from Dec 21 to Jan 02
Message-ID: <6d5b4473-8e7c-e4fa-f553-79087aa38f98@statistik.tu-dortmund.de>

Dear package developers,

the CRAN incoming queue will be closed from Dec 21, 2018 to Jan 02, 
2019. Hence package submissions are only possible before and after that 
period.

Best,
Uwe Ligges
(for the CRAN team)


From jfox @ending from mcm@@ter@c@  Mon Dec 17 16:23:07 2018
From: jfox @ending from mcm@@ter@c@ (Fox, John)
Date: Mon, 17 Dec 2018 15:23:07 +0000
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <29561_1545059944_wBHFJ3fx032296_c129d4c4-4578-4999-4682-98dbd06dae43@gmx.at>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <4050_1545033965_wBH8640d000633_23575.22728.140810.518108@stat.math.ethz.ch>
 <6705BFA6-2208-435D-BA4A-8259C80BCA4C@mcmaster.ca>
 <29561_1545059944_wBHFJ3fx032296_c129d4c4-4578-4999-4682-98dbd06dae43@gmx.at>
Message-ID: <5D482A98-398A-4210-AE22-219E9A4A4FD3@mcmaster.ca>

Dear Heinz,

  ----------------------------------------------
> On Dec 17, 2018, at 10:19 AM, Heinz Tuechler <tuechler at gmx.at> wrote:
> 
> Dear All,
> 
> do you think that use of a data argument is best practice in the example below?

No, but it is *normally* or *usually* the best option, in my opinion.

Best,
 John

> 
> regards,
> 
> Heinz
> 
> ### trivial example
> plotwithline <- function(x, y) {
>    plot(x, y)
>    abline(lm(y~x)) ## data argument?
> }
> 
> set.seed(25)
> df0 <- data.frame(x=rnorm(20), y=rnorm(20))
> 
> plotwithline(df0[['x']], df0[['y']])
> 
> 
> 
> Fox, John wrote/hat geschrieben on/am 17.12.2018 15:21:
>> Dear Martin,
>> 
>> I think that everyone agrees that it?s generally preferable to use the data argument to lm() and I have nothing significant to add to the substance of the discussion, but I think that it?s a mistake not to add to the current examples, for the following reasons:
>> 
>> (1) Relegating examples using the data argument to ?see also? doesn?t suggest that using the argument is a best practice. Most users won?t bother to click the links.
>> 
>> (2) In my opinion, an new initial example using the data argument would more clearly suggest that this is the normally the best option.
>> 
>> (3) I think that it would also be desirable to add a remark to the explanation of the data argument, something like, ?Although the argument is optional, it's generally preferable to specify it explicitly.? And similarly on the help page for glm().
>> 
>> My two (or three) cents.
>> 
>> John
>> 
>>  -------------------------------------------------
>>  John Fox, Professor Emeritus
>>  McMaster University
>>  Hamilton, Ontario, Canada
>>  Web: http::/socserv.mcmaster.ca/jfox
>> 
>>> On Dec 17, 2018, at 3:05 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>> 
>>>>>>>> David Hugh-Jones
>>>>>>>>   on Sat, 15 Dec 2018 08:47:28 +0100 writes:
>>> 
>>>> I would argue examples should encourage good
>>>> practice. Beginners ought to learn to keep data in data
>>>> frames and not to overuse attach().
>>> 
>>> Note there's no attach() there in any of these examples!
>>> 
>>>> otherwise at their own risk, but they have less need of
>>>> explicit examples.
>>> 
>>> The glm examples are nice in sofar they show both uses.
>>> 
>>> I agree the lm() example(s) are  "didactically misleading" by
>>> not using data frames at all.
>>> 
>>> I disagree that only data frame examples should be shown.
>>> If  lm()  is one of the first R functions a beginneR must use --
>>> because they are in a basic stats class, say --  it may be
>>> *better* didactically to focus on lm()  in the very first
>>> example, and use data frames in a next one ...
>>> .... and instead of next one, we have the pretty clear comment
>>> 
>>> ### less simple examples in "See Also" above
>>> 
>>> I'm not convinced (but you can try more) we should change those
>>> examples or add more there.
>>> 
>>> Martin
>>> 
>>>> On Fri, 14 Dec 2018 at 14:51, S Ellison
>>>> <S.Ellison at lgcgroup.com> wrote:
>>> 
>>>>> FWIW, before all the examples are changed to data frame
>>>>> variants, I think there's fairly good reason to have at
>>>>> least _one_ example that does _not_ place variables in a
>>>>> data frame.
>>>>> 
>>>>> The data argument in lm() is optional. And there is more
>>>>> than one way to manage data in a project. I personally
>>>>> don't much like lots of stray variables lurking about,
>>>>> but if those are the only variables out there and we can
>>>>> be sure they aren't affected by other code, it's hardly
>>>>> essential to create a data frame to hold something you
>>>>> already have.  Also, attach() is still part of R, for
>>>>> those folk who have a data frame but want to reference
>>>>> the contents across a wider range of functions without
>>>>> using with() a lot. lm() can reasonably omit the data
>>>>> argument there, too.
>>>>> 
>>>>> So while there are good reasons to use data frames, there
>>>>> are also good reasons to provide examples that don't.
>>>>> 
>>>>> Steve Ellison
>>>>> 
>>>>> 
>>>>>> -----Original Message----- > From: R-devel
>>>>> [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben >
>>>>> Bolker > Sent: 13 December 2018 20:36 > To:
>>>>> r-devel at r-project.org > Subject: Re: [Rd] Documentation
>>>>> examples for lm and glm
>>>>>> 
>>>>>> 
>>>>>> Agree.  Or just create the data frame with those
>>>>> variables in it > directly ...
>>>>>> 
>>>>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote: > > Hello,
>>>>>>> 
>>>>>>> something that has been on my mind for a decade or
>>>>> two has > > been the examples for lm() and glm(). They
>>>>> encourage poor style > > because of mismanagement of data
>>>>> frames. Also, having the > > variables in a data frame
>>>>> means that predict() > > is more likely to work properly.
>>>>>>> 
>>>>>>> For lm(), the variables should be put into a data
>>>>> frame.  > > As 2 vectors are assigned first in the
>>>>> general workspace they > > should be deleted afterwards.
>>>>>>> 
>>>>>>> For the glm(), the data frame d.AD is constructed but
>>>>> not used. Also, > > its 3 components were assigned first
>>>>> in the general workspace, so they > > float around
>>>>> dangerously afterwards like in the lm() example.
>>>>>>> 
>>>>>>> Rather than attached improved .Rd files here, they
>>>>> are put at > > www.stat.auckland.ac.nz/~yee/Rdfiles > >
>>>>> You are welcome to use them!
>>>>>>> 
>>>>>>> Best,
>>>>>>> 
>>>>>>> Thomas
>>>>>>> 
>>>>>>> ______________________________________________ > >
>>>>> R-devel at r-project.org mailing list > >
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>> 
>>>>>> ______________________________________________ >
>>>>> R-devel at r-project.org mailing list >
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>>> 
>>>>> *******************************************************************
>>>>> This email and any attachments are confidential. Any
>>>>> u...{{dropped:12}}
>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbolker @ending from gm@il@com  Mon Dec 17 17:01:34 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Mon, 17 Dec 2018 11:01:34 -0500
Subject: [Rd] Unnecessary apostrophe in English base::summary() NA count
 output?
In-Reply-To: <CAJqKk207x-HiM31d07mo=Y0bos5FtMb4XmiPXv8B2e-Z-LjXBw@mail.gmail.com>
References: <CAJqKk207x-HiM31d07mo=Y0bos5FtMb4XmiPXv8B2e-Z-LjXBw@mail.gmail.com>
Message-ID: <CABghstSL-qpe9RQxXSet+Kuov-Usx-Mq+04Ysm53_xH=S7_LBQ@mail.gmail.com>

There seem to be a variety of opinions about style in this case; do
you omit the apostrophe ("NAs") because it's not a possessive or a
contraction, or do you include the apostrophe ("NA's") to clearly
distinguish the acronym from the plural form?

 I personally prefer "NAs" to "NA's" but both are defensible.

https://english.stackexchange.com/questions/55970/plurals-of-acronyms-letters-numbers-use-an-apostrophe-or-not
https://brians.wsu.edu/2016/05/16/acronyms-and-apostrophes/ ("many
people object to it")

On Mon, Dec 17, 2018 at 10:20 AM Hernando Cortina <hcortina71 at gmail.com> wrote:
>
>  Hello, this is quite a minor issue but as summary() is in all likelihood
> one of the most widely used functions in R I decided to email this list.
> When producing a count of missing values, summary() in English generates an
> unnecessary and grammatically incorrect apostrophe (NA's rather than NAs)
> in its table header.  For example:
>
> > summary(c(1,2,NA,3,4,NA))
>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
>    1.00    1.75    2.50    2.50    3.25    4.00       2
>
> The issue can be traced to this file:
> https://svn.r-project.org/R/trunk/src/library/base/R/summary.R
> Unless this is being done intentionally for some reason, the solution would
> seem to be to replace the string "NA's" with "NAs".  There are 9
> occurrences in the file.
>
> Thank you very much.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tuechler @ending from gmx@@t  Mon Dec 17 17:36:09 2018
From: tuechler @ending from gmx@@t (Heinz Tuechler)
Date: Mon, 17 Dec 2018 17:36:09 +0100
Subject: [Rd] Documentation examples for lm and glm
In-Reply-To: <5D482A98-398A-4210-AE22-219E9A4A4FD3@mcmaster.ca>
References: <b0027661-4c72-864d-7dea-a78ade7bf808@auckland.ac.nz>
 <3aee4716-f0d2-c683-0ad8-90ae6c5894ef@gmail.com>
 <b578698e1aac4d26b75c3f2dc0f560cc@GBDCVPEXC04.corp.lgc-group.com>
 <CAARY7khwiMrFAH0NUfhKA=L++xn-ygQHcRng7vojj4epSv36gg@mail.gmail.com>
 <4050_1545033965_wBH8640d000633_23575.22728.140810.518108@stat.math.ethz.ch>
 <6705BFA6-2208-435D-BA4A-8259C80BCA4C@mcmaster.ca>
 <29561_1545059944_wBHFJ3fx032296_c129d4c4-4578-4999-4682-98dbd06dae43@gmx.at>
 <5D482A98-398A-4210-AE22-219E9A4A4FD3@mcmaster.ca>
Message-ID: <6ef5863e-04a3-6199-ecb4-c4cccd1c5284@gmx.at>

Dear John,

fully agreed! In the global environment I always keep my 
"data-variables" in a data.frame. However, if I look in help I like 
examples that start with the particular aspects of a function. It is 
important to know, if a function offers a data argument, but in the 
first line I don't need an example for the use of a data argument each 
time I look in help.

best,
Heinz

Fox, John wrote/hat geschrieben on/am 17.12.2018 16:23:
> Dear Heinz,
>
>   ----------------------------------------------
>> On Dec 17, 2018, at 10:19 AM, Heinz Tuechler <tuechler at gmx.at> wrote:
>>
>> Dear All,
>>
>> do you think that use of a data argument is best practice in the example below?
>
> No, but it is *normally* or *usually* the best option, in my opinion.
>
> Best,
>  John
>
>>
>> regards,
>>
>> Heinz
>>
>> ### trivial example
>> plotwithline <- function(x, y) {
>>    plot(x, y)
>>    abline(lm(y~x)) ## data argument?
>> }
>>
>> set.seed(25)
>> df0 <- data.frame(x=rnorm(20), y=rnorm(20))
>>
>> plotwithline(df0[['x']], df0[['y']])
>>
>>
>>
>> Fox, John wrote/hat geschrieben on/am 17.12.2018 15:21:
>>> Dear Martin,
>>>
>>> I think that everyone agrees that it?s generally preferable to use the data argument to lm() and I have nothing significant to add to the substance of the discussion, but I think that it?s a mistake not to add to the current examples, for the following reasons:
>>>
>>> (1) Relegating examples using the data argument to ?see also? doesn?t suggest that using the argument is a best practice. Most users won?t bother to click the links.
>>>
>>> (2) In my opinion, an new initial example using the data argument would more clearly suggest that this is the normally the best option.
>>>
>>> (3) I think that it would also be desirable to add a remark to the explanation of the data argument, something like, ?Although the argument is optional, it's generally preferable to specify it explicitly.? And similarly on the help page for glm().
>>>
>>> My two (or three) cents.
>>>
>>> John
>>>
>>>  -------------------------------------------------
>>>  John Fox, Professor Emeritus
>>>  McMaster University
>>>  Hamilton, Ontario, Canada
>>>  Web: http::/socserv.mcmaster.ca/jfox
>>>
>>>> On Dec 17, 2018, at 3:05 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>>>
>>>>>>>>> David Hugh-Jones
>>>>>>>>>   on Sat, 15 Dec 2018 08:47:28 +0100 writes:
>>>>
>>>>> I would argue examples should encourage good
>>>>> practice. Beginners ought to learn to keep data in data
>>>>> frames and not to overuse attach().
>>>>
>>>> Note there's no attach() there in any of these examples!
>>>>
>>>>> otherwise at their own risk, but they have less need of
>>>>> explicit examples.
>>>>
>>>> The glm examples are nice in sofar they show both uses.
>>>>
>>>> I agree the lm() example(s) are  "didactically misleading" by
>>>> not using data frames at all.
>>>>
>>>> I disagree that only data frame examples should be shown.
>>>> If  lm()  is one of the first R functions a beginneR must use --
>>>> because they are in a basic stats class, say --  it may be
>>>> *better* didactically to focus on lm()  in the very first
>>>> example, and use data frames in a next one ...
>>>> .... and instead of next one, we have the pretty clear comment
>>>>
>>>> ### less simple examples in "See Also" above
>>>>
>>>> I'm not convinced (but you can try more) we should change those
>>>> examples or add more there.
>>>>
>>>> Martin
>>>>
>>>>> On Fri, 14 Dec 2018 at 14:51, S Ellison
>>>>> <S.Ellison at lgcgroup.com> wrote:
>>>>
>>>>>> FWIW, before all the examples are changed to data frame
>>>>>> variants, I think there's fairly good reason to have at
>>>>>> least _one_ example that does _not_ place variables in a
>>>>>> data frame.
>>>>>>
>>>>>> The data argument in lm() is optional. And there is more
>>>>>> than one way to manage data in a project. I personally
>>>>>> don't much like lots of stray variables lurking about,
>>>>>> but if those are the only variables out there and we can
>>>>>> be sure they aren't affected by other code, it's hardly
>>>>>> essential to create a data frame to hold something you
>>>>>> already have.  Also, attach() is still part of R, for
>>>>>> those folk who have a data frame but want to reference
>>>>>> the contents across a wider range of functions without
>>>>>> using with() a lot. lm() can reasonably omit the data
>>>>>> argument there, too.
>>>>>>
>>>>>> So while there are good reasons to use data frames, there
>>>>>> are also good reasons to provide examples that don't.
>>>>>>
>>>>>> Steve Ellison
>>>>>>
>>>>>>
>>>>>>> -----Original Message----- > From: R-devel
>>>>>> [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben >
>>>>>> Bolker > Sent: 13 December 2018 20:36 > To:
>>>>>> r-devel at r-project.org > Subject: Re: [Rd] Documentation
>>>>>> examples for lm and glm
>>>>>>>
>>>>>>>
>>>>>>> Agree.  Or just create the data frame with those
>>>>>> variables in it > directly ...
>>>>>>>
>>>>>>> On 2018-12-13 3:26 p.m., Thomas Yee wrote: > > Hello,
>>>>>>>>
>>>>>>>> something that has been on my mind for a decade or
>>>>>> two has > > been the examples for lm() and glm(). They
>>>>>> encourage poor style > > because of mismanagement of data
>>>>>> frames. Also, having the > > variables in a data frame
>>>>>> means that predict() > > is more likely to work properly.
>>>>>>>>
>>>>>>>> For lm(), the variables should be put into a data
>>>>>> frame.  > > As 2 vectors are assigned first in the
>>>>>> general workspace they > > should be deleted afterwards.
>>>>>>>>
>>>>>>>> For the glm(), the data frame d.AD is constructed but
>>>>>> not used. Also, > > its 3 components were assigned first
>>>>>> in the general workspace, so they > > float around
>>>>>> dangerously afterwards like in the lm() example.
>>>>>>>>
>>>>>>>> Rather than attached improved .Rd files here, they
>>>>>> are put at > > www.stat.auckland.ac.nz/~yee/Rdfiles > >
>>>>>> You are welcome to use them!
>>>>>>>>
>>>>>>>> Best,
>>>>>>>>
>>>>>>>> Thomas
>>>>>>>>


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Dec 17 19:31:00 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 17 Dec 2018 19:31:00 +0100
Subject: [Rd] R is missing log1p(z) etc for complex numbers z.
Message-ID: <23575.60260.713979.81865@stat.math.ethz.ch>

Working on my 'Bessel' package, I've re-detected today, that
indeed even C99 standard GLIBC does not contain, a complex
number version of 

   log1p()

Further missing in current R, are, basically these

> z <- 1 + 2i
> log1p(z)
Error in log1p(z) : unimplemented complex function
> expm1(z)
Error in expm1(z) : unimplemented complex function
> gamma(z)
Error in gamma(z) : unimplemented complex function
> lgamma(z)
Error in lgamma(z) : unimplemented complex function
> psigamma(z)
Error in psigamma(z) : unimplemented complex function
> digamma(z)
Error in digamma(z) : unimplemented complex function
> sinpi(z)
Error in sinpi(z) : unimplemented complex function
> cospi(z)
Error in cospi(z) : unimplemented complex function
> floor(z)
Error in floor(z) : unimplemented complex function
> ceiling(z)
Error in ceiling(z) : unimplemented complex function
> 
--------------

Is anyone aware of Free Software implementations of these,
ideally in C ?

... yes, I think I've found the Julia source code for these,
    nicely written in Julia itself...

Martin


From jfox @ending from mcm@@ter@c@  Wed Dec 19 16:19:27 2018
From: jfox @ending from mcm@@ter@c@ (Fox, John)
Date: Wed, 19 Dec 2018 15:19:27 +0000
Subject: [Rd] logical variables in models
Message-ID: <F0C159A4-5713-4138-8F2D-559E66FB132B@mcmaster.ca>

Dear R-devel list members,

This is an observation about how logical variables in models are handled, followed by questions.

As a general matter, character variables and logical variables are treated as if they were factors when they appear on the RHS of a model formula; for example:

- - - - snip- - - - -

> set.seed(123)
> c <- sample(letters[1:3], 10, replace=TRUE)
> f <- as.factor(sample(LETTERS[1:3], 10, replace=TRUE))
> L <- sample(c(TRUE, FALSE), 10, replace=TRUE)
> y <- rnorm(10)
> options(contrasts=c("contr.sum", "contr.poly"))
> mod <- lm(y ~ c + f + L)
> model.matrix(mod)
   (Intercept) c1 c2 f1 f2 L1
1            1  1  0 -1 -1  1
2            1 -1 -1  0  1  1
3            1  0  1 -1 -1  1
4            1 -1 -1  0  1  1
5            1 -1 -1  1  0  1
6            1  1  0 -1 -1  1
7            1  0  1  1  0  1
8            1 -1 -1  1  0  1
9            1  0  1  1  0 -1
10           1  0  1 -1 -1 -1
attr(,"assign")
[1] 0 1 1 2 2 3
attr(,"contrasts")
attr(,"contrasts")$c
[1] "contr.sum"

attr(,"contrasts")$f
[1] "contr.sum"

attr(,"contrasts")$L
[1] ?contr.sum"

- - - - snip- - - - -

But logical variables don?t appear in the $xlevels component of the objects created by lm() and similar functions:

- - - - snip- - - - -

> mod$xlevels
$c
[1] "a" "b" "c"

$f
[1] "A" "B" ?C"

- - - - snip- - - - -

Why the discrepancy? It?s true that the level-set (i.e., TRUE, FALSE) for a logical ?factor? is known, but examining the $levels component is a simple way to detect variables treated as factors in the model. For example, I?d argue that .getXlevels() returns misleading information:

- - - - snip- - - - -

> .getXlevels(terms(mod), model.frame(mod))
$c
[1] "a" "b" "c"

$f
[1] "A" "B" ?C"

- - - - snip- - - - -

An alternative for detecting ?factors? is to examine the 'contrasts' attribute of the model matrix, although that doesn?t produce levels:

- - - - snip- - - - -

> names(attr(model.matrix(mod), "contrasts"))
[1] "c" "f" "L"

- - - - snip- - - - -

Is there are argument against making the treatment of logical variables consistent with that of factors and character variables? Comments?

Best,
 John

  -------------------------------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox


From rol@nd@fu@@ @ending from thuenen@de  Thu Dec 20 14:29:39 2018
From: rol@nd@fu@@ @ending from thuenen@de (=?UTF-8?Q?Roland_Fu=c3=9f?=)
Date: Thu, 20 Dec 2018 14:29:39 +0100
Subject: [Rd] OfficeScan deletes Rterm as malware
Message-ID: <c870cbce-6628-c4c0-1855-ff5dc35141b3@thuenen.de>

I'm not sure if the problem is actually with R but thought I should 
report this anyway.

After Peter's email regarding the R 3.5.2 release today, I installed the 
Windows version right away (directly from CRAN and not from a mirror).

Unfortunately, my institute's AV sofware TrendMicro OfficeScan 12.0.5147 
Service Pack 1 stops and deletes Rterm.exe when running Rcmd.exe INSTALL 
with a local source package. It reports "OfficeScan detected a Behavior 
Monitoring policy violation and blocked the offending process(es)." and 
"Unauthorized File Encryption" by Rterm.exe.

I've deinstalled R 3.5.2 for now and switched back to 3.5.1, which works 
fine.

Best,

Roland Fu?


From jori@mey@ @ending from gm@il@com  Thu Dec 20 15:07:22 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Thu, 20 Dec 2018 15:07:22 +0100
Subject: [Rd] OfficeScan deletes Rterm as malware
In-Reply-To: <c870cbce-6628-c4c0-1855-ff5dc35141b3@thuenen.de>
References: <c870cbce-6628-c4c0-1855-ff5dc35141b3@thuenen.de>
Message-ID: <CAO1zAVbpzNygEvO_5D5YdxJtA6zPOFYbZTKnMrJEkCqd90mekw@mail.gmail.com>

Dear Roland,

quite surprising, as online scans of TrendMicro turn up completely clean.
It looks like a false positive, which you can report to TrendMicro as
explained here :

https://success.trendmicro.com/solution/1115668-preventing-behavior-monitoring-false-detections-in-officescan#collapse1

On the same website they explain how you can whitelist it. I'll check at
home with a few other antiviruses, but I'm pretty certain this is a case of
TrendMicro being overly enthousiast in its protection.

Cheers
Joris

On Thu, Dec 20, 2018 at 2:52 PM Roland Fu? <roland.fuss at thuenen.de> wrote:

> I'm not sure if the problem is actually with R but thought I should
> report this anyway.
>
> After Peter's email regarding the R 3.5.2 release today, I installed the
> Windows version right away (directly from CRAN and not from a mirror).
>
> Unfortunately, my institute's AV sofware TrendMicro OfficeScan 12.0.5147
> Service Pack 1 stops and deletes Rterm.exe when running Rcmd.exe INSTALL
> with a local source package. It reports "OfficeScan detected a Behavior
> Monitoring policy violation and blocked the offending process(es)." and
> "Unauthorized File Encryption" by Rterm.exe.
>
> I've deinstalled R 3.5.2 for now and switched back to 3.5.1, which works
> fine.
>
> Best,
>
> Roland Fu?
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From jeroen @ending from berkeley@edu  Thu Dec 20 16:48:52 2018
From: jeroen @ending from berkeley@edu (Jeroen Ooms)
Date: Thu, 20 Dec 2018 16:48:52 +0100
Subject: [Rd] OfficeScan deletes Rterm as malware
In-Reply-To: <c870cbce-6628-c4c0-1855-ff5dc35141b3@thuenen.de>
References: <c870cbce-6628-c4c0-1855-ff5dc35141b3@thuenen.de>
Message-ID: <CABFfbXt54JBxvHwdbcH3R8njqnkNFp5k=64fPey6OGGJ3CJVyg@mail.gmail.com>

On Thu, Dec 20, 2018 at 2:52 PM Roland Fu? <roland.fuss at thuenen.de> wrote:
>
> I'm not sure if the problem is actually with R but thought I should
> report this anyway.
>
> After Peter's email regarding the R 3.5.2 release today, I installed the
> Windows version right away (directly from CRAN and not from a mirror).
>
> Unfortunately, my institute's AV sofware TrendMicro OfficeScan 12.0.5147
> Service Pack 1 stops and deletes Rterm.exe when running Rcmd.exe INSTALL
> with a local source package. It reports "OfficeScan detected a Behavior
> Monitoring policy violation and blocked the offending process(es)." and
> "Unauthorized File Encryption" by Rterm.exe.

I can't think of anything that has changed between R 3.5.1 and 3.5.2.
What does "Behavior Monitoring policy violation" mean? Does it say
what sort of policy?

A quick search reveals that the TrendMicro "Unauthorized File
Encryption" message is a frequent false positive for many different
software programs, including this thread at the rstudio forum:
https://support.rstudio.com/hc/en-us/community/posts/208171047-rsession-exe-flagged-as-virus

Perhaps it's just because you're one of the first people to install
this version, and your AV might use some "smart" learning system such
that the false positive will automatically disappear after a few more
people have installed and whitelisted the new R binaries.


From j@me@@f@he@ter @ending from gm@il@com  Thu Dec 20 17:11:16 2018
From: j@me@@f@he@ter @ending from gm@il@com (Jim Hester)
Date: Thu, 20 Dec 2018 11:11:16 -0500
Subject: [Rd] Using `--configure.args` with configure.win on Windows
Message-ID: <CAD6tx96HyN3bne-NqumUJr-J+XBK3jH+Yoio0+=wpcXe=J1C8w@mail.gmail.com>

Looking at the code for `R CMD INSTALL` [1] it looks like
`--configure-args` is not used on Windows, so there is not a way to pass
arguments to the `configure.win` script like there is for `configure`.

Is this lack intentional or simply an oversight because support for
configure.win was added later?

[1]:
https://github.com/wch/r-source/blob/8bc3a6f4b0c2fca3195cac427e9ad8b4448eaa73/src/library/tools/R/install.R#L670-L697

	[[alternative HTML version deleted]]


From wdunl@p @ending from tibco@com  Fri Dec 21 00:09:56 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Thu, 20 Dec 2018 15:09:56 -0800
Subject: [Rd] formula(model.frame(..)) is misleading
Message-ID: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>

When formula() is applied to the output of model.frame() it ignores the
formula in the model.frame's 'terms' attribute:

  > d <- data.frame(A=log(1:6), B=LETTERS[rep(1:2,c(2,4))], C=1/(1:6),
D=rep(letters[25:26],c(4,2)), Y=1:6)
  > m0 <- model.frame(data=d, Y ~ A:B)
  > formula(m0)
  Y ~ A + B
  > `attributes<-`(terms(m0), value=NULL)
  Y ~ A:B

This is in part because model.frame()'s output has class "data.frame"
instread of c("model.frame","data.frame"), as SV4 did, so there are no
methods for model.frames.

Is there a reason that model.frame() returns a data.frame with extra
attributes but no special class or is it just an oversight?

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Dec 21 08:51:06 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 21 Dec 2018 08:51:06 +0100
Subject: [Rd] formula(model.frame(..)) is misleading
In-Reply-To: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>
References: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>
Message-ID: <23580.39786.529658.257284@stat.math.ethz.ch>

>>>>> William Dunlap via R-devel 
>>>>>     on Thu, 20 Dec 2018 15:09:56 -0800 writes:

    > When formula() is applied to the output of model.frame()
    > it ignores the formula in the model.frame's 'terms'
    > attribute:

    >> d <- data.frame(A=log(1:6), B=LETTERS[rep(1:2,c(2,4))],
    >> C=1/(1:6),
    > D=rep(letters[25:26],c(4,2)), Y=1:6)
    >> m0 <- model.frame(data=d, Y ~ A:B) formula(m0)
    >   Y ~ A + B
    >> `attributes<-`(terms(m0), value=NULL)
    >   Y ~ A:B

    > This is in part because model.frame()'s output has class
    > "data.frame" instread of c("model.frame","data.frame"), as
    > SV4 did, so there are no methods for model.frames.

    > Is there a reason that model.frame() returns a data.frame
    > with extra attributes but no special class or is it just
    > an oversight?

May guess is "oversight" || "well let's keep it simple"
Do you (all readers) see situation where it could harm now (with
the 20'000 packages on CRAN+BIoc+...) to do as SV4 (S version 4) has been doing?

I'd be sympathetic to class()ing it.
Martin

    > Bill Dunlap TIBCO Software wdunlap tibco.com


From jfox @ending from mcm@@ter@c@  Fri Dec 21 17:16:40 2018
From: jfox @ending from mcm@@ter@c@ (Fox, John)
Date: Fri, 21 Dec 2018 16:16:40 +0000
Subject: [Rd] formula(model.frame(..)) is misleading
In-Reply-To: <27876_1545378678_wBL7pHYd012851_23580.39786.529658.257284@stat.math.ethz.ch>
References: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>
 <27876_1545378678_wBL7pHYd012851_23580.39786.529658.257284@stat.math.ethz.ch>
Message-ID: <3A66F355-79A3-4E1F-BADF-9773BBCEA02E@mcmaster.ca>

Dear Martin,

Since no one else has picked up on this, I?ll take a crack at it: 

The proposal is to define the S3 class of model-frame objects as c(?model.frame?, ?data.frame?) (not the formal class of these objects, even though this feature was coincidentally introduced in S4). That?s unlikely to do harm, since model frames would still ?inherit? data.frame methods. 

It's possible that some packages rely on current data.frame methods that are eventually superseded by specific model.frame methods or do something peculiar with the class of model frames, so as far as I can see, one can?t know whether problems will arise before trying it.

I hope that helps,
 John

  -------------------------------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Dec 21, 2018, at 2:51 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> William Dunlap via R-devel 
>>>>>>    on Thu, 20 Dec 2018 15:09:56 -0800 writes:
> 
>> When formula() is applied to the output of model.frame()
>> it ignores the formula in the model.frame's 'terms'
>> attribute:
> 
>>> d <- data.frame(A=log(1:6), B=LETTERS[rep(1:2,c(2,4))],
>>> C=1/(1:6),
>> D=rep(letters[25:26],c(4,2)), Y=1:6)
>>> m0 <- model.frame(data=d, Y ~ A:B) formula(m0)
>>  Y ~ A + B
>>> `attributes<-`(terms(m0), value=NULL)
>>  Y ~ A:B
> 
>> This is in part because model.frame()'s output has class
>> "data.frame" instread of c("model.frame","data.frame"), as
>> SV4 did, so there are no methods for model.frames.
> 
>> Is there a reason that model.frame() returns a data.frame
>> with extra attributes but no special class or is it just
>> an oversight?
> 
> May guess is "oversight" || "well let's keep it simple"
> Do you (all readers) see situation where it could harm now (with
> the 20'000 packages on CRAN+BIoc+...) to do as SV4 (S version 4) has been doing?
> 
> I'd be sympathetic to class()ing it.
> Martin
> 
>> Bill Dunlap TIBCO Software wdunlap tibco.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdunl@p @ending from tibco@com  Fri Dec 21 22:34:16 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Fri, 21 Dec 2018 13:34:16 -0800
Subject: [Rd] formula(model.frame(..)) is misleading
In-Reply-To: <3A66F355-79A3-4E1F-BADF-9773BBCEA02E@mcmaster.ca>
References: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>
 <27876_1545378678_wBL7pHYd012851_23580.39786.529658.257284@stat.math.ethz.ch>
 <3A66F355-79A3-4E1F-BADF-9773BBCEA02E@mcmaster.ca>
Message-ID: <CAF8bMcZJ6VGFzTDQfstkw8EvfBo76fWrB2mPW7Z_=bhgx04H1Q@mail.gmail.com>

I don't have a copy of SV4 (or SV3, where model.frame was introduced), but
S+ 8.3 (based on SV4) puts the class "model.frame" on model.frame()'s
return value but has no methods (in the default packages) for class
"model.frame".  Perhaps that is why R omitted the class.

However, S+ 8.3's (and problably S's) formula.data.frame did look for a
"terms" attribute of a data.frame before making up an additive formula
based on the column names of a data.frame:

Splus-8.3> formula.data.frame
function(object)
{
        if(length(tms <- attr(object, "terms")))
                return(formula(tms))
        n <- names(object)
        f <- paste(n[-1.], collapse = "+")
        f <- parse(text = paste(n[1.], f, sep = "~"))[[1.]]
        oldClass(f) <- "formula"
        f
}



Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Fri, Dec 21, 2018 at 8:16 AM Fox, John <jfox at mcmaster.ca> wrote:

> Dear Martin,
>
> Since no one else has picked up on this, I?ll take a crack at it:
>
> The proposal is to define the S3 class of model-frame objects as
> c(?model.frame?, ?data.frame?) (not the formal class of these objects, even
> though this feature was coincidentally introduced in S4). That?s unlikely
> to do harm, since model frames would still ?inherit? data.frame methods.
>
> It's possible that some packages rely on current data.frame methods that
> are eventually superseded by specific model.frame methods or do something
> peculiar with the class of model frames, so as far as I can see, one can?t
> know whether problems will arise before trying it.
>
> I hope that helps,
>  John
>
>   -------------------------------------------------
>   John Fox, Professor Emeritus
>   McMaster University
>   Hamilton, Ontario, Canada
>   Web: http::/socserv.mcmaster.ca/jfox
>
> > On Dec 21, 2018, at 2:51 AM, Martin Maechler <maechler at stat.math.ethz.ch>
> wrote:
> >
> >>>>>> William Dunlap via R-devel
> >>>>>>    on Thu, 20 Dec 2018 15:09:56 -0800 writes:
> >
> >> When formula() is applied to the output of model.frame()
> >> it ignores the formula in the model.frame's 'terms'
> >> attribute:
> >
> >>> d <- data.frame(A=log(1:6), B=LETTERS[rep(1:2,c(2,4))],
> >>> C=1/(1:6),
> >> D=rep(letters[25:26],c(4,2)), Y=1:6)
> >>> m0 <- model.frame(data=d, Y ~ A:B) formula(m0)
> >>  Y ~ A + B
> >>> `attributes<-`(terms(m0), value=NULL)
> >>  Y ~ A:B
> >
> >> This is in part because model.frame()'s output has class
> >> "data.frame" instread of c("model.frame","data.frame"), as
> >> SV4 did, so there are no methods for model.frames.
> >
> >> Is there a reason that model.frame() returns a data.frame
> >> with extra attributes but no special class or is it just
> >> an oversight?
> >
> > May guess is "oversight" || "well let's keep it simple"
> > Do you (all readers) see situation where it could harm now (with
> > the 20'000 packages on CRAN+BIoc+...) to do as SV4 (S version 4) has
> been doing?
> >
> > I'd be sympathetic to class()ing it.
> > Martin
> >
> >> Bill Dunlap TIBCO Software wdunlap tibco.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Sun Dec 23 16:46:54 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sun, 23 Dec 2018 16:46:54 +0100
Subject: [Rd] formula(model.frame(..)) is misleading
In-Reply-To: <3A66F355-79A3-4E1F-BADF-9773BBCEA02E@mcmaster.ca>
References: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>
 <27876_1545378678_wBL7pHYd012851_23580.39786.529658.257284@stat.math.ethz.ch>
 <3A66F355-79A3-4E1F-BADF-9773BBCEA02E@mcmaster.ca>
Message-ID: <23583.44526.687250.675390@stat.math.ethz.ch>

>>>>> Fox, John 
>>>>>     on Fri, 21 Dec 2018 16:16:40 +0000 writes:

    > Dear Martin,

    > Since no one else has picked up on this, I?ll take a crack
    > at it:

Thank you, John

    > The proposal is to define the S3 class of model-frame
    > objects as c(?model.frame?, ?data.frame?) (not the formal
    > class of these objects, even though this feature was
    > coincidentally introduced in S4). That?s unlikely to do
    > harm, since model frames would still ?inherit? data.frame methods.

Well, sure, "in theory".
My fear is different -- and I think for good reasons :

IIRC, I've seen slides of a talk by a well respected R
community member where they advertized  -- IIRC, even as example
of good R programming --  to use

  switch(class(obj)[1],
         "foo" = { ....  some things .... },
	 "bar" = { ....  other things .... },
	 .....
	 stop("invalid class ", class(obj)[1])

        )

and I have seen many package authors use analogously "broken" R
code

  if(class(obj) == "foo") { # deal with "foo" ...
    ....
  } else if(class(obj) == "bar") {
    ...
  } else .....

all of which will fail if users of that code (including other
package writers) decide to extend that S3 class  using a
length(class(.)) >= 2  ....

Now, with Bill Dunlap's findings about S-plus 8.3, namely that
it does not contain a *single*  model.frame method,
I'd rather tend to only  fix formula.data.frame()

Martin



    > It's possible that some packages rely on current
    > data.frame methods that are eventually superseded by
    > specific model.frame methods or do something peculiar with
    > the class of model frames, so as far as I can see, one
    > can?t know whether problems will arise before trying it.

    > I hope that helps, John

    >   -------------------------------------------------
    >   John Fox, Professor Emeritus McMaster University
    > Hamilton, Ontario, Canada Web:
    > http::/socserv.mcmaster.ca/jfox

    >> On Dec 21, 2018, at 2:51 AM, Martin Maechler
    >> <maechler at stat.math.ethz.ch> wrote:
    >> 
    >>>>>>> William Dunlap via R-devel on Thu, 20 Dec 2018
    >>>>>>> 15:09:56 -0800 writes:
    >> 
    >>> When formula() is applied to the output of model.frame()
    >>> it ignores the formula in the model.frame's 'terms'
    >>> attribute:
    >> 
    >>>> d <- data.frame(A=log(1:6), B=LETTERS[rep(1:2,c(2,4))],
    >>>> C=1/(1:6),
    >>> D=rep(letters[25:26],c(4,2)), Y=1:6)
    >>>> m0 <- model.frame(data=d, Y ~ A:B) formula(m0)
    >>> Y ~ A + B
    >>>> `attributes<-`(terms(m0), value=NULL)
    >>> Y ~ A:B
    >> 
    >>> This is in part because model.frame()'s output has class
    >>> "data.frame" instread of c("model.frame","data.frame"),
    >>> as SV4 did, so there are no methods for model.frames.
    >> 
    >>> Is there a reason that model.frame() returns a
    >>> data.frame with extra attributes but no special class or
    >>> is it just an oversight?
    >> 
    >> May guess is "oversight" || "well let's keep it simple"
    >> Do you (all readers) see situation where it could harm
    >> now (with the 20'000 packages on CRAN+BIoc+...) to do as
    >> SV4 (S version 4) has been doing?
    >> 
    >> I'd be sympathetic to class()ing it.  Martin
    >> 
    >>> Bill Dunlap TIBCO Software wdunlap tibco.com
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@echler @ending from @t@t@m@th@ethz@ch  Sun Dec 23 16:52:25 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sun, 23 Dec 2018 16:52:25 +0100
Subject: [Rd] formula(model.frame(..)) is misleading
In-Reply-To: <CAF8bMcZJ6VGFzTDQfstkw8EvfBo76fWrB2mPW7Z_=bhgx04H1Q@mail.gmail.com>
References: <CAF8bMcaSrPfpdJMOeDg0ptJBLJrZvOJiEy7Bdkf3-oZZwNYnuw@mail.gmail.com>
 <27876_1545378678_wBL7pHYd012851_23580.39786.529658.257284@stat.math.ethz.ch>
 <3A66F355-79A3-4E1F-BADF-9773BBCEA02E@mcmaster.ca>
 <CAF8bMcZJ6VGFzTDQfstkw8EvfBo76fWrB2mPW7Z_=bhgx04H1Q@mail.gmail.com>
Message-ID: <23583.44857.565786.577671@stat.math.ethz.ch>

>>>>> William Dunlap via R-devel 
>>>>>     on Fri, 21 Dec 2018 13:34:16 -0800 writes:

    > I don't have a copy of SV4 (or SV3, where model.frame was
    > introduced), but S+ 8.3 (based on SV4) puts the class
    > "model.frame" on model.frame()'s return value but has no
    > methods (in the default packages) for class "model.frame".
    > Perhaps that is why R omitted the class.

aahh.. that's very relevant,  thank you very much, Bill, for digging!

    > However, S+ 8.3's (and problably S's) formula.data.frame
    > did look for a "terms" attribute of a data.frame before
    > making up an additive formula based on the column names of
    > a data.frame:

    > Splus-8.3> formula.data.frame
    > function(object)
    > {
    >         if(length(tms <- attr(object, "terms")))
    >                 return(formula(tms))
    >         n <- names(object)
    >         f <- paste(n[-1.], collapse = "+")
    >         f <- parse(text = paste(n[1.], f, sep = "~"))[[1.]]
    >         oldClass(f) <- "formula"
    >         f
    > }

There's quite a bit of code looking for  attr(*, "terms")
anyway in our code base, so indeed, this would be internally
consistent with the existing code base and hence probably the
best way to solve the original problem. 

I'll look into committing this to R-devel soonish.

Martin


    > Bill Dunlap
    > TIBCO Software
    > wdunlap tibco.com


From m@echler @ending from @t@t@m@th@ethz@ch  Sun Dec 23 18:44:35 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sun, 23 Dec 2018 18:44:35 +0100
Subject: [Rd] 
 patch to support custom HTTP headers in download.file() and url()
In-Reply-To: <CABtg=KkB-e75kms1vL7XvjdcShwarBP1VLPnT2nb0SEFAJkarg@mail.gmail.com>
References: <CABtg=KkB-e75kms1vL7XvjdcShwarBP1VLPnT2nb0SEFAJkarg@mail.gmail.com>
Message-ID: <23583.51587.721174.12820@stat.math.ethz.ch>

>>>>> G?bor Cs?rdi 
>>>>>     on Tue, 4 Dec 2018 21:23:20 +0000 writes:

    > The patch below adds support for custom HTTP headers in
    > download.file() and url().

    > My main motivation for this is performing basic http
    > authentication.  Some web sites do not support embedding
    > the credentials into the URI itself, they only work if the
    > username and password are sent in the HTTP headers. In
    > fact specifying the username and password in the URI has
    > been
    > deprecated.(https://en.wikipedia.org/wiki/Basic_access_authentication#URL_encoding)

    > Unfortunately this means that download.file() and url()
    > cannot access these password protected URLs. This patch fixes that.

Dear G?bor,
thank you very much for your valuable contribution!
R core members have been busy but now have reviewed your code
and liked it, and I have committed it to R-devel aka "the trunk"
(svn rev 75890).

So this should become part of the R x.y.0 release around April 2019.

Thanking you once more ...
merry Christmas and happy holidays !

Martin

    > I am happy to update the patch as needed.

    > Details:

   > * This patch adds supports for custom HTTP headers in download.file() and url().
   > * They both get a headers = NULL argument.
   > * This is implemented for the internal, wininet and libcurl methods.
   > * For other methods headers is silently ignored.
   > * For non-HTTP URLs headers is silently ignored.
   > * The headers argument must be a named character vector without NAs, or NULL.
   > * If headers is not named or it contains NAs, or the names contain
   > NAs, an error is thrown.
   > * For download.file() the method is chosen in R, and we a character
   > vector to C for libcurl and a collapsed string constant for internal
   > and wininet.
   > * For url() the method is only chosen in C, so we pass both a string
   > vector and the collapsed string vector to C. This is simpler than
   > collapsing in C.
   > * It is not possible to specify headers for file(), even though it handles URLs.
   > * The user agent (coming from the HTTPUserAgent options), will the the
   > first header, for the methods that need it together with the other
   > headers.
   > * We don't check for duplicate headers, just pass to the methods as
   > the user specified them.
   > * We test all methods.
   > * We have run the tests on macOS, Debian Linux and Windows 2016 Server.
   > 
   > You can also browse the changes here:
   > https://github.com/gaborcsardi/r-source/pull/3/files
   > You can also download the diff below from
   > https://github.com/gaborcsardi/r-source/pull/3.diff
   > 
   > Best,
   > Gabor

[....................]


From qweytr1 m@ili@g off m@il@ustc@edu@c@  Fri Dec 21 19:34:54 2018
From: qweytr1 m@ili@g off m@il@ustc@edu@c@ (qweytr1 m@ili@g off m@il@ustc@edu@c@)
Date: Sat, 22 Dec 2018 02:34:54 +0800 (GMT+08:00)
Subject: [Rd] Bug report: R.home() cause package Rcpp failed executing
 sourceCpp,
 similar bug are labeled "BUG 16660" since 2016 and here I could provide a
 solution that tested in my laptop.
Message-ID: <aeff153.d5285.167d20c814b.Coremail.qweytr1@mail.ustc.edu.cn>

https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16660
Here is the bug, which R.home may generate a path contains a whitespace.


this will cause Rcpp failed executing sourceCpp


> sourceCpp("b:/2018-12-14/src/18020/MCMC.cpp")
Error in system(cmd, intern = !showOutput) : 'D:/Program' not found
Error in system(cmd, ignore.stderr = TRUE, intern = TRUE) :
  'D:/Program' not found



Code is tested in both R 3.5.1 and Microsoft R Open 3.5.1.


I find a temp solution, is to copy such words into Rprofile:


unlockBinding("R.home", baseenv())
utils::assignInNamespace("R.home",function (component = "home")
{
    rh <- .Internal(R.home())
    paste0('"',switch(component, home = rh, bin = if (.Platform$OS.type ==
        "windows" && nzchar(p <- .Platform$r_arch)) file.path(rh,
        component, p) else file.path(rh, component), share = if (nzchar(p <- Sys.getenv("R_SHARE_DIR"))) p else file.path(rh,
        component), doc = if (nzchar(p <- Sys.getenv("R_DOC_DIR"))) p else file.path(rh,
        component), include = if (nzchar(p <- Sys.getenv("R_INCLUDE_DIR"))) p else file.path(rh,
        component), modules = if (nzchar(p <- .Platform$r_arch)) file.path(rh,
        component, p) else file.path(rh, component), file.path(rh,
        component)),'"')
}, ns="base", envir=baseenv())
lockBinding("R.home", baseenv())


Actually, calling "D:/Program Files/R/R Open/bin/x64"/R is same to calling "D:/Program Files/R/R Open/bin/x64/R"


it shows that we could use quote to quote the whitespaces.


(although the code seems a little bit ugly)



               _                          
platform       x86_64-w64-mingw32         
arch           x86_64                     
os             mingw32                    
system         x86_64, mingw32            
status                                    
major          3                          
minor          5.1                        
year           2018                       
month          07                         
day            02                         
svn rev        74947                      
language       R                          
version.string R version 3.5.1 (2018-07-02)
nickname       Feather Spray      







	[[alternative HTML version deleted]]


From edd @ending from debi@n@org  Mon Dec 24 00:19:09 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Sun, 23 Dec 2018 17:19:09 -0600
Subject: [Rd] Bug report: R.home() cause package Rcpp failed executing
 sourceCpp,
 similar bug are labeled "BUG 16660" since 2016 and here I could provide a
 solution that tested in my laptop.
In-Reply-To: <aeff153.d5285.167d20c814b.Coremail.qweytr1@mail.ustc.edu.cn>
References: <aeff153.d5285.167d20c814b.Coremail.qweytr1@mail.ustc.edu.cn>
Message-ID: <23584.6125.532886.218010@rob.eddelbuettel.com>


The short answer, supported (if memory serves) by the R Windows FAQ, is to
_not_ install in a path with spaces in the first place.

Pondering why R on Windows, after all these years, still uses a path with
spaces as the default choice is left as exercise to the reader.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @vr@h@m@@dler @ending from gm@il@com  Wed Dec 26 20:23:41 2018
From: @vr@h@m@@dler @ending from gm@il@com (Avraham Adler)
Date: Wed, 26 Dec 2018 14:23:41 -0500
Subject: [Rd] Issue when building R-parched_2018-12-26
Message-ID: <CAL6gwnLMqgubkuL0ChFE4v9Z=B7V6vT-XbQhteRe9uxSC3Y7UA@mail.gmail.com>

Hello.

Building R-patched from source on Win64 using current Rtools 3.5.0.4, I?m
getting the following notes indicating an extra left brace somewhere; or is
the problem on my end?

My installed Perl is Strawberry 5.28.0.1-64 bit.

Thank you,

Avi

(Sent from an iPhone, so my apologies if HTML also comes through)

------ Making HTML documentation ------

creating doc/manual/version.texi

creating doc/manual/R-FAQ.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

creating doc/manual/R-admin.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

creating doc/manual/R-data.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

creating doc/manual/R-exts.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

creating doc/manual/R-intro.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

creating doc/manual/R-ints.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

creating doc/manual/R-lang.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

making rw-FAQ

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

Negative repeat count does nothing at
C:/Rtools/texinfo5/Texinfo/Convert/Plaintext.pm line 1065.

making rw-FAQ.html

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*/ at C:/Rtools/texinfo5/Texinfo/Parser.pm line 5441.

Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.32), passed through in regex; marked by <-- HERE in
m/^\s+@([[:alnum:]][[:alnum:]\-]*)({
<-- HERE })?\s*(\@(c|comment)((\@|\s+).*)?)?/ at
C:/Rtools/texinfo5/Texinfo/Parser.pm line 5446.
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From jeroenoom@ @ending from gm@il@com  Fri Dec 28 21:41:18 2018
From: jeroenoom@ @ending from gm@il@com (Jeroen Ooms)
Date: Fri, 28 Dec 2018 21:41:18 +0100
Subject: [Rd] Issue when building R-parched_2018-12-26
In-Reply-To: <CAL6gwnLMqgubkuL0ChFE4v9Z=B7V6vT-XbQhteRe9uxSC3Y7UA@mail.gmail.com>
References: <CAL6gwnLMqgubkuL0ChFE4v9Z=B7V6vT-XbQhteRe9uxSC3Y7UA@mail.gmail.com>
Message-ID: <CABFfbXs5BoXf1Z4fHoAwRQin=Cv-59BGENZWz0vZGx71-Tgq5g@mail.gmail.com>

On Wed, Dec 26, 2018 at 8:24 PM Avraham Adler <avraham.adler at gmail.com>
wrote:

> Hello.
>
> Building R-patched from source on Win64 using current Rtools 3.5.0.4, I?m
> getting the following notes indicating an extra left brace somewhere; or is
> the problem on my end?
>

This is a warning (not an error) in the texinfo script that has started to
appear with the latest version of perl. It is safe to ignore the warning,
but it has been fixed in rtools40:
https://github.com/r-windows/rtools-base/commit/d1631cc9646121f580742a29b2ee3c3b8a569685

I haven't back-ported this to rtools35 because I'm still hopeful that we
will upgrade to rtools40, soonish...

	[[alternative HTML version deleted]]


From evgeni@ch@@nov@ki @ending from gm@il@com  Sun Dec 30 12:49:45 2018
From: evgeni@ch@@nov@ki @ending from gm@il@com (Evgeni Chasnovski)
Date: Sun, 30 Dec 2018 13:49:45 +0200
Subject: [Rd] Bug report with patch: `stats:::regularize.values()` always
 creates full copies of `x` and `y`
Message-ID: <CAP9Eqm0KkX7ohVmW9avDb+e2D_5=5aFCuYONBefQ5R7h2gMddA@mail.gmail.com>

This is intended to be a bug report with proposed patch. I am posting to
this mailing list as described in NOTE in "Bug Reporting in R".

Function `stats:::regularize.values()` is meant to preprocess `x` and `y`
arguments to have "proper" values for later use during interpolation. If
input is already "proper", I would expect it to reuse the same objects
without creating new ones. However, this isn't the case and is the source
of unneccessary extra memory usage in `approx()` and others.

The root cause of this seems to be a forceful reordering in lines 37-39 of
'approx.R' file. If reordering is done only if `x` is unsorted then no
copies are created. Also this doesn't seem like breaking any existing code.

There is a patch attached.

Reproducable code:
x <- seq(1, 100, 1)
y <- seq(1, 100, 1)

reg_xy <- stats:::regularize.values(x, y, mean)

# Regularized versions of `x` and `y` are identical to input but are stored
at
# different places
identical(x, reg_xy[["x"]])
#> [1] TRUE
.Internal(inspect(x))
#> @15719b0 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(reg_xy[["x"]]))
#> @2b84130 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

identical(y, reg_xy[["y"]])
#> [1] TRUE
.Internal(inspect(y))
#> @2c91be0 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(reg_xy[["y"]]))
#> @2bb4880 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

# Differs from original only by using `if (is.unsorted(x))`
new_regularize.values <- function (x, y, ties) {
  x <- xy.coords(x, y, setLab = FALSE)
  y <- x$y
  x <- x$x
  if (any(na <- is.na(x) | is.na(y))) {
    ok <- !na
    x <- x[ok]
    y <- y[ok]
  }
  nx <- length(x)
  if (!identical(ties, "ordered")) {
    if (is.unsorted(x)) {
      o <- order(x)
      x <- x[o]
      y <- y[o]
    }
    if (length(ux <- unique(x)) < nx) {
      if (missing(ties))
        warning("collapsing to unique 'x' values")
      y <- as.vector(tapply(y, match(x, x), ties))
      x <- ux
      stopifnot(length(y) == length(x))
    }
  }
  list(x = x, y = y)
}

new_reg_xy <- new_regularize.values(x, y, mean)

# Output is still identical to input and also references to the same objects
identical(x, new_reg_xy[["x"]])
#> [1] TRUE
.Internal(inspect(x))
#> @15719b0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(new_reg_xy[["x"]]))
#> @15719b0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

identical(y, new_reg_xy[["y"]])
#> [1] TRUE
.Internal(inspect(y))
#> @2c91be0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(new_reg_xy[["y"]]))
#> @2c91be0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

# Current R version
R.version
#>                _
#> platform       x86_64-pc-linux-gnu
#> arch           x86_64
#> os             linux-gnu
#> system         x86_64, linux-gnu
#> status
#> major          3
#> minor          5.2
#> year           2018
#> month          12
#> day            20
#> svn rev        75870
#> language       R
#> version.string R version 3.5.2 (2018-12-20)
#> nickname       Eggshell Igloo


-- 
Best regards,
Evgeni Chasnovski

-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch.diff
Type: text/x-patch
Size: 522 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181230/63e44ead/attachment.bin>

