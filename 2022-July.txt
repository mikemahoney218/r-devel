From pik@pp@@devei m@iii@g oii gm@ii@com  Sun Jul  3 13:02:50 2022
From: pik@pp@@devei m@iii@g oii gm@ii@com (pik@pp@@devei m@iii@g oii gm@ii@com)
Date: Sun, 3 Jul 2022 13:02:50 +0200
Subject: [Rd] Class union of custom classes
Message-ID: <003001d88ecc$6fa3fbc0$4eebf340$@gmail.com>

Dear all,

 

This code, mostly copied from the setClassUnion help page, works as
described in the documentation:

 

# test 1

setClassUnion("maybeNumber", c("numeric", "logical"))

setClass("withId", contains = "maybeNumber", slots = c(id = "character"))

w1 <- new("withId", 1.2, id = "test 1")

 

However, the following three tests do not work:

 

# test 2

setClass("foo", slots = list(xb = "logical"))

setClassUnion("maybeNumber", c("numeric", "foo"))

setClass("withId", contains = "maybeNumber", slots = c(id = "character"))

w1 <- new("withId", 1.2, id = "test 2")

 

# test 3

setClass("foo", slots = list(xb = "logical"))

setClassUnion("maybeNumber", c("numeric"))

setIs("foo", "maybeNumber")

setClass("withId", contains = "maybeNumber", slots = c(id = "character"))

w1 <- new("withId", 1.2, id = "test 3")

 

# test 4

setClass("foo", contains = "logical")

setClassUnion("maybeNumber", c("numeric", "foo"))

setClass("withId", contains = "maybeNumber", slots = c(id = "character"))

w1 <- new("withId", 1.2, id = "test 4")

 

All three return:

 

  Error in initialize(value, ...) : 

      'initialize' method returned an object of class "numeric" instead of
the required class "withId"

 

The error comes from:

 

traceback()

3: stop(gettextf("'initialize' method returned an object of class %s instead
of the required class %s", 

       paste(dQuote(class(value)), collapse = ", "),
dQuote(class(.Object))), 

       domain = NA)

2: initialize(value, ...)

1: new("withId", 1.2, id = "test 2")

 

I would expect tests 2-4 to work similarly to the first test. Is the above
error the intended behavior of setClassUnion? I do not see anything that
would prevent this in the documentation. Is there something I am missing
here?

 

Any help would be very much appreciated!

 

Kind regards,

Pantelis


	[[alternative HTML version deleted]]


From ezr@ @end|ng |rom |@ndtucker@com  Sun Jul  3 19:56:34 2022
From: ezr@ @end|ng |rom |@ndtucker@com (Ezra Tucker)
Date: Sun, 03 Jul 2022 13:56:34 -0400
Subject: [Rd] Class union of custom classes
In-Reply-To: <003001d88ecc$6fa3fbc0$4eebf340$@gmail.com>
References: <003001d88ecc$6fa3fbc0$4eebf340$@gmail.com>
Message-ID: <31d8cd9d3407a4e52f434b600e9a11b48fca8281.camel@landtucker.com>

Hi Pantelis,

What usually helps me in these kinds of puzzles is splitting out
(mentally) the s4 part from the s3 part. The first test you mention,
using the class "withId" has an s3 part of a "maybeNumber" (numeric or
logical) and an s4 part of a slot "id". Kind of hidden will be a second
slot, ".Data" which contains the s3 data --The w1 value you get is
essentially a numeric, and will be subject to numeric methods (ie you
could do w1 + 2) and it'll add 2 to all of the values in the .Data
slot.

Test 2:
part of the reason setClassUnion works in Test 1 is because the member
classes of withID have the same slots-- both of them are .Data.
However, the definition of "foo" in this test has one slot, xb, which
is logical, and no .Data slot/no s3 part. foo and withId have
incompatable initializers (the "initialize" method for their respective
classes so that's why you're seeing this error.

Test 3:
In general, I'd probably avoid using setIs, as it sets an explicit
relationship between two classes, whether or not it's logical to do so.
While the initializer for "maybeNumber" ought to complete, because of
the issues raised above about Test 2, it'll prevent the object from
being created.

Test 4:
This one's tricky. A revealing question is, what happens when you try

> w1 <- new("withId", TRUE, id = "test 4")

Error in initialize(value, ...) : 
  cannot use object of class "logical" in new():  class "withId" does
not extend that class

wheras if you did

> setClass("withId", slots = c(data = "maybeNumber", id = "character"))
> w1 <- new("withId", data = new("foo", TRUE), id = "test 4")

it should work properly (or you could do data = 1.2 - it won't
recognize a value TRUE as being of class foo since it's logical. Your
withId has to have .Data of class numeric or foo, which themselves have
incompatible initializers.

Hopefully this helps!

-Ezra

On Sun, 2022-07-03 at 13:02 +0200, pikappa.devel at gmail.com wrote:
> Dear all,
> 
> ?
> 
> This code, mostly copied from the setClassUnion help page, works as
> described in the documentation:
> 
> ?
> 
> # test 1
> 
> setClassUnion("maybeNumber", c("numeric", "logical"))
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 1")
> 
> ?
> 
> However, the following three tests do not work:
> 
> ?
> 
> # test 2
> 
> setClass("foo", slots = list(xb = "logical"))
> 
> setClassUnion("maybeNumber", c("numeric", "foo"))
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 2")
> 
> ?
> 
> # test 3
> 
> setClass("foo", slots = list(xb = "logical"))
> 
> setClassUnion("maybeNumber", c("numeric"))
> 
> setIs("foo", "maybeNumber")
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 3")
> 
> ?
> 
> # test 4
> 
> setClass("foo", contains = "logical")
> 
> setClassUnion("maybeNumber", c("numeric", "foo"))
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 4")
> 
> ?
> 
> All three return:
> 
> ?
> 
> ? Error in initialize(value, ...) : 
> 
> ????? 'initialize' method returned an object of class "numeric"
> instead of
> the required class "withId"
> 
> ?
> 
> The error comes from:
> 
> ?
> 
> traceback()
> 
> 3: stop(gettextf("'initialize' method returned an object of class %s
> instead
> of the required class %s", 
> 
> ?????? paste(dQuote(class(value)), collapse = ", "),
> dQuote(class(.Object))), 
> 
> ?????? domain = NA)
> 
> 2: initialize(value, ...)
> 
> 1: new("withId", 1.2, id = "test 2")
> 
> ?
> 
> I would expect tests 2-4 to work similarly to the first test. Is the
> above
> error the intended behavior of setClassUnion? I do not see anything
> that
> would prevent this in the documentation. Is there something I am
> missing
> here?
> 
> ?
> 
> Any help would be very much appreciated!
> 
> ?
> 
> Kind regards,
> 
> Pantelis
> 
> 
> ????????[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org?mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pik@pp@@devei m@iii@g oii gm@ii@com  Tue Jul  5 11:31:31 2022
From: pik@pp@@devei m@iii@g oii gm@ii@com (pik@pp@@devei m@iii@g oii gm@ii@com)
Date: Tue, 5 Jul 2022 11:31:31 +0200
Subject: [Rd] Class union of custom classes
In-Reply-To: <31d8cd9d3407a4e52f434b600e9a11b48fca8281.camel@landtucker.com>
References: <003001d88ecc$6fa3fbc0$4eebf340$@gmail.com>
 <31d8cd9d3407a4e52f434b600e9a11b48fca8281.camel@landtucker.com>
Message-ID: <001601d89052$032cb810$09862830$@gmail.com>

Hi Ezra,

thanks, this was very helpful! Your answer got me thinking, and I have tried a couple of more approaches. I thought it would be good to document them here in case someone stumbles on this issue in the future.


I have tried to define classes with combatible initializers:

> # test 5
+ setClass("foo", contains = "logical")
+ setClass("bar", contains = "logical")
+ setClassUnion("foobar", c("foo", "bar"))
+ setClass("withId", contains = "foobar", slots = c(id = "character"))
+ w1 <- new("withId", new("foo", TRUE), id = "test 5")
> Error in initialize(value, ...) : 
  'initialize' method returned an object of class ?foo? instead of the required class ?withId?

> # test 6
+ setClass("foo", slots = list(x = "logical"))
+ setClass("bar", slots = list(x = "logical"))
+ setClassUnion("foobar", c("foo", "bar"))
+ setClass("withId", contains = "foobar", slots = c(id = "character"))
+ w1 <- new("withId", new("foo", x = TRUE), id = "test 6")
> > Error in initialize(value, ...) : 
  'initialize' method returned an object of class ?foo? instead of the required class ?withId?

I have also tried to "trick" setClassUnion by naming members of foo and bar .Data:

> # test 7
+ setClass("foo", slots = list(.Data = "logical"))
+ setClass("bar", slots = list(.Data = "logical"))
+ setClassUnion("foobar", c("foo", "bar"))
+ setClass("withId", contains = "foobar", slots = c(id = "character"))
+ w1 <- new("withId", new("foo", .Data = TRUE), id = "test 7")
Error in initialize(value, ...) : 
  'initialize' method returned an object of class ?foo? instead of the required class ?withId?

The approach you proposed is the only one that works, but with a catch. The withId class will not have access to foo methods, and wrappers are additionally needed to imitate inheritance. If foo has only a few methods, this approach is maintainable. For now, this is the approach I will follow in the real problem I am dealing with. 

Kind Regards,
Pantelis

-----Original Message-----
From: Ezra Tucker <ezra at landtucker.com> 
Sent: Sunday, July 3, 2022 7:57 PM
To: pikappa.devel at gmail.com; r-devel at r-project.org
Subject: Re: [Rd] Class union of custom classes

Hi Pantelis,

What usually helps me in these kinds of puzzles is splitting out
(mentally) the s4 part from the s3 part. The first test you mention, using the class "withId" has an s3 part of a "maybeNumber" (numeric or
logical) and an s4 part of a slot "id". Kind of hidden will be a second slot, ".Data" which contains the s3 data --The w1 value you get is essentially a numeric, and will be subject to numeric methods (ie you could do w1 + 2) and it'll add 2 to all of the values in the .Data slot.

Test 2:
part of the reason setClassUnion works in Test 1 is because the member classes of withID have the same slots-- both of them are .Data.
However, the definition of "foo" in this test has one slot, xb, which is logical, and no .Data slot/no s3 part. foo and withId have incompatable initializers (the "initialize" method for their respective classes so that's why you're seeing this error.

Test 3:
In general, I'd probably avoid using setIs, as it sets an explicit relationship between two classes, whether or not it's logical to do so.
While the initializer for "maybeNumber" ought to complete, because of the issues raised above about Test 2, it'll prevent the object from being created.

Test 4:
This one's tricky. A revealing question is, what happens when you try

> w1 <- new("withId", TRUE, id = "test 4")

Error in initialize(value, ...) : 
  cannot use object of class "logical" in new():  class "withId" does not extend that class

wheras if you did

> setClass("withId", slots = c(data = "maybeNumber", id = "character"))
> w1 <- new("withId", data = new("foo", TRUE), id = "test 4")

it should work properly (or you could do data = 1.2 - it won't recognize a value TRUE as being of class foo since it's logical. Your withId has to have .Data of class numeric or foo, which themselves have incompatible initializers.

Hopefully this helps!

-Ezra

On Sun, 2022-07-03 at 13:02 +0200, pikappa.devel at gmail.com wrote:
> Dear all,
> 
>  
> 
> This code, mostly copied from the setClassUnion help page, works as 
> described in the documentation:
> 
>  
> 
> # test 1
> 
> setClassUnion("maybeNumber", c("numeric", "logical"))
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 1")
> 
>  
> 
> However, the following three tests do not work:
> 
>  
> 
> # test 2
> 
> setClass("foo", slots = list(xb = "logical"))
> 
> setClassUnion("maybeNumber", c("numeric", "foo"))
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 2")
> 
>  
> 
> # test 3
> 
> setClass("foo", slots = list(xb = "logical"))
> 
> setClassUnion("maybeNumber", c("numeric"))
> 
> setIs("foo", "maybeNumber")
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 3")
> 
>  
> 
> # test 4
> 
> setClass("foo", contains = "logical")
> 
> setClassUnion("maybeNumber", c("numeric", "foo"))
> 
> setClass("withId", contains = "maybeNumber", slots = c(id =
> "character"))
> 
> w1 <- new("withId", 1.2, id = "test 4")
> 
>  
> 
> All three return:
> 
>  
> 
>   Error in initialize(value, ...) : 
> 
>       'initialize' method returned an object of class "numeric"
> instead of
> the required class "withId"
> 
>  
> 
> The error comes from:
> 
>  
> 
> traceback()
> 
> 3: stop(gettextf("'initialize' method returned an object of class %s 
> instead of the required class %s",
> 
>        paste(dQuote(class(value)), collapse = ", "), 
> dQuote(class(.Object))),
> 
>        domain = NA)
> 
> 2: initialize(value, ...)
> 
> 1: new("withId", 1.2, id = "test 2")
> 
>  
> 
> I would expect tests 2-4 to work similarly to the first test. Is the 
> above error the intended behavior of setClassUnion? I do not see 
> anything that would prevent this in the documentation. Is there 
> something I am missing here?
> 
>  
> 
> Any help would be very much appreciated!
> 
>  
> 
> Kind regards,
> 
> Pantelis
> 
> 
>         [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Jul  7 13:59:57 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 7 Jul 2022 12:59:57 +0100
Subject: [Rd] 
 as.Date (and strptime?) does not recognize "&nbsp; " as a blank
In-Reply-To: <3f6da3f4-5eb2-93f6-5c75-c1f35b40edb8@prodsyse.com>
References: <ffca1662-3ad3-95b0-b5f9-374dffcd0943@prodsyse.com>
 <010201819a8e8fd5-5b4a4be1-e8ab-4b0a-9896-c6d03385dbef-000000@eu-west-1.amazonses.com>
 <3f6da3f4-5eb2-93f6-5c75-c1f35b40edb8@prodsyse.com>
Message-ID: <9712dcf4-8fd5-cab7-58f6-2ea9fe1e3811@stats.ox.ac.uk>

There is some misunderstanding here.  The space is part of the format 
specified by SG to as.Date(), which passes it to strptime(). So SG asked 
to match a space and complained that a different character is not matched!

Reading the documentation of strptime shows

      ?%n? Newline on output, arbitrary whitespace on input.
      ?%t? Tab on output, arbitrary whitespace on input.

so one might hope that one could use those to specify whitespace instead 
of ASCII space in the format.  But unfortunately whether a Unicode 
no-break space (U+00A0) is whitespace is a matter of opinion -- for 
example the PCRE author changed his a few years back.

We don't have a reproducible example, but my attempt at reproduction 
suggests that U+00A0 is not regarded as whitespace on the system I used. 
  We know this to be platform-specific (it uses the C function 
iswspace): glibc does not regard this as whitespace and the replacement 
functions used by R on macOS and Windows have followed suit.

In short, ASCII space matches only itself, and the interpretation of 
'blank' (in regexps) or 'whitespace' (in strptime or regexps) is 
platform-specific and liable to change.


On 25/06/2022 14:13, Spencer Graves wrote:
> Hi, Maxim et al.:
> 
> 
> On 6/25/22 6:10 AM, Maxim Nazarov wrote:
>> Hello,
>>
>>> When is a space not a space?
>> I guess the answer is when it is a non-breaking one?..
>>
>> We can observe:
>> ? > charToRaw(textutils::HTMLdecode("&nbsp;"))
>> ? [1] c2 a0
>> ? > charToRaw(" ")
>> ? [1] 20
>> So one can argue that everything works correctly - `textutils` 
>> function converts HTML's non-breaking space '&nbsp;' into R's 
>> non-breaking space '\xa0', while %e format of as.Date expects a 
>> 'normal' space.
>> But this is obviously not user-friendly especially since both symbols 
>> are displayed the same way on the console.
>> So your options might be to either:
>> ? * manually change all 'weird' spaces into normal ones with something 
>> like gsub("\\h", " ", ..., perl = TRUE) - for the list of other weird 
>> spaces see 
>> https://www.pcre.org/original/doc/html/pcrepattern.html#genericchartypes
>> ? * persuade textutils author to change &nbsp; into a normal space 
>> (they seem to be working with a simple lookup table - 
>> https://github.com/enricoschumann/textutils/blob/b813c7bd4b55daef5fa7612e3fbfe82962711940/R/char_refs.R#L1465-L1466) 
>>
>> ? * persuade R-Core (or submit a PR) to relax expectations of 
>> as.Date/strptime
>>
> 
>  ????? Thanks for the reply.? Since "this is obviously not 
> user-friendly", as you noted, I felt a need to bring it to the attention 
> of this group, and let them decide what if anything they would want to 
> do about it.
> 
> 
>  ????? In any event, I found a fix for my immediate problem.? It's not 
> as elegant as yours, but it works.
> 
>  ????? Best Wishes,
>  ????? Spencer
> 
> 
> 
> 
>> Kind regards,
>> Maxim Nazarov
>>
>> ----- On Jun 25, 2022, at 8:37 AM, Spencer Graves 
>> spencer.graves at prodsyse.com wrote:
>>
>>> Hello, All:
>>>
>>>
>>> ????? When is a space not a space?
>>>
>>>
>>> ????? Consider the following:
>>>
>>>
>>>> (pblmDate <- textutils::HTMLdecode("&nbsp;2 Mar 2018"))
>>> [1] " 2 Mar 2018"
>>>> as.Date(pblmDate, format='%e %b %Y')
>>> [1] NA
>>>> as.Date(' 2 Mar 2018', format='%e %b %Y')
>>> [1] "2018-03-02"
>>>
>>>
>>> ????? Is this a feature or a bug?
>>>
>>>
>>> ????? I can work around it, now that I know what it is, but it took me a
>>> few hours to diagnose.
>>>
>>>
>>> ????? Thanks,
>>> ????? Spencer Graves
>>>
>>>
>>> p.s.? I got this from scraping a website with code that had worked for
>>> me roughly 20 months ago.? I suspect that in the interim, someone
>>> probably replaced ' 2 Mar 2018' with "&nbsp;2 Mar 2018".
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Thu Jul  7 14:25:08 2022
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Thu, 7 Jul 2022 07:25:08 -0500
Subject: [Rd] 
 as.Date (and strptime?) does not recognize "&nbsp; " as a blank
In-Reply-To: <9712dcf4-8fd5-cab7-58f6-2ea9fe1e3811@stats.ox.ac.uk>
References: <ffca1662-3ad3-95b0-b5f9-374dffcd0943@prodsyse.com>
 <010201819a8e8fd5-5b4a4be1-e8ab-4b0a-9896-c6d03385dbef-000000@eu-west-1.amazonses.com>
 <3f6da3f4-5eb2-93f6-5c75-c1f35b40edb8@prodsyse.com>
 <9712dcf4-8fd5-cab7-58f6-2ea9fe1e3811@stats.ox.ac.uk>
Message-ID: <32329f15-c09f-b241-fec3-698053ac2234@prodsyse.com>

Thanks, Prof. Ripley, for your further analysis of this issue.  sg


On 7/7/22 6:59 AM, Prof Brian Ripley wrote:
> There is some misunderstanding here.? The space is part of the format 
> specified by SG to as.Date(), which passes it to strptime(). So SG asked 
> to match a space and complained that a different character is not matched!
> 
> Reading the documentation of strptime shows
> 
>  ???? ?%n? Newline on output, arbitrary whitespace on input.
>  ???? ?%t? Tab on output, arbitrary whitespace on input.
> 
> so one might hope that one could use those to specify whitespace instead 
> of ASCII space in the format.? But unfortunately whether a Unicode 
> no-break space (U+00A0) is whitespace is a matter of opinion -- for 
> example the PCRE author changed his a few years back.
> 
> We don't have a reproducible example, but my attempt at reproduction 
> suggests that U+00A0 is not regarded as whitespace on the system I used. 
>  ?We know this to be platform-specific (it uses the C function 
> iswspace): glibc does not regard this as whitespace and the replacement 
> functions used by R on macOS and Windows have followed suit.
> 
> In short, ASCII space matches only itself, and the interpretation of 
> 'blank' (in regexps) or 'whitespace' (in strptime or regexps) is 
> platform-specific and liable to change.
> 
> 
> On 25/06/2022 14:13, Spencer Graves wrote:
>> Hi, Maxim et al.:
>>
>>
>> On 6/25/22 6:10 AM, Maxim Nazarov wrote:
>>> Hello,
>>>
>>>> When is a space not a space?
>>> I guess the answer is when it is a non-breaking one?..
>>>
>>> We can observe:
>>> ? > charToRaw(textutils::HTMLdecode("&nbsp;"))
>>> ? [1] c2 a0
>>> ? > charToRaw(" ")
>>> ? [1] 20
>>> So one can argue that everything works correctly - `textutils` 
>>> function converts HTML's non-breaking space '&nbsp;' into R's 
>>> non-breaking space '\xa0', while %e format of as.Date expects a 
>>> 'normal' space.
>>> But this is obviously not user-friendly especially since both symbols 
>>> are displayed the same way on the console.
>>> So your options might be to either:
>>> ? * manually change all 'weird' spaces into normal ones with 
>>> something like gsub("\\h", " ", ..., perl = TRUE) - for the list of 
>>> other weird spaces see 
>>> https://www.pcre.org/original/doc/html/pcrepattern.html#genericchartypes
>>> ? * persuade textutils author to change &nbsp; into a normal space 
>>> (they seem to be working with a simple lookup table - 
>>> https://github.com/enricoschumann/textutils/blob/b813c7bd4b55daef5fa7612e3fbfe82962711940/R/char_refs.R#L1465-L1466) 
>>>
>>> ? * persuade R-Core (or submit a PR) to relax expectations of 
>>> as.Date/strptime
>>>
>>
>> ?????? Thanks for the reply.? Since "this is obviously not 
>> user-friendly", as you noted, I felt a need to bring it to the 
>> attention of this group, and let them decide what if anything they 
>> would want to do about it.
>>
>>
>> ?????? In any event, I found a fix for my immediate problem.? It's not 
>> as elegant as yours, but it works.
>>
>> ?????? Best Wishes,
>> ?????? Spencer
>>
>>
>>
>>
>>> Kind regards,
>>> Maxim Nazarov
>>>
>>> ----- On Jun 25, 2022, at 8:37 AM, Spencer Graves 
>>> spencer.graves at prodsyse.com wrote:
>>>
>>>> Hello, All:
>>>>
>>>>
>>>> ????? When is a space not a space?
>>>>
>>>>
>>>> ????? Consider the following:
>>>>
>>>>
>>>>> (pblmDate <- textutils::HTMLdecode("&nbsp;2 Mar 2018"))
>>>> [1] " 2 Mar 2018"
>>>>> as.Date(pblmDate, format='%e %b %Y')
>>>> [1] NA
>>>>> as.Date(' 2 Mar 2018', format='%e %b %Y')
>>>> [1] "2018-03-02"
>>>>
>>>>
>>>> ????? Is this a feature or a bug?
>>>>
>>>>
>>>> ????? I can work around it, now that I know what it is, but it took 
>>>> me a
>>>> few hours to diagnose.
>>>>
>>>>
>>>> ????? Thanks,
>>>> ????? Spencer Graves
>>>>
>>>>
>>>> p.s.? I got this from scraping a website with code that had worked for
>>>> me roughly 20 months ago.? I suspect that in the interim, someone
>>>> probably replaced ' 2 Mar 2018' with "&nbsp;2 Mar 2018".
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>


From g@bembecker @end|ng |rom gm@||@com  Thu Jul  7 19:42:34 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 7 Jul 2022 10:42:34 -0700
Subject: [Rd] 
 as.Date (and strptime?) does not recognize "&nbsp; " as a blank
In-Reply-To: <b7458796-4406-7da9-c893-db33f819b0a9@prodsyse.com>
References: <ffca1662-3ad3-95b0-b5f9-374dffcd0943@prodsyse.com>
 <b7458796-4406-7da9-c893-db33f819b0a9@prodsyse.com>
Message-ID: <CAD4oTHFEjdms=scxCRsbOXtPLoWBOwCvm=KiF6Q_9hW62nyk5g@mail.gmail.com>

Depends  a bit on what you mean by "automatically". This seems to work for
me (note this has NOT been extensively tested on different OSes or even in
different locales/encodings):

library(XML)
myhtml <- "<html><body><table
id='hiya'><tr><th>colname</th></tr><tr><td>&nbsp;</td></tr><tr><td>
</td></tr></table></body></html>"
doc <- htmlParse(myhtml, asText = TRUE)
oldway <- readHTMLTable(doc, trim = FALSE)

identical(oldway$hiya$colname[1], oldway$hiya$colname[2]) # FALSE :(

decode_nbsp <- function(x) gsub(rawToChar(as.raw(c(0xc2, 0xa0))), " ", x,
fixed = TRUE, useBytes = TRUE)
fancypants <- function(node) decode_nbsp(xmlValue(node))
newandfancy <- readHTMLTable(doc, trim = FALSE, elFun = fancypants)

identical(newandfancy$hiya$colname[1], newandfancy$hiya$colname[2]) # TRUE
:D

Best,
~G

On Fri, Jun 24, 2022 at 11:48 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

> p.s.  Is there a way to get XML::readHTMLTable to automatically convert
> "&nbsp;" to a normal blank space?
>
>
> On 6/25/22 1:37 AM, Spencer Graves wrote:
> > Hello, All:
> >
> >
> >        When is a space not a space?
> >
> >
> >        Consider the following:
> >
> >
> >  > (pblmDate <- textutils::HTMLdecode("&nbsp;2 Mar 2018"))
> > [1] " 2 Mar 2018"
> >  > as.Date(pblmDate, format='%e %b %Y')
> > [1] NA
> >  > as.Date(' 2 Mar 2018', format='%e %b %Y')
> > [1] "2018-03-02"
> >
> >
> >        Is this a feature or a bug?
> >
> >
> >        I can work around it, now that I know what it is, but it took me
> > a few hours to diagnose.
> >
> >
> >        Thanks,
> >        Spencer Graves
> >
> >
> > p.s.  I got this from scraping a website with code that had worked for
> > me roughly 20 months ago.  I suspect that in the interim, someone
> > probably replaced ' 2 Mar 2018' with "&nbsp;2 Mar 2018".
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ch|r|com @end|ng |rom goog|e@com  Fri Jul  8 07:17:12 2022
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Thu, 7 Jul 2022 22:17:12 -0700
Subject: [Rd] stats::poly() stopped working for Date input -- intentional?
Message-ID: <CAD7Bkx85RaBLdhGiUUTgiyRKkBDv=gH=zLVB_+8bGZV=fP3C3g@mail.gmail.com>

SVN#80126 added rep.difftime, which means rep(as.difftime(0,
units="secs")) retains the "datetime" class.

A consequence of this is that stats::poly() no longer accepts
Date/POSIXct input (because poly calls outer() on the de-meaned input,
which rep()):

# works on R 3.6.3 (and probably everything < 4.1.0)
#   but on R 4.1.3 (and probably everything >= 4.1.0):
stats::poly(Sys.Date() - 0:4, 3)
# Error in Ops.difftime(X, Y, ...) : '^' not defined for "difftime" objects

Is this intentional?

If not, a simple patch is to call 'x <- as.double(x)' before de-meaning.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Jul  8 16:34:43 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 8 Jul 2022 16:34:43 +0200
Subject: [Rd] 
 stats::poly() stopped working for Date input -- intentional?
In-Reply-To: <CAD7Bkx85RaBLdhGiUUTgiyRKkBDv=gH=zLVB_+8bGZV=fP3C3g@mail.gmail.com>
References: <CAD7Bkx85RaBLdhGiUUTgiyRKkBDv=gH=zLVB_+8bGZV=fP3C3g@mail.gmail.com>
Message-ID: <25288.16515.793861.777833@stat.math.ethz.ch>

>>>>> Michael Chirico via R-devel 
>>>>>     on Thu, 7 Jul 2022 22:17:12 -0700 writes:

    > SVN#80126 added rep.difftime, which means rep(as.difftime(0,
    > units="secs")) retains the "datetime" class.

(yes, by me, March 2021), this was fixing PR#18066
 ==> https://bugs.r-project.org/show_bug.cgi?id=18066 )

Thank you, Michael, for the report!

    > A consequence of this is that stats::poly() no longer accepts
    > Date/POSIXct input (because poly calls outer() on the de-meaned input,
    > which rep()):

    > # works on R 3.6.3 (and probably everything < 4.1.0)
    > #   but on R 4.1.3 (and probably everything >= 4.1.0):
    > stats::poly(Sys.Date() - 0:4, 3)
    > # Error in Ops.difftime(X, Y, ...) : '^' not defined for "difftime" objects

    > Is this intentional?

Well, actually I think it was not intentional that  poly()
worked at all with Date/POSIXct input, ..
OTOH you *did* encounter it.

Note that 

  > poly(as.Date("2020-2-2") - 0:3, 2,  raw = TRUE)
  Error in Ops.Date(X, Y, ...) : ^ not defined for "Date" objects
  > 

happens (I think) in all versions of R, i.e., even before the
rep() extension.

    > If not, a simple patch is to call 'x <- as.double(x)' before de-meaning.

well, yes, in that branch of the source code.
... and a similar call for the  raw = TRUE  case.

At first, this seems to make sense to me,
but actually it will break when someone uses

   poly(<complex>, ..)
   
[ Also: what about the "prediction" case  (coef = <specified>) ? 
  could you use prediction of an lm() for your real use case ? ]

---

Maybe it makes most sense if you open an R bugzilla entry for
this (including part of our current dialogue).

Thank you again,
Martin


From @nto|ne@|@br| @end|ng |rom gm@||@com  Sun Jul 10 16:00:02 2022
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sun, 10 Jul 2022 16:00:02 +0200
Subject: [Rd] Floating point issue
Message-ID: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>

Dear r-devel,

For some numbers, the printed value is not equivalent to the input :

options(scipen = 999)
## GOOD
1e24
#> [1]  999999999999999983222784
1e24 == 999999999999999983222784
#> [1] TRUE

## BAD
1e25
#> [1] 10000000000000000905969664
1e25 == 10000000000000000905969664
#> [1] FALSE

## STILL BAD
10000000000000000905969664
#> [1] 10000000000000003053453312

## GOOD AGAIN
10000000000000003053453312
#> [1] 10000000000000003053453312

# Additionally
10000000000000000000000000 == 1e25
#> [1] FALSE

Are these bugs ?

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sun Jul 10 16:09:45 2022
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 10 Jul 2022 09:09:45 -0500
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
Message-ID: <25290.56745.942106.634125@rob.eddelbuettel.com>


On 10 July 2022 at 16:00, Antoine Fabri wrote:
| Dear r-devel,
| 
| For some numbers, the printed value is not equivalent to the input :
| 
| options(scipen = 999)
| ## GOOD
| 1e24
| #> [1]  999999999999999983222784
| 1e24 == 999999999999999983222784
| #> [1] TRUE
| 
| ## BAD
| 1e25
| #> [1] 10000000000000000905969664
| 1e25 == 10000000000000000905969664
| #> [1] FALSE
| 
| ## STILL BAD
| 10000000000000000905969664
| #> [1] 10000000000000003053453312
| 
| ## GOOD AGAIN
| 10000000000000003053453312
| #> [1] 10000000000000003053453312
| 
| # Additionally
| 10000000000000000000000000 == 1e25
| #> [1] FALSE
| 
| Are these bugs ?

No, that is how computers work (with floating point numbers).

Please R FAQ 7.31 "Why doesn?t R think these numbers are equal?" at
  https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
and the references therein for more.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Sun Jul 10 16:28:27 2022
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Sun, 10 Jul 2022 14:28:27 +0000
Subject: [Rd] Floating point issue
In-Reply-To: <25290.56745.942106.634125@rob.eddelbuettel.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>,
 <25290.56745.942106.634125@rob.eddelbuettel.com>
Message-ID: <cb4678b2d846400194e23034c6cf7674@chu-rouen.fr>

> No, that is how computers work (with floating point numbers).


The fact that not all values are representable by floating point does not mean that outputing a number with maximum accuracy, then reading it back, should yield a different number.


I would like to point that I cannot reproduce this "bug" on the official R 4.2.0 Windows x86_64 build on an AMD Ryzen 1700 on Windows 10.


> 1e25
[1] 10000000000000000906640224
> 1e25 == 10000000000000000906640224
[1] TRUE
>

I could also test:
> as.double(as.character(1e25)) == 1e25
[1] TRUE

For ECMAScript, there is a rule that guarantee that converting a floating point value to a string, and converting back to a floating point value, yields to an equal number.
https://262.ecma-international.org/5.1/#sec-9.8.1

"If x is any Number value other than ?0, then ToNumber<https://262.ecma-international.org/5.1/#sec-9.3>(ToString<https://262.ecma-international.org/5.1/#sec-9.8>(x)) is exactly the same Number value as x."


This avoids some data loss when repeatedly writing/reading floating point values to a text file.


Of course, R is a different language, and I do not think that it has such rule. However, this does not mean that this rule is useless or impossible to implement.


--

Sincerely

Andr? GILLIBERT

________________________________
De : R-devel <r-devel-bounces at r-project.org> de la part de Dirk Eddelbuettel <edd at debian.org>
Envoy? : dimanche 10 juillet 2022 16:09:45
? : Antoine Fabri
Cc : R-devel
Objet : Re: [Rd] Floating point issue

ATTENTION: Cet e-mail provient d?une adresse mail ext?rieure au CHU de Rouen. Ne cliquez pas sur les liens ou n'ouvrez pas les pi?ces jointes ? moins de conna?tre l'exp?diteur et de savoir que le contenu est s?r. En cas de doute, transf?rer le mail ? ? DSI, S?curit? ? pour analyse. Merci de votre vigilance


On 10 July 2022 at 16:00, Antoine Fabri wrote:
| Dear r-devel,
|
| For some numbers, the printed value is not equivalent to the input :
|
| options(scipen = 999)
| ## GOOD
| 1e24
| #> [1]  999999999999999983222784
| 1e24 == 999999999999999983222784
| #> [1] TRUE
|
| ## BAD
| 1e25
| #> [1] 10000000000000000905969664
| 1e25 == 10000000000000000905969664
| #> [1] FALSE
|
| ## STILL BAD
| 10000000000000000905969664
| #> [1] 10000000000000003053453312
|
| ## GOOD AGAIN
| 10000000000000003053453312
| #> [1] 10000000000000003053453312
|
| # Additionally
| 10000000000000000000000000 == 1e25
| #> [1] FALSE
|
| Are these bugs ?

No, that is how computers work (with floating point numbers).

Please R FAQ 7.31 "Why doesn?t R think these numbers are equal?" at
  https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
and the references therein for more.

Dirk

--
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Sun Jul 10 16:44:11 2022
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sun, 10 Jul 2022 16:44:11 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <cb4678b2d846400194e23034c6cf7674@chu-rouen.fr>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <25290.56745.942106.634125@rob.eddelbuettel.com>
 <cb4678b2d846400194e23034c6cf7674@chu-rouen.fr>
Message-ID: <CALEXWq3F86UV71qzWaUHrZkZb9k8dC2H_OR_cYqzvEf6pFz9hA@mail.gmail.com>

On Sun, 10 Jul 2022 at 16:28, GILLIBERT, Andre
<Andre.Gillibert at chu-rouen.fr> wrote:
>
> > No, that is how computers work (with floating point numbers).
>
>
> The fact that not all values are representable by floating point does not mean that outputing a number with maximum accuracy, then reading it back, should yield a different number.
>
>
> I would like to point that I cannot reproduce this "bug" on the official R 4.2.0 Windows x86_64 build on an AMD Ryzen 1700 on Windows 10.

I cannot reproduce this on a 64-bit Linux build of R 4.1.3 either:

options(scipen = 999)
1e24
#> [1]  999999999999999983222784
1e24 == 999999999999999983222784
#> [1] TRUE

1e25
#> [1] 10000000000000000905969664
1e25 == 10000000000000000905969664
#> [1] TRUE

10000000000000000905969664
#> [1] 10000000000000000905969664

10000000000000003053453312
#> [1] 10000000000000003053453312

10000000000000000000000000 == 1e25
#> [1] TRUE

-- 
I?aki ?car


From @nto|ne@|@br| @end|ng |rom gm@||@com  Sun Jul 10 17:43:03 2022
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sun, 10 Jul 2022 17:43:03 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <CALEXWq3F86UV71qzWaUHrZkZb9k8dC2H_OR_cYqzvEf6pFz9hA@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <25290.56745.942106.634125@rob.eddelbuettel.com>
 <cb4678b2d846400194e23034c6cf7674@chu-rouen.fr>
 <CALEXWq3F86UV71qzWaUHrZkZb9k8dC2H_OR_cYqzvEf6pFz9hA@mail.gmail.com>
Message-ID: <CAEKh8ujbqCpL8Dv8OiB0LtHFsk+80gxU4ivPoqRKbLdfJLKc_A@mail.gmail.com>

He is my session info :

R version 4.1.3 (2022-03-10)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Monterey 12.0.1

Le dim. 10 juil. 2022 ? 16:44, I?aki Ucar <iucar at fedoraproject.org> a
?crit :

> On Sun, 10 Jul 2022 at 16:28, GILLIBERT, Andre
> <Andre.Gillibert at chu-rouen.fr> wrote:
> >
> > > No, that is how computers work (with floating point numbers).
> >
> >
> > The fact that not all values are representable by floating point does
> not mean that outputing a number with maximum accuracy, then reading it
> back, should yield a different number.
> >
> >
> > I would like to point that I cannot reproduce this "bug" on the official
> R 4.2.0 Windows x86_64 build on an AMD Ryzen 1700 on Windows 10.
>
> I cannot reproduce this on a 64-bit Linux build of R 4.1.3 either:
>
> options(scipen = 999)
> 1e24
> #> [1]  999999999999999983222784
> 1e24 == 999999999999999983222784
> #> [1] TRUE
>
> 1e25
> #> [1] 10000000000000000905969664
> 1e25 == 10000000000000000905969664
> #> [1] TRUE
>
> 10000000000000000905969664
> #> [1] 10000000000000000905969664
>
> 10000000000000003053453312
> #> [1] 10000000000000003053453312
>
> 10000000000000000000000000 == 1e25
> #> [1] TRUE
>
> --
> I?aki ?car
>

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sun Jul 10 20:46:26 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 10 Jul 2022 19:46:26 +0100
Subject: [Rd] Floating point issue
In-Reply-To: <CALEXWq3F86UV71qzWaUHrZkZb9k8dC2H_OR_cYqzvEf6pFz9hA@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <25290.56745.942106.634125@rob.eddelbuettel.com>
 <cb4678b2d846400194e23034c6cf7674@chu-rouen.fr>
 <CALEXWq3F86UV71qzWaUHrZkZb9k8dC2H_OR_cYqzvEf6pFz9hA@mail.gmail.com>
Message-ID: <a48ab1cd-43b5-0810-2a29-3b0e892b3d00@sapo.pt>

Hello,

R 4.2.1 on Windows 11, sessionInfo() at end.

I cannot reproduce this either.


op <- options(scipen = 999)

1e24
# [1]  999999999999999983202404
1e24 == 999999999999999983222784
# [1] TRUE

1e25
# [1] 10000000000000000906640224
1e25 == 10000000000000000905969664
# [1] TRUE

10000000000000000905969664
# [1] 10000000000000000906640224

10000000000000003053453312
# [1] 10000000000000003053648442

10000000000000000000000000 == 1e25
# [1] TRUE

options(op)

sessionInfo()
R version 4.2.1 (2022-06-23 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 22000)

Matrix products: default

locale:
[1] LC_COLLATE=Portuguese_Portugal.utf8 
LC_CTYPE=Portuguese_Portugal.utf8
[3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C 

[5] LC_TIME=Portuguese_Portugal.utf8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.1


Hope this helps,

Rui Barradas

?s 15:44 de 10/07/2022, I?aki Ucar escreveu:
> On Sun, 10 Jul 2022 at 16:28, GILLIBERT, Andre
> <Andre.Gillibert at chu-rouen.fr> wrote:
>>
>>> No, that is how computers work (with floating point numbers).
>>
>>
>> The fact that not all values are representable by floating point does not mean that outputing a number with maximum accuracy, then reading it back, should yield a different number.
>>
>>
>> I would like to point that I cannot reproduce this "bug" on the official R 4.2.0 Windows x86_64 build on an AMD Ryzen 1700 on Windows 10.
> 
> I cannot reproduce this on a 64-bit Linux build of R 4.1.3 either:
> 
> options(scipen = 999)
> 1e24
> #> [1]  999999999999999983222784
> 1e24 == 999999999999999983222784
> #> [1] TRUE
> 
> 1e25
> #> [1] 10000000000000000905969664
> 1e25 == 10000000000000000905969664
> #> [1] TRUE
> 
> 10000000000000000905969664
> #> [1] 10000000000000000905969664
> 
> 10000000000000003053453312
> #> [1] 10000000000000003053453312
> 
> 10000000000000000000000000 == 1e25
> #> [1] TRUE
>


From w||||@mwdun|@p @end|ng |rom gm@||@com  Sun Jul 10 22:23:22 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Sun, 10 Jul 2022 13:23:22 -0700
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
Message-ID: <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>

The following function, 'bitC' from ?numToBits, displays the bits in a
double precision number, separated into the sign bit, the 11 exponent bits,
and the 52 bits in the mantissa.  I've shown the results with your numbers
from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?

> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
one double
+     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
+     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
+   }, ""))
> bitC(10^25)
# [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664)
# [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664 - 10^25)
# [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
> bitC(1e25)
# [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001

-Bill

On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
wrote:

> Dear r-devel,
>
> For some numbers, the printed value is not equivalent to the input :
>
> options(scipen = 999)
> ## GOOD
> 1e24
> #> [1]  999999999999999983222784
> 1e24 == 999999999999999983222784
> #> [1] TRUE
>
> ## BAD
> 1e25
> #> [1] 10000000000000000905969664
> 1e25 == 10000000000000000905969664
> #> [1] FALSE
>
> ## STILL BAD
> 10000000000000000905969664
> #> [1] 10000000000000003053453312
>
> ## GOOD AGAIN
> 10000000000000003053453312
> #> [1] 10000000000000003053453312
>
> # Additionally
> 10000000000000000000000000 == 1e25
> #> [1] FALSE
>
> Are these bugs ?
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jul 10 22:34:17 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 10 Jul 2022 16:34:17 -0400
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
Message-ID: <a60d515f-81c4-7dcc-67f3-a962210db427@gmail.com>

Here's a similar question that may give you some ideas for dealing with 
this:

https://stackoverflow.com/q/72899973/2554330

Duncan Murdoch

On 10/07/2022 10:00 a.m., Antoine Fabri wrote:
> Dear r-devel,
> 
> For some numbers, the printed value is not equivalent to the input :
> 
> options(scipen = 999)
> ## GOOD
> 1e24
> #> [1]  999999999999999983222784
> 1e24 == 999999999999999983222784
> #> [1] TRUE
> 
> ## BAD
> 1e25
> #> [1] 10000000000000000905969664
> 1e25 == 10000000000000000905969664
> #> [1] FALSE
> 
> ## STILL BAD
> 10000000000000000905969664
> #> [1] 10000000000000003053453312
> 
> ## GOOD AGAIN
> 10000000000000003053453312
> #> [1] 10000000000000003053453312
> 
> # Additionally
> 10000000000000000000000000 == 1e25
> #> [1] FALSE
> 
> Are these bugs ?
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Sun Jul 10 22:50:45 2022
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 10 Jul 2022 15:50:45 -0500
Subject: [Rd] Floating point issue
In-Reply-To: <a60d515f-81c4-7dcc-67f3-a962210db427@gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <a60d515f-81c4-7dcc-67f3-a962210db427@gmail.com>
Message-ID: <25291.15269.602194.667541@rob.eddelbuettel.com>


On 10 July 2022 at 16:34, Duncan Murdoch wrote:
| Here's a similar question that may give you some ideas for dealing with 
| this:
| 
| https://stackoverflow.com/q/72899973/2554330

Good find, but that's his own question (see the profile) and he choose to
cross-post. Which is generally discouraged. 

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @nto|ne@|@br| @end|ng |rom gm@||@com  Sun Jul 10 23:38:51 2022
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sun, 10 Jul 2022 23:38:51 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
Message-ID: <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>

Thanks, I get the exact same results as yours

``` r
bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
double
  b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
      paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
    }, ""))
bitC(10^25)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
bitC(10000000000000000905969664)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
bitC(10000000000000000905969664 - 10^25)
#> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
bitC(1e25)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
```

<sup>Created on 2022-07-10 by the [reprex package](
https://reprex.tidyverse.org) (v2.0.1)</sup>

Le dim. 10 juil. 2022 ? 22:23, Bill Dunlap <williamwdunlap at gmail.com> a
?crit :

> The following function, 'bitC' from ?numToBits, displays the bits in a
> double precision number, separated into the sign bit, the 11 exponent bits,
> and the 52 bits in the mantissa.  I've shown the results with your numbers
> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>
> > bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
> one double
> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
> +   }, ""))
> > bitC(10^25)
> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> > bitC(10000000000000000905969664)
> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> > bitC(10000000000000000905969664 - 10^25)
> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
> > bitC(1e25)
> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>
> -Bill
>
> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
> wrote:
>
>> Dear r-devel,
>>
>> For some numbers, the printed value is not equivalent to the input :
>>
>> options(scipen = 999)
>> ## GOOD
>> 1e24
>> #> [1]  999999999999999983222784
>> 1e24 == 999999999999999983222784
>> #> [1] TRUE
>>
>> ## BAD
>> 1e25
>> #> [1] 10000000000000000905969664
>> 1e25 == 10000000000000000905969664
>> #> [1] FALSE
>>
>> ## STILL BAD
>> 10000000000000000905969664
>> #> [1] 10000000000000003053453312
>>
>> ## GOOD AGAIN
>> 10000000000000003053453312
>> #> [1] 10000000000000003053453312
>>
>> # Additionally
>> 10000000000000000000000000 == 1e25
>> #> [1] FALSE
>>
>> Are these bugs ?
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Jul 11 00:21:48 2022
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 10 Jul 2022 17:21:48 -0500
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8ujbqCpL8Dv8OiB0LtHFsk+80gxU4ivPoqRKbLdfJLKc_A@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <25290.56745.942106.634125@rob.eddelbuettel.com>
 <cb4678b2d846400194e23034c6cf7674@chu-rouen.fr>
 <CALEXWq3F86UV71qzWaUHrZkZb9k8dC2H_OR_cYqzvEf6pFz9hA@mail.gmail.com>
 <CAEKh8ujbqCpL8Dv8OiB0LtHFsk+80gxU4ivPoqRKbLdfJLKc_A@mail.gmail.com>
Message-ID: <25291.20732.178923.721408@rob.eddelbuettel.com>


On 10 July 2022 at 17:43, Antoine Fabri wrote:
| He is my session info :
| 
| R version 4.1.3 (2022-03-10)
| Platform: aarch64-apple-darwin20 (64-bit)
| Running under: macOS Monterey 12.0.1

Along with the different session infos posted by numerous people who are
unable to replicate your issue (myself included) and a bit more off-line
thinking about I started to suspect you may have an M1 chip. Which this
confirms.

Tomas and Simon had a deep dive into possible floating point concerns in

  https://blog.r-project.org/2020/11/02/will-r-work-on-apple-silicon/index.html

I also seem to recall that it was also said somewhere (though apparently not
in that post) that the M1 does not have long double. Post such as this one

  https://developer.apple.com/forums/thread/673482

seem to suggest that 80 bit accuracy is Intel specific -- so this may in fact
be an issue of sailing too close to the hardware boundary.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Mon Jul 11 03:10:29 2022
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (Brodie Gaslam)
Date: Sun, 10 Jul 2022 21:10:29 -0400
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
Message-ID: <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>

The results are not exactly the same.  Notice that on Bill's system the 
bit pattern of 10^25 and 10000000000000000905969664 are the same, but 
not so on yours.  So there is a mismatch happening on parsing between 
your M1 mac and other's systems.

This is the main thing I wanted to point out.  But since I'm here I'm 
going to add some additional lazily researched speculation.

As Dirk points out, M1 does not have long double, and if you look at 
what I think is responsible for parsing of numbers like the ones we're 
discussing here, we see[1]:

     double R_strtod5(const char *str, char **endptr, char dec,
     		 Rboolean NA, int exact)
     {
         LDOUBLE ans = 0.0;

IIRC long double on systems that implement it as 80 bits (most that have 
x87 coprocessors) has 63-4 bits of precision, vs 53 for 64 bit long 
double.  Roughly speaking, that's 19-20 digits of base 10 precision for 
long double, vs 15-16 for 64 bit double.  Then:

     > substr(rep("10000000000000000905969664", 2),  c(1, 1), c(16, 20))
     [1] "1000000000000000"     "10000000000000000905"

Again, I have not carefully researched this, but it seems likely that 
parsing is producing different a different outcome in this case because 
the intermediate values generated can be kept at higher precision on 
systems with 80 bit long doubles prior to coercing to double for the 
final result.

IIRC, if you need invertible deparsing/parsing I think you can use:

     deparse(1e25, control=c('hexNumeric'))

Although I don't have an 80-bit-less system to test on (and I am too 
lazy to recompile R without long double to test).

Best,

B.

[1]: https://github.com/r-devel/r-svn/blob/master/src/main/util.c#L1993



On 7/10/22 5:38 PM, Antoine Fabri wrote:
> Thanks, I get the exact same results as yours
> 
> ``` r
> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
> double
>    b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>        paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>      }, ""))
> bitC(10^25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
> bitC(10000000000000000905969664 - 10^25)
> #> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
> bitC(1e25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> ```
> 
> <sup>Created on 2022-07-10 by the [reprex package](
> https://reprex.tidyverse.org) (v2.0.1)</sup>
> 
> Le dim. 10 juil. 2022 ? 22:23, Bill Dunlap <williamwdunlap at gmail.com> a
> ?crit :
> 
>> The following function, 'bitC' from ?numToBits, displays the bits in a
>> double precision number, separated into the sign bit, the 11 exponent bits,
>> and the 52 bits in the mantissa.  I've shown the results with your numbers
>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>>
>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>> one double
>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>> +   }, ""))
>>> bitC(10^25)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664 - 10^25)
>> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>>> bitC(1e25)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>
>> -Bill
>>
>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
>> wrote:
>>
>>> Dear r-devel,
>>>
>>> For some numbers, the printed value is not equivalent to the input :
>>>
>>> options(scipen = 999)
>>> ## GOOD
>>> 1e24
>>> #> [1]  999999999999999983222784
>>> 1e24 == 999999999999999983222784
>>> #> [1] TRUE
>>>
>>> ## BAD
>>> 1e25
>>> #> [1] 10000000000000000905969664
>>> 1e25 == 10000000000000000905969664
>>> #> [1] FALSE
>>>
>>> ## STILL BAD
>>> 10000000000000000905969664
>>> #> [1] 10000000000000003053453312
>>>
>>> ## GOOD AGAIN
>>> 10000000000000003053453312
>>> #> [1] 10000000000000003053453312
>>>
>>> # Additionally
>>> 10000000000000000000000000 == 1e25
>>> #> [1] FALSE
>>>
>>> Are these bugs ?
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From w||||@mwdun|@p @end|ng |rom gm@||@com  Mon Jul 11 03:14:24 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Sun, 10 Jul 2022 18:14:24 -0700
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
Message-ID: <CAHqSRuSS0yHxFP44MSj2cp_zNkhyz5Q=F-D6WCac0GmLOpkYoA@mail.gmail.com>

You said you got the same results as I did.  Not so, the parsing of the
long numeric differs in the last bit of the mantissa.

(A=Antoine, B=Bill):

bitC(10^25)
#A [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
#B [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001

bitC(10000000000000000905969664)
#A [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
#B [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001

bitC(10000000000000000905969664 - 10^25)
#A [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
#B [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000

On Sun, Jul 10, 2022 at 2:39 PM Antoine Fabri <antoine.fabri at gmail.com>
wrote:

> Thanks, I get the exact same results as yours
>
> ``` r
> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
> double
>   b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>       paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>     }, ""))
> bitC(10^25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
> bitC(10000000000000000905969664 - 10^25)
> #> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
> bitC(1e25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> ```
>
> <sup>Created on 2022-07-10 by the [reprex package](
> https://reprex.tidyverse.org) (v2.0.1)</sup>
>
> Le dim. 10 juil. 2022 ? 22:23, Bill Dunlap <williamwdunlap at gmail.com> a
> ?crit :
>
>> The following function, 'bitC' from ?numToBits, displays the bits in a
>> double precision number, separated into the sign bit, the 11 exponent bits,
>> and the 52 bits in the mantissa.  I've shown the results with your numbers
>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>>
>> > bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>> one double
>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>> +   }, ""))
>> > bitC(10^25)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> > bitC(10000000000000000905969664)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> > bitC(10000000000000000905969664 - 10^25)
>> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>> > bitC(1e25)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>
>> -Bill
>>
>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
>> wrote:
>>
>>> Dear r-devel,
>>>
>>> For some numbers, the printed value is not equivalent to the input :
>>>
>>> options(scipen = 999)
>>> ## GOOD
>>> 1e24
>>> #> [1]  999999999999999983222784
>>> 1e24 == 999999999999999983222784
>>> #> [1] TRUE
>>>
>>> ## BAD
>>> 1e25
>>> #> [1] 10000000000000000905969664
>>> 1e25 == 10000000000000000905969664
>>> #> [1] FALSE
>>>
>>> ## STILL BAD
>>> 10000000000000000905969664
>>> #> [1] 10000000000000003053453312
>>>
>>> ## GOOD AGAIN
>>> 10000000000000003053453312
>>> #> [1] 10000000000000003053453312
>>>
>>> # Additionally
>>> 10000000000000000000000000 == 1e25
>>> #> [1] FALSE
>>>
>>> Are these bugs ?
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From @nto|ne@|@br| @end|ng |rom gm@||@com  Mon Jul 11 09:30:08 2022
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Mon, 11 Jul 2022 09:30:08 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <CAHqSRuSS0yHxFP44MSj2cp_zNkhyz5Q=F-D6WCac0GmLOpkYoA@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
 <CAHqSRuSS0yHxFP44MSj2cp_zNkhyz5Q=F-D6WCac0GmLOpkYoA@mail.gmail.com>
Message-ID: <CAEKh8uhStaAt3V-qu_5N4CpoMpDsTk7tDwaE-rQxw8h_u5qLbw@mail.gmail.com>

Indeed, apologies for the oversight

On Mon, 11 Jul 2022, 03:14 Bill Dunlap, <williamwdunlap at gmail.com> wrote:

> You said you got the same results as I did.  Not so, the parsing of the
> long numeric differs in the last bit of the mantissa.
>
> (A=Antoine, B=Bill):
>
> bitC(10^25)
> #A [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> #B [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>
> bitC(10000000000000000905969664)
> #A [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
> #B [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>
> bitC(10000000000000000905969664 - 10^25)
> #A [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
> #B [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>
> On Sun, Jul 10, 2022 at 2:39 PM Antoine Fabri <antoine.fabri at gmail.com>
> wrote:
>
>> Thanks, I get the exact same results as yours
>>
>> ``` r
>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>> one double
>>   b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>       paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>     }, ""))
>> bitC(10^25)
>> #> [1] 0 10001010010 |
>> 0000100010110010101000101100001010000000001010010001
>> bitC(10000000000000000905969664)
>> #> [1] 0 10001010010 |
>> 0000100010110010101000101100001010000000001010010010
>> bitC(10000000000000000905969664 - 10^25)
>> #> [1] 0 10000011110 |
>> 0000000000000000000000000000000000000000000000000000
>> bitC(1e25)
>> #> [1] 0 10001010010 |
>> 0000100010110010101000101100001010000000001010010001
>> ```
>>
>> <sup>Created on 2022-07-10 by the [reprex package](
>> https://reprex.tidyverse.org) (v2.0.1)</sup>
>>
>> Le dim. 10 juil. 2022 ? 22:23, Bill Dunlap <williamwdunlap at gmail.com> a
>> ?crit :
>>
>>> The following function, 'bitC' from ?numToBits, displays the bits in a
>>> double precision number, separated into the sign bit, the 11 exponent bits,
>>> and the 52 bits in the mantissa.  I've shown the results with your numbers
>>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>>>
>>> > bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>>> one double
>>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>> +   }, ""))
>>> > bitC(10^25)
>>> # [1] 0 10001010010 |
>>> 0000100010110010101000101100001010000000001010010001
>>> > bitC(10000000000000000905969664)
>>> # [1] 0 10001010010 |
>>> 0000100010110010101000101100001010000000001010010001
>>> > bitC(10000000000000000905969664 - 10^25)
>>> # [1] 0 00000000000 |
>>> 0000000000000000000000000000000000000000000000000000
>>> > bitC(1e25)
>>> # [1] 0 10001010010 |
>>> 0000100010110010101000101100001010000000001010010001
>>>
>>> -Bill
>>>
>>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
>>> wrote:
>>>
>>>> Dear r-devel,
>>>>
>>>> For some numbers, the printed value is not equivalent to the input :
>>>>
>>>> options(scipen = 999)
>>>> ## GOOD
>>>> 1e24
>>>> #> [1]  999999999999999983222784
>>>> 1e24 == 999999999999999983222784
>>>> #> [1] TRUE
>>>>
>>>> ## BAD
>>>> 1e25
>>>> #> [1] 10000000000000000905969664
>>>> 1e25 == 10000000000000000905969664
>>>> #> [1] FALSE
>>>>
>>>> ## STILL BAD
>>>> 10000000000000000905969664
>>>> #> [1] 10000000000000003053453312
>>>>
>>>> ## GOOD AGAIN
>>>> 10000000000000003053453312
>>>> #> [1] 10000000000000003053453312
>>>>
>>>> # Additionally
>>>> 10000000000000000000000000 == 1e25
>>>> #> [1] FALSE
>>>>
>>>> Are these bugs ?
>>>>
>>>>         [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jul 11 10:24:58 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 11 Jul 2022 10:24:58 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
 <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>
Message-ID: <25291.56922.730383.931706@stat.math.ethz.ch>

>>>>> Brodie Gaslam via R-devel 
>>>>>     on Sun, 10 Jul 2022 21:10:29 -0400 writes:

    > The results are not exactly the same.  Notice that on Bill's system the 
    > bit pattern of 10^25 and 10000000000000000905969664 are the same, but 
    > not so on yours.  So there is a mismatch happening on parsing between 
    > your M1 mac and other's systems.

    > This is the main thing I wanted to point out.  But since I'm here I'm 
    > going to add some additional lazily researched speculation.

    > As Dirk points out, M1 does not have long double, and if you look at 
    > what I think is responsible for parsing of numbers like the ones we're 
    > discussing here, we see[1]:

    > double R_strtod5(const char *str, char **endptr, char dec,
    >                  Rboolean NA, int exact)
    > {
    >      LDOUBLE ans = 0.0;

    > IIRC long double on systems that implement it as 80 bits (most that have 
    > x87 coprocessors) has 63-4 bits of precision, vs 53 for 64 bit long 
    > double.  Roughly speaking, that's 19-20 digits of base 10 precision for 
    > long double, vs 15-16 for 64 bit double.  Then:

    >> substr(rep("10000000000000000905969664", 2),  c(1, 1), c(16, 20))
    > [1] "1000000000000000"     "10000000000000000905"

    > Again, I have not carefully researched this, but it seems likely that 
    > parsing is producing different a different outcome in this case because 
    > the intermediate values generated can be kept at higher precision on 
    > systems with 80 bit long doubles prior to coercing to double for the 
    > final result.

    > IIRC, if you need invertible deparsing/parsing I think you can use:

    > deparse(1e25, control=c('hexNumeric'))

    > Although I don't have an 80-bit-less system to test on (and I am too 
    > lazy to recompile R without long double to test).

    > Best,
    > B.

    > [1]: https://github.com/r-devel/r-svn/blob/master/src/main/util.c#L1993

An excellent analysis, thank you, Brodie and Bill Dunlap.

10 days ago I also had a colleague at ETH, involved in teaching stats,
wanting to submit a bug report about a model fit in nlme which
gave different results (well, a confidence interval of a
correlation which was not at all significant (and estimated
close to zero) changed from +/-0.45 to +/-0.85 ...
... and when I asked for sessionInfo() etc,
the result was that on the  M1  the result differed from all
other platforms.
I did not go into further analysis, but I know that nlme does
*not* use any LDOUBLE | long double  but still, the M1 was less
accurate than any other platform... and I also could not see this
(the wider conf.ints) when I used a version of R configured with

   configure --disable-long-double  

[If anyone is interested I can provide the repr.ex. R code.]

>From my current experiences, I dare to say that the M1 with all
its speed is just a tad less reliable numerically than the
Intel/AMD floating point implementations..

Martin




    > On 7/10/22 5:38 PM, Antoine Fabri wrote:
    >> Thanks, I get the exact same results as yours
    >> 
    >> ``` r
    >> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
    >> double
    >> b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
    >> paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
    >> }, ""))
    >> bitC(10^25)
    >> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
    >> bitC(10000000000000000905969664)
    >> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
    >> bitC(10000000000000000905969664 - 10^25)
    >> #> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
    >> bitC(1e25)
    >> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
    >> ```
    >> 
    >> <sup>Created on 2022-07-10 by the [reprex package](
    >> https://reprex.tidyverse.org) (v2.0.1)</sup>
    >> 
    >> Le dim. 10 juil. 2022 ? 22:23, Bill Dunlap <williamwdunlap at gmail.com> a
    >> ?crit :
    >> 
    >>> The following function, 'bitC' from ?numToBits, displays the bits in a
    >>> double precision number, separated into the sign bit, the 11 exponent bits,
    >>> and the 52 bits in the mantissa.  I've shown the results with your numbers
    >>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
    >>> 
    >>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
    >>> one double
    >>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
    >>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
    >>> +   }, ""))
    >>>> bitC(10^25)
    >>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
    >>>> bitC(10000000000000000905969664)
    >>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
    >>>> bitC(10000000000000000905969664 - 10^25)
    >>> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
    >>>> bitC(1e25)
    >>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
    >>> 
    >>> -Bill
    >>> 
    >>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
    >>> wrote:
    >>> 
    >>>> Dear r-devel,
    >>>> 
    >>>> For some numbers, the printed value is not equivalent to the input :
    >>>> 
    >>>> options(scipen = 999)
    >>>> ## GOOD
    >>>> 1e24
    >>>> #> [1]  999999999999999983222784
    >>>> 1e24 == 999999999999999983222784
    >>>> #> [1] TRUE
    >>>> 
    >>>> ## BAD
    >>>> 1e25
    >>>> #> [1] 10000000000000000905969664
    >>>> 1e25 == 10000000000000000905969664
    >>>> #> [1] FALSE
    >>>> 
    >>>> ## STILL BAD
    >>>> 10000000000000000905969664
    >>>> #> [1] 10000000000000003053453312
    >>>> 
    >>>> ## GOOD AGAIN
    >>>> 10000000000000003053453312
    >>>> #> [1] 10000000000000003053453312
    >>>> 
    >>>> # Additionally
    >>>> 10000000000000000000000000 == 1e25
    >>>> #> [1] FALSE
    >>>> 
    >>>> Are these bugs ?
    >>>> 
    >>>> [[alternative HTML version deleted]]
    >>>> 
    >>>> ______________________________________________
    >>>> R-devel at r-project.org mailing list
    >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>>> 
    >>> 
    >> 
    >> [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Mon Jul 11 13:48:51 2022
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Mon, 11 Jul 2022 11:48:51 +0000
Subject: [Rd] Floating point issue
In-Reply-To: <25291.56922.730383.931706@stat.math.ethz.ch>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
 <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>,
 <25291.56922.730383.931706@stat.math.ethz.ch>
Message-ID: <d771640ceb564817af3c7bdfdf0deff2@chu-rouen.fr>


> From my current experiences, I dare to say that the M1 with all
> its speed is just a tad less reliable numerically than the
> Intel/AMD floating point implementations..


80 bits floating point (FP) numbers are great, but I think we cannot rely on it for the future.
I expect, the marketshare of ARM CPUs to grow. It's hard to predict, but ARM may spread in desktop computers in a timeframe of 10 years, and I would not expect it to gain extended precision FP.
Moreover, performance of FP80 is not a priority of Intel. FP80 in recent Intel microprocessors are very slow when using special representations (NaN, NA, Inf, -Inf) or denormal numbers.

Therefore, it may be wise to update R algorithms to make them work quite well with 64 bits FP.

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Mon Jul 11 18:30:57 2022
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Mon, 11 Jul 2022 18:30:57 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <d771640ceb564817af3c7bdfdf0deff2@chu-rouen.fr>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
 <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>
 <25291.56922.730383.931706@stat.math.ethz.ch>
 <d771640ceb564817af3c7bdfdf0deff2@chu-rouen.fr>
Message-ID: <A0D607EB-1C74-40D7-A0A1-C7277E017964@uzh.ch>

To be pedantic, the C standard does not guarantee that long double offers more precision than double. If R?s internal FP/decimal conversion routines produce a different result on platforms that support Intel's 80-bit precision vs. platforms that don?t, I would classify this as a bug in R. Available precision can affect numerical properties of algorithms but should not affect things like decimal to binary or via versa conversion ? it either produces the accurate enough number or it doesn?t. 

As a side note, I agree with Andre that relying on Intel?s extended precision in this day an age is not a good idea. This is a legacy feature from over forty years ago, x86 CPUs have been using SSE instructions for floating point computation for over a decade. The x87 instructions are slow and prevent compiler optimisations. Overall, I believe that R would benefit from dropping this legacy cruft. Not that there are too many places where it is used from what I see? 

Best, 

? Taras Zakharko



> On 11 Jul 2022, at 13:48, GILLIBERT, Andre <Andre.Gillibert at chu-rouen.fr> wrote:
> 
> 
>> From my current experiences, I dare to say that the M1 with all
>> its speed is just a tad less reliable numerically than the
>> Intel/AMD floating point implementations..
> 
> 
> 80 bits floating point (FP) numbers are great, but I think we cannot rely on it for the future.
> I expect, the marketshare of ARM CPUs to grow. It's hard to predict, but ARM may spread in desktop computers in a timeframe of 10 years, and I would not expect it to gain extended precision FP.
> Moreover, performance of FP80 is not a priority of Intel. FP80 in recent Intel microprocessors are very slow when using special representations (NaN, NA, Inf, -Inf) or denormal numbers.
> 
> Therefore, it may be wise to update R algorithms to make them work quite well with 64 bits FP.
> 
> --
> Sincerely
> Andr? GILLIBERT
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Jul 12 03:02:01 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 12 Jul 2022 13:02:01 +1200
Subject: [Rd] Floating point issue
In-Reply-To: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
Message-ID: <C16B8B5F-5A2E-40B9-BFAF-95F5B52DB030@R-project.org>

I don?t think there is any guarantee that unrepresentable numbers are parsed into defined patterns, because printing is done by the OS while parsing is done by R. The way R parses decimal numbers[1] is simply by using the obvious res = res * 10 + digit and it can be easily checked that for doubles the representation such obtained from 10000000000000000905969664 is 0x1.08b2a2c280292p+83 (see below if you want to see it yourself) which is not the same as 10^25 which is 0x1.08b2a2c280291p+83. This is true on all platforms, it is not specific to M1. The only difference is if your were to use a different type you can obtain a different result - and that is not well-defined (e.g. long doubles have no guarantees at all as of the precision).  Note that the decimal string above would require 83-bits of precision which is not representable.

(BTW: to make it even more fun, if you were to use double res = 1; repeat(25) res = res * 10; in C, so the naive computation of the original 10^25 you?d get 9999999999999998758486016 and 0x1.08b2a2c28029p+83)

Given that printing is done by the OS and parsing by R, I don?t think R guarantees anything. If you want representable number you?d use the binary representation (sprintf(?%a?) or hex-mode deparse as noted). One could argue that it could make sense to change it one way or another - either having R do it all or having the OS do it all. In the latter case one may obtain more consistent results (e.g. system stdtod() yields the original value even on M1), but it would be OS-specific. In the former R could impose its own guarantees - but currently it does not.

Cheers,
Simon

[1] - https://github.com/r-devel/r-svn/blob/97c0a73f1758d09088c200f924d27b362d55ccdc/src/main/util.c#L2094


#include <stdio.h>
#include <math.h>
#include <stdlib.h>

int main() {
  const char *str = "10000000000000000905969664", *c = str;
  double ans = 0;
  while (*c) {
    ans = 10 * ans + (*(c++) - '0');
    printf("%a\n", ans);
  }
  printf("atof: %a\n", atof(str));
  double pow1025 = pow(10.0, 25);
  printf("--\n10^25:\n%25.f\n%a\n", pow1025, pow1025);
  return 0;
}

0x1p+0
0x1.4p+3
0x1.9p+6
0x1.f4p+9
0x1.388p+13
0x1.86ap+16
0x1.e848p+19
0x1.312dp+23
0x1.7d784p+26
0x1.dcd65p+29
0x1.2a05f2p+33
0x1.74876e8p+36
0x1.d1a94a2p+39
0x1.2309ce54p+43
0x1.6bcc41e9p+46
0x1.c6bf52634p+49
0x1.1c37937e08p+53
0x1.6345785d8a001p+56
0x1.bc16d674ec801p+59
0x1.158e460913d01p+63
0x1.5af1d78b58c41p+66
0x1.b1ae4d6e2ef51p+69
0x1.0f0cf064dd593p+73
0x1.52d02c7e14af8p+76
0x1.a784379d99db6p+79
0x1.08b2a2c280292p+83
atof: 0x1.08b2a2c280291p+83
--
10^25:
10000000000000000905969664
0x1.08b2a2c280291p+83


> On 11/07/2022, at 02:00, Antoine Fabri <antoine.fabri at gmail.com> wrote:
> 
> Dear r-devel,
> 
> For some numbers, the printed value is not equivalent to the input :
> 
> options(scipen = 999)
> ## GOOD
> 1e24
> #> [1]  999999999999999983222784
> 1e24 == 999999999999999983222784
> #> [1] TRUE
> 
> ## BAD
> 1e25
> #> [1] 10000000000000000905969664
> 1e25 == 10000000000000000905969664
> #> [1] FALSE
> 
> ## STILL BAD
> 10000000000000000905969664
> #> [1] 10000000000000003053453312
> 
> ## GOOD AGAIN
> 10000000000000003053453312
> #> [1] 10000000000000003053453312
> 
> # Additionally
> 10000000000000000000000000 == 1e25
> #> [1] FALSE
> 
> Are these bugs ?
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @d|rk@e @end|ng |rom g@m@@com  Tue Jul 12 03:37:15 2022
From: @d|rk@e @end|ng |rom g@m@@com (Steven Dirkse)
Date: Mon, 11 Jul 2022 21:37:15 -0400
Subject: [Rd] Floating point issue
In-Reply-To: <A0D607EB-1C74-40D7-A0A1-C7277E017964@uzh.ch>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
 <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>
 <25291.56922.730383.931706@stat.math.ethz.ch>
 <d771640ceb564817af3c7bdfdf0deff2@chu-rouen.fr>
 <A0D607EB-1C74-40D7-A0A1-C7277E017964@uzh.ch>
Message-ID: <CAHiA-Znwuh_BDyYq8r8foxn-TvqsfCtrkZS5K09C3gsmrNXG=g@mail.gmail.com>

Hi,

Taras makes several good points, especially this one:

On Mon, Jul 11, 2022 at 12:31 PM Taras Zakharko <taras.zakharko at uzh.ch>
wrote:

>  Available precision can affect numerical properties of algorithms but
> should not affect things like decimal to binary or via versa conversion ?
> it either produces the accurate enough number or it doesn?t.


This is a key point: there is no need to rely on platform-specific
properties of floating-point representations or operations to get correct
(*) decimal-to-binary or binary-to-decimal conversions.  These tasks can be
done correctly in a way that uses only the guarantees provided by IEEE
floats or doubles, and some additional work using big integers (something
like GNU MP) in some cases.  There are freely-available libraries to do
the conversions in a platform-independent, correct, efficient way.  An even
easier solution in one direction is strtod(): decades ago it was not 100%
correct but I haven't seen any flaws in recent versions of GLIBC or on
Windows.  Certainly strtod can be relied on to do a better job than
"multiply-by-10 and add the next digit".

(*) What is correct?  The easy direction is decimal to binary, staying in
the range of positive normalized numbers.  There are a finite number of
rational numbers that are exactly representable as IEEE doubles.  The
correct double representation of a decimal number (also a rational) is that
IEEE double that is closest.  In the event of a tie, use the round-to-even
rule.


As a side note, I agree with Andre that relying on Intel?s extended
> precision in this day an age is not a good idea. This is a legacy feature
> from over forty years ago, x86 CPUs have been using SSE instructions for
> floating point computation for over a decade. The x87 instructions are slow
> and prevent compiler optimisations. Overall, I believe that R would benefit
> from dropping this legacy cruft. Not that there are too many places where
> it is used from what I see?
>
> Best,
>
> ? Taras Zakharko
>
>
>
> > On 11 Jul 2022, at 13:48, GILLIBERT, Andre <Andre.Gillibert at chu-rouen.fr>
> wrote:
> >
> >
> >> From my current experiences, I dare to say that the M1 with all
> >> its speed is just a tad less reliable numerically than the
> >> Intel/AMD floating point implementations..
> >
> >
> > 80 bits floating point (FP) numbers are great, but I think we cannot
> rely on it for the future.
> > I expect, the marketshare of ARM CPUs to grow. It's hard to predict, but
> ARM may spread in desktop computers in a timeframe of 10 years, and I would
> not expect it to gain extended precision FP.
> > Moreover, performance of FP80 is not a priority of Intel. FP80 in recent
> Intel microprocessors are very slow when using special representations
> (NaN, NA, Inf, -Inf) or denormal numbers.
> >
> > Therefore, it may be wise to update R algorithms to make them work quite
> well with 64 bits FP.
> >
> > --
> > Sincerely
> > Andr? GILLIBERT
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Steven Dirkse, Ph.D.
GAMS Development Corp.
office: 202.342.0180

	[[alternative HTML version deleted]]


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Tue Jul 12 09:17:43 2022
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Tue, 12 Jul 2022 09:17:43 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <C16B8B5F-5A2E-40B9-BFAF-95F5B52DB030@R-project.org>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <C16B8B5F-5A2E-40B9-BFAF-95F5B52DB030@R-project.org>
Message-ID: <720A901B-D6CF-4D35-9FFA-206DF2F06CD6@uzh.ch>

Simon, 

I think the issue is rather that we have a representable number that is not correctly parsed by R. Step by step: 

The mentioned number 1e25 is, as you say, not representable in IEEE 754 double precision, with two closest representable numbers being

 10000000000000000905969664 (bit pattern 0 10001010010 0000100010110010101000101100001010000000001010010001)

and

 9999999999999998758486016 (bit patterns 0 10001010010 0000100010110010101000101100001010000000001010010000)

So the fact that 1e25 gets printed out as 10000000000000000905969664 makes perfect sense ? it?s the closest number that can be represented. Which is exactly what one expects and also the usual guarantee ? unrepresentable number literals are supposed to be parsed to a closest representable number. This is a problem that can be (and has been) solved correctly and reliably, so there is no reason why R wouldn?t offer the same guarantee here. 

But let?s get to the actual problem. If you type in 10000000000000000905969664 into R on an Apple Silicon machine you will get 

  10000000000000003053453312 (bit pattern 0 10001010010 0000100010110010101000101100001010000000001010010010)

Which is the next double in the sequence and not a correct way to parse the number.  

So unless I made a mistake somewhere it indeed looks like a bug in R?s number parsing code. It produces the expected, correctly rounded result for a non-representable 1e25, but is one bit off for the precisely representable 10000000000000000905969664

And BTW, I have tried the same with C and Swift, and it works as expected, i.e. in C 

  assert(10000000000000000000000000.0 == 10000000000000000905969664.0 );


Best, 

  Taras 



> On 12 Jul 2022, at 03:02, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> I don?t think there is any guarantee that unrepresentable numbers are parsed into defined patterns, because printing is done by the OS while parsing is done by R. The way R parses decimal numbers[1] is simply by using the obvious res = res * 10 + digit and it can be easily checked that for doubles the representation such obtained from 10000000000000000905969664 is 0x1.08b2a2c280292p+83 (see below if you want to see it yourself) which is not the same as 10^25 which is 0x1.08b2a2c280291p+83. This is true on all platforms, it is not specific to M1. The only difference is if your were to use a different type you can obtain a different result - and that is not well-defined (e.g. long doubles have no guarantees at all as of the precision).  Note that the decimal string above would require 83-bits of precision which is not representable.
> 
> (BTW: to make it even more fun, if you were to use double res = 1; repeat(25) res = res * 10; in C, so the naive computation of the original 10^25 you?d get 9999999999999998758486016 and 0x1.08b2a2c28029p+83)
> 
> Given that printing is done by the OS and parsing by R, I don?t think R guarantees anything. If you want representable number you?d use the binary representation (sprintf(?%a?) or hex-mode deparse as noted). One could argue that it could make sense to change it one way or another - either having R do it all or having the OS do it all. In the latter case one may obtain more consistent results (e.g. system stdtod() yields the original value even on M1), but it would be OS-specific. In the former R could impose its own guarantees - but currently it does not.
> 
> Cheers,
> Simon
> 
> [1] - https://github.com/r-devel/r-svn/blob/97c0a73f1758d09088c200f924d27b362d55ccdc/src/main/util.c#L2094
> 
> 
> #include <stdio.h>
> #include <math.h>
> #include <stdlib.h>
> 
> int main() {
>  const char *str = "10000000000000000905969664", *c = str;
>  double ans = 0;
>  while (*c) {
>    ans = 10 * ans + (*(c++) - '0');
>    printf("%a\n", ans);
>  }
>  printf("atof: %a\n", atof(str));
>  double pow1025 = pow(10.0, 25);
>  printf("--\n10^25:\n%25.f\n%a\n", pow1025, pow1025);
>  return 0;
> }
> 
> 0x1p+0
> 0x1.4p+3
> 0x1.9p+6
> 0x1.f4p+9
> 0x1.388p+13
> 0x1.86ap+16
> 0x1.e848p+19
> 0x1.312dp+23
> 0x1.7d784p+26
> 0x1.dcd65p+29
> 0x1.2a05f2p+33
> 0x1.74876e8p+36
> 0x1.d1a94a2p+39
> 0x1.2309ce54p+43
> 0x1.6bcc41e9p+46
> 0x1.c6bf52634p+49
> 0x1.1c37937e08p+53
> 0x1.6345785d8a001p+56
> 0x1.bc16d674ec801p+59
> 0x1.158e460913d01p+63
> 0x1.5af1d78b58c41p+66
> 0x1.b1ae4d6e2ef51p+69
> 0x1.0f0cf064dd593p+73
> 0x1.52d02c7e14af8p+76
> 0x1.a784379d99db6p+79
> 0x1.08b2a2c280292p+83
> atof: 0x1.08b2a2c280291p+83
> --
> 10^25:
> 10000000000000000905969664
> 0x1.08b2a2c280291p+83
> 
> 
>> On 11/07/2022, at 02:00, Antoine Fabri <antoine.fabri at gmail.com> wrote:
>> 
>> Dear r-devel,
>> 
>> For some numbers, the printed value is not equivalent to the input :
>> 
>> options(scipen = 999)
>> ## GOOD
>> 1e24
>> #> [1]  999999999999999983222784
>> 1e24 == 999999999999999983222784
>> #> [1] TRUE
>> 
>> ## BAD
>> 1e25
>> #> [1] 10000000000000000905969664
>> 1e25 == 10000000000000000905969664
>> #> [1] FALSE
>> 
>> ## STILL BAD
>> 10000000000000000905969664
>> #> [1] 10000000000000003053453312
>> 
>> ## GOOD AGAIN
>> 10000000000000003053453312
>> #> [1] 10000000000000003053453312
>> 
>> # Additionally
>> 10000000000000000000000000 == 1e25
>> #> [1] FALSE
>> 
>> Are these bugs ?
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jul 12 11:40:25 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 12 Jul 2022 11:40:25 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <25291.56922.730383.931706@stat.math.ethz.ch>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <CAEKh8ujziLSCxAEc1dmxJQMf5Kcpq2hO0yx+Tuyp4s98WuCeuA@mail.gmail.com>
 <1af830d4-73cb-b48b-77d2-de0c74aa1f8e@yahoo.com>
 <25291.56922.730383.931706@stat.math.ethz.ch>
Message-ID: <25293.16777.227441.534787@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Mon, 11 Jul 2022 10:24:58 +0200 writes:

[............]

    > 10 days ago I also had a colleague at ETH, involved in teaching stats,
    > wanting to submit a bug report about a model fit in nlme which
    > gave different results (well, a confidence interval of a
    > correlation which was not at all significant (and estimated
    > close to zero) changed from +/-0.45 to +/-0.85 ...

(that was all the case, indeed)

    > ... and when I asked for sessionInfo() etc,
    > the result was that on the  M1  the result differed from all
    > other platforms.

when now rechecking and looking at the example, I've found to my
embarrassment, that the above paragraph (which *was* our conclusion)
has really not been the case.
Rather, as I've now reconfirmed, it seems that *only* on Windows
(from the platforms we looked at), the result differed from the others.

I.e., my nlme - example has been completely irrelevant to the
discussion here.
I do apologize!

Martin


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Wed Jul 13 01:19:22 2022
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Wed, 13 Jul 2022 09:19:22 +1000
Subject: [Rd] Recommended change to CheckLazyDataCompression section in WRE
Message-ID: <CAJmOi+PQowhEudmDGtDZ9T24BGP2zs7yQm5jWOBzXo46RoA3CQ@mail.gmail.com>

Thank you for the helpful function in WRE. I recommend the following
changes to avoid inadvertent errors

CheckLazyDataCompression <- function(pkg)
{
    pkg_name <- sub("_.*", "", basename(pkg))   # in case pkg is in a
different directory
    lib <- tempfile(); dir.create(lib)
    zs <- c("gzip", "bzip2", "xz")
    res <- double(3); names(res) <- zs   # is a double vector
    for (z in zs) {
        opts <- c(paste0("--data-compress=", z),
                  "--no-libs", "--no-help", "--no-demo", "--no-exec",
"--no-test-load")
        install.packages(pkg, lib, INSTALL_opts = opts, repos = NULL,
quiet = TRUE, type = "source")  # otherwise an error on Windows
        res[z] <- file.size(file.path(lib, pkg_name, "data", "Rdata.rdb"))
    }
    ceiling(res/1024)
}

Relatedly, the footnote (currently 24) says:
> For all the CRAN packages tested, either gz or bzip2 provided a very substantial reduction in installed size.

I believe this should be "xz or bzip2"

Finally, I also note the sentence in the same section

"Lazy-loading is not supported for very large datasets (those which
when serialized exceed 2GB, the limit for the format on 32-bit
platforms)"

Is this still applicable?

Best,

Hugh.


From dev|nm@r||n @end|ng |rom gm@||@com  Thu Jul 14 21:53:39 2022
From: dev|nm@r||n @end|ng |rom gm@||@com (Devin Marlin)
Date: Thu, 14 Jul 2022 15:53:39 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
Message-ID: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>

Hello,

After using R for a number of years, and venturing into other languages,
I've noticed the ones with the ability to enter numbers separated by
underscores for readability (like 100000 as 100_000) make life a whole lot
easier, especially when debugging. Is this a feature that could be
implemented in R?

Regards,

-- 
*Devin Marlin*

	[[alternative HTML version deleted]]


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Jul 15 02:21:38 2022
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Thu, 14 Jul 2022 20:21:38 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
Message-ID: <00d501d897e0$da0e5330$8e2af990$@gmail.com>

Devin,

I cannot say anyone wants to tweak R after the fact to accept numeric items
with underscores as that might impact all kinds of places.

Can I suggest a workaround that allows you to enter your integer (or
floating point which gets truncated) using this:

underint <- function(text) as.integer(gsub("_+", "", text))

Use a call to that anywhere you want an int like:

result <- underint("1_000_000") + underint("6___6__6_6") - 6000

results in: 100666

If you want to see the result with underscores, using something like
scales::comma as in

You can also make similar functions that use as.numeric() and as.double()
but note that this allows you to enter data at somewhat greater expense and
as text/strings. Obviously a similar technique can be used with regular
expressions of many kinds to wipe out or replace anything, including commas
with this:

undernumeric <- function(text) as.numeric(gsub("[,_]+", "", text))

undernumeric("123,456.789_012")
[1] 123456.8

Yes, it truncated it but I am sure any combo of underscores and commas will
be removed. It also truncates the same thing with all numerals and a period.



-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Devin Marlin
Sent: Thursday, July 14, 2022 3:54 PM
To: r-devel at r-project.org
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers

Hello,

After using R for a number of years, and venturing into other languages,
I've noticed the ones with the ability to enter numbers separated by
underscores for readability (like 100000 as 100_000) make life a whole lot
easier, especially when debugging. Is this a feature that could be
implemented in R?

Regards,

--
*Devin Marlin*

	[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Fri Jul 15 02:29:51 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 14 Jul 2022 20:29:51 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <00d501d897e0$da0e5330$8e2af990$@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
Message-ID: <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>



On 2022-07-14 8:21 p.m., avi.e.gross at gmail.com wrote:
> Devin,
> 
> I cannot say anyone wants to tweak R after the fact to accept numeric items
> with underscores as that might impact all kinds of places.
> 
> Can I suggest a workaround that allows you to enter your integer (or
> floating point which gets truncated) using this:
> 
> underint <- function(text) as.integer(gsub("_+", "", text))
> 
> Use a call to that anywhere you want an int like:
> 
> result <- underint("1_000_000") + underint("6___6__6_6") - 6000
> 
> results in: 100666
> 
> If you want to see the result with underscores, using something like
> scales::comma as in
> 
> You can also make similar functions that use as.numeric() and as.double()
> but note that this allows you to enter data at somewhat greater expense and
> as text/strings. Obviously a similar technique can be used with regular
> expressions of many kinds to wipe out or replace anything, including commas
> with this:
> 
> undernumeric <- function(text) as.numeric(gsub("[,_]+", "", text))
> 
> undernumeric("123,456.789_012")
> [1] 123456.8
> 
> Yes, it truncated it but I am sure any combo of underscores and commas will
> be removed. It also truncates the same thing with all numerals and a period.
> 

   It's not really 'truncated', it's just printed with limited 
precision.  (Sorry if I'm telling you something you already know ...)

options(digits = 22)
undernumeric("123,456.789_012")
[1] 123456.7890119999938179

(and there's floating point inaccuracy rearing its ugly head again; 
options(digits=16) works well for this example ...)

> 
> 
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Devin Marlin
> Sent: Thursday, July 14, 2022 3:54 PM
> To: r-devel at r-project.org
> Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
> 
> Hello,
> 
> After using R for a number of years, and venturing into other languages,
> I've noticed the ones with the ability to enter numbers separated by
> underscores for readability (like 100000 as 100_000) make life a whole lot
> easier, especially when debugging. Is this a feature that could be
> implemented in R?
> 
> Regards,
> 
> --
> *Devin Marlin*
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Jul 15 02:53:58 2022
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Thu, 14 Jul 2022 20:53:58 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
Message-ID: <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>

Yes, Ben, your point (way below) is correct. As I noted, as.numeric() also
truncated a normal notation so I did not worry about it as I could tweak the
system and both versions (underscores too) would now show more precision. 

I can think of oodles more ways to allow showing big numbers as readable
such as writing them in segments and concatenating them with paste0() as in:

assembleint <- function(...) as.integer(paste(..., sep=""))

> assembleint("12", "345", "678")
[1] 12345678

But it really at some point is not very readable. I was a bit annoyed at the
underscore method used in other languages I know as for me the comma is the
normal separator but commas are so deeply embedded for various uses in just
about any language, that they could not be allowed within a grouping of
digits. Few things can be but "_" maybe could as it is allowed in other
identifiers and in Python, even at the start in some places.

But now I realize that others have different methods. I recently saw someone
using a CSV file with numbers that use comma as a decimal delimiter and thus
they use semicolon to keep the fields apart.  But we have R functions that
easily handle importing from that as long as once inside, we deal with them
without seeing them again unless needed.

I am thinking of all the regular expressions that would break badly if
underscores in digits are allowed. All the [0-9] constructs might need to be
[0-9_] and \d might need to be redefined. The end of a number might be
undefined if it bumped up against something else with an underscore at the
edge.

If we were re-inventing everything today, I suspect we might have started
with something like UNICODE with lots more symbols than ASCII or EBCDIC had
and that might include a globally defined comma-separator symbol that was
never used except with a number so it would be part of the definition of
what numeric digits are. But that is not going to happen.

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Ben Bolker
Sent: Thursday, July 14, 2022 8:30 PM
To: r-devel at r-project.org
Subject: Re: [Rd] Feature Request: Allow Underscore Separated Numbers



On 2022-07-14 8:21 p.m., avi.e.gross at gmail.com wrote:
> Devin,
> 
> I cannot say anyone wants to tweak R after the fact to accept numeric 
> items with underscores as that might impact all kinds of places.
> 
> Can I suggest a workaround that allows you to enter your integer (or 
> floating point which gets truncated) using this:
> 
> underint <- function(text) as.integer(gsub("_+", "", text))
> 
> Use a call to that anywhere you want an int like:
> 
> result <- underint("1_000_000") + underint("6___6__6_6") - 6000
> 
> results in: 100666
> 
> If you want to see the result with underscores, using something like 
> scales::comma as in
> 
> You can also make similar functions that use as.numeric() and 
> as.double() but note that this allows you to enter data at somewhat 
> greater expense and as text/strings. Obviously a similar technique can 
> be used with regular expressions of many kinds to wipe out or replace 
> anything, including commas with this:
> 
> undernumeric <- function(text) as.numeric(gsub("[,_]+", "", text))
> 
> undernumeric("123,456.789_012")
> [1] 123456.8
> 
> Yes, it truncated it but I am sure any combo of underscores and commas 
> will be removed. It also truncates the same thing with all numerals and a
period.
> 

   It's not really 'truncated', it's just printed with limited precision.
(Sorry if I'm telling you something you already know ...)

options(digits = 22)
undernumeric("123,456.789_012")
[1] 123456.7890119999938179

(and there's floating point inaccuracy rearing its ugly head again;
options(digits=16) works well for this example ...)

> 
> 
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Devin 
> Marlin
> Sent: Thursday, July 14, 2022 3:54 PM
> To: r-devel at r-project.org
> Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
> 
> Hello,
> 
> After using R for a number of years, and venturing into other 
> languages, I've noticed the ones with the ability to enter numbers 
> separated by underscores for readability (like 100000 as 100_000) make 
> life a whole lot easier, especially when debugging. Is this a feature 
> that could be implemented in R?
> 
> Regards,
> 
> --
> *Devin Marlin*
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Fri Jul 15 08:31:05 2022
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Fri, 15 Jul 2022 06:31:05 +0000
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>,
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
Message-ID: <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>



On 2022-07-14 8:21 p.m., avi.e.gross at gmail.com wrote:
> Devin,
>
> I cannot say anyone wants to tweak R after the fact to accept numeric
> items with underscores as that might impact all kinds of places.
>

I am not sure that the feature request of Devin Marlin was correctly understood.
I guess that he thought about adding syntactic sugar to numeric literals in the language.
Functions such as as.numeric(), or read.csv() would not be changed.

The main difference would be to make valid code that currently is a "syntax error", such as:
> 3*100_000
Error: unexpected input in "3*100_"

Breaking code with that feature is possible but improbable.
Indeed, code expecting that str2lang("3*100_000") make a syntax error (catching the error with try) would break.
Most code generating other code then parsing it with str2lang() should be fine, because it would generate old-style code with normal numeric constants.

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From rhe|p @end|ng |rom eoo@@dd@@n|  Fri Jul 15 10:27:54 2022
From: rhe|p @end|ng |rom eoo@@dd@@n| (Jan van der Laan)
Date: Fri, 15 Jul 2022 10:27:54 +0200
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <00d501d897e0$da0e5330$8e2af990$@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
Message-ID: <64d11006-54b5-ddd8-e8f5-850c5edce84c@eoos.dds.nl>


Another R-solution would be:

`%,%` <- function(a, b) a*1000 + b

which would allow one to write large numbers as

 > 100%,%123

Resulting in 100123.

Not sure if this really helps with readability.


I actually think this could better be handled by the IDE one is working 
in. Most IDE's already do syntax highlighting and when a suitable font 
is used text as '!=' is displayed as '?' (the unequal sign). So I guess 
they can also apply special formatting to large numbers such as grouping 
the numbers, underlining groups of three, using colour, ..


Jan




On 15-07-2022 02:21, avi.e.gross at gmail.com wrote:
> Devin,
> 
> I cannot say anyone wants to tweak R after the fact to accept numeric items
> with underscores as that might impact all kinds of places.
> 
> Can I suggest a workaround that allows you to enter your integer (or
> floating point which gets truncated) using this:
> 
> underint <- function(text) as.integer(gsub("_+", "", text))
> 
> Use a call to that anywhere you want an int like:
> 
> result <- underint("1_000_000") + underint("6___6__6_6") - 6000
> 
> results in: 100666
> 
> If you want to see the result with underscores, using something like
> scales::comma as in
> 
> You can also make similar functions that use as.numeric() and as.double()
> but note that this allows you to enter data at somewhat greater expense and
> as text/strings. Obviously a similar technique can be used with regular
> expressions of many kinds to wipe out or replace anything, including commas
> with this:
> 
> undernumeric <- function(text) as.numeric(gsub("[,_]+", "", text))
> 
> undernumeric("123,456.789_012")
> [1] 123456.8
> 
> Yes, it truncated it but I am sure any combo of underscores and commas will
> be removed. It also truncates the same thing with all numerals and a period.
> 
> 
> 
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Devin Marlin
> Sent: Thursday, July 14, 2022 3:54 PM
> To: r-devel at r-project.org
> Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
> 
> Hello,
> 
> After using R for a number of years, and venturing into other languages,
> I've noticed the ones with the ability to enter numbers separated by
> underscores for readability (like 100000 as 100_000) make life a whole lot
> easier, especially when debugging. Is this a feature that could be
> implemented in R?
> 
> Regards,
> 
> --
> *Devin Marlin*
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jul 15 12:01:57 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 15 Jul 2022 06:01:57 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
Message-ID: <46a8f42d-7489-1228-f9e4-6368e15660a6@gmail.com>

On 14/07/2022 3:53 p.m., Devin Marlin wrote:
> Hello,
> 
> After using R for a number of years, and venturing into other languages,
> I've noticed the ones with the ability to enter numbers separated by
> underscores for readability (like 100000 as 100_000) make life a whole lot
> easier, especially when debugging. Is this a feature that could be
> implemented in R?

I think this could be done, but I doubt if anyone who could make the 
change would think the arbitrary decisions and added complexity in the 
parser was worth the effort.  (Would it be a thousands separator, or 
could it separate any number of digits?  Could a number start with an 
underscore or end with one?)

Instead, I'd suggest creating variables with meaningful names to hold 
big numeric constants, e.g.

     AU_in_km <- 149598262  # or 149.598262e6

     Jupiter <- 5.2 * AU_in_km

rather than

     Jupiter <- 5.2 * 149_598_262

Duncan Murdoch


From ggrothend|eck @end|ng |rom gm@||@com  Fri Jul 15 15:12:18 2022
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Fri, 15 Jul 2022 09:12:18 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <46a8f42d-7489-1228-f9e4-6368e15660a6@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <46a8f42d-7489-1228-f9e4-6368e15660a6@gmail.com>
Message-ID: <CAP01uRkRTYYb9=EcymC6uxpVyfpRJpy3q5Hpc9NKonjuMcoOGA@mail.gmail.com>

It would be best to simply ignore any embedded _ in numbers rather than only
accept them at fixed locations since it isn't always
a thousands separator.  For example, 1 lakh is sometimes written as
1,00,000 rupees.

On Fri, Jul 15, 2022 at 7:25 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 14/07/2022 3:53 p.m., Devin Marlin wrote:
> > Hello,
> >
> > After using R for a number of years, and venturing into other languages,
> > I've noticed the ones with the ability to enter numbers separated by
> > underscores for readability (like 100000 as 100_000) make life a whole lot
> > easier, especially when debugging. Is this a feature that could be
> > implemented in R?
>
> I think this could be done, but I doubt if anyone who could make the
> change would think the arbitrary decisions and added complexity in the
> parser was worth the effort.  (Would it be a thousands separator, or
> could it separate any number of digits?  Could a number start with an
> underscore or end with one?)
>
> Instead, I'd suggest creating variables with meaningful names to hold
> big numeric constants, e.g.
>
>      AU_in_km <- 149598262  # or 149.598262e6
>
>      Jupiter <- 5.2 * AU_in_km
>
> rather than
>
>      Jupiter <- 5.2 * 149_598_262
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Jul 15 17:25:32 2022
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Fri, 15 Jul 2022 11:25:32 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>,
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
Message-ID: <007301d8985f$205d9a70$6118cf50$@gmail.com>

Andr?,

 

I am not saying a change cannot be done and am not familiar enough with the
internals of R. If you just want the interpreter to evaluate CONSTANTS in
the code as what you consider syntactic sugar and replace 1_000 with 1000,
that sounds superficially possible. But is it?

 

R normally delays evaluation so chunks of code are handed over untouched to
functions that often play with the text directly without evaluating it
until, perhaps, much later. And I have pointed out how much work is done
with things like regular expressions or reading things in from a file that
is not done in the REPL but in functions behind the scene. So if there is
any way for a number to slide in without being modified, or places where you
want the darn underscores preserved, you may well cause a glitch.

 

Languages that design in the ability have obviously dealt with issues and
presumably anyone writing code anew can use a new definition in their work
so they handle such numbers. I am not saying such a change cannot be done,
simply that existing languages are careful about making changes as they
strive to retain compatibility.

 

So even assuming your statement about not needing to change as.numeric or
read.csv functions is true, aren?t you introducing a change in which the
users will inadvertently use the feature in strings or files and assume it
is a globally recognized feature? I use CSV files and other such formats
quite a bit as a way to exchange data between R and other environments and
unless they all change and allow underscores in numbers, there can be
issues. So, yes, you are suggesting nothing in R will write out numbers with
underscores. But if others do and you import the data into R with a reader
that does not understand, we have anomalies.

 

I am not arguing with anyone about this. Like many proposed features, it
sounds reasonable just by itself. But for a language that was crafted and
then modified many times, the burden is often on those wanting a change to
convince us that it can be done benignly, effectively and cheaply AND that
it is more worthwhile than a thousand other pending ideas already submitted.

 

I have never used str2lang() in my life directly so would changing that
really help if as.numeric() and other such functions were left alone and did
not call it? What if I read in a .CSV a line at a time and use various
methods including regular expressions to split the line into parts and then
make the parts into numbers based on some primitive algorithm that maps
digits 0-9 into small integers 0-9 and then positionally multiplies digits
to the left by 10 for each level and adds them up. Will that algorithm know
about underscores and not only ignore them but keep track of how many times
it multiplies the other parts by 10? Sure, we can write a new algorithm with
added complexity but in my view, we can solve the problem in the few cases
it matters without such a change.

 

Had this been built in originally, maybe not a problem. But consider the
enormous expense of UNICODE and the truly major upheaval needed to get it
working  at a time when lots of code using pointers had a reasonable
expectation that all characters took up the same number of bytes, and
calculating the length of a string could be done by simply subtracting one
pointer from another. Now, you actually have to read the entire string and
count code points, or keep the length as a part of the structure that is
changed any time it changes and so on.

 

But arguably UNICODE support is now required in many cases. So, yes,
underscores in numbers may become commonplace and cause headaches for a
while. But mathematically, I don?t see them as needed and see many ways to
allow a programmer to see what a number is without any problems in the few
times they want it. Cut and paste in code can easily take out any snippet
accurately and pluck it into a function that displays it with commas or
whatever. But definitely, lazy humans constantly make mistakes and even with
this would still make some.

 

But if R developers seem confident this change can be done, go for it!
Numeric literals, like other constants, have often been something compiled
languages have optimized out of the way, such as combining multiple
instances of the same one into one memory location.

 

Avi

 

 

From: GILLIBERT, Andre <Andre.Gillibert at chu-rouen.fr> 
Sent: Friday, July 15, 2022 2:31 AM
To: avi.e.gross at gmail.com; r-devel at r-project.org
Subject: RE: [Rd] Feature Request: Allow Underscore Separated Numbers

 

 

 

On 2022-07-14 8:21 p.m., avi.e.gross at gmail.com
<mailto:avi.e.gross at gmail.com>  wrote:
> Devin,
>
> I cannot say anyone wants to tweak R after the fact to accept numeric
> items with underscores as that might impact all kinds of places.
>

 

I am not sure that the feature request of Devin Marlin was correctly
understood.

I guess that he thought about adding syntactic sugar to numeric literals in
the language.

Functions such as as.numeric(), or read.csv() would not be changed.

 

The main difference would be to make valid code that currently is a "syntax
error", such as:

> 3*100_000

Error: unexpected input in "3*100_"

 

Breaking code with that feature is possible but improbable.

Indeed, code expecting that str2lang("3*100_000") make a syntax error
(catching the error with try) would break.

Most code generating other code then parsing it with str2lang() should be
fine, because it would generate old-style code with normal numeric
constants.

 

-- 

Sincerely

Andr? GILLIBERT


	[[alternative HTML version deleted]]


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Jul 15 17:56:14 2022
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Fri, 15 Jul 2022 11:56:14 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <64d11006-54b5-ddd8-e8f5-850c5edce84c@eoos.dds.nl>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <64d11006-54b5-ddd8-e8f5-850c5edce84c@eoos.dds.nl>
Message-ID: <00c901d89863$696bb400$3c431c00$@gmail.com>

Jan,

Many ideas like yours are a solution that delivers something like syntactic sugar, albeit yours may be too specific. It would not be useful for say recording a social security number or other identifier that is normally clumped  (albeit it is not always treated as a number) when someone wants to accurately record 123-45-6789 but must write 123456789 and possibly not chunk it right and get a wrong number. Multiplying by a thousand here won?t get the right result.

But a low tech solution at any level is to use a polynomial format of sorts so 123456789 is written as:

123 * 10^6 + 456 + 10^3 + 789

Or some similar notation.

And, can you add a new number designator along the lines of 0x12ff meaning hexadecimal so writing some prefix like "00_" might mean what follows contains underscores you can ignore when putting it into a number format?

The main reason I guess for the change seems to be for following along what others have chosen.

Avi

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Jan van der Laan
Sent: Friday, July 15, 2022 4:28 AM
To: r-devel at r-project.org
Subject: Re: [Rd] Feature Request: Allow Underscore Separated Numbers


Another R-solution would be:

`%,%` <- function(a, b) a*1000 + b

which would allow one to write large numbers as

 > 100%,%123

Resulting in 100123.

Not sure if this really helps with readability.


I actually think this could better be handled by the IDE one is working in. Most IDE's already do syntax highlighting and when a suitable font is used text as '!=' is displayed as '?' (the unequal sign). So I guess they can also apply special formatting to large numbers such as grouping the numbers, underlining groups of three, using colour, ..


Jan




On 15-07-2022 02:21, avi.e.gross at gmail.com wrote:
> Devin,
> 
> I cannot say anyone wants to tweak R after the fact to accept numeric 
> items with underscores as that might impact all kinds of places.
> 
> Can I suggest a workaround that allows you to enter your integer (or 
> floating point which gets truncated) using this:
> 
> underint <- function(text) as.integer(gsub("_+", "", text))
> 
> Use a call to that anywhere you want an int like:
> 
> result <- underint("1_000_000") + underint("6___6__6_6") - 6000
> 
> results in: 100666
> 
> If you want to see the result with underscores, using something like 
> scales::comma as in
> 
> You can also make similar functions that use as.numeric() and 
> as.double() but note that this allows you to enter data at somewhat 
> greater expense and as text/strings. Obviously a similar technique can 
> be used with regular expressions of many kinds to wipe out or replace 
> anything, including commas with this:
> 
> undernumeric <- function(text) as.numeric(gsub("[,_]+", "", text))
> 
> undernumeric("123,456.789_012")
> [1] 123456.8
> 
> Yes, it truncated it but I am sure any combo of underscores and commas 
> will be removed. It also truncates the same thing with all numerals and a period.
> 
> 
> 
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Devin 
> Marlin
> Sent: Thursday, July 14, 2022 3:54 PM
> To: r-devel at r-project.org
> Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
> 
> Hello,
> 
> After using R for a number of years, and venturing into other 
> languages, I've noticed the ones with the ability to enter numbers 
> separated by underscores for readability (like 100000 as 100_000) make 
> life a whole lot easier, especially when debugging. Is this a feature 
> that could be implemented in R?
> 
> Regards,
> 
> --
> *Devin Marlin*
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Fri Jul 15 19:21:31 2022
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 15 Jul 2022 20:21:31 +0300
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <007301d8985f$205d9a70$6118cf50$@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com>
Message-ID: <20220715202131.3c34c81e@Tarkus>

On Fri, 15 Jul 2022 11:25:32 -0400
<avi.e.gross at gmail.com> wrote:

> R normally delays evaluation so chunks of code are handed over
> untouched to functions that often play with the text directly without
> evaluating it until, perhaps, much later.

Do they play with the text, or with the syntax tree after it went
through the parser? While it's true that R saves the source text of the
functions for ease of debugging, it's not guaranteed that a given
object will have source references, and typical NSE functions operate
on language objects which are tree-like structures containing R values,
not source text.

You are, of course, right that any changes to the syntax of the
language must be carefully considered, but if anyone wants to play with
this idea, it can be implemented in a very simple manner:

--- src/main/gram.y	(revision 82598)
+++ src/main/gram.y	(working copy)
@@ -2526,7 +2526,7 @@
     YYTEXT_PUSH(c, yyp);
     /* We don't care about other than ASCII digits */
     while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
-	   || c == 'x' || c == 'X' || c == 'L')
+	   || c == 'x' || c == 'X' || c == 'L' || c == '_')
     {
 	count++;
 	if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
@@ -2533,6 +2533,9 @@
 	{   YYTEXT_PUSH(c, yyp);
 	    break;
 	}
+	if (c == '_') { /* allow an underscore anywhere inside the literal */
+	    continue;
+	}
 	
 	if (c == 'x' || c == 'X') {
 	    if (count > 2 || last != '0') break;  /* 0x must be first */

To an NSE function, the underscored literals are indistinguishable from
normal ones, because they don't see the literals:

stopifnot(all.equal(\() 1000000, \() 1_000_000))
f <- function(x, y) stopifnot(all.equal(substitute(x), substitute(y)))
f(1e6, 1_000_000)

Although it's true that the source references change as a result:

lapply(
 list(\() 1000000, \() 1_000_000),
 \(.) as.character(getSrcref(.))
)
# [[1]]
# [1] "\\() 1000000"
# 
# [[2]]
# [1] "\\() 1_000_000"

This patch is somewhat simplistic: it allows both multiple underscores
in succession and underscores at the end of the number literal. Perl
does so too, but with a warning:

perl -wE'say "true" if 1__000_ == 1000'
# Misplaced _ in number at -e line 1.
# Misplaced _ in number at -e line 1.
# true

-- 
Best regards,
Ivan


From j@me@@|@he@ter @end|ng |rom gm@||@com  Fri Jul 15 19:58:35 2022
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Fri, 15 Jul 2022 13:58:35 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <20220715202131.3c34c81e@Tarkus>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com> <20220715202131.3c34c81e@Tarkus>
Message-ID: <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>

Allowing underscores in numeric literals is becoming a very common
feature in computing languages. All of these languages (and more) now
support it

python: https://peps.python.org/pep-0515/
javascript: https://v8.dev/features/numeric-separators
julia: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Floating-Point-Numbers
java: https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html#:~:text=In%20Java%20SE%207%20and,the%20readability%20of%20your%20code.
ruby: https://docs.ruby-lang.org/en/2.0.0/syntax/literals_rdoc.html#label-Numbers
perl: https://perldoc.perl.org/perldata#Scalar-value-constructors
rust: https://doc.rust-lang.org/rust-by-example/primitives/literals.html
C#: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types#real-literals
go: https://go.dev/ref/spec#Integer_literals

Its use in this context also dates back to at least Ada 83
(http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#:~:text=A%20decimal%20literal%20is%20a,the%20base%20is%20implicitly%20ten).&text=An%20underline%20character%20inserted%20between,value%20of%20this%20numeric%20literal.)

Many other communities see the benefit of this feature, I think R's
community would benefit from it as well.

On Fri, Jul 15, 2022 at 1:22 PM Ivan Krylov <krylov.r00t at gmail.com> wrote:
>
> On Fri, 15 Jul 2022 11:25:32 -0400
> <avi.e.gross at gmail.com> wrote:
>
> > R normally delays evaluation so chunks of code are handed over
> > untouched to functions that often play with the text directly without
> > evaluating it until, perhaps, much later.
>
> Do they play with the text, or with the syntax tree after it went
> through the parser? While it's true that R saves the source text of the
> functions for ease of debugging, it's not guaranteed that a given
> object will have source references, and typical NSE functions operate
> on language objects which are tree-like structures containing R values,
> not source text.
>
> You are, of course, right that any changes to the syntax of the
> language must be carefully considered, but if anyone wants to play with
> this idea, it can be implemented in a very simple manner:
>
> --- src/main/gram.y     (revision 82598)
> +++ src/main/gram.y     (working copy)
> @@ -2526,7 +2526,7 @@
>      YYTEXT_PUSH(c, yyp);
>      /* We don't care about other than ASCII digits */
>      while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
> -          || c == 'x' || c == 'X' || c == 'L')
> +          || c == 'x' || c == 'X' || c == 'L' || c == '_')
>      {
>         count++;
>         if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
> @@ -2533,6 +2533,9 @@
>         {   YYTEXT_PUSH(c, yyp);
>             break;
>         }
> +       if (c == '_') { /* allow an underscore anywhere inside the literal */
> +           continue;
> +       }
>
>         if (c == 'x' || c == 'X') {
>             if (count > 2 || last != '0') break;  /* 0x must be first */
>
> To an NSE function, the underscored literals are indistinguishable from
> normal ones, because they don't see the literals:
>
> stopifnot(all.equal(\() 1000000, \() 1_000_000))
> f <- function(x, y) stopifnot(all.equal(substitute(x), substitute(y)))
> f(1e6, 1_000_000)
>
> Although it's true that the source references change as a result:
>
> lapply(
>  list(\() 1000000, \() 1_000_000),
>  \(.) as.character(getSrcref(.))
> )
> # [[1]]
> # [1] "\\() 1000000"
> #
> # [[2]]
> # [1] "\\() 1_000_000"
>
> This patch is somewhat simplistic: it allows both multiple underscores
> in succession and underscores at the end of the number literal. Perl
> does so too, but with a warning:
>
> perl -wE'say "true" if 1__000_ == 1000'
> # Misplaced _ in number at -e line 1.
> # Misplaced _ in number at -e line 1.
> # true
>
> --
> Best regards,
> Ivan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jul 15 20:26:49 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 15 Jul 2022 14:26:49 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com> <20220715202131.3c34c81e@Tarkus>
 <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
Message-ID: <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>

Thanks for posting that list.  The Python document is the only one I've 
read so far; it has a really nice summary 
(https://peps.python.org/pep-0515/#prior-art) of the differences in 
implementations among 10 languages.  Which choice would you recommend, 
and why?

  - I think Ivan's quick solution doesn't quite match any of them.
  - C, Fortran and C++ have special support in R, but none of them use 
underscore separators.
  - C++ does support separators, but uses "'", not "_", and some ancient 
forms of Fortran ignore embedded spaces.

Duncan Murdoch

On 15/07/2022 1:58 p.m., Jim Hester wrote:
> Allowing underscores in numeric literals is becoming a very common
> feature in computing languages. All of these languages (and more) now
> support it
> 
> python: https://peps.python.org/pep-0515/
> javascript: https://v8.dev/features/numeric-separators
> julia: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Floating-Point-Numbers
> java: https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html#:~:text=In%20Java%20SE%207%20and,the%20readability%20of%20your%20code.
> ruby: https://docs.ruby-lang.org/en/2.0.0/syntax/literals_rdoc.html#label-Numbers
> perl: https://perldoc.perl.org/perldata#Scalar-value-constructors
> rust: https://doc.rust-lang.org/rust-by-example/primitives/literals.html
> C#: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types#real-literals
> go: https://go.dev/ref/spec#Integer_literals
> 
> Its use in this context also dates back to at least Ada 83
> (http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#:~:text=A%20decimal%20literal%20is%20a,the%20base%20is%20implicitly%20ten).&text=An%20underline%20character%20inserted%20between,value%20of%20this%20numeric%20literal.)
> 
> Many other communities see the benefit of this feature, I think R's
> community would benefit from it as well.
> 
> On Fri, Jul 15, 2022 at 1:22 PM Ivan Krylov <krylov.r00t at gmail.com> wrote:
>>
>> On Fri, 15 Jul 2022 11:25:32 -0400
>> <avi.e.gross at gmail.com> wrote:
>>
>>> R normally delays evaluation so chunks of code are handed over
>>> untouched to functions that often play with the text directly without
>>> evaluating it until, perhaps, much later.
>>
>> Do they play with the text, or with the syntax tree after it went
>> through the parser? While it's true that R saves the source text of the
>> functions for ease of debugging, it's not guaranteed that a given
>> object will have source references, and typical NSE functions operate
>> on language objects which are tree-like structures containing R values,
>> not source text.
>>
>> You are, of course, right that any changes to the syntax of the
>> language must be carefully considered, but if anyone wants to play with
>> this idea, it can be implemented in a very simple manner:
>>
>> --- src/main/gram.y     (revision 82598)
>> +++ src/main/gram.y     (working copy)
>> @@ -2526,7 +2526,7 @@
>>       YYTEXT_PUSH(c, yyp);
>>       /* We don't care about other than ASCII digits */
>>       while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
>> -          || c == 'x' || c == 'X' || c == 'L')
>> +          || c == 'x' || c == 'X' || c == 'L' || c == '_')
>>       {
>>          count++;
>>          if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
>> @@ -2533,6 +2533,9 @@
>>          {   YYTEXT_PUSH(c, yyp);
>>              break;
>>          }
>> +       if (c == '_') { /* allow an underscore anywhere inside the literal */
>> +           continue;
>> +       }
>>
>>          if (c == 'x' || c == 'X') {
>>              if (count > 2 || last != '0') break;  /* 0x must be first */
>>
>> To an NSE function, the underscored literals are indistinguishable from
>> normal ones, because they don't see the literals:
>>
>> stopifnot(all.equal(\() 1000000, \() 1_000_000))
>> f <- function(x, y) stopifnot(all.equal(substitute(x), substitute(y)))
>> f(1e6, 1_000_000)
>>
>> Although it's true that the source references change as a result:
>>
>> lapply(
>>   list(\() 1000000, \() 1_000_000),
>>   \(.) as.character(getSrcref(.))
>> )
>> # [[1]]
>> # [1] "\\() 1000000"
>> #
>> # [[2]]
>> # [1] "\\() 1_000_000"
>>
>> This patch is somewhat simplistic: it allows both multiple underscores
>> in succession and underscores at the end of the number literal. Perl
>> does so too, but with a warning:
>>
>> perl -wE'say "true" if 1__000_ == 1000'
>> # Misplaced _ in number at -e line 1.
>> # Misplaced _ in number at -e line 1.
>> # true
>>
>> --
>> Best regards,
>> Ivan
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@me@@|@he@ter @end|ng |rom gm@||@com  Fri Jul 15 21:25:48 2022
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Fri, 15 Jul 2022 15:25:48 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com> <20220715202131.3c34c81e@Tarkus>
 <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
 <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>
Message-ID: <CAD6tx96=Ypuu-xo6qAVf7roHsM=Nt=nQ5DE5qy_9p2Vk2UKpaA@mail.gmail.com>

I think keeping it simple and less restrictive is the best approach,
for ease of implementation, limiting future maintenance, and so users
have the flexibility to format these however they wish. So I would
probably lean towards allowing multiple delimiters anywhere (including
trailing) or possibly just between digits.

On Fri, Jul 15, 2022 at 2:26 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> Thanks for posting that list.  The Python document is the only one I've
> read so far; it has a really nice summary
> (https://peps.python.org/pep-0515/#prior-art) of the differences in
> implementations among 10 languages.  Which choice would you recommend,
> and why?
>
>   - I think Ivan's quick solution doesn't quite match any of them.
>   - C, Fortran and C++ have special support in R, but none of them use
> underscore separators.
>   - C++ does support separators, but uses "'", not "_", and some ancient
> forms of Fortran ignore embedded spaces.
>
> Duncan Murdoch
>
> On 15/07/2022 1:58 p.m., Jim Hester wrote:
> > Allowing underscores in numeric literals is becoming a very common
> > feature in computing languages. All of these languages (and more) now
> > support it
> >
> > python: https://peps.python.org/pep-0515/
> > javascript: https://v8.dev/features/numeric-separators
> > julia: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Floating-Point-Numbers
> > java: https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html#:~:text=In%20Java%20SE%207%20and,the%20readability%20of%20your%20code.
> > ruby: https://docs.ruby-lang.org/en/2.0.0/syntax/literals_rdoc.html#label-Numbers
> > perl: https://perldoc.perl.org/perldata#Scalar-value-constructors
> > rust: https://doc.rust-lang.org/rust-by-example/primitives/literals.html
> > C#: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types#real-literals
> > go: https://go.dev/ref/spec#Integer_literals
> >
> > Its use in this context also dates back to at least Ada 83
> > (http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#:~:text=A%20decimal%20literal%20is%20a,the%20base%20is%20implicitly%20ten).&text=An%20underline%20character%20inserted%20between,value%20of%20this%20numeric%20literal.)
> >
> > Many other communities see the benefit of this feature, I think R's
> > community would benefit from it as well.
> >
> > On Fri, Jul 15, 2022 at 1:22 PM Ivan Krylov <krylov.r00t at gmail.com> wrote:
> >>
> >> On Fri, 15 Jul 2022 11:25:32 -0400
> >> <avi.e.gross at gmail.com> wrote:
> >>
> >>> R normally delays evaluation so chunks of code are handed over
> >>> untouched to functions that often play with the text directly without
> >>> evaluating it until, perhaps, much later.
> >>
> >> Do they play with the text, or with the syntax tree after it went
> >> through the parser? While it's true that R saves the source text of the
> >> functions for ease of debugging, it's not guaranteed that a given
> >> object will have source references, and typical NSE functions operate
> >> on language objects which are tree-like structures containing R values,
> >> not source text.
> >>
> >> You are, of course, right that any changes to the syntax of the
> >> language must be carefully considered, but if anyone wants to play with
> >> this idea, it can be implemented in a very simple manner:
> >>
> >> --- src/main/gram.y     (revision 82598)
> >> +++ src/main/gram.y     (working copy)
> >> @@ -2526,7 +2526,7 @@
> >>       YYTEXT_PUSH(c, yyp);
> >>       /* We don't care about other than ASCII digits */
> >>       while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
> >> -          || c == 'x' || c == 'X' || c == 'L')
> >> +          || c == 'x' || c == 'X' || c == 'L' || c == '_')
> >>       {
> >>          count++;
> >>          if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
> >> @@ -2533,6 +2533,9 @@
> >>          {   YYTEXT_PUSH(c, yyp);
> >>              break;
> >>          }
> >> +       if (c == '_') { /* allow an underscore anywhere inside the literal */
> >> +           continue;
> >> +       }
> >>
> >>          if (c == 'x' || c == 'X') {
> >>              if (count > 2 || last != '0') break;  /* 0x must be first */
> >>
> >> To an NSE function, the underscored literals are indistinguishable from
> >> normal ones, because they don't see the literals:
> >>
> >> stopifnot(all.equal(\() 1000000, \() 1_000_000))
> >> f <- function(x, y) stopifnot(all.equal(substitute(x), substitute(y)))
> >> f(1e6, 1_000_000)
> >>
> >> Although it's true that the source references change as a result:
> >>
> >> lapply(
> >>   list(\() 1000000, \() 1_000_000),
> >>   \(.) as.character(getSrcref(.))
> >> )
> >> # [[1]]
> >> # [1] "\\() 1000000"
> >> #
> >> # [[2]]
> >> # [1] "\\() 1_000_000"
> >>
> >> This patch is somewhat simplistic: it allows both multiple underscores
> >> in succession and underscores at the end of the number literal. Perl
> >> does so too, but with a warning:
> >>
> >> perl -wE'say "true" if 1__000_ == 1000'
> >> # Misplaced _ in number at -e line 1.
> >> # Misplaced _ in number at -e line 1.
> >> # true
> >>
> >> --
> >> Best regards,
> >> Ivan
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From w||||@mwdun|@p @end|ng |rom gm@||@com  Fri Jul 15 21:34:24 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Fri, 15 Jul 2022 12:34:24 -0700
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <CAD6tx96=Ypuu-xo6qAVf7roHsM=Nt=nQ5DE5qy_9p2Vk2UKpaA@mail.gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com> <20220715202131.3c34c81e@Tarkus>
 <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
 <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>
 <CAD6tx96=Ypuu-xo6qAVf7roHsM=Nt=nQ5DE5qy_9p2Vk2UKpaA@mail.gmail.com>
Message-ID: <CAHqSRuQME43oYaprEnbTfVK-mPHVxY8G=rAw9-H4LOxw6azDzA@mail.gmail.com>

The token '._1' (period underscore digit) is currently parsed as a symbol
(name).  It would become a number if underscore were ignored as in the
first proposal.  The just-between-digits alternative would avoid this
change.

-Bill

On Fri, Jul 15, 2022 at 12:26 PM Jim Hester <james.f.hester at gmail.com>
wrote:

> I think keeping it simple and less restrictive is the best approach,
> for ease of implementation, limiting future maintenance, and so users
> have the flexibility to format these however they wish. So I would
> probably lean towards allowing multiple delimiters anywhere (including
> trailing) or possibly just between digits.
>
> On Fri, Jul 15, 2022 at 2:26 PM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> >
> > Thanks for posting that list.  The Python document is the only one I've
> > read so far; it has a really nice summary
> > (https://peps.python.org/pep-0515/#prior-art) of the differences in
> > implementations among 10 languages.  Which choice would you recommend,
> > and why?
> >
> >   - I think Ivan's quick solution doesn't quite match any of them.
> >   - C, Fortran and C++ have special support in R, but none of them use
> > underscore separators.
> >   - C++ does support separators, but uses "'", not "_", and some ancient
> > forms of Fortran ignore embedded spaces.
> >
> > Duncan Murdoch
> >
> > On 15/07/2022 1:58 p.m., Jim Hester wrote:
> > > Allowing underscores in numeric literals is becoming a very common
> > > feature in computing languages. All of these languages (and more) now
> > > support it
> > >
> > > python: https://peps.python.org/pep-0515/
> > > javascript: https://v8.dev/features/numeric-separators
> > > julia:
> https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Floating-Point-Numbers
> > > java:
> https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html#:~:text=In%20Java%20SE%207%20and,the%20readability%20of%20your%20code
> .
> > > ruby:
> https://docs.ruby-lang.org/en/2.0.0/syntax/literals_rdoc.html#label-Numbers
> > > perl: https://perldoc.perl.org/perldata#Scalar-value-constructors
> > > rust:
> https://doc.rust-lang.org/rust-by-example/primitives/literals.html
> > > C#:
> https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types#real-literals
> > > go: https://go.dev/ref/spec#Integer_literals
> > >
> > > Its use in this context also dates back to at least Ada 83
> > > (
> http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#:~:text=A%20decimal%20literal%20is%20a,the%20base%20is%20implicitly%20ten).&text=An%20underline%20character%20inserted%20between,value%20of%20this%20numeric%20literal
> .)
> > >
> > > Many other communities see the benefit of this feature, I think R's
> > > community would benefit from it as well.
> > >
> > > On Fri, Jul 15, 2022 at 1:22 PM Ivan Krylov <krylov.r00t at gmail.com>
> wrote:
> > >>
> > >> On Fri, 15 Jul 2022 11:25:32 -0400
> > >> <avi.e.gross at gmail.com> wrote:
> > >>
> > >>> R normally delays evaluation so chunks of code are handed over
> > >>> untouched to functions that often play with the text directly without
> > >>> evaluating it until, perhaps, much later.
> > >>
> > >> Do they play with the text, or with the syntax tree after it went
> > >> through the parser? While it's true that R saves the source text of
> the
> > >> functions for ease of debugging, it's not guaranteed that a given
> > >> object will have source references, and typical NSE functions operate
> > >> on language objects which are tree-like structures containing R
> values,
> > >> not source text.
> > >>
> > >> You are, of course, right that any changes to the syntax of the
> > >> language must be carefully considered, but if anyone wants to play
> with
> > >> this idea, it can be implemented in a very simple manner:
> > >>
> > >> --- src/main/gram.y     (revision 82598)
> > >> +++ src/main/gram.y     (working copy)
> > >> @@ -2526,7 +2526,7 @@
> > >>       YYTEXT_PUSH(c, yyp);
> > >>       /* We don't care about other than ASCII digits */
> > >>       while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
> > >> -          || c == 'x' || c == 'X' || c == 'L')
> > >> +          || c == 'x' || c == 'X' || c == 'L' || c == '_')
> > >>       {
> > >>          count++;
> > >>          if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at
> present). */
> > >> @@ -2533,6 +2533,9 @@
> > >>          {   YYTEXT_PUSH(c, yyp);
> > >>              break;
> > >>          }
> > >> +       if (c == '_') { /* allow an underscore anywhere inside the
> literal */
> > >> +           continue;
> > >> +       }
> > >>
> > >>          if (c == 'x' || c == 'X') {
> > >>              if (count > 2 || last != '0') break;  /* 0x must be
> first */
> > >>
> > >> To an NSE function, the underscored literals are indistinguishable
> from
> > >> normal ones, because they don't see the literals:
> > >>
> > >> stopifnot(all.equal(\() 1000000, \() 1_000_000))
> > >> f <- function(x, y) stopifnot(all.equal(substitute(x), substitute(y)))
> > >> f(1e6, 1_000_000)
> > >>
> > >> Although it's true that the source references change as a result:
> > >>
> > >> lapply(
> > >>   list(\() 1000000, \() 1_000_000),
> > >>   \(.) as.character(getSrcref(.))
> > >> )
> > >> # [[1]]
> > >> # [1] "\\() 1000000"
> > >> #
> > >> # [[2]]
> > >> # [1] "\\() 1_000_000"
> > >>
> > >> This patch is somewhat simplistic: it allows both multiple underscores
> > >> in succession and underscores at the end of the number literal. Perl
> > >> does so too, but with a warning:
> > >>
> > >> perl -wE'say "true" if 1__000_ == 1000'
> > >> # Misplaced _ in number at -e line 1.
> > >> # Misplaced _ in number at -e line 1.
> > >> # true
> > >>
> > >> --
> > >> Best regards,
> > >> Ivan
> > >>
> > >> ______________________________________________
> > >> R-devel at r-project.org mailing list
> > >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @vi@e@gross m@iii@g oii gm@ii@com  Fri Jul 15 23:05:13 2022
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Fri, 15 Jul 2022 17:05:13 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <20220715202131.3c34c81e@Tarkus>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>	<00d501d897e0$da0e5330$8e2af990$@gmail.com>	<1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>	<00f201d897e5$5e152a60$1a3f7f20$@gmail.com>	<4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>	<007301d8985f$205d9a70$6118cf50$@gmail.com>
 <20220715202131.3c34c81e@Tarkus>
Message-ID: <011701d8988e$93b7e4b0$bb27ae10$@gmail.com>

Yes, Ivan, obviously someone can try out a change and check if it causes
problems.

And although I would think the majority of delayed execution eventually
either is never invoked or is done as you describe using internal functions
in trees, I suspect there exist some that do not.

For example, I can write code in another mini-language I create that I will
then analyze. What stops me from leaving quotes out from around a regular
expression because I am going to read the text exactly as is and manipulate
it, as long as the RE does not contain anything that keeps it from being
accepted as an argument to a function, such as no commas. Inside I may have
something like a pattern to  match a file name starting with anything then
an underscore and then a digit or two and finally a file suffix. I would not
want anything to parse that and remove the underscore that is part of a
filename. The argument is meant to be atomic.

Many things in the tidyverse do variations on delayed evaluation and some
seem to be a piece at a time. An example would be how mutate() allows
multiple clauses for new=f(old) where later lines use columns created in
earlier lines that did not exist before and can only be used if the
preceding part went well. I may be wrong on how it is done, but it strikes
me as possible they read in the raw text till they match an end of some kind
like a top-level comma or top level close-parenthesis. My GUESS is only then
might they evaluate that chunk after substitutions or other ploys to use
some namespace. Will a column name like evil__666__ survive?

Again, I am not AGAINST any proposal but the people who have to pay the
price in terms of needing to arrange or pay for development, documentation,
testing and so on, are the ones needed to be convinced. My point is that in
some ways R is a different kind of programming language than say python. I
experimented briefly in python and note their implementation of this feature
is fairly robust. I mean casting a string to an int works as expected as in:
a= int("1" "_" "122") returns 1122.

Be warned though that the current python implementation generates an error
if you have two or more underscores in a row as in:

a=1__1
SyntaxError: invalid decimal literal
a=1___1
SyntaxError: invalid decimal literal

And it does not tolerate one or more underscore at the end with the same
error and really gets mad at an initial underscore like _1 where it asks if
you mean "_" as a single underscore is not only a valid variable, as well as
multiple consecutive underscores, but is often used as an I DON'T CARE in
code like this, albeit any variable can be used as the last instance keeps
the value:

(_,_,a) = (1,2,3)
_
2
a
3

(In the above, you are seeing commands and output alternating, if not
clear.)

And as it happens, half of python variable contain runs of underscores to
the point where some say member functions like __name__  and __init__ are
called dunder name and dunder init  as in double double underscore. And note
that python is not that much younger than R/S and this feature was added
fairly late in version 3.6, about 5 years ago, long after version 3.0 made
many programs for version 2.x incompatible. 

My point is not python but someone may want to see how the underscore in a
number feature is actually implemented in any of the languages that now
allow it and carefully document exactly in what circumstances it is allowed
in R and also where, if anywhere, it differs from other such places.

If it can be done with a very few localized changes, great. My objections
about making regular expressions more complex  by needing to handle
underscore likely are not a major obstacle as python supports those too.

Luckily, my opinion is just my own as I have no direct stake in the outcome.
I personally handle large numbers fine.

Avi




-----Original Message-----
From: Ivan Krylov <krylov.r00t at gmail.com> 
Sent: Friday, July 15, 2022 1:22 PM
To: avi.e.gross at gmail.com
Cc: r-devel at r-project.org
Subject: Re: [Rd] Feature Request: Allow Underscore Separated Numbers

On Fri, 15 Jul 2022 11:25:32 -0400
<avi.e.gross at gmail.com> wrote:

> R normally delays evaluation so chunks of code are handed over 
> untouched to functions that often play with the text directly without 
> evaluating it until, perhaps, much later.

Do they play with the text, or with the syntax tree after it went through
the parser? While it's true that R saves the source text of the functions
for ease of debugging, it's not guaranteed that a given object will have
source references, and typical NSE functions operate on language objects
which are tree-like structures containing R values, not source text.

You are, of course, right that any changes to the syntax of the language
must be carefully considered, but if anyone wants to play with this idea, it
can be implemented in a very simple manner:

--- src/main/gram.y	(revision 82598)
+++ src/main/gram.y	(working copy)
@@ -2526,7 +2526,7 @@
     YYTEXT_PUSH(c, yyp);
     /* We don't care about other than ASCII digits */
     while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
-	   || c == 'x' || c == 'X' || c == 'L')
+	   || c == 'x' || c == 'X' || c == 'L' || c == '_')
     {
 	count++;
 	if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present).
*/ @@ -2533,6 +2533,9 @@
 	{   YYTEXT_PUSH(c, yyp);
 	    break;
 	}
+	if (c == '_') { /* allow an underscore anywhere inside the literal
*/
+	    continue;
+	}
 	
 	if (c == 'x' || c == 'X') {
 	    if (count > 2 || last != '0') break;  /* 0x must be first */

To an NSE function, the underscored literals are indistinguishable from
normal ones, because they don't see the literals:

stopifnot(all.equal(\() 1000000, \() 1_000_000)) f <- function(x, y)
stopifnot(all.equal(substitute(x), substitute(y))) f(1e6, 1_000_000)

Although it's true that the source references change as a result:

lapply(
 list(\() 1000000, \() 1_000_000),
 \(.) as.character(getSrcref(.))
)
# [[1]]
# [1] "\\() 1000000"
#
# [[2]]
# [1] "\\() 1_000_000"

This patch is somewhat simplistic: it allows both multiple underscores in
succession and underscores at the end of the number literal. Perl does so
too, but with a warning:

perl -wE'say "true" if 1__000_ == 1000'
# Misplaced _ in number at -e line 1.
# Misplaced _ in number at -e line 1.
# true

--
Best regards,
Ivan


From kry|ov@r00t @end|ng |rom gm@||@com  Sat Jul 16 11:24:07 2022
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sat, 16 Jul 2022 12:24:07 +0300
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <CAHqSRuQME43oYaprEnbTfVK-mPHVxY8G=rAw9-H4LOxw6azDzA@mail.gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com>
 <20220715202131.3c34c81e@Tarkus>
 <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
 <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>
 <CAD6tx96=Ypuu-xo6qAVf7roHsM=Nt=nQ5DE5qy_9p2Vk2UKpaA@mail.gmail.com>
 <CAHqSRuQME43oYaprEnbTfVK-mPHVxY8G=rAw9-H4LOxw6azDzA@mail.gmail.com>
Message-ID: <20220716122407.7a764f71@Tarkus>

On Fri, 15 Jul 2022 12:34:24 -0700
Bill Dunlap <williamwdunlap at gmail.com> wrote:

> The token '._1' (period underscore digit) is currently parsed as a
> symbol (name).  It would become a number if underscore were ignored
> as in the first proposal.  The just-between-digits alternative would
> avoid this change.

Thanks for spotting this! Here's a patch that allows underscores
only between digits and only inside the significand of a number:

--- src/main/gram.y	(revision 82598)
+++ src/main/gram.y	(working copy)
@@ -2526,7 +2526,7 @@
     YYTEXT_PUSH(c, yyp);
     /* We don't care about other than ASCII digits */
     while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
-	   || c == 'x' || c == 'X' || c == 'L')
+	   || c == 'x' || c == 'X' || c == 'L' || c == '_')
     {
 	count++;
 	if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
@@ -2538,11 +2538,16 @@
 	    if (count > 2 || last != '0') break;  /* 0x must be first */
 	    YYTEXT_PUSH(c, yyp);
 	    while(isdigit(c = xxgetc()) || ('a' <= c && c <= 'f') ||
-		  ('A' <= c && c <= 'F') || c == '.') {
+		  ('A' <= c && c <= 'F') || c == '.' || c == '_') {
 		if (c == '.') {
 		    if (seendot) return ERROR;
 		    seendot = 1;
 		}
+		if (c == '_') {
+		    /* disallow underscores following 0x or followed by non-digit */
+		    if (nd == 0 || typeofnext() >= 2) break;
+		    continue;
+		}
 		YYTEXT_PUSH(c, yyp);
 		nd++;
 	    }
@@ -2588,6 +2593,11 @@
 		break;
 	    seendot = 1;
 	}
+	/* underscores in significand followed by a digit must be skipped */
+	if (c == '_') {
+	    if (seenexp || typeofnext() >= 2) break;
+	    continue;
+	}
 	YYTEXT_PUSH(c, yyp);
 	last = c;
     }


-- 
Best regards,
Ivan


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jul 16 17:17:17 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 16 Jul 2022 11:17:17 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <20220716122407.7a764f71@Tarkus>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com> <20220715202131.3c34c81e@Tarkus>
 <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
 <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>
 <CAD6tx96=Ypuu-xo6qAVf7roHsM=Nt=nQ5DE5qy_9p2Vk2UKpaA@mail.gmail.com>
 <CAHqSRuQME43oYaprEnbTfVK-mPHVxY8G=rAw9-H4LOxw6azDzA@mail.gmail.com>
 <20220716122407.7a764f71@Tarkus>
Message-ID: <a0558822-581b-ced4-17f8-f4cd9ad7d0b3@gmail.com>

On 16/07/2022 5:24 a.m., Ivan Krylov wrote:
> On Fri, 15 Jul 2022 12:34:24 -0700
> Bill Dunlap <williamwdunlap at gmail.com> wrote:
> 
>> The token '._1' (period underscore digit) is currently parsed as a
>> symbol (name).  It would become a number if underscore were ignored
>> as in the first proposal.  The just-between-digits alternative would
>> avoid this change.
> 
> Thanks for spotting this! Here's a patch that allows underscores
> only between digits and only inside the significand of a number:

I think there's an issue with hex values.  For example:

 > 0xa_2
[1] 162
 > 0x2_a
Error: unexpected input in "0x2_"

So "a" counts as a digit in 0xa_2, but not as a digit in 0x2_a.

Duncan Murdoch


> 
> --- src/main/gram.y	(revision 82598)
> +++ src/main/gram.y	(working copy)
> @@ -2526,7 +2526,7 @@
>       YYTEXT_PUSH(c, yyp);
>       /* We don't care about other than ASCII digits */
>       while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
> -	   || c == 'x' || c == 'X' || c == 'L')
> +	   || c == 'x' || c == 'X' || c == 'L' || c == '_')
>       {
>   	count++;
>   	if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
> @@ -2538,11 +2538,16 @@
>   	    if (count > 2 || last != '0') break;  /* 0x must be first */
>   	    YYTEXT_PUSH(c, yyp);
>   	    while(isdigit(c = xxgetc()) || ('a' <= c && c <= 'f') ||
> -		  ('A' <= c && c <= 'F') || c == '.') {
> +		  ('A' <= c && c <= 'F') || c == '.' || c == '_') {
>   		if (c == '.') {
>   		    if (seendot) return ERROR;
>   		    seendot = 1;
>   		}
> +		if (c == '_') {
> +		    /* disallow underscores following 0x or followed by non-digit */
> +		    if (nd == 0 || typeofnext() >= 2) break;
> +		    continue;
> +		}
>   		YYTEXT_PUSH(c, yyp);
>   		nd++;
>   	    }
> @@ -2588,6 +2593,11 @@
>   		break;
>   	    seendot = 1;
>   	}
> +	/* underscores in significand followed by a digit must be skipped */
> +	if (c == '_') {
> +	    if (seenexp || typeofnext() >= 2) break;
> +	    continue;
> +	}
>   	YYTEXT_PUSH(c, yyp);
>   	last = c;
>       }
> 
>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Jul 16 17:25:44 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 16 Jul 2022 16:25:44 +0100
Subject: [Rd] Warning with new placeholder piped to data.frame extractors
 `[` and `[[`.
Message-ID: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>

Hello,

When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder 
in mandatory.


df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))

aggregate(y ~ f, df1, mean) |> `[`('y')
# Error: function '[' not supported in RHS call of a pipe

aggregate(y ~ f, df1, mean) |> `[[`('y')
# Error: function '[' not supported in RHS call of a pipe



But if used it throws a warning.



aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
#  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): 
named arguments
#  other than 'drop' are discouraged
#    y
#  1 3
#  2 8

aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
#  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named
#  arguments other than 'exact' are discouraged
#  [1] 3 8



Hasn't this become inconsistent behavior?
More than merely right, the named argument is mandatory, it shouldn't 
give warnings.

Hope this helps,

Rui Barradas


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jul 17 00:19:06 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 16 Jul 2022 18:19:06 -0400
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <46a8f42d-7489-1228-f9e4-6368e15660a6@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <46a8f42d-7489-1228-f9e4-6368e15660a6@gmail.com>
Message-ID: <387f633b-2de0-7554-9254-395bb48a64b4@gmail.com>

So far I would say we've had some good contributions on this thread. 
Ivan's suggested patches show that the change isn't completely trivial, 
but is doable.

However, we haven't had any input from an R Core member, so I consider 
the proposal to be essentially dead.

If an R Core member decides to resurrect it, here's what I'd suggest is 
still needed:

  - a formal definition of where the separator may occur, and a 
justificaton for that choice, and comparison to other languages.

  - patches to documentation for the changes.  These include the manuals 
and the ?NumericConstants help topic, and probably others.

  - tests to add to "R CMD check" for packages to see if the new syntax 
is being used without specifying that "R >= 4.3.0" is a requirement.

Duncan Murdoch


From kry|ov@r00t @end|ng |rom gm@||@com  Sun Jul 17 08:57:22 2022
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sun, 17 Jul 2022 09:57:22 +0300
Subject: [Rd] Feature Request: Allow Underscore Separated Numbers
In-Reply-To: <a0558822-581b-ced4-17f8-f4cd9ad7d0b3@gmail.com>
References: <CAMnDFaaev9wEcFjvy7mSPvEApcu2FbeGiVng8sTuDQQt33o7mA@mail.gmail.com>
 <00d501d897e0$da0e5330$8e2af990$@gmail.com>
 <1d949cb9-c59c-67db-73d3-09434190d0f0@gmail.com>
 <00f201d897e5$5e152a60$1a3f7f20$@gmail.com>
 <4b2912e60b134c2894f592fb8b3ce056@chu-rouen.fr>
 <007301d8985f$205d9a70$6118cf50$@gmail.com>
 <20220715202131.3c34c81e@Tarkus>
 <CAD6tx94kgTRYiHS6wkuk3hsFzyasp_5_tx5_Gz5Xhr5zDY-1cw@mail.gmail.com>
 <88caf40b-fecd-30d5-48a5-42eb5ba9d0fd@gmail.com>
 <CAD6tx96=Ypuu-xo6qAVf7roHsM=Nt=nQ5DE5qy_9p2Vk2UKpaA@mail.gmail.com>
 <CAHqSRuQME43oYaprEnbTfVK-mPHVxY8G=rAw9-H4LOxw6azDzA@mail.gmail.com>
 <20220716122407.7a764f71@Tarkus>
 <a0558822-581b-ced4-17f8-f4cd9ad7d0b3@gmail.com>
Message-ID: <20220717095722.39a4f988@trisector>

On Sat, 16 Jul 2022 11:17:17 -0400
Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> I think there's an issue with hex values.  For example:
> 
>  > 0xa_2  
> [1] 162
>  > 0x2_a  
> Error: unexpected input in "0x2_"

You're right, thanks! Should have checked for hex-digits when in
hex-literal mode.

One last try because I don't want to leave a bug I had introduced
myself, but as you say in your other message, this is both incomplete
without tests and documentation and effectively dead unless an R Core
member picks the whole proposal up:

--- src/main/gram.y	(revision 82598)
+++ src/main/gram.y	(working copy)
@@ -2091,7 +2091,9 @@
     int k, c;
 
     c = xxgetc();
-    if (isdigit(c)) k = 1; else k = 2;
+    if (isdigit(c)) k = 1;
+    else if (('a' <= c && c <= 'f') || ('A' <= c && c <= 'F')) k = 2;
+    else k = 3;
     xxungetc(c);
     return k;
 }
@@ -2526,7 +2528,7 @@
     YYTEXT_PUSH(c, yyp);
     /* We don't care about other than ASCII digits */
     while (isdigit(c = xxgetc()) || c == '.' || c == 'e' || c == 'E'
-	   || c == 'x' || c == 'X' || c == 'L')
+	   || c == 'x' || c == 'X' || c == 'L' || c == '_')
     {
 	count++;
 	if (c == 'L') /* must be at the end.  Won't allow 1Le3 (at present). */
@@ -2538,11 +2540,16 @@
 	    if (count > 2 || last != '0') break;  /* 0x must be first */
 	    YYTEXT_PUSH(c, yyp);
 	    while(isdigit(c = xxgetc()) || ('a' <= c && c <= 'f') ||
-		  ('A' <= c && c <= 'F') || c == '.') {
+		  ('A' <= c && c <= 'F') || c == '.' || c == '_') {
 		if (c == '.') {
 		    if (seendot) return ERROR;
 		    seendot = 1;
 		}
+		if (c == '_') {
+		    /* disallow underscores following 0x or followed by non-hexdigit */
+		    if (nd == 0 || typeofnext() >= 3) break;
+		    continue;
+		}
 		YYTEXT_PUSH(c, yyp);
 		nd++;
 	    }
@@ -2588,6 +2595,11 @@
 		break;
 	    seendot = 1;
 	}
+	/* underscores in significand followed by a digit must be skipped */
+	if (c == '_') {
+	    if (seenexp || typeofnext() >= 2) break;
+	    continue;
+	}
 	YYTEXT_PUSH(c, yyp);
 	last = c;
     }

I won't be sending any more unsolicited patches for this proposal.

-- 
Best regards,
Ivan


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Mon Jul 18 19:14:57 2022
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Mon, 18 Jul 2022 20:14:57 +0300
Subject: [Rd] R-Devel (82603) still passing "fno-optimize-sibling-calls" on
 Windows
Message-ID: <CAL6gwnK+=m8wP_ehJXmxuhb_EfUX5MX9pjjpweXH-8Az7iF4rA@mail.gmail.com>

Hello.

According to my understanding of the changes in R-devel, the flag
-fno-optimize-sibling-calls should no longer be forced when compiling
R. Yet, as I compile R, revision 82603, from source on Windows
(Skylake-X server) I see the flag being passed (example below). Is
this different for Windows than for Unix? The changes header seems to
be its own and not under the "Installation on Unix-Alike" header.

Thank you,

Avi

Excerpt:
making Lapack.d from Lapack.c
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin -ffloat-store -c dlamch.f -o
dlamch.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c dlapack.f -o dlapack.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c cmplx.f -o cmplx.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c la_constants.f90 -o
la_constants.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c dlartg.f90 -o dlartg.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c la_xisnan.f90 -o la_xisnan.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c dlassq.f90 -o dlassq.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c zlartg.f90 -o zlartg.o
gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
-ffat-lto-objects -fuse-linker-plugin  -c zlassq.f90 -o zlassq.o


From tdhock5 @end|ng |rom gm@||@com  Mon Jul 18 20:06:46 2022
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Mon, 18 Jul 2022 11:06:46 -0700
Subject: [Rd] 
 Warning with new placeholder piped to data.frame extractors
 `[` and `[[`.
In-Reply-To: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
Message-ID: <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>

Is the intent is to encourage the user to do something simpler like...
aggregate(y ~ f, df1, mean)$y
aggregate(y ~ f, df1, mean)["y"]
aggregate(y ~ f, df1, mean)[["y"]]
??

On Sat, Jul 16, 2022 at 8:27 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder
> in mandatory.
>
>
> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>
> aggregate(y ~ f, df1, mean) |> `[`('y')
> # Error: function '[' not supported in RHS call of a pipe
>
> aggregate(y ~ f, df1, mean) |> `[[`('y')
> # Error: function '[' not supported in RHS call of a pipe
>
>
>
> But if used it throws a warning.
>
>
>
> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
> #  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
> named arguments
> #  other than 'drop' are discouraged
> #    y
> #  1 3
> #  2 8
>
> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
> #  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named
> #  arguments other than 'exact' are discouraged
> #  [1] 3 8
>
>
>
> Hasn't this become inconsistent behavior?
> More than merely right, the named argument is mandatory, it shouldn't
> give warnings.
>
> Hope this helps,
>
> Rui Barradas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Mon Jul 18 21:48:23 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 18 Jul 2022 12:48:23 -0700
Subject: [Rd] 
 Warning with new placeholder piped to data.frame extractors
 `[` and `[[`.
In-Reply-To: <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
Message-ID: <CAD4oTHFncY=uTk=LST0vDD9UX7qApoPxy6TrXZnx-ojUZdEZpQ@mail.gmail.com>

It looks to me like the 'bug' here seems to be that

aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')


does not throw the same error as

aggregate(y ~ f, df1, mean) |> `[`('y')


Since the latter seems pretty clear that the intent is that `[` is
disallowed on the RHS of the pipe by design.

~G


On Mon, Jul 18, 2022 at 11:07 AM Toby Hocking <tdhock5 at gmail.com> wrote:

> Is the intent is to encourage the user to do something simpler like...
> aggregate(y ~ f, df1, mean)$y
> aggregate(y ~ f, df1, mean)["y"]
> aggregate(y ~ f, df1, mean)[["y"]]
> ??
>
> On Sat, Jul 16, 2022 at 8:27 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> > Hello,
> >
> > When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder
> > in mandatory.
> >
> >
> > df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
> >
> > aggregate(y ~ f, df1, mean) |> `[`('y')
> > # Error: function '[' not supported in RHS call of a pipe
> >
> > aggregate(y ~ f, df1, mean) |> `[[`('y')
> > # Error: function '[' not supported in RHS call of a pipe
> >
> >
> >
> > But if used it throws a warning.
> >
> >
> >
> > aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
> > #  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
> > named arguments
> > #  other than 'drop' are discouraged
> > #    y
> > #  1 3
> > #  2 8
> >
> > aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
> > #  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
> named
> > #  arguments other than 'exact' are discouraged
> > #  [1] 3 8
> >
> >
> >
> > Hasn't this become inconsistent behavior?
> > More than merely right, the named argument is mandatory, it shouldn't
> > give warnings.
> >
> > Hope this helps,
> >
> > Rui Barradas
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Jul 18 21:51:43 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 18 Jul 2022 20:51:43 +0100
Subject: [Rd] 
 Warning with new placeholder piped to data.frame extractors
 `[` and `[[`.
In-Reply-To: <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
Message-ID: <13f8d427-a258-71eb-0275-ed732025a2e9@sapo.pt>

Hello,

In the OP I had forgotten the sessionInfo().

Thanks for the feed back but I don't think this answers to the question, 
after all the pipe operator was introduced in R 4.2.0 not because it 
should be used discouraged.

What it seems to me is that its introduction is causing a problem in 
other functions, the data.frame extractors. And only in two of them `[` 
and `[[`. They both have arguments x, i, j and it's these arguments that 
are not meant to be named.

But *after* the pipe argument x *must* be named. The warning is 
inconsistent with the new obligation.

The other extractor, `$.data.frame`, is not indexed and the pipe runs 
without a warning. Once again, it is not obvious that a warning message like


named arguments other than 'drop/exact' are discouraged


doesn't include x. As a matter of fact, `$`'s first argument would be 
implicitly included in the messages were they thrown, which is not the 
case. (This last sentence is confusing but its intent clear?)



df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))

aggregate(y ~ f, df1, mean) |> `$`('y')
# Error: function '$' not supported in RHS call of a pipe

aggregate(y ~ f, df1, mean) |> `$`(x = _, 'y')
# [1] 3 8


sessionInfo()
R version 4.2.1 (2022-06-23 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 22000)

Matrix products: default

locale:
[1] LC_COLLATE=Portuguese_Portugal.utf8  LC_CTYPE=Portuguese_Portugal.utf8
[3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C
[5] LC_TIME=Portuguese_Portugal.utf8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.1


Hope this helps,

Rui Barradas



?s 19:06 de 18/07/2022, Toby Hocking escreveu:
> Is the intent is to encourage the user to do something simpler like...
> aggregate(y ~ f, df1, mean)$y
> aggregate(y ~ f, df1, mean)["y"]
> aggregate(y ~ f, df1, mean)[["y"]]
> ??
> 
> On Sat, Jul 16, 2022 at 8:27 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
>> Hello,
>>
>> When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder
>> in mandatory.
>>
>>
>> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>>
>> aggregate(y ~ f, df1, mean) |> `[`('y')
>> # Error: function '[' not supported in RHS call of a pipe
>>
>> aggregate(y ~ f, df1, mean) |> `[[`('y')
>> # Error: function '[' not supported in RHS call of a pipe
>>
>>
>>
>> But if used it throws a warning.
>>
>>
>>
>> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
>> #  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
>> named arguments
>> #  other than 'drop' are discouraged
>> #    y
>> #  1 3
>> #  2 8
>>
>> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
>> #  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named
>> #  arguments other than 'exact' are discouraged
>> #  [1] 3 8
>>
>>
>>
>> Hasn't this become inconsistent behavior?
>> More than merely right, the named argument is mandatory, it shouldn't
>> give warnings.
>>
>> Hope this helps,
>>
>> Rui Barradas
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jul 18 22:06:45 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 18 Jul 2022 16:06:45 -0400
Subject: [Rd] 
 Warning with new placeholder piped to data.frame extractors
 `[` and `[[`.
In-Reply-To: <CAD4oTHFncY=uTk=LST0vDD9UX7qApoPxy6TrXZnx-ojUZdEZpQ@mail.gmail.com>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
 <CAD4oTHFncY=uTk=LST0vDD9UX7qApoPxy6TrXZnx-ojUZdEZpQ@mail.gmail.com>
Message-ID: <826f93cb-4286-2906-80a7-dd830406d820@gmail.com>

The code from gram.y that handles this looks like this in R-devel:

         /* allow top-level placeholder */
         for (SEXP a = CDR(rhs); a != R_NilValue; a = CDR(a))
             if (CAR(a) == R_PlaceholderToken) {
                 if (TAG(a) == R_NilValue)
                     raiseParseError("placeholderNotNamed", rhs,
                                     NO_VALUE, NULL, lloc_rhs,
                             _("pipe placeholder can only be used as a 
named argument (%s:%d:%d)"));
                 checkTooManyPlaceholders(rhs, CDR(a), lloc_rhs);
                 SETCAR(a, lhs);
                 return rhs;
             }

         check_rhs(rhs, lloc_rhs);

The "check_rhs" function is the one that complains about using `[` as a 
function on the right hand side.  So it is never run when there's a 
placeholder found.  Not sure if this is intentional or not.

You can see more context here: 
https://github.com/wch/r-source/blob/0ece3677bc1c4a1c76ecbcff62424d72d742d492/src/main/gram.y#L1248 
.

Duncan Murdoch



On 18/07/2022 3:48 p.m., Gabriel Becker wrote:
> It looks to me like the 'bug' here seems to be that
> 
> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
> 
> 
> does not throw the same error as
> 
> aggregate(y ~ f, df1, mean) |> `[`('y')
> 
> 
> Since the latter seems pretty clear that the intent is that `[` is
> disallowed on the RHS of the pipe by design.
> 
> ~G
> 
> 
> On Mon, Jul 18, 2022 at 11:07 AM Toby Hocking <tdhock5 at gmail.com> wrote:
> 
>> Is the intent is to encourage the user to do something simpler like...
>> aggregate(y ~ f, df1, mean)$y
>> aggregate(y ~ f, df1, mean)["y"]
>> aggregate(y ~ f, df1, mean)[["y"]]
>> ??
>>
>> On Sat, Jul 16, 2022 at 8:27 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>
>>> Hello,
>>>
>>> When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder
>>> in mandatory.
>>>
>>>
>>> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>>>
>>> aggregate(y ~ f, df1, mean) |> `[`('y')
>>> # Error: function '[' not supported in RHS call of a pipe
>>>
>>> aggregate(y ~ f, df1, mean) |> `[[`('y')
>>> # Error: function '[' not supported in RHS call of a pipe
>>>
>>>
>>>
>>> But if used it throws a warning.
>>>
>>>
>>>
>>> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
>>> #  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
>>> named arguments
>>> #  other than 'drop' are discouraged
>>> #    y
>>> #  1 3
>>> #  2 8
>>>
>>> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
>>> #  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
>> named
>>> #  arguments other than 'exact' are discouraged
>>> #  [1] 3 8
>>>
>>>
>>>
>>> Hasn't this become inconsistent behavior?
>>> More than merely right, the named argument is mandatory, it shouldn't
>>> give warnings.
>>>
>>> Hope this helps,
>>>
>>> Rui Barradas
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jul 18 22:39:22 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 18 Jul 2022 22:39:22 +0200
Subject: [Rd] 
 R-Devel (82603) still passing "fno-optimize-sibling-calls" on
 Windows
In-Reply-To: <CAL6gwnK+=m8wP_ehJXmxuhb_EfUX5MX9pjjpweXH-8Az7iF4rA@mail.gmail.com>
References: <CAL6gwnK+=m8wP_ehJXmxuhb_EfUX5MX9pjjpweXH-8Az7iF4rA@mail.gmail.com>
Message-ID: <c9b62248-a5de-7dce-a8b5-8c79dd294922@gmail.com>


On 7/18/22 19:14, Avraham Adler wrote:
> Hello.
>
> According to my understanding of the changes in R-devel, the flag
> -fno-optimize-sibling-calls should no longer be forced when compiling
> R. Yet, as I compile R, revision 82603, from source on Windows
> (Skylake-X server) I see the flag being passed (example below). Is
> this different for Windows than for Unix? The changes header seems to
> be its own and not under the "Installation on Unix-Alike" header.
>
> Thank you,
>
> Avi

Hi Avi,

yes, thanks for reminding me, I will remove that in the Windows make 
files (in about a week or so). There is no need to be more careful on 
Windows than Unix regarding this (actually a bit on the contrary, as 
most users use the same compiler). Feel free to remove that already in 
your builds.

Tomas

> Excerpt:
> making Lapack.d from Lapack.c
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin -ffloat-store -c dlamch.f -o
> dlamch.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c dlapack.f -o dlapack.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c cmplx.f -o cmplx.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c la_constants.f90 -o
> la_constants.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c dlartg.f90 -o dlartg.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c la_xisnan.f90 -o la_xisnan.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c dlassq.f90 -o dlassq.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c zlartg.f90 -o zlartg.o
> gfortran  -O3 -march=native -pipe -fno-optimize-sibling-calls -flto
> -ffat-lto-objects -fuse-linker-plugin  -c zlassq.f90 -o zlassq.o
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jul 19 00:44:16 2022
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Mon, 18 Jul 2022 17:44:16 -0500 (CDT)
Subject: [Rd] 
 [External] Warning with new placeholder piped to data.frame
 extractors `[` and `[[`.
In-Reply-To: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
Message-ID: <e2f5ae1f-d45a-e356-2736-5b2d52fe33e@uiowa.edu>

On Sat, 16 Jul 2022, Rui Barradas wrote:

> Hello,
>
> When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder in 
> mandatory.
>
>
> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>
> aggregate(y ~ f, df1, mean) |> `[`('y')
> # Error: function '[' not supported in RHS call of a pipe
>
> aggregate(y ~ f, df1, mean) |> `[[`('y')
> # Error: function '[' not supported in RHS call of a pipe
>
>
>
> But if used it throws a warning.
>
>
>
> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
> #  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named 
> arguments
> #  other than 'drop' are discouraged
> #    y
> #  1 3
> #  2 8
>
> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
> #  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named
> #  arguments other than 'exact' are discouraged
> #  [1] 3 8
>

The pipe syntax requirs that the placeolder be used as a named
argument.  If you do that, then the syntax is legal and parses
successfully.

> Hasn't this become inconsistent behavior?
> More than merely right, the named argument is mandatory, it shouldn't give 
> warnings.

Any R function can decide whether it wants to allow explicitly named
arguments.  Disallowing or discouraging using explicitly named
arguments requires some work and is usually not a good idea. In the
case of the data.frame mechods for [ and [[ the decision was made to
discourage using named arguments other than 'exact'. This seems to
have been to allow a more an expedient way to implement these
functions. This could be revisited, but I doubt is is worth the effort.

For me the main reason for using pipes is to make code more
readable. Using `[` and such constructs is not furthering that
cause. When I use pipes I am almost always using tidyverse
features, so I have dpyr::pull available, which is more readable,
to me at least. Arguably, base R could have a similar function,
but again I doubt this would be a good investment of time.

An option that we have experimented with is to allow the placeholder
at the head of an extraction chain. This is supported in the
experimental branch at
https://svn.r-project.org/R/branches/R-syntax. So for example:

     > mtcars |> _$cyl[1]
     [1] 6

This may make it into R-devel for the next release, but it still needs
more testing.

Best,

luke

>
> Hope this helps,
>
> Rui Barradas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Tue Jul 19 11:42:47 2022
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Tue, 19 Jul 2022 12:42:47 +0300
Subject: [Rd] Convenience Request: Add revision numbers to "What's New"
 change list
Message-ID: <CAL6gwnJAe9femxJ5GcxuTVD-KHSZ5TpcqSdimmDPXVnRaZ9Lpg@mail.gmail.com>

Hello.

When deciding whether or not to update an R installation?either
patched or devel?I think it would be valuable to see the revisions in
which the updates/patches were applied. For those with linked PRs, if
one has a Bugzilla account, one can often find the revision in the
final note; however, not everyone has a Bugzilla account. This is a
very minor request, of course, solely a quality-of-life issue, but I
think it would be appreciated.

Thank you,

Avi


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Tue Jul 19 11:55:06 2022
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (Brodie Gaslam)
Date: Tue, 19 Jul 2022 05:55:06 -0400
Subject: [Rd] Convenience Request: Add revision numbers to "What's New"
 change list
In-Reply-To: <CAL6gwnJAe9femxJ5GcxuTVD-KHSZ5TpcqSdimmDPXVnRaZ9Lpg@mail.gmail.com>
References: <CAL6gwnJAe9femxJ5GcxuTVD-KHSZ5TpcqSdimmDPXVnRaZ9Lpg@mail.gmail.com>
Message-ID: <2e055596-37bb-fde0-d560-812b9a057999@yahoo.com>

If you have the svn repository available this might help:

     svn log -l100 --search "1[0-9][0-9][0-9][0-9]"

Not a substitute for what you are asking for, but might help in the 
meantime.  Subject to both false positives and false negatives.  You can 
tweak the number pattern to more specific ranges (and remove -l100 if 
you need more hits).

Best,

B.


On 7/19/22 5:42 AM, Avraham Adler wrote:
> Hello.
> 
> When deciding whether or not to update an R installation?either
> patched or devel?I think it would be valuable to see the revisions in
> which the updates/patches were applied. For those with linked PRs, if
> one has a Bugzilla account, one can often find the revision in the
> final note; however, not everyone has a Bugzilla account. This is a
> very minor request, of course, solely a quality-of-life issue, but I
> think it would be appreciated.
> 
> Thank you,
> 
> Avi
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jul 19 12:56:05 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 19 Jul 2022 06:56:05 -0400
Subject: [Rd] Convenience Request: Add revision numbers to "What's New"
 change list
In-Reply-To: <CAL6gwnJAe9femxJ5GcxuTVD-KHSZ5TpcqSdimmDPXVnRaZ9Lpg@mail.gmail.com>
References: <CAL6gwnJAe9femxJ5GcxuTVD-KHSZ5TpcqSdimmDPXVnRaZ9Lpg@mail.gmail.com>
Message-ID: <e84053d4-7498-922f-bc3f-2b61e4462e0f@gmail.com>

On 19/07/2022 5:42 a.m., Avraham Adler wrote:
> Hello.
> 
> When deciding whether or not to update an R installation?either
> patched or devel?I think it would be valuable to see the revisions in
> which the updates/patches were applied. For those with linked PRs, if
> one has a Bugzilla account, one can often find the revision in the
> final note; however, not everyone has a Bugzilla account. This is a
> very minor request, of course, solely a quality-of-life issue, but I
> think it would be appreciated.

I think that would be hard; news entries often corresponds to multiple 
revisions as bugs are found and fixed. But there are ways to see what's 
happening.

One is to watch the daily report of changes to the NEWS file at

https://developer.r-project.org/RSSfeeds.html

(These are RSS feeds, but you can also just click on a version to view 
all changes on a web page.)

You can also use "svn blame" for this.  For example,

$ svn blame doc/NEWS.Rd | less

  72400    murdoch % -*- coding: utf-8 -*-
  72400    murdoch 
\newcommand{\Rlogo}{\if{html}{\figure{../../html/Rlogo.svg}{op
tions: class="toplogo" alt="[R 
logo]"}}\if{latex}{\figure{Rlogo.pdf}{options: wi
dth=0.5in}}}
  72400    murdoch
  72400    murdoch \name{NEWS}
  72400    murdoch \title{R News}
  72400    murdoch \encoding{UTF-8}
  72400    murdoch
  78213   maechler \section{\Rlogo CHANGES IN R-devel}{
  81992     ripley   \subsection{SIGNIFICANT USER-VISIBLE CHANGES}{
  81987     ripley     \itemize{
  82459     ripley       \item Calling \code{&&} or \code{||} with LHS 
or (if evaluated) RHS of
  82459     ripley       length greater than one is now always an error, 
with a report of
  82459     ripley       the form
  82445     ripley \preformatted{    'length = 4' in coercion to 
'logical(1)'}
  82265     ripley
  82445     ripley       Environment variable 
\env{_R_CHECK_LENGTH_1_LOGIC2_} no longer has
  82445     ripley       any effect.

This shows that the news item for the top entry "Calling \code{&&} or 
\code{||} with LHS or  ..." was most recently edited in r82459, with an 
earlier edit in r82445.  I'd guess the latter rev is the one you want; 
here's what the log shows for it:

$ svn log -v -r82445
------------------------------------------------------------------------
r82445 | ripley | 2022-06-02 05:56:18 -0400 (Thu, 02 Jun 2022) | 1 line
Changed paths:
    M /trunk/doc/NEWS.Rd
    M /trunk/doc/manual/R-ints.texi
    M /trunk/src/include/Defn.h
    M /trunk/src/main/coerce.c
    M /trunk/src/main/errors.c
    M /trunk/src/main/eval.c
    M /trunk/src/main/logic.c
    M /trunk/tests/reg-tests-1d.R

remove _R_CHECK_LENGTH_1_LOGIC2_

but it also shows that it is often the case that changes are made in 
multiple steps.

Duncan Murdoch


From o||v|er@benz @end|ng |rom b-d@t@@ch  Tue Jul 19 13:04:50 2022
From: o||v|er@benz @end|ng |rom b-d@t@@ch (Olivier Benz)
Date: Tue, 19 Jul 2022 11:04:50 +0000
Subject: [Rd] Floating point issue
In-Reply-To: <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
Message-ID: <0EF5EAF5-B6ED-440E-AB35-C0220EA41B62@b-data.ch>

The difference between macOS 12.4 and Debian 11 (Docker, virtualization framework) running on a MacBook Pro (M1 Max).
-> `.Machine$sizeof.longdouble` on macOS returns 8 whereas on Debian 11 it returns 16.

macOS 12.4 on MacBook Pro (M1 Max):
``` r
.Machine
#> $double.eps
#> [1] 2.220446e-16
#> 
#> $double.neg.eps
#> [1] 1.110223e-16
#> 
#> $double.xmin
#> [1] 2.225074e-308
#> 
#> $double.xmax
#> [1] 1.797693e+308
#> 
#> $double.base
#> [1] 2
#> 
#> $double.digits
#> [1] 53
#> 
#> $double.rounding
#> [1] 5
#> 
#> $double.guard
#> [1] 0
#> 
#> $double.ulp.digits
#> [1] -52
#> 
#> $double.neg.ulp.digits
#> [1] -53
#> 
#> $double.exponent
#> [1] 11
#> 
#> $double.min.exp
#> [1] -1022
#> 
#> $double.max.exp
#> [1] 1024
#> 
#> $integer.max
#> [1] 2147483647
#> 
#> $sizeof.long
#> [1] 8
#> 
#> $sizeof.longlong
#> [1] 8
#> 
#> $sizeof.longdouble
#> [1] 8
#> 
#> $sizeof.pointer
#> [1] 8

bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
double
  b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
      paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
    }, ""))
bitC(10^25)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
bitC(10000000000000000905969664)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
bitC(10000000000000000905969664 - 10^25)
#> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
bitC(1e25)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
```

<sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>

<details style="margin-bottom:10px;">
<summary>
Session info
</summary>

``` r
sessioninfo::session_info()
#> ? Session info ???????????????????????????????????????????????????????????????
#>  setting  value
#>  version  R version 4.2.1 (2022-06-23)
#>  os       macOS Monterey 12.4
#>  system   aarch64, darwin20
#>  ui       X11
#>  language (EN)
#>  collate  en_US.UTF-8
#>  ctype    UTF-8
#>  tz       Europe/Copenhagen
#>  date     2022-07-19
#>  pandoc   2.18 @ /opt/local/bin/ (via rmarkdown)
#> 
#> ? Packages ???????????????????????????????????????????????????????????????????
#>  package     * version date (UTC) lib source
#>  cli           3.3.0   2022-04-25 [1] CRAN (R 4.2.0)
#>  digest        0.6.29  2021-12-01 [1] CRAN (R 4.2.0)
#>  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.2.0)
#>  evaluate      0.15    2022-02-18 [1] CRAN (R 4.2.0)
#>  fansi         1.0.3   2022-03-24 [1] CRAN (R 4.2.0)
#>  fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)
#>  fs            1.5.2   2021-12-08 [1] CRAN (R 4.2.0)
#>  glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)
#>  highr         0.9     2021-04-16 [1] CRAN (R 4.2.0)
#>  htmltools     0.5.3   2022-07-18 [1] CRAN (R 4.2.1)
#>  knitr         1.39    2022-04-26 [1] CRAN (R 4.2.0)
#>  lifecycle     1.0.1   2021-09-24 [1] CRAN (R 4.2.0)
#>  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)
#>  pillar        1.8.0   2022-07-18 [1] CRAN (R 4.2.1)
#>  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)
#>  purrr         0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
#>  R.cache       0.15.0  2021-04-30 [1] CRAN (R 4.2.0)
#>  R.methodsS3   1.8.2   2022-06-13 [1] CRAN (R 4.2.0)
#>  R.oo          1.25.0  2022-06-12 [1] CRAN (R 4.2.0)
#>  R.utils       2.12.0  2022-06-28 [1] CRAN (R 4.2.0)
#>  reprex        2.0.1   2021-08-05 [1] CRAN (R 4.2.0)
#>  rlang         1.0.4   2022-07-12 [1] CRAN (R 4.2.1)
#>  rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)
#>  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)
#>  stringi       1.7.8   2022-07-11 [1] CRAN (R 4.2.1)
#>  stringr       1.4.0   2019-02-10 [1] CRAN (R 4.2.0)
#>  styler        1.7.0   2022-03-13 [1] CRAN (R 4.2.0)
#>  tibble        3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
#>  utf8          1.2.2   2021-07-24 [1] CRAN (R 4.2.0)
#>  vctrs         0.4.1   2022-04-13 [1] CRAN (R 4.2.0)
#>  withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.0)
#>  xfun          0.31    2022-05-10 [1] CRAN (R 4.2.0)
#>  yaml          2.3.5   2022-02-21 [1] CRAN (R 4.2.0)
#> 
#>  [1] /Users/benz0li/Library/R/arm64/4.2/library
#>  [2] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library
#> 
#> ??????????????????????????????????????????????????????????????????????????????
```

</details>

Debian 11 (Docker, virtualization framework) on MacBook Pro (M1 Max)
``` r
.Machine
#> $double.eps
#> [1] 2.220446e-16
#> 
#> $double.neg.eps
#> [1] 1.110223e-16
#> 
#> $double.xmin
#> [1] 2.225074e-308
#> 
#> $double.xmax
#> [1] 1.797693e+308
#> 
#> $double.base
#> [1] 2
#> 
#> $double.digits
#> [1] 53
#> 
#> $double.rounding
#> [1] 5
#> 
#> $double.guard
#> [1] 0
#> 
#> $double.ulp.digits
#> [1] -52
#> 
#> $double.neg.ulp.digits
#> [1] -53
#> 
#> $double.exponent
#> [1] 11
#> 
#> $double.min.exp
#> [1] -1022
#> 
#> $double.max.exp
#> [1] 1024
#> 
#> $integer.max
#> [1] 2147483647
#> 
#> $sizeof.long
#> [1] 8
#> 
#> $sizeof.longlong
#> [1] 8
#> 
#> $sizeof.longdouble
#> [1] 16
#> 
#> $sizeof.pointer
#> [1] 8
#> 
#> $longdouble.eps
#> [1] 1.92593e-34
#> 
#> $longdouble.neg.eps
#> [1] 9.62965e-35
#> 
#> $longdouble.digits
#> [1] 113
#> 
#> $longdouble.rounding
#> [1] 5
#> 
#> $longdouble.guard
#> [1] 0
#> 
#> $longdouble.ulp.digits
#> [1] -112
#> 
#> $longdouble.neg.ulp.digits
#> [1] -113
#> 
#> $longdouble.exponent
#> [1] 15
#> 
#> $longdouble.min.exp
#> [1] -16382
#> 
#> $longdouble.max.exp
#> [1] 16384

bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
double
  b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
      paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
    }, ""))
bitC(10^25)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
bitC(10000000000000000905969664)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
bitC(10000000000000000905969664 - 10^25)
#> [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
bitC(1e25)
#> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
```

<sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>

<details style="margin-bottom:10px;">
<summary>
Session info
</summary>

``` r
sessioninfo::session_info()
#> ? Session info ???????????????????????????????????????????????????????????????
#>  setting  value
#>  version  R version 4.2.1 (2022-06-23)
#>  os       Debian GNU/Linux 11 (bullseye)
#>  system   aarch64, linux-gnu
#>  ui       X11
#>  language (EN)
#>  collate  en_US.UTF-8
#>  ctype    en_US.UTF-8
#>  tz       Etc/UTC
#>  date     2022-07-19
#>  pandoc   2.18 @ /usr/bin/ (via rmarkdown)
#> 
#> ? Packages ???????????????????????????????????????????????????????????????????
#>  package     * version date (UTC) lib source
#>  cli           3.3.0   2022-04-25 [2] CRAN (R 4.2.1)
#>  crayon        1.5.1   2022-03-26 [2] CRAN (R 4.2.1)
#>  digest        0.6.29  2021-12-01 [2] CRAN (R 4.2.1)
#>  ellipsis      0.3.2   2021-04-29 [2] CRAN (R 4.2.1)
#>  evaluate      0.15    2022-02-18 [2] CRAN (R 4.2.1)
#>  fansi         1.0.3   2022-03-24 [2] CRAN (R 4.2.1)
#>  fastmap       1.1.0   2021-01-25 [2] CRAN (R 4.2.1)
#>  fs            1.5.2   2021-12-08 [2] CRAN (R 4.2.1)
#>  glue          1.6.2   2022-02-24 [2] CRAN (R 4.2.1)
#>  highr         0.9     2021-04-16 [2] CRAN (R 4.2.1)
#>  htmltools     0.5.2   2021-08-25 [2] CRAN (R 4.2.1)
#>  knitr         1.39    2022-04-26 [2] CRAN (R 4.2.1)
#>  lifecycle     1.0.1   2021-09-24 [2] CRAN (R 4.2.1)
#>  magrittr      2.0.3   2022-03-30 [2] CRAN (R 4.2.1)
#>  pillar        1.7.0   2022-02-01 [2] CRAN (R 4.2.1)
#>  pkgconfig     2.0.3   2019-09-22 [2] CRAN (R 4.2.1)
#>  purrr         0.3.4   2020-04-17 [2] CRAN (R 4.2.1)
#>  R.cache       0.15.0  2021-04-30 [2] CRAN (R 4.2.1)
#>  R.methodsS3   1.8.2   2022-06-13 [2] CRAN (R 4.2.1)
#>  R.oo          1.25.0  2022-06-12 [2] CRAN (R 4.2.1)
#>  R.utils       2.12.0  2022-06-28 [2] CRAN (R 4.2.1)
#>  reprex        2.0.1   2021-08-05 [2] CRAN (R 4.2.1)
#>  rlang         1.0.4   2022-07-12 [2] CRAN (R 4.2.1)
#>  rmarkdown     2.14    2022-04-25 [2] CRAN (R 4.2.1)
#>  sessioninfo   1.2.2   2021-12-06 [2] CRAN (R 4.2.1)
#>  stringi       1.7.8   2022-07-11 [2] CRAN (R 4.2.1)
#>  stringr       1.4.0   2019-02-10 [2] CRAN (R 4.2.1)
#>  styler        1.7.0   2022-03-13 [2] CRAN (R 4.2.1)
#>  tibble        3.1.7   2022-05-03 [2] CRAN (R 4.2.1)
#>  utf8          1.2.2   2021-07-24 [2] CRAN (R 4.2.1)
#>  vctrs         0.4.1   2022-04-13 [2] CRAN (R 4.2.1)
#>  withr         2.5.0   2022-03-03 [2] CRAN (R 4.2.1)
#>  xfun          0.31    2022-05-10 [2] CRAN (R 4.2.1)
#>  yaml          2.3.5   2022-02-21 [2] CRAN (R 4.2.1)
#> 
#>  [1] /home/benz0li/R/aarch64-unknown-linux-gnu-library/4.2
#>  [2] /usr/local/lib/R/site-library
#>  [3] /usr/local/lib/R/library
#> 
#> ??????????????????????????????????????????????????????????????????????????????
```

</details>

> On 10 Jul 2022, at 22:23, Bill Dunlap <williamwdunlap at gmail.com> wrote:
> 
> The following function, 'bitC' from ?numToBits, displays the bits in a
> double precision number, separated into the sign bit, the 11 exponent bits,
> and the 52 bits in the mantissa.  I've shown the results with your numbers
> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
> 
>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
> one double
> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
> +   }, ""))
>> bitC(10^25)
> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> bitC(10000000000000000905969664)
> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> bitC(10000000000000000905969664 - 10^25)
> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>> bitC(1e25)
> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> 
> -Bill
> 
> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
> wrote:
> 
>> Dear r-devel,
>> 
>> For some numbers, the printed value is not equivalent to the input :
>> 
>> options(scipen = 999)
>> ## GOOD
>> 1e24
>> #> [1]  999999999999999983222784
>> 1e24 == 999999999999999983222784
>> #> [1] TRUE
>> 
>> ## BAD
>> 1e25
>> #> [1] 10000000000000000905969664
>> 1e25 == 10000000000000000905969664
>> #> [1] FALSE
>> 
>> ## STILL BAD
>> 10000000000000000905969664
>> #> [1] 10000000000000003053453312
>> 
>> ## GOOD AGAIN
>> 10000000000000003053453312
>> #> [1] 10000000000000003053453312
>> 
>> # Additionally
>> 10000000000000000000000000 == 1e25
>> #> [1] FALSE
>> 
>> Are these bugs ?
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--
benz0li.b-data.io | @benz0li | olivier.benz at b-data.ch


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Tue Jul 19 14:22:36 2022
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Tue, 19 Jul 2022 14:22:36 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <0EF5EAF5-B6ED-440E-AB35-C0220EA41B62@b-data.ch>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <0EF5EAF5-B6ED-440E-AB35-C0220EA41B62@b-data.ch>
Message-ID: <D58BFD37-0DB3-4196-8399-C02F80A9EB95@uzh.ch>

Just a quick note of this in case someone finds Olivier's results puzzling. Standard ARM64 ABI (which Linux follows) defines long double as a 16-byte extended precision type. LLVM?s compiler-rt has a software implementation for doing operations on such types. Apple instead defines long double as identical to double in their ABIs. 

References

https://developer.arm.com/documentation/ka004751/1-0

https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms




> On 19 Jul 2022, at 13:04, Olivier Benz <olivier.benz at b-data.ch> wrote:
> 
> The difference between macOS 12.4 and Debian 11 (Docker, virtualization framework) running on a MacBook Pro (M1 Max).
> -> `.Machine$sizeof.longdouble` on macOS returns 8 whereas on Debian 11 it returns 16.
> 
> macOS 12.4 on MacBook Pro (M1 Max):
> ``` r
> .Machine
> #> $double.eps
> #> [1] 2.220446e-16
> #> 
> #> $double.neg.eps
> #> [1] 1.110223e-16
> #> 
> #> $double.xmin
> #> [1] 2.225074e-308
> #> 
> #> $double.xmax
> #> [1] 1.797693e+308
> #> 
> #> $double.base
> #> [1] 2
> #> 
> #> $double.digits
> #> [1] 53
> #> 
> #> $double.rounding
> #> [1] 5
> #> 
> #> $double.guard
> #> [1] 0
> #> 
> #> $double.ulp.digits
> #> [1] -52
> #> 
> #> $double.neg.ulp.digits
> #> [1] -53
> #> 
> #> $double.exponent
> #> [1] 11
> #> 
> #> $double.min.exp
> #> [1] -1022
> #> 
> #> $double.max.exp
> #> [1] 1024
> #> 
> #> $integer.max
> #> [1] 2147483647
> #> 
> #> $sizeof.long
> #> [1] 8
> #> 
> #> $sizeof.longlong
> #> [1] 8
> #> 
> #> $sizeof.longdouble
> #> [1] 8
> #> 
> #> $sizeof.pointer
> #> [1] 8
> 
> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
> double
>  b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>      paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>    }, ""))
> bitC(10^25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
> bitC(10000000000000000905969664 - 10^25)
> #> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
> bitC(1e25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> ```
> 
> <sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>
> 
> <details style="margin-bottom:10px;">
> <summary>
> Session info
> </summary>
> 
> ``` r
> sessioninfo::session_info()
> #> ? Session info ???????????????????????????????????????????????????????????????
> #>  setting  value
> #>  version  R version 4.2.1 (2022-06-23)
> #>  os       macOS Monterey 12.4
> #>  system   aarch64, darwin20
> #>  ui       X11
> #>  language (EN)
> #>  collate  en_US.UTF-8
> #>  ctype    UTF-8
> #>  tz       Europe/Copenhagen
> #>  date     2022-07-19
> #>  pandoc   2.18 @ /opt/local/bin/ (via rmarkdown)
> #> 
> #> ? Packages ???????????????????????????????????????????????????????????????????
> #>  package     * version date (UTC) lib source
> #>  cli           3.3.0   2022-04-25 [1] CRAN (R 4.2.0)
> #>  digest        0.6.29  2021-12-01 [1] CRAN (R 4.2.0)
> #>  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.2.0)
> #>  evaluate      0.15    2022-02-18 [1] CRAN (R 4.2.0)
> #>  fansi         1.0.3   2022-03-24 [1] CRAN (R 4.2.0)
> #>  fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)
> #>  fs            1.5.2   2021-12-08 [1] CRAN (R 4.2.0)
> #>  glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)
> #>  highr         0.9     2021-04-16 [1] CRAN (R 4.2.0)
> #>  htmltools     0.5.3   2022-07-18 [1] CRAN (R 4.2.1)
> #>  knitr         1.39    2022-04-26 [1] CRAN (R 4.2.0)
> #>  lifecycle     1.0.1   2021-09-24 [1] CRAN (R 4.2.0)
> #>  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)
> #>  pillar        1.8.0   2022-07-18 [1] CRAN (R 4.2.1)
> #>  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)
> #>  purrr         0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
> #>  R.cache       0.15.0  2021-04-30 [1] CRAN (R 4.2.0)
> #>  R.methodsS3   1.8.2   2022-06-13 [1] CRAN (R 4.2.0)
> #>  R.oo          1.25.0  2022-06-12 [1] CRAN (R 4.2.0)
> #>  R.utils       2.12.0  2022-06-28 [1] CRAN (R 4.2.0)
> #>  reprex        2.0.1   2021-08-05 [1] CRAN (R 4.2.0)
> #>  rlang         1.0.4   2022-07-12 [1] CRAN (R 4.2.1)
> #>  rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)
> #>  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)
> #>  stringi       1.7.8   2022-07-11 [1] CRAN (R 4.2.1)
> #>  stringr       1.4.0   2019-02-10 [1] CRAN (R 4.2.0)
> #>  styler        1.7.0   2022-03-13 [1] CRAN (R 4.2.0)
> #>  tibble        3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
> #>  utf8          1.2.2   2021-07-24 [1] CRAN (R 4.2.0)
> #>  vctrs         0.4.1   2022-04-13 [1] CRAN (R 4.2.0)
> #>  withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.0)
> #>  xfun          0.31    2022-05-10 [1] CRAN (R 4.2.0)
> #>  yaml          2.3.5   2022-02-21 [1] CRAN (R 4.2.0)
> #> 
> #>  [1] /Users/benz0li/Library/R/arm64/4.2/library
> #>  [2] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library
> #> 
> #> ??????????????????????????????????????????????????????????????????????????????
> ```
> 
> </details>
> 
> Debian 11 (Docker, virtualization framework) on MacBook Pro (M1 Max)
> ``` r
> .Machine
> #> $double.eps
> #> [1] 2.220446e-16
> #> 
> #> $double.neg.eps
> #> [1] 1.110223e-16
> #> 
> #> $double.xmin
> #> [1] 2.225074e-308
> #> 
> #> $double.xmax
> #> [1] 1.797693e+308
> #> 
> #> $double.base
> #> [1] 2
> #> 
> #> $double.digits
> #> [1] 53
> #> 
> #> $double.rounding
> #> [1] 5
> #> 
> #> $double.guard
> #> [1] 0
> #> 
> #> $double.ulp.digits
> #> [1] -52
> #> 
> #> $double.neg.ulp.digits
> #> [1] -53
> #> 
> #> $double.exponent
> #> [1] 11
> #> 
> #> $double.min.exp
> #> [1] -1022
> #> 
> #> $double.max.exp
> #> [1] 1024
> #> 
> #> $integer.max
> #> [1] 2147483647
> #> 
> #> $sizeof.long
> #> [1] 8
> #> 
> #> $sizeof.longlong
> #> [1] 8
> #> 
> #> $sizeof.longdouble
> #> [1] 16
> #> 
> #> $sizeof.pointer
> #> [1] 8
> #> 
> #> $longdouble.eps
> #> [1] 1.92593e-34
> #> 
> #> $longdouble.neg.eps
> #> [1] 9.62965e-35
> #> 
> #> $longdouble.digits
> #> [1] 113
> #> 
> #> $longdouble.rounding
> #> [1] 5
> #> 
> #> $longdouble.guard
> #> [1] 0
> #> 
> #> $longdouble.ulp.digits
> #> [1] -112
> #> 
> #> $longdouble.neg.ulp.digits
> #> [1] -113
> #> 
> #> $longdouble.exponent
> #> [1] 15
> #> 
> #> $longdouble.min.exp
> #> [1] -16382
> #> 
> #> $longdouble.max.exp
> #> [1] 16384
> 
> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
> double
>  b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>      paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>    }, ""))
> bitC(10^25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> bitC(10000000000000000905969664 - 10^25)
> #> [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
> bitC(1e25)
> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
> ```
> 
> <sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>
> 
> <details style="margin-bottom:10px;">
> <summary>
> Session info
> </summary>
> 
> ``` r
> sessioninfo::session_info()
> #> ? Session info ???????????????????????????????????????????????????????????????
> #>  setting  value
> #>  version  R version 4.2.1 (2022-06-23)
> #>  os       Debian GNU/Linux 11 (bullseye)
> #>  system   aarch64, linux-gnu
> #>  ui       X11
> #>  language (EN)
> #>  collate  en_US.UTF-8
> #>  ctype    en_US.UTF-8
> #>  tz       Etc/UTC
> #>  date     2022-07-19
> #>  pandoc   2.18 @ /usr/bin/ (via rmarkdown)
> #> 
> #> ? Packages ???????????????????????????????????????????????????????????????????
> #>  package     * version date (UTC) lib source
> #>  cli           3.3.0   2022-04-25 [2] CRAN (R 4.2.1)
> #>  crayon        1.5.1   2022-03-26 [2] CRAN (R 4.2.1)
> #>  digest        0.6.29  2021-12-01 [2] CRAN (R 4.2.1)
> #>  ellipsis      0.3.2   2021-04-29 [2] CRAN (R 4.2.1)
> #>  evaluate      0.15    2022-02-18 [2] CRAN (R 4.2.1)
> #>  fansi         1.0.3   2022-03-24 [2] CRAN (R 4.2.1)
> #>  fastmap       1.1.0   2021-01-25 [2] CRAN (R 4.2.1)
> #>  fs            1.5.2   2021-12-08 [2] CRAN (R 4.2.1)
> #>  glue          1.6.2   2022-02-24 [2] CRAN (R 4.2.1)
> #>  highr         0.9     2021-04-16 [2] CRAN (R 4.2.1)
> #>  htmltools     0.5.2   2021-08-25 [2] CRAN (R 4.2.1)
> #>  knitr         1.39    2022-04-26 [2] CRAN (R 4.2.1)
> #>  lifecycle     1.0.1   2021-09-24 [2] CRAN (R 4.2.1)
> #>  magrittr      2.0.3   2022-03-30 [2] CRAN (R 4.2.1)
> #>  pillar        1.7.0   2022-02-01 [2] CRAN (R 4.2.1)
> #>  pkgconfig     2.0.3   2019-09-22 [2] CRAN (R 4.2.1)
> #>  purrr         0.3.4   2020-04-17 [2] CRAN (R 4.2.1)
> #>  R.cache       0.15.0  2021-04-30 [2] CRAN (R 4.2.1)
> #>  R.methodsS3   1.8.2   2022-06-13 [2] CRAN (R 4.2.1)
> #>  R.oo          1.25.0  2022-06-12 [2] CRAN (R 4.2.1)
> #>  R.utils       2.12.0  2022-06-28 [2] CRAN (R 4.2.1)
> #>  reprex        2.0.1   2021-08-05 [2] CRAN (R 4.2.1)
> #>  rlang         1.0.4   2022-07-12 [2] CRAN (R 4.2.1)
> #>  rmarkdown     2.14    2022-04-25 [2] CRAN (R 4.2.1)
> #>  sessioninfo   1.2.2   2021-12-06 [2] CRAN (R 4.2.1)
> #>  stringi       1.7.8   2022-07-11 [2] CRAN (R 4.2.1)
> #>  stringr       1.4.0   2019-02-10 [2] CRAN (R 4.2.1)
> #>  styler        1.7.0   2022-03-13 [2] CRAN (R 4.2.1)
> #>  tibble        3.1.7   2022-05-03 [2] CRAN (R 4.2.1)
> #>  utf8          1.2.2   2021-07-24 [2] CRAN (R 4.2.1)
> #>  vctrs         0.4.1   2022-04-13 [2] CRAN (R 4.2.1)
> #>  withr         2.5.0   2022-03-03 [2] CRAN (R 4.2.1)
> #>  xfun          0.31    2022-05-10 [2] CRAN (R 4.2.1)
> #>  yaml          2.3.5   2022-02-21 [2] CRAN (R 4.2.1)
> #> 
> #>  [1] /home/benz0li/R/aarch64-unknown-linux-gnu-library/4.2
> #>  [2] /usr/local/lib/R/site-library
> #>  [3] /usr/local/lib/R/library
> #> 
> #> ??????????????????????????????????????????????????????????????????????????????
> ```
> 
> </details>
> 
>> On 10 Jul 2022, at 22:23, Bill Dunlap <williamwdunlap at gmail.com> wrote:
>> 
>> The following function, 'bitC' from ?numToBits, displays the bits in a
>> double precision number, separated into the sign bit, the 11 exponent bits,
>> and the 52 bits in the mantissa.  I've shown the results with your numbers
>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>> 
>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>> one double
>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>> +   }, ""))
>>> bitC(10^25)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664 - 10^25)
>> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>>> bitC(1e25)
>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> 
>> -Bill
>> 
>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
>> wrote:
>> 
>>> Dear r-devel,
>>> 
>>> For some numbers, the printed value is not equivalent to the input :
>>> 
>>> options(scipen = 999)
>>> ## GOOD
>>> 1e24
>>> #> [1]  999999999999999983222784
>>> 1e24 == 999999999999999983222784
>>> #> [1] TRUE
>>> 
>>> ## BAD
>>> 1e25
>>> #> [1] 10000000000000000905969664
>>> 1e25 == 10000000000000000905969664
>>> #> [1] FALSE
>>> 
>>> ## STILL BAD
>>> 10000000000000000905969664
>>> #> [1] 10000000000000003053453312
>>> 
>>> ## GOOD AGAIN
>>> 10000000000000003053453312
>>> #> [1] 10000000000000003053453312
>>> 
>>> # Additionally
>>> 10000000000000000000000000 == 1e25
>>> #> [1] FALSE
>>> 
>>> Are these bugs ?
>>> 
>>>       [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> --
> benz0li.b-data.io | @benz0li | olivier.benz at b-data.ch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Tue Jul 19 16:33:21 2022
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Tue, 19 Jul 2022 16:33:21 +0200
Subject: [Rd] Floating point issue
In-Reply-To: <2851B1F9-1587-400D-B2F8-63F0C6A7992B@b-data.ch>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <0EF5EAF5-B6ED-440E-AB35-C0220EA41B62@b-data.ch>
 <D58BFD37-0DB3-4196-8399-C02F80A9EB95@uzh.ch>
 <2851B1F9-1587-400D-B2F8-63F0C6A7992B@b-data.ch>
Message-ID: <6FDFBEEF-AAAD-4F6A-A54E-A122A4F65174@uzh.ch>

> So in this case, the different results are not due to the architecture (M1 aka ARM64) but to the system/implementation.

I would say that your results demonstrate that R number parsing code relies on higher-than double precision to perform correct number parsing. Extended precision is not guaranteed by the C standard, so I would classify this as a bug in R. Unless of course R doesn?t want to make any  number parsing guarantees, but that would be an odd choice to make :)

Cheers, 

Taras 

> On 19 Jul 2022, at 14:59, Olivier Benz <olivier.benz at b-data.ch> wrote:
> 
> I found that quite puzzling indeed. Thanks for the references.
> 
> So in this case, the different results are not due to the architecture (M1 aka ARM64) but to the system/implementation.
> 
>> On 19 Jul 2022, at 14:22, Taras Zakharko <taras.zakharko at uzh.ch <mailto:taras.zakharko at uzh.ch>> wrote:
>> 
>> Just a quick note of this in case someone finds Olivier's results puzzling. Standard ARM64 ABI (which Linux follows) defines long double as a 16-byte extended precision type. LLVM?s compiler-rt has a software implementation for doing operations on such types. Apple instead defines long double as identical to double in their ABIs. 
>> 
>> References
>> 
>> https://developer.arm.com/documentation/ka004751/1-0
>> 
>> https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms
>> 
>> 
>> 
>> 
>>> On 19 Jul 2022, at 13:04, Olivier Benz <olivier.benz at b-data.ch> wrote:
>>> 
>>> The difference between macOS 12.4 and Debian 11 (Docker, virtualization framework) running on a MacBook Pro (M1 Max).
>>> -> `.Machine$sizeof.longdouble` on macOS returns 8 whereas on Debian 11 it returns 16.
>>> 
>>> macOS 12.4 on MacBook Pro (M1 Max):
>>> ``` r
>>> .Machine
>>> #> $double.eps
>>> #> [1] 2.220446e-16
>>> #> 
>>> #> $double.neg.eps
>>> #> [1] 1.110223e-16
>>> #> 
>>> #> $double.xmin
>>> #> [1] 2.225074e-308
>>> #> 
>>> #> $double.xmax
>>> #> [1] 1.797693e+308
>>> #> 
>>> #> $double.base
>>> #> [1] 2
>>> #> 
>>> #> $double.digits
>>> #> [1] 53
>>> #> 
>>> #> $double.rounding
>>> #> [1] 5
>>> #> 
>>> #> $double.guard
>>> #> [1] 0
>>> #> 
>>> #> $double.ulp.digits
>>> #> [1] -52
>>> #> 
>>> #> $double.neg.ulp.digits
>>> #> [1] -53
>>> #> 
>>> #> $double.exponent
>>> #> [1] 11
>>> #> 
>>> #> $double.min.exp
>>> #> [1] -1022
>>> #> 
>>> #> $double.max.exp
>>> #> [1] 1024
>>> #> 
>>> #> $integer.max
>>> #> [1] 2147483647
>>> #> 
>>> #> $sizeof.long
>>> #> [1] 8
>>> #> 
>>> #> $sizeof.longlong
>>> #> [1] 8
>>> #> 
>>> #> $sizeof.longdouble
>>> #> [1] 8
>>> #> 
>>> #> $sizeof.pointer
>>> #> [1] 8
>>> 
>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
>>> double
>>> b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>>    paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>>  }, ""))
>>> bitC(10^25)
>>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664)
>>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
>>> bitC(10000000000000000905969664 - 10^25)
>>> #> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
>>> bitC(1e25)
>>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> ```
>>> 
>>> <sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>
>>> 
>>> <details style="margin-bottom:10px;">
>>> <summary>
>>> Session info
>>> </summary>
>>> 
>>> ``` r
>>> sessioninfo::session_info()
>>> #> ? Session info ???????????????????????????????????????????????????????????????
>>> #>  setting  value
>>> #>  version  R version 4.2.1 (2022-06-23)
>>> #>  os       macOS Monterey 12.4
>>> #>  system   aarch64, darwin20
>>> #>  ui       X11
>>> #>  language (EN)
>>> #>  collate  en_US.UTF-8
>>> #>  ctype    UTF-8
>>> #>  tz       Europe/Copenhagen
>>> #>  date     2022-07-19
>>> #>  pandoc   2.18 @ /opt/local/bin/ (via rmarkdown)
>>> #> 
>>> #> ? Packages ???????????????????????????????????????????????????????????????????
>>> #>  package     * version date (UTC) lib source
>>> #>  cli           3.3.0   2022-04-25 [1] CRAN (R 4.2.0)
>>> #>  digest        0.6.29  2021-12-01 [1] CRAN (R 4.2.0)
>>> #>  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.2.0)
>>> #>  evaluate      0.15    2022-02-18 [1] CRAN (R 4.2.0)
>>> #>  fansi         1.0.3   2022-03-24 [1] CRAN (R 4.2.0)
>>> #>  fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)
>>> #>  fs            1.5.2   2021-12-08 [1] CRAN (R 4.2.0)
>>> #>  glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)
>>> #>  highr         0.9     2021-04-16 [1] CRAN (R 4.2.0)
>>> #>  htmltools     0.5.3   2022-07-18 [1] CRAN (R 4.2.1)
>>> #>  knitr         1.39    2022-04-26 [1] CRAN (R 4.2.0)
>>> #>  lifecycle     1.0.1   2021-09-24 [1] CRAN (R 4.2.0)
>>> #>  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)
>>> #>  pillar        1.8.0   2022-07-18 [1] CRAN (R 4.2.1)
>>> #>  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)
>>> #>  purrr         0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
>>> #>  R.cache       0.15.0  2021-04-30 [1] CRAN (R 4.2.0)
>>> #>  R.methodsS3   1.8.2   2022-06-13 [1] CRAN (R 4.2.0)
>>> #>  R.oo          1.25.0  2022-06-12 [1] CRAN (R 4.2.0)
>>> #>  R.utils       2.12.0  2022-06-28 [1] CRAN (R 4.2.0)
>>> #>  reprex        2.0.1   2021-08-05 [1] CRAN (R 4.2.0)
>>> #>  rlang         1.0.4   2022-07-12 [1] CRAN (R 4.2.1)
>>> #>  rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)
>>> #>  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)
>>> #>  stringi       1.7.8   2022-07-11 [1] CRAN (R 4.2.1)
>>> #>  stringr       1.4.0   2019-02-10 [1] CRAN (R 4.2.0)
>>> #>  styler        1.7.0   2022-03-13 [1] CRAN (R 4.2.0)
>>> #>  tibble        3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
>>> #>  utf8          1.2.2   2021-07-24 [1] CRAN (R 4.2.0)
>>> #>  vctrs         0.4.1   2022-04-13 [1] CRAN (R 4.2.0)
>>> #>  withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.0)
>>> #>  xfun          0.31    2022-05-10 [1] CRAN (R 4.2.0)
>>> #>  yaml          2.3.5   2022-02-21 [1] CRAN (R 4.2.0)
>>> #> 
>>> #>  [1] /Users/benz0li/Library/R/arm64/4.2/library
>>> #>  [2] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library
>>> #> 
>>> #> ??????????????????????????????????????????????????????????????????????????????
>>> ```
>>> 
>>> </details>
>>> 
>>> Debian 11 (Docker, virtualization framework) on MacBook Pro (M1 Max)
>>> ``` r
>>> .Machine
>>> #> $double.eps
>>> #> [1] 2.220446e-16
>>> #> 
>>> #> $double.neg.eps
>>> #> [1] 1.110223e-16
>>> #> 
>>> #> $double.xmin
>>> #> [1] 2.225074e-308
>>> #> 
>>> #> $double.xmax
>>> #> [1] 1.797693e+308
>>> #> 
>>> #> $double.base
>>> #> [1] 2
>>> #> 
>>> #> $double.digits
>>> #> [1] 53
>>> #> 
>>> #> $double.rounding
>>> #> [1] 5
>>> #> 
>>> #> $double.guard
>>> #> [1] 0
>>> #> 
>>> #> $double.ulp.digits
>>> #> [1] -52
>>> #> 
>>> #> $double.neg.ulp.digits
>>> #> [1] -53
>>> #> 
>>> #> $double.exponent
>>> #> [1] 11
>>> #> 
>>> #> $double.min.exp
>>> #> [1] -1022
>>> #> 
>>> #> $double.max.exp
>>> #> [1] 1024
>>> #> 
>>> #> $integer.max
>>> #> [1] 2147483647
>>> #> 
>>> #> $sizeof.long
>>> #> [1] 8
>>> #> 
>>> #> $sizeof.longlong
>>> #> [1] 8
>>> #> 
>>> #> $sizeof.longdouble
>>> #> [1] 16
>>> #> 
>>> #> $sizeof.pointer
>>> #> [1] 8
>>> #> 
>>> #> $longdouble.eps
>>> #> [1] 1.92593e-34
>>> #> 
>>> #> $longdouble.neg.eps
>>> #> [1] 9.62965e-35
>>> #> 
>>> #> $longdouble.digits
>>> #> [1] 113
>>> #> 
>>> #> $longdouble.rounding
>>> #> [1] 5
>>> #> 
>>> #> $longdouble.guard
>>> #> [1] 0
>>> #> 
>>> #> $longdouble.ulp.digits
>>> #> [1] -112
>>> #> 
>>> #> $longdouble.neg.ulp.digits
>>> #> [1] -113
>>> #> 
>>> #> $longdouble.exponent
>>> #> [1] 15
>>> #> 
>>> #> $longdouble.min.exp
>>> #> [1] -16382
>>> #> 
>>> #> $longdouble.max.exp
>>> #> [1] 16384
>>> 
>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
>>> double
>>> b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>>    paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>>  }, ""))
>>> bitC(10^25)
>>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664)
>>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> bitC(10000000000000000905969664 - 10^25)
>>> #> [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>>> bitC(1e25)
>>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> ```
>>> 
>>> <sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>
>>> 
>>> <details style="margin-bottom:10px;">
>>> <summary>
>>> Session info
>>> </summary>
>>> 
>>> ``` r
>>> sessioninfo::session_info()
>>> #> ? Session info ???????????????????????????????????????????????????????????????
>>> #>  setting  value
>>> #>  version  R version 4.2.1 (2022-06-23)
>>> #>  os       Debian GNU/Linux 11 (bullseye)
>>> #>  system   aarch64, linux-gnu
>>> #>  ui       X11
>>> #>  language (EN)
>>> #>  collate  en_US.UTF-8
>>> #>  ctype    en_US.UTF-8
>>> #>  tz       Etc/UTC
>>> #>  date     2022-07-19
>>> #>  pandoc   2.18 @ /usr/bin/ (via rmarkdown)
>>> #> 
>>> #> ? Packages ???????????????????????????????????????????????????????????????????
>>> #>  package     * version date (UTC) lib source
>>> #>  cli           3.3.0   2022-04-25 [2] CRAN (R 4.2.1)
>>> #>  crayon        1.5.1   2022-03-26 [2] CRAN (R 4.2.1)
>>> #>  digest        0.6.29  2021-12-01 [2] CRAN (R 4.2.1)
>>> #>  ellipsis      0.3.2   2021-04-29 [2] CRAN (R 4.2.1)
>>> #>  evaluate      0.15    2022-02-18 [2] CRAN (R 4.2.1)
>>> #>  fansi         1.0.3   2022-03-24 [2] CRAN (R 4.2.1)
>>> #>  fastmap       1.1.0   2021-01-25 [2] CRAN (R 4.2.1)
>>> #>  fs            1.5.2   2021-12-08 [2] CRAN (R 4.2.1)
>>> #>  glue          1.6.2   2022-02-24 [2] CRAN (R 4.2.1)
>>> #>  highr         0.9     2021-04-16 [2] CRAN (R 4.2.1)
>>> #>  htmltools     0.5.2   2021-08-25 [2] CRAN (R 4.2.1)
>>> #>  knitr         1.39    2022-04-26 [2] CRAN (R 4.2.1)
>>> #>  lifecycle     1.0.1   2021-09-24 [2] CRAN (R 4.2.1)
>>> #>  magrittr      2.0.3   2022-03-30 [2] CRAN (R 4.2.1)
>>> #>  pillar        1.7.0   2022-02-01 [2] CRAN (R 4.2.1)
>>> #>  pkgconfig     2.0.3   2019-09-22 [2] CRAN (R 4.2.1)
>>> #>  purrr         0.3.4   2020-04-17 [2] CRAN (R 4.2.1)
>>> #>  R.cache       0.15.0  2021-04-30 [2] CRAN (R 4.2.1)
>>> #>  R.methodsS3   1.8.2   2022-06-13 [2] CRAN (R 4.2.1)
>>> #>  R.oo          1.25.0  2022-06-12 [2] CRAN (R 4.2.1)
>>> #>  R.utils       2.12.0  2022-06-28 [2] CRAN (R 4.2.1)
>>> #>  reprex        2.0.1   2021-08-05 [2] CRAN (R 4.2.1)
>>> #>  rlang         1.0.4   2022-07-12 [2] CRAN (R 4.2.1)
>>> #>  rmarkdown     2.14    2022-04-25 [2] CRAN (R 4.2.1)
>>> #>  sessioninfo   1.2.2   2021-12-06 [2] CRAN (R 4.2.1)
>>> #>  stringi       1.7.8   2022-07-11 [2] CRAN (R 4.2.1)
>>> #>  stringr       1.4.0   2019-02-10 [2] CRAN (R 4.2.1)
>>> #>  styler        1.7.0   2022-03-13 [2] CRAN (R 4.2.1)
>>> #>  tibble        3.1.7   2022-05-03 [2] CRAN (R 4.2.1)
>>> #>  utf8          1.2.2   2021-07-24 [2] CRAN (R 4.2.1)
>>> #>  vctrs         0.4.1   2022-04-13 [2] CRAN (R 4.2.1)
>>> #>  withr         2.5.0   2022-03-03 [2] CRAN (R 4.2.1)
>>> #>  xfun          0.31    2022-05-10 [2] CRAN (R 4.2.1)
>>> #>  yaml          2.3.5   2022-02-21 [2] CRAN (R 4.2.1)
>>> #> 
>>> #>  [1] /home/benz0li/R/aarch64-unknown-linux-gnu-library/4.2
>>> #>  [2] /usr/local/lib/R/site-library
>>> #>  [3] /usr/local/lib/R/library
>>> #> 
>>> #> ??????????????????????????????????????????????????????????????????????????????
>>> ```
>>> 
>>> </details>
>>> 
>>>> On 10 Jul 2022, at 22:23, Bill Dunlap <williamwdunlap at gmail.com> wrote:
>>>> 
>>>> The following function, 'bitC' from ?numToBits, displays the bits in a
>>>> double precision number, separated into the sign bit, the 11 exponent bits,
>>>> and the 52 bits in the mantissa.  I've shown the results with your numbers
>>>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>>>> 
>>>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>>>> one double
>>>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>>> +   }, ""))
>>>>> bitC(10^25)
>>>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>>>> bitC(10000000000000000905969664)
>>>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>>>> bitC(10000000000000000905969664 - 10^25)
>>>> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>>>>> bitC(1e25)
>>>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>>> 
>>>> -Bill
>>>> 
>>>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
>>>> wrote:
>>>> 
>>>>> Dear r-devel,
>>>>> 
>>>>> For some numbers, the printed value is not equivalent to the input :
>>>>> 
>>>>> options(scipen = 999)
>>>>> ## GOOD
>>>>> 1e24
>>>>> #> [1]  999999999999999983222784
>>>>> 1e24 == 999999999999999983222784
>>>>> #> [1] TRUE
>>>>> 
>>>>> ## BAD
>>>>> 1e25
>>>>> #> [1] 10000000000000000905969664
>>>>> 1e25 == 10000000000000000905969664
>>>>> #> [1] FALSE
>>>>> 
>>>>> ## STILL BAD
>>>>> 10000000000000000905969664
>>>>> #> [1] 10000000000000003053453312
>>>>> 
>>>>> ## GOOD AGAIN
>>>>> 10000000000000003053453312
>>>>> #> [1] 10000000000000003053453312
>>>>> 
>>>>> # Additionally
>>>>> 10000000000000000000000000 == 1e25
>>>>> #> [1] FALSE
>>>>> 
>>>>> Are these bugs ?
>>>>> 
>>>>>     [[alternative HTML version deleted]]
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>> 
>>>> 	[[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> --
>>> benz0li.b-data.io | @benz0li | olivier.benz at b-data.ch
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> --
> benz0li.b-data.io <http://benz0li.b-data.io/> | @benz0li | olivier.benz at b-data.ch <mailto:olivier.benz at b-data.ch>

	[[alternative HTML version deleted]]


From ezr@ @end|ng |rom |@ndtucker@com  Tue Jul 19 17:01:29 2022
From: ezr@ @end|ng |rom |@ndtucker@com (Ezra Tucker)
Date: Tue, 19 Jul 2022 11:01:29 -0400
Subject: [Rd] Class union of custom classes
In-Reply-To: <001601d89052$032cb810$09862830$@gmail.com>
References: <003001d88ecc$6fa3fbc0$4eebf340$@gmail.com>
 <31d8cd9d3407a4e52f434b600e9a11b48fca8281.camel@landtucker.com>
 <001601d89052$032cb810$09862830$@gmail.com>
Message-ID: <f28c76da59adf3ec13f38ad8d2b50a8159f9c8ca.camel@landtucker.com>

Hi Pantelis,

When you inheriting from the "foobar" class, you drop any slots that
foo or bar may have had. Indeed, if you do

> getSlots("foobar")
# character(0)

The reason this doesn't work is because your .Data slot is gone when
you create withId.
A basic question I'd ask by doing this, what exactly is it that you're
expecting? And why is using setClassUnion in this way better or
different than just using multiple inheritance--

> setClass("withId", contains = c("foo", "bar"), slots = c(id =
"character"))
> new("withId", TRUE, id = "5")
An object of class "withId"
[1] TRUE
Slot "id":
[1] "5"

Also worth noting what happens when you make a foo object

> z <- new("foo", TRUE)
> is(z)
[1] "foo"     "logical" "foobar"  "vector" 
# this is what I get anyway

Though I'm no expert (one should chime in if this is wrong) all the
slot info for the "foo" class is stored with "foo"-- all "foobar" is
two things:

1. it'll allow you you to set a slot in some other s4 class to
"foobar", which will be valid for any "foo" or "bar" or anything that
inherits from "foobar" like withId-- since by setting the class union,
you're saying that foo and bar inherit from foobar
2. it'll allow you to define methods with "foobar" in the signature,
which it'll dispatch for foo, bar, or withId

BUT, again, it doesn't actually contain foo's or bar's slots. I don't
think this is a bug, I think this is how setClassUnion works and is
supposed to work.

For Test 6, same problem as test 5. The slots now are just logical
called x, but again, there's no slots when you inherit from a
classUnion.

Test 7 is the same as test 5, just explicitly calling out the .Data
slot instead of just saying it inherits from logical. Super
interestingly, you can do some ops with these objects like

> new("foo", TRUE) | new("bar", FALSE)
[1] TRUE

There must be some default ops methods somewhere for classes that have
a .Data slot, but this behavior is totally new to me. I don't think I'd
recommend doing it intentionally though...

To recap it's not "tricking" setClassUnion into thinking there are real
slots-- when you inherit from a classUnion you'll be able to dispatch
any of its methods, but you don't get any slots from the "members" that
comprise that class union.

-Ezra

On Tue, 2022-07-05 at 11:31 +0200, pikappa.devel at gmail.com wrote:
> Hi Ezra,
> 
> thanks, this was very helpful! Your answer got me thinking, and I
> have tried a couple of more approaches. I thought it would be good to
> document them here in case someone stumbles on this issue in the
> future.
> 
> 
> I have tried to define classes with combatible initializers:
> 
> > # test 5
> + setClass("foo", contains = "logical")
> + setClass("bar", contains = "logical")
> + setClassUnion("foobar", c("foo", "bar"))
> + setClass("withId", contains = "foobar", slots = c(id =
> "character"))
> + w1 <- new("withId", new("foo", TRUE), id = "test 5")
> > Error in initialize(value, ...) : 
> ? 'initialize' method returned an object of class ?foo? instead of
> the required class ?withId?
> 
> > # test 6
> + setClass("foo", slots = list(x = "logical"))
> + setClass("bar", slots = list(x = "logical"))
> + setClassUnion("foobar", c("foo", "bar"))
> + setClass("withId", contains = "foobar", slots = c(id =
> "character"))
> + w1 <- new("withId", new("foo", x = TRUE), id = "test 6")
> > > Error in initialize(value, ...) : 
> ? 'initialize' method returned an object of class ?foo? instead of
> the required class ?withId?
> 
> I have also tried to "trick" setClassUnion by naming members of foo
> and bar .Data:
> 
> > # test 7
> + setClass("foo", slots = list(.Data = "logical"))
> + setClass("bar", slots = list(.Data = "logical"))
> + setClassUnion("foobar", c("foo", "bar"))
> + setClass("withId", contains = "foobar", slots = c(id =
> "character"))
> + w1 <- new("withId", new("foo", .Data = TRUE), id = "test 7")
> Error in initialize(value, ...) : 
> ? 'initialize' method returned an object of class ?foo? instead of
> the required class ?withId?
> 
> The approach you proposed is the only one that works, but with a
> catch. The withId class will not have access to foo methods, and
> wrappers are additionally needed to imitate inheritance. If foo has
> only a few methods, this approach is maintainable. For now, this is
> the approach I will follow in the real problem I am dealing with. 
> 
> Kind Regards,
> Pantelis
> 
> -----Original Message-----
> From: Ezra Tucker <ezra at landtucker.com> 
> Sent: Sunday, July 3, 2022 7:57 PM
> To: pikappa.devel at gmail.com; r-devel at r-project.org
> Subject: Re: [Rd] Class union of custom classes
> 
> Hi Pantelis,
> 
> What usually helps me in these kinds of puzzles is splitting out
> (mentally) the s4 part from the s3 part. The first test you mention,
> using the class "withId" has an s3 part of a "maybeNumber" (numeric
> or
> logical) and an s4 part of a slot "id". Kind of hidden will be a
> second slot, ".Data" which contains the s3 data --The w1 value you
> get is essentially a numeric, and will be subject to numeric methods
> (ie you could do w1 + 2) and it'll add 2 to all of the values in the
> .Data slot.
> 
> Test 2:
> part of the reason setClassUnion works in Test 1 is because the
> member classes of withID have the same slots-- both of them are
> .Data.
> However, the definition of "foo" in this test has one slot, xb, which
> is logical, and no .Data slot/no s3 part. foo and withId have
> incompatable initializers (the "initialize" method for their
> respective classes so that's why you're seeing this error.
> 
> Test 3:
> In general, I'd probably avoid using setIs, as it sets an explicit
> relationship between two classes, whether or not it's logical to do
> so.
> While the initializer for "maybeNumber" ought to complete, because of
> the issues raised above about Test 2, it'll prevent the object from
> being created.
> 
> Test 4:
> This one's tricky. A revealing question is, what happens when you try
> 
> > w1 <- new("withId", TRUE, id = "test 4")
> 
> Error in initialize(value, ...) : 
> ? cannot use object of class "logical" in new():? class "withId" does
> not extend that class
> 
> wheras if you did
> 
> > setClass("withId", slots = c(data = "maybeNumber", id =
> > "character"))
> > w1 <- new("withId", data = new("foo", TRUE), id = "test 4")
> 
> it should work properly (or you could do data = 1.2 - it won't
> recognize a value TRUE as being of class foo since it's logical. Your
> withId has to have .Data of class numeric or foo, which themselves
> have incompatible initializers.
> 
> Hopefully this helps!
> 
> -Ezra
> 
> On Sun, 2022-07-03 at 13:02 +0200, pikappa.devel at gmail.com?wrote:
> > Dear all,
> > 
> > ?
> > 
> > This code, mostly copied from the setClassUnion help page, works as
> > described in the documentation:
> > 
> > ?
> > 
> > # test 1
> > 
> > setClassUnion("maybeNumber", c("numeric", "logical"))
> > 
> > setClass("withId", contains = "maybeNumber", slots = c(id =
> > "character"))
> > 
> > w1 <- new("withId", 1.2, id = "test 1")
> > 
> > ?
> > 
> > However, the following three tests do not work:
> > 
> > ?
> > 
> > # test 2
> > 
> > setClass("foo", slots = list(xb = "logical"))
> > 
> > setClassUnion("maybeNumber", c("numeric", "foo"))
> > 
> > setClass("withId", contains = "maybeNumber", slots = c(id =
> > "character"))
> > 
> > w1 <- new("withId", 1.2, id = "test 2")
> > 
> > ?
> > 
> > # test 3
> > 
> > setClass("foo", slots = list(xb = "logical"))
> > 
> > setClassUnion("maybeNumber", c("numeric"))
> > 
> > setIs("foo", "maybeNumber")
> > 
> > setClass("withId", contains = "maybeNumber", slots = c(id =
> > "character"))
> > 
> > w1 <- new("withId", 1.2, id = "test 3")
> > 
> > ?
> > 
> > # test 4
> > 
> > setClass("foo", contains = "logical")
> > 
> > setClassUnion("maybeNumber", c("numeric", "foo"))
> > 
> > setClass("withId", contains = "maybeNumber", slots = c(id =
> > "character"))
> > 
> > w1 <- new("withId", 1.2, id = "test 4")
> > 
> > ?
> > 
> > All three return:
> > 
> > ?
> > 
> > ? Error in initialize(value, ...) : 
> > 
> > ????? 'initialize' method returned an object of class "numeric"
> > instead of
> > the required class "withId"
> > 
> > ?
> > 
> > The error comes from:
> > 
> > ?
> > 
> > traceback()
> > 
> > 3: stop(gettextf("'initialize' method returned an object of class
> > %s 
> > instead of the required class %s",
> > 
> > ?????? paste(dQuote(class(value)), collapse = ", "), 
> > dQuote(class(.Object))),
> > 
> > ?????? domain = NA)
> > 
> > 2: initialize(value, ...)
> > 
> > 1: new("withId", 1.2, id = "test 2")
> > 
> > ?
> > 
> > I would expect tests 2-4 to work similarly to the first test. Is
> > the 
> > above error the intended behavior of setClassUnion? I do not see 
> > anything that would prevent this in the documentation. Is there 
> > something I am missing here?
> > 
> > ?
> > 
> > Any help would be very much appreciated!
> > 
> > ?
> > 
> > Kind regards,
> > 
> > Pantelis
> > 
> > 
> > ??????? [[alternative HTML version deleted]]
> > 
> > ______________________________________________
> > R-devel at r-project.org?mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 


From o||v|er@benz @end|ng |rom b-d@t@@ch  Tue Jul 19 14:59:25 2022
From: o||v|er@benz @end|ng |rom b-d@t@@ch (Olivier Benz)
Date: Tue, 19 Jul 2022 12:59:25 +0000
Subject: [Rd] Floating point issue
In-Reply-To: <D58BFD37-0DB3-4196-8399-C02F80A9EB95@uzh.ch>
References: <CAEKh8uhNTF3RczavV-jh82tK9e=iDr2tzys=wGSk6ZD5e2tndg@mail.gmail.com>
 <CAHqSRuTN7iU2ngvr2JoEiqZCrogY8GL3ssKY2vvUZstWCydzKw@mail.gmail.com>
 <0EF5EAF5-B6ED-440E-AB35-C0220EA41B62@b-data.ch>
 <D58BFD37-0DB3-4196-8399-C02F80A9EB95@uzh.ch>
Message-ID: <2851B1F9-1587-400D-B2F8-63F0C6A7992B@b-data.ch>

I found that quite puzzling indeed. Thanks for the references.

So in this case, the different results are not due to the architecture (M1 aka ARM64) but to the system/implementation.

> On 19 Jul 2022, at 14:22, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
> 
> Just a quick note of this in case someone finds Olivier's results puzzling. Standard ARM64 ABI (which Linux follows) defines long double as a 16-byte extended precision type. LLVM?s compiler-rt has a software implementation for doing operations on such types. Apple instead defines long double as identical to double in their ABIs. 
> 
> References
> 
> https://developer.arm.com/documentation/ka004751/1-0
> 
> https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms
> 
> 
> 
> 
>> On 19 Jul 2022, at 13:04, Olivier Benz <olivier.benz at b-data.ch> wrote:
>> 
>> The difference between macOS 12.4 and Debian 11 (Docker, virtualization framework) running on a MacBook Pro (M1 Max).
>> -> `.Machine$sizeof.longdouble` on macOS returns 8 whereas on Debian 11 it returns 16.
>> 
>> macOS 12.4 on MacBook Pro (M1 Max):
>> ``` r
>> .Machine
>> #> $double.eps
>> #> [1] 2.220446e-16
>> #> 
>> #> $double.neg.eps
>> #> [1] 1.110223e-16
>> #> 
>> #> $double.xmin
>> #> [1] 2.225074e-308
>> #> 
>> #> $double.xmax
>> #> [1] 1.797693e+308
>> #> 
>> #> $double.base
>> #> [1] 2
>> #> 
>> #> $double.digits
>> #> [1] 53
>> #> 
>> #> $double.rounding
>> #> [1] 5
>> #> 
>> #> $double.guard
>> #> [1] 0
>> #> 
>> #> $double.ulp.digits
>> #> [1] -52
>> #> 
>> #> $double.neg.ulp.digits
>> #> [1] -53
>> #> 
>> #> $double.exponent
>> #> [1] 11
>> #> 
>> #> $double.min.exp
>> #> [1] -1022
>> #> 
>> #> $double.max.exp
>> #> [1] 1024
>> #> 
>> #> $integer.max
>> #> [1] 2147483647
>> #> 
>> #> $sizeof.long
>> #> [1] 8
>> #> 
>> #> $sizeof.longlong
>> #> [1] 8
>> #> 
>> #> $sizeof.longdouble
>> #> [1] 8
>> #> 
>> #> $sizeof.pointer
>> #> [1] 8
>> 
>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
>> double
>> b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>   }, ""))
>> bitC(10^25)
>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> bitC(10000000000000000905969664)
>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010010
>> bitC(10000000000000000905969664 - 10^25)
>> #> [1] 0 10000011110 | 0000000000000000000000000000000000000000000000000000
>> bitC(1e25)
>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> ```
>> 
>> <sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>
>> 
>> <details style="margin-bottom:10px;">
>> <summary>
>> Session info
>> </summary>
>> 
>> ``` r
>> sessioninfo::session_info()
>> #> ? Session info ???????????????????????????????????????????????????????????????
>> #>  setting  value
>> #>  version  R version 4.2.1 (2022-06-23)
>> #>  os       macOS Monterey 12.4
>> #>  system   aarch64, darwin20
>> #>  ui       X11
>> #>  language (EN)
>> #>  collate  en_US.UTF-8
>> #>  ctype    UTF-8
>> #>  tz       Europe/Copenhagen
>> #>  date     2022-07-19
>> #>  pandoc   2.18 @ /opt/local/bin/ (via rmarkdown)
>> #> 
>> #> ? Packages ???????????????????????????????????????????????????????????????????
>> #>  package     * version date (UTC) lib source
>> #>  cli           3.3.0   2022-04-25 [1] CRAN (R 4.2.0)
>> #>  digest        0.6.29  2021-12-01 [1] CRAN (R 4.2.0)
>> #>  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.2.0)
>> #>  evaluate      0.15    2022-02-18 [1] CRAN (R 4.2.0)
>> #>  fansi         1.0.3   2022-03-24 [1] CRAN (R 4.2.0)
>> #>  fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)
>> #>  fs            1.5.2   2021-12-08 [1] CRAN (R 4.2.0)
>> #>  glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)
>> #>  highr         0.9     2021-04-16 [1] CRAN (R 4.2.0)
>> #>  htmltools     0.5.3   2022-07-18 [1] CRAN (R 4.2.1)
>> #>  knitr         1.39    2022-04-26 [1] CRAN (R 4.2.0)
>> #>  lifecycle     1.0.1   2021-09-24 [1] CRAN (R 4.2.0)
>> #>  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)
>> #>  pillar        1.8.0   2022-07-18 [1] CRAN (R 4.2.1)
>> #>  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)
>> #>  purrr         0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
>> #>  R.cache       0.15.0  2021-04-30 [1] CRAN (R 4.2.0)
>> #>  R.methodsS3   1.8.2   2022-06-13 [1] CRAN (R 4.2.0)
>> #>  R.oo          1.25.0  2022-06-12 [1] CRAN (R 4.2.0)
>> #>  R.utils       2.12.0  2022-06-28 [1] CRAN (R 4.2.0)
>> #>  reprex        2.0.1   2021-08-05 [1] CRAN (R 4.2.0)
>> #>  rlang         1.0.4   2022-07-12 [1] CRAN (R 4.2.1)
>> #>  rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)
>> #>  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)
>> #>  stringi       1.7.8   2022-07-11 [1] CRAN (R 4.2.1)
>> #>  stringr       1.4.0   2019-02-10 [1] CRAN (R 4.2.0)
>> #>  styler        1.7.0   2022-03-13 [1] CRAN (R 4.2.0)
>> #>  tibble        3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
>> #>  utf8          1.2.2   2021-07-24 [1] CRAN (R 4.2.0)
>> #>  vctrs         0.4.1   2022-04-13 [1] CRAN (R 4.2.0)
>> #>  withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.0)
>> #>  xfun          0.31    2022-05-10 [1] CRAN (R 4.2.0)
>> #>  yaml          2.3.5   2022-02-21 [1] CRAN (R 4.2.0)
>> #> 
>> #>  [1] /Users/benz0li/Library/R/arm64/4.2/library
>> #>  [2] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library
>> #> 
>> #> ??????????????????????????????????????????????????????????????????????????????
>> ```
>> 
>> </details>
>> 
>> Debian 11 (Docker, virtualization framework) on MacBook Pro (M1 Max)
>> ``` r
>> .Machine
>> #> $double.eps
>> #> [1] 2.220446e-16
>> #> 
>> #> $double.neg.eps
>> #> [1] 1.110223e-16
>> #> 
>> #> $double.xmin
>> #> [1] 2.225074e-308
>> #> 
>> #> $double.xmax
>> #> [1] 1.797693e+308
>> #> 
>> #> $double.base
>> #> [1] 2
>> #> 
>> #> $double.digits
>> #> [1] 53
>> #> 
>> #> $double.rounding
>> #> [1] 5
>> #> 
>> #> $double.guard
>> #> [1] 0
>> #> 
>> #> $double.ulp.digits
>> #> [1] -52
>> #> 
>> #> $double.neg.ulp.digits
>> #> [1] -53
>> #> 
>> #> $double.exponent
>> #> [1] 11
>> #> 
>> #> $double.min.exp
>> #> [1] -1022
>> #> 
>> #> $double.max.exp
>> #> [1] 1024
>> #> 
>> #> $integer.max
>> #> [1] 2147483647
>> #> 
>> #> $sizeof.long
>> #> [1] 8
>> #> 
>> #> $sizeof.longlong
>> #> [1] 8
>> #> 
>> #> $sizeof.longdouble
>> #> [1] 16
>> #> 
>> #> $sizeof.pointer
>> #> [1] 8
>> #> 
>> #> $longdouble.eps
>> #> [1] 1.92593e-34
>> #> 
>> #> $longdouble.neg.eps
>> #> [1] 9.62965e-35
>> #> 
>> #> $longdouble.digits
>> #> [1] 113
>> #> 
>> #> $longdouble.rounding
>> #> [1] 5
>> #> 
>> #> $longdouble.guard
>> #> [1] 0
>> #> 
>> #> $longdouble.ulp.digits
>> #> [1] -112
>> #> 
>> #> $longdouble.neg.ulp.digits
>> #> [1] -113
>> #> 
>> #> $longdouble.exponent
>> #> [1] 15
>> #> 
>> #> $longdouble.min.exp
>> #> [1] -16382
>> #> 
>> #> $longdouble.max.exp
>> #> [1] 16384
>> 
>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split one
>> double
>> b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>   }, ""))
>> bitC(10^25)
>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> bitC(10000000000000000905969664)
>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> bitC(10000000000000000905969664 - 10^25)
>> #> [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>> bitC(1e25)
>> #> [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>> ```
>> 
>> <sup>Created on 2022-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>
>> 
>> <details style="margin-bottom:10px;">
>> <summary>
>> Session info
>> </summary>
>> 
>> ``` r
>> sessioninfo::session_info()
>> #> ? Session info ???????????????????????????????????????????????????????????????
>> #>  setting  value
>> #>  version  R version 4.2.1 (2022-06-23)
>> #>  os       Debian GNU/Linux 11 (bullseye)
>> #>  system   aarch64, linux-gnu
>> #>  ui       X11
>> #>  language (EN)
>> #>  collate  en_US.UTF-8
>> #>  ctype    en_US.UTF-8
>> #>  tz       Etc/UTC
>> #>  date     2022-07-19
>> #>  pandoc   2.18 @ /usr/bin/ (via rmarkdown)
>> #> 
>> #> ? Packages ???????????????????????????????????????????????????????????????????
>> #>  package     * version date (UTC) lib source
>> #>  cli           3.3.0   2022-04-25 [2] CRAN (R 4.2.1)
>> #>  crayon        1.5.1   2022-03-26 [2] CRAN (R 4.2.1)
>> #>  digest        0.6.29  2021-12-01 [2] CRAN (R 4.2.1)
>> #>  ellipsis      0.3.2   2021-04-29 [2] CRAN (R 4.2.1)
>> #>  evaluate      0.15    2022-02-18 [2] CRAN (R 4.2.1)
>> #>  fansi         1.0.3   2022-03-24 [2] CRAN (R 4.2.1)
>> #>  fastmap       1.1.0   2021-01-25 [2] CRAN (R 4.2.1)
>> #>  fs            1.5.2   2021-12-08 [2] CRAN (R 4.2.1)
>> #>  glue          1.6.2   2022-02-24 [2] CRAN (R 4.2.1)
>> #>  highr         0.9     2021-04-16 [2] CRAN (R 4.2.1)
>> #>  htmltools     0.5.2   2021-08-25 [2] CRAN (R 4.2.1)
>> #>  knitr         1.39    2022-04-26 [2] CRAN (R 4.2.1)
>> #>  lifecycle     1.0.1   2021-09-24 [2] CRAN (R 4.2.1)
>> #>  magrittr      2.0.3   2022-03-30 [2] CRAN (R 4.2.1)
>> #>  pillar        1.7.0   2022-02-01 [2] CRAN (R 4.2.1)
>> #>  pkgconfig     2.0.3   2019-09-22 [2] CRAN (R 4.2.1)
>> #>  purrr         0.3.4   2020-04-17 [2] CRAN (R 4.2.1)
>> #>  R.cache       0.15.0  2021-04-30 [2] CRAN (R 4.2.1)
>> #>  R.methodsS3   1.8.2   2022-06-13 [2] CRAN (R 4.2.1)
>> #>  R.oo          1.25.0  2022-06-12 [2] CRAN (R 4.2.1)
>> #>  R.utils       2.12.0  2022-06-28 [2] CRAN (R 4.2.1)
>> #>  reprex        2.0.1   2021-08-05 [2] CRAN (R 4.2.1)
>> #>  rlang         1.0.4   2022-07-12 [2] CRAN (R 4.2.1)
>> #>  rmarkdown     2.14    2022-04-25 [2] CRAN (R 4.2.1)
>> #>  sessioninfo   1.2.2   2021-12-06 [2] CRAN (R 4.2.1)
>> #>  stringi       1.7.8   2022-07-11 [2] CRAN (R 4.2.1)
>> #>  stringr       1.4.0   2019-02-10 [2] CRAN (R 4.2.1)
>> #>  styler        1.7.0   2022-03-13 [2] CRAN (R 4.2.1)
>> #>  tibble        3.1.7   2022-05-03 [2] CRAN (R 4.2.1)
>> #>  utf8          1.2.2   2021-07-24 [2] CRAN (R 4.2.1)
>> #>  vctrs         0.4.1   2022-04-13 [2] CRAN (R 4.2.1)
>> #>  withr         2.5.0   2022-03-03 [2] CRAN (R 4.2.1)
>> #>  xfun          0.31    2022-05-10 [2] CRAN (R 4.2.1)
>> #>  yaml          2.3.5   2022-02-21 [2] CRAN (R 4.2.1)
>> #> 
>> #>  [1] /home/benz0li/R/aarch64-unknown-linux-gnu-library/4.2
>> #>  [2] /usr/local/lib/R/site-library
>> #>  [3] /usr/local/lib/R/library
>> #> 
>> #> ??????????????????????????????????????????????????????????????????????????????
>> ```
>> 
>> </details>
>> 
>>> On 10 Jul 2022, at 22:23, Bill Dunlap <williamwdunlap at gmail.com> wrote:
>>> 
>>> The following function, 'bitC' from ?numToBits, displays the bits in a
>>> double precision number, separated into the sign bit, the 11 exponent bits,
>>> and the 52 bits in the mantissa.  I've shown the results with your numbers
>>> from R-2.4.0 on my Windows 11 Lenovo laptop: what do you get?
>>> 
>>>> bitC <- function(x) noquote(vapply(as.double(x), function(x) { # split
>>> one double
>>> +     b <- substr(as.character(rev(numToBits(x))), 2L, 2L)
>>> +     paste0(c(b[1L], " ", b[2:12], " | ", b[13:64]), collapse = "")
>>> +   }, ""))
>>>> bitC(10^25)
>>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>>> bitC(10000000000000000905969664)
>>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>>> bitC(10000000000000000905969664 - 10^25)
>>> # [1] 0 00000000000 | 0000000000000000000000000000000000000000000000000000
>>>> bitC(1e25)
>>> # [1] 0 10001010010 | 0000100010110010101000101100001010000000001010010001
>>> 
>>> -Bill
>>> 
>>> On Sun, Jul 10, 2022 at 7:00 AM Antoine Fabri <antoine.fabri at gmail.com>
>>> wrote:
>>> 
>>>> Dear r-devel,
>>>> 
>>>> For some numbers, the printed value is not equivalent to the input :
>>>> 
>>>> options(scipen = 999)
>>>> ## GOOD
>>>> 1e24
>>>> #> [1]  999999999999999983222784
>>>> 1e24 == 999999999999999983222784
>>>> #> [1] TRUE
>>>> 
>>>> ## BAD
>>>> 1e25
>>>> #> [1] 10000000000000000905969664
>>>> 1e25 == 10000000000000000905969664
>>>> #> [1] FALSE
>>>> 
>>>> ## STILL BAD
>>>> 10000000000000000905969664
>>>> #> [1] 10000000000000003053453312
>>>> 
>>>> ## GOOD AGAIN
>>>> 10000000000000003053453312
>>>> #> [1] 10000000000000003053453312
>>>> 
>>>> # Additionally
>>>> 10000000000000000000000000 == 1e25
>>>> #> [1] FALSE
>>>> 
>>>> Are these bugs ?
>>>> 
>>>>      [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> --
>> benz0li.b-data.io | @benz0li | olivier.benz at b-data.ch
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--
benz0li.b-data.io | @benz0li | olivier.benz at b-data.ch


From rkoenker @end|ng |rom ||||no|@@edu  Tue Jul 19 18:53:53 2022
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Tue, 19 Jul 2022 16:53:53 +0000
Subject: [Rd] DOI query
Message-ID: <CC14A946-665B-4CC5-B24A-0D568C4D7B78@illinois.edu>

Recent package checking revealed that the CUP DOI for my QR book 
https://doi.org/10.1017/CBO9780511754098
is DOA so I duly wrote to CUP and the initial response is:  

> We would like to extend our gratitude for reporting this problem with your title. We are currently working on fixing all the DOI links affected by the ebooks.cambridge.org decommission, but I am afraid that we do not have an estimated date for when they will all be working as intended again, due to the complexity of the issue.

I wondered if anyone had a suggestion for an alternative way to reference such things?  And incidentally  wondered whether DOI links were often this flaky.  I was led to believe that DOIs were like Platonic solids always there when you needed them.


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Jul 19 21:32:13 2022
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 19 Jul 2022 22:32:13 +0300
Subject: [Rd] DOI query
In-Reply-To: <CC14A946-665B-4CC5-B24A-0D568C4D7B78@illinois.edu>
References: <CC14A946-665B-4CC5-B24A-0D568C4D7B78@illinois.edu>
Message-ID: <20220719223213.1e094e09@trisector>

On Tue, 19 Jul 2022 16:53:53 +0000
"Koenker, Roger W" <rkoenker at illinois.edu> wrote:

> I wondered if anyone had a suggestion for an alternative way to
> reference such things?  And incidentally  wondered whether DOI links
> were often this flaky.

Since this discussion does happen on R-package-devel from time to time,
unfortunately, DOI links can be very flaky, but not for the same
reasons. For example, see:
https://stat.ethz.ch/pipermail/r-package-devel/2022q2/008089.html

(In my opinion, this is more of a package development question than an
R development question and thus would be a better fit for
<r-package-devel at r-project.org>.)

> I wondered if anyone had a suggestion for an alternative way to
> reference such things?

I suppose you could only use the ISBN only, but most kinds of URLs you
could use to link to your book can be expected to stop working sooner
than the DOI.

A link to a web.archive.org snapshot of the page should last relatively
long, too. Could Zenodo link to the web page for your book (with a
different DOI) while CUP figures out their availability problems?

> I was led to believe that DOIs were like Platonic solids always there
> when you needed them.

There are two parts to DOI checks in R documentation. The one that
usually fails is `R CMD check` not behaving enough like a human being
with a browser and tripping anti-robot protection on a journal website.
This happens so frequently that there's a separate sub-page on URL
checks linked by the CRAN policy:
https://cran.r-project.org/web/packages/URL_checks.html

The one that broke in your case is a publisher failing to keep their
DOI link working. I knew this wasn't impossible, but have never seen an
example until now. Unfortunately, I don't know whether CRAN would agree
to make an exception for a DOI that should be valid for all intents and
purposes and is only temporarily broken for reasons of your control.
Maybe they would.

-- 
Best regards,
Ivan


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Jul 20 08:42:20 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 20 Jul 2022 07:42:20 +0100
Subject: [Rd] DOI query
In-Reply-To: <20220719223213.1e094e09@trisector>
References: <CC14A946-665B-4CC5-B24A-0D568C4D7B78@illinois.edu>
 <20220719223213.1e094e09@trisector>
Message-ID: <bdc06da6-e5d9-011e-ed87-9a8b70978bc4@stats.ox.ac.uk>

On 19/07/2022 20:32, Ivan Krylov wrote:
> On Tue, 19 Jul 2022 16:53:53 +0000
> "Koenker, Roger W" <rkoenker at illinois.edu> wrote:
> 
>> I wondered if anyone had a suggestion for an alternative way to
>> reference such things?  And incidentally  wondered whether DOI links
>> were often this flaky.
> 
> Since this discussion does happen on R-package-devel from time to time,
> unfortunately, DOI links can be very flaky, but not for the same
> reasons. For example, see:
> https://stat.ethz.ch/pipermail/r-package-devel/2022q2/008089.html
> 
> (In my opinion, this is more of a package development question than an
> R development question and thus would be a better fit for
> <r-package-devel at r-project.org>.)
> 
>> I wondered if anyone had a suggestion for an alternative way to
>> reference such things?
> 
> I suppose you could only use the ISBN only, but most kinds of URLs you
> could use to link to your book can be expected to stop working sooner
> than the DOI.
> 
> A link to a web.archive.org snapshot of the page should last relatively
> long, too. Could Zenodo link to the web page for your book (with a
> different DOI) while CUP figures out their availability problems?
> 
>> I was led to believe that DOIs were like Platonic solids always there
>> when you needed them.
> 
> There are two parts to DOI checks in R documentation. The one that
> usually fails is `R CMD check` not behaving enough like a human being
> with a browser and tripping anti-robot protection on a journal website.
> This happens so frequently that there's a separate sub-page on URL
> checks linked by the CRAN policy:
> https://cran.r-project.org/web/packages/URL_checks.html

Note that 'R CMD check' does not check URLs -- that is part of the 
CRAN-specific checking emulated with --as-cran.

> The one that broke in your case is a publisher failing to keep their
> DOI link working. I knew this wasn't impossible, but have never seen an
> example until now. Unfortunately, I don't know whether CRAN would agree
> to make an exception for a DOI that should be valid for all intents and
> purposes and is only temporarily broken for reasons of your control.
> Maybe they would.
> 

The issue is that the DOI is the main information in the Description:

"See Koenker (2006) <doi:10.1017/CBO9780511754098> and Koenker et al. 
(2017) <doi:10.1201/9781315120256>"

Roger has said that it refers to a book, but we currently have no way of 
knowing from that.  The traditional way of citing (giving the book 
authors, year, title and publishers) is much less fragile.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From rkoenker @end|ng |rom ||||no|@@edu  Wed Jul 20 08:50:02 2022
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Wed, 20 Jul 2022 06:50:02 +0000
Subject: [Rd] DOI query
In-Reply-To: <bdc06da6-e5d9-011e-ed87-9a8b70978bc4@stats.ox.ac.uk>
References: <CC14A946-665B-4CC5-B24A-0D568C4D7B78@illinois.edu>
 <20220719223213.1e094e09@trisector>
 <bdc06da6-e5d9-011e-ed87-9a8b70978bc4@stats.ox.ac.uk>
Message-ID: <87B2E4F0-79AE-42FE-8890-411873034FBF@illinois.edu>

Thanks,  I?ll add details for both books referred to in Description and resubmit later today with the understanding that the DOI problem will be eventually fixed, and could be overlooked by CRAN meanwhile.

Roger


> On Jul 20, 2022, at 7:42 AM, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
> On 19/07/2022 20:32, Ivan Krylov wrote:
>> On Tue, 19 Jul 2022 16:53:53 +0000
>> "Koenker, Roger W" <rkoenker at illinois.edu> wrote:
>>> I wondered if anyone had a suggestion for an alternative way to
>>> reference such things?  And incidentally  wondered whether DOI links
>>> were often this flaky.
>> Since this discussion does happen on R-package-devel from time to time,
>> unfortunately, DOI links can be very flaky, but not for the same
>> reasons. For example, see:
>> https://urldefense.com/v3/__https://stat.ethz.ch/pipermail/r-package-devel/2022q2/008089.html__;!!DZ3fjg!6fngu-pqSCFiJo1Btv_b5yOh5Syb_2KCGnF1I-eMUElQBfKSM-eMQX9kMIpoO2g2__V1cxDYnA92tlIZaPsRRTs$ (In my opinion, this is more of a package development question than an
>> R development question and thus would be a better fit for
>> <r-package-devel at r-project.org>.)
>>> I wondered if anyone had a suggestion for an alternative way to
>>> reference such things?
>> I suppose you could only use the ISBN only, but most kinds of URLs you
>> could use to link to your book can be expected to stop working sooner
>> than the DOI.
>> A link to a web.archive.org snapshot of the page should last relatively
>> long, too. Could Zenodo link to the web page for your book (with a
>> different DOI) while CUP figures out their availability problems?
>>> I was led to believe that DOIs were like Platonic solids always there
>>> when you needed them.
>> There are two parts to DOI checks in R documentation. The one that
>> usually fails is `R CMD check` not behaving enough like a human being
>> with a browser and tripping anti-robot protection on a journal website.
>> This happens so frequently that there's a separate sub-page on URL
>> checks linked by the CRAN policy:
>> https://urldefense.com/v3/__https://cran.r-project.org/web/packages/URL_checks.html__;!!DZ3fjg!6fngu-pqSCFiJo1Btv_b5yOh5Syb_2KCGnF1I-eMUElQBfKSM-eMQX9kMIpoO2g2__V1cxDYnA92tlIZp-S5OAQ$ 
> 
> Note that 'R CMD check' does not check URLs -- that is part of the CRAN-specific checking emulated with --as-cran.
> 
>> The one that broke in your case is a publisher failing to keep their
>> DOI link working. I knew this wasn't impossible, but have never seen an
>> example until now. Unfortunately, I don't know whether CRAN would agree
>> to make an exception for a DOI that should be valid for all intents and
>> purposes and is only temporarily broken for reasons of your control.
>> Maybe they would.
> 
> The issue is that the DOI is the main information in the Description:
> 
> "See Koenker (2006) <doi:10.1017/CBO9780511754098> and Koenker et al. (2017) <doi:10.1201/9781315120256>"
> 
> Roger has said that it refers to a book, but we currently have no way of knowing from that.  The traditional way of citing (giving the book authors, year, title and publishers) is much less fragile.
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Jul 20 10:15:52 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 20 Jul 2022 09:15:52 +0100
Subject: [Rd] 
 [External] Warning with new placeholder piped to data.frame
 extractors `[` and `[[`.
In-Reply-To: <e2f5ae1f-d45a-e356-2736-5b2d52fe33e@uiowa.edu>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <e2f5ae1f-d45a-e356-2736-5b2d52fe33e@uiowa.edu>
Message-ID: <99c7b86f-7737-3308-9a53-aae61d4e71a1@sapo.pt>

Hello,

I agree with several points you've made.

The code of the data.frame methods for `[` and `[[` is already 
complicated enough and a revision is probably not worth the effort, 
constructs like piping to `[` and `[[` is not furthering the cause of 
readability and a new base R dplyr::pull like function would put an 
extra development and maintenace burden on the R Core Team, to which we 
are in great debt for their excellent and already difficult and time 
consuming work developing, maintaining and making R evolve along the years.

My question, if the named argument syntax is mandatory then it should 
not throw a warning, seems to have raised a consensus that this use of 
the new pipe operator and placeholder should be discouraged (Toby), 
considered a bug (Gabriel) or maybe intentional (Duncan). Definitely an 
unclear idiom to be avoided and not a priority.

I still find it strange but if R is telling the programmer to write 
better code then follow the advice.

(As a side note, all of the following work as expected:

1:6 |> `[`(x = _, 2)
1:6 |> `[[`(x = _, 2)

matrix(1:6, nrow = 3) |> `[`(x = _, 2, 2)
matrix(1:6, nrow = 3) |> `[`(x = _, 2, )
matrix(1:6, nrow = 3) |> `[`(x = _, , 2)

list(1:6, b = 7:10) |> `[`(x = _, 2)
list(1:6, b = 7:10) |> `[[`(x = _, 2)
list(1:6, b = 7:10) |> `$`(x = _, 'b')

So this is specific to the data.frame methods.)

Hope this helps,

Rui Barradas

?s 23:44 de 18/07/2022, luke-tierney at uiowa.edu escreveu:
> On Sat, 16 Jul 2022, Rui Barradas wrote:
> 
>> Hello,
>>
>> When piping to any of `[.data.frame` or `[[.data.frame`, the 
>> placeholder in mandatory.
>>
>>
>> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>>
>> aggregate(y ~ f, df1, mean) |> `[`('y')
>> # Error: function '[' not supported in RHS call of a pipe
>>
>> aggregate(y ~ f, df1, mean) |> `[[`('y')
>> # Error: function '[' not supported in RHS call of a pipe
>>
>>
>>
>> But if used it throws a warning.
>>
>>
>>
>> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
>> #? Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): 
>> named arguments
>> #? other than 'drop' are discouraged
>> #??? y
>> #? 1 3
>> #? 2 8
>>
>> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
>> #? Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): 
>> named
>> #? arguments other than 'exact' are discouraged
>> #? [1] 3 8
>>
> 
> The pipe syntax requirs that the placeolder be used as a named
> argument.? If you do that, then the syntax is legal and parses
> successfully.
> 
>> Hasn't this become inconsistent behavior?
>> More than merely right, the named argument is mandatory, it shouldn't 
>> give warnings.
> 
> Any R function can decide whether it wants to allow explicitly named
> arguments.? Disallowing or discouraging using explicitly named
> arguments requires some work and is usually not a good idea. In the
> case of the data.frame mechods for [ and [[ the decision was made to
> discourage using named arguments other than 'exact'. This seems to
> have been to allow a more an expedient way to implement these
> functions. This could be revisited, but I doubt is is worth the effort.
> 
> For me the main reason for using pipes is to make code more
> readable. Using `[` and such constructs is not furthering that
> cause. When I use pipes I am almost always using tidyverse
> features, so I have dpyr::pull available, which is more readable,
> to me at least. Arguably, base R could have a similar function,
> but again I doubt this would be a good investment of time.
> 
> An option that we have experimented with is to allow the placeholder
> at the head of an extraction chain. This is supported in the
> experimental branch at
> https://svn.r-project.org/R/branches/R-syntax. So for example:
> 
>  ??? > mtcars |> _$cyl[1]
>  ??? [1] 6
> 
> This may make it into R-devel for the next release, but it still needs
> more testing.
> 
> Best,
> 
> luke
> 
>>
>> Hope this helps,
>>
>> Rui Barradas
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Jul 21 03:16:58 2022
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 20 Jul 2022 20:16:58 -0500 (CDT)
Subject: [Rd] 
 [External] Warning with new placeholder piped to data.frame
 extractors `[` and `[[`.
In-Reply-To: <99c7b86f-7737-3308-9a53-aae61d4e71a1@sapo.pt>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <e2f5ae1f-d45a-e356-2736-5b2d52fe33e@uiowa.edu>
 <99c7b86f-7737-3308-9a53-aae61d4e71a1@sapo.pt>
Message-ID: <f6b06068-462-ba79-2012-525d4ca9ea69@uiowa.edu>

On Wed, 20 Jul 2022, Rui Barradas wrote:

> Hello,
>
> I agree with several points you've made.
>
> The code of the data.frame methods for `[` and `[[` is already complicated 
> enough and a revision is probably not worth the effort, constructs like 
> piping to `[` and `[[` is not furthering the cause of readability and a new 
> base R dplyr::pull like function would put an extra development and 
> maintenace burden on the R Core Team, to which we are in great debt for their 
> excellent and already difficult and time consuming work developing, 
> maintaining and making R evolve along the years.
>
> My question, if the named argument syntax is mandatory then it should not 
> throw a warning, seems to have raised a consensus that this use of the new 
> pipe operator and placeholder should be discouraged (Toby), considered a bug 
> (Gabriel) or maybe intentional (Duncan). Definitely an unclear idiom to be 
> avoided and not a priority.
>
> I still find it strange but if R is telling the programmer to write better 
> code then follow the advice.
>
> (As a side note, all of the following work as expected:
>
> 1:6 |> `[`(x = _, 2)
> 1:6 |> `[[`(x = _, 2)

Depends on what you expext. This is probably not what you expect:

     > `[`(2, x = 1:6)
     [1]  2 NA NA NA NA NA

For  performance reasons many primitives were implemented to
not do argument matching on named arguments but to accept arguments by
position. This is particularly true for syntactically special
functions like arithmetic and extraction operators. You can use named
arguments in these, but the names are ignored by the default methods,
which just go by position. S3 methods implemented as R functions
usually will handle the named arguments in the usual way, but can
choose not to, as the data.frame extraction methods do.

Arguably the performance issue is now moot as almost all
performance-critical code will be byte compiled. But adding argument
matching in all primitives is not something I can see getting high
priority at the moment.

As far as I can see, it looks like dropping the warning for a named
'x' argument in the S3 extraction methods for data.frame would be
fairly straightforward and shouldn't cause any disruption. But this
wouldn't make it into a release until the placeholder is allowed at
the head of an extraction chain, assuming we go there.

Best,

luke
>
> matrix(1:6, nrow = 3) |> `[`(x = _, 2, 2)
> matrix(1:6, nrow = 3) |> `[`(x = _, 2, )
> matrix(1:6, nrow = 3) |> `[`(x = _, , 2)
>
> list(1:6, b = 7:10) |> `[`(x = _, 2)
> list(1:6, b = 7:10) |> `[[`(x = _, 2)
> list(1:6, b = 7:10) |> `$`(x = _, 'b')
>
> So this is specific to the data.frame methods.)
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 23:44 de 18/07/2022, luke-tierney at uiowa.edu escreveu:
>> On Sat, 16 Jul 2022, Rui Barradas wrote:
>> 
>>> Hello,
>>> 
>>> When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder 
>>> in mandatory.
>>> 
>>> 
>>> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>>> 
>>> aggregate(y ~ f, df1, mean) |> `[`('y')
>>> # Error: function '[' not supported in RHS call of a pipe
>>> 
>>> aggregate(y ~ f, df1, mean) |> `[[`('y')
>>> # Error: function '[' not supported in RHS call of a pipe
>>> 
>>> 
>>> 
>>> But if used it throws a warning.
>>> 
>>> 
>>> 
>>> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
>>> #? Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named 
>>> arguments
>>> #? other than 'drop' are discouraged
>>> #??? y
>>> #? 1 3
>>> #? 2 8
>>> 
>>> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
>>> #? Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named
>>> #? arguments other than 'exact' are discouraged
>>> #? [1] 3 8
>>> 
>> 
>> The pipe syntax requirs that the placeolder be used as a named
>> argument.? If you do that, then the syntax is legal and parses
>> successfully.
>> 
>>> Hasn't this become inconsistent behavior?
>>> More than merely right, the named argument is mandatory, it shouldn't give 
>>> warnings.
>> 
>> Any R function can decide whether it wants to allow explicitly named
>> arguments.? Disallowing or discouraging using explicitly named
>> arguments requires some work and is usually not a good idea. In the
>> case of the data.frame mechods for [ and [[ the decision was made to
>> discourage using named arguments other than 'exact'. This seems to
>> have been to allow a more an expedient way to implement these
>> functions. This could be revisited, but I doubt is is worth the effort.
>> 
>> For me the main reason for using pipes is to make code more
>> readable. Using `[` and such constructs is not furthering that
>> cause. When I use pipes I am almost always using tidyverse
>> features, so I have dpyr::pull available, which is more readable,
>> to me at least. Arguably, base R could have a similar function,
>> but again I doubt this would be a good investment of time.
>> 
>> An option that we have experimented with is to allow the placeholder
>> at the head of an extraction chain. This is supported in the
>> experimental branch at
>> https://svn.r-project.org/R/branches/R-syntax. So for example:
>>
>>  ??? > mtcars |> _$cyl[1]
>>  ??? [1] 6
>> 
>> This may make it into R-devel for the next release, but it still needs
>> more testing.
>> 
>> Best,
>> 
>> luke
>> 
>>> 
>>> Hope this helps,
>>> 
>>> Rui Barradas
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Jul 21 17:25:41 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 21 Jul 2022 16:25:41 +0100
Subject: [Rd] 
 [External] Warning with new placeholder piped to data.frame
 extractors `[` and `[[`.
In-Reply-To: <f6b06068-462-ba79-2012-525d4ca9ea69@uiowa.edu>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <e2f5ae1f-d45a-e356-2736-5b2d52fe33e@uiowa.edu>
 <99c7b86f-7737-3308-9a53-aae61d4e71a1@sapo.pt>
 <f6b06068-462-ba79-2012-525d4ca9ea69@uiowa.edu>
Message-ID: <0cc6de9d-debe-4ee5-d59a-b8c3c7f149c4@sapo.pt>

Hello,

Thanks for the extra explanations. This thread made the behavior of the 
data.frame extraction methods clear and should now end.
The example on extractors matching arguments by position is new to me 
and very useful.

Thanks again to all, in particular to Luke, Toby, Gabriel and Duncan.

Rui Barradas

?s 02:16 de 21/07/2022, luke-tierney at uiowa.edu escreveu:
> On Wed, 20 Jul 2022, Rui Barradas wrote:
> 
>> Hello,
>>
>> I agree with several points you've made.
>>
>> The code of the data.frame methods for `[` and `[[` is already 
>> complicated enough and a revision is probably not worth the effort, 
>> constructs like piping to `[` and `[[` is not furthering the cause of 
>> readability and a new base R dplyr::pull like function would put an 
>> extra development and maintenace burden on the R Core Team, to which 
>> we are in great debt for their excellent and already difficult and 
>> time consuming work developing, maintaining and making R evolve along 
>> the years.
>>
>> My question, if the named argument syntax is mandatory then it should 
>> not throw a warning, seems to have raised a consensus that this use of 
>> the new pipe operator and placeholder should be discouraged (Toby), 
>> considered a bug (Gabriel) or maybe intentional (Duncan). Definitely 
>> an unclear idiom to be avoided and not a priority.
>>
>> I still find it strange but if R is telling the programmer to write 
>> better code then follow the advice.
>>
>> (As a side note, all of the following work as expected:
>>
>> 1:6 |> `[`(x = _, 2)
>> 1:6 |> `[[`(x = _, 2)
> 
> Depends on what you expext. This is probably not what you expect:
> 
>  ??? > `[`(2, x = 1:6)
>  ??? [1]? 2 NA NA NA NA NA
> 
> For? performance reasons many primitives were implemented to
> not do argument matching on named arguments but to accept arguments by
> position. This is particularly true for syntactically special
> functions like arithmetic and extraction operators. You can use named
> arguments in these, but the names are ignored by the default methods,
> which just go by position. S3 methods implemented as R functions
> usually will handle the named arguments in the usual way, but can
> choose not to, as the data.frame extraction methods do.
> 
> Arguably the performance issue is now moot as almost all
> performance-critical code will be byte compiled. But adding argument
> matching in all primitives is not something I can see getting high
> priority at the moment.
> 
> As far as I can see, it looks like dropping the warning for a named
> 'x' argument in the S3 extraction methods for data.frame would be
> fairly straightforward and shouldn't cause any disruption. But this
> wouldn't make it into a release until the placeholder is allowed at
> the head of an extraction chain, assuming we go there.
> 
> Best,
> 
> luke
>>
>> matrix(1:6, nrow = 3) |> `[`(x = _, 2, 2)
>> matrix(1:6, nrow = 3) |> `[`(x = _, 2, )
>> matrix(1:6, nrow = 3) |> `[`(x = _, , 2)
>>
>> list(1:6, b = 7:10) |> `[`(x = _, 2)
>> list(1:6, b = 7:10) |> `[[`(x = _, 2)
>> list(1:6, b = 7:10) |> `$`(x = _, 'b')
>>
>> So this is specific to the data.frame methods.)
>>
>> Hope this helps,
>>
>> Rui Barradas
>>
>> ?s 23:44 de 18/07/2022, luke-tierney at uiowa.edu escreveu:
>>> On Sat, 16 Jul 2022, Rui Barradas wrote:
>>>
>>>> Hello,
>>>>
>>>> When piping to any of `[.data.frame` or `[[.data.frame`, the 
>>>> placeholder in mandatory.
>>>>
>>>>
>>>> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
>>>>
>>>> aggregate(y ~ f, df1, mean) |> `[`('y')
>>>> # Error: function '[' not supported in RHS call of a pipe
>>>>
>>>> aggregate(y ~ f, df1, mean) |> `[[`('y')
>>>> # Error: function '[' not supported in RHS call of a pipe
>>>>
>>>>
>>>>
>>>> But if used it throws a warning.
>>>>
>>>>
>>>>
>>>> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
>>>> #? Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): 
>>>> named arguments
>>>> #? other than 'drop' are discouraged
>>>> #??? y
>>>> #? 1 3
>>>> #? 2 8
>>>>
>>>> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
>>>> #? Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): 
>>>> named
>>>> #? arguments other than 'exact' are discouraged
>>>> #? [1] 3 8
>>>>
>>>
>>> The pipe syntax requirs that the placeolder be used as a named
>>> argument.? If you do that, then the syntax is legal and parses
>>> successfully.
>>>
>>>> Hasn't this become inconsistent behavior?
>>>> More than merely right, the named argument is mandatory, it 
>>>> shouldn't give warnings.
>>>
>>> Any R function can decide whether it wants to allow explicitly named
>>> arguments.? Disallowing or discouraging using explicitly named
>>> arguments requires some work and is usually not a good idea. In the
>>> case of the data.frame mechods for [ and [[ the decision was made to
>>> discourage using named arguments other than 'exact'. This seems to
>>> have been to allow a more an expedient way to implement these
>>> functions. This could be revisited, but I doubt is is worth the effort.
>>>
>>> For me the main reason for using pipes is to make code more
>>> readable. Using `[` and such constructs is not furthering that
>>> cause. When I use pipes I am almost always using tidyverse
>>> features, so I have dpyr::pull available, which is more readable,
>>> to me at least. Arguably, base R could have a similar function,
>>> but again I doubt this would be a good investment of time.
>>>
>>> An option that we have experimented with is to allow the placeholder
>>> at the head of an extraction chain. This is supported in the
>>> experimental branch at
>>> https://svn.r-project.org/R/branches/R-syntax. So for example:
>>>
>>> ???? > mtcars |> _$cyl[1]
>>> ???? [1] 6
>>>
>>> This may make it into R-devel for the next release, but it still needs
>>> more testing.
>>>
>>> Best,
>>>
>>> luke
>>>
>>>>
>>>> Hope this helps,
>>>>
>>>> Rui Barradas
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jul 28 17:16:40 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 28 Jul 2022 17:16:40 +0200
Subject: [Rd] 
 Warning with new placeholder piped to data.frame extractors
 `[` and `[[`.
In-Reply-To: <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
References: <2defedc0-ff0f-fa65-778b-f86a9e595c3c@sapo.pt>
 <CALK03d3QJ_eszOyPGr3vyKMPTcDznriSG1z_ZntCXDoZSc098g@mail.gmail.com>
Message-ID: <25314.43096.158115.951946@stat.math.ethz.ch>

>>>>> Toby Hocking 
>>>>>     on Mon, 18 Jul 2022 11:06:46 -0700 writes:
>>>>> Toby Hocking 
>>>>>     on Mon, 18 Jul 2022 11:06:46 -0700 writes:

    > Is the intent is to encourage the user to do something simpler like...
    > aggregate(y ~ f, df1, mean)$y
    > aggregate(y ~ f, df1, mean)["y"]
    > aggregate(y ~ f, df1, mean)[["y"]]
    > ??

Well, yes I'd hope so !!

Just because there is a pipe operator does not mean you should
no longer use reasonable R syntax !

Martin

    > On Sat, Jul 16, 2022 at 8:27 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:

    >> Hello,
    >> 
    >> When piping to any of `[.data.frame` or `[[.data.frame`, the placeholder
    >> in mandatory.
    >> 
    >> 
    >> df1 <- data.frame(y = 1:10, f = rep(c("a", "b"), each = 5))
    >> 
    >> aggregate(y ~ f, df1, mean) |> `[`('y')
    >> # Error: function '[' not supported in RHS call of a pipe
    >> 
    >> aggregate(y ~ f, df1, mean) |> `[[`('y')
    >> # Error: function '[' not supported in RHS call of a pipe
    >> 
    >> 
    >> 
    >> But if used it throws a warning.
    >> 
    >> 
    >> 
    >> aggregate(y ~ f, df1, mean) |> `[`(x = _, 'y')
    >> #  Warning in `[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"):
    >> named arguments
    >> #  other than 'drop' are discouraged
    >> #    y
    >> #  1 3
    >> #  2 8
    >> 
    >> aggregate(y ~ f, df1, mean) |> `[[`(x = _, 'y')
    >> #  Warning in `[[.data.frame`(x = aggregate(y ~ f, df1, mean), "y"): named
    >> #  arguments other than 'exact' are discouraged
    >> #  [1] 3 8
    >> 
    >> 
    >> 
    >> Hasn't this become inconsistent behavior?
    >> More than merely right, the named argument is mandatory, it shouldn't
    >> give warnings.
    >> 
    >> Hope this helps,
    >> 
    >> Rui Barradas
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From ezr@ @end|ng |rom |@ndtucker@com  Fri Jul 29 22:52:40 2022
From: ezr@ @end|ng |rom |@ndtucker@com (Ezra Tucker)
Date: Fri, 29 Jul 2022 16:52:40 -0400
Subject: [Rd] foreign::read.dbf fails to parse dbf properly
Message-ID: <7006ecf15d44d9552de794e37b0838e38783f2bc.camel@landtucker.com>

Dear R developers,

tl;dr I've been trying to read foxpro dbf files with
foreign::read.dbf(), they weren't being read properly, I patched the
foreign package to make it work, now what?

Long version:
I recently encountered unexpected behavior attempting to read dbf files
using foreign::read.dbf() from here:

https://forms.ferc.gov/f1allyears/f1_2020.zip

unzipped, in UPLOADERS/FORM1/working/F1_15.DBF - and as a note, this is
a foxpro database. I would expect the first row of the first column to
be 40, instead I am getting "(" (realizing that "(" has a decimal ascii
value of 40). The xbase docs indicate that this is a field of type "I"
which is a 4-byte integer unique to foxpro, and it doesn't look like
this case is contemplated by read.dbf()

I made some modifications to Rdbfread.c and dbfopen.c in the foreign
package (version 0.8-82) to add specific handling for field type "I".

I'm not current set up to contribute directly, I don't have SVN access.

1. Is this patch of general interest? I'm weighing in the development
guidelines:
  - DO NOT fix exotic bugs that haven't bugged anyone
  - DO make small enhancements if they are badly needed
and I feel like this is maybe a bit of an exotic lack-of-feature
(wouldn't call it a bug), and I have no idea if this is badly needed
(by anybody, other than myself)

2. if of general interest, how can I get set up with SVN credentials
for R-packages?

Thanks!
-Ezra


From Roger@B|v@nd @end|ng |rom nhh@no  Sat Jul 30 13:27:27 2022
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Sat, 30 Jul 2022 13:27:27 +0200 (CEST)
Subject: [Rd] foreign::read.dbf fails to parse dbf properly
In-Reply-To: <mailman.52795.5.1659175202.20002.r-devel@r-project.org>
References: <mailman.52795.5.1659175202.20002.r-devel@r-project.org>
Message-ID: <431c9d2b-b1c4-5f87-feae-611484e5c0fe@reclus2.nhh.no>

On Sat, 30 Jul 2022, r-devel-request at r-project.org wrote:

>
> Dear R developers,
>
> tl;dr I've been trying to read foxpro dbf files with
> foreign::read.dbf(), they weren't being read properly, I patched the
> foreign package to make it work, now what?
>
> Long version:
> I recently encountered unexpected behavior attempting to read dbf files
> using foreign::read.dbf() from here:
>
> https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fforms.ferc.gov%2Ff1allyears%2Ff1_2020.zip&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7C898bc868ceb14a50bef308da72127f0a%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637947721632932545%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=kQ8NhGxrgL4H0X3XsJPEoCAnEZIcmvwdEkUbepJupgE%3D&amp;reserved=0

As you may have seen in the code or the help page, the first port from the 
then version of shapelib: https://github.com/OSGeo/shapelib was made by 
Nicholas Lewin-Koh 20 years ago. The code is largely unchanged since then.

What is your OS and R version?

Reading F1_15.DBF (Fedora 36, locally built R 4.2.1), I see:

> summary(F1_15.DBF)
  RESPONDENT      REPORT_YEA     SPPLMNT_NU     ROW_NUMBER       ROW_SEQ
  \xc2   :  350   \xe4\a:25774   NA's:25774   U      :  874   U      :  874
  \001   :  248                               C      :  864   C      :  864
  \002   :  208                               T      :  846   T      :  846
  x      :  206                               \004   :  845   \004   :  845
  \x85   :  197                               \002   :  840   \002   :  840
  (Other):24363                               (Other):20813   (Other):20813
  NA's   :  202                               NA's   :  692   NA's   :  692
...

which is why another problem may be encoding since R 4.2 on Windows 
(UCRT).

The help page does say:

"The DBF format is documented but not much adhered to.  There is is
no guarantee this will read all DBF files."

and:

      'read.dbf' is based on C code from <http://shapelib.maptools.org/>
      which implements the 'XBASE' specification.  It can convert fields
      of type '"L"' (logical), '"N"' and '"F"' (numeric and float) and
      '"D"' (dates): all other field types are read as-is as character
      vectors.  A numeric field is read as an R integer vector if it is
      encoded to have no decimals, otherwise as a numeric vector.
      However, if the numbers are too large to fit into an integer
      vector, it is changed to numeric.  Note that is possible to read
      integers that cannot be represented exactly even as doubles: this
      sometimes occurs if IDs are incorrectly coded as numeric.

So pre-converting seems easier than retro-fitting, given the time since 
the function was first published. Libre Office seems to see 40, and 
writes 40 in a more accessible way, which can be read by read.dbf().

Using a program from GDAL (locally built 3.5.1, with its bundled shapelib, 
on Fedora 36 UTF-8 locale ), https://gdal.org/programs/ogr2ogr.html,

ogr2ogr -f CSV F1_15.csv F1_15.DBF
Warning 1: One or several characters couldn't be converted correctly from 
CP1252 to UTF-8.  This warning will not be emitted anymore

and "(" not 40. So it doesn't seem that updating the shapelib files in 
foreign would help.


In addition, there is an error under options("warn"=2L) in:

F1_EMAIL.DBF
Error in read.dbf(i) :
   (converted from warning) value |0| found in logical field

and possibly others which do not seem to relate to the field definition 
problem you identified.

Roger

>
> unzipped, in UPLOADERS/FORM1/working/F1_15.DBF - and as a note, this is
> a foxpro database. I would expect the first row of the first column to
> be 40, instead I am getting "(" (realizing that "(" has a decimal ascii
> value of 40). The xbase docs indicate that this is a field of type "I"
> which is a 4-byte integer unique to foxpro, and it doesn't look like
> this case is contemplated by read.dbf()
>
> I made some modifications to Rdbfread.c and dbfopen.c in the foreign
> package (version 0.8-82) to add specific handling for field type "I".
>
> I'm not current set up to contribute directly, I don't have SVN access.
>
> 1. Is this patch of general interest? I'm weighing in the development
> guidelines:
>  - DO NOT fix exotic bugs that haven't bugged anyone
>  - DO make small enhancements if they are badly needed
> and I feel like this is maybe a bit of an exotic lack-of-feature
> (wouldn't call it a bug), and I have no idea if this is badly needed
> (by anybody, other than myself)
>
> 2. if of general interest, how can I get set up with SVN credentials
> for R-packages?
>
> Thanks!
> -Ezra
>
>
>
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> R-devel at r-project.org mailing list  DIGESTED
> https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7C898bc868ceb14a50bef308da72127f0a%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637947721632932545%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=k1kdMDHIQJRYAKm1HVWiP9SvsxEDtP9JpF3r08HoGxU%3D&amp;reserved=0
>
>
> ------------------------------
>
> End of R-devel Digest, Vol 233, Issue 17
> ****************************************
>

-- 
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jul 30 14:17:25 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 30 Jul 2022 08:17:25 -0400
Subject: [Rd] foreign::read.dbf fails to parse dbf properly
In-Reply-To: <7006ecf15d44d9552de794e37b0838e38783f2bc.camel@landtucker.com>
References: <7006ecf15d44d9552de794e37b0838e38783f2bc.camel@landtucker.com>
Message-ID: <7c9da46f-3b77-149b-552f-109a57fa742c@gmail.com>

On 29/07/2022 4:52 p.m., Ezra Tucker wrote:
> Dear R developers,
> 
> tl;dr I've been trying to read foxpro dbf files with
> foreign::read.dbf(), they weren't being read properly, I patched the
> foreign package to make it work, now what?
> 
> Long version:
> I recently encountered unexpected behavior attempting to read dbf files
> using foreign::read.dbf() from here:
> 
> https://forms.ferc.gov/f1allyears/f1_2020.zip
> 
> unzipped, in UPLOADERS/FORM1/working/F1_15.DBF - and as a note, this is
> a foxpro database. I would expect the first row of the first column to
> be 40, instead I am getting "(" (realizing that "(" has a decimal ascii
> value of 40). The xbase docs indicate that this is a field of type "I"
> which is a 4-byte integer unique to foxpro, and it doesn't look like
> this case is contemplated by read.dbf()
> 
> I made some modifications to Rdbfread.c and dbfopen.c in the foreign
> package (version 0.8-82) to add specific handling for field type "I".
> 
> I'm not current set up to contribute directly, I don't have SVN access.
> 
> 1. Is this patch of general interest? I'm weighing in the development
> guidelines:
>    - DO NOT fix exotic bugs that haven't bugged anyone
>    - DO make small enhancements if they are badly needed
> and I feel like this is maybe a bit of an exotic lack-of-feature
> (wouldn't call it a bug), and I have no idea if this is badly needed
> (by anybody, other than myself)
> 
> 2. if of general interest, how can I get set up with SVN credentials
> for R-packages?

Roger addressed your first question.  I'll give some information about 
the second one.

You should automatically have read permission on the R-packages 
repository, as with most R svn repositories.

I think to get write permission, you'd need to be invited to join R 
Core, or to be a maintainer of the package.

The more common way to have changes accepted is to post them to the 
bugs.r-project.org web site.  See https://www.r-project.org/bugs.html 
for more details on how to get an account set up there so you can post 
things.

Duncan Murdoch


From ezr@ @end|ng |rom |@ndtucker@com  Sat Jul 30 19:36:17 2022
From: ezr@ @end|ng |rom |@ndtucker@com (Ezra Tucker)
Date: Sat, 30 Jul 2022 13:36:17 -0400
Subject: [Rd] foreign::read.dbf fails to parse dbf properly
In-Reply-To: <7c9da46f-3b77-149b-552f-109a57fa742c@gmail.com>
References: <7006ecf15d44d9552de794e37b0838e38783f2bc.camel@landtucker.com>
 <7c9da46f-3b77-149b-552f-109a57fa742c@gmail.com>
Message-ID: <55fea8946de292f5d1dd083ec6e0682797e1e01d.camel@landtucker.com>

Thank you all for your thoughts, I'll definitely submit my bug report
and patch there.

With respect to the data themselves and the data formats, in my
research I came across this document:
http://www.manmrk.net/tutorials/database/xbase/data_types.html
as a helpful reference

Forgot to mention, attempted all this on
R version 4.2.1 (2022-06-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Fedora Linux 36 (Workstation Edition)

and also on a Windows 10 machine running R version 4.2.1 with UCRT.

To Andre's and Roger's points, great minds- I did exactly the same
things, opening the dbf files in LibreOffice (works perfectly, so does
the soffice command line tool), also tried converting to csv using
ogr2ogr, and got EXACTLY the same problem as I'm seeing in R.

dbfopen.c says it's derived from Shapelib, documentation here:
http://shapelib.maptools.org/dbf_api.html
stating that DBFGetNativeFieldType() has support for C, D, F, N, L and
M data types, and if ogr2ogr uses the same source code from shapelib,
makes sense to me why it would interpret these values the same way.

I'll note really quickly that if this were a simple matter of
converting the ASCII, this wouldn't be an issue but certain characters
(mostly the control characters, backspace, delete, and a few others)
prevented me from accurately reconstructing all the original data once
they were loaded into R.

-Ezra

On Sat, 2022-07-30 at 08:17 -0400, Duncan Murdoch wrote:
> On 29/07/2022 4:52 p.m., Ezra Tucker wrote:
> > Dear R developers,
> > 
> > tl;dr I've been trying to read foxpro dbf files with
> > foreign::read.dbf(), they weren't being read properly, I patched
> > the
> > foreign package to make it work, now what?
> > 
> > Long version:
> > I recently encountered unexpected behavior attempting to read dbf
> > files
> > using foreign::read.dbf() from here:
> > 
> > https://forms.ferc.gov/f1allyears/f1_2020.zip
> > 
> > unzipped, in UPLOADERS/FORM1/working/F1_15.DBF - and as a note,
> > this is
> > a foxpro database. I would expect the first row of the first column
> > to
> > be 40, instead I am getting "(" (realizing that "(" has a decimal
> > ascii
> > value of 40). The xbase docs indicate that this is a field of type
> > "I"
> > which is a 4-byte integer unique to foxpro, and it doesn't look
> > like
> > this case is contemplated by read.dbf()
> > 
> > I made some modifications to Rdbfread.c and dbfopen.c in the
> > foreign
> > package (version 0.8-82) to add specific handling for field type
> > "I".
> > 
> > I'm not current set up to contribute directly, I don't have SVN
> > access.
> > 
> > 1. Is this patch of general interest? I'm weighing in the
> > development
> > guidelines:
> > ?? - DO NOT fix exotic bugs that haven't bugged anyone
> > ?? - DO make small enhancements if they are badly needed
> > and I feel like this is maybe a bit of an exotic lack-of-feature
> > (wouldn't call it a bug), and I have no idea if this is badly
> > needed
> > (by anybody, other than myself)
> > 
> > 2. if of general interest, how can I get set up with SVN
> > credentials
> > for R-packages?
> 
> Roger addressed your first question.? I'll give some information
> about 
> the second one.
> 
> You should automatically have read permission on the R-packages 
> repository, as with most R svn repositories.
> 
> I think to get write permission, you'd need to be invited to join R 
> Core, or to be a maintainer of the package.
> 
> The more common way to have changes accepted is to post them to the 
> bugs.r-project.org web site.? See https://www.r-
> project.org/bugs.html?
> for more details on how to get an account set up there so you can
> post 
> things.
> 
> Duncan Murdoch


