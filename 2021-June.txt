From jeroen @end|ng |rom berke|ey@edu  Tue Jun  1 14:38:11 2021
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Tue, 1 Jun 2021 14:38:11 +0200
Subject: [Rd] Patch: port getbyhostname to getaddrinfo
Message-ID: <CABFfbXu-0q6TOg=50B+qqPWF2TXNNOenyMgW72bjNTz8R739zQ@mail.gmail.com>

Perhaps now that nanohttp has been removed, it is a good time to do
some related cleanups.

In both Linux and Windows, gethostbyname and gethostbyaddr are marked
as obsolete. POSIX.1-2008 removes the specifications of
gethostbyname(), gethostbyaddr(), and h_errno, recommending the use of
getaddrinfo(3) and getnameinfo(3) instead.

Webview: https://github.com/r-devel/r-svn/pull/42/files
Patch: https://github.com/r-devel/r-svn/pull/42.diff


From j@ke@e|m@tedt @end|ng |rom gm@||@com  Wed Jun  2 12:08:59 2021
From: j@ke@e|m@tedt @end|ng |rom gm@||@com (Jake Elmstedt)
Date: Wed, 2 Jun 2021 03:08:59 -0700
Subject: [Rd] Feature Request with Proposed Solution: Update
 utils:::format.object_size() and utils:::print.object_size() to Respect
 Optional Formatting Arguments
Message-ID: <CAPTrVR5UgG0W6Tx=8xFFAJNAbUu-fX35Nq7EKvFWcc4q3Qdrgw@mail.gmail.com>

Problem:

When running the following commands:
x <- numeric(1e8)
format(object.size(x), units = "kB", standard = "SI")
#> [1] "8e+05 kB"
The object size is returned in scientific notation.

It is natural to assume we could use the argument 'scientific = FASLE'
to solve this.
format(object.size(x), units = "kB", standard = "SI", scientific = FALSE)
#> [1] "8e+05 kB"
But, the output is unchanged.

We can change the global scipen option to fix this, but this is not
ideal, nor does it address other potential optional arguments a user
may want to pass to format()/print().


Proposed Solution:
File: src/library/utils/R/object.size.R
Function:  format.object_size()

ADD lines at top of function:
    dots <- list(...)

DELETE:
    paste(round(x/base^power, digits = digits), unit)

ADD lines at the end of the function:
    value <- c(round(x/base^power, digits))
    dots[["width"]] <- NULL
    dots[["digits"]] <- max(ceiling(log10(value)), 0) + digits
    dots[["x"]] <- value
    format(paste(do.call(format, dots), unit), ...)

By removing any potential 'width' argument and updating the 'digits'
argument to reflect significant digits rather than decimal places in
'dots', the initial value is formatted with any additional arguments
included in the originating generic `format()` call, notably:
digits, nsmall, scientific, big.mark, big.interval, small.mark,
small.interval, decimal.mark, zero.print, and drop0trailing

The outer call to format() will format the character result of paste()
with arguments 'width' and 'justify'.


Function:  print.object_size()

DELETE:
y <- format.object_size(x, units = units, standard = standard, digits = digits)

ADD:
y <- format.object_size(x, units, standard, digits, ...)

This simply passes additional arguments to the above edited format.object_size()

These changes have the effect of allowing all possible optional
arguments to format() to be meaningfully used in format.object_size().

Potential conflicts:
Results of the updated function will be identical to the current
results in all cases where no additional arguments have been passed to
the function. So, code which does not rely on these arguments being
ignored will be unaffected.

However, existing code which passes additional formatting arguments
for "object_size" class objects which are currently being ignored may
result in different output. This could potentially cause errors if the
end user is doing anything programmatic with the results, though this
is only likely to cause problems if the code uses but ignores the
'big.mark', 'small.mark', 'decimal.mark', or 'zero.print' arguments
when formatting or printing "object_size" class objects. That said, it
can probably be expected most programmatic work will be done directly
on the "object_size" objects rather than the results of the format()
or print() methods for them. So, I would expect nearly zero issues
with existing code.


From x|@oy@n@yu @end|ng |rom gm@||@com  Wed Jun  2 22:33:21 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Wed, 2 Jun 2021 16:33:21 -0400
Subject: [Rd] How to get utf8 string using R externals
Message-ID: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>

I have a R Script Predict.R:
    set.seed(42)
    C <- seq(1:1000)
    A <- rep(seq(1:200),5)
    E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
    L <- ifelse(runif(1000)>.5,1,0)
    df <- data.frame(cbind(C, A, E, L))
load("C:/Temp/tree.RData")                #  load the model for scoring

  P <- as.character(predict(tree_model_1,df,type='class'))

Then in a C++ program
I call eval to evaluate the script and then findVar the P variable.
After get each class label from P using string_elt and then
Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) instead of
utf8 encoding of the korean characters ??.
Can I know how to get UTF8 by using R externals?

I also found the same script giving utf8 characters in RGui but unicode in
Rterm.
I tried to attach a screenshot but got message "The message's content type
was not explicitly allowed"
In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.

Please help.

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun  2 23:31:52 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 2 Jun 2021 17:31:52 -0400
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
Message-ID: <a2b168a4-4fad-9b59-3f3f-083bd7598578@gmail.com>

On 02/06/2021 4:33 p.m., xiaoyan yu wrote:
> I have a R Script Predict.R:
>      set.seed(42)
>      C <- seq(1:1000)
>      A <- rep(seq(1:200),5)
>      E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
>      L <- ifelse(runif(1000)>.5,1,0)
>      df <- data.frame(cbind(C, A, E, L))
> load("C:/Temp/tree.RData")                #  load the model for scoring
> 
>    P <- as.character(predict(tree_model_1,df,type='class'))
> 
> Then in a C++ program
> I call eval to evaluate the script and then findVar the P variable.
> After get each class label from P using string_elt and then
> Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) instead of
> utf8 encoding of the korean characters ??.
> Can I know how to get UTF8 by using R externals?
> 
> I also found the same script giving utf8 characters in RGui but unicode in
> Rterm.
> I tried to attach a screenshot but got message "The message's content type
> was not explicitly allowed"
> In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.

Sounds like you're using Windows.  Stop doing that.

Duncan Murdoch


From bbo|ker @end|ng |rom gm@||@com  Wed Jun  2 23:36:20 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 2 Jun 2021 17:36:20 -0400
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <a2b168a4-4fad-9b59-3f3f-083bd7598578@gmail.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
 <a2b168a4-4fad-9b59-3f3f-083bd7598578@gmail.com>
Message-ID: <e9f78037-b51f-82f0-49b0-3a091c5704e8@gmail.com>



On 6/2/21 5:31 PM, Duncan Murdoch wrote:
> On 02/06/2021 4:33 p.m., xiaoyan yu wrote:
>> I have a R Script Predict.R:
>> ???? set.seed(42)
>> ???? C <- seq(1:1000)
>> ???? A <- rep(seq(1:200),5)
>> ???? E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
>> ???? L <- ifelse(runif(1000)>.5,1,0)
>> ???? df <- data.frame(cbind(C, A, E, L))
>> load("C:/Temp/tree.RData")??????????????? #? load the model for scoring
>>
>> ?? P <- as.character(predict(tree_model_1,df,type='class'))
>>
>> Then in a C++ program
>> I call eval to evaluate the script and then findVar the P variable.
>> After get each class label from P using string_elt and then
>> Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) 
>> instead of
>> utf8 encoding of the korean characters ??.
>> Can I know how to get UTF8 by using R externals?
>>
>> I also found the same script giving utf8 characters in RGui but 
>> unicode in
>> Rterm.
>> I tried to attach a screenshot but got message "The message's content 
>> type
>> was not explicitly allowed"
>> In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
> 
> Sounds like you're using Windows.? Stop doing that.
> 
> Duncan Murdoch


   Shouldn't there be a smiley there somewhere?


From dw|n@em|u@ @end|ng |rom comc@@t@net  Thu Jun  3 00:09:14 2021
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Wed, 2 Jun 2021 15:09:14 -0700
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
Message-ID: <99d0c586-6341-554e-4bf8-5e4c9dc74c97@comcast.net>

First; you should configure yopu mail client to send plain text.

Can you explain what is meant by:

the characters are unicodes (<U+BD80><U+C2E4>) instead of
utf8 encoding of the korean characters ??.

As far as I can tell those two unicodes _are_ the utf8 encodings of ??.

You may need to consult a couple of R help pages. I suggest:

?Quotes
?points   # has examples of changing fonts used for display on console.

Sorry if I've misunderstood. I'm not on a Windows device, so  posting the C++ program won't be helpful, but maybe it would for other prospective respondents.

-- 
David.

On 6/2/21 1:33 PM, xiaoyan yu wrote:
> I have a R Script Predict.R:
>      set.seed(42)
>      C <- seq(1:1000)
>      A <- rep(seq(1:200),5)
>      E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
>      L <- ifelse(runif(1000)>.5,1,0)
>      df <- data.frame(cbind(C, A, E, L))
> load("C:/Temp/tree.RData")                #  load the model for scoring
>
>    P <- as.character(predict(tree_model_1,df,type='class'))
>
> Then in a C++ program
> I call eval to evaluate the script and then findVar the P variable.
> After get each class label from P using string_elt and then
> Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) instead of
> utf8 encoding of the korean characters ??.
> Can I know how to get UTF8 by using R externals?
>
> I also found the same script giving utf8 characters in RGui but unicode in
> Rterm.
> I tried to attach a screenshot but got message "The message's content type
> was not explicitly allowed"
> In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
>
> Please help.
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From morg@n@em@||box @end|ng |rom gm@||@com  Thu Jun  3 00:26:38 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Wed, 2 Jun 2021 23:26:38 +0100
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <a2b168a4-4fad-9b59-3f3f-083bd7598578@gmail.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
 <a2b168a4-4fad-9b59-3f3f-083bd7598578@gmail.com>
Message-ID: <CAL0QV_PEFijWz0BnOhqYzSFxBubpLd-jMfY+G1WW+KYujuULVA@mail.gmail.com>

On Wed, 2 Jun 2021, 22:31 Duncan Murdoch, <murdoch.duncan at gmail.com> wrote:

> On 02/06/2021 4:33 p.m., xiaoyan yu wrote:
> > I have a R Script Predict.R:
> >      set.seed(42)
> >      C <- seq(1:1000)
> >      A <- rep(seq(1:200),5)
> >      E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
> >      L <- ifelse(runif(1000)>.5,1,0)
> >      df <- data.frame(cbind(C, A, E, L))
> > load("C:/Temp/tree.RData")                #  load the model for scoring
> >
> >    P <- as.character(predict(tree_model_1,df,type='class'))
> >
> > Then in a C++ program
> > I call eval to evaluate the script and then findVar the P variable.
> > After get each class label from P using string_elt and then
> > Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) instead
> of
> > utf8 encoding of the korean characters ??.
> > Can I know how to get UTF8 by using R externals?
> >
> > I also found the same script giving utf8 characters in RGui but unicode
> in
> > Rterm.
> > I tried to attach a screenshot but got message "The message's content
> type
> > was not explicitly allowed"
> > In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
>
> Sounds like you're using Windows.  Stop doing that.
>
> Duncan Murdoch
>

Could as well say: "Sounds like you are using R. Stop doing that." Start
using Julia. ;-)



> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Thu Jun  3 01:00:50 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 2 Jun 2021 19:00:50 -0400
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <e9f78037-b51f-82f0-49b0-3a091c5704e8@gmail.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
 <a2b168a4-4fad-9b59-3f3f-083bd7598578@gmail.com>
 <e9f78037-b51f-82f0-49b0-3a091c5704e8@gmail.com>
Message-ID: <5f7db123-667c-908f-9f45-5a01a426bd39@gmail.com>

   Might the new UCRT build help?

https://developer.r-project.org/Blog/public/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/

On 6/2/21 5:36 PM, Ben Bolker wrote:
> 
> 
> On 6/2/21 5:31 PM, Duncan Murdoch wrote:
>> On 02/06/2021 4:33 p.m., xiaoyan yu wrote:
>>> I have a R Script Predict.R:
>>> ???? set.seed(42)
>>> ???? C <- seq(1:1000)
>>> ???? A <- rep(seq(1:200),5)
>>> ???? E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
>>> ???? L <- ifelse(runif(1000)>.5,1,0)
>>> ???? df <- data.frame(cbind(C, A, E, L))
>>> load("C:/Temp/tree.RData")??????????????? #? load the model for scoring
>>>
>>> ?? P <- as.character(predict(tree_model_1,df,type='class'))
>>>
>>> Then in a C++ program
>>> I call eval to evaluate the script and then findVar the P variable.
>>> After get each class label from P using string_elt and then
>>> Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) 
>>> instead of
>>> utf8 encoding of the korean characters ??.
>>> Can I know how to get UTF8 by using R externals?
>>>
>>> I also found the same script giving utf8 characters in RGui but 
>>> unicode in
>>> Rterm.
>>> I tried to attach a screenshot but got message "The message's content 
>>> type
>>> was not explicitly allowed"
>>> In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
>>
>> Sounds like you're using Windows.? Stop doing that.
>>
>> Duncan Murdoch
> 
> 
>  ? Shouldn't there be a smiley there somewhere?
>


From x|@oy@n@yu @end|ng |rom gm@||@com  Thu Jun  3 01:58:19 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Wed, 2 Jun 2021 19:58:19 -0400
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <99d0c586-6341-554e-4bf8-5e4c9dc74c97@comcast.net>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
 <99d0c586-6341-554e-4bf8-5e4c9dc74c97@comcast.net>
Message-ID: <CANjVfJ3Z_kjy==g45PJW52VWXCqXh=SLE2Xvz58scRP=t06AiQ@mail.gmail.com>

I am using gmail. Not sure of the configuration of plain text.
The memory pointed by the char * as the output of Rf_translateChar() is
actually the string "<U+BD80><U+C2E4>".



On Wed, Jun 2, 2021 at 6:09 PM David Winsemius <dwinsemius at comcast.net>
wrote:

> First; you should configure yopu mail client to send plain text.
>
> Can you explain what is meant by:
>
> the characters are unicodes (<U+BD80><U+C2E4>) instead of
> utf8 encoding of the korean characters ??.
>
> As far as I can tell those two unicodes _are_ the utf8 encodings of ??.
>
> You may need to consult a couple of R help pages. I suggest:
>
> ?Quotes
> ?points   # has examples of changing fonts used for display on console.
>
> Sorry if I've misunderstood. I'm not on a Windows device, so  posting the
> C++ program won't be helpful, but maybe it would for other prospective
> respondents.
>
> --
> David.
>
> On 6/2/21 1:33 PM, xiaoyan yu wrote:
> > I have a R Script Predict.R:
> >      set.seed(42)
> >      C <- seq(1:1000)
> >      A <- rep(seq(1:200),5)
> >      E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
> >      L <- ifelse(runif(1000)>.5,1,0)
> >      df <- data.frame(cbind(C, A, E, L))
> > load("C:/Temp/tree.RData")                #  load the model for scoring
> >
> >    P <- as.character(predict(tree_model_1,df,type='class'))
> >
> > Then in a C++ program
> > I call eval to evaluate the script and then findVar the P variable.
> > After get each class label from P using string_elt and then
> > Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) instead
> of
> > utf8 encoding of the korean characters ??.
> > Can I know how to get UTF8 by using R externals?
> >
> > I also found the same script giving utf8 characters in RGui but unicode
> in
> > Rterm.
> > I tried to attach a screenshot but got message "The message's content
> type
> > was not explicitly allowed"
> > In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
> >
> > Please help.
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Jun  3 03:08:05 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 3 Jun 2021 01:08:05 +0000 (UTC)
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <CANjVfJ3Z_kjy==g45PJW52VWXCqXh=SLE2Xvz58scRP=t06AiQ@mail.gmail.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
 <99d0c586-6341-554e-4bf8-5e4c9dc74c97@comcast.net>
 <CANjVfJ3Z_kjy==g45PJW52VWXCqXh=SLE2Xvz58scRP=t06AiQ@mail.gmail.com>
Message-ID: <1719007067.3024786.1622682485739@mail.yahoo.com>


> On Wednesday, June 2, 2021, 7:58:54 PM EDT, xiaoyan yu <xiaoyan.yu at gmail.com> wrote:
>
> I am using gmail. Not sure of the configuration of plain text.
> The memory pointed by the char * as the output of Rf_translateChar() is
> actually the string "<U+BD80><U+C2E4>".

Hi Xiaoyan,

Unfortunately I'm not super familiar with R on Windows, but I think
I can provide a simpler reproducible example.? In Rgui, if I type "\UBD80"
at the prompt and hit enter, I see the desired glyph.? In Rterm I see the
unicode escape.

IIRC the capabilities of Rterm and Rgui are different, and UTF8 support
in windows is limited.? Tomas Kalibera discusses this in some detail:

https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html

In terms of `Rf_translateChar()`, presumably the `Riconv` call is failing
on Rterm, but not on Rgui:

https://github.com/r-devel/r-svn/blob/master/src/main/sysutils.c#L924

I'm guessing, but that would explain why the C level string is in that
format.? I don't know why the string would translate in Rgui though.? My
guess is that it did not as even in Rgui the following:

??? enc2native("\uBD80")

Produces the escaped version of the string.

As others have suggested you could try the experimental UCRT Windows release:

https://developer.r-project.org/Blog/public/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/index.html

Install instructions (focus on Binary installer):

https://svn.r-project.org/R-dev-web/trunk/WindowsBuilds/winutf8/ucrt3/howto.html

If I try UCRT on my system this no longer produces the escape:

??? enc2native("\uBD80")

Although all I see is a question mark.? My guess is that my code page or
something similar is not set right.? Examining with `charToRaw` reveals
the string remains in UTF-8 encoding.

Aside: it's not clear to me that you need to translate the string if your
intent is for it to remain UTF-8.? You just don't seem to be set-up to
interpret UTF-8 strings currently.

Best,

B

> On Wed, Jun 2, 2021 at 6:09 PM David Winsemius <dwinsemius at comcast.net>
> wrote:
>
>> First; you should configure yopu mail client to send plain text.
>>
>> Can you explain what is meant by:
>>
>> the characters are unicodes (<U+BD80><U+C2E4>) instead of
>> utf8 encoding of the korean characters ??.
>>
>> As far as I can tell those two unicodes _are_ the utf8 encodings of ??.
>>
>> You may need to consult a couple of R help pages. I suggest:
>>
>> ?Quotes
>> ?points? # has examples of changing fonts used for display on console.
>>
>> Sorry if I've misunderstood. I'm not on a Windows device, so? posting the
>> C++ program won't be helpful, but maybe it would for other prospective
>> respondents.
>>
>> --
>> David.
>>
>> On 6/2/21 1:33 PM, xiaoyan yu wrote:
>> > I have a R Script Predict.R:
>> >????? set.seed(42)
>> >????? C <- seq(1:1000)
>> >????? A <- rep(seq(1:200),5)
>> >????? E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
>> >????? L <- ifelse(runif(1000)>.5,1,0)
>> >????? df <- data.frame(cbind(C, A, E, L))
>> > load("C:/Temp/tree.RData")??????????????? #? load the model for scoring
>> >
>> >??? P <- as.character(predict(tree_model_1,df,type='class'))
>> >
>> > Then in a C++ program
>> > I call eval to evaluate the script and then findVar the P variable.
>> > After get each class label from P using string_elt and then
>> > Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>) instead
>> of
>> > utf8 encoding of the korean characters ??.
>> > Can I know how to get UTF8 by using R externals?
>> >
>> > I also found the same script giving utf8 characters in RGui but unicode
>> in
>> > Rterm.
>> > I tried to attach a screenshot but got message "The message's content
>> type
>> > was not explicitly allowed"
>> > In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
>> >
>> > Please help.
>> >
>> >????? [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>>
>
>???? [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From x|@oy@n@yu @end|ng |rom gm@||@com  Thu Jun  3 17:39:36 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Thu, 3 Jun 2021 11:39:36 -0400
Subject: [Rd] How to get utf8 string using R externals
In-Reply-To: <1719007067.3024786.1622682485739@mail.yahoo.com>
References: <CANjVfJ0ciTGb9tR3bnYWGS4M=8uTGDsddSBx-4kxkULdyR1XxA@mail.gmail.com>
 <99d0c586-6341-554e-4bf8-5e4c9dc74c97@comcast.net>
 <CANjVfJ3Z_kjy==g45PJW52VWXCqXh=SLE2Xvz58scRP=t06AiQ@mail.gmail.com>
 <1719007067.3024786.1622682485739@mail.yahoo.com>
Message-ID: <CANjVfJ3=nNpd=DY2maZVxKMv5qvrG7ExKA7GY=8yDdU-uhgevg@mail.gmail.com>

Thanks! I tried my C++ program based on R externals and the same R script
and found the results shown are the desired glyph.
Hence this is R windows specific problem.


On Wed, Jun 2, 2021 at 9:08 PM brodie gaslam <brodie.gaslam at yahoo.com>
wrote:

>
> > On Wednesday, June 2, 2021, 7:58:54 PM EDT, xiaoyan yu <
> xiaoyan.yu at gmail.com> wrote:
> >
> > I am using gmail. Not sure of the configuration of plain text.
> > The memory pointed by the char * as the output of Rf_translateChar() is
> > actually the string "<U+BD80><U+C2E4>".
>
> Hi Xiaoyan,
>
> Unfortunately I'm not super familiar with R on Windows, but I think
> I can provide a simpler reproducible example.  In Rgui, if I type "\UBD80"
> at the prompt and hit enter, I see the desired glyph.  In Rterm I see the
> unicode escape.
>
> IIRC the capabilities of Rterm and Rgui are different, and UTF8 support
> in windows is limited.  Tomas Kalibera discusses this in some detail:
>
>
> https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html
>
> In terms of `Rf_translateChar()`, presumably the `Riconv` call is failing
> on Rterm, but not on Rgui:
>
> https://github.com/r-devel/r-svn/blob/master/src/main/sysutils.c#L924
>
> I'm guessing, but that would explain why the C level string is in that
> format.  I don't know why the string would translate in Rgui though.  My
> guess is that it did not as even in Rgui the following:
>
>     enc2native("\uBD80")
>
> Produces the escaped version of the string.
>
> As others have suggested you could try the experimental UCRT Windows
> release:
>
>
> https://developer.r-project.org/Blog/public/2021/03/12/windows/utf-8-toolchain-and-cran-package-checks/index.html
>
> Install instructions (focus on Binary installer):
>
>
> https://svn.r-project.org/R-dev-web/trunk/WindowsBuilds/winutf8/ucrt3/howto.html
>
> If I try UCRT on my system this no longer produces the escape:
>
>     enc2native("\uBD80")
>
> Although all I see is a question mark.  My guess is that my code page or
> something similar is not set right.  Examining with `charToRaw` reveals
> the string remains in UTF-8 encoding.
>
> Aside: it's not clear to me that you need to translate the string if your
> intent is for it to remain UTF-8.  You just don't seem to be set-up to
> interpret UTF-8 strings currently.
>
> Best,
>
> B
>
> > On Wed, Jun 2, 2021 at 6:09 PM David Winsemius <dwinsemius at comcast.net>
> > wrote:
> >
> >> First; you should configure yopu mail client to send plain text.
> >>
> >> Can you explain what is meant by:
> >>
> >> the characters are unicodes (<U+BD80><U+C2E4>) instead of
> >> utf8 encoding of the korean characters ??.
> >>
> >> As far as I can tell those two unicodes _are_ the utf8 encodings of ??.
> >>
> >> You may need to consult a couple of R help pages. I suggest:
> >>
> >> ?Quotes
> >> ?points  # has examples of changing fonts used for display on console.
> >>
> >> Sorry if I've misunderstood. I'm not on a Windows device, so  posting
> the
> >> C++ program won't be helpful, but maybe it would for other prospective
> >> respondents.
> >>
> >> --
> >> David.
> >>
> >> On 6/2/21 1:33 PM, xiaoyan yu wrote:
> >> > I have a R Script Predict.R:
> >> >      set.seed(42)
> >> >      C <- seq(1:1000)
> >> >      A <- rep(seq(1:200),5)
> >> >      E <- (seq(1:1000) * (0.8 + (0.4*runif(50, 0, 1))))
> >> >      L <- ifelse(runif(1000)>.5,1,0)
> >> >      df <- data.frame(cbind(C, A, E, L))
> >> > load("C:/Temp/tree.RData")                #  load the model for
> scoring
> >> >
> >> >    P <- as.character(predict(tree_model_1,df,type='class'))
> >> >
> >> > Then in a C++ program
> >> > I call eval to evaluate the script and then findVar the P variable.
> >> > After get each class label from P using string_elt and then
> >> > Rf_translateChar, the characters are unicodes (<U+BD80><U+C2E4>)
> instead
> >> of
> >> > utf8 encoding of the korean characters ??.
> >> > Can I know how to get UTF8 by using R externals?
> >> >
> >> > I also found the same script giving utf8 characters in RGui but
> unicode
> >> in
> >> > Rterm.
> >> > I tried to attach a screenshot but got message "The message's content
> >> type
> >> > was not explicitly allowed"
> >> > In RGui, I saw the output ??, while in Rterm, <U+BD80><U+C2E4>.
> >> >
> >> > Please help.
> >> >
> >> >      [[alternative HTML version deleted]]
> >> >
> >> > ______________________________________________
> >> > R-devel at r-project.org mailing list
> >> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >>
> >
> >     [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
>

	[[alternative HTML version deleted]]


From greg @end|ng |rom w@rne@@net  Thu Jun  3 23:01:23 2021
From: greg @end|ng |rom w@rne@@net (Greg Warnes)
Date: Thu, 3 Jun 2021 17:01:23 -0400
Subject: [Rd] [External] Re: 1954 from NA
In-Reply-To: <CAJ=0CtAhJOwV-UjMBO-KTH2CeqGQvBLiEkRksYhYHVcuVv0CsQ@mail.gmail.com>
References: <CAJ=0CtCfRMJM6wq1ggkSv2BNfX+CGnW2N-SZAN8poOG3ev=nUA@mail.gmail.com>
 <3443246.1621854690@apollo2.minshall.org>
 <CAJ=0CtDOuY+tVf+YxO0gdGY9XgaTv_Q4kMP2p_Z8CxrnHjT4-w@mail.gmail.com>
 <alpine.DEB.2.21.2105240805580.3254@luke-Latitude-7480>
 <016e01d7511b$29c3bea0$7d4b3be0$@verizon.net>
 <CAJ=0CtDC4jEfa-9qqDhixqSbvh1528wD5QpObQuwqxRs1EfiEw@mail.gmail.com>
 <01b201d75198$70f8a060$52e9e120$@verizon.net>
 <CAJ=0CtBofw9JoCUAxDGueYHZs5NghJD6A7ND97nfpvm_0n6fMg@mail.gmail.com>
 <7303ff84-bdf1-cc76-e9e2-e625e80a24ca@gmail.com>
 <CAJ=0CtDbZQHC1Z4gLHpkVmh1vfuShYHGqgZg4dvUorhjh79rdA@mail.gmail.com>
 <76bbec7f-4802-8903-9b3c-c215e4863ab4@gmail.com>
 <1328c364-264a-ddc2-1e56-ee2b3fc6b732@gmail.com>
 <CAJ=0CtAhJOwV-UjMBO-KTH2CeqGQvBLiEkRksYhYHVcuVv0CsQ@mail.gmail.com>
Message-ID: <325D0B85-F90C-4A92-9689-4DF9D21A3567@warnes.net>

I would be glad to add this to one of my R packages, probably `gdata`..

-G

Gregory R. Warnes, Ph.D.
greg at warnes.net
Eternity is a long time, take a friend!


> On May 26, 2021, at 1:09 PM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
> Yes, that is even better.
> Best,
> Adrian
> 
> On Wed, May 26, 2021 at 7:05 PM Duncan Murdoch <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>
> wrote:
> 
>> After 5 minutes more thought:
>> 
>> - code non-missing as missingKind = NA, not 0, so that missingKind could
>> be a character vector, or missingKind = 0 could be supported.
>> 
>> - print methods should return the main argument, so mine should be
>> 
>> print.MultiMissing <- function(x, ...) {
>>   vals <- as.character(x)
>>   if (!is.character(x) || inherits(x, "noquote"))
>>     print(noquote(vals))
>>   else
>>     print(vals)
>>   invisible(x)
>> }
>> 
>> This still needs a lot of improvement to be a good print method, but
>> I'll leave that to you.
>> 
>> Duncan Murdoch
>> 
>> On 26/05/2021 11:43 a.m., Duncan Murdoch wrote:
>>> On 26/05/2021 10:22 a.m., Adrian Du?a wrote:
>>>> Dear Duncan,
>>>> 
>>>> On Wed, May 26, 2021 at 2:27 AM Duncan Murdoch <
>> murdoch.duncan at gmail.com
>>>> <mailto:murdoch.duncan at gmail.com>> wrote:
>>>> 
>>>>     You've already been told how to solve this:  just add attributes
>> to the
>>>>     objects. Use the standard NA to indicate that there is some kind of
>>>>     missingness, and the attribute to describe exactly what it is.
>> Stick a
>>>>     class on those objects and define methods so that subsetting and
>>>>     arithmetic preserves the extra info you've added. If you do some
>>>>     operation that turns those NAs into NaNs, big deal:  the attribute
>> will
>>>>     still be there, and is.na <http://is.na>(NaN) still returns TRUE.
>>>> 
>>>> 
>>>> I've already tried the attributes way, it is not so easy.
>>> 
>>> If you have specific operations that are needed but that you can't get
>>> to work, post the issue here.
>>> 
>>>> In the best case scenario, it unnecessarily triples the size of the
>>>> data, but perhaps this is the only way forward.
>>> 
>>> I don't see how it could triple the size.  Surely an integer has enough
>>> values to cover all possible kinds of missingness.  So on integer or
>>> factor data you'd double the size, on real or character data you'd
>>> increase it by 50%.  (This is assuming you're on a 64 bit platform with
>>> 32 bit integers and 64 bit reals and pointers.)
>>> 
>>> Here's a tiny implementation to show what I'm talking about:
>>> 
>>> asMultiMissing <- function(x) {
>>>    if (isMultiMissing(x))
>>>      return(x)
>>>    missingKind <- ifelse(is.na(x), 1, 0)
>>>    structure(x,
>>>              missingKind = missingKind,
>>>              class = c("MultiMissing", class(x)))
>>> }
>>> 
>>> isMultiMissing <- function(x)
>>>    inherits(x, "MultiMissing")
>>> 
>>> missingKind <- function(x) {
>>>    if (isMultiMissing(x))
>>>      attr(x, "missingKind")
>>>    else
>>>      ifelse(is.na(x), 1, 0)
>>> }
>>> 
>>> `missingKind<-` <- function(x, value) {
>>>    class(x) <- setdiff(class(x), "MultiMissing")
>>>    x[value != 0] <- NA
>>>    x <- asMultiMissing(x)
>>>    attr(x, "missingKind") <- value
>>>    x
>>> }
>>> 
>>> `[.MultiMissing` <- function(x, i, ...) {
>>>    missings <- missingKind(x)
>>>    x <- NextMethod()
>>>    missings <- missings[i]
>>>    missingKind(x) <- missings
>>>    x
>>> }
>>> 
>>> print.MultiMissing <- function(x, ...) {
>>>    vals <- as.character(x)
>>>    if (!is.character(x) || inherits(x, "noquote"))
>>>      print(noquote(vals))
>>>    else
>>>      print(vals)
>>> }
>>> 
>>> `[<-.MultiMissing` <- function(x, i, value, ...) {
>>>    missings <- missingKind(x)
>>>    class(x) <- setdiff(class(x), "MultiMissing")
>>>    x[i] <- value
>>>    missings[i] <- missingKind(value)
>>>    missingKind(x) <- missings
>>>    x
>>> }
>>> 
>>> as.character.MultiMissing <- function(x, ...) {
>>>    missings <- missingKind(x)
>>>    result <- NextMethod()
>>>    ifelse(missings != 0,
>>>           paste0("NA.", missings), result)
>>> 
>>> }
>>> 
>>> This is incomplete.  It doesn't do printing very well, and it doesn't
>>> handle the case of assigning a MultiMissing value to a regular vector at
>>> all.  (I think you'd need an S4 implementation if you want to support
>>> that.)  But it does the basics:
>>> 
>>>> x <- 1:10
>>>> missingKind(x)[4] <- 23
>>>> x
>>>   [1] 1     2     3     NA.23 5     6     7     8     9
>>> [10] 10
>>>> is.na(x)
>>>   [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
>>> [10] FALSE
>>>> missingKind(x)
>>>   [1]  0  0  0 23  0  0  0  0  0  0
>>>> 
>>> 
>>> Duncan Murdoch
>>> 
>>>> 
>>>>     Base R doesn't need anything else.
>>>> 
>>>>     You complained that users shouldn't need to know about attributes,
>> and
>>>>     they won't:  you, as the author of the package that does this, will
>>>>     handle all those details.  Working in your subject area you know
>> all
>>>>     the
>>>>     different kinds of NAs that people care about, and how they code
>>>>     them in
>>>>     input data, so you can make it all totally transparent.  If you do
>> it
>>>>     well, someone in some other subject area with a completely
>> different
>>>>     set
>>>>     of kinds of missingness will be able to adapt your code to their
>> use.
>>>> 
>>>> 
>>>> But that is the whole point: the package author does not define possible
>>>> NAs (the possibilities are infinite), users do that.
>>>> The package should only provide a simple method to achieve that.
>>>> 
>>>> 
>>>>     I imagine this has all been done in one of the thousands of
>> packages on
>>>>     CRAN, but if it hasn't been done well enough for you, do it better.
>>>> 
>>>> 
>>>> If it were, I would have found it by now...
>>>> 
>>>> Best wishes,
>>>> Adrian
>>> 
>> 
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  5 22:05:40 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 5 Jun 2021 16:05:40 -0400
Subject: [Rd] Remove env var with .Renviron?
Message-ID: <0cee5c91-9d03-861c-3960-96b1503a2322@gmail.com>

I have two .Renviron files:  one in my home directory, one in the 
current directory.  From my reading of ?Startup, I thought the local one 
would override the home dir one, and if I set a value, it does. 
However, if the local .Renviron contains

RGL_DEBUGGING=

while the home one contains

RGL_DEBUGGING=true

I see that the env var is set to "true" when I start R.  I need to set 
the local one to

RGL_DEBUGGING=""

to set a zero-length value. Is this expected?

Duncan Murdoch


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  5 22:08:36 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 5 Jun 2021 16:08:36 -0400
Subject: [Rd] Remove env var with .Renviron?
In-Reply-To: <0cee5c91-9d03-861c-3960-96b1503a2322@gmail.com>
References: <0cee5c91-9d03-861c-3960-96b1503a2322@gmail.com>
Message-ID: <69c3c633-786f-a432-1bd5-73ead5b0d177@gmail.com>

On 05/06/2021 4:05 p.m., Duncan Murdoch wrote:
> I have two .Renviron files:  one in my home directory, one in the
> current directory.  From my reading of ?Startup, I thought the local one
> would override the home dir one, and if I set a value, it does.
> However, if the local .Renviron contains
> 
> RGL_DEBUGGING=
> 
> while the home one contains
> 
> RGL_DEBUGGING=true
> 
> I see that the env var is set to "true" when I start R.  I need to set
> the local one to
> 
> RGL_DEBUGGING=""
> 
> to set a zero-length value. Is this expected?

An update:  this looks like an RStudio bug; I'm not seeing the same 
weird behaviour in command line R.  Sorry for the noise!

Duncan Murdoch


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Mon Jun  7 09:00:04 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Mon, 7 Jun 2021 07:00:04 +0000
Subject: [Rd] dgTMatrix Segmentation Fault
Message-ID: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

I notice that summing rows of a large dgTMatrix fails.

library(Matrix)
aMatrix <- new("dgTMatrix",
                i = as.integer(sample(200000, 10000)-1), j = as.integer(sample(50000, 10000)-1), x = rnorm(10000),
		Dim = c(200000L, 50000L)
	      )
totals <- rowSums(aMatrix == 0)  # Segmentation fault.

The server has 768 GB of RAM and it was never close to being consumed by this. Converting it to an ordinary matrix works fine.

big <- as.matrix(aMatrix)
totals <- rowSums(big == 0)      # Uses more RAM but there is no segmentation fault and result is returned.

May it be made more robust for dgTMatrix?

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Mon Jun  7 10:00:13 2021
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Mon, 7 Jun 2021 10:00:13 +0200
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
Message-ID: <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>

Le 07/06/2021 ? 09:00, Dario Strbenac a ?crit?:
> Good day,
>
> I notice that summing rows of a large dgTMatrix fails.
>
> library(Matrix)
> aMatrix <- new("dgTMatrix",
>                  i = as.integer(sample(200000, 10000)-1), j = as.integer(sample(50000, 10000)-1), x = rnorm(10000),
> 		Dim = c(200000L, 50000L)
> 	      )
> totals <- rowSums(aMatrix == 0)  # Segmentation fault.

On my R v4.1 (Ubuntu 18), I don't have a segfault but I do have an error 
message:

Error in h(simpleError(msg, call)) :
 ? error in evaluating the argument 'x' in selecting a method for 
function 'rowSums': cannot allocate vector of size 372.5 Gb

And the reason for this is quite clear: an intermediate logical matrix 
'aMatrix == 0' is almost dense thus having 200000L*50000L - 10000L non 
zero entries. It is a little bit too much ;) for my modest laptop. So I 
can propose a workaround:

 ??? totals <- 50000 - rowSums(aMatrix != 0)

Hoping it helps.

Best,
Serguei.

>
> The server has 768 GB of RAM and it was never close to being consumed by this. Converting it to an ordinary matrix works fine.
>
> big <- as.matrix(aMatrix)
> totals <- rowSums(big == 0)      # Uses more RAM but there is no segmentation fault and result is returned.
>
> May it be made more robust for dgTMatrix?
>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Tue Jun  8 11:00:04 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Tue, 8 Jun 2021 09:00:04 +0000
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>,
 <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
Message-ID: <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

Indeed, changing the logical test is a workaround to the problem. However, a segmentation fault means that the software tried to access an invalid memory location, so I think the original problem should be addressed in Matrix package, regardless.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Jun  8 11:59:11 2021
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 8 Jun 2021 11:59:11 +0200
Subject: [Rd] Non-mutable ALTREP objects
Message-ID: <CABtg=K=Wru6wLn8J-BcZXYs0XiTj2yhXp-_6SV0XDpO20g8kEg@mail.gmail.com>

Dear all,

I have another ALTREP question. In the
https://github.com/ALTREP-examples/Rpkg-simplemmap example, it is
possible to mmap a file read-write with wrtOK = TRUE.

This is a pretty cool use case, one can change the mapped vector (in
C), and the change is synchronized with the file, and also other
processes that map the same file.

On the other hand, I wonder if it violates some contract, because it
means that an R object might change without any code touching it, if
the mapped file is updated from another R session or through another
variable.

Does this violate the pass by value semantics?

Can this cause issues in the interpreter or the byte code compiler? Or
is there some guarantee that evaluating these objects will always call
their ALTREP methods?

FWIW these objects are marked as non-mutable. Does that change anything?

Thank you,
Gabor


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jun  8 18:32:14 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 8 Jun 2021 18:32:14 +0200
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
 <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>
Message-ID: <24767.39822.987117.724657@stat.math.ethz.ch>

>>>>> Dario Strbenac 
>>>>>     on Tue, 8 Jun 2021 09:00:04 +0000 writes:

    > Good day, Indeed, changing the logical test is a
    > workaround to the problem. However, a segmentation fault
    > means that the software tried to access an invalid memory
    > location, so I think the original problem should be
    > addressed in Matrix package, regardless.

Hmm, you maybe right or not ..

Note we have the situation you (via R) ask your computer
(i.e. the OS system memory allocation routines) to provide
memory.

In a reasonable setup, the OS routine returns, saying
"I cannot provide the memory you asked for",
and the R function stop() s. .. no segfault, all is fine.

The problem that on some platforms that does not work, is a
relatively deep problem  and also has happened in base R in some
cases on some platforms (possibly never on Linux based ones
(Ubuntu, Debian, Fedora, CentOS..),  but maybe I'm too
optimistic there as well.

Note: I now also tried on our oldish Windows (Terminal) Server,
and it also just gave errors that it could not allocate so much
memory but did not produce a seg.fault.


Currently, I don't see what we should improve in the Matrix
package here.

Martin Maechler
(co-maintainer of 'Matrix')

    > --------------------------------------
    > Dario Strbenac University of Sydney Camperdown NSW 2050
    > Australia


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Wed Jun  9 12:08:34 2021
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Wed, 9 Jun 2021 12:08:34 +0200
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <24767.39822.987117.724657@stat.math.ethz.ch>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
 <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <24767.39822.987117.724657@stat.math.ethz.ch>
Message-ID: <661d72aa-655e-68ac-edfe-e37e9d39c6b8@insa-toulouse.fr>

Le 08/06/2021 ? 18:32, Martin Maechler a ?crit?:
>>>>>> Dario Strbenac
>>>>>>      on Tue, 8 Jun 2021 09:00:04 +0000 writes:
>      > Good day, Indeed, changing the logical test is a
>      > workaround to the problem. However, a segmentation fault
>      > means that the software tried to access an invalid memory
>      > location, so I think the original problem should be
>      > addressed in Matrix package, regardless.
>
> Hmm, you maybe right or not ..
>
> Note we have the situation you (via R) ask your computer
> (i.e. the OS system memory allocation routines) to provide
> memory.
>
> In a reasonable setup, the OS routine returns, saying
> "I cannot provide the memory you asked for",
> and the R function stop() s. .. no segfault, all is fine.
>
> The problem that on some platforms that does not work, is a
> relatively deep problem  and also has happened in base R in some
> cases on some platforms (possibly never on Linux based ones
> (Ubuntu, Debian, Fedora, CentOS..),  but maybe I'm too
> optimistic there as well.
>
> Note: I now also tried on our oldish Windows (Terminal) Server,
> and it also just gave errors that it could not allocate so much
> memory but did not produce a seg.fault.
>
>
> Currently, I don't see what we should improve in the Matrix
> package here.
Is it possible (pure hypothesis) that when such a big piece of memory is 
available, some int32 counter is out of bounds?
Here, we have almost 1.e10 non-zero elements. This number is greater 
than 2**31-1 (int32 limit) and even greater than unit32 limit (2**32).
Just a thought.

Best,
Serguei.

>
> Martin Maechler
> (co-maintainer of 'Matrix')
>
>      > --------------------------------------
>      > Dario Strbenac University of Sydney Camperdown NSW 2050
>      > Australia
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Thu Jun 10 03:00:25 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Thu, 10 Jun 2021 01:00:25 +0000
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <661d72aa-655e-68ac-edfe-e37e9d39c6b8@insa-toulouse.fr>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
 <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <24767.39822.987117.724657@stat.math.ethz.ch>,
 <661d72aa-655e-68ac-edfe-e37e9d39c6b8@insa-toulouse.fr>
Message-ID: <SYBPR01MB4761734287C9B00F00B2BD9ACD369@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

Thanks to handy hints from Martin Morgan, I ran R under gdb and checked for any numeric overflow. We pinpointed the cause:

(gdb) info locals
i = 0
j = 10738
m = 200000
n = 50000
ans = 0x55555b332790
aa = 0x55555b3327c0

There is a line of C code in dgeMatrix.c for (i = 0; i < m; i++) aa[i] += xx[i + j * m];

i  + j * m are all int, and overflow
(lldb) print 0 + 10738 * 200000
(int) $5 = -2147367296

So, either the code should check that this doesn't occur, or be adjusted to allow for large indexes.

If anyone is interested, this is in the context of single-cell ATAC-seq data, which typically has about 200000 genomic regions (rows) and perhaps 100000 biological cells (columns).

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From bbo|ker @end|ng |rom gm@||@com  Thu Jun 10 03:11:18 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 9 Jun 2021 21:11:18 -0400
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <SYBPR01MB4761734287C9B00F00B2BD9ACD369@SYBPR01MB4761.ausprd01.prod.outlook.com>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
 <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <24767.39822.987117.724657@stat.math.ethz.ch>
 <661d72aa-655e-68ac-edfe-e37e9d39c6b8@insa-toulouse.fr>
 <SYBPR01MB4761734287C9B00F00B2BD9ACD369@SYBPR01MB4761.ausprd01.prod.outlook.com>
Message-ID: <d8ed920a-d993-eae0-8229-699846849b74@gmail.com>

   Nice!

On 6/9/21 9:00 PM, Dario Strbenac via R-devel wrote:
> Good day,
> 
> Thanks to handy hints from Martin Morgan, I ran R under gdb and checked for any numeric overflow. We pinpointed the cause:
> 
> (gdb) info locals
> i = 0
> j = 10738
> m = 200000
> n = 50000
> ans = 0x55555b332790
> aa = 0x55555b3327c0
> 
> There is a line of C code in dgeMatrix.c for (i = 0; i < m; i++) aa[i] += xx[i + j * m];
> 
> i  + j * m are all int, and overflow
> (lldb) print 0 + 10738 * 200000
> (int) $5 = -2147367296
> 
> So, either the code should check that this doesn't occur, or be adjusted to allow for large indexes.
> 
> If anyone is interested, this is in the context of single-cell ATAC-seq data, which typically has about 200000 genomic regions (rows) and perhaps 100000 biological cells (columns).
> 
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jun 10 09:13:09 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 10 Jun 2021 09:13:09 +0200
Subject: [Rd] dgTMatrix Segmentation Fault
In-Reply-To: <d8ed920a-d993-eae0-8229-699846849b74@gmail.com>
References: <SYBPR01MB4761C684F1CA43CA4945FA25CD389@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <91d30364-998a-c783-b9c5-9b05405d30b2@insa-toulouse.fr>
 <SYBPR01MB4761A3436511885B1346831ACD379@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <24767.39822.987117.724657@stat.math.ethz.ch>
 <661d72aa-655e-68ac-edfe-e37e9d39c6b8@insa-toulouse.fr>
 <SYBPR01MB4761734287C9B00F00B2BD9ACD369@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <d8ed920a-d993-eae0-8229-699846849b74@gmail.com>
Message-ID: <24769.48005.562512.857009@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Wed, 9 Jun 2021 21:11:18 -0400 writes:

    > Nice!

Indeed -- and thanks a lot, Dario (and Martin Morgan !) for
getting down to the root problem.

so, indeed a bug in Matrix (though "far away" from 'dgTMatrix').

Thank you once more!

Martin Maechler

    > On 6/9/21 9:00 PM, Dario Strbenac via R-devel wrote:
    >> Good day,
    >> 
    >> Thanks to handy hints from Martin Morgan, I ran R under gdb and checked for any numeric overflow. We pinpointed the cause:
    >> 
    >> (gdb) info locals
    >> i = 0
    >> j = 10738
    >> m = 200000
    >> n = 50000
    >> ans = 0x55555b332790
    >> aa = 0x55555b3327c0
    >> 
    >> There is a line of C code in dgeMatrix.c for (i = 0; i < m; i++) aa[i] += xx[i + j * m];
    >> 
    >> i  + j * m are all int, and overflow
    >> (lldb) print 0 + 10738 * 200000
    >> (int) $5 = -2147367296
    >> 
    >> So, either the code should check that this doesn't occur, or be adjusted to allow for large indexes.
    >> 
    >> If anyone is interested, this is in the context of single-cell ATAC-seq data, which typically has about 200000 genomic regions (rows) and perhaps 100000 biological cells (columns).
    >> 
    >> --------------------------------------
    >> Dario Strbenac
    >> University of Sydney
    >> Camperdown NSW 2050
    >> Australia
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From c@c@voeten @end|ng |rom hum@|e|denun|v@n|  Sat Jun 12 15:44:20 2021
From: c@c@voeten @end|ng |rom hum@|e|denun|v@n| (Cesko Voeten)
Date: Sat, 12 Jun 2021 15:44:20 +0200
Subject: [Rd] Bracketed paste issues on Linux
Message-ID: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>

I am on an up-to-date Arch Linux system, using the GNOME desktop environment. By default, this turns on bracketed paste in terminal emulators; for those not familiar with this concept: it makes it so that if you paste in multiple lines of code, they are received in a single chunk. This works just fine with R, up to a certain amount of text: for chunks past a certain length, some amount of text in the middle of the chunk goes missing. For example, if I print the source of mgcv::gam into my R session and then attempt to copy and paste it back in, what I end up with is:

<snip 53 perfectly good lines>
            pmf$formula <- gp$pf
            pmf <- eval(pmf, parent.frame())
}   objectvironment(attr(object$pred.formula, "full")) <- .GlobalEnv<- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv

So:
 - the first 55 lines in this example arrive perfectly fine
 - then a bunch go completely missing
 - then various parts of the last few lines are jumbled together into one line

For reference on the third point, the actual last 10 lines of my version of mgcv::gam are:
    if (is.null(object$deviance)) 
        object$deviance <- sum(residuals(object, "deviance")^2)
    names(object$gcv.ubre) <- method
    environment(object$formula) <- environment(object$pred.formula) <- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
    if (!is.null(object$model)) 
        environment(attr(object$model, "terms")) <- .GlobalEnv
    if (!is.null(attr(object$pred.formula, "full"))) 
        environment(attr(object$pred.formula, "full")) <- .GlobalEnv
    object
}

parts of which can be recognized in the last line of what was pasted.
Naturally, the pasted function is not parsed properly: if I press return I get the expected "+" signaling that the REPL is expecting more input. So it is not merely a visual issue.

I can reproduce this both in GNOME Terminal and in xterm, so it is not a bug specific to my terminal emulator. In addition, pasting the exact same code into either vim or nano running within the same terminal works fine. So I believe that this may be a bug in R itself. It's easy to work around by disabling bracketed paste in the terminal, but it would be great if this could actually be made to work, especially given that bracketed paste is the default on my desktop environment.

If given an account, I would be happy to file this as a bug; let me know if that is desired. In the meantime, have others run into this and perhaps identified the root cause and/or a different workaround?

Thanks,
Cesko

sessionInfo():

R version 4.1.0 (2021-05-18)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Arch Linux

Matrix products: default
BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so

locale:
 [1] LC_CTYPE=nl_NL.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=nl_NL.UTF-8        LC_COLLATE=nl_NL.UTF-8    
 [5] LC_MONETARY=nl_NL.UTF-8    LC_MESSAGES=nl_NL.UTF-8   
 [7] LC_PAPER=nl_NL.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.1.0  Matrix_1.3-4    mgcv_1.8-36     splines_4.1.0  
[5] nlme_3.1-152    grid_4.1.0      lattice_0.20-44


From v|ncent@gou|et @end|ng |rom me@com  Sat Jun 12 23:32:57 2021
From: v|ncent@gou|et @end|ng |rom me@com (Vincent Goulet)
Date: Sat, 12 Jun 2021 17:32:57 -0400
Subject: [Rd] Small typo in ?NumericConstants
Message-ID: <81047719-7ABF-4AAE-A076-EBC9B5A89359@me.com>

Hi,

I stumbled upon this small typo in ?base::NumericConstants:

Index: library/base/man/NumericConstants.Rd
===================================================================
--- library/base/man/NumericConstants.Rd	(r?vision 80490)
+++ library/base/man/NumericConstants.Rd	(copie de travail)
@@ -47,7 +47,7 @@
   A numeric constant immediately followed by \code{i} is regarded as an
   imaginary \link{complex} number.
 
-  An numeric constant immediately followed by \code{L} is regarded as an
+  A numeric constant immediately followed by \code{L} is regarded as an
   \code{\link{integer}} number when possible (and with a warning if it
   contains a \code{"."}).

Best,

v.

From kev|nu@hey @end|ng |rom gm@||@com  Sun Jun 13 01:39:24 2021
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Sat, 12 Jun 2021 16:39:24 -0700
Subject: [Rd] small typo in internet.c
Message-ID: <CAJXgQP2goBgYaVO4-fm4740nE4C9nh_9by-bEDy0p+dys=Csvw@mail.gmail.com>

Hello,

I spotted a small typo recently in R-devel:

$ rg "htto://"
src/modules/internet/internet.c
95:     warning(_("the 'wininet' method of url() is deprecated for
htto:// and https:// URLs"));

I suspect 'htto://' should read 'http://'.

Thanks,
Kevin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sun Jun 13 09:18:04 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sun, 13 Jun 2021 09:18:04 +0200
Subject: [Rd] small typo in internet.c
In-Reply-To: <CAJXgQP2goBgYaVO4-fm4740nE4C9nh_9by-bEDy0p+dys=Csvw@mail.gmail.com>
References: <CAJXgQP2goBgYaVO4-fm4740nE4C9nh_9by-bEDy0p+dys=Csvw@mail.gmail.com>
Message-ID: <924f31a8-ce4e-5ce3-73a7-69a9338d3bbf@gmail.com>

Thanks, fixed now.
Tomas

On 6/13/21 1:39 AM, Kevin Ushey wrote:
> Hello,
>
> I spotted a small typo recently in R-devel:
>
> $ rg "htto://"
> src/modules/internet/internet.c
> 95:     warning(_("the 'wininet' method of url() is deprecated for
> htto:// and https:// URLs"));
>
> I suspect 'htto://' should read 'http://'.
>
> Thanks,
> Kevin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sun Jun 13 09:28:40 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sun, 13 Jun 2021 09:28:40 +0200
Subject: [Rd] Small typo in ?NumericConstants
In-Reply-To: <81047719-7ABF-4AAE-A076-EBC9B5A89359@me.com>
References: <81047719-7ABF-4AAE-A076-EBC9B5A89359@me.com>
Message-ID: <bef3eb50-80d4-11b2-d199-fade189d23d8@gmail.com>

Thanks, fixed now.
Tomas

On 6/12/21 11:32 PM, Vincent Goulet via R-devel wrote:
> Hi,
>
> I stumbled upon this small typo in ?base::NumericConstants:
>
> Index: library/base/man/NumericConstants.Rd
> ===================================================================
> --- library/base/man/NumericConstants.Rd	(r?vision 80490)
> +++ library/base/man/NumericConstants.Rd	(copie de travail)
> @@ -47,7 +47,7 @@
>     A numeric constant immediately followed by \code{i} is regarded as an
>     imaginary \link{complex} number.
>   
> -  An numeric constant immediately followed by \code{L} is regarded as an
> +  A numeric constant immediately followed by \code{L} is regarded as an
>     \code{\link{integer}} number when possible (and with a warning if it
>     contains a \code{"."}).
>
> Best,
>
> v.
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sun Jun 13 10:00:27 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sun, 13 Jun 2021 10:00:27 +0200
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
Message-ID: <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>

Thanks for the report. Could you please also post output from 
extSoftVersion() ?

What happens if you paste just a smaller part of the code before the 
long line? Is the output still corrupted? If so, is it corrupted the 
same way, at the same places?

(It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)

Thanks
Tomas

On 6/12/21 3:44 PM, Cesko Voeten wrote:
> I am on an up-to-date Arch Linux system, using the GNOME desktop environment. By default, this turns on bracketed paste in terminal emulators; for those not familiar with this concept: it makes it so that if you paste in multiple lines of code, they are received in a single chunk. This works just fine with R, up to a certain amount of text: for chunks past a certain length, some amount of text in the middle of the chunk goes missing. For example, if I print the source of mgcv::gam into my R session and then attempt to copy and paste it back in, what I end up with is:
>
> <snip 53 perfectly good lines>
>              pmf$formula <- gp$pf
>              pmf <- eval(pmf, parent.frame())
> }   objectvironment(attr(object$pred.formula, "full")) <- .GlobalEnv<- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
>
> So:
>   - the first 55 lines in this example arrive perfectly fine
>   - then a bunch go completely missing
>   - then various parts of the last few lines are jumbled together into one line
>
> For reference on the third point, the actual last 10 lines of my version of mgcv::gam are:
>      if (is.null(object$deviance))
>          object$deviance <- sum(residuals(object, "deviance")^2)
>      names(object$gcv.ubre) <- method
>      environment(object$formula) <- environment(object$pred.formula) <- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
>      if (!is.null(object$model))
>          environment(attr(object$model, "terms")) <- .GlobalEnv
>      if (!is.null(attr(object$pred.formula, "full")))
>          environment(attr(object$pred.formula, "full")) <- .GlobalEnv
>      object
> }
>
> parts of which can be recognized in the last line of what was pasted.
> Naturally, the pasted function is not parsed properly: if I press return I get the expected "+" signaling that the REPL is expecting more input. So it is not merely a visual issue.
>
> I can reproduce this both in GNOME Terminal and in xterm, so it is not a bug specific to my terminal emulator. In addition, pasting the exact same code into either vim or nano running within the same terminal works fine. So I believe that this may be a bug in R itself. It's easy to work around by disabling bracketed paste in the terminal, but it would be great if this could actually be made to work, especially given that bracketed paste is the default on my desktop environment.
>
> If given an account, I would be happy to file this as a bug; let me know if that is desired. In the meantime, have others run into this and perhaps identified the root cause and/or a different workaround?
>
> Thanks,
> Cesko
>
> sessionInfo():
>
> R version 4.1.0 (2021-05-18)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Arch Linux
>
> Matrix products: default
> BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
>
> locale:
>   [1] LC_CTYPE=nl_NL.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=nl_NL.UTF-8        LC_COLLATE=nl_NL.UTF-8
>   [5] LC_MONETARY=nl_NL.UTF-8    LC_MESSAGES=nl_NL.UTF-8
>   [7] LC_PAPER=nl_NL.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.1.0  Matrix_1.3-4    mgcv_1.8-36     splines_4.1.0
> [5] nlme_3.1-152    grid_4.1.0      lattice_0.20-44
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@c@voeten @end|ng |rom hum@|e|denun|v@n|  Sun Jun 13 10:59:40 2021
From: c@c@voeten @end|ng |rom hum@|e|denun|v@n| (Voeten, C.C.)
Date: Sun, 13 Jun 2021 08:59:40 +0000
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>,
 <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
Message-ID: <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>

Thanks for looking into this! I've just compiled today's R-devel snapshot, and it shows the same issue. extSoftVersion() from that build:

                                             zlib
                                         "1.2.11"
                                            bzlib
                             "1.0.8, 13-Jul-2019"
                                               xz
                                          "5.2.5"
                                             PCRE
                               "10.37 2021-05-26"
                                              ICU
                                           "69.1"
                                              TRE
                        "TRE 0.8.0 R_fixes (BSD)"
                                            iconv
                                     "glibc 2.33"
                                         readline
                                            "8.1"
                                             BLAS
"/home/cesko/r-devel/usr/lib64/R/lib/libRblas.so"


Thanks for your observation that it works on your system - that implicates my readline-8.1 as being the culprit. Unfortunately, I don't dare attempt to downgrade it on my system to test, and regardless we still don't know why other readline-using programs can paste in the same text with no issues.


I've made some further progress on debugging: I noticed that text <4096 bytes in size arrives fine (although sometimes with visual corruption), but text >4096 bytes doesn't. Pasting in the result of perl -e 'print ("if(T)cat(\"a\")\n"x292)' works as expected, changing the 292 to 293 causes R to print a bunch of a's followed by the source code of the cat function.


To still answer your question: with mgcv::gam, pasting in the first 94 lines (as printed by R with options(width=80)) produces a visual corruption of the prompt (it reads "G$family <- familyar.summaryintercept = drop.intercept)) control$scalePenalty,") but if I press return and type the closing "}" the code has actually arrived just fine. The text up to and including that line is 4023 bytes in size; when trying to add in more, it fails again.

Cesko

________________________________
Van: Tomas Kalibera <tomas.kalibera at gmail.com>
Verzonden: zondag 13 juni 2021 10:00:27
Aan: Voeten, C.C.; r-devel at r-project.org
Onderwerp: Re: [Rd] Bracketed paste issues on Linux

Thanks for the report. Could you please also post output from
extSoftVersion() ?

What happens if you paste just a smaller part of the code before the
long line? Is the output still corrupted? If so, is it corrupted the
same way, at the same places?

(It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)

Thanks
Tomas

On 6/12/21 3:44 PM, Cesko Voeten wrote:
> I am on an up-to-date Arch Linux system, using the GNOME desktop environment. By default, this turns on bracketed paste in terminal emulators; for those not familiar with this concept: it makes it so that if you paste in multiple lines of code, they are received in a single chunk. This works just fine with R, up to a certain amount of text: for chunks past a certain length, some amount of text in the middle of the chunk goes missing. For example, if I print the source of mgcv::gam into my R session and then attempt to copy and paste it back in, what I end up with is:
>
> <snip 53 perfectly good lines>
>              pmf$formula <- gp$pf
>              pmf <- eval(pmf, parent.frame())
> }   objectvironment(attr(object$pred.formula, "full")) <- .GlobalEnv<- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
>
> So:
>   - the first 55 lines in this example arrive perfectly fine
>   - then a bunch go completely missing
>   - then various parts of the last few lines are jumbled together into one line
>
> For reference on the third point, the actual last 10 lines of my version of mgcv::gam are:
>      if (is.null(object$deviance))
>          object$deviance <- sum(residuals(object, "deviance")^2)
>      names(object$gcv.ubre) <- method
>      environment(object$formula) <- environment(object$pred.formula) <- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
>      if (!is.null(object$model))
>          environment(attr(object$model, "terms")) <- .GlobalEnv
>      if (!is.null(attr(object$pred.formula, "full")))
>          environment(attr(object$pred.formula, "full")) <- .GlobalEnv
>      object
> }
>
> parts of which can be recognized in the last line of what was pasted.
> Naturally, the pasted function is not parsed properly: if I press return I get the expected "+" signaling that the REPL is expecting more input. So it is not merely a visual issue.
>
> I can reproduce this both in GNOME Terminal and in xterm, so it is not a bug specific to my terminal emulator. In addition, pasting the exact same code into either vim or nano running within the same terminal works fine. So I believe that this may be a bug in R itself. It's easy to work around by disabling bracketed paste in the terminal, but it would be great if this could actually be made to work, especially given that bracketed paste is the default on my desktop environment.
>
> If given an account, I would be happy to file this as a bug; let me know if that is desired. In the meantime, have others run into this and perhaps identified the root cause and/or a different workaround?
>
> Thanks,
> Cesko
>
> sessionInfo():
>
> R version 4.1.0 (2021-05-18)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Arch Linux
>
> Matrix products: default
> BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
>
> locale:
>   [1] LC_CTYPE=nl_NL.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=nl_NL.UTF-8        LC_COLLATE=nl_NL.UTF-8
>   [5] LC_MONETARY=nl_NL.UTF-8    LC_MESSAGES=nl_NL.UTF-8
>   [7] LC_PAPER=nl_NL.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.1.0  Matrix_1.3-4    mgcv_1.8-36     splines_4.1.0
> [5] nlme_3.1-152    grid_4.1.0      lattice_0.20-44
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jun 14 08:33:49 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 14 Jun 2021 08:33:49 +0200
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
 <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
 <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>
Message-ID: <4df9dc14-34f6-401a-5580-d06d7a028e90@gmail.com>

Thanks, Cesko, for more debugging. As you are already compiling the 
code, could you please try increasing CONSOLE_BUFFER_SIZE in 
./include/Defn.h from 4096 to some very large value (e.g. 1024 times), 
rebuild R and check if the problems (not all bytes received correctly, 
visual corruption) go away for texts of the size you looked at before?


Thanks,
Tomas



On 6/13/21 10:59 AM, Voeten, C.C. wrote:
>
> Thanks for looking into this! I've just compiled today's R-devel 
> snapshot, and it shows the same issue. extSoftVersion() from that build:
>
> ???????????????????????????????????????????? zlib
> ???????????????????????????????????????? "1.2.11"
> ??????????????????????????????????????????? bzlib
> ???????????????????????????? "1.0.8, 13-Jul-2019"
> ?????????????????????????????????????????????? xz
> ????????????????????????????????????????? "5.2.5"
> ???????????????????????????????????????????? PCRE
> ?????????????????????????????? "10.37 2021-05-26"
> ????????????????????????????????????????????? ICU
> ?????????????????????????????????????????? "69.1"
> ????????????????????????????????????????????? TRE
> ??????????????????????? "TRE 0.8.0 R_fixes (BSD)"
> ??????????????????????????????????????????? iconv
> ???????????????????????????????????? "glibc 2.33"
> ???????????????????????????????????????? readline
> ??????????????????????????????????????????? "8.1"
> ???????????????????????????????????????????? BLAS
> "/home/cesko/r-devel/usr/lib64/R/lib/libRblas.so"
>
> Thanks for your observation that it works on your system - that 
> implicates my readline-8.1 as being the culprit. Unfortunately, I 
> don't dare attempt to downgrade it on my system to test, and 
> regardless we still don't know why other readline-using programs can 
> paste in the same text with no issues.
>
>
> I've made some further progress on debugging: I noticed that text 
> <4096 bytes in size arrives fine (although sometimes with visual 
> corruption), but text >4096 bytes doesn't. Pasting in the result of 
> perl -e 'print ("if(T)cat(\"a\")\n"x292)' works as expected, changing 
> the 292 to 293 causes R to print a bunch of a's followed by the source 
> code of the cat function.
>
>
> To still answer your question: with mgcv::gam, pasting in the first 94 
> lines (as printed by R with options(width=80)) produces a visual 
> corruption of the prompt (it reads "G$family <- 
> familyar.summaryintercept = drop.intercept)) control$scalePenalty,") 
> but if I press return and type the closing "}" the code has actually 
> arrived just fine. The text up to and including that line is 4023 
> bytes in size; when trying to add in more, it fails again.
>
>
> Cesko
> ------------------------------------------------------------------------
> *Van:* Tomas Kalibera <tomas.kalibera at gmail.com>
> *Verzonden:* zondag 13 juni 2021 10:00:27
> *Aan:* Voeten, C.C.; r-devel at r-project.org
> *Onderwerp:* Re: [Rd] Bracketed paste issues on Linux
> Thanks for the report. Could you please also post output from
> extSoftVersion() ?
>
> What happens if you paste just a smaller part of the code before the
> long line? Is the output still corrupted? If so, is it corrupted the
> same way, at the same places?
>
> (It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)
>
> Thanks
> Tomas
>
> On 6/12/21 3:44 PM, Cesko Voeten wrote:
> > I am on an up-to-date Arch Linux system, using the GNOME desktop 
> environment. By default, this turns on bracketed paste in terminal 
> emulators; for those not familiar with this concept: it makes it so 
> that if you paste in multiple lines of code, they are received in a 
> single chunk. This works just fine with R, up to a certain amount of 
> text: for chunks past a certain length, some amount of text in the 
> middle of the chunk goes missing. For example, if I print the source 
> of mgcv::gam into my R session and then attempt to copy and paste it 
> back in, what I end up with is:
> >
> > <snip 53 perfectly good lines>
> >????????????? pmf$formula <- gp$pf
> >????????????? pmf <- eval(pmf, parent.frame())
> > }?? objectvironment(attr(object$pred.formula, "full")) <- 
> .GlobalEnv<- environment(object$terms) <- environment(object$pterms) 
> <- .GlobalEnv
> >
> > So:
> >?? - the first 55 lines in this example arrive perfectly fine
> >?? - then a bunch go completely missing
> >?? - then various parts of the last few lines are jumbled together 
> into one line
> >
> > For reference on the third point, the actual last 10 lines of my 
> version of mgcv::gam are:
> >????? if (is.null(object$deviance))
> >????????? object$deviance <- sum(residuals(object, "deviance")^2)
> >????? names(object$gcv.ubre) <- method
> >????? environment(object$formula) <- environment(object$pred.formula) 
> <- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
> >????? if (!is.null(object$model))
> >????????? environment(attr(object$model, "terms")) <- .GlobalEnv
> >????? if (!is.null(attr(object$pred.formula, "full")))
> >????????? environment(attr(object$pred.formula, "full")) <- .GlobalEnv
> >????? object
> > }
> >
> > parts of which can be recognized in the last line of what was pasted.
> > Naturally, the pasted function is not parsed properly: if I press 
> return I get the expected "+" signaling that the REPL is expecting 
> more input. So it is not merely a visual issue.
> >
> > I can reproduce this both in GNOME Terminal and in xterm, so it is 
> not a bug specific to my terminal emulator. In addition, pasting the 
> exact same code into either vim or nano running within the same 
> terminal works fine. So I believe that this may be a bug in R itself. 
> It's easy to work around by disabling bracketed paste in the terminal, 
> but it would be great if this could actually be made to work, 
> especially given that bracketed paste is the default on my desktop 
> environment.
> >
> > If given an account, I would be happy to file this as a bug; let me 
> know if that is desired. In the meantime, have others run into this 
> and perhaps identified the root cause and/or a different workaround?
> >
> > Thanks,
> > Cesko
> >
> > sessionInfo():
> >
> > R version 4.1.0 (2021-05-18)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Arch Linux
> >
> > Matrix products: default
> > BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
> >
> > locale:
> >?? [1] LC_CTYPE=nl_NL.UTF-8?????? LC_NUMERIC=C
> >?? [3] LC_TIME=nl_NL.UTF-8??????? LC_COLLATE=nl_NL.UTF-8
> >?? [5] LC_MONETARY=nl_NL.UTF-8 LC_MESSAGES=nl_NL.UTF-8
> >?? [7] LC_PAPER=nl_NL.UTF-8?????? LC_NAME=C
> >?? [9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> > [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats???? graphics? grDevices utils???? datasets methods?? base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_4.1.0? Matrix_1.3-4??? mgcv_1.8-36 splines_4.1.0
> > [5] nlme_3.1-152??? grid_4.1.0????? lattice_0.20-44
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>

	[[alternative HTML version deleted]]


From c@c@voeten @end|ng |rom hum@|e|denun|v@n|  Mon Jun 14 12:06:05 2021
From: c@c@voeten @end|ng |rom hum@|e|denun|v@n| (Cesko Voeten)
Date: Mon, 14 Jun 2021 12:06:05 +0200
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <4df9dc14-34f6-401a-5580-d06d7a028e90@gmail.com>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
 <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
 <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>
 <4df9dc14-34f6-401a-5580-d06d7a028e90@gmail.com>
Message-ID: <e1286a24-9a47-b573-a4a3-0c6db4b0ea67@hum.leidenuniv.nl>

Making it 1024 times larger gives:

installing 'sysdata.rda'
Error: segfault from C stack overflow

Making it only 4 times larger provides a usable R. In my test case of copying&pasting mgcv::gam, I observe the same visual corruption at the prompt as before, but when pressing return it has actually been received correctly. My real-world problem involved a file 33KiB in size, which - as expected, since 16KiB < 33KiB - still has the same problem as before.

I know nothing about readline, but I presume that there is no way for this buffer size to be dynamically resized at run time. In that case, maybe R should simply force-disable readline's bracketed paste? By the way, according to readline's changelog, this does indeed seem to be a feature that changed (viz. was enabled in more places) from readline-8.0 to readline-8.1.

Finally, please disregard my earlier comment about vim and nano working just fine. They do, but they don't actually use readline (according to ldd), so don't provide a valid comparison.

Thanks for your efforts!
Cesko

On 14-06-2021 at 08:33, Tomas Kalibera wrote:
> Thanks, Cesko, for more debugging. As you are already compiling the code, could you please try increasing CONSOLE_BUFFER_SIZE in ./include/Defn.h from 4096 to some very large value (e.g. 1024 times), rebuild R and check if the problems (not all bytes received correctly, visual corruption) go away for texts of the size you looked at before?
> 
> 
> Thanks,
> Tomas
> 
> 
> 
> On 6/13/21 10:59 AM, Voeten, C.C. wrote:
>>
>> Thanks for looking into this! I've just compiled today's R-devel snapshot, and it shows the same issue. extSoftVersion() from that build:
>>
>> ???????????????????????????????????????????? zlib
>> ???????????????????????????????????????? "1.2.11"
>> ??????????????????????????????????????????? bzlib
>> ???????????????????????????? "1.0.8, 13-Jul-2019"
>> ?????????????????????????????????????????????? xz
>> ????????????????????????????????????????? "5.2.5"
>> ???????????????????????????????????????????? PCRE
>> ?????????????????????????????? "10.37 2021-05-26"
>> ????????????????????????????????????????????? ICU
>> ?????????????????????????????????????????? "69.1"
>> ????????????????????????????????????????????? TRE
>> ??????????????????????? "TRE 0.8.0 R_fixes (BSD)"
>> ??????????????????????????????????????????? iconv
>> ???????????????????????????????????? "glibc 2.33"
>> ???????????????????????????????????????? readline
>> ??????????????????????????????????????????? "8.1"
>> ???????????????????????????????????????????? BLAS
>> "/home/cesko/r-devel/usr/lib64/R/lib/libRblas.so"
>>
>> Thanks for your observation that it works on your system - that implicates my readline-8.1 as being the culprit. Unfortunately, I don't dare attempt to downgrade it on my system to test, and regardless we still don't know why other readline-using programs can paste in the same text with no issues.
>>
>>
>> I've made some further progress on debugging: I noticed that text <4096 bytes in size arrives fine (although sometimes with visual corruption), but text >4096 bytes doesn't. Pasting in the result of perl -e 'print ("if(T)cat(\"a\")\n"x292)' works as expected, changing the 292 to 293 causes R to print a bunch of a's followed by the source code of the cat function.
>>
>>
>> To still answer your question: with mgcv::gam, pasting in the first 94 lines (as printed by R with options(width=80)) produces a visual corruption of the prompt (it reads "G$family <- familyar.summaryintercept = drop.intercept)) control$scalePenalty,") but if I press return and type the closing "}" the code has actually arrived just fine. The text up to and including that line is 4023 bytes in size; when trying to add in more, it fails again.
>>
>>
>> Cesko

>> *Van:* Tomas Kalibera <tomas.kalibera at gmail.com>
>> *Verzonden:* zondag 13 juni 2021 10:00:27
>> *Aan:* Voeten, C.C.; r-devel at r-project.org
>> *Onderwerp:* Re: [Rd] Bracketed paste issues on Linux
>> Thanks for the report. Could you please also post output from
>> extSoftVersion() ?
>>
>> What happens if you paste just a smaller part of the code before the
>> long line? Is the output still corrupted? If so, is it corrupted the
>> same way, at the same places?
>>
>> (It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)
>>
>> Thanks
>> Tomas
>>
>> On 6/12/21 3:44 PM, Cesko Voeten wrote:
>> > I am on an up-to-date Arch Linux system, using the GNOME desktop environment. By default, this turns on bracketed paste in terminal emulators; for those not familiar with this concept: it makes it so that if you paste in multiple lines of code, they are received in a single chunk. This works just fine with R, up to a certain amount of text: for chunks past a certain length, some amount of text in the middle of the chunk goes missing. For example, if I print the source of mgcv::gam into my R session and then attempt to copy and paste it back in, what I end up with is:
>> >
>> > <snip 53 perfectly good lines>
>> >????????????? pmf$formula <- gp$pf
>> >????????????? pmf <- eval(pmf, parent.frame())
>> > }?? objectvironment(attr(object$pred.formula, "full")) <- .GlobalEnv<- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
>> >
>> > So:
>> >?? - the first 55 lines in this example arrive perfectly fine
>> >?? - then a bunch go completely missing
>> >?? - then various parts of the last few lines are jumbled together into one line
>> >
>> > For reference on the third point, the actual last 10 lines of my version of mgcv::gam are:
>> >????? if (is.null(object$deviance))
>> >????????? object$deviance <- sum(residuals(object, "deviance")^2)
>> >????? names(object$gcv.ubre) <- method
>> >????? environment(object$formula) <- environment(object$pred.formula) <- environment(object$terms) <- environment(object$pterms) <- .GlobalEnv
>> >????? if (!is.null(object$model))
>> >????????? environment(attr(object$model, "terms")) <- .GlobalEnv
>> >????? if (!is.null(attr(object$pred.formula, "full")))
>> >????????? environment(attr(object$pred.formula, "full")) <- .GlobalEnv
>> >????? object
>> > }
>> >
>> > parts of which can be recognized in the last line of what was pasted.
>> > Naturally, the pasted function is not parsed properly: if I press return I get the expected "+" signaling that the REPL is expecting more input. So it is not merely a visual issue.
>> >
>> > I can reproduce this both in GNOME Terminal and in xterm, so it is not a bug specific to my terminal emulator. In addition, pasting the exact same code into either vim or nano running within the same terminal works fine. So I believe that this may be a bug in R itself. It's easy to work around by disabling bracketed paste in the terminal, but it would be great if this could actually be made to work, especially given that bracketed paste is the default on my desktop environment.
>> >
>> > If given an account, I would be happy to file this as a bug; let me know if that is desired. In the meantime, have others run into this and perhaps identified the root cause and/or a different workaround?
>> >
>> > Thanks,
>> > Cesko
>> >
>> > sessionInfo():
>> >
>> > R version 4.1.0 (2021-05-18)
>> > Platform: x86_64-pc-linux-gnu (64-bit)
>> > Running under: Arch Linux
>> >
>> > Matrix products: default
>> > BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
>> >
>> > locale:
>> >?? [1] LC_CTYPE=nl_NL.UTF-8?????? LC_NUMERIC=C
>> >?? [3] LC_TIME=nl_NL.UTF-8??????? LC_COLLATE=nl_NL.UTF-8
>> >?? [5] LC_MONETARY=nl_NL.UTF-8 LC_MESSAGES=nl_NL.UTF-8
>> >?? [7] LC_PAPER=nl_NL.UTF-8?????? LC_NAME=C
>> >?? [9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>> > [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
>> >
>> > attached base packages:
>> > [1] stats???? graphics? grDevices utils???? datasets methods?? base
>> >
>> > loaded via a namespace (and not attached):
>> > [1] compiler_4.1.0? Matrix_1.3-4??? mgcv_1.8-36 splines_4.1.0
>> > [5] nlme_3.1-152??? grid_4.1.0????? lattice_0.20-44
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>

From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Jun 15 11:09:15 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 15 Jun 2021 10:09:15 +0100
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <e1286a24-9a47-b573-a4a3-0c6db4b0ea67@hum.leidenuniv.nl>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
 <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
 <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>
 <4df9dc14-34f6-401a-5580-d06d7a028e90@gmail.com>
 <e1286a24-9a47-b573-a4a3-0c6db4b0ea67@hum.leidenuniv.nl>
Message-ID: <b4150cda-9b00-7776-9308-74c33d0a33a7@stats.ox.ac.uk>

I would have used source("clipboard") on systems which support it (Tomas 
has confirmed it works on Linux).  See ?file.

The macOS equivalent source(pipe("pbpaste")) also works.

On 14/06/2021 11:06, Cesko Voeten wrote:
> Making it 1024 times larger gives:
> 
> installing 'sysdata.rda'
> Error: segfault from C stack overflow
> 
> Making it only 4 times larger provides a usable R. In my test case of 
> copying&pasting mgcv::gam, I observe the same visual corruption at the 
> prompt as before, but when pressing return it has actually been received 
> correctly. My real-world problem involved a file 33KiB in size, which - 
> as expected, since 16KiB < 33KiB - still has the same problem as before.
> 
> I know nothing about readline, but I presume that there is no way for 
> this buffer size to be dynamically resized at run time. In that case, 
> maybe R should simply force-disable readline's bracketed paste? By the 
> way, according to readline's changelog, this does indeed seem to be a 
> feature that changed (viz. was enabled in more places) from readline-8.0 
> to readline-8.1.
> 
> Finally, please disregard my earlier comment about vim and nano working 
> just fine. They do, but they don't actually use readline (according to 
> ldd), so don't provide a valid comparison.
> 
> Thanks for your efforts!
> Cesko
> 
> On 14-06-2021 at 08:33, Tomas Kalibera wrote:
>> Thanks, Cesko, for more debugging. As you are already compiling the 
>> code, could you please try increasing CONSOLE_BUFFER_SIZE in 
>> ./include/Defn.h from 4096 to some very large value (e.g. 1024 times), 
>> rebuild R and check if the problems (not all bytes received correctly, 
>> visual corruption) go away for texts of the size you looked at before?
>>
>>
>> Thanks,
>> Tomas
>>
>>
>>
>> On 6/13/21 10:59 AM, Voeten, C.C. wrote:
>>>
>>> Thanks for looking into this! I've just compiled today's R-devel 
>>> snapshot, and it shows the same issue. extSoftVersion() from that build:
>>>
>>> ???????????????????????????????????????????? zlib
>>> ???????????????????????????????????????? "1.2.11"
>>> ??????????????????????????????????????????? bzlib
>>> ???????????????????????????? "1.0.8, 13-Jul-2019"
>>> ?????????????????????????????????????????????? xz
>>> ????????????????????????????????????????? "5.2.5"
>>> ???????????????????????????????????????????? PCRE
>>> ?????????????????????????????? "10.37 2021-05-26"
>>> ????????????????????????????????????????????? ICU
>>> ?????????????????????????????????????????? "69.1"
>>> ????????????????????????????????????????????? TRE
>>> ??????????????????????? "TRE 0.8.0 R_fixes (BSD)"
>>> ??????????????????????????????????????????? iconv
>>> ???????????????????????????????????? "glibc 2.33"
>>> ???????????????????????????????????????? readline
>>> ??????????????????????????????????????????? "8.1"
>>> ???????????????????????????????????????????? BLAS
>>> "/home/cesko/r-devel/usr/lib64/R/lib/libRblas.so"
>>>
>>> Thanks for your observation that it works on your system - that 
>>> implicates my readline-8.1 as being the culprit. Unfortunately, I 
>>> don't dare attempt to downgrade it on my system to test, and 
>>> regardless we still don't know why other readline-using programs can 
>>> paste in the same text with no issues.
>>>
>>>
>>> I've made some further progress on debugging: I noticed that text 
>>> <4096 bytes in size arrives fine (although sometimes with visual 
>>> corruption), but text >4096 bytes doesn't. Pasting in the result of 
>>> perl -e 'print ("if(T)cat(\"a\")\n"x292)' works as expected, changing 
>>> the 292 to 293 causes R to print a bunch of a's followed by the 
>>> source code of the cat function.
>>>
>>>
>>> To still answer your question: with mgcv::gam, pasting in the first 
>>> 94 lines (as printed by R with options(width=80)) produces a visual 
>>> corruption of the prompt (it reads "G$family <- 
>>> familyar.summaryintercept = drop.intercept)) control$scalePenalty,") 
>>> but if I press return and type the closing "}" the code has actually 
>>> arrived just fine. The text up to and including that line is 4023 
>>> bytes in size; when trying to add in more, it fails again.
>>>
>>>
>>> Cesko

>>>
>>> *Van:* Tomas Kalibera <tomas.kalibera at gmail.com>
>>> *Verzonden:* zondag 13 juni 2021 10:00:27
>>> *Aan:* Voeten, C.C.; r-devel at r-project.org
>>> *Onderwerp:* Re: [Rd] Bracketed paste issues on Linux
>>> Thanks for the report. Could you please also post output from
>>> extSoftVersion() ?
>>>
>>> What happens if you paste just a smaller part of the code before the
>>> long line? Is the output still corrupted? If so, is it corrupted the
>>> same way, at the same places?
>>>
>>> (It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)
>>>
>>> Thanks
>>> Tomas
>>>
>>> On 6/12/21 3:44 PM, Cesko Voeten wrote:
>>> > I am on an up-to-date Arch Linux system, using the GNOME desktop 
>>> environment. By default, this turns on bracketed paste in terminal 
>>> emulators; for those not familiar with this concept: it makes it so 
>>> that if you paste in multiple lines of code, they are received in a 
>>> single chunk. This works just fine with R, up to a certain amount of 
>>> text: for chunks past a certain length, some amount of text in the 
>>> middle of the chunk goes missing. For example, if I print the source 
>>> of mgcv::gam into my R session and then attempt to copy and paste it 
>>> back in, what I end up with is:
>>> >
>>> > <snip 53 perfectly good lines>
>>> >????????????? pmf$formula <- gp$pf
>>> >????????????? pmf <- eval(pmf, parent.frame())
>>> > }?? objectvironment(attr(object$pred.formula, "full")) <- 
>>> .GlobalEnv<- environment(object$terms) <- environment(object$pterms) 
>>> <- .GlobalEnv
>>> >
>>> > So:
>>> >?? - the first 55 lines in this example arrive perfectly fine
>>> >?? - then a bunch go completely missing
>>> >?? - then various parts of the last few lines are jumbled together 
>>> into one line
>>> >
>>> > For reference on the third point, the actual last 10 lines of my 
>>> version of mgcv::gam are:
>>> >????? if (is.null(object$deviance))
>>> >????????? object$deviance <- sum(residuals(object, "deviance")^2)
>>> >????? names(object$gcv.ubre) <- method
>>> >????? environment(object$formula) <- 
>>> environment(object$pred.formula) <- environment(object$terms) <- 
>>> environment(object$pterms) <- .GlobalEnv
>>> >????? if (!is.null(object$model))
>>> >????????? environment(attr(object$model, "terms")) <- .GlobalEnv
>>> >????? if (!is.null(attr(object$pred.formula, "full")))
>>> >????????? environment(attr(object$pred.formula, "full")) <- .GlobalEnv
>>> >????? object
>>> > }
>>> >
>>> > parts of which can be recognized in the last line of what was pasted.
>>> > Naturally, the pasted function is not parsed properly: if I press 
>>> return I get the expected "+" signaling that the REPL is expecting 
>>> more input. So it is not merely a visual issue.
>>> >
>>> > I can reproduce this both in GNOME Terminal and in xterm, so it is 
>>> not a bug specific to my terminal emulator. In addition, pasting the 
>>> exact same code into either vim or nano running within the same 
>>> terminal works fine. So I believe that this may be a bug in R itself. 
>>> It's easy to work around by disabling bracketed paste in the 
>>> terminal, but it would be great if this could actually be made to 
>>> work, especially given that bracketed paste is the default on my 
>>> desktop environment.
>>> >
>>> > If given an account, I would be happy to file this as a bug; let me 
>>> know if that is desired. In the meantime, have others run into this 
>>> and perhaps identified the root cause and/or a different workaround?
>>> >
>>> > Thanks,
>>> > Cesko
>>> >
>>> > sessionInfo():
>>> >
>>> > R version 4.1.0 (2021-05-18)
>>> > Platform: x86_64-pc-linux-gnu (64-bit)
>>> > Running under: Arch Linux
>>> >
>>> > Matrix products: default
>>> > BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
>>> >
>>> > locale:
>>> >?? [1] LC_CTYPE=nl_NL.UTF-8?????? LC_NUMERIC=C
>>> >?? [3] LC_TIME=nl_NL.UTF-8??????? LC_COLLATE=nl_NL.UTF-8
>>> >?? [5] LC_MONETARY=nl_NL.UTF-8 LC_MESSAGES=nl_NL.UTF-8
>>> >?? [7] LC_PAPER=nl_NL.UTF-8?????? LC_NAME=C
>>> >?? [9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>>> > [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
>>> >
>>> > attached base packages:
>>> > [1] stats???? graphics? grDevices utils???? datasets methods?? base
>>> >
>>> > loaded via a namespace (and not attached):
>>> > [1] compiler_4.1.0? Matrix_1.3-4??? mgcv_1.8-36 splines_4.1.0
>>> > [5] nlme_3.1-152??? grid_4.1.0????? lattice_0.20-44
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel 
>>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 15 11:11:22 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 15 Jun 2021 11:11:22 +0200
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <b4150cda-9b00-7776-9308-74c33d0a33a7@stats.ox.ac.uk>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
 <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
 <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>
 <4df9dc14-34f6-401a-5580-d06d7a028e90@gmail.com>
 <e1286a24-9a47-b573-a4a3-0c6db4b0ea67@hum.leidenuniv.nl>
 <b4150cda-9b00-7776-9308-74c33d0a33a7@stats.ox.ac.uk>
Message-ID: <01765d10-835a-d6d0-7248-178594554b3b@gmail.com>

One can also disable bracketed paste for R in .inputrc:

$if R
 ? set enable-bracketed-paste off
$endif

Tomas

On 6/15/21 11:09 AM, Prof Brian Ripley wrote:
> I would have used source("clipboard") on systems which support it 
> (Tomas has confirmed it works on Linux).? See ?file.
>
> The macOS equivalent source(pipe("pbpaste")) also works.
>
> On 14/06/2021 11:06, Cesko Voeten wrote:
>> Making it 1024 times larger gives:
>>
>> installing 'sysdata.rda'
>> Error: segfault from C stack overflow
>>
>> Making it only 4 times larger provides a usable R. In my test case of 
>> copying&pasting mgcv::gam, I observe the same visual corruption at 
>> the prompt as before, but when pressing return it has actually been 
>> received correctly. My real-world problem involved a file 33KiB in 
>> size, which - as expected, since 16KiB < 33KiB - still has the same 
>> problem as before.
>>
>> I know nothing about readline, but I presume that there is no way for 
>> this buffer size to be dynamically resized at run time. In that case, 
>> maybe R should simply force-disable readline's bracketed paste? By 
>> the way, according to readline's changelog, this does indeed seem to 
>> be a feature that changed (viz. was enabled in more places) from 
>> readline-8.0 to readline-8.1.
>>
>> Finally, please disregard my earlier comment about vim and nano 
>> working just fine. They do, but they don't actually use readline 
>> (according to ldd), so don't provide a valid comparison.
>>
>> Thanks for your efforts!
>> Cesko
>>
>> On 14-06-2021 at 08:33, Tomas Kalibera wrote:
>>> Thanks, Cesko, for more debugging. As you are already compiling the 
>>> code, could you please try increasing CONSOLE_BUFFER_SIZE in 
>>> ./include/Defn.h from 4096 to some very large value (e.g. 1024 
>>> times), rebuild R and check if the problems (not all bytes received 
>>> correctly, visual corruption) go away for texts of the size you 
>>> looked at before?
>>>
>>>
>>> Thanks,
>>> Tomas
>>>
>>>
>>>
>>> On 6/13/21 10:59 AM, Voeten, C.C. wrote:
>>>>
>>>> Thanks for looking into this! I've just compiled today's R-devel 
>>>> snapshot, and it shows the same issue. extSoftVersion() from that 
>>>> build:
>>>>
>>>> ???????????????????????????????????????????? zlib
>>>> ???????????????????????????????????????? "1.2.11"
>>>> ??????????????????????????????????????????? bzlib
>>>> ???????????????????????????? "1.0.8, 13-Jul-2019"
>>>> ?????????????????????????????????????????????? xz
>>>> ????????????????????????????????????????? "5.2.5"
>>>> ???????????????????????????????????????????? PCRE
>>>> ?????????????????????????????? "10.37 2021-05-26"
>>>> ????????????????????????????????????????????? ICU
>>>> ?????????????????????????????????????????? "69.1"
>>>> ????????????????????????????????????????????? TRE
>>>> ??????????????????????? "TRE 0.8.0 R_fixes (BSD)"
>>>> ??????????????????????????????????????????? iconv
>>>> ???????????????????????????????????? "glibc 2.33"
>>>> ???????????????????????????????????????? readline
>>>> ??????????????????????????????????????????? "8.1"
>>>> ???????????????????????????????????????????? BLAS
>>>> "/home/cesko/r-devel/usr/lib64/R/lib/libRblas.so"
>>>>
>>>> Thanks for your observation that it works on your system - that 
>>>> implicates my readline-8.1 as being the culprit. Unfortunately, I 
>>>> don't dare attempt to downgrade it on my system to test, and 
>>>> regardless we still don't know why other readline-using programs 
>>>> can paste in the same text with no issues.
>>>>
>>>>
>>>> I've made some further progress on debugging: I noticed that text 
>>>> <4096 bytes in size arrives fine (although sometimes with visual 
>>>> corruption), but text >4096 bytes doesn't. Pasting in the result of 
>>>> perl -e 'print ("if(T)cat(\"a\")\n"x292)' works as expected, 
>>>> changing the 292 to 293 causes R to print a bunch of a's followed 
>>>> by the source code of the cat function.
>>>>
>>>>
>>>> To still answer your question: with mgcv::gam, pasting in the first 
>>>> 94 lines (as printed by R with options(width=80)) produces a visual 
>>>> corruption of the prompt (it reads "G$family <- 
>>>> familyar.summaryintercept = drop.intercept)) 
>>>> control$scalePenalty,") but if I press return and type the closing 
>>>> "}" the code has actually arrived just fine. The text up to and 
>>>> including that line is 4023 bytes in size; when trying to add in 
>>>> more, it fails again.
>>>>
>>>>
>>>> Cesko

>>>>
>>>> *Van:* Tomas Kalibera <tomas.kalibera at gmail.com>
>>>> *Verzonden:* zondag 13 juni 2021 10:00:27
>>>> *Aan:* Voeten, C.C.; r-devel at r-project.org
>>>> *Onderwerp:* Re: [Rd] Bracketed paste issues on Linux
>>>> Thanks for the report. Could you please also post output from
>>>> extSoftVersion() ?
>>>>
>>>> What happens if you paste just a smaller part of the code before the
>>>> long line? Is the output still corrupted? If so, is it corrupted the
>>>> same way, at the same places?
>>>>
>>>> (It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)
>>>>
>>>> Thanks
>>>> Tomas
>>>>
>>>> On 6/12/21 3:44 PM, Cesko Voeten wrote:
>>>> > I am on an up-to-date Arch Linux system, using the GNOME desktop 
>>>> environment. By default, this turns on bracketed paste in terminal 
>>>> emulators; for those not familiar with this concept: it makes it so 
>>>> that if you paste in multiple lines of code, they are received in a 
>>>> single chunk. This works just fine with R, up to a certain amount 
>>>> of text: for chunks past a certain length, some amount of text in 
>>>> the middle of the chunk goes missing. For example, if I print the 
>>>> source of mgcv::gam into my R session and then attempt to copy and 
>>>> paste it back in, what I end up with is:
>>>> >
>>>> > <snip 53 perfectly good lines>
>>>> >????????????? pmf$formula <- gp$pf
>>>> >????????????? pmf <- eval(pmf, parent.frame())
>>>> > }?? objectvironment(attr(object$pred.formula, "full")) <- 
>>>> .GlobalEnv<- environment(object$terms) <- 
>>>> environment(object$pterms) <- .GlobalEnv
>>>> >
>>>> > So:
>>>> >?? - the first 55 lines in this example arrive perfectly fine
>>>> >?? - then a bunch go completely missing
>>>> >?? - then various parts of the last few lines are jumbled together 
>>>> into one line
>>>> >
>>>> > For reference on the third point, the actual last 10 lines of my 
>>>> version of mgcv::gam are:
>>>> >????? if (is.null(object$deviance))
>>>> >????????? object$deviance <- sum(residuals(object, "deviance")^2)
>>>> >????? names(object$gcv.ubre) <- method
>>>> >????? environment(object$formula) <- 
>>>> environment(object$pred.formula) <- environment(object$terms) <- 
>>>> environment(object$pterms) <- .GlobalEnv
>>>> >????? if (!is.null(object$model))
>>>> >????????? environment(attr(object$model, "terms")) <- .GlobalEnv
>>>> >????? if (!is.null(attr(object$pred.formula, "full")))
>>>> >????????? environment(attr(object$pred.formula, "full")) <- 
>>>> .GlobalEnv
>>>> >????? object
>>>> > }
>>>> >
>>>> > parts of which can be recognized in the last line of what was 
>>>> pasted.
>>>> > Naturally, the pasted function is not parsed properly: if I press 
>>>> return I get the expected "+" signaling that the REPL is expecting 
>>>> more input. So it is not merely a visual issue.
>>>> >
>>>> > I can reproduce this both in GNOME Terminal and in xterm, so it 
>>>> is not a bug specific to my terminal emulator. In addition, pasting 
>>>> the exact same code into either vim or nano running within the same 
>>>> terminal works fine. So I believe that this may be a bug in R 
>>>> itself. It's easy to work around by disabling bracketed paste in 
>>>> the terminal, but it would be great if this could actually be made 
>>>> to work, especially given that bracketed paste is the default on my 
>>>> desktop environment.
>>>> >
>>>> > If given an account, I would be happy to file this as a bug; let 
>>>> me know if that is desired. In the meantime, have others run into 
>>>> this and perhaps identified the root cause and/or a different 
>>>> workaround?
>>>> >
>>>> > Thanks,
>>>> > Cesko
>>>> >
>>>> > sessionInfo():
>>>> >
>>>> > R version 4.1.0 (2021-05-18)
>>>> > Platform: x86_64-pc-linux-gnu (64-bit)
>>>> > Running under: Arch Linux
>>>> >
>>>> > Matrix products: default
>>>> > BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
>>>> >
>>>> > locale:
>>>> >?? [1] LC_CTYPE=nl_NL.UTF-8?????? LC_NUMERIC=C
>>>> >?? [3] LC_TIME=nl_NL.UTF-8??????? LC_COLLATE=nl_NL.UTF-8
>>>> >?? [5] LC_MONETARY=nl_NL.UTF-8 LC_MESSAGES=nl_NL.UTF-8
>>>> >?? [7] LC_PAPER=nl_NL.UTF-8?????? LC_NAME=C
>>>> >?? [9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>>>> > [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
>>>> >
>>>> > attached base packages:
>>>> > [1] stats???? graphics? grDevices utils???? datasets methods?? base
>>>> >
>>>> > loaded via a namespace (and not attached):
>>>> > [1] compiler_4.1.0? Matrix_1.3-4??? mgcv_1.8-36 splines_4.1.0
>>>> > [5] nlme_3.1-152??? grid_4.1.0????? lattice_0.20-44
>>>> >
>>>> > ______________________________________________
>>>> > R-devel at r-project.org mailing list
>>>> > https://stat.ethz.ch/mailman/listinfo/r-devel 
>>>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

From c@c@voeten @end|ng |rom hum@|e|denun|v@n|  Tue Jun 15 11:17:29 2021
From: c@c@voeten @end|ng |rom hum@|e|denun|v@n| (Voeten, C.C.)
Date: Tue, 15 Jun 2021 09:17:29 +0000
Subject: [Rd] Bracketed paste issues on Linux
In-Reply-To: <01765d10-835a-d6d0-7248-178594554b3b@gmail.com>
References: <dd65989664c9bb33effa065e2dc594960ef46a8a.camel@hum.leidenuniv.nl>
 <233b12cc-5127-bde2-da5c-e347a525ea61@gmail.com>
 <e330a78ea0a2464285a56baf7dbd5bbe@hum.leidenuniv.nl>
 <4df9dc14-34f6-401a-5580-d06d7a028e90@gmail.com>
 <e1286a24-9a47-b573-a4a3-0c6db4b0ea67@hum.leidenuniv.nl>
 <b4150cda-9b00-7776-9308-74c33d0a33a7@stats.ox.ac.uk>
 <01765d10-835a-d6d0-7248-178594554b3b@gmail.com>
Message-ID: <1550c175d46c430e9751a884225b853b@hum.leidenuniv.nl>

Thanks to both for these suggested workarounds! I had indeed modified my .inputrc to disable bracketed paste; thanks for also making me aware of the existence of source("clipboard").

Of course, it would be nice if there still was a way for bracketed paste to work even with large amounts of text, but I understand that this may be technically infeasible (and/or, quite simply, unimportant!).

Cesko

> -----Original Message-----
> From: Tomas Kalibera <tomas.kalibera at gmail.com>
> Sent: Tuesday, June 15, 2021 11:11 AM
> To: Prof Brian Ripley <ripley at stats.ox.ac.uk>; Voeten, C.C.
> <c.c.voeten at hum.leidenuniv.nl>; r-devel at r-project.org
> Subject: Re: [Rd] Bracketed paste issues on Linux
> 
> One can also disable bracketed paste for R in .inputrc:
> 
> $if R
>  ? set enable-bracketed-paste off
> $endif
> 
> Tomas
> 
> On 6/15/21 11:09 AM, Prof Brian Ripley wrote:
> > I would have used source("clipboard") on systems which support it
> > (Tomas has confirmed it works on Linux).? See ?file.
> >
> > The macOS equivalent source(pipe("pbpaste")) also works.
> >
> > On 14/06/2021 11:06, Cesko Voeten wrote:
> >> Making it 1024 times larger gives:
> >>
> >> installing 'sysdata.rda'
> >> Error: segfault from C stack overflow
> >>
> >> Making it only 4 times larger provides a usable R. In my test case of
> >> copying&pasting mgcv::gam, I observe the same visual corruption at
> >> the prompt as before, but when pressing return it has actually been
> >> received correctly. My real-world problem involved a file 33KiB in
> >> size, which - as expected, since 16KiB < 33KiB - still has the same
> >> problem as before.
> >>
> >> I know nothing about readline, but I presume that there is no way for
> >> this buffer size to be dynamically resized at run time. In that case,
> >> maybe R should simply force-disable readline's bracketed paste? By
> >> the way, according to readline's changelog, this does indeed seem to
> >> be a feature that changed (viz. was enabled in more places) from
> >> readline-8.0 to readline-8.1.
> >>
> >> Finally, please disregard my earlier comment about vim and nano
> >> working just fine. They do, but they don't actually use readline
> >> (according to ldd), so don't provide a valid comparison.
> >>
> >> Thanks for your efforts!
> >> Cesko
> >>
> >> On 14-06-2021 at 08:33, Tomas Kalibera wrote:
> >>> Thanks, Cesko, for more debugging. As you are already compiling the
> >>> code, could you please try increasing CONSOLE_BUFFER_SIZE in
> >>> ./include/Defn.h from 4096 to some very large value (e.g. 1024
> >>> times), rebuild R and check if the problems (not all bytes received
> >>> correctly, visual corruption) go away for texts of the size you
> >>> looked at before?
> >>>
> >>>
> >>> Thanks,
> >>> Tomas
> >>>
> >>>
> >>>
> >>> On 6/13/21 10:59 AM, Voeten, C.C. wrote:
> >>>>
> >>>> Thanks for looking into this! I've just compiled today's R-devel
> >>>> snapshot, and it shows the same issue. extSoftVersion() from that
> >>>> build:
> >>>>
> >>>> ???????????????????????????????????????????? zlib
> >>>> ???????????????????????????????????????? "1.2.11"
> >>>> ??????????????????????????????????????????? bzlib
> >>>> ???????????????????????????? "1.0.8, 13-Jul-2019"
> >>>> ?????????????????????????????????????????????? xz
> >>>> ????????????????????????????????????????? "5.2.5"
> >>>> ???????????????????????????????????????????? PCRE
> >>>> ?????????????????????????????? "10.37 2021-05-26"
> >>>> ????????????????????????????????????????????? ICU
> >>>> ?????????????????????????????????????????? "69.1"
> >>>> ????????????????????????????????????????????? TRE
> >>>> ??????????????????????? "TRE 0.8.0 R_fixes (BSD)"
> >>>> ??????????????????????????????????????????? iconv
> >>>> ???????????????????????????????????? "glibc 2.33"
> >>>> ???????????????????????????????????????? readline
> >>>> ??????????????????????????????????????????? "8.1"
> >>>> ???????????????????????????????????????????? BLAS
> >>>> "/home/cesko/r-devel/usr/lib64/R/lib/libRblas.so"
> >>>>
> >>>> Thanks for your observation that it works on your system - that
> >>>> implicates my readline-8.1 as being the culprit. Unfortunately, I
> >>>> don't dare attempt to downgrade it on my system to test, and
> >>>> regardless we still don't know why other readline-using programs
> >>>> can paste in the same text with no issues.
> >>>>
> >>>>
> >>>> I've made some further progress on debugging: I noticed that text
> >>>> <4096 bytes in size arrives fine (although sometimes with visual
> >>>> corruption), but text >4096 bytes doesn't. Pasting in the result of
> >>>> perl -e 'print ("if(T)cat(\"a\")\n"x292)' works as expected,
> >>>> changing the 292 to 293 causes R to print a bunch of a's followed
> >>>> by the source code of the cat function.
> >>>>
> >>>>
> >>>> To still answer your question: with mgcv::gam, pasting in the first
> >>>> 94 lines (as printed by R with options(width=80)) produces a visual
> >>>> corruption of the prompt (it reads "G$family <-
> >>>> familyar.summaryintercept = drop.intercept))
> >>>> control$scalePenalty,") but if I press return and type the closing
> >>>> "}" the code has actually arrived just fine. The text up to and
> >>>> including that line is 4023 bytes in size; when trying to add in
> >>>> more, it fails again.
> >>>>
> >>>>
> >>>> Cesko
> >>>> -------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> ---------------------------------------------------------------------------------------------------------
> -----------------------------------------------------
> >>>>
> >>>> *Van:* Tomas Kalibera <tomas.kalibera at gmail.com>
> >>>> *Verzonden:* zondag 13 juni 2021 10:00:27
> >>>> *Aan:* Voeten, C.C.; r-devel at r-project.org
> >>>> *Onderwerp:* Re: [Rd] Bracketed paste issues on Linux
> >>>> Thanks for the report. Could you please also post output from
> >>>> extSoftVersion() ?
> >>>>
> >>>> What happens if you paste just a smaller part of the code before the
> >>>> long line? Is the output still corrupted? If so, is it corrupted the
> >>>> same way, at the same places?
> >>>>
> >>>> (It seems to be working on my Ubuntu 20.04, readline 8.0, R-devel)
> >>>>
> >>>> Thanks
> >>>> Tomas
> >>>>
> >>>> On 6/12/21 3:44 PM, Cesko Voeten wrote:
> >>>> > I am on an up-to-date Arch Linux system, using the GNOME desktop
> >>>> environment. By default, this turns on bracketed paste in terminal
> >>>> emulators; for those not familiar with this concept: it makes it so
> >>>> that if you paste in multiple lines of code, they are received in a
> >>>> single chunk. This works just fine with R, up to a certain amount
> >>>> of text: for chunks past a certain length, some amount of text in
> >>>> the middle of the chunk goes missing. For example, if I print the
> >>>> source of mgcv::gam into my R session and then attempt to copy and
> >>>> paste it back in, what I end up with is:
> >>>> >
> >>>> > <snip 53 perfectly good lines>
> >>>> >????????????? pmf$formula <- gp$pf
> >>>> >????????????? pmf <- eval(pmf, parent.frame())
> >>>> > }?? objectvironment(attr(object$pred.formula, "full")) <-
> >>>> .GlobalEnv<- environment(object$terms) <-
> >>>> environment(object$pterms) <- .GlobalEnv
> >>>> >
> >>>> > So:
> >>>> >?? - the first 55 lines in this example arrive perfectly fine
> >>>> >?? - then a bunch go completely missing
> >>>> >?? - then various parts of the last few lines are jumbled together
> >>>> into one line
> >>>> >
> >>>> > For reference on the third point, the actual last 10 lines of my
> >>>> version of mgcv::gam are:
> >>>> >????? if (is.null(object$deviance))
> >>>> >????????? object$deviance <- sum(residuals(object, "deviance")^2)
> >>>> >????? names(object$gcv.ubre) <- method
> >>>> >????? environment(object$formula) <-
> >>>> environment(object$pred.formula) <- environment(object$terms) <-
> >>>> environment(object$pterms) <- .GlobalEnv
> >>>> >????? if (!is.null(object$model))
> >>>> >????????? environment(attr(object$model, "terms")) <- .GlobalEnv
> >>>> >????? if (!is.null(attr(object$pred.formula, "full")))
> >>>> >????????? environment(attr(object$pred.formula, "full")) <-
> >>>> .GlobalEnv
> >>>> >????? object
> >>>> > }
> >>>> >
> >>>> > parts of which can be recognized in the last line of what was
> >>>> pasted.
> >>>> > Naturally, the pasted function is not parsed properly: if I press
> >>>> return I get the expected "+" signaling that the REPL is expecting
> >>>> more input. So it is not merely a visual issue.
> >>>> >
> >>>> > I can reproduce this both in GNOME Terminal and in xterm, so it
> >>>> is not a bug specific to my terminal emulator. In addition, pasting
> >>>> the exact same code into either vim or nano running within the same
> >>>> terminal works fine. So I believe that this may be a bug in R
> >>>> itself. It's easy to work around by disabling bracketed paste in
> >>>> the terminal, but it would be great if this could actually be made
> >>>> to work, especially given that bracketed paste is the default on my
> >>>> desktop environment.
> >>>> >
> >>>> > If given an account, I would be happy to file this as a bug; let
> >>>> me know if that is desired. In the meantime, have others run into
> >>>> this and perhaps identified the root cause and/or a different
> >>>> workaround?
> >>>> >
> >>>> > Thanks,
> >>>> > Cesko
> >>>> >
> >>>> > sessionInfo():
> >>>> >
> >>>> > R version 4.1.0 (2021-05-18)
> >>>> > Platform: x86_64-pc-linux-gnu (64-bit)
> >>>> > Running under: Arch Linux
> >>>> >
> >>>> > Matrix products: default
> >>>> > BLAS/LAPACK: /opt/intel/mkl/lib/intel64/libmkl_gf_lp64.so
> >>>> >
> >>>> > locale:
> >>>> >?? [1] LC_CTYPE=nl_NL.UTF-8?????? LC_NUMERIC=C
> >>>> >?? [3] LC_TIME=nl_NL.UTF-8??????? LC_COLLATE=nl_NL.UTF-8
> >>>> >?? [5] LC_MONETARY=nl_NL.UTF-8 LC_MESSAGES=nl_NL.UTF-8
> >>>> >?? [7] LC_PAPER=nl_NL.UTF-8?????? LC_NAME=C
> >>>> >?? [9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> >>>> > [11] LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C
> >>>> >
> >>>> > attached base packages:
> >>>> > [1] stats???? graphics? grDevices utils???? datasets methods?? base
> >>>> >
> >>>> > loaded via a namespace (and not attached):
> >>>> > [1] compiler_4.1.0? Matrix_1.3-4??? mgcv_1.8-36 splines_4.1.0
> >>>> > [5] nlme_3.1-152??? grid_4.1.0????? lattice_0.20-44
> >>>> >
> >>>> > ______________________________________________
> >>>> > R-devel at r-project.org mailing list
> >>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >

From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Jun 15 18:19:43 2021
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 15 Jun 2021 09:19:43 -0700
Subject: [Rd] R for Windows leaves detritus in the temp directory
Message-ID: <CAFDcVCS-RnhdS9nVOENQicBd97HabsheO0aYJxcKDE9BCP4ANw@mail.gmail.com>

ISSUE:

The TMPDIR validation done in src/gnuwin32/system.c:

    /* in case getpid() is not unique -- has been seen under Windows */
    snprintf(ifile, 1024, "%s/Rscript%x%x", tm, getpid(),
         (unsigned int) GetTickCount());
    ifp = fopen(ifile, "w+b");
    if(!ifp) R_Suicide(_("creation of tmpfile failed -- set TMPDIR suitably?"));
  }

does _not_ clean up after itself, i.e. there's a missing

    unlink(ifile);

In contrast, ditto in src/unix/system.c does this.


BACKGROUND:

When running R CMD check --as-cran on my 'future' package, I get:

* checking for detritus in the temp directory ... NOTE
Found the following files/directories:
  'Rscript171866c62e'

when checked on R Under development (unstable) (2021-06-13 r80496),
including on win-builder.  I can reproduce this with a package
'tests/detritus.R':

  cl <- parallel::makeCluster(1)
  dummy <- parallel::clusterEvalQ(cl, {
    cl <- parallel::makeCluster(1)
    on.exit(parallel::stopCluster(cl))
    parallel::clusterEvalQ(cl, Sys.getpid())
  })
  print(dummy)
  parallel::stopCluster(cl)


I believe it requires a nested PSOCK cluster to reproduce the 'R CMD
check' NOTE, e.g. it does _not_ happen with:

  cl <- parallel::makeCluster(1)
  dummy <- parallel::clusterEvalQ(cl, {
    Sys.getpid()
  })
  print(dummy)
  parallel::stopCluster(cl)

/Henrik


From tdhock5 @end|ng |rom gm@||@com  Wed Jun 16 16:22:08 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 16 Jun 2021 10:22:08 -0400
Subject: [Rd] [External] Possible ALTREP bug
In-Reply-To: <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
References: <CABtg=K==9KEfe6+_nLnQA=H73NSr8x7==fwZe-k=4=TSu6hanA@mail.gmail.com>
 <alpine.DEB.2.21.2105280819020.3254@luke-Latitude-7480>
 <CAD6tx94epfFGWb9AmGsq3QdF3S=gdRPO9oLRETQ4UaPN0Ja6bA@mail.gmail.com>
 <CAD4oTHHL2AQymy3M=jwek_hm8BJfkS_iXrNUNWQDtqNsvSXwXA@mail.gmail.com>
 <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
Message-ID: <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>

By the way, where is the documentation for INTEGER_ELT, REAL_ELT, etc? I
looked in Writing R Extensions and R Internals but I did not see any
mention.
REAL_ELT is briefly mentioned on
https://svn.r-project.org/R/branches/ALTREP/ALTREP.html
Would it be possible to please add some mention of them to Writing R
Extensions?
- how many of these _ELT functions are there? INTEGER, REAL, ... ?
- in what version of R were they introduced?
- I guess input types are always SEXP and int?
- What are the output types for each?

On Fri, May 28, 2021 at 5:16 PM <luke-tierney at uiowa.edu> wrote:

> Since the INTEGER_ELT, REAL_ELT, etc, functions are fairly new it may
> be possible to check that places where they are used allow for them to
> allocate. I have fixed the one that got caught by Gabor's example, and
> a rchk run might be able to pick up others if rchk knows these could
> allocate. (I may also be forgetting other places where the _ELt
> methods are used.)  Fixing all call sites for REAL, INTEGER, etc, was
> never realistic so there GC has to be suspended during the method
> call, and that is done in the dispatch mechanism.
>
> The bigger problem is jumps from inside things that existing code
> assumes will not do that. Catching those jumps is possible but
> expensive; doing anything sensible if one is caught is really not
> possible.
>
> Best,
>
> luke
>
> On Fri, 28 May 2021, Gabriel Becker wrote:
>
> > Hi Jim et al,
> > Just to hopefully add a bit to what Luke already answered, from what I am
> > recalling looking back at that bioconductor thread Elt methods are used
> in
> > places where there are hard implicit assumptions that no garbage
> collection
> > will occur (ie they are called on things that aren't PROTECTed), and
> beyond
> > that, in places where there are hard assumptions that no error (longjmp)
> > will occur. I could be wrong, but I don't know that suspending garbage
> > collection would protect from the second one. Ie it is possible that an
> > error *ever* being raised from R code that implements an elt method could
> > cause all hell to break loose.
> >
> > Luke or Tomas Kalibera would know more.
> >
> > I was disappointed that implementing ALTREPs in R code was not in the
> cards
> > (it was in my original proposal back in 2016 to the DSC) but I trust Luke
> > that there are important reasons we can't safely allow that.
> >
> > Best,
> > ~G
> >
> > On Fri, May 28, 2021 at 8:31 AM Jim Hester <james.f.hester at gmail.com>
> wrote:
> >       From reading the discussion on the Bioconductor issue tracker it
> >       seems like
> >       the reason the GC is not suspended for the non-string ALTREP Elt
> >       methods is
> >       primarily due to performance concerns.
> >
> >       If this is the case perhaps an additional flag could be added to
> >       the
> >       `R_set_altrep_*()` functions so ALTREP authors could indicate if
> >       GC should
> >       be halted when that particular method is called for that
> >       particular ALTREP
> >       class.
> >
> >       This would avoid the performance hit (other than a boolean
> >       check) for the
> >       standard case when no allocations are expected, but allow
> >       authors to
> >       indicate that R should pause GC if needed for methods in their
> >       class.
> >
> >       On Fri, May 28, 2021 at 9:42 AM <luke-tierney at uiowa.edu> wrote:
> >
> >       > integer and real Elt methods are not expected to allocate. You
> >       would
> >       > have to suspend GC to be able to do that. This currently can't
> >       be done
> >       > from package code.
> >       >
> >       > Best,
> >       >
> >       > luke
> >       >
> >       > On Fri, 28 May 2021, G?bor Cs?rdi wrote:
> >       >
> >       > > I have found some weird SEXP corruption behavior with
> >       ALTREP, which
> >       > > could be a bug. (Or I could be doing something wrong.)
> >       > >
> >       > > I have an integer ALTREP vector that calls back to R from
> >       the Elt
> >       > > method. When this vector is indexed in a lapply(), its first
> >       element
> >       > > gets corrupted. Sometimes it's just a type change to
> >       logical, but
> >       > > sometimes the corruption causes a crash.
> >       > >
> >       > > I saw this on macOS from R 3.5.3 to 4.2.0. I created a small
> >       package
> >       > > that demonstrates this:
> >       https://github.com/gaborcsardi/redfish
> >       > >
> >       > > The R callback in this package calls
> >       `loadNamespace("Matrix")`, but
> >       > > the same crash happens for other packages as well, and
> >       sometimes it
> >       > > also happens if I don't load any packages at all. (But that
> >       example
> >       > > was much more complicated, so I went with the package
> >       loading.)
> >       > >
> >       > > It is somewhat random, and sometimes turning off the JIT
> >       avoids the
> >       > > crash, but not always.
> >       > >
> >       > > Hopefully I am just doing something wrong in the ALTREP code
> >       (see
> >       > >
> >       https://github.com/gaborcsardi/redfish/blob/main/src/test.c),
> >       and it
> >       > > is not actually a bug.
> >       > >
> >       > > Thanks,
> >       > > Gabor
> >       > >
> >       > > ______________________________________________
> >       > > R-devel at r-project.org mailing list
> >       > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >       > >
> >       >
> >       > --
> >       > Luke Tierney
> >       > Ralph E. Wareham Professor of Mathematical Sciences
> >       > University of Iowa                  Phone:
> >        319-335-3386
> >       > Department of Statistics and        Fax:
> >        319-335-3017
> >       >     Actuarial Science
> >       > 241 Schaeffer Hall                  email:
> >        luke-tierney at uiowa.edu
> >       > Iowa City, IA 52242                 WWW:
> >       http://www.stat.uiowa.edu
> >       > ______________________________________________
> >       > R-devel at r-project.org mailing list
> >       > https://stat.ethz.ch/mailman/listinfo/r-devel
> >       >
> >
> >               [[alternative HTML version deleted]]
> >
> >       ______________________________________________
> >       R-devel at r-project.org mailing list
> >       https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From o||ver@p@m@d@en @end|ng |rom gm@||@com  Wed Jun 16 19:28:33 2021
From: o||ver@p@m@d@en @end|ng |rom gm@||@com (Oliver Madsen)
Date: Wed, 16 Jun 2021 19:28:33 +0200
Subject: [Rd] [External] Possible ALTREP bug
In-Reply-To: <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
References: <CABtg=K==9KEfe6+_nLnQA=H73NSr8x7==fwZe-k=4=TSu6hanA@mail.gmail.com>
 <alpine.DEB.2.21.2105280819020.3254@luke-Latitude-7480>
 <CAD6tx94epfFGWb9AmGsq3QdF3S=gdRPO9oLRETQ4UaPN0Ja6bA@mail.gmail.com>
 <CAD4oTHHL2AQymy3M=jwek_hm8BJfkS_iXrNUNWQDtqNsvSXwXA@mail.gmail.com>
 <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
 <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
Message-ID: <CAFL8AHp2RvtdtUi06dmNJyoxULrF0hamn6KmuavLjw_rb8+n2g@mail.gmail.com>

*_ELT accessor functions are described in "vector accessor functions" in
Writing R extensions.

https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Vector-accessor-functions

On Wed, Jun 16, 2021 at 4:22 PM Toby Hocking <tdhock5 at gmail.com> wrote:

> By the way, where is the documentation for INTEGER_ELT, REAL_ELT, etc? I
> looked in Writing R Extensions and R Internals but I did not see any
> mention.
> REAL_ELT is briefly mentioned on
> https://svn.r-project.org/R/branches/ALTREP/ALTREP.html
> Would it be possible to please add some mention of them to Writing R
> Extensions?
> - how many of these _ELT functions are there? INTEGER, REAL, ... ?
> - in what version of R were they introduced?
> - I guess input types are always SEXP and int?
> - What are the output types for each?
>
> On Fri, May 28, 2021 at 5:16 PM <luke-tierney at uiowa.edu> wrote:
>
> > Since the INTEGER_ELT, REAL_ELT, etc, functions are fairly new it may
> > be possible to check that places where they are used allow for them to
> > allocate. I have fixed the one that got caught by Gabor's example, and
> > a rchk run might be able to pick up others if rchk knows these could
> > allocate. (I may also be forgetting other places where the _ELt
> > methods are used.)  Fixing all call sites for REAL, INTEGER, etc, was
> > never realistic so there GC has to be suspended during the method
> > call, and that is done in the dispatch mechanism.
> >
> > The bigger problem is jumps from inside things that existing code
> > assumes will not do that. Catching those jumps is possible but
> > expensive; doing anything sensible if one is caught is really not
> > possible.
> >
> > Best,
> >
> > luke
> >
> > On Fri, 28 May 2021, Gabriel Becker wrote:
> >
> > > Hi Jim et al,
> > > Just to hopefully add a bit to what Luke already answered, from what I
> am
> > > recalling looking back at that bioconductor thread Elt methods are used
> > in
> > > places where there are hard implicit assumptions that no garbage
> > collection
> > > will occur (ie they are called on things that aren't PROTECTed), and
> > beyond
> > > that, in places where there are hard assumptions that no error
> (longjmp)
> > > will occur. I could be wrong, but I don't know that suspending garbage
> > > collection would protect from the second one. Ie it is possible that an
> > > error *ever* being raised from R code that implements an elt method
> could
> > > cause all hell to break loose.
> > >
> > > Luke or Tomas Kalibera would know more.
> > >
> > > I was disappointed that implementing ALTREPs in R code was not in the
> > cards
> > > (it was in my original proposal back in 2016 to the DSC) but I trust
> Luke
> > > that there are important reasons we can't safely allow that.
> > >
> > > Best,
> > > ~G
> > >
> > > On Fri, May 28, 2021 at 8:31 AM Jim Hester <james.f.hester at gmail.com>
> > wrote:
> > >       From reading the discussion on the Bioconductor issue tracker it
> > >       seems like
> > >       the reason the GC is not suspended for the non-string ALTREP Elt
> > >       methods is
> > >       primarily due to performance concerns.
> > >
> > >       If this is the case perhaps an additional flag could be added to
> > >       the
> > >       `R_set_altrep_*()` functions so ALTREP authors could indicate if
> > >       GC should
> > >       be halted when that particular method is called for that
> > >       particular ALTREP
> > >       class.
> > >
> > >       This would avoid the performance hit (other than a boolean
> > >       check) for the
> > >       standard case when no allocations are expected, but allow
> > >       authors to
> > >       indicate that R should pause GC if needed for methods in their
> > >       class.
> > >
> > >       On Fri, May 28, 2021 at 9:42 AM <luke-tierney at uiowa.edu> wrote:
> > >
> > >       > integer and real Elt methods are not expected to allocate. You
> > >       would
> > >       > have to suspend GC to be able to do that. This currently can't
> > >       be done
> > >       > from package code.
> > >       >
> > >       > Best,
> > >       >
> > >       > luke
> > >       >
> > >       > On Fri, 28 May 2021, G?bor Cs?rdi wrote:
> > >       >
> > >       > > I have found some weird SEXP corruption behavior with
> > >       ALTREP, which
> > >       > > could be a bug. (Or I could be doing something wrong.)
> > >       > >
> > >       > > I have an integer ALTREP vector that calls back to R from
> > >       the Elt
> > >       > > method. When this vector is indexed in a lapply(), its first
> > >       element
> > >       > > gets corrupted. Sometimes it's just a type change to
> > >       logical, but
> > >       > > sometimes the corruption causes a crash.
> > >       > >
> > >       > > I saw this on macOS from R 3.5.3 to 4.2.0. I created a small
> > >       package
> > >       > > that demonstrates this:
> > >       https://github.com/gaborcsardi/redfish
> > >       > >
> > >       > > The R callback in this package calls
> > >       `loadNamespace("Matrix")`, but
> > >       > > the same crash happens for other packages as well, and
> > >       sometimes it
> > >       > > also happens if I don't load any packages at all. (But that
> > >       example
> > >       > > was much more complicated, so I went with the package
> > >       loading.)
> > >       > >
> > >       > > It is somewhat random, and sometimes turning off the JIT
> > >       avoids the
> > >       > > crash, but not always.
> > >       > >
> > >       > > Hopefully I am just doing something wrong in the ALTREP code
> > >       (see
> > >       > >
> > >       https://github.com/gaborcsardi/redfish/blob/main/src/test.c),
> > >       and it
> > >       > > is not actually a bug.
> > >       > >
> > >       > > Thanks,
> > >       > > Gabor
> > >       > >
> > >       > > ______________________________________________
> > >       > > R-devel at r-project.org mailing list
> > >       > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >       > >
> > >       >
> > >       > --
> > >       > Luke Tierney
> > >       > Ralph E. Wareham Professor of Mathematical Sciences
> > >       > University of Iowa                  Phone:
> > >        319-335-3386
> > >       > Department of Statistics and        Fax:
> > >        319-335-3017
> > >       >     Actuarial Science
> > >       > 241 Schaeffer Hall                  email:
> > >        luke-tierney at uiowa.edu
> > >       > Iowa City, IA 52242                 WWW:
> > >       http://www.stat.uiowa.edu
> > >       > ______________________________________________
> > >       > R-devel at r-project.org mailing list
> > >       > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >       >
> > >
> > >               [[alternative HTML version deleted]]
> > >
> > >       ______________________________________________
> > >       R-devel at r-project.org mailing list
> > >       https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > >
> > >
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >     Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun 16 22:29:11 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 17 Jun 2021 08:29:11 +1200
Subject: [Rd] [External] Possible ALTREP bug
In-Reply-To: <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
References: <CABtg=K==9KEfe6+_nLnQA=H73NSr8x7==fwZe-k=4=TSu6hanA@mail.gmail.com>
 <alpine.DEB.2.21.2105280819020.3254@luke-Latitude-7480>
 <CAD6tx94epfFGWb9AmGsq3QdF3S=gdRPO9oLRETQ4UaPN0Ja6bA@mail.gmail.com>
 <CAD4oTHHL2AQymy3M=jwek_hm8BJfkS_iXrNUNWQDtqNsvSXwXA@mail.gmail.com>
 <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
 <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
Message-ID: <3F32255C-29C5-48B9-8EA1-FEAAB1D547F8@R-project.org>


The usual quote applies: "use the source, Luke":

$ grep _ELT *.h | sort
Rdefines.h:#define SET_ELEMENT(x, i, val)	SET_VECTOR_ELT(x, i, val)
Rinternals.h:   The function STRING_ELT is used as an argument to arrayAssign even
Rinternals.h:#define VECTOR_ELT(x,i)	((SEXP *) DATAPTR(x))[i]
Rinternals.h://SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:Rbyte (RAW_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:Rbyte ALTRAW_ELT(SEXP x, R_xlen_t i);
Rinternals.h:Rcomplex (COMPLEX_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:Rcomplex ALTCOMPLEX_ELT(SEXP x, R_xlen_t i);
Rinternals.h:SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:SEXP (VECTOR_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:SEXP ALTSTRING_ELT(SEXP, R_xlen_t);
Rinternals.h:SEXP SET_VECTOR_ELT(SEXP x, R_xlen_t i, SEXP v);
Rinternals.h:double (REAL_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:double ALTREAL_ELT(SEXP x, R_xlen_t i);
Rinternals.h:int (INTEGER_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:int (LOGICAL_ELT)(SEXP x, R_xlen_t i);
Rinternals.h:int ALTINTEGER_ELT(SEXP x, R_xlen_t i);
Rinternals.h:int ALTLOGICAL_ELT(SEXP x, R_xlen_t i);
Rinternals.h:void ALTCOMPLEX_SET_ELT(SEXP x, R_xlen_t i, Rcomplex v);
Rinternals.h:void ALTINTEGER_SET_ELT(SEXP x, R_xlen_t i, int v);
Rinternals.h:void ALTLOGICAL_SET_ELT(SEXP x, R_xlen_t i, int v);
Rinternals.h:void ALTRAW_SET_ELT(SEXP x, R_xlen_t i, Rbyte v);
Rinternals.h:void ALTREAL_SET_ELT(SEXP x, R_xlen_t i, double v);
Rinternals.h:void ALTSTRING_SET_ELT(SEXP, R_xlen_t, SEXP);
Rinternals.h:void SET_INTEGER_ELT(SEXP x, R_xlen_t i, int v);
Rinternals.h:void SET_LOGICAL_ELT(SEXP x, R_xlen_t i, int v);
Rinternals.h:void SET_REAL_ELT(SEXP x, R_xlen_t i, double v);
Rinternals.h:void SET_STRING_ELT(SEXP x, R_xlen_t i, SEXP v);

So the indexing is with R_xlen_t and they return the value itself as one would expect.

Cheers,
Simon


> On Jun 17, 2021, at 2:22 AM, Toby Hocking <tdhock5 at gmail.com> wrote:
> 
> By the way, where is the documentation for INTEGER_ELT, REAL_ELT, etc? I
> looked in Writing R Extensions and R Internals but I did not see any
> mention.
> REAL_ELT is briefly mentioned on
> https://svn.r-project.org/R/branches/ALTREP/ALTREP.html
> Would it be possible to please add some mention of them to Writing R
> Extensions?
> - how many of these _ELT functions are there? INTEGER, REAL, ... ?
> - in what version of R were they introduced?
> - I guess input types are always SEXP and int?
> - What are the output types for each?
> 
> On Fri, May 28, 2021 at 5:16 PM <luke-tierney at uiowa.edu> wrote:
> 
>> Since the INTEGER_ELT, REAL_ELT, etc, functions are fairly new it may
>> be possible to check that places where they are used allow for them to
>> allocate. I have fixed the one that got caught by Gabor's example, and
>> a rchk run might be able to pick up others if rchk knows these could
>> allocate. (I may also be forgetting other places where the _ELt
>> methods are used.)  Fixing all call sites for REAL, INTEGER, etc, was
>> never realistic so there GC has to be suspended during the method
>> call, and that is done in the dispatch mechanism.
>> 
>> The bigger problem is jumps from inside things that existing code
>> assumes will not do that. Catching those jumps is possible but
>> expensive; doing anything sensible if one is caught is really not
>> possible.
>> 
>> Best,
>> 
>> luke
>> 
>> On Fri, 28 May 2021, Gabriel Becker wrote:
>> 
>>> Hi Jim et al,
>>> Just to hopefully add a bit to what Luke already answered, from what I am
>>> recalling looking back at that bioconductor thread Elt methods are used
>> in
>>> places where there are hard implicit assumptions that no garbage
>> collection
>>> will occur (ie they are called on things that aren't PROTECTed), and
>> beyond
>>> that, in places where there are hard assumptions that no error (longjmp)
>>> will occur. I could be wrong, but I don't know that suspending garbage
>>> collection would protect from the second one. Ie it is possible that an
>>> error *ever* being raised from R code that implements an elt method could
>>> cause all hell to break loose.
>>> 
>>> Luke or Tomas Kalibera would know more.
>>> 
>>> I was disappointed that implementing ALTREPs in R code was not in the
>> cards
>>> (it was in my original proposal back in 2016 to the DSC) but I trust Luke
>>> that there are important reasons we can't safely allow that.
>>> 
>>> Best,
>>> ~G
>>> 
>>> On Fri, May 28, 2021 at 8:31 AM Jim Hester <james.f.hester at gmail.com>
>> wrote:
>>>      From reading the discussion on the Bioconductor issue tracker it
>>>      seems like
>>>      the reason the GC is not suspended for the non-string ALTREP Elt
>>>      methods is
>>>      primarily due to performance concerns.
>>> 
>>>      If this is the case perhaps an additional flag could be added to
>>>      the
>>>      `R_set_altrep_*()` functions so ALTREP authors could indicate if
>>>      GC should
>>>      be halted when that particular method is called for that
>>>      particular ALTREP
>>>      class.
>>> 
>>>      This would avoid the performance hit (other than a boolean
>>>      check) for the
>>>      standard case when no allocations are expected, but allow
>>>      authors to
>>>      indicate that R should pause GC if needed for methods in their
>>>      class.
>>> 
>>>      On Fri, May 28, 2021 at 9:42 AM <luke-tierney at uiowa.edu> wrote:
>>> 
>>>> integer and real Elt methods are not expected to allocate. You
>>>      would
>>>> have to suspend GC to be able to do that. This currently can't
>>>      be done
>>>> from package code.
>>>> 
>>>> Best,
>>>> 
>>>> luke
>>>> 
>>>> On Fri, 28 May 2021, G?bor Cs?rdi wrote:
>>>> 
>>>>> I have found some weird SEXP corruption behavior with
>>>      ALTREP, which
>>>>> could be a bug. (Or I could be doing something wrong.)
>>>>> 
>>>>> I have an integer ALTREP vector that calls back to R from
>>>      the Elt
>>>>> method. When this vector is indexed in a lapply(), its first
>>>      element
>>>>> gets corrupted. Sometimes it's just a type change to
>>>      logical, but
>>>>> sometimes the corruption causes a crash.
>>>>> 
>>>>> I saw this on macOS from R 3.5.3 to 4.2.0. I created a small
>>>      package
>>>>> that demonstrates this:
>>>      https://github.com/gaborcsardi/redfish
>>>>> 
>>>>> The R callback in this package calls
>>>      `loadNamespace("Matrix")`, but
>>>>> the same crash happens for other packages as well, and
>>>      sometimes it
>>>>> also happens if I don't load any packages at all. (But that
>>>      example
>>>>> was much more complicated, so I went with the package
>>>      loading.)
>>>>> 
>>>>> It is somewhat random, and sometimes turning off the JIT
>>>      avoids the
>>>>> crash, but not always.
>>>>> 
>>>>> Hopefully I am just doing something wrong in the ALTREP code
>>>      (see
>>>>> 
>>>      https://github.com/gaborcsardi/redfish/blob/main/src/test.c),
>>>      and it
>>>>> is not actually a bug.
>>>>> 
>>>>> Thanks,
>>>>> Gabor
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>> 
>>>> --
>>>> Luke Tierney
>>>> Ralph E. Wareham Professor of Mathematical Sciences
>>>> University of Iowa                  Phone:
>>>       319-335-3386
>>>> Department of Statistics and        Fax:
>>>       319-335-3017
>>>>    Actuarial Science
>>>> 241 Schaeffer Hall                  email:
>>>       luke-tierney at uiowa.edu
>>>> Iowa City, IA 52242                 WWW:
>>>      http://www.stat.uiowa.edu
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>>>              [[alternative HTML version deleted]]
>>> 
>>>      ______________________________________________
>>>      R-devel at r-project.org mailing list
>>>      https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> 
>>> 
>> 
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From m@tth|@@-gond@n @end|ng |rom gmx@de  Thu Jun 17 08:25:27 2021
From: m@tth|@@-gond@n @end|ng |rom gmx@de (Matthias Gondan)
Date: Thu, 17 Jun 2021 08:25:27 +0200
Subject: [Rd] Check if (embedded) R has been initialized from C code
Message-ID: <1McpJg-1lJsPy0vRK-00ZyiV@mail.gmx.net>

Dear R developers,

(This email has also been sent to R-help before, but I was told that it doesn?t really fit there)

I am currently trying to write a piece of C code that uses ?embedded R?, and for specific reasons*, I cannot keep track if R already has been initialized. So the code snippet looks like this:

LibExtern char *R_TempDir;

if(R_TempDir == NULL)
? ? ?throw exception R not initialized?

I have seen that the source code of Rf_initialize_R itself checks if it is ivoked twice (num_initialized), but this latter flag does not seem to accessible, or is it? 

int Rf_initialize_R(int ac, char **av)
{
? ? int i, ioff = 1, j;
? ? Rboolean useX11 = TRUE, useTk = FALSE;
? ? char *p, msg[1024], cmdlines[10000], **avv;
? ? structRstart rstart;
? ? Rstart Rp = &rstart;
? ? Rboolean force_interactive = FALSE;

? ? if (num_initialized++) {
? ? ? ? fprintf(stderr, "%s", "R is already initialized\n");
? ? ? ? exit(1);
? ? }


Is the test of the TempDir a good substitute, or should I choose another solution? Having said this, it may be a good idea to expose a function Rf_R_initialized that performs such a test.

Thank you for your consideration.

Best regards,

Matthias

*The use case is an R library that connects to swi-prolog and allows the ?embedded? swi-prolog to establish an additional reverse connection to R. In that case, i.e., R -> Prolog -> R, I do not want to initialize R a second time. But since the interaction may also start from the swi-prolog system (and in the latter case, R needs to be initialized), I need a function such as the one mentioned here.



	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Thu Jun 17 20:10:13 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Thu, 17 Jun 2021 14:10:13 -0400
Subject: [Rd] [External] Possible ALTREP bug
In-Reply-To: <3F32255C-29C5-48B9-8EA1-FEAAB1D547F8@R-project.org>
References: <CABtg=K==9KEfe6+_nLnQA=H73NSr8x7==fwZe-k=4=TSu6hanA@mail.gmail.com>
 <alpine.DEB.2.21.2105280819020.3254@luke-Latitude-7480>
 <CAD6tx94epfFGWb9AmGsq3QdF3S=gdRPO9oLRETQ4UaPN0Ja6bA@mail.gmail.com>
 <CAD4oTHHL2AQymy3M=jwek_hm8BJfkS_iXrNUNWQDtqNsvSXwXA@mail.gmail.com>
 <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
 <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
 <3F32255C-29C5-48B9-8EA1-FEAAB1D547F8@R-project.org>
Message-ID: <CALK03d35bNYDXhUsDyrSmPpd2QShayz2gdSP=rmkw5fPq+ucUQ@mail.gmail.com>

Oliver, for clarification that section in writing R extensions mentions
VECTOR_ELT and REAL but not REAL_ELT nor any other *_ELT functions. I was
looking for an explanation of all the *_ELT functions (which are apparently
new), not just VECTOR_ELT.
Thanks Simon that response was very helpful.
One more question: are there any circumstances in which one should use
REAL_ELT(x,i) rather than REAL(x)[i] or vice versa? Or can they be used
interchangeably?

On Wed, Jun 16, 2021 at 4:29 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> The usual quote applies: "use the source, Luke":
>
> $ grep _ELT *.h | sort
> Rdefines.h:#define SET_ELEMENT(x, i, val)       SET_VECTOR_ELT(x, i, val)
> Rinternals.h:   The function STRING_ELT is used as an argument to
> arrayAssign even
> Rinternals.h:#define VECTOR_ELT(x,i)    ((SEXP *) DATAPTR(x))[i]
> Rinternals.h://SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:Rbyte (RAW_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:Rbyte ALTRAW_ELT(SEXP x, R_xlen_t i);
> Rinternals.h:Rcomplex (COMPLEX_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:Rcomplex ALTCOMPLEX_ELT(SEXP x, R_xlen_t i);
> Rinternals.h:SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:SEXP (VECTOR_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:SEXP ALTSTRING_ELT(SEXP, R_xlen_t);
> Rinternals.h:SEXP SET_VECTOR_ELT(SEXP x, R_xlen_t i, SEXP v);
> Rinternals.h:double (REAL_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:double ALTREAL_ELT(SEXP x, R_xlen_t i);
> Rinternals.h:int (INTEGER_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:int (LOGICAL_ELT)(SEXP x, R_xlen_t i);
> Rinternals.h:int ALTINTEGER_ELT(SEXP x, R_xlen_t i);
> Rinternals.h:int ALTLOGICAL_ELT(SEXP x, R_xlen_t i);
> Rinternals.h:void ALTCOMPLEX_SET_ELT(SEXP x, R_xlen_t i, Rcomplex v);
> Rinternals.h:void ALTINTEGER_SET_ELT(SEXP x, R_xlen_t i, int v);
> Rinternals.h:void ALTLOGICAL_SET_ELT(SEXP x, R_xlen_t i, int v);
> Rinternals.h:void ALTRAW_SET_ELT(SEXP x, R_xlen_t i, Rbyte v);
> Rinternals.h:void ALTREAL_SET_ELT(SEXP x, R_xlen_t i, double v);
> Rinternals.h:void ALTSTRING_SET_ELT(SEXP, R_xlen_t, SEXP);
> Rinternals.h:void SET_INTEGER_ELT(SEXP x, R_xlen_t i, int v);
> Rinternals.h:void SET_LOGICAL_ELT(SEXP x, R_xlen_t i, int v);
> Rinternals.h:void SET_REAL_ELT(SEXP x, R_xlen_t i, double v);
> Rinternals.h:void SET_STRING_ELT(SEXP x, R_xlen_t i, SEXP v);
>
> So the indexing is with R_xlen_t and they return the value itself as one
> would expect.
>
> Cheers,
> Simon
>
>
> > On Jun 17, 2021, at 2:22 AM, Toby Hocking <tdhock5 at gmail.com> wrote:
> >
> > By the way, where is the documentation for INTEGER_ELT, REAL_ELT, etc? I
> > looked in Writing R Extensions and R Internals but I did not see any
> > mention.
> > REAL_ELT is briefly mentioned on
> > https://svn.r-project.org/R/branches/ALTREP/ALTREP.html
> > Would it be possible to please add some mention of them to Writing R
> > Extensions?
> > - how many of these _ELT functions are there? INTEGER, REAL, ... ?
> > - in what version of R were they introduced?
> > - I guess input types are always SEXP and int?
> > - What are the output types for each?
> >
> > On Fri, May 28, 2021 at 5:16 PM <luke-tierney at uiowa.edu> wrote:
> >
> >> Since the INTEGER_ELT, REAL_ELT, etc, functions are fairly new it may
> >> be possible to check that places where they are used allow for them to
> >> allocate. I have fixed the one that got caught by Gabor's example, and
> >> a rchk run might be able to pick up others if rchk knows these could
> >> allocate. (I may also be forgetting other places where the _ELt
> >> methods are used.)  Fixing all call sites for REAL, INTEGER, etc, was
> >> never realistic so there GC has to be suspended during the method
> >> call, and that is done in the dispatch mechanism.
> >>
> >> The bigger problem is jumps from inside things that existing code
> >> assumes will not do that. Catching those jumps is possible but
> >> expensive; doing anything sensible if one is caught is really not
> >> possible.
> >>
> >> Best,
> >>
> >> luke
> >>
> >> On Fri, 28 May 2021, Gabriel Becker wrote:
> >>
> >>> Hi Jim et al,
> >>> Just to hopefully add a bit to what Luke already answered, from what I
> am
> >>> recalling looking back at that bioconductor thread Elt methods are used
> >> in
> >>> places where there are hard implicit assumptions that no garbage
> >> collection
> >>> will occur (ie they are called on things that aren't PROTECTed), and
> >> beyond
> >>> that, in places where there are hard assumptions that no error
> (longjmp)
> >>> will occur. I could be wrong, but I don't know that suspending garbage
> >>> collection would protect from the second one. Ie it is possible that an
> >>> error *ever* being raised from R code that implements an elt method
> could
> >>> cause all hell to break loose.
> >>>
> >>> Luke or Tomas Kalibera would know more.
> >>>
> >>> I was disappointed that implementing ALTREPs in R code was not in the
> >> cards
> >>> (it was in my original proposal back in 2016 to the DSC) but I trust
> Luke
> >>> that there are important reasons we can't safely allow that.
> >>>
> >>> Best,
> >>> ~G
> >>>
> >>> On Fri, May 28, 2021 at 8:31 AM Jim Hester <james.f.hester at gmail.com>
> >> wrote:
> >>>      From reading the discussion on the Bioconductor issue tracker it
> >>>      seems like
> >>>      the reason the GC is not suspended for the non-string ALTREP Elt
> >>>      methods is
> >>>      primarily due to performance concerns.
> >>>
> >>>      If this is the case perhaps an additional flag could be added to
> >>>      the
> >>>      `R_set_altrep_*()` functions so ALTREP authors could indicate if
> >>>      GC should
> >>>      be halted when that particular method is called for that
> >>>      particular ALTREP
> >>>      class.
> >>>
> >>>      This would avoid the performance hit (other than a boolean
> >>>      check) for the
> >>>      standard case when no allocations are expected, but allow
> >>>      authors to
> >>>      indicate that R should pause GC if needed for methods in their
> >>>      class.
> >>>
> >>>      On Fri, May 28, 2021 at 9:42 AM <luke-tierney at uiowa.edu> wrote:
> >>>
> >>>> integer and real Elt methods are not expected to allocate. You
> >>>      would
> >>>> have to suspend GC to be able to do that. This currently can't
> >>>      be done
> >>>> from package code.
> >>>>
> >>>> Best,
> >>>>
> >>>> luke
> >>>>
> >>>> On Fri, 28 May 2021, G?bor Cs?rdi wrote:
> >>>>
> >>>>> I have found some weird SEXP corruption behavior with
> >>>      ALTREP, which
> >>>>> could be a bug. (Or I could be doing something wrong.)
> >>>>>
> >>>>> I have an integer ALTREP vector that calls back to R from
> >>>      the Elt
> >>>>> method. When this vector is indexed in a lapply(), its first
> >>>      element
> >>>>> gets corrupted. Sometimes it's just a type change to
> >>>      logical, but
> >>>>> sometimes the corruption causes a crash.
> >>>>>
> >>>>> I saw this on macOS from R 3.5.3 to 4.2.0. I created a small
> >>>      package
> >>>>> that demonstrates this:
> >>>      https://github.com/gaborcsardi/redfish
> >>>>>
> >>>>> The R callback in this package calls
> >>>      `loadNamespace("Matrix")`, but
> >>>>> the same crash happens for other packages as well, and
> >>>      sometimes it
> >>>>> also happens if I don't load any packages at all. (But that
> >>>      example
> >>>>> was much more complicated, so I went with the package
> >>>      loading.)
> >>>>>
> >>>>> It is somewhat random, and sometimes turning off the JIT
> >>>      avoids the
> >>>>> crash, but not always.
> >>>>>
> >>>>> Hopefully I am just doing something wrong in the ALTREP code
> >>>      (see
> >>>>>
> >>>      https://github.com/gaborcsardi/redfish/blob/main/src/test.c),
> >>>      and it
> >>>>> is not actually a bug.
> >>>>>
> >>>>> Thanks,
> >>>>> Gabor
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>>
> >>>>
> >>>> --
> >>>> Luke Tierney
> >>>> Ralph E. Wareham Professor of Mathematical Sciences
> >>>> University of Iowa                  Phone:
> >>>       319-335-3386
> >>>> Department of Statistics and        Fax:
> >>>       319-335-3017
> >>>>    Actuarial Science
> >>>> 241 Schaeffer Hall                  email:
> >>>       luke-tierney at uiowa.edu
> >>>> Iowa City, IA 52242                 WWW:
> >>>      http://www.stat.uiowa.edu
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>
> >>>              [[alternative HTML version deleted]]
> >>>
> >>>      ______________________________________________
> >>>      R-devel at r-project.org mailing list
> >>>      https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>>
> >>>
> >>
> >> --
> >> Luke Tierney
> >> Ralph E. Wareham Professor of Mathematical Sciences
> >> University of Iowa                  Phone:             319-335-3386
> >> Department of Statistics and        Fax:               319-335-3017
> >>    Actuarial Science
> >> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> >> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Jun 17 20:31:55 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 17 Jun 2021 13:31:55 -0500 (CDT)
Subject: [Rd] [External] Possible ALTREP bug
In-Reply-To: <CALK03d35bNYDXhUsDyrSmPpd2QShayz2gdSP=rmkw5fPq+ucUQ@mail.gmail.com>
References: <CABtg=K==9KEfe6+_nLnQA=H73NSr8x7==fwZe-k=4=TSu6hanA@mail.gmail.com>
 <alpine.DEB.2.21.2105280819020.3254@luke-Latitude-7480>
 <CAD6tx94epfFGWb9AmGsq3QdF3S=gdRPO9oLRETQ4UaPN0Ja6bA@mail.gmail.com>
 <CAD4oTHHL2AQymy3M=jwek_hm8BJfkS_iXrNUNWQDtqNsvSXwXA@mail.gmail.com>
 <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
 <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
 <3F32255C-29C5-48B9-8EA1-FEAAB1D547F8@R-project.org>
 <CALK03d35bNYDXhUsDyrSmPpd2QShayz2gdSP=rmkw5fPq+ucUQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2106171321280.3318@luke-Latitude-7480>

On Thu, 17 Jun 2021, Toby Hocking wrote:

> Oliver, for clarification that section in writing R extensions mentions
> VECTOR_ELT and REAL but not REAL_ELT nor any other *_ELT functions. I was
> looking for an explanation of all the *_ELT functions (which are apparently
> new), not just VECTOR_ELT.
> Thanks Simon that response was very helpful.
> One more question: are there any circumstances in which one should use
> REAL_ELT(x,i) rather than REAL(x)[i] or vice versa? Or can they be used
> interchangeably?

For a single call it is better to use REAL_ELT(x, i) since it doesn't
force allocating a possibly large object in order to get a pointer to
its data with REAL(x).  If you are iterating over a whole object you
may want to get data in chunks. There are iteration macros that
help. Some examples are in src/main/summary.c.

Best,

luke

> 
> On Wed, Jun 16, 2021 at 4:29 PM Simon Urbanek <simon.urbanek at r-project.org>
> wrote:
>       The usual quote applies: "use the source, Luke":
>
>       $ grep _ELT *.h | sort
>       Rdefines.h:#define SET_ELEMENT(x, i, val)? ? ?
>       ?SET_VECTOR_ELT(x, i, val)
>       Rinternals.h:? ?The function STRING_ELT is used as an argument
>       to arrayAssign even
>       Rinternals.h:#define VECTOR_ELT(x,i)? ? ((SEXP *) DATAPTR(x))[i]
>       Rinternals.h://SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:Rbyte (RAW_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:Rbyte ALTRAW_ELT(SEXP x, R_xlen_t i);
>       Rinternals.h:Rcomplex (COMPLEX_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:Rcomplex ALTCOMPLEX_ELT(SEXP x, R_xlen_t i);
>       Rinternals.h:SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:SEXP (VECTOR_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:SEXP ALTSTRING_ELT(SEXP, R_xlen_t);
>       Rinternals.h:SEXP SET_VECTOR_ELT(SEXP x, R_xlen_t i, SEXP v);
>       Rinternals.h:double (REAL_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:double ALTREAL_ELT(SEXP x, R_xlen_t i);
>       Rinternals.h:int (INTEGER_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:int (LOGICAL_ELT)(SEXP x, R_xlen_t i);
>       Rinternals.h:int ALTINTEGER_ELT(SEXP x, R_xlen_t i);
>       Rinternals.h:int ALTLOGICAL_ELT(SEXP x, R_xlen_t i);
>       Rinternals.h:void ALTCOMPLEX_SET_ELT(SEXP x, R_xlen_t i,
>       Rcomplex v);
>       Rinternals.h:void ALTINTEGER_SET_ELT(SEXP x, R_xlen_t i, int v);
>       Rinternals.h:void ALTLOGICAL_SET_ELT(SEXP x, R_xlen_t i, int v);
>       Rinternals.h:void ALTRAW_SET_ELT(SEXP x, R_xlen_t i, Rbyte v);
>       Rinternals.h:void ALTREAL_SET_ELT(SEXP x, R_xlen_t i, double v);
>       Rinternals.h:void ALTSTRING_SET_ELT(SEXP, R_xlen_t, SEXP);
>       Rinternals.h:void SET_INTEGER_ELT(SEXP x, R_xlen_t i, int v);
>       Rinternals.h:void SET_LOGICAL_ELT(SEXP x, R_xlen_t i, int v);
>       Rinternals.h:void SET_REAL_ELT(SEXP x, R_xlen_t i, double v);
>       Rinternals.h:void SET_STRING_ELT(SEXP x, R_xlen_t i, SEXP v);
>
>       So the indexing is with R_xlen_t and they return the value
>       itself as one would expect.
>
>       Cheers,
>       Simon
> 
>
>       > On Jun 17, 2021, at 2:22 AM, Toby Hocking <tdhock5 at gmail.com>
>       wrote:
>       >
>       > By the way, where is the documentation for INTEGER_ELT,
>       REAL_ELT, etc? I
>       > looked in Writing R Extensions and R Internals but I did not
>       see any
>       > mention.
>       > REAL_ELT is briefly mentioned on
>       > https://svn.r-project.org/R/branches/ALTREP/ALTREP.html
>       > Would it be possible to please add some mention of them to
>       Writing R
>       > Extensions?
>       > - how many of these _ELT functions are there? INTEGER, REAL,
>       ... ?
>       > - in what version of R were they introduced?
>       > - I guess input types are always SEXP and int?
>       > - What are the output types for each?
>       >
>       > On Fri, May 28, 2021 at 5:16 PM <luke-tierney at uiowa.edu>
>       wrote:
>       >
>       >> Since the INTEGER_ELT, REAL_ELT, etc, functions are fairly
>       new it may
>       >> be possible to check that places where they are used allow
>       for them to
>       >> allocate. I have fixed the one that got caught by Gabor's
>       example, and
>       >> a rchk run might be able to pick up others if rchk knows
>       these could
>       >> allocate. (I may also be forgetting other places where the
>       _ELt
>       >> methods are used.)? Fixing all call sites for REAL, INTEGER,
>       etc, was
>       >> never realistic so there GC has to be suspended during the
>       method
>       >> call, and that is done in the dispatch mechanism.
>       >>
>       >> The bigger problem is jumps from inside things that existing
>       code
>       >> assumes will not do that. Catching those jumps is possible
>       but
>       >> expensive; doing anything sensible if one is caught is really
>       not
>       >> possible.
>       >>
>       >> Best,
>       >>
>       >> luke
>       >>
>       >> On Fri, 28 May 2021, Gabriel Becker wrote:
>       >>
>       >>> Hi Jim et al,
>       >>> Just to hopefully add a bit to what Luke already answered,
>       from what I am
>       >>> recalling looking back at that bioconductor thread Elt
>       methods are used
>       >> in
>       >>> places where there are hard implicit assumptions that no
>       garbage
>       >> collection
>       >>> will occur (ie they are called on things that aren't
>       PROTECTed), and
>       >> beyond
>       >>> that, in places where there are hard assumptions that no
>       error (longjmp)
>       >>> will occur. I could be wrong, but I don't know that
>       suspending garbage
>       >>> collection would protect from the second one. Ie it is
>       possible that an
>       >>> error *ever* being raised from R code that implements an elt
>       method could
>       >>> cause all hell to break loose.
>       >>>
>       >>> Luke or Tomas Kalibera would know more.
>       >>>
>       >>> I was disappointed that implementing ALTREPs in R code was
>       not in the
>       >> cards
>       >>> (it was in my original proposal back in 2016 to the DSC) but
>       I trust Luke
>       >>> that there are important reasons we can't safely allow that.
>       >>>
>       >>> Best,
>       >>> ~G
>       >>>
>       >>> On Fri, May 28, 2021 at 8:31 AM Jim Hester
>       <james.f.hester at gmail.com>
>       >> wrote:
>       >>>? ? ? From reading the discussion on the Bioconductor issue
>       tracker it
>       >>>? ? ? seems like
>       >>>? ? ? the reason the GC is not suspended for the non-string
>       ALTREP Elt
>       >>>? ? ? methods is
>       >>>? ? ? primarily due to performance concerns.
>       >>>
>       >>>? ? ? If this is the case perhaps an additional flag could be
>       added to
>       >>>? ? ? the
>       >>>? ? ? `R_set_altrep_*()` functions so ALTREP authors could
>       indicate if
>       >>>? ? ? GC should
>       >>>? ? ? be halted when that particular method is called for
>       that
>       >>>? ? ? particular ALTREP
>       >>>? ? ? class.
>       >>>
>       >>>? ? ? This would avoid the performance hit (other than a
>       boolean
>       >>>? ? ? check) for the
>       >>>? ? ? standard case when no allocations are expected, but
>       allow
>       >>>? ? ? authors to
>       >>>? ? ? indicate that R should pause GC if needed for methods
>       in their
>       >>>? ? ? class.
>       >>>
>       >>>? ? ? On Fri, May 28, 2021 at 9:42 AM
>       <luke-tierney at uiowa.edu> wrote:
>       >>>
>       >>>> integer and real Elt methods are not expected to allocate.
>       You
>       >>>? ? ? would
>       >>>> have to suspend GC to be able to do that. This currently
>       can't
>       >>>? ? ? be done
>       >>>> from package code.
>       >>>>
>       >>>> Best,
>       >>>>
>       >>>> luke
>       >>>>
>       >>>> On Fri, 28 May 2021, G?bor Cs?rdi wrote:
>       >>>>
>       >>>>> I have found some weird SEXP corruption behavior with
>       >>>? ? ? ALTREP, which
>       >>>>> could be a bug. (Or I could be doing something wrong.)
>       >>>>>
>       >>>>> I have an integer ALTREP vector that calls back to R from
>       >>>? ? ? the Elt
>       >>>>> method. When this vector is indexed in a lapply(), its
>       first
>       >>>? ? ? element
>       >>>>> gets corrupted. Sometimes it's just a type change to
>       >>>? ? ? logical, but
>       >>>>> sometimes the corruption causes a crash.
>       >>>>>
>       >>>>> I saw this on macOS from R 3.5.3 to 4.2.0. I created a
>       small
>       >>>? ? ? package
>       >>>>> that demonstrates this:
>       >>>? ? ? https://github.com/gaborcsardi/redfish
>       >>>>>
>       >>>>> The R callback in this package calls
>       >>>? ? ? `loadNamespace("Matrix")`, but
>       >>>>> the same crash happens for other packages as well, and
>       >>>? ? ? sometimes it
>       >>>>> also happens if I don't load any packages at all. (But
>       that
>       >>>? ? ? example
>       >>>>> was much more complicated, so I went with the package
>       >>>? ? ? loading.)
>       >>>>>
>       >>>>> It is somewhat random, and sometimes turning off the JIT
>       >>>? ? ? avoids the
>       >>>>> crash, but not always.
>       >>>>>
>       >>>>> Hopefully I am just doing something wrong in the ALTREP
>       code
>       >>>? ? ? (see
>       >>>>>
>       >>>? ? ?
>       https://github.com/gaborcsardi/redfish/blob/main/src/test.c),
>       >>>? ? ? and it
>       >>>>> is not actually a bug.
>       >>>>>
>       >>>>> Thanks,
>       >>>>> Gabor
>       >>>>>
>       >>>>> ______________________________________________
>       >>>>> R-devel at r-project.org mailing list
>       >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>       >>>>>
>       >>>>
>       >>>> --
>       >>>> Luke Tierney
>       >>>> Ralph E. Wareham Professor of Mathematical Sciences
>       >>>> University of Iowa? ? ? ? ? ? ? ? ? Phone:
>       >>>? ? ? ?319-335-3386
>       >>>> Department of Statistics and? ? ? ? Fax:
>       >>>? ? ? ?319-335-3017
>       >>>>? ? Actuarial Science
>       >>>> 241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:
>       >>>? ? ? ?luke-tierney at uiowa.edu
>       >>>> Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:
>       >>>? ? ? http://www.stat.uiowa.edu
>       >>>> ______________________________________________
>       >>>> R-devel at r-project.org mailing list
>       >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>       >>>>
>       >>>
>       >>>? ? ? ? ? ? ? [[alternative HTML version deleted]]
>       >>>
>       >>>? ? ? ______________________________________________
>       >>>? ? ? R-devel at r-project.org mailing list
>       >>>? ? ? https://stat.ethz.ch/mailman/listinfo/r-devel
>       >>>
>       >>>
>       >>>
>       >>
>       >> --
>       >> Luke Tierney
>       >> Ralph E. Wareham Professor of Mathematical Sciences
>       >> University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ?
>       ?319-335-3386
>       >> Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ?
>       ?319-335-3017
>       >>? ? Actuarial Science
>       >> 241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:?
>       ?luke-tierney at uiowa.edu
>       >> Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:?
>       http://www.stat.uiowa.edu
>       >> ______________________________________________
>       >> R-devel at r-project.org mailing list
>       >> https://stat.ethz.ch/mailman/listinfo/r-devel
>       >>
>       >
>       >? ? ? ?[[alternative HTML version deleted]]
>       >
>       > ______________________________________________
>       > R-devel at r-project.org mailing list
>       > https://stat.ethz.ch/mailman/listinfo/r-devel
>       >
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From g@bembecker @end|ng |rom gm@||@com  Thu Jun 17 22:23:28 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 17 Jun 2021 13:23:28 -0700
Subject: [Rd] [External] Possible ALTREP bug
In-Reply-To: <alpine.DEB.2.21.2106171321280.3318@luke-Latitude-7480>
References: <CABtg=K==9KEfe6+_nLnQA=H73NSr8x7==fwZe-k=4=TSu6hanA@mail.gmail.com>
 <alpine.DEB.2.21.2105280819020.3254@luke-Latitude-7480>
 <CAD6tx94epfFGWb9AmGsq3QdF3S=gdRPO9oLRETQ4UaPN0Ja6bA@mail.gmail.com>
 <CAD4oTHHL2AQymy3M=jwek_hm8BJfkS_iXrNUNWQDtqNsvSXwXA@mail.gmail.com>
 <alpine.DEB.2.21.2105281554190.3254@luke-Latitude-7480>
 <CALK03d09r2PsFULX7s5qMuvtLrQ2p2nu=zr5x4nJamqnP0hv7g@mail.gmail.com>
 <3F32255C-29C5-48B9-8EA1-FEAAB1D547F8@R-project.org>
 <CALK03d35bNYDXhUsDyrSmPpd2QShayz2gdSP=rmkw5fPq+ucUQ@mail.gmail.com>
 <alpine.DEB.2.21.2106171321280.3318@luke-Latitude-7480>
Message-ID: <CAD4oTHELbKgK7o0njUeRG7EVpotrPK98P+ytHDeFhfbkjrVqRA@mail.gmail.com>

Hi Toby,

Just to be more concrete about why to avoid REAL and about the iteration
macros Luke mentioned.

The ITERATE_BY_REGION* macros in include/R_ext/Itermacros.h are built on
top of *_GET_REGION rather than REAL/INTEGER. The key difference here is
that REAL/INTEGER  go down to the Dataptr method of the altclass, will
generally "explode" the ALTREP, which returns a writable data pointer, thus
invalidating the metadata, effectively turning it into a non-altrep form
while Get_region method provides a way to return a contiguous region of the
data in a way that (can and generally does) leave the ALTREPness intact.

We can see the difference by looking at the two respective methods for the
compact sequences ALTREP classes that luke wrote that ship with R:

static void *compact_intseq_Dataptr(SEXP x, Rboolean writeable)
{

    if (COMPACT_SEQ_EXPANDED(x) == R_NilValue) {

/* no need to re-run if expanded data exists */

PROTECT(x);

SEXP info = COMPACT_SEQ_INFO(x);

R_xlen_t n = COMPACT_INTSEQ_INFO_LENGTH(info);

int n1 = COMPACT_INTSEQ_INFO_FIRST(info);

int inc = COMPACT_INTSEQ_INFO_INCR(info);

* SEXP val = allocVector(INTSXP, n);*

int *data = INTEGER(val);


if (inc == 1) {

   /* compact sequences n1 : n2 with n1 <= n2 */

*    for (R_xlen_t i = 0; i < n; i++)*

*       data[i] = (int) (n1 + i);*

}

else if (inc == -1) {

   /* compact sequences n1 : n2 with n1 > n2 */

   for (R_xlen_t i = 0; i < n; i++)

        data[i] = (int) (n1 - i);

}

else

   error("compact sequences with increment %d not supported yet", inc);


* SET_COMPACT_SEQ_EXPANDED(x, val);*
UNPROTECT(1);

    }
    *return DATAPTR(COMPACT_SEQ_EXPANDED(x));*
}

So the above sets the "Expanded" altrep data to a SEXP that holds a normal
SEXP with all the data if it isn't there already, and then returns DATAPTR
of that.

Get_region, on the other hand, looks like this:

static R_xlen_t
compact_intseq_Get_region(SEXP sx, R_xlen_t i, R_xlen_t n,* int *buf*)
{
    /* should not get here if x is already expanded */
    CHECK_NOT_EXPANDED(sx);

    SEXP info = COMPACT_SEQ_INFO(sx);
    R_xlen_t size = COMPACT_INTSEQ_INFO_LENGTH(info);
    R_xlen_t n1 = COMPACT_INTSEQ_INFO_FIRST(info);
    int inc = COMPACT_INTSEQ_INFO_INCR(info);

    R_xlen_t ncopy = size - i > n ? n : size - i;
    if (inc == 1) {


* for (R_xlen_t k = 0; k < ncopy; k++)**    buf[k] = (int) (n1 + k + i);*
return ncopy;

    }
    else if (inc == -1) {

for (R_xlen_t k = 0; k < ncopy; k++)
   buf[k] = (int) (n1 - k - i);
return ncopy;

    }
    else

error("compact sequences with increment %d not supported yet", inc);

}

Here we are passing a buffer to the method, and that buffer gets populated
with the data. No new SEXP, no expanding the vector.

ITERATE_BY_REGION wraps that nicely so you can loop over the whole thing,
but the data is grabbed chunkwise, no huge allocation, no expanding of the
altrep.

One of the examples from summary.c is rsum, which looks like:

static Rboolean rsum(SEXP sx, double *value, Rboolean narm)
{
    LDOUBLE s = 0.0;
    Rboolean updated = FALSE;


*   ITERATE_BY_REGION(sx, x, i, nbatch, double, REAL, {*

*    for (R_xlen_t k = 0; k < nbatch; k++) {*

* if (!narm || !ISNAN(x[k])) {*

*    if(!updated) updated = TRUE;*

*    s += x[k];*

* }*

*    }*
* });*

    if(s > DBL_MAX) *value = R_PosInf;
    else if (s < -DBL_MAX) *value = R_NegInf;
    else *value = (double) s;

    return updated;
}

sx is the SEXP input, x is the chosen name of a variable, declared in the
scope of the macro, that holds the current batch of data that can be used
within the bracketted expression that is the macro's last argument. nbatch
is the name of a variable which will contain how many elements of data the
current batch has in it,  double is the raw data type (used in declaration
of x, in fact), REAL is the R-macro .."type" I guess, used internally. i is
the name chosen for another declared-within-the-macro variable which will
always contain the position in the overall vector corresponding to the
start of the current buffer.

Hope that helps.

Best,
~G

On Thu, Jun 17, 2021 at 11:32 AM <luke-tierney at uiowa.edu> wrote:

> On Thu, 17 Jun 2021, Toby Hocking wrote:
>
> > Oliver, for clarification that section in writing R extensions mentions
> > VECTOR_ELT and REAL but not REAL_ELT nor any other *_ELT functions. I was
> > looking for an explanation of all the *_ELT functions (which are
> apparently
> > new), not just VECTOR_ELT.
> > Thanks Simon that response was very helpful.
> > One more question: are there any circumstances in which one should use
> > REAL_ELT(x,i) rather than REAL(x)[i] or vice versa? Or can they be used
> > interchangeably?
>
> For a single call it is better to use REAL_ELT(x, i) since it doesn't
> force allocating a possibly large object in order to get a pointer to
> its data with REAL(x).  If you are iterating over a whole object you
> may want to get data in chunks. There are iteration macros that
> help. Some examples are in src/main/summary.c.
>
> Best,
>
> luke
>
> >
> > On Wed, Jun 16, 2021 at 4:29 PM Simon Urbanek <
> simon.urbanek at r-project.org>
> > wrote:
> >       The usual quote applies: "use the source, Luke":
> >
> >       $ grep _ELT *.h | sort
> >       Rdefines.h:#define SET_ELEMENT(x, i, val)
> >        SET_VECTOR_ELT(x, i, val)
> >       Rinternals.h:   The function STRING_ELT is used as an argument
> >       to arrayAssign even
> >       Rinternals.h:#define VECTOR_ELT(x,i)    ((SEXP *) DATAPTR(x))[i]
> >       Rinternals.h://SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:Rbyte (RAW_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:Rbyte ALTRAW_ELT(SEXP x, R_xlen_t i);
> >       Rinternals.h:Rcomplex (COMPLEX_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:Rcomplex ALTCOMPLEX_ELT(SEXP x, R_xlen_t i);
> >       Rinternals.h:SEXP (STRING_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:SEXP (VECTOR_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:SEXP ALTSTRING_ELT(SEXP, R_xlen_t);
> >       Rinternals.h:SEXP SET_VECTOR_ELT(SEXP x, R_xlen_t i, SEXP v);
> >       Rinternals.h:double (REAL_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:double ALTREAL_ELT(SEXP x, R_xlen_t i);
> >       Rinternals.h:int (INTEGER_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:int (LOGICAL_ELT)(SEXP x, R_xlen_t i);
> >       Rinternals.h:int ALTINTEGER_ELT(SEXP x, R_xlen_t i);
> >       Rinternals.h:int ALTLOGICAL_ELT(SEXP x, R_xlen_t i);
> >       Rinternals.h:void ALTCOMPLEX_SET_ELT(SEXP x, R_xlen_t i,
> >       Rcomplex v);
> >       Rinternals.h:void ALTINTEGER_SET_ELT(SEXP x, R_xlen_t i, int v);
> >       Rinternals.h:void ALTLOGICAL_SET_ELT(SEXP x, R_xlen_t i, int v);
> >       Rinternals.h:void ALTRAW_SET_ELT(SEXP x, R_xlen_t i, Rbyte v);
> >       Rinternals.h:void ALTREAL_SET_ELT(SEXP x, R_xlen_t i, double v);
> >       Rinternals.h:void ALTSTRING_SET_ELT(SEXP, R_xlen_t, SEXP);
> >       Rinternals.h:void SET_INTEGER_ELT(SEXP x, R_xlen_t i, int v);
> >       Rinternals.h:void SET_LOGICAL_ELT(SEXP x, R_xlen_t i, int v);
> >       Rinternals.h:void SET_REAL_ELT(SEXP x, R_xlen_t i, double v);
> >       Rinternals.h:void SET_STRING_ELT(SEXP x, R_xlen_t i, SEXP v);
> >
> >       So the indexing is with R_xlen_t and they return the value
> >       itself as one would expect.
> >
> >       Cheers,
> >       Simon
> >
> >
> >       > On Jun 17, 2021, at 2:22 AM, Toby Hocking <tdhock5 at gmail.com>
> >       wrote:
> >       >
> >       > By the way, where is the documentation for INTEGER_ELT,
> >       REAL_ELT, etc? I
> >       > looked in Writing R Extensions and R Internals but I did not
> >       see any
> >       > mention.
> >       > REAL_ELT is briefly mentioned on
> >       > https://svn.r-project.org/R/branches/ALTREP/ALTREP.html
> >       > Would it be possible to please add some mention of them to
> >       Writing R
> >       > Extensions?
> >       > - how many of these _ELT functions are there? INTEGER, REAL,
> >       ... ?
> >       > - in what version of R were they introduced?
> >       > - I guess input types are always SEXP and int?
> >       > - What are the output types for each?
> >       >
> >       > On Fri, May 28, 2021 at 5:16 PM <luke-tierney at uiowa.edu>
> >       wrote:
> >       >
> >       >> Since the INTEGER_ELT, REAL_ELT, etc, functions are fairly
> >       new it may
> >       >> be possible to check that places where they are used allow
> >       for them to
> >       >> allocate. I have fixed the one that got caught by Gabor's
> >       example, and
> >       >> a rchk run might be able to pick up others if rchk knows
> >       these could
> >       >> allocate. (I may also be forgetting other places where the
> >       _ELt
> >       >> methods are used.)  Fixing all call sites for REAL, INTEGER,
> >       etc, was
> >       >> never realistic so there GC has to be suspended during the
> >       method
> >       >> call, and that is done in the dispatch mechanism.
> >       >>
> >       >> The bigger problem is jumps from inside things that existing
> >       code
> >       >> assumes will not do that. Catching those jumps is possible
> >       but
> >       >> expensive; doing anything sensible if one is caught is really
> >       not
> >       >> possible.
> >       >>
> >       >> Best,
> >       >>
> >       >> luke
> >       >>
> >       >> On Fri, 28 May 2021, Gabriel Becker wrote:
> >       >>
> >       >>> Hi Jim et al,
> >       >>> Just to hopefully add a bit to what Luke already answered,
> >       from what I am
> >       >>> recalling looking back at that bioconductor thread Elt
> >       methods are used
> >       >> in
> >       >>> places where there are hard implicit assumptions that no
> >       garbage
> >       >> collection
> >       >>> will occur (ie they are called on things that aren't
> >       PROTECTed), and
> >       >> beyond
> >       >>> that, in places where there are hard assumptions that no
> >       error (longjmp)
> >       >>> will occur. I could be wrong, but I don't know that
> >       suspending garbage
> >       >>> collection would protect from the second one. Ie it is
> >       possible that an
> >       >>> error *ever* being raised from R code that implements an elt
> >       method could
> >       >>> cause all hell to break loose.
> >       >>>
> >       >>> Luke or Tomas Kalibera would know more.
> >       >>>
> >       >>> I was disappointed that implementing ALTREPs in R code was
> >       not in the
> >       >> cards
> >       >>> (it was in my original proposal back in 2016 to the DSC) but
> >       I trust Luke
> >       >>> that there are important reasons we can't safely allow that.
> >       >>>
> >       >>> Best,
> >       >>> ~G
> >       >>>
> >       >>> On Fri, May 28, 2021 at 8:31 AM Jim Hester
> >       <james.f.hester at gmail.com>
> >       >> wrote:
> >       >>>      From reading the discussion on the Bioconductor issue
> >       tracker it
> >       >>>      seems like
> >       >>>      the reason the GC is not suspended for the non-string
> >       ALTREP Elt
> >       >>>      methods is
> >       >>>      primarily due to performance concerns.
> >       >>>
> >       >>>      If this is the case perhaps an additional flag could be
> >       added to
> >       >>>      the
> >       >>>      `R_set_altrep_*()` functions so ALTREP authors could
> >       indicate if
> >       >>>      GC should
> >       >>>      be halted when that particular method is called for
> >       that
> >       >>>      particular ALTREP
> >       >>>      class.
> >       >>>
> >       >>>      This would avoid the performance hit (other than a
> >       boolean
> >       >>>      check) for the
> >       >>>      standard case when no allocations are expected, but
> >       allow
> >       >>>      authors to
> >       >>>      indicate that R should pause GC if needed for methods
> >       in their
> >       >>>      class.
> >       >>>
> >       >>>      On Fri, May 28, 2021 at 9:42 AM
> >       <luke-tierney at uiowa.edu> wrote:
> >       >>>
> >       >>>> integer and real Elt methods are not expected to allocate.
> >       You
> >       >>>      would
> >       >>>> have to suspend GC to be able to do that. This currently
> >       can't
> >       >>>      be done
> >       >>>> from package code.
> >       >>>>
> >       >>>> Best,
> >       >>>>
> >       >>>> luke
> >       >>>>
> >       >>>> On Fri, 28 May 2021, G?bor Cs?rdi wrote:
> >       >>>>
> >       >>>>> I have found some weird SEXP corruption behavior with
> >       >>>      ALTREP, which
> >       >>>>> could be a bug. (Or I could be doing something wrong.)
> >       >>>>>
> >       >>>>> I have an integer ALTREP vector that calls back to R from
> >       >>>      the Elt
> >       >>>>> method. When this vector is indexed in a lapply(), its
> >       first
> >       >>>      element
> >       >>>>> gets corrupted. Sometimes it's just a type change to
> >       >>>      logical, but
> >       >>>>> sometimes the corruption causes a crash.
> >       >>>>>
> >       >>>>> I saw this on macOS from R 3.5.3 to 4.2.0. I created a
> >       small
> >       >>>      package
> >       >>>>> that demonstrates this:
> >       >>>      https://github.com/gaborcsardi/redfish
> >       >>>>>
> >       >>>>> The R callback in this package calls
> >       >>>      `loadNamespace("Matrix")`, but
> >       >>>>> the same crash happens for other packages as well, and
> >       >>>      sometimes it
> >       >>>>> also happens if I don't load any packages at all. (But
> >       that
> >       >>>      example
> >       >>>>> was much more complicated, so I went with the package
> >       >>>      loading.)
> >       >>>>>
> >       >>>>> It is somewhat random, and sometimes turning off the JIT
> >       >>>      avoids the
> >       >>>>> crash, but not always.
> >       >>>>>
> >       >>>>> Hopefully I am just doing something wrong in the ALTREP
> >       code
> >       >>>      (see
> >       >>>>>
> >       >>>
> >       https://github.com/gaborcsardi/redfish/blob/main/src/test.c),
> >       >>>      and it
> >       >>>>> is not actually a bug.
> >       >>>>>
> >       >>>>> Thanks,
> >       >>>>> Gabor
> >       >>>>>
> >       >>>>> ______________________________________________
> >       >>>>> R-devel at r-project.org mailing list
> >       >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >       >>>>>
> >       >>>>
> >       >>>> --
> >       >>>> Luke Tierney
> >       >>>> Ralph E. Wareham Professor of Mathematical Sciences
> >       >>>> University of Iowa                  Phone:
> >       >>>       319-335-3386
> >       >>>> Department of Statistics and        Fax:
> >       >>>       319-335-3017
> >       >>>>    Actuarial Science
> >       >>>> 241 Schaeffer Hall                  email:
> >       >>>       luke-tierney at uiowa.edu
> >       >>>> Iowa City, IA 52242                 WWW:
> >       >>>      http://www.stat.uiowa.edu
> >       >>>> ______________________________________________
> >       >>>> R-devel at r-project.org mailing list
> >       >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >       >>>>
> >       >>>
> >       >>>              [[alternative HTML version deleted]]
> >       >>>
> >       >>>      ______________________________________________
> >       >>>      R-devel at r-project.org mailing list
> >       >>>      https://stat.ethz.ch/mailman/listinfo/r-devel
> >       >>>
> >       >>>
> >       >>>
> >       >>
> >       >> --
> >       >> Luke Tierney
> >       >> Ralph E. Wareham Professor of Mathematical Sciences
> >       >> University of Iowa                  Phone:
> >        319-335-3386
> >       >> Department of Statistics and        Fax:
> >        319-335-3017
> >       >>    Actuarial Science
> >       >> 241 Schaeffer Hall                  email:
> >        luke-tierney at uiowa.edu
> >       >> Iowa City, IA 52242                 WWW:
> >       http://www.stat.uiowa.edu
> >       >> ______________________________________________
> >       >> R-devel at r-project.org mailing list
> >       >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >       >>
> >       >
> >       >       [[alternative HTML version deleted]]
> >       >
> >       > ______________________________________________
> >       > R-devel at r-project.org mailing list
> >       > https://stat.ethz.ch/mailman/listinfo/r-devel
> >       >
> >
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From erez@homron @end|ng |rom myko|@b@com  Sat Jun 19 10:21:55 2021
From: erez@homron @end|ng |rom myko|@b@com (Erez Shomron)
Date: Sat, 19 Jun 2021 11:21:55 +0300
Subject: [Rd] Additional an example for the forward pipe operator's
 documentation
Message-ID: <f31c536f-a76f-307c-c996-3468eebf6862@mykolab.com>

Hello,


While playing around with the new forward pipe operator I've noticed 
there's a possibly overlooked usage for the operator, which would be 
very beneficial to document.

Whenever you want the LHS to be passed to an argument other than the 
first, the documented example demonstrates how to do that with an 
anonymous function.


However the syntax is less than ideal (aesthetically):


mtcars |> subset(cyl == 4) |> (function(d) lm(mpg ~ disp, data = d))()


Fortunately there's a better, undocumented option using named arguments:


mtcars |> subset(cyl == 4) |> lm(formula = mpg ~ disp)


The reason this works, is because of how R matches arguments. As the 
language definition states, first named arguments are matched, then 
partial matching, and only afterwards positional arguments are matched.


I think people that are frustrated with former syntax would be happy to 
know the latter option exists.


That's just my opinion.


Thank you for reading,

Erez


From ggrothend|eck @end|ng |rom gm@||@com  Sat Jun 19 14:25:45 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sat, 19 Jun 2021 08:25:45 -0400
Subject: [Rd] Additional an example for the forward pipe operator's
 documentation
In-Reply-To: <f31c536f-a76f-307c-c996-3468eebf6862@mykolab.com>
References: <f31c536f-a76f-307c-c996-3468eebf6862@mykolab.com>
Message-ID: <CAP01uRmXfBvjWqFb1gPvnOKHG4pKAe7higHs=ehAsK5B6WrQLQ@mail.gmail.com>

These also work in this particular case although not in general and the Call:
line in the output differs:

  mtcars |> subset(cyl == 4) |> with(lm(mpg ~ disp))
  mtcars |> with(lm(mpg ~ disp, subset = cyl == 4))

On Sat, Jun 19, 2021 at 7:23 AM Erez Shomron <erezshomron at mykolab.com> wrote:
>
> Hello,
>
>
> While playing around with the new forward pipe operator I've noticed
> there's a possibly overlooked usage for the operator, which would be
> very beneficial to document.
>
> Whenever you want the LHS to be passed to an argument other than the
> first, the documented example demonstrates how to do that with an
> anonymous function.
>
>
> However the syntax is less than ideal (aesthetically):
>
>
> mtcars |> subset(cyl == 4) |> (function(d) lm(mpg ~ disp, data = d))()
>
>
> Fortunately there's a better, undocumented option using named arguments:
>
>
> mtcars |> subset(cyl == 4) |> lm(formula = mpg ~ disp)
>
>
> The reason this works, is because of how R matches arguments. As the
> language definition states, first named arguments are matched, then
> partial matching, and only afterwards positional arguments are matched.
>
>
> I think people that are frustrated with former syntax would be happy to
> know the latter option exists.
>
>
> That's just my opinion.
>
>
> Thank you for reading,
>
> Erez
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From brenton @end|ng |rom w|ern|k@org  Sat Jun 19 20:33:37 2021
From: brenton @end|ng |rom w|ern|k@org (Brenton Wiernik)
Date: Sat, 19 Jun 2021 14:33:37 -0400
Subject: [Rd] Additional an example for the forward pipe operator's
 documentation
Message-ID: <0LsjTb-1lAung3icT-012Gue@mrelay.perfora.net>

> mtcars |> subset(cyl == 4) |> lm(formula = mpg ~ disp)

This isn?t really a reliable approach. It works for `lm()`, where `data` is the second argument, but not for `glm()` unless the first _two_ arguments are named.

mtcars |> subset(cyl == 4) |> glm(formula = mpg ~ disp, family = "gaussian")

It would basically never work for `metafor::rma()`, where `data` is over a dozen arguments into the list. 

In short, reliance on convenient placement of `data` in the argument list probably isn?t something the documentation should encourage.

The anonymous function syntax can be made more aesthetically appealing through effective use of indentation and line breaks (https://twitter.com/bmwiernik/status/1402565800691634182?s=20), eg:

mtcars |> 
  subset(cyl == 4) |>
  ( \(data)
    lm(mpg ~ disp, data = data
  )()



	[[alternative HTML version deleted]]


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Jun 21 00:20:26 2021
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sun, 20 Jun 2021 15:20:26 -0700
Subject: [Rd] Should last default to .Machine$integer.max-1 for substring()
Message-ID: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>

Currently, substring defaults to last=1000000L, which strongly
suggests the intent is to default to "nchar(x)" without having to
compute/allocate that up front.

Unfortunately, this default makes no sense for "very large" strings
which may exceed 1000000L in "width".

The max width of a string is .Machine$integer.max-1:

# works
x = strrep(" ", .Machine$integer.max-1L)
# fails
x = strrep(" ", .Machine$integer.max)
Error in strrep(" ", .Machine$integer.max) :
  'Calloc' could not allocate memory (18446744071562067968 of 1 bytes)

(see also the comment in src/main/character.c: "Character strings in R
are less than 2^31-1 bytes, so we use int not size_t.")

So it seems to me either .Machine$integer.max or
.Machine$integer.max-1L would be a more sensible default. Am I missing
something?

Mike C


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Mon Jun 21 03:28:12 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Mon, 21 Jun 2021 01:28:12 +0000 (UTC)
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
Message-ID: <470369534.2906835.1624238892676@mail.yahoo.com>


> On Sunday, June 20, 2021, 6:21:22 PM EDT, Michael Chirico <michaelchirico4 at gmail.com> wrote:
>
> Currently, substring defaults to last=1000000L, which strongly
> suggests the intent is to default to "nchar(x)" without having to
> compute/allocate that up front.
>
> Unfortunately, this default makes no sense for "very large" strings
> which may exceed 1000000L in "width".
>
> The max width of a string is .Machine$integer.max-1:

I think the max width is .Machine$integer.max.? What happened below is a
bug due to buffer overflow in `strrep`:

> # works
> x = strrep(" ", .Machine$integer.max-1L)
> # fails
> x = strrep(" ", .Machine$integer.max)
> Error in strrep(" ", .Machine$integer.max) :
>?? 'Calloc' could not allocate memory (18446744071562067968 of 1 bytes)

Notice the very large number that was tried to be Calloc'ed.? That's
(size_t) -1.

The problem is (src/include/R_ext/RS.h at 85):

??? #define CallocCharBuf(n) (char *) R_chk_calloc((R_SIZE_T) ((n)+1), sizeof(char))

The `((n) + 1)` overflows `int` and produces -1 (well, undefined behavior
so who knows), which when cast to size_t produces that very large number
which can't be allocated.

I think this should be:

??? #define CallocCharBuf(n) (char *) R_chk_calloc(((R_SIZE_T)(n))+1, sizeof(char))

I can reproduce the failure before the change.? After the change I get:

??? > x = strrep(" ", .Machine$integer.max)
??? Error in strrep(" ", .Machine$integer.max) :
????? 'Calloc' could not allocate memory (2147483648 of 1 bytes)

I believe this to be the expected result on a machine that doesn't have
enough memory to allocate INT_MAX + 1 bytes, as happens to be the case on
my R build system (it's a VM that gets 2GB total as the host machine can
barely spare that to begin with).

> (see also the comment in src/main/character.c: "Character strings in R
> are less than 2^31-1 bytes, so we use int not size_t.")

FWIW WRE states:

> Note that R character strings are restricted to 2^31 - 1 bytes

This is INT_MAX or .Machine$integer.max, at least on machines for which
`int` is 32 bits, which I think typical for machines R builds on.?? From
having looked at the code a while ago I think WRE is right (so maybe the
comment in the code is wrong), but it was a while ago and I haven't tried
to allocate an INT_MAX long string.

Sorry this doesn't answer your original question.

Best,

Brodie.

>
>
> So it seems to me either .Machine$integer.max or
> .Machine$integer.max-1L would be a more sensible default. Am I missing
> something?
>
> Mike C
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Mon Jun 21 03:40:11 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Mon, 21 Jun 2021 01:40:11 +0000 (UTC)
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <470369534.2906835.1624238892676@mail.yahoo.com>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
 <470369534.2906835.1624238892676@mail.yahoo.com>
Message-ID: <1668840841.2929628.1624239611188@mail.yahoo.com>

> On Sunday, June 20, 2021, 9:29:28 PM EDT, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
>
>> On Sunday, June 20, 2021, 6:21:22 PM EDT, Michael Chirico <michaelchirico4 at gmail.com> wrote:
>>
>> The max width of a string is .Machine$integer.max-1:
>
> I think the max width is .Machine$integer.max.? What happened below is a
> bug due to buffer overflow in `strrep`:

Sorry, integer overflow.

>> # works
>> x = strrep(" ", .Machine$integer.max-1L)
>> # fails
>> x = strrep(" ", .Machine$integer.max)
>> Error in strrep(" ", .Machine$integer.max) :
>>?? 'Calloc' could not allocate memory (18446744071562067968 of 1 bytes)
>> (see also the comment in src/main/character.c: "Character strings in R
>> are less than 2^31-1 bytes, so we use int not size_t.")
>
> FWIW WRE states:
>
>> Note that R character strings are restricted to 2^31 - 1 bytes
>
> This is INT_MAX or .Machine$integer.max, at least on machines for which
> `int` is 32 bits, which I think typical for machines R builds on.?? From
> having looked at the code a while ago I think WRE is right (so maybe the
> comment in the code is wrong), but it was a while ago and I haven't tried
> to allocate an INT_MAX long string.

So I tried it on a machine with more memory, and it works:

??? > x <- strrep(" ", .Machine$integer.max-1L)
??? > x <- paste0(x, " ")
??? > nchar(x)
??? [1] 2147483647
??? > nchar(x) == .Machine$integer.max
??? [1] TRUE

B.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jun 21 09:35:39 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 21 Jun 2021 09:35:39 +0200
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
Message-ID: <24784.16715.950067.923851@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Sun, 20 Jun 2021 15:20:26 -0700 writes:

    > Currently, substring defaults to last=1000000L, which
    > strongly suggests the intent is to default to "nchar(x)"
    > without having to compute/allocate that up front.

    > Unfortunately, this default makes no sense for "very
    > large" strings which may exceed 1000000L in "width".

Yes;  and I tend to agree with you that this default is outdated
(Remember :  R was written to work and run on 2 (or 4?) MB of RAM on the
 student lab  Macs in Auckland in ca 1994).

    > The max width of a string is .Machine$integer.max-1:

  (which Brodie showed was only almost true)

    > So it seems to me either .Machine$integer.max or
    > .Machine$integer.max-1L would be a more sensible default. Am I missing
    > something?

The "drawback" is of course that .Machine$integer.max  is still
a function call (as R beginners may forget) contrary to <nnnnn>L,
but that may even be inlined by the byte compiler (? how would we check ?)
and even if it's not, it does more clearly convey the concept
and idea  *and* would probably even port automatically if ever
integer would be increased in R.

Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jun 21 10:08:37 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 21 Jun 2021 10:08:37 +0200
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <24784.16715.950067.923851@stat.math.ethz.ch>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
 <24784.16715.950067.923851@stat.math.ethz.ch>
Message-ID: <b6842f33-1cb1-290c-3bbd-4b695bf556a6@gmail.com>


On 6/21/21 9:35 AM, Martin Maechler wrote:
>>>>>> Michael Chirico
>>>>>>      on Sun, 20 Jun 2021 15:20:26 -0700 writes:
>      > Currently, substring defaults to last=1000000L, which
>      > strongly suggests the intent is to default to "nchar(x)"
>      > without having to compute/allocate that up front.
>
>      > Unfortunately, this default makes no sense for "very
>      > large" strings which may exceed 1000000L in "width".
>
> Yes;  and I tend to agree with you that this default is outdated
> (Remember :  R was written to work and run on 2 (or 4?) MB of RAM on the
>   student lab  Macs in Auckland in ca 1994).
>
>      > The max width of a string is .Machine$integer.max-1:
>
>    (which Brodie showed was only almost true)
>
>      > So it seems to me either .Machine$integer.max or
>      > .Machine$integer.max-1L would be a more sensible default. Am I missing
>      > something?
>
> The "drawback" is of course that .Machine$integer.max  is still
> a function call (as R beginners may forget) contrary to <nnnnn>L,
> but that may even be inlined by the byte compiler (? how would we check ?)
> and even if it's not, it does more clearly convey the concept
> and idea  *and* would probably even port automatically if ever
> integer would be increased in R.

We still have the problem that we need to count characters, not bytes, 
if we want the default semantics of "until the end of the string".

I think we would have to fix this either by really using 
"nchar(type="c"))" or by using e.g. NULL and then treating this as a 
special case, that would be probably faster.

Tomas

>
> Martin

>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jun 21 10:32:30 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 21 Jun 2021 10:32:30 +0200
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <b6842f33-1cb1-290c-3bbd-4b695bf556a6@gmail.com>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
 <24784.16715.950067.923851@stat.math.ethz.ch>
 <b6842f33-1cb1-290c-3bbd-4b695bf556a6@gmail.com>
Message-ID: <24784.20126.544805.303997@stat.math.ethz.ch>

>>>>> Tomas Kalibera 
>>>>>     on Mon, 21 Jun 2021 10:08:37 +0200 writes:

    > On 6/21/21 9:35 AM, Martin Maechler wrote:
    >>>>>>> Michael Chirico
    >>>>>>> on Sun, 20 Jun 2021 15:20:26 -0700 writes:
    >> > Currently, substring defaults to last=1000000L, which
    >> > strongly suggests the intent is to default to "nchar(x)"
    >> > without having to compute/allocate that up front.
    >> 
    >> > Unfortunately, this default makes no sense for "very
    >> > large" strings which may exceed 1000000L in "width".
    >> 
    >> Yes;  and I tend to agree with you that this default is outdated
    >> (Remember :  R was written to work and run on 2 (or 4?) MB of RAM on the
    >> student lab  Macs in Auckland in ca 1994).
    >> 
    >> > The max width of a string is .Machine$integer.max-1:
    >> 
    >> (which Brodie showed was only almost true)
    >> 
    >> > So it seems to me either .Machine$integer.max or
    >> > .Machine$integer.max-1L would be a more sensible default. Am I missing
    >> > something?
    >> 
    >> The "drawback" is of course that .Machine$integer.max  is still
    >> a function call (as R beginners may forget) contrary to <nnnnn>L,
    >> but that may even be inlined by the byte compiler (? how would we check ?)
    >> and even if it's not, it does more clearly convey the concept
    >> and idea  *and* would probably even port automatically if ever
    >> integer would be increased in R.

    > We still have the problem that we need to count characters, not bytes, 
    > if we want the default semantics of "until the end of the string".

    > I think we would have to fix this either by really using 
    > "nchar(type="c"))" or by using e.g. NULL and then treating this as a 
    > special case, that would be probably faster.

    > Tomas

You are right, as always, Tomas.
I agree that would be better and we should do it if/when we change
the default there.

Martin


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Jun 21 19:21:12 2021
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 21 Jun 2021 10:21:12 -0700
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <24784.20126.544805.303997@stat.math.ethz.ch>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
 <24784.16715.950067.923851@stat.math.ethz.ch>
 <b6842f33-1cb1-290c-3bbd-4b695bf556a6@gmail.com>
 <24784.20126.544805.303997@stat.math.ethz.ch>
Message-ID: <CAPRVBcwyRX3BhYwjNc5hVs+CzZ63_RrR52J3jcoijNRy+NQW1w@mail.gmail.com>

Thanks all, great points well taken. Indeed it seems the default of
1000000 predates SVN tracking in 1997.

I think a NULL default behaving as "end of string" regardless of
encoding makes sense and avoids the overheads of a $ call and a much
heavier nchar() calculation.

Mike C

On Mon, Jun 21, 2021 at 1:32 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Tomas Kalibera
> >>>>>     on Mon, 21 Jun 2021 10:08:37 +0200 writes:
>
>     > On 6/21/21 9:35 AM, Martin Maechler wrote:
>     >>>>>>> Michael Chirico
>     >>>>>>> on Sun, 20 Jun 2021 15:20:26 -0700 writes:
>     >> > Currently, substring defaults to last=1000000L, which
>     >> > strongly suggests the intent is to default to "nchar(x)"
>     >> > without having to compute/allocate that up front.
>     >>
>     >> > Unfortunately, this default makes no sense for "very
>     >> > large" strings which may exceed 1000000L in "width".
>     >>
>     >> Yes;  and I tend to agree with you that this default is outdated
>     >> (Remember :  R was written to work and run on 2 (or 4?) MB of RAM on the
>     >> student lab  Macs in Auckland in ca 1994).
>     >>
>     >> > The max width of a string is .Machine$integer.max-1:
>     >>
>     >> (which Brodie showed was only almost true)
>     >>
>     >> > So it seems to me either .Machine$integer.max or
>     >> > .Machine$integer.max-1L would be a more sensible default. Am I missing
>     >> > something?
>     >>
>     >> The "drawback" is of course that .Machine$integer.max  is still
>     >> a function call (as R beginners may forget) contrary to <nnnnn>L,
>     >> but that may even be inlined by the byte compiler (? how would we check ?)
>     >> and even if it's not, it does more clearly convey the concept
>     >> and idea  *and* would probably even port automatically if ever
>     >> integer would be increased in R.
>
>     > We still have the problem that we need to count characters, not bytes,
>     > if we want the default semantics of "until the end of the string".
>
>     > I think we would have to fix this either by really using
>     > "nchar(type="c"))" or by using e.g. NULL and then treating this as a
>     > special case, that would be probably faster.
>
>     > Tomas
>
> You are right, as always, Tomas.
> I agree that would be better and we should do it if/when we change
> the default there.
>
> Martin


From w||||@mwdun|@p @end|ng |rom gm@||@com  Mon Jun 21 21:25:53 2021
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Mon, 21 Jun 2021 12:25:53 -0700
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <CAPRVBcwyRX3BhYwjNc5hVs+CzZ63_RrR52J3jcoijNRy+NQW1w@mail.gmail.com>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
 <24784.16715.950067.923851@stat.math.ethz.ch>
 <b6842f33-1cb1-290c-3bbd-4b695bf556a6@gmail.com>
 <24784.20126.544805.303997@stat.math.ethz.ch>
 <CAPRVBcwyRX3BhYwjNc5hVs+CzZ63_RrR52J3jcoijNRy+NQW1w@mail.gmail.com>
Message-ID: <CAHqSRuR_ozXs7iGz40pBbMahJLA-=wZxsf9Kt87baYtqNQ5t2A@mail.gmail.com>

NULL cannot be in an integer or numeric vector so it would not be a good
fit for substring's 'first' or 'last' argument (or substr's 'start' and
'stop').  Also, it is conceivable that string lengths may be 64 bit
integers in the future, so why not use Inf as the default?  Then the
following would give 4 identical results with no warning:

> substring("abcde", 3, c(10, 2^31-1, 2^31, Inf))
[1] "cde" "cde" NA    NA
Warning message:
In substring("abcde", 3, c(10, 2^31 - 1, 2^31, Inf)) :
  NAs introduced by coercion to integer range

-Bill

On Mon, Jun 21, 2021 at 10:22 AM Michael Chirico <michaelchirico4 at gmail.com>
wrote:

> Thanks all, great points well taken. Indeed it seems the default of
> 1000000 predates SVN tracking in 1997.
>
> I think a NULL default behaving as "end of string" regardless of
> encoding makes sense and avoids the overheads of a $ call and a much
> heavier nchar() calculation.
>
> Mike C
>
> On Mon, Jun 21, 2021 at 1:32 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
> >
> > >>>>> Tomas Kalibera
> > >>>>>     on Mon, 21 Jun 2021 10:08:37 +0200 writes:
> >
> >     > On 6/21/21 9:35 AM, Martin Maechler wrote:
> >     >>>>>>> Michael Chirico
> >     >>>>>>> on Sun, 20 Jun 2021 15:20:26 -0700 writes:
> >     >> > Currently, substring defaults to last=1000000L, which
> >     >> > strongly suggests the intent is to default to "nchar(x)"
> >     >> > without having to compute/allocate that up front.
> >     >>
> >     >> > Unfortunately, this default makes no sense for "very
> >     >> > large" strings which may exceed 1000000L in "width".
> >     >>
> >     >> Yes;  and I tend to agree with you that this default is outdated
> >     >> (Remember :  R was written to work and run on 2 (or 4?) MB of RAM
> on the
> >     >> student lab  Macs in Auckland in ca 1994).
> >     >>
> >     >> > The max width of a string is .Machine$integer.max-1:
> >     >>
> >     >> (which Brodie showed was only almost true)
> >     >>
> >     >> > So it seems to me either .Machine$integer.max or
> >     >> > .Machine$integer.max-1L would be a more sensible default. Am I
> missing
> >     >> > something?
> >     >>
> >     >> The "drawback" is of course that .Machine$integer.max  is still
> >     >> a function call (as R beginners may forget) contrary to <nnnnn>L,
> >     >> but that may even be inlined by the byte compiler (? how would we
> check ?)
> >     >> and even if it's not, it does more clearly convey the concept
> >     >> and idea  *and* would probably even port automatically if ever
> >     >> integer would be increased in R.
> >
> >     > We still have the problem that we need to count characters, not
> bytes,
> >     > if we want the default semantics of "until the end of the string".
> >
> >     > I think we would have to fix this either by really using
> >     > "nchar(type="c"))" or by using e.g. NULL and then treating this as
> a
> >     > special case, that would be probably faster.
> >
> >     > Tomas
> >
> > You are right, as always, Tomas.
> > I agree that would be better and we should do it if/when we change
> > the default there.
> >
> > Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 22 11:23:47 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 22 Jun 2021 11:23:47 +0200
Subject: [Rd] 
 Should last default to .Machine$integer.max-1 for substring()
In-Reply-To: <CAHqSRuR_ozXs7iGz40pBbMahJLA-=wZxsf9Kt87baYtqNQ5t2A@mail.gmail.com>
References: <CAPRVBcxcWBMP38KOMpZ9PYkR_oLmmpAtoC-oD+HmRL=gfGGqHw@mail.gmail.com>
 <24784.16715.950067.923851@stat.math.ethz.ch>
 <b6842f33-1cb1-290c-3bbd-4b695bf556a6@gmail.com>
 <24784.20126.544805.303997@stat.math.ethz.ch>
 <CAPRVBcwyRX3BhYwjNc5hVs+CzZ63_RrR52J3jcoijNRy+NQW1w@mail.gmail.com>
 <CAHqSRuR_ozXs7iGz40pBbMahJLA-=wZxsf9Kt87baYtqNQ5t2A@mail.gmail.com>
Message-ID: <85544b7c-35f5-6e32-e63d-914273b2f6af@gmail.com>


On 6/21/21 9:25 PM, Bill Dunlap wrote:
> NULL cannot be in an integer or numeric vector so it would not be a good
> fit for substring's 'first' or 'last' argument (or substr's 'start' and
> 'stop').

Yes, that would only work if used as a scalar, such as in the default 
for 'last' where 1000000L is used now.

In other cases, users already had to provide their own values for 'last' 
explicitly, and hence they would know if they provided a value too small 
given their data.

>   Also, it is conceivable that string lengths may be 64 bit
> integers in the future, so why not use Inf as the default?  Then the
> following would give 4 identical results with no warning:

Yes, that would work also in vector use, but integers over 2^53 won't be 
representable as doubles exactly, so we would? have to revisit/change 
the interface when moving to 64 bit integers.

Yet another option would be say using -1, that would also work with 
vector use and integers. But, negative indexes (and zero) are now 
treated as start of the string (1), and while not documented, perhaps 
this is good/intuitive behavior.

Tomas

>> substring("abcde", 3, c(10, 2^31-1, 2^31, Inf))
> [1] "cde" "cde" NA    NA
> Warning message:
> In substring("abcde", 3, c(10, 2^31 - 1, 2^31, Inf)) :
>    NAs introduced by coercion to integer range
>
> -Bill
>
> On Mon, Jun 21, 2021 at 10:22 AM Michael Chirico <michaelchirico4 at gmail.com>
> wrote:
>
>> Thanks all, great points well taken. Indeed it seems the default of
>> 1000000 predates SVN tracking in 1997.
>>
>> I think a NULL default behaving as "end of string" regardless of
>> encoding makes sense and avoids the overheads of a $ call and a much
>> heavier nchar() calculation.
>>
>> Mike C
>>
>> On Mon, Jun 21, 2021 at 1:32 AM Martin Maechler
>> <maechler at stat.math.ethz.ch> wrote:
>>>>>>>> Tomas Kalibera
>>>>>>>>      on Mon, 21 Jun 2021 10:08:37 +0200 writes:
>>>      > On 6/21/21 9:35 AM, Martin Maechler wrote:
>>>      >>>>>>> Michael Chirico
>>>      >>>>>>> on Sun, 20 Jun 2021 15:20:26 -0700 writes:
>>>      >> > Currently, substring defaults to last=1000000L, which
>>>      >> > strongly suggests the intent is to default to "nchar(x)"
>>>      >> > without having to compute/allocate that up front.
>>>      >>
>>>      >> > Unfortunately, this default makes no sense for "very
>>>      >> > large" strings which may exceed 1000000L in "width".
>>>      >>
>>>      >> Yes;  and I tend to agree with you that this default is outdated
>>>      >> (Remember :  R was written to work and run on 2 (or 4?) MB of RAM
>> on the
>>>      >> student lab  Macs in Auckland in ca 1994).
>>>      >>
>>>      >> > The max width of a string is .Machine$integer.max-1:
>>>      >>
>>>      >> (which Brodie showed was only almost true)
>>>      >>
>>>      >> > So it seems to me either .Machine$integer.max or
>>>      >> > .Machine$integer.max-1L would be a more sensible default. Am I
>> missing
>>>      >> > something?
>>>      >>
>>>      >> The "drawback" is of course that .Machine$integer.max  is still
>>>      >> a function call (as R beginners may forget) contrary to <nnnnn>L,
>>>      >> but that may even be inlined by the byte compiler (? how would we
>> check ?)
>>>      >> and even if it's not, it does more clearly convey the concept
>>>      >> and idea  *and* would probably even port automatically if ever
>>>      >> integer would be increased in R.
>>>
>>>      > We still have the problem that we need to count characters, not
>> bytes,
>>>      > if we want the default semantics of "until the end of the string".
>>>
>>>      > I think we would have to fix this either by really using
>>>      > "nchar(type="c"))" or by using e.g. NULL and then treating this as
>> a
>>>      > special case, that would be probably faster.
>>>
>>>      > Tomas
>>>
>>> You are right, as always, Tomas.
>>> I agree that would be better and we should do it if/when we change
>>> the default there.
>>>
>>> Martin
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From thebudget72 @end|ng |rom gm@||@com  Wed Jun 23 19:23:16 2021
From: thebudget72 @end|ng |rom gm@||@com (Phillips Rogfield)
Date: Wed, 23 Jun 2021 19:23:16 +0200
Subject: [Rd] Configure script and pango library
Message-ID: <41ded6dc-4ed3-d5de-701a-a282b420e149@gmail.com>

Dear R developers,

there is a problem if cairo is present but pango is not.

The configure script tells very little about pango, there are two lines in the middle:

	checking whether pkg-config knows about cairo and pango... yes
	checking whether cairo including pango is >= 1.2 and works... yes

But the final recap does NOT tell anything about pango, only about cairo:

	Additional capabilities:     PNG, JPEG, TIFF, NLS, cairo, ICU

The problem is, if cairo is present but pango is not, sometimes we are unable to plot, as R gives the message:

|Path drawing not available for this device See here for more 
information: https://stackoverflow.com/a/45717473/1719931 If instead 
pango-devel is installed together with cairo-devel, the problem 
disappears and we are able to plot. I would request the configure script 
to be more explicit on whether pango is also present, by putting it in 
the list of "Additional capabilities" if it is present (next to cairo). 
So we know whether we will have problems in plotting or not. Best 
regards and thanks for your attention. |


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Thu Jun 24 14:00:01 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 24 Jun 2021 14:00:01 +0200
Subject: [Rd] Possible bug in help file name generation
Message-ID: <CALEXWq1LV82BB3fe+++mfszM5QRzTp5tSKv_SUUsmjYQvbgbsw@mail.gmail.com>

Hi,

I noticed that R 4.1 places html files into the packages' help
directory, compared to previous versions, which used an RDS. I found a
possible bug in the code that processes the aliases from the Rd files
and generates the names for these html files (I haven't identified
where this happens though).

To reproduce this, install e.g. the 'caper' package from CRAN and
inspect the help directory. I find the following file:

'pgls.confint'$'\n''.html'

which contains a special character. This comes from the fact that the
file caper/man/pgls.profile.Rd in caper's source code contains a
newline in the corresponding alias:

\name{pgls.profile}
\alias{pgls.profile}
\alias{plot.pgls.profile}
\alias{pgls.confint
}

and this ends up in the file name.

-- 
I?aki ?car


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Thu Jun 24 14:19:55 2021
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Thu, 24 Jun 2021 17:49:55 +0530
Subject: [Rd] Possible bug in help file name generation
In-Reply-To: <CALEXWq1LV82BB3fe+++mfszM5QRzTp5tSKv_SUUsmjYQvbgbsw@mail.gmail.com>
References: <CALEXWq1LV82BB3fe+++mfszM5QRzTp5tSKv_SUUsmjYQvbgbsw@mail.gmail.com>
Message-ID: <CADfFDC4G0XQdrgRAHMgCx8Ybu-onn2SpZB4d3A-9hYj2XZy=LA@mail.gmail.com>

On Thu, Jun 24, 2021 at 5:31 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> Hi,
>
> I noticed that R 4.1 places html files into the packages' help
> directory, compared to previous versions, which used an RDS. I found a
> possible bug in the code that processes the aliases from the Rd files
> and generates the names for these html files (I haven't identified
> where this happens though).
>
> To reproduce this, install e.g. the 'caper' package from CRAN and
> inspect the help directory. I find the following file:
>
> 'pgls.confint'$'\n''.html'
>
> which contains a special character. This comes from the fact that the
> file caper/man/pgls.profile.Rd in caper's source code contains a
> newline in the corresponding alias:
>
> \name{pgls.profile}
> \alias{pgls.profile}
> \alias{plot.pgls.profile}
> \alias{pgls.confint
> }
>
> and this ends up in the file name.

Yes, the code should probably do a trimws() somewhere, but this also
looks like something that maybe R CMD check should identify and
complain about.

Best,
-Deepayan

> --
> I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Jun 24 14:21:21 2021
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 24 Jun 2021 14:21:21 +0200
Subject: [Rd] Possible bug in help file name generation
In-Reply-To: <CADfFDC4G0XQdrgRAHMgCx8Ybu-onn2SpZB4d3A-9hYj2XZy=LA@mail.gmail.com>
References: <CALEXWq1LV82BB3fe+++mfszM5QRzTp5tSKv_SUUsmjYQvbgbsw@mail.gmail.com>
 <CADfFDC4G0XQdrgRAHMgCx8Ybu-onn2SpZB4d3A-9hYj2XZy=LA@mail.gmail.com>
Message-ID: <24788.30913.605270.436230@hornik.net>

>>>>> Deepayan Sarkar writes:

> On Thu, Jun 24, 2021 at 5:31 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>> 
>> Hi,
>> 
>> I noticed that R 4.1 places html files into the packages' help
>> directory, compared to previous versions, which used an RDS. I found a
>> possible bug in the code that processes the aliases from the Rd files
>> and generates the names for these html files (I haven't identified
>> where this happens though).
>> 
>> To reproduce this, install e.g. the 'caper' package from CRAN and
>> inspect the help directory. I find the following file:
>> 
>> 'pgls.confint'$'\n''.html'
>> 
>> which contains a special character. This comes from the fact that the
>> file caper/man/pgls.profile.Rd in caper's source code contains a
>> newline in the corresponding alias:
>> 
>> \name{pgls.profile}
>> \alias{pgls.profile}
>> \alias{plot.pgls.profile}
>> \alias{pgls.confint
>> }
>> 
>> and this ends up in the file name.

> Yes, the code should probably do a trimws() somewhere, but this also
> looks like something that maybe R CMD check should identify and
> complain about.

I'll take a look ...

-k


From |uc@r @end|ng |rom |edor@project@org  Thu Jun 24 15:09:08 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 24 Jun 2021 15:09:08 +0200
Subject: [Rd] Possible bug in help file name generation
In-Reply-To: <24788.30913.605270.436230@hornik.net>
References: <CALEXWq1LV82BB3fe+++mfszM5QRzTp5tSKv_SUUsmjYQvbgbsw@mail.gmail.com>
 <CADfFDC4G0XQdrgRAHMgCx8Ybu-onn2SpZB4d3A-9hYj2XZy=LA@mail.gmail.com>
 <24788.30913.605270.436230@hornik.net>
Message-ID: <CALEXWq2+-2CEoWb4b-SDrJ2mMt6V2oMmPLOdCOY46VZbJnd9Gw@mail.gmail.com>

On Thu, 24 Jun 2021 at 14:21, Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
>
> >>>>> Deepayan Sarkar writes:
>
> > On Thu, Jun 24, 2021 at 5:31 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
> >>
> >> Hi,
> >>
> >> I noticed that R 4.1 places html files into the packages' help
> >> directory, compared to previous versions, which used an RDS. I found a
> >> possible bug in the code that processes the aliases from the Rd files
> >> and generates the names for these html files (I haven't identified
> >> where this happens though).
> >>
> >> To reproduce this, install e.g. the 'caper' package from CRAN and
> >> inspect the help directory. I find the following file:
> >>
> >> 'pgls.confint'$'\n''.html'
> >>
> >> which contains a special character. This comes from the fact that the
> >> file caper/man/pgls.profile.Rd in caper's source code contains a
> >> newline in the corresponding alias:
> >>
> >> \name{pgls.profile}
> >> \alias{pgls.profile}
> >> \alias{plot.pgls.profile}
> >> \alias{pgls.confint
> >> }
> >>
> >> and this ends up in the file name.
>
> > Yes, the code should probably do a trimws() somewhere, but this also
> > looks like something that maybe R CMD check should identify and
> > complain about.
>
> I'll take a look ...

Thanks. FYI, I was able to detect this thanks to build errors in
cran2copr, because RPM tools make this kind of checks. See the
complete log here:
https://download.copr.fedorainfracloud.org/results/iucar/cran/fedora-rawhide-x86_64/02296763-R-CRAN-caper/builder-live.log.gz

-- 
I?aki ?car


From ggrothend|eck @end|ng |rom gm@||@com  Thu Jun 24 23:56:32 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Thu, 24 Jun 2021 17:56:32 -0400
Subject: [Rd] S3 weirdness
Message-ID: <CAP01uRkt9MheF9DqdpOX23yQ6LJ9WueLZSeVd2u6KTkPOvD=UA@mail.gmail.com>

If we start up a vanilla session of R with no packages loaded and
type the single line of code below as the first line entered then
we get the output shown below.  The NA in the output and the length
of 7 indicate that as.ts dispatched as.ts.zoo since as.ts.default
would have resulted in a length of 6 with no NA's. It should not have
known about as.ts.zoo since we never  explicitly loaded the zoo
package using library or require.
zoo:: was only used to refer to read.zoo.  This seems to be a bug in
the way R is currently working.

  as.ts(zoo::read.zoo(BOD))
  ## Time Series:
  ## Start = 1
  ## End = 7
  ## Frequency = 1
  ## [1]  8.3 10.3 19.0 16.0 15.6   NA 19.8

  R.version.string
  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jun 25 00:51:17 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 25 Jun 2021 10:51:17 +1200
Subject: [Rd] S3 weirdness
In-Reply-To: <CAP01uRkt9MheF9DqdpOX23yQ6LJ9WueLZSeVd2u6KTkPOvD=UA@mail.gmail.com>
References: <CAP01uRkt9MheF9DqdpOX23yQ6LJ9WueLZSeVd2u6KTkPOvD=UA@mail.gmail.com>
Message-ID: <0BABC671-8A2E-4746-AF3B-F6457E37D908@R-project.org>


Gabor,

just by using zoo::read.zoo() you *do* load the namespace:

> args(zoo::read.zoo)
function (file, format = "", tz = "", FUN = NULL, regular = FALSE, 
    index.column = 1, drop = TRUE, FUN2 = NULL, split = NULL, 
    aggregate = FALSE, ..., text, read = read.table) 
NULL
> sessionInfo()
R Under development (unstable) (2021-06-23 r80548)
Platform: x86_64-apple-darwin19.6.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:   /Volumes/Builds/R/build/lib/libRblas.dylib
LAPACK: /Volumes/Builds/R/build/lib/libRlapack.dylib

locale:
[1] en_NZ.UTF-8/en_NZ.UTF-8/en_NZ.UTF-8/C/en_NZ.UTF-8/en_NZ.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] zoo_1.8-9       compiler_4.2.0  grid_4.2.0      lattice_0.20-44

which includes S3 method dispatch tables:

> methods(as.ts)
[1] as.ts.default* as.ts.zoo*     as.ts.zooreg* 
see '?methods' for accessing help and source code

so the behavior is as expected.

Cheers,
Simon


> On 25/06/2021, at 9:56 AM, Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
> 
> If we start up a vanilla session of R with no packages loaded and
> type the single line of code below as the first line entered then
> we get the output shown below.  The NA in the output and the length
> of 7 indicate that as.ts dispatched as.ts.zoo since as.ts.default
> would have resulted in a length of 6 with no NA's. It should not have
> known about as.ts.zoo since we never  explicitly loaded the zoo
> package using library or require.
> zoo:: was only used to refer to read.zoo.  This seems to be a bug in
> the way R is currently working.
> 
>  as.ts(zoo::read.zoo(BOD))
>  ## Time Series:
>  ## Start = 1
>  ## End = 7
>  ## Frequency = 1
>  ## [1]  8.3 10.3 19.0 16.0 15.6   NA 19.8
> 
>  R.version.string
>  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
> 
> -- 
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From ggrothend|eck @end|ng |rom gm@||@com  Fri Jun 25 01:47:35 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Thu, 24 Jun 2021 19:47:35 -0400
Subject: [Rd] S3 weirdness
In-Reply-To: <0BABC671-8A2E-4746-AF3B-F6457E37D908@R-project.org>
References: <CAP01uRkt9MheF9DqdpOX23yQ6LJ9WueLZSeVd2u6KTkPOvD=UA@mail.gmail.com>
 <0BABC671-8A2E-4746-AF3B-F6457E37D908@R-project.org>
Message-ID: <CAP01uRnzMQrUqH-v6th-3C-DAkVcRgFJp-=XL9utJkuwSy2mFw@mail.gmail.com>

The fact that zoo:: in one part of the code has a side effect in
another seems not to be in the spirit of functional programming or
modularity.

On Thu, Jun 24, 2021 at 6:51 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Gabor,
>
> just by using zoo::read.zoo() you *do* load the namespace:
>
> > args(zoo::read.zoo)
> function (file, format = "", tz = "", FUN = NULL, regular = FALSE,
>     index.column = 1, drop = TRUE, FUN2 = NULL, split = NULL,
>     aggregate = FALSE, ..., text, read = read.table)
> NULL
> > sessionInfo()
> R Under development (unstable) (2021-06-23 r80548)
> Platform: x86_64-apple-darwin19.6.0 (64-bit)
> Running under: macOS Catalina 10.15.7
>
> Matrix products: default
> BLAS:   /Volumes/Builds/R/build/lib/libRblas.dylib
> LAPACK: /Volumes/Builds/R/build/lib/libRlapack.dylib
>
> locale:
> [1] en_NZ.UTF-8/en_NZ.UTF-8/en_NZ.UTF-8/C/en_NZ.UTF-8/en_NZ.UTF-8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] zoo_1.8-9       compiler_4.2.0  grid_4.2.0      lattice_0.20-44
>
> which includes S3 method dispatch tables:
>
> > methods(as.ts)
> [1] as.ts.default* as.ts.zoo*     as.ts.zooreg*
> see '?methods' for accessing help and source code
>
> so the behavior is as expected.
>
> Cheers,
> Simon
>
>
> > On 25/06/2021, at 9:56 AM, Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
> >
> > If we start up a vanilla session of R with no packages loaded and
> > type the single line of code below as the first line entered then
> > we get the output shown below.  The NA in the output and the length
> > of 7 indicate that as.ts dispatched as.ts.zoo since as.ts.default
> > would have resulted in a length of 6 with no NA's. It should not have
> > known about as.ts.zoo since we never  explicitly loaded the zoo
> > package using library or require.
> > zoo:: was only used to refer to read.zoo.  This seems to be a bug in
> > the way R is currently working.
> >
> >  as.ts(zoo::read.zoo(BOD))
> >  ## Time Series:
> >  ## Start = 1
> >  ## End = 7
> >  ## Frequency = 1
> >  ## [1]  8.3 10.3 19.0 16.0 15.6   NA 19.8
> >
> >  R.version.string
> >  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
> >
> > --
> > Statistics & Software Consulting
> > GKX Group, GKX Associates Inc.
> > tel: 1-877-GKX-GROUP
> > email: ggrothendieck at gmail.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From g@bembecker @end|ng |rom gm@||@com  Fri Jun 25 08:32:55 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 24 Jun 2021 23:32:55 -0700
Subject: [Rd] S3 weirdness
In-Reply-To: <CAP01uRnzMQrUqH-v6th-3C-DAkVcRgFJp-=XL9utJkuwSy2mFw@mail.gmail.com>
References: <CAP01uRkt9MheF9DqdpOX23yQ6LJ9WueLZSeVd2u6KTkPOvD=UA@mail.gmail.com>
 <0BABC671-8A2E-4746-AF3B-F6457E37D908@R-project.org>
 <CAP01uRnzMQrUqH-v6th-3C-DAkVcRgFJp-=XL9utJkuwSy2mFw@mail.gmail.com>
Message-ID: <CAD4oTHE5cOB5XZt2G7v799bvogNpr_FJ3ke4ZG0unx6p2enAYg@mail.gmail.com>

On Thu, Jun 24, 2021 at 4:48 PM Gabor Grothendieck <ggrothendieck at gmail.com>
wrote:

> The fact that zoo:: in one part of the code has a side effect in
> another seems not to be in the spirit of functional programming or
> modularity.
>

While this is true, there is no way I know of for a package function
to...well, function in the general case without its namespace loaded, and
as has been brought up many times on this list, unloading namespaces fully
also doesn't work in the fully general case. Given those facts, it seems
the current behavior is essentially all that is possible to be done, right?

Also even if a namespace could be unloaded, can you imagine the penalty if
the namespace was loaded and then unloaded after every :: call? Some
scripts would just never complete at all. I kid, of course, but not by that
much I think...

~G


>
> On Thu, Jun 24, 2021 at 6:51 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
> >
> > Gabor,
> >
> > just by using zoo::read.zoo() you *do* load the namespace:
> >
> > > args(zoo::read.zoo)
> > function (file, format = "", tz = "", FUN = NULL, regular = FALSE,
> >     index.column = 1, drop = TRUE, FUN2 = NULL, split = NULL,
> >     aggregate = FALSE, ..., text, read = read.table)
> > NULL
> > > sessionInfo()
> > R Under development (unstable) (2021-06-23 r80548)
> > Platform: x86_64-apple-darwin19.6.0 (64-bit)
> > Running under: macOS Catalina 10.15.7
> >
> > Matrix products: default
> > BLAS:   /Volumes/Builds/R/build/lib/libRblas.dylib
> > LAPACK: /Volumes/Builds/R/build/lib/libRlapack.dylib
> >
> > locale:
> > [1] en_NZ.UTF-8/en_NZ.UTF-8/en_NZ.UTF-8/C/en_NZ.UTF-8/en_NZ.UTF-8
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] zoo_1.8-9       compiler_4.2.0  grid_4.2.0      lattice_0.20-44
> >
> > which includes S3 method dispatch tables:
> >
> > > methods(as.ts)
> > [1] as.ts.default* as.ts.zoo*     as.ts.zooreg*
> > see '?methods' for accessing help and source code
> >
> > so the behavior is as expected.
> >
> > Cheers,
> > Simon
> >
> >
> > > On 25/06/2021, at 9:56 AM, Gabor Grothendieck <ggrothendieck at gmail.com>
> wrote:
> > >
> > > If we start up a vanilla session of R with no packages loaded and
> > > type the single line of code below as the first line entered then
> > > we get the output shown below.  The NA in the output and the length
> > > of 7 indicate that as.ts dispatched as.ts.zoo since as.ts.default
> > > would have resulted in a length of 6 with no NA's. It should not have
> > > known about as.ts.zoo since we never  explicitly loaded the zoo
> > > package using library or require.
> > > zoo:: was only used to refer to read.zoo.  This seems to be a bug in
> > > the way R is currently working.
> > >
> > >  as.ts(zoo::read.zoo(BOD))
> > >  ## Time Series:
> > >  ## Start = 1
> > >  ## End = 7
> > >  ## Frequency = 1
> > >  ## [1]  8.3 10.3 19.0 16.0 15.6   NA 19.8
> > >
> > >  R.version.string
> > >  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
> > >
> > > --
> > > Statistics & Software Consulting
> > > GKX Group, GKX Associates Inc.
> > > tel: 1-877-GKX-GROUP
> > > email: ggrothendieck at gmail.com
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
>
>
> --
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From JAR@uh @end|ng |rom web@de  Fri Jun 25 09:16:20 2021
From: JAR@uh @end|ng |rom web@de (Johannes Rauh)
Date: Fri, 25 Jun 2021 09:16:20 +0200
Subject: [Rd] S3 weirdness
In-Reply-To: <CAD4oTHE5cOB5XZt2G7v799bvogNpr_FJ3ke4ZG0unx6p2enAYg@mail.gmail.com>
References: <CAP01uRkt9MheF9DqdpOX23yQ6LJ9WueLZSeVd2u6KTkPOvD=UA@mail.gmail.com>
 <0BABC671-8A2E-4746-AF3B-F6457E37D908@R-project.org>
 <CAP01uRnzMQrUqH-v6th-3C-DAkVcRgFJp-=XL9utJkuwSy2mFw@mail.gmail.com>
 <CAD4oTHE5cOB5XZt2G7v799bvogNpr_FJ3ke4ZG0unx6p2enAYg@mail.gmail.com>
Message-ID: <trinity-f4a6a604-84de-4c24-8ec6-1d9dd9d645b4-1624605380440@3c-app-webde-bs34>

Good morning,

I would argue that in this specific simple example, R does the less confusing thing from a user's perspective (maybe not from a programmer's or philosopher's perspective):

When using a function from a package that has not been loaded before and when this package creates an object of a "new" class that has not been seen before, R makes sure that its object system from now on recognizes this class.

Cheers
Johannes

> Gesendet: Freitag, 25. Juni 2021 um 08:32 Uhr
> Von: "Gabriel Becker" <gabembecker at gmail.com>
> An: "Gabor Grothendieck" <ggrothendieck at gmail.com>
> Cc: "Simon Urbanek" <simon.urbanek at r-project.org>, "r-devel at r-project.org" <r-devel at r-project.org>
> Betreff: Re: [Rd] S3 weirdness
>
> On Thu, Jun 24, 2021 at 4:48 PM Gabor Grothendieck <ggrothendieck at gmail.com>
> wrote:
>
> > The fact that zoo:: in one part of the code has a side effect in
> > another seems not to be in the spirit of functional programming or
> > modularity.
> >
>
> While this is true, there is no way I know of for a package function
> to...well, function in the general case without its namespace loaded, and
> as has been brought up many times on this list, unloading namespaces fully
> also doesn't work in the fully general case. Given those facts, it seems
> the current behavior is essentially all that is possible to be done, right?
>
> Also even if a namespace could be unloaded, can you imagine the penalty if
> the namespace was loaded and then unloaded after every :: call? Some
> scripts would just never complete at all. I kid, of course, but not by that
> much I think...
>
> ~G
>
>
> >
> > On Thu, Jun 24, 2021 at 6:51 PM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> > >
> > > Gabor,
> > >
> > > just by using zoo::read.zoo() you *do* load the namespace:
> > >
> > > > args(zoo::read.zoo)
> > > function (file, format = "", tz = "", FUN = NULL, regular = FALSE,
> > >     index.column = 1, drop = TRUE, FUN2 = NULL, split = NULL,
> > >     aggregate = FALSE, ..., text, read = read.table)
> > > NULL
> > > > sessionInfo()
> > > R Under development (unstable) (2021-06-23 r80548)
> > > Platform: x86_64-apple-darwin19.6.0 (64-bit)
> > > Running under: macOS Catalina 10.15.7
> > >
> > > Matrix products: default
> > > BLAS:   /Volumes/Builds/R/build/lib/libRblas.dylib
> > > LAPACK: /Volumes/Builds/R/build/lib/libRlapack.dylib
> > >
> > > locale:
> > > [1] en_NZ.UTF-8/en_NZ.UTF-8/en_NZ.UTF-8/C/en_NZ.UTF-8/en_NZ.UTF-8
> > >
> > > attached base packages:
> > > [1] stats     graphics  grDevices utils     datasets  methods   base
> > >
> > > loaded via a namespace (and not attached):
> > > [1] zoo_1.8-9       compiler_4.2.0  grid_4.2.0      lattice_0.20-44
> > >
> > > which includes S3 method dispatch tables:
> > >
> > > > methods(as.ts)
> > > [1] as.ts.default* as.ts.zoo*     as.ts.zooreg*
> > > see '?methods' for accessing help and source code
> > >
> > > so the behavior is as expected.
> > >
> > > Cheers,
> > > Simon
> > >
> > >
> > > > On 25/06/2021, at 9:56 AM, Gabor Grothendieck <ggrothendieck at gmail.com>
> > wrote:
> > > >
> > > > If we start up a vanilla session of R with no packages loaded and
> > > > type the single line of code below as the first line entered then
> > > > we get the output shown below.  The NA in the output and the length
> > > > of 7 indicate that as.ts dispatched as.ts.zoo since as.ts.default
> > > > would have resulted in a length of 6 with no NA's. It should not have
> > > > known about as.ts.zoo since we never  explicitly loaded the zoo
> > > > package using library or require.
> > > > zoo:: was only used to refer to read.zoo.  This seems to be a bug in
> > > > the way R is currently working.
> > > >
> > > >  as.ts(zoo::read.zoo(BOD))
> > > >  ## Time Series:
> > > >  ## Start = 1
> > > >  ## End = 7
> > > >  ## Frequency = 1
> > > >  ## [1]  8.3 10.3 19.0 16.0 15.6   NA 19.8
> > > >
> > > >  R.version.string
> > > >  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
> > > >
> > > > --
> > > > Statistics & Software Consulting
> > > > GKX Group, GKX Associates Inc.
> > > > tel: 1-877-GKX-GROUP
> > > > email: ggrothendieck at gmail.com
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > >
> >
> >
> > --
> > Statistics & Software Consulting
> > GKX Group, GKX Associates Inc.
> > tel: 1-877-GKX-GROUP
> > email: ggrothendieck at gmail.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From konr@d@@|ek @end|ng |rom gm@||@com  Fri Jun 25 16:28:26 2021
From: konr@d@@|ek @end|ng |rom gm@||@com (Konrad Siek)
Date: Fri, 25 Jun 2021 16:28:26 +0200
Subject: [Rd] SET_COMPLEX_ELT and SET_RAW_ELT missing from Rinternals.h
Message-ID: <CAN6cAk1T4sQFMZXtNqjTKJCQyn_21ic1zAm6P=rQZxy4uAikfg@mail.gmail.com>

Hello,

I am working on a package that works with various types of R vectors,
implemented in C. My code has a lot of SET_*_ELT operations in it for
various types of vectors, including for CPLXSXPs and RAWSXPs.

I noticed SET_COMPLEX_ELT and SET_RAW_ELT are defined in Rinlinedfuns.h but
not declared in Rinternals.h, so they cannot be used in packages. I was
going to re-implement them or extern them in my package, however,
interestingly, ALTCOMPLEX_SET_ELT and ALTRAW_SET_ELT  are both declared in
Rinternals.h, making me think SET_COMPLEX_ELT and SET_RAW_ELT could be
purposefully obscured. Otherwise it may just be an oversight and I should
bring it to someone's attention anyway.

I have three questions that I hope R-devel could help me with.

1. Is this an oversight, or are SET_COMPLEX_ELT and SET_RAW_ELT not exposed
on purpose? 2. If they are not exposed on purpose, I was wondering why.
3. More importantly, what would be good ways to set elements of these
vectors while playing nice with ALTREP and avoiding whatever pitfalls
caused these functions to be obscured in the first place?

Best regards,
Konrad,

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 29 04:06:51 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Mon, 28 Jun 2021 21:06:51 -0500 (CDT)
Subject: [Rd] [External] SET_COMPLEX_ELT and SET_RAW_ELT missing from
 Rinternals.h
In-Reply-To: <CAN6cAk1T4sQFMZXtNqjTKJCQyn_21ic1zAm6P=rQZxy4uAikfg@mail.gmail.com>
References: <CAN6cAk1T4sQFMZXtNqjTKJCQyn_21ic1zAm6P=rQZxy4uAikfg@mail.gmail.com>
Message-ID: <335585-e80-509f-9598-4b737b5ccba9@uiowa.edu>

The setter interface for atomic types is not yer implemented. It may
be some day.

Best,

luke

On Fri, 25 Jun 2021, Konrad Siek wrote:

> Hello,
>
> I am working on a package that works with various types of R vectors,
> implemented in C. My code has a lot of SET_*_ELT operations in it for
> various types of vectors, including for CPLXSXPs and RAWSXPs.
>
> I noticed SET_COMPLEX_ELT and SET_RAW_ELT are defined in Rinlinedfuns.h but
> not declared in Rinternals.h, so they cannot be used in packages. I was
> going to re-implement them or extern them in my package, however,
> interestingly, ALTCOMPLEX_SET_ELT and ALTRAW_SET_ELT  are both declared in
> Rinternals.h, making me think SET_COMPLEX_ELT and SET_RAW_ELT could be
> purposefully obscured. Otherwise it may just be an oversight and I should
> bring it to someone's attention anyway.
>
> I have three questions that I hope R-devel could help me with.
>
> 1. Is this an oversight, or are SET_COMPLEX_ELT and SET_RAW_ELT not exposed
> on purpose? 2. If they are not exposed on purpose, I was wondering why.
> 3. More importantly, what would be good ways to set elements of these
> vectors while playing nice with ALTREP and avoiding whatever pitfalls
> caused these functions to be obscured in the first place?
>
> Best regards,
> Konrad,
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From S@mue|@M@r@h @end|ng |rom ch||dren@@h@rv@rd@edu  Tue Jun 29 13:07:38 2021
From: S@mue|@M@r@h @end|ng |rom ch||dren@@h@rv@rd@edu (Marsh, Samuel)
Date: Tue, 29 Jun 2021 11:07:38 +0000
Subject: [Rd] Small Fix: Greatly Increase Clarity/Utility of R Package
 Help/Manual Overview Pages
Message-ID: <1624964858386.45802@childrens.harvard.edu>

?Hi,


I would like to suggest a single line (2 characters) fix that I feel would greatly improve the readability and usefulness of the overview R package help/manual pages.  Currently the overall help/manual page for a package is organized into alphabetized table of contents with linked headers by letter only if the package contains more than 100 functions, otherwise the functions are simply listed with no line breaks.  This makes for a more difficult user experience with moderately sized packages 50-99 functions that could be improved.  I would suggest changing the threshold for creating this alphabetized table of contents to 50 instead of 100.


I've provided info on the current code that specifies this parameter below:

It would appear that all that needs to be changed is the "> 100" parameter on this line:
https://github.com/wch/r-source/blob/80a7ca3b605b34d207ed3465c942f39a37e89f6e/src/library/tools/R/install.R#L2770


Or to list the code directly:

In the .writePkgIndices function the line is:
use_alpha <- (nrow(M) > 100)?


It appears to me the only change needed would be to set "nrow(M) > 50".  I believe this very small fix would greatly improve user experience for a growing number of moderately-sized packages whose manual/help pages would still greatly benefit from greater readability/organization.


Thank you!

Sam


--
Samuel E. Marsh, Ph.D.
Postdoctoral Fellow
Laboratory of Dr. Beth Stevens
F.M. Kirby Neurobiology Research Center
Boston Children's Hospital
Harvard Medical School
samuel.marsh at childrens.harvard.edu

	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Tue Jun 29 14:53:29 2021
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 29 Jun 2021 14:53:29 +0200
Subject: [Rd] Small Fix: Greatly Increase Clarity/Utility of R Package
 Help/Manual Overview Pages
In-Reply-To: <1624964858386.45802@childrens.harvard.edu>
References: <1624964858386.45802@childrens.harvard.edu>
Message-ID: <3c754a47-a047-fb0b-3d57-edd5029dc468@fau.de>

Just in case others (like me) don't instantly know what this is about.

This only affects the html help.
Compare the HTML index page for the base package "graphics"

https://stat.ethz.ch/R-manual/R-patched/library/graphics/html/00Index.html

with the index page for the base package "grDevices"

https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/00Index.html

The latter is split by first letter, the former isn't as it only lists
98 <= 100 help pages.

I don't really have a preference for either (but I also rarely use the
html help system). Using a threshold seems reasonable to avoid blowing
up the index of a small package like "splines" but provide some anchors
for a large package like "stats". 50 may be too low as a threshold.
Looking at package "parallel" with its 45 entries

https://stat.ethz.ch/R-manual/R-patched/library/parallel/html/00Index.html

the listing doesn't seem long enough to benefit from alphabetic
sectioning. Probably a matter of taste.

Best regards,

	Sebastian


Am 29.06.21 um 13:07 schrieb Marsh, Samuel:
> ?Hi,
> 
> 
> I would like to suggest a single line (2 characters) fix that I feel would greatly improve the readability and usefulness of the overview R package help/manual pages.  Currently the overall help/manual page for a package is organized into alphabetized table of contents with linked headers by letter only if the package contains more than 100 functions, otherwise the functions are simply listed with no line breaks.  This makes for a more difficult user experience with moderately sized packages 50-99 functions that could be improved.  I would suggest changing the threshold for creating this alphabetized table of contents to 50 instead of 100.
> 
> 
> I've provided info on the current code that specifies this parameter below:
> 
> It would appear that all that needs to be changed is the "> 100" parameter on this line:
> https://github.com/wch/r-source/blob/80a7ca3b605b34d207ed3465c942f39a37e89f6e/src/library/tools/R/install.R#L2770
> 
> 
> Or to list the code directly:
> 
> In the .writePkgIndices function the line is:
> use_alpha <- (nrow(M) > 100)?
> 
> 
> It appears to me the only change needed would be to set "nrow(M) > 50".  I believe this very small fix would greatly improve user experience for a growing number of moderately-sized packages whose manual/help pages would still greatly benefit from greater readability/organization.
> 
> 
> Thank you!
> 
> Sam
> 
> 
> --
> Samuel E. Marsh, Ph.D.
> Postdoctoral Fellow
> Laboratory of Dr. Beth Stevens
> F.M. Kirby Neurobiology Research Center
> Boston Children's Hospital
> Harvard Medical School
> samuel.marsh at childrens.harvard.edu
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Tue Jun 29 16:21:33 2021
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Tue, 29 Jun 2021 17:21:33 +0300
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
Message-ID: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>

Hello together, I'm working on some custom (grouped, weighted) sum, min and
max functions and I want them to support the special case of plain integer
sequences using ALTREP. I thereby encountered some behavior I cannot
explain to myself. The head of my fsum C function looks like this (g is
optional grouping vector, w is optional weights vector):

SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
  int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
    narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
  if(ALTREP(x) && ng == 0 && nwl) {
    switch(tx) {
    case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
    case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
    case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
    default: error("ALTREP object must be integer or real typed");
    }
  }
// ...
}

when I let x <- 1:1e8, fsum(x) works fine and returns the correct value. If
I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn this
into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
message 'converting NULL pointer to R NULL'. For functions fmin and fmax
(similarly defined using ALTINTEGER_MIN/MAX), I get this error right away
e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
NULL'. So what is going on here? What do these functions return? And how do
I make this a robust implementation?

Best regards,

Sebastian Krantz

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 29 17:08:35 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 29 Jun 2021 10:08:35 -0500 (CDT)
Subject: [Rd] [External] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and
 Behavior
In-Reply-To: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2106291007240.3252@luke-Latitude-7480>

ALTINTEGER_SUM and friends are _not_ intended for use in package code.
Once we get some time to clean up headers they will no longer be
visible to packages.

Best,

luke

On Tue, 29 Jun 2021, Sebastian Martin Krantz wrote:

> Hello together, I'm working on some custom (grouped, weighted) sum, min and
> max functions and I want them to support the special case of plain integer
> sequences using ALTREP. I thereby encountered some behavior I cannot
> explain to myself. The head of my fsum C function looks like this (g is
> optional grouping vector, w is optional weights vector):
>
> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>  int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>    narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>  if(ALTREP(x) && ng == 0 && nwl) {
>    switch(tx) {
>    case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>    case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>    case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>    default: error("ALTREP object must be integer or real typed");
>    }
>  }
> // ...
> }
>
> when I let x <- 1:1e8, fsum(x) works fine and returns the correct value. If
> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn this
> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
> message 'converting NULL pointer to R NULL'. For functions fmin and fmax
> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right away
> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
> NULL'. So what is going on here? What do these functions return? And how do
> I make this a robust implementation?
>
> Best regards,
>
> Sebastian Krantz
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From w||||@mwdun|@p @end|ng |rom gm@||@com  Tue Jun 29 18:43:18 2021
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Tue, 29 Jun 2021 09:43:18 -0700
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
In-Reply-To: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
Message-ID: <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>

Adding the dimensions attribute takes away the altrep-ness.  Removing
dimensions
does not make it altrep.  E.g.,

> a <- 1:10
> am <- a ; dim(am) <- c(2L,5L)
> amn <- am ; dim(amn) <- NULL
> .Call("is_altrep", a)
[1] TRUE
> .Call("is_altrep", am)
[1] FALSE
> .Call("is_altrep", amn)
[1] FALSE

where is_altrep() is defined by the following C code:

#include <R.h>
#include <Rinternals.h>

SEXP is_altrep(SEXP x)
{
    return Rf_ScalarLogical(ALTREP(x));
}

-Bill

On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
sebastian.krantz at graduateinstitute.ch> wrote:

> Hello together, I'm working on some custom (grouped, weighted) sum, min and
> max functions and I want them to support the special case of plain integer
> sequences using ALTREP. I thereby encountered some behavior I cannot
> explain to myself. The head of my fsum C function looks like this (g is
> optional grouping vector, w is optional weights vector):
>
> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>   if(ALTREP(x) && ng == 0 && nwl) {
>     switch(tx) {
>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>     default: error("ALTREP object must be integer or real typed");
>     }
>   }
> // ...
> }
>
> when I let x <- 1:1e8, fsum(x) works fine and returns the correct value. If
> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn this
> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
> message 'converting NULL pointer to R NULL'. For functions fmin and fmax
> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right away
> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
> NULL'. So what is going on here? What do these functions return? And how do
> I make this a robust implementation?
>
> Best regards,
>
> Sebastian Krantz
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Tue Jun 29 18:56:26 2021
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Tue, 29 Jun 2021 19:56:26 +0300
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
In-Reply-To: <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
Message-ID: <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>

Thanks both. Is there a suggested way I can get this speedup in a package?
Or just leave it for now?

Thanks also for the clarification Bill. The issue I have with that is that
in my C code ALTREP(x) evaluates to true even after adding and removing
dimensions (otherwise it would be handled by the normal sum method and I?d
be fine). Also .Internal(inspect(x)) still shows the compact
representation.

-Sebastian

On Tue 29. Jun 2021 at 19:43, Bill Dunlap <williamwdunlap at gmail.com> wrote:

> Adding the dimensions attribute takes away the altrep-ness.  Removing
> dimensions
> does not make it altrep.  E.g.,
>
> > a <- 1:10
> > am <- a ; dim(am) <- c(2L,5L)
> > amn <- am ; dim(amn) <- NULL
> > .Call("is_altrep", a)
> [1] TRUE
> > .Call("is_altrep", am)
> [1] FALSE
> > .Call("is_altrep", amn)
> [1] FALSE
>
> where is_altrep() is defined by the following C code:
>
> #include <R.h>
> #include <Rinternals.h>
>
> SEXP is_altrep(SEXP x)
> {
>     return Rf_ScalarLogical(ALTREP(x));
> }
>
>
> -Bill
>
> On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
> sebastian.krantz at graduateinstitute.ch> wrote:
>
>> Hello together, I'm working on some custom (grouped, weighted) sum, min
>> and
>> max functions and I want them to support the special case of plain integer
>> sequences using ALTREP. I thereby encountered some behavior I cannot
>> explain to myself. The head of my fsum C function looks like this (g is
>> optional grouping vector, w is optional weights vector):
>>
>> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>>   if(ALTREP(x) && ng == 0 && nwl) {
>>     switch(tx) {
>>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>     default: error("ALTREP object must be integer or real typed");
>>     }
>>   }
>> // ...
>> }
>>
>> when I let x <- 1:1e8, fsum(x) works fine and returns the correct value.
>> If
>> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn this
>> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
>> message 'converting NULL pointer to R NULL'. For functions fmin and fmax
>> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right away
>> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
>> NULL'. So what is going on here? What do these functions return? And how
>> do
>> I make this a robust implementation?
>>
>> Best regards,
>>
>> Sebastian Krantz
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 29 19:54:42 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 29 Jun 2021 12:54:42 -0500 (CDT)
Subject: [Rd] 
 [External] Re: ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and
 Behavior
In-Reply-To: <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2106291252130.3252@luke-Latitude-7480>

It depends on the size. For a larger vector adding dim will create a
wrapper ALTREP.

Currently the wrapper does not try to use the payload's sum method;
this could be added.

Best,

luke

On Tue, 29 Jun 2021, Bill Dunlap wrote:

> Adding the dimensions attribute takes away the altrep-ness.  Removing
> dimensions
> does not make it altrep.  E.g.,
>
>> a <- 1:10
>> am <- a ; dim(am) <- c(2L,5L)
>> amn <- am ; dim(amn) <- NULL
>> .Call("is_altrep", a)
> [1] TRUE
>> .Call("is_altrep", am)
> [1] FALSE
>> .Call("is_altrep", amn)
> [1] FALSE
>
> where is_altrep() is defined by the following C code:
>
> #include <R.h>
> #include <Rinternals.h>
>
> SEXP is_altrep(SEXP x)
> {
>    return Rf_ScalarLogical(ALTREP(x));
> }
>
> -Bill
>
> On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
> sebastian.krantz at graduateinstitute.ch> wrote:
>
>> Hello together, I'm working on some custom (grouped, weighted) sum, min and
>> max functions and I want them to support the special case of plain integer
>> sequences using ALTREP. I thereby encountered some behavior I cannot
>> explain to myself. The head of my fsum C function looks like this (g is
>> optional grouping vector, w is optional weights vector):
>>
>> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>>   if(ALTREP(x) && ng == 0 && nwl) {
>>     switch(tx) {
>>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>     default: error("ALTREP object must be integer or real typed");
>>     }
>>   }
>> // ...
>> }
>>
>> when I let x <- 1:1e8, fsum(x) works fine and returns the correct value. If
>> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn this
>> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
>> message 'converting NULL pointer to R NULL'. For functions fmin and fmax
>> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right away
>> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
>> NULL'. So what is going on here? What do these functions return? And how do
>> I make this a robust implementation?
>>
>> Best regards,
>>
>> Sebastian Krantz
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 29 19:59:42 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 29 Jun 2021 12:59:42 -0500 (CDT)
Subject: [Rd] 
 [External] Re: ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and
 Behavior
In-Reply-To: <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
 <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2106291255050.3252@luke-Latitude-7480>

Call the R sum() function, either before going to C code or by calling
back into R. You may only want to do this if the vector is long enough
for e possible savings to be worth while.


On Tue, 29 Jun 2021, Sebastian Martin Krantz wrote:

> Thanks both. Is there a suggested way I can get this speedup in a package?
> Or just leave it for now?
>
> Thanks also for the clarification Bill. The issue I have with that is that
> in my C code ALTREP(x) evaluates to true even after adding and removing
> dimensions (otherwise it would be handled by the normal sum method and I?d
> be fine).

When you use a longer vector

> Also .Internal(inspect(x)) still shows the compact
> representation.

A different representation (wrapper around a compact sequence).

Best,

luke


> -Sebastian
>
> On Tue 29. Jun 2021 at 19:43, Bill Dunlap <williamwdunlap at gmail.com> wrote:
>
>> Adding the dimensions attribute takes away the altrep-ness.  Removing
>> dimensions
>> does not make it altrep.  E.g.,
>>
>>> a <- 1:10
>>> am <- a ; dim(am) <- c(2L,5L)
>>> amn <- am ; dim(amn) <- NULL
>>> .Call("is_altrep", a)
>> [1] TRUE
>>> .Call("is_altrep", am)
>> [1] FALSE
>>> .Call("is_altrep", amn)
>> [1] FALSE
>>
>> where is_altrep() is defined by the following C code:
>>
>> #include <R.h>
>> #include <Rinternals.h>
>>
>> SEXP is_altrep(SEXP x)
>> {
>>     return Rf_ScalarLogical(ALTREP(x));
>> }
>>
>>
>> -Bill
>>
>> On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
>> sebastian.krantz at graduateinstitute.ch> wrote:
>>
>>> Hello together, I'm working on some custom (grouped, weighted) sum, min
>>> and
>>> max functions and I want them to support the special case of plain integer
>>> sequences using ALTREP. I thereby encountered some behavior I cannot
>>> explain to myself. The head of my fsum C function looks like this (g is
>>> optional grouping vector, w is optional weights vector):
>>>
>>> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>>>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>>>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>>>   if(ALTREP(x) && ng == 0 && nwl) {
>>>     switch(tx) {
>>>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>>>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>>     default: error("ALTREP object must be integer or real typed");
>>>     }
>>>   }
>>> // ...
>>> }
>>>
>>> when I let x <- 1:1e8, fsum(x) works fine and returns the correct value.
>>> If
>>> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn this
>>> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
>>> message 'converting NULL pointer to R NULL'. For functions fmin and fmax
>>> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right away
>>> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
>>> NULL'. So what is going on here? What do these functions return? And how
>>> do
>>> I make this a robust implementation?
>>>
>>> Best regards,
>>>
>>> Sebastian Krantz
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From g@bembecker @end|ng |rom gm@||@com  Tue Jun 29 20:07:28 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 29 Jun 2021 11:07:28 -0700
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
In-Reply-To: <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
 <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
Message-ID: <CAD4oTHG5adTOR0o99XbyRzQsKC7ZVpBjWGy4cgJkoWt28hJi7A@mail.gmail.com>

Hi Sebastian,

So the way that it is currently factored, there isn't a good way of getting
what you want under the constraints of what Luke said (ALTINTEGER_SUM is
not part of the API).

I don't know what his reason are for saying that per say and would not want
to speak for him, but of the top of my head, I suspect it is because ALTREP
sum methods are allowed to return NULL (the C version) to say "I don't have
a sum method that is applicable here, please continue with the normal
code". So, just as an example, your exact code is likely to segfault, I
think, if you hit an ALTREP that chooses not to implement a sum method
because you'll be running around with a SEXP that has the value NULL (the C
one, not the R one).

One thing you could do, is check for altrepness and then construct and
evaluate a call to the R sum function in that case, but that probably isn't
quite what you want either, as this will hit the code you're trying to
bypass/speedup  in the case where the ALTREP class doesn't implement a sum
methods. I see that Luke just mentioned this as well but I'll leave it in
since I had already typed it.

I hope that helps clarify some things.

Best,
~G


On Tue, Jun 29, 2021 at 10:13 AM Sebastian Martin Krantz <
sebastian.krantz at graduateinstitute.ch> wrote:

> Thanks both. Is there a suggested way I can get this speedup in a package?
> Or just leave it for now?
>
> Thanks also for the clarification Bill. The issue I have with that is that
> in my C code ALTREP(x) evaluates to true even after adding and removing
> dimensions (otherwise it would be handled by the normal sum method and I?d
> be fine). Also .Internal(inspect(x)) still shows the compact
> representation.
>
> -Sebastian
>
> On Tue 29. Jun 2021 at 19:43, Bill Dunlap <williamwdunlap at gmail.com>
> wrote:
>
> > Adding the dimensions attribute takes away the altrep-ness.  Removing
> > dimensions
> > does not make it altrep.  E.g.,
> >
> > > a <- 1:10
> > > am <- a ; dim(am) <- c(2L,5L)
> > > amn <- am ; dim(amn) <- NULL
> > > .Call("is_altrep", a)
> > [1] TRUE
> > > .Call("is_altrep", am)
> > [1] FALSE
> > > .Call("is_altrep", amn)
> > [1] FALSE
> >
> > where is_altrep() is defined by the following C code:
> >
> > #include <R.h>
> > #include <Rinternals.h>
> >
> > SEXP is_altrep(SEXP x)
> > {
> >     return Rf_ScalarLogical(ALTREP(x));
> > }
> >
> >
> > -Bill
> >
> > On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
> > sebastian.krantz at graduateinstitute.ch> wrote:
> >
> >> Hello together, I'm working on some custom (grouped, weighted) sum, min
> >> and
> >> max functions and I want them to support the special case of plain
> integer
> >> sequences using ALTREP. I thereby encountered some behavior I cannot
> >> explain to myself. The head of my fsum C function looks like this (g is
> >> optional grouping vector, w is optional weights vector):
> >>
> >> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
> >>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
> >>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
> >>   if(ALTREP(x) && ng == 0 && nwl) {
> >>     switch(tx) {
> >>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
> >>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
> >>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
> >>     default: error("ALTREP object must be integer or real typed");
> >>     }
> >>   }
> >> // ...
> >> }
> >>
> >> when I let x <- 1:1e8, fsum(x) works fine and returns the correct value.
> >> If
> >> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn
> this
> >> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
> >> message 'converting NULL pointer to R NULL'. For functions fmin and fmax
> >> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right
> away
> >> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
> >> NULL'. So what is going on here? What do these functions return? And how
> >> do
> >> I make this a robust implementation?
> >>
> >> Best regards,
> >>
> >> Sebastian Krantz
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Jun 29 20:09:17 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 29 Jun 2021 11:09:17 -0700
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
In-Reply-To: <CAD4oTHG5adTOR0o99XbyRzQsKC7ZVpBjWGy4cgJkoWt28hJi7A@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
 <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
 <CAD4oTHG5adTOR0o99XbyRzQsKC7ZVpBjWGy4cgJkoWt28hJi7A@mail.gmail.com>
Message-ID: <CAD4oTHH2b0pm85ABXdSpnUKdjKcvXeCWGWT00C8z4NGnMup0AQ@mail.gmail.com>

Also, @Luke Tierney <luke-tierney at uiowa.edu>  I can prepare a patch that
has wrappers delegate to payload's ALTREP class methods for things like
sum, min, max, etc once conference season calms down a bit.

Best,
~G

On Tue, Jun 29, 2021 at 11:07 AM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Sebastian,
>
> So the way that it is currently factored, there isn't a good way of
> getting what you want under the constraints of what Luke said (ALTINTEGER_SUM
> is not part of the API).
>
> I don't know what his reason are for saying that per say and would not
> want to speak for him, but of the top of my head, I suspect it is because
> ALTREP sum methods are allowed to return NULL (the C version) to say "I
> don't have a sum method that is applicable here, please continue with the
> normal code". So, just as an example, your exact code is likely to
> segfault, I think, if you hit an ALTREP that chooses not to implement a sum
> method because you'll be running around with a SEXP that has the value NULL
> (the C one, not the R one).
>
> One thing you could do, is check for altrepness and then construct and
> evaluate a call to the R sum function in that case, but that probably isn't
> quite what you want either, as this will hit the code you're trying to
> bypass/speedup  in the case where the ALTREP class doesn't implement a sum
> methods. I see that Luke just mentioned this as well but I'll leave it in
> since I had already typed it.
>
> I hope that helps clarify some things.
>
> Best,
> ~G
>
>
> On Tue, Jun 29, 2021 at 10:13 AM Sebastian Martin Krantz <
> sebastian.krantz at graduateinstitute.ch> wrote:
>
>> Thanks both. Is there a suggested way I can get this speedup in a package?
>> Or just leave it for now?
>>
>> Thanks also for the clarification Bill. The issue I have with that is that
>> in my C code ALTREP(x) evaluates to true even after adding and removing
>> dimensions (otherwise it would be handled by the normal sum method and I?d
>> be fine). Also .Internal(inspect(x)) still shows the compact
>> representation.
>>
>> -Sebastian
>>
>> On Tue 29. Jun 2021 at 19:43, Bill Dunlap <williamwdunlap at gmail.com>
>> wrote:
>>
>> > Adding the dimensions attribute takes away the altrep-ness.  Removing
>> > dimensions
>> > does not make it altrep.  E.g.,
>> >
>> > > a <- 1:10
>> > > am <- a ; dim(am) <- c(2L,5L)
>> > > amn <- am ; dim(amn) <- NULL
>> > > .Call("is_altrep", a)
>> > [1] TRUE
>> > > .Call("is_altrep", am)
>> > [1] FALSE
>> > > .Call("is_altrep", amn)
>> > [1] FALSE
>> >
>> > where is_altrep() is defined by the following C code:
>> >
>> > #include <R.h>
>> > #include <Rinternals.h>
>> >
>> > SEXP is_altrep(SEXP x)
>> > {
>> >     return Rf_ScalarLogical(ALTREP(x));
>> > }
>> >
>> >
>> > -Bill
>> >
>> > On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
>> > sebastian.krantz at graduateinstitute.ch> wrote:
>> >
>> >> Hello together, I'm working on some custom (grouped, weighted) sum, min
>> >> and
>> >> max functions and I want them to support the special case of plain
>> integer
>> >> sequences using ALTREP. I thereby encountered some behavior I cannot
>> >> explain to myself. The head of my fsum C function looks like this (g is
>> >> optional grouping vector, w is optional weights vector):
>> >>
>> >> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>> >>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>> >>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>> >>   if(ALTREP(x) && ng == 0 && nwl) {
>> >>     switch(tx) {
>> >>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>> >>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>> >>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>> >>     default: error("ALTREP object must be integer or real typed");
>> >>     }
>> >>   }
>> >> // ...
>> >> }
>> >>
>> >> when I let x <- 1:1e8, fsum(x) works fine and returns the correct
>> value.
>> >> If
>> >> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn
>> this
>> >> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
>> >> message 'converting NULL pointer to R NULL'. For functions fmin and
>> fmax
>> >> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right
>> away
>> >> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
>> >> NULL'. So what is going on here? What do these functions return? And
>> how
>> >> do
>> >> I make this a robust implementation?
>> >>
>> >> Best regards,
>> >>
>> >> Sebastian Krantz
>> >>
>> >>         [[alternative HTML version deleted]]
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>> >
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Jun 29 20:44:17 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 29 Jun 2021 11:44:17 -0700
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
In-Reply-To: <CAOsNuxAp-JhjOzRqk3Re_feQ1TZ4g9VgkhfeWeOFAq0QkN3rbw@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
 <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
 <CAD4oTHG5adTOR0o99XbyRzQsKC7ZVpBjWGy4cgJkoWt28hJi7A@mail.gmail.com>
 <CAD4oTHH2b0pm85ABXdSpnUKdjKcvXeCWGWT00C8z4NGnMup0AQ@mail.gmail.com>
 <CAOsNuxAp-JhjOzRqk3Re_feQ1TZ4g9VgkhfeWeOFAq0QkN3rbw@mail.gmail.com>
Message-ID: <CAD4oTHEW0pnc2TEKAjU7pFnY7TjffirLU4x852wBLmj28gdaJg@mail.gmail.com>

Hi Sebastian,

min/max do not materialize the vector, you will see it as compact after
same as before. It *does* however do a pass over the data chunked by
region, which is much more expensive than it need be for compact sequences,
that is true.

I think in some version of code that never made it out of the branch, I had
default min/max methods which took sortedness into account if it was known.
One thing that significantly complicated that cod ewas that you have to
find the edge of the NAs(/NaNs for the real case) if narm is TRUE, which
involves a binary search using ELT (or a linear one using
ITERATE_BY_REGION, I suppose).

That said a newer version of the count nas code did get in from a later
patch  to update, so it is available in r-devel and could be used to
revisit that approach.

That aside, it is true that compact sequences in particular never have NAs
so the min and max altrep methods for those classes would be trivial. I
kind of doubt people are creating compact sequences and then asking for the
min/max/mean of them very often in practice.

Best,
~G

On Tue, Jun 29, 2021 at 11:26 AM Sebastian Martin Krantz <
sebastian.krantz at graduateinstitute.ch> wrote:

> Thanks Gabriel and Luke,
>
> I understand now the functions return NULL if no method is applicable. I
> wonder though why do ALTINTEGER_MIN and MAX return NULL on a plain integer
> sequence? I also see that min() and max() are not optimized i.e. min(1:1e8)
> appears to materialize the vector.
>
> In general I expect my functions to mostly be applied to real data so this
> is not a huge issue for me (I?d rather get rid of it again than calling
> sum() or risking that the macros are removed from the API), but it could be
> nice to have this speedup available to packages. If these macros have
> matured and it can be made explicit that they return NULL if no method is
> applicable, or, better, they internally dispatch to a normal sum method if
> this is the case, they could become very manageable and useful.
>
> Best,
>
> Sebastian
>
>
>
> On Tue 29. Jun 2021 at 21:09, Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Also, @Luke Tierney <luke-tierney at uiowa.edu>  I can prepare a patch that
>> has wrappers delegate to payload's ALTREP class methods for things like
>> sum, min, max, etc once conference season calms down a bit.
>>
>> Best,
>> ~G
>>
>> On Tue, Jun 29, 2021 at 11:07 AM Gabriel Becker <gabembecker at gmail.com>
>> wrote:
>>
>>> Hi Sebastian,
>>>
>>> So the way that it is currently factored, there isn't a good way of
>>> getting what you want under the constraints of what Luke said (ALTINTEGER_SUM
>>> is not part of the API).
>>>
>>> I don't know what his reason are for saying that per say and would not
>>> want to speak for him, but of the top of my head, I suspect it is because
>>> ALTREP sum methods are allowed to return NULL (the C version) to say "I
>>> don't have a sum method that is applicable here, please continue with the
>>> normal code". So, just as an example, your exact code is likely to
>>> segfault, I think, if you hit an ALTREP that chooses not to implement a sum
>>> method because you'll be running around with a SEXP that has the value NULL
>>> (the C one, not the R one).
>>>
>>> One thing you could do, is check for altrepness and then construct and
>>> evaluate a call to the R sum function in that case, but that probably isn't
>>> quite what you want either, as this will hit the code you're trying to
>>> bypass/speedup  in the case where the ALTREP class doesn't implement a sum
>>> methods. I see that Luke just mentioned this as well but I'll leave it in
>>> since I had already typed it.
>>>
>>> I hope that helps clarify some things.
>>>
>>> Best,
>>> ~G
>>>
>>>
>>> On Tue, Jun 29, 2021 at 10:13 AM Sebastian Martin Krantz <
>>> sebastian.krantz at graduateinstitute.ch> wrote:
>>>
>>>> Thanks both. Is there a suggested way I can get this speedup in a
>>>> package?
>>>> Or just leave it for now?
>>>>
>>>> Thanks also for the clarification Bill. The issue I have with that is
>>>> that
>>>> in my C code ALTREP(x) evaluates to true even after adding and removing
>>>> dimensions (otherwise it would be handled by the normal sum method and
>>>> I?d
>>>> be fine). Also .Internal(inspect(x)) still shows the compact
>>>> representation.
>>>>
>>>> -Sebastian
>>>>
>>>> On Tue 29. Jun 2021 at 19:43, Bill Dunlap <williamwdunlap at gmail.com>
>>>> wrote:
>>>>
>>>> > Adding the dimensions attribute takes away the altrep-ness.  Removing
>>>> > dimensions
>>>> > does not make it altrep.  E.g.,
>>>> >
>>>> > > a <- 1:10
>>>> > > am <- a ; dim(am) <- c(2L,5L)
>>>> > > amn <- am ; dim(amn) <- NULL
>>>> > > .Call("is_altrep", a)
>>>> > [1] TRUE
>>>> > > .Call("is_altrep", am)
>>>> > [1] FALSE
>>>> > > .Call("is_altrep", amn)
>>>> > [1] FALSE
>>>> >
>>>> > where is_altrep() is defined by the following C code:
>>>> >
>>>> > #include <R.h>
>>>> > #include <Rinternals.h>
>>>> >
>>>> > SEXP is_altrep(SEXP x)
>>>> > {
>>>> >     return Rf_ScalarLogical(ALTREP(x));
>>>> > }
>>>> >
>>>> >
>>>> > -Bill
>>>> >
>>>> > On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
>>>> > sebastian.krantz at graduateinstitute.ch> wrote:
>>>> >
>>>> >> Hello together, I'm working on some custom (grouped, weighted) sum,
>>>> min
>>>> >> and
>>>> >> max functions and I want them to support the special case of plain
>>>> integer
>>>> >> sequences using ALTREP. I thereby encountered some behavior I cannot
>>>> >> explain to myself. The head of my fsum C function looks like this (g
>>>> is
>>>> >> optional grouping vector, w is optional weights vector):
>>>> >>
>>>> >> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>>>> >>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>>>> >>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>>>> >>   if(ALTREP(x) && ng == 0 && nwl) {
>>>> >>     switch(tx) {
>>>> >>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>>>> >>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>>> >>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>>> >>     default: error("ALTREP object must be integer or real typed");
>>>> >>     }
>>>> >>   }
>>>> >> // ...
>>>> >> }
>>>> >>
>>>> >> when I let x <- 1:1e8, fsum(x) works fine and returns the correct
>>>> value.
>>>> >> If
>>>> >> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn
>>>> this
>>>> >> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a
>>>> warning
>>>> >> message 'converting NULL pointer to R NULL'. For functions fmin and
>>>> fmax
>>>> >> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right
>>>> away
>>>> >> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
>>>> >> NULL'. So what is going on here? What do these functions return? And
>>>> how
>>>> >> do
>>>> >> I make this a robust implementation?
>>>> >>
>>>> >> Best regards,
>>>> >>
>>>> >> Sebastian Krantz
>>>> >>
>>>> >>         [[alternative HTML version deleted]]
>>>> >>
>>>> >> ______________________________________________
>>>> >> R-devel at r-project.org mailing list
>>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> >>
>>>> >
>>>>
>>>>         [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>

	[[alternative HTML version deleted]]


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Tue Jun 29 20:26:18 2021
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Tue, 29 Jun 2021 21:26:18 +0300
Subject: [Rd] ALTREP ALTINTEGER_SUM/MIN/MAX Return Value and Behavior
In-Reply-To: <CAD4oTHH2b0pm85ABXdSpnUKdjKcvXeCWGWT00C8z4NGnMup0AQ@mail.gmail.com>
References: <CAOsNuxCcNDAc4uhp6n0h94n7miPbisfLaeGmt71P-GApBRMxCQ@mail.gmail.com>
 <CAHqSRuR-HHbBgKZL8=C457uCs2v-mOqAbgJky=r+qnWbZzR4xg@mail.gmail.com>
 <CAOsNuxCSMoUuAOBNNp=r2wG+dSyeF7vRMvJMM_Yk7xdAFyCcrA@mail.gmail.com>
 <CAD4oTHG5adTOR0o99XbyRzQsKC7ZVpBjWGy4cgJkoWt28hJi7A@mail.gmail.com>
 <CAD4oTHH2b0pm85ABXdSpnUKdjKcvXeCWGWT00C8z4NGnMup0AQ@mail.gmail.com>
Message-ID: <CAOsNuxAp-JhjOzRqk3Re_feQ1TZ4g9VgkhfeWeOFAq0QkN3rbw@mail.gmail.com>

Thanks Gabriel and Luke,

I understand now the functions return NULL if no method is applicable. I
wonder though why do ALTINTEGER_MIN and MAX return NULL on a plain integer
sequence? I also see that min() and max() are not optimized i.e. min(1:1e8)
appears to materialize the vector.

In general I expect my functions to mostly be applied to real data so this
is not a huge issue for me (I?d rather get rid of it again than calling
sum() or risking that the macros are removed from the API), but it could be
nice to have this speedup available to packages. If these macros have
matured and it can be made explicit that they return NULL if no method is
applicable, or, better, they internally dispatch to a normal sum method if
this is the case, they could become very manageable and useful.

Best,

Sebastian



On Tue 29. Jun 2021 at 21:09, Gabriel Becker <gabembecker at gmail.com> wrote:

> Also, @Luke Tierney <luke-tierney at uiowa.edu>  I can prepare a patch that
> has wrappers delegate to payload's ALTREP class methods for things like
> sum, min, max, etc once conference season calms down a bit.
>
> Best,
> ~G
>
> On Tue, Jun 29, 2021 at 11:07 AM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Hi Sebastian,
>>
>> So the way that it is currently factored, there isn't a good way of
>> getting what you want under the constraints of what Luke said (ALTINTEGER_SUM
>> is not part of the API).
>>
>> I don't know what his reason are for saying that per say and would not
>> want to speak for him, but of the top of my head, I suspect it is because
>> ALTREP sum methods are allowed to return NULL (the C version) to say "I
>> don't have a sum method that is applicable here, please continue with the
>> normal code". So, just as an example, your exact code is likely to
>> segfault, I think, if you hit an ALTREP that chooses not to implement a sum
>> method because you'll be running around with a SEXP that has the value NULL
>> (the C one, not the R one).
>>
>> One thing you could do, is check for altrepness and then construct and
>> evaluate a call to the R sum function in that case, but that probably isn't
>> quite what you want either, as this will hit the code you're trying to
>> bypass/speedup  in the case where the ALTREP class doesn't implement a sum
>> methods. I see that Luke just mentioned this as well but I'll leave it in
>> since I had already typed it.
>>
>> I hope that helps clarify some things.
>>
>> Best,
>> ~G
>>
>>
>> On Tue, Jun 29, 2021 at 10:13 AM Sebastian Martin Krantz <
>> sebastian.krantz at graduateinstitute.ch> wrote:
>>
>>> Thanks both. Is there a suggested way I can get this speedup in a
>>> package?
>>> Or just leave it for now?
>>>
>>> Thanks also for the clarification Bill. The issue I have with that is
>>> that
>>> in my C code ALTREP(x) evaluates to true even after adding and removing
>>> dimensions (otherwise it would be handled by the normal sum method and
>>> I?d
>>> be fine). Also .Internal(inspect(x)) still shows the compact
>>> representation.
>>>
>>> -Sebastian
>>>
>>> On Tue 29. Jun 2021 at 19:43, Bill Dunlap <williamwdunlap at gmail.com>
>>> wrote:
>>>
>>> > Adding the dimensions attribute takes away the altrep-ness.  Removing
>>> > dimensions
>>> > does not make it altrep.  E.g.,
>>> >
>>> > > a <- 1:10
>>> > > am <- a ; dim(am) <- c(2L,5L)
>>> > > amn <- am ; dim(amn) <- NULL
>>> > > .Call("is_altrep", a)
>>> > [1] TRUE
>>> > > .Call("is_altrep", am)
>>> > [1] FALSE
>>> > > .Call("is_altrep", amn)
>>> > [1] FALSE
>>> >
>>> > where is_altrep() is defined by the following C code:
>>> >
>>> > #include <R.h>
>>> > #include <Rinternals.h>
>>> >
>>> > SEXP is_altrep(SEXP x)
>>> > {
>>> >     return Rf_ScalarLogical(ALTREP(x));
>>> > }
>>> >
>>> >
>>> > -Bill
>>> >
>>> > On Tue, Jun 29, 2021 at 8:03 AM Sebastian Martin Krantz <
>>> > sebastian.krantz at graduateinstitute.ch> wrote:
>>> >
>>> >> Hello together, I'm working on some custom (grouped, weighted) sum,
>>> min
>>> >> and
>>> >> max functions and I want them to support the special case of plain
>>> integer
>>> >> sequences using ALTREP. I thereby encountered some behavior I cannot
>>> >> explain to myself. The head of my fsum C function looks like this (g
>>> is
>>> >> optional grouping vector, w is optional weights vector):
>>> >>
>>> >> SEXP fsumC(SEXP x, SEXP Rng, SEXP g, SEXP w, SEXP Rnarm) {
>>> >>   int l = length(x), tx = TYPEOF(x), ng = asInteger(Rng),
>>> >>     narm = asLogical(Rnarm), nprotect = 1, nwl = isNull(w);
>>> >>   if(ALTREP(x) && ng == 0 && nwl) {
>>> >>     switch(tx) {
>>> >>     case INTSXP: return ALTINTEGER_SUM(x, (Rboolean)narm);
>>> >>     case LGLSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>> >>     case REALSXP: return ALTLOGICAL_SUM(x, (Rboolean)narm);
>>> >>     default: error("ALTREP object must be integer or real typed");
>>> >>     }
>>> >>   }
>>> >> // ...
>>> >> }
>>> >>
>>> >> when I let x <- 1:1e8, fsum(x) works fine and returns the correct
>>> value.
>>> >> If
>>> >> I now make this a matrix dim(x) <- c(1e2, 1e6) and subsequently turn
>>> this
>>> >> into a vector again, dim(x) <- NULL, fsum(x) gives  NULL and a warning
>>> >> message 'converting NULL pointer to R NULL'. For functions fmin and
>>> fmax
>>> >> (similarly defined using ALTINTEGER_MIN/MAX), I get this error right
>>> away
>>> >> e.g. fmin(1:1e8) gives NULL and warning 'converting NULL pointer to R
>>> >> NULL'. So what is going on here? What do these functions return? And
>>> how
>>> >> do
>>> >> I make this a robust implementation?
>>> >>
>>> >> Best regards,
>>> >>
>>> >> Sebastian Krantz
>>> >>
>>> >>         [[alternative HTML version deleted]]
>>> >>
>>> >> ______________________________________________
>>> >> R-devel at r-project.org mailing list
>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> >>
>>> >
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Jun 30 11:22:15 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 30 Jun 2021 11:22:15 +0200
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
Message-ID: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>

Dear all, 

I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:

   env <- local({
     # define the generic function and the method 
     myfun <- function(x) UseMethod("myfun")
     myfun.myclass <- function(x) print("called myfun.myclass?)

     # register the method 
     .S3method("myfun", "myclass", myfun.myclass)

     environment()
  })

Since the method has been registered, I hoped that invocation like this would work:

   env$myfun(structure(0, class = "myclass?))

However, this results in a ?no applicable method" error. 

It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect. 

In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid. 

Thank you in advance for any pointers!

Best, 

Taras

P.S. If you are wondering what I am trying to achieve here ? we have a very large codebase and I am trying to use environments as a type of ?poor man?s namespaces? to organize code in a modular fashion. But of course it?s all pointless if I can?t get the generics to work reliably.

From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 30 12:17:04 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 30 Jun 2021 06:17:04 -0400
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
Message-ID: <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>

On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
> Dear all,
> 
> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
> 
>     env <- local({
>       # define the generic function and the method
>       myfun <- function(x) UseMethod("myfun")
>       myfun.myclass <- function(x) print("called myfun.myclass?)
> 
>       # register the method
>       .S3method("myfun", "myclass", myfun.myclass)
> 
>       environment()
>    })
> 
> Since the method has been registered, I hoped that invocation like this would work:
> 
>     env$myfun(structure(0, class = "myclass?))
> 
> However, this results in a ?no applicable method" error.
> 
> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
> 
> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
> 
> Thank you in advance for any pointers!
> 

registerS3method has an additional parameter "envir" which I believe 
would end up set to env in your code.  So this works:

 > eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
[1] "called myfun.myclass"

You could probably also call registerS3method with envir specified 
appropriately and get your original expression to work.

Duncan Murdoch


From jo@h@m@u|r|ch @end|ng |rom gm@||@com  Wed Jun 30 12:39:17 2021
From: jo@h@m@u|r|ch @end|ng |rom gm@||@com (Joshua Ulrich)
Date: Wed, 30 Jun 2021 05:39:17 -0500
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
Message-ID: <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>

On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
> > Dear all,
> >
> > I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
> >
> >     env <- local({
> >       # define the generic function and the method
> >       myfun <- function(x) UseMethod("myfun")
> >       myfun.myclass <- function(x) print("called myfun.myclass?)
> >
> >       # register the method
> >       .S3method("myfun", "myclass", myfun.myclass)
> >
> >       environment()
> >    })
> >
> > Since the method has been registered, I hoped that invocation like this would work:
> >
> >     env$myfun(structure(0, class = "myclass?))
> >
> > However, this results in a ?no applicable method" error.
> >
> > It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
> >
> > In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
> >
> > Thank you in advance for any pointers!
> >
>
> registerS3method has an additional parameter "envir" which I believe
> would end up set to env in your code.  So this works:
>
>  > eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
> [1] "called myfun.myclass"
>
> You could probably also call registerS3method with envir specified
> appropriately and get your original expression to work.
>
That doesn't seem to work on 4.1.0 for me. The code below worked for
me in Oct-2020, though I'm not sure what version of R I was using at
the time. I was slow to upgrade to 4.0, so it was probably the latest
3.x version.

env <- new.env()
local({
   # define the generic function and the method
   myfun <- function(x) { UseMethod("myfun", x) }

   # register the method
   registerS3method("myfun", "myclass",
       function(x) { print("called myfun.myclass") },
       envir = env)
}, envir = env)
attach(env)
myfun(structure(0, class = "myclass"))


> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Jun 30 12:51:45 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 30 Jun 2021 12:51:45 +0200
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
Message-ID: <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>

@Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem. 

Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:


 if(lookup_use_topenv_as_defenv == -1) {
	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
	lookup_use_topenv_as_defenv = 
	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
 }

Isn?t that supposed to be 

	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;

instead? 

The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected. 

In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here). 

I can open a bug report, but I would like to wait for some more comments. 

Best, 

Taras

> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
> 
> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> 
>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>> Dear all,
>>> 
>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>> 
>>>    env <- local({
>>>      # define the generic function and the method
>>>      myfun <- function(x) UseMethod("myfun")
>>>      myfun.myclass <- function(x) print("called myfun.myclass?)
>>> 
>>>      # register the method
>>>      .S3method("myfun", "myclass", myfun.myclass)
>>> 
>>>      environment()
>>>   })
>>> 
>>> Since the method has been registered, I hoped that invocation like this would work:
>>> 
>>>    env$myfun(structure(0, class = "myclass?))
>>> 
>>> However, this results in a ?no applicable method" error.
>>> 
>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>> 
>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>> 
>>> Thank you in advance for any pointers!
>>> 
>> 
>> registerS3method has an additional parameter "envir" which I believe
>> would end up set to env in your code.  So this works:
>> 
>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>> [1] "called myfun.myclass"
>> 
>> You could probably also call registerS3method with envir specified
>> appropriately and get your original expression to work.
>> 
> That doesn't seem to work on 4.1.0 for me. The code below worked for
> me in Oct-2020, though I'm not sure what version of R I was using at
> the time. I was slow to upgrade to 4.0, so it was probably the latest
> 3.x version.
> 
> env <- new.env()
> local({
>   # define the generic function and the method
>   myfun <- function(x) { UseMethod("myfun", x) }
> 
>   # register the method
>   registerS3method("myfun", "myclass",
>       function(x) { print("called myfun.myclass") },
>       envir = env)
> }, envir = env)
> attach(env)
> myfun(structure(0, class = "myclass"))
> 
> 
>> Duncan Murdoch
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> -- 
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Jun 30 13:23:42 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 30 Jun 2021 13:23:42 +0200
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
Message-ID: <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>

I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:


- if (typeof(genfun) == "closure?) 
-            environment(genfun)
------------
+ if (typeof(genfun) == "closure?) 
+ if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun)) 

in order to match the behavior of do_usemethod()

Best, 

Taras


> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
> 
> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem. 
> 
> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
> 
> 
> if(lookup_use_topenv_as_defenv == -1) {
> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
> 	lookup_use_topenv_as_defenv = 
> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
> }
> 
> Isn?t that supposed to be 
> 
> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
> 
> instead? 
> 
> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected. 
> 
> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here). 
> 
> I can open a bug report, but I would like to wait for some more comments. 
> 
> Best, 
> 
> Taras
> 
>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>> 
>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>> Dear all,
>>>> 
>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>> 
>>>>   env <- local({
>>>>     # define the generic function and the method
>>>>     myfun <- function(x) UseMethod("myfun")
>>>>     myfun.myclass <- function(x) print("called myfun.myclass?)
>>>> 
>>>>     # register the method
>>>>     .S3method("myfun", "myclass", myfun.myclass)
>>>> 
>>>>     environment()
>>>>  })
>>>> 
>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>> 
>>>>   env$myfun(structure(0, class = "myclass?))
>>>> 
>>>> However, this results in a ?no applicable method" error.
>>>> 
>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>> 
>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>> 
>>>> Thank you in advance for any pointers!
>>>> 
>>> 
>>> registerS3method has an additional parameter "envir" which I believe
>>> would end up set to env in your code.  So this works:
>>> 
>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>> [1] "called myfun.myclass"
>>> 
>>> You could probably also call registerS3method with envir specified
>>> appropriately and get your original expression to work.
>>> 
>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>> me in Oct-2020, though I'm not sure what version of R I was using at
>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>> 3.x version.
>> 
>> env <- new.env()
>> local({
>>  # define the generic function and the method
>>  myfun <- function(x) { UseMethod("myfun", x) }
>> 
>>  # register the method
>>  registerS3method("myfun", "myclass",
>>      function(x) { print("called myfun.myclass") },
>>      envir = env)
>> }, envir = env)
>> attach(env)
>> myfun(structure(0, class = "myclass"))
>> 
>> 
>>> Duncan Murdoch
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>> 
>> -- 
>> Joshua Ulrich  |  about.me/joshuaulrich
>> FOSS Trading  |  www.fosstrading.com
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 30 13:27:47 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 30 Jun 2021 07:27:47 -0400
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
Message-ID: <005780f0-3628-24cb-a8ef-450df0a33297@gmail.com>

On 30/06/2021 6:51 a.m., Taras Zakharko wrote:
> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
> 
> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
> 
> 
>   if(lookup_use_topenv_as_defenv == -1) {
> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
> 	lookup_use_topenv_as_defenv =
> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>   }
> 
> Isn?t that supposed to be
> 
> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;


> 
> instead?

Surely not.  That would set the result to 1 if the user had 
_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_=FALSE.  The default for that 
env variable in the R code in src/library/utils/objects.R is explicitly 
TRUE, and it should surely be treated the same in C code.
> 
> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. 

No, the StringFalse() call tries to determine if the string is set to 
something that looks like FALSE.  So it will be 1 if not set or set but 
not "FALSE" (or equivalent), which is the same thing as saying the 
default for that env var should be treated as TRUE.

Duncan Murdoch

This seems incompatible with what registerS3method() does (setting the 
.__S3MethodsTable__. on the defining environment instead of the topenv). 
When I change 0 and 1 around, everything works as expected.
> 
> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
> 
> I can open a bug report, but I would like to wait for some more comments.
> 
> Best,
> 
> Taras
> 
>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>
>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>
>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>> Dear all,
>>>>
>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>
>>>>     env <- local({
>>>>       # define the generic function and the method
>>>>       myfun <- function(x) UseMethod("myfun")
>>>>       myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>
>>>>       # register the method
>>>>       .S3method("myfun", "myclass", myfun.myclass)
>>>>
>>>>       environment()
>>>>    })
>>>>
>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>
>>>>     env$myfun(structure(0, class = "myclass?))
>>>>
>>>> However, this results in a ?no applicable method" error.
>>>>
>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>
>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>
>>>> Thank you in advance for any pointers!
>>>>
>>>
>>> registerS3method has an additional parameter "envir" which I believe
>>> would end up set to env in your code.  So this works:
>>>
>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>> [1] "called myfun.myclass"
>>>
>>> You could probably also call registerS3method with envir specified
>>> appropriately and get your original expression to work.
>>>
>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>> me in Oct-2020, though I'm not sure what version of R I was using at
>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>> 3.x version.
>>
>> env <- new.env()
>> local({
>>    # define the generic function and the method
>>    myfun <- function(x) { UseMethod("myfun", x) }
>>
>>    # register the method
>>    registerS3method("myfun", "myclass",
>>        function(x) { print("called myfun.myclass") },
>>        envir = env)
>> }, envir = env)
>> attach(env)
>> myfun(structure(0, class = "myclass"))
>>
>>
>>> Duncan Murdoch
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>
>> -- 
>> Joshua Ulrich  |  about.me/joshuaulrich
>> FOSS Trading  |  www.fosstrading.com
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 30 13:29:35 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 30 Jun 2021 07:29:35 -0400
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
 <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
Message-ID: <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>

On 30/06/2021 7:23 a.m., Taras Zakharko wrote:
> I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:

It registers wherever you ask it to.  The default is the defining 
environment.

.S3method is the one that always uses the defining environment, since it 
has no way to override the default.

Duncan Murdoch

> 
> 
> - if (typeof(genfun) == "closure?)
> -            environment(genfun)
> ------------
> + if (typeof(genfun) == "closure?)
> + if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun))
> 
> in order to match the behavior of do_usemethod()
> 
> Best,
> 
> Taras
> 
> 
>> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>>
>> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
>>
>> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
>>
>>
>> if(lookup_use_topenv_as_defenv == -1) {
>> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
>> 	lookup_use_topenv_as_defenv =
>> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>> }
>>
>> Isn?t that supposed to be
>>
>> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
>>
>> instead?
>>
>> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected.
>>
>> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
>>
>> I can open a bug report, but I would like to wait for some more comments.
>>
>> Best,
>>
>> Taras
>>
>>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>>
>>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>
>>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>>> Dear all,
>>>>>
>>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>>
>>>>>    env <- local({
>>>>>      # define the generic function and the method
>>>>>      myfun <- function(x) UseMethod("myfun")
>>>>>      myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>>
>>>>>      # register the method
>>>>>      .S3method("myfun", "myclass", myfun.myclass)
>>>>>
>>>>>      environment()
>>>>>   })
>>>>>
>>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>>
>>>>>    env$myfun(structure(0, class = "myclass?))
>>>>>
>>>>> However, this results in a ?no applicable method" error.
>>>>>
>>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>>
>>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>>
>>>>> Thank you in advance for any pointers!
>>>>>
>>>>
>>>> registerS3method has an additional parameter "envir" which I believe
>>>> would end up set to env in your code.  So this works:
>>>>
>>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>>> [1] "called myfun.myclass"
>>>>
>>>> You could probably also call registerS3method with envir specified
>>>> appropriately and get your original expression to work.
>>>>
>>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>>> me in Oct-2020, though I'm not sure what version of R I was using at
>>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>>> 3.x version.
>>>
>>> env <- new.env()
>>> local({
>>>   # define the generic function and the method
>>>   myfun <- function(x) { UseMethod("myfun", x) }
>>>
>>>   # register the method
>>>   registerS3method("myfun", "myclass",
>>>       function(x) { print("called myfun.myclass") },
>>>       envir = env)
>>> }, envir = env)
>>> attach(env)
>>> myfun(structure(0, class = "myclass"))
>>>
>>>
>>>> Duncan Murdoch
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>
>>>
>>> -- 
>>> Joshua Ulrich  |  about.me/joshuaulrich
>>> FOSS Trading  |  www.fosstrading.com
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Jun 30 13:37:23 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 30 Jun 2021 13:37:23 +0200
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
 <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
 <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>
Message-ID: <07BE0CBA-820F-4549-B0B2-BC8C5BD07778@uzh.ch>

Thats not how I read the code? Consider this snippet from registerS3method:

genfun <- get(genname, envir = envir)
        if (.isMethodsDispatchOn() && methods::is(genfun, "genericFunction")) 
            genfun <- methods::finalDefaultMethod(genfun at default)
        if (typeof(genfun) == "closure") 
            environment(genfun)
        else .BaseNamespaceEnv

This is the environment where the method cache (.__S3MethodsTable__.) will be updated. The problem hoverer, the with the default setting of _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ this is *not* the environment where R will look for the method cache. Manually injecting the entry into the method cache of the top environment instead works like a charm. 

The envir argument is just for looking up the generic function. 

Best, 

Taras 



> On 30 Jun 2021, at 13:29, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 30/06/2021 7:23 a.m., Taras Zakharko wrote:
>> I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:
> 
> It registers wherever you ask it to.  The default is the defining environment.
> 
> .S3method is the one that always uses the defining environment, since it has no way to override the default.
> 
> Duncan Murdoch
> 
>> - if (typeof(genfun) == "closure?)
>> -            environment(genfun)
>> ------------
>> + if (typeof(genfun) == "closure?)
>> + if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun))
>> in order to match the behavior of do_usemethod()
>> Best,
>> Taras
>>> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>>> 
>>> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
>>> 
>>> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
>>> 
>>> 
>>> if(lookup_use_topenv_as_defenv == -1) {
>>> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
>>> 	lookup_use_topenv_as_defenv =
>>> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>>> }
>>> 
>>> Isn?t that supposed to be
>>> 
>>> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
>>> 
>>> instead?
>>> 
>>> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected.
>>> 
>>> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
>>> 
>>> I can open a bug report, but I would like to wait for some more comments.
>>> 
>>> Best,
>>> 
>>> Taras
>>> 
>>>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>>> 
>>>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>> 
>>>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>>>> Dear all,
>>>>>> 
>>>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>>> 
>>>>>>   env <- local({
>>>>>>     # define the generic function and the method
>>>>>>     myfun <- function(x) UseMethod("myfun")
>>>>>>     myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>>> 
>>>>>>     # register the method
>>>>>>     .S3method("myfun", "myclass", myfun.myclass)
>>>>>> 
>>>>>>     environment()
>>>>>>  })
>>>>>> 
>>>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>>> 
>>>>>>   env$myfun(structure(0, class = "myclass?))
>>>>>> 
>>>>>> However, this results in a ?no applicable method" error.
>>>>>> 
>>>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>>> 
>>>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>>> 
>>>>>> Thank you in advance for any pointers!
>>>>>> 
>>>>> 
>>>>> registerS3method has an additional parameter "envir" which I believe
>>>>> would end up set to env in your code.  So this works:
>>>>> 
>>>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>>>> [1] "called myfun.myclass"
>>>>> 
>>>>> You could probably also call registerS3method with envir specified
>>>>> appropriately and get your original expression to work.
>>>>> 
>>>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>>>> me in Oct-2020, though I'm not sure what version of R I was using at
>>>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>>>> 3.x version.
>>>> 
>>>> env <- new.env()
>>>> local({
>>>>  # define the generic function and the method
>>>>  myfun <- function(x) { UseMethod("myfun", x) }
>>>> 
>>>>  # register the method
>>>>  registerS3method("myfun", "myclass",
>>>>      function(x) { print("called myfun.myclass") },
>>>>      envir = env)
>>>> }, envir = env)
>>>> attach(env)
>>>> myfun(structure(0, class = "myclass"))
>>>> 
>>>> 
>>>>> Duncan Murdoch
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> 
>>>> 
>>>> -- 
>>>> Joshua Ulrich  |  about.me/joshuaulrich
>>>> FOSS Trading  |  www.fosstrading.com
>>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 30 14:16:24 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 30 Jun 2021 08:16:24 -0400
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <07BE0CBA-820F-4549-B0B2-BC8C5BD07778@uzh.ch>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
 <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
 <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>
 <07BE0CBA-820F-4549-B0B2-BC8C5BD07778@uzh.ch>
Message-ID: <6e827376-b965-fddb-67a6-09c755347d34@gmail.com>

On 30/06/2021 7:37 a.m., Taras Zakharko wrote:
> Thats not how I read the code? Consider this snippet from registerS3method:
> 
> genfun <- get(genname, envir = envir)
>          if (.isMethodsDispatchOn() && methods::is(genfun, "genericFunction"))
>              genfun <- methods::finalDefaultMethod(genfun at default)
>          if (typeof(genfun) == "closure")
>              environment(genfun)
>          else .BaseNamespaceEnv
> 
> This is the environment where the method cache (.__S3MethodsTable__.) will be updated. The problem hoverer, the with the default setting of _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ this is *not* the environment where R will look for the method cache. Manually injecting the entry into the method cache of the top environment instead works like a charm.
> 
> The envir argument is just for looking up the generic function.

Yes, I think you're right:  the method is registered in the environment 
of the generic.  I think by default it is searched for in the topenv() 
of that environment.

In most cases those are the same thing, but in your code they aren't the 
same:  the topenv is the global environment.

So I think I'd agree this is a bug.  I'd say the bug is in 
registerS3method, which should pay attention to the 
_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ setting when it computes defenv.

Here's a workaround that copies methods to the appropriate place:

fixS3registrations <- function(genericname, envir = parent.frame()) {
   generic <- get(genericname, envir=envir)
   genenv <- environment(generic)
   top <- topenv(genenv)

   if (!identical(genenv, top)) {
     toptable <- top[[".__S3MethodsTable__."]]
     if (is.null(toptable)) {
       toptable <- new.env(hash = TRUE, parent = baseenv())
       top[[".__S3MethodsTable__."]] <- toptable
     }
     table <- genenv[[".__S3MethodsTable__."]]
     if (!is.null(table)) {
       methodnames <- ls(table, pattern = paste0(genericname, "[.][^.]*$"))
       for (m in methodnames)
         toptable[[m]] <- table[[m]]
     }
   }
}

env <- local({
   # define the generic function and the method
   myfun <- function(x) UseMethod("myfun")
   myfun.myclass <- function(x) print("called myfun.myclass")

      # register the method
      .S3method("myfun", "myclass", myfun.myclass)
      fixS3registrations("myfun")

      environment()
   })

env$myfun(structure(0, class = "myclass"))
#> [1] "called myfun.myclass"


Duncan Murdoch

> 
> Best,
> 
> Taras
> 
> 
> 
>> On 30 Jun 2021, at 13:29, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 30/06/2021 7:23 a.m., Taras Zakharko wrote:
>>> I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:
>>
>> It registers wherever you ask it to.  The default is the defining environment.
>>
>> .S3method is the one that always uses the defining environment, since it has no way to override the default.
>>
>> Duncan Murdoch
>>
>>> - if (typeof(genfun) == "closure?)
>>> -            environment(genfun)
>>> ------------
>>> + if (typeof(genfun) == "closure?)
>>> + if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun))
>>> in order to match the behavior of do_usemethod()
>>> Best,
>>> Taras
>>>> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>>>>
>>>> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
>>>>
>>>> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
>>>>
>>>>
>>>> if(lookup_use_topenv_as_defenv == -1) {
>>>> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
>>>> 	lookup_use_topenv_as_defenv =
>>>> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>>>> }
>>>>
>>>> Isn?t that supposed to be
>>>>
>>>> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
>>>>
>>>> instead?
>>>>
>>>> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected.
>>>>
>>>> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
>>>>
>>>> I can open a bug report, but I would like to wait for some more comments.
>>>>
>>>> Best,
>>>>
>>>> Taras
>>>>
>>>>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>>>>
>>>>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>>>
>>>>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>>>>> Dear all,
>>>>>>>
>>>>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>>>>
>>>>>>>    env <- local({
>>>>>>>      # define the generic function and the method
>>>>>>>      myfun <- function(x) UseMethod("myfun")
>>>>>>>      myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>>>>
>>>>>>>      # register the method
>>>>>>>      .S3method("myfun", "myclass", myfun.myclass)
>>>>>>>
>>>>>>>      environment()
>>>>>>>   })
>>>>>>>
>>>>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>>>>
>>>>>>>    env$myfun(structure(0, class = "myclass?))
>>>>>>>
>>>>>>> However, this results in a ?no applicable method" error.
>>>>>>>
>>>>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>>>>
>>>>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>>>>
>>>>>>> Thank you in advance for any pointers!
>>>>>>>
>>>>>>
>>>>>> registerS3method has an additional parameter "envir" which I believe
>>>>>> would end up set to env in your code.  So this works:
>>>>>>
>>>>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>>>>> [1] "called myfun.myclass"
>>>>>>
>>>>>> You could probably also call registerS3method with envir specified
>>>>>> appropriately and get your original expression to work.
>>>>>>
>>>>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>>>>> me in Oct-2020, though I'm not sure what version of R I was using at
>>>>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>>>>> 3.x version.
>>>>>
>>>>> env <- new.env()
>>>>> local({
>>>>>   # define the generic function and the method
>>>>>   myfun <- function(x) { UseMethod("myfun", x) }
>>>>>
>>>>>   # register the method
>>>>>   registerS3method("myfun", "myclass",
>>>>>       function(x) { print("called myfun.myclass") },
>>>>>       envir = env)
>>>>> }, envir = env)
>>>>> attach(env)
>>>>> myfun(structure(0, class = "myclass"))
>>>>>
>>>>>
>>>>>> Duncan Murdoch
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>>
>>>>>
>>>>> -- 
>>>>> Joshua Ulrich  |  about.me/joshuaulrich
>>>>> FOSS Trading  |  www.fosstrading.com
>>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Jun 30 15:20:07 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 30 Jun 2021 15:20:07 +0200
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <6e827376-b965-fddb-67a6-09c755347d34@gmail.com>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
 <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
 <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>
 <07BE0CBA-820F-4549-B0B2-BC8C5BD07778@uzh.ch>
 <6e827376-b965-fddb-67a6-09c755347d34@gmail.com>
Message-ID: <5A2CBA55-A19F-476F-B2E0-7CB568E70CAD@uzh.ch>

Thanks Duncan, I will submit a bug report to R core then. 

Best, 

Taras

> On 30 Jun 2021, at 14:16, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 30/06/2021 7:37 a.m., Taras Zakharko wrote:
>> Thats not how I read the code? Consider this snippet from registerS3method:
>> genfun <- get(genname, envir = envir)
>>         if (.isMethodsDispatchOn() && methods::is(genfun, "genericFunction"))
>>             genfun <- methods::finalDefaultMethod(genfun at default)
>>         if (typeof(genfun) == "closure")
>>             environment(genfun)
>>         else .BaseNamespaceEnv
>> This is the environment where the method cache (.__S3MethodsTable__.) will be updated. The problem hoverer, the with the default setting of _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ this is *not* the environment where R will look for the method cache. Manually injecting the entry into the method cache of the top environment instead works like a charm.
>> The envir argument is just for looking up the generic function.
> 
> Yes, I think you're right:  the method is registered in the environment of the generic.  I think by default it is searched for in the topenv() of that environment.
> 
> In most cases those are the same thing, but in your code they aren't the same:  the topenv is the global environment.
> 
> So I think I'd agree this is a bug.  I'd say the bug is in registerS3method, which should pay attention to the _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ setting when it computes defenv.
> 
> Here's a workaround that copies methods to the appropriate place:
> 
> fixS3registrations <- function(genericname, envir = parent.frame()) {
>  generic <- get(genericname, envir=envir)
>  genenv <- environment(generic)
>  top <- topenv(genenv)
> 
>  if (!identical(genenv, top)) {
>    toptable <- top[[".__S3MethodsTable__."]]
>    if (is.null(toptable)) {
>      toptable <- new.env(hash = TRUE, parent = baseenv())
>      top[[".__S3MethodsTable__."]] <- toptable
>    }
>    table <- genenv[[".__S3MethodsTable__."]]
>    if (!is.null(table)) {
>      methodnames <- ls(table, pattern = paste0(genericname, "[.][^.]*$"))
>      for (m in methodnames)
>        toptable[[m]] <- table[[m]]
>    }
>  }
> }
> 
> env <- local({
>  # define the generic function and the method
>  myfun <- function(x) UseMethod("myfun")
>  myfun.myclass <- function(x) print("called myfun.myclass")
> 
>     # register the method
>     .S3method("myfun", "myclass", myfun.myclass)
>     fixS3registrations("myfun")
> 
>     environment()
>  })
> 
> env$myfun(structure(0, class = "myclass"))
> #> [1] "called myfun.myclass"
> 
> 
> Duncan Murdoch
> 
>> Best,
>> Taras
>>> On 30 Jun 2021, at 13:29, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 30/06/2021 7:23 a.m., Taras Zakharko wrote:
>>>> I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:
>>> 
>>> It registers wherever you ask it to.  The default is the defining environment.
>>> 
>>> .S3method is the one that always uses the defining environment, since it has no way to override the default.
>>> 
>>> Duncan Murdoch
>>> 
>>>> - if (typeof(genfun) == "closure?)
>>>> -            environment(genfun)
>>>> ------------
>>>> + if (typeof(genfun) == "closure?)
>>>> + if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun))
>>>> in order to match the behavior of do_usemethod()
>>>> Best,
>>>> Taras
>>>>> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>>>>> 
>>>>> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
>>>>> 
>>>>> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
>>>>> 
>>>>> 
>>>>> if(lookup_use_topenv_as_defenv == -1) {
>>>>> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
>>>>> 	lookup_use_topenv_as_defenv =
>>>>> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>>>>> }
>>>>> 
>>>>> Isn?t that supposed to be
>>>>> 
>>>>> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
>>>>> 
>>>>> instead?
>>>>> 
>>>>> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected.
>>>>> 
>>>>> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
>>>>> 
>>>>> I can open a bug report, but I would like to wait for some more comments.
>>>>> 
>>>>> Best,
>>>>> 
>>>>> Taras
>>>>> 
>>>>>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>>>>> 
>>>>>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>>>> 
>>>>>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>>>>>> Dear all,
>>>>>>>> 
>>>>>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>>>>> 
>>>>>>>>   env <- local({
>>>>>>>>     # define the generic function and the method
>>>>>>>>     myfun <- function(x) UseMethod("myfun")
>>>>>>>>     myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>>>>> 
>>>>>>>>     # register the method
>>>>>>>>     .S3method("myfun", "myclass", myfun.myclass)
>>>>>>>> 
>>>>>>>>     environment()
>>>>>>>>  })
>>>>>>>> 
>>>>>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>>>>> 
>>>>>>>>   env$myfun(structure(0, class = "myclass?))
>>>>>>>> 
>>>>>>>> However, this results in a ?no applicable method" error.
>>>>>>>> 
>>>>>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>>>>> 
>>>>>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>>>>> 
>>>>>>>> Thank you in advance for any pointers!
>>>>>>>> 
>>>>>>> 
>>>>>>> registerS3method has an additional parameter "envir" which I believe
>>>>>>> would end up set to env in your code.  So this works:
>>>>>>> 
>>>>>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>>>>>> [1] "called myfun.myclass"
>>>>>>> 
>>>>>>> You could probably also call registerS3method with envir specified
>>>>>>> appropriately and get your original expression to work.
>>>>>>> 
>>>>>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>>>>>> me in Oct-2020, though I'm not sure what version of R I was using at
>>>>>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>>>>>> 3.x version.
>>>>>> 
>>>>>> env <- new.env()
>>>>>> local({
>>>>>>  # define the generic function and the method
>>>>>>  myfun <- function(x) { UseMethod("myfun", x) }
>>>>>> 
>>>>>>  # register the method
>>>>>>  registerS3method("myfun", "myclass",
>>>>>>      function(x) { print("called myfun.myclass") },
>>>>>>      envir = env)
>>>>>> }, envir = env)
>>>>>> attach(env)
>>>>>> myfun(structure(0, class = "myclass"))
>>>>>> 
>>>>>> 
>>>>>>> Duncan Murdoch
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> -- 
>>>>>> Joshua Ulrich  |  about.me/joshuaulrich
>>>>>> FOSS Trading  |  www.fosstrading.com
>>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 30 17:38:05 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 30 Jun 2021 11:38:05 -0400
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <5A2CBA55-A19F-476F-B2E0-7CB568E70CAD@uzh.ch>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
 <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
 <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>
 <07BE0CBA-820F-4549-B0B2-BC8C5BD07778@uzh.ch>
 <6e827376-b965-fddb-67a6-09c755347d34@gmail.com>
 <5A2CBA55-A19F-476F-B2E0-7CB568E70CAD@uzh.ch>
Message-ID: <23650700-6076-014e-ffed-141ab98bc7e8@gmail.com>

One error in my workaround:  it also ignores 
_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_.  If that evaluates to FALSE, 
it shouldn't need to make any changes.

Duncan Murdoch

On 30/06/2021 9:20 a.m., Taras Zakharko wrote:
> Thanks Duncan, I will submit a bug report to R core then.
> 
> Best,
> 
> Taras
> 
>> On 30 Jun 2021, at 14:16, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 30/06/2021 7:37 a.m., Taras Zakharko wrote:
>>> Thats not how I read the code? Consider this snippet from registerS3method:
>>> genfun <- get(genname, envir = envir)
>>>          if (.isMethodsDispatchOn() && methods::is(genfun, "genericFunction"))
>>>              genfun <- methods::finalDefaultMethod(genfun at default)
>>>          if (typeof(genfun) == "closure")
>>>              environment(genfun)
>>>          else .BaseNamespaceEnv
>>> This is the environment where the method cache (.__S3MethodsTable__.) will be updated. The problem hoverer, the with the default setting of _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ this is *not* the environment where R will look for the method cache. Manually injecting the entry into the method cache of the top environment instead works like a charm.
>>> The envir argument is just for looking up the generic function.
>>
>> Yes, I think you're right:  the method is registered in the environment of the generic.  I think by default it is searched for in the topenv() of that environment.
>>
>> In most cases those are the same thing, but in your code they aren't the same:  the topenv is the global environment.
>>
>> So I think I'd agree this is a bug.  I'd say the bug is in registerS3method, which should pay attention to the _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ setting when it computes defenv.
>>
>> Here's a workaround that copies methods to the appropriate place:
>>
>> fixS3registrations <- function(genericname, envir = parent.frame()) {
>>   generic <- get(genericname, envir=envir)
>>   genenv <- environment(generic)
>>   top <- topenv(genenv)
>>
>>   if (!identical(genenv, top)) {
>>     toptable <- top[[".__S3MethodsTable__."]]
>>     if (is.null(toptable)) {
>>       toptable <- new.env(hash = TRUE, parent = baseenv())
>>       top[[".__S3MethodsTable__."]] <- toptable
>>     }
>>     table <- genenv[[".__S3MethodsTable__."]]
>>     if (!is.null(table)) {
>>       methodnames <- ls(table, pattern = paste0(genericname, "[.][^.]*$"))
>>       for (m in methodnames)
>>         toptable[[m]] <- table[[m]]
>>     }
>>   }
>> }
>>
>> env <- local({
>>   # define the generic function and the method
>>   myfun <- function(x) UseMethod("myfun")
>>   myfun.myclass <- function(x) print("called myfun.myclass")
>>
>>      # register the method
>>      .S3method("myfun", "myclass", myfun.myclass)
>>      fixS3registrations("myfun")
>>
>>      environment()
>>   })
>>
>> env$myfun(structure(0, class = "myclass"))
>> #> [1] "called myfun.myclass"
>>
>>
>> Duncan Murdoch
>>
>>> Best,
>>> Taras
>>>> On 30 Jun 2021, at 13:29, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>
>>>> On 30/06/2021 7:23 a.m., Taras Zakharko wrote:
>>>>> I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:
>>>>
>>>> It registers wherever you ask it to.  The default is the defining environment.
>>>>
>>>> .S3method is the one that always uses the defining environment, since it has no way to override the default.
>>>>
>>>> Duncan Murdoch
>>>>
>>>>> - if (typeof(genfun) == "closure?)
>>>>> -            environment(genfun)
>>>>> ------------
>>>>> + if (typeof(genfun) == "closure?)
>>>>> + if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun))
>>>>> in order to match the behavior of do_usemethod()
>>>>> Best,
>>>>> Taras
>>>>>> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>>>>>>
>>>>>> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
>>>>>>
>>>>>> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
>>>>>>
>>>>>>
>>>>>> if(lookup_use_topenv_as_defenv == -1) {
>>>>>> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
>>>>>> 	lookup_use_topenv_as_defenv =
>>>>>> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>>>>>> }
>>>>>>
>>>>>> Isn?t that supposed to be
>>>>>>
>>>>>> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
>>>>>>
>>>>>> instead?
>>>>>>
>>>>>> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected.
>>>>>>
>>>>>> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
>>>>>>
>>>>>> I can open a bug report, but I would like to wait for some more comments.
>>>>>>
>>>>>> Best,
>>>>>>
>>>>>> Taras
>>>>>>
>>>>>>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>>>>>>
>>>>>>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>>>>>
>>>>>>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>>>>>>> Dear all,
>>>>>>>>>
>>>>>>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>>>>>>
>>>>>>>>>    env <- local({
>>>>>>>>>      # define the generic function and the method
>>>>>>>>>      myfun <- function(x) UseMethod("myfun")
>>>>>>>>>      myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>>>>>>
>>>>>>>>>      # register the method
>>>>>>>>>      .S3method("myfun", "myclass", myfun.myclass)
>>>>>>>>>
>>>>>>>>>      environment()
>>>>>>>>>   })
>>>>>>>>>
>>>>>>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>>>>>>
>>>>>>>>>    env$myfun(structure(0, class = "myclass?))
>>>>>>>>>
>>>>>>>>> However, this results in a ?no applicable method" error.
>>>>>>>>>
>>>>>>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>>>>>>
>>>>>>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>>>>>>
>>>>>>>>> Thank you in advance for any pointers!
>>>>>>>>>
>>>>>>>>
>>>>>>>> registerS3method has an additional parameter "envir" which I believe
>>>>>>>> would end up set to env in your code.  So this works:
>>>>>>>>
>>>>>>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>>>>>>> [1] "called myfun.myclass"
>>>>>>>>
>>>>>>>> You could probably also call registerS3method with envir specified
>>>>>>>> appropriately and get your original expression to work.
>>>>>>>>
>>>>>>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>>>>>>> me in Oct-2020, though I'm not sure what version of R I was using at
>>>>>>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>>>>>>> 3.x version.
>>>>>>>
>>>>>>> env <- new.env()
>>>>>>> local({
>>>>>>>   # define the generic function and the method
>>>>>>>   myfun <- function(x) { UseMethod("myfun", x) }
>>>>>>>
>>>>>>>   # register the method
>>>>>>>   registerS3method("myfun", "myclass",
>>>>>>>       function(x) { print("called myfun.myclass") },
>>>>>>>       envir = env)
>>>>>>> }, envir = env)
>>>>>>> attach(env)
>>>>>>> myfun(structure(0, class = "myclass"))
>>>>>>>
>>>>>>>
>>>>>>>> Duncan Murdoch
>>>>>>>>
>>>>>>>> ______________________________________________
>>>>>>>> R-devel at r-project.org mailing list
>>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> -- 
>>>>>>> Joshua Ulrich  |  about.me/joshuaulrich
>>>>>>> FOSS Trading  |  www.fosstrading.com
>>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Jun 30 17:43:13 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 30 Jun 2021 17:43:13 +0200
Subject: [Rd] S3 dispatch does not work for generics defined inside an
 environment
In-Reply-To: <23650700-6076-014e-ffed-141ab98bc7e8@gmail.com>
References: <08D56DDA-856D-4F1F-A7DE-FA9EFDFFB9FC@uzh.ch>
 <a0ea9ceb-df58-f347-0715-d0d8f077cee0@gmail.com>
 <CAPPM_gSNVFAvF++dGZQ2gdEy=HyD4tapg+NezzW0E0qdv_VCpw@mail.gmail.com>
 <0AA15477-877C-427E-AEEF-1B606E6BE511@uzh.ch>
 <14DD2EF6-3509-4A50-AF57-B40164AED829@uzh.ch>
 <6114e87b-bee6-2d0e-8aec-cc60ef9e60c0@gmail.com>
 <07BE0CBA-820F-4549-B0B2-BC8C5BD07778@uzh.ch>
 <6e827376-b965-fddb-67a6-09c755347d34@gmail.com>
 <5A2CBA55-A19F-476F-B2E0-7CB568E70CAD@uzh.ch>
 <23650700-6076-014e-ffed-141ab98bc7e8@gmail.com>
Message-ID: <7002175E-46FA-40B0-9B91-995CB5BC1E0F@uzh.ch>

I have opened a bug report here:

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=18138

Regarding _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_? maybe it?s a good time to consider purging it alltogether? This behavior appears to be completely undocumented and this variable is mentioned exactly two times in the R source code. Interestingly enough, utils::.defenv_for_S3_registry does consider it. 

Best, 

Taras

> On 30 Jun 2021, at 17:38, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> One error in my workaround:  it also ignores _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_.  If that evaluates to FALSE, it shouldn't need to make any changes.
> 
> Duncan Murdoch
> 
> On 30/06/2021 9:20 a.m., Taras Zakharko wrote:
>> Thanks Duncan, I will submit a bug report to R core then.
>> Best,
>> Taras
>>> On 30 Jun 2021, at 14:16, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 30/06/2021 7:37 a.m., Taras Zakharko wrote:
>>>> Thats not how I read the code? Consider this snippet from registerS3method:
>>>> genfun <- get(genname, envir = envir)
>>>>         if (.isMethodsDispatchOn() && methods::is(genfun, "genericFunction"))
>>>>             genfun <- methods::finalDefaultMethod(genfun at default)
>>>>         if (typeof(genfun) == "closure")
>>>>             environment(genfun)
>>>>         else .BaseNamespaceEnv
>>>> This is the environment where the method cache (.__S3MethodsTable__.) will be updated. The problem hoverer, the with the default setting of _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ this is *not* the environment where R will look for the method cache. Manually injecting the entry into the method cache of the top environment instead works like a charm.
>>>> The envir argument is just for looking up the generic function.
>>> 
>>> Yes, I think you're right:  the method is registered in the environment of the generic.  I think by default it is searched for in the topenv() of that environment.
>>> 
>>> In most cases those are the same thing, but in your code they aren't the same:  the topenv is the global environment.
>>> 
>>> So I think I'd agree this is a bug.  I'd say the bug is in registerS3method, which should pay attention to the _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ setting when it computes defenv.
>>> 
>>> Here's a workaround that copies methods to the appropriate place:
>>> 
>>> fixS3registrations <- function(genericname, envir = parent.frame()) {
>>>  generic <- get(genericname, envir=envir)
>>>  genenv <- environment(generic)
>>>  top <- topenv(genenv)
>>> 
>>>  if (!identical(genenv, top)) {
>>>    toptable <- top[[".__S3MethodsTable__."]]
>>>    if (is.null(toptable)) {
>>>      toptable <- new.env(hash = TRUE, parent = baseenv())
>>>      top[[".__S3MethodsTable__."]] <- toptable
>>>    }
>>>    table <- genenv[[".__S3MethodsTable__."]]
>>>    if (!is.null(table)) {
>>>      methodnames <- ls(table, pattern = paste0(genericname, "[.][^.]*$"))
>>>      for (m in methodnames)
>>>        toptable[[m]] <- table[[m]]
>>>    }
>>>  }
>>> }
>>> 
>>> env <- local({
>>>  # define the generic function and the method
>>>  myfun <- function(x) UseMethod("myfun")
>>>  myfun.myclass <- function(x) print("called myfun.myclass")
>>> 
>>>     # register the method
>>>     .S3method("myfun", "myclass", myfun.myclass)
>>>     fixS3registrations("myfun")
>>> 
>>>     environment()
>>>  })
>>> 
>>> env$myfun(structure(0, class = "myclass"))
>>> #> [1] "called myfun.myclass"
>>> 
>>> 
>>> Duncan Murdoch
>>> 
>>>> Best,
>>>> Taras
>>>>> On 30 Jun 2021, at 13:29, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>> 
>>>>> On 30/06/2021 7:23 a.m., Taras Zakharko wrote:
>>>>>> I had another glance at the code and now I?m convinced that this is the bug in registerS3method(). Default R behavior (in objects.c) appears to be to look for method definitions in the top environment, not the defining environment, but registerS3method() registers the method in the defining environment. I think registerS3method() should be changed to something like:
>>>>> 
>>>>> It registers wherever you ask it to.  The default is the defining environment.
>>>>> 
>>>>> .S3method is the one that always uses the defining environment, since it has no way to override the default.
>>>>> 
>>>>> Duncan Murdoch
>>>>> 
>>>>>> - if (typeof(genfun) == "closure?)
>>>>>> -            environment(genfun)
>>>>>> ------------
>>>>>> + if (typeof(genfun) == "closure?)
>>>>>> + if(isFALSE(Sys.getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_?))  environment(genfun) else topenv(environment(genfun))
>>>>>> in order to match the behavior of do_usemethod()
>>>>>> Best,
>>>>>> Taras
>>>>>>> On 30 Jun 2021, at 12:51, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>>>>>>> 
>>>>>>> @Duncan: .S3method() calls registerS3method() with appropriate environmental argument under the good, so that?s not the problem.
>>>>>>> 
>>>>>>> Anyway, I?ve been doing some debugging and I think I have found the issue. The following snippet in src/objects.c (https://github.com/wch/r-source/blob/ecc633b37d77fdd1cb27dda74d7f6b3684f0c01c/src/main/objects.c#L525) sets the global lookup_use_topenv_as_defenv variable:
>>>>>>> 
>>>>>>> 
>>>>>>> if(lookup_use_topenv_as_defenv == -1) {
>>>>>>> 	lookup = getenv("_R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_");
>>>>>>> 	lookup_use_topenv_as_defenv =
>>>>>>> 	    ((lookup != NULL) && StringFalse(lookup)) ? 0 : 1;
>>>>>>> }
>>>>>>> 
>>>>>>> Isn?t that supposed to be
>>>>>>> 
>>>>>>> 	lookup_use_topenv_as_defenv =  ((lookup != NULL) && StringFalse(lookup)) ? 1 : 0;
>>>>>>> 
>>>>>>> instead?
>>>>>>> 
>>>>>>> The way the code works right now, methods will be looked up in top environment exactly if _R_S3_METHOD_LOOKUP_USE_TOPENV_AS_DEFENV_ is not set. This seems incompatible with what registerS3method() does (setting the .__S3MethodsTable__. on the defining environment instead of the topenv). When I change 0 and 1 around, everything works as expected.
>>>>>>> 
>>>>>>> In the meantime, I can work around it by manually injecting __S3MethodsTable__ into .GlobalEnv (which is my topenv here).
>>>>>>> 
>>>>>>> I can open a bug report, but I would like to wait for some more comments.
>>>>>>> 
>>>>>>> Best,
>>>>>>> 
>>>>>>> Taras
>>>>>>> 
>>>>>>>> On 30 Jun 2021, at 12:39, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>>>>>>> 
>>>>>>>> On Wed, Jun 30, 2021 at 5:17 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>>>>>> 
>>>>>>>>> On 30/06/2021 5:22 a.m., Taras Zakharko wrote:
>>>>>>>>>> Dear all,
>>>>>>>>>> 
>>>>>>>>>> I have a generic function and a bunch of methods defined in a separate environment. Here is a reduced example:
>>>>>>>>>> 
>>>>>>>>>>   env <- local({
>>>>>>>>>>     # define the generic function and the method
>>>>>>>>>>     myfun <- function(x) UseMethod("myfun")
>>>>>>>>>>     myfun.myclass <- function(x) print("called myfun.myclass?)
>>>>>>>>>> 
>>>>>>>>>>     # register the method
>>>>>>>>>>     .S3method("myfun", "myclass", myfun.myclass)
>>>>>>>>>> 
>>>>>>>>>>     environment()
>>>>>>>>>>  })
>>>>>>>>>> 
>>>>>>>>>> Since the method has been registered, I hoped that invocation like this would work:
>>>>>>>>>> 
>>>>>>>>>>   env$myfun(structure(0, class = "myclass?))
>>>>>>>>>> 
>>>>>>>>>> However, this results in a ?no applicable method" error.
>>>>>>>>>> 
>>>>>>>>>> It is my understanding that registerS3method (called by .S3method) will install the method string in the .__S3MethodsTable__. table of the environment where the generic function is defined, and this table is subsequently used by usemethod() inside R, so I am puzzled that the dispatch does not work. I checked and the  .__S3MethodsTable__. of env is indeed setup correctly. I also tried manually adding the method string to the global .__S3MethodsTable__. inside .BaseNamespaceEnv to no effect.
>>>>>>>>>> 
>>>>>>>>>> In fact, the only way to make it work is to define either myfun or  myfun.myclas in the global environment, which is something I would like to avoid.
>>>>>>>>>> 
>>>>>>>>>> Thank you in advance for any pointers!
>>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> registerS3method has an additional parameter "envir" which I believe
>>>>>>>>> would end up set to env in your code.  So this works:
>>>>>>>>> 
>>>>>>>>>> eval(expression(myfun(structure(0, class = "myclass"))), envir = env)
>>>>>>>>> [1] "called myfun.myclass"
>>>>>>>>> 
>>>>>>>>> You could probably also call registerS3method with envir specified
>>>>>>>>> appropriately and get your original expression to work.
>>>>>>>>> 
>>>>>>>> That doesn't seem to work on 4.1.0 for me. The code below worked for
>>>>>>>> me in Oct-2020, though I'm not sure what version of R I was using at
>>>>>>>> the time. I was slow to upgrade to 4.0, so it was probably the latest
>>>>>>>> 3.x version.
>>>>>>>> 
>>>>>>>> env <- new.env()
>>>>>>>> local({
>>>>>>>>  # define the generic function and the method
>>>>>>>>  myfun <- function(x) { UseMethod("myfun", x) }
>>>>>>>> 
>>>>>>>>  # register the method
>>>>>>>>  registerS3method("myfun", "myclass",
>>>>>>>>      function(x) { print("called myfun.myclass") },
>>>>>>>>      envir = env)
>>>>>>>> }, envir = env)
>>>>>>>> attach(env)
>>>>>>>> myfun(structure(0, class = "myclass"))
>>>>>>>> 
>>>>>>>> 
>>>>>>>>> Duncan Murdoch
>>>>>>>>> 
>>>>>>>>> ______________________________________________
>>>>>>>>> R-devel at r-project.org mailing list
>>>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>>> 
>>>>>>>> 
>>>>>>>> 
>>>>>>>> -- 
>>>>>>>> Joshua Ulrich  |  about.me/joshuaulrich
>>>>>>>> FOSS Trading  |  www.fosstrading.com
>>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
> 


From S@E|||@on @end|ng |rom LGCGroup@com  Wed Jun 30 23:15:03 2021
From: S@E|||@on @end|ng |rom LGCGroup@com (Stephen Ellison)
Date: Wed, 30 Jun 2021 21:15:03 +0000
Subject: [Rd] On read.csv and write.csv
Message-ID: <CWXP265MB3208A3DC3EE8F8E8489E258B81019@CWXP265MB3208.GBRP265.PROD.OUTLOOK.COM>

Apologies if this is a well-worn question; I haven?t found it so far but there's a lot of r-dev and I may have missed it in the archives. In the mean time:

I've managed to avoid writing csv files with R for a couple of decades but we're swopping data with a collaborator and I've tripped over an inconsistency between read.csv and write.csv that seems less than helpful.
The default line number behaviour for read.csv is to assume that, when the number of items in the first row is one less than the number in the second, that the first column contains row names. write.csv, however, includes an empty string ("") as the first header entry over row names when writing. On rereading, the original row names are then treated as data with unknown name, replaced by "X".

That means that, unlike read.table and write.table,  something written with write.csv is not read back correctly by read.csv .

Is that intentional?
And whether it is intentional or not, is it wise?

Example:

( D1 <- data.frame(A=letters[1:5], N=1:5, Y=rnorm(5) ) )
write.csv(D1, "temp.csv")

( D1w <- read.csv("temp.csv") )

# Note the unnecessary new X column ...
#Tidy up
unlink("temp.csv")

This differs from the parent .table defaults; write.table doesn?t add the extra "" column label, so the object read back with read.table does not contain an unwanted extra column.

Wouldn?t it be more sensible if write.csv() and read.csv() were consistent in the same sense as read.table and write.table?
Or at least if there were a switch (as.read.csv=TRUE ?) to tell write.csv to omit the initial "", or vice versa?

Currently using R version 4.1.0 on Windows, but this reproduces at least as far back as 3.6 

Steve E


*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

