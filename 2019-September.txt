From @purd|e@@ @end|ng |rom gm@||@com  Sun Sep  1 04:59:59 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sun, 1 Sep 2019 14:59:59 +1200
Subject: [Rd] inconsistent handling of factor, character,
 and logical predictors in lm()
In-Reply-To: <6E6A225D-E514-4980-A454-1BD2D77FC04B@mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC836CF0E5B@FHSDB2D11-2.csu.mcmaster.ca>
 <CAB8pepxHcs6gzhkCQsHZh1ZUmPSXPQyTkYs=K+fmK=M1Zicr3Q@mail.gmail.com>
 <6E6A225D-E514-4980-A454-1BD2D77FC04B@mcmaster.ca>
Message-ID: <CAB8pepwM9fAuQB2S_ZkB3RBCkGLa2Ej1G8qsAO7u6hg5DgkfHQ@mail.gmail.com>

> I think that this misses the point I was trying to make: lm() et al. treat logical variables as factors, not as numerical predictors.

I'm unenthusiastic about mapping TRUE to -1 and FALSE to 1, in the model matrix.
(I nearly got that back the front).

However, I've decided to agree with your original suggestion,
regarding $xlevels.
I think it should include the logical levels, if that's the right term...

However, I note that the output still won't be completely consistent.
Because one case leads to a logical vector and the other cases lead to
character vectors.


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Sep  2 10:34:35 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 2 Sep 2019 10:34:35 +0200
Subject: [Rd] New lazyload rdx key type: list(eagerKey=, lazyKeys=)
In-Reply-To: <CAF8bMcZ7RXPqcNZRXwzVsXNJcvEGiBHgDiOLjNGWod7a-x4kRQ@mail.gmail.com>
References: <CAF8bMcZ7RXPqcNZRXwzVsXNJcvEGiBHgDiOLjNGWod7a-x4kRQ@mail.gmail.com>
Message-ID: <cec16ed8-eeeb-45d7-743c-ee747e4f37aa@gmail.com>

On 8/31/19 12:35 AM, William Dunlap via R-devel wrote:
> Prior to R-3.6.0 the keys in the lazyload key files, e.g.
> pkg/data/Rdata.rdx or pkg/R/pkg.rdx, seemed to all be 2-long integer
> vectors.  Now they can be lists.  The ones I have seen have two components,
> "eagerKey" is a 2-long integer vector and "lazyKeys" is a named list of
> 2-long integer vectors.
>
>> rdx <- readRDS(system.file(package="survival", "data", "Rdata.rdx"))
>> str(Filter(is.list, rdx$references))
> List of 2
>   $ env::1:List of 2
>    ..$ eagerKey: int [1:2] 273691 183
>    ..$ lazyKeys:List of 1
>    .. ..$ lines: int [1:2] 273874 284
>   $ env::2:List of 2
>    ..$ eagerKey: int [1:2] 473142 166
>    ..$ lazyKeys:List of 1
>    .. ..$ lines: int [1:2] 473308 310
>
> or
>
>>   rdx <- readRDS(system.file(package="lambda.r", "R", "lambda.r.rdx"))
>> length(Filter(is.integer, rdx$references))
> [1] 4
>> str(Filter(Negate(is.integer), rdx$references))
> List of 5
>   $ env::5:List of 2
>    ..$ eagerKey: int [1:2] 28278 328
>    ..$ lazyKeys:List of 2
>    .. ..$ lines    : int [1:2] 28606 80
>    .. ..$ parseData: int [1:2] 28686 389
>   $ env::6:List of 2
>    ..$ eagerKey: int [1:2] 29075 327
>    ..$ lazyKeys:List of 2
>    .. ..$ lines    : int [1:2] 29402 71
>    .. ..$ parseData: int [1:2] 29473 321
>   $ env::7:List of 2
>    ..$ eagerKey: int [1:2] 29794 325
>    ..$ lazyKeys:List of 2
>    .. ..$ lines    : int [1:2] 30119 117
>    .. ..$ parseData: int [1:2] 30236 752
> ... many more ...
>
> All the ones I've seen involve the environment in srcref attributes and
> most packages do not keep that.  Will these be used for more sorts of
> environments in the future?

The new mechanism allows to load lazily selected bindings from an 
environment - previously only the bindings from the package/namespace 
environment were loaded lazily. The mechanism is currently used only for 
"lines" and "parseData" bindings of "srcfile" environments. Packages 
that include parse data will benefit from the latter and all packages 
that include source references will benefit from both. This change made 
it feasible to run package checks with source references enabled, so now 
one can get more useful error traces with execution time overhead 
reasonable for check runs.

The format of the lazy loading database is specific to R release, it can 
change at any time. Specifically this mechanism could be used for more 
environments, but I am not aware of any that would benefit at the moment.

> What is the meaning of the lazyKeys?  Are these stored as promises until
> needed or is there some special option to never or always load them?

Bindings listed in lazyKeys are treated the same way as bindings in the 
package/namespace environment, so they become promises after loading the 
environment. Those promises load the individual objects for the bindings 
when forced (details in makeLazyLoad.R and lazyLoad.R and now also 
explicitly in R-ints).

Best
Tomas

>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @nto|ne@|@br| @end|ng |rom gm@||@com  Mon Sep  2 11:40:34 2019
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Ant F)
Date: Mon, 2 Sep 2019 11:40:34 +0200
Subject: [Rd] rbind returns a zero row data frame when binding zero column
 data frames
Message-ID: <CAEKh8ugioHvK2iiYo4upFjU2DWZB_7Jg200DZmrDqE6Ok3fuVg@mail.gmail.com>

Dear all,

`rbind()` returns a zero row data frame when binding zero column data
frames, see example below:

``` r
# a data frame with 1 row and 0 column
x <- data.frame(row.names=1)
x
#> data frame with 0 columns and 1 row
rbind(x,x)
#> data frame with 0 columns and 0 rows
```

I would have expected in that case `data frame with 0 columns and 2 rows`.

`cbind()` on the other hand acts as I would expect, returning a 2 column
data frame from 2 one column data frames even if they have no row.

``` r
# a data frame with 0 row and 1 column
y <- data.frame(A = numeric(0))
y
#> [1] A
#> <0 rows> (or 0-length row.names)
cbind(y,y)
#> [1] A A
#> <0 rows> (or 0-length row.names)
```

	[[alternative HTML version deleted]]


From S@E|||@on @end|ng |rom LGCGroup@com  Mon Sep  2 15:33:37 2019
From: S@E|||@on @end|ng |rom LGCGroup@com (Stephen Ellison)
Date: Mon, 2 Sep 2019 13:33:37 +0000
Subject: [Rd] ?Syntax wrong about `?`'s precedence ?
In-Reply-To: <CAF8bMcYxu+iuKyDZeYbtczimd+1nGBO-VjbTjkv9Va-eBnUhKw@mail.gmail.com>
References: <CAEKh8ugXyz4cmkGrVDc6wxtwR6E9HbEiS3H9qVHzPF7OGyzZ2Q@mail.gmail.com>
 <7d4a921ac2594ecf83944eb594cbfe97@GBDCVPEXC08.corp.lgc-group.com>
 <CAF8bMcYxu+iuKyDZeYbtczimd+1nGBO-VjbTjkv9Va-eBnUhKw@mail.gmail.com>
Message-ID: <970c4046ed274d53893517da2709b947@GBDCVPEXC08.corp.lgc-group.com>

> From: William Dunlap [mailto:wdunlap at tibco.com]
> Precedence is a property of the parser and has nothing to do with the
> semantics assigned to various symbols.  

Yes, but output depends on evaluation as well as precedence.  Seeing different things wasn't an immediate surprise.

Your own parse() examples are much clearer; thanks for that.

S


*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From cyc||cgroup-z1 @end|ng |rom y@hoo@com  Mon Sep  2 20:38:35 2019
From: cyc||cgroup-z1 @end|ng |rom y@hoo@com (Cyclic Group Z_1)
Date: Mon, 2 Sep 2019 18:38:35 +0000 (UTC)
Subject: [Rd] Feature request: non-dropping regmatches/strextract
In-Reply-To: <CAOQ5NycHctjtNee0uWFKDyGehzWBC6-WXJbe4QxTkOQZ=k=3Xg@mail.gmail.com>
References: <2012653205.221487.1565848601638.ref@mail.yahoo.com>
 <2012653205.221487.1565848601638@mail.yahoo.com>
 <CALK03d2cCoAboDBmr5dhR9+kjGh5=Eg5QAHmKc-qJYm_iGO5mw@mail.gmail.com>
 <102772513.32513.1567113562904@mail.yahoo.com>
 <CAOQ5NydKtocPcz-3zVfZMo5K0jkbsF+R2iBvzzPO7fiP=+ZHQg@mail.gmail.com>
 <1828482902.51488.1567117617120@mail.yahoo.com>
 <CAOQ5NycHctjtNee0uWFKDyGehzWBC6-WXJbe4QxTkOQZ=k=3Xg@mail.gmail.com>
Message-ID: <262664965.1504987.1567449515858@mail.yahoo.com>

I think that's a good reason for not including this in regmatches; you're right, its name is somewhat suggestive of yielding matches. Also, that sounds like a great design for strcapture with an atomic prototype.

Best,
CG


From |@wrence@m|ch@e| @end|ng |rom gene@com  Mon Sep  2 23:21:26 2019
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Mon, 2 Sep 2019 14:21:26 -0700
Subject: [Rd] Feature request: non-dropping regmatches/strextract
In-Reply-To: <262664965.1504987.1567449515858@mail.yahoo.com>
References: <2012653205.221487.1565848601638.ref@mail.yahoo.com>
 <2012653205.221487.1565848601638@mail.yahoo.com>
 <CALK03d2cCoAboDBmr5dhR9+kjGh5=Eg5QAHmKc-qJYm_iGO5mw@mail.gmail.com>
 <102772513.32513.1567113562904@mail.yahoo.com>
 <CAOQ5NydKtocPcz-3zVfZMo5K0jkbsF+R2iBvzzPO7fiP=+ZHQg@mail.gmail.com>
 <1828482902.51488.1567117617120@mail.yahoo.com>
 <CAOQ5NycHctjtNee0uWFKDyGehzWBC6-WXJbe4QxTkOQZ=k=3Xg@mail.gmail.com>
 <262664965.1504987.1567449515858@mail.yahoo.com>
Message-ID: <CAOQ5NycLyr1i67jVmzwOmX6+r2zdPwoF38W0wqHqno+kKKY_=A@mail.gmail.com>

After some discussion within R core, we decided that a "nomatch"
argument on regmatches() may be a good initial step. We might add a
new function later that combines the regexpr() and regmatches() steps.
The gregexpr() and regexec() inputs are both lists so it's not clear
whether a "nomatch" value would be relevant (the elements are empty)
in those cases.

On Mon, Sep 2, 2019 at 11:38 AM Cyclic Group Z_1
<cyclicgroup-z1 at yahoo.com> wrote:
>
> I think that's a good reason for not including this in regmatches; you're right, its name is somewhat suggestive of yielding matches. Also, that sounds like a great design for strcapture with an atomic prototype.
>
> Best,
> CG



-- 
Michael Lawrence
Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From cyc||cgroup-z1 @end|ng |rom y@hoo@com  Mon Sep  2 23:23:53 2019
From: cyc||cgroup-z1 @end|ng |rom y@hoo@com (Cyclic Group Z_1)
Date: Mon, 2 Sep 2019 21:23:53 +0000 (UTC)
Subject: [Rd] Feature request: non-dropping regmatches/strextract
In-Reply-To: <CAOQ5NycLyr1i67jVmzwOmX6+r2zdPwoF38W0wqHqno+kKKY_=A@mail.gmail.com>
References: <2012653205.221487.1565848601638.ref@mail.yahoo.com>
 <2012653205.221487.1565848601638@mail.yahoo.com>
 <CALK03d2cCoAboDBmr5dhR9+kjGh5=Eg5QAHmKc-qJYm_iGO5mw@mail.gmail.com>
 <102772513.32513.1567113562904@mail.yahoo.com>
 <CAOQ5NydKtocPcz-3zVfZMo5K0jkbsF+R2iBvzzPO7fiP=+ZHQg@mail.gmail.com>
 <1828482902.51488.1567117617120@mail.yahoo.com>
 <CAOQ5NycHctjtNee0uWFKDyGehzWBC6-WXJbe4QxTkOQZ=k=3Xg@mail.gmail.com>
 <262664965.1504987.1567449515858@mail.yahoo.com>
 <CAOQ5NycLyr1i67jVmzwOmX6+r2zdPwoF38W0wqHqno+kKKY_=A@mail.gmail.com>
Message-ID: <2131891922.1536807.1567459433664@mail.yahoo.com>

That sounds great! Thank you for your consideration.

Best,
CG


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Sep  3 10:27:04 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 3 Sep 2019 10:27:04 +0200
Subject: [Rd] 
 Rf_defineVar(symbol, R_UnboundValue, environment) questions
In-Reply-To: <CAF8bMcY0R8+3rFcdN29OahKjerCoPodzs2hMnCNXmrg2UTiNEg@mail.gmail.com>
References: <CAF8bMcY0R8+3rFcdN29OahKjerCoPodzs2hMnCNXmrg2UTiNEg@mail.gmail.com>
Message-ID: <73d64ea7-8cd4-783c-bde6-a66dcc32c4bb@gmail.com>

Thanks for spotting this pattern. Using Rf_defineVar() this way to 
delete a variable from package code is wrong because WRE does not 
describe such behavior. That behavior has not been intended by the 
implementation and as you observe, the variable will not be properly 
deleted.

I found another pattern in another package (Rcpp, Rcpp11) which calls 
directly the .Internal() function that deletes a variable, that is also 
wrong, one should only use exported wrappers. The only legitimate way to 
delete a variable in already released versions of R from C is to use 
eval() to call R's rm()/remove(), but we will consider adding a C 
function to the API to do this directly.

Best
Tomas

On 8/15/19 7:12 PM, William Dunlap via R-devel wrote:
> While poking around the C++ code in the dplyr package I ran across the idiom
>     Rf_defineVar(symbol, R_UnboundValue, environment)
> to [sort of] remove 'symbol' from 'environment'
>
> Using it makes the R-level functions objects(), exists(), and get()
> somewhat inconsistent and I was wondering if that was intended.  E.g.,  use
> SHLIB to make something from the following C code that dyn.load can load
> into R
>
> % cat defineVarAsUnboundValue.c
> #include <R.h>
> #include <Rinternals.h>
>
> SEXP defineVarAsUnboundValue(SEXP name, SEXP envir)
> {
>      Rf_defineVar(name, R_UnboundValue, envir);
>      return R_NilValue;
> }
> erratic:bill:292% R-3.6.1 CMD SHLIB defineVarAsUnboundValue.c
> gcc -std=gnu99 -I"/home/R/R-3.6.1/lib64/R/include" -DNDEBUG
> -I/usr/local/include  -fpic  -g -O2  -c defineVarAsUnboundValue.c -o
> defineVarAsUnboundValue.o
> gcc -std=gnu99 -shared -L/home/R/R-3.6.1/lib64/R/lib -L/usr/local/lib64 -o
> defineVarAsUnboundValue.so defineVarAsUnboundValue.o
> -L/home/R/R-3.6.1/lib64/R/lib -lR
> erratic:bill:293% R-3.6.1 --quiet --vanilla
>> dyn.load("defineVarAsUnboundValue.so")
>> envir <- list2env(list(One=1, Two=2))
>> objects(envir)
> [1] "One" "Two"
>> .Call("defineVarAsUnboundValue", quote(Two), envir)
> NULL
>> objects(envir)
> [1] "One"
>> objects(envir, all.names=TRUE) # is "Two" a 'hidden' object?
> [1] "One" "Two"
>> exists("Two", envir=envir, inherits=FALSE)
> [1] TRUE
>> get("Two", envir=envir, inherits=FALSE) # get fails when exists says ok
> Error in get("Two", envir = envir, inherits = FALSE) :
>    object 'Two' not found
>
> Should Rf_defineVar(sym, R_UnboundValue, envir) remove sym from envir?
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @end|ng |rom m@yo@edu  Tue Sep  3 14:53:21 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 03 Sep 2019 07:53:21 -0500
Subject: [Rd] reverse dependency checks
Message-ID: <771925$cavnvu@ironport10.mayo.edu>

I remember there was advice about a server that one could use for reverse dependency 
checks, but I forgot to write it down.? (Or I did save the info and forgot where I saved 
it...)?? I have been doing the checks for survival myself, but the count is getting out of 
hand (663, not counting bioconductor).

Any pointers?

Terry Therneau


	[[alternative HTML version deleted]]


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Wed Sep  4 03:02:04 2019
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Tue, 3 Sep 2019 21:02:04 -0400
Subject: [Rd] possible bug in R's configure check for C++11 features
Message-ID: <CAC2h7uv+4Cu8JMRrBaFnqYez3ubo0htBgp6SQCykKZqNJ5gpcQ@mail.gmail.com>

I am trying to compile R under a new setup, and frankly, I have had a lot
of problems, but I think the stuff below points to a possible bug in R's
(custom) configure checks for C++11/14/17, but not for C++98.

This is a report about R from the R-3-6 branch, with a svn checkout from
today, revision r77135.

In my case the compiler name is x86_64-conda_cos6-linux-gnu-g++, not g++. I
denote this in my configure call, using the CC variable. A snippet of the
full configure is

../${SRCDIR}/configure SHELL='/bin/bash' \
   --prefix="${CONDA_PREFIX}/R/${R_VERSION}" \
   CC="x86_64-conda_cos6-linux-gnu-gcc" \
   CXX="x86_64-conda_cos6-linux-gnu-g++" \
   F77="x86_64-conda_cos6-linux-gnu-gfortran" \
   FC="$F77" \
   CFLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include"\
   CXXFLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include" \
   F77FLAGS="-Wall -g -O2 -mtune=amdfam10 -I${CONDA_PREFIX}/include" \
   CXX11="g++" \
   CXX11STD="-std=c++11" \
   CXX11FLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include" \
   CXX11PICFLAGS="-fPIC" \

Where $CONDA_PREFIX is given in my script.

The output in config.log is given below. Note that in the test for c++98,
it uses the "right" CC, but in the test for c++11 it uses g++. This looks
wrong to me:

configure:28111: checking whether x86_64-conda_cos6-linux-gnu-g++  supports
C++98 features with -std=gnu++98
configure:28130: x86_64-conda_cos6-linux-gnu-g++  -std=gnu++98 -c -Wall
-mtune=amdfam10 -g -O2
-I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
-fpic -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 conftest.cp
p >&5
configure:28130: $? = 0
configure:28139: result: yes
configure:28315: checking whether g++ -std=c++11 supports C++11 features
configure:28607: g++ -std=c++11 -c -Wall -mtune=amdfam10 -g -O2
-I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
-fPIC -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 conftest.cpp >&5
../R-3.6-src/configure: line 2355: g++: command not found
configure:28607: $? = 127
configure: failed program was:

I have similar issues (wrong CC using when compiling the test program) with
the test for c++14, whereas the test for c++17 has empty space where the CC
variable should be?

I can fix this issue by adding a soft link in my PATH from g++ to my
compiler of choice. In this case configure finishes and reports that I have
full C++17 capabilities. Weirdly, in the output, note that the C++ compiler
is "wrong" again, despite my configure call:

  Source directory:            ../R-3.6-src
  Installation directory:
 /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/R/3.6

  C compiler:                  x86_64-conda_cos6-linux-gnu-gcc  -Wall
-mtune=amdfam10 -g -O2
-I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
  Fortran fixed-form compiler:
/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/bin/x86_64-conda_cos6-linux-gnu-gfortran
-fno-optimize-sibling-calls -fopenmp -march=nocona -mtune=haswell
-ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2
-ffunction-sections -pipe

  Default C++ compiler:        g++ -std=c++11   -Wall -mtune=amdfam10 -g
-O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
  C++98 compiler:              x86_64-conda_cos6-linux-gnu-g++ -std=gnu++98
 -Wall -mtune=amdfam10 -g -O2
-I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
  C++11 compiler:              g++ -std=c++11   -Wall -mtune=amdfam10 -g
-O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
  C++14 compiler:              g++ -std=gnu++14   -Wall -mtune=amdfam10 -g
-O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
  C++17 compiler:              g++ -std=gnu++17  -Wall -mtune=amdfam10 -g
-O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
  Fortran free-form compiler:
 /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/bin/x86_64-conda_cos6-linux-gnu-gfortran
-fno-optimize-sibling-calls
  Obj-C compiler:



-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Sep  4 04:54:39 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 3 Sep 2019 22:54:39 -0400
Subject: [Rd] possible bug in R's configure check for C++11 features
In-Reply-To: <CAC2h7uv+4Cu8JMRrBaFnqYez3ubo0htBgp6SQCykKZqNJ5gpcQ@mail.gmail.com>
References: <CAC2h7uv+4Cu8JMRrBaFnqYez3ubo0htBgp6SQCykKZqNJ5gpcQ@mail.gmail.com>
Message-ID: <C3D36769-920E-44DD-A72B-865F18630FD4@R-project.org>

Kasper,

I haven?t checked in depth, so just to clarify: you *are* setting CXX11=g++ so it is doing what you asked it to. Since the settings are inherited upwards, this implies that you are setting both CXX14 and CXX17 to g++. So I?m not quite sure I understand your concern.

Cheers,
Simon



> On Sep 3, 2019, at 9:02 PM, Kasper Daniel Hansen <kasperdanielhansen at gmail.com> wrote:
> 
> I am trying to compile R under a new setup, and frankly, I have had a lot
> of problems, but I think the stuff below points to a possible bug in R's
> (custom) configure checks for C++11/14/17, but not for C++98.
> 
> This is a report about R from the R-3-6 branch, with a svn checkout from
> today, revision r77135.
> 
> In my case the compiler name is x86_64-conda_cos6-linux-gnu-g++, not g++. I
> denote this in my configure call, using the CC variable. A snippet of the
> full configure is
> 
> ../${SRCDIR}/configure SHELL='/bin/bash' \
>   --prefix="${CONDA_PREFIX}/R/${R_VERSION}" \
>   CC="x86_64-conda_cos6-linux-gnu-gcc" \
>   CXX="x86_64-conda_cos6-linux-gnu-g++" \
>   F77="x86_64-conda_cos6-linux-gnu-gfortran" \
>   FC="$F77" \
>   CFLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include"\
>   CXXFLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include" \
>   F77FLAGS="-Wall -g -O2 -mtune=amdfam10 -I${CONDA_PREFIX}/include" \
>   CXX11="g++" \
>   CXX11STD="-std=c++11" \
>   CXX11FLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include" \
>   CXX11PICFLAGS="-fPIC" \
> 
> Where $CONDA_PREFIX is given in my script.
> 
> The output in config.log is given below. Note that in the test for c++98,
> it uses the "right" CC, but in the test for c++11 it uses g++. This looks
> wrong to me:
> 
> configure:28111: checking whether x86_64-conda_cos6-linux-gnu-g++  supports
> C++98 features with -std=gnu++98
> configure:28130: x86_64-conda_cos6-linux-gnu-g++  -std=gnu++98 -c -Wall
> -mtune=amdfam10 -g -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> -fpic -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 conftest.cp
> p >&5
> configure:28130: $? = 0
> configure:28139: result: yes
> configure:28315: checking whether g++ -std=c++11 supports C++11 features
> configure:28607: g++ -std=c++11 -c -Wall -mtune=amdfam10 -g -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> -fPIC -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 conftest.cpp >&5
> ../R-3.6-src/configure: line 2355: g++: command not found
> configure:28607: $? = 127
> configure: failed program was:
> 
> I have similar issues (wrong CC using when compiling the test program) with
> the test for c++14, whereas the test for c++17 has empty space where the CC
> variable should be?
> 
> I can fix this issue by adding a soft link in my PATH from g++ to my
> compiler of choice. In this case configure finishes and reports that I have
> full C++17 capabilities. Weirdly, in the output, note that the C++ compiler
> is "wrong" again, despite my configure call:
> 
>  Source directory:            ../R-3.6-src
>  Installation directory:
> /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/R/3.6
> 
>  C compiler:                  x86_64-conda_cos6-linux-gnu-gcc  -Wall
> -mtune=amdfam10 -g -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
>  Fortran fixed-form compiler:
> /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/bin/x86_64-conda_cos6-linux-gnu-gfortran
> -fno-optimize-sibling-calls -fopenmp -march=nocona -mtune=haswell
> -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2
> -ffunction-sections -pipe
> 
>  Default C++ compiler:        g++ -std=c++11   -Wall -mtune=amdfam10 -g
> -O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
>  C++98 compiler:              x86_64-conda_cos6-linux-gnu-g++ -std=gnu++98
> -Wall -mtune=amdfam10 -g -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
>  C++11 compiler:              g++ -std=c++11   -Wall -mtune=amdfam10 -g
> -O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
>  C++14 compiler:              g++ -std=gnu++14   -Wall -mtune=amdfam10 -g
> -O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
>  C++17 compiler:              g++ -std=gnu++17  -Wall -mtune=amdfam10 -g
> -O2 -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
>  Fortran free-form compiler:
> /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/bin/x86_64-conda_cos6-linux-gnu-gfortran
> -fno-optimize-sibling-calls
>  Obj-C compiler:
> 
> 
> 
> -- 
> Best,
> Kasper
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Wed Sep  4 14:54:22 2019
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Wed, 4 Sep 2019 08:54:22 -0400
Subject: [Rd] possible bug in R's configure check for C++11 features
In-Reply-To: <C3D36769-920E-44DD-A72B-865F18630FD4@R-project.org>
References: <CAC2h7uv+4Cu8JMRrBaFnqYez3ubo0htBgp6SQCykKZqNJ5gpcQ@mail.gmail.com>
 <C3D36769-920E-44DD-A72B-865F18630FD4@R-project.org>
Message-ID: <CAC2h7usRDp03Nw4r2uK=LpRYocuBhCbVYM6deUBUQzyRmvQVGA@mail.gmail.com>

I'm sorry, I'm an idiot for not noticing this. That's what happens when you
have been stuck in configure/make hell for a while.

Best,
Kasper

On Tue, Sep 3, 2019 at 10:54 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Kasper,
>
> I haven?t checked in depth, so just to clarify: you *are* setting
> CXX11=g++ so it is doing what you asked it to. Since the settings are
> inherited upwards, this implies that you are setting both CXX14 and CXX17
> to g++. So I?m not quite sure I understand your concern.
>
> Cheers,
> Simon
>
>
>
> > On Sep 3, 2019, at 9:02 PM, Kasper Daniel Hansen <
> kasperdanielhansen at gmail.com> wrote:
> >
> > I am trying to compile R under a new setup, and frankly, I have had a lot
> > of problems, but I think the stuff below points to a possible bug in R's
> > (custom) configure checks for C++11/14/17, but not for C++98.
> >
> > This is a report about R from the R-3-6 branch, with a svn checkout from
> > today, revision r77135.
> >
> > In my case the compiler name is x86_64-conda_cos6-linux-gnu-g++, not
> g++. I
> > denote this in my configure call, using the CC variable. A snippet of the
> > full configure is
> >
> > ../${SRCDIR}/configure SHELL='/bin/bash' \
> >   --prefix="${CONDA_PREFIX}/R/${R_VERSION}" \
> >   CC="x86_64-conda_cos6-linux-gnu-gcc" \
> >   CXX="x86_64-conda_cos6-linux-gnu-g++" \
> >   F77="x86_64-conda_cos6-linux-gnu-gfortran" \
> >   FC="$F77" \
> >   CFLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include"\
> >   CXXFLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include" \
> >   F77FLAGS="-Wall -g -O2 -mtune=amdfam10 -I${CONDA_PREFIX}/include" \
> >   CXX11="g++" \
> >   CXX11STD="-std=c++11" \
> >   CXX11FLAGS="-Wall -mtune=amdfam10 -g -O2 -I${CONDA_PREFIX}/include" \
> >   CXX11PICFLAGS="-fPIC" \
> >
> > Where $CONDA_PREFIX is given in my script.
> >
> > The output in config.log is given below. Note that in the test for c++98,
> > it uses the "right" CC, but in the test for c++11 it uses g++. This looks
> > wrong to me:
> >
> > configure:28111: checking whether x86_64-conda_cos6-linux-gnu-g++
> supports
> > C++98 features with -std=gnu++98
> > configure:28130: x86_64-conda_cos6-linux-gnu-g++  -std=gnu++98 -c -Wall
> > -mtune=amdfam10 -g -O2
> > -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> > -fpic -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 conftest.cp
> > p >&5
> > configure:28130: $? = 0
> > configure:28139: result: yes
> > configure:28315: checking whether g++ -std=c++11 supports C++11 features
> > configure:28607: g++ -std=c++11 -c -Wall -mtune=amdfam10 -g -O2
> > -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> > -fPIC -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 conftest.cpp >&5
> > ../R-3.6-src/configure: line 2355: g++: command not found
> > configure:28607: $? = 127
> > configure: failed program was:
> >
> > I have similar issues (wrong CC using when compiling the test program)
> with
> > the test for c++14, whereas the test for c++17 has empty space where the
> CC
> > variable should be?
> >
> > I can fix this issue by adding a soft link in my PATH from g++ to my
> > compiler of choice. In this case configure finishes and reports that I
> have
> > full C++17 capabilities. Weirdly, in the output, note that the C++
> compiler
> > is "wrong" again, despite my configure call:
> >
> >  Source directory:            ../R-3.6-src
> >  Installation directory:
> > /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/R/3.6
> >
> >  C compiler:                  x86_64-conda_cos6-linux-gnu-gcc  -Wall
> > -mtune=amdfam10 -g -O2
> > -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> >  Fortran fixed-form compiler:
> >
> /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/bin/x86_64-conda_cos6-linux-gnu-gfortran
> > -fno-optimize-sibling-calls -fopenmp -march=nocona -mtune=haswell
> > -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2
> > -ffunction-sections -pipe
> >
> >  Default C++ compiler:        g++ -std=c++11   -Wall -mtune=amdfam10 -g
> > -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> >  C++98 compiler:              x86_64-conda_cos6-linux-gnu-g++
> -std=gnu++98
> > -Wall -mtune=amdfam10 -g -O2
> > -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> >  C++11 compiler:              g++ -std=c++11   -Wall -mtune=amdfam10 -g
> > -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> >  C++14 compiler:              g++ -std=gnu++14   -Wall -mtune=amdfam10 -g
> > -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> >  C++17 compiler:              g++ -std=gnu++17  -Wall -mtune=amdfam10 -g
> > -O2
> -I/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/include
> >  Fortran free-form compiler:
> >
> /jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6/bin/x86_64-conda_cos6-linux-gnu-gfortran
> > -fno-optimize-sibling-calls
> >  Obj-C compiler:
> >
> >
> >
> > --
> > Best,
> > Kasper
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From berger @end|ng |rom mp||b-ber||n@mpg@de  Wed Sep  4 15:25:46 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Wed, 4 Sep 2019 15:25:46 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
Message-ID: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>

Dear all,

I just stumbled upon some behavior of the == operator which is at least 
somewhat inconsistent.

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

 > list(a=1:3, b=LETTERS[1:3]) == NULL
logical(0)
 > matrix(1:6, 2,3) == NULL
logical(0)
 > data.frame(a=1:3, b=LETTERS[1:3]) == NULL # same for == logical(0)
Error in matrix(if (is.null(value)) logical() else value, nrow = nr, 
dimnames = list(rn,? :
 ? length of 'dimnames' [2] not equal to array extent

 > data.frame(NULL) == 1
<0 x 0 matrix>
 > data.frame(NULL) == NULL
<0 x 0 matrix>
 > data.frame(NULL) == logical(0)
<0 x 0 matrix>

I wonder if data.frame(<some non-empty data>) == NULL should also return 
a value instead of an error. R help reads:

"At least one of |x| and |y| must be an atomic vector, but if the other 
is a list *R* attempts to coerce it to the type of the atomic vector: 
this will succeed if the list is made up of elements of length one that 
can be coerced to the correct type.

If the two arguments are atomic vectors of different types, one is 
coerced to the type of the other, the (decreasing) order of precedence 
being character, complex, numeric, integer, logical and raw."

It is not clear from the help what to expect for NULL or empty atomic 
vectors. It is also strange that for list() there is no error but for 
data.frame() with the same data an error is thrown. I can see that there 
might be reasons to return logical(0) instead of FALSE, but I do not 
fully understand why there should be differences between e.g. matrix() 
and data.frame().

Also, It is at least somewhat strange that data.frame(NULL) == NULL and 
similar expressions return an empty matrix, while comparing a normal 
filled matrix to NULL returns logical(0).

Even if this behavior is expected, the error message shown by 
data.frame(...) == NULL is not very informative.

Thanks and best regards,

Hilmar





	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Sep  4 16:40:35 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Wed, 4 Sep 2019 10:40:35 -0400
Subject: [Rd] 
 [ALTREP] What is the meaning of the return value of Is_sorted
 and No_NA function?
In-Reply-To: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ@mail.gmail.com>
References: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ@mail.gmail.com>
Message-ID: <CAGiFhPOXUjy6SdOXgeTtEqgqy86DzZV2sSpCFPcpNZf1c+9CRw@mail.gmail.com>

Hi,

I've found the answers to my questions:

1. For sort function, here are some macros defined in Rinternal.h:
/* ALTREP sorting support */
enum {SORTED_DECR_NA_1ST = -2,
      SORTED_DECR = -1,
      UNKNOWN_SORTEDNESS = INT_MIN, /*INT_MIN is NA_INTEGER! */
      SORTED_INCR = 1,
      SORTED_INCR_NA_1ST = 2,
      KNOWN_UNSORTED = 0};

The macro names are pretty self-explanatory. The current implementation
only supports the ascending sort.

2. For anyNA, it goes to(Real SEXP)

===========coerce.c===========
if(REAL_NO_NA(x))
   return FALSE;
ITERATE_BY_REGION(x, xD, i, nbatch, double, REAL, {
for (int k = 0; k < nbatch; k++)
   if (ISNAN(xD[k]))
return TRUE;
   });

===========altrep.c===========
int REAL_NO_NA(SEXP x)
{
    return ALTREP(x) ? ALTREAL_DISPATCH(No_NA, x) : 0;
}

If the argument x is not an ALTREP, the function will return 0, and a
default method will be used, so there is no way to return true without loop
over the argument x right now. I hope this could be changed in the future.

Best,
Jiefei





On Tue, Sep 3, 2019 at 2:49 PM Wang Jiefei <szwjf08 at gmail.com> wrote:

> Hi,
>
>
>
> I would like to figure out the meaning of the return value of these two
> functions. Here are the default definitions I find from R source code:
>
>
>
> static int altreal_Is_sorted_default(SEXP x) { return UNKNOWN_SORTEDNESS;
> }
>
> static int altreal_No_NA_default(SEXP x) { return 0; }
>
> I guess the macro *UNKNOWN_SORTEDNESS *in *Is_sorted* and 0 in *No_NA *simply means
> unknown sorted/NA status of the vector, so R will loop over the vector and
> find the answer. However, what should we return in these functions to
> indicate whether the vector has been sorted/ contains NA? My initial guess
> is 0/1 but since *NA_NA *uses 0 as its default value so it will be
> ambiguous. Are there any macros to define yes/no return values for these
> functions? I would appreciate any thought here.
>
>
>
> Best,
>
> Jiefei
>
>
>

	[[alternative HTML version deleted]]


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed Sep  4 21:12:06 2019
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 4 Sep 2019 21:12:06 +0200
Subject: [Rd] reverse dependency checks
In-Reply-To: <771925$cavnvu@ironport10.mayo.edu>
References: <771925$cavnvu@ironport10.mayo.edu>
Message-ID: <CAJXDcw2_kR7sndX2=duiHhrouKqNwfCO_jLTF2MXX44a12vYsw@mail.gmail.com>

https://builder.r-hub.io/

El martes, 3 de septiembre de 2019, Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> escribi?:

> I remember there was advice about a server that one could use for reverse
> dependency
> checks, but I forgot to write it down.  (Or I did save the info and forgot
> where I saved
> it...)   I have been doing the checks for survival myself, but the count
> is getting out of
> hand (663, not counting bioconductor).
>
> Any pointers?
>
> Terry Therneau
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Sep  4 22:00:19 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 4 Sep 2019 22:00:19 +0200
Subject: [Rd] reverse dependency checks
In-Reply-To: <771925$cavnvu@ironport10.mayo.edu>
References: <771925$cavnvu@ironport10.mayo.edu>
Message-ID: <CALEXWq2MeU69mpbKPLHwLLVG_dB3h8CgeiQuA=q2EL0ex9gYiw@mail.gmail.com>

On Tue, 3 Sep 2019 at 14:53, Therneau, Terry M., Ph.D. via R-devel
<r-devel at r-project.org> wrote:
>
> I remember there was advice about a server that one could use for reverse dependency
> checks, but I forgot to write it down.  (Or I did save the info and forgot where I saved
> it...)   I have been doing the checks for survival myself, but the count is getting out of
> hand (663, not counting bioconductor).
>
> Any pointers?

You could try Yihui's crandalf [1]. Locally, I don't know what you are
using, but there are a few alternatives. Notably, Dirk's prrd [2] (the
only one that I tried myself and I can thus recommend), Gabor's
revdepcheck [3] and R's brand new tools::check_packages_in_dir().

[1] https://github.com/yihui/crandalf
[2] https://github.com/eddelbuettel/prrd
[3] https://github.com/r-lib/revdepcheck

I?aki


From therne@u @end|ng |rom m@yo@edu  Thu Sep  5 19:53:11 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 05 Sep 2019 12:53:11 -0500
Subject: [Rd] install_github and survival
Message-ID: <771925$cbifqp@ironport10.mayo.edu>

I treat CRAN as the main repository for survival, but I have also had a github 
(therneau/survival) version for a couple of years.? It has a vignette2 directory, for 
instance, that contains extra vignettes that either take too long to run or depend on 
other packages.? It also gets updated more often than CRAN (though those updates mght not 
be as well tested yet).

In any case, since it is there, people will of course run install_github against it.?? 
I've added a config script to do the one extra step necessary, but when I try 
install_github it fails.?? I'm clearly doing something wrong.? If someone were willing to 
contribute a fix I would be most grateful.

survival3.1-0 is almost ready for CRAN, by the way.?? Reverse dependency checks of hdnom 
turned up one last thing to repair...


Terry Therneau


	[[alternative HTML version deleted]]


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Fri Sep  6 12:44:05 2019
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 6 Sep 2019 10:44:05 +0000
Subject: [Rd] install_github and survival
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E01CC779141@MBXP01.ds.man.ac.uk>

I cloned therneau/survival and the installation failed since there is no definition for exported function survfit().
A file seems to be missing - there is survfit0() and survfit0.R but, compared to CRAN, no survfit.R.

Georgi Boshnakov


----------------------------------------------------------------------

Message: 1
Date: Thu, 05 Sep 2019 12:53:11 -0500
From: "Therneau, Terry M., Ph.D." <therneau at mayo.edu>
To: "r-devel at r-project.org" <r-devel at r-project.org>
Subject: [Rd] install_github and survival
Message-ID: <771925$cbifqp at ironport10.mayo.edu>
Content-Type: text/plain; charset="utf-8"

I treat CRAN as the main repository for survival, but I have also had a github 
(therneau/survival) version for a couple of years.? It has a vignette2 directory, for 
instance, that contains extra vignettes that either take too long to run or depend on 
other packages.? It also gets updated more often than CRAN (though those updates mght not 
be as well tested yet).

In any case, since it is there, people will of course run install_github against it.?? 
I've added a config script to do the one extra step necessary, but when I try 
install_github it fails.?? I'm clearly doing something wrong.? If someone were willing to 
contribute a fix I would be most grateful.

survival3.1-0 is almost ready for CRAN, by the way.?? Reverse dependency checks of hdnom 
turned up one last thing to repair...


Terry Therneau


	[[alternative HTML version deleted]]




------------------------------

Subject: Digest Footer

_______________________________________________
R-devel at r-project.org mailing list  DIGESTED
https://stat.ethz.ch/mailman/listinfo/r-devel


------------------------------

End of R-devel Digest, Vol 199, Issue 6
***************************************

From therne@u @end|ng |rom m@yo@edu  Fri Sep  6 14:07:26 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 06 Sep 2019 07:07:26 -0500
Subject: [Rd] [EXTERNAL] RE: install_github and survival
In-Reply-To: <438D2EC9EAFE5946B2D5864670EA468E01CC779141@MBXP01.ds.man.ac.uk>
References: <438D2EC9EAFE5946B2D5864670EA468E01CC779141@MBXP01.ds.man.ac.uk>
Message-ID: <771925$cbmn84@ironport10.mayo.edu>

Yes, that is exactly the problem.? The code found in the "config" script is never run.? 
But why doesn't it get run?

On 9/6/19 5:44 AM, Georgi Boshnakov wrote:
> I cloned therneau/survival and the installation failed since there is no definition for exported function survfit().
> A file seems to be missing - there is survfit0() and survfit0.R but, compared to CRAN, no survfit.R.
>
> Georgi Boshnakov
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Thu, 05 Sep 2019 12:53:11 -0500
> From: "Therneau, Terry M., Ph.D." <therneau at mayo.edu>
> To: "r-devel at r-project.org" <r-devel at r-project.org>
> Subject: [Rd] install_github and survival
> Message-ID: <771925$cbifqp at ironport10.mayo.edu>
> Content-Type: text/plain; charset="utf-8"
>
> I treat CRAN as the main repository for survival, but I have also had a github
> (therneau/survival) version for a couple of years.? It has a vignette2 directory, for
> instance, that contains extra vignettes that either take too long to run or depend on
> other packages.? It also gets updated more often than CRAN (though those updates mght not
> be as well tested yet).
>
> In any case, since it is there, people will of course run install_github against it.
> I've added a config script to do the one extra step necessary, but when I try
> install_github it fails.?? I'm clearly doing something wrong.? If someone were willing to
> contribute a fix I would be most grateful.
>
> survival3.1-0 is almost ready for CRAN, by the way.?? Reverse dependency checks of hdnom
> turned up one last thing to repair...
>
>
> Terry Therneau
>
>
> 	[[alternative HTML version deleted]]
>
>
>
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> R-devel at r-project.org mailing list  DIGESTED
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> ------------------------------
>
> End of R-devel Digest, Vol 199, Issue 6
> ***************************************


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Fri Sep  6 14:10:02 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 6 Sep 2019 14:10:02 +0200
Subject: [Rd] [EXTERNAL] RE: install_github and survival
In-Reply-To: <771925$cbmn84@ironport10.mayo.edu>
References: <438D2EC9EAFE5946B2D5864670EA468E01CC779141@MBXP01.ds.man.ac.uk>
 <771925$cbmn84@ironport10.mayo.edu>
Message-ID: <CALEXWq2oD3Gw+rE83P2bBhRfseSBSfAscaCRQL1wfWTuSp9a7Q@mail.gmail.com>

On Fri, 6 Sep 2019 at 14:08, Therneau, Terry M., Ph.D. via R-devel
<r-devel at r-project.org> wrote:
>
> Yes, that is exactly the problem.  The code found in the "config" script is never run.
> But why doesn't it get run?

It should be called "configure", not "config".

I?aki


From th|erry@onke||nx @end|ng |rom |nbo@be  Fri Sep  6 16:48:00 2019
From: th|erry@onke||nx @end|ng |rom |nbo@be (Thierry Onkelinx)
Date: Fri, 6 Sep 2019 16:48:00 +0200
Subject: [Rd] Cryptic error message from namespaceExport
Message-ID: <CAJuCY5yZe=T=kn0dbwTi=aLNJnfgrGWBo8n0yCH+RY23fBh5ug@mail.gmail.com>

Dear all,

Today I got this error message (R 3.6.1) when installing my package:

Error: package or namespace load failed for ?inlatools? in
namespaceExport(ns, exports):
 undefined exports: .__C__inla

My package was using setOldClass("inla") and exported the "inla" class via
the NAMESPACE. It imports functions from the INLA package. Older versions
of the INLA package did not export the "inla" class. Hence the use of
setOldClass().
The current version of the INLA package does export the "inla" class
through it NAMESPACE. This triggered the error described above.

Is the possible to improve this error message? The current message is
misleading as neither packages contain the string ".__C__inla"

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>

	[[alternative HTML version deleted]]


From |@wrence@m|ch@e| @end|ng |rom gene@com  Fri Sep  6 17:16:05 2019
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Fri, 6 Sep 2019 08:16:05 -0700
Subject: [Rd] Cryptic error message from namespaceExport
In-Reply-To: <CAJuCY5yZe=T=kn0dbwTi=aLNJnfgrGWBo8n0yCH+RY23fBh5ug@mail.gmail.com>
References: <CAJuCY5yZe=T=kn0dbwTi=aLNJnfgrGWBo8n0yCH+RY23fBh5ug@mail.gmail.com>
Message-ID: <CAOQ5Nycz=ObY9uB2XH4AG8bDRPNXVp6_T1+nkma8xVty6cVO4g@mail.gmail.com>

Just to clarify, your package is exporting a class that is not
defined? Or is it exporting a class that is defined by a dependency
and then masked by setOldClass()? A simple reproducible example would
help.

On Fri, Sep 6, 2019 at 7:48 AM Thierry Onkelinx via R-devel
<r-devel at r-project.org> wrote:
>
> Dear all,
>
> Today I got this error message (R 3.6.1) when installing my package:
>
> Error: package or namespace load failed for ?inlatools? in
> namespaceExport(ns, exports):
>  undefined exports: .__C__inla
>
> My package was using setOldClass("inla") and exported the "inla" class via
> the NAMESPACE. It imports functions from the INLA package. Older versions
> of the INLA package did not export the "inla" class. Hence the use of
> setOldClass().
> The current version of the INLA package does export the "inla" class
> through it NAMESPACE. This triggered the error described above.
>
> Is the possible to improve this error message? The current message is
> misleading as neither packages contain the string ".__C__inla"
>
> Best regards,
>
> ir. Thierry Onkelinx
> Statisticus / Statistician
>
> Vlaamse Overheid / Government of Flanders
> INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
> FOREST
> Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
> thierry.onkelinx at inbo.be
> Havenlaan 88 bus 73, 1000 Brussel
> www.inbo.be
>
> ///////////////////////////////////////////////////////////////////////////////////////////
> To call in the statistician after the experiment is done may be no more
> than asking him to perform a post-mortem examination: he may be able to say
> what the experiment died of. ~ Sir Ronald Aylmer Fisher
> The plural of anecdote is not data. ~ Roger Brinner
> The combination of some data and an aching desire for an answer does not
> ensure that a reasonable answer can be extracted from a given body of data.
> ~ John Tukey
> ///////////////////////////////////////////////////////////////////////////////////////////
>
> <https://www.inbo.be>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From th|erry@onke||nx @end|ng |rom |nbo@be  Fri Sep  6 19:18:53 2019
From: th|erry@onke||nx @end|ng |rom |nbo@be (Thierry Onkelinx)
Date: Fri, 6 Sep 2019 19:18:53 +0200
Subject: [Rd] Cryptic error message from namespaceExport
In-Reply-To: <CAOQ5Nycz=ObY9uB2XH4AG8bDRPNXVp6_T1+nkma8xVty6cVO4g@mail.gmail.com>
References: <CAJuCY5yZe=T=kn0dbwTi=aLNJnfgrGWBo8n0yCH+RY23fBh5ug@mail.gmail.com>
 <CAOQ5Nycz=ObY9uB2XH4AG8bDRPNXVp6_T1+nkma8xVty6cVO4g@mail.gmail.com>
Message-ID: <CAJuCY5yP1RT_OiYRG=1vCnxZZ-d9Xb+1qLxm7g9J_2EF_eyBzA@mail.gmail.com>

Dear Michael,

my package has setOldClass("inla") and the NAMESPACE
contains exportClasses(inla) and importFrom(INLA, inla.posterior.sample)

the old version of INLA uses the S3 class "inla" but does not export it.
the new version of INLA has setOldClass("inla") and the NAMESPACE
contains exportClasses(inla)

installing my package in combination with an older INLA version works

install.packages("
https://inla.r-inla-download.org/R/stable/src/contrib/INLA_18.07.12.tar.gz",
repos = NULL)
remotes::install_github("inbo/inlatools", upgrade = FALSE, force = TRUE)

installing my package with a recent INLA versions yields the error

install.packages("
https://inla.r-inla-download.org/R/stable/src/contrib/INLA_19.09.03.tar.gz",
repos = NULL)
remotes::install_github("inbo/inlatools", upgrade = FALSE, force = TRUE)

Warning: INLA is a very large package. The old version is 87 MB, the new
one 250 MB

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>


Op vr 6 sep. 2019 om 17:16 schreef Michael Lawrence <
lawrence.michael at gene.com>:

> Just to clarify, your package is exporting a class that is not
> defined? Or is it exporting a class that is defined by a dependency
> and then masked by setOldClass()? A simple reproducible example would
> help.
>
> On Fri, Sep 6, 2019 at 7:48 AM Thierry Onkelinx via R-devel
> <r-devel at r-project.org> wrote:
> >
> > Dear all,
> >
> > Today I got this error message (R 3.6.1) when installing my package:
> >
> > Error: package or namespace load failed for ?inlatools? in
> > namespaceExport(ns, exports):
> >  undefined exports: .__C__inla
> >
> > My package was using setOldClass("inla") and exported the "inla" class
> via
> > the NAMESPACE. It imports functions from the INLA package. Older versions
> > of the INLA package did not export the "inla" class. Hence the use of
> > setOldClass().
> > The current version of the INLA package does export the "inla" class
> > through it NAMESPACE. This triggered the error described above.
> >
> > Is the possible to improve this error message? The current message is
> > misleading as neither packages contain the string ".__C__inla"
> >
> > Best regards,
> >
> > ir. Thierry Onkelinx
> > Statisticus / Statistician
> >
> > Vlaamse Overheid / Government of Flanders
> > INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE
> AND
> > FOREST
> > Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
> > thierry.onkelinx at inbo.be
> > Havenlaan 88 bus 73, 1000 Brussel
> > www.inbo.be
> >
> >
> ///////////////////////////////////////////////////////////////////////////////////////////
> > To call in the statistician after the experiment is done may be no more
> > than asking him to perform a post-mortem examination: he may be able to
> say
> > what the experiment died of. ~ Sir Ronald Aylmer Fisher
> > The plural of anecdote is not data. ~ Roger Brinner
> > The combination of some data and an aching desire for an answer does not
> > ensure that a reasonable answer can be extracted from a given body of
> data.
> > ~ John Tukey
> >
> ///////////////////////////////////////////////////////////////////////////////////////////
> >
> > <https://www.inbo.be>
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Michael Lawrence
> Scientist, Bioinformatics and Computational Biology
> Genentech, A Member of the Roche Group
> Office +1 (650) 225-7760
> michafla at gene.com
>
> Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube
>

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Fri Sep  6 23:51:12 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 06 Sep 2019 16:51:12 -0500
Subject: [Rd] [EXTERNAL] Re:  RE: install_github and survival
In-Reply-To: <CALEXWq2oD3Gw+rE83P2bBhRfseSBSfAscaCRQL1wfWTuSp9a7Q@mail.gmail.com>
References: <438D2EC9EAFE5946B2D5864670EA468E01CC779141@MBXP01.ds.man.ac.uk>
 <771925$cbmn84@ironport10.mayo.edu>
 <CALEXWq2oD3Gw+rE83P2bBhRfseSBSfAscaCRQL1wfWTuSp9a7Q@mail.gmail.com>
Message-ID: <771925$cbs9kh@ironport10.mayo.edu>

Many thanks.? Something obvious is sometimes the hardest thing for me to see.

Terry


On 9/6/19 7:10 AM, I?aki Ucar wrote:
> On Fri, 6 Sep 2019 at 14:08, Therneau, Terry M., Ph.D. via R-devel
> <r-devel at r-project.org> wrote:
>> Yes, that is exactly the problem.  The code found in the "config" script is never run.
>> But why doesn't it get run?
> It should be called "configure", not "config".
>
> I?aki


	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sat Sep  7 21:05:56 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sat, 7 Sep 2019 15:05:56 -0400
Subject: [Rd] Missing function Rf_findFun3
Message-ID: <CA+JCgN17j1myHXxvgckej3mYv5n+s5xYQ13_khPwPVEgCzbrhQ@mail.gmail.com>

Hi,


The function `Rf_findFun3` is declared in
`$(R CMD CONFIG HOME)/lib/R/include/Rinternals.h`
but appears to be missing from R's shared library (R.so).

Is this an oversight?

Best,

Laurent

	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Sun Sep  8 14:27:57 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Sun, 8 Sep 2019 12:27:57 +0000
Subject: [Rd] [External]  Missing function Rf_findFun3
In-Reply-To: <CA+JCgN17j1myHXxvgckej3mYv5n+s5xYQ13_khPwPVEgCzbrhQ@mail.gmail.com>
References: <CA+JCgN17j1myHXxvgckej3mYv5n+s5xYQ13_khPwPVEgCzbrhQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1909080725330.2872@luke-Latitude-7480>

On Sat, 7 Sep 2019, Laurent Gautier wrote:

> Hi,
>
>
> The function `Rf_findFun3` is declared in
> `$(R CMD CONFIG HOME)/lib/R/include/Rinternals.h`
> but appears to be missing from R's shared library (R.so).
>
> Is this an oversight?

No. This is not part of the API supported for use in packages.

Best,

luke

>
> Best,
>
> Laurent
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From |g@ut|er @end|ng |rom gm@||@com  Sun Sep  8 16:39:10 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sun, 8 Sep 2019 10:39:10 -0400
Subject: [Rd] [External]  Missing function Rf_findFun3
In-Reply-To: <alpine.DEB.2.21.1909080725330.2872@luke-Latitude-7480>
References: <CA+JCgN17j1myHXxvgckej3mYv5n+s5xYQ13_khPwPVEgCzbrhQ@mail.gmail.com>
 <alpine.DEB.2.21.1909080725330.2872@luke-Latitude-7480>
Message-ID: <CA+JCgN2vJ78NDXYUg-5SsXexa0r35=WLa1+HVTR=OaUpVv4Aiw@mail.gmail.com>

I am not using the C API from a package but with an embedded R.

Why have it declared in the include/ if it cannot be accessed then?

Best,

Laurent

On Sun, Sep 8, 2019, 8:27 AM Tierney, Luke <luke-tierney at uiowa.edu> wrote:

> On Sat, 7 Sep 2019, Laurent Gautier wrote:
>
> > Hi,
> >
> >
> > The function `Rf_findFun3` is declared in
> > `$(R CMD CONFIG HOME)/lib/R/include/Rinternals.h`
> > but appears to be missing from R's shared library (R.so).
> >
> > Is this an oversight?
>
> No. This is not part of the API supported for use in packages.
>
> Best,
>
> luke
>
> >
> > Best,
> >
> > Laurent
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sun Sep  8 17:41:51 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sun, 8 Sep 2019 11:41:51 -0400
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
 =?utf-8?b?4oCYdXRpbHM=?=
Message-ID: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>

Hi,

When starting an embedded R I encounter the following issue under certain
conditions:

```
Error: package or namespace load failed for ?utils? in if (.identC(class1,
class2) || .identC(class2, "ANY")) TRUE else {:
 missing value where TRUE/FALSE needed
```
(more such errors for grDevices, graphics, and stats)

And in the end:

```
Warning messages:
1: package ?utils? in options("defaultPackages") was not found
2: package ?grDevices? in options("defaultPackages") was not found
3: package ?graphics? in options("defaultPackages") was not found
4: package ?stats? in options("defaultPackages") was not found
```

While the embedded R appears functional, no package can be loaded.

The erorr message from R (`missing value where TRUE/FALSE needed`) suggests
that R should be able to catch the underlying issue (I am yet to find what
it is) earlier and with this make the task of troubleshooting easier.

Best,


Laurent

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Sun Sep  8 18:58:02 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Sun, 8 Sep 2019 09:58:02 -0700
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
	=?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
Message-ID: <CAF8bMcZfHR9_=ogp93f5_Y+N=scL0p27Urhgx5Mw5zS6WhfAaw@mail.gmail.com>

Look at section 6.1 of the R Installation and Admin manual.

6.1 Default packages

The set of packages loaded on startup is by default

> getOption("defaultPackages")
[1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"

(plus, of course, *base*) and this can be changed by setting the option in
startup code (e.g. in ~/.Rprofile). It is initially set to the value of the
environment variable R_DEFAULT_PACKAGES if set (as a comma-separated list).
Setting R_DEFAULT_PACKAGES=NULL ensures that only package *base* is loaded.

Changing the set of default packages is normally used to reduce the set for
speed when scripting: in particular not using *methods*will reduce the
start-up time by a factor of up to two. But it can also be used to
customize R, e.g. for class use. Rscript also checks the environment
variable R_SCRIPT_DEFAULT_PACKAGES; if set, this takes precedence over
R_DEFAULT_PACKAGES.
Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Sun, Sep 8, 2019 at 8:42 AM Laurent Gautier <lgautier at gmail.com> wrote:

> Hi,
>
> When starting an embedded R I encounter the following issue under certain
> conditions:
>
> ```
> Error: package or namespace load failed for ?utils? in if (.identC(class1,
> class2) || .identC(class2, "ANY")) TRUE else {:
>  missing value where TRUE/FALSE needed
> ```
> (more such errors for grDevices, graphics, and stats)
>
> And in the end:
>
> ```
> Warning messages:
> 1: package ?utils? in options("defaultPackages") was not found
> 2: package ?grDevices? in options("defaultPackages") was not found
> 3: package ?graphics? in options("defaultPackages") was not found
> 4: package ?stats? in options("defaultPackages") was not found
> ```
>
> While the embedded R appears functional, no package can be loaded.
>
> The erorr message from R (`missing value where TRUE/FALSE needed`) suggests
> that R should be able to catch the underlying issue (I am yet to find what
> it is) earlier and with this make the task of troubleshooting easier.
>
> Best,
>
>
> Laurent
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sun Sep  8 19:19:41 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sun, 8 Sep 2019 13:19:41 -0400
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
	=?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CAF8bMcZfHR9_=ogp93f5_Y+N=scL0p27Urhgx5Mw5zS6WhfAaw@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
 <CAF8bMcZfHR9_=ogp93f5_Y+N=scL0p27Urhgx5Mw5zS6WhfAaw@mail.gmail.com>
Message-ID: <CA+JCgN0deWPaLAPAprWZ_kaHLWTkuaHF-4kMSmNcb1U3KHcdZQ@mail.gmail.com>

Hi,

Thanks, but I am unsure this helps.

The point I am making is that an R error (about a missing value where a
boolean would be expected), originating from the package methods, is not
informative. This is indicating that a core R function involved in the
loading of an R packages may receive invalid arguments, and rather than the
current situation I believe that such invalid arguments should be
identified earlier with a more meaningful error message (as in an error
message leading to the root of the issue) produced.

L.

Le dim. 8 sept. 2019 ? 12:58, William Dunlap <wdunlap at tibco.com> a ?crit :

> Look at section 6.1 of the R Installation and Admin manual.
>
> 6.1 Default packages
>
> The set of packages loaded on startup is by default
>
> > getOption("defaultPackages")
> [1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"
>
> (plus, of course, *base*) and this can be changed by setting the option
> in startup code (e.g. in ~/.Rprofile). It is initially set to the value
> of the environment variable R_DEFAULT_PACKAGES if set (as a
> comma-separated list). Setting R_DEFAULT_PACKAGES=NULL ensures that only
> package *base* is loaded.
>
> Changing the set of default packages is normally used to reduce the set
> for speed when scripting: in particular not using *methods*will reduce
> the start-up time by a factor of up to two. But it can also be used to
> customize R, e.g. for class use. Rscript also checks the environment
> variable R_SCRIPT_DEFAULT_PACKAGES; if set, this takes precedence over
> R_DEFAULT_PACKAGES.
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Sun, Sep 8, 2019 at 8:42 AM Laurent Gautier <lgautier at gmail.com> wrote:
>
>> Hi,
>>
>> When starting an embedded R I encounter the following issue under certain
>> conditions:
>>
>> ```
>> Error: package or namespace load failed for ?utils? in if (.identC(class1,
>> class2) || .identC(class2, "ANY")) TRUE else {:
>>  missing value where TRUE/FALSE needed
>> ```
>> (more such errors for grDevices, graphics, and stats)
>>
>> And in the end:
>>
>> ```
>> Warning messages:
>> 1: package ?utils? in options("defaultPackages") was not found
>> 2: package ?grDevices? in options("defaultPackages") was not found
>> 3: package ?graphics? in options("defaultPackages") was not found
>> 4: package ?stats? in options("defaultPackages") was not found
>> ```
>>
>> While the embedded R appears functional, no package can be loaded.
>>
>> The erorr message from R (`missing value where TRUE/FALSE needed`)
>> suggests
>> that R should be able to catch the underlying issue (I am yet to find what
>> it is) earlier and with this make the task of troubleshooting easier.
>>
>> Best,
>>
>>
>> Laurent
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Sun Sep  8 19:22:37 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Sun, 8 Sep 2019 10:22:37 -0700
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
	=?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CAF8bMcZfHR9_=ogp93f5_Y+N=scL0p27Urhgx5Mw5zS6WhfAaw@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
 <CAF8bMcZfHR9_=ogp93f5_Y+N=scL0p27Urhgx5Mw5zS6WhfAaw@mail.gmail.com>
Message-ID: <CAF8bMcbCE79NdUHucODvD5ecc8ZWZGPXij73JrHXqx0bU3O5-Q@mail.gmail.com>

Also, check the settings of R_HOME and/or R_LIBS.
Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Sun, Sep 8, 2019 at 9:58 AM William Dunlap <wdunlap at tibco.com> wrote:

> Look at section 6.1 of the R Installation and Admin manual.
>
> 6.1 Default packages
>
> The set of packages loaded on startup is by default
>
> > getOption("defaultPackages")
> [1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"
>
> (plus, of course, *base*) and this can be changed by setting the option
> in startup code (e.g. in ~/.Rprofile). It is initially set to the value
> of the environment variable R_DEFAULT_PACKAGES if set (as a
> comma-separated list). Setting R_DEFAULT_PACKAGES=NULL ensures that only
> package *base* is loaded.
>
> Changing the set of default packages is normally used to reduce the set
> for speed when scripting: in particular not using *methods*will reduce
> the start-up time by a factor of up to two. But it can also be used to
> customize R, e.g. for class use. Rscript also checks the environment
> variable R_SCRIPT_DEFAULT_PACKAGES; if set, this takes precedence over
> R_DEFAULT_PACKAGES.
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Sun, Sep 8, 2019 at 8:42 AM Laurent Gautier <lgautier at gmail.com> wrote:
>
>> Hi,
>>
>> When starting an embedded R I encounter the following issue under certain
>> conditions:
>>
>> ```
>> Error: package or namespace load failed for ?utils? in if (.identC(class1,
>> class2) || .identC(class2, "ANY")) TRUE else {:
>>  missing value where TRUE/FALSE needed
>> ```
>> (more such errors for grDevices, graphics, and stats)
>>
>> And in the end:
>>
>> ```
>> Warning messages:
>> 1: package ?utils? in options("defaultPackages") was not found
>> 2: package ?grDevices? in options("defaultPackages") was not found
>> 3: package ?graphics? in options("defaultPackages") was not found
>> 4: package ?stats? in options("defaultPackages") was not found
>> ```
>>
>> While the embedded R appears functional, no package can be loaded.
>>
>> The erorr message from R (`missing value where TRUE/FALSE needed`)
>> suggests
>> that R should be able to catch the underlying issue (I am yet to find what
>> it is) earlier and with this make the task of troubleshooting easier.
>>
>> Best,
>>
>>
>> Laurent
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From |g@ut|er @end|ng |rom gm@||@com  Sun Sep  8 19:40:54 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sun, 8 Sep 2019 13:40:54 -0400
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
	=?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CAF8bMcbCE79NdUHucODvD5ecc8ZWZGPXij73JrHXqx0bU3O5-Q@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
 <CAF8bMcZfHR9_=ogp93f5_Y+N=scL0p27Urhgx5Mw5zS6WhfAaw@mail.gmail.com>
 <CAF8bMcbCE79NdUHucODvD5ecc8ZWZGPXij73JrHXqx0bU3O5-Q@mail.gmail.com>
Message-ID: <CA+JCgN1MM8+BQbSY1zxDMWsGK4ka2p=bbEvRjZX9a56HLp15MQ@mail.gmail.com>

R_HOME is not the issue, and I believe that R_LIBS is not involved with
packages such as "datasets", "utils", etc...
I suspect that the issue is around dynamic loading of C libraries, as
depending on the way the R shared library is called the issue is absent or
present, but the error reporting from R makes tracking this easy.

Le dim. 8 sept. 2019 ? 13:22, William Dunlap <wdunlap at tibco.com> a ?crit :

> Also, check the settings of R_HOME and/or R_LIBS.
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Sun, Sep 8, 2019 at 9:58 AM William Dunlap <wdunlap at tibco.com> wrote:
>
>> Look at section 6.1 of the R Installation and Admin manual.
>>
>> 6.1 Default packages
>>
>> The set of packages loaded on startup is by default
>>
>> > getOption("defaultPackages")
>> [1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"
>>
>> (plus, of course, *base*) and this can be changed by setting the option
>> in startup code (e.g. in ~/.Rprofile). It is initially set to the value
>> of the environment variable R_DEFAULT_PACKAGES if set (as a
>> comma-separated list). Setting R_DEFAULT_PACKAGES=NULL ensures that only
>> package *base* is loaded.
>>
>> Changing the set of default packages is normally used to reduce the set
>> for speed when scripting: in particular not using *methods*will reduce
>> the start-up time by a factor of up to two. But it can also be used to
>> customize R, e.g. for class use. Rscript also checks the environment
>> variable R_SCRIPT_DEFAULT_PACKAGES; if set, this takes precedence over
>> R_DEFAULT_PACKAGES.
>> Bill Dunlap
>> TIBCO Software
>> wdunlap tibco.com
>>
>>
>> On Sun, Sep 8, 2019 at 8:42 AM Laurent Gautier <lgautier at gmail.com>
>> wrote:
>>
>>> Hi,
>>>
>>> When starting an embedded R I encounter the following issue under certain
>>> conditions:
>>>
>>> ```
>>> Error: package or namespace load failed for ?utils? in if
>>> (.identC(class1,
>>> class2) || .identC(class2, "ANY")) TRUE else {:
>>>  missing value where TRUE/FALSE needed
>>> ```
>>> (more such errors for grDevices, graphics, and stats)
>>>
>>> And in the end:
>>>
>>> ```
>>> Warning messages:
>>> 1: package ?utils? in options("defaultPackages") was not found
>>> 2: package ?grDevices? in options("defaultPackages") was not found
>>> 3: package ?graphics? in options("defaultPackages") was not found
>>> 4: package ?stats? in options("defaultPackages") was not found
>>> ```
>>>
>>> While the embedded R appears functional, no package can be loaded.
>>>
>>> The erorr message from R (`missing value where TRUE/FALSE needed`)
>>> suggests
>>> that R should be able to catch the underlying issue (I am yet to find
>>> what
>>> it is) earlier and with this make the task of troubleshooting easier.
>>>
>>> Best,
>>>
>>>
>>> Laurent
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From mou@@@ou| @end|ng |rom rom@nd|e@com  Fri Sep  6 13:04:29 2019
From: mou@@@ou| @end|ng |rom rom@nd|e@com (Farid Moussaoui)
Date: Fri, 6 Sep 2019 13:04:29 +0200 (CEST)
Subject: [Rd] install_github and survival
Message-ID: <404111024.199098.1567767869691@romandiev5-http2.romandie.int>


You got the same error 2 years ago. It seems some data files are missing.
https://github.com/therneau/survival/issues/12
F.

	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Mon Sep  9 00:13:28 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Sun, 8 Sep 2019 22:13:28 +0000
Subject: [Rd] [External]  Missing function Rf_findFun3
In-Reply-To: <CA+JCgN2vJ78NDXYUg-5SsXexa0r35=WLa1+HVTR=OaUpVv4Aiw@mail.gmail.com>
References: <CA+JCgN17j1myHXxvgckej3mYv5n+s5xYQ13_khPwPVEgCzbrhQ@mail.gmail.com>
 <alpine.DEB.2.21.1909080725330.2872@luke-Latitude-7480>
 <CA+JCgN2vJ78NDXYUg-5SsXexa0r35=WLa1+HVTR=OaUpVv4Aiw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1909081708260.2872@luke-Latitude-7480>

On Sun, 8 Sep 2019, Laurent Gautier wrote:

> I am not using the C API from a package but with an embedded R.

Same rules apply.

> Why have it declared in the include/ if it cannot be accessed then?

Rinternals.h is used by R internally, as the name suggests. Only a
small fraction of the things declared there are part of the API.

Would it be better to separate out the things that are in the API into
a separate header? Probably. Would doing this be a good use of our
limited time resources? Probably not. Would doing this prevent people
from using things they shouldn't? Not likely.

Best,

luke

> 
> Best,
> 
> Laurent
> 
> On Sun, Sep 8, 2019, 8:27 AM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>       On Sat, 7 Sep 2019, Laurent Gautier wrote:
>
>       > Hi,
>       >
>       >
>       > The function `Rf_findFun3` is declared in
>       > `$(R CMD CONFIG HOME)/lib/R/include/Rinternals.h`
>       > but appears to be missing from R's shared library (R.so).
>       >
>       > Is this an oversight?
>
>       No. This is not part of the API supported for use in packages.
>
>       Best,
>
>       luke
>
>       >
>       > Best,
>       >
>       > Laurent
>       >
>       >? ? ? ?[[alternative HTML version deleted]]
>       >
>       > ______________________________________________
>       > R-devel at r-project.org mailing list
>       > https://stat.ethz.ch/mailman/listinfo/r-devel
>       >
>
>       --
>       Luke Tierney
>       Ralph E. Wareham Professor of Mathematical Sciences
>       University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ?
>       ?319-335-3386
>       Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ?
>       ?319-335-3017
>       ? ? Actuarial Science
>       241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:?
>       ?luke-tierney at uiowa.edu
>       Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:?
>       http://www.stat.uiowa.edu
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From j@me@@|@he@ter @end|ng |rom gm@||@com  Mon Sep  9 21:03:39 2019
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Mon, 9 Sep 2019 15:03:39 -0400
Subject: [Rd] install_github and survival
In-Reply-To: <771925$cbifqp@ironport10.mayo.edu>
References: <771925$cbifqp@ironport10.mayo.edu>
Message-ID: <CAD6tx97u4LHoNQbWhqQsFddX95AW9pNbodr-VS8z91jqL75_Mw@mail.gmail.com>

I just sent a PR that makes a few small changes to the package and
fixes the installation with `install_github()` (and also `R CMD
INSTALL`) and other ways of installing the package.

https://github.com/therneau/survival/pull/84

Jim

On Thu, Sep 5, 2019 at 1:53 PM Therneau, Terry M., Ph.D. via R-devel
<r-devel at r-project.org> wrote:
>
> I treat CRAN as the main repository for survival, but I have also had a github
> (therneau/survival) version for a couple of years.  It has a vignette2 directory, for
> instance, that contains extra vignettes that either take too long to run or depend on
> other packages.  It also gets updated more often than CRAN (though those updates mght not
> be as well tested yet).
>
> In any case, since it is there, people will of course run install_github against it.
> I've added a config script to do the one extra step necessary, but when I try
> install_github it fails.   I'm clearly doing something wrong.  If someone were willing to
> contribute a fix I would be most grateful.
>
> survival3.1-0 is almost ready for CRAN, by the way.   Reverse dependency checks of hdnom
> turned up one last thing to repair...
>
>
> Terry Therneau
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Thu Sep  5 17:09:53 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Thu, 5 Sep 2019 15:09:53 +0000 (UTC)
Subject: [Rd] R-intro: Appendix A: attach position
Message-ID: <555582296.1805401.1567696193717-8821@mail.yahoo.com>


In "An Introduction to R", in "Appendix A? A sample session", in the part on Michelson data, information for
attach(mm)
is
Make the data frame visible at position 3 (the default).

In fact, the 'attach' is at position 2.


From @zwj|08 @end|ng |rom gm@||@com  Tue Sep  3 20:49:56 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Tue, 3 Sep 2019 14:49:56 -0400
Subject: [Rd] [ALTREP] What is the meaning of the return value of Is_sorted
 and No_NA function?
Message-ID: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ-6992@mail.gmail.com>

Hi,



I would like to figure out the meaning of the return value of these two
functions. Here are the default definitions I find from R source code:



static int altreal_Is_sorted_default(SEXP x) { return UNKNOWN_SORTEDNESS; }

static int altreal_No_NA_default(SEXP x) { return 0; }

I guess the macro *UNKNOWN_SORTEDNESS *in *Is_sorted* and 0 in *No_NA
*simply means
unknown sorted/NA status of the vector, so R will loop over the vector and
find the answer. However, what should we return in these functions to
indicate whether the vector has been sorted/ contains NA? My initial guess
is 0/1 but since *NA_NA *uses 0 as its default value so it will be
ambiguous. Are there any macros to define yes/no return values for these
functions? I would appreciate any thought here.



Best,

Jiefei

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Sep 11 09:56:37 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 11 Sep 2019 09:56:37 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
Message-ID: <23928.43189.410927.15494@stat.math.ethz.ch>

>>>>> Hilmar Berger 
>>>>>     on Wed, 4 Sep 2019 15:25:46 +0200 writes:

    > Dear all,

    > I just stumbled upon some behavior of the == operator which is at least 
    > somewhat inconsistent.

    > R version 3.6.1 (2019-07-05) -- "Action of the Toes"
    > Copyright (C) 2019 The R Foundation for Statistical Computing
    > Platform: x86_64-w64-mingw32/x64 (64-bit)

    >> list(a=1:3, b=LETTERS[1:3]) == NULL
    > logical(0)
    >> matrix(1:6, 2,3) == NULL
    > logical(0)
    >> data.frame(a=1:3, b=LETTERS[1:3]) == NULL # same for == logical(0)
    > Error in matrix(if (is.null(value)) logical() else value, nrow = nr, 
    > dimnames = list(rn,? :
    > ? length of 'dimnames' [2] not equal to array extent

    >> data.frame(NULL) == 1
    > <0 x 0 matrix>
    >> data.frame(NULL) == NULL
    > <0 x 0 matrix>
    >> data.frame(NULL) == logical(0)
    > <0 x 0 matrix>

    > I wonder if data.frame(<some non-empty data>) == NULL should also return 
    > a value instead of an error. R help reads:

        > "At least one of |x| and |y| must be an atomic vector, but
	>  if the other is a list R attempts to coerce it to the
	>  type of the atomic vector: this will succeed if the list
	>  is made up of elements of length one that can be coerced
	>  to the correct type.

	>  If the two arguments are atomic vectors of different
	>  types, one is coerced to the type of the other, the
	>  (decreasing) order of precedence being character, complex,
	>  numeric, integer, logical and raw."

    > It is not clear from the help what to expect for NULL or
    > empty atomic vectors. 

Well, strictly speaking an error would be expected for NULL,
as it is *not* an atomic vector, and your main issue

 " data.frame(..) == NULL "

would already be settled by the first half sentence from the
doc, and strictly speaking, even  data.frame(NULL) == NULL
"should" return an error ((Note: I'm not saying it really
 should, but at least the reference does not say it should work at all))

Now,  logical(0)  on the other hand *is* an atomic vector ... 


    > It is also strange that for list()
    > there is no error but for data.frame() with the same data
    > an error is thrown. I can see that there might be reasons
    > to return logical(0) instead of FALSE, but I do not fully
    > understand why there should be differences between
    > e.g. matrix() and data.frame().

Well, a [regular base R] matrix() is atomic  and a data frame is not.

    > Also, It is at least somewhat strange that
    > data.frame(NULL) == NULL and similar expressions return an
    > empty matrix, while comparing a normal filled matrix to
    > NULL returns logical(0).

    > Even if this behavior is expected, the error message shown
    > by data.frame(...) == NULL is not very informative.

I'm not at all sure there's any need for a change here.

I would say the following general thinking should be applied

1. The general rule that '==' should be used only for comparing 
  atomic objects (as it returns an atomic object, a 'logical' with
  corresponding attributes), is really principal
  and using '==' for anything else has never been "the idea".

2. There are (two) "semi-exceptions" to the above:
2a) Sometimes it has been convenient to treat NULL as if it was
     a zero-length atomic object (of "arbitrary" type/mode).
2b) data.frame()s "should typically" behave like matrices in
    many situations, notably when indexed {and that rule is
    violated (on purpose) by tibbles .. ("drop=FALSE" etc, but
    that's another story)} 

So because of these exceptions, you and possibly others may
think  '=='  should "work" with data.frame()s and/or NULL, but
I would not tend to agree.

    > Thanks and best regards,
    > Hilmar

You are welcome!
Martin


From berger @end|ng |rom mp||b-ber||n@mpg@de  Wed Sep 11 11:55:10 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Wed, 11 Sep 2019 11:55:10 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <23928.43189.410927.15494@stat.math.ethz.ch>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
Message-ID: <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>

Dear Martin,

On 11/09/2019 09:56, Martin Maechler wrote:
>
>      > I wonder if data.frame(<some non-empty data>) == NULL should also return
>      > a value instead of an error. R help reads:
>
>          > "At least one of |x| and |y| must be an atomic vector, but
> 	>  if the other is a list R attempts to coerce it to the
> 	>  type of the atomic vector: this will succeed if the list
> 	>  is made up of elements of length one that can be coerced
> 	>  to the correct type.
>
> 	>  If the two arguments are atomic vectors of different
> 	>  types, one is coerced to the type of the other, the
> 	>  (decreasing) order of precedence being character, complex,
> 	>  numeric, integer, logical and raw."
>
>      > It is not clear from the help what to expect for NULL or
>      > empty atomic vectors.
>
> Well, strictly speaking an error would be expected for NULL,
> as it is *not* an atomic vector, and your main issue
>
>   " data.frame(..) == NULL "
>
> would already be settled by the first half sentence from the
> doc, and strictly speaking, even  data.frame(NULL) == NULL
> "should" return an error ((Note: I'm not saying it really
>   should, but at least the reference does not say it should work at all))
Thanks, this explanation makes total sense to me. I did not consider 
that NULL might be non-atomic. Strangely, is.atomic(NULL) returns TRUE. 
On the other hand, I understand that one would not like to treat it like 
atomic in ==.

However, in this case one might expect that the error message would be 
more like that for S4 objects (which always seem to report an 
informative error message for ==):

 > Pos <- setClass("Pos", slots = c(latitude = "numeric", longitude = 
"numeric", altitude = "numeric"))
 > p = Pos()
 > p == NULL
Error in p == NULL :
 ? comparison (1) is possible only for atomic and list types
 > p == "FOO"
Error in p == "FOO" :
 ? comparison (1) is possible only for atomic and list types

In the data.frame()==NULL cases I have the impression that the fact that 
both sides are non-atomic is not properly detected and therefore R tries 
to go on with the == method for data.frames.

 From a cursory check in Ops.data.frame() and some debugging I have the 
impression that the case of the second argument being non-atomic or 
empty is not handled at all and the function progresses until the end, 
where it fails in the last step on an empty value:

matrix(unlist(value, recursive = FALSE, use.names = FALSE),
 ??? nrow = nr, dimnames = list(rn, cn))

Best regards,
Hilmar

-- 
Dr. Hilmar Berger, MD
Max Planck Institute for Infection Biology
Charit?platz 1
D-10117 Berlin
GERMANY

Phone:  + 49 30 28460 430
Fax:    + 49 30 28460 401
  
E-Mail: berger at mpiib-berlin.mpg.de
Web   : www.mpiib-berlin.mpg.de


	[[alternative HTML version deleted]]


From berger @end|ng |rom mp||b-ber||n@mpg@de  Wed Sep 11 12:24:35 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Wed, 11 Sep 2019 12:24:35 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
Message-ID: <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>

Another example where a data.frame is compared to (here non-null, 
non-empty) non-atomic values in Ops.data.frame, resulting in an error 
message:

setClass("FOOCLASS2",
 ???????? slots = c(M="matrix")
)
ma = new("FOOCLASS2", M=matrix(rnorm(300), 30,10))

 > isS4(ma)
[1] TRUE
 > ma == data.frame(a=1:3)
Error in eval(f) : dims [product 1] do not match the length of object [3]

As for the NULL/logical(0) cases I would suggest to explicitly test for 
invalid conditions in Ops.data.frame and generate a comprehensible 
message (e.g. "comparison is possible only for atomic and list types") 
if appropriate.

Best regards,
Hilmar


On 11/09/2019 11:55, Hilmar Berger wrote:
>
> In the data.frame()==NULL cases I have the impression that the fact 
> that both sides are non-atomic is not properly detected and therefore 
> R tries to go on with the == method for data.frames.
>
> From a cursory check in Ops.data.frame() and some debugging I have the 
> impression that the case of the second argument being non-atomic or 
> empty is not handled at all and the function progresses until the end, 
> where it fails in the last step on an empty value:
>
> matrix(unlist(value, recursive = FALSE, use.names = FALSE),
> ??? nrow = nr, dimnames = list(rn, cn)) 

-- 
Dr. Hilmar Berger, MD
Max Planck Institute for Infection Biology
Charit?platz 1
D-10117 Berlin
GERMANY

Phone:  + 49 30 28460 430
Fax:    + 49 30 28460 401
  
E-Mail: berger at mpiib-berlin.mpg.de
Web   : www.mpiib-berlin.mpg.de


From berger @end|ng |rom mp||b-ber||n@mpg@de  Wed Sep 11 13:26:01 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Wed, 11 Sep 2019 13:26:01 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
 <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
Message-ID: <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>

Sorry, I can't reproduce the example below even on the same machine. 
However, the following example produces the same error as NULL values in 
prior examples:

 > setClass("FOOCLASS",
+????????? representation("list")
+ )
 > ma = new("FOOCLASS", list(M=matrix(rnorm(300), 30,10)))
 > isS4(ma)
[1] TRUE
 > data.frame(a=1:3) == ma
Error in matrix(unlist(value, recursive = FALSE, use.names = FALSE), 
nrow = nr,? :
 ? length of 'dimnames' [2] not equal to array extent

Best,
Hilmar


On 11/09/2019 12:24, Hilmar Berger wrote:
> Another example where a data.frame is compared to (here non-null, 
> non-empty) non-atomic values in Ops.data.frame, resulting in an error 
> message:
>
> setClass("FOOCLASS2",
> ???????? slots = c(M="matrix")
> )
> ma = new("FOOCLASS2", M=matrix(rnorm(300), 30,10))
>
> > isS4(ma)
> [1] TRUE
> > ma == data.frame(a=1:3)
> Error in eval(f) : dims [product 1] do not match the length of object [3]
>
> As for the NULL/logical(0) cases I would suggest to explicitly test 
> for invalid conditions in Ops.data.frame and generate a comprehensible 
> message (e.g. "comparison is possible only for atomic and list types") 
> if appropriate.
>
> Best regards,
> Hilmar
>
>
> On 11/09/2019 11:55, Hilmar Berger wrote:
>>
>> In the data.frame()==NULL cases I have the impression that the fact 
>> that both sides are non-atomic is not properly detected and therefore 
>> R tries to go on with the == method for data.frames.
>>
>> From a cursory check in Ops.data.frame() and some debugging I have 
>> the impression that the case of the second argument being non-atomic 
>> or empty is not handled at all and the function progresses until the 
>> end, where it fails in the last step on an empty value:
>>
>> matrix(unlist(value, recursive = FALSE, use.names = FALSE),
>> ??? nrow = nr, dimnames = list(rn, cn)) 
>

-- 
Dr. Hilmar Berger, MD
Max Planck Institute for Infection Biology
Charit?platz 1
D-10117 Berlin
GERMANY

Phone:  + 49 30 28460 430
Fax:    + 49 30 28460 401
  
E-Mail: berger at mpiib-berlin.mpg.de
Web   : www.mpiib-berlin.mpg.de


From gpetr|@ @end|ng |rom u@rk@edu  Wed Sep 11 15:47:11 2019
From: gpetr|@ @end|ng |rom u@rk@edu (Giovanni Petris)
Date: Wed, 11 Sep 2019 13:47:11 +0000
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
Message-ID: <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>

Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...

Thank you,
Giovanni

________________________________________
From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
Sent: Tuesday, September 10, 2019 16:44
To: r-help at r-project.org
Subject: [R] Calling a LAPACK subroutine from R

Hello R-helpers!

I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?

> ### AR(1) Precision matrix
> n <- 4L
> phi <- 0.64
> AB <- matrix(0, 2, n)
> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> AB[2, -n] <- -phi
> round(AB, 3)
      [,1]  [,2]  [,3] [,4]
[1,]  1.00  1.41  1.41    1
[2,] -0.64 -0.64 -0.64    0
>
> ### Cholesky factor
> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
+                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
  Fortran symbol name "dpbtrf" not in load table
> sessionInfo()
R version 3.6.0 (2019-04-26)
Platform: x86_64-apple-darwin18.5.0 (64-bit)
Running under: macOS Mojave 10.14.6

Matrix products: default
BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.6.0 tools_3.6.0

Thank you in advance for your help!

Best,
Giovanni Petris



--
Giovanni Petris, PhD
Professor
Director of Statistics
Department of Mathematical Sciences
University of Arkansas - Fayetteville, AR 72701


______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
and provide commented, minimal, self-contained, reproducible code.


From g@bembecker @end|ng |rom gm@||@com  Wed Sep 11 19:57:55 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 11 Sep 2019 10:57:55 -0700
Subject: [Rd] 
 [ALTREP] What is the meaning of the return value of Is_sorted
 and No_NA function?
In-Reply-To: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ-6992@mail.gmail.com>
References: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ-6992@mail.gmail.com>
Message-ID: <CAD4oTHH0SQiRHZvaW2ZANVag0P2EPjsr1e51Uqwd5iDT+6oo9A@mail.gmail.com>

Hi Jiefei,

The meanings of the return values for sortedness can be found in
RInternals.h, and are as follows:

/* ALTREP sorting support */
enum {SORTED_DECR_NA_1ST = -2,
      SORTED_DECR = -1,
      UNKNOWN_SORTEDNESS = INT_MIN, /*INT_MIN is NA_INTEGER! */
      SORTED_INCR = 1,
      SORTED_INCR_NA_1ST = 2,
      KNOWN_UNSORTED = 0};

The default value there is NA_INTEGER (ie INT_MIN), indicating that there
is no sortedness information.

Currently, *_NO_NA  effectively return a boolean, (even though the actual
return value is int). This can be seen in the method we provide for compact
sequences in altclasses.c:


static int compact_intseq_No_NA(SEXP x)
{
#ifdef COMPACT_INTSEQ_MUTABLE
    /* If the vector has been expanded it may have been modified. */
    if (COMPACT_SEQ_EXPANDED(x) != R_NilValue)
return FALSE;
#endif
    return TRUE;
}

(FALSE is a macro for 0, TRUE is a macro for 1).

Think of the meaning of the return value to No_NA methods as the object's
answer to the following question

"Are you sure there are zero NAs in your data?"

When it is sure of that, it  says "yes" (returning 1, ie TRUE). When it
either is sure there are NAs *OR* doesn't have any information about
whether there are NAs, it says "no" (returning 0, ie FALSE).

Also please note, it is possible there may be another API point in the
future which asks the object *how many NAs it has.??* If that materializes,
No_NA would just  consume the answer to thatto get the binarized version,
but again there is nothing like that in there now.

Hope that helps.

Best,
~G

On Wed, Sep 11, 2019 at 12:04 AM Wang Jiefei <szwjf08 at gmail.com> wrote:

> Hi,
>
>
>
> I would like to figure out the meaning of the return value of these two
> functions. Here are the default definitions I find from R source code:
>
>
>
> static int altreal_Is_sorted_default(SEXP x) { return UNKNOWN_SORTEDNESS; }
>
> static int altreal_No_NA_default(SEXP x) { return 0; }
>
> I guess the macro *UNKNOWN_SORTEDNESS *in *Is_sorted* and 0 in *No_NA
> *simply means
> unknown sorted/NA status of the vector, so R will loop over the vector and
> find the answer. However, what should we return in these functions to
> indicate whether the vector has been sorted/ contains NA? My initial guess
> is 0/1 but since *NA_NA *uses 0 as its default value so it will be
> ambiguous. Are there any macros to define yes/no return values for these
> functions? I would appreciate any thought here.
>
>
>
> Best,
>
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Sep 11 20:49:13 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Wed, 11 Sep 2019 14:49:13 -0400
Subject: [Rd] 
 [ALTREP] What is the meaning of the return value of Is_sorted
 and No_NA function?
In-Reply-To: <CAD4oTHH0SQiRHZvaW2ZANVag0P2EPjsr1e51Uqwd5iDT+6oo9A@mail.gmail.com>
References: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ-6992@mail.gmail.com>
 <CAD4oTHH0SQiRHZvaW2ZANVag0P2EPjsr1e51Uqwd5iDT+6oo9A@mail.gmail.com>
Message-ID: <CAGiFhPMJqWpjsYuz+9jwe_B2x=n=BpSUXwfQsU_EpXBk9j6R-g@mail.gmail.com>

Hi Gabriel,

Thanks for your answer and future update plan. Somehow this email has been
delayed for a week, so there might be a wired reply from me saying that I
have found the answer from the R source code, it was sent from me last
week. Hopefully, this reply will not cost another week to post:)

As a side note, I like the idea that defining a macro for sortedness, and I
can see why we can only have a binary answer for NO_NA (since the return
value is actually bool). For making the code more readable, and for
possibly working with the future R release, is it possible to define a
macro for NO_NA function in RInternal.h? So if there is any change in NO_NA
function, there is no need to modify the code. Also, the code can be more
readable by doing that.

Best,
Jiefei

On Wed, Sep 11, 2019 at 1:58 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Jiefei,
>
> The meanings of the return values for sortedness can be found in
> RInternals.h, and are as follows:
>
> /* ALTREP sorting support */
> enum {SORTED_DECR_NA_1ST = -2,
>       SORTED_DECR = -1,
>       UNKNOWN_SORTEDNESS = INT_MIN, /*INT_MIN is NA_INTEGER! */
>       SORTED_INCR = 1,
>       SORTED_INCR_NA_1ST = 2,
>       KNOWN_UNSORTED = 0};
>
> The default value there is NA_INTEGER (ie INT_MIN), indicating that there
> is no sortedness information.
>
> Currently, *_NO_NA  effectively return a boolean, (even though the actual
> return value is int). This can be seen in the method we provide for compact
> sequences in altclasses.c:
>
>
> static int compact_intseq_No_NA(SEXP x)
> {
> #ifdef COMPACT_INTSEQ_MUTABLE
>     /* If the vector has been expanded it may have been modified. */
>     if (COMPACT_SEQ_EXPANDED(x) != R_NilValue)
> return FALSE;
> #endif
>     return TRUE;
> }
>
> (FALSE is a macro for 0, TRUE is a macro for 1).
>
> Think of the meaning of the return value to No_NA methods as the object's
> answer to the following question
>
> "Are you sure there are zero NAs in your data?"
>
> When it is sure of that, it  says "yes" (returning 1, ie TRUE). When it
> either is sure there are NAs *OR* doesn't have any information about
> whether there are NAs, it says "no" (returning 0, ie FALSE).
>
> Also please note, it is possible there may be another API point in the
> future which asks the object *how many NAs it has.??* If that
> materializes, No_NA would just  consume the answer to thatto get the
> binarized version, but again there is nothing like that in there now.
>
> Hope that helps.
>
> Best,
> ~G
>
> On Wed, Sep 11, 2019 at 12:04 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>
>> Hi,
>>
>>
>>
>> I would like to figure out the meaning of the return value of these two
>> functions. Here are the default definitions I find from R source code:
>>
>>
>>
>> static int altreal_Is_sorted_default(SEXP x) { return UNKNOWN_SORTEDNESS;
>> }
>>
>> static int altreal_No_NA_default(SEXP x) { return 0; }
>>
>> I guess the macro *UNKNOWN_SORTEDNESS *in *Is_sorted* and 0 in *No_NA
>> *simply means
>> unknown sorted/NA status of the vector, so R will loop over the vector and
>> find the answer. However, what should we return in these functions to
>> indicate whether the vector has been sorted/ contains NA? My initial guess
>> is 0/1 but since *NA_NA *uses 0 as its default value so it will be
>> ambiguous. Are there any macros to define yes/no return values for these
>> functions? I would appreciate any thought here.
>>
>>
>>
>> Best,
>>
>> Jiefei
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From bhh @end|ng |rom x@4@||@n|  Wed Sep 11 21:38:01 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Wed, 11 Sep 2019 21:38:01 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
Message-ID: <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>


The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
You can force it to do that with a (dummy) solve for example.
Put this at start of your script:

<code>
# dummy code to get LAPACK library loaded
X1 <- diag(2,2)
x1 <- rep(2,2)
# X1;x1
z <- solve(X1,x1)
</code>

followed by the rest of your script.
You will get a warning (I do) that  "passing a character vector  to .Fortran is not portable".
On other systems this may gave fatal errors. This is quick and very dirty. Don't do it.

I believe there is a better and much safer way to achieve what you want.
Here goes.

Create a folder (directory) src in the directory where your script resides.
Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an integer instead of character

<xdpbtrf.f>
c intermediate for dpbtrf

      SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )

c      .. Scalar Arguments ..
      integer         kUPLO
      INTEGER         INFO, KD, LDAB, N

c  .. Array Arguments ..
      DOUBLE PRECISION   AB( LDAB, * )

      character UPLO
c     convert integer argument to character
      if(kUPLO .eq. 1 ) then
          UPLO = 'L'
      else
          UPLO = 'U'
      endif

      call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
      return
      end
</xdpbtrf.f>


Instead of a character argument UPLO it takes an integer argument kUPLO.
The meaning should be obvious from the code.

Now create a shell script in the folder of your script to generate a dynamic library to be loaded in your script:

<mkso.sh>
# Build a binary dynamic library for accessing Lapack dpbtrf

# syntax checking
 
SONAME=xdpbtrf.so

echo Strict syntax checking
echo ----------------------
gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1

LAPACK=$(R CMD config LAPACK_LIBS)
R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
</mkso.sh>

To load the dynamic library xdpbtrf.so  change your script into this

<yourscript>
dyn.load("xdpbtrf.so")
n <- 4L
phi <- 0.64
AB <- matrix(0, 2, n)
AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
AB[2, -n] <- -phi
round(AB, 3)

AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
                            KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
AB.ch

</yourscript>

and you are good to go.

You should always do something  as described above when you need to pass character arguments to Fortran code.

All of this was tested and run on macOS using the CRAN version of R.

Berend Hasselman

> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
> 
> Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...
> 
> Thank you,
> Giovanni
> 
> ________________________________________
> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
> Sent: Tuesday, September 10, 2019 16:44
> To: r-help at r-project.org
> Subject: [R] Calling a LAPACK subroutine from R
> 
> Hello R-helpers!
> 
> I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?
> 
>> ### AR(1) Precision matrix
>> n <- 4L
>> phi <- 0.64
>> AB <- matrix(0, 2, n)
>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>> AB[2, -n] <- -phi
>> round(AB, 3)
>      [,1]  [,2]  [,3] [,4]
> [1,]  1.00  1.41  1.41    1
> [2,] -0.64 -0.64 -0.64    0
>> 
>> ### Cholesky factor
>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
>  Fortran symbol name "dpbtrf" not in load table
>> sessionInfo()
> R version 3.6.0 (2019-04-26)
> Platform: x86_64-apple-darwin18.5.0 (64-bit)
> Running under: macOS Mojave 10.14.6
> 
> Matrix products: default
> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.6.0 tools_3.6.0
> 
> Thank you in advance for your help!
> 
> Best,
> Giovanni Petris
> 
> 
> 
> --
> Giovanni Petris, PhD
> Professor
> Director of Statistics
> Department of Mathematical Sciences
> University of Arkansas - Fayetteville, AR 72701
> 
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Sep 11 21:49:39 2019
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 11 Sep 2019 21:49:39 +0200
Subject: [Rd] R-intro: Appendix A: attach position
In-Reply-To: <555582296.1805401.1567696193717-8821@mail.yahoo.com>
References: <555582296.1805401.1567696193717-8821@mail.yahoo.com>
Message-ID: <23929.20435.833713.42481@hornik.net>

>>>>> Suharto Anggono Suharto Anggono via R-devel writes:

Thanks: fixed now in the trunk.

Best
-k

> In "An Introduction to R", in "Appendix A? A sample session", in the part on Michelson data, information for
> attach(mm)
> is
> Make the data frame visible at position 3 (the default).

> In fact, the 'attach' is at position 2.

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From gor@n@bro@trom @end|ng |rom umu@@e  Wed Sep 11 22:07:54 2019
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Wed, 11 Sep 2019 22:07:54 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
Message-ID: <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>

Berend,

I do not think this works with gfortran 7+. I am calling the BLAS 
subroutine dgemv from Fortran code in my package eha, and the check 
(with R-devel) gives:

gmlfun.f:223:1: warning: type of ?dgemv? does not match original 
declaration [-Wlto-type-mismatch]
       &     score, ione)
  ^
/home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type 
mismatch in parameter 12
  F77_NAME(dgemv)(const char *trans, const int *m, const int *n,

Type of a Fortran subroutine is matched against type of a C function?! 
My conclusion is that it is impossible to call a BLAS subroutine with a 
character parameter from Fortran code (nowadays). Calling from C code is 
fine, on the other hand(!).

I have recently asked about this on R-pkg-devel, but not received any 
useful answers, and my submission to CRAN is rejected. I solve it by 
making a personal copy of dgemv and changing the character parameter to 
integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and 
Richard Hanson as authors of eha. And a Copyright note, all in the 
DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran 
code in C with f2c)?

G?ran

On 2019-09-11 21:38, Berend Hasselman wrote:
> 
> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
> You can force it to do that with a (dummy) solve for example.
> Put this at start of your script:
> 
> <code>
> # dummy code to get LAPACK library loaded
> X1 <- diag(2,2)
> x1 <- rep(2,2)
> # X1;x1
> z <- solve(X1,x1)
> </code>
> 
> followed by the rest of your script.
> You will get a warning (I do) that  "passing a character vector  to .Fortran is not portable".
> On other systems this may gave fatal errors. This is quick and very dirty. Don't do it.
> 
> I believe there is a better and much safer way to achieve what you want.
> Here goes.
> 
> Create a folder (directory) src in the directory where your script resides.
> Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an integer instead of character
> 
> <xdpbtrf.f>
> c intermediate for dpbtrf
> 
>        SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
> 
> c      .. Scalar Arguments ..
>        integer         kUPLO
>        INTEGER         INFO, KD, LDAB, N
> 
> c  .. Array Arguments ..
>        DOUBLE PRECISION   AB( LDAB, * )
> 
>        character UPLO
> c     convert integer argument to character
>        if(kUPLO .eq. 1 ) then
>            UPLO = 'L'
>        else
>            UPLO = 'U'
>        endif
> 
>        call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>        return
>        end
> </xdpbtrf.f>
> 
> 
> Instead of a character argument UPLO it takes an integer argument kUPLO.
> The meaning should be obvious from the code.
> 
> Now create a shell script in the folder of your script to generate a dynamic library to be loaded in your script:
> 
> <mkso.sh>
> # Build a binary dynamic library for accessing Lapack dpbtrf
> 
> # syntax checking
>   
> SONAME=xdpbtrf.so
> 
> echo Strict syntax checking
> echo ----------------------
> gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
> 
> LAPACK=$(R CMD config LAPACK_LIBS)
> R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
> </mkso.sh>
> 
> To load the dynamic library xdpbtrf.so  change your script into this
> 
> <yourscript>
> dyn.load("xdpbtrf.so")
> n <- 4L
> phi <- 0.64
> AB <- matrix(0, 2, n)
> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> AB[2, -n] <- -phi
> round(AB, 3)
> 
> AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>                              KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
> AB.ch
> 
> </yourscript>
> 
> and you are good to go.
> 
> You should always do something  as described above when you need to pass character arguments to Fortran code.
> 
> All of this was tested and run on macOS using the CRAN version of R.
> 
> Berend Hasselman
> 
>> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
>>
>> Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...
>>
>> Thank you,
>> Giovanni
>>
>> ________________________________________
>> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
>> Sent: Tuesday, September 10, 2019 16:44
>> To: r-help at r-project.org
>> Subject: [R] Calling a LAPACK subroutine from R
>>
>> Hello R-helpers!
>>
>> I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?
>>
>>> ### AR(1) Precision matrix
>>> n <- 4L
>>> phi <- 0.64
>>> AB <- matrix(0, 2, n)
>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>> AB[2, -n] <- -phi
>>> round(AB, 3)
>>       [,1]  [,2]  [,3] [,4]
>> [1,]  1.00  1.41  1.41    1
>> [2,] -0.64 -0.64 -0.64    0
>>>
>>> ### Cholesky factor
>>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
>>   Fortran symbol name "dpbtrf" not in load table
>>> sessionInfo()
>> R version 3.6.0 (2019-04-26)
>> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>> Running under: macOS Mojave 10.14.6
>>
>> Matrix products: default
>> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>>
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.0 tools_3.6.0
>>
>> Thank you in advance for your help!
>>
>> Best,
>> Giovanni Petris
>>
>>
>>
>> --
>> Giovanni Petris, PhD
>> Professor
>> Director of Statistics
>> Department of Mathematical Sciences
>> University of Arkansas - Fayetteville, AR 72701
>>
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
>> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
>> and provide commented, minimal, self-contained, reproducible code.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Wed Sep 11 22:16:37 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Wed, 11 Sep 2019 16:16:37 -0400
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
Message-ID: <CAL6gwnJ3JQ==3oHwGHjMv62dk6viZFikcVo44K7vg0oq4jPX0g@mail.gmail.com>

Can you write a small C function that calls LAPACK call that fro your
Fortran code? Yes, an extra step but maybe less traumatic than rewriting
parts of LAPACK directly.

Avi

On Wed, Sep 11, 2019 at 4:08 PM G?ran Brostr?m <goran.brostrom at umu.se>
wrote:

> Berend,
>
> I do not think this works with gfortran 7+. I am calling the BLAS
> subroutine dgemv from Fortran code in my package eha, and the check
> (with R-devel) gives:
>
> gmlfun.f:223:1: warning: type of ?dgemv? does not match original
> declaration [-Wlto-type-mismatch]
>        &     score, ione)
>   ^
> /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type
> mismatch in parameter 12
>   F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
>
> Type of a Fortran subroutine is matched against type of a C function?!
> My conclusion is that it is impossible to call a BLAS subroutine with a
> character parameter from Fortran code (nowadays). Calling from C code is
> fine, on the other hand(!).
>
> I have recently asked about this on R-pkg-devel, but not received any
> useful answers, and my submission to CRAN is rejected. I solve it by
> making a personal copy of dgemv and changing the character parameter to
> integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and
> Richard Hanson as authors of eha. And a Copyright note, all in the
> DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran
> code in C with f2c)?
>
> G?ran
>
> On 2019-09-11 21:38, Berend Hasselman wrote:
> >
> > The Lapack library is loaded automatically by R itself when it needs it
> for doing some calculation.
> > You can force it to do that with a (dummy) solve for example.
> > Put this at start of your script:
> >
> > <code>
> > # dummy code to get LAPACK library loaded
> > X1 <- diag(2,2)
> > x1 <- rep(2,2)
> > # X1;x1
> > z <- solve(X1,x1)
> > </code>
> >
> > followed by the rest of your script.
> > You will get a warning (I do) that  "passing a character vector  to
> .Fortran is not portable".
> > On other systems this may gave fatal errors. This is quick and very
> dirty. Don't do it.
> >
> > I believe there is a better and much safer way to achieve what you want.
> > Here goes.
> >
> > Create a folder (directory) src in the directory where your script
> resides.
> > Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an
> integer instead of character
> >
> > <xdpbtrf.f>
> > c intermediate for dpbtrf
> >
> >        SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
> >
> > c      .. Scalar Arguments ..
> >        integer         kUPLO
> >        INTEGER         INFO, KD, LDAB, N
> >
> > c  .. Array Arguments ..
> >        DOUBLE PRECISION   AB( LDAB, * )
> >
> >        character UPLO
> > c     convert integer argument to character
> >        if(kUPLO .eq. 1 ) then
> >            UPLO = 'L'
> >        else
> >            UPLO = 'U'
> >        endif
> >
> >        call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
> >        return
> >        end
> > </xdpbtrf.f>
> >
> >
> > Instead of a character argument UPLO it takes an integer argument kUPLO.
> > The meaning should be obvious from the code.
> >
> > Now create a shell script in the folder of your script to generate a
> dynamic library to be loaded in your script:
> >
> > <mkso.sh>
> > # Build a binary dynamic library for accessing Lapack dpbtrf
> >
> > # syntax checking
> >
> > SONAME=xdpbtrf.so
> >
> > echo Strict syntax checking
> > echo ----------------------
> > gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
> >
> > LAPACK=$(R CMD config LAPACK_LIBS)
> > R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
> > </mkso.sh>
> >
> > To load the dynamic library xdpbtrf.so  change your script into this
> >
> > <yourscript>
> > dyn.load("xdpbtrf.so")
> > n <- 4L
> > phi <- 0.64
> > AB <- matrix(0, 2, n)
> > AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> > AB[2, -n] <- -phi
> > round(AB, 3)
> >
> > AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
> >                              KD = 1L, AB = AB, LDAB = 2L, INFO =
> as.integer(0))$AB
> > AB.ch
> >
> > </yourscript>
> >
> > and you are good to go.
> >
> > You should always do something  as described above when you need to pass
> character arguments to Fortran code.
> >
> > All of this was tested and run on macOS using the CRAN version of R.
> >
> > Berend Hasselman
> >
> >> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
> >>
> >> Sorry for cross-posting, but I realized my question might be more
> appropriate for r-devel...
> >>
> >> Thank you,
> >> Giovanni
> >>
> >> ________________________________________
> >> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni
> Petris <gpetris at uark.edu>
> >> Sent: Tuesday, September 10, 2019 16:44
> >> To: r-help at r-project.org
> >> Subject: [R] Calling a LAPACK subroutine from R
> >>
> >> Hello R-helpers!
> >>
> >> I am trying to call a LAPACK subroutine directly from my R code using
> .Fortran(), but R cannot find the symbol name. How can I register/load the
> appropriate library?
> >>
> >>> ### AR(1) Precision matrix
> >>> n <- 4L
> >>> phi <- 0.64
> >>> AB <- matrix(0, 2, n)
> >>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> >>> AB[2, -n] <- -phi
> >>> round(AB, 3)
> >>       [,1]  [,2]  [,3] [,4]
> >> [1,]  1.00  1.41  1.41    1
> >> [2,] -0.64 -0.64 -0.64    0
> >>>
> >>> ### Cholesky factor
> >>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
> >> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
> >> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB
> = AB,  :
> >>   Fortran symbol name "dpbtrf" not in load table
> >>> sessionInfo()
> >> R version 3.6.0 (2019-04-26)
> >> Platform: x86_64-apple-darwin18.5.0 (64-bit)
> >> Running under: macOS Mojave 10.14.6
> >>
> >> Matrix products: default
> >> BLAS/LAPACK:
> /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
> >>
> >> locale:
> >> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> >>
> >> attached base packages:
> >> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>
> >> loaded via a namespace (and not attached):
> >> [1] compiler_3.6.0 tools_3.6.0
> >>
> >> Thank you in advance for your help!
> >>
> >> Best,
> >> Giovanni Petris
> >>
> >>
> >>
> >> --
> >> Giovanni Petris, PhD
> >> Professor
> >> Director of Statistics
> >> Department of Mathematical Sciences
> >> University of Arkansas - Fayetteville, AR 72701
> >>
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
> >> PLEASE do read the posting guide
> https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
> >> and provide commented, minimal, self-contained, reproducible code.
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From gor@n@bro@trom @end|ng |rom umu@@e  Wed Sep 11 22:34:28 2019
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Wed, 11 Sep 2019 22:34:28 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <CAL6gwnJ3JQ==3oHwGHjMv62dk6viZFikcVo44K7vg0oq4jPX0g@mail.gmail.com>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
 <CAL6gwnJ3JQ==3oHwGHjMv62dk6viZFikcVo44K7vg0oq4jPX0g@mail.gmail.com>
Message-ID: <76489fbe-b818-bd32-2fcd-aedf160c913d@umu.se>



On 2019-09-11 22:16, Avraham Adler wrote:
> Can you write a small C function that calls LAPACK call that fro your 
> Fortran code? Yes, an extra step but maybe less traumatic than rewriting 
> parts of LAPACK directly.

Yes, I know how to do that, but I find it somewhat bizarre that it is 
impossible to call a Fortran subroutine from Fortran. And rewriting 
'dgemv' was simple: Just change character to integer and 'N' to 1. And 
rename the subroutine. The hard (tedious) part was to include all the 
LAPACK authors in my DESCRIPTION file.

My guess is that the root cause is that BLAS/LAPACK is written in 
FORTRAN 77, which is said to be a subset of the current Fortran version 
but obviously isn't.

Thanks, G?ran

> 
> Avi
> 
> On Wed, Sep 11, 2019 at 4:08 PM G?ran Brostr?m <goran.brostrom at umu.se 
> <mailto:goran.brostrom at umu.se>> wrote:
> 
>     Berend,
> 
>     I do not think this works with gfortran 7+. I am calling the BLAS
>     subroutine dgemv from Fortran code in my package eha, and the check
>     (with R-devel) gives:
> 
>     gmlfun.f:223:1: warning: type of ?dgemv? does not match original
>     declaration [-Wlto-type-mismatch]
>      ? ? ? ?&? ? ?score, ione)
>      ? ^
>     /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type
>     mismatch in parameter 12
>      ? F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
> 
>     Type of a Fortran subroutine is matched against type of a C function?!
>     My conclusion is that it is impossible to call a BLAS subroutine with a
>     character parameter from Fortran code (nowadays). Calling from C
>     code is
>     fine, on the other hand(!).
> 
>     I have recently asked about this on R-pkg-devel, but not received any
>     useful answers, and my submission to CRAN is rejected. I solve it by
>     making a personal copy of dgemv and changing the character parameter to
>     integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and
>     Richard Hanson as authors of eha. And a Copyright note, all in the
>     DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran
>     code in C with f2c)?
> 
>     G?ran
> 
>     On 2019-09-11 21:38, Berend Hasselman wrote:
>      >
>      > The Lapack library is loaded automatically by R itself when it
>     needs it? for doing some calculation.
>      > You can force it to do that with a (dummy) solve for example.
>      > Put this at start of your script:
>      >
>      > <code>
>      > # dummy code to get LAPACK library loaded
>      > X1 <- diag(2,2)
>      > x1 <- rep(2,2)
>      > # X1;x1
>      > z <- solve(X1,x1)
>      > </code>
>      >
>      > followed by the rest of your script.
>      > You will get a warning (I do) that? "passing a character vector 
>     to .Fortran is not portable".
>      > On other systems this may gave fatal errors. This is quick and
>     very dirty. Don't do it.
>      >
>      > I believe there is a better and much safer way to achieve what
>     you want.
>      > Here goes.
>      >
>      > Create a folder (directory) src in the directory where your
>     script resides.
>      > Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes
>     an integer instead of character
>      >
>      > <xdpbtrf.f>
>      > c intermediate for dpbtrf
>      >
>      >? ? ? ? SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
>      >
>      > c? ? ? .. Scalar Arguments ..
>      >? ? ? ? integer? ? ? ? ?kUPLO
>      >? ? ? ? INTEGER? ? ? ? ?INFO, KD, LDAB, N
>      >
>      > c? .. Array Arguments ..
>      >? ? ? ? DOUBLE PRECISION? ?AB( LDAB, * )
>      >
>      >? ? ? ? character UPLO
>      > c? ? ?convert integer argument to character
>      >? ? ? ? if(kUPLO .eq. 1 ) then
>      >? ? ? ? ? ? UPLO = 'L'
>      >? ? ? ? else
>      >? ? ? ? ? ? UPLO = 'U'
>      >? ? ? ? endif
>      >
>      >? ? ? ? call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>      >? ? ? ? return
>      >? ? ? ? end
>      > </xdpbtrf.f>
>      >
>      >
>      > Instead of a character argument UPLO it takes an integer argument
>     kUPLO.
>      > The meaning should be obvious from the code.
>      >
>      > Now create a shell script in the folder of your script to
>     generate a dynamic library to be loaded in your script:
>      >
>      > <mkso.sh>
>      > # Build a binary dynamic library for accessing Lapack dpbtrf
>      >
>      > # syntax checking
>      >
>      > SONAME=xdpbtrf.so
>      >
>      > echo Strict syntax checking
>      > echo ----------------------
>      > gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
>      >
>      > LAPACK=$(R CMD config LAPACK_LIBS)
>      > R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
>      > </mkso.sh>
>      >
>      > To load the dynamic library xdpbtrf.so? change your script into this
>      >
>      > <yourscript>
>      > dyn.load("xdpbtrf.so")
>      > n <- 4L
>      > phi <- 0.64
>      > AB <- matrix(0, 2, n)
>      > AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>      > AB[2, -n] <- -phi
>      > round(AB, 3)
>      >
>      > AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>      >? ? ? ? ? ? ? ? ? ? ? ? ? ? ? KD = 1L, AB = AB, LDAB = 2L, INFO =
>     as.integer(0))$AB
>      > AB.ch
>      >
>      > </yourscript>
>      >
>      > and you are good to go.
>      >
>      > You should always do something? as described above when you need
>     to pass character arguments to Fortran code.
>      >
>      > All of this was tested and run on macOS using the CRAN version of R.
>      >
>      > Berend Hasselman
>      >
>      >> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu
>     <mailto:gpetris at uark.edu>> wrote:
>      >>
>      >> Sorry for cross-posting, but I realized my question might be
>     more appropriate for r-devel...
>      >>
>      >> Thank you,
>      >> Giovanni
>      >>
>      >> ________________________________________
>      >> From: R-help <r-help-bounces at r-project.org
>     <mailto:r-help-bounces at r-project.org>> on behalf of Giovanni Petris
>     <gpetris at uark.edu <mailto:gpetris at uark.edu>>
>      >> Sent: Tuesday, September 10, 2019 16:44
>      >> To: r-help at r-project.org <mailto:r-help at r-project.org>
>      >> Subject: [R] Calling a LAPACK subroutine from R
>      >>
>      >> Hello R-helpers!
>      >>
>      >> I am trying to call a LAPACK subroutine directly from my R code
>     using .Fortran(), but R cannot find the symbol name. How can I
>     register/load the appropriate library?
>      >>
>      >>> ### AR(1) Precision matrix
>      >>> n <- 4L
>      >>> phi <- 0.64
>      >>> AB <- matrix(0, 2, n)
>      >>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>      >>> AB[2, -n] <- -phi
>      >>> round(AB, 3)
>      >>? ? ? ?[,1]? [,2]? [,3] [,4]
>      >> [1,]? 1.00? 1.41? 1.41? ? 1
>      >> [2,] -0.64 -0.64 -0.64? ? 0
>      >>>
>      >>> ### Cholesky factor
>      >>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>      >> +? ? ? ? ? ? ? ? ? KD = 1L, AB = AB, LDAB = 2L, INFO =
>     as.integer(0))$AB
>      >> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD =
>     1L, AB = AB,? :
>      >>? ?Fortran symbol name "dpbtrf" not in load table
>      >>> sessionInfo()
>      >> R version 3.6.0 (2019-04-26)
>      >> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>      >> Running under: macOS Mojave 10.14.6
>      >>
>      >> Matrix products: default
>      >> BLAS/LAPACK:
>     /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>      >>
>      >> locale:
>      >> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>      >>
>      >> attached base packages:
>      >> [1] stats? ? ?graphics? grDevices utils? ? ?datasets? methods? ?base
>      >>
>      >> loaded via a namespace (and not attached):
>      >> [1] compiler_3.6.0 tools_3.6.0
>      >>
>      >> Thank you in advance for your help!
>      >>
>      >> Best,
>      >> Giovanni Petris
>      >>
>      >>
>      >>
>      >> --
>      >> Giovanni Petris, PhD
>      >> Professor
>      >> Director of Statistics
>      >> Department of Mathematical Sciences
>      >> University of Arkansas - Fayetteville, AR 72701
>      >>
>      >>
>      >> ______________________________________________
>      >> R-help at r-project.org <mailto:R-help at r-project.org> mailing list
>     -- To UNSUBSCRIBE and more, see
>      >>
>     https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
>      >> PLEASE do read the posting guide
>     https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
>      >> and provide commented, minimal, self-contained, reproducible code.
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >
>      > ______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>      >
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Sent from Gmail Mobile


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Wed Sep 11 22:51:21 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Wed, 11 Sep 2019 16:51:21 -0400
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <76489fbe-b818-bd32-2fcd-aedf160c913d@umu.se>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
 <CAL6gwnJ3JQ==3oHwGHjMv62dk6viZFikcVo44K7vg0oq4jPX0g@mail.gmail.com>
 <76489fbe-b818-bd32-2fcd-aedf160c913d@umu.se>
Message-ID: <CAL6gwnK68i3ief6ju5+iTbze-ifOiQF6=iwz7jNQLfyLCGnmSQ@mail.gmail.com>

I think better stated that it is subset that relied on a ?bug? that was
never trapped for until now. We?re it written ?properly? this never would
have arisen. At least to the best of my understanding.

Avi

On Wed, Sep 11, 2019 at 4:34 PM G?ran Brostr?m <goran.brostrom at umu.se>
wrote:

>
>
> On 2019-09-11 22:16, Avraham Adler wrote:
> > Can you write a small C function that calls LAPACK call that fro your
> > Fortran code? Yes, an extra step but maybe less traumatic than rewriting
> > parts of LAPACK directly.
>
> Yes, I know how to do that, but I find it somewhat bizarre that it is
> impossible to call a Fortran subroutine from Fortran. And rewriting
> 'dgemv' was simple: Just change character to integer and 'N' to 1. And
> rename the subroutine. The hard (tedious) part was to include all the
> LAPACK authors in my DESCRIPTION file.
>
> My guess is that the root cause is that BLAS/LAPACK is written in
> FORTRAN 77, which is said to be a subset of the current Fortran version
> but obviously isn't.
>
> Thanks, G?ran
>
> >
> > Avi
> >
> > On Wed, Sep 11, 2019 at 4:08 PM G?ran Brostr?m <goran.brostrom at umu.se
> > <mailto:goran.brostrom at umu.se>> wrote:
> >
> >     Berend,
> >
> >     I do not think this works with gfortran 7+. I am calling the BLAS
> >     subroutine dgemv from Fortran code in my package eha, and the check
> >     (with R-devel) gives:
> >
> >     gmlfun.f:223:1: warning: type of ?dgemv? does not match original
> >     declaration [-Wlto-type-mismatch]
> >             &     score, ione)
> >        ^
> >     /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type
> >     mismatch in parameter 12
> >        F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
> >
> >     Type of a Fortran subroutine is matched against type of a C
> function?!
> >     My conclusion is that it is impossible to call a BLAS subroutine
> with a
> >     character parameter from Fortran code (nowadays). Calling from C
> >     code is
> >     fine, on the other hand(!).
> >
> >     I have recently asked about this on R-pkg-devel, but not received any
> >     useful answers, and my submission to CRAN is rejected. I solve it by
> >     making a personal copy of dgemv and changing the character parameter
> to
> >     integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling,
> and
> >     Richard Hanson as authors of eha. And a Copyright note, all in the
> >     DESCRIPTION file. Ugly but what can I do (except rewriting the
> Fortran
> >     code in C with f2c)?
> >
> >     G?ran
> >
> >     On 2019-09-11 21:38, Berend Hasselman wrote:
> >      >
> >      > The Lapack library is loaded automatically by R itself when it
> >     needs it  for doing some calculation.
> >      > You can force it to do that with a (dummy) solve for example.
> >      > Put this at start of your script:
> >      >
> >      > <code>
> >      > # dummy code to get LAPACK library loaded
> >      > X1 <- diag(2,2)
> >      > x1 <- rep(2,2)
> >      > # X1;x1
> >      > z <- solve(X1,x1)
> >      > </code>
> >      >
> >      > followed by the rest of your script.
> >      > You will get a warning (I do) that  "passing a character vector
> >     to .Fortran is not portable".
> >      > On other systems this may gave fatal errors. This is quick and
> >     very dirty. Don't do it.
> >      >
> >      > I believe there is a better and much safer way to achieve what
> >     you want.
> >      > Here goes.
> >      >
> >      > Create a folder (directory) src in the directory where your
> >     script resides.
> >      > Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes
> >     an integer instead of character
> >      >
> >      > <xdpbtrf.f>
> >      > c intermediate for dpbtrf
> >      >
> >      >        SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
> >      >
> >      > c      .. Scalar Arguments ..
> >      >        integer         kUPLO
> >      >        INTEGER         INFO, KD, LDAB, N
> >      >
> >      > c  .. Array Arguments ..
> >      >        DOUBLE PRECISION   AB( LDAB, * )
> >      >
> >      >        character UPLO
> >      > c     convert integer argument to character
> >      >        if(kUPLO .eq. 1 ) then
> >      >            UPLO = 'L'
> >      >        else
> >      >            UPLO = 'U'
> >      >        endif
> >      >
> >      >        call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
> >      >        return
> >      >        end
> >      > </xdpbtrf.f>
> >      >
> >      >
> >      > Instead of a character argument UPLO it takes an integer argument
> >     kUPLO.
> >      > The meaning should be obvious from the code.
> >      >
> >      > Now create a shell script in the folder of your script to
> >     generate a dynamic library to be loaded in your script:
> >      >
> >      > <mkso.sh>
> >      > # Build a binary dynamic library for accessing Lapack dpbtrf
> >      >
> >      > # syntax checking
> >      >
> >      > SONAME=xdpbtrf.so
> >      >
> >      > echo Strict syntax checking
> >      > echo ----------------------
> >      > gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
> >      >
> >      > LAPACK=$(R CMD config LAPACK_LIBS)
> >      > R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
> >      > </mkso.sh>
> >      >
> >      > To load the dynamic library xdpbtrf.so  change your script into
> this
> >      >
> >      > <yourscript>
> >      > dyn.load("xdpbtrf.so")
> >      > n <- 4L
> >      > phi <- 0.64
> >      > AB <- matrix(0, 2, n)
> >      > AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> >      > AB[2, -n] <- -phi
> >      > round(AB, 3)
> >      >
> >      > AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
> >      >                              KD = 1L, AB = AB, LDAB = 2L, INFO =
> >     as.integer(0))$AB
> >      > AB.ch
> >      >
> >      > </yourscript>
> >      >
> >      > and you are good to go.
> >      >
> >      > You should always do something  as described above when you need
> >     to pass character arguments to Fortran code.
> >      >
> >      > All of this was tested and run on macOS using the CRAN version of
> R.
> >      >
> >      > Berend Hasselman
> >      >
> >      >> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu
> >     <mailto:gpetris at uark.edu>> wrote:
> >      >>
> >      >> Sorry for cross-posting, but I realized my question might be
> >     more appropriate for r-devel...
> >      >>
> >      >> Thank you,
> >      >> Giovanni
> >      >>
> >      >> ________________________________________
> >      >> From: R-help <r-help-bounces at r-project.org
> >     <mailto:r-help-bounces at r-project.org>> on behalf of Giovanni Petris
> >     <gpetris at uark.edu <mailto:gpetris at uark.edu>>
> >      >> Sent: Tuesday, September 10, 2019 16:44
> >      >> To: r-help at r-project.org <mailto:r-help at r-project.org>
> >      >> Subject: [R] Calling a LAPACK subroutine from R
> >      >>
> >      >> Hello R-helpers!
> >      >>
> >      >> I am trying to call a LAPACK subroutine directly from my R code
> >     using .Fortran(), but R cannot find the symbol name. How can I
> >     register/load the appropriate library?
> >      >>
> >      >>> ### AR(1) Precision matrix
> >      >>> n <- 4L
> >      >>> phi <- 0.64
> >      >>> AB <- matrix(0, 2, n)
> >      >>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> >      >>> AB[2, -n] <- -phi
> >      >>> round(AB, 3)
> >      >>       [,1]  [,2]  [,3] [,4]
> >      >> [1,]  1.00  1.41  1.41    1
> >      >> [2,] -0.64 -0.64 -0.64    0
> >      >>>
> >      >>> ### Cholesky factor
> >      >>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
> >      >> +                  KD = 1L, AB = AB, LDAB = 2L, INFO =
> >     as.integer(0))$AB
> >      >> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD =
> >     1L, AB = AB,  :
> >      >>   Fortran symbol name "dpbtrf" not in load table
> >      >>> sessionInfo()
> >      >> R version 3.6.0 (2019-04-26)
> >      >> Platform: x86_64-apple-darwin18.5.0 (64-bit)
> >      >> Running under: macOS Mojave 10.14.6
> >      >>
> >      >> Matrix products: default
> >      >> BLAS/LAPACK:
> >     /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
> >      >>
> >      >> locale:
> >      >> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> >      >>
> >      >> attached base packages:
> >      >> [1] stats     graphics  grDevices utils     datasets  methods
>  base
> >      >>
> >      >> loaded via a namespace (and not attached):
> >      >> [1] compiler_3.6.0 tools_3.6.0
> >      >>
> >      >> Thank you in advance for your help!
> >      >>
> >      >> Best,
> >      >> Giovanni Petris
> >      >>
> >      >>
> >      >>
> >      >> --
> >      >> Giovanni Petris, PhD
> >      >> Professor
> >      >> Director of Statistics
> >      >> Department of Mathematical Sciences
> >      >> University of Arkansas - Fayetteville, AR 72701
> >      >>
> >      >>
> >      >> ______________________________________________
> >      >> R-help at r-project.org <mailto:R-help at r-project.org> mailing list
> >     -- To UNSUBSCRIBE and more, see
> >      >>
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
> >      >> PLEASE do read the posting guide
> >
> https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
> >      >> and provide commented, minimal, self-contained, reproducible
> code.
> >      >>
> >      >> ______________________________________________
> >      >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing
> list
> >      >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >      >
> >      > ______________________________________________
> >      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >      > https://stat.ethz.ch/mailman/listinfo/r-devel
> >      >
> >
> >     ______________________________________________
> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > --
> > Sent from Gmail Mobile
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From bhh @end|ng |rom x@4@||@n|  Thu Sep 12 08:57:02 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Thu, 12 Sep 2019 08:57:02 +0200
Subject: [Rd] Calling a LAPACK subroutine from R
In-Reply-To: <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
Message-ID: <129C0E17-CBFC-4A53-A001-B768587B2BCC@xs4all.nl>


I have tried what I proposed in a virtual Kubuntu 18.04 which uses gfortran 7.4.
I used the latest development version of R.

It worked just as on macOS.

Berend


> On 11 Sep 2019, at 22:07, G?ran Brostr?m <goran.brostrom at umu.se> wrote:
> 
> Berend,
> 
> I do not think this works with gfortran 7+. I am calling the BLAS subroutine dgemv from Fortran code in my package eha, and the check (with R-devel) gives:
> 
> gmlfun.f:223:1: warning: type of ?dgemv? does not match original declaration [-Wlto-type-mismatch]
>      &     score, ione)
> ^
> /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type mismatch in parameter 12
> F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
> 
> Type of a Fortran subroutine is matched against type of a C function?! My conclusion is that it is impossible to call a BLAS subroutine with a character parameter from Fortran code (nowadays). Calling from C code is fine, on the other hand(!).
> 
> I have recently asked about this on R-pkg-devel, but not received any useful answers, and my submission to CRAN is rejected. I solve it by making a personal copy of dgemv and changing the character parameter to integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and Richard Hanson as authors of eha. And a Copyright note, all in the DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran code in C with f2c)?
> 
> G?ran
> 
> On 2019-09-11 21:38, Berend Hasselman wrote:
>> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
>> You can force it to do that with a (dummy) solve for example.
>> Put this at start of your script:
>> <code>
>> # dummy code to get LAPACK library loaded
>> X1 <- diag(2,2)
>> x1 <- rep(2,2)
>> # X1;x1
>> z <- solve(X1,x1)
>> </code>
>> followed by the rest of your script.
>> You will get a warning (I do) that  "passing a character vector  to .Fortran is not portable".
>> On other systems this may gave fatal errors. This is quick and very dirty. Don't do it.
>> I believe there is a better and much safer way to achieve what you want.
>> Here goes.
>> Create a folder (directory) src in the directory where your script resides.
>> Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an integer instead of character
>> <xdpbtrf.f>
>> c intermediate for dpbtrf
>>       SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
>> c      .. Scalar Arguments ..
>>       integer         kUPLO
>>       INTEGER         INFO, KD, LDAB, N
>> c  .. Array Arguments ..
>>       DOUBLE PRECISION   AB( LDAB, * )
>>       character UPLO
>> c     convert integer argument to character
>>       if(kUPLO .eq. 1 ) then
>>           UPLO = 'L'
>>       else
>>           UPLO = 'U'
>>       endif
>>       call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>>       return
>>       end
>> </xdpbtrf.f>
>> Instead of a character argument UPLO it takes an integer argument kUPLO.
>> The meaning should be obvious from the code.
>> Now create a shell script in the folder of your script to generate a dynamic library to be loaded in your script:
>> <mkso.sh>
>> # Build a binary dynamic library for accessing Lapack dpbtrf
>> # syntax checking
>>  SONAME=xdpbtrf.so
>> echo Strict syntax checking
>> echo ----------------------
>> gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
>> LAPACK=$(R CMD config LAPACK_LIBS)
>> R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
>> </mkso.sh>
>> To load the dynamic library xdpbtrf.so  change your script into this
>> <yourscript>
>> dyn.load("xdpbtrf.so")
>> n <- 4L
>> phi <- 0.64
>> AB <- matrix(0, 2, n)
>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>> AB[2, -n] <- -phi
>> round(AB, 3)
>> AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>>                             KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>> AB.ch
>> </yourscript>
>> and you are good to go.
>> You should always do something  as described above when you need to pass character arguments to Fortran code.
>> All of this was tested and run on macOS using the CRAN version of R.
>> Berend Hasselman
>>> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
>>> 
>>> Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...
>>> 
>>> Thank you,
>>> Giovanni
>>> 
>>> ________________________________________
>>> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
>>> Sent: Tuesday, September 10, 2019 16:44
>>> To: r-help at r-project.org
>>> Subject: [R] Calling a LAPACK subroutine from R
>>> 
>>> Hello R-helpers!
>>> 
>>> I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?
>>> 
>>>> ### AR(1) Precision matrix
>>>> n <- 4L
>>>> phi <- 0.64
>>>> AB <- matrix(0, 2, n)
>>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>>> AB[2, -n] <- -phi
>>>> round(AB, 3)
>>>      [,1]  [,2]  [,3] [,4]
>>> [1,]  1.00  1.41  1.41    1
>>> [2,] -0.64 -0.64 -0.64    0
>>>> 
>>>> ### Cholesky factor
>>>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>>> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>>> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
>>>  Fortran symbol name "dpbtrf" not in load table
>>>> sessionInfo()
>>> R version 3.6.0 (2019-04-26)
>>> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>>> Running under: macOS Mojave 10.14.6
>>> 
>>> Matrix products: default
>>> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>>> 
>>> locale:
>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>> 
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>> 
>>> loaded via a namespace (and not attached):
>>> [1] compiler_3.6.0 tools_3.6.0
>>> 
>>> Thank you in advance for your help!
>>> 
>>> Best,
>>> Giovanni Petris
>>> 
>>> 
>>> 
>>> --
>>> Giovanni Petris, PhD
>>> Professor
>>> Director of Statistics
>>> Department of Mathematical Sciences
>>> University of Arkansas - Fayetteville, AR 72701
>>> 
>>> 
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
>>> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
>>> and provide commented, minimal, self-contained, reproducible code.
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From bhh @end|ng |rom x@4@||@n|  Thu Sep 12 09:15:37 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Thu, 12 Sep 2019 09:15:37 +0200
Subject: [Rd] Calling a LAPACK subroutine from R
In-Reply-To: <129C0E17-CBFC-4A53-A001-B768587B2BCC@xs4all.nl>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
 <129C0E17-CBFC-4A53-A001-B768587B2BCC@xs4all.nl>
Message-ID: <66C8836B-379D-42FE-B6CF-CBD4D2336EF9@xs4all.nl>

Followup:

I have checked my package nleqslv which uses dgemv only from Fortran, on Kubuntu 18.04 with the development version of R.
No errors or problems.

Berend


> On 12 Sep 2019, at 08:57, Berend Hasselman <bhh at xs4all.nl> wrote:
> 
> 
> I have tried what I proposed in a virtual Kubuntu 18.04 which uses gfortran 7.4.
> I used the latest development version of R.
> 
> It worked just as on macOS.
> 
> Berend
> 
> 
>> On 11 Sep 2019, at 22:07, G?ran Brostr?m <goran.brostrom at umu.se> wrote:
>> 
>> Berend,
>> 
>> I do not think this works with gfortran 7+. I am calling the BLAS subroutine dgemv from Fortran code in my package eha, and the check (with R-devel) gives:
>> 
>> gmlfun.f:223:1: warning: type of ?dgemv? does not match original declaration [-Wlto-type-mismatch]
>>     &     score, ione)
>> ^
>> /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type mismatch in parameter 12
>> F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
>> 
>> Type of a Fortran subroutine is matched against type of a C function?! My conclusion is that it is impossible to call a BLAS subroutine with a character parameter from Fortran code (nowadays). Calling from C code is fine, on the other hand(!).
>> 
>> I have recently asked about this on R-pkg-devel, but not received any useful answers, and my submission to CRAN is rejected. I solve it by making a personal copy of dgemv and changing the character parameter to integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and Richard Hanson as authors of eha. And a Copyright note, all in the DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran code in C with f2c)?
>> 
>> G?ran
>> 
>> On 2019-09-11 21:38, Berend Hasselman wrote:
>>> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
>>> You can force it to do that with a (dummy) solve for example.
>>> Put this at start of your script:
>>> <code>
>>> # dummy code to get LAPACK library loaded
>>> X1 <- diag(2,2)
>>> x1 <- rep(2,2)
>>> # X1;x1
>>> z <- solve(X1,x1)
>>> </code>
>>> followed by the rest of your script.
>>> You will get a warning (I do) that  "passing a character vector  to .Fortran is not portable".
>>> On other systems this may gave fatal errors. This is quick and very dirty. Don't do it.
>>> I believe there is a better and much safer way to achieve what you want.
>>> Here goes.
>>> Create a folder (directory) src in the directory where your script resides.
>>> Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an integer instead of character
>>> <xdpbtrf.f>
>>> c intermediate for dpbtrf
>>>      SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
>>> c      .. Scalar Arguments ..
>>>      integer         kUPLO
>>>      INTEGER         INFO, KD, LDAB, N
>>> c  .. Array Arguments ..
>>>      DOUBLE PRECISION   AB( LDAB, * )
>>>      character UPLO
>>> c     convert integer argument to character
>>>      if(kUPLO .eq. 1 ) then
>>>          UPLO = 'L'
>>>      else
>>>          UPLO = 'U'
>>>      endif
>>>      call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>>>      return
>>>      end
>>> </xdpbtrf.f>
>>> Instead of a character argument UPLO it takes an integer argument kUPLO.
>>> The meaning should be obvious from the code.
>>> Now create a shell script in the folder of your script to generate a dynamic library to be loaded in your script:
>>> <mkso.sh>
>>> # Build a binary dynamic library for accessing Lapack dpbtrf
>>> # syntax checking
>>> SONAME=xdpbtrf.so
>>> echo Strict syntax checking
>>> echo ----------------------
>>> gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
>>> LAPACK=$(R CMD config LAPACK_LIBS)
>>> R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
>>> </mkso.sh>
>>> To load the dynamic library xdpbtrf.so  change your script into this
>>> <yourscript>
>>> dyn.load("xdpbtrf.so")
>>> n <- 4L
>>> phi <- 0.64
>>> AB <- matrix(0, 2, n)
>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>> AB[2, -n] <- -phi
>>> round(AB, 3)
>>> AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>>>                            KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>>> AB.ch
>>> </yourscript>
>>> and you are good to go.
>>> You should always do something  as described above when you need to pass character arguments to Fortran code.
>>> All of this was tested and run on macOS using the CRAN version of R.
>>> Berend Hasselman
>>>> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
>>>> 
>>>> Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...
>>>> 
>>>> Thank you,
>>>> Giovanni
>>>> 
>>>> ________________________________________
>>>> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
>>>> Sent: Tuesday, September 10, 2019 16:44
>>>> To: r-help at r-project.org
>>>> Subject: [R] Calling a LAPACK subroutine from R
>>>> 
>>>> Hello R-helpers!
>>>> 
>>>> I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?
>>>> 
>>>>> ### AR(1) Precision matrix
>>>>> n <- 4L
>>>>> phi <- 0.64
>>>>> AB <- matrix(0, 2, n)
>>>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>>>> AB[2, -n] <- -phi
>>>>> round(AB, 3)
>>>>     [,1]  [,2]  [,3] [,4]
>>>> [1,]  1.00  1.41  1.41    1
>>>> [2,] -0.64 -0.64 -0.64    0
>>>>> 
>>>>> ### Cholesky factor
>>>>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>>>> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>>>> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
>>>> Fortran symbol name "dpbtrf" not in load table
>>>>> sessionInfo()
>>>> R version 3.6.0 (2019-04-26)
>>>> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>>>> Running under: macOS Mojave 10.14.6
>>>> 
>>>> Matrix products: default
>>>> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>>>> 
>>>> locale:
>>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>>> 
>>>> attached base packages:
>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>> 
>>>> loaded via a namespace (and not attached):
>>>> [1] compiler_3.6.0 tools_3.6.0
>>>> 
>>>> Thank you in advance for your help!
>>>> 
>>>> Best,
>>>> Giovanni Petris
>>>> 
>>>> 
>>>> 
>>>> --
>>>> Giovanni Petris, PhD
>>>> Professor
>>>> Director of Statistics
>>>> Department of Mathematical Sciences
>>>> University of Arkansas - Fayetteville, AR 72701
>>>> 
>>>> 
>>>> ______________________________________________
>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
>>>> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
>>>> and provide commented, minimal, self-contained, reproducible code.
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Sep 12 09:59:16 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 12 Sep 2019 09:59:16 +0200
Subject: [Rd] NiceBayes filtered "[ALTREP] ... return value ..."
In-Reply-To: <CAGiFhPMJqWpjsYuz+9jwe_B2x=n=BpSUXwfQsU_EpXBk9j6R-g@mail.gmail.com>
References: <CAGiFhPO-CrCHww-dZV_bDaD20DEkD583SRkhRCGsEvDQCtgHJQ-6992@mail.gmail.com>
 <CAD4oTHH0SQiRHZvaW2ZANVag0P2EPjsr1e51Uqwd5iDT+6oo9A@mail.gmail.com>
 <CAGiFhPMJqWpjsYuz+9jwe_B2x=n=BpSUXwfQsU_EpXBk9j6R-g@mail.gmail.com>
Message-ID: <23929.64212.666437.669884@stat.math.ethz.ch>

>>>>> Wang Jiefei 
>>>>>     on Wed, 11 Sep 2019 14:49:13 -0400 writes:

    > Hi Gabriel,
    > Thanks for your answer and future update plan. Somehow this email has been
    > delayed for a week, so there might be a wired reply from me saying that I
    > have found the answer from the R source code, it was sent from me last
    > week. Hopefully, this reply will not cost another week to post:)

All our e-mail is heavily spam filtered fortunately, through
quite a few filters which sum up to a final spam score and when
that is too high, the message is "diverted" to the spam
collection.
In your case, the "NiceBayes" spamfilter somehow decided to give
the message quite a high score and that got a relatively large
weight
(maybe you should stop using all capitals such as ALTREP in your
 subject !?)

We, the volunteer mailing list moderators, get (daily or weekly, in
this case daily) e-mails from the spam software giving us a full
list of the filtered messages... However, we usually lack the
time to carefully go through that list, notably with R-help or
R-devel where that list is quite long...
so I had detected your "ham" message among the many dozens of
spam ones only a day ago, and released it..

Martin Maechler
ETH Zurich


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Thu Sep 12 10:36:52 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Thu, 12 Sep 2019 10:36:52 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
Message-ID: <026463ed-e8df-3d28-fef9-94ac3b1c740b@insa-toulouse.fr>

On 11/09/2019 21:38, Berend Hasselman wrote:
> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
> You can force it to do that with a (dummy) solve for example.
> Put this at start of your script:
>
> <code>
> # dummy code to get LAPACK library loaded
> X1 <- diag(2,2)
> x1 <- rep(2,2)
> # X1;x1
> z <- solve(X1,x1)
> </code>
another way is to use directly dyn.load():

lapack.path <- paste0(file.path(R.home(), ifelse(.Platform$OS.type == 
"windows",
 ???????? file.path("bin", .Platform$r_arch, "Rlapack"), 
file.path("lib", "libRlapack"))),
 ???????? .Platform$dynlib.ext)
dyn.load(lapack.path)

followed by your code.

Best,
Serguei.

>
> followed by the rest of your script.
> You will get a warning (I do) that  "passing a character vector  to .Fortran is not portable".
> On other systems this may gave fatal errors. This is quick and very dirty. Don't do it.
>
> I believe there is a better and much safer way to achieve what you want.
> Here goes.
>
> Create a folder (directory) src in the directory where your script resides.
> Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an integer instead of character
>
> <xdpbtrf.f>
> c intermediate for dpbtrf
>
>        SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
>
> c      .. Scalar Arguments ..
>        integer         kUPLO
>        INTEGER         INFO, KD, LDAB, N
>
> c  .. Array Arguments ..
>        DOUBLE PRECISION   AB( LDAB, * )
>
>        character UPLO
> c     convert integer argument to character
>        if(kUPLO .eq. 1 ) then
>            UPLO = 'L'
>        else
>            UPLO = 'U'
>        endif
>
>        call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>        return
>        end
> </xdpbtrf.f>
>
>
> Instead of a character argument UPLO it takes an integer argument kUPLO.
> The meaning should be obvious from the code.
>
> Now create a shell script in the folder of your script to generate a dynamic library to be loaded in your script:
>
> <mkso.sh>
> # Build a binary dynamic library for accessing Lapack dpbtrf
>
> # syntax checking
>   
> SONAME=xdpbtrf.so
>
> echo Strict syntax checking
> echo ----------------------
> gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
>
> LAPACK=$(R CMD config LAPACK_LIBS)
> R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
> </mkso.sh>
>
> To load the dynamic library xdpbtrf.so  change your script into this
>
> <yourscript>
> dyn.load("xdpbtrf.so")
> n <- 4L
> phi <- 0.64
> AB <- matrix(0, 2, n)
> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
> AB[2, -n] <- -phi
> round(AB, 3)
>
> AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>                              KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
> AB.ch
>
> </yourscript>
>
> and you are good to go.
>
> You should always do something  as described above when you need to pass character arguments to Fortran code.
>
> All of this was tested and run on macOS using the CRAN version of R.
>
> Berend Hasselman
>
>> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
>>
>> Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...
>>
>> Thank you,
>> Giovanni
>>
>> ________________________________________
>> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
>> Sent: Tuesday, September 10, 2019 16:44
>> To: r-help at r-project.org
>> Subject: [R] Calling a LAPACK subroutine from R
>>
>> Hello R-helpers!
>>
>> I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?
>>
>>> ### AR(1) Precision matrix
>>> n <- 4L
>>> phi <- 0.64
>>> AB <- matrix(0, 2, n)
>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>> AB[2, -n] <- -phi
>>> round(AB, 3)
>>       [,1]  [,2]  [,3] [,4]
>> [1,]  1.00  1.41  1.41    1
>> [2,] -0.64 -0.64 -0.64    0
>>> ### Cholesky factor
>>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
>>   Fortran symbol name "dpbtrf" not in load table
>>> sessionInfo()
>> R version 3.6.0 (2019-04-26)
>> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>> Running under: macOS Mojave 10.14.6
>>
>> Matrix products: default
>> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>>
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.0 tools_3.6.0
>>
>> Thank you in advance for your help!
>>
>> Best,
>> Giovanni Petris
>>
>>
>>
>> --
>> Giovanni Petris, PhD
>> Professor
>> Director of Statistics
>> Department of Mathematical Sciences
>> University of Arkansas - Fayetteville, AR 72701
>>
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
>> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
>> and provide commented, minimal, self-contained, reproducible code.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From gor@n@bro@trom @end|ng |rom umu@@e  Thu Sep 12 10:41:01 2019
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Thu, 12 Sep 2019 10:41:01 +0200
Subject: [Rd] Calling a LAPACK subroutine from R
In-Reply-To: <66C8836B-379D-42FE-B6CF-CBD4D2336EF9@xs4all.nl>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
 <129C0E17-CBFC-4A53-A001-B768587B2BCC@xs4all.nl>
 <66C8836B-379D-42FE-B6CF-CBD4D2336EF9@xs4all.nl>
Message-ID: <da5a9a32-1860-c323-182c-071c5d803ba0@umu.se>

Thanks Berend, I got curious and checked your package, and no errors. 
However, two open questions:

1. You invoke the call to dgemv from a Fortran subroutine  that is 
called from a C function, which in turn is called in R by .Call. I go 
directly via .Fortran, no C involved, except by "base R", see 2. below.

2. I am still wondering why your route gets away with avoiding "the 12th 
hidden argument" FCLEN, see R-devel/include/R_ext/BLAS.h:

F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
		const double *alpha, const double *a, const int *lda,
		const double *x, const int *incx, const double *beta,
		double *y, const int *incy FCLEN);

when my direct route doesn't?

G?ran

On 2019-09-12 09:15, Berend Hasselman wrote:
> Followup:
> 
> I have checked my package nleqslv which uses dgemv only from Fortran, on Kubuntu 18.04 with the development version of R.
> No errors or problems.
> 
> Berend
> 
> 
>> On 12 Sep 2019, at 08:57, Berend Hasselman <bhh at xs4all.nl> wrote:
>>
>>
>> I have tried what I proposed in a virtual Kubuntu 18.04 which uses gfortran 7.4.
>> I used the latest development version of R.
>>
>> It worked just as on macOS.
>>
>> Berend
>>
>>
>>> On 11 Sep 2019, at 22:07, G?ran Brostr?m <goran.brostrom at umu.se> wrote:
>>>
>>> Berend,
>>>
>>> I do not think this works with gfortran 7+. I am calling the BLAS subroutine dgemv from Fortran code in my package eha, and the check (with R-devel) gives:
>>>
>>> gmlfun.f:223:1: warning: type of ?dgemv? does not match original declaration [-Wlto-type-mismatch]
>>>      &     score, ione)
>>> ^
>>> /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type mismatch in parameter 12
>>> F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
>>>
>>> Type of a Fortran subroutine is matched against type of a C function?! My conclusion is that it is impossible to call a BLAS subroutine with a character parameter from Fortran code (nowadays). Calling from C code is fine, on the other hand(!).
>>>
>>> I have recently asked about this on R-pkg-devel, but not received any useful answers, and my submission to CRAN is rejected. I solve it by making a personal copy of dgemv and changing the character parameter to integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and Richard Hanson as authors of eha. And a Copyright note, all in the DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran code in C with f2c)?
>>>
>>> G?ran
>>>
>>> On 2019-09-11 21:38, Berend Hasselman wrote:
>>>> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
>>>> You can force it to do that with a (dummy) solve for example.
>>>> Put this at start of your script:
>>>> <code>
>>>> # dummy code to get LAPACK library loaded
>>>> X1 <- diag(2,2)
>>>> x1 <- rep(2,2)
>>>> # X1;x1
>>>> z <- solve(X1,x1)
>>>> </code>
>>>> followed by the rest of your script.
>>>> You will get a warning (I do) that  "passing a character vector  to .Fortran is not portable".
>>>> On other systems this may gave fatal errors. This is quick and very dirty. Don't do it.
>>>> I believe there is a better and much safer way to achieve what you want.
>>>> Here goes.
>>>> Create a folder (directory) src in the directory where your script resides.
>>>> Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes an integer instead of character
>>>> <xdpbtrf.f>
>>>> c intermediate for dpbtrf
>>>>       SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
>>>> c      .. Scalar Arguments ..
>>>>       integer         kUPLO
>>>>       INTEGER         INFO, KD, LDAB, N
>>>> c  .. Array Arguments ..
>>>>       DOUBLE PRECISION   AB( LDAB, * )
>>>>       character UPLO
>>>> c     convert integer argument to character
>>>>       if(kUPLO .eq. 1 ) then
>>>>           UPLO = 'L'
>>>>       else
>>>>           UPLO = 'U'
>>>>       endif
>>>>       call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>>>>       return
>>>>       end
>>>> </xdpbtrf.f>
>>>> Instead of a character argument UPLO it takes an integer argument kUPLO.
>>>> The meaning should be obvious from the code.
>>>> Now create a shell script in the folder of your script to generate a dynamic library to be loaded in your script:
>>>> <mkso.sh>
>>>> # Build a binary dynamic library for accessing Lapack dpbtrf
>>>> # syntax checking
>>>> SONAME=xdpbtrf.so
>>>> echo Strict syntax checking
>>>> echo ----------------------
>>>> gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
>>>> LAPACK=$(R CMD config LAPACK_LIBS)
>>>> R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
>>>> </mkso.sh>
>>>> To load the dynamic library xdpbtrf.so  change your script into this
>>>> <yourscript>
>>>> dyn.load("xdpbtrf.so")
>>>> n <- 4L
>>>> phi <- 0.64
>>>> AB <- matrix(0, 2, n)
>>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>>> AB[2, -n] <- -phi
>>>> round(AB, 3)
>>>> AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>>>>                             KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>>>> AB.ch
>>>> </yourscript>
>>>> and you are good to go.
>>>> You should always do something  as described above when you need to pass character arguments to Fortran code.
>>>> All of this was tested and run on macOS using the CRAN version of R.
>>>> Berend Hasselman
>>>>> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
>>>>>
>>>>> Sorry for cross-posting, but I realized my question might be more appropriate for r-devel...
>>>>>
>>>>> Thank you,
>>>>> Giovanni
>>>>>
>>>>> ________________________________________
>>>>> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni Petris <gpetris at uark.edu>
>>>>> Sent: Tuesday, September 10, 2019 16:44
>>>>> To: r-help at r-project.org
>>>>> Subject: [R] Calling a LAPACK subroutine from R
>>>>>
>>>>> Hello R-helpers!
>>>>>
>>>>> I am trying to call a LAPACK subroutine directly from my R code using .Fortran(), but R cannot find the symbol name. How can I register/load the appropriate library?
>>>>>
>>>>>> ### AR(1) Precision matrix
>>>>>> n <- 4L
>>>>>> phi <- 0.64
>>>>>> AB <- matrix(0, 2, n)
>>>>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>>>>> AB[2, -n] <- -phi
>>>>>> round(AB, 3)
>>>>>      [,1]  [,2]  [,3] [,4]
>>>>> [1,]  1.00  1.41  1.41    1
>>>>> [2,] -0.64 -0.64 -0.64    0
>>>>>>
>>>>>> ### Cholesky factor
>>>>>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>>>>> +                  KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>>>>> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 1L, AB = AB,  :
>>>>> Fortran symbol name "dpbtrf" not in load table
>>>>>> sessionInfo()
>>>>> R version 3.6.0 (2019-04-26)
>>>>> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>>>>> Running under: macOS Mojave 10.14.6
>>>>>
>>>>> Matrix products: default
>>>>> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>>>>>
>>>>> locale:
>>>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>>>>
>>>>> attached base packages:
>>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>>>
>>>>> loaded via a namespace (and not attached):
>>>>> [1] compiler_3.6.0 tools_3.6.0
>>>>>
>>>>> Thank you in advance for your help!
>>>>>
>>>>> Best,
>>>>> Giovanni Petris
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Giovanni Petris, PhD
>>>>> Professor
>>>>> Director of Statistics
>>>>> Department of Mathematical Sciences
>>>>> University of Arkansas - Fayetteville, AR 72701
>>>>>
>>>>>
>>>>> ______________________________________________
>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e=
>>>>> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e=
>>>>> and provide commented, minimal, self-contained, reproducible code.
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bhh @end|ng |rom x@4@||@n|  Thu Sep 12 11:07:06 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Thu, 12 Sep 2019 11:07:06 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <026463ed-e8df-3d28-fef9-94ac3b1c740b@insa-toulouse.fr>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <026463ed-e8df-3d28-fef9-94ac3b1c740b@insa-toulouse.fr>
Message-ID: <BF20B805-1DC0-4DDB-9A46-ED19750A05E1@xs4all.nl>



> On 12 Sep 2019, at 10:36, Serguei Sokol <sokol at insa-toulouse.fr> wrote:
> 
> On 11/09/2019 21:38, Berend Hasselman wrote:
>> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
>> You can force it to do that with a (dummy) solve for example.
>> Put this at start of your script:
>> 
>> <code>
>> # dummy code to get LAPACK library loaded
>> X1 <- diag(2,2)
>> x1 <- rep(2,2)
>> # X1;x1
>> z <- solve(X1,x1)
>> </code>
> another way is to use directly dyn.load():
> 
> lapack.path <- paste0(file.path(R.home(), ifelse(.Platform$OS.type == "windows",
>          file.path("bin", .Platform$r_arch, "Rlapack"), file.path("lib", "libRlapack"))),
>          .Platform$dynlib.ext)
> dyn.load(lapack.path)


This will not work on macOS.
The extension for dynamic libraries is .dylib.
So you would need 

lapack.path <- paste0(file.path(R.home(), ifelse(.Platform$OS.type == "windows",
         file.path("bin", .Platform$r_arch, "Rlapack"), file.path("lib", "libRlapack"))),
         ".dylib")

See the help for .Platform and dyn.load for the details for macOS.

Berend


From gor@n@bro@trom @end|ng |rom umu@@e  Thu Sep 12 11:56:05 2019
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Thu, 12 Sep 2019 11:56:05 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <95db5dc3-19d4-4eca-fb32-53d4bef59f3a@gmail.com>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <ae8c6025-0a61-331e-c3e6-ce5fa1391da1@umu.se>
 <23929.59590.434134.81889@hornik.net>
 <517a2e8d-10d7-ad58-d547-07b4b7411570@umu.se>
 <95db5dc3-19d4-4eca-fb32-53d4bef59f3a@gmail.com>
Message-ID: <3d293c58-bc55-7c84-4ed5-b6805dd40eb0@umu.se>

Hi guys,

interestingly, my problem seems to be solved by writing a FORTRAN 
wrapper for the Fortran code! (As long as the check doesn't get 
smarter...). This is the relevant part of my Fortran code:
-----------------------------------------------------------
       subroutine gmlfun(what,
      &     totevent, totrs, ns,
      &     antrs, antevents, size,
      &     totsize, eventset, riskset,
      &     nn, antcov, covar, offset,
      &     beta, gamma,
      &     loglik, h1, h2, h11, h21, h22,
      &     score)

......
       call gmlfun1(what,
      &     totevent, totrs, ns,
      &     antrs, antevents, size,
      &     totsize, eventset, riskset,
      &     nn, antcov, covar, offset,
      &     beta, gamma,
      &     loglik, h1, h2, h11, h21, h22,
      &     score)

	return
         end

C ***
C
       subroutine gmlfun1(what,
      &     totevent, totrs, ns,
      &     antrs, antevents, size,
      &     totsize, eventset, riskset,
      &     nn, antcov, covar, offset,
      &     beta, gamma,
      &     loglik, h1, h2, h11, h21, h22,
      &     score)
.....

C
       call dcopy(nn, offset, ione, score, ione)
       call dgemv(trans, nn, antcov, one, covar, nn, beta, ione, one,
      &     score, ione)
  .....
	return
	end
-----------------------------------------------------------------
gmlfun is called directly by .Fortran, and in my original code gmlfun 
was gmlfun1. Now gmlfun is just a wrapper that calls gmlfun1, which 
calls dgemv, and no complaints!

This is apparently what Berend (and now myself) gets away with: Quite 
bizarre in my mind.

Or: Is this an R-blessed solution?

Thanks, G?ran




On 2019-09-12 11:25, Tomas Kalibera wrote:
> On 9/12/19 11:07 AM, G?ran Brostr?m wrote:
>> Kurt, see below:
>>
>> On 2019-09-12 08:42, Kurt Hornik wrote:
>>>>>>>> G?ran Brostr?m writes:
>>>
>>> G?ran,
>>>
>>> Pls allow me to join the discussions on your pending CRAN submission.
>>>
>>> First, the current solution with the copy of the BLAS sources is not
>>> quite perfect.? You now have
>>>
>>> Authors at R: c(person("G?ran", "Brostr?m", role = c("aut", "cre"),
>>> ???????????????????? email = "goran.brostrom at umu.se"),
>>> ????????????? person("Jack", "Dongarra", role = "aut"),
>>> ????????????? person("Jeremy", "Du Croz", role = "aut"),
>>> ????????????? person("Sven", "Hammarling", role = "aut"),
>>> ????????????? person("Richard", "Hanson", role = "aut"),
>>> ????????????? person("Jianming", "Jin", role = "aut"))
>>> Copyright: The blas Developers 2014-2018.
>>>
>>> I think the last 5 persons should get a ctb role instead of aut, and you
>>> should add
>>>
>>> ?? person("The blas Developers", role = "cph", comment = "....")
>>>
>>> with a suitable comment explaining what the copyright is held for.
>>>
>>> However, I would still hope that you can do without the copy by
>>> following the recipe in section "Fortran character strings" in "Writing
>>> R Extensions".? This says:
>>>
>>> ************************************************************************
>>> Alternatively, do as R does as from version 3.6.1-patched and pass the
>>> character length(s) from C to Fortran.? A portable way to do this is
>>> ????? // before any R headers, or define in PKG_CPPFLAGS
>>> ????? #define USE_FC_LEN_T
>>> ????? #include <Rconfig.h>
>>> ????? #include <R_ext/BLAS.h>
>>> ????? #ifndef FCONE
>>> ????? # define FCONE
>>> ????? #endif
>>> ????? ...
>>> ????????????? F77_CALL(dgemm)("N", "T", &nrx, &ncy, &ncx, &one, x,
>>> ????????????????????????????? &nrx, y, &nry, &zero, z, &nrx FCONE 
>>> FCONE);
>>> (Note there is no comma before or between the 'FCONE' invocations.)? It
>>> is strongly recommended that packages which call from C/C++ BLAS/LAPACK
>>> routines with character arguments adopt this approach.
>>> ************************************************************************
>>>
>>> Does this really not work for you?
>>
>> Of course it would work: I call dgemv (and other BLAS routines) 
>> frequently from C code in my package, that is not the problem. I am 
>> just wondering why Berend gets away with direct calls to dgemv from 
>> Fortran without using the 12th hidden parameter FCLEN (FCONE), when I 
>> fail. I suspect an oversight in the R checking system.
> 
> The hidden argument will be added by the Fortran compiler, at the call 
> site. If BLAS is built with the same Fortran compiler as your Fortran 
> code which calls it, there should be no problem (often it will work also 
> when the compilers are different, but that depends on how different they 
> are). If you can't find why it is not working for you, please create a 
> minimum reproducible but complete example. Please try looking also at 
> existing packages with Fortran code, including "stats" for instance. 
> There are several people who are trying to help you on the mailing 
> lists, it would be easier for them if they knew exactly what you were 
> doing.
> 
> Best
> Tomas
> 
> 
>>
>> I can write a C wrapper for my Fortran function that calls dgemv and 
>> call it in R by .C, but is that really guaranteed to work, when the 
>> checking routine gets sharper?
> 
>>
>> Best, G,
>>
>>> Best
>>> -k
>>>
>>>
>>>> Berend,
>>>> I do not think this works with gfortran 7+. I am calling the BLAS
>>>> subroutine dgemv from Fortran code in my package eha, and the check
>>>> (with R-devel) gives:
>>>
>>>> gmlfun.f:223:1: warning: type of ?dgemv? does not match original
>>>> declaration [-Wlto-type-mismatch]
>>>> ??????? &???? score, ione)
>>>> ?? ^
>>>> /home/gobr0002/R/src/R-devel/include/R_ext/BLAS.h:107:1: note: type
>>>> mismatch in parameter 12
>>>> ?? F77_NAME(dgemv)(const char *trans, const int *m, const int *n,
>>>
>>>> Type of a Fortran subroutine is matched against type of a C function?!
>>>> My conclusion is that it is impossible to call a BLAS subroutine with a
>>>> character parameter from Fortran code (nowadays). Calling from C 
>>>> code is
>>>> fine, on the other hand(!).
>>>
>>>> I have recently asked about this on R-pkg-devel, but not received any
>>>> useful answers, and my submission to CRAN is rejected. I solve it by
>>>> making a personal copy of dgemv and changing the character parameter to
>>>> integer, and adding Jack Dongarra, Jeremy Du Croz, Sven Hammarling, and
>>>> Richard Hanson as authors of eha. And a Copyright note, all in the
>>>> DESCRIPTION file. Ugly but what can I do (except rewriting the Fortran
>>>> code in C with f2c)?
>>>
>>>> G?ran
>>>
>>>> On 2019-09-11 21:38, Berend Hasselman wrote:
>>>>>
>>>>> The Lapack library is loaded automatically by R itself when it 
>>>>> needs it? for doing some calculation.
>>>>> You can force it to do that with a (dummy) solve for example.
>>>>> Put this at start of your script:
>>>>>
>>>>> <code>
>>>>> # dummy code to get LAPACK library loaded
>>>>> X1 <- diag(2,2)
>>>>> x1 <- rep(2,2)
>>>>> # X1;x1
>>>>> z <- solve(X1,x1)
>>>>> </code>
>>>>>
>>>>> followed by the rest of your script.
>>>>> You will get a warning (I do) that? "passing a character vector? to 
>>>>> .Fortran is not portable".
>>>>> On other systems this may gave fatal errors. This is quick and very 
>>>>> dirty. Don't do it.
>>>>>
>>>>> I believe there is a better and much safer way to achieve what you 
>>>>> want.
>>>>> Here goes.
>>>>>
>>>>> Create a folder (directory) src in the directory where your script 
>>>>> resides.
>>>>> Create a wrapper for "dpbtrf" file in a file xdpbtrf.f that takes 
>>>>> an integer instead of character
>>>>>
>>>>> <xdpbtrf.f>
>>>>> c intermediate for dpbtrf
>>>>>
>>>>> SUBROUTINE xDPBTRF( kUPLO, N, KD, AB, LDAB, INFO )
>>>>>
>>>>> c????? .. Scalar Arguments ..
>>>>> integer???????? kUPLO
>>>>> INTEGER???????? INFO, KD, LDAB, N
>>>>>
>>>>> c? .. Array Arguments ..
>>>>> DOUBLE PRECISION?? AB( LDAB, * )
>>>>>
>>>>> character UPLO
>>>>> c???? convert integer argument to character
>>>>> if(kUPLO .eq. 1 ) then
>>>>> UPLO = 'L'
>>>>> else
>>>>> UPLO = 'U'
>>>>> endif
>>>>>
>>>>> call dpbtrf(UPLO,N,KD,AB,LDAB,INFO)
>>>>> return
>>>>> end
>>>>> </xdpbtrf.f>
>>>>>
>>>>>
>>>>> Instead of a character argument UPLO it takes an integer argument 
>>>>> kUPLO.
>>>>> The meaning should be obvious from the code.
>>>>>
>>>>> Now create a shell script in the folder of your script to generate 
>>>>> a dynamic library to be loaded in your script:
>>>>>
>>>>> <mkso.sh>
>>>>> # Build a binary dynamic library for accessing Lapack dpbtrf
>>>>>
>>>>> # syntax checking
>>>>>
>>>>> SONAME=xdpbtrf.so
>>>>>
>>>>> echo Strict syntax checking
>>>>> echo ----------------------
>>>>> gfortran -c -fsyntax-only -fimplicit-none -Wall src/*.f || exit 1
>>>>>
>>>>> LAPACK=$(R CMD config LAPACK_LIBS)
>>>>> R CMD SHLIB --output=${SONAME} src/*.f ${LAPACK} || exit 1
>>>>> </mkso.sh>
>>>>>
>>>>> To load the dynamic library xdpbtrf.so? change your script into this
>>>>>
>>>>> <yourscript>
>>>>> dyn.load("xdpbtrf.so")
>>>>> n <- 4L
>>>>> phi <- 0.64
>>>>> AB <- matrix(0, 2, n)
>>>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>>>> AB[2, -n] <- -phi
>>>>> round(AB, 3)
>>>>>
>>>>> AB.ch <- .Fortran("xdpbtrf", kUPLO=1L, N = as.integer(n),
>>>>> KD = 1L, AB = AB, LDAB = 2L, INFO = as.integer(0))$AB
>>>>> AB.ch
>>>>>
>>>>> </yourscript>
>>>>>
>>>>> and you are good to go.
>>>>>
>>>>> You should always do something? as described above when you need to 
>>>>> pass character arguments to Fortran code.
>>>>>
>>>>> All of this was tested and run on macOS using the CRAN version of R.
>>>>>
>>>>> Berend Hasselman
>>>>>
>>>>>> On 11 Sep 2019, at 15:47, Giovanni Petris <gpetris at uark.edu> wrote:
>>>>>>
>>>>>> Sorry for cross-posting, but I realized my question might be more 
>>>>>> appropriate for r-devel...
>>>>>>
>>>>>> Thank you,
>>>>>> Giovanni
>>>>>>
>>>>>> ________________________________________
>>>>>> From: R-help <r-help-bounces at r-project.org> on behalf of Giovanni 
>>>>>> Petris <gpetris at uark.edu>
>>>>>> Sent: Tuesday, September 10, 2019 16:44
>>>>>> To: r-help at r-project.org
>>>>>> Subject: [R] Calling a LAPACK subroutine from R
>>>>>>
>>>>>> Hello R-helpers!
>>>>>>
>>>>>> I am trying to call a LAPACK subroutine directly from my R code 
>>>>>> using .Fortran(), but R cannot find the symbol name. How can I 
>>>>>> register/load the appropriate library?
>>>>>>
>>>>>>> ### AR(1) Precision matrix
>>>>>>> n <- 4L
>>>>>>> phi <- 0.64
>>>>>>> AB <- matrix(0, 2, n)
>>>>>>> AB[1, ] <- c(1, rep(1 + phi^2, n-2), 1)
>>>>>>> AB[2, -n] <- -phi
>>>>>>> round(AB, 3)
>>>>>> [,1]? [,2]? [,3] [,4]
>>>>>> [1,]? 1.00? 1.41? 1.41??? 1
>>>>>> [2,] -0.64 -0.64 -0.64??? 0
>>>>>>>
>>>>>>> ### Cholesky factor
>>>>>>> AB.ch <- .Fortran("dpbtrf", UPLO = 'L', N = as.integer(n),
>>>>>> +????????????????? KD = 1L, AB = AB, LDAB = 2L, INFO = 
>>>>>> as.integer(0))$AB
>>>>>> Error in .Fortran("dpbtrf", UPLO = "L", N = as.integer(n), KD = 
>>>>>> 1L, AB = AB,? :
>>>>>> Fortran symbol name "dpbtrf" not in load table
>>>>>>> sessionInfo()
>>>>>> R version 3.6.0 (2019-04-26)
>>>>>> Platform: x86_64-apple-darwin18.5.0 (64-bit)
>>>>>> Running under: macOS Mojave 10.14.6
>>>>>>
>>>>>> Matrix products: default
>>>>>> BLAS/LAPACK: 
>>>>>> /usr/local/Cellar/openblas/0.3.6_1/lib/libopenblasp-r0.3.6.dylib
>>>>>>
>>>>>> locale:
>>>>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>>>>>
>>>>>> attached base packages:
>>>>>> [1] stats???? graphics? grDevices utils???? datasets methods?? base
>>>>>>
>>>>>> loaded via a namespace (and not attached):
>>>>>> [1] compiler_3.6.0 tools_3.6.0
>>>>>>
>>>>>> Thank you in advance for your help!
>>>>>>
>>>>>> Best,
>>>>>> Giovanni Petris
>>>>>>
>>>>>>
>>>>>>
>>>>>> -- 
>>>>>> Giovanni Petris, PhD
>>>>>> Professor
>>>>>> Director of Statistics
>>>>>> Department of Mathematical Sciences
>>>>>> University of Arkansas - Fayetteville, AR 72701
>>>>>>
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=a1vAu3mcXKObTLwP19vOmRPq55h6oQTh_vnS6BEibF0&e= 
>>>>>>
>>>>>> PLEASE do read the posting guide 
>>>>>> https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=7ypwAowFJ8v-mw8AB-SdSueVQgSDL4HiiSaLK01W8HA&r=C3DNvy_azplKSvJKgvsgjA&m=C-MwKl__0xz-98RBbu7QNXJjqWkRr4xp6c0cz9Dck7A&s=qFGlplF9cOSmnDUvugsPRDn4iZS7v-LuWNAvfY69sbA&e= 
>>>>>>
>>>>>> and provide commented, minimal, self-contained, reproducible code.
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>


From |@g|ne @end|ng |rom p@@jd@org  Fri Sep 13 11:01:53 2019
From: |@g|ne @end|ng |rom p@@jd@org (=?utf-8?B?SUFHTyBHSU7DiSBWw4FaUVVFWg==?=)
Date: Fri, 13 Sep 2019 09:01:53 +0000
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
Message-ID: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>

I have a chinese character on a data frame, but the output of printing it is its UTF-8 code. Concretely, the character is ? and the code is U+6703. Following the code I arrive to the instruction

> base::format.default("?")

which prints

[1] "<U+6703>"

I do not know which is the extent of this behaviour either if it follows on most recent versions of R.

Is it expected?

Thank you!

Iago

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Sep 13 11:24:22 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 13 Sep 2019 11:24:22 +0200
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
In-Reply-To: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
References: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
Message-ID: <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>

On 9/13/19 11:01 AM, IAGO GIN? V?ZQUEZ wrote:
> I have a chinese character on a data frame, but the output of printing it is its UTF-8 code. Concretely, the character is ? and the code is U+6703. Following the code I arrive to the instruction
>
>> base::format.default("?")
> which prints
>
> [1] "<U+6703>"
>
> I do not know which is the extent of this behaviour either if it follows on most recent versions of R.
>
> Is it expected?

If you are running this on Windows in an encoding where the character 
cannot be represented (e.g. non-Chinese locale), then yes, this is 
expected behavior.

On Unix systems where R can run in UTF-8 encoding (Linux, macOS), the 
character will be formatted/displayed properly.

Best
Tomas

>
> Thank you!
>
> Iago
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |@g|ne @end|ng |rom p@@jd@org  Fri Sep 13 11:37:42 2019
From: |@g|ne @end|ng |rom p@@jd@org (=?utf-8?B?SUFHTyBHSU7DiSBWw4FaUVVFWg==?=)
Date: Fri, 13 Sep 2019 09:37:42 +0000
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
In-Reply-To: <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>
References: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>,
 <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>
Message-ID: <DB8PR02MB55314C10AC8DA479BB93C5D792B30@DB8PR02MB5531.eurprd02.prod.outlook.com>

But if I type
> "?"
the output is

[1] "?"

so seemingly it can be represented. Or, am I wrong?

Best
Iago
________________________________
De: Tomas Kalibera <tomas.kalibera at gmail.com>
Enviat el: divendres, 13 de setembre de 2019 11:24
Per a: IAGO GIN? V?ZQUEZ <i.gine at pssjd.org>; r-devel at r-project.org <r-devel at r-project.org>
Tema: Re: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10

On 9/13/19 11:01 AM, IAGO GIN? V?ZQUEZ wrote:
> I have a chinese character on a data frame, but the output of printing it is its UTF-8 code. Concretely, the character is ? and the code is U+6703. Following the code I arrive to the instruction
>
>> base::format.default("?")
> which prints
>
> [1] "<U+6703>"
>
> I do not know which is the extent of this behaviour either if it follows on most recent versions of R.
>
> Is it expected?

If you are running this on Windows in an encoding where the character
cannot be represented (e.g. non-Chinese locale), then yes, this is
expected behavior.

On Unix systems where R can run in UTF-8 encoding (Linux, macOS), the
character will be formatted/displayed properly.

Best
Tomas

>
> Thank you!
>
> Iago
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Sep 13 11:53:14 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 13 Sep 2019 11:53:14 +0200
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
In-Reply-To: <DB8PR02MB55314C10AC8DA479BB93C5D792B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
References: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>
 <DB8PR02MB55314C10AC8DA479BB93C5D792B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
Message-ID: <619e2c80-85a3-e837-9270-2bfec41f208b@gmail.com>

On 9/13/19 11:37 AM, IAGO GIN? V?ZQUEZ wrote:
> But if I type
> >"?"
> the output is
> [1] "?"
> so seemingly it can be represented. Or, am I wrong?

In RGui you can print the string, because RGui is a Windows Unicode 
application (uses UTF16-LE and bypasses the C runtime for strings). But 
it is just the gui, R itself (and hence also packages) use the current 
native encoding as defined by the C runtime. RGui will make sure R gets 
the string in UTF-8, but as soon as you do anything even slightly 
non-trivial, which includes formatting, the string will be converted to 
the current native encoding. Some R functions allow you to do certain 
things in UTF-8 without conversion to native encoding, you'd have to 
read very carefully the documentation for each function - but for 
practical use, you either need to live with the misinterpretation of 
some characters, or use Windows in the locale where your characters can 
be represented (e.g. Chinese locale when working with Chinese strings), 
or use Linux/maOS. On Linux/macOS the current native encoding can be 
UTF-8, so there is no problem. On Windows, with the current toolchain 
based on mingw, this is not possible.


Best
Tomas

>
> Best
> Iago
> ------------------------------------------------------------------------
> *De:* Tomas Kalibera <tomas.kalibera at gmail.com>
> *Enviat el:* divendres, 13 de setembre de 2019 11:24
> *Per a:* IAGO GIN? V?ZQUEZ <i.gine at pssjd.org>; r-devel at r-project.org 
> <r-devel at r-project.org>
> *Tema:* Re: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 
> -windows 10
> On 9/13/19 11:01 AM, IAGO GIN? V?ZQUEZ wrote:
> > I have a chinese character on a data frame, but the output of 
> printing it is its UTF-8 code. Concretely, the character is ? and the 
> code is U+6703. Following the code I arrive to the instruction
> >
> >> base::format.default("?")
> > which prints
> >
> > [1] "<U+6703>"
> >
> > I do not know which is the extent of this behaviour either if it 
> follows on most recent versions of R.
> >
> > Is it expected?
>
> If you are running this on Windows in an encoding where the character
> cannot be represented (e.g. non-Chinese locale), then yes, this is
> expected behavior.
>
> On Unix systems where R can run in UTF-8 encoding (Linux, macOS), the
> character will be formatted/displayed properly.
>
> Best
> Tomas
>
> >
> > Thank you!
> >
> > Iago
> >
> >??????? [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Sep 13 13:46:47 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 13 Sep 2019 13:46:47 +0200
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
In-Reply-To: <CAF5kcVUXqsBr-=ayxUvBBvj32LHKoGfQ4vmJajJZ3wUj+gPWjg@mail.gmail.com>
References: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>
 <DB8PR02MB55314C10AC8DA479BB93C5D792B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <619e2c80-85a3-e837-9270-2bfec41f208b@gmail.com>
 <CAF5kcVUXqsBr-=ayxUvBBvj32LHKoGfQ4vmJajJZ3wUj+gPWjg@mail.gmail.com>
Message-ID: <ef74b520-0491-6607-2bc0-59ca2f3d19d3@gmail.com>

On 9/13/19 1:33 PM, Ray Donnelly wrote:
> On Fri, Sep 13, 2019 at 11:53 AM Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     On 9/13/19 11:37 AM, IAGO GIN? V?ZQUEZ wrote:
>     > But if I type
>     > >"?"
>     > the output is
>     > [1] "?"
>     > so seemingly it can be represented. Or, am I wrong?
>
>     In RGui you can print the string, because RGui is a Windows Unicode
>     application (uses UTF16-LE and bypasses the C runtime for
>     strings). But
>     it is just the gui, R itself (and hence also packages) use the
>     current
>     native encoding as defined by the C runtime. RGui will make sure R
>     gets
>     the string in UTF-8, but as soon as you do anything even slightly
>     non-trivial, which includes formatting, the string will be
>     converted to
>     the current native encoding. Some R functions allow you to do certain
>     things in UTF-8 without conversion to native encoding, you'd have to
>     read very carefully the documentation for each function - but for
>     practical use, you either need to live with the misinterpretation of
>     some characters, or use Windows in the locale where your
>     characters can
>     be represented (e.g. Chinese locale when working with Chinese
>     strings),
>     or use Linux/maOS. On Linux/macOS the current native encoding can be
>     UTF-8, so there is no problem. On Windows, with the current toolchain
>     based on mingw, this is not possible.
>
>
> mingw-w64 is capable of processing utf-8 (it can process bytes after 
> all). Can you explain what you mean here? Would any other compiler on 
> Windows not suffer from this problem?

The problem is using UTF-8 as the current locale as understood by the C 
runtime/C library. By default mingw uses msvcrt, which does not allow 
UTF-8 as current locale (via setlocale()). Now mingw also allows to 
build with UCRT (recently), and I hope one day we will be able to use 
it, but it is not yet the default, msys2 does not use it yet for its 
mingw_ packages and we need also the external packages . Note that R 
(CRAN, and also BIOC) provide binary versions of all packages for 
Windows, they need to build them and they need all library dependencies. 
All of those would have to be rebuilt with UCRT, which will be a huge 
task. Fixing R on its own to support UTF-8 natively on Windows when the 
C runtime allows it won't be hard, because R already can do it on Unix, 
but the problem is all the dependencies.

Tomas



>
>
>     Best
>     Tomas
>
>     >
>     > Best
>     > Iago
>     >
>     ------------------------------------------------------------------------
>     > *De:* Tomas Kalibera <tomas.kalibera at gmail.com
>     <mailto:tomas.kalibera at gmail.com>>
>     > *Enviat el:* divendres, 13 de setembre de 2019 11:24
>     > *Per a:* IAGO GIN? V?ZQUEZ <i.gine at pssjd.org
>     <mailto:i.gine at pssjd.org>>; r-devel at r-project.org
>     <mailto:r-devel at r-project.org>
>     > <r-devel at r-project.org <mailto:r-devel at r-project.org>>
>     > *Tema:* Re: [Rd] Printing chinese characters (UTF-8) on R 3.5.2
>     > -windows 10
>     > On 9/13/19 11:01 AM, IAGO GIN? V?ZQUEZ wrote:
>     > > I have a chinese character on a data frame, but the output of
>     > printing it is its UTF-8 code. Concretely, the character is ?
>     and the
>     > code is U+6703. Following the code I arrive to the instruction
>     > >
>     > >> base::format.default("?")
>     > > which prints
>     > >
>     > > [1] "<U+6703>"
>     > >
>     > > I do not know which is the extent of this behaviour either if it
>     > follows on most recent versions of R.
>     > >
>     > > Is it expected?
>     >
>     > If you are running this on Windows in an encoding where the
>     character
>     > cannot be represented (e.g. non-Chinese locale), then yes, this is
>     > expected behavior.
>     >
>     > On Unix systems where R can run in UTF-8 encoding (Linux,
>     macOS), the
>     > character will be formatted/displayed properly.
>     >
>     > Best
>     > Tomas
>     >
>     > >
>     > > Thank you!
>     > >
>     > > Iago
>     > >
>     > >??????? [[alternative HTML version deleted]]
>     > >
>     > > ______________________________________________
>     > > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     > > https://stat.ethz.ch/mailman/listinfo/r-devel
>     >
>     >
>
>
>     ? ? ? ? [[alternative HTML version deleted]]
>
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri Sep 13 18:06:15 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Fri, 13 Sep 2019 18:06:15 +0200
Subject: [Rd] Fw: Calling a LAPACK subroutine from R
In-Reply-To: <BF20B805-1DC0-4DDB-9A46-ED19750A05E1@xs4all.nl>
References: <DM6PR04MB39154A2AC724DC1A1ED7ABFEC3B60@DM6PR04MB3915.namprd04.prod.outlook.com>
 <DM6PR04MB3915AAF7C4F24F2D854AD8FBC3B10@DM6PR04MB3915.namprd04.prod.outlook.com>
 <329F5311-5041-4297-B5C3-C05C258B1AF7@xs4all.nl>
 <026463ed-e8df-3d28-fef9-94ac3b1c740b@insa-toulouse.fr>
 <BF20B805-1DC0-4DDB-9A46-ED19750A05E1@xs4all.nl>
Message-ID: <9acd6f7c-0ebc-3785-b871-184435022151@insa-toulouse.fr>

On 12/09/2019 11:07, Berend Hasselman wrote:
>> On 12 Sep 2019, at 10:36, Serguei Sokol<sokol at insa-toulouse.fr>  wrote:
>>
>> On 11/09/2019 21:38, Berend Hasselman wrote:
>>> The Lapack library is loaded automatically by R itself when it needs it  for doing some calculation.
>>> You can force it to do that with a (dummy) solve for example.
>>> Put this at start of your script:
>>>
>>> <code>
>>> # dummy code to get LAPACK library loaded
>>> X1 <- diag(2,2)
>>> x1 <- rep(2,2)
>>> # X1;x1
>>> z <- solve(X1,x1)
>>> </code>
>> another way is to use directly dyn.load():
>>
>> lapack.path <- paste0(file.path(R.home(), ifelse(.Platform$OS.type == "windows",
>>           file.path("bin", .Platform$r_arch, "Rlapack"), file.path("lib", "libRlapack"))),
>>           .Platform$dynlib.ext)
>> dyn.load(lapack.path)
> This will not work on macOS.
> The extension for dynamic libraries is .dylib.
> So you would need
>
> lapack.path <- paste0(file.path(R.home(), ifelse(.Platform$OS.type == "windows",
>           file.path("bin", .Platform$r_arch, "Rlapack"), file.path("lib", "libRlapack"))),
>           ".dylib")
>
> See the help for .Platform and dyn.load for the details for macOS.
Indeed. I was surprised to discover that .Platform$dynlib.ext is set to 
".so" on macos,
not to ".dylib". Thank you to point me to a special note about it in 
?.Platform
Is there a R predefined variable set to ".dylib" on macos ?
Meanwhile, the code for lapack path detection will become a little bit 
more complicated:

dynlib.ext=ifelse(Sys.info()[["sysname"]] == "Darwin", ".dylib", 
.Platform$dynlib.ext)
lapack.path <- paste0(file.path(R.home(), ifelse(.Platform$OS.type == 
"windows",
 ???????? file.path("bin", .Platform$r_arch, "Rlapack"), 
file.path("lib", "libRlapack"))),
 ???????? dynlib.ext)
dyn.load(lapack.path)
is.loaded("dgemv") # must be TRUE

Serguei.


From berger @end|ng |rom mp||b-ber||n@mpg@de  Sat Sep 14 13:31:27 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Sat, 14 Sep 2019 13:31:27 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
 <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
 <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>
Message-ID: <94e5fbbe-6f03-9b69-8abf-ebeced33a016@mpiib-berlin.mpg.de>

Dear all,

I did some more tests regarding the == operator in Ops.data.frame (see 
below).? All tests done in R 3.6.1 (x86_64-w64-mingw32).

I find that errors are thrown also when comparing a zero length 
data.frame to atomic objects with length>0 which should be a valid case 
according to the documentation. This can be traced to a check in the 
last line of Ops.data.frame which tests for the presence of an empty 
result value (i.e. list() ) but does not handle a list of empty values 
(i.e. list(logical(0))) which in fact is generated in those cases. There 
is a simple fix (see also below).

There are other issues with the S4 class example (i.e. data.frame() == 
<s4_object with representation as list>) which fails for different reasons.

##############################################################################

d_0 = data.frame(a = numeric(0)) # zero length data.frame
d_00 = data.frame(numeric(0)) # zero length data.frame without names
names(d_00) <- NULL # remove names to obtain value being an empty list() 
at the end of Ops.data.frame
d_3 = data.frame(a=1:3) # non-empty data.frame

m_0 = matrix(logical(0)) # zero length matrix
#------------------------
# error A:
# Error in matrix(if (is.null(value)) logical() else value, nrow = nr, 
dimnames = list(rn,? :
# length of 'dimnames' [2] not equal to array extent

d_0 == 1?? # error A
d_00 == 1? # <0 x 0 matrix>
d_3 == 1?? # <3 x 1 matrix>

d_0 == logical(0) # error A
d_00 == logical(0) # <0 x 0 matrix>
d_3 == logical(0) # error A

d_0 == NULL # error A
d_00 == NULL # <0 x 0 matrix>
d_3 == NULL # error A

m_0 == d_0? # error A
m_0 == d_00 # <0 x 0 matrix>
m_0 == d3?? # error A

# empty matrix for comparison
m_0 == 1 # < 0 x 1 matrix>
m_0 == logical(0) # < 0 x 1 matrix>
m_0 == NULL # < 0 x 1 matrix>

# All errors above could be solved by changing the last line in 
Ops.data.frame from
# matrix(if (is.null(value)) logical() else value, nrow = nr, dimnames = 
list(rn, cn))
# to
# matrix(if (length(value)==0) logical() else value, nrow = nr, dimnames 
= list(rn, cn))
# Alternatively or in addition one could add an explicit test for 
data.frame() == NULL if desired and raise an error

#########################################################################################
# non-empty return value but failing in the same code line due to 
incompatible dimensions.
# should Ops.data.frame at all be dispatched for <data.frame> == <S4 
object> ?
setClass("FOOCLASS",
 ????????? representation("list")
)
ma = new("FOOCLASS", list(M=matrix(rnorm(300), 30,10)))
isS4(ma)
d_3 == ma # error A
##########################################################################################

Best regards,
Hilmar

Am 11/09/2019 um 13:26 schrieb Hilmar Berger:
> Sorry, I can't reproduce the example below even on the same machine. 
> However, the following example produces the same error as NULL values 
> in prior examples:
>
> > setClass("FOOCLASS",
> +????????? representation("list")
> + )
> > ma = new("FOOCLASS", list(M=matrix(rnorm(300), 30,10)))
> > isS4(ma)
> [1] TRUE
> > data.frame(a=1:3) == ma
> Error in matrix(unlist(value, recursive = FALSE, use.names = FALSE), 
> nrow = nr,? :
> ? length of 'dimnames' [2] not equal to array extent
>
> Best,
> Hilmar
>
>
> On 11/09/2019 12:24, Hilmar Berger wrote:
>> Another example where a data.frame is compared to (here non-null, 
>> non-empty) non-atomic values in Ops.data.frame, resulting in an error 
>> message:
>>
>> setClass("FOOCLASS2",
>> ???????? slots = c(M="matrix")
>> )
>> ma = new("FOOCLASS2", M=matrix(rnorm(300), 30,10))
>>
>> > isS4(ma)
>> [1] TRUE
>> > ma == data.frame(a=1:3)
>> Error in eval(f) : dims [product 1] do not match the length of object 
>> [3]
>>
>> As for the NULL/logical(0) cases I would suggest to explicitly test 
>> for invalid conditions in Ops.data.frame and generate a 
>> comprehensible message (e.g. "comparison is possible only for atomic 
>> and list types") if appropriate.
>>
>> Best regards,
>> Hilmar
>>
>>
>> On 11/09/2019 11:55, Hilmar Berger wrote:
>>>
>>> In the data.frame()==NULL cases I have the impression that the fact 
>>> that both sides are non-atomic is not properly detected and 
>>> therefore R tries to go on with the == method for data.frames.
>>>
>>> From a cursory check in Ops.data.frame() and some debugging I have 
>>> the impression that the case of the second argument being non-atomic 
>>> or empty is not handled at all and the function progresses until the 
>>> end, where it fails in the last step on an empty value:
>>>
>>> matrix(unlist(value, recursive = FALSE, use.names = FALSE),
>>> ??? nrow = nr, dimnames = list(rn, cn)) 
>>
>


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Sun Sep 15 14:52:34 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sun, 15 Sep 2019 20:52:34 +0800
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
Message-ID: <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>

Finally read in detail your response Gabe. Looks great, and I agree it's
quite intuitive, as well as agree against non-recycling.

Once the length(n) == length(dim(x)) behavior is enabled, I don't think
there's any need/desire to have head() do x[1:6,1:6] anymore. head(x, c(6,
6)) is quite clear for those familiar with head(x, 6), it would seem to me.

Mike C

On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Michael and Abby,
>
> So one thing that could happen that would be backwards compatible (with
> the exception of something that was an error no longer being an error) is
> head and tail could take vectors of length (dim(x)) rather than integers of
> length for n, with the default being n=6 being equivalent to n = c(6,
> dim(x)[2], <...>, dim(x)[k]), at least for the deprecation cycle, if not
> permanently. It not recycling would be unexpected based on the behavior of
> many R functions but would preserve the current behavior while granting
> more fine-grained control to users that feel they need it.
>
> A rapidly thrown-together prototype of such a method for the head of a
> matrix case is as follows:
>
> head2 = function(x, n = 6L, ...) {
>     indvecs = lapply(seq_along(dim(x)), function(i) {
>         if(length(n) >= i) {
>             ni = n[i]
>         } else {
>             ni =  dim(x)[i]
>         }
>         if(ni < 0L)
>             ni = max(nrow(x) + ni, 0L)
>         else
>             ni = min(ni, dim(x)[i])
>         seq_len(ni)
>     })
>     lstargs = c(list(x),indvecs, drop = FALSE)
>     do.call("[", lstargs)
> }
>
>
> > mat = matrix(1:100, 10, 10)
>
> > *head(mat)*
>
>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>
> [1,]    1   11   21   31   41   51   61   71   81    91
>
> [2,]    2   12   22   32   42   52   62   72   82    92
>
> [3,]    3   13   23   33   43   53   63   73   83    93
>
> [4,]    4   14   24   34   44   54   64   74   84    94
>
> [5,]    5   15   25   35   45   55   65   75   85    95
>
> [6,]    6   16   26   36   46   56   66   76   86    96
>
> > *head2(mat)*
>
>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>
> [1,]    1   11   21   31   41   51   61   71   81    91
>
> [2,]    2   12   22   32   42   52   62   72   82    92
>
> [3,]    3   13   23   33   43   53   63   73   83    93
>
> [4,]    4   14   24   34   44   54   64   74   84    94
>
> [5,]    5   15   25   35   45   55   65   75   85    95
>
> [6,]    6   16   26   36   46   56   66   76   86    96
>
> > *head2(mat, c(2, 3))*
>
>      [,1] [,2] [,3]
>
> [1,]    1   11   21
>
> [2,]    2   12   22
>
> > *head2(mat, c(2, -9))*
>
>      [,1]
>
> [1,]    1
>
> [2,]    2
>
>
> Now one thing to keep in mind here, is that I think we'd  either a) have
> to make the non-recycling  behavior permanent, or b) have head treat
> data.frames and matrices different with respect to the subsets they grab
> (which strikes me as a  *Bad Plan *(tm)).
>
> So I don't think the default behavior would ever be mat[1:6, 1:6],  not
> because of backwards compatibility, but because at least in my intuition
> that is just not what head on a data.frame should do by default, and I
> think the behaviors for the basic rectangular datatypes should "stick
> together". I mean, also because of backwards compatibility, but that could  *in
> theory* change across a long enough deprecation cycle, but  the
> conceptually right thing to do with a data.frame probably won't.
>
> All of that said, is head(mat, c(6, 6)) really that much  easier to
> type/better than just mat[1:6, 1:6, drop=FALSE] (I know this will behave
> differently if any of the dims of mat are less than 6, but if so why are
> you heading it in the first place ;) )? I don't really have a strong
> feeling on the answer to that.
>
> I'm happy to put a patch for head.matrix, head.data.frame, tail.matrix and
> tail.data.frame, plus documentation, if people on R-core are interested in
> this.
>
> Note, as most here probably know, and as alluded to above,  length(n) > 1
> for head or tail currently give an error, so  this would  be an extension
> of the existing functionality in the mathematical extension sense, where
> all existing behavior would remain identical, but the support/valid
> parameter space would grow.
>
> Best,
> ~G
>
>
> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle <spurdle.a at gmail.com> wrote:
>
>> > I assume there are lots of backwards-compatibility issues as well as
>> valid
>> > use cases for this behavior, so I guess defaulting to M[1:6, 1:6] is out
>> of
>> > the question.
>>
>> Agree.
>>
>> > Is there any scope for adding a new argument to head.matrix that would
>> > allow this flexibility?
>>
>> I agree with what you're trying to achieve.
>> However, I'm not sure this is as simple as you're suggesting.
>>
>> What if the user wants "head" in rows but "tail" in columns.
>> Or "head" in rows, and both "head" and "tail" in columns.
>> With head and tail alone, there's a combinatorial explosion.
>>
>> Also, when using tail on an unnamed matrix, it may be desirable to name
>> rows and columns.
>>
>> And all of this assumes standard matrix objects.
>> Add in a matrix subclasses and related objects, and things get more
>> complex
>> still.
>>
>> As I suggested in a another thread, a few days ago, I'm planning to write
>> an R package for matrices and matrix-like objects (possibly extending the
>> Matrix package), with an initial emphasis on subsetting, printing and
>> formatting.
>> So, I'm interested to hear more suggestions on this topic.
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Sun Sep 15 16:36:02 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 15 Sep 2019 16:36:02 +0200
Subject: [Rd] REprintf could be caught by tryCatch(message)
Message-ID: <CAOO9MKX_GeeVYbUCZtn688ZTq06Ue4vGeZcUTMnGxiWG+JBZhQ@mail.gmail.com>

Dear R-devel community,

There appears to be an inconsistency in R C API about the exceptions
that can be raised from C code.
Mapping of R C funs to corresponding R functions is as follows.

error    -> stop
warning  -> warning
REprintf -> message
Rprintf  -> cat

Rprint/cat is of course not an exception, I listed it just for completeness.
The inconsistency I would like to report is about REprintf. It cannot
be caught by tryCatch(message). Warnings are errors are being caught
as expected.

Is there any chance to "fix"/"improve" REprintf so tryCatch(message)
can catch it?
So in the example below catch(Cmessage()) would behave consistently to
R's catch(message("a"))?

Regards,
Jan Gorecki

catch = function(expr) {
  tryCatch(expr,
    message=function(m) cat("caught message\n"),
    warning=function(w) cat("caught warning\n"),
    error=function(e) cat("caught error\n")
  )
}
library(inline)
Cstop = cfunction(c(), 'error("%s\\n","a"); return R_NilValue;')
Cwarning = cfunction(c(), 'warning("%s\\n","a"); return R_NilValue;')
Cmessage = cfunction(c(), 'REprintf("%s\\n","a"); return R_NilValue;')

catch(stop("a"))
#caught error
catch(warning("a"))
#caught warning
catch(message("a"))
#caught message

catch(Cstop())
#caught error
catch(Cwarning())
#caught warning
catch(Cmessage())
#a
#NULL


From |uke-t|erney @end|ng |rom u|ow@@edu  Sun Sep 15 17:25:38 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Sun, 15 Sep 2019 15:25:38 +0000
Subject: [Rd] [External]  REprintf could be caught by tryCatch(message)
In-Reply-To: <CAOO9MKX_GeeVYbUCZtn688ZTq06Ue4vGeZcUTMnGxiWG+JBZhQ@mail.gmail.com>
References: <CAOO9MKX_GeeVYbUCZtn688ZTq06Ue4vGeZcUTMnGxiWG+JBZhQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1909151023220.3061@luke-Latitude-7480>

On Sun, 15 Sep 2019, Jan Gorecki wrote:

> Dear R-devel community,
>
> There appears to be an inconsistency in R C API about the exceptions
> that can be raised from C code.
> Mapping of R C funs to corresponding R functions is as follows.
>
> error    -> stop
> warning  -> warning
> REprintf -> message

This is wrong: REpintf is like cat with file = stderr(). If this claim
is made somewhere in R documentation please report it a a bug.

> Rprintf  -> cat
>
> Rprint/cat is of course not an exception, I listed it just for completeness.
> The inconsistency I would like to report is about REprintf. It cannot
> be caught by tryCatch(message). Warnings are errors are being caught
> as expected.
>
> Is there any chance to "fix"/"improve" REprintf so tryCatch(message)
> can catch it?

No: this is behaving as intended.

Best,

luke

> So in the example below catch(Cmessage()) would behave consistently to
> R's catch(message("a"))?
>
> Regards,
> Jan Gorecki
>
> catch = function(expr) {
>  tryCatch(expr,
>    message=function(m) cat("caught message\n"),
>    warning=function(w) cat("caught warning\n"),
>    error=function(e) cat("caught error\n")
>  )
> }
> library(inline)
> Cstop = cfunction(c(), 'error("%s\\n","a"); return R_NilValue;')
> Cwarning = cfunction(c(), 'warning("%s\\n","a"); return R_NilValue;')
> Cmessage = cfunction(c(), 'REprintf("%s\\n","a"); return R_NilValue;')
>
> catch(stop("a"))
> #caught error
> catch(warning("a"))
> #caught warning
> catch(message("a"))
> #caught message
>
> catch(Cstop())
> #caught error
> catch(Cwarning())
> #caught warning
> catch(Cmessage())
> #a
> #NULL
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From j@goreck| @end|ng |rom w|t@edu@p|  Sun Sep 15 19:09:14 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 15 Sep 2019 19:09:14 +0200
Subject: [Rd] [External]  REprintf could be caught by tryCatch(message)
In-Reply-To: <alpine.DEB.2.21.1909151023220.3061@luke-Latitude-7480>
References: <CAOO9MKX_GeeVYbUCZtn688ZTq06Ue4vGeZcUTMnGxiWG+JBZhQ@mail.gmail.com>
 <alpine.DEB.2.21.1909151023220.3061@luke-Latitude-7480>
Message-ID: <CAOO9MKVO9J5LsT78N9CJqbDpiibkOOcDAeVOT78VDvo+FvmmbA@mail.gmail.com>

Thank you Luke for prompt reply.
Is it possible then to request a new function to R C API "message"
that would equivalent to R "message" function? Similarly as we now
have C "warning" and C "error" functions.

Best,
Jan

On Sun, Sep 15, 2019 at 5:25 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> On Sun, 15 Sep 2019, Jan Gorecki wrote:
>
> > Dear R-devel community,
> >
> > There appears to be an inconsistency in R C API about the exceptions
> > that can be raised from C code.
> > Mapping of R C funs to corresponding R functions is as follows.
> >
> > error    -> stop
> > warning  -> warning
> > REprintf -> message
>
> This is wrong: REpintf is like cat with file = stderr(). If this claim
> is made somewhere in R documentation please report it a a bug.
>
> > Rprintf  -> cat
> >
> > Rprint/cat is of course not an exception, I listed it just for completeness.
> > The inconsistency I would like to report is about REprintf. It cannot
> > be caught by tryCatch(message). Warnings are errors are being caught
> > as expected.
> >
> > Is there any chance to "fix"/"improve" REprintf so tryCatch(message)
> > can catch it?
>
> No: this is behaving as intended.
>
> Best,
>
> luke
>
> > So in the example below catch(Cmessage()) would behave consistently to
> > R's catch(message("a"))?
> >
> > Regards,
> > Jan Gorecki
> >
> > catch = function(expr) {
> >  tryCatch(expr,
> >    message=function(m) cat("caught message\n"),
> >    warning=function(w) cat("caught warning\n"),
> >    error=function(e) cat("caught error\n")
> >  )
> > }
> > library(inline)
> > Cstop = cfunction(c(), 'error("%s\\n","a"); return R_NilValue;')
> > Cwarning = cfunction(c(), 'warning("%s\\n","a"); return R_NilValue;')
> > Cmessage = cfunction(c(), 'REprintf("%s\\n","a"); return R_NilValue;')
> >
> > catch(stop("a"))
> > #caught error
> > catch(warning("a"))
> > #caught warning
> > catch(message("a"))
> > #caught message
> >
> > catch(Cstop())
> > #caught error
> > catch(Cwarning())
> > #caught warning
> > catch(Cmessage())
> > #a
> > #NULL
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From |g@ut|er @end|ng |rom gm@||@com  Sun Sep 15 21:01:09 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sun, 15 Sep 2019 15:01:09 -0400
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
	=?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
Message-ID: <CA+JCgN3VBrqXLc+Y=wikf19zkoCRNct2Pof0sVxF82RWN-+T1g@mail.gmail.com>

In case a search engine leads someone with the same issue here, I am
documenting the point I reached:

I can reproduce the issue with a small example when forcing R to not load
any package at startup time (using an Renviron file):
```
package <- "utils"
lib.loc <- "<fill this according to your R install>"
ns <- loadNamespace(package, lib.loc)
```

The code path goes through `registerS3methods(nsInfo$S3methods, package,
env)` and there to:

```
if (methods::is(genfun, "genericFunction"))
```

The evaluation of `methods::is` reaches the line triggering the error as
`.identC(class1, class2)` and `.identC(class2, "ANY")` both return `NA` and
`NA || NA` is not defined:

```
> if (NA || NA) { cat("here\n") }
Error in if (NA || NA) { : missing value where TRUE/FALSE needed
```

As I understand it `.identC()` should never return `NA`, and if the case
this would mean that R itself is an unstable state (something at the C
level that should not have happened has happened) but this was not caught
earlier.

	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Mon Sep 16 02:15:17 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Mon, 16 Sep 2019 00:15:17 +0000
Subject: [Rd] [External]  REprintf could be caught by tryCatch(message)
In-Reply-To: <CAOO9MKVO9J5LsT78N9CJqbDpiibkOOcDAeVOT78VDvo+FvmmbA@mail.gmail.com>
References: <CAOO9MKX_GeeVYbUCZtn688ZTq06Ue4vGeZcUTMnGxiWG+JBZhQ@mail.gmail.com>
 <alpine.DEB.2.21.1909151023220.3061@luke-Latitude-7480>
 <CAOO9MKVO9J5LsT78N9CJqbDpiibkOOcDAeVOT78VDvo+FvmmbA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1909151913320.3061@luke-Latitude-7480>

You can file it as a wishlist item in the bug trackign system. Without
a compelling case or a complete and well tested patch or both I doubt
it will rise to the top of anyone's priority list.

Best,

luke

On Sun, 15 Sep 2019, Jan Gorecki wrote:

> Thank you Luke for prompt reply.
> Is it possible then to request a new function to R C API "message"
> that would equivalent to R "message" function? Similarly as we now
> have C "warning" and C "error" functions.
>
> Best,
> Jan
>
> On Sun, Sep 15, 2019 at 5:25 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>>
>> On Sun, 15 Sep 2019, Jan Gorecki wrote:
>>
>>> Dear R-devel community,
>>>
>>> There appears to be an inconsistency in R C API about the exceptions
>>> that can be raised from C code.
>>> Mapping of R C funs to corresponding R functions is as follows.
>>>
>>> error    -> stop
>>> warning  -> warning
>>> REprintf -> message
>>
>> This is wrong: REpintf is like cat with file = stderr(). If this claim
>> is made somewhere in R documentation please report it a a bug.
>>
>>> Rprintf  -> cat
>>>
>>> Rprint/cat is of course not an exception, I listed it just for completeness.
>>> The inconsistency I would like to report is about REprintf. It cannot
>>> be caught by tryCatch(message). Warnings are errors are being caught
>>> as expected.
>>>
>>> Is there any chance to "fix"/"improve" REprintf so tryCatch(message)
>>> can catch it?
>>
>> No: this is behaving as intended.
>>
>> Best,
>>
>> luke
>>
>>> So in the example below catch(Cmessage()) would behave consistently to
>>> R's catch(message("a"))?
>>>
>>> Regards,
>>> Jan Gorecki
>>>
>>> catch = function(expr) {
>>>  tryCatch(expr,
>>>    message=function(m) cat("caught message\n"),
>>>    warning=function(w) cat("caught warning\n"),
>>>    error=function(e) cat("caught error\n")
>>>  )
>>> }
>>> library(inline)
>>> Cstop = cfunction(c(), 'error("%s\\n","a"); return R_NilValue;')
>>> Cwarning = cfunction(c(), 'warning("%s\\n","a"); return R_NilValue;')
>>> Cmessage = cfunction(c(), 'REprintf("%s\\n","a"); return R_NilValue;')
>>>
>>> catch(stop("a"))
>>> #caught error
>>> catch(warning("a"))
>>> #caught warning
>>> catch(message("a"))
>>> #caught message
>>>
>>> catch(Cstop())
>>> #caught error
>>> catch(Cwarning())
>>> #caught warning
>>> catch(Cmessage())
>>> #a
>>> #NULL
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Sep 16 08:09:15 2019
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 16 Sep 2019 08:09:15 +0200
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for?=
 =?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CA+JCgN3VBrqXLc+Y=wikf19zkoCRNct2Pof0sVxF82RWN-+T1g@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
 <CA+JCgN3VBrqXLc+Y=wikf19zkoCRNct2Pof0sVxF82RWN-+T1g@mail.gmail.com>
Message-ID: <23935.9995.170779.414021@hornik.net>

>>>>> Laurent Gautier writes:

> In case a search engine leads someone with the same issue here, I am
> documenting the point I reached:

> I can reproduce the issue with a small example when forcing R to not load
> any package at startup time (using an Renviron file):
> ```
> package <- "utils"
> lib.loc <- "<fill this according to your R install>"
> ns <- loadNamespace(package, lib.loc)
> ```

I cannot reproduce this using current R-devel or R-patched.  After
starting with R_DEFAULT_PACKAGES=NULL,

R> search()
[1] ".GlobalEnv"   "Autoloads"    "package:base"
R> loadedNamespaces()
[1] "compiler" "tools"    "base"    
R> package <- "utils"
R> lib.loc <- file.path(R.home(), "library")
R> ns <- loadNamespace(package, lib.loc)
R> loadedNamespaces()
[1] "compiler" "tools"    "utils"    "base"    

-k

> The code path goes through `registerS3methods(nsInfo$S3methods, package,
> env)` and there to:

> ```
> if (methods::is(genfun, "genericFunction"))
> ```

> The evaluation of `methods::is` reaches the line triggering the error as
> `.identC(class1, class2)` and `.identC(class2, "ANY")` both return `NA` and
> `NA || NA` is not defined:

> ```
>> if (NA || NA) { cat("here\n") }
> Error in if (NA || NA) { : missing value where TRUE/FALSE needed
> ```

> As I understand it `.identC()` should never return `NA`, and if the case
> this would mean that R itself is an unstable state (something at the C
> level that should not have happened has happened) but this was not caught
> earlier.

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From rdonne||y @end|ng |rom @n@cond@@com  Fri Sep 13 13:33:59 2019
From: rdonne||y @end|ng |rom @n@cond@@com (Ray Donnelly)
Date: Fri, 13 Sep 2019 13:33:59 +0200
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
In-Reply-To: <619e2c80-85a3-e837-9270-2bfec41f208b@gmail.com>
References: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>
 <DB8PR02MB55314C10AC8DA479BB93C5D792B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <619e2c80-85a3-e837-9270-2bfec41f208b@gmail.com>
Message-ID: <CAF5kcVUXqsBr-=ayxUvBBvj32LHKoGfQ4vmJajJZ3wUj+gPWjg@mail.gmail.com>

On Fri, Sep 13, 2019 at 11:53 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 9/13/19 11:37 AM, IAGO GIN? V?ZQUEZ wrote:
> > But if I type
> > >"?"
> > the output is
> > [1] "?"
> > so seemingly it can be represented. Or, am I wrong?
>
> In RGui you can print the string, because RGui is a Windows Unicode
> application (uses UTF16-LE and bypasses the C runtime for strings). But
> it is just the gui, R itself (and hence also packages) use the current
> native encoding as defined by the C runtime. RGui will make sure R gets
> the string in UTF-8, but as soon as you do anything even slightly
> non-trivial, which includes formatting, the string will be converted to
> the current native encoding. Some R functions allow you to do certain
> things in UTF-8 without conversion to native encoding, you'd have to
> read very carefully the documentation for each function - but for
> practical use, you either need to live with the misinterpretation of
> some characters, or use Windows in the locale where your characters can
> be represented (e.g. Chinese locale when working with Chinese strings),
> or use Linux/maOS. On Linux/macOS the current native encoding can be
> UTF-8, so there is no problem. On Windows, with the current toolchain
> based on mingw, this is not possible.
>

mingw-w64 is capable of processing utf-8 (it can process bytes after all).
Can you explain what you mean here? Would any other compiler on Windows not
suffer from this problem?


>
>
> Best
> Tomas
>
> >
> > Best
> > Iago
> > ------------------------------------------------------------------------
> > *De:* Tomas Kalibera <tomas.kalibera at gmail.com>
> > *Enviat el:* divendres, 13 de setembre de 2019 11:24
> > *Per a:* IAGO GIN? V?ZQUEZ <i.gine at pssjd.org>; r-devel at r-project.org
> > <r-devel at r-project.org>
> > *Tema:* Re: [Rd] Printing chinese characters (UTF-8) on R 3.5.2
> > -windows 10
> > On 9/13/19 11:01 AM, IAGO GIN? V?ZQUEZ wrote:
> > > I have a chinese character on a data frame, but the output of
> > printing it is its UTF-8 code. Concretely, the character is ? and the
> > code is U+6703. Following the code I arrive to the instruction
> > >
> > >> base::format.default("?")
> > > which prints
> > >
> > > [1] "<U+6703>"
> > >
> > > I do not know which is the extent of this behaviour either if it
> > follows on most recent versions of R.
> > >
> > > Is it expected?
> >
> > If you are running this on Windows in an encoding where the character
> > cannot be represented (e.g. non-Chinese locale), then yes, this is
> > expected behavior.
> >
> > On Unix systems where R can run in UTF-8 encoding (Linux, macOS), the
> > character will be formatted/displayed properly.
> >
> > Best
> > Tomas
> >
> > >
> > > Thank you!
> > >
> > > Iago
> > >
> > >        [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From rdonne||y @end|ng |rom @n@cond@@com  Fri Sep 13 14:01:03 2019
From: rdonne||y @end|ng |rom @n@cond@@com (Ray Donnelly)
Date: Fri, 13 Sep 2019 14:01:03 +0200
Subject: [Rd] Printing chinese characters (UTF-8) on R 3.5.2 -windows 10
In-Reply-To: <ef74b520-0491-6607-2bc0-59ca2f3d19d3@gmail.com>
References: <DB8PR02MB5531213B6727618F58F9A15592B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <4b765a4a-72d9-bd54-0bee-92c876787b89@gmail.com>
 <DB8PR02MB55314C10AC8DA479BB93C5D792B30@DB8PR02MB5531.eurprd02.prod.outlook.com>
 <619e2c80-85a3-e837-9270-2bfec41f208b@gmail.com>
 <CAF5kcVUXqsBr-=ayxUvBBvj32LHKoGfQ4vmJajJZ3wUj+gPWjg@mail.gmail.com>
 <ef74b520-0491-6607-2bc0-59ca2f3d19d3@gmail.com>
Message-ID: <CAF5kcVUwwge4=GtZWk8YR2b+GHLW_xs27r8MwVDh9oa9RQWyjA@mail.gmail.com>

On Fri, Sep 13, 2019 at 1:46 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 9/13/19 1:33 PM, Ray Donnelly wrote:
>
> On Fri, Sep 13, 2019 at 11:53 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>> On 9/13/19 11:37 AM, IAGO GIN? V?ZQUEZ wrote:
>> > But if I type
>> > >"?"
>> > the output is
>> > [1] "?"
>> > so seemingly it can be represented. Or, am I wrong?
>>
>> In RGui you can print the string, because RGui is a Windows Unicode
>> application (uses UTF16-LE and bypasses the C runtime for strings). But
>> it is just the gui, R itself (and hence also packages) use the current
>> native encoding as defined by the C runtime. RGui will make sure R gets
>> the string in UTF-8, but as soon as you do anything even slightly
>> non-trivial, which includes formatting, the string will be converted to
>> the current native encoding. Some R functions allow you to do certain
>> things in UTF-8 without conversion to native encoding, you'd have to
>> read very carefully the documentation for each function - but for
>> practical use, you either need to live with the misinterpretation of
>> some characters, or use Windows in the locale where your characters can
>> be represented (e.g. Chinese locale when working with Chinese strings),
>> or use Linux/maOS. On Linux/macOS the current native encoding can be
>> UTF-8, so there is no problem. On Windows, with the current toolchain
>> based on mingw, this is not possible.
>>
>
> mingw-w64 is capable of processing utf-8 (it can process bytes after all).
> Can you explain what you mean here? Would any other compiler on Windows not
> suffer from this problem?
>
> The problem is using UTF-8 as the current locale as understood by the C
> runtime/C library. By default mingw uses msvcrt, which does not allow UTF-8
> as current locale (via setlocale()). Now mingw also allows to build with
> UCRT (recently), and I hope one day we will be able to use it, but it is
> not yet the default, msys2 does not use it yet for its mingw_ packages and
> we need also the external packages . Note that R (CRAN, and also BIOC)
> provide binary versions of all packages for Windows, they need to build
> them and they need all library dependencies. All of those would have to be
> rebuilt with UCRT, which will be a huge task. Fixing R on its own to
> support UTF-8 natively on Windows when the C runtime allows it won't be
> hard, because R already can do it on Unix, but the problem is all the
> dependencies.
>
Thanks. We build R for the Anaconda Distribution and are considering our
options around our Windows compilers, including the UCRT (and clang,
possibly from MSYS2, possibly from conda-forge, or a hybrid of some sort if
necessary).


> Tomas
>
>
>
>
>
>>
>>
>> Best
>> Tomas
>>
>> >
>> > Best
>> > Iago
>> > ------------------------------------------------------------------------
>> > *De:* Tomas Kalibera <tomas.kalibera at gmail.com>
>> > *Enviat el:* divendres, 13 de setembre de 2019 11:24
>> > *Per a:* IAGO GIN? V?ZQUEZ <i.gine at pssjd.org>; r-devel at r-project.org
>> > <r-devel at r-project.org>
>> > *Tema:* Re: [Rd] Printing chinese characters (UTF-8) on R 3.5.2
>> > -windows 10
>> > On 9/13/19 11:01 AM, IAGO GIN? V?ZQUEZ wrote:
>> > > I have a chinese character on a data frame, but the output of
>> > printing it is its UTF-8 code. Concretely, the character is ? and the
>> > code is U+6703. Following the code I arrive to the instruction
>> > >
>> > >> base::format.default("?")
>> > > which prints
>> > >
>> > > [1] "<U+6703>"
>> > >
>> > > I do not know which is the extent of this behaviour either if it
>> > follows on most recent versions of R.
>> > >
>> > > Is it expected?
>> >
>> > If you are running this on Windows in an encoding where the character
>> > cannot be represented (e.g. non-Chinese locale), then yes, this is
>> > expected behavior.
>> >
>> > On Unix systems where R can run in UTF-8 encoding (Linux, macOS), the
>> > character will be formatted/displayed properly.
>> >
>> > Best
>> > Tomas
>> >
>> > >
>> > > Thank you!
>> > >
>> > > Iago
>> > >
>> > >        [[alternative HTML version deleted]]
>> > >
>> > > ______________________________________________
>> > > R-devel at r-project.org mailing list
>> > > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>> >
>>
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Sep 16 09:23:29 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 16 Sep 2019 09:23:29 +0200
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
Message-ID: <23935.14449.965488.684663@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Sun, 15 Sep 2019 20:52:34 +0800 writes:

    > Finally read in detail your response Gabe. Looks great,
    > and I agree it's quite intuitive, as well as agree against
    > non-recycling.

    > Once the length(n) == length(dim(x)) behavior is enabled,
    > I don't think there's any need/desire to have head() do
    > x[1:6,1:6] anymore. head(x, c(6, 6)) is quite clear for
    > those familiar with head(x, 6), it would seem to me.

    > Mike C

Thank you, Gabe, and Michael.
I did like Gabe's proposal already back in July but was
busy and/or vacationing then ...

If you submit this with a patch (that includes changes to both
*.R and *.Rd , including some example) as "wishlist" item to R's
bugzilla, I'm willing/happy to check and commit this to R-devel.

Martin


    > On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker
    > <gabembecker at gmail.com> wrote:

    >> Hi Michael and Abby,
    >> 
    >> So one thing that could happen that would be backwards
    >> compatible (with the exception of something that was an
    >> error no longer being an error) is head and tail could
    >> take vectors of length (dim(x)) rather than integers of
    >> length for n, with the default being n=6 being equivalent
    >> to n = c(6, dim(x)[2], <...>, dim(x)[k]), at least for
    >> the deprecation cycle, if not permanently. It not
    >> recycling would be unexpected based on the behavior of
    >> many R functions but would preserve the current behavior
    >> while granting more fine-grained control to users that
    >> feel they need it.
    >> 
    >> A rapidly thrown-together prototype of such a method for
    >> the head of a matrix case is as follows:
    >> 
    >> head2 = function(x, n = 6L, ...) { indvecs =
    >> lapply(seq_along(dim(x)), function(i) { if(length(n) >=
    >> i) { ni = n[i] } else { ni = dim(x)[i] } if(ni < 0L) ni =
    >> max(nrow(x) + ni, 0L) else ni = min(ni, dim(x)[i])
    >> seq_len(ni) }) lstargs = c(list(x),indvecs, drop = FALSE)
    >> do.call("[", lstargs) }
    >> 
    >> 
    >> > mat = matrix(1:100, 10, 10)
    >> 
    >> > *head(mat)*
    >> 
    >> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
    >> 
    >> [1,] 1 11 21 31 41 51 61 71 81 91
    >> 
    >> [2,] 2 12 22 32 42 52 62 72 82 92
    >> 
    >> [3,] 3 13 23 33 43 53 63 73 83 93
    >> 
    >> [4,] 4 14 24 34 44 54 64 74 84 94
    >> 
    >> [5,] 5 15 25 35 45 55 65 75 85 95
    >> 
    >> [6,] 6 16 26 36 46 56 66 76 86 96
    >> 
    >> > *head2(mat)*
    >> 
    >> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
    >> 
    >> [1,] 1 11 21 31 41 51 61 71 81 91
    >> 
    >> [2,] 2 12 22 32 42 52 62 72 82 92
    >> 
    >> [3,] 3 13 23 33 43 53 63 73 83 93
    >> 
    >> [4,] 4 14 24 34 44 54 64 74 84 94
    >> 
    >> [5,] 5 15 25 35 45 55 65 75 85 95
    >> 
    >> [6,] 6 16 26 36 46 56 66 76 86 96
    >> 
    >> > *head2(mat, c(2, 3))*
    >> 
    >> [,1] [,2] [,3]
    >> 
    >> [1,] 1 11 21
    >> 
    >> [2,] 2 12 22
    >> 
    >> > *head2(mat, c(2, -9))*
    >> 
    >> [,1]
    >> 
    >> [1,] 1
    >> 
    >> [2,] 2
    >> 
    >> 
    >> Now one thing to keep in mind here, is that I think we'd
    >> either a) have to make the non-recycling behavior
    >> permanent, or b) have head treat data.frames and matrices
    >> different with respect to the subsets they grab (which
    >> strikes me as a *Bad Plan *(tm)).
    >> 
    >> So I don't think the default behavior would ever be
    >> mat[1:6, 1:6], not because of backwards compatibility,
    >> but because at least in my intuition that is just not
    >> what head on a data.frame should do by default, and I
    >> think the behaviors for the basic rectangular datatypes
    >> should "stick together". I mean, also because of
    >> backwards compatibility, but that could *in theory*
    >> change across a long enough deprecation cycle, but the
    >> conceptually right thing to do with a data.frame probably
    >> won't.
    >> 
    >> All of that said, is head(mat, c(6, 6)) really that much
    >> easier to type/better than just mat[1:6, 1:6, drop=FALSE]
    >> (I know this will behave differently if any of the dims
    >> of mat are less than 6, but if so why are you heading it
    >> in the first place ;) )? I don't really have a strong
    >> feeling on the answer to that.
    >> 
    >> I'm happy to put a patch for head.matrix,
    >> head.data.frame, tail.matrix and tail.data.frame, plus
    >> documentation, if people on R-core are interested in
    >> this.
    >> 
    >> Note, as most here probably know, and as alluded to
    >> above, length(n) > 1 for head or tail currently give an
    >> error, so this would be an extension of the existing
    >> functionality in the mathematical extension sense, where
    >> all existing behavior would remain identical, but the
    >> support/valid parameter space would grow.
    >> 
    >> Best, ~G
    >> 
    >> 
    >> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle
    >> <spurdle.a at gmail.com> wrote:
    >> 
    >>> > I assume there are lots of backwards-compatibility
    >>> issues as well as valid > use cases for this behavior,
    >>> so I guess defaulting to M[1:6, 1:6] is out of > the
    >>> question.
    >>> 
    >>> Agree.
    >>> 
    >>> > Is there any scope for adding a new argument to
    >>> head.matrix that would > allow this flexibility?
    >>> 
    >>> I agree with what you're trying to achieve.  However,
    >>> I'm not sure this is as simple as you're suggesting.
    >>> 
    >>> What if the user wants "head" in rows but "tail" in
    >>> columns.  Or "head" in rows, and both "head" and "tail"
    >>> in columns.  With head and tail alone, there's a
    >>> combinatorial explosion.
    >>> 
    >>> Also, when using tail on an unnamed matrix, it may be
    >>> desirable to name rows and columns.
    >>> 
    >>> And all of this assumes standard matrix objects.  Add in
    >>> a matrix subclasses and related objects, and things get
    >>> more complex still.
    >>> 
    >>> As I suggested in a another thread, a few days ago, I'm
    >>> planning to write an R package for matrices and
    >>> matrix-like objects (possibly extending the Matrix
    >>> package), with an initial emphasis on subsetting,
    >>> printing and formatting.  So, I'm interested to hear
    >>> more suggestions on this topic.
    >>> 
    >>> [[alternative HTML version deleted]]
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 
    >> 

    > 	[[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Sep 16 09:54:07 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 16 Sep 2019 15:54:07 +0800
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <23935.14449.965488.684663@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
Message-ID: <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>

Awesome. Gabe, since you already have a workshopped version, would you like
to proceed? Feel free to ping me to review the patch once it's posted.

On Mon, Sep 16, 2019 at 3:26 PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Michael Chirico
> >>>>>     on Sun, 15 Sep 2019 20:52:34 +0800 writes:
>
>     > Finally read in detail your response Gabe. Looks great,
>     > and I agree it's quite intuitive, as well as agree against
>     > non-recycling.
>
>     > Once the length(n) == length(dim(x)) behavior is enabled,
>     > I don't think there's any need/desire to have head() do
>     > x[1:6,1:6] anymore. head(x, c(6, 6)) is quite clear for
>     > those familiar with head(x, 6), it would seem to me.
>
>     > Mike C
>
> Thank you, Gabe, and Michael.
> I did like Gabe's proposal already back in July but was
> busy and/or vacationing then ...
>
> If you submit this with a patch (that includes changes to both
> *.R and *.Rd , including some example) as "wishlist" item to R's
> bugzilla, I'm willing/happy to check and commit this to R-devel.
>
> Martin
>
>
>     > On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker
>     > <gabembecker at gmail.com> wrote:
>
>     >> Hi Michael and Abby,
>     >>
>     >> So one thing that could happen that would be backwards
>     >> compatible (with the exception of something that was an
>     >> error no longer being an error) is head and tail could
>     >> take vectors of length (dim(x)) rather than integers of
>     >> length for n, with the default being n=6 being equivalent
>     >> to n = c(6, dim(x)[2], <...>, dim(x)[k]), at least for
>     >> the deprecation cycle, if not permanently. It not
>     >> recycling would be unexpected based on the behavior of
>     >> many R functions but would preserve the current behavior
>     >> while granting more fine-grained control to users that
>     >> feel they need it.
>     >>
>     >> A rapidly thrown-together prototype of such a method for
>     >> the head of a matrix case is as follows:
>     >>
>     >> head2 = function(x, n = 6L, ...) { indvecs =
>     >> lapply(seq_along(dim(x)), function(i) { if(length(n) >=
>     >> i) { ni = n[i] } else { ni = dim(x)[i] } if(ni < 0L) ni =
>     >> max(nrow(x) + ni, 0L) else ni = min(ni, dim(x)[i])
>     >> seq_len(ni) }) lstargs = c(list(x),indvecs, drop = FALSE)
>     >> do.call("[", lstargs) }
>     >>
>     >>
>     >> > mat = matrix(1:100, 10, 10)
>     >>
>     >> > *head(mat)*
>     >>
>     >> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>     >>
>     >> [1,] 1 11 21 31 41 51 61 71 81 91
>     >>
>     >> [2,] 2 12 22 32 42 52 62 72 82 92
>     >>
>     >> [3,] 3 13 23 33 43 53 63 73 83 93
>     >>
>     >> [4,] 4 14 24 34 44 54 64 74 84 94
>     >>
>     >> [5,] 5 15 25 35 45 55 65 75 85 95
>     >>
>     >> [6,] 6 16 26 36 46 56 66 76 86 96
>     >>
>     >> > *head2(mat)*
>     >>
>     >> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>     >>
>     >> [1,] 1 11 21 31 41 51 61 71 81 91
>     >>
>     >> [2,] 2 12 22 32 42 52 62 72 82 92
>     >>
>     >> [3,] 3 13 23 33 43 53 63 73 83 93
>     >>
>     >> [4,] 4 14 24 34 44 54 64 74 84 94
>     >>
>     >> [5,] 5 15 25 35 45 55 65 75 85 95
>     >>
>     >> [6,] 6 16 26 36 46 56 66 76 86 96
>     >>
>     >> > *head2(mat, c(2, 3))*
>     >>
>     >> [,1] [,2] [,3]
>     >>
>     >> [1,] 1 11 21
>     >>
>     >> [2,] 2 12 22
>     >>
>     >> > *head2(mat, c(2, -9))*
>     >>
>     >> [,1]
>     >>
>     >> [1,] 1
>     >>
>     >> [2,] 2
>     >>
>     >>
>     >> Now one thing to keep in mind here, is that I think we'd
>     >> either a) have to make the non-recycling behavior
>     >> permanent, or b) have head treat data.frames and matrices
>     >> different with respect to the subsets they grab (which
>     >> strikes me as a *Bad Plan *(tm)).
>     >>
>     >> So I don't think the default behavior would ever be
>     >> mat[1:6, 1:6], not because of backwards compatibility,
>     >> but because at least in my intuition that is just not
>     >> what head on a data.frame should do by default, and I
>     >> think the behaviors for the basic rectangular datatypes
>     >> should "stick together". I mean, also because of
>     >> backwards compatibility, but that could *in theory*
>     >> change across a long enough deprecation cycle, but the
>     >> conceptually right thing to do with a data.frame probably
>     >> won't.
>     >>
>     >> All of that said, is head(mat, c(6, 6)) really that much
>     >> easier to type/better than just mat[1:6, 1:6, drop=FALSE]
>     >> (I know this will behave differently if any of the dims
>     >> of mat are less than 6, but if so why are you heading it
>     >> in the first place ;) )? I don't really have a strong
>     >> feeling on the answer to that.
>     >>
>     >> I'm happy to put a patch for head.matrix,
>     >> head.data.frame, tail.matrix and tail.data.frame, plus
>     >> documentation, if people on R-core are interested in
>     >> this.
>     >>
>     >> Note, as most here probably know, and as alluded to
>     >> above, length(n) > 1 for head or tail currently give an
>     >> error, so this would be an extension of the existing
>     >> functionality in the mathematical extension sense, where
>     >> all existing behavior would remain identical, but the
>     >> support/valid parameter space would grow.
>     >>
>     >> Best, ~G
>     >>
>     >>
>     >> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle
>     >> <spurdle.a at gmail.com> wrote:
>     >>
>     >>> > I assume there are lots of backwards-compatibility
>     >>> issues as well as valid > use cases for this behavior,
>     >>> so I guess defaulting to M[1:6, 1:6] is out of > the
>     >>> question.
>     >>>
>     >>> Agree.
>     >>>
>     >>> > Is there any scope for adding a new argument to
>     >>> head.matrix that would > allow this flexibility?
>     >>>
>     >>> I agree with what you're trying to achieve.  However,
>     >>> I'm not sure this is as simple as you're suggesting.
>     >>>
>     >>> What if the user wants "head" in rows but "tail" in
>     >>> columns.  Or "head" in rows, and both "head" and "tail"
>     >>> in columns.  With head and tail alone, there's a
>     >>> combinatorial explosion.
>     >>>
>     >>> Also, when using tail on an unnamed matrix, it may be
>     >>> desirable to name rows and columns.
>     >>>
>     >>> And all of this assumes standard matrix objects.  Add in
>     >>> a matrix subclasses and related objects, and things get
>     >>> more complex still.
>     >>>
>     >>> As I suggested in a another thread, a few days ago, I'm
>     >>> planning to write an R package for matrices and
>     >>> matrix-like objects (possibly extending the Matrix
>     >>> package), with an initial emphasis on subsetting,
>     >>> printing and formatting.  So, I'm interested to hear
>     >>> more suggestions on this topic.
>     >>>
>     >>> [[alternative HTML version deleted]]
>     >>>
>     >>> ______________________________________________
>     >>> R-devel at r-project.org mailing list
>     >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >>>
>     >>
>
>     >   [[alternative HTML version deleted]]
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Sep 16 09:54:55 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 16 Sep 2019 09:54:55 +0200
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
 =?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <CA+JCgN3VBrqXLc+Y=wikf19zkoCRNct2Pof0sVxF82RWN-+T1g@mail.gmail.com>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
 <CA+JCgN3VBrqXLc+Y=wikf19zkoCRNct2Pof0sVxF82RWN-+T1g@mail.gmail.com>
Message-ID: <23935.16335.343808.52170@stat.math.ethz.ch>

>>>>> Laurent Gautier 
>>>>>     on Sun, 15 Sep 2019 15:01:09 -0400 writes:

    > In case a search engine leads someone with the same issue
    > here, I am documenting the point I reached:

    > I can reproduce the issue with a small example when
    > forcing R to not load any package at startup time (using
    > an Renviron file): ``` package <- "utils" lib.loc <-
    > "<fill this according to your R install>" ns <-
    > loadNamespace(package, lib.loc) ```

    > The code path goes through
    > `registerS3methods(nsInfo$S3methods, package, env)` and
    > there to:

    > ``` if (methods::is(genfun, "genericFunction")) ```

    > The evaluation of `methods::is` reaches the line
    > triggering the error as `.identC(class1, class2)` and
    > `.identC(class2, "ANY")` both return `NA` and `NA || NA`
    > is not defined:

    > ```
    >> if (NA || NA) { cat("here\n") }
    > Error in if (NA || NA) { : missing value where TRUE/FALSE
    > needed ```

    > As I understand it `.identC()` should never return `NA`,

that understanding is correct, it should return TRUE or FALSE,
nothing else.

    > and if the case this would mean that R itself is an
    > unstable state (something at the C level that should not
    > have happened has happened) but this was not caught
    > earlier.

yes.. something like that...
My current diagnosis would be that something in your embedding of R happened
in a way that "broke R entirely" ...
but note that I know almost nothing about embedding R.

Martin


From j@goreck| @end|ng |rom w|t@edu@p|  Mon Sep 16 12:34:56 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Mon, 16 Sep 2019 12:34:56 +0200
Subject: [Rd] [External]  REprintf could be caught by tryCatch(message)
In-Reply-To: <alpine.DEB.2.21.1909151913320.3061@luke-Latitude-7480>
References: <CAOO9MKX_GeeVYbUCZtn688ZTq06Ue4vGeZcUTMnGxiWG+JBZhQ@mail.gmail.com>
 <alpine.DEB.2.21.1909151023220.3061@luke-Latitude-7480>
 <CAOO9MKVO9J5LsT78N9CJqbDpiibkOOcDAeVOT78VDvo+FvmmbA@mail.gmail.com>
 <alpine.DEB.2.21.1909151913320.3061@luke-Latitude-7480>
Message-ID: <CAOO9MKUYaqANzYWN2XM4ZCKKb1K7msAmQrTNcOy_1nMqBG1q5Q@mail.gmail.com>

Thank you Luke,
I filled https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17612

Best,
Jan

On Mon, Sep 16, 2019 at 2:15 AM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> You can file it as a wishlist item in the bug trackign system. Without
> a compelling case or a complete and well tested patch or both I doubt
> it will rise to the top of anyone's priority list.
>
> Best,
>
> luke
>
> On Sun, 15 Sep 2019, Jan Gorecki wrote:
>
> > Thank you Luke for prompt reply.
> > Is it possible then to request a new function to R C API "message"
> > that would equivalent to R "message" function? Similarly as we now
> > have C "warning" and C "error" functions.
> >
> > Best,
> > Jan
> >
> > On Sun, Sep 15, 2019 at 5:25 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
> >>
> >> On Sun, 15 Sep 2019, Jan Gorecki wrote:
> >>
> >>> Dear R-devel community,
> >>>
> >>> There appears to be an inconsistency in R C API about the exceptions
> >>> that can be raised from C code.
> >>> Mapping of R C funs to corresponding R functions is as follows.
> >>>
> >>> error    -> stop
> >>> warning  -> warning
> >>> REprintf -> message
> >>
> >> This is wrong: REpintf is like cat with file = stderr(). If this claim
> >> is made somewhere in R documentation please report it a a bug.
> >>
> >>> Rprintf  -> cat
> >>>
> >>> Rprint/cat is of course not an exception, I listed it just for completeness.
> >>> The inconsistency I would like to report is about REprintf. It cannot
> >>> be caught by tryCatch(message). Warnings are errors are being caught
> >>> as expected.
> >>>
> >>> Is there any chance to "fix"/"improve" REprintf so tryCatch(message)
> >>> can catch it?
> >>
> >> No: this is behaving as intended.
> >>
> >> Best,
> >>
> >> luke
> >>
> >>> So in the example below catch(Cmessage()) would behave consistently to
> >>> R's catch(message("a"))?
> >>>
> >>> Regards,
> >>> Jan Gorecki
> >>>
> >>> catch = function(expr) {
> >>>  tryCatch(expr,
> >>>    message=function(m) cat("caught message\n"),
> >>>    warning=function(w) cat("caught warning\n"),
> >>>    error=function(e) cat("caught error\n")
> >>>  )
> >>> }
> >>> library(inline)
> >>> Cstop = cfunction(c(), 'error("%s\\n","a"); return R_NilValue;')
> >>> Cwarning = cfunction(c(), 'warning("%s\\n","a"); return R_NilValue;')
> >>> Cmessage = cfunction(c(), 'REprintf("%s\\n","a"); return R_NilValue;')
> >>>
> >>> catch(stop("a"))
> >>> #caught error
> >>> catch(warning("a"))
> >>> #caught warning
> >>> catch(message("a"))
> >>> #caught message
> >>>
> >>> catch(Cstop())
> >>> #caught error
> >>> catch(Cwarning())
> >>> #caught warning
> >>> catch(Cmessage())
> >>> #a
> >>> #NULL
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >> --
> >> Luke Tierney
> >> Ralph E. Wareham Professor of Mathematical Sciences
> >> University of Iowa                  Phone:             319-335-3386
> >> Department of Statistics and        Fax:               319-335-3017
> >>     Actuarial Science
> >> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> >> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From joh@nn@k|e|nbub @end|ng |rom gm@||@com  Mon Sep 16 15:53:12 2019
From: joh@nn@k|e|nbub @end|ng |rom gm@||@com (Johann R. Kleinbub)
Date: Mon, 16 Sep 2019 15:53:12 +0200
Subject: [Rd] Maybe bug? Using non-integer frequencies in stats::ts
Message-ID: <CALTZUioLKO3ynX0swMnwygMYOxtTS2UvPbCP1K4NDPyrfr+x4A@mail.gmail.com>

I am developing a package to analyse physiological time-series and I
thought that the most reliable and robust solution was to base it on the
native stats::ts class. In my domain it is common to express series
frequencies as samples-per-second. So ts(..., frequency=10) would mean a
signal sampled 10 times every second, and ts(..., frequency = 1) a signal
sampled every second. Following this logic, a few slower signals are
sampled every 5 seconds (or more), resulting in a frequency of e.g. 0.2
Nowhere in the documentation is stated that the frequency must be an
integer value, but using fractional values gives inconsistent results.
For instance, in this example, foo and bar are identical, just with
start-end values shifted by 1. Yet when extracting an arbitrary window, the
'bar' series gives error.

x = 1:22
foo = ts(x, start = 1.5, end = 106.5, frequency = 0.2)
bar = ts(x, start = 2.5, end = 107.5, frequency = 0.2)

window(foo, start = 20, end = 30, extend=TRUE)

# Time Series:# Start = 20 # End = 25 # Frequency = 0.2 # [1] 5 6

window(bar, start = 20, end = 30, extend=TRUE)

# Error in attr(y, "tsp") <- c(ystart, yend, xfreq) : #   invalid time
series parameters specified

The reason is in the rounding procedures for ystart and yend at the end of
the stats::window function. For the 'foo' series the ystart and yend values
are calculated as: c(20, 25), whereas for the 'bar' series, they
become c(20, 30) although the window should be of the very same size in
both cases. (A further discussion on the example is at:
https://stackoverflow.com/questions/57928054 )
Should I report a bug or am I misunderstanding something?

-- 
Johann R. Kleinbub, PhD
University of Padova
FISPPA Dep. - Section of Applied Psychology
Cell: +39 3495986373

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Tue Sep 17 08:52:16 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Tue, 17 Sep 2019 06:52:16 +0000
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
Message-ID: <f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>

Hi,

Alternatively, how about a new glance() generic that would do something 
like this:

 > library(DelayedArray)
 > glance <- DelayedArray:::show_compact_array

 > M <- matrix(rnorm(1e6), nrow = 1000L, ncol = 2000L)
 > glance(M)
<1000 x 2000> matrix object of type "double":
                [,1]        [,2]        [,3] ...    [,1999]    [,2000]
    [1,]  -0.8854896   1.8010288   1.3051341   . -0.4473593  0.4684985
    [2,]  -0.8563415  -0.7102768  -0.9309155   . -1.8743504  0.4300557
    [3,]   1.0558159  -0.5956583   1.2689806   .  2.7292249  0.2608300
    [4,]   0.7547356   0.1465714   0.1798959   . -0.1778017  1.3417423
    [5,]   0.8037360  -2.7081809   0.9766657   . -0.9902788  0.1741957
     ...           .           .           .   .          .          .
  [996,]  0.67220752  0.07804320 -0.38743454   .  0.4438639 -0.8130713
  [997,] -0.67349962 -1.15292067 -0.54505567   .  0.4630923 -1.6287694
  [998,]  0.03374595 -1.68061325 -0.88458368   . -0.2890962  0.2552267
  [999,]  0.47861492  1.25530912  0.19436708   . -0.5193121 -1.1695501
[1000,]  1.52819218  2.23253275 -1.22051720   . -1.0342430 -0.1703396

 > A <- array(rnorm(1e6), c(50, 20, 10, 100))
 > glance(A)
<50 x 20 x 10 x 100> array object of type "double":
,,1,1
             [,1]       [,2]       [,3] ...      [,19]      [,20]
  [1,] 0.78319619 0.82258390 0.09122269   .  1.7288189  0.7968574
  [2,] 2.80687459 0.63709640 0.80844430   . -0.3963161 -1.2768284
   ...          .          .          .   .          .          .
[49,] -1.0696320 -0.1698111  2.0082890   .  0.4488292  0.5215745
[50,] -0.7012526 -2.0818229  0.7750518   .  0.3189076  0.1437394

...

,,10,100
             [,1]       [,2]       [,3] ...      [,19]      [,20]
  [1,]  0.5360649  0.5491561 -0.4098350   .  0.7647435  0.5640699
  [2,]  0.7924093 -0.7395815 -1.3792913   .  0.1980287 -0.2897026
   ...          .          .          .   .          .          .
[49,]  0.6266209  0.3778512  1.4995778   . -0.3820651 -1.4241691
[50,]  1.9218715  3.5475949  0.5963763   .  0.4005210  0.4385623

H.


On 9/16/19 00:54, Michael Chirico wrote:
> Awesome. Gabe, since you already have a workshopped version, would you like
> to proceed? Feel free to ping me to review the patch once it's posted.
> 
> On Mon, Sep 16, 2019 at 3:26 PM Martin Maechler <maechler at stat.math.ethz.ch>
> wrote:
> 
>>>>>>> Michael Chirico
>>>>>>>      on Sun, 15 Sep 2019 20:52:34 +0800 writes:
>>
>>      > Finally read in detail your response Gabe. Looks great,
>>      > and I agree it's quite intuitive, as well as agree against
>>      > non-recycling.
>>
>>      > Once the length(n) == length(dim(x)) behavior is enabled,
>>      > I don't think there's any need/desire to have head() do
>>      > x[1:6,1:6] anymore. head(x, c(6, 6)) is quite clear for
>>      > those familiar with head(x, 6), it would seem to me.
>>
>>      > Mike C
>>
>> Thank you, Gabe, and Michael.
>> I did like Gabe's proposal already back in July but was
>> busy and/or vacationing then ...
>>
>> If you submit this with a patch (that includes changes to both
>> *.R and *.Rd , including some example) as "wishlist" item to R's
>> bugzilla, I'm willing/happy to check and commit this to R-devel.
>>
>> Martin
>>
>>
>>      > On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker
>>      > <gabembecker at gmail.com> wrote:
>>
>>      >> Hi Michael and Abby,
>>      >>
>>      >> So one thing that could happen that would be backwards
>>      >> compatible (with the exception of something that was an
>>      >> error no longer being an error) is head and tail could
>>      >> take vectors of length (dim(x)) rather than integers of
>>      >> length for n, with the default being n=6 being equivalent
>>      >> to n = c(6, dim(x)[2], <...>, dim(x)[k]), at least for
>>      >> the deprecation cycle, if not permanently. It not
>>      >> recycling would be unexpected based on the behavior of
>>      >> many R functions but would preserve the current behavior
>>      >> while granting more fine-grained control to users that
>>      >> feel they need it.
>>      >>
>>      >> A rapidly thrown-together prototype of such a method for
>>      >> the head of a matrix case is as follows:
>>      >>
>>      >> head2 = function(x, n = 6L, ...) { indvecs =
>>      >> lapply(seq_along(dim(x)), function(i) { if(length(n) >=
>>      >> i) { ni = n[i] } else { ni = dim(x)[i] } if(ni < 0L) ni =
>>      >> max(nrow(x) + ni, 0L) else ni = min(ni, dim(x)[i])
>>      >> seq_len(ni) }) lstargs = c(list(x),indvecs, drop = FALSE)
>>      >> do.call("[", lstargs) }
>>      >>
>>      >>
>>      >> > mat = matrix(1:100, 10, 10)
>>      >>
>>      >> > *head(mat)*
>>      >>
>>      >> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>>      >>
>>      >> [1,] 1 11 21 31 41 51 61 71 81 91
>>      >>
>>      >> [2,] 2 12 22 32 42 52 62 72 82 92
>>      >>
>>      >> [3,] 3 13 23 33 43 53 63 73 83 93
>>      >>
>>      >> [4,] 4 14 24 34 44 54 64 74 84 94
>>      >>
>>      >> [5,] 5 15 25 35 45 55 65 75 85 95
>>      >>
>>      >> [6,] 6 16 26 36 46 56 66 76 86 96
>>      >>
>>      >> > *head2(mat)*
>>      >>
>>      >> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>>      >>
>>      >> [1,] 1 11 21 31 41 51 61 71 81 91
>>      >>
>>      >> [2,] 2 12 22 32 42 52 62 72 82 92
>>      >>
>>      >> [3,] 3 13 23 33 43 53 63 73 83 93
>>      >>
>>      >> [4,] 4 14 24 34 44 54 64 74 84 94
>>      >>
>>      >> [5,] 5 15 25 35 45 55 65 75 85 95
>>      >>
>>      >> [6,] 6 16 26 36 46 56 66 76 86 96
>>      >>
>>      >> > *head2(mat, c(2, 3))*
>>      >>
>>      >> [,1] [,2] [,3]
>>      >>
>>      >> [1,] 1 11 21
>>      >>
>>      >> [2,] 2 12 22
>>      >>
>>      >> > *head2(mat, c(2, -9))*
>>      >>
>>      >> [,1]
>>      >>
>>      >> [1,] 1
>>      >>
>>      >> [2,] 2
>>      >>
>>      >>
>>      >> Now one thing to keep in mind here, is that I think we'd
>>      >> either a) have to make the non-recycling behavior
>>      >> permanent, or b) have head treat data.frames and matrices
>>      >> different with respect to the subsets they grab (which
>>      >> strikes me as a *Bad Plan *(tm)).
>>      >>
>>      >> So I don't think the default behavior would ever be
>>      >> mat[1:6, 1:6], not because of backwards compatibility,
>>      >> but because at least in my intuition that is just not
>>      >> what head on a data.frame should do by default, and I
>>      >> think the behaviors for the basic rectangular datatypes
>>      >> should "stick together". I mean, also because of
>>      >> backwards compatibility, but that could *in theory*
>>      >> change across a long enough deprecation cycle, but the
>>      >> conceptually right thing to do with a data.frame probably
>>      >> won't.
>>      >>
>>      >> All of that said, is head(mat, c(6, 6)) really that much
>>      >> easier to type/better than just mat[1:6, 1:6, drop=FALSE]
>>      >> (I know this will behave differently if any of the dims
>>      >> of mat are less than 6, but if so why are you heading it
>>      >> in the first place ;) )? I don't really have a strong
>>      >> feeling on the answer to that.
>>      >>
>>      >> I'm happy to put a patch for head.matrix,
>>      >> head.data.frame, tail.matrix and tail.data.frame, plus
>>      >> documentation, if people on R-core are interested in
>>      >> this.
>>      >>
>>      >> Note, as most here probably know, and as alluded to
>>      >> above, length(n) > 1 for head or tail currently give an
>>      >> error, so this would be an extension of the existing
>>      >> functionality in the mathematical extension sense, where
>>      >> all existing behavior would remain identical, but the
>>      >> support/valid parameter space would grow.
>>      >>
>>      >> Best, ~G
>>      >>
>>      >>
>>      >> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle
>>      >> <spurdle.a at gmail.com> wrote:
>>      >>
>>      >>> > I assume there are lots of backwards-compatibility
>>      >>> issues as well as valid > use cases for this behavior,
>>      >>> so I guess defaulting to M[1:6, 1:6] is out of > the
>>      >>> question.
>>      >>>
>>      >>> Agree.
>>      >>>
>>      >>> > Is there any scope for adding a new argument to
>>      >>> head.matrix that would > allow this flexibility?
>>      >>>
>>      >>> I agree with what you're trying to achieve.  However,
>>      >>> I'm not sure this is as simple as you're suggesting.
>>      >>>
>>      >>> What if the user wants "head" in rows but "tail" in
>>      >>> columns.  Or "head" in rows, and both "head" and "tail"
>>      >>> in columns.  With head and tail alone, there's a
>>      >>> combinatorial explosion.
>>      >>>
>>      >>> Also, when using tail on an unnamed matrix, it may be
>>      >>> desirable to name rows and columns.
>>      >>>
>>      >>> And all of this assumes standard matrix objects.  Add in
>>      >>> a matrix subclasses and related objects, and things get
>>      >>> more complex still.
>>      >>>
>>      >>> As I suggested in a another thread, a few days ago, I'm
>>      >>> planning to write an R package for matrices and
>>      >>> matrix-like objects (possibly extending the Matrix
>>      >>> package), with an initial emphasis on subsetting,
>>      >>> printing and formatting.  So, I'm interested to hear
>>      >>> more suggestions on this topic.
>>      >>>
>>      >>> [[alternative HTML version deleted]]
>>      >>>
>>      >>> ______________________________________________
>>      >>> R-devel at r-project.org mailing list
>>      >>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>      >>>
>>      >>
>>
>>      >   [[alternative HTML version deleted]]
>>
>>      > ______________________________________________
>>      > R-devel at r-project.org mailing list
>>      > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From j|ox @end|ng |rom mcm@@ter@c@  Tue Sep 17 14:29:17 2019
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Tue, 17 Sep 2019 12:29:17 +0000
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
Message-ID: <674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>

Dear Herve,

The brief() generic function in the car package does something very similar to that for data frames (and has methods for other classes of objects as well).

Best,
 John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Sep 17, 2019, at 2:52 AM, Pages, Herve <hpages at fredhutch.org> wrote:
> 
> Hi,
> 
> Alternatively, how about a new glance() generic that would do something 
> like this:
> 
>> library(DelayedArray)
>> glance <- DelayedArray:::show_compact_array
> 
>> M <- matrix(rnorm(1e6), nrow = 1000L, ncol = 2000L)
>> glance(M)
> <1000 x 2000> matrix object of type "double":
>                [,1]        [,2]        [,3] ...    [,1999]    [,2000]
>    [1,]  -0.8854896   1.8010288   1.3051341   . -0.4473593  0.4684985
>    [2,]  -0.8563415  -0.7102768  -0.9309155   . -1.8743504  0.4300557
>    [3,]   1.0558159  -0.5956583   1.2689806   .  2.7292249  0.2608300
>    [4,]   0.7547356   0.1465714   0.1798959   . -0.1778017  1.3417423
>    [5,]   0.8037360  -2.7081809   0.9766657   . -0.9902788  0.1741957
>     ...           .           .           .   .          .          .
>  [996,]  0.67220752  0.07804320 -0.38743454   .  0.4438639 -0.8130713
>  [997,] -0.67349962 -1.15292067 -0.54505567   .  0.4630923 -1.6287694
>  [998,]  0.03374595 -1.68061325 -0.88458368   . -0.2890962  0.2552267
>  [999,]  0.47861492  1.25530912  0.19436708   . -0.5193121 -1.1695501
> [1000,]  1.52819218  2.23253275 -1.22051720   . -1.0342430 -0.1703396
> 
>> A <- array(rnorm(1e6), c(50, 20, 10, 100))
>> glance(A)
> <50 x 20 x 10 x 100> array object of type "double":
> ,,1,1
>             [,1]       [,2]       [,3] ...      [,19]      [,20]
>  [1,] 0.78319619 0.82258390 0.09122269   .  1.7288189  0.7968574
>  [2,] 2.80687459 0.63709640 0.80844430   . -0.3963161 -1.2768284
>   ...          .          .          .   .          .          .
> [49,] -1.0696320 -0.1698111  2.0082890   .  0.4488292  0.5215745
> [50,] -0.7012526 -2.0818229  0.7750518   .  0.3189076  0.1437394
> 
> ...
> 
> ,,10,100
>             [,1]       [,2]       [,3] ...      [,19]      [,20]
>  [1,]  0.5360649  0.5491561 -0.4098350   .  0.7647435  0.5640699
>  [2,]  0.7924093 -0.7395815 -1.3792913   .  0.1980287 -0.2897026
>   ...          .          .          .   .          .          .
> [49,]  0.6266209  0.3778512  1.4995778   . -0.3820651 -1.4241691
> [50,]  1.9218715  3.5475949  0.5963763   .  0.4005210  0.4385623
> 
> H.
> 
> 
> On 9/16/19 00:54, Michael Chirico wrote:
>> Awesome. Gabe, since you already have a workshopped version, would you like
>> to proceed? Feel free to ping me to review the patch once it's posted.
>> 
>> On Mon, Sep 16, 2019 at 3:26 PM Martin Maechler <maechler at stat.math.ethz.ch>
>> wrote:
>> 
>>>>>>>> Michael Chirico
>>>>>>>>     on Sun, 15 Sep 2019 20:52:34 +0800 writes:
>>> 
>>>> Finally read in detail your response Gabe. Looks great,
>>>> and I agree it's quite intuitive, as well as agree against
>>>> non-recycling.
>>> 
>>>> Once the length(n) == length(dim(x)) behavior is enabled,
>>>> I don't think there's any need/desire to have head() do
>>>> x[1:6,1:6] anymore. head(x, c(6, 6)) is quite clear for
>>>> those familiar with head(x, 6), it would seem to me.
>>> 
>>>> Mike C
>>> 
>>> Thank you, Gabe, and Michael.
>>> I did like Gabe's proposal already back in July but was
>>> busy and/or vacationing then ...
>>> 
>>> If you submit this with a patch (that includes changes to both
>>> *.R and *.Rd , including some example) as "wishlist" item to R's
>>> bugzilla, I'm willing/happy to check and commit this to R-devel.
>>> 
>>> Martin
>>> 
>>> 
>>>> On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker
>>>> <gabembecker at gmail.com> wrote:
>>> 
>>>>> Hi Michael and Abby,
>>>>> 
>>>>> So one thing that could happen that would be backwards
>>>>> compatible (with the exception of something that was an
>>>>> error no longer being an error) is head and tail could
>>>>> take vectors of length (dim(x)) rather than integers of
>>>>> length for n, with the default being n=6 being equivalent
>>>>> to n = c(6, dim(x)[2], <...>, dim(x)[k]), at least for
>>>>> the deprecation cycle, if not permanently. It not
>>>>> recycling would be unexpected based on the behavior of
>>>>> many R functions but would preserve the current behavior
>>>>> while granting more fine-grained control to users that
>>>>> feel they need it.
>>>>> 
>>>>> A rapidly thrown-together prototype of such a method for
>>>>> the head of a matrix case is as follows:
>>>>> 
>>>>> head2 = function(x, n = 6L, ...) { indvecs =
>>>>> lapply(seq_along(dim(x)), function(i) { if(length(n) >=
>>>>> i) { ni = n[i] } else { ni = dim(x)[i] } if(ni < 0L) ni =
>>>>> max(nrow(x) + ni, 0L) else ni = min(ni, dim(x)[i])
>>>>> seq_len(ni) }) lstargs = c(list(x),indvecs, drop = FALSE)
>>>>> do.call("[", lstargs) }
>>>>> 
>>>>> 
>>>>>> mat = matrix(1:100, 10, 10)
>>>>> 
>>>>>> *head(mat)*
>>>>> 
>>>>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>>>>> 
>>>>> [1,] 1 11 21 31 41 51 61 71 81 91
>>>>> 
>>>>> [2,] 2 12 22 32 42 52 62 72 82 92
>>>>> 
>>>>> [3,] 3 13 23 33 43 53 63 73 83 93
>>>>> 
>>>>> [4,] 4 14 24 34 44 54 64 74 84 94
>>>>> 
>>>>> [5,] 5 15 25 35 45 55 65 75 85 95
>>>>> 
>>>>> [6,] 6 16 26 36 46 56 66 76 86 96
>>>>> 
>>>>>> *head2(mat)*
>>>>> 
>>>>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>>>>> 
>>>>> [1,] 1 11 21 31 41 51 61 71 81 91
>>>>> 
>>>>> [2,] 2 12 22 32 42 52 62 72 82 92
>>>>> 
>>>>> [3,] 3 13 23 33 43 53 63 73 83 93
>>>>> 
>>>>> [4,] 4 14 24 34 44 54 64 74 84 94
>>>>> 
>>>>> [5,] 5 15 25 35 45 55 65 75 85 95
>>>>> 
>>>>> [6,] 6 16 26 36 46 56 66 76 86 96
>>>>> 
>>>>>> *head2(mat, c(2, 3))*
>>>>> 
>>>>> [,1] [,2] [,3]
>>>>> 
>>>>> [1,] 1 11 21
>>>>> 
>>>>> [2,] 2 12 22
>>>>> 
>>>>>> *head2(mat, c(2, -9))*
>>>>> 
>>>>> [,1]
>>>>> 
>>>>> [1,] 1
>>>>> 
>>>>> [2,] 2
>>>>> 
>>>>> 
>>>>> Now one thing to keep in mind here, is that I think we'd
>>>>> either a) have to make the non-recycling behavior
>>>>> permanent, or b) have head treat data.frames and matrices
>>>>> different with respect to the subsets they grab (which
>>>>> strikes me as a *Bad Plan *(tm)).
>>>>> 
>>>>> So I don't think the default behavior would ever be
>>>>> mat[1:6, 1:6], not because of backwards compatibility,
>>>>> but because at least in my intuition that is just not
>>>>> what head on a data.frame should do by default, and I
>>>>> think the behaviors for the basic rectangular datatypes
>>>>> should "stick together". I mean, also because of
>>>>> backwards compatibility, but that could *in theory*
>>>>> change across a long enough deprecation cycle, but the
>>>>> conceptually right thing to do with a data.frame probably
>>>>> won't.
>>>>> 
>>>>> All of that said, is head(mat, c(6, 6)) really that much
>>>>> easier to type/better than just mat[1:6, 1:6, drop=FALSE]
>>>>> (I know this will behave differently if any of the dims
>>>>> of mat are less than 6, but if so why are you heading it
>>>>> in the first place ;) )? I don't really have a strong
>>>>> feeling on the answer to that.
>>>>> 
>>>>> I'm happy to put a patch for head.matrix,
>>>>> head.data.frame, tail.matrix and tail.data.frame, plus
>>>>> documentation, if people on R-core are interested in
>>>>> this.
>>>>> 
>>>>> Note, as most here probably know, and as alluded to
>>>>> above, length(n) > 1 for head or tail currently give an
>>>>> error, so this would be an extension of the existing
>>>>> functionality in the mathematical extension sense, where
>>>>> all existing behavior would remain identical, but the
>>>>> support/valid parameter space would grow.
>>>>> 
>>>>> Best, ~G
>>>>> 
>>>>> 
>>>>> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle
>>>>> <spurdle.a at gmail.com> wrote:
>>>>> 
>>>>>>> I assume there are lots of backwards-compatibility
>>>>>> issues as well as valid > use cases for this behavior,
>>>>>> so I guess defaulting to M[1:6, 1:6] is out of > the
>>>>>> question.
>>>>>> 
>>>>>> Agree.
>>>>>> 
>>>>>>> Is there any scope for adding a new argument to
>>>>>> head.matrix that would > allow this flexibility?
>>>>>> 
>>>>>> I agree with what you're trying to achieve.  However,
>>>>>> I'm not sure this is as simple as you're suggesting.
>>>>>> 
>>>>>> What if the user wants "head" in rows but "tail" in
>>>>>> columns.  Or "head" in rows, and both "head" and "tail"
>>>>>> in columns.  With head and tail alone, there's a
>>>>>> combinatorial explosion.
>>>>>> 
>>>>>> Also, when using tail on an unnamed matrix, it may be
>>>>>> desirable to name rows and columns.
>>>>>> 
>>>>>> And all of this assumes standard matrix objects.  Add in
>>>>>> a matrix subclasses and related objects, and things get
>>>>>> more complex still.
>>>>>> 
>>>>>> As I suggested in a another thread, a few days ago, I'm
>>>>>> planning to write an R package for matrices and
>>>>>> matrix-like objects (possibly extending the Matrix
>>>>>> package), with an initial emphasis on subsetting,
>>>>>> printing and formatting.  So, I'm interested to hear
>>>>>> more suggestions on this topic.
>>>>>> 
>>>>>> [[alternative HTML version deleted]]
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>>>>> 
>>>>> 
>>> 
>>>>  [[alternative HTML version deleted]]
>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>> 
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>> 
> 
> -- 
> Herv? Pag?s
> 
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
> 
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j|ox @end|ng |rom mcm@@ter@c@  Tue Sep 17 14:32:13 2019
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Tue, 17 Sep 2019 12:32:13 +0000
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
Message-ID: <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>

Dear Herve,

Sorry, I should have said "matrices" rather than "data frames" -- brief() has methods for both.

Best,
 John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Sep 17, 2019, at 8:29 AM, Fox, John <jfox at mcmaster.ca> wrote:
> 
> Dear Herve,
> 
> The brief() generic function in the car package does something very similar to that for data frames (and has methods for other classes of objects as well).
> 
> Best,
> John
> 
>  -----------------------------
>  John Fox, Professor Emeritus
>  McMaster University
>  Hamilton, Ontario, Canada
>  Web: http::/socserv.mcmaster.ca/jfox
> 
>> On Sep 17, 2019, at 2:52 AM, Pages, Herve <hpages at fredhutch.org> wrote:
>> 
>> Hi,
>> 
>> Alternatively, how about a new glance() generic that would do something 
>> like this:
>> 
>>> library(DelayedArray)
>>> glance <- DelayedArray:::show_compact_array
>> 
>>> M <- matrix(rnorm(1e6), nrow = 1000L, ncol = 2000L)
>>> glance(M)
>> <1000 x 2000> matrix object of type "double":
>>               [,1]        [,2]        [,3] ...    [,1999]    [,2000]
>>   [1,]  -0.8854896   1.8010288   1.3051341   . -0.4473593  0.4684985
>>   [2,]  -0.8563415  -0.7102768  -0.9309155   . -1.8743504  0.4300557
>>   [3,]   1.0558159  -0.5956583   1.2689806   .  2.7292249  0.2608300
>>   [4,]   0.7547356   0.1465714   0.1798959   . -0.1778017  1.3417423
>>   [5,]   0.8037360  -2.7081809   0.9766657   . -0.9902788  0.1741957
>>    ...           .           .           .   .          .          .
>> [996,]  0.67220752  0.07804320 -0.38743454   .  0.4438639 -0.8130713
>> [997,] -0.67349962 -1.15292067 -0.54505567   .  0.4630923 -1.6287694
>> [998,]  0.03374595 -1.68061325 -0.88458368   . -0.2890962  0.2552267
>> [999,]  0.47861492  1.25530912  0.19436708   . -0.5193121 -1.1695501
>> [1000,]  1.52819218  2.23253275 -1.22051720   . -1.0342430 -0.1703396
>> 
>>> A <- array(rnorm(1e6), c(50, 20, 10, 100))
>>> glance(A)
>> <50 x 20 x 10 x 100> array object of type "double":
>> ,,1,1
>>            [,1]       [,2]       [,3] ...      [,19]      [,20]
>> [1,] 0.78319619 0.82258390 0.09122269   .  1.7288189  0.7968574
>> [2,] 2.80687459 0.63709640 0.80844430   . -0.3963161 -1.2768284
>>  ...          .          .          .   .          .          .
>> [49,] -1.0696320 -0.1698111  2.0082890   .  0.4488292  0.5215745
>> [50,] -0.7012526 -2.0818229  0.7750518   .  0.3189076  0.1437394
>> 
>> ...
>> 
>> ,,10,100
>>            [,1]       [,2]       [,3] ...      [,19]      [,20]
>> [1,]  0.5360649  0.5491561 -0.4098350   .  0.7647435  0.5640699
>> [2,]  0.7924093 -0.7395815 -1.3792913   .  0.1980287 -0.2897026
>>  ...          .          .          .   .          .          .
>> [49,]  0.6266209  0.3778512  1.4995778   . -0.3820651 -1.4241691
>> [50,]  1.9218715  3.5475949  0.5963763   .  0.4005210  0.4385623
>> 
>> H.
>> 
>> 
>> On 9/16/19 00:54, Michael Chirico wrote:
>>> Awesome. Gabe, since you already have a workshopped version, would you like
>>> to proceed? Feel free to ping me to review the patch once it's posted.
>>> 
>>> On Mon, Sep 16, 2019 at 3:26 PM Martin Maechler <maechler at stat.math.ethz.ch>
>>> wrote:
>>> 
>>>>>>>>> Michael Chirico
>>>>>>>>>    on Sun, 15 Sep 2019 20:52:34 +0800 writes:
>>>> 
>>>>> Finally read in detail your response Gabe. Looks great,
>>>>> and I agree it's quite intuitive, as well as agree against
>>>>> non-recycling.
>>>> 
>>>>> Once the length(n) == length(dim(x)) behavior is enabled,
>>>>> I don't think there's any need/desire to have head() do
>>>>> x[1:6,1:6] anymore. head(x, c(6, 6)) is quite clear for
>>>>> those familiar with head(x, 6), it would seem to me.
>>>> 
>>>>> Mike C
>>>> 
>>>> Thank you, Gabe, and Michael.
>>>> I did like Gabe's proposal already back in July but was
>>>> busy and/or vacationing then ...
>>>> 
>>>> If you submit this with a patch (that includes changes to both
>>>> *.R and *.Rd , including some example) as "wishlist" item to R's
>>>> bugzilla, I'm willing/happy to check and commit this to R-devel.
>>>> 
>>>> Martin
>>>> 
>>>> 
>>>>> On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker
>>>>> <gabembecker at gmail.com> wrote:
>>>> 
>>>>>> Hi Michael and Abby,
>>>>>> 
>>>>>> So one thing that could happen that would be backwards
>>>>>> compatible (with the exception of something that was an
>>>>>> error no longer being an error) is head and tail could
>>>>>> take vectors of length (dim(x)) rather than integers of
>>>>>> length for n, with the default being n=6 being equivalent
>>>>>> to n = c(6, dim(x)[2], <...>, dim(x)[k]), at least for
>>>>>> the deprecation cycle, if not permanently. It not
>>>>>> recycling would be unexpected based on the behavior of
>>>>>> many R functions but would preserve the current behavior
>>>>>> while granting more fine-grained control to users that
>>>>>> feel they need it.
>>>>>> 
>>>>>> A rapidly thrown-together prototype of such a method for
>>>>>> the head of a matrix case is as follows:
>>>>>> 
>>>>>> head2 = function(x, n = 6L, ...) { indvecs =
>>>>>> lapply(seq_along(dim(x)), function(i) { if(length(n) >=
>>>>>> i) { ni = n[i] } else { ni = dim(x)[i] } if(ni < 0L) ni =
>>>>>> max(nrow(x) + ni, 0L) else ni = min(ni, dim(x)[i])
>>>>>> seq_len(ni) }) lstargs = c(list(x),indvecs, drop = FALSE)
>>>>>> do.call("[", lstargs) }
>>>>>> 
>>>>>> 
>>>>>>> mat = matrix(1:100, 10, 10)
>>>>>> 
>>>>>>> *head(mat)*
>>>>>> 
>>>>>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>>>>>> 
>>>>>> [1,] 1 11 21 31 41 51 61 71 81 91
>>>>>> 
>>>>>> [2,] 2 12 22 32 42 52 62 72 82 92
>>>>>> 
>>>>>> [3,] 3 13 23 33 43 53 63 73 83 93
>>>>>> 
>>>>>> [4,] 4 14 24 34 44 54 64 74 84 94
>>>>>> 
>>>>>> [5,] 5 15 25 35 45 55 65 75 85 95
>>>>>> 
>>>>>> [6,] 6 16 26 36 46 56 66 76 86 96
>>>>>> 
>>>>>>> *head2(mat)*
>>>>>> 
>>>>>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
>>>>>> 
>>>>>> [1,] 1 11 21 31 41 51 61 71 81 91
>>>>>> 
>>>>>> [2,] 2 12 22 32 42 52 62 72 82 92
>>>>>> 
>>>>>> [3,] 3 13 23 33 43 53 63 73 83 93
>>>>>> 
>>>>>> [4,] 4 14 24 34 44 54 64 74 84 94
>>>>>> 
>>>>>> [5,] 5 15 25 35 45 55 65 75 85 95
>>>>>> 
>>>>>> [6,] 6 16 26 36 46 56 66 76 86 96
>>>>>> 
>>>>>>> *head2(mat, c(2, 3))*
>>>>>> 
>>>>>> [,1] [,2] [,3]
>>>>>> 
>>>>>> [1,] 1 11 21
>>>>>> 
>>>>>> [2,] 2 12 22
>>>>>> 
>>>>>>> *head2(mat, c(2, -9))*
>>>>>> 
>>>>>> [,1]
>>>>>> 
>>>>>> [1,] 1
>>>>>> 
>>>>>> [2,] 2
>>>>>> 
>>>>>> 
>>>>>> Now one thing to keep in mind here, is that I think we'd
>>>>>> either a) have to make the non-recycling behavior
>>>>>> permanent, or b) have head treat data.frames and matrices
>>>>>> different with respect to the subsets they grab (which
>>>>>> strikes me as a *Bad Plan *(tm)).
>>>>>> 
>>>>>> So I don't think the default behavior would ever be
>>>>>> mat[1:6, 1:6], not because of backwards compatibility,
>>>>>> but because at least in my intuition that is just not
>>>>>> what head on a data.frame should do by default, and I
>>>>>> think the behaviors for the basic rectangular datatypes
>>>>>> should "stick together". I mean, also because of
>>>>>> backwards compatibility, but that could *in theory*
>>>>>> change across a long enough deprecation cycle, but the
>>>>>> conceptually right thing to do with a data.frame probably
>>>>>> won't.
>>>>>> 
>>>>>> All of that said, is head(mat, c(6, 6)) really that much
>>>>>> easier to type/better than just mat[1:6, 1:6, drop=FALSE]
>>>>>> (I know this will behave differently if any of the dims
>>>>>> of mat are less than 6, but if so why are you heading it
>>>>>> in the first place ;) )? I don't really have a strong
>>>>>> feeling on the answer to that.
>>>>>> 
>>>>>> I'm happy to put a patch for head.matrix,
>>>>>> head.data.frame, tail.matrix and tail.data.frame, plus
>>>>>> documentation, if people on R-core are interested in
>>>>>> this.
>>>>>> 
>>>>>> Note, as most here probably know, and as alluded to
>>>>>> above, length(n) > 1 for head or tail currently give an
>>>>>> error, so this would be an extension of the existing
>>>>>> functionality in the mathematical extension sense, where
>>>>>> all existing behavior would remain identical, but the
>>>>>> support/valid parameter space would grow.
>>>>>> 
>>>>>> Best, ~G
>>>>>> 
>>>>>> 
>>>>>> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle
>>>>>> <spurdle.a at gmail.com> wrote:
>>>>>> 
>>>>>>>> I assume there are lots of backwards-compatibility
>>>>>>> issues as well as valid > use cases for this behavior,
>>>>>>> so I guess defaulting to M[1:6, 1:6] is out of > the
>>>>>>> question.
>>>>>>> 
>>>>>>> Agree.
>>>>>>> 
>>>>>>>> Is there any scope for adding a new argument to
>>>>>>> head.matrix that would > allow this flexibility?
>>>>>>> 
>>>>>>> I agree with what you're trying to achieve.  However,
>>>>>>> I'm not sure this is as simple as you're suggesting.
>>>>>>> 
>>>>>>> What if the user wants "head" in rows but "tail" in
>>>>>>> columns.  Or "head" in rows, and both "head" and "tail"
>>>>>>> in columns.  With head and tail alone, there's a
>>>>>>> combinatorial explosion.
>>>>>>> 
>>>>>>> Also, when using tail on an unnamed matrix, it may be
>>>>>>> desirable to name rows and columns.
>>>>>>> 
>>>>>>> And all of this assumes standard matrix objects.  Add in
>>>>>>> a matrix subclasses and related objects, and things get
>>>>>>> more complex still.
>>>>>>> 
>>>>>>> As I suggested in a another thread, a few days ago, I'm
>>>>>>> planning to write an R package for matrices and
>>>>>>> matrix-like objects (possibly extending the Matrix
>>>>>>> package), with an initial emphasis on subsetting,
>>>>>>> printing and formatting.  So, I'm interested to hear
>>>>>>> more suggestions on this topic.
>>>>>>> 
>>>>>>> [[alternative HTML version deleted]]
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>>>>>> 
>>>>>> 
>>>> 
>>>>> [[alternative HTML version deleted]]
>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>>> 
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
>>> 
>> 
>> -- 
>> Herv? Pag?s
>> 
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>> 
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Sep 17 18:17:03 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 17 Sep 2019 18:17:03 +0200
Subject: [Rd] 
 head.matrix can return 1000s of columns -- limit to n or add
 new argument?
In-Reply-To: <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <CAB8pepxS2mRtd+522OwjixnM6ZjYxb+X0dc4vMGn6QxdFYBmVQ@mail.gmail.com>
 <CAD4oTHH=LpeEj6h6xYdOGsreS-GDCGdgJV5wpaUR3Pjuh5_M1w@mail.gmail.com>
 <CAPRVBczYZHO3JaFVfNeNNV0-YMRvX3CUYhUvLCjophDEoP+XgQ@mail.gmail.com>
 <23935.14449.965488.684663@stat.math.ethz.ch>
 <CAPRVBcwMY=GAVfFeCwowQsxP31Y=_B2ducosThN+8V91WESB8Q@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
Message-ID: <23937.1791.389379.103733@stat.math.ethz.ch>

>>>>> Fox, John 
>>>>>     on Tue, 17 Sep 2019 12:32:13 +0000 writes:

    > Dear Herve,
    > Sorry, I should have said "matrices" rather than "data frames" -- brief() has methods for both.

    > Best,
    > John

    > -----------------------------
    > John Fox, Professor Emeritus
    > McMaster University
    > Hamilton, Ontario, Canada
    > Web: http::/socserv.mcmaster.ca/jfox

    >> On Sep 17, 2019, at 8:29 AM, Fox, John <jfox at mcmaster.ca> wrote:
    >> 
    >> Dear Herve,
    >> 
    >> The brief() generic function in the car package does something very similar to that for data frames (and has methods for other classes of objects as well).
    >> 
    >> Best,
    >> John
    >> 
    >> -----------------------------
    >> John Fox, Professor Emeritus
    >> McMaster University
    >> Hamilton, Ontario, Canada
    >> Web: http::/socserv.mcmaster.ca/jfox
    >> 
    >>> On Sep 17, 2019, at 2:52 AM, Pages, Herve <hpages at fredhutch.org> wrote:
    >>> 
    >>> Hi,
    >>> 
    >>> Alternatively, how about a new glance() generic that would do something 
    >>> like this:
    >>> 
    >>>> library(DelayedArray)
    >>>> glance <- DelayedArray:::show_compact_array
    >>> 
    >>>> M <- matrix(rnorm(1e6), nrow = 1000L, ncol = 2000L)
    >>>> glance(M)
    >>> <1000 x 2000> matrix object of type "double":
    >>> [,1]        [,2]        [,3] ...    [,1999]    [,2000]
    >>> [1,]  -0.8854896   1.8010288   1.3051341   . -0.4473593  0.4684985
    >>> [2,]  -0.8563415  -0.7102768  -0.9309155   . -1.8743504  0.4300557
    >>> [3,]   1.0558159  -0.5956583   1.2689806   .  2.7292249  0.2608300
    >>> [4,]   0.7547356   0.1465714   0.1798959   . -0.1778017  1.3417423
    >>> [5,]   0.8037360  -2.7081809   0.9766657   . -0.9902788  0.1741957
    >>> ...           .           .           .   .          .          .
    >>> [996,]  0.67220752  0.07804320 -0.38743454   .  0.4438639 -0.8130713
    >>> [997,] -0.67349962 -1.15292067 -0.54505567   .  0.4630923 -1.6287694
    >>> [998,]  0.03374595 -1.68061325 -0.88458368   . -0.2890962  0.2552267
    >>> [999,]  0.47861492  1.25530912  0.19436708   . -0.5193121 -1.1695501
    >>> [1000,]  1.52819218  2.23253275 -1.22051720   . -1.0342430 -0.1703396
    >>> 
    >>>> A <- array(rnorm(1e6), c(50, 20, 10, 100))
    >>>> glance(A)
    >>> <50 x 20 x 10 x 100> array object of type "double":
    >>> ,,1,1
    >>> [,1]       [,2]       [,3] ...      [,19]      [,20]
    >>> [1,] 0.78319619 0.82258390 0.09122269   .  1.7288189  0.7968574
    >>> [2,] 2.80687459 0.63709640 0.80844430   . -0.3963161 -1.2768284
    >>> ...          .          .          .   .          .          .
    >>> [49,] -1.0696320 -0.1698111  2.0082890   .  0.4488292  0.5215745
    >>> [50,] -0.7012526 -2.0818229  0.7750518   .  0.3189076  0.1437394
    >>> 
    >>> ...
    >>> 
    >>> ,,10,100
    >>> [,1]       [,2]       [,3] ...      [,19]      [,20]
    >>> [1,]  0.5360649  0.5491561 -0.4098350   .  0.7647435  0.5640699
    >>> [2,]  0.7924093 -0.7395815 -1.3792913   .  0.1980287 -0.2897026
    >>> ...          .          .          .   .          .          .
    >>> [49,]  0.6266209  0.3778512  1.4995778   . -0.3820651 -1.4241691
    >>> [50,]  1.9218715  3.5475949  0.5963763   .  0.4005210  0.4385623
    >>> 
    >>> H.

Thank you, Herv? and John.
Both glance() and brief() are nice, and I think a version of one of
them could also make a nice addition to the 'utils' package.

However, there's a principal difference between them and the
proposed generalized head {or tail} :
The latter really does *return* a sub matrix/array of chosen
dimensions with modified dimnames and that *object* then is
printed if not assigned.

OTOH,  glance() and brief() rather are versions of print()
and I think have a dedicated "display-only" purpose {yes, I see they do
return something; glance() returning a character object, brief()
returning the principal argument invisibly, the same as any
"correct" print() method..}

>From the above, I think it may make sense to entertain both a
generalization of head() and one such a glance() / brief()
/.. function which for a matrix shows all 4 corners of the
matrix of data frame.

There's another important criterion here:  __Simplicity__ in the
code that's added (and will have to be maintained as part of R
"forever" into the future)...
AFAICS, the DelayedArray stuff is beatifully modular, but
possibly also much entangled in the dependent packages and classes we
cannot require for 'utils'.

The current source for head() and tail() and all their methods
in utils is just 83 lines of code  {file utils/R/head.R minus
the initial mostly copyright comments}.
I am very reluctant to consider blowing that up by factors...


Martin

    >>> On 9/16/19 00:54, Michael Chirico wrote:
    >>>> Awesome. Gabe, since you already have a workshopped version, would you like
    >>>> to proceed? Feel free to ping me to review the patch once it's posted.
    >>>> 
    >>>> On Mon, Sep 16, 2019 at 3:26 PM Martin Maechler <maechler at stat.math.ethz.ch>
    >>>> wrote:
    >>>> 
    >>>>>>>>>> Michael Chirico
    >>>>>>>>>> on Sun, 15 Sep 2019 20:52:34 +0800 writes:
    >>>>> 
>>>>> Finally read in detail your response Gabe. Looks great,
>>>>> and I agree it's quite intuitive, as well as agree against
>>>>> non-recycling.
    >>>>> 
>>>>> Once the length(n) == length(dim(x)) behavior is enabled,
>>>>> I don't think there's any need/desire to have head() do
>>>>> x[1:6,1:6] anymore. head(x, c(6, 6)) is quite clear for
>>>>> those familiar with head(x, 6), it would seem to me.
    >>>>> 
>>>>> Mike C
    >>>>> 
    >>>>> Thank you, Gabe, and Michael.
    >>>>> I did like Gabe's proposal already back in July but was
    >>>>> busy and/or vacationing then ...
    >>>>> 
    >>>>> If you submit this with a patch (that includes changes to both
    >>>>> *.R and *.Rd , including some example) as "wishlist" item to R's
    >>>>> bugzilla, I'm willing/happy to check and commit this to R-devel.
    >>>>> 
    >>>>> Martin
    >>>>> 
    >>>>> 
>>>>> On Sat, Jul 13, 2019 at 8:35 AM Gabriel Becker
>>>>> <gabembecker at gmail.com> wrote:
    >>>>> 
    >>>>>>> Hi Michael and Abby,
    >>>>>>> 
    >>>>>>> So one thing that could happen that would be backwards
    >>>>>>> compatible (with the exception of something that was an
    >>>>>>> error no longer being an error) is head and tail could
    >>>>>>> take vectors of length (dim(x)) rather than integers of
    >>>>>>> length for n, with the default being n=6 being equivalent
    >>>>>>> to n = c(6, dim(x)[2], <...>, dim(x)[k]), at least for
    >>>>>>> the deprecation cycle, if not permanently. It not
    >>>>>>> recycling would be unexpected based on the behavior of
    >>>>>>> many R functions but would preserve the current behavior
    >>>>>>> while granting more fine-grained control to users that
    >>>>>>> feel they need it.
    >>>>>>> 
    >>>>>>> A rapidly thrown-together prototype of such a method for
    >>>>>>> the head of a matrix case is as follows:
    >>>>>>> 
    >>>>>>> head2 = function(x, n = 6L, ...) { indvecs =
    >>>>>>> lapply(seq_along(dim(x)), function(i) { if(length(n) >=
    >>>>>>> i) { ni = n[i] } else { ni = dim(x)[i] } if(ni < 0L) ni =
    >>>>>>> max(nrow(x) + ni, 0L) else ni = min(ni, dim(x)[i])
    >>>>>>> seq_len(ni) }) lstargs = c(list(x),indvecs, drop = FALSE)
    >>>>>>> do.call("[", lstargs) }
    >>>>>>> 
    >>>>>>> 
    >>>>>>>> mat = matrix(1:100, 10, 10)
    >>>>>>> 
    >>>>>>>> *head(mat)*
    >>>>>>> 
    >>>>>>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
    >>>>>>> 
    >>>>>>> [1,] 1 11 21 31 41 51 61 71 81 91
    >>>>>>> 
    >>>>>>> [2,] 2 12 22 32 42 52 62 72 82 92
    >>>>>>> 
    >>>>>>> [3,] 3 13 23 33 43 53 63 73 83 93
    >>>>>>> 
    >>>>>>> [4,] 4 14 24 34 44 54 64 74 84 94
    >>>>>>> 
    >>>>>>> [5,] 5 15 25 35 45 55 65 75 85 95
    >>>>>>> 
    >>>>>>> [6,] 6 16 26 36 46 56 66 76 86 96
    >>>>>>> 
    >>>>>>>> *head2(mat)*
    >>>>>>> 
    >>>>>>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
    >>>>>>> 
    >>>>>>> [1,] 1 11 21 31 41 51 61 71 81 91
    >>>>>>> 
    >>>>>>> [2,] 2 12 22 32 42 52 62 72 82 92
    >>>>>>> 
    >>>>>>> [3,] 3 13 23 33 43 53 63 73 83 93
    >>>>>>> 
    >>>>>>> [4,] 4 14 24 34 44 54 64 74 84 94
    >>>>>>> 
    >>>>>>> [5,] 5 15 25 35 45 55 65 75 85 95
    >>>>>>> 
    >>>>>>> [6,] 6 16 26 36 46 56 66 76 86 96
    >>>>>>> 
    >>>>>>>> *head2(mat, c(2, 3))*
    >>>>>>> 
    >>>>>>> [,1] [,2] [,3]
    >>>>>>> 
    >>>>>>> [1,] 1 11 21
    >>>>>>> 
    >>>>>>> [2,] 2 12 22
    >>>>>>> 
    >>>>>>>> *head2(mat, c(2, -9))*
    >>>>>>> 
    >>>>>>> [,1]
    >>>>>>> 
    >>>>>>> [1,] 1
    >>>>>>> 
    >>>>>>> [2,] 2
    >>>>>>> 
    >>>>>>> 
    >>>>>>> Now one thing to keep in mind here, is that I think we'd
    >>>>>>> either a) have to make the non-recycling behavior
    >>>>>>> permanent, or b) have head treat data.frames and matrices
    >>>>>>> different with respect to the subsets they grab (which
    >>>>>>> strikes me as a *Bad Plan *(tm)).
    >>>>>>> 
    >>>>>>> So I don't think the default behavior would ever be
    >>>>>>> mat[1:6, 1:6], not because of backwards compatibility,
    >>>>>>> but because at least in my intuition that is just not
    >>>>>>> what head on a data.frame should do by default, and I
    >>>>>>> think the behaviors for the basic rectangular datatypes
    >>>>>>> should "stick together". I mean, also because of
    >>>>>>> backwards compatibility, but that could *in theory*
    >>>>>>> change across a long enough deprecation cycle, but the
    >>>>>>> conceptually right thing to do with a data.frame probably
    >>>>>>> won't.
    >>>>>>> 
    >>>>>>> All of that said, is head(mat, c(6, 6)) really that much
    >>>>>>> easier to type/better than just mat[1:6, 1:6, drop=FALSE]
    >>>>>>> (I know this will behave differently if any of the dims
    >>>>>>> of mat are less than 6, but if so why are you heading it
    >>>>>>> in the first place ;) )? I don't really have a strong
    >>>>>>> feeling on the answer to that.
    >>>>>>> 
    >>>>>>> I'm happy to put a patch for head.matrix,
    >>>>>>> head.data.frame, tail.matrix and tail.data.frame, plus
    >>>>>>> documentation, if people on R-core are interested in
    >>>>>>> this.
    >>>>>>> 
    >>>>>>> Note, as most here probably know, and as alluded to
    >>>>>>> above, length(n) > 1 for head or tail currently give an
    >>>>>>> error, so this would be an extension of the existing
    >>>>>>> functionality in the mathematical extension sense, where
    >>>>>>> all existing behavior would remain identical, but the
    >>>>>>> support/valid parameter space would grow.
    >>>>>>> 
    >>>>>>> Best, ~G
    >>>>>>> 
    >>>>>>> 
    >>>>>>> On Fri, Jul 12, 2019 at 4:03 PM Abby Spurdle
    >>>>>>> <spurdle.a at gmail.com> wrote:
    >>>>>>> 
    >>>>>>>>> I assume there are lots of backwards-compatibility
    >>>>>>>> issues as well as valid > use cases for this behavior,
    >>>>>>>> so I guess defaulting to M[1:6, 1:6] is out of > the
    >>>>>>>> question.
    >>>>>>>> 
    >>>>>>>> Agree.
    >>>>>>>> 
    >>>>>>>>> Is there any scope for adding a new argument to
    >>>>>>>> head.matrix that would > allow this flexibility?
    >>>>>>>> 
    >>>>>>>> I agree with what you're trying to achieve.  However,
    >>>>>>>> I'm not sure this is as simple as you're suggesting.
    >>>>>>>> 
    >>>>>>>> What if the user wants "head" in rows but "tail" in
    >>>>>>>> columns.  Or "head" in rows, and both "head" and "tail"
    >>>>>>>> in columns.  With head and tail alone, there's a
    >>>>>>>> combinatorial explosion.
    >>>>>>>> 
    >>>>>>>> Also, when using tail on an unnamed matrix, it may be
    >>>>>>>> desirable to name rows and columns.
    >>>>>>>> 
    >>>>>>>> And all of this assumes standard matrix objects.  Add in
    >>>>>>>> a matrix subclasses and related objects, and things get
    >>>>>>>> more complex still.
    >>>>>>>> 
    >>>>>>>> As I suggested in a another thread, a few days ago, I'm
    >>>>>>>> planning to write an R package for matrices and
    >>>>>>>> matrix-like objects (possibly extending the Matrix
    >>>>>>>> package), with an initial emphasis on subsetting,
    >>>>>>>> printing and formatting.  So, I'm interested to hear
    >>>>>>>> more suggestions on this topic.
    >>>>>>>> 
    >>>>>>>> [[alternative HTML version deleted]]
    >>>>>>>> 
    >>>>>>>> ______________________________________________
    >>>>>>>> R-devel at r-project.org mailing list
    >>>>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
    >>>>>>>> 
    >>>>>>> 
    >>>>> 
>>>>> [[alternative HTML version deleted]]
    >>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
    >>>>> 
    >>>> 
    >>>> [[alternative HTML version deleted]]
    >>>> 
    >>>> ______________________________________________
    >>>> R-devel at r-project.org mailing list
    >>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=sOZlR-nzy_f_Sje6VGA6IXYQM01BO39OQ2zqA8mtaGI&s=VyNGYbk1jJJqirYBwnhKX60dCp31ArtS62RmXKn86O4&e=
    >>>> 
    >>> 
    >>> -- 
    >>> Herv? Pag?s
    >>> 
    >>> Program in Computational Biology
    >>> Division of Public Health Sciences
    >>> Fred Hutchinson Cancer Research Center
    >>> 1100 Fairview Ave. N, M1-B514
    >>> P.O. Box 19024
    >>> Seattle, WA 98109-1024
    >>> 
    >>> E-mail: hpages at fredhutch.org
    >>> Phone:  (206) 667-5791
    >>> Fax:    (206) 667-1319
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Sep 18 10:35:42 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 18 Sep 2019 10:35:42 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <94e5fbbe-6f03-9b69-8abf-ebeced33a016@mpiib-berlin.mpg.de>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
 <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
 <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>
 <94e5fbbe-6f03-9b69-8abf-ebeced33a016@mpiib-berlin.mpg.de>
Message-ID: <23937.60510.182530.176708@stat.math.ethz.ch>

>>>>> Hilmar Berger 
>>>>>     on Sat, 14 Sep 2019 13:31:27 +0200 writes:

    > Dear all,
    > I did some more tests regarding the == operator in Ops.data.frame (see 
    > below).? All tests done in R 3.6.1 (x86_64-w64-mingw32).

    > I find that errors are thrown also when comparing a zero length 
    > data.frame to atomic objects with length>0 which should be a valid case 
    > according to the documentation. This can be traced to a check in the 
    > last line of Ops.data.frame which tests for the presence of an empty 
    > result value (i.e. list() ) but does not handle a list of empty values 
    > (i.e. list(logical(0))) which in fact is generated in those cases. 

    > There  is a simple fix (see also below).

I'm pretty sure what you write above is wrong:  For some reason
you must have changed more in your own version of Ops.data.frame :

Because there's a line

	value <- unlist(value, ...)

there, value is *not*  list(logical(0)) there, but rather  logical(0)
and then indeed, your proposed line change (at the end of Ops.data.frame)
has no effect for the examples you give.

Note also that your analysis -- treating all 0-extent data
frames or matrices the same -- is very incomplete.

A  0 x 0   matrix is not the same as a   0 x 1  matrix etc,  and
similar for data frames.


Here's an extended "testing" script which takes into account
some of the above :

##-----------------------------------------------------------

d0  <- data.frame(a = numeric(0)) # zero length data.frame
d00 <- unname(d0) # zero length data.frame __without names__
d3   <- data.frame(a=1:3) # non-empty data.frame
d30. <- d3[,FALSE] # 3 x 0 -- take into account, too !
d30  <- unname(d30.)

m01. <- matrix(,0,1, dimnames=list(NULL,"a")) # 0 x 1 matrix with dimnames
m01 <- unname(m01.)
m00. <- matrix(,0,0, dimnames=list(NULL,NULL)) # 0 x 0 matrix with dimnames
m00 <- unname(m00.)
m3 <- data.matrix(d3)
##------------------------
## error A:
## Error in matrix(if (is.null(value)) logical() else value, nrow = nr, dimnames = list(rn,  : 
##   length of 'dimnames' [2] not equal to array extent

d0 == 1   # error A
d00 == 1  # <0 x 0 matrix>
d30. == 1  # <3 x 0 matrix>
d30  == 1  # <3 x 0 matrix>
d3 == 1   # <3 x 1 matrix>

d0 == logical(0) # error A
d00 == logical(0) # <0 x 0 matrix>
d30. == logical()  # <3 x 0 matrix>
d30  == logical()  # <3 x 0 matrix>
d3 == logical(0) # error A

d0 == NULL # error A
d00 == NULL # <0 x 0 matrix>
d30. == NULL  # <3 x 0 matrix>
d30  == NULL  # <3 x 0 matrix>
d3 == NULL # error A

m00 == d0  # error A
m00 == d00 # <0 x 0 matrix>
m00 == d3   # error A


# 0-length matrix for comparison :
identical(m00., m00. == 1) ## 0 x 0 matrix *with* "invisible" dimnames [ NULL, NULL ]
identical(m00., m00. == logical(0))
identical(m00., m00. == NULL)
identical(m00, m00 == 1)   ## 0 x 0 matrix w/o dimnames
identical(m00, m00 == logical(0))
identical(m00, m00 == NULL)
## 0 x 1 ---------------------
identical(m01., m01. == 1)          # < 0 x 1 matrix> *with* dimnames
identical(m01., m01. == logical(0)) #     "             "      "
identical(m01., m01. == NULL)       #     "             "      "
identical(m01, m01 == 1)          # < 0 x 1 matrix> w/o dimnames
identical(m01, m01 == logical(0)) # < 0 x 1 matrix>
identical(m01, m01 == NULL)       # < 0 x 1 matrix>

##-----------------------------------------------------------

Best regards,
Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Sep 18 11:29:20 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 18 Sep 2019 11:29:20 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <23937.60510.182530.176708@stat.math.ethz.ch>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
 <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
 <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>
 <94e5fbbe-6f03-9b69-8abf-ebeced33a016@mpiib-berlin.mpg.de>
 <23937.60510.182530.176708@stat.math.ethz.ch>
Message-ID: <23937.63728.859845.525356@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Wed, 18 Sep 2019 10:35:42 +0200 writes:

  >>>>> Hilmar Berger 
  >>>>>     on Sat, 14 Sep 2019 13:31:27 +0200 writes:

       >> Dear all,
       >> I did some more tests regarding the == operator in Ops.data.frame (see 
       >> below).? All tests done in R 3.6.1 (x86_64-w64-mingw32).

       >> I find that errors are thrown also when comparing a zero length 
       >> data.frame to atomic objects with length>0 which should be a valid case 
       >> according to the documentation. This can be traced to a check in the 
       >> last line of Ops.data.frame which tests for the presence of an empty 
       >> result value (i.e. list() ) but does not handle a list of empty values 
       >> (i.e. list(logical(0))) which in fact is generated in those cases. 

       >> There  is a simple fix (see also below).

    > I'm pretty sure what you write above is wrong:  For some reason
    > you must have changed more in your own version of Ops.data.frame :

    > Because there's a line

    > value <- unlist(value, ...)

    > there, value is *not*  list(logical(0)) there, but rather  logical(0)
    > and then indeed, your proposed line change (at the end of Ops.data.frame)
    > has no effect for the examples you give.

On the other hand, there *is* a simple "fix" at the end of
Ops.data.frame()  which makes all your examples "work" (i.e. not
give an error), namely

----------------------------------------------------------------------

@@ -1685,7 +1684,7 @@
     else { ## 'Logic' ("&","|")  and  'Compare' ("==",">","<","!=","<=",">=") :
 	value <- unlist(value, recursive = FALSE, use.names = FALSE)
 	matrix(if(is.null(value)) logical() else value,
-	       nrow = nr, dimnames = list(rn,cn))
+	       nrow = nr, ncol = length(cn), dimnames = list(rn,cn))
     }

----------------------------------------------------------------------

i.e., explicitly specifying 'ncol' compatibly with the column names.
However, I guess that this change would *not* signal errors
where it *should* and so am *not* (yet?) proposing to "do" it.

Another remark, on  S4  which you've raised several times:
As you may know that the 'Matrix' package (part of every
"regular" R installation) uses S4 "everywhere" and it does
define many methods for its Matrix classes, all in source file  Matrix/R/Ops.R
the development version (in svn / subversion) being online on R-forge here:

  https://r-forge.r-project.org/scm/viewvc.php/pkg/Matrix/R/Ops.R?view=markup&root=matrix

and "of course", there we define S4 group methods for Ops all
the time, and (almost) never S3 ones...
[[but I hope you don't want to start combining data frames
 with Matrix package matrices, now !]]

Martin Maechler
ETH Zurich  and  R Core Team


From wdun|@p @end|ng |rom t|bco@com  Thu Sep 19 20:19:29 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 19 Sep 2019 11:19:29 -0700
Subject: [Rd] Should slot<-() alter its first argument?
Message-ID: <CAF8bMcan5u+X72Cy2itSbNr=7ovvW7NsZ_q=CX29SfdeOXpmew@mail.gmail.com>

We noticed that the slot<- function alters its first argument, which goes
against the grain of a functional language.  The similar @<- does not
change its first argument.  Is this intended?  The timeSeries and distr
package depend on this altering.

> setClass("Z", rep=representation(x="character"))
> z <- new("Z", x="orig")
> `@<-`(z, "x", value="newer")
An object of class "Z"
Slot "x":
[1] "newer"

> z
An object of class "Z"
Slot "x":
[1] "orig"

>
> `slot<-`(z, "x", value="newest")
An object of class "Z"
Slot "x":
[1] "newest"

> z
An object of class "Z"
Slot "x":
[1] "newest"

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From btyner @end|ng |rom gm@||@com  Sat Sep 21 03:03:57 2019
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Fri, 20 Sep 2019 21:03:57 -0400
Subject: [Rd] Should slot<-() alter its first argument?
In-Reply-To: <CAF8bMcan5u+X72Cy2itSbNr=7ovvW7NsZ_q=CX29SfdeOXpmew@mail.gmail.com>
References: <CAF8bMcan5u+X72Cy2itSbNr=7ovvW7NsZ_q=CX29SfdeOXpmew@mail.gmail.com>
Message-ID: <e2c196c2-4709-a379-0bb3-78fa5aec813d@gmail.com>

It appears this started with R version 3.5.0. Under R 3.4.4 we have:

 > setClass("Z", rep=representation(x="character"))
 > z <- new("Z", x="orig")
 > `@<-`(z, "x", value="newer")
An object of class "Z"
Slot "x":
[1] "newer"

 > z
An object of class "Z"
Slot "x":
[1] "newer"

 > `slot<-`(z, "x", value="newest")
An object of class "Z"
Slot "x":
[1] "newest"

 > z
An object of class "Z"
Slot "x":
[1] "newest"


> We noticed that the slot<- function alters its first argument, which goes
> against the grain of a functional language.  The similar @<- does not
> change its first argument.  Is this intended?  The timeSeries and distr
> package depend on this altering.
>
> >/setClass("Z", rep=representation(x="character")) />/z <- new("Z", x="orig") />/`@<-`(z, "x", value="newer") /An object of class "Z"
> Slot "x":
> [1] "newer"
>
> >/z /An object of class "Z"
> Slot "x":
> [1] "orig"
>
> >//>/`slot<-`(z, "x", value="newest") /An object of class "Z"
> Slot "x":
> [1] "newest"
>
> >/z /An object of class "Z"
> Slot "x":
> [1] "newest"
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> 	[[alternative HTML version deleted]]


From |@wrence@m|ch@e| @end|ng |rom gene@com  Sat Sep 21 16:46:00 2019
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Sat, 21 Sep 2019 07:46:00 -0700
Subject: [Rd] Should slot<-() alter its first argument?
In-Reply-To: <CAF8bMcan5u+X72Cy2itSbNr=7ovvW7NsZ_q=CX29SfdeOXpmew@mail.gmail.com>
References: <CAF8bMcan5u+X72Cy2itSbNr=7ovvW7NsZ_q=CX29SfdeOXpmew@mail.gmail.com>
Message-ID: <CAOQ5NydbiJv3DXG2Qyu+GbhsVU7ayaPDe8YJFGXo73QyRJJ=Tw@mail.gmail.com>

The core of Bioconductor and the methods package itself once took
advantage of this "feature" to avoid unnecessary duplication. Since
the introduction of shallow copying, those abuses have been removed.

Note that these assignment functions always have issues due to
optimizations that assume <-() is called. For example,

>  setClass("Z", rep=representation(x="character"))
> z <- new("Z", x="orig")

> z2 <- `@<-`(z, "x", value="newer")
> .Internal(inspect(z2)) # NAMED==1, as it should be
@565446e0bdf8 25 S4SXP g0c0 [OBJ,NAM(1),S4,gp=0x10,ATT]

> `@<-`(z2, "x", value="newest")
An object of class "Z"
Slot "x":
[1] "newest"
> z2 # modified in place due to NAMED==1, because we assume assignment back to itself
An object of class "Z"
Slot "x":
[1] "newest"

Since we assume <-() bumps NAMED, z2 has its NAMED cleared even though
it's obviously named:
> z2 <- `@<-`(z, "x", value="newer")
> .Internal(inspect(z2))
@56544726ae60 25 S4SXP g0c0 [OBJ,NAM(1),S4,gp=0x10,ATT]
> .Internal(inspect(`@<-`(z2, "x", value="newest"))) # NAMED == 0, same address as above
@56544726ae60 25 S4SXP g0c0 [OBJ,S4,gp=0x10,ATT]

So I guess we could make slot<-() a bit safer but unless we give up
the optimizations or maybe inform the "gets" functions that they are
being called outside of complex assignment, there will be exploits.

Michael

On Thu, Sep 19, 2019 at 11:19 AM William Dunlap via R-devel
<r-devel at r-project.org> wrote:
>
> We noticed that the slot<- function alters its first argument, which goes
> against the grain of a functional language.  The similar @<- does not
> change its first argument.  Is this intended?  The timeSeries and distr
> package depend on this altering.
>
> > setClass("Z", rep=representation(x="character"))
> > z <- new("Z", x="orig")
> > `@<-`(z, "x", value="newer")
> An object of class "Z"
> Slot "x":
> [1] "newer"
>
> > z
> An object of class "Z"
> Slot "x":
> [1] "orig"
>
> >
> > `slot<-`(z, "x", value="newest")
> An object of class "Z"
> Slot "x":
> [1] "newest"
>
> > z
> An object of class "Z"
> Slot "x":
> [1] "newest"
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From |g@ut|er @end|ng |rom gm@||@com  Sat Sep 21 17:37:07 2019
From: |g@ut|er @end|ng |rom gm@||@com (Laurent Gautier)
Date: Sat, 21 Sep 2019 11:37:07 -0400
Subject: [Rd] =?utf-8?q?Error=3A_package_or_namespace_load_failed_for_?=
	=?utf-8?b?4oCYdXRpbHM=?=
In-Reply-To: <23935.16335.343808.52170@stat.math.ethz.ch>
References: <CA+JCgN39_YGcPH7xgc+O8qbRaXZcc6=kqBVDcgQyGyBGJmgoCQ@mail.gmail.com>
 <CA+JCgN3VBrqXLc+Y=wikf19zkoCRNct2Pof0sVxF82RWN-+T1g@mail.gmail.com>
 <23935.16335.343808.52170@stat.math.ethz.ch>
Message-ID: <CA+JCgN3XHKZ4jFh32F2fk7LkHdQQKx9ZZOra2VxqgBN5uPZoDw@mail.gmail.com>

Thanks to all that looked at it and tried to answer.

I am reporting here what I found in the end, in the hope it helps someone
with a similar issue solve it quicker than I solved the one I had:

Having

int R_NaInt;

rather than

extern int R_NaInt;

in the header / C definitions of the cffi interface (part of the header
definitions have to be copied/prepared to be digestable by the C parser
used Python's cffi interface) was enough to send R into a confused state at
initialization (but without an obvious error message).


Le lun. 16 sept. 2019 ? 03:55, Martin Maechler <maechler at stat.math.ethz.ch>
a ?crit :

> >>>>> Laurent Gautier
> >>>>>     on Sun, 15 Sep 2019 15:01:09 -0400 writes:
>
>     > In case a search engine leads someone with the same issue
>     > here, I am documenting the point I reached:
>
>     > I can reproduce the issue with a small example when
>     > forcing R to not load any package at startup time (using
>     > an Renviron file): ``` package <- "utils" lib.loc <-
>     > "<fill this according to your R install>" ns <-
>     > loadNamespace(package, lib.loc) ```
>
>     > The code path goes through
>     > `registerS3methods(nsInfo$S3methods, package, env)` and
>     > there to:
>
>     > ``` if (methods::is(genfun, "genericFunction")) ```
>
>     > The evaluation of `methods::is` reaches the line
>     > triggering the error as `.identC(class1, class2)` and
>     > `.identC(class2, "ANY")` both return `NA` and `NA || NA`
>     > is not defined:
>
>     > ```
>     >> if (NA || NA) { cat("here\n") }
>     > Error in if (NA || NA) { : missing value where TRUE/FALSE
>     > needed ```
>
>     > As I understand it `.identC()` should never return `NA`,
>
> that understanding is correct, it should return TRUE or FALSE,
> nothing else.
>
>     > and if the case this would mean that R itself is an
>     > unstable state (something at the C level that should not
>     > have happened has happened) but this was not caught
>     > earlier.
>
> yes.. something like that...
> My current diagnosis would be that something in your embedding of R
> happened
> in a way that "broke R entirely" ...
> but note that I know almost nothing about embedding R.
>
> Martin
>

	[[alternative HTML version deleted]]


From |@wrence@m|ch@e| @end|ng |rom gene@com  Sat Sep 21 20:41:54 2019
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Sat, 21 Sep 2019 11:41:54 -0700
Subject: [Rd] Cryptic error message from namespaceExport
In-Reply-To: <CAJuCY5yP1RT_OiYRG=1vCnxZZ-d9Xb+1qLxm7g9J_2EF_eyBzA@mail.gmail.com>
References: <CAJuCY5yZe=T=kn0dbwTi=aLNJnfgrGWBo8n0yCH+RY23fBh5ug@mail.gmail.com>
 <CAOQ5Nycz=ObY9uB2XH4AG8bDRPNXVp6_T1+nkma8xVty6cVO4g@mail.gmail.com>
 <CAJuCY5yP1RT_OiYRG=1vCnxZZ-d9Xb+1qLxm7g9J_2EF_eyBzA@mail.gmail.com>
Message-ID: <CAOQ5NyfzpVMVmG=n8mcXaocrvB_m8cgWJSuzJOyw+eioAH39qQ@mail.gmail.com>

Thanks. The error message will now say:

undefined exports: class inla

Will check-in after running more tests.


On Fri, Sep 6, 2019 at 10:19 AM Thierry Onkelinx <thierry.onkelinx at inbo.be>
wrote:

> Dear Michael,
>
> my package has setOldClass("inla") and the NAMESPACE
> contains exportClasses(inla) and importFrom(INLA, inla.posterior.sample)
>
> the old version of INLA uses the S3 class "inla" but does not export it.
> the new version of INLA has setOldClass("inla") and the NAMESPACE
> contains exportClasses(inla)
>
> installing my package in combination with an older INLA version works
>
> install.packages("
> https://inla.r-inla-download.org/R/stable/src/contrib/INLA_18.07.12.tar.gz",
> repos = NULL)
> remotes::install_github("inbo/inlatools", upgrade = FALSE, force = TRUE)
>
> installing my package with a recent INLA versions yields the error
>
> install.packages("
> https://inla.r-inla-download.org/R/stable/src/contrib/INLA_19.09.03.tar.gz",
> repos = NULL)
> remotes::install_github("inbo/inlatools", upgrade = FALSE, force = TRUE)
>
> Warning: INLA is a very large package. The old version is 87 MB, the new
> one 250 MB
>
> Best regards,
>
> ir. Thierry Onkelinx
> Statisticus / Statistician
>
> Vlaamse Overheid / Government of Flanders
> INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
> FOREST
> Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
> thierry.onkelinx at inbo.be
> Havenlaan 88 bus 73, 1000 Brussel
> www.inbo.be
>
>
> ///////////////////////////////////////////////////////////////////////////////////////////
> To call in the statistician after the experiment is done may be no more
> than asking him to perform a post-mortem examination: he may be able to say
> what the experiment died of. ~ Sir Ronald Aylmer Fisher
> The plural of anecdote is not data. ~ Roger Brinner
> The combination of some data and an aching desire for an answer does not
> ensure that a reasonable answer can be extracted from a given body of data.
> ~ John Tukey
>
> ///////////////////////////////////////////////////////////////////////////////////////////
>
> <https://www.inbo.be>
>
>
> Op vr 6 sep. 2019 om 17:16 schreef Michael Lawrence <
> lawrence.michael at gene.com>:
>
>> Just to clarify, your package is exporting a class that is not
>> defined? Or is it exporting a class that is defined by a dependency
>> and then masked by setOldClass()? A simple reproducible example would
>> help.
>>
>> On Fri, Sep 6, 2019 at 7:48 AM Thierry Onkelinx via R-devel
>> <r-devel at r-project.org> wrote:
>> >
>> > Dear all,
>> >
>> > Today I got this error message (R 3.6.1) when installing my package:
>> >
>> > Error: package or namespace load failed for ?inlatools? in
>> > namespaceExport(ns, exports):
>> >  undefined exports: .__C__inla
>> >
>> > My package was using setOldClass("inla") and exported the "inla" class
>> via
>> > the NAMESPACE. It imports functions from the INLA package. Older
>> versions
>> > of the INLA package did not export the "inla" class. Hence the use of
>> > setOldClass().
>> > The current version of the INLA package does export the "inla" class
>> > through it NAMESPACE. This triggered the error described above.
>> >
>> > Is the possible to improve this error message? The current message is
>> > misleading as neither packages contain the string ".__C__inla"
>> >
>> > Best regards,
>> >
>> > ir. Thierry Onkelinx
>> > Statisticus / Statistician
>> >
>> > Vlaamse Overheid / Government of Flanders
>> > INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE
>> AND
>> > FOREST
>> > Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
>> > thierry.onkelinx at inbo.be
>> > Havenlaan 88 bus 73, 1000 Brussel
>> > www.inbo.be
>> >
>> >
>> ///////////////////////////////////////////////////////////////////////////////////////////
>> > To call in the statistician after the experiment is done may be no more
>> > than asking him to perform a post-mortem examination: he may be able to
>> say
>> > what the experiment died of. ~ Sir Ronald Aylmer Fisher
>> > The plural of anecdote is not data. ~ Roger Brinner
>> > The combination of some data and an aching desire for an answer does not
>> > ensure that a reasonable answer can be extracted from a given body of
>> data.
>> > ~ John Tukey
>> >
>> ///////////////////////////////////////////////////////////////////////////////////////////
>> >
>> > <https://www.inbo.be>
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>
>> --
>> Michael Lawrence
>> Scientist, Bioinformatics and Computational Biology
>> Genentech, A Member of the Roche Group
>> Office +1 (650) 225-7760
>> michafla at gene.com
>>
>> Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube
>>
>

-- 
Michael Lawrence
Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Mon Sep 23 21:12:39 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 23 Sep 2019 15:12:39 -0400
Subject: [Rd] What is the best way to loop over an ALTREP vector?
In-Reply-To: <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
References: <CAGiFhPN+ncuPMY9UbEO+b0wis0EJ0R9AaWSB0By-CD3fNetO1A@mail.gmail.com>
 <CAD4oTHFhAoeRCu5g15DkLpdRr=PF9hLBHufOrh3CvF8E04qz=A@mail.gmail.com>
 <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
Message-ID: <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>

Hi Gabriel,

I have tried the macro and found a small issue, it seems like the macro is
written in C and does an implicit type conversion(const void * to const int
*), see below. While it is allowed in C, C++ seems not happy with it. Is it
possible to add an explicit type casting so that it can be compatible with
both language?


#define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \

                             strt, nfull, expr) do {         \

       *const etype *px = (const** etype *)DATAPTR_OR_NULL(sx);  *
\

       if (px != NULL) {                                      \

           R_xlen_t __ibr_n__ = strt + nfull;                        \

           R_xlen_t nb = __ibr_n__;                                  \

           for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \

              expr                                            \

            }                                                 \

       }                                                      \

       else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype, vtype,
\

                                   strt, nfull, expr);        \

    } while (0)


  Also, I notice that the element type(etype) and vector type(vtype) has to
be specified in the macro. Since the SEXP is the first argument in the
macro, it seems redundant to define etype and vtype for they have to match
the type of the SEXP. I'm wondering if this is intentional? Will there be a
type-free macro in R in the future? Here is a simple type-free macro I'm
using.

#define type_free_iter(sx, ptr, ind, nbatch,expr)\

switch(TYPEOF(sx)){\

case INTSXP:\

       ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, INTEGER, expr);\

       break; \

case REALSXP:\

       ITERATE_BY_REGION(sx, ptr, ind, nbatch, double, REAL, expr);\

       break; \

case LGLSXP:\

       ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, LOGICAL, expr);\

       break; \

default:\

       Rf_error("Unknow data type\n"); \

       break; \

}



// [[Rcpp::export]]

double sillysum(SEXP x) {

       double s = 0.0;

       type_free_iter(x, ptr, ind, nbatch,

              {

                     for (int i = 0; i < nbatch; i++) { s = s + ptr[i]; }

              });

              return s;

}




Best,

Jiefei

On Wed, Aug 28, 2019 at 2:32 PM Wang Jiefei <szwjf08 at gmail.com> wrote:

> Thank you, Gabriel. The loop macro is very helpful. It is also exciting to
> see that there are lots of changes in ALTREP in R devel version. I really
> appreciate your help!
>
> Best,
> Jiefei
>
> On Wed, Aug 28, 2019 at 7:37 AM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Jiefei,
>>
>> I've been meaning to write up something about this so hopefully this will
>> be an impetus for me to actually do that, but until then, responses inline.
>>
>>
>> On Tue, Aug 27, 2019, 7:22 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>
>>> Hi devel team,
>>>
>>> I'm working on C/C++ level ALTREP compatibility for a package. The
>>> package
>>> previously used pointers to access the data of a SEXP, so it would not
>>> work
>>> for some ALTREP objects which do not have a pointer. I plan to rewrite
>>> the
>>> code and use functions like get_elt, get_region, and get_subset to access
>>> the values of a vector, so I have a few questions for ALTREP:
>>>
>>> 1. Since an ALTREP do not have to define all of the above
>>> functions(element, region, subset), is there any way to check which
>>> function has been defined for an ALTREP class? I did a search on
>>> RInternal.h and altrep.c but did not find a solution for it. If not, will
>>> it be added in the future?
>>>
>>
>> Element and region are guaranteed to always be defined and work (for
>> altrep and non-altrep INTSXP, REALSXP, LGLSXPs, etc, we currently don't
>> have region for STRSXP or VECSXP, I believe). If the altrep class does not
>> provide them then default methods will be used, which may be inefficient in
>> some cases but will work. Subset is currently a forward looking stub, but
>> once implimented, that will also be guaranteed to work for all valid ALTREP
>> classes.
>>
>>
>>>
>>> 2. Given the diversity of ALTREP classes, what is the best way to loop
>>> over
>>> an ALTREP object? I hope there can be an all-in-one function which can
>>> get
>>> the values from a vector as long as at least one of the above functions
>>> has
>>> been defined, so package developers would not be bothered by tons of
>>> `if-else` statement if they want their package to work with ALTREP. Since
>>> it seems like there is no such function exist, what could be the best way
>>> to do the loop under the current R version?
>>>
>>
>> The best way to loop over all SEXPs, which supports both altrep and
>> nonaltrep objects is, with the ITERATE_BY_REGION (which has been in R for a
>> number of released versions, at least since 3.5.0 I think) and the much
>> newer (devel only) ITERATE_BY_REGION_PARTIAL macros defined in
>> R_exts/Itermacros.h
>>
>> The meaning of the arguments is as follows for ITERATE_BY_REGION_PARTIAL
>> are as follows (ITERATE_BY_REGION is the same except no strt, and nfull).
>>
>>
>>    - sx - C level variable name of the SEXP to iterate over
>>    - px - variable name to use for the pointer populated with data from
>>    a region of sx
>>    - idx - variable name to use for the "outer", batch counter in the
>>    for loop. This will contain the 0-indexed start position of the batch
>>    you're currently processing
>>    - nb - variable name to use for the current batch size. This will
>>    always either be GET_REGION_BUFFSIZE (512), or the number of elements
>>    remaining in the vector, whichever is smaller
>>    - etype - element (C) type, e.g., int, double, of the data
>>    - vtype - vector (access API) type, e.g, INTEGER, REAL
>>    - strt - the 0-indexed position in the vector to start iterating
>>    - nfull - the total number oif elements to iterate over from the
>>    vector
>>    - expr - the code to process a single batch (Which will do things to
>>    px, typically)
>>
>>
>> So code to perform badly implemented not good idea summing of REALSXP
>> data might look like
>>
>> double sillysum(SEXP x) {
>>
>>     double s = 0.0;
>>
>>     ITERATE_BY_REGION(x, ptr, ind, nbatch, double, REAL,
>>         {
>>
>>             for(int i = 0; i < nbatch; i++) { s = s + ptr[i];}
>>         })
>>
>>      return s;
>> }
>>
>> For meatier examples of ITERATE_BY_REGION's use in practice you can grep
>> the R sources. I know it is used in the implementations of the various
>> C-level summaries (summary.c), print and formatting functions, and anyNA.
>>
>> Some things to remember
>>
>>    - If you have an inner loop like the one above, your total position
>>    in the original vector is ind + i
>>    - ITERATE_BY_REGION always processes the whole vector, if you need to
>>    only do part of it yo'll either need custom breaking for both inner and
>>    outer loopsl, or in R-devel you can use ITERATE_BY_REGION_PARTIAL
>>    - Don't use the variants ending in 0, all they do is skip over things
>>    that are a good idea in the case of non-altreps (and some very specific
>>    altreps).
>>
>> Hope that helps.
>>
>> Best,
>> ~G
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>> Best,
>>> Jiefei
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Mon Sep 23 21:17:58 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 23 Sep 2019 15:17:58 -0400
Subject: [Rd] What is the best way to loop over an ALTREP vector?
In-Reply-To: <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>
References: <CAGiFhPN+ncuPMY9UbEO+b0wis0EJ0R9AaWSB0By-CD3fNetO1A@mail.gmail.com>
 <CAD4oTHFhAoeRCu5g15DkLpdRr=PF9hLBHufOrh3CvF8E04qz=A@mail.gmail.com>
 <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
 <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>
Message-ID: <CAGiFhPP9JhYkM2KryadOOKt2h0bEDQj+RJvD2UScNZyejcNSCw@mail.gmail.com>

Sorry for post a lot of things, for the first part of code, I copied my C++
iter macro by mistake(and you can see an explicit type casting). Here is
the macro definition from R_exts/Itermacros.h

#define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \

                             strt, nfull, expr) do {         \

*       const** etype *px = DATAPTR_OR_NULL(sx);           *             \

       if (px != NULL) {                                      \

           R_xlen_t __ibr_n__ = strt + nfull;                        \

           R_xlen_t nb = __ibr_n__;                                  \

           for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \

              expr                                            \

            }                                                 \

       }                                                      \

       else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype, vtype,
\

                                  strt, nfull, expr);        \

    } while (0)


Best,

Jiefei

On Mon, Sep 23, 2019 at 3:12 PM Wang Jiefei <szwjf08 at gmail.com> wrote:

> Hi Gabriel,
>
> I have tried the macro and found a small issue, it seems like the macro is
> written in C and does an implicit type conversion(const void * to const int
> *), see below. While it is allowed in C, C++ seems not happy with it. Is it
> possible to add an explicit type casting so that it can be compatible with
> both language?
>
>
> #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
>
>                              strt, nfull, expr) do {         \
>
>        *const etype *px = (const** etype *)DATAPTR_OR_NULL(sx);  *
> \
>
>        if (px != NULL) {                                      \
>
>            R_xlen_t __ibr_n__ = strt + nfull;                        \
>
>            R_xlen_t nb = __ibr_n__;                                  \
>
>            for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
>
>               expr                                            \
>
>             }                                                 \
>
>        }                                                      \
>
>        else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype,
> vtype,       \
>
>                                    strt, nfull, expr);        \
>
>     } while (0)
>
>
>   Also, I notice that the element type(etype) and vector type(vtype) has
> to be specified in the macro. Since the SEXP is the first argument in the
> macro, it seems redundant to define etype and vtype for they have to match
> the type of the SEXP. I'm wondering if this is intentional? Will there be a
> type-free macro in R in the future? Here is a simple type-free macro I'm
> using.
>
> #define type_free_iter(sx, ptr, ind, nbatch,expr)\
>
> switch(TYPEOF(sx)){\
>
> case INTSXP:\
>
>        ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, INTEGER, expr);\
>
>        break; \
>
> case REALSXP:\
>
>        ITERATE_BY_REGION(sx, ptr, ind, nbatch, double, REAL, expr);\
>
>        break; \
>
> case LGLSXP:\
>
>        ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, LOGICAL, expr);\
>
>        break; \
>
> default:\
>
>        Rf_error("Unknow data type\n"); \
>
>        break; \
>
> }
>
>
>
> // [[Rcpp::export]]
>
> double sillysum(SEXP x) {
>
>        double s = 0.0;
>
>        type_free_iter(x, ptr, ind, nbatch,
>
>               {
>
>                      for (int i = 0; i < nbatch; i++) { s = s + ptr[i]; }
>
>               });
>
>               return s;
>
> }
>
>
>
>
> Best,
>
> Jiefei
>
> On Wed, Aug 28, 2019 at 2:32 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>
>> Thank you, Gabriel. The loop macro is very helpful. It is also exciting
>> to see that there are lots of changes in ALTREP in R devel version. I
>> really appreciate your help!
>>
>> Best,
>> Jiefei
>>
>> On Wed, Aug 28, 2019 at 7:37 AM Gabriel Becker <gabembecker at gmail.com>
>> wrote:
>>
>>> Jiefei,
>>>
>>> I've been meaning to write up something about this so hopefully this
>>> will be an impetus for me to actually do that, but until then, responses
>>> inline.
>>>
>>>
>>> On Tue, Aug 27, 2019, 7:22 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>>
>>>> Hi devel team,
>>>>
>>>> I'm working on C/C++ level ALTREP compatibility for a package. The
>>>> package
>>>> previously used pointers to access the data of a SEXP, so it would not
>>>> work
>>>> for some ALTREP objects which do not have a pointer. I plan to rewrite
>>>> the
>>>> code and use functions like get_elt, get_region, and get_subset to
>>>> access
>>>> the values of a vector, so I have a few questions for ALTREP:
>>>>
>>>> 1. Since an ALTREP do not have to define all of the above
>>>> functions(element, region, subset), is there any way to check which
>>>> function has been defined for an ALTREP class? I did a search on
>>>> RInternal.h and altrep.c but did not find a solution for it. If not,
>>>> will
>>>> it be added in the future?
>>>>
>>>
>>> Element and region are guaranteed to always be defined and work (for
>>> altrep and non-altrep INTSXP, REALSXP, LGLSXPs, etc, we currently don't
>>> have region for STRSXP or VECSXP, I believe). If the altrep class does not
>>> provide them then default methods will be used, which may be inefficient in
>>> some cases but will work. Subset is currently a forward looking stub, but
>>> once implimented, that will also be guaranteed to work for all valid ALTREP
>>> classes.
>>>
>>>
>>>>
>>>> 2. Given the diversity of ALTREP classes, what is the best way to loop
>>>> over
>>>> an ALTREP object? I hope there can be an all-in-one function which can
>>>> get
>>>> the values from a vector as long as at least one of the above functions
>>>> has
>>>> been defined, so package developers would not be bothered by tons of
>>>> `if-else` statement if they want their package to work with ALTREP.
>>>> Since
>>>> it seems like there is no such function exist, what could be the best
>>>> way
>>>> to do the loop under the current R version?
>>>>
>>>
>>> The best way to loop over all SEXPs, which supports both altrep and
>>> nonaltrep objects is, with the ITERATE_BY_REGION (which has been in R for a
>>> number of released versions, at least since 3.5.0 I think) and the much
>>> newer (devel only) ITERATE_BY_REGION_PARTIAL macros defined in
>>> R_exts/Itermacros.h
>>>
>>> The meaning of the arguments is as follows for ITERATE_BY_REGION_PARTIAL
>>> are as follows (ITERATE_BY_REGION is the same except no strt, and nfull).
>>>
>>>
>>>    - sx - C level variable name of the SEXP to iterate over
>>>    - px - variable name to use for the pointer populated with data from
>>>    a region of sx
>>>    - idx - variable name to use for the "outer", batch counter in the
>>>    for loop. This will contain the 0-indexed start position of the batch
>>>    you're currently processing
>>>    - nb - variable name to use for the current batch size. This will
>>>    always either be GET_REGION_BUFFSIZE (512), or the number of elements
>>>    remaining in the vector, whichever is smaller
>>>    - etype - element (C) type, e.g., int, double, of the data
>>>    - vtype - vector (access API) type, e.g, INTEGER, REAL
>>>    - strt - the 0-indexed position in the vector to start iterating
>>>    - nfull - the total number oif elements to iterate over from the
>>>    vector
>>>    - expr - the code to process a single batch (Which will do things to
>>>    px, typically)
>>>
>>>
>>> So code to perform badly implemented not good idea summing of REALSXP
>>> data might look like
>>>
>>> double sillysum(SEXP x) {
>>>
>>>     double s = 0.0;
>>>
>>>     ITERATE_BY_REGION(x, ptr, ind, nbatch, double, REAL,
>>>         {
>>>
>>>             for(int i = 0; i < nbatch; i++) { s = s + ptr[i];}
>>>         })
>>>
>>>      return s;
>>> }
>>>
>>> For meatier examples of ITERATE_BY_REGION's use in practice you can grep
>>> the R sources. I know it is used in the implementations of the various
>>> C-level summaries (summary.c), print and formatting functions, and anyNA.
>>>
>>> Some things to remember
>>>
>>>    - If you have an inner loop like the one above, your total position
>>>    in the original vector is ind + i
>>>    - ITERATE_BY_REGION always processes the whole vector, if you need
>>>    to only do part of it yo'll either need custom breaking for both inner and
>>>    outer loopsl, or in R-devel you can use ITERATE_BY_REGION_PARTIAL
>>>    - Don't use the variants ending in 0, all they do is skip over
>>>    things that are a good idea in the case of non-altreps (and some very
>>>    specific altreps).
>>>
>>> Hope that helps.
>>>
>>> Best,
>>> ~G
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>> Best,
>>>> Jiefei
>>>>
>>>>         [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>

	[[alternative HTML version deleted]]


From bob @end|ng |rom rud@|@  Tue Sep 24 03:12:53 2019
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Mon, 23 Sep 2019 21:12:53 -0400
Subject: [Rd] What is the best way to loop over an ALTREP vector?
In-Reply-To: <CAGiFhPP9JhYkM2KryadOOKt2h0bEDQj+RJvD2UScNZyejcNSCw@mail.gmail.com>
References: <CAGiFhPN+ncuPMY9UbEO+b0wis0EJ0R9AaWSB0By-CD3fNetO1A@mail.gmail.com>
 <CAD4oTHFhAoeRCu5g15DkLpdRr=PF9hLBHufOrh3CvF8E04qz=A@mail.gmail.com>
 <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
 <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>
 <CAGiFhPP9JhYkM2KryadOOKt2h0bEDQj+RJvD2UScNZyejcNSCw@mail.gmail.com>
Message-ID: <C6BDF92E-31A5-46DA-963D-1D7C73720F95@rud.is>

Not sure if you're using just C++ or Rcpp for C++ access but https://purrple.cat/blog/2018/10/14/altrep-and-cpp/ has some tips on using C++ w/ALTREP.

> On Sep 23, 2019, at 3:17 PM, Wang Jiefei <szwjf08 at gmail.com> wrote:
> 
> Sorry for post a lot of things, for the first part of code, I copied my C++
> iter macro by mistake(and you can see an explicit type casting). Here is
> the macro definition from R_exts/Itermacros.h
> 
> #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
> 
>                             strt, nfull, expr) do {         \
> 
> *       const** etype *px = DATAPTR_OR_NULL(sx);           *             \
> 
>       if (px != NULL) {                                      \
> 
>           R_xlen_t __ibr_n__ = strt + nfull;                        \
> 
>           R_xlen_t nb = __ibr_n__;                                  \
> 
>           for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
> 
>              expr                                            \
> 
>            }                                                 \
> 
>       }                                                      \
> 
>       else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype, vtype,
> \
> 
>                                  strt, nfull, expr);        \
> 
>    } while (0)
> 
> 
> Best,
> 
> Jiefei
> 
> On Mon, Sep 23, 2019 at 3:12 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
> 
>> Hi Gabriel,
>> 
>> I have tried the macro and found a small issue, it seems like the macro is
>> written in C and does an implicit type conversion(const void * to const int
>> *), see below. While it is allowed in C, C++ seems not happy with it. Is it
>> possible to add an explicit type casting so that it can be compatible with
>> both language?
>> 
>> 
>> #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
>> 
>>                             strt, nfull, expr) do {         \
>> 
>>       *const etype *px = (const** etype *)DATAPTR_OR_NULL(sx);  *
>> \
>> 
>>       if (px != NULL) {                                      \
>> 
>>           R_xlen_t __ibr_n__ = strt + nfull;                        \
>> 
>>           R_xlen_t nb = __ibr_n__;                                  \
>> 
>>           for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
>> 
>>              expr                                            \
>> 
>>            }                                                 \
>> 
>>       }                                                      \
>> 
>>       else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype,
>> vtype,       \
>> 
>>                                   strt, nfull, expr);        \
>> 
>>    } while (0)
>> 
>> 
>>  Also, I notice that the element type(etype) and vector type(vtype) has
>> to be specified in the macro. Since the SEXP is the first argument in the
>> macro, it seems redundant to define etype and vtype for they have to match
>> the type of the SEXP. I'm wondering if this is intentional? Will there be a
>> type-free macro in R in the future? Here is a simple type-free macro I'm
>> using.
>> 
>> #define type_free_iter(sx, ptr, ind, nbatch,expr)\
>> 
>> switch(TYPEOF(sx)){\
>> 
>> case INTSXP:\
>> 
>>       ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, INTEGER, expr);\
>> 
>>       break; \
>> 
>> case REALSXP:\
>> 
>>       ITERATE_BY_REGION(sx, ptr, ind, nbatch, double, REAL, expr);\
>> 
>>       break; \
>> 
>> case LGLSXP:\
>> 
>>       ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, LOGICAL, expr);\
>> 
>>       break; \
>> 
>> default:\
>> 
>>       Rf_error("Unknow data type\n"); \
>> 
>>       break; \
>> 
>> }
>> 
>> 
>> 
>> // [[Rcpp::export]]
>> 
>> double sillysum(SEXP x) {
>> 
>>       double s = 0.0;
>> 
>>       type_free_iter(x, ptr, ind, nbatch,
>> 
>>              {
>> 
>>                     for (int i = 0; i < nbatch; i++) { s = s + ptr[i]; }
>> 
>>              });
>> 
>>              return s;
>> 
>> }
>> 
>> 
>> 
>> 
>> Best,
>> 
>> Jiefei
>> 
>> On Wed, Aug 28, 2019 at 2:32 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>> 
>>> Thank you, Gabriel. The loop macro is very helpful. It is also exciting
>>> to see that there are lots of changes in ALTREP in R devel version. I
>>> really appreciate your help!
>>> 
>>> Best,
>>> Jiefei
>>> 
>>> On Wed, Aug 28, 2019 at 7:37 AM Gabriel Becker <gabembecker at gmail.com>
>>> wrote:
>>> 
>>>> Jiefei,
>>>> 
>>>> I've been meaning to write up something about this so hopefully this
>>>> will be an impetus for me to actually do that, but until then, responses
>>>> inline.
>>>> 
>>>> 
>>>> On Tue, Aug 27, 2019, 7:22 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>>> 
>>>>> Hi devel team,
>>>>> 
>>>>> I'm working on C/C++ level ALTREP compatibility for a package. The
>>>>> package
>>>>> previously used pointers to access the data of a SEXP, so it would not
>>>>> work
>>>>> for some ALTREP objects which do not have a pointer. I plan to rewrite
>>>>> the
>>>>> code and use functions like get_elt, get_region, and get_subset to
>>>>> access
>>>>> the values of a vector, so I have a few questions for ALTREP:
>>>>> 
>>>>> 1. Since an ALTREP do not have to define all of the above
>>>>> functions(element, region, subset), is there any way to check which
>>>>> function has been defined for an ALTREP class? I did a search on
>>>>> RInternal.h and altrep.c but did not find a solution for it. If not,
>>>>> will
>>>>> it be added in the future?
>>>>> 
>>>> 
>>>> Element and region are guaranteed to always be defined and work (for
>>>> altrep and non-altrep INTSXP, REALSXP, LGLSXPs, etc, we currently don't
>>>> have region for STRSXP or VECSXP, I believe). If the altrep class does not
>>>> provide them then default methods will be used, which may be inefficient in
>>>> some cases but will work. Subset is currently a forward looking stub, but
>>>> once implimented, that will also be guaranteed to work for all valid ALTREP
>>>> classes.
>>>> 
>>>> 
>>>>> 
>>>>> 2. Given the diversity of ALTREP classes, what is the best way to loop
>>>>> over
>>>>> an ALTREP object? I hope there can be an all-in-one function which can
>>>>> get
>>>>> the values from a vector as long as at least one of the above functions
>>>>> has
>>>>> been defined, so package developers would not be bothered by tons of
>>>>> `if-else` statement if they want their package to work with ALTREP.
>>>>> Since
>>>>> it seems like there is no such function exist, what could be the best
>>>>> way
>>>>> to do the loop under the current R version?
>>>>> 
>>>> 
>>>> The best way to loop over all SEXPs, which supports both altrep and
>>>> nonaltrep objects is, with the ITERATE_BY_REGION (which has been in R for a
>>>> number of released versions, at least since 3.5.0 I think) and the much
>>>> newer (devel only) ITERATE_BY_REGION_PARTIAL macros defined in
>>>> R_exts/Itermacros.h
>>>> 
>>>> The meaning of the arguments is as follows for ITERATE_BY_REGION_PARTIAL
>>>> are as follows (ITERATE_BY_REGION is the same except no strt, and nfull).
>>>> 
>>>> 
>>>>   - sx - C level variable name of the SEXP to iterate over
>>>>   - px - variable name to use for the pointer populated with data from
>>>>   a region of sx
>>>>   - idx - variable name to use for the "outer", batch counter in the
>>>>   for loop. This will contain the 0-indexed start position of the batch
>>>>   you're currently processing
>>>>   - nb - variable name to use for the current batch size. This will
>>>>   always either be GET_REGION_BUFFSIZE (512), or the number of elements
>>>>   remaining in the vector, whichever is smaller
>>>>   - etype - element (C) type, e.g., int, double, of the data
>>>>   - vtype - vector (access API) type, e.g, INTEGER, REAL
>>>>   - strt - the 0-indexed position in the vector to start iterating
>>>>   - nfull - the total number oif elements to iterate over from the
>>>>   vector
>>>>   - expr - the code to process a single batch (Which will do things to
>>>>   px, typically)
>>>> 
>>>> 
>>>> So code to perform badly implemented not good idea summing of REALSXP
>>>> data might look like
>>>> 
>>>> double sillysum(SEXP x) {
>>>> 
>>>>    double s = 0.0;
>>>> 
>>>>    ITERATE_BY_REGION(x, ptr, ind, nbatch, double, REAL,
>>>>        {
>>>> 
>>>>            for(int i = 0; i < nbatch; i++) { s = s + ptr[i];}
>>>>        })
>>>> 
>>>>     return s;
>>>> }
>>>> 
>>>> For meatier examples of ITERATE_BY_REGION's use in practice you can grep
>>>> the R sources. I know it is used in the implementations of the various
>>>> C-level summaries (summary.c), print and formatting functions, and anyNA.
>>>> 
>>>> Some things to remember
>>>> 
>>>>   - If you have an inner loop like the one above, your total position
>>>>   in the original vector is ind + i
>>>>   - ITERATE_BY_REGION always processes the whole vector, if you need
>>>>   to only do part of it yo'll either need custom breaking for both inner and
>>>>   outer loopsl, or in R-devel you can use ITERATE_BY_REGION_PARTIAL
>>>>   - Don't use the variants ending in 0, all they do is skip over
>>>>   things that are a good idea in the case of non-altreps (and some very
>>>>   specific altreps).
>>>> 
>>>> Hope that helps.
>>>> 
>>>> Best,
>>>> ~G
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> Best,
>>>>> Jiefei
>>>>> 
>>>>>        [[alternative HTML version deleted]]
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Tue Sep 24 07:48:39 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 23 Sep 2019 22:48:39 -0700
Subject: [Rd] What is the best way to loop over an ALTREP vector?
In-Reply-To: <C6BDF92E-31A5-46DA-963D-1D7C73720F95@rud.is>
References: <CAGiFhPN+ncuPMY9UbEO+b0wis0EJ0R9AaWSB0By-CD3fNetO1A@mail.gmail.com>
 <CAD4oTHFhAoeRCu5g15DkLpdRr=PF9hLBHufOrh3CvF8E04qz=A@mail.gmail.com>
 <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
 <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>
 <CAGiFhPP9JhYkM2KryadOOKt2h0bEDQj+RJvD2UScNZyejcNSCw@mail.gmail.com>
 <C6BDF92E-31A5-46DA-963D-1D7C73720F95@rud.is>
Message-ID: <CAD4oTHFEHj+zFd=2qD1mO+88ZFPwLMSuVfcZnPn06zxNoHNenA@mail.gmail.com>

Hi Bob,

Thanks for sending around the link to that. It looks mostly right and looks
like a useful onramp. There are a few things to watch out for though (I've
cc'ed Romain so he's aware of these comments). @romain I hope you taake the
following comments as they are intended, as help rather than attacks.

The largest issue I see is that the contract for Get_region is that it
*populates the
provided buffer with a copy of the data. *That buffer is expected to be
safe to destructively modify, shuffle, etc though I don't know if we are
actually doing that anywhere. As such, if I understand his C++ correctly,
that Get_region method  is not safe and shouldn't be used.

The other point is that Dataptr_or_null is not actually *guaranteed *not to
allocate. The default method returns NULL, but we have no way of preventing
an allocation in a user-defined method, and probably (?) no easy way of
detecting that it is occurring before it causes a bug. That said, Romain is
correct that when you are writing Dataptr_or_null methods you should write
them so that they don't allocate, generally. Basically your methods for
Dataptr_or_null shouldn't allocate, but you also should not write code that
relies on hard assumptions that no one's ever will.

Also, a small nitpick, R's internal mean function doesn't hit Dataptr, it
hits either INTEGER_ELT (which really should probably be a
ITERATE_BY_REGION) or ITERATE_BY_REGION.

Anyway, I hope that helps.
~G






On Mon, Sep 23, 2019 at 6:12 PM Bob Rudis <bob at rud.is> wrote:

> Not sure if you're using just C++ or Rcpp for C++ access but
> https://purrple.cat/blog/2018/10/14/altrep-and-cpp/ has some tips on
> using C++ w/ALTREP.
>
> > On Sep 23, 2019, at 3:17 PM, Wang Jiefei <szwjf08 at gmail.com> wrote:
> >
> > Sorry for post a lot of things, for the first part of code, I copied my
> C++
> > iter macro by mistake(and you can see an explicit type casting). Here is
> > the macro definition from R_exts/Itermacros.h
> >
> > #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
> >
> >                             strt, nfull, expr) do {         \
> >
> > *       const** etype *px = DATAPTR_OR_NULL(sx);           *
>  \
> >
> >       if (px != NULL) {                                      \
> >
> >           R_xlen_t __ibr_n__ = strt + nfull;                        \
> >
> >           R_xlen_t nb = __ibr_n__;                                  \
> >
> >           for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
> >
> >              expr                                            \
> >
> >            }                                                 \
> >
> >       }                                                      \
> >
> >       else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype, vtype,
> > \
> >
> >                                  strt, nfull, expr);        \
> >
> >    } while (0)
> >
> >
> > Best,
> >
> > Jiefei
> >
> > On Mon, Sep 23, 2019 at 3:12 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
> >
> >> Hi Gabriel,
> >>
> >> I have tried the macro and found a small issue, it seems like the macro
> is
> >> written in C and does an implicit type conversion(const void * to const
> int
> >> *), see below. While it is allowed in C, C++ seems not happy with it.
> Is it
> >> possible to add an explicit type casting so that it can be compatible
> with
> >> both language?
> >>
> >>
> >> #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
> >>
> >>                             strt, nfull, expr) do {         \
> >>
> >>       *const etype *px = (const** etype *)DATAPTR_OR_NULL(sx);  *
> >> \
> >>
> >>       if (px != NULL) {                                      \
> >>
> >>           R_xlen_t __ibr_n__ = strt + nfull;                        \
> >>
> >>           R_xlen_t nb = __ibr_n__;                                  \
> >>
> >>           for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
> >>
> >>              expr                                            \
> >>
> >>            }                                                 \
> >>
> >>       }                                                      \
> >>
> >>       else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype,
> >> vtype,       \
> >>
> >>                                   strt, nfull, expr);        \
> >>
> >>    } while (0)
> >>
> >>
> >>  Also, I notice that the element type(etype) and vector type(vtype) has
> >> to be specified in the macro. Since the SEXP is the first argument in
> the
> >> macro, it seems redundant to define etype and vtype for they have to
> match
> >> the type of the SEXP. I'm wondering if this is intentional? Will there
> be a
> >> type-free macro in R in the future? Here is a simple type-free macro I'm
> >> using.
> >>
> >> #define type_free_iter(sx, ptr, ind, nbatch,expr)\
> >>
> >> switch(TYPEOF(sx)){\
> >>
> >> case INTSXP:\
> >>
> >>       ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, INTEGER, expr);\
> >>
> >>       break; \
> >>
> >> case REALSXP:\
> >>
> >>       ITERATE_BY_REGION(sx, ptr, ind, nbatch, double, REAL, expr);\
> >>
> >>       break; \
> >>
> >> case LGLSXP:\
> >>
> >>       ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, LOGICAL, expr);\
> >>
> >>       break; \
> >>
> >> default:\
> >>
> >>       Rf_error("Unknow data type\n"); \
> >>
> >>       break; \
> >>
> >> }
> >>
> >>
> >>
> >> // [[Rcpp::export]]
> >>
> >> double sillysum(SEXP x) {
> >>
> >>       double s = 0.0;
> >>
> >>       type_free_iter(x, ptr, ind, nbatch,
> >>
> >>              {
> >>
> >>                     for (int i = 0; i < nbatch; i++) { s = s + ptr[i]; }
> >>
> >>              });
> >>
> >>              return s;
> >>
> >> }
> >>
> >>
> >>
> >>
> >> Best,
> >>
> >> Jiefei
> >>
> >> On Wed, Aug 28, 2019 at 2:32 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
> >>
> >>> Thank you, Gabriel. The loop macro is very helpful. It is also exciting
> >>> to see that there are lots of changes in ALTREP in R devel version. I
> >>> really appreciate your help!
> >>>
> >>> Best,
> >>> Jiefei
> >>>
> >>> On Wed, Aug 28, 2019 at 7:37 AM Gabriel Becker <gabembecker at gmail.com>
> >>> wrote:
> >>>
> >>>> Jiefei,
> >>>>
> >>>> I've been meaning to write up something about this so hopefully this
> >>>> will be an impetus for me to actually do that, but until then,
> responses
> >>>> inline.
> >>>>
> >>>>
> >>>> On Tue, Aug 27, 2019, 7:22 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
> >>>>
> >>>>> Hi devel team,
> >>>>>
> >>>>> I'm working on C/C++ level ALTREP compatibility for a package. The
> >>>>> package
> >>>>> previously used pointers to access the data of a SEXP, so it would
> not
> >>>>> work
> >>>>> for some ALTREP objects which do not have a pointer. I plan to
> rewrite
> >>>>> the
> >>>>> code and use functions like get_elt, get_region, and get_subset to
> >>>>> access
> >>>>> the values of a vector, so I have a few questions for ALTREP:
> >>>>>
> >>>>> 1. Since an ALTREP do not have to define all of the above
> >>>>> functions(element, region, subset), is there any way to check which
> >>>>> function has been defined for an ALTREP class? I did a search on
> >>>>> RInternal.h and altrep.c but did not find a solution for it. If not,
> >>>>> will
> >>>>> it be added in the future?
> >>>>>
> >>>>
> >>>> Element and region are guaranteed to always be defined and work (for
> >>>> altrep and non-altrep INTSXP, REALSXP, LGLSXPs, etc, we currently
> don't
> >>>> have region for STRSXP or VECSXP, I believe). If the altrep class
> does not
> >>>> provide them then default methods will be used, which may be
> inefficient in
> >>>> some cases but will work. Subset is currently a forward looking stub,
> but
> >>>> once implimented, that will also be guaranteed to work for all valid
> ALTREP
> >>>> classes.
> >>>>
> >>>>
> >>>>>
> >>>>> 2. Given the diversity of ALTREP classes, what is the best way to
> loop
> >>>>> over
> >>>>> an ALTREP object? I hope there can be an all-in-one function which
> can
> >>>>> get
> >>>>> the values from a vector as long as at least one of the above
> functions
> >>>>> has
> >>>>> been defined, so package developers would not be bothered by tons of
> >>>>> `if-else` statement if they want their package to work with ALTREP.
> >>>>> Since
> >>>>> it seems like there is no such function exist, what could be the best
> >>>>> way
> >>>>> to do the loop under the current R version?
> >>>>>
> >>>>
> >>>> The best way to loop over all SEXPs, which supports both altrep and
> >>>> nonaltrep objects is, with the ITERATE_BY_REGION (which has been in R
> for a
> >>>> number of released versions, at least since 3.5.0 I think) and the
> much
> >>>> newer (devel only) ITERATE_BY_REGION_PARTIAL macros defined in
> >>>> R_exts/Itermacros.h
> >>>>
> >>>> The meaning of the arguments is as follows for
> ITERATE_BY_REGION_PARTIAL
> >>>> are as follows (ITERATE_BY_REGION is the same except no strt, and
> nfull).
> >>>>
> >>>>
> >>>>   - sx - C level variable name of the SEXP to iterate over
> >>>>   - px - variable name to use for the pointer populated with data from
> >>>>   a region of sx
> >>>>   - idx - variable name to use for the "outer", batch counter in the
> >>>>   for loop. This will contain the 0-indexed start position of the
> batch
> >>>>   you're currently processing
> >>>>   - nb - variable name to use for the current batch size. This will
> >>>>   always either be GET_REGION_BUFFSIZE (512), or the number of
> elements
> >>>>   remaining in the vector, whichever is smaller
> >>>>   - etype - element (C) type, e.g., int, double, of the data
> >>>>   - vtype - vector (access API) type, e.g, INTEGER, REAL
> >>>>   - strt - the 0-indexed position in the vector to start iterating
> >>>>   - nfull - the total number oif elements to iterate over from the
> >>>>   vector
> >>>>   - expr - the code to process a single batch (Which will do things to
> >>>>   px, typically)
> >>>>
> >>>>
> >>>> So code to perform badly implemented not good idea summing of REALSXP
> >>>> data might look like
> >>>>
> >>>> double sillysum(SEXP x) {
> >>>>
> >>>>    double s = 0.0;
> >>>>
> >>>>    ITERATE_BY_REGION(x, ptr, ind, nbatch, double, REAL,
> >>>>        {
> >>>>
> >>>>            for(int i = 0; i < nbatch; i++) { s = s + ptr[i];}
> >>>>        })
> >>>>
> >>>>     return s;
> >>>> }
> >>>>
> >>>> For meatier examples of ITERATE_BY_REGION's use in practice you can
> grep
> >>>> the R sources. I know it is used in the implementations of the various
> >>>> C-level summaries (summary.c), print and formatting functions, and
> anyNA.
> >>>>
> >>>> Some things to remember
> >>>>
> >>>>   - If you have an inner loop like the one above, your total position
> >>>>   in the original vector is ind + i
> >>>>   - ITERATE_BY_REGION always processes the whole vector, if you need
> >>>>   to only do part of it yo'll either need custom breaking for both
> inner and
> >>>>   outer loopsl, or in R-devel you can use ITERATE_BY_REGION_PARTIAL
> >>>>   - Don't use the variants ending in 0, all they do is skip over
> >>>>   things that are a good idea in the case of non-altreps (and some
> very
> >>>>   specific altreps).
> >>>>
> >>>> Hope that helps.
> >>>>
> >>>> Best,
> >>>> ~G
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>> Best,
> >>>>> Jiefei
> >>>>>
> >>>>>        [[alternative HTML version deleted]]
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>>
> >>>>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Sep 24 09:57:46 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 24 Sep 2019 09:57:46 +0200
Subject: [Rd] What is the best way to loop over an ALTREP vector?
In-Reply-To: <CAD4oTHFEHj+zFd=2qD1mO+88ZFPwLMSuVfcZnPn06zxNoHNenA@mail.gmail.com>
References: <CAGiFhPN+ncuPMY9UbEO+b0wis0EJ0R9AaWSB0By-CD3fNetO1A@mail.gmail.com>
 <CAD4oTHFhAoeRCu5g15DkLpdRr=PF9hLBHufOrh3CvF8E04qz=A@mail.gmail.com>
 <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
 <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>
 <CAGiFhPP9JhYkM2KryadOOKt2h0bEDQj+RJvD2UScNZyejcNSCw@mail.gmail.com>
 <C6BDF92E-31A5-46DA-963D-1D7C73720F95@rud.is>
 <CAD4oTHFEHj+zFd=2qD1mO+88ZFPwLMSuVfcZnPn06zxNoHNenA@mail.gmail.com>
Message-ID: <44b4a9f7-c99a-d2ef-792d-b492e52fb9b5@insa-toulouse.fr>

Le 24/09/2019 ? 07:48, Gabriel Becker a ?crit?:
> Also, a small nitpick, R's internal mean function doesn't hit Dataptr, it
> hits either INTEGER_ELT (which really should probably be a
> ITERATE_BY_REGION) or ITERATE_BY_REGION.
>
Even if it is not the main point of this thread, I was wondering if 
mean() could take an advantage of sum() (which handles ALTREP in 
efficient way) to be defined as mean(x)=sum(x)/length(x)? Currently, 
sum(1:1e14) is almost instantaneous while mean(1:1e14) is very long.

Best Serguei.


From rom@|n @end|ng |rom r@tud|o@com  Tue Sep 24 10:39:13 2019
From: rom@|n @end|ng |rom r@tud|o@com (Romain Francois)
Date: Tue, 24 Sep 2019 10:39:13 +0200
Subject: [Rd] What is the best way to loop over an ALTREP vector?
In-Reply-To: <CAD4oTHFEHj+zFd=2qD1mO+88ZFPwLMSuVfcZnPn06zxNoHNenA@mail.gmail.com>
References: <CAGiFhPN+ncuPMY9UbEO+b0wis0EJ0R9AaWSB0By-CD3fNetO1A@mail.gmail.com>
 <CAD4oTHFhAoeRCu5g15DkLpdRr=PF9hLBHufOrh3CvF8E04qz=A@mail.gmail.com>
 <CAGiFhPMy92bcvkvvjoQ64jZnQK+Erc==qmG8tiy70ri6qYOu_w@mail.gmail.com>
 <CAGiFhPMLhXJKyvRiHsf-L-NBdDc0f-UoWadXvJzCiaMX-GTdvQ@mail.gmail.com>
 <CAGiFhPP9JhYkM2KryadOOKt2h0bEDQj+RJvD2UScNZyejcNSCw@mail.gmail.com>
 <C6BDF92E-31A5-46DA-963D-1D7C73720F95@rud.is>
 <CAD4oTHFEHj+zFd=2qD1mO+88ZFPwLMSuVfcZnPn06zxNoHNenA@mail.gmail.com>
Message-ID: <46FC2D32-15D1-45D8-8666-4C101D0FCDAD@rstudio.com>

Thanks for these comments. I should alter the blog post or write some follow up. 

This was a weekend blog post that only benefited from a short time of research research. I?m glad people find it useful, but I?m sure a detailed documentation of the features from the authors would be more useful. 

Romain

> Le 24 sept. 2019 ? 07:48, Gabriel Becker <gabembecker at gmail.com> a ?crit :
> 
> Hi Bob,
> 
> Thanks for sending around the link to that. It looks mostly right and looks
> like a useful onramp. There are a few things to watch out for though (I've
> cc'ed Romain so he's aware of these comments). @romain I hope you taake the
> following comments as they are intended, as help rather than attacks.
> 
> The largest issue I see is that the contract for Get_region is that it
> *populates the
> provided buffer with a copy of the data. *That buffer is expected to be
> safe to destructively modify, shuffle, etc though I don't know if we are
> actually doing that anywhere. As such, if I understand his C++ correctly,
> that Get_region method  is not safe and shouldn't be used.
> 
> The other point is that Dataptr_or_null is not actually *guaranteed *not to
> allocate. The default method returns NULL, but we have no way of preventing
> an allocation in a user-defined method, and probably (?) no easy way of
> detecting that it is occurring before it causes a bug. That said, Romain is
> correct that when you are writing Dataptr_or_null methods you should write
> them so that they don't allocate, generally. Basically your methods for
> Dataptr_or_null shouldn't allocate, but you also should not write code that
> relies on hard assumptions that no one's ever will.
> 
> Also, a small nitpick, R's internal mean function doesn't hit Dataptr, it
> hits either INTEGER_ELT (which really should probably be a
> ITERATE_BY_REGION) or ITERATE_BY_REGION.
> 
> Anyway, I hope that helps.
> ~G
> 
> 
> 
> 
> 
> 
> On Mon, Sep 23, 2019 at 6:12 PM Bob Rudis <bob at rud.is <mailto:bob at rud.is>> wrote:
> 
>> Not sure if you're using just C++ or Rcpp for C++ access but
>> https://purrple.cat/blog/2018/10/14/altrep-and-cpp/ has some tips on
>> using C++ w/ALTREP.
>> 
>>> On Sep 23, 2019, at 3:17 PM, Wang Jiefei <szwjf08 at gmail.com> wrote:
>>> 
>>> Sorry for post a lot of things, for the first part of code, I copied my
>> C++
>>> iter macro by mistake(and you can see an explicit type casting). Here is
>>> the macro definition from R_exts/Itermacros.h
>>> 
>>> #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
>>> 
>>>                            strt, nfull, expr) do {         \
>>> 
>>> *       const** etype *px = DATAPTR_OR_NULL(sx);           *
>> \
>>> 
>>>      if (px != NULL) {                                      \
>>> 
>>>          R_xlen_t __ibr_n__ = strt + nfull;                        \
>>> 
>>>          R_xlen_t nb = __ibr_n__;                                  \
>>> 
>>>          for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
>>> 
>>>             expr                                            \
>>> 
>>>           }                                                 \
>>> 
>>>      }                                                      \
>>> 
>>>      else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype, vtype,
>>> \
>>> 
>>>                                 strt, nfull, expr);        \
>>> 
>>>   } while (0)
>>> 
>>> 
>>> Best,
>>> 
>>> Jiefei
>>> 
>>> On Mon, Sep 23, 2019 at 3:12 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>> 
>>>> Hi Gabriel,
>>>> 
>>>> I have tried the macro and found a small issue, it seems like the macro
>> is
>>>> written in C and does an implicit type conversion(const void * to const
>> int
>>>> *), see below. While it is allowed in C, C++ seems not happy with it.
>> Is it
>>>> possible to add an explicit type casting so that it can be compatible
>> with
>>>> both language?
>>>> 
>>>> 
>>>> #define ITERATE_BY_REGION_PARTIAL(sx, px, idx, nb, etype, vtype,     \
>>>> 
>>>>                            strt, nfull, expr) do {         \
>>>> 
>>>>      *const etype *px = (const** etype *)DATAPTR_OR_NULL(sx);  *
>>>> \
>>>> 
>>>>      if (px != NULL) {                                      \
>>>> 
>>>>          R_xlen_t __ibr_n__ = strt + nfull;                        \
>>>> 
>>>>          R_xlen_t nb = __ibr_n__;                                  \
>>>> 
>>>>          for (R_xlen_t idx = strt; idx < __ibr_n__; idx += nb) {   \
>>>> 
>>>>             expr                                            \
>>>> 
>>>>           }                                                 \
>>>> 
>>>>      }                                                      \
>>>> 
>>>>      else ITERATE_BY_REGION_PARTIAL0(sx, px, idx, nb, etype,
>>>> vtype,       \
>>>> 
>>>>                                  strt, nfull, expr);        \
>>>> 
>>>>   } while (0)
>>>> 
>>>> 
>>>> Also, I notice that the element type(etype) and vector type(vtype) has
>>>> to be specified in the macro. Since the SEXP is the first argument in
>> the
>>>> macro, it seems redundant to define etype and vtype for they have to
>> match
>>>> the type of the SEXP. I'm wondering if this is intentional? Will there
>> be a
>>>> type-free macro in R in the future? Here is a simple type-free macro I'm
>>>> using.
>>>> 
>>>> #define type_free_iter(sx, ptr, ind, nbatch,expr)\
>>>> 
>>>> switch(TYPEOF(sx)){\
>>>> 
>>>> case INTSXP:\
>>>> 
>>>>      ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, INTEGER, expr);\
>>>> 
>>>>      break; \
>>>> 
>>>> case REALSXP:\
>>>> 
>>>>      ITERATE_BY_REGION(sx, ptr, ind, nbatch, double, REAL, expr);\
>>>> 
>>>>      break; \
>>>> 
>>>> case LGLSXP:\
>>>> 
>>>>      ITERATE_BY_REGION(sx, ptr, ind, nbatch, int, LOGICAL, expr);\
>>>> 
>>>>      break; \
>>>> 
>>>> default:\
>>>> 
>>>>      Rf_error("Unknow data type\n"); \
>>>> 
>>>>      break; \
>>>> 
>>>> }
>>>> 
>>>> 
>>>> 
>>>> // [[Rcpp::export]]
>>>> 
>>>> double sillysum(SEXP x) {
>>>> 
>>>>      double s = 0.0;
>>>> 
>>>>      type_free_iter(x, ptr, ind, nbatch,
>>>> 
>>>>             {
>>>> 
>>>>                    for (int i = 0; i < nbatch; i++) { s = s + ptr[i]; }
>>>> 
>>>>             });
>>>> 
>>>>             return s;
>>>> 
>>>> }
>>>> 
>>>> 
>>>> 
>>>> 
>>>> Best,
>>>> 
>>>> Jiefei
>>>> 
>>>> On Wed, Aug 28, 2019 at 2:32 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>>> 
>>>>> Thank you, Gabriel. The loop macro is very helpful. It is also exciting
>>>>> to see that there are lots of changes in ALTREP in R devel version. I
>>>>> really appreciate your help!
>>>>> 
>>>>> Best,
>>>>> Jiefei
>>>>> 
>>>>> On Wed, Aug 28, 2019 at 7:37 AM Gabriel Becker <gabembecker at gmail.com>
>>>>> wrote:
>>>>> 
>>>>>> Jiefei,
>>>>>> 
>>>>>> I've been meaning to write up something about this so hopefully this
>>>>>> will be an impetus for me to actually do that, but until then,
>> responses
>>>>>> inline.
>>>>>> 
>>>>>> 
>>>>>> On Tue, Aug 27, 2019, 7:22 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>>>>> 
>>>>>>> Hi devel team,
>>>>>>> 
>>>>>>> I'm working on C/C++ level ALTREP compatibility for a package. The
>>>>>>> package
>>>>>>> previously used pointers to access the data of a SEXP, so it would
>> not
>>>>>>> work
>>>>>>> for some ALTREP objects which do not have a pointer. I plan to
>> rewrite
>>>>>>> the
>>>>>>> code and use functions like get_elt, get_region, and get_subset to
>>>>>>> access
>>>>>>> the values of a vector, so I have a few questions for ALTREP:
>>>>>>> 
>>>>>>> 1. Since an ALTREP do not have to define all of the above
>>>>>>> functions(element, region, subset), is there any way to check which
>>>>>>> function has been defined for an ALTREP class? I did a search on
>>>>>>> RInternal.h and altrep.c but did not find a solution for it. If not,
>>>>>>> will
>>>>>>> it be added in the future?
>>>>>>> 
>>>>>> 
>>>>>> Element and region are guaranteed to always be defined and work (for
>>>>>> altrep and non-altrep INTSXP, REALSXP, LGLSXPs, etc, we currently
>> don't
>>>>>> have region for STRSXP or VECSXP, I believe). If the altrep class
>> does not
>>>>>> provide them then default methods will be used, which may be
>> inefficient in
>>>>>> some cases but will work. Subset is currently a forward looking stub,
>> but
>>>>>> once implimented, that will also be guaranteed to work for all valid
>> ALTREP
>>>>>> classes.
>>>>>> 
>>>>>> 
>>>>>>> 
>>>>>>> 2. Given the diversity of ALTREP classes, what is the best way to
>> loop
>>>>>>> over
>>>>>>> an ALTREP object? I hope there can be an all-in-one function which
>> can
>>>>>>> get
>>>>>>> the values from a vector as long as at least one of the above
>> functions
>>>>>>> has
>>>>>>> been defined, so package developers would not be bothered by tons of
>>>>>>> `if-else` statement if they want their package to work with ALTREP.
>>>>>>> Since
>>>>>>> it seems like there is no such function exist, what could be the best
>>>>>>> way
>>>>>>> to do the loop under the current R version?
>>>>>>> 
>>>>>> 
>>>>>> The best way to loop over all SEXPs, which supports both altrep and
>>>>>> nonaltrep objects is, with the ITERATE_BY_REGION (which has been in R
>> for a
>>>>>> number of released versions, at least since 3.5.0 I think) and the
>> much
>>>>>> newer (devel only) ITERATE_BY_REGION_PARTIAL macros defined in
>>>>>> R_exts/Itermacros.h
>>>>>> 
>>>>>> The meaning of the arguments is as follows for
>> ITERATE_BY_REGION_PARTIAL
>>>>>> are as follows (ITERATE_BY_REGION is the same except no strt, and
>> nfull).
>>>>>> 
>>>>>> 
>>>>>>  - sx - C level variable name of the SEXP to iterate over
>>>>>>  - px - variable name to use for the pointer populated with data from
>>>>>>  a region of sx
>>>>>>  - idx - variable name to use for the "outer", batch counter in the
>>>>>>  for loop. This will contain the 0-indexed start position of the
>> batch
>>>>>>  you're currently processing
>>>>>>  - nb - variable name to use for the current batch size. This will
>>>>>>  always either be GET_REGION_BUFFSIZE (512), or the number of
>> elements
>>>>>>  remaining in the vector, whichever is smaller
>>>>>>  - etype - element (C) type, e.g., int, double, of the data
>>>>>>  - vtype - vector (access API) type, e.g, INTEGER, REAL
>>>>>>  - strt - the 0-indexed position in the vector to start iterating
>>>>>>  - nfull - the total number oif elements to iterate over from the
>>>>>>  vector
>>>>>>  - expr - the code to process a single batch (Which will do things to
>>>>>>  px, typically)
>>>>>> 
>>>>>> 
>>>>>> So code to perform badly implemented not good idea summing of REALSXP
>>>>>> data might look like
>>>>>> 
>>>>>> double sillysum(SEXP x) {
>>>>>> 
>>>>>>   double s = 0.0;
>>>>>> 
>>>>>>   ITERATE_BY_REGION(x, ptr, ind, nbatch, double, REAL,
>>>>>>       {
>>>>>> 
>>>>>>           for(int i = 0; i < nbatch; i++) { s = s + ptr[i];}
>>>>>>       })
>>>>>> 
>>>>>>    return s;
>>>>>> }
>>>>>> 
>>>>>> For meatier examples of ITERATE_BY_REGION's use in practice you can
>> grep
>>>>>> the R sources. I know it is used in the implementations of the various
>>>>>> C-level summaries (summary.c), print and formatting functions, and
>> anyNA.
>>>>>> 
>>>>>> Some things to remember
>>>>>> 
>>>>>>  - If you have an inner loop like the one above, your total position
>>>>>>  in the original vector is ind + i
>>>>>>  - ITERATE_BY_REGION always processes the whole vector, if you need
>>>>>>  to only do part of it yo'll either need custom breaking for both
>> inner and
>>>>>>  outer loopsl, or in R-devel you can use ITERATE_BY_REGION_PARTIAL
>>>>>>  - Don't use the variants ending in 0, all they do is skip over
>>>>>>  things that are a good idea in the case of non-altreps (and some
>> very
>>>>>>  specific altreps).
>>>>>> 
>>>>>> Hope that helps.
>>>>>> 
>>>>>> Best,
>>>>>> ~G
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>>> Best,
>>>>>>> Jiefei
>>>>>>> 
>>>>>>>       [[alternative HTML version deleted]]
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>> 
>>>>>> 
>>> 
>>>      [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>

	[[alternative HTML version deleted]]


From berger @end|ng |rom mp||b-ber||n@mpg@de  Tue Sep 24 19:31:51 2019
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Tue, 24 Sep 2019 19:31:51 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <23937.63728.859845.525356@stat.math.ethz.ch>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
 <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
 <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>
 <94e5fbbe-6f03-9b69-8abf-ebeced33a016@mpiib-berlin.mpg.de>
 <23937.60510.182530.176708@stat.math.ethz.ch>
 <23937.63728.859845.525356@stat.math.ethz.ch>
Message-ID: <2077d941-9a2e-8acc-3125-cf10a7fe8deb@mpiib-berlin.mpg.de>

Dear Martin,

thanks a lot for looking into this. Of course you were right that the 
fix was not complete - I apologize for not having tested what I believed 
to be the solution.

My comments on the S4 classes seemed to stem from a misunderstanding on 
my side. I now believe to understand that S4 classes that inherit from R 
base object types might dispatch Ops for the same object types.

If the base object value of such S4 classes is unset and therefore 
empty, this empty value will be passed on to e.g. Ops.data.frame where 
it would trigger the same issue as e.g. logical(0).

setClass("MyClass", slots = list(x="numeric", label="character"), 
contains = "numeric")
a = new("MyClass", x=3, label="FOO")
a at .Data

 > logical(0)

a == data.frame(a=1:3)
# error

I understand that this is all as expected and the error should most 
likely disappear with the fix you submitted for other 0-extent cases.

Thanks again and best regards,

Hilmar

Am 18/09/2019 um 11:29 schrieb Martin Maechler:
>>>>>> Martin Maechler
>>>>>>      on Wed, 18 Sep 2019 10:35:42 +0200 writes:
>    >>>>> Hilmar Berger
>    >>>>>     on Sat, 14 Sep 2019 13:31:27 +0200 writes:
>
>         >> Dear all,
>         >> I did some more tests regarding the == operator in Ops.data.frame (see
>         >> below).? All tests done in R 3.6.1 (x86_64-w64-mingw32).
>
>         >> I find that errors are thrown also when comparing a zero length
>         >> data.frame to atomic objects with length>0 which should be a valid case
>         >> according to the documentation. This can be traced to a check in the
>         >> last line of Ops.data.frame which tests for the presence of an empty
>         >> result value (i.e. list() ) but does not handle a list of empty values
>         >> (i.e. list(logical(0))) which in fact is generated in those cases.
>
>         >> There  is a simple fix (see also below).
>
>      > I'm pretty sure what you write above is wrong:  For some reason
>      > you must have changed more in your own version of Ops.data.frame :
>
>      > Because there's a line
>
>      > value <- unlist(value, ...)
>
>      > there, value is *not*  list(logical(0)) there, but rather  logical(0)
>      > and then indeed, your proposed line change (at the end of Ops.data.frame)
>      > has no effect for the examples you give.
>
> On the other hand, there *is* a simple "fix" at the end of
> Ops.data.frame()  which makes all your examples "work" (i.e. not
> give an error), namely
>
> ----------------------------------------------------------------------
>
> @@ -1685,7 +1684,7 @@
>       else { ## 'Logic' ("&","|")  and  'Compare' ("==",">","<","!=","<=",">=") :
>   	value <- unlist(value, recursive = FALSE, use.names = FALSE)
>   	matrix(if(is.null(value)) logical() else value,
> -	       nrow = nr, dimnames = list(rn,cn))
> +	       nrow = nr, ncol = length(cn), dimnames = list(rn,cn))
>       }
>
> ----------------------------------------------------------------------
>
> i.e., explicitly specifying 'ncol' compatibly with the column names.
> However, I guess that this change would *not* signal errors
> where it *should* and so am *not* (yet?) proposing to "do" it.
>
> Another remark, on  S4  which you've raised several times:
> As you may know that the 'Matrix' package (part of every
> "regular" R installation) uses S4 "everywhere" and it does
> define many methods for its Matrix classes, all in source file  Matrix/R/Ops.R
> the development version (in svn / subversion) being online on R-forge here:
>
>    https://r-forge.r-project.org/scm/viewvc.php/pkg/Matrix/R/Ops.R?view=markup&root=matrix
>
> and "of course", there we define S4 group methods for Ops all
> the time, and (almost) never S3 ones...
> [[but I hope you don't want to start combining data frames
>   with Matrix package matrices, now !]]
>
> Martin Maechler
> ETH Zurich  and  R Core Team


From bbo|ker @end|ng |rom gm@||@com  Wed Sep 25 02:09:55 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 24 Sep 2019 20:09:55 -0400
Subject: [Rd] depending on orphaned packages?
Message-ID: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>

SuppDists is orphaned on CRAN (and has been since 2013).

https://cran.r-project.org/web/checks/check_results_.html

 Oddly, the simulate method for the inverse.gaussian family
[inverse.gaussian()$simulate] depends (in a loose sense) on SuppDists
(it fails if the SuppDists namespace is not available:

if (!requireNamespace("SuppDists", quietly = TRUE))
        stop("need CRAN package 'SuppDists' for simulation from the
'inverse.gaussian' family")


  The statmod package also implements inverse gaussian d/p/q/r functions
<https://journal.r-project.org/archive/2016-1/giner-smyth.pdf>.  It is
lightweight (depends on R >= 3.0.0, imports only base packages [stats
and graphics]) and has been around for a long time (archived versions on
CRAN go back to 2003).

  Would it make sense to replace the call to SuppDists::rinvGauss with a
corresponding call to statmod::rinvgauss ?  Would a patch be considered?

  Ben Bolker


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Sep 25 09:15:54 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 25 Sep 2019 09:15:54 +0200
Subject: [Rd] '==' operator: inconsistency in data.frame(...) == NULL
In-Reply-To: <2077d941-9a2e-8acc-3125-cf10a7fe8deb@mpiib-berlin.mpg.de>
References: <9075d086-7945-b759-f311-765d626b7a61@mpiib-berlin.mpg.de>
 <23928.43189.410927.15494@stat.math.ethz.ch>
 <c21fa68d-00da-dcc1-6390-dce52c889748@mpiib-berlin.mpg.de>
 <f144303d-0fa6-7827-bca3-2587a43c3484@mpiib-berlin.mpg.de>
 <1bbabc36-43c8-aad6-4a08-b310d13c8938@mpiib-berlin.mpg.de>
 <94e5fbbe-6f03-9b69-8abf-ebeced33a016@mpiib-berlin.mpg.de>
 <23937.60510.182530.176708@stat.math.ethz.ch>
 <23937.63728.859845.525356@stat.math.ethz.ch>
 <2077d941-9a2e-8acc-3125-cf10a7fe8deb@mpiib-berlin.mpg.de>
Message-ID: <23947.5162.267570.590918@stat.math.ethz.ch>

>>>>> Hilmar Berger 
>>>>>     on Tue, 24 Sep 2019 19:31:51 +0200 writes:

    > Dear Martin,
    > thanks a lot for looking into this. Of course you were right that the 
    > fix was not complete - I apologize for not having tested what I believed 
    > to be the solution.

    > My comments on the S4 classes seemed to stem from a misunderstanding on 
    > my side. I now believe to understand that S4 classes that inherit from R 
    > base object types might dispatch Ops for the same object types.

    > If the base object value of such S4 classes is unset and therefore 
    > empty, this empty value will be passed on to e.g. Ops.data.frame where 
    > it would trigger the same issue as e.g. logical(0).

    > setClass("MyClass", slots = list(x="numeric", label="character"), 
    > contains = "numeric")
    > a = new("MyClass", x=3, label="FOO")
    > a at .Data

    >> logical(0)

    > a == data.frame(a=1:3)
    > # error

    > I understand that this is all as expected and the error should most 
    > likely disappear with the fix you submitted for other 0-extent cases.


    > Thanks again and best regards,
    > Hilmar

You are welcome!
Indeed, I had modified code in R-devel that makes these Ops work with many
0-extent data frames (compatibly with corresponding 0-extent
matrices).
Thank you, Hilmar!

In addition I confirm that indeed comparison with S4 objects as
above now works too :


R Under development (unstable) (2019-09-23 r77210) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

  ## {learn: you can use the return value of setClass() !}

  MY  <- setClass("MyClass", slots = list(x="numeric",label="character"), 
                             contains = "numeric")
  a <- MY(x=pi, label="FOO")
  D3 <- data.frame(a=1:3)

> identical(D3 == a, D3 == logical())
[1] TRUE
> 

Best,
Martin

    > Am 18/09/2019 um 11:29 schrieb Martin Maechler:
    >>>>>>> Martin Maechler
    >>>>>>> on Wed, 18 Sep 2019 10:35:42 +0200 writes:
    >> >>>>> Hilmar Berger
    >> >>>>>     on Sat, 14 Sep 2019 13:31:27 +0200 writes:
    >> 
    >> >> Dear all,
    >> >> I did some more tests regarding the == operator in Ops.data.frame (see
    >> >> below).? All tests done in R 3.6.1 (x86_64-w64-mingw32).
    >> 
    >> >> I find that errors are thrown also when comparing a zero length
    >> >> data.frame to atomic objects with length>0 which should be a valid case
    >> >> according to the documentation. This can be traced to a check in the
    >> >> last line of Ops.data.frame which tests for the presence of an empty
    >> >> result value (i.e. list() ) but does not handle a list of empty values
    >> >> (i.e. list(logical(0))) which in fact is generated in those cases.
    >> 
    >> >> There  is a simple fix (see also below).
    >> 
    >> > I'm pretty sure what you write above is wrong:  For some reason
    >> > you must have changed more in your own version of Ops.data.frame :
    >> 
    >> > Because there's a line
    >> 
    >> > value <- unlist(value, ...)
    >> 
    >> > there, value is *not*  list(logical(0)) there, but rather  logical(0)
    >> > and then indeed, your proposed line change (at the end of Ops.data.frame)
    >> > has no effect for the examples you give.
    >> 
    >> On the other hand, there *is* a simple "fix" at the end of
    >> Ops.data.frame()  which makes all your examples "work" (i.e. not
    >> give an error), namely
    >> 
    >> ----------------------------------------------------------------------
    >> 
    >> @@ -1685,7 +1684,7 @@
    >> else { ## 'Logic' ("&","|")  and  'Compare' ("==",">","<","!=","<=",">=") :
    >> value <- unlist(value, recursive = FALSE, use.names = FALSE)
    >> matrix(if(is.null(value)) logical() else value,
    >> -	       nrow = nr, dimnames = list(rn,cn))
    >> +	       nrow = nr, ncol = length(cn), dimnames = list(rn,cn))
    >> }
    >> 
    >> ----------------------------------------------------------------------
    >> 
    >> i.e., explicitly specifying 'ncol' compatibly with the column names.
    >> However, I guess that this change would *not* signal errors
    >> where it *should* and so am *not* (yet?) proposing to "do" it.
    >> 
    >> Another remark, on  S4  which you've raised several times:
    >> As you may know that the 'Matrix' package (part of every
    >> "regular" R installation) uses S4 "everywhere" and it does
    >> define many methods for its Matrix classes, all in source file  Matrix/R/Ops.R
    >> the development version (in svn / subversion) being online on R-forge here:
    >> 
    >> https://r-forge.r-project.org/scm/viewvc.php/pkg/Matrix/R/Ops.R?view=markup&root=matrix
    >> 
    >> and "of course", there we define S4 group methods for Ops all
    >> the time, and (almost) never S3 ones...
    >> [[but I hope you don't want to start combining data frames
    >> with Matrix package matrices, now !]]
    >> 
    >> Martin Maechler
    >> ETH Zurich  and  R Core Team


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Sep 25 09:26:01 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 25 Sep 2019 09:26:01 +0200
Subject: [Rd] depending on orphaned packages?
In-Reply-To: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>
References: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>
Message-ID: <23947.5769.742626.892720@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Tue, 24 Sep 2019 20:09:55 -0400 writes:

    > SuppDists is orphaned on CRAN (and has been since 2013).
    > https://cran.r-project.org/web/checks/check_results_.html

    > Oddly, the simulate method for the inverse.gaussian family
    > [inverse.gaussian()$simulate] depends (in a loose sense) on SuppDists
    > (it fails if the SuppDists namespace is not available:

    > if (!requireNamespace("SuppDists", quietly = TRUE))
    > stop("need CRAN package 'SuppDists' for simulation from the
    > 'inverse.gaussian' family")


    > The statmod package also implements inverse gaussian d/p/q/r functions
    > <https://journal.r-project.org/archive/2016-1/giner-smyth.pdf>.  It is
    > lightweight (depends on R >= 3.0.0, imports only base packages [stats
    > and graphics]) and has been around for a long time (archived versions on
    > CRAN go back to 2003).

    > Would it make sense to replace the call to SuppDists::rinvGauss with a
    > corresponding call to statmod::rinvgauss ?  Would a patch be considered?

    > Ben Bolker

I'd say "yes" & "yes".

"Base" code weekly depending on CRAN packages (apart from
formally 'Recommended' ones)  is somewhat sub-optimal in any
case, ((but possibly still the best thing, given reality
        [maintenance efforts, copyrights, ...])),
but your proposal seems a  "uniformly not worse"  change
((and I have very much liked delving into parts of Gordon
  Smyth's textbook on GLMs as a really nice mixture / in-between
  of rigorous math and applied stats))

Martin Maechler
ETH Zurich and R Core


From morg@n@em@||box @end|ng |rom gm@||@com  Fri Sep 27 12:35:17 2019
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Fri, 27 Sep 2019 11:35:17 +0100
Subject: [Rd] Evaluate part of an expression at C level
Message-ID: <CAL0QV_NQOJ4KdyTs60wUQ3wuC8+4zyCOE=+xC9n+b7jFBE221g@mail.gmail.com>

Hi,

I am wondering if the below is possible?
Let's assume I have the following expression:

1:10 < 5

Is there a way at the R C API level to only evaluate the 5th element (i.e 5
< 5) instead of evaluating the whole expression and then select the 5th
element in the logical vector?

Thank you
Best regards
Morgan

	[[alternative HTML version deleted]]


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Fri Sep 27 12:59:12 2019
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Fri, 27 Sep 2019 20:59:12 +1000
Subject: [Rd] Evaluate part of an expression at C level
In-Reply-To: <CAL0QV_NQOJ4KdyTs60wUQ3wuC8+4zyCOE=+xC9n+b7jFBE221g@mail.gmail.com>
References: <CAL0QV_NQOJ4KdyTs60wUQ3wuC8+4zyCOE=+xC9n+b7jFBE221g@mail.gmail.com>
Message-ID: <CAJmOi+OOVwBhBRsfZ-nHiG98J+4VsuL+Xx6Xg_7wQSHtVc+WSw@mail.gmail.com>

You may be trying to do something similar to hutilscpp::which_first(x < 5)
which does most of its work at the R level. That is notice an expression is
of the form lhs operator rhs then evaluate each element of lhs separately




On Fri, 27 Sep 2019 at 8:35 pm, Morgan Morgan <morgan.emailbox at gmail.com>
wrote:

> Hi,
>
> I am wondering if the below is possible?
> Let's assume I have the following expression:
>
> 1:10 < 5
>
> Is there a way at the R C API level to only evaluate the 5th element (i.e 5
> < 5) instead of evaluating the whole expression and then select the 5th
> element in the logical vector?
>
> Thank you
> Best regards
> Morgan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Sep 27 13:17:25 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 27 Sep 2019 12:17:25 +0100
Subject: [Rd] Evaluate part of an expression at C level
In-Reply-To: <CAL0QV_NQOJ4KdyTs60wUQ3wuC8+4zyCOE=+xC9n+b7jFBE221g@mail.gmail.com>
References: <CAL0QV_NQOJ4KdyTs60wUQ3wuC8+4zyCOE=+xC9n+b7jFBE221g@mail.gmail.com>
Message-ID: <CABtg=Kk7wg5J92-exeXnomP=0=UFK7kB7PNWCJ5f56TUNsbQVw@mail.gmail.com>

Yes, you can manipulate the language object, and replace the the 1:10
with its own 5. element, and then call eval on the modified
expression. This can be simple if you know the structure of the
expression well, and difficult otherwise.

It goes like this:

SEXP lang_test(SEXP expr, SEXP idx, SEXP idxcall, SEXP env) {
  SEXP idxcall2 = PROTECT(duplicate(idxcall));
  SEXP expr2 = PROTECT(duplicate(expr));
  SETCADR(idxcall2, CADR(expr));
  SETCADDR(idxcall2, idx);
  SEXP elem = PROTECT(Rf_eval(idxcall2, env));
  SETCADR(expr2, elem);
  SEXP result = PROTECT(Rf_eval(expr2, env));
  UNPROTECT(4);
  return result;
}

You need to add some type and index checking, to make sure that expr
is a language object and has the proper length, etc.

You can call it like this:

langtest <- function(expr, idx) {
  .Call(c_lang_test, expr, idx, as.call(list(`[`, 1:10, 1)), environment())
}

We pass an indexing call to do the indexing, for simplicity, this also
supports S3 dispatch, etc.

Gabor

On Fri, Sep 27, 2019 at 11:35 AM Morgan Morgan
<morgan.emailbox at gmail.com> wrote:
>
> Hi,
>
> I am wondering if the below is possible?
> Let's assume I have the following expression:
>
> 1:10 < 5
>
> Is there a way at the R C API level to only evaluate the 5th element (i.e 5
> < 5) instead of evaluating the whole expression and then select the 5th
> element in the logical vector?
>
> Thank you
> Best regards
> Morgan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |r|end|y @end|ng |rom yorku@c@  Fri Sep 27 15:18:16 2019
From: |r|end|y @end|ng |rom yorku@c@ (Michael Friendly)
Date: Fri, 27 Sep 2019 09:18:16 -0400
Subject: [Rd] passing extra arguments to devtools::build
Message-ID: <00dcb8c4-50c5-6728-343b-98619c42797b@yorku.ca>

This question was posed on SO : 
https://stackoverflow.com/questions/58118495/passing-extra-argumenets-to-devtoolsbuild 
but there has been no useful reply.

Something seems to have changed in the |devtools|package, so that the 
following commands, that used to run now give an error I can't decipher:

|>Sys.setenv(R_GSCMD="C:/Program 
Files/gs/gs9.21/bin/gswin64c.exe")>devtools::build(args 
=c('--resave-data','--compact-vignettes="gs+qpdf"'))The 
filename,directory name,or volume label syntax is incorrect. Error 
in(function(command =NULL,args =character(),error_on_status 
=TRUE,:System command error|

I've tried other alternatives with other |devtools| commands, like just 
passing a single argument, but still get the same error

|args ='--compact-vignettes="gs+qpdf"'devtools::check_win_devel(args=args)|

I'm using devtools 2.2.0, under R 3.5.2

-- 
Michael Friendly     Email: friendly AT yorku DOT ca
Professor, Psychology Dept. & Chair, ASA Statistical Graphics Section
York University      Voice: 416 736-2100 x66249
4700 Keele Street    Web: http://www.datavis.ca | @datavisFriendly
Toronto, ONT  M3J 1P3 CANADA


	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Sep 27 15:33:20 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 27 Sep 2019 15:33:20 +0200
Subject: [Rd] passing extra arguments to devtools::build
In-Reply-To: <00dcb8c4-50c5-6728-343b-98619c42797b@yorku.ca>
References: <00dcb8c4-50c5-6728-343b-98619c42797b@yorku.ca>
Message-ID: <CAOO9MKWV_KrYiLDvc0tP=69agus5=bH7j5zfDh3Diej83EBfyQ@mail.gmail.com>

Dear Michael,

I think R-devel mailing list is not a proper place to report issues
with devtools. I would try filling an issue in their github
repository.
If you are able to reproduce this issue using plain R without any
extra packages, then please provide such example here.

Regards,
Jan Gorecki

On Fri, Sep 27, 2019 at 3:18 PM Michael Friendly <friendly at yorku.ca> wrote:
>
> This question was posed on SO :
> https://stackoverflow.com/questions/58118495/passing-extra-argumenets-to-devtoolsbuild
> but there has been no useful reply.
>
> Something seems to have changed in the |devtools|package, so that the
> following commands, that used to run now give an error I can't decipher:
>
> |>Sys.setenv(R_GSCMD="C:/Program
> Files/gs/gs9.21/bin/gswin64c.exe")>devtools::build(args
> =c('--resave-data','--compact-vignettes="gs+qpdf"'))The
> filename,directory name,or volume label syntax is incorrect. Error
> in(function(command =NULL,args =character(),error_on_status
> =TRUE,:System command error|
>
> I've tried other alternatives with other |devtools| commands, like just
> passing a single argument, but still get the same error
>
> |args ='--compact-vignettes="gs+qpdf"'devtools::check_win_devel(args=args)|
>
> I'm using devtools 2.2.0, under R 3.5.2
>
> --
> Michael Friendly     Email: friendly AT yorku DOT ca
> Professor, Psychology Dept. & Chair, ASA Statistical Graphics Section
> York University      Voice: 416 736-2100 x66249
> 4700 Keele Street    Web: http://www.datavis.ca | @datavisFriendly
> Toronto, ONT  M3J 1P3 CANADA
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Sep 27 16:44:36 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 27 Sep 2019 16:44:36 +0200
Subject: [Rd] missing imports not detected by 'R CMD check' (?)
In-Reply-To: <CAFDcVCSmaLwZ=h7MR5+efNc+cDD9pwBQZEQzam3Lo7z2mwbdnw@mail.gmail.com>
References: <CAFDcVCSmaLwZ=h7MR5+efNc+cDD9pwBQZEQzam3Lo7z2mwbdnw@mail.gmail.com>
Message-ID: <23950.8276.571320.74882@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Tue, 24 Sep 2019 11:42:13 -0700 writes

[to me (as maintainer of 'Matrix') and allowed me to answer in public] :

> I ran into a problem where 'R CMD check' on my in-house package, which
> only indirectly depends on 'Matrix', produce errors like:
> 
> [where=<environment: namespace:Matrix>, where2=<environment: namespace:Matrix>]
> Error in setGeneric("expand", function(x, ...) standardGeneric("expand")) :
>   could not find function "setGeneric"


> Looking at your https://cran.r-project.org/web/packages/Matrix/NAMESPACE:

> ## try to import all we need, but not more
> importFrom("methods"
>   ## still needed {group generics needed to be explicitly imported} ?
>          , Ops, Arith, Compare, Logic, Math, Math2, Summary, Complex
>   ## generics for which we export new methods:
>          , cbind2, rbind2, coerce, show
>          , kronecker
>   ## things we call,.. necessary when Matrix is loaded, but not attached, as in

>   ## Rscript --vanilla -e 'require(methods);(M <- Matrix::Matrix(0:1,3,3));  as(M,"sparseMatrix")'
>          , as, is, extends, new
>          , callGeneric, callNextMethod
>          , .selectSuperClasses, .slotNames, canCoerce, packageSlot
>          , getClass, getClassDef, validObject
>          , setClass, setClassUnion, setMethod, setOldClass
>          , setValidity, slot, "slot<-", slotNames, .hasSlot
>          , signature, representation, prototype)


> I see that you do not list 'setGeneric' in importFrom("methods", ...).
> If I add that manually and reinstall 'Matrix', then 'R CMD check' no
> longer produces the above error.


> PS. My problem only reveals itself on an R installation that I built
> without installing 'recommended' packages in the system library - they
> do exist in R_LIBS_USER though.  I don't know if that's related or
> not, but just wanted to mention it.
> 
> PPS. I see similar issues with packages that uses globalVariables()
> without importFrom("utils", "globalVariables").  Hence my R-pkg-devel
> on 'Why doesn't R CMD check warn that globalVariables() is
> undefined/not imported?' post on 2019-09-24
> (https://stat.ethz.ch/pipermail/r-package-devel/2019q3/004440.html).

Thank you,  Henrik,
this is somewhat interesting and more widely relevant than just
to Matrix I think, and therefore is going to the R-devel list.

Your scenario (in PS) is a bit unusual,  but of course, you can
easily make it realistic scenario with a non-Recommended package
that is similar to Matrix  (but for "Minimal reproducible
example" !) could be much smaller.

I checked a bit further .. not systematically and found at least
two more methods /  functions I use and  the R CMD check tools
have never warned me about (and so they are not in Matrix/NAMESPACE 
   because Matrix may be older than namespaces, and even if not,
   originally, one did not import the the things from "Depends:" packages,
   where 'methods' had been for a long time in Matrix/DESCRIPTION ) :

Both 

 standardGeneric()  and 
 implicitGeneric()

are also not in Matrix' NAMESPACE and are used in Matrix/R/*.R
code, and that does not give any warnings from R CMD check.

Unfortunately, I don't have time at the moment to delve into
this to debug .. but I rather "post it" for now, so it is less
easily forgotten.

Martin

--
Martin Maechler
ETH Zurich and R Core


From j@goreck| @end|ng |rom w|t@edu@p|  Sun Sep 29 13:09:55 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 29 Sep 2019 13:09:55 +0200
Subject: [Rd] speed up R_IsNA, R_IsNaN for vector input
Message-ID: <CAOO9MKUuQg-mh0D1PhwDsAdqGbVCO7xUSi_cVEdcLpyw50ft_A@mail.gmail.com>

Dear R developers,

I spotted that R_isNA and R_IsNaN could be improved when applied on a
vector where we could take out small part of their logic, run it once,
and then reuse inside the loop.
I setup tiny plain-C experiment. Taking R_IsNA, R_IsNaN from R's
arithmetic.c, and building R_vIsNA and R_vIsNaN accordingly.
For double input of size 1e9 (having some NA and NaN) I observed
following timings:

R_IsNA    6.729s
R_vIsNA   4.386s

R_IsNaN   6.874s
R_vIsNaN  4.479s

ISNAN     4.392s

It looks like R_vIsN(A|aN) are close to ISNAN (which just wraps to
math.h::isnan).
Should I follow up with a patch?

The experiment is a single nan.c file of 127 lines (includes R C
funs). Large enough to not paste in the email. Here is the link:
https://gist.github.com/jangorecki/c140fed3a3672620c1e2af90a768d785

Run it as:

gcc nan.c -lm
./a.out R_vIsNA 8
./a.out R_IsNA 8
./a.out R_vIsNaN 8
./a.out R_IsNaN 8
./a.out ISNAN 8

Best regards,
Jan Gorecki


From @osp@m m@iii@g oii @itieid-im@de  Sun Sep 29 13:55:17 2019
From: @osp@m m@iii@g oii @itieid-im@de (@osp@m m@iii@g oii @itieid-im@de)
Date: Sun, 29 Sep 2019 13:55:17 +0200
Subject: [Rd] typeof(getOption("warn")) is "integer" instead of "double" in
 R unstable (2019-09-27 r77229)? Reproducible?
Message-ID: <1bdbb08af3033999644155c654cc4ede0b9eb4b6.camel@altfeld-im.de>

Hi,

I have a failing unit test in my package tryCatchLog on the CRAN build infrastructure
(https://cran.r-project.org/web/checks/check_results_tryCatchLog.html)
with "R Under development (unstable) (2019-09-27 r77229)"
and the unit tests just ensures consistent behaviour of R (not of my package) as a precondition:

The failing unit test is caused by
> typeof(getOption("warn"))
> [1] "integer"

but it should be
> [1] "double"

I have no build infrastructure for dev and want to find out if this is caused by
- my mistake
- changes in the R dev version
- the new C compilers used (correlates with the failing unit test)

Can somebody (having the R dev version available) please help me and answer the result of

> typeof(getOption("warn"))

using "R Under development (unstable) (2019-09-27 r77229)" or newer?

Thanks a lot and sorry for the "noise"!

Jurgen

PS: These R (dev) versions did work as expected (returning "double") but were also using older C compilers:
- R Under development (unstable) (2019-09-20 r77199)
- R Under development (unstable) (2019-09-22 r77202)
- R Under development (unstable) (2019-09-25 r77217)
- R version 3.6.1 Patched (2019-09-25 r77224)
- R version 3.6.1 (2019-07-05)
- R version 3.6.0 beta (2019-04-15 r76395)
- R version 3.5.3 (2019-03-11)
- R version 3.5.2 (2018-12-20)


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Sep 29 14:33:03 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 29 Sep 2019 08:33:03 -0400
Subject: [Rd] 
 typeof(getOption("warn")) is "integer" instead of "double" in
 R unstable (2019-09-27 r77229)? Reproducible?
In-Reply-To: <1bdbb08af3033999644155c654cc4ede0b9eb4b6.camel@altfeld-im.de>
References: <1bdbb08af3033999644155c654cc4ede0b9eb4b6.camel@altfeld-im.de>
Message-ID: <ae202f49-ca00-f0fa-3d75-5973997878e6@gmail.com>

On 29/09/2019 7:55 a.m., nospam at altfeld-im.de wrote:
> Hi,
> 
> I have a failing unit test in my package tryCatchLog on the CRAN build infrastructure
> (https://cran.r-project.org/web/checks/check_results_tryCatchLog.html)
> with "R Under development (unstable) (2019-09-27 r77229)"
> and the unit tests just ensures consistent behaviour of R (not of my package) as a precondition:
> 
> The failing unit test is caused by
>> typeof(getOption("warn"))
>> [1] "integer"
> 
> but it should be
>> [1] "double"
> 

This is related to this bug fix:

CHANGES IN R 3.6.1 patched BUG FIXES

     ?options(warn=1e11)? is an error now, instead of later leading to C 
stack overflow because of infinite recursion.

which occurred in rev 77226.  It explicitly coerces the warn value to 
integer.


> I have no build infrastructure for dev and want to find out if this is caused by
> - my mistake
> - changes in the R dev version
> - the new C compilers used (correlates with the failing unit test)

It is changes in the dev and patched versions, and also your mistake: 
your test shouldn't be so stringent.  The docs don't say that the value 
has to be a double; in fact, they suggest it should be a whole number 
value (talking about 0, 1, "2 or more", not about what would happen with 
options(warn = pi/2), for example.

In older versions, options(warn = pi/2) is treated the same as 
options(warn = 1), and in the new version, it is displayed as 1 as well.

Duncan Murdoch
> 
> Can somebody (having the R dev version available) please help me and answer the result of
> 
>> typeof(getOption("warn"))
> 
> using "R Under development (unstable) (2019-09-27 r77229)" or newer?
> 
> Thanks a lot and sorry for the "noise"!
> 
> Jurgen
> 
> PS: These R (dev) versions did work as expected (returning "double") but were also using older C compilers:
> - R Under development (unstable) (2019-09-20 r77199)
> - R Under development (unstable) (2019-09-22 r77202)
> - R Under development (unstable) (2019-09-25 r77217)
> - R version 3.6.1 Patched (2019-09-25 r77224)
> - R version 3.6.1 (2019-07-05)
> - R version 3.6.0 beta (2019-04-15 r76395)
> - R version 3.5.3 (2019-03-11)
> - R version 3.5.2 (2018-12-20)
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @osp@m m@iii@g oii @itieid-im@de  Sun Sep 29 18:12:30 2019
From: @osp@m m@iii@g oii @itieid-im@de (@osp@m m@iii@g oii @itieid-im@de)
Date: Sun, 29 Sep 2019 18:12:30 +0200
Subject: [Rd] 
 typeof(getOption("warn")) is "integer" instead of "double" in
 R unstable (2019-09-27 r77229)? Reproducible?
In-Reply-To: <ae202f49-ca00-f0fa-3d75-5973997878e6@gmail.com>
References: <1bdbb08af3033999644155c654cc4ede0b9eb4b6.camel@altfeld-im.de>
 <ae202f49-ca00-f0fa-3d75-5973997878e6@gmail.com>
Message-ID: <abb98ca27cf068bea6ce7046eb3874915dabb91c.camel@altfeld-im.de>

Thanks a lot for pointing out the reason
(and yes, I am testing quite to stringent in this case - it's my old testing disease ;-)

For other readers:

The R-devel NEWS is a good source to find possible change reasons:

https://stat.ethz.ch/R-manual/R-devel/doc/html/NEWS.html


On Sun, 2019-09-29 at 08:33 -0400, Duncan Murdoch wrote:
> On 29/09/2019 7:55 a.m., nospam at altfeld-im.de wrote:
> > Hi,
> > 
> > I have a failing unit test in my package tryCatchLog on the CRAN build infrastructure
> > (https://cran.r-project.org/web/checks/check_results_tryCatchLog.html)
> > with "R Under development (unstable) (2019-09-27 r77229)"
> > and the unit tests just ensures consistent behaviour of R (not of my package) as a precondition:
> > 
> > The failing unit test is caused by
> > > typeof(getOption("warn"))
> > > [1] "integer"
> > 
> > but it should be
> > > [1] "double"
> 
> This is related to this bug fix:
> 
> CHANGES IN R 3.6.1 patched BUG FIXES
> 
>      ?options(warn=1e11)? is an error now, instead of later leading to C 
> stack overflow because of infinite recursion.
> 
> which occurred in rev 77226.  It explicitly coerces the warn value to 
> integer.
> 
> 
> > I have no build infrastructure for dev and want to find out if this is caused by
> > - my mistake
> > - changes in the R dev version
> > - the new C compilers used (correlates with the failing unit test)
> 
> It is changes in the dev and patched versions, and also your mistake: 
> your test shouldn't be so stringent.  The docs don't say that the value 
> has to be a double; in fact, they suggest it should be a whole number 
> value (talking about 0, 1, "2 or more", not about what would happen with 
> options(warn = pi/2), for example.
> 
> In older versions, options(warn = pi/2) is treated the same as 
> options(warn = 1), and in the new version, it is displayed as 1 as well.
> 
> Duncan Murdoch
> > 
> > Can somebody (having the R dev version available) please help me and answer the result of
> > 
> > > typeof(getOption("warn"))
> > 
> > using "R Under development (unstable) (2019-09-27 r77229)" or newer?
> > 
> > Thanks a lot and sorry for the "noise"!
> > 
> > Jurgen
> > 
> > PS: These R (dev) versions did work as expected (returning "double") but were also using older C compilers:
> > - R Under development (unstable) (2019-09-20 r77199)
> > - R Under development (unstable) (2019-09-22 r77202)
> > - R Under development (unstable) (2019-09-25 r77217)
> > - R version 3.6.1 Patched (2019-09-25 r77224)
> > - R version 3.6.1 (2019-07-05)
> > - R version 3.6.0 beta (2019-04-15 r76395)
> > - R version 3.5.3 (2019-03-11)
> > - R version 3.5.2 (2018-12-20)
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> 
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Sep 29 20:46:49 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 29 Sep 2019 14:46:49 -0400
Subject: [Rd] 
 typeof(getOption("warn")) is "integer" instead of "double" in
 R unstable (2019-09-27 r77229)? Reproducible?
In-Reply-To: <abb98ca27cf068bea6ce7046eb3874915dabb91c.camel@altfeld-im.de>
References: <1bdbb08af3033999644155c654cc4ede0b9eb4b6.camel@altfeld-im.de>
 <ae202f49-ca00-f0fa-3d75-5973997878e6@gmail.com>
 <abb98ca27cf068bea6ce7046eb3874915dabb91c.camel@altfeld-im.de>
Message-ID: <3b52a60b-662b-e5a9-d1e6-164a3d0f1c65@gmail.com>

On 29/09/2019 12:12 p.m., nospam at altfeld-im.de wrote:
> Thanks a lot for pointing out the reason
> (and yes, I am testing quite to stringent in this case - it's my old testing disease ;-)
> 
> For other readers:
> 
> The R-devel NEWS is a good source to find possible change reasons:
> 
> https://stat.ethz.ch/R-manual/R-devel/doc/html/NEWS.html

And if you want to follow along, you can get it as an RSS feed from 
<http://developer.r-project.org/RSSfeeds.html>.  If you don't know what 
an RSS feed is, see feedly.com.

Duncan Murdoch

> 
> 
> On Sun, 2019-09-29 at 08:33 -0400, Duncan Murdoch wrote:
>> On 29/09/2019 7:55 a.m., nospam at altfeld-im.de wrote:
>>> Hi,
>>>
>>> I have a failing unit test in my package tryCatchLog on the CRAN build infrastructure
>>> (https://cran.r-project.org/web/checks/check_results_tryCatchLog.html)
>>> with "R Under development (unstable) (2019-09-27 r77229)"
>>> and the unit tests just ensures consistent behaviour of R (not of my package) as a precondition:
>>>
>>> The failing unit test is caused by
>>>> typeof(getOption("warn"))
>>>> [1] "integer"
>>>
>>> but it should be
>>>> [1] "double"
>>
>> This is related to this bug fix:
>>
>> CHANGES IN R 3.6.1 patched BUG FIXES
>>
>>       ?options(warn=1e11)? is an error now, instead of later leading to C
>> stack overflow because of infinite recursion.
>>
>> which occurred in rev 77226.  It explicitly coerces the warn value to
>> integer.
>>
>>
>>> I have no build infrastructure for dev and want to find out if this is caused by
>>> - my mistake
>>> - changes in the R dev version
>>> - the new C compilers used (correlates with the failing unit test)
>>
>> It is changes in the dev and patched versions, and also your mistake:
>> your test shouldn't be so stringent.  The docs don't say that the value
>> has to be a double; in fact, they suggest it should be a whole number
>> value (talking about 0, 1, "2 or more", not about what would happen with
>> options(warn = pi/2), for example.
>>
>> In older versions, options(warn = pi/2) is treated the same as
>> options(warn = 1), and in the new version, it is displayed as 1 as well.
>>
>> Duncan Murdoch
>>>
>>> Can somebody (having the R dev version available) please help me and answer the result of
>>>
>>>> typeof(getOption("warn"))
>>>
>>> using "R Under development (unstable) (2019-09-27 r77229)" or newer?
>>>
>>> Thanks a lot and sorry for the "noise"!
>>>
>>> Jurgen
>>>
>>> PS: These R (dev) versions did work as expected (returning "double") but were also using older C compilers:
>>> - R Under development (unstable) (2019-09-20 r77199)
>>> - R Under development (unstable) (2019-09-22 r77202)
>>> - R Under development (unstable) (2019-09-25 r77217)
>>> - R version 3.6.1 Patched (2019-09-25 r77224)
>>> - R version 3.6.1 (2019-07-05)
>>> - R version 3.6.0 beta (2019-04-15 r76395)
>>> - R version 3.5.3 (2019-03-11)
>>> - R version 3.5.2 (2018-12-20)
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>>
>


From bbo|ker @end|ng |rom gm@||@com  Sun Sep 29 22:22:44 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 29 Sep 2019 16:22:44 -0400
Subject: [Rd] depending on orphaned packages?
In-Reply-To: <23947.5769.742626.892720@stat.math.ethz.ch>
References: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>
 <23947.5769.742626.892720@stat.math.ethz.ch>
Message-ID: <fac3a3cc-f197-0866-e4d0-0bea003ff4e4@gmail.com>



On 2019-09-25 3:26 a.m., Martin Maechler wrote:
>>>>>> Ben Bolker 
>>>>>>     on Tue, 24 Sep 2019 20:09:55 -0400 writes:
> 
>     > SuppDists is orphaned on CRAN (and has been since 2013).
>     > https://cran.r-project.org/web/checks/check_results_.html
> 
>     > Oddly, the simulate method for the inverse.gaussian family
>     > [inverse.gaussian()$simulate] depends (in a loose sense) on SuppDists
>     > (it fails if the SuppDists namespace is not available:
> 
>     > if (!requireNamespace("SuppDists", quietly = TRUE))
>     > stop("need CRAN package 'SuppDists' for simulation from the
>     > 'inverse.gaussian' family")
> 
> 
>     > The statmod package also implements inverse gaussian d/p/q/r functions
>     > <https://journal.r-project.org/archive/2016-1/giner-smyth.pdf>.  It is
>     > lightweight (depends on R >= 3.0.0, imports only base packages [stats
>     > and graphics]) and has been around for a long time (archived versions on
>     > CRAN go back to 2003).
> 
>     > Would it make sense to replace the call to SuppDists::rinvGauss with a
>     > corresponding call to statmod::rinvgauss ?  Would a patch be considered?
> 
>     > Ben Bolker
> 
> I'd say "yes" & "yes".
> 
> "Base" code weekly depending on CRAN packages (apart from
> formally 'Recommended' ones)  is somewhat sub-optimal in any
> case, ((but possibly still the best thing, given reality
>         [maintenance efforts, copyrights, ...])),
> but your proposal seems a  "uniformly not worse"  change
> ((and I have very much liked delving into parts of Gordon
>   Smyth's textbook on GLMs as a really nice mixture / in-between
>   of rigorous math and applied stats))

   I did actually think of a reason *not* to do this.

   The resulting random deviates generated by statmod::rinvgauss aren't
exactly the same as those from SuppDists::rinvGauss (same algorithm, but
I guess they use sufficiently different internal machinery), so this
could break exact backward compatibility for any code that uses
simulate() for inverse-Gaussian models.  Still might be worth doing, but
now the change is *not* "uniformly not worse".

An alternative (which would remove the dependency on a CRAN package)
would be to pull the code of statmod::rinvgauss into R (which would be
allowed - statmod is GPL 2/3 - but of course it would be polite to ask).
The downside to this solution would be adding the maintenance burden of
this code ...

> 
> Martin Maechler
> ETH Zurich and R Core
>


From bob @end|ng |rom rud@|@  Sun Sep 29 23:19:37 2019
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sun, 29 Sep 2019 17:19:37 -0400
Subject: [Rd] depending on orphaned packages?
In-Reply-To: <fac3a3cc-f197-0866-e4d0-0bea003ff4e4@gmail.com>
References: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>
 <23947.5769.742626.892720@stat.math.ethz.ch>
 <fac3a3cc-f197-0866-e4d0-0bea003ff4e4@gmail.com>
Message-ID: <E5E5B525-D16C-4BBD-B528-B110FC5C4104@rud.is>

Or, a crazy person (me) cld volunteer to keep this running and get it back on CRAN.

I fixed the severe warning and also added C-side registration code. 

The pkg is monolithic but the C code is super straightforward (a is the R code).

Unless someone can think of a reason not to, I can submit this to CRAN this week and get the source up on social coding sites.

It looks like Jerome Braun did this for another one of Bob Wheeler's pkgs, so there's some existing precedent for doing this.

-Bob

> On Sep 29, 2019, at 16:22, Ben Bolker <bbolker at gmail.com> wrote:
> 
> 
> 
> On 2019-09-25 3:26 a.m., Martin Maechler wrote:
>>>>>>> Ben Bolker 
>>>>>>>    on Tue, 24 Sep 2019 20:09:55 -0400 writes:
>> 
>>> SuppDists is orphaned on CRAN (and has been since 2013).
>>> https://cran.r-project.org/web/checks/check_results_.html
>> 
>>> Oddly, the simulate method for the inverse.gaussian family
>>> [inverse.gaussian()$simulate] depends (in a loose sense) on SuppDists
>>> (it fails if the SuppDists namespace is not available:
>> 
>>> if (!requireNamespace("SuppDists", quietly = TRUE))
>>> stop("need CRAN package 'SuppDists' for simulation from the
>>> 'inverse.gaussian' family")
>> 
>> 
>>> The statmod package also implements inverse gaussian d/p/q/r functions
>>> <https://journal.r-project.org/archive/2016-1/giner-smyth.pdf>.  It is
>>> lightweight (depends on R >= 3.0.0, imports only base packages [stats
>>> and graphics]) and has been around for a long time (archived versions on
>>> CRAN go back to 2003).
>> 
>>> Would it make sense to replace the call to SuppDists::rinvGauss with a
>>> corresponding call to statmod::rinvgauss ?  Would a patch be considered?
>> 
>>> Ben Bolker
>> 
>> I'd say "yes" & "yes".
>> 
>> "Base" code weekly depending on CRAN packages (apart from
>> formally 'Recommended' ones)  is somewhat sub-optimal in any
>> case, ((but possibly still the best thing, given reality
>>        [maintenance efforts, copyrights, ...])),
>> but your proposal seems a  "uniformly not worse"  change
>> ((and I have very much liked delving into parts of Gordon
>>  Smyth's textbook on GLMs as a really nice mixture / in-between
>>  of rigorous math and applied stats))
> 
>   I did actually think of a reason *not* to do this.
> 
>   The resulting random deviates generated by statmod::rinvgauss aren't
> exactly the same as those from SuppDists::rinvGauss (same algorithm, but
> I guess they use sufficiently different internal machinery), so this
> could break exact backward compatibility for any code that uses
> simulate() for inverse-Gaussian models.  Still might be worth doing, but
> now the change is *not* "uniformly not worse".
> 
> An alternative (which would remove the dependency on a CRAN package)
> would be to pull the code of statmod::rinvgauss into R (which would be
> allowed - statmod is GPL 2/3 - but of course it would be polite to ask).
> The downside to this solution would be adding the maintenance burden of
> this code ...
> 
>> 
>> Martin Maechler
>> ETH Zurich and R Core
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bob @end|ng |rom rud@|@  Sun Sep 29 23:27:46 2019
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sun, 29 Sep 2019 17:27:46 -0400
Subject: [Rd] depending on orphaned packages?
In-Reply-To: <E5E5B525-D16C-4BBD-B528-B110FC5C4104@rud.is>
References: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>
 <23947.5769.742626.892720@stat.math.ethz.ch>
 <fac3a3cc-f197-0866-e4d0-0bea003ff4e4@gmail.com>
 <E5E5B525-D16C-4BBD-B528-B110FC5C4104@rud.is>
Message-ID: <E435A4E2-B963-42A6-8586-C6D31AED8A89@rud.is>

Ah, I spoke too soon. I started putting the demo code into a test suite and ran one check with valgrind and ? sure enough ? there's def more issues (a cpl functions) than the overt/easy ones (and, I went back to the check results page and, also sure enough, they're there, too). They look to be fairly straightforward to resolve but it's going to take a bit longer than "this week", but I'm not rescinding the volunteering.

-Bob

> On Sep 29, 2019, at 17:19, Bob Rudis <bob at rud.is> wrote:
> 
> Or, a crazy person (me) cld volunteer to keep this running and get it back on CRAN.
> 
> I fixed the severe warning and also added C-side registration code. 
> 
> The pkg is monolithic but the C code is super straightforward (a is the R code).
> 
> Unless someone can think of a reason not to, I can submit this to CRAN this week and get the source up on social coding sites.
> 
> It looks like Jerome Braun did this for another one of Bob Wheeler's pkgs, so there's some existing precedent for doing this.
> 
> -Bob
> 
>> On Sep 29, 2019, at 16:22, Ben Bolker <bbolker at gmail.com> wrote:
>> 
>> 
>> 
>> On 2019-09-25 3:26 a.m., Martin Maechler wrote:
>>>>>>>> Ben Bolker 
>>>>>>>>   on Tue, 24 Sep 2019 20:09:55 -0400 writes:
>>> 
>>>> SuppDists is orphaned on CRAN (and has been since 2013).
>>>> https://cran.r-project.org/web/checks/check_results_.html
>>> 
>>>> Oddly, the simulate method for the inverse.gaussian family
>>>> [inverse.gaussian()$simulate] depends (in a loose sense) on SuppDists
>>>> (it fails if the SuppDists namespace is not available:
>>> 
>>>> if (!requireNamespace("SuppDists", quietly = TRUE))
>>>> stop("need CRAN package 'SuppDists' for simulation from the
>>>> 'inverse.gaussian' family")
>>> 
>>> 
>>>> The statmod package also implements inverse gaussian d/p/q/r functions
>>>> <https://journal.r-project.org/archive/2016-1/giner-smyth.pdf>.  It is
>>>> lightweight (depends on R >= 3.0.0, imports only base packages [stats
>>>> and graphics]) and has been around for a long time (archived versions on
>>>> CRAN go back to 2003).
>>> 
>>>> Would it make sense to replace the call to SuppDists::rinvGauss with a
>>>> corresponding call to statmod::rinvgauss ?  Would a patch be considered?
>>> 
>>>> Ben Bolker
>>> 
>>> I'd say "yes" & "yes".
>>> 
>>> "Base" code weekly depending on CRAN packages (apart from
>>> formally 'Recommended' ones)  is somewhat sub-optimal in any
>>> case, ((but possibly still the best thing, given reality
>>>       [maintenance efforts, copyrights, ...])),
>>> but your proposal seems a  "uniformly not worse"  change
>>> ((and I have very much liked delving into parts of Gordon
>>> Smyth's textbook on GLMs as a really nice mixture / in-between
>>> of rigorous math and applied stats))
>> 
>>  I did actually think of a reason *not* to do this.
>> 
>>  The resulting random deviates generated by statmod::rinvgauss aren't
>> exactly the same as those from SuppDists::rinvGauss (same algorithm, but
>> I guess they use sufficiently different internal machinery), so this
>> could break exact backward compatibility for any code that uses
>> simulate() for inverse-Gaussian models.  Still might be worth doing, but
>> now the change is *not* "uniformly not worse".
>> 
>> An alternative (which would remove the dependency on a CRAN package)
>> would be to pull the code of statmod::rinvgauss into R (which would be
>> allowed - statmod is GPL 2/3 - but of course it would be polite to ask).
>> The downside to this solution would be adding the maintenance burden of
>> this code ...
>> 
>>> 
>>> Martin Maechler
>>> ETH Zurich and R Core
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From md @end|ng |rom @und@ku@dk  Mon Sep 30 09:09:04 2019
From: md @end|ng |rom @und@ku@dk (Matt Denwood)
Date: Mon, 30 Sep 2019 07:09:04 +0000
Subject: [Rd] depending on orphaned packages?
In-Reply-To: <E435A4E2-B963-42A6-8586-C6D31AED8A89@rud.is>
References: <b1fd1b08-c111-57f1-2cdd-937a3732e081@gmail.com>
 <23947.5769.742626.892720@stat.math.ethz.ch>
 <fac3a3cc-f197-0866-e4d0-0bea003ff4e4@gmail.com>
 <E5E5B525-D16C-4BBD-B528-B110FC5C4104@rud.is>
 <E435A4E2-B963-42A6-8586-C6D31AED8A89@rud.is>
Message-ID: <993145AB-6853-47A9-82F2-0348E5DC4A74@sund.ku.dk>

Hi Bob

I had also started working on SuppDists a couple of months ago as I needed to expose some of the distributions at C-level for use in another package.  Perhaps I/we could create a GitHub repo and collaborate on this?  I?m happy for you to take the lead, but a job shared is a job halved and all that?

We have an institutional (my section at the University of Copenhagen) GitHub repo that I could use to set it up.

Cheers,

Matt


> On 29 Sep 2019, at 23:27, Bob Rudis <bob at rud.is> wrote:
> 
> Ah, I spoke too soon. I started putting the demo code into a test suite and ran one check with valgrind and ? sure enough ? there's def more issues (a cpl functions) than the overt/easy ones (and, I went back to the check results page and, also sure enough, they're there, too). They look to be fairly straightforward to resolve but it's going to take a bit longer than "this week", but I'm not rescinding the volunteering.
> 
> -Bob
> 
>> On Sep 29, 2019, at 17:19, Bob Rudis <bob at rud.is> wrote:
>> 
>> Or, a crazy person (me) cld volunteer to keep this running and get it back on CRAN.
>> 
>> I fixed the severe warning and also added C-side registration code. 
>> 
>> The pkg is monolithic but the C code is super straightforward (a is the R code).
>> 
>> Unless someone can think of a reason not to, I can submit this to CRAN this week and get the source up on social coding sites.
>> 
>> It looks like Jerome Braun did this for another one of Bob Wheeler's pkgs, so there's some existing precedent for doing this.
>> 
>> -Bob
>> 
>>> On Sep 29, 2019, at 16:22, Ben Bolker <bbolker at gmail.com> wrote:
>>> 
>>> 
>>> 
>>> On 2019-09-25 3:26 a.m., Martin Maechler wrote:
>>>>>>>>> Ben Bolker 
>>>>>>>>>  on Tue, 24 Sep 2019 20:09:55 -0400 writes:
>>>> 
>>>>> SuppDists is orphaned on CRAN (and has been since 2013).
>>>>> https://cran.r-project.org/web/checks/check_results_.html
>>>> 
>>>>> Oddly, the simulate method for the inverse.gaussian family
>>>>> [inverse.gaussian()$simulate] depends (in a loose sense) on SuppDists
>>>>> (it fails if the SuppDists namespace is not available:
>>>> 
>>>>> if (!requireNamespace("SuppDists", quietly = TRUE))
>>>>> stop("need CRAN package 'SuppDists' for simulation from the
>>>>> 'inverse.gaussian' family")
>>>> 
>>>> 
>>>>> The statmod package also implements inverse gaussian d/p/q/r functions
>>>>> <https://journal.r-project.org/archive/2016-1/giner-smyth.pdf>.  It is
>>>>> lightweight (depends on R >= 3.0.0, imports only base packages [stats
>>>>> and graphics]) and has been around for a long time (archived versions on
>>>>> CRAN go back to 2003).
>>>> 
>>>>> Would it make sense to replace the call to SuppDists::rinvGauss with a
>>>>> corresponding call to statmod::rinvgauss ?  Would a patch be considered?
>>>> 
>>>>> Ben Bolker
>>>> 
>>>> I'd say "yes" & "yes".
>>>> 
>>>> "Base" code weekly depending on CRAN packages (apart from
>>>> formally 'Recommended' ones)  is somewhat sub-optimal in any
>>>> case, ((but possibly still the best thing, given reality
>>>>      [maintenance efforts, copyrights, ...])),
>>>> but your proposal seems a  "uniformly not worse"  change
>>>> ((and I have very much liked delving into parts of Gordon
>>>> Smyth's textbook on GLMs as a really nice mixture / in-between
>>>> of rigorous math and applied stats))
>>> 
>>> I did actually think of a reason *not* to do this.
>>> 
>>> The resulting random deviates generated by statmod::rinvgauss aren't
>>> exactly the same as those from SuppDists::rinvGauss (same algorithm, but
>>> I guess they use sufficiently different internal machinery), so this
>>> could break exact backward compatibility for any code that uses
>>> simulate() for inverse-Gaussian models.  Still might be worth doing, but
>>> now the change is *not* "uniformly not worse".
>>> 
>>> An alternative (which would remove the dependency on a CRAN package)
>>> would be to pull the code of statmod::rinvgauss into R (which would be
>>> allowed - statmod is GPL 2/3 - but of course it would be polite to ask).
>>> The downside to this solution would be adding the maintenance burden of
>>> this code ...
>>> 
>>>> 
>>>> Martin Maechler
>>>> ETH Zurich and R Core
>>>> 
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Sep 30 10:07:43 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 30 Sep 2019 10:07:43 +0200
Subject: [Rd] 
 typeof(getOption("warn")) is "integer" instead of "double" in
 R unstable (2019-09-27 r77229)? Reproducible?
In-Reply-To: <abb98ca27cf068bea6ce7046eb3874915dabb91c.camel@altfeld-im.de>
References: <1bdbb08af3033999644155c654cc4ede0b9eb4b6.camel@altfeld-im.de>
 <ae202f49-ca00-f0fa-3d75-5973997878e6@gmail.com>
 <abb98ca27cf068bea6ce7046eb3874915dabb91c.camel@altfeld-im.de>
Message-ID: <4ed0153d-98b7-fede-be6b-2ef33cf607a5@gmail.com>

On 9/29/19 6:12 PM, nospam at altfeld-im.de wrote:
> Thanks a lot for pointing out the reason
> (and yes, I am testing quite to stringent in this case - it's my old testing disease ;-)

Please note that it is not a good practice to test for these things in 
unit tests. Every system has some specified (or "documented" - in R) 
behavior, and then some unspecified. Programs must not depend on the 
unspecified behavior. If your programs do, then they should be fixed not 
to do so. If they do not, then there is no point in testing whether the 
unspecified behavior changed or seems to have changed. Also the 
existence of these tests often wastes time of the people who find out 
when these tests start failing (can be your time, but also CRAN, RCore 
or anyone else's). It is of course a good thing to check inputs in 
functions, e.g. in the actual code that uses an "option", to the point 
that is needed for correct execution of the code, but that neither that 
check nor the code should expect more than what is specified.

Best
Tomas

>
> For other readers:
>
> The R-devel NEWS is a good source to find possible change reasons:
>
> https://stat.ethz.ch/R-manual/R-devel/doc/html/NEWS.html
>
>
> On Sun, 2019-09-29 at 08:33 -0400, Duncan Murdoch wrote:
>> On 29/09/2019 7:55 a.m., nospam at altfeld-im.de wrote:
>>> Hi,
>>>
>>> I have a failing unit test in my package tryCatchLog on the CRAN build infrastructure
>>> (https://cran.r-project.org/web/checks/check_results_tryCatchLog.html)
>>> with "R Under development (unstable) (2019-09-27 r77229)"
>>> and the unit tests just ensures consistent behaviour of R (not of my package) as a precondition:
>>>
>>> The failing unit test is caused by
>>>> typeof(getOption("warn"))
>>>> [1] "integer"
>>> but it should be
>>>> [1] "double"
>> This is related to this bug fix:
>>
>> CHANGES IN R 3.6.1 patched BUG FIXES
>>
>>       ?options(warn=1e11)? is an error now, instead of later leading to C
>> stack overflow because of infinite recursion.
>>
>> which occurred in rev 77226.  It explicitly coerces the warn value to
>> integer.
>>
>>
>>> I have no build infrastructure for dev and want to find out if this is caused by
>>> - my mistake
>>> - changes in the R dev version
>>> - the new C compilers used (correlates with the failing unit test)
>> It is changes in the dev and patched versions, and also your mistake:
>> your test shouldn't be so stringent.  The docs don't say that the value
>> has to be a double; in fact, they suggest it should be a whole number
>> value (talking about 0, 1, "2 or more", not about what would happen with
>> options(warn = pi/2), for example.
>>
>> In older versions, options(warn = pi/2) is treated the same as
>> options(warn = 1), and in the new version, it is displayed as 1 as well.
>>
>> Duncan Murdoch
>>> Can somebody (having the R dev version available) please help me and answer the result of
>>>
>>>> typeof(getOption("warn"))
>>> using "R Under development (unstable) (2019-09-27 r77229)" or newer?
>>>
>>> Thanks a lot and sorry for the "noise"!
>>>
>>> Jurgen
>>>
>>> PS: These R (dev) versions did work as expected (returning "double") but were also using older C compilers:
>>> - R Under development (unstable) (2019-09-20 r77199)
>>> - R Under development (unstable) (2019-09-22 r77202)
>>> - R Under development (unstable) (2019-09-25 r77217)
>>> - R version 3.6.1 Patched (2019-09-25 r77224)
>>> - R version 3.6.1 (2019-07-05)
>>> - R version 3.6.0 beta (2019-04-15 r76395)
>>> - R version 3.5.3 (2019-03-11)
>>> - R version 3.5.2 (2018-12-20)
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Sep 30 10:31:13 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 30 Sep 2019 10:31:13 +0200
Subject: [Rd] speed up R_IsNA, R_IsNaN for vector input
In-Reply-To: <CAOO9MKUuQg-mh0D1PhwDsAdqGbVCO7xUSi_cVEdcLpyw50ft_A@mail.gmail.com>
References: <CAOO9MKUuQg-mh0D1PhwDsAdqGbVCO7xUSi_cVEdcLpyw50ft_A@mail.gmail.com>
Message-ID: <9f672839-4411-c216-43d6-782c6100aa0e@gmail.com>

On 9/29/19 1:09 PM, Jan Gorecki wrote:
> Dear R developers,
>
> I spotted that R_isNA and R_IsNaN could be improved when applied on a
> vector where we could take out small part of their logic, run it once,
> and then reuse inside the loop.

Dear Jan,

Looking at your examples, I just see you have hand-inlined 
R_IsNA/R_IsNaN, or is there anything more? In principle we could put 
R_IsNA, R_IsNAN into Rinlinedfuns to allow inlining across compilation 
modules, but we can't put all functions there - so there would have to 
be a clear case for a performance problem in some specific function in a 
different module.

If you were curious there are optimized checks for non-finite values in 
vectors in array.c, which are used for matrix multiplication before 
calling to BLAS. These have to be fast and the optimization is biased 
towards the case that such values are rare and that it is ok to 
sometimes say "there may be non-finite values" even when in fact they 
are not.

Best
Tomas

> I setup tiny plain-C experiment. Taking R_IsNA, R_IsNaN from R's
> arithmetic.c, and building R_vIsNA and R_vIsNaN accordingly.
> For double input of size 1e9 (having some NA and NaN) I observed
> following timings:
>
> R_IsNA    6.729s
> R_vIsNA   4.386s
>
> R_IsNaN   6.874s
> R_vIsNaN  4.479s
>
> ISNAN     4.392s
>
> It looks like R_vIsN(A|aN) are close to ISNAN (which just wraps to
> math.h::isnan).
> Should I follow up with a patch?
>
> The experiment is a single nan.c file of 127 lines (includes R C
> funs). Large enough to not paste in the email. Here is the link:
> https://gist.github.com/jangorecki/c140fed3a3672620c1e2af90a768d785
>
> Run it as:
>
> gcc nan.c -lm
> ./a.out R_vIsNA 8
> ./a.out R_IsNA 8
> ./a.out R_vIsNaN 8
> ./a.out R_IsNaN 8
> ./a.out ISNAN 8
>
> Best regards,
> Jan Gorecki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@goreck| @end|ng |rom w|t@edu@p|  Mon Sep 30 16:51:59 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Mon, 30 Sep 2019 16:51:59 +0200
Subject: [Rd] speed up R_IsNA, R_IsNaN for vector input
In-Reply-To: <9f672839-4411-c216-43d6-782c6100aa0e@gmail.com>
References: <CAOO9MKUuQg-mh0D1PhwDsAdqGbVCO7xUSi_cVEdcLpyw50ft_A@mail.gmail.com>
 <9f672839-4411-c216-43d6-782c6100aa0e@gmail.com>
Message-ID: <CAOO9MKWh4rnceuHoKByr6ViNbh410U2ZsKowYCw98NcDxqgmJg@mail.gmail.com>

Dear Tomas,

I was thinking it is because of taking

    ieee_double y;

out from the loop, and re-using across iterations.
Now I checked that was not the reason of speed up.
So as you wrote, it was only due to inlining.
I am surprised the difference is so significant.
Thank you,
Jan

On Mon, Sep 30, 2019 at 10:31 AM Tomas Kalibera
<tomas.kalibera at gmail.com> wrote:
>
> On 9/29/19 1:09 PM, Jan Gorecki wrote:
> > Dear R developers,
> >
> > I spotted that R_isNA and R_IsNaN could be improved when applied on a
> > vector where we could take out small part of their logic, run it once,
> > and then reuse inside the loop.
>
> Dear Jan,
>
> Looking at your examples, I just see you have hand-inlined
> R_IsNA/R_IsNaN, or is there anything more? In principle we could put
> R_IsNA, R_IsNAN into Rinlinedfuns to allow inlining across compilation
> modules, but we can't put all functions there - so there would have to
> be a clear case for a performance problem in some specific function in a
> different module.
>
> If you were curious there are optimized checks for non-finite values in
> vectors in array.c, which are used for matrix multiplication before
> calling to BLAS. These have to be fast and the optimization is biased
> towards the case that such values are rare and that it is ok to
> sometimes say "there may be non-finite values" even when in fact they
> are not.
>
> Best
> Tomas
>
> > I setup tiny plain-C experiment. Taking R_IsNA, R_IsNaN from R's
> > arithmetic.c, and building R_vIsNA and R_vIsNaN accordingly.
> > For double input of size 1e9 (having some NA and NaN) I observed
> > following timings:
> >
> > R_IsNA    6.729s
> > R_vIsNA   4.386s
> >
> > R_IsNaN   6.874s
> > R_vIsNaN  4.479s
> >
> > ISNAN     4.392s
> >
> > It looks like R_vIsN(A|aN) are close to ISNAN (which just wraps to
> > math.h::isnan).
> > Should I follow up with a patch?
> >
> > The experiment is a single nan.c file of 127 lines (includes R C
> > funs). Large enough to not paste in the email. Here is the link:
> > https://gist.github.com/jangorecki/c140fed3a3672620c1e2af90a768d785
> >
> > Run it as:
> >
> > gcc nan.c -lm
> > ./a.out R_vIsNA 8
> > ./a.out R_IsNA 8
> > ./a.out R_vIsNaN 8
> > ./a.out R_IsNaN 8
> > ./a.out ISNAN 8
> >
> > Best regards,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From tdhock5 @end|ng |rom gm@||@com  Mon Sep 30 23:25:32 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Mon, 30 Sep 2019 14:25:32 -0700
Subject: [Rd] R CMD build should fail early for old package versions?
Message-ID: <CALK03d27SFQwEHJrN2QAsUXP56FypY1myciWaxeruyy+OrFkbw@mail.gmail.com>

Hi all,

Today I had an R CMD build that failed while building a vignette because
the vignette needs tidyr (>= 1.0, declared in DESCRIPTION Suggests) but my
system had a previous version installed.

It did not take me too long to figure out the issue (solved by upgrading
tidyr) but it would have been even faster / easier if R CMD build failed
early, with an error message that says something like "Can not build
package XXX because it Suggests: tidyr (>= 1.0) but tidyr 0.8.3 is
installed"

Is that possible?

Toby

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Sep 30 23:47:12 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 30 Sep 2019 17:47:12 -0400
Subject: [Rd] R CMD build should fail early for old package versions?
In-Reply-To: <CALK03d27SFQwEHJrN2QAsUXP56FypY1myciWaxeruyy+OrFkbw@mail.gmail.com>
References: <CALK03d27SFQwEHJrN2QAsUXP56FypY1myciWaxeruyy+OrFkbw@mail.gmail.com>
Message-ID: <2bb91702-78f8-1831-db53-547826f61c01@gmail.com>

On 30/09/2019 5:25 p.m., Toby Hocking wrote:
> Hi all,
> 
> Today I had an R CMD build that failed while building a vignette because
> the vignette needs tidyr (>= 1.0, declared in DESCRIPTION Suggests) but my
> system had a previous version installed.
> 
> It did not take me too long to figure out the issue (solved by upgrading
> tidyr) but it would have been even faster / easier if R CMD build failed
> early, with an error message that says something like "Can not build
> package XXX because it Suggests: tidyr (>= 1.0) but tidyr 0.8.3 is
> installed"
> 
> Is that possible?

If you list a package in Suggests, your package should work (perhaps 
with some limitations) without the suggested one.  Unfortunately for 
you, the limitation "can't rebuild the vignettes" is incompatible with 
building the package, but I don't think there's anything you can put in 
the DESCRIPTION file to indicate this.

Duncan Murdoch


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Sep 30 16:17:34 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 30 Sep 2019 10:17:34 -0400
Subject: [Rd] Is missingness always passed on?
Message-ID: <1fc5777f-cc96-ceb7-f2e4-4475622ce77b-860@gmail.com>


There's a StackOverflow question 
https://stackoverflow.com/q/22024082/2554330 that references this text 
from ?missing:

"Currently missing can only be used in the immediate body of the 
function that defines the argument, not in the body of a nested function 
or a local call. This may change in the future."

Someone pointed out (in https://stackoverflow.com/a/58169498/2554330) 
that this isn't true in the examples they've tried:  missingness does 
get passed along.  This example shows it (this is slightly different 
than the SO example):

f1 <- function(x, y, z){
   if(missing(x))
     cat("f1: x is missing\n")
   if(missing(y))
     cat("f1: y is missing\n")
}

f2 <- function(x, y, z){
   if(missing(z))
     cat("f2: z is missing\n")
   f1(x, y)
}

f2()

which produces

f2: z is missing
f1: x is missing
f1: y is missing

Is the documentation out of date?  That quote appears to have been 
written in 2002.

Duncan Murdoch


