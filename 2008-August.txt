From nakama at ki.rim.or.jp  Fri Aug  1 03:59:52 2008
From: nakama at ki.rim.or.jp (Ei-ji Nakama)
Date: Fri, 1 Aug 2008 10:59:52 +0900
Subject: [Rd] AIX 5.3 --enable-R-shlib --with-x ---with-iconv make error
	with R-2.7.0 and R-2.7.1
In-Reply-To: <e936a3d0807222240v214dc96are946a5a0f725d15b@mail.gmail.com>
References: <e936a3d0807170359p62155163oe85a437d91506b98@mail.gmail.com>
	<dc41e1260807170812q32f9e9f1y4599dfbbbb348f53@mail.gmail.com>
	<e936a3d0807170838g540bb139ncca3b2eb64e0286@mail.gmail.com>
	<e936a3d0807180816w5a4e92b3m193b9a6bfc757d79@mail.gmail.com>
	<dc41e1260807190729y3fe861d5m7abbad780fff002@mail.gmail.com>
	<e936a3d0807200537t3d5ecfbet9dcd7716537fac7b@mail.gmail.com>
	<e936a3d0807201943pb57381cyc70d9811651440dd@mail.gmail.com>
	<dc41e1260807221734l7c3f3100ne51c6131422059d1@mail.gmail.com>
	<e936a3d0807222240v214dc96are946a5a0f725d15b@mail.gmail.com>
Message-ID: <dc41e1260807311859l7adbb424s815bae1e6d4c547b@mail.gmail.com>

Hi.

F?n L?ng - san seems to have been able to build it in xlc,xlf.
http://prs.ism.ac.jp/~nakama/AIX/
It is only gcc for AIX which is a buggy that I cannot build it well.

----------- F?n L?ng - san report -------------

export OBJECT_MODE=64
export LIBICONV=/where/libiconv/installed

./configure \
      CC="xlc_r -q64" \
      CFLAGS="-O -qstrict" \
      CXX="xlC_r -q64" \
      CXXFLAGS="-O -qstrict" \
      F77="xlf_r -q64" \
      AR="ar -X64" \
      CPPFLAGS="-I$LIBICONV/include -I/usr/lpp/X11/include/X11" \
      LDFLAGS="-L$LIBICONV/lib -L/usr/lib -L/usr/X11R6/lib" \
      --enable-R-shlib \
      --enable-BLAS-shlib \
      --with-x --with-readline=no

 make
 make install
 LANG=C make check-all

success!!
-- 
EI-JI Nakama <nakama (a) ki.rim.or.jp>
"\u4e2d\u9593\u6804\u6cbb" <nakama (a) ki.rim.or.jp>


From ripley at stats.ox.ac.uk  Fri Aug  1 12:42:31 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 1 Aug 2008 11:42:31 +0100 (BST)
Subject: [Rd] Rmpi on Fedora 8
Message-ID: <alpine.LFD.1.10.0808010716030.11292@gannet.stats.ox.ac.uk>

A yum update to lam 7.1.4 (from 7.1.2) broke Rmpi for me this last week 
and quite a few changes were needed to repair this, so I'm reporting here 
in case it helps others.  This was an x86_64 system - adjust 'lib64' 
suitably for 32-bit systems.

There seems to me to be major organizational changes for a 'patchlevel' 
update to a setup that previously worked out of the box.  They almost 
certainly apply to Fedora 9 too.

- yum left some lam 7.1.2 RPMs behind, and I have been unable to remove
   them via yum.  This causes some confusion.

- The lam libs are in /usr/lib64/lam/lib, and ldconfig needs to be told
   about this, so

   cat > /etc/ld.so.conf.d/lam.ld.conf
   /usr/lib64/lam/lib
   ^D
   /sbin/ldconfig

   (AFAIR, the previous version was in /usr/lib64/lam, and installed a
   ld.so.conf.d file.  Make sure /usr/lib64/lam is not in the ldconfig
   path.)

- At this point Rmpi may load and then immediately terminate R as the lam
   helpfile is not found (which is not nice of the lam libs).  You may need to
   export LAMHOME=/usr/lib64/lam .  Even if the helpfile is found, it still
   terminates R if lamd is not running.  (As I recall previous RPM
   installations had run lamboot at system boot.)

- The final step is to start a lam configuration.  I was only able to do
   this by setting -prefix, e.g.

    /usr/lib64/lam/bin/lamboot -prefix /usr/lib64/lam

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From j.c.l.ooms at uu.nl  Fri Aug  1 17:17:52 2008
From: j.c.l.ooms at uu.nl (Jeroen Ooms)
Date: Fri, 1 Aug 2008 08:17:52 -0700 (PDT)
Subject: [Rd] importing explicitly declared missing values in read.spss
 (foreign)
Message-ID: <18776776.post@talk.nabble.com>


There is a problem when importing an spss-file containing explicitly declared
missing values in R using the read.spss function from the foreign package.
I'm not sure these problems are the same in every version of spss, I am
using the latest version 16.0.2.

I included  http://www.nabble.com/file/p18776776/missingdata.sav
missingdata.sav  and  http://www.nabble.com/file/p18776776/frequencies.jpg
frequencies.jpg  as an example. The data contains 3 types of missing data: 2
are explicitly declared as a missing-value ('8' = NA and '9' = NAP), the
third type are the system missings. When this file is imported in R, only
the system missings are recognized as missing values, the others are just
imported as levels in the nominal case, and as (labeled) real values 8 and 9
in the continuous case. There are also no attributes in the object returned
by read.spss that contain information about which values/levels are the
missing values; their missingness seems to be completely ignored by the
function.

Is there some way or other function to be able to import spss files, with an
option that replaces all missing values with <NA>'s in R? Of course this
comes with the trade-off of losing the meaning of the missingness when there
are multiple types of missingness, but I think this is far less harmfull
than treating all missing values as normal values. 

[code]
> mydata <- read.spss("c:/users/jeroen/desktop/missingdata.sav",
> to.data.frame=T)
Warning messages:
1: In read.spss("c:/users/jeroen/desktop/missingdata.sav", to.data.frame =
T) :
  c:/users/jeroen/desktop/missingdata.sav: File-indicated character
representation code (1252) looks like a Windows codepage
2: In read.spss("c:/users/jeroen/desktop/missingdata.sav", to.data.frame =
T) :
  c:/users/jeroen/desktop/missingdata.sav: Unrecognized record type 7,
subtype 16 encountered in system file
3: In read.spss("c:/users/jeroen/desktop/missingdata.sav", to.data.frame =
T) :
  c:/users/jeroen/desktop/missingdata.sav: Unrecognized record type 7,
subtype 20 encountered in system file

> mydata
   SUBJECT CATEGORI CONTINUO
1        1      yes     3.11
2        2      yes     2.10
3        3      yes     5.34
4        4      yes     1.54
5        5      yes     3.89
6        6       no     2.98
7        7       no     4.53
8        8       no     1.98
9        9       no     3.68
10      10       no     2.94
11      11       NA     8.00
12      12       NA     8.00
13      13       NA     8.00
14      14       NA     8.00
15      15       NA     8.00
16      16      NAP     9.00
17      17      NAP     9.00
18      18      NAP     9.00
19      19      NAP     9.00
20      20      NAP     9.00
21      21     <NA>       NA
22      22     <NA>       NA
23      23     <NA>       NA
24      24     <NA>       NA
25      25     <NA>       NA

> is.na(mydata$CONTINUO)
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE 
TRUE

> is.na(mydata$CATEGORI)
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE 
TRUE

> summary(mydata)
    SUBJECT   CATEGORI    CONTINUO    
 Min.   : 1   yes :5   Min.   :1.540  
 1st Qu.: 7   no  :5   1st Qu.:3.078  
 Median :13   NA  :5   Median :6.670  
 Mean   :13   NAP :5   Mean   :5.854  
 3rd Qu.:19   NA's:5   3rd Qu.:8.250  
 Max.   :25            Max.   :9.000  
                       NA's   :5.000  
[/code]


-- 
View this message in context: http://www.nabble.com/importing-explicitly-declared-missing-values-in-read.spss-%28foreign%29-tp18776776p18776776.html
Sent from the R devel mailing list archive at Nabble.com.


From maechler at stat.math.ethz.ch  Fri Aug  1 17:33:38 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 1 Aug 2008 17:33:38 +0200
Subject: [Rd] 4-int indexing limit of R {Re: [R] allocMatrix limits}
In-Reply-To: <48931F15.4030808@kutsyy.com>
References: <48922C4B.5030704@kutsyy.com>
	<alpine.LFD.1.10.0807312244210.3122@gannet.stats.ox.ac.uk>
	<4892402C.8080403@kutsyy.com>
	<18579.4592.762251.455292@cmath-5.math.ethz.ch>
	<48931F15.4030808@kutsyy.com>
Message-ID: <18579.11474.198563.118323@cmath-5.math.ethz.ch>

[[Topic diverted from R-help]]

>>>>> "VK" == Vadim Kutsyy <vadim at kutsyy.com>
>>>>>     on Fri, 01 Aug 2008 07:35:01 -0700 writes:

    VK> Martin Maechler wrote:
    >> 
      VK> The problem is in array.c, where allocMatrix check for
      VK> "if ((double)nrow * (double)ncol > INT_MAX)".  But why
      VK> itn is used and not long int for indexing? (max int is
      VK> 2147483647, max long int is 9223372036854775807)

    >> Well, Brian gave you all info:
    >>  (  ?Memory-limits )

    VK> exactly, and given that most modern system used for
    VK> computations (i.e.  64bit system) have long int which is
    VK> much larger than int, I am wondering why long int is not
    VK> used for indexing (I don't think that 4 bit vs 8 bit
    VK> storage is an issue).

Well, fortunately, reasonable compilers have indeed kept 
'long' == 'long int'  to mean 32-bit integers
((less reasonable compiler writers have not, AFAIK: which leads
  of course to code that no longer compiles correctly when
  originally it did))
But of course you are right that  64-bit integers
(typically == 'long long', and really == 'int64') are very
natural on 64-bit architectures.
But see below.


    >> Did you really carefully read ?Memory-limits ??

    VK> Yes, it is specify that 4 bit int is used for indexing
    VK> in all version of R, but why? I think 2147483647
    VK> elements for a single vector is OK, but not as total
    VK> number of elements for the matrix.  I am running out of
    VK> indexing at mere 10% memory consumption.

If you have too large a numeric matrix, it would be larger than
2^31 * 8 bytes ~=  2^34 / 2^20 ~= 16'000 Megabytes.
If that is is 10% only for you,  you'd have around 160 GB of
RAM.  That's quite a impressive.
I agree that it is at least in the "ball park" of what is
available today.


[........]

    VK> PS: I have no problem to go and modify C code, but I am
    VK> just wondering what are the reasons for having such
    VK> limitation.

Compatibility for one:

Note that R objects are (pointers to) C structs that are
"well-defined" platform independently, and I'd say that this
should remain so.
Consequently 64ints (or another "longer int"), would have to be
there "in R", also on 32bit platforms. That may well be feasible,
but it would double the size of quite a few objects.

I think what you are implicitly proposing is that
we'd want 64-bit integer as an R-level type, and that are R
would use (and/or coerce to it from 'int32') for indexing
everywhere.

But more importantly, all (or very much of) the currently
existing C- and Fortran-code (called via .Call(), .C(), .Fortran)
would also have to be able to deal with the "longer ints".

One of the last times this topic came up (within R-core),
we found that for all the matrix/vector operations,
we really would need versions of  BLAS / LAPACK that would also
work with these "big" matrices, ie. such a BLAS/Lapack would
also have to internally use "longer int" for indexing.
At that point in time, we had decied we would at least wait to
hear about the development of such BLAS/LAPACK libraries.

Interested to hear other opinions / get more info on this topic.
I do agree that it would be nice to get over this limit within a
few years.

Martin


From vadim at kutsyy.com  Fri Aug  1 19:22:43 2008
From: vadim at kutsyy.com (Vadim Kutsyy)
Date: Fri, 01 Aug 2008 10:22:43 -0700
Subject: [Rd] 4-int indexing limit of R {Re: [R] allocMatrix limits}
In-Reply-To: <18579.11474.198563.118323@cmath-5.math.ethz.ch>
References: <48922C4B.5030704@kutsyy.com>	<alpine.LFD.1.10.0807312244210.3122@gannet.stats.ox.ac.uk>	<4892402C.8080403@kutsyy.com>	<18579.4592.762251.455292@cmath-5.math.ethz.ch>	<48931F15.4030808@kutsyy.com>
	<18579.11474.198563.118323@cmath-5.math.ethz.ch>
Message-ID: <48934663.7060508@kutsyy.com>

Martin Maechler wrote:
> [[Topic diverted from R-help]]
>
> Well, fortunately, reasonable compilers have indeed kept 
> 'long' == 'long int'  to mean 32-bit integers
> ((less reasonable compiler writers have not, AFAIK: which leads
>   of course to code that no longer compiles correctly when
>   originally it did))
> But of course you are right that  64-bit integers
> (typically == 'long long', and really == 'int64') are very
> natural on 64-bit architectures.
> But see below.
>   
well in 64bit Ubunty, /usr/include/limits.h defines:

/* Minimum and maximum values a `signed long int' can hold.  */
#  if __WORDSIZE == 64
#   define LONG_MAX     9223372036854775807L
#  else
#   define LONG_MAX     2147483647L
#  endif
#  define LONG_MIN      (-LONG_MAX - 1L)

and using simple code to test 
(http://home.att.net/~jackklein/c/inttypes.html#int) my desktop, which 
is standard Intel computer, does show.

Signed long min: -9223372036854775808 max: 9223372036854775807

> If you have too large a numeric matrix, it would be larger than
> 2^31 * 8 bytes ~=  2^34 / 2^20 ~= 16'000 Megabytes.
> If that is is 10% only for you,  you'd have around 160 GB of
> RAM.  That's quite a impressive.
>   
 >  cat /proc/meminfo | grep MemTotal
MemTotal:     145169248 kB

We have "smaller" SGI NUMAflex to play with, where the memory can 
increased to 512Gb ("larger" version doesn't have this "limitation").  
But with even commodity hardware you can easily get 128Gb for reasonable 
price (i.e. Dell PowerEdge R900)

> Note that R objects are (pointers to) C structs that are
> "well-defined" platform independently, and I'd say that this
> should remain so.
>
>   
I forgot that R stores two dimensional array in a single dimensional  C 
array. Now I understand why there is a limitation on total number of 
elements.  But this is a big limitations.
> One of the last times this topic came up (within R-core),
> we found that for all the matrix/vector operations,
> we really would need versions of  BLAS / LAPACK that would also
> work with these "big" matrices, ie. such a BLAS/Lapack would
> also have to internally use "longer int" for indexing.
> At that point in time, we had decied we would at least wait to
> hear about the development of such BLAS/LAPACK libraries
BLAS supports two dimensional metrics definition, so if we would store 
matrix as two dimensional object, we would be fine.  But than all R code 
as well as all packages would have to be modified.


From maechler at stat.math.ethz.ch  Fri Aug  1 21:05:16 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 1 Aug 2008 21:05:16 +0200
Subject: [Rd] 4-int indexing limit of R {Re: [R] allocMatrix limits}
In-Reply-To: <48934663.7060508@kutsyy.com>
References: <48922C4B.5030704@kutsyy.com>
	<alpine.LFD.1.10.0807312244210.3122@gannet.stats.ox.ac.uk>
	<4892402C.8080403@kutsyy.com>
	<18579.4592.762251.455292@cmath-5.math.ethz.ch>
	<48931F15.4030808@kutsyy.com>
	<18579.11474.198563.118323@cmath-5.math.ethz.ch>
	<48934663.7060508@kutsyy.com>
Message-ID: <18579.24172.771884.743736@cmath-5.math.ethz.ch>

>>>>> "VK" == Vadim Kutsyy <vadim at kutsyy.com>
>>>>>     on Fri, 01 Aug 2008 10:22:43 -0700 writes:

    VK> Martin Maechler wrote:
    >> [[Topic diverted from R-help]]
    >> 
    >> Well, fortunately, reasonable compilers have indeed kept
    >> 'long' == 'long int' to mean 32-bit integers ((less
    >> reasonable compiler writers have not, AFAIK: which leads
    >> of course to code that no longer compiles correctly when
    >> originally it did)) But of course you are right that
    >> 64-bit integers (typically == 'long long', and really ==
    >> 'int64') are very natural on 64-bit architectures.  But
    >> see below.

... I wrote complete rubbish, 
and I am embarrassed ...

    >> 
    VK> well in 64bit Ubunty, /usr/include/limits.h defines:

    VK> /* Minimum and maximum values a `signed long int' can hold.  */
    VK> #  if __WORDSIZE == 64
    VK> #   define LONG_MAX     9223372036854775807L
    VK> #  else
    VK> #   define LONG_MAX     2147483647L
    VK> #  endif
    VK> #  define LONG_MIN      (-LONG_MAX - 1L)

    VK> and using simple code to test 
    VK> (http://home.att.net/~jackklein/c/inttypes.html#int) my desktop, which 
    VK> is standard Intel computer, does show.

    VK> Signed long min: -9223372036854775808 max: 9223372036854775807

yes.  I am really embarrassed.

What I was trying to say was that
the definition of  int / long /...  should not change when going
from 32bit architecture to  64bit 
and that the R internal structures consequently should also be
the same on 32-bit and 64-bit platforms

    >> If you have too large a numeric matrix, it would be larger than
    >> 2^31 * 8 bytes ~=  2^34 / 2^20 ~= 16'000 Megabytes.
    >> If that is is 10% only for you,  you'd have around 160 GB of
    >> RAM.  That's quite a impressive.
    >> 
    >> cat /proc/meminfo | grep MemTotal
    VK> MemTotal:     145169248 kB

    VK> We have "smaller" SGI NUMAflex to play with, where the memory can 
    VK> increased to 512Gb ("larger" version doesn't have this "limitation").  
    VK> But with even commodity hardware you can easily get 128Gb for reasonable 
    VK> price (i.e. Dell PowerEdge R900)

    >> Note that R objects are (pointers to) C structs that are
    >> "well-defined" platform independently, and I'd say that this
    >> should remain so.

    >> 
    VK> I forgot that R stores two dimensional array in a single dimensional  C 
    VK> array. Now I understand why there is a limitation on total number of 
    VK> elements.  But this is a big limitations.

Yes, maybe

    >> One of the last times this topic came up (within R-core),
    >> we found that for all the matrix/vector operations,
    >> we really would need versions of  BLAS / LAPACK that would also
    >> work with these "big" matrices, ie. such a BLAS/Lapack would
    >> also have to internally use "longer int" for indexing.
    >> At that point in time, we had decied we would at least wait to
    >> hear about the development of such BLAS/LAPACK libraries

    VK> BLAS supports two dimensional metrics definition, so if we would store 
    VK> matrix as two dimensional object, we would be fine.  But than all R code 
    VK> as well as all packages would have to be modified.

exactly.  And that was what I meant when I said "Compatibility".

But rather than changing the  
 "matrix = colmunwise stored as long vector" paradigm, should
rather change from 32-bit indexing to longer one.

The hope is that we eventually make up a scheme
which would basically allow to just recompile all packages :

In src/include/Rinternals.h,
we have had the following three lines for several years now:
------------------------------------------------------------------------------------
/* type for length of vectors etc */
typedef int R_len_t; /* will be long later, LONG64 or ssize_t on Win64 */
#define R_LEN_T_MAX INT_MAX
------------------------------------------------------------------------------------

and you are right, that it may be time to experiment a bit more
with replacing 'int' with long (and also the corresponding _MAX)
setting there,
and indeed, in the array.c  code you cited, should repalce
INT_MAX  by  R_LEN_T_MAX

This still does not solve the problem that we'd have to get to
a BLAS / Lapack version that correctly works with "long indices"...
which may (or may not) be easier than I had thought.

Martin


From ripley at stats.ox.ac.uk  Fri Aug  1 23:45:25 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 1 Aug 2008 22:45:25 +0100 (BST)
Subject: [Rd] data.matrix (was sapply(Date, is.numeric))
In-Reply-To: <18577.29753.76571.661140@stat.math.ethz.ch>
References: <EEBC169715EB8C438D3C9283AF0F201C023E47B4@MSGBOSCLM2WIN.DMN1.FMR.COM>
	<18576.11368.858281.462289@stat.math.ethz.ch>
	<alpine.LFD.1.10.0807301248250.24325@auk.stats.ox.ac.uk>
	<18576.26736.142076.965510@stat.math.ethz.ch>
	<alpine.LFD.1.10.0807310830110.10523@gannet.stats.ox.ac.uk>
	<18577.29753.76571.661140@stat.math.ethz.ch>
Message-ID: <alpine.LFD.1.10.0808012244100.30451@gannet.stats.ox.ac.uk>

I've committed a more liberal version to R-devel.  (It even handles S4 
classes with an as() method.)

On Thu, 31 Jul 2008, Martin Maechler wrote:

>>>>>> "PBR" == Prof Brian Ripley <ripley at stats.ox.ac.uk>
>>>>>>     on Thu, 31 Jul 2008 08:36:22 +0100 (BST) writes:
>
>    PBR> I've now committed fixes in R-patched and R-devel.
>    PBR> There is one consequence: data.matrix() was testing for numeric columns by
>    PBR> unlist(lapply(x, is.numeric)) and so incorrectly treating Date and POSIXct
>    PBR> columns as numeric (which we had decided they were not).  This affects
>    PBR> package gvlma.
>
>    PBR> data.matrix() is now working as documented, but as we have an exception
>    PBR> for factors, do we also want exceptions for Date and POSIXct?
>
> Yes, that's a good idea, and much in the spirit of
> data.matrix()
> as I have understood it.
>
> Note the following from  help(data.matrix)
>
> where I think the 'Title' and 'Description' are more liberal
> (rightly so) than 'Details' :
>
> >> Convert a Data Frame to a Numeric Matrix
> >>
> >> Description:
> >>
> >>      Return the matrix obtained by converting all the variables in a
> >>      data frame to numeric mode and then binding them together as the
> >>      columns of a matrix.  Factors and ordered factors are replaced by
> >>      their internal codes.
>
>     [...........]
>
> >> Details:
> >>
> >>      Supplying a data frame with columns which are not numeric, factor
> >>      or logical is an error.  A warning is given if any non-factor
> >>      column has a class, as then information can be lost.
>
>
> Do we really have good reasons to give an error if a column is
> not numeric (nor of the "exception class")?
>
> Couldn't we just   lapply(., as.numeric)
> and if that doesn't give errors
> just "be happy" ?
>
> Martin
>
>
>    PBR> On Wed, 30 Jul 2008, Martin Maechler wrote:
>
>    >>>>>>> "BDR" == Prof Brian Ripley <ripley at stats.ox.ac.uk>
>    >>>>>>> on Wed, 30 Jul 2008 13:29:38 +0100 (BST) writes:
>    >>
>    BDR> On Wed, 30 Jul 2008, Martin Maechler wrote:
>    >> >>>>>>> "RobMcG" == McGehee, Robert <Robert.McGehee at geodecapital.com>
>    >> >>>>>>> on Tue, 29 Jul 2008 15:40:37 -0400 writes:
>    >> >>
>    RobMcG> FYI,
>    RobMcG> I've tried posting the below message twice to the bug tracking system,
>    >> >>
>    >> >> [....... r-bugs problems discussed in a separate thread ....]
>    >> >>
>    >> >>
>    >> >>
>    RobMcG> R-developers,
>    RobMcG> The results below are inconsistent. From the documentation for
>    RobMcG> is.numeric, I expect FALSE in both cases.
>    >> >>
>    >> >> >> x <- data.frame(dt=Sys.Date())
>    >> >> >> is.numeric(x$dt)
>    RobMcG> [1] FALSE
>    >> >> >> sapply(x, is.numeric)
>    RobMcG> dt
>    RobMcG> TRUE
>    >> >>
>    RobMcG> ## Yet, sapply seems aware of the Date class
>    >> >> >> sapply(x, class)
>    RobMcG> dt
>    RobMcG> "Date"
>    >> >>
>    >> >> Yes, thanks a lot, Robert, for the report.
>    >> >>
>    >> >> That *is* a bug somewhere in the .Internal(lapply(...)) C code,
>    >> >> when S3 dispatch of primitive functions should happen.
>    >>
>    BDR> The bug is in do_is, which uses CHAR(PRINTNAME(CAR(call))), and when
>    BDR> called from lapply that gives "FUN" not "is.numeric".  The root cause is
>    BDR> the following comment
>    >>
>    BDR> FUN = CADR(args);  /* must be unevaluated for use in e.g. bquote */
>    >>
>    BDR> and hence that the function in the *call* passed to do_is can be
>    BDR> unevaluated.
>    >>
>    >> aah!  I see.
>    >>
>    >> >> Here's an R scriptlet exposing a 2nd example
>    >> >>
>    >> >> ### lapply(list, FUN)
>    >> >> ### ------------------ seems to sometimes fail for
>    >> >> ### .Primitive S3-generic functions
>    >> >>
>    >> >> (ds <- seq(from=Sys.Date(), by=1, length=4))
>    >> >> ##[1] "2008-07-30" "2008-07-31" "2008-08-01" "2008-08-02"
>    >> >> ll <- list(d=ds)
>    >> >> lapply(list(d=ds), round)
>    >> >> ## -> Error in lapply(list(d = ds), round) : dispatch error
>    >>
>    >>
>    BDR> And that's a separate issue, in DispatchGroup which states that arguments
>    BDR> have been evaluated (true) but the 'call' from lapply gives the
>    BDR> unevaluated arguments and so there is a mismatch.
>    >>
>    >> yes, I too found that this was a separate issue, the latter
>    >> one being new since version 2.7.0
>    >>
>    BDR> I'm testing fixes for both.
>    >>
>    >> Excellent!
>    >> Martin
>    >>
>    >>
>    >> >> ## or -- related to bug report by Robert McGehee on R-devel, on 2008-07-29:
>    >> >> sapply(list(d=ds), is.numeric)
>    >> >> ## TRUE
>    >> >>
>    >> >> ## in spite of
>    >> >> is.numeric(`[[`(ll,1)) ## FALSE , because of
>    >> >> is.numeric.date
>    >> >>
>    >> >> ## or
>    >> >> round(`[[`(ll,1))
>    >> >> ## [1] "2008-07-30" "2008-07-31" "2008-08-01" "2008-08-02"
>    >> >>
>    >> >> ##-----------------------------
>    >> >>
>    >> >> But I'm currently too much tied up with other duties,
>    >> >> to find and test bug-fix.
>    >> >>
>    >> >> Martin Maechler, ETH Zurich and R-Core Team
>    >>
>    >> ______________________________________________
>    >> R-devel at r-project.org mailing list
>    >> https://stat.ethz.ch/mailman/listinfo/r-devel
>    >>
>
>    PBR> --
>    PBR> Brian D. Ripley,                  ripley at stats.ox.ac.uk
>    PBR> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
>    PBR> University of Oxford,             Tel:  +44 1865 272861 (self)
>    PBR> 1 South Parks Road,                     +44 1865 272866 (PA)
>    PBR> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Sun Aug  3 09:07:03 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sun, 3 Aug 2008 08:07:03 +0100 (BST)
Subject: [Rd] 4-int indexing limit of R {Re: [R] allocMatrix limits}
In-Reply-To: <18579.24172.771884.743736@cmath-5.math.ethz.ch>
References: <48922C4B.5030704@kutsyy.com>
	<alpine.LFD.1.10.0807312244210.3122@gannet.stats.ox.ac.uk>
	<4892402C.8080403@kutsyy.com>
	<18579.4592.762251.455292@cmath-5.math.ethz.ch>
	<48931F15.4030808@kutsyy.com>
	<18579.11474.198563.118323@cmath-5.math.ethz.ch>
	<48934663.7060508@kutsyy.com>
	<18579.24172.771884.743736@cmath-5.math.ethz.ch>
Message-ID: <alpine.LFD.1.10.0808012153280.24066@gannet.stats.ox.ac.uk>

There are several issues here, and a good knowledge of the R Internals 
manual seems a prerequisite (and, considering where this started, of the 
relevant help pages!).

R uses its integer type for indexing vectors and arrays (which can be 
indexed as vectors or via an appropriate number of indices).  So if we 
allow more than 2^31-1 elements we need a way to index them in R.  One 
idea would be to make R's integer type int64 on suitable platforms, but 
that would have really extensive ramifications (in the R sources and in 
packages).  Another idea (I think suggested by Luke Tierney) is to allow 
double() indices which might be less disruptive.  Adding a new type would 
be a very serious amount of work (speaking as someone who has done it).

Another issue is the use of Fortran for matrix algebra.  That is likely to 
cause portability issues, and there's no point in doing it unless one has 
an efficient implementation of e.g. BLAS/LAPACK, the reference 
implementation being slow at even 100 million.  (That's probably not an 
empty set, as I see ACML has a int64 BLAS.)

There are lots of portability issues -- e.g. the current save() format is 
the same on all systems and we have complete interoperability.  (That 
cannot be the case if we allow big vectors to be saved.)

But at present I don't see a significant number of applications any time 
soon.  2 billion items in a homogenous group is a *lot* of data.  I know 
there are applications with 2 billion items of data already, but is it 
appropriate to store them in a single vector or matrix rather than say a 
data frame or DBMS tables?  And will there 'ever' be more than a tiny 
demand for such applications?  (I am excluding mainly-zero vectors, and 
Martin has already pointed out that we have ways to deal with those.)

It is three or four years since we first discussed some of the options, 
and at the time we thought it would be about five years before suitably 
large machines became available to more than a handful of R users.  That 
still seems about right: >=128GB systems (which is about what you need 
for larger than 16GB objects) may start to become non-negligible in a year 
or two.

R is a volunteer project with limited resources -- there are AFAIK less 
than a handful of people with the knowledge of R internals to tackle these 
issues.  Only if one of them has a need to work with larger datasets is 
this likely to be worked on.


>>>>>> "VK" == Vadim Kutsyy <vadim at kutsyy.com>
>>>>>>     on Fri, 01 Aug 2008 10:22:43 -0700 writes:
>
>    VK> Martin Maechler wrote:
>    >> [[Topic diverted from R-help]]
>    >>
>    >> Well, fortunately, reasonable compilers have indeed kept
>    >> 'long' == 'long int' to mean 32-bit integers ((less
>    >> reasonable compiler writers have not, AFAIK: which leads
>    >> of course to code that no longer compiles correctly when
>    >> originally it did)) But of course you are right that
>    >> 64-bit integers (typically == 'long long', and really ==
>    >> 'int64') are very natural on 64-bit architectures.  But
>    >> see below.
>
> ... I wrote complete rubbish,
> and I am embarrassed ...
>
>    >>
>    VK> well in 64bit Ubunty, /usr/include/limits.h defines:
>
>    VK> /* Minimum and maximum values a `signed long int' can hold.  */
>    VK> #  if __WORDSIZE == 64
>    VK> #   define LONG_MAX     9223372036854775807L
>    VK> #  else
>    VK> #   define LONG_MAX     2147483647L
>    VK> #  endif
>    VK> #  define LONG_MIN      (-LONG_MAX - 1L)
>
>    VK> and using simple code to test
>    VK> (http://home.att.net/~jackklein/c/inttypes.html#int) my desktop, which
>    VK> is standard Intel computer, does show.
>
>    VK> Signed long min: -9223372036854775808 max: 9223372036854775807
>
> yes.  I am really embarrassed.
>
> What I was trying to say was that
> the definition of  int / long /...  should not change when going
> from 32bit architecture to  64bit
> and that the R internal structures consequently should also be
> the same on 32-bit and 64-bit platforms
>
>    >> If you have too large a numeric matrix, it would be larger than
>    >> 2^31 * 8 bytes ~=  2^34 / 2^20 ~= 16'000 Megabytes.
>    >> If that is is 10% only for you,  you'd have around 160 GB of
>    >> RAM.  That's quite a impressive.
>    >>
>    >> cat /proc/meminfo | grep MemTotal
>    VK> MemTotal:     145169248 kB
>
>    VK> We have "smaller" SGI NUMAflex to play with, where the memory can
>    VK> increased to 512Gb ("larger" version doesn't have this "limitation").
>    VK> But with even commodity hardware you can easily get 128Gb for reasonable
>    VK> price (i.e. Dell PowerEdge R900)
>
>    >> Note that R objects are (pointers to) C structs that are
>    >> "well-defined" platform independently, and I'd say that this
>    >> should remain so.
>
>    >>
>    VK> I forgot that R stores two dimensional array in a single dimensional  C
>    VK> array. Now I understand why there is a limitation on total number of
>    VK> elements.  But this is a big limitations.
>
> Yes, maybe
>
>    >> One of the last times this topic came up (within R-core),
>    >> we found that for all the matrix/vector operations,
>    >> we really would need versions of  BLAS / LAPACK that would also
>    >> work with these "big" matrices, ie. such a BLAS/Lapack would
>    >> also have to internally use "longer int" for indexing.
>    >> At that point in time, we had decied we would at least wait to
>    >> hear about the development of such BLAS/LAPACK libraries
>
>    VK> BLAS supports two dimensional metrics definition, so if we would store
>    VK> matrix as two dimensional object, we would be fine.  But than all R code
>    VK> as well as all packages would have to be modified.
>
> exactly.  And that was what I meant when I said "Compatibility".
>
> But rather than changing the
> "matrix = colmunwise stored as long vector" paradigm, should
> rather change from 32-bit indexing to longer one.
>
> The hope is that we eventually make up a scheme
> which would basically allow to just recompile all packages :
>
> In src/include/Rinternals.h,
> we have had the following three lines for several years now:
> ------------------------------------------------------------------------------------
> /* type for length of vectors etc */
> typedef int R_len_t; /* will be long later, LONG64 or ssize_t on Win64 */
> #define R_LEN_T_MAX INT_MAX
> ------------------------------------------------------------------------------------
>
> and you are right, that it may be time to experiment a bit more
> with replacing 'int' with long (and also the corresponding _MAX)
> setting there,
> and indeed, in the array.c  code you cited, should repalce
> INT_MAX  by  R_LEN_T_MAX
>
> This still does not solve the problem that we'd have to get to
> a BLAS / Lapack version that correctly works with "long indices"...
> which may (or may not) be easier than I had thought.
>
> Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From jh910 at juno.com  Mon Aug  4 04:52:50 2008
From: jh910 at juno.com (J. R. M. Hosking)
Date: Sun, 03 Aug 2008 22:52:50 -0400
Subject: [Rd] axis() ignores supplied value of argument mgp[3]?
In-Reply-To: <alpine.LFD.1.10.0807291612130.30827@gannet.stats.ox.ac.uk>
References: <g5tihu$k8u$1@ger.gmane.org>
	<alpine.LFD.1.10.0807291612130.30827@gannet.stats.ox.ac.uk>
Message-ID: <g75qu2$u9h$1@ger.gmane.org>

Prof Brian Ripley wrote:
> What is true is that the line is set before the inline setting of mgp is 
> processed: it all depends on what 'supplied' means, and you supplied two 
> values.
> 
> This is changed in R-patched now.

Thank you, that works.  Here is a perhaps related issue:

R Help on 'axis' for argument 'line' says "The relative placing of
tick marks and tick labels is unchanged".  But this appears not to be
the case when graphics parameter mgp[3] is nonzero:

   plot(1:4, yaxt="n")
   par(mgp=c(3,2,1))
   axis(2, 1:2)
   axis(2, 3:4, line=1)

which one (or, at least, I) would expect to place all the tick labels
the same distance into the margin, does not in fact do so.

My interpretation is that axis() is taking mgp[2] rather than the
correct mgp[2]-mgp[3] as the relative position of the tick mark with
respect to the axis line.

J. R. M. Hosking


 > R.version
                _
platform       i386-pc-mingw32
arch           i386
os             mingw32
system         i386, mingw32
status
major          2
minor          7.1
year           2008
month          06
day            23
svn rev        45970
language       R
version.string R version 2.7.1 (2008-06-23)


From ripley at stats.ox.ac.uk  Mon Aug  4 07:39:19 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Mon, 4 Aug 2008 06:39:19 +0100 (BST)
Subject: [Rd] importing explicitly declared missing values in read.spss
 (foreign)
In-Reply-To: <18776776.post@talk.nabble.com>
References: <18776776.post@talk.nabble.com>
Message-ID: <alpine.LFD.1.10.0808011654200.7435@gannet.stats.ox.ac.uk>

>From the messages you get I do not believe this is a recent version of 
read.spss (message 2 no longer appears), and you haven't followed the 
posting guide and told us.  However, your message 3 does still appear, and 
that might be significant.

A small anount of googling came up with

https://stat.ethz.ch/pipermail/r-help/2008-April/159342.html

and I guess this is the same issue.  A quick look at the code for 
read.spss() suggests that the information on user-defined missing values 
is being read in, and that there are yet more possible types of 
missingness (only some of which I understand).  So what is needed is to 
return that info to the R user: now we have an example at least something 
shold be possible.

On Fri, 1 Aug 2008, Jeroen Ooms wrote:

>
> There is a problem when importing an spss-file containing explicitly declared
> missing values in R using the read.spss function from the foreign package.
> I'm not sure these problems are the same in every version of spss, I am
> using the latest version 16.0.2.
>
> I included  http://www.nabble.com/file/p18776776/missingdata.sav
> missingdata.sav  and  http://www.nabble.com/file/p18776776/frequencies.jpg
> frequencies.jpg  as an example. The data contains 3 types of missing data: 2
> are explicitly declared as a missing-value ('8' = NA and '9' = NAP), the
> third type are the system missings. When this file is imported in R, only
> the system missings are recognized as missing values, the others are just
> imported as levels in the nominal case, and as (labeled) real values 8 and 9
> in the continuous case. There are also no attributes in the object returned
> by read.spss that contain information about which values/levels are the
> missing values; their missingness seems to be completely ignored by the
> function.
>
> Is there some way or other function to be able to import spss files, with an
> option that replaces all missing values with <NA>'s in R? Of course this
> comes with the trade-off of losing the meaning of the missingness when there
> are multiple types of missingness, but I think this is far less harmfull
> than treating all missing values as normal values.

If the missingness information were returned others are likely to 
disagree, especially for factors.  All that is 'harmfull' is that you are 
not told that value labels NA and NAP were to be regarded as 'missing' in 
SPSS.  We've no idea whether if would be a more or less egregious choice 
to map them to R's NA, and certainly are not in a position to assert 'far 
less harmfull' in general.


> [code]
>> mydata <- read.spss("c:/users/jeroen/desktop/missingdata.sav",
>> to.data.frame=T)
> Warning messages:
> 1: In read.spss("c:/users/jeroen/desktop/missingdata.sav", to.data.frame =
> T) :
>  c:/users/jeroen/desktop/missingdata.sav: File-indicated character
> representation code (1252) looks like a Windows codepage
> 2: In read.spss("c:/users/jeroen/desktop/missingdata.sav", to.data.frame =
> T) :
>  c:/users/jeroen/desktop/missingdata.sav: Unrecognized record type 7,
> subtype 16 encountered in system file
> 3: In read.spss("c:/users/jeroen/desktop/missingdata.sav", to.data.frame =
> T) :
>  c:/users/jeroen/desktop/missingdata.sav: Unrecognized record type 7,
> subtype 20 encountered in system file
>
>> mydata
>   SUBJECT CATEGORI CONTINUO
> 1        1      yes     3.11
> 2        2      yes     2.10
> 3        3      yes     5.34
> 4        4      yes     1.54
> 5        5      yes     3.89
> 6        6       no     2.98
> 7        7       no     4.53
> 8        8       no     1.98
> 9        9       no     3.68
> 10      10       no     2.94
> 11      11       NA     8.00
> 12      12       NA     8.00
> 13      13       NA     8.00
> 14      14       NA     8.00
> 15      15       NA     8.00
> 16      16      NAP     9.00
> 17      17      NAP     9.00
> 18      18      NAP     9.00
> 19      19      NAP     9.00
> 20      20      NAP     9.00
> 21      21     <NA>       NA
> 22      22     <NA>       NA
> 23      23     <NA>       NA
> 24      24     <NA>       NA
> 25      25     <NA>       NA
>
>> is.na(mydata$CONTINUO)
> [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
> TRUE
>
>> is.na(mydata$CATEGORI)
> [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
> TRUE
>
>> summary(mydata)
>    SUBJECT   CATEGORI    CONTINUO
> Min.   : 1   yes :5   Min.   :1.540
> 1st Qu.: 7   no  :5   1st Qu.:3.078
> Median :13   NA  :5   Median :6.670
> Mean   :13   NAP :5   Mean   :5.854
> 3rd Qu.:19   NA's:5   3rd Qu.:8.250
> Max.   :25            Max.   :9.000
>                       NA's   :5.000
> [/code]
>
>
> -- 
> View this message in context: http://www.nabble.com/importing-explicitly-declared-missing-values-in-read.spss-%28foreign%29-tp18776776p18776776.html
> Sent from the R devel mailing list archive at Nabble.com.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Mon Aug  4 11:53:50 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Mon, 4 Aug 2008 10:53:50 +0100 (BST)
Subject: [Rd] axis() ignores supplied value of argument mgp[3]?
In-Reply-To: <g75qu2$u9h$1@ger.gmane.org>
References: <g5tihu$k8u$1@ger.gmane.org>
	<alpine.LFD.1.10.0807291612130.30827@gannet.stats.ox.ac.uk>
	<g75qu2$u9h$1@ger.gmane.org>
Message-ID: <alpine.LFD.1.10.0808041006480.11319@gannet.stats.ox.ac.uk>

On Sun, 3 Aug 2008, J. R. M. Hosking wrote:

> Prof Brian Ripley wrote:
>> What is true is that the line is set before the inline setting of mgp is 
>> processed: it all depends on what 'supplied' means, and you supplied two 
>> values.
>> 
>> This is changed in R-patched now.
>
> Thank you, that works.  Here is a perhaps related issue:
>
> R Help on 'axis' for argument 'line' says "The relative placing of
> tick marks and tick labels is unchanged".  But this appears not to be
> the case when graphics parameter mgp[3] is nonzero:
>
>  plot(1:4, yaxt="n")
>  par(mgp=c(3,2,1))
>  axis(2, 1:2)
>  axis(2, 3:4, line=1)
>
> which one (or, at least, I) would expect to place all the tick labels
> the same distance into the margin, does not in fact do so.

I don't think that is what it says. Setting 'line' or 'pos' temporarily 
sets mgp[3] to zero (which is what the help implies in parts you did not 
quote).

Otherwise 'line' would just duplicate mgp[3].

> My interpretation is that axis() is taking mgp[2] rather than the
> correct mgp[2]-mgp[3] as the relative position of the tick mark with

Why is it correct when you have been told 'mgp[3]' was overridden?
We could explicitly say it is treated as zero for ultimate clarity.

> respect to the axis line.
>
> J. R. M. Hosking
>
>
>> R.version
>               _
> platform       i386-pc-mingw32
> arch           i386
> os             mingw32
> system         i386, mingw32
> status
> major          2
> minor          7.1
> year           2008
> month          06
> day            23
> svn rev        45970
> language       R
> version.string R version 2.7.1 (2008-06-23)
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From j.c.l.ooms at uu.nl  Mon Aug  4 13:01:44 2008
From: j.c.l.ooms at uu.nl (Jeroen Ooms)
Date: Mon, 4 Aug 2008 04:01:44 -0700 (PDT)
Subject: [Rd] importing explicitly declared missing values in read.spss
 (foreign)
In-Reply-To: <alpine.LFD.1.10.0808011654200.7435@gannet.stats.ox.ac.uk>
References: <18776776.post@talk.nabble.com>
	<alpine.LFD.1.10.0808011654200.7435@gannet.stats.ox.ac.uk>
Message-ID: <18809176.post@talk.nabble.com>



Prof Brian Ripley wrote:
> 
>>From the messages you get I do not believe this is a recent version of
read.spss (message 2 no longer appears)... 

I am sorry you are right here, I was using an outdated version of foreign. I
have updated my packages. My current version is now R version 2.7.1
(2008-06-23) with foreign_0.8-28.

I have experimented importing some spss datafiles, mostly from the sample
data files that are included with SPSS. Most of these files do not generate
any warnings, so I am not sure this is related to the missingness. However,
the problem of read.spss() not returning any information on missingness
persists in all of these datafiles.


Prof Brian Ripley wrote:
> 
> All that is 'harmfull' is that you are not told that value labels NA and
> NAP were to be regarded as 'missing' in SPSS.  We've no idea whether if
> would be a more or less egregious choice to map them to R's NA, and
> certainly are not in a position to assert 'far less harmfull' in general.

Of course the 'least harmfull' behavior of the function completely depends
on the data and the user's intentions. I was explicitly suggesting making
the mapping of missing values to <NA>'s optional, to give users who consider
this appropriate, the option to replace these missings. I do not claim this
to be the best default behavior, just a very useful feature.


-- 
View this message in context: http://www.nabble.com/importing-explicitly-declared-missing-values-in-read.spss-%28foreign%29-tp18776776p18809176.html
Sent from the R devel mailing list archive at Nabble.com.


From pcovariant at googlemail.com  Mon Aug  4 13:16:29 2008
From: pcovariant at googlemail.com (Peter Jaeger)
Date: Mon, 4 Aug 2008 13:16:29 +0200
Subject: [Rd] Newline in R_ParseVector
Message-ID: <a564fafa0808040416o22271da0w12a918175a7af170@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080804/35b41036/attachment.pl>

From pcovariant at googlemail.com  Mon Aug  4 14:50:05 2008
From: pcovariant at googlemail.com (Peter Jaeger)
Date: Mon, 4 Aug 2008 14:50:05 +0200
Subject: [Rd] Parsing code with newlines
Message-ID: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080804/f00285be/attachment.pl>

From murdoch at stats.uwo.ca  Mon Aug  4 15:11:07 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Mon, 04 Aug 2008 09:11:07 -0400
Subject: [Rd] Parsing code with newlines
In-Reply-To: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
Message-ID: <4896FFEB.9000501@stats.uwo.ca>

On 04/08/2008 8:50 AM, Peter Jaeger wrote:
> Dear List,
> 
> When I try to parse code containing newline characters with R_ParseVector, I
> get a compilation error. How can I compile code that includes comments and
> newlines?
> 
> I am using the following:
> 
> void* my_compile(char *code)
> {
>     SEXP cmdSexp, cmdExpr = R_NilValue;
>     ParseStatus status;
> 
>     PROTECT (cmdSexp = allocVector (STRSXP, 1));
>     SET_STRING_ELT (cmdSexp, 0, mkChar (code));
>     PROTECT (cmdExpr = R_ParseVector (cmdSexp,-1,&status,
>         R_NilValue));
>     UNPROTECT_PTR (cmdSexp);
> 
>     if (status != PARSE_OK) {
>         return (void*)0;
>     } else {
>         return (void*)cmdExpr;
>     }
> }

You need to put together a reproducible example if you want help. 
parse() uses R_ParseVector, and it handles newlines fine.

Duncan Murdoch


From ripley at stats.ox.ac.uk  Mon Aug  4 15:18:52 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Mon, 4 Aug 2008 14:18:52 +0100 (BST)
Subject: [Rd] Parsing code with newlines
In-Reply-To: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808041402500.17316@gannet.stats.ox.ac.uk>

This adds nothing to your previous post: please don't be annoying and post 
almost identical messages.

I strongly suspect you mean 'parse error' and 'how can I parse R code', 
but we don't know what the example was and what the error message was. 
Nor do we know what you are doing with this fragement of C code (and 
returnng an unprotected SEXP via a (void *) cast is a recipe for tears).

parse(text=) uses R_ParseVector, and that works for 'code that includes 
comments and newlines', so please check out the internal code used (in 
src/main/gram.c).

If you study the posting guide you should be able to formulate a posting 
that people can actually help you with.

On Mon, 4 Aug 2008, Peter Jaeger wrote:

> Dear List,
>
> When I try to parse code containing newline characters with R_ParseVector, I
> get a compilation error. How can I compile code that includes comments and
> newlines?
>
> I am using the following:
>
> void* my_compile(char *code)
> {
>    SEXP cmdSexp, cmdExpr = R_NilValue;
>    ParseStatus status;
>
>    PROTECT (cmdSexp = allocVector (STRSXP, 1));
>    SET_STRING_ELT (cmdSexp, 0, mkChar (code));
>    PROTECT (cmdExpr = R_ParseVector (cmdSexp,-1,&status,
>        R_NilValue));
>    UNPROTECT_PTR (cmdSexp);
>
>    if (status != PARSE_OK) {
>        return (void*)0;
>    } else {
>        return (void*)cmdExpr;
>    }
> }
>
> Regards,
> Peter
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From jeff.horner at vanderbilt.edu  Mon Aug  4 16:51:42 2008
From: jeff.horner at vanderbilt.edu (Jeffrey Horner)
Date: Mon, 04 Aug 2008 09:51:42 -0500
Subject: [Rd] Parsing code with newlines
In-Reply-To: <4896FFEB.9000501@stats.uwo.ca>
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
	<4896FFEB.9000501@stats.uwo.ca>
Message-ID: <4897177E.7000509@vanderbilt.edu>

Duncan Murdoch wrote on 08/04/2008 08:11 AM:
> On 04/08/2008 8:50 AM, Peter Jaeger wrote:
>> Dear List,
>>
>> When I try to parse code containing newline characters with 
>> R_ParseVector, I
>> get a compilation error. How can I compile code that includes comments 
>> and
>> newlines?
>>
>> I am using the following:
>>
>> void* my_compile(char *code)
>> {
>>     SEXP cmdSexp, cmdExpr = R_NilValue;
>>     ParseStatus status;
>>
>>     PROTECT (cmdSexp = allocVector (STRSXP, 1));
>>     SET_STRING_ELT (cmdSexp, 0, mkChar (code));
>>     PROTECT (cmdExpr = R_ParseVector (cmdSexp,-1,&status,
>>         R_NilValue));
>>     UNPROTECT_PTR (cmdSexp);
>>
>>     if (status != PARSE_OK) {
>>         return (void*)0;
>>     } else {
>>         return (void*)cmdExpr;
>>     }
>> }
> 
> You need to put together a reproducible example if you want help. 
> parse() uses R_ParseVector, and it handles newlines fine.

As a follow up, it'd be good to know the exact value of your status 
variable. You've only tested for PARSE_OK, but there's also 
PARSE_INCOMPLETE, PARSE_NULL, PARSE_ERROR, and PARSE_EOF.

Here's a function that I use in rapache that not only parses but 
executes the code as well. While it doesn't really help you with your 
parsing problem, I suspect that you'll want to do something with the 
returned expressions after you've parsed the code, and the point is that 
R_ParseVector() can return more than one expression. Thus you'll need to 
loop through each expression and eval() it separately. The function 
returns 1 when the code was parsed and executed, and 0 on failure.

(it's been awhile since I've had to touch this, and although I do keep 
up with R development, my skills at remembering which macros and 
functions to use are lacking. Anyone spot something I shouldn't be 
doing? like mkChar() or some such? )

static int ExecRCode(const char *code, SEXP env, int *error){
	ParseStatus status;
	SEXP cmd, expr, fun;
	int i, errorOccurred=1, retval = 1;

	PROTECT(cmd = allocVector(STRSXP, 1));
	SET_STRING_ELT(cmd, 0, mkChar(code));

	/* fprintf(stderr,"ExecRCode(%s)\n",code); */
	PROTECT(expr = R_ParseVector(cmd, -1, &status,R_NilValue));

	switch (status){
		case PARSE_OK:
			for(i = 0; i < length(expr); i++){
				R_tryEval(VECTOR_ELT(expr, i),env,&errorOccurred);
				if (error) *error = errorOccurred;
				if (errorOccurred){
					retval=0;
					break;
				}
			}
		break;
		case PARSE_INCOMPLETE:
		case PARSE_NULL:
		case PARSE_ERROR:
		case PARSE_EOF:
		default:
			retval=0;
		break;
	}
	UNPROTECT(2);

	return retval;
}



> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
http://biostat.mc.vanderbilt.edu/JeffreyHorner


From cowan.pd at gmail.com  Mon Aug  4 23:13:57 2008
From: cowan.pd at gmail.com (Peter Cowan)
Date: Mon, 4 Aug 2008 14:13:57 -0700
Subject: [Rd] unbuffered R CMD check results
Message-ID: <e1fc21b0808041413p32a4b649h3f880e10ce325a03@mail.gmail.com>

Hello all,

I'm attempting to write a TextMate command that runs R CMD check and
returns the results in an HTML window (I have confirmed with the
TextMate devloper that this window will take unbuffered content).  It
appears that when stdout is not a tty R CMD check and INSTALL buffer
results.  When my python script is run from a terminal I get results
unbuffered.  Is it possible to get unbuffered output to other stdouts?

I took a look at the docs for check.conf, and didn't see a
configuration options.  Skimming the perl source code, (caveat, I'm
not familiar with perl) I see:

## Don't buffer output.
$| = 1;

So perhaps I'm barking up the wrong tree.  Suggestions are welcome.

Peter


From hb at stat.berkeley.edu  Tue Aug  5 06:14:12 2008
From: hb at stat.berkeley.edu (Henrik Bengtsson)
Date: Mon, 4 Aug 2008 21:14:12 -0700
Subject: [Rd] Suggestion: 20% speed up of which() with two-character mod
In-Reply-To: <Pine.LNX.4.64.0807110856250.14412@tajo.ucsd.edu>
References: <59d7961d0807102018j3d304d73p56f85bde01747b00@mail.gmail.com>
	<Pine.LNX.4.64.0807110856250.14412@tajo.ucsd.edu>
Message-ID: <59d7961d0808042114t7f01ddd7u317cc749d7ae809f@mail.gmail.com>

Hi,

I just want to do a follow up this very simple
fix/correction/speedup/cleanup of the base::which() function.  Here is
a diff:

diff src/library/base/R/which.R which.R
21c21
<     wh <- seq_along(x)[ll <- x & !is.na(x)]
---
>     wh <- seq_along(x)[x & !is.na(x)]
25c25
<         names(wh) <- names(x)[ll]
---
>         names(wh) <- names(x)[wh]

FYI, the 'll' variable is not used elsewhere.  I've been going through
this modifications several times and I cannot see any side effects.

Could someone of R core please commit this?

BTW, when one report diff:s, do you prefer to get it with or without
context information, e.g. -C 3?

/Henrik

On Fri, Jul 11, 2008 at 8:57 AM, Charles C. Berry <cberry at tajo.ucsd.edu> wrote:
> On Thu, 10 Jul 2008, Henrik Bengtsson wrote:
>
>> Hi,
>>
>> by replacing 'll' with 'wh' in the source code for base::which() one
>> gets ~20% speed up for *named logical vectors*.
>
>
> The amount of speedup depends on how sparse the TRUE values are.
>
> When the proportion of TRUEs gets small the speedup is more than twofold on
> my macbook. For high proportions of TRUE, the speedup is more like the 20%
> you cite.
>
> HTH,
>
> Chuck
>
>>
>> CURRENT CODE:
>>
>> which <- function(x, arr.ind = FALSE)
>> {
>>   if(!is.logical(x))
>>        stop("argument to 'which' is not logical")
>>   wh <- seq_along(x)[ll <- x & !is.na(x)]
>>   m <- length(wh)
>>   dl <- dim(x)
>>   if (is.null(dl) || !arr.ind) {
>>       names(wh) <- names(x)[ll]
>>   }
>>   ...
>>   wh;
>> }
>>
>> SUGGESTED CODE: (Remove 'll' and use 'wh')
>>
>> which2 <- function(x, arr.ind = FALSE)
>> {
>>   if(!is.logical(x))
>>        stop("argument to 'which' is not logical")
>>   wh <- seq_along(x)[x & !is.na(x)]
>>   m <- length(wh)
>>   dl <- dim(x)
>>   if (is.null(dl) || !arr.ind) {
>>       names(wh) <- names(x)[wh]
>>   }
>>   ...
>>   wh;
>> }
>>
>> That's all.
>>
>> BENCHMARKING:
>>
>> # To measure both in same environment
>> which1 <- base::which;
>> environment(which1) <- globalenv();  # Needed?
>>
>> N <- 1e6;
>> set.seed(0xbeef);
>> x <- sample(c(TRUE, FALSE), size=N, replace=TRUE);
>> names(x) <- seq_along(x);
>> B <- 10;
>> t1 <- system.time({ for (bb in 1:B) idxs1 <- which1(x); });
>> t2 <- system.time({ for (bb in 1:B) idxs2 <- which2(x); });
>> stopifnot(identical(idxs1, idxs2));
>> print(t1/t2);
>> # Fair benchmarking
>> t2 <- system.time({ for (bb in 1:B) idxs2 <- which2(x); });
>> t1 <- system.time({ for (bb in 1:B) idxs1 <- which1(x); });
>> print(t1/t2);
>> ##      user    system   elapsed
>> ##   1.283186   1.052632   1.250000
>>
>> You get similar results if you put for loop outside the system.time()
>> call (and sum up the timings).
>>
>> Cheers
>>
>> Henrik
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> Charles C. Berry                            (858) 534-2098
>                                            Dept of Family/Preventive
> Medicine
> E mailto:cberry at tajo.ucsd.edu               UC San Diego
> http://famprevmed.ucsd.edu/faculty/cberry/  La Jolla, San Diego 92093-0901
>
>
>


From ripley at stats.ox.ac.uk  Tue Aug  5 06:48:20 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 5 Aug 2008 05:48:20 +0100 (BST)
Subject: [Rd] importing explicitly declared missing values in read.spss
 (foreign)
In-Reply-To: <18809176.post@talk.nabble.com>
References: <18776776.post@talk.nabble.com>
	<alpine.LFD.1.10.0808011654200.7435@gannet.stats.ox.ac.uk>
	<18809176.post@talk.nabble.com>
Message-ID: <alpine.LFD.1.10.0808050547380.11005@gannet.stats.ox.ac.uk>

I've put up an experimental version at

http://www.stats.ox.ac.uk/pub/R/foreign_0.8-28.1.tar.gz

See the new 'use.missings' argument.  It does what I think should happen
in your example and the other one I tried, but more experience would be
helpful.

On Mon, 4 Aug 2008, Jeroen Ooms wrote:

Please don't silently excise context -- see the posting guide for the
rights of posters to be quoted fairly (and your usage of my posting fails
to be fair).

> Prof Brian Ripley wrote:
>>
>>> From the messages you get I do not believe this is a recent version of
> read.spss (message 2 no longer appears)...
>
> I am sorry you are right here, I was using an outdated version of foreign. I
> have updated my packages. My current version is now R version 2.7.1
> (2008-06-23) with foreign_0.8-28.
>
> I have experimented importing some spss datafiles, mostly from the sample
> data files that are included with SPSS. Most of these files do not generate
> any warnings, so I am not sure this is related to the missingness. However,
> the problem of read.spss() not returning any information on missingness
> persists in all of these datafiles.
>
>
> Prof Brian Ripley wrote:
>>
>> All that is 'harmfull' is that you are not told that value labels NA and
>> NAP were to be regarded as 'missing' in SPSS.  We've no idea whether if
>> would be a more or less egregious choice to map them to R's NA, and
>> certainly are not in a position to assert 'far less harmfull' in general.
>
> Of course the 'least harmfull' behavior of the function completely depends
> on the data and the user's intentions. I was explicitly suggesting making
> the mapping of missing values to <NA>'s optional, to give users who consider
> this appropriate, the option to replace these missings. I do not claim this
> to be the best default behavior, just a very useful feature.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From j.c.l.ooms at uu.nl  Tue Aug  5 13:52:49 2008
From: j.c.l.ooms at uu.nl (Jeroen Ooms)
Date: Tue, 5 Aug 2008 04:52:49 -0700 (PDT)
Subject: [Rd] importing explicitly declared missing values in read.spss
 (foreign)
In-Reply-To: <alpine.LFD.1.10.0808050547380.11005@gannet.stats.ox.ac.uk>
References: <18776776.post@talk.nabble.com>
	<alpine.LFD.1.10.0808011654200.7435@gannet.stats.ox.ac.uk>
	<18809176.post@talk.nabble.com>
	<alpine.LFD.1.10.0808050547380.11005@gannet.stats.ox.ac.uk>
Message-ID: <18829484.post@talk.nabble.com>


First of all, apologies if you feel misquoted, I was only trying to keep
things clear. Now, I have installed and tried the new version of the package
and it works perfectly. It does exactly what it should do. I tested it on
some huge SPSS's sample files which contained a lot of variables with
several types of missingness, and all missing values were correctly
converted to R <NA> values. I find this a very big improvement, and it makes
the transition from spss to R even easier. Thank you very much!






Prof Brian Ripley wrote:
> 
> I've put up an experimental version at
> 
> http://www.stats.ox.ac.uk/pub/R/foreign_0.8-28.1.tar.gz
> 
> See the new 'use.missings' argument.  It does what I think should happen
> in your example and the other one I tried, but more experience would be
> helpful.
> 
> On Mon, 4 Aug 2008, Jeroen Ooms wrote:
> 
> Please don't silently excise context -- see the posting guide for the
> rights of posters to be quoted fairly (and your usage of my posting fails
> to be fair).
> 
>> Prof Brian Ripley wrote:
>>>
>>>> From the messages you get I do not believe this is a recent version of
>> read.spss (message 2 no longer appears)...
>>
>> I am sorry you are right here, I was using an outdated version of
>> foreign. I
>> have updated my packages. My current version is now R version 2.7.1
>> (2008-06-23) with foreign_0.8-28.
>>
>> I have experimented importing some spss datafiles, mostly from the sample
>> data files that are included with SPSS. Most of these files do not
>> generate
>> any warnings, so I am not sure this is related to the missingness.
>> However,
>> the problem of read.spss() not returning any information on missingness
>> persists in all of these datafiles.
>>
>>
>> Prof Brian Ripley wrote:
>>>
>>> All that is 'harmfull' is that you are not told that value labels NA and
>>> NAP were to be regarded as 'missing' in SPSS.  We've no idea whether if
>>> would be a more or less egregious choice to map them to R's NA, and
>>> certainly are not in a position to assert 'far less harmfull' in
>>> general.
>>
>> Of course the 'least harmfull' behavior of the function completely
>> depends
>> on the data and the user's intentions. I was explicitly suggesting making
>> the mapping of missing values to <NA>'s optional, to give users who
>> consider
>> this appropriate, the option to replace these missings. I do not claim
>> this
>> to be the best default behavior, just a very useful feature.
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 

-- 
View this message in context: http://www.nabble.com/importing-explicitly-declared-missing-values-in-read.spss-%28foreign%29-tp18776776p18829484.html
Sent from the R devel mailing list archive at Nabble.com.


From supersubu123 at gmail.com  Tue Aug  5 14:47:30 2008
From: supersubu123 at gmail.com (subramanian R)
Date: Tue, 5 Aug 2008 18:17:30 +0530
Subject: [Rd] Random number generation
Message-ID: <b2d9df730808050547k1969d26i6ab732b914aa5c7a@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080805/ef1a2946/attachment.pl>

From maechler at stat.math.ethz.ch  Tue Aug  5 14:54:12 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Tue, 5 Aug 2008 14:54:12 +0200
Subject: [Rd] Suggestion: 20% speed up of which() with two-character mod
In-Reply-To: <59d7961d0808042114t7f01ddd7u317cc749d7ae809f@mail.gmail.com>
References: <59d7961d0807102018j3d304d73p56f85bde01747b00@mail.gmail.com>
	<Pine.LNX.4.64.0807110856250.14412@tajo.ucsd.edu>
	<59d7961d0808042114t7f01ddd7u317cc749d7ae809f@mail.gmail.com>
Message-ID: <18584.19828.688021.402365@stat.math.ethz.ch>

>>>>> "HenrikB" == Henrik Bengtsson <hb at stat.berkeley.edu>
>>>>>     on Mon, 4 Aug 2008 21:14:12 -0700 writes:

    HenrikB> Hi,

    HenrikB> I just want to do a follow up this very simple
    HenrikB> fix/correction/speedup/cleanup of the base::which() function.  Here is
    HenrikB> a diff:

    HenrikB> diff src/library/base/R/which.R which.R
    HenrikB> 21c21
    HenrikB> <     wh <- seq_along(x)[ll <- x & !is.na(x)]
    HenrikB> ---
    >> wh <- seq_along(x)[x & !is.na(x)]
    HenrikB> 25c25
    HenrikB> <    names(wh) <- names(x)[ll]
    HenrikB> ---
              >> names(wh) <- names(x)[wh]

    HenrikB> FYI, the 'll' variable is not used elsewhere.  I've been going through
    HenrikB> this modifications several times and I cannot see any side effects.

    HenrikB> Could someone of R core please commit this?

I had added your proposition to my version of R-devel in order
to commit it, and had wanted to do my own performance tests
under different scenarios, but I had forgotten / postponed it.
{I have more such things , notably the "help.request() from Kate
 Mullen  -- with quite a few of my own changes, not quite
 finished ... that will have to wait for after useR!2008 ..}

In fact, it seems is pretty obvious that the version with [wh]
instead of [ll] should be faster in most cases, and never
slower,
and so I do commit it now.

Thank you Henrik, for the reminder.

Martin

    HenrikB> BTW, when one report diff:s, do you prefer to get it with or without
    HenrikB> context information, e.g. -C 3?

{My exact preference would depend on the size / style of the
 patch itself. It does not really matter, and as a general rule,
 I'd personally prefer '-u' (unified diffs which include context)}

    HenrikB> /Henrik

    HenrikB> On Fri, Jul 11, 2008 at 8:57 AM, Charles C. Berry <cberry at tajo.ucsd.edu> wrote:
    >> On Thu, 10 Jul 2008, Henrik Bengtsson wrote:
    >> 
    >>> Hi,
    >>> 
    >>> by replacing 'll' with 'wh' in the source code for base::which() one
    >>> gets ~20% speed up for *named logical vectors*.
    >> 
    >> 
    >> The amount of speedup depends on how sparse the TRUE values are.
    >> 
    >> When the proportion of TRUEs gets small the speedup is more than twofold on
    >> my macbook. For high proportions of TRUE, the speedup is more like the 20%
    >> you cite.
    >> 
    >> HTH,
    >> 
    >> Chuck
    >> 
    >>> 
    >>> CURRENT CODE:
    >>> 
    >>> which <- function(x, arr.ind = FALSE)
    >>> {
    >>> if(!is.logical(x))
    >>> stop("argument to 'which' is not logical")
    >>> wh <- seq_along(x)[ll <- x & !is.na(x)]
    >>> m <- length(wh)
    >>> dl <- dim(x)
    >>> if (is.null(dl) || !arr.ind) {
    >>> names(wh) <- names(x)[ll]
    >>> }
    >>> ...
    >>> wh;
    >>> }
    >>> 
    >>> SUGGESTED CODE: (Remove 'll' and use 'wh')
    >>> 
    >>> which2 <- function(x, arr.ind = FALSE)
    >>> {
    >>> if(!is.logical(x))
    >>> stop("argument to 'which' is not logical")
    >>> wh <- seq_along(x)[x & !is.na(x)]
    >>> m <- length(wh)
    >>> dl <- dim(x)
    >>> if (is.null(dl) || !arr.ind) {
    >>> names(wh) <- names(x)[wh]
    >>> }
    >>> ...
    >>> wh;
    >>> }
    >>> 
    >>> That's all.
    >>> 
    >>> BENCHMARKING:
    >>> 
    >>> # To measure both in same environment
    >>> which1 <- base::which;
    >>> environment(which1) <- globalenv();  # Needed?
    >>> 
    >>> N <- 1e6;
    >>> set.seed(0xbeef);
    >>> x <- sample(c(TRUE, FALSE), size=N, replace=TRUE);
    >>> names(x) <- seq_along(x);
    >>> B <- 10;
    >>> t1 <- system.time({ for (bb in 1:B) idxs1 <- which1(x); });
    >>> t2 <- system.time({ for (bb in 1:B) idxs2 <- which2(x); });
    >>> stopifnot(identical(idxs1, idxs2));
    >>> print(t1/t2);
    >>> # Fair benchmarking
    >>> t2 <- system.time({ for (bb in 1:B) idxs2 <- which2(x); });
    >>> t1 <- system.time({ for (bb in 1:B) idxs1 <- which1(x); });
    >>> print(t1/t2);
    >>> ##      user    system   elapsed
    >>> ##   1.283186   1.052632   1.250000
    >>> 
    >>> You get similar results if you put for loop outside the system.time()
    >>> call (and sum up the timings).
    >>> 
    >>> Cheers
    >>> 
    >>> Henrik
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 
    >> 
    >> Charles C. Berry                            (858) 534-2098
    >> Dept of Family/Preventive
    >> Medicine
    >> E mailto:cberry at tajo.ucsd.edu               UC San Diego
    >> http://famprevmed.ucsd.edu/faculty/cberry/  La Jolla, San Diego 92093-0901
    >> 
    >> 
    >> 

    HenrikB> ______________________________________________
    HenrikB> R-devel at r-project.org mailing list
    HenrikB> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch at stats.uwo.ca  Tue Aug  5 15:10:23 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Tue, 05 Aug 2008 09:10:23 -0400
Subject: [Rd] Random number generation
In-Reply-To: <b2d9df730808050547k1969d26i6ab732b914aa5c7a@mail.gmail.com>
References: <b2d9df730808050547k1969d26i6ab732b914aa5c7a@mail.gmail.com>
Message-ID: <4898513F.7040401@stats.uwo.ca>

Please don't cross-post.  This reply is going to R-devel only.

On 8/5/2008 8:47 AM, subramanian R wrote:
> Hi All,
>            I have a few queries regarding Random Number generation in R.
>            according to the help(Random.User) i defined my own functions for

That's help("Random.user")...

> user_unif_rand and user_norm_rand (uniform and normal distribution)
> 
>            But what i figured out was even when i call rexp,rpois,rgeom and
> other distributions they were routed via user_unif_rand.
> 1.  Does this mean that for all types of distribution it generates an
> Uniform distribution and transforms to the requested type?
> 
> Also   surprisingly even rnorm which i hoped to route via user_norm_rand
> was calling user_unif_rand...
> 
> 
>> rnorm(1)
> inside user_unif_rand//printf and
> inside user_unif_rand
> [1] 0.5973648
> 
> 
> Please help me out understanding this...

I think you didn't do things properly, but you didn't show us what you 
did.  When I run the sample code in help("Random.user"), adding an 
Rprintf() call to the user_norm_rand function, I see it being called.

Duncan Murdoch

> 
> 2. Our goal is to link with an vectorized Random number generator library
> for our multi-core architecture.
>     So is it enough if we define user_unif_rand function alone and will it
> take care of all distributions?
> 
> 
> Thanks in Anticipation,
> R. Subramanian
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therneau at mayo.edu  Tue Aug  5 16:38:23 2008
From: therneau at mayo.edu (Terry Therneau)
Date: Tue, 5 Aug 2008 09:38:23 -0500 (CDT)
Subject: [Rd] literate programming
Message-ID: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>

I'm working on the next iteration of coxme.  (Rather slowly during the summer).
  
  This is the most subtle code I've done in S, both mathematically and 
technically, and seems a perfect vehicle for the "literate programming" paradym 
of Knuth.  The Sweave project is pointed at S output however, not source code.  
I would appreciate any pointers to an noweb type client that was R-aware.
  
  Other suggestions are welcome as well.  At the end of the day I'd like to have 
a good user guide, technical reference, and solid enough code documentation that 
others can begin to participate as well.  (Retirement in 10 years -- I don't 
expect to maintain this forever!)
  
  	Terry Therneau
  	therneau.terry at mayo.edu


From contact at rensenieuwenhuis.nl  Tue Aug  5 16:39:20 2008
From: contact at rensenieuwenhuis.nl (Rense Nieuwenhuis)
Date: Tue, 5 Aug 2008 16:39:20 +0200
Subject: [Rd] Adding .pdf files to package
Message-ID: <A3A04790-6FA4-4407-9E11-5CF802F09650@rensenieuwenhuis.nl>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080805/889e50f3/attachment.pl>

From murdoch at stats.uwo.ca  Tue Aug  5 17:43:49 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Tue, 05 Aug 2008 11:43:49 -0400
Subject: [Rd] patchDVI update:  SyncTex support
Message-ID: <48987535.3060309@stats.uwo.ca>

A while ago I wrote a package called patchDVI, that allowed 
"reverse-search" from the YAP .dvi previewer (or others) to jump 
directly to the .Rnw source of an Sweave document.

Recently support for reverse search has been integrated into pdflatex 
(through SyncTex).  There aren't many PDF previewers on Windows that 
support this (only an unreleased version of SumatraPDF, as far as I 
know), but I believe Mac OSX previewers have supported it for some time, 
and there may be others on Linux or Windows too.

I'd appreciate anyone who is using one of those previewers and who is 
interested in this to test the new code.  It's available on 
http://www.stats.uwo.ca/faculty/murdoch/software/ (near the bottom of 
the page).

Including the concordance info into a .pdf needs a patch to Sweave, and 
to Sweave.sty:

Sweave should wrap the concordance in \Sconcordance{}, instead of 
\special{}.

Sweave.sty should have this macro added:

\newcommand{\Sconcordance}[1]{%
\ifx\pdfoutput\undefined%
\csname newcount\endcsname\pdfoutput\fi%
\ifcase\pdfoutput\special{#1}%
\else\immediate\pdfobj{#1}\fi}

Improvements to this macro would also be appreciated.

Duncan Murdoch


From hb at stat.berkeley.edu  Tue Aug  5 17:45:07 2008
From: hb at stat.berkeley.edu (Henrik Bengtsson)
Date: Tue, 5 Aug 2008 08:45:07 -0700
Subject: [Rd] Suggestion: 20% speed up of which() with two-character mod
In-Reply-To: <18584.19828.688021.402365@stat.math.ethz.ch>
References: <59d7961d0807102018j3d304d73p56f85bde01747b00@mail.gmail.com>
	<Pine.LNX.4.64.0807110856250.14412@tajo.ucsd.edu>
	<59d7961d0808042114t7f01ddd7u317cc749d7ae809f@mail.gmail.com>
	<18584.19828.688021.402365@stat.math.ethz.ch>
Message-ID: <59d7961d0808050845i6caa5acasa73df8afabf1f6b2@mail.gmail.com>

Hi,

thanks for this.  I'll use "unified" diff next time, i.e.

  diff -u <current>.R <new>.R

/Henrik

On Tue, Aug 5, 2008 at 5:54 AM, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>>>>>> "HenrikB" == Henrik Bengtsson <hb at stat.berkeley.edu>
>>>>>>     on Mon, 4 Aug 2008 21:14:12 -0700 writes:
>
>    HenrikB> Hi,
>
>    HenrikB> I just want to do a follow up this very simple
>    HenrikB> fix/correction/speedup/cleanup of the base::which() function.  Here is
>    HenrikB> a diff:
>
>    HenrikB> diff src/library/base/R/which.R which.R
>    HenrikB> 21c21
>    HenrikB> <     wh <- seq_along(x)[ll <- x & !is.na(x)]
>    HenrikB> ---
>    >> wh <- seq_along(x)[x & !is.na(x)]
>    HenrikB> 25c25
>    HenrikB> <    names(wh) <- names(x)[ll]
>    HenrikB> ---
>              >> names(wh) <- names(x)[wh]
>
>    HenrikB> FYI, the 'll' variable is not used elsewhere.  I've been going through
>    HenrikB> this modifications several times and I cannot see any side effects.
>
>    HenrikB> Could someone of R core please commit this?
>
> I had added your proposition to my version of R-devel in order
> to commit it, and had wanted to do my own performance tests
> under different scenarios, but I had forgotten / postponed it.
> {I have more such things , notably the "help.request() from Kate
>  Mullen  -- with quite a few of my own changes, not quite
>  finished ... that will have to wait for after useR!2008 ..}
>
> In fact, it seems is pretty obvious that the version with [wh]
> instead of [ll] should be faster in most cases, and never
> slower,
> and so I do commit it now.
>
> Thank you Henrik, for the reminder.
>
> Martin
>
>    HenrikB> BTW, when one report diff:s, do you prefer to get it with or without
>    HenrikB> context information, e.g. -C 3?
>
> {My exact preference would depend on the size / style of the
>  patch itself. It does not really matter, and as a general rule,
>  I'd personally prefer '-u' (unified diffs which include context)}
>
>    HenrikB> /Henrik
>
>    HenrikB> On Fri, Jul 11, 2008 at 8:57 AM, Charles C. Berry <cberry at tajo.ucsd.edu> wrote:
>    >> On Thu, 10 Jul 2008, Henrik Bengtsson wrote:
>    >>
>    >>> Hi,
>    >>>
>    >>> by replacing 'll' with 'wh' in the source code for base::which() one
>    >>> gets ~20% speed up for *named logical vectors*.
>    >>
>    >>
>    >> The amount of speedup depends on how sparse the TRUE values are.
>    >>
>    >> When the proportion of TRUEs gets small the speedup is more than twofold on
>    >> my macbook. For high proportions of TRUE, the speedup is more like the 20%
>    >> you cite.
>    >>
>    >> HTH,
>    >>
>    >> Chuck
>    >>
>    >>>
>    >>> CURRENT CODE:
>    >>>
>    >>> which <- function(x, arr.ind = FALSE)
>    >>> {
>    >>> if(!is.logical(x))
>    >>> stop("argument to 'which' is not logical")
>    >>> wh <- seq_along(x)[ll <- x & !is.na(x)]
>    >>> m <- length(wh)
>    >>> dl <- dim(x)
>    >>> if (is.null(dl) || !arr.ind) {
>    >>> names(wh) <- names(x)[ll]
>    >>> }
>    >>> ...
>    >>> wh;
>    >>> }
>    >>>
>    >>> SUGGESTED CODE: (Remove 'll' and use 'wh')
>    >>>
>    >>> which2 <- function(x, arr.ind = FALSE)
>    >>> {
>    >>> if(!is.logical(x))
>    >>> stop("argument to 'which' is not logical")
>    >>> wh <- seq_along(x)[x & !is.na(x)]
>    >>> m <- length(wh)
>    >>> dl <- dim(x)
>    >>> if (is.null(dl) || !arr.ind) {
>    >>> names(wh) <- names(x)[wh]
>    >>> }
>    >>> ...
>    >>> wh;
>    >>> }
>    >>>
>    >>> That's all.
>    >>>
>    >>> BENCHMARKING:
>    >>>
>    >>> # To measure both in same environment
>    >>> which1 <- base::which;
>    >>> environment(which1) <- globalenv();  # Needed?
>    >>>
>    >>> N <- 1e6;
>    >>> set.seed(0xbeef);
>    >>> x <- sample(c(TRUE, FALSE), size=N, replace=TRUE);
>    >>> names(x) <- seq_along(x);
>    >>> B <- 10;
>    >>> t1 <- system.time({ for (bb in 1:B) idxs1 <- which1(x); });
>    >>> t2 <- system.time({ for (bb in 1:B) idxs2 <- which2(x); });
>    >>> stopifnot(identical(idxs1, idxs2));
>    >>> print(t1/t2);
>    >>> # Fair benchmarking
>    >>> t2 <- system.time({ for (bb in 1:B) idxs2 <- which2(x); });
>    >>> t1 <- system.time({ for (bb in 1:B) idxs1 <- which1(x); });
>    >>> print(t1/t2);
>    >>> ##      user    system   elapsed
>    >>> ##   1.283186   1.052632   1.250000
>    >>>
>    >>> You get similar results if you put for loop outside the system.time()
>    >>> call (and sum up the timings).
>    >>>
>    >>> Cheers
>    >>>
>    >>> Henrik
>    >>>
>    >>> ______________________________________________
>    >>> R-devel at r-project.org mailing list
>    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>    >>>
>    >>
>    >> Charles C. Berry                            (858) 534-2098
>    >> Dept of Family/Preventive
>    >> Medicine
>    >> E mailto:cberry at tajo.ucsd.edu               UC San Diego
>    >> http://famprevmed.ucsd.edu/faculty/cberry/  La Jolla, San Diego 92093-0901
>    >>
>    >>
>    >>
>
>    HenrikB> ______________________________________________
>    HenrikB> R-devel at r-project.org mailing list
>    HenrikB> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From krcoombes at mdacc.tmc.edu  Tue Aug  5 17:45:59 2008
From: krcoombes at mdacc.tmc.edu (Kevin R. Coombes)
Date: Tue, 05 Aug 2008 10:45:59 -0500
Subject: [Rd] literate programming
In-Reply-To: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>
References: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>
Message-ID: <489875B7.1060304@mdacc.tmc.edu>

Hi Terry,

You can do this with Sweave (and something smart like emacs with ESS 
installed as your editor), but you have to work at it a little. The key 
is the fact that a couple of releases ago they added options for 
"keep.source" and "expand". For example, you do the following:

First, describe the various steps in the algorithm. (Unless you are 
defining functions to use later, you probably do not want to evaluate 
these.)

<<extractParameters,eval=FALSE>>=
# code here to get the parameters
@

<<selectTrainingSet,eval=FALSE>>=
# code here to split data into training and test sets
@

<<trainModel,eval=FALSE>>=
# code here to fit a model to training data
@

<<testModel,eval=FALSE>>=
# code here to see how well the model works
@

Then  you can put the pieces together, doing something like

<<runSplits,keep.source=TRUE,expand=FALSE>>=
for (i in 1:numberOfSplits) {
<<extractParameters>>
<<selectTrainingSet>>
<<trainModel>>
<<testModel>>
}
@

The "expand=FALSE" makes sure that the final report does not re-expand 
the lines of code in the displayed output, which allows you to focus on 
the structure of the algorithm.

There are still two weaknesses compared to Knuth's original idea:
[1] You cannot describe the overall algorithm first but wait until later 
to define the pieces. (Actually, I could be wrong about this; it just 
occurred to me that you might be able to manage this with yet another 
clever use of "eval=FALSE", but I haven't tried that.)

[2] The names that you assign to the code chunks do not appear in the 
report automatically, so you have to write text in front of them to make 
them show up. Without these, the references in the final piece do not 
necessarily make sense to the reader trying to follow the action.

Best,
	Kevin



Terry Therneau wrote:
> I'm working on the next iteration of coxme.  (Rather slowly during the summer).
>   
>   This is the most subtle code I've done in S, both mathematically and 
> technically, and seems a perfect vehicle for the "literate programming" paradym 
> of Knuth.  The Sweave project is pointed at S output however, not source code.  
> I would appreciate any pointers to an noweb type client that was R-aware.
>   
>   Other suggestions are welcome as well.  At the end of the day I'd like to have 
> a good user guide, technical reference, and solid enough code documentation that 
> others can begin to participate as well.  (Retirement in 10 years -- I don't 
> expect to maintain this forever!)
>   
>   	Terry Therneau
>   	therneau.terry at mayo.edu
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From contact at rensenieuwenhuis.nl  Tue Aug  5 16:34:41 2008
From: contact at rensenieuwenhuis.nl (Rense Nieuwenhuis)
Date: Tue, 5 Aug 2008 16:34:41 +0200
Subject: [Rd] Adding .PDF files to a package
Message-ID: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>

Deal all,

new as I am to developing packages for R-Project, I apologize on  
beforehand for questions that are too obvious. I am trying to 'add' a  
PDF document containing some detailed information to a package.

The way I understand the Rexts.pdf document, I should add my .PDF  
document to the /inst/doc/ folder, and links to the files should be  
build automatically. However, after building it on MacOSX (10.4)  
using 'R CMD build' and checking it using 'R CMD check', no links  
seems to be present. All checks are OK, but no vignette or whatever  
appears in the help-files of the package.

Clearly, I'm missing something. I would really appreciate some  
pointers on how to integrate an 'additional' pdf file to my package.

Thanks in advance,

Rense Nieuwenhuis


From huber at ebi.ac.uk  Tue Aug  5 23:05:47 2008
From: huber at ebi.ac.uk (Wolfgang Huber)
Date: Tue, 05 Aug 2008 22:05:47 +0100
Subject: [Rd] Adding .PDF files to a package
In-Reply-To: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>
References: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>
Message-ID: <4898C0AB.6090606@ebi.ac.uk>

Rense Nieuwenhuis wrote:
> Deal all,
> 
> new as I am to developing packages for R-Project, I apologize on 
> beforehand for questions that are too obvious. I am trying to 'add' a 
> PDF document containing some detailed information to a package.
> 
> The way I understand the Rexts.pdf document, I should add my .PDF 
> document to the /inst/doc/ folder, and links to the files should be 
> build automatically. However, after building it on MacOSX (10.4) using 
> 'R CMD build' and checking it using 'R CMD check', no links seems to be 
> present. All checks are OK, but no vignette or whatever appears in the 
> help-files of the package.
> 
> Clearly, I'm missing something. I would really appreciate some pointers 
> on how to integrate an 'additional' pdf file to my package.
> 
> Thanks in advance,
> 
> Rense Nieuwenhuis

Hi Rense

This is probably not the prettiest solution, and I'd be curious about 
better ones from people on this list, but here's one possibility:

1.) Put your PDF file foo.pdf into the inst/pdfs folder of your package.

2.) Create a file foo.Rnw with following content in inst/doc

------------------------------------------
%\VignetteIndexEntry{The Foo Bar}
\documentclass{article}
\begin{document}
\end{document}
------------------------------------------

3.) Create a Makefile in inst/doc, with contents like:

---------------------------------------
all: foo bar

bar: bar.tex
	pdflatex bar
	pdflatex bar

foo: foo.tex
	cp -p ../pdfs/foo.pdf .
---------------------------------------



Bw
Wolfgang

----------------------------------------------------
Wolfgang Huber, EMBL-EBI, http://www.ebi.ac.uk/huber


From huber at ebi.ac.uk  Tue Aug  5 23:33:53 2008
From: huber at ebi.ac.uk (Wolfgang Huber)
Date: Tue, 05 Aug 2008 22:33:53 +0100
Subject: [Rd] Adding .PDF files to a package
In-Reply-To: <4898C0AB.6090606@ebi.ac.uk>
References: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>
	<4898C0AB.6090606@ebi.ac.uk>
Message-ID: <4898C741.3060709@ebi.ac.uk>


Wolfgang Huber wrote:
> Rense Nieuwenhuis wrote:
>> Deal all,
>>
>> new as I am to developing packages for R-Project, I apologize on 
>> beforehand for questions that are too obvious. I am trying to 'add' a 
>> PDF document containing some detailed information to a package.
>>
>> The way I understand the Rexts.pdf document, I should add my .PDF 
>> document to the /inst/doc/ folder, and links to the files should be 
>> build automatically. However, after building it on MacOSX (10.4) using 
>> 'R CMD build' and checking it using 'R CMD check', no links seems to 
>> be present. All checks are OK, but no vignette or whatever appears in 
>> the help-files of the package.
>>
>> Clearly, I'm missing something. I would really appreciate some 
>> pointers on how to integrate an 'additional' pdf file to my package.
>>
>> Thanks in advance,
>>
>> Rense Nieuwenhuis
> 
> Hi Rense
> 
> This is probably not the prettiest solution, and I'd be curious about 
> better ones from people on this list, but here's one possibility:
> 
> 1.) Put your PDF file foo.pdf into the inst/pdfs folder of your package.
> 
> 2.) Create a file foo.Rnw with following content in inst/doc
> 
> ------------------------------------------
> %\VignetteIndexEntry{The Foo Bar}
> \documentclass{article}
> \begin{document}
> \end{document}
> ------------------------------------------
> 
> 3.) Create a Makefile in inst/doc, with contents like:
> 
> ---------------------------------------
> all: foo bar
> 
> bar: bar.tex
>     pdflatex bar
>     pdflatex bar
> 
> foo: foo.tex
>     cp -p ../pdfs/foo.pdf .
> ---------------------------------------



I'd like to add that doing so will frustrate those users that have come 
to expect that a vignette is reproducible and can be reproduced by the 
user through running Sweave on the source file.

It will depend on your particular context how to best provide for that 
(e.g. by telling people how to build your PDF using other tools, or by 
explicitly advertising that this is not a reproducible document.)

browseVignettes() and vignette() provide nice standardized ways of 
finding vignettes, and they are easily found in the index page of the 
package manual pages; perhaps a similarly standardized way of accessing 
such additional PDFs etc. without the above subversion of vignette 
infrastructure would be the best solution.

  Best wishes
	Wolfgang


From berwin at maths.uwa.edu.au  Wed Aug  6 06:09:35 2008
From: berwin at maths.uwa.edu.au (Berwin A Turlach)
Date: Wed, 6 Aug 2008 12:09:35 +0800
Subject: [Rd] literate programming
In-Reply-To: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>
References: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>
Message-ID: <20080806120935.753f558e@berwin5.hotelnetllc.com>

G'day Terry,

On Tue, 5 Aug 2008 09:38:23 -0500 (CDT)
Terry Therneau <therneau at mayo.edu> wrote:

> I'm working on the next iteration of coxme.  (Rather slowly during
> the summer). 
>   This is the most subtle code I've done in S, both mathematically
> and technically, and seems a perfect vehicle for the "literate
> programming" paradym of Knuth.  The Sweave project is pointed at S
> output however, not source code. I would appreciate any pointers to
> an noweb type client that was R-aware. 

I would suggest you look at relax:
    http://www.wiwi.uni-bielefeld.de/~wolf/software/relax/relax.html

Cheers,
	
	Berwin

=========================== Full address =============================
Berwin A Turlach                            Tel.: +65 6515 4416 (secr)
Dept of Statistics and Applied Probability        +65 6515 6650 (self)
Faculty of Science                          FAX : +65 6872 3919       
National University of Singapore
6 Science Drive 2, Blk S16, Level 7          e-mail: statba at nus.edu.sg
Singapore 117546                    http://www.stat.nus.edu.sg/~statba


From Friedrich.Leisch at stat.uni-muenchen.de  Wed Aug  6 09:53:30 2008
From: Friedrich.Leisch at stat.uni-muenchen.de (Friedrich.Leisch at stat.uni-muenchen.de)
Date: Wed, 6 Aug 2008 09:53:30 +0200
Subject: [Rd] literate programming
In-Reply-To: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>
References: <200808051438.m75EcOa16179@hsrnfs-101.mayo.edu>
Message-ID: <18585.22650.220052.948566@ridcully.stat.uni-muenchen.de>

>>>>> On Tue, 5 Aug 2008 09:38:23 -0500 (CDT),
>>>>> Terry Therneau (TT) wrote:

  > I'm working on the next iteration of coxme.  (Rather slowly during
  >   the summer).  This is the most subtle code I've done in S, both
  >   mathematically and technically, and seems a perfect vehicle for
  >   the "literate programming" paradym of Knuth.  The Sweave project
  >   is pointed at S output however, not source code.  I would
  >   appreciate any pointers to an noweb type client that was
  >   R-aware.
  
  >   Other suggestions are welcome as well.  At the end of the day
  > I'd like to have a good user guide, technical reference, and solid
  > enough code documentation that others can begin to participate as
  > well.  (Retirement in 10 years -- I don't expect to maintain this
  > forever!)
  
Why not use the original noweb in the first place? You can even
maintain Sweave files with it, the Sweave latex syntax was written for
exactly that purpose ...

ESS supported noweb before Sweave existed. In fact the emacs noweb
mode was the main reason I chose that syntax for Sweave, and the latex
syntax was added lateron because some people write whole packages using
noweb and would have had a syntax conflict in their vignettes.

Best,
Fritz


From mflawren at fhcrc.org  Wed Aug  6 14:32:14 2008
From: mflawren at fhcrc.org (Michael Lawrence)
Date: Wed, 6 Aug 2008 05:32:14 -0700
Subject: [Rd] RGtk2 on linux: "stack smashing detected"
In-Reply-To: <94730b8a0808060031l3bfa801bs9cbff4ac8aa5caa7@mail.gmail.com>
References: <94730b8a0808060031l3bfa801bs9cbff4ac8aa5caa7@mail.gmail.com>
Message-ID: <509e0620808060532n320d7446yedd94d5f4b5e3866@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080806/9ecc28b3/attachment.pl>

From ripley at stats.ox.ac.uk  Wed Aug  6 15:44:29 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 6 Aug 2008 14:44:29 +0100 (BST)
Subject: [Rd] RGtk2 on linux: "stack smashing detected"
In-Reply-To: <509e0620808060532n320d7446yedd94d5f4b5e3866@mail.gmail.com>
References: <94730b8a0808060031l3bfa801bs9cbff4ac8aa5caa7@mail.gmail.com>
	<509e0620808060532n320d7446yedd94d5f4b5e3866@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808061420020.12117@gannet.stats.ox.ac.uk>

Note that this is happening in R_GetTraceback.  Running under gdb told me 
where (deparse2buff, but I guessed that) and on my system that the problem 
was in sprintf.

Eh voila:

     case EXTPTRSXP:
     {
 	char tpb[12+sizeof(void *)];
 	d->sourceable = FALSE;
 	sprintf(tpb, "<pointer: %p>", R_ExternalPtrAddr(s));
 	print2buff(tpb, d);
     }
 	break;

is too small a buffer.  I've just fixed that in the R sources.

So the unusual circumstance was deparsing an external pointer.

On Wed, 6 Aug 2008, Michael Lawrence wrote:

> Yea I am aware of this. This is because the Ubuntu binary has stack smashing
> detection enabled. It's possible to build R without this checking:
>
> export CFLAGS="-fno-stack-protector"
>
> I have not been able to figure out why stack smashing is detected.  I'm
> cc'ing this to r-devel in case anyone else has an idea.
>
> Michael
>
> On Wed, Aug 6, 2008 at 12:31 AM, Felix Andrews <felix at nfrac.org> wrote:
>
>> Hi Michael,
>>
>> I wonder whether you have come across this before? I am testing RGtk2
>> on Ubuntu and it seems that any error that occurs in that context
>> kills the R process with a message "stack smashing detected". This is
>> on Ubuntu 8.04. Minimal example:
>>
>>> library(RGtk2)
>>> sessionInfo()
>> R version 2.7.1 (2008-06-23)
>> i486-pc-linux-gnu
>>
>> locale:
>>
>> LC_CTYPE=en_AU.UTF-8;LC_NUMERIC=C;LC_TIME=en_AU.UTF-8;LC_COLLATE=en_AU.UTF-8;LC_MONETARY=C;LC_MESSAGES=en_AU.UTF-8;LC_PAPER=en_AU.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_AU.UTF-8;LC_IDENTIFICATION=C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> other attached packages:
>> [1] RGtk2_2.12.1
>>> stop("hello")
>> Error: hello
>>> foo <- GtkWindow()
>> Error: could not find function "GtkWindow"
>>> foo <- gtkWindow()
>>> butt <- gtkButton("error")
>>> gSignalConnect(butt, "clicked", function(...) stop("hello"))
>> clicked
>>     16
>> attr(,"class")
>> [1] "CallbackID"
>>> foo$add(butt)
>> ## click button
>>> Error in function (...)  : hello
>> *** stack smashing detected ***: /usr/lib/R/bin/exec/R terminated
>> ======= Backtrace: =========
>> /lib/tls/i686/cmov/libc.so.6(__fortify_fail+0x48)[0xb7b98138]
>> /lib/tls/i686/cmov/libc.so.6(__fortify_fail+0x0)[0xb7b980f0]
>> /usr/lib/R/lib/libR.so[0xb7e12094]
>> /usr/lib/R/lib/libR.so[0xb7c8422e]
>> /usr/lib/R/lib/libR.so[0xb7c86fd7]
>> /usr/lib/R/lib/libR.so[0xb7c84082]
>> /usr/lib/R/lib/libR.so[0xb7c87b13]
>> /usr/lib/R/lib/libR.so(R_GetTraceback+0xc6)[0xb7cb8576]
>> /usr/lib/R/lib/libR.so[0xb7cba85c]
>> /usr/lib/R/lib/libR.so[0xb7cb966f]
>> /usr/lib/R/lib/libR.so(Rf_errorcall+0x3af)[0xb7cb9e7f]
>> /usr/lib/R/lib/libR.so[0xb7cba0c5]
>> /usr/lib/R/lib/libR.so[0xb7cfc89a]
>> /usr/lib/R/lib/libR.so(Rf_eval+0x451)[0xb7cc62e1]
>> /usr/lib/R/lib/libR.so[0xb7cc86c2]
>> /usr/lib/R/lib/libR.so(Rf_eval+0x451)[0xb7cc62e1]
>> /usr/lib/R/lib/libR.so[0xb7cc78f0]
>> /usr/lib/R/lib/libR.so(Rf_eval+0x451)[0xb7cc62e1]
>> /usr/lib/R/lib/libR.so(Rf_applyClosure+0x2ac)[0xb7cc9e5c]
>> /usr/lib/R/lib/libR.so(Rf_eval+0x349)[0xb7cc61d9]
>> /usr/lib/R/lib/libR.so(Rf_applyClosure+0x2ac)[0xb7cc9e5c]
>> /usr/lib/R/lib/libR.so(Rf_eval+0x349)[0xb7cc61d9]
>> /usr/lib/R/lib/libR.so[0xb7c75b89]
>> /usr/lib/R/lib/libR.so(R_ToplevelExec+0xb8)[0xb7c763b8]
>> /usr/lib/R/lib/libR.so(R_tryEval+0x3e)[0xb7c7643e]
>>
>> /usr/lib/R/site-library/RGtk2/libs/RGtk2.so(R_GClosureMarshal+0x86)[0xb6ff18c6]
>> /usr/lib/libgobject-2.0.so.0(g_closure_invoke+0x129)[0xb68a7759]
>> /usr/lib/libgobject-2.0.so.0[0xb68bbd1d]
>> /usr/lib/libgobject-2.0.so.0(g_signal_emit_valist+0x8c6)[0xb68bd916]
>> /usr/lib/libgobject-2.0.so.0(g_signal_emit+0x29)[0xb68bdc59]
>> /usr/lib/libgtk-x11-2.0.so.0(gtk_button_clicked+0x8a)[0xb6bf301a]
>> /usr/lib/libgtk-x11-2.0.so.0[0xb6bf4b7e]
>>
>> /usr/lib/libgobject-2.0.so.0(g_cclosure_marshal_VOID__VOID+0x4f)[0xb68b4a4f]
>> /usr/lib/libgobject-2.0.so.0[0xb68a6079]
>> /usr/lib/libgobject-2.0.so.0(g_closure_invoke+0x129)[0xb68a7759]
>> /usr/lib/libgobject-2.0.so.0[0xb68bb975]
>> /usr/lib/libgobject-2.0.so.0(g_signal_emit_valist+0x8c6)[0xb68bd916]
>> /usr/lib/libgobject-2.0.so.0(g_signal_emit+0x29)[0xb68bdc59]
>> /usr/lib/libgtk-x11-2.0.so.0(gtk_button_released+0x8a)[0xb6bf30aa]
>> /usr/lib/libgtk-x11-2.0.so.0[0xb6bf30d1]
>> /usr/lib/libgtk-x11-2.0.so.0[0xb6ccc8d4]
>> /usr/lib/libgobject-2.0.so.0[0xb68a6079]
>> /usr/lib/libgobject-2.0.so.0(g_closure_invoke+0x129)[0xb68a7759]
>> /usr/lib/libgobject-2.0.so.0[0xb68bbea0]
>> /usr/lib/libgobject-2.0.so.0(g_signal_emit_valist+0x5fe)[0xb68bd64e]
>> /usr/lib/libgobject-2.0.so.0(g_signal_emit+0x29)[0xb68bdc59]
>> /usr/lib/libgtk-x11-2.0.so.0[0xb6deb667]
>> /usr/lib/libgtk-x11-2.0.so.0(gtk_propagate_event+0xc1)[0xb6cc5b21]
>> /usr/lib/libgtk-x11-2.0.so.0(gtk_main_do_event+0x2b8)[0xb6cc6d88]
>> /usr/lib/libgdk-x11-2.0.so.0[0xb6b3fa9a]
>> /usr/lib/libglib-2.0.so.0(g_main_context_dispatch+0x178)[0xb681fbf8]
>> /usr/lib/libglib-2.0.so.0[0xb6822e5e]
>> /usr/lib/libglib-2.0.so.0(g_main_context_iteration+0x6c)[0xb68233ac]
>> /usr/lib/libgtk-x11-2.0.so.0(gtk_main_iteration+0x34)[0xb6cc70d4]
>>
>> /usr/lib/R/site-library/RGtk2/libs/RGtk2.so(R_gtk_eventHandler+0x19)[0xb6f9fb19]
>> /usr/lib/R/lib/libR.so(R_runHandlers+0x46)[0xb7db9586]
>> /usr/lib/R/lib/libR.so[0xb7dba98f]
>> /usr/lib/R/lib/libR.so(R_ReadConsole+0x35)[0xb7db7945]
>> /usr/lib/R/lib/libR.so(Rf_ReplIteration+0x42b)[0xb7cea63b]
>> /usr/lib/R/lib/libR.so(run_Rmainloop+0x102)[0xb7cea7b2]
>> /usr/lib/R/lib/libR.so(Rf_mainloop+0x1c)[0xb7cea80c]
>> /usr/lib/R/bin/exec/R(main+0x46)[0x8048776]
>> /lib/tls/i686/cmov/libc.so.6(__libc_start_main+0xe0)[0xb7ac1450]
>> ======= Memory map: ========
>> 08048000-08049000 r-xp 00000000 08:02 288844     /usr/lib/R/bin/exec/R
>> 08049000-0804a000 rw-p 00000000 08:02 288844     /usr/lib/R/bin/exec/R
>> 0804a000-08ee1000 rw-p 0804a000 00:00 0          [heap]
>> b6387000-b6418000 r--p 00000000 08:02 261255
>> /usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf
>> b6418000-b641a000 r-xp 00000000 08:02 188205
>> /usr/lib/pango/1.6.0/modules/pango-basic-fc.so
>> b641a000-b641b000 rw-p 00001000 08:02 188205
>> /usr/lib/pango/1.6.0/modules/pango-basic-fc.so
>> b641b000-b6421000 r--s 00000000 08:02 187720
>> /var/cache/fontconfig/945677eb7aeafAborted
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From therneau at mayo.edu  Wed Aug  6 17:25:38 2008
From: therneau at mayo.edu (Terry Therneau)
Date: Wed, 6 Aug 2008 10:25:38 -0500 (CDT)
Subject: [Rd] literate programming
Message-ID: <200808061525.m76FPca10661@hsrnfs-101.mayo.edu>

"ESS supported noweb before Sweave existed."
   
   That is the bit I didn't know.  What I was rather looking for was a noweb 
mode that knows about S formatting, and here it was available all along.  I've 
used a version of ESS for a loooong time - probably should re-read the 
documentation one of these days to catch up on all the new features!
   
   "and the latex
syntax was added lateron because some people write whole packages using
noweb and would have had a syntax conflict in their vignettes"

  I'm not quite sure what this means.  
  
  	Thanks much,
  	
  		Terry Therneau


From mathieu.ribatet at epfl.ch  Wed Aug  6 17:40:49 2008
From: mathieu.ribatet at epfl.ch (Mathieu Ribatet)
Date: Wed, 06 Aug 2008 17:40:49 +0200
Subject: [Rd] Adding .PDF files to a package
In-Reply-To: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>
References: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>
Message-ID: <4899C601.5090306@epfl.ch>

Dear Rense,

The way you included your pdf file in your package is appropriate. 
Normally, when invocking "help.start()" and going to your package link, 
you should have two links overview and directory where your pdf file 
should be located.

Best,
Mathieu

Rense Nieuwenhuis a ?crit :
> Deal all,
>
> new as I am to developing packages for R-Project, I apologize on
> beforehand for questions that are too obvious. I am trying to 'add' a
> PDF document containing some detailed information to a package.
>
> The way I understand the Rexts.pdf document, I should add my .PDF
> document to the /inst/doc/ folder, and links to the files should be
> build automatically. However, after building it on MacOSX (10.4)
> using 'R CMD build' and checking it using 'R CMD check', no links
> seems to be present. All checks are OK, but no vignette or whatever
> appears in the help-files of the package.
>
> Clearly, I'm missing something. I would really appreciate some
> pointers on how to integrate an 'additional' pdf file to my package.
>
> Thanks in advance,
>
> Rense Nieuwenhuis
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>   

-- 
Institute of Mathematics
Ecole Polytechnique F?d?rale de Lausanne
STAT-IMA-FSB-EPFL, Station 8
CH-1015 Lausanne   Switzerland
http://stat.epfl.ch/
Tel: + 41 (0)21 693 7907


From mathieu.ribatet at epfl.ch  Wed Aug  6 18:25:45 2008
From: mathieu.ribatet at epfl.ch (Mathieu Ribatet)
Date: Wed, 06 Aug 2008 18:25:45 +0200
Subject: [Rd] Numerical optimisation and "non-feasible" regions
Message-ID: <4899D089.6020208@epfl.ch>

Dear list,

I'm currently writing a C code to compute the (composite) likelihood - 
well this is done but not really robust. The C code is wrapped in an R 
one which call the optimizer routine - optim or nlm. However, the 
fitting procedure is far from being robust as the parameter space 
depends on the parameter - I have a covariance matrix that should be a 
valid one for example.

Currently, I set in my header file something like #define MINF -1.0e120 
and test if we are  in a non-feasible region, then setting the 
log-composite likelihood to MINF. The problem I see with this approach 
is that for a quite large non-feasible region, we have a kind of plateau 
where the  log-composite likelihood  is constant and may have potential 
issues with the optimizer. The other issue is that the gradient is now 
badly estimated using finite-differences.

Consequently, I'm not sure this is the most relevant approach as it 
seems that (especially the BFGS method, probably due to the estimation 
of the gradient) the optimization is really sensitive to this "strategy" 
and fails (quite often).

As I'm (really) not an expert in optimization problems, do you know good 
ways to deal with non-feasible regions? Or do I need to reparametrize my 
model so that all parameters belong to $\mathbb{R}$ - which should be 
not so easy...

Thanks for your expertise!
Best,
Mathieu

-- 
Institute of Mathematics
Ecole Polytechnique F?d?rale de Lausanne
STAT-IMA-FSB-EPFL, Station 8
CH-1015 Lausanne   Switzerland
http://stat.epfl.ch/
Tel: + 41 (0)21 693 7907


From contact at rensenieuwenhuis.nl  Wed Aug  6 21:43:07 2008
From: contact at rensenieuwenhuis.nl (Rense Nieuwenhuis)
Date: Wed, 6 Aug 2008 21:43:07 +0200
Subject: [Rd] Adding .PDF files to a package
In-Reply-To: <4899C601.5090306@epfl.ch>
References: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>
	<4899C601.5090306@epfl.ch>
Message-ID: <3AF97147-580E-4A1D-9387-96A7DC4CD830@rensenieuwenhuis.nl>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080806/9c36bb47/attachment.pl>

From pgilbert at bank-banque-canada.ca  Wed Aug  6 23:29:42 2008
From: pgilbert at bank-banque-canada.ca (Paul Gilbert)
Date: Wed, 06 Aug 2008 17:29:42 -0400
Subject: [Rd] Adding .PDF files to a package
In-Reply-To: <3AF97147-580E-4A1D-9387-96A7DC4CD830@rensenieuwenhuis.nl>
References: <EC8E181B-8CED-4AB4-8483-8786E9D5A852@rensenieuwenhuis.nl>	<4899C601.5090306@epfl.ch>
	<3AF97147-580E-4A1D-9387-96A7DC4CD830@rensenieuwenhuis.nl>
Message-ID: <489A17C6.6000508@bank-banque-canada.ca>

This seems a bit too simplistic but, does it make any difference if your 
file is .pdf rather than .PDF?

Paul

Rense Nieuwenhuis wrote:
> Dear Mathieu,
> 
> thank you for your assurance that my manual-reading-skills are on  
> par! ;-)
> 
> The thing is, though, that I can't get it to work. In the index of  
> the help pages, it reads: ''Read overview or browse directory". The  
> 'browse directory' option does not work. When clicked on the 'Read  
> overview' option, the following text appears:
> 
> "Vignettes of package Read.isi
> Sorry, the package contains no vignette meta-information or index.  
> Please browse the directory."
> 
> So, clearly, some links are missing. Should I manually create an  
> index file? If so, how do I specify the link to the .PDF file?
> 
> I hope someone can help[.
> Thank in advance,
> 
> Rense Nieuwenhuis
> 
> 
> 
> 
> 
> 
> - - -- --- ----- --------
> Rense Nieuwenhuis
> +31 6 481 05 683
> 
> www.rensenieuwenhuis.nl
> 
> On Aug 6, 2008, at 17:40 , Mathieu Ribatet wrote:
> 
> 
>>Dear Rense,
>>
>>The way you included your pdf file in your package is appropriate.  
>>Normally, when invocking "help.start()" and going to your package  
>>link, you should have two links overview and directory where your  
>>pdf file should be located.
>>
>>Best,
>>Mathieu
>>
>>Rense Nieuwenhuis a ?crit :
>>
>>>Deal all,
>>>
>>>new as I am to developing packages for R-Project, I apologize on
>>>beforehand for questions that are too obvious. I am trying to 'add' a
>>>PDF document containing some detailed information to a package.
>>>
>>>The way I understand the Rexts.pdf document, I should add my .PDF
>>>document to the /inst/doc/ folder, and links to the files should be
>>>build automatically. However, after building it on MacOSX (10.4)
>>>using 'R CMD build' and checking it using 'R CMD check', no links
>>>seems to be present. All checks are OK, but no vignette or whatever
>>>appears in the help-files of the package.
>>>
>>>Clearly, I'm missing something. I would really appreciate some
>>>pointers on how to integrate an 'additional' pdf file to my package.
>>>
>>>Thanks in advance,
>>>
>>>Rense Nieuwenhuis
>>>
>>>______________________________________________
>>>R-devel at r-project.org mailing list
>>>https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>>-- 
>>Institute of Mathematics
>>Ecole Polytechnique F?d?rale de Lausanne
>>STAT-IMA-FSB-EPFL, Station 8
>>CH-1015 Lausanne   Switzerland
>>http://stat.epfl.ch/
>>Tel: + 41 (0)21 693 7907
>>
>>
>>
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> 
> 
> ------------------------------------------------------------------------
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
====================================================================================

La version fran?aise suit le texte anglais.

------------------------------------------------------------------------------------

This email may contain privileged and/or confidential in...{{dropped:26}}


From jh910 at juno.com  Thu Aug  7 02:26:59 2008
From: jh910 at juno.com (J. R. M. Hosking)
Date: Wed, 06 Aug 2008 20:26:59 -0400
Subject: [Rd] axis() ignores supplied value of argument mgp[3]?
In-Reply-To: <alpine.LFD.1.10.0808041006480.11319@gannet.stats.ox.ac.uk>
References: <g5tihu$k8u$1@ger.gmane.org>	<alpine.LFD.1.10.0807291612130.30827@gannet.stats.ox.ac.uk>	<g75qu2$u9h$1@ger.gmane.org>
	<alpine.LFD.1.10.0808041006480.11319@gannet.stats.ox.ac.uk>
Message-ID: <g7dfgi$f22$1@ger.gmane.org>

Prof Brian Ripley wrote:
> On Sun, 3 Aug 2008, J. R. M. Hosking wrote:
> 
>> Prof Brian Ripley wrote:
>>> What is true is that the line is set before the inline setting of mgp 
>>> is processed: it all depends on what 'supplied' means, and you 
>>> supplied two values.
>>>
>>> This is changed in R-patched now.
>>
>> Thank you, that works.  Here is a perhaps related issue:
>>
>> R Help on 'axis' for argument 'line' says "The relative placing of
>> tick marks and tick labels is unchanged".  But this appears not to be
>> the case when graphics parameter mgp[3] is nonzero:
>>
>>  plot(1:4, yaxt="n")
>>  par(mgp=c(3,2,1))
>>  axis(2, 1:2)
>>  axis(2, 3:4, line=1)
>>
>> which one (or, at least, I) would expect to place all the tick labels
>> the same distance into the margin, does not in fact do so.
> 
> I don't think that is what it says. Setting 'line' or 'pos' temporarily 
> sets mgp[3] to zero (which is what the help implies in parts you did not 
> quote).

I'm afraid I read the help closely several times and did not find that
implication.

> Otherwise 'line' would just duplicate mgp[3].

Which is still useful functionality --- easier to supply a single value
than to change one element of a 3-element vector.

>> My interpretation is that axis() is taking mgp[2] rather than the
>> correct mgp[2]-mgp[3] as the relative position of the tick mark with
> 
> Why is it correct when you have been told 'mgp[3]' was overridden?

That was my best attempt to interpret the phrase "relative placing of
... tick labels", given that no graphics parameter is explicitly
documented as having that meaning.

> We could explicitly say it is treated as zero for ultimate clarity.
> 
>> respect to the axis line.

To summarize (if I now understand things correctly): when the position
of the axis line is determined by the value of mgp[3], then mgp[2] is
the absolute position (number of lines into the margin) of the tick
labels; but if the position of the axis line is determined by the 'line'
or 'pos' arguments of axis(), then mgp[2] is the relative position of
the tick labels (number of lines between the tick labels and the axis
line).  If this is the intended behaviour, then certainly I think it
would be helpful if it were explicitly documented.


J. R. M. Hosking


From bolker at ufl.edu  Thu Aug  7 02:47:11 2008
From: bolker at ufl.edu (Ben Bolker)
Date: Thu, 7 Aug 2008 00:47:11 +0000 (UTC)
Subject: [Rd] Numerical optimisation and "non-feasible" regions
References: <4899D089.6020208@epfl.ch>
Message-ID: <loom.20080807T004607-309@post.gmane.org>

Mathieu Ribatet <mathieu.ribatet <at> epfl.ch> writes:

> 
> Dear list,
> 
> I'm currently writing a C code to compute the (composite) likelihood - 
> well this is done but not really robust. The C code is wrapped in an R 
> one which call the optimizer routine - optim or nlm. However, the 
> fitting procedure is far from being robust as the parameter space 
> depends on the parameter - I have a covariance matrix that should be a 
> valid one for example.
  
  One reasonably straightforward hack to deal with this is
to add a penalty that is (e.g.) a quadratic function of the
distance from the feasible region, if that is reasonably
straightforward to compute -- that way your function will
get gently pushed back toward the feasible region.

  Ben Bolker


From ripley at stats.ox.ac.uk  Thu Aug  7 07:13:50 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 06:13:50 +0100 (BST)
Subject: [Rd] axis() ignores supplied value of argument mgp[3]?
In-Reply-To: <g7dfgi$f22$1@ger.gmane.org>
References: <g5tihu$k8u$1@ger.gmane.org>
	<alpine.LFD.1.10.0807291612130.30827@gannet.stats.ox.ac.uk>
	<g75qu2$u9h$1@ger.gmane.org>
	<alpine.LFD.1.10.0808041006480.11319@gannet.stats.ox.ac.uk>
	<g7dfgi$f22$1@ger.gmane.org>
Message-ID: <alpine.LFD.1.10.0808070613150.3607@gannet.stats.ox.ac.uk>

Have you looked at the current documentation on the svn server?

On Wed, 6 Aug 2008, J. R. M. Hosking wrote:

> Prof Brian Ripley wrote:
>> On Sun, 3 Aug 2008, J. R. M. Hosking wrote:
>> 
>>> Prof Brian Ripley wrote:
>>>> What is true is that the line is set before the inline setting of mgp is 
>>>> processed: it all depends on what 'supplied' means, and you supplied two 
>>>> values.
>>>> 
>>>> This is changed in R-patched now.
>>> 
>>> Thank you, that works.  Here is a perhaps related issue:
>>> 
>>> R Help on 'axis' for argument 'line' says "The relative placing of
>>> tick marks and tick labels is unchanged".  But this appears not to be
>>> the case when graphics parameter mgp[3] is nonzero:
>>>
>>>  plot(1:4, yaxt="n")
>>>  par(mgp=c(3,2,1))
>>>  axis(2, 1:2)
>>>  axis(2, 3:4, line=1)
>>> 
>>> which one (or, at least, I) would expect to place all the tick labels
>>> the same distance into the margin, does not in fact do so.
>> 
>> I don't think that is what it says. Setting 'line' or 'pos' temporarily 
>> sets mgp[3] to zero (which is what the help implies in parts you did not 
>> quote).
>
> I'm afraid I read the help closely several times and did not find that
> implication.
>
>> Otherwise 'line' would just duplicate mgp[3].
>
> Which is still useful functionality --- easier to supply a single value
> than to change one element of a 3-element vector.
>
>>> My interpretation is that axis() is taking mgp[2] rather than the
>>> correct mgp[2]-mgp[3] as the relative position of the tick mark with
>> 
>> Why is it correct when you have been told 'mgp[3]' was overridden?
>
> That was my best attempt to interpret the phrase "relative placing of
> ... tick labels", given that no graphics parameter is explicitly
> documented as having that meaning.
>
>> We could explicitly say it is treated as zero for ultimate clarity.
>> 
>>> respect to the axis line.
>
> To summarize (if I now understand things correctly): when the position
> of the axis line is determined by the value of mgp[3], then mgp[2] is
> the absolute position (number of lines into the margin) of the tick
> labels; but if the position of the axis line is determined by the 'line'
> or 'pos' arguments of axis(), then mgp[2] is the relative position of
> the tick labels (number of lines between the tick labels and the axis
> line).  If this is the intended behaviour, then certainly I think it
> would be helpful if it were explicitly documented.
>
>
> J. R. M. Hosking
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From Friedrich.Leisch at stat.uni-muenchen.de  Thu Aug  7 08:14:26 2008
From: Friedrich.Leisch at stat.uni-muenchen.de (Friedrich.Leisch at stat.uni-muenchen.de)
Date: Thu, 7 Aug 2008 08:14:26 +0200
Subject: [Rd] literate programming
In-Reply-To: <200808061525.m76FPca10661@hsrnfs-101.mayo.edu>
References: <200808061525.m76FPca10661@hsrnfs-101.mayo.edu>
Message-ID: <18586.37570.376847.725301@ridcully.stat.uni-muenchen.de>

>>>>> On Wed, 6 Aug 2008 10:25:38 -0500 (CDT),
>>>>> Terry Therneau (TT) wrote:

  > "ESS supported noweb before Sweave existed."
  >    That is the bit I didn't know.  What I was rather looking for was a noweb 
  > mode that knows about S formatting, and here it was available all along.  I've 
  > used a version of ESS for a loooong time - probably should re-read the 
  > documentation one of these days to catch up on all the new
  >    features!

  >    "and the latex
  > syntax was added lateron because some people write whole packages using
  > noweb and would have had a syntax conflict in their vignettes"

  >   I'm not quite sure what this means.  
  
Well, you can write your Sweave files also looking like

**********************************************************

This is some latex documentation bla bla bla

And here comes a code chuck:

\begin{Scode}{echo=FALSE,fig=TRUE}
plot(rnorm(100))
\end{Scode}

and here we go again with latex

**********************************************************

and Sweave will process it correctly (if the file has extension
.Rtex). As Sweave does not use noweb's magic <<>>= tags in this case,
you can use those for regular noweb processing. Of course you loose
the nice handling of code chunks by ESS in that case ...

Best,
Fritz


From hpages at fhcrc.org  Thu Aug  7 08:14:22 2008
From: hpages at fhcrc.org (hpages at fhcrc.org)
Date: Wed, 06 Aug 2008 23:14:22 -0700
Subject: [Rd] Cannot link mypackage to 2 other packages
Message-ID: <20080806231422.i59dacelpgkwws8k@webmail.fhcrc.org>

Hi,

I need to link mypackage to 2 other packages so I can call
some C functions defined in these 2 packages from mine.

I've tried
   Depends: packageA, packageB
   LinkingTo: packageA, packageB
as suggested by the "5.4 Registering native routines" section
of the "Writing R Extensions" manual but then only packageA is
seen at compilation time (gcc is called with
-I"/some/path/to/packageA/include" only).

I've also tried
   Depends: packageA, packageB
   LinkingTo: packageA
   LInkingTo: packageB
but this time only packageB is seen at compilation time.

How can I link mypackage to both packageA and packageB?

Thanks!

H.


From ripley at stats.ox.ac.uk  Thu Aug  7 08:31:37 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 07:31:37 +0100 (BST)
Subject: [Rd] Cannot link mypackage to 2 other packages
In-Reply-To: <20080806231422.i59dacelpgkwws8k@webmail.fhcrc.org>
References: <20080806231422.i59dacelpgkwws8k@webmail.fhcrc.org>
Message-ID: <alpine.LFD.1.10.0808070729250.18594@gannet.stats.ox.ac.uk>

What platform?

We've seen a similar report that said the problem was on Windows only.
Like this one, it had nothing to reproduce.

On Wed, 6 Aug 2008, hpages at fhcrc.org wrote:

> Hi,
>
> I need to link mypackage to 2 other packages so I can call
> some C functions defined in these 2 packages from mine.
>
> I've tried
> Depends: packageA, packageB
> LinkingTo: packageA, packageB
> as suggested by the "5.4 Registering native routines" section
> of the "Writing R Extensions" manual but then only packageA is
> seen at compilation time (gcc is called with
> -I"/some/path/to/packageA/include" only).
>
> I've also tried
> Depends: packageA, packageB
> LinkingTo: packageA
> LInkingTo: packageB
> but this time only packageB is seen at compilation time.
>
> How can I link mypackage to both packageA and packageB?
>
> Thanks!
>
> H.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From hpages at fhcrc.org  Thu Aug  7 08:47:10 2008
From: hpages at fhcrc.org (hpages at fhcrc.org)
Date: Wed, 06 Aug 2008 23:47:10 -0700
Subject: [Rd] Cannot link mypackage to 2 other packages
In-Reply-To: <alpine.LFD.1.10.0808070729250.18594@gannet.stats.ox.ac.uk>
References: <20080806231422.i59dacelpgkwws8k@webmail.fhcrc.org>
	<alpine.LFD.1.10.0808070729250.18594@gannet.stats.ox.ac.uk>
Message-ID: <20080806234710.vhxoxds34s0k0g44@webmail.fhcrc.org>

Quoting Prof Brian Ripley <ripley at stats.ox.ac.uk>:

> What platform?

64-bit openSUSE Linux

hpages at george1:~> uname -a
Linux george1 2.6.22.12-0.1-default #1 SMP 2007/11/06 23:05:18 UTC  
x86_64 x86_64 x86_64 GNU/Linux

R version 2.8.0 Under development (unstable) (2008-07-07 r46046)

>
> We've seen a similar report that said the problem was on Windows only.
> Like this one, it had nothing to reproduce.

Do you want me to send you the packages or to put them somewhere
on our website?

Thanks!
H.

>
> On Wed, 6 Aug 2008, hpages at fhcrc.org wrote:
>
>> Hi,
>>
>> I need to link mypackage to 2 other packages so I can call
>> some C functions defined in these 2 packages from mine.
>>
>> I've tried
>> Depends: packageA, packageB
>> LinkingTo: packageA, packageB
>> as suggested by the "5.4 Registering native routines" section
>> of the "Writing R Extensions" manual but then only packageA is
>> seen at compilation time (gcc is called with
>> -I"/some/path/to/packageA/include" only).
>>
>> I've also tried
>> Depends: packageA, packageB
>> LinkingTo: packageA
>> LInkingTo: packageB
>> but this time only packageB is seen at compilation time.
>>
>> How can I link mypackage to both packageA and packageB?
>>
>> Thanks!
>>
>> H.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From bill at insightful.com  Thu Aug  7 11:24:42 2008
From: bill at insightful.com (bill at insightful.com)
Date: Thu,  7 Aug 2008 11:24:42 +0200 (CEST)
Subject: [Rd] memory leak in sub("[range]",
	...) when #ifndef _LIBC (PR#11946)
Message-ID: <20080807092442.C04B4282C761@mail.pubhealth.ku.dk>

Full_Name: Bill Dunlap
Version: R version 2.8.0 Under development (unstable) (2008-07-05 r46037)
OS: Linux
Submission from: (NULL) (76.28.245.14)


valgrind finds some memory leaks in R when I use sub() with
a range in the regular expression:

% R --debugger=valgrind --debugger-args=--leak-check=full --quiet --vanilla
==28643== Memcheck, a memory error detector.
==28643== Copyright (C) 2002-2006, and GNU GPL'd, by Julian Seward et al.
==28643== Using LibVEX rev 1658, a library for dynamic binary translation.
==28643== Copyright (C) 2004-2006, and GNU GPL'd, by OpenWorks LLP.
==28643== Using valgrind-3.2.1, a dynamic binary instrumentation framework.
==28643== Copyright (C) 2000-2006, and GNU GPL'd, by Julian Seward et al.
==28643== For more details, rerun with: -v
==28643==
> for(i in 1:1000)sub("[0-9]","*","17")
> q()
==28643==
==28643== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 38 from 2)
==28643== malloc/free: in use at exit: 12,607,663 bytes in 7,918 blocks.
==28643== malloc/free: 61,907 allocs, 53,989 frees, 54,692,481 bytes allocated.
==28643== For counts of detected errors, rerun with: -v
==28643== searching for pointers to 7,918 not-freed blocks.
==28643== checked 12,620,188 bytes.
==28643==
==28643== 82 bytes in 4 blocks are definitely lost in loss record 15 of 44
==28643==    at 0x40046EE: malloc (vg_replace_malloc.c:149)
==28643==    by 0x3200FF9: xmalloc (in
/a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
==28643==    by 0x31EC0D5: readline_internal_teardown (in
/a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
==28643==    by 0x31FD992: rl_callback_read_char (in
/a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
==28643==    by 0x80E7634: Rstd_ReadConsole (sys-std.c:905)
==28643==    by 0x8057EA9: Rf_ReplIteration (main.c:205)
==28643==    by 0x80581C6: R_ReplConsole (main.c:306)
==28643==    by 0x805845C: run_Rmainloop (main.c:966)
==28643==    by 0x80566B5: main (Rmain.c:33)
==28643==
==28643==
==28643== 7,996 bytes in 1,999 blocks are definitely lost in loss record 35 of
44
==28643==    at 0x40046EE: malloc (vg_replace_malloc.c:149)
==28643==    by 0x4005B9A: realloc (vg_replace_malloc.c:306)
==28643==    by 0x80A5E22: parse_expression (regex.c:5202)
==28643==    by 0x80A5FDF: parse_branch (regex.c:4707)
==28643==    by 0x80A60AA: parse_reg_exp (regex.c:4666)
==28643==    by 0x80A64A8: Rf_regcomp (regex.c:4635)
==28643==    by 0x8110AE0: do_gsub (character.c:1355)
==28643==    by 0x80653BC: do_internal (names.c:1129)
==28643==    by 0x815EF17: Rf_eval (eval.c:461)
==28643==    by 0x8160BD3: do_begin (eval.c:1174)
==28643==    by 0x815EF17: Rf_eval (eval.c:461)
==28643==    by 0x816203C: Rf_applyClosure (eval.c:667)
==28643==
==28643== LEAK SUMMARY:
==28643==    definitely lost: 8,078 bytes in 2,003 blocks.
==28643==      possibly lost: 0 bytes in 0 blocks.
==28643==    still reachable: 12,599,585 bytes in 5,915 blocks.
==28643==         suppressed: 0 bytes in 0 blocks.
==28643== Reachable blocks (those to which a pointer was found) are not shown.
==28643== To see them, rerun with: --show-reachable=yes

The flagged memory block is the range_ends component of mbcset.
I think that range_starts was also being leaked, but valgrind was
combining the two.
 
It looks like the cpp macro _LIBC is not defined when I compile
R in this Linux box.  regex.c defines range_ends and range_starts
as different types, depending on the value of _LIBC, and it allocates
space for them in either case.  However, free_charset() was only
freeing these things if _LIBC was defined.  The following change
to regex.c:free_charset() seems to take care of the problem.

% svn diff regex.c
Index: regex.c
===================================================================
--- regex.c     (revision 46038)
+++ regex.c     (working copy)
@@ -6240,9 +6240,9 @@
 # ifdef _LIBC
   re_free (cset->coll_syms);
   re_free (cset->equiv_classes);
+# endif
   re_free (cset->range_starts);
   re_free (cset->range_ends);
-# endif
   re_free (cset->char_classes);
   re_free (cset);
 }


> version
               _
platform       i686-pc-linux-gnu
arch           i686
os             linux-gnu
system         i686, linux-gnu
status         Under development (unstable)
major          2
minor          8.0
year           2008
month          07
day            05
svn rev        46037
language       R
version.string R version 2.8.0 Under development (unstable) (2008-07-05 r46037)


From timhesterberg at gmail.com  Thu Aug  7 11:25:15 2008
From: timhesterberg at gmail.com (timhesterberg at gmail.com)
Date: Thu,  7 Aug 2008 11:25:15 +0200 (CEST)
Subject: [Rd] When a tests/*.R file is run,
	the package should automatically be loaded (PR#11950)
Message-ID: <20080807092515.ED0D6282EFF1@mail.pubhealth.ku.dk>

Suppose that a package "foo" contains a tests directory with a number
of *.R files.  Currently, each of the .R files must begin with
    library("foo")
or the library is not loaded.

I suggest that the package be loaded automatically (at the beginning
of each file, or before any of the files are run), with lib.loc set
to the location of the package being loaded.
This would be more convenient for package creators.
It would also avoid confusion and errors related to:
* name of the package (e.g. if the author is creating multiple versions)
* lib.loc (the location may not be in the standard path, and there may be
multiple
  copies of the library in different locations)

If someone does not want the library loaded (this seems far-fetched) they
could detach the library.

--please do not edit the information below--

Version:
 platform = i486-pc-linux-gnu
 arch = i486
 os = linux-gnu
 system = i486, linux-gnu
 status =
 major = 2
 minor = 7.1
 year = 2008
 month = 06
 day = 23
 svn rev = 45970
 language = R
 version.string = R version 2.7.1 (2008-06-23)

Locale:
LC_CTYPE=en_US;LC_NUMERIC=C;LC_TIME=C;LC_COLLATE=C;LC_MONETARY=C;LC_MESSAGES=en_US;LC_PAPER=en_US;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US;LC_IDENTIFICATION=C

Search Path:
 .GlobalEnv, package:stats, package:graphics, package:grDevices,
package:utils, package:datasets, package:showStructure, package:Rcode,
package:splus2R, package:methods, Autoloads, package:base

	[[alternative HTML version deleted]]


From Robert.McGehee at geodecapital.com  Thu Aug  7 11:28:57 2008
From: Robert.McGehee at geodecapital.com (Robert.McGehee at geodecapital.com)
Date: Thu,  7 Aug 2008 11:28:57 +0200 (CEST)
Subject: [Rd] sapply(Date, is.numeric) (PR#11982)
Message-ID: <20080807092857.A2944282EFF1@mail.pubhealth.ku.dk>

R-developers,
The results below are inconsistent. From the documentation for
is.numeric, I expect FALSE in both cases.

> x <- data.frame(dt=3DSys.Date())
> is.numeric(x$dt)
[1] FALSE
> sapply(x, is.numeric)
  dt
TRUE

## Yet, sapply seems aware of the Date class
> sapply(x, class)
  dt
"Date"

Thanks,

Robert McGehee, CFA
Geode Capital Management, LLC
One Post Office Square, 28th Floor | Boston, MA | 02109
Tel: 617/392-8396    Fax:617/476-6389
mailto:robert.mcgehee at geodecapital.com



This e-mail, and any attachments hereto, are intended fo...{{dropped:13}}


From robert.mcgehee at geodecapital.com  Thu Aug  7 11:32:20 2008
From: robert.mcgehee at geodecapital.com (robert.mcgehee at geodecapital.com)
Date: Thu,  7 Aug 2008 11:32:20 +0200 (CEST)
Subject: [Rd] sapply(Date, is.numeric) (PR#12008)
Message-ID: <20080807093220.5DEB0282EFC2@mail.pubhealth.ku.dk>

Full_Name: Robert McGehee
Version: 2.7.1
OS: Windows
Submission from: (NULL) (192.223.226.6)


R-developers,
The results below seem inconsistent. From the documentation for is.numeric, I
expect FALSE in both cases.

> x <- data.frame(dt=Sys.Date())
> is.numeric(x$dt)
[1] FALSE
> sapply(x, is.numeric)
  dt
TRUE

## Yet, sapply seems aware of the Date class
> sapply(x, class)
  dt
"Date"

Thanks,
Robert

PS. Sorry if this sent twice. I originally sent this on Monday to
R-bugs at biostat.ku.dk, but it didn't seem to go through. Perhaps it's a
deprecated  email address (?).


From paul.eckermann at adelaide.edu.au  Thu Aug  7 11:33:15 2008
From: paul.eckermann at adelaide.edu.au (paul.eckermann at adelaide.edu.au)
Date: Thu,  7 Aug 2008 11:33:15 +0200 (CEST)
Subject: [Rd] Bug in rnorm? (PR#12016)
Message-ID: <20080807093315.B1174282EFC2@mail.pubhealth.ku.dk>

Full_Name: Paul Eckermann
Version: 2.7.1
OS: Windows XP Service Pack 2
Submission from: (NULL) (129.127.183.12)


This is the first time I have submitted a bug report, so apologies if I have not
followed the correct protocol.

If I enter

length(rnorm(100*.29))

it returns 28 rather than 29.

y<-(1:100)/100
z<-sapply(y,function(x) length(rnorm(x*100)))
z!=100*y

indicates that it has something to do with multiples of 7 (rounding error?),
even though 29, 57 and 58 are the 3 values for which it returns incorrect values
of z.

I hope that this is not something obvious that I have missed. This can be
overcome by doing the x*100 calculation outside the rnorm function, but I don't
see why this needs to be done when the answer is (supposed to be) an integer.

Regards,
Paul Eckermann


From cgenolin at u-paris10.fr  Thu Aug  7 11:33:41 2008
From: cgenolin at u-paris10.fr (cgenolin at u-paris10.fr)
Date: Thu,  7 Aug 2008 11:33:41 +0200 (CEST)
Subject: [Rd] package.skeleton does invalide regular name, bis... (PR#12020)
Message-ID: <20080807093342.08E98282EFC1@mail.pubhealth.ku.dk>

Hi the list,

I guess I find an other bug (the first one is at the end off this mail) 
in package.skeleton. It occurs when we give as code_file some file that 
are not in the current directories.

If we give a single file to code_file (like code_file=3D"riri/fifi.R"), 
it does not reconize fifi.R as a regular name and change it to 
riri/zfifi.R

If we give several file to code_file (like 
code_file=3Dc("riri/titi.R","riri/loulou.R")), it does not reconize 
titi.R as a regular name, change it to toto/ztiti.R and we get an error 
on riri/loulou.R

Christophe

--- 8< ---------------------
> package.skeleton(name=3D"miniKml",code_files=3Dc("miniKml/R/global.R","mi=
niKml/R/global2.R"),force=3DTRUE)

Cr=E9ation des r=E9pertoires...
Cr=E9ation de DESCRIPTION...
Cr=E9ation de 'Read-and-delete-me'...
Recopiage des fichiers de code...
Erreur dans file.rename(from =3D file.path(code_dir, bn), to =3D 
file.path(code_dir,  :  'source' doit =EAtre une cha=EEne de caract=E8res u=
nique
De plus : Warning message:
In package.skeleton(name =3D "miniKml", code_files =3D c("miniKml/R/global.=
R",  :
  Nom(s) de fichier(s) invalide(s) pour du code R ./miniKml/R:
  'global.R', 'global2.R'
sont maintenant renomm=E9s vers 'z<nom>.R'
--- 8< --------------------------


> Hi the list,
>
> I am using package.skeleton on a file that has a very classic name, 
> but package.skeleton detect it as a invalid name :
>
> --- 8< -------
> package.skeleton(name=3D"packClassicBis",code_files=3D"./packClassic/R/pr=
ogClassic.R")
>
> Cr=E9ation des r=E9pertoires...
> Cr=E9ation de DESCRIPTION...
> Cr=E9ation de 'Read-and-delete-me'...
> Recopiage des fichiers de code...
> Cr=E9ation des fichiers d'aide ...
> Termin=E9.
> Les =E9tapes suivantes sont d=E9crites dans './packClassic4/Read-and-dele=
te-me'.
> Warning message:
> In package.skeleton(name =3D "packClassic4", code_files =3D 
> "./packClassic/R/progClassic.R") :
>  Nom(s) de fichier(s) invalide(s) pour du code R ./packClassic4/R:
>  'progClassic.R'
> sont maintenant renomm=E9s vers 'z<nom>.R'
> --- 8< -------
>
> It create the file "zprogClassic.R" in directorie "packClassicBis\R"
> Is there something wrong in my code or is it a bug in package.skeleton ?
>
> Christophe
>
> ----------------------------------------------------------------
> Ce message a ete envoye par IMP, grace a l'Universite Paris 10 Nanterre
>
>
>


From p.dalgaard at biostat.ku.dk  Thu Aug  7 11:43:50 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Thu, 07 Aug 2008 11:43:50 +0200
Subject: [Rd] Bug repository awakening
Message-ID: <489AC3D6.2090806@biostat.ku.dk>

Looks like reports from the last month are trickling in. 170 of them in 
incoming, but there's a lot of spam. I hope Martin's spamfilters are 
less leaky that ours, so that they get killed en route to r-devel....

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From ripley at stats.ox.ac.uk  Thu Aug  7 11:47:03 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 10:47:03 +0100 (BST)
Subject: [Rd] Bug in rnorm? (PR#12016)
In-Reply-To: <20080807093315.B1174282EFC2@mail.pubhealth.ku.dk>
References: <20080807093315.B1174282EFC2@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808071044340.26397@gannet.stats.ox.ac.uk>

Try printing floor(100*.29): you have forgotten about representation 
error.

>From the help page:
        n: number of observations. If 'length(n) > 1', the length is
           taken to be the number required.

and you asked for (just) less than 29 observations, and got what you asked 
for.

On Thu, 7 Aug 2008, paul.eckermann at adelaide.edu.au wrote:

> Full_Name: Paul Eckermann
> Version: 2.7.1
> OS: Windows XP Service Pack 2
> Submission from: (NULL) (129.127.183.12)
>
>
> This is the first time I have submitted a bug report, so apologies if I have not
> followed the correct protocol.
>
> If I enter
>
> length(rnorm(100*.29))
>
> it returns 28 rather than 29.
>
> y<-(1:100)/100
> z<-sapply(y,function(x) length(rnorm(x*100)))
> z!=100*y
>
> indicates that it has something to do with multiples of 7 (rounding error?),
> even though 29, 57 and 58 are the 3 values for which it returns incorrect values
> of z.
>
> I hope that this is not something obvious that I have missed. This can 
> be overcome by doing the x*100 calculation outside the rnorm function, 
> but I don't see why this needs to be done when the answer is (supposed 
> to be) an integer.

Supposed by whom?

> Regards,
> Paul Eckermann
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Thu Aug  7 11:47:40 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 10:47:40 +0100 (BST)
Subject: [Rd] memory leak in sub("[range]",
 ...) when #ifndef _LIBC (PR#11946)
In-Reply-To: <20080807092442.C04B4282C761@mail.pubhealth.ku.dk>
References: <20080807092442.C04B4282C761@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808071047080.26397@gannet.stats.ox.ac.uk>

For the record: this is now fixed.

On Thu, 7 Aug 2008, bill at insightful.com wrote:

> Full_Name: Bill Dunlap
> Version: R version 2.8.0 Under development (unstable) (2008-07-05 r46037)
> OS: Linux
> Submission from: (NULL) (76.28.245.14)
>
>
> valgrind finds some memory leaks in R when I use sub() with
> a range in the regular expression:
>
> % R --debugger=valgrind --debugger-args=--leak-check=full --quiet --vanilla
> ==28643== Memcheck, a memory error detector.
> ==28643== Copyright (C) 2002-2006, and GNU GPL'd, by Julian Seward et al.
> ==28643== Using LibVEX rev 1658, a library for dynamic binary translation.
> ==28643== Copyright (C) 2004-2006, and GNU GPL'd, by OpenWorks LLP.
> ==28643== Using valgrind-3.2.1, a dynamic binary instrumentation framework.
> ==28643== Copyright (C) 2000-2006, and GNU GPL'd, by Julian Seward et al.
> ==28643== For more details, rerun with: -v
> ==28643==
>> for(i in 1:1000)sub("[0-9]","*","17")
>> q()
> ==28643==
> ==28643== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 38 from 2)
> ==28643== malloc/free: in use at exit: 12,607,663 bytes in 7,918 blocks.
> ==28643== malloc/free: 61,907 allocs, 53,989 frees, 54,692,481 bytes allocated.
> ==28643== For counts of detected errors, rerun with: -v
> ==28643== searching for pointers to 7,918 not-freed blocks.
> ==28643== checked 12,620,188 bytes.
> ==28643==
> ==28643== 82 bytes in 4 blocks are definitely lost in loss record 15 of 44
> ==28643==    at 0x40046EE: malloc (vg_replace_malloc.c:149)
> ==28643==    by 0x3200FF9: xmalloc (in
> /a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
> ==28643==    by 0x31EC0D5: readline_internal_teardown (in
> /a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
> ==28643==    by 0x31FD992: rl_callback_read_char (in
> /a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
> ==28643==    by 0x80E7634: Rstd_ReadConsole (sys-std.c:905)
> ==28643==    by 0x8057EA9: Rf_ReplIteration (main.c:205)
> ==28643==    by 0x80581C6: R_ReplConsole (main.c:306)
> ==28643==    by 0x805845C: run_Rmainloop (main.c:966)
> ==28643==    by 0x80566B5: main (Rmain.c:33)
> ==28643==
> ==28643==
> ==28643== 7,996 bytes in 1,999 blocks are definitely lost in loss record 35 of
> 44
> ==28643==    at 0x40046EE: malloc (vg_replace_malloc.c:149)
> ==28643==    by 0x4005B9A: realloc (vg_replace_malloc.c:306)
> ==28643==    by 0x80A5E22: parse_expression (regex.c:5202)
> ==28643==    by 0x80A5FDF: parse_branch (regex.c:4707)
> ==28643==    by 0x80A60AA: parse_reg_exp (regex.c:4666)
> ==28643==    by 0x80A64A8: Rf_regcomp (regex.c:4635)
> ==28643==    by 0x8110AE0: do_gsub (character.c:1355)
> ==28643==    by 0x80653BC: do_internal (names.c:1129)
> ==28643==    by 0x815EF17: Rf_eval (eval.c:461)
> ==28643==    by 0x8160BD3: do_begin (eval.c:1174)
> ==28643==    by 0x815EF17: Rf_eval (eval.c:461)
> ==28643==    by 0x816203C: Rf_applyClosure (eval.c:667)
> ==28643==
> ==28643== LEAK SUMMARY:
> ==28643==    definitely lost: 8,078 bytes in 2,003 blocks.
> ==28643==      possibly lost: 0 bytes in 0 blocks.
> ==28643==    still reachable: 12,599,585 bytes in 5,915 blocks.
> ==28643==         suppressed: 0 bytes in 0 blocks.
> ==28643== Reachable blocks (those to which a pointer was found) are not shown.
> ==28643== To see them, rerun with: --show-reachable=yes
>
> The flagged memory block is the range_ends component of mbcset.
> I think that range_starts was also being leaked, but valgrind was
> combining the two.
>
> It looks like the cpp macro _LIBC is not defined when I compile
> R in this Linux box.  regex.c defines range_ends and range_starts
> as different types, depending on the value of _LIBC, and it allocates
> space for them in either case.  However, free_charset() was only
> freeing these things if _LIBC was defined.  The following change
> to regex.c:free_charset() seems to take care of the problem.
>
> % svn diff regex.c
> Index: regex.c
> ===================================================================
> --- regex.c     (revision 46038)
> +++ regex.c     (working copy)
> @@ -6240,9 +6240,9 @@
> # ifdef _LIBC
>   re_free (cset->coll_syms);
>   re_free (cset->equiv_classes);
> +# endif
>   re_free (cset->range_starts);
>   re_free (cset->range_ends);
> -# endif
>   re_free (cset->char_classes);
>   re_free (cset);
> }
>
>
>> version
>               _
> platform       i686-pc-linux-gnu
> arch           i686
> os             linux-gnu
> system         i686, linux-gnu
> status         Under development (unstable)
> major          2
> minor          8.0
> year           2008
> month          07
> day            05
> svn rev        46037
> language       R
> version.string R version 2.8.0 Under development (unstable) (2008-07-05 r46037)
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Thu Aug  7 11:48:01 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 10:48:01 +0100 (BST)
Subject: [Rd] sapply(Date, is.numeric) (PR#12008)
In-Reply-To: <20080807093220.5DEB0282EFC2@mail.pubhealth.ku.dk>
References: <20080807093220.5DEB0282EFC2@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808071047540.26397@gannet.stats.ox.ac.uk>

For the record: this is now fixed.

On Thu, 7 Aug 2008, robert.mcgehee at geodecapital.com wrote:

> Full_Name: Robert McGehee
> Version: 2.7.1
> OS: Windows
> Submission from: (NULL) (192.223.226.6)
>
>
> R-developers,
> The results below seem inconsistent. From the documentation for is.numeric, I
> expect FALSE in both cases.
>
>> x <- data.frame(dt=Sys.Date())
>> is.numeric(x$dt)
> [1] FALSE
>> sapply(x, is.numeric)
>  dt
> TRUE
>
> ## Yet, sapply seems aware of the Date class
>> sapply(x, class)
>  dt
> "Date"
>
> Thanks,
> Robert
>
> PS. Sorry if this sent twice. I originally sent this on Monday to
> R-bugs at biostat.ku.dk, but it didn't seem to go through. Perhaps it's a
> deprecated  email address (?).
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From Thierry.ONKELINX at inbo.be  Thu Aug  7 11:49:51 2008
From: Thierry.ONKELINX at inbo.be (ONKELINX, Thierry)
Date: Thu, 7 Aug 2008 11:49:51 +0200
Subject: [Rd] Bug in rnorm? (PR#12016)
In-Reply-To: <20080807093315.B1174282EFC2@mail.pubhealth.ku.dk>
References: <20080807093315.B1174282EFC2@mail.pubhealth.ku.dk>
Message-ID: <2E9C414912813E4EB981326983E0A1040536F6D6@inboexch.inbo.be>


That's not a bug. It's FAQ 7.31

Thierry


------------------------------------------------------------------------
----
ir. Thierry Onkelinx
Instituut voor natuur- en bosonderzoek / Research Institute for Nature
and Forest
Cel biometrie, methodologie en kwaliteitszorg / Section biometrics,
methodology and quality assurance
Gaverstraat 4
9500 Geraardsbergen
Belgium
tel. + 32 54/436 185
Thierry.Onkelinx at inbo.be
www.inbo.be

To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to
say what the experiment died of.
~ Sir Ronald Aylmer Fisher

The plural of anecdote is not data.
~ Roger Brinner

The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of
data.
~ John Tukey

-----Oorspronkelijk bericht-----
Van: r-devel-bounces at r-project.org
[mailto:r-devel-bounces at r-project.org] Namens
paul.eckermann at adelaide.edu.au
Verzonden: donderdag 7 augustus 2008 11:33
Aan: r-devel at stat.math.ethz.ch
CC: R-bugs at biostat.ku.dk
Onderwerp: [Rd] Bug in rnorm? (PR#12016)

Full_Name: Paul Eckermann
Version: 2.7.1
OS: Windows XP Service Pack 2
Submission from: (NULL) (129.127.183.12)


This is the first time I have submitted a bug report, so apologies if I
have not
followed the correct protocol.

If I enter

length(rnorm(100*.29))

it returns 28 rather than 29.

y<-(1:100)/100
z<-sapply(y,function(x) length(rnorm(x*100)))
z!=100*y

indicates that it has something to do with multiples of 7 (rounding
error?),
even though 29, 57 and 58 are the 3 values for which it returns
incorrect values
of z.

I hope that this is not something obvious that I have missed. This can
be
overcome by doing the x*100 calculation outside the rnorm function, but
I don't
see why this needs to be done when the answer is (supposed to be) an
integer.

Regards,
Paul Eckermann

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

Dit bericht en eventuele bijlagen geven enkel de visie van de schrijver weer en bindt het INBO onder geen enkel beding, zolang dit bericht niet bevestigd is door een geldig ondertekend document.
The views expressed in  this message and any annex are purely those of the writer and may not be regarded as stating an official position of INBO, as long as the message is not confirmed bij a duly signed document


From ripley at stats.ox.ac.uk  Thu Aug  7 11:48:26 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 10:48:26 +0100 (BST)
Subject: [Rd] sapply(Date, is.numeric) (PR#11982)
In-Reply-To: <20080807092857.A2944282EFF1@mail.pubhealth.ku.dk>
References: <20080807092857.A2944282EFF1@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808071048100.26397@gannet.stats.ox.ac.uk>

For the record: this is now fixed.

On Thu, 7 Aug 2008, 
Robert.McGehee at geodecapital.com wrote:

> R-developers,
> The results below are inconsistent. From the documentation for
> is.numeric, I expect FALSE in both cases.
>
>> x <- data.frame(dt=3DSys.Date())
>> is.numeric(x$dt)
> [1] FALSE
>> sapply(x, is.numeric)
>  dt
> TRUE
>
> ## Yet, sapply seems aware of the Date class
>> sapply(x, class)
>  dt
> "Date"
>
> Thanks,
>
> Robert McGehee, CFA
> Geode Capital Management, LLC
> One Post Office Square, 28th Floor | Boston, MA | 02109
> Tel: 617/392-8396    Fax:617/476-6389
> mailto:robert.mcgehee at geodecapital.com
>
>
>
> This e-mail, and any attachments hereto, are intended fo...{{dropped:13}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From mathieu.ribatet at epfl.ch  Thu Aug  7 11:52:28 2008
From: mathieu.ribatet at epfl.ch (Mathieu Ribatet)
Date: Thu, 07 Aug 2008 11:52:28 +0200
Subject: [Rd] Numerical optimisation and "non-feasible" regions
In-Reply-To: <loom.20080807T004607-309@post.gmane.org>
References: <4899D089.6020208@epfl.ch>
	<loom.20080807T004607-309@post.gmane.org>
Message-ID: <489AC5DC.10508@epfl.ch>

Thanks Ben for your tips.
I'm not sure it'll be so easy to do (as the non-feasible regions depend 
on the model parameters), but I'm sure it's worth giving a try.
Thanks !!!
Best,

Mathieu

Ben Bolker a ?crit :
> Mathieu Ribatet <mathieu.ribatet <at> epfl.ch> writes:
>
>   
>> Dear list,
>>
>> I'm currently writing a C code to compute the (composite) likelihood -
>> well this is done but not really robust. The C code is wrapped in an R
>> one which call the optimizer routine - optim or nlm. However, the
>> fitting procedure is far from being robust as the parameter space
>> depends on the parameter - I have a covariance matrix that should be a
>> valid one for example.
>>     
>
>   One reasonably straightforward hack to deal with this is
> to add a penalty that is (e.g.) a quadratic function of the
> distance from the feasible region, if that is reasonably
> straightforward to compute -- that way your function will
> get gently pushed back toward the feasible region.
>
>   Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>   

-- 
Institute of Mathematics
Ecole Polytechnique F?d?rale de Lausanne
STAT-IMA-FSB-EPFL, Station 8
CH-1015 Lausanne   Switzerland
http://stat.epfl.ch/
Tel: + 41 (0)21 693 7907


From Robert.McGehee at geodecapital.com  Thu Aug  7 12:02:15 2008
From: Robert.McGehee at geodecapital.com (Robert.McGehee at geodecapital.com)
Date: Thu,  7 Aug 2008 12:02:15 +0200 (CEST)
Subject: [Rd] sapply(Date, is.numeric) (PR#12221)
Message-ID: <20080807100216.253D9282EF48@mail.pubhealth.ku.dk>

FYI,=20
I've tried posting the below message twice to the bug tracking system,
once by email (below), and the second time 5 days later directly to the
bugs.r-project.org website. As far as I can tell, the bug tracking
system hasn't picked this up. Also it looks like the latest "incoming"
bug is dated 25 May 2008, so perhaps others are having difficulty as
well. (cc: r-bugs)

Cheers, Robert


-----Original Message-----
From: McGehee, Robert=20
Sent: Monday, July 14, 2008 9:51 AM
To: R-bugs at biostat.ku.dk
Subject: sapply(Date, is.numeric)

R-developers,
The results below are inconsistent. From the documentation for
is.numeric, I expect FALSE in both cases.

> x <- data.frame(dt=3DSys.Date())
> is.numeric(x$dt)
[1] FALSE
> sapply(x, is.numeric)
  dt
TRUE

## Yet, sapply seems aware of the Date class
> sapply(x, class)
  dt
"Date"

platform       i386-pc-mingw32            =20
arch           i386                       =20
os             mingw32                    =20
system         i386, mingw32              =20
status                                    =20
major          2                          =20
minor          7.0                        =20
year           2008                       =20
month          04                         =20
day            22                         =20
svn rev        45424                      =20
language       R                          =20
version.string R version 2.7.0 (2008-04-22)

Thanks,

Robert McGehee, CFA
Geode Capital Management, LLC
One Post Office Square, 28th Floor | Boston, MA | 02109
Tel: 617/392-8396    Fax:617/476-6389
mailto:robert.mcgehee at geodecapital.com



This e-mail, and any attachments hereto, are intended fo...{{dropped:12}}


From maechler at stat.math.ethz.ch  Thu Aug  7 12:04:53 2008
From: maechler at stat.math.ethz.ch (maechler at stat.math.ethz.ch)
Date: Thu,  7 Aug 2008 12:04:53 +0200 (CEST)
Subject: [Rd] sapply(Date, is.numeric) (PR#12239)
Message-ID: <20080807100453.77CF0282EF48@mail.pubhealth.ku.dk>

>>>>> "RobMcG" == McGehee, Robert <Robert.McGehee at geodecapital.com>
>>>>>     on Tue, 29 Jul 2008 15:40:37 -0400 writes:

    RobMcG> FYI, 
    RobMcG> I've tried posting the below message twice to the bug tracking system,

    [....... r-bugs problems discussed in a separate thread ....]



    RobMcG> R-developers,
    RobMcG> The results below are inconsistent. From the documentation for
    RobMcG> is.numeric, I expect FALSE in both cases.

    >> x <- data.frame(dt=Sys.Date())
    >> is.numeric(x$dt)
    RobMcG> [1] FALSE
    >> sapply(x, is.numeric)
    RobMcG> dt
    RobMcG> TRUE

    RobMcG> ## Yet, sapply seems aware of the Date class
    >> sapply(x, class)
    RobMcG> dt
    RobMcG> "Date"

Yes, thanks a lot, Robert, for the report.

That *is* a bug somewhere in the .Internal(lapply(...)) C code,
when S3 dispatch of primitive functions should happen.

Here's an R scriptlet exposing a 2nd example

### lapply(list, FUN)
### ------------------ seems to sometimes fail for
### .Primitive S3-generic functions

(ds <- seq(from=Sys.Date(), by=1, length=4))
##[1] "2008-07-30" "2008-07-31" "2008-08-01" "2008-08-02"
ll <- list(d=ds)
lapply(list(d=ds), round)
## -> Error in lapply(list(d = ds), round) : dispatch error

## or -- related to bug report by Robert McGehee on R-devel, on 2008-07-29:
sapply(list(d=ds), is.numeric)
## TRUE

## in spite of
is.numeric(`[[`(ll,1)) ## FALSE , because of
is.numeric.date

## or
round(`[[`(ll,1))
## [1] "2008-07-30" "2008-07-31" "2008-08-01" "2008-08-02"

##-----------------------------

But I'm currently too much tied up with other duties,
to find and test bug-fix.

Martin Maechler, ETH Zurich and R-Core Team


From ripley at stats.ox.ac.uk  Thu Aug  7 12:05:29 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Thu,  7 Aug 2008 12:05:29 +0200 (CEST)
Subject: [Rd] sapply(Date, is.numeric) (PR#12244)
Message-ID: <20080807100529.63FCA282EF48@mail.pubhealth.ku.dk>

On Wed, 30 Jul 2008, Martin Maechler wrote:

>>>>>> "RobMcG" == McGehee, Robert <Robert.McGehee at geodecapital.com>
>>>>>>     on Tue, 29 Jul 2008 15:40:37 -0400 writes:
>
>    RobMcG> FYI,
>    RobMcG> I've tried posting the below message twice to the bug tracking system,
>
>    [....... r-bugs problems discussed in a separate thread ....]
>
>
>
>    RobMcG> R-developers,
>    RobMcG> The results below are inconsistent. From the documentation for
>    RobMcG> is.numeric, I expect FALSE in both cases.
>
>    >> x <- data.frame(dt=Sys.Date())
>    >> is.numeric(x$dt)
>    RobMcG> [1] FALSE
>    >> sapply(x, is.numeric)
>    RobMcG> dt
>    RobMcG> TRUE
>
>    RobMcG> ## Yet, sapply seems aware of the Date class
>    >> sapply(x, class)
>    RobMcG> dt
>    RobMcG> "Date"
>
> Yes, thanks a lot, Robert, for the report.
>
> That *is* a bug somewhere in the .Internal(lapply(...)) C code,
> when S3 dispatch of primitive functions should happen.

The bug is in do_is, which uses CHAR(PRINTNAME(CAR(call))), and when 
called from lapply that gives "FUN" not "is.numeric".  The root cause is 
the following comment

     FUN = CADR(args);  /* must be unevaluated for use in e.g. bquote */

and hence that the function in the *call* passed to do_is can be 
unevaluated.

> Here's an R scriptlet exposing a 2nd example
>
> ### lapply(list, FUN)
> ### ------------------ seems to sometimes fail for
> ### .Primitive S3-generic functions
>
> (ds <- seq(from=Sys.Date(), by=1, length=4))
> ##[1] "2008-07-30" "2008-07-31" "2008-08-01" "2008-08-02"
> ll <- list(d=ds)
> lapply(list(d=ds), round)
> ## -> Error in lapply(list(d = ds), round) : dispatch error

And that's a separate issue, in DispatchGroup which states that arguments 
have been evaluated (true) but the 'call' from lapply gives the 
unevaluated arguments and so there is a mismatch.

I'm testing fixes for both.

> ## or -- related to bug report by Robert McGehee on R-devel, on 2008-07-29:
> sapply(list(d=ds), is.numeric)
> ## TRUE
>
> ## in spite of
> is.numeric(`[[`(ll,1)) ## FALSE , because of
> is.numeric.date
>
> ## or
> round(`[[`(ll,1))
> ## [1] "2008-07-30" "2008-07-31" "2008-08-01" "2008-08-02"
>
> ##-----------------------------
>
> But I'm currently too much tied up with other duties,
> to find and test bug-fix.
>
> Martin Maechler, ETH Zurich and R-Core Team
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From Gregor.Gorjanc at bfro.uni-lj.si  Thu Aug  7 12:14:18 2008
From: Gregor.Gorjanc at bfro.uni-lj.si (Gregor.Gorjanc at bfro.uni-lj.si)
Date: Thu,  7 Aug 2008 12:14:18 +0200 (CEST)
Subject: [Rd] Bug in format.default(): na.encode does not have any effect
	for (PR#12318)
Message-ID: <20080807101419.01C8F282EFC1@mail.pubhealth.ku.dk>

Hi!

If I use format() on numeric vector, na.encode argument does not have any e=
ffect. This
was reported before:
- https://stat.ethz.ch/pipermail/r-help/2007-October/143881.html
- http://tolstoy.newcastle.edu.au/R/e2/devel/06/09/0360.html

It works for other (say character) classes!

> format(c("a", NA), na.encode=3DTRUE)
[1] "a " "NA"

> format(c("a", NA), na.encode=3DFALSE)
[1] "a" NA

I explored this a bit and found out that format.default() uses prettyNum(.I=
nternal(format(...)))
for formatting the logical, numeric, complex, ... classes. Simple tests (se=
e bellow) show that
.Internal(format()) does not obey the na.encode argument.

## Encode NA as "NA"
> .Internal(format(x=3Dc(1, NA), trim=3DFALSE, digits=3DNULL, nsmall=3D0, w=
idth=3DNULL, adj=3D1, na.encode=3DTRUE, scientific=3DNA))
[1] " 1" "NA"

## Do not encode NA as "NA"
> .Internal(format(x=3Dc(1, NA), trim=3DFALSE, digits=3DNULL, nsmall=3D0, w=
idth=3DNULL, adj=3D1, na.encode=3DFALSE, scientific=3DNA))
[1] " 1" "NA"
## --> no effect

## Does prettyNum encode NA as "NA"
> prettyNum(c("1", NA))
[1] "1" NA
## --> not for character

> prettyNum(c(1, NA))
[1] "1" "NA"
## --> but it does for numeric

I did all my tests with my Ubuntu box running R

> version
               _
platform       i486-pc-linux-gnu
arch           i486
os             linux-gnu
system         i486, linux-gnu
status
major          2
minor          7.1
year           2008
month          06
day            23
svn rev        45970
language       R
version.string R version 2.7.1 (2008-06-23)

--
Lep pozdrav / With regards,
    Gregor Gorjanc
----------------------------------------------------------------------
University of Ljubljana     PhD student
Biotechnical Faculty        www: http://gregor.gorjanc.googlepages.com
Zootechnical Department     blog: http://ggorjan.blogspot.com
Groblje 3                   mail: gregor.gorjanc <at> bfro.uni-lj.si
SI-1230 Domzale             fax: +386 (0)1 72 17 888
Slovenia, Europe            tel: +386 (0)1 72 17 861


From Gregor.Gorjanc at bfro.uni-lj.si  Thu Aug  7 12:21:45 2008
From: Gregor.Gorjanc at bfro.uni-lj.si (Gregor.Gorjanc at bfro.uni-lj.si)
Date: Thu,  7 Aug 2008 12:21:45 +0200 (CEST)
Subject: [Rd] Methods for format() are not consistent with NA values
	(PR#12385)
Message-ID: <20080807102145.E44EB282EFC1@mail.pubhealth.ku.dk>

Hi!

Methods for format() are not consistent when applied to vectors
having NA values. Some methods encode NA values to "NA"
by default, while other do not. It would be much more easier to
write other functions if these functions would all behave
consistently.

Examples produced with R

> version
               _
platform       i486-pc-linux-gnu
arch           i486
os             linux-gnu
system         i486, linux-gnu
status
major          2
minor          7.1
year           2008
month          06
day            23
svn rev        45970
language       R
version.string R version 2.7.1 (2008-06-23)

testData <- data.frame(
                       fac1=3Dfactor(c(NA, letters[1:9], "hjh")),
                       fac2=3Dfactor(c(letters[6:15], NA)),
                       cha1=3Dc(letters[17:26], NA),
                       cha2=3Dc(NA, "longer", letters[25:17]),
                       stringsAsFactors=3DFALSE)
levels(testData$fac1) <- c(levels(testData$fac1), "unusedLevel")
testData$Date <- as.Date("1900-1-1")
testData$Date[2] <- NA
testData$POSIXt <- as.POSIXct(strptime("1900-1-1 01:01:01",
                                       format=3D"%Y-%m-%d %H:%M:%S"))
testData$POSIXt[5] <- NA

## --- Character ---

> format(testData$cha1)
 [1] "q " "r " "s " "t " "u " "v " "w " "x " "y " "z " "NA"

> format(testData$cha1, na.encode=3DTRUE)
 [1] "q " "r " "s " "t " "u " "v " "w " "x " "y " "z " "NA"

> format(testData$cha1, na.encode=3DFALSE)
 [1] "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" NA

## --- Factor ---

> format(testData$fac1)
 [1] "NA " "a  " "b  " "c  " "d  " "e  " "f  " "g  " "h  " "i  " "hjh"

> format(testData$fac1, na.encode=3DTRUE)
 [1] "NA " "a  " "b  " "c  " "d  " "e  " "f  " "g  " "h  " "i  " "hjh"

> format(testData$fac1, na.encode=3DFALSE)
 [1] NA    "a  " "b  " "c  " "d  " "e  " "f  " "g  " "h  " "i  " "hjh"

## --- Numeric et al. ---

## na.encode has no effect

## --- Date ---

> format(testData$Date)
 [1] "1900-01-01" NA           "1900-01-01" "1900-01-01" "1900-01-01"
 [6] "1900-01-01" "1900-01-01" "1900-01-01" "1900-01-01" "1900-01-01"
[11] "1900-01-01"

> format(testData$Date, na.encode=3DTRUE)
 [1] "1900-01-01" NA           "1900-01-01" "1900-01-01" "1900-01-01"
 [6] "1900-01-01" "1900-01-01" "1900-01-01" "1900-01-01" "1900-01-01"
[11] "1900-01-01"

> format(testData$Date, na.encode=3DFALSE)
 [1] "1900-01-01" NA           "1900-01-01" "1900-01-01" "1900-01-01"
 [6] "1900-01-01" "1900-01-01" "1900-01-01" "1900-01-01" "1900-01-01"
[11] "1900-01-01"

## --- POSIXt ---

> format(testData$POSIXt)
 [1] "1900-01-01 01:01:01" "1900-01-01 01:01:01" "1900-01-01 01:01:01"
 [4] "1900-01-01 01:01:01" NA                    "1900-01-01 01:01:01"
 [7] "1900-01-01 01:01:01" "1900-01-01 01:01:01" "1900-01-01 01:01:01"
[10] "1900-01-01 01:01:01" "1900-01-01 01:01:01"

> format(testData$POSIXt, na.encode=3DTRUE)
 [1] "1900-01-01 01:01:01" "1900-01-01 01:01:01" "1900-01-01 01:01:01"
 [4] "1900-01-01 01:01:01" NA                    "1900-01-01 01:01:01"
 [7] "1900-01-01 01:01:01" "1900-01-01 01:01:01" "1900-01-01 01:01:01"
[10] "1900-01-01 01:01:01" "1900-01-01 01:01:01"

> format(testData$POSIXt, na.encode=3DFALSE)
 [1] "1900-01-01 01:01:01" "1900-01-01 01:01:01" "1900-01-01 01:01:01"
 [4] "1900-01-01 01:01:01" NA                    "1900-01-01 01:01:01"
 [7] "1900-01-01 01:01:01" "1900-01-01 01:01:01" "1900-01-01 01:01:01"
[10] "1900-01-01 01:01:01" "1900-01-01 01:01:01"

--
Lep pozdrav / With regards,
    Gregor Gorjanc
----------------------------------------------------------------------
University of Ljubljana     PhD student
Biotechnical Faculty        www: http://gregor.gorjanc.googlepages.com
Zootechnical Department     blog: http://ggorjan.blogspot.com
Groblje 3                   mail: gregor.gorjanc <at> bfro.uni-lj.si
SI-1230 Domzale             fax: +386 (0)1 72 17 888
Slovenia, Europe            tel: +386 (0)1 72 17 861


From ripley at stats.ox.ac.uk  Thu Aug  7 12:33:56 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Thu,  7 Aug 2008 12:33:56 +0200 (CEST)
Subject: [Rd] memory leak in sub("[range]",
	...) when #ifndef _LIBC (PR#12488)
Message-ID: <20080807103356.9EAAD282EFC1@mail.pubhealth.ku.dk>

For the record: this is now fixed.

On Thu, 7 Aug 2008, bill at insightful.com wrote:

> Full_Name: Bill Dunlap
> Version: R version 2.8.0 Under development (unstable) (2008-07-05 r46037)
> OS: Linux
> Submission from: (NULL) (76.28.245.14)
>
>
> valgrind finds some memory leaks in R when I use sub() with
> a range in the regular expression:
>
> % R --debugger=valgrind --debugger-args=--leak-check=full --quiet --vanilla
> ==28643== Memcheck, a memory error detector.
> ==28643== Copyright (C) 2002-2006, and GNU GPL'd, by Julian Seward et al.
> ==28643== Using LibVEX rev 1658, a library for dynamic binary translation.
> ==28643== Copyright (C) 2004-2006, and GNU GPL'd, by OpenWorks LLP.
> ==28643== Using valgrind-3.2.1, a dynamic binary instrumentation framework.
> ==28643== Copyright (C) 2000-2006, and GNU GPL'd, by Julian Seward et al.
> ==28643== For more details, rerun with: -v
> ==28643==
>> for(i in 1:1000)sub("[0-9]","*","17")
>> q()
> ==28643==
> ==28643== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 38 from 2)
> ==28643== malloc/free: in use at exit: 12,607,663 bytes in 7,918 blocks.
> ==28643== malloc/free: 61,907 allocs, 53,989 frees, 54,692,481 bytes allocated.
> ==28643== For counts of detected errors, rerun with: -v
> ==28643== searching for pointers to 7,918 not-freed blocks.
> ==28643== checked 12,620,188 bytes.
> ==28643==
> ==28643== 82 bytes in 4 blocks are definitely lost in loss record 15 of 44
> ==28643==    at 0x40046EE: malloc (vg_replace_malloc.c:149)
> ==28643==    by 0x3200FF9: xmalloc (in
> /a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
> ==28643==    by 0x31EC0D5: readline_internal_teardown (in
> /a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
> ==28643==    by 0x31FD992: rl_callback_read_char (in
> /a/devlnx3206.insightful.com/opt/builds/R/devel/LX/46036/dist/lib/R/lib/libreadline.so.4)
> ==28643==    by 0x80E7634: Rstd_ReadConsole (sys-std.c:905)
> ==28643==    by 0x8057EA9: Rf_ReplIteration (main.c:205)
> ==28643==    by 0x80581C6: R_ReplConsole (main.c:306)
> ==28643==    by 0x805845C: run_Rmainloop (main.c:966)
> ==28643==    by 0x80566B5: main (Rmain.c:33)
> ==28643==
> ==28643==
> ==28643== 7,996 bytes in 1,999 blocks are definitely lost in loss record 35 of
> 44
> ==28643==    at 0x40046EE: malloc (vg_replace_malloc.c:149)
> ==28643==    by 0x4005B9A: realloc (vg_replace_malloc.c:306)
> ==28643==    by 0x80A5E22: parse_expression (regex.c:5202)
> ==28643==    by 0x80A5FDF: parse_branch (regex.c:4707)
> ==28643==    by 0x80A60AA: parse_reg_exp (regex.c:4666)
> ==28643==    by 0x80A64A8: Rf_regcomp (regex.c:4635)
> ==28643==    by 0x8110AE0: do_gsub (character.c:1355)
> ==28643==    by 0x80653BC: do_internal (names.c:1129)
> ==28643==    by 0x815EF17: Rf_eval (eval.c:461)
> ==28643==    by 0x8160BD3: do_begin (eval.c:1174)
> ==28643==    by 0x815EF17: Rf_eval (eval.c:461)
> ==28643==    by 0x816203C: Rf_applyClosure (eval.c:667)
> ==28643==
> ==28643== LEAK SUMMARY:
> ==28643==    definitely lost: 8,078 bytes in 2,003 blocks.
> ==28643==      possibly lost: 0 bytes in 0 blocks.
> ==28643==    still reachable: 12,599,585 bytes in 5,915 blocks.
> ==28643==         suppressed: 0 bytes in 0 blocks.
> ==28643== Reachable blocks (those to which a pointer was found) are not shown.
> ==28643== To see them, rerun with: --show-reachable=yes
>
> The flagged memory block is the range_ends component of mbcset.
> I think that range_starts was also being leaked, but valgrind was
> combining the two.
>
> It looks like the cpp macro _LIBC is not defined when I compile
> R in this Linux box.  regex.c defines range_ends and range_starts
> as different types, depending on the value of _LIBC, and it allocates
> space for them in either case.  However, free_charset() was only
> freeing these things if _LIBC was defined.  The following change
> to regex.c:free_charset() seems to take care of the problem.
>
> % svn diff regex.c
> Index: regex.c
> ===================================================================
> --- regex.c     (revision 46038)
> +++ regex.c     (working copy)
> @@ -6240,9 +6240,9 @@
> # ifdef _LIBC
>   re_free (cset->coll_syms);
>   re_free (cset->equiv_classes);
> +# endif
>   re_free (cset->range_starts);
>   re_free (cset->range_ends);
> -# endif
>   re_free (cset->char_classes);
>   re_free (cset);
> }
>
>
>> version
>               _
> platform       i686-pc-linux-gnu
> arch           i686
> os             linux-gnu
> system         i686, linux-gnu
> status         Under development (unstable)
> major          2
> minor          8.0
> year           2008
> month          07
> day            05
> svn rev        46037
> language       R
> version.string R version 2.8.0 Under development (unstable) (2008-07-05 r46037)
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From Thierry.ONKELINX at inbo.be  Thu Aug  7 12:34:19 2008
From: Thierry.ONKELINX at inbo.be (Thierry.ONKELINX at inbo.be)
Date: Thu,  7 Aug 2008 12:34:19 +0200 (CEST)
Subject: [Rd] Bug in rnorm? (PR#12016)
Message-ID: <20080807103419.61DED282EFC1@mail.pubhealth.ku.dk>


That's not a bug. It's FAQ 7.31

Thierry


------------------------------------------------------------------------
----
ir. Thierry Onkelinx
Instituut voor natuur- en bosonderzoek / Research Institute for Nature
and Forest
Cel biometrie, methodologie en kwaliteitszorg / Section biometrics,
methodology and quality assurance
Gaverstraat 4
9500 Geraardsbergen
Belgium=0D
tel. + 32 54/436 185
Thierry.Onkelinx at inbo.be=0D
www.inbo.be=0D

To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to
say what the experiment died of.
~ Sir Ronald Aylmer Fisher

The plural of anecdote is not data.
~ Roger Brinner

The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of
data.
~ John Tukey

-----Oorspronkelijk bericht-----
Van: r-devel-bounces at r-project.org
[mailto:r-devel-bounces at r-project.org] Namens
paul.eckermann at adelaide.edu.au
Verzonden: donderdag 7 augustus 2008 11:33
Aan: r-devel at stat.math.ethz.ch
CC: R-bugs at biostat.ku.dk
Onderwerp: [Rd] Bug in rnorm? (PR#12016)

Full_Name: Paul Eckermann
Version: 2.7.1
OS: Windows XP Service Pack 2
Submission from: (NULL) (129.127.183.12)


This is the first time I have submitted a bug report, so apologies if I
have not
followed the correct protocol.

If I enter

length(rnorm(100*.29))

it returns 28 rather than 29.

y<-(1:100)/100
z<-sapply(y,function(x) length(rnorm(x*100)))
z!=3D100*y

indicates that it has something to do with multiples of 7 (rounding
error?),
even though 29, 57 and 58 are the 3 values for which it returns
incorrect values
of z.

I hope that this is not something obvious that I have missed. This can
be
overcome by doing the x*100 calculation outside the rnorm function, but
I don't
see why this needs to be done when the answer is (supposed to be) an
integer.

Regards,
Paul Eckermann

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

Dit bericht en eventuele bijlagen geven enkel de visie van de schrijver=
 weer en bindt het INBO onder geen enkel beding, zolang dit bericht niet=
 bevestigd is door een geldig ondertekend document.
The views expressed in  this message and any annex are purely those of the=
 writer and may not be regarded as stating an official position of INBO, as=
 long as the message is not confirmed bij a duly signed document


From pburns at pburns.seanet.com  Thu Aug  7 12:42:15 2008
From: pburns at pburns.seanet.com (Patrick Burns)
Date: Thu, 07 Aug 2008 11:42:15 +0100
Subject: [Rd] Numerical optimisation and "non-feasible" regions
In-Reply-To: <489AC5DC.10508@epfl.ch>
References: <4899D089.6020208@epfl.ch><loom.20080807T004607-309@post.gmane.org>
	<489AC5DC.10508@epfl.ch>
Message-ID: <489AD187.7040007@pburns.seanet.com>

If the positive definiteness of the covariance
is the only issue, then you could base a penalty on:

eps - smallest.eigen.value

if the smallest eigen value is smaller than eps.

Patrick Burns
patrick at burns-stat.com
+44 (0)20 8525 0696
http://www.burns-stat.com
(home of S Poetry and "A Guide for the Unwilling S User")

Mathieu Ribatet wrote:
> Thanks Ben for your tips.
> I'm not sure it'll be so easy to do (as the non-feasible regions 
> depend on the model parameters), but I'm sure it's worth giving a try.
> Thanks !!!
> Best,
>
> Mathieu
>
> Ben Bolker a ?crit :
>> Mathieu Ribatet <mathieu.ribatet <at> epfl.ch> writes:
>>
>>  
>>> Dear list,
>>>
>>> I'm currently writing a C code to compute the (composite) likelihood -
>>> well this is done but not really robust. The C code is wrapped in an R
>>> one which call the optimizer routine - optim or nlm. However, the
>>> fitting procedure is far from being robust as the parameter space
>>> depends on the parameter - I have a covariance matrix that should be a
>>> valid one for example.
>>>     
>>
>>   One reasonably straightforward hack to deal with this is
>> to add a penalty that is (e.g.) a quadratic function of the
>> distance from the feasible region, if that is reasonably
>> straightforward to compute -- that way your function will
>> get gently pushed back toward the feasible region.
>>
>>   Ben Bolker
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>   
>


From mathieu.ribatet at epfl.ch  Thu Aug  7 13:45:31 2008
From: mathieu.ribatet at epfl.ch (Mathieu Ribatet)
Date: Thu, 07 Aug 2008 13:45:31 +0200
Subject: [Rd] Numerical optimisation and "non-feasible" regions
In-Reply-To: <489AD187.7040007@pburns.seanet.com>
References: <4899D089.6020208@epfl.ch><loom.20080807T004607-309@post.gmane.org>
	<489AC5DC.10508@epfl.ch> <489AD187.7040007@pburns.seanet.com>
Message-ID: <489AE05B.6000505@epfl.ch>

Dear Patrick (and other),

Well I used the Sylvester's criteria (which is equivalent) to test for 
this. But unfortunately, this is not the only issue!
Well, to sum up quickly, it's more or less like geostatistics. 
Consequently, I have several unfeasible regions (covariance, margins and 
others).
The problem seems that the unfeasible regions may be large and sometimes 
lead to optimization issues - even when the starting values are well 
defined.
This is the reason why I wonder if setting by myself a $-\infty$ in the 
composite likelihood function is appropriate here.

However, you might be right in setting a tolerance value 'eps' instead 
of the theoretical bound eigen values > 0.
Thanks for your tips,
Best,
Mathieu


Patrick Burns a ?crit :
> If the positive definiteness of the covariance
> is the only issue, then you could base a penalty on:
>
> eps - smallest.eigen.value
>
> if the smallest eigen value is smaller than eps.
>
> Patrick Burns
> patrick at burns-stat.com
> +44 (0)20 8525 0696
> http://www.burns-stat.com
> (home of S Poetry and "A Guide for the Unwilling S User")
>
> Mathieu Ribatet wrote:
>   
>> Thanks Ben for your tips.
>> I'm not sure it'll be so easy to do (as the non-feasible regions
>> depend on the model parameters), but I'm sure it's worth giving a try.
>> Thanks !!!
>> Best,
>>
>> Mathieu
>>
>> Ben Bolker a ?crit :
>>     
>>> Mathieu Ribatet <mathieu.ribatet <at> epfl.ch> writes:
>>>
>>>
>>>       
>>>> Dear list,
>>>>
>>>> I'm currently writing a C code to compute the (composite) likelihood -
>>>> well this is done but not really robust. The C code is wrapped in an R
>>>> one which call the optimizer routine - optim or nlm. However, the
>>>> fitting procedure is far from being robust as the parameter space
>>>> depends on the parameter - I have a covariance matrix that should be a
>>>> valid one for example.
>>>>
>>>>         
>>>   One reasonably straightforward hack to deal with this is
>>> to add a penalty that is (e.g.) a quadratic function of the
>>> distance from the feasible region, if that is reasonably
>>> straightforward to compute -- that way your function will
>>> get gently pushed back toward the feasible region.
>>>
>>>   Ben Bolker
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>       

-- 
Institute of Mathematics
Ecole Polytechnique F?d?rale de Lausanne
STAT-IMA-FSB-EPFL, Station 8
CH-1015 Lausanne   Switzerland
http://stat.epfl.ch/
Tel: + 41 (0)21 693 7907


From j.curran at auckland.ac.nz  Thu Aug  7 11:59:18 2008
From: j.curran at auckland.ac.nz (j.curran at auckland.ac.nz)
Date: Thu,  7 Aug 2008 11:59:18 +0200 (CEST)
Subject: [Rd] stripchart ignores main title option (PR#12202)
Message-ID: <20080807095918.7B2C1282EFC1@mail.pubhealth.ku.dk>

Full_Name: James Curran
Version: 2.7.1
OS: Windows XP/Vista
Submission from: (NULL) (130.216.51.81)


stripchart ignores the main title option. For example, in the documentation 

     stripchart(decrease ~ treatment,
         main = "stripchart(OrchardSprays)", 
         vertical = TRUE, log = "y", data = OrchardSprays)


does not yield a plot with "stripchart(OrchardSprays)" at the top of the plot.
Looking at the source code of stripchart.default there is:

....
title(xlab = xlab, ylab = ylab)
....

I would have thought the main would have got wrapped up in the ... that is sent
to the plot command, but then I don't know enough about it.


From juneaftn at gmail.com  Thu Aug  7 11:27:58 2008
From: juneaftn at gmail.com (juneaftn at gmail.com)
Date: Thu,  7 Aug 2008 11:27:58 +0200 (CEST)
Subject: [Rd] Rgui.exe(R.dll) crashes on startup when locale is set to
	Korean (PR#11974)
Message-ID: <20080807092758.B8074282EFF1@mail.pubhealth.ku.dk>

Full_Name: June Kim
Version: 2.7.0
OS: Windows XP SP3
Submission from: (NULL) (220.117.151.228)


R 2.7.0 and up(including 2.7.1) crashes on the startup on Korean Windows XP.

All versions before R 2.7.0 worked without a problem on the same machine.

It seems like related to the locale setting.

see http://www.nabble.com/Rgui.exe(R.dll)-crashes-when-set-the-locale-to-%22Korean%22-(PR-11903)-td18264813.html


From ablocker at gmail.com  Thu Aug  7 11:28:35 2008
From: ablocker at gmail.com (ablocker at gmail.com)
Date: Thu,  7 Aug 2008 11:28:35 +0200 (CEST)
Subject: [Rd] Fitted values with small weights in lm.wfit (PR#11979)
Message-ID: <20080807092835.E5AAE282EFF1@mail.pubhealth.ku.dk>

Full_Name: Alexander Blocker
Version: 2.7.1
OS: Ubuntu 8.04 / Windows XP
Submission from: (NULL) (76.119.235.225)


When running lm(modeleq, weights=wt, data=dataset) with small weights (<1e-10),
I have encountered an odd phenomenon with fitted values. Due to numerical
precision issues, the fitted values and residuals returned by lm.wfit (from its
.Fortran call to dqrls) can differ greatly from those returned by running
predict on the resulting lm object. This is completely attributable to the
numerical precision passed to the given function, but I wonder if a warning
message for weights below as certain threshold may be in order.


From christiankuehnert at gmx.de  Thu Aug  7 11:30:32 2008
From: christiankuehnert at gmx.de (christiankuehnert at gmx.de)
Date: Thu,  7 Aug 2008 11:30:32 +0200 (CEST)
Subject: [Rd] problems with plotting of graphNEL (PR#11993)
Message-ID: <20080807093032.B2F52282EFC1@mail.pubhealth.ku.dk>

Full_Name: Christian Kuehnert
Version: 2.7.1
OS: Windows XP
Submission from: (NULL) (91.14.237.109)


Hello, 

I've installed the package RBGL (and XML and Rgraphviz) and tried to follow the
examples in the RBGL-manual 

http://bioconductor.org/packages/2.2/bioc/vignettes/RBGL/inst/doc/RBGL.pdf

But when I try to plot the graph using e.g. 

plot(dijk)

an error message occurs: 

"Error in as.double(y): cannot coerce type 'S4' to vector of type 'double'.

Can anyone tell me what I can do to solve this problem? 
Thanks very much!
Christian


From candrews at buffalo.edu  Thu Aug  7 11:33:36 2008
From: candrews at buffalo.edu (candrews at buffalo.edu)
Date: Thu,  7 Aug 2008 11:33:36 +0200 (CEST)
Subject: [Rd] Bug in placement of legend with title when xlim is decreasing
	(PR#12019)
Message-ID: <20080807093336.2A8A5282EFC1@mail.pubhealth.ku.dk>

Full_Name: Chris Andrews
Version: 2.7.1
OS: Windows
Submission from: (NULL) (74.92.48.53)


The following code shows that the legend is misplaced when a title is included
AND xlim specifies a decreasing x axis.

--------------

matplot(1:5, matrix(rnorm(5*3), nrow=5), type="l", col=1:3, lty=1, lwd=3,
xlim=c(5,1))
legend("bottomleft", col=1:3, lty=1, legend=paste("line", letters[1:3]))
legend("topleft", col=1:3, lty=1, legend=paste("line", letters[1:3]),
title="Hello")

legend("bottomright", col=1:3, lty=1, legend=paste("line", letters[1:3]))
legend("topright", col=1:3, lty=1, legend=paste("line", letters[1:3]),
title="Hello")

---------------


R version 2.7.1 (2008-06-23)
i386-pc-mingw32

locale:
LC_COLLATE=English_United States.1252;LC_CTYPE=English_United
States.1252;LC_MONETARY=English_United
States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base


From juangea at geax.net  Thu Aug  7 11:45:07 2008
From: juangea at geax.net (juangea at geax.net)
Date: Thu,  7 Aug 2008 11:45:07 +0200 (CEST)
Subject: [Rd] dput function (PR#12112)
Message-ID: <20080807094508.0134E282EFC1@mail.pubhealth.ku.dk>

Full_Name: Juan Gea 
Version: R version 2.6.2 
OS: Fedora Core 6
Submission from: (NULL) (79.153.48.49)


Abort:

objeS  <- matrix("AAA",1000000)
class(objeS)
outTxt <- textConnection("vaClob", open = "w", local = FALSE)
dput(objeS,outTxt)
close(outTxt)


R version 2.6.2 (2008-02-08)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


> objeS  <- matrix("AAA",1000000)
> class(objeS)
[1] "matrix"
> outTxt <- textConnection("vaClob", open = "w", local = FALSE)
> dput(objeS,outTxt)

 *** caught segfault ***
address 0xb7803934, cause 'memory not mapped'

Traceback:
 1: dput(objeS, outTxt)

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: close(outTxt)
Selection:
Selection:


From cruff at ucar.edu  Thu Aug  7 12:01:50 2008
From: cruff at ucar.edu (cruff at ucar.edu)
Date: Thu,  7 Aug 2008 12:01:50 +0200 (CEST)
Subject: [Rd] Cairo bitmap output should work without X11 dependency
	(PR#12218)
Message-ID: <20080807100150.ECB2D282C761@mail.pubhealth.ku.dk>

Full_Name: Craig Ruff
Version: 2.7.1
OS: Irix 6.5.30
Submission from: (NULL) (128.117.8.145)


Cairo based bitmap graphics output should work if cairo and R have been compiled
without xlib support.  2.7.1 gives the "X11 is not available" message in this
case when run interactively, and from my reading the png documentation, calling
png(filename=..., type="cairo") should work.  Cairo itself is happy without
xlib.


From pnorbert at ornl.gov  Thu Aug  7 11:29:49 2008
From: pnorbert at ornl.gov (pnorbert at ornl.gov)
Date: Thu,  7 Aug 2008 11:29:49 +0200 (CEST)
Subject: [Rd] Compile error on src/main/platform.c (PR#11988)
Message-ID: <20080807092949.299BF282EFC1@mail.pubhealth.ku.dk>

Full_Name: Norbert Podhorszki
Version: 2.7.0
OS: RHEL4
Submission from: (NULL) (160.91.210.37)


Using PGI 6.2.5 compiler instead of gcc, there is no HAVE_GLOB defined for
compilation (on our machine). 
The function do_unlink(...) in src/main/platform.c (lines 1368-1410) will have
an unclosed if statement in this case. 
The 
    #if defined(HAVE_GLOB)
    ...
    #else /* HAVE_GLOB */
                failures += R_unlink(names, recursive);
    #endif

condition starts inside an if statement, which is closed in the #if part and not
in the #else part.

It is the same for v2.7.1, too.


From renriquez at bolsamadrid.es  Thu Aug  7 11:27:29 2008
From: renriquez at bolsamadrid.es (renriquez at bolsamadrid.es)
Date: Thu,  7 Aug 2008 11:27:29 +0200 (CEST)
Subject: [Rd] Kernlab, ksvm, class.weights, prob.model = TRUE (PR#11971)
Message-ID: <20080807092729.171B4282C760@mail.pubhealth.ku.dk>

Full_Name: Ram?n Enr?quez Gabeiras
Version: 2.7.0
OS: Windows 32
Submission from: (NULL) (193.110.154.163)


For unbalanced problems, if you provide class.weights parameters (i.e
class.weights = c("1" = 80, "0"= 20), prob.model = TRUE) always return the error
...


If you try with prob.model = FALSE it works perfectly ....

Thanks in advance and regards.


From RichardsTJ2 at UPMC.EDU  Thu Aug  7 11:35:19 2008
From: RichardsTJ2 at UPMC.EDU (RichardsTJ2 at UPMC.EDU)
Date: Thu,  7 Aug 2008 11:35:19 +0200 (CEST)
Subject: [Rd] config.log told me to report these (PR#12035)
Message-ID: <20080807093519.AF989282EFC2@mail.pubhealth.ku.dk>

This is a multi-part message in MIME format.

------_=_NextPart_001_01C8EAD7.27542985
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Hello r-bugs,

I am running openSuse 11.0, with my new Intel 8500 (Penryn) C2D, and I =
want to use icc and ifort.
I was able to get a working Goto BLAS, following Dr. Goto's =
instructions.
That seems to work OK with gcc and gfortran.
I get about 10% faster computations by using -O3 rather than -O2.
I get faster results with Goto BLAS rather than the R BLAS.
Now I want to make icc and ifort work...

So I tried this:

./configure CC=3Dicc CFLAGS=3D'-O3 -mp' =
CPPFLAGS=3D-I/opt/intel/cce/10.1.015/include/ F77=3Difort CXX=3Dicc =
CXXFLAGS=3D'-O3 -mp' FFLAGS=3D'-C90 -w90 -w95 -mp' CPICFLAGS=3D-shared =
CXXPICFLAGS=3D-shared FPICFLAGS=3D-shared SHLIB_LDFLAGS=3D-shared =
SHLIB_CXXLDFLAGS=3D-shared --with-blas=3D"-L/usr/lib64/GotoBLAS =
-lgoto_penrynp-r1.26 -lpthread"

I get six purported "bugs" in the config.log file (attached), but I hope =
there is something I've overlooked in the past week of agony.
I have had similar log files with about 100 different combinations of =
options.
I hope that you can help.

Thank you so much.

Tom Richards


------_=_NextPart_001_01C8EAD7.27542985
Content-Type: text/x-log;
	name="config.log"
Content-Transfer-Encoding: base64
Content-Description: config.log
Content-Disposition: attachment;
	filename="config.log"

VGhpcyBmaWxlIGNvbnRhaW5zIGFueSBtZXNzYWdlcyBwcm9kdWNlZCBieSBjb21waWxlcnMgd2hp
bGUKcnVubmluZyBjb25maWd1cmUsIHRvIGFpZCBkZWJ1Z2dpbmcgaWYgY29uZmlndXJlIG1ha2Vz
IGEgbWlzdGFrZS4KCkl0IHdhcyBjcmVhdGVkIGJ5IFIgY29uZmlndXJlIDIuNy4xLCB3aGljaCB3
YXMKZ2VuZXJhdGVkIGJ5IEdOVSBBdXRvY29uZiAyLjYxLiAgSW52b2NhdGlvbiBjb21tYW5kIGxp
bmUgd2FzCgogICQgLi9jb25maWd1cmUgQ0M9aWNjIENGTEFHUz0tTzMgLW1wIENQUEZMQUdTPS1J
L29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gRjc3PWlmb3J0IENYWD1pY2MgQ1hYRkxB
R1M9LU8zIC1tcCBGRkxBR1M9LUM5MCAtdzkwIC13OTUgLW1wIENQSUNGTEFHUz0tc2hhcmVkIENY
WFBJQ0ZMQUdTPS1zaGFyZWQgRlBJQ0ZMQUdTPS1zaGFyZWQgU0hMSUJfTERGTEFHUz0tc2hhcmVk
IFNITElCX0NYWExERkxBR1M9LXNoYXJlZCAtLXdpdGgtYmxhcz0tTC91c3IvbGliNjQvR290b0JM
QVMgLWxnb3RvX3BlbnJ5bnAtcjEuMjYgLWxwdGhyZWFkCgojIyAtLS0tLS0tLS0gIyMKIyMgUGxh
dGZvcm0uICMjCiMjIC0tLS0tLS0tLSAjIwoKaG9zdG5hbWUgPSBSaWNoYXJkcwp1bmFtZSAtbSA9
IHg4Nl82NAp1bmFtZSAtciA9IDIuNi4yNS45LTAuMi1kZWZhdWx0CnVuYW1lIC1zID0gTGludXgK
dW5hbWUgLXYgPSAjMSBTTVAgMjAwOC0wNi0yOCAwMDowMDowNyArMDIwMAoKL3Vzci9iaW4vdW5h
bWUgLXAgPSB1bmtub3duCi9iaW4vdW5hbWUgLVggICAgID0gdW5rbm93bgoKL2Jpbi9hcmNoICAg
ICAgICAgICAgICA9IHg4Nl82NAovdXNyL2Jpbi9hcmNoIC1rICAgICAgID0gdW5rbm93bgovdXNy
L2NvbnZleC9nZXRzeXNpbmZvID0gdW5rbm93bgovdXNyL2Jpbi9ob3N0aW5mbyAgICAgID0gdW5r
bm93bgovYmluL21hY2hpbmUgICAgICAgICAgID0gdW5rbm93bgovdXNyL2Jpbi9vc2xldmVsICAg
ICAgID0gdW5rbm93bgovYmluL3VuaXZlcnNlICAgICAgICAgID0gdW5rbm93bgoKUEFUSDogL29w
dC9pbnRlbC9mY2UvMTAuMS4wMTUvYmluClBBVEg6IC9vcHQvaW50ZWwvaWRiZS8xMC4xLjAxNS9i
aW4KUEFUSDogL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvYmluClBBVEg6IC91c3IvYmluClBBVEg6
IC9zYmluClBBVEg6IC9vcHQvaW50ZWwvZmNlLzEwLjEuMDE1L2JpbgpQQVRIOiAvb3B0L2ludGVs
L2lkYmUvMTAuMS4wMTUvYmluClBBVEg6IC9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2JpbgpQQVRI
OiAvaG9tZS9yaWNoYXJkcy9iaW4KUEFUSDogL3Vzci9sb2NhbC9iaW4KUEFUSDogL3Vzci9zYmlu
ClBBVEg6IC9iaW4KUEFUSDogL3Vzci9iaW4vWDExClBBVEg6IC91c3IvWDExUjYvYmluClBBVEg6
IC91c3IvZ2FtZXMKUEFUSDogL29wdC9rZGUzL2JpbgpQQVRIOiAvb3B0L2Nyb3NzL2JpbgpQQVRI
OiAvdXNyL2xpYi9taXQvYmluClBBVEg6IC91c3IvbGliL21pdC9zYmluClBBVEg6IC91c3IvbGli
L3F0My9iaW4KCgojIyAtLS0tLS0tLS0tLSAjIwojIyBDb3JlIHRlc3RzLiAjIwojIyAtLS0tLS0t
LS0tLSAjIwoKY29uZmlndXJlOjIzNzY6IGNoZWNraW5nIGJ1aWxkIHN5c3RlbSB0eXBlCmNvbmZp
Z3VyZToyMzk0OiByZXN1bHQ6IHg4Nl82NC11bmtub3duLWxpbnV4LWdudQpjb25maWd1cmU6MjQx
NjogY2hlY2tpbmcgaG9zdCBzeXN0ZW0gdHlwZQpjb25maWd1cmU6MjQzMTogcmVzdWx0OiB4ODZf
NjQtdW5rbm93bi1saW51eC1nbnUKY29uZmlndXJlOjMwNDY6IGNoZWNraW5nIGZvciBwd2QKY29u
ZmlndXJlOjMwNjQ6IGZvdW5kIC9iaW4vcHdkCmNvbmZpZ3VyZTozMDc3OiByZXN1bHQ6IC9iaW4v
cHdkCmNvbmZpZ3VyZTozMDg1OiBjaGVja2luZyB3aGV0aGVyIGJ1aWxkZGlyIGlzIHNyY2Rpcgpj
b25maWd1cmU6MzA5MzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjMwOTg6IGNoZWNraW5nIGZvciB3
b3JraW5nIGFjbG9jYWwKY29uZmlndXJlOjMxMDI6IHJlc3VsdDogZm91bmQKY29uZmlndXJlOjMx
MTE6IGNoZWNraW5nIGZvciB3b3JraW5nIGF1dG9jb25mCmNvbmZpZ3VyZTozMTE1OiByZXN1bHQ6
IGZvdW5kCmNvbmZpZ3VyZTozMTI0OiBjaGVja2luZyBmb3Igd29ya2luZyBhdXRvbWFrZQpjb25m
aWd1cmU6MzEyODogcmVzdWx0OiBmb3VuZApjb25maWd1cmU6MzEzNzogY2hlY2tpbmcgZm9yIHdv
cmtpbmcgYXV0b2hlYWRlcgpjb25maWd1cmU6MzE0MTogcmVzdWx0OiBmb3VuZApjb25maWd1cmU6
MzE1NDogY2hlY2tpbmcgZm9yIGdhd2sKY29uZmlndXJlOjMxNzA6IGZvdW5kIC91c3IvYmluL2dh
d2sKY29uZmlndXJlOjMxODE6IHJlc3VsdDogZ2F3awpjb25maWd1cmU6MzE5MjogY2hlY2tpbmcg
Zm9yIGdyZXAgdGhhdCBoYW5kbGVzIGxvbmcgbGluZXMgYW5kIC1lCmNvbmZpZ3VyZTozMjY2OiBy
ZXN1bHQ6IC91c3IvYmluL2dyZXAKY29uZmlndXJlOjMyNzE6IGNoZWNraW5nIGZvciBlZ3JlcApj
b25maWd1cmU6MzM0OTogcmVzdWx0OiAvdXNyL2Jpbi9ncmVwIC1FCmNvbmZpZ3VyZTozMzU0OiBj
aGVja2luZyB3aGV0aGVyIGxuIC1zIHdvcmtzCmNvbmZpZ3VyZTozMzU4OiByZXN1bHQ6IHllcwpj
b25maWd1cmU6MzM3MDogY2hlY2tpbmcgZm9yIGJpc29uCmNvbmZpZ3VyZTozMzg2OiBmb3VuZCAv
dXNyL2Jpbi9iaXNvbgpjb25maWd1cmU6MzM5NzogcmVzdWx0OiBiaXNvbiAteQpjb25maWd1cmU6
MzQxMzogY2hlY2tpbmcgZm9yIGFyCmNvbmZpZ3VyZTozNDI5OiBmb3VuZCAvdXNyL2Jpbi9hcgpj
b25maWd1cmU6MzQ0MDogcmVzdWx0OiBhcgpjb25maWd1cmU6MzQ2NzogY2hlY2tpbmcgZm9yIGEg
QlNELWNvbXBhdGlibGUgaW5zdGFsbApjb25maWd1cmU6MzUyMzogcmVzdWx0OiAvdXNyL2Jpbi9p
bnN0YWxsIC1jCmNvbmZpZ3VyZTozNTU4OiBjaGVja2luZyBmb3Igc2VkCmNvbmZpZ3VyZTozNTc3
OiBmb3VuZCAvdXNyL2Jpbi9zZWQKY29uZmlndXJlOjM1ODk6IHJlc3VsdDogL3Vzci9iaW4vc2Vk
CmNvbmZpZ3VyZTozNjA5OiBjaGVja2luZyBmb3IgbGVzcwpjb25maWd1cmU6MzYyNzogZm91bmQg
L3Vzci9iaW4vbGVzcwpjb25maWd1cmU6MzYzOTogcmVzdWx0OiAvdXNyL2Jpbi9sZXNzCmNvbmZp
Z3VyZTozNjYyOiBjaGVja2luZyBmb3IgcGVybApjb25maWd1cmU6MzY4MDogZm91bmQgL3Vzci9i
aW4vcGVybApjb25maWd1cmU6MzY5MjogcmVzdWx0OiAvdXNyL2Jpbi9wZXJsCmNvbmZpZ3VyZToz
NzA0OiBjaGVja2luZyB3aGV0aGVyIHBlcmwgdmVyc2lvbiBpcyBhdCBsZWFzdCA1LjguMApjb25m
aWd1cmU6MzcxNTogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjM3MzQ6IGNoZWNraW5nIGZvciBkdmlw
cwpjb25maWd1cmU6Mzc1MjogZm91bmQgL3Vzci9iaW4vZHZpcHMKY29uZmlndXJlOjM3NjQ6IHJl
c3VsdDogL3Vzci9iaW4vZHZpcHMKY29uZmlndXJlOjM3ODA6IGNoZWNraW5nIGZvciB0ZXgKY29u
ZmlndXJlOjM3OTg6IGZvdW5kIC91c3IvYmluL3RleApjb25maWd1cmU6MzgxMDogcmVzdWx0OiAv
dXNyL2Jpbi90ZXgKY29uZmlndXJlOjM4MjY6IGNoZWNraW5nIGZvciBsYXRleApjb25maWd1cmU6
Mzg0NDogZm91bmQgL3Vzci9iaW4vbGF0ZXgKY29uZmlndXJlOjM4NTY6IHJlc3VsdDogL3Vzci9i
aW4vbGF0ZXgKY29uZmlndXJlOjM4ODE6IGNoZWNraW5nIGZvciBtYWtlaW5kZXgKY29uZmlndXJl
OjM4OTk6IGZvdW5kIC91c3IvYmluL21ha2VpbmRleApjb25maWd1cmU6MzkxMTogcmVzdWx0OiAv
dXNyL2Jpbi9tYWtlaW5kZXgKY29uZmlndXJlOjM5Mjc6IGNoZWNraW5nIGZvciBwZGZ0ZXgKY29u
ZmlndXJlOjM5NDU6IGZvdW5kIC91c3IvYmluL3BkZnRleApjb25maWd1cmU6Mzk1NzogcmVzdWx0
OiAvdXNyL2Jpbi9wZGZ0ZXgKY29uZmlndXJlOjM5NzM6IGNoZWNraW5nIGZvciBwZGZsYXRleApj
b25maWd1cmU6Mzk5MTogZm91bmQgL3Vzci9iaW4vcGRmbGF0ZXgKY29uZmlndXJlOjQwMDM6IHJl
c3VsdDogL3Vzci9iaW4vcGRmbGF0ZXgKY29uZmlndXJlOjQwMjg6IGNoZWNraW5nIGZvciBtYWtl
aW5mbwpjb25maWd1cmU6NDA0NjogZm91bmQgL3Vzci9iaW4vbWFrZWluZm8KY29uZmlndXJlOjQw
NTg6IHJlc3VsdDogL3Vzci9iaW4vbWFrZWluZm8KY29uZmlndXJlOjQwNzA6IGNoZWNraW5nIHdo
ZXRoZXIgbWFrZWluZm8gdmVyc2lvbiBpcyBhdCBsZWFzdCA0LjcKY29uZmlndXJlOjQwOTA6IHJl
c3VsdDogeWVzCmNvbmZpZ3VyZTo0MTA3OiBjaGVja2luZyBmb3IgdGV4aTJkdmkKY29uZmlndXJl
OjQxMjU6IGZvdW5kIC91c3IvYmluL3RleGkyZHZpCmNvbmZpZ3VyZTo0MTM3OiByZXN1bHQ6IC91
c3IvYmluL3RleGkyZHZpCmNvbmZpZ3VyZTo0MjEwOiBjaGVja2luZyBmb3IgdW56aXAKY29uZmln
dXJlOjQyMjg6IGZvdW5kIC91c3IvYmluL3VuemlwCmNvbmZpZ3VyZTo0MjQwOiByZXN1bHQ6IC91
c3IvYmluL3VuemlwCmNvbmZpZ3VyZTo0MjU2OiBjaGVja2luZyBmb3IgemlwCmNvbmZpZ3VyZTo0
Mjc0OiBmb3VuZCAvdXNyL2Jpbi96aXAKY29uZmlndXJlOjQyODY6IHJlc3VsdDogL3Vzci9iaW4v
emlwCmNvbmZpZ3VyZTo0MzAyOiBjaGVja2luZyBmb3IgZ3ppcApjb25maWd1cmU6NDMyMDogZm91
bmQgL3Vzci9iaW4vZ3ppcApjb25maWd1cmU6NDMzMjogcmVzdWx0OiAvdXNyL2Jpbi9nemlwCmNv
bmZpZ3VyZTo0MzUwOiBjaGVja2luZyBmb3IgZmlyZWZveApjb25maWd1cmU6NDM2ODogZm91bmQg
L3Vzci9iaW4vZmlyZWZveApjb25maWd1cmU6NDM4MDogcmVzdWx0OiAvdXNyL2Jpbi9maXJlZm94
CmNvbmZpZ3VyZTo0Mzk3OiByZXN1bHQ6IHVzaW5nIGRlZmF1bHQgYnJvd3NlciAuLi4gL3Vzci9i
aW4vZmlyZWZveApjb25maWd1cmU6NDQwNzogY2hlY2tpbmcgZm9yIGFjcm9yZWFkCmNvbmZpZ3Vy
ZTo0NDI1OiBmb3VuZCAvdXNyL2Jpbi9hY3JvcmVhZApjb25maWd1cmU6NDQzNzogcmVzdWx0OiAv
dXNyL2Jpbi9hY3JvcmVhZApjb25maWd1cmU6NDQ1OTogY2hlY2tpbmcgZm9yIHBrZy1jb25maWcK
Y29uZmlndXJlOjQ0Nzg6IGZvdW5kIC91c3IvYmluL3BrZy1jb25maWcKY29uZmlndXJlOjQ0OTA6
IHJlc3VsdDogL3Vzci9iaW4vcGtnLWNvbmZpZwpjb25maWd1cmU6NDU0NzogY2hlY2tpbmcgZm9y
IGdjYwpjb25maWd1cmU6NDU3NDogcmVzdWx0OiBpY2MKY29uZmlndXJlOjQ4MTI6IGNoZWNraW5n
IGZvciBDIGNvbXBpbGVyIHZlcnNpb24KY29uZmlndXJlOjQ4MTk6IGljYyAtLXZlcnNpb24gPiY1
CmljYyAoSUNDKSAxMC4xIDIwMDgwMzEyCkNvcHlyaWdodCAoQykgMTk4NS0yMDA4IEludGVsIENv
cnBvcmF0aW9uLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KCmNvbmZpZ3VyZTo0ODIyOiAkPyA9IDAK
Y29uZmlndXJlOjQ4Mjk6IGljYyAtdiA+JjUKVmVyc2lvbiAxMC4xIApjb25maWd1cmU6NDgzMjog
JD8gPSAwCmNvbmZpZ3VyZTo0ODM5OiBpY2MgLVYgPiY1CkludGVsKFIpIEMgQ29tcGlsZXIgZm9y
IGFwcGxpY2F0aW9ucyBydW5uaW5nIG9uIEludGVsKFIpIDY0LCBWZXJzaW9uIDEwLjEgICAgQnVp
bGQgMjAwODAzMTIgUGFja2FnZSBJRDogbF9jY19wXzEwLjEuMDE1CkNvcHlyaWdodCAoQykgMTk4
NS0yMDA4IEludGVsIENvcnBvcmF0aW9uLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KRk9SIE5PTi1D
T01NRVJDSUFMIFVTRSBPTkxZCgpjb25maWd1cmU6NDg0MjogJD8gPSAwCmNvbmZpZ3VyZTo0ODY1
OiBjaGVja2luZyBmb3IgQyBjb21waWxlciBkZWZhdWx0IG91dHB1dCBmaWxlIG5hbWUKY29uZmln
dXJlOjQ4OTI6IGljYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8g
LUwvdXNyL2xvY2FsL2xpYjY0IGNvbmZ0ZXN0LmMgID4mNQpjb25maWd1cmU6NDg5NTogJD8gPSAw
CmNvbmZpZ3VyZTo0OTMzOiByZXN1bHQ6IGEub3V0CmNvbmZpZ3VyZTo0OTUwOiBjaGVja2luZyB3
aGV0aGVyIHRoZSBDIGNvbXBpbGVyIHdvcmtzCmNvbmZpZ3VyZTo0OTYwOiAuL2Eub3V0CmNvbmZp
Z3VyZTo0OTYzOiAkPyA9IDAKY29uZmlndXJlOjQ5ODA6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZTo0
OTg3OiBjaGVja2luZyB3aGV0aGVyIHdlIGFyZSBjcm9zcyBjb21waWxpbmcKY29uZmlndXJlOjQ5
ODk6IHJlc3VsdDogbm8KY29uZmlndXJlOjQ5OTI6IGNoZWNraW5nIGZvciBzdWZmaXggb2YgZXhl
Y3V0YWJsZXMKY29uZmlndXJlOjQ5OTk6IGljYyAtbyBjb25mdGVzdCAtTzMgLW1wIC1JL29wdC9p
bnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gLUwvdXNyL2xvY2FsL2xpYjY0IGNvbmZ0ZXN0LmMg
ID4mNQpjb25maWd1cmU6NTAwMjogJD8gPSAwCmNvbmZpZ3VyZTo1MDI2OiByZXN1bHQ6IApjb25m
aWd1cmU6NTAzMjogY2hlY2tpbmcgZm9yIHN1ZmZpeCBvZiBvYmplY3QgZmlsZXMKY29uZmlndXJl
OjUwNTg6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8g
Y29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjUwNjE6ICQ/ID0gMApjb25maWd1cmU6NTA4NDogcmVz
dWx0OiBvCmNvbmZpZ3VyZTo1MDg4OiBjaGVja2luZyB3aGV0aGVyIHdlIGFyZSB1c2luZyB0aGUg
R05VIEMgY29tcGlsZXIKY29uZmlndXJlOjUxMTc6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRl
bC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjUxMjM6ICQ/
ID0gMApjb25maWd1cmU6NTE0MDogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjUxNDU6IGNoZWNraW5n
IHdoZXRoZXIgaWNjIGFjY2VwdHMgLWcKY29uZmlndXJlOjUxNzU6IGljYyAtYyAtZyAtSS9vcHQv
aW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZTo1MTgx
OiAkPyA9IDAKY29uZmlndXJlOjUyODA6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZTo1Mjk3OiBjaGVj
a2luZyBmb3IgaWNjIG9wdGlvbiB0byBhY2NlcHQgSVNPIEM4OQpjb25maWd1cmU6NTM3MTogaWNj
ICAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3Qu
YyA+JjUKY29uZmlndXJlOjUzNzc6ICQ/ID0gMApjb25maWd1cmU6NTQwMDogcmVzdWx0OiBub25l
IG5lZWRlZApjb25maWd1cmU6NTQyNTogY2hlY2tpbmcgaG93IHRvIHJ1biB0aGUgQyBwcmVwcm9j
ZXNzb3IKY29uZmlndXJlOjU0NjU6IGljYyAtRSAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2lu
Y2x1ZGUvIGNvbmZ0ZXN0LmMKL3Vzci9pbmNsdWRlL2xpbWl0cy5oKDEyNSk6IGVycm9yICM1OiBj
b3VsZCBub3Qgb3BlbiBzb3VyY2UgZmlsZSAibGltaXRzLmgiCiAgIyBpbmNsdWRlX25leHQgPGxp
bWl0cy5oPgogICAgICAgICAgICAgICAgICAgICAgICAgICBeCgpjb25maWd1cmU6NTQ3MTogJD8g
PSAyCmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8qIGNvbmZkZWZzLmguICAqLwp8
ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9UQVJOQU1FICJSIgp8
ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfU1RSSU5H
ICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQgInItYnVnc0BSLXByb2plY3Qu
b3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJT04gIjIuNy4xIgp8ICNk
ZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgtZ251Igp8ICNkZWZpbmUgUl9D
UFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3duIgp8ICNkZWZpbmUgUl9PUyAi
bGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBSX0FSQ0ggIiIKfCAvKiBlbmQg
Y29uZmRlZnMuaC4gICovCnwgI2lmZGVmIF9fU1REQ19fCnwgIyBpbmNsdWRlIDxsaW1pdHMuaD4K
fCAjZWxzZQp8ICMgaW5jbHVkZSA8YXNzZXJ0Lmg+CnwgI2VuZGlmCnwgCQkgICAgIFN5bnRheCBl
cnJvcgpjb25maWd1cmU6NTQ2NTogaWNjIC1FIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5j
bHVkZS8gY29uZnRlc3QuYwovdXNyL2luY2x1ZGUvbGltaXRzLmgoMTI1KTogZXJyb3IgIzU6IGNv
dWxkIG5vdCBvcGVuIHNvdXJjZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGlt
aXRzLmg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIF4KCmNvbmZpZ3VyZTo1NDcxOiAkPyA9
IDIKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwg
I2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwg
I2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcg
IlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5v
cmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2Rl
ZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQ
VSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJs
aW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAjZGVmaW5lIFJfQVJDSCAiIgp8IC8qIGVuZCBj
b25mZGVmcy5oLiAgKi8KfCAjaWZkZWYgX19TVERDX18KfCAjIGluY2x1ZGUgPGxpbWl0cy5oPgp8
ICNlbHNlCnwgIyBpbmNsdWRlIDxhc3NlcnQuaD4KfCAjZW5kaWYKfCAJCSAgICAgU3ludGF4IGVy
cm9yCmNvbmZpZ3VyZTo1NDY1OiBpY2MgLUUgLXRyYWRpdGlvbmFsLWNwcCAtSS9vcHQvaW50ZWwv
Y2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKPGNvbW1hbmQtbGluZT46MTE6IHdhcm5p
bmc6ICJfX0dOVUNfUEFUQ0hMRVZFTF9fIiByZWRlZmluZWQKPGJ1aWx0LWluPjozOiB3YXJuaW5n
OiB0aGlzIGlzIHRoZSBsb2NhdGlvbiBvZiB0aGUgcHJldmlvdXMgZGVmaW5pdGlvbgpJbiBmaWxl
IGluY2x1ZGVkIGZyb20gL3Vzci9pbmNsdWRlL2ZlYXR1cmVzLmg6MzMxLAogICAgICAgICAgICAg
ICAgIGZyb20gL3Vzci9pbmNsdWRlL2Fzc2VydC5oOjM4LAogICAgICAgICAgICAgICAgIGZyb20g
Y29uZnRlc3QuYzoyMDoKL3Vzci9pbmNsdWRlL3N5cy9jZGVmcy5oOjMyOiBlcnJvcjogI2Vycm9y
ICJZb3UgbmVlZCBhIElTTyBDIGNvbmZvcm1pbmcgY29tcGlsZXIgdG8gdXNlIHRoZSBnbGliYyBo
ZWFkZXJzIgpjb25maWd1cmU6NTQ3MTogJD8gPSAxCmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0g
d2FzOgp8IC8qIGNvbmZkZWZzLmguICAqLwp8ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNk
ZWZpbmUgUEFDS0FHRV9UQVJOQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcu
MSIKfCAjZGVmaW5lIFBBQ0tBR0VfU1RSSU5HICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9C
VUdSRVBPUlQgInItYnVnc0BSLXByb2plY3Qub3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAj
ZGVmaW5lIFZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25v
d24tbGludXgtZ251Igp8ICNkZWZpbmUgUl9DUFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9S
ICJ1bmtub3duIgp8ICNkZWZpbmUgUl9PUyAibGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwg
I2RlZmluZSBSX0FSQ0ggIiIKfCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2lmZGVmIF9fU1RE
Q19fCnwgIyBpbmNsdWRlIDxsaW1pdHMuaD4KfCAjZWxzZQp8ICMgaW5jbHVkZSA8YXNzZXJ0Lmg+
CnwgI2VuZGlmCnwgCQkgICAgIFN5bnRheCBlcnJvcgpjb25maWd1cmU6NTQ2NTogaWNjIC1FIC10
cmFkaXRpb25hbC1jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVz
dC5jCjxjb21tYW5kLWxpbmU+OjExOiB3YXJuaW5nOiAiX19HTlVDX1BBVENITEVWRUxfXyIgcmVk
ZWZpbmVkCjxidWlsdC1pbj46Mzogd2FybmluZzogdGhpcyBpcyB0aGUgbG9jYXRpb24gb2YgdGhl
IHByZXZpb3VzIGRlZmluaXRpb24KSW4gZmlsZSBpbmNsdWRlZCBmcm9tIC91c3IvaW5jbHVkZS9m
ZWF0dXJlcy5oOjMzMSwKICAgICAgICAgICAgICAgICBmcm9tIC91c3IvaW5jbHVkZS9hc3NlcnQu
aDozOCwKICAgICAgICAgICAgICAgICBmcm9tIGNvbmZ0ZXN0LmM6MjA6Ci91c3IvaW5jbHVkZS9z
eXMvY2RlZnMuaDozMjogZXJyb3I6ICNlcnJvciAiWW91IG5lZWQgYSBJU08gQyBjb25mb3JtaW5n
IGNvbXBpbGVyIHRvIHVzZSB0aGUgZ2xpYmMgaGVhZGVycyIKY29uZmlndXJlOjU0NzE6ICQ/ID0g
MQpjb25maWd1cmU6IGZhaWxlZCBwcm9ncmFtIHdhczoKfCAvKiBjb25mZGVmcy5oLiAgKi8KfCAj
ZGVmaW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAj
ZGVmaW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX1NUUklORyAi
UiAyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfQlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9y
ZyIKfCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwgI2RlZmluZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVm
aW5lIFJfUExBVEZPUk0gIng4Nl82NC11bmtub3duLWxpbnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BV
ICJ4ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRPUiAidW5rbm93biIKfCAjZGVmaW5lIFJfT1MgImxp
bnV4LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8ICNkZWZpbmUgUl9BUkNIICIiCnwgLyogZW5kIGNv
bmZkZWZzLmguICAqLwp8ICNpZmRlZiBfX1NURENfXwp8ICMgaW5jbHVkZSA8bGltaXRzLmg+Cnwg
I2Vsc2UKfCAjIGluY2x1ZGUgPGFzc2VydC5oPgp8ICNlbmRpZgp8IAkJICAgICBTeW50YXggZXJy
b3IKY29uZmlndXJlOjU0NjU6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5j
bHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6NTQ3MTogJD8gPSAwCmNvbmZpZ3VyZTo1NTAyOiAv
bGliL2NwcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29u
ZnRlc3QuYzoxNjoyODogZXJyb3I6IGFjX25vbmV4aXN0ZW50Lmg6IE5vIHN1Y2ggZmlsZSBvciBk
aXJlY3RvcnkKY29uZmlndXJlOjU1MDg6ICQ/ID0gMQpjb25maWd1cmU6IGZhaWxlZCBwcm9ncmFt
IHdhczoKfCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVmaW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAj
ZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43
LjEiCnwgI2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0Vf
QlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKfCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwg
I2RlZmluZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82NC11bmtu
b3duLWxpbnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRP
UiAidW5rbm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8
ICNkZWZpbmUgUl9BUkNIICIiCnwgLyogZW5kIGNvbmZkZWZzLmguICAqLwp8ICNpbmNsdWRlIDxh
Y19ub25leGlzdGVudC5oPgpjb25maWd1cmU6NTU0MTogcmVzdWx0OiAvbGliL2NwcApjb25maWd1
cmU6NTU3MDogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25m
dGVzdC5jCmNvbmZpZ3VyZTo1NTc2OiAkPyA9IDAKY29uZmlndXJlOjU2MDc6IC9saWIvY3BwIC1J
L29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25mdGVzdC5jOjE2
OjI4OiBlcnJvcjogYWNfbm9uZXhpc3RlbnQuaDogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQpj
b25maWd1cmU6NTYxMzogJD8gPSAxCmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8q
IGNvbmZkZWZzLmguICAqLwp8ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFD
S0FHRV9UQVJOQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVm
aW5lIFBBQ0tBR0VfU1RSSU5HICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQg
InItYnVnc0BSLXByb2plY3Qub3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZF
UlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgt
Z251Igp8ICNkZWZpbmUgUl9DUFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3du
Igp8ICNkZWZpbmUgUl9PUyAibGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBS
X0FSQ0ggIiIKfCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPGFjX25vbmV4aXN0
ZW50Lmg+CmNvbmZpZ3VyZTo1NjUyOiBjaGVja2luZyB3aGV0aGVyIGljYyBuZWVkcyAtdHJhZGl0
aW9uYWwKY29uZmlndXJlOjU2OTQ6IHJlc3VsdDogbm8KY29uZmlndXJlOjU3MDY6IGNoZWNraW5n
IGhvdyB0byBydW4gdGhlIEMgcHJlcHJvY2Vzc29yCmNvbmZpZ3VyZTo1ODIyOiByZXN1bHQ6IC9s
aWIvY3BwCmNvbmZpZ3VyZTo1ODUxOiAvbGliL2NwcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1
L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJlOjU4NTc6ICQ/ID0gMApjb25maWd1cmU6NTg4
ODogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5j
CmNvbmZ0ZXN0LmM6MTY6Mjg6IGVycm9yOiBhY19ub25leGlzdGVudC5oOiBObyBzdWNoIGZpbGUg
b3IgZGlyZWN0b3J5CmNvbmZpZ3VyZTo1ODk0OiAkPyA9IDEKY29uZmlndXJlOiBmYWlsZWQgcHJv
Z3JhbSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIi
CnwgI2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04g
IjIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNL
QUdFX0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJS
Igp8ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQt
dW5rbm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9W
RU5ET1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4
IDEKfCAjZGVmaW5lIFJfQVJDSCAiIgp8IC8qIGVuZCBjb25mZGVmcy5oLiAgKi8KfCAjaW5jbHVk
ZSA8YWNfbm9uZXhpc3RlbnQuaD4KY29uZmlndXJlOjU5Nzc6IHJlc3VsdDogZGVmaW5pbmcgRjc3
IHRvIGJlIGlmb3J0CmNvbmZpZ3VyZTo2MTUzOiBjaGVja2luZyBmb3IgRm9ydHJhbiA3NyBjb21w
aWxlciB2ZXJzaW9uCmNvbmZpZ3VyZTo2MTYwOiBpZm9ydCAtLXZlcnNpb24gPiY1Cmlmb3J0IChJ
Rk9SVCkgMTAuMSAyMDA4MDMxMgpDb3B5cmlnaHQgKEMpIDE5ODUtMjAwOCBJbnRlbCBDb3Jwb3Jh
dGlvbi4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgpjb25maWd1cmU6NjE2MzogJD8gPSAwCmNvbmZp
Z3VyZTo2MTcwOiBpZm9ydCAtdiA+JjUKVmVyc2lvbiAxMC4xIApjb25maWd1cmU6NjE3MzogJD8g
PSAwCmNvbmZpZ3VyZTo2MTgwOiBpZm9ydCAtViA+JjUKSW50ZWwoUikgRm9ydHJhbiBDb21waWxl
ciBmb3IgYXBwbGljYXRpb25zIHJ1bm5pbmcgb24gSW50ZWwoUikgNjQsIFZlcnNpb24gMTAuMSAg
ICBCdWlsZCAyMDA4MDMxMiBQYWNrYWdlIElEOiBsX2ZjX3BfMTAuMS4wMTUKQ29weXJpZ2h0IChD
KSAxOTg1LTIwMDggSW50ZWwgQ29ycG9yYXRpb24uICBBbGwgcmlnaHRzIHJlc2VydmVkLgpGT1Ig
Tk9OLUNPTU1FUkNJQUwgVVNFIE9OTFkKCmNvbmZpZ3VyZTo2MTgzOiAkPyA9IDAKY29uZmlndXJl
OjYxOTE6IGNoZWNraW5nIHdoZXRoZXIgd2UgYXJlIHVzaW5nIHRoZSBHTlUgRm9ydHJhbiA3NyBj
b21waWxlcgpjb25maWd1cmU6NjIxMDogaWZvcnQgLWMgLUM5MCAtdzkwIC13OTUgLW1wIGNvbmZ0
ZXN0LkYgPiY1Cmlmb3J0OiBjb21tYW5kIGxpbmUgd2FybmluZyAjMTAxNTY6IGlnbm9yaW5nIG9w
dGlvbiAnLUMnOyBubyBhcmd1bWVudCByZXF1aXJlZApmb3J0Y29tOiBFcnJvcjogY29uZnRlc3Qu
RiwgbGluZSAzOiBTeW50YXggZXJyb3IsIGZvdW5kIEVORC1PRi1TVEFURU1FTlQgd2hlbiBleHBl
Y3Rpbmcgb25lIG9mOiA9PiA9IC4gKCA6ICUKICAgICAgIGNob2tlIG1lCi0tLS0tLS0tLS0tLS0t
LV4KZm9ydGNvbTogRXJyb3I6IGNvbmZ0ZXN0LkYsIGxpbmUgMzogVGhpcyBzdGF0ZW1lbnQgaXMg
cG9zaXRpb25lZCBpbmNvcnJlY3RseSBhbmQvb3IgaGFzIHN5bnRheCBlcnJvcnMuCiAgICAgICBj
aG9rZSBtZQotLS0tLS0tLS0tLS0tLS1eCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0
LkYgKGNvZGUgMSkKY29uZmlndXJlOjYyMTY6ICQ/ID0gMQpjb25maWd1cmU6IGZhaWxlZCBwcm9n
cmFtIHdhczoKfCAgICAgICBwcm9ncmFtIG1haW4KfCAjaWZuZGVmIF9fR05VQ19fCnwgICAgICAg
IGNob2tlIG1lCnwgI2VuZGlmCnwgCnwgICAgICAgZW5kCmNvbmZpZ3VyZTo2MjMzOiByZXN1bHQ6
IG5vCmNvbmZpZ3VyZTo2MjM5OiBjaGVja2luZyB3aGV0aGVyIGlmb3J0IGFjY2VwdHMgLWcKY29u
ZmlndXJlOjYyNTY6IGlmb3J0IC1jIC1nIGNvbmZ0ZXN0LmYgPiY1CmNvbmZpZ3VyZTo2MjYyOiAk
PyA9IDAKY29uZmlndXJlOjYyNzg6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZTo2NDI1OiBjaGVja2lu
ZyBmb3IgQysrIGNvbXBpbGVyIHZlcnNpb24KY29uZmlndXJlOjY0MzI6IGljYyAtLXZlcnNpb24g
PiY1CmljYyAoSUNDKSAxMC4xIDIwMDgwMzEyCkNvcHlyaWdodCAoQykgMTk4NS0yMDA4IEludGVs
IENvcnBvcmF0aW9uLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KCmNvbmZpZ3VyZTo2NDM1OiAkPyA9
IDAKY29uZmlndXJlOjY0NDI6IGljYyAtdiA+JjUKVmVyc2lvbiAxMC4xIApjb25maWd1cmU6NjQ0
NTogJD8gPSAwCmNvbmZpZ3VyZTo2NDUyOiBpY2MgLVYgPiY1CkludGVsKFIpIEMgQ29tcGlsZXIg
Zm9yIGFwcGxpY2F0aW9ucyBydW5uaW5nIG9uIEludGVsKFIpIDY0LCBWZXJzaW9uIDEwLjEgICAg
QnVpbGQgMjAwODAzMTIgUGFja2FnZSBJRDogbF9jY19wXzEwLjEuMDE1CkNvcHlyaWdodCAoQykg
MTk4NS0yMDA4IEludGVsIENvcnBvcmF0aW9uLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KRk9SIE5P
Ti1DT01NRVJDSUFMIFVTRSBPTkxZCgpjb25maWd1cmU6NjQ1NTogJD8gPSAwCmNvbmZpZ3VyZTo2
NDU4OiBjaGVja2luZyB3aGV0aGVyIHdlIGFyZSB1c2luZyB0aGUgR05VIEMrKyBjb21waWxlcgpj
b25maWd1cmU6NjQ4NzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9p
bmNsdWRlLyBjb25mdGVzdC5jcHAgPiY1CmNvbmZpZ3VyZTo2NDkzOiAkPyA9IDAKY29uZmlndXJl
OjY1MTA6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZTo2NTE1OiBjaGVja2luZyB3aGV0aGVyIGljYyBh
Y2NlcHRzIC1nCmNvbmZpZ3VyZTo2NTQ1OiBpY2MgLWMgLWcgLUkvb3B0L2ludGVsL2NjZS8xMC4x
LjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jcHAgPiY1CmNvbmZpZ3VyZTo2NTUxOiAkPyA9IDAKY29u
ZmlndXJlOjY2NTA6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZTo2Njc4OiBjaGVja2luZyBob3cgdG8g
cnVuIHRoZSBDKysgcHJlcHJvY2Vzc29yCmNvbmZpZ3VyZTo2NzE0OiBpY2MgLUUgLUkvb3B0L2lu
dGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jcHAKL3Vzci9pbmNsdWRlL2xpbWl0
cy5oKDEyNSk6IGVycm9yICM1OiBjb3VsZCBub3Qgb3BlbiBzb3VyY2UgZmlsZSAibGltaXRzLmgi
CiAgIyBpbmNsdWRlX25leHQgPGxpbWl0cy5oPgogICAgICAgICAgICAgICAgICAgICAgICAgICBe
Cgpjb25maWd1cmU6NjcyMDogJD8gPSAyCmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8
IC8qIGNvbmZkZWZzLmguICAqLwp8ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUg
UEFDS0FHRV9UQVJOQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAj
ZGVmaW5lIFBBQ0tBR0VfU1RSSU5HICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBP
UlQgInItYnVnc0BSLXByb2plY3Qub3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5l
IFZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGlu
dXgtZ251Igp8ICNkZWZpbmUgUl9DUFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtu
b3duIgp8ICNkZWZpbmUgUl9PUyAibGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmlu
ZSBSX0FSQ0ggIiIKfCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2lmZGVmIF9fU1REQ19fCnwg
IyBpbmNsdWRlIDxsaW1pdHMuaD4KfCAjZWxzZQp8ICMgaW5jbHVkZSA8YXNzZXJ0Lmg+CnwgI2Vu
ZGlmCnwgCQkgICAgIFN5bnRheCBlcnJvcgpjb25maWd1cmU6NjcxNDogaWNjIC1FIC1JL29wdC9p
bnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuY3BwCi91c3IvaW5jbHVkZS9saW1p
dHMuaCgxMjUpOiBlcnJvciAjNTogY291bGQgbm90IG9wZW4gc291cmNlIGZpbGUgImxpbWl0cy5o
IgogICMgaW5jbHVkZV9uZXh0IDxsaW1pdHMuaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
XgoKY29uZmlndXJlOjY3MjA6ICQ/ID0gMgpjb25maWd1cmU6IGZhaWxlZCBwcm9ncmFtIHdhczoK
fCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVmaW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAjZGVmaW5l
IFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43LjEiCnwg
I2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfQlVHUkVQ
T1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKfCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwgI2RlZmlu
ZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82NC11bmtub3duLWxp
bnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRPUiAidW5r
bm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8ICNkZWZp
bmUgUl9BUkNIICIiCnwgLyogZW5kIGNvbmZkZWZzLmguICAqLwp8ICNpZmRlZiBfX1NURENfXwp8
ICMgaW5jbHVkZSA8bGltaXRzLmg+CnwgI2Vsc2UKfCAjIGluY2x1ZGUgPGFzc2VydC5oPgp8ICNl
bmRpZgp8IAkJICAgICBTeW50YXggZXJyb3IKY29uZmlndXJlOjY3MTQ6IC9saWIvY3BwIC1JL29w
dC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuY3BwCmNvbmZpZ3VyZTo2NzIw
OiAkPyA9IDAKY29uZmlndXJlOjY3NTE6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4w
MTUvaW5jbHVkZS8gY29uZnRlc3QuY3BwCmNvbmZ0ZXN0LmNwcDoxNjoyODogZXJyb3I6IGFjX25v
bmV4aXN0ZW50Lmg6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkKY29uZmlndXJlOjY3NTc6ICQ/
ID0gMQpjb25maWd1cmU6IGZhaWxlZCBwcm9ncmFtIHdhczoKfCAvKiBjb25mZGVmcy5oLiAgKi8K
fCAjZGVmaW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIK
fCAjZGVmaW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX1NUUklO
RyAiUiAyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfQlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0
Lm9yZyIKfCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwgI2RlZmluZSBWRVJTSU9OICIyLjcuMSIKfCAj
ZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82NC11bmtub3duLWxpbnV4LWdudSIKfCAjZGVmaW5lIFJf
Q1BVICJ4ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRPUiAidW5rbm93biIKfCAjZGVmaW5lIFJfT1Mg
ImxpbnV4LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8ICNkZWZpbmUgUl9BUkNIICIiCnwgLyogZW5k
IGNvbmZkZWZzLmguICAqLwp8ICNpbmNsdWRlIDxhY19ub25leGlzdGVudC5oPgpjb25maWd1cmU6
Njc5MDogcmVzdWx0OiAvbGliL2NwcApjb25maWd1cmU6NjgxOTogL2xpYi9jcHAgLUkvb3B0L2lu
dGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jcHAKY29uZmlndXJlOjY4MjU6ICQ/
ID0gMApjb25maWd1cmU6Njg1NjogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9p
bmNsdWRlLyBjb25mdGVzdC5jcHAKY29uZnRlc3QuY3BwOjE2OjI4OiBlcnJvcjogYWNfbm9uZXhp
c3RlbnQuaDogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQpjb25maWd1cmU6Njg2MjogJD8gPSAx
CmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8qIGNvbmZkZWZzLmguICAqLwp8ICNk
ZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9UQVJOQU1FICJSIgp8ICNk
ZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfU1RSSU5HICJS
IDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQgInItYnVnc0BSLXByb2plY3Qub3Jn
Igp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJT04gIjIuNy4xIgp8ICNkZWZp
bmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgtZ251Igp8ICNkZWZpbmUgUl9DUFUg
Ing4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3duIgp8ICNkZWZpbmUgUl9PUyAibGlu
dXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBSX0FSQ0ggIiIKfCAvKiBlbmQgY29u
ZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPGFjX25vbmV4aXN0ZW50Lmg+CmNvbmZpZ3VyZTo2ODk5
OiBjaGVja2luZyB3aGV0aGVyIF9fYXR0cmlidXRlX18oKHZpc2liaWxpdHkoKSkpIGlzIHN1cHBv
cnRlZApjb25maWd1cmU6NjkxMDogaWNjIC1XZXJyb3IgLVMgY29uZnRlc3QuYyAtbyBjb25mdGVz
dC5zIDE+JjUKY29uZmlndXJlOjY5MTM6ICQ/ID0gMApjb25maWd1cmU6NjkyMjogcmVzdWx0OiB5
ZXMKY29uZmlndXJlOjY5MzM6IGNoZWNraW5nIHdoZXRoZXIgaWNjIGFjY2VwdHMgLWZ2aXNpYmls
aXR5CmNvbmZpZ3VyZTo2OTU5OiBpY2MgLWMgLU8zIC1tcCAtZnZpc2liaWxpdHk9aGlkZGVuIC1J
L29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJl
OjY5NjU6ICQ/ID0gMApjb25maWd1cmU6Njk4MDogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjcwMDI6
IGNoZWNraW5nIHdoZXRoZXIgaWZvcnQgYWNjZXB0cyAtZnZpc2liaWxpdHkKY29uZmlndXJlOjcw
MTg6IGlmb3J0IC1jIC1DOTAgLXc5MCAtdzk1IC1tcCAtZnZpc2liaWxpdHk9aGlkZGVuIGNvbmZ0
ZXN0LmYgPiY1Cmlmb3J0OiBjb21tYW5kIGxpbmUgd2FybmluZyAjMTAxNTY6IGlnbm9yaW5nIG9w
dGlvbiAnLUMnOyBubyBhcmd1bWVudCByZXF1aXJlZApjb25maWd1cmU6NzAyNDogJD8gPSAwCmNv
bmZpZ3VyZTo3MDM5OiByZXN1bHQ6IHllcwpjb25maWd1cmU6NzEyMjogY2hlY2tpbmcgZm9yIGdj
Ywpjb25maWd1cmU6NzEzODogZm91bmQgL3Vzci9iaW4vZ2NjCmNvbmZpZ3VyZTo3MTQ5OiByZXN1
bHQ6IGdjYwpjb25maWd1cmU6NzE3ODogY2hlY2tpbmcgZm9yIE9iamVjdGl2ZSBDIGNvbXBpbGVy
IHZlcnNpb24KY29uZmlndXJlOjcxODU6IGdjYyAtLXZlcnNpb24gPiY1CmdjYyAoU1VTRSBMaW51
eCkgNC4zLjEgMjAwODA1MDcgKHByZXJlbGVhc2UpIFtnY2MtNF8zLWJyYW5jaCByZXZpc2lvbiAx
MzUwMzZdCkNvcHlyaWdodCAoQykgMjAwOCBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIEluYy4K
VGhpcyBpcyBmcmVlIHNvZnR3YXJlOyBzZWUgdGhlIHNvdXJjZSBmb3IgY29weWluZyBjb25kaXRp
b25zLiAgVGhlcmUgaXMgTk8Kd2FycmFudHk7IG5vdCBldmVuIGZvciBNRVJDSEFOVEFCSUxJVFkg
b3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuCgpjb25maWd1cmU6NzE4ODogJD8g
PSAwCmNvbmZpZ3VyZTo3MTk1OiBnY2MgLXYgPiY1ClVzaW5nIGJ1aWx0LWluIHNwZWNzLgpUYXJn
ZXQ6IHg4Nl82NC1zdXNlLWxpbnV4CkNvbmZpZ3VyZWQgd2l0aDogLi4vY29uZmlndXJlIC0tcHJl
Zml4PS91c3IgLS13aXRoLWxvY2FsLXByZWZpeD0vdXNyL2xvY2FsIC0taW5mb2Rpcj0vdXNyL3No
YXJlL2luZm8gLS1tYW5kaXI9L3Vzci9zaGFyZS9tYW4gLS1saWJkaXI9L3Vzci9saWI2NCAtLWxp
YmV4ZWNkaXI9L3Vzci9saWI2NCAtLWVuYWJsZS1sYW5ndWFnZXM9YyxjKyssb2JqYyxmb3J0cmFu
LG9iai1jKyssamF2YSxhZGEgLS1lbmFibGUtY2hlY2tpbmc9cmVsZWFzZSAtLXdpdGgtZ3h4LWlu
Y2x1ZGUtZGlyPS91c3IvaW5jbHVkZS9jKysvNC4zIC0tZW5hYmxlLXNzcCAtLWRpc2FibGUtbGli
c3NwIC0td2l0aC1idWd1cmw9aHR0cDovL2J1Z3Mub3BlbnN1c2Uub3JnLyAtLXdpdGgtcGtndmVy
c2lvbj0nU1VTRSBMaW51eCcgLS1kaXNhYmxlLWxpYmdjaiAtLXdpdGgtc2xpYmRpcj0vbGliNjQg
LS13aXRoLXN5c3RlbS16bGliIC0tZW5hYmxlLV9fY3hhX2F0ZXhpdCAtLWVuYWJsZS1saWJzdGRj
eHgtYWxsb2NhdG9yPW5ldyAtLWRpc2FibGUtbGlic3RkY3h4LXBjaCAtLXByb2dyYW0tc3VmZml4
PS00LjMgLS1lbmFibGUtdmVyc2lvbi1zcGVjaWZpYy1ydW50aW1lLWxpYnMgLS1lbmFibGUtbGlu
dXgtZnV0ZXggLS13aXRob3V0LXN5c3RlbS1saWJ1bndpbmQgLS13aXRoLWNwdT1nZW5lcmljIC0t
YnVpbGQ9eDg2XzY0LXN1c2UtbGludXgKVGhyZWFkIG1vZGVsOiBwb3NpeApnY2MgdmVyc2lvbiA0
LjMuMSAyMDA4MDUwNyAocHJlcmVsZWFzZSkgW2djYy00XzMtYnJhbmNoIHJldmlzaW9uIDEzNTAz
Nl0gKFNVU0UgTGludXgpIApjb25maWd1cmU6NzE5ODogJD8gPSAwCmNvbmZpZ3VyZTo3MjA1OiBn
Y2MgLVYgPiY1CmdjYzogJy1WJyBvcHRpb24gbXVzdCBoYXZlIGFyZ3VtZW50CmNvbmZpZ3VyZTo3
MjA4OiAkPyA9IDEKY29uZmlndXJlOjcyMTE6IGNoZWNraW5nIHdoZXRoZXIgd2UgYXJlIHVzaW5n
IHRoZSBHTlUgT2JqZWN0aXZlIEMgY29tcGlsZXIKY29uZmlndXJlOjcyNDA6IGdjYyAtYyAgLUkv
b3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5tID4mNQpjb25maWd1cmU6
NzI0NjogJD8gPSAwCmNvbmZpZ3VyZTo3MjYzOiByZXN1bHQ6IHllcwpjb25maWd1cmU6NzI2ODog
Y2hlY2tpbmcgd2hldGhlciBnY2MgYWNjZXB0cyAtZwpjb25maWd1cmU6NzI5ODogZ2NjIC1jIC1n
IC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QubSA+JjUKY29uZmln
dXJlOjczMDQ6ICQ/ID0gMApjb25maWd1cmU6NzQwMzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjc0
NTY6IGdjYyAtYyAtZyAtTzIgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25m
dGVzdC5tID4mNQpjb25maWd1cmU6NzQ2MjogJD8gPSAwCmNvbmZpZ3VyZTo3NDg3OiBjaGVja2lu
ZyBmb3IgY2FjaGVkIE9iakMrKyBjb21waWxlcgpjb25maWd1cmU6NzQ5MzogcmVzdWx0OiBub25l
CmNvbmZpZ3VyZTo3NTM3OiBjaGVja2luZyB3aGV0aGVyIGljYyBjYW4gY29tcGlsZSBPYmpDKysK
cnVubmluZzogaWNjIC1jIGNvbmZ0ZXN0Lm1tIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5j
bHVkZS8gCmljYzogd2FybmluZyAjMTAxNDc6IG5vIGFjdGlvbiBwZXJmb3JtZWQgZm9yIHNwZWNp
ZmllZCBmaWxlKHMpCmNvbmZpZ3VyZTo3NTYxOiByZXN1bHQ6IHllcwpjb25maWd1cmU6NzYxMDog
Y2hlY2tpbmcgZm9yIE9iamVjdGl2ZSBDKysgY29tcGlsZXIKY29uZmlndXJlOjc2MTY6IHJlc3Vs
dDogaWNjCmNvbmZpZ3VyZTo3Njk0OiBjaGVja2luZyBmb3IgYSBzZWQgdGhhdCBkb2VzIG5vdCB0
cnVuY2F0ZSBvdXRwdXQKY29uZmlndXJlOjc3NzM6IHJlc3VsdDogL3Vzci9iaW4vc2VkCmNvbmZp
Z3VyZTo3NzkxOiBjaGVja2luZyBmb3IgZmdyZXAKY29uZmlndXJlOjc4Njk6IHJlc3VsdDogL3Vz
ci9iaW4vZ3JlcCAtRgpjb25maWd1cmU6NzkwNDogY2hlY2tpbmcgZm9yIGxkIHVzZWQgYnkgaWNj
CmNvbmZpZ3VyZTo3OTcxOiByZXN1bHQ6IC91c3IvYmluL2xkCmNvbmZpZ3VyZTo3OTgwOiBjaGVj
a2luZyBpZiB0aGUgbGlua2VyICgvdXNyL2Jpbi9sZCkgaXMgR05VIGxkCmNvbmZpZ3VyZTo3OTk1
OiByZXN1bHQ6IHllcwpjb25maWd1cmU6ODAwODogY2hlY2tpbmcgZm9yIEJTRC0gb3IgTVMtY29t
cGF0aWJsZSBuYW1lIGxpc3RlciAobm0pCmNvbmZpZ3VyZTo4MDU3OiByZXN1bHQ6IC91c3IvYmlu
L25tIC1CCmNvbmZpZ3VyZTo4MTc5OiBjaGVja2luZyB0aGUgbmFtZSBsaXN0ZXIgKC91c3IvYmlu
L25tIC1CKSBpbnRlcmZhY2UKY29uZmlndXJlOjgxODY6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9p
bnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjgxODk6
IC91c3IvYmluL25tIC1CICJjb25mdGVzdC5vIgpjb25maWd1cmU6ODE5Mjogb3V0cHV0CjAwMDAw
MDAwMDAwMDAwMDAgQiBzb21lX3ZhcmlhYmxlCmNvbmZpZ3VyZTo4MTk5OiByZXN1bHQ6IEJTRCBu
bQpjb25maWd1cmU6ODIwMzogY2hlY2tpbmcgdGhlIG1heGltdW0gbGVuZ3RoIG9mIGNvbW1hbmQg
bGluZSBhcmd1bWVudHMKY29uZmlndXJlOjgzMjM6IHJlc3VsdDogMTU3Mjg2NApjb25maWd1cmU6
ODM0MTogY2hlY2tpbmcgd2hldGhlciB0aGUgc2hlbGwgdW5kZXJzdGFuZHMgc29tZSBYU0kgY29u
c3RydWN0cwpjb25maWd1cmU6ODM0OTogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjgzNTM6IGNoZWNr
aW5nIHdoZXRoZXIgdGhlIHNoZWxsIHVuZGVyc3RhbmRzICIrPSIKY29uZmlndXJlOjgzNTk6IHJl
c3VsdDogeWVzCmNvbmZpZ3VyZTo4Mzk0OiBjaGVja2luZyBmb3IgL3Vzci9iaW4vbGQgb3B0aW9u
IHRvIHJlbG9hZCBvYmplY3QgZmlsZXMKY29uZmlndXJlOjg0MDE6IHJlc3VsdDogLXIKY29uZmln
dXJlOjg0Mjg6IGNoZWNraW5nIGhvdyB0byByZWNvZ25pemUgZGVwZW5kZW50IGxpYnJhcmllcwpj
b25maWd1cmU6ODYxODogcmVzdWx0OiBwYXNzX2FsbApjb25maWd1cmU6ODc4NzogY2hlY2tpbmcg
Zm9yIHN0cmlwCmNvbmZpZ3VyZTo4ODAzOiBmb3VuZCAvdXNyL2Jpbi9zdHJpcApjb25maWd1cmU6
ODgxNDogcmVzdWx0OiBzdHJpcApjb25maWd1cmU6ODg5MDogY2hlY2tpbmcgZm9yIHJhbmxpYgpj
b25maWd1cmU6ODkwNjogZm91bmQgL3Vzci9iaW4vcmFubGliCmNvbmZpZ3VyZTo4OTE3OiByZXN1
bHQ6IHJhbmxpYgpjb25maWd1cmU6OTAxMTogY2hlY2tpbmcgY29tbWFuZCB0byBwYXJzZSAvdXNy
L2Jpbi9ubSAtQiBvdXRwdXQgZnJvbSBpY2Mgb2JqZWN0CmNvbmZpZ3VyZTo5MTI5OiBpY2MgLWMg
LU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1
CmNvbmZpZ3VyZTo5MTMyOiAkPyA9IDAKY29uZmlndXJlOjkxMzY6IC91c3IvYmluL25tIC1CIGNv
bmZ0ZXN0Lm8gXHwgc2VkIC1uIC1lICdzL14uKlsJIF1cKFtBQkNER0lSU1RXXVtBQkNER0lSU1RX
XSpcKVsJIF1bCSBdKlwoW19BLVphLXpdW19BLVphLXowLTldKlwpJC9cMSBcMiBcMi9wJyBcPiBj
b25mdGVzdC5ubQpjb25maWd1cmU6OTEzOTogJD8gPSAwCmNvbmZpZ3VyZTo5MTkzOiBpY2MgLW8g
Y29uZnRlc3QgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIC1ML3Vz
ci9sb2NhbC9saWI2NCBjb25mdGVzdC5jIGNvbmZ0c3RtLm8gPiY1CmNvbmZpZ3VyZTo5MTk2OiAk
PyA9IDAKY29uZmlndXJlOjkyMzQ6IHJlc3VsdDogb2sKY29uZmlndXJlOjkzMjk6IGljYyAtYyAt
TzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUK
Y29uZmlndXJlOjkzMzI6ICQ/ID0gMApjb25maWd1cmU6OTc5ODogY2hlY2tpbmcgZm9yIEFOU0kg
QyBoZWFkZXIgZmlsZXMKY29uZmlndXJlOjk4Mjg6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRl
bC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjk4MzQ6ICQ/
ID0gMApjb25maWd1cmU6OTkzMzogaWNjIC1vIGNvbmZ0ZXN0IC1PMyAtbXAgLUkvb3B0L2ludGVs
L2NjZS8xMC4xLjAxNS9pbmNsdWRlLyAtTC91c3IvbG9jYWwvbGliNjQgY29uZnRlc3QuYyAgPiY1
CmNvbmZpZ3VyZTo5OTM2OiAkPyA9IDAKY29uZmlndXJlOjk5NDI6IC4vY29uZnRlc3QKY29uZmln
dXJlOjk5NDU6ICQ/ID0gMApjb25maWd1cmU6OTk2MjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjk5
ODY6IGNoZWNraW5nIGZvciBzeXMvdHlwZXMuaApjb25maWd1cmU6MTAwMDc6IGljYyAtYyAtTzMg
LW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29u
ZmlndXJlOjEwMDEzOiAkPyA9IDAKY29uZmlndXJlOjEwMDI5OiByZXN1bHQ6IHllcwpjb25maWd1
cmU6OTk4NjogY2hlY2tpbmcgZm9yIHN5cy9zdGF0LmgKY29uZmlndXJlOjEwMDA3OiBpY2MgLWMg
LU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1
CmNvbmZpZ3VyZToxMDAxMzogJD8gPSAwCmNvbmZpZ3VyZToxMDAyOTogcmVzdWx0OiB5ZXMKY29u
ZmlndXJlOjk5ODY6IGNoZWNraW5nIGZvciBzdGRsaWIuaApjb25maWd1cmU6MTAwMDc6IGljYyAt
YyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+
JjUKY29uZmlndXJlOjEwMDEzOiAkPyA9IDAKY29uZmlndXJlOjEwMDI5OiByZXN1bHQ6IHllcwpj
b25maWd1cmU6OTk4NjogY2hlY2tpbmcgZm9yIHN0cmluZy5oCmNvbmZpZ3VyZToxMDAwNzogaWNj
IC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5j
ID4mNQpjb25maWd1cmU6MTAwMTM6ICQ/ID0gMApjb25maWd1cmU6MTAwMjk6IHJlc3VsdDogeWVz
CmNvbmZpZ3VyZTo5OTg2OiBjaGVja2luZyBmb3IgbWVtb3J5LmgKY29uZmlndXJlOjEwMDA3OiBp
Y2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0
LmMgPiY1CmNvbmZpZ3VyZToxMDAxMzogJD8gPSAwCmNvbmZpZ3VyZToxMDAyOTogcmVzdWx0OiB5
ZXMKY29uZmlndXJlOjk5ODY6IGNoZWNraW5nIGZvciBzdHJpbmdzLmgKY29uZmlndXJlOjEwMDA3
OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0
ZXN0LmMgPiY1CmNvbmZpZ3VyZToxMDAxMzogJD8gPSAwCmNvbmZpZ3VyZToxMDAyOTogcmVzdWx0
OiB5ZXMKY29uZmlndXJlOjk5ODY6IGNoZWNraW5nIGZvciBpbnR0eXBlcy5oCmNvbmZpZ3VyZTox
MDAwNzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBj
b25mdGVzdC5jID4mNQpjb25maWd1cmU6MTAwMTM6ICQ/ID0gMApjb25maWd1cmU6MTAwMjk6IHJl
c3VsdDogeWVzCmNvbmZpZ3VyZTo5OTg2OiBjaGVja2luZyBmb3Igc3RkaW50LmgKY29uZmlndXJl
OjEwMDA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUv
IGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToxMDAxMzogJD8gPSAwCmNvbmZpZ3VyZToxMDAyOTog
cmVzdWx0OiB5ZXMKY29uZmlndXJlOjk5ODY6IGNoZWNraW5nIGZvciB1bmlzdGQuaApjb25maWd1
cmU6MTAwMDc6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVk
ZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjEwMDEzOiAkPyA9IDAKY29uZmlndXJlOjEwMDI5
OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTAwNDU6IGNoZWNraW5nIGZvciBkbGZjbi5oCmNvbmZp
Z3VyZToxMDA2NjogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNs
dWRlLyBjb25mdGVzdC5jID4mNQpjb25maWd1cmU6MTAwNzI6ICQ/ID0gMApjb25maWd1cmU6MTAw
ODg6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToxMDIxNzogY2hlY2tpbmcgZm9yIEMrKyBjb21waWxl
ciB2ZXJzaW9uCmNvbmZpZ3VyZToxMDIyNDogaWNjIC0tdmVyc2lvbiA+JjUKaWNjIChJQ0MpIDEw
LjEgMjAwODAzMTIKQ29weXJpZ2h0IChDKSAxOTg1LTIwMDggSW50ZWwgQ29ycG9yYXRpb24uICBB
bGwgcmlnaHRzIHJlc2VydmVkLgoKY29uZmlndXJlOjEwMjI3OiAkPyA9IDAKY29uZmlndXJlOjEw
MjM0OiBpY2MgLXYgPiY1ClZlcnNpb24gMTAuMSAKY29uZmlndXJlOjEwMjM3OiAkPyA9IDAKY29u
ZmlndXJlOjEwMjQ0OiBpY2MgLVYgPiY1CkludGVsKFIpIEMgQ29tcGlsZXIgZm9yIGFwcGxpY2F0
aW9ucyBydW5uaW5nIG9uIEludGVsKFIpIDY0LCBWZXJzaW9uIDEwLjEgICAgQnVpbGQgMjAwODAz
MTIgUGFja2FnZSBJRDogbF9jY19wXzEwLjEuMDE1CkNvcHlyaWdodCAoQykgMTk4NS0yMDA4IElu
dGVsIENvcnBvcmF0aW9uLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KRk9SIE5PTi1DT01NRVJDSUFM
IFVTRSBPTkxZCgpjb25maWd1cmU6MTAyNDc6ICQ/ID0gMApjb25maWd1cmU6MTAyNTA6IGNoZWNr
aW5nIHdoZXRoZXIgd2UgYXJlIHVzaW5nIHRoZSBHTlUgQysrIGNvbXBpbGVyCmNvbmZpZ3VyZTox
MDMwMjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjEwMzA3OiBjaGVja2luZyB3aGV0aGVyIGljYyBh
Y2NlcHRzIC1nCmNvbmZpZ3VyZToxMDQ0MjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjEwNDczOiBj
aGVja2luZyBob3cgdG8gcnVuIHRoZSBDKysgcHJlcHJvY2Vzc29yCmNvbmZpZ3VyZToxMDU4NTog
cmVzdWx0OiAvbGliL2NwcApjb25maWd1cmU6MTA2MTQ6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9j
Y2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuY3BwCmNvbmZpZ3VyZToxMDYyMDogJD8gPSAw
CmNvbmZpZ3VyZToxMDY1MTogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNs
dWRlLyBjb25mdGVzdC5jcHAKY29uZnRlc3QuY3BwOjI5OjI4OiBlcnJvcjogYWNfbm9uZXhpc3Rl
bnQuaDogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQpjb25maWd1cmU6MTA2NTc6ICQ/ID0gMQpj
b25maWd1cmU6IGZhaWxlZCBwcm9ncmFtIHdhczoKfCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVm
aW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVm
aW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAy
LjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfQlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIK
fCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwgI2RlZmluZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5l
IFJfUExBVEZPUk0gIng4Nl82NC11bmtub3duLWxpbnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4
ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRPUiAidW5rbm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4
LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8ICNkZWZpbmUgUl9BUkNIICIiCnwgI2RlZmluZSBIQVZF
X1ZJU0lCSUxJVFlfQVRUUklCVVRFIDEKfCAjZGVmaW5lIF9HTlVfU09VUkNFIDEKfCAjZGVmaW5l
IFNURENfSEVBREVSUyAxCnwgI2RlZmluZSBIQVZFX1NZU19UWVBFU19IIDEKfCAjZGVmaW5lIEhB
VkVfU1lTX1NUQVRfSCAxCnwgI2RlZmluZSBIQVZFX1NURExJQl9IIDEKfCAjZGVmaW5lIEhBVkVf
U1RSSU5HX0ggMQp8ICNkZWZpbmUgSEFWRV9NRU1PUllfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklO
R1NfSCAxCnwgI2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJTlRf
SCAxCnwgI2RlZmluZSBIQVZFX1VOSVNURF9IIDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwg
LyogZW5kIGNvbmZkZWZzLmguICAqLwp8ICNpbmNsdWRlIDxhY19ub25leGlzdGVudC5oPgpjb25m
aWd1cmU6MTA4MDg6IGNoZWNraW5nIGZvciBGb3J0cmFuIDc3IGNvbXBpbGVyIHZlcnNpb24KY29u
ZmlndXJlOjEwODE1OiBpZm9ydCAtLXZlcnNpb24gPiY1Cmlmb3J0IChJRk9SVCkgMTAuMSAyMDA4
MDMxMgpDb3B5cmlnaHQgKEMpIDE5ODUtMjAwOCBJbnRlbCBDb3Jwb3JhdGlvbi4gIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuCgpjb25maWd1cmU6MTA4MTg6ICQ/ID0gMApjb25maWd1cmU6MTA4MjU6IGlm
b3J0IC12ID4mNQpWZXJzaW9uIDEwLjEgCmNvbmZpZ3VyZToxMDgyODogJD8gPSAwCmNvbmZpZ3Vy
ZToxMDgzNTogaWZvcnQgLVYgPiY1CkludGVsKFIpIEZvcnRyYW4gQ29tcGlsZXIgZm9yIGFwcGxp
Y2F0aW9ucyBydW5uaW5nIG9uIEludGVsKFIpIDY0LCBWZXJzaW9uIDEwLjEgICAgQnVpbGQgMjAw
ODAzMTIgUGFja2FnZSBJRDogbF9mY19wXzEwLjEuMDE1CkNvcHlyaWdodCAoQykgMTk4NS0yMDA4
IEludGVsIENvcnBvcmF0aW9uLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KRk9SIE5PTi1DT01NRVJD
SUFMIFVTRSBPTkxZCgpjb25maWd1cmU6MTA4Mzg6ICQ/ID0gMApjb25maWd1cmU6MTA4NDY6IGNo
ZWNraW5nIHdoZXRoZXIgd2UgYXJlIHVzaW5nIHRoZSBHTlUgRm9ydHJhbiA3NyBjb21waWxlcgpj
b25maWd1cmU6MTA4ODg6IHJlc3VsdDogbm8KY29uZmlndXJlOjEwODk0OiBjaGVja2luZyB3aGV0
aGVyIGlmb3J0IGFjY2VwdHMgLWcKY29uZmlndXJlOjEwOTMzOiByZXN1bHQ6IHllcwpjb25maWd1
cmU6MTExMDc6IGNoZWNraW5nIGZvciBvYmpkaXIKY29uZmlndXJlOjExMTIyOiByZXN1bHQ6IC5s
aWJzCmNvbmZpZ3VyZToxMTQxNDogY2hlY2tpbmcgaWYgaWNjIHN1cHBvcnRzIC1mbm8tcnR0aSAt
Zm5vLWV4Y2VwdGlvbnMKY29uZmlndXJlOjExNDMyOiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50
ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIC1mbm8tcnR0aSAtZm5vLWV4Y2VwdGlvbnMgY29uZnRl
c3QuYyA+JjUKY29uZmlndXJlOjExNDM2OiAkPyA9IDAKY29uZmlndXJlOjExNDQ5OiByZXN1bHQ6
IHllcwpjb25maWd1cmU6MTE0Njk6IGNoZWNraW5nIGZvciBpY2Mgb3B0aW9uIHRvIHByb2R1Y2Ug
UElDCmNvbmZpZ3VyZToxMTcyMDogcmVzdWx0OiAtZlBJQyAtRFBJQwpjb25maWd1cmU6MTE3MzI6
IGNoZWNraW5nIGlmIGljYyBQSUMgZmxhZyAtZlBJQyAtRFBJQyB3b3Jrcwpjb25maWd1cmU6MTE3
NTA6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gLWZQ
SUMgLURQSUMgLURQSUMgY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjExNzU0OiAkPyA9IDAKY29u
ZmlndXJlOjExNzY3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTE3OTE6IGNoZWNraW5nIGlmIGlj
YyBzdGF0aWMgZmxhZyAtc3RhdGljIHdvcmtzCmNvbmZpZ3VyZToxMTgxOTogcmVzdWx0OiB5ZXMK
Y29uZmlndXJlOjExODM0OiBjaGVja2luZyBpZiBpY2Mgc3VwcG9ydHMgLWMgLW8gZmlsZS5vCmNv
bmZpZ3VyZToxMTg1NTogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9p
bmNsdWRlLyAtbyBvdXQvY29uZnRlc3QyLm8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjExODU5
OiAkPyA9IDAKY29uZmlndXJlOjExODgxOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTE4ODk6IGNo
ZWNraW5nIGlmIGljYyBzdXBwb3J0cyAtYyAtbyBmaWxlLm8KY29uZmlndXJlOjExOTM2OiByZXN1
bHQ6IHllcwpjb25maWd1cmU6MTE5Njk6IGNoZWNraW5nIHdoZXRoZXIgdGhlIGljYyBsaW5rZXIg
KC91c3IvYmluL2xkIC1tIGVsZl94ODZfNjQpIHN1cHBvcnRzIHNoYXJlZCBsaWJyYXJpZXMKY29u
ZmlndXJlOjEzMDE5OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTMwNTY6IGNoZWNraW5nIHdoZXRo
ZXIgLWxjIHNob3VsZCBiZSBleHBsaWNpdGx5IGxpbmtlZCBpbgpjb25maWd1cmU6MTMwNjE6IGlj
YyAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3Qu
YyA+JjUKY29uZmlndXJlOjEzMDY0OiAkPyA9IDAKY29uZmlndXJlOjEzMDc5OiBpY2MgLXNoYXJl
ZCBjb25mdGVzdC5vICAtdiAtV2wsLXNvbmFtZSAtV2wsY29uZnRlc3QgLW8gY29uZnRlc3QgMlw+
XCYxIFx8IC91c3IvYmluL2dyZXAgIC1sYyAgXD4vZGV2L251bGwgMlw+XCYxCmNvbmZpZ3VyZTox
MzA4MjogJD8gPSAwCmNvbmZpZ3VyZToxMzA5NDogcmVzdWx0OiBubwpjb25maWd1cmU6MTMyNTg6
IGNoZWNraW5nIGR5bmFtaWMgbGlua2VyIGNoYXJhY3RlcmlzdGljcwpjb25maWd1cmU6MTM2OTY6
IGljYyAtbyBjb25mdGVzdCAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVk
ZS8gLUwvdXNyL2xvY2FsL2xpYjY0IC1XbCwtcnBhdGggLVdsLC9mb28gY29uZnRlc3QuYyAgPiY1
CmNvbmZpZ3VyZToxMzcwMjogJD8gPSAwCmNvbmZpZ3VyZToxMzkzMjogcmVzdWx0OiBHTlUvTGlu
dXggbGQuc28KY29uZmlndXJlOjE0MDM0OiBjaGVja2luZyBob3cgdG8gaGFyZGNvZGUgbGlicmFy
eSBwYXRocyBpbnRvIHByb2dyYW1zCmNvbmZpZ3VyZToxNDA1OTogcmVzdWx0OiBpbW1lZGlhdGUK
Y29uZmlndXJlOjE0ODcyOiBjaGVja2luZyB3aGV0aGVyIHN0cmlwcGluZyBsaWJyYXJpZXMgaXMg
cG9zc2libGUKY29uZmlndXJlOjE0ODc3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTQ5MTI6IGNo
ZWNraW5nIGlmIGxpYnRvb2wgc3VwcG9ydHMgc2hhcmVkIGxpYnJhcmllcwpjb25maWd1cmU6MTQ5
MTQ6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToxNDkxNzogY2hlY2tpbmcgd2hldGhlciB0byBidWls
ZCBzaGFyZWQgbGlicmFyaWVzCmNvbmZpZ3VyZToxNDkzODogcmVzdWx0OiB5ZXMKY29uZmlndXJl
OjE0OTQxOiBjaGVja2luZyB3aGV0aGVyIHRvIGJ1aWxkIHN0YXRpYyBsaWJyYXJpZXMKY29uZmln
dXJlOjE0OTQ1OiByZXN1bHQ6IG5vCmNvbmZpZ3VyZToxNTA5NTogY2hlY2tpbmcgZm9yIGxkIHVz
ZWQgYnkgaWNjCmNvbmZpZ3VyZToxNTE2MjogcmVzdWx0OiAvdXNyL2Jpbi9sZCAtbSBlbGZfeDg2
XzY0CmNvbmZpZ3VyZToxNTE3MTogY2hlY2tpbmcgaWYgdGhlIGxpbmtlciAoL3Vzci9iaW4vbGQg
LW0gZWxmX3g4Nl82NCkgaXMgR05VIGxkCmNvbmZpZ3VyZToxNTE4NjogcmVzdWx0OiB5ZXMKY29u
ZmlndXJlOjE1MjQxOiBjaGVja2luZyB3aGV0aGVyIHRoZSBpY2MgbGlua2VyICgvdXNyL2Jpbi9s
ZCAtbSBlbGZfeDg2XzY0KSBzdXBwb3J0cyBzaGFyZWQgbGlicmFyaWVzCmNvbmZpZ3VyZToxNjIw
MzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjE2MjMxOiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50
ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmNwcCA+JjUKY29uZmlndXJlOjE2MjM0
OiAkPyA9IDAKY29uZmlndXJlOjE2NDE2OiBjaGVja2luZyBmb3IgaWNjIG9wdGlvbiB0byBwcm9k
dWNlIFBJQwpjb25maWd1cmU6MTY3MTc6IHJlc3VsdDogLWZQSUMgLURQSUMKY29uZmlndXJlOjE2
NzI2OiBjaGVja2luZyBpZiBpY2MgUElDIGZsYWcgLWZQSUMgLURQSUMgd29ya3MKY29uZmlndXJl
OjE2NzQ0OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUv
IC1mUElDIC1EUElDIC1EUElDIGNvbmZ0ZXN0LmNwcCA+JjUKY29uZmlndXJlOjE2NzQ4OiAkPyA9
IDAKY29uZmlndXJlOjE2NzYxOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTY3ODI6IGNoZWNraW5n
IGlmIGljYyBzdGF0aWMgZmxhZyAtc3RhdGljIHdvcmtzCmNvbmZpZ3VyZToxNjgxMDogcmVzdWx0
OiB5ZXMKY29uZmlndXJlOjE2ODIyOiBjaGVja2luZyBpZiBpY2Mgc3VwcG9ydHMgLWMgLW8gZmls
ZS5vCmNvbmZpZ3VyZToxNjg0MzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4x
LjAxNS9pbmNsdWRlLyAtbyBvdXQvY29uZnRlc3QyLm8gY29uZnRlc3QuY3BwID4mNQpjb25maWd1
cmU6MTY4NDc6ICQ/ID0gMApjb25maWd1cmU6MTY4Njk6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZTox
Njg3NDogY2hlY2tpbmcgaWYgaWNjIHN1cHBvcnRzIC1jIC1vIGZpbGUubwpjb25maWd1cmU6MTY5
MjE6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToxNjk1MTogY2hlY2tpbmcgd2hldGhlciB0aGUgaWNj
IGxpbmtlciAoL3Vzci9iaW4vbGQgLW0gZWxmX3g4Nl82NCkgc3VwcG9ydHMgc2hhcmVkIGxpYnJh
cmllcwpjb25maWd1cmU6MTY5Nzc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToxNzExNDogY2hlY2tp
bmcgZHluYW1pYyBsaW5rZXIgY2hhcmFjdGVyaXN0aWNzCmNvbmZpZ3VyZToxNzUwMDogaWNjIC1v
IGNvbmZ0ZXN0IC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyAtTC91
c3IvbG9jYWwvbGliNjQgLVdsLC1ycGF0aCAtV2wsL2ZvbyBjb25mdGVzdC5jcHAgID4mNQpjb25m
aWd1cmU6MTc1MDY6ICQ/ID0gMApjb25maWd1cmU6MTc3MzY6IHJlc3VsdDogR05VL0xpbnV4IGxk
LnNvCmNvbmZpZ3VyZToxNzc4NzogY2hlY2tpbmcgaG93IHRvIGhhcmRjb2RlIGxpYnJhcnkgcGF0
aHMgaW50byBwcm9ncmFtcwpjb25maWd1cmU6MTc4MTI6IHJlc3VsdDogaW1tZWRpYXRlCmNvbmZp
Z3VyZToxNzk1MzogY2hlY2tpbmcgaWYgbGlidG9vbCBzdXBwb3J0cyBzaGFyZWQgbGlicmFyaWVz
CmNvbmZpZ3VyZToxNzk1NTogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjE3OTU4OiBjaGVja2luZyB3
aGV0aGVyIHRvIGJ1aWxkIHNoYXJlZCBsaWJyYXJpZXMKY29uZmlndXJlOjE3OTc4OiByZXN1bHQ6
IHllcwpjb25maWd1cmU6MTc5ODE6IGNoZWNraW5nIHdoZXRoZXIgdG8gYnVpbGQgc3RhdGljIGxp
YnJhcmllcwpjb25maWd1cmU6MTc5ODU6IHJlc3VsdDogbm8KY29uZmlndXJlOjE3OTk5OiBjaGVj
a2luZyBmb3IgaWZvcnQgb3B0aW9uIHRvIHByb2R1Y2UgUElDCmNvbmZpZ3VyZToxODI1MDogcmVz
dWx0OiAtS1BJQwpjb25maWd1cmU6MTgyNTk6IGNoZWNraW5nIGlmIGlmb3J0IFBJQyBmbGFnIC1L
UElDIHdvcmtzCmNvbmZpZ3VyZToxODI3NzogaWZvcnQgLWMgLUM5MCAtdzkwIC13OTUgLW1wIC1L
UElDIGNvbmZ0ZXN0LmYgPiY1Cmlmb3J0OiBjb21tYW5kIGxpbmUgd2FybmluZyAjMTAxNTY6IGln
bm9yaW5nIG9wdGlvbiAnLUMnOyBubyBhcmd1bWVudCByZXF1aXJlZAppZm9ydDogY29tbWFuZCBs
aW5lIHJlbWFyayAjMTAxNDg6IG9wdGlvbiAnLUsnIG5vdCBzdXBwb3J0ZWQKY29uZmlndXJlOjE4
MjgxOiAkPyA9IDAKY29uZmlndXJlOjE4Mjk0OiByZXN1bHQ6IG5vCmNvbmZpZ3VyZToxODMxNTog
Y2hlY2tpbmcgaWYgaWZvcnQgc3RhdGljIGZsYWcgLXN0YXRpYyB3b3JrcwppZm9ydDogY29tbWFu
ZCBsaW5lIHdhcm5pbmcgIzEwMTU2OiBpZ25vcmluZyBvcHRpb24gJy1DJzsgbm8gYXJndW1lbnQg
cmVxdWlyZWQKY29uZmlndXJlOjE4MzQzOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MTgzNTU6IGNo
ZWNraW5nIGlmIGlmb3J0IHN1cHBvcnRzIC1jIC1vIGZpbGUubwpjb25maWd1cmU6MTgzNzY6IGlm
b3J0IC1jIC1DOTAgLXc5MCAtdzk1IC1tcCAtbyBvdXQvY29uZnRlc3QyLm8gY29uZnRlc3QuZiA+
JjUKaWZvcnQ6IGNvbW1hbmQgbGluZSB3YXJuaW5nICMxMDE1NjogaWdub3Jpbmcgb3B0aW9uICct
Qyc7IG5vIGFyZ3VtZW50IHJlcXVpcmVkCmNvbmZpZ3VyZToxODM4MDogJD8gPSAwCmNvbmZpZ3Vy
ZToxODQwMjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjE4NDA3OiBjaGVja2luZyBpZiBpZm9ydCBz
dXBwb3J0cyAtYyAtbyBmaWxlLm8KY29uZmlndXJlOjE4NDU0OiByZXN1bHQ6IHllcwpjb25maWd1
cmU6MTg0ODQ6IGNoZWNraW5nIHdoZXRoZXIgdGhlIGlmb3J0IGxpbmtlciAoL3Vzci9iaW4vbGQg
LW0gZWxmX3g4Nl82NCkgc3VwcG9ydHMgc2hhcmVkIGxpYnJhcmllcwpjb25maWd1cmU6MTk1MTQ6
IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToxOTY1MTogY2hlY2tpbmcgZHluYW1pYyBsaW5rZXIgY2hh
cmFjdGVyaXN0aWNzCmNvbmZpZ3VyZToyMDAyNzogaWZvcnQgLW8gY29uZnRlc3QgLUM5MCAtdzkw
IC13OTUgLW1wIC1ML3Vzci9sb2NhbC9saWI2NCAtV2wsLXJwYXRoIC1XbCwvZm9vIGNvbmZ0ZXN0
LmYgID4mNQppZm9ydDogY29tbWFuZCBsaW5lIHdhcm5pbmcgIzEwMTU2OiBpZ25vcmluZyBvcHRp
b24gJy1DJzsgbm8gYXJndW1lbnQgcmVxdWlyZWQKY29uZmlndXJlOjIwMDMzOiAkPyA9IDAKY29u
ZmlndXJlOjIwMjYzOiByZXN1bHQ6IEdOVS9MaW51eCBsZC5zbwpjb25maWd1cmU6MjAzMTQ6IGNo
ZWNraW5nIGhvdyB0byBoYXJkY29kZSBsaWJyYXJ5IHBhdGhzIGludG8gcHJvZ3JhbXMKY29uZmln
dXJlOjIwMzM5OiByZXN1bHQ6IGltbWVkaWF0ZQpjb25maWd1cmU6MjA2NDA6IGNoZWNraW5nIGZv
ciBjb3MgaW4gLWxtCmNvbmZpZ3VyZToyMDY3NTogaWNjIC1vIGNvbmZ0ZXN0IC1PMyAtbXAgLUkv
b3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyAtTC91c3IvbG9jYWwvbGliNjQgY29uZnRl
c3QuYyAtbG0gICA+JjUKY29uZnRlc3QuYyg0MSkgKGNvbC4gOCk6IHdhcm5pbmcgIzk4MDogd3Jv
bmcgbnVtYmVyIG9mIGFjdHVhbCBhcmd1bWVudHMgdG8gaW50cmluc2ljIGZ1bmN0aW9uICI8aWwx
X0lOVFJJTl9DT1Nfbm9pbmxpbmU+IgoKY29uZmlndXJlOjIwNjgxOiAkPyA9IDAKY29uZmlndXJl
OjIwNjk5OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjA3MTQ6IGNoZWNraW5nIGZvciBzaW4gaW4g
LWxtCmNvbmZpZ3VyZToyMDc0OTogaWNjIC1vIGNvbmZ0ZXN0IC1PMyAtbXAgLUkvb3B0L2ludGVs
L2NjZS8xMC4xLjAxNS9pbmNsdWRlLyAtTC91c3IvbG9jYWwvbGliNjQgY29uZnRlc3QuYyAtbG0g
ICA+JjUKY29uZnRlc3QuYyg0MSkgKGNvbC4gOCk6IHdhcm5pbmcgIzk4MDogd3JvbmcgbnVtYmVy
IG9mIGFjdHVhbCBhcmd1bWVudHMgdG8gaW50cmluc2ljIGZ1bmN0aW9uICI8aWwxX0lOVFJJTl9T
SU5fbm9pbmxpbmU+IgoKY29uZmlndXJlOjIwNzU1OiAkPyA9IDAKY29uZmlndXJlOjIwNzczOiBy
ZXN1bHQ6IHllcwpjb25maWd1cmU6MjA5NTI6IGNoZWNraW5nIGZvciBkbG9wZW4gaW4gLWxkbApj
b25maWd1cmU6MjA5ODc6IGljYyAtbyBjb25mdGVzdCAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2Uv
MTAuMS4wMTUvaW5jbHVkZS8gLUwvdXNyL2xvY2FsL2xpYjY0IGNvbmZ0ZXN0LmMgLWxkbCAgLWxt
ICA+JjUKY29uZmlndXJlOjIwOTkzOiAkPyA9IDAKY29uZmlndXJlOjIxMDExOiByZXN1bHQ6IHll
cwpjb25maWd1cmU6MjEwNDM6IGNoZWNraW5nIHJlYWRsaW5lL2hpc3RvcnkuaCB1c2FiaWxpdHkK
Y29uZmlndXJlOjIxMDYwOiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1
L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToyMTA2NjogJD8gPSAwCmNvbmZpZ3Vy
ZToyMTA4MDogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIxMDg0OiBjaGVja2luZyByZWFkbGluZS9o
aXN0b3J5LmggcHJlc2VuY2UKY29uZmlndXJlOjIxMDk5OiAvbGliL2NwcCAtSS9vcHQvaW50ZWwv
Y2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJlOjIxMTA1OiAkPyA9IDAK
Y29uZmlndXJlOjIxMTE5OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjExNTI6IGNoZWNraW5nIGZv
ciByZWFkbGluZS9oaXN0b3J5LmgKY29uZmlndXJlOjIxMTYwOiByZXN1bHQ6IHllcwpjb25maWd1
cmU6MjEwNDM6IGNoZWNraW5nIHJlYWRsaW5lL3JlYWRsaW5lLmggdXNhYmlsaXR5CmNvbmZpZ3Vy
ZToyMTA2MDogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRl
LyBjb25mdGVzdC5jID4mNQpjb25maWd1cmU6MjEwNjY6ICQ/ID0gMApjb25maWd1cmU6MjEwODA6
IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMTA4NDogY2hlY2tpbmcgcmVhZGxpbmUvcmVhZGxpbmUu
aCBwcmVzZW5jZQpjb25maWd1cmU6MjEwOTk6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAu
MS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6MjExMDU6ICQ/ID0gMApjb25maWd1
cmU6MjExMTk6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMTE1MjogY2hlY2tpbmcgZm9yIHJlYWRs
aW5lL3JlYWRsaW5lLmgKY29uZmlndXJlOjIxMTYwOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjEx
Nzg6IGNoZWNraW5nIGZvciBybF9jYWxsYmFja19yZWFkX2NoYXIgaW4gLWxyZWFkbGluZQpjb25m
aWd1cmU6MjEyMTM6IGljYyAtbyBjb25mdGVzdCAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAu
MS4wMTUvaW5jbHVkZS8gLUwvdXNyL2xvY2FsL2xpYjY0IGNvbmZ0ZXN0LmMgLWxyZWFkbGluZSAg
ID4mNQpjb25maWd1cmU6MjEyMTk6ICQ/ID0gMApjb25maWd1cmU6MjEyMzc6IHJlc3VsdDogeWVz
CmNvbmZpZ3VyZToyMTUyNzogY2hlY2tpbmcgZm9yIGhpc3RvcnlfdHJ1bmNhdGVfZmlsZQpjb25m
aWd1cmU6MjE1ODM6IGljYyAtbyBjb25mdGVzdCAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAu
MS4wMTUvaW5jbHVkZS8gLUwvdXNyL2xvY2FsL2xpYjY0IGNvbmZ0ZXN0LmMgLWxyZWFkbGluZSAg
PiY1Ci91c3IvaW5jbHVkZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxk
IG5vdCBvcGVuIHNvdXJjZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRz
Lmg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9y
IGNvbmZ0ZXN0LmMgKGNvZGUgNCkKY29uZmlndXJlOjIxNTg5OiAkPyA9IDQKY29uZmlndXJlOiBm
YWlsZWQgcHJvZ3JhbSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdF
X05BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdF
X1ZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2Rl
ZmluZSBQQUNLQUdFX0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQ
QUNLQUdFICJSIgp8ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JN
ICJ4ODZfNjQtdW5rbm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNk
ZWZpbmUgUl9WRU5ET1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2Rl
ZmluZSBVbml4IDEKfCAjZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZ
X0FUVFJJQlVURSAxCnwgI2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURF
UlMgMQp8ICNkZWZpbmUgSEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFU
X0ggMQp8ICNkZWZpbmUgSEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEK
fCAjZGVmaW5lIEhBVkVfTUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNk
ZWZpbmUgSEFWRV9JTlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZp
bmUgSEFWRV9VTklTVERfSCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRf
T0JKRElSICIubGlicy8iCnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJE
TCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JF
QURMSU5FX1JFQURMSU5FX0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgLyogZW5k
IGNvbmZkZWZzLmguICAqLwp8IC8qIERlZmluZSBoaXN0b3J5X3RydW5jYXRlX2ZpbGUgdG8gYW4g
aW5ub2N1b3VzIHZhcmlhbnQsIGluIGNhc2UgPGxpbWl0cy5oPiBkZWNsYXJlcyBoaXN0b3J5X3Ry
dW5jYXRlX2ZpbGUuCnwgICAgRm9yIGV4YW1wbGUsIEhQLVVYIDExaSA8bGltaXRzLmg+IGRlY2xh
cmVzIGdldHRpbWVvZmRheS4gICovCnwgI2RlZmluZSBoaXN0b3J5X3RydW5jYXRlX2ZpbGUgaW5u
b2N1b3VzX2hpc3RvcnlfdHJ1bmNhdGVfZmlsZQp8IAp8IC8qIFN5c3RlbSBoZWFkZXIgdG8gZGVm
aW5lIF9fc3R1YiBtYWNyb3MgYW5kIGhvcGVmdWxseSBmZXcgcHJvdG90eXBlcywKfCAgICAgd2hp
Y2ggY2FuIGNvbmZsaWN0IHdpdGggY2hhciBoaXN0b3J5X3RydW5jYXRlX2ZpbGUgKCk7IGJlbG93
Lgp8ICAgICBQcmVmZXIgPGxpbWl0cy5oPiB0byA8YXNzZXJ0Lmg+IGlmIF9fU1REQ19fIGlzIGRl
ZmluZWQsIHNpbmNlCnwgICAgIDxsaW1pdHMuaD4gZXhpc3RzIGV2ZW4gb24gZnJlZXN0YW5kaW5n
IGNvbXBpbGVycy4gICovCnwgCnwgI2lmZGVmIF9fU1REQ19fCnwgIyBpbmNsdWRlIDxsaW1pdHMu
aD4KfCAjZWxzZQp8ICMgaW5jbHVkZSA8YXNzZXJ0Lmg+CnwgI2VuZGlmCnwgCnwgI3VuZGVmIGhp
c3RvcnlfdHJ1bmNhdGVfZmlsZQp8IAp8IC8qIE92ZXJyaWRlIGFueSBHQ0MgaW50ZXJuYWwgcHJv
dG90eXBlIHRvIGF2b2lkIGFuIGVycm9yLgp8ICAgIFVzZSBjaGFyIGJlY2F1c2UgaW50IG1pZ2h0
IG1hdGNoIHRoZSByZXR1cm4gdHlwZSBvZiBhIEdDQwp8ICAgIGJ1aWx0aW4gYW5kIHRoZW4gaXRz
IGFyZ3VtZW50IHByb3RvdHlwZSB3b3VsZCBzdGlsbCBhcHBseS4gICovCnwgI2lmZGVmIF9fY3Bs
dXNwbHVzCnwgZXh0ZXJuICJDIgp8ICNlbmRpZgp8IGNoYXIgaGlzdG9yeV90cnVuY2F0ZV9maWxl
ICgpOwp8IC8qIFRoZSBHTlUgQyBsaWJyYXJ5IGRlZmluZXMgdGhpcyBmb3IgZnVuY3Rpb25zIHdo
aWNoIGl0IGltcGxlbWVudHMKfCAgICAgdG8gYWx3YXlzIGZhaWwgd2l0aCBFTk9TWVMuICBTb21l
IGZ1bmN0aW9ucyBhcmUgYWN0dWFsbHkgbmFtZWQKfCAgICAgc29tZXRoaW5nIHN0YXJ0aW5nIHdp
dGggX18gYW5kIHRoZSBub3JtYWwgbmFtZSBpcyBhbiBhbGlhcy4gICovCnwgI2lmIGRlZmluZWQg
X19zdHViX2hpc3RvcnlfdHJ1bmNhdGVfZmlsZSB8fCBkZWZpbmVkIF9fc3R1Yl9fX2hpc3Rvcnlf
dHJ1bmNhdGVfZmlsZQp8IGNob2tlIG1lCnwgI2VuZGlmCnwgCnwgaW50CnwgbWFpbiAoKQp8IHsK
fCByZXR1cm4gaGlzdG9yeV90cnVuY2F0ZV9maWxlICgpOwp8ICAgOwp8ICAgcmV0dXJuIDA7Cnwg
fQpjb25maWd1cmU6MjE2MDc6IHJlc3VsdDogbm8KY29uZmlndXJlOjIxNjI4OiBjaGVja2luZyB3
aGV0aGVyIHJsX2NvbXBsZXRpb25fbWF0Y2hlcyBleGlzdHMgYW5kIGlzIGRlY2xhcmVkCmNvbmZp
Z3VyZToyMTY2MDogaWNjIC1vIGNvbmZ0ZXN0IC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4x
LjAxNS9pbmNsdWRlLyAtTC91c3IvbG9jYWwvbGliNjQgY29uZnRlc3QuYyAtbGRsIC1sbSAgPiY1
CmNvbmZpZ3VyZToyMTY2NjogJD8gPSAwCmNvbmZpZ3VyZToyMTY4NDogcmVzdWx0OiB5ZXMKY29u
ZmlndXJlOjIxNzAwOiBjaGVja2luZyBmb3IgQU5TSSBDIGhlYWRlciBmaWxlcwpjb25maWd1cmU6
MjE4NjQ6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMTg3NDogY2hlY2tpbmcgd2hldGhlciB0aW1l
LmggYW5kIHN5cy90aW1lLmggbWF5IGJvdGggYmUgaW5jbHVkZWQKY29uZmlndXJlOjIxOTA0OiBp
Y2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0
LmMgPiY1CmNvbmZ0ZXN0LmMoNDQpOiB3YXJuaW5nICMyNzk6IGNvbnRyb2xsaW5nIGV4cHJlc3Np
b24gaXMgY29uc3RhbnQKICBpZiAoKHN0cnVjdCB0bSAqKSAwKQogICAgICBeCgpjb25maWd1cmU6
MjE5MTA6ICQ/ID0gMApjb25maWd1cmU6MjE5MjU6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMTk0
MzogY2hlY2tpbmcgZm9yIGRpcmVudC5oIHRoYXQgZGVmaW5lcyBESVIKY29uZmlndXJlOjIxOTcy
OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0
ZXN0LmMgPiY1CmNvbmZ0ZXN0LmMoNDQpOiB3YXJuaW5nICMyNzk6IGNvbnRyb2xsaW5nIGV4cHJl
c3Npb24gaXMgY29uc3RhbnQKICBpZiAoKERJUiAqKSAwKQogICAgICBeCgpjb25maWd1cmU6MjE5
Nzg6ICQ/ID0gMApjb25maWd1cmU6MjE5OTQ6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjAwNzog
Y2hlY2tpbmcgZm9yIGxpYnJhcnkgY29udGFpbmluZyBvcGVuZGlyCmNvbmZpZ3VyZToyMjA0ODog
aWNjIC1vIGNvbmZ0ZXN0IC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRl
LyAtTC91c3IvbG9jYWwvbGliNjQgY29uZnRlc3QuYyAtbGRsIC1sbSAgPiY1CmNvbmZ0ZXN0LmMo
NTApIChjb2wuIDgpOiB3YXJuaW5nICM5ODA6IHdyb25nIG51bWJlciBvZiBhY3R1YWwgYXJndW1l
bnRzIHRvIGludHJpbnNpYyBmdW5jdGlvbiAib3BlbmRpciIKCmNvbmZpZ3VyZToyMjA1NDogJD8g
PSAwCmNvbmZpZ3VyZToyMjA4MjogcmVzdWx0OiBub25lIHJlcXVpcmVkCmNvbmZpZ3VyZToyMjE3
NjogY2hlY2tpbmcgZm9yIHN5cy93YWl0LmggdGhhdCBpcyBQT1NJWC4xIGNvbXBhdGlibGUKY29u
ZmlndXJlOjIyMjEyOiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2lu
Y2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToyMjIxODogJD8gPSAwCmNvbmZpZ3VyZToy
MjIzMzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBhcnBhL2luZXQuaCB1
c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2Nl
LzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVkZS9saW1pdHMuaCgx
MjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJjZSBmaWxlICJsaW1p
dHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNvZGUgNCkKY29uZmln
dXJlOjIyMzEzOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3YXM6CnwgLyogY29u
ZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdF
X1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUg
UEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JVR1JFUE9SVCAici1i
dWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNkZWZpbmUgVkVSU0lP
TiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93bi1saW51eC1nbnUi
CnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1IgInVua25vd24iCnwg
I2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAjZGVmaW5lIFJfQVJD
SCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwgI2RlZmluZSBfR05V
X1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgSEFWRV9TWVNfVFlQ
RVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERMSUJf
SCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVfTUVNT1JZX0ggMQp8
ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRUWVBFU19IIDEKfCAj
ZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwgI2RlZmlu
ZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8iCnwgI2RlZmluZSBI
QVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5F
X0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5FX0ggMQp8ICNkZWZp
bmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBMRVRJT05fTUFUQ0hF
UyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9XSVRIX1NZU19USU1F
IDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfV0FJVF9IIDEK
fCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPHN0ZGlvLmg+CnwgI2lmZGVmIEhB
VkVfU1lTX1RZUEVTX0gKfCAjIGluY2x1ZGUgPHN5cy90eXBlcy5oPgp8ICNlbmRpZgp8ICNpZmRl
ZiBIQVZFX1NZU19TVEFUX0gKfCAjIGluY2x1ZGUgPHN5cy9zdGF0Lmg+CnwgI2VuZGlmCnwgI2lm
ZGVmIFNURENfSEVBREVSUwp8ICMgaW5jbHVkZSA8c3RkbGliLmg+CnwgIyBpbmNsdWRlIDxzdGRk
ZWYuaD4KfCAjZWxzZQp8ICMgaWZkZWYgSEFWRV9TVERMSUJfSAp8ICMgIGluY2x1ZGUgPHN0ZGxp
Yi5oPgp8ICMgZW5kaWYKfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdfSAp8ICMgaWYgIWRl
ZmluZWQgU1REQ19IRUFERVJTICYmIGRlZmluZWQgSEFWRV9NRU1PUllfSAp8ICMgIGluY2x1ZGUg
PG1lbW9yeS5oPgp8ICMgZW5kaWYKfCAjIGluY2x1ZGUgPHN0cmluZy5oPgp8ICNlbmRpZgp8ICNp
ZmRlZiBIQVZFX1NUUklOR1NfSAp8ICMgaW5jbHVkZSA8c3RyaW5ncy5oPgp8ICNlbmRpZgp8ICNp
ZmRlZiBIQVZFX0lOVFRZUEVTX0gKfCAjIGluY2x1ZGUgPGludHR5cGVzLmg+CnwgI2VuZGlmCnwg
I2lmZGVmIEhBVkVfU1RESU5UX0gKfCAjIGluY2x1ZGUgPHN0ZGludC5oPgp8ICNlbmRpZgp8ICNp
ZmRlZiBIQVZFX1VOSVNURF9ICnwgIyBpbmNsdWRlIDx1bmlzdGQuaD4KfCAjZW5kaWYKfCAjaW5j
bHVkZSA8YXJwYS9pbmV0Lmg+CmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiBubwpjb25maWd1cmU6
MjIzMzE6IGNoZWNraW5nIGFycGEvaW5ldC5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjM0NjogL2xp
Yi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jCmNvbmZp
Z3VyZToyMjM1MjogJD8gPSAwCmNvbmZpZ3VyZToyMjM2NjogcmVzdWx0OiB5ZXMKY29uZmlndXJl
OjIyMzc5OiBXQVJOSU5HOiBhcnBhL2luZXQuaDogcHJlc2VudCBidXQgY2Fubm90IGJlIGNvbXBp
bGVkCmNvbmZpZ3VyZToyMjM4MTogV0FSTklORzogYXJwYS9pbmV0Lmg6ICAgICBjaGVjayBmb3Ig
bWlzc2luZyBwcmVyZXF1aXNpdGUgaGVhZGVycz8KY29uZmlndXJlOjIyMzgzOiBXQVJOSU5HOiBh
cnBhL2luZXQuaDogc2VlIHRoZSBBdXRvY29uZiBkb2N1bWVudGF0aW9uCmNvbmZpZ3VyZToyMjM4
NTogV0FSTklORzogYXJwYS9pbmV0Lmg6ICAgICBzZWN0aW9uICJQcmVzZW50IEJ1dCBDYW5ub3Qg
QmUgQ29tcGlsZWQiCmNvbmZpZ3VyZToyMjM4NzogV0FSTklORzogYXJwYS9pbmV0Lmg6IHByb2Nl
ZWRpbmcgd2l0aCB0aGUgcHJlcHJvY2Vzc29yJ3MgcmVzdWx0CmNvbmZpZ3VyZToyMjM4OTogV0FS
TklORzogYXJwYS9pbmV0Lmg6IGluIHRoZSBmdXR1cmUsIHRoZSBjb21waWxlciB3aWxsIHRha2Ug
cHJlY2VkZW5jZQpjb25maWd1cmU6MjIzOTk6IGNoZWNraW5nIGZvciBhcnBhL2luZXQuaApjb25m
aWd1cmU6MjI0MDc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjI5MDogY2hlY2tpbmcgZGwuaCB1
c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2Nl
LzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZ0ZXN0LmMoNzQpOiBjYXRhc3Ry
b3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJjZSBmaWxlICJkbC5oIgogICNpbmNsdWRl
IDxkbC5oPgogICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0
ZXN0LmMgKGNvZGUgNCkKY29uZmlndXJlOjIyMzEzOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQg
cHJvZ3JhbSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUg
IlIiCnwgI2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJ
T04gIjIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQ
QUNLQUdFX0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdF
ICJSIgp8ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZf
NjQtdW5rbm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUg
Ul9WRU5ET1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBV
bml4IDEKfCAjZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJ
QlVURSAxCnwgI2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8
ICNkZWZpbmUgSEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8
ICNkZWZpbmUgSEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVm
aW5lIEhBVkVfTUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUg
SEFWRV9JTlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFW
RV9VTklTVERfSCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElS
ICIubGlicy8iCnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwg
I2RlZmluZSBIQVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5F
X1JFQURMSU5FX0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZF
X1JMX0NPTVBMRVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZp
bmUgVElNRV9XSVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZp
bmUgSEFWRV9TWVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8IC8qIGVu
ZCBjb25mZGVmcy5oLiAgKi8KfCAjaW5jbHVkZSA8c3RkaW8uaD4KfCAjaWZkZWYgSEFWRV9TWVNf
VFlQRVNfSAp8ICMgaW5jbHVkZSA8c3lzL3R5cGVzLmg+CnwgI2VuZGlmCnwgI2lmZGVmIEhBVkVf
U1lTX1NUQVRfSAp8ICMgaW5jbHVkZSA8c3lzL3N0YXQuaD4KfCAjZW5kaWYKfCAjaWZkZWYgU1RE
Q19IRUFERVJTCnwgIyBpbmNsdWRlIDxzdGRsaWIuaD4KfCAjIGluY2x1ZGUgPHN0ZGRlZi5oPgp8
ICNlbHNlCnwgIyBpZmRlZiBIQVZFX1NURExJQl9ICnwgIyAgaW5jbHVkZSA8c3RkbGliLmg+Cnwg
IyBlbmRpZgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NUUklOR19ICnwgIyBpZiAhZGVmaW5lZCBT
VERDX0hFQURFUlMgJiYgZGVmaW5lZCBIQVZFX01FTU9SWV9ICnwgIyAgaW5jbHVkZSA8bWVtb3J5
Lmg+CnwgIyBlbmRpZgp8ICMgaW5jbHVkZSA8c3RyaW5nLmg+CnwgI2VuZGlmCnwgI2lmZGVmIEhB
VkVfU1RSSU5HU19ICnwgIyBpbmNsdWRlIDxzdHJpbmdzLmg+CnwgI2VuZGlmCnwgI2lmZGVmIEhB
VkVfSU5UVFlQRVNfSAp8ICMgaW5jbHVkZSA8aW50dHlwZXMuaD4KfCAjZW5kaWYKfCAjaWZkZWYg
SEFWRV9TVERJTlRfSAp8ICMgaW5jbHVkZSA8c3RkaW50Lmg+CnwgI2VuZGlmCnwgI2lmZGVmIEhB
VkVfVU5JU1REX0gKfCAjIGluY2x1ZGUgPHVuaXN0ZC5oPgp8ICNlbmRpZgp8ICNpbmNsdWRlIDxk
bC5oPgpjb25maWd1cmU6MjIzMjc6IHJlc3VsdDogbm8KY29uZmlndXJlOjIyMzMxOiBjaGVja2lu
ZyBkbC5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjM0NjogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2Nj
ZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jCmNvbmZ0ZXN0LmM6NDE6MTY6IGVycm9yOiBk
bC5oOiBObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5CmNvbmZpZ3VyZToyMjM1MjogJD8gPSAxCmNv
bmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8qIGNvbmZkZWZzLmguICAqLwp8ICNkZWZp
bmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9UQVJOQU1FICJSIgp8ICNkZWZp
bmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfU1RSSU5HICJSIDIu
Ny4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQgInItYnVnc0BSLXByb2plY3Qub3JnIgp8
ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUg
Ul9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgtZ251Igp8ICNkZWZpbmUgUl9DUFUgIng4
Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3duIgp8ICNkZWZpbmUgUl9PUyAibGludXgt
Z251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBSX0FSQ0ggIiIKfCAjZGVmaW5lIEhBVkVf
VklTSUJJTElUWV9BVFRSSUJVVEUgMQp8ICNkZWZpbmUgX0dOVV9TT1VSQ0UgMQp8ICNkZWZpbmUg
U1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RZUEVTX0ggMQp8ICNkZWZpbmUgSEFW
RV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RETElCX0ggMQp8ICNkZWZpbmUgSEFWRV9T
VFJJTkdfSCAxCnwgI2RlZmluZSBIQVZFX01FTU9SWV9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5H
U19IIDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NURElOVF9I
IDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZDTl9IIDEKfCAj
ZGVmaW5lIExUX09CSkRJUiAiLmxpYnMvIgp8ICNkZWZpbmUgSEFWRV9MSUJNIDEKfCAjZGVmaW5l
IEhBVkVfTElCREwgMQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9ISVNUT1JZX0ggMQp8ICNkZWZp
bmUgSEFWRV9SRUFETElORV9SRUFETElORV9IIDEKfCAjZGVmaW5lIEhBVkVfTElCUkVBRExJTkUg
MQp8ICNkZWZpbmUgSEFWRV9STF9DT01QTEVUSU9OX01BVENIRVMgMQp8ICNkZWZpbmUgU1REQ19I
RUFERVJTIDEKfCAjZGVmaW5lIFRJTUVfV0lUSF9TWVNfVElNRSAxCnwgI2RlZmluZSBIQVZFX0RJ
UkVOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1dBSVRfSCAxCnwgI2RlZmluZSBIQVZFX0FSUEFf
SU5FVF9IIDEKfCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPGRsLmg+CmNvbmZp
Z3VyZToyMjM2NjogcmVzdWx0OiBubwpjb25maWd1cmU6MjIzOTk6IGNoZWNraW5nIGZvciBkbC5o
CmNvbmZpZ3VyZToyMjQwNzogcmVzdWx0OiBubwpjb25maWd1cmU6MjIyODA6IGNoZWNraW5nIGZv
ciBkbGZjbi5oCmNvbmZpZ3VyZToyMjI4NjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMjkwOiBj
aGVja2luZyBlbGYuaCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAt
SS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3Vy
ZToyMjMxMzogJD8gPSAwCmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIy
MzMxOiBjaGVja2luZyBlbGYuaCBwcmVzZW5jZQpjb25maWd1cmU6MjIzNDY6IC9saWIvY3BwIC1J
L29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6MjIz
NTI6ICQ/ID0gMApjb25maWd1cmU6MjIzNjY6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjM5OTog
Y2hlY2tpbmcgZm9yIGVsZi5oCmNvbmZpZ3VyZToyMjQwNzogcmVzdWx0OiB5ZXMKY29uZmlndXJl
OjIyMjkwOiBjaGVja2luZyBmY250bC5oIHVzYWJpbGl0eQpjb25maWd1cmU6MjIzMDc6IGljYyAt
YyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+
JjUKY29uZmlndXJlOjIyMzEzOiAkPyA9IDAKY29uZmlndXJlOjIyMzI3OiByZXN1bHQ6IHllcwpj
b25maWd1cmU6MjIzMzE6IGNoZWNraW5nIGZjbnRsLmggcHJlc2VuY2UKY29uZmlndXJlOjIyMzQ2
OiAvbGliL2NwcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMK
Y29uZmlndXJlOjIyMzUyOiAkPyA9IDAKY29uZmlndXJlOjIyMzY2OiByZXN1bHQ6IHllcwpjb25m
aWd1cmU6MjIzOTk6IGNoZWNraW5nIGZvciBmY250bC5oCmNvbmZpZ3VyZToyMjQwNzogcmVzdWx0
OiB5ZXMKY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBmbG9hdGluZ3BvaW50LmggdXNhYmlsaXR5
CmNvbmZpZ3VyZToyMjMwNzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAx
NS9pbmNsdWRlLyBjb25mdGVzdC5jID4mNQpjb25mdGVzdC5jKDc3KTogY2F0YXN0cm9waGljIGVy
cm9yOiBjb3VsZCBub3Qgb3BlbiBzb3VyY2UgZmlsZSAiZmxvYXRpbmdwb2ludC5oIgogICNpbmNs
dWRlIDxmbG9hdGluZ3BvaW50Lmg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBeCgpjb21w
aWxhdGlvbiBhYm9ydGVkIGZvciBjb25mdGVzdC5jIChjb2RlIDQpCmNvbmZpZ3VyZToyMjMxMzog
JD8gPSA0CmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8qIGNvbmZkZWZzLmguICAq
Lwp8ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9UQVJOQU1FICJS
Igp8ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfU1RS
SU5HICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQgInItYnVnc0BSLXByb2pl
Y3Qub3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJT04gIjIuNy4xIgp8
ICNkZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgtZ251Igp8ICNkZWZpbmUg
Ul9DUFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3duIgp8ICNkZWZpbmUgUl9P
UyAibGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBSX0FSQ0ggIiIKfCAjZGVm
aW5lIEhBVkVfVklTSUJJTElUWV9BVFRSSUJVVEUgMQp8ICNkZWZpbmUgX0dOVV9TT1VSQ0UgMQp8
ICNkZWZpbmUgU1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RZUEVTX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RETElCX0ggMQp8ICNkZWZp
bmUgSEFWRV9TVFJJTkdfSCAxCnwgI2RlZmluZSBIQVZFX01FTU9SWV9IIDEKfCAjZGVmaW5lIEhB
VkVfU1RSSU5HU19IIDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZF
X1NURElOVF9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZD
Tl9IIDEKfCAjZGVmaW5lIExUX09CSkRJUiAiLmxpYnMvIgp8ICNkZWZpbmUgSEFWRV9MSUJNIDEK
fCAjZGVmaW5lIEhBVkVfTElCREwgMQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9ISVNUT1JZX0gg
MQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9SRUFETElORV9IIDEKfCAjZGVmaW5lIEhBVkVfTElC
UkVBRExJTkUgMQp8ICNkZWZpbmUgSEFWRV9STF9DT01QTEVUSU9OX01BVENIRVMgMQp8ICNkZWZp
bmUgU1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIFRJTUVfV0lUSF9TWVNfVElNRSAxCnwgI2RlZmlu
ZSBIQVZFX0RJUkVOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1dBSVRfSCAxCnwgI2RlZmluZSBI
QVZFX0FSUEFfSU5FVF9IIDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBIQVZF
X0VMRl9IIDEKfCAjZGVmaW5lIEhBVkVfRkNOVExfSCAxCnwgLyogZW5kIGNvbmZkZWZzLmguICAq
Lwp8ICNpbmNsdWRlIDxzdGRpby5oPgp8ICNpZmRlZiBIQVZFX1NZU19UWVBFU19ICnwgIyBpbmNs
dWRlIDxzeXMvdHlwZXMuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TWVNfU1RBVF9ICnwgIyBp
bmNsdWRlIDxzeXMvc3RhdC5oPgp8ICNlbmRpZgp8ICNpZmRlZiBTVERDX0hFQURFUlMKfCAjIGlu
Y2x1ZGUgPHN0ZGxpYi5oPgp8ICMgaW5jbHVkZSA8c3RkZGVmLmg+CnwgI2Vsc2UKfCAjIGlmZGVm
IEhBVkVfU1RETElCX0gKfCAjICBpbmNsdWRlIDxzdGRsaWIuaD4KfCAjIGVuZGlmCnwgI2VuZGlm
CnwgI2lmZGVmIEhBVkVfU1RSSU5HX0gKfCAjIGlmICFkZWZpbmVkIFNURENfSEVBREVSUyAmJiBk
ZWZpbmVkIEhBVkVfTUVNT1JZX0gKfCAjICBpbmNsdWRlIDxtZW1vcnkuaD4KfCAjIGVuZGlmCnwg
IyBpbmNsdWRlIDxzdHJpbmcuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdTX0gKfCAj
IGluY2x1ZGUgPHN0cmluZ3MuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9JTlRUWVBFU19ICnwg
IyBpbmNsdWRlIDxpbnR0eXBlcy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NURElOVF9ICnwg
IyBpbmNsdWRlIDxzdGRpbnQuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9VTklTVERfSAp8ICMg
aW5jbHVkZSA8dW5pc3RkLmg+CnwgI2VuZGlmCnwgI2luY2x1ZGUgPGZsb2F0aW5ncG9pbnQuaD4K
Y29uZmlndXJlOjIyMzI3OiByZXN1bHQ6IG5vCmNvbmZpZ3VyZToyMjMzMTogY2hlY2tpbmcgZmxv
YXRpbmdwb2ludC5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjM0NjogL2xpYi9jcHAgLUkvb3B0L2lu
dGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jCmNvbmZ0ZXN0LmM6NDQ6Mjc6IGVy
cm9yOiBmbG9hdGluZ3BvaW50Lmg6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkKY29uZmlndXJl
OjIyMzUyOiAkPyA9IDEKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3YXM6CnwgLyogY29uZmRl
ZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1RB
Uk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUEFD
S0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JVR1JFUE9SVCAici1idWdz
QFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNkZWZpbmUgVkVSU0lPTiAi
Mi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93bi1saW51eC1nbnUiCnwg
I2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1IgInVua25vd24iCnwgI2Rl
ZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAjZGVmaW5lIFJfQVJDSCAi
Igp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwgI2RlZmluZSBfR05VX1NP
VVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgSEFWRV9TWVNfVFlQRVNf
SCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERMSUJfSCAx
CnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVfTUVNT1JZX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRUWVBFU19IIDEKfCAjZGVm
aW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwgI2RlZmluZSBI
QVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8iCnwgI2RlZmluZSBIQVZF
X0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX0hJ
U1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5FX0ggMQp8ICNkZWZpbmUg
SEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBMRVRJT05fTUFUQ0hFUyAx
CnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9XSVRIX1NZU19USU1FIDEK
fCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfV0FJVF9IIDEKfCAj
ZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZDTl9IIDEKfCAjZGVm
aW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEKfCAvKiBlbmQgY29uZmRl
ZnMuaC4gICovCnwgI2luY2x1ZGUgPGZsb2F0aW5ncG9pbnQuaD4KY29uZmlndXJlOjIyMzY2OiBy
ZXN1bHQ6IG5vCmNvbmZpZ3VyZToyMjM5OTogY2hlY2tpbmcgZm9yIGZsb2F0aW5ncG9pbnQuaApj
b25maWd1cmU6MjI0MDc6IHJlc3VsdDogbm8KY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBmcHVf
Y29udHJvbC5oIHVzYWJpbGl0eQpjb25maWd1cmU6MjIzMDc6IGljYyAtYyAtTzMgLW1wIC1JL29w
dC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjIy
MzEzOiAkPyA9IDAKY29uZmlndXJlOjIyMzI3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIzMzE6
IGNoZWNraW5nIGZwdV9jb250cm9sLmggcHJlc2VuY2UKY29uZmlndXJlOjIyMzQ2OiAvbGliL2Nw
cCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJl
OjIyMzUyOiAkPyA9IDAKY29uZmlndXJlOjIyMzY2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIz
OTk6IGNoZWNraW5nIGZvciBmcHVfY29udHJvbC5oCmNvbmZpZ3VyZToyMjQwNzogcmVzdWx0OiB5
ZXMKY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBnbG9iLmggdXNhYmlsaXR5CmNvbmZpZ3VyZToy
MjMwNzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBj
b25mdGVzdC5jID4mNQpjb25maWd1cmU6MjIzMTM6ICQ/ID0gMApjb25maWd1cmU6MjIzMjc6IHJl
c3VsdDogeWVzCmNvbmZpZ3VyZToyMjMzMTogY2hlY2tpbmcgZ2xvYi5oIHByZXNlbmNlCmNvbmZp
Z3VyZToyMjM0NjogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBj
b25mdGVzdC5jCmNvbmZpZ3VyZToyMjM1MjogJD8gPSAwCmNvbmZpZ3VyZToyMjM2NjogcmVzdWx0
OiB5ZXMKY29uZmlndXJlOjIyMzk5OiBjaGVja2luZyBmb3IgZ2xvYi5oCmNvbmZpZ3VyZToyMjQw
NzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBncnAuaCB1c2FiaWxpdHkK
Y29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1
L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToyMjMxMzogJD8gPSAwCmNvbmZpZ3Vy
ZToyMjMyNzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMzMxOiBjaGVja2luZyBncnAuaCBwcmVz
ZW5jZQpjb25maWd1cmU6MjIzNDY6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUv
aW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6MjIzNTI6ICQ/ID0gMApjb25maWd1cmU6MjIz
NjY6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjM5OTogY2hlY2tpbmcgZm9yIGdycC5oCmNvbmZp
Z3VyZToyMjQwNzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBsaW1pdHMu
aCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwv
Y2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVkZS9saW1pdHMu
aCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJjZSBmaWxlICJs
aW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNvZGUgNCkKY29u
ZmlndXJlOjIyMzEzOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3YXM6CnwgLyog
Y29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2RlZmluZSBQQUNL
QUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4xIgp8ICNkZWZp
bmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JVR1JFUE9SVCAi
ci1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNkZWZpbmUgVkVS
U0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93bi1saW51eC1n
bnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1IgInVua25vd24i
CnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAjZGVmaW5lIFJf
QVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwgI2RlZmluZSBf
R05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgSEFWRV9TWVNf
VFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERM
SUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVfTUVNT1JZX0gg
MQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRUWVBFU19IIDEK
fCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwgI2Rl
ZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8iCnwgI2RlZmlu
ZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBIQVZFX1JFQURM
SU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5FX0ggMQp8ICNk
ZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBMRVRJT05fTUFU
Q0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9XSVRIX1NZU19U
SU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfV0FJVF9I
IDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZDTl9IIDEK
fCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEKfCAjZGVmaW5l
IEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZFX0dMT0JfSCAxCnwgI2RlZmluZSBI
QVZFX0dSUF9IIDEKfCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPHN0ZGlvLmg+
CnwgI2lmZGVmIEhBVkVfU1lTX1RZUEVTX0gKfCAjIGluY2x1ZGUgPHN5cy90eXBlcy5oPgp8ICNl
bmRpZgp8ICNpZmRlZiBIQVZFX1NZU19TVEFUX0gKfCAjIGluY2x1ZGUgPHN5cy9zdGF0Lmg+Cnwg
I2VuZGlmCnwgI2lmZGVmIFNURENfSEVBREVSUwp8ICMgaW5jbHVkZSA8c3RkbGliLmg+CnwgIyBp
bmNsdWRlIDxzdGRkZWYuaD4KfCAjZWxzZQp8ICMgaWZkZWYgSEFWRV9TVERMSUJfSAp8ICMgIGlu
Y2x1ZGUgPHN0ZGxpYi5oPgp8ICMgZW5kaWYKfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdf
SAp8ICMgaWYgIWRlZmluZWQgU1REQ19IRUFERVJTICYmIGRlZmluZWQgSEFWRV9NRU1PUllfSAp8
ICMgIGluY2x1ZGUgPG1lbW9yeS5oPgp8ICMgZW5kaWYKfCAjIGluY2x1ZGUgPHN0cmluZy5oPgp8
ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NUUklOR1NfSAp8ICMgaW5jbHVkZSA8c3RyaW5ncy5oPgp8
ICNlbmRpZgp8ICNpZmRlZiBIQVZFX0lOVFRZUEVTX0gKfCAjIGluY2x1ZGUgPGludHR5cGVzLmg+
CnwgI2VuZGlmCnwgI2lmZGVmIEhBVkVfU1RESU5UX0gKfCAjIGluY2x1ZGUgPHN0ZGludC5oPgp8
ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1VOSVNURF9ICnwgIyBpbmNsdWRlIDx1bmlzdGQuaD4KfCAj
ZW5kaWYKfCAjaW5jbHVkZSA8bGltaXRzLmg+CmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiBubwpj
b25maWd1cmU6MjIzMzE6IGNoZWNraW5nIGxpbWl0cy5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjM0
NjogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5j
CmNvbmZpZ3VyZToyMjM1MjogJD8gPSAwCmNvbmZpZ3VyZToyMjM2NjogcmVzdWx0OiB5ZXMKY29u
ZmlndXJlOjIyMzc5OiBXQVJOSU5HOiBsaW1pdHMuaDogcHJlc2VudCBidXQgY2Fubm90IGJlIGNv
bXBpbGVkCmNvbmZpZ3VyZToyMjM4MTogV0FSTklORzogbGltaXRzLmg6ICAgICBjaGVjayBmb3Ig
bWlzc2luZyBwcmVyZXF1aXNpdGUgaGVhZGVycz8KY29uZmlndXJlOjIyMzgzOiBXQVJOSU5HOiBs
aW1pdHMuaDogc2VlIHRoZSBBdXRvY29uZiBkb2N1bWVudGF0aW9uCmNvbmZpZ3VyZToyMjM4NTog
V0FSTklORzogbGltaXRzLmg6ICAgICBzZWN0aW9uICJQcmVzZW50IEJ1dCBDYW5ub3QgQmUgQ29t
cGlsZWQiCmNvbmZpZ3VyZToyMjM4NzogV0FSTklORzogbGltaXRzLmg6IHByb2NlZWRpbmcgd2l0
aCB0aGUgcHJlcHJvY2Vzc29yJ3MgcmVzdWx0CmNvbmZpZ3VyZToyMjM4OTogV0FSTklORzogbGlt
aXRzLmg6IGluIHRoZSBmdXR1cmUsIHRoZSBjb21waWxlciB3aWxsIHRha2UgcHJlY2VkZW5jZQpj
b25maWd1cmU6MjIzOTk6IGNoZWNraW5nIGZvciBsaW1pdHMuaApjb25maWd1cmU6MjI0MDc6IHJl
c3VsdDogeWVzCmNvbmZpZ3VyZToyMjI5MDogY2hlY2tpbmcgbG9jYWxlLmggdXNhYmlsaXR5CmNv
bmZpZ3VyZToyMjMwNzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9p
bmNsdWRlLyBjb25mdGVzdC5jID4mNQpjb25maWd1cmU6MjIzMTM6ICQ/ID0gMApjb25maWd1cmU6
MjIzMjc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjMzMTogY2hlY2tpbmcgbG9jYWxlLmggcHJl
c2VuY2UKY29uZmlndXJlOjIyMzQ2OiAvbGliL2NwcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1
L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJlOjIyMzUyOiAkPyA9IDAKY29uZmlndXJlOjIy
MzY2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIzOTk6IGNoZWNraW5nIGZvciBsb2NhbGUuaApj
b25maWd1cmU6MjI0MDc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjI5MDogY2hlY2tpbmcgbmV0
ZGIuaCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50
ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVkZS9saW1p
dHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJjZSBmaWxl
ICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNvZGUgNCkK
Y29uZmlndXJlOjIyMzEzOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3YXM6Cnwg
LyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2RlZmluZSBQ
QUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4xIgp8ICNk
ZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JVR1JFUE9S
VCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNkZWZpbmUg
VkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93bi1saW51
eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1IgInVua25v
d24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAjZGVmaW5l
IFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwgI2RlZmlu
ZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgSEFWRV9T
WVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9T
VERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVfTUVNT1JZ
X0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRUWVBFU19I
IDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwg
I2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8iCnwgI2Rl
ZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBIQVZFX1JF
QURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5FX0ggMQp8
ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBMRVRJT05f
TUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9XSVRIX1NZ
U19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfV0FJ
VF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZDTl9I
IDEKfCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEKfCAjZGVm
aW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZFX0dMT0JfSCAxCnwgI2RlZmlu
ZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5lIEhBVkVfTElNSVRTX0ggMQp8ICNkZWZpbmUgSEFWRV9M
T0NBTEVfSCAxCnwgLyogZW5kIGNvbmZkZWZzLmguICAqLwp8ICNpbmNsdWRlIDxzdGRpby5oPgp8
ICNpZmRlZiBIQVZFX1NZU19UWVBFU19ICnwgIyBpbmNsdWRlIDxzeXMvdHlwZXMuaD4KfCAjZW5k
aWYKfCAjaWZkZWYgSEFWRV9TWVNfU1RBVF9ICnwgIyBpbmNsdWRlIDxzeXMvc3RhdC5oPgp8ICNl
bmRpZgp8ICNpZmRlZiBTVERDX0hFQURFUlMKfCAjIGluY2x1ZGUgPHN0ZGxpYi5oPgp8ICMgaW5j
bHVkZSA8c3RkZGVmLmg+CnwgI2Vsc2UKfCAjIGlmZGVmIEhBVkVfU1RETElCX0gKfCAjICBpbmNs
dWRlIDxzdGRsaWIuaD4KfCAjIGVuZGlmCnwgI2VuZGlmCnwgI2lmZGVmIEhBVkVfU1RSSU5HX0gK
fCAjIGlmICFkZWZpbmVkIFNURENfSEVBREVSUyAmJiBkZWZpbmVkIEhBVkVfTUVNT1JZX0gKfCAj
ICBpbmNsdWRlIDxtZW1vcnkuaD4KfCAjIGVuZGlmCnwgIyBpbmNsdWRlIDxzdHJpbmcuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdTX0gKfCAjIGluY2x1ZGUgPHN0cmluZ3MuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9JTlRUWVBFU19ICnwgIyBpbmNsdWRlIDxpbnR0eXBlcy5oPgp8
ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NURElOVF9ICnwgIyBpbmNsdWRlIDxzdGRpbnQuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9VTklTVERfSAp8ICMgaW5jbHVkZSA8dW5pc3RkLmg+CnwgI2Vu
ZGlmCnwgI2luY2x1ZGUgPG5ldGRiLmg+CmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiBubwpjb25m
aWd1cmU6MjIzMzE6IGNoZWNraW5nIG5ldGRiLmggcHJlc2VuY2UKY29uZmlndXJlOjIyMzQ2OiAv
bGliL2NwcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29u
ZmlndXJlOjIyMzUyOiAkPyA9IDAKY29uZmlndXJlOjIyMzY2OiByZXN1bHQ6IHllcwpjb25maWd1
cmU6MjIzNzk6IFdBUk5JTkc6IG5ldGRiLmg6IHByZXNlbnQgYnV0IGNhbm5vdCBiZSBjb21waWxl
ZApjb25maWd1cmU6MjIzODE6IFdBUk5JTkc6IG5ldGRiLmg6ICAgICBjaGVjayBmb3IgbWlzc2lu
ZyBwcmVyZXF1aXNpdGUgaGVhZGVycz8KY29uZmlndXJlOjIyMzgzOiBXQVJOSU5HOiBuZXRkYi5o
OiBzZWUgdGhlIEF1dG9jb25mIGRvY3VtZW50YXRpb24KY29uZmlndXJlOjIyMzg1OiBXQVJOSU5H
OiBuZXRkYi5oOiAgICAgc2VjdGlvbiAiUHJlc2VudCBCdXQgQ2Fubm90IEJlIENvbXBpbGVkIgpj
b25maWd1cmU6MjIzODc6IFdBUk5JTkc6IG5ldGRiLmg6IHByb2NlZWRpbmcgd2l0aCB0aGUgcHJl
cHJvY2Vzc29yJ3MgcmVzdWx0CmNvbmZpZ3VyZToyMjM4OTogV0FSTklORzogbmV0ZGIuaDogaW4g
dGhlIGZ1dHVyZSwgdGhlIGNvbXBpbGVyIHdpbGwgdGFrZSBwcmVjZWRlbmNlCmNvbmZpZ3VyZToy
MjM5OTogY2hlY2tpbmcgZm9yIG5ldGRiLmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHllcwpj
b25maWd1cmU6MjIyOTA6IGNoZWNraW5nIG5ldGluZXQvaW4uaCB1c2FiaWxpdHkKY29uZmlndXJl
OjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUv
IGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVkZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMg
ZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJjZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVf
bmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9u
IGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNvZGUgNCkKY29uZmlndXJlOjIyMzEzOiAkPyA9IDQK
Y29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2Rl
ZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2Rl
ZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIg
Mi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmci
CnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmlu
ZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAi
eDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51
eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAjZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFW
RV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwgI2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmlu
ZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgSEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBI
QVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZF
X1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVfTUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJ
TkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5U
X0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8
ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8iCnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZp
bmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2Rl
ZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5FX0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElO
RSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBMRVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERD
X0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9XSVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVf
RElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQ
QV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZDTl9IIDEKfCAjZGVmaW5lIEhBVkVfRUxGX0gg
MQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEKfCAjZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAx
CnwgI2RlZmluZSBIQVZFX0dMT0JfSCAxCnwgI2RlZmluZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5l
IEhBVkVfTElNSVRTX0ggMQp8ICNkZWZpbmUgSEFWRV9MT0NBTEVfSCAxCnwgI2RlZmluZSBIQVZF
X05FVERCX0ggMQp8IC8qIGVuZCBjb25mZGVmcy5oLiAgKi8KfCAjaW5jbHVkZSA8c3RkaW8uaD4K
fCAjaWZkZWYgSEFWRV9TWVNfVFlQRVNfSAp8ICMgaW5jbHVkZSA8c3lzL3R5cGVzLmg+CnwgI2Vu
ZGlmCnwgI2lmZGVmIEhBVkVfU1lTX1NUQVRfSAp8ICMgaW5jbHVkZSA8c3lzL3N0YXQuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgU1REQ19IRUFERVJTCnwgIyBpbmNsdWRlIDxzdGRsaWIuaD4KfCAjIGlu
Y2x1ZGUgPHN0ZGRlZi5oPgp8ICNlbHNlCnwgIyBpZmRlZiBIQVZFX1NURExJQl9ICnwgIyAgaW5j
bHVkZSA8c3RkbGliLmg+CnwgIyBlbmRpZgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NUUklOR19I
CnwgIyBpZiAhZGVmaW5lZCBTVERDX0hFQURFUlMgJiYgZGVmaW5lZCBIQVZFX01FTU9SWV9ICnwg
IyAgaW5jbHVkZSA8bWVtb3J5Lmg+CnwgIyBlbmRpZgp8ICMgaW5jbHVkZSA8c3RyaW5nLmg+Cnwg
I2VuZGlmCnwgI2lmZGVmIEhBVkVfU1RSSU5HU19ICnwgIyBpbmNsdWRlIDxzdHJpbmdzLmg+Cnwg
I2VuZGlmCnwgI2lmZGVmIEhBVkVfSU5UVFlQRVNfSAp8ICMgaW5jbHVkZSA8aW50dHlwZXMuaD4K
fCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVERJTlRfSAp8ICMgaW5jbHVkZSA8c3RkaW50Lmg+Cnwg
I2VuZGlmCnwgI2lmZGVmIEhBVkVfVU5JU1REX0gKfCAjIGluY2x1ZGUgPHVuaXN0ZC5oPgp8ICNl
bmRpZgp8ICNpbmNsdWRlIDxuZXRpbmV0L2luLmg+CmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiBu
bwpjb25maWd1cmU6MjIzMzE6IGNoZWNraW5nIG5ldGluZXQvaW4uaCBwcmVzZW5jZQpjb25maWd1
cmU6MjIzNDY6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29u
ZnRlc3QuYwpjb25maWd1cmU6MjIzNTI6ICQ/ID0gMApjb25maWd1cmU6MjIzNjY6IHJlc3VsdDog
eWVzCmNvbmZpZ3VyZToyMjM3OTogV0FSTklORzogbmV0aW5ldC9pbi5oOiBwcmVzZW50IGJ1dCBj
YW5ub3QgYmUgY29tcGlsZWQKY29uZmlndXJlOjIyMzgxOiBXQVJOSU5HOiBuZXRpbmV0L2luLmg6
ICAgICBjaGVjayBmb3IgbWlzc2luZyBwcmVyZXF1aXNpdGUgaGVhZGVycz8KY29uZmlndXJlOjIy
MzgzOiBXQVJOSU5HOiBuZXRpbmV0L2luLmg6IHNlZSB0aGUgQXV0b2NvbmYgZG9jdW1lbnRhdGlv
bgpjb25maWd1cmU6MjIzODU6IFdBUk5JTkc6IG5ldGluZXQvaW4uaDogICAgIHNlY3Rpb24gIlBy
ZXNlbnQgQnV0IENhbm5vdCBCZSBDb21waWxlZCIKY29uZmlndXJlOjIyMzg3OiBXQVJOSU5HOiBu
ZXRpbmV0L2luLmg6IHByb2NlZWRpbmcgd2l0aCB0aGUgcHJlcHJvY2Vzc29yJ3MgcmVzdWx0CmNv
bmZpZ3VyZToyMjM4OTogV0FSTklORzogbmV0aW5ldC9pbi5oOiBpbiB0aGUgZnV0dXJlLCB0aGUg
Y29tcGlsZXIgd2lsbCB0YWtlIHByZWNlZGVuY2UKY29uZmlndXJlOjIyMzk5OiBjaGVja2luZyBm
b3IgbmV0aW5ldC9pbi5oCmNvbmZpZ3VyZToyMjQwNzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIy
MjkwOiBjaGVja2luZyBwd2QuaCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8z
IC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNv
bmZpZ3VyZToyMjMxMzogJD8gPSAwCmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiB5ZXMKY29uZmln
dXJlOjIyMzMxOiBjaGVja2luZyBwd2QuaCBwcmVzZW5jZQpjb25maWd1cmU6MjIzNDY6IC9saWIv
Y3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1
cmU6MjIzNTI6ICQ/ID0gMApjb25maWd1cmU6MjIzNjY6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToy
MjM5OTogY2hlY2tpbmcgZm9yIHB3ZC5oCmNvbmZpZ3VyZToyMjQwNzogcmVzdWx0OiB5ZXMKY29u
ZmlndXJlOjIyMjkwOiBjaGVja2luZyBzdGRib29sLmggdXNhYmlsaXR5CmNvbmZpZ3VyZToyMjMw
NzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25m
dGVzdC5jID4mNQpjb25maWd1cmU6MjIzMTM6ICQ/ID0gMApjb25maWd1cmU6MjIzMjc6IHJlc3Vs
dDogeWVzCmNvbmZpZ3VyZToyMjMzMTogY2hlY2tpbmcgc3RkYm9vbC5oIHByZXNlbmNlCmNvbmZp
Z3VyZToyMjM0NjogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBj
b25mdGVzdC5jCmNvbmZpZ3VyZToyMjM1MjogJD8gPSAwCmNvbmZpZ3VyZToyMjM2NjogcmVzdWx0
OiB5ZXMKY29uZmlndXJlOjIyMzk5OiBjaGVja2luZyBmb3Igc3RkYm9vbC5oCmNvbmZpZ3VyZToy
MjQwNzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMjgwOiBjaGVja2luZyBmb3Igc3RyaW5ncy5o
CmNvbmZpZ3VyZToyMjI4NjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMjkwOiBjaGVja2luZyBz
eXMvcGFyYW0uaCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9v
cHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVk
ZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJj
ZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNv
ZGUgNCkKY29uZmlndXJlOjIyMzEzOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3
YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2Rl
ZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4x
Igp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JV
R1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNk
ZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93
bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1Ig
InVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAj
ZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwg
I2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUg
SEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUg
SEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVf
TUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRU
WVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERf
SCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8i
CnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBI
QVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5F
X0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBM
RVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9X
SVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9T
WVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9E
TEZDTl9IIDEKfCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEK
fCAjZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZFX0dMT0JfSCAxCnwg
I2RlZmluZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5lIEhBVkVfTElNSVRTX0ggMQp8ICNkZWZpbmUg
SEFWRV9MT0NBTEVfSCAxCnwgI2RlZmluZSBIQVZFX05FVERCX0ggMQp8ICNkZWZpbmUgSEFWRV9O
RVRJTkVUX0lOX0ggMQp8ICNkZWZpbmUgSEFWRV9QV0RfSCAxCnwgI2RlZmluZSBIQVZFX1NUREJP
T0xfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgLyogZW5kIGNvbmZkZWZzLmguICAq
Lwp8ICNpbmNsdWRlIDxzdGRpby5oPgp8ICNpZmRlZiBIQVZFX1NZU19UWVBFU19ICnwgIyBpbmNs
dWRlIDxzeXMvdHlwZXMuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TWVNfU1RBVF9ICnwgIyBp
bmNsdWRlIDxzeXMvc3RhdC5oPgp8ICNlbmRpZgp8ICNpZmRlZiBTVERDX0hFQURFUlMKfCAjIGlu
Y2x1ZGUgPHN0ZGxpYi5oPgp8ICMgaW5jbHVkZSA8c3RkZGVmLmg+CnwgI2Vsc2UKfCAjIGlmZGVm
IEhBVkVfU1RETElCX0gKfCAjICBpbmNsdWRlIDxzdGRsaWIuaD4KfCAjIGVuZGlmCnwgI2VuZGlm
CnwgI2lmZGVmIEhBVkVfU1RSSU5HX0gKfCAjIGlmICFkZWZpbmVkIFNURENfSEVBREVSUyAmJiBk
ZWZpbmVkIEhBVkVfTUVNT1JZX0gKfCAjICBpbmNsdWRlIDxtZW1vcnkuaD4KfCAjIGVuZGlmCnwg
IyBpbmNsdWRlIDxzdHJpbmcuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdTX0gKfCAj
IGluY2x1ZGUgPHN0cmluZ3MuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9JTlRUWVBFU19ICnwg
IyBpbmNsdWRlIDxpbnR0eXBlcy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NURElOVF9ICnwg
IyBpbmNsdWRlIDxzdGRpbnQuaD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9VTklTVERfSAp8ICMg
aW5jbHVkZSA8dW5pc3RkLmg+CnwgI2VuZGlmCnwgI2luY2x1ZGUgPHN5cy9wYXJhbS5oPgpjb25m
aWd1cmU6MjIzMjc6IHJlc3VsdDogbm8KY29uZmlndXJlOjIyMzMxOiBjaGVja2luZyBzeXMvcGFy
YW0uaCBwcmVzZW5jZQpjb25maWd1cmU6MjIzNDY6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2Uv
MTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6MjIzNTI6ICQ/ID0gMApjb25m
aWd1cmU6MjIzNjY6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjM3OTogV0FSTklORzogc3lzL3Bh
cmFtLmg6IHByZXNlbnQgYnV0IGNhbm5vdCBiZSBjb21waWxlZApjb25maWd1cmU6MjIzODE6IFdB
Uk5JTkc6IHN5cy9wYXJhbS5oOiAgICAgY2hlY2sgZm9yIG1pc3NpbmcgcHJlcmVxdWlzaXRlIGhl
YWRlcnM/CmNvbmZpZ3VyZToyMjM4MzogV0FSTklORzogc3lzL3BhcmFtLmg6IHNlZSB0aGUgQXV0
b2NvbmYgZG9jdW1lbnRhdGlvbgpjb25maWd1cmU6MjIzODU6IFdBUk5JTkc6IHN5cy9wYXJhbS5o
OiAgICAgc2VjdGlvbiAiUHJlc2VudCBCdXQgQ2Fubm90IEJlIENvbXBpbGVkIgpjb25maWd1cmU6
MjIzODc6IFdBUk5JTkc6IHN5cy9wYXJhbS5oOiBwcm9jZWVkaW5nIHdpdGggdGhlIHByZXByb2Nl
c3NvcidzIHJlc3VsdApjb25maWd1cmU6MjIzODk6IFdBUk5JTkc6IHN5cy9wYXJhbS5oOiBpbiB0
aGUgZnV0dXJlLCB0aGUgY29tcGlsZXIgd2lsbCB0YWtlIHByZWNlZGVuY2UKY29uZmlndXJlOjIy
Mzk5OiBjaGVja2luZyBmb3Igc3lzL3BhcmFtLmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHll
cwpjb25maWd1cmU6MjIyOTA6IGNoZWNraW5nIHN5cy9zZWxlY3QuaCB1c2FiaWxpdHkKY29uZmln
dXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1
ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToyMjMxMzogJD8gPSAwCmNvbmZpZ3VyZToyMjMy
NzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMzMxOiBjaGVja2luZyBzeXMvc2VsZWN0LmggcHJl
c2VuY2UKY29uZmlndXJlOjIyMzQ2OiAvbGliL2NwcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1
L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJlOjIyMzUyOiAkPyA9IDAKY29uZmlndXJlOjIy
MzY2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIzOTk6IGNoZWNraW5nIGZvciBzeXMvc2VsZWN0
LmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIyOTA6IGNoZWNraW5n
IHN5cy9zb2NrZXQuaCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAt
SS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5j
bHVkZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNv
dXJjZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMg
KGNvZGUgNCkKY29uZmlndXJlOjIyMzEzOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3Jh
bSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwg
I2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIu
Ny4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdF
X0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8
ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5r
bm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5E
T1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEK
fCAjZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAx
CnwgI2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZp
bmUgSEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZp
bmUgSEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhB
VkVfTUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9J
TlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklT
VERfSCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGli
cy8iCnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmlu
ZSBIQVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURM
SU5FX0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NP
TVBMRVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElN
RV9XSVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFW
RV9TWVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFW
RV9ETEZDTl9IIDEKfCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9I
IDEKfCAjZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZFX0dMT0JfSCAx
CnwgI2RlZmluZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5lIEhBVkVfTElNSVRTX0ggMQp8ICNkZWZp
bmUgSEFWRV9MT0NBTEVfSCAxCnwgI2RlZmluZSBIQVZFX05FVERCX0ggMQp8ICNkZWZpbmUgSEFW
RV9ORVRJTkVUX0lOX0ggMQp8ICNkZWZpbmUgSEFWRV9QV0RfSCAxCnwgI2RlZmluZSBIQVZFX1NU
REJPT0xfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19Q
QVJBTV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NFTEVDVF9IIDEKfCAvKiBlbmQgY29uZmRlZnMu
aC4gICovCnwgI2luY2x1ZGUgPHN0ZGlvLmg+CnwgI2lmZGVmIEhBVkVfU1lTX1RZUEVTX0gKfCAj
IGluY2x1ZGUgPHN5cy90eXBlcy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NZU19TVEFUX0gK
fCAjIGluY2x1ZGUgPHN5cy9zdGF0Lmg+CnwgI2VuZGlmCnwgI2lmZGVmIFNURENfSEVBREVSUwp8
ICMgaW5jbHVkZSA8c3RkbGliLmg+CnwgIyBpbmNsdWRlIDxzdGRkZWYuaD4KfCAjZWxzZQp8ICMg
aWZkZWYgSEFWRV9TVERMSUJfSAp8ICMgIGluY2x1ZGUgPHN0ZGxpYi5oPgp8ICMgZW5kaWYKfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdfSAp8ICMgaWYgIWRlZmluZWQgU1REQ19IRUFERVJT
ICYmIGRlZmluZWQgSEFWRV9NRU1PUllfSAp8ICMgIGluY2x1ZGUgPG1lbW9yeS5oPgp8ICMgZW5k
aWYKfCAjIGluY2x1ZGUgPHN0cmluZy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NUUklOR1Nf
SAp8ICMgaW5jbHVkZSA8c3RyaW5ncy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX0lOVFRZUEVT
X0gKfCAjIGluY2x1ZGUgPGludHR5cGVzLmg+CnwgI2VuZGlmCnwgI2lmZGVmIEhBVkVfU1RESU5U
X0gKfCAjIGluY2x1ZGUgPHN0ZGludC5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1VOSVNURF9I
CnwgIyBpbmNsdWRlIDx1bmlzdGQuaD4KfCAjZW5kaWYKfCAjaW5jbHVkZSA8c3lzL3NvY2tldC5o
Pgpjb25maWd1cmU6MjIzMjc6IHJlc3VsdDogbm8KY29uZmlndXJlOjIyMzMxOiBjaGVja2luZyBz
eXMvc29ja2V0LmggcHJlc2VuY2UKY29uZmlndXJlOjIyMzQ2OiAvbGliL2NwcCAtSS9vcHQvaW50
ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJlOjIyMzUyOiAkPyA9
IDAKY29uZmlndXJlOjIyMzY2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIzNzk6IFdBUk5JTkc6
IHN5cy9zb2NrZXQuaDogcHJlc2VudCBidXQgY2Fubm90IGJlIGNvbXBpbGVkCmNvbmZpZ3VyZToy
MjM4MTogV0FSTklORzogc3lzL3NvY2tldC5oOiAgICAgY2hlY2sgZm9yIG1pc3NpbmcgcHJlcmVx
dWlzaXRlIGhlYWRlcnM/CmNvbmZpZ3VyZToyMjM4MzogV0FSTklORzogc3lzL3NvY2tldC5oOiBz
ZWUgdGhlIEF1dG9jb25mIGRvY3VtZW50YXRpb24KY29uZmlndXJlOjIyMzg1OiBXQVJOSU5HOiBz
eXMvc29ja2V0Lmg6ICAgICBzZWN0aW9uICJQcmVzZW50IEJ1dCBDYW5ub3QgQmUgQ29tcGlsZWQi
CmNvbmZpZ3VyZToyMjM4NzogV0FSTklORzogc3lzL3NvY2tldC5oOiBwcm9jZWVkaW5nIHdpdGgg
dGhlIHByZXByb2Nlc3NvcidzIHJlc3VsdApjb25maWd1cmU6MjIzODk6IFdBUk5JTkc6IHN5cy9z
b2NrZXQuaDogaW4gdGhlIGZ1dHVyZSwgdGhlIGNvbXBpbGVyIHdpbGwgdGFrZSBwcmVjZWRlbmNl
CmNvbmZpZ3VyZToyMjM5OTogY2hlY2tpbmcgZm9yIHN5cy9zb2NrZXQuaApjb25maWd1cmU6MjI0
MDc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjI4MDogY2hlY2tpbmcgZm9yIHN5cy9zdGF0LmgK
Y29uZmlndXJlOjIyMjg2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIyOTA6IGNoZWNraW5nIHN5
cy9yZXNvdXJjZS5oIHVzYWJpbGl0eQpjb25maWd1cmU6MjIzMDc6IGljYyAtYyAtTzMgLW1wIC1J
L29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJl
OjIyMzEzOiAkPyA9IDAKY29uZmlndXJlOjIyMzI3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIz
MzE6IGNoZWNraW5nIHN5cy9yZXNvdXJjZS5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjM0NjogL2xp
Yi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jCmNvbmZp
Z3VyZToyMjM1MjogJD8gPSAwCmNvbmZpZ3VyZToyMjM2NjogcmVzdWx0OiB5ZXMKY29uZmlndXJl
OjIyMzk5OiBjaGVja2luZyBmb3Igc3lzL3Jlc291cmNlLmgKY29uZmlndXJlOjIyNDA3OiByZXN1
bHQ6IHllcwpjb25maWd1cmU6MjIyOTA6IGNoZWNraW5nIHN5cy90aW1lLmggdXNhYmlsaXR5CmNv
bmZpZ3VyZToyMjMwNzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9p
bmNsdWRlLyBjb25mdGVzdC5jID4mNQpjb25maWd1cmU6MjIzMTM6ICQ/ID0gMApjb25maWd1cmU6
MjIzMjc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjMzMTogY2hlY2tpbmcgc3lzL3RpbWUuaCBw
cmVzZW5jZQpjb25maWd1cmU6MjIzNDY6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4w
MTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6MjIzNTI6ICQ/ID0gMApjb25maWd1cmU6
MjIzNjY6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjM5OTogY2hlY2tpbmcgZm9yIHN5cy90aW1l
LmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIyOTA6IGNoZWNraW5n
IHN5cy90aW1lcy5oIHVzYWJpbGl0eQpjb25maWd1cmU6MjIzMDc6IGljYyAtYyAtTzMgLW1wIC1J
L29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJl
OjIyMzEzOiAkPyA9IDAKY29uZmlndXJlOjIyMzI3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIz
MzE6IGNoZWNraW5nIHN5cy90aW1lcy5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjM0NjogL2xpYi9j
cHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jCmNvbmZpZ3Vy
ZToyMjM1MjogJD8gPSAwCmNvbmZpZ3VyZToyMjM2NjogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIy
Mzk5OiBjaGVja2luZyBmb3Igc3lzL3RpbWVzLmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHll
cwpjb25maWd1cmU6MjIyOTA6IGNoZWNraW5nIHN5cy91dHNuYW1lLmggdXNhYmlsaXR5CmNvbmZp
Z3VyZToyMjMwNzogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNs
dWRlLyBjb25mdGVzdC5jID4mNQpjb25maWd1cmU6MjIzMTM6ICQ/ID0gMApjb25maWd1cmU6MjIz
Mjc6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjMzMTogY2hlY2tpbmcgc3lzL3V0c25hbWUuaCBw
cmVzZW5jZQpjb25maWd1cmU6MjIzNDY6IC9saWIvY3BwIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4w
MTUvaW5jbHVkZS8gY29uZnRlc3QuYwpjb25maWd1cmU6MjIzNTI6ICQ/ID0gMApjb25maWd1cmU6
MjIzNjY6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjM5OTogY2hlY2tpbmcgZm9yIHN5cy91dHNu
YW1lLmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIyOTA6IGNoZWNr
aW5nIHRpbWUuaCB1c2FiaWxpdHkKY29uZmlndXJlOjIyMzA3OiBpY2MgLWMgLU8zIC1tcCAtSS9v
cHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToy
MjMxMzogJD8gPSAwCmNvbmZpZ3VyZToyMjMyNzogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyMzMx
OiBjaGVja2luZyB0aW1lLmggcHJlc2VuY2UKY29uZmlndXJlOjIyMzQ2OiAvbGliL2NwcCAtSS9v
cHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMKY29uZmlndXJlOjIyMzUy
OiAkPyA9IDAKY29uZmlndXJlOjIyMzY2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjIzOTk6IGNo
ZWNraW5nIGZvciB0aW1lLmgKY29uZmlndXJlOjIyNDA3OiByZXN1bHQ6IHllcwpjb25maWd1cmU6
MjIyODA6IGNoZWNraW5nIGZvciB1bmlzdGQuaApjb25maWd1cmU6MjIyODY6IHJlc3VsdDogeWVz
CmNvbmZpZ3VyZToyMjQ0MzogY2hlY2tpbmcgZXJybm8uaCB1c2FiaWxpdHkKY29uZmlndXJlOjIy
NDYwOiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNv
bmZ0ZXN0LmMgPiY1CmNvbmZpZ3VyZToyMjQ2NjogJD8gPSAwCmNvbmZpZ3VyZToyMjQ4MDogcmVz
dWx0OiB5ZXMKY29uZmlndXJlOjIyNDg0OiBjaGVja2luZyBlcnJuby5oIHByZXNlbmNlCmNvbmZp
Z3VyZToyMjQ5OTogL2xpYi9jcHAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBj
b25mdGVzdC5jCmNvbmZpZ3VyZToyMjUwNTogJD8gPSAwCmNvbmZpZ3VyZToyMjUxOTogcmVzdWx0
OiB5ZXMKY29uZmlndXJlOjIyNTUyOiBjaGVja2luZyBmb3IgZXJybm8uaApjb25maWd1cmU6MjI1
NjA6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjQzMzogY2hlY2tpbmcgZm9yIGludHR5cGVzLmgK
Y29uZmlndXJlOjIyNDM5OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjI0NDM6IGNoZWNraW5nIHN0
ZGFyZy5oIHVzYWJpbGl0eQpjb25maWd1cmU6MjI0NjA6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9p
bnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjIyNDY2
OiAkPyA9IDAKY29uZmlndXJlOjIyNDgwOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjI0ODQ6IGNo
ZWNraW5nIHN0ZGFyZy5oIHByZXNlbmNlCmNvbmZpZ3VyZToyMjQ5OTogL2xpYi9jcHAgLUkvb3B0
L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jCmNvbmZpZ3VyZToyMjUwNTog
JD8gPSAwCmNvbmZpZ3VyZToyMjUxOTogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyNTUyOiBjaGVj
a2luZyBmb3Igc3RkYXJnLmgKY29uZmlndXJlOjIyNTYwOiByZXN1bHQ6IHllcwpjb25maWd1cmU6
MjI0MzM6IGNoZWNraW5nIGZvciBzdGRpbnQuaApjb25maWd1cmU6MjI0Mzk6IHJlc3VsdDogeWVz
CmNvbmZpZ3VyZToyMjQzMzogY2hlY2tpbmcgZm9yIHN0cmluZy5oCmNvbmZpZ3VyZToyMjQzOTog
cmVzdWx0OiB5ZXMKY29uZmlndXJlOjIyNTgwOiBjaGVja2luZyB3aGV0aGVyIHNldGptcC5oIGlz
IFBPU0lYLjEgY29tcGF0aWJsZQpjb25maWd1cmU6MjI2MDg6IGljYyAtYyAtTzMgLW1wIC1JL29w
dC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZmlndXJlOjIy
NjE0OiAkPyA9IDAKY29uZmlndXJlOjIyNjI5OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjI2MzE6
IGNoZWNraW5nIHdoZXRoZXIgc2lnc2V0am1wIGlzIGRlY2xhcmVkCmNvbmZpZ3VyZToyMjY2MTog
aWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVz
dC5jID4mNQpjb25maWd1cmU6MjI2Njc6ICQ/ID0gMApjb25maWd1cmU6MjI2ODI6IHJlc3VsdDog
eWVzCmNvbmZpZ3VyZToyMjY5ODogY2hlY2tpbmcgd2hldGhlciBzaWdsb25nam1wIGlzIGRlY2xh
cmVkCmNvbmZpZ3VyZToyMjcyODogaWNjIC1jIC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4x
LjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jID4mNQpjb25maWd1cmU6MjI3MzQ6ICQ/ID0gMApjb25m
aWd1cmU6MjI3NDk6IHJlc3VsdDogeWVzCmNvbmZpZ3VyZToyMjc4MTogY2hlY2tpbmcgZm9yIEdO
VSBDIGxpYnJhcnkgd2l0aCB2ZXJzaW9uID49IDIKY29uZmlndXJlOjIyODA4OiByZXN1bHQ6IHll
cwpjb25maWd1cmU6MjI4MjE6IGNoZWNraW5nIHJldHVybiB0eXBlIG9mIHNpZ25hbCBoYW5kbGVy
cwpjb25maWd1cmU6MjI4NDk6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4w
MTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZnRlc3QuYyg3OSk6IGVycm9yOiBvcGVyYW5k
IG9mICIqIiBtdXN0IGJlIGEgcG9pbnRlcgogIHJldHVybiAqKHNpZ25hbCAoMCwgMCkpICgwKSA9
PSAxOwogICAgICAgICAgXgoKY29tcGlsYXRpb24gYWJvcnRlZCBmb3IgY29uZnRlc3QuYyAoY29k
ZSAyKQpjb25maWd1cmU6MjI4NTU6ICQ/ID0gMgpjb25maWd1cmU6IGZhaWxlZCBwcm9ncmFtIHdh
czoKfCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVmaW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAjZGVm
aW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43LjEi
CnwgI2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfQlVH
UkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKfCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwgI2Rl
ZmluZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82NC11bmtub3du
LWxpbnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRPUiAi
dW5rbm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8ICNk
ZWZpbmUgUl9BUkNIICIiCnwgI2RlZmluZSBIQVZFX1ZJU0lCSUxJVFlfQVRUUklCVVRFIDEKfCAj
ZGVmaW5lIF9HTlVfU09VUkNFIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAxCnwgI2RlZmluZSBI
QVZFX1NZU19UWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NUQVRfSCAxCnwgI2RlZmluZSBI
QVZFX1NURExJQl9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HX0ggMQp8ICNkZWZpbmUgSEFWRV9N
RU1PUllfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBIQVZFX0lOVFRZ
UEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJTlRfSCAxCnwgI2RlZmluZSBIQVZFX1VOSVNURF9I
IDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBMVF9PQkpESVIgIi5saWJzLyIK
fCAjZGVmaW5lIEhBVkVfTElCTSAxCnwgI2RlZmluZSBIQVZFX0xJQkRMIDEKfCAjZGVmaW5lIEhB
VkVfUkVBRExJTkVfSElTVE9SWV9IIDEKfCAjZGVmaW5lIEhBVkVfUkVBRExJTkVfUkVBRExJTkVf
SCAxCnwgI2RlZmluZSBIQVZFX0xJQlJFQURMSU5FIDEKfCAjZGVmaW5lIEhBVkVfUkxfQ09NUExF
VElPTl9NQVRDSEVTIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAxCnwgI2RlZmluZSBUSU1FX1dJ
VEhfU1lTX1RJTUUgMQp8ICNkZWZpbmUgSEFWRV9ESVJFTlRfSCAxCnwgI2RlZmluZSBIQVZFX1NZ
U19XQUlUX0ggMQp8ICNkZWZpbmUgSEFWRV9BUlBBX0lORVRfSCAxCnwgI2RlZmluZSBIQVZFX0RM
RkNOX0ggMQp8ICNkZWZpbmUgSEFWRV9FTEZfSCAxCnwgI2RlZmluZSBIQVZFX0ZDTlRMX0ggMQp8
ICNkZWZpbmUgSEFWRV9GUFVfQ09OVFJPTF9IIDEKfCAjZGVmaW5lIEhBVkVfR0xPQl9IIDEKfCAj
ZGVmaW5lIEhBVkVfR1JQX0ggMQp8ICNkZWZpbmUgSEFWRV9MSU1JVFNfSCAxCnwgI2RlZmluZSBI
QVZFX0xPQ0FMRV9IIDEKfCAjZGVmaW5lIEhBVkVfTkVUREJfSCAxCnwgI2RlZmluZSBIQVZFX05F
VElORVRfSU5fSCAxCnwgI2RlZmluZSBIQVZFX1BXRF9IIDEKfCAjZGVmaW5lIEhBVkVfU1REQk9P
TF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1BBUkFN
X0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU0VMRUNUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU09D
S0VUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1JF
U09VUkNFX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVElNRV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lT
X1RJTUVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVVRTTkFNRV9IIDEKfCAjZGVmaW5lIEhBVkVf
VElNRV9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFWRV9FUlJOT19I
IDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NUREFSR19IIDEK
fCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdfSCAxCnwgI2Rl
ZmluZSBIQVZFX0RFQ0xfU0lHU0VUSk1QIDEKfCAjZGVmaW5lIEhBVkVfREVDTF9TSUdMT05HSk1Q
IDEKfCAjZGVmaW5lIEhBVkVfUE9TSVhfU0VUSk1QIDEKfCAjZGVmaW5lIEhBVkVfR0xJQkMyIDEK
fCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPHN5cy90eXBlcy5oPgp8ICNpbmNs
dWRlIDxzaWduYWwuaD4KfCAKfCBpbnQKfCBtYWluICgpCnwgewp8IHJldHVybiAqKHNpZ25hbCAo
MCwgMCkpICgwKSA9PSAxOwp8ICAgOwp8ICAgcmV0dXJuIDA7CnwgfQpjb25maWd1cmU6MjI4NzA6
IHJlc3VsdDogdm9pZApjb25maWd1cmU6MjI4Nzg6IGNoZWNraW5nIGZvciBwaWRfdApjb25maWd1
cmU6MjI5MDg6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVk
ZS8gY29uZnRlc3QuYyA+JjUKY29uZnRlc3QuYygxMTEpOiB3YXJuaW5nICMyNzk6IGNvbnRyb2xs
aW5nIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKICBpZiAoKGFjX190eXBlX25ld18gKikgMCkKICAg
ICAgXgoKY29uZmlndXJlOjIyOTE0OiAkPyA9IDAKY29uZmlndXJlOjIyOTI5OiByZXN1bHQ6IHll
cwpjb25maWd1cmU6MjI5NDE6IGNoZWNraW5nIGZvciBzaXplX3QKY29uZmlndXJlOjIyOTcxOiBp
Y2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0
LmMgPiY1CmNvbmZ0ZXN0LmMoMTExKTogd2FybmluZyAjMjc5OiBjb250cm9sbGluZyBleHByZXNz
aW9uIGlzIGNvbnN0YW50CiAgaWYgKChhY19fdHlwZV9uZXdfICopIDApCiAgICAgIF4KCmNvbmZp
Z3VyZToyMjk3NzogJD8gPSAwCmNvbmZpZ3VyZToyMjk5MjogcmVzdWx0OiB5ZXMKY29uZmlndXJl
OjIzMDA0OiBjaGVja2luZyB3aGV0aGVyIFNJWkVfTUFYIGlzIGRlY2xhcmVkCmNvbmZpZ3VyZToy
MzA0NzogaWNjIC1vIGNvbmZ0ZXN0IC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9p
bmNsdWRlLyAtTC91c3IvbG9jYWwvbGliNjQgY29uZnRlc3QuYyAtbGRsIC1sbSAgPiY1Ci91c3Iv
aW5jbHVkZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVu
IHNvdXJjZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0
LmMgKGNvZGUgNCkKY29uZmlndXJlOjIzMDUwOiAkPyA9IDQKY29uZmlndXJlOiBwcm9ncmFtIGV4
aXRlZCB3aXRoIHN0YXR1cyA0CmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8qIGNv
bmZkZWZzLmguICAqLwp8ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FH
RV9UQVJOQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5l
IFBBQ0tBR0VfU1RSSU5HICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQgInIt
YnVnc0BSLXByb2plY3Qub3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJ
T04gIjIuNy4xIgp8ICNkZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgtZ251
Igp8ICNkZWZpbmUgUl9DUFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3duIgp8
ICNkZWZpbmUgUl9PUyAibGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBSX0FS
Q0ggIiIKfCAjZGVmaW5lIEhBVkVfVklTSUJJTElUWV9BVFRSSUJVVEUgMQp8ICNkZWZpbmUgX0dO
VV9TT1VSQ0UgMQp8ICNkZWZpbmUgU1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RZ
UEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RETElC
X0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdfSCAxCnwgI2RlZmluZSBIQVZFX01FTU9SWV9IIDEK
fCAjZGVmaW5lIEhBVkVfU1RSSU5HU19IIDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwg
I2RlZmluZSBIQVZFX1NURElOVF9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZp
bmUgSEFWRV9ETEZDTl9IIDEKfCAjZGVmaW5lIExUX09CSkRJUiAiLmxpYnMvIgp8ICNkZWZpbmUg
SEFWRV9MSUJNIDEKfCAjZGVmaW5lIEhBVkVfTElCREwgMQp8ICNkZWZpbmUgSEFWRV9SRUFETElO
RV9ISVNUT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9SRUFETElORV9IIDEKfCAjZGVm
aW5lIEhBVkVfTElCUkVBRExJTkUgMQp8ICNkZWZpbmUgSEFWRV9STF9DT01QTEVUSU9OX01BVENI
RVMgMQp8ICNkZWZpbmUgU1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIFRJTUVfV0lUSF9TWVNfVElN
RSAxCnwgI2RlZmluZSBIQVZFX0RJUkVOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1dBSVRfSCAx
CnwgI2RlZmluZSBIQVZFX0FSUEFfSU5FVF9IIDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwg
I2RlZmluZSBIQVZFX0VMRl9IIDEKfCAjZGVmaW5lIEhBVkVfRkNOVExfSCAxCnwgI2RlZmluZSBI
QVZFX0ZQVV9DT05UUk9MX0ggMQp8ICNkZWZpbmUgSEFWRV9HTE9CX0ggMQp8ICNkZWZpbmUgSEFW
RV9HUlBfSCAxCnwgI2RlZmluZSBIQVZFX0xJTUlUU19IIDEKfCAjZGVmaW5lIEhBVkVfTE9DQUxF
X0ggMQp8ICNkZWZpbmUgSEFWRV9ORVREQl9IIDEKfCAjZGVmaW5lIEhBVkVfTkVUSU5FVF9JTl9I
IDEKfCAjZGVmaW5lIEhBVkVfUFdEX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERCT09MX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfUEFSQU1fSCAxCnwgI2Rl
ZmluZSBIQVZFX1NZU19TRUxFQ1RfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TT0NLRVRfSCAxCnwg
I2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfUkVTT1VSQ0VfSCAx
CnwgI2RlZmluZSBIQVZFX1NZU19USU1FX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVElNRVNfSCAx
CnwgI2RlZmluZSBIQVZFX1NZU19VVFNOQU1FX0ggMQp8ICNkZWZpbmUgSEFWRV9USU1FX0ggMQp8
ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwgI2RlZmluZSBIQVZFX0VSUk5PX0ggMQp8ICNkZWZp
bmUgSEFWRV9JTlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1REQVJHX0ggMQp8ICNkZWZpbmUg
SEFWRV9TVERJTlRfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVf
REVDTF9TSUdTRVRKTVAgMQp8ICNkZWZpbmUgSEFWRV9ERUNMX1NJR0xPTkdKTVAgMQp8ICNkZWZp
bmUgSEFWRV9QT1NJWF9TRVRKTVAgMQp8ICNkZWZpbmUgSEFWRV9HTElCQzIgMQp8ICNkZWZpbmUg
UkVUU0lHVFlQRSB2b2lkCnwgLyogZW5kIGNvbmZkZWZzLmguICAqLwp8IAp8ICNpbmNsdWRlIDxz
dGRsaWIuaD4KfCAjaWZkZWYgSEFWRV9JTlRUWVBFU19ICnwgIyAgaW5jbHVkZSA8aW50dHlwZXMu
aD4KfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVERJTlRfSAp8ICMgIGluY2x1ZGUgPHN0ZGludC5o
Pgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX0xJTUlUU19ICnwgIyAgaW5jbHVkZSA8bGltaXRzLmg+
CnwgI2VuZGlmCnwgCnwgaW50CnwgbWFpbigpIHsKfCAjaWZuZGVmIFNJWkVfTUFYCnwgICBjaGFy
ICpwID0gKGNoYXIgKikgU0laRV9NQVg7CnwgI2VuZGlmCnwgCnwgICA7CnwgICByZXR1cm4gMDsK
fCB9CnwgCmNvbmZpZ3VyZToyMzA3NTogcmVzdWx0OiBubwpjb25maWd1cmU6MjMwODU6IGNoZWNr
aW5nIGZvciBibGtjbnRfdApjb25maWd1cmU6MjMxMTU6IGljYyAtYyAtTzMgLW1wIC1JL29wdC9p
bnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKY29uZnRlc3QuYygxMTEp
OiB3YXJuaW5nICMyNzk6IGNvbnRyb2xsaW5nIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKICBpZiAo
KGFjX190eXBlX25ld18gKikgMCkKICAgICAgXgoKY29uZmlndXJlOjIzMTIxOiAkPyA9IDAKY29u
ZmlndXJlOjIzMTM2OiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjMxNTA6IGNoZWNraW5nIGZvciB0
eXBlIG9mIHNvY2tldCBsZW5ndGgKY29uZmlndXJlOjIzMTg2OiBpY2MgLWMgLU8zIC1tcCAtSS9v
cHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVk
ZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJj
ZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNv
ZGUgNCkKY29uZmlndXJlOjIzMTkyOiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3
YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2Rl
ZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4x
Igp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JV
R1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNk
ZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93
bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1Ig
InVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAj
ZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwg
I2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUg
SEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUg
SEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVf
TUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRU
WVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERf
SCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8i
CnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBI
QVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5F
X0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBM
RVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9X
SVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9T
WVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9E
TEZDTl9IIDEKfCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEK
fCAjZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZFX0dMT0JfSCAxCnwg
I2RlZmluZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5lIEhBVkVfTElNSVRTX0ggMQp8ICNkZWZpbmUg
SEFWRV9MT0NBTEVfSCAxCnwgI2RlZmluZSBIQVZFX05FVERCX0ggMQp8ICNkZWZpbmUgSEFWRV9O
RVRJTkVUX0lOX0ggMQp8ICNkZWZpbmUgSEFWRV9QV0RfSCAxCnwgI2RlZmluZSBIQVZFX1NUREJP
T0xfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19QQVJB
TV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NFTEVDVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NP
Q0tFVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NUQVRfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19S
RVNPVVJDRV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RJTUVfSCAxCnwgI2RlZmluZSBIQVZFX1NZ
U19USU1FU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1VUU05BTUVfSCAxCnwgI2RlZmluZSBIQVZF
X1RJTUVfSCAxCnwgI2RlZmluZSBIQVZFX1VOSVNURF9IIDEKfCAjZGVmaW5lIEhBVkVfRVJSTk9f
SCAxCnwgI2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERBUkdfSCAx
CnwgI2RlZmluZSBIQVZFX1NURElOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HX0ggMQp8ICNk
ZWZpbmUgSEFWRV9ERUNMX1NJR1NFVEpNUCAxCnwgI2RlZmluZSBIQVZFX0RFQ0xfU0lHTE9OR0pN
UCAxCnwgI2RlZmluZSBIQVZFX1BPU0lYX1NFVEpNUCAxCnwgI2RlZmluZSBIQVZFX0dMSUJDMiAx
CnwgI2RlZmluZSBSRVRTSUdUWVBFIHZvaWQKfCAvKiBlbmQgY29uZmRlZnMuaC4gICovCnwgCnwg
I2luY2x1ZGUgPHN0ZGRlZi5oPgp8ICNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KfCAjaWZkZWYgSEFW
RV9TWVNfU09DS0VUX0gKfCAjIGluY2x1ZGUgPHN5cy9zb2NrZXQuaD4KfCAjZW5kaWYKfCAjaWZk
ZWYgV2luMzIKfCAjIGluY2x1ZGUgPHdpbnNvY2suaD4KfCAjZW5kaWYKfCAKfCBpbnQKfCBtYWlu
ICgpCnwgewp8ICh2b2lkKWdldHNvY2tvcHQgKDEsIDEsIDEsIE5VTEwsIChzb2NrbGVuX3QgKilO
VUxMKQp8ICAgOwp8ICAgcmV0dXJuIDA7CnwgfQpjb25maWd1cmU6MjMxODY6IGljYyAtYyAtTzMg
LW1wIC1JL29wdC9pbnRlbC9jY2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKL3Vz
ci9pbmNsdWRlL2xpbWl0cy5oKDEyNSk6IGNhdGFzdHJvcGhpYyBlcnJvcjogY291bGQgbm90IG9w
ZW4gc291cmNlIGZpbGUgImxpbWl0cy5oIgogICMgaW5jbHVkZV9uZXh0IDxsaW1pdHMuaD4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXgoKY29tcGlsYXRpb24gYWJvcnRlZCBmb3IgY29uZnRl
c3QuYyAoY29kZSA0KQpjb25maWd1cmU6MjMxOTI6ICQ/ID0gNApjb25maWd1cmU6IGZhaWxlZCBw
cm9ncmFtIHdhczoKfCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVmaW5lIFBBQ0tBR0VfTkFNRSAi
UiIKfCAjZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVkVSU0lP
TiAiMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAyLjcuMSIKfCAjZGVmaW5lIFBB
Q0tBR0VfQlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKfCAjZGVmaW5lIFBBQ0tBR0Ug
IlIiCnwgI2RlZmluZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82
NC11bmtub3duLWxpbnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4ODZfNjQiCnwgI2RlZmluZSBS
X1ZFTkRPUiAidW5rbm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKfCAjZGVmaW5lIFVu
aXggMQp8ICNkZWZpbmUgUl9BUkNIICIiCnwgI2RlZmluZSBIQVZFX1ZJU0lCSUxJVFlfQVRUUklC
VVRFIDEKfCAjZGVmaW5lIF9HTlVfU09VUkNFIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAxCnwg
I2RlZmluZSBIQVZFX1NZU19UWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NUQVRfSCAxCnwg
I2RlZmluZSBIQVZFX1NURExJQl9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HX0ggMQp8ICNkZWZp
bmUgSEFWRV9NRU1PUllfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBI
QVZFX0lOVFRZUEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJTlRfSCAxCnwgI2RlZmluZSBIQVZF
X1VOSVNURF9IIDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBMVF9PQkpESVIg
Ii5saWJzLyIKfCAjZGVmaW5lIEhBVkVfTElCTSAxCnwgI2RlZmluZSBIQVZFX0xJQkRMIDEKfCAj
ZGVmaW5lIEhBVkVfUkVBRExJTkVfSElTVE9SWV9IIDEKfCAjZGVmaW5lIEhBVkVfUkVBRExJTkVf
UkVBRExJTkVfSCAxCnwgI2RlZmluZSBIQVZFX0xJQlJFQURMSU5FIDEKfCAjZGVmaW5lIEhBVkVf
UkxfQ09NUExFVElPTl9NQVRDSEVTIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAxCnwgI2RlZmlu
ZSBUSU1FX1dJVEhfU1lTX1RJTUUgMQp8ICNkZWZpbmUgSEFWRV9ESVJFTlRfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NZU19XQUlUX0ggMQp8ICNkZWZpbmUgSEFWRV9BUlBBX0lORVRfSCAxCnwgI2RlZmlu
ZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgSEFWRV9FTEZfSCAxCnwgI2RlZmluZSBIQVZFX0ZD
TlRMX0ggMQp8ICNkZWZpbmUgSEFWRV9GUFVfQ09OVFJPTF9IIDEKfCAjZGVmaW5lIEhBVkVfR0xP
Ql9IIDEKfCAjZGVmaW5lIEhBVkVfR1JQX0ggMQp8ICNkZWZpbmUgSEFWRV9MSU1JVFNfSCAxCnwg
I2RlZmluZSBIQVZFX0xPQ0FMRV9IIDEKfCAjZGVmaW5lIEhBVkVfTkVUREJfSCAxCnwgI2RlZmlu
ZSBIQVZFX05FVElORVRfSU5fSCAxCnwgI2RlZmluZSBIQVZFX1BXRF9IIDEKfCAjZGVmaW5lIEhB
VkVfU1REQk9PTF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HU19IIDEKfCAjZGVmaW5lIEhBVkVf
U1lTX1BBUkFNX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU0VMRUNUX0ggMQp8ICNkZWZpbmUgSEFW
RV9TWVNfU09DS0VUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhB
VkVfU1lTX1JFU09VUkNFX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVElNRV9IIDEKfCAjZGVmaW5l
IEhBVkVfU1lTX1RJTUVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVVRTTkFNRV9IIDEKfCAjZGVm
aW5lIEhBVkVfVElNRV9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFW
RV9FUlJOT19IIDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NU
REFSR19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdf
SCAxCnwgI2RlZmluZSBIQVZFX0RFQ0xfU0lHU0VUSk1QIDEKfCAjZGVmaW5lIEhBVkVfREVDTF9T
SUdMT05HSk1QIDEKfCAjZGVmaW5lIEhBVkVfUE9TSVhfU0VUSk1QIDEKfCAjZGVmaW5lIEhBVkVf
R0xJQkMyIDEKfCAjZGVmaW5lIFJFVFNJR1RZUEUgdm9pZAp8IC8qIGVuZCBjb25mZGVmcy5oLiAg
Ki8KfCAKfCAjaW5jbHVkZSA8c3RkZGVmLmg+CnwgI2luY2x1ZGUgPHN5cy90eXBlcy5oPgp8ICNp
ZmRlZiBIQVZFX1NZU19TT0NLRVRfSAp8ICMgaW5jbHVkZSA8c3lzL3NvY2tldC5oPgp8ICNlbmRp
Zgp8ICNpZmRlZiBXaW4zMgp8ICMgaW5jbHVkZSA8d2luc29jay5oPgp8ICNlbmRpZgp8IAp8IGlu
dAp8IG1haW4gKCkKfCB7CnwgKHZvaWQpZ2V0c29ja29wdCAoMSwgMSwgMSwgTlVMTCwgKHNpemVf
dCAqKU5VTEwpCnwgICA7CnwgICByZXR1cm4gMDsKfCB9CmNvbmZpZ3VyZToyMzE4NjogaWNjIC1j
IC1PMyAtbXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jID4m
NQovdXNyL2luY2x1ZGUvbGltaXRzLmgoMTI1KTogY2F0YXN0cm9waGljIGVycm9yOiBjb3VsZCBu
b3Qgb3BlbiBzb3VyY2UgZmlsZSAibGltaXRzLmgiCiAgIyBpbmNsdWRlX25leHQgPGxpbWl0cy5o
PgogICAgICAgICAgICAgICAgICAgICAgICAgICBeCgpjb21waWxhdGlvbiBhYm9ydGVkIGZvciBj
b25mdGVzdC5jIChjb2RlIDQpCmNvbmZpZ3VyZToyMzE5MjogJD8gPSA0CmNvbmZpZ3VyZTogZmFp
bGVkIHByb2dyYW0gd2FzOgp8IC8qIGNvbmZkZWZzLmguICAqLwp8ICNkZWZpbmUgUEFDS0FHRV9O
QU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9UQVJOQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9W
RVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfU1RSSU5HICJSIDIuNy4xIgp8ICNkZWZp
bmUgUEFDS0FHRV9CVUdSRVBPUlQgInItYnVnc0BSLXByb2plY3Qub3JnIgp8ICNkZWZpbmUgUEFD
S0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUl9QTEFURk9STSAi
eDg2XzY0LXVua25vd24tbGludXgtZ251Igp8ICNkZWZpbmUgUl9DUFUgIng4Nl82NCIKfCAjZGVm
aW5lIFJfVkVORE9SICJ1bmtub3duIgp8ICNkZWZpbmUgUl9PUyAibGludXgtZ251Igp8ICNkZWZp
bmUgVW5peCAxCnwgI2RlZmluZSBSX0FSQ0ggIiIKfCAjZGVmaW5lIEhBVkVfVklTSUJJTElUWV9B
VFRSSUJVVEUgMQp8ICNkZWZpbmUgX0dOVV9TT1VSQ0UgMQp8ICNkZWZpbmUgU1REQ19IRUFERVJT
IDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RZUEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9I
IDEKfCAjZGVmaW5lIEhBVkVfU1RETElCX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdfSCAxCnwg
I2RlZmluZSBIQVZFX01FTU9SWV9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HU19IIDEKfCAjZGVm
aW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NURElOVF9IIDEKfCAjZGVmaW5l
IEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFWRV9ETEZDTl9IIDEKfCAjZGVmaW5lIExUX09C
SkRJUiAiLmxpYnMvIgp8ICNkZWZpbmUgSEFWRV9MSUJNIDEKfCAjZGVmaW5lIEhBVkVfTElCREwg
MQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9ISVNUT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9SRUFE
TElORV9SRUFETElORV9IIDEKfCAjZGVmaW5lIEhBVkVfTElCUkVBRExJTkUgMQp8ICNkZWZpbmUg
SEFWRV9STF9DT01QTEVUSU9OX01BVENIRVMgMQp8ICNkZWZpbmUgU1REQ19IRUFERVJTIDEKfCAj
ZGVmaW5lIFRJTUVfV0lUSF9TWVNfVElNRSAxCnwgI2RlZmluZSBIQVZFX0RJUkVOVF9IIDEKfCAj
ZGVmaW5lIEhBVkVfU1lTX1dBSVRfSCAxCnwgI2RlZmluZSBIQVZFX0FSUEFfSU5FVF9IIDEKfCAj
ZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBIQVZFX0VMRl9IIDEKfCAjZGVmaW5lIEhB
VkVfRkNOVExfSCAxCnwgI2RlZmluZSBIQVZFX0ZQVV9DT05UUk9MX0ggMQp8ICNkZWZpbmUgSEFW
RV9HTE9CX0ggMQp8ICNkZWZpbmUgSEFWRV9HUlBfSCAxCnwgI2RlZmluZSBIQVZFX0xJTUlUU19I
IDEKfCAjZGVmaW5lIEhBVkVfTE9DQUxFX0ggMQp8ICNkZWZpbmUgSEFWRV9ORVREQl9IIDEKfCAj
ZGVmaW5lIEhBVkVfTkVUSU5FVF9JTl9IIDEKfCAjZGVmaW5lIEhBVkVfUFdEX0ggMQp8ICNkZWZp
bmUgSEFWRV9TVERCT09MX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUg
SEFWRV9TWVNfUEFSQU1fSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TRUxFQ1RfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NZU19TT0NLRVRfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZp
bmUgSEFWRV9TWVNfUkVTT1VSQ0VfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19USU1FX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TWVNfVElNRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19VVFNOQU1FX0ggMQp8
ICNkZWZpbmUgSEFWRV9USU1FX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERfSCAxCnwgI2RlZmlu
ZSBIQVZFX0VSUk5PX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRUWVBFU19IIDEKfCAjZGVmaW5lIEhB
VkVfU1REQVJHX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJTlRfSCAxCnwgI2RlZmluZSBIQVZFX1NU
UklOR19IIDEKfCAjZGVmaW5lIEhBVkVfREVDTF9TSUdTRVRKTVAgMQp8ICNkZWZpbmUgSEFWRV9E
RUNMX1NJR0xPTkdKTVAgMQp8ICNkZWZpbmUgSEFWRV9QT1NJWF9TRVRKTVAgMQp8ICNkZWZpbmUg
SEFWRV9HTElCQzIgMQp8ICNkZWZpbmUgUkVUU0lHVFlQRSB2b2lkCnwgLyogZW5kIGNvbmZkZWZz
LmguICAqLwp8IAp8ICNpbmNsdWRlIDxzdGRkZWYuaD4KfCAjaW5jbHVkZSA8c3lzL3R5cGVzLmg+
CnwgI2lmZGVmIEhBVkVfU1lTX1NPQ0tFVF9ICnwgIyBpbmNsdWRlIDxzeXMvc29ja2V0Lmg+Cnwg
I2VuZGlmCnwgI2lmZGVmIFdpbjMyCnwgIyBpbmNsdWRlIDx3aW5zb2NrLmg+CnwgI2VuZGlmCnwg
CnwgaW50CnwgbWFpbiAoKQp8IHsKfCAodm9pZClnZXRzb2Nrb3B0ICgxLCAxLCAxLCBOVUxMLCAo
aW50ICopTlVMTCkKfCAgIDsKfCAgIHJldHVybiAwOwp8IH0KY29uZmlndXJlOjIzMjE2OiBXQVJO
SU5HOiBjb3VsZCBub3QgZGV0ZXJtaW5lIHR5cGUgb2Ygc29ja2V0IGxlbmd0aApjb25maWd1cmU6
MjMyMjg6IGNoZWNraW5nIGZvciBzdGFja190CmNvbmZpZ3VyZToyMzI1OTogaWNjIC1jIC1PMyAt
bXAgLUkvb3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jID4mNQpjb25m
dGVzdC5jKDgxKTogd2FybmluZyAjMjc5OiBjb250cm9sbGluZyBleHByZXNzaW9uIGlzIGNvbnN0
YW50CiAgaWYgKChhY19fdHlwZV9uZXdfICopIDApCiAgICAgIF4KCmNvbmZpZ3VyZToyMzI2NTog
JD8gPSAwCmNvbmZpZ3VyZToyMzI4MDogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIzMjk2OiBjaGVj
a2luZyBmb3IgaW50cHRyX3QKY29uZmlndXJlOjIzMzMyOiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQv
aW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZ0ZXN0LmMoODcp
OiB3YXJuaW5nICMyNzk6IGNvbnRyb2xsaW5nIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKICBpZiAo
KGFjX190eXBlX25ld18gKikgMCkKICAgICAgXgoKY29uZmlndXJlOjIzMzM4OiAkPyA9IDAKY29u
ZmlndXJlOjIzMzUzOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjMzNjM6IGNoZWNraW5nIGZvciB1
aW50cHRyX3QKY29uZmlndXJlOjIzMzk5OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2Nl
LzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZ0ZXN0LmMoODgpOiB3YXJuaW5n
ICMyNzk6IGNvbnRyb2xsaW5nIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKICBpZiAoKGFjX190eXBl
X25ld18gKikgMCkKICAgICAgXgoKY29uZmlndXJlOjIzNDA1OiAkPyA9IDAKY29uZmlndXJlOjIz
NDIwOiByZXN1bHQ6IHllcwpjb25maWd1cmU6MjM0Mzg6IGNoZWNraW5nIHdoZXRoZXIgYnl0ZSBv
cmRlcmluZyBpcyBiaWdlbmRpYW4KY29uZmlndXJlOjIzNDcxOiBpY2MgLWMgLU8zIC1tcCAtSS9v
cHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1Ci91c3IvaW5jbHVk
ZS9saW1pdHMuaCgxMjUpOiBjYXRhc3Ryb3BoaWMgZXJyb3I6IGNvdWxkIG5vdCBvcGVuIHNvdXJj
ZSBmaWxlICJsaW1pdHMuaCIKICAjIGluY2x1ZGVfbmV4dCA8bGltaXRzLmg+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNvbmZ0ZXN0LmMgKGNv
ZGUgNCkKY29uZmlndXJlOjIzNDc3OiAkPyA9IDQKY29uZmlndXJlOiBmYWlsZWQgcHJvZ3JhbSB3
YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05BTUUgIlIiCnwgI2Rl
ZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZFUlNJT04gIjIuNy4x
Igp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX0JV
R1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNLQUdFICJSIgp8ICNk
ZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4ODZfNjQtdW5rbm93
bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZpbmUgUl9WRU5ET1Ig
InVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmluZSBVbml4IDEKfCAj
ZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FUVFJJQlVURSAxCnwg
I2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUg
SEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUg
SEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVf
TUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9JTlRU
WVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9VTklTVERf
SCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JKRElSICIubGlicy8i
CnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAxCnwgI2RlZmluZSBI
QVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX1JFQURMSU5F
X0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBIQVZFX1JMX0NPTVBM
RVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNkZWZpbmUgVElNRV9X
SVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9T
WVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNkZWZpbmUgSEFWRV9E
TEZDTl9IIDEKfCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFWRV9GQ05UTF9IIDEK
fCAjZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZFX0dMT0JfSCAxCnwg
I2RlZmluZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5lIEhBVkVfTElNSVRTX0ggMQp8ICNkZWZpbmUg
SEFWRV9MT0NBTEVfSCAxCnwgI2RlZmluZSBIQVZFX05FVERCX0ggMQp8ICNkZWZpbmUgSEFWRV9O
RVRJTkVUX0lOX0ggMQp8ICNkZWZpbmUgSEFWRV9QV0RfSCAxCnwgI2RlZmluZSBIQVZFX1NUREJP
T0xfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19QQVJB
TV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NFTEVDVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NP
Q0tFVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NUQVRfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19S
RVNPVVJDRV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RJTUVfSCAxCnwgI2RlZmluZSBIQVZFX1NZ
U19USU1FU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1VUU05BTUVfSCAxCnwgI2RlZmluZSBIQVZF
X1RJTUVfSCAxCnwgI2RlZmluZSBIQVZFX1VOSVNURF9IIDEKfCAjZGVmaW5lIEhBVkVfRVJSTk9f
SCAxCnwgI2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERBUkdfSCAx
CnwgI2RlZmluZSBIQVZFX1NURElOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HX0ggMQp8ICNk
ZWZpbmUgSEFWRV9ERUNMX1NJR1NFVEpNUCAxCnwgI2RlZmluZSBIQVZFX0RFQ0xfU0lHTE9OR0pN
UCAxCnwgI2RlZmluZSBIQVZFX1BPU0lYX1NFVEpNUCAxCnwgI2RlZmluZSBIQVZFX0dMSUJDMiAx
CnwgI2RlZmluZSBSRVRTSUdUWVBFIHZvaWQKfCAjZGVmaW5lIFJfU09DS0xFTl9UIAp8ICNkZWZp
bmUgSEFWRV9TVEFDS19UIDEKfCAjZGVmaW5lIEhBVkVfSU5UUFRSX1QgMQp8ICNkZWZpbmUgSEFW
RV9VSU5UUFRSX1QgMQp8IC8qIGVuZCBjb25mZGVmcy5oLiAgKi8KfCAjaW5jbHVkZSA8c3lzL3R5
cGVzLmg+CnwgI2luY2x1ZGUgPHN5cy9wYXJhbS5oPgp8IAp8IGludAp8IG1haW4gKCkKfCB7Cnwg
I2lmICAhIChkZWZpbmVkIEJZVEVfT1JERVIgJiYgZGVmaW5lZCBCSUdfRU5ESUFOICYmIGRlZmlu
ZWQgTElUVExFX0VORElBTiAJJiYgQllURV9PUkRFUiAmJiBCSUdfRU5ESUFOICYmIExJVFRMRV9F
TkRJQU4pCnwgIGJvZ3VzIGVuZGlhbiBtYWNyb3MKfCAjZW5kaWYKfCAKfCAgIDsKfCAgIHJldHVy
biAwOwp8IH0KY29uZmlndXJlOjIzNjI0OiBpY2MgLW8gY29uZnRlc3QgLU8zIC1tcCAtSS9vcHQv
aW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIC1ML3Vzci9sb2NhbC9saWI2NCBjb25mdGVzdC5j
IC1sZGwgLWxtICA+JjUKY29uZmlndXJlOjIzNjI3OiAkPyA9IDAKY29uZmlndXJlOjIzNjMzOiAu
L2NvbmZ0ZXN0Ci4vY29uZnRlc3Q6IGVycm9yIHdoaWxlIGxvYWRpbmcgc2hhcmVkIGxpYnJhcmll
czogbGliaW1mLnNvOiBjYW5ub3Qgb3BlbiBzaGFyZWQgb2JqZWN0IGZpbGU6IE5vIHN1Y2ggZmls
ZSBvciBkaXJlY3RvcnkKY29uZmlndXJlOjIzNjM2OiAkPyA9IDEyNwpjb25maWd1cmU6IHByb2dy
YW0gZXhpdGVkIHdpdGggc3RhdHVzIDEyNwpjb25maWd1cmU6IGZhaWxlZCBwcm9ncmFtIHdhczoK
fCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVmaW5lIFBBQ0tBR0VfTkFNRSAiUiIKfCAjZGVmaW5l
IFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVkVSU0lPTiAiMi43LjEiCnwg
I2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0VfQlVHUkVQ
T1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKfCAjZGVmaW5lIFBBQ0tBR0UgIlIiCnwgI2RlZmlu
ZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82NC11bmtub3duLWxp
bnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4ODZfNjQiCnwgI2RlZmluZSBSX1ZFTkRPUiAidW5r
bm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKfCAjZGVmaW5lIFVuaXggMQp8ICNkZWZp
bmUgUl9BUkNIICIiCnwgI2RlZmluZSBIQVZFX1ZJU0lCSUxJVFlfQVRUUklCVVRFIDEKfCAjZGVm
aW5lIF9HTlVfU09VUkNFIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAxCnwgI2RlZmluZSBIQVZF
X1NZU19UWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NUQVRfSCAxCnwgI2RlZmluZSBIQVZF
X1NURExJQl9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HX0ggMQp8ICNkZWZpbmUgSEFWRV9NRU1P
UllfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBIQVZFX0lOVFRZUEVT
X0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJTlRfSCAxCnwgI2RlZmluZSBIQVZFX1VOSVNURF9IIDEK
fCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBMVF9PQkpESVIgIi5saWJzLyIKfCAj
ZGVmaW5lIEhBVkVfTElCTSAxCnwgI2RlZmluZSBIQVZFX0xJQkRMIDEKfCAjZGVmaW5lIEhBVkVf
UkVBRExJTkVfSElTVE9SWV9IIDEKfCAjZGVmaW5lIEhBVkVfUkVBRExJTkVfUkVBRExJTkVfSCAx
CnwgI2RlZmluZSBIQVZFX0xJQlJFQURMSU5FIDEKfCAjZGVmaW5lIEhBVkVfUkxfQ09NUExFVElP
Tl9NQVRDSEVTIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAxCnwgI2RlZmluZSBUSU1FX1dJVEhf
U1lTX1RJTUUgMQp8ICNkZWZpbmUgSEFWRV9ESVJFTlRfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19X
QUlUX0ggMQp8ICNkZWZpbmUgSEFWRV9BUlBBX0lORVRfSCAxCnwgI2RlZmluZSBIQVZFX0RMRkNO
X0ggMQp8ICNkZWZpbmUgSEFWRV9FTEZfSCAxCnwgI2RlZmluZSBIQVZFX0ZDTlRMX0ggMQp8ICNk
ZWZpbmUgSEFWRV9GUFVfQ09OVFJPTF9IIDEKfCAjZGVmaW5lIEhBVkVfR0xPQl9IIDEKfCAjZGVm
aW5lIEhBVkVfR1JQX0ggMQp8ICNkZWZpbmUgSEFWRV9MSU1JVFNfSCAxCnwgI2RlZmluZSBIQVZF
X0xPQ0FMRV9IIDEKfCAjZGVmaW5lIEhBVkVfTkVUREJfSCAxCnwgI2RlZmluZSBIQVZFX05FVElO
RVRfSU5fSCAxCnwgI2RlZmluZSBIQVZFX1BXRF9IIDEKfCAjZGVmaW5lIEhBVkVfU1REQk9PTF9I
IDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1BBUkFNX0gg
MQp8ICNkZWZpbmUgSEFWRV9TWVNfU0VMRUNUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU09DS0VU
X0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1JFU09V
UkNFX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVElNRV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RJ
TUVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVVRTTkFNRV9IIDEKfCAjZGVmaW5lIEhBVkVfVElN
RV9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFWRV9FUlJOT19IIDEK
fCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NUREFSR19IIDEKfCAj
ZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdfSCAxCnwgI2RlZmlu
ZSBIQVZFX0RFQ0xfU0lHU0VUSk1QIDEKfCAjZGVmaW5lIEhBVkVfREVDTF9TSUdMT05HSk1QIDEK
fCAjZGVmaW5lIEhBVkVfUE9TSVhfU0VUSk1QIDEKfCAjZGVmaW5lIEhBVkVfR0xJQkMyIDEKfCAj
ZGVmaW5lIFJFVFNJR1RZUEUgdm9pZAp8ICNkZWZpbmUgUl9TT0NLTEVOX1QgCnwgI2RlZmluZSBI
QVZFX1NUQUNLX1QgMQp8ICNkZWZpbmUgSEFWRV9JTlRQVFJfVCAxCnwgI2RlZmluZSBIQVZFX1VJ
TlRQVFJfVCAxCnwgLyogZW5kIGNvbmZkZWZzLmguICAqLwp8ICNpbmNsdWRlIDxzdGRpby5oPgp8
ICNpZmRlZiBIQVZFX1NZU19UWVBFU19ICnwgIyBpbmNsdWRlIDxzeXMvdHlwZXMuaD4KfCAjZW5k
aWYKfCAjaWZkZWYgSEFWRV9TWVNfU1RBVF9ICnwgIyBpbmNsdWRlIDxzeXMvc3RhdC5oPgp8ICNl
bmRpZgp8ICNpZmRlZiBTVERDX0hFQURFUlMKfCAjIGluY2x1ZGUgPHN0ZGxpYi5oPgp8ICMgaW5j
bHVkZSA8c3RkZGVmLmg+CnwgI2Vsc2UKfCAjIGlmZGVmIEhBVkVfU1RETElCX0gKfCAjICBpbmNs
dWRlIDxzdGRsaWIuaD4KfCAjIGVuZGlmCnwgI2VuZGlmCnwgI2lmZGVmIEhBVkVfU1RSSU5HX0gK
fCAjIGlmICFkZWZpbmVkIFNURENfSEVBREVSUyAmJiBkZWZpbmVkIEhBVkVfTUVNT1JZX0gKfCAj
ICBpbmNsdWRlIDxtZW1vcnkuaD4KfCAjIGVuZGlmCnwgIyBpbmNsdWRlIDxzdHJpbmcuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdTX0gKfCAjIGluY2x1ZGUgPHN0cmluZ3MuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9JTlRUWVBFU19ICnwgIyBpbmNsdWRlIDxpbnR0eXBlcy5oPgp8
ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NURElOVF9ICnwgIyBpbmNsdWRlIDxzdGRpbnQuaD4KfCAj
ZW5kaWYKfCAjaWZkZWYgSEFWRV9VTklTVERfSAp8ICMgaW5jbHVkZSA8dW5pc3RkLmg+CnwgI2Vu
ZGlmCnwgaW50CnwgbWFpbiAoKQp8IHsKfCAKfCAgIC8qIEFyZSB3ZSBsaXR0bGUgb3IgYmlnIGVu
ZGlhbj8gIEZyb20gSGFyYmlzb24mU3RlZWxlLiAgKi8KfCAgIHVuaW9uCnwgICB7CnwgICAgIGxv
bmcgaW50IGw7CnwgICAgIGNoYXIgY1tzaXplb2YgKGxvbmcgaW50KV07CnwgICB9IHU7CnwgICB1
LmwgPSAxOwp8ICAgcmV0dXJuIHUuY1tzaXplb2YgKGxvbmcgaW50KSAtIDFdID09IDE7CnwgCnwg
ICA7CnwgICByZXR1cm4gMDsKfCB9CmNvbmZpZ3VyZToyMzY1NTogcmVzdWx0OiB5ZXMKY29uZmln
dXJlOjIzNjc0OiBjaGVja2luZyBmb3IgYW4gQU5TSSBDLWNvbmZvcm1pbmcgY29uc3QKY29uZmln
dXJlOjIzNzQ5OiBpY2MgLWMgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1
ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZ0ZXN0LmMoMTA4KTogd2FybmluZyAjNTkyOiB2YXJpYWJs
ZSAidCIgaXMgdXNlZCBiZWZvcmUgaXRzIHZhbHVlIGlzIHNldAogICAgICAqdCsrID0gMDsKICAg
ICAgIF4KCmNvbmZ0ZXN0LmMoMTI0KTogd2FybmluZyAjNTkyOiB2YXJpYWJsZSAiYiIgaXMgdXNl
ZCBiZWZvcmUgaXRzIHZhbHVlIGlzIHNldAogICAgICBzdHJ1Y3QgcyAqYjsgYi0+aiA9IDU7CiAg
ICAgICAgICAgICAgICAgICBeCgpjb25mdGVzdC5jKDEzMCk6IHdhcm5pbmcgIzU5MjogdmFyaWFi
bGUgImNzIiBpcyB1c2VkIGJlZm9yZSBpdHMgdmFsdWUgaXMgc2V0CiAgICByZXR1cm4gIWNzWzBd
ICYmICF6ZXJvLng7CiAgICAgICAgICAgIF4KCmNvbmZpZ3VyZToyMzc1NTogJD8gPSAwCmNvbmZp
Z3VyZToyMzc3MDogcmVzdWx0OiB5ZXMKY29uZmlndXJlOjIzNzgyOiBjaGVja2luZyBmb3IgaWNj
IG9wdGlvbiB0byBhY2NlcHQgSVNPIEM5OQpjb25maWd1cmU6MjM5NDE6IGljYyAgLWMgLU8zIC1t
cCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1CmNvbmZ0
ZXN0LmMoMTI5KTogZXJyb3I6IGV4cGVjdGVkIGEgIikiCiAgdGVzdF9yZXN0cmljdCAoY2NwIHJl
c3RyaWN0IHRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF4KCmNvbmZ0ZXN0LmMo
MTM0KTogZXJyb3I6IGlkZW50aWZpZXIgInRleHQiIGlzIHVuZGVmaW5lZAogICAgZm9yICh1bnNp
Z25lZCBpbnQgaSA9IDA7ICoodGV4dCtpKSAhPSAnXDAnOyArK2kpCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICBeCgpjb25mdGVzdC5jKDE4Myk6IGVycm9yOiBleHBlY3RlZCBhICI7Igog
ICAgY2hhciAqcmVzdHJpY3QgbmV3dmFyID0gIkFub3RoZXIgc3RyaW5nIjsKICAgICAgICAgICAg
ICAgICAgIF4KCmNvbmZ0ZXN0LmMoMjA5KTogZXJyb3I6IGlkZW50aWZpZXIgIm5ld3ZhciIgaXMg
dW5kZWZpbmVkCiAgICByZXR1cm4gKCFzdWNjZXNzIHx8IGJpZ251bSA9PSAwTEwgfHwgdWJpZ251
bSA9PSAwdUxMIHx8IG5ld3ZhclswXSA9PSAneCcKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXgoKY29tcGlsYXRpb24gYWJvcnRlZCBm
b3IgY29uZnRlc3QuYyAoY29kZSAyKQpjb25maWd1cmU6MjM5NDc6ICQ/ID0gMgpjb25maWd1cmU6
IGZhaWxlZCBwcm9ncmFtIHdhczoKfCAvKiBjb25mZGVmcy5oLiAgKi8KfCAjZGVmaW5lIFBBQ0tB
R0VfTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKfCAjZGVmaW5lIFBBQ0tB
R0VfVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBQQUNLQUdFX1NUUklORyAiUiAyLjcuMSIKfCAj
ZGVmaW5lIFBBQ0tBR0VfQlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKfCAjZGVmaW5l
IFBBQ0tBR0UgIlIiCnwgI2RlZmluZSBWRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFJfUExBVEZP
Uk0gIng4Nl82NC11bmtub3duLWxpbnV4LWdudSIKfCAjZGVmaW5lIFJfQ1BVICJ4ODZfNjQiCnwg
I2RlZmluZSBSX1ZFTkRPUiAidW5rbm93biIKfCAjZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKfCAj
ZGVmaW5lIFVuaXggMQp8ICNkZWZpbmUgUl9BUkNIICIiCnwgI2RlZmluZSBIQVZFX1ZJU0lCSUxJ
VFlfQVRUUklCVVRFIDEKfCAjZGVmaW5lIF9HTlVfU09VUkNFIDEKfCAjZGVmaW5lIFNURENfSEVB
REVSUyAxCnwgI2RlZmluZSBIQVZFX1NZU19UWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NU
QVRfSCAxCnwgI2RlZmluZSBIQVZFX1NURExJQl9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HX0gg
MQp8ICNkZWZpbmUgSEFWRV9NRU1PUllfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwg
I2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJTlRfSCAxCnwgI2Rl
ZmluZSBIQVZFX1VOSVNURF9IIDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBM
VF9PQkpESVIgIi5saWJzLyIKfCAjZGVmaW5lIEhBVkVfTElCTSAxCnwgI2RlZmluZSBIQVZFX0xJ
QkRMIDEKfCAjZGVmaW5lIEhBVkVfUkVBRExJTkVfSElTVE9SWV9IIDEKfCAjZGVmaW5lIEhBVkVf
UkVBRExJTkVfUkVBRExJTkVfSCAxCnwgI2RlZmluZSBIQVZFX0xJQlJFQURMSU5FIDEKfCAjZGVm
aW5lIEhBVkVfUkxfQ09NUExFVElPTl9NQVRDSEVTIDEKfCAjZGVmaW5lIFNURENfSEVBREVSUyAx
CnwgI2RlZmluZSBUSU1FX1dJVEhfU1lTX1RJTUUgMQp8ICNkZWZpbmUgSEFWRV9ESVJFTlRfSCAx
CnwgI2RlZmluZSBIQVZFX1NZU19XQUlUX0ggMQp8ICNkZWZpbmUgSEFWRV9BUlBBX0lORVRfSCAx
CnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgSEFWRV9FTEZfSCAxCnwgI2RlZmlu
ZSBIQVZFX0ZDTlRMX0ggMQp8ICNkZWZpbmUgSEFWRV9GUFVfQ09OVFJPTF9IIDEKfCAjZGVmaW5l
IEhBVkVfR0xPQl9IIDEKfCAjZGVmaW5lIEhBVkVfR1JQX0ggMQp8ICNkZWZpbmUgSEFWRV9MSU1J
VFNfSCAxCnwgI2RlZmluZSBIQVZFX0xPQ0FMRV9IIDEKfCAjZGVmaW5lIEhBVkVfTkVUREJfSCAx
CnwgI2RlZmluZSBIQVZFX05FVElORVRfSU5fSCAxCnwgI2RlZmluZSBIQVZFX1BXRF9IIDEKfCAj
ZGVmaW5lIEhBVkVfU1REQk9PTF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RSSU5HU19IIDEKfCAjZGVm
aW5lIEhBVkVfU1lTX1BBUkFNX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU0VMRUNUX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TWVNfU09DS0VUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAj
ZGVmaW5lIEhBVkVfU1lTX1JFU09VUkNFX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVElNRV9IIDEK
fCAjZGVmaW5lIEhBVkVfU1lTX1RJTUVTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVVRTTkFNRV9I
IDEKfCAjZGVmaW5lIEhBVkVfVElNRV9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNk
ZWZpbmUgSEFWRV9FUlJOT19IIDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NUREFSR19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUgSEFW
RV9TVFJJTkdfSCAxCnwgI2RlZmluZSBIQVZFX0RFQ0xfU0lHU0VUSk1QIDEKfCAjZGVmaW5lIEhB
VkVfREVDTF9TSUdMT05HSk1QIDEKfCAjZGVmaW5lIEhBVkVfUE9TSVhfU0VUSk1QIDEKfCAjZGVm
aW5lIEhBVkVfR0xJQkMyIDEKfCAjZGVmaW5lIFJFVFNJR1RZUEUgdm9pZAp8ICNkZWZpbmUgUl9T
T0NLTEVOX1QgCnwgI2RlZmluZSBIQVZFX1NUQUNLX1QgMQp8ICNkZWZpbmUgSEFWRV9JTlRQVFJf
VCAxCnwgI2RlZmluZSBIQVZFX1VJTlRQVFJfVCAxCnwgI2RlZmluZSBXT1JEU19CSUdFTkRJQU4g
MQp8IC8qIGVuZCBjb25mZGVmcy5oLiAgKi8KfCAjaW5jbHVkZSA8c3RkYXJnLmg+CnwgI2luY2x1
ZGUgPHN0ZGJvb2wuaD4KfCAjaW5jbHVkZSA8c3RkbGliLmg+CnwgI2luY2x1ZGUgPHdjaGFyLmg+
CnwgI2luY2x1ZGUgPHN0ZGlvLmg+CnwgCnwgLy8gQ2hlY2sgdmFyYXJncyBtYWNyb3MuICBUaGVz
ZSBleGFtcGxlcyBhcmUgdGFrZW4gZnJvbSBDOTkgNi4xMC4zLjUuCnwgI2RlZmluZSBkZWJ1Zygu
Li4pIGZwcmludGYgKHN0ZGVyciwgX19WQV9BUkdTX18pCnwgI2RlZmluZSBzaG93bGlzdCguLi4p
IHB1dHMgKCNfX1ZBX0FSR1NfXykKfCAjZGVmaW5lIHJlcG9ydCh0ZXN0LC4uLikgKCh0ZXN0KSA/
IHB1dHMgKCN0ZXN0KSA6IHByaW50ZiAoX19WQV9BUkdTX18pKQp8IHN0YXRpYyB2b2lkCnwgdGVz
dF92YXJhcmdzX21hY3JvcyAodm9pZCkKfCB7CnwgICBpbnQgeCA9IDEyMzQ7CnwgICBpbnQgeSA9
IDU2Nzg7CnwgICBkZWJ1ZyAoIkZsYWciKTsKfCAgIGRlYnVnICgiWCA9ICVkXG4iLCB4KTsKfCAg
IHNob3dsaXN0IChUaGUgZmlyc3QsIHNlY29uZCwgYW5kIHRoaXJkIGl0ZW1zLik7CnwgICByZXBv
cnQgKHg+eSwgInggaXMgJWQgYnV0IHkgaXMgJWQiLCB4LCB5KTsKfCB9CnwgCnwgLy8gQ2hlY2sg
bG9uZyBsb25nIHR5cGVzLgp8ICNkZWZpbmUgQklHNjQgMTg0NDY3NDQwNzM3MDk1NTE2MTV1bGwK
fCAjZGVmaW5lIEJJRzMyIDQyOTQ5NjcyOTV1bAp8ICNkZWZpbmUgQklHX09LIChCSUc2NCAvIEJJ
RzMyID09IDQyOTQ5NjcyOTd1bGwgJiYgQklHNjQgJSBCSUczMiA9PSAwKQp8ICNpZiAhQklHX09L
CnwgICB5b3VyIHByZXByb2Nlc3NvciBpcyBicm9rZW47CnwgI2VuZGlmCnwgI2lmIEJJR19PSwp8
ICNlbHNlCnwgICB5b3VyIHByZXByb2Nlc3NvciBpcyBicm9rZW47CnwgI2VuZGlmCnwgc3RhdGlj
IGxvbmcgbG9uZyBpbnQgYmlnbnVtID0gLTkyMjMzNzIwMzY4NTQ3NzU4MDdMTDsKfCBzdGF0aWMg
dW5zaWduZWQgbG9uZyBsb25nIGludCB1YmlnbnVtID0gQklHNjQ7CnwgCnwgc3RydWN0IGluY29t
cGxldGVfYXJyYXkKfCB7CnwgICBpbnQgZGF0YXNpemU7CnwgICBkb3VibGUgZGF0YVtdOwp8IH07
CnwgCnwgc3RydWN0IG5hbWVkX2luaXQgewp8ICAgaW50IG51bWJlcjsKfCAgIGNvbnN0IHdjaGFy
X3QgKm5hbWU7CnwgICBkb3VibGUgYXZlcmFnZTsKfCB9Owp8IAp8IHR5cGVkZWYgY29uc3QgY2hh
ciAqY2NwOwp8IAp8IHN0YXRpYyBpbmxpbmUgaW50CnwgdGVzdF9yZXN0cmljdCAoY2NwIHJlc3Ry
aWN0IHRleHQpCnwgewp8ICAgLy8gU2VlIGlmIEMrKy1zdHlsZSBjb21tZW50cyB3b3JrLgp8ICAg
Ly8gSXRlcmF0ZSB0aHJvdWdoIGl0ZW1zIHZpYSB0aGUgcmVzdHJpY3RlZCBwb2ludGVyLgp8ICAg
Ly8gQWxzbyBjaGVjayBmb3IgZGVjbGFyYXRpb25zIGluIGZvciBsb29wcy4KfCAgIGZvciAodW5z
aWduZWQgaW50IGkgPSAwOyAqKHRleHQraSkgIT0gJ1wwJzsgKytpKQp8ICAgICBjb250aW51ZTsK
fCAgIHJldHVybiAwOwp8IH0KfCAKfCAvLyBDaGVjayB2YXJhcmdzIGFuZCB2YV9jb3B5Lgp8IHN0
YXRpYyB2b2lkCnwgdGVzdF92YXJhcmdzIChjb25zdCBjaGFyICpmb3JtYXQsIC4uLikKfCB7Cnwg
ICB2YV9saXN0IGFyZ3M7CnwgICB2YV9zdGFydCAoYXJncywgZm9ybWF0KTsKfCAgIHZhX2xpc3Qg
YXJnc19jb3B5Owp8ICAgdmFfY29weSAoYXJnc19jb3B5LCBhcmdzKTsKfCAKfCAgIGNvbnN0IGNo
YXIgKnN0cjsKfCAgIGludCBudW1iZXI7CnwgICBmbG9hdCBmbnVtYmVyOwp8IAp8ICAgd2hpbGUg
KCpmb3JtYXQpCnwgICAgIHsKfCAgICAgICBzd2l0Y2ggKCpmb3JtYXQrKykKfCAJewp8IAljYXNl
ICdzJzogLy8gc3RyaW5nCnwgCSAgc3RyID0gdmFfYXJnIChhcmdzX2NvcHksIGNvbnN0IGNoYXIg
Kik7CnwgCSAgYnJlYWs7CnwgCWNhc2UgJ2QnOiAvLyBpbnQKfCAJICBudW1iZXIgPSB2YV9hcmcg
KGFyZ3NfY29weSwgaW50KTsKfCAJICBicmVhazsKfCAJY2FzZSAnZic6IC8vIGZsb2F0CnwgCSAg
Zm51bWJlciA9IHZhX2FyZyAoYXJnc19jb3B5LCBkb3VibGUpOwp8IAkgIGJyZWFrOwp8IAlkZWZh
dWx0Ogp8IAkgIGJyZWFrOwp8IAl9CnwgICAgIH0KfCAgIHZhX2VuZCAoYXJnc19jb3B5KTsKfCAg
IHZhX2VuZCAoYXJncyk7CnwgfQp8IAp8IGludAp8IG1haW4gKCkKfCB7CnwgCnwgICAvLyBDaGVj
ayBib29sLgp8ICAgX0Jvb2wgc3VjY2VzcyA9IGZhbHNlOwp8IAp8ICAgLy8gQ2hlY2sgcmVzdHJp
Y3QuCnwgICBpZiAodGVzdF9yZXN0cmljdCAoIlN0cmluZyBsaXRlcmFsIikgPT0gMCkKfCAgICAg
c3VjY2VzcyA9IHRydWU7CnwgICBjaGFyICpyZXN0cmljdCBuZXd2YXIgPSAiQW5vdGhlciBzdHJp
bmciOwp8IAp8ICAgLy8gQ2hlY2sgdmFyYXJncy4KfCAgIHRlc3RfdmFyYXJncyAoInMsIGQnIGYg
LiIsICJzdHJpbmciLCA2NSwgMzQuMjM0KTsKfCAgIHRlc3RfdmFyYXJnc19tYWNyb3MgKCk7Cnwg
CnwgICAvLyBDaGVjayBmbGV4aWJsZSBhcnJheSBtZW1iZXJzLgp8ICAgc3RydWN0IGluY29tcGxl
dGVfYXJyYXkgKmlhID0KfCAgICAgbWFsbG9jIChzaXplb2YgKHN0cnVjdCBpbmNvbXBsZXRlX2Fy
cmF5KSArIChzaXplb2YgKGRvdWJsZSkgKiAxMCkpOwp8ICAgaWEtPmRhdGFzaXplID0gMTA7Cnwg
ICBmb3IgKGludCBpID0gMDsgaSA8IGlhLT5kYXRhc2l6ZTsgKytpKQp8ICAgICBpYS0+ZGF0YVtp
XSA9IGkgKiAxLjIzNDsKfCAKfCAgIC8vIENoZWNrIG5hbWVkIGluaXRpYWxpemVycy4KfCAgIHN0
cnVjdCBuYW1lZF9pbml0IG5pID0gewp8ICAgICAubnVtYmVyID0gMzQsCnwgICAgIC5uYW1lID0g
TCJUZXN0IHdpZGUgc3RyaW5nIiwKfCAgICAgLmF2ZXJhZ2UgPSA1NDMuMzQzNDMsCnwgICB9Owp8
IAp8ICAgbmkubnVtYmVyID0gNTg7CnwgCnwgICBpbnQgZHluYW1pY19hcnJheVtuaS5udW1iZXJd
Owp8ICAgZHluYW1pY19hcnJheVtuaS5udW1iZXIgLSAxXSA9IDU0MzsKfCAKfCAgIC8vIHdvcmsg
YXJvdW5kIHVudXNlZCB2YXJpYWJsZSB3YXJuaW5ncwp8ICAgcmV0dXJuICghc3VjY2VzcyB8fCBi
aWdudW0gPT0gMExMIHx8IHViaWdudW0gPT0gMHVMTCB8fCBuZXd2YXJbMF0gPT0gJ3gnCnwgCSAg
fHwgZHluYW1pY19hcnJheVtuaS5udW1iZXIgLSAxXSAhPSA1NDMpOwp8IAp8ICAgOwp8ICAgcmV0
dXJuIDA7CnwgfQpjb25maWd1cmU6MjM5NDE6IGljYyAtc3RkPWdudTk5IC1jIC1PMyAtbXAgLUkv
b3B0L2ludGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jID4mNQpjb25mdGVzdC5j
KDEyOSk6IGVycm9yOiBleHBlY3RlZCBhICIpIgogIHRlc3RfcmVzdHJpY3QgKGNjcCByZXN0cmlj
dCB0ZXh0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeCgpjb25mdGVzdC5jKDEzNCk6
IGVycm9yOiBpZGVudGlmaWVyICJ0ZXh0IiBpcyB1bmRlZmluZWQKICAgIGZvciAodW5zaWduZWQg
aW50IGkgPSAwOyAqKHRleHQraSkgIT0gJ1wwJzsgKytpKQogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgXgoKY29uZnRlc3QuYygxODMpOiBlcnJvcjogZXhwZWN0ZWQgYSAiOyIKICAgIGNo
YXIgKnJlc3RyaWN0IG5ld3ZhciA9ICJBbm90aGVyIHN0cmluZyI7CiAgICAgICAgICAgICAgICAg
ICBeCgpjb25mdGVzdC5jKDIwOSk6IGVycm9yOiBpZGVudGlmaWVyICJuZXd2YXIiIGlzIHVuZGVm
aW5lZAogICAgcmV0dXJuICghc3VjY2VzcyB8fCBiaWdudW0gPT0gMExMIHx8IHViaWdudW0gPT0g
MHVMTCB8fCBuZXd2YXJbMF0gPT0gJ3gnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF4KCmNvbXBpbGF0aW9uIGFib3J0ZWQgZm9yIGNv
bmZ0ZXN0LmMgKGNvZGUgMikKY29uZmlndXJlOjIzOTQ3OiAkPyA9IDIKY29uZmlndXJlOiBmYWls
ZWQgcHJvZ3JhbSB3YXM6CnwgLyogY29uZmRlZnMuaC4gICovCnwgI2RlZmluZSBQQUNLQUdFX05B
TUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1RBUk5BTUUgIlIiCnwgI2RlZmluZSBQQUNLQUdFX1ZF
UlNJT04gIjIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9TVFJJTkcgIlIgMi43LjEiCnwgI2RlZmlu
ZSBQQUNLQUdFX0JVR1JFUE9SVCAici1idWdzQFItcHJvamVjdC5vcmciCnwgI2RlZmluZSBQQUNL
QUdFICJSIgp8ICNkZWZpbmUgVkVSU0lPTiAiMi43LjEiCnwgI2RlZmluZSBSX1BMQVRGT1JNICJ4
ODZfNjQtdW5rbm93bi1saW51eC1nbnUiCnwgI2RlZmluZSBSX0NQVSAieDg2XzY0Igp8ICNkZWZp
bmUgUl9WRU5ET1IgInVua25vd24iCnwgI2RlZmluZSBSX09TICJsaW51eC1nbnUiCnwgI2RlZmlu
ZSBVbml4IDEKfCAjZGVmaW5lIFJfQVJDSCAiIgp8ICNkZWZpbmUgSEFWRV9WSVNJQklMSVRZX0FU
VFJJQlVURSAxCnwgI2RlZmluZSBfR05VX1NPVVJDRSAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMg
MQp8ICNkZWZpbmUgSEFWRV9TWVNfVFlQRVNfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TVEFUX0gg
MQp8ICNkZWZpbmUgSEFWRV9TVERMSUJfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAj
ZGVmaW5lIEhBVkVfTUVNT1JZX0ggMQp8ICNkZWZpbmUgSEFWRV9TVFJJTkdTX0ggMQp8ICNkZWZp
bmUgSEFWRV9JTlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1RESU5UX0ggMQp8ICNkZWZpbmUg
SEFWRV9VTklTVERfSCAxCnwgI2RlZmluZSBIQVZFX0RMRkNOX0ggMQp8ICNkZWZpbmUgTFRfT0JK
RElSICIubGlicy8iCnwgI2RlZmluZSBIQVZFX0xJQk0gMQp8ICNkZWZpbmUgSEFWRV9MSUJETCAx
CnwgI2RlZmluZSBIQVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCnwgI2RlZmluZSBIQVZFX1JFQURM
SU5FX1JFQURMSU5FX0ggMQp8ICNkZWZpbmUgSEFWRV9MSUJSRUFETElORSAxCnwgI2RlZmluZSBI
QVZFX1JMX0NPTVBMRVRJT05fTUFUQ0hFUyAxCnwgI2RlZmluZSBTVERDX0hFQURFUlMgMQp8ICNk
ZWZpbmUgVElNRV9XSVRIX1NZU19USU1FIDEKfCAjZGVmaW5lIEhBVkVfRElSRU5UX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TWVNfV0FJVF9IIDEKfCAjZGVmaW5lIEhBVkVfQVJQQV9JTkVUX0ggMQp8ICNk
ZWZpbmUgSEFWRV9ETEZDTl9IIDEKfCAjZGVmaW5lIEhBVkVfRUxGX0ggMQp8ICNkZWZpbmUgSEFW
RV9GQ05UTF9IIDEKfCAjZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCnwgI2RlZmluZSBIQVZF
X0dMT0JfSCAxCnwgI2RlZmluZSBIQVZFX0dSUF9IIDEKfCAjZGVmaW5lIEhBVkVfTElNSVRTX0gg
MQp8ICNkZWZpbmUgSEFWRV9MT0NBTEVfSCAxCnwgI2RlZmluZSBIQVZFX05FVERCX0ggMQp8ICNk
ZWZpbmUgSEFWRV9ORVRJTkVUX0lOX0ggMQp8ICNkZWZpbmUgSEFWRV9QV0RfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NUREJPT0xfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR1NfSCAxCnwgI2RlZmluZSBI
QVZFX1NZU19QQVJBTV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NFTEVDVF9IIDEKfCAjZGVmaW5l
IEhBVkVfU1lTX1NPQ0tFVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1NUQVRfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NZU19SRVNPVVJDRV9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RJTUVfSCAxCnwgI2Rl
ZmluZSBIQVZFX1NZU19USU1FU19IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1VUU05BTUVfSCAxCnwg
I2RlZmluZSBIQVZFX1RJTUVfSCAxCnwgI2RlZmluZSBIQVZFX1VOSVNURF9IIDEKfCAjZGVmaW5l
IEhBVkVfRVJSTk9fSCAxCnwgI2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQp8ICNkZWZpbmUgSEFW
RV9TVERBUkdfSCAxCnwgI2RlZmluZSBIQVZFX1NURElOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RS
SU5HX0ggMQp8ICNkZWZpbmUgSEFWRV9ERUNMX1NJR1NFVEpNUCAxCnwgI2RlZmluZSBIQVZFX0RF
Q0xfU0lHTE9OR0pNUCAxCnwgI2RlZmluZSBIQVZFX1BPU0lYX1NFVEpNUCAxCnwgI2RlZmluZSBI
QVZFX0dMSUJDMiAxCnwgI2RlZmluZSBSRVRTSUdUWVBFIHZvaWQKfCAjZGVmaW5lIFJfU09DS0xF
Tl9UIAp8ICNkZWZpbmUgSEFWRV9TVEFDS19UIDEKfCAjZGVmaW5lIEhBVkVfSU5UUFRSX1QgMQp8
ICNkZWZpbmUgSEFWRV9VSU5UUFRSX1QgMQp8ICNkZWZpbmUgV09SRFNfQklHRU5ESUFOIDEKfCAv
KiBlbmQgY29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPHN0ZGFyZy5oPgp8ICNpbmNsdWRlIDxz
dGRib29sLmg+CnwgI2luY2x1ZGUgPHN0ZGxpYi5oPgp8ICNpbmNsdWRlIDx3Y2hhci5oPgp8ICNp
bmNsdWRlIDxzdGRpby5oPgp8IAp8IC8vIENoZWNrIHZhcmFyZ3MgbWFjcm9zLiAgVGhlc2UgZXhh
bXBsZXMgYXJlIHRha2VuIGZyb20gQzk5IDYuMTAuMy41Lgp8ICNkZWZpbmUgZGVidWcoLi4uKSBm
cHJpbnRmIChzdGRlcnIsIF9fVkFfQVJHU19fKQp8ICNkZWZpbmUgc2hvd2xpc3QoLi4uKSBwdXRz
ICgjX19WQV9BUkdTX18pCnwgI2RlZmluZSByZXBvcnQodGVzdCwuLi4pICgodGVzdCkgPyBwdXRz
ICgjdGVzdCkgOiBwcmludGYgKF9fVkFfQVJHU19fKSkKfCBzdGF0aWMgdm9pZAp8IHRlc3RfdmFy
YXJnc19tYWNyb3MgKHZvaWQpCnwgewp8ICAgaW50IHggPSAxMjM0Owp8ICAgaW50IHkgPSA1Njc4
Owp8ICAgZGVidWcgKCJGbGFnIik7CnwgICBkZWJ1ZyAoIlggPSAlZFxuIiwgeCk7CnwgICBzaG93
bGlzdCAoVGhlIGZpcnN0LCBzZWNvbmQsIGFuZCB0aGlyZCBpdGVtcy4pOwp8ICAgcmVwb3J0ICh4
PnksICJ4IGlzICVkIGJ1dCB5IGlzICVkIiwgeCwgeSk7CnwgfQp8IAp8IC8vIENoZWNrIGxvbmcg
bG9uZyB0eXBlcy4KfCAjZGVmaW5lIEJJRzY0IDE4NDQ2NzQ0MDczNzA5NTUxNjE1dWxsCnwgI2Rl
ZmluZSBCSUczMiA0Mjk0OTY3Mjk1dWwKfCAjZGVmaW5lIEJJR19PSyAoQklHNjQgLyBCSUczMiA9
PSA0Mjk0OTY3Mjk3dWxsICYmIEJJRzY0ICUgQklHMzIgPT0gMCkKfCAjaWYgIUJJR19PSwp8ICAg
eW91ciBwcmVwcm9jZXNzb3IgaXMgYnJva2VuOwp8ICNlbmRpZgp8ICNpZiBCSUdfT0sKfCAjZWxz
ZQp8ICAgeW91ciBwcmVwcm9jZXNzb3IgaXMgYnJva2VuOwp8ICNlbmRpZgp8IHN0YXRpYyBsb25n
IGxvbmcgaW50IGJpZ251bSA9IC05MjIzMzcyMDM2ODU0Nzc1ODA3TEw7Cnwgc3RhdGljIHVuc2ln
bmVkIGxvbmcgbG9uZyBpbnQgdWJpZ251bSA9IEJJRzY0Owp8IAp8IHN0cnVjdCBpbmNvbXBsZXRl
X2FycmF5Cnwgewp8ICAgaW50IGRhdGFzaXplOwp8ICAgZG91YmxlIGRhdGFbXTsKfCB9Owp8IAp8
IHN0cnVjdCBuYW1lZF9pbml0IHsKfCAgIGludCBudW1iZXI7CnwgICBjb25zdCB3Y2hhcl90ICpu
YW1lOwp8ICAgZG91YmxlIGF2ZXJhZ2U7CnwgfTsKfCAKfCB0eXBlZGVmIGNvbnN0IGNoYXIgKmNj
cDsKfCAKfCBzdGF0aWMgaW5saW5lIGludAp8IHRlc3RfcmVzdHJpY3QgKGNjcCByZXN0cmljdCB0
ZXh0KQp8IHsKfCAgIC8vIFNlZSBpZiBDKystc3R5bGUgY29tbWVudHMgd29yay4KfCAgIC8vIEl0
ZXJhdGUgdGhyb3VnaCBpdGVtcyB2aWEgdGhlIHJlc3RyaWN0ZWQgcG9pbnRlci4KfCAgIC8vIEFs
c28gY2hlY2sgZm9yIGRlY2xhcmF0aW9ucyBpbiBmb3IgbG9vcHMuCnwgICBmb3IgKHVuc2lnbmVk
IGludCBpID0gMDsgKih0ZXh0K2kpICE9ICdcMCc7ICsraSkKfCAgICAgY29udGludWU7CnwgICBy
ZXR1cm4gMDsKfCB9CnwgCnwgLy8gQ2hlY2sgdmFyYXJncyBhbmQgdmFfY29weS4KfCBzdGF0aWMg
dm9pZAp8IHRlc3RfdmFyYXJncyAoY29uc3QgY2hhciAqZm9ybWF0LCAuLi4pCnwgewp8ICAgdmFf
bGlzdCBhcmdzOwp8ICAgdmFfc3RhcnQgKGFyZ3MsIGZvcm1hdCk7CnwgICB2YV9saXN0IGFyZ3Nf
Y29weTsKfCAgIHZhX2NvcHkgKGFyZ3NfY29weSwgYXJncyk7CnwgCnwgICBjb25zdCBjaGFyICpz
dHI7CnwgICBpbnQgbnVtYmVyOwp8ICAgZmxvYXQgZm51bWJlcjsKfCAKfCAgIHdoaWxlICgqZm9y
bWF0KQp8ICAgICB7CnwgICAgICAgc3dpdGNoICgqZm9ybWF0KyspCnwgCXsKfCAJY2FzZSAncyc6
IC8vIHN0cmluZwp8IAkgIHN0ciA9IHZhX2FyZyAoYXJnc19jb3B5LCBjb25zdCBjaGFyICopOwp8
IAkgIGJyZWFrOwp8IAljYXNlICdkJzogLy8gaW50CnwgCSAgbnVtYmVyID0gdmFfYXJnIChhcmdz
X2NvcHksIGludCk7CnwgCSAgYnJlYWs7CnwgCWNhc2UgJ2YnOiAvLyBmbG9hdAp8IAkgIGZudW1i
ZXIgPSB2YV9hcmcgKGFyZ3NfY29weSwgZG91YmxlKTsKfCAJICBicmVhazsKfCAJZGVmYXVsdDoK
fCAJICBicmVhazsKfCAJfQp8ICAgICB9CnwgICB2YV9lbmQgKGFyZ3NfY29weSk7CnwgICB2YV9l
bmQgKGFyZ3MpOwp8IH0KfCAKfCBpbnQKfCBtYWluICgpCnwgewp8IAp8ICAgLy8gQ2hlY2sgYm9v
bC4KfCAgIF9Cb29sIHN1Y2Nlc3MgPSBmYWxzZTsKfCAKfCAgIC8vIENoZWNrIHJlc3RyaWN0Lgp8
ICAgaWYgKHRlc3RfcmVzdHJpY3QgKCJTdHJpbmcgbGl0ZXJhbCIpID09IDApCnwgICAgIHN1Y2Nl
c3MgPSB0cnVlOwp8ICAgY2hhciAqcmVzdHJpY3QgbmV3dmFyID0gIkFub3RoZXIgc3RyaW5nIjsK
fCAKfCAgIC8vIENoZWNrIHZhcmFyZ3MuCnwgICB0ZXN0X3ZhcmFyZ3MgKCJzLCBkJyBmIC4iLCAi
c3RyaW5nIiwgNjUsIDM0LjIzNCk7CnwgICB0ZXN0X3ZhcmFyZ3NfbWFjcm9zICgpOwp8IAp8ICAg
Ly8gQ2hlY2sgZmxleGlibGUgYXJyYXkgbWVtYmVycy4KfCAgIHN0cnVjdCBpbmNvbXBsZXRlX2Fy
cmF5ICppYSA9CnwgICAgIG1hbGxvYyAoc2l6ZW9mIChzdHJ1Y3QgaW5jb21wbGV0ZV9hcnJheSkg
KyAoc2l6ZW9mIChkb3VibGUpICogMTApKTsKfCAgIGlhLT5kYXRhc2l6ZSA9IDEwOwp8ICAgZm9y
IChpbnQgaSA9IDA7IGkgPCBpYS0+ZGF0YXNpemU7ICsraSkKfCAgICAgaWEtPmRhdGFbaV0gPSBp
ICogMS4yMzQ7CnwgCnwgICAvLyBDaGVjayBuYW1lZCBpbml0aWFsaXplcnMuCnwgICBzdHJ1Y3Qg
bmFtZWRfaW5pdCBuaSA9IHsKfCAgICAgLm51bWJlciA9IDM0LAp8ICAgICAubmFtZSA9IEwiVGVz
dCB3aWRlIHN0cmluZyIsCnwgICAgIC5hdmVyYWdlID0gNTQzLjM0MzQzLAp8ICAgfTsKfCAKfCAg
IG5pLm51bWJlciA9IDU4Owp8IAp8ICAgaW50IGR5bmFtaWNfYXJyYXlbbmkubnVtYmVyXTsKfCAg
IGR5bmFtaWNfYXJyYXlbbmkubnVtYmVyIC0gMV0gPSA1NDM7CnwgCnwgICAvLyB3b3JrIGFyb3Vu
ZCB1bnVzZWQgdmFyaWFibGUgd2FybmluZ3MKfCAgIHJldHVybiAoIXN1Y2Nlc3MgfHwgYmlnbnVt
ID09IDBMTCB8fCB1YmlnbnVtID09IDB1TEwgfHwgbmV3dmFyWzBdID09ICd4Jwp8IAkgIHx8IGR5
bmFtaWNfYXJyYXlbbmkubnVtYmVyIC0gMV0gIT0gNTQzKTsKfCAKfCAgIDsKfCAgIHJldHVybiAw
Owp8IH0KY29uZmlndXJlOjIzOTQxOiBpY2MgLWM5OSAtYyAtTzMgLW1wIC1JL29wdC9pbnRlbC9j
Y2UvMTAuMS4wMTUvaW5jbHVkZS8gY29uZnRlc3QuYyA+JjUKaWNjOiBjb21tYW5kIGxpbmUgcmVt
YXJrICMxMDAxMDogb3B0aW9uICctYzk5JyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92
ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gU2VlICctaGVscCBkZXByZWNhdGVkJwpjb25maWd1cmU6
MjM5NDc6ICQ/ID0gMApjb25maWd1cmU6MjM5Nzc6IHJlc3VsdDogLWM5OQpjb25maWd1cmU6MjQx
MDc6IGNoZWNraW5nIGZvciBpY2MgLWM5OSBvcHRpb24gdG8gYWNjZXB0IElTTyBTdGFuZGFyZCBD
CmNvbmZpZ3VyZToyNDExODogcmVzdWx0OiAtYzk5CmNvbmZpZ3VyZToyNDEyMzogY2hlY2tpbmcg
Zm9yIGlubGluZQpjb25maWd1cmU6MjQxNDg6IGljYyAtYzk5IC1jIC1PMyAtbXAgLUkvb3B0L2lu
dGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLyBjb25mdGVzdC5jID4mNQppY2M6IGNvbW1hbmQgbGlu
ZSByZW1hcmsgIzEwMDEwOiBvcHRpb24gJy1jOTknIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUg
cmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiBTZWUgJy1oZWxwIGRlcHJlY2F0ZWQnCmNvbmZp
Z3VyZToyNDE1NDogJD8gPSAwCmNvbmZpZ3VyZToyNDE3MTogcmVzdWx0OiBpbmxpbmUKY29uZmln
dXJlOjI0MTg1OiBjaGVja2luZyBmb3IgaW50CmNvbmZpZ3VyZToyNDIxNTogaWNjIC1jOTkgLWMg
LU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvIGNvbmZ0ZXN0LmMgPiY1
CmljYzogY29tbWFuZCBsaW5lIHJlbWFyayAjMTAwMTA6IG9wdGlvbiAnLWM5OScgaXMgZGVwcmVj
YXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIFNlZSAnLWhlbHAg
ZGVwcmVjYXRlZCcKY29uZnRlc3QuYygxMTcpOiB3YXJuaW5nICMyNzk6IGNvbnRyb2xsaW5nIGV4
cHJlc3Npb24gaXMgY29uc3RhbnQKICBpZiAoKGFjX190eXBlX25ld18gKikgMCkKICAgICAgXgoK
Y29uZmlndXJlOjI0MjIxOiAkPyA9IDAKY29uZmlndXJlOjI0MjM2OiByZXN1bHQ6IHllcwpjb25m
aWd1cmU6MjQyNDM6IGNoZWNraW5nIHNpemUgb2YgaW50CmNvbmZpZ3VyZToyNDU0NTogaWNjIC1j
OTkgLW8gY29uZnRlc3QgLU8zIC1tcCAtSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUv
IC1ML3Vzci9sb2NhbC9saWI2NCBjb25mdGVzdC5jIC1sZGwgLWxtICA+JjUKaWNjOiBjb21tYW5k
IGxpbmUgcmVtYXJrICMxMDAxMDogb3B0aW9uICctYzk5JyBpcyBkZXByZWNhdGVkIGFuZCB3aWxs
IGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gU2VlICctaGVscCBkZXByZWNhdGVkJwpj
b25maWd1cmU6MjQ1NDg6ICQ/ID0gMApjb25maWd1cmU6MjQ1NTQ6IC4vY29uZnRlc3QKLi9jb25m
dGVzdDogZXJyb3Igd2hpbGUgbG9hZGluZyBzaGFyZWQgbGlicmFyaWVzOiBsaWJpbWYuc286IGNh
bm5vdCBvcGVuIHNoYXJlZCBvYmplY3QgZmlsZTogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQpj
b25maWd1cmU6MjQ1NTc6ICQ/ID0gMTI3CmNvbmZpZ3VyZTogcHJvZ3JhbSBleGl0ZWQgd2l0aCBz
dGF0dXMgMTI3CmNvbmZpZ3VyZTogZmFpbGVkIHByb2dyYW0gd2FzOgp8IC8qIGNvbmZkZWZzLmgu
ICAqLwp8ICNkZWZpbmUgUEFDS0FHRV9OQU1FICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9UQVJOQU1F
ICJSIgp8ICNkZWZpbmUgUEFDS0FHRV9WRVJTSU9OICIyLjcuMSIKfCAjZGVmaW5lIFBBQ0tBR0Vf
U1RSSU5HICJSIDIuNy4xIgp8ICNkZWZpbmUgUEFDS0FHRV9CVUdSRVBPUlQgInItYnVnc0BSLXBy
b2plY3Qub3JnIgp8ICNkZWZpbmUgUEFDS0FHRSAiUiIKfCAjZGVmaW5lIFZFUlNJT04gIjIuNy4x
Igp8ICNkZWZpbmUgUl9QTEFURk9STSAieDg2XzY0LXVua25vd24tbGludXgtZ251Igp8ICNkZWZp
bmUgUl9DUFUgIng4Nl82NCIKfCAjZGVmaW5lIFJfVkVORE9SICJ1bmtub3duIgp8ICNkZWZpbmUg
Ul9PUyAibGludXgtZ251Igp8ICNkZWZpbmUgVW5peCAxCnwgI2RlZmluZSBSX0FSQ0ggIiIKfCAj
ZGVmaW5lIEhBVkVfVklTSUJJTElUWV9BVFRSSUJVVEUgMQp8ICNkZWZpbmUgX0dOVV9TT1VSQ0Ug
MQp8ICNkZWZpbmUgU1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1RZUEVTX0ggMQp8
ICNkZWZpbmUgSEFWRV9TWVNfU1RBVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1RETElCX0ggMQp8ICNk
ZWZpbmUgSEFWRV9TVFJJTkdfSCAxCnwgI2RlZmluZSBIQVZFX01FTU9SWV9IIDEKfCAjZGVmaW5l
IEhBVkVfU1RSSU5HU19IIDEKfCAjZGVmaW5lIEhBVkVfSU5UVFlQRVNfSCAxCnwgI2RlZmluZSBI
QVZFX1NURElOVF9IIDEKfCAjZGVmaW5lIEhBVkVfVU5JU1REX0ggMQp8ICNkZWZpbmUgSEFWRV9E
TEZDTl9IIDEKfCAjZGVmaW5lIExUX09CSkRJUiAiLmxpYnMvIgp8ICNkZWZpbmUgSEFWRV9MSUJN
IDEKfCAjZGVmaW5lIEhBVkVfTElCREwgMQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9ISVNUT1JZ
X0ggMQp8ICNkZWZpbmUgSEFWRV9SRUFETElORV9SRUFETElORV9IIDEKfCAjZGVmaW5lIEhBVkVf
TElCUkVBRExJTkUgMQp8ICNkZWZpbmUgSEFWRV9STF9DT01QTEVUSU9OX01BVENIRVMgMQp8ICNk
ZWZpbmUgU1REQ19IRUFERVJTIDEKfCAjZGVmaW5lIFRJTUVfV0lUSF9TWVNfVElNRSAxCnwgI2Rl
ZmluZSBIQVZFX0RJUkVOVF9IIDEKfCAjZGVmaW5lIEhBVkVfU1lTX1dBSVRfSCAxCnwgI2RlZmlu
ZSBIQVZFX0FSUEFfSU5FVF9IIDEKfCAjZGVmaW5lIEhBVkVfRExGQ05fSCAxCnwgI2RlZmluZSBI
QVZFX0VMRl9IIDEKfCAjZGVmaW5lIEhBVkVfRkNOVExfSCAxCnwgI2RlZmluZSBIQVZFX0ZQVV9D
T05UUk9MX0ggMQp8ICNkZWZpbmUgSEFWRV9HTE9CX0ggMQp8ICNkZWZpbmUgSEFWRV9HUlBfSCAx
CnwgI2RlZmluZSBIQVZFX0xJTUlUU19IIDEKfCAjZGVmaW5lIEhBVkVfTE9DQUxFX0ggMQp8ICNk
ZWZpbmUgSEFWRV9ORVREQl9IIDEKfCAjZGVmaW5lIEhBVkVfTkVUSU5FVF9JTl9IIDEKfCAjZGVm
aW5lIEhBVkVfUFdEX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERCT09MX0ggMQp8ICNkZWZpbmUgSEFW
RV9TVFJJTkdTX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfUEFSQU1fSCAxCnwgI2RlZmluZSBIQVZF
X1NZU19TRUxFQ1RfSCAxCnwgI2RlZmluZSBIQVZFX1NZU19TT0NLRVRfSCAxCnwgI2RlZmluZSBI
QVZFX1NZU19TVEFUX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfUkVTT1VSQ0VfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NZU19USU1FX0ggMQp8ICNkZWZpbmUgSEFWRV9TWVNfVElNRVNfSCAxCnwgI2RlZmlu
ZSBIQVZFX1NZU19VVFNOQU1FX0ggMQp8ICNkZWZpbmUgSEFWRV9USU1FX0ggMQp8ICNkZWZpbmUg
SEFWRV9VTklTVERfSCAxCnwgI2RlZmluZSBIQVZFX0VSUk5PX0ggMQp8ICNkZWZpbmUgSEFWRV9J
TlRUWVBFU19IIDEKfCAjZGVmaW5lIEhBVkVfU1REQVJHX0ggMQp8ICNkZWZpbmUgSEFWRV9TVERJ
TlRfSCAxCnwgI2RlZmluZSBIQVZFX1NUUklOR19IIDEKfCAjZGVmaW5lIEhBVkVfREVDTF9TSUdT
RVRKTVAgMQp8ICNkZWZpbmUgSEFWRV9ERUNMX1NJR0xPTkdKTVAgMQp8ICNkZWZpbmUgSEFWRV9Q
T1NJWF9TRVRKTVAgMQp8ICNkZWZpbmUgSEFWRV9HTElCQzIgMQp8ICNkZWZpbmUgUkVUU0lHVFlQ
RSB2b2lkCnwgI2RlZmluZSBSX1NPQ0tMRU5fVCAKfCAjZGVmaW5lIEhBVkVfU1RBQ0tfVCAxCnwg
I2RlZmluZSBIQVZFX0lOVFBUUl9UIDEKfCAjZGVmaW5lIEhBVkVfVUlOVFBUUl9UIDEKfCAjZGVm
aW5lIFdPUkRTX0JJR0VORElBTiAxCnwgI2RlZmluZSBSX0lOTElORSBpbmxpbmUKfCAvKiBlbmQg
Y29uZmRlZnMuaC4gICovCnwgI2luY2x1ZGUgPHN0ZGlvLmg+CnwgI2lmZGVmIEhBVkVfU1lTX1RZ
UEVTX0gKfCAjIGluY2x1ZGUgPHN5cy90eXBlcy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZFX1NZ
U19TVEFUX0gKfCAjIGluY2x1ZGUgPHN5cy9zdGF0Lmg+CnwgI2VuZGlmCnwgI2lmZGVmIFNURENf
SEVBREVSUwp8ICMgaW5jbHVkZSA8c3RkbGliLmg+CnwgIyBpbmNsdWRlIDxzdGRkZWYuaD4KfCAj
ZWxzZQp8ICMgaWZkZWYgSEFWRV9TVERMSUJfSAp8ICMgIGluY2x1ZGUgPHN0ZGxpYi5oPgp8ICMg
ZW5kaWYKfCAjZW5kaWYKfCAjaWZkZWYgSEFWRV9TVFJJTkdfSAp8ICMgaWYgIWRlZmluZWQgU1RE
Q19IRUFERVJTICYmIGRlZmluZWQgSEFWRV9NRU1PUllfSAp8ICMgIGluY2x1ZGUgPG1lbW9yeS5o
Pgp8ICMgZW5kaWYKfCAjIGluY2x1ZGUgPHN0cmluZy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZF
X1NUUklOR1NfSAp8ICMgaW5jbHVkZSA8c3RyaW5ncy5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZF
X0lOVFRZUEVTX0gKfCAjIGluY2x1ZGUgPGludHR5cGVzLmg+CnwgI2VuZGlmCnwgI2lmZGVmIEhB
VkVfU1RESU5UX0gKfCAjIGluY2x1ZGUgPHN0ZGludC5oPgp8ICNlbmRpZgp8ICNpZmRlZiBIQVZF
X1VOSVNURF9ICnwgIyBpbmNsdWRlIDx1bmlzdGQuaD4KfCAjZW5kaWYKfCAgICB0eXBlZGVmIGlu
dCBhY19fdHlwZV9zaXplb2ZfOwp8IHN0YXRpYyBsb25nIGludCBsb25ndmFsICgpIHsgcmV0dXJu
IChsb25nIGludCkgKHNpemVvZiAoYWNfX3R5cGVfc2l6ZW9mXykpOyB9Cnwgc3RhdGljIHVuc2ln
bmVkIGxvbmcgaW50IHVsb25ndmFsICgpIHsgcmV0dXJuIChsb25nIGludCkgKHNpemVvZiAoYWNf
X3R5cGVfc2l6ZW9mXykpOyB9CnwgI2luY2x1ZGUgPHN0ZGlvLmg+CnwgI2luY2x1ZGUgPHN0ZGxp
Yi5oPgp8IGludAp8IG1haW4gKCkKfCB7CnwgCnwgICBGSUxFICpmID0gZm9wZW4gKCJjb25mdGVz
dC52YWwiLCAidyIpOwp8ICAgaWYgKCEgZikKfCAgICAgcmV0dXJuIDE7CnwgICBpZiAoKChsb25n
IGludCkgKHNpemVvZiAoYWNfX3R5cGVfc2l6ZW9mXykpKSA8IDApCnwgICAgIHsKfCAgICAgICBs
b25nIGludCBpID0gbG9uZ3ZhbCAoKTsKfCAgICAgICBpZiAoaSAhPSAoKGxvbmcgaW50KSAoc2l6
ZW9mIChhY19fdHlwZV9zaXplb2ZfKSkpKQp8IAlyZXR1cm4gMTsKfCAgICAgICBmcHJpbnRmIChm
LCAiJWxkXG4iLCBpKTsKfCAgICAgfQp8ICAgZWxzZQp8ICAgICB7CnwgICAgICAgdW5zaWduZWQg
bG9uZyBpbnQgaSA9IHVsb25ndmFsICgpOwp8ICAgICAgIGlmIChpICE9ICgobG9uZyBpbnQpIChz
aXplb2YgKGFjX190eXBlX3NpemVvZl8pKSkpCnwgCXJldHVybiAxOwp8ICAgICAgIGZwcmludGYg
KGYsICIlbHVcbiIsIGkpOwp8ICAgICB9CnwgICByZXR1cm4gZmVycm9yIChmKSB8fCBmY2xvc2Ug
KGYpICE9IDA7CnwgCnwgICA7CnwgICByZXR1cm4gMDsKfCB9CmNvbmZpZ3VyZToyNDU2ODogZXJy
b3I6IGNhbm5vdCBjb21wdXRlIHNpemVvZiAoaW50KQpTZWUgYGNvbmZpZy5sb2cnIGZvciBtb3Jl
IGRldGFpbHMuCgojIyAtLS0tLS0tLS0tLS0tLS0tICMjCiMjIENhY2hlIHZhcmlhYmxlcy4gIyMK
IyMgLS0tLS0tLS0tLS0tLS0tLSAjIwoKYWNfY3ZfYnVpbGQ9eDg2XzY0LXVua25vd24tbGludXgt
Z251CmFjX2N2X2NfYmlnZW5kaWFuPXllcwphY19jdl9jX2NvbXBpbGVyX2dudT15ZXMKYWNfY3Zf
Y19jb25zdD15ZXMKYWNfY3ZfY3h4X2NvbXBpbGVyX2dudT15ZXMKYWNfY3ZfZW52X0JMQVNfTElC
U19zZXQ9CmFjX2N2X2Vudl9CTEFTX0xJQlNfdmFsdWU9CmFjX2N2X2Vudl9DQ0Nfc2V0PQphY19j
dl9lbnZfQ0NDX3ZhbHVlPQphY19jdl9lbnZfQ0Nfc2V0PXNldAphY19jdl9lbnZfQ0NfdmFsdWU9
aWNjCmFjX2N2X2Vudl9DRkxBR1Nfc2V0PXNldAphY19jdl9lbnZfQ0ZMQUdTX3ZhbHVlPSctTzMg
LW1wJwphY19jdl9lbnZfQ1BJQ0ZMQUdTX3NldD1zZXQKYWNfY3ZfZW52X0NQSUNGTEFHU192YWx1
ZT0tc2hhcmVkCmFjX2N2X2Vudl9DUFBGTEFHU19zZXQ9c2V0CmFjX2N2X2Vudl9DUFBGTEFHU192
YWx1ZT0tSS9vcHQvaW50ZWwvY2NlLzEwLjEuMDE1L2luY2x1ZGUvCmFjX2N2X2Vudl9DUFBfc2V0
PQphY19jdl9lbnZfQ1BQX3ZhbHVlPQphY19jdl9lbnZfQ1hYQ1BQX3NldD0KYWNfY3ZfZW52X0NY
WENQUF92YWx1ZT0KYWNfY3ZfZW52X0NYWEZMQUdTX3NldD1zZXQKYWNfY3ZfZW52X0NYWEZMQUdT
X3ZhbHVlPSctTzMgLW1wJwphY19jdl9lbnZfQ1hYUElDRkxBR1Nfc2V0PXNldAphY19jdl9lbnZf
Q1hYUElDRkxBR1NfdmFsdWU9LXNoYXJlZAphY19jdl9lbnZfQ1hYX3NldD1zZXQKYWNfY3ZfZW52
X0NYWF92YWx1ZT1pY2MKYWNfY3ZfZW52X0RFRlNfc2V0PQphY19jdl9lbnZfREVGU192YWx1ZT0K
YWNfY3ZfZW52X0RZTElCX0xERkxBR1Nfc2V0PQphY19jdl9lbnZfRFlMSUJfTERGTEFHU192YWx1
ZT0KYWNfY3ZfZW52X0RZTElCX0xEX3NldD0KYWNfY3ZfZW52X0RZTElCX0xEX3ZhbHVlPQphY19j
dl9lbnZfRjc3X3NldD1zZXQKYWNfY3ZfZW52X0Y3N192YWx1ZT1pZm9ydAphY19jdl9lbnZfRkNG
TEFHU19zZXQ9CmFjX2N2X2Vudl9GQ0ZMQUdTX3ZhbHVlPQphY19jdl9lbnZfRkNQSUNGTEFHU19z
ZXQ9CmFjX2N2X2Vudl9GQ1BJQ0ZMQUdTX3ZhbHVlPQphY19jdl9lbnZfRkNfc2V0PQphY19jdl9l
bnZfRkNfdmFsdWU9CmFjX2N2X2Vudl9GRkxBR1Nfc2V0PXNldAphY19jdl9lbnZfRkZMQUdTX3Zh
bHVlPSctQzkwIC13OTAgLXc5NSAtbXAnCmFjX2N2X2Vudl9GUElDRkxBR1Nfc2V0PXNldAphY19j
dl9lbnZfRlBJQ0ZMQUdTX3ZhbHVlPS1zaGFyZWQKYWNfY3ZfZW52X0pBVkFfSE9NRV9zZXQ9c2V0
CmFjX2N2X2Vudl9KQVZBX0hPTUVfdmFsdWU9L3Vzci9saWI2NC9qdm0vamF2YQphY19jdl9lbnZf
TEFQQUNLX0xJQlNfc2V0PQphY19jdl9lbnZfTEFQQUNLX0xJQlNfdmFsdWU9CmFjX2N2X2Vudl9M
REZMQUdTX3NldD0KYWNfY3ZfZW52X0xERkxBR1NfdmFsdWU9CmFjX2N2X2Vudl9MSUJTX3NldD0K
YWNfY3ZfZW52X0xJQlNfdmFsdWU9CmFjX2N2X2Vudl9MSUJubl9zZXQ9CmFjX2N2X2Vudl9MSUJu
bl92YWx1ZT0KYWNfY3ZfZW52X01BSU5fQ0ZMQUdTX3NldD0KYWNfY3ZfZW52X01BSU5fQ0ZMQUdT
X3ZhbHVlPQphY19jdl9lbnZfTUFJTl9GRkxBR1Nfc2V0PQphY19jdl9lbnZfTUFJTl9GRkxBR1Nf
dmFsdWU9CmFjX2N2X2Vudl9NQUlOX0xERkxBR1Nfc2V0PQphY19jdl9lbnZfTUFJTl9MREZMQUdT
X3ZhbHVlPQphY19jdl9lbnZfTUFJTl9MRF9zZXQ9CmFjX2N2X2Vudl9NQUlOX0xEX3ZhbHVlPQph
Y19jdl9lbnZfTUFLRV9zZXQ9CmFjX2N2X2Vudl9NQUtFX3ZhbHVlPQphY19jdl9lbnZfT0JKQ0ZM
QUdTX3NldD0KYWNfY3ZfZW52X09CSkNGTEFHU192YWx1ZT0KYWNfY3ZfZW52X09CSkNfc2V0PQph
Y19jdl9lbnZfT0JKQ192YWx1ZT0KYWNfY3ZfZW52X1JfQkFUQ0hTQVZFX3NldD0KYWNfY3ZfZW52
X1JfQkFUQ0hTQVZFX3ZhbHVlPQphY19jdl9lbnZfUl9CUk9XU0VSX3NldD0KYWNfY3ZfZW52X1Jf
QlJPV1NFUl92YWx1ZT0KYWNfY3ZfZW52X1JfUEFQRVJTSVpFX3NldD0KYWNfY3ZfZW52X1JfUEFQ
RVJTSVpFX3ZhbHVlPQphY19jdl9lbnZfUl9QUklOVENNRF9zZXQ9CmFjX2N2X2Vudl9SX1BSSU5U
Q01EX3ZhbHVlPQphY19jdl9lbnZfU0FGRV9GRkxBR1Nfc2V0PQphY19jdl9lbnZfU0FGRV9GRkxB
R1NfdmFsdWU9CmFjX2N2X2Vudl9TSExJQl9DRkxBR1Nfc2V0PQphY19jdl9lbnZfU0hMSUJfQ0ZM
QUdTX3ZhbHVlPQphY19jdl9lbnZfU0hMSUJfQ1hYTERGTEFHU19zZXQ9c2V0CmFjX2N2X2Vudl9T
SExJQl9DWFhMREZMQUdTX3ZhbHVlPS1zaGFyZWQKYWNfY3ZfZW52X1NITElCX0NYWExEX3NldD0K
YWNfY3ZfZW52X1NITElCX0NYWExEX3ZhbHVlPQphY19jdl9lbnZfU0hMSUJfRkNEX3NldD0KYWNf
Y3ZfZW52X1NITElCX0ZDRF92YWx1ZT0KYWNfY3ZfZW52X1NITElCX0ZDTERGTEFHU19zZXQ9CmFj
X2N2X2Vudl9TSExJQl9GQ0xERkxBR1NfdmFsdWU9CmFjX2N2X2Vudl9TSExJQl9GRkxBR1Nfc2V0
PQphY19jdl9lbnZfU0hMSUJfRkZMQUdTX3ZhbHVlPQphY19jdl9lbnZfU0hMSUJfTERGTEFHU19z
ZXQ9c2V0CmFjX2N2X2Vudl9TSExJQl9MREZMQUdTX3ZhbHVlPS1zaGFyZWQKYWNfY3ZfZW52X1NI
TElCX0xEX3NldD0KYWNfY3ZfZW52X1NITElCX0xEX3ZhbHVlPQphY19jdl9lbnZfVENMVEtfQ1BQ
RkxBR1Nfc2V0PQphY19jdl9lbnZfVENMVEtfQ1BQRkxBR1NfdmFsdWU9CmFjX2N2X2Vudl9UQ0xU
S19MSUJTX3NldD0KYWNfY3ZfZW52X1RDTFRLX0xJQlNfdmFsdWU9CmFjX2N2X2Vudl9YTUtNRl9z
ZXQ9CmFjX2N2X2Vudl9YTUtNRl92YWx1ZT0KYWNfY3ZfZW52X1lBQ0Nfc2V0PQphY19jdl9lbnZf
WUFDQ192YWx1ZT0KYWNfY3ZfZW52X1lGTEFHU19zZXQ9CmFjX2N2X2Vudl9ZRkxBR1NfdmFsdWU9
CmFjX2N2X2Vudl9idWlsZF9hbGlhc19zZXQ9CmFjX2N2X2Vudl9idWlsZF9hbGlhc192YWx1ZT0K
YWNfY3ZfZW52X2hvc3RfYWxpYXNfc2V0PQphY19jdl9lbnZfaG9zdF9hbGlhc192YWx1ZT0KYWNf
Y3ZfZW52X3JfYXJjaF9zZXQ9CmFjX2N2X2Vudl9yX2FyY2hfdmFsdWU9CmFjX2N2X2Vudl90YXJn
ZXRfYWxpYXNfc2V0PQphY19jdl9lbnZfdGFyZ2V0X2FsaWFzX3ZhbHVlPQphY19jdl9mNzdfY29t
cGlsZXJfZ251PW5vCmFjX2N2X2Z1bmNfaGlzdG9yeV90cnVuY2F0ZV9maWxlPW5vCmFjX2N2X2hh
dmVfZGVjbF9ybF9jb21wbGV0aW9uX21hdGNoZXM9eWVzCmFjX2N2X2hhdmVfZGVjbF9zaWdsb25n
am1wPXllcwphY19jdl9oYXZlX2RlY2xfc2lnc2V0am1wPXllcwphY19jdl9oZWFkZXJfYXJwYV9p
bmV0X2g9eWVzCmFjX2N2X2hlYWRlcl9kaXJlbnRfZGlyZW50X2g9eWVzCmFjX2N2X2hlYWRlcl9k
bF9oPW5vCmFjX2N2X2hlYWRlcl9kbGZjbl9oPXllcwphY19jdl9oZWFkZXJfZWxmX2g9eWVzCmFj
X2N2X2hlYWRlcl9lcnJub19oPXllcwphY19jdl9oZWFkZXJfZmNudGxfaD15ZXMKYWNfY3ZfaGVh
ZGVyX2Zsb2F0aW5ncG9pbnRfaD1ubwphY19jdl9oZWFkZXJfZnB1X2NvbnRyb2xfaD15ZXMKYWNf
Y3ZfaGVhZGVyX2dsb2JfaD15ZXMKYWNfY3ZfaGVhZGVyX2dycF9oPXllcwphY19jdl9oZWFkZXJf
aW50dHlwZXNfaD15ZXMKYWNfY3ZfaGVhZGVyX2xpbWl0c19oPXllcwphY19jdl9oZWFkZXJfbG9j
YWxlX2g9eWVzCmFjX2N2X2hlYWRlcl9tZW1vcnlfaD15ZXMKYWNfY3ZfaGVhZGVyX25ldGRiX2g9
eWVzCmFjX2N2X2hlYWRlcl9uZXRpbmV0X2luX2g9eWVzCmFjX2N2X2hlYWRlcl9wd2RfaD15ZXMK
YWNfY3ZfaGVhZGVyX3JlYWRsaW5lX2hpc3RvcnlfaD15ZXMKYWNfY3ZfaGVhZGVyX3JlYWRsaW5l
X3JlYWRsaW5lX2g9eWVzCmFjX2N2X2hlYWRlcl9zdGRhcmdfaD15ZXMKYWNfY3ZfaGVhZGVyX3N0
ZGJvb2xfaD15ZXMKYWNfY3ZfaGVhZGVyX3N0ZGM9eWVzCmFjX2N2X2hlYWRlcl9zdGRpbnRfaD15
ZXMKYWNfY3ZfaGVhZGVyX3N0ZGxpYl9oPXllcwphY19jdl9oZWFkZXJfc3RyaW5nX2g9eWVzCmFj
X2N2X2hlYWRlcl9zdHJpbmdzX2g9eWVzCmFjX2N2X2hlYWRlcl9zeXNfcGFyYW1faD15ZXMKYWNf
Y3ZfaGVhZGVyX3N5c19yZXNvdXJjZV9oPXllcwphY19jdl9oZWFkZXJfc3lzX3NlbGVjdF9oPXll
cwphY19jdl9oZWFkZXJfc3lzX3NvY2tldF9oPXllcwphY19jdl9oZWFkZXJfc3lzX3N0YXRfaD15
ZXMKYWNfY3ZfaGVhZGVyX3N5c190aW1lX2g9eWVzCmFjX2N2X2hlYWRlcl9zeXNfdGltZXNfaD15
ZXMKYWNfY3ZfaGVhZGVyX3N5c190eXBlc19oPXllcwphY19jdl9oZWFkZXJfc3lzX3V0c25hbWVf
aD15ZXMKYWNfY3ZfaGVhZGVyX3N5c193YWl0X2g9eWVzCmFjX2N2X2hlYWRlcl90aW1lPXllcwph
Y19jdl9oZWFkZXJfdGltZV9oPXllcwphY19jdl9oZWFkZXJfdW5pc3RkX2g9eWVzCmFjX2N2X2hv
c3Q9eDg2XzY0LXVua25vd24tbGludXgtZ251CmFjX2N2X2xpYl9kbF9kbG9wZW49eWVzCmFjX2N2
X2xpYl9tX2Nvcz15ZXMKYWNfY3ZfbGliX21fc2luPXllcwphY19jdl9saWJfcmVhZGxpbmVfcmxf
Y2FsbGJhY2tfcmVhZF9jaGFyPXllcwphY19jdl9vYmpjX2NvbXBpbGVyX2dudT15ZXMKYWNfY3Zf
b2JqZXh0PW8KYWNfY3ZfcGF0aF9EVklQUz0vdXNyL2Jpbi9kdmlwcwphY19jdl9wYXRoX0VHUkVQ
PScvdXNyL2Jpbi9ncmVwIC1FJwphY19jdl9wYXRoX0ZHUkVQPScvdXNyL2Jpbi9ncmVwIC1GJwph
Y19jdl9wYXRoX0dFVFdEPS9iaW4vcHdkCmFjX2N2X3BhdGhfR1JFUD0vdXNyL2Jpbi9ncmVwCmFj
X2N2X3BhdGhfTEFURVg9L3Vzci9iaW4vbGF0ZXgKYWNfY3ZfcGF0aF9NQUtFSU5ERVg9L3Vzci9i
aW4vbWFrZWluZGV4CmFjX2N2X3BhdGhfTUFLRUlORk89L3Vzci9iaW4vbWFrZWluZm8KYWNfY3Zf
cGF0aF9QQUdFUj0vdXNyL2Jpbi9sZXNzCmFjX2N2X3BhdGhfUERGTEFURVg9L3Vzci9iaW4vcGRm
bGF0ZXgKYWNfY3ZfcGF0aF9QREZURVg9L3Vzci9iaW4vcGRmdGV4CmFjX2N2X3BhdGhfUEVSTD0v
dXNyL2Jpbi9wZXJsCmFjX2N2X3BhdGhfUEtHQ09ORj0vdXNyL2Jpbi9wa2ctY29uZmlnCmFjX2N2
X3BhdGhfUl9CUk9XU0VSPS91c3IvYmluL2ZpcmVmb3gKYWNfY3ZfcGF0aF9SX0daSVBDTUQ9L3Vz
ci9iaW4vZ3ppcAphY19jdl9wYXRoX1JfUERGVklFV0VSPS91c3IvYmluL2Fjcm9yZWFkCmFjX2N2
X3BhdGhfUl9VTlpJUENNRD0vdXNyL2Jpbi91bnppcAphY19jdl9wYXRoX1JfWklQQ01EPS91c3Iv
YmluL3ppcAphY19jdl9wYXRoX1NFRD0vdXNyL2Jpbi9zZWQKYWNfY3ZfcGF0aF9URVg9L3Vzci9i
aW4vdGV4CmFjX2N2X3BhdGhfVEVYSTJEVkk9L3Vzci9iaW4vdGV4aTJkdmkKYWNfY3ZfcGF0aF9p
bnN0YWxsPScvdXNyL2Jpbi9pbnN0YWxsIC1jJwphY19jdl9wcm9nX0FSPWFyCmFjX2N2X3Byb2df
QVdLPWdhd2sKYWNfY3ZfcHJvZ19DUFA9L2xpYi9jcHAKYWNfY3ZfcHJvZ19DWFhDUFA9L2xpYi9j
cHAKYWNfY3ZfcHJvZ19ZQUNDPSdiaXNvbiAteScKYWNfY3ZfcHJvZ19hY19jdF9DQz1pY2MKYWNf
Y3ZfcHJvZ19hY19jdF9PQkpDPWdjYwphY19jdl9wcm9nX2FjX2N0X1JBTkxJQj1yYW5saWIKYWNf
Y3ZfcHJvZ19hY19jdF9TVFJJUD1zdHJpcAphY19jdl9wcm9nX2NjX2M4OT0KYWNfY3ZfcHJvZ19j
Y19jOTk9LWM5OQphY19jdl9wcm9nX2NjX2c9eWVzCmFjX2N2X3Byb2dfY2Nfc3RkYz0tYzk5CmFj
X2N2X3Byb2dfY3h4X2c9eWVzCmFjX2N2X3Byb2dfZjc3X2c9eWVzCmFjX2N2X3Byb2dfZ2NjX3Ry
YWRpdGlvbmFsPW5vCmFjX2N2X3Byb2dfb2JqY19nPXllcwphY19jdl9zZWFyY2hfb3BlbmRpcj0n
bm9uZSByZXF1aXJlZCcKYWNfY3ZfdHlwZV9ibGtjbnRfdD15ZXMKYWNfY3ZfdHlwZV9pbnQ9eWVz
CmFjX2N2X3R5cGVfaW50cHRyX3Q9eWVzCmFjX2N2X3R5cGVfcGlkX3Q9eWVzCmFjX2N2X3R5cGVf
c2lnbmFsPXZvaWQKYWNfY3ZfdHlwZV9zaXplX3Q9eWVzCmFjX2N2X3R5cGVfc3RhY2tfdD15ZXMK
YWNfY3ZfdHlwZV91aW50cHRyX3Q9eWVzCmx0X2N2X2RlcGxpYnNfY2hlY2tfbWV0aG9kPXBhc3Nf
YWxsCmx0X2N2X2ZpbGVfbWFnaWNfY21kPSckTUFHSUNfQ01EJwpsdF9jdl9maWxlX21hZ2ljX3Rl
c3RfZmlsZT0KbHRfY3ZfbGRfcmVsb2FkX2ZsYWc9LXIKbHRfY3Zfbm1faW50ZXJmYWNlPSdCU0Qg
bm0nCmx0X2N2X29iamRpcj0ubGlicwpsdF9jdl9wYXRoX0xEPS91c3IvYmluL2xkCmx0X2N2X3Bh
dGhfTERDWFg9Jy91c3IvYmluL2xkIC1tIGVsZl94ODZfNjQnCmx0X2N2X3BhdGhfTk09Jy91c3Iv
YmluL25tIC1CJwpsdF9jdl9wcm9nX2NvbXBpbGVyX2Nfbz15ZXMKbHRfY3ZfcHJvZ19jb21waWxl
cl9jX29fQ1hYPXllcwpsdF9jdl9wcm9nX2NvbXBpbGVyX2Nfb19GNzc9eWVzCmx0X2N2X3Byb2df
Y29tcGlsZXJfcGljX3dvcmtzPXllcwpsdF9jdl9wcm9nX2NvbXBpbGVyX3BpY193b3Jrc19DWFg9
eWVzCmx0X2N2X3Byb2dfY29tcGlsZXJfcGljX3dvcmtzX0Y3Nz1ubwpsdF9jdl9wcm9nX2NvbXBp
bGVyX3J0dGlfZXhjZXB0aW9ucz15ZXMKbHRfY3ZfcHJvZ19jb21waWxlcl9zdGF0aWNfd29ya3M9
eWVzCmx0X2N2X3Byb2dfY29tcGlsZXJfc3RhdGljX3dvcmtzX0NYWD15ZXMKbHRfY3ZfcHJvZ19j
b21waWxlcl9zdGF0aWNfd29ya3NfRjc3PXllcwpsdF9jdl9wcm9nX2dudV9sZD15ZXMKbHRfY3Zf
cHJvZ19nbnVfbGRjeHg9eWVzCmx0X2N2X3N5c19nbG9iYWxfc3ltYm9sX3BpcGU9J3NlZCAtbiAt
ZSAnXCcncy9eLipbCSBdXChbQUJDREdJUlNUV11bQUJDREdJUlNUV10qXClbCSBdWwkgXSpcKFtf
QS1aYS16XVtfQS1aYS16MC05XSpcKSQvXDEgXDIgXDIvcCdcJycnCmx0X2N2X3N5c19nbG9iYWxf
c3ltYm9sX3RvX2NfbmFtZV9hZGRyZXNzPSdzZWQgLW4gLWUgJ1wnJ3MvXjogXChbXiBdKlwpICQv
ICB7XCJcMVwiLCAodm9pZCAqKSAwfSwvcCdcJycgLWUgJ1wnJ3MvXltBQkNER0lSU1RXXSogXChb
XiBdKlwpIFwoW14gXSpcKSQvICB7IlwyIiwgKHZvaWQgKikgXCZcMn0sL3AnXCcnJwpsdF9jdl9z
eXNfZ2xvYmFsX3N5bWJvbF90b19jX25hbWVfYWRkcmVzc19saWJfcHJlZml4PSdzZWQgLW4gLWUg
J1wnJ3MvXjogXChbXiBdKlwpICQvICB7XCJcMVwiLCAodm9pZCAqKSAwfSwvcCdcJycgLWUgJ1wn
J3MvXltBQkNER0lSU1RXXSogXChbXiBdKlwpIFwobGliW14gXSpcKSQvICB7IlwyIiwgKHZvaWQg
KikgXCZcMn0sL3AnXCcnIC1lICdcJydzL15bQUJDREdJUlNUV10qIFwoW14gXSpcKSBcKFteIF0q
XCkkLyAgeyJsaWJcMiIsICh2b2lkICopIFwmXDJ9LC9wJ1wnJycKbHRfY3Zfc3lzX2dsb2JhbF9z
eW1ib2xfdG9fY2RlY2w9J3NlZCAtbiAtZSAnXCcncy9eVCAuKiBcKC4qXCkkL2V4dGVybiBpbnQg
XDEoKTsvcCdcJycgLWUgJ1wnJ3MvXltBQkNER0lSU1RXXSogLiogXCguKlwpJC9leHRlcm4gY2hh
ciBcMTsvcCdcJycnCmx0X2N2X3N5c19tYXhfY21kX2xlbj0xNTcyODY0CnJfY3ZfT0JKQ1hYPWlj
YwpyX2N2X2NfaW5saW5lPWlubGluZQpyX2N2X2hlYWRlcl9nbGliYzI9eWVzCnJfY3ZfaGVhZGVy
X3NldGptcF9wb3NpeD15ZXMKcl9jdl9wcm9nX2NjX3Zpcz15ZXMKcl9jdl9wcm9nX2Y3N192aXM9
eWVzCnJfY3ZfcHJvZ19tYWtlaW5mb192ND15ZXMKcl9jdl9wcm9nX3BlcmxfdjU9eWVzCnJfY3Zf
c2l6ZV9tYXg9bm8Kcl9jdl90eXBlX3NvY2tsZW49CnJfY3ZfdmlzaWJpbGl0eV9hdHRyaWJ1dGU9
eWVzCgojIyAtLS0tLS0tLS0tLS0tLS0tLSAjIwojIyBPdXRwdXQgdmFyaWFibGVzLiAjIwojIyAt
LS0tLS0tLS0tLS0tLS0tLSAjIwoKQUNMT0NBTD0nYWNsb2NhbCcKQUxMT0NBPScnCkFSPSdhcicK
QVJGTEFHUz0ncmMnCkFVVE9DT05GPSdhdXRvY29uZicKQVVUT0hFQURFUj0nYXV0b2hlYWRlcicK
QVVUT01BS0U9J2F1dG9tYWtlJwpBV0s9J2dhd2snCkJJVE1BUF9MSUJTPScnCkJMQVNfTElCUzA9
JycKQkxBU19MSUJTPScnCkJMQVNfU0hMSUJfRkFMU0U9JycKQkxBU19TSExJQl9UUlVFPScnCkJV
SUxERElSX0lTX1NSQ0RJUj0neWVzJwpCVUlMRF9BUVVBX0ZBTFNFPScnCkJVSUxEX0FRVUFfVFJV
RT0nJwpCVUlMRF9CWkxJQl9GQUxTRT0nJwpCVUlMRF9CWkxJQl9UUlVFPScnCkJVSUxEX0NDPScn
CkJVSUxEX0NZR1dJTl9GQUxTRT0nJwpCVUlMRF9DWUdXSU5fVFJVRT0nJwpCVUlMRF9JTkNMVURF
RF9MSUJJTlRMPScnCkJVSUxEX0pBVkExNF9GQUxTRT0nJwpCVUlMRF9KQVZBMTRfVFJVRT0nJwpC
VUlMRF9MSUJJTlRMX0ZBTFNFPScnCkJVSUxEX0xJQklOVExfVFJVRT0nJwpCVUlMRF9QQ1JFX0ZB
TFNFPScnCkJVSUxEX1BDUkVfVFJVRT0nJwpCVUlMRF9SPScnCkJVSUxEX1hEUl9GQUxTRT0nJwpC
VUlMRF9YRFJfVFJVRT0nJwpCVUlMRF9aTElCX0ZBTFNFPScnCkJVSUxEX1pMSUJfVFJVRT0nJwpD
QUlST19DUFBGTEFHUz0nJwpDQUlST19MSUJTPScnCkNBVE9CSkVYVD0nJwpDQz0naWNjIC1jOTkn
CkNGTEFHUz0nLU8zIC1tcCcKQ0ZMQUdfVklTSUJJTElUWT0nJwpDT01QSUxFX0ZPUlRSQU5fRE9V
QkxFX0NPTVBMRVhfRkFMU0U9JycKQ09NUElMRV9GT1JUUkFOX0RPVUJMRV9DT01QTEVYX1RSVUU9
JycKQ1BJQ0ZMQUdTPSctc2hhcmVkJwpDUFA9Jy9saWIvY3BwJwpDUFBGTEFHUz0nLUkvb3B0L2lu
dGVsL2NjZS8xMC4xLjAxNS9pbmNsdWRlLycKQ1JPU1NfQ09NUElMSU5HX0ZBTFNFPScnCkNST1NT
X0NPTVBJTElOR19UUlVFPScjJwpDWFg9J2ljYycKQ1hYQ1BQPScvbGliL2NwcCcKQ1hYRkxBR1M9
Jy1PMyAtbXAnCkNYWFBJQ0ZMQUdTPSctc2hhcmVkJwpDX1ZJU0lCSUxJVFk9JycKREFUQURJUk5B
TUU9JycKREVGUz0nJwpEU1lNVVRJTD0nJwpEVU1QQklOPScnCkRWSVBTPScvdXNyL2Jpbi9kdmlw
cycKRFlMSUJfRVhUPScnCkRZTElCX0xEPScnCkRZTElCX0xERkxBR1M9JycKRFlMSUJfVU5ERUZJ
TkVEX0FMTE9XRURfRkFMU0U9JycKRFlMSUJfVU5ERUZJTkVEX0FMTE9XRURfVFJVRT0nJwpFQ0hP
X0M9JycKRUNIT19OPSctbicKRUNIT19UPScnCkVHUkVQPScvdXNyL2Jpbi9ncmVwIC1FJwpFWEVF
WFQ9JycKRjc3PSdpZm9ydCcKRjc3X1ZJU0lCSUxJVFk9JycKRkM9JycKRkNGTEFHUz0nJwpGQ0ZM
QUdTX2Y5MD0nJwpGQ0ZMQUdTX2Y5NT0nJwpGQ1BJQ0ZMQUdTPScnCkZGTEFHUz0nLUM5MCAtdzkw
IC13OTUgLW1wJwpGR1JFUD0nL3Vzci9iaW4vZ3JlcCAtRicKRkxJQlM9JycKRk9VTkRBVElPTl9D
UFBGTEFHUz0nJwpGT1VOREFUSU9OX0xJQlM9JycKRlBJQ0ZMQUdTPSctc2hhcmVkJwpGV19WRVJT
SU9OPScnCkdFTkNBVD0nJwpHRVRXRD0nL2Jpbi9wd2QnCkdMSUJDMjE9JycKR0xJQkMyPScnCkdN
U0dGTVQ9JycKR01TR0ZNVF8wMTU9JycKR1JFUD0nL3Vzci9iaW4vZ3JlcCcKSEFWRV9BU1BSSU5U
Rj0nJwpIQVZFX0M5OV9DT01QTEVYPScnCkhBVkVfRk9SVFJBTl9ET1VCTEVfQ09NUExFWD0nJwpI
QVZFX1BPU0lYX1BSSU5URj0nJwpIQVZFX1NOUFJJTlRGPScnCkhBVkVfVklTSUJJTElUWT0nJwpI
QVZFX1dQUklOVEY9JycKSU5TVEFMTF9EQVRBPScke0lOU1RBTEx9IC1tIDY0NCcKSU5TVEFMTF9J
TkZPPSckKFBFUkwpICQodG9wX3NyY2RpcikvdG9vbHMvaW5zdGFsbC1pbmZvLnBsJwpJTlNUQUxM
X1BST0dSQU09JyR7SU5TVEFMTH0nCklOU1RBTExfU0NSSVBUPScke0lOU1RBTEx9JwpJTlNUT0JK
RVhUPScnCklOVExCSVNPTj0nJwpJTlRMTElCUz0nJwpJTlRMT0JKUz0nJwpJTlRMX0xJQlRPT0xf
U1VGRklYX1BSRUZJWD0nJwpJTlRMX01BQ09TWF9MSUJTPScnCkpBUj0nJwpKQVZBPScnCkpBVkFD
MTQ9JycKSkFWQUM9JycKSkFWQUg9JycKSkFWQV9DUFBGTEFHUzA9JycKSkFWQV9IT01FPScvdXNy
L2xpYjY0L2p2bS9qYXZhJwpKQVZBX0xEX0xJQlJBUllfUEFUSD0nJwpKQVZBX0xJQlMwPScnCkxB
UEFDS19MREZMQUdTPScnCkxBUEFDS19MSUJTPScnCkxBVEVYPScvdXNyL2Jpbi9sYXRleCcKTEQ9
Jy91c3IvYmluL2xkIC1tIGVsZl94ODZfNjQnCkxERkxBR1M9Jy1ML3Vzci9sb2NhbC9saWI2NCcK
TElCSUNPTlY9JycKTElCSU5UTD0nJwpMSUJNPSctbG0nCkxJQk1VTFRJVEhSRUFEPScnCkxJQk9C
SlM9JycKTElCUFRIPScnCkxJQlI9JycKTElCUl9MREZMQUdTPScnCkxJQlM9Jy1sZGwgLWxtICcK
TElCVEhSRUFEPScnCkxJQlRPT0w9JyQoU0hFTEwpICQodG9wX2J1aWxkZGlyKS9saWJ0b29sJwpM
SUJUT09MX0RFUFM9J3Rvb2xzL2x0bWFpbi5zaCcKTElCbm49J2xpYjY0JwpMTl9TPSdsbiAtcycK
TFRMSUJJQ09OVj0nJwpMVExJQklOVEw9JycKTFRMSUJNVUxUSVRIUkVBRD0nJwpMVExJQk9CSlM9
JycKTFRMSUJQVEg9JycKTFRMSUJUSFJFQUQ9JycKTUFJTlRBSU5FUl9NT0RFX0ZBTFNFPScnCk1B
SU5UQUlORVJfTU9ERV9UUlVFPScjJwpNQUlOX0NGTEFHUz0nJwpNQUlOX0ZGTEFHUz0nJwpNQUlO
X0xEPScnCk1BSU5fTERGTEFHUz0nJwpNQUpfTUlOX1ZFUlNJT049JzIuNycKTUFLRT0nbWFrZScK
TUFLRUlOREVYPScvdXNyL2Jpbi9tYWtlaW5kZXgnCk1BS0VJTkZPPScvdXNyL2Jpbi9tYWtlaW5m
bycKTVNHRk1UPScnCk1TR0ZNVF8wMTU9JycKTVNHTUVSR0U9JycKTk09Jy91c3IvYmluL25tIC1C
JwpOTUVESVQ9JycKT0JKQz0nZ2NjJwpPQkpDRkxBR1M9Jy1nIC1PMicKT0JKQ1hYPSdpY2MnCk9C
SkNYWEZMQUdTPScnCk9CSkNfTElCUz0nJwpPQkpFWFQ9J28nCk9TRl9TSF9CVUc9JycKUEFDS0FH
RT0nUicKUEFDS0FHRV9CVUdSRVBPUlQ9J3ItYnVnc0BSLXByb2plY3Qub3JnJwpQQUNLQUdFX05B
TUU9J1InClBBQ0tBR0VfU1RSSU5HPSdSIDIuNy4xJwpQQUNLQUdFX1RBUk5BTUU9J1InClBBQ0tB
R0VfVkVSU0lPTj0nMi43LjEnClBBR0VSPScvdXNyL2Jpbi9sZXNzJwpQQVBFUkNPTkY9JycKUEFU
SF9TRVBBUkFUT1I9JzonClBERkxBVEVYPScvdXNyL2Jpbi9wZGZsYXRleCcKUERGVEVYPScvdXNy
L2Jpbi9wZGZ0ZXgnClBFUkw9Jy91c3IvYmluL3BlcmwnClBLR0NPTkY9Jy91c3IvYmluL3BrZy1j
b25maWcnClBPU1VCPScnClBSSV9NQUNST1NfQlJPS0VOPScnClJBTkxJQj0ncmFubGliJwpSQkxB
U19MREZMQUdTPScnClJFQURMSU5FX0xJQlM9Jy1scmVhZGxpbmUgJwpSTEFQQUNLX0xERkxBR1M9
JycKUk1BVEhfSEFWRV9FWFBNMT0nJwpSTUFUSF9IQVZFX0xPRzFQPScnClJNQVRIX0hBVkVfV09S
S0lOR19MT0cxUD0nJwpSX0FSQ0g9JycKUl9CQVRDSFNBVkU9JycKUl9CUk9XU0VSPScvdXNyL2Jp
bi9maXJlZm94JwpSX0RFRlM9JycKUl9HWklQQ01EPScvdXNyL2Jpbi9nemlwJwpSX0pBVkFfTERf
TElCUkFSWV9QQVRIPScnClJfTERfTElCUkFSWV9QQVRIPScvdXNyL2xvY2FsL2xpYjY0JwpSX01P
RFVMRVM9JycKUl9PUz0nbGludXgtZ251JwpSX09TVFlQRT0ndW5peCcKUl9QQVBFUlNJWkU9JycK
Ul9QREZWSUVXRVI9Jy91c3IvYmluL2Fjcm9yZWFkJwpSX1BMQVRGT1JNPSd4ODZfNjQtdW5rbm93
bi1saW51eC1nbnUnClJfUFJJTlRDTUQ9JycKUl9QUk9GSUxJTkc9JycKUl9SRDREVkk9J2FlJwpS
X1JENFBERj0ndGltZXMsaHlwZXInClJfVU5aSVBDTUQ9Jy91c3IvYmluL3VuemlwJwpSX1hUUkFf
Q0ZMQUdTPScnClJfWFRSQV9DUFBGTEFHUzI9Jy1JJChSX0lOQ0xVREVfRElSKScKUl9YVFJBX0NQ
UEZMQUdTPScnClJfWFRSQV9DWFhGTEFHUz0nJwpSX1hUUkFfRkZMQUdTPScnClJfWFRSQV9MSUJT
PScnClJfWklQQ01EPScvdXNyL2Jpbi96aXAnClNBRkVfRkZMQUdTPScnClNFRD0nL3Vzci9iaW4v
c2VkJwpTRVRfTUFLRT0nJwpTSEVMTD0nL2Jpbi9zaCcKU0hMSUJfQ0ZMQUdTPScnClNITElCX0NY
WEZMQUdTPScnClNITElCX0NYWExEPScnClNITElCX0NYWExERkxBR1M9Jy1zaGFyZWQnClNITElC
X0VYVD0nJwpTSExJQl9GQ0Q9JycKU0hMSUJfRkNMRD0nJwpTSExJQl9GQ0xERkxBR1M9JycKU0hM
SUJfRkZMQUdTPScnClNITElCX0xEPScnClNITElCX0xERkxBR1M9Jy1zaGFyZWQnClNITElCX0xJ
QkFERD0nJwpTVFJJUD0nc3RyaXAnClNVUFBPUlRfTUJDUz0nJwpTVVBQT1JUX1VURjg9JycKVEFS
PSd0YXInClRDTFRLX0NQUEZMQUdTPScnClRDTFRLX0xJQlM9JycKVENMX0NPTkZJRz0nJwpURVg9
Jy91c3IvYmluL3RleCcKVEVYSTJEVkk9Jy91c3IvYmluL3RleGkyZHZpJwpUSUZGX0xJQlM9JycK
VEtfQ09ORklHPScnClVTRV9FWFBPUlRGSUxFU19GQUxTRT0nJwpVU0VfRVhQT1JURklMRVNfVFJV
RT0nJwpVU0VfRVhURVJOQUxfQkxBU19GQUxTRT0nJwpVU0VfRVhURVJOQUxfQkxBU19UUlVFPScn
ClVTRV9FWFRFUk5BTF9MQVBBQ0tfRkFMU0U9JycKVVNFX0VYVEVSTkFMX0xBUEFDS19UUlVFPScn
ClVTRV9JTkNMVURFRF9MSUJJTlRMPScnClVTRV9NTUFQX1pMSUJfRkFMU0U9JycKVVNFX01NQVBf
WkxJQl9UUlVFPScnClVTRV9OTFM9JycKVVNFX05MU19GQUxTRT0nJwpVU0VfTkxTX1RSVUU9JycK
VVNFX1JFQ09NTUVOREVEX1BBQ0tBR0VTX0ZBTFNFPScnClVTRV9SRUNPTU1FTkRFRF9QQUNLQUdF
U19UUlVFPScnClVTRV9WRUNMSUJfRzk1RklYX0ZBTFNFPScnClVTRV9WRUNMSUJfRzk1RklYX1RS
VUU9JycKVkVSU0lPTj0nMi43LjEnCldBTlRfUl9GUkFNRVdPUktfRkFMU0U9JycKV0FOVF9SX0ZS
QU1FV09SS19UUlVFPScjJwpXQU5UX1JfU0hMSUJfRkFMU0U9JycKV0FOVF9SX1NITElCX1RSVUU9
JyMnCldBTlRfUl9TVEFUSUNfRkFMU0U9JycKV0FOVF9SX1NUQVRJQ19UUlVFPScjJwpXT0UzMkRM
TD0nJwpYR0VUVEVYVD0nJwpYR0VUVEVYVF8wMTU9JycKWE1LTUY9JycKWFRSQV9JTlRMX0NQUEZM
QUdTPScnClhfQ0ZMQUdTPScnClhfRVhUUkFfTElCUz0nJwpYX0xJQlM9JycKWF9QUkVfTElCUz0n
JwpZQUNDPSdiaXNvbiAteScKWUZMQUdTPScnCmFjX2N0X0NDPSdpY2MnCmFjX2N0X0NYWD0nJwph
Y19jdF9EVU1QQklOPScnCmFjX2N0X0Y3Nz0nJwphY19jdF9GQz0nJwphY19jdF9PQkpDPSdnY2Mn
CmJpbmRpcj0nJHtleGVjX3ByZWZpeH0vYmluJwpidWlsZD0neDg2XzY0LXVua25vd24tbGludXgt
Z251JwpidWlsZF9hbGlhcz0nJwpidWlsZF9jcHU9J3g4Nl82NCcKYnVpbGRfb3M9J2xpbnV4LWdu
dScKYnVpbGRfdmVuZG9yPSd1bmtub3duJwpjb25maWdfb3B0cz0nICdcJydDQz1pY2MnXCcnICdc
JydDRkxBR1M9LU8zIC1tcCdcJycgJ1wnJ0NQUEZMQUdTPS1JL29wdC9pbnRlbC9jY2UvMTAuMS4w
MTUvaW5jbHVkZS8nXCcnICdcJydGNzc9aWZvcnQnXCcnICdcJydDWFg9aWNjJ1wnJyAnXCcnQ1hY
RkxBR1M9LU8zIC1tcCdcJycgJ1wnJ0ZGTEFHUz0tQzkwIC13OTAgLXc5NSAtbXAnXCcnICdcJydD
UElDRkxBR1M9LXNoYXJlZCdcJycgJ1wnJ0NYWFBJQ0ZMQUdTPS1zaGFyZWQnXCcnICdcJydGUElD
RkxBR1M9LXNoYXJlZCdcJycgJ1wnJ1NITElCX0xERkxBR1M9LXNoYXJlZCdcJycgJ1wnJ1NITElC
X0NYWExERkxBR1M9LXNoYXJlZCdcJycgJ1wnJy0td2l0aC1ibGFzPS1ML3Vzci9saWI2NC9Hb3Rv
QkxBUyAtbGdvdG9fcGVucnlucC1yMS4yNiAtbHB0aHJlYWQnXCcnICdcJydKQVZBX0hPTUU9L3Vz
ci9saWI2NC9qdm0vamF2YSdcJycnCmRhdGFkaXI9JyR7ZGF0YXJvb3RkaXJ9JwpkYXRhcm9vdGRp
cj0nJHtwcmVmaXh9L3NoYXJlJwpkb2NkaXI9JyR7ZGF0YXJvb3RkaXJ9L2RvYy8ke1BBQ0tBR0Vf
VEFSTkFNRX0nCmR2aWRpcj0nJHtkb2NkaXJ9JwpleGVjX3ByZWZpeD0nTk9ORScKaG9zdD0neDg2
XzY0LXVua25vd24tbGludXgtZ251Jwpob3N0X2FsaWFzPScnCmhvc3RfY3B1PSd4ODZfNjQnCmhv
c3Rfb3M9J2xpbnV4LWdudScKaG9zdF92ZW5kb3I9J3Vua25vd24nCmh0bWxkaXI9JyR7ZG9jZGly
fScKaW5jbHVkZWRpcj0nJHtwcmVmaXh9L2luY2x1ZGUnCmluZm9kaXI9JyR7ZGF0YXJvb3RkaXJ9
L2luZm8nCmxpYmRpcj0nJHtleGVjX3ByZWZpeH0vJHtMSUJubn0nCmxpYmV4ZWNkaXI9JyR7ZXhl
Y19wcmVmaXh9L2xpYmV4ZWMnCmxvY2FsZWRpcj0nJHtkYXRhcm9vdGRpcn0vbG9jYWxlJwpsb2Nh
bHN0YXRlZGlyPScke3ByZWZpeH0vdmFyJwpsdF9FQ0hPPSdlY2hvJwptYW5kaXI9JyR7ZGF0YXJv
b3RkaXJ9L21hbicKbWtkaXJfcD0nJwpvbGRpbmNsdWRlZGlyPScvdXNyL2luY2x1ZGUnCnBkZmRp
cj0nJHtkb2NkaXJ9JwpwcmVmaXg9J05PTkUnCnByb2dyYW1fdHJhbnNmb3JtX25hbWU9J3MseCx4
LCcKcHNkaXI9JyR7ZG9jZGlyfScKcl9hcmNoPScnCnJkb2NkaXI9JyR7cmhvbWV9L2RvYycKcmlu
Y2x1ZGVkaXI9JyR7cmhvbWV9L2luY2x1ZGUnCnJzaGFyZWRpcj0nJHtyaG9tZX0vc2hhcmUnCnNi
aW5kaXI9JyR7ZXhlY19wcmVmaXh9L3NiaW4nCnNoYXJlZHN0YXRlZGlyPScke3ByZWZpeH0vY29t
JwpzaGxpYnBhdGhfdmFyPSdMRF9MSUJSQVJZX1BBVEgnCnN0cmlwbGliPSdzdHJpcCAtLXN0cmlw
LXVubmVlZGVkJwpzdHJpcHN0YXRpY2xpYj0nc3RyaXAgLS1zdHJpcC1kZWJ1ZycKc3lzY29uZmRp
cj0nJHtwcmVmaXh9L2V0YycKdGFyZ2V0X2FsaWFzPScnCnVzZV9hcXVhPScnCnVzZV90Y2x0az0n
JwoKIyMgLS0tLS0tLS0tLS0tLS0tLS0tLSAjIwojIyBGaWxlIHN1YnN0aXR1dGlvbnMuICMjCiMj
IC0tLS0tLS0tLS0tLS0tLS0tLS0gIyMKCnJfY2NfbG9fcnVsZXNfZnJhZz0nJwpyX2NjX3J1bGVz
X2ZyYWc9JycKcl9jeHhfcnVsZXNfZnJhZz0nJwpyX29iamNfcnVsZXNfZnJhZz0nJwoKIyMgLS0t
LS0tLS0tLS0gIyMKIyMgY29uZmRlZnMuaC4gIyMKIyMgLS0tLS0tLS0tLS0gIyMKCiNkZWZpbmUg
UEFDS0FHRV9OQU1FICJSIgojZGVmaW5lIFBBQ0tBR0VfVEFSTkFNRSAiUiIKI2RlZmluZSBQQUNL
QUdFX1ZFUlNJT04gIjIuNy4xIgojZGVmaW5lIFBBQ0tBR0VfU1RSSU5HICJSIDIuNy4xIgojZGVm
aW5lIFBBQ0tBR0VfQlVHUkVQT1JUICJyLWJ1Z3NAUi1wcm9qZWN0Lm9yZyIKI2RlZmluZSBQQUNL
QUdFICJSIgojZGVmaW5lIFZFUlNJT04gIjIuNy4xIgojZGVmaW5lIFJfUExBVEZPUk0gIng4Nl82
NC11bmtub3duLWxpbnV4LWdudSIKI2RlZmluZSBSX0NQVSAieDg2XzY0IgojZGVmaW5lIFJfVkVO
RE9SICJ1bmtub3duIgojZGVmaW5lIFJfT1MgImxpbnV4LWdudSIKI2RlZmluZSBVbml4IDEKI2Rl
ZmluZSBSX0FSQ0ggIiIKI2RlZmluZSBIQVZFX1ZJU0lCSUxJVFlfQVRUUklCVVRFIDEKI2RlZmlu
ZSBfR05VX1NPVVJDRSAxCiNkZWZpbmUgU1REQ19IRUFERVJTIDEKI2RlZmluZSBIQVZFX1NZU19U
WVBFU19IIDEKI2RlZmluZSBIQVZFX1NZU19TVEFUX0ggMQojZGVmaW5lIEhBVkVfU1RETElCX0gg
MQojZGVmaW5lIEhBVkVfU1RSSU5HX0ggMQojZGVmaW5lIEhBVkVfTUVNT1JZX0ggMQojZGVmaW5l
IEhBVkVfU1RSSU5HU19IIDEKI2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQojZGVmaW5lIEhBVkVf
U1RESU5UX0ggMQojZGVmaW5lIEhBVkVfVU5JU1REX0ggMQojZGVmaW5lIEhBVkVfRExGQ05fSCAx
CiNkZWZpbmUgTFRfT0JKRElSICIubGlicy8iCiNkZWZpbmUgSEFWRV9MSUJNIDEKI2RlZmluZSBI
QVZFX0xJQkRMIDEKI2RlZmluZSBIQVZFX1JFQURMSU5FX0hJU1RPUllfSCAxCiNkZWZpbmUgSEFW
RV9SRUFETElORV9SRUFETElORV9IIDEKI2RlZmluZSBIQVZFX0xJQlJFQURMSU5FIDEKI2RlZmlu
ZSBIQVZFX1JMX0NPTVBMRVRJT05fTUFUQ0hFUyAxCiNkZWZpbmUgU1REQ19IRUFERVJTIDEKI2Rl
ZmluZSBUSU1FX1dJVEhfU1lTX1RJTUUgMQojZGVmaW5lIEhBVkVfRElSRU5UX0ggMQojZGVmaW5l
IEhBVkVfU1lTX1dBSVRfSCAxCiNkZWZpbmUgSEFWRV9BUlBBX0lORVRfSCAxCiNkZWZpbmUgSEFW
RV9ETEZDTl9IIDEKI2RlZmluZSBIQVZFX0VMRl9IIDEKI2RlZmluZSBIQVZFX0ZDTlRMX0ggMQoj
ZGVmaW5lIEhBVkVfRlBVX0NPTlRST0xfSCAxCiNkZWZpbmUgSEFWRV9HTE9CX0ggMQojZGVmaW5l
IEhBVkVfR1JQX0ggMQojZGVmaW5lIEhBVkVfTElNSVRTX0ggMQojZGVmaW5lIEhBVkVfTE9DQUxF
X0ggMQojZGVmaW5lIEhBVkVfTkVUREJfSCAxCiNkZWZpbmUgSEFWRV9ORVRJTkVUX0lOX0ggMQoj
ZGVmaW5lIEhBVkVfUFdEX0ggMQojZGVmaW5lIEhBVkVfU1REQk9PTF9IIDEKI2RlZmluZSBIQVZF
X1NUUklOR1NfSCAxCiNkZWZpbmUgSEFWRV9TWVNfUEFSQU1fSCAxCiNkZWZpbmUgSEFWRV9TWVNf
U0VMRUNUX0ggMQojZGVmaW5lIEhBVkVfU1lTX1NPQ0tFVF9IIDEKI2RlZmluZSBIQVZFX1NZU19T
VEFUX0ggMQojZGVmaW5lIEhBVkVfU1lTX1JFU09VUkNFX0ggMQojZGVmaW5lIEhBVkVfU1lTX1RJ
TUVfSCAxCiNkZWZpbmUgSEFWRV9TWVNfVElNRVNfSCAxCiNkZWZpbmUgSEFWRV9TWVNfVVRTTkFN
RV9IIDEKI2RlZmluZSBIQVZFX1RJTUVfSCAxCiNkZWZpbmUgSEFWRV9VTklTVERfSCAxCiNkZWZp
bmUgSEFWRV9FUlJOT19IIDEKI2RlZmluZSBIQVZFX0lOVFRZUEVTX0ggMQojZGVmaW5lIEhBVkVf
U1REQVJHX0ggMQojZGVmaW5lIEhBVkVfU1RESU5UX0ggMQojZGVmaW5lIEhBVkVfU1RSSU5HX0gg
MQojZGVmaW5lIEhBVkVfREVDTF9TSUdTRVRKTVAgMQojZGVmaW5lIEhBVkVfREVDTF9TSUdMT05H
Sk1QIDEKI2RlZmluZSBIQVZFX1BPU0lYX1NFVEpNUCAxCiNkZWZpbmUgSEFWRV9HTElCQzIgMQoj
ZGVmaW5lIFJFVFNJR1RZUEUgdm9pZAojZGVmaW5lIFJfU09DS0xFTl9UIAojZGVmaW5lIEhBVkVf
U1RBQ0tfVCAxCiNkZWZpbmUgSEFWRV9JTlRQVFJfVCAxCiNkZWZpbmUgSEFWRV9VSU5UUFRSX1Qg
MQojZGVmaW5lIFdPUkRTX0JJR0VORElBTiAxCiNkZWZpbmUgUl9JTkxJTkUgaW5saW5lCgpjb25m
aWd1cmU6IGV4aXQgNzcK

------_=_NextPart_001_01C8EAD7.27542985--


From song84030 at 163.com  Thu Aug  7 11:47:00 2008
From: song84030 at 163.com (song84030 at 163.com)
Date: Thu,  7 Aug 2008 11:47:00 +0200 (CEST)
Subject: [Rd] Bug for the package "ada" (PR#12126)
Message-ID: <20080807094700.9E0B2282EF48@mail.pubhealth.ku.dk>

Full_Name: Song Qifan
Version: 2.7.0
OS: Windowa Xp
Submission from: (NULL) (58.207.200.53)


When I used the package "ada" to realize a boosting algorithm, there occures a
bug.
I use the function "ada" to produce a ada object from the training data. After
that, I use the function "predict.ada" to predict the output for just ONE input,
but the result is a vector containing 50 numbers.
However, if I use the "predict.ada" to predict the outpt for a data.frame which
contains several input, the function will calculate the correct result.


From sklai3 at hotmail.com  Thu Aug  7 11:48:54 2008
From: sklai3 at hotmail.com (sklai3 at hotmail.com)
Date: Thu,  7 Aug 2008 11:48:54 +0200 (CEST)
Subject: [Rd] crash : 2.7.0 after installing it (PR#12143)
Message-ID: <20080807094854.85971282EF48@mail.pubhealth.ku.dk>

--_e6765d9c-a0eb-4881-9b60-b9820e4c5665_
Content-Type: multipart/alternative;
	boundary="_520e6e4d-4f2c-47c0-83c1-2fa2fb28184f_"

--_520e6e4d-4f2c-47c0-83c1-2fa2fb28184f_
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable


Dear Murdoch=2C

Attached file is the error message after installing 2.7.1/ or it patched wi=
ndow version.

After installing=2C I run this program=2C it show this error message=2C and=
  ticks cancel=2C the software is shut down and cannot use it.

Please advise  how to do=2C

 I use the previous version  2.6.2=2C I cannot find any upgrad version from=
 2.6.2 to 2.7.1.

please you are not the right person to answer my problem=2C pls forwards to=
 the responsible person.

thanks

sk

_________________________________________________________________


e=3Dwlmailtagline=

--_520e6e4d-4f2c-47c0-83c1-2fa2fb28184f_
Content-Type: text/html; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<html>
<head>
<style>
.hmmessage P
{
margin:0px=3B
padding:0px
}
body.hmmessage
{
FONT-SIZE: 10pt=3B
FONT-FAMILY:Tahoma
}
</style>
</head>
<body class=3D'hmmessage'>
<style>.hmmessage P{margin:0px=3Bpadding:0px}body.hmmessage{FONT-SIZE: 10pt=
=3BFONT-FAMILY:Tahoma}</style>Dear Murdoch=2C<br><br>Attached file is the e=
rror message after installing 2.7.1/ or it patched window version.<br><br>A=
fter installing=2C I run this program=2C it show this error message=2C and&=
nbsp=3B ticks cancel=2C the software is shut down and cannot use it.<br><br=
>Please advise&nbsp=3B how to do=2C<br><br>&nbsp=3BI use the previous versi=
on&nbsp=3B 2.6.2=2C I cannot find any upgrad version from 2.6.2 to 2.7.1.<b=
r><br>please you are not the right person to answer my problem=2C pls forwa=
rds to the responsible person.<br><br>thanks<br><br>sk<br><br /><hr />Conne=

n.com/messenger/launch80/default.aspx?locale=3Den-us&source=3Dwlmailtagline=
' target=3D'_new'>Get it now! </a></body>
</html>=

--_520e6e4d-4f2c-47c0-83c1-2fa2fb28184f_--

--_e6765d9c-a0eb-4881-9b60-b9820e4c5665_
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="p005.jpg"

/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDABALDA4MChAODQ4SERATGCgaGBYWGDEjJR0oOjM9PDkz
ODdASFxOQERXRTc4UG1RV19iZ2hnPk1xeXBkeFxlZ2P/2wBDARESEhgVGC8aGi9jQjhCY2NjY2Nj
Y2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2P/wAARCAMCBQADASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBxuTDE
sm0NnPfpgZJ6dKI9YU8gRuo+8Y5A5UeuB/n+VR3CqbMB22oY33H0Gw5/SlmnaWRVjhMUq8COZ8Ak
jgnHGMjtn045r1GkctzUMx9qb559BTrbIuoiCR84/nVy6ClkVyZEM5Jc/wAA7rWbaTsNIo+efQfl
R559B+VXJTI0N2jPhEYYXZ0GeMc+1MktIVgMgMgIRG5IPU/ShSQWK3nn0H5UeefQflTr2PZdOu5m
xjljk9Kh21Ss1cRJ559B+VHnn0H5VHto20WQEnnn0H5UeefQflUe2jbRZASeefQflR559B+VR7aN
tFkBJ559B+VHnn0H5VHto20WQEnnn0H5UeefQflUe2jbRZASeefQflR559B+VR7aNtFkBJ559B+V
Hnn0H5VHto20WQEnnn0H5UeefQflUe2jbRZASeefQflR559B+VR7aNtFkBJ559B+VHnn0H5VHto2
0WQEnnn0H5UeefQflUe2jbRZASeefQflR559B+VR7aNtFkBJ559B+VHnn0H5VHto20WQEnnn0H5U
eefQflUe2jbRZASeefQflR559B+VR7aNtFkBJ559B+VHnn0H5VHto20WQEnnn0H5UeefQflUe2jb
RZASeefQflR559B+VR7aNtFkBJ559B+VHnn0H5VHto20WQEnnn0H5UeefQflUe2jbRZASeefQflR
559B+VR7aNtFkBJ559B+VHnn0H5VHto20WQEnnn0H5UeefQflUe2jbRZASee3t+VHnt7flUWKMUW
QEvnt7flR57e35VFijFOyAl89vb8qPPb2/KosUYosgJfPb2/Kjz29vyqLFGKLICXz29vyo89vb8q
ixRiiyAl89vb8qPPb2/KosUYosgJfPb2/Kjz29vyqLFGKLICXz29vyo89vb8qixRiiyAl89vb8qP
Pb2/KosUYosgJfPb2/Kjz29vyqLFGKLICXz29vyo89vb8qixRiiyAl89vb8qPPb2/KosUYosgJfP
b2/Kjz29vyqLFGKLICXz29vyo89vb8qixRiiyAl89vb8qPPb2/KosUYosgJfPb2/Kjz29vyqLFGK
LICXz29vyo89vb8qixRiiyAl89vb8qPPb2/KosUYosgJfPb2/Kjz29vyqLFGKLICXz29vyo89vb8
qixRiiyAl89vb8qPPb2/KosUYosgJfPb2/Kjz29vyqLFGKLICXz29vyo89vb8qixRiiyAl89vb8q
PPb2/KosUYosgJfPb2/Kjz29vyqLFGKLICXz29vyo+0N7VFijBosgJftDe1H2hvaosGjBosgJftD
e1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftD
e1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftD
e1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftD
e1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftDe1H2hvaosGjBosgJftD
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
jitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8A
Gj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7N
tP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT
/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2
TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/4
8f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8
aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn
+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6z
DzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8A
nl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/
48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbi
jitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8A
Gj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7N
tP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT
/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2
TMbijitn+zbT/nl/48f8aP7NtP8Anl/48f8AGj6zDzD2TMbijitn+zbT/nl/48f8aP7NtP8Anl/4
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
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAO
h8K/6uf6J/Wt+sDwr/q5/on9a362r/xGTHYKKKKxKCiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAqKQ4P5f1qWoJyOhIx7n60MCDzkaTaOnQHsTWN4nP7qIf7DfzrZPlFQuY8DoNwrF8T
cxREEEbGGR9a0ofxEKWxj0UUVmMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gDofCv8Aq5/on9asa5Ldwvbm0kuvm37o7cR5bAyD84P6fkar+Ff9XP8ARP61q3enwXjxvMZg0edp
jnePGf8AdIreq0qrbJjsQzzXen2sPym/YvsZiyxucn5cDG09Rnp0/Ci4vL23t45GsUeRpNjRpPnq
cAqSoz+OPxpz6TaPBHCftASNiy4uZAck5ySGyTn1p0+m29xFFFIbgrF93FxIp+pIbJP1zWd49f6/
EYxru8AjiFpEbp9zFTOfLCgjndtz3H8NMl1G4S1jmSzEjmTypIxKAVbOPlJGCM+uOPyqxLp8E0Uc
bmb9191lndX/AO+gdx/E0yXS7WWCKFvOCRHK7LiRTnOckhsk55yc0Xj/AF/w4yxbtM8QNxEkUmTl
Ufev4HA/kKg1Oee3tTJAisARvJfaQPUfKQT7HFWYo1ijWNSxVRgFmLH8SeTUN7YwXyBLjzdo7JM8
YP12kZ/Gkmr+QDL65uYJLdLa2jmMzFfnlKbSAT/dPHB/SpbSc3FskrJsY5DKDkAg4PPfkVH/AGdb
/uMmcmAkoTcSE5Pqd3P45qW1tYrOEQw79gJPzyM5592JNDtbQCHUryWygV4bZp2ZsYAcgcdTtVj+
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
xWcIhh37ASfnkZzz7sSaTcbaATUUUVIwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKik+/8AhUtRSff/AAoYDlrn/Fv+ri/3W/pXQLXP+Lf9XF/ut/StaH8RClsYVFFF
ZDCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigA
ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA6Hwr/q5/on9a36wPCv+rn+i
f1rfrav/ABGTHYKKKKxKCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAqKT7/4VLUU
n3/woYDlrn/Fv+ri/wB1v6V0C1z/AIt/1cX+639K1ofxEKWxhUUUVkMKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigDofCv8Aq5/on9atazPJBNa4u7qCNywf7PCJCeMjjYxqr4V/
1c/0T+ta89nDPPDNJ5m+E5TbIyj8QDg/jW9VpVXcmOw3TZXn0+CWRg5dQQwx8w7HjjJGDxSXdzNb
3FuiwxtDKxVpGkK7DgkcbT6eoqaC3jt1ZYlKqzFiMkgE9cZ6fQUXEEV1A0M6b426isrq5SMl9cuU
gtybAGWcM6qjSOoQYwSVjJ5yMDHTv2qw2p3H2GC6jsHJkbY8TsY3U5xwGAyM+uOPyq3c2cF0qCUO
Nn3WjkaNh+KkHHtUUul20sMcTtclYzlf9KlBznPJ3ZPtnpVXh2FqR3V9d2tmkj2IaYvtKRs7qB65
VC3/AI7UbajcS6Ol5HAqFj86+bgoA2OPlOT7EDHsatTadbzJErmf9yCEZbiRWweuWDZPQdTTZtLt
ZrZLdxKIkBAVJ3TOfUgjd+OaLx7APu7iaOSOG2hSWZwWw8mxQoxkk4J7jtVZ9QuyluIbONpZXaN1
efaEZQc8hTkcHnr049J3023eGOJjPiMna4uJA4z1+fduI9s+npS/2dbfuMCUeQSUxM45PUnn5jye
ueppJxGSWk5uLZJWTYxyGUHIBBwee/IqLUm8u3Dm9a0QH5mRAzMewGQeSe2CT2qa1tYrOEQw79gJ
PzyM5592JNR3mn2968TziXfFnY0czxkZ4P3SKWl/IB9mZjaQm5x5xUb8DHP07VHfRyMgdb2W1jjU
s5jVCT/30D057Utxp9tdWBsrhGlt2ABVpGJODnls57etTyRJLEYnXKMMEZ6ii6vcCKxEwsoftDl5
SoLFgAc++MCo9UM6WjSQT+SY/mOFBLe3PT8vyqW9s4L+1e1uo/MhkxuXJGcHPUc9qbd2UN7EI5/N
2DtHK6Z+u0jP40XV7i6FmoL64FpYz3JG7yY2fHrgZp8MSwRLGhcqvQu5c/iSSTRNEk8EkMgykilW
HqCMGlpca8yndmSKwiafUGtyoHmSoilnb0UEEcntgk9qaWu5IrOB5zBNKhaSREXdwBwA2QDzz17/
AFqSXTIbmO2+1PLJLbrhZI5XiOcYJ+UjrUstlDLbpC5m2p91hM4cf8CB3frVXQkVFmuLmK2hFw0L
u0geVFXcdhxwCCBnr0qOa5u3s7dYmmMrSOjmAR+YwUkZG/5R0GfrxV+Sxt5LeOAh1SP7vlyMjD/g
QIP60kmn28kEcJV0SL7hjlZGH/AlIP60cyAhhvxFY273QmeRxz5UDycjrnYDg/pnOKJp3uzbx200
tss24lzFtfC9grjjk9x0+uauQxJBCsUYIRRgZJJ/Enkn3ptzaxXSBJfMAByDHIyMD9VINK6uMy7n
UbhLG2SMSPcTStDujRSx2lgWAJCgkLnngZ79KswX8cFnE0zXkzEspJty7gg8hvLXAx09/erEljby
Wq2xQiNMbdrlWXHcMDkH3zUsEKW8KxRAhV9WLE9ySTyT7mm3GwFO7uVksluFu5bOLPLeTiRj0ACu
vUnttJPakkF++mQt5kizhQZBAieY303naPfOe+KnvNPt714nnEu+LOxo5njIzwfukUS6fbzQxxv5
v7r7riZw4/4GDuP50XQFUXkyaXb3TsSyyKsqlQCQW2kH0Izk47j0rUqo9hEYILdAEgidWKYzuwcj
n/ewc9/xq3SbXQAoooqQCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKik+/+FS1
FJ9/8KGA5a5/xb/q4v8Adb+ldAtc/wCLf9XF/ut/StaH8RClsYVFFFZDCiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooA6Hwr/AKuf6J/WtK7M0tzHbQ3DW+5GkZ0VSxAIGBuBHf0N
ZvhX/Vz/AET+tbF1aQ3aqJQ+VOVZJGRh9GUg1vW/iMmOxWMl5bCO3BS8uX3Nuc+UoUY64B55HQc+
1RNqd2ZIIobGNpJQ4YNPtCMhwcnacj0PXpwO1ltLtDCkQSRAhJDJM6vk9csDk575PNVrrRxNLa+X
N5cFvu+X5/MO48kSBwQffnqc5qE49SiVb+Y/Z91uiB5TFMTL/q2HTHHzA9s46jvxTH1G7W1S4WyS
RXl2KqT8spOFYZUDnrjI47mn3mnPLpxs7SVIUbO4yq0jHPOc7gc55zk1LcafBdRxJN5gEX3RFK8Q
B/4CR6celF4iIbu5vYdP81reNJFb94Fnzhc9VJTn6ECpbu6mjnjgtYEmmdWfEkmxQowOoB5yR29a
LjTbe5gSCUzmNBgAXEgJ+pDZb8c1Fd6UJrWOKCV45IydskkkrNg9RuDqx7dTjgegpLlGQC+v5vsk
0VuFaUupt2lAUAfxM20kHjoM9e/WpZb+8aGze2toC0zlJFkmK7SAeAQpzyp5x+HPEltpUEEVqpLl
rdSFKuyLz1+UHH55p40y1FoLYCXyw28Hz33A+obO4d+/eneIizEZDGplVVkx8yq24A+xwM/lUd9c
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
SrNokjCSIEzhkmdGOeuWBBOe+TzTW0eza1S12zLAmdqJcSKOe3Dcj0HbtTvARfqldmaW5jtobhrf
cjSM6KpYgEDA3Ajv6GrMEK28QiQuVHQySM5/NiSaZdWkN2qiUPlTlWSRkYfRlINQrJjKxkvLYR24
KXly+5tznylCjHXAPPI6Dn2qvPq91EqstijgI7Sjz8FShAYD5eeox0z3xVxtLtDCkQSRAhJDJM6v
k9csDk575PNNbSbRgoKykLG0ePPflW+9nnknrk81aceoFYapfNNHAlhEZWLq3+kHapXHU7OmCO3X
jGOasRX00jxobdFZt6sDLna69hxyD69faq9xoay3kUsUxjjUkupaQuScAkOHBU4GPzzmrb6Zavbx
wkShYyWUrM6tk5zlgcnOT1NDcLaCK8l/fGG0eC1ty80jI6vOwCkBuhCnP3euPw9Jb+4uoLASiKMO
MeYFl+6P9klDn8QKeNLtFtBaojpCrblCyuCh/wBkg5H0Bpsuk2ctsluVlWJM4VJ3TOeSWwRuOecn
PNF4/wBf8OA6+ubmCS3S2to5jMxX55Sm0gE/3Txwf0qH+0biRIEt7VGuJFZmR5tqrtIB+YKSeTxx
+VT/ANnW/wC4yZyYCShNxITk+p3c/jmq9xo8bWiQ2sjQujErI8krEA9RkOrYPHGccdKS5RlrT7mS
7tVmlhEJYkbN+4gA4546/wCc1ZqvY2q2VnFbqciMYyBgfgOwqxUu19AQUUUUgCiiigAooooAKKKK
ACiiigAooooAKKKKACopPv8A4VLUUn3/AMKGA5a5/wAW/wCri/3W/pXQLXP+Lf8AVxf7rf0rWh/E
QpbGFRRRWQwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOh8K/6uf6J/WtDW
POWxeW3uZLd4+coqHP13A1n+Ff8AVz/RP61rXllDfRiO48zYOySumfrtIzW9XSq7kx2K96l7HaxJ
by3MpDfvHjEQlI7feAT9KpST3j29mYbq8ldjIsghjhV8gnqH4BGMcHmtGXS7aVYQ5nzCCEcXMgYA
4zlg2T0HU0SaVayLEp89RECEKXEiHnqSQwJPueahSiv+GGZ8d5eCO1kaWQ7RIJ4ygDYU4z0+8Ac8
fKcccEVf0hpZLLfNcPcMZHAdgo4DED7oA6CnR6ZaxvC6LIphztxM/JJyS3PzEn1zU9tbQ2kCw28Y
jjUkhR0GTk/qaUpJrQCHUFuDBm2klUg5IhVDI3spc7R+NQwaiI7CCS5E7yOCD5du7kEHB3BVOD69
s5xVm6s4bsL5ocFDlWjkaNh+KkHHtUkEMdvCsMKhUQYApXVrDKN7dSSW0MsDXUMLOfMeO2JlUYOP
kZSeuP4T/WooLm4vLe1jE0lu8hkDSbFDkIcdCCATwTxxyOO2jc20d0gSRpVAOf3Uzxn81INMksbe
S3jgIdUj+75cjIw/4ECD+tNNWAqLNcXMVtCLhoXdpA8qKu47DjgEEDPXpQs1xcxW0IuGhd2kDyoq
7jsOOAQQM9elW5LG3kt44CHVI/u+XIyMP+BAg/rRJY28lvHAQ6pH93y5GRh/wIEH9aLoRRllvprC
BoDcFxKyStAIg7Bdy5+f5eSAaknmnfSVnguJI2jHzl0UuxXgg/wjkc4H09asyafbSwxRFGVYuEMc
jIy/8CBB+vPNNm021mtUtmWRYk6LHM6Z+pUgn8afMgJLq7jtNvmLM27p5UDyfntBx+NV5p3uzbx2
00tss24lzFtfC9grjjk9x0+uauQxLBEsaFyq9C7lz+JJJNNubWK6QJL5gAOQY5GRgfqpBqVYZSBn
uLFJWvpbYReYJGjRMvtJGfmBA6E8DvUkV2bSxtzem4lldcsUt2c599i4HX2qyLaEWwttn7kLt25P
SpqG0BnzTvdm3jtppbZZtxLmLa+F7BXHHJ7jp9c1PYSvNaK0hy4ZkLYxu2sVz+OM0+5tYrpAkvmA
A5BjkZGB+qkGnxRJDEsUa7UQYAobVgH0UUVIBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVFJ9/8KlqKT7/4UMBy1z/i3/Vxf7rf0roFrn/Fv+ri
/wB1v6VrQ/iIUtjCooorIYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAF
FFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHQ+F
f9XP9E/rW/WB4V/1c/0T+tb9bV/4jJjsFFFFYlBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQA
UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABR
RRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFF
FABRRRQAVFJ9/wDCpaik+/8AhQwHLXP+Lf8AVxf7rf0roFrn/Fv+ri/3W/pWtD+IhS2MKiiishhR
RRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAdD4V/1c/wBE/rVrWZ5IJrXF3dQR
uWD/AGeESE8ZHGxjVXwr/q5/on9a157OGeeGaTzN8Jym2RlH4gHB/Gt6rSqu5MdhumyvPp8EsjBy
6ghhj5h2PHGSMHim6nPPb2pkgRWAI3kvtIHqPlIJ9jip4LeO3VliUqrMWIySAT1xnp9BUd7YwXyB
Ljzdo7JM8YP12kZ/Gsrrmv0H0GaleS2UCvDbNOzNjADkDjqdqsf0p2nXTXtjHcNH5TPnKbs4wSPb
06YyOhpj6XbSRxIxuP3WdrC5kD89ctuyfxNWYIY7eFYol2oo4yST+JPJPuaHy203GU9Zmu4bRfsQ
Te8iRlmfaV3MBkfKw79x+fSmNPfWFjCZYvtcrPtcecoYZOBg7FB/ED8atXllDfKqz+bhDuHlzPHz
2PykZpk2mW88MUUjXBWI5XFzIDn3IbJ/GmnG1mBUvNWubQQxvZBrmQMxVGkdAoI5ysZPOR1Ud/bL
ZtckSC2MdjMZplZjHIkg2BSAfuozck8ZUcenSr8un280Mcb+b+6+64mcOP8AgYO4/nTX023eGOJv
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
COp6H2pqSsMdYSStHJHM4keGQxmQDG/gEEgcZwecdwenSqerXc1ndxSLLKUMbEQJsAdgQOpUnoxP
B/hrRt4IraFYYU2ovQZzn1JJ5JJ5JPWkktoZZoppEDPFnYc9MjBpXV7gYc13JHYW7vrTQmW4dUmk
EQVlBPXK46L2xy1TXeoGaDT7mK8uIYZw2/7LEJSTjP8AcY8EHkVoQ6XaQSQvCkieQpSNVmcKAeo2
5wfxHYelMj0i0ikjdPtG6Ny65uZDyevVuc+h9/Wr5oiKE95P9l06V725iSYNua2hWQuMZVsBW7dc
cc0Xd840ywlfVBZvMeJT5YV1xnLZBHQdiOTWkNMtRLHIqyK0bmRAszhQT14Bxj26dfWkj0u1iuhc
RiVXBYgCd9oz1+XO3B64xRzRAqPqEsq2V3bSkwSRM0kaAEYGMkHBORk+xxUH+nNphuV1af5ZGXIj
i+b95tHOzHQenetGHSLSCZJY/tG5GLDdcyMMnrwWwc0r6VZvaLaCN0gRiwSKV0GSc/wkcZPSjmit
gILkXdhbpcveTXKQMxlXbGpdDnHYcjjpjOKt2EdxHaqLuYyzElmJC/Ln+EYAzj170lxYQXVottN5
rRAYwJnBIxjkg5P4mi40+2urA2VwjS27AAq0jEnBzy2c9vWpumrDLVFIBgYpagAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAqKT7/AOFS1FJ9/wDChgOWuf8AFv8Aq4v91v6V0C1z
/i3/AFcX+639K1ofxEKWxhUUUVkMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igDofCv+rn+if1rQ1OSa2VLxJJDDDkzQoF+dfXkZyOvUVn+Ff9XP9E/rWveWcN9AYbjzDGeoSRkz
9dpGR7VvV0qu5MdirHLfW8UUBAuruQNIfMcIqLxxlV5xkDpz7U+K+mkeJTborOHVgZPuuvbpyD6/
pUsunwTRRxuZv3X3WWd1f/voHcfxNNk022kt44SJQsZJUrM6tk5z8wOTnJzk81neLKJbOdri2SV0
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
/Vxf7rf0roFrn/Fv+ri/3W/pWtD+IhS2MKiiishhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAdD4V/1c/0T+tXdYW6WHzre9ltwmBtREO4lgMksD2ql4V/1c/0T+ta95ZQ30Qjn
8zYDnCSsmfrtIzW9V2qtkx2IQ9zZfZ4pZBcrJIVaeQhGXPKjCrg+nbt61X/tO+aWFIrCF/P3+W32
kgbVI+Y/JwCDxjPUfUWNQsZbmw+yW86RqV2s0qtI2O2DuBz75NRXultd3Fo3nJHFbgjaiurc4ztZ
XBXgY7/jUJx6jIrnW5YRFGtmz3Db96DeyptIB5RGJzkY4Hvg8VoWNybu0jnaGSFmzlJFKkEHHQgH
HpwOKjfTLV4I4isoEZJVlmdXyevzg7jnvzzViCFbeIRIXKjoZJGc/mxJNJuNtNwINTF21hKLBttz
xsPHqM9eOmabqxmjsmlguHhaMhvlCnd7HIPH0xV2q17YwXyBLjzdo7JM8YP12kZ/GkntcYzU557e
1MkCKwBG8l9pA9R8pBPscU67uJo3jhtoVlmkBYB5NigDGSTgnuOgpk2l209ukEhuWjTOB9pkyc+p
3ZP45xTn063eBIW84iMkq/nvvGevz53frT90Cldavc2ywo2nt9ok3Exgu4VVIGcojHnIxwPfHSpD
qV1JBaPBY/PcMylJ3aIoQCe6k44PYHpx6WG0u0MKRBHUISwZJXV8nqSwO4575PNL/Z1v+4yZyYCS
hNxITk+p3c/jmneFthEE+pzR6fFcR2hkkdtrIN7BCM55VWJGR12/lVZ9dkFtaulkWmnDsYxvYIFO
OSiMc8jggY5BwRirn9kWnlRxj7QBGWKkXMgYZ6/Nuz+tSPptq8EUO2RVi+4ySujDPX5gQTnvzz3o
vDsBH/aP/Emkv3gkiKRs5ikUqcrn1AODjjjpRcyzWljBK8m9kZBLgD5wSFP065/CpxaRfY2tTveJ
lKnzJGckHryxJ70x7Rpbe3hml3iNlZyV/wBYV5H05AP4UrxuMNTF21hKLBttzxsPHqM9eOmat0UV
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
oooAKKKKACiiigAooooAKKKKACopPv8A4VLUUn3/AMKGA5a5/wAW/wCri/3W/pXQLXP+Lf8AVxf7
rf0rWh/EQpbGFRRRWQwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOh8K/6u
f6J/Wt+sDwr/AKuf6J/Wt+tq/wDEZMdgooorEoKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK
KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACopPv/hUtRSff/ChgOWuf8W/6uL/db+ldAtc/4t/1cX+639K1ofxEKWxhUUUVkMKKKKAC
iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK
KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDofCv+rn+if1q1rM8kE1ri7uoI3LB/s8
IkJ4yONjGqvhX/Vz/RP61rz2cM88M0nmb4TlNsjKPxAOD+Nb1WlVdyY7DdNlefT4JZGDl1BDDHzD
seOMkYPFN1Oee3tTJAisARvJfaQPUfKQT7HFTwW8durLEpVWYsRkkAnrjPT6Co72xgvkCXHm7R2S
Z4wfrtIz+NZXXNfoPoM1K8lsoFeG2admbGAHIHHU7VY/pTtOumvbGO4aPymfOU3Zxgke3p0xkdDT
H0u2kjiRjcfus7WFzIH565bdk/iaswQx28KxRLtRRxkkn8SeSfc0PltpuMqapfvYpH5USzSSE4TL
5wBycIjH07d6sWdwLu0iuAjJ5i52sMEe1Nu7KC82GYSBkztaOVo2APUZUg44HHtT7S1hs4Fgt1Kx
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
fmCknnpx+VSaTLLPp6POXMm51O/bu4cjnbx27Un9k2ghSICcBCSrC4kDjPUbt2cH0zip7S0hsofJ
t1ZY9xbBctgnr1JobjbQCeiiioAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAqKT7/4VLUUn3/woYDlrn/Fv+ri/wB1v6V0C1z/AIt/1cX+639K
1ofxEKWxhUUUVkMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDofCv8Aq5/o
n9a1NTF21hKLBttzxsPHqM9eOmay/Cv+rn+if1rfras7VGyY7FW7uJo3jhtoVlmkBYB5NigDGSTg
nuOgqvc3d6mnee1qsThsOvnDKrnqp2kHPocfhVu6tIbtVEofKnKskjIw+jKQagk0mzkt1gZZRGpJ
wk7ruJ6liDlj7nNQnHqULqFxdwSWy2kMEvmuVbzZSmPlJ4wp9P8APaO/1CayghPkRyXEh5iV3bAA
5I2oSQOOdo61O1hA9qtu3nFFO5WM77wfXfnd39famPpVo0McQR0WLO0xyujc9csCCcnk5PJ5oTj1
Agk1C6kt7KaztomFw2GWeRkK/KTjhT6f/W9Jb+4uoLASiKMOMeYFl+6P9klDn8QKeNMtFs1tFR1h
RtyBZXBQ+zA5H4H2psuk2ctsluVlWJM4VJ3TOeSWwRuOecnPNO8REl3cTRyRw20KSzOC2Hk2KFGM
knBPcdqrPqF2UtxDZxtLK7Rurz7QjKDnkKcjg89enHpO+m27wxxMZ8Rk7XFxIHGevz7txHtn09KX
+zrb9xgSjyCSmJnHJ6k8/MeT1z1NJOIxrX5TSJb549rRxs7IGzyucjPfkdabcyzWljBK8m9kZBLg
D5wSFP065/CpY7C3jsntFDmFwwYPIzkg9eWJPeke0aW3t4Zpd4jZWclf9YV5H05AP4UXjcA1MXbW
EosG23PGw8eoz146Zq3RRU30sBVu7iaOSOG2hSWZwWw8mxQoxkk4J7jtVZ9QuyluIbONpZXaN1ef
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
u/Wl7oyrdanc21tEz2ai4kdh5O9nO0fxDYjEjp27jOKWTULqS3sprO2iYXDYZZ5GQr8pOOFPp/8A
W9J20qzaJIwkiBM4ZJnRjnrlgQTnvk80o0y0WzW0VHWFG3IFlcFD7MDkfgfaneHYBl/cXUFgJRFG
HGPMCy/dH+yShz+IFS3dxNHJHDbQpLM4LYeTYoUYyScE9x2qOXSbOW2S3KyrEmcKk7pnPJLYI3HP
OTnmnPptu8McTGfEZO1xcSBxnr8+7cR7Z9PSleIED6hdlLcQ2cbSyu0bq8+0Iyg55CnI4PPXpx6L
Pqc0enxXEdoZJHbayDewQjOeVViRkddv5VP/AGdbfuMCUeQSUxM45PUnn5jyeuepqP8Asi08qOMf
aAIyxUi5kDDPX5t2f1p3gBLp1017Yx3DR+Uz5ym7OMEj29OmMjoatVUm020n082EsW62IAKFjk85
5Oc5zznPNWgMDFQ7dAFooopAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABUUn3/wqWopPv8A
4UMBy1z/AIt/1cX+639K6Ba5/wAW/wCri/3W/pWtD+IhS2MKiiishhRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAdD4V/wBXP9E/rW/WB4V/1c/0T+tb9bV/4jJjsFFFFYlBRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVFJ9/8ACpaik+/+FDActc/4t/1cX+639K6B
a5/xb/q4v91v6VrQ/iIUtjCooorIY+FQ7Et90dh3q0kcB6p+tVoBwfqa0JLUoUEReQugfAXoK9BR
jFJHPK9yPy7f/nn+tIUt/wDnn+tTQWrzSsjbk2jLEqSR+FQtE4UuFYp/fAODRaItQ2W//PP9aNlv
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
zwQDn95gSkY44JPVUUXAxJdNuphOsRaBPLkmtgxAMc0ikHJUk/KS5zyP3nH3RVKXRJ5LBoBbO8Ui
yokMxi/cuwQLJtUBFAw5+XJ+bPUkDqKKLgZ+pQvdW9sxtWmjWQPNattJddrDaQTtOGKnk4+XI5xW
WdMvkTTcQuXs4okBjZOqH5xljkB1AA24Jzh8Dp0lFAHKx6RcwTq0Fk0IhuGkj8oxjcvmlj1ORuj2
qNuCcYb5QKu67a3U10XtbOaZjZyRK6yKAkhZShAZhggrnIGfu9ccbtFFwM/SoXt5b2L7K1vbibMC
/Lt27VB2hScfMGPQfe9c1QvbO5vNRmufslwFW3j2xtMoScjeWicK3Od4GTxkHqOG36KAMkSXiarP
OmmzMssESKWkjADAuTu+YkAbwMgHocA8Zpw6PPb3tsrRtPDFGkLsAm2SLy9hUhju+98xUHZgZ5br
0VFFwOX0jS7y0msJDaPCYVVJFRo8Fdm1gTnOd534B245xvznorz/AI85/wDrm38qmqG8/wCPOf8A
65t/Kqj8SB7HHx/d/E/zp1Nj+7+J/nTq1qfGyVsFFFFQMKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDofCv+rn+if1rfrA8
K/6uf6J/Wt+tq/8AEZMdgooorEoKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACopP
v/hUtRSff/ChgOWuf8W/6uL/AHW/pXQLXP8Ai3/Vxf7rf0rWh/EQpbGFRRRWQzc8P/dm/wCA/wBa
2Kx/D/3Zv+A/1rYp1vjf9dAjsRXNtFdR7JVyOx6EfQ1k3GmzWZSe2llmRT88bYLY9R3P0rboqIzc
dgcUzmbTT4dYvbtriaR4IpAFiVsKeM8+tdFBDHbxLFCioi8AAU5UVSSqgFjkkDrTqc5uTCMbIKKK
KgYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABUN5/x5z/8AXNv5VNUN5/x5z/8AXNv5U4/EgZx8f3fxP86dTY/u/if506tqnxslbBRRRUDCiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
iiigAooooA6Hwr/q5/on9asa5Ldwvbm0kuvm37o7cR5bAyD84P6fkar+Ff8AVz/RP61q3enwXjxv
MZg0edpjnePGf90it6rSqtsmOxDPNd6faw/Kb9i+xmLLG5yflwMbT1GenT8KLi8vbe3jkaxR5Gk2
NGk+epwCpKjP44/GnPpNo8EcJ+0BI2LLi5kByTnJIbJOfWnT6bb3EUUUhuCsX3cXEin6khsk/XNZ
3j1/r8RjGu7wCOIWkRun3MVM58sKCOd23Pcfw0yXUbhLWOZLMSOZPKkjEoBVs4+UkYIz644/KrEu
nwTRRxuZv3X3WWd1f/voHcfxNMl0u1lgihbzgkRyuy4kU5znJIbJOecnNF4/1/w4yxbtM8QNxEkU
mTlUfev4HA/kKg1Oee3tTJAisARvJfaQPUfKQT7HFWYo1ijWNSxVRgFmLH8SeTUN7YwXyBLjzdo7
JM8YP12kZ/Gkmr+QDL65uYJLdLa2jmMzFfnlKbSAT/dPHB/SpbSc3FskrJsY5DKDkAg4PPfkVH/Z
1v8AuMmcmAkoTcSE5Pqd3P45qW1tYrOEQw79gJPzyM5592JNDtbQCrrM13DaL9iCb3kSMsz7Su5g
Mj5WHfuPz6VHLJfWelK8hEsoOZWMoyoz2IjAP4qKt3llDfKqz+bhDuHlzPHz2PykZpk+mW1xbpBK
bho0yAPtMgJ+pDZb8c0042swYmrGaOyaWC4eFoyG+UKd3scg8fTFRapqb2MkUUNu08kgZsYcgAY/
uIx7jt+NSzaXbT26QSG5aNM4H2mTJz6ndk/jnFK+m27wxxN55EZJV/tEm8Z6/Pu3Y9s+npQnHqBJ
Y3Ju7SOdoZIWbOUkUqQQcdCAcenA4qrqmpvYyRRQ27TySBmxhyABj+4jHuO341PNptrcae1jOry2
7feEkrsTzn7xOevvT7mzhulQShwU+60cjRsPxUg49qFy3v0AoXGtm20+C/ntWht2JE5lLK0XYHbt
yQT9DyDj0fNe3o0lLpraOKQ4MiCfJRc9jsIJ9sfjVj+zLUvbuwmdrckxl53YgnOScnnqetR/2LZC
zS0CzrAmdqLcyDr64bn8ad4dv6/r+u6JNSvJbKBXhtmnZmxgByBx1O1WP6VVGpXs1rZTW9pBuuHZ
XSWYjbgN3Cn+7zkZHTHpZfS7aSOJGNx+6ztYXMgfnrlt2T+Jp72Fs9qlsVcRocqVkZWB9dwOc9cn
POTSTikMivr25tLSOT7J5srHDKhdlXj1VCx/75/KkTUidEfUXh2FI3cx7s4254zj26YyOhp7aVaN
FFGFkQRZ2mOZ0bnrkqQTk8nPU1MLSAWZtAn7lkKEEkkg9ck8knPWi8bAtytPcXtslnHHDHcyy/Kz
vL5YDBc54U8cH9KiudWkis4JUt1eaUkGLc5IxwxGxGJAPfA6jpVr7CjrbG4eSSW3HyursmTjBJAO
D+NR/wBkWfkpEBOAhYqwuJAwz1G7dnB9M4p3j1EitNrM6wwzQ2IeOSBpmDS7GUKRuGCvXkY5Hvim
Ta5PFsi+xbrks4ZEMjqoXHOUjJ/iH8I789M210axVVRUlCLG0YXz5MBW6jG7H+GB6CnNpNowPEwJ
bduW4kDZxjghsjOBn1707w7ARtfyNp0F75UkP7xRJFImDgttPUA98jpnA9a0qqPYoYIYA7mKOQOR
IzSFsHIG5iT1wfwxVuodugyC9lnhtXktbb7TMMbYt4Tdz6ngVMOlQ3tnBf2r2t1H5kMmNy5Izg56
jntUwGBilpYCCaeSO5iiWNWWRW+YvggjoMY6e/6VUbULsxWphs4XknZkZWnKhCM99pyPlPb04q3d
2cN4qiYP8hypjkaMjjHVSDUUelWkSwrGsiLAxaNVmcBSevGent0qk49QIp9Tmj0+K4jtDJI7bWQb
2CEZzyqsSMjrt/KltNRmuY7Z/syJ56ucGXlWU8A/L+fQjpinf2RaeVHGPtAEZYqRcyBhnr827P61
JJptrJbxQFZFSI5UpK6sPX5gQTnPOTzReFhFU6leM1skVjE7zh85uCFQqcHJ29PfGfbvQ2p3hlhh
isY2lk3hg0+AjKRnnacrzwcZ5HA5w2bQkMlqtvIIbeAsfLBk3fMedrhwV6YwOOTTrnRhNNa+XN5c
MG7K5k8wljyRIHBB9+ep61XuASDULiRUjhtUN0S29Hl2ou0gE7gCT1GOO/OKSXUbhLWOZLMSOZPK
kjEoBVs4+UkYIz644/Kpm022aGOLEqiMkqyzOr89csDuOe+TzSS6XaywRQt5wSI5XZcSKc5zkkNk
nPOTmpvH+v8AhxkVxd6lGtsFtLbzJJCjq1w2BwSMEJ7dx+Hem3+qTWXkR/ZPMuJVLMqGRlUDGeVR
j1I/hFW5bKGW2SB/NKJgq3muHBHffndn8aY2mWjQRwhHRYySpjlZGBPX5gQTnqeeT1oTj1QEKajc
XEMH2eyImkVmZLhjEEAOD/CTyenHT0qXSZZZ9PR5y5k3Op37d3Dkc7eO3alfTLZ4o42M/wC7ztcX
EgcZ6jfu3EexPYelS2lpDZQ+Tbqyx7i2C5bBPXqTQ3G2gDLu4mjeOG2hWWaQFgHk2KAMZJOCe46C
oftt4VjjFii3T7iY3nwoUHGdwB65GBj64qzdWkN2qiUPlTlWSRkYfRlINRNpdoYUiCSIEJIZJnV8
nrlgcnPfJ5pJxtqBA+oXZS3ENnG0srtG6vPtCMoOeQpyODz16cejhqFwRaN9mjEcxKSMZT+7YZ4+
7yODzxU39nW37jAlHkElMTOOT1J5+Y8nrnqaF061Wyaz2O0DHJV5GY9c9Sc9feneIGe+uXKQW5Ng
DLOGdVRpHUIMYJKxk85GBjp37VYbU7j7DBdR2DkyNseJ2Mbqc44DAZGfXHH5VbubOC6VBKHGz7rR
yNGw/FSDj2qKXS7aWGOJ2uSsZyv+lSg5znk7sn2z0p3h2FqR3V9d2tmkj2IaYvtKRs7qB65VC3/j
tRtqNxLo6XkcCoWPzr5uCgDY4+U5PsQMexq1Np1vMkSuZ/3IIRluJFbB65YNk9B1NNm0u1mtkt3E
oiQEBUndM59SCN345ovHsA+7uJo5I4baFJZnBbDybFCjGSTgnuO1Vn1C7KW4hs42lldo3V59oRlB
zyFORweevTj0nfTbd4Y4mM+Iydri4kDjPX5924j2z6elL/Z1t+4wJR5BJTEzjk9SefmPJ656mknE
ZJaTm4tklZNjHIZQcgEHB578iotTnnt7UyQIrAEbyX2kD1HykE+xxU1raxWcIhh37ASfnkZzz7sS
aZe2MF8gS483aOyTPGD9dpGfxpac3kAy+ubmCS3S2to5jMxX55Sm0gE/3Txwf0qW0nNxbJKybGOQ
yg5AIODz35FR/wBnW/7jJnJgJKE3EhOT6ndz+OaltbWKzhEMO/YCT88jOefdiTQ7W0Ai1MXbWEos
G23PGw8eoz146ZqLWZruG0X7EE3vIkZZn2ldzAZHysO/cfn0rQqteWUN8qrP5uEO4eXM8fPY/KRm
hNXVwKksl9Z6UryESyg5lYyjKjPYiMA/ioqfVjNHZNLBcPC0ZDfKFO72OQePpiln0y2uLdIJTcNG
mQB9pkBP1IbLfjmkm0u2nt0gkNy0aZwPtMmTn1O7J/HOKd47iItU1N7GSKKG3aeSQM2MOQAMf3EY
9x2/GmnUrqSC0eCx+e4ZlKTu0RQgE91JxwewPTj0sPptu8McTeeRGSVf7RJvGevz7t2PbPp6Uv8A
Z1v+4yZyYCShNxITk+p3c/jmi8LDKtzq0kVnBKlurzSkgxbnJGOGI2IxIB74HUdKZNrM6wwzQ2Ie
OSBpmDS7GUKRuGCvXkY5HvirP9kWfkpEBOAhYqwuJAwz1G7dnB9M4pF0axVVRUlCLG0YXz5MBW6j
G7H+GB6CneHYCpNrk8WyL7FuuSzhkQyOqhcc5SMn+Ifwjvz0y66nu7rTkvYbi5scDDQmJc53AZO9
c4644HUfSrbaTaMDxMCW3bluJA2cY4IbIzgZ9e9Ol0y2mtVtpDcNGpyP9Jk3H6tuyfxNF4aWQtSM
yXdqsdsh+23Dbm3zMIgFB7lVPPIHA/KqV3qU8ckU5MqfI4a1QoQzqwB+Yrk8EnjHQcDmtOawgnij
jfzf3QwrLM6v/wB9A5P4nmlSwtk8giPJg3eWWYkjd1JJPJPvSUo9RlG0u7kWyLE326aV5CjzMsYC
K2Mkqv06DvTpbnUfMtWW22SuXVrdpV2cdGLBSe3Yd+R6WTplp9mit1jaOOL/AFflyMjL9GBB/WhN
MtY2iZFkUxZK4lfknqW5+Yn1OTT5oiK1zq0kVnBKlurzSkgxbnJGOGI2IxIB74HUdKfJqU32G2u4
LMyCYgNGX2OpPAwCMHn1I/pT/wCyLPyUiAnAQsVYXEgYZ6jduzg+mcUHR7M28VuBMkURyipcSLjv
2b8vTtReABdHUZdLk8lEgvcjbscOvUdCwHb1FX6ZFGsUaxqWKqMAsxY/iTyafUNjCiiikAUUUUAF
RSff/Cpaik+/+FDActc/4t/1cX+639K6Ba5/xb/q4v8Adb+la0P4iFLYwqKKKyGbnh/7s3/Af61s
Vj+H/uzf8B/rWxTrfG/66BHYKKKKyGFFFFABRRRQAUUUUAFFFFABRRRQAEgdTSbh6iqk8UdzqlvB
Ogkh8mSQowypIKAZHf7xqx/ZOmf9A20/78L/AIVSirCux+4eoo3D1FM/snTP+gbaf9+F/wAKztYT
T9NFsw0vS9k0hjL3BWJUO0sMnYeu0j649eHyruF2am4eoo3L/eH51zFtqFnJqX2WbSNEjfzEiMPn
KZFbK7sfJtbG8DbkHKNjPZ0l0kbxLJ4csIXZ9rRtBKxY7SdqlYMEjGcgkYBx60cq7hdnS7l/vD86
Ny/3h+dUdMtLO8t2luNEs7c7yFHlZ3DA5wyKw5yMEDpnoRVv+ydM/wCgbaf9+F/wo5V3C7H7l9R+
dLkHoaj/ALJ0z/oG2n/fhf8ACq/kQWmrRR2sKQpJA7MkahQSrJg4H+8aOVdwuy5RRRUDCiiigAoo
ooAKKKKACiiigAooooAKhvP+POf/AK5t/KpqhvP+POf/AK5t/KnH4kDOPj+7+J/nTqbH938T/OnV
tU+NkrYKKKKgYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFAHQ+Ff9XP9E/rW/WB4V/1c/wBE/rW/W1f+IyY7BRRRWJQUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFRSff/Cpaik+/wDhQwHLXP8Ai3/Vxf7rf0ro
Frn/ABb/AKuL/db+la0P4iFLYwqKKKyGbnh/7s3/AAH+tbFY/h/7s3/Af61sU63xv+ugR2Ciiish
hRRRQAUUUUAFFFFABRRRQAUUUUAVGONbt/8Ar2l/9Cjq/u96qXNolwyPvkikTO14yAQD1HII7Dt2
qH7BJ/0Ebz/yF/8AEVd1YnqaO73rD8U6dPf28L2kCzXMYmQbpNuFeJ1P67f8QMmrf2CT/oI3n/kL
/wCIo+wSf9BG8/8AIX/xFGncfyMG00nULbW4nS2ljtY5pdux8IqNKGGAJhxgdNo91btfuLC8ldLi
SJmV7k3MkMM3lyr8hjUKwYD7uzPzDlWwWBAF/wCwSf8AQRvP/IX/AMRS/YJP+gjef+Qv/iKNO4fI
n09iLUIYLiAKSAtxKJHPfO7c2evc9qs7ves/7BJ/0Ebz/wAhf/EUfYJP+gjef+Qv/iKNO4fI0N3v
VGY51q3/AOveX/0KOm/YJP8AoI3n/kL/AOIp9vZrBKZWllmlK7Q8pHA64AAA7D8qLpdRblmiiioK
CiiigAooooAKKKKACiiigAooooAKhvP+POf/AK5t/KpqhvP+POf/AK5t/KnH4kDOPj+7+J/nTqbH
938T/OnVtU+NkrYKKKKgYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHQ+Ff9XP9E/rW/WB4V/1c/wBE/rW/W1f+IyY7BRRR
WJQUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFRSff/Cpaik+/wDhQwHLXP8Ai3/V
xf7rf0roFrn/ABb/AKuL/db+la0P4iFLYwqKKKyGbOhTRRrN5kiJnbjcwHrWr9rtv+fiL/vsVx5R
Sc8/maPLX/a/76NaS9nJ3dxK6Ow+123/AD8Rf99ij7Xbf8/EX/fYrj/LX/a/76NHlr/tf99Gp5af
djuzsPtdt/z8Rf8AfYo+123/AD8Rf99iuP8ALX/a/wC+jR5a/wC1/wB9Gjlp92F2dh9rtv8An4i/
77FH2u2/5+Iv++xXH+Wv+1/30aPLX/a/76NHLT7sLs7D7Xbf8/EX/fYo+123/PxF/wB9iuP8tf8A
a/76NHlr/tf99Gjlp92F2dh9rtv+fiL/AL7FH2u2/wCfiL/vsVx/lr/tf99Gjy1/2v8Avo0ctPuw
uzsPtdt/z8Rf99ij7Xbf8/EX/fYrj/LX/a/76NHlr/tf99Gjlp92F2dh9rtv+fiL/vsUfa7b/n4i
/wC+xXH+Wv8Atf8AfRo8tf8Aa/76NHLT7sLs7D7Xbf8APxF/32KPtdt/z8Rf99iuP8tf9r/vo0eW
v+1/30aOWn3YXZ2H2u2/5+Iv++xR9rtv+fiL/vsVx/lr/tf99Gjy1/2v++jRy0+7C7Ow+123/PxF
/wB9ij7Xbf8APxF/32K4/wAtf9r/AL6NHlr/ALX/AH0aOWn3YXZ2H2u2/wCfiL/vsUfa7b/n4i/7
7Fcf5a/7X/fRo8tf9r/vo0ctPuwuzsPtdt/z8Rf99ij7Xbf8/EX/AH2K4/y1/wBr/vo0eWv+1/30
aOWn3YXZ2H2u2/5+Iv8AvsUfa7b/AJ+Iv++xXH+Wv+1/30aPLX/a/wC+jRy0+7C7Ow+123/PxF/3
2KPtdt/z8Rf99iuP8tf9r/vo0eWv+1/30aOWn3YXZ2H2u2/5+Iv++xR9rtv+fiL/AL7Fcf5a/wC1
/wB9Gjy1/wBr/vo0ctPuwuzsPtdt/wA/EX/fYo+123/PxF/32K4/y1/2v++jR5a/7X/fRo5afdhd
nYfa7b/n4i/77FH2u2/5+Iv++xXH+Wv+1/30aPLX/a/76NHLT7sLs7D7Xbf8/EX/AH2Kiurm3a0m
CzxElGAAcc8Vynlr/tf99Gjy1/2v++jTSpp3uxahH938T/OnUigKMDpS0pO8mxoKKKKkAooooAKK
KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKAOh8K/6uf6J/Wt+sDwr/q5/on9a362r/xGTHYKKKKxKCiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAqKT7/AOFS1G4+bPtQAq1z/i3/AFcX+639K3gyjv8AoawfFZBiiIP8Lf0r
Wh/EQpbGFRRRWQwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOh8K/6uf6J/
Wt+uf8LHEc/Xonb61vbh7/ka1r/xGTHYdRTdw9/yo3D3/I1kUOopu4e/5GjcPf8AI0AOopu4e/5G
jcPf8jQA6im7h7/kaNw9/wAjQA6im7h7/kaNw9/yNADqKbuHv+Ro3D3/ACNADqKbuHv+Ro3D3/I0
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
/SjDf89H/SnUUe1n3CyG4b/no/6UYb/no/6U6ij2s+4WQ3Df89H/AEow3/PR/wBKdRR7WfcLIbhv
+ej/AKUYb/no/wClOoo9rPuFkNw3/PR/0ow3/PR/0p1FHtZ9wshuG/56P+lGG/56P+lOoo9rPuFk
Nw3/AD0f9KMN/wA9H/SnUUe1n3CyG4b/AJ6P+lGG/wCej/pTqKPaz7hZDcN/z0f9KMN/z0f9KdRR
7WfcLIbhv+ej/pRhv+ej/pTqKPaz7hZDcN/z0f8ASjDf89H/AEp1FHtZ9wshuG/56P8ApQULAgyM
QfpTqKPaz7hZBRRRWYwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKbvHv8A
kaN49/yNX7OfZk88e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/k
aN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCR
o3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN
49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3
j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49
/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3
/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/y
NHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I
0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAj
R7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0e
zn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs5
9mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn
2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7Of
Zhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Y
c8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHP
HuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8
e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx
7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e4
6im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOo
pu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46i
m7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqK
bvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7
x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e
/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv+Ro3j3/I0ezn2Yc8e46im7x7
/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/kaN49/wAjR7OfZhzx7jqKbvHv
+Ro3j3/I0ezn2Yc8e46im7x7/kaN49/yNHs59mHPHuOopu8e/wCRo3j3/I0ezn2Yc8e46im7x7/k
aN49/wAjR7OfZhzx7kVFFFe4eWFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH/9k=

--_e6765d9c-a0eb-4881-9b60-b9820e4c5665_--


From skylab.gupta at gmail.com  Thu Aug  7 12:14:52 2008
From: skylab.gupta at gmail.com (skylab.gupta at gmail.com)
Date: Thu,  7 Aug 2008 12:14:52 +0200 (CEST)
Subject: [Rd] qgamma inaccuracy (PR#12324)
Message-ID: <20080807101453.05798282C761@mail.pubhealth.ku.dk>

Full_Name: 
Version: 2.7.1 (2008-06-23)
OS: windows vista
Submission from: (NULL) (216.82.144.137)


Hello,

I have been working with various probability distributions in R, and it seems
the gamma distribution is inaccurate for some inputs.

For example, qgamma(1e-100, 5e-101, lower.tail=FALSE) gives: 1.0. However, it
seems this is incorrect; I think the correct answer should be
0.082372029620717283. When I check these numbers using pgamma, I get:

pgamma(1,5e-101, lower.tail=FALSE) = 9.1969860292859463e-102
and
pgamma(0.082372029620717283,5e-101, lower.tail=FALSE) =
1.0000000000000166e-100.

Similarly, for example:
qgamma(1e-100,0.005,lower.tail=FALSE) = 109.36757177007101
pgamma(109.36757177007101, 0.005, lower.tail=FALSE) = 1.4787306506694758e-52.

This looks completely wrong. The correct value, I think, should be
219.59373661415756. In fact,
pgamma(219.59373661415756, 0.005, lower.tail=FALSE) = 9.9999999999999558e-101.

In fact, when I do the following in R, the results are completely wrong,

x<-c(5e-1,5e-2,5e-3,5e-4,5e-5,5e-6,5e-7,5e-8,5e-9,5e-10)
z1 <-qgamma(1e-100,x,lower.tail=FALSE)
y<-pgamma(z1,x,lower.tail=FALSE)

The value of y that I get should be close to 1e-100, but they are not:

> y
 [1] 1.000000e-100  1.871683e-51  1.478731e-52  1.444034e-53  1.440606e-54
 [6]  1.440264e-55  1.440230e-56  1.440226e-57  1.440226e-58  1.440226e-59

The correct values of z1 should be:
z1true <- c(226.97154111939946, 222.15218724493326, 219.59373661415756,
217.27485383840451, 214.98015408183574, 212.68797118872064, 210.39614286838227,
208.10445550564617, 205.81289009100664, 203.52144711679352)

With these values of z1true, we get the expected values:
y<-pgamma(z1true,x,lower.tail=FALSE)
> y
 [1] 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100


I am using the precompiled binary version of R, under Windows Vista.
-----------
> version
    _                           
platform       i386-pc-mingw32             
arch           i386                        
os             mingw32                     
system         i386, mingw32               
status                                     
major          2                           
minor          7.1                         
year           2008                        
month          06                          
day            23                          
svn rev        45970                       
language       R                           
version.string R version 2.7.1 (2008-06-23)
------------

So, it seems qgamma is inaccurate for small probability values in the upper
tail, when the shape parameter is also small.


From susscorfa at zonnet.nl  Thu Aug  7 12:20:41 2008
From: susscorfa at zonnet.nl (susscorfa at zonnet.nl)
Date: Thu,  7 Aug 2008 12:20:41 +0200 (CEST)
Subject: [Rd] incorrect usage of glmer crashes R (PR#12375)
Message-ID: <20080807102041.18B8D282C761@mail.pubhealth.ku.dk>

Full_Name: susscorfa
Version: 2.7.1
OS: ubuntu
Submission from: (NULL) (129.125.177.31)


Incorrect implementation of the grouping variable in the function glmer crashes
R

a small example:

require(lme4); 
a<-data.frame(b=rpois(1000,10), c=gl(20,50), d=rnorm(1000,3), e=rnorm(1000,5),
f=rnorm(1000,2)+5);  
glmer(b~d+f|c+(e), family=poisson, data=a)

It crashes R on debian linux (2 independant systems) as well as windows

The correct function usage is:
 glmer(b~d+f+(e|c), family=poisson, data=a)

I suppose it should just eveluate as wrong usage of a function but should not
crash R


From tacarey at gmail.com  Thu Aug  7 11:26:08 2008
From: tacarey at gmail.com (tacarey at gmail.com)
Date: Thu,  7 Aug 2008 11:26:08 +0200 (CEST)
Subject: [Rd] bug in primes() function in the schoolmath package (PR#11957)
Message-ID: <20080807092608.C29C3282C760@mail.pubhealth.ku.dk>

I recently downloaded the R schoolmath package and found a bug in the
"primes" function.
I'm not sure if it has been reported or not.  I tried to report it to the
maintainer, but the email
address listed was no longer available.

Anyway ...

If you run the example from the document  *primes(12,150)* one of the
numbers returned is *133*.
This is not a prime number since 7 x 19 = 1*33*.
The is.prim() function works fine and if you use it to verify the primes()
function you
will find several entries that return false.

> is.prim(primes(start=2, end=500))
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE *FALSE*  TRUE
TRUE
[37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE *FALSE*  TRUE
TRUE
[61]  TRUE  TRUE  TRUE  TRUE  TRUE *FALSE*  TRUE  TRUE  TRUE  TRUE  TRUE
TRUE
[73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[97]  TRUE  TRUE  TRUE


thanks

	[[alternative HTML version deleted]]


From winkllj at acm.org  Thu Aug  7 11:34:09 2008
From: winkllj at acm.org (winkllj at acm.org)
Date: Thu,  7 Aug 2008 11:34:09 +0200 (CEST)
Subject: [Rd] Package Installer Unable to access packages (PR#12026)
Message-ID: <20080807093409.ADD49282EFC2@mail.pubhealth.ku.dk>

Full_Name: Lawrence Jack Winkler
Version: 2.7.1
OS: OSX Leopard 10.5.4
Submission from: (NULL) (216.170.232.85)


I receive the following error when attempting to Get List of packages in the
Package Installer GUI interface:

Warning: unable to access index for repository
http://www.stathy.com/cran/bin/macosx/universal/contrib/2.7

Warning: unable to access index for repository
http://www.stathy.com/cran/src/contrib when attempting Get List of CRAN
(sources)

However, if specifically downloaded and R CMD INSTALL <pkgname> executed, the
packages installed.


From winkllj at acm.org  Thu Aug  7 11:34:07 2008
From: winkllj at acm.org (winkllj at acm.org)
Date: Thu,  7 Aug 2008 11:34:07 +0200 (CEST)
Subject: [Rd] Package Installer Unable to access packages (PR#12025)
Message-ID: <20080807093407.A6F60282EFC1@mail.pubhealth.ku.dk>

Full_Name: Lawrence Jack Winkler
Version: 2.7.1
OS: OSX Leopard 10.5.4
Submission from: (NULL) (216.170.232.85)


I receive the following error when attempting to Get List of packages in the
Package Installer GUI interface:

Warning: unable to access index for repository
http://www.stathy.com/cran/bin/macosx/universal/contrib/2.7

Warning: unable to access index for repository
http://www.stathy.com/cran/src/contrib when attempting Get List of CRAN
(sources)

However, if specifically downloaded and R CMD INSTALL <pkgname> executed, the
packages installed.


From murdoch at stats.uwo.ca  Thu Aug  7 14:47:22 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Thu, 07 Aug 2008 08:47:22 -0400
Subject: [Rd] Package Installer Unable to access packages (PR#12026)
In-Reply-To: <20080807093409.ADD49282EFC2@mail.pubhealth.ku.dk>
References: <20080807093409.ADD49282EFC2@mail.pubhealth.ku.dk>
Message-ID: <489AEEDA.5050706@stats.uwo.ca>

On 07/08/2008 5:34 AM, winkllj at acm.org wrote:
> Full_Name: Lawrence Jack Winkler
> Version: 2.7.1
> OS: OSX Leopard 10.5.4
> Submission from: (NULL) (216.170.232.85)
> 
> 
> I receive the following error when attempting to Get List of packages in the
> Package Installer GUI interface:
> 
> Warning: unable to access index for repository
> http://www.stathy.com/cran/bin/macosx/universal/contrib/2.7
> 
> Warning: unable to access index for repository
> http://www.stathy.com/cran/src/contrib when attempting Get List of CRAN
> (sources)
> 
> However, if specifically downloaded and R CMD INSTALL <pkgname> executed, the
> packages installed.

This is a broken mirror, not an R bug.  You should contact the admin at 
www.stathy.com (or use a different mirror).

Is that mirror in the standard list?

Duncan Murdoch


From chalabi at phys.ethz.ch  Thu Aug  7 15:37:09 2008
From: chalabi at phys.ethz.ch (Yohan Chalabi)
Date: Thu, 7 Aug 2008 15:37:09 +0200
Subject: [Rd] '"ts" treated as a registered S3 class,
 but keep its "structure" behaviour' ?
Message-ID: <20080807153709.7d713064@mimi>

Dear all,

In R-devel I have noticed the new approach for the "ts" class in the
package "methods".

the "structure" behaviour of "ts" is not always kept when one uses
"ts" objects and objects of classes which extend the virtual class
"structure".

As a short example:

## this works fine
setClass("foo", representation(header = "character"), contains = "structure")
foo <- new("foo", 1:10, header = "foo")
ts <- ts(1:10)
foo / ts

## but the problem appears when one defines an "Ops" method for class "foo"
setMethod("Ops", c("foo", "foo"),
           function(e1, e2) {
               .Data <- callGeneric(e1 at .Data, e2 at .Data)
               header <- paste(e1 at header, e2 at header, sep = "_")
               new("foo", .Data, header = header)
           })
foo <- new("foo", 1:10, header = "foo")
foo + foo
ts <- ts(1:10)
foo / ts
# Error in getDataPart(1:10) : no '.Data' slot defined for class "ts"

Is this the expected behavior?

regards,
Yohan

--
PhD student
Swiss Federal Institute of Technology
Zurich

www.ethz.ch


From mtmorgan at fhcrc.org  Thu Aug  7 15:48:24 2008
From: mtmorgan at fhcrc.org (Martin Morgan)
Date: Thu, 07 Aug 2008 06:48:24 -0700
Subject: [Rd] problems with plotting of graphNEL (PR#11993)
In-Reply-To: <20080807093032.B2F52282EFC1@mail.pubhealth.ku.dk>
	(christiankuehnert@gmx.de's
	message of "Thu,  7 Aug 2008 11:30:32 +0200 (CEST)")
References: <20080807093032.B2F52282EFC1@mail.pubhealth.ku.dk>
Message-ID: <6phljz9os0n.fsf@lamprey.fhcrc.org>

Hi Christian --

christiankuehnert at gmx.de writes:

> Full_Name: Christian Kuehnert
> Version: 2.7.1
> OS: Windows XP
> Submission from: (NULL) (91.14.237.109)
>
>
> Hello, 
>
> I've installed the package RBGL (and XML and Rgraphviz) and tried to follow the
> examples in the RBGL-manual 
>
> http://bioconductor.org/packages/2.2/bioc/vignettes/RBGL/inst/doc/RBGL.pdf
>
> But when I try to plot the graph using e.g. 
>
> plot(dijk)
>
> an error message occurs: 
>
> "Error in as.double(y): cannot coerce type 'S4' to vector of type 'double'.
>
> Can anyone tell me what I can do to solve this problem? 

- Ask on the bioconductor list, as this is a problem with a
  bioconductor package

  http://bioconductor.org/docs/mailList.html

- provide the output of sessionInfo() so that the specifics of your
  package version and other aspects of your system are transparent

- provide a short cut-and-paste example of the problem (the vignettes
  of each bioconductor package are built every night on 5 different
  platforms, so if this were a general problem it would have been
  noticed).

- as a shot in the dark, have you tried to update your packages to
  their most recent version, e.g., following the instructions at

  http://bioconductor.org/download

  ?

Martin

> Thanks very much!
> Christian
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Martin Morgan
Computational Biology / Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N.
PO Box 19024 Seattle, WA 98109

Location: Arnold Building M2 B169
Phone: (206) 667-2793


From kjell.konis at epfl.ch  Thu Aug  7 16:03:15 2008
From: kjell.konis at epfl.ch (Kjell Konis)
Date: Thu, 7 Aug 2008 16:03:15 +0200
Subject: [Rd] string comparison
Message-ID: <D894FE1B-FBCD-4A57-B8F4-A36AD8B305A5@epfl.ch>

Hi,

I have a package where I do things like this a lot:

   if(strncmp(CHAR(asChar(Scategory)), "chance", 6) == 0)
     category = h_category_chance;
   else if(strncmp(CHAR(asChar(Scategory)), "utility", 7) == 0)
     category = h_category_utility;
   else if(strncmp(CHAR(asChar(Scategory)), "decision", 8) == 0)
     category = h_category_decision;
   else if(strncmp(CHAR(asChar(Scategory)), "instance", 8) == 0)
     category = h_category_instance;
   else
     category = h_category_error;

I would like to replace the strncmps with pointer comparisons so I set  
up some global variables in the R_init_myDLL function like this:

   charChance = install("chance")
   <etc.>

but I can't seem to get the comparison to work. I want to do something  
like

   if(CHAR(asChar(Scategory)) == charChance)
     category = h_category_chance;

but category always ends up being h_category_error. Any pointers would  
be appreciated.

Thanks,
Kjell


From ripley at stats.ox.ac.uk  Thu Aug  7 17:20:13 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 16:20:13 +0100 (BST)
Subject: [Rd] string comparison
In-Reply-To: <D894FE1B-FBCD-4A57-B8F4-A36AD8B305A5@epfl.ch>
References: <D894FE1B-FBCD-4A57-B8F4-A36AD8B305A5@epfl.ch>
Message-ID: <alpine.LFD.1.10.0808071614551.26106@gannet.stats.ox.ac.uk>

It is not safe to rely on pointer comparisons until R 2.8.0.  Currently it 
is easy to get CHARSXPs that are not in the cache: it is not impossible in 
2.8.0, but you have to know how to 'break and enter'.

In your code you are comparing a CHARSXP and a SYMSXP.  You want to 
use charChance = mkChar("chance") and then make it precious 
(R_PreciousObject).

On Thu, 7 Aug 2008, Kjell Konis wrote:

> Hi,
>
> I have a package where I do things like this a lot:
>
> if(strncmp(CHAR(asChar(Scategory)), "chance", 6) == 0)
>   category = h_category_chance;
> else if(strncmp(CHAR(asChar(Scategory)), "utility", 7) == 0)
>   category = h_category_utility;
> else if(strncmp(CHAR(asChar(Scategory)), "decision", 8) == 0)
>   category = h_category_decision;
> else if(strncmp(CHAR(asChar(Scategory)), "instance", 8) == 0)
>   category = h_category_instance;
> else
>   category = h_category_error;
>
> I would like to replace the strncmps with pointer comparisons so I set up 
> some global variables in the R_init_myDLL function like this:
>
> charChance = install("chance")
> <etc.>
>
> but I can't seem to get the comparison to work. I want to do something like
>
> if(CHAR(asChar(Scategory)) == charChance)
>   category = h_category_chance;
>
> but category always ends up being h_category_error. Any pointers would be 
> appreciated.
>
> Thanks,
> Kjell
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From jmc at r-project.org  Thu Aug  7 18:11:52 2008
From: jmc at r-project.org (John Chambers)
Date: Thu, 07 Aug 2008 12:11:52 -0400
Subject: [Rd] '"ts" treated as a registered S3 class,
 but keep its "structure" behaviour' ?
In-Reply-To: <20080807153709.7d713064@mimi>
References: <20080807153709.7d713064@mimi>
Message-ID: <489B1EC8.9070700@r-project.org>

Yohan Chalabi wrote:
> Dear all,
>
> In R-devel I have noticed the new approach for the "ts" class in the
> package "methods".
>
> the "structure" behaviour of "ts" is not always kept when one uses
> "ts" objects and objects of classes which extend the virtual class
> "structure".
>
> As a short example:
>
> ## this works fine
> setClass("foo", representation(header = "character"), contains = "structure")
> foo <- new("foo", 1:10, header = "foo")
> ts <- ts(1:10)
> foo / ts
>
> ## but the problem appears when one defines an "Ops" method for class "foo"
> setMethod("Ops", c("foo", "foo"),
>            function(e1, e2) {
>                .Data <- callGeneric(e1 at .Data, e2 at .Data)
>                header <- paste(e1 at header, e2 at header, sep = "_")
>                new("foo", .Data, header = header)
>            })
> foo <- new("foo", 1:10, header = "foo")
> foo + foo
> ts <- ts(1:10)
> foo / ts
> # Error in getDataPart(1:10) : no '.Data' slot defined for class "ts"
>
> Is this the expected behavior?
>   
No, not expected.  It may take some special treatement to fix it, though.

Your subject heading is indeed the problem.  Normally, the structure of 
an S3 class is a black box, and no S4 slots should usually be associated 
with it when it's registered via setOldClass.

However, just because "ts" does want to be a "structure" class, it would 
be nice to give it a .Data slot.  I'll experiment with this and see if 
it causes other things to break immediately.

Thanks for the report.

John Chambers
> regards,
> Yohan
>
> --
> PhD student
> Swiss Federal Institute of Technology
> Zurich
>
> www.ethz.ch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From pburns at pburns.seanet.com  Thu Aug  7 18:57:25 2008
From: pburns at pburns.seanet.com (Patrick Burns)
Date: Thu, 07 Aug 2008 17:57:25 +0100
Subject: [Rd] Numerical optimisation and "non-feasible" regions
In-Reply-To: <489AE05B.6000505@epfl.ch>
References: <4899D089.6020208@epfl.ch><loom.20080807T004607-309@post.gmane.org>
	<489AC5DC.10508@epfl.ch> <489AD187.7040007@pburns.seanet.com>
	<489AE05B.6000505@epfl.ch>
Message-ID: <489B2975.3080506@pburns.seanet.com>

If I understand your proposal correctly, then it
probably isn't a good idea.

A derivative-based optimization algorithm is going
to get upset whenever it sees negative infinity.
Genetic algorithms, simulated annealing (and I think
Nelder-Mead) will be okay when they see infinity
but if all infeasible solutions have value negative infinity,
then you are not giving the algorithm a clue about what
direction to go.

Pat

Mathieu Ribatet wrote:
> Dear Patrick (and other),
>
> Well I used the Sylvester's criteria (which is equivalent) to test for 
> this. But unfortunately, this is not the only issue!
> Well, to sum up quickly, it's more or less like geostatistics. 
> Consequently, I have several unfeasible regions (covariance, margins 
> and others).
> The problem seems that the unfeasible regions may be large and 
> sometimes lead to optimization issues - even when the starting values 
> are well defined.
> This is the reason why I wonder if setting by myself a $-\infty$ in 
> the composite likelihood function is appropriate here.
>
> However, you might be right in setting a tolerance value 'eps' instead 
> of the theoretical bound eigen values > 0.
> Thanks for your tips,
> Best,
> Mathieu
>
>
> Patrick Burns a ?crit :
>> If the positive definiteness of the covariance
>> is the only issue, then you could base a penalty on:
>>
>> eps - smallest.eigen.value
>>
>> if the smallest eigen value is smaller than eps.
>>
>> Patrick Burns
>> patrick at burns-stat.com
>> +44 (0)20 8525 0696
>> http://www.burns-stat.com
>> (home of S Poetry and "A Guide for the Unwilling S User")
>>
>> Mathieu Ribatet wrote:
>>  
>>> Thanks Ben for your tips.
>>> I'm not sure it'll be so easy to do (as the non-feasible regions
>>> depend on the model parameters), but I'm sure it's worth giving a try.
>>> Thanks !!!
>>> Best,
>>>
>>> Mathieu
>>>
>>> Ben Bolker a ?crit :
>>>    
>>>> Mathieu Ribatet <mathieu.ribatet <at> epfl.ch> writes:
>>>>
>>>>
>>>>      
>>>>> Dear list,
>>>>>
>>>>> I'm currently writing a C code to compute the (composite) 
>>>>> likelihood -
>>>>> well this is done but not really robust. The C code is wrapped in 
>>>>> an R
>>>>> one which call the optimizer routine - optim or nlm. However, the
>>>>> fitting procedure is far from being robust as the parameter space
>>>>> depends on the parameter - I have a covariance matrix that should 
>>>>> be a
>>>>> valid one for example.
>>>>>
>>>>>         
>>>>   One reasonably straightforward hack to deal with this is
>>>> to add a penalty that is (e.g.) a quadratic function of the
>>>> distance from the feasible region, if that is reasonably
>>>> straightforward to compute -- that way your function will
>>>> get gently pushed back toward the feasible region.
>>>>
>>>>   Ben Bolker
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>>       
>


From murdoch at stats.uwo.ca  Thu Aug  7 19:50:51 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Thu, 07 Aug 2008 13:50:51 -0400
Subject: [Rd] string comparison
In-Reply-To: <alpine.LFD.1.10.0808071614551.26106@gannet.stats.ox.ac.uk>
References: <D894FE1B-FBCD-4A57-B8F4-A36AD8B305A5@epfl.ch>
	<alpine.LFD.1.10.0808071614551.26106@gannet.stats.ox.ac.uk>
Message-ID: <489B35FB.9060603@stats.uwo.ca>

On 8/7/2008 11:20 AM, Prof Brian Ripley wrote:
> It is not safe to rely on pointer comparisons until R 2.8.0.  Currently it 
> is easy to get CHARSXPs that are not in the cache: it is not impossible in 
> 2.8.0, but you have to know how to 'break and enter'.
> 
> In your code you are comparing a CHARSXP and a SYMSXP.  You want to 
> use charChance = mkChar("chance") and then make it precious 
> (R_PreciousObject).

That's R_PreserveObject (which puts the object into an internal 
structure called R_PreciousList).

Duncan Murdoch

> 
> On Thu, 7 Aug 2008, Kjell Konis wrote:
> 
>> Hi,
>>
>> I have a package where I do things like this a lot:
>>
>> if(strncmp(CHAR(asChar(Scategory)), "chance", 6) == 0)
>>   category = h_category_chance;
>> else if(strncmp(CHAR(asChar(Scategory)), "utility", 7) == 0)
>>   category = h_category_utility;
>> else if(strncmp(CHAR(asChar(Scategory)), "decision", 8) == 0)
>>   category = h_category_decision;
>> else if(strncmp(CHAR(asChar(Scategory)), "instance", 8) == 0)
>>   category = h_category_instance;
>> else
>>   category = h_category_error;
>>
>> I would like to replace the strncmps with pointer comparisons so I set up 
>> some global variables in the R_init_myDLL function like this:
>>
>> charChance = install("chance")
>> <etc.>
>>
>> but I can't seem to get the comparison to work. I want to do something like
>>
>> if(CHAR(asChar(Scategory)) == charChance)
>>   category = h_category_chance;
>>
>> but category always ends up being h_category_error. Any pointers would be 
>> appreciated.
>>
>> Thanks,
>> Kjell
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bill at insightful.com  Thu Aug  7 20:23:16 2008
From: bill at insightful.com (Bill Dunlap)
Date: Thu, 7 Aug 2008 11:23:16 -0700 (PDT)
Subject: [Rd] dput function (PR#12112)
In-Reply-To: <20080807094508.0134E282EFC1@mail.pubhealth.ku.dk>
References: <20080807094508.0134E282EFC1@mail.pubhealth.ku.dk>
Message-ID: <Pine.GSO.4.56.0808071115400.2600@devsun3201.insightful.com>

On Thu, 7 Aug 2008 juangea at geax.net wrote:

> Full_Name: Juan Gea
> Version: R version 2.6.2
> OS: Fedora Core 6
> Submission from: (NULL) (79.153.48.49)
>
> Abort:
>
> objeS  <- matrix("AAA",1000000)
> class(objeS)
> outTxt <- textConnection("vaClob", open = "w", local = FALSE)
> dput(objeS,outTxt)
> close(outTxt)
>
>
> R version 2.6.2 (2008-02-08)
> ...
> > objeS  <- matrix("AAA",1000000)
> > class(objeS)
> [1] "matrix"
> > outTxt <- textConnection("vaClob", open = "w", local = FALSE)
> > dput(objeS,outTxt)
>
>  *** caught segfault ***
> address 0xb7803934, cause 'memory not mapped'
>
> Traceback:
>  1: dput(objeS, outTxt)

Does the following solve the problem?  valgrind on R 2.8.0 finds
deparse.c:do_dput() reading from freed memory, tval, the output
of deparse1(), right after a call to Rconn_printf() invokes the
garbage collector and frees tval.

It is taking a long time to run the example under valgrind
after the fix, but I think it has gotten past the original error.

Index: src/main/deparse.c
===================================================================
--- src/main/deparse.c	(revision 46243)
+++ src/main/deparse.c	(working copy)
@@ -284,7 +284,7 @@
     if(!isNull(CADDR(args)))
 	opts = asInteger(CADDR(args));

-    tval = deparse1(tval, 0, opts);
+    PROTECT(tval = deparse1(tval, 0, opts));
     if (TYPEOF(CAR(args)) == CLOSXP) {
 	SET_CLOENV(CAR(args), saveenv);
 	UNPROTECT(1);
@@ -313,6 +313,7 @@
 	       res < strlen(CHAR(STRING_ELT(tval, i))) + 1)
 		warning(_("wrote too few characters"));
 	}
+    UNPROTECT(1) ; /* tval */
     if (!wasopen) con->close(con);
     return (CAR(args));
 }

The valgrind session was:
  > objeS  <- matrix("AAA",1000000)
  >  class(objeS)
  [1] "matrix"
  > outTxt <- textConnection("vaClob", open = "w", local = FALSE)
  > dput(objeS,outTxt)
  ==32381== Invalid read of size 4
  ==32381==    at 0x813917E: do_dput (deparse.c:312)
  ==32381==    by 0x8065454: do_internal (names.c:1138)
  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
  ==32381==    by 0x8162267: do_begin (eval.c:1174)
  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
  ==32381==    by 0x81636D0: Rf_applyClosure (eval.c:667)
  ==32381==    by 0x816048F: Rf_eval (eval.c:505)
  ==32381==    by 0x8058033: Rf_ReplIteration (main.c:257)
  ==32381==    by 0x805825E: R_ReplConsole (main.c:306)
  ==32381==    by 0x80584F4: run_Rmainloop (main.c:966)
  ==32381==    by 0x805674D: main (Rmain.c:33)
  ==32381==  Address 0x59B9B58 is 2,864 bytes inside a block of size 444,472 free'd
  ==32381==    at 0x40052A3: free (vg_replace_malloc.c:233)
  ==32381==    by 0x805ACFD: R_gc_internal (memory.c:767)
  ==32381==    by 0x805BA4A: Rf_allocVector (memory.c:1971)
  ==32381==    by 0x810C45C: Rf_lengthgets (builtin.c:746)
  ==32381==    by 0x8123B0D: text_vfprintf (connections.c:2303)
  ==32381==    by 0x8127147: Rconn_printf (connections.c:2868)
  ==32381==    by 0x813917D: do_dput (deparse.c:311)
  ==32381==    by 0x8065454: do_internal (names.c:1138)
  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
  ==32381==    by 0x8162267: do_begin (eval.c:1174)
  ==32381==    by 0x8160557: Rf_eval (eval.c:461)

----------------------------------------------------------------------------
Bill Dunlap
Insightful Corporation
bill at insightful dot com
360-428-8146

 "All statements in this message represent the opinions of the author and do
 not necessarily reflect Insightful Corporation policy or position."


From maechler at stat.math.ethz.ch  Thu Aug  7 21:55:49 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 7 Aug 2008 21:55:49 +0200
Subject: [Rd] Bug repository awakening
In-Reply-To: <489AC3D6.2090806@biostat.ku.dk>
References: <489AC3D6.2090806@biostat.ku.dk>
Message-ID: <18587.21317.502263.659823@cmath-5.math.ethz.ch>

>>>>> "PD" == Peter Dalgaard <p.dalgaard at biostat.ku.dk>
>>>>>     on Thu, 07 Aug 2008 11:43:50 +0200 writes:

    PD> Looks like reports from the last month are trickling
    PD> in. 170 of them in incoming, but there's a lot of
    PD> spam. I hope Martin's spamfilters are less leaky that
    PD> ours, so that they get killed en route to r-devel....

Yes, they have been *much* less leaky for quite a while:

It's me as admin and Marc Schwartz as volunteer moderator,
for all messages from people not subscribed to R-devel.
This time (US morning), it was Marc who manually approved many
dozens of messages.

 [[ ==> Please, "regular bug reporters", do subscribe to R-devel... ]]

Martin Maechler, ETH Zurich


From ripley at stats.ox.ac.uk  Thu Aug  7 21:55:44 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 7 Aug 2008 20:55:44 +0100 (BST)
Subject: [Rd] dput function (PR#12112)
In-Reply-To: <Pine.GSO.4.56.0808071115400.2600@devsun3201.insightful.com>
References: <20080807094508.0134E282EFC1@mail.pubhealth.ku.dk>
	<Pine.GSO.4.56.0808071115400.2600@devsun3201.insightful.com>
Message-ID: <alpine.LFD.1.10.0808072053480.29337@gannet.stats.ox.ac.uk>

Bill,

Thanks.  Whether or not it is the cause here it should clearly be 
PROTECT-ed (I suspect the original version didn't need to be, but leaving 
PROTECTs off is prejudicial to future maintenance), so I've incorporated 
this in R-devel/R-patched.

Brian

On Thu, 7 Aug 2008, Bill Dunlap wrote:

> On Thu, 7 Aug 2008 juangea at geax.net wrote:
>
>> Full_Name: Juan Gea
>> Version: R version 2.6.2
>> OS: Fedora Core 6
>> Submission from: (NULL) (79.153.48.49)
>>
>> Abort:
>>
>> objeS  <- matrix("AAA",1000000)
>> class(objeS)
>> outTxt <- textConnection("vaClob", open = "w", local = FALSE)
>> dput(objeS,outTxt)
>> close(outTxt)
>>
>>
>> R version 2.6.2 (2008-02-08)
>> ...
>>> objeS  <- matrix("AAA",1000000)
>>> class(objeS)
>> [1] "matrix"
>>> outTxt <- textConnection("vaClob", open = "w", local = FALSE)
>>> dput(objeS,outTxt)
>>
>>  *** caught segfault ***
>> address 0xb7803934, cause 'memory not mapped'
>>
>> Traceback:
>>  1: dput(objeS, outTxt)
>
> Does the following solve the problem?  valgrind on R 2.8.0 finds
> deparse.c:do_dput() reading from freed memory, tval, the output
> of deparse1(), right after a call to Rconn_printf() invokes the
> garbage collector and frees tval.
>
> It is taking a long time to run the example under valgrind
> after the fix, but I think it has gotten past the original error.
>
> Index: src/main/deparse.c
> ===================================================================
> --- src/main/deparse.c	(revision 46243)
> +++ src/main/deparse.c	(working copy)
> @@ -284,7 +284,7 @@
>     if(!isNull(CADDR(args)))
> 	opts = asInteger(CADDR(args));
>
> -    tval = deparse1(tval, 0, opts);
> +    PROTECT(tval = deparse1(tval, 0, opts));
>     if (TYPEOF(CAR(args)) == CLOSXP) {
> 	SET_CLOENV(CAR(args), saveenv);
> 	UNPROTECT(1);
> @@ -313,6 +313,7 @@
> 	       res < strlen(CHAR(STRING_ELT(tval, i))) + 1)
> 		warning(_("wrote too few characters"));
> 	}
> +    UNPROTECT(1) ; /* tval */
>     if (!wasopen) con->close(con);
>     return (CAR(args));
> }
>
> The valgrind session was:
>  > objeS  <- matrix("AAA",1000000)
>  >  class(objeS)
>  [1] "matrix"
>  > outTxt <- textConnection("vaClob", open = "w", local = FALSE)
>  > dput(objeS,outTxt)
>  ==32381== Invalid read of size 4
>  ==32381==    at 0x813917E: do_dput (deparse.c:312)
>  ==32381==    by 0x8065454: do_internal (names.c:1138)
>  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
>  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
>  ==32381==    by 0x8162267: do_begin (eval.c:1174)
>  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
>  ==32381==    by 0x81636D0: Rf_applyClosure (eval.c:667)
>  ==32381==    by 0x816048F: Rf_eval (eval.c:505)
>  ==32381==    by 0x8058033: Rf_ReplIteration (main.c:257)
>  ==32381==    by 0x805825E: R_ReplConsole (main.c:306)
>  ==32381==    by 0x80584F4: run_Rmainloop (main.c:966)
>  ==32381==    by 0x805674D: main (Rmain.c:33)
>  ==32381==  Address 0x59B9B58 is 2,864 bytes inside a block of size 444,472 free'd
>  ==32381==    at 0x40052A3: free (vg_replace_malloc.c:233)
>  ==32381==    by 0x805ACFD: R_gc_internal (memory.c:767)
>  ==32381==    by 0x805BA4A: Rf_allocVector (memory.c:1971)
>  ==32381==    by 0x810C45C: Rf_lengthgets (builtin.c:746)
>  ==32381==    by 0x8123B0D: text_vfprintf (connections.c:2303)
>  ==32381==    by 0x8127147: Rconn_printf (connections.c:2868)
>  ==32381==    by 0x813917D: do_dput (deparse.c:311)
>  ==32381==    by 0x8065454: do_internal (names.c:1138)
>  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
>  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
>  ==32381==    by 0x8162267: do_begin (eval.c:1174)
>  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
>
> ----------------------------------------------------------------------------
> Bill Dunlap
> Insightful Corporation
> bill at insightful dot com
> 360-428-8146
>
> "All statements in this message represent the opinions of the author and do
> not necessarily reflect Insightful Corporation policy or position."
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From bill at insightful.com  Thu Aug  7 22:10:19 2008
From: bill at insightful.com (Bill Dunlap)
Date: Thu, 7 Aug 2008 13:10:19 -0700 (PDT)
Subject: [Rd] dput function (PR#12112)
In-Reply-To: <alpine.LFD.1.10.0808072053480.29337@gannet.stats.ox.ac.uk>
References: <20080807094508.0134E282EFC1@mail.pubhealth.ku.dk>
	<Pine.GSO.4.56.0808071115400.2600@devsun3201.insightful.com>
	<alpine.LFD.1.10.0808072053480.29337@gannet.stats.ox.ac.uk>
Message-ID: <Pine.GSO.4.56.0808071307210.2600@devsun3201.insightful.com>

By the way, valgrind finally finished checking
this example and found no problems after adding
the PROTECT(tval).  Nor did valgrindless R crash as it
did before on this example.
-Bill

On Thu, 7 Aug 2008, Prof Brian Ripley wrote:

> Bill,
>
> Thanks.  Whether or not it is the cause here it should clearly be
> PROTECT-ed (I suspect the original version didn't need to be, but leaving
> PROTECTs off is prejudicial to future maintenance), so I've incorporated
> this in R-devel/R-patched.
>
> Brian
>
> On Thu, 7 Aug 2008, Bill Dunlap wrote:
>
> > On Thu, 7 Aug 2008 juangea at geax.net wrote:
> >
> >> Full_Name: Juan Gea
> >> Version: R version 2.6.2
> >> OS: Fedora Core 6
> >> Submission from: (NULL) (79.153.48.49)
> >>
> >> Abort:
> >>
> >> objeS  <- matrix("AAA",1000000)
> >> class(objeS)
> >> outTxt <- textConnection("vaClob", open = "w", local = FALSE)
> >> dput(objeS,outTxt)
> >> close(outTxt)
> >>
> >>
> >> R version 2.6.2 (2008-02-08)
> >> ...
> >>> objeS  <- matrix("AAA",1000000)
> >>> class(objeS)
> >> [1] "matrix"
> >>> outTxt <- textConnection("vaClob", open = "w", local = FALSE)
> >>> dput(objeS,outTxt)
> >>
> >>  *** caught segfault ***
> >> address 0xb7803934, cause 'memory not mapped'
> >>
> >> Traceback:
> >>  1: dput(objeS, outTxt)
> >
> > Does the following solve the problem?  valgrind on R 2.8.0 finds
> > deparse.c:do_dput() reading from freed memory, tval, the output
> > of deparse1(), right after a call to Rconn_printf() invokes the
> > garbage collector and frees tval.
> >
> > It is taking a long time to run the example under valgrind
> > after the fix, but I think it has gotten past the original error.
> >
> > Index: src/main/deparse.c
> > ===================================================================
> > --- src/main/deparse.c	(revision 46243)
> > +++ src/main/deparse.c	(working copy)
> > @@ -284,7 +284,7 @@
> >     if(!isNull(CADDR(args)))
> > 	opts = asInteger(CADDR(args));
> >
> > -    tval = deparse1(tval, 0, opts);
> > +    PROTECT(tval = deparse1(tval, 0, opts));
> >     if (TYPEOF(CAR(args)) == CLOSXP) {
> > 	SET_CLOENV(CAR(args), saveenv);
> > 	UNPROTECT(1);
> > @@ -313,6 +313,7 @@
> > 	       res < strlen(CHAR(STRING_ELT(tval, i))) + 1)
> > 		warning(_("wrote too few characters"));
> > 	}
> > +    UNPROTECT(1) ; /* tval */
> >     if (!wasopen) con->close(con);
> >     return (CAR(args));
> > }
> >
> > The valgrind session was:
> >  > objeS  <- matrix("AAA",1000000)
> >  >  class(objeS)
> >  [1] "matrix"
> >  > outTxt <- textConnection("vaClob", open = "w", local = FALSE)
> >  > dput(objeS,outTxt)
> >  ==32381== Invalid read of size 4
> >  ==32381==    at 0x813917E: do_dput (deparse.c:312)
> >  ==32381==    by 0x8065454: do_internal (names.c:1138)
> >  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
> >  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
> >  ==32381==    by 0x8162267: do_begin (eval.c:1174)
> >  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
> >  ==32381==    by 0x81636D0: Rf_applyClosure (eval.c:667)
> >  ==32381==    by 0x816048F: Rf_eval (eval.c:505)
> >  ==32381==    by 0x8058033: Rf_ReplIteration (main.c:257)
> >  ==32381==    by 0x805825E: R_ReplConsole (main.c:306)
> >  ==32381==    by 0x80584F4: run_Rmainloop (main.c:966)
> >  ==32381==    by 0x805674D: main (Rmain.c:33)
> >  ==32381==  Address 0x59B9B58 is 2,864 bytes inside a block of size 444,472 free'd
> >  ==32381==    at 0x40052A3: free (vg_replace_malloc.c:233)
> >  ==32381==    by 0x805ACFD: R_gc_internal (memory.c:767)
> >  ==32381==    by 0x805BA4A: Rf_allocVector (memory.c:1971)
> >  ==32381==    by 0x810C45C: Rf_lengthgets (builtin.c:746)
> >  ==32381==    by 0x8123B0D: text_vfprintf (connections.c:2303)
> >  ==32381==    by 0x8127147: Rconn_printf (connections.c:2868)
> >  ==32381==    by 0x813917D: do_dput (deparse.c:311)
> >  ==32381==    by 0x8065454: do_internal (names.c:1138)
> >  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
> >  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
> >  ==32381==    by 0x8162267: do_begin (eval.c:1174)
> >  ==32381==    by 0x8160557: Rf_eval (eval.c:461)
> >
> > ----------------------------------------------------------------------------
> > Bill Dunlap
> > Insightful Corporation
> > bill at insightful dot com
> > 360-428-8146
> >
> > "All statements in this message represent the opinions of the author and do
> > not necessarily reflect Insightful Corporation policy or position."
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>

----------------------------------------------------------------------------
Bill Dunlap
Insightful Corporation
bill at insightful dot com

 "All statements in this message represent the opinions of the author and do
 not necessarily reflect Insightful Corporation policy or position."


From nellem at u.washington.edu  Thu Aug  7 20:25:22 2008
From: nellem at u.washington.edu (nellem at u.washington.edu)
Date: Thu,  7 Aug 2008 20:25:22 +0200 (CEST)
Subject: [Rd] R 2.7.1 (PR#12510)
Message-ID: <20080807182522.60E6B282EFC1@mail.pubhealth.ku.dk>

When I ask R 2.7.1 to read the file below it gives this error message.  Whe=
n I ask R 2.5.0 to read this same file it runs fine.  I think there is a bu=
g in 2.7.1.  Would you please check this for me.  Thanks.  Ellen Mitchell

symptoms <-readSPSSdata ("D:Documents and Settings/ag diary; total live bir=
ths; stages 0-5 for R.sav")
Error: unexpected input in "symptoms <-readSPSSdata (""

	[[alternative HTML version deleted]]


From p.dalgaard at biostat.ku.dk  Fri Aug  8 00:23:50 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Fri, 08 Aug 2008 00:23:50 +0200
Subject: [Rd] Bug repository awakening
In-Reply-To: <18587.21317.502263.659823@cmath-5.math.ethz.ch>
References: <489AC3D6.2090806@biostat.ku.dk>
	<18587.21317.502263.659823@cmath-5.math.ethz.ch>
Message-ID: <489B75F6.1080705@biostat.ku.dk>

Martin Maechler wrote:
>>>>>> "PD" == Peter Dalgaard <p.dalgaard at biostat.ku.dk>
>>>>>>     on Thu, 07 Aug 2008 11:43:50 +0200 writes:
>>>>>>             
>
>     PD> Looks like reports from the last month are trickling
>     PD> in. 170 of them in incoming, but there's a lot of
>     PD> spam. I hope Martin's spamfilters are less leaky that
>     PD> ours, so that they get killed en route to r-devel....
>
> Yes, they have been *much* less leaky for quite a while:
>
> It's me as admin and Marc Schwartz as volunteer moderator,
> for all messages from people not subscribed to R-devel.
> This time (US morning), it was Marc who manually approved many
> dozens of messages.
>
>  [[ ==> Please, "regular bug reporters", do subscribe to R-devel... ]]
>
> Martin Maechler, ETH Zuric
I still hope that your non-human filters can relieve the human ones....

As it turned out there were 560 messages by the end of the day.  I've 
managed to cut that down to about 150, using brute force on the 
repository, and even that is mostly spam. However, the remainder will 
still have been forwarded to r-devel.....

 

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From marc_schwartz at comcast.net  Fri Aug  8 00:53:04 2008
From: marc_schwartz at comcast.net (Marc Schwartz)
Date: Thu, 07 Aug 2008 17:53:04 -0500
Subject: [Rd] Bug repository awakening
In-Reply-To: <489B75F6.1080705@biostat.ku.dk>
References: <489AC3D6.2090806@biostat.ku.dk>	<18587.21317.502263.659823@cmath-5.math.ethz.ch>
	<489B75F6.1080705@biostat.ku.dk>
Message-ID: <489B7CD0.5050002@comcast.net>

on 08/07/2008 05:23 PM Peter Dalgaard wrote:
> Martin Maechler wrote:
>>>>>>> "PD" == Peter Dalgaard <p.dalgaard at biostat.ku.dk>
>>>>>>>     on Thu, 07 Aug 2008 11:43:50 +0200 writes:
>>>>>>>             
>>
>>     PD> Looks like reports from the last month are trickling
>>     PD> in. 170 of them in incoming, but there's a lot of
>>     PD> spam. I hope Martin's spamfilters are less leaky that
>>     PD> ours, so that they get killed en route to r-devel....
>>
>> Yes, they have been *much* less leaky for quite a while:
>>
>> It's me as admin and Marc Schwartz as volunteer moderator,
>> for all messages from people not subscribed to R-devel.
>> This time (US morning), it was Marc who manually approved many
>> dozens of messages.

A lot (most) of those went to /dev/null and were added to the 
auto-discard list so that they won't continue to be problematic in the 
future. A little CQI for the human filters.

>>  [[ ==> Please, "regular bug reporters", do subscribe to R-devel... ]]
>>
>> Martin Maechler, ETH Zuric
> I still hope that your non-human filters can relieve the human ones....
> 
> As it turned out there were 560 messages by the end of the day.  I've 
> managed to cut that down to about 150, using brute force on the 
> repository, and even that is mostly spam. However, the remainder will 
> still have been forwarded to r-devel.....

Peter, has there been any awakening of prior discussions with respect to 
replacing JitterBug with Bugzilla?

Cheers,

Marc


From p.dalgaard at biostat.ku.dk  Fri Aug  8 01:45:30 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Fri, 08 Aug 2008 01:45:30 +0200
Subject: [Rd] Bug repository awakening
In-Reply-To: <489B7CD0.5050002@comcast.net>
References: <489AC3D6.2090806@biostat.ku.dk>	<18587.21317.502263.659823@cmath-5.math.ethz.ch>
	<489B75F6.1080705@biostat.ku.dk> <489B7CD0.5050002@comcast.net>
Message-ID: <489B891A.1080404@biostat.ku.dk>

Marc Schwartz wrote:
> on 08/07/2008 05:23 PM Peter Dalgaard wrote:
>> Martin Maechler wrote:
>>>>>>>> "PD" == Peter Dalgaard <p.dalgaard at biostat.ku.dk>
>>>>>>>>     on Thu, 07 Aug 2008 11:43:50 +0200 writes:
>>>>>>>>             
>>>
>>>     PD> Looks like reports from the last month are trickling
>>>     PD> in. 170 of them in incoming, but there's a lot of
>>>     PD> spam. I hope Martin's spamfilters are less leaky that
>>>     PD> ours, so that they get killed en route to r-devel....
>>>
>>> Yes, they have been *much* less leaky for quite a while:
>>>
>>> It's me as admin and Marc Schwartz as volunteer moderator,
>>> for all messages from people not subscribed to R-devel.
>>> This time (US morning), it was Marc who manually approved many
>>> dozens of messages.
>
> A lot (most) of those went to /dev/null and were added to the 
> auto-discard list so that they won't continue to be problematic in the 
> future. A little CQI for the human filters.
>
>>>  [[ ==> Please, "regular bug reporters", do subscribe to R-devel... ]]
>>>
>>> Martin Maechler, ETH Zuric
>> I still hope that your non-human filters can relieve the human ones....
>>
>> As it turned out there were 560 messages by the end of the day.  I've 
>> managed to cut that down to about 150, using brute force on the 
>> repository, and even that is mostly spam. However, the remainder will 
>> still have been forwarded to r-devel.....
>
> Peter, has there been any awakening of prior discussions with respect 
> to replacing JitterBug with Bugzilla?
>
Not really, but it is lurking all the time for various reasons. Yet 
another thing to discuss at useR, I think.
> Cheers,
>
> Marc


-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From ripley at stats.ox.ac.uk  Fri Aug  8 08:00:12 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Fri,  8 Aug 2008 08:00:12 +0200 (CEST)
Subject: [Rd] (PR#11903 )Rgui.exe(R.dll) crashes when set the locale to
Message-ID: <20080808060012.AD693282EFC1@mail.pubhealth.ku.dk>

On Thu, 3 Jul 2008, ksdori at gmail.com wrote:

> Full_Name: Sang Hyun Koh
> Version: 2.7.0, 2.7.1
> OS: MS Windows XP, Server 2003
> Submission from: (NULL) (202.30.14.68)
>
>
> Since R 2.7.0 & recent 2.7.1, Rgui.exe crashes on Korean Windows XP and 2003.
>
> After change the locale language to Japanese, Chinese, English, and etc on
> control panel, I had no problem in running 2.7.x on Korean Windows.
>
> And I re-install Windows XP, English version, and I could reproduce the bug by
> changing locale language to Korean on control panel. of course, no other
> language setting made the problem.

It does not happen in the Korean locale with 2.7.0 or 2.7.1 on my machine 
(XP SP3, International English).

> So, It must be a problem between Korean language localization on windows and
> Rgui.exe.
>
> Please, help to remove the bug.

Please do help us by submitting a suitable patch.  Only someone with the 
problem can do so.

We don't even know what you mean by 'crashes' (a word the R posting guide 
specifically asks you not to use) nor what language you are running R 
under.


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Fri Aug  8 08:00:55 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 8 Aug 2008 07:00:55 +0100 (BST)
Subject: [Rd] stripchart ignores main title option (PR#12202)
In-Reply-To: <20080807095918.7B2C1282EFC1@mail.pubhealth.ku.dk>
References: <20080807095918.7B2C1282EFC1@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808080653110.27004@gannet.stats.ox.ac.uk>

Strictly this is correct:

      ...: additional parameters passed to the default method, or by it
           to 'plot' and 'axis' to control the appearance of the  plot.

Note, not title(), and plot() is called with ann=FALSE.  So the fix is to 
call title() separately.

It should now be safe to pass '...' to title() (it used not to be) so I'll 
add this a a new feature in 2.8.0.

On Thu, 7 Aug 2008, j.curran at auckland.ac.nz wrote:

> Full_Name: James Curran
> Version: 2.7.1
> OS: Windows XP/Vista
> Submission from: (NULL) (130.216.51.81)
>
>
> stripchart ignores the main title option. For example, in the documentation
>
>     stripchart(decrease ~ treatment,
>         main = "stripchart(OrchardSprays)",
>         vertical = TRUE, log = "y", data = OrchardSprays)
>
>
> does not yield a plot with "stripchart(OrchardSprays)" at the top of the plot.
> Looking at the source code of stripchart.default there is:
>
> ....
> title(xlab = xlab, ylab = ylab)
> ....
>
> I would have thought the main would have got wrapped up in the ... that is sent
> to the plot command, but then I don't know enough about it.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Fri Aug  8 08:07:57 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 8 Aug 2008 07:07:57 +0100 (BST)
Subject: [Rd] Bug repository awakening
In-Reply-To: <489B75F6.1080705@biostat.ku.dk>
References: <489AC3D6.2090806@biostat.ku.dk>
	<18587.21317.502263.659823@cmath-5.math.ethz.ch>
	<489B75F6.1080705@biostat.ku.dk>
Message-ID: <alpine.LFD.1.10.0808080704210.27299@gannet.stats.ox.ac.uk>

I've now tidied up the remaining messages, so there are about 6 new ones 
(for now -- spam was still arriving as I did this). For a couple of those 
the attachements will need unpicking and decoding.

On Fri, 8 Aug 2008, Peter Dalgaard wrote:

> Martin Maechler wrote:
>>>>>>> "PD" == Peter Dalgaard <p.dalgaard at biostat.ku.dk>
>>>>>>>     on Thu, 07 Aug 2008 11:43:50 +0200 writes:
>>>>>>> 
>>
>>     PD> Looks like reports from the last month are trickling
>>     PD> in. 170 of them in incoming, but there's a lot of
>>     PD> spam. I hope Martin's spamfilters are less leaky that
>>     PD> ours, so that they get killed en route to r-devel....
>> 
>> Yes, they have been *much* less leaky for quite a while:
>> 
>> It's me as admin and Marc Schwartz as volunteer moderator,
>> for all messages from people not subscribed to R-devel.
>> This time (US morning), it was Marc who manually approved many
>> dozens of messages.
>>
>>  [[ ==> Please, "regular bug reporters", do subscribe to R-devel... ]]
>> 
>> Martin Maechler, ETH Zuric
> I still hope that your non-human filters can relieve the human ones....
>
> As it turned out there were 560 messages by the end of the day.  I've managed 
> to cut that down to about 150, using brute force on the repository, and even 
> that is mostly spam. However, the remainder will still have been forwarded to 
> r-devel.....
>
>
>
> --
>  O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

From ripley at stats.ox.ac.uk  Fri Aug  8 08:57:29 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 8 Aug 2008 07:57:29 +0100 (BST)
Subject: [Rd] package.skeleton does invalide regular name,
 bis... (PR#12020)
In-Reply-To: <20080807093342.08E98282EFC1@mail.pubhealth.ku.dk>
References: <20080807093342.08E98282EFC1@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808080756170.28501@gannet.stats.ox.ac.uk>

This is already fixed by

r46068 | maechler | 2008-07-16 22:34:26 +0100 (Wed, 16 Jul 2008) | 1 line

package.skeleton(., code_files) fix name check

Not sure when it was submitted ....

On Thu, 7 Aug 2008, cgenolin at u-paris10.fr wrote:

> Hi the list,
>
> I guess I find an other bug (the first one is at the end off this mail)
> in package.skeleton. It occurs when we give as code_file some file that
> are not in the current directories.
>
> If we give a single file to code_file (like code_file=3D"riri/fifi.R"),
> it does not reconize fifi.R as a regular name and change it to
> riri/zfifi.R
>
> If we give several file to code_file (like
> code_file=3Dc("riri/titi.R","riri/loulou.R")), it does not reconize
> titi.R as a regular name, change it to toto/ztiti.R and we get an error
> on riri/loulou.R
>
> Christophe
>
> --- 8< ---------------------
>> package.skeleton(name=3D"miniKml",code_files=3Dc("miniKml/R/global.R","mi=
> niKml/R/global2.R"),force=3DTRUE)
>
> Cr=E9ation des r=E9pertoires...
> Cr=E9ation de DESCRIPTION...
> Cr=E9ation de 'Read-and-delete-me'...
> Recopiage des fichiers de code...
> Erreur dans file.rename(from =3D file.path(code_dir, bn), to =3D
> file.path(code_dir,  :  'source' doit =EAtre une cha=EEne de caract=E8res u=
> nique
> De plus : Warning message:
> In package.skeleton(name =3D "miniKml", code_files =3D c("miniKml/R/global.=
> R",  :
>  Nom(s) de fichier(s) invalide(s) pour du code R ./miniKml/R:
>  'global.R', 'global2.R'
> sont maintenant renomm=E9s vers 'z<nom>.R'
> --- 8< --------------------------
>
>
>> Hi the list,
>>
>> I am using package.skeleton on a file that has a very classic name,
>> but package.skeleton detect it as a invalid name :
>>
>> --- 8< -------
>> package.skeleton(name=3D"packClassicBis",code_files=3D"./packClassic/R/pr=
> ogClassic.R")
>>
>> Cr=E9ation des r=E9pertoires...
>> Cr=E9ation de DESCRIPTION...
>> Cr=E9ation de 'Read-and-delete-me'...
>> Recopiage des fichiers de code...
>> Cr=E9ation des fichiers d'aide ...
>> Termin=E9.
>> Les =E9tapes suivantes sont d=E9crites dans './packClassic4/Read-and-dele=
> te-me'.
>> Warning message:
>> In package.skeleton(name =3D "packClassic4", code_files =3D
>> "./packClassic/R/progClassic.R") :
>>  Nom(s) de fichier(s) invalide(s) pour du code R ./packClassic4/R:
>>  'progClassic.R'
>> sont maintenant renomm=E9s vers 'z<nom>.R'
>> --- 8< -------
>>
>> It create the file "zprogClassic.R" in directorie "packClassicBis\R"
>> Is there something wrong in my code or is it a bug in package.skeleton ?
>>
>> Christophe
>>
>> ----------------------------------------------------------------
>> Ce message a ete envoye par IMP, grace a l'Universite Paris 10 Nanterre
>>
>>
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From samaya6501 at yahoo.com.tw  Fri Aug  8 13:30:04 2008
From: samaya6501 at yahoo.com.tw (samaya6501 at yahoo.com.tw)
Date: Fri,  8 Aug 2008 13:30:04 +0200 (CEST)
Subject: [Rd] Truncation error on simply mean & sum function (PR#12515)
Message-ID: <20080808113004.3B2FA282EFC2@mail.pubhealth.ku.dk>

Full_Name: Tom Wang
Version: 2.6.2
OS: Linux, Windows
Submission from: (NULL) (61.230.6.228)


I've found an instance:

> a <- c(0.187,-0.019,0.074,-0.06,0.221,-0.079,0.12,0.079,-0.281,-0.242)
> sum(a)
[1] -2.428613e-17

The actual sum is 0 but it reports the wrong answer.

Maybe it is due to the computer truncation error.


From mathieu.ribatet at epfl.ch  Fri Aug  8 14:56:51 2008
From: mathieu.ribatet at epfl.ch (Mathieu Ribatet)
Date: Fri, 08 Aug 2008 14:56:51 +0200
Subject: [Rd] Suggestion for the optimization code
Message-ID: <489C4293.2080806@epfl.ch>

    Dear list,

Here's a suggestion about the different optimization code. There are 
several optimization procedures in the base package (optim, optimize, 
nlm, nlminb, ..). However, the output of these functions are slightly 
different. For instance,

   1. optim returns a list with arguments par (the estimates), value the
      minimum (maxima) of the objective function, convergence (optim
      .convergence)
   2. optimize returns a list with arguments minimum (or maximum) giving
      the estimates, objective the value of the obj. function
   3. nlm returns a list with arguments minimum giving the minimum of
      the obj. function, minimum the estimates, code the optim. convergence
   4. nlminb returns a list with arguments par (the estimates),
      objective, convergence (conv. code), evaluations

Furthermore, optim keeps the names of the parameters while nlm, nlminb 
don't.
s
I believe it would be nice if all these optimizers have a kind of 
homogenized output. This will help in writing functions that can call 
different optimizers. Obviously, we can write our own function that 
homogenized the output after calling the optimizer, but I still believe 
this will be more user-friendly.

Do you think this is a reasonable feature to implement - despite it 
isn't an important point?
Best,
Mathieu

* BTW, if this is relevant, I could try to do it.

-- 
Institute of Mathematics
Ecole Polytechnique F?d?rale de Lausanne
STAT-IMA-FSB-EPFL, Station 8
CH-1015 Lausanne   Switzerland
http://stat.epfl.ch/
Tel: + 41 (0)21 693 7907


From murdoch at stats.uwo.ca  Fri Aug  8 15:13:57 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Fri, 08 Aug 2008 09:13:57 -0400
Subject: [Rd] Suggestion for the optimization code
In-Reply-To: <489C4293.2080806@epfl.ch>
References: <489C4293.2080806@epfl.ch>
Message-ID: <489C4695.7090305@stats.uwo.ca>

On 8/8/2008 8:56 AM, Mathieu Ribatet wrote:
>     Dear list,
> 
> Here's a suggestion about the different optimization code. There are 
> several optimization procedures in the base package (optim, optimize, 
> nlm, nlminb, ..). However, the output of these functions are slightly 
> different. For instance,
> 
>    1. optim returns a list with arguments par (the estimates), value the
>       minimum (maxima) of the objective function, convergence (optim
>       .convergence)
>    2. optimize returns a list with arguments minimum (or maximum) giving
>       the estimates, objective the value of the obj. function
>    3. nlm returns a list with arguments minimum giving the minimum of
>       the obj. function, minimum the estimates, code the optim. convergence
>    4. nlminb returns a list with arguments par (the estimates),
>       objective, convergence (conv. code), evaluations
> 
> Furthermore, optim keeps the names of the parameters while nlm, nlminb 
> don't.
> s
> I believe it would be nice if all these optimizers have a kind of 
> homogenized output. This will help in writing functions that can call 
> different optimizers. Obviously, we can write our own function that 
> homogenized the output after calling the optimizer, but I still believe 
> this will be more user-friendly.

Unfortunately, changing the names within the return value would break a 
lot of existing uses of those functions.  Writing a wrapper to 
homogenize the output is probably the right thing to do.

Duncan Murdoch

> Do you think this is a reasonable feature to implement - despite it 
> isn't an important point?
> Best,
> Mathieu
> 
> * BTW, if this is relevant, I could try to do it.


From ripley at stats.ox.ac.uk  Fri Aug  8 15:26:43 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 8 Aug 2008 14:26:43 +0100 (BST)
Subject: [Rd] Suggestion for the optimization code
In-Reply-To: <489C4293.2080806@epfl.ch>
References: <489C4293.2080806@epfl.ch>
Message-ID: <alpine.LFD.1.10.0808081405100.7967@gannet.stats.ox.ac.uk>

On Fri, 8 Aug 2008, Mathieu Ribatet wrote:

>   Dear list,
>
> Here's a suggestion about the different optimization code. There are several 
> optimization procedures in the base package (optim, optimize, nlm, nlminb, 
> ..). However, the output of these functions are slightly different. For 
> instance,
>
>  1. optim returns a list with arguments par (the estimates), value the
>     minimum (maxima) of the objective function, convergence (optim
>     .convergence)
>  2. optimize returns a list with arguments minimum (or maximum) giving
>     the estimates, objective the value of the obj. function
>  3. nlm returns a list with arguments minimum giving the minimum of
>     the obj. function, minimum the estimates, code the optim. convergence
>  4. nlminb returns a list with arguments par (the estimates),
>     objective, convergence (conv. code), evaluations
>
> Furthermore, optim keeps the names of the parameters while nlm, nlminb don't.
> s
> I believe it would be nice if all these optimizers have a kind of homogenized 
> output. This will help in writing functions that can call different 
> optimizers. Obviously, we can write our own function that homogenized the 
> output after calling the optimizer, but I still believe this will be more 
> user-friendly.
>
> Do you think this is a reasonable feature to implement - despite it isn't an 
> important point?

This would be essentially impossible without breaking most existing code, 
and in the case of optimize() and nlminb() that goes back many years to 
uses in S(-PLUS).

> Best,
> Mathieu
>
> * BTW, if this is relevant, I could try to do it.
>
> -- 
> Institute of Mathematics
> Ecole Polytechnique F?d?rale de Lausanne
> STAT-IMA-FSB-EPFL, Station 8
> CH-1015 Lausanne   Switzerland
> http://stat.epfl.ch/
> Tel: + 41 (0)21 693 7907
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

From brechbuehler at gmail.com  Fri Aug  8 15:26:43 2008
From: brechbuehler at gmail.com (=?ISO-8859-1?Q?Christian_Brechb=FChler?=)
Date: Fri, 8 Aug 2008 09:26:43 -0400
Subject: [Rd] Truncation error on simply mean & sum function (PR#12515
In-Reply-To: <20080808113004.3B2FA282EFC2@mail.pubhealth.ku.dk>
References: <20080808113004.3B2FA282EFC2@mail.pubhealth.ku.dk>
Message-ID: <c0177e5a0808080626o71abaac3mce7e52a8f6f61962@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080808/416f7045/attachment.pl>

From rgentlem at fhcrc.org  Fri Aug  8 15:28:16 2008
From: rgentlem at fhcrc.org (Robert Gentleman)
Date: Fri, 08 Aug 2008 06:28:16 -0700
Subject: [Rd] Suggestion for the optimization code
In-Reply-To: <489C4695.7090305@stats.uwo.ca>
References: <489C4293.2080806@epfl.ch> <489C4695.7090305@stats.uwo.ca>
Message-ID: <489C49F0.6090603@fhcrc.org>



Duncan Murdoch wrote:
> On 8/8/2008 8:56 AM, Mathieu Ribatet wrote:
>>     Dear list,
>>
>> Here's a suggestion about the different optimization code. There are 
>> several optimization procedures in the base package (optim, optimize, 
>> nlm, nlminb, ..). However, the output of these functions are slightly 
>> different. For instance,
>>
>>    1. optim returns a list with arguments par (the estimates), value the
>>       minimum (maxima) of the objective function, convergence (optim
>>       .convergence)
>>    2. optimize returns a list with arguments minimum (or maximum) giving
>>       the estimates, objective the value of the obj. function
>>    3. nlm returns a list with arguments minimum giving the minimum of
>>       the obj. function, minimum the estimates, code the optim. 
>> convergence
>>    4. nlminb returns a list with arguments par (the estimates),
>>       objective, convergence (conv. code), evaluations
>>
>> Furthermore, optim keeps the names of the parameters while nlm, nlminb 
>> don't.
>> s
>> I believe it would be nice if all these optimizers have a kind of 
>> homogenized output. This will help in writing functions that can call 
>> different optimizers. Obviously, we can write our own function that 
>> homogenized the output after calling the optimizer, but I still 
>> believe this will be more user-friendly.
> 
> Unfortunately, changing the names within the return value would break a 
> lot of existing uses of those functions.  Writing a wrapper to 
> homogenize the output is probably the right thing to do.

   And potentially to harmonize inputs. The MLInterfaces package 
(Bioconductor) has done this for many machine learning algorithms, 
should you want an example to look at.

   Robert


> 
> Duncan Murdoch
> 
>> Do you think this is a reasonable feature to implement - despite it 
>> isn't an important point?
>> Best,
>> Mathieu
>>
>> * BTW, if this is relevant, I could try to do it.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Robert Gentleman, PhD
Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M2-B876
PO Box 19024
Seattle, Washington 98109-1024
206-667-7700
rgentlem at fhcrc.org


From mathieu.ribatet at epfl.ch  Fri Aug  8 15:29:30 2008
From: mathieu.ribatet at epfl.ch (Mathieu Ribatet)
Date: Fri, 08 Aug 2008 15:29:30 +0200
Subject: [Rd] Suggestion for the optimization code
In-Reply-To: <alpine.LFD.1.10.0808081405100.7967@gannet.stats.ox.ac.uk>
References: <489C4293.2080806@epfl.ch>
	<alpine.LFD.1.10.0808081405100.7967@gannet.stats.ox.ac.uk>
Message-ID: <489C4A3A.7040104@epfl.ch>

Ok, please consider it as a bad call.
Thanks for your answers.
Best,
Mathieu

Prof Brian Ripley a ?crit :
> On Fri, 8 Aug 2008, Mathieu Ribatet wrote:
>
>   
>>   Dear list,
>>
>> Here's a suggestion about the different optimization code. There are several
>> optimization procedures in the base package (optim, optimize, nlm, nlminb,
>> ..). However, the output of these functions are slightly different. For
>> instance,
>>
>>  1. optim returns a list with arguments par (the estimates), value the
>>     minimum (maxima) of the objective function, convergence (optim
>>     .convergence)
>>  2. optimize returns a list with arguments minimum (or maximum) giving
>>     the estimates, objective the value of the obj. function
>>  3. nlm returns a list with arguments minimum giving the minimum of
>>     the obj. function, minimum the estimates, code the optim. convergence
>>  4. nlminb returns a list with arguments par (the estimates),
>>     objective, convergence (conv. code), evaluations
>>
>> Furthermore, optim keeps the names of the parameters while nlm, nlminb don't.
>> s
>> I believe it would be nice if all these optimizers have a kind of homogenized
>> output. This will help in writing functions that can call different
>> optimizers. Obviously, we can write our own function that homogenized the
>> output after calling the optimizer, but I still believe this will be more
>> user-friendly.
>>
>> Do you think this is a reasonable feature to implement - despite it isn't an
>> important point?
>>     
>
> This would be essentially impossible without breaking most existing code,
> and in the case of optimize() and nlminb() that goes back many years to
> uses in S(-PLUS).
>
>   
>> Best,
>> Mathieu
>>
>> * BTW, if this is relevant, I could try to do it.
>>
>> --
>> Institute of Mathematics
>> Ecole Polytechnique F?d?rale de Lausanne
>> STAT-IMA-FSB-EPFL, Station 8
>> CH-1015 Lausanne   Switzerland
>> http://stat.epfl.ch/
>> Tel: + 41 (0)21 693 7907
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>     
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>   

-- 
Institute of Mathematics
Ecole Polytechnique F?d?rale de Lausanne
STAT-IMA-FSB-EPFL, Station 8
CH-1015 Lausanne   Switzerland
http://stat.epfl.ch/
Tel: + 41 (0)21 693 7907


From tlumley at u.washington.edu  Fri Aug  8 18:41:37 2008
From: tlumley at u.washington.edu (Thomas Lumley)
Date: Fri, 8 Aug 2008 09:41:37 -0700 (PDT)
Subject: [Rd] Truncation error on simply mean & sum function (PR#12515)
In-Reply-To: <20080808113004.3B2FA282EFC2@mail.pubhealth.ku.dk>
References: <20080808113004.3B2FA282EFC2@mail.pubhealth.ku.dk>
Message-ID: <Pine.LNX.4.64.0808080940000.29914@homer24.u.washington.edu>


Not a bug. None of these numbers are exactly representable in binary, so 
you can't expect accuracy of better than machine epsilon.

Please don't report things that aren't bugs to r-bugs.

 	-thomas



On Fri, 8 Aug 2008, samaya6501 at yahoo.com.tw wrote:

> Full_Name: Tom Wang
> Version: 2.6.2
> OS: Linux, Windows
> Submission from: (NULL) (61.230.6.228)
>
>
> I've found an instance:
>
>> a <- c(0.187,-0.019,0.074,-0.06,0.221,-0.079,0.12,0.079,-0.281,-0.242)
>> sum(a)
> [1] -2.428613e-17
>
> The actual sum is 0 but it reports the wrong answer.
>
> Maybe it is due to the computer truncation error.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

Thomas Lumley			Assoc. Professor, Biostatistics
tlumley at u.washington.edu	University of Washington, Seattle


From ripley at stats.ox.ac.uk  Fri Aug  8 20:06:57 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 8 Aug 2008 19:06:57 +0100 (BST)
Subject: [Rd] LinkingTo for 2 packages
In-Reply-To: <4807603F.9030608@gmail.com>
References: <4807603F.9030608@gmail.com>
Message-ID: <alpine.LFD.1.10.0808081905330.17538@gannet.stats.ox.ac.uk>

A delated reply: the problem on Windows was a missing set of quotes. 
Herve Pages provided an example, and this should work (does for me) on 
both Unix and Windows in R-patched and R-devel.

On Thu, 17 Apr 2008, Iago Mosqueira wrote:

> Hello,
>
> One of our packages contains C++ code that needs to be compiled against
> 2 other packages. So the LinkingTo field in DESCRIPTION looks like this
>
> LinkingTo: FLCore,FLash
>
> Both packages are also in the Depends field.
>
> In R 2.6.2, first thing we noticed was that both names could not have
> any space between them, althoguh the example in the html version of
> "Writing R Extensions" does have one:
>
> "A package that wishes to make use of header files in other packages
> needs to declare them as a comma-separated list in the field LinkingTo
> in the DESCRIPTION file. For example
>
>     Depends: link2, link3
>     LinkingTo: link2, link3"
>
> With the space character, this is the compiler call found in 00install.out
>
> g++ -I/usr/local/lib/R/include -I/usr/local/lib/R/include
> -I/usr/local/include -I"/usr/local/lib/R/library/FLCore/include"   -fpic
> -g -O2 -c FLBRP.cpp -o FLBRP.o
>
> while deleting it means both include folders are correctly added
>
> g++ -I/usr/local/lib/R/include -I/usr/local/lib/R/include
> -I/usr/local/include -I"/usr/local/lib/R/library/FLCore/include"
> -I"/usr/local/lib/R/library/FLash/include"   -fpic  -g -O2 -c FLBRP.cpp
> -o FLBRP.o
>
> Secondly, this behaviour has been detected when running R CMD check on
> Linux (R.Version below), while in windows the second include is never
> generated even if the space character is deleted.
>
> g++-sjlj   -Ic:/progra~1/r/r-2.6.2/include
> -I"c:/progra~1/r/r-2.6.2/library/FLCore/include"    -O2 -Wall  -c
> FLBRP.cpp -o FLBRP.o
>
> We haven't been able to test yet on the latest R 2.7.0rc.
>
> Thanks,
>
>
> Iago
>
>
> WINDOWS:
>>> R.Version()
> $platform
> [1] "i386-pc-mingw32"
>
> $arch
> [1] "i386"
>
> $os
> [1] "mingw32"
>
> $system
> [1] "i386, mingw32"
>
> $status
> [1] ""
>
> $major
> [1] "2"
>
> $minor
> [1] "6.2"
>
> $year
> [1] "2008"
>
> $month
> [1] "02"
>
> $day
> [1] "08"
>
> $`svn rev`
> [1] "44383"
>
> $language
> [1] "R"
>
> $version.string
> [1] "R version 2.6.2 (2008-02-08)"
>
>
> LINUX:
>> R.Version()
> $platform
> [1] "i686-pc-linux-gnu"
>
> $arch
> [1] "i686"
>
> $os
> [1] "linux-gnu"
>
> $system
> [1] "i686, linux-gnu"
>
> $status
> [1] ""
>
> $major
> [1] "2"
>
> $minor
> [1] "6.2"
>
> $year
> [1] "2008"
>
> $month
> [1] "02"
>
> $day
> [1] "08"
>
> $`svn rev`
> [1] "44383"
>
> $language
> [1] "R"
>
> $version.string
> [1] "R version 2.6.2 (2008-02-08)"
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From maechler at stat.math.ethz.ch  Fri Aug  8 20:15:14 2008
From: maechler at stat.math.ethz.ch (maechler at stat.math.ethz.ch)
Date: Fri,  8 Aug 2008 20:15:14 +0200 (CEST)
Subject: [Rd] incorrect usage of glmer crashes R (PR#12375)
Message-ID: <20080808181514.DD45F282EF48@mail.pubhealth.ku.dk>

This is about package 'lme4' and strictly speaking would not
belong to R-bugs.

But you have reported a bug indeed; thank you.

>>>>> "s" == susscorfa  <susscorfa at zonnet.nl>
>>>>>     on Thu,  7 Aug 2008 12:20:41 +0200 (CEST) writes:

    s> Full_Name: susscorfa Version: 2.7.1 OS: ubuntu Submission
    s> from: (NULL) (129.125.177.31)


    s> Incorrect implementation of the grouping variable in the
    s> function glmer crashes R

{the correct term is "segmentation fault" or "segfault"}

    s> a small example:

    s> require(lme4); 
    s> a<-data.frame(b=rpois(1000,10), c=gl(20,50), d=rnorm(1000,3), e=rnorm(1000,5),
    s> f=rnorm(1000,2)+5);  
    s> glmer(b~d+f|c+(e), family=poisson, data=a)

Yes, indeed this segfaults;  similarly for lmer().

The development version of the 'lme4' package (on R-forge) no
longer does so since a few minutes ago.


    s> It crashes R on debian linux (2 independant systems) as well as windows

    s> The correct function usage is:
    s> glmer(b~d+f+(e|c), family=poisson, data=a)

    s> I suppose it should just eveluate as wrong usage of a
    s> function but should not crash R

Yes, it now gives an error message about the incorrect
specification.

Martin Maechler, ETH Zurich


From hpages at fhcrc.org  Sat Aug  9 04:04:01 2008
From: hpages at fhcrc.org (Herve Pages)
Date: Fri, 08 Aug 2008 19:04:01 -0700
Subject: [Rd] Cannot link mypackage to 2 other packages
In-Reply-To: <alpine.LFD.1.10.0808081903220.17538@gannet.stats.ox.ac.uk>
References: <20080806231422.i59dacelpgkwws8k@webmail.fhcrc.org>
	<alpine.LFD.1.10.0808070729250.18594@gannet.stats.ox.ac.uk>
	<20080806234710.vhxoxds34s0k0g44@webmail.fhcrc.org>
	<alpine.LFD.1.10.0808070809480.29441@gannet.stats.ox.ac.uk>
	<489B29B0.8090509@fhcrc.org>
	<alpine.LFD.1.10.0808081903220.17538@gannet.stats.ox.ac.uk>
Message-ID: <489CFB11.5040909@fhcrc.org>

Prof Brian Ripley wrote:
> Thanks for the examples. The specific problems was a typo, but there was 
> another on Windows (missing quotes).
> 
> This should work in R-patched and R-devel on Linux and Windows now.

Yes this works now. Thanks!

H.

> 
> On Thu, 7 Aug 2008, Herve Pages wrote:
> 
>> Prof Brian Ripley wrote:
>> [...]
>>>
>>> Somewhere on your website would be best.
>>
>> Here they are (stub versions):
>>
>>  http://bioconductor.org/packages/misc/
>>
>> mypackage tries to link to packageA and packageB but this is what I get:
>>
>> hpages at lamb1:~> R-2.8 CMD INSTALL mypackage_0.0.0.tar.gz
>> * Installing to library '/home/hpages/R-2.8/library'
>> * Installing *source* package 'mypackage' ...
>> ** libs
>> gcc -std=gnu99 -I/home/hpages/R-2.8/include  -I/usr/local/include 
>> -I"/home/hpages/R-2.8/library/packageA/include"   -fpic  -g -O2 -Wall 
>> -c R_init_mypackage.c -o R_init_mypackage.o
>> In file included from R_init_mypackage.c:1:
>> mypackage.h:2:30: error: packageB_defines.h: No such file or directory
>> make: *** [R_init_mypackage.o] Error 1
>> ERROR: compilation failed for package 'mypackage'
>> ** Removing '/home/hpages/R-2.8/library/mypackage'
>>
>> hpages at lamb1:~> gcc --version
>> gcc (GCC) 4.1.0 (SUSE Linux)
>> Copyright (C) 2006 Free Software Foundation, Inc.
>> This is free software; see the source for copying conditions.  There 
>> is NO
>> warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR 
>> PURPOSE.
>>
>> hpages at lamb1:~> cat /etc/SuSE-release
>> SUSE LINUX 10.1 (X86-64)
>> VERSION = 10.1
>>
>> I get the same on 64-bit openSUSE 10.3
>>
>> Thanks!
>>
>> H.
>>
>


From ripley at stats.ox.ac.uk  Sat Aug  9 08:04:19 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sat, 9 Aug 2008 07:04:19 +0100 (BST)
Subject: [Rd] config.log told me to report these (PR#12035)
In-Reply-To: <20080807093519.AF989282EFC2@mail.pubhealth.ku.dk>
References: <20080807093519.AF989282EFC2@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808090650590.22364@gannet.stats.ox.ac.uk>

This looks like a thoroughly screwed-up compilation system, not an R 
problem.  E.g.

/usr/include/limits.h(125): error #5: could not open source file 
"limits.h"

configure:5465: icc -E -traditional-cpp -I/opt/intel/cce/10.1.015/include/ 
conftest.c
<command-line>:11: warning: "__GNUC_PATCHLEVEL__" redefined
<built-in>:3: warning: this is the location of the previous definition
In file included from /usr/include/features.h:331,
                  from /usr/include/assert.h:38,
                  from conftest.c:20:
/usr/include/sys/cdefs.h:32: error: #error "You need a ISO C conforming 
compiler to use the glibc headers"

/usr/include/limits.h(125): catastrophic error: could not open source file 
"limits.h"

conftest.c(74): catastrophic error: could not open source file "dl.h"

conftest.c(77): catastrophic error: could not open source file 
"floatingpoint.h"

./conftest: error while loading shared libraries: libimf.so: cannot open 
shared object file: No such file or directory


On Thu, 7 Aug 2008, RichardsTJ2 at UPMC.EDU wrote:

> This is a multi-part message in MIME format.
>
> ------_=_NextPart_001_01C8EAD7.27542985
> Content-Type: text/plain;
> 	charset="iso-8859-1"
> Content-Transfer-Encoding: quoted-printable
>
> Hello r-bugs,
>
> I am running openSuse 11.0, with my new Intel 8500 (Penryn) C2D, and I =
> want to use icc and ifort.
> I was able to get a working Goto BLAS, following Dr. Goto's =
> instructions.
> That seems to work OK with gcc and gfortran.
> I get about 10% faster computations by using -O3 rather than -O2.
> I get faster results with Goto BLAS rather than the R BLAS.
> Now I want to make icc and ifort work...
>
> So I tried this:
>
> ./configure CC=3Dicc CFLAGS=3D'-O3 -mp' =
> CPPFLAGS=3D-I/opt/intel/cce/10.1.015/include/ F77=3Difort CXX=3Dicc =
> CXXFLAGS=3D'-O3 -mp' FFLAGS=3D'-C90 -w90 -w95 -mp' CPICFLAGS=3D-shared =
> CXXPICFLAGS=3D-shared FPICFLAGS=3D-shared SHLIB_LDFLAGS=3D-shared =
> SHLIB_CXXLDFLAGS=3D-shared --with-blas=3D"-L/usr/lib64/GotoBLAS =
> -lgoto_penrynp-r1.26 -lpthread"
>
> I get six purported "bugs" in the config.log file (attached), but I hope =
> there is something I've overlooked in the past week of agony.
> I have had similar log files with about 100 different combinations of =
> options.
> I hope that you can help.
>
> Thank you so much.
>
> Tom Richards
>
>
> ------_=_NextPart_001_01C8EAD7.27542985
> Content-Type: text/x-log;
> 	name="config.log"
> Content-Transfer-Encoding: base64
> Content-Description: config.log
> Content-Disposition: attachment;
> 	filename="config.log"

[needed unpacking]


From ripley at stats.ox.ac.uk  Sat Aug  9 08:22:12 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sat, 9 Aug 2008 07:22:12 +0100 (BST)
Subject: [Rd] Fitted values with small weights in lm.wfit (PR#11979)
In-Reply-To: <20080807092835.E5AAE282EFF1@mail.pubhealth.ku.dk>
References: <20080807092835.E5AAE282EFF1@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808090712570.1874@gannet.stats.ox.ac.uk>

There is nothing to reproduce here.

Small weights per se are not necessarily a problem, but a very large range 
in weights might be, e.g. when computing weighted residuals.  We need a 
repoducible example for this 'bug' 'report' to be of any use (and we asked 
for one in several places, including the R FAQ).

Note that 'predict' does not give residuals, nor does it use lm.wfit ....

E.g.

set.seed(1)
x <- 1:100
y <- rnorm(100)
w <- rep(1e-100, 100)
fit <- lm(y ~ x, weights=w)
> range(predict(fit) - fitted(fit))
[1] -1.804112e-16  7.077672e-16


On Thu, 7 Aug 2008, ablocker at gmail.com wrote:

> Full_Name: Alexander Blocker
> Version: 2.7.1
> OS: Ubuntu 8.04 / Windows XP
> Submission from: (NULL) (76.119.235.225)
>
>
> When running lm(modeleq, weights=wt, data=dataset) with small weights (<1e-10),
> I have encountered an odd phenomenon with fitted values. Due to numerical
> precision issues, the fitted values and residuals returned by lm.wfit (from its
> .Fortran call to dqrls) can differ greatly from those returned by running
> predict on the resulting lm object. This is completely attributable to the
> numerical precision passed to the given function, but I wonder if a warning
> message for weights below as certain threshold may be in order.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Sat Aug  9 08:26:48 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sat, 9 Aug 2008 07:26:48 +0100 (BST)
Subject: [Rd] Rgui.exe(R.dll) crashes on startup when locale is set to
 Korean (PR#11974)
In-Reply-To: <20080807092758.B8074282EFF1@mail.pubhealth.ku.dk>
References: <20080807092758.B8074282EFF1@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808090725520.1874@gannet.stats.ox.ac.uk>

This is a repeat of PR#11903, and equally unreproducible.

We need someone who experiences the bug to find a patch.

On Thu, 7 Aug 2008, juneaftn at gmail.com wrote:

> Full_Name: June Kim
> Version: 2.7.0
> OS: Windows XP SP3
> Submission from: (NULL) (220.117.151.228)
>
>
> R 2.7.0 and up(including 2.7.1) crashes on the startup on Korean Windows XP.
>
> All versions before R 2.7.0 worked without a problem on the same machine.
>
> It seems like related to the locale setting.
>
> see http://www.nabble.com/Rgui.exe(R.dll)-crashes-when-set-the-locale-to-%22Korean%22-(PR-11903)-td18264813.html
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Sat Aug  9 08:30:07 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Sat,  9 Aug 2008 08:30:07 +0200 (CEST)
Subject: [Rd] Rgui.exe(R.dll) crashes on startup when locale is set to
	(PR#12519)
Message-ID: <20080809063007.E305E282EF48@mail.pubhealth.ku.dk>

This is a repeat of PR#11903, and equally unreproducible.

We need someone who experiences the bug to find a patch.

On Thu, 7 Aug 2008, juneaftn at gmail.com wrote:

> Full_Name: June Kim
> Version: 2.7.0
> OS: Windows XP SP3
> Submission from: (NULL) (220.117.151.228)
>
>
> R 2.7.0 and up(including 2.7.1) crashes on the startup on Korean Windows XP.
>
> All versions before R 2.7.0 worked without a problem on the same machine.
>
> It seems like related to the locale setting.
>
> see http://www.nabble.com/Rgui.exe(R.dll)-crashes-when-set-the-locale-to-%22Korean%22-(PR-11903)-td18264813.html
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Sat Aug  9 16:34:45 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sat, 9 Aug 2008 15:34:45 +0100 (BST)
Subject: [Rd] (PR#12318) Bug in format.default(): na.encode does not
 have any effect for
In-Reply-To: <20080807101419.01C8F282EFC1@mail.pubhealth.ku.dk>
References: <20080807101419.01C8F282EFC1@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808091511240.22054@gannet.stats.ox.ac.uk>

Have you read the help page?  It says

   na.encode: logical: should 'NA' strings be encoded?

No mention of encoding NA numerical values that I can see, and it was 
never intended to apply to other than *strings*.

Please do the homework the FAQ asks of you and only use R-bugs if you 
'know for certain' -- in particular, do heed

   'Rather than jumping to conclusions, show the problem to someone who
    knows for certain'

On Thu, 7 Aug 2008, Gregor.Gorjanc at bfro.uni-lj.si wrote:

> Hi!
>
> If I use format() on numeric vector, na.encode argument does not have any e=
> ffect. This
> was reported before:
> - https://stat.ethz.ch/pipermail/r-help/2007-October/143881.html
> - http://tolstoy.newcastle.edu.au/R/e2/devel/06/09/0360.html
>
> It works for other (say character) classes!
>
>> format(c("a", NA), na.encode=3DTRUE)
> [1] "a " "NA"
>
>> format(c("a", NA), na.encode=3DFALSE)
> [1] "a" NA
>
> I explored this a bit and found out that format.default() uses prettyNum(.I=
> nternal(format(...)))
> for formatting the logical, numeric, complex, ... classes. Simple tests (se=
> e bellow) show that
> .Internal(format()) does not obey the na.encode argument.

It works as documented (and coded).

>
> ## Encode NA as "NA"
>> .Internal(format(x=3Dc(1, NA), trim=3DFALSE, digits=3DNULL, nsmall=3D0, w=
> idth=3DNULL, adj=3D1, na.encode=3DTRUE, scientific=3DNA))
> [1] " 1" "NA"
>
> ## Do not encode NA as "NA"
>> .Internal(format(x=3Dc(1, NA), trim=3DFALSE, digits=3DNULL, nsmall=3D0, w=
> idth=3DNULL, adj=3D1, na.encode=3DFALSE, scientific=3DNA))
> [1] " 1" "NA"
> ## --> no effect
>
> ## Does prettyNum encode NA as "NA"
>> prettyNum(c("1", NA))
> [1] "1" NA
> ## --> not for character
>
>> prettyNum(c(1, NA))
> [1] "1" "NA"
> ## --> but it does for numeric
>
> I did all my tests with my Ubuntu box running R
>
>> version
>               _
> platform       i486-pc-linux-gnu
> arch           i486
> os             linux-gnu
> system         i486, linux-gnu
> status
> major          2
> minor          7.1
> year           2008
> month          06
> day            23
> svn rev        45970
> language       R
> version.string R version 2.7.1 (2008-06-23)
>
> --
> Lep pozdrav / With regards,
>    Gregor Gorjanc
> ----------------------------------------------------------------------
> University of Ljubljana     PhD student
> Biotechnical Faculty        www: http://gregor.gorjanc.googlepages.com
> Zootechnical Department     blog: http://ggorjan.blogspot.com
> Groblje 3                   mail: gregor.gorjanc <at> bfro.uni-lj.si
> SI-1230 Domzale             fax: +386 (0)1 72 17 888
> Slovenia, Europe            tel: +386 (0)1 72 17 861
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From Gregor.Gorjanc at bfro.uni-lj.si  Sat Aug  9 17:50:00 2008
From: Gregor.Gorjanc at bfro.uni-lj.si (Gorjanc Gregor)
Date: Sat, 9 Aug 2008 17:50:00 +0200
Subject: [Rd] (PR#12318) Bug in format.default(): na.encode does not
 have any effect for
In-Reply-To: <alpine.LFD.1.10.0808091511240.22054@gannet.stats.ox.ac.uk>
References: <20080807101419.01C8F282EFC1@mail.pubhealth.ku.dk>,
	<alpine.LFD.1.10.0808091511240.22054@gannet.stats.ox.ac.uk>
Message-ID: <F189E18BBAA8B6479F618B9044CF4E9C686C13385C@owa.bfro.uni-lj.si>

Hi to all!

Prof Brian Ripley wrote:
> Have you read the help page?  It says
>
>    na.encode: logical: should 'NA' strings be encoded?
>
> No mention of encoding NA numerical values that I can see, and it was
> never intended to apply to other than *strings*.

I did read the help page, however it seems that I have confused the meaning of
'NA' string and 'NA' value. It might be obvious that the first form is meant
for strings (charcaters) only and the other for numeric like vectors, but not to me.

IMHO it would be better that na.encode argument would also have an
effect for numeric like vectors. Nearly any function in R returns NA values and I
expected the same for format, at least when na.encode=FALSE.

Regards, Gregor


From mel at altk.com  Sat Aug  9 18:34:09 2008
From: mel at altk.com (mel)
Date: Sat, 09 Aug 2008 18:34:09 +0200
Subject: [Rd] matrix name
Message-ID: <489DC701.9090602@altk.com>

Hello,

Presently, we are able to add additionnal info to a matrix
thanks to the nice comment() and attr() functions.
Maybe I miss some other functions ?

Since there is a always a little remaining place on the
top left when one print a matrix,
I was wondering if it won't be interesting to offer the
possibility to show some information here,

I'm thinking on something like :

 > attr(M, 'topleft') = 'city\prms';
 > M
city\prms      a    b    c
seattle        1    3    5
vancouver      2    4    6

I don't know if it's easily feasible and even if it seems
interesting enough ... so sorry if it is a silly idea.

All the best
Vincent


From ggrothendieck at gmail.com  Sat Aug  9 19:42:44 2008
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Sat, 9 Aug 2008 13:42:44 -0400
Subject: [Rd] matrix name
In-Reply-To: <489DC701.9090602@altk.com>
References: <489DC701.9090602@altk.com>
Message-ID: <971536df0808091042k6e5c9aa5h3dafe5cc72a6e762@mail.gmail.com>

Try this:

> matrix(1:9, 3, dim = list(x = letters[1:3], y = LETTERS[1:3]))
   y
x   A B C
  a 1 4 7
  b 2 5 8
  c 3 6 9


On Sat, Aug 9, 2008 at 12:34 PM, mel <mel at altk.com> wrote:
> Hello,
>
> Presently, we are able to add additionnal info to a matrix
> thanks to the nice comment() and attr() functions.
> Maybe I miss some other functions ?
>
> Since there is a always a little remaining place on the
> top left when one print a matrix,
> I was wondering if it won't be interesting to offer the
> possibility to show some information here,
>
> I'm thinking on something like :
>
>> attr(M, 'topleft') = 'city\prms';
>> M
> city\prms      a    b    c
> seattle        1    3    5
> vancouver      2    4    6
>
> I don't know if it's easily feasible and even if it seems
> interesting enough ... so sorry if it is a silly idea.
>
> All the best
> Vincent
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From maechler at stat.math.ethz.ch  Sat Aug  9 19:57:27 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Sat, 9 Aug 2008 19:57:27 +0200
Subject: [Rd] matrix name
In-Reply-To: <489DC701.9090602@altk.com>
References: <489DC701.9090602@altk.com>
Message-ID: <18589.55943.265674.509774@cmath-5.math.ethz.ch>

>>>>> Vincent Nijs <mel at altk.com>
>>>>>     on Sat, 09 Aug 2008 18:34:09 +0200 writes:

    >>> Hello,
    >>> Presently, we are able to add additionnal info to a matrix
    >>> thanks to the nice comment() and attr() functions.
    >>> Maybe I miss some other functions ?

    >>> Since there is a always a little remaining place on the
    >>> top left when one print a matrix,
    >>> I was wondering if it won't be interesting to offer the
    >>> possibility to show some information here,

    >>> I'm thinking on something like :

    >> attr(M, 'topleft') = 'city\prms';
    >> M
    >>> city\prms      a    b    c
    >>> seattle        1    3    5
    >>> vancouver      2    4    6

Well,  dimnames  can be named :

  > matrix(1:6, 2,3, dimnames=list(rows=c("r1","r2"), cols=c("A","B","C")))
      cols
  rows A B C
    r1 1 3 5
    r2 2 4 6

This implements (something better I think than)  what you want.
The *printing* though is slightly different (since more
flexible).

Martin 

    >>> I don't know if it's easily feasible and even if it seems
    >>> interesting enough ... so sorry if it is a silly idea.

    >>> All the best
    >>> Vincent


From ian.shrier at mcgill.ca  Sat Aug  9 17:25:09 2008
From: ian.shrier at mcgill.ca (ian.shrier at mcgill.ca)
Date: Sat,  9 Aug 2008 17:25:09 +0200 (CEST)
Subject: [Rd] xy plot in version 2.7.1 for Mac (PR#12520)
Message-ID: <20080809152509.7EE50282EF48@mail.pubhealth.ku.dk>


--Apple-Mail-30--530209534
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: 7bit

I recently reformatted my hard disk on my MacBook Pro using a clean  
install of Leopard (had Leopard before too but not from a clean  
install). I had to reinstall R, and therefore installed the new  
version 2.7.1 for Mac. In preparing some graphs, I noticed something  
very strange for the x-y line plot. I couldn't find anything in the  
help but I am new to R and maybe someone has reported this.

Basically, the graphing program refuses to connect the points 99 and  
100, 199 and 200, etc. if you plot from 0.

I have attached some PDFs showing the problem. Here is the simple code.

 > x<-c(0:350)
 > y<-c(0:350)
 > plot(x,y, type="l")

--Apple-Mail-30--530209534
Content-Disposition: inline;
	filename="x-y line plot 0-350.pdf"
Content-Type: application/pdf;
	x-unix-mode=0644;
	name="x-y line plot 0-350.pdf"
Content-Transfer-Encoding: base64

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
REV59YkNP5dIR5KtirCpCUVKPgW5NvwJr2VSrQRcPR6jTs1Y06Y6FmPyUn9oHX3eKoT5jpM47Q9w
McVVzqbDz4fBfP+Tntmf6xMRio9y/9+f9dJesBijvFqSibJkX6Gl998GawTNC09v3wsfChxqqbn4
qwNLdXj5BvF66k+6qvj42J8+quR1oflOyZvs2RJw/qol+TZUi5N3St5kn1zn6edfo+r45HX+eq/k
ZSb7yHXC96+N3jslb7JPLPnyl9uXovH0TsmL7MPR+QwTQvwm+9SSl8/YQe368Bn7i076p+/1DPXU
n/wtV2+Tt0+imcWQ7dP3Pz2++Reswcnf/+XxD+s/Pr7/6+Ofv6+c+MJK+1OVacG1577ZfaIS5T2r
HL9fZ1ZsW/j0U53ahmedKtrvNjQf43zj88HxE0OV4helf8BS4ywgq4ufKkV1z0rte363pbuCns94
n+rUg73o/AOG+iYv4MrBp0o1GM9KDcu/21CfStXOz2KvcLwo/ZCl+QqClDJoZEjRcEXw9Hcs/UWI
f/66yvhO349PX+Wi+frrZ1mn1+uvgq9QWTWMZfy7rzvPr1Nbn3u+8npI7Pn0l/3x6+nPApXsA8a/
W0DN018Ev8XD8/TXGffl9FfBV05/u/v7Trlc9yr4yutvd38JM7qbxr8IfuvueGh9hNXyb/6vNHoO
KDL4GKiK14TmGYgfxPav6KtJzsQ3iVKn/azxQ8j+VRPzndQ8uz+rfCPfD7Pa52bm+4tlaHvW+ca+
tiYfS+vPdWbte+Zr/7z6G/t+mNN+RaeNjA96x7PON/L1wfAP22mMPW2gnnW+ce+HKe1zOzXIh1Fu
e9b5xr0W+R+wc+bVu27gMJjayL81CDrUKZoMMD/izNfqv+8Fr3pmPv1Wu/pHmwPfSNUyVTcLYCu8
l+bgrUb8zweu/neQ13KbS+rziynh2Z1vBeJ/3zT++f8Amhz1CwplbmRzdHJlYW0KZW5kb2JqCjUg
MCBvYmoKNDI5MQplbmRvYmoKMiAwIG9iago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDMgMCBSIC9S
ZXNvdXJjZXMgNiAwIFIgL0NvbnRlbnRzIDQgMCBSIC9NZWRpYUJveCBbMCAwIDY2My45MzcgNDE5
LjkwNTVdCj4+CmVuZG9iago2IDAgb2JqCjw8IC9Qcm9jU2V0IFsgL1BERiAvVGV4dCBdIC9Db2xv
clNwYWNlIDw8IC9DczEgNyAwIFIgPj4gL0V4dEdTdGF0ZSA8PCAvR3MxCjI2IDAgUiA+PiAvRm9u
dCA8PCAvRjE3LjAgMjQgMCBSIC9GMTguMCAyNSAwIFIgL0Y3LjAgMTQgMCBSIC9GMTAuMCAxNyAw
IFIKL0YzLjAgMTAgMCBSIC9GMTEuMCAxOCAwIFIgL0YxMy4wIDIwIDAgUiAvRjE2LjAgMjMgMCBS
IC9GOS4wIDE2IDAgUiAvRjIuMAo5IDAgUiAvRjE0LjAgMjEgMCBSIC9GNi4wIDEzIDAgUiAvRjE1
LjAgMjIgMCBSIC9GNC4wIDExIDAgUiAvRjEyLjAgMTkgMCBSCi9GMS4wIDggMCBSIC9GNS4wIDEy
IDAgUiAvRjguMCAxNSAwIFIgPj4gPj4KZW5kb2JqCjI2IDAgb2JqCjw8IC9UeXBlIC9FeHRHU3Rh
dGUgL2NhIDAgPj4KZW5kb2JqCjI3IDAgb2JqCjw8IC9MZW5ndGggMjggMCBSIC9OIDMgL0FsdGVy
bmF0ZSAvRGV2aWNlUkdCIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYWUTUgUYRjH
/7ONBLEG0ZcIxdDBJFQmC1IC0/UrU7Zl1UwJYp19d50cZ6eZ3S1FIoTomHWMLlZEh4hO4aFDpzpE
BJl1iaCjRRAFXiK2/zuTu2NUvjAzv3me//t8vcMAVY9SjmNFNGDKzrvJ3ph2enRM2/waVahGFFwp
w3M6EokBn6mVz/Vr9S0UaVlqlLHW+zZ8q3aZEFA0KndkAz4seTzg45Iv5J08NWckGxOpNNkhN7hD
yU7yLfLWbIjHQ5wWngFUtVOTMxyXcSI7yC1FIytjPiDrdtq0ye+lPe0ZU9Sw38g3OQvauPL9QNse
YNOLim3MAx7cA3bXVWz1NcDOEWDxUMX2PenPR9n1ysscavbDKdEYa/pQKn2vAzbfAH5eL5V+3C6V
ft5hDtbx1DIKbtHXsjDlJRDUG+xm/OQa/YuDnnxVC7DAOY5sAfqvADc/AvsfAtsfA4lqYKgVkcts
N7jy4iLnAnTmnGnXzE7ktWZdP6J18GiF1mcbTQ1ayrI03+VprvCEWxTpJkxZBc7ZX9t4jwp7eJBP
9he5JLzu36zMpVNdnCWa2NantOjqJjeQ72fMnj5yPa/3GbdnOGDlgJnvGwo4csq24jwXqYnU2OPx
k2TGV1QnH5PzkDznFQdlTN9+LnUiQa6lPTmZ65eaXdzbPjMxxDOSrFgzE53x3/zGLSRl3n3U3HUs
/5tnbZFnGIUFARM27zY0JNGLGBrhwEUOGXpMKkxapV/QasLD5F+VFhLlXRYVvVjhnhV/z3kUuFvG
P4VYHHMN5Qia/k7/oi/rC/pd/fN8baG+4plzz5rGq2tfGVdmltXIuEGNMr6sKYhvsNoOei1kaZ3i
FfTklfWN4eoy9nxt2aPJHOJqfDXUpQhlasQ448muZfdFssU34edby/av6VH7fPZJTSXXsrp4Zin6
fDZcDWv/s6tg0rKr8OSNkC48a6HuVQ+qfWqL2gpNPaa2q21qF9+OqgPlHcOclYkLrNtl9Sn2YGOa
3spJV2aL4N/CL4b/pV5hC9c0NPkPTbi5jGkJ3xHcNnCHlP/DX7MDDd4KZW5kc3RyZWFtCmVuZG9i
agoyOCAwIG9iago3OTIKZW5kb2JqCjcgMCBvYmoKWyAvSUNDQmFzZWQgMjcgMCBSIF0KZW5kb2Jq
CjMgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9NZWRpYUJveCBbMCAwIDY2My45MzcgNDE5LjkwNTVd
IC9Db3VudCAxIC9LaWRzIFsgMiAwIFIgXQo+PgplbmRvYmoKMjkgMCBvYmoKPDwgL1R5cGUgL0Nh
dGFsb2cgL1BhZ2VzIDMgMCBSIC9WZXJzaW9uIC8xLjQgPj4KZW5kb2JqCjMwIDAgb2JqCjw8IC9M
ZW5ndGggMzEgMCBSIC9MZW5ndGgxIDY5ODggL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFt
CngBhVgNfFTFtT8zc/fuR3azmwD5Jns3S1bJJgSCGBLSZPOxARoxAYJmKZGEEAkoEg0gtohLFdFF
AXmWCm1Fa1tpferNh7ggfaSCtEURay22qIAUq/ZXCvZXtVbJff+5G6jp89d3Z//nnDlz5uvMmdk7
lxgROSlKgkIdy9u7yUbboHkFyOhYvVLb3v36ashnidSJN3YvWd7yxEfVRNbRRJbfLLn5jhu3Pv7s
fjTwARHf2tXZvvjjl8Y+RORegzpXd0GRutx5D/I68uO6lq9c4yDmRv4N5G03r+hoZzPoauTfRl5d
3r6mW4k6v4M8+iPtlvblnWfGLFhE5FFkvntFz0rjXtqO/DjkA923dXbPGTr0IfLXEDkM6BiSfJyk
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
fwplbmRzdHJlYW0KZW5kb2JqCjMxIDAgb2JqCjQ4NDUKZW5kb2JqCjMyIDAgb2JqCjw8IC9UeXBl
IC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEy
IC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvVkJV
T0ZTK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRo
IDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgMzAgMCBSID4+CmVuZG9iagozMyAwIG9iagpb
IDUwMCBdCmVuZG9iagoyNCAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUg
L0Jhc2VGb250IC9WQlVPRlMrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKMzIgMCBSIC9XaWR0aHMg
MzMgMCBSIC9GaXJzdENoYXIgMTIwIC9MYXN0Q2hhciAxMjAgL0VuY29kaW5nIC9NYWNSb21hbkVu
Y29kaW5nCj4+CmVuZG9iagozNCAwIG9iago8PCAvTGVuZ3RoIDM1IDAgUiAvTGVuZ3RoMSA3MDQw
IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVYDXxT1dl/zrk3H03TJk2/0iY0N00b
oGkplI9+rk3bpOAqUqCwhIG0lEqLIMUCikMIm4hGFOccE3Ti5jZxTrn9oAsfe6nC3IYizjm2uQmI
7AX3WwX3mzqn9L7/exM62fztzcnz/Zyv5zzn3HsuMSIyU4QE8nesbu8hI30LmlcB9o4N66RdPW9s
AH+BSD/5lp4Vq0NPf1BPZMgg0v16xaqNt7w4NPNuNHCJiB/v6mxf/uHvHeeJLD9BnRldUNhWm++B
jPpU0LV63Z0mYm4iqxGycdWajna2jGZAtkLWr26/s0eMmL8N2Q5Zuq19deevs77cCblClXvW9K5T
ttMuyCHI3p7bO3vmjR5/D3KEyKRAx1DUn5n0AKKNqkZ3iHIAubpnKEf0EtpWLgIwZuXiaLdySbWr
lP8FNWIJINpHz7Nuep6O0kvsCmrtp4M0SL+kbArQE7SJHqXt6GURNPfTPBQd9I+yHGWQSul7iOf3
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
b2JqCjQ5MDQKZW5kb2JqCjM2IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50
IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02
NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvREVEUEZTK0FyaWFsTVQgL0l0YWxpY0FuZ2xl
IDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250
RmlsZTIgMzQgMCBSID4+CmVuZG9iagozNyAwIG9iagpbIDUwMCBdCmVuZG9iagoyNSAwIG9iago8
PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9ERURQRlMrQXJpYWxN
VCAvRm9udERlc2NyaXB0b3IKMzYgMCBSIC9XaWR0aHMgMzcgMCBSIC9GaXJzdENoYXIgMTIxIC9M
YXN0Q2hhciAxMjEgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iagozOCAwIG9i
ago8PCAvTGVuZ3RoIDM5IDAgUiAvTGVuZ3RoMSA3MzcyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+
CnN0cmVhbQp4AYVYCXhU1fU/9743S5KZZBKyTJIh84YhgzAJgQCGJSaTZQIakC3BDA0mIYmETYJh
tQiDCuiAQPkrFariWrFWfZlEHEBLFKsVRaxQ2mILqFSxXyPYz6VWyfv/7pshivVr352zn7ude+6d
9y4xIrJQkCTyNS9uaicrTYPmLUBO84plys72d1eA/weRccRN7fMW1z32WRmRyUFk+P28Ratv6jx9
4kE0cJFIlttam1q+tOQUEdk+R52r26BIWWzZQJScB3lw2+JlqxI/Yk9DFn1YFi1pbmKpfCzkesjm
xU2r2uX1lvsgt0BWbm5a3PphwtSVkO8UcvuSjmVaKf0a8uOQr2q/pbV9Rt+rn0DGeOM16BiKeCxk
pBTQESTHNBwjPkCZgCzDk5Qpe8hOpH0MOC9o33ztvLALyv+OmpEYEO2lZ9h8eoYO0SvsImo9R/up
m35HGVRJD9Aaupc2obfZ0NxNM1AM0N/LMrVuKqBHENdH6Ch8b6C1dIDSmV37hNbRBuk4am1AtAdR
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
r4z+OvBAtWy5WIoo9grdjz5w8ePaqrJjGVG1OmxmtVqK24tOkwnaxsoAdOMv6xIS/Ph4iSqHQzle
OEpSv6PQFQtdXFzM8T9zQR8T1IjOfrxoHOxivhy2jDoCkppTXcNxFNTMRhhw53EAr0viT6IjgAl2
4Iq743JrYh5eikqEKXdchmXLY1wsDstiVHcVVTouh+NyU14RJfp/cyrEIwplbmRzdHJlYW0KZW5k
b2JqCjM5IDAgb2JqCjUxMDgKZW5kb2JqCjQwIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRv
ciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9u
dEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvRFVWRUtVK0FyaWFsTVQgL0l0
YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQg
NTI1IC9Gb250RmlsZTIgMzggMCBSID4+CmVuZG9iago0MSAwIG9iagpbIDU1NiAwIDAgNTU2IF0K
ZW5kb2JqCjE0IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZv
bnQgL0RVVkVLVStBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo0MCAwIFIgL1dpZHRocyA0MSAwIFIg
L0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNTEgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+
CmVuZG9iago0MiAwIG9iago8PCAvTGVuZ3RoIDQzIDAgUiAvTGVuZ3RoMSA3MzQ0IC9GaWx0ZXIg
L0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVYC3hUxfU/M/fuI8kmu3lvkiV7N0tWySYEApgAMdk8
NqARAyHRLA0mIaSElwTDQyzC0org8pS/UqGt+GgVatWbTcTlYUmFakURK5ZWbAUtrdqvEeyHWqvk
/n9zN0Rp/do7ex5z5szMmXPOzN47xIjIQkGSyNe+uK2LrNQAyWuAnPYVy5SdXW+uAH+RyDjmu13z
Fjc9/kkFkUkhMvx23qJV3001xrZggEtE0vnOjra5n1myS4hsf0Cf6zohSFpsWU+UaEN9ZOfiZXcm
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
Vtvd1UrPZL3fvzU3i+bJ7uoeavY3NPU0+zqqw5N9k/3utupA75Tp44uvmuu+4bnGT/+WuaaLwcaL
uabo/f5trmLRPEXMVSzmKhZzTfFN0eciPcenN/WYqTKAT3Gd9vK4WORra5YrUJlm6yrTk3eyy74m
6yBeSPZSHK4fLLiwigeIvC6oKKgQTdhToilB3GUNNdnXTHZlHWR7h5psECe6K8m7bHn3crL751dH
f914IFq2XIQiir1C9q0PVPy4lqruXkZUq+bNrFXLcTvRYzJB2lodgGzSFVlcnB/fUlHhaAgnCUVJ
GlYUslIhi4kZUvzPXNBtghjeOYAXjUO9zJfNllF3QFKzaxs4joKGWXAD7jQO4nVJ/El0B7DAblxh
d18ZTazDS9EaYcndV2DZ8iFuyA/LhqiuKrp0X3HHlaG8wkv0/9t+vyMKZW5kc3RyZWFtCmVuZG9i
ago0MyAwIG9iago1MDkxCmVuZG9iago0NCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3Ig
L0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRC
Qm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1RPV1JPUitBcmlhbE1UIC9JdGFs
aWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUy
NSAvRm9udEZpbGUyIDQyIDAgUiA+PgplbmRvYmoKNDUgMCBvYmoKWyA1NTYgMCAwIDAgMCA1NTYg
XQplbmRvYmoKMTcgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNl
Rm9udCAvVE9XUk9SK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjQ0IDAgUiAvV2lkdGhzIDQ1IDAg
UiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcK
Pj4KZW5kb2JqCjQ2IDAgb2JqCjw8IC9MZW5ndGggNDcgMCBSIC9MZW5ndGgxIDcxMTIgL0ZpbHRl
ciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgLeBTV9T/3zszuJtlkNwHy2iU7y5JVsomB8AiE
mGweG9DIO+guDWZDSAkvCYaHWISlFtFFhfq3KLQVrW3F+ppsIm5QSxS1FUWsWGyxFaS0aL8i2K9q
LZr5/+7sEk3r187d3znnnnPu69wzd2eGGBFZKUIS+dtWtnZSGl0DzetAftu6NequzrfWQf6AyDT2
251LVgYf/riGyJxLpPxmyYoN337edzGCDv5GJMkd7a2LP7UWTCayXUCbSR1QZK20biWyX4766I6V
a27K+AufgLoYw7piVVsrG87iqAdRt6xsvalT3mL9Aeph1NUbWle2H7c0X4d6RNQ7V3Wt0avpF6g/
iPrlnTe2d84deOlD1H9NlKpDx1DEZSUTZYCPJQ4Nx2wPUB6QrzxCebKXMH/9LIB16WcHluofCLvg
/K9ohRkZINpHT7Cl9AQdpBfZBbR6ivqol35NOVRPP6KNdC9tw0gLoLmD5qIo0N/L8vReKqWHENOH
6Ah8r6NNdICyWa7+IW2mrdIxtNpK6TSKamg2raK72DX6Wmqmk/KtVI7430CdLKIH9bv1e/Sf0s+o
T/q1/iV2Jp/aUI7oHym/0/9AJWjxA9pNJ9k9KU+TH6NE4PljupH2SAtlpi/R/4UZuGk95iDTDDrC
+rkPvbfTWZbLNkp16OVhXdNfgpeTFlIH7aEDbCKbxt1Ksz5DP0LZGOMm9LqbYrQfJU7P0wlmVS7o
P9UvUB4V01VYTy+9wfqlgS+3DFQjbgqiNIamwLKKfkm/ojeZh73AVylWpUzxKzfrb9NwGkfzMdtH
0PIv7DO+CWWz9IrcoNdiz7bS90W06WV6n+WzUjaLXcvH8FX8AelGsmDEcSiLaSnifT96f4/52H5u
5Uelh+XH5IumkQOn9AzsiJd+SD+mF1g6VqqyLvZddpz9idfxFv5Dflq6V35UfsvcilVfTyvpLnqM
PmNZbDKbw77FOthGto19n+1mR9ib7ANew5v4cn5e6pBWS8/LtSjz5C75VuU2Zbvpg4HgwEsDvxn4
TC/Tb6M5yIctmP0P6AGsrI+O0u9RTtJpprA0loGiMjebz76DsondxX7C9rFHWS9GeZOdZh+yv7NP
2EWOZOUm7uBuPgrFw2/k6/m9/Ef8KMqb/G/8cylHGiX5pIlSpRSSVmFW26SdKE9L78v58lFZR5zL
lF3KXmWf8pjyonLBZDV/10KW1794+MuiL98boIHbB3YNxAZ69fdpBPYwH1FwUSVm34qyDPu9Cxn3
FB1jVsQunxWxKnYNItPClrHV7CZE8ntsD/uZMfcn2XOI0jvsPOaczp3GnK/gE3ktn4VyPW/nq/lO
fg/v5cf5vySzlCbZpBFSkTRNWii1S2ukDdIuSZNel/4onZY+lb5A0eVU2SWPkr2yT54mt8hr5Qfk
s/JZpVl5TfmzKdW00nSbKW762DzJXGWebZ5jXmjeYd5vftsSRnYeoqfpGWTg4MVOSVukgPQ03c3H
y3n8Df4G8rmFFkszODKV72O381tYLx+t3GSayqeymXRB9iLWr/C9/FM+VZrBGtk8WsbHJTo0DZdx
8lClfIjOyc9hbW+g55tMVraJnzdZKYZjZgoOoJelsbJPeo1OSCeZWX6I3pVTWQ47xx+RZiMLnper
lCC5pR/Rk9Jqdgs9zQM4uS5a7kQez2S/wLnQxMrYPyWdJD4TWVQu/YlupeX8d3QO9/HtdB9bLC+h
u2k820hn6ee4K8YoN5iKTCPYq3ypHOXDWC9x+VGsbgobzSRlOH2PLZT2mM7z39NaOiqn0nvS45j9
Uf6kNEO+oMxlHbgDbqHbaLW+hTYoQfkttoQkdi0Vyqdwum2UymQ3+GacKs040/bj7j6Ac6BGmgFN
LjLnGuTFfJwQe1DuxzkhI4OW4h6/DqfYG9RrauJxWqJkMJw6RPJrA3Npgf5z2q0voRv0e6gE58E2
fSN63Ed/ph20j20d+A51UgHunPfYNUoDP6o06CU8yn/P5/FdQ/cX0S5kufRXlCepgaqUZykqv0Pz
qFq/U/8tsvtynLC7aRFdTWewyo8wwnSpn8YPzOTdeoPUifWepDn6I7qLpVKHvoJm0XP0M7NCrWaf
v25+U42/uurKyqkVUyaXT5wwvmzc2NIrSop9RWMuv8xbONozyq26CkY6Hfl5uTnZI4YPy8q02zLS
rWmpKRazSZElzqg44GkIq5o3rMlez/TpJaLuaYWi9WuKsKZC1TDUR1NFu1aYhnj64fntf/P0Jzz9
g57MrlZSZUmxGvCo2pF6jxpnC+YEId9V7wmp2jlDnmHIOw05HbLbjQZqILejXtVYWA1oDes6ooFw
fUkx605LrfPUtaeWFFN3ahrENEhajqezm+VUMUPgOYGKbk6WdCxRy/fUB7Q8D5qiG6kw0LpYmz0n
GKh3uN2hkmKN1bV5FmnkqdVsPsOF6oxhNFOdZjaGUZdqWA1tV7uL+6N3xu20KOyzLvYsbm0OalIr
+ghomT6MW6/l3Hwm96sqOs+qC277utUhRQO5S1XhHI1uU7UH5wS/1tbhFj2EQugDbXlhQzjagKHv
xE41zlMxGt8aCmpsK4ZUxUrEqhLra/cEhCa8TNVSPLWejuiyMLYmP6rR3A3uWH6+v08/RfkBNdoU
9Li1aocn1Frv7B5O0bkbevL8at5QS0lxtz0zEdjuDFtSsKZ/XWhH0BM2QzLchdQ4dzCyTMzIc5Xm
R0a1qZhJ0IM1TRakfTJF2yZjA3CFGFppi7EjS7WUunDUXiH0WCLTlEK7R41+QsgAz7m/DdW0JjWm
QvsnJIwiTwZTTWOtl2TN59OKikSKmOuwp5hjlVGfWFK8Ls49nk67Cobw0WzEtjVUUYrwu91ig7fH
/bQIFS0yJ5ioq7TIESN/qS+k8bCw9F+yjJgvLJFLlsHmYQ8yudd4DByhWbyDP5s9e1igo0Jj2f/F
3J6wN87zNM5ZEFQD0XAyaxubhtQSdhFQxA22pKQNqwtKDg6dkLhDMqxIyuYFgy6oBK2aXIifyUjq
xXGzBVlpaJjaoNnD0xM0lOp2J++Z/9Uorl8QrQz2VbPkMrQKX3KiiWlrU4fUh0zPGpUam3Dk8Mam
BdFo6hAbUi0xy6uSDBlPTUG3WqfRfNyZhfjF9f7JAiGH5kfIYGnCXWSoQ45kdYijI9kohEtkZ0lx
A87MaLTBozZEw9HWuB5Z5FHtnmgff5G/GO0M4LRLJE5cP7DdoTXcGULEOlgFbg9OteI2rmsKJldu
bIvIbmyT+BPHkSweUBW8rJCZans5O2Myx/lu/zBS5DMSpZrlM4zyLCblDJeewx9/Ch4Dr6Bcn/3T
yi8rZ9r/UTnjy0qqhmz/AmTcWHemO7MQhOFv7wtV6v/Cr9BFUuV+jEXz9bNyptJPdhrJ5ndzMS9/
an6BrAwvSE/PSYnrH/TabHy+EPx56emQMskqNJRttYJahY5KfT7fEZAjVH2u+ty4sY5u03/29A/0
ZBI9/aU3Pd0QPvLnpaVByiS70JDdahVU6Aa7/KrPXpOaZ3cifWJcTfsljq5sIAuw6af8i2TTNn57
2u22VzOUFHNaLg8Mu2bE1Xl1jqZhzSOa8+Y6lpuXp7UNWzFieV7YsYGvN61Lu9m2zXS/eZf91dwT
/LjpeNq7tvzBhXel+N2eCWNTGKXYU3jKTldmFyFl/BnQqniN4bSz4FfbRcwX+s6BrPadSy6dLVyN
15TJ4mJAKDTMnjVpfFl2dtYIOzd5Rl3mHWbPHl82KdPu9Ywym+YvP/bgutia2mXHHnp7w/f7Ht24
8dFHN228eiE/xmR25eMtPQP6iYGBgUNP3P8M+/HAfecv4Nl/2UdLbyMcHiexgRexd6n0lF+V/OmZ
E5bLm/kOvtsiPy6zFDIpXEpRmJWzw6nG7FPFmoipaBvXT/Xa7di6uP5Xf6axoU5jQzOMDUWU/Xli
uy7tibE/+VbFn26boFyKxFiFqXhf4kpe2gFWybYiCWfazyAYiAsyQlyoJPKxOmcKy5wybixbSAt9
bk+myWSeOGlS+Xh+sbfmWNN9p0vXyN+p2uh6ctrhFrE2ZL/1yDu3PlnRYqv8xOKwQEH00qG2tkGO
zMVd0o96iuEvDGhnrhqYSXV2+tdTA+PtFYMWYRWXZIJK7qL5AOJHk/Bu/13DS0JjjjdXBdSOp8hr
8SSYjvd1CXXRc1ayL+Odvanuqtrp03w1Ny5tXTGjyfCAk34Z3ku+6ZKgHEbDu5tsNaOkHDoP6IBE
LtBSYBbQAuwA9gImsiU1q8A3AweBC4CJ/FJO7J7x/jjYdoP1LFtRZlRbE9XmhUa157pQgs+Yk+D1
VyXcKhJu4yYk1FfUJvhlxQmeVVgWQec9qell/TXZUja9CXDqBGX8JbIxhifqB6URpAEcAU1o/FJW
z2hv2d6DkkxM4gjnYnLp/RKLpWeW1aRynZ9HDF38I34uYeHnejIyy/bWXM1P01PAQUDip1He5+/T
Zn4KAbeDVgN7gYPAUeA8YOKnUE6ivMffIxv/I5UC1UALsBc4CJwHzPyPoHb+B7F9BhVyNcD5H0Dt
/F0s611QGz8B6QQ/offzY7HyKWV9huArTQquwqSQ40gKWdllcf5W7PMxrjj/U4/qcz1YM5a/TRqA
nAG1AyowGwgDnYAJ0nFIxykC7AQeBDTAhDbH0eY42hwGXgeO01jAD8wGLPzNGIaJ86Mxb62rJhuv
i7/CpxsXP8LF5x4Xf52/YvDX+MsGfxW8APrD/JVYgYtq0mAntLGD28FLYVf4Cz2js1x6TSY/iCC5
QEuBamAW0ALsAEz8IB8VW+zKQifP0mHckS4eow8N/nP6iYX8y1x+bx1yTBXEW3ElJJC96l4v93t3
7UZVEO/d90ASxPu9OyEJ4r15CyRBvCvWQRLEu3gZJEG8C1ogCeKd1QQJJM4feGb0Za7yWcuZWmPj
6xGl9YjSekRpPcn4GoFCn8tijj+MFRUhYnv8vjFFrsgBFnmOReayyE9YpJ1FNrHIFhapZJHrWcTH
Ik4WKWARP4s8yyYjFBHm7x1SneLPZZHDLPIEi3SxiJdFCllkNIuorNwf5+7YVbixwAIG66kR9xV3
91xZVWbDHN2IqBtp7cZtfxD0KKAbNT+c1FEJ57wCwUf1FFUn6ldUlK2qmc4PoeEhbMMhOgnI2KBD
SKND6OQQurOBVgMtQD9wHtABE7xHYR07DGoDLQWqgRZgM3AeMBnTOY+pcFoFKqb4lDGxUtBqYJao
8UMo4nOPm7v9I+1Ou88+XdrhZLYCNqtAL+DllJ2NYy4r05IZZ+n7P0v/52fplFKTwu/mO2gkNmJn
ku+IfT7SFWf3x7zPumpGsPuoQEbWsSnkZYXgk6nLqE8kp0XoJ5CTPwZeFnNei2a2mLfYdYBliFb7
XZ87z7g+dMY5xA+cz7reUeMyi7l+C81j+11vO+9wvVoat0DznDfOwA6ohmufc7LricOG6xYY9sRc
mwTb77rFOc213GkY2hOG67tQ89tcc70LXNPRX71zkcvfhT73u6qd17sqE14TRZv9rrGYgi8hFmGy
Y5zGoJ4Co8P55XHW4S827zIHzbPwbajMXGx2m13mkWaHebgly2K3ZFisllSLxWKyyBaOr2HD8Sft
94n/nuEmu2AmJDT+vQzZjhOGGX884lxjFo4PCNowqZE3zqtljVp/GzUuUrVP53niLHXOAk3x1DIt
q5Eam2q1yb7GuFmfq5X7GjXz7G8Fuxm7OwStxm+PMzwLx5kuVFsd4k21jxjL3HqXQ/DLt94VClFu
9rrq3OqsqswpDfXfQMKGMlyf+P83aO4QeaS2q3FeUPvFyJBWJgR9ZKhR+z/xKtuHz4sXAvV97GPB
QsE+qYr9PTBX6KWq+lCoMc6uNfxIZR/DDxkDBj9LAanCj1RLQcJvT8KvEO3hN1ow+KWkUKHhV5iS
YvjJTPh1d40O1HePBoFPjkpdhk9Xjvp1n8OF8CkEgU92hA4bPoezI8JHqzK6cTrhUgACF4ZvloaL
k+UbLsbMuw2X0qTLHYMudxgjSYnZGD6CoJv0U5d80k/B52uB/O9ie63Px3qmhtqaA/gMEPYE2oGw
tn1dR64WWaSq3W0hYcDbuDe8qK1D8NZ2LeRpr9faPPVq91Sj3b+Zm4V5qqe+m5oDTcHuZn97fWyq
f2rA01of6pk2e0L5kLHuGBxrwuxvGGu26GyCGGua0e7fxioX5mlirHIxVrkYa5p/mjEWGTk+O9ht
odoQXlUN3sPTUpGvYYc7VJtt76wykneqO3eT4wAeSPZRGl7Prfigkw6IvC6pKakRJtxTwpQhvvUk
TbmbprodB9i+pMkOdaanlnxr1natpdzA0vrErwsXVGvWiq1IUJ/QfeMFlwA+29R3rSFq1IrmNWrV
eHvvNpuhDdeHoKu4pEtLC+AJO6G8AsoK4ShJg45CVyl0KSlJx//MBWNOUCM6fXjQeLaH+QvYGuoK
SVpBYxPHUdC0AGHAO/8BPC6JP4muEBbYhU+8XZd6E+vwUaJGWHLXJaxZm5SScViT5IaraNJ1KRyX
uvKJKNH/A1bgc1sKZW5kc3RyZWFtCmVuZG9iago0NyAwIG9iago0ODg4CmVuZG9iago0OCAwIG9i
ago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rl
c2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9u
dE5hbWUgL1RDSUJIRytBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMz
IC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDQ2IDAgUiA+PgplbmRvYmoK
NDkgMCBvYmoKWyA1NTYgNTU2IF0KZW5kb2JqCjEwIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0
eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL1RDSUJIRytBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo0
OCAwIFIgL1dpZHRocyA0OSAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNDkgL0VuY29kaW5n
IC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago1MCAwIG9iago8PCAvTGVuZ3RoIDUxIDAgUiAv
TGVuZ3RoMSA3MTEyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVYC3gU1fU/987M
7ibZZDcB8tolO8uSVbKJgfAIhJhsHhvQyDvoLg1mQ0gJLwmGh1iEpRbRRYX6tyi0Fa1txfqabCJu
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
YqxyMVa5GGuaf5oxFhk5PjvYbaHaEF5VDd7D01KRr2GHO1Sbbe+sMpJ3qjt3k+MAHkj2URpez634
oJMOiLwuqSmpESbcU8KUIb71JE25m6a6HQfYvqTJDnWmp5Z8a9Z2raXcwNL6xK8LF1Rr1oqtSFCf
0H3jBZcAPtvUd60hatSK5jVq1Xh77zaboQ3Xh6CruKRLSwvgCTuhvALKCuEoSYOOQlcpdCkpScf/
zAVjTlAjOn140Hi2h/kL2BrqCklaQWMTx1HQtABhwDv/ATwuiT+JrhAW2IVPvF2XehPr8FGiRlhy
1yWsWZuUknFYk+SGq2jSdSkcl7ryiSjR/wNW4HNbCmVuZHN0cmVhbQplbmRvYmoKNTEgMCBvYmoK
NDg4OAplbmRvYmoKNTIgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1
IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAt
MzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9UQ0lCSEcrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAv
U3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxl
MiA1MCAwIFIgPj4KZW5kb2JqCjUzIDAgb2JqClsgNTU2IDU1NiBdCmVuZG9iagoxOCAwIG9iago8
PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9UQ0lCSEcrQXJpYWxN
VCAvRm9udERlc2NyaXB0b3IKNTIgMCBSIC9XaWR0aHMgNTMgMCBSIC9GaXJzdENoYXIgNDggL0xh
c3RDaGFyIDQ5IC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNTQgMCBvYmoK
PDwgL0xlbmd0aCA1NSAwIFIgL0xlbmd0aDEgNzQ0OCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+Pgpz
dHJlYW0KeAGFWAl8VNXVP/e+N0uSSTKTPZlh5g1DRskkBMKSQGIyWSaAYSexMzRIQoiETYJhEYsw
tEUwqKC1VKgVt1bUoi8LOAFaUqFaUYSKpRVbQYtF+xPB73OpVfK+/30zpNL66zd3zn7udu659713
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
9dsV9ctFffgNEwR+cXGUq/vlxsXpfjITfl0dwwI1XcOA4JOpUIfu05GpfNPnWC58coHgkxGmY7rP
sYyw8FHL9WYcDrg4geDCcAesuzhYju6ij7xLdymMudw96HK33pMUHY3uIxCaSTx31SfxHHy+Ecj/
zrZW+XyspzTU0hjAtUqTJ9AKaFK3rm7LUsPzFaWrJSQMuN3wNs1vaRO0uVUNeVpr1BZPjdJVqtf7
N3OjMJd6arqoMVAf7Gr0t9Z0l/pLA57mmlDPxBljiq/p6+7BvsbM+Ja+ZojGxoi+Jur1/q2vYmGe
KPoqFn0Vi74m+ifqfZGe4zOCXWaqCuHTX6c9PCEe+dpkd4eqMqzt5Xrylrqz1tsP4IVkDyXgusOC
C7JEgMjrgsqCSmHCnhKmJHF3FjNlrS912w+wPTGTFWqbp4p8K1d1rKKswKKa6L8DP6hWrhJLEcU+
ofvWH1wCuAar6VhJVKfmza5TK3Ab0mUyQdtUE4JuwlVdQkIA325R5QgoJwhHSRp0FLoyoYuLizn+
Zy7oY4Ia0enDi8bBHuZ3spXUEZJUZ109x1FQPwdhwB3KAbwuiYdERwgT7MCVecfV1sQ8fBSVCFPu
uAorV8W4WBxWxqjuKqp0XA3H1aZ8Ikr0f+I/2RAKZW5kc3RyZWFtCmVuZG9iago1NSAwIG9iago1
MTUzCmVuZG9iago1NiAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUg
L0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0z
MjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1hPTlhYTCtBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9T
dGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUy
IDU0IDAgUiA+PgplbmRvYmoKNTcgMCBvYmoKWyA1NTYgMCA1NTYgXQplbmRvYmoKMjAgMCBvYmoK
PDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvWE9OWFhMK0FyaWFs
TVQgL0ZvbnREZXNjcmlwdG9yCjU2IDAgUiAvV2lkdGhzIDU3IDAgUiAvRmlyc3RDaGFyIDQ4IC9M
YXN0Q2hhciA1MCAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjU4IDAgb2Jq
Cjw8IC9MZW5ndGggNTkgMCBSIC9MZW5ndGgxIDc4MzIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4K
c3RyZWFtCngBhVkLeFTF9T8z9+4jyW52s3ltkiV7lyWrZBMCAQwvyeaxAQ3IK8EsJSYhRMJLggEE
y2N9ALogoFUq1Ipvsb5uNhGXoCUK1YoiKpZWbRUt9fU1gv1Qa5Xc/2/uhijWr/87OY85c2bmzDln
Zu+dECMiC4VJokDz0qY2clANJK8BBjevWqHsbHtrFfgzRMbhV7ctWFr34JdlRCaFyPDmgiVrrn5z
y9cvYICzqPe0tjTN/9qSW0Lk6EKfS1ohcCy1bEL9n6gPaV26YnVqiINNtQPZlyxrbpLO8jGoK6gn
Lm1a3SbfaLkL9QLUlWualrZ8ktC0CPUpot62rH2FVkdPoL4E9fy2a1vaZvYd/gz1u9Fdg4yhiMdC
RsoAHQ4al4hpJVjZTVmAbMOjlCX7yEmkfQL4VNC+hdqnol1Q/jn0Y/1AtJeeZAvpSTpIL7Iz6PU0
7acu+iNlUiXdQ2vpTtqMmeZAcivNRDFAfifL0rqoiO7HvPfTUeheSeupmzKYU/uMNtBG6Th6bSQr
DaYymk7L6DY2RVtJc+kD+SYqoSl0DbWxsFanbdPu0B6ih2m/9EftHCVRNjWjHNW+MPxF+ysVosdd
tIs+YHckPEMBzBKG5m/pWtot1ctMW6D9BxZ46DrYINNUOsp6uB+jt9AnzMnWShUY5UFN1Q5Dy0X1
1Eq7qZuNZpO4xzBXm6odhScLaTVG3UVR2ocSo+fpXWYxnNEe0s5QFhXQZVhPF73OeqS+czf0lcJv
BnhpKI1FyzL6Pb1MbzAve4EvM1gMxYaA4XrtbUqjEVQLax9Fz4/ZN3w9ygbpJblKK6dk+OV24W36
A33IslkRm8Zm86F8Gb9XupbMmHEEynxaCH/fjdHfZ362j1v4MelB+XH5O+OgvpNaMiLio9/Qb+kF
ZsVKFdbObmQn2N95BW/gv+EfSXfKj8lvmZqw6qtoKd1Gj9M3zMHGsBnsF6yVrWWb2e1sFzvK3mCf
8jJewxfz01KrtFx6Xi5HmSW3yzcZNhm2GD/tq+s73Pdm3zdasbaJZiAfboD1d9G9WNl+OkbvoHxA
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
uaDbBDG8sx8vGgc6WSCXraD2kKTmVtdwHAU1c+AG3F1143VJ/Ei0h7DAdvyrov38aGIdforXCEtu
Pw8rVvZz/X5Y0U91VdGl/bw7zg/lF16i/wPJdEfOCmVuZHN0cmVhbQplbmRvYmoKNTkgMCBvYmoK
NTQzOAplbmRvYmoKNjAgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1
IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAt
MzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9WSFpDS1UrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAv
U3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxl
MiA1OCAwIFIgPj4KZW5kb2JqCjYxIDAgb2JqClsgNTU2IDAgMCA1NTYgMCA1NTYgXQplbmRvYmoK
MjMgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvVkha
Q0tVK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjYwIDAgUiAvV2lkdGhzIDYxIDAgUiAvRmlyc3RD
aGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2Jq
CjYyIDAgb2JqCjw8IC9MZW5ndGggNjMgMCBSIC9MZW5ndGgxIDY4ODQgL0ZpbHRlciAvRmxhdGVE
ZWNvZGUgPj4Kc3RyZWFtCngBhVkJeFNV9j/3vpelbUrSAt1SmhdCozSthQIW2tqmSwpa1lI0YYqk
lErZpFgWcRDDKKJBFvkrCi64jAo66mtaMUUcqriMKOKogyMqizIDzjcIzjfIOGrf/3dfQhXHb+bd
/s4959xzt3PPvXn3lRgRWShEEnmbFza1kZmuguYdIKN52RJlS9v7y8CfIDIOu65tzkL/419XEpkG
EBn+OGfBiuvO+U+VooFTRPzS1pam2d9YckYTWW2oc3krFKkLLbdBHgd5SOvCJTcmtrNpkBdANi9Y
1NzEBtDlkJdANi5surFNDlnuhbwSsnJ908KW41lTmiA/KOS2Re1LtHLaAnkPZHfbDS1t9b2vfQkZ
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
dCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFt
ZSAvQkJUVE9SK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01h
eFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNjIgMCBSID4+CmVuZG9iago2NSAw
IG9iagpbIDU1NiBdCmVuZG9iagoxNiAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1
ZVR5cGUgL0Jhc2VGb250IC9CQlRUT1IrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKNjQgMCBSIC9X
aWR0aHMgNjUgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDQ4IC9FbmNvZGluZyAvTWFjUm9t
YW5FbmNvZGluZwo+PgplbmRvYmoKNjYgMCBvYmoKPDwgL0xlbmd0aCA2NyAwIFIgL0xlbmd0aDEg
NzM0NCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAt4VMX1PzP37iPJJrt5b5Il
ezdLVskmBAKYADHZPDagEQMh0SwNJiGkhJcEw0MswtKK4PKUv1KhrfhoFWrVm03E5WFJhWpFESuW
VmwFLa3arxHsh1qr5P5/czdEaf3aO3sec+bMzJlzzszeO8SIyEJBksjXvriti6zUAMlrgJz2FcuU
nV1vrgB/kcg45rtd8xY3Pf5JBZFJITL8dt6iVd9NNca2YIBLRNL5zo62uZ9ZskuIbH9An+s6IUha
bFlPlGhDfWTn4mV3JvyV/Rz18ahbFi1pb2Mp/FrUfaibF7fd2SWvszyI+lTUldvbFnect7ffjnqn
qHct6V6mldMzqG9E/dquOzq66gePfYS6ShSrQcZQxGMhI6WBjgGNSoSUw+qDlAHINDxJGbKH7ETa
B4APBR2cr30o2gXlf4N+ZAiI9tLTbD49TUfoRXYRvZ6lA9RHv6F0qqYf02p6gDZgplmQ3Ef1KAbI
H2AZWh8V0qPw7aN0Arq30ho6SGnMrn1Ea2m9dAq91lM85VAFTacltIXdpC2nZjor/4CK6Sa6nbpY
UGvStmo7tJ/Sz+iA9BvtMsVRJrWjnNA+NvxB+yMVoMeDtIvOsh0xz5EPswSh+RO6g3ZLs2WmzdP+
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
DuJ1SfxJdAewwG5cYXdfGU2sw0vRGmHJ3Vdg2fIhbsgPy4aoriq6dF9xx5WhvMJL9P/bfr8jCmVu
ZHN0cmVhbQplbmRvYmoKNjcgMCBvYmoKNTA5MQplbmRvYmoKNjggMCBvYmoKPDwgL1R5cGUgL0Zv
bnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0Zs
YWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9UT1dST1Ir
QXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAw
MCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA2NiAwIFIgPj4KZW5kb2JqCjY5IDAgb2JqClsgNTU2
IDAgMCAwIDAgNTU2IF0KZW5kb2JqCjkgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1Ry
dWVUeXBlIC9CYXNlRm9udCAvVE9XUk9SK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjY4IDAgUiAv
V2lkdGhzIDY5IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1Jv
bWFuRW5jb2RpbmcKPj4KZW5kb2JqCjcwIDAgb2JqCjw8IC9MZW5ndGggNzEgMCBSIC9MZW5ndGgx
IDc5MTIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVkJfFTV1T/3vjdLkknmJZNl
kgwzbxgySiYhEJawRDJZJqAR2RLN0EQSQjRsEgyiWITBimhAQKtUqBW3KmrRlwUcFksqVCuKqFha
tRW0WNSvEeyHWlvJ+/73zYDS+us3N2c/dzv33PveuyFGRDaKkETBlkXN7aTQ1dC8Dhjcsmypurn9
7WXgzxCZh1/Xfv2i+se/KCeyqESmt65fuPy6/wkULEIDZ2FX2lqb5375v+6xRA4Zdca0QZG2yHYn
5FLIQ9oWLb3FEWZ/hdwEWVm4uKVZdnHwjnbIiYuab2mXb7c9AHkFZPWG5kWtx11tDZAfEnL74o6l
ej09C3kf5Pz2G1vbZwwc/BTyJ6iuQ8dQxM9GZsoEHQ4qNFwoMUcy7aFsQI7pKcqW/eQk0k8BUF8/
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
1VBNbYU2NlATtegztJJAjWaZ9qP6LsY2hKHV+F1Rhm/EKNOFak2uuMHB+xNLXXNPrqCXrrknHCZn
5rIyZ1naxNRx1VU/gJoMZVOVeI+O/5znGVBnYJC2uWZmvfbMoLBWLBh9ULhG+6m44tmNa/czoard
7AtBwvW7pYns76EZQi9NrAqHa6LsasOPVPYF/JAxIPCzukkVfqRa3TG/rTG/PNSH3xBB4JeQQHmG
X15CguEnM+HX1TEkVNU1BAg+WSp1GD4dWer3fQ7lwScPCD6ZETpk+BzKjAgfbaLRjMsFFzcQXBju
8g0XF8sxXIyRdxkuRXGXuy+43G30JMVGY/gIhGaST5z3ST4Bn+8F8r+zrRWBAOuZEG5pCOF6rMkX
agU0aeuWtTm1yBxV7WoJCwNuqfxNc1raBG1u1cK+1iqtxVeldk0w6v2buUGYJ/iquqghVFvf1RBs
reqeEJwQ8jVXhXsmTRtVclFfd1/oa9S0H+hrmmhslOhrklHv3/oqEeZJoq8S0VeJ6GtScJLRFxk5
Pq2+y0oVYVzhGLSHJyUiX5tyveGKTKV9opG8E7zOlbl78EKynZJwbWXDRWcyQOR1YXlhuTBhTwlT
irgDjZucKyd4c/ew7XGTAnWqr4ICS2/quImcoXlVsb8O/KBaepNYihgOCN0P/uASwnVmVcdSohot
f2aNVoZbrS6LBdqmqjB048/rkpJC+AaPKYdBOV44StIFR6ErFbqEhLjjf+aCMSaoEZ3deNHY28OC
braUOsKS5q6p5TgKamchDLgL24PXJfGQ6Ahjgh3410fH+dbEPAIUkwhT7jgPS2+Kc/E4LI1Tw1VU
6TgfjvNNBUSU6P8AdEhYvwplbmRzdHJlYW0KZW5kb2JqCjcxIDAgb2JqCjU1MDgKZW5kb2JqCjcy
IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcy
MyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZd
IC9Gb250TmFtZSAvUENSVlhMK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRp
bmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNzAgMCBSID4+CmVu
ZG9iago3MyAwIG9iagpbIDU1NiAwIDU1NiAwIDAgNTU2IF0KZW5kb2JqCjIxIDAgb2JqCjw8IC9U
eXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL1BDUlZYTCtBcmlhbE1UIC9G
b250RGVzY3JpcHRvcgo3MiAwIFIgL1dpZHRocyA3MyAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENo
YXIgNTMgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago3NCAwIG9iago8PCAv
TGVuZ3RoIDc1IDAgUiAvTGVuZ3RoMSA3OTEyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVh
bQp4AYVZCXxU1dU/9743S5JJ5iWTZZIMM28YMkomIRCWsEQyWSagEdkSzdBEEkI0bBIMoliEwYpo
QECrVKgVtypq0ZcFHBZLKlQriqhYWrUVtFjUrxHsh1pbyfv+982A0vrrNzdnP3c799z73rshRkQ2
ipBEwZZFze2k0NXQvA4Y3LJsqbq5/e1l4M8QmYdf1379ovrHvygnsqhEpreuX7j8uv8JFCxCA2dh
V9pam+d++b/usUQOGXXGtEGRtsh2J+RSyEPaFi29xRFmf4XcBFlZuLilWXZx8I52yImLmm9pl2+3
PQB5BWT1huZFrcddbQ2QHxJy++KOpXo9PQt5H+T89htb22cMHPwU8ieorkPHUMTPRmbKBB0OKjRc
KDFHMu2hbECO6SnKlv3kJNJPAVBfPzUwT/9E2AXln8E/Ggei7bSDzaMdtJ9eYmdQ63naTb30O8qi
KnqIVtD9tBY9zYLmbpqBYoL+fpat91IRPYp+H6XD8L2GVtIeymRO/VNaRWuko6i1hpJpMJXTNFpM
97Ar9ZuogY7LP6ESupJuoHYW0ev1Dfp9+hP0S9ot/U4/R0mUQy0oh/XPTX/U/0SFqPEAbaHj7L6E
nRRELxF4/oJupK1So8z06/V/YgReuhljkGkKHWZ9PIDWW+kUc7IVUiVaeVzX9IPwclEjtdFW2sNG
s0nca2rQp+iHEclCugWtbqFu2oUSpRfpPWYzndGf0M9QNhXQ5ZhPL73B+qSBc6sHyhA3E6I0lMbB
sph+Ta/Qm8zHfsMXm2ymYlPQdKv+DqXTCKrDaJ9Czb+yr/lKlFXSy3K1XkEpiMu9Itr0W/qQ5bAi
NpVdzYfyxfxh6UayoscRKHNpHuL9IFr/gAXYLm7jR6TH5Wflf5kHDZzQU7Aifvo5/YJ+w5IxU5V1
sNvZMfYXXsln85/zj6T75aflty3NmPW1tIjuQWZ9zdLYWDad/Yi1sRVsLbuXbWGH2ZvsE17Oa/kC
flpqk5ZIL8oVKDPlDvknpjtN68yfDNQPHBx4a+BrvVi/k6YjH1Zj9A/Qw5jZbjpC76Icp4+YiSWx
FBSVeVkd+zHKSnYPe4xtZ0+zXvTyJvuIfcr+zr5k/+JIWW7mudzLB6P4+I38Zn4/f4gfQXmT/41/
I2VJg6WANFoqlcLSYoxqrbQJZaf0oZwjH5F1xLnYtNm0zbTd9KzpJdMZs81yu5Wsr3/7+Ln8cx8M
0MBdA5sHugd69Q8pA2uYgyh4qBSjb0aZj/XejIx7no4yG2KXw/LZRHYlIjObzWdL2C2I5B1sK/ul
Mfbn2D5E6Q/sNMaczF3GmIfx0byCT0W5lrfyJXwTv4/38mP8n5JFSpLsUoaUL02SGqVWaam0XNos
adLr0p+lj6SvpG9RdDlR9siDZb8ckCfJs+Wb5IflU/IpU4PpNdPH5kTzIvOd5qj5C8sYy0TLNMt0
S6Nlo2WX5R1rE7LzAO2kF5CBF37shLRaCkk7aQMfKWfzN/gbyOfZNFeawpGpfDu7i9/GevkQ0y3m
CXwCu4rOyH7E+mW+jX/FJ0hTWA2bSfP5iFiD5nT5GXCl8gHql/dhbm+g5VvMNraSnzbbqJsRH4eD
6LfScDkgvUbvSceZRX6U3pcTWRbr509J05AFL8oTTfXklR6i56Ql7DbayUM4wf5lXY88voo9g3Oh
lhWzf0g6SfwqZFGJ9Bf6CS3gf6R+7OO76Gdsrnw9baCRbAWdoiexK4aabjDnmzPYq3ye3MkdrJe4
/DRmN44NYZIpne5gjdJW82n+Lt1ER+RE+kD6FUZ/hD8nTZHPmGawNuyA2+hOWqKvpuWmevltdj1J
7GrKk0/gdFshFcte0FU4VRpwpu3C7t6Dc6BcmgKNE5lzJfKiDifEVpQHcU7IyKB52OPX4BR7g3rN
tTxK15tSGE4dIvm1gRk0S3+StujX0w36fVSI82CtvgItbqePaSNtZ2sGfkzt5MbO+YBdaarmR0zV
eiHv5O/ymXzzxeuLaOcxJ32G8hxV00TTXuqU/0AzqUxfr/8e2X0pTtgtNIeuoJOY5efoYbLURyMH
ruJderXUjvkep+n6U7qHJVKbvpCm0j76pcVEzZZAsLKutjxYNvGy0gnjx40tGT1qZPGI4UXDCgsC
+UMvvcSfN8Q32Kt63INcuTnZzqzMjHRHWqpiT0m2JSUmWC1mkyxxRgUhX3WTqvmbNNnvmzy5UMi+
Ziiav6do0lSoqi/20VRRrxmmizyD8Lzu3zyDMc/gBU+mqKVUWlighnyqdrjKp0bZrOn14O+p8oVV
rd/gpxj8JoNPBu/1ooIacrZVqRprUkNa9bK2zlBTVWEB60pKrPRVtiYWFlBXYhLYJHBalq+9i2VN
ZAbDs0LjuzhZkzFFLcdXFdKyfaiKZqS8UPNcbdr0+lBVrtcbLizQWGWLb45GvgrNHjBcqNLoRjNX
ahajG3WehtnQOrWroK9zfVShOU0B21zf3OaGek1qRhshLTWAfqu0rFtPOr8T0XhaZf3a71tzpc6Q
c54qnDs716raI9Prv1c31ytaCIfRBuryvOqmzmp0vR4rVTNTRW98TbheY2vQpSpmImYVm1+rLyQ0
TfNVLcFX4WvrnN+Epcnp1GjGcm93Tk5wt36CckJqZ229z6uV5frCzVWurnTqnLG8JzuoZl9sKSzo
UlJjge1KsccZW/L3mVYEPWYzOMNdcDUzLkSWiRH5LteCyKgWFSOp92FOYwVqHUudLWOxAPiFGWpp
c7Ei87SEyqZOZbzQY4pMM+UpPrXzS0IG+Pr/drGmOa4x5ylfkjCKPLmQahprPs9rgYCWny9SxFKJ
NcUYJxry6MKCZVHu87UrKgjCR9MQ2+bw+CKE3+sVC7wuGqQ5ELTI9PqYrNKc3G4KFgXCGm8Slr7z
low6YYmct1yo3uRDJvcaL38ZmtV/4c+uZDpCbeM1lvlfzK0xe81MX830WfVqqLMpnrU1tRdJMbsI
KOIGW5zTHJX1Ui6HTnA8VzKsSMqGWRdcINTbNDkPf2YjqedGLVZkpaFharWmNE2O4XCi1xvfM/9f
pah+RtQyyHfV4tPQxgfiA40NW5twkXzR8GydUk0tjhxeUzurszPxIhtSLTbKy+MEGU+19V61UqM6
7Mw8/EX1vrECwrlaECGDpRa7yFCHc+PiRY658Uph/ER2FhZU48zs7Kz2qdWdTZ3NUT0yx6cqvs7d
/CX+Umd7CKddLHGi+p51uVr1+jAi1sbGY3twqhDbuLK2Pj5zY1lEdmOZxEMcR7J4QTWJLwILVfRy
dtJsifItQQeZ5JMSJVrkk4yyrWbTSS7tw4M/Aa+Bw8gZUL4qPVd6lXK2dMq5UioDr3wLNGK4N9Wb
mgfE8Nj7VpX6vg2a6F+kyn3iy6NOPyWnmvrwZTWI1XVxMa5gYo5bNqW7k5OzEqL6J712O68TTDA7
ORlcKtmEhjJtNmCb0FFRIBA4DHSYyvrL+kcMz+0y/2dLZ9GSWbT0197kZIP5PJidlAQulRShIcVm
E1joLjT5XZu9ZjVbcSF9urma9GscXZmANIBdPxGcI5vX8ruS7rK/mmJKsCQ5echxZcYV2ZW5tY6G
jIbsGbkLLAuSWhwLMxZkN+Uu5zeblyXdal9rftCyWXnV+R4/Zj6W9L4958LEOxKCXt+o4QmMEpQE
nrDJk9pBSJlgCrQqPmM4bXK/sk7EvDHQD7Qk0B+fOmtcgs+UseLHAOGwQ0kbM7I4MzMtQ+Fm3+BL
/A4lc2TxmFTF7xtsMdctOPrIsu6lFfOPPvrO8nt3P71ixdNPr1xxRSM/ymR22a9m9wzo7w0MDBzY
8eAL7BcDPzt9Bu/+8z+fh89Whvdhki1YOzd7JR7vhFQl2elwmOuSo/rZ3tRUg/k8mKAo4NzpJrdY
xizh4HYLq9uVAosbiwgc5XuDNp6YlaV6lFTOVU9q2riidw4LfJiK+rHEgTKBD+IlIzeeKqJDW1oa
NzoMJthTwcX6ORFMSnPwOne60Im2u9G0SKekJF4H5m/BFJE6P9SbyCPRn+jN6Cw4ZoJpgnmvab95
r+UV66suy+W2sK02ZYFtbsqtabc67k7bl/Zxzse5Z3Js+5NecPBcxaUMUtyK+df4ALQgQaygCfqZ
YI47UbGazYdcOekuV47VlSMxbs1xScluJcqf6JmaylKjzLlTzICMcNgZtyV2ZB1FtEU+sL18Namk
sLFBW+rOMnyoLearuMz38CHkYRu7YglxFgkRKFXOIiOw/8r6zzWeTE3LGscEWpsyLJBym3IQwrgR
w400EVkylhpZ443hcF6G118yZgz+Ro9Cepgtl4wRuZORbjZb8Cdbvi3hWXmPbz29fcuPb3+I7Xb8
462jX01+6qXHGtw7dpSXtvStPPjxdQt++lCn48i7n+2of2bfE3c1iy8DZuxzr+lJ5MrVsaXbTQz5
nCzWgLlSEt0ZGa40kQFJdll2u5JTGFmcUf0zY/cbjPB0ij1edLjIyHXkxbmDysEAsiE4NM3IIbuB
a3KWD+octNnxlOOA7Zjt/VxrgsOZkp8jJQw3DU/ag/WQsGEVR2JGmsNxKMWenuJIT7EnYwWCDjGQ
YMojKTwlxR7MYPFBvWCX2dEgZoHVCapieKmzlcXKKmWjIisRS4fT2KxORk7FyTHYsy+IhHZuUtP2
sdFkZw9QMhvbnbKT7WFjcZfSF0z6bht7ouy++MIF+s+iYPHEdj7biENUrF1ZPybamApQ+pWTa63D
AiYsIBkLaKwdW9IYCIQdJZliW59fN4c3wyth7Sgj3YJd7697MWPLwtt7d6y/Zv2lT2/g7557Yeod
9/Yx69J7zv7uHIsonesOPra1e2pZJv/iVwPLGga+euuVe7tPYOmMlwTJdnjWj7I2zLaXfmnNtQot
HTzQ0nKBluqn8MTog5xg+AsDHiOWiQNXUaVC/3x+YKQy/oJFWMVPFtdPcgfVAUoFhW4MS+f5kuhC
PIZkII7bHBOwgi8r3L7JybjLkiALj7R4m2bcidC0yhlX118ZKL9xXvPCKbWGB5z0S/Ct/kM/cQvn
oAx8n1FXrb18sJRFpwE6QCIPcBFgKmA2YCNgG8BM9rhmMegqwH7AGYCZglJW930jg1GQdQbpmb+w
2BCbY2JDoyH2XBOO0SnTY7Tq8pjb+JjbiFEx9bCKGL2kIEbT8oojaLwnMbm4rzxTyqQ3AZzagRk/
iDRj+NJ8RMogDcAlDNXQBKW0niH+4m37JZmYxCWGmyGP3iex7uTU4vJErvPTiKOHf877Yxbe35OS
Wryt/Ar+ET0P2A+Q+EcoH/IPaRU/gaArwGWAbYD9gCOA0wAzP4FyHOUD/gHZ+Z+pCFAGmA3YBtgP
OA2w8D8DK/xPYgkNLPgyAOd/Alb4+5jW+8B2/h649/h7eh8/2l0yrni3wQSK4ownL85k5caZtMzi
KH+7+5uhnij/S48a8DxSPpy/QxoAeQOsAFTANEAToB1gBncM3DGKADYBHgFoADPqHEOdY6hzCPA6
4BgNBwQB0wBW/mY3uonyI93+Ck95Jq5RXsGVpocf5uIa1MNf5y8b9DX+W4O+CuqG/hB/udvtofIk
2Al1FFAFtAh2E/9Nz5A0j16eyvcjSB7gIkAZYCpgNmAjwMz388Hdcz1paGQvHcLW8fBu+tSgT9Jj
VgrO9wT9lcgxVSD/+MvAAW1Tt/l50L95C0SB/BvuAyeQ/4714ATy37oanED+hcvACeSfOx+cQP5Z
s8EJ5J9aCw4oyh9+YcglnpKpC5habuc3I0o3I0o3I0o3k4xbOhT6BlvPw3/enZ+PiG0NBobmeyJ7
WGQfi8xgkcdYpJVFVrLIahYpZZFrWSTAIi4WcbNIkEX24gBlFGHB3ovEcUEnixxikR0s0sEifhbJ
Y5EhLKKykmCUe7svx8YCCRmkp1zsK+7tuWxisR1j9CKiXqS1F9t+P/ARgG5IQTipg2PO2W5BB/fk
l8XkYeOLF5dP5gdQ8QCW4QAdB8hYoANIowNo5ACaswOXAWYD+gCnATrADO/BmMdGA9uBiwBlgNmA
VYDTALMxnNMYCqfFwGKIzxsDKwIuA0wVEj+AIq5BvdwbHIRXj4AyWdroYnY3m+rW3byEMsVlf1qq
FS8Xybu+Tv7H18mUUJ7AN/CNNAgLsSlON3Z/MwhPowe7/Xs95RnsZ+TG8eth48jP8kDHUochjyaX
VehHkYs/C1rc7boa1ezd/gLPHpYiau3yfOM66fnUFeVgP3Ht9fxBjcqs2/N7aJ7d5XnHdbfn1aKo
FZp9/igD2aMarrtdYz07Dhmuq2HY2u1ZKcguz22uSZ4FLsPQGjNc2wEpaPfM8M/yTEZ7Va45nmAH
2tzlKXNd6ymNeY0WdXZ5hmMIgRibj8EOdRmd+txGg3UlUdYWLLBsttRbpuLOtNhSYPFaPJZBllxL
ujXNqlhTrDZrotVqNVtlK8ctcXoU7w8B8fxJNyuCmJHQeJIZvIIThhkPH3GuMSvHxZrmkGp4zcwK
VqP1tVDNHFX7aqYvyhKnz9JMvgqmpdVQTW2FNjZQE7XoM7SSQI1mmfaj+i7GNoSh1fhdUYZvxCjT
hWpNrrjBwfsTS11zT66gl665JxwmZ+ayMmdZ2sTUcdVVP4CaDGVTlXiPjv+c5xlQZ2CQtrlmZr32
zKCwViwYfVC4RvupuOLZjWv3M6Gq3ewLQcL1u6WJ7O+hGUIvTawKh2ui7GrDj1T2BfyQMSDws7pJ
FX6kWt0xv60xvzzUh98QQeCXkEB5hl9eQoLhJzPh19UxJFTVNQQIPlkqdRg+HVnq930O5cEnDwg+
mRE6ZPgcyowIH22i0YzLBRc3EFwY7vINFxfLMVyMkXcZLkVxl7svuNxt9CTFRmP4CIRmkk+c90k+
AZ/vBfK/s60VgQDrmRBuaQjheqzJF2oFNGnrlrU5tcgcVe1qCQsDbqn8TXNa2gRtbtXCvtYqrcVX
pXZNMOr9m7lBmCf4qrqoIVRb39UQbK3qnhCcEPI1V4V7Jk0bVXJRX3df6GvUtB/oa5pobJToa5JR
79/6KhHmSaKvEtFXiehrUnCS0RcZOT6tvstKFWFc4Ri0hyclIl+bcr3hikylfaKRvBO8zpW5e/BC
sp2ScG1lw0VnMkDkdWF5YbkwYU8JU4q4A42bnCsneHP3sO1xkwJ1qq+CAktv6riJnKF5VbG/Dvyg
WnqTWIoYDgjdD/7gEsJ1ZlXHUqIaLX9mjVaGW60uiwXapqowdOPP65KSQvgGjymHQTleOErSBUeh
KxW6hIS443/mgjEmqBGd3XjR2NvDgm62lDrCkuauqeU4CmpnIQy4C9uD1yXxkOgIY4Id+NdHx/nW
xDwCFJMIU+44D0tvinPxOCyNU8NVVOk4H47zTQVElOj/AHRIWL8KZW5kc3RyZWFtCmVuZG9iago3
NSAwIG9iago1NTA4CmVuZG9iago3NiAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0Fz
Y2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94
IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1BDUlZYTCtBcmlhbE1UIC9JdGFsaWNB
bmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAv
Rm9udEZpbGUyIDc0IDAgUiA+PgplbmRvYmoKNzcgMCBvYmoKWyA1NTYgMCA1NTYgMCAwIDU1NiBd
CmVuZG9iagoxMyAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VG
b250IC9QQ1JWWEwrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKNzYgMCBSIC9XaWR0aHMgNzcgMCBS
IC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDUzIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+
PgplbmRvYmoKNzggMCBvYmoKPDwgL0xlbmd0aCA3OSAwIFIgL0xlbmd0aDEgNzM3MiAvRmlsdGVy
IC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAl4VNX1P/e+N0uSmWQSskySIfOGIYMwCYEAhiUm
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
IfRSSWUgUB1hs3Q/Uthn8EPGgMDPnEOK8CPFnBP12x31y0V9+A0WBH5xcZSr++XGxel+MhN+nR2D
/ZWdg4Hgk6FQh+7TkaF83+dILnxygeCTHqQjus+R9KDwUUv0ZhwOuOQAwYXhzlZ3cbAs3UUfeafu
UhBzubvf5W69Jyk6Gt1HIDRjPXvZx3oWPt8L5H9nW8u9XtY1IdBc78c1SKPb3wpoVDevaLOrwbmK
0tkcEAbcRnga5za3CdrUqgbcrZVqs7tS6Zyg1/uBuV6YJ7grO6neX1PXWe9rrQxP8E3wu5sqA10T
p40uuqKvu/v7Gj3tR/qaJhobLfqaqNf7QV9FwjxR9FUk+ioSfU30TdT7Ij3Hp9V1mqk8gE91nXbx
hHjka2O2K1Cebmsv0ZN3gsu+NvsAXkj2UgKuJyy40LICRF7nl+WXCRP2lDAliruumMm+doIr+wDb
GzPZoE52l5N32fKO5WT3z6+M/jrwQLVsuViKKPYK3Y8+cPHj2qqyYxlRtTpsZrVaituLTpMJ2sbK
AHTjL+sSEvz4eIkqh0M5XjhKUr+j0BULXVxczPE/c0EfE9SIzn68aBzsYr4ctow6ApKaU13DcRTU
zEYYcOdxAK9L4k+iI4AJduCKu+Nya2IeXopKhCl3XIZly2NcLA7LYlR3FVU6LofjclNeESX6f3Mq
xCMKZW5kc3RyZWFtCmVuZG9iago3OSAwIG9iago1MTA4CmVuZG9iago4MCAwIG9iago8PCAvVHlw
ZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIx
MiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL0RV
VkVLVStBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0
aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDc4IDAgUiA+PgplbmRvYmoKODEgMCBvYmoK
WyA1NTYgMCAwIDU1NiBdCmVuZG9iagoyMiAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAv
VHJ1ZVR5cGUgL0Jhc2VGb250IC9EVVZFS1UrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKODAgMCBS
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
RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFn
cyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvTFFMWkdHK0Fy
aWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAg
L1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgODIgMCBSID4+CmVuZG9iago4NSAwIG9iagpbIDU1NiA1
NTYgMCAwIDAgNTU2IF0KZW5kb2JqCjExIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9U
cnVlVHlwZSAvQmFzZUZvbnQgL0xRTFpHRytBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo4NCAwIFIg
L1dpZHRocyA4NSAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNTMgL0VuY29kaW5nIC9NYWNS
b21hbkVuY29kaW5nCj4+CmVuZG9iago4NiAwIG9iago8PCAvTGVuZ3RoIDg3IDAgUiAvTGVuZ3Ro
MSA3NTc2IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZC3xUxdU/M/fuI8kme5OQ
ZPMge5clq2QTEsIjPGJy89iAhjdBszSRhJASXhIMoFiExYro8pRPUWgrvqpQXzcPcXlYUqFaUcSK
pRWtIKVV+2sE+0P9rJL7/eduQGn99buT85hzzsycOXNm9t4JMSJyUIgk0poXN7VREtVC8iZgUPOK
Zer2tndWgL9AZC38cdu8xXVPfF5OZFOJLL+ft2jljz94b+CT6OAikdzT2tI090tH9miixG60GdUK
QdJixz2o/wP1wa2Ll92eHOT3ESUpqCuLljQ3SctYBHX0R7GLm25vk+9yPIh6HurqLU2LW95TZ7Sg
PlHU25a0LzPq6FeoL0I9t+3WlrbpfUc+Rf1hNDcgYyjicZCVUkELQRlxU0aYI1n2Uzogw/I0pcs+
chEZHwM+EbRvvvGJ0AvK/4428MwEot30HJtPz9EheoVdQKsXaB910+8ojaro57SKHqD1GGkWJPfR
dBQL5A+wdKObCugxjPsYHYPtTbSa9lMqcxmf0hpaJ51Aq3UUT4OonKbSEtrEJhrLqZ5Oyz+lYppI
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
Rkz9gbGmis5GiLHGm+3+baxioR4vxioWYxWLscZr482xyMzxqXUddqoI4srBpF08Lhb52pjpCVak
Km2lZvKO87hWZ+7HC8luisM1iwMXc/EAkdf55fnlQoU9JVQJ4s6uX+VaPc6TuZ/t7lcpECd6K8i/
bHn7cnIF5ldF/9rxQLRsuViKKPYL2Q8+MAng+q2qfRlRjZ47o0Yvwy1Mh80GaWNVELKxl2VxcQF8
KUWFQyEcKwwl6YqhkJUIWUxMv+F/5oLpE8SIzj68aBzoYlo2W0btQUnPrqnlOApqZyEMuLvZj9cl
8SPRHsQE23FV3365NzEPP0VrhCm3X4Zly/u5/jgs66emqWjSfjkcl7vyiyjR/wFnG/X4CmVuZHN0
cmVhbQplbmRvYmoKODcgMCBvYmoKNTI1NwplbmRvYmoKODggMCBvYmoKPDwgL1R5cGUgL0ZvbnRE
ZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdz
IDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9MUUxaR0crQXJp
YWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAv
WEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA4NiAwIFIgPj4KZW5kb2JqCjg5IDAgb2JqClsgNTU2IDU1
NiAwIDAgMCA1NTYgXQplbmRvYmoKMTkgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1Ry
dWVUeXBlIC9CYXNlRm9udCAvTFFMWkdHK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjg4IDAgUiAv
V2lkdGhzIDg5IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1Jv
bWFuRW5jb2RpbmcKPj4KZW5kb2JqCjkwIDAgb2JqCjw8IC9MZW5ndGggOTEgMCBSIC9MZW5ndGgx
IDY4ODQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVkJeFNV9j/3vpelbUrSAt1S
mhdCozSthQIW2tqmSwpa1lI0YYqklErZpFgWcRDDKKJBFvkrCi64jAo66mtaMUUcqriMKOKogyMq
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
6GOCGt7pxovGS53Mm8OWUHtAUnPqGjiOgobpcAPuxLvxuiR+JNoDmGA7PoG2X2hNzMNDMYkw5fYL
WLI0zsX9sCSe66aiSvsFd1xoyiO8RP8PVU0+hQplbmRzdHJlYW0KZW5kb2JqCjkxIDAgb2JqCjQ3
MjIKZW5kb2JqCjkyIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAv
Q2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMy
NSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvQkJUVE9SK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0
ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIg
OTAgMCBSID4+CmVuZG9iago5MyAwIG9iagpbIDU1NiBdCmVuZG9iago4IDAgb2JqCjw8IC9UeXBl
IC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0JCVFRPUitBcmlhbE1UIC9Gb250
RGVzY3JpcHRvcgo5MiAwIFIgL1dpZHRocyA5MyAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIg
NDggL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago5NCAwIG9iago8PCAvTGVu
Z3RoIDk1IDAgUiAvTGVuZ3RoMSA3NDQ4IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4
AYVYCXxU1dU/9743S5JJMpM9mWHmDUNGySQEwpJAYjJZJoBhJ7EzNEhCiIRNgmERizC0RTCooLVU
qBW3VtSiLws4AVpSoVpRhIqlFVtBi0X7E8Hvc6lV8r7/fTOk0vrrN3fOfu527rn3vXeJEZGFwiSR
v2VZczvF0wxoXgM4WlavVHa0v7Ea/AdExpG3tC9cFnzik0oiUxaR4fcLl6695dX18ZPRwEdEcn1b
a/OCz/7XWUJk86POuDYoUpZZNkG+HfKwtmUrb0/6G7sf8sOQLUuXtzSzNN4EeQ9k87Lm29vljZYf
Q1YhK7c2L2t929neBvmkkNuXd6zUKuhZyJchX99+W2v7rIGjHxKlYDzxGnQMRfwsZCQr6EjMS2i4
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
uqgxUB/savS31nSX+ksDnuaaUM/EGWOKr+nr7sG+xsz4lr5miMbGiL4m6vX+ra9iYZ4o+ioWfRWL
vib6J+p9kZ7jM4JdZqoK4dNfpz08IR752mR3h6oyrO3levKWurPW2w/ghWQPJeC6w4ILskSAyOuC
yoJKYcKeEqYkcXcWM2WtL3XbD7A9MZMVapuninwrV3WsoqzAoprovwM/qFauEksRxT6h+9YfXAK4
BqvpWElUp+bNrlMrcBvSZTJB21QTgm7CVV1CQgDfblHlCCgnCEdJGnQUujKhi4uLOf5nLuhjghrR
6cOLxsEe5neyldQRklRnXT3HUVA/B2HAHcoBvC6Jh0RHCBPswJV5x9XWxDx8FJUIU+64CitXxbhY
HFbGqO4qqnRcDcfVpnwiSvR/4j/ZEAplbmRzdHJlYW0KZW5kb2JqCjk1IDAgb2JqCjUxNTMKZW5k
b2JqCjk2IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVp
Z2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4
IDEwMDZdIC9Gb250TmFtZSAvWE9OWFhMK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAg
L0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgOTQgMCBS
ID4+CmVuZG9iago5NyAwIG9iagpbIDU1NiAwIDU1NiBdCmVuZG9iagoxMiAwIG9iago8PCAvVHlw
ZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9YT05YWEwrQXJpYWxNVCAvRm9u
dERlc2NyaXB0b3IKOTYgMCBSIC9XaWR0aHMgOTcgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFy
IDUwIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKOTggMCBvYmoKPDwgL0xl
bmd0aCA5OSAwIFIgL0xlbmd0aDEgNzgzMiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0K
eAGFWQt4VMX1PzP37iPJbnazeW2SJXuXJatkEwIBDC/J5rEBDcgrwSwlJiFEwkuCAQTLY30AuiCg
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
ZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIw
MjggMTAwNl0gL0ZvbnROYW1lIC9WSFpDS1UrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYK
MCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA5OCAw
IFIgPj4KZW5kb2JqCjEwMSAwIG9iagpbIDU1NiAwIDAgNTU2IDAgNTU2IF0KZW5kb2JqCjE1IDAg
b2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL1ZIWkNLVStB
cmlhbE1UIC9Gb250RGVzY3JpcHRvcgoxMDAgMCBSIC9XaWR0aHMgMTAxIDAgUiAvRmlyc3RDaGFy
IDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjEg
MCBvYmoKPDwgL1RpdGxlIChRdWFydHogJWQpIC9DcmVhdG9yIChRdWFydHogUiBEZXZpY2UpIC9Q
cm9kdWNlciAoTWFjIE9TIFggMTAuNS40IFF1YXJ0eiBQREZDb250ZXh0KQovQ3JlYXRpb25EYXRl
IChEOjIwMDgwODA5MTUwODE5WjAwJzAwJykgL01vZERhdGUgKEQ6MjAwODA4MDkxNTA4MTlaMDAn
MDAnKQo+PgplbmRvYmoKeHJlZgowIDEwMgowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAxMDgwMTMg
MDAwMDAgbiAKMDAwMDAwNDQwNyAwMDAwMCBuIAowMDAwMDA1ODcyIDAwMDAwIG4gCjAwMDAwMDAw
MjIgMDAwMDAgbiAKMDAwMDAwNDM4NyAwMDAwMCBuIAowMDAwMDA0NTIwIDAwMDAwIG4gCjAwMDAw
MDU4MzYgMDAwMDAgbiAKMDAwMDA5NjE0MyAwMDAwMCBuIAowMDAwMDYxNDY4IDAwMDAwIG4gCjAw
MDAwMzM0MzAgMDAwMDAgbiAKMDAwMDA4NTA2NiAwMDAwMCBuIAowMDAwMTAxODQzIDAwMDAwIG4g
CjAwMDAwNzM1OTUgMDAwMDAgbiAKMDAwMDAyMjM1MSAwMDAwMCBuIAowMDAwMTA3ODM5IDAwMDAw
IG4gCjAwMDAwNTU4MjMgMDAwMDAgbiAKMDAwMDAyNzk5NiAwMDAwMCBuIAowMDAwMDM4ODY0IDAw
MDAwIG4gCjAwMDAwOTA4NzkgMDAwMDAgbiAKMDAwMDA0NDU2NSAwMDAwMCBuIAowMDAwMDY3NTMx
IDAwMDAwIG4gCjAwMDAwNzkyNTMgMDAwMDAgbiAKMDAwMDA1MDU1OSAwMDAwMCBuIAowMDAwMDEx
MjQzIDAwMDAwIG4gCjAwMDAwMTY2OTEgMDAwMDAgbiAKMDAwMDAwNDg3NiAwMDAwMCBuIAowMDAw
MDA0OTIxIDAwMDAwIG4gCjAwMDAwMDU4MTYgMDAwMDAgbiAKMDAwMDAwNTk2NCAwMDAwMCBuIAow
MDAwMDA2MDI4IDAwMDAwIG4gCjAwMDAwMTA5NjMgMDAwMDAgbiAKMDAwMDAxMDk4NCAwMDAwMCBu
IAowMDAwMDExMjE5IDAwMDAwIG4gCjAwMDAwMTE0MTcgMDAwMDAgbiAKMDAwMDAxNjQxMSAwMDAw
MCBuIAowMDAwMDE2NDMyIDAwMDAwIG4gCjAwMDAwMTY2NjcgMDAwMDAgbiAKMDAwMDAxNjg2NSAw
MDAwMCBuIAowMDAwMDIyMDYzIDAwMDAwIG4gCjAwMDAwMjIwODQgMDAwMDAgbiAKMDAwMDAyMjMx
OSAwMDAwMCBuIAowMDAwMDIyNTIzIDAwMDAwIG4gCjAwMDAwMjc3MDQgMDAwMDAgbiAKMDAwMDAy
NzcyNSAwMDAwMCBuIAowMDAwMDI3OTYwIDAwMDAwIG4gCjAwMDAwMjgxNjggMDAwMDAgbiAKMDAw
MDAzMzE0NiAwMDAwMCBuIAowMDAwMDMzMTY3IDAwMDAwIG4gCjAwMDAwMzM0MDIgMDAwMDAgbiAK
MDAwMDAzMzYwMiAwMDAwMCBuIAowMDAwMDM4NTgwIDAwMDAwIG4gCjAwMDAwMzg2MDEgMDAwMDAg
biAKMDAwMDAzODgzNiAwMDAwMCBuIAowMDAwMDM5MDM2IDAwMDAwIG4gCjAwMDAwNDQyNzkgMDAw
MDAgbiAKMDAwMDA0NDMwMCAwMDAwMCBuIAowMDAwMDQ0NTM1IDAwMDAwIG4gCjAwMDAwNDQ3Mzcg
MDAwMDAgbiAKMDAwMDA1MDI2NSAwMDAwMCBuIAowMDAwMDUwMjg2IDAwMDAwIG4gCjAwMDAwNTA1
MjEgMDAwMDAgbiAKMDAwMDA1MDczMSAwMDAwMCBuIAowMDAwMDU1NTQzIDAwMDAwIG4gCjAwMDAw
NTU1NjQgMDAwMDAgbiAKMDAwMDA1NTc5OSAwMDAwMCBuIAowMDAwMDU1OTk1IDAwMDAwIG4gCjAw
MDAwNjExNzYgMDAwMDAgbiAKMDAwMDA2MTE5NyAwMDAwMCBuIAowMDAwMDYxNDMyIDAwMDAwIG4g
CjAwMDAwNjE2MzkgMDAwMDAgbiAKMDAwMDA2NzIzNyAwMDAwMCBuIAowMDAwMDY3MjU4IDAwMDAw
IG4gCjAwMDAwNjc0OTMgMDAwMDAgbiAKMDAwMDA2NzcwMyAwMDAwMCBuIAowMDAwMDczMzAxIDAw
MDAwIG4gCjAwMDAwNzMzMjIgMDAwMDAgbiAKMDAwMDA3MzU1NyAwMDAwMCBuIAowMDAwMDczNzY3
IDAwMDAwIG4gCjAwMDAwNzg5NjUgMDAwMDAgbiAKMDAwMDA3ODk4NiAwMDAwMCBuIAowMDAwMDc5
MjIxIDAwMDAwIG4gCjAwMDAwNzk0MjUgMDAwMDAgbiAKMDAwMDA4NDc3MiAwMDAwMCBuIAowMDAw
MDg0NzkzIDAwMDAwIG4gCjAwMDAwODUwMjggMDAwMDAgbiAKMDAwMDA4NTIzOCAwMDAwMCBuIAow
MDAwMDkwNTg1IDAwMDAwIG4gCjAwMDAwOTA2MDYgMDAwMDAgbiAKMDAwMDA5MDg0MSAwMDAwMCBu
IAowMDAwMDkxMDUxIDAwMDAwIG4gCjAwMDAwOTU4NjMgMDAwMDAgbiAKMDAwMDA5NTg4NCAwMDAw
MCBuIAowMDAwMDk2MTE5IDAwMDAwIG4gCjAwMDAwOTYzMTQgMDAwMDAgbiAKMDAwMDEwMTU1NyAw
MDAwMCBuIAowMDAwMTAxNTc4IDAwMDAwIG4gCjAwMDAxMDE4MTMgMDAwMDAgbiAKMDAwMDEwMjAx
NSAwMDAwMCBuIAowMDAwMTA3NTQzIDAwMDAwIG4gCjAwMDAxMDc1NjQgMDAwMDAgbiAKMDAwMDEw
NzgwMCAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDEwMiAvUm9vdCAyOSAwIFIgL0luZm8gMSAw
IFIgL0lEIFsgPDdiMGJhNzI2ZDcxYmM4OGQ2YjljMmUxNmQzMmE0YTE2Pgo8N2IwYmE3MjZkNzFi
Yzg4ZDZiOWMyZTE2ZDMyYTRhMTY+IF0gPj4Kc3RhcnR4cmVmCjEwODIwMQolJUVPRgo=

--Apple-Mail-30--530209534
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed
Content-Transfer-Encoding: 7bit



Now, if I plot from 95-105, there is no problem.

 > plot(x,y, type="l", xlim=c(95,105))

--Apple-Mail-30--530209534
Content-Disposition: inline;
	filename="x-y line plot 95-105.pdf"
Content-Type: application/pdf;
	x-unix-mode=0644;
	name="x-y line plot 95-105.pdf"
Content-Transfer-Encoding: base64

JVBERi0xLjMKJcTl8uXrp/Og0MTGCjQgMCBvYmoKPDwgL0xlbmd0aCA1IDAgUiAvRmlsdGVyIC9G
bGF0ZURlY29kZSA+PgpzdHJlYW0KeAGlVk1v2zAMvftX8LgdykqkJErXFduA3YoG2A8otgFFMqDL
Ydu/35Nsy0nbpE6XwAn8bD7xQ3ziI93SI13f7D3d78m37/6erj8D+LEnh2+w7JRDInWiykK/vtH3
ZhYLu+BcIMPzQNECp2gk2ThIjANe/Eo/ybFFVz/0G/xfcD2MK97ctQUc3d3ACd9urupf8IWLi5Hu
d7iTFNjUh2FHYux9SL5hGrTQlrJjFY0FmHLMmoB5OBpVEjDhLCoVy4kt+BFzSfKwJVEsFF3Ee54R
X8B7UpR9LBVzHEM11ZBYUwaEkC2DA1gpHM1GzIkX0IUoeJwqlhnm1T2wcymIRaIx8hArBhpxSJnE
6pPzwJIXDl4rBgMrBr6EiIoio4Ak4NmW7pD5WrJamflxT9ephA+XJLznrkYdEjzfLQ7PGJyrnpys
2kskCxaVUyVuJMNJkl6deVV4smBHJC97MmD/9NodkCzYCpK6CefCDgckM0a6kqRXfSbBhl6wY5K5
I2uZHaEjTybpw4a8tLeu8O8lcY7ZSE1YM5pws6PrT54d+mvznd6V9J42D/Rxc656x5yt6y095ZSF
M1/MqYqOipaf+Kmd0zt3MWkIaD+DAh0HHw5I5WLSGAr72oTHpPGANKwgbVpJqhFyhH5H5at4Dqkw
dKXp2Nl+em7uOYeFbzusMJdinB1UCas38w6c6ebaQ+PqXfy6OfBJDdesLp4tSZXxafUJmFTt5A4f
V/dZIZXaUtecn4HXpGgyD5EN4tFj9zOwKnbvjM0FW8xn4Ix5VY5x9bnMPfYZeC12dKKj2tj1qgcj
UoiqY0tGG1s79Y24smFe4HOBg4WJ0DphfDOjID4rqHVTn9wZV3f1cydFETvGgJESzTMJmn+7l2hr
jCZaJo10nVPWis9zNz2OaoPAT5yL8Mp/+Omx+Xycsok5YY5d3+6nQXhK8jr5uQivrvJz3NbzQYau
SJi4EoaWDmF6GaGxBVwbckaz9nsIHBhVITk138wD5VsPRwyM4xiHiYv9cjguB8SfFUr+pCVRjoKZ
ElOeRcyU43G7nA5/F8bbfwABUggKZW5kc3RyZWFtCmVuZG9iago1IDAgb2JqCjc5NwplbmRvYmoK
MiAwIG9iago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDMgMCBSIC9SZXNvdXJjZXMgNiAwIFIgL0Nv
bnRlbnRzIDQgMCBSIC9NZWRpYUJveCBbMCAwIDY2My45MzcgNDE5LjkwNTVdCj4+CmVuZG9iago2
IDAgb2JqCjw8IC9Qcm9jU2V0IFsgL1BERiAvVGV4dCBdIC9Db2xvclNwYWNlIDw8IC9DczEgNyAw
IFIgPj4gL0V4dEdTdGF0ZSA8PCAvR3MxCjIzIDAgUiA+PiAvRm9udCA8PCAvRjE0LjAgMjEgMCBS
IC9GMy4wIDEwIDAgUiAvRjYuMCAxMyAwIFIgL0YyLjAgOSAwIFIgL0Y5LjAKMTYgMCBSIC9GNS4w
IDEyIDAgUiAvRjguMCAxNSAwIFIgL0Y0LjAgMTEgMCBSIC9GMTAuMCAxNyAwIFIgL0Y3LjAgMTQg
MCBSIC9GMTEuMAoxOCAwIFIgL0YxMi4wIDE5IDAgUiAvRjE1LjAgMjIgMCBSIC9GMTMuMCAyMCAw
IFIgL0YxLjAgOCAwIFIgPj4gPj4KZW5kb2JqCjIzIDAgb2JqCjw8IC9UeXBlIC9FeHRHU3RhdGUg
L2NhIDAgPj4KZW5kb2JqCjI0IDAgb2JqCjw8IC9MZW5ndGggMjUgMCBSIC9OIDMgL0FsdGVybmF0
ZSAvRGV2aWNlUkdCIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYWUTUgUYRjH/7ON
BLEG0ZcIxdDBJFQmC1IC0/UrU7Zl1UwJYp19d50cZ6eZ3S1FIoTomHWMLlZEh4hO4aFDpzpEBJl1
iaCjRRAFXiK2/zuTu2NUvjAzv3me//t8vcMAVY9SjmNFNGDKzrvJ3ph2enRM2/waVahGFFwpw3M6
EokBn6mVz/Vr9S0UaVlqlLHW+zZ8q3aZEFA0KndkAz4seTzg45Iv5J08NWckGxOpNNkhN7hDyU7y
LfLWbIjHQ5wWngFUtVOTMxyXcSI7yC1FIytjPiDrdtq0ye+lPe0ZU9Sw38g3OQvauPL9QNseYNOL
im3MAx7cA3bXVWz1NcDOEWDxUMX2PenPR9n1ysscavbDKdEYa/pQKn2vAzbfAH5eL5V+3C6Vft5h
Dtbx1DIKbtHXsjDlJRDUG+xm/OQa/YuDnnxVC7DAOY5sAfqvADc/AvsfAtsfA4lqYKgVkctsN7jy
4iLnAnTmnGnXzE7ktWZdP6J18GiF1mcbTQ1ayrI03+VprvCEWxTpJkxZBc7ZX9t4jwp7eJBP9he5
JLzu36zMpVNdnCWa2NantOjqJjeQ72fMnj5yPa/3GbdnOGDlgJnvGwo4csq24jwXqYnU2OPxk2TG
V1QnH5PzkDznFQdlTN9+LnUiQa6lPTmZ65eaXdzbPjMxxDOSrFgzE53x3/zGLSRl3n3U3HUs/5tn
bZFnGIUFARM27zY0JNGLGBrhwEUOGXpMKkxapV/QasLD5F+VFhLlXRYVvVjhnhV/z3kUuFvGP4VY
HHMN5Qia/k7/oi/rC/pd/fN8baG+4plzz5rGq2tfGVdmltXIuEGNMr6sKYhvsNoOei1kaZ3iFfTk
lfWN4eoy9nxt2aPJHOJqfDXUpQhlasQ448muZfdFssU34edby/av6VH7fPZJTSXXsrp4Zin6fDZc
DWv/s6tg0rKr8OSNkC48a6HuVQ+qfWqL2gpNPaa2q21qF9+OqgPlHcOclYkLrNtl9Sn2YGOa3spJ
V2aL4N/CL4b/pV5hC9c0NPkPTbi5jGkJ3xHcNnCHlP/DX7MDDd4KZW5kc3RyZWFtCmVuZG9iagoy
NSAwIG9iago3OTIKZW5kb2JqCjcgMCBvYmoKWyAvSUNDQmFzZWQgMjQgMCBSIF0KZW5kb2JqCjMg
MCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9NZWRpYUJveCBbMCAwIDY2My45MzcgNDE5LjkwNTVdIC9D
b3VudCAxIC9LaWRzIFsgMiAwIFIgXQo+PgplbmRvYmoKMjYgMCBvYmoKPDwgL1R5cGUgL0NhdGFs
b2cgL1BhZ2VzIDMgMCBSIC9WZXJzaW9uIC8xLjQgPj4KZW5kb2JqCjI3IDAgb2JqCjw8IC9MZW5n
dGggMjggMCBSIC9MZW5ndGgxIDY5ODggL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngB
hVgNfFTFtT8zc/fuR3azmwD5Jns3S1bJJgSCGBLSZPOxAYyQAEF3kUgCRAKKRAOILeJSRTQoUJ6l
QlvR2lZan3rzIS5IH6kgbVHAWostKqDFqv2Vgv1VrR/kvv/cDdT0+eu7s/9zzpw583XmzOydS4yI
nBQjQaFFy9s6yUbboHkFyFi0eqW2vfO11ZDPEqnjb+pcsjzyxEfVRNaRRJbfLrnlzpu2Pv7sfjTw
ARHf2tHetvjjl7xlRO41qHN1BxSpy533Iq8jP6Zj+co1DmJu5F9H3nbLikVtbBpdjfxbyKvL29Z0
KjHnd5FHf6Td2ra8/S3XDauIPIrMd67oWmncR9uRH4N8oPP29s7Zg4c+RP5aIocBHUOSj5NUgGiN
1Fj2USaQZXmSMpUAZRAZ7wMYs/H+4FLjA1kuOf8LasSHQLSbnmZL6Wk6QC+yC6j1LO2lfvo1pVMd
/YDW0sO0Eb3Mg+YBmo1kgf5hlmn0UzE9Dn8+Tkdhez2to32UxjKMD+lu2iB+h1obyEV5VE1NtIIe
Ytcaq2g+nVbuoVK6lm6lThYzIsZmY5vxY/oJ7RW/Ni5SEmXRIqSjxt8sfzDeoiLU+C7toNNsm/05
CqGXGCx/SLfTTtGiMGOJ8TlG4KM7MAaFZtBRNsCDaL2d3mcZbK2oRStPGLpxCFY51EIdtJP2sUls
KvdZ5hszjKOUhj7WoNUd1Et7kOL0CzrJnJYLxo+NC5RJhTQd8+mnY2xADF5cP1gFv1ngpbFUhpIV
9D/0K3qV+dkv+QqL01JiCVm+abxOI2kCzcVon0TNP7NP+Tqku8Vhpd6ooWT45TvS2/QSvcOyWDFr
ZNfxsXwFf1TcjrgsRN0JtJiWwt+PoPVTLMj2cCc/Lp5QnlK+UEcPnjGSsSIB+j79kH7JXJipxrrY
t9kJ9ideyxfw7/N3xcPKz5TXrG2Y9Y20nB6ip+hTlsoms1nsBtbB1rKN7DtsBzvKXmUf8GrezG/m
50WHuE38QqlBmqN0KfdY7rNsUj8YjAweGvzt4KdGCWJyFuJhPUb/XXoUM9tLx+mPSKfpXWZhSSwZ
SWM+Npd9C2kde4j9iO1mP2P96OVV9i77kP2dfcy+4ISk8mzu43lIfn47v4M/zH/AjyO9yv/KPxPp
Ik8ExSRRIaJiBUa1UWxFek68o2QpxxUDfi6xbLfssuy2PGV50XJBdVq/bSPbK18+cbHg4qlBGrx/
cPtg72C/8Q6NwhpmwQteqsDo25CWYb23I+Kepd8xJ3yXxQpYJbsWnlnAlrHb2Bp48l62k/3EHPsz
bD+89AY7jzG7eI455nF8Eq/hjUg38nZ+G9/Kt/F+foJ/LqwiSbjFKFEgpooW0S5WijvFdqGLV8Tb
4l3xifgSyVAcilfJUwJKUJmqLFBWKY8q7yvvW+ZbXra8pzrU5ep9alz9yHq1tdLaZJ1lbbFuse6x
vm5rRXQepOfoeUTg5YedEetFWDxHm/lEJZMf48cQzwtosZjBEal8N7uf38X6+RjLGnUKn8Jm0gUl
AF8f5rv4J3yKmMEa2BxaxickGlRHKj+HVKEcpHPKfsztGFpeozrZOn5edVIvI45Tj70kxitB8TKd
FKeZVXmc3lQcLJ2d40+KJkTBL5RKS4R84gf0jLiN3UXP8TBOrS9sDyKOZ7Kf41xoZiXsn8IgwWci
ikrFn+geupn/gc5hH99P32OLlSW0mSaytfQ+/RS7YqzlVrVAHcV+w5cq3XwE6yeu/AyzK2NjmLCM
pHtZi9ipnud/pFV0XHHQKfHfGP1x/oyYoVywzGYd2AF30X10m7Ge7rRElNfYEhLsOspXzuB0WytK
FB/43ThV5uNM24PdvQ/nQLWYAU0GIudaxMVcnBA7kR7BOaEggpZij1+PU+wY9avNPE5LLMkMpw6R
8vLgbJpn/JR2GEvoVmMbFeE82GisRYu76T3aQrvZhsFvUSflYuecYtda6vlxS71RxLv5H/kcvn34
+sLb+SyD/oL0DNVTpeUF6lbeoDlUZTxo/B7RfSVO2B20kK7Bf9dy+ht6mCYGaOLgTN5j1ItOzPc0
zTKeNLzMQR3GLdRI++knVgu1WYOh2rnN1aGqym9UTCkvm1w66aqJJRPGF48rKgwWjL3yikD+GH+e
T/Pmjs7JzsrMSE8bNXJEaorHnexyJjnsNqtqUQRnVBj217dqeqBVVwL+adOKZN7fBkXbVxStugZV
/XAbXZP12lA0zDIEy5v+zTKUsAxdtmQerYIqigq1sF/Tj9b5tTibNysC+aE6f1TTz5nyDFPeasou
yD4fKmjhjI46TWetWlivX93RHW6tKypkPUmOWn9tu6OokHocSRCTIOnp/s4ell7JTIGnh8t7ONlc
mKKe5a8L65l+VEUzIj/ctlhvmhUJ12X7fNGiQp3VLvIv1Mlfo7uDpgnVmt3oaq1uNbvRluqYDW3S
egoHuh+Me2hha9C52L+4bX5EF21oI6ynBNFvnZ7+zbMZ/8qi8dTayMavlmaL7nDGUk0ad3dv1PTH
ZkW+UjfbJ1uIRtEG6vL8+tbuenT9IFaqYY6G3viGaERnG9ClJmciZ5WYX7s/LDWtyzTd7q/xd3Qv
a8XSZHXrNPtOX29WVmivcYaywlp3c8Tv06uy/dG2upyekdQ9+86+zJCWObykqLDHk5JwbE+ye0hw
ur4qtMPpiTJTMs2l1DD7smeZHJF/uh5CRC3SMJKIH3OaLEn7ZOpeNBkLgCfKUEtfjBVZqttrW7s9
5VKPKTLdku/xa90fEyLAf+6vwzVtQxo13/MxyUIZJ5dDTWdtl2Q9GNQLCmSIWGuxphhjpZmfVFS4
Os79/k6PBgb3URN82xYtL4b7fT65wJviIVqIjB6bFUnkNVqY3Uuh4mBU562yZOBSyai5siR2qeRy
9VY/IrnffAUcpdsCl39uT9qIcEe5ztL+Q3F7orxhjr9h1ryIFu5uHYrahuZhuUS5dCj8hrIhSR9R
GxHZHDop8WxhliIo58+7bIJMxKkr+fipZlAvjlttiEpTw7R63dM6LUGjDp9vaM/8f5XixgVZy2T/
qjY0Db08ODTQxLD1KcPyw4bn7BYNzThyeEPzvO5ux7AyhFpilNOHGCKemiM+rVanudiZ+fjFjYHJ
EtFsPQSXoaQZu8hUR7OHssMMs4cqRfHI6CwqrMeZ2d1d79fqu1u72+JGbKFf8/i79/IX+YvdnWGc
donAiRv7NmXr9Q9G4bEOVo7twalGbuPa5sjQzM1lkdGNZZJ/4jiS5QuqhfDGa6Wafs7OqtY43xEa
QRblrCCHVTnLKNOmWs5ysR9//Ha8Bo6jjKDnk4qLFTM9/6iYcbGCqiB7vgSZMN6X4kvJB2H42/tS
EwNfhiz0BWnKACEAcccRH+Gu4WFv9XA5qtAoN0tSFW5XuepykMOd4Xbzue7iIFXhSUkvmzA++3l3
KnPnZZapceNUqCmzbJ57u7LdtiN5p3vAMqAOWF92292htLIsMcI+ypXlmcTKk9azzUm24tTrlag1
mhRJ/h57xPFI0vM87vx10pHkVzwnxe/tv3W96XnPkZrao5rjSHJSaoo7w+VR56KfD0LJUnKreIkj
h4OrmGFVRUpqWVkwyCTLDt2kqsJqs9uZqtrx1yaS3G5PssvF3G6XJ4mRnbuShNPjUN3c7fAcpsN2
7sknOy6IdsFdh13Mle8UI51O4bDbheCqx+VyOsnRmMpSp7vWOfMc7jbVvi7kiLPs50NqkxpThRrn
taFkTazjeY3w5fSUtYfkMrT841xW5sWWi1kZ5zzvef5x7s8tGKwHKUE3WsYFWzbedWjjuIxgy12e
QySH73ZvtB3amOw5lKBg1mRPRYWtIjphPMNu7E/OGF2WJP2dNLrMmZdeJgCZ7/WVeRDMIceoMpbn
K7OHcuCRxBNtuY2CLfBPS3QiYxPT09KvLi2F5BdXMDe7d3DHO0+MyynM73tj8Dts09snywc/5Fey
wc+mjq+Z+MWg8+Ixdk10sMU8pITzaNHnM48tcFd8bMu2IT6JDh1cXHqZI4rMiIUvTXtZgDC2Vg7O
pFoPff7s4ERP+eUSWSofLKKMSRmDdDXu12YdM/45bpAWXDI8eJu7Dm9kLtyZBfLSInWoHRX3MLqm
uXHqrOZg9e1L226Z0WxawMi4Qt69v+aRLdxA1NPsrs4T6XQeMABBXtBioBFYAGwBdgEquYc0K8Dv
Bg4AFwCVQiK9d9vEUBxsk8n6lt1SYmbbEtn5LWa27/pogs+YleB10xNm5QmzCVcl1ONqEvyKwgRP
zS+JofE+h6tkoDpNpNGrAKdOUMYPkZsxvNk+JkaRDnCBoZqakEjtGxMo2XVAKMQEFww3Ua8xIFiv
K6Wk2sENfh4+9PK/8XOJEn6uLzmlZFf1NfxdehY4AAj+LtI7/B26m5+Bwz2gVcAu4ABwHDgPqPwM
0mmkU/wUufnbVAxUAQuAXcAB4Dxg5W+DevhbcvlMKuUqgPO3QD38TUzrTVA3PwnpJD9pDPDf9ZaW
lew1hWDxkODNHxLSs4eE1LSSOH+t97Ox3jj/U58W9D5WPZ6/TjqAFQf1ABrQBLQCnYAK6QSkExQD
tgKPATqgos4J1DmBOkeAV4ATNB4IAU2Ajb/ai27i/HhvoMZbnYZr26/wCcXLj3L52cXLX+GHTf4y
f8nkvwHPhf4IP9yb66XqJJQT6njAPeDFKLfwX/aNSfUa1Sn8AJzkBS0GqoBGYAGwBVD5AZ7Xu9ib
ikZeoCPYjV7eSx+a/Kf0IxuFlnlDgVrEmCZJoPwbkEB2absCPBTYvgNZSQKbt0GSJHDvg5AkCXxz
PSRJAreshiRJYPEySJIE5i2AJEmgsRkSSJw/+vyYK7yljTczrdrN74CX7oCX7oCX7iAFXwWQ6DPs
cS//fm9BATy2MxQcW+CN7WOx/Sw2m8V+xGLtLLaOxdazWAWL3chiQRbLYbFcFgux2AtsMlwRY6H+
YdmyUAaLHWGxp1msi8UCLJbPYmNYTGOloTj39U7HxgILm6yvWu4r7uv7RmWJG2P0waM+hLUP2/4A
6HHAMHMhGGl5CePMXMnz+gqqEvlx5SUrqqfxg6h4EMtwkE4DChboIMLoIBo5iObcoFXAAmAAOA8Y
gArrPMxji0ndoMVAFbAAuBs4D6jmcM5jKJxWgMohPmsOrBi0CmiUOX4QSX528XFfaLQnxxP0TBNb
cpg7lzXmGrm8lNLScMylpthS4sy151PXPz91kb3azjfzLTQaC7F1iG/p/Wy0N84e6Q284K0exb5H
uQqijpVRgOWDT6YuMz+JcmxSfxXl8KfAS3pzrkM1d2+g0LuPJctae7yf5Zz1fpgT5xA/yHnB+4YW
V1iv9/fQPLXH+3rOA97fFMdt0OwPxBnYPs003Zsz2fv0EdN0PQp29nrXSbbHe1fOVO/NOWZBe6Lg
xi7kQm7v7MA87zS0V5ez0BvqQpt7vFU5N3orElaTZJ093vEYQjAhFmCwY3PMTv25ZoNzS+OsI1Ro
3W6NWBvxjabEWmj1Wb3W0dZs60hbqs1jS7Y5bQ6bzabaFBvHV6mRceNMKCj/e0aqHslUBDT+uUzZ
gxOGmX888lxjNo6LvD5CNPCGOTWsQR9YRA0LNf2TOf44c8yap1v8NUxPbaCG5hp9crAhbjVm66XB
Bt3adEOkh7HNUWh1fn+c4Z00zgyp2pAtb4x7ibGUDQ9lS37lhoeiUcpIW12VUZVamVJWX/c1pNVU
ttZdehsAzxgmj9a3N8yJ6D8fHdVLpGCMjjbo/yWvlHvxme9CuG4v+0iyaGSvqGR/D8+WelFZF402
xNl1ph1p7CPYIWLAYGfLJU3akWbLTdjtTNjloz7sxkgGO7ud8k27fLvdtFOYtOvpGhOu6xkDApt0
jbpMm6507as2R/Jhkw8Cm7QYHTFtjqTFpI1eaTaTkwOTXBCYMHw7NE1yWJZpYo68xzQpHjJ54LLJ
A2ZPIjEa00YSNOM6c8nGdQY2X3Hkfxbba/D+1Tclumh+GNfxVn+4HWjVN63uyNBjCzWtZ1FUFuBW
HGhduKhD8rZ2Pepvr9MX+eu0nilmvX8rni+Lp/jremh+uDnSMz/UXtc7JTQl7G+ri/ZNbbqqdFhf
D1zu66qmr+mrSTZ2lexrqlnv3/oqlcVTZV+lsq9S2dfU0FSzLzJjvCnSY6OaKF5STd7HkxyI19Zs
X7QmzdNZaQbvFF/Guux9eCHZTUm4JjvxYcUFyLguqi6qlkXYU7IoWX5zGSrKWDfFl72P7R4q8kCd
4q+h4MpVXasoI7y0LvHrwgPVylVyKRI0KHVf+8AkjM8ndV0riRr0gjkNehVu0T1WK7StdVHoyi/p
kpLCeLNOKMdBWS4NhbhsKHUVUme3Dxn+31gwxwQ1vLMXLxov9LFQLltJXVGh5zY0cxwFzfPgBty9
9+F1Sf5JdEUxwS58au261JqcR5ASOcKUuy5h5aohacgPK4e4aSqrdF1yx6WmgtJL9L/M5Dp/CmVu
ZHN0cmVhbQplbmRvYmoKMjggMCBvYmoKNDg0NAplbmRvYmoKMjkgMCBvYmoKPDwgL1R5cGUgL0Zv
bnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0Zs
YWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9KVE9HUVQr
QXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAw
MCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiAyNyAwIFIgPj4KZW5kb2JqCjMwIDAgb2JqClsgNTAw
IF0KZW5kb2JqCjIxIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFz
ZUZvbnQgL0pUT0dRVCtBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgoyOSAwIFIgL1dpZHRocyAzMCAw
IFIgL0ZpcnN0Q2hhciAxMjAgL0xhc3RDaGFyIDEyMCAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2Rp
bmcKPj4KZW5kb2JqCjMxIDAgb2JqCjw8IC9MZW5ndGggMzIgMCBSIC9MZW5ndGgxIDcxMTIgL0Zp
bHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgLeBTV9T/3zszuJtlkNwHy2iU7y5JVsomB
8AiEmGweG9DIO9hdGsyGJCW8JBgeYhGWtoguKtS/RaGtaG0r1qqTTaQb1JKKtRVFqFjaYiuItGi/
Itivai2a+f/u7BJN69fO3d85555z7uvcM3dnhhgRWSlCEvnbVrV2URrdAM2rQH7b+rXq7q7X10N+
l8g0/mtdS1cFH/2ghsicS6T8ZunKjV973nc5gg7+RiTJnR2t7R9ZXWeIbJfQZkonFFmrrNuI7Fej
PrZz1dpbM/7CJ6EuxrCuXN3WykayOOpB1C2rWm/tkrdav4N6GHX15tZVHcfNN69EPSLqXau71+rV
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
1lJ3SNIKGps4joKmRQgD3vkP4nFJ/El0h7DAbnzi7b7Sm1iHjxI1wpK7r2DtuqSUjMPaJDdcRZPu
K+G40pVPRIn+H04CdFoKZW5kc3RyZWFtCmVuZG9iagozMiAwIG9iago0ODg4CmVuZG9iagozMyAw
IG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMg
L0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAv
Rm9udE5hbWUgL1hZQ0FWRitBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5n
IDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDMxIDAgUiA+PgplbmRv
YmoKMzQgMCBvYmoKWyA1NTYgNTU2IF0KZW5kb2JqCjEwIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9T
dWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL1hZQ0FWRitBcmlhbE1UIC9Gb250RGVzY3JpcHRv
cgozMyAwIFIgL1dpZHRocyAzNCAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNDkgL0VuY29k
aW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iagozNSAwIG9iago8PCAvTGVuZ3RoIDM2IDAg
UiAvTGVuZ3RoMSA2ODg0IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZCXhTVfY/
976XpW1K0gLdUpoXQqM0LYUCFtrapksKWNZSNGGKpJRK2aRYFnEQwyiiQRb5KwouuIwKOuprWjEF
HKq4jCjiqIMjLqAyA843CM437tr3/92XUMXxm3m3v3PPOffc7dxzb959JUZEFgqRRN7mxU1tZKbL
oHkdyGhesUzZ1vbWCvAniYzDr2qbt9j/8BeVRKYBRIY/z1u06qov/adL0cBpIn5xa0vT3K8sjhNE
VhvqXNIKRepiy02Qx0Me0rp42bWJ7WwG5EWQzYuWNDexAXQJ5GWQjYubrm2TQ5Y7Ia+GrFzdtLjl
/cwJKyHfK+S2Je3LtHLaBnk/ZHfbNS1t9b0vfgYZ40vUoGNI4rGQESAaLjSGvZQJZBkeo0zZTRlE
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
LTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9GWE5TQ1IrQXJpYWxNVCAvSXRhbGljQW5n
bGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0Zv
bnRGaWxlMiAzNSAwIFIgPj4KZW5kb2JqCjM4IDAgb2JqClsgNTU2IF0KZW5kb2JqCjEzIDAgb2Jq
Cjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0ZYTlNDUitBcmlh
bE1UIC9Gb250RGVzY3JpcHRvcgozNyAwIFIgL1dpZHRocyAzOCAwIFIgL0ZpcnN0Q2hhciA0OCAv
TGFzdENoYXIgNDggL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iagozOSAwIG9i
ago8PCAvTGVuZ3RoIDQwIDAgUiAvTGVuZ3RoMSA3NjcyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+
CnN0cmVhbQp4AYVZC3xUxdU/M/fuI8km2QSyWZKwezdLVsgmBEIwEDDZPDZAwyOQoFlKJAEi4SWB
ACLlsai8AgjyWSpoBbUqapGbh3F59CMK2hZFqFqqtAoqFfXXFOynWCvk9j93FxA/v353cuY85syc
M2fOzL07IUZEFgqSRL4Z8+ubKIaqIXkTkDJj6WJlR9PbS0F/RmQcdFfTrPk1T31ZTGSyExn+MGve
vXf9dV/VHgzwN/B5jQ31My9HO88RJSroc2sjBInzLWvB14Dv1zh/8bK4T9le8CvAW+YtmFHPgvwU
+A3gzfPrlzXJ91l+Dn4beOXu+vkN70ZPXgBeFXzTgubF2ihqA48+1L9pUUPTpJ5jn4P/J1G0BhlD
EY+FjBQHPIw4JBzeHaQ+gBTDs9RH9hD81y4AMC/tQs9s7TPRLjD/Ar1CESDaS/vYbNpHR+hVdgm9
9tMB6qDfUTKV0WO0gh6m9bA0BZKNNAnFAPnDrI/WQTn0BGL6BJ2A7h20ig6Sjdm1z2k1rZXeQa+1
FEvpVEyVtIC2sLHaEppKZ+X7KZ/G0t3UxIJajfagtl37FT1NB6TfaVexMik0A+WE9nfDe9pfKBs9
fk476SzbHvUS+WAlCM1f0iLaJdXKTJul/QseuOge+CDTODrBurgXozfQBWZnK6RSjPKUpmrHoJVG
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
VakH8UGyl2JwnWPBBWAsQOR1dnF2sWjCnhJNceJuMNJkXzXClXqQ7Y00WSFOcJeQd/GS5iVk988u
C/8144Fo8RKxFOHaK2Q/+kDFj2u+subFRBVqZlWFWoTbnlaTCdK6sgBkBddkMTF+fLSHhQMhLBCK
knRdUchGCllUVETxf+eC7hPEiM4BfGgcamc+B1tMzQFJdVRUcxwF1VMQBtwRHcTnknhJNAcwwWb8
S6D52mhiHl4Kc4QpN1+DxUsiVCQOiyNYVxVdmq+F49pQXhEl+jdXOS/XCmVuZHN0cmVhbQplbmRv
YmoKNDAgMCBvYmoKNTI3OAplbmRvYmoKNDEgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9y
IC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250
QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9CVEdEU04rQXJpYWxNVCAvSXRh
bGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1
MjUgL0ZvbnRGaWxlMiAzOSAwIFIgPj4KZW5kb2JqCjQyIDAgb2JqClsgNTU2IDU1NiBdCmVuZG9i
ago5IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0JU
R0RTTitBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo0MSAwIFIgL1dpZHRocyA0MiAwIFIgL0ZpcnN0
Q2hhciA1NiAvTGFzdENoYXIgNTcgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9i
ago0MyAwIG9iago8PCAvTGVuZ3RoIDQ0IDAgUiAvTGVuZ3RoMSA3NTc2IC9GaWx0ZXIgL0ZsYXRl
RGVjb2RlID4+CnN0cmVhbQp4AYVZC3xUxdU/M/fuI8kme5OQZPMge5clq2QTEsIjPGJy89iAhjeJ
ZmkiCZASXhJMQLEIixXR8JRPUWgrvqpQXzcPcQlYUqFaUcSKpRWtIKVV+2sE+0P9rJL7/eduQGn9
9buT85wzM2fOnJm9d0KMiBwUIom0eUsbWyiBqqF5EzBk3so2dUfLOyvBXyCy5v+4ZcHS2ic+LyWy
qUSW3y9YsurHH7w3+El0cJFI7m1uapz/pcN9hii+G23GNEORsNRxD+R/QB7avLTt9sQgv48oQYGs
LFk2r1FqY2HIKuTopY23t8h3OR6EnANZvaVxadO77qYGyJOF3LKstc2opV9BXgI5u+XWppaZ/Uc+
hfwwmhvQMRTxOMhKyaD5oIy4qSPMkSw9lApIszxNqbKPXETGx4BPBO1faHwi6gXlf0cbeGYC0R56
ji2k5+gQvcIuoNULtJ+66XeUQhX0c1pND9AGjDQbmvtoJooF+gdYqtFNefQYxn2MjsH2JlpDPZTM
XMantJbWSyfQaj3F0hAqpem0jDazycYKqqPT8k+pkCbTLdTCQkatscXYbjxJv6T90u+MSxRDaTQP
5ZjxmeVPxgeUixYP0k46zbZHvUgaRgnB8hd0K+2S6mVmLDD+BQ88dBt8kGkKHWO93I/em+hj5mKr
pXL08oShG0dglUH11Ey7qIeNZhO5x1JnTDGOIZK5dDt63UmdtA8lTC/TKeawXDCeNC5QKuXQ9ZhP
N73FeqX+S+v6SxA3C6I0jMahZhn9ml6jt5mX/YYvszgsBRbNcofxLg2iEVQDb59Gy7+xr/galLXS
q3KlUUZxiMv9Itr0W/qIpbE8No3dyIfxZfwR6VayY8QRKPNpIeL9MHr/kPnZPu7gx6Un5Gfkb6yD
+88YcVgRH/2MfkG/YbGYqcpa2V3sJPsLL+dz+M/4WekBea/8jq0Rs76ZltJmeoa+YglsLJvBfsSa
2Wq2gd3PdrJj7G32CS/l1XwxPy81S8ull+UylFlyq/xTyz2WjdZP+mv7j/T/vv8ro8C4h2YgH9bB
+wfpEcxsPx2n91BO01lmYTEsDkVlHlbDfoKyhm1mj7M9bC/rxihvs7PsU/ZP9gX7hiNpuZWncw8f
guLlt/Lb+AP85/w4ytv8H/xrKUUaIvml0VKRFJSWwasN0jaUF6WP5DT5uGwgzgWWHZbdlj2WZyyv
WC5YHba77GR/89snLmVf+rCf+u/t39Hf2d9tfERJWMM0RMFNRfC+EWUR1nsHMu4FOsEciF0ay2bF
bDIiM4ctYsvZ7Yjk3WwX+6Xp+/PsIKL0R3YePsfyDNPn4Xw0L+PTUG7mTXw538a3825+kv9Lskkx
klNKkrKliVK91CS1SaukHZIuvSn9WTorfSl9i2LI0bJbHiL7ZL88UZ4jr5AfkT+WP7bUWd6w/NUa
bV1qvccatn5uG2Mrtk23zbDV27ba9tnetTcgOw/Ti/TSwI43CTsjrZMC0ou0hY+UU/lb/C3k8xya
L03hyFS+h93L72TdfKjldusEPoFNpQuyD7F+le/mX/IJ0hRWxWbRIj4i0qd1kIwTiIrkw9QnH8Tc
3kLPt1sdbA0/b3VQJ46bcTiIfivly37pDTolnWY2+TF6X45mKayPPy1NRxa8LBdbaskj/Zyel5az
O+lFHsAJ9o19E/J4KvsVzoVqVsD+VzJI4lORRYXSX+intJj/ifqwj++lh9h8eQFtoZFsNX1MT2FX
DLPcYs22JrHX+UK5nSeybuLyXsxuHBvKJMsgupvVS7us5/l7tIKOy9H0ofQsvD/On5emyBcsM1kz
dsCddA8tN9bRKkut/A5bQBK7kbLkMzjdVksFsgd0LU6VOpxp+7C7e3AOlEpToHEhcyYjL2pwQuxC
eRjnhIwMWog9fhNOsbeo21rNw7TAEsdw6uC34o3+mTTbeIp2GgvoFmM75eI82GCsRo976K+0lfaw
9f0/oRbKxM75kE22VPLjlkojl7fz9/gsvuPq9UW0s5iL/o7yPFVSseUAtct/pFlUYmwy/oDsvhYn
7E6aSzfQOczyM4wwSeqlkf1TeYdRKbVgvqdphvG04WbR1GwsoWl0kH5ps1Cjza+V11SXaiXF1xVN
GD9ubOHoUSMLRuTnDc/N8WcPu/YaX9ZQ7xCP6s4cnJGelupKSU4alJgQrzjjYh0x0VF2m9UiS5xR
TsBb2aDqvgZd9nknTcoVsrcRisbvKRp0FarKq210VbRrRNVVlhosf/xvllrEUrtiyRS1iIpyc9SA
V9WPVXjVMJs9oxb85gpvUNX7TH6KyW8z+VjwHg8aqAFXc4WqswY1oFeubG4PNFTk5rCOmOhyb3lT
dG4OdUTHgI0Bp6d4WzpYSjEzGZ4SGN/ByR6LKepp3oqAnupFU3QjZQUa5+vTZ9QGKtI9nmBujs7K
53nn6uQt051+04TKzWF0a7luM4dRF+qYDW1UO3J62zeFFZrb4HfM985vrKvVpUb0EdDj/Ri3Qk+5
45zrOxGdJ5TXbvh+bbrUHnAtVIVxe/sGVX90Ru332qZ7RA/BIPpAW55V2dBeiaE3YaWqZqkYja8P
1upsPYZUxUzErCLza/IGhKZhkapHecu8ze2LGrA0ae06zVzl6UxL0/YbZygtoLZX13o9ekm6N9hY
kdExiNpnrupK1dTUq2tyczqU+EhgO+KcA4wj9vtME4IeqTM501xwVTOvRJYJj7zX6xoyap4KT2q9
mNNYgZrGUvu8sVgAPEGGVvp8rMhCPaq8oV0ZL/SYItMtWYpXbf+CkAHevn9crWkc0FizlC9IVIo8
uZJqOmu8zOt+v56dLVLEVo41hY/Fpjw6N2dlmHu9LYoKgvDRdMS2MTg+D+H3eMQCbwxrNBeCHppR
G5FVmpveSVqeP6jzBlHTe7kmqUbUhC7XXGne4EUmd5uvg0m63Xflz6kkJwaax+ss+b9UN0Xqq2Z5
q2bMrlUD7Q0DWVtVfZUUqRcBRdxQN8DpieW1UjqHTnA8XTJrkZR1s6+YQKh16HIW/qxmUs8P2+zI
SlPD1EpdaZgUwcFoj2dgz/x/jcLGBdHKJN81G5iGPt4/4GjEbX3CVfJV7jnapapqHDm8qnp2e3v0
VXVItYiX1w8QZDxV13rUcp1qsDOz8Bc2escKCKbrGkKGmmrsIlMdTB8QrzJMH2gUxCOyMzenEmdm
e3ulV61sb2hvDBuhuV5V8bbv56/wV9pbAjjtIokTNno2puuVm4KIWDMbj+3BqUxs4/Lq2oGZm8si
shvLJH7EcSSLF1SL+CKwUVk3Z+estjDfqSWSRT4nUbRNPsco1W61nOPSQfzwR+E1cDi5/MqXRZeK
pioXi6ZcKqIS8Mq3QCPyPfGe+Cwghp+9b1Wp91vNQt+QKvdiLKoxPpbjLb2k0GBW08GFX1p0WqZs
GZQZG5sSFTY+6XY6eY1gtNTYWHDx5BAaSnY4gB1CR3l+v/8Y0DEq6SvpG5Gf3mH9z54uoier6Olv
3bGxJvOZlhoTAy6eFKEhxeEQWOiudPldn91WNVXJQPp0cjXm1zi6kgEJAKdxRpsrWzfwe2Pudb4e
Z4myxbh4IHFy0g2p5enViXVJdakz0xfbFsfMS1yStDi1IX0Vv826MuYO5wbrw7YdyuuuU/yk9WTM
+860KxNvjdI83lH5UYyilCgetc0d30pIGS0OWhWfMZy2Zb62UcS83t8HtNzfNzB1Vr8cnyljxcMA
wWCikjBmZEFyckKSwq3eIdf4EpXkkQVj4hWfd4jNWrP4xKMrO9vKFp147N1V9+/fu3r13r1rVt9Q
z08wmV337JyufuNUf3//4ecefon9ov+h8xfw7r/os4X4bGV4ayf+DdYuml7QVEmLjR+1WF7Lt/Kd
dvlZmUWR1cKlKAtzcHY02vQ+WsyJmIq2YeNMt6Jg6cLG37V4c0EzzAWNMxcUUdZSxXJdXhNzfdIc
Fi3WOcpyORL5Fqbie4lbUmN6WBFbjyScqpxDMBAXZIR4IETysSRlHIsfNyKf1VO93+ONt1pto8eM
KRzJv+kuPVH90Nm8Nvknxavdz088OkfMTeSlx/IUZbIbI1m5nxjiHyu8Yxlx0ZlJSRkJYX5Ai3HK
cmZGbBwjmwtzMbPVZISlS+Rk3rE8c20SxuVdOqIc8SM9tWEJSFxrjdPEVWmrBrcP3pH4dOJhx0nH
++n2qERXXHaaFJVvyY/pQYJJSDAlMTopITHxaJxzUFzioDhnbJg/qSUKR7S4R+N4XJxTS2IDTr3k
lNkJTUSZuTRVuBc/R1mmrFW2KrISsrW6zORyMXIpLg5nL74knHFtUxMOstHkZA9SLBvbGfci62Fj
8e3fq8V8l3buMNvecTnzLvZdRPaJIPddrMem77tUf66kDxOtjwcofcq5DfbhfsudyhGKTxDBN9Ny
eb3fH0wsTBZpOHoU0tBquybRk+SRkKeUNMiGLPXVvJy0c8ld3c9tumnTtXu38PcuvTTt7vt7mb1t
88XfXWIhpX3jkcd3dU4rSeafP9u/sq7/y9+/dn/nGcIjji/JcWxLYvmeOc6iL+zpdqGlI4fnF16h
WF2ccL2Qo0x7UYF2tuL+qVSu0L9e6B+pjL9SI2rFI4vrErmVagCnBYVuDBvE7uIN4MS4MhDH7YMF
WMGXwI1QxeLuRYIsLBIG+rTiG56mT5kYrKn0l966sHHJlGrTAkbGNfi2/KFHhjIR3wwuoo5qZ+kQ
KYXOAwyARG7gPMA0wBzAVsBugJWcA5ploGsBhwAXAFbSpJTO7SO1MMhGk3QtWlJgio0Rsa7eFLtu
CkbolBkRWnF9xGx8xGzEqIh6eFmEXpMToQlZBSF03hUdW9Bbmiwl09sATi3AjB9BmjF8GT0qJZEO
4BJcNTWalNA11Few+5AkE5O4xHCT4TZ6JdYZG19QGs0Nfh5xdPPPeF+khvd1xcUX7C69gZ+lFwCH
ABI/i/IR/4jW8jMIugJcAtgNOAQ4DjgPsPIzKKdRPuQfkpP/mfIAJYA5gN2AQ4DzABv/M7DCPxBL
aGLBlwA4/wBY4e9jWu8DO/kpcKf4KaOXn+gsHFew32T8eQOMO2uASUkfYBKSC8L8nc6vh7nD/C9d
qt/9aGk+f5d0APIGWAGogOmABkALwAruJLiTFAJsAzwK0AFWtDmJNifR5ijgTcBJygdogOkAO3+7
E8OE+fFOX5m7NBmf/a/hCs7Nj3Fxbefmb/JXTfoG/61JXwfNhP4of7Uz002lMagntFFAFdA81Fv4
b7qGJriN0nh+CEFyA+cBSgDTAHMAWwFWfogP6ZzvTkAnB+godqebd9KnJn2KHreTtsit+cqRY6pA
vvHXgQPare72cc23YydEgXxbtoMTyHf3JnAC+e5YB04g35KV4ATyzV8ETiDf7DngBPJNqwYHFOaP
vDT0GnfhtMVMLXXy2xCl2xCl2xCl20jGrRIKfY2t5+Y/68zORsR2af5h2e5QDwsdZKGZLPQ4CzWx
0BoWWsdCRSx0Mwv5WSiDhTJZSGOhAzhAGYWY1n2VOE5zsdBRFnqOhVpZyMdCWSw0lIVUVqiFuafz
emwskIBJukrFvuKeruuKC5zw0YOIepDWHmz7Q8DHAYYpaTBSh0SMUzMFHdKVXRKRh48vWFY6iR9G
w8NYhsN0GiBjgQ4jjQ6jk8PozglcApgD6AWcBxgAK6yHYB5bTewEzgOUAOYA1gLOA6ymO+fhCqdl
wMLFF0zH8oBLANOExA+jiGs7D/dog5UMxa9MkrZmMGcmm5ZpZPJCShaX0wnx9vgwi933Vez/fhVL
UaVRfAvfSoOxENsG6NbOrwfj1+jhTt8Bd2kSe4gycfy62TjysSzQsdRqyqMpwy70oyiDPwNa0Jlx
I5o5O3057h4WJ1rtc3+dcc79aUaYg/0k44D7j2pYZp3uP0DzzD73uxn3uV/PC9uhOegLM5Ae1TTd
nzHW/dxR03QdKnZ1utcIss99Z8ZE9+IMs6IpUnFzKyTN6Z7pm+2ehP4qMua6tVb0uc9dknGzuyhi
NVq02efOhwv+CJsNZ4dlmIN6M80OawrDrFnLse2w1dqm4Y6vwJZj89jctsG2dNsge4JdscfZHfZo
u91utct2jlvNQXjZ0vzi92eQFf9bYGRFQuOXzOQVnDDM/PER5xqzc1wE6YlSFa+aVcaq9N55VDVX
1b+c5Q2z6BmzdYu3jOkJVVRVXaaP9VeFbcZMvdBfpdum/6i2g7EtQWh1fm+Y4ZsmzAyhWp8ubhzw
/sTi129OF/Ta9ZuDQXIlryxxlSQUx4+rrPgB1GAqGyoi73Emdl3FD9Z3VM2q1X81OKgXCMYYHKzS
/0dcSezHNfGFQMV+9rkgwdr9UjH7Z2Cm0EvFFcFgVZjdaNqRyj6HHTIGBHb2TFKFHan2zIjdrohd
FtrDbqggsIuKoizTLisqyrSTmbDraB0aqOgYCgSbFJVaTZvWFPX7NkezYJMFBJvkEB01bY4mh4SN
Xmx2k5EBk0wgmDDcPZsmGSzNNDE97zBN8gZM7rticp85khTxxrQRCN3EnrlsE3sGNt8L5H9nm8r8
ftY1ITivLoDrnAZvoAnQoG9c2ezSQ3NVtWNeUFTgVsXXMHdes6CNTXrQ21Shz/NWqB0TzHb/Vl0n
qid4KzqoLlBd21GnNVV0TtAmBLyNFcGuidNHFV411n1Xxho1/QfGmi46GyXGmmi2+7exCkX1RDFW
oRirUIw1UZtojkVmjk+v7bBTWRBXDibt4jHRyNeGdE+wLFlpKTaTd4LHtSa9By8keygG1ywOXMzF
AkRe55bmlooq7ClRFSfu7AaqXGsmeNJ72J6BKgXqeG8Z+dtWtK4gV2BhReSvFQ9UbSvEUkSwX+h+
8IFJANdvFa1tRFV69qwqvQS3MB02G7QNFUHoxl/WxcQE8KUUUQ6HcrwwlKQrhkJXJHRRUQOG/5kL
pk9QIzr78aJxoItpmayNWoOSnllVzXEUVM9GGHB304PXJfEj0RrEBFtxVd96uTcxDz9FJMKUWy9D
24oBbiAObQPUNBVNWi+H43JXfhEl+j9iG/X4CmVuZHN0cmVhbQplbmRvYmoKNDQgMCBvYmoKNTI1
NAplbmRvYmoKNDUgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9D
YXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1
IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9QTUdZVUYrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3Rl
bVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA0
MyAwIFIgPj4KZW5kb2JqCjQ2IDAgb2JqClsgNTU2IDU1NiAwIDAgMCA1NTYgXQplbmRvYmoKMTYg
MCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvUE1HWVVG
K0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjQ1IDAgUiAvV2lkdGhzIDQ2IDAgUiAvRmlyc3RDaGFy
IDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjQ3
IDAgb2JqCjw8IC9MZW5ndGggNDggMCBSIC9MZW5ndGgxIDc0ODAgL0ZpbHRlciAvRmxhdGVEZWNv
ZGUgPj4Kc3RyZWFtCngBhVgLeFTF9T8zc+/uZrOb3QTIm+zdLFkLmxAIjxCIyc1jAxoeAYJmKUgC
RMJLguEhFmGxIhpQqFUUWkVrrVCr3jzEBWxJxdqKIlYsbdECUlq0nwj2q1qr5P5/czdQaf3639nf
OWfOnHmdOTP33iFGRC6KkiB93tKmVkqiGdC8AWjzVq3Qtre+vQryR0S2YTe3Llja8OQnFUT2bCL1
twuWrLn51NgHq9DARSJlfktz0/xPf+s7TZRcjzqjW6BIWeq6G/ktyA9qWbritn4RPhl5A3nvkmXz
mkQNiyHfg7xzadNtrcqdroeQt/q/pWlp83tJM+Yij/5Ja13WtsK8kX5KlOJCfkjrrc2t03pf+RD5
MahuQseQ5M9FNuoPPoxUaLilE+p+ygAy1acpQwlSOpF5DvhA8t6F5geyXHL+N9hjVBaIdtOzbCE9
SwfpZXYRtZ6nfdRNv6E0qqYf0lp6kDaht5nQ3EvTkFToH2QZZjcV0hPw6xN0BLY30jraT6ks3fyQ
1tNGcQy1NpKbcqmC6mgZ3ccmmitpFp1SvkvFNJFuoVYWNRvM+80HzB/TU7RP/Ma8RImUSfOQjpgf
q38w36MC1HiIdtAp9kDCC6SjlygsH6VbaaeYrTBzgfkvjMBPqzEGhSbREdbDQ2i9mc6xdLZWVKGV
J03DfAVW2TSbWmgn7Wej2HjuV2eZk8wjlIo+bkOrO6iT9iLF6Od0grnUi+aPzYuUQfl0HebTTW+y
HtF7aUNvOfymwkuDqQQly+gX9Gt6iwXYL/ky1aUWqbp6u/kO1mY44uxGeho1/8o+5+uQ1otXlRqz
EhG4kb4nvU2/ovdZJitkU9gNfDBfxh8Tt5IDPQ5Hmk8L4e9H0PpJFmJ7uYsfFU8qzyhf2gb2njaT
sCJB+gE9Sr9kbsxUY23sTnac/ZlX8Tn8B/yMeFDZo7xtb8Ksb6KldB89Q5+zFDaGTWXfZi1sLdvE
vsd2sCPsLfYBr+D1fDG/IFrEcvFzpRJputKmfFe9W91s+6C3ofeV3t/2fm4WmXfTVMTDBoz+IXoM
M9tHR+mPSKfoDFNZIktC0pifzWDfQVrH7mM/YrvZHtaNXt5iZ9iH7O/sU/YlR8ByG8/ifp6LFOC3
8tX8Qf5DfhTpLf4R/0KkiVwREqNEqYiIZRjVJrEN6QXxvpKpHFVM+LlI3a7uUnerz6gvqxdtLvud
DnK88dWTl4ZcOtlLvff0bu/t7O0236cBWMNMeMFHpRh9E9IirPd2RNzzdIy54LtMNoSVsYnwzBy2
iC1nt8GTd7Gd7Clr7M+xl+Cl37MLGLObZ1tjHspH8Uo+Bekm3syX8238Ad7Nj/N/CbtIFB4xQAwR
48Vs0SxWiDViuzDEG+JP4oz4THyFZCpOxafkKkElpIxX5igrlceUc8o5dZb6uvoXm9O21Ha3LWb7
xD7aXmavs0+1z7Zvte+1v+NoRHQeohfoRWu39xF2WmwQYfEC3c9HKBn8Tf4m4nkOzReTOCKV72b3
8DtYNx+k3mYbx8exyXRRCcLXr/Jd/DM+TkxitWw6LeLD483Z+is4fahUOUTnlZcwtzfR8m02F1vH
L9hc1ImjpgSH0K/EMCUkXqcT4hSzK0/Qu4qTpbHz/GlRhyj4uVKmNpBf/JCeE8vZHfQCD+P0+tKx
BXE8mf0U50I9K2L/FCYJnJXdVCz+TN+lxfwPdB77+B56mM1XFtD9NIKtpXP0E+yKweottiG2Aew1
vlBp5/1YN3FlD2ZXwgYxofanu9hssdN2gf+RVtJRxUknxc8w+qP8OTFJuahOYy3YAXfQ3bTc3EBr
1AblbbaABLuB8pTTON3WiiLFD74ep8osnGl7sbv34xyoEJOgSUfkTERczMAJsRPpEZwTCiJoIfb4
jTjF3qRuWz2P0QI1ieHUwXPi9d5pNNP8Ce0wF9At5gNUgPNgk7kWLe6mv9BW2s029n6HWikHO+ck
m6jW8KNqjVnA2/kf+XS+/er1hbfzWDr9Dek5qqEy9QC1K7+n6VRubjF/h+j+Fk7YHTSXrqezmOXH
6GGC6KERvZN5h1kjWjHfUzTVfNr0MSe1mEtoCr1ET9lVarKH9KoZ9RV6edm1pePGlowpHjVyRNHw
YYVDC/JDQwZ/65pg3qBArl/z5QzMzsrMSE9LHdC/X0qy15PkdiU6Exx2m6oIzig/HKhp1Ixgo6EE
AxMmFMh8oAmKpq8pGg0NqpqrbQxN1mtC0VWWOixv/g9LPW6pX7FkXq2USgvytXBAM45UB7QYmzm1
AfJ91YGIZpy35EmWvM2S3ZD9flTQwukt1ZrBGrWwUbOqpT3cWF2QzzoSnVWBqmZnQT51OBMhJkIy
0gKtHSytjFkCTwuP7eDkcGOKRmagOmxkBFAVzYi8cNN8o25qQ7g6y++PFOQbrGpeYK5BgUrDE7JM
qMrqxrBVGXarG22hgdnQZq0jv6d9S8xLcxtDrvmB+U2zGgzRhDbCRnII/VYbabefTf93Fo2nVDVs
+npplmgPpy/UpHF7+ybNeHxqw9fqZvllC5EI2kBdnlfT2F6DrrdgpWqna+iNb4w0GGwjutTkTOSs
4vNrDoSlpnGRZiQEKgMt7YsasTSZ7QZNW+PvzMzU95mnKTOstdc3BPxGeVYg0lSd3dGf2qet6crQ
tYyrSwryO7zJccd2JHn6BJf760IznB4vsyTLXEq10654lskRBa4zdETUPA0jaQhgTmMkaR5D7fPG
YAHwizDUMuZjRRYaCVWN7d6xUo8pMkPN8wa09k8JERA4/9HVmqY+jS3P+ynJQhknV0LNYE2XZSMU
MoYMkSFir8KaYoxlVn5UQf6qGA8EWr0aGNxHdfBtU2RsIdzv98sF3hzTaS4yRnRqQzyv0dysTtIL
QxGDN8qSnsslA2bIkujlkivVGwOI5G7rVXCA4Qhe+Xu8qf3CLWMNlvo/ipvj5bXTA7VTZzZo4fbG
vqitrb8qFy+XDoXfUNYnGf2qGkQWh05KPEtYpQjKWTOvmCDT4DKUPPxtVlDPj9kdiEpLw7Qaw9s4
IU4jTr+/b8/8f5Vi5kVZy2L/rtY3DWNsqG+g8WEb467KXzU8V7uorceRw2vrZ7a3O68qQ6jFR3ld
H0PEU32DX6syaAZ2Zh7+MbNnjEQky9DhMpTUYxdZ6khWX/Yqw6y+ShH8ZHQW5NfgzGxvrwloNe2N
7U0xMzo3oHkD7fv4y/zl9tYwTrt44MTM/ZuzjJotEXishY3F9uBUKbdxVX1D38ytZZHRjWWSD3Ec
yfIFVSW88dqpspuzszZ7jO/Q+5GqnBXktCtnGWU4bOpZLl7Cgz8Br4FDKT3k/az0Uulk7z9KJ10q
pXLI3q9Ahg/zJ/uT80AYHntfaaLnK12lL0lTetAXzTDPKclqD3lpIJvRweW4dGdmjqL2z3G70xJi
5gfdHg+fIQU9w+2GlEwuqaFUlwvUJXVUGAqFjoAcofLz5eeHD8vqsP13S/9ASzbZ0l+73W5L+FjP
SEyElExeqSGvyyWp1F1p8t9tdtu0DG82wqeTa4m/wNGVCqQAHvO0PlexbeL3JN7jeS1JTbAnpvNw
v4kDrs+oyqrvN2vArIxpWYvtixPn9VsyYHFGY9Yavtq2KvF2zybbI/bt3tfST/DjtuOJ73oyr0y8
LUH3B0YOS2CU4E3gCdt8yW2EkNGToNXwGcNpW86vN0ufzw6dB1keOt83dTZ7OT5TxsgfAyKRft6U
0SOKUlNTBni5LZB7TbCfN3VE0ehkbzCQa7fNWHzs8VWdKyoXHXvinTXf27dn7do9e9atvX42P8YU
du3P5nT1mid6e3sPPfvIi+zR3ocvXMS7/6KPF+KTleGtnfiXWDsnPa9rQncnj1ysrOdb+Q6H8jOF
JZBN5SJBZS7ODjut0TvlnIhpqBszT3d7vVi6mPk3Pdla0GxrQZOsBYWX9Qy5XJfXxFqfTJequz0j
1cueGKYyDd9LXM1I3M9K2UYE4WTvWTgDfkFEyB8y8XgsTythySXDh7HZNDvkDyTbbPZRo0cXj+Bf
dlccq3/4TOEK5Ttla33PjT88R8ZlJt7DvPjedZKbBfXRKQ2uFtdO1x7Xay51opjoflARKYw7yGUT
dtWZKOzkQiQeFkp/IRThJu5yK3ZxgB/A5xhnj+tOUhSY0GGnEuM3v6iqTn2gb6TzshcgyKDkMyB8
bEWnM8aKdbddzw2MtEf9o+zbPFzOOtHdfyRxL9e4QP60VQfC2b3SP/yFpBjb0iHD4iPM3HLCP6QT
Sr1/9co9WY7N+Vlpcgk8kVJSsmloSLnD+4rH44FXcODuI7d5sjOlxB0z39ETR5SI3IISoQwcWCqb
iMBtsNH7u/TEEle0rsSlB0tcudngBSXSIBTBFh/FRiSPGBBIFsmMb790F3/0+6++2t07is15Suz9
6vqnep/gCn/o0mLrwSNcR26ffHv1HE/pp44sB84colcOzS++wjPNcziFepBPsOxlAY4me1nvZKry
0r+e7x3hHXulRJbKn2KDSmmjGcApAOtIo1l/dicvgiSPNgWE44ZABfXibf0GqNy4GxHIS4uUvjZt
+M6m6+umTKgNhypuXdi0ZFK9ZQEj8xp8/33TT4GyH97r04g66j0VuSKNLgAmIMgHWghMAeYAW4Fd
gI08fZpl4OuBg8BFwEa6SOt8YIQeA9tssa5FS4qsbFM8O2u2le26MRLnk6bGefV1cbOxcbPhI+Pq
oZVxfk1+nKfkFUXReJfTXdRTkSpS6S2AUyso46+QhzF8vTwuBpABcIGhWhpdpHQNChbtOigUYoIL
htsGn9kjWKc7uajCyU1+AX708Y/5+XgJP9+VlFy0q+J6foaeBw4Cgp9Bep+/T+v5aTjdC1oO7AIO
AkeBC4CNn0Y6hXSSnyQP/xMVAuXAHGAXcBC4ANj5n0C9/D25hBaVcjnA+XugXv4upvUuqIefgHSC
nzB7+LHO4pKifZYQKuwTfHl9QlpWn5CSWhTjb3d+MdgX43/u0kK+xyuG8XfIABA3oF5AA+qARqAV
sEE6Duk4RYFtwOOAAdhQ5zjqHEedw8AbwHEaBuhAHeDgb3Wimxg/2hms9FWk4tP81wgsHz/C5dWa
j7/BX7X46/xXFn8NPAf6w/zVzhwfVSSinFDHC+4FL0S5yn/ZNSjFZ1Yk84Nwkg+0ECgHpgBzgK2A
jR/kuZ3zfSlo5AAdxu708U760OI/oR85SF/k04NViDFNkuDYayGB7NJ2Bbke3L4DWUmC9z8ASZLg
XVsgSRK8fQMkSYJLVkGSJDh/ESRJgjPnQJIkOKUeEkiMP/bioGt8xVMWM63Cw1fDS6vhpdXw0mpS
cPODRF9g6/n4DzqHDIHHduqhwUN80f0s+hKLTmPRH7FoM4uuY9ENLFrKojexaIhFs1k0h0V1Fj3A
xsAVUaZ3X5Ut0dNZ9DCLPsuibSwaZNE8Fh3EohrO5Rj3d16HjQUWtlhXhdxX3N91bVmRB2P0w6N+
hLUf2/4g6FHAtHI6jLTcuHFGjuS5XUPK4/mhY4uWVUzgh1DxEJbhEJ0CFCzQIYTRITRyCM15QMuB
OUAPcAEwARusczGPrRb1gBYC5cAcYD1wAbBZw7mAoXBaBiqH+Lw1sELQcmCKzPFDSPJqzc/9+kBv
tjfknSC2ZjNPDpuSY+bwYkpNxVGXkuxIjjH33s/d//zcTQkVCfx+vpUGYiG29fGtnV8M9MXYI53B
A76KAexhysHx62MlFGR54GOozcqPomyH1I+kbP4MeFFn9g2o5ukM5vv2syRZa6/vi+yzvg+zYxzi
B9kHfL/XYgrr9P0Ommf2+t7Jvtf3WmHMAc1LwRgD269Zpvuyx/iePWyZbkDBzk7fOsn2+u7IHu9b
nG0VNMcLbmpDTvf4pgVn+iagversuT69DW3u9ZVn3+QrjVuNknX2+oZhCKG4OASDHZxtdRrIsRqc
URxjLXq+fbu9wT4F93BF9ny73+6zD7Rn2fs7UhxeR5LD5XA6HA6bQ3HgPcLRH09zPSSfP/1tXsls
CGg8ySzZixOGWQ8fea4xB8dljdFP1PLa6ZWs1uiZR7VzNeOz6YEYc06daaiBSmak1FJtfaUxJlQb
s5vTjOJQrWGv+3ZDB2P3R6A1+D0xhu+OGDOlamOWvBXYR4wlb7wvS/JvbbwvEqH01FXl6eUpZckl
NdXfQBotZWO19QIQJ+lXyQON7bXTG4yfDowYRVIwB0Zqje/La4N9uMq9GK7exz6RLNKwT5Sxv4en
Sb0oq45EamPsBsuONPYJ7BAxYLBz5JAm7Uhz5MTtdsbt8lAfdoMkg11CAuVZdnkJCZadwqRdR9ug
cHXHIBDYpGnUZtm0pWlftzmcB5s8ENikRumwZXM4NSptjDKrmexsmOSAwIThftgyyWaZlok18g7L
pLDP5N4rJvdaPYn4aCwbSdCM+/RlG/dp2HzNkf9bbK4MhVjXuMi8WWFcuTQGws1Ao7F5VUu6EZ2r
aR3zIrIANx/BxrnzWiRvajYigeZqY16gWusYZ9X7j+JZsnhcoLqDZoXrGzpm6c3VneP0ceFAU3Wk
a3zdyOKr+rr3Sl8j676hrzrZ2EjZ13ir3n/0VSyLx8u+imVfxbKv8fp4qy+yYryuocNBlRG8gVq8
iyc6Ea+NWf5IZaq3tcwK3nH+9HVZ+/FCspsScRXiwuWZG5BxXVBRUCGLsKdkUZK8V+srSl83zp+1
n+3uK/JCnRyopNCKlW0rKT28sDr+b8MPqhUr5VLEaUjqvvEHkzCuyKrbVhDVGkOm1xrluCnpsNuh
bayOQDf2si4xMYz3+rhyKJRjpaEQVwylrlTqEhL6DP87FqwxQW29w0f5gS6m57AV1BYRRk5tPcdR
UD8TbsD9yn68LsmHRFsEE2zDdXrb5dbkPEIUzxGm3HYZK1b2SX1+WNHHLVNZpe2yOy43FZJeov8D
uWrOGAplbmRzdHJlYW0KZW5kb2JqCjQ4IDAgb2JqCjUxNzgKZW5kb2JqCjQ5IDAgb2JqCjw8IC9U
eXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAt
MjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAv
SlBPSEtFK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdp
ZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNDcgMCBSID4+CmVuZG9iago1MCAwIG9i
agpbIDU1NiA1NTYgMCAwIDU1NiBdCmVuZG9iagoxMiAwIG9iago8PCAvVHlwZSAvRm9udCAvU3Vi
dHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9KUE9IS0UrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IK
NDkgMCBSIC9XaWR0aHMgNTAgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDUyIC9FbmNvZGlu
ZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNTEgMCBvYmoKPDwgL0xlbmd0aCA1MiAwIFIg
L0xlbmd0aDEgNzExMiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAt4FNX1P/fO
zO4m2WQ3AfLaJTvLklWyiYHwCISYbB4b0Mg72F0azIYkJbwkGB5iEZa2iC4q1L9Foa1obSvWqpNN
pBvUkoq1FUWoWNpiK4i0aL8i2K9qLZr5/+7sEk3r187d3znnnnPu69wzd2eGGBFZKUIS+dtWtXZR
Gt0AzatAftv6terurtfXQ36XyDT+a11LVwUf/aCGyJxLpPxm6cqNX3vedzmCDv5GJMmdHa3tH1ld
Z4hsl9BmSicUWaus24jsV6M+tnPV2lsz/sInoS7GsK5c3dbKRrI46kHULatab+2St1q/g3oYdfXm
1lUdx803r0Q9Iupdq7vX6tX0E9QfRv3qrls6uuYPvvge6r8mStWhYyjispKJMsDHE4eGY7YHKQ/I
Vx6jPNlLmL9+HsC69PODy/R3hV1w/le0wowMEO2nJ9kyepIO0QvsElo9Tf3UR7+mHKqn79Emup+2
Y6RF0NxF81EU6O9neXofldIjiOkjdBS+X6HNdJCyWa7+Hm2hbdIJtNpG6TSGamguraZ72A36Omqm
0/I3qRzxv5m6WEQP6vfq9+k/pB9Rv/Rr/TPsTD61oRzV31d+r/+RStDiO7SHTrP7Up4hP0aJwPP7
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
LTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvWFlDQVZGK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAg
L1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250Rmls
ZTIgNTEgMCBSID4+CmVuZG9iago1NCAwIG9iagpbIDU1NiA1NTYgXQplbmRvYmoKMTUgMCBvYmoK
PDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvWFlDQVZGK0FyaWFs
TVQgL0ZvbnREZXNjcmlwdG9yCjUzIDAgUiAvV2lkdGhzIDU0IDAgUiAvRmlyc3RDaGFyIDQ4IC9M
YXN0Q2hhciA0OSAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjU1IDAgb2Jq
Cjw8IC9MZW5ndGggNTYgMCBSIC9MZW5ndGgxIDc2ODAgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4K
c3RyZWFtCngBhVkJfFTV1T/3vjdvJskkmcm+DDNvGDKWTEIgLAESk8kyAY3sic3QRBIgEjYJhkUU
YbAiGBSotSjUilsrLujLAk6AllSoVhSxQmnFVpBiUX8i+H0utUre979vhlRaf/3ezdnP3c499857
N8SIyEohksg/Z3FzG/hp0LwBcMxZsUzd1vb2CvAfEinDb26bt7j+yc/KicwZRKY/zFu06uafThu0
GQ18Anl4a0vz3C/+13WGKMmBOmNaoUhabL0Hci3kIa2Ll92WHORtkG+DbFu0ZE6z9DwLQ94IOXZx
821t8l3Wn0F+ELJ6S/Pilg9igz+C3CPktiXty/Q6ehbyCci5bbe2tE3vP/wRUbKorgMxFPFYSSEb
6HDMixEnybSPMgFZpqcpU/YSxq+fB2Be+vn++fqHwi4o/xi1MCIDiHbRbjafdtNBepldQq0XqZd6
6PeUTlX0CK2mB2kDepoJzb00HcUE/YMsU++hAnocfT9OR+H7Q1pD+yiNZegf0VpaLx1HrfUUT4Op
nKbSErqf3aAvpwY6Lf+YiugGuoXaWEiv1zfrD+hP0S+pV/q9fpniKIvmoBzVPzX9Wf8L5aPGz2g7
nWYPxOwhP3oJwfMXdCvtkBplps/T/4kRuGklxiDTJDrK+rgPrbfQeZbBVkuVaOVJXdMPw8tBjdRK
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
RaKvItHXBP8Eoy8ycnxqfaeFKoK44jBoN4+LRb42ZbuDFWm2tlIjeYvdGWuy9+GFZBfF4VrHiovA
eIDI6/zy/HJhwp4SpgRxRxg1ZawpdmfvY7uiJhvUdk8F+ZYtb19OGYH5VZG/djxQLVsuliKCfUL3
vQ9cArjuq2pfRlSj5c6o0cpw69NpNkPbVBWEbvwVXVxcAF9mEeUwKMcLR0kacBS6EqGLiYk6/mcu
GGOCGtHpxYvG/m7md7Jl1B6UNGdNLcdRUDsTYcBd0T68LokfifYgJtiOfw20X2lNzMNHEYkw5fYr
sGx5lIvGYVmUGq6iSvuVcFxpyieiRP8HWvIM9gplbmRzdHJlYW0KZW5kb2JqCjU2IDAgb2JqCjUz
MjIKZW5kb2JqCjU3IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAv
Q2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMy
NSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvVE1YREVBK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0
ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIg
NTUgMCBSID4+CmVuZG9iago1OCAwIG9iagpbIDU1NiA1NTYgNTU2IF0KZW5kb2JqCjExIDAgb2Jq
Cjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL1RNWERFQStBcmlh
bE1UIC9Gb250RGVzY3JpcHRvcgo1NyAwIFIgL1dpZHRocyA1OCAwIFIgL0ZpcnN0Q2hhciA0OCAv
TGFzdENoYXIgNTAgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago1OSAwIG9i
ago8PCAvTGVuZ3RoIDYwIDAgUiAvTGVuZ3RoMSA3NDQ4IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+
CnN0cmVhbQp4AYVYCXxU1dU/9743bybJJJnJvgwzbxgySiYhEJYAiclkmQCGnUQzNEhCEgmbBMNq
EYa2CAYVtJYKVXFrRS36soAToCUVqhVFqFhasRW0WLQ/Efw+l1ol7/vfNwOV1l+/uXP2c7dzz73v
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
izPitzPil4P68BsiCPxiYijH8MuJiTH8ZCb8ujqGBKq6hgDBJ12lDsOnI139ts/RHPjkAMEnLURH
DZ+jaSHho5UazTgccHECwYXhDthwcbAsw8UYeZfhUhB1ufuqy91GT1JkNIaPQGgm/uwVn/iz8PlW
IP8721rh87Ge4mBzQwDXKo2eQCugUduysi1DC81T1a7moDDgdsPbOK+5TdCmVi3oaa3Smj1Valex
Ue/fzA3CXOyp6qKGQG19V4O/taq72F8c8DRVBXsmTB9VdE1fd1/ta9T07+hrumhslOhrglHv3/oq
EuYJoq8i0VeR6GuCf4LRFxk5Pr2+y0IVQXz6G7SHx8UiXxuz3cGKNFt7qZG8xe6Mddn78UKym+Jw
3WHFBVk8QOR1fnl+uTBhTwlTgrg7i5oy1hW7s/ez3VGTDWq7p4J8y1d0rKCMwIKqyL8DP6iWrxBL
EcE+ofvOH1wCuAar6lhOVKPlzqrRynAb0mU2Q9tYFYRu/BVdXFwA324R5TAoxwtHSbrqKHQlQhcT
E3X8z1wwxgQ1otOHF40DPczvZMupIyhpzppajqOgdjbCgDuU/XhdEg+JjiAm2IEr844rrYl5+Cgi
EabccQWWr4hy0Tgsj1LDVVTpuBKOK035RJTo/wBqztkQCmVuZHN0cmVhbQplbmRvYmoKNjAgMCBv
YmoKNTE1NQplbmRvYmoKNjEgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQg
OTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2
NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9CTElXTEwrQXJpYWxNVCAvSXRhbGljQW5nbGUg
MCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRG
aWxlMiA1OSAwIFIgPj4KZW5kb2JqCjYyIDAgb2JqClsgNTU2IDAgNTU2IF0KZW5kb2JqCjE3IDAg
b2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0JMSVdMTCtB
cmlhbE1UIC9Gb250RGVzY3JpcHRvcgo2MSAwIFIgL1dpZHRocyA2MiAwIFIgL0ZpcnN0Q2hhciA0
OCAvTGFzdENoYXIgNTAgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago2MyAw
IG9iago8PCAvTGVuZ3RoIDY0IDAgUiAvTGVuZ3RoMSA3MzQ0IC9GaWx0ZXIgL0ZsYXRlRGVjb2Rl
ID4+CnN0cmVhbQp4AYVYC3hUxfU/M/fuI8kme/PePMjeZckq2YRAAMMjJpvHBjQiEBLN0mASICW8
JBhAsQhLK4LLU/5Khbbio1WoVW82EZeHJRWqFUWsWFqxFaS0ar9GsB9qrZL7/83dJUrr197Z85gz
Z2bOnHNm9t4hRkQ2CpJEvjmL2zrJTg2QvA4YOmfFMnVH51srwF8kMo/8bue8xU1PfFJJZFGJTL+d
t2jld9PN8S0Y4BKRdL6jvW3uZzbnWSLlD+hzXQcEKYtt64iSFdSHdSxedlfSX9nPUR+Dum3Rkjlt
LI1fi7oPdevitrs65bW2h1CfjLp6e9vi9jOZ31mAeoeody7pWqZX0LOob0D92s472jvrB45+hLpG
FK9DxlDEYyMzZYCOBI1KhJTD6gOUBcg2PUVZsoccRPoHgA8FHZivfyjaBeV/g34kBkR76Bk2n56h
w/QSu4hez9F+6qXfUCbV0I9pFT1I6zHTTEjup3oUE+QPsiy9l4rpMfj2MToO3VtpNR2gDObQP6I1
tE46iV7rKJGGUiVNoyW0md2kL6dmOiP/gErpJrqdOllQb9K36Nv1n9LPaL/0G/0yJVA2zUE5rn9s
+oP+RypCj4doJ51h2+OeJx9mCULzJ3QH7ZJmyUyfp/8LFrjoTtgg0xQ6zvq4F6O30wfMwVZJ1Rjl
CV3Tj0Irl2ZRB+2iA2wsm8RdpmZ9in4cniyiuzDqTgrTPpQIvUinmc10Uf+pfpGyqJBuwHp66Q3W
Jw1cXjtQAb+Z4KXhNB4tS+iX9Aq9ydzsV3yJyWYqMflMd+tvUxqNokZY+xR6/pV9zlejrJFelmv1
KkqCXx4Q3qZf0/ssmxWzqewWPpwv4Y9Id5AVM45CmUvz4e+HMfp7zMv2cRs/IT0hPy1/aR4ycFZP
QkQ89CP6Cf2KJWKlKuti32en2J95NW/hP+LnpAflvfJbljas+jZaTJvpafqcpbBxbDr7Dutgq9h6
9gDbyY6zN9mHvJI38IX8gtQhLZVelKtQZshd8g9M95k2mj8caBo4OvDbgc/1Ev0+mo58WAvrH6JH
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
+2yGO8Lip8/UTO4qpqXUUV1DlTbOWxex6PVaqbdOs0z7TlM3Y1sCkGp8Q4ThXT/CdCFalyO+xPHO
xJLXbc4R9Np1mwMBcmSsqHBUpJQnj6+t+RbUaghba/DKe+VxXGFAHd4h2o66GU3az4cEtBLB6EMC
ddr/iU/1/bg+veiv2c8+ESTQtF8qZ//w1wu5VF4TCNRF2C2GHqnsE+ghY0CgZ80jVeiRas2L6u2K
6uWjP/SGCQK9uDjKN/Ty4+IMPZkJve6uYf6a7mFA0MlUqcvQ6cpUv6lzLB86+UDQyQjSMUPnWEZQ
6GjlxjC5uVDJA4IKw52soZLLsg0Vw/JuQ6U4pnL/oMr9xkxS1BpDRyAMk3j2ik7iWeh8w5H/nW2v
8npZz8TAnGY/rjla3f52QKu2cUWHQwvOVtXuOQHRgNsGT+vsOR2CtrVrAXd7jTbHXaN2TzT6/Vtz
s2ie6K7ppmZ/Q1N3s6+9JjzRN9HvbqsJ9EyaNqb0qrnuH5xrzLRvmWuaGGyMmGuS0e/f5ioVzZPE
XKVirlIx1yTfJGMuMnJ8WlO3laoC+BQ3aA9PiEe+tua4AlUZSme5kbwTXY7VOQfwQrKHEnD9YMOF
VSJA5HVRZVGlaMKeEk1J4i4r1uRYPdGVc4DtiTUpECe7q8i7bHnXcnL459dEf114IFq2XIQiir1C
9q0PVPy4lqrpWkZUpxXMqNMqcDvRbbFA2loTgGzCFVlCgh/fUlHhCAgnCEVJGlQUsjIhi4uLKf5n
Lhg2QQzv7MeLxsEe5stjy6grIGl5dQ0cR0HDTLgBdxoH8Lok/iS6AlhgF66wu66MJtbhpWiNsOSu
K7BseYyL+WFZjBqqokvXFXdcGcorvET/D3o6wCIKZW5kc3RyZWFtCmVuZG9iago2NCAwIG9iago1
MDkxCmVuZG9iago2NSAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUg
L0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0z
MjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1hLUlFDUitBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9T
dGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUy
IDYzIDAgUiA+PgplbmRvYmoKNjYgMCBvYmoKWyA1NTYgMCAwIDAgMCA1NTYgXQplbmRvYmoKMTQg
MCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvWEtSUUNS
K0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjY1IDAgUiAvV2lkdGhzIDY2IDAgUiAvRmlyc3RDaGFy
IDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjY3
IDAgb2JqCjw8IC9MZW5ndGggNjggMCBSIC9MZW5ndGgxIDc5MTIgL0ZpbHRlciAvRmxhdGVEZWNv
ZGUgPj4Kc3RyZWFtCngBhVkJfFTV1T/3vjdLkknmZSbLJBlm3jBklExCICxhiWSyTEADsiWaoUQS
IBo2CQZRLMKgIhpQ0CoVasWtilr0ZQGHxZIK1YoiKpZWbRUtFvVrBPuh1ip53/++GVBaf/3m5uzn
bueee997N8SIyEZRkig0d3FzGyl0BTSvAQbOXb5M3dz21nLwp4nMQ69uu2Zxw2NfVBBZVCLTm9cs
WnH1/wQLF6OBM7ArrS3N8778X+9xIqeMOqNaoXAstt0OuQzyoNbFy250RtjfIDdBVhYtmdssuzl4
Zxvk5MXNN7bJt9juh7wSsnpt8+KWd/KaroP8oJDblrQv0xvoGcj7IBe0XdfSNr3/4KeQP0F1HTqG
In42MlMW6FBQoeFCiTmSaQ/lAHJNT1KOHCAXkX4SgPr6yf75+ifCLij/DP6xBBBtpx1sPu2g/fQi
O41az9Fu6qHfUzZV04O0ku6jdehpJjR30nQUE/T3sRy9h4rpEfT7CB2G75W0ivZQFnPpn9JqWisd
Ra21lEoDqYKm0hK6i03Sr6dZ9IF8K5XSJLqW2lhUb9Dv1u/VH6df0W7p9/pZSqFcmotyWP/c9Cf9
z1SEGvfTFvqA3Zu0k0LoJQrPX9J1tFVqlJl+jf4vjMBHN2AMMk2mw6yXB9F6C51kLrZSqkIrj+ma
fhBebmqkVtpKe9hINoH7TLP0yfphRLKIbkSrW6iLdqHE6AV6l9lMp/XH9dOUQ4V0KebTQ6+zXqn/
7Jr+csTNhCgNpjGwLKHf0Mv0BvOz3/IlJpupxBQy3aS/TRk0jOox2idR82/sa74KZbX0klyjV1Ia
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
bW7RIv6Wam2uv1rtHGfU+zfzLGEe56/upFnhuobOWaGW6q5xoXFhf3N1pHvC1BGlF/R15/m+Rkz9
kb6misZGiL4mGPX+ra9SYZ4g+ioVfZWKviaEJhh9kZHjUxs6rVQZwRWOQbt5SjLytSnPF6nMUtrG
G8k7zudalbcHLyTbKQXXVjZcdKYCRF4XVRRVCBP2lDCliTvQhMm1apwvbw/bnjApUKf7Kym47Pr2
68kVnl8d/2vHD6pl14uliOOg0P3oDy5hXGdWty8jqtUKZtRq5bjV6rRYoG2qjkA39pwuJSWMb/C4
cgiUY4WjJJ13FLoyoUtKSjj+Zy4YY4Ia0dmNF4293SzkYcuoPSJpnto6jqOgbibCgLuwPXhdEg+J
9ggm2I5/fbSfa03MI0hxiTDl9nOw7PoEl4jDsgQ1XEWV9nPhONdUUESJ/g9Wv1i/CmVuZHN0cmVh
bQplbmRvYmoKNjggMCBvYmoKNTUwNwplbmRvYmoKNjkgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNj
cmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMy
Ci9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9UWUxVTEwrQXJpYWxN
VCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhl
aWdodCA1MjUgL0ZvbnRGaWxlMiA2NyAwIFIgPj4KZW5kb2JqCjcwIDAgb2JqClsgNTU2IDAgNTU2
IDAgMCA1NTYgXQplbmRvYmoKMTggMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVU
eXBlIC9CYXNlRm9udCAvVFlMVUxMK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjY5IDAgUiAvV2lk
dGhzIDcwIDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFu
RW5jb2RpbmcKPj4KZW5kb2JqCjcxIDAgb2JqCjw8IC9MZW5ndGggNzIgMCBSIC9MZW5ndGgxIDcz
NzIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgLfFPV/f+dc28ebZM2LX2kbWhu
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
PhMkUH9AKmH/8NcIvVRSGQhUR9hs3Y8U9hn8kDEg8DPnkCL8SDHnRP32RP1yUR9+QwWBX1wc5ep+
uXFxup/MhF9X51B/ZddQIPhkKNSp+3RmKN/3OZoLn1wg+KQH6ajuczQ9KHzUEr0ZhwMuOUBwYbiz
1V0cLEt30UfepbsUxFzuHnC5W+9Jio5G9xEIzVjPXvaxnoXP9wL539m2cq+XdU8KtDT4cQ3S5Pa3
AZrULSvb7WpwnqJ0tQSEAbcRnqZ5Le2CNrepAXdbpdrirlS6Jun1/s3cIMyT3JVd1OCvre9q8LVV
hif5JvndzZWB7skzxhZd0dfdA32NnfEDfc0QjY0VfU3W6/1bX0XCPFn0VST6KhJ9TfZN1vsiPcdn
1HeZqTyAT3WddvOEeORrU7YrUJ5u6yjRk3eSy74u+yBeSPZRAq4nLLjQsgJEXueX5ZcJE/aUMCWK
u66Yyb5ukiv7INsXM9mgTnaXk3f5is4VZPcvqIz+OvFAtXyFWIoo9grdDz5w8ePaqrJzOVG1OmJW
tVqK24sukwnapsoAdBMv6xIS/Ph4iSpHQjlROErSgKPQFQtdXFzM8T9zQR8T1IjOAbxoHOpmvhy2
nDoDkppTXctxFNTOQRhw53EQr0viT6IzgAl24oq783JrYh5eikqEKXdehuUrYlwsDstjVHcVVTov
h+NyU14RJfp/rTjFIgplbmRzdHJlYW0KZW5kb2JqCjcyIDAgb2JqCjUxMDkKZW5kb2JqCjczIDAg
b2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAv
RGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9G
b250TmFtZSAvSFFRRFlUK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcg
MzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNzEgMCBSID4+CmVuZG9i
ago3NCAwIG9iagpbIDU1NiAwIDAgNTU2IF0KZW5kb2JqCjE5IDAgb2JqCjw8IC9UeXBlIC9Gb250
IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0hRUURZVCtBcmlhbE1UIC9Gb250RGVzY3Jp
cHRvcgo3MyAwIFIgL1dpZHRocyA3NCAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNTEgL0Vu
Y29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago3NSAwIG9iago8PCAvTGVuZ3RoIDc2
IDAgUiAvTGVuZ3RoMSA3MDQwIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZC3hU
1bVee58zj0wmmcnkNckMmTOZZIBMQiA8Qh5NJo8J2IgkEGiGgiRAJEGQYADFizC0IjqiWGup0FZs
bSvWKicP0uHRSxRqWxSx1tJqK6DSC/ZrBPtVrVVy7r/PhFR6/XpnZ73Xfq299j5nnxAjIitFSKLg
8jXt3WSmb0LzMsC5fON6ZXf3axvBXyAyTr6le+Wa1ic/qCEypREZfrNy9aZbnh+cdTcauETET3R2
tK/48A/jokS2n6LOjE4oHGus90BGfcrrXLP+TgsxL5HdDNm8eu3ydraMZkC2Qzauab+zW45YvwXZ
CVm5rX1NxxtJ7eshzxRy99qe9doO2g25FbK/+/aO7nkjJ96DHCGyaNAxFPGzkhFAtEloDIcpC5Bt
eIqyZD+hbe0iAGPWLo50aZeEXVD+F9SIjQLRfnqWddGzdIxeYFdQ6wAdogH6FWVSPX2XNtOjtAO9
LILmfpqHYoD+UZalDVAxfR/x/D6dgu9XaAsdpgzm1N6jrbRd+i1qbackyqUaaqK19CC7UdtAi+mc
/HUqpRvpNupmEa1Ve0h7RPsh/YgOSb/SrlIiZdNylFPa+4Y/aH+iItT4Fu2hc+yRhIMURC8ReH6P
bqe90hKZaSu1f2IEXroDY5BpDp1iQzyA1jvoInOyzVIdWnlSU7UT8HLTEuqkvXSYTWezuNewWJuj
naIM9HEnWt1DfTSIEqOf05vMarii/VC7QllUSDdgPgP0ChuSRq5uG6lG3AyI0kQqg2Ut/Tf9kl5l
PvY8X2uwGkoMQcNd2uuURlNoAUb7FGr+D/uYb0HZKr0oN2i1lIy4fENEm35Bb7NsVszmsoV8Il/L
H5duR14Wou4UWkFdiPdjaP0sC7BBbuWnpSflZ+RPjeNGzmvJWBE/fYe+R8+zJMxUYT3sa+wMe5fX
8aX8O/wd6VH5afk1UztmfTOtoQfpGfqYOdhM1sy+yjrZZraDfYPtYafYq+wSr+Et/FZ+WeqU1kk/
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
qj4cboyxhbofKewD+CFjQOBnziFF+JFizon77Y375aM+/PIEgV9CAuXrfvkJCbqfzIRfb09eqL43
Dwg+mQr16D49mcrnfU7mwycfCD4ZETqp+5zMiAgftUpvxu2GSw4QXBi+N+oubpatu+gj79Vdikdd
7h9zuV/vSYqPRvcRCM0knb/mk3QePp8L5H9mO2oDAdZfEV6+OIQrfJsv1AFoUx/Y2OlUI8sUpXd5
WBhwk/a3LVveKWh7hxr2ddSry331Sm+FXu/fzIuFucJX30uLQy2tvYuDHfV9FcGKkK+9Ptw/q2la
6XV93T/W17SmL+irSTQ2TfQ1S6/3b32VCvMs0Vep6KtU9DUrOEvvi/Qcb2rtNVNtGG+pOu3niRbk
a5vLG67NsHdX6clb4XVucR3GC8l+SsTV2oqPMUkAkddFNUU1woQ9JUzJ4jvNqMm5pcLrOsz2j5rs
UKf4aimwfkPPBnKGuurjfz34QbV+g1iKOA4I3Rf+4BLCJ5f6HvyHp1EtwDt3Nd65e00maNvqw9CV
X9MlJoZwtYwrJ0FZLhwlacxR6CqFLiFh1PH/5oI+Jqj1d/gIP9LPgjlsPfWEJTWnsYXjKGhZhDDg
vn4Yr0viIdETxgR78Hm251prYh4BikuEKfdcg/UbRrnROKwfpbqrqNJzLRzXmgqIKNH/Apf8THQK
ZW5kc3RyZWFtCmVuZG9iago3NiAwIG9iago0OTA4CmVuZG9iago3NyAwIG9iago8PCAvVHlwZSAv
Rm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAv
RmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1BTTEdR
VCtBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAy
MDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDc1IDAgUiA+PgplbmRvYmoKNzggMCBvYmoKWyA1
MDAgXQplbmRvYmoKMjIgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9C
YXNlRm9udCAvUFNMR1FUK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjc3IDAgUiAvV2lkdGhzIDc4
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
4SM0LhwG4TihKEkDikI2QcgSEvoV/zMXDJsghnf24kVjfxcL5rLl1B6WtNzqGo6joGY23IC7q314
XRI/Eu1hLLAd/6poPz+aWEeA4jXCktvPw/IV/Vy/H5b3U0NVdGk/747zQwWEl+j/AHSDR84KZW5k
c3RyZWFtCmVuZG9iago4MCAwIG9iago1NDM4CmVuZG9iago4MSAwIG9iago8PCAvVHlwZSAvRm9u
dERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxh
Z3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1pEVUJZVCtB
cmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAw
IC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDc5IDAgUiA+PgplbmRvYmoKODIgMCBvYmoKWyA1NTYg
MCAwIDU1NiAwIDU1NiBdCmVuZG9iagoyMCAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAv
VHJ1ZVR5cGUgL0Jhc2VGb250IC9aRFVCWVQrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKODEgMCBS
IC9XaWR0aHMgODIgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDUzIC9FbmNvZGluZyAvTWFj
Um9tYW5FbmNvZGluZwo+PgplbmRvYmoKODMgMCBvYmoKPDwgL0xlbmd0aCA4NCAwIFIgL0xlbmd0
aDEgNzQ4OCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAl8VNW5/865d5bskxAm
k2SYuZMhA2QSA2EJhJhMlgnYAAkkwQwlkkAiYZNA2ESWoRWXgEB9lgpacakVtcjNIg5LH1HQtihC
1VK1Cqi0qL9GsD/FWiH3/c+dgYLP13fPfPt3tu9859w7hxgRxVKQJPLNWdTURnE0HZo3AI45K5Yp
29veWgH+70TG4be3zV1U/9SXJUQmO5Hhj3MX3nn7grtOb0MDF4nkVa0tTc2XZOdZosRW1BnTCkXS
otiNkB+HPLh10bJV8X9jT0I+Cjl24eI5TSyDL4V8ErJ5UdOqNnlD7M8hvwtZuaNpUct7MXNnQv6n
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
+FwXyP/MtpTiw797fGDOTD+uXhrd/hZAo7ppRatNDc5WlM45AWHADYincfacVkGbWtSAu6VcneMu
VzrH6/W+Z54pzOPd5Z00019b3znT11LeNd433u9uKg90T6gelX9DX/df62tU9Q/0VS0aGyX6mqDX
+15f+cI8QfSVL/rKF31N8E3Q+yI9x6vrO81UGsD1gE67eUw08rUx3RUotVraivTkHe+yrUs/gA+S
3RSDK5FYXKLFAURe55TklAgT9pQwxYv7tYjJtm68K/0A2x0xWaBOdJeSd9ny9uVk888rD//a8UC1
bLlYijD2Ct0PPnDx46qsvH0ZUaWaVVOpFuPGpNNkgraxPABdwVVdTIwfH+1h5U1QFghHSbrmKHSF
QhcVFXH837mgjwlqRGc/PjQOdjOfgy2j9oCkOiprOY6C2hkIA+5ZDuBzSbwk2gOYYDuu1duvtibm
4aWwRJhy+1VYtjzCReKwLEJ1V1Gl/Wo4rjblFVGi/wGag+n8CmVuZHN0cmVhbQplbmRvYmoKODQg
MCBvYmoKNTE4NAplbmRvYmoKODUgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2Nl
bnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBb
LTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9UQUxFU04rQXJpYWxNVCAvSXRhbGljQW5n
bGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0Zv
bnRGaWxlMiA4MyAwIFIgPj4KZW5kb2JqCjg2IDAgb2JqClsgNTU2IDAgMCA1NTYgXQplbmRvYmoK
OCAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9UQUxF
U04rQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKODUgMCBSIC9XaWR0aHMgODYgMCBSIC9GaXJzdENo
YXIgNTQgL0xhc3RDaGFyIDU3IC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoK
MSAwIG9iago8PCAvVGl0bGUgKFF1YXJ0eiAlZCkgL0NyZWF0b3IgKFF1YXJ0eiBSIERldmljZSkg
L1Byb2R1Y2VyIChNYWMgT1MgWCAxMC41LjQgUXVhcnR6IFBERkNvbnRleHQpCi9DcmVhdGlvbkRh
dGUgKEQ6MjAwODA4MDkxNTExNTFaMDAnMDAnKSAvTW9kRGF0ZSAoRDoyMDA4MDgwOTE1MTE1MVow
MCcwMCcpCj4+CmVuZG9iagp4cmVmCjAgODcKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDg3NDk1
IDAwMDAwIG4gCjAwMDAwMDA5MTIgMDAwMDAgbiAKMDAwMDAwMjMzNSAwMDAwMCBuIAowMDAwMDAw
MDIyIDAwMDAwIG4gCjAwMDAwMDA4OTMgMDAwMDAgbiAKMDAwMDAwMTAyNSAwMDAwMCBuIAowMDAw
MDAyMjk5IDAwMDAwIG4gCjAwMDAwODczMjQgMDAwMDAgbiAKMDAwMDAyNDIyNyAwMDAwMCBuIAow
MDAwMDEzMTQxIDAwMDAwIG4gCjAwMDAwNDcwNzQgMDAwMDAgbiAKMDAwMDAzNTc2OCAwMDAwMCBu
IAowMDAwMDE4NDAzIDAwMDAwIG4gCjAwMDAwNTg0MjIgMDAwMDAgbiAKMDAwMDA0MTIwMiAwMDAw
MCBuIAowMDAwMDMwMDM2IDAwMDAwIG4gCjAwMDAwNTI3NzcgMDAwMDAgbiAKMDAwMDA2NDQ4NSAw
MDAwMCBuIAowMDAwMDcwMTQ0IDAwMDAwIG4gCjAwMDAwODE1OTAgMDAwMDAgbiAKMDAwMDAwNzcw
NSAwMDAwMCBuIAowMDAwMDc1NTk0IDAwMDAwIG4gCjAwMDAwMDEzMzkgMDAwMDAgbiAKMDAwMDAw
MTM4NCAwMDAwMCBuIAowMDAwMDAyMjc5IDAwMDAwIG4gCjAwMDAwMDI0MjcgMDAwMDAgbiAKMDAw
MDAwMjQ5MSAwMDAwMCBuIAowMDAwMDA3NDI1IDAwMDAwIG4gCjAwMDAwMDc0NDYgMDAwMDAgbiAK
MDAwMDAwNzY4MSAwMDAwMCBuIAowMDAwMDA3ODc5IDAwMDAwIG4gCjAwMDAwMTI4NTcgMDAwMDAg
biAKMDAwMDAxMjg3OCAwMDAwMCBuIAowMDAwMDEzMTEzIDAwMDAwIG4gCjAwMDAwMTMzMTMgMDAw
MDAgbiAKMDAwMDAxODEyMyAwMDAwMCBuIAowMDAwMDE4MTQ0IDAwMDAwIG4gCjAwMDAwMTgzNzkg
MDAwMDAgbiAKMDAwMDAxODU3NSAwMDAwMCBuIAowMDAwMDIzOTQzIDAwMDAwIG4gCjAwMDAwMjM5
NjQgMDAwMDAgbiAKMDAwMDAyNDE5OSAwMDAwMCBuIAowMDAwMDI0Mzk4IDAwMDAwIG4gCjAwMDAw
Mjk3NDIgMDAwMDAgbiAKMDAwMDAyOTc2MyAwMDAwMCBuIAowMDAwMDI5OTk4IDAwMDAwIG4gCjAw
MDAwMzAyMDggMDAwMDAgbiAKMDAwMDAzNTQ3NiAwMDAwMCBuIAowMDAwMDM1NDk3IDAwMDAwIG4g
CjAwMDAwMzU3MzIgMDAwMDAgbiAKMDAwMDAzNTk0MCAwMDAwMCBuIAowMDAwMDQwOTE4IDAwMDAw
IG4gCjAwMDAwNDA5MzkgMDAwMDAgbiAKMDAwMDA0MTE3NCAwMDAwMCBuIAowMDAwMDQxMzc0IDAw
MDAwIG4gCjAwMDAwNDY3ODYgMDAwMDAgbiAKMDAwMDA0NjgwNyAwMDAwMCBuIAowMDAwMDQ3MDQy
IDAwMDAwIG4gCjAwMDAwNDcyNDYgMDAwMDAgbiAKMDAwMDA1MjQ5MSAwMDAwMCBuIAowMDAwMDUy
NTEyIDAwMDAwIG4gCjAwMDAwNTI3NDcgMDAwMDAgbiAKMDAwMDA1Mjk0OSAwMDAwMCBuIAowMDAw
MDU4MTMwIDAwMDAwIG4gCjAwMDAwNTgxNTEgMDAwMDAgbiAKMDAwMDA1ODM4NiAwMDAwMCBuIAow
MDAwMDU4NTk0IDAwMDAwIG4gCjAwMDAwNjQxOTEgMDAwMDAgbiAKMDAwMDA2NDIxMiAwMDAwMCBu
IAowMDAwMDY0NDQ3IDAwMDAwIG4gCjAwMDAwNjQ2NTcgMDAwMDAgbiAKMDAwMDA2OTg1NiAwMDAw
MCBuIAowMDAwMDY5ODc3IDAwMDAwIG4gCjAwMDAwNzAxMTIgMDAwMDAgbiAKMDAwMDA3MDMxNiAw
MDAwMCBuIAowMDAwMDc1MzE0IDAwMDAwIG4gCjAwMDAwNzUzMzUgMDAwMDAgbiAKMDAwMDA3NTU3
MCAwMDAwMCBuIAowMDAwMDc1NzY4IDAwMDAwIG4gCjAwMDAwODEyOTYgMDAwMDAgbiAKMDAwMDA4
MTMxNyAwMDAwMCBuIAowMDAwMDgxNTUyIDAwMDAwIG4gCjAwMDAwODE3NjIgMDAwMDAgbiAKMDAw
MDA4NzAzNiAwMDAwMCBuIAowMDAwMDg3MDU3IDAwMDAwIG4gCjAwMDAwODcyOTIgMDAwMDAgbiAK
dHJhaWxlcgo8PCAvU2l6ZSA4NyAvUm9vdCAyNiAwIFIgL0luZm8gMSAwIFIgL0lEIFsgPDFiYWNl
ODVmNDQ3YzMxOTU2NjNjYTJmYjc2MmY4MjYyPgo8MWJhY2U4NWY0NDdjMzE5NTY2M2NhMmZiNzYy
ZjgyNjI+IF0gPj4Kc3RhcnR4cmVmCjg3NjgzCiUlRU9GCg==

--Apple-Mail-30--530209534
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed
Content-Transfer-Encoding: 7bit




But if I plot from 95-205, it seems to occur at 177-178
 > plot(x,y, type="l", xlim=c(95,205))
 > abline(v=177)
 > abline(v=178)

--Apple-Mail-30--530209534
Content-Disposition: inline;
	filename="x-y line plot 95-205.pdf"
Content-Type: application/pdf;
	x-unix-mode=0644;
	name="x-y line plot 95-205.pdf"
Content-Transfer-Encoding: base64

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
/nKnml11IJe3TlH93el8uVNpMIvM/JdTNPrklEH5jHPS9YpjYQRN2CW2h0GX0dlC2J/kxu3j8BzB
m1f+7lDr+LgW3ZnzUvR4fDfcY+bpcX7FtfH8+G54InrQKUrd19JL9NOeek+hjtH30XaufTc883Hu
XtyHL7Vztw/D82pnXWASMk332s+GZ9V+Pub98bPhicelidA7b5IL/dN3L4xNUMS4beMQgsEd4gTE
ezB83J+W6cGWGg7ZbE8O2xd71Jcsg5F/9Mjx7wS8y5VHk9S9bgxW36NMcn/dfX55mloYB+w7+bxo
731OP5on3w2wT9V+8nmRXjalOzrxuE8WrWHt1E5uQXvtfFX1pT5Z2frq5qc8L8rrz8rzSMqrIcsX
aTgcl4VGG12YjlJ3vBseH4uf14aznyMd7u1ez5u5p3ZezVy+ezlekfm2ioWVG/wRTJcJ8dfL28li
rK/jdKvjGnbyeBkPf188qqxT6Y99Lavvb2++lj38Ccxf+rXs+dJ37iuXuNNF8HDV/CdHzvkmeO1k
vx3uTk7q+dM/MmeSQQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKMjE1OAplbmRvYmoKMiAwIG9i
ago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDMgMCBSIC9SZXNvdXJjZXMgNiAwIFIgL0NvbnRlbnRz
IDQgMCBSIC9NZWRpYUJveCBbMCAwIDY2My45MzcgNDE5LjkwNTVdCj4+CmVuZG9iago2IDAgb2Jq
Cjw8IC9Qcm9jU2V0IFsgL1BERiAvVGV4dCBdIC9Db2xvclNwYWNlIDw8IC9DczEgNyAwIFIgPj4g
L0V4dEdTdGF0ZSA8PCAvR3MxCjI0IDAgUiA+PiAvRm9udCA8PCAvRjUuMCAxMiAwIFIgL0YxMi4w
IDE5IDAgUiAvRjE0LjAgMjEgMCBSIC9GOC4wIDE1IDAgUiAvRjE2LjAKMjMgMCBSIC9GMi4wIDkg
MCBSIC9GOS4wIDE2IDAgUiAvRjcuMCAxNCAwIFIgL0YxLjAgOCAwIFIgL0YxMS4wIDE4IDAgUiAv
RjMuMAoxMCAwIFIgL0Y0LjAgMTEgMCBSIC9GMTAuMCAxNyAwIFIgL0Y2LjAgMTMgMCBSIC9GMTMu
MCAyMCAwIFIgL0YxNS4wIDIyIDAgUgo+PiA+PgplbmRvYmoKMjQgMCBvYmoKPDwgL1R5cGUgL0V4
dEdTdGF0ZSAvY2EgMCA+PgplbmRvYmoKMjUgMCBvYmoKPDwgL0xlbmd0aCAyNiAwIFIgL04gMyAv
QWx0ZXJuYXRlIC9EZXZpY2VSR0IgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhZRN
SBRhGMf/s40EsQbRlwjF0MEkVCYLUgLT9StTtmXVTAlinX13nRxnp5ndLUUihOiYdYwuVkSHiE7h
oUOnOkQEmXWJoKNFEAVeIrb/O5O7Y1S+MDO/eZ7/+3y9wwBVj1KOY0U0YMrOu8nemHZ6dEzb/BpV
qEYUXCnDczoSiQGfqZXP9Wv1LRRpWWqUsdb7NnyrdpkQUDQqd2QDPix5PODjki/knTw1ZyQbE6k0
2SE3uEPJTvIt8tZsiMdDnBaeAVS1U5MzHJdxIjvILUUjK2M+IOt22rTJ76U97RlT1LDfyDc5C9q4
8v1A2x5g04uKbcwDHtwDdtdVbPU1wM4RYPFQxfY96c9H2fXKyxxq9sMp0Rhr+lAqfa8DNt8Afl4v
lX7cLpV+3mEO1vHUMgpu0deyMOUlENQb7Gb85Br9i4OefFULsMA5jmwB+q8ANz8C+x8C2x8DiWpg
qBWRy2w3uPLiIucCdOacadfMTuS1Zl0/onXwaIXWZxtNDVrKsjTf5Wmu8IRbFOkmTFkFztlf23iP
Cnt4kE/2F7kkvO7frMylU12cJZrY1qe06OomN5DvZ8yePnI9r/cZt2c4YOWAme8bCjhyyrbiPBep
idTY4/GTZMZXVCcfk/OQPOcVB2VM334udSJBrqU9OZnrl5pd3Ns+MzHEM5KsWDMTnfHf/MYtJGXe
fdTcdSz/m2dtkWcYhQUBEzbvNjQk0YsYGuHARQ4ZekwqTFqlX9BqwsPkX5UWEuVdFhW9WOGeFX/P
eRS4W8Y/hVgccw3lCJr+Tv+iL+sL+l3983xtob7imXPPmsara18ZV2aW1ci4QY0yvqwpiG+w2g56
LWRpneIV9OSV9Y3h6jL2fG3Zo8kc4mp8NdSlCGVqxDjjya5l90WyxTfh51vL9q/pUft89klNJdey
unhmKfp8NlwNa/+zq2DSsqvw5I2QLjxroe5VD6p9aovaCk09prarbWoX346qA+Udw5yViQus22X1
KfZgY5reyklXZovg38Ivhv+lXmEL1zQ0+Q9NuLmMaQnfEdw2cIeU/8NfswMN3gplbmRzdHJlYW0K
ZW5kb2JqCjI2IDAgb2JqCjc5MgplbmRvYmoKNyAwIG9iagpbIC9JQ0NCYXNlZCAyNSAwIFIgXQpl
bmRvYmoKMyAwIG9iago8PCAvVHlwZSAvUGFnZXMgL01lZGlhQm94IFswIDAgNjYzLjkzNyA0MTku
OTA1NV0gL0NvdW50IDEgL0tpZHMgWyAyIDAgUiBdCj4+CmVuZG9iagoyNyAwIG9iago8PCAvVHlw
ZSAvQ2F0YWxvZyAvUGFnZXMgMyAwIFIgL1ZlcnNpb24gLzEuNCA+PgplbmRvYmoKMjggMCBvYmoK
PDwgL0xlbmd0aCAyOSAwIFIgL0xlbmd0aDEgNzc5NiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+Pgpz
dHJlYW0KeAGFWQl4VNX1P/e+N0uSCTNJyDpD5k0mGSWTkBCWQIjJZJkARvbEZiiRhBAJmwTCahEG
lcUAgv4tAm0Fa1XUqi+LOCAtUaitKGLF0ootIKWKfkWwH2qtmPf/3TeTCK1f+27Ofu527rl33rsh
RkQWCpJEvqaFja0UT/XQvAW4uWn5UmVH67vLwV8lMubf2TpnYd0Tn5cRmTKJDL+fs2DVncknz1jQ
wD8h72xpbpz9ZbSykih+O+qMbIEifqFlA+TfQc5sWbh0ZUKAb4T8d8i2BYuaGqVzLAT5GuTohY0r
W+X7LD8mSjBDVu5qXNh8wrHoTsg3C7l1UdtS7Yf0LORxkLNblzS3Tu09+gnkpaiuQcdQxGMhIzlA
8ykKGq7r+pBkOEipgDTD05QqeyiFSPsYcFHQ3rnaRWEXlH+KKhidDkT76Hk2l56nw/Qau4JaL9IB
6qbfUTJV0k9pNT1CG9HrdGgeoKkoBugfYalaN+XR44jv43Qcvj+gNXSQkliK9gmtpfXSSdRaT7GU
QWU0mRbRVnabtoxm0Fn5Piqk2+guamVBrU57UHtY+wU9SQek32nfUgylURPKce0zw5+0P1MuavyY
dtFZ9nDUS+RDL0F4/oyW0G6pXmbaHO1fGIGLVmAMMk2g46yHe9F6M33MUthqqQKtPKGp2lF4OZAB
LbSbDrIRbCx3GWZoE7TjlIQ+VqLVXdRJ+1FC9Cs6zSyGK9ovtCuUSjk0HvPpprdZj9T77breUsTN
gCgNptGwLKJf02/pHeZmr/JFBouhwOAz3K29RwNpKNVitE+j5kfsK74GZa30ulylldMAxOUhEW36
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
eZcua1tGKf65leG/NjxQLV0mliKMvUL3vQ9c/LhWrGzDfyyr1exp1Wopbpc6TCZoGyoD0BX16WJi
/HixDyuHQFkkHCWp31HoioUuKiri+J+5oI8JakTnAF40XulivnS2lNoCkppeXcNxFNRMRxhwJ3UQ
r0viR6ItgAm24V8QbX2tiXl4KSwRptzWB0uXRbhIHJZGqO4qqrT1haOvKa+IEv0/LKZA0AplbmRz
dHJlYW0KZW5kb2JqCjI5IDAgb2JqCjUzNDcKZW5kb2JqCjMwIDAgb2JqCjw8IC9UeXBlIC9Gb250
RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFn
cyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvWlJCVlVHK0Fy
aWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAg
L1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgMjggMCBSID4+CmVuZG9iagozMSAwIG9iagpbIDU1NiA1
NTYgMCAwIDAgMCAwIDAgNTU2IF0KZW5kb2JqCjEyIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0
eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL1pSQlZVRytBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgoz
MCAwIFIgL1dpZHRocyAzMSAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNTYgL0VuY29kaW5n
IC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iagozMiAwIG9iago8PCAvTGVuZ3RoIDMzIDAgUiAv
TGVuZ3RoMSA3OTEyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZCXxU1dU/9743
S5JJ5iWTZZIMM28YMkomIRCWsEQyWSagAdkSzdBEEiASNgkGUSzCoCIaUNAqFWrFrQpa9GUBh8WS
CtWKIiqWVm0VLRb1awT7odYqed//vhlQWn/95ubs527nnnvfezfEiMhGEZIoOGdxcxspdBU0rwEG
zlm+TN3c9tZy8GeIzEOvbZu3uP7xL8qJLCqR6c15i1Zc+z+BgsVo4CzsSmtL89wv/1e9icgho86o
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
OCAxMDA2XSAvRm9udE5hbWUgL0pUUVBMTStBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgow
IC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDMyIDAg
UiA+PgplbmRvYmoKMzUgMCBvYmoKWyA1NTYgMCA1NTYgMCAwIDU1NiBdCmVuZG9iagoxOSAwIG9i
ago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9KVFFQTE0rQXJp
YWxNVCAvRm9udERlc2NyaXB0b3IKMzQgMCBSIC9XaWR0aHMgMzUgMCBSIC9GaXJzdENoYXIgNDgg
L0xhc3RDaGFyIDUzIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKMzYgMCBv
YmoKPDwgL0xlbmd0aCAzNyAwIFIgL0xlbmd0aDEgNzgzMiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+
PgpzdHJlYW0KeAGFWQt8U0XWPzP35tE2adL0lbahuSE0SNNSKGB5SdNHilqQV4sNS20LrZSXFMvT
RQgooAEB+ZQV1hXf4vq6TSsG0KUKqyuKqLjsqruKLuvrtxXcH+rnKr3ff25KlV1/+93pecyZMzNn
zjkzuXdKjIgsFCaJAnMXN7WRg2ogeR0wcO6KZcqutrdXgD9HZBx2fdu8xXUPfVVGZFKIDG/NW7T6
+re2fPMiBjiPendrS1PzNxZlJZGjC30ub4XAsdiyCfV/oD6odfGyVakhDjbVDmRftGRuk3Sej0Zd
QT1xcdOqNnmD5W7UC1BXbmha3PLJgNZfoj5J1NuWtC/T6uhJ1Behnt92Y0vb9N6jn6N+D7prkDEU
8VjISBmgw0DjEjGtBCsPUhYg2/AYZck+chJpnwI+E7R3vvaZaBeUfwH9WB8Q7aOn2Hx6ig7TS+wc
ej1DB6iL/kCZVEn30hq6izZjplmQ3E7TUQyQ38WytC4qogcw7wN0HLrX0lo6SBnMqX1O62ijdBK9
NpKVBlIZTaUldAebpC2n2fShfAuV0CS6gdpYWKvTtmk7tYfpETog/UG7QEmUTXNRjmtfGv6s/YUK
0eNu2k0fsp0Jz1IAs4Sh+Ru6kfZI9TLT5mn/ggUeWgkbZJpMx1k392P0FvqUOdkaqQKjPKSp2lFo
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
cr+fdY4LzZ0dxHVWozfYAmhUt6xodarhOYrSMTckGnCr5GucM7dV0KYWNeRtqVTneiuVjnF6v39r
ni2ax3krO2h2sKauY3agpTI6LjAu6G2qDHVOnDqy5JK5bu+fa+TUn5lrqhhspJhrot7v3+YqEc0T
xVwlYq4SMdfEwER9LtJzfGpdh5nKQ7hy0WknT0pEvjbmeELlGfa2CXryjvM41+YcxAvJPkrCNZMF
F5NWgMjrwrLCMtGEPSWaksWdZV+Tc+04T85Btq+vyQ5xirec/MuWty8nZ3B+ZfyvHQ9Ey5aLUMSx
X8h+9oFKENePle3LiKrV/BnVailuoTpMJkgbK0OQjb0oS0oK4iM0LhwK4VihKEn9ikI2XsgSEvoU
/zMXdJsghncO4EXjUCcL5LJl1B6S1NzqGo6joGYW3IC7q4N4XRI/Eu0hLLAd/6povziaWIef4jXC
ktsvwrLlfVyfH5b1UV1VdGm/6I6LQ/mFl+j/AHPwR84KZW5kc3RyZWFtCmVuZG9iagozNyAwIG9i
ago1NDM4CmVuZG9iagozOCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5
MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1
IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1BZWVdYVStBcmlhbE1UIC9JdGFsaWNBbmdsZSAw
IC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZp
bGUyIDM2IDAgUiA+PgplbmRvYmoKMzkgMCBvYmoKWyA1NTYgMCAwIDU1NiAwIDU1NiBdCmVuZG9i
agoyMSAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9Q
WVlXWFUrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKMzggMCBSIC9XaWR0aHMgMzkgMCBSIC9GaXJz
dENoYXIgNDggL0xhc3RDaGFyIDUzIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRv
YmoKNDAgMCBvYmoKPDwgL0xlbmd0aCA0MSAwIFIgL0xlbmd0aDEgNzM0NCAvRmlsdGVyIC9GbGF0
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
QC0WjDYoUKv+n/hUP4Tr00v+6kPsU0ECDYekMvYP/wwhl8qqA4HaCLtF1yOFfQo9ZAwI9My5pAg9
Usy5Ub29Ub089IfeEEGgFxdHebpeXlycriczodfZMcRf3TkECDqZCnXoOh2Zyrd1TuRBJw8IOhlB
OqHrnMgICh21TB/G4YBKLhBUGO5kdRUHy9ZVdMs7dZWimMr9Ayr36zNJUWt0HYEwTOL5qzqJ56Hz
LUf+d7a10utlXeMDcxv9uOZodvtbAc3qlpVtdjU4R1E65wZEA24bPM1z5rYJ2tKqBtyt1epcd7XS
OV7v92/NjaJ5vLu6kxr9dQ2djb7W6vB433i/u6U60DVh2qiSa+a6f2CuUdO+Y65pYrBRYq4Jer9/
m6tENE8Qc5WIuUrEXBN8E/S5SM/xaQ2dZqoM4FNcp108IR752pzjClRm2NrL9OQd77Kvy+nBC8l+
SsD1gwUXVokAkdeFFYUVogl7SjQlibusWJN93XhXTg/bH2uyQZzsriTv8hUdK8juX1Ad/XXggWj5
ChGKKPYK2Xc+UPHjWqq6YzlRrZo/s1Ytx+1Ep8kEaXN1ALJxV2UJCX58S0WFwyAcJxQlaUBRyEqF
LC4upvifuaDbBDG8cwgvGoe7mC+XLaeOgKTm1tZxHAV1s+AG3Gn04HVJ/El0BLDADlxhd1wdTazD
S9EaYckdV2H5ihgX88PyGNVVRZeOq+64OpRXeIn+H+i+wCIKZW5kc3RyZWFtCmVuZG9iago0MSAw
IG9iago1MDkwCmVuZG9iago0MiAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2Vu
dCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFst
NjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL05GV0xDUytBcmlhbE1UIC9JdGFsaWNBbmds
ZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9u
dEZpbGUyIDQwIDAgUiA+PgplbmRvYmoKNDMgMCBvYmoKWyA1NTYgMCAwIDAgMCA1NTYgXQplbmRv
YmoKMTUgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAv
TkZXTENTK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjQyIDAgUiAvV2lkdGhzIDQzIDAgUiAvRmly
c3RDaGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5k
b2JqCjQ0IDAgb2JqCjw8IC9MZW5ndGggNDUgMCBSIC9MZW5ndGgxIDcwNDAgL0ZpbHRlciAvRmxh
dGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgLfFPV/f+dc28eTdMmTV9pE5qbpg3QtBTKow+6Nn2k4CrQ
QmENA2mBSosgxQKKQwhTRCOKc44J28TNbeKccvugC4/9qcLchiLOOba5CajsD+4zBPeZOqf0/r/n
pnTi/Oyfk9/7d16/8zvn3nOJEZGVIiRRcNnq9m4y0zeheRngXLZhnbKr+7UN4M8TGSfe3L1ideuT
79cQmdKIDL9ZsWrjzc8PzrgLDVwk4sc7O9qXf/CHnFwi209RZ1onFI7V1nsgoz7lda5ed4eFmJfI
boZsXrVmWTtbStMg2yEbV7ff0S1HrN+C7ISs3Nq+uuOMefZKyGVC7l7Ts07bTrsgt0L2d9/W0T13
+Pi7kCNEFg06hiJ+VjICiDYKjeEQZQGyDU9RluwntK1dAGDM2oXhLu2isAvK/4oasREg2kfPsi56
lo7SC+wKau2ngzRAv6JMqqfv0iZ6lLajl4XQ3E9zUQzQP8qytAEqpu8jnt+nk/D9Cm2mQ5TBnNq7
tIW2Sb9FrW2URLlUQ020hh5kN2rraRGdle+mUrqRbqVuFtFatYe0R7Qf0o/ooPQr7SolUjYtQzmp
vWf4g/ZnKkKNb9FuOsseSThAQfQSgef36DbaIy2WmbZC+xdG4KXbMQaZZtFJNsQDaL2DLjAn2yTV
oZUnNVU7Di83LaZO2kOH2FQ2g3sNi7RZ2knKQB93oNXd1EeDKDH6Ob3BrIYr2g+1K5RFhXQD5jNA
r7Ahafjq1uFqxM2AKI2ncljW0P/QL+lV5mPP8zUGq6HEEDTcqb1OaTSJ5mO0T6Hm/7KP+GaULdKL
coNWS8mIyzdEtOkX9BbLZsVsDlvAx/M1/HHpNuRlIepOouXUhXg/htbPsAAb5FZ+SnpSfkb+xDhm
+JyWjBXx03foe/Q8S8JMFdbDvs5Os3d4HV/Cv8Pflh6Vn5ZfM7Vj1jfRanqQnqGPmIOVsWb2VdbJ
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
XEMP4tPglVD9Qfa+IOHWg1IV+3tortBLVfXhcGOMLdD9SGHvww8ZAwI/cw4pwo8Uc07cb0/cLx/1
4ZcnCPwSEihf98tPSND9ZCb8envyQvW9eUDwyVSoR/fpyVQ+63MiHz75QPDJiNAJ3edERkT4qFV6
M243XHKA4MLwvVF3cbNs3UUfea/uUjzicv+oy/16T1J8NLqPQGgm6dw1n6Rz8PlMIP8721EbCLD+
6eFli0K4wrf5Qh2ANvWBDZ1ONbJUUXqXhYUBN2l/29JlnYK2d6hhX0e9usxXr/RO1+t9zrxImKf7
6ntpUailtXdRsKO+b3pwesjXXh/un9E0pfS6vu4f7WtK0xf01SQamyL6mqHX+1xfpcI8Q/RVKvoq
FX3NCM7Q+yI9x5tae81UG8Zbqk77eaIF+drm8oZrM+zdVXryTvc6N7sO4YVkHyXiam3Fx5gkgMjr
opqiGmHCnhKmZPGdZsTk3Dzd6zrE9o2Y7FCn+GopsG59z3pyhrrq4/8e/KBat14sRRwHhO4Lf3AJ
4ZNLfc86oka1AO/c1Xjn7jWZoG2rD0NXcU2XmBjC1TKunABlhXCUpFFHoasUuoSEEcf/zAV9TFDr
7/ARfrifBXPYOuoJS2pOYwvHUdCyEGHAff0QXpfEQ6InjAn24PNsz7XWxDwCFJcIU+65BuvWj3Aj
cVg3QnVXUaXnWjiuNRUQUaL/A7YcTHQKZW5kc3RyZWFtCmVuZG9iago0NSAwIG9iago0OTA2CmVu
ZG9iago0NiAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhl
aWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAy
OCAxMDA2XSAvRm9udE5hbWUgL0xHUUJCVitBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgow
IC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDQ0IDAg
UiA+PgplbmRvYmoKNDcgMCBvYmoKWyA1MDAgXQplbmRvYmoKMjMgMCBvYmoKPDwgL1R5cGUgL0Zv
bnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvTEdRQkJWK0FyaWFsTVQgL0ZvbnREZXNj
cmlwdG9yCjQ2IDAgUiAvV2lkdGhzIDQ3IDAgUiAvRmlyc3RDaGFyIDEyMSAvTGFzdENoYXIgMTIx
IC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNDggMCBvYmoKPDwgL0xlbmd0
aCA0OSAwIFIgL0xlbmd0aDEgNzY4MCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGF
WQl8VNXVP/e+N28mySSZyb4MM28YMkomIRCWAInJZJmARvZEMzSRhBAJmwTDIoowaBEMCtRaFGrF
rRUX9GUBJ0BLKlQrilChtGIrSLGoPxH8PpdaJe/73zchldZfv3dz9nO3c8+9894NMSKyUogk8jct
amwFPw2atwCOpuVL1a2t7ywH/xGRMvzW1rmLap/+vJTInEZk+sPchStv/em0QZvQwKeQh7c0N875
8n/VO4gSHKgzpgWKhEXW+yBXQx7SsmjpHYlB3goZPmRbuLipUXqRhSFvgBy9qPGOVvke688gPwxZ
va1xUfMxdfLNkLuF3Lq4baleQ89DPgE5u/X25tbpfYc+JkoU1XUghiIeKylkAx2OeTHiJJn2Ujog
w/Qspctewvj18wDMSz/fN0//SNgF5Z+gFkZkANFO2sXm0S46QK+yS6j1MvVQN/2eUqmCHqNV9DCt
R08zobmfpqOYoH+YpevdlEdPou8n6Qh8b6bVtJdSWJr+Ma2hddJx1FpHsTSYSmkqLaYH2Y36Mqqj
0/K9VEA30m3UykJ6rb5Jf0h/hn5JPdLv9csUQxnUhHJE/8z0Z/0vlIsaP6NtdJo9FLWb/OglBM9f
0O20XaqXmT5X/ydG4KYVGINMk+gI6+U+tN5M51kaWyWVo5WndU0/BC8H1VMLbae9bDSbwN2mOn2S
foRS0McdaHUbddIelDD9mk4xq+mS/ox+idIph67HfLrpbdYr9V1e21eCuJkQpaE0DpbF9Bt6nY4x
D/stX2yymvJNftOd+glKohFUg9E+i5p/Z1/z1ShrpNfkSr2M4hCXn4ho0+/oA5bB8tgUdhMfyhfz
x6XbyYIeR6DMoXmI96No/X3mY3u4lR+VnpZfkL9VBvWd0eOwIl76Of2CfstiMVOVtbF72En2N17O
Z/Gf87PSw/Jz8jvmRsz6FlpED9IL9DVLYGPZNPYj1sJWsfXsJ2wbO8KOsY94Ka/mC/hFqUVaIv1a
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
hquo0nYlHFea8oko0f8BKPYM9QplbmRzdHJlYW0KZW5kb2JqCjQ5IDAgb2JqCjUzMjMKZW5kb2Jq
CjUwIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0
IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEw
MDZdIC9Gb250TmFtZSAvSkhDWkRCK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xl
YWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNDggMCBSID4+
CmVuZG9iago1MSAwIG9iagpbIDU1NiA1NTYgNTU2IF0KZW5kb2JqCjkgMCBvYmoKPDwgL1R5cGUg
L0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvSkhDWkRCK0FyaWFsTVQgL0ZvbnRE
ZXNjcmlwdG9yCjUwIDAgUiAvV2lkdGhzIDUxIDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1
MCAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjUyIDAgb2JqCjw8IC9MZW5n
dGggNTMgMCBSIC9MZW5ndGgxIDcxMTIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngB
hVgLeBTV9T/3zszuJtlkNwHy2iU7y5JVsomB8AiEmGweG9DIO7G7NJgNSUp4STA8LcJSi+iiQv0r
ClrR2lasVScP6Qa1pGJtRRErllZsBSkt2q8I9qtai2b+vzu7RNP6tXP3d86555z7OvfM3ZkhRkRW
ipBE/taVLZ2UQtdB8xqQ27pujbq78811kN8nMo3/VueSlcHHPqoiMmcTKb9ZsmLjt17wXYqgg78R
SXJHe0vbJ1Z1A5HtItpM6YAiY6V1G5H9StTHdqxcsyHtL3wS6mIM64pVrS1sJIuhHkTdsrJlQ6e8
1Xof6mHU1RtbVrb/1tnagXpE1DtXda3RK+knqD+C+pWdN7V3zh986QPUf02UrEPHUMRlJROlgY8n
Dg3HbA9SDpCrPE45spcwf/0cgHXp5waX6u8Lu+D8r2iFGRkg2k9PsaX0FB2iF9lFtHqG+qmPfk1Z
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
ago1MyAwIG9iago0ODg4CmVuZG9iago1NCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3Ig
L0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRC
Qm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL05USFZVRytBcmlhbE1UIC9JdGFs
aWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUy
NSAvRm9udEZpbGUyIDUyIDAgUiA+PgplbmRvYmoKNTUgMCBvYmoKWyA1NTYgNTU2IF0KZW5kb2Jq
CjE2IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL05U
SFZVRytBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo1NCAwIFIgL1dpZHRocyA1NSAwIFIgL0ZpcnN0
Q2hhciA0OCAvTGFzdENoYXIgNDkgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9i
ago1NiAwIG9iago8PCAvTGVuZ3RoIDU3IDAgUiAvTGVuZ3RoMSA2ODg0IC9GaWx0ZXIgL0ZsYXRl
RGVjb2RlID4+CnN0cmVhbQp4AYVZC3hTRfY/M/fm0TYlaYG+UpobQqM0rYUCFtrapo8UtDxL0YQt
klIq5SXF8nQRwiqCQQH5Kwo+8LEq6Kq3acUUcaniY0URV11cUQGRXXC/RXC/VddVe/+/uQlVXL/d
O/2dOefMmdeZM5M7t8SIyEIhksjbvLCpjcx0FTRvARnNy5Yo29reXQb+FJFx2HVtcxb6H/2yksg0
gMjwxzkLVl73lf9MKRo4Q8QvbW1pmv21RVlBZLWhzuWtUKQutNwCeRzkIa0Ll6xIbGfTIC+AbF6w
qLmJDaDLIS+BbFzYtKJNDlnuhrwKsnJ908KWEwMCN0C+X8hti9qXaOW0DfI+yO62G1ra6ntf+Rwy
xpeoQceQxGMhI0A0TGgMeykTyDI8QZmymzKItNMAxqyd7p2rnRHlIud/Q41oHES76Gk2l56m/fQy
O49az1I3ddEfKJ1q6H5aRXfRevQyHZrbqB7JAP1dLFProkJ6GP58mA7B9hpaTXspjWVon9MaWie9
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
GRkR0Pjl0nkbThim//CIc42ZOS7Yan+pjtdNrWJ1ak8z1c1S1K+nuqIsccp01eCqYmpqHdU1VKmj
PXVRk1avFnvqVNPkX/k7GNsUgFblG6IM74pRpgnVOru4yXUTYynr7rCL/NJ1dwQClJG2rCKjIrU8
ZUxtzS+QoK4M1uCV6cKTcYFBnuEZpG6rm+pXnxwUUIsEow0K1Kn/J6563fj8dt5X082+FFnA3y2V
s3/46oVeKq8JBOqi7GrdjhT2JewQMchgZ84hRdiRYs6J2e2I2eWiPuyGiAx2CQmUq9vlJiTodjIT
dh3tQ3w1HUNAYJOuULtu056u/NTmYC5sckFgkxaig7rNwbSQsFHL9Ways2GSAwIThm96ukk2y9JN
9JF36CaFcZPb+kxu03uSYqPRbQRBM8knLtgkn4DNTxz539mWKo+HdZYGmht9uCYHXb4WIKhuXNaa
oYZmKUpHc0AU4LbqDs5qbhV5U4sacLXUqM2uGqWjVK/3s+JGUVzqqumgRl+Dv6PR21ITKfWW+lxN
NYHOsZNHFl/U1219fY2c/At9TRaNjRR9jdXr/ayvYlE8VvRVLPoqFn2N9Y7V+yI9xif7O8xUFcBV
Ts87eVIi4jVodwaq0mxt5XrwljozVtv34oVkFyXh+mrBB49kQMR1QWVBpSjCnhJF/cS3kHhRxupS
p30v2xUvskGd4qoiz5Kl7Uspwze3JvbXjgeqJUvFUsSoR+h+8YGJD581atrxH5Y6NW9qnVqB222H
yQRtsCYAXckFXVKSD+/iMeVlUJYIQ0nqMxS6MqFLSIgb/mcs6GOCGt7pxovGC53Mm8OWUHtAUnPq
GjiOgobpcAPuxHvxuiR+JNoDmGA7PoG2X2hNzMNDMYkw5fYLWLI0zsX9sCSe66aiSvsFd1xoyiO8
RP8PWmg9hgplbmRzdHJlYW0KZW5kb2JqCjU3IDAgb2JqCjQ3MjEKZW5kb2JqCjU4IDAgb2JqCjw8
IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2Vu
dCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFt
ZSAvVlJTTkNTK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01h
eFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNTYgMCBSID4+CmVuZG9iago1OSAw
IG9iagpbIDU1NiBdCmVuZG9iagoxNCAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1
ZVR5cGUgL0Jhc2VGb250IC9WUlNOQ1MrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKNTggMCBSIC9X
aWR0aHMgNTkgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDQ4IC9FbmNvZGluZyAvTWFjUm9t
YW5FbmNvZGluZwo+PgplbmRvYmoKNjAgMCBvYmoKPDwgL0xlbmd0aCA2MSAwIFIgL0xlbmd0aDEg
NzExMiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAt4FNX1P/fOzO4m2WQ3AfLa
JTvLklWyiYHwCISYbB4b0Mg7sbs0mA1JSnhJMDwtwlKL6KJC/SsKWtHaVqxVJw/pBrWkYm1FESuW
VmwFKS3arwj2q1qLZv6/O7tE0/q1c/d3zrnnnPs698zdmSFGRFaKkET+1pUtnZRC10HzGpDbum6N
urvzzXWQ3ycyjf9W55KVwcc+qiIyZxMpv1myYuO3XvBdiqCDvxFJckd7S9snVnUDke0i2kzpgCJj
pXUbkf1K1Md2rFyzIe0vfBLqYgzrilWtLWwki6EeRN2ysmVDp7zVeh/qYdTVG1tWtv/W2dqBekTU
O1d1rdEr6SeoP4L6lZ03tXfOH3zpA9R/TZSsQ8dQxGUlE6WBjycODcdsD1IOkKs8TjmylzB//RyA
dennBpfq7wu74PyvaIUZGSDaT0+xpfQUHaIX2UW0eob6qY9+TVlUSw/RJrqXtmOkhdDcQfNRFOjv
ZTl6HxXTo4jpo3QUvt+gzXSQMlm2/gFtoW3ScbTaRqk0hqpoLq2iu9h1+lpqolPyrVSK+N9InSyi
B/W79Xv0H9KPqF/6tf4FdiaXWlGO6h8qv9f/QEVocR/toVPsnqRnyY9RIvD8Pt1Ee6VFMtOX6P/C
DNy0HnOQaRYdZQPch97b6RzLZpukGvTymK7pL8HLSYuog/bSQTaZzeBupUmfpR+lTIyxAb3uoR46
gBKjF+gksyoX9R/qFymHCukarKePXmcD0uAXWwcrETcFURpH02BZRT+nX9EbzMN+wVcpVqVE8Ss3
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
4Imx5HkLNcVTzbSMeqpvqNam+upjZn2+Vuqr18xzvxnsZuzuELQavz3G8CwcY7pQbXOIN9V+Yix9
210Owa/cdlcoRNmZ6yqzKzMq0qfV1X4NCRvKcG38/9+g2cPk0dru+gVB7SejQ1qJEPTRoXrt/8Sr
bD8+L14M1PazjwQLBfulCvb3wHyhlypqQ6H6GLve8COVfQQ/ZAwY/Cx5pAo/Ui15cb+9cb98tIff
WMHgl5RE+YZfflKS4Scz4dfdNTZQ2z0WBD5ZKnUZPl1Z6ld9juTDJx8EPpkROmL4HMmMCB+twujG
6YRLHghcGL5ZGi5Olmu4GDPvNlyKEy53DLncYYwkxWdj+AiCblJPX/ZJPQ2frwTyv4vt1T4f650e
am0K4DNA2BNoB8LajnUd2Vpksap2t4aEAW/j3vDi1g7BW9q1kKe9Vmv11Krd0412/2ZuEubpntpu
ago0BLub/O21PdP90wOeltpQ74y5k0qHjXXH0FiT5n7NWHNFZ5PEWDOMdv82VqkwzxBjlYqxSsVY
M/wzjLHIyPG5wW4LVYfwqmrwXp6SjHwNO9yh6kx7Z4WRvNPd2ZsdB/FAsp9S8HpuxQedVEDkdVFV
UZUw4Z4SpjTxrSdhyt483e04yPYnTHao0z3V5FuztmstZQeW1sZ/XbigWrNWbEWc+oTuay+4BPDZ
prZrDVG9VrCgXqvE23u32QxtuDYEXdllXUpKAE/YceVVUJYJR0kachS6cqFLSko4/mcuGHOCGtHp
x4PGc73Mn8fWUFdI0vLqGziOgoaFCAPe+Q/icUn8SXSFsMAufOLtutybWIeP4jXCkrsuY83ahJSI
w5oEN1xFk67L4bjclU9Eif4flwh0WgplbmRzdHJlYW0KZW5kb2JqCjYxIDAgb2JqCjQ4ODgKZW5k
b2JqCjYyIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVp
Z2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4
IDEwMDZdIC9Gb250TmFtZSAvTlRIVlVHK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAg
L0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNjAgMCBS
ID4+CmVuZG9iago2MyAwIG9iagpbIDU1NiA1NTYgXQplbmRvYmoKOCAwIG9iago8PCAvVHlwZSAv
Rm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9OVEhWVUcrQXJpYWxNVCAvRm9udERl
c2NyaXB0b3IKNjIgMCBSIC9XaWR0aHMgNjMgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDQ5
IC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNjQgMCBvYmoKPDwgL0xlbmd0
aCA2NSAwIFIgL0xlbmd0aDEgNzQ0OCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGF
WAt8VMXVPzP37iPJJtnNO9ll9y5LVskmBMIjQGKyeWwAwzMkNkuDJCSR8JJgeFqEpRbBoILWUqFW
fLWiFr15gBugJRWqFUWoWFqxFbRYtD8RbH3UKrnff+4uqbT++u3secw5Z87MnDkz994hRkQWCpFE
/ualTe0USzMheQ3gaF61QtnR/sYq8B8QGUfe0r5gaf0Tn5QRmTKIDL9bsGTtLa+uj50CBx8RybVt
rU0tn/1DWUNk86PNuDYIkpZaNqEOGQ1rW7piTcJf2f2oP4y6Zcmy5iaWwhtR34O6eWnTmnZ5o+VH
qKuoK7c2LW19O+NmoT8p6u3LOlZopfQs6pdRv779ttb2moGjHxIlYTyxGmQMRfwsZCQr6EjMS0i4
4QBlArIMT1Gm7CXYaxcAmJd2YWCh9oHQC8r/ButwFIj20F62kPbSYXqRXUar56mPeum3lE6V9DCt
owdpM3qaA8ndVINigPxBlqn1Uj49hr4fo+Ow/Q6tpwOUxjK0D2kDbZJOodUmiqehVIZoL6N72VRt
JTXQWflOKqSpdCu1s5BWr92nPaA9ST+jPum32hWKoyxqRjmufWz4o/YnykOLH9FOOsseiNlHfvQS
guVP6TbaJc2VmbZA+xdG4KbVGINM0+g46+c+eG+lCyyDrZMq4OUJTdWOwspBc6mNdtEBNpZN4m5D
gzZNO05p6GMNvO6kbtqPEqZf0hlmMVzWntQuUybl0hTMp5deZ/3SwJWNA6WImwFRGk4ToFlGv6KX
6STzsF/zZQaLocDgN9yuvUkpNIrqMNqn0PKv7Au+HmWD9JJcpZVTAuJyv4g2/YbeZVksn81gN/Hh
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
ZG9iago2NiAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhl
aWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAy
OCAxMDA2XSAvRm9udE5hbWUgL1JGTlJMTStBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgow
IC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDY0IDAg
UiA+PgplbmRvYmoKNjcgMCBvYmoKWyA1NTYgMCA1NTYgXQplbmRvYmoKMTggMCBvYmoKPDwgL1R5
cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvUkZOUkxNK0FyaWFsTVQgL0Zv
bnREZXNjcmlwdG9yCjY2IDAgUiAvV2lkdGhzIDY3IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hh
ciA1MCAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjY4IDAgb2JqCjw8IC9M
ZW5ndGggNjkgMCBSIC9MZW5ndGgxIDc0ODAgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFt
CngBhVgLeFTF9T8zc+/uZrPLbgLkTfZulqwlmxAIjxCIyc1jAxreBM1SMAkQCS8JhodYhEVFNKBQ
qyi0itZaoVa9eYgL2JKKtRVFrFjaYgtIadF+Itivaq2S+//N3UCl9et/Z3/nnDlz5nXmzNx7hxgR
uShKgvR5S5taqR/NhOZNQJu3aoW2vfWdVZA/IrINu7l1wdL6pz6pILJnEam/WbBkzc2nxj5UhQYu
EinzW5qb5n/6G+02oqQ61BndAkXyUtc9yG9BfnDL0hW39Y/wycgbyHuXLJvXJGpYDPke5J1Lm25r
Ve50PYy81f8tTUub309onoM8+ietdVnbCvNG+glRsgv5vNZbm1un9776IfJjUN2EjiHJn4tsNAB8
GKnQcEsn1P2UDmSoz1C6EqQ0IvMc8IHkvQvND2S55PxvsMeoLBDtpufYQnqODtIr7CJqvUD7qJt+
TalUTT+gtfQQbUJvs6C5j6YjqdA/xNLNbiqkJ+HXJ+kIbG+kdbSfUlia+SGtp43iGGptJDflUAVN
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
rOAd509bl7kfLyS7KRFXIS5cnrkBGdcFFQUVsgh7Shb1k/dqfUVp68b5M/ez3X1FXqiTApUUWrGy
bSWlhRdWx/9t+EG1YqVcijgNSd03/mASxhVZddsKolojb0atUY6bkg67HdrG6gh0Yy/rEhPDeK+P
K4dCOVYaCnHFUOpKpS4hoc/wv2PBGhPU1jt8lB/oYno2W0FtEWFk19ZxHAV1s+AG3K/sx+uSfEi0
RTDBNlynt11uTc4jRPEcYcptl7FiZZ/U54cVfdwylVXaLrvjclMh6SX6P4KMzhgKZW5kc3RyZWFt
CmVuZG9iago2OSAwIG9iago1MTc2CmVuZG9iago3MCAwIG9iago8PCAvVHlwZSAvRm9udERlc2Ny
aXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIK
L0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1pKVENLRitBcmlhbE1U
IC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVp
Z2h0IDUyNSAvRm9udEZpbGUyIDY4IDAgUiA+PgplbmRvYmoKNzEgMCBvYmoKWyA1NTYgNTU2IDAg
MCA1NTYgXQplbmRvYmoKMTAgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBl
IC9CYXNlRm9udCAvWkpUQ0tGK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjcwIDAgUiAvV2lkdGhz
IDcxIDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1MiAvRW5jb2RpbmcgL01hY1JvbWFuRW5j
b2RpbmcKPj4KZW5kb2JqCjcyIDAgb2JqCjw8IC9MZW5ndGggNzMgMCBSIC9MZW5ndGgxIDc2MDQg
L0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgJeFTV9T/3vjdLlkleQvYJmTcMGSST
mBCWsMTkZZmARvZEM5SYhCQlbBIMqyIMKoJBgfq3KLSKS6ugVV4WcUBaoqitKEKF0hYXkNKK/RrB
fi61QN7/d9+EVFq/9t05+7nbuefeee8SI6JoCpJEWuOihlZSKADNu4ChjcuXqtta318O/iKRNe+H
rXMX1TzzRQmRTSWy/HbuwlU/fPzplsto4Esi+cOW5oamr2V1JVHcMdQZ0wJF/KLo+4ni7aK9lkVL
Vw4K8HWQsyErCxc3Nkj3sBDkQsiRixpWtsr3RP8Y8iTI6u0Ni5qPD557O+QWIbcubltqBOh5yBsh
Z7Xe0dw6o++NzyB3o7oBHUMRTzRZKQU0j2zQcFMnkGTZT6mANMtzlCp7hY/xKeC8oH3zjPPCLij/
K7wxMhOIdtGLbB69SAfpdXYRtfbQPuqm31AyldNPaTU9QhvQ4yxoHqAZKBboH2GpRjfl0lOI7VN0
BL630hraT0ksxfiM1tJ66ThqrScHDaESmkaL6SF2s7GMZtNp+V4qoJvpdmplQaPG2Gw8bPyMfk77
pN8YVyiK0qgR5YjxueUPxoeUgxo/pu10mj0c8TJp6CUIz8fpDtoh1crMmGv8EyNw0wqMQabJdIT1
cB9ab6ZPWQpbLZWhlWcM3XgDXulUSy20g/az0Wwid1tmG5ONI5SEPlai1e3USXtRQvRLOsWiLReN
nxkXKZWy6UbMp5veYz1S35V1fcWImwVRGk7jYFlMv6Jf0zHmYa/xxZZoS75Fs9xpnKAEGkHVGO1z
qPkX9g1fg7JWekuuMEopBnH5kYg2vUmfsDSWy6ayW/hwvpg/Id1BdvQ4AqWJ5iHej6H1j5mP7eXR
/Kj0jPyCfMk6uO+MEYMV8dJP6HF6jTkwU5W1sXvYSfYnXsbr+E/4WekRebf8vq0Bs76NFtFD9AJ9
w+LZWDad/YC1sNVsA/sR286OsGPsPC/hVXwBvyC1SEukX8qlKDPlNvley/2WTdbzfTV9b/T9tu8b
I9+4n6YjH9Zh9D+mJzCzfXSU/ohyms4yC4tiMSgqc7NqdhfKGvYQe5rtYrtZN3o5xs6yz9jf2Vfs
EkfScit3cjcfguLhd/AV/BH+U34U5Rj/G/9WSpaGSD5ptFQoBaTFGNUGaSvKy9Incpp8VDYQ53zL
NstOyy7LC5bXLRet0bZ77GR/9/IzV7KufNxHfRv7tvV19nUbn1Ai1jANUXBRIUbfgDIf670NGbeH
jrNoxC6NZbEidjMiU8fmsyVsJSJ5H9vBfm6O/SV2AFH6PbuAMTt4ujnm6/loXsqnotzGm/kSvpU/
zLv5Sf5PySZFSbFSopQlTZRqpWZpqbRK2ibp0rvSR9JZ6WvpMoohR8oueYjslX3yRLlOXiY/IX8q
f2qZbXnH8mdrpHWR9X5ryPqFbYytyDbNNt1Wa9ti22s7Ya9Hdh6il+kVZODAw85I6yS/9DJt5iPl
VP4efw/5XEdN0mSOTOW72EZ+N+vmQy0rrRP4BDaFLspexPotvpN/zSdIk1klm0nz+Yhwg9YEGScQ
FcqHqFc+gLm9h5ZXWqPZGn7BGk2dOG7G4SB6U8qTfdI7dEo6zWzyU/SBHMmSWS9/TpqGLPilXGSp
Ibf0U3pJWsLuppe5HyfYJfuDyOMp7HmcC1Usn/1DMkjiU5BFBdKf6F5awP9AvdjHG+lR1iTPpc00
kq2mT+lZ7IrhltutWdZE9jafJ7fzQaybuLwbsxvHhjLJkkD3sVpph/UC/yMto6NyJH0s/QKjP8pf
kibLFy0zWAt2wN10Py0x1tEqS438PptLEruFMuUzON1WS/myG3QtTpXZONP2YnfvxzlQIk2GJgWZ
czPyohonxA6Ux3BOyMigedjjt+IUe4+6rVU8RHMtMQynDv4r3umbQbOMZ2m7MZduNx6mHJwHG4zV
aHEX/Zm20C62vu8uaqUM7JyP2c2WCn7UUmHk8Hb+Rz6Tb7t2fRHtTJZCf0V5iSqoyPIqtcu/p5lU
bDxo/A7ZfR1O2O00h26ic5jl5+hhktRDI/um8A6jQmrFfE/TdOM5w8UiqcVYSFPpAP3cZqEGm08r
q64q0YqLbiicMH7c2ILRo0bmj8jLvT4n25c1/Lph3syhniFu1ZUxON2ZlpqSnJSYMCg+TomNcURH
RUbYbVaLLHFG2X5PRb2qe+t12euZNClHyJ4GKBq+o6jXVagqrvXRVVGvAaZrPDV4/vDfPLWwpzbg
yRS1kApzslW/R9WPlHvUEJs1vQb8Q+WegKr3mvxkk99q8g7wbjcqqP6UlnJVZ/WqX69Y3tLury/P
yWYdUZFlnrLmyJxs6oiMAhsFTk/2tHaw5CJmMjzZP76Dk92BKeppnnK/nupBVTQjZfobmvRp02v8
5U63O5CTrbOyRs8cnTyleqzPdKEysxvdWqbbzG7UeTpmQ5vUjuye9gdDCs2p90U3eZoaZtfoUgPa
8OtxPvRbriffeS7lXyIajy+r2fBdq1Nq96fMU4Vze/sGVX9yes136jrdooVAAG2gLs+sqG+vQNcP
YqUqZ6roja8P1OhsPbpUxUzErMLza/b4haZ+vqpHeEo9Le3z67E0ae06zVjl7kxL0/YZZyjNr7ZX
1XjcerHTE2goT+9IoPYZq7pSNTX1WktOdocSFw5sR0xsPxPt+C7TjKCHbSZnuguucsZAZJkYkedG
XUNGNaoYSY0HcxorUPNYam8ciwXAE2CopTdhRebpEWX17cp4occUmW7JVDxq+1eEDPD0/u1aTUO/
xpqpfEXCKPJkINV01nCV130+PStLpIitDGuKMRaZ8uic7OUh7vG0KioIwkfTENuGwPhchN/tFgu8
KaTRHAh6cHpNWFZpjrOTtFxfQOf1wtJz1ZJYLSzBq5aB6vUeZHK3+TqYqNu9A79YJWmQv2W8zpL+
i7k5bK+c6amcPqtG9bfX92dtZdU1UtguAoq4wdbP6YPKaiQnh05w3CmZViTl7FkDLhBqonU5Ez+r
mdRNIZsdWWlqmFqhK/WTwjgQ6Xb375n/VSlkXBS1TPKvav3T0Mf7+gcaHrY+4Rr5muFFt0uVVThy
eGXVrPb2yGtsSLXwKG/sJ8h4qqpxq2U6VWNnZuIXMnrGCgg4dQ0hg6UKu8hUB5z94jWOzv5KATwi
O3OyK3BmtrdXeNSK9vr2hpARnONRFU/7Pv46f7291Y/TLpw4IWP/Jqde8WAAEWth47E9OJWKbVxW
VdM/c3NZRHZjmcSfOI5k8YJqwfcAvg9Kuzk7Z7WF+HZtEFnkcxJF2uRzjFLtVss5Lh3AH38EXgOv
pxSf8nXhlcIpypeFk68UUjF45TLQiDx3nDsuE4jhb++yKvVc1ix0iVS5B31RtfGpHGfpwZfVYFbd
wcW4tMi0DNmSkOFwJEeEjPPdsbG8WjBaqsMBLo6ihYaSoqOBo4WOcn0+3xGgI1TcW9w7Is/ZYf3P
lr5ES1bR0l+6HQ6T+VxLjYoCF0eK0JASHS2w0A00+a82u61qqpKO9OnkatSvcHQlAeIBscYZbY5s
3cA3Rm2MfTvGEmGLSuH+QTcn3pRa5qwaNDtxduoM5wLbgqjGQQsTF6TWO1fxFdblUXfGbrA+Ztum
vJ1yip+0noz6IDZtYOJtEZrbMyovglGEEsEjtrri2ggpo8VAq+IzhtPWjF9vEjGv9fUCLfH19k+d
1S7BZ8pY8TBAIDBIiR8zMj8pKT5R4VbPkGHeQUrSyPwxcYrXM8RmrV5w/MnlnUtL5x9/6sSqH+3b
vXr17t1rVt9Uy48zmd3wi7quPuNUX1/foRcfe4U93vfohYt495//+Tx8tjK8tRO/hLWLpD2aKmmO
uFEL5LV8C99ul38hswiyWrgUYWHRnB2ONEcfKeZETEXdkHGmW1GwdCHjr1qcuaDp5oLGmAuKKGup
Yrmurom5PmnRFs0RO8pyNRJ5Fqbie4lbUqP2s0K2Hkk4RTmHYCAuyAjxQAjnY3HyOBY3bkQeq6Va
n9sTZ7XaRo8ZUzCSX+ouOV716NncpfJdRatdL008XCfycjLyMhFzG0xZbGp/XrpimQuv+BJzXpeh
OZjDkWDJcFqGZCQ4IjMYZSoh48twjioZyYqYUjISCtjM0eT+HD1y4ojyprlW8eNya3uVN2qRrlrO
glRWbtMSy1PL1VnxVeoCqcnWZJ8f36QutS9LX2+/P/2k/URSnE0VcRgmgicYDxgtSnBu02AThmGq
R3ULQ5wY5TQHxzid7HidCDpv0SKujpmF2Fgtnl7ObFPMXFMYKVgRzOLiK2IfKFuzI/ezsZTBxmlJ
xcl1yYuT1ybLydh21urkJNFpcogP7fKF0xCR7kUiinj3fhnOxSu15+LMOSLoIh3FcojoB5jNO8xM
PqttDFIzPjHBisSkOKVAJCpLSBL5OXoUXKzSpa6U7BsX3FJSPYeXHJjbfWXFsfs+6Tv3+APnX/zo
SsHUzVPu+NnTd935vDwzZn7e5Lyizz9srO/75v323jX4LFnNdr+26/XLH9U+Hwg98diePTjWxNEm
RR+JufPZ7rrYwq/sTjsURG8carp3gGLlcfr1QI4w/YUB9WxFfVOoTKF/7ukbqYwfsAireGQrVHIb
VQNOAyZDN4YlsHs4bmhMbxmNcNxMWIAVfCXcgkoO3MtIkIVHfH+bVnzf04xZFbdWT/SV3DGvYeHk
KtMDTsYwfHd+3yNDOQjfE6lEHVWxJUOkZLoAMAASuYBzAVMBdYAtgJ0AK8X2axaDrgUcBFwEWEmT
kjsfHqmFQDaZpGv+wnxTbAiLs2tNsevWQJhOnh6m5TeG3caH3UaMCquvLw3TYdlhGp+ZH0TjXZGO
/J6SJCmJjgE4tQIz/gbFMoavpielRNIBXMJQTY0mxXcN9ebvPCjJxCQuMdxyuIweiXU64vJLIrnB
LyCOLv457w1beG9XTFz+zpKb+FnaAzgIkPhZlE/4J7SWn0HQFeBiwE7AQcBRwAWAlZ9BOY3yMf+Y
YvlHlAsoBtQBdgIOAi4AbPwjYIV/KJbQxIIvBnD+IbDCP8C0PgCO5afAneKnjB5+vLNgXP4+k/Hl
9jOuzH4m2dnPxCflh/j7nd8Od4X4n7pUn+vJkjx+gnQA8gZYAaiAaYB6QCvACu4kuJMUBGwFPAnQ
AVbUOYk6J1HnMOBdwEnKA2iAaQA7P9aJbkL8aKe31FWShCuBX+N6zsWPcHGl5+Lv8rdM+g5/06Rv
g2ZAf5i/1ZnhopIo2Al1FFAFNBd2C3+ta2i8yyiJ4wcRJBdwLqAYMBVQB9gCsPKDfEhnkysejbxK
h7E7XbyTPjPps/S0nbT5Ls1bhhxTBfKOvwEc0E51p5dr3m3bIQrk3fwwOIG89z0ITiDvnevACeRd
uBycQN6m+eAE8s6qAyeQd2oVOKAQf+KVocNcBVMXMLUklq9AlFYgSisQpRUk48YJhb7F1nPxn3Rm
ZSFiOzTf8CxXcD8LHmDBGSz4NAs2s+AaFlzHgoUseBsL+lgwnQUzWFBjwVdxuDIKMq37GnGclsKC
h1nwRRZsY0EvC2ay4FAWVFmBFuLuzhuxsUD8JukqEfuKu7tuKMqPxRjdiKgbae3Gtj8IfBRgmJIG
J3VI2Dk1Q9AhXVnFYfn68fmLSybxQ6h4CMtwiE4DZCzQIaTRITRyCM3FAhcD6gA9gAsAA2CF9xDM
Y4uJY4FzAcWAOsBawAWA1RzOBQyF02JgMcQ95sBygYsBU4XED6GIKz03d2uDlXTFp0yStqSz2Aw2
NcPI4AWUlISjLj7OHhdijr3fOP7xjYMiSiL4Zr4Ff9UuXKSF6ZbObwe7QuyxTu+rrpJE9ihl4Ph1
sXHkZZmgY6nNlEdTul3oR1E6fwE0vzP9FlSL7fRmu/azGFFrr+vb9HOuz9JDHOz59Fddv1dDMut0
/Q6aF/a6TqQ/4Ho7N2SH5oA3xED2q6brvvSxrhcPm67rYNjR6VojyF7X3ekTXQvSTUNz2HBbGyQt
1jXDO8s1Ce2Vp89xaW1oc6+rOP02V2HYa7Sos9eVhyH4wmwWBjs83ezUk2E2WF0QYi1atm2brcY2
Ffd/+bZsm9vmsg22OW0J9ni7Yo+xR9sj7Xa71S7bOW48E8Sbgk/8/yRYFUGsSGj8k5m8ghOGmX8+
4lxjdo5LIn2QVMkrZ5aySr2nkSrnqPrXMz0hFjl9lm7xlDI9vpIqq0r1sb7KkM2YoRf4KnXbtB/U
dDC2OQCtzjeGGL53QswQqvVOcRuxjxiLW/+QU9Dr1j8UCFBK0vLilOL4orhxFeXfg+pNZX25eKXo
f1KuMqApvsH6tsqZNfrzgwN6vmCMwYFK/f/EdcU+XCFf9JfvY18IEqjZJxWxv/tnCL1UVB4IVIbY
LaYfqewL+CFjQOBnzyBV+JFqzwj77Qj7ZaI+/IYKAr+ICMo0/TIjIkw/mQm/jrah/vKOoUDwSVap
zfRpS1a/63M4Ez6ZQPBJCtJh0+dwUlD46EVmM+npcMkAggvDvbTpks7STBdz5B2mS26/ywMDLg+Y
PUnh0Zg+AqEZx5mrPo4z8PlOIP8721yKF7quCYHG2X5c9dR7/M2Aen3T8pYUPThHVTsaA8KAGxdv
/ZzGFkEbmvWAp7lcb/SUqx0TzHr/Zp4tzBM85R00219V0zFbay7vnKBN8HsaygNdE6eNKrimrwcG
+ho17Xv6miYaGyX6mmjW+7e+CoR5ouirQPRVIPqaqE00+yIzx6fVdNipNIDrCJN28ahI5Gu90x0o
TVJai8zkneBOWePcjxeSXRSFK5hoXNo5ACKvc0pySoQJe0qYYsR9Xr8pZc0Et3M/29VvUqCO85SS
b+mytmWU4p9XHv614YFq6TKxFGHsE7rvfeDix9VcedtSoko9a2alXowbmg6bDdr68gB046/qoqL8
+IoKK6+HcrxwlKQBR6ErFLqIiH7H/8wFc0xQIzr78KLxahfTMthSagtIekZlFcdRUDULYcC9zn68
Lok/ibYAJtiGa/y2q62JefgoLBGm3HYVli7r5/rjsLSfmq6iStvVcFxtyieiRP8PKsn79QplbmRz
dHJlYW0KZW5kb2JqCjczIDAgb2JqCjUyNjUKZW5kb2JqCjc0IDAgb2JqCjw8IC9UeXBlIC9Gb250
RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFn
cyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvUlpGV1VHK0Fy
aWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAg
L1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNzIgMCBSID4+CmVuZG9iago3NSAwIG9iagpbIDU1NiA1
NTYgMCAwIDAgMCA1NTYgXQplbmRvYmoKMTEgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUg
L1RydWVUeXBlIC9CYXNlRm9udCAvUlpGV1VHK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjc0IDAg
UiAvV2lkdGhzIDc1IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1NCAvRW5jb2RpbmcgL01h
Y1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjc2IDAgb2JqCjw8IC9MZW5ndGggNzcgMCBSIC9MZW5n
dGgxIDc1NzYgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVkJeFTV9T/3vjdLkknm
JSHJZCHzhiGjZBISwhKWmLwsE9Cwk2CGJpIAKWGTYFgtwqAiGlb5Kwptxa0KdXtZxGGxpEK1oogV
SytaQUqr9msE+6HWKnn/330TUFq/9t2c5Z5z7r3nnnvunfduiBGRg0IkkTZ7UWMLJVA1JG8CBsxe
vlTd0fLOcvAXiaz5P26Zu6j2ic9LiWwqkeV3cxeu+vEH7/V/Eh1cIpK7m5sa53zpUFcSxXehzYhm
CBIWOe5B/e+oD2xetHRlYpDfR5SgoK4sXDy7UVrKwqijP4pe1LiyRb7T8SDqOairtzYuanov7Ud1
qI8X9ZbFrUuNWvol6gtRz265rallau/RT1F/GM0NyBiKeBxkpWTQfFBG3JQR5kiWA5QKSLM8Tamy
j1xExseATwTtnWd8IvSC8r+hDTwzgWgPPcfm0XN0mF5hF9HqBdpPXfRbSqEK+hmtpgdoA0aaAcl9
NBXFAvkDLNXoojx6DOM+RsdhezOtoQOUzFzGp7SW1ksn0Wo9xdIAKqXJtJg2s/HGMqqjM/JdVEjj
6VZqYSGj1thibDeepF/Qfum3xmWKoTSajXLc+MzyR+MDykWLB2knnWHbo14kDaOEYPlzuo12SfUy
M+Ya/4IHHloBH2SaQMdZN/ej9yb6mLnYaqkcvTxh6MZRWGVQPTXTLjrAhrOx3GOpMyYYxxHJXFqJ
XndSB+1DCdPLdJo5LBeNJ42LlEo5dCPm00VvsW6p9/K63hLEzYIoDaJR0CymX9Fr9Dbzsl/zxRaH
pcCiWW433qV+NIRq4O3TaPlX9hVfg7JWelWuNMooDnG5X0SbfkMfsTSWxyax6XwQX8wfkW4jO0Yc
gjKH5iHeD6P3D5mf7eMOfkJ6Qn5G/sbav/esEYcV8dFP6ef0axaLmaqsld3JTrE/83I+k/+Un5Me
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
cmVhbQplbmRvYmoKNzcgMCBvYmoKNTI1NQplbmRvYmoKNzggMCBvYmoKPDwgL1R5cGUgL0ZvbnRE
ZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50IC0yMTIgL0ZsYWdz
IDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1lIC9GSExUVUcrQXJp
YWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4V2lkdGggMjAwMCAv
WEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA3NiAwIFIgPj4KZW5kb2JqCjc5IDAgb2JqClsgNTU2IDU1
NiAwIDAgMCA1NTYgXQplbmRvYmoKMTcgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1Ry
dWVUeXBlIC9CYXNlRm9udCAvRkhMVFVHK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjc4IDAgUiAv
V2lkdGhzIDc5IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1MyAvRW5jb2RpbmcgL01hY1Jv
bWFuRW5jb2RpbmcKPj4KZW5kb2JqCjgwIDAgb2JqCjw8IC9MZW5ndGggODEgMCBSIC9MZW5ndGgx
IDc0NDggL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgLfFTF1T8z9+4jySbZzTvZ
ZfcuS1bJJgTCI0BisnlsAMMzJDZLgyQkkfCSYHhahKUWwaCC1lKhVny1oha9eYAboCUVqhVFqFha
sRW0WLQ/EWx91Cq533/uLqm0/vrt7HnMOWfOzJw5M/feIUZEFgqRRP7mpU3tFEszIXkN4GhetULZ
0f7GKvAfEBlH3tK+YGn9E5+UEZkyiAy/W7Bk7S2vro+dAgcfEcm1ba1NLZ/9Q1lDZPOjzbg2CJKW
WjahDhkNa1u6Yk3CX9n9qD+MumXJsuYmlsIbUd+Dunlp05p2eaPlR6irqCu3Ni1tfTvjZqE/Kert
yzpWaKX0LOqXUb++/bbW9pqBox8SJWE8sRpkDEX8LGQkK+hIzEtIuOEAZQKyDE9Rpuwl2GsXAJiX
dmFgofaB0AvK/wbrcBSI9tBetpD20mF6kV1Gq+epj3rpt5ROlfQwraMHaTN6mgPJ3VSDYoD8QZap
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
/XXaw+Nika+NdnewPM3aXqInb5E7Y739AF5I9lAcrjssuCCLB4i8zivLKxMq7CmhShB3Z1FVxvoi
t/0A2xNVWSG2ecrJt2Jlx0rKCCysjPw78INoxUqxFBHsE7Jv/cEkgGuwyo4VRNVqzuxqtRS3IV0m
E6SNlUHIJl6VxcUF8O0WEY6AcKIwlKRBQyErFrKYmKjhf+eCPiaIEZ0+vGgc7GF+J1tBHUFJdVbX
chwFtXMQBtyhHMDrknhIdAQxwQ5cmXdc9Sbm4aNIjTDljquwYmWUi8ZhRZTqpqJJx9VwXHXlE1Gi
/wM7eNkQCmVuZHN0cmVhbQplbmRvYmoKODEgMCBvYmoKNTE1NgplbmRvYmoKODIgMCBvYmoKPDwg
L1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNjZW50
IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnROYW1l
IC9SRk5STE0rQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAvTWF4
V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA4MCAwIFIgPj4KZW5kb2JqCjgzIDAg
b2JqClsgNTU2IDAgNTU2IF0KZW5kb2JqCjEzIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBl
IC9UcnVlVHlwZSAvQmFzZUZvbnQgL1JGTlJMTStBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo4MiAw
IFIgL1dpZHRocyA4MyAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFzdENoYXIgNTAgL0VuY29kaW5nIC9N
YWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago4NCAwIG9iago8PCAvTGVuZ3RoIDg1IDAgUiAvTGVu
Z3RoMSA3MzcyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVYCXxU1dU/9743S5KZ
ZBKyTJIh84YhgzAJgQCGJSaTZQIakC3BGRpMQhIJmwTDahEGFdABgfIpFariWrFWfVnEAbREsVhR
xIqlLbaAShX7NYL9udQqed//vhmiWH/93p2zn7ude+6d9y4xIrJQiCTyNS1ubCMrTYPmTUBO04pl
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
lxwguDDc2eouDpalu+gj79BdCmIud/e73K33JEVHo/sIhGasZy/7WM/C53uB/O9sS7nXy7omBJvq
/LgGaXD7WwAN6uYVrXY1NFdROpqCwoDbCE/D3KZWQRtb1KC7pVJtclcqHRP0ej8w1wnzBHdlB9X5
awIddb6Wys4Jvgl+d2NlsGvitNFFV/R1d39fo6f9SF/TRGOjRV8T9Xo/6KtImCeKvopEX0Wir4m+
iXpfpOf4tECHmcqD+FTXaRdPiEe+NmS7guXptrYSPXknuOxrsw/ghWQvJeB6woILLStA5HV+WX6Z
MGFPCVOiuOuKmexrJ7iyD7C9MZMN6mR3OXmXLW9fTnb//Mrorx0PVMuWi6WIYq/Q/egDFz+urSrb
lxFVq8NmVquluL3oMJmgbagMQjf+si4hwY+Pl6hyOJTjhaMk9TsKXbHQxcXFHP8zF/QxQY3o7MeL
xsEu5sthy6g9KKk51TUcR0HNbIQBdx4H8Lok/iTag5hgO6642y+3JubhpahEmHL7ZVi2PMbF4rAs
RnVXUaX9cjguN+UVUaL/A+blxiEKZW5kc3RyZWFtCmVuZG9iago4NSAwIG9iago1MTA5CmVuZG9i
ago4NiAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdo
dCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAx
MDA2XSAvRm9udE5hbWUgL1hLVllYVStBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9M
ZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDg0IDAgUiA+
PgplbmRvYmoKODcgMCBvYmoKWyA1NTYgMCAwIDU1NiBdCmVuZG9iagoyMCAwIG9iago8PCAvVHlw
ZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9YS1ZZWFUrQXJpYWxNVCAvRm9u
dERlc2NyaXB0b3IKODYgMCBSIC9XaWR0aHMgODcgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFy
IDUxIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKODggMCBvYmoKPDwgL0xl
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
Kw60zV/QKXl7hx71dzToC/wNWs8ks97XiufK4kn+hh6aG26J9MwNdTT0TgpNCvvbG6J9k5uvKL+k
r3sv9nVF8zf01Swbu0L2Ndms97W+ymXxZNlXueyrXPY1OTTZ7IvMGG+O9NioLoqXVJP38RQH4rUt
1xety/B0VZvBO8mXtTZ3L15IdlEKrslOfFhxATKuS2pLamUR9pQsSpXfXIaKstZO8uXuZbuGijxQ
p/nrKLh8RfcKygovbkj+uvFAtXyFXIokDUrdNz4wCePzSUP3cqImvWhWk16DW3SP1QptW0MUusoL
upSUMN6sk8oxUFZKQyEuGkpdldTZ7UOG/zcWzDFBDe/swYvGc30slM+WU3dU6PlNLRxHQcscuAF3
7714XZJ/Et1RTLAbn1q7L7Qm5xGkZI4w5e4LWL5iSBryw/IhbprKKt0X3HGhqaD0Ev0vMqs6fwpl
bmRzdHJlYW0KZW5kb2JqCjg5IDAgb2JqCjQ4NDMKZW5kb2JqCjkwIDAgb2JqCjw8IC9UeXBlIC9G
b250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9G
bGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvREVIQkJW
K0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIw
MDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgODggMCBSID4+CmVuZG9iago5MSAwIG9iagpbIDUw
MCBdCmVuZG9iagoyMiAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jh
c2VGb250IC9ERUhCQlYrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKOTAgMCBSIC9XaWR0aHMgOTEg
MCBSIC9GaXJzdENoYXIgMTIwIC9MYXN0Q2hhciAxMjAgL0VuY29kaW5nIC9NYWNSb21hbkVuY29k
aW5nCj4+CmVuZG9iagoxIDAgb2JqCjw8IC9UaXRsZSAoUXVhcnR6ICVkKSAvQ3JlYXRvciAoUXVh
cnR6IFIgRGV2aWNlKSAvUHJvZHVjZXIgKE1hYyBPUyBYIDEwLjUuNCBRdWFydHogUERGQ29udGV4
dCkKL0NyZWF0aW9uRGF0ZSAoRDoyMDA4MDgwOTE1MTMwN1owMCcwMCcpIC9Nb2REYXRlIChEOjIw
MDgwODA5MTUxMzA3WjAwJzAwJykKPj4KZW5kb2JqCnhyZWYKMCA5MgowMDAwMDAwMDAwIDY1NTM1
IGYgCjAwMDAwOTQ3NDggMDAwMDAgbiAKMDAwMDAwMjI3NCAwMDAwMCBuIAowMDAwMDAzNzExIDAw
MDAwIG4gCjAwMDAwMDAwMjIgMDAwMDAgbiAKMDAwMDAwMjI1NCAwMDAwMCBuIAowMDAwMDAyMzg3
IDAwMDAwIG4gCjAwMDAwMDM2NzUgMDAwMDAgbiAKMDAwMDA1NDc1OSAwMDAwMCBuIAowMDAwMDM4
NjI5IDAwMDAwIG4gCjAwMDAwNjYxOTIgMDAwMDAgbiAKMDAwMDA3MjAxNSAwMDAwMCBuIAowMDAw
MDA5NjA0IDAwMDAwIG4gCjAwMDAwODM1MzAgMDAwMDAgbiAKMDAwMDA0OTMyNSAwMDAwMCBuIAow
MDAwMDI3MzA2IDAwMDAwIG4gCjAwMDAwNDQwNjIgMDAwMDAgbiAKMDAwMDA3NzgyNiAwMDAwMCBu
IAowMDAwMDYwNDYyIDAwMDAwIG4gCjAwMDAwMTU2NjggMDAwMDAgbiAKMDAwMDA4OTE4OSAwMDAw
MCBuIAowMDAwMDIxNjYyIDAwMDAwIG4gCjAwMDAwOTQ1NzQgMDAwMDAgbiAKMDAwMDAzMjc1NCAw
MDAwMCBuIAowMDAwMDAyNzE1IDAwMDAwIG4gCjAwMDAwMDI3NjAgMDAwMDAgbiAKMDAwMDAwMzY1
NSAwMDAwMCBuIAowMDAwMDAzODAzIDAwMDAwIG4gCjAwMDAwMDM4NjcgMDAwMDAgbiAKMDAwMDAw
OTMwNCAwMDAwMCBuIAowMDAwMDA5MzI1IDAwMDAwIG4gCjAwMDAwMDk1NjAgMDAwMDAgbiAKMDAw
MDAwOTc3NiAwMDAwMCBuIAowMDAwMDE1Mzc0IDAwMDAwIG4gCjAwMDAwMTUzOTUgMDAwMDAgbiAK
MDAwMDAxNTYzMCAwMDAwMCBuIAowMDAwMDE1ODQwIDAwMDAwIG4gCjAwMDAwMjEzNjggMDAwMDAg
biAKMDAwMDAyMTM4OSAwMDAwMCBuIAowMDAwMDIxNjI0IDAwMDAwIG4gCjAwMDAwMjE4MzQgMDAw
MDAgbiAKMDAwMDAyNzAxNCAwMDAwMCBuIAowMDAwMDI3MDM1IDAwMDAwIG4gCjAwMDAwMjcyNzAg
MDAwMDAgbiAKMDAwMDAyNzQ3OCAwMDAwMCBuIAowMDAwMDMyNDc0IDAwMDAwIG4gCjAwMDAwMzI0
OTUgMDAwMDAgbiAKMDAwMDAzMjczMCAwMDAwMCBuIAowMDAwMDMyOTI4IDAwMDAwIG4gCjAwMDAw
MzgzNDEgMDAwMDAgbiAKMDAwMDAzODM2MiAwMDAwMCBuIAowMDAwMDM4NTk3IDAwMDAwIG4gCjAw
MDAwMzg4MDAgMDAwMDAgbiAKMDAwMDA0Mzc3OCAwMDAwMCBuIAowMDAwMDQzNzk5IDAwMDAwIG4g
CjAwMDAwNDQwMzQgMDAwMDAgbiAKMDAwMDA0NDIzNCAwMDAwMCBuIAowMDAwMDQ5MDQ1IDAwMDAw
IG4gCjAwMDAwNDkwNjYgMDAwMDAgbiAKMDAwMDA0OTMwMSAwMDAwMCBuIAowMDAwMDQ5NDk3IDAw
MDAwIG4gCjAwMDAwNTQ0NzUgMDAwMDAgbiAKMDAwMDA1NDQ5NiAwMDAwMCBuIAowMDAwMDU0NzMx
IDAwMDAwIG4gCjAwMDAwNTQ5MzAgMDAwMDAgbiAKMDAwMDA2MDE3NiAwMDAwMCBuIAowMDAwMDYw
MTk3IDAwMDAwIG4gCjAwMDAwNjA0MzIgMDAwMDAgbiAKMDAwMDA2MDYzNCAwMDAwMCBuIAowMDAw
MDY1OTAwIDAwMDAwIG4gCjAwMDAwNjU5MjEgMDAwMDAgbiAKMDAwMDA2NjE1NiAwMDAwMCBuIAow
MDAwMDY2MzY0IDAwMDAwIG4gCjAwMDAwNzE3MTkgMDAwMDAgbiAKMDAwMDA3MTc0MCAwMDAwMCBu
IAowMDAwMDcxOTc1IDAwMDAwIG4gCjAwMDAwNzIxODcgMDAwMDAgbiAKMDAwMDA3NzUzMiAwMDAw
MCBuIAowMDAwMDc3NTUzIDAwMDAwIG4gCjAwMDAwNzc3ODggMDAwMDAgbiAKMDAwMDA3Nzk5OCAw
MDAwMCBuIAowMDAwMDgzMjQ0IDAwMDAwIG4gCjAwMDAwODMyNjUgMDAwMDAgbiAKMDAwMDA4MzUw
MCAwMDAwMCBuIAowMDAwMDgzNzAyIDAwMDAwIG4gCjAwMDAwODg5MDEgMDAwMDAgbiAKMDAwMDA4
ODkyMiAwMDAwMCBuIAowMDAwMDg5MTU3IDAwMDAwIG4gCjAwMDAwODkzNjEgMDAwMDAgbiAKMDAw
MDA5NDI5NCAwMDAwMCBuIAowMDAwMDk0MzE1IDAwMDAwIG4gCjAwMDAwOTQ1NTAgMDAwMDAgbiAK
dHJhaWxlcgo8PCAvU2l6ZSA5MiAvUm9vdCAyNyAwIFIgL0luZm8gMSAwIFIgL0lEIFsgPGVlN2Jl
ZGYzMzlkOTlkZjIzM2Q5YWMyN2JlMDlhMjBmPgo8ZWU3YmVkZjMzOWQ5OWRmMjMzZDlhYzI3YmUw
OWEyMGY+IF0gPj4Kc3RhcnR4cmVmCjk0OTM2CiUlRU9GCg==

--Apple-Mail-30--530209534
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed
Content-Transfer-Encoding: 7bit




and if I plot from 95-300, it occurs at 163-164, 263-264
 > plot(x,y, type="l", xlim=c(95,300))
 > abline(v=163)
 > abline(v=164)
 > abline(v=263)
 > abline(v=264)


--Apple-Mail-30--530209534
Content-Disposition: inline;
	filename="x-y line plot 95-300.pdf"
Content-Type: application/pdf;
	x-unix-mode=0644;
	name="x-y line plot 95-300.pdf"
Content-Transfer-Encoding: base64

JVBERi0xLjMKJcTl8uXrp/Og0MTGCjQgMCBvYmoKPDwgL0xlbmd0aCA1IDAgUiAvRmlsdGVyIC9G
bGF0ZURlY29kZSA+PgpzdHJlYW0KeAGtmc2OHMcRhO/zFH20DypV1n9dTdgGfBNIwA9AWAYEUgDN
g+y39xfRM7O7JJdcyiYhaZTTnRWVPxFZNR+On44Px4+vPsbx9uMR/vvx7fHjXzH88+OR+dvmyjW1
cdRcak3l+Nc/jp/9Wt8pt5zbMfm+HX22NPo8ypqpld4vPPj349cjp9mz/hy/4f9v/PPLueKr114g
H69fASL8Pz/oPy122rn34+17/k/+Itq6vD9Kan3MjWmkunsc746eci+1Y+pp1DYxzTTa3IGppTVb
xRQ5laZvZcPZBVNJq+5cMdVUOy6w9cRTXQuU1Hctsq2Uaw6tELxRFraS0yh9aolIeRb5K8SmRNES
OdXQq6WnFWOxxNyp9xiyrdSiVJaYK4FS6CpO8twsgY3FNu4I9ciVLZY5U5lZ8OpIsXdmiTlSj6z9
V3lpQ2v0NNtWAFoQnRxao6W9dsVfq3zqU2s0gK6t5/CyomoNZXgJX9sp5lhao6SZl/bRI002qTUi
bQoCf72lSiq0RqQgzHpupD0qeQMvJSAo1EjvO1hi7DT4g22UFL0NlhiLPI+Cu9FUJYUlsIVSgG0m
kqF069PCLzYqo4XyPYZyoBAAtNehhA8CTu7xRzCiFiUcW2QXAYGcJEdrAL6Rg3eHckX5aI1KMKrw
kfsdWxkH6SpV+KiuHk0ZxwZkVcECaWQ+lkHAc1EINtWe8YMtp94UvU155VDGCcakIHC3AbqHMq4m
omz0HJWxSy/YVuJ1wSPHKa/Fsn0mushFSjtSVAPbIOM58Bd5UCRb7/a0p6sg8lL5Aw9bie0+iEht
KgTkr3VXAe3AjhSCjmOKRP6C6I5o2AhGdRUEXQkMm2JORSAKLdGLoOA3XARR8NwMmS7pSgZdAVNU
XqW62LeCHIV6qEKsiqtDESBjqVQhbivV6SKIShNXSIZkphHQip4zw4CYCqYuVATRsgJJRLFlitS2
witatqdKwm1SLIS4tdRnVauR17RU6ZQ4DXtlAio4G3KFYU4mUCw2cSwNnNs1ACCIwpCDKjQTBPmL
bchUw/TOqIa5FGPBJLqCQsXVJcRVgXUNBNW6p8qMvm47q9NgEJAKMtue9awBNd0QZDhhTzNB0MRz
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
ZEz15dGA73ejeOG1XuFdvYsY8PkgwVwanFDQAlq/X7BBid4/UjALPAVLcsnggZhwSUYP5shB+PSY
6Ec3lrqYvH19uy38/9w3sr5vay7sTSUhDrvXxN12Ivnw3KXlzclxe4G7ywebrlnk+BtO7sfKmxOd
kq5HzQsXli9ych9PHzl5sF2dIBNf5fW7Ej5y8mB7guTybEw+D+LjwD5x4uvhCxfSSnM+uJB+1uuf
3sB6fuoH/gspcdaijzmVnTeGb94fP/6FQeISx5ufjz/QC3883vxy/PnNc8dT6dhTpzr8wnBcgF+d
XuwU1iH9dtq/3ykTI9wGgT11ykpXpxDJdyPVAMT1w/zEKU12c/o7kIpfGbc/RQojXp1yHn0BUloe
yaHpURAIh8FAhovGuHXK51dL8PPXmRgf+Xt3ecHrzLjMURC5RhW9fjd8pQF0X3Gufru/fXgduy50
v9XJ19d1MCY9cMF19avhZa/fz5e312+Gb3Xvufp9iL2//jDVPhu6h73f1fD++oM8Pvu6Z0Ln/Zbm
+95vhm/tnVbMh1pb/+iXIULocz3Hl7MPGT+uhfiSMvyyP7SZSe/qEIm7Onxpt3yO8LyRItemCk4e
V48v5p8vuGTiRebjdElUby5/P0rd2kya73TJ+HTz+WLy+RymjosMI+PqE+q94iz/A04duzlfXn0+
MO/LqOeLOefeZGzOXlefD8TLddvL6ezRjMBkpvu0u0RqfrPpZA/NhRp9xYL+92PDo5fUTN+acG6/
136vPPITCFMhczlnSIZWfks55fFBIP79gq1/Ek7mZU4Jvj3Vbefp8UEd/vPgUdu6bv2534z14/KT
34wvv1E+3/ub8f0++h5XXTmfd9SXR8H/KnHd76ifOLneW9+cfJN7b0foR044op7H6puTkwOfn5zu
x+onTq5H7adOjp/+C/IJZRMKZW5kc3RyZWFtCmVuZG9iago1IDAgb2JqCjMzNTkKZW5kb2JqCjIg
MCBvYmoKPDwgL1R5cGUgL1BhZ2UgL1BhcmVudCAzIDAgUiAvUmVzb3VyY2VzIDYgMCBSIC9Db250
ZW50cyA0IDAgUiAvTWVkaWFCb3ggWzAgMCA2NjMuOTM3IDQxOS45MDU1XQo+PgplbmRvYmoKNiAw
IG9iago8PCAvUHJvY1NldCBbIC9QREYgL1RleHQgXSAvQ29sb3JTcGFjZSA8PCAvQ3MxIDcgMCBS
ID4+IC9FeHRHU3RhdGUgPDwgL0dzMQoyMyAwIFIgPj4gL0ZvbnQgPDwgL0Y2LjAgMTMgMCBSIC9G
MTQuMCAyMSAwIFIgL0YxMy4wIDIwIDAgUiAvRjExLjAgMTggMCBSCi9GOS4wIDE2IDAgUiAvRjcu
MCAxNCAwIFIgL0YxMC4wIDE3IDAgUiAvRjUuMCAxMiAwIFIgL0YzLjAgMTAgMCBSIC9GMTIuMCAx
OSAwIFIKL0YyLjAgOSAwIFIgL0YxNS4wIDIyIDAgUiAvRjEuMCA4IDAgUiAvRjguMCAxNSAwIFIg
L0Y0LjAgMTEgMCBSID4+ID4+CmVuZG9iagoyMyAwIG9iago8PCAvVHlwZSAvRXh0R1N0YXRlIC9j
YSAwID4+CmVuZG9iagoyNCAwIG9iago8PCAvTGVuZ3RoIDI1IDAgUiAvTiAzIC9BbHRlcm5hdGUg
L0RldmljZVJHQiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFlE1IFGEYx/+zjQSx
BtGXCMXQwSRUJgtSAtP1K1O2ZdVMCWKdfXedHGenmd0tRSKE6Jh1jC5WRIeITuGhQ6c6RASZdYmg
o0UQBV4itv87k7tjVL4wM795nv/7fL3DAFWPUo5jRTRgys67yd6Ydnp0TNv8GlWoRhRcKcNzOhKJ
AZ+plc/1a/UtFGlZapSx1vs2fKt2mRBQNCp3ZAM+LHk84OOSL+SdPDVnJBsTqTTZITe4Q8lO8i3y
1myIx0OcFp4BVLVTkzMcl3EiO8gtRSMrYz4g63batMnvpT3tGVPUsN/INzkL2rjy/UDbHmDTi4pt
zAMe3AN211Vs9TXAzhFg8VDF9j3pz0fZ9crLHGr2wynRGGv6UCp9rwM23wB+Xi+VftwulX7eYQ7W
8dQyCm7R17Iw5SUQ1BvsZvzkGv2Lg558VQuwwDmObAH6rwA3PwL7HwLbHwOJamCoFZHLbDe48uIi
5wJ05pxp18xO5LVmXT+idfBohdZnG00NWsqyNN/laa7whFsU6SZMWQXO2V/beI8Ke3iQT/YXuSS8
7t+szKVTXZwlmtjWp7To6iY3kO9nzJ4+cj2v9xm3Zzhg5YCZ7xsKOHLKtuI8F6mJ1Njj8ZNkxldU
Jx+T85A85xUHZUzffi51IkGupT05meuXml3c2z4zMcQzkqxYMxOd8d/8xi0kZd591Nx1LP+bZ22R
ZxiFBQETNu82NCTRixga4cBFDhl6TCpMWqVf0GrCw+RflRYS5V0WFb1Y4Z4Vf895FLhbxj+FWBxz
DeUImv5O/6Iv6wv6Xf3zfG2hvuKZc8+axqtrXxlXZpbVyLhBjTK+rCmIb7DaDnotZGmd4hX05JX1
jeHqMvZ8bdmjyRzianw11KUIZWrEOOPJrmX3RbLFN+HnW8v2r+lR+3z2SU0l17K6eGYp+nw2XA1r
/7OrYNKyq/DkjZAuPGuh7lUPqn1qi9oKTT2mtqttahffjqoD5R3DnJWJC6zbZfUp9mBjmt7KSVdm
i+Dfwi+G/6VeYQvXNDT5D024uYxpCd8R3DZwh5T/w1+zAw3eCmVuZHN0cmVhbQplbmRvYmoKMjUg
MCBvYmoKNzkyCmVuZG9iago3IDAgb2JqClsgL0lDQ0Jhc2VkIDI0IDAgUiBdCmVuZG9iagozIDAg
b2JqCjw8IC9UeXBlIC9QYWdlcyAvTWVkaWFCb3ggWzAgMCA2NjMuOTM3IDQxOS45MDU1XSAvQ291
bnQgMSAvS2lkcyBbIDIgMCBSIF0KPj4KZW5kb2JqCjI2IDAgb2JqCjw8IC9UeXBlIC9DYXRhbG9n
IC9QYWdlcyAzIDAgUiAvVmVyc2lvbiAvMS40ID4+CmVuZG9iagoyNyAwIG9iago8PCAvTGVuZ3Ro
IDI4IDAgUiAvTGVuZ3RoMSA2ODg0IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZ
C3hTRfY/M/fm0TYlaYG+UpobQqM0LYUCFtrapo8UtPIqRRO22JRSKS8ploe4CGEV0SAP/SsKPvCx
Kuqqt2nFFHGp4mNFEVZdXFEBlV1wv0Vwv1XXVXv/v7kJFVy/3Tv9nXPmzJnXmTOTO7fEiMhCIZLI
27KouZ3MdDk0bwMZLcuXKlvb310O+QSRceQ17XMX+R/9qpLINIjI8Me5C1de87X/VCkaOEXEL25r
bZ7zjcW5lchqQ51L2qBIXWS5GfmJyA9rW7T0+sQONgP5hcibFy5uaWaD6BLklyJvXNR8fbscstyN
/CrklWubF7V+ZGqai/z9It++uGOpVk6i/T3Iu9uva22v73v1C+QxvkQNOoYkHgsZAaKRQmPYTZlA
luEJypTdlEGknQQwZu1k3zztlCgXnP8NNaJxEO2kZ9g8eob20ivsLGo9Rz3UTX+gdKqh+2kV3UXr
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
NDlMQ0x20yBzqtlmHmC2mBPNZrPRLJs5vhYNiuKH3yN+ewYZ8R2XkREBjV8uXbbhhGH6D48415iZ
44KtDpTqeN30Klan9rZQ3WxF/Wa6K8oSp81UDa4qpqbWUV1DlTrOUxc1afVqsadONU39lb+TsU0B
aFV+a5ThXTHKNKFaZxc3uR5iLGXdRrvgF6/bGAhQRtryioyK1PKU8bU1v0CCujJYg1emc0/GOQE8
wzNE3Vo33a8+NSSgFglBGxKoU/9PXPV68PntrK+mh30lWMDfI5Wzf/jqhV4qrwkE6qLsSt2OFPYV
7BAxYLAz55Ai7Egx58TstsfsclEfdsMEg11CAuXqdrkJCbqdzIRdZ8cwX03nMBDYpCvUodt0pCvn
2+zPhU0uCGzSQrRft9mfFhI2arneTHY2THJAYMLwTU83yWZZuok+8k7dpDBuclu/yW16T1JsNLqN
IGgm+fg5m+TjsDnPkf9dbK3yeFhXaaCl0YdrctDlawWC6oblbRlqaLaidLYERAFuq+7g7JY2wZtb
1YCrtUZtcdUonaV6vZ8VN4riUldNJzX6Gvydjd7Wmkipt9Tnaq4JdE2YOqb4gr5u6+9rzNRf6Guq
aGyM6GuCXu9nfRWL4gmir2LRV7Hoa4J3gt4X6TE+1d9ppqoArnI67+JJiYjXoN0ZqEqztZfrwVvq
zFht340Xkp2UhOurBR88kgER1wWVBZWiCHtKFA0Q30LiRRmrS5323WxnvMgGdYqrijxLl3Usowzf
vJrYXwceqJYuE0sRox6h+8UHJj581qjpwH9Y6tS86XVqBW63nSYTtMGaAHQl53RJST68i8eUI6As
EYaS1G8odGVCl5AQN/zPWNDHBDW804MXjRe7mDeHLaWOgKTm1DVwHAUNM+EG3Il343VJ/Eh0BDDB
DnwC7TjXmpiHh2I5wpQ7zmHpsrgU98PSONdNRZWOc+4415RHeIn+H/bYPYYKZW5kc3RyZWFtCmVu
ZG9iagoyOCAwIG9iago0NzIyCmVuZG9iagoyOSAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0
b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0Zv
bnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1ZITkFJUitBcmlhbE1UIC9J
dGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0
IDUyNSAvRm9udEZpbGUyIDI3IDAgUiA+PgplbmRvYmoKMzAgMCBvYmoKWyA1NTYgXQplbmRvYmoK
MTMgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvVkhO
QUlSK0FyaWFsTVQgL0ZvbnREZXNjcmlwdG9yCjI5IDAgUiAvV2lkdGhzIDMwIDAgUiAvRmlyc3RD
aGFyIDQ4IC9MYXN0Q2hhciA0OCAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2Jq
CjMxIDAgb2JqCjw8IC9MZW5ndGggMzIgMCBSIC9MZW5ndGgxIDY5ODggL0ZpbHRlciAvRmxhdGVE
ZWNvZGUgPj4Kc3RyZWFtCngBhVgNfFTFtT8zc/fuR3azmwD5Jns3S1bJJgSCGBLSZPOxARqRAEF3
KZEEiAQUiQYQLeLSiuiiQHmWCm1Fa1tpferNh7ggPqIgbVHEWostKqDFqv2Vgv35Uavkvv/cDdT0
+eu7s/9zzpw583XmzOydS4yInBQjQaFFy9u7yEbboHkZyFq0eqW2veu11ZDPEKnjr+9asjzy6Ee1
RNaRRJbfLrnxtuu3PvLUfjTwARHf2tnRvviTF7VzRO41qHNlJxTpy513Ia8jP6Zz+co1DmJu5F9H
3nbjikXtbBpdifxbyKvL29d0KTHn95FHf6Td1L6845Q2dQmRR5H5rhXdK427aTvyY5APdN3S0TV7
8NCHyF9F5DCgY0jycZIKEK2RGss+ygZyLI9RthKgLCLjfQBjNt4fXGp8IMsl539BjcQQiHbTE2wp
PUEH6AV2HrWeor3UT7+mTGqgH9FaeoA2opd50NxLs5Es0D/Aso1+KqVH4M9H6Chsr6V1tI8yWJbx
Id1JG8TvUGsDuaiAaqmZVtD97CpjFc2nU8p3qZyuopuoi8WMiLHZ2Gb8lH5Ge8WvjQuUQjm0COmo
8TfLH4y3qAQ1vk876BTbZn+aQuglBssf0y20U7QqzFhi/BMj8NGtGINCM+goG+BBtN5B77MstlbU
o5VHDd04BKs8aqVO2kn72CQ2lfss840ZxlHKQB9r0OoO6qU9SAl6jk4wp+W88VPjPGVTMU3HfPrp
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
junpTdTUUqdPDjYlrMZsvTzYpFubvxXpYWxzFFqd35NgeCdNMEOqNuTKG+NeYixtw/25kl++4f5o
lLIyVtdk1aRXp1U0NnwNaTOVbQ0X3wbAs4bJo/XtTXMi+i9HR/UyKRijo036f8kr5V585jsfbtjL
PpIsGtkrqtnfw7OlXlQ3RKNNCXaNaUca+wh2iBgw2NnySZN2pNnyk3Y7k3aFqA+7MZLBzm6nQtOu
0G437RQm7Xq6x4QbesaAwCZTo27TpjtT+6rNkULYFILAJiNGR0ybIxkxaaNXm83k5cEkHwQmDN8O
TZM8lmOamCPvMU1Kh0zuvWRyr9mTSI7GtJEEzbhOX7RxnYbNVxz5n8WOOrx/9U2JLpofxnW8zR/u
ANr0Tas7s/TYQk3rWRSVBbgVB9oWLuqUvL1Dj/o7GvRF/gatZ4pZ79+K58viKf6GHpofbon0zA91
NPROCU0J+9sbon1Tm68oH9bXvZf6uqL5a/pqlo1dIfuaatb7t77KZfFU2Ve57Ktc9jU1NNXsi8wY
b4702KguipdUk/fxFAfitS3XF63L8HRVm8E7xZe1LncfXkh2UwquyU58WHEBMq5LaktqZRH2lCxK
ld9choqy1k3x5e5ju4eKPFCn+esouHJV9yrKCi9tSP668UC1cpVciiQNSt3XPjAJ4/NJQ/dKoia9
aE6TXoNbdI/VCm1bQxS6you6lJQw3qyTynFQVkpDIS4ZSl2V1NntQ4b/NxbMMUEN7+zFi8azfSyU
z1ZSd1To+U0tHEdByzy4AXfvfXhdkn8S3VFMsBufWrsvtibnEaRkjjDl7otYuWpIGvLDyiFumsoq
3RfdcbGpoPQS/S8CyTp/CmVuZHN0cmVhbQplbmRvYmoKMzIgMCBvYmoKNDg0NAplbmRvYmoKMzMg
MCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIz
IC9EZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0g
L0ZvbnROYW1lIC9GRFJaQVYrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGlu
ZyAzMyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiAzMSAwIFIgPj4KZW5k
b2JqCjM0IDAgb2JqClsgNTAwIF0KZW5kb2JqCjIxIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0
eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0ZEUlpBVitBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgoz
MyAwIFIgL1dpZHRocyAzNCAwIFIgL0ZpcnN0Q2hhciAxMjAgL0xhc3RDaGFyIDEyMCAvRW5jb2Rp
bmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjM1IDAgb2JqCjw8IC9MZW5ndGggMzYgMCBS
IC9MZW5ndGgxIDc4MzIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVkLfFTF1T8z
9+4jyW72ZvPaJEv2LksWySYEAhheks1jgxqQV4JZSkwCRMJLggEEP4RFBTQgIJ9SoVZ8i/V1s4m4
gJYoVCuKqFhatVW01NevEewPtVbJ/f5zN0Rp/fW7k/OYM2dmzpxzZvbeCTEislGEJArOXdLUSk6q
geR1wMC5K5erO1vfXgn+LJF52LWt85fUPfRVGZFFJTK9NX/x6mvf2vzNixjgHOrdLc1N876xee8m
cnahz6UtEDiX2Dai/nfUB7UsWb4qNczBpipAyuKlc5ukc3w06irqiUuaVrXKN9vQP7UAdfW6piXN
Hyk1y1CfJOqtS9uW63X0JOqLUc9vvb65dXrvkc9RvwfddcgYinhsZKYM0GGgcYmYVoKVBygLkG16
jLJkP7mI9E8Bnwnau0D/TLQLyr+AfqwPiPbSU2wBPUWH6CV2Fr2eof3URb+nTKqke2kN3UWbMNMs
SG6n6SgmyO9iWXoXFdEDmPcBOgbdq2ktHaAM5tI/p3W0QTqBXhvITgOpjKbSUrqDTdJX0Gz6UL6F
SmgSXUetLKLX6Vv1HfrD9Ajtl36vn6ckyqa5KMf0L01/0v9MhehxN+2iD9mOhGcpiFki0Pw1XU+7
pXqZ6fP1f8ECL90AG2SaTMdYNw9g9Gb6lLnYGqkCozyka/oRaLmpnlpoNx1go9hE7jXN1ifrx+DJ
QlqFUXdRlPahxOgFeo/ZTGf1h/WzlEUFdAXW00VvsG6p9/z63lL4zQQvDaExaFlKv6VX6E3mYy/y
pSabqdgUNN2ov0NpNJxqYe1j6PkJ+5avRVknvSxX6eWUDL/cKbxNv6OPWDYrYlPYTD6EL+X3SdeT
FTMOR5lHC+DvezD6ByzA9nEbPy49JD8hf28e0HtKT0ZE/PQr+jW9yOxYqcra2M3sJPsrr+AN/Ff8
Y+ku+XH5bUsTVn0NLaE76An6ljnZaDaN/YK1sDVsE7uT7WLH2JvsM17Ga/gifkZqkZZJL8jlKDPk
NvkW00bTZvNnvXW9R3rf6v1WL9Y30jTkw3pYfzfdh5Xtp+P0LsqH9DEzsSSWjKIyL6tl/4Oylt3B
HmR72eOsC7O8yT5mn7N/sK/Z95xQzDyHe/lAFB+/nt/A7+L38uMob/K/8++kTGmgFJBGSeOlsLQU
Vm2StqM8K30kZ8vHZR1+LjbtNO0x7TU9YXrJdNZss9xsJevrPzx0Pv/8B73Ue1vvzt5ob5f+EaUj
htnwgofGw/omlIWI905k3DN0gtngu2yWzyawSfBMA1vIlrFV8OStbDd7xLD9afY8vPRHdgY227nb
sHkoH8XL+RSUa3gzX8a38x28i5/k/5IsUpLkkNKlfGmiVC81S8ul1dJOSZNel/4ifSx9I/2AosuJ
skceKPvlgDxRbpBXyPfJn8qfmmabXjP9zZxoXmLeaI6Zv7JcaplgmWqZZqm3bLPss7xjbUR2HqZn
6TlkYP/DTknrpZD0LG3lI+Qs/gZ/A/ncQPOkyRyZyvey2/hNrIsPMq0yj+Pj2FV0VvbD1y/zPfwb
Pk6azKrZDFrIh8cHNKfJvwE3Xj5MPfLzWNsbGHmV2cbW8jNmG0UZ8TE4iH4nDZMD0mv0nvQhs8gP
0PtyIstkPfwxaSqy4AV5gqmOvNK99LS0jN1Ez/IQTrDvrVuQx1ex3+BcqGHF7J+SThK/CllUIv2V
bqFF/E/Ug318G/2SzZPn01YawdbQp/QodsUQ03XmfHM6e5UvkNt5KusiLj+O1Y1hg5hkSqNbWb20
23yGv0sr6LicSB9IT8L64/xpabJ81jSdtWAH3EQbaZm+nlab6uS32XyS2EzKk0/hdFsjFcte0HU4
VWbjTNuH3X0A50CZNBkSFzJnEvKiFifEbpR7cE7IyKAF2ONX4xR7g7rMNTxG803JDKcOkfxa73Sa
pT9Ku/T5dJ2+gwpxHmzS12DEvfQ32kZ72Ybe/6FWysXO+YBNMlXx46YqvZC383f5DL7z4vjC23nM
RV+gPE1VNMF0kNrlP9IMKtW36H9Adl+CE3YXzaEr6TRW+SVmuFzqphG9V/EOvUpqxXo/pGn6Y7qH
JVKLvpim0PP0iMVETZZAsKK2pixYOuGy8ePGjhldMmrkiOLhw4qGFhYE8odcMtifN8g30Kt6cge4
c7KzXJkZ6WmpzhTFkWy3JSUmWC1mkyxxRgUhX1WjqvkbNdnvu/zyQlH3NUHQ9BNBo6ZCVHWxjqaK
fk1oukgzCM1r/00zGNcM9msyRR1P4wsL1JBP1Y5V+tQYmzWtDvwdlb6wqvUY/GSD327wdvBeLzqo
IVdLpaqxRjWkVa1saQ81VhYWsI6kxApfRXNiYQF1JCaBTQKnZfpaO1jmBGYwPDM0toOT1Y4latm+
ypCW5UNXDCPlhZrmaVOn1YUqc7zecGGBxirm+uZo5CvXHAFDhSqMaTRzhWYxplEXaFgNbVY7Crrb
t8QUmtMYsM3zzWuaXadJTRgjpKUEMG+llnnjadePVQzurKjb9NPWHKk95FqgCuX29k2qdv+0up/0
zfGKEcJhjIG+PK+qsb0KU29BpKpnqJiNbwjXaWwDplTFSsSq4utr9oWEpHGhqiX4yn0t7QsbEZrs
do2mr/ZGs7OD+/VTlB1S22vqfF6tNMcXbqp0d6RR+/TVnVlBNevilsKCDiUl7tiOZEcfY7P/lGmG
0+NtBmeoC656er9nmbDId4UWREbNVWFJnQ9rGi1Q82hqnzsaAcATZuilzUNEFmgJFY3tylghxxKZ
ZspTfGr714QM8PX8/WJJU5/EnKd8TaJR5El/qmms6QKvBQJafr5IEUsFYgobJxj1UYUFK2Pc52tV
VBC4j6bCt03hsUVwv9crArw5FqQ5qGiRaXXxukpzcqIULAqENd4oWrovtKTXipbIhZb+7o0+ZHKX
8fKXrln9/X8OJSM11DJWYxn/pbk53l49w1c9bVadGmpv7Mva6pqLavF24VD4DW19nJZaUSflcMgE
x3MkoxVJOXtWvwoqdTZNzsOf2UjqeTGLFVlpSJhapSmNl8dxONHr7dsz/1+nmH5W9DLIj936lqGN
DfQZGjdbG3dR/SLzbO1SdQ2OHF5dM6u9PfGiNqRa3Mor+ggynmrqvGqFRrXYmXn4i+ndowWEc7Qg
XIaWGuwiQxzO6atepJjT1ymMR2RnYUEVzsz29iqfWtXe2N4U0yNzfKria9/PX+IvtbeGcNrFEyem
H9ico1VtCcNjLWwstgencrGNK2rq+lZuhEVkN8IkfsRxJIsXVJP4IrBQeRdnp82WGN8VTCWTfFqi
RIt8mlGW1Ww6zaXn8cOfgNfAoeQKKN+MPz/+KuXc+Mnnx1MpeOUHoOHDvCnelDwghp+9H1Sp+4eg
ib4nVe7GXFSrfyqnmLpJoQGstoMLu4KJ2bmyKS3Xbs9MiOmfdTkcvFYwwSy7HVwK2YSEMmw2YJuQ
UVEgEDgGdIxKe0p7hg/L6TD/50jnMJJZjPRJl91uMF8Gs5KSwKWQIiSk2GwCC1n/kD+O2WVWsxQ3
0ifK1aTf4ujKADgBDv1UcI5s3sRvS7rN8WqyKcGS5OKh1EnpV2ZV5NSkzk6fnTU9Z5FlUdLc1MXp
i7Iac1bzG8wrk250bDLfY9mpvOp6j580n0x635Hdv/C2hKDXN3JYAqMEJYEnbPektBFSJpgMqYrP
GE7bc1/ZLHxeH+gBWhbo6Vs6q1+Gz5TR4mGAcDhVcV46ojgjw5mucLNv4GB/qpIxovjSFMXvG2gx
1y46cf/K6PLyhSceeGf1nfsfX7Pm8cfXrrmynp9gMrvsyYbOXv293t7ew0/d8xz7de8vz5zFu//C
Lxfgs5XRTP0TOQOxC7BwX+SSslxBERCXm5gwN2BDhQ3xJdodNkduYuKQ9Fy3nDvEbRpi99ltrixG
ThVO57WqxS9CLdT9RSKUx4pEIeeY0lKlR+lxjinqeVl52TlGORIoFoAYBy8x2TPsIftGuxxKuTpl
ZY40PWOxsjBtXsYK++q0jfb2tNtzHrEnmlQphgAlJdnsybKFYV4W4w93BrGAg3gxGkJ2NqrLZkuX
XQf4w5TFW4KDYaUJZtqdbQ3qUpWrLpEdasTS5jei4mfkV/wcFp97TrT4txe6Ymx0NOsEO8BG42O5
O5j0Y5wKYmxHx4VQnUOwAiJa5wL18YidP50iFqecrxcMS3Fmjhk+DJFj9VTPloVTSzJEtEaNFNEq
6WfNlsGXGlFNTzNbMvBmRb6B/pldnrsXrXvmwZtGTEpzJrXFNi5csCWty/vF06uOLrp23s3bez87
+aLObnHt2qTdvOaBtPv4qpvm3nzrreqzr8yPzmu4d2juC1u7e7/+BNufGfvSa3qUctnMeGz3E8O6
7CK6zJ2cmJue7nbG+MFgkkOWc932ZEYWV0z/wtitBmPkgdiTIo5iW2KZ548gdiJ0Q5zYuOZah4Gr
s1cPaB+wM/Wx1MO2k7b3c6wJqa7k/GwpYZhpWNIBbDAJ8VNSE9OdqalHkx1pyalpyQ47ghhMFYYE
k+9P5snJjmA66zPqOYfMTogAx5grqArzUhqUpco6ZZsiKwijywiji5FLcXEYGw+ja7vqfJ6NIge7
GzkxOpr87M+F03NxOH8MaD0OvR5E0VhofcqYonok7ulN1qEB003KEUJwjbgissvqA4GLAotopnrT
vRIiSulpFuxSf+0L6bsW39z11Jart1zy+Fb+7vnnptx6ZzezLr/j3O/Ps4jSvvnIg7ujU0oz+FdP
9q6c3fvNW6/cGT2F0GHVOLltx25/7dGzDY7xX1tzrEJKRw43O/tprf4JTvhu1BMMfdGAfpYJvVdR
hUL/eqZ3hDK2v0W0ikcW10VyG9UCZgoK2aUsjXN+CpyYVwbiuH0xASv4EpoJkR13TxLqQsPZN6YZ
dxg0dUrNlZW1gbLrFzQtnlxjaEBJH4xv6597ZAhTcdviIuqocZQNlDLpDEAHSOQBLgJMATQAtgH2
AMzk6JMsBV0HOAQ4CzBTUMqM7hgRjIFsNkjnwsXFRrUpXp1db1Q7rw7H6eRpcVp5RVxtbFxt+Mi4
eGh5nA4uiFNnXnEEg3cm2ou7yzKkDHoTwKkVmPEjSDOGL8P7pXTSAFyCqYYkKDk7B/mL9xySZGIS
lxhucjx6t8Si9pTiskSu8zPwo4d/yXviLbynMzmleE/ZlfxjegZwCCDxj1E+4h/ROgSHkQJcCtgD
OAQ4DjgDMPNTKB+ifMA/IAf/CxUBSgENgD2AQ4AzAAv/C7DC/yxCaGDBlwI4/zOwwt/Hst4HdvD3
wL3H39O7+YloyZji/QYTKOpjPHl9TGZOH+PMKI7xt6PfDfHE+F871YDn/rJh/B3SAMgbYAWgAqYC
GgGtADO4k+BOUgSwHXA/QAOY0eck+pxEn6OA1wEnaRggCJgKsPI3o5gmxo9H/eWesgxce7yCK0gP
P8bFtaWHv85fNuhr/HcGfRU0F/Kj/OVorofKktBO6KOAKqBFaDfxFzsHOT16WQo/BCd5gIsApYAp
gAbANoCZH+IDo/M8TgxykI5id3p4lD436KP0oJWCCz1BfwVyTBXIP/YycEB71D1+HvTv3IWqQP6t
O8AJ5L91CziB/DeuByeQf/FKcAL55y0EJ5B/VgM4gfxTasABxfh9zw0a7CmZsoipZQ5+A7x0A7x0
A7x0A8m4VUOh77D1PPxX0fx8eGx3MDAk3xM5wCLPs8h0FnmQRZpZZC2LrGeR8SxyDYsEWMTNIrks
EmSRg/g9ZBRhwa6LqmOCLhY5yiJPsUgbi/hZJI9FBrGIykqCMe6NXoGNBRIySGeZ2Ffc23nZhGIH
bPTCo16ktRfb/hDwcYBu1IJQUgfGlbNyBR3YmV8arw8dW7y07HJ+GB0PIwyH6UOAjAAdRhodxiCH
MZwDuBTQAOgGnAHoADO0B2Id2wzsAC4ClAIaAOsAZwBmw5wzMIXTUmBh4jOGYUXApYAposYPo4hr
Sy/3BgcobiWgXC5tczNHLpuSq+fyEsoQl/POFGtKjNn3fWv/57d2SihL4Fv5NhqAQGzvo9ui3w3A
r9E9Uf9BT1k6+yXl4vj1sDHkZ3mgo6nNqI8it1XIR5KbPwFaHHXPRDdH1F/gOcCSRa99nu/cpz2f
u2Mc7Gfug54/qjGZRT1/gOSJfZ533Ld7Xi2KWSF53h9jIAdUQ3W/e7TnqaOG6no07I561gqyz3OT
e6JnkdtoaI43XNOGWtDhme6f5bkc41W653iCbRhzn6fUfY1nfFxrlOizzzMMJgTibD6MHeI2JvXl
GgPWlsRYS7DAstNSZ5mCO85iS4HFa/FYBlhyLGlWp1WxJltt1kSr1Wq2ylaOW9008f4XEL8/aWb8
b4WRGQmNXzKDV3DCMOPHR5xrzMpxEaalStW8ekY5q9a651L1HFX7ZoYvxhKnzdJMvnKmOaupuqZc
Gx2ojln06VpJoFqzTP1FXQdjW8OQavy2GMM3XYzpQrQhR9y44P2JpWy4I0fQSzbcEQ6TK2NlqavU
OSFlTFXlz6BGQ9hYiU+bC4/rAgPqCgzQdlbPqNN+MyCsFQtGHxCu1v5XXMnsxzX52VDlfvaVIOG6
/dIE9o/QdCGXJlSGw9UxNtPQI5V9BT1kDAj0rLmkCj1Srblxvd1xvTz0h94gQaCXkEB5hl5eQoKh
JzOh19E2KFTZMQgIOpkqtRk6bZnqT3WO5kEnDwg6GRE6augczYgIHW2CMYzbDZVcIKgw3L0bKm6W
bagYlncYKkV9Krf3q9xuzCTFrTF0BMIw9lMXdOynoPMTR/53trk8EGCd48JzZ4dwndXoCzUDGrXN
K1tcWmSOqnbMDYsG3Cr5G+fMbRG0qVkL+5ortbm+SrVjnNHv35pni+ZxvsoOmh2qqeuYHWyujI4L
jgv5mirDnROnjiy5aK7b++caOfVn5poqBhsp5ppo9Pu3uUpE80QxV4mYq0TMNTE40ZiLjByfWtdh
pfIwrlwM2smTEpGvjTnecHmG0jrBSN5xXtfanAN4IdlLSbhmsuFi0g4QeV1YVlgmmrCnRFOyuLPs
a3KtHefNOcD29jUpEKf4yimwfEXbCnKFFlTG/9rwQLR8hQhFHAeE7GcfqIRw/VjZtpyoWsufUa2V
4haqw2KBtLEyDNnYC7KkpBA+QuPCoRCOFYqS1K8oZOOFLCGhT/E/c8GwCWJ4Zz9eNA52smAuW05t
YUnLra7hOApqZsENuLs6gNcl8SPRFsYC2/CvirYLo4l1BCheIyy57QIsX9HH9flheR81VEWXtgvu
uDBUQHiJ/g95zUfOCmVuZHN0cmVhbQplbmRvYmoKMzYgMCBvYmoKNTQzOAplbmRvYmoKMzcgMCBv
YmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9E
ZXNjZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0Zv
bnROYW1lIC9QT1RKRFUrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAz
MyAvTWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiAzNSAwIFIgPj4KZW5kb2Jq
CjM4IDAgb2JqClsgNTU2IDAgMCA1NTYgMCA1NTYgXQplbmRvYmoKMjAgMCBvYmoKPDwgL1R5cGUg
L0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvUE9USkRVK0FyaWFsTVQgL0ZvbnRE
ZXNjcmlwdG9yCjM3IDAgUiAvV2lkdGhzIDM4IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hhciA1
MyAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjM5IDAgb2JqCjw8IC9MZW5n
dGggNDAgMCBSIC9MZW5ndGgxIDc5MTIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngB
hVkJfFTV1T/3vjdLkknmJZNlkgwzbxgySiYhEJawRDJZJqAB2RLN0EQSQjRsEgyiWIRBRTSgoFUq
1IpbFbXoywIOiyUVqhVFVCyt2ipaLOrXCPZDrVXyvv99M6C0/vrNzdnP3c499773bogRkY0iJFGw
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
IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02
NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvSkpMQ1JMK0FyaWFsTVQgL0l0YWxpY0FuZ2xl
IDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250
RmlsZTIgMzkgMCBSID4+CmVuZG9iago0MiAwIG9iagpbIDU1NiAwIDU1NiAwIDAgNTU2IF0KZW5k
b2JqCjE4IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQg
L0pKTENSTCtBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo0MSAwIFIgL1dpZHRocyA0MiAwIFIgL0Zp
cnN0Q2hhciA0OCAvTGFzdENoYXIgNTMgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVu
ZG9iago0MyAwIG9iago8PCAvTGVuZ3RoIDQ0IDAgUiAvTGVuZ3RoMSA3NTc2IC9GaWx0ZXIgL0Zs
YXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZC3xUxdU/M/fuI8lu9iYhyeZB9i5LVskmJIRHeMTk5rEB
DW8SzVJiEiAlvCQYQLEIixXR8JRPUWgrvqpQXzcPcXlYUqFaUcSKpRWtIKVV+2sE+0P9rJL7/edu
QGn99buT85hzzsycOXNm9t4JMSJyUJgk0uYsbmqlRKqB5E3AoDkrlqnbW99ZAf4CkbXgx63zFtc9
8XkZkU0lsvx+3qKVP/7gvYFPooOLRHJPS3PT3C8d3u1ECd1oM6oFgsTFjntQ/wfqg1sWL7s9KcTv
I0pUUFcWLZnTJC1jEdTRH8Uubrq9Vb7L8SDquairtzQtbj7hHL8I9Ymi3rqkbZlRR79CHTLKab21
uXV635FPUX8YzQ3IGIp4HGSlFNACUEbclBHmSJb9lAZItzxNabKf3ETGx4BPBO2bb3wi9ILyv6MN
PDOBaDc9x+bTc3SIXmEX0OoF2kfd9DtKpUr6Oa2iB2g9RpoJyX00HcUC+QMszeimfHoM4z5Gx2B7
E62m/ZTC3MantIbWSSfQah05aRCV0VRaQpvYRGM5zaLT8k+piCbSLdTKwkadsdnYZjxJv6R90u+M
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
48VYRWKsIjHWeG28ORaZOT61rsNO5SFcOZi0i8fFIl8bM7yh8hSltcRM3nFe9+qM/Xgh2U1xuGZx
4GLOCRB5nVeWVyZU2FNCFS/u7PpV7tXjvBn72e5+lQJxgq+cAsuWty0nd3B+ZfSvDQ9Ey5aLpYji
gJD94AOTIK7fKtuWEVXrOTOq9VLcwnTYbJA2VoYgG3tZFhcXxJdSVDgUwrHCUJKuGApZsZDFxPQb
/mcumD5BjOjsw4vGgS6mZbFl1BaS9KzqGo6joGYmwoC7m/14XRI/Em0hTLANV/Vtl3sT8whQtEaY
cttlWLa8n+uPw7J+apqKJm2Xw3G5q4CIEv0fUcT0+QplbmRzdHJlYW0KZW5kb2JqCjQ0IDAgb2Jq
CjUyNTUKZW5kb2JqCjQ1IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkw
NSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUg
LTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvRlhGR0FHK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAg
L1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250Rmls
ZTIgNDMgMCBSID4+CmVuZG9iago0NiAwIG9iagpbIDU1NiA1NTYgMCAwIDAgNTU2IF0KZW5kb2Jq
CjE2IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0ZY
RkdBRytBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo0NSAwIFIgL1dpZHRocyA0NiAwIFIgL0ZpcnN0
Q2hhciA0OCAvTGFzdENoYXIgNTMgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9i
ago0NyAwIG9iago8PCAvTGVuZ3RoIDQ4IDAgUiAvTGVuZ3RoMSA3MzQ0IC9GaWx0ZXIgL0ZsYXRl
RGVjb2RlID4+CnN0cmVhbQp4AYVYC3hUxfU/M/fuI8kme/PePMjeZckq2YRAAMMjJpvHBjTyTjBL
g0mAlPCSYADFIiytCC5P+SsV2oqPVqFWvdlEXB6WVKhWFLFiacUW0NKq/RrBfqi1Su7/N3eXKK1f
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
oXM8Iyh0tHJjmNxcqOQBQYXhTtZQyWXZhopheZehUhxTuX9A5X5jJilqjaEjEIZJPH9VJ/E8dL7h
yP/OtlV5vax7fGBukx/XHC1ufxugRdu0st2hBeeoatfcgGjAbYOnZc7cdkFb27SAu61Gm+uuUbvG
G/3+rblJNI9313RRk7++savJ11YTHu8b73e31gS6J0wdVXrNXPcPzDVq6rfMNVUMNkrMNcHo929z
lYrmCWKuUjFXqZhrgm+CMRcZOT61sctKVQF8ihu0myfEI19bclyBqgylo9xI3vEux5qcg3gh2UsJ
uH6w4cIqESDyuqiyqFI0YU+JpiRxlxVrcqwZ78o5yPbGmhSIk91V5F2+onMFOfwLaqK/TjwQLV8h
QhHFXiH71gcqflxL1XQuJ6rTCmbUaRW4neiyWCBtqQlANu6qLCHBj2+pqHAYhOOEoiQNKApZmZDF
xcUU/zMXDJsghncO4EXjUDfz5bHl1BmQtLy6eo6joH4W3IA7jYN4XRJ/Ep0BLLATV9idV0cT6/BS
tEZYcudVWL4ixsX8sDxGDVXRpfOqO64O5RVeov8H4JC/IwplbmRzdHJlYW0KZW5kb2JqCjQ4IDAg
b2JqCjUwOTAKZW5kb2JqCjQ5IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50
IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02
NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvTlZRWUhSK0FyaWFsTVQgL0l0YWxpY0FuZ2xl
IDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250
RmlsZTIgNDcgMCBSID4+CmVuZG9iago1MCAwIG9iagpbIDU1NiAwIDAgMCAwIDU1NiBdCmVuZG9i
agoxNCAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9O
VlFZSFIrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKNDkgMCBSIC9XaWR0aHMgNTAgMCBSIC9GaXJz
dENoYXIgNDggL0xhc3RDaGFyIDUzIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRv
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
oyVL1bx6djmr1vqbqXq+qn0+2xNmsbPmaCZPOdOSqqm6tlwb76sOm/UarchXrZlnfre+i7F7g9Bq
fHOY4dsizHSh2pgtvvz7iDH7xnuyBb124z3BIGWkrSrNKE2aZJ9QVfktqNFQNlaK96/oL+MKA5rh
G6Jtr55drz09JKgVCkYfEqzWfiSuBvpwXXspUNnHPhEkWN8nTWJ/D9QIvTSpMhisDrMbDT9S2Sfw
Q8aAwM/iJFX4kWpxRvx2RvxyUB9+wwSBX0wM5Rh+OTExhp/MhF9Xx7BAZdcwIPikq9Rh+HSkq9/0
OZoDnxwg+KSF6KjhczQtJHy0SUYzDgdcnEBwYbgDNlwcLMtwMUbeZbgURF3uGnS5y+hJiozG8BEI
zcSfveITfxY+3wjk/2Zby30+1lMcbG4I4Fql0RNoBTRqW1a1ZWih+ara1RwUBtxueBvnN7cJ2tSq
BT2tlVqzp1LtKjbq/Ye5QZiLPZVd1BCore9q8LdWdhf7iwOepspgz+SZY4qu6uuuwb7GzPyWvmaK
xsaIviYb9f6jryJhniz6KhJ9FYm+JvsnG32RkeMz67ssVB7Ep79Be3hcLPK1MdsdLE+ztU8ykrfY
nbEuez9eSHZTHK47rLggiweIvM4vyy8TJuwpYUoQd2dRU8a6Ynf2frY7arJBbfeUk2/Fyo6VlBFY
WBn5d+AH1YqVYiki2Cd03/qDSwDXYJUdK4iqtdzZ1VopbkO6zGZoGyuD0E28oouLC+DbLaIcAeVE
4ShJg45CVyJ0MTFRx//OBWNMUCM6fXjRONDD/E62gjqCkuasruU4CmrnIAy4Q9mP1yXxkOgIYoId
uDLvuNKamIePIhJhyh1XYMXKKBeNw4ooNVxFlY4r4bjSlE9Eif4Ft5LYEQplbmRzdHJlYW0KZW5k
b2JqCjUyIDAgb2JqCjUxNTUKZW5kb2JqCjUzIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRv
ciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVzY2VudCAtMjEyIC9GbGFncyAzMgovRm9u
dEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250TmFtZSAvUlZIRVJMK0FyaWFsTVQgL0l0
YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMgL01heFdpZHRoIDIwMDAgL1hIZWlnaHQg
NTI1IC9Gb250RmlsZTIgNTEgMCBSID4+CmVuZG9iago1NCAwIG9iagpbIDU1NiAwIDU1NiBdCmVu
ZG9iagoxNyAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250
IC9SVkhFUkwrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKNTMgMCBSIC9XaWR0aHMgNTQgMCBSIC9G
aXJzdENoYXIgNDggL0xhc3RDaGFyIDUwIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+Pgpl
bmRvYmoKNTUgMCBvYmoKPDwgL0xlbmd0aCA1NiAwIFIgL0xlbmd0aDEgNzM3MiAvRmlsdGVyIC9G
bGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAt8VMXVPzP37iPJbrIJeWyyS/ZulizCJgQCGB4x2Tw2
oAF5JZilwSQkkfCSYHj6ISwqoAsC5VMqVMVnxVr15iEuoCWK1YoiVixtsQW0VLE/I9ifj1ol9/vP
3SVK66/fnT2POefMzJkzZ2bvHWJEZKEQSeRvXtLUTlaaDslbgOzmlcuVXe3vrgT/KZFx5E3t85fU
PfZ5GZHJSWT43fzFa27qPP3eg+jgIpEst7U2tXxlcd9HZPsCba5ugyBliWUjUXIe6kPalixfnfgR
exp1MYZl8dLmJpbKx6Fej7p5SdPqdnmDBe2TW1BXbm5a0no6pb4Z9TtFvX1px3KtlH6F+uOoX9V+
S2v7zP5XP0Ed/sZrkDEU8VjISCmgI0mOSTg8PkiZgCzDk5Qpe8lOpH0MOC9o/wLtvNALyv+OlpEY
EO2jZ9gCeoYO0yvsIlo9Rweoh35LGVRJD9Baupc2Y7Q5kNxNM1EMkN/LMrUeKqBHENdH6Bhsb6B1
dJDSmV37hNbTRukEWm1EtHOoDBFfSvewKdoKqqcz8h1URFPoZmpnIa1O26bt1B6nJ+iA9FvtEiVQ
FjWjHNM+M/xR+zPlo8V9tJvOsJ1xz5Mfo4Rg+SDdQnukuTLT5mv/ggduWgUfZJpKx1gv96H3VvqY
2dlaqQK9PKap2quwctJcaqM9dJCNZZO421CvTdWOUTrGWI1ed1MX7UeJ0Et0ilkMF7XHtYuUSXl0
LebTQ2+zXqn/0ob+UsTNgCgNo/HQLKVf0+v0DvOwl/lSg8VQaPAbbtXeo1QaRbXw9km0/Ih9zdeh
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
VHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQg
LTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUg
L1hBUUxEVStBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhX
aWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDU1IDAgUiA+PgplbmRvYmoKNTggMCBv
YmoKWyA1NTYgMCAwIDU1NiBdCmVuZG9iagoxMiAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlw
ZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9YQVFMRFUrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKNTcg
MCBSIC9XaWR0aHMgNTggMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDUxIC9FbmNvZGluZyAv
TWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNTkgMCBvYmoKPDwgL0xlbmd0aCA2MCAwIFIgL0xl
bmd0aDEgNzQ0OCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAt8U9X9/51zb27S
Nm2Tvh8huSE0StNSKI8CrTR9pIAFgdK6hhVpaSvlJcXyEIcQtiFYVNA5JsyJr03UobcPMAUcnTCd
KMLEsYmboMOh+4jg/j7mlN59z03oZPOzf05+7995/c7vnHvvIUZEVgqRRP7mpU3tFEszoXkN4Ghe
tULd3v7GKvAfECkjb25fsLT+8U/KiMwZRKbfLViy5uZX18VORQMfEcm1ba1NLZ/9n3s7kd2POuPa
oEhaat0I+TbIw9qWrrgt4a/sPsgPQbYuWdbcxFJ4I+TdkC1Lm25rlzdYfwxZg6ze0rS09fdxLcsg
nxBy+7KOFXopPQP5EuRr229tba8ZOPIhURLGE6tDx1DEz0oK2UBHYl5Cw037KROQZXqSMmUvwV8/
D8C89PMDC/UPhF1Q/jd4h6NAtJv2sIW0hw7Ri+wSaj1HfdRLv6V0qqSHaC09QJvQ0xxo7qIaFBP0
D7BMvZcK6FH0/Sgdg+93aB3tpzSWoX9I62mjdBK1NlI8DaUyRHsZ3cOm6Supgc7IP6Aimka3UDsL
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
U8a6Ynf2frY7arJBbfeUk2/Fyo6VlBFYWBn5d+AH1YqVYiki2Cd03/qDSwDXYJUdK4iqtdzZ1Vop
bkO6zGZoGyuD0E28oouLC+DbLaIcAeVE4ShJg45CVyJ0MTFRx//OBWNMUCM6fXjRONDD/E62gjqC
kuasruU4CmrnIAy4Q9mP1yXxkOgIYoIduDLvuNKamIePIhJhyh1XYMXKKBeNw4ooNVxFlY4r4bjS
lE9Eif4Ft5LYEQplbmRzdHJlYW0KZW5kb2JqCjYwIDAgb2JqCjUxNTUKZW5kb2JqCjYxIDAgb2Jq
Cjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvQXNjZW50IDkwNSAvQ2FwSGVpZ2h0IDcyMyAvRGVz
Y2VudCAtMjEyIC9GbGFncyAzMgovRm9udEJCb3ggWy02NjUgLTMyNSAyMDI4IDEwMDZdIC9Gb250
TmFtZSAvUlZIRVJMK0FyaWFsTVQgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WCjAgL0xlYWRpbmcgMzMg
L01heFdpZHRoIDIwMDAgL1hIZWlnaHQgNTI1IC9Gb250RmlsZTIgNTkgMCBSID4+CmVuZG9iago2
MiAwIG9iagpbIDU1NiAwIDU1NiBdCmVuZG9iagoxMCAwIG9iago8PCAvVHlwZSAvRm9udCAvU3Vi
dHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9SVkhFUkwrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IK
NjEgMCBSIC9XaWR0aHMgNjIgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDUwIC9FbmNvZGlu
ZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNjMgMCBvYmoKPDwgL0xlbmd0aCA2NCAwIFIg
L0xlbmd0aDEgNzM3MiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeAGFWAt8VMXVPzP3
7iPJbrIJeWyyS/ZulizCJgQCGB4x2Tw2oAF5JZilwSQkkfCSYHj6ISwqoAsC5VMqVMVnxVr15iEu
oCWK1YoiVixtsQW0VLE/I9ifj1ol9/vP3SVK66/fnT2POefMzJkzZ2bvHWJEZKEQSeRvXtLUTlaa
DslbgOzmlcuVXe3vrgT/KZFx5E3t85fUPfZ5GZHJSWT43fzFa27qPP3eg+jgIpEst7U2tXxlcd9H
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
Lff5WPfEYHN9ANcgjZ5AK6BR3bKyza6G5ilKZ3NQKHAb4W2c19wmaFOrGvS0VqrNnkqlc6Le7t/U
9UI90VPZSfWBmrrOen9rZddE/8SAp6ky2D1p+piiK8a6e2CsMdN/ZKzporMxYqxJert/G6tIqCeJ
sYrEWEVirEn+SfpYpOf49LpOM5UH8amu026eEI98bXS4g+XptvYSPXknuu3rHAfxQrKPEnA9YcGF
lhUg8jq/LL9MqLCnhCpR3HXFVPZ1E92Og2xfTGWDONlTTr7lKzpWkD2woDL668AD0fIVYimi2Cdk
P/rAJIBrq8qO5UTV6vBZ1Wopbi86TSZIGyuDkE24LEtICODjJSocAeEEYShJA4ZCVixkcXExw//M
Bd0niBGdA3jRONTN/NlsOXUEJTW7uobjKKiZgzDgzuMgXpfEn0RHEBPswBV3x+XexDx8FK0Rptxx
GZaviHGxOCyPUd1UNOm4HI7LXflElOj/AINHxCMKZW5kc3RyZWFtCmVuZG9iago2NCAwIG9iago1
MTE0CmVuZG9iago2NSAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUg
L0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0z
MjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL1hBUUxEVStBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9T
dGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUy
IDYzIDAgUiA+PgplbmRvYmoKNjYgMCBvYmoKWyA1NTYgMCAwIDU1NiBdCmVuZG9iagoxOSAwIG9i
ago8PCAvVHlwZSAvRm9udCAvU3VidHlwZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9YQVFMRFUrQXJp
YWxNVCAvRm9udERlc2NyaXB0b3IKNjUgMCBSIC9XaWR0aHMgNjYgMCBSIC9GaXJzdENoYXIgNDgg
L0xhc3RDaGFyIDUxIC9FbmNvZGluZyAvTWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKNjcgMCBv
YmoKPDwgL0xlbmd0aCA2OCAwIFIgL0xlbmd0aDEgNzU3NiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+
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
1RyAly0tIH5/BljxvwVGViQ0fslMXsEJw8wfH3GuMTvHRZCeJFXz6hnlrFrvmUPVs1X9yxm+CIud
NlO3+MqZnlhN1TXl+uhAdcRmTNeLAtW6beqP6joY2xyCVOf3Rhi+aSLMEKJ1GeLGAe9PLGHdpgxB
r123KRQid8qKUndpYknCmKrKH0CNprCxMvoeZ2L3VfxAfXv1jDr9VwNDeqFgjIGhav1/xJXEPlwT
XwhW7mOfCxKq2yeVsH8Gpwu5VFIZClVH2I2mHansc9ghY0BgZ88iVdiRas+K2u2M2mWjPewGCwK7
mBjKNu2yY2JMO5kJu462wcHKjsFAsElVqc20aUtVv29zNBs22UCwSQnTUdPmaEpY2OglZjeZmTDJ
AoIJw92zaZLJ0k0T0/MO0yS/3+S+Kyb3mSNJUW9MG4HQjfPMZRvnGdh8L5D/nW0uDwRY17jQnFlB
XOc0+oLNgEZ9w4oWtx6eraodc0JCgVsVf+PsOS2CNjXrIV9zpT7HV6l2jDPb/Zt6llCP81V20Kxg
TV3HLK25snOcNi7oa6oMdY2fOqLoqrHuuzLWiKk/MNZU0dkIMdZ4s92/jVUk1OPFWEVirCIx1nht
vDkWmTk+ta7DTuUhXDmYtIvHxSJfGzO8ofIUpbXETN5xXvfqjP14IdlNcbhmceBizgkQeZ1Xllcm
VNhTQhUv7uz6Ve7V47wZ+9nufpUCcYKvnALLlrctJ3dwfmX0rw0PRMuWi6WI4oCQ/eADkyCu3yrb
lhFV6zkzqvVS3MJ02GyQNlaGIBt7WRYXF8SXUlQ4FMKxwlCSrhgKWbGQxcT0G/5nLpg+QYzo7MOL
xoEupmWxZdQWkvSs6hqOo6BmJsKAu5v9eF0SPxJtIUywDVf1bZd7E/MIULRGmHLbZVi2vJ/rj8Oy
fmqaiiZtl8NxuauAiBL9H1HE9PkKZW5kc3RyZWFtCmVuZG9iago2OCAwIG9iago1MjU1CmVuZG9i
ago2OSAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdo
dCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAx
MDA2XSAvRm9udE5hbWUgL0ZYRkdBRytBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9M
ZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDY3IDAgUiA+
PgplbmRvYmoKNzAgMCBvYmoKWyA1NTYgNTU2IDAgMCAwIDU1NiBdCmVuZG9iago5IDAgb2JqCjw8
IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQgL0ZYRkdBRytBcmlhbE1U
IC9Gb250RGVzY3JpcHRvcgo2OSAwIFIgL1dpZHRocyA3MCAwIFIgL0ZpcnN0Q2hhciA0OCAvTGFz
dENoYXIgNTMgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVuZG9iago3MSAwIG9iago8
PCAvTGVuZ3RoIDcyIDAgUiAvTGVuZ3RoMSA3MDQwIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0
cmVhbQp4AYVYC3hU1bVee58zj0wmmcnkNckMmTOZZIBMQiA88iBNJo8J2IgJEGiGgiRAJEGQYADF
izC0IjqiWGup0FZsbSvWKicP0uHRSxRqWxSx1tLWKqDSC/ZrBPtVrVVy7r/PhFR6/Xpnz3qv/Vp7
7X3OPsSIyEoRkii4fE17N5npm9C8DHAu37he2d392kbwF4iMk2/pXrmm9ckPaohMaUSG36xcvemW
5wdn3Y0GLhHxE50d7Ss+/IMnSGT7KerM6ITCscZ6D2TUp7zONevvtBDzEtnNkM2r1y5vZ8toBmQ7
ZOOa9ju75Yj1W5CdkJXb2td0vKnMuQVymZC71/as13bQbsitkP3dt3d0zxs58R7kCJFFg46hiJ+V
jACiTUJjOExZgGzDU5Ql+wltaxcBGLN2caRLuyTsgvK/oEZsFIj207Osi56lY/QCu4JaB+gQDdCv
KJPq6bu0mR6lHehlETT30zwUA/SPsixtgIrp+4jn9+kUfL9CW+gwZTCn9h5tpe3Sb1FrOyVRLtVQ
M62lB9mN2gZaTOfkr1Mp3Ui3UTeLaK3aQ9oj2g/pR3RI+pV2lRIpm5ajnNLeN/xBe5OKUONbtIfO
sUcSDlIQvUTg+T26nfZKS2SmrdT+iRF46Q6MQaY5dIoN8QBa76CLzMk2S3Vo5UlN1U7Ay01LqJP2
0mE2nc3iXsNibY52ijLQx51odQ/10SBKjH5ObzCr4Yr2Q+0KZVEh3YD5DNArbEgaubptpBpxMyBK
E6kclrX03/RLepX52PN8rcFqKDEEDXdpr1MaTaEFGO1TqPk/7GO+BWWr9KLcoNVSMuLyDRFt+gW9
zbJZMWtiC/lEvpY/Lt2OvCxE3Sm0groQ78fQ+lkWYIPcyk9LT8rPyJ8ax42c15KxIn76Dn2PnmdJ
mKnCetjX2Bn2Lq/jS/l3+DvSo/LT8mumdsz6ZlpDD9Iz9DFzsDI2l32VdbLNbAf7BtvDTrFX2SVe
w1v4rfyy1Cmtk34u16LMl3vkrxvuNTxgvDTSOnJi5DcjH2sl2r00F/mwDaP/Fj2OmR2i0/RHlHP0
DjOwRJaMojAvW8D+C2ULe5D9gO1nT7MB9PIqe4e9x/7GPmSfckIxchf38lwUH7+d38Ef5d/lp1Fe
5X/ln0iZUq4UkKZLlVJYWotR7ZAeRjkovS1ny6dlDXEuMew27DPsNzxjeMFwxWg1fc1M5pc/e/Jq
wdWzIzRy38jukb6RAe1tSscaZiMKHqrE6NtRVmG9dyPjDtBvmRWxy2YFrIrdiMgsZavYOnYnInkP
28t+pI/9OXYUUfo9u4wxJ3G3PuZJfDqv5U0oN/MOvo4/zB/hA/wM/6dkkhIlm5QuFUizpCVSh7Re
2iTtllTpZekt6R3pI+kzFE22yB45V/bLAXmWvFTeID8uX5QvGhYbXjL82WgxrjHea4wZPzDNMFWZ
mk1zTUtMu0yDptfNbcjO43SQfoYMHPux89I2KSQdpIf4VDmLv8JfQT4vpRXSHI5M5fvZffxuNsDz
DHcaZ/KZ7Ca6IvsR6xf5Pv4RnynNYY1sPq3iU+INGtPkn4CrlI/TsHwUc3sFLd9ptLIt/LLRSn2M
eDkOn19Ik+WA9BK9IZ1jJvn79CfZwjLZMH9KakYW/FyuMrSSV/ouPSetY3fTQR7CqfWpeSfy+Cb2
E5wLLayE/UPSSOI3IYtKpXfp63Qr/wMNYx/fR99mK+SV9BBNZZvpIv0Yu2Ki4TZjgTGd/Zp3yVGe
ygaIy09jduUsj0mGNLqHLZH2Gi/zP9IGOi1b6Kz0U4z+NH9OmiNfMcxjndgBd9O9tE7bRpsMrfJr
bCVJbCHly+dxum2WSmQv6FacKotxpg1idx/GOVAjzYHGicy5EXmxACfEXpTHcE7IyKAu7PGv4BR7
hQaMLTxGKw3JDKcOkfzSyDxapP2Y9mgr6TbtESrCebBD24wW99OfaRftZ9tH/ou6KQc75yy70dDA
TxsatCIe5X/k8/nu69cX0c5nTvoLynPUQFWGIxSVf0/zqVrbqf0O2T0BJ+weWkZfxrNrDb2PHmZL
QzR15CbeqzVI3ZjvOZqrPaV5mIU6tdXUREfpRyYDtZsCwboFLTXB6qovVc6sKC8rnT5tasmUycWT
igoDBRMnjPfn5/lyvYonZ5zblZ3lzMxIT0t1pNhtyUnWREuC2WQ0yBJnVBjyNbQpqr9Nlf2+2bOL
hOxrh6L9c4o2VYGq4XofVRH12mG6zjMIz1v+zTMY9wyOeTK7UkmVRYVKyKeop+p9SowtmtsK/sF6
X1hRh3V+js4/rPNJ4L1eVFBCzs56RWVtSkht2NgZDbXVFxWy3kRLna+uw1JUSL2WRLCJ4NRMX3cv
y6xiOsMzQxW9nMxJmKKa7asPqVk+VEUzUn6ofYXaPLc1VO/yesNFhSqrW+5bppKvVrUFdBeq07tR
jXWqSe9G6VIxG3pA6S0ciu6M2WlZW8C6wreifXGrKrWjjZCaEkC/9WrmXRec/xLRuKOudcfnrS4p
GnJ2KcI5Gt2hqE/Mbf1cXZdXtBAOow3U5fkNbdEGdL0TK9U4X0FvfHu4VWXb0aUiZiJmFZ9fhy8k
NG2rFDXBV+vrjK5qw9JkR1Wat8nbl50dPKSdp+yQEm1p9XnVapcv3F7v7k2j6LxN/VlBJet6S1Fh
rz0lHtjeZNsoY036PNOBoMdtOqe7C65x3lhkmRiR7wY1iIxarmAkrT7MqUygjjKKLi/DAuAXZqil
rsCKdKkJdW1Re4XQY4pMNeTbfUr0Q0IG+Ib/er2mfVRjzLd/SMIo8mQs1VTWfo1XAwG1oECkiKkO
a4oxVuny9KLCjTHu83XbFRCEj5oR2/ZwRTHC7/WKBX4gFqRlENTI3Na4rNAyVx8FiwNhlbcJy9A1
S/oCYYlcs4xVb/Mhkwf0V8B01ewf+9vsGamhzgqVZfwHc0fc3jjf1zh3UasSiraNZm1jy3VS3C4C
irjBNsqpqXWtkotDJzjuknQrknLxojEXCK1WVc7H36gn9YqYyYys1DVMaVDtbbPjOGzxekf3zP9X
KaZdEbV08q9qo9NQKwKjA40PW515nXzd8KxRqbEFRw5vbFkUjVqusyHV4qO8YZQg46ml1avUqbQA
OzMf/5g2VCYg7FKDCBksLdhFujrsGhWvc3SNVgrjJ7KzqLABZ2Y02uBTGqJt0faYFlnmU+y+6CH+
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
jPhmzMiIhMaTS+ftOGGY/uAR5xozc1z+1VSpkTfOr2WN6tByalymqB/N98WYZe4i1eCrZaqjkRpb
atWyQGPMpM1TSwONqqn5q629jD0Uhlbl98UY3mNjTBOq7S5xyzxEjKVsf9Al6ITtD4bD5MzYWO2s
dlSllDfUfwFq05Vt9eIdYfTnvMaAOgPj1N2N81vVn4wLqyWC0caFG9VvimvoIXwavBKqP8Q+ECTc
ekiqYn8LzRN6qao+HG6MsYW6HynsA/ghY0DgZ84hRfiRYs6J++2N++WjPvzyBIFfQgLl6375CQm6
n8yEX29PXqi+Nw8IPpkK9eg+PZnK531O5sMnHwg+GRE6qfuczIgIH7VKb8bthksOEFwYvjfqLm6W
rbvoI+/VXYpHXe4fc7lf70mKj0b3EQjNJJ2/5pN0Hj6fC+R/ZjtqAwHWPzO8fHEIV/g2X6gD0KY+
sLHTqUaWKUrv8rAw4Cbtb1u2vFPQ9g417OuoV5f76pXemXq9fzMvFuaZvvpeWhxqae1dHOyo75sZ
nBnytdeH+2c1Tyu9rq/7x/qa1vwFfTWLxqaJvmbp9f6tr1JhniX6KhV9lYq+ZgVn6X2RnuPNrb1m
qg3jLVWn/TzRgnxtc3nDtRn27io9eWd6nVtch/FCsp8ScbW24mNMEkDkdVFNUY0wYU8JU7L4TjNq
cm6Z6XUdZvtHTXaoU3y1FFi/oWcDOUNd9fF/D35Qrd8gliKOA0L3hT+4hPDJpb5nPVGjWoB37mq8
c/eaTNC21Yehq7imS0wM4WoZV06CskI4StKYo9BVCl1Cwqjj/80FfUxQ6+/wEX6knwVz2HrqCUtq
TmMLx1HQsghhwH39MF6XxEOiJ4wJ9uDzbM+11sQ8AhSXCFPuuQbrN4xyo3FYP0p1V1Gl51o4rjUV
EFGi/wXdJ0t1CmVuZHN0cmVhbQplbmRvYmoKNzIgMCBvYmoKNDkwNgplbmRvYmoKNzMgMCBvYmoK
PDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Bc2NlbnQgOTA1IC9DYXBIZWlnaHQgNzIzIC9EZXNj
ZW50IC0yMTIgL0ZsYWdzIDMyCi9Gb250QkJveCBbLTY2NSAtMzI1IDIwMjggMTAwNl0gL0ZvbnRO
YW1lIC9MQ09aQVYrQXJpYWxNVCAvSXRhbGljQW5nbGUgMCAvU3RlbVYKMCAvTGVhZGluZyAzMyAv
TWF4V2lkdGggMjAwMCAvWEhlaWdodCA1MjUgL0ZvbnRGaWxlMiA3MSAwIFIgPj4KZW5kb2JqCjc0
IDAgb2JqClsgNTAwIF0KZW5kb2JqCjIyIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9U
cnVlVHlwZSAvQmFzZUZvbnQgL0xDT1pBVitBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo3MyAwIFIg
L1dpZHRocyA3NCAwIFIgL0ZpcnN0Q2hhciAxMjEgL0xhc3RDaGFyIDEyMSAvRW5jb2RpbmcgL01h
Y1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjc1IDAgb2JqCjw8IC9MZW5ndGggNzYgMCBSIC9MZW5n
dGgxIDcxMTIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCngBhVgLeBTV9T/3zszuJtlk
NwHy2iU7y5JVsomB8AiEmGweG9DIO9hdGsyGkBJeEgwPsQhLLaKLCvVvUWgrWtuKtepkE3GDWqKo
rShCxdIWW0GkRfsVwX5Va9HM/3dnl9RYv3bu/s4595xzX+eeuTszxIjIShGSyN+2srWT0ug6aF4H
8tvWrVF3db65DvL7RKax3+pcsjL4yEc1ROZcIuU3S1Zs+NbzvksRdPA3IknuaG9d/InVvYvIdhFt
JnVAkbXSupXIfiXqoztWrrk54y98AupiDOuKVW2tbDiLox5E3bKy9eZOeYv1+6iHUVdvbF3Zfsw2
6wbUI6LeuaprjV5NP0f9IdSv7LypvXPuwEsfoP5rolQdOoYiLiuZKAN8LHFoOGZ7gPKAfOVRypO9
hPnr5wCsSz83sFR/X9gF539FK8zIANE+eoItpSfoIL3ILqLVU9RHvfRryqF6+iFtpPtoG0ZaAM2d
NBdFgf4+lqf3Uik9jJg+TEfg+w3aRAcom+XqH9Bm2iodR6utlE6jqIZm0yq6m12nr6VmOiXfRuWI
/43UySJ6UL9Hv1f/Cf2U+qRf619gZ/KpDeWI/qHye/2PVIIW36fddIrdm/I0+TFKBJ4/optoj7RQ
ZvoS/V+YgZvWYw4yzaAjrJ/70Hs7nWO5bKNUh14e0TX9JXg5aSF10B46wCayadytNOsz9COUjTFu
Rq+7KUb7UeL0PJ1kVuWi/hP9IuVRMV2D9fTSG6xfGvhiy0A14qYgSmNoCiyr6Jf0KzrGPOwFvkqx
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
i1Ttk3meOEuds0BTPLVMy2qkxqZabbKvMW7W52rlvkbNPPubwW7G7glBq/E74gzPwnGmC9VWh3hT
7SPGMrfe7RD8yq13h0KUm72uOrc6qypzSkP915CwoQzXJ/7/DZo7RB6p7WqcF9R+PjKklQlBHxlq
1P5PvMr24fPixUB9H/tIsFCwT6pifw/MFXqpqj4Uaoyz6w0/UtlH8EPGgMHPUkCq8CPVUpDw25Pw
K0R7+I0WDH4pKVRo+BWmpBh+MhN+3V2jA/Xdo0Hgk6NSl+HTlaN+2edwIXwKQeCTHaHDhs/h7Ijw
0aqMbpxOuBSAwIXhm6Xh4mT5hosx827DpTTpcuegy53GSFJiNoaPIOgm/fRln/TT8PlSIP+72F7r
87GeqaG25gA+A4Q9gXYgrG1f15GrRRapandbSBjwNu4NL2rrELy1XQt52uu1Nk+92j3VaPcVc7Mw
T/XUd1NzoCnY3exvr49N9U8NeFrrQz3TZk8oHzLWnYNjTZj9NWPNFp1NEGNNM9p9ZaxyYZ4mxioX
Y5WLsab5pxljkZHjs4PdFqoN4VXV4D08LRX5Gna4Q7XZ9s4qI3mnunM3OQ7ggWQfpeH13IoPOumA
yOuSmpIaYcI9JUwZ4ltP0pS7aarbcYDtS5rsUGd6asm3Zm3XWsoNLK1P/LpwQbVmrdiKBPUJ3dde
cAngs0191xqiRq1oXqNWjbf3brMZ2nB9CLqKy7q0tACesBPKq6CsEI6SNOgodJVCl5KSdPzPXDDm
BDWi04cHjWd7mL+AraGukKQVNDZxHAVNCxAGvPMfwOOS+JPoCmGBXfjE23W5N7EOHyVqhCV3Xcaa
tUkpGYc1SW64iiZdl8NxuSufiBL9PwiSc1sKZW5kc3RyZWFtCmVuZG9iago3NiAwIG9iago0ODg4
CmVuZG9iago3NyAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0Nh
cEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUg
MjAyOCAxMDA2XSAvRm9udE5hbWUgL05KQ0lBRytBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVt
VgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDc1
IDAgUiA+PgplbmRvYmoKNzggMCBvYmoKWyA1NTYgNTU2IF0KZW5kb2JqCjggMCBvYmoKPDwgL1R5
cGUgL0ZvbnQgL1N1YnR5cGUgL1RydWVUeXBlIC9CYXNlRm9udCAvTkpDSUFHK0FyaWFsTVQgL0Zv
bnREZXNjcmlwdG9yCjc3IDAgUiAvV2lkdGhzIDc4IDAgUiAvRmlyc3RDaGFyIDQ4IC9MYXN0Q2hh
ciA0OSAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcKPj4KZW5kb2JqCjc5IDAgb2JqCjw8IC9M
ZW5ndGggODAgMCBSIC9MZW5ndGgxIDcxMTIgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFt
CngBhVgLeBTV9T/3zszuJtlkNwHy2iU7y5JVsomB8AiEmGweG9DIO9hdGsyGkBJeEgwPsQhLLaKL
CvVvUWgrWtuKtepkE3GDWqKorShCxdIWW0GkRfsVwX5Va9HM/3dnl9RYv3bu/s4595xzX+eeuTsz
xIjIShGSyN+2srWT0ug6aF4H8tvWrVF3db65DvL7RKax3+pcsjL4yEc1ROZcIuU3S1Zs+NbzvksR
dPA3IknuaG9d/InVvYvIdhFtJnVAkbXSupXIfiXqoztWrrk54y98AupiDOuKVW2tbDiLox5E3bKy
9eZOeYv1+6iHUVdvbF3Zfsw26wbUI6LeuaprjV5NP0f9IdSv7LypvXPuwEsfoP5rolQdOoYiLiuZ
KAN8LHFoOGZ7gPKAfOVRypO9hPnr5wCsSz83sFR/X9gF539FK8zIANE+eoItpSfoIL3ILqLVU9RH
vfRryqF6+iFtpPtoG0ZaAM2dNBdFgf4+lqf3Uik9jJg+TEfg+w3aRAcom+XqH9Bm2iodR6utlE6j
qIZm0yq6m12nr6VmOiXfRuWI/43UySJ6UL9Hv1f/Cf2U+qRf619gZ/KpDeWI/qHye/2PVIIW36fd
dIrdm/I0+TFKBJ4/optoj7RQZvoS/V+YgZvWYw4yzaAjrJ/70Hs7nWO5bKNUh14e0TX9JXg5aSF1
0B46wCayadytNOsz9COUjTFuRq+7KUb7UeL0PJ1kVuWi/hP9IuVRMV2D9fTSG6xfGvhiy0A14qYg
SmNoCiyr6Jf0KzrGPOwFvkqxKmWKX7lFf4uG0ziaj9k+ipZ/YZ/yTSibpVfkBr0We7aVvieiTS/T
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
7glBq/E74gzPwnGmC9VWh3hT7SPGMrfe7RD8yq13h0KUm72uOrc6qypzSkP915CwoQzXJ/7/DZo7
RB6p7WqcF9R+PjKklQlBHxlq1P5PvMr24fPixUB9H/tIsFCwT6pifw/MFXqpqj4Uaoyz6w0/UtlH
8EPGgMHPUkCq8CPVUpDw25PwK0R7+I0WDH4pKVRo+BWmpBh+MhN+3V2jA/Xdo0Hgk6NSl+HTlaN+
2edwIXwKQeCTHaHDhs/h7Ijw0aqMbpxOuBSAwIXhm6Xh4mT5hosx827DpTTpcuegy53GSFJiNoaP
IOgm/fRln/TT8PlSIP+72F7r87GeqaG25gA+A4Q9gXYgrG1f15GrRRapandbSBjwNu4NL2rrELy1
XQt52uu1Nk+92j3VaPcVc7MwT/XUd1NzoCnY3exvr49N9U8NeFrrQz3TZk8oHzLWnYNjTZj9NWPN
Fp1NEGNNM9p9ZaxyYZ4mxioXY5WLsab5pxljkZHjs4PdFqoN4VXV4D08LRX5Gna4Q7XZ9s4qI3mn
unM3OQ7ggWQfpeH13IoPOumAyOuSmpIaYcI9JUwZ4ltP0pS7aarbcYDtS5rsUGd6asm3Zm3XWsoN
LK1P/LpwQbVmrdiKBPUJ3ddecAngs0191xqiRq1oXqNWjbf3brMZ2nB9CLqKy7q0tACesBPKq6Cs
EI6SNOgodJVCl5KSdPzPXDDmBDWi04cHjWd7mL+AraGukKQVNDZxHAVNCxAGvPMfwOOS+JPoCmGB
XfjE23W5N7EOHyVqhCV3XcaatUkpGYc1SW64iiZdl8NxuSufiBL9PwiSc1sKZW5kc3RyZWFtCmVu
ZG9iago4MCAwIG9iago0ODg4CmVuZG9iago4MSAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0
b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAvRmxhZ3MgMzIKL0Zv
bnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL05KQ0lBRytBcmlhbE1UIC9J
dGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAyMDAwIC9YSGVpZ2h0
IDUyNSAvRm9udEZpbGUyIDc5IDAgUiA+PgplbmRvYmoKODIgMCBvYmoKWyA1NTYgNTU2IF0KZW5k
b2JqCjE1IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UcnVlVHlwZSAvQmFzZUZvbnQg
L05KQ0lBRytBcmlhbE1UIC9Gb250RGVzY3JpcHRvcgo4MSAwIFIgL1dpZHRocyA4MiAwIFIgL0Zp
cnN0Q2hhciA0OCAvTGFzdENoYXIgNDkgL0VuY29kaW5nIC9NYWNSb21hbkVuY29kaW5nCj4+CmVu
ZG9iago4MyAwIG9iago8PCAvTGVuZ3RoIDg0IDAgUiAvTGVuZ3RoMSA3OTEyIC9GaWx0ZXIgL0Zs
YXRlRGVjb2RlID4+CnN0cmVhbQp4AYVZCXxU1dU/9743S5JJ5iWTZZIMM28YMkomIRCWsEQyWSag
AdkSzdBEEkI0bBIMoliEQUU0oKBVKtSKWxW16MsCDoslFaoVRVQsrdoqWizq1wj2Q61V8r7/fTOg
tP76zc3Zz93OPfe+926IEZGNIiRRsGVxczspdAU0rwEGtyxfpm5uf2s5+NNE5uFXt1+zuP6xL8qJ
LCqR6c1rFq24+n8CBYvRwBnYlbbW5nlf/q93M5FDRp0xbVCkLbbdDrkU8pC2xctudITZ3yA3QVYW
LWlpll0cvKMdcuLi5hvb5Vts90NeCVm9tnlx6zsJDS2QHxRy+5KOZXo9PQN5H+T89uta22cOHPwU
8ieorkPHUMTPRmbKBB0OKjRcKDFHMu2hbECO6UnKlv3kJNJPAlBfPzkwX/9E2AXln8E/Ggei7bSD
zacdtJ9eZKdR6znaTb30e8qiKnqQVtJ9tA49zYbmTpqJYoL+Ppat91IRPYJ+H6HD8L2SVtEeymRO
/VNaTWulo6i1lpJpMJXTdFpCd7Ep+vXUQB/It1IJTaFrqZ1F9Hr9bv1e/XH6Fe2Wfq+fpSTKoRaU
w/rnpj/pf6ZC1LifttAH7N6EnRRELxF4/pKuo61So8z0a/R/YQReugFjkGkqHWZ9PIDWW+kkc7KV
UiVaeUzX9IPwclEjtdFW2sNGs0nca2rQp+qHEclCuhGtbqFu2oUSpRfoXWYzndYf109TNhXQpZhP
L73O+qSBs2sGyhA3E6I0lMbBsoR+Qy/TG8zHfsuXmGymYlPQdJP+NqXTCKrDaJ9Ezb+xr/kqlNXS
S3K1XkEpiMs9Itr0O/qQ5bAiNo1dwYfyJfwh6TqyoscRKPNoPuL9AFp/nwXYLm7jR6TH5Gfkb82D
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
+rrzfF+jpv9IX9NFY6NEX5OMev/WV4kwTxJ9lYi+SkRfk4KTjL7IyPHp9V1WqgjjCsegPTwpEfna
lOsNV2Qq7RON5J3gda7K3YMXku2UhGsrGy46kwEirwvLC8uFCXtKmFLEHWjc5Fw1wZu7h22PmxSo
U30VFFh2fcf15AzNr4r9deAH1bLrxVLEcEDofvQHlxCuM6s6lhHVaPmzarQy3Gp1WSzQNlWFoRt/
TpeUFMI3eEw5DMrxwlGSzjsKXanQJSTEHf8zF4wxQY3o7MaLxt4eFnSzZdQRljR3TS3HUVA7G2HA
XdgevC6Jh0RHGBPswL8+Os61JuYRoJhEmHLHOVh2fZyLx2FZnBquokrHuXCcayogokT/B4S7WL8K
ZW5kc3RyZWFtCmVuZG9iago4NCAwIG9iago1NTA4CmVuZG9iago4NSAwIG9iago8PCAvVHlwZSAv
Rm9udERlc2NyaXB0b3IgL0FzY2VudCA5MDUgL0NhcEhlaWdodCA3MjMgL0Rlc2NlbnQgLTIxMiAv
RmxhZ3MgMzIKL0ZvbnRCQm94IFstNjY1IC0zMjUgMjAyOCAxMDA2XSAvRm9udE5hbWUgL0pKTENS
TCtBcmlhbE1UIC9JdGFsaWNBbmdsZSAwIC9TdGVtVgowIC9MZWFkaW5nIDMzIC9NYXhXaWR0aCAy
MDAwIC9YSGVpZ2h0IDUyNSAvRm9udEZpbGUyIDgzIDAgUiA+PgplbmRvYmoKODYgMCBvYmoKWyA1
NTYgMCA1NTYgMCAwIDU1NiBdCmVuZG9iagoxMSAwIG9iago8PCAvVHlwZSAvRm9udCAvU3VidHlw
ZSAvVHJ1ZVR5cGUgL0Jhc2VGb250IC9KSkxDUkwrQXJpYWxNVCAvRm9udERlc2NyaXB0b3IKODUg
MCBSIC9XaWR0aHMgODYgMCBSIC9GaXJzdENoYXIgNDggL0xhc3RDaGFyIDUzIC9FbmNvZGluZyAv
TWFjUm9tYW5FbmNvZGluZwo+PgplbmRvYmoKMSAwIG9iago8PCAvVGl0bGUgKFF1YXJ0eiAlZCkg
L0NyZWF0b3IgKFF1YXJ0eiBSIERldmljZSkgL1Byb2R1Y2VyIChNYWMgT1MgWCAxMC41LjQgUXVh
cnR6IFBERkNvbnRleHQpCi9DcmVhdGlvbkRhdGUgKEQ6MjAwODA4MDkxNTE1MzBaMDAnMDAnKSAv
TW9kRGF0ZSAoRDoyMDA4MDgwOTE1MTUzMFowMCcwMCcpCj4+CmVuZG9iagp4cmVmCjAgODcKMDAw
MDAwMDAwMCA2NTUzNSBmIAowMDAwMDkwMTQ0IDAwMDAwIG4gCjAwMDAwMDM0NzUgMDAwMDAgbiAK
MDAwMDAwNDg5OCAwMDAwMCBuIAowMDAwMDAwMDIyIDAwMDAwIG4gCjAwMDAwMDM0NTUgMDAwMDAg
biAKMDAwMDAwMzU4OCAwMDAwMCBuIAowMDAwMDA0ODYyIDAwMDAwIG4gCjAwMDAwNzg0NzUgMDAw
MDAgbiAKMDAwMDA2NzU5MiAwMDAwMCBuIAowMDAwMDU2MTE3IDAwMDAwIG4gCjAwMDAwODk5NzIg
MDAwMDAgbiAKMDAwMDA1MDQxNCAwMDAwMCBuIAowMDAwMDEwMTQ2IDAwMDAwIG4gCjAwMDAwMzkw
NDcgMDAwMDAgbiAKMDAwMDA4MzkwOCAwMDAwMCBuIAowMDAwMDMzNDAzIDAwMDAwIG4gCjAwMDAw
NDQ3NTAgMDAwMDAgbiAKMDAwMDAyNzU5MiAwMDAwMCBuIAowMDAwMDYxNzgxIDAwMDAwIG4gCjAw
MDAwMjE1MjggMDAwMDAgbiAKMDAwMDAxNTUzMiAwMDAwMCBuIAowMDAwMDczMDM5IDAwMDAwIG4g
CjAwMDAwMDM5MDIgMDAwMDAgbiAKMDAwMDAwMzk0NyAwMDAwMCBuIAowMDAwMDA0ODQyIDAwMDAw
IG4gCjAwMDAwMDQ5OTAgMDAwMDAgbiAKMDAwMDAwNTA1NCAwMDAwMCBuIAowMDAwMDA5ODY2IDAw
MDAwIG4gCjAwMDAwMDk4ODcgMDAwMDAgbiAKMDAwMDAxMDEyMiAwMDAwMCBuIAowMDAwMDEwMzE4
IDAwMDAwIG4gCjAwMDAwMTUyNTIgMDAwMDAgbiAKMDAwMDAxNTI3MyAwMDAwMCBuIAowMDAwMDE1
NTA4IDAwMDAwIG4gCjAwMDAwMTU3MDYgMDAwMDAgbiAKMDAwMDAyMTIzNCAwMDAwMCBuIAowMDAw
MDIxMjU1IDAwMDAwIG4gCjAwMDAwMjE0OTAgMDAwMDAgbiAKMDAwMDAyMTcwMCAwMDAwMCBuIAow
MDAwMDI3Mjk4IDAwMDAwIG4gCjAwMDAwMjczMTkgMDAwMDAgbiAKMDAwMDAyNzU1NCAwMDAwMCBu
IAowMDAwMDI3NzY0IDAwMDAwIG4gCjAwMDAwMzMxMDkgMDAwMDAgbiAKMDAwMDAzMzEzMCAwMDAw
MCBuIAowMDAwMDMzMzY1IDAwMDAwIG4gCjAwMDAwMzM1NzUgMDAwMDAgbiAKMDAwMDAzODc1NSAw
MDAwMCBuIAowMDAwMDM4Nzc2IDAwMDAwIG4gCjAwMDAwMzkwMTEgMDAwMDAgbiAKMDAwMDAzOTIx
OSAwMDAwMCBuIAowMDAwMDQ0NDY0IDAwMDAwIG4gCjAwMDAwNDQ0ODUgMDAwMDAgbiAKMDAwMDA0
NDcyMCAwMDAwMCBuIAowMDAwMDQ0OTIyIDAwMDAwIG4gCjAwMDAwNTAxMjYgMDAwMDAgbiAKMDAw
MDA1MDE0NyAwMDAwMCBuIAowMDAwMDUwMzgyIDAwMDAwIG4gCjAwMDAwNTA1ODYgMDAwMDAgbiAK
MDAwMDA1NTgzMSAwMDAwMCBuIAowMDAwMDU1ODUyIDAwMDAwIG4gCjAwMDAwNTYwODcgMDAwMDAg
biAKMDAwMDA1NjI4OSAwMDAwMCBuIAowMDAwMDYxNDkzIDAwMDAwIG4gCjAwMDAwNjE1MTQgMDAw
MDAgbiAKMDAwMDA2MTc0OSAwMDAwMCBuIAowMDAwMDYxOTUzIDAwMDAwIG4gCjAwMDAwNjcyOTgg
MDAwMDAgbiAKMDAwMDA2NzMxOSAwMDAwMCBuIAowMDAwMDY3NTU0IDAwMDAwIG4gCjAwMDAwNjc3
NjMgMDAwMDAgbiAKMDAwMDA3Mjc1OSAwMDAwMCBuIAowMDAwMDcyNzgwIDAwMDAwIG4gCjAwMDAw
NzMwMTUgMDAwMDAgbiAKMDAwMDA3MzIxMyAwMDAwMCBuIAowMDAwMDc4MTkxIDAwMDAwIG4gCjAw
MDAwNzgyMTIgMDAwMDAgbiAKMDAwMDA3ODQ0NyAwMDAwMCBuIAowMDAwMDc4NjQ2IDAwMDAwIG4g
CjAwMDAwODM2MjQgMDAwMDAgbiAKMDAwMDA4MzY0NSAwMDAwMCBuIAowMDAwMDgzODgwIDAwMDAw
IG4gCjAwMDAwODQwODAgMDAwMDAgbiAKMDAwMDA4OTY3OCAwMDAwMCBuIAowMDAwMDg5Njk5IDAw
MDAwIG4gCjAwMDAwODk5MzQgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSA4NyAvUm9vdCAyNiAw
IFIgL0luZm8gMSAwIFIgL0lEIFsgPDMyZmQ3ZDU1OTgwNzQzMTZmYjQxYmIwNDYxZGUwOWM1Pgo8
MzJmZDdkNTU5ODA3NDMxNmZiNDFiYjA0NjFkZTA5YzU+IF0gPj4Kc3RhcnR4cmVmCjkwMzMyCiUl
RU9GCg==

--Apple-Mail-30--530209534
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: 7bit






I don't seem to have any other problems. This did not occur before I  
loaded the new version, although I never had the old version loaded  
before I re-installed Leopard.

Ian Shrier MD, PhD, Dip Sport Med, FACSM
Associate Professor, Dep't of Fam Med, McGill University
Past-President, Canadian Academy of Sport Medicine
Check out: www.casm-acms.org
SKYPE name: ian.shrier

Centre for Clinical Epidemiology and Community Studies
SMBD-Jewish General Hospital
3755 Cote Ste-Catherine Rd
Montreal, Qc  H3T 1E2
Tel: 514-340-7563
Fax: 514-340-7564






--Apple-Mail-30--530209534--


From bolker at ufl.edu  Sun Aug 10 03:57:43 2008
From: bolker at ufl.edu (Ben Bolker)
Date: Sun, 10 Aug 2008 01:57:43 +0000 (UTC)
Subject: [Rd] Suggestion for the optimization code
References: <489C4293.2080806@epfl.ch>
	<alpine.LFD.1.10.0808081405100.7967@gannet.stats.ox.ac.uk>
	<489C4A3A.7040104@epfl.ch>
Message-ID: <loom.20080810T015341-254@post.gmane.org>



Mathieu Ribatet <mathieu.ribatet <at> epfl.ch> writes:

> 
> Ok, please consider it as a bad call.
> Thanks for your answers.
> Best,
> Mathieu
> 

  Well, I don't think it's a _bad_ call; I think the
underlying wish (more flexibility in moving between
existing optimizers without changing the objective
function, calls, etc.) is valid -- but can really
only be achieved at this point by writing a wrapper
(Optimize(), or is that too confusing?), because
of backward compatibility issues.  I would also
like to see a more open framework in optim() [or
elsewhere], where one can more easily plug in
alternative optimization procedures.

  My version of mle (mle2, in bbmle) does something
like this, but in an ad hoc way -- it can use optim,
nlm, nlminb, or constrOptim as an optimization backend.
(I will also take a look at Robert Gentleman's code,
now ...)

  Ben Bolker


From jh910 at juno.com  Sun Aug 10 06:21:48 2008
From: jh910 at juno.com (J. R. M. Hosking)
Date: Sun, 10 Aug 2008 00:21:48 -0400
Subject: [Rd] axis() ignores supplied value of argument mgp[3]?
In-Reply-To: <alpine.LFD.1.10.0808070613150.3607@gannet.stats.ox.ac.uk>
References: <g5tihu$k8u$1@ger.gmane.org>	<alpine.LFD.1.10.0807291612130.30827@gannet.stats.ox.ac.uk>	<g75qu2$u9h$1@ger.gmane.org>	<alpine.LFD.1.10.0808041006480.11319@gannet.stats.ox.ac.uk>	<g7dfgi$f22$1@ger.gmane.org>
	<alpine.LFD.1.10.0808070613150.3607@gannet.stats.ox.ac.uk>
Message-ID: <g7lqco$ift$1@ger.gmane.org>

Prof Brian Ripley wrote:
> Have you looked at the current documentation on the svn server?

Yes, that is a lot clearer. Thank you.


J. R. M. Hosking


From mel at altk.com  Sun Aug 10 07:57:35 2008
From: mel at altk.com (mel)
Date: Sun, 10 Aug 2008 07:57:35 +0200
Subject: [Rd] matrix name
In-Reply-To: <18589.55943.265674.509774@cmath-5.math.ethz.ch>
References: <489DC701.9090602@altk.com>
	<18589.55943.265674.509774@cmath-5.math.ethz.ch>
Message-ID: <489E834F.1080609@altk.com>

Martin Maechler a ?crit :
> Well,  dimnames  can be named :

Thanks Martin and Gabor for the trick.
And apologies for not thinking on it.
Thanks
Vincent


From tlumley at u.washington.edu  Sun Aug 10 20:06:37 2008
From: tlumley at u.washington.edu (Thomas Lumley)
Date: Sun, 10 Aug 2008 11:06:37 -0700 (PDT)
Subject: [Rd] gap in lines()  -- 2.7.1, Mac, quartz() (PR#12520)
In-Reply-To: <20080809152509.7EE50282EF48@mail.pubhealth.ku.dk>
Message-ID: <Pine.LNX.4.43.0808101106370.19789@hymn13.u.washington.edu>



I also see this. It seems that the 100th point plotted is not connected to the 101st, regardless of the actual data values. A more visually dramatic example is

    x<-seq(0,8*pi,length=102)
    plot(x,cos(x),type="l")

which makes it clear that the problem isn't just something like antialiasing. The gap doesn't appear in pdf().

      -thomas

Thomas Lumley			Assoc. Professor, Biostatistics
tlumley at u.washington.edu	University of Washington, Seattle


From tlumley at u.washington.edu  Sun Aug 10 20:19:47 2008
From: tlumley at u.washington.edu (Thomas Lumley)
Date: Sun, 10 Aug 2008 11:19:47 -0700 (PDT)
Subject: [Rd] xy plot in version 2.7.1 for Mac (PR#12520)
In-Reply-To: <20080809152509.7EE50282EF48@mail.pubhealth.ku.dk>
Message-ID: <Pine.LNX.4.43.0808101119470.19789@hymn13.u.washington.edu>


On further research it looks as though this has already been fixed (though it wasn't mentioned in NEWS, so it wasn't immediately obvious).

You could try the patched build from http://r.research.att.com/

       -thomas

Thomas Lumley			Assoc. Professor, Biostatistics
tlumley at u.washington.edu	University of Washington, Seattle


From ripley at stats.ox.ac.uk  Sun Aug 10 20:39:58 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sun, 10 Aug 2008 19:39:58 +0100 (BST)
Subject: [Rd] xy plot in version 2.7.1 for Mac (PR#12520)
In-Reply-To: <Pine.LNX.4.43.0808101119470.19789@hymn13.u.washington.edu>
References: <Pine.LNX.4.43.0808101119470.19789@hymn13.u.washington.edu>
Message-ID: <alpine.LFD.1.10.0808101938340.27080@gannet.stats.ox.ac.uk>

On Sun, 10 Aug 2008, Thomas Lumley wrote:

>
> On further research it looks as though this has already been fixed (though it 
> wasn't mentioned in NEWS, so it wasn't immediately obvious).
>
> You could try the patched build from http://r.research.att.com/

I don't see it on my R-patched build.  R-sig-mac is a good place to look 
for reports, including of fixes.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From jmc at r-project.org  Mon Aug 11 18:14:43 2008
From: jmc at r-project.org (John Chambers)
Date: Mon, 11 Aug 2008 12:14:43 -0400
Subject: [Rd] Methods dispatched on "..."
Message-ID: <48A06573.2080606@r-project.org>

A new facility has been committed for version 2.8.0 that allows S4 
generics to be defined with "..." as the signature.

Methods are then defined with a single class in the signature.  The 
interpretation is that the method will be selected and called when all 
the arguments matching "..." are from the specified class, or some 
subclass of that class.  See ?dotsMethods for details.

The current implementation is a test.  It's dispatch is done in R code, 
as described in the documentation.  Once the desired semantics are 
clear, it's a natural candidate for adding to the current C dispatch 
code.  Also, in this version "..." cannot be combined with other 
arguments in the generic function's signature.  This is also not a total 
necessity and might be relaxed, after the dispatch is rewritten.

Please play with it, if it sounds useful.

John


From sunhh at hanmail.net  Mon Aug 11 07:00:03 2008
From: sunhh at hanmail.net (sunhh at hanmail.net)
Date: Mon, 11 Aug 2008 07:00:03 +0200 (CEST)
Subject: [Rd] can't start the R program (PR#12525)
Message-ID: <20080811050003.0F135282EFF8@mail.pubhealth.ku.dk>

Full_Name: SH Kang
Version: R-2.7.1-win32.exe
OS: Windows XP SP2
Submission from: (NULL) (210.103.83.39)


R-2.7.1-win32.exe and R-2.7.0-win32.exe version can be installed but can't start
the program(with error message). So I installed R-2.6.2-win32.exe. It functions
well. I've read FAQ, but I can't find the informations about such problem.
Thank's a lot about R program! 
Bye~


From ripley at stats.ox.ac.uk  Tue Aug 12 10:08:07 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 12 Aug 2008 09:08:07 +0100 (BST)
Subject: [Rd] can't start the R program (PR#12525)
In-Reply-To: <20080811050003.0F135282EFF8@mail.pubhealth.ku.dk>
References: <20080811050003.0F135282EFF8@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808120902090.28407@gannet.stats.ox.ac.uk>

Are you working in a Korean locale?  If so, this is the same as 11903 and 
11974 and see

https://stat.ethz.ch/pipermail/r-help/2008-August/170552.html

for two workarounds.  It is (reported to be) fixed in R-patched already.

On Mon, 11 Aug 2008, sunhh at hanmail.net wrote:

> Full_Name: SH Kang
> Version: R-2.7.1-win32.exe
> OS: Windows XP SP2
> Submission from: (NULL) (210.103.83.39)
>
>
> R-2.7.1-win32.exe and R-2.7.0-win32.exe version can be installed but can't start
> the program(with error message). So I installed R-2.6.2-win32.exe. It functions

Unhelpfully, you didn't tell us what the error message was.

> well. I've read FAQ, but I can't find the informations about such problem.

It is not frequent: it affects some (but not all) systems set to Korean.

> Thank's a lot about R program!
> Bye~
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Tue Aug 12 17:44:25 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 12 Aug 2008 16:44:25 +0100 (BST)
Subject: [Rd] Cairo bitmap output should work without X11 dependency
 (PR#12218)
In-Reply-To: <20080807100150.ECB2D282C761@mail.pubhealth.ku.dk>
References: <20080807100150.ECB2D282C761@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808121631520.29124@gannet.stats.ox.ac.uk>

On Thu, 7 Aug 2008, cruff at ucar.edu wrote:

> Full_Name: Craig Ruff
> Version: 2.7.1
> OS: Irix 6.5.30
> Submission from: (NULL) (128.117.8.145)
>
>
> Cairo based bitmap graphics output should work if cairo and R have been compiled
> without xlib support.  2.7.1 gives the "X11 is not available" message in this
> case when run interactively, and from my reading the png documentation, calling
> png(filename=..., type="cairo") should work.  Cairo itself is happy without
> xlib.

The help for png() actually says

   \R can be compiled without support for each of these devices: this
   will be reported if you attempt to use them on a system where they are
   not supported.  For \code{type = "Xlib"} they may not be usable unless
   the X11 display is available to the owner of the \R process.
   \code{type = "cairo"} requires cairo 1.2 or later.

You have apparently compiled R without support for the cairo device. 
Systems with cairo but not X11 libraries are rarer than hens' teeth and 
systems on which X11 could not be installed yet cairo/pango etc have been 
are even rarer (and the chances that they have an adequate set of fonts 
are miniscule).  It is not credible that Irix is such an OS.

Note that X11 support is under 'Essential programs', whereas cairo is 
under 'Useful libraries'.  If you choose to omit something 'essential' 
expect not to be able to use something merely 'useful'.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Tue Aug 12 17:45:14 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Tue, 12 Aug 2008 17:45:14 +0200 (CEST)
Subject: [Rd] Cairo bitmap output should work without X11 dependency
	(PR#12529)
Message-ID: <20080812154514.25D29282EFC1@mail.pubhealth.ku.dk>

On Thu, 7 Aug 2008, cruff at ucar.edu wrote:

> Full_Name: Craig Ruff
> Version: 2.7.1
> OS: Irix 6.5.30
> Submission from: (NULL) (128.117.8.145)
>
>
> Cairo based bitmap graphics output should work if cairo and R have been compiled
> without xlib support.  2.7.1 gives the "X11 is not available" message in this
> case when run interactively, and from my reading the png documentation, calling
> png(filename=..., type="cairo") should work.  Cairo itself is happy without
> xlib.

The help for png() actually says

   \R can be compiled without support for each of these devices: this
   will be reported if you attempt to use them on a system where they are
   not supported.  For \code{type = "Xlib"} they may not be usable unless
   the X11 display is available to the owner of the \R process.
   \code{type = "cairo"} requires cairo 1.2 or later.

You have apparently compiled R without support for the cairo device. 
Systems with cairo but not X11 libraries are rarer than hens' teeth and 
systems on which X11 could not be installed yet cairo/pango etc have been 
are even rarer (and the chances that they have an adequate set of fonts 
are miniscule).  It is not credible that Irix is such an OS.

Note that X11 support is under 'Essential programs', whereas cairo is 
under 'Useful libraries'.  If you choose to omit something 'essential' 
expect not to be able to use something merely 'useful'.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From bolker at zoology.ufl.edu  Tue Aug 12 18:13:15 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Tue, 12 Aug 2008 12:13:15 -0400
Subject: [Rd] wishlist: par(ann=FALSE) applied to hist?
Message-ID: <48A1B69B.7010905@zoology.ufl.edu>


par(ann=FALSE) appears to have no effect on
hist.default; it would be nice if it did ...
(boxplot, which plots via bxp, which calls
internal do_title, does -- in a quick search
I can't figure out where the value of ann
takes effect ...)

   thanks
    Ben Bolker


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080812/d20f2b88/attachment.bin>

From ripley at stats.ox.ac.uk  Tue Aug 12 20:48:04 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 12 Aug 2008 19:48:04 +0100 (BST)
Subject: [Rd] wishlist: par(ann=FALSE) applied to hist?
In-Reply-To: <48A1B69B.7010905@zoology.ufl.edu>
References: <48A1B69B.7010905@zoology.ufl.edu>
Message-ID: <alpine.LFD.1.10.0808121928330.669@gannet.stats.ox.ac.uk>

On Tue, 12 Aug 2008, Ben Bolker wrote:

> par(ann=FALSE) appears to have no effect on
> hist.default; it would be nice if it did ...
> (boxplot, which plots via bxp, which calls
> internal do_title, does -- in a quick search
> I can't figure out where the value of ann
> takes effect ...)

>From the ?par:

      'ann' If set to 'FALSE', high-level plotting functions calling
           'plot.default' do not annotate the plots they produce with
           axis titles and overall titles.  The default is to do
           annotation.

So strictly this is correct, as plot.histogram does not call plot.default. 
The par is only used at R level, as a default for an argument in 
plot.default and never as an in-line parameter.

So I think what you are asking for is a 'ann' argument to plot.histogram, 
which would then be passed down from hist().  The only issue then is if 
par("ann") should set the default, and the current documentation says not.

Does that meet your needs?

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From bolker at zoology.ufl.edu  Tue Aug 12 20:58:06 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Tue, 12 Aug 2008 14:58:06 -0400
Subject: [Rd] wishlist: par(ann=FALSE) applied to hist?
In-Reply-To: <alpine.LFD.1.10.0808121928330.669@gannet.stats.ox.ac.uk>
References: <48A1B69B.7010905@zoology.ufl.edu>
	<alpine.LFD.1.10.0808121928330.669@gannet.stats.ox.ac.uk>
Message-ID: <48A1DD3E.50901@zoology.ufl.edu>

Prof Brian Ripley wrote:
> On Tue, 12 Aug 2008, Ben Bolker wrote:
> 
>> par(ann=FALSE) appears to have no effect on
>> hist.default; it would be nice if it did ...
>> (boxplot, which plots via bxp, which calls
>> internal do_title, does -- in a quick search
>> I can't figure out where the value of ann
>> takes effect ...)
> 
>> From the ?par:
> 
>      'ann' If set to 'FALSE', high-level plotting functions calling
>           'plot.default' do not annotate the plots they produce with
>           axis titles and overall titles.  The default is to do
>           annotation.
> 
> So strictly this is correct, as plot.histogram does not call 
> plot.default. The par is only used at R level, as a default for an 
> argument in plot.default and never as an in-line parameter.
> 
> So I think what you are asking for is a 'ann' argument to 
> plot.histogram, which would then be passed down from hist().  The only 
> issue then is if par("ann") should set the default, and the current 
> documentation says not.
> 
> Does that meet your needs?
> 

   Hmm.   I understand that this isn't a bug (I didn't claim it was) --
the ideal behavior would be for hist() to produce a plot without
annotation when par("ann") was FALSE.  That's distinct from
hist(x,ann=FALSE) [which would be equivalent, I guess, to
hist(x,xlab="",ylab="",main="")], which isn't as useful,
unless the default were set to par("ann") ...
(and yes, I realize that would change user-visible behavior).
This isn't at all necessary, just something that would change
R's behavior in the direction of my naive expectations (which
I might share with other users ... ?)

   cheers
     Ben


From ripley at stats.ox.ac.uk  Tue Aug 12 21:07:20 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 12 Aug 2008 20:07:20 +0100 (BST)
Subject: [Rd] wishlist: par(ann=FALSE) applied to hist?
In-Reply-To: <48A1DD3E.50901@zoology.ufl.edu>
References: <48A1B69B.7010905@zoology.ufl.edu>
	<alpine.LFD.1.10.0808121928330.669@gannet.stats.ox.ac.uk>
	<48A1DD3E.50901@zoology.ufl.edu>
Message-ID: <alpine.LFD.1.10.0808122002340.1371@gannet.stats.ox.ac.uk>

On Tue, 12 Aug 2008, Ben Bolker wrote:

> Prof Brian Ripley wrote:
>> On Tue, 12 Aug 2008, Ben Bolker wrote:
>> 
>>> par(ann=FALSE) appears to have no effect on
>>> hist.default; it would be nice if it did ...
>>> (boxplot, which plots via bxp, which calls
>>> internal do_title, does -- in a quick search
>>> I can't figure out where the value of ann
>>> takes effect ...)
>> 
>>> From the ?par:
>>
>>      'ann' If set to 'FALSE', high-level plotting functions calling
>>           'plot.default' do not annotate the plots they produce with
>>           axis titles and overall titles.  The default is to do
>>           annotation.
>> 
>> So strictly this is correct, as plot.histogram does not call plot.default. 
>> The par is only used at R level, as a default for an argument in 
>> plot.default and never as an in-line parameter.
>> 
>> So I think what you are asking for is a 'ann' argument to plot.histogram, 
>> which would then be passed down from hist().  The only issue then is if 
>> par("ann") should set the default, and the current documentation says not.
>> 
>> Does that meet your needs?
>> 
>
>  Hmm.   I understand that this isn't a bug (I didn't claim it was) --
> the ideal behavior would be for hist() to produce a plot without
> annotation when par("ann") was FALSE.  That's distinct from
> hist(x,ann=FALSE) [which would be equivalent, I guess, to
> hist(x,xlab="",ylab="",main="")], which isn't as useful,

and sub=NULL (NULL is a better default than "").

> unless the default were set to par("ann") ...
> (and yes, I realize that would change user-visible behavior).
> This isn't at all necessary, just something that would change
> R's behavior in the direction of my naive expectations (which
> I might share with other users ... ?)

'ann' is another of those graphical parameters which really isn't (like 
'type' and 'asp' used to be).

We can canvass more widely about the default: the basic implementation 
took 5 mins (+ testing yet to be done).

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Tue Aug 12 21:50:50 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 12 Aug 2008 20:50:50 +0100 (BST)
Subject: [Rd] qgamma inaccuracy (PR#12324)
In-Reply-To: <20080807101453.05798282C761@mail.pubhealth.ku.dk>
References: <20080807101453.05798282C761@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808121955320.1371@gannet.stats.ox.ac.uk>

This is a really extreme usage.  AFAICS the code works well enough down to 
shape=1e-10 or so, e.g.

> qgamma(1e-10, 5e-11, lower.tail=FALSE)
[1] 0.08237203

I would be interested to know what substantive problem you were trying to 
solve here that required such values.

I am pretty sure that a completely different algorithm will be required. 
For completeness we may write that in due course, but for now (R 2.7.2) I 
suggest just issuing a warning for miniscule 'shape'.

On Thu, 7 Aug 2008, skylab.gupta at gmail.com wrote:

> Full_Name:
> Version: 2.7.1 (2008-06-23)
> OS: windows vista
> Submission from: (NULL) (216.82.144.137)
>
>
> Hello,
>
> I have been working with various probability distributions in R, and it seems
> the gamma distribution is inaccurate for some inputs.
>
> For example, qgamma(1e-100, 5e-101, lower.tail=FALSE) gives: 1.0. However, it
> seems this is incorrect; I think the correct answer should be
> 0.082372029620717283. When I check these numbers using pgamma, I get:
>
> pgamma(1,5e-101, lower.tail=FALSE) = 9.1969860292859463e-102
> and
> pgamma(0.082372029620717283,5e-101, lower.tail=FALSE) =
> 1.0000000000000166e-100.
>
> Similarly, for example:
> qgamma(1e-100,0.005,lower.tail=FALSE) = 109.36757177007101
> pgamma(109.36757177007101, 0.005, lower.tail=FALSE) = 1.4787306506694758e-52.
>
> This looks completely wrong. The correct value, I think, should be
> 219.59373661415756. In fact,
> pgamma(219.59373661415756, 0.005, lower.tail=FALSE) = 9.9999999999999558e-101.
>
> In fact, when I do the following in R, the results are completely wrong,
>
> x<-c(5e-1,5e-2,5e-3,5e-4,5e-5,5e-6,5e-7,5e-8,5e-9,5e-10)
> z1 <-qgamma(1e-100,x,lower.tail=FALSE)
> y<-pgamma(z1,x,lower.tail=FALSE)
>
> The value of y that I get should be close to 1e-100, but they are not:
>
>> y
> [1] 1.000000e-100  1.871683e-51  1.478731e-52  1.444034e-53  1.440606e-54
> [6]  1.440264e-55  1.440230e-56  1.440226e-57  1.440226e-58  1.440226e-59
>
> The correct values of z1 should be:
> z1true <- c(226.97154111939946, 222.15218724493326, 219.59373661415756,
> 217.27485383840451, 214.98015408183574, 212.68797118872064, 210.39614286838227,
> 208.10445550564617, 205.81289009100664, 203.52144711679352)
>
> With these values of z1true, we get the expected values:
> y<-pgamma(z1true,x,lower.tail=FALSE)
>> y
> [1] 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100 1e-100
>
>
> I am using the precompiled binary version of R, under Windows Vista.
> -----------
>> version
>    _
> platform       i386-pc-mingw32
> arch           i386
> os             mingw32
> system         i386, mingw32
> status
> major          2
> minor          7.1
> year           2008
> month          06
> day            23
> svn rev        45970
> language       R
> version.string R version 2.7.1 (2008-06-23)
> ------------
>
> So, it seems qgamma is inaccurate for small probability values in the upper
> tail, when the shape parameter is also small.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From cherrera at cs.nmsu.edu  Wed Aug 13 05:25:27 2008
From: cherrera at cs.nmsu.edu (cherrera at cs.nmsu.edu)
Date: Wed, 13 Aug 2008 05:25:27 +0200 (CEST)
Subject: [Rd] Column name disappears when indexing a single column (PR#12532)
Message-ID: <20080813032528.24B8E282EFF7@mail.pubhealth.ku.dk>

Good Day,
  I can understand that after indexing a single column in a matrix, R will return a vector instead of the single column.  However, during the conversion to a vector, the column name is lost.
  I was wondering if it would be better to have R return a single column matrix (retaining the column name), instead of automatically converting to a vector.  Users could use as.vector() to convert afterwards.

Thanks,
CMHJ  
<<insert bug report here>>



--please do not edit the information below--

Version:
 platform = x86_64-unknown-linux-gnu
 arch = x86_64
 os = linux-gnu
 system = x86_64, linux-gnu
 status = 
 major = 2
 minor = 7.1
 year = 2008
 month = 06
 day = 23
 svn rev = 45970
 language = R
 version.string = R version 2.7.1 (2008-06-23)

Locale:
LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=C;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C

Search Path:
 .GlobalEnv, package:stats, package:graphics, package:grDevices, package:utils, package:datasets, package:methods, Autoloads, package:base


From ripley at stats.ox.ac.uk  Wed Aug 13 08:09:00 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 13 Aug 2008 07:09:00 +0100 (BST)
Subject: [Rd] (PR#12532) Column name disappears when indexing a single
 column
In-Reply-To: <20080813032528.24B8E282EFF7@mail.pubhealth.ku.dk>
References: <20080813032528.24B8E282EFF7@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808130702050.11152@gannet.stats.ox.ac.uk>

On Wed, 13 Aug 2008, cherrera at cs.nmsu.edu wrote:

> Good Day,

>  I can understand that after indexing a single column in a matrix, R 
> will return a vector instead of the single column.  However, during the 
> conversion to a vector, the column name is lost.

>  I was wondering if it would be better to have R return a single column 
> matrix (retaining the column name), instead of automatically converting 
> to a vector.  Users could use as.vector() to convert afterwards.

This is NOT a bug.

You give no example, and your subject line is incorrect.  You probably 
mean 'extracting a single column from a matrix' and no name 'disappears' 
-- the matrix still has its column names.

I think you have missed the 'drop' argument to matrix indexing, which 
defaults to TRUE.  Maybe it would have been better to have FALSE as the 
default, but lots of code makes use of it.  And you DO have a choice that 
you seem unaware of.  See ?`[`, for example, or any good book on R.

>
> Thanks,
> CMHJ
> <<insert bug report here>>
>
>
>
> --please do not edit the information below--
>
> Version:
> platform = x86_64-unknown-linux-gnu
> arch = x86_64
> os = linux-gnu
> system = x86_64, linux-gnu
> status =
> major = 2
> minor = 7.1
> year = 2008
> month = 06
> day = 23
> svn rev = 45970
> language = R
> version.string = R version 2.7.1 (2008-06-23)
>
> Locale:
> LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=C;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C
>
> Search Path:
> .GlobalEnv, package:stats, package:graphics, package:grDevices, package:utils, package:datasets, package:methods, Autoloads, package:base

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From tlumley at u.washington.edu  Wed Aug 13 17:22:36 2008
From: tlumley at u.washington.edu (Thomas Lumley)
Date: Wed, 13 Aug 2008 08:22:36 -0700 (PDT)
Subject: [Rd] Column name disappears when indexing a single column
 (PR#12532)
In-Reply-To: <20080813032528.24B8E282EFF7@mail.pubhealth.ku.dk>
Message-ID: <Pine.LNX.4.43.0808130822360.4850@hymn13.u.washington.edu>


1. This is not a bug (as you seem to realize), so it should not be sent to r-bugs.

2. You seem to want the drop=FALSE argument to [], as in FAQ 7.5

      -thomas


On Wed, 13 Aug 2008 cherrera at cs.nmsu.edu wrote:

> Good Day,
>  I can understand that after indexing a single column in a matrix, R will return a vector instead of the single column.  However, during the conversion to a vector, the column name is lost.
>  I was wondering if it would be better to have R return a single column matrix (retaining the column name), instead of automatically converting to a vector.  Users could use as.vector() to convert afterwards.
>
> Thanks,
> CMHJ
> <<insert bug report here>>
>
>
>
> --please do not edit the information below--
>
> Version:
> platform = x86_64-unknown-linux-gnu
> arch = x86_64
> os = linux-gnu
> system = x86_64, linux-gnu
> status =
> major = 2
> minor = 7.1
> year = 2008
> month = 06
> day = 23
> svn rev = 45970
> language = R
> version.string = R version 2.7.1 (2008-06-23)
>
> Locale:
> LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=C;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C
>
> Search Path:
> .GlobalEnv, package:stats, package:graphics, package:grDevices, package:utils, package:datasets, package:methods, Autoloads, package:base
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

Thomas Lumley			Assoc. Professor, Biostatistics
tlumley at u.washington.edu	University of Washington, Seattle


From tlumley at u.washington.edu  Wed Aug 13 17:25:08 2008
From: tlumley at u.washington.edu (tlumley at u.washington.edu)
Date: Wed, 13 Aug 2008 17:25:08 +0200 (CEST)
Subject: [Rd] Column name disappears when indexing a single column
	(PR#12534)
Message-ID: <20080813152508.CCFD7282EFC2@mail.pubhealth.ku.dk>


1. This is not a bug (as you seem to realize), so it should not be sent to r-bugs.

2. You seem to want the drop=FALSE argument to [], as in FAQ 7.5

      -thomas


On Wed, 13 Aug 2008 cherrera at cs.nmsu.edu wrote:

> Good Day,
>  I can understand that after indexing a single column in a matrix, R will return a vector instead of the single column.  However, during the conversion to a vector, the column name is lost.
>  I was wondering if it would be better to have R return a single column matrix (retaining the column name), instead of automatically converting to a vector.  Users could use as.vector() to convert afterwards.
>
> Thanks,
> CMHJ
> <<insert bug report here>>
>
>
>
> --please do not edit the information below--
>
> Version:
> platform = x86_64-unknown-linux-gnu
> arch = x86_64
> os = linux-gnu
> system = x86_64, linux-gnu
> status =
> major = 2
> minor = 7.1
> year = 2008
> month = 06
> day = 23
> svn rev = 45970
> language = R
> version.string = R version 2.7.1 (2008-06-23)
>
> Locale:
> LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=C;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C
>
> Search Path:
> .GlobalEnv, package:stats, package:graphics, package:grDevices, package:utils, package:datasets, package:methods, Autoloads, package:base
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

Thomas Lumley			Assoc. Professor, Biostatistics
tlumley at u.washington.edu	University of Washington, Seattle


From bolker at zoology.ufl.edu  Wed Aug 13 17:45:34 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Wed, 13 Aug 2008 11:45:34 -0400
Subject: [Rd] messing with ...
Message-ID: <48A3019E.5080209@zoology.ufl.edu>


   I'm looking for advice on manipulating parameters that
are going to be passed through to another function.

   Specifically, I am working on my version of "mle",
which is a wrapper for optim (among other optimizers).
I would prefer not to replicate the entire argument
list of optim(), so I'm using ... to pass extra arguments
through.

   However:
     the starting values are specified as a list,
which means that users can potentially specify them
in any order (or at least that's the way it works
now -- one solution to the problem I'm about to state
is to insist that they specify the parameters in the
same order as they are given in the arguments of
the objective function).
   However, there are other arguments (lower, upper,
control$parscale, control$ndeps) that should all
be in the same order as the objective function
definition by the time they get to optim()).  I can
think of a few solutions:

  (1) make the user specify them all in the right order (ugh)
  (2) add all of them as explicit parameters to my function
so that I can rearrange them appropriately (ugh)
  (3) mess with the ... argument before it gets passed
through to optim (impossible?)
  (4) capture ... as arglist <- list(...), manipulate the arguments
as necessary, then pass them along to optim as
do.call("optim",arglist) (ugh but maybe the best solution?)

   any thoughts?

  thanks

   Ben Bolker


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080813/e84ce625/attachment.bin>

From forum.query at gmail.com  Wed Aug 13 18:15:26 2008
From: forum.query at gmail.com (egc)
Date: Wed, 13 Aug 2008 12:15:26 -0400
Subject: [Rd] properly reporting compile bugs
Message-ID: <458675ec0808130915q64b46a58h53b1721bab383901@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080813/d092d4de/attachment.pl>

From mflawren at fhcrc.org  Wed Aug 13 18:21:55 2008
From: mflawren at fhcrc.org (Michael Lawrence)
Date: Wed, 13 Aug 2008 09:21:55 -0700
Subject: [Rd] [Bioc-devel] EBImage: Devel version on Windows not building
In-Reply-To: <27d1e6020808130656t6769aeb8ndbfc35537b4b01cf@mail.gmail.com>
References: <59d7961d0808121831t71cb10c4jfe4804f1b4ca2d2f@mail.gmail.com>
	<509e0620808130556qe8b28fdi8ab2b874b3564190@mail.gmail.com>
	<27d1e6020808130656t6769aeb8ndbfc35537b4b01cf@mail.gmail.com>
Message-ID: <509e0620808130921n52f85a9bw9ed6d933d6e60b67@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080813/bd54e7bd/attachment.pl>

From christos.hatzis at nuverabio.com  Wed Aug 13 18:38:27 2008
From: christos.hatzis at nuverabio.com (Christos Hatzis)
Date: Wed, 13 Aug 2008 12:38:27 -0400
Subject: [Rd] messing with ...
In-Reply-To: <48A3019E.5080209@zoology.ufl.edu>
References: <48A3019E.5080209@zoology.ufl.edu>
Message-ID: <003601c8fd63$035daec0$c7010a0a@headquarters.silicoinsights>

If I understand it correctly, one way would be to define a function to
specify the default options/arguments in the required order.

For example,

> mle.options <- function(method = "BFGS", lower = 0, upper = Inf,
hessian=FALSE)
+ list(method=method, lower=lower, upper=upper, hessian=hessian)
> mle.options()
$method
[1] "BFGS"

$lower
[1] 0

$upper
[1] Inf

$hessian
[1] FALSE

And the user can specify only the parameters that need non-default values:

> mle.options(method="CG")
$method
[1] "CG"

$lower
[1] 0

$upper
[1] Inf

$hessian
[1] FALSE

A similar function can be defined for the control parameters of optim.
Then all you need in the mle wrapper is: 

mle <- function(X, Y, optim.meth=mle.options(), optim.control=mle.control(),
...) {
	# preparatory steps
	
	optim(par, fn, method=optim.meth$method, lower=optim.meth$lower, 
		upper=optim.meth$upper, hessian=optim.meth$hessian,
		control = optim.control(), ...)

	# more stuff
}

Hope this helps.

-Christos	

> -----Original Message-----
> From: r-devel-bounces at r-project.org 
> [mailto:r-devel-bounces at r-project.org] On Behalf Of Ben Bolker
> Sent: Wednesday, August 13, 2008 11:46 AM
> To: r-devel at r-project.org
> Subject: [Rd] messing with ...
> 
> 
>    I'm looking for advice on manipulating parameters that are 
> going to be passed through to another function.
> 
>    Specifically, I am working on my version of "mle", which 
> is a wrapper for optim (among other optimizers).
> I would prefer not to replicate the entire argument list of 
> optim(), so I'm using ... to pass extra arguments through.
> 
>    However:
>      the starting values are specified as a list, which means 
> that users can potentially specify them in any order (or at 
> least that's the way it works now -- one solution to the 
> problem I'm about to state is to insist that they specify the 
> parameters in the same order as they are given in the 
> arguments of the objective function).
>    However, there are other arguments (lower, upper, 
> control$parscale, control$ndeps) that should all be in the 
> same order as the objective function definition by the time 
> they get to optim()).  I can think of a few solutions:
> 
>   (1) make the user specify them all in the right order (ugh)
>   (2) add all of them as explicit parameters to my function 
> so that I can rearrange them appropriately (ugh)
>   (3) mess with the ... argument before it gets passed 
> through to optim (impossible?)
>   (4) capture ... as arglist <- list(...), manipulate the 
> arguments as necessary, then pass them along to optim as
> do.call("optim",arglist) (ugh but maybe the best solution?)
> 
>    any thoughts?
> 
>   thanks
> 
>    Ben Bolker
> 
> 
>


From tplate at acm.org  Wed Aug 13 18:35:44 2008
From: tplate at acm.org (Tony Plate)
Date: Wed, 13 Aug 2008 10:35:44 -0600
Subject: [Rd] messing with ...
In-Reply-To: <48A3019E.5080209@zoology.ufl.edu>
References: <48A3019E.5080209@zoology.ufl.edu>
Message-ID: <48A30D60.2020304@acm.org>

Ben Bolker wrote:
>
>   I'm looking for advice on manipulating parameters that
> are going to be passed through to another function.
>
>   Specifically, I am working on my version of "mle",
> which is a wrapper for optim (among other optimizers).
> I would prefer not to replicate the entire argument
> list of optim(), so I'm using ... to pass extra arguments
> through.
>
>   However:
>     the starting values are specified as a list,
> which means that users can potentially specify them
> in any order (or at least that's the way it works
> now -- one solution to the problem I'm about to state
> is to insist that they specify the parameters in the
> same order as they are given in the arguments of
> the objective function).
>   However, there are other arguments (lower, upper,
> control$parscale, control$ndeps) that should all
> be in the same order as the objective function
> definition by the time they get to optim()).  I can
> think of a few solutions:
>
>  (1) make the user specify them all in the right order (ugh)
>  (2) add all of them as explicit parameters to my function
> so that I can rearrange them appropriately (ugh)
>  (3) mess with the ... argument before it gets passed
> through to optim (impossible?)
>  (4) capture ... as arglist <- list(...), manipulate the arguments
> as necessary, then pass them along to optim as
> do.call("optim",arglist) (ugh but maybe the best solution?)
>
>   any thoughts?
here's my two cents:
- require names on parameters, rather than order
- construct calls and use eval() rather than do.call() (then you can 
manipulate list(...) without the ugh factor of do.call() -- though is 
do.call() any different to eval() in R? -- I know in S-PLUS that the use 
of do.call() can completely blow out memory usage)
- to avoid manually duplicating arg lists, use constructs like 
names(formals(optim)) and pmatch to find args that below to the 
optimizer function vs the objective function

-- Tony Plate
>
>  thanks
>
>   Ben Bolker
>
>
> ------------------------------------------------------------------------
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ripley at stats.ox.ac.uk  Wed Aug 13 19:18:01 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 13 Aug 2008 18:18:01 +0100 (BST)
Subject: [Rd] messing with ...
In-Reply-To: <48A30D60.2020304@acm.org>
References: <48A3019E.5080209@zoology.ufl.edu> <48A30D60.2020304@acm.org>
Message-ID: <alpine.LFD.1.10.0808131814070.2887@auk.stats.ox.ac.uk>

On Wed, 13 Aug 2008, Tony Plate wrote:

> Ben Bolker wrote:
>>
>>   I'm looking for advice on manipulating parameters that
>> are going to be passed through to another function.
>>
>>   Specifically, I am working on my version of "mle",
>> which is a wrapper for optim (among other optimizers).
>> I would prefer not to replicate the entire argument
>> list of optim(), so I'm using ... to pass extra arguments
>> through.
>>
>>   However:
>>     the starting values are specified as a list,
>> which means that users can potentially specify them
>> in any order (or at least that's the way it works
>> now -- one solution to the problem I'm about to state
>> is to insist that they specify the parameters in the
>> same order as they are given in the arguments of
>> the objective function).
>>   However, there are other arguments (lower, upper,
>> control$parscale, control$ndeps) that should all
>> be in the same order as the objective function
>> definition by the time they get to optim()).  I can
>> think of a few solutions:
>>
>>  (1) make the user specify them all in the right order (ugh)
>>  (2) add all of them as explicit parameters to my function
>> so that I can rearrange them appropriately (ugh)
>>  (3) mess with the ... argument before it gets passed
>> through to optim (impossible?)
>>  (4) capture ... as arglist <- list(...), manipulate the arguments
>> as necessary, then pass them along to optim as
>> do.call("optim",arglist) (ugh but maybe the best solution?)
>>
>>   any thoughts?
> here's my two cents:
> - require names on parameters, rather than order

> - construct calls and use eval() rather than do.call() (then you can 
> manipulate list(...) without the ugh factor of do.call() -- though is 
> do.call() any different to eval() in R? -- I know in S-PLUS that the use of 
> do.call() can completely blow out memory usage)

do.call is just a way to construct and eval() calls.  Since it is internal 
C code it does it quite efficiently.

> - to avoid manually duplicating arg lists, use constructs like 
> names(formals(optim)) and pmatch to find args that below to the optimizer 
> function vs the objective function

Using wrappers is a better idea: you can see the idea in several places 
in the base graphics code.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Wed Aug 13 20:27:37 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 13 Aug 2008 19:27:37 +0100 (BST)
Subject: [Rd] properly reporting compile bugs
In-Reply-To: <458675ec0808130915q64b46a58h53b1721bab383901@mail.gmail.com>
References: <458675ec0808130915q64b46a58h53b1721bab383901@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808131831210.2887@auk.stats.ox.ac.uk>

You should report package problems to the package maintainer (see the R 
posting guide and FAQ).  *But* it seems you are just replicating what the 
CRAN daily checks on x86_64 Debian Linux do, and I repeat those checks 
most weeks on Fedora 8 (including twice already this week as we test the 
near-final versions of R 2.7.2).  I see few actual compile errors but 
quite a few check errors (e.g. on the examples).

See http://cran.r-project.org/web/checks/check_summary.html .

On Wed, 13 Aug 2008, someone ashamed of her real name wrote:

> A while ago I decided to simply download and install every package on CRAN
> (disk space is cheap these days...).

Yes, quite a few people do that.  My dept has central R package 
installations for both i386 and x86_64 F8 of most of CRAN and BioC 2.2.

> In the process, I kept loose track of which packages generated one or 
> more 'compilation errors' during the install process (machine runs 
> 64-bit Fedora 8, gcc 4.1 etc. etc). Most of the errors seemed to occur 
> in packages I have little need for at present, but as a courtesy, I 
> thought it might be helpful to report these 'errors' - but, how, and to 
> whom (package maintainer)? Is there a preferred (official) mechanism for 
> this? A pointer to the relevant webpage would be more than sufficient.
>
> Some of the errors or lib dependencies, which are perhaps not generally
> useful to report. But some are outright code errors - either syntax
> problems, or deprecated bits of C and Fortran.

That is really rather surprising, and may indicate a problem on your own 
setup.

Using C90 or F77 constructs is not an error: it is all that is required of 
R compilers. Remember that to get on CRAN a package has had to compile on 
at least one platform, and the vast majority have compiled and run their 
tests on at least four (i686 Linux, x86_64 Linux, Windows, Mac OS X 
i386/ppc).  Right now the only non-Windows-only CRAN packages that will 
not install for me on x86_64 F8 Linux are RDieHarder, Rmpi, ROracle, 
RQuantLib, RScaLAPACK, Rcplex and Rlsf.

For Rmpi that is a fairly recent Fedora packaging issue and can be 
resolved by editing the configure script (and this has been reported to 
the package maintainer and discussed on this list).

There are quite a number of packages with known C++ bugs that g++ 4.1.1 
accepts.  We have tested on stricter C++ compilers and reported to the 
maintainers -- some of these also fail with g++ 4.3.x (which I believe the 
CRAN checks now uses).

> Thanks in advance...
>
> 	[[alternative HTML version deleted]]

If you do write to maintainers it is discourteous to send HTML mail (and 
the R posting guide explicitly asked you not to send it here).

We prefer real names and addresses here, so please don't write to 
maintainers without a proper signature block (again, see the R posting 
guide).

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From dutangc at gmail.com  Wed Aug 13 22:46:03 2008
From: dutangc at gmail.com (Christophe Dutang)
Date: Wed, 13 Aug 2008 22:46:03 +0200
Subject: [Rd] [R] aligned memory allocation in C
In-Reply-To: <Pine.LNX.4.64.0808130725320.8480@itasca2.wildberry.org>
References: <8D60D9ED-4FF9-4D01-B8E8-2D04C4539870@wanadoo.fr>
	<Pine.LNX.4.64.0808130725320.8480@itasca2.wildberry.org>
Message-ID: <C48E286E-BC59-489F-AF7C-CA8E633BA035@gmail.com>

Hi,

You are completely right, the problem was not about what R_alloc  
returned but my use of the fill_array32. Now it works fine, but the  
block generation is longer due to a conversion to double after using  
fill_array32. I must underline the fact that I do not yet use sse2  
support.

Thanks again

Christophe


Le 13 ao?t 08 ? 14:30, Luke Tierney a ?crit :

> On Wed, 13 Aug 2008, Christophe Dutang1 wrote:
>
>> Hi,
>>
>> I'm currently R porting SF Mersenne Twister algorithm of Matsumoto  
>> and Saito. To get the full power of their code, I want to use their  
>> fonction fill_array32 which need aligned memory. That is to say I  
>> need to use the C function memalign on windows, posix_memalign on  
>> linux and classic malloc on Mac OS. In 'writing R extenstion', they  
>> recommand to use R_alloc function to allocate memory in C.
>>
>> Does R_alloc return a pointer to aligned memory?
>> if not how can I do this?
>> probably no, because R crashes when I succesively R_alloc and  
>> fill_array32 (cf below) on my macbook with R 2.7.1.
>
> R_alloc's alignment will be appropriate for holding any data type. It
> will be offset from a value returned by malloc by a multiple of 8
> bytes.
>
> My recollection, which may be wrong, is that on both Intel and PPC
> unaligned access to all basic data types is permitted but may be
> inefficient (in particular on Intel), so the reason for your crash is
> probably elsewhere.
>
> Best,
>
> luke
>
>>
>>
>> Thanks in advance
>>
>> Kind regards
>>
>> Christophe
>>
>>
>> PS : http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/howto-compile.html 
>>  provides an example of memalign.
>>
>> PPS : mac os report
>>
>>
>>
>> ______________________________________________
>> R-help at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>
> -- 
> Luke Tierney
> Chair, Statistics and Actuarial Science
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>   Actuarial Science
> 241 Schaeffer Hall                  email:      luke at stat.uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From bolker at zoology.ufl.edu  Wed Aug 13 22:53:03 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Wed, 13 Aug 2008 16:53:03 -0400
Subject: [Rd] messing with ...
In-Reply-To: <48A30D60.2020304@acm.org>
References: <48A3019E.5080209@zoology.ufl.edu> <48A30D60.2020304@acm.org>
Message-ID: <48A349AF.2030501@zoology.ufl.edu>

Tony Plate wrote:
> here's my two cents:
> - require names on parameters, rather than order
> - construct calls and use eval() rather than do.call() (then you can 
> manipulate list(...) without the ugh factor of do.call() -- though is 
> do.call() any different to eval() in R? -- I know in S-PLUS that the use 
> of do.call() can completely blow out memory usage)
> - to avoid manually duplicating arg lists, use constructs like 
> names(formals(optim)) and pmatch to find args that below to the 
> optimizer function vs the objective function
> 
> -- Tony Plate
>>
>>  thanks
>>
>>   Ben Bolker
>>

   The ugh factor referred to any explicit call or argument list
manipulation (it would be nicer to just pass ...) -- but your
advice makes sense, especially the naming stuff.

   Brian Ripley wrote:

 >  Using wrappers is a better idea: you can see the idea in several 
places in the base graphics code.

  Have you got a favorite example?

   cheers
     Ben


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080813/b408ad51/attachment.bin>

From dutangc at gmail.com  Wed Aug 13 09:45:56 2008
From: dutangc at gmail.com (christophe dutang)
Date: Wed, 13 Aug 2008 09:45:56 +0200
Subject: [Rd] [R] aligned memory allocation in C
In-Reply-To: <alpine.LFD.1.10.0808130729450.4508@gannet.stats.ox.ac.uk>
References: <8D60D9ED-4FF9-4D01-B8E8-2D04C4539870@wanadoo.fr>
	<48A24C66.3040809@vanderbilt.edu>
	<alpine.LFD.1.10.0808130729450.4508@gannet.stats.ox.ac.uk>
Message-ID: <c8e8cd3d0808130045w5fb1b1eaw310548d5847c7dda@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080813/fa0d6eca/attachment.pl>

From bolker at zoology.ufl.edu  Thu Aug 14 18:47:45 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Thu, 14 Aug 2008 12:47:45 -0400
Subject: [Rd] extending the derivs table/fools rushing in
Message-ID: <48A461B1.4060709@zoology.ufl.edu>


  I added "plogis" to the derivative table in the
development version of R; the patch against yesterday's
R-devel src/deriv/main.c is available at
http://www.zoology.ufl.edu/bolker/deriv_patch.txt .

  I pretty much followed the framework of the other symbols;
here was my incantation

- 	} else if (CAR(expr) == PlogisSymbol) {
- 	    ans = simplify(TimesSymbol,
- 			   PP_S(TimesSymbol,
- 				PP_S2(ExpSymbol,
- 				   PP_S2(MinusSymbol,CADR(expr))),
- 				PP_S(PowerSymbol,
- 				     PP_S(PlusSymbol,
- 					  Constant(1.),
- 					  PP_S2(ExpSymbol,
- 					     PP_S2(MinusSymbol,CADR(expr)))),
- 				     Constant(-2.))),
- 			   PP(D(CADR(expr),var)));
- 	    UNPROTECT(8);

It seems to work:

> D(quote(plogis(a)),"a")
exp(-a) * (1 + exp(-a))^-2
> D(quote(plogis(a+b*x)),"x")
exp(-(a + b * x)) * (1 + exp(-(a + b * x)))^-2 * b

  Any thoughts?  I'm sure there's a cleverer way to do this ...

  Ben Bolker

  PS I get a minor build error at the end of the compilation
(on Ubuntu 8.10):

make[2]: *** No rule to make target `VR.ts', needed by
`stamp-recommended'.  Stop.
make[2]: Leaving directory
`/usr/local/src/R/R-devel/src/library/Recommended'
make[1]: *** [recommended-packages] Error 2
make[1]: Leaving directory
`/usr/local/src/R/R-devel/src/library/Recommended'
make: *** [stamp-recommended] Error 2

  ... don't know if that is important or not.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080814/2712b33c/attachment.bin>

From ggrothendieck at gmail.com  Thu Aug 14 18:59:50 2008
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Thu, 14 Aug 2008 12:59:50 -0400
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <48A461B1.4060709@zoology.ufl.edu>
References: <48A461B1.4060709@zoology.ufl.edu>
Message-ID: <971536df0808140959g29f6aefemdeabfef33ff58367@mail.gmail.com>

While you are at it could you add { to the
table so that this works:

> # this is ok
> f <- function(x) x*x
> D(body(f), "x")
x + x

> # but not g which is same as f
> # except it has { ... } surrounding its body
> g <- function(x) { x*x }
> D(body(g), "x")
Error in D(body(g), "x") : Function '`{`' is not in the derivatives table


2008/8/14 Ben Bolker <bolker at zoology.ufl.edu>:
>
>  I added "plogis" to the derivative table in the
> development version of R; the patch against yesterday's
> R-devel src/deriv/main.c is available at
> http://www.zoology.ufl.edu/bolker/deriv_patch.txt .
>
>  I pretty much followed the framework of the other symbols;
> here was my incantation
>
> -       } else if (CAR(expr) == PlogisSymbol) {
> -           ans = simplify(TimesSymbol,
> -                          PP_S(TimesSymbol,
> -                               PP_S2(ExpSymbol,
> -                                  PP_S2(MinusSymbol,CADR(expr))),
> -                               PP_S(PowerSymbol,
> -                                    PP_S(PlusSymbol,
> -                                         Constant(1.),
> -                                         PP_S2(ExpSymbol,
> -                                            PP_S2(MinusSymbol,CADR(expr)))),
> -                                    Constant(-2.))),
> -                          PP(D(CADR(expr),var)));
> -           UNPROTECT(8);
>
> It seems to work:
>
>> D(quote(plogis(a)),"a")
> exp(-a) * (1 + exp(-a))^-2
>> D(quote(plogis(a+b*x)),"x")
> exp(-(a + b * x)) * (1 + exp(-(a + b * x)))^-2 * b
>
>  Any thoughts?  I'm sure there's a cleverer way to do this ...
>
>  Ben Bolker
>
>  PS I get a minor build error at the end of the compilation
> (on Ubuntu 8.10):
>
> make[2]: *** No rule to make target `VR.ts', needed by
> `stamp-recommended'.  Stop.
> make[2]: Leaving directory
> `/usr/local/src/R/R-devel/src/library/Recommended'
> make[1]: *** [recommended-packages] Error 2
> make[1]: Leaving directory
> `/usr/local/src/R/R-devel/src/library/Recommended'
> make: *** [stamp-recommended] Error 2
>
>  ... don't know if that is important or not.
>
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From bolker at zoology.ufl.edu  Thu Aug 14 19:07:52 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Thu, 14 Aug 2008 13:07:52 -0400
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <971536df0808140959g29f6aefemdeabfef33ff58367@mail.gmail.com>
References: <48A461B1.4060709@zoology.ufl.edu>
	<971536df0808140959g29f6aefemdeabfef33ff58367@mail.gmail.com>
Message-ID: <48A46668.2070405@zoology.ufl.edu>

 http://www.zoology.ufl.edu/bolker/deriv_patch2.txt

 has this change added as well.
 However, I'm not as confident that this is the right thing
to do?  Should curly brackets even be appearing in mathematical
expressions?

  Ben

Gabor Grothendieck wrote:
> While you are at it could you add { to the
> table so that this works:
> 
>> # this is ok
>> f <- function(x) x*x
>> D(body(f), "x")
> x + x
> 
>> # but not g which is same as f
>> # except it has { ... } surrounding its body
>> g <- function(x) { x*x }
>> D(body(g), "x")
> Error in D(body(g), "x") : Function '`{`' is not in the derivatives table
> 
> 
> 2008/8/14 Ben Bolker <bolker at zoology.ufl.edu>:
>>  I added "plogis" to the derivative table in the
>> development version of R; the patch against yesterday's
>> R-devel src/deriv/main.c is available at
>> http://www.zoology.ufl.edu/bolker/deriv_patch.txt .
>>
>>  I pretty much followed the framework of the other symbols;
>> here was my incantation
>>
>> -       } else if (CAR(expr) == PlogisSymbol) {
>> -           ans = simplify(TimesSymbol,
>> -                          PP_S(TimesSymbol,
>> -                               PP_S2(ExpSymbol,
>> -                                  PP_S2(MinusSymbol,CADR(expr))),
>> -                               PP_S(PowerSymbol,
>> -                                    PP_S(PlusSymbol,
>> -                                         Constant(1.),
>> -                                         PP_S2(ExpSymbol,
>> -                                            PP_S2(MinusSymbol,CADR(expr)))),
>> -                                    Constant(-2.))),
>> -                          PP(D(CADR(expr),var)));
>> -           UNPROTECT(8);
>>
>> It seems to work:
>>
>>> D(quote(plogis(a)),"a")
>> exp(-a) * (1 + exp(-a))^-2
>>> D(quote(plogis(a+b*x)),"x")
>> exp(-(a + b * x)) * (1 + exp(-(a + b * x)))^-2 * b
>>
>>  Any thoughts?  I'm sure there's a cleverer way to do this ...
>>
>>  Ben Bolker
>>
>>  PS I get a minor build error at the end of the compilation
>> (on Ubuntu 8.10):
>>
>> make[2]: *** No rule to make target `VR.ts', needed by
>> `stamp-recommended'.  Stop.
>> make[2]: Leaving directory
>> `/usr/local/src/R/R-devel/src/library/Recommended'
>> make[1]: *** [recommended-packages] Error 2
>> make[1]: Leaving directory
>> `/usr/local/src/R/R-devel/src/library/Recommended'
>> make: *** [stamp-recommended] Error 2
>>
>>  ... don't know if that is important or not.
>>
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080814/cd02413b/attachment.bin>

From ggrothendieck at gmail.com  Thu Aug 14 19:21:27 2008
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Thu, 14 Aug 2008 13:21:27 -0400
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <48A46668.2070405@zoology.ufl.edu>
References: <48A461B1.4060709@zoology.ufl.edu>
	<971536df0808140959g29f6aefemdeabfef33ff58367@mail.gmail.com>
	<48A46668.2070405@zoology.ufl.edu>
Message-ID: <971536df0808141021y28519a3dlb944fec96570bb73@mail.gmail.com>

Its a valid R function.   ?"{"

On Thu, Aug 14, 2008 at 1:07 PM, Ben Bolker <bolker at zoology.ufl.edu> wrote:
>  http://www.zoology.ufl.edu/bolker/deriv_patch2.txt
>
>  has this change added as well.
>  However, I'm not as confident that this is the right thing
> to do?  Should curly brackets even be appearing in mathematical
> expressions?
>
>  Ben
>
> Gabor Grothendieck wrote:
>> While you are at it could you add { to the
>> table so that this works:
>>
>>> # this is ok
>>> f <- function(x) x*x
>>> D(body(f), "x")
>> x + x
>>
>>> # but not g which is same as f
>>> # except it has { ... } surrounding its body
>>> g <- function(x) { x*x }
>>> D(body(g), "x")
>> Error in D(body(g), "x") : Function '`{`' is not in the derivatives table
>>
>>
>> 2008/8/14 Ben Bolker <bolker at zoology.ufl.edu>:
>>>  I added "plogis" to the derivative table in the
>>> development version of R; the patch against yesterday's
>>> R-devel src/deriv/main.c is available at
>>> http://www.zoology.ufl.edu/bolker/deriv_patch.txt .
>>>
>>>  I pretty much followed the framework of the other symbols;
>>> here was my incantation
>>>
>>> -       } else if (CAR(expr) == PlogisSymbol) {
>>> -           ans = simplify(TimesSymbol,
>>> -                          PP_S(TimesSymbol,
>>> -                               PP_S2(ExpSymbol,
>>> -                                  PP_S2(MinusSymbol,CADR(expr))),
>>> -                               PP_S(PowerSymbol,
>>> -                                    PP_S(PlusSymbol,
>>> -                                         Constant(1.),
>>> -                                         PP_S2(ExpSymbol,
>>> -                                            PP_S2(MinusSymbol,CADR(expr)))),
>>> -                                    Constant(-2.))),
>>> -                          PP(D(CADR(expr),var)));
>>> -           UNPROTECT(8);
>>>
>>> It seems to work:
>>>
>>>> D(quote(plogis(a)),"a")
>>> exp(-a) * (1 + exp(-a))^-2
>>>> D(quote(plogis(a+b*x)),"x")
>>> exp(-(a + b * x)) * (1 + exp(-(a + b * x)))^-2 * b
>>>
>>>  Any thoughts?  I'm sure there's a cleverer way to do this ...
>>>
>>>  Ben Bolker
>>>
>>>  PS I get a minor build error at the end of the compilation
>>> (on Ubuntu 8.10):
>>>
>>> make[2]: *** No rule to make target `VR.ts', needed by
>>> `stamp-recommended'.  Stop.
>>> make[2]: Leaving directory
>>> `/usr/local/src/R/R-devel/src/library/Recommended'
>>> make[1]: *** [recommended-packages] Error 2
>>> make[1]: Leaving directory
>>> `/usr/local/src/R/R-devel/src/library/Recommended'
>>> make: *** [stamp-recommended] Error 2
>>>
>>>  ... don't know if that is important or not.
>>>
>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>
>
>
>


From ripley at stats.ox.ac.uk  Thu Aug 14 19:59:50 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 14 Aug 2008 18:59:50 +0100 (BST)
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <48A461B1.4060709@zoology.ufl.edu>
References: <48A461B1.4060709@zoology.ufl.edu>
Message-ID: <alpine.LFD.1.10.0808141852080.22377@gannet.stats.ox.ac.uk>

The derivative of plogis is surely dlogis.  (And yes, there is a good 
reason why we have such a function: take a look at its C code.)

That means we would need an entry for dlogis too, I guess. I am not 
convinced that there is a real need for these (and where does this stop?) 
What would be much more useful is to make this user-extensible (as Bill 
Venables pointed out a decade ago).  [pd]norm were added in 2002 to 
support MASS, the ability to do all of MASS in R being a goal at the time.

On Thu, 14 Aug 2008, Ben Bolker wrote:

>
>  I added "plogis" to the derivative table in the
> development version of R; the patch against yesterday's
> R-devel src/deriv/main.c is available at
> http://www.zoology.ufl.edu/bolker/deriv_patch.txt .
>
>  I pretty much followed the framework of the other symbols;
> here was my incantation
>
> - 	} else if (CAR(expr) == PlogisSymbol) {
> - 	    ans = simplify(TimesSymbol,
> - 			   PP_S(TimesSymbol,
> - 				PP_S2(ExpSymbol,
> - 				   PP_S2(MinusSymbol,CADR(expr))),
> - 				PP_S(PowerSymbol,
> - 				     PP_S(PlusSymbol,
> - 					  Constant(1.),
> - 					  PP_S2(ExpSymbol,
> - 					     PP_S2(MinusSymbol,CADR(expr)))),
> - 				     Constant(-2.))),
> - 			   PP(D(CADR(expr),var)));
> - 	    UNPROTECT(8);
>
> It seems to work:
>
>> D(quote(plogis(a)),"a")
> exp(-a) * (1 + exp(-a))^-2
>> D(quote(plogis(a+b*x)),"x")
> exp(-(a + b * x)) * (1 + exp(-(a + b * x)))^-2 * b
>
>  Any thoughts?  I'm sure there's a cleverer way to do this ...
>
>  Ben Bolker
>
>  PS I get a minor build error at the end of the compilation
> (on Ubuntu 8.10):
>
> make[2]: *** No rule to make target `VR.ts', needed by
> `stamp-recommended'.  Stop.
> make[2]: Leaving directory
> `/usr/local/src/R/R-devel/src/library/Recommended'
> make[1]: *** [recommended-packages] Error 2
> make[1]: Leaving directory
> `/usr/local/src/R/R-devel/src/library/Recommended'
> make: *** [stamp-recommended] Error 2
>
>  ... don't know if that is important or not.
>
A local-to-you problem.

>
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From bolker at zoology.ufl.edu  Thu Aug 14 20:59:11 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Thu, 14 Aug 2008 14:59:11 -0400
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <alpine.LFD.1.10.0808141852080.22377@gannet.stats.ox.ac.uk>
References: <48A461B1.4060709@zoology.ufl.edu>
	<alpine.LFD.1.10.0808141852080.22377@gannet.stats.ox.ac.uk>
Message-ID: <48A4807F.3090004@zoology.ufl.edu>

Prof Brian Ripley wrote:
> The derivative of plogis is surely dlogis.  (And yes, there is a good
> reason why we have such a function: take a look at its C code.)

  Doh.
> 
> That means we would need an entry for dlogis too, I guess. I am not
> convinced that there is a real need for these (and where does this
> stop?) What would be much more useful is to make this user-extensible
> (as Bill Venables pointed out a decade ago).  [pd]norm were added in
> 2002 to support MASS, the ability to do all of MASS in R being a goal at
> the time.

   I agree it would be great to make this user-extensible, but it's
probably a bit beyond me ... I found a web-reference of Venables saying

> There is a detailed example towards the end of Ch. 9 of V&R on how
> to extend D() and make.call(), which are the work horses for
> deriv(), to handle new functions. The new functions handled there
> are dnorm() and pnorm(), but I() would be even easier, of course.

http://www.math.yorku.ca/Who/Faculty/Monette/pub/s-old/0690.html

 ... but this is from 1997 therefore presumably MASS3? or MASS2? --
I can't find my copy of MASS3 at the moment, and don't own MASS2 ...

   The reason behind this is that I was trying to write a simple
analytic derivative calculator for formulae of the form (e.g.)

y ~ dbinom(prob=plogis(a+b*x),size=N)

Obviously in this case I could just tell people to write the
formula out as

y ~ dbinom(prob=1/(1+exp(-(a+b*x))),size=N)

 ...

  Ben Bolker

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080814/93aefca2/attachment.bin>

From ggrothendieck at gmail.com  Thu Aug 14 21:47:38 2008
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Thu, 14 Aug 2008 15:47:38 -0400
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <48A4807F.3090004@zoology.ufl.edu>
References: <48A461B1.4060709@zoology.ufl.edu>
	<alpine.LFD.1.10.0808141852080.22377@gannet.stats.ox.ac.uk>
	<48A4807F.3090004@zoology.ufl.edu>
Message-ID: <971536df0808141247n4aa83481i97bffe7548c614d4@mail.gmail.com>

You could see if Ryacas package can do what you want:

http://ryacas.googlecode.com

2008/8/14 Ben Bolker <bolker at zoology.ufl.edu>:
> Prof Brian Ripley wrote:
>> The derivative of plogis is surely dlogis.  (And yes, there is a good
>> reason why we have such a function: take a look at its C code.)
>
>  Doh.
>>
>> That means we would need an entry for dlogis too, I guess. I am not
>> convinced that there is a real need for these (and where does this
>> stop?) What would be much more useful is to make this user-extensible
>> (as Bill Venables pointed out a decade ago).  [pd]norm were added in
>> 2002 to support MASS, the ability to do all of MASS in R being a goal at
>> the time.
>
>   I agree it would be great to make this user-extensible, but it's
> probably a bit beyond me ... I found a web-reference of Venables saying
>
>> There is a detailed example towards the end of Ch. 9 of V&R on how
>> to extend D() and make.call(), which are the work horses for
>> deriv(), to handle new functions. The new functions handled there
>> are dnorm() and pnorm(), but I() would be even easier, of course.
>
> http://www.math.yorku.ca/Who/Faculty/Monette/pub/s-old/0690.html
>
>  ... but this is from 1997 therefore presumably MASS3? or MASS2? --
> I can't find my copy of MASS3 at the moment, and don't own MASS2 ...
>
>   The reason behind this is that I was trying to write a simple
> analytic derivative calculator for formulae of the form (e.g.)
>
> y ~ dbinom(prob=plogis(a+b*x),size=N)
>
> Obviously in this case I could just tell people to write the
> formula out as
>
> y ~ dbinom(prob=1/(1+exp(-(a+b*x))),size=N)
>
>  ...
>
>  Ben Bolker
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From weigand.stephen at gmail.com  Thu Aug 14 21:53:26 2008
From: weigand.stephen at gmail.com (Stephen Weigand)
Date: Thu, 14 Aug 2008 14:53:26 -0500
Subject: [Rd] Typo in proc.time.Rd
Message-ID: <bc47d3330808141253i28662bbrff765ebfb4c6bf6b@mail.gmail.com>

There's a small typo in proc.time.Rd:

\sQuote{system lime} should be \sQuote{system time}

Thanks,

Stephen

-- 
Rochester, Minn. USA


From murdoch at stats.uwo.ca  Thu Aug 14 22:18:22 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Thu, 14 Aug 2008 16:18:22 -0400
Subject: [Rd] Typo in proc.time.Rd
In-Reply-To: <bc47d3330808141253i28662bbrff765ebfb4c6bf6b@mail.gmail.com>
References: <bc47d3330808141253i28662bbrff765ebfb4c6bf6b@mail.gmail.com>
Message-ID: <48A4930E.2070605@stats.uwo.ca>

Stephen Weigand wrote:
> There's a small typo in proc.time.Rd:
>
> \sQuote{system lime} should be \sQuote{system time}
>
> Thanks,
>
> Stephen
>
>   
Fixed, thanks.

Duncan Murdoch


From p.dalgaard at biostat.ku.dk  Thu Aug 14 22:30:14 2008
From: p.dalgaard at biostat.ku.dk (p.dalgaard at biostat.ku.dk)
Date: Thu, 14 Aug 2008 22:30:14 +0200 (CEST)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12537)
Message-ID: <20080814203014.8189E282EFF7@mail.pubhealth.ku.dk>

Shengqiao Li wrote:
> Hello all,
>
> I am generating large samples of random numbers. The RNG help page 
> says: "All the supplied uniform generators return 32-bit integer 
> values that are converted to doubles, so they take at most 2^32 
> distinct values and long runs will return duplicated values." But I 
> find that the cycles are not the same as the 32-bit integer.
>
> My test indicated that the cycles for Knuth's methods were 2^30 while 
> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated 
> in 10M numbers generated by runif using Wichmann-Hill. The other three 
> methods had cycle length of 2^32.
>
> So, anybody can explain this? And any improvement to the 
> implementation can be made to increase the cycle length like the 
> Wichmann-Hill method?
>
What test? These are not simple linear congruential generators. Just 
because you get the same value twice, it doesn't mean that the sequence 
is repeating. Perhaps you should read the entire help page rather than 
just the note.

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From murdoch at stats.uwo.ca  Thu Aug 14 23:05:09 2008
From: murdoch at stats.uwo.ca (murdoch at stats.uwo.ca)
Date: Thu, 14 Aug 2008 23:05:09 +0200 (CEST)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12538)
Message-ID: <20080814210509.D8EC1282EFC1@mail.pubhealth.ku.dk>

Shengqiao Li wrote:
> Hello all,
>
> I am generating large samples of random numbers. The RNG help page says: 
> "All the supplied uniform generators return 32-bit integer values that are 
> converted to doubles, so they take at most 2^32 distinct values and long 
> runs will return duplicated values." But I find that the cycles are not 
> the same as the 32-bit integer.
>   

This is no bug.  Cycle length and the set of possible values are 
different concepts. 

And please don't cross-post.

Duncan Murdoch
> My test indicated that the cycles for Knuth's methods were 2^30 while 
> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated in 
> 10M numbers generated by runif using Wichmann-Hill. The other three 
> methods had cycle length of 2^32.
>
> So, anybody can explain this? And any improvement to the 
> implementation can be made to increase the cycle length like the 
> Wichmann-Hill method?
>
>
> ========================================
> Shengqiao Li
>
> Research Associate
> The Department of Statistics
> West Virginia University
> Morgantown, WV 26506-6330
>
> ______________________________________________
> R-help at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From shli at stat.wvu.edu  Thu Aug 14 18:25:14 2008
From: shli at stat.wvu.edu (shli at stat.wvu.edu)
Date: Thu, 14 Aug 2008 18:25:14 +0200 (CEST)
Subject: [Rd] RNG Cycle and Duplication (PR#12536)
Message-ID: <20080814162514.42B32282C765@mail.pubhealth.ku.dk>

Hello all,

I am generating large samples of random numbers. The RNG help page says: 
"All the supplied uniform generators return 32-bit integer values that are 
converted to doubles, so they take at most 2^32 distinct values and long 
runs will return duplicated values." But I find that the cycles are not 
the same as the 32-bit integer.

My test indicated that the cycles for Knuth's methods were 2^30 while 
Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated in 
10M numbers generated by runif using Wichmann-Hill. The other three 
methods had cycle length of 2^32.

So, anybody can explain this? And any improvement to the 
implementation can be made to increase the cycle length like the 
Wichmann-Hill method?


========================================
Shengqiao Li

Research Associate
The Department of Statistics
West Virginia University
Morgantown, WV 26506-6330


From peter.ruckdeschel at itwm.fraunhofer.de  Thu Aug 14 14:33:51 2008
From: peter.ruckdeschel at itwm.fraunhofer.de (Dr. Peter Ruckdeschel)
Date: Thu, 14 Aug 2008 14:33:51 +0200
Subject: [Rd] cryptic message of R CMD check
Message-ID: <48A4262F.70402@itwm.fraunhofer.de>

Hi R-devels,

recently, we have seen a new warning by "R CMD check"
appearing for the devel-version of our package distrEx available on
 r-forge, e.g. as

*|install.packages("/distrEx/",repos="http://r-forge.r-project.org")|*

Here is the warning:

%---------------------
[...snip ...]

* checking for unstated dependencies in R code ... WARNING
.get_S4_methods_list(): *did* reduce list, dropping
     
See the information on DESCRIPTION files in the chapter 'Creating R
packages' of the 'Writing R Extensions' manual.

[...snip ...]
%-----------------------

We get the same warning under Linux and Windows (if this helps).

Unfortunately, we cannot give you very detailed information about
our R running --- it is R-2.8.0dev but somehow R.Version() failed
to give svn-details ---

 >R.Version()$version.string
[1] "R version 2.8.0 Under development (unstable) (2006-00-00 r00000)"

but we built this R based on the then devel-version on July 29.

Could you give us a clue in this
Thank you already

Peter

-- 
Dr. Peter Ruckdeschel, Abteilung Finanzmathematik, F3.17
Fraunhofer ITWM, Fraunhofer Platz 1, 67663 Kaiserslautern
Telefon:  +49 631/31600-4699
Fax    :  +49 631/31600-5699
E-Mail :  peter.ruckdeschel at itwm.fraunhofer.de



From shli at stat.wvu.edu  Thu Aug 14 23:45:09 2008
From: shli at stat.wvu.edu (shli at stat.wvu.edu)
Date: Thu, 14 Aug 2008 23:45:09 +0200 (CEST)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
Message-ID: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.

---559023410-851401618-1218751024=:15885
Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: QUOTED-PRINTABLE


I didn't describe the problem clearly. It's about the number of distinct=20
values. So just ignore cycle issue.

My tests were:

RNGkind(kind=3D"Knuth-TAOCP");
sum(duplicated(runif(1e7))); #return 46552

RNGkind(kind=3D"Knuth-TAOCP-2002");
sum(duplicated(runif(1e7))); #return 46415

#These collision frequency suggested there were 2^30 distinct values by=20
birthday problem.


RNGkind(kind=3D"Marsaglia-Multicarry");
sum(duplicated(runif(1e7))); #return 11682

RNGkind(kind=3D"Super-Duper");
sum(duplicated(runif(1e7))); #return 11542

RNGkind(kind=3D"Mersenne-Twister");
sum(duplicated(runif(1e7))); #return 11656

#These indicated there were 2^32 distinct values, which agrees with the=20
help info.

RNGkind(kind=3D"Wichmann-Hill");
sum(duplicated(runif(1e7))); #return 0

#So for this method, there should be more than 2^32 distinct values.

You may not get the exact numbers, but they should be close. So how to=20
explain above problem?

I need generate a large sample without any ties, it seems to me=20
"Wichmann-Hill" is only choice right now.

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
Shengqiao Li

The Department of Statistics
PO Box 6330
West Virginia University
Morgantown, WV 26506-6330
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

On Thu, 14 Aug 2008, Peter Dalgaard wrote:

> Shengqiao Li wrote:
>> Hello all,
>>=20
>> I am generating large samples of random numbers. The RNG help page says:=
=20
>> "All the supplied uniform generators return 32-bit integer values that a=
re=20
>> converted to doubles, so they take at most 2^32 distinct values and long=
=20
>> runs will return duplicated values." But I find that the cycles are not =
the=20
>> same as the 32-bit integer.
>>=20
>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated i=
n=20
>> 10M numbers generated by runif using Wichmann-Hill. The other three meth=
ods=20
>> had cycle length of 2^32.
>>=20
>> So, anybody can explain this? And any improvement to the implementation =
can=20
>> be made to increase the cycle length like the Wichmann-Hill method?
>>=20
> What test? These are not simple linear congruential generators. Just beca=
use=20
> you get the same value twice, it doesn't mean that the sequence is repeat=
ing.=20
> Perhaps you should read the entire help page rather than just the note.
>
> --=20
>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>
>
---559023410-851401618-1218751024=:15885--


From b.rowlingson at lancaster.ac.uk  Thu Aug 14 23:52:58 2008
From: b.rowlingson at lancaster.ac.uk (Barry Rowlingson)
Date: Thu, 14 Aug 2008 22:52:58 +0100
Subject: [Rd] Double-clicking in tk list dialogs
Message-ID: <d8ad40b50808141452p2b2f6fa1o10a70434c9123f67@mail.gmail.com>

Am I the only one who finds himself futilely double-clicking a CRAN
mirror in the dialog for choosing a CRAN mirror? Yes, double-clicking
works in Windows, but not in the Tk-based dialog on Linux. I'm going
to wear out my mouse button.

Adding the following line to the tk_select.list function in the tcltk
package adds double-click functionality to list dialogs:

  tkbind(box, "<Double-ButtonPress-1>",onOK)

 (put it in the right place though, after 'box' has been created).

 Not sure if this would be a default behaviour, or if its's worth
having a 'doubleClick=FALSE' argument that switches it on if TRUE.
Anyway, it was a little niggle that bothered me recently, and after
fixing someone else's TclTK problem recently I figured I'd have a go
at this.

 Consider it a feature request for the next version.

Barry


From ripley at stats.ox.ac.uk  Fri Aug 15 07:55:58 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 15 Aug 2008 06:55:58 +0100 (BST)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808150645140.6403@gannet.stats.ox.ac.uk>

Remember Wichmann-Hill is a composite generator.  Its composition does 
take more than 2^32 distinct values.

You still haven't identifed a problem here.  The note is to warn that 
runif() does repeat within a cycle, because people wrote code assuming 
otherwise.  It would be a poor use of runif() to rely on the low-order 
bits, and that's standard advice in the field.

For a large sample of uniforms use something like the normal inversion 
does, e.g. 2^(-30) * (runif(N, 0, 2^30) %% 2^30 + runif(N))

Please do leave R-bugs out of this: we already have 4 entries as a result 
of your misunderstandings and false claims.

On Thu, 14 Aug 2008, shli at stat.wvu.edu wrote:

>  This message is in MIME format.  The first part should be readable text,
>  while the remaining parts are likely unreadable without MIME-aware tools.
>
> ---559023410-851401618-1218751024=:15885
> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
> Content-Transfer-Encoding: QUOTED-PRINTABLE
>
>
> I didn't describe the problem clearly. It's about the number of distinct=20
> values. So just ignore cycle issue.
>
> My tests were:
>
> RNGkind(kind=3D"Knuth-TAOCP");
> sum(duplicated(runif(1e7))); #return 46552
>
> RNGkind(kind=3D"Knuth-TAOCP-2002");
> sum(duplicated(runif(1e7))); #return 46415
>
> #These collision frequency suggested there were 2^30 distinct values by=20
> birthday problem.
>
>
> RNGkind(kind=3D"Marsaglia-Multicarry");
> sum(duplicated(runif(1e7))); #return 11682
>
> RNGkind(kind=3D"Super-Duper");
> sum(duplicated(runif(1e7))); #return 11542
>
> RNGkind(kind=3D"Mersenne-Twister");
> sum(duplicated(runif(1e7))); #return 11656
>
> #These indicated there were 2^32 distinct values, which agrees with the=20
> help info.
>
> RNGkind(kind=3D"Wichmann-Hill");
> sum(duplicated(runif(1e7))); #return 0
>
> #So for this method, there should be more than 2^32 distinct values.
>
> You may not get the exact numbers, but they should be close. So how to=20
> explain above problem?
>
> I need generate a large sample without any ties, it seems to me=20
> "Wichmann-Hill" is only choice right now.
>
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
> Shengqiao Li
>
> The Department of Statistics
> PO Box 6330
> West Virginia University
> Morgantown, WV 26506-6330
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>
> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>
>> Shengqiao Li wrote:
>>> Hello all,
>>> =20
>>> I am generating large samples of random numbers. The RNG help page says:=
> =20
>>> "All the supplied uniform generators return 32-bit integer values that a=
> re=20
>>> converted to doubles, so they take at most 2^32 distinct values and long=
> =20
>>> runs will return duplicated values." But I find that the cycles are not =
> the=20
>>> same as the 32-bit integer.
>>> =20
>>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated i=
> n=20
>>> 10M numbers generated by runif using Wichmann-Hill. The other three meth=
> ods=20
>>> had cycle length of 2^32.
>>> =20
>>> So, anybody can explain this? And any improvement to the implementation =
> can=20
>>> be made to increase the cycle length like the Wichmann-Hill method?
>>> =20
>> What test? These are not simple linear congruential generators. Just beca=
> use=20
>> you get the same value twice, it doesn't mean that the sequence is repeat=
> ing.=20
>> Perhaps you should read the entire help page rather than just the note.
>>
>> --=20
>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>
>>
> ---559023410-851401618-1218751024=:15885--
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From murdoch at stats.uwo.ca  Fri Aug 15 07:58:29 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Fri, 15 Aug 2008 01:58:29 -0400
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
Message-ID: <48A51B05.2080505@stats.uwo.ca>

shli at stat.wvu.edu wrote:
>   This message is in MIME format.  The first part should be readable text,
>   while the remaining parts are likely unreadable without MIME-aware tools.
>
> ---559023410-851401618-1218751024=:15885
> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
> Content-Transfer-Encoding: QUOTED-PRINTABLE
>
>
> I didn't describe the problem clearly. It's about the number of distinct=20
> values. So just ignore cycle issue.
>
> My tests were:
>
> RNGkind(kind=3D"Knuth-TAOCP");
> sum(duplicated(runif(1e7))); #return 46552
>
> RNGkind(kind=3D"Knuth-TAOCP-2002");
> sum(duplicated(runif(1e7))); #return 46415
>
> #These collision frequency suggested there were 2^30 distinct values by=20
> birthday problem.
>   

The birthday problem distribution applies to independent draws, but they 
are only pseudo-independent.  I think the only ways to know for sure if 
there are 2^30 values are to look at the code, or run through a complete 
cycle.  And you need to determine the cycle by looking at .Random.seed, 
not at the returned value.
>
> RNGkind(kind=3D"Marsaglia-Multicarry");
> sum(duplicated(runif(1e7))); #return 11682
>
> RNGkind(kind=3D"Super-Duper");
> sum(duplicated(runif(1e7))); #return 11542
>
> RNGkind(kind=3D"Mersenne-Twister");
> sum(duplicated(runif(1e7))); #return 11656
>
> #These indicated there were 2^32 distinct values, which agrees with the=20
> help info.
>
>   

If there are 2^30 distinct values for the two generators above, that 
also agrees with the documentation.

> RNGkind(kind=3D"Wichmann-Hill");
> sum(duplicated(runif(1e7))); #return 0
>
> #So for this method, there should be more than 2^32 distinct values.
>
> You may not get the exact numbers, but they should be close. So how to=20
> explain above problem?
>   

You haven't demonstrated what you claim, but if you look at the source, 
you'll see that in fact the man page is wrong:  Wichmann-Hill is based 
on 3 integer values, which each take on approximately 15 bits of 
different values.  So Wichmann-Hill could take nearly 2^45 different 
values (actually 30269*30307*30323).

The source is in https://svn.r-project.org/R/trunk/src/main/RNG.c if you 
want to check the others.
> I need generate a large sample without any ties, it seems to me=20
> "Wichmann-Hill" is only choice right now.
>   

An alternative would be to construct a new value from two (or more) 
runif() values, but be careful that you don't mess up the distribution 
when you do that.

Duncan Murdoch
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
> Shengqiao Li
>
> The Department of Statistics
> PO Box 6330
> West Virginia University
> Morgantown, WV 26506-6330
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>
> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>
>   
>> Shengqiao Li wrote:
>>     
>>> Hello all,
>>> =20
>>> I am generating large samples of random numbers. The RNG help page says:=
>>>       
> =20
>   
>>> "All the supplied uniform generators return 32-bit integer values that a=
>>>       
> re=20
>   
>>> converted to doubles, so they take at most 2^32 distinct values and long=
>>>       
> =20
>   
>>> runs will return duplicated values." But I find that the cycles are not =
>>>       
> the=20
>   
>>> same as the 32-bit integer.
>>> =20
>>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated i=
>>>       
> n=20
>   
>>> 10M numbers generated by runif using Wichmann-Hill. The other three meth=
>>>       
> ods=20
>   
>>> had cycle length of 2^32.
>>> =20
>>> So, anybody can explain this? And any improvement to the implementation =
>>>       
> can=20
>   
>>> be made to increase the cycle length like the Wichmann-Hill method?
>>> =20
>>>       
>> What test? These are not simple linear congruential generators. Just beca=
>>     
> use=20
>   
>> you get the same value twice, it doesn't mean that the sequence is repeat=
>>     
> ing.=20
>   
>> Perhaps you should read the entire help page rather than just the note.
>>
>> --=20
>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>
>>
>>     
> ---559023410-851401618-1218751024=:15885--
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ripley at stats.ox.ac.uk  Fri Aug 15 08:21:29 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 15 Aug 2008 07:21:29 +0100 (BST)
Subject: [Rd] cryptic message of R CMD check
In-Reply-To: <48A4262F.70402@itwm.fraunhofer.de>
References: <48A4262F.70402@itwm.fraunhofer.de>
Message-ID: <alpine.LFD.1.10.0808150717470.7541@gannet.stats.ox.ac.uk>

I've recently seen that message disappear again: July 29 is a long time 
ago in R development terms.  Please do as the posting guide asked and 
update your R *before posting*.

On Thu, 14 Aug 2008, Dr. Peter Ruckdeschel wrote:

> Hi R-devels,
>
> recently, we have seen a new warning by "R CMD check"
> appearing for the devel-version of our package distrEx available on
> r-forge, e.g. as
>
> *|install.packages("/distrEx/",repos="http://r-forge.r-project.org")|*
>
> Here is the warning:
>
> %---------------------
> [...snip ...]
>
> * checking for unstated dependencies in R code ... WARNING
> .get_S4_methods_list(): *did* reduce list, dropping
>    See the information on DESCRIPTION files in the chapter 'Creating R
> packages' of the 'Writing R Extensions' manual.
>
> [...snip ...]
> %-----------------------
>
> We get the same warning under Linux and Windows (if this helps).
>
> Unfortunately, we cannot give you very detailed information about
> our R running --- it is R-2.8.0dev but somehow R.Version() failed
> to give svn-details ---

You built it from an SVN checkut on a machine without functional SVN, I 
believe.

>> R.Version()$version.string
> [1] "R version 2.8.0 Under development (unstable) (2006-00-00 r00000)"
>
> but we built this R based on the then devel-version on July 29.
>
> Could you give us a clue in this
> Thank you already
>
> Peter
>
> -- 
> Dr. Peter Ruckdeschel, Abteilung Finanzmathematik, F3.17
> Fraunhofer ITWM, Fraunhofer Platz 1, 67663 Kaiserslautern
> Telefon:  +49 631/31600-4699
> Fax    :  +49 631/31600-5699
> E-Mail :  peter.ruckdeschel at itwm.fraunhofer.de
>
>
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Fri Aug 15 08:28:40 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 15 Aug 2008 07:28:40 +0100 (BST)
Subject: [Rd] Double-clicking in tk list dialogs
In-Reply-To: <d8ad40b50808141452p2b2f6fa1o10a70434c9123f67@mail.gmail.com>
References: <d8ad40b50808141452p2b2f6fa1o10a70434c9123f67@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808150724370.7541@gannet.stats.ox.ac.uk>

It does not seem to be standard practice for Tk-based interfaces (and 
indeed it was not part of GraphApp on Windows -- I added it after some 
years).

If you supply a tested patch to the R-devel sources it will be considered 
for 2.8.0.  The 'next version' is 2.7.2 and imminent, so I don't think we 
would consider it for that unless you get lots of support in the next 24 
hours.

On Thu, 14 Aug 2008, Barry Rowlingson wrote:

> Am I the only one who finds himself futilely double-clicking a CRAN
> mirror in the dialog for choosing a CRAN mirror? Yes, double-clicking
> works in Windows, but not in the Tk-based dialog on Linux. I'm going
> to wear out my mouse button.

I am surprised you have not set up a preferred CRAN mirror long ago.

> Adding the following line to the tk_select.list function in the tcltk
> package adds double-click functionality to list dialogs:
>
>  tkbind(box, "<Double-ButtonPress-1>",onOK)
>
> (put it in the right place though, after 'box' has been created).
>
> Not sure if this would be a default behaviour, or if its's worth
> having a 'doubleClick=FALSE' argument that switches it on if TRUE.
> Anyway, it was a little niggle that bothered me recently, and after
> fixing someone else's TclTK problem recently I figured I'd have a go
> at this.
>
> Consider it a feature request for the next version.
>
> Barry
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From bugs at philosof.dk  Fri Aug 15 14:50:03 2008
From: bugs at philosof.dk (bugs at philosof.dk)
Date: Fri, 15 Aug 2008 14:50:03 +0200 (CEST)
Subject: [Rd] 'javareconf -e' as normal user (PR#12544)
Message-ID: <20080815125003.3CD05282C765@mail.pubhealth.ku.dk>

Full_Name: Rune Philosof
Version: 2.6.2 and 2.7.1
OS: Ubuntu 8.04
Submission from: (NULL) (130.226.87.177)


When I try to install rJava I am requested to run 'R CMD javareconf -e' if I
don't have root access.

rune at rune-laptop:~$ R CMD javareconf -e
shift: 59: can't shift that many


From bolker at zoology.ufl.edu  Fri Aug 15 15:50:17 2008
From: bolker at zoology.ufl.edu (Ben Bolker)
Date: Fri, 15 Aug 2008 09:50:17 -0400
Subject: [Rd] extending the derivs table/fools rushing in
In-Reply-To: <971536df0808141432w66cd55e4u10bdf0b789208a8b@mail.gmail.com>
References: <48A461B1.4060709@zoology.ufl.edu>	
	<alpine.LFD.1.10.0808141852080.22377@gannet.stats.ox.ac.uk>	
	<48A4807F.3090004@zoology.ufl.edu>	
	<971536df0808141247n4aa83481i97bffe7548c614d4@mail.gmail.com>	
	<48A4934E.7070308@zoology.ufl.edu>
	<971536df0808141432w66cd55e4u10bdf0b789208a8b@mail.gmail.com>
Message-ID: <48A58999.9080409@zoology.ufl.edu>

Gabor Grothendieck wrote:
> If they are on Windows installing Yacas is just a matter
> of issuing a single R command with no arguments.
> yacas grabs it from the net and installs it automaticaly
> without any further user interaction.  It also reminds you
> to give the command and tells you exactly what it is just
> after you issue:
> 
> library(Ryacas)
> 
> (You can also set up it up locally to include yacas right
> in the R distribution and originally we did it that way but
> had to remove it for CRAN.)
> 
> Another thing you could do would be to copy the derivative
> code from R and put it in your own package and then
> you can make any enhancements you like without
> having to go through the R core.
> 
> Regards.
> 

   Hmmm.  Interesting but ...
  now I'm wondering (continuing masochism) how hard it would
actually be to implement the derivative rules in native R,
which might (?) make it much easier to include the derivative
rules as an extendable table.

  I may play with this some -- it's certainly re-inventing
the wheel to reimplement all of the stuff in deriv.c in native
R, but it might be worth it in the long run ...

   Ben



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080815/806f629a/attachment.bin>

From ripley at stats.ox.ac.uk  Fri Aug 15 17:40:39 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 15 Aug 2008 16:40:39 +0100 (BST)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <Pine.GSO.4.61.0808151031140.17578@bayes>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
	<alpine.LFD.1.10.0808150645140.6403@gannet.stats.ox.ac.uk>
	<Pine.GSO.4.61.0808151031140.17578@bayes>
Message-ID: <alpine.LFD.1.10.0808151637330.2962@gannet.stats.ox.ac.uk>

On Fri, 15 Aug 2008, Shengqiao Li wrote:

>
> Professor Ripley,
>
> Thank you for your solution.  So the last paragraph of the Note in RNG help 
> page will be updated since Wichmann-Hill is different from other supplied 
> uniform generators in the number of distinct values?

Please read and follow the R posting guide, and check the current version 
*before* posting as you were asked to do.

> Shengqiao Li
>
>
> On Fri, 15 Aug 2008, Prof Brian Ripley wrote:
>
>> Remember Wichmann-Hill is a composite generator.  Its composition does take 
>> more than 2^32 distinct values.
>> 
>> You still haven't identifed a problem here.  The note is to warn that 
>> runif() does repeat within a cycle, because people wrote code assuming 
>> otherwise.  It would be a poor use of runif() to rely on the low-order 
>> bits, and that's standard advice in the field.
>> 
>> For a large sample of uniforms use something like the normal inversion 
>> does, e.g. 2^(-30) * (runif(N, 0, 2^30) %% 2^30 + runif(N))
>> 
>> Please do leave R-bugs out of this: we already have 4 entries as a result 
>> of your misunderstandings and false claims.
>> 
>> On Thu, 14 Aug 2008, shli at stat.wvu.edu wrote:
>>
>>>  This message is in MIME format.  The first part should be readable text,
>>>  while the remaining parts are likely unreadable without MIME-aware tools.
>>> 
>>> ---559023410-851401618-1218751024=:15885
>>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>>> 
>>> 
>>> I didn't describe the problem clearly. It's about the number of 
>>> distinct=20
>>> values. So just ignore cycle issue.
>>> 
>>> My tests were:
>>> 
>>> RNGkind(kind=3D"Knuth-TAOCP");
>>> sum(duplicated(runif(1e7))); #return 46552
>>> 
>>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>>> sum(duplicated(runif(1e7))); #return 46415
>>> 
>>> #These collision frequency suggested there were 2^30 distinct values by=20
>>> birthday problem.
>>> 
>>> 
>>> RNGkind(kind=3D"Marsaglia-Multicarry");
>>> sum(duplicated(runif(1e7))); #return 11682
>>> 
>>> RNGkind(kind=3D"Super-Duper");
>>> sum(duplicated(runif(1e7))); #return 11542
>>> 
>>> RNGkind(kind=3D"Mersenne-Twister");
>>> sum(duplicated(runif(1e7))); #return 11656
>>> 
>>> #These indicated there were 2^32 distinct values, which agrees with the=20
>>> help info.
>>> 
>>> RNGkind(kind=3D"Wichmann-Hill");
>>> sum(duplicated(runif(1e7))); #return 0
>>> 
>>> #So for this method, there should be more than 2^32 distinct values.
>>> 
>>> You may not get the exact numbers, but they should be close. So how to=20
>>> explain above problem?
>>> 
>>> I need generate a large sample without any ties, it seems to me=20
>>> "Wichmann-Hill" is only choice right now.
>>> 
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>> Shengqiao Li
>>> 
>>> The Department of Statistics
>>> PO Box 6330
>>> West Virginia University
>>> Morgantown, WV 26506-6330
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>> 
>>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>>> 
>>>> Shengqiao Li wrote:
>>>>> Hello all,
>>>>> =20
>>>>> I am generating large samples of random numbers. The RNG help page 
>>>>> says:=
>>> =20
>>>>> "All the supplied uniform generators return 32-bit integer values that 
>>>>> a=
>>> re=20
>>>>> converted to doubles, so they take at most 2^32 distinct values and 
>>>>> long=
>>> =20
>>>>> runs will return duplicated values." But I find that the cycles are not 
>>>>> =
>>> the=20
>>>>> same as the 32-bit integer.
>>>>> =20
>>>>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated 
>>>>> i=
>>> n=20
>>>>> 10M numbers generated by runif using Wichmann-Hill. The other three 
>>>>> meth=
>>> ods=20
>>>>> had cycle length of 2^32.
>>>>> =20
>>>>> So, anybody can explain this? And any improvement to the implementation 
>>>>> =
>>> can=20
>>>>> be made to increase the cycle length like the Wichmann-Hill method?
>>>>> =20
>>>> What test? These are not simple linear congruential generators. Just 
>>>> beca=
>>> use=20
>>>> you get the same value twice, it doesn't mean that the sequence is 
>>>> repeat=
>>> ing.=20
>>>> Perhaps you should read the entire help page rather than just the note.
>>>> 
>>>> --=20
>>>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>>> 
>>>> 
>>> ---559023410-851401618-1218751024=:15885--
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> -- 
>> Brian D. Ripley,                  ripley at stats.ox.ac.uk
>> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
>> University of Oxford,             Tel:  +44 1865 272861 (self)
>> 1 South Parks Road,                     +44 1865 272866 (PA)
>> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>> 
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From jhallman at frb.gov  Fri Aug 15 18:34:26 2008
From: jhallman at frb.gov (jhallman at frb.gov)
Date: Fri, 15 Aug 2008 12:34:26 -0400
Subject: [Rd] Constructor blah() vs. as.blah()
Message-ID: <31855.1218818066@mralx1.rsma.frb.gov>

When should we use one versus the other?  If I'm designing an S3 class
"blah", should I just implement

blah <- function(x, ...) UseMethod("blah")

and then a bunch of blah.whatever() functions, including blah.default()?
Or should I do

as.blah <- function(x, ...) UseMethod("as.blah")

with a bunch of methods for it?  Or do both?  

Jeff


From mwkimpel at gmail.com  Fri Aug 15 20:01:38 2008
From: mwkimpel at gmail.com (Mark Kimpel)
Date: Fri, 15 Aug 2008 14:01:38 -0400
Subject: [Rd] error in help page of function interpSpline of package splines
	in R-devel
Message-ID: <6b93d1830808151101y2004c0a1gd6862f6512c6c7f8@mail.gmail.com>

Unless I am misreading something, I believe there is an error in the
help page of function interpSpline of package splines in R-devel.

The function prototype reads:
 interpSpline(obj1, obj2, bSpline = FALSE, period = NULL, na.action = na.fail)

whereas in the Arguments section, under na.action, the text reads "The
default action ('na.omit') is to omit any incomplete observations. "
Based on today's experience, I believe the function prototype is
correct and the text description should be amended.

Mark

--
Mark W. Kimpel MD ** Neuroinformatics ** Dept. of Psychiatry
Indiana University School of Medicine

15032 Hunter Court, Westfield, IN 46074

(317) 490-5129 Work, & Mobile & VoiceMail
(317) 663-0513 Home (no voice mail please)


From shli at stat.wvu.edu  Fri Aug 15 16:28:38 2008
From: shli at stat.wvu.edu (Shengqiao Li)
Date: Fri, 15 Aug 2008 10:28:38 -0400 (EDT)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <48A51B05.2080505@stats.uwo.ca>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
	<48A51B05.2080505@stats.uwo.ca>
Message-ID: <Pine.GSO.4.61.0808151015350.17578@bayes>


Thank you for your reply and for your suggestion. So the note in man page 
could be more accurate since for an end user, man page should be more 
helpful and source code is mainly for developers.

I was also adviced to use Knuth's  double version RANARRAY from
http://www-cs-faculty.stanford.edu/~knuth/programs.html instead of the 
integer versions in R. I'm a R user. So why not 
also include the double verion in R implementation?

Thanks again,

========================================
Shengqiao Li

Research Associate
The Department of Statistics
PO Box 6330
West Virginia University
Morgantown, WV 26506-6330

========================================

On Fri, 15 Aug 2008, Duncan Murdoch wrote:

> shli at stat.wvu.edu wrote:
>>   This message is in MIME format.  The first part should be readable text,
>>   while the remaining parts are likely unreadable without MIME-aware tools.
>> 
>> ---559023410-851401618-1218751024=:15885
>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>> 
>> 
>> I didn't describe the problem clearly. It's about the number of distinct=20
>> values. So just ignore cycle issue.
>> 
>> My tests were:
>> 
>> RNGkind(kind=3D"Knuth-TAOCP");
>> sum(duplicated(runif(1e7))); #return 46552
>> 
>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>> sum(duplicated(runif(1e7))); #return 46415
>> 
>> #These collision frequency suggested there were 2^30 distinct values by=20
>> birthday problem.
>> 
>
> The birthday problem distribution applies to independent draws, but they are 
> only pseudo-independent.  I think the only ways to know for sure if there are 
> 2^30 values are to look at the code, or run through a complete cycle.  And 
> you need to determine the cycle by looking at .Random.seed, not at the 
> returned value.
>> 
>> RNGkind(kind=3D"Marsaglia-Multicarry");
>> sum(duplicated(runif(1e7))); #return 11682
>> 
>> RNGkind(kind=3D"Super-Duper");
>> sum(duplicated(runif(1e7))); #return 11542
>> 
>> RNGkind(kind=3D"Mersenne-Twister");
>> sum(duplicated(runif(1e7))); #return 11656
>> 
>> #These indicated there were 2^32 distinct values, which agrees with the=20
>> help info.
>> 
>> 
>
> If there are 2^30 distinct values for the two generators above, that also 
> agrees with the documentation.
>
>> RNGkind(kind=3D"Wichmann-Hill");
>> sum(duplicated(runif(1e7))); #return 0
>> 
>> #So for this method, there should be more than 2^32 distinct values.
>> 
>> You may not get the exact numbers, but they should be close. So how to=20
>> explain above problem?
>> 
>
> You haven't demonstrated what you claim, but if you look at the source, 
> you'll see that in fact the man page is wrong:  Wichmann-Hill is based on 3 
> integer values, which each take on approximately 15 bits of different values. 
> So Wichmann-Hill could take nearly 2^45 different values (actually 
> 30269*30307*30323).
>
> The source is in https://svn.r-project.org/R/trunk/src/main/RNG.c if you want 
> to check the others.
>> I need generate a large sample without any ties, it seems to me=20
>> "Wichmann-Hill" is only choice right now.
>> 
>
> An alternative would be to construct a new value from two (or more) runif() 
> values, but be careful that you don't mess up the distribution when you do 
> that.
>
> Duncan Murdoch
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>> Shengqiao Li
>> 
>> The Department of Statistics
>> PO Box 6330
>> West Virginia University
>> Morgantown, WV 26506-6330
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>> 
>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>> 
>> 
>>> Shengqiao Li wrote:
>>> 
>>>> Hello all,
>>>> =20
>>>> I am generating large samples of random numbers. The RNG help page says:=
>>>> 
>> =20
>> 
>>>> "All the supplied uniform generators return 32-bit integer values that a=
>>>> 
>> re=20
>> 
>>>> converted to doubles, so they take at most 2^32 distinct values and long=
>>>> 
>> =20
>> 
>>>> runs will return duplicated values." But I find that the cycles are not =
>>>> 
>> the=20
>> 
>>>> same as the 32-bit integer.
>>>> =20
>>>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated i=
>>>> 
>> n=20
>> 
>>>> 10M numbers generated by runif using Wichmann-Hill. The other three meth=
>>>> 
>> ods=20
>> 
>>>> had cycle length of 2^32.
>>>> =20
>>>> So, anybody can explain this? And any improvement to the implementation =
>>>> 
>> can=20
>> 
>>>> be made to increase the cycle length like the Wichmann-Hill method?
>>>> =20
>>>> 
>>> What test? These are not simple linear congruential generators. Just beca=
>>> 
>> use=20
>> 
>>> you get the same value twice, it doesn't mean that the sequence is repeat=
>>> 
>> ing.=20
>> 
>>> Perhaps you should read the entire help page rather than just the note.
>>> 
>>> --=20
>>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>> 
>>> 
>>> 
>> ---559023410-851401618-1218751024=:15885--
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>
>


From shli at stat.wvu.edu  Fri Aug 15 16:52:45 2008
From: shli at stat.wvu.edu (Shengqiao Li)
Date: Fri, 15 Aug 2008 10:52:45 -0400 (EDT)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <alpine.LFD.1.10.0808150645140.6403@gannet.stats.ox.ac.uk>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
	<alpine.LFD.1.10.0808150645140.6403@gannet.stats.ox.ac.uk>
Message-ID: <Pine.GSO.4.61.0808151031140.17578@bayes>


Professor Ripley,

Thank you for your solution.  So the last paragraph of the Note in RNG 
help page will be updated since Wichmann-Hill is different from other 
supplied uniform generators in the number of distinct values?

Shengqiao Li


On Fri, 15 Aug 2008, Prof Brian Ripley wrote:

> Remember Wichmann-Hill is a composite generator.  Its composition does take 
> more than 2^32 distinct values.
>
> You still haven't identifed a problem here.  The note is to warn that runif() 
> does repeat within a cycle, because people wrote code assuming otherwise.  It 
> would be a poor use of runif() to rely on the low-order bits, and that's 
> standard advice in the field.
>
> For a large sample of uniforms use something like the normal inversion does, 
> e.g. 2^(-30) * (runif(N, 0, 2^30) %% 2^30 + runif(N))
>
> Please do leave R-bugs out of this: we already have 4 entries as a result of 
> your misunderstandings and false claims.
>
> On Thu, 14 Aug 2008, shli at stat.wvu.edu wrote:
>
>>  This message is in MIME format.  The first part should be readable text,
>>  while the remaining parts are likely unreadable without MIME-aware tools.
>> 
>> ---559023410-851401618-1218751024=:15885
>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>> 
>> 
>> I didn't describe the problem clearly. It's about the number of distinct=20
>> values. So just ignore cycle issue.
>> 
>> My tests were:
>> 
>> RNGkind(kind=3D"Knuth-TAOCP");
>> sum(duplicated(runif(1e7))); #return 46552
>> 
>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>> sum(duplicated(runif(1e7))); #return 46415
>> 
>> #These collision frequency suggested there were 2^30 distinct values by=20
>> birthday problem.
>> 
>> 
>> RNGkind(kind=3D"Marsaglia-Multicarry");
>> sum(duplicated(runif(1e7))); #return 11682
>> 
>> RNGkind(kind=3D"Super-Duper");
>> sum(duplicated(runif(1e7))); #return 11542
>> 
>> RNGkind(kind=3D"Mersenne-Twister");
>> sum(duplicated(runif(1e7))); #return 11656
>> 
>> #These indicated there were 2^32 distinct values, which agrees with the=20
>> help info.
>> 
>> RNGkind(kind=3D"Wichmann-Hill");
>> sum(duplicated(runif(1e7))); #return 0
>> 
>> #So for this method, there should be more than 2^32 distinct values.
>> 
>> You may not get the exact numbers, but they should be close. So how to=20
>> explain above problem?
>> 
>> I need generate a large sample without any ties, it seems to me=20
>> "Wichmann-Hill" is only choice right now.
>> 
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>> Shengqiao Li
>> 
>> The Department of Statistics
>> PO Box 6330
>> West Virginia University
>> Morgantown, WV 26506-6330
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>> 
>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>> 
>>> Shengqiao Li wrote:
>>>> Hello all,
>>>> =20
>>>> I am generating large samples of random numbers. The RNG help page says:=
>> =20
>>>> "All the supplied uniform generators return 32-bit integer values that a=
>> re=20
>>>> converted to doubles, so they take at most 2^32 distinct values and long=
>> =20
>>>> runs will return duplicated values." But I find that the cycles are not =
>> the=20
>>>> same as the 32-bit integer.
>>>> =20
>>>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated i=
>> n=20
>>>> 10M numbers generated by runif using Wichmann-Hill. The other three meth=
>> ods=20
>>>> had cycle length of 2^32.
>>>> =20
>>>> So, anybody can explain this? And any improvement to the implementation =
>> can=20
>>>> be made to increase the cycle length like the Wichmann-Hill method?
>>>> =20
>>> What test? These are not simple linear congruential generators. Just beca=
>> use=20
>>> you get the same value twice, it doesn't mean that the sequence is repeat=
>> ing.=20
>>> Perhaps you should read the entire help page rather than just the note.
>>> 
>>> --=20
>>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>> 
>>> 
>> ---559023410-851401618-1218751024=:15885--
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>


From hb at stat.berkeley.edu  Fri Aug 15 23:00:25 2008
From: hb at stat.berkeley.edu (Henrik Bengtsson)
Date: Fri, 15 Aug 2008 14:00:25 -0700
Subject: [Rd] Constructor blah() vs. as.blah()
In-Reply-To: <31855.1218818066@mralx1.rsma.frb.gov>
References: <31855.1218818066@mralx1.rsma.frb.gov>
Message-ID: <59d7961d0808151400y537ca10dn4db36aa68d45521f@mail.gmail.com>

This thread is going to be a lot about matter of tastes, but at least
I would think of blah() as a constructor function and as.blah() as a
coerce function.   There should always be one constructor function,
but providing coerce functions is optional.

Furthermore, the constructor function should be as basic as possible
and have minimal dependencies.  For instance, if you create your own
class for bitmap images, then you probably want to be able to extract
a bitmap object of your class from say pixmap or EBImage image
objects.  In the future there might be other image classes showing up.
 To keep you code and API clean, it is better create as.blah() methods
for those classes and keep them out of the more light-weight
constructor function.

These thoughts applies also to S4 classes, where one should avoid
having users to call new(), but instead provide a constructor
function.  It should be hidden as far as possible whether S3 or S4 is
used.  If you one change from an S3 to an S4 implementation of you
class and methods, ideally existing scripts using you code should look
the same as before and after.

Hope this helps

/Henrik


On Fri, Aug 15, 2008 at 9:34 AM,  <jhallman at frb.gov> wrote:
> When should we use one versus the other?  If I'm designing an S3 class
> "blah", should I just implement
>
> blah <- function(x, ...) UseMethod("blah")
>
> and then a bunch of blah.whatever() functions, including blah.default()?
> Or should I do
>
> as.blah <- function(x, ...) UseMethod("as.blah")
>
> with a bunch of methods for it?  Or do both?
>
> Jeff
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch at stats.uwo.ca  Sat Aug 16 02:50:42 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Fri, 15 Aug 2008 20:50:42 -0400
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <Pine.GSO.4.61.0808151015350.17578@bayes>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>	<48A51B05.2080505@stats.uwo.ca>
	<Pine.GSO.4.61.0808151015350.17578@bayes>
Message-ID: <48A62462.2010405@stats.uwo.ca>

On 15/08/2008 10:28 AM, Shengqiao Li wrote:
> Thank you for your reply and for your suggestion. So the note in man page 
> could be more accurate since for an end user, man page should be more 
> helpful and source code is mainly for developers.
> 
> I was also adviced to use Knuth's  double version RANARRAY from
> http://www-cs-faculty.stanford.edu/~knuth/programs.html instead of the 
> integer versions in R. I'm a R user. So why not 
> also include the double verion in R implementation?

You can try it using kind="user-supplied" if you like, but I suspect 
it's the same as "Knuth-TAOCP-2002".

Duncan Murdoch

> 
> Thanks again,
> 
> ========================================
> Shengqiao Li
> 
> Research Associate
> The Department of Statistics
> PO Box 6330
> West Virginia University
> Morgantown, WV 26506-6330
> 
> ========================================
> 
> On Fri, 15 Aug 2008, Duncan Murdoch wrote:
> 
>> shli at stat.wvu.edu wrote:
>>>   This message is in MIME format.  The first part should be readable text,
>>>   while the remaining parts are likely unreadable without MIME-aware tools.
>>>
>>> ---559023410-851401618-1218751024=:15885
>>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>>>
>>>
>>> I didn't describe the problem clearly. It's about the number of distinct=20
>>> values. So just ignore cycle issue.
>>>
>>> My tests were:
>>>
>>> RNGkind(kind=3D"Knuth-TAOCP");
>>> sum(duplicated(runif(1e7))); #return 46552
>>>
>>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>>> sum(duplicated(runif(1e7))); #return 46415
>>>
>>> #These collision frequency suggested there were 2^30 distinct values by=20
>>> birthday problem.
>>>
>> The birthday problem distribution applies to independent draws, but they are 
>> only pseudo-independent.  I think the only ways to know for sure if there are 
>> 2^30 values are to look at the code, or run through a complete cycle.  And 
>> you need to determine the cycle by looking at .Random.seed, not at the 
>> returned value.
>>> RNGkind(kind=3D"Marsaglia-Multicarry");
>>> sum(duplicated(runif(1e7))); #return 11682
>>>
>>> RNGkind(kind=3D"Super-Duper");
>>> sum(duplicated(runif(1e7))); #return 11542
>>>
>>> RNGkind(kind=3D"Mersenne-Twister");
>>> sum(duplicated(runif(1e7))); #return 11656
>>>
>>> #These indicated there were 2^32 distinct values, which agrees with the=20
>>> help info.
>>>
>>>
>> If there are 2^30 distinct values for the two generators above, that also 
>> agrees with the documentation.
>>
>>> RNGkind(kind=3D"Wichmann-Hill");
>>> sum(duplicated(runif(1e7))); #return 0
>>>
>>> #So for this method, there should be more than 2^32 distinct values.
>>>
>>> You may not get the exact numbers, but they should be close. So how to=20
>>> explain above problem?
>>>
>> You haven't demonstrated what you claim, but if you look at the source, 
>> you'll see that in fact the man page is wrong:  Wichmann-Hill is based on 3 
>> integer values, which each take on approximately 15 bits of different values. 
>> So Wichmann-Hill could take nearly 2^45 different values (actually 
>> 30269*30307*30323).
>>
>> The source is in https://svn.r-project.org/R/trunk/src/main/RNG.c if you want 
>> to check the others.
>>> I need generate a large sample without any ties, it seems to me=20
>>> "Wichmann-Hill" is only choice right now.
>>>
>> An alternative would be to construct a new value from two (or more) runif() 
>> values, but be careful that you don't mess up the distribution when you do 
>> that.
>>
>> Duncan Murdoch
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>> Shengqiao Li
>>>
>>> The Department of Statistics
>>> PO Box 6330
>>> West Virginia University
>>> Morgantown, WV 26506-6330
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>
>>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>>>
>>>
>>>> Shengqiao Li wrote:
>>>>
>>>>> Hello all,
>>>>> =20
>>>>> I am generating large samples of random numbers. The RNG help page says:=
>>>>>
>>> =20
>>>
>>>>> "All the supplied uniform generators return 32-bit integer values that a=
>>>>>
>>> re=20
>>>
>>>>> converted to doubles, so they take at most 2^32 distinct values and long=
>>>>>
>>> =20
>>>
>>>>> runs will return duplicated values." But I find that the cycles are not =
>>>>>
>>> the=20
>>>
>>>>> same as the 32-bit integer.
>>>>> =20
>>>>> My test indicated that the cycles for Knuth's methods were 2^30 while=20
>>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated i=
>>>>>
>>> n=20
>>>
>>>>> 10M numbers generated by runif using Wichmann-Hill. The other three meth=
>>>>>
>>> ods=20
>>>
>>>>> had cycle length of 2^32.
>>>>> =20
>>>>> So, anybody can explain this? And any improvement to the implementation =
>>>>>
>>> can=20
>>>
>>>>> be made to increase the cycle length like the Wichmann-Hill method?
>>>>> =20
>>>>>
>>>> What test? These are not simple linear congruential generators. Just beca=
>>>>
>>> use=20
>>>
>>>> you get the same value twice, it doesn't mean that the sequence is repeat=
>>>>
>>> ing.=20
>>>
>>>> Perhaps you should read the entire help page rather than just the note.
>>>>
>>>> --=20
>>>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>>>
>>>>
>>>>
>>> ---559023410-851401618-1218751024=:15885--
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From davison at stats.ox.ac.uk  Sat Aug 16 18:52:10 2008
From: davison at stats.ox.ac.uk (Dan Davison)
Date: Sat, 16 Aug 2008 17:52:10 +0100
Subject: [Rd] relist.Rd patch
Message-ID: <20080816165210.GA2585@stats.ox.ac.uk>

There are a few typos in the documentation for relist(). I've also
made a few other changes to the file which I believe are
improvements. I've attached a patch against the version under the
'trunk' branch on the svn server checked out today. It was produced by

diff -u /usr/local/src/R/R-svn-trunk/src/library/utils/man/relist.Rd ~/relist-new.Rd

I'd also suggest identical() rather than "==" in the equalities at the
bottom of the documentation, but that may be overly pedantic.

Dan

-- 
www.stats.ox.ac.uk/~davison
-------------- next part --------------
--- /usr/local/src/R/R-svn-trunk/src/library/utils/man/relist.Rd	2008-08-16 13:41:50.000000000 +0100
+++ /home/dan/relist-new.Rd	2008-08-16 17:15:54.000000000 +0100
@@ -13,7 +13,7 @@
 \alias{is.relistable}
 \alias{unlist.relistable}
 %
-\title{Allow Re-Listing an unlisted() Object}
+\title{Allow Re-Listing an unlisted Object}
 \description{
   \code{relist()} is an S3 generic function with a few methods in order
   to allow easy inversion of \code{\link{unlist}(obj)} when that is used
@@ -33,8 +33,9 @@
 }
 
 \arguments{
-  \item{flesh}{ .....}
-  \item{skeleton}{ .........}
+  \item{flesh}{a vector to be relisted}
+  \item{skeleton}{a list, the structure of which determines the structure
+  of the result}
   \item{x}{an \R object, typically a list (or vector).}
   \item{recursive}{logical.  Should unlisting be applied to list
     components of \code{x}?}
@@ -42,13 +43,13 @@
 }
 \details{
   Some functions need many parameters, which are most easily represented in
-  complex structures.  Unfortunately, many mathematical functions in \R,
+  nested list structures.  Unfortunately, many mathematical functions in \R,
   including \code{\link{optim}} and \code{\link{nlm}} can only operate on
   functions whose domain is
-  a vector.  \R has \code{\link{unlist}()} to convert complex objects into a
-  vector representation.  \code{relist()}, it's methods and the
+  a vector.  \R has \code{\link{unlist}()} to convert nested list objects into a
+  vector representation.  \code{relist()}, its methods, and the
   functionality mentioned here provide the inverse operation to convert
-  vectors back to the convenient structural representation.
+  vectors back to the convenient structured representation.
   This allows structured functions (such as \code{optim()}) to have simple
   mathematical interfaces.
 
@@ -60,7 +61,9 @@
       list(mean=c(0, 1), vcov=cbind(c(1, 1), c(1, 0))).
   }
   However, \code{\link{optim}} cannot operate on functions that take lists as input; it
-  only likes numeric vectors.  The solution is conversion:
+  only likes numeric vectors.  The solution is conversion. Given a
+  function mvdnorm(x, mean, vcov, log=FALSE) which computes the required
+  probability density, then
   \preformatted{
  	ipar <- list(mean=c(0, 1), vcov=cbind(c(1, 1), c(1, 0)))
  	initial.param <- as.relistable(ipar)
@@ -68,9 +71,8 @@
  	ll <- function(param.vector)
  	{
 	   param <- relist(param.vector)
-	   -sum(dnorm(x, mean = param$mean, vcov = param$vcov,
+	   -sum(mvdnorm(x, mean = param$mean, vcov = param$vcov,
 		      log = TRUE))
-	   ## NB: dnorm() has no vcov... you should get the point
  	}
 
  	optim(unlist(initial.param), ll)
@@ -83,14 +85,14 @@
   }
   will put the content of flesh on the skeleton.  You don't need to specify
   skeleton explicitly if the skeleton is stored as an attribute inside flesh.
-  In particular, flesh was created from some object obj with
+  In particular, if flesh was created from some object obj with
   \code{unlist(as.relistable(obj))}
   then the skeleton attribute is automatically set.
 
   As long as \code{skeleton} has the right shape, it should be a precise inverse
   of \code{\link{unlist}}.  These equalities hold:
   \preformatted{
-   relist(unlist(x), skeleton) == x
+   relist(unlist(x), x) == x
    unlist(relist(y, skeleton)) == y
 
    x <- as.relistable(x)

From prokaj at cs.elte.hu  Sat Aug 16 14:20:17 2008
From: prokaj at cs.elte.hu (prokaj at cs.elte.hu)
Date: Sat, 16 Aug 2008 14:20:17 +0200 (CEST)
Subject: [Rd] unique.default problem (PR#12551)
Message-ID: <20080816122017.58F07282C765@mail.pubhealth.ku.dk>

Full_Name: Vilmos Prokaj
Version: R 2.7.1
OS: windows
Submission from: (NULL) (213.181.195.84)


Dear developers,

The following line of code (produced by a mistake) caused an infinite loop

unique("a",c("a","b"))

or also

unique(1,1:2)

I made   a little investigation, and it seems to be that the following function
from unique.c is looping infinitely


static int isDuplicated(SEXP x, int indx, HashData *d)
{
    int i, *h;

    h = INTEGER(d->HashTable);
    i = d->hash(x, indx, d);
    while (h[i] != NIL) {
	if (d->equal(x, h[i], x, indx))
	    return h[i] >= 0 ? 1 : 0;
		i = (i + 1) % d->M;
	    }
	    h[i] = indx;
    return 0;
}
In this case h contains only one negative value, which causes d->equal(=requal)
to return 0.
	
static int requal(SEXP x, int i, SEXP y, int j)
{
    if (i < 0 || j < 0) return 0;
    if (!ISNAN(REAL(x)[i]) && !ISNAN(REAL(y)[j]))
	return (REAL(x)[i] == REAL(y)[j]);
    else if (R_IsNA(REAL(x)[i]) && R_IsNA(REAL(y)[j])) return 1;
    else if (R_IsNaN(REAL(x)[i]) && R_IsNaN(REAL(y)[j])) return 1;
    else return 0;
}

I do not claim that the situation above is frequent or even meaningful, however
it should not cause a crash of R.

Sincerely yours
Vilmos Prokaj


From davison at stats.ox.ac.uk  Sat Aug 16 20:18:00 2008
From: davison at stats.ox.ac.uk (Dan Davison)
Date: Sat, 16 Aug 2008 19:18:00 +0100
Subject: [Rd] dendrapply.Rd patch
Message-ID: <20080816181800.GA6943@stats.ox.ac.uk>

One typo, and added rapply() to 'See also' list.

Dan

-- 
www.stats.ox.ac.uk/~davison
-------------- next part --------------
--- /usr/local/src/R/R-svn-trunk/src/library/stats/man/dendrapply.Rd	2008-08-16 13:41:48.000000000 +0100
+++ /home/dan/dendrapply-new.Rd	2008-08-16 19:10:51.000000000 +0100
@@ -9,7 +9,7 @@
 \description{
   Apply function \code{FUN} to each node of a \code{\link{dendrogram}}
   recursively.  When  \code{y <- dendrapply(x, fn)}, then \code{y} is a
-  dendrogram of the same graph structure as \code{x} and each for each node,
+  dendrogram of the same graph structure as \code{x} and for each node,
   \code{y.node[j] <- FUN( x.node[j], ...)} (where \code{y.node[j]} is an
   (invalid!) notation for the j-th node of y.
 }
@@ -33,7 +33,8 @@
 \note{this is still somewhat experimental, and suggestions for
   enhancements (or nice examples of usage) are very welcome.}
 \seealso{\code{\link{as.dendrogram}}, \code{\link{lapply}} for applying
-  a function to each component of a  \code{list}.
+  a function to each component of a  \code{list}, \code{\link{rapply}}
+  for doing so to each non-list component of a nested list.
 }
 \examples{
 require(graphics)

From murdoch at stats.uwo.ca  Sun Aug 17 00:30:13 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Sat, 16 Aug 2008 18:30:13 -0400
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <Pine.GSO.4.61.0808161732520.21517@bayes>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
	<48A51B05.2080505@stats.uwo.ca>
	<Pine.GSO.4.61.0808151015350.17578@bayes>
	<48A62462.2010405@stats.uwo.ca>
	<Pine.GSO.4.61.0808161732520.21517@bayes>
Message-ID: <48A754F5.9040500@stats.uwo.ca>

On 16/08/2008 6:09 PM, Shengqiao Li wrote:
> Knuth's double version RNG rng-double.c dose a great job. No ties were 
> observed for 10M numbers ( totally 2^52 possible different values?). 
> In rng-double, double modulo mod_sum replaced the integer version mod_diff 
> in the integer version rng.c that is adopted by R.
> 
> The integer version uses modulus 2^30. Therefore there are only 2^30 
> distinct numbers, which is confirmed by my previous test in R.
> 
> If someday Knuth's double version is also included in R, it will be great.

I don't see what the problem is -- why not just do it?  That's what 
"user-supplied" is for.

Duncan Murdoch

> 
> 
> Shengqiao Li
> 
> 
> On Fri, 15 Aug 2008, Duncan Murdoch wrote:
> 
>> On 15/08/2008 10:28 AM, Shengqiao Li wrote:
>>> Thank you for your reply and for your suggestion. So the note in man page 
>>> could be more accurate since for an end user, man page should be more 
>>> helpful and source code is mainly for developers.
>>>
>>> I was also adviced to use Knuth's  double version RANARRAY from
>>> http://www-cs-faculty.stanford.edu/~knuth/programs.html instead of the 
>>> integer versions in R. I'm a R user. So why not also include the double 
>>> verion in R implementation?
>> You can try it using kind="user-supplied" if you like, but I suspect it's the 
>> same as "Knuth-TAOCP-2002".
>>
>> Duncan Murdoch
>>
>>> Thanks again,
>>>
>>> ========================================
>>> Shengqiao Li
>>>
>>> Research Associate
>>> The Department of Statistics
>>> PO Box 6330
>>> West Virginia University
>>> Morgantown, WV 26506-6330
>>>
>>> ========================================
>>>
>>> On Fri, 15 Aug 2008, Duncan Murdoch wrote:
>>>
>>>> shli at stat.wvu.edu wrote:
>>>>>   This message is in MIME format.  The first part should be readable 
>>>>> text,
>>>>>   while the remaining parts are likely unreadable without MIME-aware 
>>>>> tools.
>>>>>
>>>>> ---559023410-851401618-1218751024=:15885
>>>>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>>>>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>>>>>
>>>>>
>>>>> I didn't describe the problem clearly. It's about the number of 
>>>>> distinct=20
>>>>> values. So just ignore cycle issue.
>>>>>
>>>>> My tests were:
>>>>>
>>>>> RNGkind(kind=3D"Knuth-TAOCP");
>>>>> sum(duplicated(runif(1e7))); #return 46552
>>>>>
>>>>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>>>>> sum(duplicated(runif(1e7))); #return 46415
>>>>>
>>>>> #These collision frequency suggested there were 2^30 distinct values 
>>>>> by=20
>>>>> birthday problem.
>>>>>
>>>> The birthday problem distribution applies to independent draws, but they 
>>>> are only pseudo-independent.  I think the only ways to know for sure if 
>>>> there are 2^30 values are to look at the code, or run through a complete 
>>>> cycle.  And you need to determine the cycle by looking at .Random.seed, 
>>>> not at the returned value.
>>>>> RNGkind(kind=3D"Marsaglia-Multicarry");
>>>>> sum(duplicated(runif(1e7))); #return 11682
>>>>>
>>>>> RNGkind(kind=3D"Super-Duper");
>>>>> sum(duplicated(runif(1e7))); #return 11542
>>>>>
>>>>> RNGkind(kind=3D"Mersenne-Twister");
>>>>> sum(duplicated(runif(1e7))); #return 11656
>>>>>
>>>>> #These indicated there were 2^32 distinct values, which agrees with 
>>>>> the=20
>>>>> help info.
>>>>>
>>>>>
>>>> If there are 2^30 distinct values for the two generators above, that also 
>>>> agrees with the documentation.
>>>>
>>>>> RNGkind(kind=3D"Wichmann-Hill");
>>>>> sum(duplicated(runif(1e7))); #return 0
>>>>>
>>>>> #So for this method, there should be more than 2^32 distinct values.
>>>>>
>>>>> You may not get the exact numbers, but they should be close. So how to=20
>>>>> explain above problem?
>>>>>
>>>> You haven't demonstrated what you claim, but if you look at the source, 
>>>> you'll see that in fact the man page is wrong:  Wichmann-Hill is based on 
>>>> 3 integer values, which each take on approximately 15 bits of different 
>>>> values. So Wichmann-Hill could take nearly 2^45 different values (actually 
>>>> 30269*30307*30323).
>>>>
>>>> The source is in https://svn.r-project.org/R/trunk/src/main/RNG.c if you 
>>>> want to check the others.
>>>>> I need generate a large sample without any ties, it seems to me=20
>>>>> "Wichmann-Hill" is only choice right now.
>>>>>
>>>> An alternative would be to construct a new value from two (or more) 
>>>> runif() values, but be careful that you don't mess up the distribution 
>>>> when you do that.
>>>>
>>>> Duncan Murdoch
>>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>>> Shengqiao Li
>>>>>
>>>>> The Department of Statistics
>>>>> PO Box 6330
>>>>> West Virginia University
>>>>> Morgantown, WV 26506-6330
>>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>>>
>>>>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>>>>>
>>>>>
>>>>>> Shengqiao Li wrote:
>>>>>>
>>>>>>> Hello all,
>>>>>>> =20
>>>>>>> I am generating large samples of random numbers. The RNG help page 
>>>>>>> says:=
>>>>>>>
>>>>> =20
>>>>>
>>>>>>> "All the supplied uniform generators return 32-bit integer values that 
>>>>>>> a=
>>>>>>>
>>>>> re=20
>>>>>
>>>>>>> converted to doubles, so they take at most 2^32 distinct values and 
>>>>>>> long=
>>>>>>>
>>>>> =20
>>>>>
>>>>>>> runs will return duplicated values." But I find that the cycles are not 
>>>>>>> =
>>>>>>>
>>>>> the=20
>>>>>
>>>>>>> same as the 32-bit integer.
>>>>>>> =20
>>>>>>> My test indicated that the cycles for Knuth's methods were 2^30 
>>>>>>> while=20
>>>>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated 
>>>>>>> i=
>>>>>>>
>>>>> n=20
>>>>>
>>>>>>> 10M numbers generated by runif using Wichmann-Hill. The other three 
>>>>>>> meth=
>>>>>>>
>>>>> ods=20
>>>>>
>>>>>>> had cycle length of 2^32.
>>>>>>> =20
>>>>>>> So, anybody can explain this? And any improvement to the implementation 
>>>>>>> =
>>>>>>>
>>>>> can=20
>>>>>
>>>>>>> be made to increase the cycle length like the Wichmann-Hill method?
>>>>>>> =20
>>>>>>>
>>>>>> What test? These are not simple linear congruential generators. Just 
>>>>>> beca=
>>>>>>
>>>>> use=20
>>>>>
>>>>>> you get the same value twice, it doesn't mean that the sequence is 
>>>>>> repeat=
>>>>>>
>>>>> ing.=20
>>>>>
>>>>>> Perhaps you should read the entire help page rather than just the note.
>>>>>>
>>>>>> --=20
>>>>>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>>>>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>>>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>>>>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>>>>>
>>>>>>
>>>>>>
>>>>> ---559023410-851401618-1218751024=:15885--
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From shli at stat.wvu.edu  Sun Aug 17 00:09:58 2008
From: shli at stat.wvu.edu (Shengqiao Li)
Date: Sat, 16 Aug 2008 18:09:58 -0400 (EDT)
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <48A62462.2010405@stats.uwo.ca>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
	<48A51B05.2080505@stats.uwo.ca>
	<Pine.GSO.4.61.0808151015350.17578@bayes>
	<48A62462.2010405@stats.uwo.ca>
Message-ID: <Pine.GSO.4.61.0808161732520.21517@bayes>


Knuth's double version RNG rng-double.c dose a great job. No ties were 
observed for 10M numbers ( totally 2^52 possible different values?). 
In rng-double, double modulo mod_sum replaced the integer version mod_diff 
in the integer version rng.c that is adopted by R.

The integer version uses modulus 2^30. Therefore there are only 2^30 
distinct numbers, which is confirmed by my previous test in R.

If someday Knuth's double version is also included in R, it will be great.


Shengqiao Li


On Fri, 15 Aug 2008, Duncan Murdoch wrote:

> On 15/08/2008 10:28 AM, Shengqiao Li wrote:
>> Thank you for your reply and for your suggestion. So the note in man page 
>> could be more accurate since for an end user, man page should be more 
>> helpful and source code is mainly for developers.
>> 
>> I was also adviced to use Knuth's  double version RANARRAY from
>> http://www-cs-faculty.stanford.edu/~knuth/programs.html instead of the 
>> integer versions in R. I'm a R user. So why not also include the double 
>> verion in R implementation?
>
> You can try it using kind="user-supplied" if you like, but I suspect it's the 
> same as "Knuth-TAOCP-2002".
>
> Duncan Murdoch
>
>> 
>> Thanks again,
>> 
>> ========================================
>> Shengqiao Li
>> 
>> Research Associate
>> The Department of Statistics
>> PO Box 6330
>> West Virginia University
>> Morgantown, WV 26506-6330
>> 
>> ========================================
>> 
>> On Fri, 15 Aug 2008, Duncan Murdoch wrote:
>> 
>>> shli at stat.wvu.edu wrote:
>>>>   This message is in MIME format.  The first part should be readable 
>>>> text,
>>>>   while the remaining parts are likely unreadable without MIME-aware 
>>>> tools.
>>>> 
>>>> ---559023410-851401618-1218751024=:15885
>>>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>>>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>>>> 
>>>> 
>>>> I didn't describe the problem clearly. It's about the number of 
>>>> distinct=20
>>>> values. So just ignore cycle issue.
>>>> 
>>>> My tests were:
>>>> 
>>>> RNGkind(kind=3D"Knuth-TAOCP");
>>>> sum(duplicated(runif(1e7))); #return 46552
>>>> 
>>>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>>>> sum(duplicated(runif(1e7))); #return 46415
>>>> 
>>>> #These collision frequency suggested there were 2^30 distinct values 
>>>> by=20
>>>> birthday problem.
>>>> 
>>> The birthday problem distribution applies to independent draws, but they 
>>> are only pseudo-independent.  I think the only ways to know for sure if 
>>> there are 2^30 values are to look at the code, or run through a complete 
>>> cycle.  And you need to determine the cycle by looking at .Random.seed, 
>>> not at the returned value.
>>>> RNGkind(kind=3D"Marsaglia-Multicarry");
>>>> sum(duplicated(runif(1e7))); #return 11682
>>>> 
>>>> RNGkind(kind=3D"Super-Duper");
>>>> sum(duplicated(runif(1e7))); #return 11542
>>>> 
>>>> RNGkind(kind=3D"Mersenne-Twister");
>>>> sum(duplicated(runif(1e7))); #return 11656
>>>> 
>>>> #These indicated there were 2^32 distinct values, which agrees with 
>>>> the=20
>>>> help info.
>>>> 
>>>> 
>>> If there are 2^30 distinct values for the two generators above, that also 
>>> agrees with the documentation.
>>> 
>>>> RNGkind(kind=3D"Wichmann-Hill");
>>>> sum(duplicated(runif(1e7))); #return 0
>>>> 
>>>> #So for this method, there should be more than 2^32 distinct values.
>>>> 
>>>> You may not get the exact numbers, but they should be close. So how to=20
>>>> explain above problem?
>>>> 
>>> You haven't demonstrated what you claim, but if you look at the source, 
>>> you'll see that in fact the man page is wrong:  Wichmann-Hill is based on 
>>> 3 integer values, which each take on approximately 15 bits of different 
>>> values. So Wichmann-Hill could take nearly 2^45 different values (actually 
>>> 30269*30307*30323).
>>> 
>>> The source is in https://svn.r-project.org/R/trunk/src/main/RNG.c if you 
>>> want to check the others.
>>>> I need generate a large sample without any ties, it seems to me=20
>>>> "Wichmann-Hill" is only choice right now.
>>>> 
>>> An alternative would be to construct a new value from two (or more) 
>>> runif() values, but be careful that you don't mess up the distribution 
>>> when you do that.
>>> 
>>> Duncan Murdoch
>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>> Shengqiao Li
>>>> 
>>>> The Department of Statistics
>>>> PO Box 6330
>>>> West Virginia University
>>>> Morgantown, WV 26506-6330
>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>> 
>>>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>>>> 
>>>> 
>>>>> Shengqiao Li wrote:
>>>>> 
>>>>>> Hello all,
>>>>>> =20
>>>>>> I am generating large samples of random numbers. The RNG help page 
>>>>>> says:=
>>>>>> 
>>>> =20
>>>> 
>>>>>> "All the supplied uniform generators return 32-bit integer values that 
>>>>>> a=
>>>>>> 
>>>> re=20
>>>> 
>>>>>> converted to doubles, so they take at most 2^32 distinct values and 
>>>>>> long=
>>>>>> 
>>>> =20
>>>> 
>>>>>> runs will return duplicated values." But I find that the cycles are not 
>>>>>> =
>>>>>> 
>>>> the=20
>>>> 
>>>>>> same as the 32-bit integer.
>>>>>> =20
>>>>>> My test indicated that the cycles for Knuth's methods were 2^30 
>>>>>> while=20
>>>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were duplicated 
>>>>>> i=
>>>>>> 
>>>> n=20
>>>> 
>>>>>> 10M numbers generated by runif using Wichmann-Hill. The other three 
>>>>>> meth=
>>>>>> 
>>>> ods=20
>>>> 
>>>>>> had cycle length of 2^32.
>>>>>> =20
>>>>>> So, anybody can explain this? And any improvement to the implementation 
>>>>>> =
>>>>>> 
>>>> can=20
>>>> 
>>>>>> be made to increase the cycle length like the Wichmann-Hill method?
>>>>>> =20
>>>>>> 
>>>>> What test? These are not simple linear congruential generators. Just 
>>>>> beca=
>>>>> 
>>>> use=20
>>>> 
>>>>> you get the same value twice, it doesn't mean that the sequence is 
>>>>> repeat=
>>>>> 
>>>> ing.=20
>>>> 
>>>>> Perhaps you should read the entire help page rather than just the note.
>>>>> 
>>>>> --=20
>>>>>  O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5, Entr.B
>>>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
>>>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>>>>> 
>>>>> 
>>>>> 
>>>> ---559023410-851401618-1218751024=:15885--
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From dutangc at gmail.com  Sun Aug 17 10:05:15 2008
From: dutangc at gmail.com (Christophe Dutang)
Date: Sun, 17 Aug 2008 10:05:15 +0200
Subject: [Rd] [R] RNG Cycle and Duplication (PR#12540)
In-Reply-To: <Pine.GSO.4.61.0808161732520.21517@bayes>
References: <20080814214509.726FC282EFF7@mail.pubhealth.ku.dk>
	<48A51B05.2080505@stats.uwo.ca>
	<Pine.GSO.4.61.0808151015350.17578@bayes>
	<48A62462.2010405@stats.uwo.ca>
	<Pine.GSO.4.61.0808161732520.21517@bayes>
Message-ID: <8B4CA3A1-0D3E-4ED7-8F8D-FD20866BD26F@gmail.com>

Hi,

If you want I can put RANARRAY in the 'randtoolbox' package? unless  
you want in R and not in a package?

In randtoolbox (not the version on cran), I port SFMT and WELL  
generator respectively from Matsumoto and L'Ecuyer. It could be a good  
idea to add Knuth's code?

Christophe Dutang

Le 17 ao?t 08 ? 00:09, Shengqiao Li a ?crit :

>
> Knuth's double version RNG rng-double.c dose a great job. No ties  
> were observed for 10M numbers ( totally 2^52 possible different  
> values?). In rng-double, double modulo mod_sum replaced the integer  
> version mod_diff in the integer version rng.c that is adopted by R.
>
> The integer version uses modulus 2^30. Therefore there are only 2^30  
> distinct numbers, which is confirmed by my previous test in R.
>
> If someday Knuth's double version is also included in R, it will be  
> great.
>
>
> Shengqiao Li
>
>
> On Fri, 15 Aug 2008, Duncan Murdoch wrote:
>
>> On 15/08/2008 10:28 AM, Shengqiao Li wrote:
>>> Thank you for your reply and for your suggestion. So the note in  
>>> man page could be more accurate since for an end user, man page  
>>> should be more helpful and source code is mainly for developers.
>>> I was also adviced to use Knuth's  double version RANARRAY from
>>> http://www-cs-faculty.stanford.edu/~knuth/programs.html instead of  
>>> the integer versions in R. I'm a R user. So why not also include  
>>> the double verion in R implementation?
>>
>> You can try it using kind="user-supplied" if you like, but I  
>> suspect it's the same as "Knuth-TAOCP-2002".
>>
>> Duncan Murdoch
>>
>>> Thanks again,
>>> ========================================
>>> Shengqiao Li
>>> Research Associate
>>> The Department of Statistics
>>> PO Box 6330
>>> West Virginia University
>>> Morgantown, WV 26506-6330
>>> ========================================
>>> On Fri, 15 Aug 2008, Duncan Murdoch wrote:
>>>> shli at stat.wvu.edu wrote:
>>>>>  This message is in MIME format.  The first part should be  
>>>>> readable text,
>>>>>  while the remaining parts are likely unreadable without MIME- 
>>>>> aware tools.
>>>>> ---559023410-851401618-1218751024=:15885
>>>>> Content-Type: TEXT/PLAIN; charset=ISO-8859-1; format=flowed
>>>>> Content-Transfer-Encoding: QUOTED-PRINTABLE
>>>>> I didn't describe the problem clearly. It's about the number of  
>>>>> distinct=20
>>>>> values. So just ignore cycle issue.
>>>>> My tests were:
>>>>> RNGkind(kind=3D"Knuth-TAOCP");
>>>>> sum(duplicated(runif(1e7))); #return 46552
>>>>> RNGkind(kind=3D"Knuth-TAOCP-2002");
>>>>> sum(duplicated(runif(1e7))); #return 46415
>>>>> #These collision frequency suggested there were 2^30 distinct  
>>>>> values by=20
>>>>> birthday problem.
>>>> The birthday problem distribution applies to independent draws,  
>>>> but they are only pseudo-independent.  I think the only ways to  
>>>> know for sure if there are 2^30 values are to look at the code,  
>>>> or run through a complete cycle.  And you need to determine the  
>>>> cycle by looking at .Random.seed, not at the returned value.
>>>>> RNGkind(kind=3D"Marsaglia-Multicarry");
>>>>> sum(duplicated(runif(1e7))); #return 11682
>>>>> RNGkind(kind=3D"Super-Duper");
>>>>> sum(duplicated(runif(1e7))); #return 11542
>>>>> RNGkind(kind=3D"Mersenne-Twister");
>>>>> sum(duplicated(runif(1e7))); #return 11656
>>>>> #These indicated there were 2^32 distinct values, which agrees  
>>>>> with the=20
>>>>> help info.
>>>> If there are 2^30 distinct values for the two generators above,  
>>>> that also agrees with the documentation.
>>>>> RNGkind(kind=3D"Wichmann-Hill");
>>>>> sum(duplicated(runif(1e7))); #return 0
>>>>> #So for this method, there should be more than 2^32 distinct  
>>>>> values.
>>>>> You may not get the exact numbers, but they should be close. So  
>>>>> how to=20
>>>>> explain above problem?
>>>> You haven't demonstrated what you claim, but if you look at the  
>>>> source, you'll see that in fact the man page is wrong:  Wichmann- 
>>>> Hill is based on 3 integer values, which each take on  
>>>> approximately 15 bits of different values. So Wichmann-Hill could  
>>>> take nearly 2^45 different values (actually 30269*30307*30323).
>>>> The source is in https://svn.r-project.org/R/trunk/src/main/RNG.c  
>>>> if you want to check the others.
>>>>> I need generate a large sample without any ties, it seems to me=20
>>>>> "Wichmann-Hill" is only choice right now.
>>>> An alternative would be to construct a new value from two (or  
>>>> more) runif() values, but be careful that you don't mess up the  
>>>> distribution when you do that.
>>>> Duncan Murdoch
>>>>> = 
>>>>> 3D 
>>>>> = 
>>>>> 3D 
>>>>> = 
>>>>> 3D 
>>>>> = 
>>>>> 3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>>> Shengqiao Li
>>>>> The Department of Statistics
>>>>> PO Box 6330
>>>>> West Virginia University
>>>>> Morgantown, WV 26506-6330
>>>>> = 
>>>>> 3D 
>>>>> = 
>>>>> 3D 
>>>>> = 
>>>>> 3D 
>>>>> = 
>>>>> 3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
>>>>> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
>>>>> On Thu, 14 Aug 2008, Peter Dalgaard wrote:
>>>>>> Shengqiao Li wrote:
>>>>>>> Hello all,
>>>>>>> =20
>>>>>>> I am generating large samples of random numbers. The RNG help  
>>>>>>> page says:=
>>>>> =20
>>>>>>> "All the supplied uniform generators return 32-bit integer  
>>>>>>> values that a=
>>>>> re=20
>>>>>>> converted to doubles, so they take at most 2^32 distinct  
>>>>>>> values and long=
>>>>> =20
>>>>>>> runs will return duplicated values." But I find that the  
>>>>>>> cycles are not =
>>>>> the=20
>>>>>>> same as the 32-bit integer.
>>>>>>> =20
>>>>>>> My test indicated that the cycles for Knuth's methods were  
>>>>>>> 2^30 while=20
>>>>>>> Wichmann-Hill's cycle was larger than 2^32! No numbers were  
>>>>>>> duplicated i=
>>>>> n=20
>>>>>>> 10M numbers generated by runif using Wichmann-Hill. The other  
>>>>>>> three meth=
>>>>> ods=20
>>>>>>> had cycle length of 2^32.
>>>>>>> =20
>>>>>>> So, anybody can explain this? And any improvement to the  
>>>>>>> implementation =
>>>>> can=20
>>>>>>> be made to increase the cycle length like the Wichmann-Hill  
>>>>>>> method?
>>>>>>> =20
>>>>>> What test? These are not simple linear congruential generators.  
>>>>>> Just beca=
>>>>> use=20
>>>>>> you get the same value twice, it doesn't mean that the sequence  
>>>>>> is repeat=
>>>>> ing.=20
>>>>>> Perhaps you should read the entire help page rather than just  
>>>>>> the note.
>>>>>> --=20
>>>>>> O__  ---- Peter Dalgaard             =D8ster Farimagsgade 5,  
>>>>>> Entr.B
>>>>>> c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>>>>>> (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45)  
>>>>>> 35327918
>>>>>> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45)  
>>>>>> 35327907
>>>>> ---559023410-851401618-1218751024=:15885--
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ripley at stats.ox.ac.uk  Sun Aug 17 11:40:13 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Sun, 17 Aug 2008 11:40:13 +0200 (CEST)
Subject: [Rd] unique.default problem (PR#12551)
Message-ID: <20080817094013.28AD7282EF48@mail.pubhealth.ku.dk>

The problem here is that there are more incomparables than x. But in any 
case the answer was incorrect:

> unique(rep("a", 3), "a")
[1] "a"

I've fixed both issues via a different algorithm for 2.7.2.

On Sat, 16 Aug 2008, prokaj at cs.elte.hu wrote:

> Full_Name: Vilmos Prokaj
> Version: R 2.7.1
> OS: windows
> Submission from: (NULL) (213.181.195.84)
>
>
> Dear developers,
>
> The following line of code (produced by a mistake) caused an infinite loop
>
> unique("a",c("a","b"))
>
> or also
>
> unique(1,1:2)
>
> I made   a little investigation, and it seems to be that the following function
> from unique.c is looping infinitely
>
>
> static int isDuplicated(SEXP x, int indx, HashData *d)
> {
>    int i, *h;
>
>    h = INTEGER(d->HashTable);
>    i = d->hash(x, indx, d);
>    while (h[i] != NIL) {
> 	if (d->equal(x, h[i], x, indx))
> 	    return h[i] >= 0 ? 1 : 0;
> 		i = (i + 1) % d->M;
> 	    }
> 	    h[i] = indx;
>    return 0;
> }
> In this case h contains only one negative value, which causes d->equal(=requal)
> to return 0.
>
> static int requal(SEXP x, int i, SEXP y, int j)
> {
>    if (i < 0 || j < 0) return 0;
>    if (!ISNAN(REAL(x)[i]) && !ISNAN(REAL(y)[j]))
> 	return (REAL(x)[i] == REAL(y)[j]);
>    else if (R_IsNA(REAL(x)[i]) && R_IsNA(REAL(y)[j])) return 1;
>    else if (R_IsNaN(REAL(x)[i]) && R_IsNaN(REAL(y)[j])) return 1;
>    else return 0;
> }
>
> I do not claim that the situation above is frequent or even meaningful, however
> it should not cause a crash of R.
>
> Sincerely yours
> Vilmos Prokaj
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From rhurlin at gwdg.de  Sun Aug 17 13:36:25 2008
From: rhurlin at gwdg.de (Rainer Hurling)
Date: Sun, 17 Aug 2008 13:36:25 +0200
Subject: [Rd] R-beta does not install on FreeBSD
Message-ID: <48A80D39.5000605@gwdg.de>

I am trying to install R-beta_2008-08-16_r46368.tar.gz on FreeBSD 
8.0-CURRENT (i386). The code stops compiling with the following message:


--------------------------------------------------------------------
[.. snip ..]
building package 'tcltk'
mkdir ../../../library/tcltk
mkdir ../../../library/tcltk/R
mkdir ../../../library/tcltk/demo
mkdir ../../../library/tcltk/exec
mkdir ../../../library/tcltk/po
mkdir ../../../library/tcltk/man
making init.d from init.c
making tcltk.d from tcltk.c
making tcltk_unix.d from tcltk_unix.c
`Makedeps' is up to date.
gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
-I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include 
-fpic  -g -O2 -c init.c -o init.o
gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
-I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include 
-fpic  -g -O2 -c tcltk.c -o tcltk.o
gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
-I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include 
-fpic  -g -O2 -c tcltk_unix.c -o tcltk_unix.o
gcc -std=gnu99 -shared -L/usr/local/lib -o tcltk.so init.o tcltk.o 
tcltk_unix.o  -L/usr/local/lib -ltcl84 -L/usr/local/lib -ltk84 
-L/usr/local/lib -lX11 -lm
mkdir ../../../../library/tcltk/libs
installing parsed NAMESPACE files
"Makefile", line 28: Need an operator
make: fatal errors encountered -- cannot continue
*** Error code 1

Stop in /usr/local/R-beta.
--------------------------------------------------------------------


This happens with all recent beta versions. R version 2.7.1 Patched 
(2008-08-10 r46284) installed and worked fine.

Could this be a bug with R-beta or is there something wrong with my 
FreeBSD version?

Any help is appreciated.

Thanks in advance,
Rainer Hurling


From ripley at stats.ox.ac.uk  Sun Aug 17 14:02:09 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sun, 17 Aug 2008 13:02:09 +0100 (BST)
Subject: [Rd] R-beta does not install on FreeBSD
In-Reply-To: <48A80D39.5000605@gwdg.de>
References: <48A80D39.5000605@gwdg.de>
Message-ID: <alpine.LFD.1.10.0808171254450.12714@gannet.stats.ox.ac.uk>

Can you track down which Makefile this is and what line 28 is?

My guess is that your make does not like the comment character at 
line 24 in po/Makefile.in.in, in which case please delete the line.

But the BSD-like makes on Solaris and MacOS have no problem with it.

On Sun, 17 Aug 2008, Rainer Hurling wrote:

> I am trying to install R-beta_2008-08-16_r46368.tar.gz on FreeBSD 8.0-CURRENT 
> (i386). The code stops compiling with the following message:
>
>
> --------------------------------------------------------------------
> [.. snip ..]
> building package 'tcltk'
> mkdir ../../../library/tcltk
> mkdir ../../../library/tcltk/R
> mkdir ../../../library/tcltk/demo
> mkdir ../../../library/tcltk/exec
> mkdir ../../../library/tcltk/po
> mkdir ../../../library/tcltk/man
> making init.d from init.c
> making tcltk.d from tcltk.c
> making tcltk_unix.d from tcltk_unix.c
> `Makedeps' is up to date.
> gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
> -I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include -fpic 
> -g -O2 -c init.c -o init.o
> gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
> -I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include -fpic 
> -g -O2 -c tcltk.c -o tcltk.o
> gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
> -I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include -fpic 
> -g -O2 -c tcltk_unix.c -o tcltk_unix.o
> gcc -std=gnu99 -shared -L/usr/local/lib -o tcltk.so init.o tcltk.o 
> tcltk_unix.o  -L/usr/local/lib -ltcl84 -L/usr/local/lib -ltk84 
> -L/usr/local/lib -lX11 -lm
> mkdir ../../../../library/tcltk/libs
> installing parsed NAMESPACE files
> "Makefile", line 28: Need an operator
> make: fatal errors encountered -- cannot continue
> *** Error code 1
>
> Stop in /usr/local/R-beta.
> --------------------------------------------------------------------
>
>
> This happens with all recent beta versions. R version 2.7.1 Patched 
> (2008-08-10 r46284) installed and worked fine.
>
> Could this be a bug with R-beta or is there something wrong with my FreeBSD 
> version?
>
> Any help is appreciated.
>
> Thanks in advance,
> Rainer Hurling
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From p.dalgaard at biostat.ku.dk  Sun Aug 17 14:43:55 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Sun, 17 Aug 2008 14:43:55 +0200
Subject: [Rd] R-beta does not install on FreeBSD
In-Reply-To: <alpine.LFD.1.10.0808171254450.12714@gannet.stats.ox.ac.uk>
References: <48A80D39.5000605@gwdg.de>
	<alpine.LFD.1.10.0808171254450.12714@gannet.stats.ox.ac.uk>
Message-ID: <48A81D0B.9020205@biostat.ku.dk>

I see that Brian already fixed this for the next prerelease. Thank you 
to both of you.

    -pd

Prof Brian Ripley wrote:
> Can you track down which Makefile this is and what line 28 is?
>
> My guess is that your make does not like the comment character at line 
> 24 in po/Makefile.in.in, in which case please delete the line.
>
> But the BSD-like makes on Solaris and MacOS have no problem with it.
>
> On Sun, 17 Aug 2008, Rainer Hurling wrote:
>
>> I am trying to install R-beta_2008-08-16_r46368.tar.gz on FreeBSD 
>> 8.0-CURRENT (i386). The code stops compiling with the following message:
>>
>


-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From rhurlin at gwdg.de  Sun Aug 17 17:00:44 2008
From: rhurlin at gwdg.de (Rainer Hurling)
Date: Sun, 17 Aug 2008 17:00:44 +0200
Subject: [Rd] R-beta does not install on FreeBSD
In-Reply-To: <alpine.LFD.1.10.0808171254450.12714@gannet.stats.ox.ac.uk>
References: <48A80D39.5000605@gwdg.de>
	<alpine.LFD.1.10.0808171254450.12714@gannet.stats.ox.ac.uk>
Message-ID: <48A83D1C.9060407@gwdg.de>

Direct hit! Your guess was right.

After removing line 24 in po/Makefile.in.in all went fine. 
R-beta_2008-08-16_r46368.tar.gz now compiles and installs perfect on 
FreeBSD 8.0-CURRENT.

Thank you very much for your response.

Rainer



On 17.08.2008 14:02 (UTC+1), Prof Brian Ripley wrote:
> Can you track down which Makefile this is and what line 28 is?
> 
> My guess is that your make does not like the comment character at line 
> 24 in po/Makefile.in.in, in which case please delete the line.
> 
> But the BSD-like makes on Solaris and MacOS have no problem with it.
> 
> On Sun, 17 Aug 2008, Rainer Hurling wrote:
> 
>> I am trying to install R-beta_2008-08-16_r46368.tar.gz on FreeBSD 
>> 8.0-CURRENT (i386). The code stops compiling with the following message:
>>
>>
>> --------------------------------------------------------------------
>> [.. snip ..]
>> building package 'tcltk'
>> mkdir ../../../library/tcltk
>> mkdir ../../../library/tcltk/R
>> mkdir ../../../library/tcltk/demo
>> mkdir ../../../library/tcltk/exec
>> mkdir ../../../library/tcltk/po
>> mkdir ../../../library/tcltk/man
>> making init.d from init.c
>> making tcltk.d from tcltk.c
>> making tcltk_unix.d from tcltk_unix.c
>> `Makedeps' is up to date.
>> gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
>> -I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include 
>> -fpic -g -O2 -c init.c -o init.o
>> gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
>> -I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include 
>> -fpic -g -O2 -c tcltk.c -o tcltk.o
>> gcc -std=gnu99 -I../../../../include -I/usr/local/include/tcl8.4 
>> -I/usr/local/include/tk8.4 -I/usr/local/include -I/usr/local/include 
>> -fpic -g -O2 -c tcltk_unix.c -o tcltk_unix.o
>> gcc -std=gnu99 -shared -L/usr/local/lib -o tcltk.so init.o tcltk.o 
>> tcltk_unix.o  -L/usr/local/lib -ltcl84 -L/usr/local/lib -ltk84 
>> -L/usr/local/lib -lX11 -lm
>> mkdir ../../../../library/tcltk/libs
>> installing parsed NAMESPACE files
>> "Makefile", line 28: Need an operator
>> make: fatal errors encountered -- cannot continue
>> *** Error code 1
>>
>> Stop in /usr/local/R-beta.
>> --------------------------------------------------------------------
>>
>>
>> This happens with all recent beta versions. R version 2.7.1 Patched 
>> (2008-08-10 r46284) installed and worked fine.
>>
>> Could this be a bug with R-beta or is there something wrong with my 
>> FreeBSD version?
>>
>> Any help is appreciated.
>>
>> Thanks in advance,
>> Rainer Hurling
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From simon.urbanek at r-project.org  Sun Aug 17 17:49:23 2008
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Sun, 17 Aug 2008 11:49:23 -0400
Subject: [Rd] 'javareconf -e' as normal user (PR#12544)
In-Reply-To: <20080815125003.3CD05282C765@mail.pubhealth.ku.dk>
References: <20080815125003.3CD05282C765@mail.pubhealth.ku.dk>
Message-ID: <6CE0DFD0-77D5-4918-9C54-9A22D7B6B8AD@r-project.org>

Rune,

On Aug 15, 2008, at 8:50 AM, bugs at philosof.dk wrote:

> Full_Name: Rune Philosof
> Version: 2.6.2 and 2.7.1
> OS: Ubuntu 8.04
> Submission from: (NULL) (130.226.87.177)
>
>
> When I try to install rJava I am requested to run 'R CMD javareconf - 
> e' if I
> don't have root access.
>
> rune at rune-laptop:~$ R CMD javareconf -e
> shift: 59: can't shift that many
>

Can you tell us which shell you are using? It works fine for me with  
sh/bash.

FWIW in general the syntax is "-e <prog>" (see -h) e.g.
R CMD javareconf -e /bin/bash
You can also use '' for the default shell.

Cheers,
Simon


From drmark at marktab.com  Sun Aug 17 19:15:17 2008
From: drmark at marktab.com (drmark at marktab.com)
Date: Sun, 17 Aug 2008 19:15:17 +0200 (CEST)
Subject: [Rd] Allocated Memory Warnings in Vista 32 bit with 4 GB (PR#12557)
Message-ID: <20080817171517.53473282EFF6@mail.pubhealth.ku.dk>

Hello

I am running Windows Vista 32 with 4 GB (installed, though Windows of cours=
e only recognizes 3326 MB, as reported by Windows "My Computer")

I am running R 2.7.1

I was trying to read in a comma delimited single column CSV file, assign th=
at file to a variable ("data") and then extract a sample (assigned to "part=
ial").  I was getting memory allocation errors, and from the log below, I s=
tarted to see a pattern which indicates that the "error" is related to how =
R views memory allocation, and perhaps how R is using or reading memory on =
my specific system.  The error, I would guess, is probably related to how R=
 is reporting the memory available.

My source files have the same number of rows (or cases) as the name of the =
file.  Thus, data10000 has 10,000 observations, and data300000 has 300,000 =
observations.

Here is my history which shows the problem, and inconsistency in memory all=
ocation reporting:

  > data=3Dread.csv("data10000.csv",header=3DFALSE)
  > partial=3Dsample(data,5000,T)
  > data=3Dread.csv("data100000.csv",header=3DFALSE)
  Error in file(file, "r") : cannot open the connection
  In addition: Warning message:
  In file(file, "r") :
    cannot open file 'data100000.csv': No such file or directory
  > data=3Dread.csv("data300000.csv",header=3DFALSE)
  > partial=3Dsample(data,5000,T)
  Error: cannot allocate vector of size 2.3 Mb
  In addition: Warning messages:
  1: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  3: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  4: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial=3Dsample(data,5,T)
  Error: cannot allocate vector of size 2.3 Mb
  In addition: Warning messages:
  1: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  3: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  4: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial=3Dsample(data,1,T)
  Warning messages:
  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial=3Dsample(data,1,T)
  > partial=3Dsample(data,5000,T)
  Error: cannot allocate vector of size 2.3 Mb
  In addition: Warning messages:
  1: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  3: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  4: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial[1:5,]
  [1]  0.3204279  1.6583593 -0.3456585  1.2951363 -1.1096974
  > rm(partial)
  > partial=3Dsample(data,5000,T)
  Error: cannot allocate vector of size 2.3 Mb
  In addition: Warning messages:
  1: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  3: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  4: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  5: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  6: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial[1:5,]
  Error: object "partial" not found
  > partial=3Dsample(data,1,T)
  Error: cannot allocate vector of size 2.3 Mb
  In addition: Warning messages:
  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  3: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  4: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial=3Dsample(data,1,T)
  Warning messages:
  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
    Reached total allocation of 1535Mb: see help(memory.size)
  > partial=3Dsample(data,1,T)
  > partial=3Dsample(data,5000,T)
  Error: cannot allocate vector of size 2.3 Mb
  In addition: Warning messages:
  1: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  2: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  3: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  4: In names(y) <- make.unique(cols) :
    Reached total allocation of 1535Mb: see help(memory.size)
  >=20


I have been able to reproduce the situation several times.  For example, wh=
at is curious is that a command like partial=3Dsample(data,1,T) may or may =
not produce a warning message.  In the history, obviously 2.3MB is well bel=
ow the allocated 1535MB.  I had been getting this error on my original larg=
er source data (1,000,000 observations), but since I am a new R user, it wa=
s not clear to me what these errors mean.

If you need the original source files, or have additional questions, please=
 let me know.  I am a certified .NET software developer, and although I do =
not know everything about Windows development, I believe my abilities are a=
bove average.



Mark Tabladillo=20
Atlanta, GA
marktab at email.phoenix.edu
Alternate:  x2008 at marktab.com


	[[alternative HTML version deleted]]


From sayeedhussain19 at gmail.com  Sun Aug 17 07:59:02 2008
From: sayeedhussain19 at gmail.com (sayeed hussain)
Date: Sun, 17 Aug 2008 11:29:02 +0530
Subject: [Rd] format Date
Message-ID: <f052b9f90808162259wbdef51av21b0a25d77aabdef@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080817/17012ad4/attachment.pl>

From ripley at stats.ox.ac.uk  Mon Aug 18 12:07:24 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Mon, 18 Aug 2008 11:07:24 +0100 (BST)
Subject: [Rd] Allocated Memory Warnings in Vista 32 bit with 4 GB
 (PR#12557)
In-Reply-To: <20080817171517.53473282EFF6@mail.pubhealth.ku.dk>
References: <20080817171517.53473282EFF6@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808181100390.14849@gannet.stats.ox.ac.uk>

I see no bug here.  R is telling you that you have insufficient memory 
available: see also ?"Memory-limits".

See also rw-FAQ Q2.9.

Note that we don't have a reproducible example and in particular have no 
idea of how many columns this data frame has.

The 'R Data Import/Export' manual gives you many hints on how to do this 
more efficiently, and it is referenced from the help page.  I see no sign 
that you have consulted it, so doing your homework is your next (belated) 
step.


On Sun, 17 Aug 2008, drmark at marktab.com wrote:

> Hello
>
> I am running Windows Vista 32 with 4 GB (installed, though Windows of cours=
> e only recognizes 3326 MB, as reported by Windows "My Computer")

And only 2Gb of that is available to a user process.

> I am running R 2.7.1
>
> I was trying to read in a comma delimited single column CSV file, assign th=
> at file to a variable ("data") and then extract a sample (assigned to "part=
> ial").  I was getting memory allocation errors, and from the log below, I s=
> tarted to see a pattern which indicates that the "error" is related to how =
> R views memory allocation, and perhaps how R is using or reading memory on =
> my specific system.  The error, I would guess, is probably related to how R=
> is reporting the memory available.
>
> My source files have the same number of rows (or cases) as the name of the =
> file.  Thus, data10000 has 10,000 observations, and data300000 has 300,000 =
> observations.
>
> Here is my history which shows the problem, and inconsistency in memory all=
> ocation reporting:
>
>  > data=3Dread.csv("data10000.csv",header=3DFALSE)
>  > partial=3Dsample(data,5000,T)
>  > data=3Dread.csv("data100000.csv",header=3DFALSE)
>  Error in file(file, "r") : cannot open the connection
>  In addition: Warning message:
>  In file(file, "r") :
>    cannot open file 'data100000.csv': No such file or directory
>  > data=3Dread.csv("data300000.csv",header=3DFALSE)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,5,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  Warning messages:
>  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial[1:5,]
>  [1]  0.3204279  1.6583593 -0.3456585  1.2951363 -1.1096974
>  > rm(partial)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  5: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  6: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial[1:5,]
>  Error: object "partial" not found
>  > partial=3Dsample(data,1,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  Warning messages:
>  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  >=20
>
>
> I have been able to reproduce the situation several times.  For example, wh=
> at is curious is that a command like partial=3Dsample(data,1,T) may or may =
> not produce a warning message.  In the history, obviously 2.3MB is well bel=
> ow the allocated 1535MB.  I had been getting this error on my original larg=
> er source data (1,000,000 observations), but since I am a new R user, it wa=
> s not clear to me what these errors mean.
>
> If you need the original source files, or have additional questions, please=
> let me know.  I am a certified .NET software developer, and although I do =
> not know everything about Windows development, I believe my abilities are a=
> bove average.
>
>
>
> Mark Tabladillo=20
> Atlanta, GA
> marktab at email.phoenix.edu
> Alternate:  x2008 at marktab.com
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Mon Aug 18 12:10:09 2008
From: ripley at stats.ox.ac.uk (ripley at stats.ox.ac.uk)
Date: Mon, 18 Aug 2008 12:10:09 +0200 (CEST)
Subject: [Rd] Allocated Memory Warnings in Vista 32 bit with 4 GB
	(PR#12560)
Message-ID: <20080818101009.B31C32834169@mail.pubhealth.ku.dk>

I see no bug here.  R is telling you that you have insufficient memory 
available: see also ?"Memory-limits".

See also rw-FAQ Q2.9.

Note that we don't have a reproducible example and in particular have no 
idea of how many columns this data frame has.

The 'R Data Import/Export' manual gives you many hints on how to do this 
more efficiently, and it is referenced from the help page.  I see no sign 
that you have consulted it, so doing your homework is your next (belated) 
step.


On Sun, 17 Aug 2008, drmark at marktab.com wrote:

> Hello
>
> I am running Windows Vista 32 with 4 GB (installed, though Windows of cours=
> e only recognizes 3326 MB, as reported by Windows "My Computer")

And only 2Gb of that is available to a user process.

> I am running R 2.7.1
>
> I was trying to read in a comma delimited single column CSV file, assign th=
> at file to a variable ("data") and then extract a sample (assigned to "part=
> ial").  I was getting memory allocation errors, and from the log below, I s=
> tarted to see a pattern which indicates that the "error" is related to how =
> R views memory allocation, and perhaps how R is using or reading memory on =
> my specific system.  The error, I would guess, is probably related to how R=
> is reporting the memory available.
>
> My source files have the same number of rows (or cases) as the name of the =
> file.  Thus, data10000 has 10,000 observations, and data300000 has 300,000 =
> observations.
>
> Here is my history which shows the problem, and inconsistency in memory all=
> ocation reporting:
>
>  > data=3Dread.csv("data10000.csv",header=3DFALSE)
>  > partial=3Dsample(data,5000,T)
>  > data=3Dread.csv("data100000.csv",header=3DFALSE)
>  Error in file(file, "r") : cannot open the connection
>  In addition: Warning message:
>  In file(file, "r") :
>    cannot open file 'data100000.csv': No such file or directory
>  > data=3Dread.csv("data300000.csv",header=3DFALSE)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,5,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  Warning messages:
>  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial[1:5,]
>  [1]  0.3204279  1.6583593 -0.3456585  1.2951363 -1.1096974
>  > rm(partial)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  5: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  6: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial[1:5,]
>  Error: object "partial" not found
>  > partial=3Dsample(data,1,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  Warning messages:
>  1: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In attributes(.Data) <- c(attributes(.Data), attrib) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  > partial=3Dsample(data,1,T)
>  > partial=3Dsample(data,5000,T)
>  Error: cannot allocate vector of size 2.3 Mb
>  In addition: Warning messages:
>  1: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  2: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  3: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  4: In names(y) <- make.unique(cols) :
>    Reached total allocation of 1535Mb: see help(memory.size)
>  >=20
>
>
> I have been able to reproduce the situation several times.  For example, wh=
> at is curious is that a command like partial=3Dsample(data,1,T) may or may =
> not produce a warning message.  In the history, obviously 2.3MB is well bel=
> ow the allocated 1535MB.  I had been getting this error on my original larg=
> er source data (1,000,000 observations), but since I am a new R user, it wa=
> s not clear to me what these errors mean.
>
> If you need the original source files, or have additional questions, please=
> let me know.  I am a certified .NET software developer, and although I do =
> not know everything about Windows development, I believe my abilities are a=
> bove average.
>
>
>
> Mark Tabladillo=20
> Atlanta, GA
> marktab at email.phoenix.edu
> Alternate:  x2008 at marktab.com
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ripley at stats.ox.ac.uk  Mon Aug 18 12:24:10 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Mon, 18 Aug 2008 11:24:10 +0100 (BST)
Subject: [Rd] format Date
In-Reply-To: <f052b9f90808162259wbdef51av21b0a25d77aabdef@mail.gmail.com>
References: <f052b9f90808162259wbdef51av21b0a25d77aabdef@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808181119190.15426@gannet.stats.ox.ac.uk>

On Sun, 17 Aug 2008, sayeed hussain wrote:

> Hey people..

Wrong 'people': this is a question for R-help, and please study the 
R posting guide.

> I have been trying this code
>
> write.table(data.frame(date,name,amount,details),file="C:/Documents and
> Settings/Administrator/My Documents/Account/Account
> Info.txt",quote=FALSE,append=TRUE,col.names=FALSE,row.names=FALSE,sep="\t")
>
> check<-read.table("C:/Documents and Settings/Administrator/My
> Documents/Account/Account
> Info.txt",col.names=c("Date","Name","Amount","Details"),header=FALSE,sep="\t",
> na.strings="NA")
>
> #My na.strings="NA" is not showing NA's in blank entries

It is not documented to.

> # check$Date is of the format("%Y-%m-%d")

Really?  I think most likely it is a character string.

> # I want to change it to
>
> check$Date<-format(check$Date,"%d-%m-%Y")
>
> #  I get this error
>
> Error in switch(mode(x), "NULL" = "NULL", character = .Internal(format(x,  :
>
> invalid 'trim' argument

Did you read ?format: trim is the second argument, and this is not a 
valid value.

>
> HELP

So, please read the posting guide and post a complete reproducible example 
there.  Then people may be prepared to help you, if they believe you have 
made a reasonable effort to help yourself.

> Sayeed
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From rune at philosof.dk  Mon Aug 18 12:37:04 2008
From: rune at philosof.dk (Rune Schjellerup Philosof)
Date: Mon, 18 Aug 2008 12:37:04 +0200
Subject: [Rd] 'javareconf -e' as normal user (PR#12544)
In-Reply-To: <6CE0DFD0-77D5-4918-9C54-9A22D7B6B8AD@r-project.org>
References: <20080815125003.3CD05282C765@mail.pubhealth.ku.dk>
	<6CE0DFD0-77D5-4918-9C54-9A22D7B6B8AD@r-project.org>
Message-ID: <48A950D0.8010504@philosof.dk>

Simon Urbanek skrev:
> Rune,
>
> On Aug 15, 2008, at 8:50 AM, bugs at philosof.dk wrote:
>
>> Full_Name: Rune Philosof
>> Version: 2.6.2 and 2.7.1
>> OS: Ubuntu 8.04
>> Submission from: (NULL) (130.226.87.177)
>>
>>
>> When I try to install rJava I am requested to run 'R CMD javareconf 
>> -e' if I
>> don't have root access.
>>
>> rune at rune-laptop:~$ R CMD javareconf -e
>> shift: 59: can't shift that many
>>
>
> Can you tell us which shell you are using? It works fine for me with 
> sh/bash.
>
> FWIW in general the syntax is "-e <prog>" (see -h) e.g.
> R CMD javareconf -e /bin/bash
> You can also use '' for the default shell.

I'm using bash version 3.2.25(1) (ubuntu package version 3.2-0ubuntu11).
It works fine if I specify <prog>, but it doesn't work with just -e for 
the default shell.

--
Regards
Rune


From Heikki.Kaskelma at nbl.fi  Tue Aug 19 01:35:00 2008
From: Heikki.Kaskelma at nbl.fi (Heikki Kaskelma)
Date: Tue, 19 Aug 2008 02:35:00 +0300
Subject: [Rd] ifelse
Message-ID: <g8d0v5$cet$1@ger.gmane.org>

I find it slightly surprising, that

ifelse(TRUE, character(0), "")

returns NA instead of character(0). 

[WNT 2.6.2 Patched]

-- 
Heikki Kaskelma


From marc_schwartz at comcast.net  Tue Aug 19 02:09:48 2008
From: marc_schwartz at comcast.net (Marc Schwartz)
Date: Mon, 18 Aug 2008 19:09:48 -0500
Subject: [Rd] ifelse
In-Reply-To: <g8d0v5$cet$1@ger.gmane.org>
References: <g8d0v5$cet$1@ger.gmane.org>
Message-ID: <48AA0F4C.6040804@comcast.net>

on 08/18/2008 06:35 PM Heikki Kaskelma wrote:
> I find it slightly surprising, that
> 
> ifelse(TRUE, character(0), "")
> 
> returns NA instead of character(0). 
> 
> [WNT 2.6.2 Patched]

Time to upgrade...  :-)


The same behavior is in:

  R version 2.7.2 beta (2008-08-16 r46368)


The reason for this is that the internal code for ifelse() has:

    if (any(test[!nas]))
        ans[test & !nas] <- rep(yes, length.out = length(ans))[test &
            !nas]

where the key code is:

  rep(yes, length.out = length(ans))

In this case, 'yes' is character(0) and 'ans' is TRUE.

Thus, you get:

  > rep(character(0), length.out = length(TRUE))
  [1] NA


This behavior is documented in ?rep, where in the Details section you
will find:

"If x has length zero and length.out is supplied and is positive, the
values are filled in using the extraction rules, that is by an NA of the
appropriate class for an atomic vector (0 for raw vectors) and NULL for
a list. "

Thus:

> class(rep(character(0), length.out = length(TRUE)))
[1] "character"


which shows that the NA that is returned is of class character, which is
the class for character(0).

HTH,

Marc Schwartz


From ripley at stats.ox.ac.uk  Tue Aug 19 07:37:42 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 19 Aug 2008 06:37:42 +0100 (BST)
Subject: [Rd] ifelse
In-Reply-To: <48AA0F4C.6040804@comcast.net>
References: <g8d0v5$cet$1@ger.gmane.org> <48AA0F4C.6040804@comcast.net>
Message-ID: <alpine.LFD.1.10.0808190609480.24984@gannet.stats.ox.ac.uk>

Another way of looking at this is that ifelse(TRUE, character(0), "") asks 
for a length-one result containing the first element of yes=character(0), 
and character(0)[1] is NA_character_

I suspect if(TRUE) character(0) else "" was intended.

On Mon, 18 Aug 2008, Marc Schwartz wrote:

> on 08/18/2008 06:35 PM Heikki Kaskelma wrote:
>> I find it slightly surprising, that
>>
>> ifelse(TRUE, character(0), "")
>>
>> returns NA instead of character(0).
>>
>> [WNT 2.6.2 Patched]
>
> Time to upgrade...  :-)
>
>
> The same behavior is in:
>
>  R version 2.7.2 beta (2008-08-16 r46368)
>
>
> The reason for this is that the internal code for ifelse() has:
>
>    if (any(test[!nas]))
>        ans[test & !nas] <- rep(yes, length.out = length(ans))[test &
>            !nas]
>
> where the key code is:
>
>  rep(yes, length.out = length(ans))
>
> In this case, 'yes' is character(0) and 'ans' is TRUE.
>
> Thus, you get:
>
>  > rep(character(0), length.out = length(TRUE))
>  [1] NA
>
>
> This behavior is documented in ?rep, where in the Details section you
> will find:
>
> "If x has length zero and length.out is supplied and is positive, the
> values are filled in using the extraction rules, that is by an NA of the
> appropriate class for an atomic vector (0 for raw vectors) and NULL for
> a list. "
>
> Thus:
>
>> class(rep(character(0), length.out = length(TRUE)))
> [1] "character"
>
>
> which shows that the NA that is returned is of class character, which is
> the class for character(0).
>
> HTH,
>
> Marc Schwartz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From p.dalgaard at biostat.ku.dk  Tue Aug 19 08:57:56 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Tue, 19 Aug 2008 08:57:56 +0200
Subject: [Rd] ifelse
In-Reply-To: <alpine.LFD.1.10.0808190609480.24984@gannet.stats.ox.ac.uk>
References: <g8d0v5$cet$1@ger.gmane.org> <48AA0F4C.6040804@comcast.net>
	<alpine.LFD.1.10.0808190609480.24984@gannet.stats.ox.ac.uk>
Message-ID: <48AA6EF4.2010302@biostat.ku.dk>

Prof Brian Ripley wrote:
> Another way of looking at this is that ifelse(TRUE, character(0), "") 
> asks for a length-one result 
Just to rub it in: The length of an ifelse() computation is the length 
of the  "test" argument, so there is no way you should expect 
character(0) as the result. (The class of the result is also taken from 
"test", which is arguably one of the lesser convenient features in R.)

> containing the first element of yes=character(0), and character(0)[1] 
> is NA_character_
>
> I suspect if(TRUE) character(0) else "" was intended.
>
> On Mon, 18 Aug 2008, Marc Schwartz wrote:
>
>> on 08/18/2008 06:35 PM Heikki Kaskelma wrote:
>>> I find it slightly surprising, that
>>>
>>> ifelse(TRUE, character(0), "")
>>>
>>> returns NA instead of character(0).
>>>
>>> [WNT 2.6.2 Patched]
>>
>> Time to upgrade...  :-)
>>
>>
>> The same behavior is in:
>>
>>  R version 2.7.2 beta (2008-08-16 r46368)
>>
>>
>> The reason for this is that the internal code for ifelse() has:
>>
>>    if (any(test[!nas]))
>>        ans[test & !nas] <- rep(yes, length.out = length(ans))[test &
>>            !nas]
>>
>> where the key code is:
>>
>>  rep(yes, length.out = length(ans))
>>
>> In this case, 'yes' is character(0) and 'ans' is TRUE.
>>
>> Thus, you get:
>>
>>  > rep(character(0), length.out = length(TRUE))
>>  [1] NA
>>
>>
>> This behavior is documented in ?rep, where in the Details section you
>> will find:
>>
>> "If x has length zero and length.out is supplied and is positive, the
>> values are filled in using the extraction rules, that is by an NA of the
>> appropriate class for an atomic vector (0 for raw vectors) and NULL for
>> a list. "
>>
>> Thus:
>>
>>> class(rep(character(0), length.out = length(TRUE)))
>> [1] "character"
>>
>>
>> which shows that the NA that is returned is of class character, which is
>> the class for character(0).
>


-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From Ray.Brownrigg at mcs.vuw.ac.nz  Tue Aug 19 07:15:09 2008
From: Ray.Brownrigg at mcs.vuw.ac.nz (Ray.Brownrigg at mcs.vuw.ac.nz)
Date: Tue, 19 Aug 2008 07:15:09 +0200 (CEST)
Subject: [Rd] RNGkind() state (PR#12567)
Message-ID: <20080819051509.871CA282C768@mail.pubhealth.ku.dk>

I sent this to R-devel early last month, but have received no response, so I guess it 
really is a bug.

This looks like a bug to me, and is a bit hard to describe, but easy to reproduce. ?
Basically, if RNGkind is saved as something other than the default, and if the first 
operation in a session is a set.seed(), the default is reverted to. ?Reproduce by:

cafe-rozo> ?R --vanilla

R version 2.7.1 (2008-06-23)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> sessionInfo()
R version 2.7.1 (2008-06-23)
i386--netbsdelf

locale:
C

attached base packages:
[1] stats ? ? graphics ?grDevices utils ? ? datasets ?methods ? base
> set.seed(1); runif(1)?????????# check the default
[1] 0.2655087
> RNGkind("Mar")
> RNGkind()
[1] "Marsaglia-Multicarry" "Inversion"
> set.seed(1); runif(1)?????????# now check again
[1] 0.006153224
> set.seed(1)???????????????????# save seed and RNGkind
> q("yes")
cafe-rozo> ?R

R version 2.7.1 (2008-06-23)
: etc
[Previously saved workspace restored]

> runif(1)??????????????# with a saved seed, Marsaglia-Multicarry is used
[1] 0.006153224
> set.seed(1); runif(1)
[1] 0.006153224
> q()
Save workspace image? [y/n/c]: n
cafe-rozo> 

R version 2.7.1 (2008-06-23)
: etc
[Previously saved workspace restored]

> set.seed(1); runif(1)?????????# saved RNGkind is ignored ...
[1] 0.2655087
> RNGkind()?????????????# and overridden ...
[1] "Mersenne-Twister" "Inversion"
> q("no")
cafe-rozo> ?R

R version 2.7.1 (2008-06-23)
: etc
[Previously saved workspace restored]

> RNGkind()?????????????# and wrongly reported!
[1] "Mersenne-Twister" "Inversion"
> runif(1)??????????????????????# Note this is actually using Marsaglia-Multicarry
[1] 0.006153224
>

Ray Brownrigg
Mathematics, Statistics and Computer Science
Victoria University of Wellington
Wellington, NZ


From ripley at stats.ox.ac.uk  Wed Aug 20 10:46:50 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 20 Aug 2008 09:46:50 +0100 (BST)
Subject: [Rd] RNGkind() state (PR#12567)
In-Reply-To: <20080819051509.871CA282C768@mail.pubhealth.ku.dk>
References: <20080819051509.871CA282C768@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808200931500.31733@gannet.stats.ox.ac.uk>

On Tue, 19 Aug 2008, Ray.Brownrigg at mcs.vuw.ac.nz wrote:

> I sent this to R-devel early last month, but have received no response, so I guess it
> really is a bug.

Or people were busy: I was away teaching a course, for example.

> This looks like a bug to me, and is a bit hard to describe, but easy to reproduce. ?
> Basically, if RNGkind is saved as something other than the default, and if the first
> operation in a session is a set.seed(), the default is reverted to. ?Reproduce by:

A better description would certainly have helped!  You can look at 
.Random.seed to see what is happening.

I think what you are observing is that if .Random.seed has not used in the 
session, any restored value is not used to set the default kind in 
set.seed.  I don't think that is unreasonable (in particular as you can 
set the kind in set.seed() and I take the notes on ?RNG to suggest that), 
but would be easy to change/document.

>
> cafe-rozo> ?R --vanilla
>
> R version 2.7.1 (2008-06-23)
> Copyright (C) 2008 The R Foundation for Statistical Computing
> ISBN 3-900051-07-0
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
>> sessionInfo()
> R version 2.7.1 (2008-06-23)
> i386--netbsdelf
>
> locale:
> C
>
> attached base packages:
> [1] stats ? ? graphics ?grDevices utils ? ? datasets ?methods ? base
>> set.seed(1); runif(1)?????????# check the default
> [1] 0.2655087
>> RNGkind("Mar")
>> RNGkind()
> [1] "Marsaglia-Multicarry" "Inversion"
>> set.seed(1); runif(1)?????????# now check again
> [1] 0.006153224
>> set.seed(1)???????????????????# save seed and RNGkind
>> q("yes")
> cafe-rozo> ?R
>
> R version 2.7.1 (2008-06-23)
> : etc
> [Previously saved workspace restored]
>
>> runif(1)??????????????# with a saved seed, Marsaglia-Multicarry is used
> [1] 0.006153224
>> set.seed(1); runif(1)
> [1] 0.006153224
>> q()
> Save workspace image? [y/n/c]: n
> cafe-rozo>
>
> R version 2.7.1 (2008-06-23)
> : etc
> [Previously saved workspace restored]
>
>> set.seed(1); runif(1)?????????# saved RNGkind is ignored ...
> [1] 0.2655087
>> RNGkind()?????????????# and overridden ...
> [1] "Mersenne-Twister" "Inversion"
>> q("no")
> cafe-rozo> ?R
>
> R version 2.7.1 (2008-06-23)
> : etc
> [Previously saved workspace restored]
>
>> RNGkind()?????????????# and wrongly reported!
> [1] "Mersenne-Twister" "Inversion"
>> runif(1)??????????????????????# Note this is actually using Marsaglia-Multicarry
> [1] 0.006153224
>>
>
> Ray Brownrigg
> Mathematics, Statistics and Computer Science
> Victoria University of Wellington
> Wellington, NZ
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

From P.Dalgaard at biostat.ku.dk  Wed Aug 20 12:30:19 2008
From: P.Dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Wed, 20 Aug 2008 12:30:19 +0200
Subject: [Rd] Outdated dependencies and install.packages()
Message-ID: <48ABF23B.70707@biostat.ku.dk>

This looks like a buglet:

> install.packages("lme4", depend=TRUE, lib="~/Rlibrary/")
--- Please select a CRAN mirror for use in this session ---
[...snip...]
** preparing package for lazy loading
Error: package 'Matrix' 0.999375-4 was found, but >= 0.999375.11 is
required by 'lme4'
Execution halted
ERROR: lazy loading failed for package 'lme4'
** Removing '/home/bs/pd/Rlibrary/lme4'
** Restoring previous '/home/bs/pd/Rlibrary/lme4'

and the DESCRIPTION file for lme 4 does have

Depends: methods, R(? 2.7.0), Matrix(? 0.999375-11), lattice
<http://cran.r-project.org/web/packages/lattice/index.html>


Looks like we're either not checking the version requirement of
dependencies, or something is making 4 > 11... (from my reading of the
code, it is the former, but I could have missed something).

We should at least document the behaviour.

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From osklyar at maninvestments.com  Wed Aug 20 14:17:40 2008
From: osklyar at maninvestments.com (Sklyar, Oleg (London))
Date: Wed, 20 Aug 2008 13:17:40 +0100
Subject: [Rd] showMethods("plot",
	printTo=FALSE) fails if printTo set to FALSE
Message-ID: <1A68FCB28DE72F4BA3B967E6506CCE43030496AA@mildnpexmb01.maninvestments.ad.man.com>

Hi everybody,

any idea why showMethods fails with the following error when printTo is
set to false, i.e. to return the output as a character vector. It works
fine if printTo is left default as seen below. The behaviour is
consistent for any method I tried. stdin() generally works fine on this
system, at least when checked with: x = readLines().

Thanks,
Oleg

> x = showMethods("plot", printTo=FALSE)
Error in cat(file = printTo, sep = "", ...) : 
  cannot switch output to stdin

Enter a frame number, or 0 to exit   

1: showMethods("plot", printTo = FALSE)
2: .showMethodsTable(fdef, includeDefs, inherited, classes = classes,
showEmpt
3: doFun(f, p)
4: cf("Function: ", func, " (package ", pkg, ")\n")
5: cat(file = printTo, sep = "", ...)

Selection: 0
> x = showMethods("plot")
Function: plot (package graphics)
x="ANY", y="ANY"
x="SimResults", y="SimResults"
x="SimResults", y="missing"
x="TimeDateBase", y="character"
x="TimeDateBase", y="data.frameOrMatrix"
x="TimeDateBase", y="missing"
x="TimeSeries", y="missing"

> sessionInfo()
R version 2.8.0 Under development (unstable) (2008-08-05 r46234) 
x86_64-unknown-linux-gnu 

locale:
C

attached base packages:
[1] datasets  splines   utils     stats     graphics  grDevices methods

[8] base     

other attached packages:

## 64bit RHEL 5


Dr Oleg Sklyar
Technology Group
Man Investments Ltd
+44 (0)20 7144 3803
osklyar at maninvestments.com


**********************************************************************
The contents of this email are for the named addressee(s...{{dropped:22}}


From ripley at stats.ox.ac.uk  Wed Aug 20 14:28:48 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 20 Aug 2008 13:28:48 +0100 (BST)
Subject: [Rd] showMethods("plot",
 printTo=FALSE) fails if printTo set to FALSE
In-Reply-To: <1A68FCB28DE72F4BA3B967E6506CCE43030496AA@mildnpexmb01.maninvestments.ad.man.com>
References: <1A68FCB28DE72F4BA3B967E6506CCE43030496AA@mildnpexmb01.maninvestments.ad.man.com>
Message-ID: <alpine.LFD.1.10.0808201325350.17839@gannet.stats.ox.ac.uk>

On Wed, 20 Aug 2008, Sklyar, Oleg (London) wrote:

> Hi everybody,
>
> any idea why showMethods fails with the following error when printTo is
> set to false, i.e. to return the output as a character vector. It works
> fine if printTo is left default as seen below. The behaviour is
> consistent for any method I tried. stdin() generally works fine on this
> system, at least when checked with: x = readLines().
>
> Thanks,
> Oleg
>
>> x = showMethods("plot", printTo=FALSE)
> Error in cat(file = printTo, sep = "", ...) :
>  cannot switch output to stdin

This has coerced FALSE to 0, which is connection stdin().  You cannot 
write to stdin.

I see no sign that printTo = FALSE has been implemented.  You could use a 
text connection, e.g.

con <- textConnection(NULL, open="w")
x <- showMethods("plot", printTo=con)
textConnectionValue(con)
close(con)

>
> Enter a frame number, or 0 to exit
>
> 1: showMethods("plot", printTo = FALSE)
> 2: .showMethodsTable(fdef, includeDefs, inherited, classes = classes,
> showEmpt
> 3: doFun(f, p)
> 4: cf("Function: ", func, " (package ", pkg, ")\n")
> 5: cat(file = printTo, sep = "", ...)
>
> Selection: 0
>> x = showMethods("plot")
> Function: plot (package graphics)
> x="ANY", y="ANY"
> x="SimResults", y="SimResults"
> x="SimResults", y="missing"
> x="TimeDateBase", y="character"
> x="TimeDateBase", y="data.frameOrMatrix"
> x="TimeDateBase", y="missing"
> x="TimeSeries", y="missing"
>
>> sessionInfo()
> R version 2.8.0 Under development (unstable) (2008-08-05 r46234)
> x86_64-unknown-linux-gnu
>
> locale:
> C
>
> attached base packages:
> [1] datasets  splines   utils     stats     graphics  grDevices methods
>
> [8] base
>
> other attached packages:
>
> ## 64bit RHEL 5
>
>
> Dr Oleg Sklyar
> Technology Group
> Man Investments Ltd
> +44 (0)20 7144 3803
> osklyar at maninvestments.com
>
>
> **********************************************************************
> The contents of this email are for the named addressee(s...{{dropped:22}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From osklyar at maninvestments.com  Wed Aug 20 14:39:14 2008
From: osklyar at maninvestments.com (Sklyar, Oleg (London))
Date: Wed, 20 Aug 2008 13:39:14 +0100
Subject: [Rd] showMethods("plot",
 printTo=FALSE) fails if printTo set to    FALSE
In-Reply-To: <alpine.LFD.1.10.0808201325350.17839@gannet.stats.ox.ac.uk>
References: <1A68FCB28DE72F4BA3B967E6506CCE43030496AA@mildnpexmb01.maninvestments.ad.man.com>
	<alpine.LFD.1.10.0808201325350.17839@gannet.stats.ox.ac.uk>
Message-ID: <1A68FCB28DE72F4BA3B967E6506CCE43030496AB@mildnpexmb01.maninvestments.ad.man.com>

Thanks for a good tip.

Dr Oleg Sklyar
Technology Group
Man Investments Ltd
+44 (0)20 7144 3803
osklyar at maninvestments.com 

> -----Original Message-----
> From: Prof Brian Ripley [mailto:ripley at stats.ox.ac.uk] 
> Sent: 20 August 2008 13:29
> To: Sklyar, Oleg (London)
> Cc: r-devel at stat.math.ethz.ch
> Subject: Re: [Rd] showMethods("plot", printTo=FALSE) fails if 
> printTo set to FALSE
> 
> On Wed, 20 Aug 2008, Sklyar, Oleg (London) wrote:
> 
> > Hi everybody,
> >
> > any idea why showMethods fails with the following error 
> when printTo is
> > set to false, i.e. to return the output as a character 
> vector. It works
> > fine if printTo is left default as seen below. The behaviour is
> > consistent for any method I tried. stdin() generally works 
> fine on this
> > system, at least when checked with: x = readLines().
> >
> > Thanks,
> > Oleg
> >
> >> x = showMethods("plot", printTo=FALSE)
> > Error in cat(file = printTo, sep = "", ...) :
> >  cannot switch output to stdin
> 
> This has coerced FALSE to 0, which is connection stdin().  You cannot 
> write to stdin.
> 
> I see no sign that printTo = FALSE has been implemented.  You 
> could use a 
> text connection, e.g.
> 
> con <- textConnection(NULL, open="w")
> x <- showMethods("plot", printTo=con)
> textConnectionValue(con)
> close(con)
> 
> >
> > Enter a frame number, or 0 to exit
> >
> > 1: showMethods("plot", printTo = FALSE)
> > 2: .showMethodsTable(fdef, includeDefs, inherited, classes 
> = classes,
> > showEmpt
> > 3: doFun(f, p)
> > 4: cf("Function: ", func, " (package ", pkg, ")\n")
> > 5: cat(file = printTo, sep = "", ...)
> >
> > Selection: 0
> >> x = showMethods("plot")
> > Function: plot (package graphics)
> > x="ANY", y="ANY"
> > x="SimResults", y="SimResults"
> > x="SimResults", y="missing"
> > x="TimeDateBase", y="character"
> > x="TimeDateBase", y="data.frameOrMatrix"
> > x="TimeDateBase", y="missing"
> > x="TimeSeries", y="missing"
> >
> >> sessionInfo()
> > R version 2.8.0 Under development (unstable) (2008-08-05 r46234)
> > x86_64-unknown-linux-gnu
> >
> > locale:
> > C
> >
> > attached base packages:
> > [1] datasets  splines   utils     stats     graphics  
> grDevices methods
> >
> > [8] base
> >
> > other attached packages:
> >
> > ## 64bit RHEL 5
> >
> >
> > Dr Oleg Sklyar
> > Technology Group
> > Man Investments Ltd
> > +44 (0)20 7144 3803
> > osklyar at maninvestments.com
> >
> >
> > 
> **********************************************************************
> > The contents of this email are for the named 
> addressee(s...{{dropped:22}}
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
> 


**********************************************************************
The contents of this email are for the named addressee(s...{{dropped:22}}


From mtmorgan at fhcrc.org  Wed Aug 20 15:20:19 2008
From: mtmorgan at fhcrc.org (Martin Morgan)
Date: Wed, 20 Aug 2008 06:20:19 -0700
Subject: [Rd] Outdated dependencies and install.packages()
In-Reply-To: <48ABF23B.70707@biostat.ku.dk> (Peter Dalgaard's message of
	"Wed, 20 Aug 2008 12:30:19 +0200")
References: <48ABF23B.70707@biostat.ku.dk>
Message-ID: <6phk5eb4ycs.fsf@lamprey.fhcrc.org>

A small addendum is that if the outdated dependency is in the
LinkingTo: field, the error can be more cryptic. Installation then
fails with compilation errors rather than the hint that the dependency
is out of date.

Martin Morgan

Peter Dalgaard <P.Dalgaard at biostat.ku.dk> writes:

> This looks like a buglet:
>
>> install.packages("lme4", depend=TRUE, lib="~/Rlibrary/")
> --- Please select a CRAN mirror for use in this session ---
> [...snip...]
> ** preparing package for lazy loading
> Error: package 'Matrix' 0.999375-4 was found, but >= 0.999375.11 is
> required by 'lme4'
> Execution halted
> ERROR: lazy loading failed for package 'lme4'
> ** Removing '/home/bs/pd/Rlibrary/lme4'
> ** Restoring previous '/home/bs/pd/Rlibrary/lme4'
>
> and the DESCRIPTION file for lme 4 does have
>
> Depends: methods, R(? 2.7.0), Matrix(? 0.999375-11), lattice
> <http://cran.r-project.org/web/packages/lattice/index.html>
>
>
> Looks like we're either not checking the version requirement of
> dependencies, or something is making 4 > 11... (from my reading of the
> code, it is the former, but I could have missed something).
>
> We should at least document the behaviour.
>
> -- 
>    O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
>   c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>  (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
> ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Martin Morgan
Computational Biology / Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N.
PO Box 19024 Seattle, WA 98109

Location: Arnold Building M2 B169
Phone: (206) 667-2793


From davison at stats.ox.ac.uk  Wed Aug 20 15:25:10 2008
From: davison at stats.ox.ac.uk (davison at stats.ox.ac.uk)
Date: Wed, 20 Aug 2008 15:25:10 +0200 (CEST)
Subject: [Rd] unlist on nested lists of factors (PR#12572)
Message-ID: <20080820132510.7CF76282C76C@mail.pubhealth.ku.dk>

Here is a description and a proposed solution for a bug in unlist().

I've used version 2.7.2 RC (2008-08-18 r46382) to look at this, under
linux.

unlist(recursive=TRUE) incorrectly returns a factor with zero levels
when passed either a nested list of factors, or a data frame
containing only factor columns. You can't print() the result.

x <- list(list(v=factor("a")))
str(unlist(x))
## Factor w/ 0 levels: NA
## - attr(*, "names")= chr "v"
## Warning message:
## In str.default(unlist(x)) : 'object' does not have valid levels() 
y <- list(data.frame(v=factor("a")))
str(unlist(y))
## Factor w/ 0 levels: NA
## - attr(*, "names")= chr "v"
## Warning message:
## In str.default(unlist(y)) : 'object' does not have valid levels()

unlist is defined as

unlist <- function(x, recursive=TRUE, use.names=TRUE)
{
    if(.Internal(islistfactor(x, recursive))) {
        lv <- unique(.Internal(unlist(lapply(x, levels), recursive, FALSE)))
        nm <- if(use.names) names(.Internal(unlist(x, recursive, use.names)))
        res <- .Internal(unlist(lapply(x, as.character), recursive, FALSE))
        res <- match(res, lv)
        ## we cannot make this ordered as level set may have been changed
        structure(res, levels=lv, names=nm, class="factor")
    } else .Internal(unlist(x, recursive, use.names))
}

The error occurs because, in both cases, at the C level, islistfactor
recurses and finds that all elements are factors, and the if test
condition is TRUE. However, the two instances of lapply do not
recurse, and return inappropriate results. A possible solution is to
replace both instances of lapply with rapply. This results in
appropriate factor answers in this case:

str(unlist(x))
## Factor w/ 1 level "a": 1
## - attr(*, "names")= chr "v"
str(unlist(y))
## Factor w/ 1 level "a": 1
## - attr(*, "names")= chr "v"

An alternative is to not return a factor result, by altering the if
test condition so that nested lists of factors, and lists of
factor-only data frames, fail.


Dan

-- 
www.stats.ox.ac.uk/~davison


From ripley at stats.ox.ac.uk  Wed Aug 20 16:46:08 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 20 Aug 2008 15:46:08 +0100 (BST)
Subject: [Rd] Outdated dependencies and install.packages()
In-Reply-To: <48ABF23B.70707@biostat.ku.dk>
References: <48ABF23B.70707@biostat.ku.dk>
Message-ID: <alpine.LFD.1.10.0808201232150.5896@gannet.stats.ox.ac.uk>

On Wed, 20 Aug 2008, Peter Dalgaard wrote:

> This looks like a buglet:
>
>> install.packages("lme4", depend=TRUE, lib="~/Rlibrary/")
> --- Please select a CRAN mirror for use in this session ---
> [...snip...]
> ** preparing package for lazy loading
> Error: package 'Matrix' 0.999375-4 was found, but >= 0.999375.11 is
> required by 'lme4'
> Execution halted
> ERROR: lazy loading failed for package 'lme4'
> ** Removing '/home/bs/pd/Rlibrary/lme4'
> ** Restoring previous '/home/bs/pd/Rlibrary/lme4'
>
> and the DESCRIPTION file for lme 4 does have
>
> Depends: methods, R(? 2.7.0), Matrix(? 0.999375-11), lattice
> <http://cran.r-project.org/web/packages/lattice/index.html>
>
>
> Looks like we're either not checking the version requirement of
> dependencies, or something is making 4 > 11... (from my reading of the
> code, it is the former, but I could have missed something).

We don't check version requirements of dependencies in install.packages(). 
That's a minefield related to having multiple versions of a package on a 
system and which gets loaded/namespace loaded, so you can easily have the 
needed version but pick up a different one.

Depending on whether lazy-loading is in place (and various other issues) 
you may or may not need the dependencies to install the package.  It's 
also a problem that you can update dependencies to incompatible ones, so 
the versions available at installation are only part of the story.

I don't see why the message reports .11 not -11, but that may be 
related to "package_version" classes.

> We should at least document the behaviour.

I am not sure where you think it should be documented and is not.
But for install.packages():

dependencies: logical indicating to also install uninstalled packages
           on which these packages depend/suggest/import (and so on
           recursively).  Not used if 'repos = NULL'. Can also be a
           character vector, a subset of 'c("Depends", "Imports",
           "Suggests")'.

'uninstalled' seems pretty clear to me.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

From P.Dalgaard at biostat.ku.dk  Wed Aug 20 17:06:36 2008
From: P.Dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Wed, 20 Aug 2008 17:06:36 +0200
Subject: [Rd] Outdated dependencies and install.packages()
In-Reply-To: <alpine.LFD.1.10.0808201232150.5896@gannet.stats.ox.ac.uk>
References: <48ABF23B.70707@biostat.ku.dk>
	<alpine.LFD.1.10.0808201232150.5896@gannet.stats.ox.ac.uk>
Message-ID: <48AC32FC.8040606@biostat.ku.dk>

Prof Brian Ripley wrote:
> On Wed, 20 Aug 2008, Peter Dalgaard wrote:
>
>> This looks like a buglet:
>>
>>> install.packages("lme4", depend=TRUE, lib="~/Rlibrary/")
>> --- Please select a CRAN mirror for use in this session ---
>> [...snip...]
>> ** preparing package for lazy loading
>> Error: package 'Matrix' 0.999375-4 was found, but >= 0.999375.11 is
>> required by 'lme4'
>> Execution halted
>> ERROR: lazy loading failed for package 'lme4'
>> ** Removing '/home/bs/pd/Rlibrary/lme4'
>> ** Restoring previous '/home/bs/pd/Rlibrary/lme4'
>>
>> and the DESCRIPTION file for lme 4 does have
>>
>> Depends: methods, R(? 2.7.0), Matrix(? 0.999375-11), lattice
>> <http://cran.r-project.org/web/packages/lattice/index.html>
>>
>>
>> Looks like we're either not checking the version requirement of
>> dependencies, or something is making 4 > 11... (from my reading of the
>> code, it is the former, but I could have missed something).
>
> We don't check version requirements of dependencies in
> install.packages(). That's a minefield related to having multiple
> versions of a package on a system and which gets loaded/namespace
> loaded, so you can easily have the needed version but pick up a
> different one.
>
> Depending on whether lazy-loading is in place (and various other
> issues) you may or may not need the dependencies to install the
> package.  It's also a problem that you can update dependencies to
> incompatible ones, so the versions available at installation are only
> part of the story.
>
> I don't see why the message reports .11 not -11, but that may be
> related to "package_version" classes.
>
>> We should at least document the behaviour.
>
> I am not sure where you think it should be documented and is not.
> But for install.packages():
>
> dependencies: logical indicating to also install uninstalled packages
>           on which these packages depend/suggest/import (and so on
>           recursively).  Not used if 'repos = NULL'. Can also be a
>           character vector, a subset of 'c("Depends", "Imports",
>           "Suggests")'.
>
> 'uninstalled' seems pretty clear to me.
>
It isn't. Matrix 0.999375-11 was 'uninstalled'. The above could just
mean that if you installed it, it wouldn't be installed again.

Something like "Notice that version dependencies are not checked." would
help. (Assuming that people read the help page.)

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From davison at stats.ox.ac.uk  Wed Aug 20 18:19:13 2008
From: davison at stats.ox.ac.uk (Dan Davison)
Date: Wed, 20 Aug 2008 17:19:13 +0100
Subject: [Rd] unlist on nested pairlists
Message-ID: <20080820161913.GB467@stats.ox.ac.uk>

unlist(recursive=FALSE) returns NULL elements when passed a nested
pairlist containing non-NULL data:

x <- pairlist(pairlist(1:2))
unlist(x, recursive=FALSE)
## [[1]]
## NULL

version 2.7.2 RC (2008-08-18 r46382) under linux

I'm unaware of any motivation for constructing the above data
structure, but if unlist is going to operate on it without error I
would be surprised if that is the correct answer. However as I do not
know anything about pairlists I have not submitted this to r-bugs.

I'd also appreciate any comments on the following issue:

The documentation for unlist says

    recursive: logical.  Should unlisting be applied to list components of
              'x'?

Now,

y <- list(a=1:2, b=list(b1=3:4, b2=5:6))

My expectation was that unlist(y, recursive=FALSE) would be the following length 3 list:
list(a1=1, a2=2, b=list(b1=3:4, b2=5:6))

However

str(unlist(y, recursive=FALSE))
## List of 4
## $ a1  : int 1
## $ a2  : int 2
## $ b.b1: int [1:2] 3 4
## $ b.b2: int [1:2] 5 6

I'm tempted to say that, contary to the documentation, (partial)
unlisting has in fact been applied to a list component of x (x$b): it
contributes 2 components to the result, rather than one. I say partial
because the numeric vectors in x$b have not been broken up into
separate elements in the answer. However, I imagine that this is the
intended behaviour, and that my incorrect expectation is a result of
not understanding the underlying list representations. Any explanation
would be appreciated.

Dan

-- 
http://www.stats.ox.ac.uk/~davison


From vogranovich at jumptrading.com  Wed Aug 20 19:30:38 2008
From: vogranovich at jumptrading.com (Vadim Organovich)
Date: Wed, 20 Aug 2008 12:30:38 -0500
Subject: [Rd] names of return value of median
Message-ID: <22D850BC39A25742977325ADDE208E7702669563C8@chiexchange02.w2k.jumptrading.com>

Dear R-devel,

The median() function assigns a name, "NA", to its return value if the return value is NA and the input vector has names, otherwise the names attribute is NULL. This looks strange and inconsistent with the behavior of mean().

This inconsistency becomes a problem when median() is used inside user code that relies on consistent naming convention.

Thanks,
Vadim

> foo <- c(x=as.numeric(NA), y=as.numeric(NA), z=as.numeric(NA))
> names(mean(foo))
NULL
> names(median(foo))
[1] NA

## no names in input
> foo <- rep(as.numeric(NA), 3)
> names(median(foo))
NULL


> version
               _
platform       i386-pc-mingw32
arch           i386
os             mingw32
system         i386, mingw32
status
major          2
minor          7.1
year           2008
month          06
day            23
svn rev        45970
language       R
version.string R version 2.7.1 (2008-06-23)
>

Note: This email is for the confidential use of the named addressee(s) only and may contain proprietary, confidential or privileged information. If you are not the intended recipient, you are hereby notified that any review, dissemination or copying of this email is strictly prohibited, and to please notify the sender immediately and destroy this email and any attachments.  Email transmission cannot be guaranteed to be secure or error-free.  Jump Trading, therefore, does not make any guarantees as to the completeness or accuracy of this email or any attachments.  This email is for informational purposes only and does not constitute a recommendation, offer, request or solicitation of any kind to buy, sell, subscribe, redeem or perform any type of transaction of a financial product.


From cardoso at montevideo.com.uy  Wed Aug 20 22:11:56 2008
From: cardoso at montevideo.com.uy (Jorge W. Cardoso)
Date: Wed, 20 Aug 2008 17:11:56 -0300
Subject: [Rd] R-Embedding and error messages
Message-ID: <200808201711.56216.cardoso@montevideo.com.uy>

I'm writing a C++ application using R-embedding to do some
forecast process.

I also use R_tryEval instead of R_Eval to run my R-script,
so that in case of error I know exactly in which line number
was the last error.

In particular, from time in time y get some error messages
refering an exceptional condition in the arima model.

I want to catch these error messages from de C code 
(or at least the code error number) to take some 
corrective actions.

Is there any way to do that ?

Regards,

Jorge W. Cardoso


From vogranovich at jumptrading.com  Wed Aug 20 22:26:54 2008
From: vogranovich at jumptrading.com (Vadim Organovich)
Date: Wed, 20 Aug 2008 15:26:54 -0500
Subject: [Rd] row.names in data.frame with row.names NULL
Message-ID: <22D850BC39A25742977325ADDE208E7702669563C9@chiexchange02.w2k.jumptrading.com>

Dear R-devel,

It appears that data.frame ignores row.names=NULL argument if it can guess the names from the first column. This behavior seems to contradict what the help page says, see the last sentence:

     If row names are not supplied in the call to 'data.frame', the row
     names are taken from the first component that has suitable names,
     for example a named vector or a matrix with rownames or a data
     frame. (If that component is subsequently recycled, the names are
     discarded with a warning.)  If 'row.names' was supplied as 'NULL'
     or no suitable component was found the row names are the integer
     sequence starting at one (and such row names are considered to be
     'automatic', and not preserved by 'as.matrix').

Probably it should read "AND no suitable component was found ...", but I like the promise of the original description better.

Thanks,
Vadim


> row.names(data.frame(x=c(a=1,b=2), row.names=NULL))
[1] "a" "b"
> version
               _
platform       i386-pc-mingw32
arch           i386
os             mingw32
system         i386, mingw32
status
major          2
minor          7.1
year           2008
month          06
day            23
svn rev        45970
language       R
version.string R version 2.7.1 (2008-06-23)
>

Note: This email is for the confidential use of the named addressee(s) only and may contain proprietary, confidential or privileged information. If you are not the intended recipient, you are hereby notified that any review, dissemination or copying of this email is strictly prohibited, and to please notify the sender immediately and destroy this email and any attachments.  Email transmission cannot be guaranteed to be secure or error-free.  Jump Trading, therefore, does not make any guarantees as to the completeness or accuracy of this email or any attachments.  This email is for informational purposes only and does not constitute a recommendation, offer, request or solicitation of any kind to buy, sell, subscribe, redeem or perform any type of transaction of a financial product.


From martin at martincmartin.com  Wed Aug 20 22:45:10 2008
From: martin at martincmartin.com (martin at martincmartin.com)
Date: Wed, 20 Aug 2008 22:45:10 +0200 (CEST)
Subject: [Rd] Improvements to write.arff (PR#12574)
Message-ID: <20080820204510.5853C282C787@mail.pubhealth.ku.dk>

Full_Name: Martin C. Martin
Version: 2.7.1
OS: Ubuntu
Submission from: (NULL) (75.150.115.86)


The function write.arff, in the foreign library:

- Can produce relation names with invalid characters
- Doesn't use colnames() for attribute names when writing a matrix.

Here's a better version:

write.arff <- function (x, file, eol = "\n") 
{
    if (file == "") 
        file <- stdout()
    else if (is.character(file)) {
        file <- file(file, "w")
        on.exit(close(file))
    }
    if (!inherits(file, "connection")) 
        stop("Argument 'file' must be a character string or connection.")
    if (!is.data.frame(x) && !is.matrix(x)) 
        x <- data.frame(x)
    squote <- function(s) {
        ifelse(is.na(s), s, sprintf("'%s'", gsub("(['\\])", "\\\\\\1", 
            s)))
    }
    text <- paste('@relation "', make.names(deparse(substitute(x))), '"',
sep='')
    writeLines(text, file, sep = eol)
    for (name in colnames(x)) {
        text <- paste("@attribute", name)
        if (is.data.frame(x) && is.factor(x[[name]])) {
            lev <- squote(levels(x[[name]]))
            levels(x[[name]]) <- lev
            text <- paste(text, " {", paste(lev, collapse = ","), 
                "}", sep = "")
        }
        else if (is.character(x[,name])) {
            text <- paste(text, "string")
            x[,name] <- squote((x[,name]))
        }
        else if (inherits(x[,name], "POSIXt")) {
            text <- paste(text, "date \"yyyy-MM-dd hh:mm:ss\"")
            x[,name] <- squote(format(x[,name]))
        }
        else {
            text <- paste(text, "numeric")
        }
        writeLines(text, file, sep = eol)
    }
    writeLines("@data", file)
    write.table(x, file = file, na = "?", sep = ",", eol = eol, 
        quote = FALSE, row.names = FALSE, col.names = FALSE)
}


From vmakarov at pace.edu  Thu Aug 21 05:29:24 2008
From: vmakarov at pace.edu (Vladmir Makarov)
Date: Wed, 20 Aug 2008 23:29:24 -0400
Subject: [Rd] java.lang.UnsatisfiedLinkError: The specified procedure could
	not be found error message
Message-ID: <7cac4bd80808202029sb683e75nb3efd7d6eb3d1d3f@mail.gmail.com>

Dear Members,
I have developed a program which calls clustering libraries from R.
Everything works fine on my laptop. But when I installed the program
on another computer, the program gives me the error message:

Cannot find JRI native library!
Please make sure that the JRI native library is in a directory listed
in java.library.path.
java.lang.UnsatisfiedLinkError: C:\eclipse\lib\rJava\jri.dll: The
specified procedure could not be found

I don't understand what it does not like and what procedure it is looking for.

1. PATH is set correctly to the R.dll directory in Program files:
C:\Program Files\R\R-2.6.2\bin
2. R_HOME is set to C:\Program Files\R\R-2.6.2\bin
3. java.library.path is set to C:\eclipse\lib\rJava and JRI.jar and
JRI.dll are both there, so the messge is incorrect - native library IS
in directory listed in java.library.path.
4. Finally, there is only one installation of R on that computer, same
version as on my laptop, which excludes version conflict

Any hint will be highly appreciated,
Thank you in advance,
Vlad


-- 
***********************************
 Dr. Vladimir Makarov
 Instructor, Computer Science Department
 School of Computer Science and Information Systems
 Pace University
 163 Williams Street
 New York, NY 10038
 Phone: (516) 422-4133
 eMail: vmakarov at pace.edu
 http://matrix.csis.pace.edu/~vmakarov/

***********************************

####################################################################
The information contained in this email message and any files
transmitted with it are confidential and intended solely for the use
by the individual(s) originally addressed. Please disregard and delete
this email if you are not the intended recipient.
####################################################################


From maechler at stat.math.ethz.ch  Thu Aug 21 09:39:13 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 21 Aug 2008 09:39:13 +0200
Subject: [Rd] Outdated dependencies and install.packages()
In-Reply-To: <48AC32FC.8040606@biostat.ku.dk>
References: <48ABF23B.70707@biostat.ku.dk>
	<alpine.LFD.1.10.0808201232150.5896@gannet.stats.ox.ac.uk>
	<48AC32FC.8040606@biostat.ku.dk>
Message-ID: <18605.7073.337671.44537@stat.math.ethz.ch>

>>>>> "PD" == Peter Dalgaard <P.Dalgaard at biostat.ku.dk>
>>>>>     on Wed, 20 Aug 2008 17:06:36 +0200 writes:

    PD> Prof Brian Ripley wrote:
    >> On Wed, 20 Aug 2008, Peter Dalgaard wrote:
    >> 
    >>> This looks like a buglet:
    >>> 
    >>>> install.packages("lme4", depend=TRUE, lib="~/Rlibrary/")
    >>> --- Please select a CRAN mirror for use in this session ---
    >>> [...snip...]
    >>> ** preparing package for lazy loading
    >>> Error: package 'Matrix' 0.999375-4 was found, but >= 0.999375.11 is
    >>> required by 'lme4'
    >>> Execution halted
    >>> ERROR: lazy loading failed for package 'lme4'
    >>> ** Removing '/home/bs/pd/Rlibrary/lme4'
    >>> ** Restoring previous '/home/bs/pd/Rlibrary/lme4'
    >>> 
    >>> and the DESCRIPTION file for lme 4 does have
    >>> 
    >>> Depends: methods, R(? 2.7.0), Matrix(? 0.999375-11), lattice
    >>> <http://cran.r-project.org/web/packages/lattice/index.html>
    >>> 
    >>> 
    >>> Looks like we're either not checking the version requirement of
    >>> dependencies, or something is making 4 > 11... (from my reading of the
    >>> code, it is the former, but I could have missed something).
    >> 
    >> We don't check version requirements of dependencies in
    >> install.packages(). That's a minefield related to having multiple
    >> versions of a package on a system and which gets loaded/namespace
    >> loaded, so you can easily have the needed version but pick up a
    >> different one.
    >> 
    >> Depending on whether lazy-loading is in place (and various other
    >> issues) you may or may not need the dependencies to install the
    >> package.  It's also a problem that you can update dependencies to
    >> incompatible ones, so the versions available at installation are only
    >> part of the story.
    >> 
    >> I don't see why the message reports .11 not -11, but that may be
    >> related to "package_version" classes.
    >> 
    >>> We should at least document the behaviour.
    >> 
    >> I am not sure where you think it should be documented and is not.
    >> But for install.packages():
    >> 
    >> dependencies: logical indicating to also install uninstalled packages
    >> on which these packages depend/suggest/import (and so on
    >> recursively).  Not used if 'repos = NULL'. Can also be a
    >> character vector, a subset of 'c("Depends", "Imports",
    >> "Suggests")'.
    >> 
    >> 'uninstalled' seems pretty clear to me.
    >> 
    PD> It isn't. Matrix 0.999375-11 was 'uninstalled'. The above could just
    PD> mean that if you installed it, it wouldn't be installed again.

    PD> Something like "Notice that version dependencies are not checked." would
    PD> help. (Assuming that people read the help page.)

Or even more:

"
Notice that version dependencies are not checked such that
 outdated versions of installed packages are \emph{not} updated.
 Consider using  \code{\link{update.packages}()} before 
 \code{install.packages()}.
"

Note that --- thanks to Kate Mullen's nice help.request() proposal ---
one of my top "TODOs" for R-devel is
to finish a generalization of the current
  update.packages()
function (that I have not quite finished)
which will allow to only look for updates of specified set of
packages rather than all packages in a given lib.loc
{something that should *not* be triggered by a help.request()
 for a user (as ours) who has ~ 2000 R packages installed}.

Martin


From maechler at stat.math.ethz.ch  Thu Aug 21 10:05:01 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 21 Aug 2008 10:05:01 +0200
Subject: [Rd] names of return value of median
In-Reply-To: <22D850BC39A25742977325ADDE208E7702669563C8@chiexchange02.w2k.jumptrading.com>
References: <22D850BC39A25742977325ADDE208E7702669563C8@chiexchange02.w2k.jumptrading.com>
Message-ID: <18605.8621.48809.920595@stat.math.ethz.ch>

>>>>> "VO" == Vadim Organovich <vogranovich at jumptrading.com>
>>>>>     on Wed, 20 Aug 2008 12:30:38 -0500 writes:

    VO> Dear R-devel,
    VO> The median() function assigns a name, "NA", to its return value if the return value is NA and the input vector has names, otherwise the names attribute is NULL. This looks strange and inconsistent with the behavior of mean().

    VO> This inconsistency becomes a problem when median() is used inside user code that relies on consistent naming convention.

    VO> Thanks,
    VO> Vadim

    >> foo <- c(x=as.numeric(NA), y=as.numeric(NA), z=as.numeric(NA))
    >> names(mean(foo))
    VO> NULL
    >> names(median(foo))
    VO> [1] NA

    VO> ## no names in input
    >> foo <- rep(as.numeric(NA), 3)
    >> names(median(foo))
    VO> NULL

I agree that this is a slight blemish.
Note that it comes from this construct :

  > foo <- c(x=NA)
  > foo[FALSE]
  named numeric(0)
  > foo[FALSE][NA]
  <NA> 
    NA 

which seems "logical" if you ponder about it.

However, for the case of the median(), we do not return names
anyway, even in the case it might make sense,
e.g. I might expect

    median( c(a = 1, b=2, d=100))

to return  c(b = 2)
but it really simply returns (unnamed) 2.

So, I'm going to change median() to return unnamed also in these
border line cases.

Martin


From Waclaw.Marcin.Kusnierczyk at idi.ntnu.no  Thu Aug 21 10:18:12 2008
From: Waclaw.Marcin.Kusnierczyk at idi.ntnu.no (Wacek Kusnierczyk)
Date: Thu, 21 Aug 2008 10:18:12 +0200
Subject: [Rd] strsplit and the empty string
In-Reply-To: <c0177e5a0806180759m75c85c07pd80a5630190e0d7d@mail.gmail.com>
References: <48590370.9040702@idi.ntnu.no>
	<c0177e5a0806180759m75c85c07pd80a5630190e0d7d@mail.gmail.com>
Message-ID: <48AD24C4.5020608@idi.ntnu.no>

Christian Brechb?hler wrote:
>
> I checked Perl, and it does exactly the same:
>   print join "==", split / /, " hello dolly "
> ==hello==dolly
> (that's 3 elements: "", "hello",  and "dolly").
>   
try

perl -e 'print join "==", split " ", " hello dolly "'

;)
vQ


From ripley at stats.ox.ac.uk  Thu Aug 21 10:36:48 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 21 Aug 2008 09:36:48 +0100 (BST)
Subject: [Rd] Improvements to write.arff (PR#12574)
In-Reply-To: <20080820204510.5853C282C787@mail.pubhealth.ku.dk>
References: <20080820204510.5853C282C787@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808210933580.24006@gannet.stats.ox.ac.uk>

Thank you, but please see the R FAQ and report facts.  We need examples of 
what goes wrong, and we will also need to document the fixes (e.g. names 
get mangled).

We do prefer patches against the actual sources (lots of comments have 
been missed in your version): the current source tarball for foreign is on 
CRAN.

On Wed, 20 Aug 2008, martin at martincmartin.com wrote:

> Full_Name: Martin C. Martin
> Version: 2.7.1
> OS: Ubuntu
> Submission from: (NULL) (75.150.115.86)
>
>
> The function write.arff, in the foreign library:
>
> - Can produce relation names with invalid characters
> - Doesn't use colnames() for attribute names when writing a matrix.
>
> Here's a better version:
>
> write.arff <- function (x, file, eol = "\n")
> {
>    if (file == "")
>        file <- stdout()
>    else if (is.character(file)) {
>        file <- file(file, "w")
>        on.exit(close(file))
>    }
>    if (!inherits(file, "connection"))
>        stop("Argument 'file' must be a character string or connection.")
>    if (!is.data.frame(x) && !is.matrix(x))
>        x <- data.frame(x)
>    squote <- function(s) {
>        ifelse(is.na(s), s, sprintf("'%s'", gsub("(['\\])", "\\\\\\1",
>            s)))
>    }
>    text <- paste('@relation "', make.names(deparse(substitute(x))), '"',
> sep='')
>    writeLines(text, file, sep = eol)
>    for (name in colnames(x)) {
>        text <- paste("@attribute", name)
>        if (is.data.frame(x) && is.factor(x[[name]])) {
>            lev <- squote(levels(x[[name]]))
>            levels(x[[name]]) <- lev
>            text <- paste(text, " {", paste(lev, collapse = ","),
>                "}", sep = "")
>        }
>        else if (is.character(x[,name])) {
>            text <- paste(text, "string")
>            x[,name] <- squote((x[,name]))
>        }
>        else if (inherits(x[,name], "POSIXt")) {
>            text <- paste(text, "date \"yyyy-MM-dd hh:mm:ss\"")
>            x[,name] <- squote(format(x[,name]))
>        }
>        else {
>            text <- paste(text, "numeric")
>        }
>        writeLines(text, file, sep = eol)
>    }
>    writeLines("@data", file)
>    write.table(x, file = file, na = "?", sep = ",", eol = eol,
>        quote = FALSE, row.names = FALSE, col.names = FALSE)
> }
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From P.Dalgaard at biostat.ku.dk  Thu Aug 21 10:53:58 2008
From: P.Dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Thu, 21 Aug 2008 10:53:58 +0200
Subject: [Rd] Outdated dependencies and install.packages()
In-Reply-To: <18605.7073.337671.44537@stat.math.ethz.ch>
References: <48ABF23B.70707@biostat.ku.dk>	<alpine.LFD.1.10.0808201232150.5896@gannet.stats.ox.ac.uk>	<48AC32FC.8040606@biostat.ku.dk>
	<18605.7073.337671.44537@stat.math.ethz.ch>
Message-ID: <48AD2D26.7040306@biostat.ku.dk>

Martin Maechler wrote:
>>>>>> "PD" == Peter Dalgaard <P.Dalgaard at biostat.ku.dk>
>>>>>>     on Wed, 20 Aug 2008 17:06:36 +0200 writes:
>>>>>>             
>
>     PD> Prof Brian Ripley wrote:
>     >> On Wed, 20 Aug 2008, Peter Dalgaard wrote:
>     >> 
>     >>> This looks like a buglet:
>     >>> 
>     >>>> install.packages("lme4", depend=TRUE, lib="~/Rlibrary/")
>     >>> --- Please select a CRAN mirror for use in this session ---
>     >>> [...snip...]
>     >>> ** preparing package for lazy loading
>     >>> Error: package 'Matrix' 0.999375-4 was found, but >= 0.999375.11 is
>     >>> required by 'lme4'
>     >>> Execution halted
>     >>> ERROR: lazy loading failed for package 'lme4'
>     >>> ** Removing '/home/bs/pd/Rlibrary/lme4'
>     >>> ** Restoring previous '/home/bs/pd/Rlibrary/lme4'
>     >>> 
>     >>> and the DESCRIPTION file for lme 4 does have
>     >>> 
>     >>> Depends: methods, R(? 2.7.0), Matrix(? 0.999375-11), lattice
>     >>> <http://cran.r-project.org/web/packages/lattice/index.html>
>     >>> 
>     >>> 
>     >>> Looks like we're either not checking the version requirement of
>     >>> dependencies, or something is making 4 > 11... (from my reading of the
>     >>> code, it is the former, but I could have missed something).
>     >> 
>     >> We don't check version requirements of dependencies in
>     >> install.packages(). That's a minefield related to having multiple
>     >> versions of a package on a system and which gets loaded/namespace
>     >> loaded, so you can easily have the needed version but pick up a
>     >> different one.
>     >> 
>     >> Depending on whether lazy-loading is in place (and various other
>     >> issues) you may or may not need the dependencies to install the
>     >> package.  It's also a problem that you can update dependencies to
>     >> incompatible ones, so the versions available at installation are only
>     >> part of the story.
>     >> 
>     >> I don't see why the message reports .11 not -11, but that may be
>     >> related to "package_version" classes.
>     >> 
>     >>> We should at least document the behaviour.
>     >> 
>     >> I am not sure where you think it should be documented and is not.
>     >> But for install.packages():
>     >> 
>     >> dependencies: logical indicating to also install uninstalled packages
>     >> on which these packages depend/suggest/import (and so on
>     >> recursively).  Not used if 'repos = NULL'. Can also be a
>     >> character vector, a subset of 'c("Depends", "Imports",
>     >> "Suggests")'.
>     >> 
>     >> 'uninstalled' seems pretty clear to me.
>     >> 
>     PD> It isn't. Matrix 0.999375-11 was 'uninstalled'. The above could just
>     PD> mean that if you installed it, it wouldn't be installed again.
>
>     PD> Something like "Notice that version dependencies are not checked." would
>     PD> help. (Assuming that people read the help page.)
>
> Or even more:
>
> "
> Notice that version dependencies are not checked such that
>  outdated versions of installed packages are \emph{not} updated.
>  Consider using  \code{\link{update.packages}()} before 
>  \code{install.packages()}.
> "
>
> Note that --- thanks to Kate Mullen's nice help.request() proposal ---
> one of my top "TODOs" for R-devel is
> to finish a generalization of the current
>   update.packages()
> function (that I have not quite finished)
> which will allow to only look for updates of specified set of
> packages rather than all packages in a given lib.loc
> {something that should *not* be triggered by a help.request()
>  for a user (as ours) who has ~ 2000 R packages installed}.
>
> Martin
>   
That's essentially what happened to me (not with 2000 packages, though).
I was looking into the lme4/aod issue - reinstall lme4 - Matrix out of
date - update.packages() - wait for an hour or so for gtk2 and friends
to be updated on my laptop...

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From ray at mcs.vuw.ac.nz  Thu Aug 21 11:28:52 2008
From: ray at mcs.vuw.ac.nz (Ray Brownrigg)
Date: Thu, 21 Aug 2008 21:28:52 +1200
Subject: [Rd] RNGkind() state (PR#12567)
In-Reply-To: <alpine.LFD.1.10.0808200931500.31733@gannet.stats.ox.ac.uk>
References: <20080819051509.871CA282C768@mail.pubhealth.ku.dk>
	<alpine.LFD.1.10.0808200931500.31733@gannet.stats.ox.ac.uk>
Message-ID: <48AD3554.6030802@mcs.vuw.ac.nz>

Prof Brian Ripley wrote:
> On Tue, 19 Aug 2008, Ray.Brownrigg at mcs.vuw.ac.nz wrote:
> 
>> I sent this to R-devel early last month, but have received no 
>> response, so I guess it
>> really is a bug.
> 
> Or people were busy: I was away teaching a course, for example.
> 
>> This looks like a bug to me, and is a bit hard to describe, but easy 
>> to reproduce.  
>> Basically, if RNGkind is saved as something other than the default, 
>> and if the first
>> operation in a session is a set.seed(), the default is reverted to. 
>>  Reproduce by:
> 
> A better description would certainly have helped!  You can look at 
> .Random.seed to see what is happening.
> 
> I think what you are observing is that if .Random.seed has not used in 
> the session, any restored value is not used to set the default kind in 
> set.seed.  I don't think that is unreasonable (in particular as you can 
> set the kind in set.seed() and I take the notes on ?RNG to suggest 
> that), but would be easy to change/document.
> 
My interpretation of what looking at .Random.seed shows is that set.seed() ignores the RNG 
{\bf state} that is contained in the restored .Random.seed (until after the first random 
number has been generated).  ?RNG starts with ".Random.seed is an integer vector, 
containing the random number generator (RNG) state for random number generation in R. It 
can be saved and restored, ...".

I feel it is a bit of a stretch to claim that "If it is NULL, *return* the currently used 
RNG." suggests "if it is NULL, and .Random.seed has not been used in the session, ignore 
the information contained in .Random.seed and *set* the default RNG".

However, knowing what does happen, I acknowledge that the documentation of set.seed() is 
not inconsistent, but I can't accept that the description of .Random.seed would lead one 
to anticipate what does happen.

Regards,
Ray Brownrigg
>>
>> cafe-rozo>  R --vanilla
>>
>> R version 2.7.1 (2008-06-23)
>> Copyright (C) 2008 The R Foundation for Statistical Computing
>> ISBN 3-900051-07-0
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>>> sessionInfo()
>> R version 2.7.1 (2008-06-23)
>> i386--netbsdelf
>>
>> locale:
>> C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>> set.seed(1); runif(1)         # check the default
>> [1] 0.2655087
>>> RNGkind("Mar")
>>> RNGkind()
>> [1] "Marsaglia-Multicarry" "Inversion"
>>> set.seed(1); runif(1)         # now check again
>> [1] 0.006153224
>>> set.seed(1)                   # save seed and RNGkind
>>> q("yes")
>> cafe-rozo>  R
>>
>> R version 2.7.1 (2008-06-23)
>> : etc
>> [Previously saved workspace restored]
>>
>>> runif(1)              # with a saved seed, Marsaglia-Multicarry is used
>> [1] 0.006153224
>>> set.seed(1); runif(1)
>> [1] 0.006153224
>>> q()
>> Save workspace image? [y/n/c]: n
>> cafe-rozo>
>>
>> R version 2.7.1 (2008-06-23)
>> : etc
>> [Previously saved workspace restored]
>>
>>> set.seed(1); runif(1)         # saved RNGkind is ignored ...
>> [1] 0.2655087
>>> RNGkind()             # and overridden ...
>> [1] "Mersenne-Twister" "Inversion"
>>> q("no")
>> cafe-rozo>  R
>>
>> R version 2.7.1 (2008-06-23)
>> : etc
>> [Previously saved workspace restored]
>>
>>> RNGkind()             # and wrongly reported!
>> [1] "Mersenne-Twister" "Inversion"
>>> runif(1)                      # Note this is actually using 
>>> Marsaglia-Multicarry
>> [1] 0.006153224
>>>
>>
>> Ray Brownrigg
>> Mathematics, Statistics and Computer Science
>> Victoria University of Wellington
>> Wellington, NZ
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From maechler at stat.math.ethz.ch  Thu Aug 21 19:19:38 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 21 Aug 2008 19:19:38 +0200
Subject: [Rd] Outdated dependencies and install.packages()
In-Reply-To: <18605.7073.337671.44537@stat.math.ethz.ch>
References: <48ABF23B.70707@biostat.ku.dk>
	<alpine.LFD.1.10.0808201232150.5896@gannet.stats.ox.ac.uk>
	<48AC32FC.8040606@biostat.ku.dk>
	<18605.7073.337671.44537@stat.math.ethz.ch>
Message-ID: <18605.41898.594764.501370@stat.math.ethz.ch>

>>>>> "MM" == Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Thu, 21 Aug 2008 09:39:13 +0200 writes:

[...............]

    MM> Note that --- thanks to Kate Mullen's nice help.request() proposal ---

oops!!   s/Kate Mullen/Heather Turner/

both very fine ladies, both in the program committee of
useR!2008, .... but I do need to apologize here :  
S.O.R.R.Y...

Martin

    MM> one of my top "TODOs" for R-devel is
    MM> to finish a generalization of the current
    MM> update.packages()
    MM> function (that I have not quite finished)
    MM> which will allow to only look for updates of specified set of
    MM> packages rather than all packages in a given lib.loc
    MM> {something that should *not* be triggered by a help.request()
    MM> for a user (as ours) who has ~ 2000 R packages installed}.


From maechler at stat.math.ethz.ch  Thu Aug 21 19:41:51 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 21 Aug 2008 19:41:51 +0200
Subject: [Rd] order(x,y, decreasing = c(FALSE, TRUE)) - how / elegantly?
Message-ID: <18605.43231.893490.160412@stat.math.ethz.ch>

I've found the need to compute a version of  order(x,y)
where I want the sort order 
for *increasing* x  and *decresing* y ...

something we could imagine could be provided in the future as

  order(x,y, decreasing = c(FALSE, TRUE))

i.e., using a 'vectorized' decreasing argument.
{No, I'm not volunteering right now!}

I've found the following R-level solution and
like to quiz you for more elegant / faster solutions 
{but I am not really interested in replacing  
 order(x)  by  sort.list(x, method="quick") and similar things;
 one thing to consider *is* using an   'na.last = . ' correctly,
 and I haven't had the need for that and so not bothered to "do it"}

## Here's a script with my version and a small example 
## (if you want speed comparisons, use larger examples) :

orderXuYd <- function(x,y)
{
    ## Purpose: order(x,y): x up, y down
    ## ----------------------------------------------------------------------
    ## Arguments: x,y:  vectors of the same length
    ## ----------------------------------------------------------------------
    ## Author: Martin Maechler, Date: 21 Aug 2008

    ix <- order(x) 
    xx <- x[ix]
    iy <- tapply(y[ix], xx, order, decreasing = TRUE)
    ## Note: 'SIMPLIFY', 'USE.NAMES', 'use.names' are just for efficiency:
    unlist(mapply(`[`, split(ix,xx), iy, 
                  SIMPLIFY = FALSE, USE.NAMES = FALSE),
           use.names = FALSE)
}

x <- c(1, 1, 2, 0, 0, 2, 1, 2, 2, 0, 2)
y <- c(27, 21, 45, 11, 13, 58, 35, 74, 95, 16, 122)
ii <- orderXuYd(x,y)
## yes, this is it :
cbind(ii=ii, x=x[ii],y=y[ii])

------------------

Yes, the real reason this goes to R-devel is that it might be
neat to provide this (well, its generalization) via an enhanced
order() function.

Martin Maechler, ETH Zurich

PS: I will be basically offline all day tomorrow, so don't
    expect my reactions to your ideas quickly


From maechler at stat.math.ethz.ch  Thu Aug 21 20:12:30 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 21 Aug 2008 20:12:30 +0200
Subject: [Rd] order(x, y, decreasing = c(FALSE, TRUE)) - how / elegantly?
In-Reply-To: <18605.43231.893490.160412@stat.math.ethz.ch>
References: <18605.43231.893490.160412@stat.math.ethz.ch>
Message-ID: <18605.45070.357474.450789@cmath-5.math.ethz.ch>

Duh!!  

The simplest, probably fastest and most elegant solution of
course is

       order(x, -y)

......  if only I would have biked home earlier, today,...
	I'm sure I would have save much of my time....

Martin

>>>>> "MM" == Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Thu, 21 Aug 2008 19:41:51 +0200 writes:

    MM> I've found the need to compute a version of order(x,y)
    MM> where I want the sort order for *increasing* x and
    MM> *decresing* y ...

    MM> something we could imagine could be provided in the
    MM> future as

    MM>   order(x,y, decreasing = c(FALSE, TRUE))

    MM> i.e., using a 'vectorized' decreasing argument.  {No,
    MM> I'm not volunteering right now!}

    MM> I've found the following R-level solution and like to
    MM> quiz you for more elegant / faster solutions {but I am
    MM> not really interested in replacing order(x) by
    MM> sort.list(x, method="quick") and similar things; one
    MM> thing to consider *is* using an 'na.last = . '
    MM> correctly, and I haven't had the need for that and so
    MM> not bothered to "do it"}

    MM> ## Here's a script with my version and a small example
    MM> ## (if you want speed comparisons, use larger examples)
    MM> :

    MM> orderXuYd <- function(x,y) { ## Purpose: order(x,y): x
    MM> up, y down ##
    MM> ----------------------------------------------------------------------
    MM> ## Arguments: x,y: vectors of the same length ##
    MM> ----------------------------------------------------------------------
    MM> ## Author: Martin Maechler, Date: 21 Aug 2008

    MM>     ix <- order(x) xx <- x[ix] iy <- tapply(y[ix], xx,
    MM> order, decreasing = TRUE) ## Note: 'SIMPLIFY',
    MM> 'USE.NAMES', 'use.names' are just for efficiency:
    MM> unlist(mapply(`[`, split(ix,xx), iy, SIMPLIFY = FALSE,
    MM> USE.NAMES = FALSE), use.names = FALSE) }

    MM> x <- c(1, 1, 2, 0, 0, 2, 1, 2, 2, 0, 2) y <- c(27, 21,
    MM> 45, 11, 13, 58, 35, 74, 95, 16, 122) ii <-
    MM> orderXuYd(x,y) ## yes, this is it : cbind(ii=ii,
    MM> x=x[ii],y=y[ii])

    MM> ------------------

    MM> Yes, the real reason this goes to R-devel is that it
    MM> might be neat to provide this (well, its generalization)
    MM> via an enhanced order() function.

    MM> Martin Maechler, ETH Zurich

    MM> PS: I will be basically offline all day tomorrow, so
    MM> don't expect my reactions to your ideas quickly

    MM> ______________________________________________
    MM> R-devel at r-project.org mailing list
    MM> https://stat.ethz.ch/mailman/listinfo/r-devel


From ripley at stats.ox.ac.uk  Thu Aug 21 20:27:51 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 21 Aug 2008 19:27:51 +0100 (BST)
Subject: [Rd] order(x, y, decreasing = c(FALSE, TRUE)) - how / elegantly?
In-Reply-To: <18605.45070.357474.450789@cmath-5.math.ethz.ch>
References: <18605.43231.893490.160412@stat.math.ethz.ch>
	<18605.45070.357474.450789@cmath-5.math.ethz.ch>
Message-ID: <alpine.LFD.1.10.0808211925570.17609@gannet.stats.ox.ac.uk>

On Thu, 21 Aug 2008, Martin Maechler wrote:

> Duh!!
>
> The simplest, probably fastest and most elegant solution of
> course is
>
>       order(x, -y)

Only for numeric x.  As Martin knows, I am working on ideas for 'generic' 
order, and one is a xtfrm(z) function that creates an integer vector that 
sorts the same as z.  Then -xtrfm(z) would work.

>
> ......  if only I would have biked home earlier, today,...
> 	I'm sure I would have save much of my time....
>
> Martin
>
>>>>>> "MM" == Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>>     on Thu, 21 Aug 2008 19:41:51 +0200 writes:
>
>    MM> I've found the need to compute a version of order(x,y)
>    MM> where I want the sort order for *increasing* x and
>    MM> *decresing* y ...
>
>    MM> something we could imagine could be provided in the
>    MM> future as
>
>    MM>   order(x,y, decreasing = c(FALSE, TRUE))
>
>    MM> i.e., using a 'vectorized' decreasing argument.  {No,
>    MM> I'm not volunteering right now!}
>
>    MM> I've found the following R-level solution and like to
>    MM> quiz you for more elegant / faster solutions {but I am
>    MM> not really interested in replacing order(x) by
>    MM> sort.list(x, method="quick") and similar things; one
>    MM> thing to consider *is* using an 'na.last = . '
>    MM> correctly, and I haven't had the need for that and so
>    MM> not bothered to "do it"}
>
>    MM> ## Here's a script with my version and a small example
>    MM> ## (if you want speed comparisons, use larger examples)
>    MM> :
>
>    MM> orderXuYd <- function(x,y) { ## Purpose: order(x,y): x
>    MM> up, y down ##
>    MM> ----------------------------------------------------------------------
>    MM> ## Arguments: x,y: vectors of the same length ##
>    MM> ----------------------------------------------------------------------
>    MM> ## Author: Martin Maechler, Date: 21 Aug 2008
>
>    MM>     ix <- order(x) xx <- x[ix] iy <- tapply(y[ix], xx,
>    MM> order, decreasing = TRUE) ## Note: 'SIMPLIFY',
>    MM> 'USE.NAMES', 'use.names' are just for efficiency:
>    MM> unlist(mapply(`[`, split(ix,xx), iy, SIMPLIFY = FALSE,
>    MM> USE.NAMES = FALSE), use.names = FALSE) }
>
>    MM> x <- c(1, 1, 2, 0, 0, 2, 1, 2, 2, 0, 2) y <- c(27, 21,
>    MM> 45, 11, 13, 58, 35, 74, 95, 16, 122) ii <-
>    MM> orderXuYd(x,y) ## yes, this is it : cbind(ii=ii,
>    MM> x=x[ii],y=y[ii])
>
>    MM> ------------------
>
>    MM> Yes, the real reason this goes to R-devel is that it
>    MM> might be neat to provide this (well, its generalization)
>    MM> via an enhanced order() function.
>
>    MM> Martin Maechler, ETH Zurich
>
>    MM> PS: I will be basically offline all day tomorrow, so
>    MM> don't expect my reactions to your ideas quickly
>
>    MM> ______________________________________________
>    MM> R-devel at r-project.org mailing list
>    MM> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From pgilbert at bank-banque-canada.ca  Thu Aug 21 21:33:15 2008
From: pgilbert at bank-banque-canada.ca (Paul Gilbert)
Date: Thu, 21 Aug 2008 15:33:15 -0400
Subject: [Rd] rc  note, etc
Message-ID: <48ADC2FB.1010504@bank-banque-canada.ca>

Are the messages below to be expected from make check-all ?

using the rc today, Aug 21, on
Red Hat Enterprise Linux AS release 4 (Nahant Update 4)
Kernel 2.6.9-42.0.8.ELsmp on an x86_64

Paul
________
....
checking package 'utils'
....
* checking R code for possible problems ... NOTE
install.packages: no visible global function definition for
   ?.install.winbinary?
install.packages: no visible global function definition for
   ?.install.macbinary?

....
checking package 'stats'
....
* checking R code for possible problems ... NOTE
glm.fit: no visible binding for global variable ???n???
* checking Rd files ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking for portable use of $BLAS_LIBS ... OK
* checking tests ...
make[3]: Entering directory 
`/home/mfa/gilp/toolchain/R/src/R-rc/tests/stats.Rcheck/tests'
   Running 'nafns.R'
   Running 'nls.R'
   Comparing 'nls.Rout' to 'nls.Rout.save' ...134c134
< Achieved convergence tolerance: 2.75e-06
---
 > Achieved convergence tolerance: 2.74e-06
145c145
<   3: 0.00060639084: 0.00517051 0.999153
---
 >   3: 0.00060639084: 0.00517052 0.999153
214c214
< Achieved convergence tolerance: 1.04e-07
---
 > Achieved convergence tolerance: 1.34e-07
249c249
< Achieved convergence tolerance: 1.73e-07
---
 > Achieved convergence tolerance: 1.29e-07
288c288
< Achieved convergence tolerance: 3.73e-08
---
 > Achieved convergence tolerance: 8.48e-09
382c382
< Achieved convergence tolerance: 2.80e-07
---
 > Achieved convergence tolerance: 2.81e-07
430c430
< Achieved convergence tolerance: 3.16e-06
---
 > Achieved convergence tolerance: 3.43e-06
487c487
< 11  3.40458   22.42470    1.38476
---
 > 11  3.40458   22.42471    1.38476
497,498c497,498
< 7  3.89865   23.13401    1.79455
< 8  4.52605  166.09148    2.20381
---
 > 7  3.89865   23.13399    1.79455
 > 8  4.52605  166.09149    2.20381
611c611
< Achieved convergence tolerance: 7.17e-07
---
 > Achieved convergence tolerance: 7.45e-07
647c647
< Achieved convergence tolerance: 2.08e-06
---
 > Achieved convergence tolerance: 1.98e-06
  OK

....
checking package 'methods'
....
* checking R code for possible problems ... NOTE
browseAll: no visible binding for global variable ?.BrowserStack?
..dataPartReplace2: no visible binding for global variable ?THISCLASS?
...First.lib: no visible binding for global variable ?.possibleExtends?
...First.lib: no visible binding for global variable ?.makeGeneric?
...First.lib: no visible binding for global variable
   ?.newClassRepresentation?
...First.lib: no visible binding for global variable
   ?..mergeClassDefSlots?
..makeBasicFuns: no visible global function definition for
   ?.addBasicGeneric?
..makeBasicFuns: no visible binding for global variable
   ?.addBasicGeneric?
..oldTestFun: no visible binding for global variable ?CLASS?
selectMethod: no visible binding for global variable ?.SelectMethodOn?
....
checking package 'grid'
....
* checking R code for possible problems ... NOTE
wrap.down: no visible binding for global variable ?path?
wrap.pop: no visible binding for global variable ?n?
wrap.up: no visible binding for global variable ?n?
wrap.viewport: no visible binding for global variable ?vp?
....
checking bundle 'VR'
....
** checking R code for possible problems ... NOTE
glmmPQL: no visible binding for global variable ?wts?
negative.binomial : variance: no visible binding for global variable
   ?.Theta?
negative.binomial : dev.resids: no visible binding for global variable
   ?.Theta?
negative.binomial : aic: no visible binding for global variable
   ?.Theta?
neg.bin : variance: no visible binding for global variable ?.Theta?
neg.bin : dev.resids: no visible binding for global variable ?.Theta?
neg.bin : aic: no visible binding for global variable ?.Theta?
** checking Rd files ... OK

====================================================================================

La version fran?aise suit le texte anglais.

------------------------------------------------------------------------------------

This email may contain privileged and/or confidential information, and the Bank of
Canada does not waive any related rights. Any distribution, use, or copying of this
email or the information it contains by other than the intended recipient is
unauthorized. If you received this email in error please delete it immediately from
your system and notify the sender promptly by email that you have done so. 

------------------------------------------------------------------------------------

Le pr?sent courriel peut contenir de l'information privil?gi?e ou confidentielle.
La Banque du Canada ne renonce pas aux droits qui s'y rapportent. Toute diffusion,
utilisation ou copie de ce courriel ou des renseignements qu'il contient par une
personne autre que le ou les destinataires d?sign?s est interdite. Si vous recevez
ce courriel par erreur, veuillez le supprimer imm?diatement et envoyer sans d?lai ?
l'exp?diteur un message ?lectronique pour l'aviser que vous avez ?limin? de votre
ordinateur toute copie du courriel re?u.

From p.dalgaard at biostat.ku.dk  Thu Aug 21 22:40:44 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Thu, 21 Aug 2008 22:40:44 +0200
Subject: [Rd] rc  note, etc
In-Reply-To: <48ADC2FB.1010504@bank-banque-canada.ca>
References: <48ADC2FB.1010504@bank-banque-canada.ca>
Message-ID: <48ADD2CC.2080803@biostat.ku.dk>

Paul Gilbert wrote:
> Are the messages below to be expected from make check-all ?
Yes. They are just that, notes. They occur when a function uses a global 
variable which is not obviously existent. However, (a) it might be 
assumed to exist whenever the function is actually used and (b) the 
function might not actually be using it. As an example of the latter, 
look at the grid case:

 > grid:::wrap.down
function (x)
{
    recordGrob(downViewport(path), list(path = x))
}

The complaint is that "path" is seemingly used without being defined. 
However, digging one level further, we have

 > grid:::recordGrob
function (expr, list, name = NULL, gp = NULL, vp = NULL)
{
    grob(expr = substitute(expr), list = list, name = name, gp = gp,
        vp = vp, cl = "recordedGrob")
}

and the substitute() contruct shows that  "downViewport(path)"  is 
getting treated as an unevaluated expression and might not be evaluated 
in the global environment at all. Put otherwise, the programmer has 
outsmarted the code checker... (In some cases, the code predates the 
code checker, and although it might be rewritten to avoid the message, 
noone has felt compelled to do so.)

I'm somewhat puzzled by the strange characters in the glm.fit message, 
though.

    -pd

>
> using the rc today, Aug 21, on
> Red Hat Enterprise Linux AS release 4 (Nahant Update 4)
> Kernel 2.6.9-42.0.8.ELsmp on an x86_64
>
> Paul
> ________
> ....
> checking package 'utils'
> ....
> * checking R code for possible problems ... NOTE
> install.packages: no visible global function definition for
>   ?.install.winbinary?
> install.packages: no visible   global function definition for
>   ?.install.macbinary?
>
> ....
> checking package 'stats'
> ....
> * checking R code for possible problems ... NOTE
> glm.fit: no visible binding for global variable ???n???
> * checking Rd files ... OK
> * checking Rd cross-references ... OK
> * checking for missing documentation entries ... OK
> * checking for code/documentation mismatches ... OK
> * checking Rd \usage sections ... OK
> * checking for portable use of $BLAS_LIBS ... OK
> * checking tests ...
> make[3]: Entering directory 
> `/home/mfa/gilp/toolchain/R/src/R-rc/tests/stats.Rcheck/tests'
>   Running 'nafns.R'
>   Running 'nls.R'
>   Comparing 'nls.Rout' to 'nls.Rout.save' ...134c134
> < Achieved convergence tolerance: 2.75e-06
> ---
> > Achieved convergence tolerance: 2.74e-06
> 145c145
> <   3: 0.00060639084: 0.00517051 0.999153
> ---
> >   3: 0.00060639084: 0.00517052 0.999153
> 214c214
> < Achieved convergence tolerance: 1.04e-07
> ---
> > Achieved convergence tolerance: 1.34e-07
> 249c249
> < Achieved convergence tolerance: 1.73e-07
> ---
> > Achieved convergence tolerance: 1.29e-07
> 288c288
> < Achieved convergence tolerance: 3.73e-08
> ---
> > Achieved convergence tolerance: 8.48e-09
> 382c382
> < Achieved convergence tolerance: 2.80e-07
> ---
> > Achieved convergence tolerance: 2.81e-07
> 430c430
> < Achieved convergence tolerance: 3.16e-06
> ---
> > Achieved convergence tolerance: 3.43e-06
> 487c487
> < 11  3.40458   22.42470    1.38476
> ---
> > 11  3.40458   22.42471    1.38476
> 497,498c497,498
> < 7  3.89865   23.13401    1.79455
> < 8  4.52605  166.09148    2.20381
> ---
> > 7  3.89865   23.13399    1.79455
> > 8  4.52605  166.09149    2.20381
> 611c611
> < Achieved convergence tolerance: 7.17e-07
> ---
> > Achieved convergence tolerance: 7.45e-07
> 647c647
> < Achieved convergence tolerance: 2.08e-06
> ---
> > Achieved convergence tolerance: 1.98e-06
>  OK
>
> ....
> checking package 'methods'
> ....
> * checking R code for possible problems ... NOTE
> browseAll: no visible binding for global variable ?.BrowserStack?
> ..dataPartReplace2: no visible binding for global variable ?THISCLASS?
> ...First.lib: no visible binding for global variable ?.possibleExtends?
> ...First.lib: no visible binding for global variable ?.makeGeneric?
> ...First.lib: no visible binding for global variable
>   ?.newClassRepresentation?
> ...First.lib: no visible binding for global variable
>   ?..mergeClassDefSlots?
> ..makeBasicFuns: no visible global function definition for
>   ?.addBasicGeneric?
> ..makeBasicFuns: no visible binding for global variable
>   ?.addBasicGeneric?
> ..oldTestFun: no visible binding for global variable ?CLASS?
> selectMethod: no visible binding for global variable ?.SelectMethodOn?
> ....
> checking package 'grid'
> ....
> * checking R code for possible problems ... NOTE
> wrap.down: no visible binding for global variable ?path?
> wrap.pop: no visible binding for global variable ?n?
> wrap.up: no visible binding for global variable ?n?
> wrap.viewport: no visible binding for global variable ?vp?
> ....
> checking bundle 'VR'
> ....
> ** checking R code for possible problems ... NOTE
> glmmPQL: no visible binding for global variable ?wts?
> negative.binomial : variance: no visible binding for global variable
>   ?.Theta?
> negative.binomial : dev.resids: no visible binding for global variable
>   ?.Theta?
> negative.binomial : aic: no visible binding for global variable
>   ?.Theta?
> neg.bin : variance: no visible binding for global variable ?.Theta?
> neg.bin : dev.resids: no visible binding for global variable ?.Theta?
> neg.bin : aic: no visible binding for global variable ?.Theta?
> ** checking Rd files ... OK
>
> ==================================================================================== 
>
>
> La version fran?aise suit le texte anglais.
>
> ------------------------------------------------------------------------------------ 
>
>
> This email may contain privileged and/or confidential information, and 
> the Bank of
> Canada does not waive any related rights. Any distribution, use, or 
> copying of this
> email or the information it contains by other than the intended 
> recipient is
> unauthorized. If you received this email in error please delete it 
> immediately from
> your system and notify the sender promptly by email that you have done 
> so.
> ------------------------------------------------------------------------------------ 
>
>
> Le pr?sent courriel peut contenir de l'information privil?gi?e ou 
> confidentielle.
> La Banque du Canada ne renonce pas aux droits qui s'y rapportent. 
> Toute diffusion,
> utilisation ou copie de ce courriel ou des renseignements qu'il 
> contient par une
> personne autre que le ou les destinataires d?sign?s est interdite. Si 
> vous recevez
> ce courriel par erreur, veuillez le supprimer imm?diatement et envoyer 
> sans d?lai ?
> l'exp?diteur un message ?lectronique pour l'aviser que vous avez 
> ?limin? de votre
> ordinateur toute copie du courriel re?u.
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From ripley at stats.ox.ac.uk  Fri Aug 22 07:49:56 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 22 Aug 2008 06:49:56 +0100 (BST)
Subject: [Rd] rc  note, etc
In-Reply-To: <48ADD2CC.2080803@biostat.ku.dk>
References: <48ADC2FB.1010504@bank-banque-canada.ca>
	<48ADD2CC.2080803@biostat.ku.dk>
Message-ID: <alpine.LFD.1.10.0808220644200.30857@gannet.stats.ox.ac.uk>

On Thu, 21 Aug 2008, Peter Dalgaard wrote:

> I'm somewhat puzzled by the strange characters in the glm.fit message, 
> though.

Looks like a mailer issue: from the headers it seems that was sent in 
base64 and has (at least for me) be decoded to 8-bit even though it says 
it was sent in UTF-8.  I bet those started as Unicode left and right 
quotes.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From p.dalgaard at biostat.ku.dk  Fri Aug 22 08:55:37 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Fri, 22 Aug 2008 08:55:37 +0200
Subject: [Rd] rc  note, etc
In-Reply-To: <alpine.LFD.1.10.0808220644200.30857@gannet.stats.ox.ac.uk>
References: <48ADC2FB.1010504@bank-banque-canada.ca>
	<48ADD2CC.2080803@biostat.ku.dk>
	<alpine.LFD.1.10.0808220644200.30857@gannet.stats.ox.ac.uk>
Message-ID: <48AE62E9.9030609@biostat.ku.dk>

Prof Brian Ripley wrote:
> On Thu, 21 Aug 2008, Peter Dalgaard wrote:
>
>> I'm somewhat puzzled by the strange characters in the glm.fit 
>> message, though.
>
> Looks like a mailer issue: from the headers it seems that was sent in 
> base64 and has (at least for me) be decoded to 8-bit even though it 
> says it was sent in UTF-8.  I bet those started as Unicode left and 
> right quotes.
>
Yes. The puzzling bit is why it happens for the stats package only.

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From shiun1980 at inotera.com  Fri Aug 22 05:50:08 2008
From: shiun1980 at inotera.com (shiun1980 at inotera.com)
Date: Fri, 22 Aug 2008 05:50:08 +0200 (CEST)
Subject: [Rd] Different results between v2.6.1 and 2.7.1 (PR#12579)
Message-ID: <20080822035009.91166282C763@mail.pubhealth.ku.dk>

Hello~

When I use R2.6.1, the following work correctly.

par(mar=3Dc(4.2,3.1,0.5,0.5), oma=3Dc(2,2,2,2))

boxplot(count ~ spray, col =3D "lightgray")

box("inner", lty=3D"dotted", col=3D"red")

box("outer", lty=3D"solid", col=3D"green")

=20

But when I use R2.7.1, the outer region seems too large.

I don=A1=A6t know what happened.

=20

Thanks

=20


	[[alternative HTML version deleted]]


From ripley at stats.ox.ac.uk  Fri Aug 22 10:49:56 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 22 Aug 2008 09:49:56 +0100 (BST)
Subject: [Rd] Different results between v2.6.1 and 2.7.1 (PR#12579)
In-Reply-To: <20080822035009.91166282C763@mail.pubhealth.ku.dk>
References: <20080822035009.91166282C763@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808220937420.8414@gannet.stats.ox.ac.uk>

You haven't told us the graphics device or OS used, nor it seems have you 
taken account of

                 CHANGES IN R VERSION 2.7.0


SIGNIFICANT USER-VISIBLE CHANGES

     o   Considerable efforts have been made to make the default output
         from graphics devices as similar as possible (and in
         particular close to that from postscript/pdf).  Many devices
         were misinterpreting 'pointsize' in some way, for example as
         being in device units (pixels) rather than in points.


On Fri, 22 Aug 2008, shiun1980 at inotera.com wrote:

> Hello~
>
> When I use R2.6.1, the following work correctly.

Define 'correctly'!  For example, as I recall the X11 device in 2.6.1 was 
not working as documented except on 75dpi and 100dpi screens.

> par(mar=3Dc(4.2,3.1,0.5,0.5), oma=3Dc(2,2,2,2))
>
> boxplot(count ~ spray, col =3D "lightgray")

That line does not work correctly for me under either.  I think 
data=InsetSprays is missing.

> box("inner", lty=3D"dotted", col=3D"red")
>
> box("outer", lty=3D"solid", col=3D"green")
>
> But when I use R2.7.1, the outer region seems too large.

Well, you set it, so you seem to have set it incorrectly.  It is two lines 
wide on all the devices I tried in 2.7.1.

> I don=A1=A6t know what happened.

Nor do we, but RTFM failure seems implicated.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From peter.ruckdeschel at itwm.fraunhofer.de  Fri Aug 22 15:48:14 2008
From: peter.ruckdeschel at itwm.fraunhofer.de (Dr. Peter Ruckdeschel)
Date: Fri, 22 Aug 2008 15:48:14 +0200
Subject: [Rd] R CMD check warning "no visible binding for global variable"
 and hasArg()
Message-ID: <48AEC39E.3000009@itwm.fraunhofer.de>

Hi R-devels,

latetely I reported having problems with understanding warnings
issued by a devel version of R CMD check, which Brian Ripley in
his reply

     https://stat.ethz.ch/pipermail/r-devel/2008-August/050493.html

correctly attributed to my using an outdated version (July 29)
--- you really have to be quick with updating these days!

Having switched to a more recent version, R CMD check indeed
no longer issued these warnings and instead helped me to detect
some missing bindings for global variables --- thank you Kurt for this!
 
In some occasions the warning  "no visible binding for global variable XY"
seems overly fuzzy to me, however:

R CMD check also issues this warning, if, by means of function hasArg()
from
package 'methods', I want to test the presence of a certain argument 'x'
in a
function call when 'x' is not a formal argument but "..." is.
Clearly, then 'x' in general will have no binding.

I am not sure whether this is of general interest, but I think it should not
be too difficult to check whether this "missing binding" occurs within a
call
to hasArg() [and then not to issue the warning].

Thanks for listening,
best regards, 
Peter

-- 
Dr. Peter Ruckdeschel, Abteilung Finanzmathematik, F3.17
Fraunhofer ITWM, Fraunhofer Platz 1, 67663 Kaiserslautern
Telefon:  +49 631/31600-4699
Fax    :  +49 631/31600-5699
E-Mail :  peter.ruckdeschel at itwm.fraunhofer.de



From imanpreet at gmail.com  Fri Aug 22 16:32:02 2008
From: imanpreet at gmail.com (Imanpreet)
Date: Fri, 22 Aug 2008 20:02:02 +0530
Subject: [Rd] Linking With External Lapack: Segfault
Message-ID: <c26b95920808220732w59026b60j9a60eaf395321cb9@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080822/fccda9f2/attachment.pl>

From ripley at stats.ox.ac.uk  Fri Aug 22 17:09:12 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 22 Aug 2008 16:09:12 +0100 (BST)
Subject: [Rd] Linking With External Lapack: Segfault
In-Reply-To: <c26b95920808220732w59026b60j9a60eaf395321cb9@mail.gmail.com>
References: <c26b95920808220732w59026b60j9a60eaf395321cb9@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808221604410.32527@auk.stats.ox.ac.uk>

On Fri, 22 Aug 2008, Imanpreet wrote:

> Hello All,
>
>          I have been trying to figure out on linking R with an external
> lapack. Even though the R-admin recommends against doing so, our
> requirements force us to link it to an external lapack. I am running
> configure with the following parameter.
>
> *./configure --with-lapack="-L/usr/lib -llapack -lcblas" *
>
>
> The above seems to be having NO effect. However, later I tried replacing
> libRlapack, libblas and lapack.so from $(R_HOME)/lib and $(R_HOME)/modules/
> with external lapack. Firstly, is this good?

No, and the cause of your failure below.

Why do you think '-lcblas' is correct? Please do follow the manual -- if 
you still have trouble when you do it is reasonable to ask for help, but 
not otherwise.

> Secondly, after doing the above. When I do.
>
> When I do
>> example(svd)
>
> The following is the error that I am getting:
>
> *Error: segfault from C stack overflow*
>
> On debugging the error was in La_Init() at Line 61
>
> *if(!ptr->svd)*
>
> I am getting a SIGSEGV over here.
>
> Could anybody provide an pointers or and tips on how to link R with an
> external lapack? And also possibly the cause of the above issues?

Follow the manual -- its instructions do work (they are used on Mac OS X, 
and will also work on Linux and Solaris).

>
>
> TIA.
>
> Regards,
>
>
> -- 
> Imanpreet Singh Arora
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From timhesterberg at gmail.com  Sat Aug 23 00:45:08 2008
From: timhesterberg at gmail.com (timhesterberg at gmail.com)
Date: Sat, 23 Aug 2008 00:45:08 +0200 (CEST)
Subject: [Rd] save() should not overwrite a file if an error occurs
	(PR#12583)
Message-ID: <20080822224508.CD3C8282C763@mail.pubhealth.ku.dk>

If save() fails because an object is not found,
it should not overwrite an existing file.

> a <- 1:9
> save(a, file = "a.rda")
> rm(a)
> load("a.rda")
> a
 [1]  1  2  3  4  5  6  7  8  9
> rm(a)
> save(a, file = "a.rda")
Error in save(a, file = "a.rda") : object 'a' not found
> load("a.rda")
Error in load("a.rda") : error reading from connection

I've been saving copies of huge objects into
files like a.rda, then removing the objects.
If I then happen to save again, I don't want to lose
my data.


--please do not edit the information below--

Version:
 platform = i486-pc-linux-gnu
 arch = i486
 os = linux-gnu
 system = i486, linux-gnu
 status =
 major = 2
 minor = 7.1
 year = 2008
 month = 06
 day = 23
 svn rev = 45970
 language = R
 version.string = R version 2.7.1 (2008-06-23)

Locale:
LC_CTYPE=en_US;LC_NUMERIC=C;LC_TIME=C;LC_COLLATE=C;LC_MONETARY=C;LC_MESSAGES=en_US;LC_PAPER=en_US;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US;LC_IDENTIFICATION=C

Search Path:
 .GlobalEnv, package:Rfixes, package:Rcode, package:aggregate,
package:stats, package:graphics, package:grDevices, package:utils,
package:datasets, package:showStructure, package:splus2R, package:methods,
Autoloads, package:base

	[[alternative HTML version deleted]]


From hb at stat.berkeley.edu  Sat Aug 23 01:30:05 2008
From: hb at stat.berkeley.edu (Henrik Bengtsson)
Date: Fri, 22 Aug 2008 16:30:05 -0700
Subject: [Rd] save() should not overwrite a file if an error occurs
	(PR#12583)
In-Reply-To: <20080822224508.CD3C8282C763@mail.pubhealth.ku.dk>
References: <20080822224508.CD3C8282C763@mail.pubhealth.ku.dk>
Message-ID: <59d7961d0808221630p3180c974ie0ffac4f7e388e9a@mail.gmail.com>

I don't know what save() "should" do - your use case is quite special
- but I agree it would be better if save() tests for the existence of
all object(s) to be saved before opening the connection (and thereby
overwrite the existing file).  A workaround for you is to do:

dummy <- a;
save(a, file="a.rda");

This should give an error before save() is called.

FYI, saveObject() of R.utils does protect you this way too, e.g.

> library("R.utils");
> a <- 1:9
> saveObject(a, file="a.rda")
> rm(a)
> a <- loadObject(file="a.rda")
> a
[1] 1 2 3 4 5 6 7 8 9
> rm(a)
> saveObject(a, file="a.rda")
Error in saveObject(a, file = "a.rda") : object "a" not found
> a <- loadObject(file="a.rda")
> a
[1] 1 2 3 4 5 6 7 8 9

/Henrik

On Fri, Aug 22, 2008 at 3:45 PM,  <timhesterberg at gmail.com> wrote:
> If save() fails because an object is not found,
> it should not overwrite an existing file.
>
>> a <- 1:9
>> save(a, file = "a.rda")
>> rm(a)
>> load("a.rda")
>> a
>  [1]  1  2  3  4  5  6  7  8  9
>> rm(a)
>> save(a, file = "a.rda")
> Error in save(a, file = "a.rda") : object 'a' not found
>> load("a.rda")
> Error in load("a.rda") : error reading from connection
>
> I've been saving copies of huge objects into
> files like a.rda, then removing the objects.
> If I then happen to save again, I don't want to lose
> my data.
>
>
> --please do not edit the information below--
>
> Version:
>  platform = i486-pc-linux-gnu
>  arch = i486
>  os = linux-gnu
>  system = i486, linux-gnu
>  status =
>  major = 2
>  minor = 7.1
>  year = 2008
>  month = 06
>  day = 23
>  svn rev = 45970
>  language = R
>  version.string = R version 2.7.1 (2008-06-23)
>
> Locale:
> LC_CTYPE=en_US;LC_NUMERIC=C;LC_TIME=C;LC_COLLATE=C;LC_MONETARY=C;LC_MESSAGES=en_US;LC_PAPER=en_US;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US;LC_IDENTIFICATION=C
>
> Search Path:
>  .GlobalEnv, package:Rfixes, package:Rcode, package:aggregate,
> package:stats, package:graphics, package:grDevices, package:utils,
> package:datasets, package:showStructure, package:splus2R, package:methods,
> Autoloads, package:base
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From gjh27 at cornell.edu  Fri Aug 22 17:21:46 2008
From: gjh27 at cornell.edu (Giles Hooker)
Date: Fri, 22 Aug 2008 11:21:46 -0400
Subject: [Rd] R CMD check problem
Message-ID: <48AED98A.8070502@cornell.edu>

I have a query after finding an error running Rtools on a Windows machine.

I am trying to build an update to the R fda library using Rtools27 under 
Windows XP Pro. This is the current fda library on RForge:

http://r-forge.r-project.org/projects/fda

Following R CMD build,  R CMD check produces the following error in 
00Install.out:

installing R.css in F:/work/RForge/fda.Rcheck

make: *** [Rcode0] Error 53
make[2]: *** [zzzfirst] Error 53
make[1]: *** [all] Error 2
make: *** [pkg-fda] Error 2
*** Installation of fda failed ***

Removing 'F:/work/RForge/fda.Rcheck/fda'


Any idea what the problem could be? Note the same procedure runs 
successfully on two other windows machines. For reference, the PATH 
environment variable is:

C:\Program Files\SSH Communications Security\SSH Secure 
Shell;C:\cygwin\bin;C:\Program Files\R\R-2.7.1\bin

The PATH System variable is:

c:\Rtools\bin;c:\Rtools\perl\bin;c:\Rtools\MinGW\bin;C:\watcom-1.3\binnt;C:\watcom-1.3\binw;
%GTK_BASEPATH%\bin;C:\Program Files\MiKTeX 
2.5\miktex\bin;%systemroot%\system32;%systemroot%;%systemroot%\system32\wbem;c:\program 
files\ati technologies\ati control panel;C:\Program 
Files\MATLAB\R2006a\bin\win32;C:\Program Files\ggobi;C:\Program 
Files\R\R-2.7.1\bin

Many thanks,

Giles

-- 
Giles Hooker
Assistant Professor:

Department of Biological Statistics and Computational Biology
Department of Statistical Science
1186 Comstock Hall
Cornell University
Ithaca, NY, 14853

Ph:  (+1 607) 255 1638
Fax: (+1 607) 255 4698

Email:  giles.hooker at cornell.edu


From mpdotbook at gmail.com  Sun Aug 24 02:44:38 2008
From: mpdotbook at gmail.com (rcoder)
Date: Sat, 23 Aug 2008 17:44:38 -0700 (PDT)
Subject: [Rd]  problem running dll in R
Message-ID: <19126733.post@talk.nabble.com>


Hi everyone,

I've created a dll for a fortran subroutine, and when I call the subroutine
in R (via a wrapped function) a standard program shutdown windows error
prompt immediately pops up: the program has encountered a problem and needs
to be shut down... send message / don't send message to MS... etc.

When I click "Don't send", the R consol does not then shut down, and appears
to continue to execute, and task manager does not indicate "not responding".
The problem is the execution takes too long, and I think the program is just
hanging rather than executing. I have tested with different fortran code,
and the same thing happens, so I don't think it is anything to do with that
side of things.

I created fortran code in a text editor, compiled using Plato3 IDE, then
converted the file into a dll using gFortran. I place the dll in the R
directory and it load in the console. The problem seems to occur when
defining the data types in R, for the variables in the fortran routine.

I was just wondering if anyone has experienced anything similar when trying
to call fortran subroutines in R?

Thanks,

rcoder
-- 
View this message in context: http://www.nabble.com/problem-running-dll-in-R-tp19126733p19126733.html
Sent from the R devel mailing list archive at Nabble.com.


From imanpreet at gmail.com  Mon Aug 25 13:30:07 2008
From: imanpreet at gmail.com (Imanpreet)
Date: Mon, 25 Aug 2008 17:00:07 +0530
Subject: [Rd] Linking With External Lapack: Segfault
In-Reply-To: <alpine.LFD.1.10.0808221604410.32527@auk.stats.ox.ac.uk>
References: <c26b95920808220732w59026b60j9a60eaf395321cb9@mail.gmail.com>
	<alpine.LFD.1.10.0808221604410.32527@auk.stats.ox.ac.uk>
Message-ID: <c26b95920808250430n3dd43334xdf4b52f15fe516ca@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080825/8434643b/attachment.pl>

From imanpreet at gmail.com  Mon Aug 25 13:38:30 2008
From: imanpreet at gmail.com (Imanpreet)
Date: Mon, 25 Aug 2008 17:08:30 +0530
Subject: [Rd] Linking With External Lapack: Segfault
In-Reply-To: <c26b95920808250430n3dd43334xdf4b52f15fe516ca@mail.gmail.com>
References: <c26b95920808220732w59026b60j9a60eaf395321cb9@mail.gmail.com>
	<alpine.LFD.1.10.0808221604410.32527@auk.stats.ox.ac.uk>
	<c26b95920808250430n3dd43334xdf4b52f15fe516ca@mail.gmail.com>
Message-ID: <c26b95920808250438q117f16fo90486218284c8436@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080825/3e63d930/attachment.pl>

From murdoch at stats.uwo.ca  Mon Aug 25 14:22:19 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Mon, 25 Aug 2008 08:22:19 -0400
Subject: [Rd] problem running dll in R
In-Reply-To: <19126733.post@talk.nabble.com>
References: <19126733.post@talk.nabble.com>
Message-ID: <48B2A3FB.9070401@stats.uwo.ca>

On 23/08/2008 8:44 PM, rcoder wrote:
> Hi everyone,
> 
> I've created a dll for a fortran subroutine, and when I call the subroutine
> in R (via a wrapped function) a standard program shutdown windows error
> prompt immediately pops up: the program has encountered a problem and needs
> to be shut down... send message / don't send message to MS... etc.
> 
> When I click "Don't send", the R consol does not then shut down, and appears
> to continue to execute, and task manager does not indicate "not responding".
> The problem is the execution takes too long, and I think the program is just
> hanging rather than executing. I have tested with different fortran code,
> and the same thing happens, so I don't think it is anything to do with that
> side of things.
> 
> I created fortran code in a text editor, compiled using Plato3 IDE, then
> converted the file into a dll using gFortran. I place the dll in the R
> directory and it load in the console. The problem seems to occur when
> defining the data types in R, for the variables in the fortran routine.
> 
> I was just wondering if anyone has experienced anything similar when trying
> to call fortran subroutines in R?

I haven't seen that, and haven't used that particular compiler, but it 
has the symptoms of a mismatch in calling conventions.  Does your 
compiler pass arguments in registers?  R uses what Windows calls the 
cdecl calling convention in external calls.

Some old advice on using non-standard compilers is available here:

http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs

I haven't updated it in a few years, but I think it is still current.

Duncan Murdoch


From murdoch at stats.uwo.ca  Mon Aug 25 14:32:17 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Mon, 25 Aug 2008 08:32:17 -0400
Subject: [Rd] R CMD check problem
In-Reply-To: <48AED98A.8070502@cornell.edu>
References: <48AED98A.8070502@cornell.edu>
Message-ID: <48B2A651.2030706@stats.uwo.ca>

On 22/08/2008 11:21 AM, Giles Hooker wrote:
> I have a query after finding an error running Rtools on a Windows machine.
> 
> I am trying to build an update to the R fda library using Rtools27 under 
> Windows XP Pro. This is the current fda library on RForge:
> 
> http://r-forge.r-project.org/projects/fda
> 
> Following R CMD build,  R CMD check produces the following error in 
> 00Install.out:
> 
> installing R.css in F:/work/RForge/fda.Rcheck
> 
> make: *** [Rcode0] Error 53
> make[2]: *** [zzzfirst] Error 53
> make[1]: *** [all] Error 2
> make: *** [pkg-fda] Error 2
> *** Installation of fda failed ***

I believe this says that some command involved in making the Rcode0 
target returned error code 53.
> 
> Removing 'F:/work/RForge/fda.Rcheck/fda'
> 
> 
> Any idea what the problem could be? Note the same procedure runs 
> successfully on two other windows machines. For reference, the PATH 
> environment variable is:
> 
> C:\Program Files\SSH Communications Security\SSH Secure 
> Shell;C:\cygwin\bin;C:\Program Files\R\R-2.7.1\bin
> 
> The PATH System variable is:
> 
> c:\Rtools\bin;c:\Rtools\perl\bin;c:\Rtools\MinGW\bin;C:\watcom-1.3\binnt;C:\watcom-1.3\binw;
> %GTK_BASEPATH%\bin;C:\Program Files\MiKTeX 
> 2.5\miktex\bin;%systemroot%\system32;%systemroot%;%systemroot%\system32\wbem;c:\program 
> files\ati technologies\ati control panel;C:\Program 
> Files\MATLAB\R2006a\bin\win32;C:\Program Files\ggobi;C:\Program 
> Files\R\R-2.7.1\bin

If the first one is the active PATH, that's your problem:  someone has 
overridden the default PATH, and the Rtools aren't on it.  (You see the 
active PATH in the CMD shell by typing PATH at the command line.  It 
should look like your system PATH, but with the %systemroot% etc macros 
expanded.)

Duncan Murdoch

> Many thanks,
> 
> Giles
>


From mpdotbook at gmail.com  Mon Aug 25 17:45:28 2008
From: mpdotbook at gmail.com (rcoder)
Date: Mon, 25 Aug 2008 08:45:28 -0700 (PDT)
Subject: [Rd] problem running dll in R
In-Reply-To: <48B2A3FB.9070401@stats.uwo.ca>
References: <19126733.post@talk.nabble.com> <48B2A3FB.9070401@stats.uwo.ca>
Message-ID: <19146333.post@talk.nabble.com>


Hi Duncan,

Thanks for your reply. Would you know of a code + compiler combination that
works in R, so I can get a feel for the process?

Thanks,

rcoder



Duncan Murdoch-2 wrote:
> 
> On 23/08/2008 8:44 PM, rcoder wrote:
>> Hi everyone,
>> 
>> I've created a dll for a fortran subroutine, and when I call the
>> subroutine
>> in R (via a wrapped function) a standard program shutdown windows error
>> prompt immediately pops up: the program has encountered a problem and
>> needs
>> to be shut down... send message / don't send message to MS... etc.
>> 
>> When I click "Don't send", the R consol does not then shut down, and
>> appears
>> to continue to execute, and task manager does not indicate "not
>> responding".
>> The problem is the execution takes too long, and I think the program is
>> just
>> hanging rather than executing. I have tested with different fortran code,
>> and the same thing happens, so I don't think it is anything to do with
>> that
>> side of things.
>> 
>> I created fortran code in a text editor, compiled using Plato3 IDE, then
>> converted the file into a dll using gFortran. I place the dll in the R
>> directory and it load in the console. The problem seems to occur when
>> defining the data types in R, for the variables in the fortran routine.
>> 
>> I was just wondering if anyone has experienced anything similar when
>> trying
>> to call fortran subroutines in R?
> 
> I haven't seen that, and haven't used that particular compiler, but it 
> has the symptoms of a mismatch in calling conventions.  Does your 
> compiler pass arguments in registers?  R uses what Windows calls the 
> cdecl calling convention in external calls.
> 
> Some old advice on using non-standard compilers is available here:
> 
> http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs
> 
> I haven't updated it in a few years, but I think it is still current.
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 

-- 
View this message in context: http://www.nabble.com/problem-running-dll-in-R-tp19126733p19146333.html
Sent from the R devel mailing list archive at Nabble.com.


From murdoch at stats.uwo.ca  Mon Aug 25 20:13:37 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Mon, 25 Aug 2008 14:13:37 -0400
Subject: [Rd] problem running dll in R
In-Reply-To: <19146333.post@talk.nabble.com>
References: <19126733.post@talk.nabble.com> <48B2A3FB.9070401@stats.uwo.ca>
	<19146333.post@talk.nabble.com>
Message-ID: <48B2F651.2000705@stats.uwo.ca>

On 8/25/2008 11:45 AM, rcoder wrote:
> Hi Duncan,
> 
> Thanks for your reply. Would you know of a code + compiler combination that
> works in R, so I can get a feel for the process?

Sure, the MinGW compilers in the Rtools should be fine.  You get them 
from www.murdoch-sutherland.com/Rtools.  With those, building a DLL is 
simply

R CMD SHLIB source.f

Duncan Murdoch

> 
> Thanks,
> 
> rcoder
> 
> 
> 
> Duncan Murdoch-2 wrote:
>> 
>> On 23/08/2008 8:44 PM, rcoder wrote:
>>> Hi everyone,
>>> 
>>> I've created a dll for a fortran subroutine, and when I call the
>>> subroutine
>>> in R (via a wrapped function) a standard program shutdown windows error
>>> prompt immediately pops up: the program has encountered a problem and
>>> needs
>>> to be shut down... send message / don't send message to MS... etc.
>>> 
>>> When I click "Don't send", the R consol does not then shut down, and
>>> appears
>>> to continue to execute, and task manager does not indicate "not
>>> responding".
>>> The problem is the execution takes too long, and I think the program is
>>> just
>>> hanging rather than executing. I have tested with different fortran code,
>>> and the same thing happens, so I don't think it is anything to do with
>>> that
>>> side of things.
>>> 
>>> I created fortran code in a text editor, compiled using Plato3 IDE, then
>>> converted the file into a dll using gFortran. I place the dll in the R
>>> directory and it load in the console. The problem seems to occur when
>>> defining the data types in R, for the variables in the fortran routine.
>>> 
>>> I was just wondering if anyone has experienced anything similar when
>>> trying
>>> to call fortran subroutines in R?
>> 
>> I haven't seen that, and haven't used that particular compiler, but it 
>> has the symptoms of a mismatch in calling conventions.  Does your 
>> compiler pass arguments in registers?  R uses what Windows calls the 
>> cdecl calling convention in external calls.
>> 
>> Some old advice on using non-standard compilers is available here:
>> 
>> http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs
>> 
>> I haven't updated it in a few years, but I think it is still current.
>> 
>> Duncan Murdoch
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>


From mxkuhn at gmail.com  Mon Aug 25 21:05:10 2008
From: mxkuhn at gmail.com (Max Kuhn)
Date: Mon, 25 Aug 2008 15:05:10 -0400
Subject: [Rd] name conflicts
Message-ID: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>

Everyone,

I've got code in my package that uses LogitBoost from the caTools
package. caTools does not have a namespace.

My package also uses loads RWeka, which has a namespace, and also has
a function called LogitBoost.

After loading both packages, how can I be specific about running the
version from caTools (since caTools:::LogitBoost won't work)?

Thanks,

Max


From ggrothendieck at gmail.com  Mon Aug 25 21:19:42 2008
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Mon, 25 Aug 2008 15:19:42 -0400
Subject: [Rd] name conflicts
In-Reply-To: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
References: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
Message-ID: <971536df0808251219v50f471d0x5a1f9a13c5225a5b@mail.gmail.com>

Use two colons, not three.

On Mon, Aug 25, 2008 at 3:05 PM, Max Kuhn <mxkuhn at gmail.com> wrote:
> Everyone,
>
> I've got code in my package that uses LogitBoost from the caTools
> package. caTools does not have a namespace.
>
> My package also uses loads RWeka, which has a namespace, and also has
> a function called LogitBoost.
>
> After loading both packages, how can I be specific about running the
> version from caTools (since caTools:::LogitBoost won't work)?
>
> Thanks,
>
> Max
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch at stats.uwo.ca  Mon Aug 25 21:28:00 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Mon, 25 Aug 2008 15:28:00 -0400
Subject: [Rd] name conflicts
In-Reply-To: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
References: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
Message-ID: <48B307C0.8010000@stats.uwo.ca>

On 8/25/2008 3:05 PM, Max Kuhn wrote:
> Everyone,
> 
> I've got code in my package that uses LogitBoost from the caTools
> package. caTools does not have a namespace.
> 
> My package also uses loads RWeka, which has a namespace, and also has
> a function called LogitBoost.
> 
> After loading both packages, how can I be specific about running the
> version from caTools (since caTools:::LogitBoost won't work)?

It's not easy.  Best would be to convince caTools to add a NAMESPACE.

But as a workaround:

library(caTools)
caToolsEnv <- as.environment("package:caTools")
LogitBoost <- caToolsEnv$LogitBoost

Note that there is no guarantee that LogitBoost will actually work. 
Because caTools doesn't have a NAMESPACE, there is a risk of other name 
clashes causing LogitBoost to behave unpredictably.

Duncan Murdoch


From wwwhsd at gmail.com  Mon Aug 25 21:35:29 2008
From: wwwhsd at gmail.com (Henrique Dallazuanna)
Date: Mon, 25 Aug 2008 16:35:29 -0300
Subject: [Rd] name conflicts
In-Reply-To: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
References: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
Message-ID: <da79af330808251235g5e70a603q6e9e639571ba7cd@mail.gmail.com>

Try this also:

LogitBoost <- get("LogitBoost", envir =
as.environment("package:caTools"), mode = "function")

On Mon, Aug 25, 2008 at 4:05 PM, Max Kuhn <mxkuhn at gmail.com> wrote:
> Everyone,
>
> I've got code in my package that uses LogitBoost from the caTools
> package. caTools does not have a namespace.
>
> My package also uses loads RWeka, which has a namespace, and also has
> a function called LogitBoost.
>
> After loading both packages, how can I be specific about running the
> version from caTools (since caTools:::LogitBoost won't work)?
>
> Thanks,
>
> Max
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Henrique Dallazuanna
Curitiba-Paran?-Brasil
25? 25' 40" S 49? 16' 22" O


From murdoch at stats.uwo.ca  Mon Aug 25 21:39:00 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Mon, 25 Aug 2008 15:39:00 -0400
Subject: [Rd] name conflicts
In-Reply-To: <971536df0808251219v50f471d0x5a1f9a13c5225a5b@mail.gmail.com>
References: <6731304c0808251205y59e27447k99b6a8f93aef4132@mail.gmail.com>
	<971536df0808251219v50f471d0x5a1f9a13c5225a5b@mail.gmail.com>
Message-ID: <48B30A54.7030405@stats.uwo.ca>

On 8/25/2008 3:19 PM, Gabor Grothendieck wrote:
> Use two colons, not three.

Right, I forget about that possibility.  Still, my warnings about the 
fragility of using a package without a NAMESPACE apply here too.

Duncan Murdoch

> 
> On Mon, Aug 25, 2008 at 3:05 PM, Max Kuhn <mxkuhn at gmail.com> wrote:
>> Everyone,
>>
>> I've got code in my package that uses LogitBoost from the caTools
>> package. caTools does not have a namespace.
>>
>> My package also uses loads RWeka, which has a namespace, and also has
>> a function called LogitBoost.
>>
>> After loading both packages, how can I be specific about running the
>> version from caTools (since caTools:::LogitBoost won't work)?
>>
>> Thanks,
>>
>> Max
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From amredd at gmail.com  Mon Aug 25 22:07:59 2008
From: amredd at gmail.com (Andrew Redd)
Date: Mon, 25 Aug 2008 15:07:59 -0500
Subject: [Rd] na.action does not return na.action element of lm object
Message-ID: <4d17c3500808251307nf113b93jaae497c42833cb7c@mail.gmail.com>

I'm not sure if this is the official behavior but I would expect the
na.action function applied to a lm object to return the na.action.
Here is what I mean.

> x<-0:10
> y<-x+rnorm(10)
Warning message:
In x + rnorm(10) :
  longer object length is not a multiple of shorter object length
> y[5]<-NA
> m<-lm(y~x)
> m$na.action
5
5
attr(,"class")
[1] "omit"
> na.action(m)
NULL

I would expect na.action(m) to return m$na.action.  This is simple
enough to fix with
na.action.lm<-function(object,...)object$na.action
but I would expect that this would already be included in the base.
Is there a reason that it is not?  I did a search through the archives
but did not turn up anything relevant.

Thanks,
Andrew Redd


From TimHesterberg at gmail.com  Tue Aug 26 06:55:46 2008
From: TimHesterberg at gmail.com (Tim Hesterberg)
Date: Tue, 26 Aug 2008 06:55:46 +0200
Subject: [Rd] ifelse
In-Reply-To: <g8d0v5$cet$1@ger.gmane.org> (Heikki.Kaskelma@nbl.fi)
References: <g8d0v5$cet$1@ger.gmane.org>
Message-ID: <200808260455.m7Q4tkt5023095@hypatia.math.ethz.ch>

Others have commented on why this holds.

There is an alternative, 'ifelse1', part of the splus2R package, that
does what you'd like here.

Tim Hesterberg

>I find it slightly surprising, that
>   ifelse(TRUE, character(0), "")
>returns NA instead of character(0). 
>
>-- 
>Heikki Kaskelma


From zengzhenxing at gmail.com  Tue Aug 26 08:05:07 2008
From: zengzhenxing at gmail.com (zengzhenxing at gmail.com)
Date: Tue, 26 Aug 2008 08:05:07 +0200 (CEST)
Subject: [Rd] bug in package chron (PR#12599)
Message-ID: <20080826060507.6FE1B282EFF8@mail.pubhealth.ku.dk>

Full_Name: Zeng, zhenxing
Version: 2.7.1 (2008-06-23)
OS: windows XP
Submission from: (NULL) (158.182.1.30)


Dear Author

I have run into a trouble in using chron package
The data frame: a
       date time_fut expiry_day   bid   ask trade_day
1 2004-09-01 09:45:00    2004-10 12860 12889        38
2 2004-09-01 09:45:01    2004-10 12885 12890        38
3 2004-09-01 09:45:04    2004-10 12883 12887        38
4 2004-09-01 09:45:05    2004-10 12878 12886        38
5 2004-09-01 09:45:06    2004-10 12881 12887        38
6 2004-09-01 09:45:08    2004-10 12881 12882        38
7 2004-09-01 09:45:11    2004-10 12881 12884        38
8 2004-09-01 09:45:12    2004-10 12882 12884        38
9 2004-09-01 09:45:14    2004-10 12882 12883        38

I use the package chron

a$time_fut<-times(a$time_fut)
a$date<-as.Date(a$date)
a$expiry_day<-as.character(a$expiry_day)

any(am$time_fut[2]==(am$time_fut[1]+times("00:00:01")))
the answer: True
 any(a$time_fut[5]==(a$time_fut[4]+times("00:00:01")))
[1] TRUE
any(am$time_fut[4]==(am$time_fut[3]+times("00:00:01")))
the answer: False
But, the right answer should be true

I don't know why, I am using the R version: 2.7.1
attached please find the data.

Thank you

Best wishes


From ripley at stats.ox.ac.uk  Tue Aug 26 11:09:09 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Tue, 26 Aug 2008 10:09:09 +0100 (BST)
Subject: [Rd] na.action does not return na.action element of lm object
In-Reply-To: <4d17c3500808251307nf113b93jaae497c42833cb7c@mail.gmail.com>
References: <4d17c3500808251307nf113b93jaae497c42833cb7c@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808261004320.17551@gannet.stats.ox.ac.uk>

Well, the na.action component (which may or may not be present in an lm 
object) is *not* what na.action is documented to give:

Value:

      The action which will be applied to 'object' whenever 'NA's are
      not desired.

So this needs some re-working, and it is not just "lm" objects that have 
the na.action information as a component and not an attribute.

On Mon, 25 Aug 2008, Andrew Redd wrote:

> I'm not sure if this is the official behavior but I would expect the
> na.action function applied to a lm object to return the na.action.
> Here is what I mean.
>
>> x<-0:10
>> y<-x+rnorm(10)
> Warning message:
> In x + rnorm(10) :
>  longer object length is not a multiple of shorter object length
>> y[5]<-NA
>> m<-lm(y~x)
>> m$na.action
> 5
> 5
> attr(,"class")
> [1] "omit"
>> na.action(m)
> NULL
>
> I would expect na.action(m) to return m$na.action.  This is simple
> enough to fix with
> na.action.lm<-function(object,...)object$na.action
> but I would expect that this would already be included in the base.
> Is there a reason that it is not?  I did a search through the archives
> but did not turn up anything relevant.
>
> Thanks,
> Andrew Redd
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From ggrothendieck at gmail.com  Tue Aug 26 14:15:10 2008
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Tue, 26 Aug 2008 08:15:10 -0400
Subject: [Rd] bug in package chron (PR#12599)
In-Reply-To: <20080826060507.6FE1B282EFF8@mail.pubhealth.ku.dk>
References: <20080826060507.6FE1B282EFF8@mail.pubhealth.ku.dk>
Message-ID: <971536df0808260515v5718e0d7lcc4d453acd13ba19@mail.gmail.com>

chron represents times as a fraction of a day using doubles so seconds
cannot necessarily be represented exactly thus this is an example of
FAQ 7.31:
http://cran.r-project.org/doc/manuals/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f

Try this:

library(chron)
tt <- c("09:45:00", "09:45:01", "09:45:04", "09:45:05", "09:45:06",
"09:45:08", "09:45:11", "09:45:12", "09:45:14")
tt <- times(tt)

> trunc(tt[3] + times("00:00:01"), "sec") == tt[4]
[1] TRUE

See R News 4/1.

On Tue, Aug 26, 2008 at 2:05 AM,  <zengzhenxing at gmail.com> wrote:
> Full_Name: Zeng, zhenxing
> Version: 2.7.1 (2008-06-23)
> OS: windows XP
> Submission from: (NULL) (158.182.1.30)
>
>
> Dear Author
>
> I have run into a trouble in using chron package
> The data frame: a
>       date time_fut expiry_day   bid   ask trade_day
> 1 2004-09-01 09:45:00    2004-10 12860 12889        38
> 2 2004-09-01 09:45:01    2004-10 12885 12890        38
> 3 2004-09-01 09:45:04    2004-10 12883 12887        38
> 4 2004-09-01 09:45:05    2004-10 12878 12886        38
> 5 2004-09-01 09:45:06    2004-10 12881 12887        38
> 6 2004-09-01 09:45:08    2004-10 12881 12882        38
> 7 2004-09-01 09:45:11    2004-10 12881 12884        38
> 8 2004-09-01 09:45:12    2004-10 12882 12884        38
> 9 2004-09-01 09:45:14    2004-10 12882 12883        38
>
> I use the package chron
>
> a$time_fut<-times(a$time_fut)
> a$date<-as.Date(a$date)
> a$expiry_day<-as.character(a$expiry_day)
>
> any(am$time_fut[2]==(am$time_fut[1]+times("00:00:01")))
> the answer: True
>  any(a$time_fut[5]==(a$time_fut[4]+times("00:00:01")))
> [1] TRUE
> any(am$time_fut[4]==(am$time_fut[3]+times("00:00:01")))
> the answer: False
> But, the right answer should be true
>
> I don't know why, I am using the R version: 2.7.1
> attached please find the data.
>
> Thank you
>
> Best wishes
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ebo at sandien.com  Tue Aug 26 17:31:03 2008
From: ebo at sandien.com (EBo)
Date: Tue, 26 Aug 2008 09:31:03 MDT
Subject: [Rd] embedded examples
Message-ID: <twig.1219764663.70445@swcp.com>


I am working on embedding R into some visualization research programs.  Can
any point me to a collection of embedded and standalone R/C/C++ examples?  The
documentation is to terse for me to figure out how to develop this and I am
looking for some simple examples to study.

  Thanks and best regards,

  EBo --


From h.wickham at gmail.com  Tue Aug 26 17:50:54 2008
From: h.wickham at gmail.com (hadley wickham)
Date: Tue, 26 Aug 2008 10:50:54 -0500
Subject: [Rd] [R] embedded examples
In-Reply-To: <twig.1219764663.70445@swcp.com>
References: <twig.1219764663.70445@swcp.com>
Message-ID: <f8e6ff050808260850t1409e0b0s2ef31a3ba9b322c2@mail.gmail.com>

You might also want to look at existing visualisation applications
that connect with R:

 * http://ggobi.org
 * http://rosuda.org/mondrian
 * http://rosuda.org/software/Gauguin/gauguin.html

to name a few.

Hadley

On Tue, Aug 26, 2008 at 10:31 AM, EBo <ebo at sandien.com> wrote:
>
> I am working on embedding R into some visualization research programs.  Can
> any point me to a collection of embedded and standalone R/C/C++ examples?  The
> documentation is to terse for me to figure out how to develop this and I am
> looking for some simple examples to study.
>
>  Thanks and best regards,
>
>  EBo --
>
> ______________________________________________
> R-help at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>



-- 
http://had.co.nz/


From rubinson at u.arizona.edu  Tue Aug 26 22:00:17 2008
From: rubinson at u.arizona.edu (rubinson at u.arizona.edu)
Date: Tue, 26 Aug 2008 22:00:17 +0200 (CEST)
Subject: [Rd] R 2.7.2 for Windows fails to install local zip package
	(PR#12612)
Message-ID: <20080826200018.1C858282C76C@mail.pubhealth.ku.dk>

R version 2.7.2 for Windows fails to install local (zipped) packages
with following messages:

> utils:::menuInstallLocal()
updating HTML package descriptions
Error in .readRDS(pfile) : error reading from connection
>


From murdoch at stats.uwo.ca  Wed Aug 27 12:54:27 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Wed, 27 Aug 2008 06:54:27 -0400
Subject: [Rd] R 2.7.2 for Windows fails to install local zip
	package	(PR#12612)
In-Reply-To: <20080826200018.1C858282C76C@mail.pubhealth.ku.dk>
References: <20080826200018.1C858282C76C@mail.pubhealth.ku.dk>
Message-ID: <48B53263.6080504@stats.uwo.ca>

rubinson at u.arizona.edu wrote:
> R version 2.7.2 for Windows fails to install local (zipped) packages
> with following messages:
>
>   
>> utils:::menuInstallLocal()
>>     
> updating HTML package descriptions
> Error in .readRDS(pfile) : error reading from connection
>   
It works for me.  I suspect you have permissions problems. 

Duncan Murdoch


From pgilbert at bank-banque-canada.ca  Wed Aug 27 16:03:29 2008
From: pgilbert at bank-banque-canada.ca (Paul Gilbert)
Date: Wed, 27 Aug 2008 10:03:29 -0400
Subject: [Rd] S4 coercion
Message-ID: <48B55EB1.5020602@bank-banque-canada.ca>

I am extending a DBI connection by

setClass("TSPostgreSQLConnection", 
contains=c("PostgreSQLConnection","TSdbOptions"))

but the first time I use this I am getting a warning when it tries to 
coerce  the  TSPostgreSQLConnection to a PostgreSQLConnection. After the 
first use the warning stops,  but the first warning is causing me 
problems when I do automatic checks and set my tests to stop on 
warnings. (I think there should be a correct way to do this that does 
not produce a warning.)  I can trace it back by setting options(warn=2) 
as below.  Do I need to be more specific about how the coercion  
happens? If so, what is the correct way to coerce the 
TSPostgreSQLConnection into a PostgreSQLConnection? If not, how to a get 
rid of the warning?

Paul Gilbert


 > TSdelete("vec", con)
Error: (converted from warning) Ambiguous method selection for "coerce", 
target "TSPostgreSQLConnection#integer" (the first of the signatures 
shown will be used)
   PostgreSQLConnection#integer
   dbObjectId#integer
 > traceback()
15: doWithOneRestart(return(expr), restart)
14: withOneRestart(expr, restarts[[1]])
13: withRestarts({
       .Internal(.signalCondition(simpleWarning(msg, call), msg,
           call))
       .Internal(.dfltWarn(msg, call))
   }, muffleWarning = function() NULL)
12: .signalSimpleWarning("Ambiguous method selection for \"coerce\", 
target \"TSPostgreSQLConnection#integer\" (the first of the signatures 
shown will be used)\n    PostgreSQLConnection#integer\n    
dbObjectId#integer\n",
       quote(NULL))
11: warning(gettextf(paste("Ambiguous method selection for \"%s\", 
target \"%s\"",
       "(the first of the signatures shown will be used)\n%s\n"),
       fdef at generic, .sigLabel(classes), paste("   ", names(methods),
           collapse = "\n")), domain = NA, call. = FALSE)
10: .findInheritedMethods(signature, fdef, mtable = allmethods, table = 
mlist,
       useInherited = useInherited, verbose = verbose)
9: selectMethod("coerce", sig, optional = TRUE, c(from = TRUE, to = FALSE),
      fdef = coerceFun, mlist = coerceMethods)
8: as(obj, "integer")
7: isIdCurrent(con)
6: postgresqlQuickSQL(conn, statement, ...)
5: dbGetQuery(con, paste("SELECT tbl  FROM Meta ", where, ";"))
4: dbGetQuery(con, paste("SELECT tbl  FROM Meta ", where, ";"))
3: TSdbi:::TSdeleteSQL(serIDs = serIDs, con = con, ...)
2: TSdelete("vec", con)
1: TSdelete("vec", con)
 >  str(con)
Formal class 'TSPostgreSQLConnection' [package "TSPostgreSQL"] with 4 slots
 ..@ Id     : int [1:2] 21795 1
 ..@ dbname : chr "test"
 ..@ vintage: logi FALSE
 ..@ panel  : logi FALSE
====================================================================================

La version fran?aise suit le texte anglais.

------------------------------------------------------------------------------------

This email may contain privileged and/or confidential in...{{dropped:26}}


From mtmorgan at fhcrc.org  Wed Aug 27 17:46:36 2008
From: mtmorgan at fhcrc.org (Martin Morgan)
Date: Wed, 27 Aug 2008 08:46:36 -0700
Subject: [Rd] S4 coercion
In-Reply-To: <48B55EB1.5020602@bank-banque-canada.ca> (Paul Gilbert's
	message of "Wed, 27 Aug 2008 10:03:29 -0400")
References: <48B55EB1.5020602@bank-banque-canada.ca>
Message-ID: <6ph1w0ao3z7.fsf@lamprey.fhcrc.org>

Hi Paul -- does this make the problem more explicit?

> ## class hierarchy
> setClass("A", representation=representation(a="numeric"))
[1] "A"
> setClass("B", representation=representation(b="numeric"))
[1] "B"
> setClass("C", contains=c("A", "B"))
[1] "C"

> ## coerce methods -- in some instances implicitly created
> setAs("A", "numeric", function(from) slot(from, "a"))
> setAs("B", "numeric", function(from) slot(from, "b"))

> ## trouble: C equidistant from A, B so no unambiguous nearest 'coerce'
> ## method
> as(new("C"), "numeric")
numeric(0)
Warning message:
Ambiguous method selection for "coerce", target "C#numeric" (the first
of the signatures shown will be used)
    A#numeric
    B#numeric

The solution is to define a method to resolve the conflict, e.g.,

setAs("C", "numeric", function(from) {
    ## avoid breaking the class abstraction
    as(as(from, "A"), "numeric") *
            as(as(from, "B"), "numeric")
})

I don't know how you want to break your particular tie; that has to do
with the classes you're extending.

Martin            

Paul Gilbert <pgilbert at bank-banque-canada.ca> writes:

> I am extending a DBI connection by
>
> setClass("TSPostgreSQLConnection",
> contains=c("PostgreSQLConnection","TSdbOptions"))
>
> but the first time I use this I am getting a warning when it tries to
> coerce  the  TSPostgreSQLConnection to a PostgreSQLConnection. After
> the first use the warning stops,  but the first warning is causing me
> problems when I do automatic checks and set my tests to stop on
> warnings. (I think there should be a correct way to do this that does
> not produce a warning.)  I can trace it back by setting
> options(warn=2) as below.  Do I need to be more specific about how the
> coercion  happens? If so, what is the correct way to coerce the
> TSPostgreSQLConnection into a PostgreSQLConnection? If not, how to a
> get rid of the warning?
>
> Paul Gilbert
>
>
>  > TSdelete("vec", con)
> Error: (converted from warning) Ambiguous method selection for
> "coerce", target "TSPostgreSQLConnection#integer" (the first of the
> signatures shown will be used)
>    PostgreSQLConnection#integer
>    dbObjectId#integer
>  > traceback()
> 15: doWithOneRestart(return(expr), restart)
> 14: withOneRestart(expr, restarts[[1]])
> 13: withRestarts({
>        .Internal(.signalCondition(simpleWarning(msg, call), msg,
>            call))
>        .Internal(.dfltWarn(msg, call))
>    }, muffleWarning = function() NULL)
> 12: .signalSimpleWarning("Ambiguous method selection for \"coerce\",
> target \"TSPostgreSQLConnection#integer\" (the first of the signatures
> shown will be used)\n    PostgreSQLConnection#integer\n
> dbObjectId#integer\n",
>        quote(NULL))
> 11: warning(gettextf(paste("Ambiguous method selection for \"%s\",
> target \"%s\"",
>        "(the first of the signatures shown will be used)\n%s\n"),
>        fdef at generic, .sigLabel(classes), paste("   ", names(methods),
>            collapse = "\n")), domain = NA, call. = FALSE)
> 10: .findInheritedMethods(signature, fdef, mtable = allmethods, table
> = mlist,
>        useInherited = useInherited, verbose = verbose)
> 9: selectMethod("coerce", sig, optional = TRUE, c(from = TRUE, to = FALSE),
>       fdef = coerceFun, mlist = coerceMethods)
> 8: as(obj, "integer")
> 7: isIdCurrent(con)
> 6: postgresqlQuickSQL(conn, statement, ...)
> 5: dbGetQuery(con, paste("SELECT tbl  FROM Meta ", where, ";"))
> 4: dbGetQuery(con, paste("SELECT tbl  FROM Meta ", where, ";"))
> 3: TSdbi:::TSdeleteSQL(serIDs = serIDs, con = con, ...)
> 2: TSdelete("vec", con)
> 1: TSdelete("vec", con)
>  >  str(con)
> Formal class 'TSPostgreSQLConnection' [package "TSPostgreSQL"] with 4 slots
>  ..@ Id     : int [1:2] 21795 1
>  ..@ dbname : chr "test"
>  ..@ vintage: logi FALSE
>  ..@ panel  : logi FALSE
> ====================================================================================
>
> La version fran?aise suit le texte anglais.
>
> ------------------------------------------------------------------------------------
>
> This email may contain privileged and/or confidential in...{{dropped:26}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Martin Morgan
Computational Biology / Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N.
PO Box 19024 Seattle, WA 98109

Location: Arnold Building M2 B169
Phone: (206) 667-2793


From timhesterberg at gmail.com  Wed Aug 27 19:05:19 2008
From: timhesterberg at gmail.com (timhesterberg at gmail.com)
Date: Wed, 27 Aug 2008 19:05:19 +0200 (CEST)
Subject: [Rd] format.data.frame handles names in nested data frames badly
	(PR#12624)
Message-ID: <20080827170519.78A0B282C761@mail.pubhealth.ku.dk>

> d <- data.frame(x=1:3, y=2:4)
> d[["r"]] <- d[1]/d[2]
> d
  x y         x
1 1 2 0.5000000
2 2 3 0.6666667
3 3 4 0.7500000

It appears that the name "x" was given
instead of "r".  That is not correct:

> names(d)
[1] "x" "y" "r"
> showStructure(d) # from package splus2R
list[3,3]  S3 class: data.frame
 &row.names   numeric[ length 3]  class: integer
 $x   numeric[ length 3]  class: integer
 $y   numeric[ length 3]  class: integer
 $r   list[3,1]  S3 class: data.frame
   &row.names     numeric[ length 3]  class: integer
   $x     numeric[ length 3]  class: numeric

print.data.frame calls format.data.frame, which
loses the name "r" and substitutes the name "x".

I suggest that format.data.frame (or print.data.frame)
paste together the names, e.g.
  x y       r.x
1 1 2 0.5000000
2 2 3 0.6666667
3 3 4 0.7500000
This generalizes to the case that an included data frame
includes two columns.  It is also consistent with the
behavior for a data frame containing a matrix.

> d <- data.frame(x=1:3, y=2:4, A = I(cbind(a=3:5,b=4:6)))
> d
  x y A.a A.b
1 1 2   3   4
2 2 3   4   5
3 3 4   5   6
> showStructure(d)
list[3,3]  S3 class: data.frame
 &row.names   numeric[ length 3]  class: integer
 $x   numeric[ length 3]  class: integer
 $y   numeric[ length 3]  class: integer
 $A   numeric[3,2]  S3 class: AsIs
   attributes: dimnames

--please do not edit the information below--

Version:
 platform = i486-pc-linux-gnu
 arch = i486
 os = linux-gnu
 system = i486, linux-gnu
 status =
 major = 2
 minor = 7.1
 year = 2008
 month = 06
 day = 23
 svn rev = 45970
 language = R
 version.string = R version 2.7.1 (2008-06-23)

Locale:
LC_CTYPE=en_US;LC_NUMERIC=C;LC_TIME=C;LC_COLLATE=C;LC_MONETARY=C;LC_MESSAGES=en_US;LC_PAPER=en_US;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US;LC_IDENTIFICATION=C

Search Path:
 .GlobalEnv, package:Rfixes, package:Rcode, package:aggregate,
package:stats, package:graphics, package:grDevices, package:utils,
package:datasets, package:showStructure, package:splus2R, package:methods,
Autoloads, package:base

	[[alternative HTML version deleted]]


From dutangc at gmail.com  Wed Aug 27 19:25:03 2008
From: dutangc at gmail.com (christophe dutang)
Date: Wed, 27 Aug 2008 19:25:03 +0200
Subject: [Rd] standard errors for glm
Message-ID: <c8e8cd3d0808271025k524fb2ecp392b2750a0b65dd3@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080827/7d93cb2a/attachment.pl>

From mwkimpel at gmail.com  Wed Aug 27 22:21:38 2008
From: mwkimpel at gmail.com (Mark Kimpel)
Date: Wed, 27 Aug 2008 16:21:38 -0400
Subject: [Rd] specifying compiler path in configure
Message-ID: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>

I'm having trouble building some packages while running Debian Lenny
(testing) and suspect that the issues are related to the default use
of gcc-4.3.  With Lenny, build-essentials depends on 4.3, so I'd like
to leave it installed but have also installed 4.2.1. How do I tell
./configure the path to 4.2.1 ? I"m sure it's an option, but I don't
see it documented in the R-admin manual.

Mark

-- 
Mark W. Kimpel MD ** Neuroinformatics ** Dept. of Psychiatry
Indiana University School of Medicine

15032 Hunter Court, Westfield, IN 46074

(317) 490-5129 Work, & Mobile & VoiceMail
(317) 663-0513 Home (no voice mail please)


From ripley at stats.ox.ac.uk  Wed Aug 27 22:38:34 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 27 Aug 2008 21:38:34 +0100 (BST)
Subject: [Rd] specifying compiler path in configure
In-Reply-To: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>
References: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808272133040.27712@gannet.stats.ox.ac.uk>

On Wed, 27 Aug 2008, Mark Kimpel wrote:

> I'm having trouble building some packages while running Debian Lenny
> (testing) and suspect that the issues are related to the default use
> of gcc-4.3.

You might want to compare your problems with the CRAN checks at

http://cran.r-project.org/web/checks/check_summary.html

as those are run with gcc 4.3.x on Debian testing.  From memory, the 
problems are confined to C++-(mis)using packages.

> With Lenny, build-essentials depends on 4.3, so I'd like
> to leave it installed but have also installed 4.2.1. How do I tell
> ./configure the path to 4.2.1 ? I"m sure it's an option, but I don't
> see it documented in the R-admin manual.

>From configure --help:

   CC          C compiler command
   CFLAGS      C compiler flags

There are many examples of setting CC in the R-admin manual, and the first 
para of 'Essential Programs' seems to me to tell you that as well.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From edd at debian.org  Wed Aug 27 23:39:22 2008
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 27 Aug 2008 16:39:22 -0500
Subject: [Rd] specifying compiler path in configure
In-Reply-To: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>
References: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>
Message-ID: <18613.51594.358264.40262@ron.nulle.part>


Mark,

On 27 August 2008 at 16:21, Mark Kimpel wrote:
| I'm having trouble building some packages while running Debian Lenny
| (testing) and suspect that the issues are related to the default use
| of gcc-4.3.  With Lenny, build-essentials depends on 4.3, so I'd like
| to leave it installed but have also installed 4.2.1. How do I tell
| ./configure the path to 4.2.1 ? I"m sure it's an option, but I don't
| see it documented in the R-admin manual.

a) That's an r-sig-debian question, so please post there. As a quick hint

   a.1) solve it the Debian way via alternatives: man update-alternatives

   a.2) solve it the standard Unix/GNU way by telling configure what to
        use for CC, CXX, ...  The GNU tools respect those choices.

but 

b) All of Debian's r-cran-* package are built using the most current (ie now
   4.3) compiler; other had done complete archive rebuilds before 4.3 was
   released. The low-hanging fruits (ie easy errors of missing headers etc) 
   have all been addressed.

c) Just to lift the lid a little here, but our Google Summer of Code project
   is coming along just fine, thanks to outstanding work by Charles (the
   student) and now with hardware support from WU Wien which is letting us
   hammer away on Xen instance.  As of right now:

   edd at xmcorsairs:~$ sqlite3 /var/cache/cran2deb/cran2deb.db "select count(package),success from builds group by success;"
   157|0
   1340|1
   edd at xmcorsairs:~$ r -e'print(1340/(157+1340)*100)'
   [1] 89.51236
   edd at xmcorsairs:~$ 

   89.9% autobuild and we're not quite done yet in terms of adding manual
   translations of SystemRequirements into Debian's Depends:

I suspect a local mishap at your end and invite you to post some details at
r-sig-debian -- I'm sure we get that sorted out.

Dirk

-- 
Three out of two people have difficulties with fractions.


From dutangc at gmail.com  Thu Aug 28 09:58:34 2008
From: dutangc at gmail.com (christophe dutang)
Date: Thu, 28 Aug 2008 09:58:34 +0200
Subject: [Rd] standard errors for glm
In-Reply-To: <21447017.195361219859653586.JavaMail.javamailuser@localhost>
References: <21447017.195361219859653586.JavaMail.javamailuser@localhost>
Message-ID: <c8e8cd3d0808280058i4bfa3f33w3a7f0766919f6d50@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080828/dfe55f0a/attachment.pl>

From b.rowlingson at lancaster.ac.uk  Thu Aug 28 10:55:09 2008
From: b.rowlingson at lancaster.ac.uk (b.rowlingson at lancaster.ac.uk)
Date: Thu, 28 Aug 2008 10:55:09 +0200 (CEST)
Subject: [Rd] Second X11 call with invalid display crashes R after first X11
	call. (PR#12628)
Message-ID: <20080828085510.0B8F1282C765@mail.pubhealth.ku.dk>

I get this with R 2.7.2 (and 2.7.1, and 2.6.2, but NOT 2.4.0):

 > X11() # this one opens up okay
 > X11("foo")
 Error: Couldn't find per display information
 $

and R crashes out back to my shell prompt.

If I do X11("foo") as a first command I get a meaningful error and my
R prompt back:

> X11("foo")
Error in X11(d$display, d$width, d$height, d$pointsize, d$gamma, d$colortype,  :

  unable to start device X11cairo
In addition: Warning message:
In X11("foo") : unable to open connection to X11 display 'foo'
>

So it only seems to be after a *successful* X11() call it that it crashes R.

Can't find anything in latest changes that refer to fixing this.

My system is Ubuntu 7.10 with R 2.7.2 from latest repository, also
happens with an R 2.7.0 binary I've got hanging around compiled from
source and also happens on other systems I've tried.

> sessionInfo()
R version 2.7.2 (2008-08-25)
i486-pc-linux-gnu

locale:
LC_CTYPE=en_GB.UTF-8;LC_NUMERIC=C;LC_TIME=en_GB.UTF-8;LC_COLLATE=en_GB.UTF-8;LC_
MONETARY=C;LC_MESSAGES=en_GB.UTF-8;LC_PAPER=en_GB.UTF-8;LC_NAME=C;LC_ADDRESS=C;L
C_TELEPHONE=C;LC_MEASUREMENT=en_GB.UTF-8;LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base


From gjh27 at cornell.edu  Thu Aug 28 03:50:58 2008
From: gjh27 at cornell.edu (Giles Hooker)
Date: Wed, 27 Aug 2008 21:50:58 -0400
Subject: [Rd] Defining environments within functions
Message-ID: <48B60482.5010306@cornell.edu>

How can I define environments within a function so that they are visible
to calls to a sub-function?

I have defined an objective function,

	ProfileErr = function(params,...)

which I would like to optimize using standard routines (optim,
nlminb,....) but which contains auxiliary variables which need to be
updated along with params. No optimization routine in R that I have
found has facilities for this.

Specifically, within ProfileErr, I need to calculate

  	coefs(params,...)

This a function which requires a further optimization, and I can achieve
significant efficiency gains by starting  where the last optimization
ended, so I would like to keep track of it.

At the command line, I get around this by

	ProfileEnv = new.env()
	assign('coefs',coefs,3,ProfileEnv)

and within ProfileErr, I can call

	startcoefs = get('coefs',envir=ProfileEnv)
	* do the optimization to get newcoefs *
	assign('coefs',newcoefs,3,ProfileEnv)

Then calling

	optim(pars,ProfileErr,....)

works fine. However, when I try to wrap all of that in its own function

	profile.estimate = fn(pars,...){
		ProfileEnv = new.env()
		assign('coefs',coefs,3,ProfileEnv)
	
		res = optim(pars,ProfileErr,....)
	}


ProfileErr no longer sees ProfileEnv. I haven't been able to make much
sense out of the documentation on environments, but is there a way to
make this work? Otherwise I'm back to writing variables out to files.

Many thanks,

Giles


-- 
Giles Hooker
Assistant Professor:

Department of Biological Statistics and Computational Biology
Department of Statistical Science
1186 Comstock Hall
Cornell University
Ithaca, NY, 14853

Ph:  (+1 607) 255 1638
Fax: (+1 607) 255 4698

Email:  giles.hooker at cornell.edu



-- 
Giles Hooker
Assistant Professor:

Department of Biological Statistics and Computational Biology
Department of Statistical Science
1186 Comstock Hall
Cornell University
Ithaca, NY, 14853

Ph:  (+1 607) 255 1638
Fax: (+1 607) 255 4698

Email:  giles.hooker at cornell.edu


From ripley at stats.ox.ac.uk  Thu Aug 28 12:07:52 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 28 Aug 2008 11:07:52 +0100 (BST)
Subject: [Rd] (PR#12628) Second X11 call with invalid display crashes R
 after first X11 call.
In-Reply-To: <20080828085510.0B8F1282C765@mail.pubhealth.ku.dk>
References: <20080828085510.0B8F1282C765@mail.pubhealth.ku.dk>
Message-ID: <alpine.LFD.1.10.0808281102020.15220@auk.stats.ox.ac.uk>

This is an Xt error, whereas the first one is an Xlib error.  It is easy 
to trap it.

You do realize that this will never work?  In the current setup all open 
X11 devices must be on the same display, and 'display' is ignored if a 
device is already open.  (I don't know if that is documented: I did not 
write the Xlib device nor the help page.)


On Thu, 28 Aug 2008, b.rowlingson at lancaster.ac.uk wrote:

> I get this with R 2.7.2 (and 2.7.1, and 2.6.2, but NOT 2.4.0):
>
> > X11() # this one opens up okay
> > X11("foo")
> Error: Couldn't find per display information
> $
>
> and R crashes out back to my shell prompt.
>
> If I do X11("foo") as a first command I get a meaningful error and my
> R prompt back:
>
>> X11("foo")
> Error in X11(d$display, d$width, d$height, d$pointsize, d$gamma, d$colortype,  :
>
>  unable to start device X11cairo
> In addition: Warning message:
> In X11("foo") : unable to open connection to X11 display 'foo'
>>
>
> So it only seems to be after a *successful* X11() call it that it crashes R.
>
> Can't find anything in latest changes that refer to fixing this.
>
> My system is Ubuntu 7.10 with R 2.7.2 from latest repository, also
> happens with an R 2.7.0 binary I've got hanging around compiled from
> source and also happens on other systems I've tried.
>
>> sessionInfo()
> R version 2.7.2 (2008-08-25)
> i486-pc-linux-gnu
>
> locale:
> LC_CTYPE=en_GB.UTF-8;LC_NUMERIC=C;LC_TIME=en_GB.UTF-8;LC_COLLATE=en_GB.UTF-8;LC_
> MONETARY=C;LC_MESSAGES=en_GB.UTF-8;LC_PAPER=en_GB.UTF-8;LC_NAME=C;LC_ADDRESS=C;L
> C_TELEPHONE=C;LC_MEASUREMENT=en_GB.UTF-8;LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From murdoch at stats.uwo.ca  Thu Aug 28 12:42:54 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Thu, 28 Aug 2008 06:42:54 -0400
Subject: [Rd] Defining environments within functions
In-Reply-To: <48B60482.5010306@cornell.edu>
References: <48B60482.5010306@cornell.edu>
Message-ID: <48B6812E.70809@stats.uwo.ca>

Giles Hooker wrote:
> How can I define environments within a function so that they are visible
> to calls to a sub-function?
>   

I think you need to give a simplified, runnable example.  (Or at least 
runnable until it hits the scoping problem you've got.)  "Sub-function" 
isn't R terminology, and it's not clear what you mean by it.

In R, you rarely need to work with environments explicitly.  You just 
define functions in the same location and they share the same 
environment.  For example,

fnBuilder <- function(commonArgs) {
  commonVars <- ...
  ProfileErr <- function(params, ...) {}
  coefs <- function(params, ...) {}
  return(list(ProfileErr, coefs))
}

both <- fnBuilder(...)
ProfileErr <- both[[1]]
coefs <- both[[2]]

Now ProfileErr and coefs share the same environment, and both can see 
(and modify) commonArgs and commonVars.

Duncan Murdoch


> I have defined an objective function,
>
> 	ProfileErr = function(params,...)
>
> which I would like to optimize using standard routines (optim,
> nlminb,....) but which contains auxiliary variables which need to be
> updated along with params. No optimization routine in R that I have
> found has facilities for this.
>
> Specifically, within ProfileErr, I need to calculate
>
>   	coefs(params,...)
>
> This a function which requires a further optimization, and I can achieve
> significant efficiency gains by starting  where the last optimization
> ended, so I would like to keep track of it.
>
> At the command line, I get around this by
>
> 	ProfileEnv = new.env()
> 	assign('coefs',coefs,3,ProfileEnv)
>
> and within ProfileErr, I can call
>
> 	startcoefs = get('coefs',envir=ProfileEnv)
> 	* do the optimization to get newcoefs *
> 	assign('coefs',newcoefs,3,ProfileEnv)
>
> Then calling
>
> 	optim(pars,ProfileErr,....)
>
> works fine. However, when I try to wrap all of that in its own function
>
> 	profile.estimate = fn(pars,...){
> 		ProfileEnv = new.env()
> 		assign('coefs',coefs,3,ProfileEnv)
> 	
> 		res = optim(pars,ProfileErr,....)
> 	}
>
>
> ProfileErr no longer sees ProfileEnv. I haven't been able to make much
> sense out of the documentation on environments, but is there a way to
> make this work? Otherwise I'm back to writing variables out to files.
>
> Many thanks,
>
> Giles
>
>
>


From g.tarquinio at dmbi.org  Thu Aug 28 12:31:01 2008
From: g.tarquinio at dmbi.org (origano)
Date: Thu, 28 Aug 2008 03:31:01 -0700 (PDT)
Subject: [Rd]  "error using packet 1"
Message-ID: <19197960.post@talk.nabble.com>


Hello,
I'm Giovanni from ROMA..

I can't find a solution for the error:

"error using packet 1
the y field is not specified and it has not a default value"
(this is my traslation from italian language)

The code is:

pc<-    qqmath(~valori,
        distribution=function(p) qweibull(p,beta,alpha),
        prepanel = prepanel.qqmathline,
        panel = function(x, y) {
             panel.grid()
             panel.qqmathline(y, distribution = function(p)
qweibull(p,beta,alpha))
             panel.qqmath(x, y)
           },
        layout = c( 1,1), aspect = 0.8,
        xlab = "Unit Weibull Quantile", ylab = "D"
    )


Thanks for your regard,
Giovanni 
-- 
View this message in context: http://www.nabble.com/%22error-using-packet-1%22-tp19197960p19197960.html
Sent from the R devel mailing list archive at Nabble.com.


From ripley at stats.ox.ac.uk  Thu Aug 28 15:10:00 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 28 Aug 2008 14:10:00 +0100 (BST)
Subject: [Rd] "error using packet 1"
In-Reply-To: <19197960.post@talk.nabble.com>
References: <19197960.post@talk.nabble.com>
Message-ID: <alpine.LFD.1.10.0808281404420.8067@gannet.stats.ox.ac.uk>

Please don't post to multiple lists.  You have ignored the posting quide 
-- this is about some version of lattice (not mentioned), and we do not 
have a reproducible example (no valori, alpha, beta, for a start).

I suggest you study the posting guide and re-post to R-help with all the 
details you are asked for.

On Thu, 28 Aug 2008, origano wrote:

>
> Hello,
> I'm Giovanni from ROMA..
>
> I can't find a solution for the error:
>
> "error using packet 1
> the y field is not specified and it has not a default value"
> (this is my traslation from italian language)

You can always get messages in English (start R with LANGUAGE=en), and 
that does make it much easier for the helpers to find the exact message.

> The code is:
>
> pc<-    qqmath(~valori,
>        distribution=function(p) qweibull(p,beta,alpha),
>        prepanel = prepanel.qqmathline,
>        panel = function(x, y) {
>             panel.grid()
>             panel.qqmathline(y, distribution = function(p)
> qweibull(p,beta,alpha))
>             panel.qqmath(x, y)
>           },
>        layout = c( 1,1), aspect = 0.8,
>        xlab = "Unit Weibull Quantile", ylab = "D"
>    )
>
>
> Thanks for your regard,
> Giovanni
> -- 
> View this message in context: http://www.nabble.com/%22error-using-packet-1%22-tp19197960p19197960.html
> Sent from the R devel mailing list archive at Nabble.com.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From hb at stat.berkeley.edu  Thu Aug 28 19:19:37 2008
From: hb at stat.berkeley.edu (Henrik Bengtsson)
Date: Thu, 28 Aug 2008 10:19:37 -0700
Subject: [Rd] Can the file locking in filehash be reused? (Was: Re: [R]
	[R-pkgs] filehash 2.0)
Message-ID: <59d7961d0808281019m73276efi28d034f80ff2ca76@mail.gmail.com>

Hi (Roger),

I saw the announcement of filehash v2.0 and the sentence "This
development has lead to better file locking for concurrent access and
faster reading and writing of data in general" caught my attention.
What kind of file locking do you refer to here?

I am looking for a mechanism that can be used to lock files for
reading and/or writing, and I'd love to have a cross platform
solution. Your package is available on "all" platforms - is your file
locking mechanism too?  Is there an internal API that could be
resused?

Cheers

Henrik



On Wed, Aug 27, 2008 at 7:35 PM, Roger D. Peng <rpeng at jhsph.edu> wrote:
> I have just uploaded to CRAN version 2.0 of the 'filehash' package.
> This version contains a major rewriting of many of the internals (much
> rewritten in C) for the DB1 format, which is the default.  This
> development has lead to better file locking for concurrent access and
> faster reading and writing of data in general.
>
> In addition to rewriting the internals, I have added two modules for a
> stack and queue data structure, implemented using 'filehash'
> databases.  These are mostly for my own amusement, but perhaps you
> will find them useful also.
>
> For users of the 'filehash' package I would appreciate any general
> comments as well as any bug reports, particularly considering the
> number of changes that were made to the internals this time around.
>
> -roger
>
> --
> Roger D. Peng | http://www.biostat.jhsph.edu/~rpeng/
>
> _______________________________________________
> R-packages mailing list
> R-packages at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-packages
>
> ______________________________________________
> R-help at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From fox_jgigtp at trashmail.net  Thu Aug 28 21:25:12 2008
From: fox_jgigtp at trashmail.net (fox_jgigtp at trashmail.net)
Date: Thu, 28 Aug 2008 21:25:12 +0200 (CEST)
Subject: [Rd] locale2charset CPU overhead (PR#12633)
Message-ID: <20080828192512.CC4D2282C76C@mail.pubhealth.ku.dk>

Full_Name: R User
Version: 2.7.2 (default binary)
OS: Windows XP SP2
Submission from: (NULL) (83.25.29.163)


Hello!

I have conducted following experiment running simple R script:

for (i in 1:10000) {
    a<-0
   for (j in 1:1000)
     a<-c(a,j)
}

profiled R.dll using Intel Vtune and obtained following results!!!

Func. Name              Clocticks
locale2charset	        46,58%	
R_RunWeakRefFinalizer	20,85%	
Rf_eval		        8,77%	

Rf_eval takes only about 9% of CPU time, a huge overhead on checking 
locale character set!!! It seems that is the problem with family of 
functions: c(), rbind(), cbind()


From bill at insightful.com  Thu Aug 28 23:28:29 2008
From: bill at insightful.com (Bill Dunlap)
Date: Thu, 28 Aug 2008 14:28:29 -0700 (PDT)
Subject: [Rd] (PR#12628) Second X11 call with invalid display crashes R
 after first X11 call.
In-Reply-To: <alpine.LFD.1.10.0808281102020.15220@auk.stats.ox.ac.uk>
References: <20080828085510.0B8F1282C765@mail.pubhealth.ku.dk>
	<alpine.LFD.1.10.0808281102020.15220@auk.stats.ox.ac.uk>
Message-ID: <Pine.GSO.4.56.0808281359120.16731@devsun3201.insightful.com>

On Thu, 28 Aug 2008, Prof Brian Ripley wrote:

> This is an Xt error, whereas the first one is an Xlib error.  It is easy
> to trap it.
>
> You do realize that this will never work?  In the current setup all open
> X11 devices must be on the same display, and 'display' is ignored if a
> device is already open.  (I don't know if that is documented: I did not
> write the Xlib device nor the help page.)

I have a different problem with the x11() bringing
down R when $DISPLAY does not refer to a valid X
server.  I typically sit at a Windows laptop running
a Cygwin X server and use the ssh client/terminal
emulator program 'putty' to run a shell on on Linux,
where I run R.  Putty tunnels X protocol and sets
DISPLAY (to something like localhost:11.0) whether or
not the PC's X server is running.  If I have forgotten
to start the PC's X server R currently shuts down when
I try to start x11() or the tcl/tk stuff that
available.packages() runs.  E.g.,
  > x11()
  X connection to localhost:11.0 broken (explicit kill or server shutdown).
  linuxPrompt%

If I call the XIOErrorHandler(R_X11IOErr) before calling XOpenDisplay()
(in src/modules/X11/devX11.c) then I can trap that error
and have x11() throw an ordinary R error:
  > x11()
  Error in x11() : X11 I/O error while opening device "localhost:11.0"
  >

The following patch sets the IOErrorHandler before XOpenDisplay
and changes the handler a bit so it doesn't assume that some
global variables have been set yet.

It doesn't help the problem in available.packages().  That must
make its own unprotected call to XOpenDisplay().

Index: src/modules/X11/devX11.c
===================================================================
--- src/modules/X11/devX11.c	(revision 46454)
+++ src/modules/X11/devX11.c	(working copy)
@@ -1080,19 +1080,30 @@

 static int R_X11IOErr(Display *dsp)
 {
-    int fd = ConnectionNumber(display);
-    /*
-    while (nfonts--)  R_XFreeFont(display, fontcache[nfonts].font);
-    nfonts = 0;
-    */
-    removeInputHandler(&R_InputHandlers,
-		       getInputHandler(R_InputHandlers,fd));
-    /*
-    XCloseDisplay(display);
-    displayOpen = FALSE;
-    strcpy(dspname, "");
-    */
-    error(_("X11 fatal IO error: please save work and shut down R"));
+    int fd ;
+    /* display is only set after successful call to XOpenDisplay.
+     * If it is non-null I think it should be the same as dsp, but
+     * display==NULL & dsp!=NULL means that we have run into a problem
+     * while executing XOpenDisplay.
+     */
+    if (display && displayOpen) {
+       fd = ConnectionNumber(display);
+       /*
+       while (nfonts--)  R_XFreeFont(display, fontcache[nfonts].font);
+       nfonts = 0;
+       */
+       removeInputHandler(&R_InputHandlers,
+		          getInputHandler(R_InputHandlers,fd));
+       /*
+       XCloseDisplay(display);
+       displayOpen = FALSE;
+       strcpy(dspname, "");
+       */
+       error(_("X11 fatal IO error: please save work and shut down R"));
+    } else if (dsp) { /* In XOpenDisplay() is the intent */
+       char *devname =  XDisplayName(dspname) ;
+       error(_("X11 I/O error while opening device \"%s\""), devname);
+    }
     return 0; /* but should never get here */
 }

@@ -1247,15 +1258,21 @@
     /* initialize the X11 device driver data structures. */

     if (!displayOpen) {
+        /* Set IOErrorHandler before trying to open the display
+         * just in case DISPLAY is putty tunnelling X11 protocol
+         * to a machine that is not runing an X server.  Set dspname
+         * now so R_X11IOErr can show it to user. */
+	XSetIOErrorHandler(R_X11IOErr);
+	strncpy(dspname, p, 101);
+	dspname[100] = '\0';
 	if ((display = XOpenDisplay(p)) == NULL) {
+            dspname[0] = '\0' ;
 	    warning(_("unable to open connection to X11 display '%s'"), p);
 	    return FALSE;
 	}
 	DisplayOpened = TRUE;
 	Rf_setX11Display(display, gamma_fac, colormodel, maxcube, TRUE);
 	displayOpen = TRUE;
-	strncpy(dspname, p, 101);
-	dspname[100] = '\0';
 	if(xd->handleOwnEvents == FALSE)
 	    addInputHandler(R_InputHandlers, ConnectionNumber(display),
 			    R_ProcessX11Events, XActivity);


From murdoch at stats.uwo.ca  Fri Aug 29 12:34:31 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Fri, 29 Aug 2008 06:34:31 -0400
Subject: [Rd] Defining environments within functions
In-Reply-To: <013d01c90965$d1821580$0401a8c0@CalderPC>
References: <48B60482.5010306@cornell.edu> <48B6812E.70809@stats.uwo.ca>
	<013d01c90965$d1821580$0401a8c0@CalderPC>
Message-ID: <48B7D0B7.9070901@stats.uwo.ca>

Matt Calder wrote:
> Duncan,
>
>     Sorry to be, well, nit picking, but I can't get your example to run. I 
> am a longtime Splus user and am only using R on the side. The concept of 
> environments is one I have yet to grasp. I think the example you are trying 
> to provide will illuminate things for me, but it doesn't source. The 
> definition of fnBuilder sources fine, though I am not sure what the 
> "commonArgs <- ..." is meant to do. Anyway, calling:
>   

That wasn't R code, it was pseudocode.  That's why I asked the original 
poster for a real example: pseudocode examples aren't useful.  But I 
shouldn't have posted one myself, I should just have stopped at the 
first paragraph.

Duncan Murdoch
>   
>> both <- fnBuilder(...)
>>     
> Error: '...' used in an incorrect context
>
> and so I though, maybe you meant:
>
>   
>> both <- fnBuilder(c(1,2,3))
>>     
> Error in fnBuilder(c(1, 2, 3)) : '...' used in an incorrect context
>
> But then I thought you were perhaps using "..." as a placeholder not as 
> syntax and so I have little idea what it is you are trying to show. Could 
> you clarify what your example is demonstrating in regards to scoping?
>
>     So far, I have found the only part of R my Splus knowledge doesn't 
> translate is in regard to this sort of thing. I can't tell you how much pain 
> translating "substitute" idioms into R has caused me. Thanks,
>
>     Matt
>
>
>
>
> ----- Original Message ----- 
> From: "Duncan Murdoch" <murdoch at stats.uwo.ca>
> To: <gjh27 at cornell.edu>
> Cc: <r-devel at r-project.org>
> Sent: Thursday, August 28, 2008 5:42 AM
> Subject: Re: [Rd] Defining environments within functions
>
>
>   
>> Giles Hooker wrote:
>>     
>>> How can I define environments within a function so that they are visible
>>> to calls to a sub-function?
>>>
>>>       
>> I think you need to give a simplified, runnable example.  (Or at least 
>> runnable until it hits the scoping problem you've got.)  "Sub-function" 
>> isn't R terminology, and it's not clear what you mean by it.
>>
>> In R, you rarely need to work with environments explicitly.  You just 
>> define functions in the same location and they share the same environment. 
>> For example,
>>
>> fnBuilder <- function(commonArgs) {
>>  commonVars <- ...
>>  ProfileErr <- function(params, ...) {}
>>  coefs <- function(params, ...) {}
>>  return(list(ProfileErr, coefs))
>> }
>>
>> both <- fnBuilder(...)
>> ProfileErr <- both[[1]]
>> coefs <- both[[2]]
>>
>> Now ProfileErr and coefs share the same environment, and both can see (and 
>> modify) commonArgs and commonVars.
>>
>> Duncan Murdoch
>>
>>
>>     
>>> I have defined an objective function,
>>>
>>> ProfileErr = function(params,...)
>>>
>>> which I would like to optimize using standard routines (optim,
>>> nlminb,....) but which contains auxiliary variables which need to be
>>> updated along with params. No optimization routine in R that I have
>>> found has facilities for this.
>>>
>>> Specifically, within ProfileErr, I need to calculate
>>>
>>>   coefs(params,...)
>>>
>>> This a function which requires a further optimization, and I can achieve
>>> significant efficiency gains by starting  where the last optimization
>>> ended, so I would like to keep track of it.
>>>
>>> At the command line, I get around this by
>>>
>>> ProfileEnv = new.env()
>>> assign('coefs',coefs,3,ProfileEnv)
>>>
>>> and within ProfileErr, I can call
>>>
>>> startcoefs = get('coefs',envir=ProfileEnv)
>>> * do the optimization to get newcoefs *
>>> assign('coefs',newcoefs,3,ProfileEnv)
>>>
>>> Then calling
>>>
>>> optim(pars,ProfileErr,....)
>>>
>>> works fine. However, when I try to wrap all of that in its own function
>>>
>>> profile.estimate = fn(pars,...){
>>> ProfileEnv = new.env()
>>> assign('coefs',coefs,3,ProfileEnv)
>>>
>>> res = optim(pars,ProfileErr,....)
>>> }
>>>
>>>
>>> ProfileErr no longer sees ProfileEnv. I haven't been able to make much
>>> sense out of the documentation on environments, but is there a way to
>>> make this work? Otherwise I'm back to writing variables out to files.
>>>
>>> Many thanks,
>>>
>>> Giles
>>>
>>>
>>>
>>>       
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>     
>
>


From dutangc at gmail.com  Fri Aug 29 12:44:18 2008
From: dutangc at gmail.com (christophe dutang)
Date: Fri, 29 Aug 2008 12:44:18 +0200
Subject: [Rd] non user-friendly error for chol2inv functions
Message-ID: <c8e8cd3d0808290344p305ff0f0q8bb6aa328ece82ad@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080829/6f186f3b/attachment.pl>

From murdoch at stats.uwo.ca  Fri Aug 29 13:20:27 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Fri, 29 Aug 2008 07:20:27 -0400
Subject: [Rd] Defining environments within functions
In-Reply-To: <48B7D4DA.7030706@cornell.edu>
References: <48B60482.5010306@cornell.edu> <48B6812E.70809@stats.uwo.ca>
	<48B7D4DA.7030706@cornell.edu>
Message-ID: <48B7DB7B.2060701@stats.uwo.ca>

On 29/08/2008 6:52 AM, Giles Hooker wrote:
> Thanks,
> 
> I think I over-emphasized the secondary function, but I can generate the 
> scoping problem as follows. First, at the command line, I can get a 
> function to access objects that were not in its arguments by
> 
> ProfileEnv = new.env()
> hello.world = "Hello World"
> assign('hello.world',hello.world,3,envir=ProfileEnv)
> 
> fn1 = function()
> {
> 	hw = get('hello.world',envir=ProfileEnv)
> 	print(hw)
> }
> 
> and then call
> 
>  > fn1()
> [1] "Hello World"
> 
> 
> Now I want to define a wrapper function
> 
> fn2 = function()
> {
> 	ProfileEnv = new.env()
> 	hello.world = "Hello World"
> 	assign('hello.world',hello.world,3,envir=ProfileEnv)
> 
> 	fn1()
> }
> 
> and if I try
> 
>  > rm(ProfileEnv)                          # Just to be safe
>  > rm(hello.world)
>  > fn2()
> Error in get("hello.world", envir = ProfileEnv) :
>    object "ProfileEnv" not found

In fn2, you have a local variable called ProfileEnv.  You defined fn1 in 
the global environment, so it can't see it.  Everything would work if 
you defined fn1 within fn2.

A more natural way to do this is not to explicitly use environments. 
Just use the natural lexical scoping in R.  In the example below, I've 
also added a counter variable, to answer your other question.

 > buildfn1 <- function() {
+   hello.world <- "Hello World"
+   counter <- 0
+
+   fn1 <- function() {
+     print(hello.world)
+     counter <<- counter + 1 # note superassignment <<-
+     print(counter)
+   }
+
+   return(fn1)
+ }
 >
 > fn1 <- buildfn1()
 > fn1()
[1] "Hello World"
[1] 1
 > fn1()
[1] "Hello World"
[1] 2

Duncan Murdoch

> 
> In my actual code, fn1() is really a call to
> 
> optim(pars,ProfileErr,....)
> 
> and hello.world are quantities that were calculated the last time that 
> ProfileErr was called and that I want to keep track of.
> 
> As an alternative simple example, how would I keep a counter for the 
> number of times that optim (or any other generic optimizer) has called 
> ProfileErr?
> 
> giles
> 
>>> How can I define environments within a function so that they are visible
>>> to calls to a sub-function?
>>>   
>> I think you need to give a simplified, runnable example.  (Or at least 
>> runnable until it hits the scoping problem you've got.)  "Sub-function" 
>> isn't R terminology, and it's not clear what you mean by it.
>


From maechler at stat.math.ethz.ch  Fri Aug 29 13:56:02 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 29 Aug 2008 13:56:02 +0200
Subject: [Rd] non user-friendly error for chol2inv functions
In-Reply-To: <c8e8cd3d0808290344p305ff0f0q8bb6aa328ece82ad@mail.gmail.com>
References: <c8e8cd3d0808290344p305ff0f0q8bb6aa328ece82ad@mail.gmail.com>
Message-ID: <18615.58322.197666.775061@stat.math.ethz.ch>

>>>>> "cd" == christophe dutang <dutangc at gmail.com>
>>>>>     on Fri, 29 Aug 2008 12:44:18 +0200 writes:

    cd> Hi,
    cd> In function chol2inv with the option LINPACK set to false (default), it
    cd> raises an error when the matrix is 1x1 matrix (i.e. just a real) saying

    cd> 'a' must be a numeric matrix

It is very helpful, but you have to read and understand it.
I'm pretty sure you did not provide a  1 x 1 matrix.

Here's an example showing how things works :

> m <- matrix(4,1,1)
> cm <- chol(m)
> cm
     [,1]
[1,]    2
> chol2inv(cm)
     [,1]
[1,] 0.25
> 

Martin Maechler, ETH Zurich


    cd> This error is raised by the underlying C function (modLa_chol2inv in
    cd> function Lapack.c). Everything is normal, but I wonder if we could have
    cd> another behavior when we pass a 1x1 matrix. I spent time this morning
    cd> finding where was the error, and it was this "problem".

    cd> Thanks in advance

    cd> Christophe

    cd> [[alternative HTML version deleted]]

    cd> ______________________________________________
    cd> R-devel at r-project.org mailing list
    cd> https://stat.ethz.ch/mailman/listinfo/r-devel


From dutangc at gmail.com  Fri Aug 29 14:28:42 2008
From: dutangc at gmail.com (christophe dutang)
Date: Fri, 29 Aug 2008 14:28:42 +0200
Subject: [Rd] non user-friendly error for chol2inv functions
In-Reply-To: <18615.58322.197666.775061@stat.math.ethz.ch>
References: <c8e8cd3d0808290344p305ff0f0q8bb6aa328ece82ad@mail.gmail.com>
	<18615.58322.197666.775061@stat.math.ethz.ch>
Message-ID: <c8e8cd3d0808290528n65edc0f0s25c9b06f6f0833c7@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20080829/6c2c1235/attachment.pl>

From maechler at stat.math.ethz.ch  Fri Aug 29 15:00:01 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 29 Aug 2008 15:00:01 +0200
Subject: [Rd] non user-friendly error for chol2inv functions
In-Reply-To: <c8e8cd3d0808290528n65edc0f0s25c9b06f6f0833c7@mail.gmail.com>
References: <c8e8cd3d0808290344p305ff0f0q8bb6aa328ece82ad@mail.gmail.com>
	<18615.58322.197666.775061@stat.math.ethz.ch>
	<c8e8cd3d0808290528n65edc0f0s25c9b06f6f0833c7@mail.gmail.com>
Message-ID: <18615.62161.442217.18876@stat.math.ethz.ch>

>>>>> "cd" == christophe dutang <dutangc at gmail.com>
>>>>>     on Fri, 29 Aug 2008 14:28:42 +0200 writes:

    cd> Yes, I do not cast the first argument as a matrix with as.matrix function.
    cd> Maybe we could detail the error message if the first argument is a numeric?

    cd> error(_("'a' is a numeric and must be coerced to a numeric matrix"));

Merci, Christophe.   Yes, we *could* do that.
Alternatively, I think I will just make it work in that case,
since I see that 
      qr(), chol(), svd(), solve()  all 
treat a numeric (of length 1) as a  1 x 1 matrix automatically.

    cd> Thanks for your answer
De rien!
Martin

    cd> 2008/8/29 Martin Maechler <maechler at stat.math.ethz.ch>

    >> >>>>> "cd" == christophe dutang <dutangc at gmail.com>
    >> >>>>>     on Fri, 29 Aug 2008 12:44:18 +0200 writes:
    >> 
    cd> Hi,
    cd> In function chol2inv with the option LINPACK set to false (default),
    >> it
    cd> raises an error when the matrix is 1x1 matrix (i.e. just a real)
    >> saying
    >> 
    cd> 'a' must be a numeric matrix
    >> 
    >> It is very helpful, but you have to read and understand it.
    >> I'm pretty sure you did not provide a  1 x 1 matrix.
    >> 
    >> Here's an example showing how things works :
    >> 
    >> > m <- matrix(4,1,1)
    >> > cm <- chol(m)
    >> > cm
    >> [,1]
    >> [1,]    2
    >> > chol2inv(cm)
    >> [,1]
    >> [1,] 0.25
    >> >
    >> 
    >> Martin Maechler, ETH Zurich
    >> 
    >> 
    cd> This error is raised by the underlying C function (modLa_chol2inv in
    cd> function Lapack.c). Everything is normal, but I wonder if we could
    >> have
    cd> another behavior when we pass a 1x1 matrix. I spent time this
    >> morning
    cd> finding where was the error, and it was this "problem".
    >> 
    cd> Thanks in advance
    >> 
    cd> Christophe
    >> 
    cd> [[alternative HTML version deleted]]
    >> 
    cd> ______________________________________________
    cd> R-devel at r-project.org mailing list
    cd> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    cd> [[alternative HTML version deleted]]

    cd> ______________________________________________
    cd> R-devel at r-project.org mailing list
    cd> https://stat.ethz.ch/mailman/listinfo/r-devel


From gjh27 at cornell.edu  Fri Aug 29 12:52:10 2008
From: gjh27 at cornell.edu (Giles Hooker)
Date: Fri, 29 Aug 2008 06:52:10 -0400
Subject: [Rd] Defining environments within functions
In-Reply-To: <48B6812E.70809@stats.uwo.ca>
References: <48B60482.5010306@cornell.edu> <48B6812E.70809@stats.uwo.ca>
Message-ID: <48B7D4DA.7030706@cornell.edu>


Thanks,

I think I over-emphasized the secondary function, but I can generate the 
scoping problem as follows. First, at the command line, I can get a 
function to access objects that were not in its arguments by

ProfileEnv = new.env()
hello.world = "Hello World"
assign('hello.world',hello.world,3,envir=ProfileEnv)

fn1 = function()
{
	hw = get('hello.world',envir=ProfileEnv)
	print(hw)
}

and then call

 > fn1()
[1] "Hello World"


Now I want to define a wrapper function

fn2 = function()
{
	ProfileEnv = new.env()
	hello.world = "Hello World"
	assign('hello.world',hello.world,3,envir=ProfileEnv)

	fn1()
}

and if I try

 > rm(ProfileEnv)                          # Just to be safe
 > rm(hello.world)
 > fn2()
Error in get("hello.world", envir = ProfileEnv) :
   object "ProfileEnv" not found

In my actual code, fn1() is really a call to

optim(pars,ProfileErr,....)

and hello.world are quantities that were calculated the last time that 
ProfileErr was called and that I want to keep track of.

As an alternative simple example, how would I keep a counter for the 
number of times that optim (or any other generic optimizer) has called 
ProfileErr?

giles

>> How can I define environments within a function so that they are visible
>> to calls to a sub-function?
>>   
> 
> I think you need to give a simplified, runnable example.  (Or at least 
> runnable until it hits the scoping problem you've got.)  "Sub-function" 
> isn't R terminology, and it's not clear what you mean by it.

-- 
Giles Hooker
Assistant Professor:

Department of Biological Statistics and Computational Biology
Department of Statistical Science
1186 Comstock Hall
Cornell University
Ithaca, NY, 14853

Ph:  (+1 607) 255 1638
Fax: (+1 607) 255 4698

Email:  giles.hooker at cornell.edu


From Ted.Harding at manchester.ac.uk  Fri Aug 29 15:21:05 2008
From: Ted.Harding at manchester.ac.uk ( (Ted Harding))
Date: Fri, 29 Aug 2008 14:21:05 +0100 (BST)
Subject: [Rd] non user-friendly error for chol2inv functions
In-Reply-To: <18615.62161.442217.18876@stat.math.ethz.ch>
Message-ID: <XFMail.080829142105.Ted.Harding@manchester.ac.uk>

On 29-Aug-08 13:00:01, Martin Maechler wrote:
>>>>>> "cd" == christophe dutang <dutangc at gmail.com>
>>>>>>     on Fri, 29 Aug 2008 14:28:42 +0200 writes:
> 
> cd> Yes, I do not cast the first argument as a matrix with
> cd> as.matrix function.
> cd> Maybe we could detail the error message if the first
> cd> argument
> cd> is a numeric?
> 
> cd> error(_("'a' is a numeric and must be coerced to a numeric
> cd> matrix"));
> 
> Merci, Christophe.   Yes, we *could* do that.
> Alternatively, I think I will just make it work in that case,
> since I see that 
>       qr(), chol(), svd(), solve()  all 
> treat a numeric (of length 1) as a  1 x 1 matrix automatically.

I was about to draw attention to this "inconsistency"!
While one is about it, might it not be useful also to do
the converse: Treat a 1x1 matrix as a scalar in appropriate
contexts?

E.g.

  a <- 4
  A <- matrix(4,1,1)
  B <- matrix(c(1,2,3,4),2,2)
  a*B
#      [,1] [,2]
# [1,]    4   12
# [2,]    8   16

  a+B
#      [,1] [,2]
# [1,]    5    7
# [2,]    6    8

  A*B
# Error in A * B : non-conformable arrays
  A+B
# Error in A + B : non-conformable arrays

Ted. 


> 
>     cd> Thanks for your answer
> De rien!
> Martin
> 
>     cd> 2008/8/29 Martin Maechler <maechler at stat.math.ethz.ch>
> 
>     >> >>>>> "cd" == christophe dutang <dutangc at gmail.com>
>     >> >>>>>     on Fri, 29 Aug 2008 12:44:18 +0200 writes:
>     >> 
>     cd> Hi,
>     cd> In function chol2inv with the option LINPACK set to false
> (default),
>     >> it
>     cd> raises an error when the matrix is 1x1 matrix (i.e. just a
> real)
>     >> saying
>     >> 
>     cd> 'a' must be a numeric matrix
>     >> 
>     >> It is very helpful, but you have to read and understand it.
>     >> I'm pretty sure you did not provide a  1 x 1 matrix.
>     >> 
>     >> Here's an example showing how things works :
>     >> 
>     >> > m <- matrix(4,1,1)
>     >> > cm <- chol(m)
>     >> > cm
>     >> [,1]
>     >> [1,]    2
>     >> > chol2inv(cm)
>     >> [,1]
>     >> [1,] 0.25
>     >> >
>     >> 
>     >> Martin Maechler, ETH Zurich
>     >> 
>     >> 
>     cd> This error is raised by the underlying C function
> (modLa_chol2inv in
>     cd> function Lapack.c). Everything is normal, but I wonder if we
> could
>     >> have
>     cd> another behavior when we pass a 1x1 matrix. I spent time this
>     >> morning
>     cd> finding where was the error, and it was this "problem".
>     >> 
>     cd> Thanks in advance
>     >> 
>     cd> Christophe
>     >> 
>     cd> [[alternative HTML version deleted]]
>     >> 
>     cd> ______________________________________________
>     cd> R-devel at r-project.org mailing list
>     cd> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> 
> 
>     cd> [[alternative HTML version deleted]]
> 
>     cd> ______________________________________________
>     cd> R-devel at r-project.org mailing list
>     cd> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--------------------------------------------------------------------
E-Mail: (Ted Harding) <Ted.Harding at manchester.ac.uk>
Fax-to-email: +44 (0)870 094 0861
Date: 29-Aug-08                                       Time: 14:16:03
------------------------------ XFMail ------------------------------


From maechler at stat.math.ethz.ch  Fri Aug 29 15:27:01 2008
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 29 Aug 2008 15:27:01 +0200
Subject: [Rd] non user-friendly error for chol2inv functions
In-Reply-To: <XFMail.080829142105.Ted.Harding@manchester.ac.uk>
References: <18615.62161.442217.18876@stat.math.ethz.ch>
	<XFMail.080829142105.Ted.Harding@manchester.ac.uk>
Message-ID: <18615.63781.977338.875087@stat.math.ethz.ch>

>>>>> "TH" == Ted Harding <Ted.Harding at manchester.ac.uk>
>>>>>     on Fri, 29 Aug 2008 14:21:05 +0100 (BST) writes:

    TH> On 29-Aug-08 13:00:01, Martin Maechler wrote:
    >>>>>>> "cd" == christophe dutang <dutangc at gmail.com>
    >>>>>>> on Fri, 29 Aug 2008 14:28:42 +0200 writes:
    >> 
    cd> Yes, I do not cast the first argument as a matrix with
    cd> as.matrix function.
    cd> Maybe we could detail the error message if the first
    cd> argument
    cd> is a numeric?
    >> 
    cd> error(_("'a' is a numeric and must be coerced to a numeric
    cd> matrix"));
    >> 
    >> Merci, Christophe.   Yes, we *could* do that.
    >> Alternatively, I think I will just make it work in that case,
    >> since I see that 
    >> qr(), chol(), svd(), solve()  all 
    >> treat a numeric (of length 1) as a  1 x 1 matrix automatically.

    TH> I was about to draw attention to this "inconsistency"!
    TH> While one is about it, might it not be useful also to do
    TH> the converse: Treat a 1x1 matrix as a scalar in appropriate
    TH> contexts?

    TH> E.g.

    TH> a <- 4
    TH> A <- matrix(4,1,1)
    TH> B <- matrix(c(1,2,3,4),2,2)
    TH> a*B
    TH> #      [,1] [,2]
    TH> # [1,]    4   12
    TH> # [2,]    8   16

    TH> a+B
    TH> #      [,1] [,2]
    TH> # [1,]    5    7
    TH> # [2,]    6    8

    TH> A*B
    TH> # Error in A * B : non-conformable arrays
    TH> A+B
    TH> # Error in A + B : non-conformable arrays

    TH> Ted. 

I can only speak for myself and my own taste,
but I'd clearly not want that the above would just work.

I could agree of having it work  *WITH A WARNING* ...
particularly if there were more good arguments along your line
of thought..

Martin




    >> 
    cd> Thanks for your answer
    >> De rien!
    >> Martin
    >> 
    cd> 2008/8/29 Martin Maechler <maechler at stat.math.ethz.ch>
    >> 
    >> >> >>>>> "cd" == christophe dutang <dutangc at gmail.com>
    >> >> >>>>>     on Fri, 29 Aug 2008 12:44:18 +0200 writes:
    >> >> 
    cd> Hi,
    cd> In function chol2inv with the option LINPACK set to false
    >> (default),
    >> >> it
    cd> raises an error when the matrix is 1x1 matrix (i.e. just a
    >> real)
    >> >> saying
    >> >> 
    cd> 'a' must be a numeric matrix
    >> >> 
    >> >> It is very helpful, but you have to read and understand it.
    >> >> I'm pretty sure you did not provide a  1 x 1 matrix.
    >> >> 
    >> >> Here's an example showing how things works :
    >> >> 
    >> >> > m <- matrix(4,1,1)
    >> >> > cm <- chol(m)
    >> >> > cm
    >> >> [,1]
    >> >> [1,]    2
    >> >> > chol2inv(cm)
    >> >> [,1]
    >> >> [1,] 0.25
    >> >> >
    >> >> 
    >> >> Martin Maechler, ETH Zurich
    >> >> 
    >> >> 
    cd> This error is raised by the underlying C function
    >> (modLa_chol2inv in
    cd> function Lapack.c). Everything is normal, but I wonder if we
    >> could
    >> >> have
    cd> another behavior when we pass a 1x1 matrix. I spent time this
    >> >> morning
    cd> finding where was the error, and it was this "problem".
    >> >> 
    cd> Thanks in advance
    >> >> 
    cd> Christophe
    >> >> 
    cd> [[alternative HTML version deleted]]
    >> >> 
    cd> ______________________________________________
    cd> R-devel at r-project.org mailing list
    cd> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >> 
    >> 
    cd> [[alternative HTML version deleted]]
    >> 
    cd> ______________________________________________
    cd> R-devel at r-project.org mailing list
    cd> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    TH> --------------------------------------------------------------------
    TH> E-Mail: (Ted Harding) <Ted.Harding at manchester.ac.uk>
    TH> Fax-to-email: +44 (0)870 094 0861
    TH> Date: 29-Aug-08                                       Time: 14:16:03
    TH> ------------------------------ XFMail ------------------------------

    TH> ______________________________________________
    TH> R-devel at r-project.org mailing list
    TH> https://stat.ethz.ch/mailman/listinfo/r-devel


From luke at stat.uiowa.edu  Fri Aug 29 15:44:29 2008
From: luke at stat.uiowa.edu (Luke Tierney)
Date: Fri, 29 Aug 2008 08:44:29 -0500 (CDT)
Subject: [Rd] Defining environments within functions
In-Reply-To: <48B7D4DA.7030706@cornell.edu>
References: <48B60482.5010306@cornell.edu> <48B6812E.70809@stats.uwo.ca>
	<48B7D4DA.7030706@cornell.edu>
Message-ID: <alpine.LFD.1.10.0808290841190.3121@nokomis.stat.uiowa.edu>

If you want to use this pattern repeatedly you can define something like

     makeFunWithCounter <- function(fun) {
 	counter <- 0
 	list(count = function() counter,
 	     fun = function(...) { counter <<- counter + 1; fun(...)})
     }

and then do

     > fwc <- makeFunWithCounter(function() print("Hello"))
     > f2 <- fwc$fun
     > f2()
     [1] "Hello"
     > f2()
     [1] "Hello"
     > f2()
     [1] "Hello"
     > fwc$count()
     [1] 3

If you only want to do it once you can use local,

     fwc <- local({
 	counter <- 0
 	fun <- function() { counter <<- counter + 1; print("Hello") }
 	list(count = function() counter, fun = fun)
     })

Best,

luke

On Fri, 29 Aug 2008, Giles Hooker wrote:

>
> Thanks,
>
> I think I over-emphasized the secondary function, but I can generate the 
> scoping problem as follows. First, at the command line, I can get a function 
> to access objects that were not in its arguments by
>
> ProfileEnv = new.env()
> hello.world = "Hello World"
> assign('hello.world',hello.world,3,envir=ProfileEnv)
>
> fn1 = function()
> {
> 	hw = get('hello.world',envir=ProfileEnv)
> 	print(hw)
> }
>
> and then call
>
>> fn1()
> [1] "Hello World"
>
>
> Now I want to define a wrapper function
>
> fn2 = function()
> {
> 	ProfileEnv = new.env()
> 	hello.world = "Hello World"
> 	assign('hello.world',hello.world,3,envir=ProfileEnv)
>
> 	fn1()
> }
>
> and if I try
>
>> rm(ProfileEnv)                          # Just to be safe
>> rm(hello.world)
>> fn2()
> Error in get("hello.world", envir = ProfileEnv) :
>  object "ProfileEnv" not found
>
> In my actual code, fn1() is really a call to
>
> optim(pars,ProfileErr,....)
>
> and hello.world are quantities that were calculated the last time that 
> ProfileErr was called and that I want to keep track of.
>
> As an alternative simple example, how would I keep a counter for the number 
> of times that optim (or any other generic optimizer) has called ProfileErr?
>
> giles
>
>>> How can I define environments within a function so that they are visible
>>> to calls to a sub-function?
>>> 
>> 
>> I think you need to give a simplified, runnable example.  (Or at least 
>> runnable until it hits the scoping problem you've got.)  "Sub-function" 
>> isn't R terminology, and it's not clear what you mean by it.
>
>

-- 
Luke Tierney
Chair, Statistics and Actuarial Science
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:      luke at stat.uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From tcallawa at redhat.com  Fri Aug 29 17:35:07 2008
From: tcallawa at redhat.com (tcallawa at redhat.com)
Date: Fri, 29 Aug 2008 17:35:07 +0200 (CEST)
Subject: [Rd] Security issue with javareconf script (PR#12636)
Message-ID: <20080829153507.3F046282C763@mail.pubhealth.ku.dk>

Full_Name: Tom Callaway
Version: 2.7.2
OS: Fedora 10 (Linux/x86_64)
Submission from: (NULL) (96.233.67.230)


Recently, Debian identified a security issue with the javareconf script in R. I
confirmed that this is still unfixed in R 2.7.2.

The following patch resolves the issue:

diff -up R-2.7.2/src/scripts/javareconf.BAD R-2.7.1/src/scripts/javareconf
--- R-2.7.2/src/scripts/javareconf.BAD  2008-08-29 11:04:21.000000000 -0400
+++ R-2.7.2/src/scripts/javareconf	2008-08-29 11:05:34.000000000 -0400
@@ -125,16 +125,17 @@ fi
 javac_works='not present'
 if test -n "$JAVAC"; then
     javac_works='not functional'
-    rm -rf /tmp/A.java /tmp/A.class
-    echo "public class A { }" > /tmp/A.java
-    if test -e /tmp/A.java; then
-	if "${JAVAC}" /tmp/A.java >/dev/null; then
-           if test -e /tmp/A.class; then
+    tempdir=`mktemp -d`
+    echo "public class A { }" > ${tempdir}/A.java
+    if test -e ${tempdir}/A.java; then
+	if "${JAVAC}" ${tempdir}/A.java >/dev/null; then
+           if test -e ${tempdir}/A.class; then
                javac_works=yes
            fi
	fi
     fi
-    rm -rf /tmp/A.java /tmp/A.class
+    rm -rf ${tempdir}
+
 fi
 if test "${javac_works}" = yes; then
     echo "Java compiler    : ${JAVAC}"


From mwkimpel at gmail.com  Fri Aug 29 18:22:26 2008
From: mwkimpel at gmail.com (Mark Kimpel)
Date: Fri, 29 Aug 2008 12:22:26 -0400
Subject: [Rd] specifying compiler path in configure
In-Reply-To: <alpine.LFD.1.10.0808272133040.27712@gannet.stats.ox.ac.uk>
References: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>
	<alpine.LFD.1.10.0808272133040.27712@gannet.stats.ox.ac.uk>
Message-ID: <6b93d1830808290922l12e7d611i3e37d1e3fa9489f8@mail.gmail.com>

After reading over the relevant sections of the manual more carefully,
I now see where the information is presented and I was able to get R
to compile with an alternate version of gcc. On thing, however,
remains unclear to me. If R is compiled with a non-default version of
a compiler, are subsequent add-on packages and updated automatically
directed to use the alternate or is it necessary to include this
information in 'install.packages' and 'update.packages'? If the
latter, then it is unclear to me how this is accomplished. Below is my
best attempt at putting this instruction into install.packages and it
failed to produce the intended result, with gcc-4.3 being used instead
of 4.2.

 install.packages("affxparser", repos=repos,configure.args =
c('CC=/usr/bin/gcc-4.2', 'CXX=/usr/bin/g++-4.2'))

Thanks, Mark

On Wed, Aug 27, 2008 at 4:38 PM, Prof Brian Ripley
<ripley at stats.ox.ac.uk> wrote:
> On Wed, 27 Aug 2008, Mark Kimpel wrote:
>
>> I'm having trouble building some packages while running Debian Lenny
>> (testing) and suspect that the issues are related to the default use
>> of gcc-4.3.
>
> You might want to compare your problems with the CRAN checks at
>
> http://cran.r-project.org/web/checks/check_summary.html
>
> as those are run with gcc 4.3.x on Debian testing.  From memory, the
> problems are confined to C++-(mis)using packages.
>
>> With Lenny, build-essentials depends on 4.3, so I'd like
>> to leave it installed but have also installed 4.2.1. How do I tell
>> ./configure the path to 4.2.1 ? I"m sure it's an option, but I don't
>> see it documented in the R-admin manual.
>
> From configure --help:
>
>  CC          C compiler command
>  CFLAGS      C compiler flags
>
> There are many examples of setting CC in the R-admin manual, and the first
> para of 'Essential Programs' seems to me to tell you that as well.
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
> University of Oxford,             Tel:  +44 1865 272861 (self)
> 1 South Parks Road,                     +44 1865 272866 (PA)
> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>



-- 
Mark W. Kimpel MD ** Neuroinformatics ** Dept. of Psychiatry
Indiana University School of Medicine

15032 Hunter Court, Westfield, IN 46074

(317) 490-5129 Work, & Mobile & VoiceMail
(317) 663-0513 Home (no voice mail please)


From edd at debian.org  Fri Aug 29 19:52:58 2008
From: edd at debian.org (Dirk Eddelbuettel)
Date: Fri, 29 Aug 2008 12:52:58 -0500
Subject: [Rd] Security issue with javareconf script (PR#12636)
In-Reply-To: <20080829153507.3F046282C763@mail.pubhealth.ku.dk>
References: <20080829153507.3F046282C763@mail.pubhealth.ku.dk>
Message-ID: <18616.14202.14321.260957@ron.nulle.part>


On 29 August 2008 at 17:35, tcallawa at redhat.com wrote:
| Full_Name: Tom Callaway
| Version: 2.7.2
| OS: Fedora 10 (Linux/x86_64)
| Submission from: (NULL) (96.233.67.230)
| 
| 
| Recently, Debian identified a security issue with the javareconf script in R. 

Yes, somewhat launched a massive list of bug reports against all script using
plain /tmp.  The fact that javareconf already rm's the file just before
creation leaves just a tiny tiny tiny window -- but I didn't argue this with
our folks either as the patch (almost like yours) is easy enough.

| I confirmed that this is still unfixed in R 2.7.2.
| 
| The following patch resolves the issue:
| 
| diff -up R-2.7.2/src/scripts/javareconf.BAD R-2.7.1/src/scripts/javareconf
| --- R-2.7.2/src/scripts/javareconf.BAD  2008-08-29 11:04:21.000000000 -0400
| +++ R-2.7.2/src/scripts/javareconf	2008-08-29 11:05:34.000000000 -0400
| @@ -125,16 +125,17 @@ fi
|  javac_works='not present'
|  if test -n "$JAVAC"; then
|      javac_works='not functional'
| -    rm -rf /tmp/A.java /tmp/A.class
| -    echo "public class A { }" > /tmp/A.java
| -    if test -e /tmp/A.java; then
| -	if "${JAVAC}" /tmp/A.java >/dev/null; then
| -           if test -e /tmp/A.class; then
| +    tempdir=`mktemp -d`

"mktemp -d -t" is preferable, and that is what out patch does. 

I reported this to Simon off-list. The trouble is that such a patch, at the R
source level, would require mktemp to be present on all system which is not a
given.  So I suggested to Simon to add a function that will use mktemp where
available and 'does something else' otherwise.  I have not heard back yet.

Dirk


| +    echo "public class A { }" > ${tempdir}/A.java
| +    if test -e ${tempdir}/A.java; then
| +	if "${JAVAC}" ${tempdir}/A.java >/dev/null; then
| +           if test -e ${tempdir}/A.class; then
|                 javac_works=yes
|             fi
| 	fi
|      fi
| -    rm -rf /tmp/A.java /tmp/A.class
| +    rm -rf ${tempdir}
| +
|  fi
|  if test "${javac_works}" = yes; then
|      echo "Java compiler    : ${JAVAC}"
| 
| ______________________________________________
| R-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Three out of two people have difficulties with fractions.


From p.dalgaard at biostat.ku.dk  Fri Aug 29 20:04:38 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Fri, 29 Aug 2008 20:04:38 +0200
Subject: [Rd] Security issue with javareconf script (PR#12636)
In-Reply-To: <20080829153507.3F046282C763@mail.pubhealth.ku.dk>
References: <20080829153507.3F046282C763@mail.pubhealth.ku.dk>
Message-ID: <48B83A36.8020902@biostat.ku.dk>

tcallawa at redhat.com wrote:
> Full_Name: Tom Callaway
> Version: 2.7.2
> OS: Fedora 10 (Linux/x86_64)
> Submission from: (NULL) (96.233.67.230)
>
>
> Recently, Debian identified a security issue with the javareconf script in R. I
> confirmed that this is still unfixed in R 2.7.2.
>
> The following patch resolves the issue:
>
> diff -up R-2.7.2/src/scripts/javareconf.BAD R-2.7.1/src/scripts/javareconf
> --- R-2.7.2/src/scripts/javareconf.BAD  2008-08-29 11:04:21.000000000 -0400
> +++ R-2.7.2/src/scripts/javareconf	2008-08-29 11:05:34.000000000 -0400
> @@ -125,16 +125,17 @@ fi
>  javac_works='not present'
>  if test -n "$JAVAC"; then
>      javac_works='not functional'
> -    rm -rf /tmp/A.java /tmp/A.class
> -    echo "public class A { }" > /tmp/A.java
> -    if test -e /tmp/A.java; then
> -	if "${JAVAC}" /tmp/A.java >/dev/null; then
> -           if test -e /tmp/A.class; then
> +    tempdir=`mktemp -d`
> +    echo "public class A { }" > ${tempdir}/A.java
> +    if test -e ${tempdir}/A.java; then
> +	if "${JAVAC}" ${tempdir}/A.java >/dev/null; then
> +           if test -e ${tempdir}/A.class; then
>                 javac_works=yes
>             fi
> 	fi
>      fi
> -    rm -rf /tmp/A.java /tmp/A.class
> +    rm -rf ${tempdir}
> +
>  fi
>  if test "${javac_works}" = yes; then
>      echo "Java compiler    : ${JAVAC}"
>   
OK, committed. Not the easiest hole to exploit, I'd say (notice that we 
only compile something, not execute it).


.....

Oh, sh*! This is not portable! Needs code like INSTALL. Will refix.

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From ana.marcos at uam.es  Fri Aug 29 19:30:12 2008
From: ana.marcos at uam.es (ana.marcos at uam.es)
Date: Fri, 29 Aug 2008 19:30:12 +0200 (CEST)
Subject: [Rd] coxph function (Survival Library) (PR#12638)
Message-ID: <20080829173012.ECE16282C763@mail.pubhealth.ku.dk>

Hi,

I am pretty sure that the results of Likelihood ratio test are bigger 
than the real value. They are multiplied for the factor Ln(10), in this 
way the p-values are smaller than what they should be.
The reason is that you apply the formula -2*log(exp(L(0)/exp(L(B)) and 
not  what it should be -2*log(L(0)/L(B)).

Please if I am not right, tell me

Thanks

Ana


From rubinson at u.arizona.edu  Fri Aug 29 19:36:30 2008
From: rubinson at u.arizona.edu (Claude Rubinson)
Date: Fri, 29 Aug 2008 10:36:30 -0700
Subject: [Rd] R 2.7.2 for Windows fails to install local zip
	package	(PR#12612)
In-Reply-To: <48B53263.6080504@stats.uwo.ca>
References: <20080826200018.1C858282C76C@mail.pubhealth.ku.dk>
	<48B53263.6080504@stats.uwo.ca>
Message-ID: <20080829173630.GM20876@wagner>

On Wed, Aug 27, 2008 at 06:54:27AM -0400, Duncan Murdoch wrote:
> rubinson at u.arizona.edu wrote:
>> R version 2.7.2 for Windows fails to install local (zipped) packages
>> with following messages:
>>
>>   
>>> utils:::menuInstallLocal()
>>>     
>> updating HTML package descriptions
>> Error in .readRDS(pfile) : error reading from connection
>>   
> It works for me.  I suspect you have permissions problems. 

It appears that it may have been a problem in how I was compiling the
Windows-version of the package.  I'll let you know if the error rears
its head again.

Claude


From rubinson at u.arizona.edu  Fri Aug 29 19:45:15 2008
From: rubinson at u.arizona.edu (rubinson at u.arizona.edu)
Date: Fri, 29 Aug 2008 19:45:15 +0200 (CEST)
Subject: [Rd] R 2.7.2 for Windows fails to install local zip package
	(PR#12639)
Message-ID: <20080829174516.4924A282C763@mail.pubhealth.ku.dk>

On Wed, Aug 27, 2008 at 06:54:27AM -0400, Duncan Murdoch wrote:
> rubinson at u.arizona.edu wrote:
>> R version 2.7.2 for Windows fails to install local (zipped) packages
>> with following messages:
>>
>>   
>>> utils:::menuInstallLocal()
>>>     
>> updating HTML package descriptions
>> Error in .readRDS(pfile) : error reading from connection
>>   
> It works for me.  I suspect you have permissions problems. 

It appears that it may have been a problem in how I was compiling the
Windows-version of the package.  I'll let you know if the error rears
its head again.

Claude


From tcallawa at redhat.com  Fri Aug 29 21:22:00 2008
From: tcallawa at redhat.com (Tom "spot" Callaway)
Date: Fri, 29 Aug 2008 15:22:00 -0400
Subject: [Rd] Security issue with javareconf script (PR#12636)
In-Reply-To: <48B83A36.8020902@biostat.ku.dk>
References: <20080829153507.3F046282C763@mail.pubhealth.ku.dk>
	<48B83A36.8020902@biostat.ku.dk>
Message-ID: <1220037720.11232.1.camel@localhost.localdomain>

On Fri, 2008-08-29 at 20:04 +0200, Peter Dalgaard wrote:
> OK, committed. Not the easiest hole to exploit, I'd say (notice that
> we 
> only compile something, not execute it).
> 
> 
> .....
> 
> Oh, sh*! This is not portable! Needs code like INSTALL. Will refix.

Sorry about that. I forgot that people cared about *nix that has a
supported Java but no mktemp implementation... :)

~spot


From hb at stat.berkeley.edu  Fri Aug 29 21:43:37 2008
From: hb at stat.berkeley.edu (Henrik Bengtsson)
Date: Fri, 29 Aug 2008 12:43:37 -0700
Subject: [Rd] serialize() to via temporary file is heaps faster than
	doing it directly (on Windows)
In-Reply-To: <59d7961d0807242010q6dd2d78emb34b222ce38938c0@mail.gmail.com>
References: <59d7961d0807242010q6dd2d78emb34b222ce38938c0@mail.gmail.com>
Message-ID: <59d7961d0808291243k6ec811beo82dbd6f7ecb407fe@mail.gmail.com>

I just want to re-post this thread in case it slipped through the
"summer sieve" of someone that might be interested and/or has a real
solution beyond my serialize2() patch.

Cheers

Henrik

On Thu, Jul 24, 2008 at 8:10 PM, Henrik Bengtsson <hb at stat.berkeley.edu> wrote:
> Hi,
>
> FYI, I just notice that on Windows (but not Linux) it is orders of
> magnitude (below it's 50x) faster to serialize() and object to a
> temporary file and then read it back, than to serialize to an object
> directly.  This has for instance impact on how fast digest::digest()
> can provide a checksum.
>
> Example:
> x <- 1:1e7;
> t1 <- system.time(raw1 <- serialize(x, connection=NULL));
> print(t1);
> #    user  system elapsed
> #   174.23  129.35  304.70  ## 5 minutes
> t2 <- system.time(raw2 <- serialize2(x, connection=NULL));
> print(t2);
> #     user  system elapsed
> #     2.19    0.18    5.72      ## 5 seconds
> print(t1/t2);
> #      user    system   elapsed
> #   79.55708 718.61111  53.26923
> stopifnot(identical(raw1, raw2));
>
> where serialize2() is serialize():ing to file and reading the results back:
>
> serialize2 <- function(object, connection, ...) {
>  if (is.null(connection)) {
>    # It is faster to serialize to a temporary file and read it back
>    pathname <- tempfile();
>    con <- file(pathname, open="wb");
>    on.exit({
>      if (!is.null(con))
>        close(con);
>      if (file.exists(pathname))
>        file.remove(pathname);
>    });
>    base::serialize(object, connection=con, ...);
>    close(con);
>    con <- NULL;
>    fileSize <- file.info(pathname)$size;
>    readBin(pathname, what="raw", n=fileSize);
>  } else {
>    base::serialize(object, connection=connection, ...);
>  }
> } # serialize2()
>
> The above benchmarking was done in a fresh R v2.7.1 session on WinXP Pro:
>
>> sessionInfo()
> R version 2.7.1 Patched (2008-06-27 r46012)
> i386-pc-mingw32
>
> locale:
> LC_COLLATE=English_United States.1252;LC_CTYPE=English_United States.1252;LC_MON
> ETARY=English_United States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
>
> When I do the same on a Linux machine there is no difference:
>
>> sessionInfo()
> R version 2.7.1 (2008-06-23)
> x86_64-unknown-linux-gnu
>
> locale:
> LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=C;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> Is there an obvious reason (and an obvious fix) for this?
>
> Cheers
>
> Henrik
>


From murdoch at stats.uwo.ca  Fri Aug 29 21:52:26 2008
From: murdoch at stats.uwo.ca (Duncan Murdoch)
Date: Fri, 29 Aug 2008 15:52:26 -0400
Subject: [Rd] locale2charset CPU overhead (PR#12633)
In-Reply-To: <20080828192512.CC4D2282C76C@mail.pubhealth.ku.dk>
References: <20080828192512.CC4D2282C76C@mail.pubhealth.ku.dk>
Message-ID: <48B8537A.30103@stats.uwo.ca>

On 8/28/2008 3:25 PM, fox_jgigtp at trashmail.net wrote:
> Full_Name: R User
> Version: 2.7.2 (default binary)
> OS: Windows XP SP2
> Submission from: (NULL) (83.25.29.163)
> 
> 
> Hello!
> 
> I have conducted following experiment running simple R script:
> 
> for (i in 1:10000) {
>     a<-0
>    for (j in 1:1000)
>      a<-c(a,j)
> }
> 
> profiled R.dll using Intel Vtune and obtained following results!!!
> 
> Func. Name              Clocticks
> locale2charset	        46,58%	
> R_RunWeakRefFinalizer	20,85%	
> Rf_eval		        8,77%	
> 
> Rf_eval takes only about 9% of CPU time, a huge overhead on checking 
> locale character set!!! It seems that is the problem with family of 
> functions: c(), rbind(), cbind()

I don't have Vtune, so I don't know that its clock counts are reliable. 
  Could you please identify where the calls to locale2charset are coming 
from?  I don't see anything obvious in the source that would explain 
this, so I suspect Vtune is misreporting.

If I were to guess, I would say your loop would be spending most of its 
time in memory management functions, since you allocate and reallocate 
"a" so many times.  Since those aren't even mentioned by Vtune, I think 
it is confused.

Duncan Murdoch


From p.dalgaard at biostat.ku.dk  Fri Aug 29 23:06:09 2008
From: p.dalgaard at biostat.ku.dk (Peter Dalgaard)
Date: Fri, 29 Aug 2008 23:06:09 +0200
Subject: [Rd] coxph function (Survival Library) (PR#12638)
In-Reply-To: <20080829173012.ECE16282C763@mail.pubhealth.ku.dk>
References: <20080829173012.ECE16282C763@mail.pubhealth.ku.dk>
Message-ID: <48B864C1.5070202@biostat.ku.dk>

ana.marcos at uam.es wrote:
> Hi,
>
> I am pretty sure that the results of Likelihood ratio test are bigger 
> than the real value. They are multiplied for the factor Ln(10), in this 
> way the p-values are smaller than what they should be.
> The reason is that you apply the formula -2*log(exp(L(0)/exp(L(B)) and 
> not  what it should be -2*log(L(0)/L(B)).
>
> Please if I am not right, tell me
>   

I don't think you are and please don't use the bug report system when 
you are not sure.

Notice that the conventions for the default base in "log" differ between 
countries (and even between education levels with countries). There's no 
indication that base 10 logs are used anywhere, so where would a factor 
of ln(10) creep in?

-- 
   O__  ---- Peter Dalgaard             ?ster Farimagsgade 5, Entr.B
  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
 (*) \(*) -- University of Copenhagen   Denmark      Ph:  (+45) 35327918
~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)              FAX: (+45) 35327907


From alex at apeironsports.com  Sat Aug 30 00:40:07 2008
From: alex at apeironsports.com (alex at apeironsports.com)
Date: Sat, 30 Aug 2008 00:40:07 +0200 (CEST)
Subject: [Rd] scan after seek in text files (PR#12640)
Message-ID: <20080829224007.5BB5E282EFF6@mail.pubhealth.ku.dk>

Full_Name: Dr. Alex Sheppard
Version: 2.7.1
OS: Linux Debian Lenny
Submission from: (NULL) (79.73.224.62)


After scanning from an open (text) connection, then seeking, then scanning
again, the second scan returns incorrect result. It looks like the first byte
scanned was from the pre-seek file position, then it continues to read from the
post-seek file position. 


To reproduce:

#Put 3x3 matrix in a file
> write.matrix(t(matrix(1:9,nrow=3)),file="TEST.txt",sep="\t")

#Open file as text
> fd <- file("TEST.txt",open="rt")

#scan a couple of fields - this looks fine so far
> scan(file=fd,what=double(),n=2)
Read 2 items
[1] 1 2

#seek back to start of file
> seek(con=fd,where=0,origin="start")
[1] 5

#scan fields again - this doesn't work properly
> scan(file=fd,what=double(),n=2)
Read 2 items
[1] 31  2

This happens when either n or nmax arguments are used to control number of
fields read. Problem does not occur when using nlines argument instead. The seek
appears to work ok, as doing readChar(fd,n=1) after the seek operation correctly
returns "1". 
Also, if the file is opened as binary, i.e. fd=file("TEST.txt",open="rb") , all
works fine.


From fox_fzseud at trashmail.net  Sat Aug 30 14:30:06 2008
From: fox_fzseud at trashmail.net (fox_fzseud at trashmail.net)
Date: Sat, 30 Aug 2008 14:30:06 +0200 (CEST)
Subject: [Rd] R embedded reinitialization error (PR#12644)
Message-ID: <20080830123006.927F2282EFC2@mail.pubhealth.ku.dk>

Full_Name: R Embedder
Version: 2.7.2 
OS: win XP SP 2
Submission from: (NULL) (83.25.35.249)


I'm having problems using embedded R. I try to adapt examples from
"tests/Embedding/".
Everything works fine except when I try to reinitialize R for the second time
in the same program. I need to reinitialize correctly because my code
is some kind of .dll plugin to an external application.
 
The simplest example I can provide is a modified tests/Embedding/Rplot.c file
with one line added.
Here each call to "eval_R_command" contains complete
initialization/deinitialization
of embedded R. Second call to eval_R_command fails:


//tests/Embedding/Rplot.c

#include "embeddedRCall.h"
int main(int argc, char *argv[]) {
    eval_R_command("plot", argc, argv); // this completes OK
    eval_R_command("plot", argc, argv); // this line is added and fails
    return(0);
} 

Output:
D:\R\tests\Embedding>rplot
Error in .Call("R_isMethodsDispatchOn", onOff, PACKAGE = "base") :
  Incorrect number of arguments (2), expecting 1 for R_isMethodsDispatchOn
Error: could not find function "plot"


Increasing stack size to 10 MB did not help.
I use latest Rtools gcc toolchain.


From ripley at stats.ox.ac.uk  Sun Aug 31 16:40:43 2008
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Sun, 31 Aug 2008 15:40:43 +0100 (BST)
Subject: [Rd] specifying compiler path in configure
In-Reply-To: <6b93d1830808290922l12e7d611i3e37d1e3fa9489f8@mail.gmail.com>
References: <6b93d1830808271321v27af0532w56b0d278b32073c@mail.gmail.com>
	<alpine.LFD.1.10.0808272133040.27712@gannet.stats.ox.ac.uk>
	<6b93d1830808290922l12e7d611i3e37d1e3fa9489f8@mail.gmail.com>
Message-ID: <alpine.LFD.1.10.0808311536400.2427@gannet.stats.ox.ac.uk>

On Fri, 29 Aug 2008, Mark Kimpel wrote:

> After reading over the relevant sections of the manual more carefully,
> I now see where the information is presented and I was able to get R
> to compile with an alternate version of gcc. On thing, however,
> remains unclear to me. If R is compiled with a non-default version of
> a compiler, are subsequent add-on packages and updated automatically
> directed to use the alternate or is it necessary to include this

R uses the compiler used to build it unless told otherwise.  That *is* the 
default, as far a R is concerned -- it knows about no other.

> information in 'install.packages' and 'update.packages'? If the
> latter, then it is unclear to me how this is accomplished. Below is my
> best attempt at putting this instruction into install.packages and it
> failed to produce the intended result, with gcc-4.3 being used instead
> of 4.2.
>
> install.packages("affxparser", repos=repos,configure.args =
> c('CC=/usr/bin/gcc-4.2', 'CXX=/usr/bin/g++-4.2'))

You set environment variables via Sys.setenv() ....

>
> Thanks, Mark
>
> On Wed, Aug 27, 2008 at 4:38 PM, Prof Brian Ripley
> <ripley at stats.ox.ac.uk> wrote:
>> On Wed, 27 Aug 2008, Mark Kimpel wrote:
>>
>>> I'm having trouble building some packages while running Debian Lenny
>>> (testing) and suspect that the issues are related to the default use
>>> of gcc-4.3.
>>
>> You might want to compare your problems with the CRAN checks at
>>
>> http://cran.r-project.org/web/checks/check_summary.html
>>
>> as those are run with gcc 4.3.x on Debian testing.  From memory, the
>> problems are confined to C++-(mis)using packages.
>>
>>> With Lenny, build-essentials depends on 4.3, so I'd like
>>> to leave it installed but have also installed 4.2.1. How do I tell
>>> ./configure the path to 4.2.1 ? I"m sure it's an option, but I don't
>>> see it documented in the R-admin manual.
>>
>> From configure --help:
>>
>>  CC          C compiler command
>>  CFLAGS      C compiler flags
>>
>> There are many examples of setting CC in the R-admin manual, and the first
>> para of 'Essential Programs' seems to me to tell you that as well.
>>
>> --
>> Brian D. Ripley,                  ripley at stats.ox.ac.uk
>> Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
>> University of Oxford,             Tel:  +44 1865 272861 (self)
>> 1 South Parks Road,                     +44 1865 272866 (PA)
>> Oxford OX1 3TG, UK                Fax:  +44 1865 272595
>>
>
>
>
> -- 
> Mark W. Kimpel MD ** Neuroinformatics ** Dept. of Psychiatry
> Indiana University School of Medicine
>
> 15032 Hunter Court, Westfield, IN 46074
>
> (317) 490-5129 Work, & Mobile & VoiceMail
> (317) 663-0513 Home (no voice mail please)
>
> ******************************************************************
>

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595


From gilescrane at verizon.net  Sun Aug 31 03:55:07 2008
From: gilescrane at verizon.net (gilescrane at verizon.net)
Date: Sun, 31 Aug 2008 03:55:07 +0200 (CEST)
Subject: [Rd] foreign package: read.epiinfo() (PR#12645)
Message-ID: <20080831015507.48D47282EFC2@mail.pubhealth.ku.dk>

Full_Name: Giles L. Crane
Version: 2.7.2
OS: WIndows XP
Submission from: (NULL) (96.248.112.112)


   In the foreign package, read.epiinfo() mistakenly reads the first character
of the heading lines as part of the variable name.  This first character of
the heading lines which define the variables indicates a fill character
used by ENTERX.EXE to initially fill fields on screen.  Typically this 
character may be underscore ("_"), or pound ("#").
   The function read.epiinfo() shouldbe fixed so that first character
is not part of the file name.
   The use of this character is well-documented in the EPI6 manual 
under the discussion of the .REC file heading.
Cordially,
GLC


