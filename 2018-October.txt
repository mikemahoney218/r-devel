From tom@@@k@liber@ @ending from gm@il@com  Mon Oct  1 09:54:14 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 1 Oct 2018 09:54:14 +0200
Subject: [Rd] 
 Query the pointer protection stack size (--max-ppsize=N) from
 within R?
In-Reply-To: <CAFDcVCTOJk+YFMej9Jg+BW4ggjAVqtRDJV-ZfGoaFvkrmQ=fxA@mail.gmail.com>
References: <CAFDcVCTOJk+YFMej9Jg+BW4ggjAVqtRDJV-ZfGoaFvkrmQ=fxA@mail.gmail.com>
Message-ID: <b64f0b29-bc79-c662-1f15-2467e6ee9f22@gmail.com>

I don't think this is possible. If you would like e.g. stricter checking 
for --max-ppsize argument value, please try to come up with some example 
that triggers such case.

Tomas

On 09/29/2018 06:41 PM, Henrik Bengtsson wrote:
> Hi,
>
> for simply for troubleshooting purposes (e.g. making sure that
> --max-ppsize=N) is set, is there a way to query the pointer protection
> stack size from R?  I tried to grep the source code and couldn't find
> anything, so I expect the answer is no.
>
> Thxs,
>
> Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From lbert@cco @ending from ti@c@li@it  Mon Oct  1 18:29:56 2018
From: lbert@cco @ending from ti@c@li@it (Livio Bertacco)
Date: Mon, 1 Oct 2018 18:29:56 +0200
Subject: [Rd] unexpected memory.limit on windows in embedded R
Message-ID: <CAL0dvtjUwjxgVxqJi=XeEroYTA+Hs33H98ZifiUw2B0eHZ6WQw@mail.gmail.com>

Dear All,
I'm linking R from another application and embedding it as described in the
R-exts manual, i.e. with initialization done via Rf_initEmbeddedR.
While everything works the same as in standalone R for Linux, under Windows
I found a difference in the default memory.limit, which is fixed to 2GB
(both win32 and win64) - compared to a limit in standalone R of 3.5GB for
win32 and 16GB on win64 (which is the amount of physical memory I have).

So I wonder if this is just undocumented (at least, I couldn't find any
mention of it) or unintentional.
All I could find is the following:
- man page of memory.limit doesn't mention a default 2GB limit, especially
not on win64;
- man page of memory.limit and rw-FAQ Q2.9 say that you can set the limit
via --max-mem-size or R_MAX_MEM_SIZE env var: both work only in standalone
R (Rf_initEmbeddedR ignores them);
- R\src\gnuwin32\system.c defines
    R_size_t R_max_memory = INT_MAX;
  which is the reason of the 2GB default limit on embedded R; however
INT_MAX is not the maximum integer value of an R_size_t variable either on
win32 nor on win64;
- line 879 of the same system.c source says: "/* set defaults for
R_max_memory. This is set here so that embedded applications get no limit
*/" (meaning that that code is executed only for standalone R) which
suggests that, at some point, the intention for embedded R was to impose no
limit by default and maybe the INT_MAX value is a mistake.

Thank you in advance,
Livio

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Tue Oct  2 12:06:44 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 2 Oct 2018 12:06:44 +0200
Subject: [Rd] 
 Suggested Patch: Adding commas to list of packages after R CMD check
In-Reply-To: <5d8e2a34-4f71-6002-8e50-09fed8a74c97@gmail.com>
References: <7e1e0dfa-714f-aab8-1011-4d32fcb1c5e6@roswellpark.org>
 <5d8e2a34-4f71-6002-8e50-09fed8a74c97@gmail.com>
Message-ID: <23475.17204.995406.118998@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Tue, 18 Sep 2018 16:23:47 -0400 writes:

> On 18/09/2018 2:16 PM, Marcel Ramos wrote:
> > Dear R-devs,
> > 
> > 
> > Scenario:
> > 
> > When checking a package via `R CMD check package_tar.ball`, required / suggested packages may be missing. R subsequently returns a list of packages that are missing (delimited by spaces).
> > 
> > Example:
> > 
> > ```
> > R CMD check glmSparseNet_0.99.13.tar.gz
> > * using log directory '/home/ubuntu/Bioconductor/glmSparseNet.Rcheck'
> > * using R Under development (unstable) (2018-06-06 r74855)
> > * using platform: x86_64-pc-linux-gnu (64-bit)
> > * using session charset: UTF-8
> > * checking for file 'glmSparseNet/DESCRIPTION' ... OK
> > * checking extension type ... Package
> > * this is package 'glmSparseNet' version '0.99.13'
> > * package encoding: UTF-8
> > * checking package namespace information ... OK
> > * checking package dependencies ... ERROR
> > Packages required but not available:
> >    'MultiAssayExperiment' 'glmnet' 'SummarizedExperiment' 'STRINGdb'
> >    'biomaRt' 'futile.logger' 'sparsebn' 'sparsebnUtils' 'forcats'
> >    'dplyr' 'readr' 'ggplot2' 'ggfortify' 'reshape2' 'rlang' 'loose.rock'
> > 
> > Packages suggested but not available:
> >    'testthat' 'knitr' 'rmarkdown' 'survcomp' 'pROC' 'devtools'
> >    'VennDiagram' 'BiocStyle' 'curatedTCGAData'
> > 
> > VignetteBuilder package required for checking but not installed: 'knitr'
> > 
> > The suggested packages are required for a complete check.
> > Checking can be attempted without them by setting the environment
> > variable _R_CHECK_FORCE_SUGGESTS_ to a false value.
> > 
> > See section 'The DESCRIPTION file' in the 'Writing R Extensions'
> > manual.
> > * DONE
> > 
> > Status: 1 ERROR
> > See
> >    '/home/ubuntu/Bioconductor/glmSparseNet.Rcheck/00check.log'
> > for details.
> > ```
> > 
> > 
> > Suggested Patch:
> > 
> > To return a list of missing dependencies delimited by a comma and a space (", ") so to make it easier for the user to copy and paste this list.
> > This would be especially helpful when the list of missing dependencies is extensive.

Your patch to *both* internal functions is small and in that
respect very nice, but it would effect really many of the R CMD
check messages.

I had been testing a modularized version of your proposed change
which only changes the defaults of  pretty_format2(.)   which
indeed is most often used in the context of listing package names.
In addition, I also did use regular quotes instead of the fancy
quotes there.

This has been committed to R-devel  (accidentally already
together with the \Sexpr{} related bug fix) in svn rev 75378, last Friday.


> This seems like a reasonable suggestion, considering how easy it is to do.
> 
> Another suggestion would be to (optionally) automatically install 
> missing dependencies.  I think the devtools::install_deps function will 
> do that.  (I don't use it, I have a homebrewed function for that purpose.)

> Duncan Murdoch

The new facilities (in R-devel only, by Luke Tierney) with NEWS entries

    ? Many ?package not found? errors are now signaled as errors of
      class packageNotFoundError.

    ? As an experimental feature, when loadNamespace() fails because
      the requested package is not available the error is initially
      signaled with a retry_loadNamespace restart available. This
      allows a calling handler to try to install the package and continue.

indeed should "easily" allow to go in that direction.

Thank you, Marcel and Duncan!

Martin

> 
> > 
> > 
> > Example output:
> > 
> > ```
> > R CMD check glmSparseNet_0.99.13.tar.gz
> > * using log directory '/home/ubuntu/Bioconductor/glmSparseNet.Rcheck'
> > * using R Under development (unstable) (2018-09-18 r75322)
> > * using platform: x86_64-pc-linux-gnu (64-bit)
> > * using session charset: UTF-8
> > * checking for file 'glmSparseNet/DESCRIPTION' ... OK
> > * checking extension type ... Package
> > * this is package 'glmSparseNet' version '0.99.13'
> > * package encoding: UTF-8
> > * checking package namespace information ... OK
> > * checking package dependencies ... ERROR
> > Packages required but not available:
> >    'MultiAssayExperiment', 'glmnet', 'SummarizedExperiment', 'STRINGdb',
> >    'biomaRt', 'futile.logger', 'sparsebn', 'sparsebnUtils', 'forcats',
> >    'dplyr', 'readr', 'ggplot2', 'ggfortify', 'reshape2', 'stringr',
> >    'rlang', 'loose.rock'
> > 
> > Packages suggested but not available:
> >    'testthat', 'knitr', 'rmarkdown', 'survcomp', 'pROC', 'devtools',
> >    'roxygen2', 'VennDiagram', 'BiocStyle', 'curatedTCGAData'
> > 
> > VignetteBuilder package required for checking but not installed: 'knitr'
> > 
> > The suggested packages are required for a complete check.
> > Checking can be attempted without them by setting the environment
> > variable _R_CHECK_FORCE_SUGGESTS_ to a false value.
> > 
> > See section 'The DESCRIPTION file' in the 'Writing R Extensions'
> > manual.
> > * DONE
> > 
> > Status: 1 ERROR
> > See
> >    '/home/ubuntu/Bioconductor/glmSparseNet.Rcheck/00check.log'
> > for details.
> > ```
> > 
> > 
> > svn diff:
> > 
> > 
> > Index: src/library/tools/R/QC.R
> > ===================================================================
> > --- src/library/tools/R/QC.R    (revision 75322)
> > +++ src/library/tools/R/QC.R    (working copy)
> > @@ -8536,13 +8536,13 @@
> >   .pretty_format <-
> >   function(x)
> >   {
> > -    strwrap(paste(sQuote(x), collapse = " "),
> > +    strwrap(paste(sQuote(x), collapse = ", "),
> >               indent = 2L, exdent = 2L)
> >   }
> >   .pretty_format2 <-
> >   function(msg, x)
> >   {
> > -    xx <- strwrap(paste(sQuote(x), collapse = " "), exdent = 2L)
> > +    xx <- strwrap(paste(sQuote(x), collapse = ", "), exdent = 2L)
> >       if (length(xx) > 1L || nchar(msg) + nchar(xx) + 1L > 75L)
> >           c(msg, .pretty_format(x))
> >       else paste(msg, xx)
> > 
> > 
> > 
> > PS. I would also advocate for setting `useFancyQuotes` to `FALSE` by default but it would be better to get more
> > input from the community.
> > 
> > Thanks!
> > 
> > 
> > Best regards,
> > 
> > Marcel
> > 
> > --
> > Marcel Ramos
> > Bioconductor Core Team
> > Roswell Park Comprehensive Care Center
> > Dept. of Biostatistics & Bioinformatics
> > Elm & Carlton Streets
> > Buffalo, New York 14263


From tom@@@k@liber@ @ending from gm@il@com  Tue Oct  2 12:37:48 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 2 Oct 2018 12:37:48 +0200
Subject: [Rd] Problem with parseData
In-Reply-To: <d4cdfe7e-10c1-eceb-b0c4-88c2ebfb000f@gmail.com>
References: <fda485ef-3ca1-6507-f227-51a5cb8af4a3@mtholyoke.edu>
 <d4cdfe7e-10c1-eceb-b0c4-88c2ebfb000f@gmail.com>
Message-ID: <ea2e79ec-b812-c75a-2587-af13c1d6f048@gmail.com>

The fix is now in R-devel, 75386. I have not ported to R-patched, 
because the fix breaks two packages which are working around this bug 
(and to my knowledge without having reported it before). So thanks again 
for the report!

Best
Tomas

On 08/16/2018 10:06 AM, Tomas Kalibera wrote:
> Dear Barbara,
>
> thank you for the report. This is something to be fixed in R - I am 
> now testing a patch that adds the extra node for the equality 
> assignment expression.
>
> Best,
> Tomas
>
> On 07/30/2018 05:35 PM, Barbara Lerner wrote:
>> Hi,
>>
>> I have run into a problem with parseData from the utils package.? When
>> an assignment is done with = instead of <-, the information provided by
>> parseData does not include an entry for the assignment.
>>
>> For this input, stored in file "BadPosition.R":
>>
>> y <- 5
>> foo = 7
>>
>> And running this code:
>>
>> parsed <- parse("BadPosition.R", keep.source=TRUE)
>> parsedData <- utils::getParseData (parsed, includeText=TRUE)
>> print(paste("parseData =", parsedData))
>>
>> I get the following output:
>>
>> [1] "parseData = c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)"
>> [2] "parseData = c(1, 1, 1, 3, 6, 6, 1, 1, 5, 7, 7)"
>> [3] "parseData = c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)"
>> [4] "parseData = c(6, 1, 1, 4, 6, 6, 3, 3, 5, 7, 7)"
>> [5] "parseData = c(7, 1, 3, 2, 4, 5, 10, 12, 11, 13, 14)"
>> [6] "parseData = c(0, 3, 7, 7, 5, 7, 12, 0, 0, 14, 0)"
>> [7] "parseData = c(\"expr\", \"SYMBOL\", \"expr\", \"LEFT_ASSIGN\",
>> \"NUM_CONST\", \"expr\", \"SYMBOL\", \"expr\", \"EQ_ASSIGN\",
>> \"NUM_CONST\", \"expr\")"
>> [8] "parseData = c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE,
>> TRUE, TRUE, FALSE)"
>> [9] "parseData = c(\"y <- 5\", \"y\", \"y\", \"<-\", \"5\", \"5\",
>> \"foo\", \"foo\", \"=\", \"7\", \"7\")"
>>
>> Notice how there is an entry for "y <- 5" beginning on line 1, column 1,
>> ending at line 1, column 6, but there is no analogous entry for "foo 
>> = 7".
>>
>> I am running R 3.5.0 on a Mac running 10.12.6.
>>
>> Thanks for your help and please let me know if you need any further
>> information.
>>
>> Barbara
>>
>


From emil@bode @ending from d@n@@kn@w@nl  Tue Oct  2 17:18:37 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Tue, 2 Oct 2018 15:18:37 +0000
Subject: [Rd] Relevel confusing with numeric value
Message-ID: <8BD6F091-0505-4424-8440-B0A8FDA37E29@dans.knaw.nl>

Something that bit me:
The function relevel takes a factor, and a reference level to be promoted to the first place.
If ?ref? is a character this level is promoted, if it?s a numeric the ?ref?-th level is promoted.
Which turns out to be very confusing if you have factor with numeric values (e.g. when reading in a csv with some dirty numeric columns and stringsAsFactors TRUE)
For example:

set.seed(1)
test <- data.frame(n=sample(c(1:100, letters[1:10]), size=90))
test$n <- relevel(test$n, 50)
print(levels(test$n))

gives ?62? as the first level.

Could we make something like this an error, or at least issue a warning?
Also because some other functions automatically coerce, factor(?, levels=1:100) and levels(test$n) <- 1:100 works fine.
So this is maybe the most confusing: relevel(factor(1:10, levels = -10:20), 15) gives ?4? as the first level

For now I?ve thought of 2 possible implementations, that could be inserted in stats::relevel.factor(), just before is.character(ref):

if(is.numeric(ref) && ref %in% lev)
    warning('Provided numeric reference, note that this will promote the ', ref, 'th value, not level with value "', ref, '"!')

or

if(is.numeric(ref) && any(!is.na(suppressWarnings(as.numeric(lev)))))
    warning('Provided numeric reference, note that this will promote the ', ref, 'th value, not level with value "', ref, '"!')


Best regards,
Emil Bode

Data-analyst

+31 6 43 83 89 33
emil.bode at dans.knaw.nl<mailto:emil.bode at dans.knaw.nl>

DANS: Netherlands Institute for Permanent Access to Digital Research Resources
Anna van Saksenlaan 51 | 2593 HW Den Haag | +31 70 349 44 50 | info at dans.knaw.nl<mailto:info at dans.kn> | dans.knaw.nl<applewebdata://71F677F0-6872-45F3-A6C4-4972BF87185B/www.dans.knaw.nl>
DANS is an institute of the Dutch Academy KNAW<http://knaw.nl/nl> and funding organisation NWO<http://www.nwo.nl/>.

	[[alternative HTML version deleted]]


From pd@lgd @ending from gm@il@com  Tue Oct  2 18:22:03 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Tue, 2 Oct 2018 18:22:03 +0200
Subject: [Rd] Relevel confusing with numeric value
In-Reply-To: <8BD6F091-0505-4424-8440-B0A8FDA37E29@dans.knaw.nl>
References: <8BD6F091-0505-4424-8440-B0A8FDA37E29@dans.knaw.nl>
Message-ID: <5E30EBA2-06BE-40A5-9754-FBC384705B8B@gmail.com>

In a word, no. It is behaving as documented and adding a warning would just confuse others who have been using the feature as intended. 

This belongs in the same bin as "as.integer(f) vs as.integer(as.character(f))" and "x[f] vs. x[as.character(f)]"

-pd


> On 2 Oct 2018, at 17:18 , Emil Bode <emil.bode at dans.knaw.nl> wrote:
> 
> Something that bit me:
> The function relevel takes a factor, and a reference level to be promoted to the first place.
> If ?ref? is a character this level is promoted, if it?s a numeric the ?ref?-th level is promoted.
> Which turns out to be very confusing if you have factor with numeric values (e.g. when reading in a csv with some dirty numeric columns and stringsAsFactors TRUE)
> For example:
> 
> set.seed(1)
> test <- data.frame(n=sample(c(1:100, letters[1:10]), size=90))
> test$n <- relevel(test$n, 50)
> print(levels(test$n))
> 
> gives ?62? as the first level.
> 
> Could we make something like this an error, or at least issue a warning?
> Also because some other functions automatically coerce, factor(?, levels=1:100) and levels(test$n) <- 1:100 works fine.
> So this is maybe the most confusing: relevel(factor(1:10, levels = -10:20), 15) gives ?4? as the first level
> 
> For now I?ve thought of 2 possible implementations, that could be inserted in stats::relevel.factor(), just before is.character(ref):
> 
> if(is.numeric(ref) && ref %in% lev)
>    warning('Provided numeric reference, note that this will promote the ', ref, 'th value, not level with value "', ref, '"!')
> 
> or
> 
> if(is.numeric(ref) && any(!is.na(suppressWarnings(as.numeric(lev)))))
>    warning('Provided numeric reference, note that this will promote the ', ref, 'th value, not level with value "', ref, '"!')
> 
> 
> Best regards,
> Emil Bode
> 
> Data-analyst
> 
> +31 6 43 83 89 33
> emil.bode at dans.knaw.nl<mailto:emil.bode at dans.knaw.nl>
> 
> DANS: Netherlands Institute for Permanent Access to Digital Research Resources
> Anna van Saksenlaan 51 | 2593 HW Den Haag | +31 70 349 44 50 | info at dans.knaw.nl<mailto:info at dans.kn> | dans.knaw.nl<applewebdata://71F677F0-6872-45F3-A6C4-4972BF87185B/www.dans.knaw.nl>
> DANS is an institute of the Dutch Academy KNAW<http://knaw.nl/nl> and funding organisation NWO<http://www.nwo.nl/>.
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From therne@u @ending from m@yo@edu  Tue Oct  2 18:43:03 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 02 Oct 2018 11:43:03 -0500
Subject: [Rd] maximum matrix size
Message-ID: <bb6fa2$a7n2cg@ironport10.mayo.edu>

I am now getting the occasional complaint about survival routines that are not able to 
handle big data.?? I looked in the manuals to try and update my understanding of max 
vector size, max matrix, max data set, etc; but it is either not there or I missed it (the 
latter more likely).?? Is it still .Machine$integer.max for everything??? Will that 
change??? Found where?

I am going to need to go through the survival package and put specific checks in front 
some or all of my .Call() statements, in order to give a sensible message whenever a 
bounday is struck.? A well meaning person just posted a suggested "bug fix" to the github 
source of one routine where my .C call allocates a scratch vector, suggesting? "resid = 
double( as.double(n) *nvar)" to prevent a "NA produced by integer overflow" message,? in 
the code below.?? A fix is obvously not quite that easy :-)

 ??? ??? resid <- .C(Ccoxscore, as.integer(n),
 ??? ??? ??? ??? as.integer(nvar),
 ??? ??? ??? ??? as.double(y),
 ??? ??? ??? ??? x=as.double(x),
 ??? ??? ??? ??? as.integer(newstrat),
 ??? ??? ??? ??? as.double(score),
 ??? ??? ??? ??? as.double(weights[ord]),
 ??? ??? ??? ??? as.integer(method=='efron'),
 ??? ??? ??? ??? resid= double(n*nvar),
 ??? ??? ??? ??? double(2*nvar))$resid

Terry T.


	[[alternative HTML version deleted]]


From henrik@bengt@@on @ending from gm@il@com  Tue Oct  2 18:57:14 2018
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Tue, 2 Oct 2018 09:57:14 -0700
Subject: [Rd] maximum matrix size
In-Reply-To: <bb6fa2$a7n2cg@ironport10.mayo.edu>
References: <bb6fa2$a7n2cg@ironport10.mayo.edu>
Message-ID: <CAFDcVCQgXAzupyHB2ufvM=3oWi_h0dpjxvf42VV55CmOyUp9HQ@mail.gmail.com>

On Tue, Oct 2, 2018 at 9:43 AM Therneau, Terry M., Ph.D. via R-devel
<r-devel at r-project.org> wrote:
>
> I am now getting the occasional complaint about survival routines that are not able to
> handle big data.   I looked in the manuals to try and update my understanding of max
> vector size, max matrix, max data set, etc; but it is either not there or I missed it (the
> latter more likely).   Is it still .Machine$integer.max for everything?   Will that
> change?   Found where?

FWIW, this is the reference I've decided to follow for matrixStats:

"* For now, keep 2^31-1 limit on matrix rows and columns."

from Slide 5 in Luke Tierney's 'Some new developments for the R
engine', June 24, 2012
(http://homepage.stat.uiowa.edu/~luke/talks/purdue12.pdf).

/Henrik

>
> I am going to need to go through the survival package and put specific checks in front
> some or all of my .Call() statements, in order to give a sensible message whenever a
> bounday is struck.  A well meaning person just posted a suggested "bug fix" to the github
> source of one routine where my .C call allocates a scratch vector, suggesting  "resid =
> double( as.double(n) *nvar)" to prevent a "NA produced by integer overflow" message,  in
> the code below.   A fix is obvously not quite that easy :-)
>
>          resid <- .C(Ccoxscore, as.integer(n),
>                  as.integer(nvar),
>                  as.double(y),
>                  x=as.double(x),
>                  as.integer(newstrat),
>                  as.double(score),
>                  as.double(weights[ord]),
>                  as.integer(method=='efron'),
>                  resid= double(n*nvar),
>                  double(2*nvar))$resid
>
> Terry T.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From blerner @ending from mtholyoke@edu  Tue Oct  2 19:00:40 2018
From: blerner @ending from mtholyoke@edu (Barbara Lerner)
Date: Tue, 2 Oct 2018 13:00:40 -0400
Subject: [Rd] Problem with parseData
In-Reply-To: <ea2e79ec-b812-c75a-2587-af13c1d6f048@gmail.com>
References: <fda485ef-3ca1-6507-f227-51a5cb8af4a3@mtholyoke.edu>
 <d4cdfe7e-10c1-eceb-b0c4-88c2ebfb000f@gmail.com>
 <ea2e79ec-b812-c75a-2587-af13c1d6f048@gmail.com>
Message-ID: <ca5d0944-e9e1-7f99-d1d7-9e9ed87b44c0@mtholyoke.edu>

Thanks!? Please let us know when it is in the released version of R.

Barbara

Tomas Kalibera wrote on 10/2/18 6:37 AM:
> The fix is now in R-devel, 75386. I have not ported to R-patched, 
> because the fix breaks two packages which are working around this bug 
> (and to my knowledge without having reported it before). So thanks 
> again for the report!
>
> Best
> Tomas
>
> On 08/16/2018 10:06 AM, Tomas Kalibera wrote:
>> Dear Barbara,
>>
>> thank you for the report. This is something to be fixed in R - I am 
>> now testing a patch that adds the extra node for the equality 
>> assignment expression.
>>
>> Best,
>> Tomas
>>
>> On 07/30/2018 05:35 PM, Barbara Lerner wrote:
>>> Hi,
>>>
>>> I have run into a problem with parseData from the utils package. When
>>> an assignment is done with = instead of <-, the information provided by
>>> parseData does not include an entry for the assignment.
>>>
>>> For this input, stored in file "BadPosition.R":
>>>
>>> y <- 5
>>> foo = 7
>>>
>>> And running this code:
>>>
>>> parsed <- parse("BadPosition.R", keep.source=TRUE)
>>> parsedData <- utils::getParseData (parsed, includeText=TRUE)
>>> print(paste("parseData =", parsedData))
>>>
>>> I get the following output:
>>>
>>> [1] "parseData = c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)"
>>> [2] "parseData = c(1, 1, 1, 3, 6, 6, 1, 1, 5, 7, 7)"
>>> [3] "parseData = c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)"
>>> [4] "parseData = c(6, 1, 1, 4, 6, 6, 3, 3, 5, 7, 7)"
>>> [5] "parseData = c(7, 1, 3, 2, 4, 5, 10, 12, 11, 13, 14)"
>>> [6] "parseData = c(0, 3, 7, 7, 5, 7, 12, 0, 0, 14, 0)"
>>> [7] "parseData = c(\"expr\", \"SYMBOL\", \"expr\", \"LEFT_ASSIGN\",
>>> \"NUM_CONST\", \"expr\", \"SYMBOL\", \"expr\", \"EQ_ASSIGN\",
>>> \"NUM_CONST\", \"expr\")"
>>> [8] "parseData = c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE,
>>> TRUE, TRUE, FALSE)"
>>> [9] "parseData = c(\"y <- 5\", \"y\", \"y\", \"<-\", \"5\", \"5\",
>>> \"foo\", \"foo\", \"=\", \"7\", \"7\")"
>>>
>>> Notice how there is an entry for "y <- 5" beginning on line 1, 
>>> column 1,
>>> ending at line 1, column 6, but there is no analogous entry for "foo 
>>> = 7".
>>>
>>> I am running R 3.5.0 on a Mac running 10.12.6.
>>>
>>> Thanks for your help and please let me know if you need any further
>>> information.
>>>
>>> Barbara
>>>
>>
>

-- 
<http://www.getpostbox.com>Barbara Lerner
Associate Professor
Computer Science Department
Mount Holyoke College

<http://www.getpostbox.com>

	[[alternative HTML version deleted]]


From peter@l@ngfelder @ending from gm@il@com  Tue Oct  2 19:22:42 2018
From: peter@l@ngfelder @ending from gm@il@com (Peter Langfelder)
Date: Tue, 2 Oct 2018 10:22:42 -0700
Subject: [Rd] maximum matrix size
In-Reply-To: <bb6fa2$a7n2cg@ironport10.mayo.edu>
References: <bb6fa2$a7n2cg@ironport10.mayo.edu>
Message-ID: <CA+hbrhUUHaqcKO_XD=brKq2OzamYuRYB=DxzUhifr9TJ8-OmYg@mail.gmail.com>

Does this help a little?

https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Long-vectors

One thing I seem to remember but cannot find a reference for is that
long vectors can only be passed to .Call calls, not C/Fortran. I
remember rewriting .C() in my WGCNA package to .Call for this very
reason but perhaps the restriction has been removed.

Peter
On Tue, Oct 2, 2018 at 9:43 AM Therneau, Terry M., Ph.D. via R-devel
<r-devel at r-project.org> wrote:
>
> I am now getting the occasional complaint about survival routines that are not able to
> handle big data.   I looked in the manuals to try and update my understanding of max
> vector size, max matrix, max data set, etc; but it is either not there or I missed it (the
> latter more likely).   Is it still .Machine$integer.max for everything?   Will that
> change?   Found where?
>
> I am going to need to go through the survival package and put specific checks in front
> some or all of my .Call() statements, in order to give a sensible message whenever a
> bounday is struck.  A well meaning person just posted a suggested "bug fix" to the github
> source of one routine where my .C call allocates a scratch vector, suggesting  "resid =
> double( as.double(n) *nvar)" to prevent a "NA produced by integer overflow" message,  in
> the code below.   A fix is obvously not quite that easy :-)
>
>          resid <- .C(Ccoxscore, as.integer(n),
>                  as.integer(nvar),
>                  as.double(y),
>                  x=as.double(x),
>                  as.integer(newstrat),
>                  as.double(score),
>                  as.double(weights[ord]),
>                  as.integer(method=='efron'),
>                  resid= double(n*nvar),
>                  double(2*nvar))$resid
>
> Terry T.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wewol@ki @ending from gm@il@com  Tue Oct  2 21:14:18 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Tue, 2 Oct 2018 21:14:18 +0200
Subject: [Rd] R grpc
Message-ID: <CAAjnpdhk7NCz1tMya0zg4uGdeRH6_2Y5Qpn=ch6TTRRJcewoGA@mail.gmail.com>

Hello,

I am looking for a prebuild - binary MS Windows version of the R grpc package
https://github.com/nfultz/grpc

best regards
Witek


-- 
Witold Eryk Wolski


From ruipb@rr@d@@ @ending from @@po@pt  Tue Oct  2 21:28:15 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Tue, 2 Oct 2018 20:28:15 +0100
Subject: [Rd] R grpc
In-Reply-To: <CAAjnpdhk7NCz1tMya0zg4uGdeRH6_2Y5Qpn=ch6TTRRJcewoGA@mail.gmail.com>
References: <CAAjnpdhk7NCz1tMya0zg4uGdeRH6_2Y5Qpn=ch6TTRRJcewoGA@mail.gmail.com>
Message-ID: <ba21a3b3-0de2-68c5-3218-0577c3c81d16@sapo.pt>

Hello,

Do you really need a prebuild binary? Wouldn't this do it?

devtools::install_github("nfultz/grpc")


Hope this helps,

Rui Barradas

?s 20:14 de 02/10/2018, Witold E Wolski escreveu:
> Hello,
> 
> I am looking for a prebuild - binary MS Windows version of the R grpc package
> https://github.com/nfultz/grpc
> 
> best regards
> Witek
> 
>


From wewol@ki @ending from gm@il@com  Tue Oct  2 22:10:31 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Tue, 2 Oct 2018 22:10:31 +0200
Subject: [Rd] R grpc
In-Reply-To: <ba21a3b3-0de2-68c5-3218-0577c3c81d16@sapo.pt>
References: <CAAjnpdhk7NCz1tMya0zg4uGdeRH6_2Y5Qpn=ch6TTRRJcewoGA@mail.gmail.com>
 <ba21a3b3-0de2-68c5-3218-0577c3c81d16@sapo.pt>
Message-ID: <CAAjnpdgahsePqGQf3NW+WigqxYFVc_OjWM+1BbyG44onhJa-sA@mail.gmail.com>

:) Did you missed the "MS-Windows"  in my e-mail?

On Tue, 2 Oct 2018 at 21:28, Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> Hello,
>
> Do you really need a prebuild binary? Wouldn't this do it?
>
> devtools::install_github("nfultz/grpc")
>
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 20:14 de 02/10/2018, Witold E Wolski escreveu:
> > Hello,
> >
> > I am looking for a prebuild - binary MS Windows version of the R grpc package
> > https://github.com/nfultz/grpc
> >
> > best regards
> > Witek
> >
> >



-- 
Witold Eryk Wolski


From wewol@ki @ending from gm@il@com  Tue Oct  2 23:01:31 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Tue, 2 Oct 2018 23:01:31 +0200
Subject: [Rd] How do I set a compile flag _WIN32_WINNT=0x600 in Makevars.Win
Message-ID: <CAAjnpdiFDDnOmG3KZs=i11OxoxGWRK=aSF8KPFPX4W=0VOzsWw@mail.gmail.com>

Sorry for bothering you

I am trying to build the R grpc package on windows:
https://github.com/nfultz/grpc

against an MSYS2 build of grpc.

when running devtools::install() I am getting the following error:

C:/msys64/mingw64/include/grpc/impl/codegen/port_platform.h:47:2:
error: #error "Please compile grpc with _WIN32_WINNT of at least 0x600
(aka Windows Vista)"
 #error \
  ^

Which, if I am correct asks me to set _WIN32_WINNT=0x600

My Makevars.Win looks as follows:

PKG_CPPFLAGS=-IC:/msys64/mingw64/include
PKG_LIBS=-LC:/msys64/mingw64/lib -lgrpc

What should I do?

Have a great day
best regards
Witek



-- 
Witold Eryk Wolski


From brodie@g@@l@m @ending from y@hoo@com  Wed Oct  3 03:13:44 2018
From: brodie@g@@l@m @ending from y@hoo@com (Brodie Gaslam)
Date: Tue, 2 Oct 2018 21:13:44 -0400
Subject: [Rd] grDevices::convertColor and colorRamp(space='Lab') Performance
 Improvements
Message-ID: <16e44a3e-c8d1-ab0d-e5a2-292953c00b9d@yahoo.com>

`grDevices::convertColor` performance can be improved by 30-300x with 
small changes to the code.  `colorRamp(space='Lab')` uses `convertColor` 
so it too benefits from substantial performance gains.

`convertColor` vectorizes explicitly over the rows of the input color 
matrix using `apply`. The level-1 patch [1] illustrates a possible 
minimal set of changes to achieve this with just R matrix and vector 
operations.  The changes consist primarily of switching `if/else` to 
`ifelse`, `c` to `cbind`, `sum` to `rowSums`, etc. This results in 
speedups of 30-100x as shown in table 1:

            to
from        Apple RGB  sRGB CIE RGB   XYZ  Lab  Luv
   Apple RGB        NA  38.3    55.8  30.3 60.2 56.3
   sRGB           38.7    NA    55.7  36.5 62.9 52.7
   CIE RGB        45.2  44.4      NA  30.6 51.5 43.1
   XYZ            73.4  57.5    69.1    NA 92.2 69.0
   Lab            46.6  56.6    65.4  72.0   NA 61.3
   Luv            73.2 107.3    67.3 105.8 97.8   NA

## Table 1:
## Ratios of `grDevices` to 'level-1' patch speeds for 8000 colors
## from each supported color space to all other supported color spaces.

A few incremental changes as detailed in the level-2 patch [2] yield 
additional performance improvements:

            to
from        Apple RGB  sRGB CIE RGB   XYZ Lab   Luv
   Apple RGB        NA  97.1   106.2  89.0 117  83.4
   sRGB           92.5    NA    99.4  86.4 120  76.0
   CIE RGB       119.2 184.2      NA  82.2 135  83.4
   XYZ           122.3 209.8   140.9    NA 171 148.8
   Lab           166.4 168.2   255.4 288.5  NA 265.1
   Luv           141.7 173.6   279.6 310.1 195    NA

## Table 2:
## Ratios of `grDevices` to level-2 patch speeds for 8000 colors
## from each supported color space to all other supported color spaces.

Not shown here is that the patched versions of `convertColor` are faster 
with small inputs as well, though the difference is less marked.

I have posted tests on github [3], along with the results of running 
them on my system [4].  While these tests are not proof that the patches 
do not change the function other than to make it faster, the tests 
results combined with the narrow scope of the changes hopefully provides 
sufficient evidence this is the case.   For those wanting to run the 
tests, installation and testing instructions are on the github landing 
page for this project [5].

There are some minor (in my opinion) changes in behavior that need to be 
discussed:

* Inputs that would previously stop with errors or work inconsistently 
now work consistently (e.g. zero-row inputs or inputs containing 
NA/NaN/Inf).
* Column names are consistently set to the color space initials; these 
were previously inconsistently set / mangled by `c`.

These are discussed at length with examples in [6].

It would be possible to preserve the existing behavior, but doing so 
would require some contortions that serve no other purposes than that. 
Additionally, in many cases the existing behavior is inconsistent across 
different input/output color spaces.  Finally, most of the differences 
involve corner case inputs such as those containing NA/NaN/Inf, or zero 
rows.

I am entirely amenable to modify the patches to preserve existing 
behavior in these cases if that is considered desirable.

These patches should be coordinated with #17473 [7], which I found while 
working on this issue.

-----------------------------------------------

'level-1' patch:
[1]: 
https://raw.githubusercontent.com/brodieG/grDevices2/level-2/extra/level-1.txt

'level-2' patch:
[2]: 
https://raw.githubusercontent.com/brodieG/grDevices2/level-2/extra/level-2.txt

Tests on github, and the result of running them:
[3]: https://github.com/brodieG/grDevices2/blob/level-2/tests/convertColor.R
[4]: 
https://raw.githubusercontent.com/brodieG/grDevices2/level-2/tests/convertColor.Rout

Github landing page for this project:
[5]: https://github.com/brodieG/grDevices2

Discussion of differences introduces by patches:
[6]: 
https://htmlpreview.github.io/?https://raw.githubusercontent.com/brodieG/grDevices2/level-2/extra/differences.html

Indirectly related bugzilla issue #17473:
[7]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17473


From wewol@ki @ending from gm@il@com  Wed Oct  3 09:46:41 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Wed, 3 Oct 2018 09:46:41 +0200
Subject: [Rd] 
 How do I set a compile flag _WIN32_WINNT=0x600 in Makevars.Win
In-Reply-To: <CAAjnpdiFDDnOmG3KZs=i11OxoxGWRK=aSF8KPFPX4W=0VOzsWw@mail.gmail.com>
References: <CAAjnpdiFDDnOmG3KZs=i11OxoxGWRK=aSF8KPFPX4W=0VOzsWw@mail.gmail.com>
Message-ID: <CAAjnpdjjjsSErByYH=u2_e5u+ZSMhgmOoEh8MaavzVcar8wBPA@mail.gmail.com>

Hi,

Solved, some search for preprocessor helped.

PKG_CPPFLAGS=-D_WIN32_WINNT=0x600

Very Sorry for bothering you


Thank you
On Tue, 2 Oct 2018 at 23:01, Witold E Wolski <wewolski at gmail.com> wrote:
>
> Sorry for bothering you
>
> I am trying to build the R grpc package on windows:
> https://github.com/nfultz/grpc
>
> against an MSYS2 build of grpc.
>
> when running devtools::install() I am getting the following error:
>
> C:/msys64/mingw64/include/grpc/impl/codegen/port_platform.h:47:2:
> error: #error "Please compile grpc with _WIN32_WINNT of at least 0x600
> (aka Windows Vista)"
>  #error \
>   ^
>
> Which, if I am correct asks me to set _WIN32_WINNT=0x600
>
> My Makevars.Win looks as follows:
>
> PKG_CPPFLAGS=-IC:/msys64/mingw64/include
> PKG_LIBS=-LC:/msys64/mingw64/lib -lgrpc
>
> What should I do?
>
> Have a great day
> best regards
> Witek
>
>
>
> --
> Witold Eryk Wolski



-- 
Witold Eryk Wolski


From wewol@ki @ending from gm@il@com  Wed Oct  3 10:12:53 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Wed, 3 Oct 2018 10:12:53 +0200
Subject: [Rd] unable to load shared object
Message-ID: <CAAjnpdg3+ZASotVACBNAwj-vHuptEEUHAvHb5uJ0yhtVxaXMHw@mail.gmail.com>

Hello,

I am trying to install a package with some src files on windows (linux
install works fine). The sources seem to build, there is an *.dll in
the src folder but than the installation process fails with:

```
** testing if installed package can be loaded
Error: package or namespace load failed for 'grpc' in inDL(x,
as.logical(local), as.logical(now), ...):
 unable to load shared object
'C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll':
  LoadLibrary failure:  The specified module could not be found.

Error: loading failed
Execution halted
```

Do I need to point the installer to the *.dll in the src directory by
creating some special function (e.g. dyn.load) or creating some
special file?

Help would be greatly appreciated:

The packages sources are here:
https://github.com/wolski/grpc-1

Witek


-- 
Witold Eryk Wolski


From therne@u @ending from m@yo@edu  Wed Oct  3 14:52:22 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 03 Oct 2018 07:52:22 -0500
Subject: [Rd] maximum matrix size
In-Reply-To: <CA+hbrhUUHaqcKO_XD=brKq2OzamYuRYB=DxzUhifr9TJ8-OmYg@mail.gmail.com>
References: <bb6fa2$a7n2cg@ironport10.mayo.edu>
 <CA+hbrhUUHaqcKO_XD=brKq2OzamYuRYB=DxzUhifr9TJ8-OmYg@mail.gmail.com>
Message-ID: <bb6fa2$a7s625@ironport10.mayo.edu>

That is indeed helpful; reading the sections around it largely answered my questions. 
Rinternals.h has the definitions

#define allocMatrix Rf_allocMatrix
SEXP Rf_allocMatrix(SEXPTYPE, int, int);
#define allocVector??? ??? Rf_allocVector
SEXP???? Rf_allocVector(SEXPTYPE, R_xlen_t);

Which answers the further question of what to expect inside C routines invoked by Call.

It looks like the internal C routines for coxph work on large matrices by pure serendipity 
(nrow and ncol each less than 2^31 but with the product? > 2^31), but residuals.coxph 
fails with an allocation error on the same data.? A slight change and it could just as 
easily have led to a hard crash. ?? Sigh...?? I'll need to do a complete code review.?? 
I've been converting .C routines to .Call? as convenient, this will force conversion of 
many of the rest as a side effect (20 done, 23 to go).? As a statsitician my overall 
response is "haven't they ever heard of sampling"?? But as I said earlier, it isn't just 
one user.

Terry T.

On 10/02/2018 12:22 PM, Peter Langfelder wrote:
> Does this help a little?
>
> https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Long-vectors
>
> One thing I seem to remember but cannot find a reference for is that
> long vectors can only be passed to .Call calls, not C/Fortran. I
> remember rewriting .C() in my WGCNA package to .Call for this very
> reason but perhaps the restriction has been removed.
>
> Peter
> On Tue, Oct 2, 2018 at 9:43 AM Therneau, Terry M., Ph.D. via R-devel
> <r-devel at r-project.org> wrote:
>> I am now getting the occasional complaint about survival routines that are not able to
>> handle big data.   I looked in the manuals to try and update my understanding of max
>> vector size, max matrix, max data set, etc; but it is either not there or I missed it (the
>> latter more likely).   Is it still .Machine$integer.max for everything?   Will that
>> change?   Found where?
>>
>> I am going to need to go through the survival package and put specific checks in front
>> some or all of my .Call() statements, in order to give a sensible message whenever a
>> bounday is struck.  A well meaning person just posted a suggested "bug fix" to the github
>> source of one routine where my .C call allocates a scratch vector, suggesting  "resid =
>> double( as.double(n) *nvar)" to prevent a "NA produced by integer overflow" message,  in
>> the code below.   A fix is obvously not quite that easy :-)
>>
>>           resid <- .C(Ccoxscore, as.integer(n),
>>                   as.integer(nvar),
>>                   as.double(y),
>>                   x=as.double(x),
>>                   as.integer(newstrat),
>>                   as.double(score),
>>                   as.double(weights[ord]),
>>                   as.integer(method=='efron'),
>>                   resid= double(n*nvar),
>>                   double(2*nvar))$resid
>>
>> Terry T.
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From p@ul @ending from @t@t@@uckl@nd@@c@nz  Thu Oct  4 00:09:10 2018
From: p@ul @ending from @t@t@@uckl@nd@@c@nz (Paul Murrell)
Date: Thu, 4 Oct 2018 11:09:10 +1300
Subject: [Rd] 
 [FORGED] grDevices::convertColor and colorRamp(space='Lab')
 Performance Improvements
In-Reply-To: <16e44a3e-c8d1-ab0d-e5a2-292953c00b9d@yahoo.com>
References: <16e44a3e-c8d1-ab0d-e5a2-292953c00b9d@yahoo.com>
Message-ID: <b8d4c330-c119-3d0b-3a13-3ef261fc473f@stat.auckland.ac.nz>


Thanks Brodie.  Having a look at all of this is on my list.

Paul

On 03/10/18 14:13, Brodie Gaslam via R-devel wrote:
> `grDevices::convertColor` performance can be improved by 30-300x with 
> small changes to the code.? `colorRamp(space='Lab')` uses `convertColor` 
> so it too benefits from substantial performance gains.
> 
> `convertColor` vectorizes explicitly over the rows of the input color 
> matrix using `apply`. The level-1 patch [1] illustrates a possible 
> minimal set of changes to achieve this with just R matrix and vector 
> operations.? The changes consist primarily of switching `if/else` to 
> `ifelse`, `c` to `cbind`, `sum` to `rowSums`, etc. This results in 
> speedups of 30-100x as shown in table 1:
> 
>  ?????????? to
> from??????? Apple RGB? sRGB CIE RGB?? XYZ? Lab? Luv
>  ? Apple RGB??????? NA? 38.3??? 55.8? 30.3 60.2 56.3
>  ? sRGB?????????? 38.7??? NA??? 55.7? 36.5 62.9 52.7
>  ? CIE RGB??????? 45.2? 44.4????? NA? 30.6 51.5 43.1
>  ? XYZ??????????? 73.4? 57.5??? 69.1??? NA 92.2 69.0
>  ? Lab??????????? 46.6? 56.6??? 65.4? 72.0?? NA 61.3
>  ? Luv??????????? 73.2 107.3??? 67.3 105.8 97.8?? NA
> 
> ## Table 1:
> ## Ratios of `grDevices` to 'level-1' patch speeds for 8000 colors
> ## from each supported color space to all other supported color spaces.
> 
> A few incremental changes as detailed in the level-2 patch [2] yield 
> additional performance improvements:
> 
>  ?????????? to
> from??????? Apple RGB? sRGB CIE RGB?? XYZ Lab?? Luv
>  ? Apple RGB??????? NA? 97.1?? 106.2? 89.0 117? 83.4
>  ? sRGB?????????? 92.5??? NA??? 99.4? 86.4 120? 76.0
>  ? CIE RGB?????? 119.2 184.2????? NA? 82.2 135? 83.4
>  ? XYZ?????????? 122.3 209.8?? 140.9??? NA 171 148.8
>  ? Lab?????????? 166.4 168.2?? 255.4 288.5? NA 265.1
>  ? Luv?????????? 141.7 173.6?? 279.6 310.1 195??? NA
> 
> ## Table 2:
> ## Ratios of `grDevices` to level-2 patch speeds for 8000 colors
> ## from each supported color space to all other supported color spaces.
> 
> Not shown here is that the patched versions of `convertColor` are faster 
> with small inputs as well, though the difference is less marked.
> 
> I have posted tests on github [3], along with the results of running 
> them on my system [4].? While these tests are not proof that the patches 
> do not change the function other than to make it faster, the tests 
> results combined with the narrow scope of the changes hopefully provides 
> sufficient evidence this is the case.?? For those wanting to run the 
> tests, installation and testing instructions are on the github landing 
> page for this project [5].
> 
> There are some minor (in my opinion) changes in behavior that need to be 
> discussed:
> 
> * Inputs that would previously stop with errors or work inconsistently 
> now work consistently (e.g. zero-row inputs or inputs containing 
> NA/NaN/Inf).
> * Column names are consistently set to the color space initials; these 
> were previously inconsistently set / mangled by `c`.
> 
> These are discussed at length with examples in [6].
> 
> It would be possible to preserve the existing behavior, but doing so 
> would require some contortions that serve no other purposes than that. 
> Additionally, in many cases the existing behavior is inconsistent across 
> different input/output color spaces.? Finally, most of the differences 
> involve corner case inputs such as those containing NA/NaN/Inf, or zero 
> rows.
> 
> I am entirely amenable to modify the patches to preserve existing 
> behavior in these cases if that is considered desirable.
> 
> These patches should be coordinated with #17473 [7], which I found while 
> working on this issue.
> 
> -----------------------------------------------
> 
> 'level-1' patch:
> [1]: 
> https://raw.githubusercontent.com/brodieG/grDevices2/level-2/extra/level-1.txt 
> 
> 
> 'level-2' patch:
> [2]: 
> https://raw.githubusercontent.com/brodieG/grDevices2/level-2/extra/level-2.txt 
> 
> 
> Tests on github, and the result of running them:
> [3]: 
> https://github.com/brodieG/grDevices2/blob/level-2/tests/convertColor.R
> [4]: 
> https://raw.githubusercontent.com/brodieG/grDevices2/level-2/tests/convertColor.Rout 
> 
> 
> Github landing page for this project:
> [5]: https://github.com/brodieG/grDevices2
> 
> Discussion of differences introduces by patches:
> [6]: 
> https://htmlpreview.github.io/?https://raw.githubusercontent.com/brodieG/grDevices2/level-2/extra/differences.html 
> 
> 
> Indirectly related bugzilla issue #17473:
> [7]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17473
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From tom@@@k@liber@ @ending from gm@il@com  Thu Oct  4 18:12:26 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Thu, 4 Oct 2018 18:12:26 +0200
Subject: [Rd] 
 segfault issue with parallel::mclapply and download.file() on
 Mac OS X
In-Reply-To: <CAB75gRUv1LitTgWSbMFunqp7P9wfWG_BJ_xYBPN4K5KJkDu+_g@mail.gmail.com>
References: <CAB75gRUv1LitTgWSbMFunqp7P9wfWG_BJ_xYBPN4K5KJkDu+_g@mail.gmail.com>
Message-ID: <f4b472d8-95d1-dcbe-5889-f88f31077f9d@gmail.com>


Thanks for the report, but unfortunately I cannot reproduce on my system 
(either macOS nor Linux, from the command line) to debug. Did you run 
this in the command line version of R?

I would not be surprised to see such a crash if executed from a 
multi-threaded application, say from some GUI or frontend that runs 
multiple threads, or from some other R session where a third party 
library (curl?) already started some threads. In such situations 
mcfork/mclapply is unsafe (?mcfork warns against GUI and frontends and 
I've now expanded slightly) and and it could not be fixed without being 
turned into something like parLapply(). parLapply() on a non-FORK 
cluster should work fine even with such applications.

Best
Tomas

On 09/19/2018 11:19 PM, Seth Russell wrote:
> I have an lapply function call that I want to parallelize. Below is a very
> simplified version of the code:
>
> url_base <- "https://cloud.r-project.org/src/contrib/"
> files <- c("A3_1.0.0.tar.gz", "ABC.RAP_0.9.0.tar.gz")
> res <- parallel::mclapply(files, function(s) download.file(paste0(url_base,
> s), s))
>
> Instead of download a couple of files in parallel, I get a segfault per
> process with a 'memory not mapped' message. I've been working with Henrik
> Bengtsson on resolving this issue and he recommended I send a message to
> the R-Devel mailing list.
>
> Here's the output:
>
> trying URL 'https://cloud.r-project.org/src/contrib/A3_1.0.0.tar.gz'
> trying URL 'https://cloud.r-project.org/src/contrib/ABC.RAP_0.9.0.tar.gz'
>
>   *** caught segfault ***
> address 0x11575ba3a, cause 'memory not mapped'
>
>   *** caught segfault ***
> address 0x11575ba3a, cause 'memory not mapped'
>
> Traceback:
>   1: download.file(paste0(url_base, s), s)
>   2: FUN(X[[i]], ...)
>   3: lapply(X = S, FUN = FUN, ...)
>   4: doTryCatch(return(expr), name, parentenv, handler)
>   5: tryCatchOne(expr, names, parentenv, handlers[[1L]])
>   6: tryCatchList(expr, classes, parentenv, handlers)
>   7: tryCatch(expr, error = function(e) {    call <- conditionCall(e)    if
> (!is.null(call)) {        if (identical(call[[1L]], quote(doTryCatch)))
>          call <- sys.call(-4L)        dcall <- deparse(call)[1L]
>   prefix <- paste("Error in", dcall, ": ")
>          LONG <- 75LTraceback:
>          sm <- strsplit(conditionMessage(e), "\n")[[1L]] 1:         w <- 14L
> + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")        if (is.na(w))
> download.file(paste0(url_base, s), s)            w <- 14L + nchar(dcall,
> type = "b") + nchar(sm[1L],
>                  type = "b")        if (w > LONG)  2: FUN(X[[i]], ...)
>   3: lapply(X = S, FUN = FUN, ...)
>   4: doTryCatch(return(expr), name, parentenv, handler)
>   5: tryCatchOne(expr, names, parentenv, handlers[[1L]])
>   6:             prefix <- paste0(prefix, "\n  ")tryCatchList(expr, classes,
> parentenv, handlers)
>      }    else prefix <- "Error : " 7:     msg <- paste0(prefix,
> conditionMessage(e), "\n")tryCatch(expr, error = function(e) {
>   .Internal(seterrmessage(msg[1L]))    call <- conditionCall(e)    if
> (!silent && isTRUE(getOption("show.error.messages"))) {    if
> (!is.null(call)) {        cat(msg, file = outFile)        if
> (identical(call[[1L]], quote(doTryCatch)))
> .Internal(printDeferredWarnings())            call <- sys.call(-4L)    }
>       dcall <- deparse(call)[1L]    invisible(structure(msg, class =
> "try-error", condition = e))        prefix <- paste("Error in", dcall, ":
> ")})        LONG <- 75L        sm <- strsplit(conditionMessage(e),
> "\n")[[1L]]
>          w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
>     if (is.na(w))  8:             w <- 14L + nchar(dcall, type = "b") +
> nchar(sm[1L], try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
>     type = "b")
>          if (w > LONG)             prefix <- paste0(prefix, "\n  ") 9:
> }sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))    else
> prefix <- "Error : "
>      msg <- paste0(prefix, conditionMessage(e), "\n")
>   .Internal(seterrmessage(msg[1L]))10:     if (!silent &&
> isTRUE(getOption("show.error.messages"))) {FUN(X[[i]], ...)        cat(msg,
> file = outFile)
>          .Internal(printDeferredWarnings())    }11:
> invisible(structure(msg, class = "try-error", condition =
> e))lapply(seq_len(cores), inner.do)})
>
> 12:  8: parallel::mclapply(files, function(s)
> download.file(paste0(url_base, try(lapply(X = S, FUN = FUN, ...), silent =
> TRUE)    s), s))
>
>   9:
> sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))Possible
> actions:
>
> 1: abort (with core dump, if enabled)
> 2: normal R exit
> 10: 3: exit R without saving workspace
> FUN(X[[i]], ...)4: exit R saving workspace
>
> 11: lapply(seq_len(cores), inner.do)
> 12: parallel::mclapply(files, function(s) download.file(paste0(url_base,
>    s), s))
>
> Here's my sessionInfo()
>
>> sessionInfo()
> R version 3.5.1 (2018-07-02)
> Platform: x86_64-apple-darwin16.7.0 (64-bit)
> Running under: macOS Sierra 10.12.6
>
> Matrix products: default
> BLAS/LAPACK: /usr/local/Cellar/openblas/0.3.3/lib/libopenblasp-r0.3.3.dylib
>
> locale:
> [1] en_US/en_US/en_US/C/en_US/en_US
>
> attached base packages:
> [1] parallel  stats     graphics  grDevices utils     datasets  methods
> [8] base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.5.1
>
> My version of R I'm running was installed via homebrew with "brew install r
> --with-java --with-openblas"
>
> Also, the provided example code works as expected on Linux. Also, if I
> provide a non-default download method to the download.file() call such as:
>
> res <- parallel::mclapply(files, function(s) download.file(paste0(url_base,
> s), s, method="wget"))
> res <- parallel::mclapply(files, function(s) download.file(paste0(url_base,
> s), s, method="curl"))
>
> It works correctly - no segfault. If I use method="libcurl" it does
> segfault.
>
> I'm not sure what steps to take to further narrow down the source of the
> error.
>
> Is this a known bug? if not, is this a new bug or an unexpected feature?
>
> Thanks,
> Seth
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroenoom@ @ending from gm@il@com  Thu Oct  4 19:29:43 2018
From: jeroenoom@ @ending from gm@il@com (Jeroen Ooms)
Date: Thu, 4 Oct 2018 19:29:43 +0200
Subject: [Rd] 
 segfault issue with parallel::mclapply and download.file() on
 Mac OS X
In-Reply-To: <f4b472d8-95d1-dcbe-5889-f88f31077f9d@gmail.com>
References: <CAB75gRUv1LitTgWSbMFunqp7P9wfWG_BJ_xYBPN4K5KJkDu+_g@mail.gmail.com>
 <f4b472d8-95d1-dcbe-5889-f88f31077f9d@gmail.com>
Message-ID: <CABFfbXuNZabMUimXfgHJX06mucCC0LuH8L7dkPCFCVv5=MOxPw@mail.gmail.com>

On Thu, Oct 4, 2018 at 6:12 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> Thanks for the report, but unfortunately I cannot reproduce on my system
> (either macOS nor Linux, from the command line) to debug. Did you run
> this in the command line version of R?

It depends on which version of MacOS that you are using and
specifically which TLS back-end curl has been configured with. When
libcurl uses DarwinSSL, it may crash when opening HTTPS connections in
a fork because CoreFoundation is not fork-safe. OTOH when using
OpenSSL or LibreSSL for TLS, you usually get away with forking (though
it's still bad practice).

The standard version of libcurl that ships with MacOS was using
CoreFoundation until 10.12 but starting 10.13 they switched to
LibreSSL in order to support HTTP/2. See curl --version or
curl::curl_version() for your local config. Don't count in this
though, Apple might switch back to the fork-unsafe DarwinSSL once they
support ALPN, which is needed for HTTP/2.

As Gabor already suggested, libcurl has built-in systems for
concurrent connections. The curl package exposes this via multi_add
function. Not only is this safer than forking, it will be much faster
because it takes advantage of HTTP keep-alive and when supported it
uses HTTP2 multiplexing which allows efficiently performing thousands
of concurrent HTTPS requests over a single TCP connection.


From wewol@ki @ending from gm@il@com  Fri Oct  5 10:01:34 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Fri, 5 Oct 2018 10:01:34 +0200
Subject: [Rd] unable to load shared object
In-Reply-To: <CAErODj9HMDaOxp3VKgHhxaV2ZB9rR3T0=Zm-V5D_ihjeH-aZxA@mail.gmail.com>
References: <CAAjnpdg3+ZASotVACBNAwj-vHuptEEUHAvHb5uJ0yhtVxaXMHw@mail.gmail.com>
 <CAErODj9HMDaOxp3VKgHhxaV2ZB9rR3T0=Zm-V5D_ihjeH-aZxA@mail.gmail.com>
Message-ID: <CAAjnpdihqgoCc=o9ObhQd+TQudvJ7RosTA-3YvT=Jm=om+jjFg@mail.gmail.com>

Thanks for asking.

The path where R tries to load the dll from does not exist I think (or
the install process deletes it after the error - might this be the
case?):
C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll'

When I am checking after the error that path is only valid up to:
C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/

So maybe (?) the install process wrongly assums that the package is
installed (but it never was) and than it executes
** testing if installed package can be loaded

To run into the error.

Error: package or namespace load failed for 'grpc' in inDL(x,
as.logical(local), as.logical(now), ...):
 unable to load shared object
'C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll':
  LoadLibrary failure:  The specified module could not be found.
On Fri, 5 Oct 2018 at 09:37, Paul Johnson <pauljohn32 at gmail.com> wrote:
>
> Greetings.
> Is it possible that Onedrive is causing trouble? Do other packages you build and install work well from that directory?
>
> Paul Johnson
> University of Kansas
>
> On Wed, Oct 3, 2018, 3:13 AM Witold E Wolski <wewolski at gmail.com> wrote:
>>
>> Hello,
>>
>> I am trying to install a package with some src files on windows (linux
>> install works fine). The sources seem to build, there is an *.dll in
>> the src folder but than the installation process fails with:
>>
>> ```
>> ** testing if installed package can be loaded
>> Error: package or namespace load failed for 'grpc' in inDL(x,
>> as.logical(local), as.logical(now), ...):
>>  unable to load shared object
>> 'C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll':
>>   LoadLibrary failure:  The specified module could not be found.
>>
>> Error: loading failed
>> Execution halted
>> ```
>>
>> Do I need to point the installer to the *.dll in the src directory by
>> creating some special function (e.g. dyn.load) or creating some
>> special file?
>>
>> Help would be greatly appreciated:
>>
>> The packages sources are here:
>> https://github.com/wolski/grpc-1
>>
>> Witek
>>
>>
>> --
>> Witold Eryk Wolski
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Witold Eryk Wolski


From p@uljohn32 @ending from gm@il@com  Fri Oct  5 10:15:36 2018
From: p@uljohn32 @ending from gm@il@com (Paul Johnson)
Date: Fri, 5 Oct 2018 03:15:36 -0500
Subject: [Rd] unable to load shared object
In-Reply-To: <CAAjnpdihqgoCc=o9ObhQd+TQudvJ7RosTA-3YvT=Jm=om+jjFg@mail.gmail.com>
References: <CAAjnpdg3+ZASotVACBNAwj-vHuptEEUHAvHb5uJ0yhtVxaXMHw@mail.gmail.com>
 <CAErODj9HMDaOxp3VKgHhxaV2ZB9rR3T0=Zm-V5D_ihjeH-aZxA@mail.gmail.com>
 <CAAjnpdihqgoCc=o9ObhQd+TQudvJ7RosTA-3YvT=Jm=om+jjFg@mail.gmail.com>
Message-ID: <CAErODj-NDwc6fxrAYo1QHni2qaWunM9kuus6rR-MOW87AKEDMw@mail.gmail.com>

Hm. I cannot find it now, but I saw notes about problems with Onedrive,
maybe also Dropbox, because file paths are not exactly what r expects.
Usually I have package library as local folder. Did your R choose that
location automatically?

Paul Johnson
University of Kansas

On Fri, Oct 5, 2018, 3:01 AM Witold E Wolski <wewolski at gmail.com> wrote:

> Thanks for asking.
>
> The path where R tries to load the dll from does not exist I think (or
> the install process deletes it after the error - might this be the
> case?):
> C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll'
>
> When I am checking after the error that path is only valid up to:
> C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/
>
> So maybe (?) the install process wrongly assums that the package is
> installed (but it never was) and than it executes
> ** testing if installed package can be loaded
>
> To run into the error.
>
> Error: package or namespace load failed for 'grpc' in inDL(x,
> as.logical(local), as.logical(now), ...):
>  unable to load shared object
>
> 'C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll':
>   LoadLibrary failure:  The specified module could not be found.
> On Fri, 5 Oct 2018 at 09:37, Paul Johnson <pauljohn32 at gmail.com> wrote:
> >
> > Greetings.
> > Is it possible that Onedrive is causing trouble? Do other packages you
> build and install work well from that directory?
> >
> > Paul Johnson
> > University of Kansas
> >
> > On Wed, Oct 3, 2018, 3:13 AM Witold E Wolski <wewolski at gmail.com> wrote:
> >>
> >> Hello,
> >>
> >> I am trying to install a package with some src files on windows (linux
> >> install works fine). The sources seem to build, there is an *.dll in
> >> the src folder but than the installation process fails with:
> >>
> >> ```
> >> ** testing if installed package can be loaded
> >> Error: package or namespace load failed for 'grpc' in inDL(x,
> >> as.logical(local), as.logical(now), ...):
> >>  unable to load shared object
> >>
> 'C:/Users/wewol/OneDrive/Documents/R/win-library/3.5/grpc/libs/x64/grpc.dll':
> >>   LoadLibrary failure:  The specified module could not be found.
> >>
> >> Error: loading failed
> >> Execution halted
> >> ```
> >>
> >> Do I need to point the installer to the *.dll in the src directory by
> >> creating some special function (e.g. dyn.load) or creating some
> >> special file?
> >>
> >> Help would be greatly appreciated:
> >>
> >> The packages sources are here:
> >> https://github.com/wolski/grpc-1
> >>
> >> Witek
> >>
> >>
> >> --
> >> Witold Eryk Wolski
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Witold Eryk Wolski
>

	[[alternative HTML version deleted]]


From berger @ending from mpiib-berlin@mpg@de  Fri Oct  5 10:17:49 2018
From: berger @ending from mpiib-berlin@mpg@de (Hilmar Berger)
Date: Fri, 5 Oct 2018 10:17:49 +0200
Subject: [Rd] Seg fault stats::runmed
Message-ID: <3e83fd14-fe55-3c45-93cb-57a146d2efaf@mpiib-berlin.mpg.de>

Dear all,

I just found this issue:

dd1 = c(rep(NaN,82), rep(-1, 144), rep(1, 74))
xx = runmed(dd1, 21)

-> R crashes reproducibly in R 3.4.3, R3.4.4 (Ubuntu 14.04/Ubuntu 16.04)

With GDB:
Program received signal SIGSEGV, Segmentation fault.
swap (l=53, r=86, window=window at entry=0xc59308, 
outlist=outlist at entry=0x12ea2e8, nrlist=nrlist at entry=0x114fdd8, 
print_level=print_level at entry=0) at Trunmed.c:64
64??? ??? outlist[nr/* = nrlist[l] */] = l;

Valgrind also reports access to unallocated memory and/or writing past 
the end of the heap.

The crash does not happen if the order is changed:

dd2 = c(rep(-1, 144), rep(1, 74), rep(NaN,82))
xx = runmed(dd2,21)

Error in if (a < b) { : missing value where TRUE/FALSE needed

Best regards,
Hilmar

-- 
Dr. Hilmar Berger, MD
Max Planck Institute for Infection Biology
Charit?platz 1
D-10117 Berlin
GERMANY

Phone:  + 49 30 28460 430
Fax:    + 49 30 28460 401
  
E-Mail: berger at mpiib-berlin.mpg.de
Web   : www.mpiib-berlin.mpg.de


From deep@y@n@@@rk@r @ending from gm@il@com  Fri Oct  5 11:16:47 2018
From: deep@y@n@@@rk@r @ending from gm@il@com (Deepayan Sarkar)
Date: Fri, 5 Oct 2018 14:46:47 +0530
Subject: [Rd] 
 [R] Bug : Autocorrelation in sample drawn from stats::rnorm (hmh)
In-Reply-To: <5154ab19-d82c-ca24-676f-7eaeb03196f0@gmx.fr>
References: <1607055752.4873464.1538697126419.ref@mail.yahoo.com>
 <1607055752.4873464.1538697126419@mail.yahoo.com>
 <f5169c3a-cd6b-1ba4-9701-4119f4123db3@gmx.fr>
 <61E0376C-8813-4678-B4AF-12D57017624C@ua.ac.be>
 <aa15aaef-d56c-e44a-e618-61c69e9b36a7@gmx.fr>
 <ABD057D3-5E10-44B4-B4DD-0FB04D475B52@ua.ac.be>
 <5154ab19-d82c-ca24-676f-7eaeb03196f0@gmx.fr>
Message-ID: <CADfFDC49X87yVfjVjBer3prLnuy5SaP-U+ekxiyHhBaY_RKvUw@mail.gmail.com>

On Fri, Oct 5, 2018 at 2:07 PM hmh <hugomh at gmx.fr> wrote:
>
> On 05/10/2018 10:28, Annaert Jan wrote:
> > you discard any time series structure;
> But that is PRECISELY what a call a bug:
> There should not be any "time series structure" in the output or rnorm,
> runif and so on but there is one.
>
> rnorm(N,0,1)
> should give on average the same output as
> sample(rnorm(N,0,1))

Agreed, but that is not what your code is testing. You seem to think
that something much more specific should be true; namely,

X[1:10] ~ iid normal, then

cor(X[1:9], X[2:10])

and

cor(sample(X[-1]), sample(X[-10]))

should have the same distribution. This is not at all obvious, and in
fact not true.

Please check the reference you have been pointed to. Here is a related
article in the same volume:

https://www.jstor.org/stable/2332719

-Deepayan


> Which is not the case. rnorm(N,0,1) should draw INDEPENDENT samples i.e.
> without time series structure !
>
>
> --
> - no title specified
>
> Hugo Math?-Hubert
>
> ATER
>
> Laboratoire Interdisciplinaire des Environnements Continentaux (LIEC)
>
> UMR 7360 CNRS -  B?t IBISE
>
> Universit? de Lorraine  -  UFR SciFA
>
> 8, Rue du G?n?ral Delestraint
>
> F-57070 METZ
>
> +33(0)9 77 21 66 66
> - - - - - - - - - - - - - - - - - -
> Les r?flexions naissent dans les doutes et meurent dans les certitudes.
> Les doutes sont donc un signe de force et les certitudes un signe de
> faiblesse. La plupart des gens sont pourtant certains du contraire.
> - - - - - - - - - - - - - - - - - -
> Thoughts appear from doubts and die in convictions. Therefore, doubts
> are an indication of strength and convictions an indication of weakness.
> Yet, most people believe the opposite.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From krlmlr+ml @ending from m@ilbox@org  Fri Oct  5 11:27:54 2018
From: krlmlr+ml @ending from m@ilbox@org (=?UTF-8?Q?Kirill_M=c3=bcller?=)
Date: Fri, 5 Oct 2018 11:27:54 +0200
Subject: [Rd] Dots are not fixed by make.names()
Message-ID: <d5abef06-2724-ab99-16e2-0f40ad34ed3d@mailbox.org>

Hi


It seems that names of the form "..#" and "..." are not fixed by 
make.names(), even though they are reserved words. The documentation reads:

 > [...] Names such as ".2way" are not valid, and neither are the 
reserved words.

 > Reserved words in R: [...] ... and ..1, ..2 etc, which are used to 
refer to arguments passed down from a calling function, see ?... .

I have pasted a reproducible example below.

I'd like to suggest to convert these to "...#" and "....", respectively. 
Happy to contribute PR.


Best regards

Kirill


make.names(c("..1", "..13", "..."))
#> [1] "..1"? "..13" "..."
`..1` <- 1
`..13` <- 13
`...` <- "dots"

mget(c("..1", "..13", "..."))
#> $..1
#> [1] 1
#>
#> $..13
#> [1] 13
#>
#> $...
#> [1] "dots"
`..1`
#> Error in eval(expr, envir, enclos): the ... list does not contain any 
elements
`..13`
#> Error in eval(expr, envir, enclos): the ... list does not contain 13 
elements
`...`
#> Error in eval(expr, envir, enclos): '...' used in an incorrect context


From hugomh @ending from gmx@fr  Fri Oct  5 11:32:36 2018
From: hugomh @ending from gmx@fr (hmh)
Date: Fri, 5 Oct 2018 11:32:36 +0200
Subject: [Rd] 
 [R] Bug : Autocorrelation in sample drawn from stats::rnorm (hmh)
In-Reply-To: <CADfFDC49X87yVfjVjBer3prLnuy5SaP-U+ekxiyHhBaY_RKvUw@mail.gmail.com>
References: <1607055752.4873464.1538697126419.ref@mail.yahoo.com>
 <1607055752.4873464.1538697126419@mail.yahoo.com>
 <f5169c3a-cd6b-1ba4-9701-4119f4123db3@gmx.fr>
 <61E0376C-8813-4678-B4AF-12D57017624C@ua.ac.be>
 <aa15aaef-d56c-e44a-e618-61c69e9b36a7@gmx.fr>
 <ABD057D3-5E10-44B4-B4DD-0FB04D475B52@ua.ac.be>
 <5154ab19-d82c-ca24-676f-7eaeb03196f0@gmx.fr>
 <CADfFDC49X87yVfjVjBer3prLnuy5SaP-U+ekxiyHhBaY_RKvUw@mail.gmail.com>
Message-ID: <50bfae14-5049-222b-bb30-0a985710a4ef@gmx.fr>

I got it !


thanks and sorry for annoying you with that.


have a nice day,

hugo


On 05/10/2018 11:16, Deepayan Sarkar wrote:
> On Fri, Oct 5, 2018 at 2:07 PM hmh <hugomh at gmx.fr> wrote:
>> On 05/10/2018 10:28, Annaert Jan wrote:
>>> you discard any time series structure;
>> But that is PRECISELY what a call a bug:
>> There should not be any "time series structure" in the output or rnorm,
>> runif and so on but there is one.
>>
>> rnorm(N,0,1)
>> should give on average the same output as
>> sample(rnorm(N,0,1))
> Agreed, but that is not what your code is testing. You seem to think
> that something much more specific should be true; namely,
>
> X[1:10] ~ iid normal, then
>
> cor(X[1:9], X[2:10])
>
> and
>
> cor(sample(X[-1]), sample(X[-10]))
>
> should have the same distribution. This is not at all obvious, and in
> fact not true.
>
> Please check the reference you have been pointed to. Here is a related
> article in the same volume:
>
> https://www.jstor.org/stable/2332719
>
> -Deepayan
>
>
>> Which is not the case. rnorm(N,0,1) should draw INDEPENDENT samples i.e.
>> without time series structure !
>>
>>
>> --
>> - no title specified
>>
>> Hugo Math?-Hubert
>>
>> ATER
>>
>> Laboratoire Interdisciplinaire des Environnements Continentaux (LIEC)
>>
>> UMR 7360 CNRS -  B?t IBISE
>>
>> Universit? de Lorraine  -  UFR SciFA
>>
>> 8, Rue du G?n?ral Delestraint
>>
>> F-57070 METZ
>>
>> +33(0)9 77 21 66 66
>> - - - - - - - - - - - - - - - - - -
>> Les r?flexions naissent dans les doutes et meurent dans les certitudes.
>> Les doutes sont donc un signe de force et les certitudes un signe de
>> faiblesse. La plupart des gens sont pourtant certains du contraire.
>> - - - - - - - - - - - - - - - - - -
>> Thoughts appear from doubts and die in convictions. Therefore, doubts
>> are an indication of strength and convictions an indication of weakness.
>> Yet, most people believe the opposite.
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.

-- 
- no title specified

Hugo Math?-Hubert

ATER

Laboratoire Interdisciplinaire des Environnements Continentaux (LIEC)

UMR 7360 CNRS - ?B?t IBISE

Universit? de Lorraine ?- ?UFR SciFA

8, Rue du G?n?ral Delestraint

F-57070 METZ

+33(0)9 77 21 66 66
- - - - - - - - - - - - - - - - - -
Les r?flexions naissent dans les doutes et meurent dans les certitudes. 
Les doutes sont donc un signe de force et les certitudes un signe de 
faiblesse. La plupart des gens sont pourtant certains du contraire.
- - - - - - - - - - - - - - - - - -
Thoughts appear from doubts and die in convictions. Therefore, doubts 
are an indication of strength and convictions an indication of weakness. 
Yet, most people believe the opposite.


	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Oct  5 12:16:37 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Oct 2018 12:16:37 +0200
Subject: [Rd] Seg fault stats::runmed
In-Reply-To: <3e83fd14-fe55-3c45-93cb-57a146d2efaf@mpiib-berlin.mpg.de>
References: <3e83fd14-fe55-3c45-93cb-57a146d2efaf@mpiib-berlin.mpg.de>
Message-ID: <23479.14853.789755.950142@stat.math.ethz.ch>

>>>>> Hilmar Berger 
>>>>>     on Fri, 5 Oct 2018 10:17:49 +0200 writes:

    > Dear all, I just found this issue:

    > I just found this issue:

    > dd1 = c(rep(NaN,82), rep(-1, 144), rep(1, 74))
    > xx = runmed(dd1, 21)

    >> R crashes reproducibly in R 3.4.3, R3.4.4 (Ubuntu 14.04/Ubuntu 16.04)

and also in the latest development version (we call "R-devel").

THank you very much, Hilmar!

I will have a look, to ensure missing values (incl NaN) are
handled propertly.

Martin

--
Martin Maechler
ETH Zurich and R Core Team

    > With GDB:
    > Program received signal SIGSEGV, Segmentation fault.
    > swap (l=53, r=86, window=window at entry=0xc59308, 
    > outlist=outlist at entry=0x12ea2e8, nrlist=nrlist at entry=0x114fdd8, 
    > print_level=print_level at entry=0) at Trunmed.c:64
    > 64??? ??? outlist[nr/* = nrlist[l] */] = l;

    > Valgrind also reports access to unallocated memory and/or writing past 
    > the end of the heap.

    > The crash does not happen if the order is changed:

    > dd2 = c(rep(-1, 144), rep(1, 74), rep(NaN,82))
    > xx = runmed(dd2,21)

    > Error in if (a < b) { : missing value where TRUE/FALSE needed


From niekboum@n @ending from hotm@il@com  Fri Oct  5 09:53:31 2018
From: niekboum@n @ending from hotm@il@com (Niek Bouman)
Date: Fri, 5 Oct 2018 07:53:31 +0000
Subject: [Rd] Bug in make.unique
Message-ID: <HE1PR0101MB2153B4684113D54A1D2612DFDCEB0@HE1PR0101MB2153.eurprd01.prod.exchangelabs.com>

The make.unique function states that the algorithm has the property that make.unique(c(A, B)) == make.unique(c(make.unique(A), B)).


This doesn't seem to be the case in all situations. An example:


A <- c("1","1")
B <- "1.1"
make.unique(c(A, B))
[1] "1"   "1.2" "1.1"
make.unique(c(make.unique(A), B))
[1] "1"     "1.1"   "1.1.1"
make.unique(c(A, B)) == make.unique(c(make.unique(A), B))
[1]  TRUE FALSE FALSE

I tested this on a couple of R versions between R 3.2.1 and R 3.5.0.

	[[alternative HTML version deleted]]


From j@n@@nn@ert @ending from u@ntwerpen@be  Fri Oct  5 09:58:15 2018
From: j@n@@nn@ert @ending from u@ntwerpen@be (Annaert Jan)
Date: Fri, 5 Oct 2018 07:58:15 +0000
Subject: [Rd] 
 [R] Bug : Autocorrelation in sample drawn from stats::rnorm (hmh)
In-Reply-To: <f5169c3a-cd6b-1ba4-9701-4119f4123db3@gmx.fr>
References: <1607055752.4873464.1538697126419.ref@mail.yahoo.com>
 <1607055752.4873464.1538697126419@mail.yahoo.com>
 <f5169c3a-cd6b-1ba4-9701-4119f4123db3@gmx.fr>
Message-ID: <61E0376C-8813-4678-B4AF-12D57017624C@ua.ac.be>

On 05/10/2018, 09:45, "R-help on behalf of hmh" <r-help-bounces at r-project.org on behalf of hugomh at gmx.fr> wrote:

    Hi,
    
    Thanks William for this fast answer, and sorry for sending the 1st mail 
    to r-help instead to r-devel.
    
    
    I noticed that bug while I was simulating many small random walks using 
    c(0,cumsum(rnorm(10))). Then the negative auto-correlation was inducing 
    a muchsmaller space visited by the random walks than expected if there 
    would be no auto-correlation in the samples.
    
    
    The code I provided and you optimized was only provided to illustrated 
    and investigate that bug.
    
    
    It is really worrying that most of the R distributions are affected by 
    this bug !!!!
    
    What I did should have been one of the first check done for _*each*_ 
    distributions by the developers of these functions !
    
    
    And if as you suggested this is a "tolerated" _error_ of the algorithm, 
    I do think this is a bad choice, but any way, this should have been 
    mentioned in the documentations of the functions !!
    
    
    cheers,
    
    hugo
 
This is not a bug. You have simply rediscovered the finite-sample bias in the sample autocorrelation coefficient, known at least since
Kendall, M. G. (1954). Note on bias in the estimation of autocorrelation. Biometrika, 41(3-4), 403-404. 

The bias is approximately -1/T, with T sample size, which explains why it seems to disappear in the larger sample sizes you consider.

Jan


From j@n@@nn@ert @ending from u@ntwerpen@be  Fri Oct  5 10:28:05 2018
From: j@n@@nn@ert @ending from u@ntwerpen@be (Annaert Jan)
Date: Fri, 5 Oct 2018 08:28:05 +0000
Subject: [Rd] 
 [R] Bug : Autocorrelation in sample drawn from stats::rnorm (hmh)
In-Reply-To: <aa15aaef-d56c-e44a-e618-61c69e9b36a7@gmx.fr>
References: <1607055752.4873464.1538697126419.ref@mail.yahoo.com>
 <1607055752.4873464.1538697126419@mail.yahoo.com>
 <f5169c3a-cd6b-1ba4-9701-4119f4123db3@gmx.fr>
 <61E0376C-8813-4678-B4AF-12D57017624C@ua.ac.be>
 <aa15aaef-d56c-e44a-e618-61c69e9b36a7@gmx.fr>
Message-ID: <ABD057D3-5E10-44B4-B4DD-0FB04D475B52@ua.ac.be>



> Nope.

> This IS a bug:
> The negative auto-correlation mostly disappear when I randomize small samples using the R function 'sample'.

> Please check thoroughly the code of the 1st mail I sent, there should be no difference between the two R functions I wrote to illustrate the bug.
> The two functions that should produce the same output if there would be no bug are 'DistributionAutocorrelation_Unexpected' and  'DistributionAutocorrelation_Expected'.
>Please take the time to compare there output!!
>The finite-sample bias in the sample autocorrelation coefficient you mention should affect them in the same manner. This bias is not the only phenomenon at work, there is ALSO as BUG !

I disagree. Take a look at your code:
Cor[repetition] = cor(sample(X[-1]),sample(X[-length(X)]))

By sampling the two series in the correlation function, you discard any time series structure; you are no longer estimating a serial correlation coefficient, but just a correlation (which in this case is unbiased).
Try out the following:

Xs <- sample(X)
Cor[repetition] = cor(Xs[-1]),(Xs[-length(Xs)]))

The bias should reappear.

Jan


-------------- next part --------------
A non-text attachment was scrubbed...
Name: cclhgmpcmhoinmca.png
Type: image/png
Size: 76147 bytes
Desc: cclhgmpcmhoinmca.png
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181005/1c25e7f4/attachment.png>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: adeokhkijhbomjkp.png
Type: image/png
Size: 75264 bytes
Desc: adeokhkijhbomjkp.png
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181005/1c25e7f4/attachment-0001.png>

From @uh@rto_@nggono @ending from y@hoo@com  Fri Oct  5 19:13:30 2018
From: @uh@rto_@nggono @ending from y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Fri, 5 Oct 2018 17:13:30 +0000 (UTC)
Subject: [Rd] Redundant code in 'split.default' in R devel
References: <812236401.4971991.1538759610466.ref@mail.yahoo.com>
Message-ID: <812236401.4971991.1538759610466@mail.yahoo.com>

After r75387, function 'split.default' in R devel still has this part that no longer has effect.
    lf <- levels(f)
    y <- vector("list", length(lf))
    names(y) <- lf


From @eth@ru@@ell @ending from gm@il@com  Fri Oct  5 21:39:26 2018
From: @eth@ru@@ell @ending from gm@il@com (Seth Russell)
Date: Fri, 5 Oct 2018 13:39:26 -0600
Subject: [Rd] 
 segfault issue with parallel::mclapply and download.file() on
 Mac OS X
In-Reply-To: <CABFfbXuNZabMUimXfgHJX06mucCC0LuH8L7dkPCFCVv5=MOxPw@mail.gmail.com>
References: <CAB75gRUv1LitTgWSbMFunqp7P9wfWG_BJ_xYBPN4K5KJkDu+_g@mail.gmail.com>
 <f4b472d8-95d1-dcbe-5889-f88f31077f9d@gmail.com>
 <CABFfbXuNZabMUimXfgHJX06mucCC0LuH8L7dkPCFCVv5=MOxPw@mail.gmail.com>
Message-ID: <CAB75gRUUtP-5ij2q=yHLepk3G_bqCdD=ZAaq5GwL3Th4iDtEXQ@mail.gmail.com>

Jeroen/Tomas,

Thanks for the additional follow-ups. As shown in my original post, I am on
macOS 10.12.6. I was using the command line version of R to get the error
message I sent; I also get similar problems when running via GUI tools such
as RStudio. I have co-workers who are only using macOS and they got similar
crashes - though I'm not sure which version of macOS they are on.

Based on G?bor's recommendation I did quit using the default libcurl
backend (default on my machine at least). Using download.file(url, path,
method = curl) has been working great for my use case.

Seth

	[[alternative HTML version deleted]]


From lg@utier @ending from gm@il@com  Sat Oct  6 19:26:36 2018
From: lg@utier @ending from gm@il@com (Laurent Gautier)
Date: Sat, 6 Oct 2018 13:26:36 -0400
Subject: [Rd] Warning when calling formals() for `[`.
Message-ID: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>

Hi,

A short code example showing the warning might the only thing needed here:

```
> formals(args(`[`))
NULL

*Warning message:In formals(fun) : argument is not a function*
> is.function(`[`)
[1] TRUE
> is.primitive(`[`)
[1] TRUE
```

Now with an other primitive:

```
> formals(args(`sum`))
$...


$na.rm
[1] FALSE

> is.function(`sum`)
[1] TRUE
> is.primitive(`sum`)
[1] TRUE
> class(`[`)
[1] "function"
```

Is this a feature ?


Laurent

	[[alternative HTML version deleted]]


From ruipb@rr@d@@ @ending from @@po@pt  Sat Oct  6 19:42:52 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Sat, 6 Oct 2018 18:42:52 +0100
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
Message-ID: <f5d15068-0776-2b5e-11d7-b1ae6ffc1d3b@sapo.pt>

Hello,

I believe that this is maybe not a *feature* but at least expected 
behaviour.

The call formals(args(`[`)) breaks down to


 > args(`[`)
NULL
 > formals(NULL)
NULL
Warning message:
In formals(fun) : argument is not a function


Hope this helps,

Rui Barradas


?s 18:26 de 06/10/2018, Laurent Gautier escreveu:
> Hi,
> 
> A short code example showing the warning might the only thing needed here:
> 
> ```
>> formals(args(`[`))
> NULL
> 
> *Warning message:In formals(fun) : argument is not a function*
>> is.function(`[`)
> [1] TRUE
>> is.primitive(`[`)
> [1] TRUE
> ```
> 
> Now with an other primitive:
> 
> ```
>> formals(args(`sum`))
> $...
> 
> 
> $na.rm
> [1] FALSE
> 
>> is.function(`sum`)
> [1] TRUE
>> is.primitive(`sum`)
> [1] TRUE
>> class(`[`)
> [1] "function"
> ```
> 
> Is this a feature ?
> 
> 
> Laurent
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ruipb@rr@d@@ @ending from @@po@pt  Sat Oct  6 19:47:07 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Sat, 6 Oct 2018 18:47:07 +0100
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <f5d15068-0776-2b5e-11d7-b1ae6ffc1d3b@sapo.pt>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <f5d15068-0776-2b5e-11d7-b1ae6ffc1d3b@sapo.pt>
Message-ID: <85d9fe59-1f95-f55a-7dd2-a7dc6fa18e67@sapo.pt>

Hello,

I forgot to ask you to also try to break the `sum` instruction into its 
components:

args(`sum`)


does return a function. Therefore formals(args(`sum`)) returns something 
useable and no warning.

Rui Barradas

?s 18:42 de 06/10/2018, Rui Barradas escreveu:
> Hello,
> 
> I believe that this is maybe not a *feature* but at least expected 
> behaviour.
> 
> The call formals(args(`[`)) breaks down to
> 
> 
>  > args(`[`)
> NULL
>  > formals(NULL)
> NULL
> Warning message:
> In formals(fun) : argument is not a function
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
> 
> ?s 18:26 de 06/10/2018, Laurent Gautier escreveu:
>> Hi,
>>
>> A short code example showing the warning might the only thing needed 
>> here:
>>
>> ```
>>> formals(args(`[`))
>> NULL
>>
>> *Warning message:In formals(fun) : argument is not a function*
>>> is.function(`[`)
>> [1] TRUE
>>> is.primitive(`[`)
>> [1] TRUE
>> ```
>>
>> Now with an other primitive:
>>
>> ```
>>> formals(args(`sum`))
>> $...
>>
>>
>> $na.rm
>> [1] FALSE
>>
>>> is.function(`sum`)
>> [1] TRUE
>>> is.primitive(`sum`)
>> [1] TRUE
>>> class(`[`)
>> [1] "function"
>> ```
>>
>> Is this a feature ?
>>
>>
>> Laurent
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From lg@utier @ending from gm@il@com  Sat Oct  6 19:52:56 2018
From: lg@utier @ending from gm@il@com (Laurent Gautier)
Date: Sat, 6 Oct 2018 13:52:56 -0400
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <f5d15068-0776-2b5e-11d7-b1ae6ffc1d3b@sapo.pt>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <f5d15068-0776-2b5e-11d7-b1ae6ffc1d3b@sapo.pt>
Message-ID: <CA+JCgN3iXFhgeEA4Ozmw-VutK=VPXnF0dxTFV9C6AZJF+p1LjA@mail.gmail.com>

Hi,

Thanks for the note. How would explain the following snippet taken from
`formals` doc page (the code comment is also from that doc) ?

## formals returns NULL for primitive functions.  Use it in combination with
     ## args for this case.
     is.primitive(`+`)
     formals(`+`)
     formals(args(`+`))



Le sam. 6 oct. 2018 ? 13:42, Rui Barradas <ruipbarradas at sapo.pt> a ?crit :

> Hello,
>
> I believe that this is maybe not a *feature* but at least expected
> behaviour.
>
> The call formals(args(`[`)) breaks down to
>
>
>  > args(`[`)
> NULL
>  > formals(NULL)
> NULL
> Warning message:
> In formals(fun) : argument is not a function
>
>
> Hope this helps,
>
> Rui Barradas
>
>
> ?s 18:26 de 06/10/2018, Laurent Gautier escreveu:
> > Hi,
> >
> > A short code example showing the warning might the only thing needed
> here:
> >
> > ```
> >> formals(args(`[`))
> > NULL
> >
> > *Warning message:In formals(fun) : argument is not a function*
> >> is.function(`[`)
> > [1] TRUE
> >> is.primitive(`[`)
> > [1] TRUE
> > ```
> >
> > Now with an other primitive:
> >
> > ```
> >> formals(args(`sum`))
> > $...
> >
> >
> > $na.rm
> > [1] FALSE
> >
> >> is.function(`sum`)
> > [1] TRUE
> >> is.primitive(`sum`)
> > [1] TRUE
> >> class(`[`)
> > [1] "function"
> > ```
> >
> > Is this a feature ?
> >
> >
> > Laurent
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From pd@lgd @ending from gm@il@com  Sun Oct  7 15:05:07 2018
From: pd@lgd @ending from gm@il@com (Peter Dalgaard)
Date: Sun, 7 Oct 2018 15:05:07 +0200
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
Message-ID: <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>

There is more "fun" afoot here, but I don't recall what the point may be:

> args(get("+"))
function (e1, e2) 
NULL
> args(get("["))
NULL
> get("[")
.Primitive("[")
> get("+")
function (e1, e2)  .Primitive("+")

The other index operators, "[[", "[<-", "[[<-" are similar

The docs are pretty clear that args() on a primitive should yield a closure, so at least the documentation seems to be wrong.

-pd


> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com> wrote:
> 
> Hi,
> 
> A short code example showing the warning might the only thing needed here:
> 
> ```
>> formals(args(`[`))
> NULL
> 
> *Warning message:In formals(fun) : argument is not a function*
>> is.function(`[`)
> [1] TRUE
>> is.primitive(`[`)
> [1] TRUE
> ```
> 
> Now with an other primitive:
> 
> ```
>> formals(args(`sum`))
> $...
> 
> 
> $na.rm
> [1] FALSE
> 
>> is.function(`sum`)
> [1] TRUE
>> is.primitive(`sum`)
> [1] TRUE
>> class(`[`)
> [1] "function"
> ```
> 
> Is this a feature ?
> 
> 
> Laurent
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ruipb@rr@d@@ @ending from @@po@pt  Sun Oct  7 16:04:06 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Sun, 7 Oct 2018 15:04:06 +0100
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
Message-ID: <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>

Hello,

I don't see why you say that the documentation seems to be wrong:


class(args(`+`))
#[1] "function"


args() on a primitive does return a closure. At least in this case it does.


Rui Barradas

?s 14:05 de 07/10/2018, Peter Dalgaard escreveu:
> There is more "fun" afoot here, but I don't recall what the point may be:
> 
>> args(get("+"))
> function (e1, e2)
> NULL
>> args(get("["))
> NULL
>> get("[")
> .Primitive("[")
>> get("+")
> function (e1, e2)  .Primitive("+")
> 
> The other index operators, "[[", "[<-", "[[<-" are similar
> 
> The docs are pretty clear that args() on a primitive should yield a closure, so at least the documentation seems to be wrong.
> 
> -pd
> 
> 
>> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com> wrote:
>>
>> Hi,
>>
>> A short code example showing the warning might the only thing needed here:
>>
>> ```
>>> formals(args(`[`))
>> NULL
>>
>> *Warning message:In formals(fun) : argument is not a function*
>>> is.function(`[`)
>> [1] TRUE
>>> is.primitive(`[`)
>> [1] TRUE
>> ```
>>
>> Now with an other primitive:
>>
>> ```
>>> formals(args(`sum`))
>> $...
>>
>>
>> $na.rm
>> [1] FALSE
>>
>>> is.function(`sum`)
>> [1] TRUE
>>> is.primitive(`sum`)
>> [1] TRUE
>>> class(`[`)
>> [1] "function"
>> ```
>>
>> Is this a feature ?
>>
>>
>> Laurent
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ruipb@rr@d@@ @ending from @@po@pt  Sun Oct  7 16:07:17 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Sun, 7 Oct 2018 15:07:17 +0100
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <CA+JCgN3iXFhgeEA4Ozmw-VutK=VPXnF0dxTFV9C6AZJF+p1LjA@mail.gmail.com>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <f5d15068-0776-2b5e-11d7-b1ae6ffc1d3b@sapo.pt>
 <CA+JCgN3iXFhgeEA4Ozmw-VutK=VPXnF0dxTFV9C6AZJF+p1LjA@mail.gmail.com>
Message-ID: <26e3fea8-5849-1653-2768-1a8021ba8ab5@sapo.pt>

Hello,

This is the *third* time I send this, the first two I had a failure 
notice so if you have already received it please apologize.

I believe this is consistent with the doc.
   From section Value:

formals returns the formal argument list of the function specified, as a
pairlist, or NULL for a non-function or primitive.


So since `+` is primitive formals is expected to return NULL.
Now, as for formals(args(`+`)) once again break it down to its two parts.

   > args(`+`)
function (e1, e2)
NULL


Now pass the return value to formals.

   > formals(function (e1, e2) NULL)
$e1


$e2


(I first tried this last call with the argument between back ticks and
it didn't work, I wonder why.)


Hope this helps,

Rui Barradas


?s 18:52 de 06/10/2018, Laurent Gautier escreveu:
> Hi,
> 
> Thanks for the note. How would explain the following snippet taken from 
> `formals` doc page (the code comment is also from that doc) ?
> 
> ## formals returns NULL for primitive functions.? Use it in combination with
>  ???? ## args for this case.
>  ???? is.primitive(`+`)
>  ???? formals(`+`)
>  ???? formals(args(`+`))
> 
> 
> 
> Le?sam. 6 oct. 2018 ??13:42, Rui Barradas <ruipbarradas at sapo.pt 
> <mailto:ruipbarradas at sapo.pt>> a ?crit?:
> 
>     Hello,
> 
>     I believe that this is maybe not a *feature* but at least expected
>     behaviour.
> 
>     The call formals(args(`[`)) breaks down to
> 
> 
>      ?> args(`[`)
>     NULL
>      ?> formals(NULL)
>     NULL
>     Warning message:
>     In formals(fun) : argument is not a function
> 
> 
>     Hope this helps,
> 
>     Rui Barradas
> 
> 
>     ?s 18:26 de 06/10/2018, Laurent Gautier escreveu:
>      > Hi,
>      >
>      > A short code example showing the warning might the only thing
>     needed here:
>      >
>      > ```
>      >> formals(args(`[`))
>      > NULL
>      >
>      > *Warning message:In formals(fun) : argument is not a function*
>      >> is.function(`[`)
>      > [1] TRUE
>      >> is.primitive(`[`)
>      > [1] TRUE
>      > ```
>      >
>      > Now with an other primitive:
>      >
>      > ```
>      >> formals(args(`sum`))
>      > $...
>      >
>      >
>      > $na.rm
>      > [1] FALSE
>      >
>      >> is.function(`sum`)
>      > [1] TRUE
>      >> is.primitive(`sum`)
>      > [1] TRUE
>      >> class(`[`)
>      > [1] "function"
>      > ```
>      >
>      > Is this a feature ?
>      >
>      >
>      > Laurent
>      >
>      >? ? ? ?[[alternative HTML version deleted]]
>      >
>      > ______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>      >
>


From lg@utier @ending from gm@il@com  Sun Oct  7 16:07:24 2018
From: lg@utier @ending from gm@il@com (Laurent Gautier)
Date: Sun, 7 Oct 2018 10:07:24 -0400
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
 <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
Message-ID: <CA+JCgN2meyWUtiBgJ=E79qjVOzSc+H3tBUtOKQ-75PZFwohOLw@mail.gmail.com>

Note that having "function" in its class attribute does not make an object
a primitive.
For example:

> class(`[`)
[1] "function"
> is.primitive(`[`)
[1] TRUE
> class(`rnorm`)
[1] "function"
> is.primitive(`rnorm`)
[1] FALSE


Le dim. 7 oct. 2018 ? 10:04, Rui Barradas <ruipbarradas at sapo.pt> a ?crit :

> Hello,
>
> I don't see why you say that the documentation seems to be wrong:
>
>
> class(args(`+`))
> #[1] "function"
>
>
> args() on a primitive does return a closure. At least in this case it does.
>
>
> Rui Barradas
>
> ?s 14:05 de 07/10/2018, Peter Dalgaard escreveu:
> > There is more "fun" afoot here, but I don't recall what the point may be:
> >
> >> args(get("+"))
> > function (e1, e2)
> > NULL
> >> args(get("["))
> > NULL
> >> get("[")
> > .Primitive("[")
> >> get("+")
> > function (e1, e2)  .Primitive("+")
> >
> > The other index operators, "[[", "[<-", "[[<-" are similar
> >
> > The docs are pretty clear that args() on a primitive should yield a
> closure, so at least the documentation seems to be wrong.
> >
> > -pd
> >
> >
> >> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com> wrote:
> >>
> >> Hi,
> >>
> >> A short code example showing the warning might the only thing needed
> here:
> >>
> >> ```
> >>> formals(args(`[`))
> >> NULL
> >>
> >> *Warning message:In formals(fun) : argument is not a function*
> >>> is.function(`[`)
> >> [1] TRUE
> >>> is.primitive(`[`)
> >> [1] TRUE
> >> ```
> >>
> >> Now with an other primitive:
> >>
> >> ```
> >>> formals(args(`sum`))
> >> $...
> >>
> >>
> >> $na.rm
> >> [1] FALSE
> >>
> >>> is.function(`sum`)
> >> [1] TRUE
> >>> is.primitive(`sum`)
> >> [1] TRUE
> >>> class(`[`)
> >> [1] "function"
> >> ```
> >>
> >> Is this a feature ?
> >>
> >>
> >> Laurent
> >>
> >>      [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From pd@lgd @ending from gm@il@com  Sun Oct  7 16:14:40 2018
From: pd@lgd @ending from gm@il@com (Peter Dalgaard)
Date: Sun, 7 Oct 2018 16:14:40 +0200
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
 <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
Message-ID: <B465FE70-797D-48E0-891E-41E3C6AF0C83@gmail.com>



> On 7 Oct 2018, at 16:04 , Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
> Hello,
> 
> I don't see why you say that the documentation seems to be wrong:
> 
> 
> class(args(`+`))
> #[1] "function"
> 
> 
> args() on a primitive does return a closure. At least in this case it does.

But in this case it doesn't:

> is.primitive(get("["))
[1] TRUE
> class(args(get("[")))
[1] "NULL"

Or, for that matter:

> is.primitive(`[`)
[1] TRUE
> class(args(`[`))
[1] "NULL"

-pd

> 
> 
> Rui Barradas
> 
> ?s 14:05 de 07/10/2018, Peter Dalgaard escreveu:
>> There is more "fun" afoot here, but I don't recall what the point may be:
>>> args(get("+"))
>> function (e1, e2)
>> NULL
>>> args(get("["))
>> NULL
>>> get("[")
>> .Primitive("[")
>>> get("+")
>> function (e1, e2)  .Primitive("+")
>> The other index operators, "[[", "[<-", "[[<-" are similar
>> The docs are pretty clear that args() on a primitive should yield a closure, so at least the documentation seems to be wrong.
>> -pd
>>> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com> wrote:
>>> 
>>> Hi,
>>> 
>>> A short code example showing the warning might the only thing needed here:
>>> 
>>> ```
>>>> formals(args(`[`))
>>> NULL
>>> 
>>> *Warning message:In formals(fun) : argument is not a function*
>>>> is.function(`[`)
>>> [1] TRUE
>>>> is.primitive(`[`)
>>> [1] TRUE
>>> ```
>>> 
>>> Now with an other primitive:
>>> 
>>> ```
>>>> formals(args(`sum`))
>>> $...
>>> 
>>> 
>>> $na.rm
>>> [1] FALSE
>>> 
>>>> is.function(`sum`)
>>> [1] TRUE
>>>> is.primitive(`sum`)
>>> [1] TRUE
>>>> class(`[`)
>>> [1] "function"
>>> ```
>>> 
>>> Is this a feature ?
>>> 
>>> 
>>> Laurent
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ruipb@rr@d@@ @ending from @@po@pt  Sun Oct  7 16:19:09 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Sun, 7 Oct 2018 15:19:09 +0100
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <CA+JCgN2meyWUtiBgJ=E79qjVOzSc+H3tBUtOKQ-75PZFwohOLw@mail.gmail.com>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
 <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
 <CA+JCgN2meyWUtiBgJ=E79qjVOzSc+H3tBUtOKQ-75PZFwohOLw@mail.gmail.com>
Message-ID: <4d547cee-e291-4cb4-56ba-223c32cd0cab@sapo.pt>

Hello,

Inline.

?s 15:07 de 07/10/2018, Laurent Gautier escreveu:
> Note that having "function" in its class attribute does not make an 
> object a primitive.

I did not say it does.

What Peter said is that "args() on a primitive should yield a closure" 
and this return value is indeed a closure.

Rui Barradas

> For example:
> 
>  > class(`[`)
> [1] "function"
>  > is.primitive(`[`)
> [1] TRUE
>  > class(`rnorm`)
> [1] "function"
>  > is.primitive(`rnorm`)
> [1] FALSE
> 
> 
> Le?dim. 7 oct. 2018 ??10:04, Rui Barradas <ruipbarradas at sapo.pt 
> <mailto:ruipbarradas at sapo.pt>> a ?crit?:
> 
>     Hello,
> 
>     I don't see why you say that the documentation seems to be wrong:
> 
> 
>     class(args(`+`))
>     #[1] "function"
> 
> 
>     args() on a primitive does return a closure. At least in this case
>     it does.
> 
> 
>     Rui Barradas
> 
>     ?s 14:05 de 07/10/2018, Peter Dalgaard escreveu:
>      > There is more "fun" afoot here, but I don't recall what the point
>     may be:
>      >
>      >> args(get("+"))
>      > function (e1, e2)
>      > NULL
>      >> args(get("["))
>      > NULL
>      >> get("[")
>      > .Primitive("[")
>      >> get("+")
>      > function (e1, e2)? .Primitive("+")
>      >
>      > The other index operators, "[[", "[<-", "[[<-" are similar
>      >
>      > The docs are pretty clear that args() on a primitive should yield
>     a closure, so at least the documentation seems to be wrong.
>      >
>      > -pd
>      >
>      >
>      >> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com
>     <mailto:lgautier at gmail.com>> wrote:
>      >>
>      >> Hi,
>      >>
>      >> A short code example showing the warning might the only thing
>     needed here:
>      >>
>      >> ```
>      >>> formals(args(`[`))
>      >> NULL
>      >>
>      >> *Warning message:In formals(fun) : argument is not a function*
>      >>> is.function(`[`)
>      >> [1] TRUE
>      >>> is.primitive(`[`)
>      >> [1] TRUE
>      >> ```
>      >>
>      >> Now with an other primitive:
>      >>
>      >> ```
>      >>> formals(args(`sum`))
>      >> $...
>      >>
>      >>
>      >> $na.rm
>      >> [1] FALSE
>      >>
>      >>> is.function(`sum`)
>      >> [1] TRUE
>      >>> is.primitive(`sum`)
>      >> [1] TRUE
>      >>> class(`[`)
>      >> [1] "function"
>      >> ```
>      >>
>      >> Is this a feature ?
>      >>
>      >>
>      >> Laurent
>      >>
>      >>? ? ? [[alternative HTML version deleted]]
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >
>


From ruipb@rr@d@@ @ending from @@po@pt  Sun Oct  7 16:25:15 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Sun, 7 Oct 2018 15:25:15 +0100
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <B465FE70-797D-48E0-891E-41E3C6AF0C83@gmail.com>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
 <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
 <B465FE70-797D-48E0-891E-41E3C6AF0C83@gmail.com>
Message-ID: <02b801c9-4e41-4e29-1d3d-c575da0f6405@sapo.pt>

Hello,

This is because args(`[`) returns NULL and class(NULL) is NULL.
So the question would be why is the return value of args(`[`) NULL?

Rui Barradas

?s 15:14 de 07/10/2018, Peter Dalgaard escreveu:
> 
> 
>> On 7 Oct 2018, at 16:04 , Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>
>> Hello,
>>
>> I don't see why you say that the documentation seems to be wrong:
>>
>>
>> class(args(`+`))
>> #[1] "function"
>>
>>
>> args() on a primitive does return a closure. At least in this case it does.
> 
> But in this case it doesn't:
> 
>> is.primitive(get("["))
> [1] TRUE
>> class(args(get("[")))
> [1] "NULL"
> 
> Or, for that matter:
> 
>> is.primitive(`[`)
> [1] TRUE
>> class(args(`[`))
> [1] "NULL"
> 
> -pd
> 
>>
>>
>> Rui Barradas
>>
>> ?s 14:05 de 07/10/2018, Peter Dalgaard escreveu:
>>> There is more "fun" afoot here, but I don't recall what the point may be:
>>>> args(get("+"))
>>> function (e1, e2)
>>> NULL
>>>> args(get("["))
>>> NULL
>>>> get("[")
>>> .Primitive("[")
>>>> get("+")
>>> function (e1, e2)  .Primitive("+")
>>> The other index operators, "[[", "[<-", "[[<-" are similar
>>> The docs are pretty clear that args() on a primitive should yield a closure, so at least the documentation seems to be wrong.
>>> -pd
>>>> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com> wrote:
>>>>
>>>> Hi,
>>>>
>>>> A short code example showing the warning might the only thing needed here:
>>>>
>>>> ```
>>>>> formals(args(`[`))
>>>> NULL
>>>>
>>>> *Warning message:In formals(fun) : argument is not a function*
>>>>> is.function(`[`)
>>>> [1] TRUE
>>>>> is.primitive(`[`)
>>>> [1] TRUE
>>>> ```
>>>>
>>>> Now with an other primitive:
>>>>
>>>> ```
>>>>> formals(args(`sum`))
>>>> $...
>>>>
>>>>
>>>> $na.rm
>>>> [1] FALSE
>>>>
>>>>> is.function(`sum`)
>>>> [1] TRUE
>>>>> is.primitive(`sum`)
>>>> [1] TRUE
>>>>> class(`[`)
>>>> [1] "function"
>>>> ```
>>>>
>>>> Is this a feature ?
>>>>
>>>>
>>>> Laurent
>>>>
>>>> 	[[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Oct  8 12:53:22 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 8 Oct 2018 12:53:22 +0200
Subject: [Rd] Redundant code in 'split.default' in R devel
In-Reply-To: <812236401.4971991.1538759610466@mail.yahoo.com>
References: <812236401.4971991.1538759610466.ref@mail.yahoo.com>
 <812236401.4971991.1538759610466@mail.yahoo.com>
Message-ID: <23483.14114.153422.975557@stat.math.ethz.ch>

>>>>> Suharto Anggono via R-devel 
>>>>>     on Fri, 5 Oct 2018 17:13:30 +0000 writes:

> After r75387, function 'split.default' in R devel still has this part that no longer has effect.

>     lf <- levels(f)
>     y <- vector("list", length(lf))
>     names(y) <- lf

Indeed  -->   removed now.

Thank you very much, Suharto!
Martin

------- --------

"Exercise" (tongue in cheek) to the reader:

Write a "code walker" (an R function itself) that takes an
argument 'expr', which is an R expression (think of a *body* of a
function 'f')  and is able to  mark e.g.  warn about  such
"dead" code in 'expr' (and hence in function 'f' ...)  --- with 
the important underlying assumption that all functions that are
called inside 'f' have "no side effects".


From emil@bode @ending from d@n@@kn@w@nl  Mon Oct  8 15:38:18 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Mon, 8 Oct 2018 13:38:18 +0000
Subject: [Rd] Warning when calling formals() for `[`.
In-Reply-To: <02b801c9-4e41-4e29-1d3d-c575da0f6405@sapo.pt>
References: <CA+JCgN254QaHVepo03ZuGLsatwmjfDSnUP3yq43N6TguBdWN5g@mail.gmail.com>
 <634D4A0E-A036-4FEB-8C85-978262B46EA7@gmail.com>
 <550606ea-720a-ca30-a762-d8aaf2484661@sapo.pt>
 <B465FE70-797D-48E0-891E-41E3C6AF0C83@gmail.com>
 <02b801c9-4e41-4e29-1d3d-c575da0f6405@sapo.pt>
Message-ID: <B1C4B85E-7C01-42D9-BE12-1571A3E133CA@dans.knaw.nl>

Hello,

I agree the documentation of args can be improved, but the main question is what the return should be.
I guess the reason args() returns NULL is because of the way argument-matching works for primitives: there is a lot going on under the hood, and what arguments are/are not acceptable for `[` can't be stated as straightforward as we can with other functions.
Note also the difference in printing "sum" and "[": sum first prints "function(..., na.rm=FALSE)", whereas `[` jumps straight to the body. And this is not an artefact of printing it, as makes overwriting it makes clear: 
`[` <- function(x, i, j, ..., drop=FALSE) .Primitive("[")
exhibited very strange behaviour, where you need to call it twice/nested: 1[2] returns a primitive function, to get it to do its job you need 1[2](df, 3, 4) instead of df[3,4].
So general advice would probably be to stay away from messing with arguments with primitives, as ?args already hints at: " mainly used interactively (...). For programming, consider using formals instead." 
Basically, primitives are optimized and down to the core, which probably means the concept of an argument-list may not be as clear as it is with "normal" functions.
So working with args() on primitives comes with some risks, which probably is the reason that formals() always return NULL in that case. 
What is your use case?
If you really need a return value, I think you could catch NULL-values, something like this:
args <- function(name) {
  if(is.character(name)) name <- get(name, parent.frame(), mode='function')
  if(!is.function(name)) return(NULL)
  ret <- base::args(name)
  if(is.null(ret) && is.primitive(name)) {
    ret <- function(...) NULL
    environment(ret) <- parent.frame()
  }
  return(ret)
}

Which would just return "function(...) NULL" for args("["), which is of the expected class, but does not give you any real information. Would that help you?
Otherwise, to get to know the arguments there is of course "?"
And note that if there is a dispatch, it's possible to get the argument-list of a specific method, e.g. args(`[.data.frame`) works as expected (as it is not a primitive) 


Best regards, 
Emil Bode

?On 07/10/2018, 16:34, "R-devel on behalf of Rui Barradas" <r-devel-bounces at r-project.org on behalf of ruipbarradas at sapo.pt> wrote:

    Hello,
    
    This is because args(`[`) returns NULL and class(NULL) is NULL.
    So the question would be why is the return value of args(`[`) NULL?
    
    Rui Barradas
    
    ?s 15:14 de 07/10/2018, Peter Dalgaard escreveu:
    > 
    > 
    >> On 7 Oct 2018, at 16:04 , Rui Barradas <ruipbarradas at sapo.pt> wrote:
    >>
    >> Hello,
    >>
    >> I don't see why you say that the documentation seems to be wrong:
    >>
    >>
    >> class(args(`+`))
    >> #[1] "function"
    >>
    >>
    >> args() on a primitive does return a closure. At least in this case it does.
    > 
    > But in this case it doesn't:
    > 
    >> is.primitive(get("["))
    > [1] TRUE
    >> class(args(get("[")))
    > [1] "NULL"
    > 
    > Or, for that matter:
    > 
    >> is.primitive(`[`)
    > [1] TRUE
    >> class(args(`[`))
    > [1] "NULL"
    > 
    > -pd
    > 
    >>
    >>
    >> Rui Barradas
    >>
    >> ?s 14:05 de 07/10/2018, Peter Dalgaard escreveu:
    >>> There is more "fun" afoot here, but I don't recall what the point may be:
    >>>> args(get("+"))
    >>> function (e1, e2)
    >>> NULL
    >>>> args(get("["))
    >>> NULL
    >>>> get("[")
    >>> .Primitive("[")
    >>>> get("+")
    >>> function (e1, e2)  .Primitive("+")
    >>> The other index operators, "[[", "[<-", "[[<-" are similar
    >>> The docs are pretty clear that args() on a primitive should yield a closure, so at least the documentation seems to be wrong.
    >>> -pd
    >>>> On 6 Oct 2018, at 19:26 , Laurent Gautier <lgautier at gmail.com> wrote:
    >>>>
    >>>> Hi,
    >>>>
    >>>> A short code example showing the warning might the only thing needed here:
    >>>>
    >>>> ```
    >>>>> formals(args(`[`))
    >>>> NULL
    >>>>
    >>>> *Warning message:In formals(fun) : argument is not a function*
    >>>>> is.function(`[`)
    >>>> [1] TRUE
    >>>>> is.primitive(`[`)
    >>>> [1] TRUE
    >>>> ```
    >>>>
    >>>> Now with an other primitive:
    >>>>
    >>>> ```
    >>>>> formals(args(`sum`))
    >>>> $...
    >>>>
    >>>>
    >>>> $na.rm
    >>>> [1] FALSE
    >>>>
    >>>>> is.function(`sum`)
    >>>> [1] TRUE
    >>>>> is.primitive(`sum`)
    >>>> [1] TRUE
    >>>>> class(`[`)
    >>>> [1] "function"
    >>>> ```
    >>>>
    >>>> Is this a feature ?
    >>>>
    >>>>
    >>>> Laurent
    >>>>
    >>>> 	[[alternative HTML version deleted]]
    >>>>
    >>>> ______________________________________________
    >>>> R-devel at r-project.org mailing list
    >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    


From tom@@@k@liber@ @ending from gm@il@com  Mon Oct  8 17:05:16 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 8 Oct 2018 17:05:16 +0200
Subject: [Rd] Rscript -e does not accept newlines under Linux?
In-Reply-To: <c49909a1-68a9-020d-34a3-881100690326@gmail.com>
References: <D14049CE02C4F54D95360EEC06CE45C50F937902@SPMXM08.VUW.leidenuniv.nl>
 <c49909a1-68a9-020d-34a3-881100690326@gmail.com>
Message-ID: <5cd8731d-b07d-4ebf-bfbe-ef8f7fcc5d81@gmail.com>

I've checked in an experimental fix for this (75413). The newline was 
lost in the shell script wrapper for R, it is now being escaped 
similarly to space. To pass multiple commands to Rscript, one can also 
use "-e" multiple times.

Tomas

On 09/17/2018 01:09 PM, Duncan Murdoch wrote:
> On 16/09/2018 4:53 AM, Voeten, C.C. wrote:
>> Hello,
>>
>> I have found what I believe to be a bug in the Linux version of the 
>> Rscript binary.
>> Under Windows (official 64-bit 3.5.1 R distribution running on an 
>> up-to-date Win10), I can do the following (e.g. under powershell):
>>
>> PS H:\Users\Cesko> Rscript -e 'ls()
>>>> ls()'
>> character(0)
>> character(0)
>>
>> which works as I expect: I am running Rscript with two arguments, 
>> namely (1) '-e', and (2) two lines of code to be run, and it indeed 
>> executes those two lines of code.
>>
>> This fails when attempted on a Linux build (amd64, compiled from the 
>> official 3.5.1 sources, but also reproducible with today's r-devel 
>> snapshot):
>>
>> $ Rscript -e 'ls()
>> ls()'
>> ARGUMENT 'ls()' __ignored__
>>
>> character(0)
>>
>> This behavior is not what I expected. Have I found a bug, or am I 
>> simply using it wrong?
>
> I would not assume that shell behaviour in Windows and Unix would 
> always be the same.? A better comparison would be to list some other 
> command on the same system that behaves differently.? For example, on 
> MacOS I see
>
> $ echo 'ls()
> > ls()'
> ls()
> ls()
>
>
> which suggests that what you wrote should be legal, but the form of 
> that command is different: there's no equivalent of "-e". Maybe 
> someone else who knows Unix shell behaviour better can comment on 
> whether they'd expect your Rscript command to work.
>
> By the way, if you just want multiple commands to execute, you can 
> separate them by semi-colons, and that does work:
>
> $ Rscript -e 'ls(); ls()'
> character(0)
> character(0)
>
> And I see this, which may explain the original problem:
>
> $ Rscript -e 'commandArgs(); ls()'
> [1] "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> [2] "--slave"
> [3] "--no-restore"
> [4] "-e"
> [5] "commandArgs();~+~ls()"
> character(0)
>
> Notice that argument 5 includes both commands, whereas with the 
> newline they are separated:
>
> $ Rscript -e 'commandArgs()
> > ls()'
> ARGUMENT 'ls()' __ignored__
>
> [1] "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> [2] "--slave"
> [3] "--no-restore"
> [4] "-e"
> [5] "commandArgs()"
> [6] "ls()"
>
> And finally, this also works:
>
> Rscript -e 'ls()
> -e
> ls()'
>
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From luke-tierney @ending from uiow@@edu  Tue Oct  9 04:33:04 2018
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Tue, 9 Oct 2018 02:33:04 +0000
Subject: [Rd] bug with OutDec option and deferred_string altrep object
In-Reply-To: <CAHPe-e_tYmV1pc__C_hsh6D1uBPgMe1bZ1WVSCbmWfYyCaD3bg@mail.gmail.com>
References: <CAHPe-e_tYmV1pc__C_hsh6D1uBPgMe1bZ1WVSCbmWfYyCaD3bg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1810082132220.3154@luke-Latitude-7480>

Thanks for the report. The approach you outlines below should work --
I'll look into it.

Best,

luke

On Mon, 8 Oct 2018, Michael Sannella wrote:

> While implementing R's new 'altrep' functionality in the TERR engine,
> I discovered a bug in R's 'deferred_string' altrep object: it is not
> using the correct value of the 'OutDec' option when it expands a
> deferred_string.? See the following example:
> 
> R 3.5.1: (same results in R 3.6.0 devel engine built 10/5)
> ? ? > options(scipen=0, OutDec=".")
> ? ? > as.character(123.456)
> ? ? [1] "123.456"
> ? ? > options(scipen=-5, OutDec=",")
> ? ? > as.character(123.456)
> ? ? [1] "1,23456e+02"
> ? ? > xx <- as.character(123.456)
> ? ? > options(scipen=0, OutDec=".")
> ? ? > xx
> ? ? [1] "1.23456e+02"
> ? ? >
> 
> In the example above, the variable 'xx' is set to a deferred_string
> while OutDec is ','.? However, when the string is actually formatted
> (when xx is printed), it uses the current option value OutDec='.' to
> format the string.? I think that deferred_string should use the value
> OutDec=',' from when as.character was called.
> 
> Note that the behavior is different with the 'scipen' option: The
> deferred_string object records the scipen=-5 value when as.character
> is called, and uses this value when xx is printed.? Looking at the
> deferred_string object, it appears that CDR(R_altrep_data1(<obj>)) is
> set to a scalar integer containing the scipen value at the time the
> deferred_string was created.
> 
> Ideally, the deferred_string object would save both the scipen and
> OutDec option values.? I'd suggest saving these values as regular
> pairlist values, say by setting the data1 field to pairlist(<source>,
> scipen=-5L, OutDec=',') for the value of xx above.? To save space, you
> could avoid saving these values in the common case where scipen=0L,
> OutDec='.'.? It would also be better if the data1 field was a
> well-formed pairlist; the current value of the data1 field causes
> R_inspect to segfault.
> 
> I understand that you probably wouldn't want to change the
> deferred_string structure.? An alternative fix would be to avoid this
> case by:
> ? 1. Never create a deferred_string if OutDec is not '.'.
> ? 2. When expanding an element of a deferred_string, temporarily set
> OutDec to '.'.
> 
> ? ~~ Michael Sannella
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From m@@nnell @ending from tibco@com  Mon Oct  8 22:01:39 2018
From: m@@nnell @ending from tibco@com (Michael Sannella)
Date: Mon, 8 Oct 2018 13:01:39 -0700
Subject: [Rd] bug with OutDec option and deferred_string altrep object
Message-ID: <CAHPe-e_tYmV1pc__C_hsh6D1uBPgMe1bZ1WVSCbmWfYyCaD3bg@mail.gmail.com>

While implementing R's new 'altrep' functionality in the TERR engine,
I discovered a bug in R's 'deferred_string' altrep object: it is not
using the correct value of the 'OutDec' option when it expands a
deferred_string.  See the following example:

R 3.5.1: (same results in R 3.6.0 devel engine built 10/5)
    > options(scipen=0, OutDec=".")
    > as.character(123.456)
    [1] "123.456"
    > options(scipen=-5, OutDec=",")
    > as.character(123.456)
    [1] "1,23456e+02"
    > xx <- as.character(123.456)
    > options(scipen=0, OutDec=".")
    > xx
    [1] "1.23456e+02"
    >

In the example above, the variable 'xx' is set to a deferred_string
while OutDec is ','.  However, when the string is actually formatted
(when xx is printed), it uses the current option value OutDec='.' to
format the string.  I think that deferred_string should use the value
OutDec=',' from when as.character was called.

Note that the behavior is different with the 'scipen' option: The
deferred_string object records the scipen=-5 value when as.character
is called, and uses this value when xx is printed.  Looking at the
deferred_string object, it appears that CDR(R_altrep_data1(<obj>)) is
set to a scalar integer containing the scipen value at the time the
deferred_string was created.

Ideally, the deferred_string object would save both the scipen and
OutDec option values.  I'd suggest saving these values as regular
pairlist values, say by setting the data1 field to pairlist(<source>,
scipen=-5L, OutDec=',') for the value of xx above.  To save space, you
could avoid saving these values in the common case where scipen=0L,
OutDec='.'.  It would also be better if the data1 field was a
well-formed pairlist; the current value of the data1 field causes
R_inspect to segfault.

I understand that you probably wouldn't want to change the
deferred_string structure.  An alternative fix would be to avoid this
case by:
  1. Never create a deferred_string if OutDec is not '.'.
  2. When expanding an element of a deferred_string, temporarily set
OutDec to '.'.

  ~~ Michael Sannella

	[[alternative HTML version deleted]]


From m@@nnell @ending from tibco@com  Tue Oct  9 01:17:49 2018
From: m@@nnell @ending from tibco@com (Michael Sannella)
Date: Mon, 8 Oct 2018 16:17:49 -0700
Subject: [Rd] R_ext/Altrep.h should be more C++-friendly
Message-ID: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>

I am not able to #include "R_ext/Altrep.h" from a C++ file.  I think
it needs two changes:

1. add the same __cplusplus check as most of the other header files:
    #ifdef  __cplusplus
    extern "C" {
    #endif
        ...
    #ifdef  __cplusplus
    }
    #endif

2. change the line
    R_new_altrep(R_altrep_class_t class, SEXP data1, SEXP data2);
 to
    R_new_altrep(R_altrep_class_t cls, SEXP data1, SEXP data2);
 since C++ doesn't like an argument named 'class'

  ~~ Michael Sannella

	[[alternative HTML version deleted]]


From pd@me@ @ending from cb@@dk  Tue Oct  9 16:11:43 2018
From: pd@me@ @ending from cb@@dk (Peter Dalgaard)
Date: Tue, 9 Oct 2018 14:11:43 +0000
Subject: [Rd] Surprise with plot.lm()
Message-ID: <96C5F1B6-0217-4C80-8014-D94239C2114B@cbs.dk>

Here's a silly little stunt:

> Y <- rexp(10) ; x <- 1:10
> plot(lm(I(Y^.3)~x))
Hit <Return> to see next plot: 
Hit <Return> to see next plot: 
Error: $ operator is invalid for atomic vectors

The root cause is that the "AsIs" class lingers on the intercept passed to abline() via qqline(), so abline sees that it has been passed an object and uses coef() and coef.default() looks for object$coefficients, and... poof!

The immediate workaround is just to drop the I(), but as I() is frequently needed on the right hand side of formulas, this looks like a rather easy mistake to make, so it might be worth fixing, but how? 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@liber@ @ending from gm@il@com  Tue Oct  9 16:40:39 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 9 Oct 2018 16:40:39 +0200
Subject: [Rd] unexpected behavior of unzip with list=T and
 unzip=/usr/bin/unzip
In-Reply-To: <CAPFf-rUFbDw_-DtQaPQ6v1uq6aJSXzzrVeDEy+2=AJh-dnDRmA@mail.gmail.com>
References: <CAPFf-rUFbDw_-DtQaPQ6v1uq6aJSXzzrVeDEy+2=AJh-dnDRmA@mail.gmail.com>
Message-ID: <0c598d2c-1953-6da8-ea96-2cbad0410435@gmail.com>

Hi Paul,

thanks for the report. Fixed in R-devel 75417.

Best
Tomas

On 07/04/2018 10:08 PM, Paul Schrimpf wrote:
> Hello,
>
> I encountered some unexpected behavior of unzip when using info-zip's unzip
> instead of R's internal program. Specifically, unzip("file.zip", list=TRUE,
> unzip=/usr/bin/unzip) produces incorrect output if the zip archive has
> filenames with spaces, and results in an error if the zip archive includes
> an archive comment or file comments.
>
> Here is some code to reproduce along with the attached files
>
> ## (mostly) expected behavior
> res.intern <- unzip("noSpaces.zip",list=TRUE)
> res.infozip <- unzip("noSpaces.zip",list=TRUE,unzip="/usr/bin/unzip")
>
> identical(res.intern,res.infozip) ## will be false, but expected from
>                                    ## documentation about dates
> identical(res.infozip$Name,res.intern$Name)     ## True
> res.infozip$Length==res.intern$Length           ## TRUE
> identical(res.infozip$Length,res.intern$Length) ## FALSE, because
>                                                  ## former numeric, later
> integer
>
> ## More problematic cases
> print(unzip("fileNameWithSpaces.zip",list=TRUE))
> print(unzip("fileNameWithSpaces.zip",list=TRUE,unzip="/usr/bin/unzip"))
>        ## read.table is used to parse output of unzip -l, and gets
>        ## confused by extra spaces
>
> print(unzip("withArchiveComment.zip",list=TRUE))
> print(unzip("withArchiveComment.zip",list=TRUE,unzip="/usr/bin/unzip"))
>        ## produces an error
>
> print(unzip("entryComments.zip",list=TRUE))
> print(unzip("entryComments.zip",list=TRUE,unzip="/usr/bin/unzip"))
>        ## produces an error
>
> Looking at the code for R's unzip, the basic problem is that it makes a
> bunch of assumptions about the format of the output of "unzip -l"  that are
> not always true and are not verified.
>
> It's unclear to me whether R's unzip should be expected to be compatible
> with all sorts of external unzip programs, so perhaps a sufficient solution
> is simply to revise the documentation (which already mentions potential
> problems  with dates and unzip, list=TRUE, and external programs).
>
> Alternatively, R's unzip function could be changed to work with info-zip
> unzip by :
> (1) add "-ql" instead of just "-l" when list=TRUE to eliminate the printing
> of comments
> (2) not use read.table to parse the output of unzip, instead to something
> like the following (which is an admittedly messy workaround)
>
>              res <- if (WINDOWS)
>                  system2(unzip, c("-ql", shQuote(zipfile)), stdout = TRUE)
>              else system2(unzip, c("-ql", shQuote(zipfile)), stdout = TRUE,
>                  env = c("TZ=UTC"))
>              dashes <- grep("--",res)
>              s <- dashes[1]+1
>              l <- dashes[2]-1
>              starts <- gregexpr("-+",res[dashes[1]])[[1]]
>              ends <- gregexpr("[[:space:]]+",res[dashes[1]])[[1]]
>              z <- data.frame(
>                  Name=sapply(res[s:l], function(x) {
>                    substr(x, starts[4], stop=nchar(x))
>                  }),
>                  Length=sapply(res[s:l], function(x) {
>                    as.numeric(substr(x, starts[1], stop=ends[1]))
>                  }),
>                  Date=sapply(res[s:l], function(x) {
>                    substr(x, starts[2], stop=ends[2])
>                  }),
>                  Time=sapply(res[s:l], function(x) {
>                    substr(x, starts[3], stop=ends[3])
>                  }),
>                  stringsAsFactors=FALSE
>              )
>              rownames(z) <- NULL
>
> I can submit a patch if this is appropriate. I'm really not sure though
> because I am new to R-devel. Also, this has the downsides of relying on the
> behavior of info-zip unzip, which might change in future versions and is
> unlikely to be the same for other external unzip programs. On the other
> hand, the current code also relies on the behavior of info-zip unzip, but
> also doesn't work in some cases.
>
> Thanks,
> Paul
>
> P.S.
>
> My sessionInfo is
>
>> sessionInfo()
> R version 3.5.1 (2018-07-02)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Arch Linux
>
> Matrix products: default
> BLAS/LAPACK: /usr/lib/libopenblas_haswellp-r0.3.1.so
>
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> LC_PAPER=en_US.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] devtools_1.13.5
>
> loaded via a namespace (and not attached):
> [1] compiler_3.5.1 tools_3.5.1    withr_2.1.2    memoise_1.1.0
> digest_0.6.15
>
> And unzip -v
>
> UnZip 6.00 of 20 April 2009, by Info-ZIP.  Maintained by C. Spieler.  Send
> bug reports using http://www.info-zip.org/zip-bug.html; see README for
> details.
>
> Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip/ ;
> see ftp://ftp.info-zip.org/pub/infozip/UnZip.html for other sites.
>
> Compiled with gcc 5.3.0 for Unix (Linux ELF) on Apr 17 2016.
>
> UnZip special compilation options:
>          ACORN_FTYPE_NFS
>          COPYRIGHT_CLEAN (PKZIP 0.9x unreducing method not supported)
>          SET_DIR_ATTRIB
>          SYMLINKS (symbolic links supported, if RTL and file system permit)
>          TIMESTAMP
>          UNIXBACKUP
>          USE_EF_UT_TIME
>          USE_UNSHRINK (PKZIP/Zip 1.x unshrinking method supported)
>          USE_DEFLATE64 (PKZIP 4.x Deflate64(tm) supported)
>          UNICODE_SUPPORT [wide-chars, char coding: UTF-8] (handle UTF-8
> paths)
>          LARGE_FILE_SUPPORT (large files over 2 GiB supported)
>          ZIP64_SUPPORT (archives using Zip64 for large files supported)
>          USE_BZIP2 (PKZIP 4.6+, using bzip2 lib version 1.0.6, 6-Sept-2010)
>          VMS_TEXT_CONV
>          WILD_STOP_AT_DIR
>          [decryption, version 2.11 of 05 Jan 2007]
>
> UnZip and ZipInfo environment options:
>             UNZIP:  [none]
>          UNZIPOPT:  [none]
>           ZIPINFO:  [none]
>        ZIPINFOOPT:  [none]
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@ru@@ell @ending from eo@-@olution@@com  Tue Oct  9 16:56:17 2018
From: g@ru@@ell @ending from eo@-@olution@@com (Russell, George)
Date: Tue, 9 Oct 2018 14:56:17 +0000
Subject: [Rd] Buglet in handling times in R-3.5.1
Message-ID: <HE1PR1001MB10356685E98F585AEB6F6ED5A0E70@HE1PR1001MB1035.EURPRD10.PROD.OUTLOOK.COM>

Dear R developers,

I have found a minute bug in R-3.5.1 (Windows version), about how times not an exact number of seconds are displayed.
> as.POSIXct("1969-01-01 01:00")+0.3
[1] "1969-01-01 01:00:01 CET"
> as.POSIXct("1970-01-01 01:00")+0.3
[1] "1970-01-01 01:00:00 CET"

So for 1969, adding 0.3 of a second means you round UP, for 1970 you round DOWN. But I think it should be consistent.

At the end of this message I have put the usual version information.

Thanks for all your help and for your work on this wonderful product.


> R.version
               _
platform       x86_64-w64-mingw32
arch           x86_64
os             mingw32
system         x86_64, mingw32
status
major          3
minor          5.1
year           2018
month          07
day            02
svn rev        74947
language       R
version.string R version 3.5.1 (2018-07-02)
nickname       Feather Spray


From becker@g@be @ending from gene@com  Tue Oct  9 17:00:08 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Tue, 9 Oct 2018 08:00:08 -0700
Subject: [Rd] R_ext/Altrep.h should be more C++-friendly
In-Reply-To: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>
References: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>
Message-ID: <CAMFmJsmyMoJD=AAhRfF7mFA4=FzMA=M-k=9kAcBg+Uy41c1CwA@mail.gmail.com>

Michael,

Thanks for reaching out. This was brought up by Romaine Francois offline to
me as well. What he does as a workaround is


#define class klass
extern "C" {
  #include <R_ext/Altrep.h>
}
#undef class

While we consider changing Altrep.h, the above should work for you  in the
immediate term.

Let me know if it doesn't.

~G





On Mon, Oct 8, 2018 at 4:17 PM, Michael Sannella via R-devel <
r-devel at r-project.org> wrote:

> I am not able to #include "R_ext/Altrep.h" from a C++ file.  I think
> it needs two changes:
>
> 1. add the same __cplusplus check as most of the other header files:
>     #ifdef  __cplusplus
>     extern "C" {
>     #endif
>         ...
>     #ifdef  __cplusplus
>     }
>     #endif
>
> 2. change the line
>     R_new_altrep(R_altrep_class_t class, SEXP data1, SEXP data2);
>  to
>     R_new_altrep(R_altrep_class_t cls, SEXP data1, SEXP data2);
>  since C++ doesn't like an argument named 'class'
>
>   ~~ Michael Sannella
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From rom@in @ending from r@tudio@com  Tue Oct  9 17:25:55 2018
From: rom@in @ending from r@tudio@com (Romain Francois)
Date: Tue, 9 Oct 2018 17:25:55 +0200
Subject: [Rd] R_ext/Altrep.h should be more C++-friendly
In-Reply-To: <CAMFmJsmyMoJD=AAhRfF7mFA4=FzMA=M-k=9kAcBg+Uy41c1CwA@mail.gmail.com>
References: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>
 <CAMFmJsmyMoJD=AAhRfF7mFA4=FzMA=M-k=9kAcBg+Uy41c1CwA@mail.gmail.com>
Message-ID: <EC76E9FE-0FE0-4CC9-9563-FA3F0A4CD717@rstudio.com>

I successfully use this workaround in this package: https://github.com/romainfrancois/altrepisode

(which is just my way to get familiar with altrep, nothing serious)

> Le 9 oct. 2018 ? 17:00, Gabe Becker <becker.gabe at gene.com> a ?crit :
> 
> Michael,
> 
> Thanks for reaching out. This was brought up by Romaine Francois offline to me as well. What he does as a workaround is 
> 
> 
> #define class klass
> extern "C" {
>   #include <R_ext/Altrep.h>
> }
> #undef class
> 
> While we consider changing Altrep.h, the above should work for you  in the immediate term.
> 
> Let me know if it doesn't.
> 
> ~G
> 
> 
> 
> 
> 
>> On Mon, Oct 8, 2018 at 4:17 PM, Michael Sannella via R-devel <r-devel at r-project.org> wrote:
>> I am not able to #include "R_ext/Altrep.h" from a C++ file.  I think
>> it needs two changes:
>> 
>> 1. add the same __cplusplus check as most of the other header files:
>>     #ifdef  __cplusplus
>>     extern "C" {
>>     #endif
>>         ...
>>     #ifdef  __cplusplus
>>     }
>>     #endif
>> 
>> 2. change the line
>>     R_new_altrep(R_altrep_class_t class, SEXP data1, SEXP data2);
>>  to
>>     R_new_altrep(R_altrep_class_t cls, SEXP data1, SEXP data2);
>>  since C++ doesn't like an argument named 'class'
>> 
>>   ~~ Michael Sannella
>> 
>>         [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 
> 
> -- 
> Gabriel Becker, Ph.D
> Scientist
> Bioinformatics and Computational Biology
> Genentech Research

	[[alternative HTML version deleted]]


From emil@bode @ending from d@n@@kn@w@nl  Tue Oct  9 18:12:41 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Tue, 9 Oct 2018 16:12:41 +0000
Subject: [Rd] Buglet in handling times in R-3.5.1
Message-ID: <FD1E50DE-0647-4D27-8337-F9808C8EC3E3@dans.knaw.nl>

Here on my Mac it looks worse: not a rounding difference, but an off-by-one error for fractional seconds before 1970, looks like the conversion to POSIXlt is doing something wrong:

Options(digits=12)
as.numeric(as.POSIXlt(as.POSIXct('1969-01-01')))
[1] -31539600
# As expected
as.numeric(as.POSIXlt(as.POSIXct('1969-01-01')+.1))
[1] -31539598.9
# An additional second disappears (and no, there was no (negative) leap second)

I'm not enough at home in C to get to the core of it, the problem is in the .Internal call
Hoping somebody can investigate further.
Specs: R 3.5.1; macOS 10.13.6

Best regards, 
Emil Bode
 

?On 09/10/2018, 17:27, "R-devel on behalf of Russell, George" <r-devel-bounces at r-project.org on behalf of g.russell at eos-solutions.com> wrote:

    Dear R developers,
    
    I have found a minute bug in R-3.5.1 (Windows version), about how times not an exact number of seconds are displayed.
    > as.POSIXct("1969-01-01 01:00")+0.3
    [1] "1969-01-01 01:00:01 CET"
    > as.POSIXct("1970-01-01 01:00")+0.3
    [1] "1970-01-01 01:00:00 CET"
    
    So for 1969, adding 0.3 of a second means you round UP, for 1970 you round DOWN. But I think it should be consistent.
    
    At the end of this message I have put the usual version information.
    
    Thanks for all your help and for your work on this wonderful product.
    
    
    > R.version
                   _
    platform       x86_64-w64-mingw32
    arch           x86_64
    os             mingw32
    system         x86_64, mingw32
    status
    major          3
    minor          5.1
    year           2018
    month          07
    day            02
    svn rev        74947
    language       R
    version.string R version 3.5.1 (2018-07-02)
    nickname       Feather Spray
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    


From m@rco@@tzeri @ending from gm@il@com  Tue Oct  9 18:59:37 2018
From: m@rco@@tzeri @ending from gm@il@com (Marco Atzeri)
Date: Tue, 9 Oct 2018 18:59:37 +0200
Subject: [Rd] Buglet in handling times in R-3.5.1
In-Reply-To: <HE1PR1001MB10356685E98F585AEB6F6ED5A0E70@HE1PR1001MB1035.EURPRD10.PROD.OUTLOOK.COM>
References: <HE1PR1001MB10356685E98F585AEB6F6ED5A0E70@HE1PR1001MB1035.EURPRD10.PROD.OUTLOOK.COM>
Message-ID: <3ccc13a5-6688-6dc3-772d-b78b7a01f7c4@gmail.com>

Am 09.10.2018 um 16:56 schrieb Russell, George:
> Dear R developers,
> 
> I have found a minute bug in R-3.5.1 (Windows version), about how times not an exact number of seconds are displayed.
>> as.POSIXct("1969-01-01 01:00")+0.3
> [1] "1969-01-01 01:00:01 CET"
>> as.POSIXct("1970-01-01 01:00")+0.3
> [1] "1970-01-01 01:00:00 CET"
> 
> So for 1969, adding 0.3 of a second means you round UP, for 1970 you round DOWN. But I think it should be consistent.

More likely a bug in the underlining C library
The Cygwin build does not show the problem

 > as.numeric(as.POSIXct("1969-01-01 01:00")+0.3)
[1] -31535999.7
 > as.POSIXct("1969-01-01 01:00")+0.3
[1] "1969-01-01 01:00:00 CET"
 > as.numeric(as.POSIXct("1969-01-01 01:00"))
[1] -31536000
 > as.POSIXct("1969-01-01 01:00")
[1] "1969-01-01 01:00:00 CET"

 > R.version
                _
platform       x86_64-unknown-cygwin
arch           x86_64
os             cygwin
system         x86_64, cygwin
status
major          3
minor          5.1
year           2018
month          07
day            02
svn rev        74947
language       R
version.string R version 3.5.1 (2018-07-02)
nickname       Feather Spray


---
Diese E-Mail wurde von Avast Antivirus-Software auf Viren gepr?ft.
https://www.avast.com/antivirus


From luke-tierney @ending from uiow@@edu  Wed Oct 10 00:04:58 2018
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Tue, 9 Oct 2018 22:04:58 +0000
Subject: [Rd] bug with OutDec option and deferred_string altrep object
In-Reply-To: <alpine.DEB.2.21.1810082132220.3154@luke-Latitude-7480>
References: <CAHPe-e_tYmV1pc__C_hsh6D1uBPgMe1bZ1WVSCbmWfYyCaD3bg@mail.gmail.com>
 <alpine.DEB.2.21.1810082132220.3154@luke-Latitude-7480>
Message-ID: <alpine.DEB.2.21.1810091703220.3154@luke-Latitude-7480>

This is now fixed in R-devel. Will port to R_patched in due course.
R_inspect also now handles pairlists ending with dotted pairs.

Best,

luke

On Tue, 9 Oct 2018, Tierney, Luke wrote:

> Thanks for the report. The approach you outlines below should work --
> I'll look into it.
>
> Best,
>
> luke
>
> On Mon, 8 Oct 2018, Michael Sannella wrote:
>
>> While implementing R's new 'altrep' functionality in the TERR engine,
>> I discovered a bug in R's 'deferred_string' altrep object: it is not
>> using the correct value of the 'OutDec' option when it expands a
>> deferred_string.? See the following example:
>>
>> R 3.5.1: (same results in R 3.6.0 devel engine built 10/5)
>> ? ? > options(scipen=0, OutDec=".")
>> ? ? > as.character(123.456)
>> ? ? [1] "123.456"
>> ? ? > options(scipen=-5, OutDec=",")
>> ? ? > as.character(123.456)
>> ? ? [1] "1,23456e+02"
>> ? ? > xx <- as.character(123.456)
>> ? ? > options(scipen=0, OutDec=".")
>> ? ? > xx
>> ? ? [1] "1.23456e+02"
>> ? ? >
>>
>> In the example above, the variable 'xx' is set to a deferred_string
>> while OutDec is ','.? However, when the string is actually formatted
>> (when xx is printed), it uses the current option value OutDec='.' to
>> format the string.? I think that deferred_string should use the value
>> OutDec=',' from when as.character was called.
>>
>> Note that the behavior is different with the 'scipen' option: The
>> deferred_string object records the scipen=-5 value when as.character
>> is called, and uses this value when xx is printed.? Looking at the
>> deferred_string object, it appears that CDR(R_altrep_data1(<obj>)) is
>> set to a scalar integer containing the scipen value at the time the
>> deferred_string was created.
>>
>> Ideally, the deferred_string object would save both the scipen and
>> OutDec option values.? I'd suggest saving these values as regular
>> pairlist values, say by setting the data1 field to pairlist(<source>,
>> scipen=-5L, OutDec=',') for the value of xx above.? To save space, you
>> could avoid saving these values in the common case where scipen=0L,
>> OutDec='.'.? It would also be better if the data1 field was a
>> well-formed pairlist; the current value of the data1 field causes
>> R_inspect to segfault.
>>
>> I understand that you probably wouldn't want to change the
>> deferred_string structure.? An alternative fix would be to avoid this
>> case by:
>> ? 1. Never create a deferred_string if OutDec is not '.'.
>> ? 2. When expanding an element of a deferred_string, temporarily set
>> OutDec to '.'.
>>
>> ? ~~ Michael Sannella
>>
>>
>>
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From bbolker @ending from gm@il@com  Wed Oct 10 05:22:21 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Tue, 9 Oct 2018 23:22:21 -0400
Subject: [Rd] NEWS typos, download.file.Rd tweaks
Message-ID: <7c8e26d5-415a-2e14-b332-721898a99581@gmail.com>


  Some small changes (typo, punctuation fix) to the NEWS file, and some
suggested changes to download.file.Rd (I found some of the phrasing
awkward/hard to parse, and got carried away).  (I *think* .txt
attachments are OK on the list?)

  FWIW I started fixing the download.file man page because I went there
to understand/be horrified by the following (documented!) infelicity:
with the default settings (on Unix at least), failing to download what
is intended to be a new version of a file will wipe out the original,
leaving an empty file.  So, for example, a temporary network problem can
lead to a pipeline being unworkable (because a critical file has been
emptied) until the network comes back ...  I don't suppose there's any
chance this behaviour could be changed ... ??

> What happens to the destination file(s) in the case of error
     depends on the method and R version. Currently the ?"internal"?,
     ?"wininet"? and ?"libcurl"? methods will remove the file if there
     the URL is unavailable except when ?mode? specifies appending when
     the file should be unchanged.

Obligatory xkcd: https://xkcd.com/293/

 cheers
   Ben Bolker

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: rdiffs.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181009/d4f186fd/attachment.txt>

From luke-tierney @ending from uiow@@edu  Tue Oct  9 05:09:01 2018
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Tue, 9 Oct 2018 03:09:01 +0000
Subject: [Rd] R_ext/Altrep.h should be more C++-friendly
In-Reply-To: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>
References: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1810082208350.3154-896@luke-Latitude-7480>

Thanks for the suggestion. Committed in R_devel.

Best,

luke

On Mon, 8 Oct 2018, Michael Sannella wrote:

> I am not able to #include "R_ext/Altrep.h" from a C++ file.? I think
> it needs two changes:
> 
> 1. add the same __cplusplus check as most of the other header files:
> ? ? #ifdef? __cplusplus
> ? ? extern "C" {
> ? ? #endif
> ? ? ? ? ...
> ? ? #ifdef? __cplusplus
> ? ? }
> ? ? #endif
> 
> 2. change the line
> ? ? R_new_altrep(R_altrep_class_t class, SEXP data1, SEXP data2);
> ?to
> ? ? R_new_altrep(R_altrep_class_t cls, SEXP data1, SEXP data2);
> ?since C++ doesn't like an argument named 'class'
> 
> ? ~~ Michael Sannella
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From rom@in @ending from r@tudio@com  Wed Oct 10 10:57:49 2018
From: rom@in @ending from r@tudio@com (Romain Francois)
Date: Wed, 10 Oct 2018 10:57:49 +0200
Subject: [Rd] R_ext/Altrep.h should be more C++-friendly
In-Reply-To: <alpine.DEB.2.21.1810082208350.3154-896@luke-Latitude-7480>
References: <CAHPe-e8S9Gp1jnx5=Uu2jjJc1kn6XOjB=1ie4iuMzL3bXTcnJQ@mail.gmail.com>
 <alpine.DEB.2.21.1810082208350.3154-896@luke-Latitude-7480>
Message-ID: <2248EC5C-9825-4CA8-A179-37F2AEFF93BD@rstudio.com>

Thank you, 

I updated my example package so that it works with both. https://github.com/romainfrancois/altrepisode/blob/96af0548a9ecc08701d119ea427e16940a82882b/src/altrepisode.h <https://github.com/romainfrancois/altrepisode/blob/96af0548a9ecc08701d119ea427e16940a82882b/src/altrepisode.h>

We have to do something like this unless we depend on R 3.6.0: 

#if R_VERSION < R_Version(3, 6, 0)
  #define class klass
  extern "C" {
    #include <R_ext/Altrep.h>
  }
  #undef class
#else
  #include <R_ext/Altrep.h>
#endif

Romain

> Le 9 oct. 2018 ? 05:09, Tierney, Luke <luke-tierney at uiowa.edu> a ?crit :
> 
> Thanks for the suggestion. Committed in R_devel.
> 
> Best,
> 
> luke
> 
> On Mon, 8 Oct 2018, Michael Sannella wrote:
> 
>> I am not able to #include "R_ext/Altrep.h" from a C++ file.  I think
>> it needs two changes:
>> 
>> 1. add the same __cplusplus check as most of the other header files:
>>     #ifdef  __cplusplus
>>     extern "C" {
>>     #endif
>>         ...
>>     #ifdef  __cplusplus
>>     }
>>     #endif
>> 
>> 2. change the line
>>     R_new_altrep(R_altrep_class_t class, SEXP data1, SEXP data2);
>>  to
>>     R_new_altrep(R_altrep_class_t cls, SEXP data1, SEXP data2);
>>  since C++ doesn't like an argument named 'class'
>> 
>>   ~~ Michael Sannella
>> 
>> 
>> 
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From wdunl@p @ending from tibco@com  Wed Oct 10 19:23:53 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Wed, 10 Oct 2018 10:23:53 -0700
Subject: [Rd] unlockEnvironment()?
Message-ID: <CAF8bMcaJgD5SqR4ee-T4=ZVfxwC+4eraa4hHVYP0BdkRBLzVyQ@mail.gmail.com>

R lets one lock an environment with both an R function,
base::lockEnvironment, and a C function, R_LockEnvironment, but, as far as
I can tell, no corresponding function to unlock an environment.  Is this
omission on principle or just something that has not been done yet?

I ask because several packages, including the well-used R6 and rlang
packages, fiddle with some bits in with SET_ENVFLAGS and ENVFLAGS to unlock
an environment.  (See grep output below.)

About 5000 (1/3 of CRAN) packages depend on R6 or rlang.  Should R supply a
more disciplined way of unlocking an environment?

Bill Dunlap
TIBCO Software
wdunlap tibco.com

$ { find . -type f -print0 | xargs -0 grep -n -C 2 ENVFLAGS ; } 2>/dev/null
./R6/tests/manual/encapsulation.R-5-unlockEnvironment <-
cfunction(signature(env = "environment"), body = '
./R6/tests/manual/encapsulation.R-6-  #define FRAME_LOCK_MASK (1<<14)
./R6/tests/manual/encapsulation.R:7:  #define FRAME_IS_LOCKED(e)
(ENVFLAGS(e) & FRAME_LOCK_MASK)
./R6/tests/manual/encapsulation.R:8:  #define UNLOCK_FRAME(e)
SET_ENVFLAGS(e, ENVFLAGS(e) & (~ FRAME_LOCK_MASK))
./R6/tests/manual/encapsulation.R-9-
./R6/tests/manual/encapsulation.R-10-  if (TYPEOF(env) == NILSXP)
./BMA/R/iBMA.glm.R-21-*/
./BMA/R/iBMA.glm.R-22-#define FRAME_LOCK_MASK (1<<14)
./BMA/R/iBMA.glm.R:23:#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) &
FRAME_LOCK_MASK)
./BMA/R/iBMA.glm.R:24:#define UNLOCK_FRAME(e) SET_ENVFLAGS(e, ENVFLAGS(e) &
(~ FRAME_LOCK_MASK))
./BMA/R/iBMA.glm.R-25-'
./BMA/R/iBMA.glm.R-26-
--
./BMA/R/iBMA.surv.R-22-*/
./BMA/R/iBMA.surv.R-23-#define FRAME_LOCK_MASK (1<<14)
./BMA/R/iBMA.surv.R:24:#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) &
FRAME_LOCK_MASK)
./BMA/R/iBMA.surv.R:25:#define UNLOCK_FRAME(e) SET_ENVFLAGS(e, ENVFLAGS(e)
& (~ FRAME_LOCK_MASK))
./BMA/R/iBMA.surv.R-26-'
./BMA/R/iBMA.surv.R-27-
./pkgload/src/unlock.c-20-*/
./pkgload/src/unlock.c-21-#define FRAME_LOCK_MASK (1 << 14)
./pkgload/src/unlock.c:22:#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) &
FRAME_LOCK_MASK)
./pkgload/src/unlock.c:23:#define UNLOCK_FRAME(e) SET_ENVFLAGS(e,
ENVFLAGS(e) & (~FRAME_LOCK_MASK))
./pkgload/src/unlock.c-24-
./pkgload/src/unlock.c-25-extern SEXP R_TrueValue;
./SOD/src/tmp.cpp-11394-SEXP (ENCLOS)(SEXP x);
./SOD/src/tmp.cpp-11395-SEXP (HASHTAB)(SEXP x);
./SOD/src/tmp.cpp:11396:int (ENVFLAGS)(SEXP x);
./SOD/src/tmp.cpp:11397:void (SET_ENVFLAGS)(SEXP x, int v);
./SOD/src/tmp.cpp-11398-void SET_FRAME(SEXP x, SEXP v);
./SOD/src/tmp.cpp-11399-void SET_ENCLOS(SEXP x, SEXP v);
--
./SOD/src/tmp.h-11393-SEXP (ENCLOS)(SEXP x);
./SOD/src/tmp.h-11394-SEXP (HASHTAB)(SEXP x);
./SOD/src/tmp.h:11395:int (ENVFLAGS)(SEXP x);
./SOD/src/tmp.h:11396:void (SET_ENVFLAGS)(SEXP x, int v);
./SOD/src/tmp.h-11397-void SET_FRAME(SEXP x, SEXP v);
./SOD/src/tmp.h-11398-void SET_ENCLOS(SEXP x, SEXP v);

	[[alternative HTML version deleted]]


From luke-tierney @ending from uiow@@edu  Wed Oct 10 19:31:05 2018
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Wed, 10 Oct 2018 17:31:05 +0000
Subject: [Rd] unlockEnvironment()?
In-Reply-To: <CAF8bMcaJgD5SqR4ee-T4=ZVfxwC+4eraa4hHVYP0BdkRBLzVyQ@mail.gmail.com>
References: <CAF8bMcaJgD5SqR4ee-T4=ZVfxwC+4eraa4hHVYP0BdkRBLzVyQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1810101230420.3154@luke-Latitude-7480>

On Wed, 10 Oct 2018, William Dunlap via R-devel wrote:

> R lets one lock an environment with both an R function,
> base::lockEnvironment, and a C function, R_LockEnvironment, but, as far as
> I can tell, no corresponding function to unlock an environment.  Is this
> omission on principle or just something that has not been done yet?

Absolutely on principle!

Best,

luke

>
> I ask because several packages, including the well-used R6 and rlang
> packages, fiddle with some bits in with SET_ENVFLAGS and ENVFLAGS to unlock
> an environment.  (See grep output below.)
>
> About 5000 (1/3 of CRAN) packages depend on R6 or rlang.  Should R supply a
> more disciplined way of unlocking an environment?
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> $ { find . -type f -print0 | xargs -0 grep -n -C 2 ENVFLAGS ; } 2>/dev/null
> ./R6/tests/manual/encapsulation.R-5-unlockEnvironment <-
> cfunction(signature(env = "environment"), body = '
> ./R6/tests/manual/encapsulation.R-6-  #define FRAME_LOCK_MASK (1<<14)
> ./R6/tests/manual/encapsulation.R:7:  #define FRAME_IS_LOCKED(e)
> (ENVFLAGS(e) & FRAME_LOCK_MASK)
> ./R6/tests/manual/encapsulation.R:8:  #define UNLOCK_FRAME(e)
> SET_ENVFLAGS(e, ENVFLAGS(e) & (~ FRAME_LOCK_MASK))
> ./R6/tests/manual/encapsulation.R-9-
> ./R6/tests/manual/encapsulation.R-10-  if (TYPEOF(env) == NILSXP)
> ./BMA/R/iBMA.glm.R-21-*/
> ./BMA/R/iBMA.glm.R-22-#define FRAME_LOCK_MASK (1<<14)
> ./BMA/R/iBMA.glm.R:23:#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) &
> FRAME_LOCK_MASK)
> ./BMA/R/iBMA.glm.R:24:#define UNLOCK_FRAME(e) SET_ENVFLAGS(e, ENVFLAGS(e) &
> (~ FRAME_LOCK_MASK))
> ./BMA/R/iBMA.glm.R-25-'
> ./BMA/R/iBMA.glm.R-26-
> --
> ./BMA/R/iBMA.surv.R-22-*/
> ./BMA/R/iBMA.surv.R-23-#define FRAME_LOCK_MASK (1<<14)
> ./BMA/R/iBMA.surv.R:24:#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) &
> FRAME_LOCK_MASK)
> ./BMA/R/iBMA.surv.R:25:#define UNLOCK_FRAME(e) SET_ENVFLAGS(e, ENVFLAGS(e)
> & (~ FRAME_LOCK_MASK))
> ./BMA/R/iBMA.surv.R-26-'
> ./BMA/R/iBMA.surv.R-27-
> ./pkgload/src/unlock.c-20-*/
> ./pkgload/src/unlock.c-21-#define FRAME_LOCK_MASK (1 << 14)
> ./pkgload/src/unlock.c:22:#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) &
> FRAME_LOCK_MASK)
> ./pkgload/src/unlock.c:23:#define UNLOCK_FRAME(e) SET_ENVFLAGS(e,
> ENVFLAGS(e) & (~FRAME_LOCK_MASK))
> ./pkgload/src/unlock.c-24-
> ./pkgload/src/unlock.c-25-extern SEXP R_TrueValue;
> ./SOD/src/tmp.cpp-11394-SEXP (ENCLOS)(SEXP x);
> ./SOD/src/tmp.cpp-11395-SEXP (HASHTAB)(SEXP x);
> ./SOD/src/tmp.cpp:11396:int (ENVFLAGS)(SEXP x);
> ./SOD/src/tmp.cpp:11397:void (SET_ENVFLAGS)(SEXP x, int v);
> ./SOD/src/tmp.cpp-11398-void SET_FRAME(SEXP x, SEXP v);
> ./SOD/src/tmp.cpp-11399-void SET_ENCLOS(SEXP x, SEXP v);
> --
> ./SOD/src/tmp.h-11393-SEXP (ENCLOS)(SEXP x);
> ./SOD/src/tmp.h-11394-SEXP (HASHTAB)(SEXP x);
> ./SOD/src/tmp.h:11395:int (ENVFLAGS)(SEXP x);
> ./SOD/src/tmp.h:11396:void (SET_ENVFLAGS)(SEXP x, int v);
> ./SOD/src/tmp.h-11397-void SET_FRAME(SEXP x, SEXP v);
> ./SOD/src/tmp.h-11398-void SET_ENCLOS(SEXP x, SEXP v);
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @purdle@@ @ending from gm@il@com  Mon Oct 15 02:19:38 2018
From: @purdle@@ @ending from gm@il@com (Abs Spurdle)
Date: Mon, 15 Oct 2018 13:19:38 +1300
Subject: [Rd] sys.call() inside replacement functions incorrectly returns
 *tmp*
Message-ID: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>

Kia Ora

Let's say we have:
"myreplacementfunction<-" = function (..., value)
{	call = sys.call ()
	print (as.list (call) )
	0
}

Then we call:
x = 0
myreplacementfunction (x, y, z) = 0

It will return:
[[1]]
`myreplacementfunction<-`

[[2]]
`*tmp*`

[[3]]
y

[[4]]
z

$value
<promise: 0x06fb6968>

There's two problems here.
Firstly, x has to be defined otherwise we get an error message.
Secondly, the first argument is returned as *tmp*.

Both are incorrect.

It should be possible to call the function without defining x.
And it should return x rather than *tmp*.
In other words, replacement function calls should be the same as other
function calls.

Although it gets y and z right.


kind regards
Abs


From emil@bode @ending from d@n@@kn@w@nl  Mon Oct 15 11:57:13 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Mon, 15 Oct 2018 09:57:13 +0000
Subject: [Rd] 
 sys.call() inside replacement functions incorrectly returns *tmp*
In-Reply-To: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
References: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
Message-ID: <F139A45B-0BDF-41FC-A809-9A00AC2E79A0@dans.knaw.nl>

Hi,

Agreed that it would be better if sys.call() were to return "x" instead of "*tmp*", as it behaves as a local variable. Although I'm not sure what problem it would solve, the effect here is comparable to what happens when calling a function indirectly (although then you could use sys.call(2), which here doesn't work).
 
But your other suggestion, accepting non-existent x without error, would cause a lot of other problems I think. The way I see it, replacement functions are meant to edit a certain aspect of an object/variable. Which only makes sense if it exists in the first place. With your replacement function there may be a use for setting new values but what should e.g. "levels(x) <- letters" do? Make a new empty factor? Discard any results? Make an as-empty-as-possible variable (probably an empty list) with a levels attribute? I think the current behaviour is fine.
In general, I can't see any scenario where you want to "edit" a variable, but make the end-result independent of the original value (Then you'd simply assign, without a custom function). So any replacement function is going to read the original value of x, so is there any downside to requiring it?

Also, I have to say that your example looks confusing to me. Do you want to assign 0 to x, and ignore all other arguments? Or was it your intention to set all variables to 0? And having an ellipsis argument only makes sense in my experience if these arguments are optional. Which would mean myreplacementfunction() = 0 should be a valid call, but I can't see what that would be expected to do. So I would at least make the call `myreplacementfunction(x, ..., value).
The reason y and z are "right" is because these are simple extra input parameters, which can have any value, including missing, they needn't be evaluated.

Best regards, 
Emil Bode
 
Data-analyst
 
+31 6 43 83 89 33
emil.bode at dans.knaw.nl
 
DANS: Netherlands Institute for Permanent Access to Digital Research Resources
Anna van Saksenlaan 51 | 2593 HW Den Haag | +31 70 349 44 50 | info at dans.knaw.nl <mailto:info at dans.kn> | dans.knaw.nl <applewebdata://71F677F0-6872-45F3-A6C4-4972BF87185B/www.dans.knaw.nl>
DANS is an institute of the Dutch Academy KNAW <http://knaw.nl/nl> and funding organisation NWO <http://www.nwo.nl/>. 

?On 15/10/2018, 02:20, "R-devel on behalf of Abs Spurdle" <r-devel-bounces at r-project.org on behalf of spurdle.a at gmail.com> wrote:

    Kia Ora
    
    Let's say we have:
    "myreplacementfunction<-" = function (..., value)
    {	call = sys.call ()
    	print (as.list (call) )
    	0
    }
    
    Then we call:
    x = 0
    myreplacementfunction (x, y, z) = 0
    
    It will return:
    [[1]]
    `myreplacementfunction<-`
    
    [[2]]
    `*tmp*`
    
    [[3]]
    y
    
    [[4]]
    z
    
    $value
    <promise: 0x06fb6968>
    
    There's two problems here.
    Firstly, x has to be defined otherwise we get an error message.
    Secondly, the first argument is returned as *tmp*.
    
    Both are incorrect.
    
    It should be possible to call the function without defining x.
    And it should return x rather than *tmp*.
    In other words, replacement function calls should be the same as other
    function calls.
    
    Although it gets y and z right.
    
    
    kind regards
    Abs
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    


From hugh@p@r@on@ge @ending from gm@il@com  Mon Oct 15 12:04:31 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Mon, 15 Oct 2018 21:04:31 +1100
Subject: [Rd] Behaviour of exists(x) for length(x) > 1
Message-ID: <CAJmOi+NCLS9Y8T82AP-aE8ffkqras5j6Ce4EgpZbd5wwEYXyXg@mail.gmail.com>

It seems that exists accepts character vectors of lengths other than
one, but discards all but the first element without an error or
warning.  Is this intended?  The name "exists" is in the singular, so
it's not surprising that it only contemplates the length-one instance
but in the absence of an error or warning it may be an improvement to
mention what happens when length(x) > 1.

exists(as.character(substitute(doesntexist + absenttoo)))

Best,

Hugh


From murdoch@dunc@n @ending from gm@il@com  Mon Oct 15 18:01:59 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Mon, 15 Oct 2018 12:01:59 -0400
Subject: [Rd] 
 sys.call() inside replacement functions incorrectly returns *tmp*
In-Reply-To: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
References: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
Message-ID: <d39892f6-99a3-eb78-b85b-8765d484a9c7@gmail.com>

On 14/10/2018 8:19 PM, Abs Spurdle wrote:
> Kia Ora
> 
> Let's say we have:
> "myreplacementfunction<-" = function (..., value)
> {	call = sys.call ()
> 	print (as.list (call) )
> 	0
> }
> 
> Then we call:
> x = 0
> myreplacementfunction (x, y, z) = 0
> 
> It will return:
> [[1]]
> `myreplacementfunction<-`
> 
> [[2]]
> `*tmp*`
> 
> [[3]]
> y
> 
> [[4]]
> z
> 
> $value
> <promise: 0x06fb6968>
> 
> There's two problems here.
> Firstly, x has to be defined otherwise we get an error message.
> Secondly, the first argument is returned as *tmp*.
> 
> Both are incorrect.

Both of these are documented (by example) in the R Language Definition 
manual, section 3.4.4:

"Assignment to subsets of a structure is a special case of a general 
mechanism for complex assignment:

x[3:5] <- 13:15
The result of this command is as if the following had been executed

`*tmp*` <- x
x <- "[<-"(`*tmp*`, 3:5, value=13:15)
rm(`*tmp*`)"

Duncan Murdoch

> 
> It should be possible to call the function without defining x.
> And it should return x rather than *tmp*.
> In other words, replacement function calls should be the same as other
> function calls.
> 
> Although it gets y and z right.
> 
> 
> kind regards
> Abs
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @purdle@@ @ending from gm@il@com  Tue Oct 16 01:02:40 2018
From: @purdle@@ @ending from gm@il@com (Abs Spurdle)
Date: Tue, 16 Oct 2018 12:02:40 +1300
Subject: [Rd] 
 sys.call() inside replacement functions incorrectly returns *tmp*
In-Reply-To: <F139A45B-0BDF-41FC-A809-9A00AC2E79A0@dans.knaw.nl>
References: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
 <F139A45B-0BDF-41FC-A809-9A00AC2E79A0@dans.knaw.nl>
Message-ID: <CAB8pepxoVFZvBnuBFyfyOwTNWTyA_pQOjr4za-zeWmeFTiaBqw@mail.gmail.com>

Kia Ora

> Although I'm not sure what problem it would solve...

Given that you asked, I was interested in writing a multiple assignment
function as a replacement function, so something like:
massign (x, y, z) = construct.some list ()

Obviously, that's not possible.

Probably the best example I can think of is converting cartesian
coordinates to polar coordinates.
Then we might have something like (note, untested, written in my email):
cart2polar = function (x, y)
    list (theta=atan (y / x), r=sqrt (x * x + y * y) )

massign (r, theta) = cart2polar (x, y)

Now, I'm considering a multiple assignment operator, so something like:
c (theta, r) $<-$ cart2polar (x, y)

And while we're on the topic, I'm also considering an attribute operator
(to access object attributes), something like:
myobject%$%myattribute

This would be similar to . in C++/Java or @ in S4.
And seems like something obvious that's missing from R.

Implementing an attribute read this way is easy, however, implementing an
attribute assignment this way (without language level support) is difficult.


kind regards
Abs

	[[alternative HTML version deleted]]


From c@@rdi@g@bor @ending from gm@il@com  Tue Oct 16 01:23:59 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 16 Oct 2018 00:23:59 +0100
Subject: [Rd] 
 sys.call() inside replacement functions incorrectly returns *tmp*
In-Reply-To: <CAB8pepxoVFZvBnuBFyfyOwTNWTyA_pQOjr4za-zeWmeFTiaBqw@mail.gmail.com>
References: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
 <F139A45B-0BDF-41FC-A809-9A00AC2E79A0@dans.knaw.nl>
 <CAB8pepxoVFZvBnuBFyfyOwTNWTyA_pQOjr4za-zeWmeFTiaBqw@mail.gmail.com>
Message-ID: <CABtg=KnzOigd7yQi7NijqoTmyu9n-ZiqOt+vR0QHyrsbLQWKZg@mail.gmail.com>

Seems like there are at least two packages for multiple assignment,
maybe one of them solves your needs, zeallot and dub.

https://r-pkg.org/search.html?q=multiple+assignment

Gabor
On Tue, Oct 16, 2018 at 12:03 AM Abs Spurdle <spurdle.a at gmail.com> wrote:
>
> Kia Ora
>
> > Although I'm not sure what problem it would solve...
>
> Given that you asked, I was interested in writing a multiple assignment
> function as a replacement function, so something like:
> massign (x, y, z) = construct.some list ()
>
> Obviously, that's not possible.
>
> Probably the best example I can think of is converting cartesian
> coordinates to polar coordinates.
> Then we might have something like (note, untested, written in my email):
> cart2polar = function (x, y)
>     list (theta=atan (y / x), r=sqrt (x * x + y * y) )
>
> massign (r, theta) = cart2polar (x, y)
>
> Now, I'm considering a multiple assignment operator, so something like:
> c (theta, r) $<-$ cart2polar (x, y)
>
> And while we're on the topic, I'm also considering an attribute operator
> (to access object attributes), something like:
> myobject%$%myattribute
>
> This would be similar to . in C++/Java or @ in S4.
> And seems like something obvious that's missing from R.
>
> Implementing an attribute read this way is easy, however, implementing an
> attribute assignment this way (without language level support) is difficult.
>
>
> kind regards
> Abs
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbolker @ending from gm@il@com  Sun Oct 14 20:45:19 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Sun, 14 Oct 2018 14:45:19 -0400
Subject: [Rd] broken link to Titanic data
Message-ID: <dee09826-f85d-db26-1ca7-15c388786561-1962@mcmaster.ca>


This URL, which appears in the ?Titanic web page:

 https://www.amstat.org/publications/jse/v3n3/datasets.dawson.html

gives me a 404 error.  Googling "Dawson titanic data" gives

ww2.amstat.org/publications/jse/v3n3/datasets.dawson.html

which is similarly broken.

  Poking around gives this preferred reference URL to the original
article on Taylor & Francis's site:

https://doi.org/10.1080/10691898.1995.11910499

This article is free to access, but it doesn't appear that it's possible
to access the original "titanic.dat.txt" through T&F's web site.  It is
on the internet archive ...

https://web.archive.org/web/20180323070125/https://ww2.amstat.org/publications/jse/datasets/titanic.dat.txt

The codebook is at

https://web.archive.org/web/20180405163149/http://ww2.amstat.org:80/publications/jse/datasets/titanic.txt

  I can submit this as a bug report if that's recommended ...

  Ben Bolker


From b@rowling@on @ending from l@nc@@ter@@c@uk  Tue Oct 16 10:57:34 2018
From: b@rowling@on @ending from l@nc@@ter@@c@uk (Barry Rowlingson)
Date: Tue, 16 Oct 2018 09:57:34 +0100
Subject: [Rd] 
 sys.call() inside replacement functions incorrectly returns *tmp*
In-Reply-To: <e81bacdbba2846f39708e0c8c488f010@LNXP265MB1290.GBRP265.PROD.OUTLOOK.COM>
References: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
 <F139A45B-0BDF-41FC-A809-9A00AC2E79A0@dans.knaw.nl>
 <e81bacdbba2846f39708e0c8c488f010@LNXP265MB1290.GBRP265.PROD.OUTLOOK.COM>
Message-ID: <CANVKczOivkNjgqPKctABhqvn3x=t+_NvpjJGzb5Yx23JxM25iA@mail.gmail.com>

On Tue, Oct 16, 2018 at 12:03 AM Abs Spurdle <spurdle.a at gmail.com> wrote:

> Probably the best example I can think of is converting cartesian
> coordinates to polar coordinates.
> Then we might have something like (note, untested, written in my email):
> cart2polar = function (x, y)
>     list (theta=atan (y / x), r=sqrt (x * x + y * y) )
>
> massign (r, theta) = cart2polar (x, y)
>
> Now, I'm considering a multiple assignment operator, so something like:
> c (theta, r) $<-$ cart2polar (x, y)

This is something that comes up occasionally and as noted by Gabor,
has been implemented in packages.

But I am not keen on unpacking the return from a function into
multiple objects. The reason your `cart2polar` function returns a list
of theta and r is because it is returning a polar coordinate, and that
coordinate needs both. Why unpack them? If you don't need theta, then
do `r = cart2polar(x,y)$r`. If you need theta and r, then keep them
together in a single object. If you need to call a function  that
needs separate theta and r, use `plot(d$r, d$theta)`. Its a bit more
typing but that's a false efficiency when you want code to be tidy and
well-structured, and to convey meaning. `plot(this$r, this$theta)` is
clearly a plot of something to do with `this`, and you can see that
the r and the theta are coming from the same thing, whereas a
`(r,theta) %=% foo(x,y)` some place and then `plot(r, theta)`
somewhere else has broken the connection.

Barry


From emil@bode @ending from d@n@@kn@w@nl  Tue Oct 16 11:53:34 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Tue, 16 Oct 2018 09:53:34 +0000
Subject: [Rd] 
 sys.call() inside replacement functions incorrectly returns *tmp*
In-Reply-To: <CAB8pepxoVFZvBnuBFyfyOwTNWTyA_pQOjr4za-zeWmeFTiaBqw@mail.gmail.com>
References: <CAB8pepwA52R9ZKOe7_83BMWzwsQcZ8eKG+wg3ihBL5+Qs5YPOQ@mail.gmail.com>
 <F139A45B-0BDF-41FC-A809-9A00AC2E79A0@dans.knaw.nl>
 <CAB8pepxoVFZvBnuBFyfyOwTNWTyA_pQOjr4za-zeWmeFTiaBqw@mail.gmail.com>
Message-ID: <9BCF3F11-0BD1-435C-A5BF-3CF6711D13B4@dans.knaw.nl>

Well,

I think what you want to do is hard if you insist on using a replacement function, i.e. massign(vars) <- values.
But as you wrote, you can use a modified assignment operator, or you could write something comparable to assign, so massign(listofvars, listofvalues, environment) shouldn?t be too hard.
I believe in this context, the term ?replacement function? is a bit confusing. In my experience, replacement functions are for editing a certain aspect of a variable or object, mostly attributes, or they can replace certain elements. But in order to edit something, it has to exist in the first place.
It may be that I?m reading it wrong, but to me ?massign (x, y, z) = somelist? reads ?I want to edit some aspects of x, y and z, by inputting somelist to them?. In that guise, I can see some function like mlevels(factor1, factor2, factor3) <- as.character(1:10), to set the level attributes to all three factors to the same set of levels.
That?s not something easily supported with replacement functions, but it is possible.
But for creating new objects, or reassigning them, a replacement function seems not the way to go to me.
And as Barry noted, why do you want to pull these values apart in the first place? I guess your example of polar coordinates was just an example, but if you want to store multiple values that?s a lot easier in a list, and it keeps your workspace tidier.
For your other point, editing attributes is possible with `attr<-`.
If you want to have it as an infix operator without having to use quotes:
`%$%<-` <- function(obj, attr, value) {
  `attr<-`(obj, as.character(substitute(attr)), value)
}
Now ?myobj %$% myattr <- values ? will do as you desire

Best regards,
Emil Bode

From: Abs Spurdle <spurdle.a at gmail.com>
Date: Tuesday, 16 October 2018 at 01:02
To: Emil Bode <emil.bode at dans.knaw.nl>
Cc: r-devel <r-devel at r-project.org>
Subject: Re: [Rd] sys.call() inside replacement functions incorrectly returns *tmp*

Kia Ora

> Although I'm not sure what problem it would solve...

Given that you asked, I was interested in writing a multiple assignment function as a replacement function, so something like:
massign (x, y, z) = construct.some list ()

Obviously, that's not possible.

Probably the best example I can think of is converting cartesian coordinates to polar coordinates.
Then we might have something like (note, untested, written in my email):
cart2polar = function (x, y)
    list (theta=atan (y / x), r=sqrt (x * x + y * y) )

massign (r, theta) = cart2polar (x, y)

Now, I'm considering a multiple assignment operator, so something like:
c (theta, r) $<-$ cart2polar (x, y)

And while we're on the topic, I'm also considering an attribute operator (to access object attributes), something like:
myobject%$%myattribute

This would be similar to . in C++/Java or @ in S4.
And seems like something obvious that's missing from R.

Implementing an attribute read this way is easy, however, implementing an attribute assignment this way (without language level support) is difficult.


kind regards
Abs


	[[alternative HTML version deleted]]


From therne@u @ending from m@yo@edu  Wed Oct 17 00:42:00 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 16 Oct 2018 17:42:00 -0500
Subject: [Rd] invisible functions
Message-ID: <bb6fa2$aad9au@ironport10.mayo.edu>

The survival package, like many others, has several helper functions that are not declared 
in the namespace, since their only use is to be called by other "main" functions of the 
package.? This works well since the functions in the survival namespace can see them --- 
without ::: arguments --- and others don't.

Until a situation I ran into this week, for which I solicit comments or advice.?? The 
concordance function is a new addition, and it has one case where the same underlying 
helper function is called multiple times, with many arguments passed through from the 
parent.? I thought that this would be a good use for the trick we use for model.frame, so 
I have code like this:

concordance.coxph <- function(fit, ..., newdata, group, ymin, ymax,
 ?????????????????????????????? timewt=c("n", "S", "S/G", "n/G", "n/G2"),
 ?????????????????????????????? influence=0, ranks=FALSE, timefix=TRUE) {
 ??? Call <- match.call()
 ??? .
 ??? .
 ??? .
 ??? cargs <- c("ymin", "ymax","influence", "ranks", "timewt", "timefix")
 ??? cfun <- Call[c(1, match(cargs, names(Call), nomatch=0))]
 ??? cfun[[1]] <- quote(cord.work)
 ??? cfun$reverse <- TRUE
 ??? rval <- eval(cfun, parent.frame())

This worked fine in my not-in-a-namespace test bed, but then fails when packaged up for 
real: the code can't find the helper function cord.work!? The rule that survival package 
functions can "see" their undeclared helpers fails.

I got it working by changing parent.frame() to environment(concordance) in the eval() 
call.?? Since everything used by cord.work is explicitly passed in its argument list this 
does work.

Comments or suggestions??? (I avoid having survival:: in the survival package because it 
messes up my particular test bed.)

Terry


	[[alternative HTML version deleted]]


From murdoch@dunc@n @ending from gm@il@com  Wed Oct 17 00:56:34 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Tue, 16 Oct 2018 18:56:34 -0400
Subject: [Rd] invisible functions
In-Reply-To: <bb6fa2$aad9au@ironport10.mayo.edu>
References: <bb6fa2$aad9au@ironport10.mayo.edu>
Message-ID: <a3300441-f4db-1fe4-1634-89f7cf26a601@gmail.com>

On 16/10/2018 6:42 PM, Therneau, Terry M., Ph.D. via R-devel wrote:
> The survival package, like many others, has several helper functions that are not declared
> in the namespace, since their only use is to be called by other "main" functions of the
> package.? This works well since the functions in the survival namespace can see them ---
> without ::: arguments --- and others don't.
> 
> Until a situation I ran into this week, for which I solicit comments or advice.?? The
> concordance function is a new addition, and it has one case where the same underlying
> helper function is called multiple times, with many arguments passed through from the
> parent.? I thought that this would be a good use for the trick we use for model.frame, so
> I have code like this:
> 
> concordance.coxph <- function(fit, ..., newdata, group, ymin, ymax,
>   ?????????????????????????????? timewt=c("n", "S", "S/G", "n/G", "n/G2"),
>   ?????????????????????????????? influence=0, ranks=FALSE, timefix=TRUE) {
>   ??? Call <- match.call()
>   ??? .
>   ??? .
>   ??? .
>   ??? cargs <- c("ymin", "ymax","influence", "ranks", "timewt", "timefix")
>   ??? cfun <- Call[c(1, match(cargs, names(Call), nomatch=0))]
>   ??? cfun[[1]] <- quote(cord.work)
>   ??? cfun$reverse <- TRUE
>   ??? rval <- eval(cfun, parent.frame())
> 
> This worked fine in my not-in-a-namespace test bed, but then fails when packaged up for
> real: the code can't find the helper function cord.work!? The rule that survival package
> functions can "see" their undeclared helpers fails.

The reason that fails is as follows:

cfun, despite its name, is not a function.  It's an unevaluated expression.

You are evaluating it in parent.frame(), which is the caller's 
evaluation frame.  That frame can't generally see the private frame for 
your package.

Since it needs to see things supplied by the user, it needs to see 
parent.frame.  It doesn't need to see anything in your evaluation frame 
other than cord.work, but it can't see that, which is your problem.

I think there are at least two choices:

1.  change cfun[[1]] <- quote(cord.work) to cfun[[1]] <- cord.work. 
This should work, but error messages may be messed up, because you'll be 
calling an anonymous function that is a copy of cord.work, rather than 
calling cord.work by name.

2.  change cfun[[1]] <- quote(cord.work) to cfun[[1]] <- 
quote(survival:::cord.work).  You say this will mess up your test bed. 
That suggests that your test bed is broken.  This is a perfectly legal 
and valid solution.

Duncan Murdoch

> 
> I got it working by changing parent.frame() to environment(concordance) in the eval()
> call.?? Since everything used by cord.work is explicitly passed in its argument list this
> does work.
> 
> Comments or suggestions??? (I avoid having survival:: in the survival package because it
> messes up my particular test bed.)
> 
> Terry
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@echler @ending from @t@t@m@th@ethz@ch  Wed Oct 17 16:14:50 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 17 Oct 2018 16:14:50 +0200
Subject: [Rd] methods(class = class(<obj>)) - improve for |cl.| > 1  ?
Message-ID: <23495.17370.834231.288292@stat.math.ethz.ch>

With new "strict" settings in R-devel, the following glm() example

> data(anorexia, package = "MASS")
> fm <- glm(Postwt ~ Prewt + Treat + offset(Prewt), family = gaussian, data = anorexia)
> methods(class = class(fm))
Warning in grep(name, row.names(info)) :
  argument 'pattern' has length > 1 and only the first element will be used
Warning in gsub(name, "", row.names(info)) :
  argument 'pattern' has length > 1 and only the first element will be used
Warning in grep(pattern, all.names, value = TRUE) :
  argument 'pattern' has length > 1 and only the first element will be used
Warning in grep(pattern, all.names, value = TRUE) :
  argument 'pattern' has length > 1 and only the first element will be used
...........
...........
...........
[ca. 20 lines of warnings]

and then shows the "glm" methods, but not "lm" ones.

This is not a bug strictly, as  ?methods says that

   class: a symbol or character string naming a class: only used if
          ?generic.function? is not supplied.

and so the use of

       	   methods(class = class(<obj>))

is a user error when  class(<obj>)  is of length > 1.

In the case of e.g. a randomForest() result, we also get 25
warnings, i.e. 50 lines, but then

--->>>  no methods found

because

   > class(rf.fit)
   [1] "randomForest.formula" "randomForest"

and no methods are  defined for "randomForest.formula".

---

Of course, all this works fine with S4 classes:  There the full
inheritance is used and all methods are found.

Still, would it make sense to improve the underlying .S3methods() ?

I assume it will break *some* overzealous package checks out
there when .S3methods() and hence methods() would return *more*
in such case.

Comments?

--
Martin Maechler
ETH Zurich  and  R Core


From tom@@@k@liber@ @ending from gm@il@com  Wed Oct 17 16:47:21 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 17 Oct 2018 16:47:21 +0200
Subject: [Rd] unexpected memory.limit on windows in embedded R
In-Reply-To: <CAL0dvtjUwjxgVxqJi=XeEroYTA+Hs33H98ZifiUw2B0eHZ6WQw@mail.gmail.com>
References: <CAL0dvtjUwjxgVxqJi=XeEroYTA+Hs33H98ZifiUw2B0eHZ6WQw@mail.gmail.com>
Message-ID: <d5c45b88-8e52-02a8-873f-cc817b2a17ac@gmail.com>

Dear Livio,

thank you for the report. Fixed in R-devel, 75450.

Best
Tomas

On 10/01/2018 06:29 PM, Livio Bertacco wrote:
> Dear All,
> I'm linking R from another application and embedding it as described in the
> R-exts manual, i.e. with initialization done via Rf_initEmbeddedR.
> While everything works the same as in standalone R for Linux, under Windows
> I found a difference in the default memory.limit, which is fixed to 2GB
> (both win32 and win64) - compared to a limit in standalone R of 3.5GB for
> win32 and 16GB on win64 (which is the amount of physical memory I have).
>
> So I wonder if this is just undocumented (at least, I couldn't find any
> mention of it) or unintentional.
> All I could find is the following:
> - man page of memory.limit doesn't mention a default 2GB limit, especially
> not on win64;
> - man page of memory.limit and rw-FAQ Q2.9 say that you can set the limit
> via --max-mem-size or R_MAX_MEM_SIZE env var: both work only in standalone
> R (Rf_initEmbeddedR ignores them);
> - R\src\gnuwin32\system.c defines
>      R_size_t R_max_memory = INT_MAX;
>    which is the reason of the 2GB default limit on embedded R; however
> INT_MAX is not the maximum integer value of an R_size_t variable either on
> win32 nor on win64;
> - line 879 of the same system.c source says: "/* set defaults for
> R_max_memory. This is set here so that embedded applications get no limit
> */" (meaning that that code is executed only for standalone R) which
> suggests that, at some point, the intention for embedded R was to impose no
> limit by default and maybe the INT_MAX value is a mistake.
>
> Thank you in advance,
> Livio
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From S@Elli@on @ending from LGCGroup@com  Wed Oct 17 17:16:10 2018
From: S@Elli@on @ending from LGCGroup@com (S Ellison)
Date: Wed, 17 Oct 2018 15:16:10 +0000
Subject: [Rd] invisible functions
In-Reply-To: <a3300441-f4db-1fe4-1634-89f7cf26a601@gmail.com>
References: <bb6fa2$aad9au@ironport10.mayo.edu>
 <a3300441-f4db-1fe4-1634-89f7cf26a601@gmail.com>
Message-ID: <96f10074a64048df9bdfe1b5e026c810@GBDCVPEXC08.corp.lgc-group.com>

> 2.  change cfun[[1]] <- quote(cord.work) to cfun[[1]] <-
> quote(survival:::cord.work).  You say this will mess up your test bed.
> That suggests that your test bed is broken.  This is a perfectly legal
> and valid solution.
Valid in a package, but forces code to call a loaded library version of a function rather than (say) a 'source'd user-space version that is under development. 
Being non-specific (ie omitting foo:::) means that test code would pick up the development version in the current user environment by default. That's handy for small mods.


S Ellison



*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From murdoch@dunc@n @ending from gm@il@com  Wed Oct 17 17:37:52 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Wed, 17 Oct 2018 11:37:52 -0400
Subject: [Rd] invisible functions
In-Reply-To: <96f10074a64048df9bdfe1b5e026c810@GBDCVPEXC08.corp.lgc-group.com>
References: <bb6fa2$aad9au@ironport10.mayo.edu>
 <a3300441-f4db-1fe4-1634-89f7cf26a601@gmail.com>
 <96f10074a64048df9bdfe1b5e026c810@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <9cabc8a2-bc6b-7284-5abe-4a12a5dc9a9d@gmail.com>

On 17/10/2018 11:16 AM, S Ellison wrote:
>> 2.  change cfun[[1]] <- quote(cord.work) to cfun[[1]] <-
>> quote(survival:::cord.work).  You say this will mess up your test bed.
>> That suggests that your test bed is broken.  This is a perfectly legal
>> and valid solution.
> Valid in a package, but forces code to call a loaded library version of a function rather than (say) a 'source'd user-space version that is under development.
> Being non-specific (ie omitting foo:::) means that test code would pick up the development version in the current user environment by default. That's handy for small mods.

I generally rebuild a package after each change.  In RStudio that's 
pretty simple:  "Install and Restart" saves the current workspace, shuts 
down R, installs the revised package, and restarts R with the old 
workspace.  It's all pretty quick.

Duncan Murdoch


From tom@@@k@liber@ @ending from gm@il@com  Thu Oct 18 16:47:59 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Thu, 18 Oct 2018 16:47:59 +0200
Subject: [Rd] Random behavior of mclapply
In-Reply-To: <CAFyih6CkMstJXQrg2fL6K015qUsbLj23tbCY+RgijA-92iYzLg@mail.gmail.com>
References: <CAFyih6CkMstJXQrg2fL6K015qUsbLj23tbCY+RgijA-92iYzLg@mail.gmail.com>
Message-ID: <d1bceb77-85d8-ad48-cc20-4407a87e7d19@gmail.com>


Hi Thibault,

mclapply has been designed to signal an error in two ways. User code 
errors are returned as special objects (of class "try-error") in the 
respective element of the result list. All other errors (including a 
process killed) are returned as NULL in the respective elements of the 
result list. To detect these errors reliably, one needs to implement FUN 
so that it never returns NULL normally (also it cannot return a raw 
vector). This is how mclapply was designed and implemented (and also 
mccollect, etc). It may be surprising to see multiple NULL elements when 
a single process is killed, but this is expected with pre-scheduling 
when that process has been tasked to compute multiple elements.

To make this API more user friendly, I've added a warning that is now 
emitted when a job does not deliver a result (that is, when a vector 
element is NULL because of such error). I've also made it more explicit 
in the documentation that NULL signals an error.

Best,
Tomas


On 07/26/2018 08:37 PM, Thibault Vatter wrote:
> Hi,
>
> I wondered about the behavior described in the following stackoverflow
> question:
>
> https://stackoverflow.com/questions/20674538/mclapply-returns-null-randomly
>
> More specifically, I would like to know if you ever considered the
> suggestion made in the comments of the first answer, namely to somehow warn
> the user if one of the processes has been killed by the out-of-memory
> killer ?
>
> I am always surprised to see the random NULLs without message/warning/error
> of any kind, and I think that it could be a useful feature to know whether
> the function executed by mclapply returned a NULL or if the process was
> killed for some reason.
>
> In the following gist, I have an example of this (in this case non-random)
> behavior:
>
> https://gist.github.com/tvatter/2fcf3a9a99c256f9b9360f596b300715
>
> For the record, I generate the list of NULLs in the 4th mclapply in the
> girst above with a late 2013 macbook pro with macOS High Sierra, 16GB of
> memory, and my sessionInfo() is:
>
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-apple-darwin16.7.0 (64-bit)
> Running under: macOS High Sierra 10.13.6
>
> Matrix products: default
> BLAS:
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
> LAPACK:
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib
>
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
> attached base packages:
> [1] parallel  stats     graphics  grDevices utils     datasets  methods
>   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.5.0 tools_3.5.0    yaml_2.1.19
>
> ------------------------------------------------------------
> Thibault Vatter
> Department of Statistics
> Columbia University
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From kevinu@hey @ending from gm@il@com  Fri Oct 19 19:55:04 2018
From: kevinu@hey @ending from gm@il@com (Kevin Ushey)
Date: Fri, 19 Oct 2018 10:55:04 -0700
Subject: [Rd] methods(class = class(<obj>)) - improve for |cl.| > 1 ?
In-Reply-To: <23495.17370.834231.288292@stat.math.ethz.ch>
References: <23495.17370.834231.288292@stat.math.ethz.ch>
Message-ID: <CAJXgQP09AcUn4Jm=gjeQeCUokLigtk+WGM46Kv_y1yteAvW6qQ@mail.gmail.com>

I think this would be a good change. I think most users use the
'methods(class = <...>)' function to answer the question, "what
methods can I call on objects with these classes?", and in that
context I think it would be sensible for the function to accept more
than one class.

Kevin

On Wed, Oct 17, 2018 at 7:15 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> With new "strict" settings in R-devel, the following glm() example
>
> > data(anorexia, package = "MASS")
> > fm <- glm(Postwt ~ Prewt + Treat + offset(Prewt), family = gaussian, data = anorexia)
> > methods(class = class(fm))
> Warning in grep(name, row.names(info)) :
>   argument 'pattern' has length > 1 and only the first element will be used
> Warning in gsub(name, "", row.names(info)) :
>   argument 'pattern' has length > 1 and only the first element will be used
> Warning in grep(pattern, all.names, value = TRUE) :
>   argument 'pattern' has length > 1 and only the first element will be used
> Warning in grep(pattern, all.names, value = TRUE) :
>   argument 'pattern' has length > 1 and only the first element will be used
> ...........
> ...........
> ...........
> [ca. 20 lines of warnings]
>
> and then shows the "glm" methods, but not "lm" ones.
>
> This is not a bug strictly, as  ?methods says that
>
>    class: a symbol or character string naming a class: only used if
>           ?generic.function? is not supplied.
>
> and so the use of
>
>            methods(class = class(<obj>))
>
> is a user error when  class(<obj>)  is of length > 1.
>
> In the case of e.g. a randomForest() result, we also get 25
> warnings, i.e. 50 lines, but then
>
> --->>>  no methods found
>
> because
>
>    > class(rf.fit)
>    [1] "randomForest.formula" "randomForest"
>
> and no methods are  defined for "randomForest.formula".
>
> ---
>
> Of course, all this works fine with S4 classes:  There the full
> inheritance is used and all methods are found.
>
> Still, would it make sense to improve the underlying .S3methods() ?
>
> I assume it will break *some* overzealous package checks out
> there when .S3methods() and hence methods() would return *more*
> in such case.
>
> Comments?
>
> --
> Martin Maechler
> ETH Zurich  and  R Core
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From becker@g@be @ending from gene@com  Fri Oct 19 20:55:40 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Fri, 19 Oct 2018 11:55:40 -0700
Subject: [Rd] methods(class = class(<obj>)) - improve for |cl.| > 1 ?
In-Reply-To: <CAJXgQP09AcUn4Jm=gjeQeCUokLigtk+WGM46Kv_y1yteAvW6qQ@mail.gmail.com>
References: <23495.17370.834231.288292@stat.math.ethz.ch>
 <CAJXgQP09AcUn4Jm=gjeQeCUokLigtk+WGM46Kv_y1yteAvW6qQ@mail.gmail.com>
Message-ID: <CAMFmJs=E9VytRLSkuRBrUYuHV8+VfgapP8Tm8mo1xZJ4WmCGqg@mail.gmail.com>

Martin and Kevin,

Perhaps a variant of methods which more directly addresses the use-case
Kevin mentions might be in order?

I am happy to prepare a patch which implements a methodsForObj function
(name very much negotiable), or a third obj argument to methods which takes
the actual object and answers the question "what methods would I hit for an
object just like this one?" directly. Is this something you (Martin, et al
in R core), are interested in and would consider?

I know people can always do methods(class = class(obj)) after the change
being discussed (and contingent on that change what I described could be
trivially implemented that way), but  should they need to?

Best,
~G



On Fri, Oct 19, 2018 at 10:55 AM, Kevin Ushey <kevinushey at gmail.com> wrote:

> I think this would be a good change. I think most users use the
> 'methods(class = <...>)' function to answer the question, "what
> methods can I call on objects with these classes?", and in that
> context I think it would be sensible for the function to accept more
> than one class.
>
> Kevin
>
> On Wed, Oct 17, 2018 at 7:15 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
> >
> > With new "strict" settings in R-devel, the following glm() example
> >
> > > data(anorexia, package = "MASS")
> > > fm <- glm(Postwt ~ Prewt + Treat + offset(Prewt), family = gaussian,
> data = anorexia)
> > > methods(class = class(fm))
> > Warning in grep(name, row.names(info)) :
> >   argument 'pattern' has length > 1 and only the first element will be
> used
> > Warning in gsub(name, "", row.names(info)) :
> >   argument 'pattern' has length > 1 and only the first element will be
> used
> > Warning in grep(pattern, all.names, value = TRUE) :
> >   argument 'pattern' has length > 1 and only the first element will be
> used
> > Warning in grep(pattern, all.names, value = TRUE) :
> >   argument 'pattern' has length > 1 and only the first element will be
> used
> > ...........
> > ...........
> > ...........
> > [ca. 20 lines of warnings]
> >
> > and then shows the "glm" methods, but not "lm" ones.
> >
> > This is not a bug strictly, as  ?methods says that
> >
> >    class: a symbol or character string naming a class: only used if
> >           ?generic.function? is not supplied.
> >
> > and so the use of
> >
> >            methods(class = class(<obj>))
> >
> > is a user error when  class(<obj>)  is of length > 1.
> >
> > In the case of e.g. a randomForest() result, we also get 25
> > warnings, i.e. 50 lines, but then
> >
> > --->>>  no methods found
> >
> > because
> >
> >    > class(rf.fit)
> >    [1] "randomForest.formula" "randomForest"
> >
> > and no methods are  defined for "randomForest.formula".
> >
> > ---
> >
> > Of course, all this works fine with S4 classes:  There the full
> > inheritance is used and all methods are found.
> >
> > Still, would it make sense to improve the underlying .S3methods() ?
> >
> > I assume it will break *some* overzealous package checks out
> > there when .S3methods() and hence methods() would return *more*
> > in such case.
> >
> > Comments?
> >
> > --
> > Martin Maechler
> > ETH Zurich  and  R Core
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From C@J@v@nLi@@@ @ending from uu@nl  Sat Oct 20 08:50:43 2018
From: C@J@v@nLi@@@ @ending from uu@nl (Lissa, C.J. van (Caspar))
Date: Sat, 20 Oct 2018 06:50:43 +0000
Subject: [Rd] Feature request: Have t.test return (group-wise) SD and N
Message-ID: <5EF9F85C575006438E0B95A12C255E356BCEFB72@WP0047.soliscom.uu.nl>

Dear readers,

Lm returns all information necessary to reconstruct summary statistics by group. However, t.test only returns the group means, and not the group SDs, or even the group Ns. These cannot be reconstructed from the test statistic and df, because the df are already pooled, except under a very strict assumption of equality of groups and variances.

I need these summary statistics for a package that performs Bayesian inference for frequentist analyses, through normal approximation of the posterior. To make the package as user friendly as possible, I would like it to have S3 methods for commonly used frequentist analyses in R, such as: lm and t.test.

As per the R-project feature request guidelines, I would like to gauge how people feel about adding functionality to t.test, so that it will return either the model data, as lm() does, or full summary statistics (per group)? I can mask the t.test function with an enhanced version, but I feel like there is value in making this functionality available to all.

Thank you sincerely for your input. Below is a reproducible example, illustrating the problem.

Best,
Caspar

d <- structure(list(Petal.Length = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7,
                                     1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7,
                                     1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5,
                                     1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9,
                                     1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3,
                                     4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8,
                                     4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1,
                                     4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2,
                                     4.3, 3, 4.1),
                    Species = structure(rep(c(1L, 2L), each = 50), .Label = c("setosa", "versicolor"), class = "factor")),
                    row.names = c(NA, 100L), class = "data.frame")
# lm model
m_lm <- lm(Petal.Length ~ Species, d)
# Extract group means:
aggregate(m_lm$model$Petal.Length, list(m_lm$model$Species), mean)
# Extract group SDs:
aggregate(m_lm$model$Petal.Length, list(m_lm$model$Species), sd)
# Extract group Ns:
table(m_lm$model$Species)

# t.test model
m_t <- t.test(d$Petal.Length[1:50], d$Petal.Length[51:100], var.equal = TRUE)
# Extract group means:
m_t$estimate
# Extract group SDs:
# Not available
# Extract group Ns:
# Not available

Dr. Caspar J. van Lissa
Assistant professor of developmental data science
Utrecht University, dept. Methodology & Statistics
Sjoerd Groenmangebouw C1.01, 3584CH Utrecht, the Netherlands. Secretariat: +31 30 253 4438


	[[alternative HTML version deleted]]


From thib@ult@v@tter @ending from gm@il@com  Mon Oct 22 17:12:20 2018
From: thib@ult@v@tter @ending from gm@il@com (Thibault Vatter)
Date: Mon, 22 Oct 2018 11:12:20 -0400
Subject: [Rd] Random behavior of mclapply
In-Reply-To: <d1bceb77-85d8-ad48-cc20-4407a87e7d19@gmail.com>
References: <CAFyih6CkMstJXQrg2fL6K015qUsbLj23tbCY+RgijA-92iYzLg@mail.gmail.com>
 <d1bceb77-85d8-ad48-cc20-4407a87e7d19@gmail.com>
Message-ID: <CAFyih6Cismwwo4LQb+hLHgC=_8=W1a7_X0bmV7BNcdTi-FtRtQ@mail.gmail.com>

Hi Tomas,

Thanks a lot for the explanation and the changes. The update in the
documentation is especially helpful.

Best,
Thibault




On Thu, Oct 18, 2018 at 10:48 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> Hi Thibault,
>
> mclapply has been designed to signal an error in two ways. User code
> errors are returned as special objects (of class "try-error") in the
> respective element of the result list. All other errors (including a
> process killed) are returned as NULL in the respective elements of the
> result list. To detect these errors reliably, one needs to implement FUN
> so that it never returns NULL normally (also it cannot return a raw
> vector). This is how mclapply was designed and implemented (and also
> mccollect, etc). It may be surprising to see multiple NULL elements when
> a single process is killed, but this is expected with pre-scheduling
> when that process has been tasked to compute multiple elements.
>
> To make this API more user friendly, I've added a warning that is now
> emitted when a job does not deliver a result (that is, when a vector
> element is NULL because of such error). I've also made it more explicit
> in the documentation that NULL signals an error.
>
> Best,
> Tomas
>
>
> On 07/26/2018 08:37 PM, Thibault Vatter wrote:
> > Hi,
> >
> > I wondered about the behavior described in the following stackoverflow
> > question:
> >
> >
> https://stackoverflow.com/questions/20674538/mclapply-returns-null-randomly
> >
> > More specifically, I would like to know if you ever considered the
> > suggestion made in the comments of the first answer, namely to somehow
> warn
> > the user if one of the processes has been killed by the out-of-memory
> > killer ?
> >
> > I am always surprised to see the random NULLs without
> message/warning/error
> > of any kind, and I think that it could be a useful feature to know
> whether
> > the function executed by mclapply returned a NULL or if the process was
> > killed for some reason.
> >
> > In the following gist, I have an example of this (in this case
> non-random)
> > behavior:
> >
> > https://gist.github.com/tvatter/2fcf3a9a99c256f9b9360f596b300715
> >
> > For the record, I generate the list of NULLs in the 4th mclapply in the
> > girst above with a late 2013 macbook pro with macOS High Sierra, 16GB of
> > memory, and my sessionInfo() is:
> >
> > R version 3.5.0 (2018-04-23)
> > Platform: x86_64-apple-darwin16.7.0 (64-bit)
> > Running under: macOS High Sierra 10.13.6
> >
> > Matrix products: default
> > BLAS:
> >
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
> > LAPACK:
> >
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib
> >
> > locale:
> > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> >
> > attached base packages:
> > [1] parallel  stats     graphics  grDevices utils     datasets  methods
> >   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.5.0 tools_3.5.0    yaml_2.1.19
> >
> > ------------------------------------------------------------
> > Thibault Vatter
> > Department of Statistics
> > Columbia University
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>

	[[alternative HTML version deleted]]


From m@@nnell @ending from tibco@com  Mon Oct 22 21:52:53 2018
From: m@@nnell @ending from tibco@com (Michael Sannella)
Date: Mon, 22 Oct 2018 12:52:53 -0700
Subject: [Rd] v3 serialization of compact_intseq altrep should write
 modified data
Message-ID: <CAHPe-e81v8R=mxHcXbKnyqu8MAVpP1xRyYb_QMyGu3+iVoyXog@mail.gmail.com>

Experimenting with altrep objects and v3 serialization, I discovered a
possible bug.  Calling DATAPTR on a compact_intseq object returns a
pointer to the expanded integer sequence in memory.  If you modify
this data, the object values appear to be changed.  However, if the
compact_intseq object is then serialized (with version=3), only the
original integer sequence info is written.

For example, suppose I have compiled and loaded the following C code:
  SEXP set_intseq_data(SEXP x)
  {
      void* ptr = DATAPTR(x);
      ((int*)ptr)[3] = 1234;
      return R_NilValue;
  }

I see the following behavior in R 3.5.1:
  > x <- 1:10
  > x
   [1]  1  2  3  4  5  6  7  8  9 10
  > .Call("set_intseq_data", x)
  NULL
  > x
   [1]    1    2    3 1234    5    6    7    8    9   10
  > save(x, file="temp.rda", version=3)
  > load(file="temp.rda")
  > x
   [1]  1  2  3  4  5  6  7  8  9 10
  >

I would have expected the modified vector data to be serialized to the
file, and be restored when it is loaded.

  ~~ Michael Sannella

	[[alternative HTML version deleted]]


From luke-tierney @ending from uiow@@edu  Mon Oct 22 23:48:59 2018
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Mon, 22 Oct 2018 21:48:59 +0000
Subject: [Rd] v3 serialization of compact_intseq altrep should write
 modified data
In-Reply-To: <CAHPe-e81v8R=mxHcXbKnyqu8MAVpP1xRyYb_QMyGu3+iVoyXog@mail.gmail.com>
References: <CAHPe-e81v8R=mxHcXbKnyqu8MAVpP1xRyYb_QMyGu3+iVoyXog@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1810221640330.3154@luke-Latitude-7480>

Try this C code:

SEXP set_intseq_data(SEXP x)
{
     if (MAYBE_SHARED(x))
 	error("Oops, not supposed to do this!");
     void* ptr = DATAPTR(x);
     ((int*)ptr)[3] = 1234;
     return R_NilValue;
}

Lots of things will break if you modify objects that have been marked
as immutable (and hence where MAYBE_SHARED returns TRUE).

For now the implementation of compact sequences marks them as
immutable and so assumes the expanded version will not be changed.
That implementation detail might be changed at some point but C code
should not make assumptions.

Best,

luke

On Mon, 22 Oct 2018, Michael Sannella via R-devel wrote:

> Experimenting with altrep objects and v3 serialization, I discovered a
> possible bug.  Calling DATAPTR on a compact_intseq object returns a
> pointer to the expanded integer sequence in memory.  If you modify
> this data, the object values appear to be changed.  However, if the
> compact_intseq object is then serialized (with version=3), only the
> original integer sequence info is written.
>
> For example, suppose I have compiled and loaded the following C code:
>  SEXP set_intseq_data(SEXP x)
>  {
>      void* ptr = DATAPTR(x);
>      ((int*)ptr)[3] = 1234;
>      return R_NilValue;
>  }
>
> I see the following behavior in R 3.5.1:
>  > x <- 1:10
>  > x
>   [1]  1  2  3  4  5  6  7  8  9 10
>  > .Call("set_intseq_data", x)
>  NULL
>  > x
>   [1]    1    2    3 1234    5    6    7    8    9   10
>  > save(x, file="temp.rda", version=3)
>  > load(file="temp.rda")
>  > x
>   [1]  1  2  3  4  5  6  7  8  9 10
>  >
>
> I would have expected the modified vector data to be serialized to the
> file, and be restored when it is loaded.
>
>  ~~ Michael Sannella
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From kurt@wheeler91 @ending from gm@il@com  Tue Oct 23 21:20:12 2018
From: kurt@wheeler91 @ending from gm@il@com (Kurt Wheeler)
Date: Tue, 23 Oct 2018 15:20:12 -0400
Subject: [Rd] Suggestion: Make CRAN source URLs immutable
Message-ID: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>

Hello, I hope the is the right list to send this suggestion to.

I was wondering if it might be possible to have CRAN store the most current
version of a package's source tarball at a location that does not change.
As an example, the source tarball for `httr` is stored at
https://cran.r-project.org/src/contrib/httr_1.3.1.tar.gz. However, once the
next version of `httr` is released, the URL for version 1.3.1 of `httr`
will change to
https://cran.r-project.org/src/contrib/Archive/httr_1.3.1.tar.gz.

The implications of this are that if I want to write a script which
installs version 1.3.1 of `httr`, I need to do so like this:

```
httr_url <- "https://cran.r-project.org/src/contrib/httr_1.3.1.tar.gz"

curl_result <- system(paste0("curl --head ", httr_url), intern=TRUE)
if (grepl("404", curl_result[1])) {
  httr_url <- "
https://cran.r-project.org/src/contrib/Archive/httr_1.3.1.tar.gz"
}

install.packages(httr_url)
```

I think there are two obvious ways of remedying this issue. The first would
be to simply archive the most recent version along with all the old
versions. Then to install a specific version of a package, it would just be:

```
install.packages("
https://cran.r-project.org/src/contrib/Archive/httr_1.3.1.tar.gz")
```

even if 1.3.1 is the most recent version of `httr`.


The other way to remedy this issue would be to simply not use the
`/Archive/` sub-directory. So if I wanted to install an old version of
`httr` it would be:

```
install.packages("https://cran.r-project.org/src/contrib/httr_1.3.0.tar.gz")
```

despite the fact that version 1.3.0 is not the most recent version.


I believe the first way would be a better choice because then any existing
scripts which reference URLs which include `/Archive/` would still work.
However I do not have strong opinions on how this should be implemented, I
would just like a URL which points to a certain version of a package that
will never change.

Thank you,

- Kurt

	[[alternative HTML version deleted]]


From Kurt@Hornik @ending from wu@@c@@t  Wed Oct 24 10:23:50 2018
From: Kurt@Hornik @ending from wu@@c@@t (Kurt Hornik)
Date: Wed, 24 Oct 2018 10:23:50 +0200
Subject: [Rd] Suggestion: Make CRAN source URLs immutable
In-Reply-To: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>
References: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>
Message-ID: <23504.11286.787374.78528@hornik.net>

>>>>> Kurt Wheeler writes:

Try e.g.

https://cran.r-project.org/package=httr&version=1.3.1
https://cran.r-project.org/package=httr&version=1.3.0

-k

> Hello, I hope the is the right list to send this suggestion to.
> I was wondering if it might be possible to have CRAN store the most current
> version of a package's source tarball at a location that does not change.
> As an example, the source tarball for `httr` is stored at
> https://cran.r-project.org/src/contrib/httr_1.3.1.tar.gz. However, once the
> next version of `httr` is released, the URL for version 1.3.1 of `httr`
> will change to
> https://cran.r-project.org/src/contrib/Archive/httr_1.3.1.tar.gz.

> The implications of this are that if I want to write a script which
> installs version 1.3.1 of `httr`, I need to do so like this:

> ```
> httr_url <- "https://cran.r-project.org/src/contrib/httr_1.3.1.tar.gz"

> curl_result <- system(paste0("curl --head ", httr_url), intern=TRUE)
> if (grepl("404", curl_result[1])) {
>   httr_url <- "
> https://cran.r-project.org/src/contrib/Archive/httr_1.3.1.tar.gz"
> }

> install.packages(httr_url)
> ```

> I think there are two obvious ways of remedying this issue. The first would
> be to simply archive the most recent version along with all the old
> versions. Then to install a specific version of a package, it would just be:

> ```
> install.packages("
> https://cran.r-project.org/src/contrib/Archive/httr_1.3.1.tar.gz")
> ```

> even if 1.3.1 is the most recent version of `httr`.


> The other way to remedy this issue would be to simply not use the
> `/Archive/` sub-directory. So if I wanted to install an old version of
> `httr` it would be:

> ```
> install.packages("https://cran.r-project.org/src/contrib/httr_1.3.0.tar.gz")
> ```

> despite the fact that version 1.3.0 is not the most recent version.


> I believe the first way would be a better choice because then any existing
> scripts which reference URLs which include `/Archive/` would still work.
> However I do not have strong opinions on how this should be implemented, I
> would just like a URL which points to a certain version of a package that
> will never change.

> Thank you,

> - Kurt

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Wed Oct 24 17:10:24 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 24 Oct 2018 17:10:24 +0200
Subject: [Rd] Bug in file.access on Windows when using network shares
In-Reply-To: <CADWT1NMEs8Pkj=uc4JTkvax8cbrey69-31vwn2jKC9CPfztdUg@mail.gmail.com>
References: <CADWT1NMxqSQ4Mf15cazp4Dnz9i7_GjNKWLo1fjPC_aFPXLRVVQ@mail.gmail.com>
 <9119b59d-f679-021b-d35f-a6ea51cde3e2@gmail.com>
 <CADWT1NMEs8Pkj=uc4JTkvax8cbrey69-31vwn2jKC9CPfztdUg@mail.gmail.com>
Message-ID: <15aa007b-c75a-e8ea-6889-37c371bf8024@gmail.com>

Dear Nick,

I've updated the implementation of file.access() on Windows to fall back 
to _waccess() when the security descriptor is not available. It now 
works on my system with files selected for offline use even when the 
underlying samba share (on a non-Windows host) becomes unavailable. As I 
wrote earlier, checking access permissions using file.access() before 
actually trying to access the file is subject to a race condition and 
should be avoided. On Windows, in addition, the behavior is complicated, 
not fully documented, and particularly with remote shares, offline 
files, and possibly read-only mounts it is unlikely that file.access() 
will always match the real permission check one gets then trying to 
access the file. One should instead just try to access the file and be 
prepared to handle errors.

R's implementation of file.access() for Windows does not just call 
_waccess(), because _waccess() does not take ACLs into account. This is 
a known and documented limitation of Windows API, and hence as fix for 
PR#7234 R uses GetFileSecurity/CheckAccess instead.

Best
Tomas

On 7/3/18 11:08 PM, Nick Kennedy wrote:
> Dear Tomas,
>
> Thanks for your email. This can be easily reproduced if there is 
> access to a shared folder. I've reproduced this behaviour on both 
> Windows 7 and Windows 10.
>
> Steps to reproduce:
>
> 1. Ensure Offline Files is turned on within Windows
> 2. Using Windows Explorer, browse to a folder shared on a network 
> using a UNC path, e.g. \\mypc\myshare\
> 3. Create a test file, e.g. test.txt
> 4. Within R, try the following:
>
> file.access("//mypc/myshare/test.txt",0)
> # Returns 0
> file.access("//mypc/myshare/test.txt",4)
> # Returns -1 if the share is on a non-Windows host, 0 if it is on a 
> Windows host
>
> 5. Right click on the file within Windows Explorer and ensure 'always 
> available offline' is checked.
> 6. Wait for the sync to take place.
> 7. Disconnect from the network.
> 8. Within R, try the same commands again
>
> file.access("//mypc/myshare/test.txt",0)
> # Returns 0
> file.access("//mypc/myshare/test.txt",4)
> # Returns -1 regardless of whether the original host was Windows or 
> non-Windows
>
> In all cases the file is actually readable.
>
> I've created my own version of winAccessW in extra.c at 
> https://github.com/NikNakk/r-source/commit/0a82f6d23b8a2ace44e43a28cb6eb923145a13c8
>
> Almost all of the code in here can be replaced with a simple call to 
> _waccess, other than the check for executable. This seems to work as 
> expected. Since _waccess exists as a system call within Windows and 
> has the same syntax (other than wide characters) as access in POSIX, 
> why not use it?
>
> BW
>
> Nick
>
> On 3 July 2018 at 09:21, Tomas Kalibera <tomas.kalibera at gmail.com 
> <mailto:tomas.kalibera at gmail.com>> wrote:
>
>
>     Dear Nick,
>
>     thank you for your report. In general one cannot know reliably in
>     advance whether reading a file will work, if nothing else, there
>     are possible race conditions with other applications and/or the
>     system (e.g. a service may lock the file, move it away
>     temporarily, etc). The only correct way to handle errors is try
>     the read and catch errors. Please note there is a disclaimer in
>     ?file.access to this effect.
>
>     If you still want to report a bug in file.access, please provide
>     an example that does not require a package, and provide more
>     details (what do you think would be the correct behavior, etc).
>     From looking at the code, when winAccessW/GetFileSecurityW fails
>     to retrieve information about the file, file.access would signal
>     an error, which seems to be a fine behavior for me. It is not
>     surprising to me that in some cases (like working on a local copy
>     of a file in a distributed file-system), the OS would not know
>     whether a file is readable/writeable before trying out on/syncing
>     the distributed version.
>
>     Best
>     Tomas
>
>
>     On 07/03/2018 01:11 AM, Nick Kennedy wrote:
>
>         Dear R-Devel,
>
>         I've run into an issue with a package (vcfR) that uses
>         file.access to check
>         a file is readable before opening it. The issue is actually in
>         base R
>         though. I've looked into the package code, and it calls
>         file.access(path,
>         mode = 4). I've created a minimal working example of the code
>         in winAccessW
>         from src/gnuwin32/extra.c, and the problem arises when
>         GetFileSecurityW is
>         called on shared files under certain circumstances.
>
>         One situation I've seen it in are when a file is shared from a
>         non-Windows
>         host (e.g. Linux), which is similar to the situation documented at
>         https://social.msdn.microsoft.com/Forums/sqlserver/en-US/f57928d3-d89b-426d-a174-d06d97355afc/how-to-check-if-a-filefolder-is-writable-or-not?forum=windowssdk
>         <https://social.msdn.microsoft.com/Forums/sqlserver/en-US/f57928d3-d89b-426d-a174-d06d97355afc/how-to-check-if-a-filefolder-is-writable-or-not?forum=windowssdk>
>         .
>
>         The other situation arises when a file is cached offline by
>         Windows Offline
>         files feature. The call to GetFileSecurityW works fine when
>         the network is
>         up (and so the file is being accessed from the share), but
>         fails when the
>         network is down and the file is being accessed from the
>         offline files cache.
>
>         Is there any reason that there is a custom function here?
>         Windows supports
>         the use of access (as is used on other OSes), although the ISO
>         C++ _waccess
>         would be preferred. This seems to work well even in situations
>         where the
>         current code does not.
>
>         BW
>
>         Nick
>
>         ? ? ? ? [[alternative HTML version deleted]]
>
>         ______________________________________________
>         R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>         https://stat.ethz.ch/mailman/listinfo/r-devel
>         <https://stat.ethz.ch/mailman/listinfo/r-devel>
>
>
>
>


	[[alternative HTML version deleted]]


From d@vidhughjone@ @ending from gm@il@com  Thu Oct 25 18:46:47 2018
From: d@vidhughjone@ @ending from gm@il@com (David Hugh-Jones)
Date: Thu, 25 Oct 2018 17:46:47 +0100
Subject: [Rd] small bug in formatC?
Message-ID: <CAARY7kjB_L86pTUoSKNAMan8M9Jdhvais--8BoBrnRKGPSmxwA@mail.gmail.com>

formatC(0.0001, digits = 3, format = "f", zero.print="< 0.01")
Error in strrep(" ", nc - i1) : invalid 'times' value

The problem, if it is one, is in .format.zeros:
.format.zeros("0.000", "xxxxxx")
Error in strrep(" ", nc - i1) : invalid 'times' value

R version 3.5.1.


David

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Oct 26 11:29:16 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 26 Oct 2018 11:29:16 +0200
Subject: [Rd] Rmpfr: build vector sequentially -- c(.) not working
In-Reply-To: <CY4PR12MB1910056059D5038651A0DC4F81F00@CY4PR12MB1910.namprd12.prod.outlook.com>
References: <CY4PR12MB1910056059D5038651A0DC4F81F00@CY4PR12MB1910.namprd12.prod.outlook.com>
Message-ID: <23506.56940.485048.948917@stat.math.ethz.ch>

I've been asked in private,
but am answering in public so others can comment / or find this
answer in the future after a web search.

This is about the package 'Rmpfr' (R interface to MPFR,
the GNU C library for arbitrary precise numbers).

> How can you build a vector of mpfr numbers sequentially?
> Typically I would do something like the following (and try to
> replace the for loop with some sort of apply construct)
> 
> vec <- NULL
> for(...) {
>    ...
>    vec <- c(vec, vec.new)
> }

Dear Jerry,

In general the above is *bad* R code in the sense that it is
unnecessarily inefficient.
In a typical for() loop you know the length of the result in
advance, and

 vec <- numeric(n)
 for(i in seq_along(vec)) {

   vec[i] <- .....
 }

is *MUCH* faster than your construct  when  n  is not small.

Still, I understand that you would expect  mpfr numbers to work as
well as many other R objects here -- and they don't :

> However, this does not work with mpfr's.  For instance
>    c(NULL, 1:3)
> is equivalent to
>    1:3
> 
> But
>    c(NULL, mpfr(1:3,100))
> is not even the same class as
>    mpfr(1:3,100)

Indeed.  One can consider this to be unfortunate, but it's
nothing I can change as author of 'Rmpfr'.

Rather, this is a shortcoming of R's current implementation of  c()
which I think may be very hard to be changed in R without either
losing to much speed or changing semantic in a too radical way.
[but I'm happy if I'm  proven wrong here  !!  ==> that's why posting to R-devel]

- - - -

Anyway, now to solve your problem, if you really want to do
something like your original code, you can do it like this :

mNUL <- mpfr(logical())  # instead of 'NULL'

Then, e.g.,

 vec <- mNUL
 for(i in 1:10) {
    vec <- c(vec, mpfr(i^2, 88))
 }

works fine.

In the next version of Rmpfr, both

   as(NULL, "mpfr")
   mpfr(NULL)

will also give the 'mNUL' above.

I hope you enjoy using Rmpfr!

Best regards,
Martin


Martin Maechler
ETH Zurich


From @gibb@debi@n @ending from gm@il@com  Fri Oct 26 09:54:23 2018
From: @gibb@debi@n @ending from gm@il@com (Sebastian Gibb)
Date: Fri, 26 Oct 2018 09:54:23 +0200
Subject: [Rd] Small typo in log output of
 src/library/tools/R/check.R:check_pkg
Message-ID: <154054046365.10057.5283074485901143394@x1>

Dear R-core members,

there is a small typo in the log output of `check_pkg` in
src/library/tools/R/check.R. Instead of "timestanps" it should be "timestamps":

Best wishes,

Sebastian


svn diff

Index: src/library/tools/R/check.R
===================================================================
--- src/library/tools/R/check.R (revision 75499)
+++ src/library/tools/R/check.R (working copy)
@@ -431,7 +431,7 @@
                                              "FALSE"))) {
             now_local <- Sys.time()
             any <- FALSE
-            checkingLog(Log, "for future file timestanps")
+            checkingLog(Log, "for future file timestamps")
             ## allow skipping clock check on CRAN incoming systems
             if(config_val_to_logical(Sys.getenv("_R_CHECK_SYSTEM_CLOCK_", "TRUE"))) {
                 ## First check time on system running 'check',


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Oct 26 15:04:26 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 26 Oct 2018 15:04:26 +0200
Subject: [Rd] small bug in formatC?
In-Reply-To: <CAARY7kjB_L86pTUoSKNAMan8M9Jdhvais--8BoBrnRKGPSmxwA@mail.gmail.com>
References: <CAARY7kjB_L86pTUoSKNAMan8M9Jdhvais--8BoBrnRKGPSmxwA@mail.gmail.com>
Message-ID: <23507.4314.794779.406047@stat.math.ethz.ch>

>>>>> David Hugh-Jones 
>>>>>     on Thu, 25 Oct 2018 17:46:47 +0100 writes:

> formatC(0.0001, digits = 3, format = "f", zero.print="< 0.01")
> Error in strrep(" ", nc - i1) : invalid 'times' value
> 
> The problem, if it is one, is in .format.zeros:
> .format.zeros("0.000", "xxxxxx")
> Error in strrep(" ", nc - i1) : invalid 'times' value
> 
> R version 3.5.1.
> 
> David

Thank you, David.

Yes, this looks like a bug / wrong assumption in  .format.zeros().
I will have a look (and report back).

Martin Maechler
ETH Zurich and R Core


From @gower @ending from bu@edu  Fri Oct 26 16:28:23 2018
From: @gower @ending from bu@edu (Gower, Adam)
Date: Fri, 26 Oct 2018 14:28:23 +0000
Subject: [Rd] Bug report for sealClass() in Core-maintained package
 "methods"
Message-ID: <DM6PR03MB3913C6D6439FA89D2FC351D8BEF00@DM6PR03MB3913.namprd03.prod.outlook.com>

Hello,
I was just reminded from a comment in some code that I had submitted this bug report last year, but it does not appear to have been addressed in R 3.5.0.
Can this please be fixed, or is there a specific reason that it cannot be addressed?
Thanks,
Adam

From: Gower, Adam
Sent: Monday, June 19, 2017 11:56 AM
To: 'r-devel at r-project.org'
Subject: Bug report for sealClass() in Core-maintained package "methods"

Hello,

I have found that I cannot use sealClass() without specifying the 'where' argument.
I have found this issue in R 3.2.3 and R 3.4.0.
For example:
> setClass("foo", slots=c(name="character", age="integer"))
> isSealedClass("foo")
[1] FALSE
> sealClass("foo")
Error in list2env(list(<environment>), NULL, <environment>) :
  names(x) must be a character vector of the same length as x
> isSealedClass("foo")
[1] FALSE
> sealClass("foo", where=.GlobalEnv)
> isSealedClass("foo")
[1] TRUE

I found that this is because sealClass() includes the following line:
if (missing(where)) where <- findClass(Class, unique = "sealing the class", where = where)

Because findClass() always returns a list (even if argument 'unique' contains a character string), this assigns a list of length 1 to variable 'where'.
This then throws an error in the subsequent line
assignClassDef(Class, classDef, where)

For this reason, the abovementioned line should instead read:
if (missing(where)) where <- findClass(Class, unique = "sealing the class", where = where)[[1]]

Thanks very much,
Adam Gower
agower at bu.edu<mailto:agower at bu.edu>


	[[alternative HTML version deleted]]


From murdoch@dunc@n @ending from gm@il@com  Sat Oct 27 03:30:21 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Fri, 26 Oct 2018 21:30:21 -0400
Subject: [Rd] Bug report for sealClass() in Core-maintained package
 "methods"
In-Reply-To: <DM6PR03MB3913C6D6439FA89D2FC351D8BEF00@DM6PR03MB3913.namprd03.prod.outlook.com>
References: <DM6PR03MB3913C6D6439FA89D2FC351D8BEF00@DM6PR03MB3913.namprd03.prod.outlook.com>
Message-ID: <6dc1634a-6de1-b6fd-d077-dbee6c717f77@gmail.com>

On 26/10/2018 10:28 AM, Gower, Adam wrote:
> Hello,
> I was just reminded from a comment in some code that I had submitted this bug report last year, but it does not appear to have been addressed in R 3.5.0.
> Can this please be fixed, or is there a specific reason that it cannot be addressed?

You're reporting in the wrong place.  Write to R-devel about 
inconsequential things like typos in help pages, or when you're not sure 
something is a bug.  Put bug reports that you care about on the bug 
reporting site, bugs.r-project.org.

The https://www.r-project.org/bugs.html page suggests that reports here 
are sufficient, but it's wrong.  Usually they are not.

Duncan Murdoch

> Thanks,
> Adam
> 
> From: Gower, Adam
> Sent: Monday, June 19, 2017 11:56 AM
> To: 'r-devel at r-project.org'
> Subject: Bug report for sealClass() in Core-maintained package "methods"
> 
> Hello,
> 
> I have found that I cannot use sealClass() without specifying the 'where' argument.
> I have found this issue in R 3.2.3 and R 3.4.0.
> For example:
>> setClass("foo", slots=c(name="character", age="integer"))
>> isSealedClass("foo")
> [1] FALSE
>> sealClass("foo")
> Error in list2env(list(<environment>), NULL, <environment>) :
>    names(x) must be a character vector of the same length as x
>> isSealedClass("foo")
> [1] FALSE
>> sealClass("foo", where=.GlobalEnv)
>> isSealedClass("foo")
> [1] TRUE
> 
> I found that this is because sealClass() includes the following line:
> if (missing(where)) where <- findClass(Class, unique = "sealing the class", where = where)
> 
> Because findClass() always returns a list (even if argument 'unique' contains a character string), this assigns a list of length 1 to variable 'where'.
> This then throws an error in the subsequent line
> assignClassDef(Class, classDef, where)
> 
> For this reason, the abovementioned line should instead read:
> if (missing(where)) where <- findClass(Class, unique = "sealing the class", where = where)[[1]]
> 
> Thanks very much,
> Adam Gower
> agower at bu.edu<mailto:agower at bu.edu>
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @gower @ending from bu@edu  Sat Oct 27 03:35:28 2018
From: @gower @ending from bu@edu (Gower, Adam)
Date: Sat, 27 Oct 2018 01:35:28 +0000
Subject: [Rd] Bug report for sealClass() in Core-maintained package
 "methods"
In-Reply-To: <6dc1634a-6de1-b6fd-d077-dbee6c717f77@gmail.com>
References: <DM6PR03MB3913C6D6439FA89D2FC351D8BEF00@DM6PR03MB3913.namprd03.prod.outlook.com>
 <6dc1634a-6de1-b6fd-d077-dbee6c717f77@gmail.com>
Message-ID: <DM6PR03MB39133A1E5556AEFFACEC10CFBEF10@DM6PR03MB3913.namprd03.prod.outlook.com>

Thanks very much for the clarification, Duncan - I appreciate it.  Will do.
Best,
Adam

-----Original Message-----
From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com] 
Sent: Friday, October 26, 2018 9:30 PM
To: Gower, Adam; r-devel at r-project.org
Subject: Re: [Rd] Bug report for sealClass() in Core-maintained package "methods"

On 26/10/2018 10:28 AM, Gower, Adam wrote:
> Hello,
> I was just reminded from a comment in some code that I had submitted this bug report last year, but it does not appear to have been addressed in R 3.5.0.
> Can this please be fixed, or is there a specific reason that it cannot be addressed?

You're reporting in the wrong place.  Write to R-devel about 
inconsequential things like typos in help pages, or when you're not sure 
something is a bug.  Put bug reports that you care about on the bug 
reporting site, bugs.r-project.org.

The https://www.r-project.org/bugs.html page suggests that reports here 
are sufficient, but it's wrong.  Usually they are not.

Duncan Murdoch

> Thanks,
> Adam
> 
> From: Gower, Adam
> Sent: Monday, June 19, 2017 11:56 AM
> To: 'r-devel at r-project.org'
> Subject: Bug report for sealClass() in Core-maintained package "methods"
> 
> Hello,
> 
> I have found that I cannot use sealClass() without specifying the 'where' argument.
> I have found this issue in R 3.2.3 and R 3.4.0.
> For example:
>> setClass("foo", slots=c(name="character", age="integer"))
>> isSealedClass("foo")
> [1] FALSE
>> sealClass("foo")
> Error in list2env(list(<environment>), NULL, <environment>) :
>    names(x) must be a character vector of the same length as x
>> isSealedClass("foo")
> [1] FALSE
>> sealClass("foo", where=.GlobalEnv)
>> isSealedClass("foo")
> [1] TRUE
> 
> I found that this is because sealClass() includes the following line:
> if (missing(where)) where <- findClass(Class, unique = "sealing the class", where = where)
> 
> Because findClass() always returns a list (even if argument 'unique' contains a character string), this assigns a list of length 1 to variable 'where'.
> This then throws an error in the subsequent line
> assignClassDef(Class, classDef, where)
> 
> For this reason, the abovementioned line should instead read:
> if (missing(where)) where <- findClass(Class, unique = "sealing the class", where = where)[[1]]
> 
> Thanks very much,
> Adam Gower
> agower at bu.edu<mailto:agower at bu.edu>
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From jerry@lewi@ @ending from biogen@com  Fri Oct 26 23:48:07 2018
From: jerry@lewi@ @ending from biogen@com (Jerry Lewis)
Date: Fri, 26 Oct 2018 21:48:07 +0000
Subject: [Rd] Rmpfr: build vector sequentially -- c(.) not working
In-Reply-To: <23506.56940.485048.948917@stat.math.ethz.ch>
References: <CY4PR12MB1910056059D5038651A0DC4F81F00@CY4PR12MB1910.namprd12.prod.outlook.com>
 <23506.56940.485048.948917@stat.math.ethz.ch>
Message-ID: <MWHPR12MB1917F739325EA49F1E6687C881F00@MWHPR12MB1917.namprd12.prod.outlook.com>

Thank you for your detailed response.  I subsequently noticed that
   sapply(vec,fn) 
also fails if the function fn returns an mpfr object.  Will the next version of Rmpfr also fix this usage?

I do enjoy using Rmpfr, and appreciate all that you have done in bringing this capability to the R community.

Thanks,
Jerry

-----Original Message-----
From: Martin Maechler <maechler at stat.math.ethz.ch> 
Sent: Friday, October 26, 2018 5:29 AM
To: R Development List <R-devel at r-project.org>
Cc: Martin Maechler (maechler at stat.math.ethz.ch) <maechler at stat.math.ethz.ch>
Subject: Re: Rmpfr: build vector sequentially -- c(.) not working

I've been asked in private,
but am answering in public so others can comment / or find this answer in the future after a web search.

This is about the package 'Rmpfr' (R interface to MPFR, the GNU C library for arbitrary precise numbers).

> How can you build a vector of mpfr numbers sequentially?
> Typically I would do something like the following (and try to replace 
> the for loop with some sort of apply construct)
> 
> vec <- NULL
> for(...) {
>    ...
>    vec <- c(vec, vec.new)
> }

Dear Jerry,

In general the above is *bad* R code in the sense that it is unnecessarily inefficient.
In a typical for() loop you know the length of the result in advance, and

 vec <- numeric(n)
 for(i in seq_along(vec)) {

   vec[i] <- .....
 }

is *MUCH* faster than your construct  when  n  is not small.

Still, I understand that you would expect  mpfr numbers to work as well as many other R objects here -- and they don't :

> However, this does not work with mpfr's.  For instance
>    c(NULL, 1:3)
> is equivalent to
>    1:3
> 
> But
>    c(NULL, mpfr(1:3,100))
> is not even the same class as
>    mpfr(1:3,100)

Indeed.  One can consider this to be unfortunate, but it's nothing I can change as author of 'Rmpfr'.

Rather, this is a shortcoming of R's current implementation of  c() which I think may be very hard to be changed in R without either losing to much speed or changing semantic in a too radical way.
[but I'm happy if I'm  proven wrong here  !!  ==> that's why posting to R-devel]

- - - -

Anyway, now to solve your problem, if you really want to do something like your original code, you can do it like this :

mNUL <- mpfr(logical())  # instead of 'NULL'

Then, e.g.,

 vec <- mNUL
 for(i in 1:10) {
    vec <- c(vec, mpfr(i^2, 88))
 }

works fine.

In the next version of Rmpfr, both

   as(NULL, "mpfr")
   mpfr(NULL)

will also give the 'mNUL' above.

I hope you enjoy using Rmpfr!

Best regards,
Martin


Martin Maechler
ETH Zurich


From @purdle@@ @ending from gm@il@com  Sun Oct 28 22:08:34 2018
From: @purdle@@ @ending from gm@il@com (Abs Spurdle)
Date: Mon, 29 Oct 2018 10:08:34 +1300
Subject: [Rd] CRAN Feature Request: install.data (task.view="Cluster")
Message-ID: <CAB8pepz+LyhWg=9eN0qpdg1_Msw5=tz3xNro7yPcGv-Oeo_vzA@mail.gmail.com>

Hi

I wish that it was possible to install datasets from R packages
without installing the rest of the packages.
Mainly for testing purposes or writing examples.

Assuming that there's a top level data directory (which there isn't):
> install.data (package=c ("s20x", "R330") )

Which would install all datasets from the s20x and R330 packages,
without installing the complete packages, with some form of
documentation and presumably with license info.

Or:
> install.data (task.view="Cluster")

Which would install all the datasets from the Cluster task view, again
without installing the complete packages, with some form of
documentation and presumably with license info.

Documentation could be the Rd files or a reduced form of the pdf/html
files, covering the datasets only.

Also, it would be good to have search tools too.
> search.data (task.view="Cluster", keyword="something", all.Rd.fields=TRUE, condition="n.numeric.vars >= 3")

Which would return a list of datasets from the Cluster task view with
keyword "something" (from anywhere in the Rd file) and 3 or more
numeric variables, including info on the (dataset) name, package
(name), license, header, dimensions and possibly description.

Obviously, these functions would not be part of CRAN itself, however,
CRAN would need to store packages in a different way for this to work.

Unless I'm missing something?


kind regards
Abs


From murdoch@dunc@n @ending from gm@il@com  Sun Oct 28 23:00:41 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Sun, 28 Oct 2018 18:00:41 -0400
Subject: [Rd] CRAN Feature Request: install.data (task.view="Cluster")
In-Reply-To: <CAB8pepz+LyhWg=9eN0qpdg1_Msw5=tz3xNro7yPcGv-Oeo_vzA@mail.gmail.com>
References: <CAB8pepz+LyhWg=9eN0qpdg1_Msw5=tz3xNro7yPcGv-Oeo_vzA@mail.gmail.com>
Message-ID: <338f96cf-fa6f-64fa-9db8-7f03874c3755@gmail.com>

On 28/10/2018 5:08 PM, Abs Spurdle wrote:
> Hi
> 
> I wish that it was possible to install datasets from R packages
> without installing the rest of the packages.
> Mainly for testing purposes or writing examples.
> 
> Assuming that there's a top level data directory (which there isn't):
>> install.data (package=c ("s20x", "R330") )
> 
> Which would install all datasets from the s20x and R330 packages,
> without installing the complete packages, with some form of
> documentation and presumably with license info.
> 
> Or:
>> install.data (task.view="Cluster")
> 
> Which would install all the datasets from the Cluster task view, again
> without installing the complete packages, with some form of
> documentation and presumably with license info.
> 
> Documentation could be the Rd files or a reduced form of the pdf/html
> files, covering the datasets only.
> 
> Also, it would be good to have search tools too.
>> search.data (task.view="Cluster", keyword="something", all.Rd.fields=TRUE, condition="n.numeric.vars >= 3")
> 
> Which would return a list of datasets from the Cluster task view with
> keyword "something" (from anywhere in the Rd file) and 3 or more
> numeric variables, including info on the (dataset) name, package
> (name), license, header, dimensions and possibly description.
> 
> Obviously, these functions would not be part of CRAN itself, however,
> CRAN would need to store packages in a different way for this to work.
> 
> Unless I'm missing something?

This is something you should write yourself.  Do it by downloading the 
package, unpacking it, then extracting the data.  I suspect everything 
you need is already built into R, in the code that installs a package. 
You just need to rewrite it to do much less.

You shouldn't ask CRAN to do it, they've got enough on their plates.

Duncan Murdoch


From devnexen @ending from gm@il@com  Mon Oct 29 00:34:14 2018
From: devnexen @ending from gm@il@com (David CARLIER)
Date: Sun, 28 Oct 2018 23:34:14 +0000
Subject: [Rd] Little memory leak fix
Message-ID: <CA+XhMqxdDV2eaS8S3dsVqhWdHn2ce1PE9x5Vhz7kX7xS9PbJ1Q@mail.gmail.com>

Hi dear list,

Here a little memory leak fix proposal.

Kind regards.
Thanks.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch-extra-tre-regexec_c.diff
Type: text/x-patch
Size: 752 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181028/b16f6756/attachment.bin>

From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Mon Oct 29 09:57:50 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Mon, 29 Oct 2018 08:57:50 +0000
Subject: [Rd] disappearing paragraphs in html rendering of text from Rd
 macros
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F6BB2F1@MBXP01.ds.man.ac.uk>

Recent changes in R-devel seem to change the HTML rendering of text returned by Rd macros,
in that now empty lines do not cause paragraphs to end (the empty lines are kept but <p> tags are not set).
As a result, multiple paragraphs are output as a single one.

A complete example Rd file is at: https://github.com/GeoBosh/reprexes/blob/master/disappearingParagraphs/a.Rd

rendered (2018-10-28) with R-devel: https://github.com/GeoBosh/reprexes/blob/master/disappearingParagraphs/a.html 

and R-3.5.1patched: https://github.com/GeoBosh/reprexes/blob/master/disappearingParagraphs/a351.html 

The exact system information used for rendering is in the above html files. 

In essence, the following:

\newcommand{\abc}{\Sexpr[stage=build,results=rd]{paste0(letters[1:4], collapse = "\n\n")}}

produces in R-devel something like 

<p>a

b

c

d</p>

where the empty lines may be distorted in this email, while in R-3.5.1 the empty lines cause paragraph tags around each chunk:

<p>a</p>

<p>b</p>

<p>c</p>

<p>d</p>

Directly embedding the Sexpr in the Rd file also produces all <p> tags in R-devel and R-3.5.1patched.,

---

Georgi Boshnakov


From m@echler @ending from @t@t@m@th@ethz@ch  Tue Oct 30 12:06:06 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 30 Oct 2018 12:06:06 +0100
Subject: [Rd] disappearing paragraphs in html rendering of text from Rd
 macros
In-Reply-To: <438D2EC9EAFE5946B2D5864670EA468E018F6BB2F1@MBXP01.ds.man.ac.uk>
References: <438D2EC9EAFE5946B2D5864670EA468E018F6BB2F1@MBXP01.ds.man.ac.uk>
Message-ID: <23512.15134.227766.18547@stat.math.ethz.ch>

>>>>> Georgi Boshnakov 
>>>>>     on Mon, 29 Oct 2018 08:57:50 +0000 writes:

> Recent changes in R-devel seem to change the HTML rendering of text returned by Rd macros,
> in that now empty lines do not cause paragraphs to end (the empty lines are kept but <p> tags are not set).
> As a result, multiple paragraphs are output as a single one.

> A complete example Rd file is at: https://github.com/GeoBosh/reprexes/blob/master/disappearingParagraphs/a.Rd

> rendered (2018-10-28) with R-devel: https://github.com/GeoBosh/reprexes/blob/master/disappearingParagraphs/a.html 

> and R-3.5.1patched: https://github.com/GeoBosh/reprexes/blob/master/disappearingParagraphs/a351.html 

[..................]

> Georgi Boshnakov

Thank you.  I can reproduce what you report, thanks to your
'reprex', and will have a look in order to fix this regression
in R-devel.

Martin Maechler


From henrik@bengt@@on @ending from gm@il@com  Wed Oct 31 03:51:49 2018
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Tue, 30 Oct 2018 19:51:49 -0700
Subject: [Rd] PATCH: Asserting that 'connection' used has not changed +
 R_GetConnection2()
Message-ID: <CAFDcVCQw6Cfus+sSi5ttk9cVwkwUbHwaA_Lr3EtBvW_ynry4HA@mail.gmail.com>

SUMMARY:

I'm proposing that R assert that 'connection' options have not changed
since first created such that R will produce the following error:

> fh <- file("a.txt", open = "w+")
> cat("hello\n", file = fh)
> close(fh)

> fh2 <- file("b.txt", open = "w+")
> cat("world\n", file = fh2)

> cat("hello again\n", file = fh)
Error in cat("hello again\n", file = fh) :
  invalid connection (non-existing 'conn_id')

Note that, currently in R, the latter silently writes to 'b.txt' - not
'a.txt' (for more details, see
https://github.com/HenrikBengtsson/Wishlist-for-R/issues/81).


BACKGROUND:

In R, connections are indexed by their (zero-based) row indices in the
table of available connections.  For example,

> fh <- file("a.txt", open = "w")
> showConnections(all = TRUE)
  description class      mode text   isopen   can read can write
0 "stdin"     "terminal" "r"  "text" "opened" "yes"    "no"
1 "stdout"    "terminal" "w"  "text" "opened" "no"     "yes"
2 "stderr"    "terminal" "w"  "text" "opened" "no"     "yes"
3 "a.txt"     "file"     "w"  "text" "opened" "no"     "yes"
> con <- getConnection(3)
> identical(con, fh)
[1] TRUE


ISSUE:

The problem with the current design/implementation where connections
are referred to by their index (only), is that

(i) the table of connections changes over time and
(ii) connection indices are recycled.

Because a `connection` object holds the connection row index, it means
that *the actual underlying connection that a `connection` object
refers to may change over its lifetime*.


SUGGESTION:

Make use of the 'Rconn' struct field 'id', which is unique, to assert
that the 'connection' object used is referring to the
original/expected connection.  The 'id' field is available via
attribute 'conn_id' part of a 'connection' object.


PATCH:

See attached 'connection.patch' file (or
https://github.com/HenrikBengtsson/Wishlist-for-R/issues/81#issuecomment-434210222).
The patch introduces a new SEXP R_GetConnection2(SEXP sConn) function,
which looks up a connection by its index *and* the 'id' field. This
function is backward compatible with R_GetConnection(), which looks up
a connection by its index (only). In addition, R_GetConnection2() also
accepts 'sConn' of type integer, which the looks up the connection
similar to how the internal getConnection() function does it.

Comment: The patch is just one of many alternatives.  Hopefully, it
helps clarify what I'm suggesting.  It passes 'make check' and I've
tested it on a few packages of mine that make heavy use of different
types of connections.

In addition to "overridden" connections, the patch protects against
invalid 'connection':s that have been serialized, e.g.

> fh2 <- file("b.txt", open = "w+")
> saveRDS(fh2, file = "fh2.rds")
> fh3 <- readRDS("fh2.rds")
> attr(fh2, "conn_id")
<pointer: 0x78>
> attr(fh3, "conn_id")
<pointer: (nil)>  #<== NIL because external pointer was lost when serialized
> isOpen(fh2)
[1] TRUE
> isOpen(fh3)
Error in isOpen(fh3) : invalid connection ('conn_id' is NULL)

This is useful, when for instance 'connection':s are (incorrectly)
passed to background R sessions (e.g. PSOCK cluster nodes).


SEE ALSO:

* More details of the above are scribbled down on
https://github.com/HenrikBengtsson/Wishlist-for-R/issues/81
* R-devel post 'closeAllConnections() can really mess things up',
2016-10-30, https://stat.ethz.ch/pipermail/r-devel/2016-October/073331.html

All the best,

Henrik

-------------- next part --------------
A non-text attachment was scrubbed...
Name: connections.patch
Type: text/x-patch
Size: 15539 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20181030/d2a946b2/attachment.bin>

From jo@h@m@ulrich @ending from gm@il@com  Wed Oct 31 12:30:20 2018
From: jo@h@m@ulrich @ending from gm@il@com (Joshua Ulrich)
Date: Wed, 31 Oct 2018 06:30:20 -0500
Subject: [Rd] Proposal: Internal as.Date.POSIXct()
Message-ID: <CAPPM_gRkxV+V9hnK+1FKv131xEsL2wOh5O9gG81ZejMYCcOXDQ@mail.gmail.com>

I would like to propose a .Internal() POSIXct2Date() function, similar
to do_POSIXlt2D() in src/main/datetime.c.  I created a working
prototype, which is now included in Dirk Eddelbuettel's RApiDatetime
package:

https://github.com/eddelbuettel/rapidatetime

This prototype is a combination of asPOSIXlt and POSIXlt2D from R
Core.  The functions are essentially concatenated, with the extraneous
parts removed.  Directly converting from POSIXct to Date uses less
memory and is roughly twice as fast.

You can find the relevant bits in the commit on GitHub:
https://github.com/eddelbuettel/rapidatetime/commit/6bc9320451fb1e62d53b5012d33acf538c0f50c6#diff-7df5c1a674e930a4d93ba45f3ce0aaaf

Would someone on R Core be interested in adding this function?  If so,
I can create a patch that includes all the necessary code additions
needed to make it a .Internal() function.

Thanks for your consideration!

Best,
Josh

-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2018 | www.rinfinance.com


