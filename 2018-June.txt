From tom@@@k@liber@ @ending from gm@il@com  Fri Jun  1 11:33:29 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Fri, 1 Jun 2018 11:33:29 +0200
Subject: [Rd] user macros with multi-line arguments in Rd (was Re: Rd parser
 throws error for user macros invoked with empty argument)
In-Reply-To: <438D2EC9EAFE5946B2D5864670EA468E018F65AF5A@MBXP01.ds.man.ac.uk>
References: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>
 <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>
 <438D2EC9EAFE5946B2D5864670EA468E018F65AF5A@MBXP01.ds.man.ac.uk>
Message-ID: <8f8a37aa-8461-1419-86e3-ae3b23e41b23@gmail.com>

Thanks for the report, I am testing a patch that will allow multi-line 
arguments to user macros.

Best
Tomas

On 05/25/2018 04:45 PM, Georgi Boshnakov wrote:
> While on the topic of Rd macro arguments, it seems that  if a multiline argument is supplied, the lines after the first are silently ignored:
>
> f <- tempfile()
> mac6 <- "\\newcommand{\\mac6}{mac6: #1}"
>
> cat(mac6, "\\mac6{2*3
> 2+2
> sin(pi)
> }\n", file = f)
> rd <- tools::parse_Rd(f)
>
>> rd
>   mac6: 2*3
>
> ---
>
> Georgi Boshnakov
>
>
> -----Original Message-----
> From: Tomas Kalibera [mailto:tomas.kalibera at gmail.com]
> Sent: 25 May 2018 10:05
> To: Georgi Boshnakov; r-devel at r-project.org
> Subject: Re: [Rd] Rd parser throws error for user macros invoked with empty argument
>
> Thanks for the report and the examples - and they do not have to be that
> verbose, it is enough to just define and use a command, e.g.
>
> cat("\\newcommand{\\mac1}{MAC1:#1}\\mac1{}", file=f)
> rd <- tools::parse_Rd(f)
>
> Whenever you get an error message like "Value of SET_STRING_ELT() must
> be a 'CHARSXP' not a 'NULL'", there is a bug (at least the error message
> should be relevant/informative).
>
> I am testing a patch that will allow empty arguments to macros (they
> will expand to an empty string, like in LaTeX).
>
> Best
> Tomas
>
> On 05/14/2018 11:23 PM, Georgi Boshnakov wrote:
>> Bug or feature?
>>
>> I get the following error from parse_Rd() when a user Rd macro (including system ones) is invoked with empty argument {},
>> eg \mymacro{}:
>>
>> Error in tools::parse_Rd(fn) :
>>     Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>>
>> A full example is further below with the system macro \CRANpkg{}. In this example it doesn't make sense to use empty argument but the error is not specific to this particular macro.
>>
>> ------
>> Georgi Boshnakov
>>
>>
>> Create an Rd file containing system macro \CRANpkg{bibtex}, parse_Rd() is ok:
>>
>> =================
>> fn <- tempfile()
>> writeLines("\\name{dummyfun}
>> \\alias{dummyfun}
>> \\title{Dummy title}
>> \\description{Dummy description}
>> \\usage{
>> dummyfun(x, ...)
>> }
>> \\arguments{
>>     \\item{x}{a value.}
>>     \\item{\\dots}{further arguments.}
>> }
>> \\details{
>>       \\CRANpkg{bibtex}
>> }
>> ", fn)
>>
>>> tools::parse_Rd(fn)
>> ...
>> \details{
>>       \href{{https://CRAN.R-project.org/package=bibtex}{\pkg{bibtex}}}
>> }
>>
>> ================
>>
>> With empty argument - \CRANpkg{} - Rd parser throws error. Of course it is silly in this example but I have used it with other user defined  macros where it may make sense to have empty argument.
>>
>> ================
>>> writeLines("\\name{dummyfun}
>> \\alias{dummyfun}
>> \\title{Dummy title}
>> \\description{Dummy description}
>> \\usage{
>> dummyfun(x, ...)
>> }
>> \\arguments{
>>     \\item{x}{a value.}
>>     \\item{\\dots}{further arguments.}
>> }
>> \\details{
>>       \\CRANpkg{}
>> }
>> ", fn)
>>> tools::parse_Rd(fn)
>> Error in tools::parse_Rd(fn) :
>>     Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From j@@on@@ervi@@ @ending from ki@@e  Fri Jun  1 13:47:54 2018
From: j@@on@@ervi@@ @ending from ki@@e (Jason Serviss)
Date: Fri, 1 Jun 2018 11:47:54 +0000
Subject: [Rd] 
 Understanding the sequence of events when calling the R dpois
 function
In-Reply-To: <7993.1527790129@minshall-apollo.minshall.org>
References: <7993.1527790129@minshall-apollo.minshall.org>
Message-ID: <180A77C1-8279-41C8-8CDF-0C1899DB4DAA@ki.se>

Chuck and Greg,

Thanks a lot for your help! I have a much better understanding now of what is happening ?under the hood?.

Kind Regards,
Jason


> On 31 May 2018, at 20:08, Greg Minshall <minshall at acm.org> wrote:
> 
> Jason,
> 
> as Chuck Berry (to whom, *thanks* for 'do {...} while(0)'!) suggested,
> using grep, or even grep executed from find, such as
> ----
> find . -type f -exec grep -H "dpois" \{\} \; | less
> ----
> (executed from the root of an R source tree), is your friend.
> 
> cheers, Greg


From @tephen@berm@n @ending from gmx@net  Sat Jun  2 15:37:45 2018
From: @tephen@berm@n @ending from gmx@net (Stephen Berman)
Date: Sat, 02 Jun 2018 15:37:45 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
Message-ID: <87muwdl36e.fsf@gmx.net>

In R 3.5.0 using the `encoding' argument of source() prevents loading
files from the internet; without the `encoding' argument files can be
loaded from the internet, but if they contain non-ascii characters,
these are not correctly displayed under MS-Windows (but they are
correctly displayed under GNU/Linux).  With R 3.4.{2,3,4} there is no
such problem: using `encoding' the files are loaded and non-ascii
characters are correctly displayed under MS-Windows (but not without
`encoding').  Here is a transcript from R 3.5.0 under GNU/Linux (the
URLs are real, in case anyone wants to try and reproduce the problem):

> ls()
character(0)
> source("http://home.versanet.de/~s-berman/source1.R", encoding="UTF-8")
> ls()
character(0)
> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
> ls()
character(0)
> source("http://home.versanet.de/~s-berman/source1.R")
> ls()
[1] "source.test1"
> source("http://home.versanet.de/~s-berman/source2.R")
> ls()
[1] "source.test1" "source.test2"
> source.test1()
[1] "This is a test."
> source.test2()
[1] "Non-ascii: ????"

(The four non-ascii characters are Unicode 0xE4, 0xF6, 0xFC, 0xDF.)
With 3.5.0 under MS-Windows, the transcript is the same except for the
display of the last output, which is this:

[1] "Non-ascii: ????????"

(Here there are eight non-ascii characters, which display the Unicode
decompositions of the four non-ascii characters above.)

Here is a transcript from R 3.4.3 under MS-Windows (under GNU/Linux it's
the same except that the non-ascii characters are also correctly
displayed even without the `encoding' argument):

> ls()
character(0)
> source("http://home.versanet.de/~s-berman/source1.R")
> ls()
[1] "source.test1"
> source("http://home.versanet.de/~s-berman/source2.R")
> ls()
[1] "source.test1" "source.test2"
> source.test1()
[1] "This is a test."
> source.test2()
[1] "Non-ascii: ????????"
> rm(source.test2)
> ls()
[1] "source.test1"
> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
> ls()
[1] "source.test1" "source.test2"
> source.test2()
[1] "Non-ascii: ????"

I did a web search but didn't find any reports of this issue, nor did I
see any relevant entry in the 3.5.0 NEWS, so this looks like a bug, but
maybe I've overlooked something.  I'd be grateful for any enlightenment.

Steve Berman


From bbolker @ending from gm@il@com  Sun Jun  3 23:33:18 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Sun, 3 Jun 2018 17:33:18 -0400
Subject: [Rd] aic() component in GLM-family objects
Message-ID: <bfa1a750-46c3-efd2-619c-8dcb155e6f86@mcmaster.ca>


  Is it generally known/has it been previously discussed here that the
$aic() component in GLM-family objects (e.g. results of binomial(),
poisson(), etc.) does not as implemented actually return the AIC, but
rather -2*log-likelihood + 2*(model_has_scale_parameter) ?  Can anyone
in this forum gauge how a documentation patch would be received?

This behaviour does not seem to be documented in ?family (or anywhere
else I can find), which says:

  aic: function giving the AIC value if appropriate (but ?NA? for
          the quasi- families).  See ?logLik? for the assumptions made
          about the dispersion parameter.

For a demonstration that e.g. binomial()$aic() is really -2*log L and
not the AIC, see:

https://github.com/wch/r-source/blob/trunk/src/library/stats/R/family.R#L317

This document
  <https://github.com/lme4/lme4/blob/master/misc/notes/deviance.rmd>
explicates the details a bit more ('L' denotes log-likelihood):

   * family()$aic computes $-2L$, which glm.fit translates to an AIC by
adding $2k$ and storing it in model$aic
   * logLik.default retrieves model$aic and converts it back to a
log-likelihood
   * stats:::AIC.default retrieves the log-likelihood and converts it
back to an AIC (!)
   * family()$dev.resid() computes the squared deviance residuals
   * stats:::residuals.glm retrieves these values and takes the signed
square root

  cheers
    Ben Bolker


From pd@lgd @ending from gm@il@com  Sun Jun  3 23:51:24 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Sun, 3 Jun 2018 23:51:24 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <87muwdl36e.fsf@gmx.net>
References: <87muwdl36e.fsf@gmx.net>
Message-ID: <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>

Looks like this actually comes from readLines(), nothing to do with source() as such:

In current R-devel (still):

> f <- file("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
> readLines(f)
character(0)
> close(f)
> f <- file("http://home.versanet.de/~s-berman/source2.R")
> readLines(f)
[1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
[3] "}"                             

-pd

> On 2 Jun 2018, at 15:37 , Stephen Berman <stephen.berman at gmx.net> wrote:
> 
> In R 3.5.0 using the `encoding' argument of source() prevents loading
> files from the internet; without the `encoding' argument files can be
> loaded from the internet, but if they contain non-ascii characters,
> these are not correctly displayed under MS-Windows (but they are
> correctly displayed under GNU/Linux).  With R 3.4.{2,3,4} there is no
> such problem: using `encoding' the files are loaded and non-ascii
> characters are correctly displayed under MS-Windows (but not without
> `encoding').  Here is a transcript from R 3.5.0 under GNU/Linux (the
> URLs are real, in case anyone wants to try and reproduce the problem):
> 
>> ls()
> character(0)
>> source("http://home.versanet.de/~s-berman/source1.R", encoding="UTF-8")
>> ls()
> character(0)
>> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>> ls()
> character(0)
>> source("http://home.versanet.de/~s-berman/source1.R")
>> ls()
> [1] "source.test1"
>> source("http://home.versanet.de/~s-berman/source2.R")
>> ls()
> [1] "source.test1" "source.test2"
>> source.test1()
> [1] "This is a test."
>> source.test2()
> [1] "Non-ascii: ????"
> 
> (The four non-ascii characters are Unicode 0xE4, 0xF6, 0xFC, 0xDF.)
> With 3.5.0 under MS-Windows, the transcript is the same except for the
> display of the last output, which is this:
> 
> [1] "Non-ascii: ????????"
> 
> (Here there are eight non-ascii characters, which display the Unicode
> decompositions of the four non-ascii characters above.)
> 
> Here is a transcript from R 3.4.3 under MS-Windows (under GNU/Linux it's
> the same except that the non-ascii characters are also correctly
> displayed even without the `encoding' argument):
> 
>> ls()
> character(0)
>> source("http://home.versanet.de/~s-berman/source1.R")
>> ls()
> [1] "source.test1"
>> source("http://home.versanet.de/~s-berman/source2.R")
>> ls()
> [1] "source.test1" "source.test2"
>> source.test1()
> [1] "This is a test."
>> source.test2()
> [1] "Non-ascii: ????????"
>> rm(source.test2)
>> ls()
> [1] "source.test1"
>> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>> ls()
> [1] "source.test1" "source.test2"
>> source.test2()
> [1] "Non-ascii: ????"
> 
> I did a web search but didn't find any reports of this issue, nor did I
> see any relevant entry in the 3.5.0 NEWS, so this looks like a bug, but
> maybe I've overlooked something.  I'd be grateful for any enlightenment.
> 
> Steve Berman
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Jun  4 10:44:11 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 4 Jun 2018 10:44:11 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
Message-ID: <23316.64475.313034.26156@stat.math.ethz.ch>

>>>>> peter dalgaard 
>>>>>     on Sun, 3 Jun 2018 23:51:24 +0200 writes:

    > Looks like this actually comes from readLines(), nothing
    > to do with source() as such: In current R-devel (still):

    >> f <- file("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
    >> readLines(f)
    > character(0)
    >> close(f)
    >> f <- file("http://home.versanet.de/~s-berman/source2.R")
    >> readLines(f)
    > [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
    > [3] "}"                             

    > -pd

and that's not even readLines(), but rather how exactly the
connection is defined [even in your example above]

  > urlR <- "http://home.versanet.de/~s-berman/source2.R"
  > readLines(urlR, encoding="UTF-8")
  [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
  [3] "}"                             
  > f <- file(urlR, encoding = "UTF-8")
  > readLines(f)
  character(0)

and the same behavior with scan()  instead of readLines() :

> scan(urlR,"") # works
Read 7 items
[1] "source.test2"       "<-"                 "function()"         "{" 
[5] "print(\"Non-ascii:" "????\")"            "}" 
> scan(f,"") # fails
Read 0 items
character(0)
> 

So it seems as if the bug is in the file() [or url()] C code ..
But then we also have to consider Windows .. where I think most changes have
happened during the  R-3.4.4 --> R-3.5.0  transition.


    >> On 2 Jun 2018, at 15:37 , Stephen Berman <stephen.berman at gmx.net> wrote:
    >> 
    >> In R 3.5.0 using the `encoding' argument of source() prevents loading
    >> files from the internet; without the `encoding' argument files can be
    >> loaded from the internet, but if they contain non-ascii characters,
    >> these are not correctly displayed under MS-Windows (but they are
    >> correctly displayed under GNU/Linux).  With R 3.4.{2,3,4} there is no
    >> such problem: using `encoding' the files are loaded and non-ascii
    >> characters are correctly displayed under MS-Windows (but not without
    >> `encoding').  Here is a transcript from R 3.5.0 under GNU/Linux (the
    >> URLs are real, in case anyone wants to try and reproduce the problem):
    >> 
    >>> ls()
    >> character(0)
    >>> source("http://home.versanet.de/~s-berman/source1.R", encoding="UTF-8")
    >>> ls()
    >> character(0)
    >>> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
    >>> ls()
    >> character(0)
    >>> source("http://home.versanet.de/~s-berman/source1.R")
    >>> ls()
    >> [1] "source.test1"
    >>> source("http://home.versanet.de/~s-berman/source2.R")
    >>> ls()
    >> [1] "source.test1" "source.test2"
    >>> source.test1()
    >> [1] "This is a test."
    >>> source.test2()
    >> [1] "Non-ascii: ????"
    >> 
    >> (The four non-ascii characters are Unicode 0xE4, 0xF6, 0xFC, 0xDF.)
    >> With 3.5.0 under MS-Windows, the transcript is the same except for the
    >> display of the last output, which is this:
    >> 
    >> [1] "Non-ascii: ????????"
    >> 
    >> (Here there are eight non-ascii characters, which display the Unicode
    >> decompositions of the four non-ascii characters above.)
    >> 
    >> Here is a transcript from R 3.4.3 under MS-Windows (under GNU/Linux it's
    >> the same except that the non-ascii characters are also correctly
    >> displayed even without the `encoding' argument):
    >> 
    >>> ls()
    >> character(0)
    >>> source("http://home.versanet.de/~s-berman/source1.R")
    >>> ls()
    >> [1] "source.test1"
    >>> source("http://home.versanet.de/~s-berman/source2.R")
    >>> ls()
    >> [1] "source.test1" "source.test2"
    >>> source.test1()
    >> [1] "This is a test."
    >>> source.test2()
    >> [1] "Non-ascii: ????????"
    >>> rm(source.test2)
    >>> ls()
    >> [1] "source.test1"
    >>> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
    >>> ls()
    >> [1] "source.test1" "source.test2"
    >>> source.test2()
    >> [1] "Non-ascii: ????"
    >> 
    >> I did a web search but didn't find any reports of this issue, nor did I
    >> see any relevant entry in the 3.5.0 NEWS, so this looks like a bug, but
    >> maybe I've overlooked something.  I'd be grateful for any enlightenment.
    >> 
    >> Steve Berman
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > -- 
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@lgd @ending from gm@il@com  Mon Jun  4 11:31:30 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Mon, 4 Jun 2018 11:31:30 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <23316.64475.313034.26156@stat.math.ethz.ch>
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
 <23316.64475.313034.26156@stat.math.ethz.ch>
Message-ID: <6A8446BD-9439-475D-B46C-C444AA9228BB@gmail.com>

It's not Windows-specific, though. My example was on a Mac...

I hope we can sort this out before 3.5.1.

-pd

> On 4 Jun 2018, at 10:44 , Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
> So it seems as if the bug is in the file() [or url()] C code ..
> But then we also have to consider Windows .. where I think most changes have
> happened during the  R-3.4.4 --> R-3.5.0  transition.
> 
> 
>>> On 2 Jun 2018, at 15:37 , Stephen Berman <stephen.berman at gmx.net> wrote:
>>> 
>>> In R 3.5.0 using the `encoding' argument of source() prevents loading
>>> files from the internet; without the `encoding' argument files can be
>>> loaded from the internet, but if they contain non-ascii characters,
>>> these are not correctly displayed under MS-Windows (but they are
>>> correctly displayed under GNU/Linux).  With R 3.4.{2,3,4} there is no
>>> such problem: using `encoding' the files are loaded and non-ascii
>>> characters are correctly displayed under MS-Windows (but not without
>>> `encoding').  Here is a transcript from R 3.5.0 under GNU/Linux (the
>>> URLs are real, in case anyone wants to try and reproduce the problem):
>>> 
>>>> ls()
>>> character(0)
>>>> source("http://home.versanet.de/~s-berman/source1.R", encoding="UTF-8")
>>>> ls()
>>> character(0)
>>>> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>>>> ls()
>>> character(0)
>>>> source("http://home.versanet.de/~s-berman/source1.R")
>>>> ls()
>>> [1] "source.test1"
>>>> source("http://home.versanet.de/~s-berman/source2.R")
>>>> ls()
>>> [1] "source.test1" "source.test2"
>>>> source.test1()
>>> [1] "This is a test."
>>>> source.test2()
>>> [1] "Non-ascii: ????"
>>> 
>>> (The four non-ascii characters are Unicode 0xE4, 0xF6, 0xFC, 0xDF.)
>>> With 3.5.0 under MS-Windows, the transcript is the same except for the
>>> display of the last output, which is this:
>>> 
>>> [1] "Non-ascii: ????????"
>>> 
>>> (Here there are eight non-ascii characters, which display the Unicode
>>> decompositions of the four non-ascii characters above.)
>>> 
>>> Here is a transcript from R 3.4.3 under MS-Windows (under GNU/Linux it's
>>> the same except that the non-ascii characters are also correctly
>>> displayed even without the `encoding' argument):
>>> 
>>>> ls()
>>> character(0)
>>>> source("http://home.versanet.de/~s-berman/source1.R")
>>>> ls()
>>> [1] "source.test1"
>>>> source("http://home.versanet.de/~s-berman/source2.R")
>>>> ls()
>>> [1] "source.test1" "source.test2"
>>>> source.test1()
>>> [1] "This is a test."
>>>> source.test2()
>>> [1] "Non-ascii: ????????"
>>>> rm(source.test2)
>>>> ls()
>>> [1] "source.test1"
>>>> source("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>>>> ls()
>>> [1] "source.test1" "source.test2"
>>>> source.test2()
>>> [1] "Non-ascii: ????"
>>> 
>>> I did a web search but didn't find any reports of this issue, nor did I
>>> see any relevant entry in the 3.5.0 NEWS, so this looks like a bug, but
>>> maybe I've overlooked something.  I'd be grateful for any enlightenment.
>>> 
>>> Steve Berman
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @tephen@berm@n @ending from gmx@net  Mon Jun  4 11:26:33 2018
From: @tephen@berm@n @ending from gmx@net (Stephen Berman)
Date: Mon, 04 Jun 2018 11:26:33 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <23316.64475.313034.26156@stat.math.ethz.ch> (Martin Maechler's
 message of "Mon, 4 Jun 2018 10:44:11 +0200")
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
 <23316.64475.313034.26156@stat.math.ethz.ch>
Message-ID: <87602yc37a.fsf@gmx.net>

On Mon, 4 Jun 2018 10:44:11 +0200 Martin Maechler <maechler at stat.math.ethz.ch> wrote:

>>>>>> peter dalgaard 
>>>>>>     on Sun, 3 Jun 2018 23:51:24 +0200 writes:
>
>     > Looks like this actually comes from readLines(), nothing
>     > to do with source() as such: In current R-devel (still):
>
>     >> f <- file("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>     >> readLines(f)
>     > character(0)
>     >> close(f)
>     >> f <- file("http://home.versanet.de/~s-berman/source2.R")
>     >> readLines(f)
>     > [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
>     > [3] "}"                             
>
>     > -pd
>
> and that's not even readLines(), but rather how exactly the
> connection is defined [even in your example above]
>
>   > urlR <- "http://home.versanet.de/~s-berman/source2.R"
>   > readLines(urlR, encoding="UTF-8")
>   [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
>   [3] "}"                             
>   > f <- file(urlR, encoding = "UTF-8")
>   > readLines(f)
>   character(0)
>
> and the same behavior with scan()  instead of readLines() :
>
>> scan(urlR,"") # works
> Read 7 items
> [1] "source.test2"       "<-"                 "function()"         "{" 
> [5] "print(\"Non-ascii:" "????\")"            "}" 
>> scan(f,"") # fails
> Read 0 items
> character(0)
>> 
>
> So it seems as if the bug is in the file() [or url()] C code ..

Yes, the problem seems to be restricted to loading files from a
(non-local) URL; i.e. this works fine on my computer:

  > source("file:///home/steve/prog/R/source2.R", encoding="UTF-8")

Also, I noticed this works too:

  > read.table("http://home.versanet.de/~s-berman/table2", encoding="UTF-8", skip=1)

where (if I read the source correctly) using `skip=1' makes read.table()
call readLines().  (The read.table() invocation also works without
`skip'.)

> But then we also have to consider Windows .. where I think most changes have
> happened during the  R-3.4.4 --> R-3.5.0  transition.

Yes, please.  I need (or at least it would be convenient) to be able to
load R code containing non-ascii characters from the web under
MS-Windows.

Steve Berman


From mnel@ @ending from doh@he@lth@n@w@gov@@u  Mon Jun  4 14:41:06 2018
From: mnel@ @ending from doh@he@lth@n@w@gov@@u (NELSON, Michael)
Date: Mon, 4 Jun 2018 12:41:06 +0000
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <87602yc37a.fsf@gmx.net>
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
 <23316.64475.313034.26156@stat.math.ethz.ch>,<87602yc37a.fsf@gmx.net>
Message-ID: <D10658826EC4E24A903AC423BC06BAF70260170B5A@DOHNSMXDB02.doh.health.nsw.gov.au>



On R 3.5.0 (Mac) 

The issue appears when using the default (libcurl) method and specifying the encoding

Note that using method='internal' causes a segfault if used in conjunction with encoding. (and works when encoding is not set)

urlR <- "http://home.versanet.de/~s-berman/source2.R"
# works 
url_default <- url(urlR)
scan(url_default, "")
# Read 7 items
# [1] "source.test2"       "<-"                 "function()"         "{"                  "print(\"Non-ascii:" "????\")"           
# [7] "}"                 

url_default_en <- url(urlR, encoding = "UTF-8")
scan(url_default_en, "")
# Read 0 items
# character(0)
url_internal <- url(urlR, method = 'internal')
scan(url_internal, "")
# Read 7 items
# [1] "source.test2"       "<-"                 "function()"         "{"                  "print(\"Non-ascii:" "????\")"           
# [7] "}"                 

url_internal_en <- url(urlR, encoding = "UTF-8", method = 'internal')
#scan(url_internal_en, "")
#*** caught segfault ***
#  address 0x0, cause 'memory not mapped'

url_libcurl <- url(urlR, method = 'libcurl')
scan(url_libcurl, "")
# Read 7 items
# [1] "source.test2"       "<-"                 "function()"         "{"                  "print(\"Non-ascii:" "????\")"           
# [7] "}" 
url_libcurl_en <- url(urlR, encoding = "UTF-8", method = 'libcurl')
scan(url_libcurl_en, "")
# Read 0 items
# character(0)


Michael

________________________________________
From: R-devel [r-devel-bounces at r-project.org] on behalf of Stephen Berman [stephen.berman at gmx.net]
Sent: Monday, 4 June 2018 7:26 PM
To: Martin Maechler
Cc: R-devel
Subject: Re: [Rd] encoding argument of source() in 3.5.0

On Mon, 4 Jun 2018 10:44:11 +0200 Martin Maechler <maechler at stat.math.ethz.ch> wrote:

>>>>>> peter dalgaard
>>>>>>     on Sun, 3 Jun 2018 23:51:24 +0200 writes:
>
>     > Looks like this actually comes from readLines(), nothing
>     > to do with source() as such: In current R-devel (still):
>
>     >> f <- file("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>     >> readLines(f)
>     > character(0)
>     >> close(f)
>     >> f <- file("http://home.versanet.de/~s-berman/source2.R")
>     >> readLines(f)
>     > [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
>     > [3] "}"
>
>     > -pd
>
> and that's not even readLines(), but rather how exactly the
> connection is defined [even in your example above]
>
>   > urlR <- "http://home.versanet.de/~s-berman/source2.R"
>   > readLines(urlR, encoding="UTF-8")
>   [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
>   [3] "}"
>   > f <- file(urlR, encoding = "UTF-8")
>   > readLines(f)
>   character(0)
>
> and the same behavior with scan()  instead of readLines() :
>
>> scan(urlR,"") # works
> Read 7 items
> [1] "source.test2"       "<-"                 "function()"         "{"

> [5] "print(\"Non-ascii:" "????\")"            "}"
>> scan(f,"") # fails
> Read 0 items
> character(0)
>>
>
> So it seems as if the bug is in the file() [or url()] C code ..

Yes, the problem seems to be restricted to loading files from a
(non-local) URL; i.e. this works fine on my computer:

  > source("file:///home/steve/prog/R/source2.R", encoding="UTF-8")

Also, I noticed this works too:

  > read.table("http://home.versanet.de/~s-berman/table2", encoding="UTF-8", skip=1)

where (if I read the source correctly) using `skip=1' makes read.table()
call readLines().  (The read.table() invocation also works without
`skip'.)

> But then we also have to consider Windows .. where I think most changes have
> happened during the  R-3.4.4 --> R-3.5.0  transition.

Yes, please.  I need (or at least it would be convenient) to be able to
load R code containing non-ascii characters from the web under
MS-Windows.

Steve Berman

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel
__________________________________________________________________________________________________________
This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
Emails and attachments are monitored to ensure compliance with the NSW Ministry of health's Electronic Messaging Policy.
__________________________________________________________________________________________________________

_______________________________________________________________________________________________________
Disclaimer: This message is intended for the addressee named and may contain confidential information.
If you are not the intended recipient, please delete it and notify the sender.
Views expressed in this message are those of the individual sender, and are not necessarily the views of the NSW Ministry of Health.
_______________________________________________________________________________________________________
This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
Emails and attachments are monitored to ensure compliance with the NSW Ministry of Health's Electronic Messaging Policy.


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Jun  4 16:46:57 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 4 Jun 2018 16:46:57 +0200
Subject: [Rd] aic() component in GLM-family objects
In-Reply-To: <bfa1a750-46c3-efd2-619c-8dcb155e6f86@mcmaster.ca>
References: <bfa1a750-46c3-efd2-619c-8dcb155e6f86@mcmaster.ca>
Message-ID: <23317.20705.579932.679153@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Sun, 3 Jun 2018 17:33:18 -0400 writes:

    > Is it generally known/has it been previously discussed here that the
    > $aic() component in GLM-family objects (e.g. results of binomial(),
    > poisson(), etc.) does not as implemented actually return the AIC, but
    > rather -2*log-likelihood + 2*(model_has_scale_parameter) ?

This rings a faint bell from the last millennium with me,
and the following "fortune"  may contain the answer implicitly :

------------------------------------------------------------
  > if(!require("fortunes")) install.packages("fortunes")
  > fortune("bug compatib")

  For quite a while, bug-for-bug compatibility with S-PLUS v 3.x was considered
  important to allow people to port their packages between systems.
     -- Peter Dalgaard
	R-help (February 2009)
  > 
------------------------------------------------------------

Ideally, readers who still have access to a version of S-PLUS / S+
or who have read and internalized or (even co-written !)
"The white book", notably Ch.6, may be able to shed a historic
light on this.

I note that the white book's Appendix B with function help
pages, has a page ?family.object,  accessible here
   https://sites.oxy.edu/lengyel/M150/Sueselbeck/helpfiles/family.object.html

which does *not* mention a  <fam>$dev.resid() component, but instead
allows to use  <fam>$residuals(*, residuals=TRUE)
get the
"
  vector of deviance residual, whose weighted sum of
  squares is the deviance
"

Given the above, and also the ?glm entry

|| Author(s):
|| 
||      The original R implementation of ?glm? was written by Simon Davies
||      working for Ross Ihaka at the University of Auckland, but has
||      since been extensively re-written by members of the R Core team.
|| 
||      The design was inspired by the S function of the same name
||      described in Hastie & Pregibon (1992).

actually suggest that it may be hard nowadays to find the
original "design specs" that Simon and Ross had used at the
time, and also that they only were _inspired_ by the white book
chapter 6 (= Hastie & Pregibon (1992)).



    > Can anyone in this forum gauge how a documentation patch
    > would be received?

It depends on further answers to your questions (i.e, this
thread), but I'd currently say  "gratefully".
I'd expect it would be a patch mainly to
  src/library/stats/man/family.Rd

Note that help(AIC) has a non-small 'Details' section, but
indeed it does not mention the family(*)$aic function.

    > This behaviour does not seem to be documented in ?family (or anywhere
    > else I can find), which says:

    > aic: function giving the AIC value if appropriate (but ?NA? for
    > the quasi- families).  See ?logLik? for the assumptions made
    > about the dispersion parameter.


    > For a demonstration that e.g. binomial()$aic() is really -2*log L and
    > not the AIC, see:

    > https://github.com/wch/r-source/blob/trunk/src/library/stats/R/family.R#L317

    > This document
    > <https://github.com/lme4/lme4/blob/master/misc/notes/deviance.rmd>
    > explicates the details a bit more ('L' denotes log-likelihood):

    > * family()$aic computes $-2L$, which glm.fit translates to an AIC by
    >   adding $2k$ and storing it in model$aic
    > * logLik.default retrieves model$aic and converts it back to a
    >   log-likelihood
    > * stats:::AIC.default retrieves the log-likelihood and converts it
    >   back to an AIC (!)
    > * family()$dev.resid() computes the squared deviance residuals
    > * stats:::residuals.glm retrieves these values and takes the signed
    >   square root

    > cheers
    > Ben Bolker


From edd @ending from debi@n@org  Mon Jun  4 17:14:14 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Mon, 4 Jun 2018 10:14:14 -0500
Subject: [Rd] Byte-compilation failure on different architectures /
 low-memory systems
Message-ID: <23317.22342.150301.768151@rob.eddelbuettel.com>


As you may know, I look after the R package for Debian. My fellow Debianers
make me follow a specific protocol -- a so-called "transition" in which all
dependent packages on an identified potential breakge are rebuilt under the
new (potentially breaking) change. We started adding an r-api-3.4 tag last
(major) release. Now it is r-api-3.5 and the transition got started with the
green light from the release team last Friday.

Now one build failure occurred for one of the (old, effectively litte
maintained) RMetrics packages: fBasics. It blows up at the byte-compilation
step on at least four (older, smaller) architectures: mips, mipsel, arm64
(ubuntu), ppc64el.  More at https://bugs.debian.org/900756 where we also
worked out the "solution" of suppressing byte-compilation at installation.

Luke, Tomas, ...: Would it help you to get access to such hardware?

We may get you some sort of "guest pass" access to porter machines. Else I
could try but I have my hands plenty full with the transition (having built
[and finally transferred to our Debian Gitlab instance] 20+ package during
day two of R/Finance...).

Cheers, Dirk

PS I CC'ed the bug report, if any follow-up keep the CC it gets logged there.

PPS Happy to discuss / help off-list too, of course.

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From hugh@p@r@on@ge @ending from gm@il@com  Mon Jun  4 18:34:02 2018
From: hugh@p@r@on@ge @ending from gm@il@com (Hugh Parsonage)
Date: Tue, 5 Jun 2018 02:34:02 +1000
Subject: [Rd] Byte-compilation failure on different architectures /
 low-memory systems
In-Reply-To: <23317.22342.150301.768151@rob.eddelbuettel.com>
References: <23317.22342.150301.768151@rob.eddelbuettel.com>
Message-ID: <CAJmOi+M_9=mZpGgy+3xnzFesf=GvJcnuxuUnLq+Enpq+s__Vsw@mail.gmail.com>

I believe a reproducible example is to simply have a very large object
defined literally (i.e. through structure() etc) in ./R/ . For
example, fBasics has a couple of files test-jbLM.R and test-jbTable.R
which are about 500 KB. For a given amount of RAM, I believe any
sufficiently large file will also break a package if byte compilation
is not turned off, regardless of architecture. A similar issue
occurred with package ddalpha, though the maintainer has since fixed
that I believe.

On 5 June 2018 at 01:14, Dirk Eddelbuettel <edd at debian.org> wrote:
>
> As you may know, I look after the R package for Debian. My fellow Debianers
> make me follow a specific protocol -- a so-called "transition" in which all
> dependent packages on an identified potential breakge are rebuilt under the
> new (potentially breaking) change. We started adding an r-api-3.4 tag last
> (major) release. Now it is r-api-3.5 and the transition got started with the
> green light from the release team last Friday.
>
> Now one build failure occurred for one of the (old, effectively litte
> maintained) RMetrics packages: fBasics. It blows up at the byte-compilation
> step on at least four (older, smaller) architectures: mips, mipsel, arm64
> (ubuntu), ppc64el.  More at https://bugs.debian.org/900756 where we also
> worked out the "solution" of suppressing byte-compilation at installation.
>
> Luke, Tomas, ...: Would it help you to get access to such hardware?
>
> We may get you some sort of "guest pass" access to porter machines. Else I
> could try but I have my hands plenty full with the transition (having built
> [and finally transferred to our Debian Gitlab instance] 20+ package during
> day two of R/Finance...).
>
> Cheers, Dirk
>
> PS I CC'ed the bug report, if any follow-up keep the CC it gets logged there.
>
> PPS Happy to discuss / help off-list too, of course.
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Mon Jun  4 20:06:35 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 4 Jun 2018 20:06:35 +0200
Subject: [Rd] Byte-compilation failure on different architectures /
 low-memory systems
In-Reply-To: <23317.22342.150301.768151@rob.eddelbuettel.com>
References: <23317.22342.150301.768151@rob.eddelbuettel.com>
Message-ID: <2ff56f05-bb12-3813-d7c7-347931e731c7@gmail.com>

Hi Dirk,

thanks for the report. Access to the test system is not necessary, the 
memory requirements of the byte-code compiler are usually 
platform-independent and specifically with this package I can reproduce 
they are very high. We'll have a look what we can do, certainly there 
should at least be a way to recover and use the uncompiled version when 
memory allocation fails, this is already done by the JIT but not when 
compiling during installation. Before R or the package is patched, the 
only workaround for memory constrained systems is probably to disable 
byte-compilation of this package, as I read you are doing already.

Best
Tomas

On 06/04/2018 05:14 PM, Dirk Eddelbuettel wrote:
> As you may know, I look after the R package for Debian. My fellow Debianers
> make me follow a specific protocol -- a so-called "transition" in which all
> dependent packages on an identified potential breakge are rebuilt under the
> new (potentially breaking) change. We started adding an r-api-3.4 tag last
> (major) release. Now it is r-api-3.5 and the transition got started with the
> green light from the release team last Friday.
>
> Now one build failure occurred for one of the (old, effectively litte
> maintained) RMetrics packages: fBasics. It blows up at the byte-compilation
> step on at least four (older, smaller) architectures: mips, mipsel, arm64
> (ubuntu), ppc64el.  More at https://bugs.debian.org/900756 where we also
> worked out the "solution" of suppressing byte-compilation at installation.
>
> Luke, Tomas, ...: Would it help you to get access to such hardware?
>
> We may get you some sort of "guest pass" access to porter machines. Else I
> could try but I have my hands plenty full with the transition (having built
> [and finally transferred to our Debian Gitlab instance] 20+ package during
> day two of R/Finance...).
>
> Cheers, Dirk
>
> PS I CC'ed the bug report, if any follow-up keep the CC it gets logged there.
>
> PPS Happy to discuss / help off-list too, of course.
>


From tom@@@k@liber@ @ending from gm@il@com  Mon Jun  4 22:28:53 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 4 Jun 2018 22:28:53 +0200
Subject: [Rd] 
 user macros with multi-line arguments in Rd (was Re: Rd parser
 throws error for user macros invoked with empty argument)
In-Reply-To: <8f8a37aa-8461-1419-86e3-ae3b23e41b23@gmail.com>
References: <438D2EC9EAFE5946B2D5864670EA468E018F659ED0@MBXP01.ds.man.ac.uk>
 <36099164-4dc8-0153-1210-960f6d6dd277@gmail.com>
 <438D2EC9EAFE5946B2D5864670EA468E018F65AF5A@MBXP01.ds.man.ac.uk>
 <8f8a37aa-8461-1419-86e3-ae3b23e41b23@gmail.com>
Message-ID: <d14c92bf-dcf2-48e5-a6bf-906f9799a4b4@gmail.com>

Now in R-devel,

Best,
Tomas

On 06/01/2018 11:33 AM, Tomas Kalibera wrote:
> Thanks for the report, I am testing a patch that will allow multi-line 
> arguments to user macros.
>
> Best
> Tomas
>
> On 05/25/2018 04:45 PM, Georgi Boshnakov wrote:
>> While on the topic of Rd macro arguments, it seems that? if a 
>> multiline argument is supplied, the lines after the first are 
>> silently ignored:
>>
>> f <- tempfile()
>> mac6 <- "\\newcommand{\\mac6}{mac6: #1}"
>>
>> cat(mac6, "\\mac6{2*3
>> 2+2
>> sin(pi)
>> }\n", file = f)
>> rd <- tools::parse_Rd(f)
>>
>>> rd
>> ? mac6: 2*3
>>
>> ---
>>
>> Georgi Boshnakov
>>
>>
>> -----Original Message-----
>> From: Tomas Kalibera [mailto:tomas.kalibera at gmail.com]
>> Sent: 25 May 2018 10:05
>> To: Georgi Boshnakov; r-devel at r-project.org
>> Subject: Re: [Rd] Rd parser throws error for user macros invoked with 
>> empty argument
>>
>> Thanks for the report and the examples - and they do not have to be that
>> verbose, it is enough to just define and use a command, e.g.
>>
>> cat("\\newcommand{\\mac1}{MAC1:#1}\\mac1{}", file=f)
>> rd <- tools::parse_Rd(f)
>>
>> Whenever you get an error message like "Value of SET_STRING_ELT() must
>> be a 'CHARSXP' not a 'NULL'", there is a bug (at least the error message
>> should be relevant/informative).
>>
>> I am testing a patch that will allow empty arguments to macros (they
>> will expand to an empty string, like in LaTeX).
>>
>> Best
>> Tomas
>>
>> On 05/14/2018 11:23 PM, Georgi Boshnakov wrote:
>>> Bug or feature?
>>>
>>> I get the following error from parse_Rd() when a user Rd macro 
>>> (including system ones) is invoked with empty argument {},
>>> eg \mymacro{}:
>>>
>>> Error in tools::parse_Rd(fn) :
>>> ??? Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>>>
>>> A full example is further below with the system macro \CRANpkg{}. In 
>>> this example it doesn't make sense to use empty argument but the 
>>> error is not specific to this particular macro.
>>>
>>> ------
>>> Georgi Boshnakov
>>>
>>>
>>> Create an Rd file containing system macro \CRANpkg{bibtex}, 
>>> parse_Rd() is ok:
>>>
>>> =================
>>> fn <- tempfile()
>>> writeLines("\\name{dummyfun}
>>> \\alias{dummyfun}
>>> \\title{Dummy title}
>>> \\description{Dummy description}
>>> \\usage{
>>> dummyfun(x, ...)
>>> }
>>> \\arguments{
>>> ??? \\item{x}{a value.}
>>> ??? \\item{\\dots}{further arguments.}
>>> }
>>> \\details{
>>> ????? \\CRANpkg{bibtex}
>>> }
>>> ", fn)
>>>
>>>> tools::parse_Rd(fn)
>>> ...
>>> \details{
>>> \href{{https://CRAN.R-project.org/package=bibtex}{\pkg{bibtex}}}
>>> }
>>>
>>> ================
>>>
>>> With empty argument - \CRANpkg{} - Rd parser throws error. Of course 
>>> it is silly in this example but I have used it with other user 
>>> defined? macros where it may make sense to have empty argument.
>>>
>>> ================
>>>> writeLines("\\name{dummyfun}
>>> \\alias{dummyfun}
>>> \\title{Dummy title}
>>> \\description{Dummy description}
>>> \\usage{
>>> dummyfun(x, ...)
>>> }
>>> \\arguments{
>>> ??? \\item{x}{a value.}
>>> ??? \\item{\\dots}{further arguments.}
>>> }
>>> \\details{
>>> ????? \\CRANpkg{}
>>> }
>>> ", fn)
>>>> tools::parse_Rd(fn)
>>> Error in tools::parse_Rd(fn) :
>>> ??? Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>>>
>>> ????[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From cl@rkfitzg @ending from gm@il@com  Tue Jun  5 00:57:09 2018
From: cl@rkfitzg @ending from gm@il@com (Clark Fitzgerald)
Date: Mon, 4 Jun 2018 15:57:09 -0700
Subject: [Rd] 
 Understanding the sequence of events when calling the R dpois
 function
In-Reply-To: <180A77C1-8279-41C8-8CDF-0C1899DB4DAA@ki.se>
References: <7993.1527790129@minshall-apollo.minshall.org>
 <180A77C1-8279-41C8-8CDF-0C1899DB4DAA@ki.se>
Message-ID: <CAE_rN=1AAHbh6r2BAakm_VFec-OBjo6V-S2F2nWo8T+67eZfuQ@mail.gmail.com>

Hi Jason,

Duncan Temple Lang answered a similar question for me last year and wrote
up the method here: http://dsi.ucdavis.edu/Notes/R/FindingNativeCodeInR.html

Basically the C level debugger can be very helpful for figuring out what's
happening.

Best,
Clark

On Fri, Jun 1, 2018 at 4:47 AM, Jason Serviss <jason.serviss at ki.se> wrote:

> Chuck and Greg,
>
> Thanks a lot for your help! I have a much better understanding now of what
> is happening ?under the hood?.
>
> Kind Regards,
> Jason
>
>
> > On 31 May 2018, at 20:08, Greg Minshall <minshall at acm.org> wrote:
> >
> > Jason,
> >
> > as Chuck Berry (to whom, *thanks* for 'do {...} while(0)'!) suggested,
> > using grep, or even grep executed from find, such as
> > ----
> > find . -type f -exec grep -H "dpois" \{\} \; | less
> > ----
> > (executed from the root of an R source tree), is your friend.
> >
> > cheers, Greg
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@liber@ @ending from gm@il@com  Tue Jun  5 16:03:54 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 5 Jun 2018 16:03:54 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <D10658826EC4E24A903AC423BC06BAF70260170B5A@DOHNSMXDB02.doh.health.nsw.gov.au>
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
 <23316.64475.313034.26156@stat.math.ethz.ch> <87602yc37a.fsf@gmx.net>
 <D10658826EC4E24A903AC423BC06BAF70260170B5A@DOHNSMXDB02.doh.health.nsw.gov.au>
Message-ID: <2460e184-69e3-2233-0b60-4e58d9544f08@gmail.com>

Thanks for the report, fixed in R-devel (74848).

Best
Tomas

On 06/04/2018 02:41 PM, NELSON, Michael wrote:
>
> On R 3.5.0 (Mac)
>
> The issue appears when using the default (libcurl) method and specifying the encoding
>
> Note that using method='internal' causes a segfault if used in conjunction with encoding. (and works when encoding is not set)
>
> urlR <- "http://home.versanet.de/~s-berman/source2.R"
> # works
> url_default <- url(urlR)
> scan(url_default, "")
> # Read 7 items
> # [1] "source.test2"       "<-"                 "function()"         "{"                  "print(\"Non-ascii:" "????\")"
> # [7] "}"
>
> url_default_en <- url(urlR, encoding = "UTF-8")
> scan(url_default_en, "")
> # Read 0 items
> # character(0)
> url_internal <- url(urlR, method = 'internal')
> scan(url_internal, "")
> # Read 7 items
> # [1] "source.test2"       "<-"                 "function()"         "{"                  "print(\"Non-ascii:" "????\")"
> # [7] "}"
>
> url_internal_en <- url(urlR, encoding = "UTF-8", method = 'internal')
> #scan(url_internal_en, "")
> #*** caught segfault ***
> #  address 0x0, cause 'memory not mapped'
>
> url_libcurl <- url(urlR, method = 'libcurl')
> scan(url_libcurl, "")
> # Read 7 items
> # [1] "source.test2"       "<-"                 "function()"         "{"                  "print(\"Non-ascii:" "????\")"
> # [7] "}"
> url_libcurl_en <- url(urlR, encoding = "UTF-8", method = 'libcurl')
> scan(url_libcurl_en, "")
> # Read 0 items
> # character(0)
>
>
> Michael
>
> ________________________________________
> From: R-devel [r-devel-bounces at r-project.org] on behalf of Stephen Berman [stephen.berman at gmx.net]
> Sent: Monday, 4 June 2018 7:26 PM
> To: Martin Maechler
> Cc: R-devel
> Subject: Re: [Rd] encoding argument of source() in 3.5.0
>
> On Mon, 4 Jun 2018 10:44:11 +0200 Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
>>>>>>> peter dalgaard
>>>>>>>      on Sun, 3 Jun 2018 23:51:24 +0200 writes:
>>      > Looks like this actually comes from readLines(), nothing
>>      > to do with source() as such: In current R-devel (still):
>>
>>      >> f <- file("http://home.versanet.de/~s-berman/source2.R", encoding="UTF-8")
>>      >> readLines(f)
>>      > character(0)
>>      >> close(f)
>>      >> f <- file("http://home.versanet.de/~s-berman/source2.R")
>>      >> readLines(f)
>>      > [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
>>      > [3] "}"
>>
>>      > -pd
>>
>> and that's not even readLines(), but rather how exactly the
>> connection is defined [even in your example above]
>>
>>    > urlR <- "http://home.versanet.de/~s-berman/source2.R"
>>    > readLines(urlR, encoding="UTF-8")
>>    [1] "source.test2 <- function() {"   "    print(\"Non-ascii: ????\")"
>>    [3] "}"
>>    > f <- file(urlR, encoding = "UTF-8")
>>    > readLines(f)
>>    character(0)
>>
>> and the same behavior with scan()  instead of readLines() :
>>
>>> scan(urlR,"") # works
>> Read 7 items
>> [1] "source.test2"       "<-"                 "function()"         "{"
>> [5] "print(\"Non-ascii:" "????\")"            "}"
>>> scan(f,"") # fails
>> Read 0 items
>> character(0)
>> So it seems as if the bug is in the file() [or url()] C code ..
> Yes, the problem seems to be restricted to loading files from a
> (non-local) URL; i.e. this works fine on my computer:
>
>    > source("file:///home/steve/prog/R/source2.R", encoding="UTF-8")
>
> Also, I noticed this works too:
>
>    > read.table("http://home.versanet.de/~s-berman/table2", encoding="UTF-8", skip=1)
>
> where (if I read the source correctly) using `skip=1' makes read.table()
> call readLines().  (The read.table() invocation also works without
> `skip'.)
>
>> But then we also have to consider Windows .. where I think most changes have
>> happened during the  R-3.4.4 --> R-3.5.0  transition.
> Yes, please.  I need (or at least it would be convenient) to be able to
> load R code containing non-ascii characters from the web under
> MS-Windows.
>
> Steve Berman
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> __________________________________________________________________________________________________________
> This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
> Emails and attachments are monitored to ensure compliance with the NSW Ministry of health's Electronic Messaging Policy.
> __________________________________________________________________________________________________________
>
> _______________________________________________________________________________________________________
> Disclaimer: This message is intended for the addressee named and may contain confidential information.
> If you are not the intended recipient, please delete it and notify the sender.
> Views expressed in this message are those of the individual sender, and are not necessarily the views of the NSW Ministry of Health.
> _______________________________________________________________________________________________________
> This email has been scanned for the NSW Ministry of Health by the Websense Hosted Email Security System.
> Emails and attachments are monitored to ensure compliance with the NSW Ministry of Health's Electronic Messaging Policy.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From profjcn@@h @ending from gm@il@com  Tue Jun  5 20:06:38 2018
From: profjcn@@h @ending from gm@il@com (J C Nash)
Date: Tue, 5 Jun 2018 14:06:38 -0400
Subject: [Rd] histoRicalg -- project to document older methods used by R and
 transfer knowledge
Message-ID: <d72eb641-f2cc-7d20-d906-45a7f498ca4e@gmail.com>

After some thought, I decided r-devel was probably the best of the R lists
for this item. Do feel free to share, as the purpose is to improve documentation
and identify potential issues.

John Nash



The R Consortium has awarded some modest funding for "histoRicalg",
a project to document and transfer knowledge of some older algorithms
used by R and by other computational systems. These older codes
are mainly in Fortran, but some are in C, with the original implementations
possibly in other programming languages. My efforts
were prompted by finding some apparent bugs in codes, which could be either
from the original programs or else the implementations. Two examples
in particular -- in nlm() and in optim::L-BFGS-B -- gave impetus
to the project.

As a first task, I am hoping to establish a "Working Group on
Algorithms Used in R" to identify and prioritize issues and to
develop procedures for linking older and younger workers to enable
the transfer of knowledge. Expressions of interest are welcome,
either to me (nashjc _at_ uottawa.ca) or to the mailing list
(https://lists.r-consortium.org/g/rconsortium-project-histoRicalg).
A preliminary web-site is at https://gitlab.com/nashjc/histoRicalg.

While active membership of the Working Group is desirable, given
the nature of this project, I anticipate that most members will
contribute mainly by providing timely and pertinent ideas. Some
may not even be R users, since the underlying algorithms are used
by other computing systems and the documentation effort has many
common features. We will also need participation of younger
workers willing to learn about the methods that underly the
computations in R.


From edd @ending from debi@n@org  Tue Jun  5 20:59:33 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Tue, 5 Jun 2018 13:59:33 -0500
Subject: [Rd] Byte-compilation failure on different architectures /
 low-memory systems
In-Reply-To: <2ff56f05-bb12-3813-d7c7-347931e731c7@gmail.com>
References: <23317.22342.150301.768151@rob.eddelbuettel.com>
 <2ff56f05-bb12-3813-d7c7-347931e731c7@gmail.com>
Message-ID: <23318.56725.212774.801149@rob.eddelbuettel.com>


On 4 June 2018 at 20:06, Tomas Kalibera wrote:
| thanks for the report. Access to the test system is not necessary, the 
| memory requirements of the byte-code compiler are usually 
| platform-independent and specifically with this package I can reproduce 
| they are very high. We'll have a look what we can do, certainly there 
| should at least be a way to recover and use the uncompiled version when 
| memory allocation fails, this is already done by the JIT but not when 
| compiling during installation. Before R or the package is patched, the 
| only workaround for memory constrained systems is probably to disable 
| byte-compilation of this package, as I read you are doing already.

Yes. And as a shortcut, we just turned it off unconditionally, ie on all
build architectures.  Worked fine as per

   https://buildd.debian.org/status/package.php?p=fbasics

it has been built everywhere where we have R 3.5.0 (some 20 or so platforms).

The fix you suggest sounds ideal: if possible recover, and maybe WARN.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pd@me@ @ending from cb@@dk  Wed Jun  6 16:32:44 2018
From: pd@me@ @ending from cb@@dk (Peter Dalgaard)
Date: Wed, 6 Jun 2018 14:32:44 +0000
Subject: [Rd] R 3.5.1 scheduled for July 2
Message-ID: <A4AD2FAA-027E-487D-97B8-B1A46EE9002B@cbs.dk>

Full schedule available on developer.r-project.org

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From wdunl@p @ending from tibco@com  Wed Jun  6 20:40:15 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Wed, 6 Jun 2018 11:40:15 -0700
Subject: [Rd] minor problem in XML package
Message-ID: <CAF8bMcZ__6AAfKuxi-CUMORo+35WN7vmgO_umDf-10bmmxjv0g@mail.gmail.com>

[The package XML is labelled ORPHANED and a comment says the CRAN team
maintains it.  I am not sure what address to send this to.]

In package XML version 3.98.1.11, RUtils.c registers the C function
RS_XML_xmlNodeChildrenReferences twice.  The registration information is
identical but this could cause maintenance problems if the routine were
changed.

% grep -n RS_XML_xmlNodeChildrenReferences RUtils.c
205:        ENTRY(RS_XML_xmlNodeChildrenReferences, 3),
231:    ENTRY(RS_XML_xmlNodeChildrenReferences, 3),

One of them should be deleted.

% diff -u XML/src/RUtils.c~ XML/src/RUtils.c
--- XML/src/RUtils.c~   2018-06-06 11:32:16.549338000 -0700
+++ XML/src/RUtils.c    2018-06-06 11:33:07.899782000 -0700
@@ -228,7 +228,6 @@
        ENTRY(RS_XML_xmlNodeName, 1),
        ENTRY(RS_XML_xmlNodeNamespace, 1),
        ENTRY(RS_XML_xmlNodeAttributes, 3),
-       ENTRY(RS_XML_xmlNodeChildrenReferences, 3),
        ENTRY(R_xmlNodeValue, 3),
        ENTRY(R_setXMLInternalTextNode_value, 2),
        ENTRY(RS_XML_xmlNodeParent, 2),

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From @tephen@berm@n @ending from gmx@net  Wed Jun  6 21:54:57 2018
From: @tephen@berm@n @ending from gmx@net (Stephen Berman)
Date: Wed, 06 Jun 2018 21:54:57 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <2460e184-69e3-2233-0b60-4e58d9544f08@gmail.com> (Tomas
 Kalibera's message of "Tue, 5 Jun 2018 16:03:54 +0200")
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
 <23316.64475.313034.26156@stat.math.ethz.ch> <87602yc37a.fsf@gmx.net>
 <D10658826EC4E24A903AC423BC06BAF70260170B5A@DOHNSMXDB02.doh.health.nsw.gov.au>
 <2460e184-69e3-2233-0b60-4e58d9544f08@gmail.com>
Message-ID: <87sh5zwuzy.fsf@gmx.net>

On Tue, 5 Jun 2018 16:03:54 +0200 Tomas Kalibera <tomas.kalibera at gmail.com> wrote:

> Thanks for the report, fixed in R-devel (74848).
>
> Best
> Tomas

FTR, I confirm that the problem I reported is now fixed under both
GNU/Linux and MS-Windows.  Thanks!

Steve Berman


From dtemplel@ng @ending from ucd@vi@@edu  Wed Jun  6 22:59:14 2018
From: dtemplel@ng @ending from ucd@vi@@edu (Duncan Temple Lang)
Date: Wed, 6 Jun 2018 13:59:14 -0700
Subject: [Rd] minor problem in XML package
In-Reply-To: <CAF8bMcZ__6AAfKuxi-CUMORo+35WN7vmgO_umDf-10bmmxjv0g@mail.gmail.com>
References: <CAF8bMcZ__6AAfKuxi-CUMORo+35WN7vmgO_umDf-10bmmxjv0g@mail.gmail.com>
Message-ID: <CABQ6xNabpUVOMTNr2BUzbJnxLwmT=OWxi29tUhmur3dkfzCStg@mail.gmail.com>

Thanks Bill.
It has been changed in the github repository for the package for a while
now.
Thanks for pointing out.

D.

On Wed, Jun 6, 2018 at 11:40 AM William Dunlap via R-devel <
r-devel at r-project.org> wrote:

> [The package XML is labelled ORPHANED and a comment says the CRAN team
> maintains it.  I am not sure what address to send this to.]
>
> In package XML version 3.98.1.11, RUtils.c registers the C function
> RS_XML_xmlNodeChildrenReferences twice.  The registration information is
> identical but this could cause maintenance problems if the routine were
> changed.
>
> % grep -n RS_XML_xmlNodeChildrenReferences RUtils.c
> 205:        ENTRY(RS_XML_xmlNodeChildrenReferences, 3),
> 231:    ENTRY(RS_XML_xmlNodeChildrenReferences, 3),
>
> One of them should be deleted.
>
> % diff -u XML/src/RUtils.c~ XML/src/RUtils.c
> --- XML/src/RUtils.c~   2018-06-06 11:32:16.549338000 -0700
> +++ XML/src/RUtils.c    2018-06-06 11:33:07.899782000 -0700
> @@ -228,7 +228,6 @@
>         ENTRY(RS_XML_xmlNodeName, 1),
>         ENTRY(RS_XML_xmlNodeNamespace, 1),
>         ENTRY(RS_XML_xmlNodeAttributes, 3),
> -       ENTRY(RS_XML_xmlNodeChildrenReferences, 3),
>         ENTRY(R_xmlNodeValue, 3),
>         ENTRY(R_setXMLInternalTextNode_value, 2),
>         ENTRY(RS_XML_xmlNodeParent, 2),
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Duncan Temple Lang
Director, Data Science Initiative
Professor of Statistics

	[[alternative HTML version deleted]]


From tom@@@k@liber@ @ending from gm@il@com  Thu Jun  7 10:30:11 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Thu, 7 Jun 2018 10:30:11 +0200
Subject: [Rd] encoding argument of source() in 3.5.0
In-Reply-To: <87sh5zwuzy.fsf@gmx.net>
References: <87muwdl36e.fsf@gmx.net>
 <5CE2AAAB-9AA1-424B-8FB6-5EC579EA8102@gmail.com>
 <23316.64475.313034.26156@stat.math.ethz.ch> <87602yc37a.fsf@gmx.net>
 <D10658826EC4E24A903AC423BC06BAF70260170B5A@DOHNSMXDB02.doh.health.nsw.gov.au>
 <2460e184-69e3-2233-0b60-4e58d9544f08@gmail.com> <87sh5zwuzy.fsf@gmx.net>
Message-ID: <40ee8b3d-22ce-06f0-5ba2-86ab4a43e51a@gmail.com>

Thanks, the fix is now in R-patched and will be included in 3.5.1.
Tomas

On 06/06/2018 09:54 PM, Stephen Berman wrote:
> On Tue, 5 Jun 2018 16:03:54 +0200 Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>> Thanks for the report, fixed in R-devel (74848).
>>
>> Best
>> Tomas
> FTR, I confirm that the problem I reported is now fixed under both
> GNU/Linux and MS-Windows.  Thanks!
>
> Steve Berman


From h@wickh@m @ending from gm@il@com  Fri Jun  8 17:45:44 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Fri, 8 Jun 2018 08:45:44 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
Message-ID: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>

Hi all,

Is there a better to way to subset the ROWs (in the sense of NROW) of
an vector, matrix, data frame or array than this?

subset_ROW <- function(x, i) {
  nd <- length(dim(x))
  if (nd <= 1L) {
    x[i]
  } else {
    dims <- rep(list(quote(expr = )), nd - 1L)
    do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
  }
}

subset_ROW(1:10, 4:6)
#> [1] 4 5 6

str(subset_ROW(array(1:10, c(10)), 2:4))
#>  int [1:3(1d)] 2 3 4
str(subset_ROW(array(1:10, c(10, 1)), 2:4))
#>  int [1:3, 1] 2 3 4
str(subset_ROW(array(1:10, c(5, 2)), 2:4))
#>  int [1:3, 1:2] 2 3 4 7 8 9
str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
#>  int [1:3, 1, 1] 2 3 4

subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
#>   x y
#> 2 2 9
#> 3 3 8
#> 4 4 7

It seems like there should be a way to do this that doesn't require
generating a call with missing arguments, but I can't think of it.

Thanks!

Hadley

-- 
http://hadley.nz


From i@uc@r86 @ending from gm@il@com  Fri Jun  8 19:07:16 2018
From: i@uc@r86 @ending from gm@il@com (=?UTF-8?B?ScOxYWtpIMOaY2Fy?=)
Date: Fri, 8 Jun 2018 19:07:16 +0200
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
Message-ID: <CALEXWq2pZRYDBzbBV=_qfamDm0r+t=SVLizjd24t2CsWgUUjvw@mail.gmail.com>

El vie., 8 jun. 2018 a las 17:46, Hadley Wickham
(<h.wickham at gmail.com>) escribi?:
>
> Hi all,
>
> Is there a better to way to subset the ROWs (in the sense of NROW) of
> an vector, matrix, data frame or array than this?
>
> subset_ROW <- function(x, i) {
>   nd <- length(dim(x))
>   if (nd <= 1L) {
>     x[i]
>   } else {
>     dims <- rep(list(quote(expr = )), nd - 1L)
>     do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>   }
> }
>
> subset_ROW(1:10, 4:6)
> #> [1] 4 5 6
>
> str(subset_ROW(array(1:10, c(10)), 2:4))
> #>  int [1:3(1d)] 2 3 4
> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
> #>  int [1:3, 1] 2 3 4
> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
> #>  int [1:3, 1:2] 2 3 4 7 8 9
> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
> #>  int [1:3, 1, 1] 2 3 4
>
> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
> #>   x y
> #> 2 2 9
> #> 3 3 8
> #> 4 4 7
>
> It seems like there should be a way to do this that doesn't require
> generating a call with missing arguments, but I can't think of it.

The following code seems to work. The only minor drawback is that, for
the last case, the output is not a data frame.

subset_ROW <- function(x, i) {
  nd <- length(dim(x))
  if (nd <= 1L)
    return(x[i])
  xx <- apply(x, 2:nd, `[`, i, drop=FALSE)
  dim(xx) <- c(length(i), dim(x)[-1])
  xx
}

I?aki

>
> Thanks!
>
> Hadley
>
> --
> http://hadley.nz
>


From i@uc@r86 @ending from gm@il@com  Fri Jun  8 19:09:04 2018
From: i@uc@r86 @ending from gm@il@com (=?UTF-8?B?ScOxYWtpIMOaY2Fy?=)
Date: Fri, 8 Jun 2018 19:09:04 +0200
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CALEXWq2pZRYDBzbBV=_qfamDm0r+t=SVLizjd24t2CsWgUUjvw@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <CALEXWq2pZRYDBzbBV=_qfamDm0r+t=SVLizjd24t2CsWgUUjvw@mail.gmail.com>
Message-ID: <CALEXWq1nMt9WvkTrV7itcm5n5EpOuuKvON+nxs3-TEjEZpfXAA@mail.gmail.com>

Sorry, without remnants from other attempts:

subset_ROW <- function(x, i) {
  nd <- length(dim(x))
  if (nd <= 1L)
    return(x[i])
  apply(x, 2:nd, `[`, i, drop=FALSE)
}
El vie., 8 jun. 2018 a las 19:07, I?aki ?car (<i.ucar86 at gmail.com>) escribi?:
>
> El vie., 8 jun. 2018 a las 17:46, Hadley Wickham
> (<h.wickham at gmail.com>) escribi?:
> >
> > Hi all,
> >
> > Is there a better to way to subset the ROWs (in the sense of NROW) of
> > an vector, matrix, data frame or array than this?
> >
> > subset_ROW <- function(x, i) {
> >   nd <- length(dim(x))
> >   if (nd <= 1L) {
> >     x[i]
> >   } else {
> >     dims <- rep(list(quote(expr = )), nd - 1L)
> >     do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
> >   }
> > }
> >
> > subset_ROW(1:10, 4:6)
> > #> [1] 4 5 6
> >
> > str(subset_ROW(array(1:10, c(10)), 2:4))
> > #>  int [1:3(1d)] 2 3 4
> > str(subset_ROW(array(1:10, c(10, 1)), 2:4))
> > #>  int [1:3, 1] 2 3 4
> > str(subset_ROW(array(1:10, c(5, 2)), 2:4))
> > #>  int [1:3, 1:2] 2 3 4 7 8 9
> > str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
> > #>  int [1:3, 1, 1] 2 3 4
> >
> > subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
> > #>   x y
> > #> 2 2 9
> > #> 3 3 8
> > #> 4 4 7
> >
> > It seems like there should be a way to do this that doesn't require
> > generating a call with missing arguments, but I can't think of it.
>
> The following code seems to work. The only minor drawback is that, for
> the last case, the output is not a data frame.
>
> subset_ROW <- function(x, i) {
>   nd <- length(dim(x))
>   if (nd <= 1L)
>     return(x[i])
>   xx <- apply(x, 2:nd, `[`, i, drop=FALSE)
>   dim(xx) <- c(length(i), dim(x)[-1])
>   xx
> }
>
> I?aki
>
> >
> > Thanks!
> >
> > Hadley
> >
> > --
> > http://hadley.nz
> >



-- 
I?aki ?car
http://www.enchufa2.es
@Enchufa2


From l@wrence@mich@el @ending from gene@com  Fri Jun  8 19:15:27 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Fri, 8 Jun 2018 10:15:27 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
Message-ID: <CAOQ5Nyd_y5fiSb7M=-3sVCx3QewkxzAOzckqvAHwK63b-PYNEw@mail.gmail.com>

There probably should be an abstraction for this. In S4Vectors, we
have extractROWS().

Michael

On Fri, Jun 8, 2018 at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> Hi all,
>
> Is there a better to way to subset the ROWs (in the sense of NROW) of
> an vector, matrix, data frame or array than this?
>
> subset_ROW <- function(x, i) {
>   nd <- length(dim(x))
>   if (nd <= 1L) {
>     x[i]
>   } else {
>     dims <- rep(list(quote(expr = )), nd - 1L)
>     do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>   }
> }
>
> subset_ROW(1:10, 4:6)
> #> [1] 4 5 6
>
> str(subset_ROW(array(1:10, c(10)), 2:4))
> #>  int [1:3(1d)] 2 3 4
> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
> #>  int [1:3, 1] 2 3 4
> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
> #>  int [1:3, 1:2] 2 3 4 7 8 9
> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
> #>  int [1:3, 1, 1] 2 3 4
>
> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
> #>   x y
> #> 2 2 9
> #> 3 3 8
> #> 4 4 7
>
> It seems like there should be a way to do this that doesn't require
> generating a call with missing arguments, but I can't think of it.
>
> Thanks!
>
> Hadley
>
> --
> http://hadley.nz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ccberry @ending from uc@d@edu  Fri Jun  8 19:16:17 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Fri, 8 Jun 2018 17:16:17 +0000
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
Message-ID: <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>



> On Jun 8, 2018, at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> Hi all,
> 
> Is there a better to way to subset the ROWs (in the sense of NROW) of
> an vector, matrix, data frame or array than this?


You can use TRUE to fill the subscripts for dimensions 2:nd

> 
> subset_ROW <- function(x, i) {
>  nd <- length(dim(x))
>  if (nd <= 1L) {
>    x[i]
>  } else {
>    dims <- rep(list(quote(expr = )), nd - 1L)
>    do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>  }
> }


subset_ROW <-
    function(x,i)
{
    mc <- quote(x[i])
    nd <- max(1L, length(dim(x)))
    mc[seq(4, length=nd-1L)] <- rep(list(TRUE), nd - 1L)
    mc[["drop"]] <- FALSE
    eval(mc)
    
}

> 
> subset_ROW(1:10, 4:6)
> #> [1] 4 5 6
> 
> str(subset_ROW(array(1:10, c(10)), 2:4))
> #>  int [1:3(1d)] 2 3 4
> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
> #>  int [1:3, 1] 2 3 4
> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
> #>  int [1:3, 1:2] 2 3 4 7 8 9
> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
> #>  int [1:3, 1, 1] 2 3 4
> 
> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
> #>   x y
> #> 2 2 9
> #> 3 3 8
> #> 4 4 7
> 

HTH,

Chuck


From h@wickh@m @ending from gm@il@com  Fri Jun  8 19:29:33 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Fri, 8 Jun 2018 10:29:33 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
Message-ID: <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>

I suspect this will have suboptimal performance since the TRUEs will
get recycled. (Maybe there is, or could be, ALTREP, support for
recycling)
Hadley

On Fri, Jun 8, 2018 at 10:16 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>
>
>> On Jun 8, 2018, at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>
>> Hi all,
>>
>> Is there a better to way to subset the ROWs (in the sense of NROW) of
>> an vector, matrix, data frame or array than this?
>
>
> You can use TRUE to fill the subscripts for dimensions 2:nd
>
>>
>> subset_ROW <- function(x, i) {
>>  nd <- length(dim(x))
>>  if (nd <= 1L) {
>>    x[i]
>>  } else {
>>    dims <- rep(list(quote(expr = )), nd - 1L)
>>    do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>>  }
>> }
>
>
> subset_ROW <-
>     function(x,i)
> {
>     mc <- quote(x[i])
>     nd <- max(1L, length(dim(x)))
>     mc[seq(4, length=nd-1L)] <- rep(list(TRUE), nd - 1L)
>     mc[["drop"]] <- FALSE
>     eval(mc)
>
> }
>
>>
>> subset_ROW(1:10, 4:6)
>> #> [1] 4 5 6
>>
>> str(subset_ROW(array(1:10, c(10)), 2:4))
>> #>  int [1:3(1d)] 2 3 4
>> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
>> #>  int [1:3, 1] 2 3 4
>> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
>> #>  int [1:3, 1:2] 2 3 4 7 8 9
>> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
>> #>  int [1:3, 1, 1] 2 3 4
>>
>> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
>> #>   x y
>> #> 2 2 9
>> #> 3 3 8
>> #> 4 4 7
>>
>
> HTH,
>
> Chuck
>



-- 
http://hadley.nz


From hp@ge@ @ending from fredhutch@org  Fri Jun  8 19:32:05 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 8 Jun 2018 10:32:05 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CAOQ5Nyd_y5fiSb7M=-3sVCx3QewkxzAOzckqvAHwK63b-PYNEw@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <CAOQ5Nyd_y5fiSb7M=-3sVCx3QewkxzAOzckqvAHwK63b-PYNEw@mail.gmail.com>
Message-ID: <2e5c4fb5-cc6d-ed76-1c19-0fd0efe4893b@fredhutch.org>

On 06/08/2018 10:15 AM, Michael Lawrence wrote:
> There probably should be an abstraction for this. In S4Vectors, we
> have extractROWS().

FWIW the code in S4Vectors that does what your subset_ROW() does is:

 
https://github.com/Bioconductor/S4Vectors/blob/04cc9516af986b30445e99fd1337f13321b7b4f6/R/subsetting-utils.R#L466-L476

(This is the default "extractROWS" method.)

Except for the normalization of 'i', it does the same as your
subset_ROW(). I don't know how to do this without generating a call
with missing arguments.

H.

> 
> Michael
> 
> On Fri, Jun 8, 2018 at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>> Hi all,
>>
>> Is there a better to way to subset the ROWs (in the sense of NROW) of
>> an vector, matrix, data frame or array than this?
>>
>> subset_ROW <- function(x, i) {
>>    nd <- length(dim(x))
>>    if (nd <= 1L) {
>>      x[i]
>>    } else {
>>      dims <- rep(list(quote(expr = )), nd - 1L)
>>      do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>>    }
>> }
>>
>> subset_ROW(1:10, 4:6)
>> #> [1] 4 5 6
>>
>> str(subset_ROW(array(1:10, c(10)), 2:4))
>> #>  int [1:3(1d)] 2 3 4
>> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
>> #>  int [1:3, 1] 2 3 4
>> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
>> #>  int [1:3, 1:2] 2 3 4 7 8 9
>> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
>> #>  int [1:3, 1, 1] 2 3 4
>>
>> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
>> #>   x y
>> #> 2 2 9
>> #> 3 3 8
>> #> 4 4 7
>>
>> It seems like there should be a way to do this that doesn't require
>> generating a call with missing arguments, but I can't think of it.
>>
>> Thanks!
>>
>> Hadley
>>
>> --
>> https://urldefense.proofpoint.com/v2/url?u=http-3A__hadley.nz&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MF0DzYDiaYtcFXIyQwpQKs9lVbLNvdBBUubTv7BVAfM&s=GSpoAzc1Kn_BnTIkDh0HBFGKtRm-xFodxEPOejriC9Q&e=
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MF0DzYDiaYtcFXIyQwpQKs9lVbLNvdBBUubTv7BVAfM&s=HsEbNAT5IElAUS-W2VVSeJs4tfQc77heV7BbQxru518&e=
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MF0DzYDiaYtcFXIyQwpQKs9lVbLNvdBBUubTv7BVAfM&s=HsEbNAT5IElAUS-W2VVSeJs4tfQc77heV7BbQxru518&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From hp@ge@ @ending from fredhutch@org  Fri Jun  8 19:34:02 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 8 Jun 2018 10:34:02 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <2e5c4fb5-cc6d-ed76-1c19-0fd0efe4893b@fredhutch.org>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <CAOQ5Nyd_y5fiSb7M=-3sVCx3QewkxzAOzckqvAHwK63b-PYNEw@mail.gmail.com>
 <2e5c4fb5-cc6d-ed76-1c19-0fd0efe4893b@fredhutch.org>
Message-ID: <6ad0a818-dedc-7a9d-3c11-539dc057274b@fredhutch.org>

On 06/08/2018 10:32 AM, Herv? Pag?s wrote:
> On 06/08/2018 10:15 AM, Michael Lawrence wrote:
>> There probably should be an abstraction for this. In S4Vectors, we
>> have extractROWS().
> 
> FWIW the code in S4Vectors that does what your subset_ROW() does is:
> 
> 
> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_Bioconductor_S4Vectors_blob_04cc9516af986b30445e99fd1337f13321b7b4f6_R_subsetting-2Dutils.R-23L466-2DL476&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=LnDTzOeXwI6VI-4SVVi2rwDE7A-az-AhxPAB6X7Lkhc&s=_2PVGd2BrNNHtPjGsJkhSLAmtX3eoFuZDWWs2c8zZ4w&e= 

Wrong link sorry. Here is the correct one:

 
https://github.com/Bioconductor/S4Vectors/blob/04cc9516af986b30445e99fd1337f13321b7b4f6/R/subsetting-utils.R#L453-L464

H.

> 
> 
> (This is the default "extractROWS" method.)
> 
> Except for the normalization of 'i', it does the same as your
> subset_ROW(). I don't know how to do this without generating a call
> with missing arguments.
> 
> H.
> 
>>
>> Michael
>>
>> On Fri, Jun 8, 2018 at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> 
>> wrote:
>>> Hi all,
>>>
>>> Is there a better to way to subset the ROWs (in the sense of NROW) of
>>> an vector, matrix, data frame or array than this?
>>>
>>> subset_ROW <- function(x, i) {
>>> ?? nd <- length(dim(x))
>>> ?? if (nd <= 1L) {
>>> ???? x[i]
>>> ?? } else {
>>> ???? dims <- rep(list(quote(expr = )), nd - 1L)
>>> ???? do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>>> ?? }
>>> }
>>>
>>> subset_ROW(1:10, 4:6)
>>> #> [1] 4 5 6
>>>
>>> str(subset_ROW(array(1:10, c(10)), 2:4))
>>> #>? int [1:3(1d)] 2 3 4
>>> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
>>> #>? int [1:3, 1] 2 3 4
>>> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
>>> #>? int [1:3, 1:2] 2 3 4 7 8 9
>>> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
>>> #>? int [1:3, 1, 1] 2 3 4
>>>
>>> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
>>> #>?? x y
>>> #> 2 2 9
>>> #> 3 3 8
>>> #> 4 4 7
>>>
>>> It seems like there should be a way to do this that doesn't require
>>> generating a call with missing arguments, but I can't think of it.
>>>
>>> Thanks!
>>>
>>> Hadley
>>>
>>> -- 
>>> https://urldefense.proofpoint.com/v2/url?u=http-3A__hadley.nz&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MF0DzYDiaYtcFXIyQwpQKs9lVbLNvdBBUubTv7BVAfM&s=GSpoAzc1Kn_BnTIkDh0HBFGKtRm-xFodxEPOejriC9Q&e= 
>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MF0DzYDiaYtcFXIyQwpQKs9lVbLNvdBBUubTv7BVAfM&s=HsEbNAT5IElAUS-W2VVSeJs4tfQc77heV7BbQxru518&e= 
>>>
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MF0DzYDiaYtcFXIyQwpQKs9lVbLNvdBBUubTv7BVAfM&s=HsEbNAT5IElAUS-W2VVSeJs4tfQc77heV7BbQxru518&e= 
>>
>>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From hp@ge@ @ending from fredhutch@org  Fri Jun  8 19:37:15 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 8 Jun 2018 10:37:15 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
Message-ID: <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>

Also the TRUEs cause problems if some dimensions are 0:

   > matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
   Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
     (subscript) logical subscript too long

H.

On 06/08/2018 10:29 AM, Hadley Wickham wrote:
> I suspect this will have suboptimal performance since the TRUEs will
> get recycled. (Maybe there is, or could be, ALTREP, support for
> recycling)
> Hadley
> 
> On Fri, Jun 8, 2018 at 10:16 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>
>>
>>> On Jun 8, 2018, at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>>
>>> Hi all,
>>>
>>> Is there a better to way to subset the ROWs (in the sense of NROW) of
>>> an vector, matrix, data frame or array than this?
>>
>>
>> You can use TRUE to fill the subscripts for dimensions 2:nd
>>
>>>
>>> subset_ROW <- function(x, i) {
>>>   nd <- length(dim(x))
>>>   if (nd <= 1L) {
>>>     x[i]
>>>   } else {
>>>     dims <- rep(list(quote(expr = )), nd - 1L)
>>>     do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>>>   }
>>> }
>>
>>
>> subset_ROW <-
>>      function(x,i)
>> {
>>      mc <- quote(x[i])
>>      nd <- max(1L, length(dim(x)))
>>      mc[seq(4, length=nd-1L)] <- rep(list(TRUE), nd - 1L)
>>      mc[["drop"]] <- FALSE
>>      eval(mc)
>>
>> }
>>
>>>
>>> subset_ROW(1:10, 4:6)
>>> #> [1] 4 5 6
>>>
>>> str(subset_ROW(array(1:10, c(10)), 2:4))
>>> #>  int [1:3(1d)] 2 3 4
>>> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
>>> #>  int [1:3, 1] 2 3 4
>>> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
>>> #>  int [1:3, 1:2] 2 3 4 7 8 9
>>> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
>>> #>  int [1:3, 1, 1] 2 3 4
>>>
>>> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
>>> #>   x y
>>> #> 2 2 9
>>> #> 3 3 8
>>> #> 4 4 7
>>>
>>
>> HTH,
>>
>> Chuck
>>
> 
> 
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From ccberry @ending from uc@d@edu  Fri Jun  8 20:38:42 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Fri, 8 Jun 2018 18:38:42 +0000
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
Message-ID: <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>



> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
> 
> Also the TRUEs cause problems if some dimensions are 0:
> 
>  > matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>  Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>    (subscript) logical subscript too long

OK. But this is easy enough to handle. 

> 
> H.
> 
> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>> I suspect this will have suboptimal performance since the TRUEs will
>> get recycled. (Maybe there is, or could be, ALTREP, support for
>> recycling)
>> Hadley


AFAICS, it is not an issue. Taking

arr <- array(rnorm(2^22),c(2^10,4,4,4))

as a test case 

and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':

subset_ROW4 <-
     function(x, i, useLiteral=FALSE)
{
    literal <- quote(x[i,,,,drop=FALSE])
    mc <- quote(x[i])
    nd <- max(1L, length(dim(x)))
    mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
    mc[["drop"]] <- FALSE
    if (useLiteral)
        eval(literal)
    else
        eval(mc)
 }

I get identical times with

system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))

and with 

system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))

Changing the dimensions to c(2^5, 2^7, 4, 4 ) and running something similar also shows equal times.

Chuck

>> On Fri, Jun 8, 2018 at 10:16 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>> 
>>> 
>>>> On Jun 8, 2018, at 8:45 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>>> 
>>>> Hi all,
>>>> 
>>>> Is there a better to way to subset the ROWs (in the sense of NROW) of
>>>> an vector, matrix, data frame or array than this?
>>> 
>>> 
>>> You can use TRUE to fill the subscripts for dimensions 2:nd
>>> 
>>>> 
>>>> subset_ROW <- function(x, i) {
>>>>  nd <- length(dim(x))
>>>>  if (nd <= 1L) {
>>>>    x[i]
>>>>  } else {
>>>>    dims <- rep(list(quote(expr = )), nd - 1L)
>>>>    do.call(`[`, c(list(quote(x), quote(i)), dims, list(drop = FALSE)))
>>>>  }
>>>> }
>>> 
>>> 
>>> subset_ROW <-
>>>     function(x,i)
>>> {
>>>     mc <- quote(x[i])
>>>     nd <- max(1L, length(dim(x)))
>>>     mc[seq(4, length=nd-1L)] <- rep(list(TRUE), nd - 1L)
>>>     mc[["drop"]] <- FALSE
>>>     eval(mc)
>>> 
>>> }
>>> 
>>>> 
>>>> subset_ROW(1:10, 4:6)
>>>> #> [1] 4 5 6
>>>> 
>>>> str(subset_ROW(array(1:10, c(10)), 2:4))
>>>> #>  int [1:3(1d)] 2 3 4
>>>> str(subset_ROW(array(1:10, c(10, 1)), 2:4))
>>>> #>  int [1:3, 1] 2 3 4
>>>> str(subset_ROW(array(1:10, c(5, 2)), 2:4))
>>>> #>  int [1:3, 1:2] 2 3 4 7 8 9
>>>> str(subset_ROW(array(1:10, c(10, 1, 1)), 2:4))
>>>> #>  int [1:3, 1, 1] 2 3 4
>>>> 
>>>> subset_ROW(data.frame(x = 1:10, y = 10:1), 2:4)
>>>> #>   x y
>>>> #> 2 2 9
>>>> #> 3 3 8
>>>> #> 4 4 7
>>>> 
>>> 
>>> HTH,
>>> 
>>> Chuck
>>> 
> 
> -- 
> Herv? Pag?s
> 
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
> 
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319


From h@wickh@m @ending from gm@il@com  Fri Jun  8 20:52:01 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Fri, 8 Jun 2018 11:52:01 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
Message-ID: <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>

On Fri, Jun 8, 2018 at 11:38 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>
>
>> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>
>> Also the TRUEs cause problems if some dimensions are 0:
>>
>>  > matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>>  Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>>    (subscript) logical subscript too long
>
> OK. But this is easy enough to handle.
>
>>
>> H.
>>
>> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>>> I suspect this will have suboptimal performance since the TRUEs will
>>> get recycled. (Maybe there is, or could be, ALTREP, support for
>>> recycling)
>>> Hadley
>
>
> AFAICS, it is not an issue. Taking
>
> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>
> as a test case
>
> and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':
>
> subset_ROW4 <-
>      function(x, i, useLiteral=FALSE)
> {
>     literal <- quote(x[i,,,,drop=FALSE])
>     mc <- quote(x[i])
>     nd <- max(1L, length(dim(x)))
>     mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
>     mc[["drop"]] <- FALSE
>     if (useLiteral)
>         eval(literal)
>     else
>         eval(mc)
>  }
>
> I get identical times with
>
> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))
>
> and with
>
> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))

I think that's because you used a relatively low precision timing
mechnaism, and included the index generation in the timing. I see:

arr <- array(rnorm(2^22),c(2^10,4,4,4))
i <- seq(1,length = 10, by = 100)

bench::mark(
  arr[i, TRUE, TRUE, TRUE],
  arr[i, , , ]
)
#> # A tibble: 2 x 1
#>   expression        min    mean   median      max  n_gc
#>   <chr>         <bch:t> <bch:t> <bch:tm> <bch:tm> <dbl>
#> 1 arr[i, TRUE,?   7.4?s  10.9?s  10.66?s   1.22ms     2
#> 2 arr[i, , , ]   7.06?s   8.8?s   7.85?s 538.09?s     2

So not a huge difference, but it's there.

Hadley


-- 
http://hadley.nz


From hp@ge@ @ending from fredhutch@org  Fri Jun  8 21:13:35 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 8 Jun 2018 12:13:35 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
Message-ID: <c32a1913-96de-fa5c-0aeb-88485dfcdbd4@fredhutch.org>

A missing subscript is still preferable to a TRUE though because it
carries the meaning "take it all". A TRUE also achieves this but via
implicit recycling. For example x[ , , ] and x[TRUE, TRUE, TRUE]
achieve the same thing (if length(x) != 0) and are both no-ops but
the subsetting code gets a chance to immediately and easily detect
the former as a no-op whereas it will probably not be able to do it
so easily for the latter. So in this case it will most likely generate
a copy of 'x' and fill the new array by taking a full walk on it.

H.

On 06/08/2018 11:52 AM, Hadley Wickham wrote:
> On Fri, Jun 8, 2018 at 11:38 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>
>>
>>> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>
>>> Also the TRUEs cause problems if some dimensions are 0:
>>>
>>>   > matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>>>   Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>>>     (subscript) logical subscript too long
>>
>> OK. But this is easy enough to handle.
>>
>>>
>>> H.
>>>
>>> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>>>> I suspect this will have suboptimal performance since the TRUEs will
>>>> get recycled. (Maybe there is, or could be, ALTREP, support for
>>>> recycling)
>>>> Hadley
>>
>>
>> AFAICS, it is not an issue. Taking
>>
>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>
>> as a test case
>>
>> and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':
>>
>> subset_ROW4 <-
>>       function(x, i, useLiteral=FALSE)
>> {
>>      literal <- quote(x[i,,,,drop=FALSE])
>>      mc <- quote(x[i])
>>      nd <- max(1L, length(dim(x)))
>>      mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
>>      mc[["drop"]] <- FALSE
>>      if (useLiteral)
>>          eval(literal)
>>      else
>>          eval(mc)
>>   }
>>
>> I get identical times with
>>
>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))
>>
>> and with
>>
>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))
> 
> I think that's because you used a relatively low precision timing
> mechnaism, and included the index generation in the timing. I see:
> 
> arr <- array(rnorm(2^22),c(2^10,4,4,4))
> i <- seq(1,length = 10, by = 100)
> 
> bench::mark(
>    arr[i, TRUE, TRUE, TRUE],
>    arr[i, , , ]
> )
> #> # A tibble: 2 x 1
> #>   expression        min    mean   median      max  n_gc
> #>   <chr>         <bch:t> <bch:t> <bch:tm> <bch:tm> <dbl>
> #> 1 arr[i, TRUE,?   7.4?s  10.9?s  10.66?s   1.22ms     2
> #> 2 arr[i, , , ]   7.06?s   8.8?s   7.85?s 538.09?s     2
> 
> So not a huge difference, but it's there.
> 
> Hadley
> 
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From ccberry @ending from uc@d@edu  Fri Jun  8 21:31:51 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Fri, 8 Jun 2018 19:31:51 +0000
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
Message-ID: <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>



> On Jun 8, 2018, at 11:52 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> On Fri, Jun 8, 2018 at 11:38 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>> 
>> 
>>> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>> 
>>> Also the TRUEs cause problems if some dimensions are 0:
>>> 
>>>> matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>>> Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>>>   (subscript) logical subscript too long
>> 
>> OK. But this is easy enough to handle.
>> 
>>> 
>>> H.
>>> 
>>> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>>>> I suspect this will have suboptimal performance since the TRUEs will
>>>> get recycled. (Maybe there is, or could be, ALTREP, support for
>>>> recycling)
>>>> Hadley
>> 
>> 
>> AFAICS, it is not an issue. Taking
>> 
>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>> 
>> as a test case
>> 
>> and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':
>> 
>> subset_ROW4 <-
>>     function(x, i, useLiteral=FALSE)
>> {
>>    literal <- quote(x[i,,,,drop=FALSE])
>>    mc <- quote(x[i])
>>    nd <- max(1L, length(dim(x)))
>>    mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
>>    mc[["drop"]] <- FALSE
>>    if (useLiteral)
>>        eval(literal)
>>    else
>>        eval(mc)
>> }
>> 
>> I get identical times with
>> 
>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))
>> 
>> and with
>> 
>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))
> 
> I think that's because you used a relatively low precision timing
> mechnaism, and included the index generation in the timing. I see:
> 
> arr <- array(rnorm(2^22),c(2^10,4,4,4))
> i <- seq(1,length = 10, by = 100)
> 
> bench::mark(
>  arr[i, TRUE, TRUE, TRUE],
>  arr[i, , , ]
> )
> #> # A tibble: 2 x 1
> #>   expression        min    mean   median      max  n_gc
> #>   <chr>         <bch:t> <bch:t> <bch:tm> <bch:tm> <dbl>
> #> 1 arr[i, TRUE,?   7.4?s  10.9?s  10.66?s   1.22ms     2
> #> 2 arr[i, , , ]   7.06?s   8.8?s   7.85?s 538.09?s     2
> 
> So not a huge difference, but it's there.


Funny. I get similar results to yours above albeit with smaller differences. Usually < 5 percent.

But with subset_ROW4 I see no consistent difference.

In this example, it runs faster on average using `eval(mc)' to return the result:

> arr <- array(rnorm(2^22),c(2^10,4,4,4))
> i <- seq(1,length=10,by=100)
> bench::mark(subset_ROW4(arr,i,FALSE), subset_ROW4(arr,i,TRUE))[,1:8]
# A tibble: 2 x 8
  expression                      min     mean   median      max `itr/sec` mem_alloc  n_gc
  <chr>                      <bch:tm> <bch:tm> <bch:tm> <bch:tm>     <dbl> <bch:byt> <dbl>
1 subset_ROW4(arr, i, FALSE)   28.9?s   34.9?s   32.1?s   1.36ms    28686.    5.05KB     5
2 subset_ROW4(arr, i, TRUE)    28.9?s     35?s   32.4?s 875.11?s    28572.    5.05KB     5
>

And on subsequent reps the lead switches back and forth.


Chuck


From wgrundlingh @ending from gm@il@com  Fri Jun  8 22:02:16 2018
From: wgrundlingh @ending from gm@il@com (Werner Grundlingh)
Date: Fri, 8 Jun 2018 13:02:16 -0700
Subject: [Rd] Date class shows Inf as NA; this confuses the use of is.na()
Message-ID: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>

In the following example, the date class shows Inf as NA

> as_date(Inf, origin = '1970-01-01')
[1] NA

This is misleading as is.na() reports incorrectly

> is.na(as_date(Inf, origin = '1970-01-01'))
[1] FALSE

The correct approach here would probably to have an Inf (and -Inf)
*displayed* rather than NA.

	[[alternative HTML version deleted]]


From h@wickh@m @ending from gm@il@com  Fri Jun  8 22:49:23 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Fri, 8 Jun 2018 13:49:23 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
Message-ID: <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>

Hmmm, yes, there must be some special case in the C code to avoid
recycling a length-1 logical vector:

dims <- c(4, 4, 4, 1e5)

arr <- array(rnorm(prod(dims)), dims)
dim(arr)
#> [1]      4      4      4 100000
i <- c(1, 3)

bench::mark(
  arr[i, TRUE, TRUE, TRUE],
  arr[i, , , ]
)[c("expression", "min", "mean", "max")]
#> # A tibble: 2 x 4
#>   expression                    min     mean      max
#>   <chr>                    <bch:tm> <bch:tm> <bch:tm>
#> 1 arr[i, TRUE, TRUE, TRUE]   41.8ms   43.6ms   46.5ms
#> 2 arr[i, , , ]               41.7ms   43.1ms   46.3ms


On Fri, Jun 8, 2018 at 12:31 PM, Berry, Charles <ccberry at ucsd.edu> wrote:
>
>
>> On Jun 8, 2018, at 11:52 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>
>> On Fri, Jun 8, 2018 at 11:38 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>>
>>>
>>>> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>>
>>>> Also the TRUEs cause problems if some dimensions are 0:
>>>>
>>>>> matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>>>> Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>>>>   (subscript) logical subscript too long
>>>
>>> OK. But this is easy enough to handle.
>>>
>>>>
>>>> H.
>>>>
>>>> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>>>>> I suspect this will have suboptimal performance since the TRUEs will
>>>>> get recycled. (Maybe there is, or could be, ALTREP, support for
>>>>> recycling)
>>>>> Hadley
>>>
>>>
>>> AFAICS, it is not an issue. Taking
>>>
>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>>
>>> as a test case
>>>
>>> and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':
>>>
>>> subset_ROW4 <-
>>>     function(x, i, useLiteral=FALSE)
>>> {
>>>    literal <- quote(x[i,,,,drop=FALSE])
>>>    mc <- quote(x[i])
>>>    nd <- max(1L, length(dim(x)))
>>>    mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
>>>    mc[["drop"]] <- FALSE
>>>    if (useLiteral)
>>>        eval(literal)
>>>    else
>>>        eval(mc)
>>> }
>>>
>>> I get identical times with
>>>
>>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))
>>>
>>> and with
>>>
>>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))
>>
>> I think that's because you used a relatively low precision timing
>> mechnaism, and included the index generation in the timing. I see:
>>
>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>> i <- seq(1,length = 10, by = 100)
>>
>> bench::mark(
>>  arr[i, TRUE, TRUE, TRUE],
>>  arr[i, , , ]
>> )
>> #> # A tibble: 2 x 1
>> #>   expression        min    mean   median      max  n_gc
>> #>   <chr>         <bch:t> <bch:t> <bch:tm> <bch:tm> <dbl>
>> #> 1 arr[i, TRUE,?   7.4?s  10.9?s  10.66?s   1.22ms     2
>> #> 2 arr[i, , , ]   7.06?s   8.8?s   7.85?s 538.09?s     2
>>
>> So not a huge difference, but it's there.
>
>
> Funny. I get similar results to yours above albeit with smaller differences. Usually < 5 percent.
>
> But with subset_ROW4 I see no consistent difference.
>
> In this example, it runs faster on average using `eval(mc)' to return the result:
>
>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>> i <- seq(1,length=10,by=100)
>> bench::mark(subset_ROW4(arr,i,FALSE), subset_ROW4(arr,i,TRUE))[,1:8]
> # A tibble: 2 x 8
>   expression                      min     mean   median      max `itr/sec` mem_alloc  n_gc
>   <chr>                      <bch:tm> <bch:tm> <bch:tm> <bch:tm>     <dbl> <bch:byt> <dbl>
> 1 subset_ROW4(arr, i, FALSE)   28.9?s   34.9?s   32.1?s   1.36ms    28686.    5.05KB     5
> 2 subset_ROW4(arr, i, TRUE)    28.9?s     35?s   32.4?s 875.11?s    28572.    5.05KB     5
>>
>
> And on subsequent reps the lead switches back and forth.
>
>
> Chuck
>



-- 
http://hadley.nz


From l@wrence@mich@el @ending from gene@com  Fri Jun  8 22:56:36 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Fri, 8 Jun 2018 13:56:36 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
 <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
Message-ID: <CAOQ5Nyemu+yHSe_rRMiTTdS-3e4fws8Nd0SQKwHuJDB7wiV8pw@mail.gmail.com>

Actually, it's sort of the opposite. Everything becomes a sequence of
integers internally, even when the argument is missing. So the same
amount of work is done, basically. ALTREP will let us improve this
sort of thing.

Michael

On Fri, Jun 8, 2018 at 1:49 PM, Hadley Wickham <h.wickham at gmail.com> wrote:
> Hmmm, yes, there must be some special case in the C code to avoid
> recycling a length-1 logical vector:
>
> dims <- c(4, 4, 4, 1e5)
>
> arr <- array(rnorm(prod(dims)), dims)
> dim(arr)
> #> [1]      4      4      4 100000
> i <- c(1, 3)
>
> bench::mark(
>   arr[i, TRUE, TRUE, TRUE],
>   arr[i, , , ]
> )[c("expression", "min", "mean", "max")]
> #> # A tibble: 2 x 4
> #>   expression                    min     mean      max
> #>   <chr>                    <bch:tm> <bch:tm> <bch:tm>
> #> 1 arr[i, TRUE, TRUE, TRUE]   41.8ms   43.6ms   46.5ms
> #> 2 arr[i, , , ]               41.7ms   43.1ms   46.3ms
>
>
> On Fri, Jun 8, 2018 at 12:31 PM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>
>>
>>> On Jun 8, 2018, at 11:52 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>>
>>> On Fri, Jun 8, 2018 at 11:38 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>>>
>>>>
>>>>> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>>>
>>>>> Also the TRUEs cause problems if some dimensions are 0:
>>>>>
>>>>>> matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>>>>> Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>>>>>   (subscript) logical subscript too long
>>>>
>>>> OK. But this is easy enough to handle.
>>>>
>>>>>
>>>>> H.
>>>>>
>>>>> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>>>>>> I suspect this will have suboptimal performance since the TRUEs will
>>>>>> get recycled. (Maybe there is, or could be, ALTREP, support for
>>>>>> recycling)
>>>>>> Hadley
>>>>
>>>>
>>>> AFAICS, it is not an issue. Taking
>>>>
>>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>>>
>>>> as a test case
>>>>
>>>> and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':
>>>>
>>>> subset_ROW4 <-
>>>>     function(x, i, useLiteral=FALSE)
>>>> {
>>>>    literal <- quote(x[i,,,,drop=FALSE])
>>>>    mc <- quote(x[i])
>>>>    nd <- max(1L, length(dim(x)))
>>>>    mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
>>>>    mc[["drop"]] <- FALSE
>>>>    if (useLiteral)
>>>>        eval(literal)
>>>>    else
>>>>        eval(mc)
>>>> }
>>>>
>>>> I get identical times with
>>>>
>>>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))
>>>>
>>>> and with
>>>>
>>>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))
>>>
>>> I think that's because you used a relatively low precision timing
>>> mechnaism, and included the index generation in the timing. I see:
>>>
>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>> i <- seq(1,length = 10, by = 100)
>>>
>>> bench::mark(
>>>  arr[i, TRUE, TRUE, TRUE],
>>>  arr[i, , , ]
>>> )
>>> #> # A tibble: 2 x 1
>>> #>   expression        min    mean   median      max  n_gc
>>> #>   <chr>         <bch:t> <bch:t> <bch:tm> <bch:tm> <dbl>
>>> #> 1 arr[i, TRUE,?   7.4?s  10.9?s  10.66?s   1.22ms     2
>>> #> 2 arr[i, , , ]   7.06?s   8.8?s   7.85?s 538.09?s     2
>>>
>>> So not a huge difference, but it's there.
>>
>>
>> Funny. I get similar results to yours above albeit with smaller differences. Usually < 5 percent.
>>
>> But with subset_ROW4 I see no consistent difference.
>>
>> In this example, it runs faster on average using `eval(mc)' to return the result:
>>
>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>> i <- seq(1,length=10,by=100)
>>> bench::mark(subset_ROW4(arr,i,FALSE), subset_ROW4(arr,i,TRUE))[,1:8]
>> # A tibble: 2 x 8
>>   expression                      min     mean   median      max `itr/sec` mem_alloc  n_gc
>>   <chr>                      <bch:tm> <bch:tm> <bch:tm> <bch:tm>     <dbl> <bch:byt> <dbl>
>> 1 subset_ROW4(arr, i, FALSE)   28.9?s   34.9?s   32.1?s   1.36ms    28686.    5.05KB     5
>> 2 subset_ROW4(arr, i, TRUE)    28.9?s     35?s   32.4?s 875.11?s    28572.    5.05KB     5
>>>
>>
>> And on subsequent reps the lead switches back and forth.
>>
>>
>> Chuck
>>
>
>
>
> --
> http://hadley.nz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From hp@ge@ @ending from fredhutch@org  Fri Jun  8 23:01:29 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 8 Jun 2018 14:01:29 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
 <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
Message-ID: <0ac6562a-de52-6cce-a991-c8546612bf58@fredhutch.org>

The C code for subsetting doesn't need to recycle a logical subscript.
It only needs to walk on it and start again at the beginning of the
vector when it reaches the end. Not exactly the same as detecting the
"take everything along that dimension" situation though.
x[TRUE, TRUE, TRUE] triggers the full subsetting machinery when x[]
and x[ , , ] could (and should) easily avoid it.

H.

On 06/08/2018 01:49 PM, Hadley Wickham wrote:
> Hmmm, yes, there must be some special case in the C code to avoid
> recycling a length-1 logical vector:
> 
> dims <- c(4, 4, 4, 1e5)
> 
> arr <- array(rnorm(prod(dims)), dims)
> dim(arr)
> #> [1]      4      4      4 100000
> i <- c(1, 3)
> 
> bench::mark(
>    arr[i, TRUE, TRUE, TRUE],
>    arr[i, , , ]
> )[c("expression", "min", "mean", "max")]
> #> # A tibble: 2 x 4
> #>   expression                    min     mean      max
> #>   <chr>                    <bch:tm> <bch:tm> <bch:tm>
> #> 1 arr[i, TRUE, TRUE, TRUE]   41.8ms   43.6ms   46.5ms
> #> 2 arr[i, , , ]               41.7ms   43.1ms   46.3ms
> 
> 
> On Fri, Jun 8, 2018 at 12:31 PM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>
>>
>>> On Jun 8, 2018, at 11:52 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>>
>>> On Fri, Jun 8, 2018 at 11:38 AM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>>>
>>>>
>>>>> On Jun 8, 2018, at 10:37 AM, Herv? Pag?s <hpages at fredhutch.org> wrote:
>>>>>
>>>>> Also the TRUEs cause problems if some dimensions are 0:
>>>>>
>>>>>> matrix(raw(0), nrow=5, ncol=0)[1:3 , TRUE]
>>>>> Error in matrix(raw(0), nrow = 5, ncol = 0)[1:3, TRUE] :
>>>>>    (subscript) logical subscript too long
>>>>
>>>> OK. But this is easy enough to handle.
>>>>
>>>>>
>>>>> H.
>>>>>
>>>>> On 06/08/2018 10:29 AM, Hadley Wickham wrote:
>>>>>> I suspect this will have suboptimal performance since the TRUEs will
>>>>>> get recycled. (Maybe there is, or could be, ALTREP, support for
>>>>>> recycling)
>>>>>> Hadley
>>>>
>>>>
>>>> AFAICS, it is not an issue. Taking
>>>>
>>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>>>
>>>> as a test case
>>>>
>>>> and using a function that will either use the literal code `x[i,,,,drop=FALSE]' or `eval(mc)':
>>>>
>>>> subset_ROW4 <-
>>>>      function(x, i, useLiteral=FALSE)
>>>> {
>>>>     literal <- quote(x[i,,,,drop=FALSE])
>>>>     mc <- quote(x[i])
>>>>     nd <- max(1L, length(dim(x)))
>>>>     mc[seq(4,length=nd-1L)] <- rep(TRUE, nd-1L)
>>>>     mc[["drop"]] <- FALSE
>>>>     if (useLiteral)
>>>>         eval(literal)
>>>>     else
>>>>         eval(mc)
>>>> }
>>>>
>>>> I get identical times with
>>>>
>>>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),TRUE))
>>>>
>>>> and with
>>>>
>>>> system.time(for (i in 1:10000) subset_ROW4(arr,seq(1,length=10,by=100),FALSE))
>>>
>>> I think that's because you used a relatively low precision timing
>>> mechnaism, and included the index generation in the timing. I see:
>>>
>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>> i <- seq(1,length = 10, by = 100)
>>>
>>> bench::mark(
>>>   arr[i, TRUE, TRUE, TRUE],
>>>   arr[i, , , ]
>>> )
>>> #> # A tibble: 2 x 1
>>> #>   expression        min    mean   median      max  n_gc
>>> #>   <chr>         <bch:t> <bch:t> <bch:tm> <bch:tm> <dbl>
>>> #> 1 arr[i, TRUE,?   7.4?s  10.9?s  10.66?s   1.22ms     2
>>> #> 2 arr[i, , , ]   7.06?s   8.8?s   7.85?s 538.09?s     2
>>>
>>> So not a huge difference, but it's there.
>>
>>
>> Funny. I get similar results to yours above albeit with smaller differences. Usually < 5 percent.
>>
>> But with subset_ROW4 I see no consistent difference.
>>
>> In this example, it runs faster on average using `eval(mc)' to return the result:
>>
>>> arr <- array(rnorm(2^22),c(2^10,4,4,4))
>>> i <- seq(1,length=10,by=100)
>>> bench::mark(subset_ROW4(arr,i,FALSE), subset_ROW4(arr,i,TRUE))[,1:8]
>> # A tibble: 2 x 8
>>    expression                      min     mean   median      max `itr/sec` mem_alloc  n_gc
>>    <chr>                      <bch:tm> <bch:tm> <bch:tm> <bch:tm>     <dbl> <bch:byt> <dbl>
>> 1 subset_ROW4(arr, i, FALSE)   28.9?s   34.9?s   32.1?s   1.36ms    28686.    5.05KB     5
>> 2 subset_ROW4(arr, i, TRUE)    28.9?s     35?s   32.4?s 875.11?s    28572.    5.05KB     5
>>>
>>
>> And on subsequent reps the lead switches back and forth.
>>
>>
>> Chuck
>>
> 
> 
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From ccberry @ending from uc@d@edu  Fri Jun  8 23:09:55 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Fri, 8 Jun 2018 21:09:55 +0000
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
 <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
Message-ID: <A63CB03F-000C-4A80-B8F9-621A075F6F6D@ucsd.edu>



> On Jun 8, 2018, at 1:49 PM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> Hmmm, yes, there must be some special case in the C code to avoid
> recycling a length-1 logical vector:


Here is a version that (I think) handles Herve's issue of arrays having one or more 0 dimensions.

subset_ROW <-
    function(x,i)
{
    dims <- dim(x)
    index_list <- which(dims[-1] != 0L) + 3
    mc <- quote(x[i])
    nd <- max(1L, length(dims))
    mc[ index_list ] <- list(TRUE)
    mc[[ nd + 3L ]] <- FALSE
    names( mc )[ nd+3L ] <- "drop"
    eval(mc)
}

Curiously enough the timing is *much* better for this implementation than for the first version I sent.

Constructing a version of `mc' that looks like `x[i,,,,drop=FALSE]' can be done with `alist(a=)' in place of `list(TRUE)' in the earlier version but seems to slow things down noticeably. It requires almost twice (!!) as much time as the version above.

Best,

Chuck

From m@cqueen1 @ending from llnl@gov  Fri Jun  8 23:12:17 2018
From: m@cqueen1 @ending from llnl@gov (MacQueen, Don)
Date: Fri, 8 Jun 2018 21:12:17 +0000
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
Message-ID: <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>

> as_date
Error: object 'as_date' not found

Must be from some not-named package...

But don't confuse the format of an object when printed with its underlying value:

> as.Date(Inf,origin = '1970-01-01')
[1] NA

> str(as.Date(Inf,origin = '1970-01-01'))
 Date[1:1], format: NA

> as.numeric(as.Date(Inf,origin = '1970-01-01'))
[1] Inf

> is.na(Inf)
[1] FALSE

> is.na(as.Date(Inf,origin = '1970-01-01'))
[1] FALSE

> str(as.Date(27,origin = '1970-01-01'))
 Date[1:1], format: "1970-01-28"

> as.numeric(as.Date(27,origin = '1970-01-01'))
[1] 27

--
Don MacQueen
Lawrence Livermore National Laboratory
7000 East Ave., L-627
Livermore, CA 94550
925-423-1062
Lab cell 925-724-7509
 
 

?On 6/8/18, 1:02 PM, "R-devel on behalf of Werner Grundlingh" <r-devel-bounces at r-project.org on behalf of wgrundlingh at gmail.com> wrote:

    In the following example, the date class shows Inf as NA
    
    > as_date(Inf, origin = '1970-01-01')
    [1] NA
    
    This is misleading as is.na() reports incorrectly
    
    > is.na(as_date(Inf, origin = '1970-01-01'))
    [1] FALSE
    
    The correct approach here would probably to have an Inf (and -Inf)
    *displayed* rather than NA.
    
    	[[alternative HTML version deleted]]
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    


From h@wickh@m @ending from gm@il@com  Fri Jun  8 23:15:20 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Fri, 8 Jun 2018 14:15:20 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <A63CB03F-000C-4A80-B8F9-621A075F6F6D@ucsd.edu>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
 <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
 <A63CB03F-000C-4A80-B8F9-621A075F6F6D@ucsd.edu>
Message-ID: <CABdHhvGJm5CCObSQ+4VqP10TMM5b220GzWyZZJD+66xOOYPrtQ@mail.gmail.com>

On Fri, Jun 8, 2018 at 2:09 PM, Berry, Charles <ccberry at ucsd.edu> wrote:
>
>
>> On Jun 8, 2018, at 1:49 PM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>
>> Hmmm, yes, there must be some special case in the C code to avoid
>> recycling a length-1 logical vector:
>
>
> Here is a version that (I think) handles Herve's issue of arrays having one or more 0 dimensions.
>
> subset_ROW <-
>     function(x,i)
> {
>     dims <- dim(x)
>     index_list <- which(dims[-1] != 0L) + 3
>     mc <- quote(x[i])
>     nd <- max(1L, length(dims))
>     mc[ index_list ] <- list(TRUE)
>     mc[[ nd + 3L ]] <- FALSE
>     names( mc )[ nd+3L ] <- "drop"
>     eval(mc)
> }
>
> Curiously enough the timing is *much* better for this implementation than for the first version I sent.
>
> Constructing a version of `mc' that looks like `x[i,,,,drop=FALSE]' can be done with `alist(a=)' in place of `list(TRUE)' in the earlier version but seems to slow things down noticeably. It requires almost twice (!!) as much time as the version above.

I think that's probably because alist() is a slow way to generate a
missing symbol:

bench::mark(
  alist(x = ),
  list(x = quote(expr = )),
  check = FALSE
)[1:5]
#> # A tibble: 2 x 5
#>   expression                    min     mean   median      max
#>   <chr>                    <bch:tm> <bch:tm> <bch:tm> <bch:tm>
#> 1 alist(x = )                 2.8?s   3.54?s   3.29?s   34.9?s
#> 2 list(x = quote(expr = ))    169ns 219.38ns    181ns   24.2?s

(note the units)

Hadley


-- 
http://hadley.nz


From wgrundlingh @ending from gm@il@com  Fri Jun  8 23:21:22 2018
From: wgrundlingh @ending from gm@il@com (Werner Grundlingh)
Date: Fri, 8 Jun 2018 14:21:22 -0700
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
Message-ID: <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>

Indeed. as_date is from lubridate, but the same holds for as.Date.

The output and it's interpretation should be consistent, otherwise it leads
to confusion when programming. I understand that the difference exists
after asking a question on Stack Overflow:
  https://stackoverflow.com/q/50766089/914686
This understanding is never mentioned in the documentation - that an Inf
date is actually represented as NA:
  https://www.rdocumentation.org/packages/base/versions/3.5.0/topics/as.Date
So I'm of the impression that the display should be fixed as a first option
(thereby providing clarity/transparency in terms of back-end and output),
or the documentation amended (to highlight this) as a second option.

	[[alternative HTML version deleted]]


From ccberry @ending from uc@d@edu  Fri Jun  8 23:49:51 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Fri, 8 Jun 2018 21:49:51 +0000
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvGJm5CCObSQ+4VqP10TMM5b220GzWyZZJD+66xOOYPrtQ@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
 <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
 <A63CB03F-000C-4A80-B8F9-621A075F6F6D@ucsd.edu>
 <CABdHhvGJm5CCObSQ+4VqP10TMM5b220GzWyZZJD+66xOOYPrtQ@mail.gmail.com>
Message-ID: <58593D6B-9473-4593-8E3E-EFDE174FF868@ucsd.edu>



> On Jun 8, 2018, at 2:15 PM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> On Fri, Jun 8, 2018 at 2:09 PM, Berry, Charles <ccberry at ucsd.edu> wrote:
>> 
>> 
>>> On Jun 8, 2018, at 1:49 PM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>> 
>>> Hmmm, yes, there must be some special case in the C code to avoid
>>> recycling a length-1 logical vector:
>> 
>> 
>> Here is a version that (I think) handles Herve's issue of arrays having one or more 0 dimensions.
>> 
>> subset_ROW <-
>>    function(x,i)
>> {
>>    dims <- dim(x)
>>    index_list <- which(dims[-1] != 0L) + 3
>>    mc <- quote(x[i])
>>    nd <- max(1L, length(dims))
>>    mc[ index_list ] <- list(TRUE)
>>    mc[[ nd + 3L ]] <- FALSE
>>    names( mc )[ nd+3L ] <- "drop"
>>    eval(mc)
>> }
>> 
>> Curiously enough the timing is *much* better for this implementation than for the first version I sent.
>> 
>> Constructing a version of `mc' that looks like `x[i,,,,drop=FALSE]' can be done with `alist(a=)' in place of `list(TRUE)' in the earlier version but seems to slow things down noticeably. It requires almost twice (!!) as much time as the version above.
> 
> I think that's probably because alist() is a slow way to generate a
> missing symbol:
> 
> bench::mark(
>  alist(x = ),
>  list(x = quote(expr = )),
>  check = FALSE
> )[1:5]
> #> # A tibble: 2 x 5
> #>   expression                    min     mean   median      max
> #>   <chr>                    <bch:tm> <bch:tm> <bch:tm> <bch:tm>
> #> 1 alist(x = )                 2.8?s   3.54?s   3.29?s   34.9?s
> #> 2 list(x = quote(expr = ))    169ns 219.38ns    181ns   24.2?s
> 
> (note the units)

Yes. That is good for about half the difference. And I guess the rest is getting rid of seq(). This seems a bit quicker than anything else and satisfies Herve's objections:

subset_ROW <-
      function(x,i)
  {
      dims <- dim(x)
      nd <- length(dims)
      index_list <- if (nd > 1) 2L + 2L:nd else 0
      mc <- quote(x[i])
      mc[ index_list ] <- list(quote(expr=))
      mc[[ "drop" ]] <- FALSE
      eval(mc)
  }

Chuck

From hp@ge@ @ending from fredhutch@org  Fri Jun  8 23:58:47 2018
From: hp@ge@ @ending from fredhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 8 Jun 2018 14:58:47 -0700
Subject: [Rd] Subsetting the "ROW"s of an object
In-Reply-To: <CABdHhvGJm5CCObSQ+4VqP10TMM5b220GzWyZZJD+66xOOYPrtQ@mail.gmail.com>
References: <CABdHhvF9R3Mpk9pMMy8wa=qXzGta9cXdb9BYKT4P69QRuU3rig@mail.gmail.com>
 <F528270A-70D5-457B-BE73-4562540CFA16@ucsd.edu>
 <CABdHhvFcNObMmNvs9BfDk6sgZspNFK2++a571RrwLz-2taF4oQ@mail.gmail.com>
 <83c9327a-d8f1-66da-c75f-13e67a0140e0@fredhutch.org>
 <C43ED250-AD89-4ECC-97B8-038231DB475D@ucsd.edu>
 <CABdHhvHDFyEBESAFaE99rm5_xgdG08ooCAFFkshCvY86y9RmCg@mail.gmail.com>
 <A15318D9-58CD-4514-AD9D-4B9F3FFC3A66@ucsd.edu>
 <CABdHhvEQqx0yJ_b2cwt5iO+azCLqCdMck_v0HDHT0v5FBqOd1g@mail.gmail.com>
 <A63CB03F-000C-4A80-B8F9-621A075F6F6D@ucsd.edu>
 <CABdHhvGJm5CCObSQ+4VqP10TMM5b220GzWyZZJD+66xOOYPrtQ@mail.gmail.com>
Message-ID: <a3ab6e3e-ec0d-7a67-eb78-73f2430b20a1@fredhutch.org>



On 06/08/2018 02:15 PM, Hadley Wickham wrote:
> On Fri, Jun 8, 2018 at 2:09 PM, Berry, Charles <ccberry at ucsd.edu> wrote:
>>
>>
>>> On Jun 8, 2018, at 1:49 PM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>>
>>> Hmmm, yes, there must be some special case in the C code to avoid
>>> recycling a length-1 logical vector:
>>
>>
>> Here is a version that (I think) handles Herve's issue of arrays having one or more 0 dimensions.
>>
>> subset_ROW <-
>>      function(x,i)
>> {
>>      dims <- dim(x)
>>      index_list <- which(dims[-1] != 0L) + 3
>>      mc <- quote(x[i])
>>      nd <- max(1L, length(dims))
>>      mc[ index_list ] <- list(TRUE)
>>      mc[[ nd + 3L ]] <- FALSE
>>      names( mc )[ nd+3L ] <- "drop"
>>      eval(mc)
>> }
>>
>> Curiously enough the timing is *much* better for this implementation than for the first version I sent.
>>
>> Constructing a version of `mc' that looks like `x[i,,,,drop=FALSE]' can be done with `alist(a=)' in place of `list(TRUE)' in the earlier version but seems to slow things down noticeably. It requires almost twice (!!) as much time as the version above.
> 
> I think that's probably because alist() is a slow way to generate a
> missing symbol:
> 
> bench::mark(
>    alist(x = ),
>    list(x = quote(expr = )),
>    check = FALSE
> )[1:5]
> #> # A tibble: 2 x 5
> #>   expression                    min     mean   median      max
> #>   <chr>                    <bch:tm> <bch:tm> <bch:tm> <bch:tm>
> #> 1 alist(x = )                 2.8?s   3.54?s   3.29?s   34.9?s
> #> 2 list(x = quote(expr = ))    169ns 219.38ns    181ns   24.2?s
> 
> (note the units)

That's a good one. Need to change this in S4Vectors::default_extractROWS()
and other places. Thanks!

H.

> 
> Hadley
> 
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From tom@@@k@liber@ @ending from gm@il@com  Sat Jun  9 10:50:18 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Sat, 9 Jun 2018 10:50:18 +0200
Subject: [Rd] Byte-compilation failure on different architectures /
 low-memory systems
In-Reply-To: <23318.56725.212774.801149@rob.eddelbuettel.com>
References: <23317.22342.150301.768151@rob.eddelbuettel.com>
 <2ff56f05-bb12-3813-d7c7-347931e731c7@gmail.com>
 <23318.56725.212774.801149@rob.eddelbuettel.com>
Message-ID: <b5676c11-7255-a4fa-0d1c-afa5a1ad4307@gmail.com>

It turned out slightly more complicated, the fallback to AST is was 
already in place, but memory available to malloc got exhausted via heap 
expansion. Messages starting "Error: compilation failed" mean there was 
an error while compiling, including out of memory, and that the AST will 
be used - so these are worth looking at but not fatal. The error message 
"cannot allocate buffer" was the real problem.

We have addressed that with Luke in R-devel and R-patched (more general 
fix might come later to R-devel only). Now there is a GC on the fallback 
path which should release some memory from R heap to be usable by malloc 
again. Also, the compiler needs a bit less memory when analyzing similar 
code patterns as those causing trouble in fBasics (solves the fBasics 
problems with "ulimit -v 1000000")

Best
Tomas

On 06/05/2018 08:59 PM, Dirk Eddelbuettel wrote:
> On 4 June 2018 at 20:06, Tomas Kalibera wrote:
> | thanks for the report. Access to the test system is not necessary, the
> | memory requirements of the byte-code compiler are usually
> | platform-independent and specifically with this package I can reproduce
> | they are very high. We'll have a look what we can do, certainly there
> | should at least be a way to recover and use the uncompiled version when
> | memory allocation fails, this is already done by the JIT but not when
> | compiling during installation. Before R or the package is patched, the
> | only workaround for memory constrained systems is probably to disable
> | byte-compilation of this package, as I read you are doing already.
>
> Yes. And as a shortcut, we just turned it off unconditionally, ie on all
> build architectures.  Worked fine as per
>
>     https://buildd.debian.org/status/package.php?p=fbasics
>
> it has been built everywhere where we have R 3.5.0 (some 20 or so platforms).
>
> The fix you suggest sounds ideal: if possible recover, and maybe WARN.
>
> Dirk
>


From jori@mey@ @ending from gm@il@com  Sat Jun  9 13:41:51 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Sat, 9 Jun 2018 13:41:51 +0200
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
Message-ID: <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>

Hi Werner,

on ?is.na it says:

> The default method for anyNA handles atomic vectors without a class and
NULL.

I hear you, and it is confusing to say the least. Looking deeper, the
culprit seems to be in the conversion of a Date to POSIXlt prior to the
formatting:

> x <- as.Date(Inf,origin = '1970-01-01')
> is.na(as.POSIXlt(x))
[1] TRUE

Given this implicit conversion, I'd argue that as.Date should really return
NA as well when passed an infinite value. The other option is to provide an
is.na method for the Date class, which is -given is.na is an internal
generic- rather trivial:

> is.na.Date <- function(x) is.na(as.POSIXlt(x))
> is.na(x)
[1] TRUE

This might be a workaround for your current problem without needing changes
to R itself. But this will give a "wrong" answer in the sense that this
still works:

> Sys.Date() - x
Time difference of -Inf days

I personally would go for NA as the "correct" date for an infinite value,
but given that this will have implications in other areas, there is a
possibility of breaking code and it should be investigated a bit further
imho.
Cheers
Joris




On Fri, Jun 8, 2018 at 11:21 PM, Werner Grundlingh <wgrundlingh at gmail.com>
wrote:

> Indeed. as_date is from lubridate, but the same holds for as.Date.
>
> The output and it's interpretation should be consistent, otherwise it leads
> to confusion when programming. I understand that the difference exists
> after asking a question on Stack Overflow:
>   https://stackoverflow.com/q/50766089/914686
> This understanding is never mentioned in the documentation - that an Inf
> date is actually represented as NA:
>   https://www.rdocumentation.org/packages/base/versions/3.
> 5.0/topics/as.Date
> So I'm of the impression that the display should be fixed as a first option
> (thereby providing clarity/transparency in terms of back-end and output),
> or the documentation amended (to highlight this) as a second option.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From jori@mey@ @ending from gm@il@com  Sat Jun  9 13:45:21 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Sat, 9 Jun 2018 13:45:21 +0200
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
Message-ID: <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>

And now I've seen I copied the wrong part of ?is.na

> The default method for is.na applied to an atomic vector returns a
logical vector of the same length as its argument x, containing TRUE for
those elements marked NA or, for numeric or complex vectors, NaN, and FALSE
otherwise.

Key point being "atomic vector" here.


On Sat, Jun 9, 2018 at 1:41 PM, Joris Meys <jorismeys at gmail.com> wrote:

> Hi Werner,
>
> on ?is.na it says:
>
> > The default method for anyNA handles atomic vectors without a class and
> NULL.
>
> I hear you, and it is confusing to say the least. Looking deeper, the
> culprit seems to be in the conversion of a Date to POSIXlt prior to the
> formatting:
>
> > x <- as.Date(Inf,origin = '1970-01-01')
> > is.na(as.POSIXlt(x))
> [1] TRUE
>
> Given this implicit conversion, I'd argue that as.Date should really
> return NA as well when passed an infinite value. The other option is to
> provide an is.na method for the Date class, which is -given is.na is an
> internal generic- rather trivial:
>
> > is.na.Date <- function(x) is.na(as.POSIXlt(x))
> > is.na(x)
> [1] TRUE
>
> This might be a workaround for your current problem without needing
> changes to R itself. But this will give a "wrong" answer in the sense that
> this still works:
>
> > Sys.Date() - x
> Time difference of -Inf days
>
> I personally would go for NA as the "correct" date for an infinite value,
> but given that this will have implications in other areas, there is a
> possibility of breaking code and it should be investigated a bit further
> imho.
> Cheers
> Joris
>
>
>
>
> On Fri, Jun 8, 2018 at 11:21 PM, Werner Grundlingh <wgrundlingh at gmail.com>
> wrote:
>
>> Indeed. as_date is from lubridate, but the same holds for as.Date.
>>
>> The output and it's interpretation should be consistent, otherwise it
>> leads
>> to confusion when programming. I understand that the difference exists
>> after asking a question on Stack Overflow:
>>   https://stackoverflow.com/q/50766089/914686
>> This understanding is never mentioned in the documentation - that an Inf
>> date is actually represented as NA:
>>   https://www.rdocumentation.org/packages/base/versions/3.5.0/
>> topics/as.Date
>> So I'm of the impression that the display should be fixed as a first
>> option
>> (thereby providing clarity/transparency in terms of back-end and output),
>> or the documentation amended (to highlight this) as a second option.
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
>
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
> -----------
> Biowiskundedagen 2017-2018
> http://www.biowiskundedagen.ugent.be/
>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Jun 11 11:12:23 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 11 Jun 2018 11:12:23 +0200
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
Message-ID: <23326.15607.903724.181995@stat.math.ethz.ch>

>>>>> Joris Meys 
>>>>>     on Sat, 9 Jun 2018 13:45:21 +0200 writes:

    > And now I've seen I copied the wrong part of ?is.na
    >> The default method for is.na applied to an atomic vector
    >> returns a
    > logical vector of the same length as its argument x,
    > containing TRUE for those elements marked NA or, for
    > numeric or complex vectors, NaN, and FALSE otherwise.

    > Key point being "atomic vector" here.

and a Date vector *is* atomic .. (so I'm confused about what
that issue is .. but read one.


    > On Sat, Jun 9, 2018 at 1:41 PM, Joris Meys
    > <jorismeys at gmail.com> wrote:

    >> Hi Werner,
    >> 
    >> on ?is.na it says:
    >> 
    >> > The default method for anyNA handles atomic vectors
    >> without a class and NULL.
    >> 
    >> I hear you, and it is confusing to say the least. Looking
    >> deeper, the culprit seems to be in the conversion of a
    >> Date to POSIXlt prior to the formatting:
    >> 
    >> > x <- as.Date(Inf,origin = '1970-01-01')
    >> > is.na(as.POSIXlt(x)) [1] TRUE
    >> 
    >> Given this implicit conversion, I'd argue that as.Date
    >> should really return NA as well when passed an infinite
    >> value. The other option is to provide an is.na method for
    >> the Date class, which is -given is.na is an internal
    >> generic- rather trivial:
    >> 
    >> > is.na.Date <- function(x) is.na(as.POSIXlt(x)) 
    >> > is.na(x) [1] TRUE
    >> 
    >> This might be a workaround for your current problem
    >> without needing changes to R itself. But this will give a
    >> "wrong" answer in the sense that this still works:
    >> 
    >> > Sys.Date() - x Time difference of -Inf days
    >> 

    >> I personally would go for NA as the "correct" date for an
    >> infinite value, but given that this will have
    >> implications in other areas, there is a possibility of
    >> breaking code and it should be investigated a bit further
    >> imho.  Cheers Joris

Indeed.  I could argue it is wrong to treat '+/- Inf' as NA for
dates (as well as for date times), because the Inf *does*
contain information in some sense:

     Infinitely far in the future
vs   Infinitely far in the past

which may make sense in some case ... in the same sense +Inf and
-Inf do make sense for numbers in some cases.

Martin


From jori@mey@ @ending from gm@il@com  Mon Jun 11 12:00:48 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Mon, 11 Jun 2018 12:00:48 +0200
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <23326.15607.903724.181995@stat.math.ethz.ch>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
 <23326.15607.903724.181995@stat.math.ethz.ch>
Message-ID: <CAO1zAVaixg0ee9JuNoZhGVOE0w3=_5Tihhn9gyZNVCoa95bKDQ@mail.gmail.com>

On Mon, Jun 11, 2018 at 11:12 AM, Martin Maechler <
maechler at stat.math.ethz.ch> wrote:

>
> and a Date vector *is* atomic .. (so I'm confused about what
> that issue is .. but read one.
>

Indeed. I tend to exclude everything with a formal class from "atomic" (eg
factors et al) because they do behave differently sometimes, but
technically that's not correct. Thank you for pointing that out.


> Indeed.  I could argue it is wrong to treat '+/- Inf' as NA for
> dates (as well as for date times), because the Inf *does*
> contain information in some sense:
>
>      Infinitely far in the future
> vs   Infinitely far in the past
>
> which may make sense in some case ... in the same sense +Inf and
> -Inf do make sense for numbers in some cases.
>
> Martin
>

I considered that too. But as shown in the code above: anything that relies
on POSIXlt to process the date, will actually convert the Inf value to NA.

The problem becomes a bit more confusing, as as.POSIXct() does not convert
to NA.

> x <-  as.Date(Inf, origin = '1970-01-01')
> is.na(x)
[1] FALSE
> is.na(as.POSIXct(x))
[1] FALSE
> is.na(as.POSIXlt(x))
[1] TRUE

I can guess why this happens. For a date that's infinitely far in the
future, it is impossible to determine an exact hour, minute, second, day,
month, ... So these values in the POSIXlt "list" format can't be anything
but NA.

So I totally understand the value of having Inf dates. The trade-off to
consider here is whether we strive for consistency among the different
datetime classes, or strive for correct representation of the actual value
of the date.

Cheers
Joris
-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From emil@bode @ending from d@n@@kn@w@nl  Mon Jun 11 10:08:26 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Mon, 11 Jun 2018 08:08:26 +0000
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
Message-ID: <5E75C482-6E29-4F57-A65A-424F9669CAC9@dans.knaw.nl>

I don't think there's much wrong with is.na(as_date(Inf, origin='1970-01-01'))==FALSE, as there still is some "non-NA-ness" about the value (as difftime shows), but that the output when printing is confusing. The way cat is treating it is clearer: it does print Inf.

So would this be a solution?

format.Date <- function (x, ...) 
{
  xx <- format(as.POSIXlt(x), ...)
  names(xx) <- names(x)
  xx[is.na(xx) & !is.na(x)] <- paste('Invalid date:',as.numeric(x[is.na(xx) & !is.na(x)]))
  xx
}

Which causes this behaviour, which I think is clearer:

environment(print.Date) <- .GlobalEnv
x <- as_date(Inf, origin='1970-01-01')
print(x)
# [1] "Invalid date: Inf"

Best regards, 
Emil Bode
 
Data-analyst
 
+31 6 43 83 89 33
emil.bode at dans.knaw.nl
 
DANS: Netherlands Institute for Permanent Access to Digital Research Resources
Anna van Saksenlaan 51 | 2593 HW Den Haag | +31 70 349 44 50 | info at dans.knaw.nl <mailto:info at dans.kn> | dans.knaw.nl <applewebdata://71F677F0-6872-45F3-A6C4-4972BF87185B/www.dans.knaw.nl>
DANS is an institute of the Dutch Academy KNAW <http://knaw.nl/nl> and funding organisation NWO <http://www.nwo.nl/>.
 
Who will be the winner of the Dutch Data Prize 2018? Go to researchdata.nl to nominate. 

?On 09/06/2018, 13:52, "R-devel on behalf of Joris Meys" <r-devel-bounces at r-project.org on behalf of jorismeys at gmail.com> wrote:

    And now I've seen I copied the wrong part of ?is.na
    
    > The default method for is.na applied to an atomic vector returns a
    logical vector of the same length as its argument x, containing TRUE for
    those elements marked NA or, for numeric or complex vectors, NaN, and FALSE
    otherwise.
    
    Key point being "atomic vector" here.
    
    
    On Sat, Jun 9, 2018 at 1:41 PM, Joris Meys <jorismeys at gmail.com> wrote:
    
    > Hi Werner,
    >
    > on ?is.na it says:
    >
    > > The default method for anyNA handles atomic vectors without a class and
    > NULL.
    >
    > I hear you, and it is confusing to say the least. Looking deeper, the
    > culprit seems to be in the conversion of a Date to POSIXlt prior to the
    > formatting:
    >
    > > x <- as.Date(Inf,origin = '1970-01-01')
    > > is.na(as.POSIXlt(x))
    > [1] TRUE
    >
    > Given this implicit conversion, I'd argue that as.Date should really
    > return NA as well when passed an infinite value. The other option is to
    > provide an is.na method for the Date class, which is -given is.na is an
    > internal generic- rather trivial:
    >
    > > is.na.Date <- function(x) is.na(as.POSIXlt(x))
    > > is.na(x)
    > [1] TRUE
    >
    > This might be a workaround for your current problem without needing
    > changes to R itself. But this will give a "wrong" answer in the sense that
    > this still works:
    >
    > > Sys.Date() - x
    > Time difference of -Inf days
    >
    > I personally would go for NA as the "correct" date for an infinite value,
    > but given that this will have implications in other areas, there is a
    > possibility of breaking code and it should be investigated a bit further
    > imho.
    > Cheers
    > Joris
    >
    >
    >
    >
    > On Fri, Jun 8, 2018 at 11:21 PM, Werner Grundlingh <wgrundlingh at gmail.com>
    > wrote:
    >
    >> Indeed. as_date is from lubridate, but the same holds for as.Date.
    >>
    >> The output and it's interpretation should be consistent, otherwise it
    >> leads
    >> to confusion when programming. I understand that the difference exists
    >> after asking a question on Stack Overflow:
    >>   https://stackoverflow.com/q/50766089/914686
    >> This understanding is never mentioned in the documentation - that an Inf
    >> date is actually represented as NA:
    >>   https://www.rdocumentation.org/packages/base/versions/3.5.0/
    >> topics/as.Date
    >> So I'm of the impression that the display should be fixed as a first
    >> option
    >> (thereby providing clarity/transparency in terms of back-end and output),
    >> or the documentation amended (to highlight this) as a second option.
    >>
    >>         [[alternative HTML version deleted]]
    >>
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>
    >
    >
    >
    > --
    > Joris Meys
    > Statistical consultant
    >
    > Department of Data Analysis and Mathematical Modelling
    > Ghent University
    > Coupure Links 653, B-9000 Gent (Belgium)
    >
    > <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
    >
    > -----------
    > Biowiskundedagen 2017-2018
    > http://www.biowiskundedagen.ugent.be/
    >
    > -------------------------------
    > Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
    >
    
    
    
    -- 
    Joris Meys
    Statistical consultant
    
    Department of Data Analysis and Mathematical Modelling
    Ghent University
    Coupure Links 653, B-9000 Gent (Belgium)
    <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
    
    -----------
    Biowiskundedagen 2017-2018
    http://www.biowiskundedagen.ugent.be/
    
    -------------------------------
    Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
    
    	[[alternative HTML version deleted]]
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    


From z@rdetto @ending from i@t@t@it  Mon Jun 11 11:10:15 2018
From: z@rdetto @ending from i@t@t@it (Diego Zardetto)
Date: Mon, 11 Jun 2018 11:10:15 +0200 (CEST)
Subject: [Rd] Rgui 3.5.0 print issue
Message-ID: <005401d40164$029bf680$07d3e380$@istat.it>

Dear all,

 

I would like to have your opinion about an issue I have recently run into
while using tcltk in R 3.5.0 under Windows 7 64bit.

 

Here is a reproducible example of the issue, along with information about
platform and OS.

 

###############################################################

# R 3.5.0 issue: print does not work properly for data.frames #

#                when called from a tcltk window.             #

#                                                             #

# NOTE: The issue shows up when using Rgui, but disappears    #

#       if Rterm is used.                                     #

#                                                             #

# NOTE: The issue starts with R 3.5.0, and is still there     #

#       in R 3.5.0 patched build for Windows, as well as in   #

#       R-Devel.                                              #

###############################################################

# Reproducible example

library(tcltk)

data(cars)

win1 <- tktoplevel()

butOK <- tkbutton(win1, text = "OK", command = function() print(cars))

tkgrid(butOK)

# NOTE: Upon pressing OK, the rownames of cars are not printed on 

#       screen, but end up into R's prompt.

 

 

################################

# R version and platform info. #

################################

> R.version

               _                           

platform       x86_64-w64-mingw32          

arch           x86_64                      

os             mingw32                     

system         x86_64, mingw32             

status                                     

major          3                           

minor          5.0                         

year           2018                        

month          04                          

day            23                          

svn rev        74626                       

language       R                           

version.string R version 3.5.0 (2018-04-23)

nickname       Joy in Playing

 

##########################

# Operating system info. #

##########################

> Sys.info()

                     sysname                      release 

                   "Windows"                      "7 x64" 

                     version                     nodename 

"build 7601, Service Pack 1"                    "PC79258" 

                     machine                        login 

                    "x86-64"                   "zardetto" 

                        user               effective_user 

                  "zardetto"                   "zardetto"

 

 

I would appreciate any feedback you could provide.

 

Thanks

D.


	[[alternative HTML version deleted]]


From becker@g@be @ending from gene@com  Mon Jun 11 23:59:29 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Mon, 11 Jun 2018 14:59:29 -0700
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <5E75C482-6E29-4F57-A65A-424F9669CAC9@dans.knaw.nl>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
 <5E75C482-6E29-4F57-A65A-424F9669CAC9@dans.knaw.nl>
Message-ID: <CAMFmJsnvFTHPz_+zCaAfgFsDTRpgCpQyKNGtEZSFc_S9z8Q9YQ@mail.gmail.com>

Emil et al.,


On Mon, Jun 11, 2018 at 1:08 AM, Emil Bode <emil.bode at dans.knaw.nl> wrote:

> I don't think there's much wrong with is.na(as_date(Inf,
> origin='1970-01-01'))==FALSE, as there still is some "non-NA-ness" about
> the value (as difftime shows), but that the output when printing is
> confusing. The way cat is treating it is clearer: it does print Inf.
>
> So would this be a solution?
>
> format.Date <- function (x, ...)
> {
>   xx <- format(as.POSIXlt(x), ...)
>   names(xx) <- names(x)
>   xx[is.na(xx) & !is.na(x)] <- paste('Invalid date:',as.numeric(x[is.na(xx)
> & !is.na(x)]))
>   xx
> }
>
> Which causes this behaviour, which I think is clearer:
>
> environment(print.Date) <- .GlobalEnv
> x <- as_date(Inf, origin='1970-01-01')
> print(x)
> # [1] "Invalid date: Inf"
>

In my opinion, it's either invalid or it isn't. If it's actually invalid,
as_date (and the equivalent core function which is actually relevant on
this list) should fail; because it's an invalid date.

If it *isn't* invalid, having the print method tell users it is seems
problematic.

And I think people seem to be leaning towards it not being invalid. A bit
surprising to me, as my personal first thought was that infinite dates
don't make any sense, but I don't really have a horse in this race and so
defer to the cooler heads that are saying having an infinite date perhaps
should not be disallowed explicitly. If it's not, though, it's not invalid
and we shouldn't confuse users by saying it is, imho.

Best,
~G


>
> Best regards,
> Emil Bode
>
> Data-analyst
>
> +31 6 43 83 89 33
> emil.bode at dans.knaw.nl
>
> DANS: Netherlands Institute for Permanent Access to Digital Research
> Resources
> Anna van Saksenlaan 51 | 2593 HW Den Haag | +31 70 349 44 50 |
> info at dans.knaw.nl <mailto:info at dans.kn> | dans.knaw.nl
> <applewebdata://71F677F0-6872-45F3-A6C4-4972BF87185B/www.dans.knaw.nl>
> DANS is an institute of the Dutch Academy KNAW <http://knaw.nl/nl> and
> funding organisation NWO <http://www.nwo.nl/>.
>
> Who will be the winner of the Dutch Data Prize 2018? Go to researchdata.nl
> to nominate.
>
> ?On 09/06/2018, 13:52, "R-devel on behalf of Joris Meys" <
> r-devel-bounces at r-project.org on behalf of jorismeys at gmail.com> wrote:
>
>     And now I've seen I copied the wrong part of ?is.na
>
>     > The default method for is.na applied to an atomic vector returns a
>     logical vector of the same length as its argument x, containing TRUE
> for
>     those elements marked NA or, for numeric or complex vectors, NaN, and
> FALSE
>     otherwise.
>
>     Key point being "atomic vector" here.
>
>
>     On Sat, Jun 9, 2018 at 1:41 PM, Joris Meys <jorismeys at gmail.com>
> wrote:
>
>     > Hi Werner,
>     >
>     > on ?is.na it says:
>     >
>     > > The default method for anyNA handles atomic vectors without a
> class and
>     > NULL.
>     >
>     > I hear you, and it is confusing to say the least. Looking deeper, the
>     > culprit seems to be in the conversion of a Date to POSIXlt prior to
> the
>     > formatting:
>     >
>     > > x <- as.Date(Inf,origin = '1970-01-01')
>     > > is.na(as.POSIXlt(x))
>     > [1] TRUE
>     >
>     > Given this implicit conversion, I'd argue that as.Date should really
>     > return NA as well when passed an infinite value. The other option is
> to
>     > provide an is.na method for the Date class, which is -given is.na
> is an
>     > internal generic- rather trivial:
>     >
>     > > is.na.Date <- function(x) is.na(as.POSIXlt(x))
>     > > is.na(x)
>     > [1] TRUE
>     >
>     > This might be a workaround for your current problem without needing
>     > changes to R itself. But this will give a "wrong" answer in the
> sense that
>     > this still works:
>     >
>     > > Sys.Date() - x
>     > Time difference of -Inf days
>     >
>     > I personally would go for NA as the "correct" date for an infinite
> value,
>     > but given that this will have implications in other areas, there is a
>     > possibility of breaking code and it should be investigated a bit
> further
>     > imho.
>     > Cheers
>     > Joris
>     >
>     >
>     >
>     >
>     > On Fri, Jun 8, 2018 at 11:21 PM, Werner Grundlingh <
> wgrundlingh at gmail.com>
>     > wrote:
>     >
>     >> Indeed. as_date is from lubridate, but the same holds for as.Date.
>     >>
>     >> The output and it's interpretation should be consistent, otherwise
> it
>     >> leads
>     >> to confusion when programming. I understand that the difference
> exists
>     >> after asking a question on Stack Overflow:
>     >>   https://stackoverflow.com/q/50766089/914686
>     >> This understanding is never mentioned in the documentation - that
> an Inf
>     >> date is actually represented as NA:
>     >>   https://www.rdocumentation.org/packages/base/versions/3.5.0/
>     >> topics/as.Date
>     >> So I'm of the impression that the display should be fixed as a first
>     >> option
>     >> (thereby providing clarity/transparency in terms of back-end and
> output),
>     >> or the documentation amended (to highlight this) as a second option.
>     >>
>     >>         [[alternative HTML version deleted]]
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >>
>     >
>     >
>     >
>     > --
>     > Joris Meys
>     > Statistical consultant
>     >
>     > Department of Data Analysis and Mathematical Modelling
>     > Ghent University
>     > Coupure Links 653, B-9000 Gent (Belgium)
>     >
>     > <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-
> 9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>     >
>     > -----------
>     > Biowiskundedagen 2017-2018
>     > http://www.biowiskundedagen.ugent.be/
>     >
>     > -------------------------------
>     > Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>     >
>
>
>
>     --
>     Joris Meys
>     Statistical consultant
>
>     Department of Data Analysis and Mathematical Modelling
>     Ghent University
>     Coupure Links 653, B-9000 Gent (Belgium)
>     <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-
> 9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
>
>     -----------
>     Biowiskundedagen 2017-2018
>     http://www.biowiskundedagen.ugent.be/
>
>     -------------------------------
>     Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>
>         [[alternative HTML version deleted]]
>
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From emil@bode @ending from d@n@@kn@w@nl  Tue Jun 12 14:00:42 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Tue, 12 Jun 2018 12:00:42 +0000
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <CAMFmJsnvFTHPz_+zCaAfgFsDTRpgCpQyKNGtEZSFc_S9z8Q9YQ@mail.gmail.com>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
 <5E75C482-6E29-4F57-A65A-424F9669CAC9@dans.knaw.nl>
 <CAMFmJsnvFTHPz_+zCaAfgFsDTRpgCpQyKNGtEZSFc_S9z8Q9YQ@mail.gmail.com>
Message-ID: <DEC562CF-F198-4762-BA8F-D00178B7E9E0@dans.knaw.nl>

I agree that calling it invalid is a bit confusing, but I?m not sure what the wording should be, as the problem is that the conversion to POSIXlt is failing.
The best solution would be to extend the whole POSIXlt-class, but that?s too much work.
I?ve done some experiments, and it also seems that the Date class can store larger values than POSIXlt:
> as.Date(8e9, origin='1970-01-01')==as.Date(9e9, origin='1970-01-01')
[1] FALSE
> as.POSIXlt(as.Date(8e9, origin='1970-01-01'))==as.POSIXlt(as.Date(9e9, origin='1970-01-01'))
[1] TRUE
> as.POSIXlt(as.Date(8e9, origin='1970-01-01'))
[1] "-5877641-06-23 UTC"
# Same for 9e9
> as.Date(8e9, origin='1970-01-01')>Sys.Date()
[1] TRUE
> as.POSIXlt(as.Date(8e9, origin='1970-01-01'))>as.POSIXlt(Sys.Date())
[1] FALSE

So the situation as I see it now:

  *   Having an infinite date may convey some information, so we shouldn?t prohibit it anyway
  *   Idem for very large values (positive or negative)
  *   But we should warn users that their dates may not be neatly representable, that there is no way to use the default-print
  *   So for values where the POSIXlt-print fails, I think it?s best to print the numerical value, along with some text warning the user
So I?ve adapted the format-function a bit more, with behaviour below.
The details can be adapted of course, but I feel it?s best to print some variant of as.numeric(x) if as.POSIXlt(x) turns out to be unreliable, and further leave is.na()


format.Date <- function (x, ...)
{
  xx <- format(as.POSIXlt(x), ...)
  names(xx) <- names(x)
  if(any(!is.na(x) & (-719162>as.numeric(x) | as.numeric(x)>2932896))) {
    xx[!is.na(x) & (-719162>as.numeric(x) | as.numeric(x)>2932896)] <-
      paste('Date with numerical value',as.numeric(x[!is.na(x) & (-719162>as.numeric(x) | as.numeric(x)>2932896)]))
    warning('Some dates are not in the interval 01-01-01 and 9999-12-31, showing numerical value.')
  }
  xx
}

With the following results:

> environment(print.Date) <- .GlobalEnv
> as.Date(Inf, origin='1970-01-01')
[1] "Date with numerical value Inf"
Warning message:
In format.Date(x) :
  Some dates are not in the interval 01-01-01 and 9999-12-31, showing numerical value.



From: Gabe Becker <becker.gabe at gene.com>
Date: Monday, 11 June 2018 at 23:59
To: Emil Bode <emil.bode at dans.knaw.nl>
Cc: Joris Meys <jorismeys at gmail.com>, Werner Grundlingh <wgrundlingh at gmail.com>, "macqueen1 at llnl.gov" <macqueen1 at llnl.gov>, r-devel <r-devel at r-project.org>
Subject: Re: [Rd] Date class shows Inf as NA; this confuses the use of is.na()

format.Date <- function (x, ...)
{
  xx <- format(as.POSIXlt(x), ...)
  names(xx) <- names(x)
  xx[is.na<http://is.na>(xx) & !is.na<http://is.na>(x)] <- paste('Invalid date:',as.numeric(x[is.na<http://is.na>(xx) & !is.na<http://is.na>(x)]))
  xx
}

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Tue Jun 12 18:28:33 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 12 Jun 2018 18:28:33 +0200
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <DEC562CF-F198-4762-BA8F-D00178B7E9E0@dans.knaw.nl>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
 <5E75C482-6E29-4F57-A65A-424F9669CAC9@dans.knaw.nl>
 <CAMFmJsnvFTHPz_+zCaAfgFsDTRpgCpQyKNGtEZSFc_S9z8Q9YQ@mail.gmail.com>
 <DEC562CF-F198-4762-BA8F-D00178B7E9E0@dans.knaw.nl>
Message-ID: <23327.62641.524004.675246@stat.math.ethz.ch>

>>>>> Emil Bode 
>>>>>     on Tue, 12 Jun 2018 12:00:42 +0000 writes:

> I agree that calling it invalid is a bit confusing, but I?m not sure what the wording should be, as the problem is that the conversion to POSIXlt is failing.
> The best solution would be to extend the whole POSIXlt-class, but that?s too much work.
> I?ve done some experiments, and it also seems that the Date class can store larger values than POSIXlt:
> > as.Date(8e9, origin='1970-01-01')==as.Date(9e9, origin='1970-01-01')
> [1] FALSE
> > as.POSIXlt(as.Date(8e9, origin='1970-01-01'))==as.POSIXlt(as.Date(9e9, origin='1970-01-01'))
> [1] TRUE
> > as.POSIXlt(as.Date(8e9, origin='1970-01-01'))
> [1] "-5877641-06-23 UTC"
> # Same for 9e9
> > as.Date(8e9, origin='1970-01-01')>Sys.Date()
> [1] TRUE
> > as.POSIXlt(as.Date(8e9, origin='1970-01-01'))>as.POSIXlt(Sys.Date())
> [1] FALSE
> 
> So the situation as I see it now:
> 
>   *   Having an infinite date may convey some information, so
>       we shouldn?t prohibit it anyway

>   *   Idem for very large values (positive or negative)

Indeed -- good you found that you don't have to go all the way to Inf
... and that is typical (and the reason why one has to solve the
problem anyway and way Inf is not really a special case in that
sense (but nicely in another sense) !

>   *   But we should warn users that their dates may not be neatly representable, that there is no way to use the default-print
>   *   So for values where the POSIXlt-print fails, I think it?s best to print the numerical value, along with some text warning the user

> So I?ve adapted the format-function a bit more, with behaviour below.
> The details can be adapted of course, but I feel it?s best to print some variant of as.numeric(x) if as.POSIXlt(x) turns out to be unreliable, and further leave is.na()

> 
> format.Date <- function (x, ...)
> {
>   xx <- format(as.POSIXlt(x), ...)
>   names(xx) <- names(x)
>   if(any(!is.na(x) & (-719162>as.numeric(x) | as.numeric(x)>2932896))) {
>     xx[!is.na(x) & (-719162>as.numeric(x) | as.numeric(x)>2932896)] <-
>       paste('Date with numerical value',as.numeric(x[!is.na(x) & (-719162>as.numeric(x) | as.numeric(x)>2932896)]))
>     warning('Some dates are not in the interval 01-01-01 and 9999-12-31, showing numerical value.')
>   }
>   xx
> }
> 
> With the following results:
> 
> > environment(print.Date) <- .GlobalEnv
> > as.Date(Inf, origin='1970-01-01')
> [1] "Date with numerical value Inf"
> Warning message:
> In format.Date(x) :
>   Some dates are not in the interval 01-01-01 and 9999-12-31, showing numerical value.
> 
This looks somewhat reasonable as a workaround for you and for now.

However, I'd propose another route to go for "the next version of R":
When I consider

  > str(unclass(as.POSIXlt.Date(Sys.time() + 1e50)))
  List of 9
   $ sec  : num 0
   $ min  : int 0
   $ hour : int 0
   $ mday : int 23
   $ mon  : int 5
   $ year : int -5879541
   $ wday : int 2
   $ yday : int 173
   $ isdst: int 0
   - attr(*, "tzone")= chr "UTC"
  > 

we see the integer overflow (to negative here) and that all
components but 'sec' (because allow fractions!) are integer.

I think we should allow 'year' to be "double" instead, and so it
could also be +Inf or -Inf and we'd nicely cover 
the conversions from and to 'numeric' -- which is really used
internally for dates and date-times in  POSIXct.

Martin

> 
> From: Gabe Becker <becker.gabe at gene.com>
> Date: Monday, 11 June 2018 at 23:59
> To: Emil Bode <emil.bode at dans.knaw.nl>
> Cc: Joris Meys <jorismeys at gmail.com>, Werner Grundlingh <wgrundlingh at gmail.com>, "macqueen1 at llnl.gov" <macqueen1 at llnl.gov>, r-devel <r-devel at r-project.org>
> Subject: Re: [Rd] Date class shows Inf as NA; this confuses the use of is.na()
> 
> format.Date <- function (x, ...)
> {
>   xx <- format(as.POSIXlt(x), ...)
>   names(xx) <- names(x)
>   xx[is.na<http://is.na>(xx) & !is.na<http://is.na>(x)] <- paste('Invalid date:',as.numeric(x[is.na<http://is.na>(xx) & !is.na<http://is.na>(x)]))
>   xx
> }


From jori@mey@ @ending from gm@il@com  Tue Jun 12 20:47:04 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Tue, 12 Jun 2018 20:47:04 +0200
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <23327.62641.524004.675246@stat.math.ethz.ch>
References: <CAGg4omXVJj3vnK1+Z4zaHeuQ5Q+GjsOcvY22D13-okpjzWCsuA@mail.gmail.com>
 <710BDF90-B13A-47CE-980B-9276293C7E45@llnl.gov>
 <CAGg4omUa-ZU5hrKzj1a6e154bTOCge_T8kahcwEzFSpPxXG3tg@mail.gmail.com>
 <CAO1zAVZ0Wwpqm75JGCNz1YVvBC2FSLL8byBEPLa1-7EQjP09UQ@mail.gmail.com>
 <CAO1zAVbD-aB-ou2Tef5C9bMnvCW8mi-4igmnera7T=AUj74-YA@mail.gmail.com>
 <5E75C482-6E29-4F57-A65A-424F9669CAC9@dans.knaw.nl>
 <CAMFmJsnvFTHPz_+zCaAfgFsDTRpgCpQyKNGtEZSFc_S9z8Q9YQ@mail.gmail.com>
 <DEC562CF-F198-4762-BA8F-D00178B7E9E0@dans.knaw.nl>
 <23327.62641.524004.675246@stat.math.ethz.ch>
Message-ID: <CAO1zAVbrSACzKS0+jqfrMEZmh7xMk5B98hi2dZUz0pECBRSdZQ@mail.gmail.com>

On Tue, Jun 12, 2018 at 6:28 PM, Martin Maechler <maechler at stat.math.ethz.ch
> wrote:

>
> I think we should allow 'year' to be "double" instead, and so it
> could also be +Inf or -Inf and we'd nicely cover
> the conversions from and to 'numeric' -- which is really used
> internally for dates and date-times in  POSIXct.
>
> Martin
>
>
That would be perfect and tackles both consistency with other formats and
the confusing print() output. I'm all for it.
Cheers
Joris



-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From min@h@ll @ending from @cm@org  Wed Jun 13 01:23:36 2018
From: min@h@ll @ending from @cm@org (Greg Minshall)
Date: Tue, 12 Jun 2018 16:23:36 -0700
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: Your message of "Tue, 12 Jun 2018 18:28:33 +0200."
 <23327.62641.524004.675246@stat.math.ethz.ch>
Message-ID: <21039.1528845816@minshall-apollo.minshall.org>

Martin, et al.,

> I think we should allow 'year' to be "double" instead, and so it
> could also be +Inf or -Inf and we'd nicely cover 
> the conversions from and to 'numeric' -- which is really used
> internally for dates and date-times in  POSIXct.

storing years as a double makes me worry slightly about
----
> year <- 1e50
> (year+1)-year
[1] 0
----
which is not how one thinks of years (or integers) as behaving.

cheers, Greg

ps -- sorry for the ">" overloading!


From jennifer@@@lyon @ending from gm@il@com  Wed Jun 13 01:46:29 2018
From: jennifer@@@lyon @ending from gm@il@com (Jennifer Lyon)
Date: Tue, 12 Jun 2018 17:46:29 -0600
Subject: [Rd] readLines function with R >= 3.5.0
Message-ID: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>

Hi:

I have also just stumbled into this bug. Unfortunately, I can not
change the data my program receives from stdin. My code runs in a
larger system and stdin is sent to a Docker container running my R
code. The protocol is I read a line, readLines("stdin", n=1), do some
actions, send output on stdout, and wait for the next set of data.  I
don't have control over this protocol, so I can't use the ^D
workaround.

I am open for other workaround suggestions. The single line is
actually JSON and can be quite large. If there isn't something else
cleaner, I am going to try readChar() in a while loop looking for \n
but I'm guessing that would likely be too slow.  I am open to other
workaround solutions. For the moment I have reverted back to R 3.4.4.

Thanks for any suggestions.

Jen.


>> >>>>> Martin Maechler
>> >>>>>     on Mon, 28 May 2018 10:28:01 +0200 writes:
>>
>> >>>>> Ralf Stubner
>> >>>>>     on Fri, 25 May 2018 19:18:58 +0200 writes:
>>
>>     >> Dear all, I would like to draw you attention to this
>>     >> question on SO:
>>     >>
https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r
>>
>>
>>     >> Based on the OP's code I used the script
>>
>>     >> #######################################
>>     >> create_matrix <- function() {
>>     >> cat("Write the numbers of vertices: ")
>>     >> user_input <- readLines("stdin", n=1)
>>     >> user_input <- as.numeric(user_input)
>>     >> print(user_input)
>>     >> }
>>     >> create_matrix()
>>     >> #######################################
>>
>>     >> and called it with "R -f <filename>" from the command line.
>>
>>     >> With 'R version 3.4.4 (2018-03-15) -- "Someone to Lean On"' the
script
>>     >> prints the inputed number as expected. With both 'R version 3.5.0
>>     >> (2018-04-23) -- "Joy in Playing"' and 'R Under development
(unstable)
>>     >> (2018-05-19 r74746) -- "Unsuffered Consequences"' the script does
not
>>     >> continue after inputing a number.
>>
>>     > I can confirm.
>>     > It "works" if you additionally (the [Enter], i.e., EOL) you also
>>     > "send" an EOF -- in Unix alikes via  <Ctrl>-D
>>
>>     > The same happens if you use  'Rscript <filename>'
>>
>>     > I'm not the expert here, but am close to sure that we (R core)
>>     > did not intend this change, when fixing other somewhat subtle
>>     > bugs in Rscript / 'R -f'
>>
>>     > Martin Maechler
>>
>> The same behavior in regular R , no need for a script etc.
>>
>> > str(readLines("stdin", n=1))
>>
>> then in addition to the input  you need to "give" an EOF (Ctrl D) in R
>= 3.5.0
>>
>> Interestingly, everything works fine if you use  stdin() instead
>> of "stdin" :
>>
>> > rr <- readLines(stdin(), n=1)
>> foo
>> > rr
>> [1] "foo"
>> >
>> ----------
>>
>> So, for now use  stdin()  which is much clearer than the string
>> "stdin" anyway
>>
>> Martin Maechler

	[[alternative HTML version deleted]]


From l@wrence@mich@el @ending from gene@com  Wed Jun 13 04:27:49 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Tue, 12 Jun 2018 19:27:49 -0700
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>
References: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>
Message-ID: <CAOQ5Nycu92AWKSx9bbQMb0tscSLryLjZKYOaSrx2UJcAuH5_Qw@mail.gmail.com>

Hi Jen,

This was already resolved for R 3.5.1 by just disabling buffering on
terminal file connections like stdin.

Sounds like you might want to be running a web service or something
instead though.

Michael

On Tue, Jun 12, 2018 at 4:46 PM, Jennifer Lyon
<jennifer.s.lyon at gmail.com> wrote:
> Hi:
>
> I have also just stumbled into this bug. Unfortunately, I can not
> change the data my program receives from stdin. My code runs in a
> larger system and stdin is sent to a Docker container running my R
> code. The protocol is I read a line, readLines("stdin", n=1), do some
> actions, send output on stdout, and wait for the next set of data.  I
> don't have control over this protocol, so I can't use the ^D
> workaround.
>
> I am open for other workaround suggestions. The single line is
> actually JSON and can be quite large. If there isn't something else
> cleaner, I am going to try readChar() in a while loop looking for \n
> but I'm guessing that would likely be too slow.  I am open to other
> workaround solutions. For the moment I have reverted back to R 3.4.4.
>
> Thanks for any suggestions.
>
> Jen.
>
>
>>> >>>>> Martin Maechler
>>> >>>>>     on Mon, 28 May 2018 10:28:01 +0200 writes:
>>>
>>> >>>>> Ralf Stubner
>>> >>>>>     on Fri, 25 May 2018 19:18:58 +0200 writes:
>>>
>>>     >> Dear all, I would like to draw you attention to this
>>>     >> question on SO:
>>>     >>
> https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r
>>>
>>>
>>>     >> Based on the OP's code I used the script
>>>
>>>     >> #######################################
>>>     >> create_matrix <- function() {
>>>     >> cat("Write the numbers of vertices: ")
>>>     >> user_input <- readLines("stdin", n=1)
>>>     >> user_input <- as.numeric(user_input)
>>>     >> print(user_input)
>>>     >> }
>>>     >> create_matrix()
>>>     >> #######################################
>>>
>>>     >> and called it with "R -f <filename>" from the command line.
>>>
>>>     >> With 'R version 3.4.4 (2018-03-15) -- "Someone to Lean On"' the
> script
>>>     >> prints the inputed number as expected. With both 'R version 3.5.0
>>>     >> (2018-04-23) -- "Joy in Playing"' and 'R Under development
> (unstable)
>>>     >> (2018-05-19 r74746) -- "Unsuffered Consequences"' the script does
> not
>>>     >> continue after inputing a number.
>>>
>>>     > I can confirm.
>>>     > It "works" if you additionally (the [Enter], i.e., EOL) you also
>>>     > "send" an EOF -- in Unix alikes via  <Ctrl>-D
>>>
>>>     > The same happens if you use  'Rscript <filename>'
>>>
>>>     > I'm not the expert here, but am close to sure that we (R core)
>>>     > did not intend this change, when fixing other somewhat subtle
>>>     > bugs in Rscript / 'R -f'
>>>
>>>     > Martin Maechler
>>>
>>> The same behavior in regular R , no need for a script etc.
>>>
>>> > str(readLines("stdin", n=1))
>>>
>>> then in addition to the input  you need to "give" an EOF (Ctrl D) in R
>>= 3.5.0
>>>
>>> Interestingly, everything works fine if you use  stdin() instead
>>> of "stdin" :
>>>
>>> > rr <- readLines(stdin(), n=1)
>>> foo
>>> > rr
>>> [1] "foo"
>>> >
>>> ----------
>>>
>>> So, for now use  stdin()  which is much clearer than the string
>>> "stdin" anyway
>>>
>>> Martin Maechler
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@echler @ending from @t@t@m@th@ethz@ch  Wed Jun 13 11:19:16 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 13 Jun 2018 11:19:16 +0200
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <CAOQ5Nycu92AWKSx9bbQMb0tscSLryLjZKYOaSrx2UJcAuH5_Qw@mail.gmail.com>
References: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>
 <CAOQ5Nycu92AWKSx9bbQMb0tscSLryLjZKYOaSrx2UJcAuH5_Qw@mail.gmail.com>
Message-ID: <23328.57748.741869.824124@stat.math.ethz.ch>

>>>>> Michael Lawrence 
>>>>>     on Tue, 12 Jun 2018 19:27:49 -0700 writes:

    > Hi Jen, This was already resolved for R 3.5.1 by just
    > disabling buffering on terminal file connections like stdin.

and before R 3.5.1 exists, *and*
as the change is also not yet available in R patched (!)
this means using a version of
"R-devel", e.g. for Windows available from
   https://cloud.r-project.org/bin/windows/base/rdevel.html

Martin

    > Sounds like you might want to be running a web service or
    > something instead though.

    > Michael

    > On Tue, Jun 12, 2018 at 4:46 PM, Jennifer Lyon
    > <jennifer.s.lyon at gmail.com> wrote:
    >> Hi:
    >> 
    >> I have also just stumbled into this bug. Unfortunately, I
    >> can not change the data my program receives from
    >> stdin. My code runs in a larger system and stdin is sent
    >> to a Docker container running my R code. The protocol is
    >> I read a line, readLines("stdin", n=1), do some actions,
    >> send output on stdout, and wait for the next set of data.
    >> I don't have control over this protocol, so I can't use
    >> the ^D workaround.
    >> 
    >> I am open for other workaround suggestions. The single
    >> line is actually JSON and can be quite large. If there
    >> isn't something else cleaner, I am going to try
    >> readChar() in a while loop looking for \n but I'm
    >> guessing that would likely be too slow.  I am open to
    >> other workaround solutions. For the moment I have
    >> reverted back to R 3.4.4.
    >> 
    >> Thanks for any suggestions.
    >> 
    >> Jen.
    >> 
    >> 
    >>>> >>>>> Martin Maechler >>>>> on Mon, 28 May 2018
    >>>> 10:28:01 +0200 writes:
    >>>> 
    >>>> >>>>> Ralf Stubner >>>>> on Fri, 25 May 2018 19:18:58
    >>>> +0200 writes:
    >>>> 
    >>>> >> Dear all, I would like to draw you attention to this
    >>>> >> question on SO:
    >>>> >>
    >> https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r
    >>>> 
    >>>> 
    >>>> >> Based on the OP's code I used the script
    >>>> 
    >>>> >> #######################################
    >>>> >> create_matrix <- function() { >> cat("Write the
    >>>> numbers of vertices: ") >> user_input <-
    >>>> readLines("stdin", n=1) >> user_input <-
    >>>> as.numeric(user_input) >> print(user_input) >> } >>
    >>>> create_matrix()
    >>>> >> #######################################
    >>>> 
    >>>> >> and called it with "R -f <filename>" from the
    >>>> command line.
    >>>> 
    >>>> >> With 'R version 3.4.4 (2018-03-15) -- "Someone to
    >>>> Lean On"' the
    >> script
    >>>> >> prints the inputed number as expected. With both 'R
    >>>> version 3.5.0 >> (2018-04-23) -- "Joy in Playing"' and
    >>>> 'R Under development
    >> (unstable)
    >>>> >> (2018-05-19 r74746) -- "Unsuffered Consequences"'
    >>>> the script does
    >> not
    >>>> >> continue after inputing a number.
    >>>> 
    >>>> > I can confirm.  > It "works" if you additionally (the
    >>>> [Enter], i.e., EOL) you also > "send" an EOF -- in Unix
    >>>> alikes via <Ctrl>-D
    >>>> 
    >>>> > The same happens if you use 'Rscript <filename>'
    >>>> 
    >>>> > I'm not the expert here, but am close to sure that we
    >>>> (R core) > did not intend this change, when fixing
    >>>> other somewhat subtle > bugs in Rscript / 'R -f'
    >>>> 
    >>>> > Martin Maechler
    >>>> 
    >>>> The same behavior in regular R , no need for a script
    >>>> etc.
    >>>> 
    >>>> > str(readLines("stdin", n=1))
    >>>> 
    >>>> then in addition to the input you need to "give" an EOF
    >>>> (Ctrl D) in R
    >>> = 3.5.0
    >>>> 
    >>>> Interestingly, everything works fine if you use stdin()
    >>>> instead of "stdin" :
    >>>> 
    >>>> > rr <- readLines(stdin(), n=1) foo > rr [1] "foo"
    >>>> >
    >>>> ----------
    >>>> 
    >>>> So, for now use stdin() which is much clearer than the
    >>>> string "stdin" anyway
    >>>> 
    >>>> Martin Maechler
    >> 
    >> [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Wed Jun 13 13:36:48 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 13 Jun 2018 13:36:48 +0200
Subject: [Rd] Rgui 3.5.0 print issue
In-Reply-To: <005401d40164$029bf680$07d3e380$@istat.it>
References: <005401d40164$029bf680$07d3e380$@istat.it>
Message-ID: <c65ab1b1-5ac0-b4b1-72d9-b1fc85c57669@gmail.com>

Thanks for the report, I can reproduce. In Rgui, the output of 
"print(cars)" is incorrect, the line numbers appear as part of the 
command prompt string (printed in reverse order, without newlines), 
while the rest of the output is correctly displayed. This is a bug, I 
will have a closer look

Best,
Tomas

On 06/11/2018 11:10 AM, Diego Zardetto wrote:
> Dear all,
>
>   
>
> I would like to have your opinion about an issue I have recently run into
> while using tcltk in R 3.5.0 under Windows 7 64bit.
>
>   
>
> Here is a reproducible example of the issue, along with information about
> platform and OS.
>
>   
>
> ###############################################################
>
> # R 3.5.0 issue: print does not work properly for data.frames #
>
> #                when called from a tcltk window.             #
>
> #                                                             #
>
> # NOTE: The issue shows up when using Rgui, but disappears    #
>
> #       if Rterm is used.                                     #
>
> #                                                             #
>
> # NOTE: The issue starts with R 3.5.0, and is still there     #
>
> #       in R 3.5.0 patched build for Windows, as well as in   #
>
> #       R-Devel.                                              #
>
> ###############################################################
>
> # Reproducible example
>
> library(tcltk)
>
> data(cars)
>
> win1 <- tktoplevel()
>
> butOK <- tkbutton(win1, text = "OK", command = function() print(cars))
>
> tkgrid(butOK)
>
> # NOTE: Upon pressing OK, the rownames of cars are not printed on
>
> #       screen, but end up into R's prompt.
>
>   
>
>   
>
> ################################
>
> # R version and platform info. #
>
> ################################
>
>> R.version
>                 _
>
> platform       x86_64-w64-mingw32
>
> arch           x86_64
>
> os             mingw32
>
> system         x86_64, mingw32
>
> status
>
> major          3
>
> minor          5.0
>
> year           2018
>
> month          04
>
> day            23
>
> svn rev        74626
>
> language       R
>
> version.string R version 3.5.0 (2018-04-23)
>
> nickname       Joy in Playing
>
>   
>
> ##########################
>
> # Operating system info. #
>
> ##########################
>
>> Sys.info()
>                       sysname                      release
>
>                     "Windows"                      "7 x64"
>
>                       version                     nodename
>
> "build 7601, Service Pack 1"                    "PC79258"
>
>                       machine                        login
>
>                      "x86-64"                   "zardetto"
>
>                          user               effective_user
>
>                    "zardetto"                   "zardetto"
>
>   
>
>   
>
> I would appreciate any feedback you could provide.
>
>   
>
> Thanks
>
> D.
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From l@wrence@mich@el @ending from gene@com  Wed Jun 13 14:24:07 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Wed, 13 Jun 2018 05:24:07 -0700
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <23328.57748.741869.824124@stat.math.ethz.ch>
References: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>
 <CAOQ5Nycu92AWKSx9bbQMb0tscSLryLjZKYOaSrx2UJcAuH5_Qw@mail.gmail.com>
 <23328.57748.741869.824124@stat.math.ethz.ch>
Message-ID: <CAOQ5Nydjqo7Rg8CdSa7rTDSGkJcJFHGuZPwwXwTDJeBzdGL7nA@mail.gmail.com>

Are you sure it's not available in patched? It's definitely in the
source since 6/1.

Michael


On Wed, Jun 13, 2018 at 2:19 AM, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>>>>>> Michael Lawrence
>>>>>>     on Tue, 12 Jun 2018 19:27:49 -0700 writes:
>
>     > Hi Jen, This was already resolved for R 3.5.1 by just
>     > disabling buffering on terminal file connections like stdin.
>
> and before R 3.5.1 exists, *and*
> as the change is also not yet available in R patched (!)
> this means using a version of
> "R-devel", e.g. for Windows available from
>    https://cloud.r-project.org/bin/windows/base/rdevel.html
>
> Martin
>
>     > Sounds like you might want to be running a web service or
>     > something instead though.
>
>     > Michael
>
>     > On Tue, Jun 12, 2018 at 4:46 PM, Jennifer Lyon
>     > <jennifer.s.lyon at gmail.com> wrote:
>     >> Hi:
>     >>
>     >> I have also just stumbled into this bug. Unfortunately, I
>     >> can not change the data my program receives from
>     >> stdin. My code runs in a larger system and stdin is sent
>     >> to a Docker container running my R code. The protocol is
>     >> I read a line, readLines("stdin", n=1), do some actions,
>     >> send output on stdout, and wait for the next set of data.
>     >> I don't have control over this protocol, so I can't use
>     >> the ^D workaround.
>     >>
>     >> I am open for other workaround suggestions. The single
>     >> line is actually JSON and can be quite large. If there
>     >> isn't something else cleaner, I am going to try
>     >> readChar() in a while loop looking for \n but I'm
>     >> guessing that would likely be too slow.  I am open to
>     >> other workaround solutions. For the moment I have
>     >> reverted back to R 3.4.4.
>     >>
>     >> Thanks for any suggestions.
>     >>
>     >> Jen.
>     >>
>     >>
>     >>>> >>>>> Martin Maechler >>>>> on Mon, 28 May 2018
>     >>>> 10:28:01 +0200 writes:
>     >>>>
>     >>>> >>>>> Ralf Stubner >>>>> on Fri, 25 May 2018 19:18:58
>     >>>> +0200 writes:
>     >>>>
>     >>>> >> Dear all, I would like to draw you attention to this
>     >>>> >> question on SO:
>     >>>> >>
>     >> https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r
>     >>>>
>     >>>>
>     >>>> >> Based on the OP's code I used the script
>     >>>>
>     >>>> >> #######################################
>     >>>> >> create_matrix <- function() { >> cat("Write the
>     >>>> numbers of vertices: ") >> user_input <-
>     >>>> readLines("stdin", n=1) >> user_input <-
>     >>>> as.numeric(user_input) >> print(user_input) >> } >>
>     >>>> create_matrix()
>     >>>> >> #######################################
>     >>>>
>     >>>> >> and called it with "R -f <filename>" from the
>     >>>> command line.
>     >>>>
>     >>>> >> With 'R version 3.4.4 (2018-03-15) -- "Someone to
>     >>>> Lean On"' the
>     >> script
>     >>>> >> prints the inputed number as expected. With both 'R
>     >>>> version 3.5.0 >> (2018-04-23) -- "Joy in Playing"' and
>     >>>> 'R Under development
>     >> (unstable)
>     >>>> >> (2018-05-19 r74746) -- "Unsuffered Consequences"'
>     >>>> the script does
>     >> not
>     >>>> >> continue after inputing a number.
>     >>>>
>     >>>> > I can confirm.  > It "works" if you additionally (the
>     >>>> [Enter], i.e., EOL) you also > "send" an EOF -- in Unix
>     >>>> alikes via <Ctrl>-D
>     >>>>
>     >>>> > The same happens if you use 'Rscript <filename>'
>     >>>>
>     >>>> > I'm not the expert here, but am close to sure that we
>     >>>> (R core) > did not intend this change, when fixing
>     >>>> other somewhat subtle > bugs in Rscript / 'R -f'
>     >>>>
>     >>>> > Martin Maechler
>     >>>>
>     >>>> The same behavior in regular R , no need for a script
>     >>>> etc.
>     >>>>
>     >>>> > str(readLines("stdin", n=1))
>     >>>>
>     >>>> then in addition to the input you need to "give" an EOF
>     >>>> (Ctrl D) in R
>     >>> = 3.5.0
>     >>>>
>     >>>> Interestingly, everything works fine if you use stdin()
>     >>>> instead of "stdin" :
>     >>>>
>     >>>> > rr <- readLines(stdin(), n=1) foo > rr [1] "foo"
>     >>>> >
>     >>>> ----------
>     >>>>
>     >>>> So, for now use stdin() which is much clearer than the
>     >>>> string "stdin" anyway
>     >>>>
>     >>>> Martin Maechler
>     >>
>     >> [[alternative HTML version deleted]]
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel


From becker@g@be @ending from gene@com  Wed Jun 13 18:20:16 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Wed, 13 Jun 2018 09:20:16 -0700
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: <21039.1528845816@minshall-apollo.minshall.org>
References: <23327.62641.524004.675246@stat.math.ethz.ch>
 <21039.1528845816@minshall-apollo.minshall.org>
Message-ID: <CAMFmJsm9ut8dHQLY89vJZ7-ocofM3WEPxRdTYhnB-fL3+by_wQ@mail.gmail.com>

Greg,

I see what you mean, but on the other hand, that's not how we think about
real numbers working either, and doubles have that behavior generally. It
might be possible to put checks in (with a potentially non-trivial overhead
cost) to disallow that kind of thing, but again R (and everyone else, I
think?) doesn't do so for regular doubles.

Also, I would expect the year 1e50 and the "year" Inf to be functionally
equivalent in meaning (and largely meaningless) in context.

Best,
~G

On Tue, Jun 12, 2018 at 4:23 PM, Greg Minshall <minshall at acm.org> wrote:

> Martin, et al.,
>
> > I think we should allow 'year' to be "double" instead, and so it
> > could also be +Inf or -Inf and we'd nicely cover
> > the conversions from and to 'numeric' -- which is really used
> > internally for dates and date-times in  POSIXct.
>
> storing years as a double makes me worry slightly about
> ----
> > year <- 1e50
> > (year+1)-year
> [1] 0
> ----
> which is not how one thinks of years (or integers) as behaving.
>
> cheers, Greg
>
> ps -- sorry for the ">" overloading!
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Gabriel Becker, Ph.D
Scientist
Bioinformatics and Computational Biology
Genentech Research

	[[alternative HTML version deleted]]


From min@h@ll @ending from @cm@org  Thu Jun 14 01:27:26 2018
From: min@h@ll @ending from @cm@org (Greg Minshall)
Date: Wed, 13 Jun 2018 16:27:26 -0700
Subject: [Rd] 
 Date class shows Inf as NA; this confuses the use of is.na()
In-Reply-To: Your message of "Wed, 13 Jun 2018 09:20:16 -0700."
 <CAMFmJsm9ut8dHQLY89vJZ7-ocofM3WEPxRdTYhnB-fL3+by_wQ@mail.gmail.com>
Message-ID: <26033.1528932446@minshall-apollo.minshall.org>

Gabe,

> Also, I would expect the year 1e50 and the "year" Inf to be functionally
> equivalent in meaning (and largely meaningless) in context.

indeed.

thanks, Greg


From d@tr7320 @ending from uni@@ydney@edu@@u  Thu Jun 14 14:00:12 2018
From: d@tr7320 @ending from uni@@ydney@edu@@u (Dario Strbenac)
Date: Thu, 14 Jun 2018 12:00:12 +0000
Subject: [Rd] makeCluster Stall on 32-bit Windows
Message-ID: <SYAPR01MB25584AB015A494A631B8A031CD7D0@SYAPR01MB2558.ausprd01.prod.outlook.com>

Good day,

I'm trying the example cl <- makeCluster(2, type = "SOCK") from the makeCluster documentation and the R command prompt never returns. I am using a 32-bit Windows 10 computer. The problem doesn't happen on another 64-bit Windows 10 computer but does happen on another 32-bit Windows 7 computer. Can anyone reproduce it? Are there any other options that can be passed to makeCluster which could get it going?

R version 3.5.0 (2018-04-23)
Platform: i386-w64-mingw32/i386 (32-bit)
Running under: Windows >= 8 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_Australia.1252  LC_CTYPE=English_Australia.1252   
[3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C                      
[5] LC_TIME=English_Australia.1252    

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] snow_0.4-2

loaded via a namespace (and not attached):
[1] compiler_3.5.0 tools_3.5.0    yaml_2.1.19 

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia


From nil@@on@henric @ending from gm@il@com  Thu Jun 14 14:49:44 2018
From: nil@@on@henric @ending from gm@il@com (Henric Winell)
Date: Thu, 14 Jun 2018 14:49:44 +0200
Subject: [Rd] makeCluster Stall on 32-bit Windows
In-Reply-To: <SYAPR01MB25584AB015A494A631B8A031CD7D0@SYAPR01MB2558.ausprd01.prod.outlook.com>
References: <SYAPR01MB25584AB015A494A631B8A031CD7D0@SYAPR01MB2558.ausprd01.prod.outlook.com>
Message-ID: <d93f60e8-e47d-3ba0-3c73-ca5af80fe7f9@gmail.com>

Hi Dario,

On 2018-06-14 14:00, Dario Strbenac wrote:

> Good day,
> 
> I'm trying the example cl <- makeCluster(2, type = "SOCK")

Why use the 'snow' package and not 'parallel'?

> from the makeCluster documentation and the R command prompt never 
> returns. I am using a 32-bit Windows 10 computer. The problem doesn't
> happen on another 64-bit Windows 10 computer but does happen on
> another 32-bit Windows 7 computer. Can anyone reproduce it? Are there
> any other options that can be passed to makeCluster which could get
> it going?

Sorry, I don't have access to a 32-bit W10 machine for testing.

Since the worker processes communicate using sockets I guess that the 
Windows firewall on your machine is blocking R from using the necessary 
ports (11000-11999).  Upon first use on a freshly installed 64-bit W10 a 
window pops-up -- "Windows Firewall has blocked this app", or something 
like that -- where you can allow access.  As long as this window is 
open, the command prompt is not returned.


Henric Winell

P.S.  This topic is probably not appropriate for R-devel and follow-ups 
should likely be directed to R-help instead.  D.S.



> R version 3.5.0 (2018-04-23)
> Platform: i386-w64-mingw32/i386 (32-bit)
> Running under: Windows >= 8 (build 9200)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_Australia.1252  LC_CTYPE=English_Australia.1252
> [3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C
> [5] LC_TIME=English_Australia.1252
> 
> attached base packages:
> [1] parallel  stats     graphics  grDevices utils     datasets  methods
> [8] base
> 
> other attached packages:
> [1] snow_0.4-2
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.5.0 tools_3.5.0    yaml_2.1.19
> 
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From d@tr7320 @ending from uni@@ydney@edu@@u  Fri Jun 15 13:00:17 2018
From: d@tr7320 @ending from uni@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 15 Jun 2018 11:00:17 +0000
Subject: [Rd] makeCluster Stall on 32-bit Windows
In-Reply-To: <d93f60e8-e47d-3ba0-3c73-ca5af80fe7f9@gmail.com>
References: <SYAPR01MB25584AB015A494A631B8A031CD7D0@SYAPR01MB2558.ausprd01.prod.outlook.com>,
 <d93f60e8-e47d-3ba0-3c73-ca5af80fe7f9@gmail.com>
Message-ID: <MEAPR01MB2550CF4F83D8101BE5624167CD7C0@MEAPR01MB2550.ausprd01.prod.outlook.com>

Good day,

The problem happens when using the makeCluster function from either parallel or snow packages. I do not see a dialog box appear regarding Windows Firewall. Turning off the firewall doesn't resolve the issue. I originally experienced this issue while using bplapply defined in BiocParallel and was recommended to ask on r-devel mailing list since bplapply utilises makeCluster. CRAN only checks 64-bit computers, so it might not have been checked on a 32-bit computer.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From peter@l@ngfelder @ending from gm@il@com  Fri Jun 15 22:53:35 2018
From: peter@l@ngfelder @ending from gm@il@com (Peter Langfelder)
Date: Fri, 15 Jun 2018 13:53:35 -0700
Subject: [Rd] CRAN Check warnings with GCC 8.1
In-Reply-To: <caac2c47-0021-e23f-24c5-44b3f8806670@stats.ox.ac.uk>
References: <caac2c47-0021-e23f-24c5-44b3f8806670@stats.ox.ac.uk>
Message-ID: <CA+hbrhWrmuSvHF86e6FdiMA1RgcC_WaJHhgUOa8VSTngd0JJrQ@mail.gmail.com>

Some time ago I (and some other CRAN package maintainers) got an email
from Brian Ripley (copied below) regarding compiler warnings under gcc
8.1. In my case this concerns package PropClust
(https://CRAN.R-project.org/package=PropClust). The check with gcc 8.1
(https://www.stats.ox.ac.uk/pub/bdr/gcc8/PropClust.out) produced a
warning about an uninitialized variable.

I cannot reproduce the warning under gcc 8.1.1 using standard R CMD
check (with or without --as-cran) under R Under development (unstable)
(2018-05-24 r74781); the check finishes "OK" without any warnings or
notes.

Does anyone have any suggestions as to how to reproduce the warning,
or is this something specific to a particular gcc version? My gcc
version 8.1.1 20180502 (Red Hat 8.1.1-1).

Thanks,

Peter



On Sat, May 5, 2018 at 11:53 PM Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>
> This concerns CRAN packages
>
> Amelia C50 Cubist Cyclops DetSel GENLIB IRISSeismic KSgeneral
> MigClim MonetDBLite Numero OpenMx PBSmapping PSPManalysis
> PropClust RArcInfo RandomFields RandomFieldsUtils RcppMsgPack
> RcppParallel RcppRedis RecordLinkage Rmalschains RnavGraph Rvcg
> RxODE SiMRiv antiword bigrquery bsamGP catnet coxme dbarts
> dggridR divest dpglasso earth epanet2toolkit fs gap geojsonsf
> gglasso graphql hashmap haven hier.part imager iptools jiebaR
> kernlab lpridge lvec mlvocab mongolite nandb ore phreeqc polyclip
> qtbase rbamtools rebmix rexpokit rgdal rioja rlas rpf rphast
> rtfbs s2 scio sdnet sdwd sequoia tmlenet tth udpipe validatejsonr
> velox wrassp
>
> GCC 8.1 (the current release) reports more compilation issues than
> previous versions, the more important of which are reported as check
> warnings by R CMD check (in R 3.5.0 and later) and as 'Additional
> issues' on the CRAN check pages.
>
> GCC 8 is already part of the Fedora Linux 28 release and in Debian
> unstable.  Although you may not have access to it yet, the warnings are
> self-contained and usually easy to understand (often that buffers are
> too small).
>
> Please see the reports for your package(s) and correct ASAP.  For
> packages gap and rexpokit these include a .log file with the complete
> compilation log.
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford


From bbolker @ending from gm@il@com  Sun Jun 17 17:40:38 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Sun, 17 Jun 2018 11:40:38 -0400
Subject: [Rd] aic() component in GLM-family objects
In-Reply-To: <23317.20705.579932.679153@stat.math.ethz.ch>
References: <bfa1a750-46c3-efd2-619c-8dcb155e6f86@mcmaster.ca>
 <23317.20705.579932.679153@stat.math.ethz.ch>
Message-ID: <CABghstSQROhXVrdxzHtH3gTJc_rB-pFY2N7_pgwwhV6LRLp=kQ@mail.gmail.com>

FWIW p. 206 of the White Book gives the following for
names(binomial()): family, names, link, inverse, deriv, initialize,
variance, deviance, weight.

  So $aic wasn't there In The Beginning.  I haven't done any more
archaeology to try to figure out when/by whom it was first introduced
...

 Section 6.3.3, on extending families, doesn't give any other relevant info.

A patch for src/library/stats/man/family.Rd below: please check what
I've said about $aic and $mu.eta to make sure they're correct!  I can
submit this to the r bug list if preferred.

----
Index: family.Rd
===================================================================
--- family.Rd    (revision 74904)
+++ family.Rd    (working copy)
@@ -31,7 +31,7 @@
 \arguments{
   \item{link}{a specification for the model link function.  This can be
     a name/expression, a literal character string, a length-one character
-    vector or an object of class
+    vector, or an object of class
     \code{"\link[=make.link]{link-glm}"} (such as generated by
     \code{\link{make.link}}) provided it is not specified
     \emph{via} one of the standard names given next.
@@ -45,7 +45,7 @@
     the \code{Gamma} family the links \code{inverse}, \code{identity}
      and \code{log};
     the \code{poisson} family the links \code{log}, \code{identity},
-    and \code{sqrt} and the \code{inverse.gaussian} family the links
+    and \code{sqrt}; and the \code{inverse.gaussian} family the links
     \code{1/mu^2}, \code{inverse}, \code{identity}
     and \code{log}.

@@ -105,8 +105,8 @@
 \note{
   The \code{link} and \code{variance} arguments have rather awkward
   semantics for back-compatibility.  The recommended way is to supply
-  them is as quoted character strings, but they can also be supplied
-  unquoted (as names or expressions).  In addition, they can also be
+  them as quoted character strings, but they can also be supplied
+  unquoted (as names or expressions).  Additionally, they can be
   supplied as a length-one character vector giving the name of one of
   the options, or as a list (for \code{link}, of class
   \code{"link-glm"}).  The restrictions apply only to links given as
@@ -130,10 +130,18 @@
   \item{dev.resids}{function giving the deviance residuals as a function
     of \code{(y, mu, wt)}.}
   \item{aic}{function giving the AIC value if appropriate (but \code{NA}
-    for the quasi- families).  See \code{\link{logLik}} for the assumptions
-      made about the dispersion parameter.}
-  \item{mu.eta}{function: derivative \code{function(eta)}
-    \eqn{d\mu/d\eta}.}
+    for the quasi- families).  More precisely, this function
+    returns \eqn{-2 L + 2 s}, where \eqn{L} is the log-likelihood and \eqn{s}
+    is the number of estimated scale parameters; the penalty term for the
+    location parameters is added elsewhere.
+    See \code{\link{logLik}} for the assumptions
+    made about the dispersion parameter.}
+  \item{mu.eta}{function: derivative of the inverse-link function
+    with respect to the linear predictor. If the inverse-link
+    function is \eqn{\mu=g^{-1}(\eta)}{mu=ginv(eta)}
+    where \eqn{eta}{\eta} is the value
+    of the linear predictor, then this function returns
+    \eqn{d(g^{-1})/d\eta=d\mu/d\eta}{d(ginv(eta))/d(eta)=d(mu)/d(eta)}.}
   \item{initialize}{expression.  This needs to set up whatever data
     objects are needed for the family as well as \code{n} (needed for
     AIC in the binomial family) and \code{mustart} (see \code{\link{glm}}).}
@@ -224,8 +232,8 @@
 ## which case use an offset of 0 in the corresponding formula
 ## to get the null deviance right.

-## Binomial with identity link: often not a good idea.
-\dontrun{binomial(link = make.link("identity"))}
+## Binomial with identity link: often computationally and
conceptually difficult
+\dontrun{binomial(link = "identity")}

 ## tests of quasi
 x <- rnorm(100)
@@ -236,7 +244,7 @@
 glm(y ~ x, family = quasi(variance = "mu^2", link = "log"))
 \dontrun{glm(y ~ x, family = quasi(variance = "mu^3", link = "log")) # fails}
 y <- rbinom(100, 1, plogis(x))
-# needs to set a starting value for the next fit
+# need to set a starting value for the next fit
 glm(y ~ x, family = quasi(variance = "mu(1-mu)", link = "logit"),
start = c(0,1))
 }
 \keyword{models}

On Mon, Jun 4, 2018 at 10:46 AM, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>>>>>> Ben Bolker
>>>>>>     on Sun, 3 Jun 2018 17:33:18 -0400 writes:
>
>     > Is it generally known/has it been previously discussed here that the
>     > $aic() component in GLM-family objects (e.g. results of binomial(),
>     > poisson(), etc.) does not as implemented actually return the AIC, but
>     > rather -2*log-likelihood + 2*(model_has_scale_parameter) ?
>
> This rings a faint bell from the last millennium with me,
> and the following "fortune"  may contain the answer implicitly :
>
> ------------------------------------------------------------
>   > if(!require("fortunes")) install.packages("fortunes")
>   > fortune("bug compatib")
>
>   For quite a while, bug-for-bug compatibility with S-PLUS v 3.x was considered
>   important to allow people to port their packages between systems.
>      -- Peter Dalgaard
>         R-help (February 2009)
>   >
> ------------------------------------------------------------
>
> Ideally, readers who still have access to a version of S-PLUS / S+
> or who have read and internalized or (even co-written !)
> "The white book", notably Ch.6, may be able to shed a historic
> light on this.
>
> I note that the white book's Appendix B with function help
> pages, has a page ?family.object,  accessible here
>    https://sites.oxy.edu/lengyel/M150/Sueselbeck/helpfiles/family.object.html
>
> which does *not* mention a  <fam>$dev.resid() component, but instead
> allows to use  <fam>$residuals(*, residuals=TRUE)
> get the
> "
>   vector of deviance residual, whose weighted sum of
>   squares is the deviance
> "
>
> Given the above, and also the ?glm entry
>
> || Author(s):
> ||
> ||      The original R implementation of ?glm? was written by Simon Davies
> ||      working for Ross Ihaka at the University of Auckland, but has
> ||      since been extensively re-written by members of the R Core team.
> ||
> ||      The design was inspired by the S function of the same name
> ||      described in Hastie & Pregibon (1992).
>
> actually suggest that it may be hard nowadays to find the
> original "design specs" that Simon and Ross had used at the
> time, and also that they only were _inspired_ by the white book
> chapter 6 (= Hastie & Pregibon (1992)).
>
>
>
>     > Can anyone in this forum gauge how a documentation patch
>     > would be received?
>
> It depends on further answers to your questions (i.e, this
> thread), but I'd currently say  "gratefully".
> I'd expect it would be a patch mainly to
>   src/library/stats/man/family.Rd
>
> Note that help(AIC) has a non-small 'Details' section, but
> indeed it does not mention the family(*)$aic function.
>
>     > This behaviour does not seem to be documented in ?family (or anywhere
>     > else I can find), which says:
>
>     > aic: function giving the AIC value if appropriate (but ?NA? for
>     > the quasi- families).  See ?logLik? for the assumptions made
>     > about the dispersion parameter.
>
>
>     > For a demonstration that e.g. binomial()$aic() is really -2*log L and
>     > not the AIC, see:
>
>     > https://github.com/wch/r-source/blob/trunk/src/library/stats/R/family.R#L317
>
>     > This document
>     > <https://github.com/lme4/lme4/blob/master/misc/notes/deviance.rmd>
>     > explicates the details a bit more ('L' denotes log-likelihood):
>
>     > * family()$aic computes $-2L$, which glm.fit translates to an AIC by
>     >   adding $2k$ and storing it in model$aic
>     > * logLik.default retrieves model$aic and converts it back to a
>     >   log-likelihood
>     > * stats:::AIC.default retrieves the log-likelihood and converts it
>     >   back to an AIC (!)
>     > * family()$dev.resid() computes the squared deviance residuals
>     > * stats:::residuals.glm retrieves these values and takes the signed
>     >   square root
>
>     > cheers
>     > Ben Bolker


From r@ndy@c@@l@i @ending from gm@il@com  Mon Jun 18 00:48:26 2018
From: r@ndy@c@@l@i @ending from gm@il@com (Randy Lai)
Date: Sun, 17 Jun 2018 18:48:26 -0400
Subject: [Rd] A recent commit breaks embedded application on Windows
Message-ID: <EE0A066A-6E82-4E1D-8110-A2D7EBA17121@gmail.com>

A line was added to call `R_SetParams ` in the function `R_SetWin32` 4 days ago.
https://github.com/wch/r-source/blob/2370eca96267e29a69396ef53a52ff5d6f60c65b/src/gnuwin32/system.c#L780
However, `R_SetParams` actually calls `R_SetWin32`.
https://github.com/wch/r-source/blob/30f7698e19fe1d2ce8fe53d85cd6cfad21fc8bb0/src/main/startup.c#L284

So it results in a stack overflow.

Related commit by Luke
https://github.com/wch/r-source/commit/2370eca96267e29a69396ef53a52ff5d6f60c65b#diff-8fa3e687488dfa88a74cb15899cf26e1


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180617/b9325416/attachment.sig>

From luke-tier@ey m@ili@g off uiow@@edu  Mon Jun 18 03:25:56 2018
From: luke-tier@ey m@ili@g off uiow@@edu (luke-tier@ey m@ili@g off uiow@@edu)
Date: Sun, 17 Jun 2018 20:25:56 -0500 (CDT)
Subject: [Rd] A recent commit breaks embedded application on Windows
In-Reply-To: <EE0A066A-6E82-4E1D-8110-A2D7EBA17121@gmail.com>
References: <EE0A066A-6E82-4E1D-8110-A2D7EBA17121@gmail.com>
Message-ID: <alpine.DEB.2.20.1806172025280.2999@luke-Latitude-7480>

Thanks for the report. Fixed in R-devel and R-patched.

Best,

luke

On Sun, 17 Jun 2018, Randy Lai wrote:

> A line was added to call `R_SetParams ` in the function `R_SetWin32` 4 days ago.
> https://github.com/wch/r-source/blob/2370eca96267e29a69396ef53a52ff5d6f60c65b/src/gnuwin32/system.c#L780
> However, `R_SetParams` actually calls `R_SetWin32`.
> https://github.com/wch/r-source/blob/30f7698e19fe1d2ce8fe53d85cd6cfad21fc8bb0/src/main/startup.c#L284
>
> So it results in a stack overflow.
>
> Related commit by Luke
> https://github.com/wch/r-source/commit/2370eca96267e29a69396ef53a52ff5d6f60c65b#diff-8fa3e687488dfa88a74cb15899cf26e1
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From d@tr7320 @ending from uni@@ydney@edu@@u  Mon Jun 18 10:00:04 2018
From: d@tr7320 @ending from uni@@ydney@edu@@u (Dario Strbenac)
Date: Mon, 18 Jun 2018 08:00:04 +0000
Subject: [Rd] Automatic Compression by Save Causes Check Warning
Message-ID: <SYAPR01MB25589AD62D7FA54454DEBD30CD730@SYAPR01MB2558.ausprd01.prod.outlook.com>

Good day,

Save sometimes chooses a compression method which causes a warning during package checking. An example of this is:

measurements <- matrix(round(rnorm(2000*190), 2), nrow = 2000, ncol = 190)
classes <- factor(sample(LETTERS[1:2], 190, replace = TRUE))
save(measurements, classes, file = "data/experiment.RData")

then, when the package is checked,

* checking data for ASCII and uncompressed saves ... WARNING
  
  Note: significantly better compression could be obtained
        by using R CMD build --resave-data
                   old_size new_size compress
  experiment.RData    689Kb    447Kb    bzip2

Could save and R CMD check consistently agree on a suitable compression scheme? Could R CMD check not emit warnings if the data is already small and the alternative compression doesn't reduce the size much, such as for this example? Perhaps it could only emit warnings when the data file is more than 5 MB and the alternative scheme's resulting file is 50% or more than the size of the existing file. There is also no explanation in Section 1.1.6 Data in Packages of Writing R Extensions that compression of data files is implicitly mandatory for R packages to pass the checking process these days.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia


From Andre@@@Kolter @ending from bot1@bio@uni-gie@@en@de  Mon Jun 18 16:02:33 2018
From: Andre@@@Kolter @ending from bot1@bio@uni-gie@@en@de (Kolter, Andreas)
Date: Mon, 18 Jun 2018 14:02:33 +0000
Subject: [Rd] agrep bug
In-Reply-To: <1e7425a35bac442c9823485dd45b5f19@bot1.bio.uni-giessen.de>
References: <1e7425a35bac442c9823485dd45b5f19@bot1.bio.uni-giessen.de>
Message-ID: <523fcc3c0eac4ce69d6e160b4bd49eb6@bot1.bio.uni-giessen.de>

Sorry, I don't understand how to file a bug properly. Nontheless I want to report this one because it is still in the code after so many years.



This bug still exists:

https://stackoverflow.com/questions/15871702/difficulties-with-agrep-fixed-f

	[[alternative HTML version deleted]]


From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Mon Jun 18 16:20:00 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Mon, 18 Jun 2018 14:20:00 +0000
Subject: [Rd] incomplete results from as.character.srcref() in some cases
 involving quote()
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F65DC48@MBXP01.ds.man.ac.uk>

Hi,

The result of  as,character() on  'srcref' objects doesn't have the closing ')' in some cases involving 'quote':

> e4 <- quote({2+2})
> class(attr(e4, "wholeSrcref"))
[1] "srcref"
> as.character(attr(e4, "wholeSrcref"))
[1] "e4 <- quote({2+2}"

As a result printing the object also lacks it and gives an incomplete expression:

> attr(e4, "wholeSrcref")
e4 <- quote({2+2}

It seems that it is the top level quote that suffers from this. Here the inner 'quote' has the matching ')' but the outer one doesn't:

> e5 <- quote({quote({2+2})})
> class(attr(e5, "wholeSrcref"))
[1] "srcref"
> attr(e5, "wholeSrcref")
e5 <- quote({quote({2+2})}
> as.character(attr(e5, "wholeSrcref"))
[1] "e5 <- quote({quote({2+2})}"
> attributes(e5)
...

$wholeSrcref
e5 <- quote({quote({2+2})}


Attribute 'wholeSrcref' seems undocumented but it is of class 'srcref' which is documented (eg ?srcref) and has supporting methods.


Georgi Boshnakov



	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Mon Jun 18 17:51:28 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 18 Jun 2018 17:51:28 +0200
Subject: [Rd] aic() component in GLM-family objects
In-Reply-To: <CABghstSQROhXVrdxzHtH3gTJc_rB-pFY2N7_pgwwhV6LRLp=kQ@mail.gmail.com>
References: <bfa1a750-46c3-efd2-619c-8dcb155e6f86@mcmaster.ca>
 <23317.20705.579932.679153@stat.math.ethz.ch>
 <CABghstSQROhXVrdxzHtH3gTJc_rB-pFY2N7_pgwwhV6LRLp=kQ@mail.gmail.com>
Message-ID: <23335.54528.293068.26238@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Sun, 17 Jun 2018 11:40:38 -0400 writes:

    > FWIW p. 206 of the White Book gives the following for
    > names(binomial()): family, names, link, inverse, deriv,
    > initialize, variance, deviance, weight.

    >   So $aic wasn't there In The Beginning.  I haven't done
    > any more archaeology to try to figure out when/by whom it
    > was first introduced ...

Thank you Ben.

I think I was already suggesting that it was by Simon and Ross
and we cannot know who of the two.

    >  Section 6.3.3, on extending families, doesn't give any
    > other relevant info.

    > A patch for src/library/stats/man/family.Rd below: please
    > check what I've said about $aic and $mu.eta to make sure
    > they're correct!  I can submit this to the r bug list if
    > preferred.

I've spent quite some time checking this - to some extent.

Thank you for the patch. I will use an even slightly extended
version ((and using the correct '\eqn{\eta}{eta}' )).

Thank you indeed.
Martin


From Kurt@Hornik @ending from wu@@c@@t  Tue Jun 19 10:27:25 2018
From: Kurt@Hornik @ending from wu@@c@@t (Kurt Hornik)
Date: Tue, 19 Jun 2018 10:27:25 +0200
Subject: [Rd] agrep bug
In-Reply-To: <523fcc3c0eac4ce69d6e160b4bd49eb6@bot1.bio.uni-giessen.de>
References: <1e7425a35bac442c9823485dd45b5f19@bot1.bio.uni-giessen.de>
 <523fcc3c0eac4ce69d6e160b4bd49eb6@bot1.bio.uni-giessen.de>
Message-ID: <23336.48749.936362.517091@hornik.net>

>>>>> Kolter, Andreas writes:

> Sorry, I don't understand how to file a bug properly. Nontheless I
> want to report this one because it is still in the code after so many
> years.

Thanks.  This is now fixed in the trunk with c74916.

Best
-k

> This bug still exists:

> https://stackoverflow.com/questions/15871702/difficulties-with-agrep-fixed-f

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @uh@rto_@nggono @ending from y@hoo@com  Tue Jun 19 10:29:04 2018
From: @uh@rto_@nggono @ending from y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Tue, 19 Jun 2018 08:29:04 +0000 (UTC)
Subject: [Rd] aic() component in GLM-family objects
References: <1551546968.1628513.1529396944082.ref@mail.yahoo.com>
Message-ID: <1551546968.1628513.1529396944082@mail.yahoo.com>

In R, family has aic component since version 0.62. There is no aic component in family in R 0.61.3.

Looking at blame, https://github.com/wch/r-source/blame/tags/R-0-62/src/library/base/R/family.R , aic component in family is introduced in svn revision 640 (https://github.com/wch/r-source/commit/ac666741679b50bb1dfb5ce631717b375119f6ab):
using aic(.) [Jim Lindsey]; use switch() rather than many if else else.. (MM)

Components of family is documented since R 2.3.0.

--------------------------------
>>>>> Ben Bolker 
>>>>>     on Sun, 17 Jun 2018 11:40:38 -0400 writes:

    > FWIW p. 206 of the White Book gives the following for
    > names(binomial()): family, names, link, inverse, deriv,
    > initialize, variance, deviance, weight.

    >   So $aic wasn't there In The Beginning.  I haven't done
    > any more archaeology to try to figure out when/by whom it
    > was first introduced ...

Thank you Ben.

I think I was already suggesting that it was by Simon and Ross
and we cannot know who of the two.

    >  Section 6.3.3, on extending families, doesn't give any
    > other relevant info.

    > A patch for src/library/stats/man/family.Rd below: please
    > check what I've said about $aic and $mu.eta to make sure
    > they're correct!  I can submit this to the r bug list if
    > preferred.

I've spent quite some time checking this - to some extent.

Thank you for the patch. I will use an even slightly extended
version ((and using the correct '\eqn{\eta}{eta}' )).

Thank you indeed.
Martin


From jennifer@@@lyon @ending from gm@il@com  Wed Jun 20 00:45:23 2018
From: jennifer@@@lyon @ending from gm@il@com (Jennifer Lyon)
Date: Tue, 19 Jun 2018 16:45:23 -0600
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <CAOQ5Nydjqo7Rg8CdSa7rTDSGkJcJFHGuZPwwXwTDJeBzdGL7nA@mail.gmail.com>
References: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>
 <CAOQ5Nycu92AWKSx9bbQMb0tscSLryLjZKYOaSrx2UJcAuH5_Qw@mail.gmail.com>
 <23328.57748.741869.824124@stat.math.ethz.ch>
 <CAOQ5Nydjqo7Rg8CdSa7rTDSGkJcJFHGuZPwwXwTDJeBzdGL7nA@mail.gmail.com>
Message-ID: <CAKstpn5zQ_9yz+x8VMxg6yrCs_HytmstQHd_es1T+3YredJe4g@mail.gmail.com>

Hi Michael:

I can confirm Martin's comment. I tested my software with r-devel (r74914)
and it works, while with r-patched (r74914) it does not work (it hangs, as
it did in R 3.5.0). I apologize for it taking so long for me to test this,
but is there any chance this fix could make into R 3.5.1?

Thanks.

Jen.

On Wed, Jun 13, 2018 at 6:24 AM, Michael Lawrence <lawrence.michael at gene.com
> wrote:

> Are you sure it's not available in patched? It's definitely in the
> source since 6/1.
>
> Michael
>
>
> On Wed, Jun 13, 2018 at 2:19 AM, Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
> >>>>>> Michael Lawrence
> >>>>>>     on Tue, 12 Jun 2018 19:27:49 -0700 writes:
> >
> >     > Hi Jen, This was already resolved for R 3.5.1 by just
> >     > disabling buffering on terminal file connections like stdin.
> >
> > and before R 3.5.1 exists, *and*
> > as the change is also not yet available in R patched (!)
> > this means using a version of
> > "R-devel", e.g. for Windows available from
> >    https://cloud.r-project.org/bin/windows/base/rdevel.html
> >
> > Martin
> >
> >     > Sounds like you might want to be running a web service or
> >     > something instead though.
> >
> >     > Michael
> >
> >     > On Tue, Jun 12, 2018 at 4:46 PM, Jennifer Lyon
> >     > <jennifer.s.lyon at gmail.com> wrote:
> >     >> Hi:
> >     >>
> >     >> I have also just stumbled into this bug. Unfortunately, I
> >     >> can not change the data my program receives from
> >     >> stdin. My code runs in a larger system and stdin is sent
> >     >> to a Docker container running my R code. The protocol is
> >     >> I read a line, readLines("stdin", n=1), do some actions,
> >     >> send output on stdout, and wait for the next set of data.
> >     >> I don't have control over this protocol, so I can't use
> >     >> the ^D workaround.
> >     >>
> >     >> I am open for other workaround suggestions. The single
> >     >> line is actually JSON and can be quite large. If there
> >     >> isn't something else cleaner, I am going to try
> >     >> readChar() in a while loop looking for \n but I'm
> >     >> guessing that would likely be too slow.  I am open to
> >     >> other workaround solutions. For the moment I have
> >     >> reverted back to R 3.4.4.
> >     >>
> >     >> Thanks for any suggestions.
> >     >>
> >     >> Jen.
> >     >>
> >     >>
> >     >>>> >>>>> Martin Maechler >>>>> on Mon, 28 May 2018
> >     >>>> 10:28:01 +0200 writes:
> >     >>>>
> >     >>>> >>>>> Ralf Stubner >>>>> on Fri, 25 May 2018 19:18:58
> >     >>>> +0200 writes:
> >     >>>>
> >     >>>> >> Dear all, I would like to draw you attention to this
> >     >>>> >> question on SO:
> >     >>>> >>
> >     >> https://stackoverflow.com/questions/50372043/readlines-
> function-with-new-version-of-r
> >     >>>>
> >     >>>>
> >     >>>> >> Based on the OP's code I used the script
> >     >>>>
> >     >>>> >> #######################################
> >     >>>> >> create_matrix <- function() { >> cat("Write the
> >     >>>> numbers of vertices: ") >> user_input <-
> >     >>>> readLines("stdin", n=1) >> user_input <-
> >     >>>> as.numeric(user_input) >> print(user_input) >> } >>
> >     >>>> create_matrix()
> >     >>>> >> #######################################
> >     >>>>
> >     >>>> >> and called it with "R -f <filename>" from the
> >     >>>> command line.
> >     >>>>
> >     >>>> >> With 'R version 3.4.4 (2018-03-15) -- "Someone to
> >     >>>> Lean On"' the
> >     >> script
> >     >>>> >> prints the inputed number as expected. With both 'R
> >     >>>> version 3.5.0 >> (2018-04-23) -- "Joy in Playing"' and
> >     >>>> 'R Under development
> >     >> (unstable)
> >     >>>> >> (2018-05-19 r74746) -- "Unsuffered Consequences"'
> >     >>>> the script does
> >     >> not
> >     >>>> >> continue after inputing a number.
> >     >>>>
> >     >>>> > I can confirm.  > It "works" if you additionally (the
> >     >>>> [Enter], i.e., EOL) you also > "send" an EOF -- in Unix
> >     >>>> alikes via <Ctrl>-D
> >     >>>>
> >     >>>> > The same happens if you use 'Rscript <filename>'
> >     >>>>
> >     >>>> > I'm not the expert here, but am close to sure that we
> >     >>>> (R core) > did not intend this change, when fixing
> >     >>>> other somewhat subtle > bugs in Rscript / 'R -f'
> >     >>>>
> >     >>>> > Martin Maechler
> >     >>>>
> >     >>>> The same behavior in regular R , no need for a script
> >     >>>> etc.
> >     >>>>
> >     >>>> > str(readLines("stdin", n=1))
> >     >>>>
> >     >>>> then in addition to the input you need to "give" an EOF
> >     >>>> (Ctrl D) in R
> >     >>> = 3.5.0
> >     >>>>
> >     >>>> Interestingly, everything works fine if you use stdin()
> >     >>>> instead of "stdin" :
> >     >>>>
> >     >>>> > rr <- readLines(stdin(), n=1) foo > rr [1] "foo"
> >     >>>> >
> >     >>>> ----------
> >     >>>>
> >     >>>> So, for now use stdin() which is much clearer than the
> >     >>>> string "stdin" anyway
> >     >>>>
> >     >>>> Martin Maechler
> >     >>
> >     >> [[alternative HTML version deleted]]
> >     >>
> >     >> ______________________________________________
> >     >> R-devel at r-project.org mailing list
> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >     > ______________________________________________
> >     > R-devel at r-project.org mailing list
> >     > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From _ @ending from thom@@levine@com  Wed Jun 20 01:16:54 2018
From: _ @ending from thom@@levine@com (Thomas Levine)
Date: Tue, 19 Jun 2018 23:16:54 +0000
Subject: [Rd] Bug 16719: kruskal.test documentation for formula
In-Reply-To: <20180423205935.756F5E508E@mailuser.nyi.internal>
References: <20180423205935.756F5E508E@mailuser.nyi.internal>
Message-ID: <20180619231655.1AC4EE4329@mailuser.nyi.internal>

Thomas Levine writes:
> I submit a couple options for addressing bug 16719: kruskal.test
> documentation for formula.
> https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16719
>
> disallow-character.diff changes the documentation and error message
> to indicate that factors are accepted.
>
> allow-character.diff changes the kruskal.test functions to convert
> character vectors to factors; documentation is updated accordingly.
>
> I tested the updated functions with the examples in example.R. It is
> based on the examples in the bug report.
>
> If there is interest in applying either patch, especially the latter,
> I want first to test the change on lots of existing programs that call
> kruskal.test, to see if it causes any regressions. Is there a good place
> to look for programs that use particular R functions?
>
> I am having trouble building R, so I have so far tested these changes
> only by patching revision 74631 (SVN head) and sourcing the resulting
> kruskal.test.R in R 3.4.1 on OpenBSD 6.2. I thus have not tested the
> R documentation files.

I thought it was important to test the changes on lots of existing
programs that call kruskal.test, to see if it causes any regressions.

CRAN testing
------------
I downloaded all CRAN packages and checked whether they contained the
fixed expression "kruskal.test". (See "Makefile" and "all-kruskal.r".)

I subsequently tested on all packages in CRAN that mentioned
"kruskal.test".

I patched the development version of R and built like this.

  ./configure --without-recommended-packages
  gmake
  cd src/library
  gmake all docs Rdfiles

This command was helpful for cleaning the repository tree.

  svn status | sed -n 's/^\?  *//p' | xargs rm -r

I tested three versions of kruskal.test

* SVN checkout 74844 with no modifications
* SVN checkout 74844 with disallow-character patch
* SVN checkout 74844 with allow-character patch

The test is to run all of the examples from all of the packages that
mention kruskal.test; with each example I ran, I recorded whether an
error was raised.  I ran all examples, regardless of whether the example
mentioned kruskal.test.  I compared the raising of an error among the
three builds of R/kruskal.test.

I ran these commands for each R version to build R, install the packages
referencing kruskal.test, and run the tests in parallel. The procedure
is available here; see the Makefile for more detail.
https://thomaslevine.com/scm/r-patches/dir?ci=6ea0db4fde&name=kruskal.test-numeric/testing

Run it with like this if you are so inclined.

  make -j 3 install
  make -j 3 test

I found 100 packages that referenced kruskal.test. (This was based on a
very crude string matching; some of these packages mentioned
kruskal.test only in the documentation.) Of these 100 packages, I was
able to install 39. I ran all of the examples in all of these packages,
a total of 2361 examples.

The successes and failures matched exactly among the three builds.
341 examples succeeded, and 2020 failed.
https://thomaslevine.com/scm/r-patches/artifact/5df57add4414970a

This is of course a lot of failures and a small proportion of the
packages. I only installed the packages whose dependencies were easy
for me to install (on OpenBSD 6.2), and some of those implicitly
depended on other things that were not available; this explains
all of the examples that raised errors.

Review of r-help
----------------
I also began to collect all kruskal.test calls that I could find in the
r-help archives. Formatting them to be appropriate for evaluation is
quite tedious, so I doubt I will follow through with this, but all of
the calls appear to use ordinary character, numeric, or factor types,
and none performed error catching, so no obvious problems with my
proposed changes stand out.

Furthermore, in looking through the r-help archives, I noted these
messages on r-help where people were having trouble using kruskal.test
and where I think either of my proposed changes would have helped them
perform their desired Kruskal-Wallis rank sum tests.

  <1280836078385-2311712.post at n4.nabble.com>
  <1280849183252-2312063.post at n4.nabble.com>

Conclusions
-----------
I have yet to find any example of my proposed changes causing a
regression. I believe that the most reasonable thing that it might
break is something that depends on either kruskal.test raising an
error or that depends on the specific text in the error message.

If the limited testing is a concern, I could find a way to install
all of the packages and run all of their examples.


From _ @ending from thom@@levine@com  Wed Jun 20 01:51:45 2018
From: _ @ending from thom@@levine@com (Thomas Levine)
Date: Tue, 19 Jun 2018 23:51:45 +0000
Subject: [Rd] Bug 16719: kruskal.test documentation for formula
In-Reply-To: <20180619231655.1AC4EE4329@mailuser.nyi.internal>
References: <20180423205935.756F5E508E@mailuser.nyi.internal>
 <20180619231655.1AC4EE4329@mailuser.nyi.internal>
Message-ID: <20180619235146.2E2A7E407B@mailuser.nyi.internal>

Thomas Levine writes:
> I have yet to find any example of my proposed changes causing a
> regression. I believe that the most reasonable thing that it might
> break is something that depends on either kruskal.test raising an
> error or that depends on the specific text in the error message.
>
> If the limited testing is a concern, I could find a way to install
> all of the packages and run all of their examples.

In case my April message is hard to find, I have attached the packages
redundantly to this email.

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: disallow-character.diff
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180619/626fb0f4/attachment.ksh>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: allow-character.diff
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180619/626fb0f4/attachment-0001.ksh>

From l@wrence@mich@el @ending from gene@com  Wed Jun 20 04:53:52 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Tue, 19 Jun 2018 19:53:52 -0700
Subject: [Rd] readLines function with R >= 3.5.0
In-Reply-To: <CAKstpn5zQ_9yz+x8VMxg6yrCs_HytmstQHd_es1T+3YredJe4g@mail.gmail.com>
References: <CAKstpn4yjjZLnujMv10bFgTmpFAre=_j4ze2ttto+T45JQ740A@mail.gmail.com>
 <CAOQ5Nycu92AWKSx9bbQMb0tscSLryLjZKYOaSrx2UJcAuH5_Qw@mail.gmail.com>
 <23328.57748.741869.824124@stat.math.ethz.ch>
 <CAOQ5Nydjqo7Rg8CdSa7rTDSGkJcJFHGuZPwwXwTDJeBzdGL7nA@mail.gmail.com>
 <CAKstpn5zQ_9yz+x8VMxg6yrCs_HytmstQHd_es1T+3YredJe4g@mail.gmail.com>
Message-ID: <CAOQ5Nyd04+Y_TxpTmU1LUqsL3epnU_bwSAxmqr+v_rfzWXESbw@mail.gmail.com>

Hi Jen,

Please provide a reproducible example, since the original stack
overflow example works in both trunk and patched.

Thanks,
Michael

On Tue, Jun 19, 2018 at 3:45 PM, Jennifer Lyon
<jennifer.s.lyon at gmail.com> wrote:
> Hi Michael:
>
> I can confirm Martin's comment. I tested my software with r-devel (r74914)
> and it works, while with r-patched (r74914) it does not work (it hangs, as
> it did in R 3.5.0). I apologize for it taking so long for me to test this,
> but is there any chance this fix could make into R 3.5.1?
>
> Thanks.
>
> Jen.
>
> On Wed, Jun 13, 2018 at 6:24 AM, Michael Lawrence
> <lawrence.michael at gene.com> wrote:
>>
>> Are you sure it's not available in patched? It's definitely in the
>> source since 6/1.
>>
>> Michael
>>
>>
>> On Wed, Jun 13, 2018 at 2:19 AM, Martin Maechler
>> <maechler at stat.math.ethz.ch> wrote:
>> >>>>>> Michael Lawrence
>> >>>>>>     on Tue, 12 Jun 2018 19:27:49 -0700 writes:
>> >
>> >     > Hi Jen, This was already resolved for R 3.5.1 by just
>> >     > disabling buffering on terminal file connections like stdin.
>> >
>> > and before R 3.5.1 exists, *and*
>> > as the change is also not yet available in R patched (!)
>> > this means using a version of
>> > "R-devel", e.g. for Windows available from
>> >    https://cloud.r-project.org/bin/windows/base/rdevel.html
>> >
>> > Martin
>> >
>> >     > Sounds like you might want to be running a web service or
>> >     > something instead though.
>> >
>> >     > Michael
>> >
>> >     > On Tue, Jun 12, 2018 at 4:46 PM, Jennifer Lyon
>> >     > <jennifer.s.lyon at gmail.com> wrote:
>> >     >> Hi:
>> >     >>
>> >     >> I have also just stumbled into this bug. Unfortunately, I
>> >     >> can not change the data my program receives from
>> >     >> stdin. My code runs in a larger system and stdin is sent
>> >     >> to a Docker container running my R code. The protocol is
>> >     >> I read a line, readLines("stdin", n=1), do some actions,
>> >     >> send output on stdout, and wait for the next set of data.
>> >     >> I don't have control over this protocol, so I can't use
>> >     >> the ^D workaround.
>> >     >>
>> >     >> I am open for other workaround suggestions. The single
>> >     >> line is actually JSON and can be quite large. If there
>> >     >> isn't something else cleaner, I am going to try
>> >     >> readChar() in a while loop looking for \n but I'm
>> >     >> guessing that would likely be too slow.  I am open to
>> >     >> other workaround solutions. For the moment I have
>> >     >> reverted back to R 3.4.4.
>> >     >>
>> >     >> Thanks for any suggestions.
>> >     >>
>> >     >> Jen.
>> >     >>
>> >     >>
>> >     >>>> >>>>> Martin Maechler >>>>> on Mon, 28 May 2018
>> >     >>>> 10:28:01 +0200 writes:
>> >     >>>>
>> >     >>>> >>>>> Ralf Stubner >>>>> on Fri, 25 May 2018 19:18:58
>> >     >>>> +0200 writes:
>> >     >>>>
>> >     >>>> >> Dear all, I would like to draw you attention to this
>> >     >>>> >> question on SO:
>> >     >>>> >>
>> >     >>
>> > https://stackoverflow.com/questions/50372043/readlines-function-with-new-version-of-r
>> >     >>>>
>> >     >>>>
>> >     >>>> >> Based on the OP's code I used the script
>> >     >>>>
>> >     >>>> >> #######################################
>> >     >>>> >> create_matrix <- function() { >> cat("Write the
>> >     >>>> numbers of vertices: ") >> user_input <-
>> >     >>>> readLines("stdin", n=1) >> user_input <-
>> >     >>>> as.numeric(user_input) >> print(user_input) >> } >>
>> >     >>>> create_matrix()
>> >     >>>> >> #######################################
>> >     >>>>
>> >     >>>> >> and called it with "R -f <filename>" from the
>> >     >>>> command line.
>> >     >>>>
>> >     >>>> >> With 'R version 3.4.4 (2018-03-15) -- "Someone to
>> >     >>>> Lean On"' the
>> >     >> script
>> >     >>>> >> prints the inputed number as expected. With both 'R
>> >     >>>> version 3.5.0 >> (2018-04-23) -- "Joy in Playing"' and
>> >     >>>> 'R Under development
>> >     >> (unstable)
>> >     >>>> >> (2018-05-19 r74746) -- "Unsuffered Consequences"'
>> >     >>>> the script does
>> >     >> not
>> >     >>>> >> continue after inputing a number.
>> >     >>>>
>> >     >>>> > I can confirm.  > It "works" if you additionally (the
>> >     >>>> [Enter], i.e., EOL) you also > "send" an EOF -- in Unix
>> >     >>>> alikes via <Ctrl>-D
>> >     >>>>
>> >     >>>> > The same happens if you use 'Rscript <filename>'
>> >     >>>>
>> >     >>>> > I'm not the expert here, but am close to sure that we
>> >     >>>> (R core) > did not intend this change, when fixing
>> >     >>>> other somewhat subtle > bugs in Rscript / 'R -f'
>> >     >>>>
>> >     >>>> > Martin Maechler
>> >     >>>>
>> >     >>>> The same behavior in regular R , no need for a script
>> >     >>>> etc.
>> >     >>>>
>> >     >>>> > str(readLines("stdin", n=1))
>> >     >>>>
>> >     >>>> then in addition to the input you need to "give" an EOF
>> >     >>>> (Ctrl D) in R
>> >     >>> = 3.5.0
>> >     >>>>
>> >     >>>> Interestingly, everything works fine if you use stdin()
>> >     >>>> instead of "stdin" :
>> >     >>>>
>> >     >>>> > rr <- readLines(stdin(), n=1) foo > rr [1] "foo"
>> >     >>>> >
>> >     >>>> ----------
>> >     >>>>
>> >     >>>> So, for now use stdin() which is much clearer than the
>> >     >>>> string "stdin" anyway
>> >     >>>>
>> >     >>>> Martin Maechler
>> >     >>
>> >     >> [[alternative HTML version deleted]]
>> >     >>
>> >     >> ______________________________________________
>> >     >> R-devel at r-project.org mailing list
>> >     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>> >     > ______________________________________________
>> >     > R-devel at r-project.org mailing list
>> >     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From tom@@@k@liber@ @ending from gm@il@com  Wed Jun 20 10:55:13 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 20 Jun 2018 10:55:13 +0200
Subject: [Rd] Rgui 3.5.0 print issue
In-Reply-To: <c65ab1b1-5ac0-b4b1-72d9-b1fc85c57669@gmail.com>
References: <005401d40164$029bf680$07d3e380$@istat.it>
 <c65ab1b1-5ac0-b4b1-72d9-b1fc85c57669@gmail.com>
Message-ID: <8496fcf1-e85e-b117-25d1-450cb65dfbd6@gmail.com>

Fixed in R-devel and R-patched.

Best
Tomas

On 06/13/2018 01:36 PM, Tomas Kalibera wrote:
> Thanks for the report, I can reproduce. In Rgui, the output of 
> "print(cars)" is incorrect, the line numbers appear as part of the 
> command prompt string (printed in reverse order, without newlines), 
> while the rest of the output is correctly displayed. This is a bug, I 
> will have a closer look
>
> Best,
> Tomas
>
> On 06/11/2018 11:10 AM, Diego Zardetto wrote:
>> Dear all,
>>
>>
>> I would like to have your opinion about an issue I have recently run 
>> into
>> while using tcltk in R 3.5.0 under Windows 7 64bit.
>>
>>
>> Here is a reproducible example of the issue, along with information 
>> about
>> platform and OS.
>>
>>
>> ###############################################################
>>
>> # R 3.5.0 issue: print does not work properly for data.frames #
>>
>> #??????????????? when called from a tcltk window.???????????? #
>>
>> #???????????????????????????????????????????????????????????? #
>>
>> # NOTE: The issue shows up when using Rgui, but disappears??? #
>>
>> #?????? if Rterm is used.???????????????????????????????????? #
>>
>> #???????????????????????????????????????????????????????????? #
>>
>> # NOTE: The issue starts with R 3.5.0, and is still there???? #
>>
>> #?????? in R 3.5.0 patched build for Windows, as well as in?? #
>>
>> #?????? R-Devel.????????????????????????????????????????????? #
>>
>> ###############################################################
>>
>> # Reproducible example
>>
>> library(tcltk)
>>
>> data(cars)
>>
>> win1 <- tktoplevel()
>>
>> butOK <- tkbutton(win1, text = "OK", command = function() print(cars))
>>
>> tkgrid(butOK)
>>
>> # NOTE: Upon pressing OK, the rownames of cars are not printed on
>>
>> #?????? screen, but end up into R's prompt.
>>
>>
>>
>> ################################
>>
>> # R version and platform info. #
>>
>> ################################
>>
>>> R.version
>> ??????????????? _
>>
>> platform?????? x86_64-w64-mingw32
>>
>> arch?????????? x86_64
>>
>> os???????????? mingw32
>>
>> system???????? x86_64, mingw32
>>
>> status
>>
>> major????????? 3
>>
>> minor????????? 5.0
>>
>> year?????????? 2018
>>
>> month????????? 04
>>
>> day??????????? 23
>>
>> svn rev??????? 74626
>>
>> language?????? R
>>
>> version.string R version 3.5.0 (2018-04-23)
>>
>> nickname?????? Joy in Playing
>>
>>
>> ##########################
>>
>> # Operating system info. #
>>
>> ##########################
>>
>>> Sys.info()
>> ????????????????????? sysname????????????????????? release
>>
>> ??????????????????? "Windows"????????????????????? "7 x64"
>>
>> ????????????????????? version???????????????????? nodename
>>
>> "build 7601, Service Pack 1"??????????????????? "PC79258"
>>
>> ????????????????????? machine??????????????????????? login
>>
>> ???????????????????? "x86-64"?????????????????? "zardetto"
>>
>> ???????????????????????? user?????????????? effective_user
>>
>> ?????????????????? "zardetto"?????????????????? "zardetto"
>>
>>
>>
>> I would appreciate any feedback you could provide.
>>
>>
>> Thanks
>>
>> D.
>>
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From tom@@@k@liber@ @ending from gm@il@com  Wed Jun 20 12:00:51 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 20 Jun 2018 12:00:51 +0200
Subject: [Rd] 
 incomplete results from as.character.srcref() in some cases
 involving quote()
In-Reply-To: <438D2EC9EAFE5946B2D5864670EA468E018F65DC48@MBXP01.ds.man.ac.uk>
References: <438D2EC9EAFE5946B2D5864670EA468E018F65DC48@MBXP01.ds.man.ac.uk>
Message-ID: <ab568749-f10b-6aa2-b690-8769c0a18c37@gmail.com>

wholeSrcref attribute is documented in ?parse to be the source reference 
corresponding to the already parsed text. The implementation in the 
parser matches the documentation - the code stops at the last 
byte/character of the expression, that is, on the closing brace - which 
is the "already parsed text". I think this works as documented (also 
source() uses the current implementation of wholeSrcref).

Best
Tomas

On 06/18/2018 04:20 PM, Georgi Boshnakov wrote:
> Hi,
>
> The result of  as,character() on  'srcref' objects doesn't have the closing ')' in some cases involving 'quote':
>
>> e4 <- quote({2+2})
>> class(attr(e4, "wholeSrcref"))
> [1] "srcref"
>> as.character(attr(e4, "wholeSrcref"))
> [1] "e4 <- quote({2+2}"
>
> As a result printing the object also lacks it and gives an incomplete expression:
>
>> attr(e4, "wholeSrcref")
> e4 <- quote({2+2}
>
> It seems that it is the top level quote that suffers from this. Here the inner 'quote' has the matching ')' but the outer one doesn't:
>
>> e5 <- quote({quote({2+2})})
>> class(attr(e5, "wholeSrcref"))
> [1] "srcref"
>> attr(e5, "wholeSrcref")
> e5 <- quote({quote({2+2})}
>> as.character(attr(e5, "wholeSrcref"))
> [1] "e5 <- quote({quote({2+2})}"
>> attributes(e5)
> ...
>
> $wholeSrcref
> e5 <- quote({quote({2+2})}
>
>
> Attribute 'wholeSrcref' seems undocumented but it is of class 'srcref' which is documented (eg ?srcref) and has supporting methods.
>
>
> Georgi Boshnakov
>
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Wed Jun 20 12:54:40 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 20 Jun 2018 12:54:40 +0200
Subject: [Rd] Automatic Compression by Save Causes Check Warning
In-Reply-To: <SYAPR01MB25589AD62D7FA54454DEBD30CD730@SYAPR01MB2558.ausprd01.prod.outlook.com>
References: <SYAPR01MB25589AD62D7FA54454DEBD30CD730@SYAPR01MB2558.ausprd01.prod.outlook.com>
Message-ID: <8ce16a69-8522-5e86-0acb-b2b30c280444@gmail.com>

Dear Dario,

this question may be more suitable for R-pkg-devel or perhaps R-help 
list, if you have subsequent questions, you might get better advice 
there. In short, save() does no automated selection of a compression 
algorithm - it just uses the one specified, by default "gzip". For 
automated selection, please use resaveRdaFiles(). You can also use 
"--resave-data" when building your package (see "Building package 
tarballs" in R-exts) for this to be done automatically for all your data 
files. Finally, "R CMD check --as-cran" will report when it can find a 
significantly better compression (note that CRAN policies ask for 
--as-cran check being run locally before submitting a package, anyway).

The CRAN repository policy mentions that packages should be of minimum 
necessary size and the checks are in line with that (and there are 
already heuristics in place to avoid the warning if possible gains are 
small). I don't think in principle things could be made any simpler than 
they are now: "R CMD check --as-cran" will report a possible improvement 
by resave, "R CMD build --resave-data" will do the resave. Note that the 
detection of the best compression algorithm cannot be done without 
actually compressing the data using different algorithms, which is what 
resaveRdaFiles() does -- doing this in save() by default is not possible 
due to the performance overhead.

Best
Tomas

On 06/18/2018 10:00 AM, Dario Strbenac wrote:
> Good day,
>
> Save sometimes chooses a compression method which causes a warning during package checking. An example of this is:
>
> measurements <- matrix(round(rnorm(2000*190), 2), nrow = 2000, ncol = 190)
> classes <- factor(sample(LETTERS[1:2], 190, replace = TRUE))
> save(measurements, classes, file = "data/experiment.RData")
>
> then, when the package is checked,
>
> * checking data for ASCII and uncompressed saves ... WARNING
>    
>    Note: significantly better compression could be obtained
>          by using R CMD build --resave-data
>                     old_size new_size compress
>    experiment.RData    689Kb    447Kb    bzip2
>
> Could save and R CMD check consistently agree on a suitable compression scheme? Could R CMD check not emit warnings if the data is already small and the alternative compression doesn't reduce the size much, such as for this example? Perhaps it could only emit warnings when the data file is more than 5 MB and the alternative scheme's resulting file is 50% or more than the size of the existing file. There is also no explanation in Section 1.1.6 Data in Packages of Writing R Extensions that compression of data files is implicitly mandatory for R packages to pass the checking process these days.
>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From georgi@bo@hn@kov @ending from m@nche@ter@@c@uk  Wed Jun 20 14:03:39 2018
From: georgi@bo@hn@kov @ending from m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Wed, 20 Jun 2018 12:03:39 +0000
Subject: [Rd] 
 incomplete results from as.character.srcref() in some cases
 involving quote()
In-Reply-To: <ab568749-f10b-6aa2-b690-8769c0a18c37@gmail.com>
References: <438D2EC9EAFE5946B2D5864670EA468E018F65DC48@MBXP01.ds.man.ac.uk>
 <ab568749-f10b-6aa2-b690-8769c0a18c37@gmail.com>
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F65DFE2@MBXP01.ds.man.ac.uk>

Thanks for looking into this and sorry for the noise. I should have realised that the outermost quote() in my examples is not part of the parsed expression.  

Best,
Georgi

-----Original Message-----
From: Tomas Kalibera [mailto:tomas.kalibera at gmail.com] 
Sent: 20 June 2018 11:01
To: Georgi Boshnakov; r-devel at r-project.org
Subject: Re: [Rd] incomplete results from as.character.srcref() in some cases involving quote()

wholeSrcref attribute is documented in ?parse to be the source reference 
corresponding to the already parsed text. The implementation in the 
parser matches the documentation - the code stops at the last 
byte/character of the expression, that is, on the closing brace - which 
is the "already parsed text". I think this works as documented (also 
source() uses the current implementation of wholeSrcref).

Best
Tomas

On 06/18/2018 04:20 PM, Georgi Boshnakov wrote:
> Hi,
>
> The result of  as,character() on  'srcref' objects doesn't have the closing ')' in some cases involving 'quote':
>
>> e4 <- quote({2+2})
>> class(attr(e4, "wholeSrcref"))
> [1] "srcref"
>> as.character(attr(e4, "wholeSrcref"))
> [1] "e4 <- quote({2+2}"
>
> As a result printing the object also lacks it and gives an incomplete expression:
>
>> attr(e4, "wholeSrcref")
> e4 <- quote({2+2}
>
> It seems that it is the top level quote that suffers from this. Here the inner 'quote' has the matching ')' but the outer one doesn't:
>
>> e5 <- quote({quote({2+2})})
>> class(attr(e5, "wholeSrcref"))
> [1] "srcref"
>> attr(e5, "wholeSrcref")
> e5 <- quote({quote({2+2})}
>> as.character(attr(e5, "wholeSrcref"))
> [1] "e5 <- quote({quote({2+2})}"
>> attributes(e5)
> ...
>
> $wholeSrcref
> e5 <- quote({quote({2+2})}
>
>
> Attribute 'wholeSrcref' seems undocumented but it is of class 'srcref' which is documented (eg ?srcref) and has supporting methods.
>
>
> Georgi Boshnakov
>
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



From henrik@bengt@@on @ending from gm@il@com  Thu Jun 21 05:05:52 2018
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Wed, 20 Jun 2018 20:05:52 -0700
Subject: [Rd] DOCUMENTATION(?): parallel::mcparallel() gives various types
 of "Error in unserialize(r) : ..." errors if value is of type raw
Message-ID: <CAFDcVCTxKPm5nFUFvBwT1ij7qwd5u_LvOJf=KoXp1qw6wpe1Jw@mail.gmail.com>

I stumbled upon the following:

f <- parallel::mcparallel(raw(0L))
parallel::mccollect(f)
# $`77083`
# NULL

but

f <- parallel::mcparallel(raw(1L))
parallel::mccollect(f)
# Error in unserialize(r) : read error
traceback()
# 2: unserialize(r)
# 1: parallel::mccollect(f)

(restarting because the above appears to corrupt the R session)

f <- parallel::mcparallel(raw(2L))
parallel::mccollect(f)
# Error in unserialize(r) : unknown input format

I can reproduce this on Linux using R 3.5.0 all the way back to R
3.3.2 (didn't try further) and R development (unstable) (2018-06-19
r74919).

Diving into the code of parallel::mccollect(), it looks that the 'raw'
data type has a special purpose:

                  r <- readChild(pid)
                  if (is.integer(r) || is.null(r))
                    fin[pid == pids] <- TRUE
                  if (is.raw(r))
                    res[which(pid == pids)] <- list(unserialize(r))

However, I don't see this behavior document in ?parallel::mcparallel.
The closest I get is that under the 'Value' section it says:

   "mccollect returns any results that are available in a list. [...]"

Not sure if that should be interpreted as only values that are of type
'list' should be used.  OTH, the example use values of type double.

/Henrik


From ruipb@rr@d@@ @ending from @@po@pt  Fri Jun 22 15:55:32 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Fri, 22 Jun 2018 14:55:32 +0100
Subject: [Rd] Bug in as.Date or strptime?
Message-ID: <ed49bf06-77ff-3549-567a-5d2352cfbc16@sapo.pt>

Hello,

This just came up in SO, sessionInfo() at the end.

https://stackoverflow.com/questions/50988018/seeking-explanation-for-as-date-function-in-r?noredirect=1#comment88971055_50988018



# example 1
# not even the month is right
as.Date(x =  1, format = '%j', origin= '2015-01-01')
#[1] "2018-07-21"

# example 2a
# nonsense output
as.Date(x = 1, origin= '2015-01-01')
#[1] "2015-01-02"

# example 2a
# nonsense output, see example 6 below
as.Date(x = 1, origin = as.Date('2015-01-01'))
#[1] "2015-01-02"



# example 3
# I know that the method as.Date.numeric doesn't have
# argument 'format' but does have the dots argument.
# The format is passed on to strptime so maybe the problem is there.
as.Date(x =  1, format = '%j', origin= as.Date('2015-01-01'))
#[1] "2015-01-02"


# example 4
# Wrong, documented.
# origin should be automatically coerced to class 'Date'
# This is documented to behave like example 6 below
as.Date(x = '1',format = '%j', origin= '2015-01-01')
#[1] "2018-01-01"


# example 5
# right, documented. x of class 'character' needs argument 'format'
as.Date(x = '1', origin= '2015-01-01')
#Error in charToDate(x) :
#  string de caracteres n?o ? um formato padr?o n?o amb?guo


# example 6
# the safe way, the only one that outputs the right date
as.Date(x =  '1', format = '%j', origin= as.Date('2015-01-01'))
#[1] "2018-01-01"



sessionInfo()
R version 3.4.4 (2018-03-15)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods
[7] base

loaded via a namespace (and not attached):
[1] compiler_3.4.4 tools_3.4.4    yaml_2.1.19


Or maybe I am missing something.

Thanks in advance,

Rui Barradas


From murdoch@dunc@n @ending from gm@il@com  Fri Jun 22 16:04:50 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Fri, 22 Jun 2018 10:04:50 -0400
Subject: [Rd] Bug in as.Date or strptime?
In-Reply-To: <ed49bf06-77ff-3549-567a-5d2352cfbc16@sapo.pt>
References: <ed49bf06-77ff-3549-567a-5d2352cfbc16@sapo.pt>
Message-ID: <df383438-1b9f-42ed-fe59-08985a9ec285@gmail.com>

On 22/06/2018 9:55 AM, Rui Barradas wrote:
> Hello,
> 
> This just came up in SO, sessionInfo() at the end.
> 
> https://stackoverflow.com/questions/50988018/seeking-explanation-for-as-date-function-in-r?noredirect=1#comment88971055_50988018
> 
> 
> 
> # example 1
> # not even the month is right
> as.Date(x =  1, format = '%j', origin= '2015-01-01')
> #[1] "2018-07-21"

Since x is numeric, it is added to the origin date.  But the origin date 
is a character, so it is converted to a date using format.  The %j 
format says "day of year"; since you didn't give a year, that is assumed 
to be the current year, 2018.  %j only uses the 1st 3 digits that it 
finds, so the origin is taken to be day 201 of 2018.  Add 1, you get 
July 21.

> 
> # example 2a
> # nonsense output
> as.Date(x = 1, origin= '2015-01-01')
> #[1] "2015-01-02"

Since no format is given, the origin is found using the default 
conversion, which gives what you'd expect.  Then we add one day.

> 
> # example 2a
> # nonsense output, see example 6 below
> as.Date(x = 1, origin = as.Date('2015-01-01'))
> #[1] "2015-01-02"

Same as above.  Same result, hurray!
> 
> 
> 
> # example 3
> # I know that the method as.Date.numeric doesn't have
> # argument 'format' but does have the dots argument.
> # The format is passed on to strptime so maybe the problem is there.
> as.Date(x =  1, format = '%j', origin= as.Date('2015-01-01'))
> #[1] "2015-01-02"

There's no problem here.  The format is ignored for numeric x and date 
object origin.  This is the same as 2a.

> 
> 
> # example 4
> # Wrong, documented.
> # origin should be automatically coerced to class 'Date'
> # This is documented to behave like example 6 below
> as.Date(x = '1',format = '%j', origin= '2015-01-01')
> #[1] "2018-01-01"

origin is ignored for character x.  That is day 1 of the default year.

> 
> 
> # example 5
> # right, documented. x of class 'character' needs argument 'format'
> as.Date(x = '1', origin= '2015-01-01')
> #Error in charToDate(x) :
> #  string de caracteres n?o ? um formato padr?o n?o amb?guo

There's no default conversion for '1'.

> 
> 
> # example 6
> # the safe way, the only one that outputs the right date
> as.Date(x =  '1', format = '%j', origin= as.Date('2015-01-01'))
> #[1] "2018-01-01"

origin is ignored again, so this is the same as number 4.


Duncan Murdoch

> 
> 
> sessionInfo()
> R version 3.4.4 (2018-03-15)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 16.04.4 LTS
> 
> Matrix products: default
> BLAS: /usr/lib/libblas/libblas.so.3.6.0
> LAPACK: /usr/lib/lapack/liblapack.so.3.6.0
> 
> locale:
>    [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
>    [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
>    [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
>    [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
>    [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods
> [7] base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.4.4 tools_3.4.4    yaml_2.1.19
> 
> 
> Or maybe I am missing something.
> 
> Thanks in advance,
> 
> Rui Barradas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From cbreto@@t@t @ending from gm@il@com  Fri Jun 22 20:31:18 2018
From: cbreto@@t@t @ending from gm@il@com (=?utf-8?Q?Carles_Bret=C3=B3_Mart=C3=ADnez?=)
Date: Fri, 22 Jun 2018 14:31:18 -0400
Subject: [Rd] bug in 'optim' documentation : "Brent" method doesn't copy
 'par' names
Message-ID: <D3555077-BAE6-47D5-9A9B-8631BA5183EB@gmail.com>

The optim documentation states (second from last sentence of Details Section) that "Any names given to par will be copied to the vectors passed to \code{fn} and \code{gr}." This does not seem to be the case when the method argument is set to "Brent".

Consider finding an optimum with the "Brent" method and a fn argument that does not rely on a named par argument, e.g., 

> quad <- function (x) x^2 + x
> par <- -0.75
> x <- optim(par = par, method = "Brent", lower = -1, upper = 0, fn = quad)
> x$par
[1] -0.5
> x$value
[1] -0.25
 
However, if the fn argument relies in the names in par, this optimum might not be achieved, e.g.,

> names(par) <- "par_name"
> par
par_name 
   -0.75 
> named <- function (x) if (length(names(x)) > 0) quad(x) else 123.456
> y <- optim(par = par, method = "Brent", lower = -1, upper = 0, fn = named)
> y$par
[1] -6.474096e-09
> y$value
[1] 123.456

The y$value suggests that the names of par are not being "copied to the vectors passed to \code{fn}." Note the lack of
> warnings()
> 

> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
LAPACK: /usr/lib/lapack/liblapack.so.3.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.5.0
> 
> proc.time()
   user  system elapsed 
  0.328   0.056   0.443 


From pre@nell @ending from ufl@edu  Sun Jun 24 12:58:06 2018
From: pre@nell @ending from ufl@edu (Brett Presnell)
Date: Sun, 24 Jun 2018 11:58:06 +0100
Subject: [Rd] Tiny bug in lm()?
Message-ID: <87in68cuyp.fsf@ufl.edu>


I suppose that this never affects anything, but in line 57 of lm.R,
where the coefficients are defined for an empty model, when y is a
matrix, shouldn't the value be matrix(,0,nrow(y)) rather than
matrix(,0,3)?


From pre@nell @ending from ufl@edu  Sun Jun 24 14:57:04 2018
From: pre@nell @ending from ufl@edu (Brett Presnell)
Date: Sun, 24 Jun 2018 13:57:04 +0100
Subject: [Rd] Tiny bug in lm()?
In-Reply-To: <87in68cuyp.fsf@ufl.edu>
References: <87in68cuyp.fsf@ufl.edu>
Message-ID: <87h8lscpgf.fsf@ufl.edu>


I meant ncol(y) of course.

Brett Presnell <presnell at ufl.edu> writes:

> I suppose that this never affects anything, but in line 57 of lm.R,
> where the coefficients are defined for an empty model, when y is a
> matrix, shouldn't the value be matrix(,0,nrow(y)) rather than
> matrix(,0,3)?


From jw1085 @ending from wildc@t@@unh@edu  Sun Jun 24 20:41:09 2018
From: jw1085 @ending from wildc@t@@unh@edu (Jochen Wirsing)
Date: Sun, 24 Jun 2018 14:41:09 -0400
Subject: [Rd] potential Bug in R 3.5.0
Message-ID: <1922379.D9ebUOO9hJ@lenny3>

Hello,
I am using R under Win7 and Antergos. After installing R 3.5.0 I ran into 
several issues regarding gfortran not working properly and packages not 
installing properly when requiring dependencies (which is quite often the case 
when you have to reinstall all packages for the new R version).
Unfortunately, I cannot reproduce the gfortran issue at the moment (occuring 
under Antergos), but regarding the depency-issue, https://pastebin.com/
0nU5n3pH shows one instance of the problem, when using "tidyverse". Adding 
"dependencies = TRUE" does not help. Manual installation of packages (in the 
right order and if an error occurs due to missing dependencies installing 
those packages first) works, but is extremely time consuming and inconvenient.

Also, knitr does not acknowledge packages, even though they are called for 
(using library() in the same code chunk) and therefore cannot compile code 
properly.

All this happened only after upgrading to 3.5.0 and I hope those major issues 
can be fixed soon.

Thank you very much!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part.
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20180624/e1c53618/attachment.sig>

From jeroenoom@ @ending from gm@il@com  Mon Jun 25 13:30:07 2018
From: jeroenoom@ @ending from gm@il@com (Jeroen Ooms)
Date: Mon, 25 Jun 2018 13:30:07 +0200
Subject: [Rd] potential Bug in R 3.5.0
In-Reply-To: <1922379.D9ebUOO9hJ@lenny3>
References: <1922379.D9ebUOO9hJ@lenny3>
Message-ID: <CABFfbXtepii3y2jH8gbaMH01zdnrY_wC0kAR3iCeVBnrHdpVAQ@mail.gmail.com>

On Sun, Jun 24, 2018 at 8:41 PM, Jochen Wirsing <jw1085 at wildcats.unh.edu> wrote:
> Hello,
> I am using R under Win7 and Antergos. After installing R 3.5.0 I ran into
> several issues regarding gfortran not working properly and packages not
> installing properly when requiring dependencies (which is quite often the case
> when you have to reinstall all packages for the new R version).
> Unfortunately, I cannot reproduce the gfortran issue at the moment (occuring
> under Antergos), but regarding the depency-issue, https://pastebin.com/
> 0nU5n3pH shows one instance of the problem, when using "tidyverse". Adding
> "dependencies = TRUE" does not help.

It looks like R thinks those packages (?dbplyr?, ?rvest?, ?xml2?) are
already installed, but is unable to load them. I have never used
'Antergos' but could it be that those packages were installed with R
3.4 and therefore stopped working after you upgraded to R 3.5? You
need to rebuild all R packages after you update to R. The easiest way
is to run:

  update.packages(ask = F, checkBuilt = T)

Also check your .libPaths() to make sure that there are no old
packages left behind in older directories.

If this is not the issue, try finding out where those packages live
using e.g. find.packages("xml2") and see what error you get when
trying to load them with library("xml2").


From tom@@@k@liber@ @ending from gm@il@com  Mon Jun 25 13:59:12 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 25 Jun 2018 13:59:12 +0200
Subject: [Rd] 
 DOCUMENTATION(?): parallel::mcparallel() gives various types
 of "Error in unserialize(r) : ..." errors if value is of type raw
In-Reply-To: <CAFDcVCTxKPm5nFUFvBwT1ij7qwd5u_LvOJf=KoXp1qw6wpe1Jw@mail.gmail.com>
References: <CAFDcVCTxKPm5nFUFvBwT1ij7qwd5u_LvOJf=KoXp1qw6wpe1Jw@mail.gmail.com>
Message-ID: <bf8584c7-6410-27fb-9a55-a5db5557580b@gmail.com>

Thanks for the report, fixed in documentation of mcparallel. Raw vectors 
are reserved for internal use and cannot be returned by expressions 
passed to mcparallel. But one can indeed wrap a raw vector into a list.

FYI this internal use is not in readChild/mccollect, but in 
sendMaster/mcparallel.

Best
Tomas

On 06/21/2018 05:05 AM, Henrik Bengtsson wrote:
> I stumbled upon the following:
>
> f <- parallel::mcparallel(raw(0L))
> parallel::mccollect(f)
> # $`77083`
> # NULL
>
> but
>
> f <- parallel::mcparallel(raw(1L))
> parallel::mccollect(f)
> # Error in unserialize(r) : read error
> traceback()
> # 2: unserialize(r)
> # 1: parallel::mccollect(f)
>
> (restarting because the above appears to corrupt the R session)
>
> f <- parallel::mcparallel(raw(2L))
> parallel::mccollect(f)
> # Error in unserialize(r) : unknown input format
>
> I can reproduce this on Linux using R 3.5.0 all the way back to R
> 3.3.2 (didn't try further) and R development (unstable) (2018-06-19
> r74919).
>
> Diving into the code of parallel::mccollect(), it looks that the 'raw'
> data type has a special purpose:
>
>                    r <- readChild(pid)
>                    if (is.integer(r) || is.null(r))
>                      fin[pid == pids] <- TRUE
>                    if (is.raw(r))
>                      res[which(pid == pids)] <- list(unserialize(r))
>
> However, I don't see this behavior document in ?parallel::mcparallel.
> The closest I get is that under the 'Value' section it says:
>
>     "mccollect returns any results that are available in a list. [...]"
>
> Not sure if that should be interpreted as only values that are of type
> 'list' should be used.  OTH, the example use values of type double.
>
> /Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @ending from m@yo@edu  Tue Jun 26 20:24:27 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 26 Jun 2018 13:24:27 -0500
Subject: [Rd] list of methods
Message-ID: <bb6fa2$9mb1it@ironport10.mayo.edu>

I recently got a request to add head() and tail() methods for Surv objects, which is quite 
reasonable, but not unlike other requests for logLik,? vcov, extractAIC, ...?? What they 
all have in common is that are methods added since creation of the survival package, and 
that I didn't know they existed.

To try and get ahead of the curve, is there a way to list names of all of the default 
methods??? There are functions to get all the instances of a method by name, e.g. 
methods("extractAIC") or find all the methods already implemented for a class, but I don't 
see something give me a list of the ones that I haven't created yet.

Terry T.


	[[alternative HTML version deleted]]


From l@wrence@mich@el @ending from gene@com  Tue Jun 26 20:40:17 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Tue, 26 Jun 2018 11:40:17 -0700
Subject: [Rd] list of methods
In-Reply-To: <bb6fa2$9mb1it@ironport10.mayo.edu>
References: <bb6fa2$9mb1it@ironport10.mayo.edu>
Message-ID: <CAOQ5NyfzhbMjYdVRRMkAWz-GqDxqyt5fRLB=V2Mc000+J1LVqg@mail.gmail.com>

While it's easy to conceive of a utility that found all generics for
which there is no non-default method for a given class vector, it's
not clear it would be useful, because it depends on the nature of the
object. Surv objects are vector-like, so they need to implement the
"vector API", which is not formally defined. You could look at the
S4Vectors package or the date/time classes for reference. But Surv
gets a lot less for free since length() returns twice their logical
length, an unfortunate inconsistency.

Michael



On Tue, Jun 26, 2018 at 11:24 AM, Therneau, Terry M., Ph.D. via
R-devel <r-devel at r-project.org> wrote:
> I recently got a request to add head() and tail() methods for Surv objects, which is quite
> reasonable, but not unlike other requests for logLik,  vcov, extractAIC, ...   What they
> all have in common is that are methods added since creation of the survival package, and
> that I didn't know they existed.
>
> To try and get ahead of the curve, is there a way to list names of all of the default
> methods?   There are functions to get all the instances of a method by name, e.g.
> methods("extractAIC") or find all the methods already implemented for a class, but I don't
> see something give me a list of the ones that I haven't created yet.
>
> Terry T.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @ending from m@yo@edu  Tue Jun 26 21:30:44 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 26 Jun 2018 14:30:44 -0500
Subject: [Rd] [EXTERNAL] Re:  list of methods
In-Reply-To: <CAOQ5NyfzhbMjYdVRRMkAWz-GqDxqyt5fRLB=V2Mc000+J1LVqg@mail.gmail.com>
References: <bb6fa2$9mb1it@ironport10.mayo.edu>
 <CAOQ5NyfzhbMjYdVRRMkAWz-GqDxqyt5fRLB=V2Mc000+J1LVqg@mail.gmail.com>
Message-ID: <bb6fa2$9mbmbr@ironport10.mayo.edu>

In a Surv object length() returns number of survival times contained in the object, which 
is the logical thing to do.? The fact that a survival time needs 2 or 3 values to 
represent is simply a nuisance.?? Thus length(unclass(x)) = amount of memory consumed is 
not going to map to sensible operations.

Yes, I'll have to go through the list by hand.? Some methods will only apply to transform 
functions (makepredictcall.pspline), others to model fits (extractAIC.survreg) and others 
to vectors (head.Surv).?? I just need to slog through it.

Looking at Date is a good idea, but it wouldn't have revealed head? or tail.? It did point 
out addition of c() and rep() methods.

Terry

On 06/26/2018 01:40 PM, Michael Lawrence wrote:
> While it's easy to conceive of a utility that found all generics for
> which there is no non-default method for a given class vector, it's
> not clear it would be useful, because it depends on the nature of the
> object. Surv objects are vector-like, so they need to implement the
> "vector API", which is not formally defined. You could look at the
> S4Vectors package or the date/time classes for reference. But Surv
> gets a lot less for free since length() returns twice their logical
> length, an unfortunate inconsistency.
>
> Michael
>
>
>
> On Tue, Jun 26, 2018 at 11:24 AM, Therneau, Terry M., Ph.D. via
> R-devel <r-devel at r-project.org> wrote:
>> I recently got a request to add head() and tail() methods for Surv objects, which is quite
>> reasonable, but not unlike other requests for logLik,  vcov, extractAIC, ...   What they
>> all have in common is that are methods added since creation of the survival package, and
>> that I didn't know they existed.
>>
>> To try and get ahead of the curve, is there a way to list names of all of the default
>> methods?   There are functions to get all the instances of a method by name, e.g.
>> methods("extractAIC") or find all the methods already implemented for a class, but I don't
>> see something give me a list of the ones that I haven't created yet.
>>
>> Terry T.
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From murdoch@dunc@n @ending from gm@il@com  Wed Jun 27 00:55:16 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Tue, 26 Jun 2018 18:55:16 -0400
Subject: [Rd] list of methods
In-Reply-To: <bb6fa2$9mb1it@ironport10.mayo.edu>
References: <bb6fa2$9mb1it@ironport10.mayo.edu>
Message-ID: <31f369bd-9368-381f-d78b-78e2c1e360f9@gmail.com>

On 26/06/2018 2:24 PM, Therneau, Terry M., Ph.D. via R-devel wrote:
> I recently got a request to add head() and tail() methods for Surv objects, which is quite
> reasonable, but not unlike other requests for logLik,? vcov, extractAIC, ...?? What they
> all have in common is that are methods added since creation of the survival package, and
> that I didn't know they existed.
> 
> To try and get ahead of the curve, is there a way to list names of all of the default
> methods??? There are functions to get all the instances of a method by name, e.g.
> methods("extractAIC") or find all the methods already implemented for a class, but I don't
> see something give me a list of the ones that I haven't created yet.

There are a lot of default methods; most of them are probably irrelevant 
to you.  But if you want to see them, here's one way:

   basepkgs <- rownames(subset(as.data.frame(installed.packages()),
                               Priority == "base"))
   for (pkg in basepkgs) {
     print(ls(getNamespace(pkg), pattern = ".default$"))
   }

This only shows the ones in base packages.  If you expand to 'Priority 
== "recommended"' or something even less restrictive, you'll get more.

Duncan Murdoch


From therne@u @ending from m@yo@edu  Wed Jun 27 20:38:07 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 27 Jun 2018 13:38:07 -0500
Subject: [Rd] new behavior of model.response
Message-ID: <bb6fa2$9mi8qn@ironport10.mayo.edu>

I am getting some unexplained changes in the latest version of survival, and finally 
traced it down to this: model.response acts differently for Surv objects.
Here is a closed form example using a made up class Durv = diagnose survival.?? I tracked 
it down by removing methods one by one from Surv; I had just added some new ones so they 
were my suspects.

test <- data.frame(time=1:8, status=rep(0:1, 4), age=60:67)
row.names(test) <- letters[1:8]

Durv <- function(...) {
 ??? temp <- cbind(...)
 ??? class(temp) <- "Durv"
 ??? temp
}
mf1 <- model.frame(Durv(time, status) ~ age, data=test)
names(model.response(mf1))
#? NULL

length.Durv <- function(x) nrow(x)
names(model.response(mf1))
#? [1] "a" "b" "c" "d" "e" "f" "g" "h" NA? NA? NA? NA? NA? NA NA? NA

The length method for Surv objects has been around for some while, this behavior is new.? 
It caused the 'time' component of survfit objects to suddenly have names and so was 
discovered in my test suite.? I had planned to submit an update today, but now need to 
delay it.

The length of the Surv (Durv) object above is 8, BTW; the fact that it's representation 
requires either 16 elements (right censored) or 24 (interval censored) is a footnote.

Terry Therneau

	[[alternative HTML version deleted]]


From therne@u @ending from m@yo@edu  Wed Jun 27 22:54:20 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 27 Jun 2018 15:54:20 -0500
Subject: [Rd] new behavior of model.response
In-Reply-To: <20C1444B-196C-4E35-A0E1-3C043830CC3B@ucsd.edu>
References: <bb6fa2$9mi8qn@ironport10.mayo.edu>
 <20C1444B-196C-4E35-A0E1-3C043830CC3B@ucsd.edu>
Message-ID: <bb6fa2$9mjhpq@ironport10.mayo.edu>

Charles Berry pointed out an error in my reasoning.?? In the current survival I forgot the 
S3method line for length in the NAMESPACE file, so the behavior is really not new.? 
Nonetheless it remains surprising and non-intuitive.? Why does model.response sometimes 
attach spurious names, when the Surv object itself does not have them?

Terry


tmt% R --vanilla
R version 3.4.2 (2017-09-28) -- "Short Summer"

test <- data.frame(time=1:8, status=rep(0:1, 4), age=60:67)
row.names(test) <- letters[1:8]

library(survival)

mf2 <- model.frame(Surv(time, status) ~ age, data=test)
names(mf2[[1]])
# NULL
names(model.response(mf2))
# NULL

length.Surv <- survival:::length.Surv

names(model.response(mf2))
 ?# [1] "a" "b" "c" "d" "e" "f" "g" "h" NA? NA? NA? NA? NA? NA? NA NA


	[[alternative HTML version deleted]]


From therne@u @ending from m@yo@edu  Thu Jun 28 00:14:42 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 27 Jun 2018 17:14:42 -0500
Subject: [Rd] new behavior in model.response
Message-ID: <bb6fa2$9mk1q0@ironport10.mayo.edu>

I now understand the issue, which leads to a different and deeper issue which is "how to 
assign a proper length to Surv objects".

 > Surv(c(1,2,3), c(1,0,1))
[1] 1? 2+ 3

The above prints as 3 elements and is conceptually 3 elements. But if I give it length 
method to return a 3 then I need a names method, and names<-? pays no attention to my 
defined length. How do we conceive of and manage a vector whose elements happen to require 
more than one storage slot for their representation?? An obvious example is the complex 
type, but it seems that had to be baked right down into the core.



	[[alternative HTML version deleted]]


From Achim@Zeilei@ @ending from uibk@@c@@t  Thu Jun 28 00:58:49 2018
From: Achim@Zeilei@ @ending from uibk@@c@@t (Achim Zeileis)
Date: Thu, 28 Jun 2018 00:58:49 +0200 (CEST)
Subject: [Rd] new behavior in model.response
In-Reply-To: <bb6fa2$9mk1q0@ironport10.mayo.edu>
References: <bb6fa2$9mk1q0@ironport10.mayo.edu>
Message-ID: <alpine.DEB.2.21.1806280045420.28315@paninaro>

On Thu, 28 Jun 2018, Therneau, Terry M., Ph.D. via R-devel wrote:

> I now understand the issue, which leads to a different and deeper issue 
> which is "how to assign a proper length to Surv objects".
>
> > Surv(c(1,2,3), c(1,0,1))
> [1] 1? 2+ 3
>
> The above prints as 3 elements and is conceptually 3 elements. But if I 
> give it length method to return a 3 then I need a names method, and 
> names<-? pays no attention to my defined length. How do we conceive of 
> and manage a vector whose elements happen to require more than one 
> storage slot for their representation?? An obvious example is the 
> complex type, but it seems that had to be baked right down into the 
> core.

I think you just have to implement all methods required to make it look 
like a vector even if it is internally a matrix. Thus, you need methods 
for length and for names and names<-. Internally, the names can be stored 
as row names.

Further useful methods for "Surv" objects might include 
- as.double/as.integer (presumably just extracting the "time"),
- c
- str

Possibly also a dedicated summary.

An example for such a class is our "paircomp" in "psychotools". But I'm 
sure there are other/better examples elsewhere.

Best,
Achim

From ccberry @ending from uc@d@edu  Thu Jun 28 02:06:52 2018
From: ccberry @ending from uc@d@edu (Berry, Charles)
Date: Thu, 28 Jun 2018 00:06:52 +0000
Subject: [Rd] new behavior in model.response
In-Reply-To: <alpine.DEB.2.21.1806280045420.28315@paninaro>
References: <bb6fa2$9mk1q0@ironport10.mayo.edu>
 <alpine.DEB.2.21.1806280045420.28315@paninaro>
Message-ID: <1A05CED0-8268-4A77-B846-D55E72E22BCE@ucsd.edu>



> On Jun 27, 2018, at 3:58 PM, Achim Zeileis <Achim.Zeileis at uibk.ac.at> wrote:
> 
> On Thu, 28 Jun 2018, Therneau, Terry M., Ph.D. via R-devel wrote:
> 
>> I now understand the issue, which leads to a different and deeper issue which is "how to assign a proper length to Surv objects".
>> 
>> > Surv(c(1,2,3), c(1,0,1))
>> [1] 1  2+ 3
>> 
>> The above prints as 3 elements and is conceptually 3 elements. But if I give it length method to return a 3 then I need a names method, and names<-  pays no attention to my defined length. How do we conceive of and manage a vector whose elements happen to require more than one storage slot for their representation?  An obvious example is the complex type, but it seems that had to be baked right down into the core.
> 
> I think you just have to implement all methods required to make it look like a vector even if it is internally a matrix. Thus, you need methods for length and for names and names<-. Internally, the names can be stored as row names.


I think a closer look at model.response() would help. 

IIUC, the reasoning therein is that comparing 

	length(data[[1L]]) (aka `length(v)') 

to 

	length(attr(data, "row.names")) (aka `nrows') 

is to decide whether names are sensibly assigned to `v'. I think for Surv objects they are not.

I suppose you could define

	`names<-.Surv` <- function(...) NULL

but that seems so silly I think there must be a better way. 

I am low on coffee right now, but I wonder if having a non-exported version of model.response in the survival package would solve this without breaking anything else. 

Chuck


From k@mil m@ili@g off fr@@kowicz@me  Thu Jun 28 11:40:06 2018
From: k@mil m@ili@g off fr@@kowicz@me (k@mil m@ili@g off fr@@kowicz@me)
Date: Thu, 28 Jun 2018 11:40:06 +0200
Subject: [Rd] Null pointer dereference in Rf_isVector()
Message-ID: <2f843a96fa6fd0baf354ed406795053c@frankowicz.me>

Hello,

After some fuzz testing I found a problem with Rf_isVector() function in 
R 3.5.0.

Platform: Ubuntu 16.04
Compiler: Clang-4.0 (from Ubuntu's repository) + ASAN

Crashing R code:

structure(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),.Dim=c(53,4),.Dimnames=~((0)))

To reproduce:
1. Save crashing code to file.
2. Run it with command: Rscript --vanilla r_nullptr_Rf_isVector

ASAN Report:

==11608==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000002 
(pc 0x0000005cc479 bp 0x000000000000 sp 0x7fff7a56d770 T0)
==11608==The signal is caused by a READ memory access.
==11608==Hint: address points to the zero page.
     #0 0x5cc478 in Rf_isVector 
R-3.5.0/src/main/../../src/include/Rinlinedfuns.h:857:12
     #1 0x5cc478 in Rf_dimnamesgets R-3.5.0/src/main/attrib.c:1099
     #2 0x5c4f72 in Rf_setAttrib R-3.5.0/src/main/attrib.c:259:9
     #3 0x5db48d in do_attributesgets R-3.5.0/src/main/attrib.c:1373:6
     #4 0x84b939 in bcEval R-3.5.0/src/main/eval.c:7082:12
     #5 0x8171df in Rf_eval R-3.5.0/src/main/eval.c:624:8
     #6 0x8669a2 in R_execClosure R-3.5.0/src/main/eval.c
     #7 0x817d7f in Rf_eval R-3.5.0/src/main/eval.c:747:12
     #8 0x93cfa4 in Rf_ReplIteration R-3.5.0/src/main/main.c:258:2
     #9 0x941e7a in R_ReplConsole R-3.5.0/src/main/main.c:308:11
     #10 0x941e7a in run_Rmainloop R-3.5.0/src/main/main.c:1082
     #11 0x50080a in main R-3.5.0/src/main/Rmain.c:29:5
     #12 0x7fd74d55c82f in __libc_start_main 
(/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
     #13 0x42cf88 in _start (R-3.5.0/bin/exec/R+0x42cf88)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV 
R-3.5.0/src/main/../../src/include/Rinlinedfuns.h:857:12 in Rf_isVector
==11608==ABORTING

Best Regards,
Kamil Frankowicz


From therne@u @ending from m@yo@edu  Thu Jun 28 21:47:45 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 28 Jun 2018 14:47:45 -0500
Subject: [Rd] new behavior in model.response -- Solved
Message-ID: <bb6fa2$9mpv18@ironport10.mayo.edu>

Thanks to multiple readers for comments and patience as I sorted this out.? I now have 
working length and names methods for Surv objects, which do not seem to break anything.?? 
I just ran the test suites for 471 packages that depend on survival, but I don't test 
against bioconductor so cannot speak to that corpus.

Essentially, if I wanted to think of? Surv(1:6, rep(1:0, 3)) = 1 2+ 3? 4+ 5? 6+ as a 
vector of length 6, although stored in a longer representation, I needed to
 ? a. add a length method
 ? b. add names and names<- methods
 ? c. But, the names method cannot create a length=6 names attribute.? Handling of a names 
attribute is baked into the low-level code, and that code treats number of elements as the 
length, no matter what you say.
 ? d. The solution was to make names.Surv store the results in the rownames.

Terry T.


	[[alternative HTML version deleted]]


From d@@tt@li @ending from gm@il@com  Fri Jun 29 08:07:09 2018
From: d@@tt@li @ending from gm@il@com (Dean Attali)
Date: Fri, 29 Jun 2018 02:07:09 -0400
Subject: [Rd] Bug in tools::md5sum - does not work when filepath contains
 tilde (ie home directory)
Message-ID: <CA+j8Z+=ba47m9HRTgfNxP0HMJaUmOMhn=g326En+Q5d=sm+C5Q@mail.gmail.com>

I've reproduced on ubuntu and winodws with R3.4.3

When the filepath contains a tilde, the result is NA. But if the file path
is expanded then the function works.

Example:
tools::md5sum("~/.Rprofile") returns NA
tools::md5sum(normalizePath("~/.Rprofile")) returns the proper md5


Perhaps this is expected behaviour because the documentation does say NA is
returned for unreadable files, but I didn't think "~" would make a file
unreadable to the function.

	[[alternative HTML version deleted]]


From becker@g@be @ending from gene@com  Fri Jun 29 14:36:36 2018
From: becker@g@be @ending from gene@com (Gabe Becker)
Date: Fri, 29 Jun 2018 05:36:36 -0700
Subject: [Rd] 
 Bug in tools::md5sum - does not work when filepath contains
 tilde (ie home directory)
In-Reply-To: <CA+j8Z+=ba47m9HRTgfNxP0HMJaUmOMhn=g326En+Q5d=sm+C5Q@mail.gmail.com>
References: <CA+j8Z+=ba47m9HRTgfNxP0HMJaUmOMhn=g326En+Q5d=sm+C5Q@mail.gmail.com>
Message-ID: <CAMFmJsn5PdACKrsv9fA5PBJW8UwH6U-a7oGUfj6i3L516GZbEQ@mail.gmail.com>

Dean,

I filed a patch for this in bugzilla yesterday so depending on reception
this should be fixed in devel soon.

Best,
~G


On Fri, Jun 29, 2018, 3:58 AM Dean Attali <daattali at gmail.com> wrote:

> I've reproduced on ubuntu and winodws with R3.4.3
>
> When the filepath contains a tilde, the result is NA. But if the file path
> is expanded then the function works.
>
> Example:
> tools::md5sum("~/.Rprofile") returns NA
> tools::md5sum(normalizePath("~/.Rprofile")) returns the proper md5
>
>
> Perhaps this is expected behaviour because the documentation does say NA is
> returned for unreadable files, but I didn't think "~" would make a file
> unreadable to the function.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From luke-tier@ey m@ili@g off uiow@@edu  Fri Jun 29 22:19:36 2018
From: luke-tier@ey m@ili@g off uiow@@edu (luke-tier@ey m@ili@g off uiow@@edu)
Date: Fri, 29 Jun 2018 15:19:36 -0500 (CDT)
Subject: [Rd] Null pointer dereference in Rf_isVector()
In-Reply-To: <2f843a96fa6fd0baf354ed406795053c@frankowicz.me>
References: <2f843a96fa6fd0baf354ed406795053c@frankowicz.me>
Message-ID: <alpine.DEB.2.20.1806291519130.9156@luke-Latitude-7480>

Thanks for the report. Fixed in R-devel and R-patched.

Best,

luke

On Thu, 28 Jun 2018, kamil at frankowicz.me wrote:

> Hello,
>
> After some fuzz testing I found a problem with Rf_isVector() function in R 
> 3.5.0.
>
> Platform: Ubuntu 16.04
> Compiler: Clang-4.0 (from Ubuntu's repository) + ASAN
>
> Crashing R code:
>
> structure(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),.Dim=c(53,4),.Dimnames=~((0)))
>
> To reproduce:
> 1. Save crashing code to file.
> 2. Run it with command: Rscript --vanilla r_nullptr_Rf_isVector
>
> ASAN Report:
>
> ==11608==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000002 (pc 
> 0x0000005cc479 bp 0x000000000000 sp 0x7fff7a56d770 T0)
> ==11608==The signal is caused by a READ memory access.
> ==11608==Hint: address points to the zero page.
>    #0 0x5cc478 in Rf_isVector 
> R-3.5.0/src/main/../../src/include/Rinlinedfuns.h:857:12
>    #1 0x5cc478 in Rf_dimnamesgets R-3.5.0/src/main/attrib.c:1099
>    #2 0x5c4f72 in Rf_setAttrib R-3.5.0/src/main/attrib.c:259:9
>    #3 0x5db48d in do_attributesgets R-3.5.0/src/main/attrib.c:1373:6
>    #4 0x84b939 in bcEval R-3.5.0/src/main/eval.c:7082:12
>    #5 0x8171df in Rf_eval R-3.5.0/src/main/eval.c:624:8
>    #6 0x8669a2 in R_execClosure R-3.5.0/src/main/eval.c
>    #7 0x817d7f in Rf_eval R-3.5.0/src/main/eval.c:747:12
>    #8 0x93cfa4 in Rf_ReplIteration R-3.5.0/src/main/main.c:258:2
>    #9 0x941e7a in R_ReplConsole R-3.5.0/src/main/main.c:308:11
>    #10 0x941e7a in run_Rmainloop R-3.5.0/src/main/main.c:1082
>    #11 0x50080a in main R-3.5.0/src/main/Rmain.c:29:5
>    #12 0x7fd74d55c82f in __libc_start_main 
> (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
>    #13 0x42cf88 in _start (R-3.5.0/bin/exec/R+0x42cf88)
>
> AddressSanitizer can not provide additional info.
> SUMMARY: AddressSanitizer: SEGV 
> R-3.5.0/src/main/../../src/include/Rinlinedfuns.h:857:12 in Rf_isVector
> ==11608==ABORTING
>
> Best Regards,
> Kamil Frankowicz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


