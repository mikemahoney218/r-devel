From ch|r|com @end|ng |rom goog|e@com  Tue Aug  2 00:27:10 2022
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Mon, 1 Aug 2022 15:27:10 -0700
Subject: [Rd] Should invisible() get signature x=NULL?
Message-ID: <CAD7Bkx-H+-Xe=SFZbBE3Zgw89Dy--uA4nzcQO9U7obzHjSxeHg@mail.gmail.com>

I think most experienced R users are familiar with return(invisible())
being used as shorthand for return(invisible(NULL)).

However, this NULL default is not documented anywhere -- we have to
dive into src/main/print.c:do_invisible to source this behavior.

Is this lack of documentation intentional? Otherwise, should the
signature be updated to reflect this default?

invisible <- function(x = NULL) .Primitive("invisible")

Otherwise, should this default be mentioned in ?invisible ?


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Aug  2 02:08:53 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 1 Aug 2022 20:08:53 -0400
Subject: [Rd] Should invisible() get signature x=NULL?
In-Reply-To: <CAD7Bkx-H+-Xe=SFZbBE3Zgw89Dy--uA4nzcQO9U7obzHjSxeHg@mail.gmail.com>
References: <CAD7Bkx-H+-Xe=SFZbBE3Zgw89Dy--uA4nzcQO9U7obzHjSxeHg@mail.gmail.com>
Message-ID: <02ae40ec-4824-7594-131f-b9cea33c8915@gmail.com>

On 01/08/2022 6:27 p.m., Michael Chirico via R-devel wrote:
> I think most experienced R users are familiar with return(invisible())
> being used as shorthand for return(invisible(NULL)).

I'm not sure that's true... the R sources themselves are inconsistent 
about using invisible() vs invisible(NULL).

> However, this NULL default is not documented anywhere -- we have to
> dive into src/main/print.c:do_invisible to source this behavior.
> 
> Is this lack of documentation intentional? Otherwise, should the
> signature be updated to reflect this default?
> 
> invisible <- function(x = NULL) .Primitive("invisible")
> 
> Otherwise, should this default be mentioned in ?invisible ?

But documenting it seems wise.

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Aug  2 09:26:12 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 2 Aug 2022 09:26:12 +0200
Subject: [Rd] Should invisible() get signature x=NULL?
In-Reply-To: <02ae40ec-4824-7594-131f-b9cea33c8915@gmail.com>
References: <CAD7Bkx-H+-Xe=SFZbBE3Zgw89Dy--uA4nzcQO9U7obzHjSxeHg@mail.gmail.com>
 <02ae40ec-4824-7594-131f-b9cea33c8915@gmail.com>
Message-ID: <25320.53652.284203.674733@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Mon, 1 Aug 2022 20:08:53 -0400 writes:

    > On 01/08/2022 6:27 p.m., Michael Chirico via R-devel
    > wrote:
    >> I think most experienced R users are familiar with
    >> return(invisible()) being used as shorthand for
    >> return(invisible(NULL)).

    > I'm not sure that's true... the R sources themselves are
    > inconsistent about using invisible() vs invisible(NULL).

Well, they *are* identical in what they return, but to me there *is* a
stylistic difference:  The latter emphasizes the return value to
be NULL.

    >> However, this NULL default is not documented anywhere --
    >> we have to dive into src/main/print.c:do_invisible to
    >> source this behavior.
    >> 
    >> Is this lack of documentation intentional? Otherwise,
    >> should the signature be updated to reflect this default?
    >> 
    >> invisible <- function(x = NULL) .Primitive("invisible")
    >> 
    >> Otherwise, should this default be mentioned in ?invisible
    >> ?

    > But documenting it seems wise.

    > Duncan Murdoch

I prefer to agree with Michael that the "fake" argument list (*)
should be updated to 'x = NULL'.

*) Primitive functions have no formal arguments.  We have
 provided artificially constructed formal arguments mainly for
 printing, only "relatively recently".
 E.g., in R 2.0.0, we still had

> invisible
.Primitive("invisible")


Martin

--
Martin Maechler
ETH Zurich  and  R Core team


From @|ex@nder@keth @end|ng |rom |venturegroup@com  Wed Aug  3 10:44:55 2022
From: @|ex@nder@keth @end|ng |rom |venturegroup@com (Alexander Keth)
Date: Wed, 3 Aug 2022 10:44:55 +0200 (CEST)
Subject: [Rd] Display lines of code from the top-level script or subscript
 in non-interactive R Session with Rprof
Message-ID: <1822065500.11275024.1659516295206@zm-relay01>

Hello there,


I am running R in a production environment. My goal is to profile all production jobs, which are run in non interactive R sessions via Rscript, in the form job-xyz ran for xxx amount of time and spend yyy seconds with code execution of line # (for every line of code). In general the R code is run with a main script which calls various subscripts. The jobs make heays use of external packages (e.g. dplyr, DBI, data.table and so on).

I re-installed all packages with --with-keep.source. Subscripts are sourced in the main-script via eval(parse("path/to/subscript.R")) to enable line-profiling with Rprof. The call to Rprof is Rprof("rprof.out", line.profiling = TRUE, memory.profiling = TRUE).


Unfotunately, the majority of the code relies on heavy package use (e.g. dplyr, data.table and so on). Thus most of the code lines in Rprof refer to the source-code within those packages and not the 'top-level' source code in the main-script or the subscripts. So far the only solution I came up with is to scrape the Rprof output using the profile package (https://github.com/r-prof/profile), extract the top-level call stack function calls (remove top level eval calls before) and auto-magically match the function calls with the function calls performed in the main-script and subscripts. However, this process is obviously not perfect and very error prone...


Is there any better way to do things?


Cheers,
Alex


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Aug  3 13:06:16 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 3 Aug 2022 07:06:16 -0400
Subject: [Rd] 
 Display lines of code from the top-level script or subscript
 in non-interactive R Session with Rprof
In-Reply-To: <1822065500.11275024.1659516295206@zm-relay01>
References: <1822065500.11275024.1659516295206@zm-relay01>
Message-ID: <2489b597-5af5-9db6-e5e0-66a8071fd540@gmail.com>

On 03/08/2022 4:44 a.m., Alexander Keth via R-devel wrote:
> Hello there,
> 
> 
> I am running R in a production environment. My goal is to profile all production jobs, which are run in non interactive R sessions via Rscript, in the form job-xyz ran for xxx amount of time and spend yyy seconds with code execution of line # (for every line of code). In general the R code is run with a main script which calls various subscripts. The jobs make heays use of external packages (e.g. dplyr, DBI, data.table and so on).
> 
> I re-installed all packages with --with-keep.source. Subscripts are sourced in the main-script via eval(parse("path/to/subscript.R")) to enable line-profiling with Rprof. The call to Rprof is Rprof("rprof.out", line.profiling = TRUE, memory.profiling = TRUE).
> 
> 
> Unfotunately, the majority of the code relies on heavy package use (e.g. dplyr, data.table and so on). Thus most of the code lines in Rprof refer to the source-code within those packages and not the 'top-level' source code in the main-script or the subscripts. So far the only solution I came up with is to scrape the Rprof output using the profile package (https://github.com/r-prof/profile), extract the top-level call stack function calls (remove top level eval calls before) and auto-magically match the function calls with the function calls performed in the main-script and subscripts. However, this process is obviously not perfect and very error prone...
> 
> 
> Is there any better way to do things?

I think reinstalling uninteresting packages --with-keep-source was a 
mistake.  If you use the standard builds of those, and only keep source 
in your own code, most of the detail will come from there.

I'm not familiar with the profile package, but the utils::summaryRprof() 
function with `lines = "show"` will give a display that concentrates on 
the timing by line in the code that has source references. I think from 
your description you want to look at the "by.total" table, but maybe you 
want the "by.line" table.

Duncan Murdoch


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Aug  4 14:48:06 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 4 Aug 2022 08:48:06 -0400
Subject: [Rd] Minor error in ?cbind
Message-ID: <c6ce8ca6-ff8f-4420-4c2a-200fb244356c@stats.uwo.ca>

The help for rbind() and cbind() says in the text that the default for 
deparse.level is 0, when in fact it is 1.? Here's a patch to fix it.

Duncan Murdoch


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: cbind.patch.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20220804/0c53b210/attachment.txt>

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Aug  4 16:03:24 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 4 Aug 2022 16:03:24 +0200
Subject: [Rd] Minor error in ?cbind
In-Reply-To: <c6ce8ca6-ff8f-4420-4c2a-200fb244356c@stats.uwo.ca>
References: <c6ce8ca6-ff8f-4420-4c2a-200fb244356c@stats.uwo.ca>
Message-ID: <25323.53676.470465.743476@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Thu, 4 Aug 2022 08:48:06 -0400 writes:

    > The help for rbind() and cbind() says in the text that the
    > default for deparse.level is 0, when in fact it is 1.?

Well, that's not what is meant by the current text.
Note that ";" is semantically almost a ".", and I have always read

     \code{deparse.level = 0} constructs no labels; the default,\cr
     \code{deparse.level = 1 or 2} constructs labels from the argument
     names, see the \sQuote{Value} section below.

as

     'deparse.level = 0' constructs no labels; 
     the default, 'deparse.level = 1 or 2' constructs labels from the argument
     names, see the _Value_ section below.

so *not* as claiming that the default is deparse.level=0.
But you are right that the current phrasing should be changed to
be more clear.  I would like to keep mentioning the default in the
\arguments{} part, and only change that, e.g., to

     \code{deparse.level = 0} constructs no labels; 
     the default \code{deparse.level = 1} typically and
     \code{deparse.level = 2} always construct labels from the argument
     names, see the \sQuote{Value} section below.

WDYT ?


    > Here's a patch to fix it.

    > Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Aug  5 11:53:45 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Aug 2022 11:53:45 +0200
Subject: [Rd] 
 stats::poly() stopped working for Date input -- intentional?
In-Reply-To: <25288.16515.793861.777833@stat.math.ethz.ch>
References: <CAD7Bkx85RaBLdhGiUUTgiyRKkBDv=gH=zLVB_+8bGZV=fP3C3g@mail.gmail.com>
 <25288.16515.793861.777833@stat.math.ethz.ch>
Message-ID: <25324.59561.734268.80580@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 8 Jul 2022 16:34:43 +0200 writes:

>>>>> Michael Chirico via R-devel 
>>>>>     on Thu, 7 Jul 2022 22:17:12 -0700 writes:

    >> SVN#80126 added rep.difftime, which means
    >> rep(as.difftime(0, units="secs")) retains the "datetime"
    >> class.

    > (yes, by me, March 2021), this was fixing PR#18066 ==>
    > https://bugs.r-project.org/show_bug.cgi?id=18066 )

    > Thank you, Michael, for the report!

    >> A consequence of this is that stats::poly() no longer
    >> accepts Date/POSIXct input (because poly calls outer() on
    >> the de-meaned input, which rep()):

    >> # works on R 3.6.3 (and probably everything < 4.1.0) #
    >> but on R 4.1.3 (and probably everything >= 4.1.0):
    >> stats::poly(Sys.Date() - 0:4, 3) # Error in
    >> Ops.difftime(X, Y, ...) : '^' not defined for "difftime"
    >> objects

    >> Is this intentional?

    > Well, actually I think it was not intentional that poly()
    > worked at all with Date/POSIXct input, ..  OTOH you *did*
    > encounter it.

    > Note that

    >> poly(as.Date("2020-2-2") - 0:3, 2, raw = TRUE)
    >   Error in Ops.Date(X, Y, ...) : ^ not defined for "Date"
    > objects
    >> 

    > happens (I think) in all versions of R, i.e., even before
    > the rep() extension.

    >> If not, a simple patch is to call 'x <- as.double(x)'
    >> before de-meaning.

    > well, yes, in that branch of the source code.  ... and a
    > similar call for the raw = TRUE case.

    > At first, this seems to make sense to me, but actually it
    > will break when someone uses

    >    poly(<complex>, ..)
   
    > [ Also: what about the "prediction" case (coef =
    > <specified>) ?  could you use prediction of an lm() for
    > your real use case ? ]

    > ---

    > Maybe it makes most sense if you open an R bugzilla entry
    > for this (including part of our current dialogue).

Even though there hasn't been any such formal bug report,
I've now committed a change (to R-devel only for the time being,
svn revision 82681) 
which re-enables the working of poly() in such cases and even 
for the  raw=TRUE  case where it had never worked.
Also, this is now documented.

The only change to the source was the insertion of

    if(is.object(x) && mode(x) == "numeric") x <- as.numeric(x) 

into the body of poly().


Thank you once more, Michael, for raising the issue.

Martin


From Reece@God|ng @end|ng |rom out|ook@com  Mon Aug  8 18:51:28 2022
From: Reece@God|ng @end|ng |rom out|ook@com (Reece Goding)
Date: Mon, 8 Aug 2022 16:51:28 +0000
Subject: [Rd] Is the behaviour of sample's prob = NULL default argument
 undocumented?
Message-ID: <LO2P123MB1920AE1680B3BDB0AD2F102F8A639@LO2P123MB1920.GBRP123.PROD.OUTLOOK.COM>

Hello,

Does the documentation for sample never say what happens if you leave the prob argument NULL?

This might be a job for R-help, but pride has me hoping that I'm missing something very technical rather than very obvious.

Thanks,
Reece Goding

From m@rc_@chw@rtz @end|ng |rom me@com  Mon Aug  8 19:13:06 2022
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Mon, 8 Aug 2022 13:13:06 -0400
Subject: [Rd] 
 =?utf-8?q?Is_the_behaviour_of_sample=27s_prob_=3D_NULL_defa?=
 =?utf-8?q?ult_argument_undocumented=3F?=
In-Reply-To: <LO2P123MB1920AE1680B3BDB0AD2F102F8A639@LO2P123MB1920.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB1920AE1680B3BDB0AD2F102F8A639@LO2P123MB1920.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <etPan.62f14422.4d6fca3f.2622@me.com>

Hi,

In the Details section of ?sample, the 6th paragraph begins with the following sentence:

"The optional prob argument can be used to give a vector of weights for obtaining the elements of the vector being sampled."

Since the argument is optional, it would imply that the default behavior is for an equal weighting of the elements in the source vector.

Regards,

Marc Schwartz


On August 8, 2022 at 12:51:28 PM, Reece Goding (reece.goding at outlook.com (mailto:reece.goding at outlook.com)) wrote:

> Hello,
>
> Does the documentation for sample never say what happens if you leave the prob argument NULL?
>
> This might be a job for R-help, but pride has me hoping that I'm missing something very technical rather than very obvious.
>
> Thanks,
> Reece Goding
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r-deve| @end|ng |rom @ker@t|ng@de  Tue Aug  9 17:40:22 2022
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Tue, 09 Aug 2022 17:40:22 +0200 (CEST)
Subject: [Rd] get() promise to missing arg
Message-ID: <E1oLRLC-0004nt-Tw@rmmprod07.runbox>

Hi,

Please consider the following:

> e <- new.env()
> delayedAssign("p", quote(expr = ), assign.env = e)
> e$m <- quote(expr = )
> identical(e$m, e$p)
[1] TRUE
> 
> get("p", e)

> get("m", e)
Error in get("m", e) : argument "m" is missing, with no default

Although objects m and p are identical(), get() behaves differently for them (in R version 4.2.1). Is this intended?

I stumbled across this in the context of utils:::print.ls_str(), which fails when encountering a promise to the missing arg:

> ls.str(e)
m : <missing>
p : Error in inherits(o, "error") : argument "o" is missing, with no default

Best,
Andreas

From d@v|@ @end|ng |rom r@tud|o@com  Tue Aug  9 20:26:08 2022
From: d@v|@ @end|ng |rom r@tud|o@com (Davis Vaughan)
Date: Tue, 9 Aug 2022 14:26:08 -0400
Subject: [Rd] Should `as.difftime()` convert integer input to double?
Message-ID: <CABzLhzys2eihd7MuvKuFZyBCkjzA+shdM1H0R=r1a1mQ_5CMnw@mail.gmail.com>

Hi all,

Currently, `as.difftime()` with an integer input will produce a difftime
object that internally is built on an integer vector, i.e.:

x <- as.difftime(1L, units = "secs")
typeof(x)
#> [1] "integer"

x <- as.difftime(1, units = "secs")
typeof(x)
#> [1] "double"

I feel like difftime objects should always be built on *double* vectors.
There are a few reasons I feel like this should be true:

- There is an `as.double.difftime()` method, but no `as.integer.difftime()`
method, which implies something about what the underlying storage type is
assumed to be.

- AFAIK, there is no other way to produce a difftime object with integer
storage using the exposed API (aside from abusing the internal .difftime()
helper). Even `.Date(1L) - .Date(1L)` produces a difftime with double
storage.

- `seq.Date()` used to be able to produce dates with integer storage, but
as of recently even that edge case has been altered to always produce dates
with double storage. So a change to also force difftime to have double
storage would feel consistent with that.
https://github.com/wch/r-source/commit/0762ee983813c4df9b93f6b5ee52c910dcd3ab39

It looks like a patch to `as.difftime()` would be fairly straightforward
(i.e. ensuring that integer input is coerced to double), so I'd be happy to
attempt one if someone else agrees that this should be changed.

Thanks,
Davis

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Tue Aug  9 21:10:53 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Tue, 9 Aug 2022 12:10:53 -0700
Subject: [Rd] Should `as.difftime()` convert integer input to double?
In-Reply-To: <CABzLhzys2eihd7MuvKuFZyBCkjzA+shdM1H0R=r1a1mQ_5CMnw@mail.gmail.com>
References: <CABzLhzys2eihd7MuvKuFZyBCkjzA+shdM1H0R=r1a1mQ_5CMnw@mail.gmail.com>
Message-ID: <CAHqSRuS=c9TvbCKqwqB9GcGHVek5O9djgN0yJXzb9GpdfEvEJg@mail.gmail.com>

Forcing difftime's payload to be numeric would avoid anomalies like

> as.difftime(123456789L, units="secs") * 100L
Time difference of NA secs
Warning message:
In e2 * unclass(e1) : NAs produced by integer overflow
> as.difftime(123456789, units="secs") * 100L
Time difference of 12345678900 secs

Note that there are packages (e.g., fst, a serialization package) which can
(in C++ code) understand and create difftimes with integer payloads, so you
may have trouble completely getting rid of such things.

-Bill

On Tue, Aug 9, 2022 at 11:26 AM Davis Vaughan <davis at rstudio.com> wrote:

> Hi all,
>
> Currently, `as.difftime()` with an integer input will produce a difftime
> object that internally is built on an integer vector, i.e.:
>
> x <- as.difftime(1L, units = "secs")
> typeof(x)
> #> [1] "integer"
>
> x <- as.difftime(1, units = "secs")
> typeof(x)
> #> [1] "double"
>
> I feel like difftime objects should always be built on *double* vectors.
> There are a few reasons I feel like this should be true:
>
> - There is an `as.double.difftime()` method, but no `as.integer.difftime()`
> method, which implies something about what the underlying storage type is
> assumed to be.
>
> - AFAIK, there is no other way to produce a difftime object with integer
> storage using the exposed API (aside from abusing the internal .difftime()
> helper). Even `.Date(1L) - .Date(1L)` produces a difftime with double
> storage.
>
> - `seq.Date()` used to be able to produce dates with integer storage, but
> as of recently even that edge case has been altered to always produce dates
> with double storage. So a change to also force difftime to have double
> storage would feel consistent with that.
>
> https://github.com/wch/r-source/commit/0762ee983813c4df9b93f6b5ee52c910dcd3ab39
>
> It looks like a patch to `as.difftime()` would be fairly straightforward
> (i.e. ensuring that integer input is coerced to double), so I'd be happy to
> attempt one if someone else agrees that this should be changed.
>
> Thanks,
> Davis
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Sat Aug 13 13:20:28 2022
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Sat, 13 Aug 2022 06:20:28 -0500
Subject: [Rd] makepredictcall
Message-ID: <ff6a6b$ieem7q@ironport10.mayo.edu>

I'm trying to better understand makepredictcall.? The method for ns() starts with the 
following very cryptic comment and line of code:
 ??? ## check must work correctly when call is a symbol, both for quote(ns) and quote(t1):
 ??? if(as.character(call)[1L] == "ns" || (is.call(call) && identical(eval(call[[1L]]), 
ns))) {

The phrase "t1" appears no where else in the src/library/splines/R, and there is nothing 
relevant in stats/R either? (t1 gets used as a temp variable in 2 subfunctions).
So, what is the purpose of this line of code?

I can see that if a user typed?? zed <- ns, then used 'zed' in their call, that the right 
hand clause would then be true but not the left; but why worry about that case?

Terry T.

 ?PS (The help file isn't very helpful for creating such a method BTW.? It tells why you 
should make one, and what happens if you get it right, but nothing on how.)

-- 
Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Sat Aug 13 18:52:21 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 13 Aug 2022 12:52:21 -0400
Subject: [Rd] makepredictcall
In-Reply-To: <ff6a6b$ieem7q@ironport10.mayo.edu>
References: <ff6a6b$ieem7q@ironport10.mayo.edu>
Message-ID: <e23ade4f-1acb-480e-02b9-9a441b686563@gmail.com>

   Well, going to git blame (too lazy to remember how to do it in svn) 
finds this commit

https://github.com/wch/r-source/commit/4c800c6f3dd61a07c763af744f08b6f411b1f877

with the commit message " c74663 failed for symbol [example(censboot, 
package="boot")] => be more careful"

  Going to ?boot::censboot and searching for predict() finds this fragment:

   t1 <- ns(d$thickness, df=4)
   cox <- coxph(Surv(d$time, d$status == 1) ~ t1+strata(d$ulcer))
   ind <- !duplicated(d$thickness)
   u <- d$thickness[!ind]
   eta <- cox$linear.predictors[!ind]
   sp <- smooth.spline(u, eta, df=20)
   th <- seq(from = 0.25, to = 10, by = 0.25)
   predict(sp, th)$y

which is exactly the use case that you identified, with "t1" as the 
culprit. (It's definitely confusing that "t1" is called out in the code 
comments, with no obvious referent ...)

  It has long been my opinion that the machinery of makepredictcall is 
poorly documented (but of course I haven't done my part and submitted 
documentation patches for consideration ...)

   cheers
    Ben Bolker



On 8/13/22 7:20 AM, Therneau, Terry M., Ph.D. via R-devel wrote:
> I'm trying to better understand makepredictcall.? The method for ns() starts with the
> following very cryptic comment and line of code:
>   ??? ## check must work correctly when call is a symbol, both for quote(ns) and quote(t1):
>   ??? if(as.character(call)[1L] == "ns" || (is.call(call) && identical(eval(call[[1L]]),
> ns))) {
> 
> The phrase "t1" appears no where else in the src/library/splines/R, and there is nothing
> relevant in stats/R either? (t1 gets used as a temp variable in 2 subfunctions).
> So, what is the purpose of this line of code?
> 
> I can see that if a user typed?? zed <- ns, then used 'zed' in their call, that the right
> hand clause would then be true but not the left; but why worry about that case?
> 
> Terry T.
> 
>   ?PS (The help file isn't very helpful for creating such a method BTW.? It tells why you
> should make one, and what happens if you get it right, but nothing on how.)
> 

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
Graduate chair, Mathematics & Statistics


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Sun Aug 14 18:34:20 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Sun, 14 Aug 2022 18:34:20 +0200
Subject: [Rd] Should `as.difftime()` convert integer input to double?
In-Reply-To: <CAHqSRuS=c9TvbCKqwqB9GcGHVek5O9djgN0yJXzb9GpdfEvEJg@mail.gmail.com>
References: <CABzLhzys2eihd7MuvKuFZyBCkjzA+shdM1H0R=r1a1mQ_5CMnw@mail.gmail.com>
 <CAHqSRuS=c9TvbCKqwqB9GcGHVek5O9djgN0yJXzb9GpdfEvEJg@mail.gmail.com>
Message-ID: <25337.9228.597346.199307@hornik.net>

>>>>> Bill Dunlap writes:

Thanks: fixed now in the trunk with c82716.

Best
-k

> Forcing difftime's payload to be numeric would avoid anomalies like
>> as.difftime(123456789L, units="secs") * 100L
> Time difference of NA secs
> Warning message:
> In e2 * unclass(e1) : NAs produced by integer overflow
>> as.difftime(123456789, units="secs") * 100L
> Time difference of 12345678900 secs

> Note that there are packages (e.g., fst, a serialization package) which can
> (in C++ code) understand and create difftimes with integer payloads, so you
> may have trouble completely getting rid of such things.

> -Bill

> On Tue, Aug 9, 2022 at 11:26 AM Davis Vaughan <davis at rstudio.com> wrote:

>> Hi all,
>> 
>> Currently, `as.difftime()` with an integer input will produce a difftime
>> object that internally is built on an integer vector, i.e.:
>> 
>> x <- as.difftime(1L, units = "secs")
>> typeof(x)
>> #> [1] "integer"
>> 
>> x <- as.difftime(1, units = "secs")
>> typeof(x)
>> #> [1] "double"
>> 
>> I feel like difftime objects should always be built on *double* vectors.
>> There are a few reasons I feel like this should be true:
>> 
>> - There is an `as.double.difftime()` method, but no `as.integer.difftime()`
>> method, which implies something about what the underlying storage type is
>> assumed to be.
>> 
>> - AFAIK, there is no other way to produce a difftime object with integer
>> storage using the exposed API (aside from abusing the internal .difftime()
>> helper). Even `.Date(1L) - .Date(1L)` produces a difftime with double
>> storage.
>> 
>> - `seq.Date()` used to be able to produce dates with integer storage, but
>> as of recently even that edge case has been altered to always produce dates
>> with double storage. So a change to also force difftime to have double
>> storage would feel consistent with that.
>> 
>> https://github.com/wch/r-source/commit/0762ee983813c4df9b93f6b5ee52c910dcd3ab39
>> 
>> It looks like a patch to `as.difftime()` would be fairly straightforward
>> (i.e. ensuring that integer input is coerced to double), so I'd be happy to
>> attempt one if someone else agrees that this should be changed.
>> 
>> Thanks,
>> Davis
>> 
>> [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@v|@ @end|ng |rom r@tud|o@com  Mon Aug 15 00:21:28 2022
From: d@v|@ @end|ng |rom r@tud|o@com (Davis Vaughan)
Date: Sun, 14 Aug 2022 18:21:28 -0400
Subject: [Rd] Should `as.difftime()` convert integer input to double?
In-Reply-To: <25337.9228.597346.199307@hornik.net>
References: <CABzLhzys2eihd7MuvKuFZyBCkjzA+shdM1H0R=r1a1mQ_5CMnw@mail.gmail.com>
 <CAHqSRuS=c9TvbCKqwqB9GcGHVek5O9djgN0yJXzb9GpdfEvEJg@mail.gmail.com>
 <25337.9228.597346.199307@hornik.net>
Message-ID: <CABzLhzxpDqKpw2AbKDgWosEgjSJiZ7aj-RfSmKZu79zwTWkv_w@mail.gmail.com>

Kurt,

Thanks so much! Do you think `as.difftime()` should retain names? With your
patch, I don't *think* this will retain names anymore:

# This is the released behavior
names(as.difftime(c(x=1), units = "secs"))
#> [1] "x"

-Davis

On Sun, Aug 14, 2022 at 12:34 PM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

> >>>>> Bill Dunlap writes:
>
> Thanks: fixed now in the trunk with c82716.
>
> Best
> -k
>
> > Forcing difftime's payload to be numeric would avoid anomalies like
> >> as.difftime(123456789L, units="secs") * 100L
> > Time difference of NA secs
> > Warning message:
> > In e2 * unclass(e1) : NAs produced by integer overflow
> >> as.difftime(123456789, units="secs") * 100L
> > Time difference of 12345678900 secs
>
> > Note that there are packages (e.g., fst, a serialization package) which
> can
> > (in C++ code) understand and create difftimes with integer payloads, so
> you
> > may have trouble completely getting rid of such things.
>
> > -Bill
>
> > On Tue, Aug 9, 2022 at 11:26 AM Davis Vaughan <davis at rstudio.com> wrote:
>
> >> Hi all,
> >>
> >> Currently, `as.difftime()` with an integer input will produce a difftime
> >> object that internally is built on an integer vector, i.e.:
> >>
> >> x <- as.difftime(1L, units = "secs")
> >> typeof(x)
> >> #> [1] "integer"
> >>
> >> x <- as.difftime(1, units = "secs")
> >> typeof(x)
> >> #> [1] "double"
> >>
> >> I feel like difftime objects should always be built on *double* vectors.
> >> There are a few reasons I feel like this should be true:
> >>
> >> - There is an `as.double.difftime()` method, but no
> `as.integer.difftime()`
> >> method, which implies something about what the underlying storage type
> is
> >> assumed to be.
> >>
> >> - AFAIK, there is no other way to produce a difftime object with integer
> >> storage using the exposed API (aside from abusing the internal
> .difftime()
> >> helper). Even `.Date(1L) - .Date(1L)` produces a difftime with double
> >> storage.
> >>
> >> - `seq.Date()` used to be able to produce dates with integer storage,
> but
> >> as of recently even that edge case has been altered to always produce
> dates
> >> with double storage. So a change to also force difftime to have double
> >> storage would feel consistent with that.
> >>
> >>
> https://github.com/wch/r-source/commit/0762ee983813c4df9b93f6b5ee52c910dcd3ab39
> >>
> >> It looks like a patch to `as.difftime()` would be fairly straightforward
> >> (i.e. ensuring that integer input is coerced to double), so I'd be
> happy to
> >> attempt one if someone else agrees that this should be changed.
> >>
> >> Thanks,
> >> Davis
> >>
> >> [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>
> >       [[alternative HTML version deleted]]
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Tue Aug 16 12:00:04 2022
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Tue, 16 Aug 2022 10:00:04 +0000
Subject: [Rd] is class2 Parameter's Documentation is Ambiguous
Message-ID: <SY2PR01MB3003A7C6594C10A1D1F7FC9ECD6B9@SY2PR01MB3003.ausprd01.prod.outlook.com>

Good day,

It appears that class2 needs to be of length 1.

> is(4, c("data.frame", "DataFrame"))
Error in is(4, c("data.frame", "DataFrame")) : 
  length(class2) == 1L is not TRUE

However, the documentation is "class1, class2: character strings giving the names of each of the two classes between which is relations are to be examined"

Also, class1 is not a parameter of the is function. It is a parameter of the extends function. I think the mention of "is relations" is unintended. Can the documenation be rewritten to remove the ambiguity for these?

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From th|erry@onke||nx @end|ng |rom |nbo@be  Tue Aug 16 12:09:46 2022
From: th|erry@onke||nx @end|ng |rom |nbo@be (Thierry Onkelinx)
Date: Tue, 16 Aug 2022 12:09:46 +0200
Subject: [Rd] is class2 Parameter's Documentation is Ambiguous
In-Reply-To: <SY2PR01MB3003A7C6594C10A1D1F7FC9ECD6B9@SY2PR01MB3003.ausprd01.prod.outlook.com>
References: <SY2PR01MB3003A7C6594C10A1D1F7FC9ECD6B9@SY2PR01MB3003.ausprd01.prod.outlook.com>
Message-ID: <CAJuCY5x-HYcZZ_ZECmkM0dfN65nkq32FQN8xUBpSiKmVg3QkOA@mail.gmail.com>

Dear Dario,

You misunderstood the documentation of is(). class1 refers to extends().
is() only uses class2, not class1.

I'd use inherits(your_object, "DataFrame") and inherits(your_object,
"data.frame"). The latter is probably redundant.

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>


Op di 16 aug. 2022 om 12:01 schreef Dario Strbenac via R-devel <
r-devel at r-project.org>:

> Good day,
>
> It appears that class2 needs to be of length 1.
>
> > is(4, c("data.frame", "DataFrame"))
> Error in is(4, c("data.frame", "DataFrame")) :
>   length(class2) == 1L is not TRUE
>
> However, the documentation is "class1, class2: character strings giving
> the names of each of the two classes between which is relations are to be
> examined"
>
> Also, class1 is not a parameter of the is function. It is a parameter of
> the extends function. I think the mention of "is relations" is unintended.
> Can the documenation be rewritten to remove the ambiguity for these?
>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Aug 17 20:45:08 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 17 Aug 2022 20:45:08 +0200
Subject: [Rd] Should `as.difftime()` convert integer input to double?
In-Reply-To: <CABzLhzxpDqKpw2AbKDgWosEgjSJiZ7aj-RfSmKZu79zwTWkv_w@mail.gmail.com>
References: <CABzLhzys2eihd7MuvKuFZyBCkjzA+shdM1H0R=r1a1mQ_5CMnw@mail.gmail.com>
 <CAHqSRuS=c9TvbCKqwqB9GcGHVek5O9djgN0yJXzb9GpdfEvEJg@mail.gmail.com>
 <25337.9228.597346.199307@hornik.net>
 <CABzLhzxpDqKpw2AbKDgWosEgjSJiZ7aj-RfSmKZu79zwTWkv_w@mail.gmail.com>
Message-ID: <25341.14132.127258.47561@hornik.net>

>>>>> Davis Vaughan writes:

> Kurt,
> Thanks so much! Do you think `as.difftime()` should retain names? With your
> patch, I don't *think* this will retain names anymore:

> # This is the released behavior
> names(as.difftime(c(x=1), units = "secs"))
> #> [1] "x"

Thanks.  Changed now with c82723.

Best
-k

> -Davis

> On Sun, Aug 14, 2022 at 12:34 PM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

>> >>>>> Bill Dunlap writes:
>> 
>> Thanks: fixed now in the trunk with c82716.
>> 
>> Best
>> -k
>> 
>> > Forcing difftime's payload to be numeric would avoid anomalies like
>> >> as.difftime(123456789L, units="secs") * 100L
>> > Time difference of NA secs
>> > Warning message:
>> > In e2 * unclass(e1) : NAs produced by integer overflow
>> >> as.difftime(123456789, units="secs") * 100L
>> > Time difference of 12345678900 secs
>> 
>> > Note that there are packages (e.g., fst, a serialization package) which
>> can
>> > (in C++ code) understand and create difftimes with integer payloads, so
>> you
>> > may have trouble completely getting rid of such things.
>> 
>> > -Bill
>> 
>> > On Tue, Aug 9, 2022 at 11:26 AM Davis Vaughan <davis at rstudio.com> wrote:
>> 
>> >> Hi all,
>> >>
>> >> Currently, `as.difftime()` with an integer input will produce a difftime
>> >> object that internally is built on an integer vector, i.e.:
>> >>
>> >> x <- as.difftime(1L, units = "secs")
>> >> typeof(x)
>> >> #> [1] "integer"
>> >>
>> >> x <- as.difftime(1, units = "secs")
>> >> typeof(x)
>> >> #> [1] "double"
>> >>
>> >> I feel like difftime objects should always be built on *double* vectors.
>> >> There are a few reasons I feel like this should be true:
>> >>
>> >> - There is an `as.double.difftime()` method, but no
>> `as.integer.difftime()`
>> >> method, which implies something about what the underlying storage type
>> is
>> >> assumed to be.
>> >>
>> >> - AFAIK, there is no other way to produce a difftime object with integer
>> >> storage using the exposed API (aside from abusing the internal
>> .difftime()
>> >> helper). Even `.Date(1L) - .Date(1L)` produces a difftime with double
>> >> storage.
>> >>
>> >> - `seq.Date()` used to be able to produce dates with integer storage,
>> but
>> >> as of recently even that edge case has been altered to always produce
>> dates
>> >> with double storage. So a change to also force difftime to have double
>> >> storage would feel consistent with that.
>> >>
>> >>
>> https://github.com/wch/r-source/commit/0762ee983813c4df9b93f6b5ee52c910dcd3ab39
>> >>
>> >> It looks like a patch to `as.difftime()` would be fairly straightforward
>> >> (i.e. ensuring that integer input is coerced to double), so I'd be
>> happy to
>> >> attempt one if someone else agrees that this should be changed.
>> >>
>> >> Thanks,
>> >> Davis
>> >>
>> >> [[alternative HTML version deleted]]
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>> 
>> >       [[alternative HTML version deleted]]
>> 
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> 

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ch|r|com @end|ng |rom goog|e@com  Thu Aug 25 04:51:42 2022
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Wed, 24 Aug 2022 19:51:42 -0700
Subject: [Rd] simplify2array assumes non-NA dim() -- base or method bug?
Message-ID: <CAD7Bkx_+EQ5YoJoQQwUn2gzGvBxQQ29w8nQhtJjNAz6_f0MqEQ@mail.gmail.com>

If any component of the dim() returned as c.dim here[1] are missing,
simplify2array() errors inscrutably (specifically, because the last &&
condition is missing):

Error in if (higher && length(c.dim <- unique(lapply(x, dim))) == 1 &&  :
  missing value where TRUE/FALSE needed

At root here is that dim.tbl_lazy ({dbplyr} package method [2]) very
intentionally neglects to count the # of rows in the result -- the
whole point of a lazy table is to avoid calculating full queries
unless specifically requested, so the # of rows is left as missing,
i.e., there _is_ a quantity of rows, but the exact number is not
known.

That seems to me like a proper usage of NA, and hence this is a
simplify2array() bug, but I am curious other thoughts here before
attempting a patch.

[1] https://github.com/r-devel/r-svn/blob/2d4f8c283d53ff2c98d92c7b77b11e652297742c/src/library/base/R/sapply.R#L46-L48
[2] https://github.com/tidyverse/dbplyr/blob/36b146e36d6d9af215dc48e60862d4b807b9e606/R/tbl-lazy.R#L45-L47


From @eb@meyer @end|ng |rom |@u@de  Thu Aug 25 11:55:24 2022
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Thu, 25 Aug 2022 11:55:24 +0200
Subject: [Rd] simplify2array assumes non-NA dim() -- base or method bug?
In-Reply-To: <CAD7Bkx_+EQ5YoJoQQwUn2gzGvBxQQ29w8nQhtJjNAz6_f0MqEQ@mail.gmail.com>
References: <CAD7Bkx_+EQ5YoJoQQwUn2gzGvBxQQ29w8nQhtJjNAz6_f0MqEQ@mail.gmail.com>
Message-ID: <e6e40631-2692-d68a-d136-6ca5a7424ea5@fau.de>

Hmm. I think I haven't seen NA dims in base R before. R-lang says

> The 'dim' attribute is used to implement arrays.  The content of
> the array is stored in a vector in column-major order and the 'dim'
> attribute is a vector of integers specifying the respective extents of
> the array.  R ensures that the length of the vector is the product of
> the lengths of the dimensions.

And R-intro says:

> A dimension vector is a vector of non-negative integers.

I understand "vector of [non-negative] integers" as excluding NA_integer_.

Correspondingly:

> a <- 1
> dim(a) <- NA_integer_

Error in dim(a) <- NA_integer_ : the dims contain missing values

> matrix(1, NA_integer_)

Error in matrix(1, NA_integer_) : invalid 'nrow' value (too large or NA)

> array(1, NA_integer_)

Error in array(1, NA_integer_) : negative length vectors are not allowed

There must be many more examples where non-NULL dim() is assumed to
not contain missing values.

simplify2array() aligns with that specification and only needs to check
for numeric (non-NULL) dims at this point and not also !anyNA(c.dim).
So my take is that there is no bug.

Best regards,

	Sebastian Meyer


Am 25.08.22 um 04:51 schrieb Michael Chirico via R-devel:
> If any component of the dim() returned as c.dim here[1] are missing,
> simplify2array() errors inscrutably (specifically, because the last &&
> condition is missing):
> 
> Error in if (higher && length(c.dim <- unique(lapply(x, dim))) == 1 &&  :
>    missing value where TRUE/FALSE needed
> 
> At root here is that dim.tbl_lazy ({dbplyr} package method [2]) very
> intentionally neglects to count the # of rows in the result -- the
> whole point of a lazy table is to avoid calculating full queries
> unless specifically requested, so the # of rows is left as missing,
> i.e., there _is_ a quantity of rows, but the exact number is not
> known.
> 
> That seems to me like a proper usage of NA, and hence this is a
> simplify2array() bug, but I am curious other thoughts here before
> attempting a patch.
> 
> [1] https://github.com/r-devel/r-svn/blob/2d4f8c283d53ff2c98d92c7b77b11e652297742c/src/library/base/R/sapply.R#L46-L48
> [2] https://github.com/tidyverse/dbplyr/blob/36b146e36d6d9af215dc48e60862d4b807b9e606/R/tbl-lazy.R#L45-L47
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ch|r|com @end|ng |rom goog|e@com  Fri Aug 26 05:19:20 2022
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Thu, 25 Aug 2022 20:19:20 -0700
Subject: [Rd] simplify2array assumes non-NA dim() -- base or method bug?
In-Reply-To: <e6e40631-2692-d68a-d136-6ca5a7424ea5@fau.de>
References: <CAD7Bkx_+EQ5YoJoQQwUn2gzGvBxQQ29w8nQhtJjNAz6_f0MqEQ@mail.gmail.com>
 <e6e40631-2692-d68a-d136-6ca5a7424ea5@fau.de>
Message-ID: <CAD7Bkx_mR5qX+pEei4wzjaSogGd-Mb5jz-TWYYLa_owDjENPuA@mail.gmail.com>

Does this somewhat contradict the requirement that dimensions are non-missing?

ncol(table(letters))
# [1] NA

On the other hand,

dim(table(letters))
# [1] 26

Maybe that's a bug for the ncol() method of table?

On Thu, Aug 25, 2022 at 2:55 AM Sebastian Meyer <seb.meyer at fau.de> wrote:
>
> Hmm. I think I haven't seen NA dims in base R before. R-lang says
>
> > The 'dim' attribute is used to implement arrays.  The content of
> > the array is stored in a vector in column-major order and the 'dim'
> > attribute is a vector of integers specifying the respective extents of
> > the array.  R ensures that the length of the vector is the product of
> > the lengths of the dimensions.
>
> And R-intro says:
>
> > A dimension vector is a vector of non-negative integers.
>
> I understand "vector of [non-negative] integers" as excluding NA_integer_.
>
> Correspondingly:
>
> > a <- 1
> > dim(a) <- NA_integer_
>
> Error in dim(a) <- NA_integer_ : the dims contain missing values
>
> > matrix(1, NA_integer_)
>
> Error in matrix(1, NA_integer_) : invalid 'nrow' value (too large or NA)
>
> > array(1, NA_integer_)
>
> Error in array(1, NA_integer_) : negative length vectors are not allowed
>
> There must be many more examples where non-NULL dim() is assumed to
> not contain missing values.
>
> simplify2array() aligns with that specification and only needs to check
> for numeric (non-NULL) dims at this point and not also !anyNA(c.dim).
> So my take is that there is no bug.
>
> Best regards,
>
>         Sebastian Meyer
>
>
> Am 25.08.22 um 04:51 schrieb Michael Chirico via R-devel:
> > If any component of the dim() returned as c.dim here[1] are missing,
> > simplify2array() errors inscrutably (specifically, because the last &&
> > condition is missing):
> >
> > Error in if (higher && length(c.dim <- unique(lapply(x, dim))) == 1 &&  :
> >    missing value where TRUE/FALSE needed
> >
> > At root here is that dim.tbl_lazy ({dbplyr} package method [2]) very
> > intentionally neglects to count the # of rows in the result -- the
> > whole point of a lazy table is to avoid calculating full queries
> > unless specifically requested, so the # of rows is left as missing,
> > i.e., there _is_ a quantity of rows, but the exact number is not
> > known.
> >
> > That seems to me like a proper usage of NA, and hence this is a
> > simplify2array() bug, but I am curious other thoughts here before
> > attempting a patch.
> >
> > [1] https://github.com/r-devel/r-svn/blob/2d4f8c283d53ff2c98d92c7b77b11e652297742c/src/library/base/R/sapply.R#L46-L48
> > [2] https://github.com/tidyverse/dbplyr/blob/36b146e36d6d9af215dc48e60862d4b807b9e606/R/tbl-lazy.R#L45-L47
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Aug 26 06:24:10 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 26 Aug 2022 05:24:10 +0100
Subject: [Rd] simplify2array assumes non-NA dim() -- base or method bug?
In-Reply-To: <CAD7Bkx_mR5qX+pEei4wzjaSogGd-Mb5jz-TWYYLa_owDjENPuA@mail.gmail.com>
References: <CAD7Bkx_+EQ5YoJoQQwUn2gzGvBxQQ29w8nQhtJjNAz6_f0MqEQ@mail.gmail.com>
 <e6e40631-2692-d68a-d136-6ca5a7424ea5@fau.de>
 <CAD7Bkx_mR5qX+pEei4wzjaSogGd-Mb5jz-TWYYLa_owDjENPuA@mail.gmail.com>
Message-ID: <a79f8b58-b894-2060-efeb-4faa91cf919b@sapo.pt>

Hello,

I don't think it's a bug in ncol.
nrow and ncol are not generic, they are defined simply as

nrow <- function(x) dim(x)[1L]
ncol <- function(x) dim(x)[2L]

Checking:

nrow
#function (x)
#dim(x)[1L]
#<bytecode: 0x000001c3e2863c78>
#<environment: namespace:base>

ncol
#function (x)
#dim(x)[2L]
#<bytecode: 0x000001c3e1f8c030>
#<environment: namespace:base>


Since dim(table(letters)) returns a length 1 vector, nrow returns that 
value and ncol's return is the expected behavior of subsetting past the 
vector length.

dim(table(letters))  # length 1
# [1] 26

nrow(table(letters))  # works as expected
# [1] 26

ncol(table(letters))  # works as expected
# [1] NA


Hope this helps,

Rui Barradas




?s 04:19 de 26/08/2022, Michael Chirico via R-devel escreveu:
> Does this somewhat contradict the requirement that dimensions are non-missing?
> 
> ncol(table(letters))
> # [1] NA
> 
> On the other hand,
> 
> dim(table(letters))
> # [1] 26
> 
> Maybe that's a bug for the ncol() method of table?
> 
> On Thu, Aug 25, 2022 at 2:55 AM Sebastian Meyer <seb.meyer at fau.de> wrote:
>>
>> Hmm. I think I haven't seen NA dims in base R before. R-lang says
>>
>>> The 'dim' attribute is used to implement arrays.  The content of
>>> the array is stored in a vector in column-major order and the 'dim'
>>> attribute is a vector of integers specifying the respective extents of
>>> the array.  R ensures that the length of the vector is the product of
>>> the lengths of the dimensions.
>>
>> And R-intro says:
>>
>>> A dimension vector is a vector of non-negative integers.
>>
>> I understand "vector of [non-negative] integers" as excluding NA_integer_.
>>
>> Correspondingly:
>>
>>> a <- 1
>>> dim(a) <- NA_integer_
>>
>> Error in dim(a) <- NA_integer_ : the dims contain missing values
>>
>>> matrix(1, NA_integer_)
>>
>> Error in matrix(1, NA_integer_) : invalid 'nrow' value (too large or NA)
>>
>>> array(1, NA_integer_)
>>
>> Error in array(1, NA_integer_) : negative length vectors are not allowed
>>
>> There must be many more examples where non-NULL dim() is assumed to
>> not contain missing values.
>>
>> simplify2array() aligns with that specification and only needs to check
>> for numeric (non-NULL) dims at this point and not also !anyNA(c.dim).
>> So my take is that there is no bug.
>>
>> Best regards,
>>
>>          Sebastian Meyer
>>
>>
>> Am 25.08.22 um 04:51 schrieb Michael Chirico via R-devel:
>>> If any component of the dim() returned as c.dim here[1] are missing,
>>> simplify2array() errors inscrutably (specifically, because the last &&
>>> condition is missing):
>>>
>>> Error in if (higher && length(c.dim <- unique(lapply(x, dim))) == 1 &&  :
>>>     missing value where TRUE/FALSE needed
>>>
>>> At root here is that dim.tbl_lazy ({dbplyr} package method [2]) very
>>> intentionally neglects to count the # of rows in the result -- the
>>> whole point of a lazy table is to avoid calculating full queries
>>> unless specifically requested, so the # of rows is left as missing,
>>> i.e., there _is_ a quantity of rows, but the exact number is not
>>> known.
>>>
>>> That seems to me like a proper usage of NA, and hence this is a
>>> simplify2array() bug, but I am curious other thoughts here before
>>> attempting a patch.
>>>
>>> [1] https://github.com/r-devel/r-svn/blob/2d4f8c283d53ff2c98d92c7b77b11e652297742c/src/library/base/R/sapply.R#L46-L48
>>> [2] https://github.com/tidyverse/dbplyr/blob/36b146e36d6d9af215dc48e60862d4b807b9e606/R/tbl-lazy.R#L45-L47
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Fri Aug 26 15:44:07 2022
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 26 Aug 2022 08:44:07 -0500
Subject: [Rd] simplify2array assumes non-NA dim() -- base or method bug?
In-Reply-To: <a79f8b58-b894-2060-efeb-4faa91cf919b@sapo.pt>
References: <CAD7Bkx_+EQ5YoJoQQwUn2gzGvBxQQ29w8nQhtJjNAz6_f0MqEQ@mail.gmail.com>
 <e6e40631-2692-d68a-d136-6ca5a7424ea5@fau.de>
 <CAD7Bkx_mR5qX+pEei4wzjaSogGd-Mb5jz-TWYYLa_owDjENPuA@mail.gmail.com>
 <a79f8b58-b894-2060-efeb-4faa91cf919b@sapo.pt>
Message-ID: <25352.52775.484635.785729@rob.eddelbuettel.com>


Also NROW() and NCOL() exist for situations where two dimensions are assumed
or preferred and dim() needs a little help:

> NROW(table(letters))
[1] 26
> NCOL(table(letters))
[1] 1
>

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ggrothend|eck @end|ng |rom gm@||@com  Sat Aug 27 19:04:23 2022
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sat, 27 Aug 2022 13:04:23 -0400
Subject: [Rd] ...()
Message-ID: <CAP01uRm2FFoUVmXr8O_JGP+n1hZCDa75fczCn=vH9NpERY7xRA@mail.gmail.com>

I was looking for the documentation for ...() but it is not in ?dots
(where ...length(), ...names(), etc. are documented) and google seems
challenged with this one.  Is this documented anywhere?

e.g.

  f <- function(...) substitute(...())
  f(a, b)
  ## [[1]]
  ## a
  ##
  ## [[2]]
  ##  b


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Aug 27 19:23:40 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 27 Aug 2022 18:23:40 +0100
Subject: [Rd] ...()
In-Reply-To: <CAP01uRm2FFoUVmXr8O_JGP+n1hZCDa75fczCn=vH9NpERY7xRA@mail.gmail.com>
References: <CAP01uRm2FFoUVmXr8O_JGP+n1hZCDa75fczCn=vH9NpERY7xRA@mail.gmail.com>
Message-ID: <5da8f5c5-8dde-f367-55df-d5e062ab17ea@sapo.pt>

Hello,

I don't believe it is documented but the best I could find was this not 
very old r-devel thread [1].

[1] https://stat.ethz.ch/pipermail/r-devel/2020-March/079131.html

Hope this helps,

Rui Barradas

?s 18:04 de 27/08/2022, Gabor Grothendieck escreveu:
> I was looking for the documentation for ...() but it is not in ?dots
> (where ...length(), ...names(), etc. are documented) and google seems
> challenged with this one.  Is this documented anywhere?
> 
> e.g.
> 
>    f <- function(...) substitute(...())
>    f(a, b)
>    ## [[1]]
>    ## a
>    ##
>    ## [[2]]
>    ##  b
> 
>


From pb @end|ng |rom |n|o||nk@com@br  Sat Aug 27 20:46:07 2022
From: pb @end|ng |rom |n|o||nk@com@br (Paulo Barata)
Date: Sat, 27 Aug 2022 15:46:07 -0300
Subject: [Rd] Mismatch between the Rconsole file and the RGui Configuration
 editor
In-Reply-To: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
Message-ID: <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>


To the R developers,

In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1 
Patched (2022-08-24 r82762 ucrt), something strange is happening with 
the GUI Preferences x Rconsole file. I open the GUI Preferences (RGui 
Configuration editor), and I define the number of console rows and 
columns, the I click Apply and then I Save the Preferences to the 
Rconsole file (which is in the Documents folders of my Windows 10 Pro) 
-- I overwrite the existing Rconsole file. Then I close R.

When I open R again, there is always a mismatch between the number of 
console rows and columns correctly recorded in the Rconsole file and the 
numbers actually shown in the RGui Configuration editor.

If this list allows attachments, the attached PNG image shows the 
mismatch between the Rconsole file and the RGui Configuration editor, 
just after opening R version 4.2.1 (2022-06-23 ucrt).

Windows 10 Pro for Workstations
Version 21H2
Installed on 23/?08/?2022
OS build 19044.1889
Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz  3.31 GHz
Installed RAM 64.0 GB (63.7 GB usable)


R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

  > Sys.info()
            sysname           release           version          nodename
          "Windows"          "10 x64"     "build 19044" "XXXXXXXXXXXXXXX"
            machine             login              user    effective_user
           "x86-64"           "XXXXX         "XXXXX"           "XXXXX"
  > win.version()
[1] "Windows 10 x64 (build 19044)"

  > .Platform
$OS.type
[1] "windows"
$file.sep
[1] "/"
$dynlib.ext
[1] ".dll"
$GUI
[1] "Rgui"
$endian
[1] "little"
$pkgType
[1] "win.binary"
$path.sep
[1] ";"
$r_arch
[1] "x64"

Thank you. Regards,

Paulo Barata

(Rio de Janeiro - Brazil)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: R-4.2.1-configuration-Rconsole.png
Type: image/png
Size: 30854 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20220827/02f03f99/attachment.png>

From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Aug 27 21:35:31 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 27 Aug 2022 15:35:31 -0400
Subject: [Rd] 
 Mismatch between the Rconsole file and the RGui Configuration editor
In-Reply-To: <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
 <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
Message-ID: <9b70abe5-9130-0b9b-928f-b17eb53f09a1@gmail.com>

I would guess what is happening is the following.  R reads your file, 
and asks the window to resize as you specify.  Then when it is 
populating the config editor, it measures the size of the window, and 
computes the equivalent number of rows and columns.  The fact that these 
numbers don't match suggests that one calculation is for the outer 
dimensions of the window (the one that resizes it at the start), and the 
other is for the inner dimensions (not including the frame).

This is going to cause problems if you repeatedly start R and save the 
config, because the window will keep getting smaller.  But who does that?

If the discrepancy really bothers you, then you could try to figure out 
exactly where it occurs by looking at the source file 
src/gnuwin32/console.c (or one of the other files in that directory). 
The source is mirrored on Github at 
https://github.com/wch/r-source/blob/trunk/src/gnuwin32/console.c .

Duncan Murdoch

On 27/08/2022 2:46 p.m., Paulo Barata wrote:
> 
> To the R developers,
> 
> In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1
> Patched (2022-08-24 r82762 ucrt), something strange is happening with
> the GUI Preferences x Rconsole file. I open the GUI Preferences (RGui
> Configuration editor), and I define the number of console rows and
> columns, the I click Apply and then I Save the Preferences to the
> Rconsole file (which is in the Documents folders of my Windows 10 Pro)
> -- I overwrite the existing Rconsole file. Then I close R.
> 
> When I open R again, there is always a mismatch between the number of
> console rows and columns correctly recorded in the Rconsole file and the
> numbers actually shown in the RGui Configuration editor.
> 
> If this list allows attachments, the attached PNG image shows the
> mismatch between the Rconsole file and the RGui Configuration editor,
> just after opening R version 4.2.1 (2022-06-23 ucrt).
> 
> Windows 10 Pro for Workstations
> Version 21H2
> Installed on 23/?08/?2022
> OS build 19044.1889
> Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz  3.31 GHz
> Installed RAM 64.0 GB (63.7 GB usable)
> 
> 
> R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
> Copyright (C) 2022 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> 
>    > Sys.info()
>              sysname           release           version          nodename
>            "Windows"          "10 x64"     "build 19044" "XXXXXXXXXXXXXXX"
>              machine             login              user    effective_user
>             "x86-64"           "XXXXX         "XXXXX"           "XXXXX"
>    > win.version()
> [1] "Windows 10 x64 (build 19044)"
> 
>    > .Platform
> $OS.type
> [1] "windows"
> $file.sep
> [1] "/"
> $dynlib.ext
> [1] ".dll"
> $GUI
> [1] "Rgui"
> $endian
> [1] "little"
> $pkgType
> [1] "win.binary"
> $path.sep
> [1] ";"
> $r_arch
> [1] "x64"
> 
> Thank you. Regards,
> 
> Paulo Barata
> 
> (Rio de Janeiro - Brazil)
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pb @end|ng |rom |n|o||nk@com@br  Sat Aug 27 22:28:04 2022
From: pb @end|ng |rom |n|o||nk@com@br (Paulo Barata)
Date: Sat, 27 Aug 2022 17:28:04 -0300
Subject: [Rd] 
 Mismatch between the Rconsole file and the RGui Configuration editor
In-Reply-To: <9b70abe5-9130-0b9b-928f-b17eb53f09a1@gmail.com>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
 <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
 <9b70abe5-9130-0b9b-928f-b17eb53f09a1@gmail.com>
Message-ID: <84171165-9a8b-e425-3273-db2aa1ccfb81@infolink.com.br>

Mr. Murdoch,

Thank you for your reply. Actually, the discrepancy does not bother me, 
the mismatch seems always to be relatively small. I can use R perfectly 
well as it is.

I just felt that I should report this fact.

Best regards,

Paulo Barata

----------------------------------------------------------

On 27/08/2022 16:35, Duncan Murdoch wrote:
> I would guess what is happening is the following.? R reads your file, 
> and asks the window to resize as you specify.? Then when it is 
> populating the config editor, it measures the size of the window, and 
> computes the equivalent number of rows and columns.? The fact that these 
> numbers don't match suggests that one calculation is for the outer 
> dimensions of the window (the one that resizes it at the start), and the 
> other is for the inner dimensions (not including the frame).
> 
> This is going to cause problems if you repeatedly start R and save the 
> config, because the window will keep getting smaller.? But who does that?
> 
> If the discrepancy really bothers you, then you could try to figure out 
> exactly where it occurs by looking at the source file 
> src/gnuwin32/console.c (or one of the other files in that directory). 
> The source is mirrored on Github at 
> https://github.com/wch/r-source/blob/trunk/src/gnuwin32/console.c .
> 
> Duncan Murdoch
> 
> On 27/08/2022 2:46 p.m., Paulo Barata wrote:
>>
>> To the R developers,
>>
>> In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1
>> Patched (2022-08-24 r82762 ucrt), something strange is happening with
>> the GUI Preferences x Rconsole file. I open the GUI Preferences (RGui
>> Configuration editor), and I define the number of console rows and
>> columns, the I click Apply and then I Save the Preferences to the
>> Rconsole file (which is in the Documents folders of my Windows 10 Pro)
>> -- I overwrite the existing Rconsole file. Then I close R.
>>
>> When I open R again, there is always a mismatch between the number of
>> console rows and columns correctly recorded in the Rconsole file and the
>> numbers actually shown in the RGui Configuration editor.
>>
>> If this list allows attachments, the attached PNG image shows the
>> mismatch between the Rconsole file and the RGui Configuration editor,
>> just after opening R version 4.2.1 (2022-06-23 ucrt).
>>
>> Windows 10 Pro for Workstations
>> Version 21H2
>> Installed on 23/?08/?2022
>> OS build 19044.1889
>> Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz? 3.31 GHz
>> Installed RAM 64.0 GB (63.7 GB usable)
>>
>>
>> R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
>> Copyright (C) 2022 The R Foundation for Statistical Computing
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>
>> ?? > Sys.info()
>> ???????????? sysname?????????? release?????????? version          
>> nodename
>> ?????????? "Windows"????????? "10 x64"???? "build 19044" 
>> "XXXXXXXXXXXXXXX"
>> ???????????? machine???????????? login????????????? user    
>> effective_user
>> ??????????? "x86-64"?????????? "XXXXX???????? "XXXXX"?????????? "XXXXX"
>> ?? > win.version()
>> [1] "Windows 10 x64 (build 19044)"
>>
>> ?? > .Platform
>> $OS.type
>> [1] "windows"
>> $file.sep
>> [1] "/"
>> $dynlib.ext
>> [1] ".dll"
>> $GUI
>> [1] "Rgui"
>> $endian
>> [1] "little"
>> $pkgType
>> [1] "win.binary"
>> $path.sep
>> [1] ";"
>> $r_arch
>> [1] "x64"
>>
>> Thank you. Regards,
>>
>> Paulo Barata
>>
>> (Rio de Janeiro - Brazil)
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From j@g@nmn2 @end|ng |rom gm@||@com  Sun Aug 28 01:13:31 2022
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Sat, 27 Aug 2022 19:13:31 -0400
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
Message-ID: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>

R_check_class_etc(x, valid) spends a nontrivial amount of time finding
an environment 'rho' containing the definition of class(x), evaluating
(in R, not C) methods::.classEnv(class(x)).

It then returns the result of R_check_class_and_super(x, valid, rho).
But R_check_class_and_super() does not use 'rho' at all in the trivial
case where class(x) is found in 'valid'.

My feeling is that this can be improved.  I am happy to contribute a patch,
if it would be considered by R-core.

Mikael


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Aug 28 02:17:23 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 28 Aug 2022 12:17:23 +1200
Subject: [Rd] ...()
In-Reply-To: <5da8f5c5-8dde-f367-55df-d5e062ab17ea@sapo.pt>
References: <CAP01uRm2FFoUVmXr8O_JGP+n1hZCDa75fczCn=vH9NpERY7xRA@mail.gmail.com>
 <5da8f5c5-8dde-f367-55df-d5e062ab17ea@sapo.pt>
Message-ID: <634DBFC2-76FE-4AF0-A020-37210DBA8975@R-project.org>

Someone with historical knowledge may shed more light on whether this was ever intended in the language, but based on the current implementation I would say that this is a (perhaps convenient) side-effect of how substitute works and not an explicitly defined behavior (since there is no special handling for this "feature" in the sources). Probably best illustrated with

> .Internal(inspect(quote(...())))
@1292a4d60 06 LANGSXP g0c0 [REF(2)] 
  @13880d730 01 SYMSXP g0c0 [MARK,REF(65535)] "..."
> .Internal(inspect(quote(...(...))))
@129293838 06 LANGSXP g0c0 [REF(2)] 
  @13880d730 01 SYMSXP g0c0 [MARK,REF(65535)] "..."
  @13880d730 01 SYMSXP g0c0 [MARK,REF(65535)] "..."
> f = function (...) substitute(...(...))
> str(f(a=g(),b))
Dotted pair list of 4
 $ a: language g()
 $  : symbol b
 $ a: language g()
 $  : symbol b

The key here is that call to `...` is simply a LANGSXP with `...` alone, so substitute will start its substitution of that call pairlist thus yielding just the substituted arguments as there is nothing else. And it will also carry on if anything else follows as illustrated above (i.e. if the call pairlist has more than one element). As the substitute documentation warns it's not guaranteed to make any sense.

So my take would be that this is not documented, because it's not guaranteed (although I don't see why it should break anytime soon). It may make sense to think about it and define the desired behavior (e.g., I would argue that the above is not necessarily desired).

If one is to think about this special case, then in theory one may expect substitute(...) to work, but it doesn't since the arguments get matched to the formals first before substitute gets to them, so something is necessary that makes `...` into a single object -- and ...() seems to fit the bill since it's a single call. As noted in the thread that Rui posted, the way to do this without relying on undefined behavior is to use a regular call and drop the head:

> f = function (...) as.list(substitute(.(...)))[-1]
> str(f(a=g(),b))
List of 2
 $ a: language g()
 $  : symbol b

Cheers,
Simon



> On Aug 28, 2022, at 5:23 AM, Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
> Hello,
> 
> I don't believe it is documented but the best I could find was this not very old r-devel thread [1].
> 
> [1] https://stat.ethz.ch/pipermail/r-devel/2020-March/079131.html
> 
> Hope this helps,
> 
> Rui Barradas
> 
> ?s 18:04 de 27/08/2022, Gabor Grothendieck escreveu:
>> I was looking for the documentation for ...() but it is not in ?dots
>> (where ...length(), ...names(), etc. are documented) and google seems
>> challenged with this one.  Is this documented anywhere?
>> e.g.
>>   f <- function(...) substitute(...())
>>   f(a, b)
>>   ## [[1]]
>>   ## a
>>   ##
>>   ## [[2]]
>>   ##  b
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Aug 30 18:33:45 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 30 Aug 2022 18:33:45 +0200
Subject: [Rd] 
 Mismatch between the Rconsole file and the RGui Configuration editor
In-Reply-To: <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
 <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
Message-ID: <16d98892-54fa-da20-543e-3a6c6c9a8fd6@gmail.com>


On 8/27/22 20:46, Paulo Barata wrote:
>
> To the R developers,
>
> In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1 
> Patched (2022-08-24 r82762 ucrt), something strange is happening with 
> the GUI Preferences x Rconsole file. I open the GUI Preferences (RGui 
> Configuration editor), and I define the number of console rows and 
> columns, the I click Apply and then I Save the Preferences to the 
> Rconsole file (which is in the Documents folders of my Windows 10 Pro) 
> -- I overwrite the existing Rconsole file. Then I close R.
>
> When I open R again, there is always a mismatch between the number of 
> console rows and columns correctly recorded in the Rconsole file and 
> the numbers actually shown in the RGui Configuration editor.

Dear Paulo,

thanks for the report. It is now fixed in R-devel 82776 (it would be 
nice if you could confirm the problem is fixed for you on your system).

You have run into an old bug in GraphApp, a library used by Rgui. The 
part saving and restoring the preferences works fine, but the problem 
occurs on R startup when creating a new console window. Rgui computes 
the client size of the window based on the preferred number of rows and 
columns and asks GraphApp to create such window. GraphApp uses its 
internal code (probably it pre-dates AdjustWindowRect) to compute the 
screen size of the window, so including the title bar, scroll bars, etc, 
and then asks Windows to create the window. Rgui then checks the actual 
client size of the created window and updates the number of rows and 
columns based on that - which is also the number you then see in the 
preferences editor. Ideally/normally it should be the same as what was 
given initially, e.g. via Rconsole.

However, the computation in GraphApp didn't work quite right, it didn't 
account for the scrollbars. And the reason was that it assumed a canvas 
(CanvasSize bit was set on the window flags). That bit was set by 
accident, because GraphApp by accident used the same bit number for 
CanvasSize and UseUnicode. The UseUnicode bit is set in Rgui when 
running in a multi-byte locale, so for you and many others probably only 
since R 4.2. I've changed GraphApp to use a different bit.

Thanks for testing Rgui and reporting problems.

Best
Tomas

>
> If this list allows attachments, the attached PNG image shows the 
> mismatch between the Rconsole file and the RGui Configuration editor, 
> just after opening R version 4.2.1 (2022-06-23 ucrt).
>
> Windows 10 Pro for Workstations
> Version 21H2
> Installed on 23/?08/?2022
> OS build 19044.1889
> Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz? 3.31 GHz
> Installed RAM 64.0 GB (63.7 GB usable)
>
>
> R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
> Copyright (C) 2022 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
>
> ?> Sys.info()
> ?????????? sysname?????????? release?????????? version nodename
> ???????? "Windows"????????? "10 x64"???? "build 19044" "XXXXXXXXXXXXXXX"
> ?????????? machine???????????? login????????????? user effective_user
> ????????? "x86-64"?????????? "XXXXX???????? "XXXXX" "XXXXX"
> ?> win.version()
> [1] "Windows 10 x64 (build 19044)"
>
> ?> .Platform
> $OS.type
> [1] "windows"
> $file.sep
> [1] "/"
> $dynlib.ext
> [1] ".dll"
> $GUI
> [1] "Rgui"
> $endian
> [1] "little"
> $pkgType
> [1] "win.binary"
> $path.sep
> [1] ";"
> $r_arch
> [1] "x64"
>
> Thank you. Regards,
>
> Paulo Barata
>
> (Rio de Janeiro - Brazil)
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pb @end|ng |rom |n|o||nk@com@br  Wed Aug 31 17:58:33 2022
From: pb @end|ng |rom |n|o||nk@com@br (Paulo Barata)
Date: Wed, 31 Aug 2022 12:58:33 -0300
Subject: [Rd] 
 Mismatch between the Rconsole file and the RGui Configuration editor
In-Reply-To: <16d98892-54fa-da20-543e-3a6c6c9a8fd6@gmail.com>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
 <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
 <16d98892-54fa-da20-543e-3a6c6c9a8fd6@gmail.com>
Message-ID: <c7330739-651b-0bdf-83c2-413f5a4cabeb@infolink.com.br>

Dear Tomas,

Thank you for your attention and for the detailed explanation about the 
issue with the R Gui.

As you have indicated, I tested R version 4.2.1 Patched (2022-08-30 
r82776 ucrt), which I downloaded today. Unfortunately, the mismatch 
between the Rconsole file and the GUI preferences continues to happen 
here on my computer.

Even if I delete the Rconsole file from the Documents folder in Windows 
and save a new Rconsole file, there is that mismatch.

It seems that the GUI editor (and the actual size of the R worspace) is 
always a bit smaller that what is recorded in the Rconsole file, that 
is, a bit smaller than what I specified for rows and columns. For 
instance, if I specified 37 rows and 112 columns, this is what is 
recorded in the Rconsole file, but when I open R and go to the Gui 
editor, I find 36 rows and 110 columns, and the workspace is clearly 
different from my specifications.

I use Windows 10 Pro for Workstations, version 21H2, installed on 
23/?August/?2022, build 19044.1889 (this is the latest update for 
Windows 10).

As I said before, of course the mismatch does not prevent me of using R, 
this could be said to be just a nuisance. But I think that no mismatch 
should be happening.

Thank you once again.

Best regards,

Paulo

----------------------------------------------------------

On 30/08/2022 13:33, Tomas Kalibera wrote:
> 
> On 8/27/22 20:46, Paulo Barata wrote:
>>
>> To the R developers,
>>
>> In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1 
>> Patched (2022-08-24 r82762 ucrt), something strange is happening with 
>> the GUI Preferences x Rconsole file. I open the GUI Preferences (RGui 
>> Configuration editor), and I define the number of console rows and 
>> columns, the I click Apply and then I Save the Preferences to the 
>> Rconsole file (which is in the Documents folders of my Windows 10 Pro) 
>> -- I overwrite the existing Rconsole file. Then I close R.
>>
>> When I open R again, there is always a mismatch between the number of 
>> console rows and columns correctly recorded in the Rconsole file and 
>> the numbers actually shown in the RGui Configuration editor.
> 
> Dear Paulo,
> 
> thanks for the report. It is now fixed in R-devel 82776 (it would be 
> nice if you could confirm the problem is fixed for you on your system).
> 
> You have run into an old bug in GraphApp, a library used by Rgui. The 
> part saving and restoring the preferences works fine, but the problem 
> occurs on R startup when creating a new console window. Rgui computes 
> the client size of the window based on the preferred number of rows and 
> columns and asks GraphApp to create such window. GraphApp uses its 
> internal code (probably it pre-dates AdjustWindowRect) to compute the 
> screen size of the window, so including the title bar, scroll bars, etc, 
> and then asks Windows to create the window. Rgui then checks the actual 
> client size of the created window and updates the number of rows and 
> columns based on that - which is also the number you then see in the 
> preferences editor. Ideally/normally it should be the same as what was 
> given initially, e.g. via Rconsole.
> 
> However, the computation in GraphApp didn't work quite right, it didn't 
> account for the scrollbars. And the reason was that it assumed a canvas 
> (CanvasSize bit was set on the window flags). That bit was set by 
> accident, because GraphApp by accident used the same bit number for 
> CanvasSize and UseUnicode. The UseUnicode bit is set in Rgui when 
> running in a multi-byte locale, so for you and many others probably only 
> since R 4.2. I've changed GraphApp to use a different bit.
> 
> Thanks for testing Rgui and reporting problems.
> 
> Best
> Tomas
> 
>>
>> If this list allows attachments, the attached PNG image shows the 
>> mismatch between the Rconsole file and the RGui Configuration editor, 
>> just after opening R version 4.2.1 (2022-06-23 ucrt).
>>
>> Windows 10 Pro for Workstations
>> Version 21H2
>> Installed on 23/?08/?2022
>> OS build 19044.1889
>> Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz? 3.31 GHz
>> Installed RAM 64.0 GB (63.7 GB usable)
>>
>>
>> R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
>> Copyright (C) 2022 The R Foundation for Statistical Computing
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>
>> ?> Sys.info()
>> ?????????? sysname?????????? release?????????? version nodename
>> ???????? "Windows"????????? "10 x64"???? "build 19044" "XXXXXXXXXXXXXXX"
>> ?????????? machine???????????? login????????????? user effective_user
>> ????????? "x86-64"?????????? "XXXXX???????? "XXXXX" "XXXXX"
>> ?> win.version()
>> [1] "Windows 10 x64 (build 19044)"
>>
>> ?> .Platform
>> $OS.type
>> [1] "windows"
>> $file.sep
>> [1] "/"
>> $dynlib.ext
>> [1] ".dll"
>> $GUI
>> [1] "Rgui"
>> $endian
>> [1] "little"
>> $pkgType
>> [1] "win.binary"
>> $path.sep
>> [1] ";"
>> $r_arch
>> [1] "x64"
>>
>> Thank you. Regards,
>>
>> Paulo Barata
>>
>> (Rio de Janeiro - Brazil)
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From pb @end|ng |rom |n|o||nk@com@br  Wed Aug 31 18:08:02 2022
From: pb @end|ng |rom |n|o||nk@com@br (Paulo Barata)
Date: Wed, 31 Aug 2022 13:08:02 -0300
Subject: [Rd] 
 Mismatch between the Rconsole file and the RGui Configuration editor
In-Reply-To: <c7330739-651b-0bdf-83c2-413f5a4cabeb@infolink.com.br>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
 <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
 <16d98892-54fa-da20-543e-3a6c6c9a8fd6@gmail.com>
 <c7330739-651b-0bdf-83c2-413f5a4cabeb@infolink.com.br>
Message-ID: <c7cf26d7-c1aa-a70b-a6ec-a9c8a9aac6cf@infolink.com.br>

Dear Tomas,

I am sorry, my fault. I see now that you said R-devel 82776, not R 
patched 82776.

Yes, the problem is fixed in R-devel 82776 --- this is R Under 
development (unstable) (2022-08-30 r82776 ucrt). There is no more the 
mismatch between the Rconsole file and the GUI editor. It is all right now.

My apologies again. Thank you for your attention.

Best regards,

Paulo

----------------------------------------------------------

On 31/08/2022 12:58, Paulo Barata wrote:
> Dear Tomas,
> 
> Thank you for your attention and for the detailed explanation about the 
> issue with the R Gui.
> 
> As you have indicated, I tested R version 4.2.1 Patched (2022-08-30 
> r82776 ucrt), which I downloaded today. Unfortunately, the mismatch 
> between the Rconsole file and the GUI preferences continues to happen 
> here on my computer.
> 
> Even if I delete the Rconsole file from the Documents folder in Windows 
> and save a new Rconsole file, there is that mismatch.
> 
> It seems that the GUI editor (and the actual size of the R worspace) is 
> always a bit smaller that what is recorded in the Rconsole file, that 
> is, a bit smaller than what I specified for rows and columns. For 
> instance, if I specified 37 rows and 112 columns, this is what is 
> recorded in the Rconsole file, but when I open R and go to the Gui 
> editor, I find 36 rows and 110 columns, and the workspace is clearly 
> different from my specifications.
> 
> I use Windows 10 Pro for Workstations, version 21H2, installed on 
> 23/?August/?2022, build 19044.1889 (this is the latest update for 
> Windows 10).
> 
> As I said before, of course the mismatch does not prevent me of using R, 
> this could be said to be just a nuisance. But I think that no mismatch 
> should be happening.
> 
> Thank you once again.
> 
> Best regards,
> 
> Paulo
> 
> ----------------------------------------------------------
> 
> On 30/08/2022 13:33, Tomas Kalibera wrote:
>>
>> On 8/27/22 20:46, Paulo Barata wrote:
>>>
>>> To the R developers,
>>>
>>> In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1 
>>> Patched (2022-08-24 r82762 ucrt), something strange is happening with 
>>> the GUI Preferences x Rconsole file. I open the GUI Preferences (RGui 
>>> Configuration editor), and I define the number of console rows and 
>>> columns, the I click Apply and then I Save the Preferences to the 
>>> Rconsole file (which is in the Documents folders of my Windows 10 
>>> Pro) -- I overwrite the existing Rconsole file. Then I close R.
>>>
>>> When I open R again, there is always a mismatch between the number of 
>>> console rows and columns correctly recorded in the Rconsole file and 
>>> the numbers actually shown in the RGui Configuration editor.
>>
>> Dear Paulo,
>>
>> thanks for the report. It is now fixed in R-devel 82776 (it would be 
>> nice if you could confirm the problem is fixed for you on your system).
>>
>> You have run into an old bug in GraphApp, a library used by Rgui. The 
>> part saving and restoring the preferences works fine, but the problem 
>> occurs on R startup when creating a new console window. Rgui computes 
>> the client size of the window based on the preferred number of rows 
>> and columns and asks GraphApp to create such window. GraphApp uses its 
>> internal code (probably it pre-dates AdjustWindowRect) to compute the 
>> screen size of the window, so including the title bar, scroll bars, 
>> etc, and then asks Windows to create the window. Rgui then checks the 
>> actual client size of the created window and updates the number of 
>> rows and columns based on that - which is also the number you then see 
>> in the preferences editor. Ideally/normally it should be the same as 
>> what was given initially, e.g. via Rconsole.
>>
>> However, the computation in GraphApp didn't work quite right, it 
>> didn't account for the scrollbars. And the reason was that it assumed 
>> a canvas (CanvasSize bit was set on the window flags). That bit was 
>> set by accident, because GraphApp by accident used the same bit number 
>> for CanvasSize and UseUnicode. The UseUnicode bit is set in Rgui when 
>> running in a multi-byte locale, so for you and many others probably 
>> only since R 4.2. I've changed GraphApp to use a different bit.
>>
>> Thanks for testing Rgui and reporting problems.
>>
>> Best
>> Tomas
>>
>>>
>>> If this list allows attachments, the attached PNG image shows the 
>>> mismatch between the Rconsole file and the RGui Configuration editor, 
>>> just after opening R version 4.2.1 (2022-06-23 ucrt).
>>>
>>> Windows 10 Pro for Workstations
>>> Version 21H2
>>> Installed on 23/?08/?2022
>>> OS build 19044.1889
>>> Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz? 3.31 GHz
>>> Installed RAM 64.0 GB (63.7 GB usable)
>>>
>>>
>>> R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
>>> Copyright (C) 2022 The R Foundation for Statistical Computing
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>
>>> ?> Sys.info()
>>> ?????????? sysname?????????? release?????????? version nodename
>>> ???????? "Windows"????????? "10 x64"???? "build 19044" "XXXXXXXXXXXXXXX"
>>> ?????????? machine???????????? login????????????? user effective_user
>>> ????????? "x86-64"?????????? "XXXXX???????? "XXXXX" "XXXXX"
>>> ?> win.version()
>>> [1] "Windows 10 x64 (build 19044)"
>>>
>>> ?> .Platform
>>> $OS.type
>>> [1] "windows"
>>> $file.sep
>>> [1] "/"
>>> $dynlib.ext
>>> [1] ".dll"
>>> $GUI
>>> [1] "Rgui"
>>> $endian
>>> [1] "little"
>>> $pkgType
>>> [1] "win.binary"
>>> $path.sep
>>> [1] ";"
>>> $r_arch
>>> [1] "x64"
>>>
>>> Thank you. Regards,
>>>
>>> Paulo Barata
>>>
>>> (Rio de Janeiro - Brazil)
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Aug 31 18:09:40 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 31 Aug 2022 18:09:40 +0200
Subject: [Rd] 
 Mismatch between the Rconsole file and the RGui Configuration editor
In-Reply-To: <c7cf26d7-c1aa-a70b-a6ec-a9c8a9aac6cf@infolink.com.br>
References: <e486d67c-e8b6-2707-3f3d-94894653be54@infolink.com.br>
 <618ec587-0a54-22d5-2bea-f3b0eb403701@infolink.com.br>
 <16d98892-54fa-da20-543e-3a6c6c9a8fd6@gmail.com>
 <c7330739-651b-0bdf-83c2-413f5a4cabeb@infolink.com.br>
 <c7cf26d7-c1aa-a70b-a6ec-a9c8a9aac6cf@infolink.com.br>
Message-ID: <5695a2bb-1908-a775-aba4-21412475dcbf@gmail.com>


On 8/31/22 18:08, Paulo Barata wrote:
> Dear Tomas,
>
> I am sorry, my fault. I see now that you said R-devel 82776, not R 
> patched 82776.
>
> Yes, the problem is fixed in R-devel 82776 --- this is R Under 
> development (unstable) (2022-08-30 r82776 ucrt). There is no more the 
> mismatch between the Rconsole file and the GUI editor. It is all right 
> now.
>
> My apologies again. Thank you for your attention.

No problem, thanks a lot for confirming it works. I will port to R-patched.

Best
Tomas

>
> Best regards,
>
> Paulo
>
> ----------------------------------------------------------
>
> On 31/08/2022 12:58, Paulo Barata wrote:
>> Dear Tomas,
>>
>> Thank you for your attention and for the detailed explanation about 
>> the issue with the R Gui.
>>
>> As you have indicated, I tested R version 4.2.1 Patched (2022-08-30 
>> r82776 ucrt), which I downloaded today. Unfortunately, the mismatch 
>> between the Rconsole file and the GUI preferences continues to happen 
>> here on my computer.
>>
>> Even if I delete the Rconsole file from the Documents folder in 
>> Windows and save a new Rconsole file, there is that mismatch.
>>
>> It seems that the GUI editor (and the actual size of the R worspace) 
>> is always a bit smaller that what is recorded in the Rconsole file, 
>> that is, a bit smaller than what I specified for rows and columns. 
>> For instance, if I specified 37 rows and 112 columns, this is what is 
>> recorded in the Rconsole file, but when I open R and go to the Gui 
>> editor, I find 36 rows and 110 columns, and the workspace is clearly 
>> different from my specifications.
>>
>> I use Windows 10 Pro for Workstations, version 21H2, installed on 
>> 23/?August/?2022, build 19044.1889 (this is the latest update for 
>> Windows 10).
>>
>> As I said before, of course the mismatch does not prevent me of using 
>> R, this could be said to be just a nuisance. But I think that no 
>> mismatch should be happening.
>>
>> Thank you once again.
>>
>> Best regards,
>>
>> Paulo
>>
>> ----------------------------------------------------------
>>
>> On 30/08/2022 13:33, Tomas Kalibera wrote:
>>>
>>> On 8/27/22 20:46, Paulo Barata wrote:
>>>>
>>>> To the R developers,
>>>>
>>>> In R version 4.2.1 (2022-06-23 ucrt), and also in R version 4.2.1 
>>>> Patched (2022-08-24 r82762 ucrt), something strange is happening 
>>>> with the GUI Preferences x Rconsole file. I open the GUI 
>>>> Preferences (RGui Configuration editor), and I define the number of 
>>>> console rows and columns, the I click Apply and then I Save the 
>>>> Preferences to the Rconsole file (which is in the Documents folders 
>>>> of my Windows 10 Pro) -- I overwrite the existing Rconsole file. 
>>>> Then I close R.
>>>>
>>>> When I open R again, there is always a mismatch between the number 
>>>> of console rows and columns correctly recorded in the Rconsole file 
>>>> and the numbers actually shown in the RGui Configuration editor.
>>>
>>> Dear Paulo,
>>>
>>> thanks for the report. It is now fixed in R-devel 82776 (it would be 
>>> nice if you could confirm the problem is fixed for you on your system).
>>>
>>> You have run into an old bug in GraphApp, a library used by Rgui. 
>>> The part saving and restoring the preferences works fine, but the 
>>> problem occurs on R startup when creating a new console window. Rgui 
>>> computes the client size of the window based on the preferred number 
>>> of rows and columns and asks GraphApp to create such window. 
>>> GraphApp uses its internal code (probably it pre-dates 
>>> AdjustWindowRect) to compute the screen size of the window, so 
>>> including the title bar, scroll bars, etc, and then asks Windows to 
>>> create the window. Rgui then checks the actual client size of the 
>>> created window and updates the number of rows and columns based on 
>>> that - which is also the number you then see in the preferences 
>>> editor. Ideally/normally it should be the same as what was given 
>>> initially, e.g. via Rconsole.
>>>
>>> However, the computation in GraphApp didn't work quite right, it 
>>> didn't account for the scrollbars. And the reason was that it 
>>> assumed a canvas (CanvasSize bit was set on the window flags). That 
>>> bit was set by accident, because GraphApp by accident used the same 
>>> bit number for CanvasSize and UseUnicode. The UseUnicode bit is set 
>>> in Rgui when running in a multi-byte locale, so for you and many 
>>> others probably only since R 4.2. I've changed GraphApp to use a 
>>> different bit.
>>>
>>> Thanks for testing Rgui and reporting problems.
>>>
>>> Best
>>> Tomas
>>>
>>>>
>>>> If this list allows attachments, the attached PNG image shows the 
>>>> mismatch between the Rconsole file and the RGui Configuration 
>>>> editor, just after opening R version 4.2.1 (2022-06-23 ucrt).
>>>>
>>>> Windows 10 Pro for Workstations
>>>> Version 21H2
>>>> Installed on 23/?08/?2022
>>>> OS build 19044.1889
>>>> Processor Intel(R) Xeon(R) W-1350 @ 3.30GHz? 3.31 GHz
>>>> Installed RAM 64.0 GB (63.7 GB usable)
>>>>
>>>>
>>>> R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
>>>> Copyright (C) 2022 The R Foundation for Statistical Computing
>>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>>
>>>> ?> Sys.info()
>>>> ?????????? sysname?????????? release?????????? version nodename
>>>> ???????? "Windows"????????? "10 x64"???? "build 19044" 
>>>> "XXXXXXXXXXXXXXX"
>>>> ?????????? machine???????????? login????????????? user effective_user
>>>> ????????? "x86-64"?????????? "XXXXX???????? "XXXXX" "XXXXX"
>>>> ?> win.version()
>>>> [1] "Windows 10 x64 (build 19044)"
>>>>
>>>> ?> .Platform
>>>> $OS.type
>>>> [1] "windows"
>>>> $file.sep
>>>> [1] "/"
>>>> $dynlib.ext
>>>> [1] ".dll"
>>>> $GUI
>>>> [1] "Rgui"
>>>> $endian
>>>> [1] "little"
>>>> $pkgType
>>>> [1] "win.binary"
>>>> $path.sep
>>>> [1] ";"
>>>> $r_arch
>>>> [1] "x64"
>>>>
>>>> Thank you. Regards,
>>>>
>>>> Paulo Barata
>>>>
>>>> (Rio de Janeiro - Brazil)
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


