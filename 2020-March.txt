From @d|rk@e @end|ng |rom g@m@@com  Sun Mar  1 00:27:27 2020
From: @d|rk@e @end|ng |rom g@m@@com (Steven Dirkse)
Date: Sat, 29 Feb 2020 18:27:27 -0500
Subject: [Rd] dput()
In-Reply-To: <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
Message-ID: <CAHiA-ZkBrxe3s8+5EgzXdZU0==h2c7K_DFy_W7kU7hoagwW_7Q@mail.gmail.com>

Ben,

I'll edit and split your question just a little.
  1) "Is there a way to get an *exact* ASCII representation of a
double-precision value?"
  2) "Is there a way to get round-trip behavior, i.e. to make sure that the
value, when converted back to double, is identical() to the original"

The hexNumeric idea mentioned by Duncan is a positive answer to the first
question.  It's a little hard to grok at first, but it is fully precise and
represents exactly a 64-bit double.  And since it is exact it converts back
identically.

But there is another way to get round-trip behavior.  There is a set of
routines called dtoa that, when given an IEEE double, produce the shortest
sequence of base 10 digits that will map back to the double.  There may be
some rounding when producing these digits, but of all the digit sequences
that would map back to the input x, these routines produce the shortest
such.

A link to the original routines is here:

http://www.netlib.org/fp/dtoa.c

and some searching will turn up variants of this code in newer guises.

A good question to ask: for all finite doubles, what is the length of the
longest digit sequence required?  I believe 17 digits is the max digits
required.  It may be 18, but I doubt it.  I don't have an example at hand
and I spent some time looking when working with these routines.   Oh, BTW,
trailing or leading zeros do not count toward the length of the digit
sequence.

-Steve

On Sat, Feb 29, 2020 at 4:21 AM Ben Bolker <bbolker at gmail.com> wrote:

>
>  I think Robin knows about FAQ 7.31/floating point (author of
> 'Brobdingnag', among other numerical packages).  I agree that this is
> surprising (to me).
>
>   To reframe this question: is there way to get an *exact* ASCII
> representation of a numeric value (i.e., guaranteeing the restored value
> is identical() to the original) ?
>
>  .deparseOpts has
>
> ?"digits17"?: Real and finite complex numbers are output using
>           format ?"%.17g"? which may give more precision than the
>           default (but the output will depend on the platform and there
>           may be loss of precision when read back).
>
>   ... but this still doesn't guarantee that all precision is kept.
>
>   Maybe
>
>  saveRDS(x,textConnection("out","w"),ascii=TRUE)
> identical(x,as.numeric(out[length(out)]))   ## TRUE
>
> ?
>
>
>
>
> On 2020-02-29 2:42 a.m., Rui Barradas wrote:
> > Hello,
> >
> > FAQ 7.31
> >
> > See also this StackOverflow post:
> >
> >
> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
> >
> > Hope this helps,
> >
> > Rui Barradas
> >
> > ?s 00:08 de 29/02/20, robin hankin escreveu:
> >> My interpretation of dput.Rd is that dput() gives an exact ASCII form
> >> of the internal representation of an R object.  But:
> >>
> >>   rhankin at cuttlefish:~ $ R --version
> >> R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
> >> Copyright (C) 2019 The R Foundation for Statistical Computing
> >> Platform: x86_64-pc-linux-gnu (64-bit)
> >>
> >> [snip]
> >>
> >> rhankin at cuttlefish:~ $ R --vanilla --quiet
> >>> x <- sum(dbinom(0:20,20,0.35))
> >>> dput(x)
> >> 1
> >>> x-1
> >> [1] -4.440892e-16
> >>>
> >>> x==1
> >> [1] FALSE
> >>>
> >>
> >> So, dput(x) gives 1, but x is not equal to 1.  Can anyone advise?
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Steven Dirkse, Ph.D.
GAMS Development Corp.
office: 202.342.0180

	[[alternative HTML version deleted]]


From ch@r||e @end|ng |rom @t@t@umn@edu  Sun Mar  1 00:45:57 2020
From: ch@r||e @end|ng |rom @t@t@umn@edu (Charles Geyer)
Date: Sat, 29 Feb 2020 17:45:57 -0600
Subject: [Rd] tcl problem with R-3.6.3?
In-Reply-To: <CAKctRd38bnP+=Gq-GJxpJjfV71eJDSf8DCcK9N6=xLt73J2Vjg@mail.gmail.com>
References: <CAKctRd35HMAbWzE0wwOwX7f6V54aBfXm_HUWi4NCGzfXD3vOWA@mail.gmail.com>
 <CAFDcVCRLg-TMxsvpZc=X1q8Aq1pRxZHMQjUEn1tDzhK7qVMiQg@mail.gmail.com>
 <CAKctRd25N+RSmcncdXC9zZPPVPHS44B_MNLiA66kAfjGAE77jQ@mail.gmail.com>
 <24154.53742.260945.180539@rob.eddelbuettel.com>
 <CAKctRd38bnP+=Gq-GJxpJjfV71eJDSf8DCcK9N6=xLt73J2Vjg@mail.gmail.com>
Message-ID: <CAKctRd2GJ49s_R514QsRMqEnTfvX2dAgBHnrRved_NBSQxFpWQ@mail.gmail.com>

I realized I don't have to do those checks.  It was not working again (same
error) message when I got home, but after a reboot it worked fine.  Of
course it has tcl/tk because when it works, it brings up a gui chooser
thingy that allows me to choose a CRAN mirror.

On Sat, Feb 29, 2020 at 3:33 PM Charles Geyer <charlie at stat.umn.edu> wrote:

> No. I didn't do any of that and am now at a hockey game.  But since I
> can't reproduce the problem after an Ubuntu online update and reboot, I
> assume the issue is moot.  But I will check these things in an hour or so.
>
> On Sat, Feb 29, 2020, 3:24 PM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>>
>> Charles,
>>
>> Did you try a build of the provided alpha, beta and rc releases made
>> available to allow you to ensure that the released version would build and
>> perform as expected?
>>
>> FWIW the new 3.6.3 made ~ 12 hours ago are already available for Debian,
>> built for the Ubuntu backports at CRAN (thanks to Michael) and also in the
>> base Rocker container behaves as expected (and as the one RC build did):
>>
>> edd at rob:~$ docker run --rm -ti rocker/r-base
>>
>> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
>> Copyright (C) 2020 The R Foundation for Statistical Computing
>> Platform: x86_64-pc-linux-gnu (64-bit)
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>>   Natural language support but running in an English locale
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>> > capabilities()
>>        jpeg         png        tiff       tcltk         X11        aqua
>>        TRUE        TRUE        TRUE        TRUE       FALSE       FALSE
>>    http/ftp     sockets      libxml        fifo      cledit       iconv
>>        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE
>>         NLS     profmem       cairo         ICU long.double     libcurl
>>        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE
>> >
>>
>>
>> And (to echo Martin Maechler) tcltk comes up as TRUE as it should.
>>
>> Dirk
>>
>> --
>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>

-- 
Charles Geyer
Professor, School of Statistics
Resident Fellow, Minnesota Center for Philosophy of Science
University of Minnesota
charlie at stat.umn.edu

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar  2 09:24:37 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 2 Mar 2020 09:24:37 +0100
Subject: [Rd] dput()
In-Reply-To: <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
Message-ID: <24156.49861.922526.979505@stat.math.ethz.ch>

>>>>> robin hankin 
>>>>>     on Sun, 1 Mar 2020 09:26:24 +1300 writes:

    >  Thanks guys, I guess I should have referred to FAQ 7.31
    > (which I am indeed very familiar with) to avoid
    > misunderstanding.  I have always used dput() to clarify
    > 7.31-type issues.

    > The description in ?dput implies [to me at any rate] that
    > there will be no floating-point roundoff in its output.  I
    > hadn't realised that 'deparsing' as discussed in dput.Rd
    > includes precision roundoff issues.

    > I guess the question I should have asked is close to
    > Ben's: "How to force dput() to return an exact
    > representation of a floating point number?".  Duncan's
    > reply is the insight I was missing: exact decimal
    > representation of a double might not be possible (this had
    > not occurred to me).  Also, Duncan's suggestion of control
    > = c("all", "hexNumeric") looks good and I will experiment
    > with this.

This was not Duncan's suggestion but rather  Duncan's *citation* :
Note that he used  " .... " !

The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
<rant>
but unfortunately many people nowadays have stopped reading texts
that are longer than a tweet... ;-)
<rant/>
... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
instead of   c("all", "hexNumeric")  when talking about getting
close to an inverse of parse()

As a matter of fact,  within R Core we had discussed this, many
moons ago and actually had more or less decided to make "all"
to *include* "digits17".

"digits17" is  "almost always" (I'm sorry I cannot quantify the
'almost' here) sufficient ... and is obviously conflicting with
using hexadecimals instead of digits.

For R 4.0.0, I think we should finally consider doing something
here :

1) define "all" to include "digits17" 
   so new "all" is current  c("all", "digits17")
   {in a way such that c("all", "hexNumeric") implicitly removes
   "digits17" (as it's in contradiction with "hexNumeric").

2) add a new option  "AllHex" := c("all", "hexNumeric"),
   (Note the capital "A":  such that  match.arg()-like abbreviation
    of .deparseOpts() arguments remain possible and notably "all"
    does not suddenly become ambiguous)

Of course, '1)' is well possible without '2)',
but '2)'  would allow to use  dput(*, control = "All")
which is somewhat easier to readers & writers.

Martin

    > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
    > <murdoch.duncan at gmail.com> wrote:
    >> 
    >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
    >> >
    >> > I think Robin knows about FAQ 7.31/floating point
    >> (author of > 'Brobdingnag', among other numerical
    >> packages).  I agree that this is > surprising (to me).
    >> >
    >> > To reframe this question: is there way to get an
    >> *exact* ASCII > representation of a numeric value (i.e.,
    >> guaranteeing the restored value > is identical() to the
    >> original) ?
    >> >
    >> > .deparseOpts has
    >> >
    >> > ?"digits17"?: Real and finite complex numbers are
    >> output using > format ?"%.17g"? which may give more
    >> precision than the > default (but the output will depend
    >> on the platform and there > may be loss of precision when
    >> read back).
    >> >
    >> > ... but this still doesn't guarantee that all precision
    >> is kept.
    >> 
    >> "Using control = c("all", "hexNumeric") comes closest to
    >> making deparse() an inverse of parse(), as representing
    >> double and complex numbers as decimals may well not be
    >> exact. However, not all objects are deparse-able even
    >> with this option. A warning will be issued if the
    >> function recognizes that it is being asked to do the
    >> impossible."
    >> 
    >> >
    >> > Maybe
    >> >
    >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
    >> identical(x,as.numeric(out[length(out)])) ## TRUE
    >> >
    >> > ?
    >> >
    >> >
    >> >
    >> >
    >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
    >> >>
    >> >> FAQ 7.31
    >> >>
    >> >> See also this StackOverflow post:
    >> >>
    >> >>
    >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
    >> >>
    >> >> Hope this helps,
    >> >>
    >> >> Rui Barradas
    >> >>
    >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
    >> interpretation of dput.Rd is that dput() gives an exact
    >> ASCII form >>> of the internal representation of an R
    >> object.  But:
    >> >>>
    >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
    >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
    >> Copyright (C) 2019 The R Foundation for Statistical
    >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >> >>>
    >> >>> [snip]
    >> >>>
    >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
    >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
    >> [1] -4.440892e-16
    >> >>>>
    >> >>>> x==1 >>> [1] FALSE
    >> >>>>
    >> >>>
    >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
    >> anyone advise?
    >> >>>
    >> >>> ______________________________________________ >>>
    >> R-devel at r-project.org mailing list >>>
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >>>
    >> >>
    >> >> ______________________________________________ >>
    >> R-devel at r-project.org mailing list >>
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >
    >> > ______________________________________________ >
    >> R-devel at r-project.org mailing list >
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar  2 10:43:53 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Mar 2020 04:43:53 -0500
Subject: [Rd] dput()
In-Reply-To: <24156.49861.922526.979505@stat.math.ethz.ch>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
 <24156.49861.922526.979505@stat.math.ethz.ch>
Message-ID: <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>

On 02/03/2020 3:24 a.m., Martin Maechler wrote:
>>>>>> robin hankin
>>>>>>      on Sun, 1 Mar 2020 09:26:24 +1300 writes:
> 
>      >  Thanks guys, I guess I should have referred to FAQ 7.31
>      > (which I am indeed very familiar with) to avoid
>      > misunderstanding.  I have always used dput() to clarify
>      > 7.31-type issues.
> 
>      > The description in ?dput implies [to me at any rate] that
>      > there will be no floating-point roundoff in its output.  I
>      > hadn't realised that 'deparsing' as discussed in dput.Rd
>      > includes precision roundoff issues.
> 
>      > I guess the question I should have asked is close to
>      > Ben's: "How to force dput() to return an exact
>      > representation of a floating point number?".  Duncan's
>      > reply is the insight I was missing: exact decimal
>      > representation of a double might not be possible (this had
>      > not occurred to me).  Also, Duncan's suggestion of control
>      > = c("all", "hexNumeric") looks good and I will experiment
>      > with this.
> 
> This was not Duncan's suggestion but rather  Duncan's *citation* :
> Note that he used  " .... " !
> 
> The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
> <rant>
> but unfortunately many people nowadays have stopped reading texts
> that are longer than a tweet... ;-)
> <rant/>
> ... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
> instead of   c("all", "hexNumeric")  when talking about getting
> close to an inverse of parse()
> 
> As a matter of fact,  within R Core we had discussed this, many
> moons ago and actually had more or less decided to make "all"
> to *include* "digits17".
> 
> "digits17" is  "almost always" (I'm sorry I cannot quantify the
> 'almost' here) sufficient ... and is obviously conflicting with
> using hexadecimals instead of digits.
> 
> For R 4.0.0, I think we should finally consider doing something
> here :
> 
> 1) define "all" to include "digits17"
>     so new "all" is current  c("all", "digits17")
>     {in a way such that c("all", "hexNumeric") implicitly removes
>     "digits17" (as it's in contradiction with "hexNumeric").
> 
> 2) add a new option  "AllHex" := c("all", "hexNumeric"),
>     (Note the capital "A":  such that  match.arg()-like abbreviation
>      of .deparseOpts() arguments remain possible and notably "all"
>      does not suddenly become ambiguous)
> 
> Of course, '1)' is well possible without '2)',
> but '2)'  would allow to use  dput(*, control = "All")
> which is somewhat easier to readers & writers.

I think 1) is a good idea, and adding something with the meaning of 
AllHex seems useful:  but that's not a name I'd choose, since it's not 
consistent with the other names (which are almost all camelCase).  I'd 
choose something like "exact" (even though it isn't :-).

Duncan Murdoch

> 
> Martin
> 
>      > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
>      > <murdoch.duncan at gmail.com> wrote:
>      >>
>      >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
>      >> >
>      >> > I think Robin knows about FAQ 7.31/floating point
>      >> (author of > 'Brobdingnag', among other numerical
>      >> packages).  I agree that this is > surprising (to me).
>      >> >
>      >> > To reframe this question: is there way to get an
>      >> *exact* ASCII > representation of a numeric value (i.e.,
>      >> guaranteeing the restored value > is identical() to the
>      >> original) ?
>      >> >
>      >> > .deparseOpts has
>      >> >
>      >> > ?"digits17"?: Real and finite complex numbers are
>      >> output using > format ?"%.17g"? which may give more
>      >> precision than the > default (but the output will depend
>      >> on the platform and there > may be loss of precision when
>      >> read back).
>      >> >
>      >> > ... but this still doesn't guarantee that all precision
>      >> is kept.
>      >>
>      >> "Using control = c("all", "hexNumeric") comes closest to
>      >> making deparse() an inverse of parse(), as representing
>      >> double and complex numbers as decimals may well not be
>      >> exact. However, not all objects are deparse-able even
>      >> with this option. A warning will be issued if the
>      >> function recognizes that it is being asked to do the
>      >> impossible."
>      >>
>      >> >
>      >> > Maybe
>      >> >
>      >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
>      >> identical(x,as.numeric(out[length(out)])) ## TRUE
>      >> >
>      >> > ?
>      >> >
>      >> >
>      >> >
>      >> >
>      >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
>      >> >>
>      >> >> FAQ 7.31
>      >> >>
>      >> >> See also this StackOverflow post:
>      >> >>
>      >> >>
>      >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
>      >> >>
>      >> >> Hope this helps,
>      >> >>
>      >> >> Rui Barradas
>      >> >>
>      >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
>      >> interpretation of dput.Rd is that dput() gives an exact
>      >> ASCII form >>> of the internal representation of an R
>      >> object.  But:
>      >> >>>
>      >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
>      >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
>      >> Copyright (C) 2019 The R Foundation for Statistical
>      >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
>      >> >>>
>      >> >>> [snip]
>      >> >>>
>      >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
>      >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
>      >> [1] -4.440892e-16
>      >> >>>>
>      >> >>>> x==1 >>> [1] FALSE
>      >> >>>>
>      >> >>>
>      >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
>      >> anyone advise?
>      >> >>>
>      >> >>> ______________________________________________ >>>
>      >> R-devel at r-project.org mailing list >>>
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >>>
>      >> >>
>      >> >> ______________________________________________ >>
>      >> R-devel at r-project.org mailing list >>
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >
>      >> > ______________________________________________ >
>      >> R-devel at r-project.org mailing list >
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar  2 15:36:51 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 2 Mar 2020 15:36:51 +0100
Subject: [Rd] dput()
In-Reply-To: <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
 <24156.49861.922526.979505@stat.math.ethz.ch>
 <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>
Message-ID: <24157.6659.230987.276281@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Mon, 2 Mar 2020 04:43:53 -0500 writes:

    > On 02/03/2020 3:24 a.m., Martin Maechler wrote:
    >>>>>>> robin hankin
    >>>>>>> on Sun, 1 Mar 2020 09:26:24 +1300 writes:
    >> 
    >> >  Thanks guys, I guess I should have referred to FAQ 7.31
    >> > (which I am indeed very familiar with) to avoid
    >> > misunderstanding.  I have always used dput() to clarify
    >> > 7.31-type issues.
    >> 
    >> > The description in ?dput implies [to me at any rate] that
    >> > there will be no floating-point roundoff in its output.  I
    >> > hadn't realised that 'deparsing' as discussed in dput.Rd
    >> > includes precision roundoff issues.
    >> 
    >> > I guess the question I should have asked is close to
    >> > Ben's: "How to force dput() to return an exact
    >> > representation of a floating point number?".  Duncan's
    >> > reply is the insight I was missing: exact decimal
    >> > representation of a double might not be possible (this had
    >> > not occurred to me).  Also, Duncan's suggestion of control
    >> > = c("all", "hexNumeric") looks good and I will experiment
    >> > with this.
    >> 
    >> This was not Duncan's suggestion but rather  Duncan's *citation* :
    >> Note that he used  " .... " !
    >> 
    >> The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
    >> <rant>
    >> but unfortunately many people nowadays have stopped reading texts
    >> that are longer than a tweet... ;-)
    >> <rant/>
    >> ... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
    >> instead of   c("all", "hexNumeric")  when talking about getting
    >> close to an inverse of parse()
    >> 
    >> As a matter of fact,  within R Core we had discussed this, many
    >> moons ago and actually had more or less decided to make "all"
    >> to *include* "digits17".
    >> 
    >> "digits17" is  "almost always" (I'm sorry I cannot quantify the
    >> 'almost' here) sufficient ... and is obviously conflicting with
    >> using hexadecimals instead of digits.
    >> 
    >> For R 4.0.0, I think we should finally consider doing something
    >> here :
    >> 
    >> 1) define "all" to include "digits17"
    >> so new "all" is current  c("all", "digits17")
    >> {in a way such that c("all", "hexNumeric") implicitly removes
    >> "digits17" (as it's in contradiction with "hexNumeric").
    >> 
    >> 2) add a new option  "AllHex" := c("all", "hexNumeric"),
    >> (Note the capital "A":  such that  match.arg()-like abbreviation
    >> of .deparseOpts() arguments remain possible and notably "all"
    >> does not suddenly become ambiguous)
    >> 
    >> Of course, '1)' is well possible without '2)',
    >> but '2)'  would allow to use  dput(*, control = "All")
    >> which is somewhat easier to readers & writers.

    > I think 1) is a good idea, and adding something with the meaning of 
    > AllHex seems useful:  but that's not a name I'd choose, since it's not 
    > consistent with the other names (which are almost all camelCase).  I'd 
    > choose something like "exact" (even though it isn't :-).

Thank you -- you are right;
all "AllHex" is too non-orthodox and hence a pain for people to
get right, remember, etc.

In light of  Steven Dirkse's reply (and other much older e-mails
by others I remember only vaguely), it seems we still need to
find an example (with numbers) where it is not exact  ...
which makes  "exact" even more appropriate.

Martin

    >> > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
    >> > <murdoch.duncan at gmail.com> wrote:
    >> >>
    >> >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
    >> >> >
    >> >> > I think Robin knows about FAQ 7.31/floating point
    >> >> (author of > 'Brobdingnag', among other numerical
    >> >> packages).  I agree that this is > surprising (to me).
    >> >> >
    >> >> > To reframe this question: is there way to get an
    >> >> *exact* ASCII > representation of a numeric value (i.e.,
    >> >> guaranteeing the restored value > is identical() to the
    >> >> original) ?
    >> >> >
    >> >> > .deparseOpts has
    >> >> >
    >> >> > ?"digits17"?: Real and finite complex numbers are
    >> >> output using > format ?"%.17g"? which may give more
    >> >> precision than the > default (but the output will depend
    >> >> on the platform and there > may be loss of precision when
    >> >> read back).
    >> >> >
    >> >> > ... but this still doesn't guarantee that all precision
    >> >> is kept.
    >> >>
    >> >> "Using control = c("all", "hexNumeric") comes closest to
    >> >> making deparse() an inverse of parse(), as representing
    >> >> double and complex numbers as decimals may well not be
    >> >> exact. However, not all objects are deparse-able even
    >> >> with this option. A warning will be issued if the
    >> >> function recognizes that it is being asked to do the
    >> >> impossible."
    >> >>
    >> >> >
    >> >> > Maybe
    >> >> >
    >> >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
    >> >> identical(x,as.numeric(out[length(out)])) ## TRUE
    >> >> >
    >> >> > ?
    >> >> >
    >> >> >
    >> >> >
    >> >> >
    >> >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
    >> >> >>
    >> >> >> FAQ 7.31
    >> >> >>
    >> >> >> See also this StackOverflow post:
    >> >> >>
    >> >> >>
    >> >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
    >> >> >>
    >> >> >> Hope this helps,
    >> >> >>
    >> >> >> Rui Barradas
    >> >> >>
    >> >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
    >> >> interpretation of dput.Rd is that dput() gives an exact
    >> >> ASCII form >>> of the internal representation of an R
    >> >> object.  But:
    >> >> >>>
    >> >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
    >> >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
    >> >> Copyright (C) 2019 The R Foundation for Statistical
    >> >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >> >> >>>
    >> >> >>> [snip]
    >> >> >>>
    >> >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
    >> >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
    >> >> [1] -4.440892e-16
    >> >> >>>>
    >> >> >>>> x==1 >>> [1] FALSE
    >> >> >>>>
    >> >> >>>
    >> >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
    >> >> anyone advise?
    >> >> >>>

    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Mar  3 12:15:07 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 3 Mar 2020 12:15:07 +0100
Subject: [Rd] dput()
In-Reply-To: <24157.6659.230987.276281@stat.math.ethz.ch>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
 <24156.49861.922526.979505@stat.math.ethz.ch>
 <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>
 <24157.6659.230987.276281@stat.math.ethz.ch>
Message-ID: <24158.15419.403424.118423@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Mon, 2 Mar 2020 15:36:51 +0100 writes:

>>>>> Duncan Murdoch 
>>>>>     on Mon, 2 Mar 2020 04:43:53 -0500 writes:

    >> On 02/03/2020 3:24 a.m., Martin Maechler wrote:
    >>>>>>>> robin hankin
    >>>>>>>> on Sun, 1 Mar 2020 09:26:24 +1300 writes:
    >>> 
    >>> >  Thanks guys, I guess I should have referred to FAQ 7.31
    >>> > (which I am indeed very familiar with) to avoid
    >>> > misunderstanding.  I have always used dput() to clarify
    >>> > 7.31-type issues.
    >>> 
    >>> > The description in ?dput implies [to me at any rate] that
    >>> > there will be no floating-point roundoff in its output.  I
    >>> > hadn't realised that 'deparsing' as discussed in dput.Rd
    >>> > includes precision roundoff issues.
    >>> 
    >>> > I guess the question I should have asked is close to
    >>> > Ben's: "How to force dput() to return an exact
    >>> > representation of a floating point number?".  Duncan's
    >>> > reply is the insight I was missing: exact decimal
    >>> > representation of a double might not be possible (this had
    >>> > not occurred to me).  Also, Duncan's suggestion of control
    >>> > = c("all", "hexNumeric") looks good and I will experiment
    >>> > with this.
    >>> 
    >>> This was not Duncan's suggestion but rather  Duncan's *citation* :
    >>> Note that he used  " .... " !
    >>> 
    >>> The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
    >>> <rant>
    >>> but unfortunately many people nowadays have stopped reading texts
    >>> that are longer than a tweet... ;-)
    >>> <rant/>
    >>> ... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
    >>> instead of   c("all", "hexNumeric")  when talking about getting
    >>> close to an inverse of parse()
    >>> 
    >>> As a matter of fact,  within R Core we had discussed this, many
    >>> moons ago and actually had more or less decided to make "all"
    >>> to *include* "digits17".
    >>> 
    >>> "digits17" is  "almost always" (I'm sorry I cannot quantify the
    >>> 'almost' here) sufficient ... and is obviously conflicting with
    >>> using hexadecimals instead of digits.
    >>> 
    >>> For R 4.0.0, I think we should finally consider doing something
    >>> here :
    >>> 
    >>> 1) define "all" to include "digits17"
    >>> so new "all" is current  c("all", "digits17")
    >>> {in a way such that c("all", "hexNumeric") implicitly removes
    >>> "digits17" (as it's in contradiction with "hexNumeric").
    >>> 
    >>> 2) add a new option  "AllHex" := c("all", "hexNumeric"),
    >>> (Note the capital "A":  such that  match.arg()-like abbreviation
    >>> of .deparseOpts() arguments remain possible and notably "all"
    >>> does not suddenly become ambiguous)
    >>> 
    >>> Of course, '1)' is well possible without '2)',
    >>> but '2)'  would allow to use  dput(*, control = "All")
    >>> which is somewhat easier to readers & writers.

    >> I think 1) is a good idea, and adding something with the meaning of 
    >> AllHex seems useful:  but that's not a name I'd choose, since it's not 
    >> consistent with the other names (which are almost all camelCase).  I'd 
    >> choose something like "exact" (even though it isn't :-).

    > Thank you -- you are right;
    > all "AllHex" is too non-orthodox and hence a pain for people to
    > get right, remember, etc.

    > In light of  Steven Dirkse's reply (and other much older e-mails
    > by others I remember only vaguely), it seems we still need to
    > find an example (with numbers) where it is not exact  ...
    > which makes  "exact" even more appropriate.

    > Martin

I've now committed these two proposals, using "exact" -- to
R-devel (i.e., for R 4.0.0).

(wanted in one svn commit, but accidentally needed 2: svn r77891 + ...2).

Martin


    >>> > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
    >>> > <murdoch.duncan at gmail.com> wrote:
    >>> >>
    >>> >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
    >>> >> >
    >>> >> > I think Robin knows about FAQ 7.31/floating point
    >>> >> (author of > 'Brobdingnag', among other numerical
    >>> >> packages).  I agree that this is > surprising (to me).
    >>> >> >
    >>> >> > To reframe this question: is there way to get an
    >>> >> *exact* ASCII > representation of a numeric value (i.e.,
    >>> >> guaranteeing the restored value > is identical() to the
    >>> >> original) ?
    >>> >> >
    >>> >> > .deparseOpts has
    >>> >> >
    >>> >> > ?"digits17"?: Real and finite complex numbers are
    >>> >> output using > format ?"%.17g"? which may give more
    >>> >> precision than the > default (but the output will depend
    >>> >> on the platform and there > may be loss of precision when
    >>> >> read back).
    >>> >> >
    >>> >> > ... but this still doesn't guarantee that all precision
    >>> >> is kept.
    >>> >>
    >>> >> "Using control = c("all", "hexNumeric") comes closest to
    >>> >> making deparse() an inverse of parse(), as representing
    >>> >> double and complex numbers as decimals may well not be
    >>> >> exact. However, not all objects are deparse-able even
    >>> >> with this option. A warning will be issued if the
    >>> >> function recognizes that it is being asked to do the
    >>> >> impossible."
    >>> >>
    >>> >> >
    >>> >> > Maybe
    >>> >> >
    >>> >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
    >>> >> identical(x,as.numeric(out[length(out)])) ## TRUE
    >>> >> >
    >>> >> > ?
    >>> >> >
    >>> >> >
    >>> >> >
    >>> >> >
    >>> >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
    >>> >> >>
    >>> >> >> FAQ 7.31
    >>> >> >>
    >>> >> >> See also this StackOverflow post:
    >>> >> >>
    >>> >> >>
    >>> >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
    >>> >> >>
    >>> >> >> Hope this helps,
    >>> >> >>
    >>> >> >> Rui Barradas
    >>> >> >>
    >>> >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
    >>> >> interpretation of dput.Rd is that dput() gives an exact
    >>> >> ASCII form >>> of the internal representation of an R
    >>> >> object.  But:
    >>> >> >>>
    >>> >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
    >>> >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
    >>> >> Copyright (C) 2019 The R Foundation for Statistical
    >>> >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >>> >> >>>
    >>> >> >>> [snip]
    >>> >> >>>
    >>> >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
    >>> >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
    >>> >> [1] -4.440892e-16
    >>> >> >>>>
    >>> >> >>>> x==1 >>> [1] FALSE
    >>> >> >>>>
    >>> >> >>>
    >>> >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
    >>> >> anyone advise?


From therne@u @end|ng |rom m@yo@edu  Tue Mar  3 16:00:08 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 03 Mar 2020 09:00:08 -0600
Subject: [Rd] survival bug?
Message-ID: <28fddd$dc0bti@ironport10.mayo.edu>

My latest submission of survival3.1-10 to CRAN fails? a check, but only on windows, which 
I don't use.
How do I track this down?
The test in question works fine on my Linux box.

Terry



	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Mar  3 22:02:51 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 3 Mar 2020 13:02:51 -0800
Subject: [Rd] survival bug?
In-Reply-To: <28fddd$dc0bti@ironport10.mayo.edu>
References: <28fddd$dc0bti@ironport10.mayo.edu>
Message-ID: <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>

Hi Terry,

http://win-builder.r-project.org/ and the rhub build service (which can be
invoked by the rhub package) allow on demand checks in windows
environments, though for active debugging the iteration time can be quite
painful.

If you have access, e.g., through your employer, to a windows license you
should also be able to do use VMWare or VirtualBox (I can never remember
which one I like more) to run windows and test that way. This will have
some start up cost in effort but allows active testing and iteration.

Hope that helps,
~G

On Tue, Mar 3, 2020 at 7:00 AM Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
> windows, which
> I don't use.
> How do I track this down?
> The test in question works fine on my Linux box.
>
> Terry
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Tue Mar  3 22:15:42 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 3 Mar 2020 16:15:42 -0500
Subject: [Rd] survival bug?
In-Reply-To: <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
Message-ID: <4e00362f-0c1e-e8fd-842c-8c1d27c8b1d3@gmail.com>


  Microsoft offers fully-provisioned but time-limited developer images
for Windows 10 (I think they last for 3 months) for most major VM
platforms (including VirtualBox, which is the one I currently use).
There would certainly be a start-up cost in effort, but probably not any
financial cost.

   cheers
    Ben Bolker

On 2020-03-03 4:02 p.m., Gabriel Becker wrote:
> Hi Terry,
> 
> http://win-builder.r-project.org/ and the rhub build service (which can be
> invoked by the rhub package) allow on demand checks in windows
> environments, though for active debugging the iteration time can be quite
> painful.
> 
> If you have access, e.g., through your employer, to a windows license you
> should also be able to do use VMWare or VirtualBox (I can never remember
> which one I like more) to run windows and test that way. This will have
> some start up cost in effort but allows active testing and iteration.
> 
> Hope that helps,
> ~G
> 
> On Tue, Mar 3, 2020 at 7:00 AM Therneau, Terry M., Ph.D. via R-devel <
> r-devel at r-project.org> wrote:
> 
>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>> windows, which
>> I don't use.
>> How do I track this down?
>> The test in question works fine on my Linux box.
>>
>> Terry
>>
>>
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Mar  3 22:48:10 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 4 Mar 2020 10:48:10 +1300
Subject: [Rd] survival bug?
In-Reply-To: <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
Message-ID: <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>

FWIW Microsoft provides evaluation version of Windows that can be easily installed using VirtualBox and runs for 180 days. One that I believe is the closest to the CRAN setup (Windows 2008) is:

https://www.microsoft.com/en-nz/download/details.aspx?id=11093

You just tell VB to setup a Windows 2008 VM then, select the downloaded ISO as CD-ROM drive and install from it. The installation is fairly easy and then you only have to download Rtools.exe and R from CRAN. I recommend picking a custom location for R that is painless to type, e.g C:\R. To make iteration easier, I also use a shared mount from my machine (e.g. ~/packages -> E:) so I can edit and build the package on my Mac and then just run c:\R\bin\R CMD INSTALL mypackage_0.1-0.tar.gz  in the Windows VM is the same directory (you need to install Guest Additions [see the VB menu] to enable shared directories - alternatively you can also just use SMB shares if you want).

Cheers,
Simon



> On 4/03/2020, at 10:02 AM, Gabriel Becker <gabembecker at gmail.com> wrote:
> 
> Hi Terry,
> 
> http://win-builder.r-project.org/ and the rhub build service (which can be
> invoked by the rhub package) allow on demand checks in windows
> environments, though for active debugging the iteration time can be quite
> painful.
> 
> If you have access, e.g., through your employer, to a windows license you
> should also be able to do use VMWare or VirtualBox (I can never remember
> which one I like more) to run windows and test that way. This will have
> some start up cost in effort but allows active testing and iteration.
> 
> Hope that helps,
> ~G
> 
> On Tue, Mar 3, 2020 at 7:00 AM Therneau, Terry M., Ph.D. via R-devel <
> r-devel at r-project.org> wrote:
> 
>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>> windows, which
>> I don't use.
>> How do I track this down?
>> The test in question works fine on my Linux box.
>> 
>> Terry
>> 
>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From therne@u @end|ng |rom m@yo@edu  Thu Mar  5 14:54:32 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 05 Mar 2020 07:54:32 -0600
Subject: [Rd] rounding change
Message-ID: <28fddd$dcg306@ironport10.mayo.edu>

This is a small heads up for package maintainers.?? Under the more recent R-devel, R CMD 
check turned up some changes in the *.out files.?? The simple demonstration is to type? 
"round(51/80, 3)", which gives .638 under the old and .637 under the new.?? (One of my 
coxph test cases has a concordance of exactly 51/80).

In this particular case 51/80 is exactly .63750000, but that value does not have an exact 
representation in base 2.? The line below would argue that the new version is correct, at 
least with respect to the internal representation.

 > print(51/80, digits = 20)
[1] 0.63749999999999995559

This is not a bug or problem, it just means that whichever version I put into my 
survival/tests/book6.Rout.save file, one of R-devel or R-current will flag an issue.



	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Thu Mar  5 17:39:08 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 05 Mar 2020 10:39:08 -0600
Subject: [Rd] survival bug? - solved
In-Reply-To: <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
 <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
Message-ID: <28fddd$dci1d4@ironport10.mayo.edu>

 ?I ended up finding the issue by a focused code review.

Once in the past, I had a version that would fail under one architecture but not another, 
in that case some help from Brian Ripley pointed me to the offending line of C code.?? 
That line read, but did not write, at an invalid memory location.?? Starting with the 
question of "what C routines have I added or modified most recently" along with where the 
fault appeared to occur in my test suite, I started reading C code and found one.?? 
Revised code passes tests on the winbuilder site.

For the curious, I had a line asking "is this patient id different than the last patient 
id" in the C routine underneath survcheck(); I'm making sure that patients don't go 
backwards in time. Essentially
 ?for (i=0; i< n; i) {
 ? ?? if (id[i] != id[i-1] )? { ...}

It is still a surprise to me that just LOOKING at this out of range element would cause a 
failure,? [i-1] never appears on the left hand side of any expressions in the ... chunk 
above. Nevertheless, it was an error. ? Que sera sera

A strong thanks to those who gave solid suggestions for bringing up a local copy of Windows.

Terry T

>>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>>> windows, which
>>> I don't use.
>>> How do I track this down?
>>> The test in question works fine on my Linux box.
>>>
>>> Terry
>>>
>>>
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Mar  5 21:41:24 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 5 Mar 2020 20:41:24 +0000 (UTC)
Subject: [Rd] survival bug? - solved
In-Reply-To: <28fddd$dci1d4@ironport10.mayo.edu>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
 <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
 <28fddd$dci1d4@ironport10.mayo.edu>
Message-ID: <987233612.5090612.1583440884314@mail.yahoo.com>

I _think_ the relevant section of the C standard is 6.5.6 Additive Operators Par 8, excerpted here:

> If both the pointer operand and the result point to elements 
> of the same array object, or one past the last element of the 
> array object, the evaluation shall not produce an overflow; 
> otherwise, **the behavior is undefined**.

This is from the [C11 draft][1], though I imagine has been part of the standard for a while.? So by doing id[-1], in this case the pointer operand is id, and the result is one element _before_ the array object, thus undefined behavior which is bad news.

I'm not an expert in these matters though.

[1]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf


On Thursday, March 5, 2020, 11:39:38 AM EST, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote: 





?I ended up finding the issue by a focused code review.

Once in the past, I had a version that would fail under one architecture but not another, 
in that case some help from Brian Ripley pointed me to the offending line of C code.?? 
That line read, but did not write, at an invalid memory location.?? Starting with the 
question of "what C routines have I added or modified most recently" along with where the 
fault appeared to occur in my test suite, I started reading C code and found one.?? 
Revised code passes tests on the winbuilder site.

For the curious, I had a line asking "is this patient id different than the last patient 
id" in the C routine underneath survcheck(); I'm making sure that patients don't go 
backwards in time. Essentially
?for (i=0; i< n; i) {
? ?? if (id[i] != id[i-1] )? { ...}

It is still a surprise to me that just LOOKING at this out of range element would cause a 
failure,? [i-1] never appears on the left hand side of any expressions in the ... chunk 
above. Nevertheless, it was an error. ? Que sera sera

A strong thanks to those who gave solid suggestions for bringing up a local copy of Windows.

Terry T

>>> My latest submission of survival3.1-10 to CRAN fails? a check, but only on
>>> windows, which
>>> I don't use.
>>> How do I track this down?
>>> The test in question works fine on my Linux box.
>>>
>>> Terry
>>>
>>>
>>>
>>>? ? ? ? [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel

>>>
>> ??? [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


??? [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Mar  5 23:18:33 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 5 Mar 2020 22:18:33 +0000 (UTC)
Subject: [Rd] findInterval Documentation Suggestion
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
Message-ID: <1675788134.5157075.1583446713973@mail.yahoo.com>

I've found over time that R documentation that comes off as terse at
first blush is usually revealed to be precise, concise, and complete
on close reading.? I'm sure this is also true of `?findInterval`, but
for whatever reason my brain simply refuses to extract meaning from it.

Part of the problem may be that we interact with the function via a
compressed form of the bounds of the intervals (only specify left bounds
for 2nd interval onwards), but the semantics are described mostly in
terms of the intervals themselves.? This requires indirections to map
the parameters to the concepts.

An alternative is to first describe what the function does directly in
terms of its inputs, and subsequent relate that to the intervals.? If I
understand correctly (in default mode) the function can be described as:

???? Given a vector of non-decreasing values 'vec', for each value in
???? 'x' return the highest position in 'vec' that corresponds to a
???? value less than or equal to that 'x' value, or zero if none are.
???? Equivalently, if the values in 'vec' are taken to be the closed
???? left-bounds of contiguous half-open intervals, return which of
???? those intervals each value of 'x' lies in.

Compared to the original:

???? Given a vector of non-decreasing breakpoints in ?vec?, find the
???? interval containing each element of ?x?; i.e., if ?i <-
???? findInterval(x,v)?, for each index ?j? in ?x? v[i[j]] <= x[j] <
???? v[i[j] + 1] where v[0] := - Inf, v[N+1] := + Inf, and ?N <-
???? length(v)?.? At the two boundaries, the returned index may differ
???? by 1, depending on the optional arguments ?rightmost.closed? and
???? ?all.inside?.

Obviously you would be right to question whether someone who claims not
to understand the documentation should venture to re-write it.
Nonetheless I attach a proposed alternate version in the hopes that
someone who clearly understand the original might use or adapt parts of it to
make `?findInterval` more accessible to those comprehension-challenged
like me.


Best,

Brodie

From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Mar  5 23:24:49 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 5 Mar 2020 22:24:49 +0000 (UTC)
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <1675788134.5157075.1583446713973@mail.yahoo.com>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
Message-ID: <1911691415.5169012.1583447089124@mail.yahoo.com>

Trying the attachment as .txt instead of Rd.


On Thursday, March 5, 2020, 5:20:25 PM EST, brodie gaslam via R-devel <r-devel at r-project.org> wrote: 

<snip>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: findInterval2.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200305/c3b22797/attachment.txt>

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Mar  6 09:40:57 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 6 Mar 2020 09:40:57 +0100
Subject: [Rd] survival bug? - solved
In-Reply-To: <28fddd$dci1d4@ironport10.mayo.edu>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
 <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
 <28fddd$dci1d4@ironport10.mayo.edu>
Message-ID: <a3dda934-fd30-c133-fd3d-e9392b98880a@gmail.com>

On 3/5/20 5:39 PM, Therneau, Terry M., Ph.D. via R-devel wrote:
>   ?I ended up finding the issue by a focused code review.
>
> Once in the past, I had a version that would fail under one architecture but not another,
> in that case some help from Brian Ripley pointed me to the offending line of C code.
> That line read, but did not write, at an invalid memory location.?? Starting with the
> question of "what C routines have I added or modified most recently" along with where the
> fault appeared to occur in my test suite, I started reading C code and found one.
> Revised code passes tests on the winbuilder site.
>
> For the curious, I had a line asking "is this patient id different than the last patient
> id" in the C routine underneath survcheck(); I'm making sure that patients don't go
> backwards in time. Essentially
>   ?for (i=0; i< n; i) {
>   ? ?? if (id[i] != id[i-1] )? { ...}
>
> It is still a surprise to me that just LOOKING at this out of range element would cause a
> failure,? [i-1] never appears on the left hand side of any expressions in the ... chunk
> above. Nevertheless, it was an error. ? Que sera sera

In principle out of bounds access to an array, even reading, may not 
only return any value that may be there, but cause a memory protection 
failure (the memory there is not accessible) or have some other impact. 
Reads from memory can also have side effects (other than crashing your 
process).

Tomas

>
> A strong thanks to those who gave solid suggestions for bringing up a local copy of Windows.
>
> Terry T
>
>>>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>>>> windows, which
>>>> I don't use.
>>>> How do I track this down?
>>>> The test in question works fine on my Linux box.
>>>>
>>>> Terry
>>>>
>>>>
>>>>
>>>>          [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>> 	[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar  6 14:56:51 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 6 Mar 2020 14:56:51 +0100
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <1675788134.5157075.1583446713973@mail.yahoo.com>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
Message-ID: <24162.22179.40324.212614@stat.math.ethz.ch>

>>>>> brodie gaslam via R-devel 
>>>>>     on Thu, 5 Mar 2020 22:18:33 +0000 (UTC) writes:

    > I've found over time that R documentation that comes off as terse at
    > first blush is usually revealed to be precise, concise, and complete
    > on close reading.? I'm sure this is also true of `?findInterval`, but
    > for whatever reason my brain simply refuses to extract meaning from it.

    > Part of the problem may be that we interact with the function via a
    > compressed form of the bounds of the intervals (only specify left bounds
    > for 2nd interval onwards), but the semantics are described mostly in
    > terms of the intervals themselves.? This requires indirections to map
    > the parameters to the concepts.

    > An alternative is to first describe what the function does directly in
    > terms of its inputs, and subsequent relate that to the intervals.? If I
    > understand correctly (in default mode) the function can be described as:

    > ???? Given a vector of non-decreasing values 'vec', for each value in
    > ???? 'x' return the highest position in 'vec' that corresponds to a
    > ???? value less than or equal to that 'x' value, or zero if none are.
    > ???? Equivalently, if the values in 'vec' are taken to be the closed
    > ???? left-bounds of contiguous half-open intervals, return which of
    > ???? those intervals each value of 'x' lies in.

    > Compared to the original:

    > ???? Given a vector of non-decreasing breakpoints in ?vec?, find the
    > ???? interval containing each element of ?x?; i.e., if ?i <-
    > ???? findInterval(x,v)?, for each index ?j? in ?x? v[i[j]] <= x[j] <
    > ???? v[i[j] + 1] where v[0] := - Inf, v[N+1] := + Inf, and ?N <-
    > ???? length(v)?.? At the two boundaries, the returned index may differ
    > ???? by 1, depending on the optional arguments ?rightmost.closed? and
    > ???? ?all.inside?.

Note that the  * -> LaTex -> PDF rendered version looks a bit
nicer.

  See lower part of page 206 of (the 33nn pages of)
  https://cran.r-project.org/doc/manuals/r-release/fullrefman.pdf
  
I wrote the function and that help page originally.  Of
course, I'm interested to hear how to improve the documentation.
However, the help pages make up the "Reference Manual", and so
-- as you mention initially -- should be precise and (mostly)
comprehensive.

For that reason, replacing the well defined precise
inequality-based definition by *much* less precise English prosa
is out of the question. 

Extending that very long first sentence
    "Given .... .... .... length(v)'.
by adding some helper words or other means may be fine and
indeed an improvement, .. so I'm happy for another try.

Martin

    > Obviously you would be right to question whether someone who claims not
    > to understand the documentation should venture to re-write it.
    > Nonetheless I attach a proposed alternate version in the hopes that
    > someone who clearly understand the original might use or adapt parts of it to
    > make `?findInterval` more accessible to those comprehension-challenged
    > like me.


    > Best,
    > Brodie
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Fri Mar  6 15:17:37 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Fri, 6 Mar 2020 14:17:37 +0000 (UTC)
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <24162.22179.40324.212614@stat.math.ethz.ch>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
 <24162.22179.40324.212614@stat.math.ethz.ch>
Message-ID: <1206418066.5458182.1583504257233@mail.yahoo.com>

 > On Friday, March 6, 2020, 8:56:54 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote: 

> Note that the? * -> LaTex -> PDF rendered version looks a bitnicer.

Ah yes, that does indeed look quite a bit nicer.

> I wrote the function and that help page originally.

And thank you for doing so. It is a wonderful function.
(0 sarcasm here).

> For that reason, replacing the well defined precise
> inequality-based definition by *much* less precise English prosa
> is out of the question.

I figured that might be an issue.? Would you be open to 
providing a prose translation, but putting that in the 
details? If so, it would be useful to get feedback on 
what parts of the prose I proposed are imprecise enough 
to be incorrect/incomplete for some corner case.

Finally, would it make sense to move this discussion to
bugzilla?

Best,

Brodie.


From m@rc_@chw@rtz @end|ng |rom me@com  Fri Mar  6 15:52:29 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Fri, 6 Mar 2020 09:52:29 -0500
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <1206418066.5458182.1583504257233@mail.yahoo.com>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
 <24162.22179.40324.212614@stat.math.ethz.ch>
 <1206418066.5458182.1583504257233@mail.yahoo.com>
Message-ID: <2BA47922-7178-4869-A494-B709CB97C3CF@me.com>


> On Mar 6, 2020, at 9:17 AM, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
> 
>> On Friday, March 6, 2020, 8:56:54 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote: 
> 
>> Note that the  * -> LaTex -> PDF rendered version looks a bitnicer.
> 
> Ah yes, that does indeed look quite a bit nicer.
> 
>> I wrote the function and that help page originally.
> 
> And thank you for doing so. It is a wonderful function.
> (0 sarcasm here).
> 
>> For that reason, replacing the well defined precise
>> inequality-based definition by *much* less precise English prosa
>> is out of the question.
> 
> I figured that might be an issue.  Would you be open to 
> providing a prose translation, but putting that in the 
> details? If so, it would be useful to get feedback on 
> what parts of the prose I proposed are imprecise enough 
> to be incorrect/incomplete for some corner case.
> 
> Finally, would it make sense to move this discussion to
> bugzilla?
> 
> Best,
> 
> Brodie.


Hi,

Just to put forth an alternative to modifying the existing, precise content that Martin wrote, in many cases, that content can be reasonably supplemented by the addition of specific examples and perhaps concise comments, that demonstrate what, otherwise, may be surprising behavior.

If Brodie can construct one or more such examples that might provide additional insights, then perhaps they can be considered for inclusion in the help file, such that meeting both goals of not compromising the language that Martin has contributed, while expanding comprehension, can be achieved.

Regards,

Marc Schwartz


From @zwj|08 @end|ng |rom gm@||@com  Tue Mar 10 08:22:13 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Tue, 10 Mar 2020 03:22:13 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
Message-ID: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>

Hi all,

Here is a bug(or feature?) that exists at least from R 2020-02-24
r77852 to 2020-03-09 r77919 on Window. Consider this example makefile in a
package
```






*test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
--slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
--vanilla --slave)$(info test1 is $(test1))$(info test2 is $(test2))$(info
test3 is $(test3))*
```

I have no problem running the file using GUN make or installing the package
on R 3.6, both give the same result.
```
*C:\Rtools\mingw_64\bin\mingw32-make.exe  *



*test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205 0.3922129
0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: *** No
targets.  Stop.*
*```*

However, on the devel version of R, it cannot recognize both the full and
short path of R and gives an error
```




*test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
name, or volume label syntax is incorrect.test2 isThe filename, directory
name, or volume label syntax is incorrect.test3 is*
```

I found this issue because my package needs to call R functions in the
makefile. The code is similar to:
```
*  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla --slave)*
```
Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result in the
same error as I mentioned above. I do not know whether this is intentional.
If so, what is the correct way to call R function in a makefile?

Best,
Jiefei

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Tue Mar 10 10:15:33 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Tue, 10 Mar 2020 05:15:33 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
Message-ID: <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>

  Oops, I think both of us forget to cite the r-devel channel.

Best,
Jiefei

On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:

> Thanks for your quick response, Tomas.
>
> Yes, this is a path issue, I think the problem is related to R, not the
> Rtools make. I built an example package for reproducing the problem:
> https://github.com/Jiefei-Wang/example
>
> Here is the version of my R and Rtools:
> The release R version:
> R version 3.6.2 (2019-12-12)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> The devel R version:
> R Under development (unstable) (2020-03-09 r77919)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> Rtools version 3.5.0.4
>
> Things become interesting after I did more tests. I originally thought
> this might be only related to the devel R, but it seems like the released
> version is also affected. Here is a summary of my test results using the
> example package:
>
> 1. command-line Rtools make: Success
> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
> 4. Rstudio running devtool::install: Success on both
>
> Now the problem becomes more intricate. I have no idea which one goes
> wrong. Here are the details of my test results, I hope it can be helpful:
>
> *Command line:*
> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f example-master/src/Makevars
> test1 is [1] 0.2039269 0.1454402 0.1578401
> test2 is [1] 0.1919521 0.9257183 0.2130247
> test3 is [1] 0.06255174 0.27555363 0.72737111
> mingw32-make: *** No targets.  Stop.
>
> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
> *** arch - x64
> test1 is [1] 0.1584299 0.9338829 0.9528810
> The filename, directory name, or volume label syntax is incorrect.
> test2 is
> The filename, directory name, or volume label syntax is incorrect.
> test3 is
>
>   3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL testPackage_1.0.tar.gz
> *** arch - x64
> test1 is [1] 0.2668522 0.9246174 0.0184601
> The filename, directory name, or volume label syntax is incorrect.
> test2 is
> The filename, directory name, or volume label syntax is incorrect.
> test3 is
>
> *R studio:*
> 1. R3.6:  Clicking the install button
> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
> test1 is [1] 0.1583112 0.6631700 0.2265564
> test2 is [1] 0.6999799 0.5205237 0.8264029
> test3 is [1] 0.3591798 0.1767392 0.2869383
>
> 2.  R4.0: Clicking the install button
> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> * installing to library 'C:/Program Files/R/R-devel/library'
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
> test1 is [1] 0.2091070 0.5411138 0.1051517
> The filename, directory name, or volume label syntax is incorrect.
> test2 is
> The filename, directory name, or volume label syntax is incorrect.
> test3 is
>
> 3. R3.6:  devtools::load_all(".")
> devtools::load_all(".")
> Loading testPackage
> Re-compiling testPackage
> -  installing *source* package 'testPackage' ... (364ms)
>    ** using staged installation
>    ** libs
>    test1 is [1] 0.93251741 0.03975758 0.57824150
>    test2 is [1] 0.8681301 0.4801464 0.9112827
>    test3 is [1] 0.430470791 0.008393394 0.341484128
>    test1 is [1] 0.68865768 0.05354531 0.91665539
>    test2 is [1] 0.19473846 0.60293655 0.09421961
>    test3 is [1] 0.90653581 0.12456034 0.09526018
>
> 4. R4.0: devtools::load_all(".")
> Loading testPackage
> Re-compiling testPackage
> ?  installing *source* package 'testPackage' ... (357ms)
>    ** using staged installation
>    ** libs
>    test1 is [1] 0.00545376 0.30696231 0.68752312
>    test2 is [1] 0.1059506 0.7506894 0.8607918
>    test3 is [1] 0.5321226 0.6985332 0.7343680
>    test1 is [1] 0.7722255 0.3881171 0.5611294
>    test2 is [1] 0.5443175 0.8418503 0.3479382
>    test3 is [1] 0.7400557 0.3322797 0.6818899
>
>
> Cheers,
> Jiefei
>
> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>> Hi Jiefei,
>>
>> thanks for your report, but I don't understand from you current
>> description what the problem is. Are you saying that "make" shipped with
>> some recent Rtools is not accepting some forms of PATHs? But, which
>> Rtools then, which version of make, how do you run it?
>>
>> Why are you referring to "R CMD INSTALL" when none of your examples use
>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot you
>> just run "make" directly?
>>
>> Or are you reporting a bug inside R itself? (you are referring to
>> specific svn revisions of R). But how could R be involved in this, is it
>> in how it executes make?
>>
>> Please provide a minimal but complete reproducible example, please
>> provide somehow test files that can be used.  Perhaps if you try to do a
>> little bit of debugging on your end, it might help you to narrow down
>> the problem to the point that it will be then easier to understand it.
>> For example: if the problem is in "make", it should be possible to
>> trigger it directly from the command line, then you could easily try
>> with different versions of make and report which ones are the problem..
>>
>> Thanks
>> Tomas
>>
>>
>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>> > Hi all,
>> >
>> > Here is a bug(or feature?) that exists at least from R 2020-02-24
>> > r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>> in a
>> > package
>> > ```
>> >
>> >
>> >
>> >
>> >
>> >
>> > *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>> > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>> > --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>> > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>> $(test2))$(info
>> > test3 is $(test3))*
>> > ```
>> >
>> > I have no problem running the file using GUN make or installing the
>> package
>> > on R 3.6, both give the same result.
>> > ```
>> > *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>> >
>> >
>> >
>> > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>> 0.3922129
>> > 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: *** No
>> > targets.  Stop.*
>> > *```*
>> >
>> > However, on the devel version of R, it cannot recognize both the full
>> and
>> > short path of R and gives an error
>> > ```
>> >
>> >
>> >
>> >
>> > *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>> > name, or volume label syntax is incorrect.test2 isThe filename,
>> directory
>> > name, or volume label syntax is incorrect.test3 is*
>> > ```
>> >
>> > I found this issue because my package needs to call R functions in the
>> > makefile. The code is similar to:
>> > ```
>> > *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla --slave)*
>> > ```
>> > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result in
>> the
>> > same error as I mentioned above. I do not know whether this is
>> intentional.
>> > If so, what is the correct way to call R function in a makefile?
>> >
>> > Best,
>> > Jiefei
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>

	[[alternative HTML version deleted]]


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Tue Mar 10 17:53:16 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Tue, 10 Mar 2020 16:53:16 +0000 (UTC)
Subject: [Rd] tryCatch without handler in QC.R
References: <1086438820.1310703.1583859196072.ref@mail.yahoo.com>
Message-ID: <1086438820.1310703.1583859196072@mail.yahoo.com>

The following is among those added by r77792 to src/library/tools/R/QC.R in R devel.
                bad <- tryCatch(check_url_db(udb))

The 'tryCatch' has no handler. It does nothing. Error would still stop execution.


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Tue Mar 10 18:14:52 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Tue, 10 Mar 2020 17:14:52 +0000 (UTC)
Subject: [Rd] tryCatch without handler in QC.R
In-Reply-To: <1086438820.1310703.1583859196072@mail.yahoo.com>
References: <1086438820.1310703.1583859196072.ref@mail.yahoo.com>
 <1086438820.1310703.1583859196072@mail.yahoo.com>
Message-ID: <1199343571.1828497.1583860492779@mail.yahoo.com>

 Sorry, it is already fixed. Currently, it is as follows.
 bad <- tryCatch(check_url_db(udb), error = identity)


On Tuesday, 10 March 2020, 11:53:16 pm GMT+7, <suharto_anggono at yahoo.com> wrote:


The following is among those added by r77792 to src/library/tools/R/QC.R in R devel.
? ? ? ? ? ? ? ? bad <- tryCatch(check_url_db(udb))

The 'tryCatch' has no handler. It does nothing. Error would still stop execution.  
	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Mar 11 13:57:12 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 11 Mar 2020 13:57:12 +0100
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
Message-ID: <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>


Thanks, Jiefei, unfortunately your example does not work on my system, 
and also it is far from minimal. The error message you are getting is 
from Windows and could be caused for example by accidental quoting of 
the path using single quotes.

Issues with RStudio or devtools would have to be discussed in their 
mailing lists/with their authors, but my guess is that the problem is in 
your local configuration, and after all you need it to work with the 
base R CMD INSTALL anyway. There is not much wrong R could do here, it 
just sets R_HOME and runs "make".

For example this works for me, but some closer alternations of your code 
work as well:

test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
all:
 ??????? echo "test1 is $(test1)"
 ??????? echo "R_HOME is $(R_HOME)"

I would recommend that you try to narrow down your example so that it is 
really minimal. Use R_HOME, not hard-coded paths, as that is what you 
would use in reality anyway. Print R_HOME and check it is valid. If the 
problem persists, find out why it works when invoked from the command 
line but not from R CMD INSTALL.

Best
Tomas

On 3/10/20 10:15 AM, Wang Jiefei wrote:
> ? Oops, I think both of us forget to cite the r-devel channel.
>
> Best,
> Jiefei
>
> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com 
> <mailto:szwjf08 at gmail.com>> wrote:
>
>     Thanks for your quick response, Tomas.
>
>     Yes, this is a path issue, I think the problem is related to R,
>     not the Rtools make. I built an example package for reproducing
>     the problem: https://github.com/Jiefei-Wang/example
>
>     Here is the version of my R and Rtools:
>     The release R version:
>     R version 3.6.2 (2019-12-12)
>     Platform: x86_64-w64-mingw32/x64 (64-bit)
>     Running under: Windows 10 x64 (build 18362)
>
>     The devel R version:
>     R Under development (unstable) (2020-03-09 r77919)
>     Platform: x86_64-w64-mingw32/x64 (64-bit)
>     Running under: Windows 10 x64 (build 18362)
>
>     Rtools version 3.5.0.4
>
>     Things become interesting?after I did more tests. I originally
>     thought this might be only related to the devel R, but it seems
>     like the released version is also affected. Here is a summary of
>     my test results using the example package:
>
>     1. command-line Rtools make: Success
>     2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>     3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>     4. Rstudio running devtool::install: Success on both
>
>     Now the problem becomes more intricate. I have no idea which one
>     goes wrong. Here are the details of my test results, I hope it can
>     be helpful:
>
>     *Command line:*
>     1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>     example-master/src/Makevars
>     test1 is [1] 0.2039269 0.1454402 0.1578401
>     test2 is [1] 0.1919521 0.9257183 0.2130247
>     test3 is [1] 0.06255174 0.27555363 0.72737111
>     mingw32-make: *** No targets.? Stop.
>
>     2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL
>     testPackage_1.0.tar.gz
>     *** arch - x64
>     test1 is [1] 0.1584299 0.9338829 0.9528810
>     The filename, directory name, or volume label syntax is incorrect.
>     test2 is
>     The filename, directory name, or volume label syntax is incorrect.
>     test3 is
>
>     ? 3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
>     testPackage_1.0.tar.gz
>     *** arch - x64
>     test1 is [1] 0.2668522 0.9246174 0.0184601
>     The filename, directory name, or volume label syntax is incorrect.
>     test2 is
>     The filename, directory name, or volume label syntax is incorrect.
>     test3 is
>
>     *R studio:*
>     1. R3.6: Clicking the install button
>     ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>     * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>     * installing *source* package 'testPackage' ...
>     ** using staged installation
>     ** libs
>     test1 is [1] 0.1583112 0.6631700 0.2265564
>     test2 is [1] 0.6999799 0.5205237 0.8264029
>     test3 is [1] 0.3591798 0.1767392 0.2869383
>
>     2.? R4.0: Clicking the install button
>     Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>     * installing to library 'C:/Program Files/R/R-devel/library'
>     * installing *source* package 'testPackage' ...
>     ** using staged installation
>     ** libs
>     test1 is [1] 0.2091070 0.5411138 0.1051517
>     The filename, directory name, or volume label syntax is incorrect.
>     test2 is
>     The filename, directory name, or volume label syntax is incorrect.
>     test3 is
>
>     3. R3.6:? devtools::load_all(".")
>     devtools::load_all(".")
>     Loading testPackage
>     Re-compiling testPackage
>     - ?installing *source* package 'testPackage' ... (364ms)
>     ? ?** using staged installation
>     ? ?** libs
>     ? ?test1 is [1] 0.93251741 0.03975758 0.57824150
>     ? ?test2 is [1] 0.8681301 0.4801464 0.9112827
>     ? ?test3 is [1] 0.430470791 0.008393394 0.341484128
>     ? ?test1 is [1] 0.68865768 0.05354531 0.91665539
>     ? ?test2 is [1] 0.19473846 0.60293655 0.09421961
>     ? ?test3 is [1] 0.90653581 0.12456034 0.09526018
>
>     4. R4.0: devtools::load_all(".")
>     Loading testPackage
>     Re-compiling testPackage
>     ? ?installing *source* package 'testPackage' ... (357ms)
>     ? ?** using staged installation
>     ? ?** libs
>     ? ?test1 is [1] 0.00545376 0.30696231 0.68752312
>     ? ?test2 is [1] 0.1059506 0.7506894 0.8607918
>     ? ?test3 is [1] 0.5321226 0.6985332 0.7343680
>     ? ?test1 is [1] 0.7722255 0.3881171 0.5611294
>     ? ?test2 is [1] 0.5443175 0.8418503 0.3479382
>     ? ?test3 is [1] 0.7400557 0.3322797 0.6818899
>
>
>     Cheers,
>     Jiefei
>
>     On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera
>     <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>         Hi Jiefei,
>
>         thanks for your report, but I don't understand from you current
>         description what the problem is. Are you saying that "make"
>         shipped with
>         some recent Rtools is not accepting some forms of PATHs? But,
>         which
>         Rtools then, which version of make, how do you run it?
>
>         Why are you referring to "R CMD INSTALL" when none of your
>         examples use
>         it? Is "R CMD INSTALL" necessary for reproducing the problem,
>         cannot you
>         just run "make" directly?
>
>         Or are you reporting a bug inside R itself? (you are referring to
>         specific svn revisions of R). But how could R be involved in
>         this, is it
>         in how it executes make?
>
>         Please provide a minimal but complete reproducible example,
>         please
>         provide somehow test files that can be used.? Perhaps if you
>         try to do a
>         little bit of debugging on your end, it might help you to
>         narrow down
>         the problem to the point that it will be then easier to
>         understand it.
>         For example: if the problem is in "make", it should be
>         possible to
>         trigger it directly from the command line, then you could
>         easily try
>         with different versions of make and report which ones are the
>         problem..
>
>         Thanks
>         Tomas
>
>
>         On 3/10/20 8:22 AM, Wang Jiefei wrote:
>         > Hi all,
>         >
>         > Here is a bug(or feature?) that exists at least from R
>         2020-02-24
>         > r77852 to 2020-03-09 r77919 on Window. Consider this example
>         makefile in a
>         > package
>         > ```
>         >
>         >
>         >
>         >
>         >
>         >
>         > *test1=$(shell echo 'runif(3)'|R --vanilla
>         --slave)test2=$(shell echo
>         > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>         > --slave)test3=$(shell echo
>         'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>         > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>         $(test2))$(info
>         > test3 is $(test3))*
>         > ```
>         >
>         > I have no problem running the file using GUN make or
>         installing the package
>         > on R 3.6, both give the same result.
>         > ```
>         > *C:\Rtools\mingw_64\bin\mingw32-make.exe? *
>         >
>         >
>         >
>         > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1]
>         0.9904205 0.3922129
>         > 0.5970083test3 is [1] 0.3469528 0.1993838
>         0.8434841mingw32-make: *** No
>         > targets.? Stop.*
>         > *```*
>         >
>         > However, on the devel version of R, it cannot recognize both
>         the full and
>         > short path of R and gives an error
>         > ```
>         >
>         >
>         >
>         >
>         > *test1 is? [1] 0.42686376 0.84126831 0.09538047The filename,
>         directory
>         > name, or volume label syntax is incorrect.test2 isThe
>         filename, directory
>         > name, or volume label syntax is incorrect.test3 is*
>         > ```
>         >
>         > I found this issue because my package needs to call R
>         functions in the
>         > makefile. The code is similar to:
>         > ```
>         > *? myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R"
>         --vanilla --slave)*
>         > ```
>         > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will
>         result in the
>         > same error as I mentioned above. I do not know whether this
>         is intentional.
>         > If so, what is the correct way to call R function in a makefile?
>         >
>         > Best,
>         > Jiefei
>         >
>         >? ? ? ?[[alternative HTML version deleted]]
>         >
>         > ______________________________________________
>         > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing
>         list
>         > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Mar 11 14:26:54 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Wed, 11 Mar 2020 09:26:54 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
Message-ID: <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>

Thanks, Tomas. I took your suggestion and change the make file to

test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')

all: testPackage.dll
    echo "test1 is $(test1)"
    echo "R_HOME is $(R_HOME)"

However, R CMD INSTALL still gives me the same error:

> R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
Files/R/R-devel/library'
* installing *source* package 'testPackage' ...
** using staged installation
** libs

*** arch - i386
The filename, directory name, or volume label syntax is incorrect.
c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
-DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
-I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
 -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
-DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
-I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
 -mfpmath=sse -msse2 -c example.cpp -o example.o
c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
testPackage.dll tmp.def RcppExports.o example.o
-LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
-LC:/projects/BUILD/R-source-win32/extsoft/lib
-LC:/PROGRA~1/R/R-devel/bin/i386 -lR
echo "test1 is "
test1 is
echo "R_HOME is C:/PROGRA~1/R/R-devel"
installing to C:/Program
Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386


I have no idea how to make the example even more minimal for there is
literally nothing in the package now. Like you said if R just sets R_HOME
and runs "make", I do not understand why it cannot find R in this case for
R_HOME seems correct to me. I think there are some other things behind R
CMD INSTALL but my poor knowledge does not allow me to see them...Any help
will be appreciated.


Best,
Jiefei


On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> Thanks, Jiefei, unfortunately your example does not work on my system, and
> also it is far from minimal. The error message you are getting is from
> Windows and could be caused for example by accidental quoting of the path
> using single quotes.
>
> Issues with RStudio or devtools would have to be discussed in their
> mailing lists/with their authors, but my guess is that the problem is in
> your local configuration, and after all you need it to work with the base R
> CMD INSTALL anyway. There is not much wrong R could do here, it just sets
> R_HOME and runs "make".
>
> For example this works for me, but some closer alternations of your code
> work as well:
>
> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
> all:
>         echo "test1 is $(test1)"
>         echo "R_HOME is $(R_HOME)"
>
> I would recommend that you try to narrow down your example so that it is
> really minimal. Use R_HOME, not hard-coded paths, as that is what you would
> use in reality anyway. Print R_HOME and check it is valid. If the problem
> persists, find out why it works when invoked from the command line but not
> from R CMD INSTALL.
>
> Best
> Tomas
>
> On 3/10/20 10:15 AM, Wang Jiefei wrote:
>
>   Oops, I think both of us forget to cite the r-devel channel.
>
> Best,
> Jiefei
>
> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>
>> Thanks for your quick response, Tomas.
>>
>> Yes, this is a path issue, I think the problem is related to R, not the
>> Rtools make. I built an example package for reproducing the problem:
>> https://github.com/Jiefei-Wang/example
>>
>> Here is the version of my R and Rtools:
>> The release R version:
>> R version 3.6.2 (2019-12-12)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18362)
>>
>> The devel R version:
>> R Under development (unstable) (2020-03-09 r77919)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18362)
>>
>> Rtools version 3.5.0.4
>>
>> Things become interesting after I did more tests. I originally thought
>> this might be only related to the devel R, but it seems like the released
>> version is also affected. Here is a summary of my test results using the
>> example package:
>>
>> 1. command-line Rtools make: Success
>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>> 4. Rstudio running devtool::install: Success on both
>>
>> Now the problem becomes more intricate. I have no idea which one goes
>> wrong. Here are the details of my test results, I hope it can be helpful:
>>
>> *Command line:*
>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>> example-master/src/Makevars
>> test1 is [1] 0.2039269 0.1454402 0.1578401
>> test2 is [1] 0.1919521 0.9257183 0.2130247
>> test3 is [1] 0.06255174 0.27555363 0.72737111
>> mingw32-make: *** No targets.  Stop.
>>
>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>> *** arch - x64
>> test1 is [1] 0.1584299 0.9338829 0.9528810
>> The filename, directory name, or volume label syntax is incorrect.
>> test2 is
>> The filename, directory name, or volume label syntax is incorrect.
>> test3 is
>>
>>   3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>> *** arch - x64
>> test1 is [1] 0.2668522 0.9246174 0.0184601
>> The filename, directory name, or volume label syntax is incorrect.
>> test2 is
>> The filename, directory name, or volume label syntax is incorrect.
>> test3 is
>>
>> *R studio:*
>> 1. R3.6:  Clicking the install button
>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>> * installing *source* package 'testPackage' ...
>> ** using staged installation
>> ** libs
>> test1 is [1] 0.1583112 0.6631700 0.2265564
>> test2 is [1] 0.6999799 0.5205237 0.8264029
>> test3 is [1] 0.3591798 0.1767392 0.2869383
>>
>> 2.  R4.0: Clicking the install button
>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>> * installing to library 'C:/Program Files/R/R-devel/library'
>> * installing *source* package 'testPackage' ...
>> ** using staged installation
>> ** libs
>> test1 is [1] 0.2091070 0.5411138 0.1051517
>> The filename, directory name, or volume label syntax is incorrect.
>> test2 is
>> The filename, directory name, or volume label syntax is incorrect.
>> test3 is
>>
>> 3. R3.6:  devtools::load_all(".")
>> devtools::load_all(".")
>> Loading testPackage
>> Re-compiling testPackage
>> -  installing *source* package 'testPackage' ... (364ms)
>>    ** using staged installation
>>    ** libs
>>    test1 is [1] 0.93251741 0.03975758 0.57824150
>>    test2 is [1] 0.8681301 0.4801464 0.9112827
>>    test3 is [1] 0.430470791 0.008393394 0.341484128
>>    test1 is [1] 0.68865768 0.05354531 0.91665539
>>    test2 is [1] 0.19473846 0.60293655 0.09421961
>>    test3 is [1] 0.90653581 0.12456034 0.09526018
>>
>> 4. R4.0: devtools::load_all(".")
>> Loading testPackage
>> Re-compiling testPackage
>> ?  installing *source* package 'testPackage' ... (357ms)
>>    ** using staged installation
>>    ** libs
>>    test1 is [1] 0.00545376 0.30696231 0.68752312
>>    test2 is [1] 0.1059506 0.7506894 0.8607918
>>    test3 is [1] 0.5321226 0.6985332 0.7343680
>>    test1 is [1] 0.7722255 0.3881171 0.5611294
>>    test2 is [1] 0.5443175 0.8418503 0.3479382
>>    test3 is [1] 0.7400557 0.3322797 0.6818899
>>
>>
>> Cheers,
>> Jiefei
>>
>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>> Hi Jiefei,
>>>
>>> thanks for your report, but I don't understand from you current
>>> description what the problem is. Are you saying that "make" shipped with
>>> some recent Rtools is not accepting some forms of PATHs? But, which
>>> Rtools then, which version of make, how do you run it?
>>>
>>> Why are you referring to "R CMD INSTALL" when none of your examples use
>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot you
>>> just run "make" directly?
>>>
>>> Or are you reporting a bug inside R itself? (you are referring to
>>> specific svn revisions of R). But how could R be involved in this, is it
>>> in how it executes make?
>>>
>>> Please provide a minimal but complete reproducible example, please
>>> provide somehow test files that can be used.  Perhaps if you try to do a
>>> little bit of debugging on your end, it might help you to narrow down
>>> the problem to the point that it will be then easier to understand it.
>>> For example: if the problem is in "make", it should be possible to
>>> trigger it directly from the command line, then you could easily try
>>> with different versions of make and report which ones are the problem..
>>>
>>> Thanks
>>> Tomas
>>>
>>>
>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>>> > Hi all,
>>> >
>>> > Here is a bug(or feature?) that exists at least from R 2020-02-24
>>> > r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>>> in a
>>> > package
>>> > ```
>>> >
>>> >
>>> >
>>> >
>>> >
>>> >
>>> > *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>>> > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>>> > --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>>> > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>>> $(test2))$(info
>>> > test3 is $(test3))*
>>> > ```
>>> >
>>> > I have no problem running the file using GUN make or installing the
>>> package
>>> > on R 3.6, both give the same result.
>>> > ```
>>> > *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>>> >
>>> >
>>> >
>>> > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>>> 0.3922129
>>> > 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: *** No
>>> > targets.  Stop.*
>>> > *```*
>>> >
>>> > However, on the devel version of R, it cannot recognize both the full
>>> and
>>> > short path of R and gives an error
>>> > ```
>>> >
>>> >
>>> >
>>> >
>>> > *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>>> > name, or volume label syntax is incorrect.test2 isThe filename,
>>> directory
>>> > name, or volume label syntax is incorrect.test3 is*
>>> > ```
>>> >
>>> > I found this issue because my package needs to call R functions in the
>>> > makefile. The code is similar to:
>>> > ```
>>> > *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
>>> --slave)*
>>> > ```
>>> > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result in
>>> the
>>> > same error as I mentioned above. I do not know whether this is
>>> intentional.
>>> > If so, what is the correct way to call R function in a makefile?
>>> >
>>> > Best,
>>> > Jiefei
>>> >
>>> >       [[alternative HTML version deleted]]
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>
>>>
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Mar 11 16:33:20 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Wed, 11 Mar 2020 11:33:20 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
 <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>
 <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
Message-ID: <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>

Thanks a lot for your suggestions. I see what you mean. I have removed all
unnecessary files and dependences on https://github.com/Jiefei-Wang/example,
but still no luck. I've tried to install the package as a user, not admin,
but I got the same error. Also, I apologize for spamming the mail list. I
will keep my reply as neat as possible.

Martin has suggested checking the encoding of the file and locale in the
session info, so here is this missing information: The makefile is encoded
in UTF-8, and the locale is:

[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

That is where I am stuck, any help would be appreciated.

Best,
Jiefei



On Wed, Mar 11, 2020 at 9:56 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 3/11/20 2:26 PM, Wang Jiefei wrote:
>
> Thanks, Tomas. I took your suggestion and change the make file to
>
> test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>
> all: testPackage.dll
>     echo "test1 is $(test1)"
>     echo "R_HOME is $(R_HOME)"
>
> However, R CMD INSTALL still gives me the same error:
>
> > R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
> Files/R/R-devel/library'
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
>
> *** arch - i386
> The filename, directory name, or volume label syntax is incorrect.
> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>  -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>  -mfpmath=sse -msse2 -c example.cpp -o example.o
> c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
> testPackage.dll tmp.def RcppExports.o example.o
> -LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
> -LC:/projects/BUILD/R-source-win32/extsoft/lib
> -LC:/PROGRA~1/R/R-devel/bin/i386 -lR
> echo "test1 is "
> test1 is
> echo "R_HOME is C:/PROGRA~1/R/R-devel"
> installing to C:/Program
> Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386
>
>
> I have no idea how to make the example even more minimal for there is
> literally nothing in the package now. Like you said if R just sets R_HOME
> and runs "make", I do not understand why it cannot find R in this case for
> R_HOME seems correct to me. I think there are some other things behind R
> CMD INSTALL but my poor knowledge does not allow me to see them...Any help
> will be appreciated.
>
> Please lets not spam the whole list with this any more - this is also why
> I didn't add R-devel to cc originally. The makefile may be minimal, but the
> example package is not - you have Rcpp dependency there, two C source
> files, some R Studio specific thing (an .Rproj file at least). Maybe it is
> not related, but if you want other to help you, it would be nice to spend
> some of your time reducing it anyway.
>
> That test1 is empty means that executing R has failed. You need to find
> out why.
>
> I see that you are installing into C:/Program Files/R/R-devel/library.
> Normally that directory should not be writeable. Are you running this as
> Administrator? In principle this could be related, but better to find out
> directly why executing R is failing.
>
> Best
> Tomas
>
>
>
>
> Best,
> Jiefei
>
>
> On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>>
>> Thanks, Jiefei, unfortunately your example does not work on my system,
>> and also it is far from minimal. The error message you are getting is from
>> Windows and could be caused for example by accidental quoting of the path
>> using single quotes.
>>
>> Issues with RStudio or devtools would have to be discussed in their
>> mailing lists/with their authors, but my guess is that the problem is in
>> your local configuration, and after all you need it to work with the base R
>> CMD INSTALL anyway. There is not much wrong R could do here, it just sets
>> R_HOME and runs "make".
>>
>> For example this works for me, but some closer alternations of your code
>> work as well:
>>
>> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>> all:
>>         echo "test1 is $(test1)"
>>         echo "R_HOME is $(R_HOME)"
>>
>> I would recommend that you try to narrow down your example so that it is
>> really minimal. Use R_HOME, not hard-coded paths, as that is what you would
>> use in reality anyway. Print R_HOME and check it is valid. If the problem
>> persists, find out why it works when invoked from the command line but not
>> from R CMD INSTALL.
>>
>> Best
>> Tomas
>>
>> On 3/10/20 10:15 AM, Wang Jiefei wrote:
>>
>>   Oops, I think both of us forget to cite the r-devel channel.
>>
>> Best,
>> Jiefei
>>
>> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>
>>> Thanks for your quick response, Tomas.
>>>
>>> Yes, this is a path issue, I think the problem is related to R, not the
>>> Rtools make. I built an example package for reproducing the problem:
>>> https://github.com/Jiefei-Wang/example
>>>
>>> Here is the version of my R and Rtools:
>>> The release R version:
>>> R version 3.6.2 (2019-12-12)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> The devel R version:
>>> R Under development (unstable) (2020-03-09 r77919)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> Rtools version 3.5.0.4
>>>
>>> Things become interesting after I did more tests. I originally thought
>>> this might be only related to the devel R, but it seems like the released
>>> version is also affected. Here is a summary of my test results using the
>>> example package:
>>>
>>> 1. command-line Rtools make: Success
>>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>>> 4. Rstudio running devtool::install: Success on both
>>>
>>> Now the problem becomes more intricate. I have no idea which one goes
>>> wrong. Here are the details of my test results, I hope it can be helpful:
>>>
>>> *Command line:*
>>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>>> example-master/src/Makevars
>>> test1 is [1] 0.2039269 0.1454402 0.1578401
>>> test2 is [1] 0.1919521 0.9257183 0.2130247
>>> test3 is [1] 0.06255174 0.27555363 0.72737111
>>> mingw32-make: *** No targets.  Stop.
>>>
>>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>>> *** arch - x64
>>> test1 is [1] 0.1584299 0.9338829 0.9528810
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test2 is
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test3 is
>>>
>>>   3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
>>> testPackage_1.0.tar.gz
>>> *** arch - x64
>>> test1 is [1] 0.2668522 0.9246174 0.0184601
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test2 is
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test3 is
>>>
>>> *R studio:*
>>> 1. R3.6:  Clicking the install button
>>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>>> * installing *source* package 'testPackage' ...
>>> ** using staged installation
>>> ** libs
>>> test1 is [1] 0.1583112 0.6631700 0.2265564
>>> test2 is [1] 0.6999799 0.5205237 0.8264029
>>> test3 is [1] 0.3591798 0.1767392 0.2869383
>>>
>>> 2.  R4.0: Clicking the install button
>>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>> * installing to library 'C:/Program Files/R/R-devel/library'
>>> * installing *source* package 'testPackage' ...
>>> ** using staged installation
>>> ** libs
>>> test1 is [1] 0.2091070 0.5411138 0.1051517
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test2 is
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test3 is
>>>
>>> 3. R3.6:  devtools::load_all(".")
>>> devtools::load_all(".")
>>> Loading testPackage
>>> Re-compiling testPackage
>>> -  installing *source* package 'testPackage' ... (364ms)
>>>    ** using staged installation
>>>    ** libs
>>>    test1 is [1] 0.93251741 0.03975758 0.57824150
>>>    test2 is [1] 0.8681301 0.4801464 0.9112827
>>>    test3 is [1] 0.430470791 0.008393394 0.341484128
>>>    test1 is [1] 0.68865768 0.05354531 0.91665539
>>>    test2 is [1] 0.19473846 0.60293655 0.09421961
>>>    test3 is [1] 0.90653581 0.12456034 0.09526018
>>>
>>> 4. R4.0: devtools::load_all(".")
>>> Loading testPackage
>>> Re-compiling testPackage
>>> ?  installing *source* package 'testPackage' ... (357ms)
>>>    ** using staged installation
>>>    ** libs
>>>    test1 is [1] 0.00545376 0.30696231 0.68752312
>>>    test2 is [1] 0.1059506 0.7506894 0.8607918
>>>    test3 is [1] 0.5321226 0.6985332 0.7343680
>>>    test1 is [1] 0.7722255 0.3881171 0.5611294
>>>    test2 is [1] 0.5443175 0.8418503 0.3479382
>>>    test3 is [1] 0.7400557 0.3322797 0.6818899
>>>
>>>
>>> Cheers,
>>> Jiefei
>>>
>>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>>> wrote:
>>>
>>>> Hi Jiefei,
>>>>
>>>> thanks for your report, but I don't understand from you current
>>>> description what the problem is. Are you saying that "make" shipped
>>>> with
>>>> some recent Rtools is not accepting some forms of PATHs? But, which
>>>> Rtools then, which version of make, how do you run it?
>>>>
>>>> Why are you referring to "R CMD INSTALL" when none of your examples use
>>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot
>>>> you
>>>> just run "make" directly?
>>>>
>>>> Or are you reporting a bug inside R itself? (you are referring to
>>>> specific svn revisions of R). But how could R be involved in this, is
>>>> it
>>>> in how it executes make?
>>>>
>>>> Please provide a minimal but complete reproducible example, please
>>>> provide somehow test files that can be used.  Perhaps if you try to do
>>>> a
>>>> little bit of debugging on your end, it might help you to narrow down
>>>> the problem to the point that it will be then easier to understand it.
>>>> For example: if the problem is in "make", it should be possible to
>>>> trigger it directly from the command line, then you could easily try
>>>> with different versions of make and report which ones are the problem..
>>>>
>>>> Thanks
>>>> Tomas
>>>>
>>>>
>>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>>>> > Hi all,
>>>> >
>>>> > Here is a bug(or feature?) that exists at least from R 2020-02-24
>>>> > r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>>>> in a
>>>> > package
>>>> > ```
>>>> >
>>>> >
>>>> >
>>>> >
>>>> >
>>>> >
>>>> > *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>>>> > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>>>> > --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>>>> > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>>>> $(test2))$(info
>>>> > test3 is $(test3))*
>>>> > ```
>>>> >
>>>> > I have no problem running the file using GUN make or installing the
>>>> package
>>>> > on R 3.6, both give the same result.
>>>> > ```
>>>> > *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>>>> >
>>>> >
>>>> >
>>>> > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>>>> 0.3922129
>>>> > 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: ***
>>>> No
>>>> > targets.  Stop.*
>>>> > *```*
>>>> >
>>>> > However, on the devel version of R, it cannot recognize both the full
>>>> and
>>>> > short path of R and gives an error
>>>> > ```
>>>> >
>>>> >
>>>> >
>>>> >
>>>> > *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>>>> > name, or volume label syntax is incorrect.test2 isThe filename,
>>>> directory
>>>> > name, or volume label syntax is incorrect.test3 is*
>>>> > ```
>>>> >
>>>> > I found this issue because my package needs to call R functions in the
>>>> > makefile. The code is similar to:
>>>> > ```
>>>> > *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
>>>> --slave)*
>>>> > ```
>>>> > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result
>>>> in the
>>>> > same error as I mentioned above. I do not know whether this is
>>>> intentional.
>>>> > If so, what is the correct way to call R function in a makefile?
>>>> >
>>>> > Best,
>>>> > Jiefei
>>>> >
>>>> >       [[alternative HTML version deleted]]
>>>> >
>>>> > ______________________________________________
>>>> > R-devel at r-project.org mailing list
>>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>>
>>>>
>>
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Wed Mar 11 20:04:12 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 11 Mar 2020 12:04:12 -0700
Subject: [Rd] rounding change
In-Reply-To: <28fddd$dcg306@ironport10.mayo.edu>
References: <28fddd$dcg306@ironport10.mayo.edu>
Message-ID: <a9eda0a3-4cfc-5c77-5d9a-36e46a6157c1@fredhutch.org>

Thanks for the heads up. The new result for round(51/80, digits=3) is 
also consistent with sprintf("%.3f", 51/80), format(51/80, digits=3), 
print(51/80, digits=3), and with the sprintf() function in C. Which is 
somehow satisfying.

H.

On 3/5/20 05:54, Therneau, Terry M., Ph.D. via R-devel wrote:
> This is a small heads up for package maintainers.?? Under the more recent R-devel, R CMD
> check turned up some changes in the *.out files.?? The simple demonstration is to type
> "round(51/80, 3)", which gives .638 under the old and .637 under the new.?? (One of my
> coxph test cases has a concordance of exactly 51/80).
> 
> In this particular case 51/80 is exactly .63750000, but that value does not have an exact
> representation in base 2.? The line below would argue that the new version is correct, at
> least with respect to the internal representation.
> 
>   > print(51/80, digits = 20)
> [1] 0.63749999999999995559
> 
> This is not a bug or problem, it just means that whichever version I put into my
> survival/tests/book6.Rout.save file, one of R-devel or R-current will flag an issue.
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=ByODf3XxvkT0Ag-YiS72sOZMg3b9vKH-pDRcZARaGWQ&s=z5huvy_ZadTqpmI7_sfnFcohmR_I4LdQ3LmOjyEg6kw&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Mar 11 23:13:04 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 12 Mar 2020 11:13:04 +1300
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
 <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>
 <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
 <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>
Message-ID: <B04693F5-C4CB-43A1-8B3E-9C60C1D387AE@R-project.org>

Jiefei,

you did not commit all files into the example package - your example has things like RcppExports.cpp as well as additional flags which are not in your GH project. I suspect the issue is with the extra flags you're adding - those don't come from R. Please make sure you can replicate the issue with the GH package you created.

Cheers,
Simon 


* installing *source* package 'testPackage' ...
** using staged installation
** libs

*** arch - i386
echo "test1 is [1] 0.1522111 0.2533619 0.6591809"
test1 is [1] 0.1522111 0.2533619 0.6591809
echo "R_HOME is C:/R/R-3.6.2"
R_HOME is C:/R/R-3.6.2
echo "Fake library" > testPackage.dll
installing to C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/i38
6

*** arch - x64
echo "test1 is [1] 0.9271811 0.8040735 0.4739104"
test1 is [1] 0.9271811 0.8040735 0.4739104
echo "R_HOME is C:/R/R-3.6.2"
R_HOME is C:/R/R-3.6.2
echo "Fake library" > testPackage.dll
installing to C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/x64

** help
No man pages found in package  'testPackage'
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
*** arch - i386
*** arch - x64
** testing if installed package can be loaded from final location
*** arch - i386
*** arch - x64
** testing if installed package keeps a record of temporary installation path
* DONE (testPackage)
Making 'packages.html' ... done

> On 12/03/2020, at 4:33 AM, Wang Jiefei <szwjf08 at gmail.com> wrote:
> 
> Thanks a lot for your suggestions. I see what you mean. I have removed all
> unnecessary files and dependences on https://github.com/Jiefei-Wang/example,
> but still no luck. I've tried to install the package as a user, not admin,
> but I got the same error. Also, I apologize for spamming the mail list. I
> will keep my reply as neat as possible.
> 
> Martin has suggested checking the encoding of the file and locale in the
> session info, so here is this missing information: The makefile is encoded
> in UTF-8, and the locale is:
> 
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> That is where I am stuck, any help would be appreciated.
> 
> Best,
> Jiefei
> 
> 
> 
> On Wed, Mar 11, 2020 at 9:56 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
> 
>> On 3/11/20 2:26 PM, Wang Jiefei wrote:
>> 
>> Thanks, Tomas. I took your suggestion and change the make file to
>> 
>> test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>> 
>> all: testPackage.dll
>>    echo "test1 is $(test1)"
>>    echo "R_HOME is $(R_HOME)"
>> 
>> However, R CMD INSTALL still gives me the same error:
>> 
>>> R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
>> Files/R/R-devel/library'
>> * installing *source* package 'testPackage' ...
>> ** using staged installation
>> ** libs
>> 
>> *** arch - i386
>> The filename, directory name, or volume label syntax is incorrect.
>> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
>> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
>> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>> -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
>> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
>> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
>> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>> -mfpmath=sse -msse2 -c example.cpp -o example.o
>> c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
>> testPackage.dll tmp.def RcppExports.o example.o
>> -LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
>> -LC:/projects/BUILD/R-source-win32/extsoft/lib
>> -LC:/PROGRA~1/R/R-devel/bin/i386 -lR
>> echo "test1 is "
>> test1 is
>> echo "R_HOME is C:/PROGRA~1/R/R-devel"
>> installing to C:/Program
>> Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386
>> 
>> 
>> I have no idea how to make the example even more minimal for there is
>> literally nothing in the package now. Like you said if R just sets R_HOME
>> and runs "make", I do not understand why it cannot find R in this case for
>> R_HOME seems correct to me. I think there are some other things behind R
>> CMD INSTALL but my poor knowledge does not allow me to see them...Any help
>> will be appreciated.
>> 
>> Please lets not spam the whole list with this any more - this is also why
>> I didn't add R-devel to cc originally. The makefile may be minimal, but the
>> example package is not - you have Rcpp dependency there, two C source
>> files, some R Studio specific thing (an .Rproj file at least). Maybe it is
>> not related, but if you want other to help you, it would be nice to spend
>> some of your time reducing it anyway.
>> 
>> That test1 is empty means that executing R has failed. You need to find
>> out why.
>> 
>> I see that you are installing into C:/Program Files/R/R-devel/library.
>> Normally that directory should not be writeable. Are you running this as
>> Administrator? In principle this could be related, but better to find out
>> directly why executing R is failing.
>> 
>> Best
>> Tomas
>> 
>> 
>> 
>> 
>> Best,
>> Jiefei
>> 
>> 
>> On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>> 
>>> 
>>> Thanks, Jiefei, unfortunately your example does not work on my system,
>>> and also it is far from minimal. The error message you are getting is from
>>> Windows and could be caused for example by accidental quoting of the path
>>> using single quotes.
>>> 
>>> Issues with RStudio or devtools would have to be discussed in their
>>> mailing lists/with their authors, but my guess is that the problem is in
>>> your local configuration, and after all you need it to work with the base R
>>> CMD INSTALL anyway. There is not much wrong R could do here, it just sets
>>> R_HOME and runs "make".
>>> 
>>> For example this works for me, but some closer alternations of your code
>>> work as well:
>>> 
>>> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>>> all:
>>>        echo "test1 is $(test1)"
>>>        echo "R_HOME is $(R_HOME)"
>>> 
>>> I would recommend that you try to narrow down your example so that it is
>>> really minimal. Use R_HOME, not hard-coded paths, as that is what you would
>>> use in reality anyway. Print R_HOME and check it is valid. If the problem
>>> persists, find out why it works when invoked from the command line but not
>>> from R CMD INSTALL.
>>> 
>>> Best
>>> Tomas
>>> 
>>> On 3/10/20 10:15 AM, Wang Jiefei wrote:
>>> 
>>>  Oops, I think both of us forget to cite the r-devel channel.
>>> 
>>> Best,
>>> Jiefei
>>> 
>>> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>> 
>>>> Thanks for your quick response, Tomas.
>>>> 
>>>> Yes, this is a path issue, I think the problem is related to R, not the
>>>> Rtools make. I built an example package for reproducing the problem:
>>>> https://github.com/Jiefei-Wang/example
>>>> 
>>>> Here is the version of my R and Rtools:
>>>> The release R version:
>>>> R version 3.6.2 (2019-12-12)
>>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>> Running under: Windows 10 x64 (build 18362)
>>>> 
>>>> The devel R version:
>>>> R Under development (unstable) (2020-03-09 r77919)
>>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>> Running under: Windows 10 x64 (build 18362)
>>>> 
>>>> Rtools version 3.5.0.4
>>>> 
>>>> Things become interesting after I did more tests. I originally thought
>>>> this might be only related to the devel R, but it seems like the released
>>>> version is also affected. Here is a summary of my test results using the
>>>> example package:
>>>> 
>>>> 1. command-line Rtools make: Success
>>>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>>>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>>>> 4. Rstudio running devtool::install: Success on both
>>>> 
>>>> Now the problem becomes more intricate. I have no idea which one goes
>>>> wrong. Here are the details of my test results, I hope it can be helpful:
>>>> 
>>>> *Command line:*
>>>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>>>> example-master/src/Makevars
>>>> test1 is [1] 0.2039269 0.1454402 0.1578401
>>>> test2 is [1] 0.1919521 0.9257183 0.2130247
>>>> test3 is [1] 0.06255174 0.27555363 0.72737111
>>>> mingw32-make: *** No targets.  Stop.
>>>> 
>>>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>>>> *** arch - x64
>>>> test1 is [1] 0.1584299 0.9338829 0.9528810
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test2 is
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test3 is
>>>> 
>>>>  3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
>>>> testPackage_1.0.tar.gz
>>>> *** arch - x64
>>>> test1 is [1] 0.2668522 0.9246174 0.0184601
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test2 is
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test3 is
>>>> 
>>>> *R studio:*
>>>> 1. R3.6:  Clicking the install button
>>>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>>>> * installing *source* package 'testPackage' ...
>>>> ** using staged installation
>>>> ** libs
>>>> test1 is [1] 0.1583112 0.6631700 0.2265564
>>>> test2 is [1] 0.6999799 0.5205237 0.8264029
>>>> test3 is [1] 0.3591798 0.1767392 0.2869383
>>>> 
>>>> 2.  R4.0: Clicking the install button
>>>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>>> * installing to library 'C:/Program Files/R/R-devel/library'
>>>> * installing *source* package 'testPackage' ...
>>>> ** using staged installation
>>>> ** libs
>>>> test1 is [1] 0.2091070 0.5411138 0.1051517
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test2 is
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test3 is
>>>> 
>>>> 3. R3.6:  devtools::load_all(".")
>>>> devtools::load_all(".")
>>>> Loading testPackage
>>>> Re-compiling testPackage
>>>> -  installing *source* package 'testPackage' ... (364ms)
>>>>   ** using staged installation
>>>>   ** libs
>>>>   test1 is [1] 0.93251741 0.03975758 0.57824150
>>>>   test2 is [1] 0.8681301 0.4801464 0.9112827
>>>>   test3 is [1] 0.430470791 0.008393394 0.341484128
>>>>   test1 is [1] 0.68865768 0.05354531 0.91665539
>>>>   test2 is [1] 0.19473846 0.60293655 0.09421961
>>>>   test3 is [1] 0.90653581 0.12456034 0.09526018
>>>> 
>>>> 4. R4.0: devtools::load_all(".")
>>>> Loading testPackage
>>>> Re-compiling testPackage
>>>> ?  installing *source* package 'testPackage' ... (357ms)
>>>>   ** using staged installation
>>>>   ** libs
>>>>   test1 is [1] 0.00545376 0.30696231 0.68752312
>>>>   test2 is [1] 0.1059506 0.7506894 0.8607918
>>>>   test3 is [1] 0.5321226 0.6985332 0.7343680
>>>>   test1 is [1] 0.7722255 0.3881171 0.5611294
>>>>   test2 is [1] 0.5443175 0.8418503 0.3479382
>>>>   test3 is [1] 0.7400557 0.3322797 0.6818899
>>>> 
>>>> 
>>>> Cheers,
>>>> Jiefei
>>>> 
>>>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>>>> wrote:
>>>> 
>>>>> Hi Jiefei,
>>>>> 
>>>>> thanks for your report, but I don't understand from you current
>>>>> description what the problem is. Are you saying that "make" shipped
>>>>> with
>>>>> some recent Rtools is not accepting some forms of PATHs? But, which
>>>>> Rtools then, which version of make, how do you run it?
>>>>> 
>>>>> Why are you referring to "R CMD INSTALL" when none of your examples use
>>>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot
>>>>> you
>>>>> just run "make" directly?
>>>>> 
>>>>> Or are you reporting a bug inside R itself? (you are referring to
>>>>> specific svn revisions of R). But how could R be involved in this, is
>>>>> it
>>>>> in how it executes make?
>>>>> 
>>>>> Please provide a minimal but complete reproducible example, please
>>>>> provide somehow test files that can be used.  Perhaps if you try to do
>>>>> a
>>>>> little bit of debugging on your end, it might help you to narrow down
>>>>> the problem to the point that it will be then easier to understand it.
>>>>> For example: if the problem is in "make", it should be possible to
>>>>> trigger it directly from the command line, then you could easily try
>>>>> with different versions of make and report which ones are the problem..
>>>>> 
>>>>> Thanks
>>>>> Tomas
>>>>> 
>>>>> 
>>>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>>>>>> Hi all,
>>>>>> 
>>>>>> Here is a bug(or feature?) that exists at least from R 2020-02-24
>>>>>> r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>>>>> in a
>>>>>> package
>>>>>> ```
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>>>>>> 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>>>>>> --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>>>>>> --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>>>>> $(test2))$(info
>>>>>> test3 is $(test3))*
>>>>>> ```
>>>>>> 
>>>>>> I have no problem running the file using GUN make or installing the
>>>>> package
>>>>>> on R 3.6, both give the same result.
>>>>>> ```
>>>>>> *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>>>>> 0.3922129
>>>>>> 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: ***
>>>>> No
>>>>>> targets.  Stop.*
>>>>>> *```*
>>>>>> 
>>>>>> However, on the devel version of R, it cannot recognize both the full
>>>>> and
>>>>>> short path of R and gives an error
>>>>>> ```
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>>>>>> name, or volume label syntax is incorrect.test2 isThe filename,
>>>>> directory
>>>>>> name, or volume label syntax is incorrect.test3 is*
>>>>>> ```
>>>>>> 
>>>>>> I found this issue because my package needs to call R functions in the
>>>>>> makefile. The code is similar to:
>>>>>> ```
>>>>>> *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
>>>>> --slave)*
>>>>>> ```
>>>>>> Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result
>>>>> in the
>>>>>> same error as I mentioned above. I do not know whether this is
>>>>> intentional.
>>>>>> If so, what is the correct way to call R function in a makefile?
>>>>>> 
>>>>>> Best,
>>>>>> Jiefei
>>>>>> 
>>>>>>      [[alternative HTML version deleted]]
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>>> 
>>>>> 
>>> 
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @zwj|08 @end|ng |rom gm@||@com  Thu Mar 12 05:09:51 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Thu, 12 Mar 2020 00:09:51 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <B04693F5-C4CB-43A1-8B3E-9C60C1D387AE@R-project.org>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
 <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>
 <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
 <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>
 <B04693F5-C4CB-43A1-8B3E-9C60C1D387AE@R-project.org>
Message-ID: <CAGiFhPMmZUm0BvP=sY9E3aL-xtSqqEP6rpe+6hm1aOzeUFgb2Q@mail.gmail.com>

Thanks for your test result Simon, I really appreciate it. I borrowed a new
laptop and found the issue is only reproducible on my machine, so there is
something not in R or the package that causes this problem. I will
stop chattering and try to figure out where the problem is. Thanks again
for your time and help!

Cheers,
Jiefei

On Wed, Mar 11, 2020 at 6:22 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Jiefei,
>
> you did not commit all files into the example package - your example has
> things like RcppExports.cpp as well as additional flags which are not in
> your GH project. I suspect the issue is with the extra flags you're adding
> - those don't come from R. Please make sure you can replicate the issue
> with the GH package you created.
>
> Cheers,
> Simon
>
>
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
>
> *** arch - i386
> echo "test1 is [1] 0.1522111 0.2533619 0.6591809"
> test1 is [1] 0.1522111 0.2533619 0.6591809
> echo "R_HOME is C:/R/R-3.6.2"
> R_HOME is C:/R/R-3.6.2
> echo "Fake library" > testPackage.dll
> installing to
> C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/i38
> 6
>
> *** arch - x64
> echo "test1 is [1] 0.9271811 0.8040735 0.4739104"
> test1 is [1] 0.9271811 0.8040735 0.4739104
> echo "R_HOME is C:/R/R-3.6.2"
> R_HOME is C:/R/R-3.6.2
> echo "Fake library" > testPackage.dll
> installing to
> C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/x64
>
> ** help
> No man pages found in package  'testPackage'
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> *** arch - i386
> *** arch - x64
> ** testing if installed package can be loaded from final location
> *** arch - i386
> *** arch - x64
> ** testing if installed package keeps a record of temporary installation
> path
> * DONE (testPackage)
> Making 'packages.html' ... done
>
> > On 12/03/2020, at 4:33 AM, Wang Jiefei <szwjf08 at gmail.com> wrote:
> >
> > Thanks a lot for your suggestions. I see what you mean. I have removed
> all
> > unnecessary files and dependences on
> https://github.com/Jiefei-Wang/example,
> > but still no luck. I've tried to install the package as a user, not
> admin,
> > but I got the same error. Also, I apologize for spamming the mail list. I
> > will keep my reply as neat as possible.
> >
> > Martin has suggested checking the encoding of the file and locale in the
> > session info, so here is this missing information: The makefile is
> encoded
> > in UTF-8, and the locale is:
> >
> > [1] LC_COLLATE=English_United States.1252
> > [2] LC_CTYPE=English_United States.1252
> > [3] LC_MONETARY=English_United States.1252
> > [4] LC_NUMERIC=C
> > [5] LC_TIME=English_United States.1252
> >
> > That is where I am stuck, any help would be appreciated.
> >
> > Best,
> > Jiefei
> >
> >
> >
> > On Wed, Mar 11, 2020 at 9:56 AM Tomas Kalibera <tomas.kalibera at gmail.com
> >
> > wrote:
> >
> >> On 3/11/20 2:26 PM, Wang Jiefei wrote:
> >>
> >> Thanks, Tomas. I took your suggestion and change the make file to
> >>
> >> test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
> >>
> >> all: testPackage.dll
> >>    echo "test1 is $(test1)"
> >>    echo "R_HOME is $(R_HOME)"
> >>
> >> However, R CMD INSTALL still gives me the same error:
> >>
> >>> R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
> >> Files/R/R-devel/library'
> >> * installing *source* package 'testPackage' ...
> >> ** using staged installation
> >> ** libs
> >>
> >> *** arch - i386
> >> The filename, directory name, or volume label syntax is incorrect.
> >> c:/Rtools/mingw_32/bin/g++ -std=gnu++11
> -I"C:/PROGRA~1/R/R-devel/include"
> >> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> >> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
> >> -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
> >> c:/Rtools/mingw_32/bin/g++ -std=gnu++11
> -I"C:/PROGRA~1/R/R-devel/include"
> >> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> >> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
> >> -mfpmath=sse -msse2 -c example.cpp -o example.o
> >> c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
> >> testPackage.dll tmp.def RcppExports.o example.o
> >> -LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
> >> -LC:/projects/BUILD/R-source-win32/extsoft/lib
> >> -LC:/PROGRA~1/R/R-devel/bin/i386 -lR
> >> echo "test1 is "
> >> test1 is
> >> echo "R_HOME is C:/PROGRA~1/R/R-devel"
> >> installing to C:/Program
> >> Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386
> >>
> >>
> >> I have no idea how to make the example even more minimal for there is
> >> literally nothing in the package now. Like you said if R just sets
> R_HOME
> >> and runs "make", I do not understand why it cannot find R in this case
> for
> >> R_HOME seems correct to me. I think there are some other things behind R
> >> CMD INSTALL but my poor knowledge does not allow me to see them...Any
> help
> >> will be appreciated.
> >>
> >> Please lets not spam the whole list with this any more - this is also
> why
> >> I didn't add R-devel to cc originally. The makefile may be minimal, but
> the
> >> example package is not - you have Rcpp dependency there, two C source
> >> files, some R Studio specific thing (an .Rproj file at least). Maybe it
> is
> >> not related, but if you want other to help you, it would be nice to
> spend
> >> some of your time reducing it anyway.
> >>
> >> That test1 is empty means that executing R has failed. You need to find
> >> out why.
> >>
> >> I see that you are installing into C:/Program Files/R/R-devel/library.
> >> Normally that directory should not be writeable. Are you running this as
> >> Administrator? In principle this could be related, but better to find
> out
> >> directly why executing R is failing.
> >>
> >> Best
> >> Tomas
> >>
> >>
> >>
> >>
> >> Best,
> >> Jiefei
> >>
> >>
> >> On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <
> tomas.kalibera at gmail.com>
> >> wrote:
> >>
> >>>
> >>> Thanks, Jiefei, unfortunately your example does not work on my system,
> >>> and also it is far from minimal. The error message you are getting is
> from
> >>> Windows and could be caused for example by accidental quoting of the
> path
> >>> using single quotes.
> >>>
> >>> Issues with RStudio or devtools would have to be discussed in their
> >>> mailing lists/with their authors, but my guess is that the problem is
> in
> >>> your local configuration, and after all you need it to work with the
> base R
> >>> CMD INSTALL anyway. There is not much wrong R could do here, it just
> sets
> >>> R_HOME and runs "make".
> >>>
> >>> For example this works for me, but some closer alternations of your
> code
> >>> work as well:
> >>>
> >>> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
> >>> all:
> >>>        echo "test1 is $(test1)"
> >>>        echo "R_HOME is $(R_HOME)"
> >>>
> >>> I would recommend that you try to narrow down your example so that it
> is
> >>> really minimal. Use R_HOME, not hard-coded paths, as that is what you
> would
> >>> use in reality anyway. Print R_HOME and check it is valid. If the
> problem
> >>> persists, find out why it works when invoked from the command line but
> not
> >>> from R CMD INSTALL.
> >>>
> >>> Best
> >>> Tomas
> >>>
> >>> On 3/10/20 10:15 AM, Wang Jiefei wrote:
> >>>
> >>>  Oops, I think both of us forget to cite the r-devel channel.
> >>>
> >>> Best,
> >>> Jiefei
> >>>
> >>> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
> >>>
> >>>> Thanks for your quick response, Tomas.
> >>>>
> >>>> Yes, this is a path issue, I think the problem is related to R, not
> the
> >>>> Rtools make. I built an example package for reproducing the problem:
> >>>> https://github.com/Jiefei-Wang/example
> >>>>
> >>>> Here is the version of my R and Rtools:
> >>>> The release R version:
> >>>> R version 3.6.2 (2019-12-12)
> >>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>>> Running under: Windows 10 x64 (build 18362)
> >>>>
> >>>> The devel R version:
> >>>> R Under development (unstable) (2020-03-09 r77919)
> >>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>>> Running under: Windows 10 x64 (build 18362)
> >>>>
> >>>> Rtools version 3.5.0.4
> >>>>
> >>>> Things become interesting after I did more tests. I originally thought
> >>>> this might be only related to the devel R, but it seems like the
> released
> >>>> version is also affected. Here is a summary of my test results using
> the
> >>>> example package:
> >>>>
> >>>> 1. command-line Rtools make: Success
> >>>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
> >>>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
> >>>> 4. Rstudio running devtool::install: Success on both
> >>>>
> >>>> Now the problem becomes more intricate. I have no idea which one goes
> >>>> wrong. Here are the details of my test results, I hope it can be
> helpful:
> >>>>
> >>>> *Command line:*
> >>>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
> >>>> example-master/src/Makevars
> >>>> test1 is [1] 0.2039269 0.1454402 0.1578401
> >>>> test2 is [1] 0.1919521 0.9257183 0.2130247
> >>>> test3 is [1] 0.06255174 0.27555363 0.72737111
> >>>> mingw32-make: *** No targets.  Stop.
> >>>>
> >>>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL
> testPackage_1.0.tar.gz
> >>>> *** arch - x64
> >>>> test1 is [1] 0.1584299 0.9338829 0.9528810
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test2 is
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test3 is
> >>>>
> >>>>  3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
> >>>> testPackage_1.0.tar.gz
> >>>> *** arch - x64
> >>>> test1 is [1] 0.2668522 0.9246174 0.0184601
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test2 is
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test3 is
> >>>>
> >>>> *R studio:*
> >>>> 1. R3.6:  Clicking the install button
> >>>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> >>>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
> >>>> * installing *source* package 'testPackage' ...
> >>>> ** using staged installation
> >>>> ** libs
> >>>> test1 is [1] 0.1583112 0.6631700 0.2265564
> >>>> test2 is [1] 0.6999799 0.5205237 0.8264029
> >>>> test3 is [1] 0.3591798 0.1767392 0.2869383
> >>>>
> >>>> 2.  R4.0: Clicking the install button
> >>>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> >>>> * installing to library 'C:/Program Files/R/R-devel/library'
> >>>> * installing *source* package 'testPackage' ...
> >>>> ** using staged installation
> >>>> ** libs
> >>>> test1 is [1] 0.2091070 0.5411138 0.1051517
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test2 is
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test3 is
> >>>>
> >>>> 3. R3.6:  devtools::load_all(".")
> >>>> devtools::load_all(".")
> >>>> Loading testPackage
> >>>> Re-compiling testPackage
> >>>> -  installing *source* package 'testPackage' ... (364ms)
> >>>>   ** using staged installation
> >>>>   ** libs
> >>>>   test1 is [1] 0.93251741 0.03975758 0.57824150
> >>>>   test2 is [1] 0.8681301 0.4801464 0.9112827
> >>>>   test3 is [1] 0.430470791 0.008393394 0.341484128
> >>>>   test1 is [1] 0.68865768 0.05354531 0.91665539
> >>>>   test2 is [1] 0.19473846 0.60293655 0.09421961
> >>>>   test3 is [1] 0.90653581 0.12456034 0.09526018
> >>>>
> >>>> 4. R4.0: devtools::load_all(".")
> >>>> Loading testPackage
> >>>> Re-compiling testPackage
> >>>> ?  installing *source* package 'testPackage' ... (357ms)
> >>>>   ** using staged installation
> >>>>   ** libs
> >>>>   test1 is [1] 0.00545376 0.30696231 0.68752312
> >>>>   test2 is [1] 0.1059506 0.7506894 0.8607918
> >>>>   test3 is [1] 0.5321226 0.6985332 0.7343680
> >>>>   test1 is [1] 0.7722255 0.3881171 0.5611294
> >>>>   test2 is [1] 0.5443175 0.8418503 0.3479382
> >>>>   test3 is [1] 0.7400557 0.3322797 0.6818899
> >>>>
> >>>>
> >>>> Cheers,
> >>>> Jiefei
> >>>>
> >>>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <
> tomas.kalibera at gmail.com>
> >>>> wrote:
> >>>>
> >>>>> Hi Jiefei,
> >>>>>
> >>>>> thanks for your report, but I don't understand from you current
> >>>>> description what the problem is. Are you saying that "make" shipped
> >>>>> with
> >>>>> some recent Rtools is not accepting some forms of PATHs? But, which
> >>>>> Rtools then, which version of make, how do you run it?
> >>>>>
> >>>>> Why are you referring to "R CMD INSTALL" when none of your examples
> use
> >>>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot
> >>>>> you
> >>>>> just run "make" directly?
> >>>>>
> >>>>> Or are you reporting a bug inside R itself? (you are referring to
> >>>>> specific svn revisions of R). But how could R be involved in this, is
> >>>>> it
> >>>>> in how it executes make?
> >>>>>
> >>>>> Please provide a minimal but complete reproducible example, please
> >>>>> provide somehow test files that can be used.  Perhaps if you try to
> do
> >>>>> a
> >>>>> little bit of debugging on your end, it might help you to narrow down
> >>>>> the problem to the point that it will be then easier to understand
> it.
> >>>>> For example: if the problem is in "make", it should be possible to
> >>>>> trigger it directly from the command line, then you could easily try
> >>>>> with different versions of make and report which ones are the
> problem..
> >>>>>
> >>>>> Thanks
> >>>>> Tomas
> >>>>>
> >>>>>
> >>>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
> >>>>>> Hi all,
> >>>>>>
> >>>>>> Here is a bug(or feature?) that exists at least from R 2020-02-24
> >>>>>> r77852 to 2020-03-09 r77919 on Window. Consider this example
> makefile
> >>>>> in a
> >>>>>> package
> >>>>>> ```
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>> *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell
> echo
> >>>>>> 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
> >>>>>> --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
> >>>>>> --vanilla --slave)$(info test1 is $(test1))$(info test2 is
> >>>>> $(test2))$(info
> >>>>>> test3 is $(test3))*
> >>>>>> ```
> >>>>>>
> >>>>>> I have no problem running the file using GUN make or installing the
> >>>>> package
> >>>>>> on R 3.6, both give the same result.
> >>>>>> ```
> >>>>>> *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>> *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
> >>>>> 0.3922129
> >>>>>> 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: ***
> >>>>> No
> >>>>>> targets.  Stop.*
> >>>>>> *```*
> >>>>>>
> >>>>>> However, on the devel version of R, it cannot recognize both the
> full
> >>>>> and
> >>>>>> short path of R and gives an error
> >>>>>> ```
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>> *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename,
> directory
> >>>>>> name, or volume label syntax is incorrect.test2 isThe filename,
> >>>>> directory
> >>>>>> name, or volume label syntax is incorrect.test3 is*
> >>>>>> ```
> >>>>>>
> >>>>>> I found this issue because my package needs to call R functions in
> the
> >>>>>> makefile. The code is similar to:
> >>>>>> ```
> >>>>>> *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
> >>>>> --slave)*
> >>>>>> ```
> >>>>>> Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result
> >>>>> in the
> >>>>>> same error as I mentioned above. I do not know whether this is
> >>>>> intentional.
> >>>>>> If so, what is the correct way to call R function in a makefile?
> >>>>>>
> >>>>>> Best,
> >>>>>> Jiefei
> >>>>>>
> >>>>>>      [[alternative HTML version deleted]]
> >>>>>>
> >>>>>> ______________________________________________
> >>>>>> R-devel at r-project.org mailing list
> >>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>>
> >>>>>
> >>>>>
> >>>
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Thu Mar 12 10:06:43 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Thu, 12 Mar 2020 10:06:43 +0100
Subject: [Rd] support of `substitute(...())`
Message-ID: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>

Dear R Core Team,

I learnt approx. two years ago in this mailing list that one can use the 
following "trick" to get a (dotted pair)list of the ellipsis arguments 
inside a function:

`substitute(...())`

Now my problem is that I can not find any occurrence of this call within 
the R source - the most frequent solution there is 
`substitute(list(...))[-1L] `

I would like to know if:
1) substitute(...()) is a trick or a feature in the language;
2) it will be supported in the future;
3) when (in which R version) it was introduced.

A hint on where to look for the machinery in the R source would be also 
appreciated.

Regards,
Denes


From pd@me@ @end|ng |rom cb@@dk  Thu Mar 12 13:30:35 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Thu, 12 Mar 2020 12:30:35 +0000
Subject: [Rd] R 4.0.0 scheduled for April 24
Message-ID: <68E2CE45-82CF-4766-9363-6023DF0B5BE4@cbs.dk>

Full schedule is available on developer.r-project.org.

Notice that Copenhagen Business School, like all Danish educational institutions, is physically locked down for two weeks due to COVID-19. The schedule is automated, but there may be irregularities with the nightly builds, if things act up and I can't get to the machine.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Thu Mar 12 16:06:05 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 12 Mar 2020 08:06:05 -0700
Subject: [Rd] support of `substitute(...())`
In-Reply-To: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>
References: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>
Message-ID: <CAF8bMcZHhmeuc3onZOj+8KQQ04yt0AmzfRA0JSGogC3fjY58zg@mail.gmail.com>

Note that substitute(...()) and substitute(someFunc(...))[-1] give slightly
different results, the former a pairlist and the latter a call.
  > str((function(...)substitute(...()))(stop(1),stop(2),stop(3)))
  Dotted pair list of 3
   $ : language stop(1)
   $ : language stop(2)
   $ : language stop(3)
  >
str((function(...)substitute(someFunc(...))[-1])(stop(1),stop(2),stop(3)))
   language stop(1)(stop(2), stop(3))

The ...() idiom has been around for a long time, but more recently
(slightly after R-3.4.0?) the ...elt(n) and ...length() functions were
introduced so you don't have to use it much.  I don't see a ...names()
function that would give the names of the ... arguments -
names(substitute(...())).

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, Mar 12, 2020 at 2:09 AM D?nes T?th <toth.denes at kogentum.hu> wrote:

> Dear R Core Team,
>
> I learnt approx. two years ago in this mailing list that one can use the
> following "trick" to get a (dotted pair)list of the ellipsis arguments
> inside a function:
>
> `substitute(...())`
>
> Now my problem is that I can not find any occurrence of this call within
> the R source - the most frequent solution there is
> `substitute(list(...))[-1L] `
>
> I would like to know if:
> 1) substitute(...()) is a trick or a feature in the language;
> 2) it will be supported in the future;
> 3) when (in which R version) it was introduced.
>
> A hint on where to look for the machinery in the R source would be also
> appreciated.
>
> Regards,
> Denes
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Thu Mar 12 16:22:09 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Thu, 12 Mar 2020 16:22:09 +0100
Subject: [Rd] support of `substitute(...())`
In-Reply-To: <CAF8bMcZHhmeuc3onZOj+8KQQ04yt0AmzfRA0JSGogC3fjY58zg@mail.gmail.com>
References: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>
 <CAF8bMcZHhmeuc3onZOj+8KQQ04yt0AmzfRA0JSGogC3fjY58zg@mail.gmail.com>
Message-ID: <992362cf-e696-c164-d036-68ddab39eb34@kogentum.hu>


On 3/12/20 4:06 PM, William Dunlap wrote:
> Note that substitute(...()) and substitute(someFunc(...))[-1] give 
> slightly different results, the former a pairlist and the latter a call.
>  ? > str((function(...)substitute(...()))(stop(1),stop(2),stop(3)))
>  ? Dotted pair list of 3
>  ? ?$ : language stop(1)
>  ? ?$ : language stop(2)
>  ? ?$ : language stop(3)
>  ? > 
> str((function(...)substitute(someFunc(...))[-1])(stop(1),stop(2),stop(3)))
>  ? ?language stop(1)(stop(2), stop(3))

Yes, I am aware of this difference. In my use cases, the ...() form 
gives the result that I prefer (a pairlist).

> 
> The ...() idiom has been around for a long time, but more recently 
> (slightly after R-3.4.0?) the ...elt(n) and ...length() functions were 
> introduced so you don't have to use it much.  

Yes, I know both.

> I don't see a ...names() 
> function that would give the names of the ... arguments - 
> names(substitute(...())).

Exactly, this is a frequent use case. Occasionally I use it in other 
cases as well where I deliberately do not want to evaluate the arguments 
passed as dots.

What I am most interested in is whether this is a 'trick' or a legal use 
of a (rather unadvertised) feature of the language.

> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com <http://tibco.com>
> 
> 
> On Thu, Mar 12, 2020 at 2:09 AM D?nes T?th <toth.denes at kogentum.hu 
> <mailto:toth.denes at kogentum.hu>> wrote:
> 
>     Dear R Core Team,
> 
>     I learnt approx. two years ago in this mailing list that one can use
>     the
>     following "trick" to get a (dotted pair)list of the ellipsis arguments
>     inside a function:
> 
>     `substitute(...())`
> 
>     Now my problem is that I can not find any occurrence of this call
>     within
>     the R source - the most frequent solution there is
>     `substitute(list(...))[-1L] `
> 
>     I would like to know if:
>     1) substitute(...()) is a trick or a feature in the language;
>     2) it will be supported in the future;
>     3) when (in which R version) it was introduced.
> 
>     A hint on where to look for the machinery in the R source would be also
>     appreciated.
> 
>     Regards,
>     Denes
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m|n@h@|| @end|ng |rom um|ch@edu  Fri Mar 13 18:26:43 2020
From: m|n@h@|| @end|ng |rom um|ch@edu (Greg Minshall)
Date: Fri, 13 Mar 2020 20:26:43 +0300
Subject: [Rd] pipe(): input to, and output from, a single process
Message-ID: <129887.1584120403@apollo2.minshall.org>

hi.  i'd like to instantiate sed(1), send it some input, and retrieve
its output, all via pipes (rather than an intermediate file).

my sense from pipe and looking at the sources (sys-unix.c) is that is
not possible.  is that true?  are there any thoughts of providing such a
facility?

cheers, Greg


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Mar 16 13:12:58 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 16 Mar 2020 12:12:58 +0000
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: <129887.1584120403@apollo2.minshall.org>
References: <129887.1584120403@apollo2.minshall.org>
Message-ID: <CABtg=Km40QTasqtxuT=YgLdU0c3kveku=pqOU7O4GpyTj1wP=w@mail.gmail.com>

I am not sure if `pipe()` works for this, but if it turns out that it
does not, then you can use the processx package, e.g.:

> p <- processx::process$new("sed", c("-l", "s/a/x/g"), stdin = "|", stdout = "|")
> p$write_input("foobar\n")
> p$read_output()
[1] "foobxr\n"

The `-l` sed flag is to make sed line-buffered, otherwise it is will
not produce output until there is enough.

`$write_input()` and `$read_output()` are not easy to program, in particular:
* `$write_input()` returns the chunk of data that it hasn't managed to
write into the pipe. You need to call `$write_input() again, with this
data next, usually.
* `$read_output()` returns an empty string if there is no data to
read, so typically you want to call `p$poll()` first, to make sure
that there is something to read.
* `$read_output()` might not read whole lines, so maybe
`$read_output_lines()` is better for you.
* Close the stdin of the process if you want to quit cleanly:
`close(p$get_input_connection())`.
* There is currently no way to poll the input side of the pipe. :(

HTH, Gabor

On Mon, Mar 16, 2020 at 11:31 AM Greg Minshall <minshall at umich.edu> wrote:
>
> hi.  i'd like to instantiate sed(1), send it some input, and retrieve
> its output, all via pipes (rather than an intermediate file).
>
> my sense from pipe and looking at the sources (sys-unix.c) is that is
> not possible.  is that true?  are there any thoughts of providing such a
> facility?
>
> cheers, Greg
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Mar 16 15:48:50 2020
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 16 Mar 2020 17:48:50 +0300
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: <129887.1584120403@apollo2.minshall.org>
References: <129887.1584120403@apollo2.minshall.org>
Message-ID: <20200316174850.3def2a2d@parabola>

On Fri, 13 Mar 2020 20:26:43 +0300
Greg Minshall <minshall at umich.edu> wrote:

> my sense from pipe and looking at the sources (sys-unix.c) is that is
> not possible.  is that true?  are there any thoughts of providing
> such a facility?

Pipes (including those created by popen(3), which R pipe() uses
internally) are uni-directional data channels. While it could be
possible to open two pipes for both stdin and stdout of the child
process, doing so correctly is complicated because of differences in
buffering provided by the runtime: when stdin/stdout is not a terminal,
buffering mode may be set to block-oriented instead of line-oriented,
resulting in both parent and child being dead-locked, waiting to fill
the buffer instead of returning from the blocking call after the first
newline. (Hence the -l flag to sed mentioned by G?bor Cs?rdi, which
avoids this problem for sed).

Programs designed to first read stdin until end-of-file, then process
the input and print results on the stdout are usually safe to use in
this way, but others may be not. Software specifically designed to
control other software (e.g. Expect [*]) gets around this limitation by
running the child processes inside pseudo-terminals and/or running in
event-driven manner, being ready to service the child process whether
it wants to read its stdin or write to stdout.

Since sed has its -l flag, it should be possible to safely drive it
line-by-line with the help of processx, but not via pipe().

-- 
Best regards,
Ivan

[*] https://core.tcl-lang.org/expect/index


From edd @end|ng |rom deb|@n@org  Mon Mar 16 15:57:17 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 16 Mar 2020 09:57:17 -0500
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: <129887.1584120403@apollo2.minshall.org>
References: <129887.1584120403@apollo2.minshall.org>
Message-ID: <24175.37837.327452.570562@rob.eddelbuettel.com>


On 13 March 2020 at 20:26, Greg Minshall wrote:
| hi.  i'd like to instantiate sed(1), send it some input, and retrieve
| its output, all via pipes (rather than an intermediate file).
| 
| my sense from pipe and looking at the sources (sys-unix.c) is that is
| not possible.  is that true?  are there any thoughts of providing such a
| facility?

Octave had this already in the 1990s, see documentation for 'popen2' here:

  https://octave.org/doc/v4.2.1/Controlling-Subprocesses.html

As it says 'Start a subprocess with two-way communication'.

Dirk


-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Mar 16 20:17:04 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 16 Mar 2020 19:17:04 +0000
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: <405191.1584385592@apollo2.minshall.org>
References: <CABtg=Km40QTasqtxuT=YgLdU0c3kveku=pqOU7O4GpyTj1wP=w@mail.gmail.com>
 <405191.1584385592@apollo2.minshall.org>
Message-ID: <CABtg=Kkg9wVfmAyK8uLh=3q51E9=uR9q+Co2oSFJV1=T-H7_Aw@mail.gmail.com>

Well, if you want blocking, you can poll with an infinite timeout.
This returns if
1) there is output,
2) the process terminates, or
3) you interrupt with CTRL+C / ESC /etc.

and then right after the polling, you can read the output. This still
works if the process has finished already.

Gabor

On Mon, Mar 16, 2020 at 7:06 PM Greg Minshall <minshall at umich.edu> wrote:
>
> Gabor, thanks.  yes, managing the two-way communication is always a bit
> error-prone, as it depends on the input/output characteristics of the
> two ends -- they either match, or deadlock.  it's too bad if polling is
> always *required* -- i'd think sometimes a programmer would be happy
> blocking, though other times one wants better control over when to
> block.  cheers, Greg


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Mar 17 01:33:59 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 17 Mar 2020 13:33:59 +1300
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: <129887.1584120403@apollo2.minshall.org>
References: <129887.1584120403@apollo2.minshall.org>
Message-ID: <F3993DC8-13D5-4E15-9258-E5D959B2958A@R-project.org>

FWIW if you're on unix, you can use named pipes (fifos) for that:

> system("mkfifo my.output")
> p = pipe("sed -l s:hello:oops: > my.output", "w")
> i = file("my.output", "r", blocking=FALSE, raw=TRUE)
> writeLines("hello!\n", p)
> flush(p)
> readLines(i, 1)
[1] "oops!"

Cheers,
Simon



> On 14/03/2020, at 6:26 AM, Greg Minshall <minshall at umich.edu> wrote:
> 
> hi.  i'd like to instantiate sed(1), send it some input, and retrieve
> its output, all via pipes (rather than an intermediate file).
> 
> my sense from pipe and looking at the sources (sys-unix.c) is that is
> not possible.  is that true?  are there any thoughts of providing such a
> facility?
> 
> cheers, Greg
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From j@goreck| @end|ng |rom w|t@edu@p|  Tue Mar 17 05:08:32 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Tue, 17 Mar 2020 09:38:32 +0530
Subject: [Rd] new bquote feature splice does not address a common LISP @ use
 case?
Message-ID: <CAOO9MKUPoULvz8tRULcbMTTyLHL-FDF21f-hthNDWPUu_doVQQ@mail.gmail.com>

Dear R-devel,

There is a new feature in R-devel, which explicitly refers to LISP @
operator for splicing.

> The backquote function bquote() has a new argument splice to enable splicing a computed list of values into an expression, like ,@ in LISP's backquote.

Although the most upvoted SO question asking for exactly LISP's @
functionality in R doesn't seems to be addressed by this new feature.

Is it possible to use new splice feature to create `6 - 5 + 4`
expression rather than `6 - (5 + 4)`?

b = quote(5+4)
b
#5 + 4
c = bquote(6-.(b))
c
#6 - (5 + 4)
d = bquote(6-..(b), splice=TRUE)
d
#6 - (5 + 4)

There is corresponding LISP code provided

CL-USER>
(setf b `(5 + 4))
(5 + 4)
CL-USER>
(setf c `(6 - , at b))
(6 - 5 + 4)
CL-USER>
(setf c-non-spliced `(6 - ,b))
(6 - (5 + 4))
CL-USER>

Thanks,
Jan Gorecki


From m_o|@h@n@ky @end|ng |rom y@hoo@com  Tue Mar 17 05:36:04 2020
From: m_o|@h@n@ky @end|ng |rom y@hoo@com (Moshe Olshansky)
Date: Tue, 17 Mar 2020 04:36:04 +0000 (UTC)
Subject: [Rd] strange bahaviour of predict.lm
References: <1834195606.3992457.1584419764603.ref@mail.yahoo.com>
Message-ID: <1834195606.3992457.1584419764603@mail.yahoo.com>

Hello,
Below is my code:
> A <- matrix(rnorm(10*3),ncol=3)
> b <- runif(10)
> reg <- lm(b ~ A)
> A1 <- matrix(rnorm(5*3),ncol=3)
> A1 <- as.data.frame(A1)
> b1 <- predict(reg,A1)
Warning message:
'newdata' had 5 rows but variables found have 10 rows 

? And instead of being an array of length 5, b1 is of length 10 and is identical to reg$fitted.values
I think that it should not be like this.
Let me note that for lm I do not care about this as much since I can use reg$coefficients, but unfortunately this behaviour is "inherited" by other methods. When I am trying to fit a regression tree, predicting from the object without using 'predict' method is less trivial.
Thank you,Moshe.
P.S. just in case:> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Linux Mint 19.1

Matrix products: default
BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
[1] C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods?? base??? ?

loaded via a namespace (and not attached):
[1] compiler_3.6.2 tools_3.6.2? ?





	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Tue Mar 17 06:47:06 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Tue, 17 Mar 2020 00:47:06 -0500
Subject: [Rd] ":::" operator doesn't work with data object Ecdat:::Crime
Message-ID: <39fe7c83-1be8-aaf4-1ea1-463401a7e7e4@prodsyse.com>

 ????? The ":::" operator doesn't work for me with "Ecdat:::Crime" on 
either macOS 10.15.3 or Windows 10.


 ????? A different but related issue is that "plm::Crime" says "Error: 
'Crime' is not an exported object from 'namespace:plm'", even though 
"library(plm); data(Crime); Crime" works.? I would naively think a user 
should be able to compare "Crime" objects documented in different 
packages using the "::" and ":::" operators, even if a package 
maintainer chooses not to "export" data objects.


 ????? What do you think?


 ????? Thanks,
 ????? Spencer Graves


*** The following is from my Mac;? I could give you the comparable 
results from Windows 10 if you want it.


 > dim(Ecdat::Crime)
[1] 630? 24
 > Ecdat:::Crime
Error in get(name, envir = asNamespace(pkg), inherits = FALSE) :
 ? object 'Crime' not found
 > sessionInfo()
R version 3.6.3 (2020-02-29)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.3

Matrix products: default
BLAS: 
/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: 
/Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets
[6] methods?? base

loaded via a namespace (and not attached):
 ?[1] Rcpp_1.0.3???????? lattice_0.20-40
 ?[3] mvtnorm_1.1-0????? BMA_3.18.12
 ?[5] Ecdat_0.3-7??????? rrcov_1.5-2
 ?[7] MASS_7.3-51.5????? leaps_3.1
 ?[9] grid_3.6.3???????? pcaPP_1.9-73
[11] stats4_3.6.3?????? TeachingDemos_2.10
[13] Ecfun_0.2-4??????? robustbase_0.93-5
[15] xml2_1.2.5???????? Matrix_1.2-18
[17] splines_3.6.3????? tools_3.6.3
[19] DEoptimR_1.0-8???? jpeg_0.1-8.1
[21] survival_3.1-11??? compiler_3.6.3
[23] inline_0.3.15????? fda_2.4.8.1


[1] The six "Crime" objects I found were in the following packages: 
Ecdat,? BSDA, plm, mosaicModel, statisticalModeling, and gpk.


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Tue Mar 17 07:46:57 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Tue, 17 Mar 2020 06:46:57 +0000
Subject: [Rd] strange bahaviour of predict.lm
In-Reply-To: <1834195606.3992457.1584419764603@mail.yahoo.com>
References: <1834195606.3992457.1584419764603.ref@mail.yahoo.com>
 <1834195606.3992457.1584419764603@mail.yahoo.com>
Message-ID: <862c2c94-f11d-2451-17a7-72994a89d9ff@sapo.pt>

Hello,

The problem seems to be that A is a matrix. The following solves the error.

# create A and b as in your code then run
A <- as.data.frame(A)
df1 <- cbind(A, b)
reg <- lm(b ~ ., df1)

# etc


Hope this helps,

Rui Barradas

?s 04:36 de 17/03/20, Moshe Olshansky via R-devel escreveu:
> Hello,
> Below is my code:
>> A <- matrix(rnorm(10*3),ncol=3)
>> b <- runif(10)
>> reg <- lm(b ~ A)
>> A1 <- matrix(rnorm(5*3),ncol=3)
>> A1 <- as.data.frame(A1)
>> b1 <- predict(reg,A1)
> Warning message:
> 'newdata' had 5 rows but variables found have 10 rows
> 
>  ? And instead of being an array of length 5, b1 is of length 10 and is identical to reg$fitted.values
> I think that it should not be like this.
> Let me note that for lm I do not care about this as much since I can use reg$coefficients, but unfortunately this behaviour is "inherited" by other methods. When I am trying to fit a regression tree, predicting from the object without using 'predict' method is less trivial.
> Thank you,Moshe.
> P.S. just in case:> sessionInfo()
> R version 3.6.2 (2019-12-12)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Linux Mint 19.1
> 
> Matrix products: default
> BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1
> 
> locale:
> [1] C
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.6.2 tools_3.6.2
> 
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @purd|e@@ @end|ng |rom gm@||@com  Tue Mar 17 09:22:43 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 17 Mar 2020 21:22:43 +1300
Subject: [Rd] ":::" operator doesn't work with data object Ecdat:::Crime
In-Reply-To: <39fe7c83-1be8-aaf4-1ea1-463401a7e7e4@prodsyse.com>
References: <39fe7c83-1be8-aaf4-1ea1-463401a7e7e4@prodsyse.com>
Message-ID: <CAB8pepxjUxhor2f3nPPLeVkrdZpJqvW8xxm16Lw_D=oF=ndWkQ@mail.gmail.com>

Crime?
(Macavity, Macavity, ..., and when you reach the scene of crime
Macavity's not there...)

I suspect your data objects are like Macavity, they're not there.

I found this in the R Internals 1.17.

Lazy-load databases are loaded into the exports for a package, but not
into the namespace environment itself. Thus they are visible when the
package is attached, and also via the :: operator. This was a
deliberate design decision...

The manual is not explicit about the converse, but implies (I think)
that the converse is true.
(i.e. Non-lazyloaded datasets are not supposed to available via this mechanism).

I didn't check your examples.

Are your examples lazyloaded?
And are they any different from other similar packages/datasets?


>        A different but related issue is that "plm::Crime" says "Error:
> 'Crime' is not an exported object from 'namespace:plm'", even though
> "library(plm); data(Crime); Crime" works.  I would naively think a user
> should be able to compare "Crime" objects documented in different
> packages using the "::" and ":::" operators, even if a package
> maintainer chooses not to "export" data objects.
>        What do you think?


From ||one| @end|ng |rom r@tud|o@com  Tue Mar 17 12:19:07 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Tue, 17 Mar 2020 12:19:07 +0100
Subject: [Rd] 
 new bquote feature splice does not address a common LISP @ use case?
In-Reply-To: <CAOO9MKUPoULvz8tRULcbMTTyLHL-FDF21f-hthNDWPUu_doVQQ@mail.gmail.com>
References: <CAOO9MKUPoULvz8tRULcbMTTyLHL-FDF21f-hthNDWPUu_doVQQ@mail.gmail.com>
Message-ID: <CAJf4E3p7itoh99W1g1+5V09wWwp+mzAk6JHiRryDBDGu=fQ0Hw@mail.gmail.com>

Hi Jan,

In the lisp code you provide the operators are parsed as simple
symbols in a pairlist. In the R snippet, they are parsed as
left-associative binary operators of equal precedence. If you unquote
a call in the right-hand side, you're artificially bypassing the
left-associativity of these operators.

To achieve what you're looking for in a general way, you'll need a
more precise definition of the problem, and a solution that probably
involves rotating the AST accordingly (see
https://github.com/r-lib/rlang/blob/master/src/internal/expr-interp-rotate.c).
Maybe it could be possible to formulate a definition where splicing in
special calls like binary operators produces the same AST as the user
would type by hand. It seems this would make splicing easier to use
for end users, but make the metaprogramming model more complex for
experts. This is an interesting perspective though. It also seems
vaguely connected to the problem of splicing within model formulas.

I see in your example that the new ..() operator in `bquote()` allows
splicing calls, and seems to unquote them instead of splicing. In the
first versions of rlang, splicing with !!! behaved just like this. We
changed this behaviour last year and I would like to share the
motivations behind this decision, as it might be helpful to inform the
semantics of ..() in bquote() in R 4.0.

The bottom line is that calls are now treated like scalars. This is a
slight contortion of the syntax because calls are "language lists",
and so they could be conceived as collections rather than scalars.
However, R is vector-oriented rather than pairlist-oriented, and
treating calls as scalars makes the metaprogramming model simpler.

This is also how `bquote(splice = TRUE)` works. However `bquote()`
and rlang do not treat scalars in the same way. In rlang scalars
cannot be spliced, they must be unquoted.

```
bquote(foo(..(function() NULL)), splice = TRUE)
#> foo(function() NULL)

bquote(foo(..(quote(bar))), splice = TRUE)
#> foo(bar)

expr(foo(!!!function() NULL))
#> Error: Can't splice an object of type `closure` because it is not a vector.

expr(foo(!!!quote(bar)))
#> foo(bar)
#> Warning message:
#> Unquoting language objects with `!!!` is deprecated as of rlang 0.4.0.
#> Please use `!!` instead.
```

We decided to disallow splicing scalars (and thus calls) in rlang even
though this is a legal operation in many lisps. In lisps, the splicing
operation stands for unquoting in the CDR of a pairlist. By contrast
the unquote operation unquotes in the CAR. For example `(1 , at 3) is
legal in Common Lisp and stands for the cons cell (1 . 3). I think
such semantics are not appealing in a language like R because it is
vector-oriented rather than pairlist oriented. Pairlists are mostly an
implicit data structure that users are not familiar with, and they are
not even fully supported in all implementations of R (for instance
TERR and Renjin do not allow non-NULL terminated pairlists, and while
GNU R has vestigial print() support for these, they cause str() to crash).

In general, it is much more useful to define a splice operation that
also works for vectors:

```
rlang::list2(1, !!!10:11, 3)
#> [[1]]
#> [1] 1
#>
#> [[2]]
#> [1] 10
#>
#> [[3]]
#> [1] 11
#>
#> [[4]]
#> [1] 3
```

Because vectors do not have any notion of CDR, the usual lisp
interpretation of splicing scalars does not apply.

One alternative to make it work is to devolve the splicing operation
into a simple unquote operation, when supplied a scalar. This is how
`bquote(splice = TRUE)` works. However I think this kind of
overloading is more confusing in the long run, and makes it harder for
users to form a correct mental model for programming with these
operations. For this reason it seems preferable to force users to be
explicit about the desired semantics with scalars and calls. In rlang
they must either unquote the call, or explicitly transform it to a
list prior to splicing:

```
x <- quote(bar + baz)

# Unquote instead of splicing
expr(foo(!!x))
#> foo(bar + baz)

# Convert to list and then splice
expr(add(!!!as.list(x[-1])))
#> add(bar, baz)
```

Unquoting could be consistent if all objects were truly vectors in R,
i.e. if they were implicitly wrapped in a list. Then ..(quote(foo))
would be very similar to ..(1). In the former case a list of size 1
would be spliced, in the latter case a vector of size 1 is
spliced. This would explain why .() and ..() have the same behaviour
with scalars. While an interesting thought experiment, this is not
how scalars work in R.

It seems relevant that Clojure is a lisp that does not allow splicing
scalars. Like rlang, Clojure defines the splicing operation in other
contexts than pairlists, such as vectors. I suspect the rationale of
making scalar-splicing an error in Clojure, even in pairlist context,
is to avoid overloading the semantics of this fundamental operation.

Best,
Lionel


On 3/17/20, Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
> Dear R-devel,
>
> There is a new feature in R-devel, which explicitly refers to LISP @
> operator for splicing.
>
>> The backquote function bquote() has a new argument splice to enable
>> splicing a computed list of values into an expression, like ,@ in LISP's
>> backquote.
>
> Although the most upvoted SO question asking for exactly LISP's @
> functionality in R doesn't seems to be addressed by this new feature.
>
> Is it possible to use new splice feature to create `6 - 5 + 4`
> expression rather than `6 - (5 + 4)`?
>
> b = quote(5+4)
> b
> #5 + 4
> c = bquote(6-.(b))
> c
> #6 - (5 + 4)
> d = bquote(6-..(b), splice=TRUE)
> d
> #6 - (5 + 4)
>
> There is corresponding LISP code provided
>
> CL-USER>
> (setf b `(5 + 4))
> (5 + 4)
> CL-USER>
> (setf c `(6 - , at b))
> (6 - 5 + 4)
> CL-USER>
> (setf c-non-spliced `(6 - ,b))
> (6 - (5 + 4))
> CL-USER>
>
> Thanks,
> Jan Gorecki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Tue Mar 17 16:32:03 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Tue, 17 Mar 2020 15:32:03 +0000
Subject: [Rd] strange bahaviour of predict.lm
In-Reply-To: <1036255203.4045518.1584429038689@mail.yahoo.com>
References: <1834195606.3992457.1584419764603.ref@mail.yahoo.com>
 <1834195606.3992457.1584419764603@mail.yahoo.com>
 <862c2c94-f11d-2451-17a7-72994a89d9ff@sapo.pt>
 <1036255203.4045518.1584429038689@mail.yahoo.com>
Message-ID: <085ba008-b070-e361-17b4-4ff265c35ee3@sapo.pt>

Hello,

I'm glad that it worked.
Two things:

1. Please, click reply all to keep this threaded.
2. The question should have belonged to r-help at r-project.org, not to 
r-devel at r-project.org.

Rui Barradas

?s 07:10 de 17/03/20, Moshe Olshansky escreveu:
> It works, thank you!
> 
> On Tuesday, 17 March 2020, 5:47:05 pm AEDT, Rui Barradas 
> <ruipbarradas at sapo.pt> wrote:
> 
> 
> Hello,
> 
> The problem seems to be that A is a matrix. The following solves the error.
> 
> # create A and b as in your code then run
> A <- as.data.frame(A)
> df1 <- cbind(A, b)
> reg <- lm(b ~ ., df1)
> 
> # etc
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
> ?s 04:36 de 17/03/20, Moshe Olshansky via R-devel escreveu:
>  > Hello,
>  > Below is my code:
>  >> A <- matrix(rnorm(10*3),ncol=3)
>  >> b <- runif(10)
>  >> reg <- lm(b ~ A)
>  >> A1 <- matrix(rnorm(5*3),ncol=3)
>  >> A1 <- as.data.frame(A1)
>  >> b1 <- predict(reg,A1)
>  > Warning message:
>  > 'newdata' had 5 rows but variables found have 10 rows
>  >
>  >? ? And instead of being an array of length 5, b1 is of length 10 and 
> is identical to reg$fitted.values
>  > I think that it should not be like this.
>  > Let me note that for lm I do not care about this as much since I can 
> use reg$coefficients, but unfortunately this behaviour is "inherited" by 
> other methods. When I am trying to fit a regression tree, predicting 
> from the object without using 'predict' method is less trivial.
>  > Thank you,Moshe.
>  > P.S. just in case:> sessionInfo()
>  > R version 3.6.2 (2019-12-12)
>  > Platform: x86_64-pc-linux-gnu (64-bit)
>  > Running under: Linux Mint 19.1
>  >
>  > Matrix products: default
>  > BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
>  > LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1
>  >
>  > locale:
>  > [1] C
>  >
>  > attached base packages:
>  > [1] stats???? graphics? grDevices utils???? datasets? methods?? base
>  >
>  > loaded via a namespace (and not attached):
>  > [1] compiler_3.6.2 tools_3.6.2
> 
>  >
>  >
>  >
>  >
>  >
>  > ??? [[alternative HTML version deleted]]
>  >
>  > ______________________________________________
>  > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>  > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>  >


From m|n@h@|| @end|ng |rom um|ch@edu  Mon Mar 16 20:06:32 2020
From: m|n@h@|| @end|ng |rom um|ch@edu (Greg Minshall)
Date: Mon, 16 Mar 2020 22:06:32 +0300
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: Your message of "Mon, 16 Mar 2020 12:12:58 +0000."
 <CABtg=Km40QTasqtxuT=YgLdU0c3kveku=pqOU7O4GpyTj1wP=w@mail.gmail.com>
Message-ID: <405191.1584385592@apollo2.minshall.org>

Gabor, thanks.  yes, managing the two-way communication is always a bit
error-prone, as it depends on the input/output characteristics of the
two ends -- they either match, or deadlock.  it's too bad if polling is
always *required* -- i'd think sometimes a programmer would be happy
blocking, though other times one wants better control over when to
block.  cheers, Greg


From m|n@h@|| @end|ng |rom um|ch@edu  Tue Mar 17 05:08:31 2020
From: m|n@h@|| @end|ng |rom um|ch@edu (Greg Minshall)
Date: Tue, 17 Mar 2020 07:08:31 +0300
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: Your message of "Tue, 17 Mar 2020 13:33:59 +1300."
 <F3993DC8-13D5-4E15-9258-E5D959B2958A@R-project.org>
Message-ID: <424318.1584418111@apollo2.minshall.org>

Simon,

> FWIW if you're on unix, you can use named pipes (fifos) for that:

i've always wondered what named pipes actually were.  thanks!

cheers, Greg


From m|n@h@|| @end|ng |rom um|ch@edu  Mon Mar 16 20:03:46 2020
From: m|n@h@|| @end|ng |rom um|ch@edu (Greg Minshall)
Date: Mon, 16 Mar 2020 22:03:46 +0300
Subject: [Rd] pipe(): input to, and output from, a single process
In-Reply-To: Your message of "Mon, 16 Mar 2020 09:57:17 -0500."
 <24175.37837.327452.570562@rob.eddelbuettel.com>
Message-ID: <404876.1584385426@apollo2.minshall.org>

Dirk,

> Octave had this already in the 1990s, see documentation for 'popen2' here:

thanks.  unix that had since the 1970s... :)

cheers, Greg


From hp@ge@ @end|ng |rom |redhutch@org  Tue Mar 17 20:18:31 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 17 Mar 2020 12:18:31 -0700
Subject: [Rd] configure --with-pcre1 fails with latest R 4.0 on Ubuntu 14.04
Message-ID: <88ffc07e-6370-eb7c-a331-6753dae1786c@fredhutch.org>

Using --with-pcre1 to configure the latest R 4.0 (revision 77988) on an 
Ubuntu 14.04.5 LTS system gives me the following error:

...
checking if lzma version >= 5.0.3... yes
checking for pcre2-config... no
checking for pcre_fullinfo in -lpcre... yes
checking pcre.h usability... yes
checking pcre.h presence... yes
checking for pcre.h... yes
checking pcre/pcre.h usability... no
checking pcre/pcre.h presence... no
checking for pcre/pcre.h... no
checking if PCRE1 version >= 8.32 and has UTF-8 support... no
checking whether PCRE support suffices... configure: error: pcre2 
library and headers are required, or use --with-pcre1

Maybe the real problem is that the PCRE version on this OS is 8.31?

The error message is not particularly helpful.

Thanks,
H.

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From j@goreck| @end|ng |rom w|t@edu@p|  Wed Mar 18 06:31:56 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Wed, 18 Mar 2020 11:01:56 +0530
Subject: [Rd] 
 new bquote feature splice does not address a common LISP @ use case?
In-Reply-To: <CAJf4E3p7itoh99W1g1+5V09wWwp+mzAk6JHiRryDBDGu=fQ0Hw@mail.gmail.com>
References: <CAOO9MKUPoULvz8tRULcbMTTyLHL-FDF21f-hthNDWPUu_doVQQ@mail.gmail.com>
 <CAJf4E3p7itoh99W1g1+5V09wWwp+mzAk6JHiRryDBDGu=fQ0Hw@mail.gmail.com>
Message-ID: <CAOO9MKUA-h-TApKsrg=BD4cDy3zm-gZ1VUNcEx93CRyF2Rkrbw@mail.gmail.com>

Thank you Lionel for comprehensive explanation. I think that rotating
AST in base R is not a good way to go, it would probably complicate
the code heavily.

Best,
Jan Gorecki

On Tue, Mar 17, 2020 at 4:49 PM Lionel Henry <lionel at rstudio.com> wrote:
>
> Hi Jan,
>
> In the lisp code you provide the operators are parsed as simple
> symbols in a pairlist. In the R snippet, they are parsed as
> left-associative binary operators of equal precedence. If you unquote
> a call in the right-hand side, you're artificially bypassing the
> left-associativity of these operators.
>
> To achieve what you're looking for in a general way, you'll need a
> more precise definition of the problem, and a solution that probably
> involves rotating the AST accordingly (see
> https://github.com/r-lib/rlang/blob/master/src/internal/expr-interp-rotate.c).
> Maybe it could be possible to formulate a definition where splicing in
> special calls like binary operators produces the same AST as the user
> would type by hand. It seems this would make splicing easier to use
> for end users, but make the metaprogramming model more complex for
> experts. This is an interesting perspective though. It also seems
> vaguely connected to the problem of splicing within model formulas.
>
> I see in your example that the new ..() operator in `bquote()` allows
> splicing calls, and seems to unquote them instead of splicing. In the
> first versions of rlang, splicing with !!! behaved just like this. We
> changed this behaviour last year and I would like to share the
> motivations behind this decision, as it might be helpful to inform the
> semantics of ..() in bquote() in R 4.0.
>
> The bottom line is that calls are now treated like scalars. This is a
> slight contortion of the syntax because calls are "language lists",
> and so they could be conceived as collections rather than scalars.
> However, R is vector-oriented rather than pairlist-oriented, and
> treating calls as scalars makes the metaprogramming model simpler.
>
> This is also how `bquote(splice = TRUE)` works. However `bquote()`
> and rlang do not treat scalars in the same way. In rlang scalars
> cannot be spliced, they must be unquoted.
>
> ```
> bquote(foo(..(function() NULL)), splice = TRUE)
> #> foo(function() NULL)
>
> bquote(foo(..(quote(bar))), splice = TRUE)
> #> foo(bar)
>
> expr(foo(!!!function() NULL))
> #> Error: Can't splice an object of type `closure` because it is not a vector.
>
> expr(foo(!!!quote(bar)))
> #> foo(bar)
> #> Warning message:
> #> Unquoting language objects with `!!!` is deprecated as of rlang 0.4.0.
> #> Please use `!!` instead.
> ```
>
> We decided to disallow splicing scalars (and thus calls) in rlang even
> though this is a legal operation in many lisps. In lisps, the splicing
> operation stands for unquoting in the CDR of a pairlist. By contrast
> the unquote operation unquotes in the CAR. For example `(1 , at 3) is
> legal in Common Lisp and stands for the cons cell (1 . 3). I think
> such semantics are not appealing in a language like R because it is
> vector-oriented rather than pairlist oriented. Pairlists are mostly an
> implicit data structure that users are not familiar with, and they are
> not even fully supported in all implementations of R (for instance
> TERR and Renjin do not allow non-NULL terminated pairlists, and while
> GNU R has vestigial print() support for these, they cause str() to crash).
>
> In general, it is much more useful to define a splice operation that
> also works for vectors:
>
> ```
> rlang::list2(1, !!!10:11, 3)
> #> [[1]]
> #> [1] 1
> #>
> #> [[2]]
> #> [1] 10
> #>
> #> [[3]]
> #> [1] 11
> #>
> #> [[4]]
> #> [1] 3
> ```
>
> Because vectors do not have any notion of CDR, the usual lisp
> interpretation of splicing scalars does not apply.
>
> One alternative to make it work is to devolve the splicing operation
> into a simple unquote operation, when supplied a scalar. This is how
> `bquote(splice = TRUE)` works. However I think this kind of
> overloading is more confusing in the long run, and makes it harder for
> users to form a correct mental model for programming with these
> operations. For this reason it seems preferable to force users to be
> explicit about the desired semantics with scalars and calls. In rlang
> they must either unquote the call, or explicitly transform it to a
> list prior to splicing:
>
> ```
> x <- quote(bar + baz)
>
> # Unquote instead of splicing
> expr(foo(!!x))
> #> foo(bar + baz)
>
> # Convert to list and then splice
> expr(add(!!!as.list(x[-1])))
> #> add(bar, baz)
> ```
>
> Unquoting could be consistent if all objects were truly vectors in R,
> i.e. if they were implicitly wrapped in a list. Then ..(quote(foo))
> would be very similar to ..(1). In the former case a list of size 1
> would be spliced, in the latter case a vector of size 1 is
> spliced. This would explain why .() and ..() have the same behaviour
> with scalars. While an interesting thought experiment, this is not
> how scalars work in R.
>
> It seems relevant that Clojure is a lisp that does not allow splicing
> scalars. Like rlang, Clojure defines the splicing operation in other
> contexts than pairlists, such as vectors. I suspect the rationale of
> making scalar-splicing an error in Clojure, even in pairlist context,
> is to avoid overloading the semantics of this fundamental operation.
>
> Best,
> Lionel
>
>
> On 3/17/20, Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
> > Dear R-devel,
> >
> > There is a new feature in R-devel, which explicitly refers to LISP @
> > operator for splicing.
> >
> >> The backquote function bquote() has a new argument splice to enable
> >> splicing a computed list of values into an expression, like ,@ in LISP's
> >> backquote.
> >
> > Although the most upvoted SO question asking for exactly LISP's @
> > functionality in R doesn't seems to be addressed by this new feature.
> >
> > Is it possible to use new splice feature to create `6 - 5 + 4`
> > expression rather than `6 - (5 + 4)`?
> >
> > b = quote(5+4)
> > b
> > #5 + 4
> > c = bquote(6-.(b))
> > c
> > #6 - (5 + 4)
> > d = bquote(6-..(b), splice=TRUE)
> > d
> > #6 - (5 + 4)
> >
> > There is corresponding LISP code provided
> >
> > CL-USER>
> > (setf b `(5 + 4))
> > (5 + 4)
> > CL-USER>
> > (setf c `(6 - , at b))
> > (6 - 5 + 4)
> > CL-USER>
> > (setf c-non-spliced `(6 - ,b))
> > (6 - (5 + 4))
> > CL-USER>
> >
> > Thanks,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >


From j@goreck| @end|ng |rom w|t@edu@p|  Wed Mar 18 06:36:37 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Wed, 18 Mar 2020 11:06:37 +0530
Subject: [Rd] substitute inconsistent output
Message-ID: <CAOO9MKU08TaixderbmrAm70MYUzxb8Yv+mGxU4Faj=K+j9przA@mail.gmail.com>

Dear R-devel,

Is there anything that we can do to make output of those call more
consistent? So the first one will return `c(1L, 2L)` rather than
`1:2`. Note that it is not related to compact integer sequence
introduced by altrep, it is reproducible on R 3.1.0 as well.

substitute(v+x, list(x=c(1L,2L)))
#v + 1:2
substitute(v+x, list(x=c(0L,2L)))
#v + c(0L, 2L)

Thank you,
Jan Gorecki


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Mar 18 09:08:52 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 18 Mar 2020 09:08:52 +0100
Subject: [Rd] 
 configure --with-pcre1 fails with latest R 4.0 on Ubuntu 14.04
In-Reply-To: <88ffc07e-6370-eb7c-a331-6753dae1786c@fredhutch.org>
References: <88ffc07e-6370-eb7c-a331-6753dae1786c@fredhutch.org>
Message-ID: <ea3cba18-7462-b2bd-7ed3-194bbde26b6c@gmail.com>

On 3/17/20 8:18 PM, Herv? Pag?s wrote:
> Using --with-pcre1 to configure the latest R 4.0 (revision 77988) on 
> an Ubuntu 14.04.5 LTS system gives me the following error:
>
> ...
> checking if lzma version >= 5.0.3... yes
> checking for pcre2-config... no
> checking for pcre_fullinfo in -lpcre... yes
> checking pcre.h usability... yes
> checking pcre.h presence... yes
> checking for pcre.h... yes
> checking pcre/pcre.h usability... no
> checking pcre/pcre.h presence... no
> checking for pcre/pcre.h... no
> checking if PCRE1 version >= 8.32 and has UTF-8 support... no
> checking whether PCRE support suffices... configure: error: pcre2 
> library and headers are required, or use --with-pcre1
>
> Maybe the real problem is that the PCRE version on this OS is 8.31?

Yes, R requires PCRE version at least 8.32 as documented in R-Admin, and 
this is since September 2019.

> The error message is not particularly helpful.

An earlier version of the message gave the requirement explicitly, when 
people would have been more likely to have that old versions of PCRE1.
The few who still have it now need to see also the output line above to 
get the requirement and/or look into the manual.

R 4.0 is still keeping support for PCRE1 (>=8.32), but PCRE2 should be 
used whenever possible.

Best,
Tomas

>
> Thanks,
> H.
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Mar 18 10:45:24 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 18 Mar 2020 05:45:24 -0400
Subject: [Rd] substitute inconsistent output
In-Reply-To: <CAOO9MKU08TaixderbmrAm70MYUzxb8Yv+mGxU4Faj=K+j9przA@mail.gmail.com>
References: <CAOO9MKU08TaixderbmrAm70MYUzxb8Yv+mGxU4Faj=K+j9przA@mail.gmail.com>
Message-ID: <575c39cb-a522-a179-fb33-fa4c718afbab@gmail.com>

On 18/03/2020 1:36 a.m., Jan Gorecki wrote:
> Dear R-devel,
> 
> Is there anything that we can do to make output of those call more
> consistent? So the first one will return `c(1L, 2L)` rather than
> `1:2`. Note that it is not related to compact integer sequence
> introduced by altrep, it is reproducible on R 3.1.0 as well.
> 
> substitute(v+x, list(x=c(1L,2L)))
> #v + 1:2
> substitute(v+x, list(x=c(0L,2L)))
> #v + c(0L, 2L)
> 

That's purely the deparser (the returned value from substitute doesn't 
contain a call to ":"), but it's not optional.

So the output is consistent, it's the printing that is inconsistent.

Duncan Murdoch


From hp@ge@ @end|ng |rom |redhutch@org  Wed Mar 18 18:11:49 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 18 Mar 2020 10:11:49 -0700
Subject: [Rd] 
 configure --with-pcre1 fails with latest R 4.0 on Ubuntu 14.04
In-Reply-To: <ea3cba18-7462-b2bd-7ed3-194bbde26b6c@gmail.com>
References: <88ffc07e-6370-eb7c-a331-6753dae1786c@fredhutch.org>
 <ea3cba18-7462-b2bd-7ed3-194bbde26b6c@gmail.com>
Message-ID: <8b2ef49c-7a4c-e4e6-4612-e8592a860e62@fredhutch.org>

Thanks Tomas. Any chance the old version of the error message could be 
restored? It would definitely be more helpful than the current one. It's 
confusing to get an error and be told to use --with-pcre1 when you're 
already using it.

H.

On 3/18/20 01:08, Tomas Kalibera wrote:
> On 3/17/20 8:18 PM, Herv? Pag?s wrote:
>> Using --with-pcre1 to configure the latest R 4.0 (revision 77988) on 
>> an Ubuntu 14.04.5 LTS system gives me the following error:
>>
>> ...
>> checking if lzma version >= 5.0.3... yes
>> checking for pcre2-config... no
>> checking for pcre_fullinfo in -lpcre... yes
>> checking pcre.h usability... yes
>> checking pcre.h presence... yes
>> checking for pcre.h... yes
>> checking pcre/pcre.h usability... no
>> checking pcre/pcre.h presence... no
>> checking for pcre/pcre.h... no
>> checking if PCRE1 version >= 8.32 and has UTF-8 support... no
>> checking whether PCRE support suffices... configure: error: pcre2 
>> library and headers are required, or use --with-pcre1
>>
>> Maybe the real problem is that the PCRE version on this OS is 8.31?
> 
> Yes, R requires PCRE version at least 8.32 as documented in R-Admin, and 
> this is since September 2019.
> 
>> The error message is not particularly helpful.
> 
> An earlier version of the message gave the requirement explicitly, when 
> people would have been more likely to have that old versions of PCRE1.
> The few who still have it now need to see also the output line above to 
> get the requirement and/or look into the manual.
> 
> R 4.0 is still keeping support for PCRE1 (>=8.32), but PCRE2 should be 
> used whenever possible.
> 
> Best,
> Tomas
> 
>>
>> Thanks,
>> H.
>>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Mar 19 03:19:11 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 18 Mar 2020 19:19:11 -0700
Subject: [Rd] R CMD check --as-cran attempts to hide R_LIBS_USER but fails
Message-ID: <CAFDcVCS=8+L-=+2ejDudUFHT=sOMX_7Avo=xHLQ2pOR0jmE5Sw@mail.gmail.com>

AFAIU, 'R CMD check --as-cran' tries to hide any site and user package
libraries by setting R_LIBS_SITE and R_LIBS_USER.  However, contrary
to R_LIBS_SITE, it fails for R_LIBS_USER and the user's personal
library is still available for test scripts.  Should I revise my
assumptions, or is that intentional?

The short version. Shouldn't:

$ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()"
[1] "/home/hb/R/x86_64-pc-linux-gnu-library/4.0"
[2] "/home/hb/software/R-devel/trunk/lib/R/library"

give the same output as:

$ R_LIBS_USER="no_such_dir" Rscript --vanilla -e ".libPaths()"
[1] "/home/hb/software/R-devel/trunk/lib/R/library"

?

The long version:

R_LIBS_SITE='no_such_dir' and R_LIBS_USER=''  is set up at the very
end of tools:::setRlibs():

setRlibs <-
    ...
    c(paste0("R_LIBS=", rlibs),
      if(WINDOWS) " R_ENVIRON_USER='no_such_file'" else "R_ENVIRON_USER=''",
      if(WINDOWS) " R_LIBS_USER='no_such_dir'" else "R_LIBS_USER=''",
      " R_LIBS_SITE='no_such_dir'")
}

Monitoring with 'pstree' confirms this. On Linux with R 3.6.3, the
call stack of a 'R CMD check --as-cran teeny_0.1.0.tar.gz' call looks
like this when a test script is running:

`-sh /usr/lib/R/bin/check --as-cran teeny_0.1.0.tar.gz
 `-R --no-restore --slave --args nextArg--as-crannextArgteeny_0.1.0.tar.gz
  `-sh -c LANGUAGE=en _R_CHECK_INTERNALS2_=1
R_LIBS=/tmp/hb/RtmpQj4hXb/RLIBS_26e766e32c18 R_ENVIRON_USER=''
R_LIBS_USER=''  R_LIBS_SITE='no_such_dir' '/usr/lib/R/bin/R' --vanilla
--slave < '/tmp/hb/RtmpQj4hXb/file26e763770b6a'
   `-R --vanilla --slave
    `-sh -c LANGUAGE=C R_TESTS=startup.Rs '/usr/lib/R/bin/R' CMD BATCH
--vanilla  'env.R' 'env.Rout'
     `-sh /usr/lib/R/bin/BATCH --vanilla env.R env.Rout
      `-R -f env.R --restore --save --no-readline --vanilla
       `-sh -c 'pstree' --arguments --long --show-parents 10558
        `-pstree --arguments --long --show-parents 10558

However, if I call print(Sys.getenv("R_LIBS_USER")) in my tests/env.R,
I'll find that it is no longer empty but it is indeed set to my
personal library "~/R/x86_64-pc-linux-gnu-library/3.6".


TROUBLESHOOTING:

It looks like R_LIBS_USER is set if and only if it's empty by Renviron
in my system folder:

$ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/3.6'}
#R_LIBS_USER=${R_LIBS_USER-'~/Library/R/3.6/library'}
# edd Jul 2007  Now use R_LIBS_SITE, not R_LIBS
R_LIBS_SITE=${R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}

This is from installing R on Ubuntu 18.04 using 'apt install
r-base-core'.  To make sure it's not an issue with that distribution,
I also check a 'configure/make/make install' from SVN trunk and there
I see the same:

$ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/4.0'}
#R_LIBS_USER=${R_LIBS_USER-'~/Library/R/4.0/library'}

Printing it during tests/env.R confirms that it is indeed set to
"~/R/x86_64-pc-linux-gnu-library/4.0".

/Henrik


From edd @end|ng |rom deb|@n@org  Thu Mar 19 04:04:47 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 18 Mar 2020 22:04:47 -0500
Subject: [Rd] 
 R CMD check --as-cran attempts to hide R_LIBS_USER but fails
In-Reply-To: <CAFDcVCS=8+L-=+2ejDudUFHT=sOMX_7Avo=xHLQ2pOR0jmE5Sw@mail.gmail.com>
References: <CAFDcVCS=8+L-=+2ejDudUFHT=sOMX_7Avo=xHLQ2pOR0jmE5Sw@mail.gmail.com>
Message-ID: <24178.57679.999837.472273@rob.eddelbuettel.com>


On 18 March 2020 at 19:19, Henrik Bengtsson wrote:
| AFAIU, 'R CMD check --as-cran' tries to hide any site and user package
| libraries by setting R_LIBS_SITE and R_LIBS_USER.  However, contrary

What makes you think that? AFAIK --as-cran just sets a bunch of the (nearly
countless) environment variables (all described in R Inst+Admin, as I recall)
to a set of values "close to" values CRAN uses.

| to R_LIBS_SITE, it fails for R_LIBS_USER and the user's personal
| library is still available for test scripts.  Should I revise my
| assumptions, or is that intentional?

I would place a nickel on the former if betting was allowed in Illinois.

  edd at rob:~$ Rscript --vanilla -e ".libPaths()"
  [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"      
  [3] "/usr/lib/R/library"           
  edd at rob:~$ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()" 
  [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"      
  [3] "/usr/lib/R/library"           
  edd at rob:~$ 

I happen to turn per-user libraries off by default, which may affect things.
That said, I actually quite like having the same paths. Your mileage, as they
say, may vary.

Dirk


| The short version. Shouldn't:
| 
| $ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()"
| [1] "/home/hb/R/x86_64-pc-linux-gnu-library/4.0"
| [2] "/home/hb/software/R-devel/trunk/lib/R/library"
| 
| give the same output as:
| 
| $ R_LIBS_USER="no_such_dir" Rscript --vanilla -e ".libPaths()"
| [1] "/home/hb/software/R-devel/trunk/lib/R/library"
| 
| ?
| 
| The long version:
| 
| R_LIBS_SITE='no_such_dir' and R_LIBS_USER=''  is set up at the very
| end of tools:::setRlibs():
| 
| setRlibs <-
|     ...
|     c(paste0("R_LIBS=", rlibs),
|       if(WINDOWS) " R_ENVIRON_USER='no_such_file'" else "R_ENVIRON_USER=''",
|       if(WINDOWS) " R_LIBS_USER='no_such_dir'" else "R_LIBS_USER=''",
|       " R_LIBS_SITE='no_such_dir'")
| }
| 
| Monitoring with 'pstree' confirms this. On Linux with R 3.6.3, the
| call stack of a 'R CMD check --as-cran teeny_0.1.0.tar.gz' call looks
| like this when a test script is running:
| 
| `-sh /usr/lib/R/bin/check --as-cran teeny_0.1.0.tar.gz
|  `-R --no-restore --slave --args nextArg--as-crannextArgteeny_0.1.0.tar.gz
|   `-sh -c LANGUAGE=en _R_CHECK_INTERNALS2_=1
| R_LIBS=/tmp/hb/RtmpQj4hXb/RLIBS_26e766e32c18 R_ENVIRON_USER=''
| R_LIBS_USER=''  R_LIBS_SITE='no_such_dir' '/usr/lib/R/bin/R' --vanilla
| --slave < '/tmp/hb/RtmpQj4hXb/file26e763770b6a'
|    `-R --vanilla --slave
|     `-sh -c LANGUAGE=C R_TESTS=startup.Rs '/usr/lib/R/bin/R' CMD BATCH
| --vanilla  'env.R' 'env.Rout'
|      `-sh /usr/lib/R/bin/BATCH --vanilla env.R env.Rout
|       `-R -f env.R --restore --save --no-readline --vanilla
|        `-sh -c 'pstree' --arguments --long --show-parents 10558
|         `-pstree --arguments --long --show-parents 10558
| 
| However, if I call print(Sys.getenv("R_LIBS_USER")) in my tests/env.R,
| I'll find that it is no longer empty but it is indeed set to my
| personal library "~/R/x86_64-pc-linux-gnu-library/3.6".
| 
| 
| TROUBLESHOOTING:
| 
| It looks like R_LIBS_USER is set if and only if it's empty by Renviron
| in my system folder:
| 
| $ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
| R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/3.6'}
| #R_LIBS_USER=${R_LIBS_USER-'~/Library/R/3.6/library'}
| # edd Jul 2007  Now use R_LIBS_SITE, not R_LIBS
| R_LIBS_SITE=${R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}
| 
| This is from installing R on Ubuntu 18.04 using 'apt install
| r-base-core'.  To make sure it's not an issue with that distribution,
| I also check a 'configure/make/make install' from SVN trunk and there
| I see the same:
| 
| $ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
| R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/4.0'}
| #R_LIBS_USER=${R_LIBS_USER-'~/Library/R/4.0/library'}
| 
| Printing it during tests/env.R confirms that it is indeed set to
| "~/R/x86_64-pc-linux-gnu-library/4.0".
| 
| /Henrik
| 
| ______________________________________________
| R-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Mar 19 05:38:20 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 18 Mar 2020 21:38:20 -0700
Subject: [Rd] 
 R CMD check --as-cran attempts to hide R_LIBS_USER but fails
In-Reply-To: <24178.57679.999837.472273@rob.eddelbuettel.com>
References: <CAFDcVCS=8+L-=+2ejDudUFHT=sOMX_7Avo=xHLQ2pOR0jmE5Sw@mail.gmail.com>
 <24178.57679.999837.472273@rob.eddelbuettel.com>
Message-ID: <CAFDcVCT_R5zgrWon972wOUWAyy2NJgQMSg8Gq02+UUcYUm1uPw@mail.gmail.com>

On Wed, Mar 18, 2020 at 8:04 PM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 18 March 2020 at 19:19, Henrik Bengtsson wrote:
> | AFAIU, 'R CMD check --as-cran' tries to hide any site and user package
> | libraries by setting R_LIBS_SITE and R_LIBS_USER.  However, contrary
>
> What makes you think that? AFAIK --as-cran just sets a bunch of the (nearly
> countless) environment variables (all described in R Inst+Admin, as I recall)
> to a set of values "close to" values CRAN uses.

1. --as-cran sets R_LIBS_SITE='no_such_dir' and R_LIBS_USER='',
whereas without --as-cran they're not set.

2. --as-cran sets R_LIBS_USER='no_such_dir' on Windows and there it is
masked, i.e. tests scripts do NOT see user's personal library because
print(Sys.getenv("R_LIBS_USER")) is reported as "'no_such_dir'"
(sic!).

The only other interpretation I can imagine from using R_LIBS_USER=''
on Linux is that is exists there to force the default settings in case
it is already set externally by user.  For example, if one do

  export R_LIBS_USER="$PWD"
  R --vanilla CMD check --as-cran teeny_0.1.0.tar.gz

then tests scripts still get R_LIBS_USER="~/R/x86_64-pc-linux-gnu-library/3.6".

But, then why is there a difference between Windows and Linux in this
essential behavior?  To me, this suggests there is a mistake
somewhere.  OTH, I know that lots of oddities in R exist for a reason.

/Henrik

>
> | to R_LIBS_SITE, it fails for R_LIBS_USER and the user's personal
> | library is still available for test scripts.  Should I revise my
> | assumptions, or is that intentional?
>
> I would place a nickel on the former if betting was allowed in Illinois.
>
>   edd at rob:~$ Rscript --vanilla -e ".libPaths()"
>   [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
>   [3] "/usr/lib/R/library"
>   edd at rob:~$ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()"
>   [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
>   [3] "/usr/lib/R/library"
>   edd at rob:~$
>
> I happen to turn per-user libraries off by default, which may affect things.
> That said, I actually quite like having the same paths. Your mileage, as they
> say, may vary.
>
> Dirk
>
>
> | The short version. Shouldn't:
> |
> | $ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()"
> | [1] "/home/hb/R/x86_64-pc-linux-gnu-library/4.0"
> | [2] "/home/hb/software/R-devel/trunk/lib/R/library"
> |
> | give the same output as:
> |
> | $ R_LIBS_USER="no_such_dir" Rscript --vanilla -e ".libPaths()"
> | [1] "/home/hb/software/R-devel/trunk/lib/R/library"
> |
> | ?
> |
> | The long version:
> |
> | R_LIBS_SITE='no_such_dir' and R_LIBS_USER=''  is set up at the very
> | end of tools:::setRlibs():
> |
> | setRlibs <-
> |     ...
> |     c(paste0("R_LIBS=", rlibs),
> |       if(WINDOWS) " R_ENVIRON_USER='no_such_file'" else "R_ENVIRON_USER=''",
> |       if(WINDOWS) " R_LIBS_USER='no_such_dir'" else "R_LIBS_USER=''",
> |       " R_LIBS_SITE='no_such_dir'")
> | }
> |
> | Monitoring with 'pstree' confirms this. On Linux with R 3.6.3, the
> | call stack of a 'R CMD check --as-cran teeny_0.1.0.tar.gz' call looks
> | like this when a test script is running:
> |
> | `-sh /usr/lib/R/bin/check --as-cran teeny_0.1.0.tar.gz
> |  `-R --no-restore --slave --args nextArg--as-crannextArgteeny_0.1.0.tar.gz
> |   `-sh -c LANGUAGE=en _R_CHECK_INTERNALS2_=1
> | R_LIBS=/tmp/hb/RtmpQj4hXb/RLIBS_26e766e32c18 R_ENVIRON_USER=''
> | R_LIBS_USER=''  R_LIBS_SITE='no_such_dir' '/usr/lib/R/bin/R' --vanilla
> | --slave < '/tmp/hb/RtmpQj4hXb/file26e763770b6a'
> |    `-R --vanilla --slave
> |     `-sh -c LANGUAGE=C R_TESTS=startup.Rs '/usr/lib/R/bin/R' CMD BATCH
> | --vanilla  'env.R' 'env.Rout'
> |      `-sh /usr/lib/R/bin/BATCH --vanilla env.R env.Rout
> |       `-R -f env.R --restore --save --no-readline --vanilla
> |        `-sh -c 'pstree' --arguments --long --show-parents 10558
> |         `-pstree --arguments --long --show-parents 10558
> |
> | However, if I call print(Sys.getenv("R_LIBS_USER")) in my tests/env.R,
> | I'll find that it is no longer empty but it is indeed set to my
> | personal library "~/R/x86_64-pc-linux-gnu-library/3.6".
> |
> |
> | TROUBLESHOOTING:
> |
> | It looks like R_LIBS_USER is set if and only if it's empty by Renviron
> | in my system folder:
> |
> | $ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
> | R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/3.6'}
> | #R_LIBS_USER=${R_LIBS_USER-'~/Library/R/3.6/library'}
> | # edd Jul 2007  Now use R_LIBS_SITE, not R_LIBS
> | R_LIBS_SITE=${R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}
> |
> | This is from installing R on Ubuntu 18.04 using 'apt install
> | r-base-core'.  To make sure it's not an issue with that distribution,
> | I also check a 'configure/make/make install' from SVN trunk and there
> | I see the same:
> |
> | $ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
> | R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/4.0'}
> | #R_LIBS_USER=${R_LIBS_USER-'~/Library/R/4.0/library'}
> |
> | Printing it during tests/env.R confirms that it is indeed set to
> | "~/R/x86_64-pc-linux-gnu-library/4.0".
> |
> | /Henrik
> |
> | ______________________________________________
> | R-devel at r-project.org mailing list
> | https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Mar 20 23:25:13 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 20 Mar 2020 17:25:13 -0500 (CDT)
Subject: [Rd] 
 [External] Re: new bquote feature splice does not address a
 common LISP @ use case?
In-Reply-To: <CAJf4E3p7itoh99W1g1+5V09wWwp+mzAk6JHiRryDBDGu=fQ0Hw@mail.gmail.com>
References: <CAOO9MKUPoULvz8tRULcbMTTyLHL-FDF21f-hthNDWPUu_doVQQ@mail.gmail.com>
 <CAJf4E3p7itoh99W1g1+5V09wWwp+mzAk6JHiRryDBDGu=fQ0Hw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2003201722390.23431@luke-Latitude-7480>

The intent is that ..() only be used with vectors but this isn't
enforced at present. I'll think about signaling an error if
is.vector(mexp) is not true.

Best,

luke

On Tue, 17 Mar 2020, Lionel Henry wrote:

> Hi Jan,
>
> In the lisp code you provide the operators are parsed as simple
> symbols in a pairlist. In the R snippet, they are parsed as
> left-associative binary operators of equal precedence. If you unquote
> a call in the right-hand side, you're artificially bypassing the
> left-associativity of these operators.
>
> To achieve what you're looking for in a general way, you'll need a
> more precise definition of the problem, and a solution that probably
> involves rotating the AST accordingly (see
> https://github.com/r-lib/rlang/blob/master/src/internal/expr-interp-rotate.c).
> Maybe it could be possible to formulate a definition where splicing in
> special calls like binary operators produces the same AST as the user
> would type by hand. It seems this would make splicing easier to use
> for end users, but make the metaprogramming model more complex for
> experts. This is an interesting perspective though. It also seems
> vaguely connected to the problem of splicing within model formulas.
>
> I see in your example that the new ..() operator in `bquote()` allows
> splicing calls, and seems to unquote them instead of splicing. In the
> first versions of rlang, splicing with !!! behaved just like this. We
> changed this behaviour last year and I would like to share the
> motivations behind this decision, as it might be helpful to inform the
> semantics of ..() in bquote() in R 4.0.
>
> The bottom line is that calls are now treated like scalars. This is a
> slight contortion of the syntax because calls are "language lists",
> and so they could be conceived as collections rather than scalars.
> However, R is vector-oriented rather than pairlist-oriented, and
> treating calls as scalars makes the metaprogramming model simpler.
>
> This is also how `bquote(splice = TRUE)` works. However `bquote()`
> and rlang do not treat scalars in the same way. In rlang scalars
> cannot be spliced, they must be unquoted.
>
> ```
> bquote(foo(..(function() NULL)), splice = TRUE)
> #> foo(function() NULL)
>
> bquote(foo(..(quote(bar))), splice = TRUE)
> #> foo(bar)
>
> expr(foo(!!!function() NULL))
> #> Error: Can't splice an object of type `closure` because it is not a vector.
>
> expr(foo(!!!quote(bar)))
> #> foo(bar)
> #> Warning message:
> #> Unquoting language objects with `!!!` is deprecated as of rlang 0.4.0.
> #> Please use `!!` instead.
> ```
>
> We decided to disallow splicing scalars (and thus calls) in rlang even
> though this is a legal operation in many lisps. In lisps, the splicing
> operation stands for unquoting in the CDR of a pairlist. By contrast
> the unquote operation unquotes in the CAR. For example `(1 , at 3) is
> legal in Common Lisp and stands for the cons cell (1 . 3). I think
> such semantics are not appealing in a language like R because it is
> vector-oriented rather than pairlist oriented. Pairlists are mostly an
> implicit data structure that users are not familiar with, and they are
> not even fully supported in all implementations of R (for instance
> TERR and Renjin do not allow non-NULL terminated pairlists, and while
> GNU R has vestigial print() support for these, they cause str() to crash).
>
> In general, it is much more useful to define a splice operation that
> also works for vectors:
>
> ```
> rlang::list2(1, !!!10:11, 3)
> #> [[1]]
> #> [1] 1
> #>
> #> [[2]]
> #> [1] 10
> #>
> #> [[3]]
> #> [1] 11
> #>
> #> [[4]]
> #> [1] 3
> ```
>
> Because vectors do not have any notion of CDR, the usual lisp
> interpretation of splicing scalars does not apply.
>
> One alternative to make it work is to devolve the splicing operation
> into a simple unquote operation, when supplied a scalar. This is how
> `bquote(splice = TRUE)` works. However I think this kind of
> overloading is more confusing in the long run, and makes it harder for
> users to form a correct mental model for programming with these
> operations. For this reason it seems preferable to force users to be
> explicit about the desired semantics with scalars and calls. In rlang
> they must either unquote the call, or explicitly transform it to a
> list prior to splicing:
>
> ```
> x <- quote(bar + baz)
>
> # Unquote instead of splicing
> expr(foo(!!x))
> #> foo(bar + baz)
>
> # Convert to list and then splice
> expr(add(!!!as.list(x[-1])))
> #> add(bar, baz)
> ```
>
> Unquoting could be consistent if all objects were truly vectors in R,
> i.e. if they were implicitly wrapped in a list. Then ..(quote(foo))
> would be very similar to ..(1). In the former case a list of size 1
> would be spliced, in the latter case a vector of size 1 is
> spliced. This would explain why .() and ..() have the same behaviour
> with scalars. While an interesting thought experiment, this is not
> how scalars work in R.
>
> It seems relevant that Clojure is a lisp that does not allow splicing
> scalars. Like rlang, Clojure defines the splicing operation in other
> contexts than pairlists, such as vectors. I suspect the rationale of
> making scalar-splicing an error in Clojure, even in pairlist context,
> is to avoid overloading the semantics of this fundamental operation.
>
> Best,
> Lionel
>
>
> On 3/17/20, Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
>> Dear R-devel,
>>
>> There is a new feature in R-devel, which explicitly refers to LISP @
>> operator for splicing.
>>
>>> The backquote function bquote() has a new argument splice to enable
>>> splicing a computed list of values into an expression, like ,@ in LISP's
>>> backquote.
>>
>> Although the most upvoted SO question asking for exactly LISP's @
>> functionality in R doesn't seems to be addressed by this new feature.
>>
>> Is it possible to use new splice feature to create `6 - 5 + 4`
>> expression rather than `6 - (5 + 4)`?
>>
>> b = quote(5+4)
>> b
>> #5 + 4
>> c = bquote(6-.(b))
>> c
>> #6 - (5 + 4)
>> d = bquote(6-..(b), splice=TRUE)
>> d
>> #6 - (5 + 4)
>>
>> There is corresponding LISP code provided
>>
>> CL-USER>
>> (setf b `(5 + 4))
>> (5 + 4)
>> CL-USER>
>> (setf c `(6 - , at b))
>> (6 - 5 + 4)
>> CL-USER>
>> (setf c-non-spliced `(6 - ,b))
>> (6 - (5 + 4))
>> CL-USER>
>>
>> Thanks,
>> Jan Gorecki
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sat Mar 21 07:55:58 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sat, 21 Mar 2020 07:55:58 +0100
Subject: [Rd] 
 configure --with-pcre1 fails with latest R 4.0 on Ubuntu 14.04
In-Reply-To: <8b2ef49c-7a4c-e4e6-4612-e8592a860e62@fredhutch.org>
References: <88ffc07e-6370-eb7c-a331-6753dae1786c@fredhutch.org>
 <ea3cba18-7462-b2bd-7ed3-194bbde26b6c@gmail.com>
 <8b2ef49c-7a4c-e4e6-4612-e8592a860e62@fredhutch.org>
Message-ID: <b17858d8-3733-8635-e366-df2350654ffa@gmail.com>

On 3/18/20 6:11 PM, Herv? Pag?s wrote:
> Thanks Tomas. Any chance the old version of the error message could be 
> restored? It would definitely be more helpful than the current one. 
> It's confusing to get an error and be told to use --with-pcre1 when 
> you're already using it.

The message now gives the required version and UTF-8 support 
requirement, so one does not have to look that one line up.
Thanks to Brian Ripley,

Tomas

>
>
> H.
>
> On 3/18/20 01:08, Tomas Kalibera wrote:
>> On 3/17/20 8:18 PM, Herv? Pag?s wrote:
>>> Using --with-pcre1 to configure the latest R 4.0 (revision 77988) on 
>>> an Ubuntu 14.04.5 LTS system gives me the following error:
>>>
>>> ...
>>> checking if lzma version >= 5.0.3... yes
>>> checking for pcre2-config... no
>>> checking for pcre_fullinfo in -lpcre... yes
>>> checking pcre.h usability... yes
>>> checking pcre.h presence... yes
>>> checking for pcre.h... yes
>>> checking pcre/pcre.h usability... no
>>> checking pcre/pcre.h presence... no
>>> checking for pcre/pcre.h... no
>>> checking if PCRE1 version >= 8.32 and has UTF-8 support... no
>>> checking whether PCRE support suffices... configure: error: pcre2 
>>> library and headers are required, or use --with-pcre1
>>>
>>> Maybe the real problem is that the PCRE version on this OS is 8.31?
>>
>> Yes, R requires PCRE version at least 8.32 as documented in R-Admin, 
>> and this is since September 2019.
>>
>>> The error message is not particularly helpful.
>>
>> An earlier version of the message gave the requirement explicitly, 
>> when people would have been more likely to have that old versions of 
>> PCRE1.
>> The few who still have it now need to see also the output line above 
>> to get the requirement and/or look into the manual.
>>
>> R 4.0 is still keeping support for PCRE1 (>=8.32), but PCRE2 should 
>> be used whenever possible.
>>
>> Best,
>> Tomas
>>
>>>
>>> Thanks,
>>> H.
>>>
>>
>


From hp@ge@ @end|ng |rom |redhutch@org  Sun Mar 22 21:57:19 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Sun, 22 Mar 2020 13:57:19 -0700
Subject: [Rd] 
 configure --with-pcre1 fails with latest R 4.0 on Ubuntu 14.04
In-Reply-To: <b17858d8-3733-8635-e366-df2350654ffa@gmail.com>
References: <88ffc07e-6370-eb7c-a331-6753dae1786c@fredhutch.org>
 <ea3cba18-7462-b2bd-7ed3-194bbde26b6c@gmail.com>
 <8b2ef49c-7a4c-e4e6-4612-e8592a860e62@fredhutch.org>
 <b17858d8-3733-8635-e366-df2350654ffa@gmail.com>
Message-ID: <1162a78c-84e1-5ebf-cc91-fa7a40d6f29e@fredhutch.org>

Excellent. Thank you!   H.

On 3/20/20 23:55, Tomas Kalibera wrote:
> On 3/18/20 6:11 PM, Herv? Pag?s wrote:
>> Thanks Tomas. Any chance the old version of the error message could be 
>> restored? It would definitely be more helpful than the current one. 
>> It's confusing to get an error and be told to use --with-pcre1 when 
>> you're already using it.
> 
> The message now gives the required version and UTF-8 support 
> requirement, so one does not have to look that one line up.
> Thanks to Brian Ripley,
> 
> Tomas
> 
>>
>>
>> H.
>>
>> On 3/18/20 01:08, Tomas Kalibera wrote:
>>> On 3/17/20 8:18 PM, Herv? Pag?s wrote:
>>>> Using --with-pcre1 to configure the latest R 4.0 (revision 77988) on 
>>>> an Ubuntu 14.04.5 LTS system gives me the following error:
>>>>
>>>> ...
>>>> checking if lzma version >= 5.0.3... yes
>>>> checking for pcre2-config... no
>>>> checking for pcre_fullinfo in -lpcre... yes
>>>> checking pcre.h usability... yes
>>>> checking pcre.h presence... yes
>>>> checking for pcre.h... yes
>>>> checking pcre/pcre.h usability... no
>>>> checking pcre/pcre.h presence... no
>>>> checking for pcre/pcre.h... no
>>>> checking if PCRE1 version >= 8.32 and has UTF-8 support... no
>>>> checking whether PCRE support suffices... configure: error: pcre2 
>>>> library and headers are required, or use --with-pcre1
>>>>
>>>> Maybe the real problem is that the PCRE version on this OS is 8.31?
>>>
>>> Yes, R requires PCRE version at least 8.32 as documented in R-Admin, 
>>> and this is since September 2019.
>>>
>>>> The error message is not particularly helpful.
>>>
>>> An earlier version of the message gave the requirement explicitly, 
>>> when people would have been more likely to have that old versions of 
>>> PCRE1.
>>> The few who still have it now need to see also the output line above 
>>> to get the requirement and/or look into the manual.
>>>
>>> R 4.0 is still keeping support for PCRE1 (>=8.32), but PCRE2 should 
>>> be used whenever possible.
>>>
>>> Best,
>>> Tomas
>>>
>>>>
>>>> Thanks,
>>>> H.
>>>>
>>>
>>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Mon Mar 23 11:19:46 2020
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Mon, 23 Mar 2020 10:19:46 +0000
Subject: [Rd] Grid pmax Unusual Result In Alpha Version
Message-ID: <SY3PR01MB15001C7A2BD808405AEE76CCCDF00@SY3PR01MB1500.ausprd01.prod.outlook.com>

Hello,

I find that the width of a plot is zero when three grobs are input but is as expected when any subset of two of the three grobs are used.



--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Mon Mar 23 13:20:30 2020
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Mon, 23 Mar 2020 12:20:30 +0000
Subject: [Rd] Grid pmax Unusual Result In Alpha Version
In-Reply-To: <24184.42801.20535.57841@stat.math.ethz.ch>
References: <SY3PR01MB15001C7A2BD808405AEE76CCCDF00@SY3PR01MB1500.ausprd01.prod.outlook.com>,
 <24184.42801.20535.57841@stat.math.ethz.ch>
Message-ID: <SY3PR01MB1500E7C271D6A9AA971AD470CDF00@SY3PR01MB1500.ausprd01.prod.outlook.com>

Sorry, I was dragging the laptop's cursor towards the Discard button but it activated on Send instead. Please ignore or delete from mailing archive.

________________________________________
From: Martin Maechler <maechler at stat.math.ethz.ch>
Sent: Monday, 23 March 2020 11:10 PM
To: Dario Strbenac
Subject: Re: [Rd] Grid pmax Unusual Result In Alpha Version

>>>>> Dario Strbenac
>>>>>     on Mon, 23 Mar 2020 10:19:46 +0000 writes:

    > Hello,
    > I find that the width of a plot is zero when three grobs are input but is as expected when any subset of two of the three grobs are used.

Please Dario,
do send reproducible code  with almost *EVERY* posting to R-devel !


    > --------------------------------------
    > Dario Strbenac
    > University of Sydney
    > Camperdown NSW 2050
    > Australia

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://protect-au.mimecast.com/s/SBS7CwV1vMf0xJVOUVR_hV?domain=stat.ethz.ch


From @zwj|08 @end|ng |rom gm@||@com  Mon Mar 23 16:39:52 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 23 Mar 2020 11:39:52 -0400
Subject: [Rd] Inconsistant result for normalizePath on Windows
Message-ID: <CAGiFhPOYw9-vri3b2dmgxFCH77FfM3yTSZH953PYfTQnCnmkSA@mail.gmail.com>

Hi all,

I saw a quite surprising result in the devel R when using the function
*normalizePath*. If the input is a path to a folder, the function returns
an absolute path with/without a slash at the end depending on the existence
of the folder. I know both results are valid on Windows but this behavior
is different than R3.6, I do not know if the change in the devel version is
made on purpose. Here is a minimal example, suppose that the folder
`C:/windows1/` does not exist.

  > normalizePath("C:/windows/", mustWork = FALSE)
[1] "C:\\Windows"
> normalizePath("C:/windows1/", mustWork = FALSE)
[1] "C:\\windows1\\"


In R 3.6, the return value always ends with a slash if the input ends with
a slash. From the NEWS file, It seems like there are some changes to
*normalizePath* but none of them should be relevant, it might be an
unintentional result introduced by the update.

Best,
Jiefei

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Mar 23 17:24:24 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 23 Mar 2020 17:24:24 +0100
Subject: [Rd] Inconsistant result for normalizePath on Windows
In-Reply-To: <CAGiFhPOYw9-vri3b2dmgxFCH77FfM3yTSZH953PYfTQnCnmkSA@mail.gmail.com>
References: <CAGiFhPOYw9-vri3b2dmgxFCH77FfM3yTSZH953PYfTQnCnmkSA@mail.gmail.com>
Message-ID: <2cc36724-2cac-ad3d-0f39-ce196cf23b0c@gmail.com>


Hi Jiefei,

the change in handling trailing path separators is not on purpose, but 
is a byproduct of a new implementation of normalizePath, which now 
handles symbolic links and normalizes case in long path names. It is not 
documented what happens to trailing separators, and hence portable 
programs should not depend on it. I don't think it is a property that 
should be documented/specified. The behavior of normalizePath is way too 
complicated already and it's result is OS-specific anyway.

In R-devel as well as in 3.6, the trailing separator is preserved when 
the path does not exist - simply, the original path is returned. When 
the path does exist, R-devel removes the trailing separator but R 3.6 
does not, which is because the underlying Windows API call to implement 
it is now different. The new behavior reflects what 
GetFinalPathNameByHandle returns, which is a function now used for 
normalization also in other language runtimes on Windows. I think the 
new behavior is better: paths differing only in the trailing separator 
will be normalized to the same path.

Best
Tomas

On 3/23/20 4:39 PM, Wang Jiefei wrote:
> Hi all,
>
> I saw a quite surprising result in the devel R when using the function
> *normalizePath*. If the input is a path to a folder, the function returns
> an absolute path with/without a slash at the end depending on the existence
> of the folder. I know both results are valid on Windows but this behavior
> is different than R3.6, I do not know if the change in the devel version is
> made on purpose. Here is a minimal example, suppose that the folder
> `C:/windows1/` does not exist.
>
>    > normalizePath("C:/windows/", mustWork = FALSE)
> [1] "C:\\Windows"
>> normalizePath("C:/windows1/", mustWork = FALSE)
> [1] "C:\\windows1\\"
>
>
> In R 3.6, the return value always ends with a slash if the input ends with
> a slash. From the NEWS file, It seems like there are some changes to
> *normalizePath* but none of them should be relevant, it might be an
> unintentional result introduced by the update.
>
> Best,
> Jiefei
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Mon Mar 23 17:43:06 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 23 Mar 2020 09:43:06 -0700
Subject: [Rd] Inconsistant result for normalizePath on Windows
In-Reply-To: <2cc36724-2cac-ad3d-0f39-ce196cf23b0c@gmail.com>
References: <CAGiFhPOYw9-vri3b2dmgxFCH77FfM3yTSZH953PYfTQnCnmkSA@mail.gmail.com>
 <2cc36724-2cac-ad3d-0f39-ce196cf23b0c@gmail.com>
Message-ID: <CAF8bMcZ6Fb47F-V+-Yg1eE7GKifL3yq3yctb3DEiz=dqTTSUvw@mail.gmail.com>

Re the trailing path separator - should file.path() be changed to not
produce doubled path separators when an argument has a trailing path
separator?

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, Mar 23, 2020 at 9:24 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> Hi Jiefei,
>
> the change in handling trailing path separators is not on purpose, but
> is a byproduct of a new implementation of normalizePath, which now
> handles symbolic links and normalizes case in long path names. It is not
> documented what happens to trailing separators, and hence portable
> programs should not depend on it. I don't think it is a property that
> should be documented/specified. The behavior of normalizePath is way too
> complicated already and it's result is OS-specific anyway.
>
> In R-devel as well as in 3.6, the trailing separator is preserved when
> the path does not exist - simply, the original path is returned. When
> the path does exist, R-devel removes the trailing separator but R 3.6
> does not, which is because the underlying Windows API call to implement
> it is now different. The new behavior reflects what
> GetFinalPathNameByHandle returns, which is a function now used for
> normalization also in other language runtimes on Windows. I think the
> new behavior is better: paths differing only in the trailing separator
> will be normalized to the same path.
>
> Best
> Tomas
>
> On 3/23/20 4:39 PM, Wang Jiefei wrote:
> > Hi all,
> >
> > I saw a quite surprising result in the devel R when using the function
> > *normalizePath*. If the input is a path to a folder, the function returns
> > an absolute path with/without a slash at the end depending on the
> existence
> > of the folder. I know both results are valid on Windows but this behavior
> > is different than R3.6, I do not know if the change in the devel version
> is
> > made on purpose. Here is a minimal example, suppose that the folder
> > `C:/windows1/` does not exist.
> >
> >    > normalizePath("C:/windows/", mustWork = FALSE)
> > [1] "C:\\Windows"
> >> normalizePath("C:/windows1/", mustWork = FALSE)
> > [1] "C:\\windows1\\"
> >
> >
> > In R 3.6, the return value always ends with a slash if the input ends
> with
> > a slash. From the NEWS file, It seems like there are some changes to
> > *normalizePath* but none of them should be relevant, it might be an
> > unintentional result introduced by the update.
> >
> > Best,
> > Jiefei
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Mar 23 18:03:58 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 23 Mar 2020 18:03:58 +0100
Subject: [Rd] unlink() on "~" removes the home directory
In-Reply-To: <CABtg=KkUxSqqNe1cNfL=WDK06=K0yAJS38KpkgE8U3Yjn6Dqhg@mail.gmail.com>
References: <CABtg=KkUxSqqNe1cNfL=WDK06=K0yAJS38KpkgE8U3Yjn6Dqhg@mail.gmail.com>
Message-ID: <48a9d269-7b9a-a7a6-629d-42a017a2bfb1@gmail.com>

To clarify, these issues are about deleting the contents of the home 
directory, not the directory itself, which cannot be deleted by ordinary 
users on today's systems. Unfortunately this has to be fixed in the code 
that calls unlink(), such code must be aware of the expansions. The "R 
CMD build" case as you write has been fixed, if anyone finds any other 
instance of this problem in base R, please report, it will be fixed as 
well. The new argument "expand" has been added to unlink() to make these 
fixes easier.

A variation on what you propose: tilde ("~") is now treated the same way 
as "." and ".." have already been by unlink(), which means it will never 
be considered for deletion (not even with expand=TRUE). There are still 
a number of ways to delete the contents of one's home directory, 
including tilde expansion with user name, with directory separators, 
etc.? This special treatment of "~" will prevent only one pattern of the 
problem. One should always be careful when recursively/programmatically 
deleting files.

Also, the new behavior can cause trouble in some cases when a file or 
directory named tilde exists, but hopefully not as bad as deleting the 
contents of user home directory. In principle, such file can still be 
deleted from R using a combination of tilde and wildcards with wildcard 
expansion enabled.

Best
Tomas

On 2/26/20 11:47 PM, G?bor Cs?rdi wrote:
> !!! DON'T TRY THE CODE IN THIS EMAIL AT HOME !!!
>
> Well, unlink() does what it is supposed to do, so you could argue that
> there is nothing wrong with it. Also, nobody would call unlink() on
> "~", right?
>
> The situation is not so simple, however. E.g. if you happen to have a
> directory called "~", and you iterate over all files and directories
> to selectively remove some of them, then your code might end up
> calling unlink on the local "~" directory, and then your home is gone.
>
> But you would not create a directory named "~", that is just asking
> for trouble. Well, surely, _intentionally_ you would not do that.
> Unintentionally, you might. E.g. something like this is enough:
>
> # Create a subpath within a base directory
> badfun <- function(base = ".", path) {
>    dir.create(file.path(base, path), recursive = TRUE, showWarnings = FALSE)
> }
> badfun(path = "~/foo")
>
> (If you did run this, be very careful how you remove the directory called "~"!)
>
> A real example is `R CMD build` which deletes the home directory of
> the current user if the root of the package contains a non-empty "~"
> directory. Luckily this is now fixed in R-devel, so R 4.0.0 will do
> better. (R 3.6.3 will not.) See
> https://github.com/wch/r-source/commit/1d4f7aa1dac427ea2213d1f7cd7b5c16e896af22
>
> I have seen several bug reports about various packages (that call R
> CMD build) removing the home directory, so this indeed happens in
> practice to a number of people. The commit above will fix `R CMD
> build`, but it would be great to "fix" this in general.
>
> It seems pretty hard to prevent users from creating of a "~"
> directory. But preventing unlink() from deleting "~" does not actually
> seem too hard. If unlink() could just refuse removing "~" (when expand
> = TRUE), that would be great. It seems to me that the current behavior
> is very-very rarely intended, and its consequences are potentially
> disastrous.
>
> If unlink("~", recursive = TRUE) errors, you can still remove a local
> "~" file/dir with unlink("./~", ...). And you can still remove your
> home directory if you really want to do that, with
> unlink(path.expand("~"), ...). So no functionality is lost.
>
> Also, if anyone is aware of packages/functions that tend to create "~"
> directories or files, please let me know.
>
> I would be happy to submit a patch for the new unlink("~") behavior.
>
> Thanks,
> Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Mar 23 18:07:52 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 23 Mar 2020 17:07:52 +0000
Subject: [Rd] unlink() on "~" removes the home directory
In-Reply-To: <48a9d269-7b9a-a7a6-629d-42a017a2bfb1@gmail.com>
References: <CABtg=KkUxSqqNe1cNfL=WDK06=K0yAJS38KpkgE8U3Yjn6Dqhg@mail.gmail.com>
 <48a9d269-7b9a-a7a6-629d-42a017a2bfb1@gmail.com>
Message-ID: <CABtg=KnUshxcyCOg0EWbkR+e6T6xx2eyykOGPqX+7vW4vxvpwg@mail.gmail.com>

Thanks,

I saw the commit, and it seems like a great fix to me!

Best,
Gabor

On Mon, Mar 23, 2020 at 5:04 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> To clarify, these issues are about deleting the contents of the home
> directory, not the directory itself, which cannot be deleted by ordinary
> users on today's systems. Unfortunately this has to be fixed in the code
> that calls unlink(), such code must be aware of the expansions. The "R
> CMD build" case as you write has been fixed, if anyone finds any other
> instance of this problem in base R, please report, it will be fixed as
> well. The new argument "expand" has been added to unlink() to make these
> fixes easier.
>
> A variation on what you propose: tilde ("~") is now treated the same way
> as "." and ".." have already been by unlink(), which means it will never
> be considered for deletion (not even with expand=TRUE). There are still
> a number of ways to delete the contents of one's home directory,
> including tilde expansion with user name, with directory separators,
> etc.  This special treatment of "~" will prevent only one pattern of the
> problem. One should always be careful when recursively/programmatically
> deleting files.
>
> Also, the new behavior can cause trouble in some cases when a file or
> directory named tilde exists, but hopefully not as bad as deleting the
> contents of user home directory. In principle, such file can still be
> deleted from R using a combination of tilde and wildcards with wildcard
> expansion enabled.
>
> Best
> Tomas
>
> On 2/26/20 11:47 PM, G?bor Cs?rdi wrote:
> > !!! DON'T TRY THE CODE IN THIS EMAIL AT HOME !!!
> >
> > Well, unlink() does what it is supposed to do, so you could argue that
> > there is nothing wrong with it. Also, nobody would call unlink() on
> > "~", right?
> >
> > The situation is not so simple, however. E.g. if you happen to have a
> > directory called "~", and you iterate over all files and directories
> > to selectively remove some of them, then your code might end up
> > calling unlink on the local "~" directory, and then your home is gone.
> >
> > But you would not create a directory named "~", that is just asking
> > for trouble. Well, surely, _intentionally_ you would not do that.
> > Unintentionally, you might. E.g. something like this is enough:
> >
> > # Create a subpath within a base directory
> > badfun <- function(base = ".", path) {
> >    dir.create(file.path(base, path), recursive = TRUE, showWarnings = FALSE)
> > }
> > badfun(path = "~/foo")
> >
> > (If you did run this, be very careful how you remove the directory called "~"!)
> >
> > A real example is `R CMD build` which deletes the home directory of
> > the current user if the root of the package contains a non-empty "~"
> > directory. Luckily this is now fixed in R-devel, so R 4.0.0 will do
> > better. (R 3.6.3 will not.) See
> > https://github.com/wch/r-source/commit/1d4f7aa1dac427ea2213d1f7cd7b5c16e896af22
> >
> > I have seen several bug reports about various packages (that call R
> > CMD build) removing the home directory, so this indeed happens in
> > practice to a number of people. The commit above will fix `R CMD
> > build`, but it would be great to "fix" this in general.
> >
> > It seems pretty hard to prevent users from creating of a "~"
> > directory. But preventing unlink() from deleting "~" does not actually
> > seem too hard. If unlink() could just refuse removing "~" (when expand
> > = TRUE), that would be great. It seems to me that the current behavior
> > is very-very rarely intended, and its consequences are potentially
> > disastrous.
> >
> > If unlink("~", recursive = TRUE) errors, you can still remove a local
> > "~" file/dir with unlink("./~", ...). And you can still remove your
> > home directory if you really want to do that, with
> > unlink(path.expand("~"), ...). So no functionality is lost.
> >
> > Also, if anyone is aware of packages/functions that tend to create "~"
> > directories or files, please let me know.
> >
> > I would be happy to submit a patch for the new unlink("~") behavior.
> >
> > Thanks,
> > Gabor
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From bbo|ker @end|ng |rom gm@||@com  Mon Mar 23 20:39:40 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 23 Mar 2020 15:39:40 -0400
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
Message-ID: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>

Dear r-devel folks,

  [if this is more appropriate for r-pkg-devel please let me know and
I'll repost it over there ...]

I'm writing to ask for help with some R/C++ integration idioms that are
used in a package I'm maintaining, that are unfamilar to me, and that
are now being flagged as problematic by Tomas Kalibera's 'rchk'
machinery (https://github.com/kalibera/rchk); results are here
https://raw.githubusercontent.com/kalibera/cran-checks/master/rchk/results/lme4.out

The problem is with constructions like

::Rf_eval(::Rf_lang2(fun, arg), d_rho)

I *think* this means "construct a two-element pairlist from fun and arg,
then evaluate it within expression d_rho"

This leads to warnings like

"calling allocating function Rf_eval with argument allocated using Rf_lang2"

Is this a false positive or ... ? Can anyone help interpret this?

Not sure why this idiom was used in the first place: speed? (e.g., see
https://stat.ethz.ch/pipermail/r-devel/2019-June/078020.html ) Should I
be rewriting to avoid Rf_eval entirely in favor of using a Function?
(i.e., as commented in
https://stackoverflow.com/questions/37845012/rcpp-function-slower-than-rf-eval
: "Also, calling Rf_eval() directly from a C++ context is dangerous as R
errors (ie, C longjmps) will bypass the destructors of C++ objects and
leak memory / cause undefined behavior in general. Rcpp::Function tries
to make sure that doesn't happen.")

 Any tips, corrections, pointers to further documentation, etc. would be
most welcome ... Web searching for this stuff hasn't gotten me very far,
and it seems to be deeper than most of the introductory material I can
find (including the Rcpp vignettes) ...

  cheers
   Ben Bolker


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Mar 23 21:01:39 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 23 Mar 2020 21:01:39 +0100
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
Message-ID: <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>

On 3/23/20 8:39 PM, Ben Bolker wrote:
> Dear r-devel folks,
>
>    [if this is more appropriate for r-pkg-devel please let me know and
> I'll repost it over there ...]
>
> I'm writing to ask for help with some R/C++ integration idioms that are
> used in a package I'm maintaining, that are unfamilar to me, and that
> are now being flagged as problematic by Tomas Kalibera's 'rchk'
> machinery (https://github.com/kalibera/rchk); results are here
> https://raw.githubusercontent.com/kalibera/cran-checks/master/rchk/results/lme4.out
>
> The problem is with constructions like
>
> ::Rf_eval(::Rf_lang2(fun, arg), d_rho)
>
> I *think* this means "construct a two-element pairlist from fun and arg,
> then evaluate it within expression d_rho"
>
> This leads to warnings like
>
> "calling allocating function Rf_eval with argument allocated using Rf_lang2"
>
> Is this a false positive or ... ? Can anyone help interpret this?
This is a true error. You need to protect the argument of eval() before 
calling eval, otherwise eval() could destroy it before using it. This is 
a common rule: whenever passing an argument to a function, that argument 
must be protected (directly or indirectly). Rchk tries to be smart and 
doesn't report a warning when it can be sure that in that particular 
case, for that particular function, it is safe. This is easy to fix, 
just protect the result of lang2() before the call and unprotect (some 
time) after.
> Not sure why this idiom was used in the first place: speed? (e.g., see
> https://stat.ethz.ch/pipermail/r-devel/2019-June/078020.html ) Should I
> be rewriting to avoid Rf_eval entirely in favor of using a Function?
> (i.e., as commented in
> https://stackoverflow.com/questions/37845012/rcpp-function-slower-than-rf-eval
> : "Also, calling Rf_eval() directly from a C++ context is dangerous as R
> errors (ie, C longjmps) will bypass the destructors of C++ objects and
> leak memory / cause undefined behavior in general. Rcpp::Function tries
> to make sure that doesn't happen.")

Yes, eval (as well as lang2) can throw an error, this error has to be 
caught via R API and handled (e.g. by throwing as exception or something 
else, indeed that exception then needs to be caught and possibly 
converted back when leaving again to C stack frames). An R/C API you can 
use here is R_UnwindProtect. This is of course a bit of a pain, and one 
does not have to worry when programming in plain C.

I suppose Rcpp provides some wrapper around R_UnwindProtect, that would 
be a question for Rcpp experts/maintainers.

Best
Tomas

>
>   Any tips, corrections, pointers to further documentation, etc. would be
> most welcome ... Web searching for this stuff hasn't gotten me very far,
> and it seems to be deeper than most of the introductory material I can
> find (including the Rcpp vignettes) ...
>
>    cheers
>     Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Mon Mar 23 22:07:36 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 23 Mar 2020 17:07:36 -0400
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
Message-ID: <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>


 Thanks, that's really useful.  One more question for you, or someone
else here:

const ArrayXd glmLink::linkFun(const ArrayXd& mu) const {
        return as<ArrayXd>(::Rf_eval(::Rf_lang2(as<SEXP>(d_linkFun),

as<SEXP>(Rcpp::NumericVector(mu.data(),

     mu.data() + mu.size()))
						), d_rho);
    }


I guess I need that to read
PROTECT(::Rf_eval(PROTECT(::Rf_lang2(...),...) , but as written it
doesn't seem I have anywhere to squeeze in an UNPROTECT(2).  Do I need
to define a temporary variable so I can UNPROTECT(2) before I return the
value?

Or is there a way I can use Shield() since this an Rcpp-based project
anyway?

  Sorry for all the very basic questions, but I'm flying nearly blind
here ...

  cheers
   Ben Bolker



On 2020-03-23 4:01 p.m., Tomas Kalibera wrote:
> On 3/23/20 8:39 PM, Ben Bolker wrote:
>> Dear r-devel folks,
>>
>> ?? [if this is more appropriate for r-pkg-devel please let me know and
>> I'll repost it over there ...]
>>
>> I'm writing to ask for help with some R/C++ integration idioms that are
>> used in a package I'm maintaining, that are unfamilar to me, and that
>> are now being flagged as problematic by Tomas Kalibera's 'rchk'
>> machinery (https://github.com/kalibera/rchk); results are here
>> https://raw.githubusercontent.com/kalibera/cran-checks/master/rchk/results/lme4.out
>>
>>
>> The problem is with constructions like
>>
>> ::Rf_eval(::Rf_lang2(fun, arg), d_rho)
>>
>> I *think* this means "construct a two-element pairlist from fun and arg,
>> then evaluate it within expression d_rho"
>>
>> This leads to warnings like
>>
>> "calling allocating function Rf_eval with argument allocated using
>> Rf_lang2"
>>
>> Is this a false positive or ... ? Can anyone help interpret this?
> This is a true error. You need to protect the argument of eval() before
> calling eval, otherwise eval() could destroy it before using it. This is
> a common rule: whenever passing an argument to a function, that argument
> must be protected (directly or indirectly). Rchk tries to be smart and
> doesn't report a warning when it can be sure that in that particular
> case, for that particular function, it is safe. This is easy to fix,
> just protect the result of lang2() before the call and unprotect (some
> time) after.
>> Not sure why this idiom was used in the first place: speed? (e.g., see
>> https://stat.ethz.ch/pipermail/r-devel/2019-June/078020.html ) Should I
>> be rewriting to avoid Rf_eval entirely in favor of using a Function?
>> (i.e., as commented in
>> https://stackoverflow.com/questions/37845012/rcpp-function-slower-than-rf-eval
>>
>> : "Also, calling Rf_eval() directly from a C++ context is dangerous as R
>> errors (ie, C longjmps) will bypass the destructors of C++ objects and
>> leak memory / cause undefined behavior in general. Rcpp::Function tries
>> to make sure that doesn't happen.")
> 
> Yes, eval (as well as lang2) can throw an error, this error has to be
> caught via R API and handled (e.g. by throwing as exception or something
> else, indeed that exception then needs to be caught and possibly
> converted back when leaving again to C stack frames). An R/C API you can
> use here is R_UnwindProtect. This is of course a bit of a pain, and one
> does not have to worry when programming in plain C.
> 
> I suppose Rcpp provides some wrapper around R_UnwindProtect, that would
> be a question for Rcpp experts/maintainers.
> 
> Best
> Tomas
> 
>>
>> ? Any tips, corrections, pointers to further documentation, etc. would be
>> most welcome ... Web searching for this stuff hasn't gotten me very far,
>> and it seems to be deeper than most of the introductory material I can
>> find (including the Rcpp vignettes) ...
>>
>> ?? cheers
>> ??? Ben Bolker
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar 23 22:17:33 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 23 Mar 2020 22:17:33 +0100
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
Message-ID: <24185.10093.567850.720107@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Mon, 23 Mar 2020 17:07:36 -0400 writes:

    > Thanks, that's really useful.  One more question for you, or someone
    > else here:

    > const ArrayXd glmLink::linkFun(const ArrayXd& mu) const {
    > return as<ArrayXd>(::Rf_eval(::Rf_lang2(as<SEXP>(d_linkFun),

    > as<SEXP>(Rcpp::NumericVector(mu.data(),

    > mu.data() + mu.size()))
    > ), d_rho);
    > }


    > I guess I need that to read
    > PROTECT(::Rf_eval(PROTECT(::Rf_lang2(...),...) , but as written it
    > doesn't seem I have anywhere to squeeze in an UNPROTECT(2).  Do I need
    > to define a temporary variable so I can UNPROTECT(2) before I return the
    > value?

Ben, as co-author of the package, I could try .. I have lots of
experience with (nice and clean) C API using PROTECT ...
which I could try to apply here.

I'm busy teaching tomorrow (with the extra time of setting up
remote teaching ..)  but could look into it later {and try using
non-Rcpp C code}.

    > Or is there a way I can use Shield() since this an Rcpp-based project
    > anyway?

    > Sorry for all the very basic questions, but I'm flying nearly blind
    > here ...

    > cheers
    > Ben Bolker



    > On 2020-03-23 4:01 p.m., Tomas Kalibera wrote:
    >> On 3/23/20 8:39 PM, Ben Bolker wrote:
    >>> Dear r-devel folks,
    >>> 
    >>> ?? [if this is more appropriate for r-pkg-devel please let me know and
    >>> I'll repost it over there ...]
    >>> 
    >>> I'm writing to ask for help with some R/C++ integration idioms that are
    >>> used in a package I'm maintaining, that are unfamilar to me, and that
    >>> are now being flagged as problematic by Tomas Kalibera's 'rchk'
    >>> machinery (https://github.com/kalibera/rchk); results are here
    >>> https://raw.githubusercontent.com/kalibera/cran-checks/master/rchk/results/lme4.out
    >>> 
    >>> 
    >>> The problem is with constructions like
    >>> 
    >>> ::Rf_eval(::Rf_lang2(fun, arg), d_rho)
    >>> 
    >>> I *think* this means "construct a two-element pairlist from fun and arg,
    >>> then evaluate it within expression d_rho"
    >>> 
    >>> This leads to warnings like
    >>> 
    >>> "calling allocating function Rf_eval with argument allocated using
    >>> Rf_lang2"
    >>> 
    >>> Is this a false positive or ... ? Can anyone help interpret this?
    >> This is a true error. You need to protect the argument of eval() before
    >> calling eval, otherwise eval() could destroy it before using it. This is
    >> a common rule: whenever passing an argument to a function, that argument
    >> must be protected (directly or indirectly). Rchk tries to be smart and
    >> doesn't report a warning when it can be sure that in that particular
    >> case, for that particular function, it is safe. This is easy to fix,
    >> just protect the result of lang2() before the call and unprotect (some
    >> time) after.
    >>> Not sure why this idiom was used in the first place: speed? (e.g., see
    >>> https://stat.ethz.ch/pipermail/r-devel/2019-June/078020.html ) Should I
    >>> be rewriting to avoid Rf_eval entirely in favor of using a Function?
    >>> (i.e., as commented in
    >>> https://stackoverflow.com/questions/37845012/rcpp-function-slower-than-rf-eval
    >>> 
    >>> : "Also, calling Rf_eval() directly from a C++ context is dangerous as R
    >>> errors (ie, C longjmps) will bypass the destructors of C++ objects and
    >>> leak memory / cause undefined behavior in general. Rcpp::Function tries
    >>> to make sure that doesn't happen.")
    >> 
    >> Yes, eval (as well as lang2) can throw an error, this error has to be
    >> caught via R API and handled (e.g. by throwing as exception or something
    >> else, indeed that exception then needs to be caught and possibly
    >> converted back when leaving again to C stack frames). An R/C API you can
    >> use here is R_UnwindProtect. This is of course a bit of a pain, and one
    >> does not have to worry when programming in plain C.
    >> 
    >> I suppose Rcpp provides some wrapper around R_UnwindProtect, that would
    >> be a question for Rcpp experts/maintainers.
    >> 
    >> Best
    >> Tomas
    >> 
    >>> 
    >>> ? Any tips, corrections, pointers to further documentation, etc. would be
    >>> most welcome ... Web searching for this stuff hasn't gotten me very far,
    >>> and it seems to be deeper than most of the introductory material I can
    >>> find (including the Rcpp vignettes) ...
    >>> 
    >>> ?? cheers
    >>> ??? Ben Bolker
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Mar 23 22:54:29 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 24 Mar 2020 10:54:29 +1300
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
Message-ID: <381BF86A-907F-4564-88CC-EFE636A039AD@R-project.org>

Ben,

yes, you have to store the result into a variable, then unprotect, then return.

Cheers,
S


> On 24/03/2020, at 10:07 AM, Ben Bolker <bbolker at gmail.com> wrote:
> 
> 
> Thanks, that's really useful.  One more question for you, or someone
> else here:
> 
> const ArrayXd glmLink::linkFun(const ArrayXd& mu) const {
>        return as<ArrayXd>(::Rf_eval(::Rf_lang2(as<SEXP>(d_linkFun),
> 
> as<SEXP>(Rcpp::NumericVector(mu.data(),
> 
>     mu.data() + mu.size()))
> 						), d_rho);
>    }
> 
> 
> I guess I need that to read
> PROTECT(::Rf_eval(PROTECT(::Rf_lang2(...),...) , but as written it
> doesn't seem I have anywhere to squeeze in an UNPROTECT(2).  Do I need
> to define a temporary variable so I can UNPROTECT(2) before I return the
> value?
> 
> Or is there a way I can use Shield() since this an Rcpp-based project
> anyway?
> 
>  Sorry for all the very basic questions, but I'm flying nearly blind
> here ...
> 
>  cheers
>   Ben Bolker
> 
> 
> 
> On 2020-03-23 4:01 p.m., Tomas Kalibera wrote:
>> On 3/23/20 8:39 PM, Ben Bolker wrote:
>>> Dear r-devel folks,
>>> 
>>>    [if this is more appropriate for r-pkg-devel please let me know and
>>> I'll repost it over there ...]
>>> 
>>> I'm writing to ask for help with some R/C++ integration idioms that are
>>> used in a package I'm maintaining, that are unfamilar to me, and that
>>> are now being flagged as problematic by Tomas Kalibera's 'rchk'
>>> machinery (https://github.com/kalibera/rchk); results are here
>>> https://raw.githubusercontent.com/kalibera/cran-checks/master/rchk/results/lme4.out
>>> 
>>> 
>>> The problem is with constructions like
>>> 
>>> ::Rf_eval(::Rf_lang2(fun, arg), d_rho)
>>> 
>>> I *think* this means "construct a two-element pairlist from fun and arg,
>>> then evaluate it within expression d_rho"
>>> 
>>> This leads to warnings like
>>> 
>>> "calling allocating function Rf_eval with argument allocated using
>>> Rf_lang2"
>>> 
>>> Is this a false positive or ... ? Can anyone help interpret this?
>> This is a true error. You need to protect the argument of eval() before
>> calling eval, otherwise eval() could destroy it before using it. This is
>> a common rule: whenever passing an argument to a function, that argument
>> must be protected (directly or indirectly). Rchk tries to be smart and
>> doesn't report a warning when it can be sure that in that particular
>> case, for that particular function, it is safe. This is easy to fix,
>> just protect the result of lang2() before the call and unprotect (some
>> time) after.
>>> Not sure why this idiom was used in the first place: speed? (e.g., see
>>> https://stat.ethz.ch/pipermail/r-devel/2019-June/078020.html ) Should I
>>> be rewriting to avoid Rf_eval entirely in favor of using a Function?
>>> (i.e., as commented in
>>> https://stackoverflow.com/questions/37845012/rcpp-function-slower-than-rf-eval
>>> 
>>> : "Also, calling Rf_eval() directly from a C++ context is dangerous as R
>>> errors (ie, C longjmps) will bypass the destructors of C++ objects and
>>> leak memory / cause undefined behavior in general. Rcpp::Function tries
>>> to make sure that doesn't happen.")
>> 
>> Yes, eval (as well as lang2) can throw an error, this error has to be
>> caught via R API and handled (e.g. by throwing as exception or something
>> else, indeed that exception then needs to be caught and possibly
>> converted back when leaving again to C stack frames). An R/C API you can
>> use here is R_UnwindProtect. This is of course a bit of a pain, and one
>> does not have to worry when programming in plain C.
>> 
>> I suppose Rcpp provides some wrapper around R_UnwindProtect, that would
>> be a question for Rcpp experts/maintainers.
>> 
>> Best
>> Tomas
>> 
>>> 
>>>   Any tips, corrections, pointers to further documentation, etc. would be
>>> most welcome ... Web searching for this stuff hasn't gotten me very far,
>>> and it seems to be deeper than most of the introductory material I can
>>> find (including the Rcpp vignettes) ...
>>> 
>>>    cheers
>>>     Ben Bolker
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From edd @end|ng |rom deb|@n@org  Mon Mar 23 22:55:17 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 23 Mar 2020 16:55:17 -0500
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
Message-ID: <24185.12357.582196.820551-6851@rob.eddelbuettel.com>



On 23 March 2020 at 17:07, Ben Bolker wrote:
| Or is there a way I can use Shield() since this an Rcpp-based project
| anyway?

Yes you can, and I would recommend it.

Example from Rcpp itself, file Environment.h:

  Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x), R_GlobalEnv));

For Rcpp_fast_eval, you may still need to #define RCPP_USE_UNWIND_PROTECT
before including Rcpp.h; as I recall we were seeing too many side effects in
other packages when globally enabling it.  Or you can play it safe and simply
use Rcpp_eval.

This really was more of a rcpp-devel question.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From rom@|n @end|ng |rom r@tud|o@com  Tue Mar 24 11:33:31 2020
From: rom@|n @end|ng |rom r@tud|o@com (Romain Francois)
Date: Tue, 24 Mar 2020 11:33:31 +0100
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <24185.12357.582196.820551-6851@rob.eddelbuettel.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
 <24185.12357.582196.820551-6851@rob.eddelbuettel.com>
Message-ID: <19E808BD-A6DB-4DC3-8C66-A16BA1447145@rstudio.com>


> Le 23 mars 2020 ? 22:55, Dirk Eddelbuettel <edd at debian.org> a ?crit :
> 
> On 23 March 2020 at 17:07, Ben Bolker wrote:
> | Or is there a way I can use Shield() since this an Rcpp-based project
> | anyway?
> 
> Yes you can, and I would recommend it.
> 
> Example from Rcpp itself, file Environment.h:
> 
>  Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x), R_GlobalEnv));

This is not safe. The call made by Rf_lang2() needs to be protected here. 

> For Rcpp_fast_eval, you may still need to #define RCPP_USE_UNWIND_PROTECT
> before including Rcpp.h; as I recall we were seeing too many side effects in
> other packages when globally enabling it.  Or you can play it safe and simply
> use Rcpp_eval.
> 
> This really was more of a rcpp-devel question.
> 
> Dirk
> 
> -- 
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ||one| @end|ng |rom r@tud|o@com  Tue Mar 24 11:39:05 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Tue, 24 Mar 2020 11:39:05 +0100
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <24185.12357.582196.820551-6851@rob.eddelbuettel.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
 <24185.12357.582196.820551-6851@rob.eddelbuettel.com>
Message-ID: <CAJf4E3pFaCbDvdUpiqFGCtJK5CGfD-eyXcqFTiaE1cY7-O39=w@mail.gmail.com>

> Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x), R_GlobalEnv));

The call should be protected before evaluation though. So more like:

Shield<SEXP> call(Rf_lang2(asEnvironmentSym, x));
return Rcpp_fast_eval(call, R_GlobalEnv);

Best,
Lionel

On 3/23/20, Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 23 March 2020 at 17:07, Ben Bolker wrote:
> | Or is there a way I can use Shield() since this an Rcpp-based project
> | anyway?
>
> Yes you can, and I would recommend it.
>
> Example from Rcpp itself, file Environment.h:
>
>   Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x),
> R_GlobalEnv));
>
> For Rcpp_fast_eval, you may still need to #define RCPP_USE_UNWIND_PROTECT
> before including Rcpp.h; as I recall we were seeing too many side effects
> in
> other packages when globally enabling it.  Or you can play it safe and
> simply
> use Rcpp_eval.
>
> This really was more of a rcpp-devel question.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From edd @end|ng |rom deb|@n@org  Tue Mar 24 13:19:53 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 24 Mar 2020 07:19:53 -0500
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <CAJf4E3pFaCbDvdUpiqFGCtJK5CGfD-eyXcqFTiaE1cY7-O39=w@mail.gmail.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
 <24185.12357.582196.820551-6851@rob.eddelbuettel.com>
 <CAJf4E3pFaCbDvdUpiqFGCtJK5CGfD-eyXcqFTiaE1cY7-O39=w@mail.gmail.com>
Message-ID: <24185.64233.470941.259367@rob.eddelbuettel.com>


On 24 March 2020 at 11:39, Lionel Henry wrote:
| > Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x), R_GlobalEnv));
| 
| The call should be protected before evaluation though. So more like:
| 
| Shield<SEXP> call(Rf_lang2(asEnvironmentSym, x));
| return Rcpp_fast_eval(call, R_GlobalEnv);

Good catch.

And recursive grep for Rf_lang2 in the Rcpp sources tree suggests this is as the
common pattern in all other instances.

Dirk

edd at rob:~/git/rcpp(master)$ ag Rf_lang2 inst/include/
inst/include/Rcpp/exceptions.h
360:        Rcpp::Shield<SEXP> simpleErrorExpr(Rf_lang2(::Rf_install("simpleError"), txt));
365:        Rcpp::Shield<SEXP> simpleErrorExpr( Rf_lang2(::Rf_install("simpleError"), tryError ));
388:    Rcpp::Shield<SEXP> expr( Rf_lang2( stop_sym , condition ) ) ;
395:    Rcpp::Shield<SEXP> expr( Rf_lang2( stop_sym , condition ) ) ;

inst/include/Rcpp/Reference.h
62:            Shield<SEXP> call(Rf_lang2(newSym, str));

inst/include/Rcpp/api/meat/Rcpp_eval.h
99:            Shield<SEXP> conditionMessageCall(::Rf_lang2(::Rf_install("conditionMessage"), res));

inst/include/Rcpp/macros/macros.h
69:       SEXP expr = PROTECT( Rf_lang2( stop_sym , rcpp_output_condition ) ) ;                     \

inst/include/Rcpp/Environment.h
36:                Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x), R_GlobalEnv));
250:                    Shield<SEXP> call(Rf_lang2(internalSym, Rf_lang4(removeSym, str, Storage::get__(), Rf_ScalarLogical(FALSE))));
376:                Shield<SEXP> call( Rf_lang2(getNamespaceSym, package_str) );

inst/include/Rcpp/r_cast.h
34:                Shield<SEXP> call(Rf_lang2(funSym, x));
117:                    Shield<SEXP> call( Rf_lang2( Rf_install( "as.character" ), x ) );

inst/include/Rcpp/Module.h
456:    Shield<SEXP> __load_module_call__( Rf_lang2( GET_MODULE_SYM, _rcpp_module_boot_##NAME() ) ); \

inst/include/Rcpp/lang.h
26:#define Rcpp_lang2 Rf_lang2
edd at rob:~/git/rcpp(master)$ 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Mar 24 14:11:09 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 24 Mar 2020 08:11:09 -0500
Subject: [Rd] help with rchk warnings on Rf_eval(Rf_lang2(...))
In-Reply-To: <24185.64233.470941.259367@rob.eddelbuettel.com>
References: <8766ebe2-2b28-3d12-71c3-136a3f05a620@math.mcmaster.ca>
 <1f82458c-8443-1de5-f312-c89c734d219c@gmail.com>
 <f6bbdc3a-0b3a-20fe-a2a6-dffa73a76dd3@gmail.com>
 <24185.12357.582196.820551-6851@rob.eddelbuettel.com>
 <CAJf4E3pFaCbDvdUpiqFGCtJK5CGfD-eyXcqFTiaE1cY7-O39=w@mail.gmail.com>
 <24185.64233.470941.259367@rob.eddelbuettel.com>
Message-ID: <24186.1773.899233.987049@rob.eddelbuettel.com>


On 24 March 2020 at 07:19, Dirk Eddelbuettel wrote:
| On 24 March 2020 at 11:39, Lionel Henry wrote:
| | > Shield<SEXP> res(Rcpp_fast_eval(Rf_lang2(asEnvironmentSym, x), R_GlobalEnv));
| | 
| | The call should be protected before evaluation though. So more like:
| | 
| | Shield<SEXP> call(Rf_lang2(asEnvironmentSym, x));
| | return Rcpp_fast_eval(call, R_GlobalEnv);
| 
| Good catch.

Fixed in https://github.com/RcppCore/Rcpp/pull/1059 along with another
instance from further down in the same file.

Thanks to Romain and Lionel for spotting this.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Mar 24 19:11:09 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 24 Mar 2020 11:11:09 -0700
Subject: [Rd] 
 R CMD check --as-cran attempts to hide R_LIBS_USER but fails
In-Reply-To: <CAFDcVCT_R5zgrWon972wOUWAyy2NJgQMSg8Gq02+UUcYUm1uPw@mail.gmail.com>
References: <CAFDcVCS=8+L-=+2ejDudUFHT=sOMX_7Avo=xHLQ2pOR0jmE5Sw@mail.gmail.com>
 <24178.57679.999837.472273@rob.eddelbuettel.com>
 <CAFDcVCT_R5zgrWon972wOUWAyy2NJgQMSg8Gq02+UUcYUm1uPw@mail.gmail.com>
Message-ID: <CAFDcVCRzcZjRYkU9r26owS2svfR2ocP2tEFw997Sr3R=O6H6=g@mail.gmail.com>

This has been fixed in R-devel:

r78046 | ripley | 2020-03-24 06:51:35 -0700 (Tue, 24 Mar 2020) | 1 line

handle Renviron files in the same way as POSIX shells

(diff: https://github.com/wch/r-source/commit/1658c8491e9cdc6d2fe61603ed23ae56232b6727)

I've verified that 'R CMD check --as-cran' now hides user's personal
library (R_LIBS_USER) such that the check environment, including test
scripts won't pick up packages from there, e.g. test scripts now
report:

> print(.libPaths())
[1] "/tmp/hb/Rtmpy6mBCg/RLIBS_1e6465250309"
[2] "/home/hb/software/R-devel/trunk/lib/R/library"

This is important, because, previously, your package might have not
have produced check errors even if all dependencies had not been
declared in your DESCRIPTION file, or in your package dependencies.

The above is only new for '--as-cran' on Linux and macOS - it already
worked as wanted on Windows (see, there's some advantages to be on
that OS).

/Henrik



On Wed, Mar 18, 2020 at 9:38 PM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> On Wed, Mar 18, 2020 at 8:04 PM Dirk Eddelbuettel <edd at debian.org> wrote:
> >
> >
> > On 18 March 2020 at 19:19, Henrik Bengtsson wrote:
> > | AFAIU, 'R CMD check --as-cran' tries to hide any site and user package
> > | libraries by setting R_LIBS_SITE and R_LIBS_USER.  However, contrary
> >
> > What makes you think that? AFAIK --as-cran just sets a bunch of the (nearly
> > countless) environment variables (all described in R Inst+Admin, as I recall)
> > to a set of values "close to" values CRAN uses.
>
> 1. --as-cran sets R_LIBS_SITE='no_such_dir' and R_LIBS_USER='',
> whereas without --as-cran they're not set.
>
> 2. --as-cran sets R_LIBS_USER='no_such_dir' on Windows and there it is
> masked, i.e. tests scripts do NOT see user's personal library because
> print(Sys.getenv("R_LIBS_USER")) is reported as "'no_such_dir'"
> (sic!).
>
> The only other interpretation I can imagine from using R_LIBS_USER=''
> on Linux is that is exists there to force the default settings in case
> it is already set externally by user.  For example, if one do
>
>   export R_LIBS_USER="$PWD"
>   R --vanilla CMD check --as-cran teeny_0.1.0.tar.gz
>
> then tests scripts still get R_LIBS_USER="~/R/x86_64-pc-linux-gnu-library/3.6".
>
> But, then why is there a difference between Windows and Linux in this
> essential behavior?  To me, this suggests there is a mistake
> somewhere.  OTH, I know that lots of oddities in R exist for a reason.
>
> /Henrik
>
> >
> > | to R_LIBS_SITE, it fails for R_LIBS_USER and the user's personal
> > | library is still available for test scripts.  Should I revise my
> > | assumptions, or is that intentional?
> >
> > I would place a nickel on the former if betting was allowed in Illinois.
> >
> >   edd at rob:~$ Rscript --vanilla -e ".libPaths()"
> >   [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
> >   [3] "/usr/lib/R/library"
> >   edd at rob:~$ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()"
> >   [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
> >   [3] "/usr/lib/R/library"
> >   edd at rob:~$
> >
> > I happen to turn per-user libraries off by default, which may affect things.
> > That said, I actually quite like having the same paths. Your mileage, as they
> > say, may vary.
> >
> > Dirk
> >
> >
> > | The short version. Shouldn't:
> > |
> > | $ R_LIBS_USER='' Rscript --vanilla -e ".libPaths()"
> > | [1] "/home/hb/R/x86_64-pc-linux-gnu-library/4.0"
> > | [2] "/home/hb/software/R-devel/trunk/lib/R/library"
> > |
> > | give the same output as:
> > |
> > | $ R_LIBS_USER="no_such_dir" Rscript --vanilla -e ".libPaths()"
> > | [1] "/home/hb/software/R-devel/trunk/lib/R/library"
> > |
> > | ?
> > |
> > | The long version:
> > |
> > | R_LIBS_SITE='no_such_dir' and R_LIBS_USER=''  is set up at the very
> > | end of tools:::setRlibs():
> > |
> > | setRlibs <-
> > |     ...
> > |     c(paste0("R_LIBS=", rlibs),
> > |       if(WINDOWS) " R_ENVIRON_USER='no_such_file'" else "R_ENVIRON_USER=''",
> > |       if(WINDOWS) " R_LIBS_USER='no_such_dir'" else "R_LIBS_USER=''",
> > |       " R_LIBS_SITE='no_such_dir'")
> > | }
> > |
> > | Monitoring with 'pstree' confirms this. On Linux with R 3.6.3, the
> > | call stack of a 'R CMD check --as-cran teeny_0.1.0.tar.gz' call looks
> > | like this when a test script is running:
> > |
> > | `-sh /usr/lib/R/bin/check --as-cran teeny_0.1.0.tar.gz
> > |  `-R --no-restore --slave --args nextArg--as-crannextArgteeny_0.1.0.tar.gz
> > |   `-sh -c LANGUAGE=en _R_CHECK_INTERNALS2_=1
> > | R_LIBS=/tmp/hb/RtmpQj4hXb/RLIBS_26e766e32c18 R_ENVIRON_USER=''
> > | R_LIBS_USER=''  R_LIBS_SITE='no_such_dir' '/usr/lib/R/bin/R' --vanilla
> > | --slave < '/tmp/hb/RtmpQj4hXb/file26e763770b6a'
> > |    `-R --vanilla --slave
> > |     `-sh -c LANGUAGE=C R_TESTS=startup.Rs '/usr/lib/R/bin/R' CMD BATCH
> > | --vanilla  'env.R' 'env.Rout'
> > |      `-sh /usr/lib/R/bin/BATCH --vanilla env.R env.Rout
> > |       `-R -f env.R --restore --save --no-readline --vanilla
> > |        `-sh -c 'pstree' --arguments --long --show-parents 10558
> > |         `-pstree --arguments --long --show-parents 10558
> > |
> > | However, if I call print(Sys.getenv("R_LIBS_USER")) in my tests/env.R,
> > | I'll find that it is no longer empty but it is indeed set to my
> > | personal library "~/R/x86_64-pc-linux-gnu-library/3.6".
> > |
> > |
> > | TROUBLESHOOTING:
> > |
> > | It looks like R_LIBS_USER is set if and only if it's empty by Renviron
> > | in my system folder:
> > |
> > | $ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
> > | R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/3.6'}
> > | #R_LIBS_USER=${R_LIBS_USER-'~/Library/R/3.6/library'}
> > | # edd Jul 2007  Now use R_LIBS_SITE, not R_LIBS
> > | R_LIBS_SITE=${R_LIBS_SITE-'/usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library'}
> > |
> > | This is from installing R on Ubuntu 18.04 using 'apt install
> > | r-base-core'.  To make sure it's not an issue with that distribution,
> > | I also check a 'configure/make/make install' from SVN trunk and there
> > | I see the same:
> > |
> > | $ grep R_LIBS < "$(Rscript -e "cat(file.path(R.home('etc'), 'Renviron'))")"
> > | R_LIBS_USER=${R_LIBS_USER-'~/R/x86_64-pc-linux-gnu-library/4.0'}
> > | #R_LIBS_USER=${R_LIBS_USER-'~/Library/R/4.0/library'}
> > |
> > | Printing it during tests/env.R confirms that it is indeed set to
> > | "~/R/x86_64-pc-linux-gnu-library/4.0".
> > |
> > | /Henrik
> > |
> > | ______________________________________________
> > | R-devel at r-project.org mailing list
> > | https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From uc|@g|@ @end|ng |rom gm@||@com  Wed Mar 25 01:14:09 2020
From: uc|@g|@ @end|ng |rom gm@||@com (Gavin Simpson)
Date: Tue, 24 Mar 2020 18:14:09 -0600
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
Message-ID: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>

Dear list

On Fedora 31 the pango library has recently updated to version >= 1.44
and in doing so has switched to using the HarfBuzz library (from
FreeType) and dropped Adobe Type 1 font support. This causes problems
with plotmath as all bar one of the glyphs doesn't render (see
attached PNG image if it makes it through the list filters - if not I
have shared a copy via my google drive:
https://drive.google.com/file/d/1llFqKHD7LFKzQbVuq6sibY1UizRn7xxS/view?usp=sharing
)

I'm not the only person who has come across this, e.g.
https://stackoverflow.com/q/60656445/429846 and the resulting reported
bug on the RedHat Bugzilla:
https://bugzilla.redhat.com/show_bug.cgi?id=1815128

Beyond switching to  `type = 'Xlib'`, has anyone worked around this
issue on a Fedora 31 or later system?

Thanks in advance

Gavin

-- 
Gavin Simpson, PhD

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plotmath-issue.png
Type: image/png
Size: 22102 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200324/e488acda/attachment.png>

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Mar 25 10:00:52 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 25 Mar 2020 10:00:52 +0100
Subject: [Rd] Build failure on powerpc64
In-Reply-To: <24056.44315.345538.772267@stat.math.ethz.ch>
References: <CANA0HMYoYiHApzRfswTioi352ELYS4bJwvrW+=su6Mtanq84RQ-6733@mail.gmail.com>
 <24051.27320.342490.48043@stat.math.ethz.ch>
 <CANA0HMansuv519fGMJy-Z+rEAgenAs1hr09eYGeV7HFNfZHTHw@mail.gmail.com>
 <24056.44315.345538.772267@stat.math.ethz.ch>
Message-ID: <24187.7620.591958.863096@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Tue, 17 Dec 2019 11:25:31 +0100 writes:

>>>>> Tom Callaway 
>>>>>     on Fri, 13 Dec 2019 11:06:25 -0500 writes:

    >> An excellent question. It is important to remember two key
    >> facts:

    >> 1. With gcc on ppc64, long doubles exist, they can
    >> be used, just not safely as constants (and maybe they
    >> still can be used safely under specific conditions?).

    >> 2. I am not an expert in either PowerPC64 or gcc. :)

    >> Looking at connections.c, we have (in order):
    >> * handling long double as a valid case in a switch statement checking size
    >> * adding long double as a field in the u union define
    >> * handling long double as a valid case in a switch statement checking size
    >> * handling long double as a valid case in a switch statement checking size
    >> * memcpy from the address of a long double

    >> In format.c, we have (in order):
    >> * conditionally creating private_nearbyintl for R_nearbyintl
    >> * defining a static const long double tbl[]
    >> * use exact scaling factor in long double precision

    >> For most of these, it seems safe to leave them as is for ppc64. I would
    >> have thought that the gcc compiler might have had issue with:

    >> connections.c:
    >> static long double ld1;
    >> for (i = 0, j = 0; i < len; i++, j += size) {
    >> ld1 = (long double) REAL(object)[i];

    >> format.c:
    >> static const long double tbl[] =

    >> ... but it doesn't. Perhaps the original code at issue:

    >> arithmetic.c:
    >> static LDOUBLE q_1_eps = 1 / LDBL_EPSILON;

    >> only makes gcc unhappy because of the very large value trying to be stored
    >> in the static long double, which would make it span the "folded double" on
    >> that architecture.

    >> *****

    >> It seems that the options are:

    >> A) Patch the one place where the compiler determines it is not safe to use
    >> a static long double on ppc64.
    >> B) Treat PPC64 as a platform where it is never safe to use a static long
    >> double

    >> FWIW, I did run the test suite after applying my patch and all of the tests
    >> pass on ppc64.

    >> Tom

    > Thank you, Tom.
    > You were right... and only  A)  is needed.

    > In the mean time I've also been CC'ed in a corresponding debian
    > bug report on the exact same architecture.

    > In the end, after explanation and recommendation by Tomas
    > Kalibera, I've committed a slightly better change to R's
    > sources, both in the R-devel (trunk) and the "R-3.6.x patched"
    > branch:  Via a macro, it continues to use long double also for
    > the PPC 64 in this case:

    > $ svn diff -c77587
    > Index: src/main/arithmetic.c
    > ===================================================================
    > --- src/main/arithmetic.c	(Revision 77586)
    > +++ src/main/arithmetic.c	(Revision 77587)
    > @@ -176,8 +176,14 @@
    > #endif
    > }
 
    > +
    > #if HAVE_LONG_DOUBLE && (SIZEOF_LONG_DOUBLE > SIZEOF_DOUBLE)
    > +# ifdef __PPC64__
    > + // PowerPC 64 (when gcc has -mlong-double-128) fails constant folding with LDOUBLE
    > +#  define q_1_eps (1 / LDBL_EPSILON)
    > +# else
    > static LDOUBLE q_1_eps = 1 / LDBL_EPSILON;
    > +# endif
    > #else
    > static double  q_1_eps = 1 / DBL_EPSILON;
    > #endif

    > ------------- ------------- -------------

Now, Debian   Bug#946836  has been reopened,
because  __PPC64__  does not cover all powerpc architectures
and in their build farm  they found  non-PPC64  cases which also
needed to switch from a static variable to a macro,

the suggestion being to replace __PPC64__  by   __powerpc__

which is what I'm going to commit now (for R-3.6.x patched and
for R-devel !).
I hope that these macros are +- universally working and not too
much depending on the exact compiler flavor.

Martin Maechler
ETH Zurich and R Core team


From pd@|gd @end|ng |rom gm@||@com  Wed Mar 25 11:16:04 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 25 Mar 2020 11:16:04 +0100
Subject: [Rd] Build failure on powerpc64
In-Reply-To: <24187.7620.591958.863096@stat.math.ethz.ch>
References: <CANA0HMYoYiHApzRfswTioi352ELYS4bJwvrW+=su6Mtanq84RQ-6733@mail.gmail.com>
 <24051.27320.342490.48043@stat.math.ethz.ch>
 <CANA0HMansuv519fGMJy-Z+rEAgenAs1hr09eYGeV7HFNfZHTHw@mail.gmail.com>
 <24056.44315.345538.772267@stat.math.ethz.ch>
 <24187.7620.591958.863096@stat.math.ethz.ch>
Message-ID: <C62B6877-A37B-4536-B81F-02F996B91C1F@gmail.com>

Do note that 3.6-patched will only be live for a day or two as we branch for 4.0.0 on Friday. Anything committed there is unlikely to make it into an official release (in principle, the 3.6 branch can be revived but it would take a very strong incentive to do so.)

If you want an R-3.6.3-for-ppc, I think a vendor patch is the way. AFAIR (it's been more than a decade since I looked at this stuff) the RPM spec files make it fairly easy to apply changes to the sources before building.

-pd

> On 25 Mar 2020, at 10:00 , Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Martin Maechler 
>>>>>>    on Tue, 17 Dec 2019 11:25:31 +0100 writes:
> 
>>>>>> Tom Callaway 
>>>>>>    on Fri, 13 Dec 2019 11:06:25 -0500 writes:
> 
>>> An excellent question. It is important to remember two key
>>> facts:
> 
>>> 1. With gcc on ppc64, long doubles exist, they can
>>> be used, just not safely as constants (and maybe they
>>> still can be used safely under specific conditions?).
> 
>>> 2. I am not an expert in either PowerPC64 or gcc. :)
> 
>>> Looking at connections.c, we have (in order):
>>> * handling long double as a valid case in a switch statement checking size
>>> * adding long double as a field in the u union define
>>> * handling long double as a valid case in a switch statement checking size
>>> * handling long double as a valid case in a switch statement checking size
>>> * memcpy from the address of a long double
> 
>>> In format.c, we have (in order):
>>> * conditionally creating private_nearbyintl for R_nearbyintl
>>> * defining a static const long double tbl[]
>>> * use exact scaling factor in long double precision
> 
>>> For most of these, it seems safe to leave them as is for ppc64. I would
>>> have thought that the gcc compiler might have had issue with:
> 
>>> connections.c:
>>> static long double ld1;
>>> for (i = 0, j = 0; i < len; i++, j += size) {
>>> ld1 = (long double) REAL(object)[i];
> 
>>> format.c:
>>> static const long double tbl[] =
> 
>>> ... but it doesn't. Perhaps the original code at issue:
> 
>>> arithmetic.c:
>>> static LDOUBLE q_1_eps = 1 / LDBL_EPSILON;
> 
>>> only makes gcc unhappy because of the very large value trying to be stored
>>> in the static long double, which would make it span the "folded double" on
>>> that architecture.
> 
>>> *****
> 
>>> It seems that the options are:
> 
>>> A) Patch the one place where the compiler determines it is not safe to use
>>> a static long double on ppc64.
>>> B) Treat PPC64 as a platform where it is never safe to use a static long
>>> double
> 
>>> FWIW, I did run the test suite after applying my patch and all of the tests
>>> pass on ppc64.
> 
>>> Tom
> 
>> Thank you, Tom.
>> You were right... and only  A)  is needed.
> 
>> In the mean time I've also been CC'ed in a corresponding debian
>> bug report on the exact same architecture.
> 
>> In the end, after explanation and recommendation by Tomas
>> Kalibera, I've committed a slightly better change to R's
>> sources, both in the R-devel (trunk) and the "R-3.6.x patched"
>> branch:  Via a macro, it continues to use long double also for
>> the PPC 64 in this case:
> 
>> $ svn diff -c77587
>> Index: src/main/arithmetic.c
>> ===================================================================
>> --- src/main/arithmetic.c	(Revision 77586)
>> +++ src/main/arithmetic.c	(Revision 77587)
>> @@ -176,8 +176,14 @@
>> #endif
>> }
> 
>> +
>> #if HAVE_LONG_DOUBLE && (SIZEOF_LONG_DOUBLE > SIZEOF_DOUBLE)
>> +# ifdef __PPC64__
>> + // PowerPC 64 (when gcc has -mlong-double-128) fails constant folding with LDOUBLE
>> +#  define q_1_eps (1 / LDBL_EPSILON)
>> +# else
>> static LDOUBLE q_1_eps = 1 / LDBL_EPSILON;
>> +# endif
>> #else
>> static double  q_1_eps = 1 / DBL_EPSILON;
>> #endif
> 
>> ------------- ------------- -------------
> 
> Now, Debian   Bug#946836  has been reopened,
> because  __PPC64__  does not cover all powerpc architectures
> and in their build farm  they found  non-PPC64  cases which also
> needed to switch from a static variable to a macro,
> 
> the suggestion being to replace __PPC64__  by   __powerpc__
> 
> which is what I'm going to commit now (for R-3.6.x patched and
> for R-devel !).
> I hope that these macros are +- universally working and not too
> much depending on the exact compiler flavor.
> 
> Martin Maechler
> ETH Zurich and R Core team
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tc@||@w@ @end|ng |rom redh@t@com  Wed Mar 25 11:26:46 2020
From: tc@||@w@ @end|ng |rom redh@t@com (Tom Callaway)
Date: Wed, 25 Mar 2020 06:26:46 -0400
Subject: [Rd] Build failure on powerpc64
In-Reply-To: <C62B6877-A37B-4536-B81F-02F996B91C1F@gmail.com>
References: <CANA0HMYoYiHApzRfswTioi352ELYS4bJwvrW+=su6Mtanq84RQ-6733@mail.gmail.com>
 <24051.27320.342490.48043@stat.math.ethz.ch>
 <CANA0HMansuv519fGMJy-Z+rEAgenAs1hr09eYGeV7HFNfZHTHw@mail.gmail.com>
 <24056.44315.345538.772267@stat.math.ethz.ch>
 <24187.7620.591958.863096@stat.math.ethz.ch>
 <C62B6877-A37B-4536-B81F-02F996B91C1F@gmail.com>
Message-ID: <CANA0HMYMy2ybFBCbX-PCRH-8M-5o66T6R9qUp=1n-00QaS4H+Q@mail.gmail.com>

This change seems correct, but as we don't have any non-PPC64 systems or
build targets in the Fedora buildsystem, it won't affect Fedora if it
doesn't make it.

Tom


On Wed, Mar 25, 2020, 6:16 AM peter dalgaard <pdalgd at gmail.com> wrote:

> Do note that 3.6-patched will only be live for a day or two as we branch
> for 4.0.0 on Friday. Anything committed there is unlikely to make it into
> an official release (in principle, the 3.6 branch can be revived but it
> would take a very strong incentive to do so.)
>
> If you want an R-3.6.3-for-ppc, I think a vendor patch is the way. AFAIR
> (it's been more than a decade since I looked at this stuff) the RPM spec
> files make it fairly easy to apply changes to the sources before building.
>
> -pd
>
> > On 25 Mar 2020, at 10:00 , Martin Maechler <maechler at stat.math.ethz.ch>
> wrote:
> >
> >>>>>> Martin Maechler
> >>>>>>    on Tue, 17 Dec 2019 11:25:31 +0100 writes:
> >
> >>>>>> Tom Callaway
> >>>>>>    on Fri, 13 Dec 2019 11:06:25 -0500 writes:
> >
> >>> An excellent question. It is important to remember two key
> >>> facts:
> >
> >>> 1. With gcc on ppc64, long doubles exist, they can
> >>> be used, just not safely as constants (and maybe they
> >>> still can be used safely under specific conditions?).
> >
> >>> 2. I am not an expert in either PowerPC64 or gcc. :)
> >
> >>> Looking at connections.c, we have (in order):
> >>> * handling long double as a valid case in a switch statement checking
> size
> >>> * adding long double as a field in the u union define
> >>> * handling long double as a valid case in a switch statement checking
> size
> >>> * handling long double as a valid case in a switch statement checking
> size
> >>> * memcpy from the address of a long double
> >
> >>> In format.c, we have (in order):
> >>> * conditionally creating private_nearbyintl for R_nearbyintl
> >>> * defining a static const long double tbl[]
> >>> * use exact scaling factor in long double precision
> >
> >>> For most of these, it seems safe to leave them as is for ppc64. I would
> >>> have thought that the gcc compiler might have had issue with:
> >
> >>> connections.c:
> >>> static long double ld1;
> >>> for (i = 0, j = 0; i < len; i++, j += size) {
> >>> ld1 = (long double) REAL(object)[i];
> >
> >>> format.c:
> >>> static const long double tbl[] =
> >
> >>> ... but it doesn't. Perhaps the original code at issue:
> >
> >>> arithmetic.c:
> >>> static LDOUBLE q_1_eps = 1 / LDBL_EPSILON;
> >
> >>> only makes gcc unhappy because of the very large value trying to be
> stored
> >>> in the static long double, which would make it span the "folded
> double" on
> >>> that architecture.
> >
> >>> *****
> >
> >>> It seems that the options are:
> >
> >>> A) Patch the one place where the compiler determines it is not safe to
> use
> >>> a static long double on ppc64.
> >>> B) Treat PPC64 as a platform where it is never safe to use a static
> long
> >>> double
> >
> >>> FWIW, I did run the test suite after applying my patch and all of the
> tests
> >>> pass on ppc64.
> >
> >>> Tom
> >
> >> Thank you, Tom.
> >> You were right... and only  A)  is needed.
> >
> >> In the mean time I've also been CC'ed in a corresponding debian
> >> bug report on the exact same architecture.
> >
> >> In the end, after explanation and recommendation by Tomas
> >> Kalibera, I've committed a slightly better change to R's
> >> sources, both in the R-devel (trunk) and the "R-3.6.x patched"
> >> branch:  Via a macro, it continues to use long double also for
> >> the PPC 64 in this case:
> >
> >> $ svn diff -c77587
> >> Index: src/main/arithmetic.c
> >> ===================================================================
> >> --- src/main/arithmetic.c    (Revision 77586)
> >> +++ src/main/arithmetic.c    (Revision 77587)
> >> @@ -176,8 +176,14 @@
> >> #endif
> >> }
> >
> >> +
> >> #if HAVE_LONG_DOUBLE && (SIZEOF_LONG_DOUBLE > SIZEOF_DOUBLE)
> >> +# ifdef __PPC64__
> >> + // PowerPC 64 (when gcc has -mlong-double-128) fails constant folding
> with LDOUBLE
> >> +#  define q_1_eps (1 / LDBL_EPSILON)
> >> +# else
> >> static LDOUBLE q_1_eps = 1 / LDBL_EPSILON;
> >> +# endif
> >> #else
> >> static double  q_1_eps = 1 / DBL_EPSILON;
> >> #endif
> >
> >> ------------- ------------- -------------
> >
> > Now, Debian   Bug#946836  has been reopened,
> > because  __PPC64__  does not cover all powerpc architectures
> > and in their build farm  they found  non-PPC64  cases which also
> > needed to switch from a static variable to a macro,
> >
> > the suggestion being to replace __PPC64__  by   __powerpc__
> >
> > which is what I'm going to commit now (for R-3.6.x patched and
> > for R-devel !).
> > I hope that these macros are +- universally working and not too
> > much depending on the exact compiler flavor.
> >
> > Martin Maechler
> > ETH Zurich and R Core team
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>
>

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Mar 25 11:28:21 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 25 Mar 2020 11:28:21 +0100
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
Message-ID: <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>

On Wed, 25 Mar 2020 at 01:14, Gavin Simpson <ucfagls at gmail.com> wrote:
>
> Dear list
>
> On Fedora 31 the pango library has recently updated to version >= 1.44
> and in doing so has switched to using the HarfBuzz library (from
> FreeType) and dropped Adobe Type 1 font support. This causes problems
> with plotmath as all bar one of the glyphs doesn't render (see
> attached PNG image if it makes it through the list filters - if not I
> have shared a copy via my google drive:
> https://drive.google.com/file/d/1llFqKHD7LFKzQbVuq6sibY1UizRn7xxS/view?usp=sharing
> )
>
> I'm not the only person who has come across this, e.g.
> https://stackoverflow.com/q/60656445/429846 and the resulting reported
> bug on the RedHat Bugzilla:
> https://bugzilla.redhat.com/show_bug.cgi?id=1815128
>
> Beyond switching to  `type = 'Xlib'`, has anyone worked around this
> issue on a Fedora 31 or later system?

Adding devel at lists.fp.o to CC. A workaround is to avoid using PS fonts
for symbols. If you run the following, you'll see

$ fc-match Symbol
StandardSymbolsPS.t1: "Standard Symbols PS" "Regular"

So let's change this. Install a TTF symbol font, such as Symbola:

$ sudo dnf install gdouros-symbola-fonts

Then add the following to /etc/fonts/local.conf (system-wide) or
~/.fonts.conf (just for your user):

<fontconfig>
<match target="pattern">
 <test name="family"><string>Symbol</string></test>
 <edit name="family" mode="prepend" binding="same">
   <string>Symbola</string>
 </edit>
</match>
</fontconfig>

Now you should see this:

$ fc-match Symbol
Symbola.ttf: "Symbola" "Regular"

and symbols should render correctly.

I?aki


From n|co|@@@m@||hot @end|ng |rom |@po@te@net  Wed Mar 25 12:25:01 2020
From: n|co|@@@m@||hot @end|ng |rom |@po@te@net (Nicolas Mailhot)
Date: Wed, 25 Mar 2020 12:25:01 +0100
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
Message-ID: <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>

Le mercredi 25 mars 2020 ? 11:28 +0100, I?aki Ucar a ?crit :
> On Wed, 25 Mar 2020 at 01:14, Gavin Simpson <ucfagls at gmail.com>
> wrote:

Hi,

> Adding devel at lists.fp.o to CC. A workaround is to avoid using PS
> fonts for symbols.

PS fonts are dead mid-term everywhere, and already forbidden in new
Fedora font packages (because we are somewhat leading edge, but not as
much as people think)
https://docs.fedoraproject.org/en-US//packaging-guidelines/FontsPolicy/#_font_file_formats

PS font users need to switch to OpenType fonts or work with their
prefered font upstream to convert in modern well supported formats
(font format wars have endend last millenium, even before the browser
wars ended, it?s long past time to deprecate the losers).

That?s normal IT format obsolescence.


That being said, that?s not what is happening here.

R brought this all on itself by hardcoding a Windows-only ?Symbol? font
family name in its default conf. Linux systems are UTF-8 by default for
~20 years now, they don?t need the forcing of magic font families to
handle symbols not present in the 8-bit legacy Windows encodings.

The actual effect of this conf is not the selection of font files with
special and unusual symbols. It is to priorize fonts that match the
"Symbol" magic name. And those fonts are few and crumbling on Linux
systems, because no one has needed to bother with them since Linux
switched to UTF-8 last millenium.

Just stop using ?Symbol? in R and things will work a lot better.
Alternatively, prepare to maintain the ?Symbol? aliasing stack in
fontconfig (and fight with wine for it), because *no* *one* *else*
*cares* about this legacy Windows-specific stuff.


Fontconfig upstream already told this to R users in its own issue
tracker.


Regards,

-- 
Nicolas Mailhot


From ir@@cois@reb@udo m@iii@g oii ird@ir  Wed Mar 25 15:47:45 2020
From: ir@@cois@reb@udo m@iii@g oii ird@ir (ir@@cois@reb@udo m@iii@g oii ird@ir)
Date: Wed, 25 Mar 2020 15:47:45 +0100 (CET)
Subject: [Rd] contribution to package graphics::barplot
Message-ID: <1596133205.1696083.1585147665602.JavaMail.zimbra@ird.fr>

Dear R-devel members, 
I made a small modification in the graphics::barplot function when used with a matrix and beside argument set to false in order to be able to order each bar according to its value (from smaller to bigger or bigger to smaller), while keeping the colors. It may be of general interest (for example to be able to visualize the occurrences of letters from different texts, or the rank of a condition...). I used it in Figure 3 of one of my article here (http://dx.doi.org/10.1111/eea.12693). 
I would like to ask you if it's worth proposing the modification to the barplot function (and how to do so ?) or if I should consider building a separate R package ? The modified function is attached with modifications from lines 119 and 170, and examples from lines 230. 
Thanks in advance, 
Best regards 


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Mar 25 18:17:35 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 25 Mar 2020 10:17:35 -0700
Subject: [Rd] WISH: Sys.setlocale() to return value invisibly
In-Reply-To: <CAFDcVCTagHrsOwbAdF+08mAv5j3Dc6Ou50YC0iUVP+g92YuS2w@mail.gmail.com>
References: <CAFDcVCTagHrsOwbAdF+08mAv5j3Dc6Ou50YC0iUVP+g92YuS2w@mail.gmail.com>
Message-ID: <CAFDcVCTGVMpq6VKQDEr35-S8QNqyzybphJrzgjn+agTi9Db2ew@mail.gmail.com>

I case someone runs into this topic.  I just found the following
comment from 2012 on BugZilla explaining why Sys.setlocale() does
*not* return invisibly contrary to most++ other setters in R:

PR#15128: Sys.setlocale() - return previous setting invisibly?

Brian Ripley on 2012-12-09 16:53:43 UTC:
> It was a deliberate decision. Unlike options() the locale is usually set at startup and it is major thing to change it in a session--and it is usually only done recording the previous value to return to. The author certainly wanted to see what he was changing from in a session.

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15128#c1

/Henrik

On Tue, Mar 20, 2018 at 2:11 PM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> Contrary to, say, Sys.setenv(), Sys.setlocale() returns it's value
> visibly.  This means that if you for instance add:
>
> Sys.setlocale("LC_COLLATE", "C")
>
> to your .Rprofile file, it will print:
>
> [1] "C"
>
> at startup. The workaround is to wrap the call in invisible(), but I'd
> argue that any "setter" function should return invisibly.
>
> Some more details:
>
> > withVisible(Sys.setlocale("LC_COLLATE", "C"))
> $value
> [1] "C"
>
> $visible
> [1] TRUE
>
> > withVisible(Sys.setenv(FOO = "C"))
> $value
> [1] TRUE
>
> $visible
> [1] FALSE
>
> /Henrik


From uc|@g|@ @end|ng |rom gm@||@com  Wed Mar 25 19:02:44 2020
From: uc|@g|@ @end|ng |rom gm@||@com (Gavin Simpson)
Date: Wed, 25 Mar 2020 12:02:44 -0600
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
Message-ID: <CAAHES9xyemDnO-ObpxH7D+6ZB7RrBCAdgxzzyfWmWcg5tpKmwA@mail.gmail.com>

Thanks I?aki, that worked a treat.

Gavin

On Wed, 25 Mar 2020 at 04:28, I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Wed, 25 Mar 2020 at 01:14, Gavin Simpson <ucfagls at gmail.com> wrote:
> >
> > Dear list
> >
> > On Fedora 31 the pango library has recently updated to version >= 1.44
> > and in doing so has switched to using the HarfBuzz library (from
> > FreeType) and dropped Adobe Type 1 font support. This causes problems
> > with plotmath as all bar one of the glyphs doesn't render (see
> > attached PNG image if it makes it through the list filters - if not I
> > have shared a copy via my google drive:
> > https://drive.google.com/file/d/1llFqKHD7LFKzQbVuq6sibY1UizRn7xxS/view?usp=sharing
> > )
> >
> > I'm not the only person who has come across this, e.g.
> > https://stackoverflow.com/q/60656445/429846 and the resulting reported
> > bug on the RedHat Bugzilla:
> > https://bugzilla.redhat.com/show_bug.cgi?id=1815128
> >
> > Beyond switching to  `type = 'Xlib'`, has anyone worked around this
> > issue on a Fedora 31 or later system?
>
> Adding devel at lists.fp.o to CC. A workaround is to avoid using PS fonts
> for symbols. If you run the following, you'll see
>
> $ fc-match Symbol
> StandardSymbolsPS.t1: "Standard Symbols PS" "Regular"
>
> So let's change this. Install a TTF symbol font, such as Symbola:
>
> $ sudo dnf install gdouros-symbola-fonts
>
> Then add the following to /etc/fonts/local.conf (system-wide) or
> ~/.fonts.conf (just for your user):
>
> <fontconfig>
> <match target="pattern">
>  <test name="family"><string>Symbol</string></test>
>  <edit name="family" mode="prepend" binding="same">
>    <string>Symbola</string>
>  </edit>
> </match>
> </fontconfig>
>
> Now you should see this:
>
> $ fc-match Symbol
> Symbola.ttf: "Symbola" "Regular"
>
> and symbols should render correctly.
>
> I?aki



-- 
Gavin Simpson, PhD


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Mar 25 19:08:45 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 25 Mar 2020 19:08:45 +0100
Subject: [Rd] contribution to package graphics::barplot
In-Reply-To: <1596133205.1696083.1585147665602.JavaMail.zimbra@ird.fr>
References: <1596133205.1696083.1585147665602.JavaMail.zimbra@ird.fr>
Message-ID: <24187.40493.723778.856239@stat.math.ethz.ch>

>>>>>   Francois Rebaudo
>>>>>     on Wed, 25 Mar 2020 15:47:45 +0100 writes:

    > Dear R-devel members, 

    > I made a small modification in the graphics::barplot function when used with a matrix and beside argument set to false in order to be able to order each bar according to its value (from smaller to bigger or bigger to smaller), while keeping the colors. It may be of general interest (for example to be able to visualize the occurrences of letters from different texts, or the rank of a condition...). I used it in Figure 3 of one of my article here (http://dx.doi.org/10.1111/eea.12693). 

    > I would like to ask you if it's worth proposing the modification to the barplot function (and how to do so ?) or if I should consider building a separate R package ? The modified function is attached with modifications from lines 119 and 170, and examples from lines 230. 

Because you did *not* attach the R script as a text file (well
  from one of the 99% of mail programs which do *not* allow you to
  set the MIME-type of an attachment)

it was attached as MIME type "application/octet-stream" which
translates to basically "unspecified/binary"
and such unknown attachments are not allowed (for virus and spam
protection).

But then, because I'm one of the moderators of the R-devel list who
had to approve your message, I got an e-mail from which I can
extract the attachment,  and as I'm using e-mail software from
the rare group where you *can* specify the MIME type, I attach
it here, for you and all readers.

Best regards,
Martin Maechler

    > Thanks in advance, 
    > Best regards


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: barplot_modified.R
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200325/f08757fb/attachment.ksh>

From bbo|ker @end|ng |rom gm@||@com  Thu Mar 26 02:09:16 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 25 Mar 2020 21:09:16 -0400
Subject: [Rd] unstable corner of parameter space for qbeta?
Message-ID: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>


  I've discovered an infelicity (I guess) in qbeta(): it's not a bug,
since there's a clear warning about lack of convergence of the numerical
algorithm ("full precision may not have been achieved").  I can work
around this, but I'm curious why it happens and whether there's a better
workaround -- it doesn't seem to be in a particularly extreme corner of
parameter space. It happens, e.g., for 	these parameters:

phi <- 1.1
i <- 0.01
t <- 0.001
shape1 = i/phi  ##  0.009090909
shape2 = (1-i)/phi  ## 0.9
qbeta(t,shape1,shape2)  ##  5.562685e-309
##  brute-force uniroot() version, see below
Qbeta0(t,shape1,shape2)  ## 0.9262824

  The qbeta code is pretty scary to read: the warning "full precision
may not have been achieved" is triggered here:

https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qbeta.c#L530

  Any thoughts?  Should I report this on the bug list?


A more general illustration:
http://www.math.mcmaster.ca/bolker/misc/qbeta.png

===
fun <- function(phi,i=0.01,t=0.001, f=qbeta) {
  f(t,shape1=i/phi,shape2=(1-i)/phi, lower.tail=FALSE)
}
## brute-force beta quantile function
Qbeta0 <- function(t,shape1,shape2,lower.tail=FALSE) {
  fn <- function(x) {pbeta(x,shape1,shape2,lower.tail=lower.tail)-t}
  uniroot(fn,interval=c(0,1))$root
}
Qbeta <- Vectorize(Qbeta0,c("t","shape1","shape2"))
curve(fun,from=1,to=4)
curve(fun(x,f=Qbeta),add=TRUE,col=2)


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Mar 26 09:02:18 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 26 Mar 2020 09:02:18 +0100
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
Message-ID: <24188.24970.355033.956061@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Wed, 25 Mar 2020 21:09:16 -0400 writes:

    > I've discovered an infelicity (I guess) in qbeta(): it's not a bug,
    > since there's a clear warning about lack of convergence of the numerical
    > algorithm ("full precision may not have been achieved").  I can work
    > around this, but I'm curious why it happens and whether there's a better
    > workaround -- it doesn't seem to be in a particularly extreme corner of
    > parameter space. It happens, e.g., for 	these parameters:

    > phi <- 1.1
    > i <- 0.01
    > t <- 0.001
    > shape1 = i/phi  ##  0.009090909
    > shape2 = (1-i)/phi  ## 0.9
    > qbeta(t,shape1,shape2)  ##  5.562685e-309
    > ##  brute-force uniroot() version, see below
    > Qbeta0(t,shape1,shape2)  ## 0.9262824

    > The qbeta code is pretty scary to read: the warning "full precision
    > may not have been achieved" is triggered here:

    > https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qbeta.c#L530

    > Any thoughts?

Well,  qbeta() is mostly based on inverting pbeta()  and pbeta()
has *several* "dangerous" corners in its parameter spaces
{in some cases, it makes sense to look at the 4 different cases
 log.p = TRUE/FALSE  //  lower.tail = TRUE/FALSE  separately ..}

pbeta() itself is based on the most complex numerical code in
all of base R, i.e., src/nmath/toms708.c  and that algorithm
(TOMS 708) had been sophisticated already when it was published,
and it has been improved and tweaked several times since being
part of R, notably for the log.p=TRUE case which had not been in
the focus of the publication and its algorithm.
[[ NB: part of this you can read when reading  help(pbeta)  to the end ! ]]

I've spent many "man weeks", or even "man months" on pbeta() and
qbeta(), already and have dreamed to get a good student do a
master's thesis about the problem and potential solutions I've
looked into in the mean time.

My current gut feeling is that in some cases, new approximations
are necessary (i.e. tweaking of current approximations is not
going to help sufficiently).

Also not (in the R sources)  tests/p-qbeta-strict-tst.R
a whole file of "regression tests" about  pbeta() and qbeta()
{where part of the true values have been computed with my CRAN
package Rmpfr (for high precision computation) with the
Rmpfr::pbetaI() function which gives arbitrarily precise pbeta()
values but only when  (a,b) are integers -- that's the "I" in pbetaI().

Yes, it's intriguing ... and I'll look into your special
findings a bit later today.


  > Should I report this on the bug list?

Yes, please.  Not all problem of pbeta() / qbeta() are part yet,
of R's bugzilla data base,  and maybe this will help to draw
more good applied mathematicians look into it.



Martin Maechler
ETH Zurich and R Core team
(I'd call myself the "dpq-hacker" within R core -- related to
 my CRAN package 'DPQ')


    > A more general illustration:
    > http://www.math.mcmaster.ca/bolker/misc/qbeta.png

    > ===
    > fun <- function(phi,i=0.01,t=0.001, f=qbeta) {
    > f(t,shape1=i/phi,shape2=(1-i)/phi, lower.tail=FALSE)
    > }
    > ## brute-force beta quantile function
    > Qbeta0 <- function(t,shape1,shape2,lower.tail=FALSE) {
    > fn <- function(x) {pbeta(x,shape1,shape2,lower.tail=lower.tail)-t}
    > uniroot(fn,interval=c(0,1))$root
    > }
    > Qbeta <- Vectorize(Qbeta0,c("t","shape1","shape2"))
    > curve(fun,from=1,to=4)
    > curve(fun(x,f=Qbeta),add=TRUE,col=2)

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Thu Mar 26 09:09:57 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 26 Mar 2020 09:09:57 +0100
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
Message-ID: <41BF047A-FB05-4AE8-AEB6-FE7C4EE4A368@gmail.com>

It's a pretty extreme case, try e.g. curve(pbeta(x, shape1, shape2), n=10001), and (probably -- I can't be bothered to work out the relation between beta shapes and F df parameters this morning...) outside what is normally encountered in statistical analyses. Notice though, that you have lower=FALSE in your Qbeta0, so you should have it in qbeta as well:

> qbeta(t,shape1,shape2, lower=FALSE)  
[1] 0.9999949
Warning message:
In qbeta(t, shape1, shape2, lower = FALSE) :
  full precision may not have been achieved in 'qbeta'

which of course is still wrong (I dont't think there is a problem in the other tail, Qbeta0(t,...., lower=TRUE) returns zero. 

You can see the effect also with

curve(qbeta(x, shape1, shape2), n=10001, from=.99, to=1)

which kind of suggests one of those regime-switching bugs, where different methods are used for various parts of the domain, and the cross-over is not done quite right. 

At any rate, qbeta is one of R's very basic workhorses, so we do want it to work right, so by all means file a report.

-pd

> On 26 Mar 2020, at 02:09 , Ben Bolker <bbolker at gmail.com> wrote:
> 
> 
>  I've discovered an infelicity (I guess) in qbeta(): it's not a bug,
> since there's a clear warning about lack of convergence of the numerical
> algorithm ("full precision may not have been achieved").  I can work
> around this, but I'm curious why it happens and whether there's a better
> workaround -- it doesn't seem to be in a particularly extreme corner of
> parameter space. It happens, e.g., for 	these parameters:
> 
> phi <- 1.1
> i <- 0.01
> t <- 0.001
> shape1 = i/phi  ##  0.009090909
> shape2 = (1-i)/phi  ## 0.9
> qbeta(t,shape1,shape2)  ##  5.562685e-309
> ##  brute-force uniroot() version, see below
> Qbeta0(t,shape1,shape2)  ## 0.9262824
> 
>  The qbeta code is pretty scary to read: the warning "full precision
> may not have been achieved" is triggered here:
> 
> https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qbeta.c#L530
> 
>  Any thoughts?  Should I report this on the bug list?
> 
> 
> A more general illustration:
> http://www.math.mcmaster.ca/bolker/misc/qbeta.png
> 
> ===
> fun <- function(phi,i=0.01,t=0.001, f=qbeta) {
>  f(t,shape1=i/phi,shape2=(1-i)/phi, lower.tail=FALSE)
> }
> ## brute-force beta quantile function
> Qbeta0 <- function(t,shape1,shape2,lower.tail=FALSE) {
>  fn <- function(x) {pbeta(x,shape1,shape2,lower.tail=lower.tail)-t}
>  uniroot(fn,interval=c(0,1))$root
> }
> Qbeta <- Vectorize(Qbeta0,c("t","shape1","shape2"))
> curve(fun,from=1,to=4)
> curve(fun(x,f=Qbeta),add=TRUE,col=2)
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pro|jcn@@h @end|ng |rom gm@||@com  Thu Mar 26 14:29:53 2020
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Thu, 26 Mar 2020 09:29:53 -0400
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <24188.24970.355033.956061@stat.math.ethz.ch>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
 <24188.24970.355033.956061@stat.math.ethz.ch>
Message-ID: <edae89fd-00dd-1364-0831-7ae23f046335@gmail.com>

Given that a number of us are housebound, it might be a good time to try to
improve the approximation. It's not an area where I have much expertise, but in
looking at the qbeta.c code I see a lot of root-finding, where I do have some
background. However, I'm very reluctant to work alone on this, and will ask
interested others to email off-list. If there are others, I'll report back.

Ben: Do you have an idea of parameter region where approximation is poor?
I think that it would be smart to focus on that to start with.

Martin: On a separate precision matter, did you get my query early in year about double
length accumulation of inner products of vectors in Rmpfr? R-help more or
less implied that Rmpfr does NOT use extra length. I've been using David
Smith's FM Fortran where the DOT_PRODUCT does use double length, but it
would be nice to have that in R. My attempts to find "easy" workarounds have
not been successful, but I'll admit that other things took precedence.

Best,

John Nash



On 2020-03-26 4:02 a.m., Martin Maechler wrote:
>>>>>> Ben Bolker 
>>>>>>     on Wed, 25 Mar 2020 21:09:16 -0400 writes:
> 
>     > I've discovered an infelicity (I guess) in qbeta(): it's not a bug,
>     > since there's a clear warning about lack of convergence of the numerical
>     > algorithm ("full precision may not have been achieved").  I can work
>     > around this, but I'm curious why it happens and whether there's a better
>     > workaround -- it doesn't seem to be in a particularly extreme corner of
>     > parameter space. It happens, e.g., for 	these parameters:
> 
>     > phi <- 1.1
>     > i <- 0.01
>     > t <- 0.001
>     > shape1 = i/phi  ##  0.009090909
>     > shape2 = (1-i)/phi  ## 0.9
>     > qbeta(t,shape1,shape2)  ##  5.562685e-309
>     > ##  brute-force uniroot() version, see below
>     > Qbeta0(t,shape1,shape2)  ## 0.9262824
> 
>     > The qbeta code is pretty scary to read: the warning "full precision
>     > may not have been achieved" is triggered here:
> 
>     > https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qbeta.c#L530
> 
>     > Any thoughts?
> 
> Well,  qbeta() is mostly based on inverting pbeta()  and pbeta()
> has *several* "dangerous" corners in its parameter spaces
> {in some cases, it makes sense to look at the 4 different cases
>  log.p = TRUE/FALSE  //  lower.tail = TRUE/FALSE  separately ..}
> 
> pbeta() itself is based on the most complex numerical code in
> all of base R, i.e., src/nmath/toms708.c  and that algorithm
> (TOMS 708) had been sophisticated already when it was published,
> and it has been improved and tweaked several times since being
> part of R, notably for the log.p=TRUE case which had not been in
> the focus of the publication and its algorithm.
> [[ NB: part of this you can read when reading  help(pbeta)  to the end ! ]]
> 
> I've spent many "man weeks", or even "man months" on pbeta() and
> qbeta(), already and have dreamed to get a good student do a
> master's thesis about the problem and potential solutions I've
> looked into in the mean time.
> 
> My current gut feeling is that in some cases, new approximations
> are necessary (i.e. tweaking of current approximations is not
> going to help sufficiently).
> 
> Also not (in the R sources)  tests/p-qbeta-strict-tst.R
> a whole file of "regression tests" about  pbeta() and qbeta()
> {where part of the true values have been computed with my CRAN
> package Rmpfr (for high precision computation) with the
> Rmpfr::pbetaI() function which gives arbitrarily precise pbeta()
> values but only when  (a,b) are integers -- that's the "I" in pbetaI().
> 
> Yes, it's intriguing ... and I'll look into your special
> findings a bit later today.
> 
> 
>   > Should I report this on the bug list?
> 
> Yes, please.  Not all problem of pbeta() / qbeta() are part yet,
> of R's bugzilla data base,  and maybe this will help to draw
> more good applied mathematicians look into it.
> 
> 
> 
> Martin Maechler
> ETH Zurich and R Core team
> (I'd call myself the "dpq-hacker" within R core -- related to
>  my CRAN package 'DPQ')
> 
> 
>     > A more general illustration:
>     > http://www.math.mcmaster.ca/bolker/misc/qbeta.png
> 
>     > ===
>     > fun <- function(phi,i=0.01,t=0.001, f=qbeta) {
>     > f(t,shape1=i/phi,shape2=(1-i)/phi, lower.tail=FALSE)
>     > }
>     > ## brute-force beta quantile function
>     > Qbeta0 <- function(t,shape1,shape2,lower.tail=FALSE) {
>     > fn <- function(x) {pbeta(x,shape1,shape2,lower.tail=lower.tail)-t}
>     > uniroot(fn,interval=c(0,1))$root
>     > }
>     > Qbeta <- Vectorize(Qbeta0,c("t","shape1","shape2"))
>     > curve(fun,from=1,to=4)
>     > curve(fun(x,f=Qbeta),add=TRUE,col=2)
> 
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Mar 26 15:34:29 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 26 Mar 2020 15:34:29 +0100
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <edae89fd-00dd-1364-0831-7ae23f046335@gmail.com>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
 <24188.24970.355033.956061@stat.math.ethz.ch>
 <edae89fd-00dd-1364-0831-7ae23f046335@gmail.com>
Message-ID: <24188.48501.214317.364747@stat.math.ethz.ch>

>>>>> J C Nash 
>>>>>     on Thu, 26 Mar 2020 09:29:53 -0400 writes:

    > Given that a number of us are housebound, it might be a good time to try to
    > improve the approximation. It's not an area where I have much expertise, but in
    > looking at the qbeta.c code I see a lot of root-finding, where I do have some
    > background. However, I'm very reluctant to work alone on this, and will ask
    > interested others to email off-list. If there are others, I'll report back.

Hi John.
Yes, qbeta() {in its "main branches"}  does zero finding, but
zero finding of   pbeta(...) - p*   and I tried to explain in my
last e-mail that the real problem is that already pbeta() is not
accurate enough in some unstable corners ...
The order fixing should typically be
1) fix pbeta()
2) look at qbeta() which now may not even need a fix because its
   problems may have been entirely a consequence of pbeta()'s inaccuracies.
   And if there are cases where the qbeta() problems are not
   only pbeta's "fault", it is still true that the fixes that
   would still be needed crucially depend on the detailed
   working of the function whose zero(s) are sought, i.e.,  pbeta()

    > Ben: Do you have an idea of parameter region where approximation is poor?
    > I think that it would be smart to focus on that to start with.

----------------------------

Rmpfr  matrix-/vector - products:

    > Martin: On a separate precision matter, did you get my query early in year about double
    > length accumulation of inner products of vectors in Rmpfr? R-help more or
    > less implied that Rmpfr does NOT use extra length. I've been using David
    > Smith's FM Fortran where the DOT_PRODUCT does use double length, but it
    > would be nice to have that in R. My attempts to find "easy" workarounds have
    > not been successful, but I'll admit that other things took precedence.

Well, the current development version of 'Rmpfr' on R-forge now
contains facilities to enlarge the precision of the computations
by a factor 'fPrec' with default 'fPrec = 1';
notably, instead of  x %*% y   (where the `%*%` cannot have more
than two arguments) does have a counterpart  matmult(x,y, ....)
which allows more arguments, namely 'fPrec', or directly 'precBits';
and of course there are  crossprod() and tcrossprod() one should
use when applicable and they also got the  'fPrec' and
'precBits' arguments.

{The %*% etc precision increase still does not work optimally
 efficiency wise, as it simply increases the precision of all
 computations by just increasing the precision of x and y (the inputs)}.

The whole  Matrix and Matrix-vector arithmetic is still
comparibly slow in Rmpfr .. mostly because I valued human time
(mine!) much higher than computer time in its implementation.
That's one reason I would never want to double the precision
everywhere as it decreases speed even more, and often times
unnecessarily: doubling the accuracy is basically "worst-case
scenario" precaution

Martin


From pro|jcn@@h @end|ng |rom gm@||@com  Thu Mar 26 15:40:05 2020
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Thu, 26 Mar 2020 10:40:05 -0400
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <24188.48501.214317.364747@stat.math.ethz.ch>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
 <24188.24970.355033.956061@stat.math.ethz.ch>
 <edae89fd-00dd-1364-0831-7ae23f046335@gmail.com>
 <24188.48501.214317.364747@stat.math.ethz.ch>
Message-ID: <dc7f52d8-e476-8bec-66e0-84c54b706010@gmail.com>

Despite the need to focus on pbeta, I'm still willing to put in some effort.
But I find it really helps to have 2-3 others involved, since the questions back
and forth keep matters moving forward. Volunteers?

Thanks to Martin for detailed comments.

JN


On 2020-03-26 10:34 a.m., Martin Maechler wrote:
>>>>>> J C Nash 
>>>>>>     on Thu, 26 Mar 2020 09:29:53 -0400 writes:
> 
>     > Given that a number of us are housebound, it might be a good time to try to
>     > improve the approximation. It's not an area where I have much expertise, but in
>     > looking at the qbeta.c code I see a lot of root-finding, where I do have some
>     > background. However, I'm very reluctant to work alone on this, and will ask
>     > interested others to email off-list. If there are others, I'll report back.
> 
> Hi John.
> Yes, qbeta() {in its "main branches"}  does zero finding, but
> zero finding of   pbeta(...) - p*   and I tried to explain in my
> last e-mail that the real problem is that already pbeta() is not
> accurate enough in some unstable corners ...
> The order fixing should typically be
> 1) fix pbeta()
> 2) look at qbeta() which now may not even need a fix because its
>    problems may have been entirely a consequence of pbeta()'s inaccuracies.
>    And if there are cases where the qbeta() problems are not
>    only pbeta's "fault", it is still true that the fixes that
>    would still be needed crucially depend on the detailed
>    working of the function whose zero(s) are sought, i.e.,  pbeta()
> 
>     > Ben: Do you have an idea of parameter region where approximation is poor?
>     > I think that it would be smart to focus on that to start with.
> 
> ----------------------------
> 
> Rmpfr  matrix-/vector - products:
> 
>     > Martin: On a separate precision matter, did you get my query early in year about double
>     > length accumulation of inner products of vectors in Rmpfr? R-help more or
>     > less implied that Rmpfr does NOT use extra length. I've been using David
>     > Smith's FM Fortran where the DOT_PRODUCT does use double length, but it
>     > would be nice to have that in R. My attempts to find "easy" workarounds have
>     > not been successful, but I'll admit that other things took precedence.
> 
> Well, the current development version of 'Rmpfr' on R-forge now
> contains facilities to enlarge the precision of the computations
> by a factor 'fPrec' with default 'fPrec = 1';
> notably, instead of  x %*% y   (where the `%*%` cannot have more
> than two arguments) does have a counterpart  matmult(x,y, ....)
> which allows more arguments, namely 'fPrec', or directly 'precBits';
> and of course there are  crossprod() and tcrossprod() one should
> use when applicable and they also got the  'fPrec' and
> 'precBits' arguments.
> 
> {The %*% etc precision increase still does not work optimally
>  efficiency wise, as it simply increases the precision of all
>  computations by just increasing the precision of x and y (the inputs)}.
> 
> The whole  Matrix and Matrix-vector arithmetic is still
> comparibly slow in Rmpfr .. mostly because I valued human time
> (mine!) much higher than computer time in its implementation.
> That's one reason I would never want to double the precision
> everywhere as it decreases speed even more, and often times
> unnecessarily: doubling the accuracy is basically "worst-case
> scenario" precaution
> 
> Martin
>


From r@v|@v@r@dh@n @end|ng |rom jhu@edu  Thu Mar 26 19:33:43 2020
From: r@v|@v@r@dh@n @end|ng |rom jhu@edu (Ravi Varadhan)
Date: Thu, 26 Mar 2020 18:33:43 +0000
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <dc7f52d8-e476-8bec-66e0-84c54b706010@gmail.com>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
 <24188.24970.355033.956061@stat.math.ethz.ch>
 <edae89fd-00dd-1364-0831-7ae23f046335@gmail.com>
 <24188.48501.214317.364747@stat.math.ethz.ch>,
 <dc7f52d8-e476-8bec-66e0-84c54b706010@gmail.com>
Message-ID: <2eb4f7eba2544727acba20d05c0377c8@jhu.edu>

This is also strange:


qbeta <- function (p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)
{
    if (missing(ncp))
        .Call(C_qbeta, p, shape1, shape2, lower.tail, log.p)
    else .Call(C_qnbeta, p, shape1, shape2, ncp, lower.tail,
        log.p)
}




Since the default value is 0 for non-centrality, it seems like the logic above is wrong. When ncp=0, C_qnbeta would be called rather than C_qbeta.

Am I missing something?



Ravi



________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of J C Nash <profjcnash at gmail.com>
Sent: Thursday, March 26, 2020 10:40:05 AM
To: Martin Maechler
Cc: r-devel at r-project.org
Subject: Re: [Rd] unstable corner of parameter space for qbeta?


Despite the need to focus on pbeta, I'm still willing to put in some effort.
But I find it really helps to have 2-3 others involved, since the questions back
and forth keep matters moving forward. Volunteers?

Thanks to Martin for detailed comments.

JN


On 2020-03-26 10:34 a.m., Martin Maechler wrote:
>>>>>> J C Nash
>>>>>>     on Thu, 26 Mar 2020 09:29:53 -0400 writes:
>
>     > Given that a number of us are housebound, it might be a good time to try to
>     > improve the approximation. It's not an area where I have much expertise, but in
>     > looking at the qbeta.c code I see a lot of root-finding, where I do have some
>     > background. However, I'm very reluctant to work alone on this, and will ask
>     > interested others to email off-list. If there are others, I'll report back.
>
> Hi John.
> Yes, qbeta() {in its "main branches"}  does zero finding, but
> zero finding of   pbeta(...) - p*   and I tried to explain in my
> last e-mail that the real problem is that already pbeta() is not
> accurate enough in some unstable corners ...
> The order fixing should typically be
> 1) fix pbeta()
> 2) look at qbeta() which now may not even need a fix because its
>    problems may have been entirely a consequence of pbeta()'s inaccuracies.
>    And if there are cases where the qbeta() problems are not
>    only pbeta's "fault", it is still true that the fixes that
>    would still be needed crucially depend on the detailed
>    working of the function whose zero(s) are sought, i.e.,  pbeta()
>
>     > Ben: Do you have an idea of parameter region where approximation is poor?
>     > I think that it would be smart to focus on that to start with.
>
> ----------------------------
>
> Rmpfr  matrix-/vector - products:
>
>     > Martin: On a separate precision matter, did you get my query early in year about double
>     > length accumulation of inner products of vectors in Rmpfr? R-help more or
>     > less implied that Rmpfr does NOT use extra length. I've been using David
>     > Smith's FM Fortran where the DOT_PRODUCT does use double length, but it
>     > would be nice to have that in R. My attempts to find "easy" workarounds have
>     > not been successful, but I'll admit that other things took precedence.
>
> Well, the current development version of 'Rmpfr' on R-forge now
> contains facilities to enlarge the precision of the computations
> by a factor 'fPrec' with default 'fPrec = 1';
> notably, instead of  x %*% y   (where the `%*%` cannot have more
> than two arguments) does have a counterpart  matmult(x,y, ....)
> which allows more arguments, namely 'fPrec', or directly 'precBits';
> and of course there are  crossprod() and tcrossprod() one should
> use when applicable and they also got the  'fPrec' and
> 'precBits' arguments.
>
> {The %*% etc precision increase still does not work optimally
>  efficiency wise, as it simply increases the precision of all
>  computations by just increasing the precision of x and y (the inputs)}.
>
> The whole  Matrix and Matrix-vector arithmetic is still
> comparibly slow in Rmpfr .. mostly because I valued human time
> (mine!) much higher than computer time in its implementation.
> That's one reason I would never want to double the precision
> everywhere as it decreases speed even more, and often times
> unnecessarily: doubling the accuracy is basically "worst-case
> scenario" precaution
>
> Martin
>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From w|n@tonch@ng1 @end|ng |rom gm@||@com  Thu Mar 26 19:38:45 2020
From: w|n@tonch@ng1 @end|ng |rom gm@||@com (Winston Chang)
Date: Thu, 26 Mar 2020 13:38:45 -0500
Subject: [Rd] Rebuilding and re-checking of downstream dependencies on CRAN
 Mac build machines
Message-ID: <CAFOpNVE8v+R_7TwaDevXRPKRFPF71qVH7d0MG07hn2Tb-HA0cA@mail.gmail.com>

I have two questions about the CRAN machines that build binary
packages for Mac. When a new version of a package is released,
  (A) Do the downstream dependencies get re-checked?
  (B) Do the downstream dependencies get re-built?

I have heard (but do not know for sure) that the answer to (A) is no,
the downstream dependencies do not get rechecked.

>From publicly available information on the CRAN web server, it looks
like the answer to (B) is also no, the downstream dependencies do not
get rebuilt. Looking at
https://www.r-project.org/nosvn/R.check/r-release-osx-x86_64/, I see
the following dates for these binary packages:

- Rcpp_1.0.4.tgz: 2020-03-18
- httpuv_1.5.2.tgz: 2019-09-12
- dplyr_0.8.5.tgz: 2020-03-08

Rcpp was released recently, and httpuv and dplyr (which are downstream
dependencies of Rcpp) have older dates, which indicates that these
binary packages were not rebuilt when Rcpp was released.

In my particular case, I'm interested in the httpuv package (which I
maintain). I and several others have not been able to get the CRAN
version of httpuv to compile using the CRAN version of Rcpp on Mac.
(It seems to compile fine on other platforms.) I have heard from
maintainers of other Rcpp-dependent packages that they also can't get
their packages to compile on Mac, using both the default Mac compiler
toolchain and the CRAN-recommended toolchain, which uses clang 7.

For more technical details about the cause of breakage, see:
https://github.com/RcppCore/Rcpp/issues/1060
https://github.com/rstudio/httpuv/issues/260

If the CRAN Mac build machine is indeed able to build httpuv against
the current version of Rcpp, it would be really helpful to have more
information about the system configuration. If it is not able to
rebuild httpuv and other packages against Rcpp, then this is a
problem. Among other things, it prevents people from building their
packages from source using CRAN versions of packages, and it also
means that none of these packages can release a new version, because
the binaries can't be built on Mac.

-Winston


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Mar 26 21:55:31 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 26 Mar 2020 21:55:31 +0100
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <2eb4f7eba2544727acba20d05c0377c8@jhu.edu>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
 <24188.24970.355033.956061@stat.math.ethz.ch>
 <edae89fd-00dd-1364-0831-7ae23f046335@gmail.com>
 <24188.48501.214317.364747@stat.math.ethz.ch>
 <dc7f52d8-e476-8bec-66e0-84c54b706010@gmail.com>
 <2eb4f7eba2544727acba20d05c0377c8@jhu.edu>
Message-ID: <24189.5827.673303.633053@stat.math.ethz.ch>

>>>>> Ravi Varadhan 
>>>>>     on Thu, 26 Mar 2020 18:33:43 +0000 writes:

    > This is also strange:
    > qbeta <- function (p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)
    > {
    > if (missing(ncp))
    > .Call(C_qbeta, p, shape1, shape2, lower.tail, log.p)
    > else .Call(C_qnbeta, p, shape1, shape2, ncp, lower.tail,
    > log.p)
    > }




    > Since the default value is 0 for non-centrality, it seems like the logic above is wrong. When ncp=0, C_qnbeta would be called rather than C_qbeta.

    > Am I missing something?

Yes.  This has been on purpose (forever) and I think the help
page mentions that - though probably a bit subtly.

The way it is now, one can use both algorithms to compute what
in principle should be the main thing.


    > Ravi



    > ________________________________
    > From: R-devel <r-devel-bounces at r-project.org> on behalf of J C Nash <profjcnash at gmail.com>
    > Sent: Thursday, March 26, 2020 10:40:05 AM
    > To: Martin Maechler
    > Cc: r-devel at r-project.org
    > Subject: Re: [Rd] unstable corner of parameter space for qbeta?


    > Despite the need to focus on pbeta, I'm still willing to put in some effort.
    > But I find it really helps to have 2-3 others involved, since the questions back
    > and forth keep matters moving forward. Volunteers?

    > Thanks to Martin for detailed comments.

    > JN


    > On 2020-03-26 10:34 a.m., Martin Maechler wrote:
    >>>>>>> J C Nash
    >>>>>>> on Thu, 26 Mar 2020 09:29:53 -0400 writes:
    >> 
    >> > Given that a number of us are housebound, it might be a good time to try to
    >> > improve the approximation. It's not an area where I have much expertise, but in
    >> > looking at the qbeta.c code I see a lot of root-finding, where I do have some
    >> > background. However, I'm very reluctant to work alone on this, and will ask
    >> > interested others to email off-list. If there are others, I'll report back.
    >> 
    >> Hi John.
    >> Yes, qbeta() {in its "main branches"}  does zero finding, but
    >> zero finding of   pbeta(...) - p*   and I tried to explain in my
    >> last e-mail that the real problem is that already pbeta() is not
    >> accurate enough in some unstable corners ...
    >> The order fixing should typically be
    >> 1) fix pbeta()
    >> 2) look at qbeta() which now may not even need a fix because its
    >> problems may have been entirely a consequence of pbeta()'s inaccuracies.
    >> And if there are cases where the qbeta() problems are not
    >> only pbeta's "fault", it is still true that the fixes that
    >> would still be needed crucially depend on the detailed
    >> working of the function whose zero(s) are sought, i.e.,  pbeta()
    >> 
    >> > Ben: Do you have an idea of parameter region where approximation is poor?
    >> > I think that it would be smart to focus on that to start with.
    >> 
    >> ----------------------------
    >> 
    >> Rmpfr  matrix-/vector - products:
    >> 
    >> > Martin: On a separate precision matter, did you get my query early in year about double
    >> > length accumulation of inner products of vectors in Rmpfr? R-help more or
    >> > less implied that Rmpfr does NOT use extra length. I've been using David
    >> > Smith's FM Fortran where the DOT_PRODUCT does use double length, but it
    >> > would be nice to have that in R. My attempts to find "easy" workarounds have
    >> > not been successful, but I'll admit that other things took precedence.
    >> 
    >> Well, the current development version of 'Rmpfr' on R-forge now
    >> contains facilities to enlarge the precision of the computations
    >> by a factor 'fPrec' with default 'fPrec = 1';
    >> notably, instead of  x %*% y   (where the `%*%` cannot have more
    >> than two arguments) does have a counterpart  matmult(x,y, ....)
    >> which allows more arguments, namely 'fPrec', or directly 'precBits';
    >> and of course there are  crossprod() and tcrossprod() one should
    >> use when applicable and they also got the  'fPrec' and
    >> 'precBits' arguments.
    >> 
    >> {The %*% etc precision increase still does not work optimally
    >> efficiency wise, as it simply increases the precision of all
    >> computations by just increasing the precision of x and y (the inputs)}.
    >> 
    >> The whole  Matrix and Matrix-vector arithmetic is still
    >> comparibly slow in Rmpfr .. mostly because I valued human time
    >> (mine!) much higher than computer time in its implementation.
    >> That's one reason I would never want to double the precision
    >> everywhere as it decreases speed even more, and often times
    >> unnecessarily: doubling the accuracy is basically "worst-case
    >> scenario" precaution
    >> 
    >> Martin
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Mar 26 22:00:33 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 27 Mar 2020 10:00:33 +1300
Subject: [Rd] 
 Rebuilding and re-checking of downstream dependencies on CRAN
 Mac build machines
In-Reply-To: <CAFOpNVE8v+R_7TwaDevXRPKRFPF71qVH7d0MG07hn2Tb-HA0cA@mail.gmail.com>
References: <CAFOpNVE8v+R_7TwaDevXRPKRFPF71qVH7d0MG07hn2Tb-HA0cA@mail.gmail.com>
Message-ID: <21843D74-A741-41C3-BB32-45B0B8D78A8C@R-project.org>

Winston,

the Mac CRAN build builds a package only if either is true:
1) the package has not passed checks
2) there is a new version of the package since last successful build+check

The old build machine doesn't have the capacity to do full re-builds (it would take over 24h - currently the nightly build of packages takes 16-22 hours), but we're currently building a new setup for R 4.0.0 on new hardware and as a part of it we are planning to setup a "mac-builder" similar to what is currently available for Windows.

That said, I have run httpuv by hand on the CRAN build machine (against Rcpp 1.0.4) and I saw no issues. I have seen the discussion on Rcpp, but so far no one actually posted details of what is breaking (nor do your links include any actual details on this). I'd love to help, but the lack fo a useful report makes this impossible. If you have any actual leads, please post them. The CRAN machine uses the tools that are available on CRAN: https://cran.r-project.org/bin/macosx/tools/ (clang-7 and gfortran-6.1 for 3.6.x)

Cheers,
Simon


> On 27/03/2020, at 7:38 AM, Winston Chang <winstonchang1 at gmail.com> wrote:
> 
> I have two questions about the CRAN machines that build binary
> packages for Mac. When a new version of a package is released,
>  (A) Do the downstream dependencies get re-checked?
>  (B) Do the downstream dependencies get re-built?
> 
> I have heard (but do not know for sure) that the answer to (A) is no,
> the downstream dependencies do not get rechecked.
> 
> From publicly available information on the CRAN web server, it looks
> like the answer to (B) is also no, the downstream dependencies do not
> get rebuilt. Looking at
> https://www.r-project.org/nosvn/R.check/r-release-osx-x86_64/, I see
> the following dates for these binary packages:
> 
> - Rcpp_1.0.4.tgz: 2020-03-18
> - httpuv_1.5.2.tgz: 2019-09-12
> - dplyr_0.8.5.tgz: 2020-03-08
> 
> Rcpp was released recently, and httpuv and dplyr (which are downstream
> dependencies of Rcpp) have older dates, which indicates that these
> binary packages were not rebuilt when Rcpp was released.
> 
> In my particular case, I'm interested in the httpuv package (which I
> maintain). I and several others have not been able to get the CRAN
> version of httpuv to compile using the CRAN version of Rcpp on Mac.
> (It seems to compile fine on other platforms.) I have heard from
> maintainers of other Rcpp-dependent packages that they also can't get
> their packages to compile on Mac, using both the default Mac compiler
> toolchain and the CRAN-recommended toolchain, which uses clang 7.
> 
> For more technical details about the cause of breakage, see:
> https://github.com/RcppCore/Rcpp/issues/1060
> https://github.com/rstudio/httpuv/issues/260
> 
> If the CRAN Mac build machine is indeed able to build httpuv against
> the current version of Rcpp, it would be really helpful to have more
> information about the system configuration. If it is not able to
> rebuild httpuv and other packages against Rcpp, then this is a
> problem. Among other things, it prevents people from building their
> packages from source using CRAN versions of packages, and it also
> means that none of these packages can release a new version, because
> the binaries can't be built on Mac.
> 
> -Winston
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From h@w|ckh@m @end|ng |rom gm@||@com  Thu Mar 26 22:40:26 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Thu, 26 Mar 2020 16:40:26 -0500
Subject: [Rd] 
 Rebuilding and re-checking of downstream dependencies on CRAN
 Mac build machines
In-Reply-To: <21843D74-A741-41C3-BB32-45B0B8D78A8C@R-project.org>
References: <CAFOpNVE8v+R_7TwaDevXRPKRFPF71qVH7d0MG07hn2Tb-HA0cA@mail.gmail.com>
 <21843D74-A741-41C3-BB32-45B0B8D78A8C@R-project.org>
Message-ID: <CABdHhvHgH+EhVamBbbH4SZ0verzHR4FsYJoAkr8hc00-0jgvXA@mail.gmail.com>

If I do install.packages("dplyr", type = "source"), I see:

Installing package into ?/Users/hadley/R?
(as ?lib? is unspecified)
trying URL 'https://cran.rstudio.com/src/contrib/dplyr_0.8.5.tar.gz'
Content type 'application/x-gzip' length 1378766 bytes (1.3 MB)
==================================================
downloaded 1.3 MB

* installing *source* package ?dplyr? ...
** package ?dplyr? successfully unpacked and MD5 sums checked
** using staged installation
** libs
ccache clang++ -Qunused-arguments
 -I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
-I../inst/include -DRCPP_DEFAULT_INCLUDE_CALL=false -DCOMPILING_DPLYR
-DRCPP_USING_UTF8_ERROR_STRING -DRCPP_USE_UNWIND_PROTECT
-DBOOST_NO_AUTO_PTR  -I"/Users/hadley/R/BH/include"
-I"/Users/hadley/R/plogr/include" -I"/Users/hadley/R/Rcpp/include"
-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
-I/usr/local/include  -fPIC  -Wall -g -O2  -c RcppExports.cpp -o
RcppExports.o
In file included from RcppExports.cpp:4:
In file included from ./../inst/include/dplyr.h:4:
In file included from ../inst/include/dplyr/main.h:6:
In file included from ../inst/include/dplyr/workarounds/static_assert.h:17:
In file included from /Users/hadley/R/BH/include/boost/config.hpp:57:
In file included from
/Users/hadley/R/BH/include/boost/config/platform/macos.hpp:28:
In file included from
/Users/hadley/R/BH/include/boost/config/detail/posix_features.hpp:18:
In file included from
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:655:
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/gethostuuid.h:39:17:
error: unknown type name 'uuid_t'
int gethostuuid(uuid_t, const struct timespec *)
__OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);
                ^
In file included from RcppExports.cpp:4:
In file included from ./../inst/include/dplyr.h:4:
In file included from ../inst/include/dplyr/main.h:6:
In file included from ../inst/include/dplyr/workarounds/static_assert.h:17:
In file included from /Users/hadley/R/BH/include/boost/config.hpp:57:
In file included from
/Users/hadley/R/BH/include/boost/config/platform/macos.hpp:28:
In file included from
/Users/hadley/R/BH/include/boost/config/detail/posix_features.hpp:18:
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:662:27:
error: unknown type name 'uuid_t'; did you mean 'uid_t'?
int      getsgroups_np(int *, uuid_t);
                              ^
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31:31:
note: 'uid_t' declared here
typedef __darwin_uid_t        uid_t;
                              ^
In file included from RcppExports.cpp:4:
In file included from ./../inst/include/dplyr.h:4:
In file included from ../inst/include/dplyr/main.h:6:
In file included from ../inst/include/dplyr/workarounds/static_assert.h:17:
In file included from /Users/hadley/R/BH/include/boost/config.hpp:57:
In file included from
/Users/hadley/R/BH/include/boost/config/platform/macos.hpp:28:
In file included from
/Users/hadley/R/BH/include/boost/config/detail/posix_features.hpp:18:
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:664:27:
error: unknown type name 'uuid_t'; did you mean 'uid_t'?
int      getwgroups_np(int *, uuid_t);
                              ^
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31:31:
note: 'uid_t' declared here
typedef __darwin_uid_t        uid_t;
                              ^
In file included from RcppExports.cpp:4:
In file included from ./../inst/include/dplyr.h:4:
In file included from ../inst/include/dplyr/main.h:6:
In file included from ../inst/include/dplyr/workarounds/static_assert.h:17:
In file included from /Users/hadley/R/BH/include/boost/config.hpp:57:
In file included from
/Users/hadley/R/BH/include/boost/config/platform/macos.hpp:28:
In file included from
/Users/hadley/R/BH/include/boost/config/detail/posix_features.hpp:18:
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:727:31:
error: unknown type name 'uuid_t'; did you mean 'uid_t'?
int      setsgroups_np(int, const uuid_t);
                                  ^
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31:31:
note: 'uid_t' declared here
typedef __darwin_uid_t        uid_t;
                              ^
In file included from RcppExports.cpp:4:
In file included from ./../inst/include/dplyr.h:4:
In file included from ../inst/include/dplyr/main.h:6:
In file included from ../inst/include/dplyr/workarounds/static_assert.h:17:
In file included from /Users/hadley/R/BH/include/boost/config.hpp:57:
In file included from
/Users/hadley/R/BH/include/boost/config/platform/macos.hpp:28:
In file included from
/Users/hadley/R/BH/include/boost/config/detail/posix_features.hpp:18:
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:729:31:
error: unknown type name 'uuid_t'; did you mean 'uid_t'?
int      setwgroups_np(int, const uuid_t);
                                  ^
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31:31:
note: 'uid_t' declared here
typedef __darwin_uid_t        uid_t;
                              ^
In file included from RcppExports.cpp:5:
In file included from ./../inst/include/dplyr_types.h:4:
In file included from ../inst/include/dplyr/data/GroupedDataFrame.h:8:
In file included from ../inst/include/tools/SymbolMap.h:4:
In file included from ../inst/include/tools/hash.h:10:
In file included from /Users/hadley/R/BH/include/boost/unordered_map.hpp:17:
In file included from
/Users/hadley/R/BH/include/boost/unordered/unordered_map.hpp:19:
In file included from /Users/hadley/R/BH/include/boost/move/move.hpp:30:
In file included from /Users/hadley/R/BH/include/boost/move/iterator.hpp:27:
/Users/hadley/R/BH/include/boost/move/detail/iterator_traits.hpp:29:1:
warning: inline namespaces are a C++11 feature [-Wc++11-inline-namespace]
BOOST_MOVE_STD_NS_BEG
^
/Users/hadley/R/BH/include/boost/move/detail/std_ns_begin.hpp:18:34: note:
expanded from macro 'BOOST_MOVE_STD_NS_BEG'
   #define BOOST_MOVE_STD_NS_BEG _LIBCPP_BEGIN_NAMESPACE_STD
                                 ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__config:866:53:
note: expanded from macro '_LIBCPP_BEGIN_NAMESPACE_STD'
#define _LIBCPP_BEGIN_NAMESPACE_STD namespace std { inline namespace
_LIBCPP_ABI_NAMESPACE {
                                                    ^
1 warning and 5 errors generated.
make: *** [RcppExports.o] Error 1
ERROR: compilation failed for package ?dplyr?
* removing ?/Users/hadley/R/dplyr?
* restoring previous ?/Users/hadley/R/dplyr?

Hadley


On Thu, Mar 26, 2020 at 4:05 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Winston,
>
> the Mac CRAN build builds a package only if either is true:
> 1) the package has not passed checks
> 2) there is a new version of the package since last successful build+check
>
> The old build machine doesn't have the capacity to do full re-builds (it
> would take over 24h - currently the nightly build of packages takes 16-22
> hours), but we're currently building a new setup for R 4.0.0 on new
> hardware and as a part of it we are planning to setup a "mac-builder"
> similar to what is currently available for Windows.
>
> That said, I have run httpuv by hand on the CRAN build machine (against
> Rcpp 1.0.4) and I saw no issues. I have seen the discussion on Rcpp, but so
> far no one actually posted details of what is breaking (nor do your links
> include any actual details on this). I'd love to help, but the lack fo a
> useful report makes this impossible. If you have any actual leads, please
> post them. The CRAN machine uses the tools that are available on CRAN:
> https://cran.r-project.org/bin/macosx/tools/ (clang-7 and gfortran-6.1
> for 3.6.x)
>
> Cheers,
> Simon
>
>
> > On 27/03/2020, at 7:38 AM, Winston Chang <winstonchang1 at gmail.com>
> wrote:
> >
> > I have two questions about the CRAN machines that build binary
> > packages for Mac. When a new version of a package is released,
> >  (A) Do the downstream dependencies get re-checked?
> >  (B) Do the downstream dependencies get re-built?
> >
> > I have heard (but do not know for sure) that the answer to (A) is no,
> > the downstream dependencies do not get rechecked.
> >
> > From publicly available information on the CRAN web server, it looks
> > like the answer to (B) is also no, the downstream dependencies do not
> > get rebuilt. Looking at
> > https://www.r-project.org/nosvn/R.check/r-release-osx-x86_64/, I see
> > the following dates for these binary packages:
> >
> > - Rcpp_1.0.4.tgz: 2020-03-18
> > - httpuv_1.5.2.tgz: 2019-09-12
> > - dplyr_0.8.5.tgz: 2020-03-08
> >
> > Rcpp was released recently, and httpuv and dplyr (which are downstream
> > dependencies of Rcpp) have older dates, which indicates that these
> > binary packages were not rebuilt when Rcpp was released.
> >
> > In my particular case, I'm interested in the httpuv package (which I
> > maintain). I and several others have not been able to get the CRAN
> > version of httpuv to compile using the CRAN version of Rcpp on Mac.
> > (It seems to compile fine on other platforms.) I have heard from
> > maintainers of other Rcpp-dependent packages that they also can't get
> > their packages to compile on Mac, using both the default Mac compiler
> > toolchain and the CRAN-recommended toolchain, which uses clang 7.
> >
> > For more technical details about the cause of breakage, see:
> > https://github.com/RcppCore/Rcpp/issues/1060
> > https://github.com/rstudio/httpuv/issues/260
> >
> > If the CRAN Mac build machine is indeed able to build httpuv against
> > the current version of Rcpp, it would be really helpful to have more
> > information about the system configuration. If it is not able to
> > rebuild httpuv and other packages against Rcpp, then this is a
> > problem. Among other things, it prevents people from building their
> > packages from source using CRAN versions of packages, and it also
> > means that none of these packages can release a new version, because
> > the binaries can't be built on Mac.
> >
> > -Winston
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From w|n@tonch@ng1 @end|ng |rom gm@||@com  Thu Mar 26 22:41:45 2020
From: w|n@tonch@ng1 @end|ng |rom gm@||@com (Winston Chang)
Date: Thu, 26 Mar 2020 16:41:45 -0500
Subject: [Rd] 
 Rebuilding and re-checking of downstream dependencies on CRAN
 Mac build machines
In-Reply-To: <21843D74-A741-41C3-BB32-45B0B8D78A8C@R-project.org>
References: <CAFOpNVE8v+R_7TwaDevXRPKRFPF71qVH7d0MG07hn2Tb-HA0cA@mail.gmail.com>
 <21843D74-A741-41C3-BB32-45B0B8D78A8C@R-project.org>
Message-ID: <CAFOpNVEZ2zSWHWyOECRRH9DUBLWCypRrbuGhk50DDepiHEc5og@mail.gmail.com>

Simon,

The link I provided to the httpuv issue has detailed information about
the error:
  https://github.com/rstudio/httpuv/issues/260

The error occurs when I run the following (although note, depending on
which mirror you use, the recent CRAN server issues may result in
problems downloading the packages):
  install.packages("Rcpp")
  install.packages("httpuv", type = "source")

Here's the full output:
  https://gist.github.com/wch/c70b438381c9d2a8b1f917b054e0ba7e

Here's an example of the errors:

In file included from staticpath.cpp:1:
In file included from ./staticpath.h:7:
In file included from /Users/winston/R/3.6/BH/include/boost/optional.hpp:15:
In file included from
/Users/winston/R/3.6/BH/include/boost/optional/optional.hpp:28:
In file included from
/Users/winston/R/3.6/BH/include/boost/core/addressof.hpp:17:
In file included from /Users/winston/R/3.6/BH/include/boost/config.hpp:57:
In file included from
/Users/winston/R/3.6/BH/include/boost/config/platform/macos.hpp:28:
In file included from
/Users/winston/R/3.6/BH/include/boost/config/detail/posix_features.hpp:18:
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:664:27:
error: unknown type name 'uuid_t'; did you mean 'uid_t'?
int      getwgroups_np(int *, uuid_t);
                              ^
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31:31:
note: 'uid_t' declared here
typedef __darwin_uid_t        uid_t;
                              ^

This issue describes the same problem:
  https://github.com/RcppCore/Rcpp/issues/1046

And it has been fixed in the development version of Rcpp by:
   https://github.com/RcppCore/Rcpp/pull/1047

I know that Kevin Ushey has tried building with the CRAN-recommended
clang 7 toolchain and encountered the same errors. I haven't done that
yet myself, though.

-Winston

On Thu, Mar 26, 2020 at 4:00 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Winston,
>
> the Mac CRAN build builds a package only if either is true:
> 1) the package has not passed checks
> 2) there is a new version of the package since last successful build+check
>
> The old build machine doesn't have the capacity to do full re-builds (it would take over 24h - currently the nightly build of packages takes 16-22 hours), but we're currently building a new setup for R 4.0.0 on new hardware and as a part of it we are planning to setup a "mac-builder" similar to what is currently available for Windows.
>
> That said, I have run httpuv by hand on the CRAN build machine (against Rcpp 1.0.4) and I saw no issues. I have seen the discussion on Rcpp, but so far no one actually posted details of what is breaking (nor do your links include any actual details on this). I'd love to help, but the lack fo a useful report makes this impossible. If you have any actual leads, please post them. The CRAN machine uses the tools that are available on CRAN: https://cran.r-project.org/bin/macosx/tools/ (clang-7 and gfortran-6.1 for 3.6.x)
>
> Cheers,
> Simon
>
>
> > On 27/03/2020, at 7:38 AM, Winston Chang <winstonchang1 at gmail.com> wrote:
> >
> > I have two questions about the CRAN machines that build binary
> > packages for Mac. When a new version of a package is released,
> >  (A) Do the downstream dependencies get re-checked?
> >  (B) Do the downstream dependencies get re-built?
> >
> > I have heard (but do not know for sure) that the answer to (A) is no,
> > the downstream dependencies do not get rechecked.
> >
> > From publicly available information on the CRAN web server, it looks
> > like the answer to (B) is also no, the downstream dependencies do not
> > get rebuilt. Looking at
> > https://www.r-project.org/nosvn/R.check/r-release-osx-x86_64/, I see
> > the following dates for these binary packages:
> >
> > - Rcpp_1.0.4.tgz: 2020-03-18
> > - httpuv_1.5.2.tgz: 2019-09-12
> > - dplyr_0.8.5.tgz: 2020-03-08
> >
> > Rcpp was released recently, and httpuv and dplyr (which are downstream
> > dependencies of Rcpp) have older dates, which indicates that these
> > binary packages were not rebuilt when Rcpp was released.
> >
> > In my particular case, I'm interested in the httpuv package (which I
> > maintain). I and several others have not been able to get the CRAN
> > version of httpuv to compile using the CRAN version of Rcpp on Mac.
> > (It seems to compile fine on other platforms.) I have heard from
> > maintainers of other Rcpp-dependent packages that they also can't get
> > their packages to compile on Mac, using both the default Mac compiler
> > toolchain and the CRAN-recommended toolchain, which uses clang 7.
> >
> > For more technical details about the cause of breakage, see:
> > https://github.com/RcppCore/Rcpp/issues/1060
> > https://github.com/rstudio/httpuv/issues/260
> >
> > If the CRAN Mac build machine is indeed able to build httpuv against
> > the current version of Rcpp, it would be really helpful to have more
> > information about the system configuration. If it is not able to
> > rebuild httpuv and other packages against Rcpp, then this is a
> > problem. Among other things, it prevents people from building their
> > packages from source using CRAN versions of packages, and it also
> > means that none of these packages can release a new version, because
> > the binaries can't be built on Mac.
> >
> > -Winston
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From bbo|ker @end|ng |rom gm@||@com  Fri Mar 27 02:06:17 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 26 Mar 2020 21:06:17 -0400
Subject: [Rd] unstable corner of parameter space for qbeta?
In-Reply-To: <24188.24970.355033.956061@stat.math.ethz.ch>
References: <f063e4c0-cb9e-c399-c14e-13d6534f8b8e@gmail.com>
 <24188.24970.355033.956061@stat.math.ethz.ch>
Message-ID: <58219bbb-5855-01d5-9ee4-ea30cf49fc5c@gmail.com>



On 2020-03-26 4:02 a.m., Martin Maechler wrote:
>>>>>> Ben Bolker 
>>>>>>     on Wed, 25 Mar 2020 21:09:16 -0400 writes:
> 
>     > I've discovered an infelicity (I guess) in qbeta(): it's not a bug,
>     > since there's a clear warning about lack of convergence of the numerical
>     > algorithm ("full precision may not have been achieved").  I can work
>     > around this, but I'm curious why it happens and whether there's a better
>     > workaround -- it doesn't seem to be in a particularly extreme corner of
>     > parameter space. It happens, e.g., for 	these parameters:
> 
>     > phi <- 1.1
>     > i <- 0.01
>     > t <- 0.001
>     > shape1 = i/phi  ##  0.009090909
>     > shape2 = (1-i)/phi  ## 0.9
>     > qbeta(t,shape1,shape2)  ##  5.562685e-309
>     > ##  brute-force uniroot() version, see below
>     > Qbeta0(t,shape1,shape2)  ## 0.9262824
> 
>     > The qbeta code is pretty scary to read: the warning "full precision
>     > may not have been achieved" is triggered here:
> 
>     > https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qbeta.c#L530
> 
>     > Any thoughts?
> 
> Well,  qbeta() is mostly based on inverting pbeta()  and pbeta()
> has *several* "dangerous" corners in its parameter spaces
> {in some cases, it makes sense to look at the 4 different cases
>  log.p = TRUE/FALSE  //  lower.tail = TRUE/FALSE  separately ..}
> 
> pbeta() itself is based on the most complex numerical code in
> all of base R, i.e., src/nmath/toms708.c  and that algorithm
> (TOMS 708) had been sophisticated already when it was published,
> and it has been improved and tweaked several times since being
> part of R, notably for the log.p=TRUE case which had not been in
> the focus of the publication and its algorithm.
> [[ NB: part of this you can read when reading  help(pbeta)  to the end ! ]]
> 
> I've spent many "man weeks", or even "man months" on pbeta() and
> qbeta(), already and have dreamed to get a good student do a
> master's thesis about the problem and potential solutions I've
> looked into in the mean time.
> 
> My current gut feeling is that in some cases, new approximations
> are necessary (i.e. tweaking of current approximations is not
> going to help sufficiently).
> 
> Also not (in the R sources)  tests/p-qbeta-strict-tst.R
> a whole file of "regression tests" about  pbeta() and qbeta()
> {where part of the true values have been computed with my CRAN
> package Rmpfr (for high precision computation) with the
> Rmpfr::pbetaI() function which gives arbitrarily precise pbeta()
> values but only when  (a,b) are integers -- that's the "I" in pbetaI().
> 
> Yes, it's intriguing ... and I'll look into your special
> findings a bit later today.
> 
> 
>   > Should I report this on the bug list?
> 
> Yes, please.  Not all problem of pbeta() / qbeta() are part yet,
> of R's bugzilla data base,  and maybe this will help to draw
> more good applied mathematicians look into it.

  Will report.

  I'm not at all surprised that this is a super-tough problem.  The only
part that was surprising to me was that my naive uniroot-based solution
worked (for this particular corner of parameter space where qbeta() has
trouble: it was terrible elsewhere, so now I'm using a hybrid solution
where I use my brute-force uniroot thing if I get a warning from qbeta().

I hesitated to even bring it up because I know you're really busy, but I
figured it was better to tag it now and let you deal with it some time
later.

Bugzilla report at https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17746

  cheers
   Ben Bolker


> 
> 
> 
> Martin Maechler
> ETH Zurich and R Core team
> (I'd call myself the "dpq-hacker" within R core -- related to
>  my CRAN package 'DPQ')
> 
> 
>     > A more general illustration:
>     > http://www.math.mcmaster.ca/bolker/misc/qbeta.png
> 
>     > ===
>     > fun <- function(phi,i=0.01,t=0.001, f=qbeta) {
>     > f(t,shape1=i/phi,shape2=(1-i)/phi, lower.tail=FALSE)
>     > }
>     > ## brute-force beta quantile function
>     > Qbeta0 <- function(t,shape1,shape2,lower.tail=FALSE) {
>     > fn <- function(x) {pbeta(x,shape1,shape2,lower.tail=lower.tail)-t}
>     > uniroot(fn,interval=c(0,1))$root
>     > }
>     > Qbeta <- Vectorize(Qbeta0,c("t","shape1","shape2"))
>     > curve(fun,from=1,to=4)
>     > curve(fun(x,f=Qbeta),add=TRUE,col=2)
> 
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@r|u@@ho|ert @end|ng |rom uw@ter|oo@c@  Fri Mar 27 02:55:24 2020
From: m@r|u@@ho|ert @end|ng |rom uw@ter|oo@c@ (Marius Hofert)
Date: Thu, 26 Mar 2020 21:55:24 -0400
Subject: [Rd] Expressions from boxplot() passed to bxp()
Message-ID: <CAM3-KjYsdtXnZYSTZ8v8B5Fyhd1RzUyE-JYCtHV3CbR_1mkWdQ@mail.gmail.com>

Hi,

Is this expected behavior (R-3.6.0)?

dat <- cbind(x = 1:10, y = 10:1)
ylab <- substitute(X[t], list(t = 2))
plot(dat, ylab = ylab) # works (correctly displays ylab)
boxplot(dat, ylab = ylab) # fails
boxplot(dat, ylab = as.expression(ylab)) # works

Thanks & cheers,
M


From pd@|gd @end|ng |rom gm@||@com  Fri Mar 27 10:53:25 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 27 Mar 2020 10:53:25 +0100
Subject: [Rd] Expressions from boxplot() passed to bxp()
In-Reply-To: <CAM3-KjYsdtXnZYSTZ8v8B5Fyhd1RzUyE-JYCtHV3CbR_1mkWdQ@mail.gmail.com>
References: <CAM3-KjYsdtXnZYSTZ8v8B5Fyhd1RzUyE-JYCtHV3CbR_1mkWdQ@mail.gmail.com>
Message-ID: <CBF9F52A-7EBA-4098-B691-9B219B9F4705@gmail.com>

It's not new anyway. You see the same behaviour with

boxplot(dat, ylab=quote(X[2]))

and it boils down to the use of do.call("bxp", ...) in the internals. 

As a general matter, expression() exists to prevent this sort of confusion, e.g., in this construction,

> X <- quote(Y+1); bquote(f(.(X)))
f(Y + 1)

is indistinguishable from just entering f(Y+1), so f has no way of detecting whether or not it is intended to evaluate Y + 1. The same thing is happening with do.call: call objects are being "spliced into" the generated call, and if they are not protected with expression, you have the trouble.

I don't know whether it is worth trying to change this. You know the workaround. 

-pd



> On 27 Mar 2020, at 02:55 , Marius Hofert <marius.hofert at uwaterloo.ca> wrote:
> 
> Hi,
> 
> Is this expected behavior (R-3.6.0)?
> 
> dat <- cbind(x = 1:10, y = 10:1)
> ylab <- substitute(X[t], list(t = 2))
> plot(dat, ylab = ylab) # works (correctly displays ylab)
> boxplot(dat, ylab = ylab) # fails
> boxplot(dat, ylab = as.expression(ylab)) # works
> 
> Thanks & cheers,
> M
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Fri Mar 27 11:00:09 2020
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 27 Mar 2020 10:00:09 +0000
Subject: [Rd] Possibility of Less Verbose Stack Trace
Message-ID: <SY3PR01MB1500CA206751D87F07227A4ECDF30@SY3PR01MB1500.ausprd01.prod.outlook.com>

Good day,

Is there a setting the user can change to make R CMD check stack traces output less and make it easier to spot the line of code that's the problem? I use R Under development. Part of the trace I see looks like:

 --- R stacktrace ---
where 1: .local(model, test, ...)
where 2: (new("nonstandardGenericFunction", .Data = function (model, test, 
    ...) 
{
    standardGeneric("elasticNetGLMpredictInterface")
}, generic = "elasticNetGLMpredictInterface", package = "ClassifyR", 
    group = list(), valueClass = character(0), signature = c("model", 
    "test"), default = NULL, skeleton = (function (model, test, 
        ...) 
    stop("invalid call in method dispatch to 'elasticNetGLMpredictInterface' (no default method)", 
        domain = NA))(model, test, ...)))(list(a0 = c(6.93889390390723e-18, 
-6.93889390390723e-18, -0.0310874816356895, 0.0310874816356895, 
-0.0620911054955688, 0.0620911054955688, -0.0928473601925787, 
0.0928473601925787, -0.123341821729885, 0.123341821729885, -0.153584353208459, 
0.153584353208459, -0.183545850472993, 0.183545850472993, -0.214085623051265, 
0.214085623051265, -0.248487474466851, 0.248487474466851, -0.28259316439965, 
0.28259316439965, -0.316570319872031, 0.316570319872031, -0.35002247515684, 
0.35002247515684, -0.383505934741196, 0.383505934741196, -0.416591574658365, 
0.416591574658365, -0.449236359758103, 0.449236359758103, -0.481785697995159, 

and hundreds more lines of numbers. R CMD check -h doesn't seem to list any options which could be applicable.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From |uc@r @end|ng |rom |edor@project@org  Fri Mar 27 11:30:02 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 27 Mar 2020 11:30:02 +0100
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
Message-ID: <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>

On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
<nicolas.mailhot at laposte.net> wrote:
>
> <snip>
>
> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
> family name in its default conf. Linux systems are UTF-8 by default for
> ~20 years now, they don?t need the forcing of magic font families to
> handle symbols not present in the 8-bit legacy Windows encodings.
>
> The actual effect of this conf is not the selection of font files with
> special and unusual symbols. It is to priorize fonts that match the
> "Symbol" magic name. And those fonts are few and crumbling on Linux
> systems, because no one has needed to bother with them since Linux
> switched to UTF-8 last millenium.
>
> Just stop using ?Symbol? in R and things will work a lot better.
> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
> fontconfig (and fight with wine for it), because *no* *one* *else*
> *cares* about this legacy Windows-specific stuff.

So, in the light of Nicolas' input (thanks!), I think that font
selection should be fixed upstream in R. I'd be happy to put all this
together in R's bugzilla, but I don't have an account. Could someone
please invite me?

I?aki


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Mar 27 13:59:26 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 27 Mar 2020 07:59:26 -0500 (CDT)
Subject: [Rd] [External] Re:  Expressions from boxplot() passed to bxp()
In-Reply-To: <CBF9F52A-7EBA-4098-B691-9B219B9F4705@gmail.com>
References: <CAM3-KjYsdtXnZYSTZ8v8B5Fyhd1RzUyE-JYCtHV3CbR_1mkWdQ@mail.gmail.com>
 <CBF9F52A-7EBA-4098-B691-9B219B9F4705@gmail.com>
Message-ID: <alpine.DEB.2.21.2003270747140.3035@luke-Latitude-7480>

On Fri, 27 Mar 2020, peter dalgaard wrote:

> It's not new anyway. You see the same behaviour with
>
> boxplot(dat, ylab=quote(X[2]))
>
> and it boils down to the use of do.call("bxp", ...) in the internals.
>
> As a general matter, expression() exists to prevent this sort of confusion, e.g., in this construction,
>
>> X <- quote(Y+1); bquote(f(.(X)))
> f(Y + 1)
>
> is indistinguishable from just entering f(Y+1), so f has no way of detecting whether or not it is intended to evaluate Y + 1. The same thing is happening with do.call: call objects are being "spliced into" the generated call, and if they are not protected with expression, you have the trouble.

do.call has a 'quote' argument that can be used to address this. The
default is quote = FALSE, which means all arguments will be evaluated
by the called function. Which is fine for arguments that evaluate to
themselves. For symbols and calls it isn't.

I did try to make the case some time ago that quote = TRUE should be
the default but I lost that argument.

It might be worth revisiting that, or at least reviewing the uses of
do.call in our code sometime (there are a couple of hundred).

Best,

luke

>
> I don't know whether it is worth trying to change this. You know the workaround.
>
> -pd
>
>
>
>> On 27 Mar 2020, at 02:55 , Marius Hofert <marius.hofert at uwaterloo.ca> wrote:
>>
>> Hi,
>>
>> Is this expected behavior (R-3.6.0)?
>>
>> dat <- cbind(x = 1:10, y = 10:1)
>> ylab <- substitute(X[t], list(t = 2))
>> plot(dat, ylab = ylab) # works (correctly displays ylab)
>> boxplot(dat, ylab = ylab) # fails
>> boxplot(dat, ylab = as.expression(ylab)) # works
>>
>> Thanks & cheers,
>> M
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Mar 27 15:01:11 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 27 Mar 2020 15:01:11 +0100
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
Message-ID: <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>

On 2/19/20 3:55 AM, Stefan Schreiber wrote:
> I have posted this question on R-help where it was suggested to me
> that I might get a better response on R-devel. So far I have gotten no
> response. The post I am talking about is here:
> https://stat.ethz.ch/pipermail/r-help/2020-February/465700.html
>
> My apologies for cross-posting, which I am aware is impolite and I
> should have posted on R-devel in the first place - but I wasn't sure.
>
> Here is my question again:
>
> I am currently working through Advanced R by H. Wickham and came
> across the `lobstr::obj_size` function which appears to calculate the
> size of an object by taking into account whether the same object has
> been referenced multiple times, e.g.
>
> x <- runif(1e6)
> y <- list(x, x, x)
> lobstr::obj_size(y)
> # 8,000,128 B
>
> # versus:
> object.size(y)
> # 24000224 bytes
>
> Reading through `?object.size` in the "Details" it reads: [...] but
> does not detect if elements of a list are shared [...].
>
> My questions are:
>
> (1) is the result of `obj_size()` the "correct" one when it comes to
> actual size used in memory?
>
> (2) And if yes, why wouldn't `object.size()` be updated to reflect the
> more precise calculation of an object in question similar to
> `obj_size()`?

Please keep in mind that "actual size used in memory" is an elusive 
concept, particularly in managed languages such as R. Even in native 
languages, you have on-demand paging (not all data in physical memory, 
some may be imputed (all zeros), some may be swapped out, some may be 
stored in files (code), etc). Also you have internal and external 
fragmentation caused by the "C library" memory allocator, overhead of 
object headers and allocator meta-data. On top of that you have the 
managed heap: more of internal and external fragmentation, more headers. 
Moreover, memory representation may change invisibly and sometimes in 
surprising ways (in R it is copy-on-write, so the sharing, but also 
compact objects via ALTREP, e.g. sequences). R has the symbol table, 
string cache (strings are interned, as in some other language runtimes, 
so the price is paid only once for each string). In principle, managed 
runtimes could do much more, including say compression of objects with 
adaptive decompression, some systems internally split representation of 
large objects depending on their size with additional overheads, systems 
could have some transparent de-duplication (not only for strings), some 
choices could be adaptive based on memory pressure. Then in R, packages 
often can maintain memory related to specific R objects, linked say via 
external pointers, and again there may be no meaningful way to map that 
usage to individual objects.

Not only that what is a size of an object tree is not easy to define. 
That information is in addition not very useful, either, because 
innocuous changes may change it in arbitrary ways out of control of the 
user: there is no good intuition how much that size will change from 
intended application-level modifications of the tree. Users of the 
system could hardly create a reliable mental model of the memory usage, 
because it depends on internal design of the virtual machine, which in 
addition can change over time.

As the concept is elusive, the best advice would be don't ask for the 
object size, find some other solutions to your problem. In some cases, 
it makes sense to ask for object size in some application-specific way, 
and then implement object size methods for specific application classes 
(e.g. structures holding strings would sum up number of characters in 
the strings, etc). Such application-specific way may be inspired by some 
particular (perhaps trivial) serialization format.

I've used object.size() myself only for profiling when quickly 
identifying objects that are probably very large from objects of trivial 
size, where these nuances did not matter, but for that I knew roughly 
what the objects were (e.g. that they were not hiding things in 
environments).

Intuitively, the choices made by object.size() in R are conservative, 
they provide an over-approximation that somewhat intuitively makes sense 
at user level, and they reduce surprises of significant size expansion 
due to minimal updates. The choices and their limitations are 
documented. I think this at least no worse than than say taking into 
account sharing, looking at current "size" of compact objects, etc. One 
could provide more options to object.size(), but I don't think that it 
would be useful.

Best,
Tomas


>
> There are probably valid reasons for this and any insight would be
> greatly appreciated.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Fri Mar 27 16:39:15 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 27 Mar 2020 08:39:15 -0700
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
Message-ID: <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>

Hi Tomas,

On 3/27/20 07:01, Tomas Kalibera wrote:
> they provide an over-approximation

They can also provide an "under-approximation" (to say the least) e.g. 
on reference objects where the entire substance of the object is ignored 
which makes object.size() completely meaningless in that case:

   setRefClass("A", fields=c(stuff="ANY"))
   object.size(new("A", stuff=raw(0)))      # 680 bytes
   object.size(new("A", stuff=runif(1e8)))  # 680 bytes

Why wouldn't object.size() look at the content of environments?

Thanks,
H.

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Mar 27 17:07:47 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 27 Mar 2020 17:07:47 +0100
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
Message-ID: <1700a157-2f9f-2882-2f0a-51675517f42d@gmail.com>

On 3/27/20 4:39 PM, Herv? Pag?s wrote:
> Hi Tomas,
>
> On 3/27/20 07:01, Tomas Kalibera wrote:
>> they provide an over-approximation
>
> They can also provide an "under-approximation" (to say the least) e.g. 
> on reference objects where the entire substance of the object is 
> ignored which makes object.size() completely meaningless in that case:
>
> ? setRefClass("A", fields=c(stuff="ANY"))
> ? object.size(new("A", stuff=raw(0)))????? # 680 bytes
> ? object.size(new("A", stuff=runif(1e8)))? # 680 bytes
>
> Why wouldn't object.size() look at the content of environments?

Yes, the treatment of environments is not "over-approximative". It has 
to be bounded somewhere, you can't traverse all captured environments, 
getting to say package namespaces, global environment, code of all 
functions, that would be too over-approximating. For environments used 
as hash maps that contain data, such as in reference classes, it would 
of course be much better to include them, but you can't differentiate 
programmatically. In principle the same environment can be used for both 
things, say a namespace environment can contain data (not clearly 
related to any user-level R object) as well as code. Not mentioning 
things like source references and parse data.

Tomas

>
> Thanks,
> H.
>


From h@w|ckh@m @end|ng |rom gm@||@com  Fri Mar 27 20:00:25 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Fri, 27 Mar 2020 14:00:25 -0500
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
Message-ID: <CABdHhvHKTXmQDpi08u8shneKz7ME_EY_3iTx2XtV2xL9X1u3Jw@mail.gmail.com>

On Fri, Mar 27, 2020 at 10:39 AM Herv? Pag?s <hpages at fredhutch.org> wrote:

> Hi Tomas,
>
> On 3/27/20 07:01, Tomas Kalibera wrote:
> > they provide an over-approximation
>
> They can also provide an "under-approximation" (to say the least) e.g.
> on reference objects where the entire substance of the object is ignored
> which makes object.size() completely meaningless in that case:
>
>    setRefClass("A", fields=c(stuff="ANY"))
>    object.size(new("A", stuff=raw(0)))      # 680 bytes
>    object.size(new("A", stuff=runif(1e8)))  # 680 bytes
>
> Why wouldn't object.size() look at the content of environments?
>

As the author, I'm obviously biased, but I do like lobstr::obj_sizes()
which allows you to see the additional size occupied by one object given
any number of other objects. This is particularly important for reference
classes since individual objects appear quite large:

A <- setRefClass("A", fields=c(stuff="ANY"))
lobstr::obj_size(new("A", stuff=raw(0)))
#> 567,056 B

But the vast majority is shared across all instances of that class:

lobstr::obj_size(A)
#> 719,232 B
lobstr::obj_sizes(A, new("A", stuff=raw(0)))
#> * 719,232 B
#> *     720 B
lobstr::obj_sizes(A, new("A", stuff=runif(1e8)))
#> *     719,232 B
#> * 800,000,720 B

Hadley
-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From h@w|ckh@m @end|ng |rom gm@||@com  Fri Mar 27 20:02:12 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Fri, 27 Mar 2020 14:02:12 -0500
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <1700a157-2f9f-2882-2f0a-51675517f42d@gmail.com>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
 <1700a157-2f9f-2882-2f0a-51675517f42d@gmail.com>
Message-ID: <CABdHhvGqPOqu9bbjZvHFfW3W1d_P8Y-O937Pn6eRQxjFtyRjiQ@mail.gmail.com>

On Fri, Mar 27, 2020 at 11:08 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 3/27/20 4:39 PM, Herv? Pag?s wrote:
> > Hi Tomas,
> >
> > On 3/27/20 07:01, Tomas Kalibera wrote:
> >> they provide an over-approximation
> >
> > They can also provide an "under-approximation" (to say the least) e.g.
> > on reference objects where the entire substance of the object is
> > ignored which makes object.size() completely meaningless in that case:
> >
> >   setRefClass("A", fields=c(stuff="ANY"))
> >   object.size(new("A", stuff=raw(0)))      # 680 bytes
> >   object.size(new("A", stuff=runif(1e8)))  # 680 bytes
> >
> > Why wouldn't object.size() look at the content of environments?
>
> Yes, the treatment of environments is not "over-approximative". It has
> to be bounded somewhere, you can't traverse all captured environments,
> getting to say package namespaces, global environment, code of all
> functions, that would be too over-approximating. For environments used
> as hash maps that contain data, such as in reference classes, it would
> of course be much better to include them, but you can't differentiate
> programmatically. In principle the same environment can be used for both
> things, say a namespace environment can contain data (not clearly
> related to any user-level R object) as well as code. Not mentioning
> things like source references and parse data.
>
>
I think the heuristic used in lobstr works well in practice: don't traverse
further than the current environment (supplied as an argument so you can
override), and don't ever traverse past the global or base environments.

Hadley

-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri Mar 27 22:01:13 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 27 Mar 2020 14:01:13 -0700
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <CABdHhvHKTXmQDpi08u8shneKz7ME_EY_3iTx2XtV2xL9X1u3Jw@mail.gmail.com>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
 <CABdHhvHKTXmQDpi08u8shneKz7ME_EY_3iTx2XtV2xL9X1u3Jw@mail.gmail.com>
Message-ID: <c61ca308-2f8a-a4d3-339e-8c0eaf49d14b@fredhutch.org>



On 3/27/20 12:00, Hadley Wickham wrote:
> 
> 
> On Fri, Mar 27, 2020 at 10:39 AM Herv? Pag?s <hpages at fredhutch.org 
> <mailto:hpages at fredhutch.org>> wrote:
> 
>     Hi Tomas,
> 
>     On 3/27/20 07:01, Tomas Kalibera wrote:
>      > they provide an over-approximation
> 
>     They can also provide an "under-approximation" (to say the least) e.g.
>     on reference objects where the entire substance of the object is
>     ignored
>     which makes object.size() completely meaningless in that case:
> 
>      ? ?setRefClass("A", fields=c(stuff="ANY"))
>      ? ?object.size(new("A", stuff=raw(0)))? ? ? # 680 bytes
>      ? ?object.size(new("A", stuff=runif(1e8)))? # 680 bytes
> 
>     Why wouldn't object.size() look at the content of environments?
> 
> 
> As the author, I'm obviously biased, but I do like lobstr::obj_sizes() 
> which allows you to see the additional size occupied by one object given 
> any number of other objects. This is particularly important for 
> reference classes since individual objects appear quite large:
> 
> A <- setRefClass("A", fields=c(stuff="ANY"))
> lobstr::obj_size(new("A", stuff=raw(0)))
> #> 567,056 B
> 
> But the vast majority is shared across all instances of that class:
> 
> lobstr::obj_size(A)
> #> 719,232 B
> lobstr::obj_sizes(A, new("A", stuff=raw(0)))
> #> * 719,232 B
> #> * ? ? 720 B
> lobstr::obj_sizes(A, new("A", stuff=runif(1e8)))
> #> * ? ? 719,232 B
> #> * 800,000,720 B

Nice. Can you clarify the situation with lobstr::obj_size vs 
pryr::object_size? I've heard of the latter before and use it sometimes 
but never heard of the former before seeing Stefan's post. Then I 
checked the authors of both and thought maybe they should talk to each 
other ;-)

Thanks,
H.

> 
> Hadley
> -- 
> http://hadley.nz 
> <https://urldefense.proofpoint.com/v2/url?u=http-3A__hadley.nz&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=MX7Olw-dGRDfJNWEqIDTTTkaagVswOEqcRnxuRBAdjw&s=haVkOV6bEj7VnjT4Gn4iXzRqO7IOqDZUZuEeFPSHQuM&e=>

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From h@w|ckh@m @end|ng |rom gm@||@com  Fri Mar 27 23:19:21 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Fri, 27 Mar 2020 17:19:21 -0500
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <c61ca308-2f8a-a4d3-339e-8c0eaf49d14b@fredhutch.org>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
 <CABdHhvHKTXmQDpi08u8shneKz7ME_EY_3iTx2XtV2xL9X1u3Jw@mail.gmail.com>
 <c61ca308-2f8a-a4d3-339e-8c0eaf49d14b@fredhutch.org>
Message-ID: <CABdHhvGt1pU4+19fyYAMZoBWQeW4=7SebssZ4FWAKArUnSeNUA@mail.gmail.com>

On Fri, Mar 27, 2020 at 4:01 PM Herv? Pag?s <hpages at fredhutch.org> wrote:

>
>
> On 3/27/20 12:00, Hadley Wickham wrote:
> >
> >
> > On Fri, Mar 27, 2020 at 10:39 AM Herv? Pag?s <hpages at fredhutch.org
> > <mailto:hpages at fredhutch.org>> wrote:
> >
> >     Hi Tomas,
> >
> >     On 3/27/20 07:01, Tomas Kalibera wrote:
> >      > they provide an over-approximation
> >
> >     They can also provide an "under-approximation" (to say the least)
> e.g.
> >     on reference objects where the entire substance of the object is
> >     ignored
> >     which makes object.size() completely meaningless in that case:
> >
> >         setRefClass("A", fields=c(stuff="ANY"))
> >         object.size(new("A", stuff=raw(0)))      # 680 bytes
> >         object.size(new("A", stuff=runif(1e8)))  # 680 bytes
> >
> >     Why wouldn't object.size() look at the content of environments?
> >
> >
> > As the author, I'm obviously biased, but I do like lobstr::obj_sizes()
> > which allows you to see the additional size occupied by one object given
> > any number of other objects. This is particularly important for
> > reference classes since individual objects appear quite large:
> >
> > A <- setRefClass("A", fields=c(stuff="ANY"))
> > lobstr::obj_size(new("A", stuff=raw(0)))
> > #> 567,056 B
> >
> > But the vast majority is shared across all instances of that class:
> >
> > lobstr::obj_size(A)
> > #> 719,232 B
> > lobstr::obj_sizes(A, new("A", stuff=raw(0)))
> > #> * 719,232 B
> > #> *     720 B
> > lobstr::obj_sizes(A, new("A", stuff=runif(1e8)))
> > #> *     719,232 B
> > #> * 800,000,720 B
>
> Nice. Can you clarify the situation with lobstr::obj_size vs
> pryr::object_size? I've heard of the latter before and use it sometimes
> but never heard of the former before seeing Stefan's post. Then I
> checked the authors of both and thought maybe they should talk to each
> other ;-)
>

pryr is basically retired :) TBH I don't know why I gave up on it, except
lobstr is a cooler name ? That's where all active development is
happening. (The underlying code is substantially similar although
lobstr includes bug fixes not present in pryr)

Hadley

-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri Mar 27 23:25:51 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 27 Mar 2020 15:25:51 -0700
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <CABdHhvGt1pU4+19fyYAMZoBWQeW4=7SebssZ4FWAKArUnSeNUA@mail.gmail.com>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
 <CABdHhvHKTXmQDpi08u8shneKz7ME_EY_3iTx2XtV2xL9X1u3Jw@mail.gmail.com>
 <c61ca308-2f8a-a4d3-339e-8c0eaf49d14b@fredhutch.org>
 <CABdHhvGt1pU4+19fyYAMZoBWQeW4=7SebssZ4FWAKArUnSeNUA@mail.gmail.com>
Message-ID: <93e8335f-3f33-bb76-22c8-eb1bfa30fa7e@fredhutch.org>

On 3/27/20 15:19, Hadley Wickham wrote:
> 
> 
> On Fri, Mar 27, 2020 at 4:01 PM Herv? Pag?s <hpages at fredhutch.org 
> <mailto:hpages at fredhutch.org>> wrote:
> 
> 
> 
>     On 3/27/20 12:00, Hadley Wickham wrote:
>      >
>      >
>      > On Fri, Mar 27, 2020 at 10:39 AM Herv? Pag?s
>     <hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>      > <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>> wrote:
>      >
>      >? ? ?Hi Tomas,
>      >
>      >? ? ?On 3/27/20 07:01, Tomas Kalibera wrote:
>      >? ? ? > they provide an over-approximation
>      >
>      >? ? ?They can also provide an "under-approximation" (to say the
>     least) e.g.
>      >? ? ?on reference objects where the entire substance of the object is
>      >? ? ?ignored
>      >? ? ?which makes object.size() completely meaningless in that case:
>      >
>      >? ? ? ? ?setRefClass("A", fields=c(stuff="ANY"))
>      >? ? ? ? ?object.size(new("A", stuff=raw(0)))? ? ? # 680 bytes
>      >? ? ? ? ?object.size(new("A", stuff=runif(1e8)))? # 680 bytes
>      >
>      >? ? ?Why wouldn't object.size() look at the content of environments?
>      >
>      >
>      > As the author, I'm obviously biased, but I do like
>     lobstr::obj_sizes()
>      > which allows you to see the additional size occupied by one
>     object given
>      > any number of other objects. This is particularly important for
>      > reference classes since individual objects appear quite large:
>      >
>      > A <- setRefClass("A", fields=c(stuff="ANY"))
>      > lobstr::obj_size(new("A", stuff=raw(0)))
>      > #> 567,056 B
>      >
>      > But the vast majority is shared across all instances of that class:
>      >
>      > lobstr::obj_size(A)
>      > #> 719,232 B
>      > lobstr::obj_sizes(A, new("A", stuff=raw(0)))
>      > #> * 719,232 B
>      > #> * ? ? 720 B
>      > lobstr::obj_sizes(A, new("A", stuff=runif(1e8)))
>      > #> * ? ? 719,232 B
>      > #> * 800,000,720 B
> 
>     Nice. Can you clarify the situation with lobstr::obj_size vs
>     pryr::object_size? I've heard of the latter before and use it sometimes
>     but never heard of the former before seeing Stefan's post. Then I
>     checked the authors of both and thought maybe they should talk to each
>     other ;-)
> 
> 
> pryr is basically retired :) TBH I don't know why I gave up on it, 
> except lobstr is a cooler name ? That's where all active development is 
> happening. (The underlying code is substantially similar although 
> lobstr?includes bug fixes not present in pryr)

Good to know, thanks! Couldn't find any mention of pryr being abandoned 
and superseded by lobster (which definitely sounds more yummy) in pryr's 
README.md or DESCRIPTION file. Would be good to put this somewhere.

H.


> 
> Hadley
> -- 
> http://hadley.nz 
> <https://urldefense.proofpoint.com/v2/url?u=http-3A__hadley.nz&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YbZWqj-epVToKynrOqXF8TgrxHYKx1pF3q2GrOuJwBQ&s=qCeYCgVDbk_GzadBoAgc3cf81fQfRJXpsf0P5meMhtU&e=>

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From @@chre|b @end|ng |rom u@|bert@@c@  Sat Mar 28 06:21:52 2020
From: @@chre|b @end|ng |rom u@|bert@@c@ (Stefan Schreiber)
Date: Fri, 27 Mar 2020 23:21:52 -0600
Subject: [Rd] object.size vs lobstr::obj_size
In-Reply-To: <93e8335f-3f33-bb76-22c8-eb1bfa30fa7e@fredhutch.org>
References: <CAPK=JivePSZw8Ljuq+rGM+HAaRp31_Jz0gGCWbW5vrMWaXQLHA@mail.gmail.com>
 <d2849447-8b39-afdb-2852-22b930ac68bf@gmail.com>
 <24c43444-ad57-4870-7e92-5a333a54a23a@fredhutch.org>
 <CABdHhvHKTXmQDpi08u8shneKz7ME_EY_3iTx2XtV2xL9X1u3Jw@mail.gmail.com>
 <c61ca308-2f8a-a4d3-339e-8c0eaf49d14b@fredhutch.org>
 <CABdHhvGt1pU4+19fyYAMZoBWQeW4=7SebssZ4FWAKArUnSeNUA@mail.gmail.com>
 <93e8335f-3f33-bb76-22c8-eb1bfa30fa7e@fredhutch.org>
Message-ID: <CAPK=JivzwhMag_3Drm8z6ha3r2uSuETc7ObmQAUJgOJXD0XeCA@mail.gmail.com>

Thank you Tomas, Herv? and Hadley for the input. Much appreciated!

Stefan

Stefan Schreiber, PhD, P. Biol.
Director EnviroStats Solutions Inc.
Adjunct Professor, Faculty of Agricultural, Life & Environmental
Sciences, University of Alberta
Phone: 780-221-1838
https://envirostats.ca/



On Fri, 27 Mar 2020 at 16:25, Herv? Pag?s <hpages at fredhutch.org> wrote:
>
> On 3/27/20 15:19, Hadley Wickham wrote:
> >
> >
> > On Fri, Mar 27, 2020 at 4:01 PM Herv? Pag?s <hpages at fredhutch.org
> > <mailto:hpages at fredhutch.org>> wrote:
> >
> >
> >
> >     On 3/27/20 12:00, Hadley Wickham wrote:
> >      >
> >      >
> >      > On Fri, Mar 27, 2020 at 10:39 AM Herv? Pag?s
> >     <hpages at fredhutch.org <mailto:hpages at fredhutch.org>
> >      > <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>> wrote:
> >      >
> >      >     Hi Tomas,
> >      >
> >      >     On 3/27/20 07:01, Tomas Kalibera wrote:
> >      >      > they provide an over-approximation
> >      >
> >      >     They can also provide an "under-approximation" (to say the
> >     least) e.g.
> >      >     on reference objects where the entire substance of the object is
> >      >     ignored
> >      >     which makes object.size() completely meaningless in that case:
> >      >
> >      >         setRefClass("A", fields=c(stuff="ANY"))
> >      >         object.size(new("A", stuff=raw(0)))      # 680 bytes
> >      >         object.size(new("A", stuff=runif(1e8)))  # 680 bytes
> >      >
> >      >     Why wouldn't object.size() look at the content of environments?
> >      >
> >      >
> >      > As the author, I'm obviously biased, but I do like
> >     lobstr::obj_sizes()
> >      > which allows you to see the additional size occupied by one
> >     object given
> >      > any number of other objects. This is particularly important for
> >      > reference classes since individual objects appear quite large:
> >      >
> >      > A <- setRefClass("A", fields=c(stuff="ANY"))
> >      > lobstr::obj_size(new("A", stuff=raw(0)))
> >      > #> 567,056 B
> >      >
> >      > But the vast majority is shared across all instances of that class:
> >      >
> >      > lobstr::obj_size(A)
> >      > #> 719,232 B
> >      > lobstr::obj_sizes(A, new("A", stuff=raw(0)))
> >      > #> * 719,232 B
> >      > #> *     720 B
> >      > lobstr::obj_sizes(A, new("A", stuff=runif(1e8)))
> >      > #> *     719,232 B
> >      > #> * 800,000,720 B
> >
> >     Nice. Can you clarify the situation with lobstr::obj_size vs
> >     pryr::object_size? I've heard of the latter before and use it sometimes
> >     but never heard of the former before seeing Stefan's post. Then I
> >     checked the authors of both and thought maybe they should talk to each
> >     other ;-)
> >
> >
> > pryr is basically retired :) TBH I don't know why I gave up on it,
> > except lobstr is a cooler name ? That's where all active development is
> > happening. (The underlying code is substantially similar although
> > lobstr includes bug fixes not present in pryr)
>
> Good to know, thanks! Couldn't find any mention of pryr being abandoned
> and superseded by lobster (which definitely sounds more yummy) in pryr's
> README.md or DESCRIPTION file. Would be good to put this somewhere.
>
> H.
>
>
> >
> > Hadley
> > --
> > http://hadley.nz
> > <https://urldefense.proofpoint.com/v2/url?u=http-3A__hadley.nz&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YbZWqj-epVToKynrOqXF8TgrxHYKx1pF3q2GrOuJwBQ&s=qCeYCgVDbk_GzadBoAgc3cf81fQfRJXpsf0P5meMhtU&e=>
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sat Mar 28 21:18:56 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sat, 28 Mar 2020 15:18:56 -0500
Subject: [Rd] status of Java & rJava?
Message-ID: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>

Hello, All:


 ????? Is Java being deprecated for R?


 ????? I ask, because I've been unable to get rJava 0.9-11 to work under 
either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to 
install -- and my Ecfun package uses it:?? I can't get "R CMD build 
Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.? 
Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.


 ????? The rJava maintainer, Simon Urbanek, has kindly responded to two 
of my three emails on this since 2020-03-20, but I've so far been unable 
to translate his suggestions into fixes for these problems.


 ????? Should I remove rJava from Ecfun and see what breaks, then see if 
I can work around that?? Should I provide the error messages I get for 
rJava from "update.packages()" and / or library(rJava) on both machines, 
with sessionInfo() to this list or to Stack Exchange or Stack Overflow?


 ????? Since I'm getting so many problems with rJava on under both macOS 
and Windows 10, that suggests to me that potential users could have 
similar problems, and I should try to remove rJava from Ecfun.


 ????? What do you think?
 ????? Thanks,
 ????? Spencer Graves


From greg @end|ng |rom w@rne@@net  Sun Mar 29 01:14:45 2020
From: greg @end|ng |rom w@rne@@net (Gregory Warnes)
Date: Sat, 28 Mar 2020 20:14:45 -0400
Subject: [Rd] status of Java & rJava?
In-Reply-To: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
Message-ID: <CAKorm_tXvQDKxgyy52sYoVf6bN4oWAeyGgtZyBZVC7cBT1c7PA@mail.gmail.com>

Hi Spencer, I'm also having problems getting rJava to work on Mac OS X.

-G

On Sat, Mar 28, 2020 at 4:19 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

> Hello, All:
>
>
>        Is Java being deprecated for R?
>
>
>        I ask, because I've been unable to get rJava 0.9-11 to work under
> either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to
> install -- and my Ecfun package uses it:   I can't get "R CMD build
> Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.
> Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.
>
>
>        The rJava maintainer, Simon Urbanek, has kindly responded to two
> of my three emails on this since 2020-03-20, but I've so far been unable
> to translate his suggestions into fixes for these problems.
>
>
>        Should I remove rJava from Ecfun and see what breaks, then see if
> I can work around that?  Should I provide the error messages I get for
> rJava from "update.packages()" and / or library(rJava) on both machines,
> with sessionInfo() to this list or to Stack Exchange or Stack Overflow?
>
>
>        Since I'm getting so many problems with rJava on under both macOS
> and Windows 10, that suggests to me that potential users could have
> similar problems, and I should try to remove rJava from Ecfun.
>
>
>        What do you think?
>        Thanks,
>        Spencer Graves
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
"Whereas true religion and good morals are the only solid foundations of
public liberty and happiness . . . it is hereby earnestly recommended to
the several States to take the most effectual measures for the
encouragement thereof." Continental Congress, 1778

	[[alternative HTML version deleted]]


From r@v|@v@r@dh@n @end|ng |rom jhu@edu  Sun Mar 29 01:23:31 2020
From: r@v|@v@r@dh@n @end|ng |rom jhu@edu (Ravi Varadhan)
Date: Sun, 29 Mar 2020 00:23:31 +0000
Subject: [Rd] status of Java & rJava?
In-Reply-To: <CAKorm_tXvQDKxgyy52sYoVf6bN4oWAeyGgtZyBZVC7cBT1c7PA@mail.gmail.com>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>,
 <CAKorm_tXvQDKxgyy52sYoVf6bN4oWAeyGgtZyBZVC7cBT1c7PA@mail.gmail.com>
Message-ID: <f96960d4b91c428398eecde1fdc8e1ec@jhu.edu>

I, too, had encountered problems with Java on Windows 10 while I was trying to install the package "xlsx."  I tried the fixes I found online, but to no avail.


Thanks & Best regards,

Ravi

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Gregory Warnes <greg at warnes.net>
Sent: Saturday, March 28, 2020 8:14:45 PM
To: Spencer Graves
Cc: r-devel at r-project.org
Subject: Re: [Rd] status of Java & rJava?


Hi Spencer, I'm also having problems getting rJava to work on Mac OS X.

-G

On Sat, Mar 28, 2020 at 4:19 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

> Hello, All:
>
>
>        Is Java being deprecated for R?
>
>
>        I ask, because I've been unable to get rJava 0.9-11 to work under
> either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to
> install -- and my Ecfun package uses it:   I can't get "R CMD build
> Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.
> Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.
>
>
>        The rJava maintainer, Simon Urbanek, has kindly responded to two
> of my three emails on this since 2020-03-20, but I've so far been unable
> to translate his suggestions into fixes for these problems.
>
>
>        Should I remove rJava from Ecfun and see what breaks, then see if
> I can work around that?  Should I provide the error messages I get for
> rJava from "update.packages()" and / or library(rJava) on both machines,
> with sessionInfo() to this list or to Stack Exchange or Stack Overflow?
>
>
>        Since I'm getting so many problems with rJava on under both macOS
> and Windows 10, that suggests to me that potential users could have
> similar problems, and I should try to remove rJava from Ecfun.
>
>
>        What do you think?
>        Thanks,
>        Spencer Graves
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


--
"Whereas true religion and good morals are the only solid foundations of
public liberty and happiness . . . it is hereby earnestly recommended to
the several States to take the most effectual measures for the
encouragement thereof." Continental Congress, 1778

        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Mar 29 05:07:13 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 29 Mar 2020 16:07:13 +1300
Subject: [Rd] status of Java & rJava?
In-Reply-To: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
Message-ID: <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>

Spencer,

you could argue that Java is dead since Oracle effectively killed it by removing all public downloads, but if you manage to get hold of a Java installation then it works just fine with R. To my best knowledge there has never been an issue if you installed rJava from source. macOS Catalina has made binary distributions impossible due to additional restrictions on run-time, but even that has been how solved with the release of rJava 0.9-12, so please make sure you use the latest rJava. In most cases that I have seen issues were caused by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set it unless you know what you're doing!], not installing Java for the same architecture as R etc.). If you have any issues feel free to report them. rJava 0.9-12 has quite a few changes that try to detect user errors better and report them so I strongly suggest users to upgrade.

Cheers,
Simon


> On 29/03/2020, at 9:18 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hello, All:
> 
> 
>       Is Java being deprecated for R?
> 
> 
>       I ask, because I've been unable to get rJava 0.9-11 to work under either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to install -- and my Ecfun package uses it:   I can't get "R CMD build Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.  Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.
> 
> 
>       The rJava maintainer, Simon Urbanek, has kindly responded to two of my three emails on this since 2020-03-20, but I've so far been unable to translate his suggestions into fixes for these problems.
> 
> 
>       Should I remove rJava from Ecfun and see what breaks, then see if I can work around that?  Should I provide the error messages I get for rJava from "update.packages()" and / or library(rJava) on both machines, with sessionInfo() to this list or to Stack Exchange or Stack Overflow?
> 
> 
>       Since I'm getting so many problems with rJava on under both macOS and Windows 10, that suggests to me that potential users could have similar problems, and I should try to remove rJava from Ecfun.
> 
> 
>       What do you think?
>       Thanks,
>       Spencer Graves
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Mar 29 05:29:50 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sat, 28 Mar 2020 22:29:50 -0500
Subject: [Rd] [BULK] Re:  status of Java & rJava?
In-Reply-To: <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
 <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
Message-ID: <79e3a3f5-3a2b-64a6-fc7f-5c6e36f1d1d7@prodsyse.com>

Hi, Simon et al.:


 ????? My attempts to install rJava 0.9-12 from source failed under both 
macOS 10.15.4 and Windows 10.


 ????? Below please find what I got just now trying "update.packages()" 
and selecting "install from sources" on both computers followed by 
"sessionInfo()" in each case.


 ????? Thanks for your help.
 ????? Spencer Graves


 ?update.packages()
rJava :
 ?Version 0.9-11 installed in 
/Library/Frameworks/R.framework/Versions/3.6/Resources/library
 ?Version 0.9-12 available at https://cran.rstudio.com
Update? (Yes/no/cancel) y
sf :
 ?Version 0.8-1 installed in 
/Library/Frameworks/R.framework/Versions/3.6/Resources/library
 ?Version 0.9-0 available at https://cran.rstudio.com
Update? (Yes/no/cancel) n
XLConnect :
 ?Version 0.2-15 installed in 
/Library/Frameworks/R.framework/Versions/3.6/Resources/library
 ?Version 1.0.1 available at https://cran.rstudio.com
Update? (Yes/no/cancel) n

 ? There is a binary version available but the
 ? source version is later:
 ????? binary source needs_compilation
rJava 0.9-11 0.9-12????????????? TRUE

Do you want to install from sources the package which needs compilation? 
(Yes/no/cancel) y
installing the source package ?rJava?

trying URL 'https://cran.rstudio.com/src/contrib/rJava_0.9-12.tar.gz'
Content type 'application/x-gzip' length 1103629 bytes (1.1 MB)
==================================================
downloaded 1.1 MB

* installing *source* package ?rJava? ...
** package ?rJava? successfully unpacked and MD5 sums checked
** using staged installation
checking for gcc... clang
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables...
checking whether we are cross compiling... configure: error: in 
`/private/var/folders/mh/mrm_14nx19g13lsnj9zmvwjr0000gn/T/Rtmpm3rVc5/R.INSTALL5d09696e941d/rJava':
configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details
ERROR: configuration failed for package ?rJava?
* removing 
?/Library/Frameworks/R.framework/Versions/3.6/Resources/library/rJava?
* restoring previous 
?/Library/Frameworks/R.framework/Versions/3.6/Resources/library/rJava?

The downloaded source packages are in
?/private/var/folders/mh/mrm_14nx19g13lsnj9zmvwjr0000gn/T/RtmpbxyWRI/downloaded_packages?
Warning message:
In install.packages(update[instlib == l, "Package"], l, repos = repos,? :
 ? installation of package ?rJava? had non-zero exit status
 > sessionInfo()
R version 3.6.3 (2020-02-29)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.4

Matrix products: default
BLAS: 
/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: 
/Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets
[6] methods?? base

loaded via a namespace (and not attached):
[1] compiler_3.6.3 tools_3.6.3



 > update.packages()
rJava :
 ?Version 0.9-11 installed in C:/Program Files/R/R-3.6.3/library
 ?Version 0.9-12 available at https://cran.rstudio.com

 ? There is a binary version available but
 ? the source version is later:
 ????? binary source needs_compilation
rJava 0.9-11 0.9-12????????????? TRUE

installing the source package 'rJava'

trying URL 'https://cran.rstudio.com/src/contrib/rJava_0.9-12.tar.gz'
Content type 'application/x-gzip' length 1103629 bytes (1.1 MB)
downloaded 1.1 MB

* installing *source* package 'rJava' ...
** package 'rJava' successfully unpacked and MD5 sums checked
** using staged installation
Generate Windows-specific files (src/jvm-w32) ...
make: Entering directory 
'/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/src/jvm-w32'
c:/Rtools/mingw_64/bin/dlltool --as c:/Rtools/mingw_64/bin/as 
--input-def jvm64.def --kill-at --dllname jvm.dll --output-lib libjvm.dll.a
c:/Rtools/mingw_64/bin/gcc? -O2 -c -o findjava.o findjava.c
c:/Rtools/mingw_64/bin/gcc? -s -o findjava.exe findjava.o
make: Leaving directory 
'/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/src/jvm-w32'
Find Java...
 ? JAVA_HOME=C:/PROGRA~1/Java/JRE18~1.0_2
=== Building JRI ===
 ? JAVA_HOME=C:/PROGRA~1/Java/JRE18~1.0_2
 ? R_HOME=C:/PROGRA~1/R/R-36~1.3
JDK has no javah.exe - using javac -h . instead
Creating Makefiles ...
Configuration done.
make -C src JRI.jar
make[1]: Entering directory 
'/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/jri/src'
C:/PROGRA~1/Java/JRE18~1.0_2/bin/javac -h . -d . ../RList.java 
../RBool.java ../RVector.java ../RMainLoopCallbacks.java 
../RConsoleOutputStream.java ../Mutex.java ../Rengine.java ../REXP.java 
../RFactor.java ../package-info.java
sh: C:/PROGRA~1/Java/JRE18~1.0_2/bin/javac: No such file or directory
make[1]: *** [Makefile.all:41: org/rosuda/JRI/Rengine.class] Error 127
make[1]: Leaving directory 
'/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/jri/src'
make: *** [Makefile.all:19: src/JRI.jar] Error 2
**** WARNING: JRI could NOT be built
Set IGNORE=1 if you want to build rJava anyway.
ERROR: configuration failed for package 'rJava'
* removing 'C:/Program Files/R/R-3.6.3/library/rJava'
* restoring previous 'C:/Program Files/R/R-3.6.3/library/rJava'

The downloaded source packages are in
'C:\Users\spenc\AppData\Local\Temp\RtmpsDQIkn\downloaded_packages'
Warning message:
In install.packages(update[instlib == l, "Package"], l, repos = repos,? :
 ? installation of package 'rJava' had non-zero exit status

 > sessionInfo()
R version 3.6.3 (2020-02-29)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats???? graphics? grDevices utils
[5] datasets? methods?? base

loaded via a namespace (and not attached):
[1] compiler_3.6.3 tools_3.6.3


On 2020-03-28 22:07, Simon Urbanek wrote:
> Spencer,
>
> you could argue that Java is dead since Oracle effectively killed it by removing all public downloads, but if you manage to get hold of a Java installation then it works just fine with R. To my best knowledge there has never been an issue if you installed rJava from source. macOS Catalina has made binary distributions impossible due to additional restrictions on run-time, but even that has been how solved with the release of rJava 0.9-12, so please make sure you use the latest rJava. In most cases that I have seen issues were caused by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set it unless you know what you're doing!], not installing Java for the same architecture as R etc.). If you have any issues feel free to report them. rJava 0.9-12 has quite a few changes that try to detect user errors better and report them so I strongly suggest users to upgrade.
>
> Cheers,
> Simon
>
>
>> On 29/03/2020, at 9:18 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
>>
>> Hello, All:
>>
>>
>>        Is Java being deprecated for R?
>>
>>
>>        I ask, because I've been unable to get rJava 0.9-11 to work under either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to install -- and my Ecfun package uses it:   I can't get "R CMD build Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.  Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.
>>
>>
>>        The rJava maintainer, Simon Urbanek, has kindly responded to two of my three emails on this since 2020-03-20, but I've so far been unable to translate his suggestions into fixes for these problems.
>>
>>
>>        Should I remove rJava from Ecfun and see what breaks, then see if I can work around that?  Should I provide the error messages I get for rJava from "update.packages()" and / or library(rJava) on both machines, with sessionInfo() to this list or to Stack Exchange or Stack Overflow?
>>
>>
>>        Since I'm getting so many problems with rJava on under both macOS and Windows 10, that suggests to me that potential users could have similar problems, and I should try to remove rJava from Ecfun.
>>
>>
>>        What do you think?
>>        Thanks,
>>        Spencer Graves
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Mar 29 05:46:54 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 29 Mar 2020 16:46:54 +1300
Subject: [Rd] [BULK] Re:  status of Java & rJava?
In-Reply-To: <79e3a3f5-3a2b-64a6-fc7f-5c6e36f1d1d7@prodsyse.com>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
 <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
 <79e3a3f5-3a2b-64a6-fc7f-5c6e36f1d1d7@prodsyse.com>
Message-ID: <7F6D734A-232A-41FF-A664-86B0E19DB889@R-project.org>

Spencer,

1) you don't seem to have working tools on your Mac (check config.log)
2) on Windows you don't have JDK installed

I would strongly recommend using the CRAN binaries of rJava 0.9-12 unless you know what you're doing and have all the tools (for Mac use https://mac.R-project.org as mirror since there was a hiccup with macOS sync across mirrors).

Cheers,
Simon




> On 29/03/2020, at 4:29 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hi, Simon et al.:
> 
> 
>       My attempts to install rJava 0.9-12 from source failed under both macOS 10.15.4 and Windows 10.
> 
> 
>       Below please find what I got just now trying "update.packages()" and selecting "install from sources" on both computers followed by "sessionInfo()" in each case.
> 
> 
>       Thanks for your help.
>       Spencer Graves
> 
> 
>  update.packages()
> rJava :
>  Version 0.9-11 installed in /Library/Frameworks/R.framework/Versions/3.6/Resources/library
>  Version 0.9-12 available at https://cran.rstudio.com
> Update? (Yes/no/cancel) y
> sf :
>  Version 0.8-1 installed in /Library/Frameworks/R.framework/Versions/3.6/Resources/library
>  Version 0.9-0 available at https://cran.rstudio.com
> Update? (Yes/no/cancel) n
> XLConnect :
>  Version 0.2-15 installed in /Library/Frameworks/R.framework/Versions/3.6/Resources/library
>  Version 1.0.1 available at https://cran.rstudio.com
> Update? (Yes/no/cancel) n
> 
>   There is a binary version available but the
>   source version is later:
>       binary source needs_compilation
> rJava 0.9-11 0.9-12              TRUE
> 
> Do you want to install from sources the package which needs compilation? (Yes/no/cancel) y
> installing the source package ?rJava?
> 
> trying URL 'https://cran.rstudio.com/src/contrib/rJava_0.9-12.tar.gz'
> Content type 'application/x-gzip' length 1103629 bytes (1.1 MB)
> ==================================================
> downloaded 1.1 MB
> 
> * installing *source* package ?rJava? ...
> ** package ?rJava? successfully unpacked and MD5 sums checked
> ** using staged installation
> checking for gcc... clang
> checking whether the C compiler works... yes
> checking for C compiler default output file name... a.out
> checking for suffix of executables...
> checking whether we are cross compiling... configure: error: in `/private/var/folders/mh/mrm_14nx19g13lsnj9zmvwjr0000gn/T/Rtmpm3rVc5/R.INSTALL5d09696e941d/rJava':
> configure: error: cannot run C compiled programs.
> If you meant to cross compile, use `--host'.
> See `config.log' for more details
> ERROR: configuration failed for package ?rJava?
> * removing ?/Library/Frameworks/R.framework/Versions/3.6/Resources/library/rJava?
> * restoring previous ?/Library/Frameworks/R.framework/Versions/3.6/Resources/library/rJava?
> 
> The downloaded source packages are in
> ?/private/var/folders/mh/mrm_14nx19g13lsnj9zmvwjr0000gn/T/RtmpbxyWRI/downloaded_packages?
> Warning message:
> In install.packages(update[instlib == l, "Package"], l, repos = repos,  :
>   installation of package ?rJava? had non-zero exit status
> > sessionInfo()
> R version 3.6.3 (2020-02-29)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: macOS Catalina 10.15.4
> 
> Matrix products: default
> BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets
> [6] methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.6.3 tools_3.6.3
> 
> 
> 
> > update.packages()
> rJava :
>  Version 0.9-11 installed in C:/Program Files/R/R-3.6.3/library
>  Version 0.9-12 available at https://cran.rstudio.com
> 
>   There is a binary version available but
>   the source version is later:
>       binary source needs_compilation
> rJava 0.9-11 0.9-12              TRUE
> 
> installing the source package 'rJava'
> 
> trying URL 'https://cran.rstudio.com/src/contrib/rJava_0.9-12.tar.gz'
> Content type 'application/x-gzip' length 1103629 bytes (1.1 MB)
> downloaded 1.1 MB
> 
> * installing *source* package 'rJava' ...
> ** package 'rJava' successfully unpacked and MD5 sums checked
> ** using staged installation
> Generate Windows-specific files (src/jvm-w32) ...
> make: Entering directory '/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/src/jvm-w32'
> c:/Rtools/mingw_64/bin/dlltool --as c:/Rtools/mingw_64/bin/as --input-def jvm64.def --kill-at --dllname jvm.dll --output-lib libjvm.dll.a
> c:/Rtools/mingw_64/bin/gcc  -O2 -c -o findjava.o findjava.c
> c:/Rtools/mingw_64/bin/gcc  -s -o findjava.exe findjava.o
> make: Leaving directory '/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/src/jvm-w32'
> Find Java...
>   JAVA_HOME=C:/PROGRA~1/Java/JRE18~1.0_2
> === Building JRI ===
>   JAVA_HOME=C:/PROGRA~1/Java/JRE18~1.0_2
>   R_HOME=C:/PROGRA~1/R/R-36~1.3
> JDK has no javah.exe - using javac -h . instead
> Creating Makefiles ...
> Configuration done.
> make -C src JRI.jar
> make[1]: Entering directory '/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/jri/src'
> C:/PROGRA~1/Java/JRE18~1.0_2/bin/javac -h . -d . ../RList.java ../RBool.java ../RVector.java ../RMainLoopCallbacks.java ../RConsoleOutputStream.java ../Mutex.java ../Rengine.java ../REXP.java ../RFactor.java ../package-info.java
> sh: C:/PROGRA~1/Java/JRE18~1.0_2/bin/javac: No such file or directory
> make[1]: *** [Makefile.all:41: org/rosuda/JRI/Rengine.class] Error 127
> make[1]: Leaving directory '/Users/spenc/AppData/Local/Temp/RtmpQbnYkA/R.INSTALL8ec5478248a/rJava/jri/src'
> make: *** [Makefile.all:19: src/JRI.jar] Error 2
> **** WARNING: JRI could NOT be built
> Set IGNORE=1 if you want to build rJava anyway.
> ERROR: configuration failed for package 'rJava'
> * removing 'C:/Program Files/R/R-3.6.3/library/rJava'
> * restoring previous 'C:/Program Files/R/R-3.6.3/library/rJava'
> 
> The downloaded source packages are in
> 'C:\Users\spenc\AppData\Local\Temp\RtmpsDQIkn\downloaded_packages'
> Warning message:
> In install.packages(update[instlib == l, "Package"], l, repos = repos,  :
>   installation of package 'rJava' had non-zero exit status
> 
> > sessionInfo()
> R version 3.6.3 (2020-02-29)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> attached base packages:
> [1] stats     graphics  grDevices utils
> [5] datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.6.3 tools_3.6.3
> 
> 
> On 2020-03-28 22:07, Simon Urbanek wrote:
>> Spencer,
>> 
>> you could argue that Java is dead since Oracle effectively killed it by removing all public downloads, but if you manage to get hold of a Java installation then it works just fine with R. To my best knowledge there has never been an issue if you installed rJava from source. macOS Catalina has made binary distributions impossible due to additional restrictions on run-time, but even that has been how solved with the release of rJava 0.9-12, so please make sure you use the latest rJava. In most cases that I have seen issues were caused by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set it unless you know what you're doing!], not installing Java for the same architecture as R etc.). If you have any issues feel free to report them. rJava 0.9-12 has quite a few changes that try to detect user errors better and report them so I strongly suggest users to upgrade.
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> On 29/03/2020, at 9:18 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
>>> 
>>> Hello, All:
>>> 
>>> 
>>>       Is Java being deprecated for R?
>>> 
>>> 
>>>       I ask, because I've been unable to get rJava 0.9-11 to work under either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to install -- and my Ecfun package uses it:   I can't get "R CMD build Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.  Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.
>>> 
>>> 
>>>       The rJava maintainer, Simon Urbanek, has kindly responded to two of my three emails on this since 2020-03-20, but I've so far been unable to translate his suggestions into fixes for these problems.
>>> 
>>> 
>>>       Should I remove rJava from Ecfun and see what breaks, then see if I can work around that?  Should I provide the error messages I get for rJava from "update.packages()" and / or library(rJava) on both machines, with sessionInfo() to this list or to Stack Exchange or Stack Overflow?
>>> 
>>> 
>>>       Since I'm getting so many problems with rJava on under both macOS and Windows 10, that suggests to me that potential users could have similar problems, and I should try to remove rJava from Ecfun.
>>> 
>>> 
>>>       What do you think?
>>>       Thanks,
>>>       Spencer Graves
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Sun Mar 29 06:07:29 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Sun, 29 Mar 2020 05:07:29 +0100
Subject: [Rd] status of Java & rJava?
In-Reply-To: <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
 <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
Message-ID: <92439e5a-ecc9-bfac-7a55-60fd5c7b2973@stats.ox.ac.uk>

On 29/03/2020 04:07, Simon Urbanek wrote:
> Spencer,
> 
> you could argue that Java is dead since Oracle effectively killed it by removing all public downloads, but if you manage to get hold of a Java installation then it works just fine with R. To my best knowledge there has never been an issue if you installed rJava from source. macOS Catalina has made binary distributions impossible due to additional restrictions on run-time, but even that has been how solved with the release of rJava 0.9-12, so please make sure you use the latest rJava. In most cases that I have seen issues were caused by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set it unless you know what you're doing!], not installing Java for the same architecture as R etc.). If you have any issues feel free to report them. rJava 0.9-12 has quite a few changes that try to detect user errors better and report them so I strongly suggest users to upgrade.

There is OpenJDK, and https://adoptopenjdk.net provides binaries for 
macOS, including the preferred Java 11 LTS.  I just re-checked that, and 
after

env 
JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home 
R CMD javareconf

I was able to install from source and check rJava 0.9-12 in 4.0.0 alpha. 
  For the CRAN binary of 3.6.3 I had to make sure I was using clang 7: 
'clang' defaults to that in the Apple CLT which does not support 
-fopenmp -- but the binary package just worked.

[All on Catalina.]

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Mar 29 07:58:39 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 29 Mar 2020 00:58:39 -0500
Subject: [Rd] status of Java & rJava?
In-Reply-To: <92439e5a-ecc9-bfac-7a55-60fd5c7b2973@stats.ox.ac.uk>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
 <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
 <92439e5a-ecc9-bfac-7a55-60fd5c7b2973@stats.ox.ac.uk>
Message-ID: <e7930ec2-2981-763c-9c1b-32ba0c20b7b8@prodsyse.com>



On 2020-03-28 23:07, Prof Brian Ripley wrote:
> On 29/03/2020 04:07, Simon Urbanek wrote:
>> Spencer,
>>
>> you could argue that Java is dead since Oracle effectively killed it 
>> by removing all public downloads, but if you manage to get hold of a 
>> Java installation then it works just fine with R. To my best 
>> knowledge there has never been an issue if you installed rJava from 
>> source. macOS Catalina has made binary distributions impossible due 
>> to additional restrictions on run-time, but even that has been how 
>> solved with the release of rJava 0.9-12, so please make sure you use 
>> the latest rJava. In most cases that I have seen issues were caused 
>> by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set 
>> it unless you know what you're doing!], not installing Java for the 
>> same architecture as R etc.). If you have any issues feel free to 
>> report them. rJava 0.9-12 has quite a few changes that try to detect 
>> user errors better and report them so I strongly suggest users to 
>> upgrade.
>
> There is OpenJDK, and https://adoptopenjdk.net provides binaries for 
> macOS, including the preferred Java 11 LTS.? I just re-checked that, 
> and after
>
> env 
> JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home 
> R CMD javareconf
>
> I was able to install from source and check rJava 0.9-12 in 4.0.0 
> alpha. ?For the CRAN binary of 3.6.3 I had to make sure I was using 
> clang 7: 'clang' defaults to that in the Apple CLT which does not 
> support -fopenmp -- but the binary package just worked.
>
> [All on Catalina.]

Thanks.? That worked on Catalina.? When installing OpenJDK on Windows 
10, The default for "Set JAVA_HOME" was 'X';? I changed that to 
install.? It didn't work at first, but did after I rebooted.


Thanks again to both Simon Urbanek and Prof. Ripley.? Spencer Graves


From @dr|@n @end|ng |rom tr@p|ett|@org  Sun Mar 29 12:41:52 2020
From: @dr|@n @end|ng |rom tr@p|ett|@org (Adrian Trapletti)
Date: Sun, 29 Mar 2020 12:41:52 +0200
Subject: [Rd] status of Java & rJava?
In-Reply-To: <mailman.50102.9.1585476001.7941.r-devel@r-project.org>
References: <mailman.50102.9.1585476001.7941.r-devel@r-project.org>
Message-ID: <CAFmikf1tKTykobzAaSEPFjTreD8xbh=PCrmMKtE_s4iCi3S4JQ@mail.gmail.com>

Simon,

Java is still one of the most popular languages out there, in
particular in large organizations. See e.g.
https://www.tiobe.com/tiobe-index/ . However, there has been a lot of
confusion because of Oracle's licencing change in 2019. But the good
news is, there are more alternatives than ever. See e.g.
https://labs.consol.de/development/2019/02/05/oracle-license-is-the-free-lunch-over.html
. And also Oracle has a very interesting new VM significantly
improving startup time, the community edition is under GPL-2. See
https://www.graalvm.org/ .

Cheers,
Adrian

Adrian Trapletti

Steinstrasse 9b, 8610 Uster, Switzerland
P +41 44 994 56 30  |  M +41 79 103 71 31
adrian at trapletti.org  |  www.trapletti.org


On Sun, Mar 29, 2020 at 12:02 PM <r-devel-request at r-project.org> wrote:
>
> ...
> Message: 4
> Date: Sun, 29 Mar 2020 16:07:13 +1300
> From: Simon Urbanek <simon.urbanek at R-project.org>
> To: Spencer Graves <spencer.graves at prodsyse.com>
> Cc: "r-devel at r-project.org" <r-devel at r-project.org>
> Subject: Re: [Rd] status of Java & rJava?
> Message-ID: <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2 at R-project.org>
> Content-Type: text/plain; charset="us-ascii"
>
> Spencer,
>
> you could argue that Java is dead since Oracle effectively killed it by removing all public downloads, but if you manage to get hold of a Java installation then it works just fine with R. To my best knowledge there has never been an issue if you installed rJava from source. macOS Catalina has made binary distributions impossible due to additional restrictions on run-time, but even that has been how solved with the release of rJava 0.9-12, so please make sure you use the latest rJava. In most cases that I have seen issues were caused by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set it unless you know what you're doing!], not installing Java for the same architecture as R etc.). If you have any issues feel free to report them. rJava 0.9-12 has quite a few changes that try to detect user errors better and report them so I strongly suggest users to upgrade.
>
> Cheers,
> Simon
>
>
> > On 29/03/2020, at 9:18 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> >
> > Hello, All:
> >
> >
> >       Is Java being deprecated for R?
> >
> >
> >       I ask, because I've been unable to get rJava 0.9-11 to work under either macOS 10.15 or Windows 10, and I can't get rJava 0.9-12 to install -- and my Ecfun package uses it:   I can't get "R CMD build Ecfun" to work on my Mac nor "R CMD check Ecfun_0.2-4" under Windows.  Travis CI builds "https://github.com/sbgraves237/Ecfun" just fine.
> >
> >
> >       The rJava maintainer, Simon Urbanek, has kindly responded to two of my three emails on this since 2020-03-20, but I've so far been unable to translate his suggestions into fixes for these problems.
> >
> >
> >       Should I remove rJava from Ecfun and see what breaks, then see if I can work around that?  Should I provide the error messages I get for rJava from "update.packages()" and / or library(rJava) on both machines, with sessionInfo() to this list or to Stack Exchange or Stack Overflow?
> >
> >
> >       Since I'm getting so many problems with rJava on under both macOS and Windows 10, that suggests to me that potential users could have similar problems, and I should try to remove rJava from Ecfun.
> >
> >
> >       What do you think?
> >       Thanks,
> >       Spencer Graves
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> ...
> Subject: Digest Footer
>
> _______________________________________________
> R-devel at r-project.org mailing list  DIGESTED
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> ------------------------------
>
> End of R-devel Digest, Vol 205, Issue 21
> ****************************************


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Mar 29 15:03:16 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 29 Mar 2020 08:03:16 -0500
Subject: [Rd] status of Java & rJava?
In-Reply-To: <92439e5a-ecc9-bfac-7a55-60fd5c7b2973@stats.ox.ac.uk>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
 <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
 <92439e5a-ecc9-bfac-7a55-60fd5c7b2973@stats.ox.ac.uk>
Message-ID: <fc73030c-64c8-3e92-12d0-17999e5c08ba@prodsyse.com>

 ????? I spoke too soon in saying that everything worked with OpenJDK:? 
"R CMD check Ecfun_0.2-4.tar.gz" using 
"https://github.com/sbgraves237/Ecfun" worked fine on my Mac but failed 
with "error: DLL 'rJava' not found: maybe not installed for this 
architecture?" under Windows 10.? "00install.out" and 
"Sys.getenv('PATH')" follow.? "library(rJava)" seemed to work, and 
"help(pac='rJava') displays 0.9-12.? Suggestions?? Thanks, Spencer Graves


* installing *source* package 'Ecfun' ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
*** arch - i386
Error: package or namespace load failed for 'Ecfun':
 ?.onLoad failed in loadNamespace() for 'rJava', details:
 ? call: library.dynam("rJava", pkgname, libname)
 ? error: DLL 'rJava' not found: maybe not installed for this architecture?
Error: loading failed
Execution halted
*** arch - x64
ERROR: loading failed for 'i386'
* removing 'C:/Users/spenc/Documents/R/Ecfun/Ecfun.Rcheck/Ecfun'

######################

 > Sys.getenv('PATH')
[1] "C:\\Program Files\\R\\R-3.6.3\\bin\\x64;C:\\Program 
Files\\AdoptOpenJDK\\jdk-11.0.6.10-hotspot\\bin;C:\\Program 
Files\\Java\\jre1.8.0_241;C:\\Rtools\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program 
Files\\Microsoft VS Code\\bin;C:\\Program Files\\Git\\cmd;C:\\Program 
Files\\TortoiseSVN\\bin;c:\\programFiles\\ffmpeg\\ffmpeg-4.1\\;C:\\Program 
Files\\Pandoc\\;C:\\Program Files\\MiKTeX 
2.9\\miktex\\bin\\x64\\;C:\\Users\\spenc\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\spenc\\AppData\\Local\\GitHubDesktop\\bin;C:\\FFmpeg\\bin;C:\\RBuildTools\\3.5\\bin;C:\\Program 
Files\\R\\R-3.6.3\\bin;C:\\Users\\spenc\\AppData\\Local\\Microsoft\\WindowsApps;C:\\RBuildTools\\3.5\\;"



On 2020-03-28 23:07, Prof Brian Ripley wrote:
> On 29/03/2020 04:07, Simon Urbanek wrote:
>> Spencer,
>>
>> you could argue that Java is dead since Oracle effectively killed it 
>> by removing all public downloads, but if you manage to get hold of a 
>> Java installation then it works just fine with R. To my best 
>> knowledge there has never been an issue if you installed rJava from 
>> source. macOS Catalina has made binary distributions impossible due 
>> to additional restrictions on run-time, but even that has been how 
>> solved with the release of rJava 0.9-12, so please make sure you use 
>> the latest rJava. In most cases that I have seen issues were caused 
>> by incorrect configuration (setting JAVA_HOME incorrectly [do NOT set 
>> it unless you know what you're doing!], not installing Java for the 
>> same architecture as R etc.). If you have any issues feel free to 
>> report them. rJava 0.9-12 has quite a few changes that try to detect 
>> user errors better and report them so I strongly suggest users to 
>> upgrade.
>
> There is OpenJDK, and https://adoptopenjdk.net provides binaries for 
> macOS, including the preferred Java 11 LTS.? I just re-checked that, 
> and after
>
> env 
> JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home 
> R CMD javareconf
>
> I was able to install from source and check rJava 0.9-12 in 4.0.0 
> alpha. ?For the CRAN binary of 3.6.3 I had to make sure I was using 
> clang 7: 'clang' defaults to that in the Apple CLT which does not 
> support -fopenmp -- but the binary package just worked.
>
> [All on Catalina.]

Thanks.? That worked on Catalina.? When installing OpenJDK on Windows 
10, The default for "Set JAVA_HOME" was 'X';? I changed that to 
install.? It didn't work at first, but did after I rebooted.


Thanks again to both Simon Urbanek and Prof. Ripley.? Spencer Graves


From j@goreck| @end|ng |rom w|t@edu@p|  Sun Mar 29 15:29:12 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 29 Mar 2020 14:29:12 +0100
Subject: [Rd] is.vector could handle AsIs class better
Message-ID: <CAOO9MKXd2dZfvuYYDUXsTJgx9D15S4SfXAmwC57m5_8-h2+ZnQ@mail.gmail.com>

Dear R-devel,

AsIs class seems to be well handled by `typeof` and `mode` function.
Those two functions are being referred when explaining `is.vector`
behaviour in manual. Yet `is.vector` does not seem to be handling AsIs
class the same way.

is.vector(1L)
#[1] TRUE
is.vector(I(1L))
#[1] FALSE

Is there any reason behind this behaviour?
Could we have it supported so AsIs class is ignored when `is.vector`
is doing its job?

Best Regards,
Jan Gorecki


From g@bembecker @end|ng |rom gm@||@com  Sun Mar 29 20:09:11 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 29 Mar 2020 11:09:11 -0700
Subject: [Rd] is.vector could handle AsIs class better
In-Reply-To: <CAOO9MKXd2dZfvuYYDUXsTJgx9D15S4SfXAmwC57m5_8-h2+ZnQ@mail.gmail.com>
References: <CAOO9MKXd2dZfvuYYDUXsTJgx9D15S4SfXAmwC57m5_8-h2+ZnQ@mail.gmail.com>
Message-ID: <CAD4oTHEqHPd+SCS0w2C+jV+9HyUZCSV3Uojm11a_Lz_dK2Sfpw@mail.gmail.com>

Jan,

I believe it's because it has "a non-NULL attribute other than names" as
per the documentation. In this case its class of "AsIs".

Best,
~G

On Sun, Mar 29, 2020 at 6:29 AM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:

> Dear R-devel,
>
> AsIs class seems to be well handled by `typeof` and `mode` function.
> Those two functions are being referred when explaining `is.vector`
> behaviour in manual. Yet `is.vector` does not seem to be handling AsIs
> class the same way.
>
> is.vector(1L)
> #[1] TRUE
> is.vector(I(1L))
> #[1] FALSE
>
> Is there any reason behind this behaviour?
> Could we have it supported so AsIs class is ignored when `is.vector`
> is doing its job?
>
> Best Regards,
> Jan Gorecki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Sun Mar 29 21:15:22 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Mon, 30 Mar 2020 08:15:22 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
Message-ID: <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>

Hi

Thanks for your input on this I?aki and Nicolas.

I am starting testing an R fix for this problem today.

As suggested, the plan is to allow the R user to specify a font family 
other than "symbol" for plotmath output (or, more generally, in R 
parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.

Paul


On 27/03/20 11:30 pm, I?aki Ucar wrote:
> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
> <nicolas.mailhot at laposte.net> wrote:
>>
>> <snip>
>>
>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
>> family name in its default conf. Linux systems are UTF-8 by default for
>> ~20 years now, they don?t need the forcing of magic font families to
>> handle symbols not present in the 8-bit legacy Windows encodings.
>>
>> The actual effect of this conf is not the selection of font files with
>> special and unusual symbols. It is to priorize fonts that match the
>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>> systems, because no one has needed to bother with them since Linux
>> switched to UTF-8 last millenium.
>>
>> Just stop using ?Symbol? in R and things will work a lot better.
>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>> fontconfig (and fight with wine for it), because *no* *one* *else*
>> *cares* about this legacy Windows-specific stuff.
> 
> So, in the light of Nicolas' input (thanks!), I think that font
> selection should be fixed upstream in R. I'd be happy to put all this
> together in R's bugzilla, but I don't have an account. Could someone
> please invite me?
> 
> I?aki
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |uc@r @end|ng |rom |edor@project@org  Sun Mar 29 22:01:21 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sun, 29 Mar 2020 22:01:21 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
Message-ID: <CALEXWq1_Y1ZYx3GpJdfuAO_+ZG8fwx5Y=KMtDzNxQXPzVKAzpQ@mail.gmail.com>

Thanks, Paul. I've created a bug report to keep track of this
(https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17748), and taken
the liberty of adding you to CC. We'll need to cherry-pick the fix for
R 3.6.3 in Fedora 31.

I?aki

On Sun, 29 Mar 2020 at 21:15, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>
> Hi
>
> Thanks for your input on this I?aki and Nicolas.
>
> I am starting testing an R fix for this problem today.
>
> As suggested, the plan is to allow the R user to specify a font family
> other than "symbol" for plotmath output (or, more generally, in R
> parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
>
> Paul
>
>
> On 27/03/20 11:30 pm, I?aki Ucar wrote:
> > On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
> > <nicolas.mailhot at laposte.net> wrote:
> >>
> >> <snip>
> >>
> >> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
> >> family name in its default conf. Linux systems are UTF-8 by default for
> >> ~20 years now, they don?t need the forcing of magic font families to
> >> handle symbols not present in the 8-bit legacy Windows encodings.
> >>
> >> The actual effect of this conf is not the selection of font files with
> >> special and unusual symbols. It is to priorize fonts that match the
> >> "Symbol" magic name. And those fonts are few and crumbling on Linux
> >> systems, because no one has needed to bother with them since Linux
> >> switched to UTF-8 last millenium.
> >>
> >> Just stop using ?Symbol? in R and things will work a lot better.
> >> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
> >> fontconfig (and fight with wine for it), because *no* *one* *else*
> >> *cares* about this legacy Windows-specific stuff.
> >
> > So, in the light of Nicolas' input (thanks!), I think that font
> > selection should be fixed upstream in R. I'd be happy to put all this
> > together in R's bugzilla, but I don't have an account. Could someone
> > please invite me?
> >
> > I?aki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >



-- 
I?aki ?car


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Mon Mar 30 04:24:17 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Mon, 30 Mar 2020 15:24:17 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
Message-ID: <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>

Hi

I have created an R branch that contains a potential fix ...

https://svn.r-project.org/R/branches/R-symfam/

This allows, for example, ...

cairo_pdf(symbolfamily="OpenSymbol")

... to specify that the OpenSymbol family should be used as the "symbol" 
font (e.g., for "plotmath") in R.

This is just a separate branch for now because, while I have tested it 
under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows 
(right now) or Mac (ever) and I do not want to drop a bomb on R-devel at 
this stage of the release process for R 4.0.0.

The attached file contains at least an outline of steps required to do a 
minimal test if anyone wants to try the fix on Linux.

cc'ing Simon and Jeroen in case they are able to help with checking that 
this builds and works on Mac and/or Windows.

NOTEs:
- 'symbolfamily' can only be specified when a graphics device is opened, 
and it is then fixed for that device.
- on Windows, for cairo-based devices, the "symbol" font is still 
hard-coded as "Standard Symbols L"

Paul

On 30/03/20 8:15 am, Paul Murrell wrote:
> Hi
> 
> Thanks for your input on this I?aki and Nicolas.
> 
> I am starting testing an R fix for this problem today.
> 
> As suggested, the plan is to allow the R user to specify a font family 
> other than "symbol" for plotmath output (or, more generally, in R 
> parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
> 
> Paul
> 
> 
> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>> <nicolas.mailhot at laposte.net> wrote:
>>>
>>> <snip>
>>>
>>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
>>> family name in its default conf. Linux systems are UTF-8 by default for
>>> ~20 years now, they don?t need the forcing of magic font families to
>>> handle symbols not present in the 8-bit legacy Windows encodings.
>>>
>>> The actual effect of this conf is not the selection of font files with
>>> special and unusual symbols. It is to priorize fonts that match the
>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>>> systems, because no one has needed to bother with them since Linux
>>> switched to UTF-8 last millenium.
>>>
>>> Just stop using ?Symbol? in R and things will work a lot better.
>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>>> *cares* about this legacy Windows-specific stuff.
>>
>> So, in the light of Nicolas' input (thanks!), I think that font
>> selection should be fixed upstream in R. I'd be happy to put all this
>> together in R's bugzilla, but I don't have an account. Could someone
>> please invite me?
>>
>> I?aki
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/

From g@bembecker @end|ng |rom gm@||@com  Mon Mar 30 08:43:49 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 29 Mar 2020 23:43:49 -0700
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
Message-ID: <CAD4oTHG2LCbDi9Xb4oo0z9d=Bs5Mws9NuedH=35r5pOQUwfetw@mail.gmail.com>

I do my devel/patch work on Mac so I can take a shot at testing your branch
in the next couple days.

~G

On Sun, Mar 29, 2020 at 7:24 PM Paul Murrell <paul at stat.auckland.ac.nz>
wrote:

> Hi
>
> I have created an R branch that contains a potential fix ...
>
> https://svn.r-project.org/R/branches/R-symfam/
>
> This allows, for example, ...
>
> cairo_pdf(symbolfamily="OpenSymbol")
>
> ... to specify that the OpenSymbol family should be used as the "symbol"
> font (e.g., for "plotmath") in R.
>
> This is just a separate branch for now because, while I have tested it
> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at
> this stage of the release process for R 4.0.0.
>
> The attached file contains at least an outline of steps required to do a
> minimal test if anyone wants to try the fix on Linux.
>
> cc'ing Simon and Jeroen in case they are able to help with checking that
> this builds and works on Mac and/or Windows.
>
> NOTEs:
> - 'symbolfamily' can only be specified when a graphics device is opened,
> and it is then fixed for that device.
> - on Windows, for cairo-based devices, the "symbol" font is still
> hard-coded as "Standard Symbols L"
>
> Paul
>
> On 30/03/20 8:15 am, Paul Murrell wrote:
> > Hi
> >
> > Thanks for your input on this I?aki and Nicolas.
> >
> > I am starting testing an R fix for this problem today.
> >
> > As suggested, the plan is to allow the R user to specify a font family
> > other than "symbol" for plotmath output (or, more generally, in R
> > parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
> >
> > Paul
> >
> >
> > On 27/03/20 11:30 pm, I?aki Ucar wrote:
> >> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
> >> <nicolas.mailhot at laposte.net> wrote:
> >>>
> >>> <snip>
> >>>
> >>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
> >>> family name in its default conf. Linux systems are UTF-8 by default for
> >>> ~20 years now, they don?t need the forcing of magic font families to
> >>> handle symbols not present in the 8-bit legacy Windows encodings.
> >>>
> >>> The actual effect of this conf is not the selection of font files with
> >>> special and unusual symbols. It is to priorize fonts that match the
> >>> "Symbol" magic name. And those fonts are few and crumbling on Linux
> >>> systems, because no one has needed to bother with them since Linux
> >>> switched to UTF-8 last millenium.
> >>>
> >>> Just stop using ?Symbol? in R and things will work a lot better.
> >>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
> >>> fontconfig (and fight with wine for it), because *no* *one* *else*
> >>> *cares* about this legacy Windows-specific stuff.
> >>
> >> So, in the light of Nicolas' input (thanks!), I think that font
> >> selection should be fixed upstream in R. I'd be happy to put all this
> >> together in R's bugzilla, but I don't have an account. Could someone
> >> please invite me?
> >>
> >> I?aki
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Mon Mar 30 11:25:30 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Mon, 30 Mar 2020 10:25:30 +0100
Subject: [Rd] is.vector could handle AsIs class better
In-Reply-To: <CAD4oTHEqHPd+SCS0w2C+jV+9HyUZCSV3Uojm11a_Lz_dK2Sfpw@mail.gmail.com>
References: <CAOO9MKXd2dZfvuYYDUXsTJgx9D15S4SfXAmwC57m5_8-h2+ZnQ@mail.gmail.com>
 <CAD4oTHEqHPd+SCS0w2C+jV+9HyUZCSV3Uojm11a_Lz_dK2Sfpw@mail.gmail.com>
Message-ID: <CAOO9MKUqgxG8n10t0YVYo1qc3_=kAHCpCy4=qJoH0o4-TnsHSg@mail.gmail.com>

Thank you Gabriel,
Agree, although I think that could be relaxed in this single case and
AsIs class could be ignored.
Best,
Jan

On Sun, Mar 29, 2020 at 7:09 PM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Jan,
>
> I believe it's because it has "a non-NULL attribute other than names" as per the documentation. In this case its class of "AsIs".
>
> Best,
> ~G
>
> On Sun, Mar 29, 2020 at 6:29 AM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
>>
>> Dear R-devel,
>>
>> AsIs class seems to be well handled by `typeof` and `mode` function.
>> Those two functions are being referred when explaining `is.vector`
>> behaviour in manual. Yet `is.vector` does not seem to be handling AsIs
>> class the same way.
>>
>> is.vector(1L)
>> #[1] TRUE
>> is.vector(I(1L))
>> #[1] FALSE
>>
>> Is there any reason behind this behaviour?
>> Could we have it supported so AsIs class is ignored when `is.vector`
>> is doing its job?
>>
>> Best Regards,
>> Jan Gorecki
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uc@r @end|ng |rom |edor@project@org  Mon Mar 30 11:43:46 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 30 Mar 2020 11:43:46 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
Message-ID: <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>

On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>
> Hi
>
> I have created an R branch that contains a potential fix ...
>
> https://svn.r-project.org/R/branches/R-symfam/
>
> This allows, for example, ...
>
> cairo_pdf(symbolfamily="OpenSymbol")
>
> ... to specify that the OpenSymbol family should be used as the "symbol"
> font (e.g., for "plotmath") in R.

Will this be a default on Linux? Or are you planning any mechanism
(env variable, option...) to make it the default? Because, otherwise,
as pango is updated across distributions, R graphics will be "broken"
by default unless the user explicitly calls the graphics device in
that way to set that option, which I would say is uncommon.

I?aki

> This is just a separate branch for now because, while I have tested it
> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at
> this stage of the release process for R 4.0.0.
>
> The attached file contains at least an outline of steps required to do a
> minimal test if anyone wants to try the fix on Linux.
>
> cc'ing Simon and Jeroen in case they are able to help with checking that
> this builds and works on Mac and/or Windows.
>
> NOTEs:
> - 'symbolfamily' can only be specified when a graphics device is opened,
> and it is then fixed for that device.
> - on Windows, for cairo-based devices, the "symbol" font is still
> hard-coded as "Standard Symbols L"
>
>
> Paul
>
> On 30/03/20 8:15 am, Paul Murrell wrote:
> > Hi
> >
> > Thanks for your input on this I?aki and Nicolas.
> >
> > I am starting testing an R fix for this problem today.
> >
> > As suggested, the plan is to allow the R user to specify a font family
> > other than "symbol" for plotmath output (or, more generally, in R
> > parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
> >
> > Paul
> >
> >
> > On 27/03/20 11:30 pm, I?aki Ucar wrote:
> >> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
> >> <nicolas.mailhot at laposte.net> wrote:
> >>>
> >>> <snip>
> >>>
> >>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
> >>> family name in its default conf. Linux systems are UTF-8 by default for
> >>> ~20 years now, they don?t need the forcing of magic font families to
> >>> handle symbols not present in the 8-bit legacy Windows encodings.
> >>>
> >>> The actual effect of this conf is not the selection of font files with
> >>> special and unusual symbols. It is to priorize fonts that match the
> >>> "Symbol" magic name. And those fonts are few and crumbling on Linux
> >>> systems, because no one has needed to bother with them since Linux
> >>> switched to UTF-8 last millenium.
> >>>
> >>> Just stop using ?Symbol? in R and things will work a lot better.
> >>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
> >>> fontconfig (and fight with wine for it), because *no* *one* *else*
> >>> *cares* about this legacy Windows-specific stuff.
> >>
> >> So, in the light of Nicolas' input (thanks!), I think that font
> >> selection should be fixed upstream in R. I'd be happy to put all this
> >> together in R's bugzilla, but I don't have an account. Could someone
> >> please invite me?
> >>
> >> I?aki
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/



-- 
I?aki ?car

On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>
> Hi
>
> I have created an R branch that contains a potential fix ...
>
> https://svn.r-project.org/R/branches/R-symfam/
>
> This allows, for example, ...
>
> cairo_pdf(symbolfamily="OpenSymbol")
>
> ... to specify that the OpenSymbol family should be used as the "symbol"
> font (e.g., for "plotmath") in R.
>
> This is just a separate branch for now because, while I have tested it
> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at
> this stage of the release process for R 4.0.0.
>
> The attached file contains at least an outline of steps required to do a
> minimal test if anyone wants to try the fix on Linux.
>
> cc'ing Simon and Jeroen in case they are able to help with checking that
> this builds and works on Mac and/or Windows.
>
> NOTEs:
> - 'symbolfamily' can only be specified when a graphics device is opened,
> and it is then fixed for that device.
> - on Windows, for cairo-based devices, the "symbol" font is still
> hard-coded as "Standard Symbols L"
>
> Paul
>
> On 30/03/20 8:15 am, Paul Murrell wrote:
> > Hi
> >
> > Thanks for your input on this I?aki and Nicolas.
> >
> > I am starting testing an R fix for this problem today.
> >
> > As suggested, the plan is to allow the R user to specify a font family
> > other than "symbol" for plotmath output (or, more generally, in R
> > parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
> >
> > Paul
> >
> >
> > On 27/03/20 11:30 pm, I?aki Ucar wrote:
> >> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
> >> <nicolas.mailhot at laposte.net> wrote:
> >>>
> >>> <snip>
> >>>
> >>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
> >>> family name in its default conf. Linux systems are UTF-8 by default for
> >>> ~20 years now, they don?t need the forcing of magic font families to
> >>> handle symbols not present in the 8-bit legacy Windows encodings.
> >>>
> >>> The actual effect of this conf is not the selection of font files with
> >>> special and unusual symbols. It is to priorize fonts that match the
> >>> "Symbol" magic name. And those fonts are few and crumbling on Linux
> >>> systems, because no one has needed to bother with them since Linux
> >>> switched to UTF-8 last millenium.
> >>>
> >>> Just stop using ?Symbol? in R and things will work a lot better.
> >>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
> >>> fontconfig (and fight with wine for it), because *no* *one* *else*
> >>> *cares* about this legacy Windows-specific stuff.
> >>
> >> So, in the light of Nicolas' input (thanks!), I think that font
> >> selection should be fixed upstream in R. I'd be happy to put all this
> >> together in R's bugzilla, but I don't have an account. Could someone
> >> please invite me?
> >>
> >> I?aki
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/



-- 
I?aki ?car


From n|co|@@@m@||hot @end|ng |rom |@po@te@net  Mon Mar 30 12:12:37 2020
From: n|co|@@@m@||hot @end|ng |rom |@po@te@net (Nicolas Mailhot)
Date: Mon, 30 Mar 2020 12:12:37 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
Message-ID: <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>

Le lundi 30 mars 2020 ? 15:24 +1300, Paul Murrell a ?crit :
> Hi
> 
> I have created an R branch that contains a potential fix ...
> 
> https://svn.r-project.org/R/branches/R-symfam/
> 
> This allows, for example, ...
> 
> cairo_pdf(symbolfamily="OpenSymbol")
> 
> ... to specify that the OpenSymbol family should be used as the
> "symbol" font (e.g., for "plotmath") in R.

Thanks for looking at it!

But, really, there is no such thing as a Symbol font on Linux anymore.
Symbol is pre-unicode thinking. Most modern general-purpose unicode
fonts will include every codepoint Symbol ever shipped, and fontconfig
will fallback gracefully when that?s not the case (unless your
fontconfig integration is broken).

Just use the sans-serif or monospace fontconfig defaults. You don?t
need Symbol, or OpenSymbol, or any special font setup.

Symbol?s codepoint coverage is laughable by 2020?s UTF-8 standards.

Symbol << Normal Unicode font (DejaVu*) << Special math fonts (STIX2)

I you do advanced math stuff, you may need a special math font like
STIX, but that?s lights years more advanced than Symbol, and a general
purpose font like DejaVu has been shipping a MATH block for several
years now

Regards,

-- 
Nicolas Mailhot


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Mar 30 15:09:16 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Mon, 30 Mar 2020 08:09:16 -0500
Subject: [Rd] status of Java & rJava?
In-Reply-To: <fc73030c-64c8-3e92-12d0-17999e5c08ba@prodsyse.com>
References: <02692fb0-9d27-9df2-6a07-6f46cda600ca@prodsyse.com>
 <30424EF3-FD2E-44DB-8D7A-C5EC976F47B2@R-project.org>
 <92439e5a-ecc9-bfac-7a55-60fd5c7b2973@stats.ox.ac.uk>
 <fc73030c-64c8-3e92-12d0-17999e5c08ba@prodsyse.com>
Message-ID: <37919b69-7c23-f51c-901b-0e1e207de1e7@prodsyse.com>

 ????? Tomas Kalibera kindly suggested I might have both 32- and 64-bit 
Java installed, and it might be accessing the 32-bit.? He further 
suggested:


 ?????? R CMD check Ecfun_0.2-4.tar.gz --no-multiarch


 ????? That worked.? Thanks, Thomas.


 ????? Spencer

On 2020-03-29 08:03, Spencer Graves wrote:
> I spoke too soon in saying that everything worked with OpenJDK: "R CMD 
> check Ecfun_0.2-4.tar.gz" using "https://github.com/sbgraves237/Ecfun" 
> worked fine on my Mac but failed with "error: DLL 'rJava' not found: 
> maybe not installed for this architecture?" under Windows 10.? 
> "00install.out" and "Sys.getenv('PATH')" follow.? "library(rJava)" 
> seemed to work, and "help(pac='rJava') displays 0.9-12.? Suggestions?? 
> Thanks, Spencer Graves
>
>
> * installing *source* package 'Ecfun' ...
> ** using staged installation
> ** R
> ** inst
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** installing vignettes
> ** testing if installed package can be loaded from temporary location
> *** arch - i386
> Error: package or namespace load failed for 'Ecfun':
> ?.onLoad failed in loadNamespace() for 'rJava', details:
> ? call: library.dynam("rJava", pkgname, libname)
> ? error: DLL 'rJava' not found: maybe not installed for this 
> architecture?
> Error: loading failed
> Execution halted
> *** arch - x64
> ERROR: loading failed for 'i386'
> * removing 'C:/Users/spenc/Documents/R/Ecfun/Ecfun.Rcheck/Ecfun'
>
> ######################
>
> > Sys.getenv('PATH')
> [1] "C:\\Program Files\\R\\R-3.6.3\\bin\\x64;C:\\Program 
> Files\\AdoptOpenJDK\\jdk-11.0.6.10-hotspot\\bin;C:\\Program 
> Files\\Java\\jre1.8.0_241;C:\\Rtools\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program 
> Files\\Microsoft VS Code\\bin;C:\\Program Files\\Git\\cmd;C:\\Program 
> Files\\TortoiseSVN\\bin;c:\\programFiles\\ffmpeg\\ffmpeg-4.1\\;C:\\Program 
> Files\\Pandoc\\;C:\\Program Files\\MiKTeX 
> 2.9\\miktex\\bin\\x64\\;C:\\Users\\spenc\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\spenc\\AppData\\Local\\GitHubDesktop\\bin;C:\\FFmpeg\\bin;C:\\RBuildTools\\3.5\\bin;C:\\Program 
> Files\\R\\R-3.6.3\\bin;C:\\Users\\spenc\\AppData\\Local\\Microsoft\\WindowsApps;C:\\RBuildTools\\3.5\\;" 
>
>
>
>
> On 2020-03-28 23:07, Prof Brian Ripley wrote:
>> On 29/03/2020 04:07, Simon Urbanek wrote:
>>> Spencer,
>>>
>>> you could argue that Java is dead since Oracle effectively killed it 
>>> by removing all public downloads, but if you manage to get hold of a 
>>> Java installation then it works just fine with R. To my best 
>>> knowledge there has never been an issue if you installed rJava from 
>>> source. macOS Catalina has made binary distributions impossible due 
>>> to additional restrictions on run-time, but even that has been how 
>>> solved with the release of rJava 0.9-12, so please make sure you use 
>>> the latest rJava. In most cases that I have seen issues were caused 
>>> by incorrect configuration (setting JAVA_HOME incorrectly [do NOT 
>>> set it unless you know what you're doing!], not installing Java for 
>>> the same architecture as R etc.). If you have any issues feel free 
>>> to report them. rJava 0.9-12 has quite a few changes that try to 
>>> detect user errors better and report them so I strongly suggest 
>>> users to upgrade.
>>
>> There is OpenJDK, and https://adoptopenjdk.net provides binaries for 
>> macOS, including the preferred Java 11 LTS.? I just re-checked that, 
>> and after
>>
>> env 
>> JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home 
>> R CMD javareconf
>>
>> I was able to install from source and check rJava 0.9-12 in 4.0.0 
>> alpha. ?For the CRAN binary of 3.6.3 I had to make sure I was using 
>> clang 7: 'clang' defaults to that in the Apple CLT which does not 
>> support -fopenmp -- but the binary package just worked.
>>
>> [All on Catalina.]
>
> Thanks.? That worked on Catalina.? When installing OpenJDK on Windows 
> 10, The default for "Set JAVA_HOME" was 'X';? I changed that to 
> install.? It didn't work at first, but did after I rebooted.
>
>
> Thanks again to both Simon Urbanek and Prof. Ripley.? Spencer Graves
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Mon Mar 30 18:41:27 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 30 Mar 2020 09:41:27 -0700
Subject: [Rd] is.vector could handle AsIs class better
In-Reply-To: <CAOO9MKUqgxG8n10t0YVYo1qc3_=kAHCpCy4=qJoH0o4-TnsHSg@mail.gmail.com>
References: <CAOO9MKXd2dZfvuYYDUXsTJgx9D15S4SfXAmwC57m5_8-h2+ZnQ@mail.gmail.com>
 <CAD4oTHEqHPd+SCS0w2C+jV+9HyUZCSV3Uojm11a_Lz_dK2Sfpw@mail.gmail.com>
 <CAOO9MKUqgxG8n10t0YVYo1qc3_=kAHCpCy4=qJoH0o4-TnsHSg@mail.gmail.com>
Message-ID: <CAF8bMcYPi02qz0fUiThG52mPaPJh9ukB5Nou+p3p6bxzSy0jog@mail.gmail.com>

The use of the term 'vector' in R comes from S, where it was used, starting
in the latter part of the 1970s, to refer to the most primitive
(irreducible) parts of an object.  It has little to do with the
mathematical or physical concept of a vector and, in my opinion, should not
be used much by ordinary users.  In hindsight, it may have been better to
use some Joycean neologism instead of the word vector so people would not
have any notions of what it should do.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, Mar 30, 2020 at 2:26 AM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:

> Thank you Gabriel,
> Agree, although I think that could be relaxed in this single case and
> AsIs class could be ignored.
> Best,
> Jan
>
> On Sun, Mar 29, 2020 at 7:09 PM Gabriel Becker <gabembecker at gmail.com>
> wrote:
> >
> > Jan,
> >
> > I believe it's because it has "a non-NULL attribute other than names" as
> per the documentation. In this case its class of "AsIs".
> >
> > Best,
> > ~G
> >
> > On Sun, Mar 29, 2020 at 6:29 AM Jan Gorecki <j.gorecki at wit.edu.pl>
> wrote:
> >>
> >> Dear R-devel,
> >>
> >> AsIs class seems to be well handled by `typeof` and `mode` function.
> >> Those two functions are being referred when explaining `is.vector`
> >> behaviour in manual. Yet `is.vector` does not seem to be handling AsIs
> >> class the same way.
> >>
> >> is.vector(1L)
> >> #[1] TRUE
> >> is.vector(I(1L))
> >> #[1] FALSE
> >>
> >> Is there any reason behind this behaviour?
> >> Could we have it supported so AsIs class is ignored when `is.vector`
> >> is doing its job?
> >>
> >> Best Regards,
> >> Jan Gorecki
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Mon Mar 30 22:28:22 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 31 Mar 2020 09:28:22 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CAD4oTHG2LCbDi9Xb4oo0z9d=Bs5Mws9NuedH=35r5pOQUwfetw@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CAD4oTHG2LCbDi9Xb4oo0z9d=Bs5Mws9NuedH=35r5pOQUwfetw@mail.gmail.com>
Message-ID: <1aab20f8-8e9e-abb0-dcaa-4e48fee1b51c@stat.auckland.ac.nz>


Thanks Gabriel.  Sounds like both you and Brian can build the branch on 
Mac.  Just need to check that Windows builds before I commit to r-devel.

Paul

On 30/03/20 7:43 pm, Gabriel Becker wrote:
> I do my devel/patch work on Mac so I can take a shot at testing your 
> branch in the next couple days.
> 
> ~G
> 
> On Sun, Mar 29, 2020 at 7:24 PM Paul Murrell <paul at stat.auckland.ac.nz 
> <mailto:paul at stat.auckland.ac.nz>> wrote:
> 
>     Hi
> 
>     I have created an R branch that contains a potential fix ...
> 
>     https://svn.r-project.org/R/branches/R-symfam/
> 
>     This allows, for example, ...
> 
>     cairo_pdf(symbolfamily="OpenSymbol")
> 
>     ... to specify that the OpenSymbol family should be used as the
>     "symbol"
>     font (e.g., for "plotmath") in R.
> 
>     This is just a separate branch for now because, while I have tested it
>     under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
>     (right now) or Mac (ever) and I do not want to drop a bomb on
>     R-devel at
>     this stage of the release process for R 4.0.0.
> 
>     The attached file contains at least an outline of steps required to
>     do a
>     minimal test if anyone wants to try the fix on Linux.
> 
>     cc'ing Simon and Jeroen in case they are able to help with checking
>     that
>     this builds and works on Mac and/or Windows.
> 
>     NOTEs:
>     - 'symbolfamily' can only be specified when a graphics device is
>     opened,
>     and it is then fixed for that device.
>     - on Windows, for cairo-based devices, the "symbol" font is still
>     hard-coded as "Standard Symbols L"
> 
>     Paul
> 
>     On 30/03/20 8:15 am, Paul Murrell wrote:
>      > Hi
>      >
>      > Thanks for your input on this I?aki and Nicolas.
>      >
>      > I am starting testing an R fix for this problem today.
>      >
>      > As suggested, the plan is to allow the R user to specify a font
>     family
>      > other than "symbol" for plotmath output (or, more generally, in R
>      > parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics
>     device.
>      >
>      > Paul
>      >
>      >
>      > On 27/03/20 11:30 pm, I?aki Ucar wrote:
>      >> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>      >> <nicolas.mailhot at laposte.net
>     <mailto:nicolas.mailhot at laposte.net>> wrote:
>      >>>
>      >>> <snip>
>      >>>
>      >>> R brought this all on itself by hardcoding a Windows-only
>     ?Symbol? font
>      >>> family name in its default conf. Linux systems are UTF-8 by
>     default for
>      >>> ~20 years now, they don?t need the forcing of magic font
>     families to
>      >>> handle symbols not present in the 8-bit legacy Windows encodings.
>      >>>
>      >>> The actual effect of this conf is not the selection of font
>     files with
>      >>> special and unusual symbols. It is to priorize fonts that match the
>      >>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>      >>> systems, because no one has needed to bother with them since Linux
>      >>> switched to UTF-8 last millenium.
>      >>>
>      >>> Just stop using ?Symbol? in R and things will work a lot better.
>      >>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>      >>> fontconfig (and fight with wine for it), because *no* *one* *else*
>      >>> *cares* about this legacy Windows-specific stuff.
>      >>
>      >> So, in the light of Nicolas' input (thanks!), I think that font
>      >> selection should be fixed upstream in R. I'd be happy to put all
>     this
>      >> together in R's bugzilla, but I don't have an account. Could someone
>      >> please invite me?
>      >>
>      >> I?aki
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >>
> 
>     -- 
>     Dr Paul Murrell
>     Department of Statistics
>     The University of Auckland
>     Private Bag 92019
>     Auckland
>     New Zealand
>     64 9 3737599 x85392
>     paul at stat.auckland.ac.nz <mailto:paul at stat.auckland.ac.nz>
>     http://www.stat.auckland.ac.nz/~paul/
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Mon Mar 30 22:41:30 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 31 Mar 2020 09:41:30 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
Message-ID: <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>

Hi

On 30/03/20 10:43 pm, I?aki Ucar wrote:
> On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>
>> Hi
>>
>> I have created an R branch that contains a potential fix ...
>>
>> https://svn.r-project.org/R/branches/R-symfam/
>>
>> This allows, for example, ...
>>
>> cairo_pdf(symbolfamily="OpenSymbol")
>>
>> ... to specify that the OpenSymbol family should be used as the "symbol"
>> font (e.g., for "plotmath") in R.
> 
> Will this be a default on Linux? Or are you planning any mechanism
> (env variable, option...) to make it the default? Because, otherwise,
> as pango is updated across distributions, R graphics will be "broken"
> by default unless the user explicitly calls the graphics device in
> that way to set that option, which I would say is uncommon.

Good question.  Currently, for x11() (and png() etc) the default is 
taken from X11.options().  So it is possible to set this default for a 
session, or even for an installation via one of the ?Startup mechanisms 
(e.g., an R_HOME/etc/Rprofile.site file).

For svg(), cairo_pdf(), and cairo_ps(), the default is hard-coded in the 
function arguments, but I *think* they are used less as default graphics 
devices.

Another option would be to try to detect Fedora and set the default 
X11.options() differently there.  Two problems:  I am not sure there is 
a reliable R code chunk for detecting Fedora (sessionInfo()$running?) 
let alone Fedora >= 30;   what to set the default to?  (just has to be a 
font with a good Unicode coverage that is pretty much guaranteed to be 
in a default Fedora install).

Paul

> I?aki
> 
>> This is just a separate branch for now because, while I have tested it
>> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
>> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at
>> this stage of the release process for R 4.0.0.
>>
>> The attached file contains at least an outline of steps required to do a
>> minimal test if anyone wants to try the fix on Linux.
>>
>> cc'ing Simon and Jeroen in case they are able to help with checking that
>> this builds and works on Mac and/or Windows.
>>
>> NOTEs:
>> - 'symbolfamily' can only be specified when a graphics device is opened,
>> and it is then fixed for that device.
>> - on Windows, for cairo-based devices, the "symbol" font is still
>> hard-coded as "Standard Symbols L"
>>
>>
>> Paul
>>
>> On 30/03/20 8:15 am, Paul Murrell wrote:
>>> Hi
>>>
>>> Thanks for your input on this I?aki and Nicolas.
>>>
>>> I am starting testing an R fix for this problem today.
>>>
>>> As suggested, the plan is to allow the R user to specify a font family
>>> other than "symbol" for plotmath output (or, more generally, in R
>>> parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
>>>
>>> Paul
>>>
>>>
>>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>>>> <nicolas.mailhot at laposte.net> wrote:
>>>>>
>>>>> <snip>
>>>>>
>>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
>>>>> family name in its default conf. Linux systems are UTF-8 by default for
>>>>> ~20 years now, they don?t need the forcing of magic font families to
>>>>> handle symbols not present in the 8-bit legacy Windows encodings.
>>>>>
>>>>> The actual effect of this conf is not the selection of font files with
>>>>> special and unusual symbols. It is to priorize fonts that match the
>>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>>>>> systems, because no one has needed to bother with them since Linux
>>>>> switched to UTF-8 last millenium.
>>>>>
>>>>> Just stop using ?Symbol? in R and things will work a lot better.
>>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>>>>> *cares* about this legacy Windows-specific stuff.
>>>>
>>>> So, in the light of Nicolas' input (thanks!), I think that font
>>>> selection should be fixed upstream in R. I'd be happy to put all this
>>>> together in R's bugzilla, but I don't have an account. Could someone
>>>> please invite me?
>>>>
>>>> I?aki
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>
>> --
>> Dr Paul Murrell
>> Department of Statistics
>> The University of Auckland
>> Private Bag 92019
>> Auckland
>> New Zealand
>> 64 9 3737599 x85392
>> paul at stat.auckland.ac.nz
>> http://www.stat.auckland.ac.nz/~paul/
> 
> 
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From |uc@r @end|ng |rom |edor@project@org  Mon Mar 30 23:12:48 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 30 Mar 2020 23:12:48 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
 <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
Message-ID: <CALEXWq3qreKF8=Xw=8OWeADz-pvSQ7dZv2PYviBS2oiNo+0Hrg@mail.gmail.com>

On Mon, 30 Mar 2020 at 22:41, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>
> Hi
>
> On 30/03/20 10:43 pm, I?aki Ucar wrote:
> > On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
> >>
> >> Hi
> >>
> >> I have created an R branch that contains a potential fix ...
> >>
> >> https://svn.r-project.org/R/branches/R-symfam/
> >>
> >> This allows, for example, ...
> >>
> >> cairo_pdf(symbolfamily="OpenSymbol")
> >>
> >> ... to specify that the OpenSymbol family should be used as the "symbol"
> >> font (e.g., for "plotmath") in R.
> >
> > Will this be a default on Linux? Or are you planning any mechanism
> > (env variable, option...) to make it the default? Because, otherwise,
> > as pango is updated across distributions, R graphics will be "broken"
> > by default unless the user explicitly calls the graphics device in
> > that way to set that option, which I would say is uncommon.
>
> Good question.  Currently, for x11() (and png() etc) the default is
> taken from X11.options().  So it is possible to set this default for a
> session, or even for an installation via one of the ?Startup mechanisms
> (e.g., an R_HOME/etc/Rprofile.site file).
>
> For svg(), cairo_pdf(), and cairo_ps(), the default is hard-coded in the
> function arguments, but I *think* they are used less as default graphics
> devices.
>
> Another option would be to try to detect Fedora and set the default
> X11.options() differently there.  Two problems:  I am not sure there is
> a reliable R code chunk for detecting Fedora (sessionInfo()$running?)
> let alone Fedora >= 30;   what to set the default to?  (just has to be a
> font with a good Unicode coverage that is pretty much guaranteed to be
> in a default Fedora install).

As per Nicolas' comment (I failed to include him in CC in my last
email, and he's not in this list, sorry for that) any font installed
by default would have good symbol coverage, so there's really no need
to set a different font for symbols. According again to Nicolas (he's
one of the font experts in Fedora), the "sans-serif" or "monospace"
fontconfig defaults would work out of the box, and if a symbol is not
available, fontconfig should fallback gracefully to another font.

So maybe instead of a new "symbolfamily" argument, maybe it's better
to just use the "family" for all characters, including symbols, on
Linux, and fontconfig should take care of everything (if I understood
correctly your explanation, Nicolas; please correct me if I'm wrong).

-- 
I?aki ?car


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Mon Mar 30 23:14:33 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 31 Mar 2020 10:14:33 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>
Message-ID: <29c7f633-5c05-5db1-85d3-b0c6ae285af5@stat.auckland.ac.nz>

Hi

On 30/03/20 11:12 pm, Nicolas Mailhot wrote:
> Le lundi 30 mars 2020 ? 15:24 +1300, Paul Murrell a ?crit :
>> Hi
>>
>> I have created an R branch that contains a potential fix ...
>>
>> https://svn.r-project.org/R/branches/R-symfam/
>>
>> This allows, for example, ...
>>
>> cairo_pdf(symbolfamily="OpenSymbol")
>>
>> ... to specify that the OpenSymbol family should be used as the
>> "symbol" font (e.g., for "plotmath") in R.
> 
> Thanks for looking at it!
> 
> But, really, there is no such thing as a Symbol font on Linux anymore.
> Symbol is pre-unicode thinking. Most modern general-purpose unicode
> fonts will include every codepoint Symbol ever shipped, and fontconfig
> will fallback gracefully when that?s not the case (unless your
> fontconfig integration is broken).

Yep, the "symbol" font is an (outdated) R "plotmath" concept, but one 
that would take a fair bit of surgery to remove.  R plotmath converts 
certain R expressions (in certain contexts) to code points in the Adobe 
Symbol Encoding (ASM), but for cairo-based devices, those are converted 
to UTF8 code points.

> Just use the sans-serif or monospace fontconfig defaults. You don?t
> need Symbol, or OpenSymbol, or any special font setup.

Agreed.  I got reasonable coverage from DejaVu Sans and FreeSerif. 
There are still a number of ASM code points that are not covered though, 
for example, ...

F8EB	E6	# LEFT PAREN TOP	# parenlefttp (CUS)
F8EC	E7	# LEFT PAREN EXTENDER	# parenleftex (CUS)
F8ED	E8	# LEFT PAREN BOTTOM	# parenleftbt (CUS)

Even OpenSymbol is missing a few (though perhaps not very common ones) ...

F8E5	60	# RADICAL EXTENDER	# radicalex (CUS)
F8E6	BD	# VERTICAL ARROW EXTENDER	# arrowvertex (CUS)
F8E7	BE	# HORIZONTAL ARROW EXTENDER	# arrowhorizex (CUS)
F6DA	D2	# REGISTERED SIGN SERIF	# registerserif (CUS)
F6D9	D3	# COPYRIGHT SIGN SERIF	# copyrightserif (CUS)
F6DB	D4	# TRADE MARK SIGN SERIF	# trademarkserif (CUS)
F8E8	E2	# REGISTERED SIGN SANS SERIF	# registersans (CUS)
F8E9	E3	# COPYRIGHT SIGN SANS SERIF	# copyrightsans (CUS)
F8EA	E4	# TRADE MARK SIGN SANS SERIF	# trademarksans (CUS)

> Symbol?s codepoint coverage is laughable by 2020?s UTF-8 standards.

Right, but there are still code points that are apparently not common in 
fonts with a very broad Unicode coverage.

I did find a TrueType font that I could add a Unicode cmap to that gave 
complete coverage pretty much all by itself, but it is not distributable.

> Symbol << Normal Unicode font (DejaVu*) << Special math fonts (STIX2)
> 
> I you do advanced math stuff, you may need a special math font like
> STIX, but that?s lights years more advanced than Symbol, and a general
> purpose font like DejaVu has been shipping a MATH block for several
> years now

Sure.  One way to look at the new 'symbolfamily' argument is that it 
allows us to tell R that the "symbol" font is just a normal font (for 
cairo-based graphics devices).

Paul
-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From n|co|@@@m@||hot @end|ng |rom |@po@te@net  Tue Mar 31 00:50:50 2020
From: n|co|@@@m@||hot @end|ng |rom |@po@te@net (Nicolas Mailhot)
Date: Tue, 31 Mar 2020 00:50:50 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <29c7f633-5c05-5db1-85d3-b0c6ae285af5@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>
 <29c7f633-5c05-5db1-85d3-b0c6ae285af5@stat.auckland.ac.nz>
Message-ID: <c33d5034208f7ae4ccdc20f17b131d6aa13dc533.camel@laposte.net>

Le mardi 31 mars 2020 ? 10:14 +1300, Paul Murrell a ?crit :
> Hi
> 
> On 30/03/20 11:12 pm, Nicolas Mailhot wrote:
> > Le lundi 30 mars 2020 ? 15:24 +1300, Paul Murrell a ?crit :
> > > Hi
> > > 
> > > I have created an R branch that contains a potential fix ...
> > > 
> > > https://svn.r-project.org/R/branches/R-symfam/
> > > 
> > > This allows, for example, ...
> > > 
> > > cairo_pdf(symbolfamily="OpenSymbol")
> > > 
> > > ... to specify that the OpenSymbol family should be used as the
> > > "symbol" font (e.g., for "plotmath") in R.
> > 
> > Thanks for looking at it!
> > 
> > But, really, there is no such thing as a Symbol font on Linux
> > anymore.
> > Symbol is pre-unicode thinking. Most modern general-purpose unicode
> > fonts will include every codepoint Symbol ever shipped, and
> > fontconfig
> > will fallback gracefully when that?s not the case (unless your
> > fontconfig integration is broken).
> 
> Yep, the "symbol" font is an (outdated) R "plotmath" concept, but
> one 
> that would take a fair bit of surgery to remove.  R plotmath
> converts 
> certain R expressions (in certain contexts) to code points in the
> Adobe 
> Symbol Encoding (ASM), but for cairo-based devices, those are
> converted 
> to UTF8 code points.
> 
> > Just use the sans-serif or monospace fontconfig defaults. You don?t
> > need Symbol, or OpenSymbol, or any special font setup.
> 
> Agreed.  I got reasonable coverage from DejaVu Sans and FreeSerif. 
> There are still a number of ASM code points that are not covered
> though, 
> for example, ...
> 
> F8EB	E6	# LEFT PAREN TOP	# parenlefttp (CUS)
> F8EC	E7	# LEFT PAREN EXTENDER	# parenleftex (CUS)
> F8ED	E8	# LEFT PAREN BOTTOM	# parenleftbt (CUS)
> 
> Even OpenSymbol is missing a few (though perhaps not very common
> ones) ...

All the F8* codepoints are in the private use area. That means you
can?t rely on them existing in standard unicode fonts

You need to use correct Unicode values for things to work:
Ux239? for parenthesis, brackets

https://www.unicode.org/charts/PDF/U2300.pdf

> F8E6    BD      # VERTICAL ARROW EXTENDER       # arrowvertex (CUS)
> F8E7    BE      # HORIZONTAL ARROW EXTENDER     # arrowhorizex (CUS)

and 23AF/23D0 for arrow extensions (though arrow font support seems
messy, probably because it sees little use; it?s a pity R comes so late
to the party, those are just lines, it would have been trivial to get
them into DejaVu before the project gone dormant). GFS NeoHellenic
(Math block) seems complete but it?s not a common font family.

> F6DA    D2      # REGISTERED SIGN SERIF # registerserif (CUS)
> F6D9    D3      # COPYRIGHT SIGN SERIF  # copyrightserif (CUS)
> F6DB    D4      # TRADE MARK SIGN SERIF # trademarkserif (CUS)
> F8E8    E2      # REGISTERED SIGN SANS SERIF    # registersans (CUS)
> F8E9    E3      # COPYRIGHT SIGN SANS SERIF     # copyrightsans (CUS)
> F8EA    E4      # TRADE MARK SIGN SANS SERIF    # trademarksans (CUS)

Those are useless nowadays, just use normal
registered/copyright/trademark codepoints, and a font in the wished
style (serif sans serif, whatever looks nice to you)

Regards

-- 
Nicolas Mailhot


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Tue Mar 31 03:32:10 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 31 Mar 2020 14:32:10 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CALEXWq3qreKF8=Xw=8OWeADz-pvSQ7dZv2PYviBS2oiNo+0Hrg@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
 <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
 <CALEXWq3qreKF8=Xw=8OWeADz-pvSQ7dZv2PYviBS2oiNo+0Hrg@mail.gmail.com>
Message-ID: <ada685cf-3524-0a2f-9e5f-69a1295018fe@stat.auckland.ac.nz>



On 31/03/20 10:12 am, I?aki Ucar wrote:
> On Mon, 30 Mar 2020 at 22:41, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>
>> Hi
>>
>> On 30/03/20 10:43 pm, I?aki Ucar wrote:
>>> On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>>
>>>> Hi
>>>>
>>>> I have created an R branch that contains a potential fix ...
>>>>
>>>> https://svn.r-project.org/R/branches/R-symfam/
>>>>
>>>> This allows, for example, ...
>>>>
>>>> cairo_pdf(symbolfamily="OpenSymbol")
>>>>
>>>> ... to specify that the OpenSymbol family should be used as the "symbol"
>>>> font (e.g., for "plotmath") in R.
>>>
>>> Will this be a default on Linux? Or are you planning any mechanism
>>> (env variable, option...) to make it the default? Because, otherwise,
>>> as pango is updated across distributions, R graphics will be "broken"
>>> by default unless the user explicitly calls the graphics device in
>>> that way to set that option, which I would say is uncommon.
>>
>> Good question.  Currently, for x11() (and png() etc) the default is
>> taken from X11.options().  So it is possible to set this default for a
>> session, or even for an installation via one of the ?Startup mechanisms
>> (e.g., an R_HOME/etc/Rprofile.site file).
>>
>> For svg(), cairo_pdf(), and cairo_ps(), the default is hard-coded in the
>> function arguments, but I *think* they are used less as default graphics
>> devices.
>>
>> Another option would be to try to detect Fedora and set the default
>> X11.options() differently there.  Two problems:  I am not sure there is
>> a reliable R code chunk for detecting Fedora (sessionInfo()$running?)
>> let alone Fedora >= 30;   what to set the default to?  (just has to be a
>> font with a good Unicode coverage that is pretty much guaranteed to be
>> in a default Fedora install).
> 
> As per Nicolas' comment (I failed to include him in CC in my last
> email, and he's not in this list, sorry for that) any font installed
> by default would have good symbol coverage, so there's really no need
> to set a different font for symbols. According again to Nicolas (he's
> one of the font experts in Fedora), the "sans-serif" or "monospace"
> fontconfig defaults would work out of the box, and if a symbol is not
> available, fontconfig should fallback gracefully to another font.
>
> So maybe instead of a new "symbolfamily" argument, maybe it's better
> to just use the "family" for all characters, including symbols, on
> Linux, and fontconfig should take care of everything (if I understood
> correctly your explanation, Nicolas; please correct me if I'm wrong).

I think R will retain the idea of a separate symbol font in at least the 
short term because of backward compatibility and cross-platform support 
and support for a range of graphics devices.  So this fix is just for 
cairo-based devices on Linux at most (probably only Fedora).

So this becomes just a decision about user interface and default settings.

I did consider the option of allowing the existing "family" parameter to 
be length-two (with the second one being an optional symbol font 
specification), but because of the overlaps of X11/cairo and different 
cairo-based device interfaces, this became awkward.  Hence the separate 
"symbolfamily" interface.  And in any case, this still means a separate 
"symbol" font specification (for the reasons above).

Regarding changing to a default symbolfamily=family on Linux generally 
(rather than just on Fedora), I have at least one counter-example (my 
Ubuntu 18.04) that shows that this would degrade output significantly. 
For one, the symbols are a LOT uglier, plus there are some incorrect 
glyphs.  So I think we have to stay with treating Fedora as a special 
case for now.

Thanks for your point about just using symbolfamily=family as the Fedora 
default.  That seems reasonable (and definitely better than it just 
being completely broken!).

That does still leave the problem of how to set the default value for 
"symbolfamily" JUST on Fedora.   I am not convinced we can use R code to 
detect Fedora >= 30 reliably (but happy to learn otherwise).  Is it a 
possibility for the Fedora distribution to include a .Rprofile.site file 
that sets the X11.options() ?

Paul
-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Tue Mar 31 04:07:37 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 31 Mar 2020 15:07:37 +1300
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <c33d5034208f7ae4ccdc20f17b131d6aa13dc533.camel@laposte.net>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>
 <29c7f633-5c05-5db1-85d3-b0c6ae285af5@stat.auckland.ac.nz>
 <c33d5034208f7ae4ccdc20f17b131d6aa13dc533.camel@laposte.net>
Message-ID: <25844ba2-ffd5-2a4e-f980-f19e8c63d7a6@stat.auckland.ac.nz>



On 31/03/20 11:50 am, Nicolas Mailhot wrote:
> Le mardi 31 mars 2020 ? 10:14 +1300, Paul Murrell a ?crit :
>> Hi
>>
>> On 30/03/20 11:12 pm, Nicolas Mailhot wrote:
>>> Le lundi 30 mars 2020 ? 15:24 +1300, Paul Murrell a ?crit :
>>>> Hi
>>>>
>>>> I have created an R branch that contains a potential fix ...
>>>>
>>>> https://svn.r-project.org/R/branches/R-symfam/
>>>>
>>>> This allows, for example, ...
>>>>
>>>> cairo_pdf(symbolfamily="OpenSymbol")
>>>>
>>>> ... to specify that the OpenSymbol family should be used as the
>>>> "symbol" font (e.g., for "plotmath") in R.
>>>
>>> Thanks for looking at it!
>>>
>>> But, really, there is no such thing as a Symbol font on Linux
>>> anymore.
>>> Symbol is pre-unicode thinking. Most modern general-purpose unicode
>>> fonts will include every codepoint Symbol ever shipped, and
>>> fontconfig
>>> will fallback gracefully when that?s not the case (unless your
>>> fontconfig integration is broken).
>>
>> Yep, the "symbol" font is an (outdated) R "plotmath" concept, but
>> one
>> that would take a fair bit of surgery to remove.  R plotmath
>> converts
>> certain R expressions (in certain contexts) to code points in the
>> Adobe
>> Symbol Encoding (ASM), but for cairo-based devices, those are
>> converted
>> to UTF8 code points.
>>
>>> Just use the sans-serif or monospace fontconfig defaults. You don?t
>>> need Symbol, or OpenSymbol, or any special font setup.
>>
>> Agreed.  I got reasonable coverage from DejaVu Sans and FreeSerif.
>> There are still a number of ASM code points that are not covered
>> though,
>> for example, ...
>>
>> F8EB	E6	# LEFT PAREN TOP	# parenlefttp (CUS)
>> F8EC	E7	# LEFT PAREN EXTENDER	# parenleftex (CUS)
>> F8ED	E8	# LEFT PAREN BOTTOM	# parenleftbt (CUS)
>>
>> Even OpenSymbol is missing a few (though perhaps not very common
>> ones) ...
> 
> All the F8* codepoints are in the private use area. That means you
> can?t rely on them existing in standard unicode fonts
> 
> You need to use correct Unicode values for things to work:
> Ux239? for parenthesis, brackets
> 
> https://www.unicode.org/charts/PDF/U2300.pdf
> 
>> F8E6    BD      # VERTICAL ARROW EXTENDER       # arrowvertex (CUS)
>> F8E7    BE      # HORIZONTAL ARROW EXTENDER     # arrowhorizex (CUS)
> 
> and 23AF/23D0 for arrow extensions (though arrow font support seems
> messy, probably because it sees little use; it?s a pity R comes so late
> to the party, those are just lines, it would have been trivial to get
> them into DejaVu before the project gone dormant). GFS NeoHellenic
> (Math block) seems complete but it?s not a common font family.
> 
>> F6DA    D2      # REGISTERED SIGN SERIF # registerserif (CUS)
>> F6D9    D3      # COPYRIGHT SIGN SERIF  # copyrightserif (CUS)
>> F6DB    D4      # TRADE MARK SIGN SERIF # trademarkserif (CUS)
>> F8E8    E2      # REGISTERED SIGN SANS SERIF    # registersans (CUS)
>> F8E9    E3      # COPYRIGHT SIGN SANS SERIF     # copyrightsans (CUS)
>> F8EA    E4      # TRADE MARK SIGN SANS SERIF    # trademarksans (CUS)
> 
> Those are useless nowadays, just use normal
> registered/copyright/trademark codepoints, and a font in the wished
> style (serif sans serif, whatever looks nice to you)
> 
> Regards

Thanks, that's useful.  For my own memory, this is the parenthesis block 
that might be useful ...

U+239b Sm LEFT PARENTHESIS UPPER HOOK ?
U+239c Sm LEFT PARENTHESIS EXTENSION ?
U+239d Sm LEFT PARENTHESIS LOWER HOOK ?
U+239e Sm RIGHT PARENTHESIS UPPER HOOK ?
U+239f Sm RIGHT PARENTHESIS EXTENSION ?
U+23a0 Sm RIGHT PARENTHESIS LOWER HOOK ?
U+23a1 Sm LEFT SQUARE BRACKET UPPER CORNER ?
U+23a2 Sm LEFT SQUARE BRACKET EXTENSION ?
U+23a3 Sm LEFT SQUARE BRACKET LOWER CORNER ?
U+23a4 Sm RIGHT SQUARE BRACKET UPPER CORNER ?
U+23a5 Sm RIGHT SQUARE BRACKET EXTENSION ?
U+23a6 Sm RIGHT SQUARE BRACKET LOWER CORNER ?
U+23a7 Sm LEFT CURLY BRACKET UPPER HOOK ?

However, the situation is still not completely straightforward.  The 
style of the symbols is also an issue and the DejaVu symbols are not as 
elegant as, say, the OpenSymbol symbols.  What makes things tricky is 
that, AFAICS, DejaVu has (TTX Unicode cmap output) ...

<map code="0x239b" name="uni239B"/><!-- LEFT PARENTHESIS UPPER HOOK -->

... while OpenSymbol has ...

<map code="0xf8eb" name="parenlefttp"/><!-- ???? -->

... but neither has the other.  So we could not simply switch to 
standard Unicode code points because, while that would work with the 
"ugly" DejaVu glyphs, that would mean that we could not access the 
"pretty" OpenSymbol glyphs.

Paul
-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From n|co|@@@m@||hot @end|ng |rom |@po@te@net  Tue Mar 31 09:04:00 2020
From: n|co|@@@m@||hot @end|ng |rom |@po@te@net (Nicolas Mailhot)
Date: Tue, 31 Mar 2020 09:04:00 +0200
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <25844ba2-ffd5-2a4e-f980-f19e8c63d7a6@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>
 <29c7f633-5c05-5db1-85d3-b0c6ae285af5@stat.auckland.ac.nz>
 <c33d5034208f7ae4ccdc20f17b131d6aa13dc533.camel@laposte.net>
 <25844ba2-ffd5-2a4e-f980-f19e8c63d7a6@stat.auckland.ac.nz>
Message-ID: <ce5f830ec5c0f689ccbf057103794d5176360131.camel@laposte.net>

Le mardi 31 mars 2020 ? 15:07 +1300, Paul Murrell a ?crit :

> 

> Thanks, that's useful.  For my own memory, this is the parenthesis
> block 
> that might be useful ...
> 
> U+239b Sm LEFT PARENTHESIS UPPER HOOK ?
> U+239c Sm LEFT PARENTHESIS EXTENSION ?
> U+239d Sm LEFT PARENTHESIS LOWER HOOK ?
> U+239e Sm RIGHT PARENTHESIS UPPER HOOK ?
> U+239f Sm RIGHT PARENTHESIS EXTENSION ?
> U+23a0 Sm RIGHT PARENTHESIS LOWER HOOK ?
> U+23a1 Sm LEFT SQUARE BRACKET UPPER CORNER ?
> U+23a2 Sm LEFT SQUARE BRACKET EXTENSION ?
> U+23a3 Sm LEFT SQUARE BRACKET LOWER CORNER ?
> U+23a4 Sm RIGHT SQUARE BRACKET UPPER CORNER ?
> U+23a5 Sm RIGHT SQUARE BRACKET EXTENSION ?
> U+23a6 Sm RIGHT SQUARE BRACKET LOWER CORNER ?
> U+23a7 Sm LEFT CURLY BRACKET UPPER HOOK ?
> 
> However, the situation is still not completely straightforward.  The 
> style of the symbols is also an issue and the DejaVu symbols are not
> as elegant as, say, the OpenSymbol symbols.  What makes things tricky
> is that, AFAICS, DejaVu has (TTX Unicode cmap output) ...

Ah, the endless design discussions? Myself I prefer a consistent design
like Dejavu, over cobbling symbols of different designs, because they
used to be in separate fonts. Anyway:

> <map code="0x239b" name="uni239B"/><!-- LEFT PARENTHESIS UPPER HOOK
> -->
> 
> ... while OpenSymbol has ...
> 
> <map code="0xf8eb" name="parenlefttp"/><!-- ???? -->
> 
> ... but neither has the other.  

OpenSymbol is incorrect (it suffers from the same pre-unicode bias as
R). However, it is, to my knowledge, actively maintained. You can ask
its upstream (LibreOffice) for Unicode conformance fixes if you find
problems. Especially when it?s just fixing the map of an existing
glyph, that should not be hard for them to fix. Anything PUA-related
won?t interoperate well in an unicode world.

(you can ask DejaVu too, maybe a request from a project like R will
wake up its maintainers. But, that?s a long shot. DejaVu suffers from
an almost done state without enough remaining work to interest
designers).

Regards,

-- 
Nicolas Mailhot


From |uc@r @end|ng |rom |edor@project@org  Tue Mar 31 09:41:06 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 31 Mar 2020 09:41:06 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <ada685cf-3524-0a2f-9e5f-69a1295018fe@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
 <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
 <CALEXWq3qreKF8=Xw=8OWeADz-pvSQ7dZv2PYviBS2oiNo+0Hrg@mail.gmail.com>
 <ada685cf-3524-0a2f-9e5f-69a1295018fe@stat.auckland.ac.nz>
Message-ID: <CALEXWq3AoxEh_HNwP7brhc=Jzvt_1Pt_SUFkprDg9R9jQ3Q9dQ@mail.gmail.com>

On Tue, 31 Mar 2020 at 03:32, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>
> I think R will retain the idea of a separate symbol font in at least the
> short term because of backward compatibility and cross-platform support
> and support for a range of graphics devices.  So this fix is just for
> cairo-based devices on Linux at most (probably only Fedora).
>
> So this becomes just a decision about user interface and default settings.
>
> I did consider the option of allowing the existing "family" parameter to
> be length-two (with the second one being an optional symbol font
> specification), but because of the overlaps of X11/cairo and different
> cairo-based device interfaces, this became awkward.  Hence the separate
> "symbolfamily" interface.  And in any case, this still means a separate
> "symbol" font specification (for the reasons above).
>
> Regarding changing to a default symbolfamily=family on Linux generally
> (rather than just on Fedora), I have at least one counter-example (my
> Ubuntu 18.04) that shows that this would degrade output significantly.
> For one, the symbols are a LOT uglier, plus there are some incorrect
> glyphs.  So I think we have to stay with treating Fedora as a special
> case for now.

You can try Noto Sans Symbols (google-noto-sans-symbols-fonts) or
Symbola (gdouros-symbola-fonts). We could make the R package depend on
any of these fonts included in Fedora.

> Thanks for your point about just using symbolfamily=family as the Fedora
> default.  That seems reasonable (and definitely better than it just
> being completely broken!).
>
> That does still leave the problem of how to set the default value for
> "symbolfamily" JUST on Fedora.   I am not convinced we can use R code to
> detect Fedora >= 30 reliably (but happy to learn otherwise).  Is it a
> possibility for the Fedora distribution to include a .Rprofile.site file
> that sets the X11.options() ?

1. I don't think you need to detect you are in Fedora at all, just to
detect the version of pango, and apply this configuration if it's >=
1.44 (e.g., by executing pango-view --version; or better yet, at
building time https://developer.gnome.org/pango/stable/pango-Version-Checking.html).

2. Yes, we can include any custom configuration files or patches. In
fact we will need to patch R 3.6.3 for Fedora 31 at least, because
Fedora 32 is about to be released, and thus R 4.0.0 won't be included
in Fedora 31. The problem with the .Rprofile.site is that any
user-specific .Rprofile will prevent the default from being loaded,
right? And I'd say ~/.Rprofile is pretty common out there, and even
project-specific .Rprofile.

-- 
I?aki ?car


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Mar 31 21:24:46 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 31 Mar 2020 21:24:46 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
 <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
Message-ID: <24195.39166.404960.427714@stat.math.ethz.ch>

>>>>> Paul Murrell 
>>>>>     on Tue, 31 Mar 2020 09:41:30 +1300 writes:

    > Hi
    > On 30/03/20 10:43 pm, I?aki Ucar wrote:
    >> On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
    >>> 
    >>> Hi
    >>> 
    >>> I have created an R branch that contains a potential fix ...
    >>> 
    >>> https://svn.r-project.org/R/branches/R-symfam/
    >>> 
    >>> This allows, for example, ...
    >>> 
    >>> cairo_pdf(symbolfamily="OpenSymbol")
    >>> 
    >>> ... to specify that the OpenSymbol family should be used as the "symbol"
    >>> font (e.g., for "plotmath") in R.
    >> 
    >> Will this be a default on Linux? Or are you planning any mechanism
    >> (env variable, option...) to make it the default? Because, otherwise,
    >> as pango is updated across distributions, R graphics will be "broken"
    >> by default unless the user explicitly calls the graphics device in
    >> that way to set that option, which I would say is uncommon.

    > Good question.  Currently, for x11() (and png() etc) the default is 
    > taken from X11.options().  So it is possible to set this default for a 
    > session, or even for an installation via one of the ?Startup mechanisms 
    > (e.g., an R_HOME/etc/Rprofile.site file).

    > For svg(), cairo_pdf(), and cairo_ps(), the default is hard-coded in the 
    > function arguments, but I *think* they are used less as default graphics 
    > devices.

    > Another option would be to try to detect Fedora and set the default 
    > X11.options() differently there.  Two problems:  I am not sure there is 
    > a reliable R code chunk for detecting Fedora (sessionInfo()$running?) 
    > let alone Fedora >= 30;   

Yes,  sessionInfo()$running  is sufficient for both  *and*
there's a faster way in latest R versions, as I had the same
need and found sessionInfo() should be modularized here, and so
we have the  'osVersion'  variable since  R 3.6.0

----------------------------------------
> osVersion
[1] "Fedora 30 (Thirty)"
> find("osVersion")
[1] "package:utils"
> 
----------------------------------------

{it is put into utils at package load time}

    > what to set the default to?  (just has to be a 
    > font with a good Unicode coverage that is pretty much guaranteed to be 
    > in a default Fedora install).

    > Paul

    >> I?aki
    >> 
    >>> This is just a separate branch for now because, while I have tested it
    >>> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
    >>> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at
    >>> this stage of the release process for R 4.0.0.
    >>> 
    >>> The attached file contains at least an outline of steps required to do a
    >>> minimal test if anyone wants to try the fix on Linux.
    >>> 
    >>> cc'ing Simon and Jeroen in case they are able to help with checking that
    >>> this builds and works on Mac and/or Windows.
    >>> 
    >>> NOTEs:
    >>> - 'symbolfamily' can only be specified when a graphics device is opened,
    >>> and it is then fixed for that device.
    >>> - on Windows, for cairo-based devices, the "symbol" font is still
    >>> hard-coded as "Standard Symbols L"
    >>> 
    >>> 
    >>> Paul
    >>> 
    >>> On 30/03/20 8:15 am, Paul Murrell wrote:
    >>>> Hi
    >>>> 
    >>>> Thanks for your input on this I?aki and Nicolas.
    >>>> 
    >>>> I am starting testing an R fix for this problem today.
    >>>> 
    >>>> As suggested, the plan is to allow the R user to specify a font family
    >>>> other than "symbol" for plotmath output (or, more generally, in R
    >>>> parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
    >>>> 
    >>>> Paul
    >>>> 
    >>>> 
    >>>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
    >>>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
    >>>>> <nicolas.mailhot at laposte.net> wrote:
    >>>>>> 
>>>>> <snip>
    >>>>>> 
>>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
>>>>> family name in its default conf. Linux systems are UTF-8 by default for
>>>>> ~20 years now, they don?t need the forcing of magic font families to
>>>>> handle symbols not present in the 8-bit legacy Windows encodings.
    >>>>>> 
>>>>> The actual effect of this conf is not the selection of font files with
>>>>> special and unusual symbols. It is to priorize fonts that match the
>>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>>>>> systems, because no one has needed to bother with them since Linux
>>>>> switched to UTF-8 last millenium.
    >>>>>> 
>>>>> Just stop using ?Symbol? in R and things will work a lot better.
>>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>>>>> *cares* about this legacy Windows-specific stuff.
    >>>>> 
    >>>>> So, in the light of Nicolas' input (thanks!), I think that font
    >>>>> selection should be fixed upstream in R. I'd be happy to put all this
    >>>>> together in R's bugzilla, but I don't have an account. Could someone
    >>>>> please invite me?
    >>>>> 
    >>>>> I?aki
    >>>>> 
    >>>>> ______________________________________________
    >>>>> R-devel at r-project.org mailing list
    >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>>>> 
    >>> 
    >>> --
    >>> Dr Paul Murrell
    >>> Department of Statistics
    >>> The University of Auckland
    >>> Private Bag 92019
    >>> Auckland
    >>> New Zealand
    >>> 64 9 3737599 x85392
    >>> paul at stat.auckland.ac.nz
    >>> http://www.stat.auckland.ac.nz/~paul/
    >> 
    >> 
    >> 

    > -- 
    > Dr Paul Murrell
    > Department of Statistics
    > The University of Auckland
    > Private Bag 92019
    > Auckland
    > New Zealand
    > 64 9 3737599 x85392
    > paul at stat.auckland.ac.nz
    > http://www.stat.auckland.ac.nz/~paul/

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Tue Mar 31 21:35:10 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 31 Mar 2020 12:35:10 -0700
Subject: [Rd] Any help needed in prep of 4.0.0?
Message-ID: <CAD4oTHGkGp+HxHFWiJ6BFEmr6ZjkUaDw=+ZZTyW=kasP+Mi=Zw@mail.gmail.com>

Hi all,

Are there any small patches or further testing that any R-core
members would like help with in the preparation to 4.0.0?

Sadly @Martin Maechler <maechler at stat.math.ethz.ch> I don't have the
numerical optimization chops to be any help with qbeta, sorry.

But if there's anything else, small private wishlist items or things that
could use another ste of eyes or some testing that you have locally or aa
apatch you just haven't had time to write, please let me know on list or
off. I'm happy to help.

I will also, of course, be going through bugzilla to see what I can help
with there.

Best,
~G

	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Tue Mar 31 22:56:29 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 1 Apr 2020 09:56:29 +1300
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <24195.39166.404960.427714@stat.math.ethz.ch>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <CALEXWq24nWEDmi37rWn4vcGNtbM9x8xoto62f0VBxwNcysuyiA@mail.gmail.com>
 <67d17230-75dc-c4f2-dbc4-783a76abc567@stat.auckland.ac.nz>
 <24195.39166.404960.427714@stat.math.ethz.ch>
Message-ID: <543bdd4f-9eb1-54fe-f6fb-0496128d664d@stat.auckland.ac.nz>



On 1/04/20 8:24 am, Martin Maechler wrote:
>>>>>> Paul Murrell
>>>>>>      on Tue, 31 Mar 2020 09:41:30 +1300 writes:
> 
>      > Hi
>      > On 30/03/20 10:43 pm, I?aki Ucar wrote:
>      >> On Mon, 30 Mar 2020 at 04:24, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>      >>>
>      >>> Hi
>      >>>
>      >>> I have created an R branch that contains a potential fix ...
>      >>>
>      >>> https://svn.r-project.org/R/branches/R-symfam/
>      >>>
>      >>> This allows, for example, ...
>      >>>
>      >>> cairo_pdf(symbolfamily="OpenSymbol")
>      >>>
>      >>> ... to specify that the OpenSymbol family should be used as the "symbol"
>      >>> font (e.g., for "plotmath") in R.
>      >>
>      >> Will this be a default on Linux? Or are you planning any mechanism
>      >> (env variable, option...) to make it the default? Because, otherwise,
>      >> as pango is updated across distributions, R graphics will be "broken"
>      >> by default unless the user explicitly calls the graphics device in
>      >> that way to set that option, which I would say is uncommon.
> 
>      > Good question.  Currently, for x11() (and png() etc) the default is
>      > taken from X11.options().  So it is possible to set this default for a
>      > session, or even for an installation via one of the ?Startup mechanisms
>      > (e.g., an R_HOME/etc/Rprofile.site file).
> 
>      > For svg(), cairo_pdf(), and cairo_ps(), the default is hard-coded in the
>      > function arguments, but I *think* they are used less as default graphics
>      > devices.
> 
>      > Another option would be to try to detect Fedora and set the default
>      > X11.options() differently there.  Two problems:  I am not sure there is
>      > a reliable R code chunk for detecting Fedora (sessionInfo()$running?)
>      > let alone Fedora >= 30;
> 
> Yes,  sessionInfo()$running  is sufficient for both  *and*
> there's a faster way in latest R versions, as I had the same
> need and found sessionInfo() should be modularized here, and so
> we have the  'osVersion'  variable since  R 3.6.0
> 
> ----------------------------------------
>> osVersion
> [1] "Fedora 30 (Thirty)"
>> find("osVersion")
> [1] "package:utils"
>>
> ----------------------------------------
> 
> {it is put into utils at package load time}

Thanks Martin!

But I like I?aki's suggestion (check Pango version) even more;  that 
looks like it will be precise (compared to deparsing 'osVersion'), plus 
it will nicely transition other Linux distros when they presumably 
transition to the newer Pango.

Paul

>      > what to set the default to?  (just has to be a
>      > font with a good Unicode coverage that is pretty much guaranteed to be
>      > in a default Fedora install).
> 
>      > Paul
> 
>      >> I?aki
>      >>
>      >>> This is just a separate branch for now because, while I have tested it
>      >>> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
>      >>> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at
>      >>> this stage of the release process for R 4.0.0.
>      >>>
>      >>> The attached file contains at least an outline of steps required to do a
>      >>> minimal test if anyone wants to try the fix on Linux.
>      >>>
>      >>> cc'ing Simon and Jeroen in case they are able to help with checking that
>      >>> this builds and works on Mac and/or Windows.
>      >>>
>      >>> NOTEs:
>      >>> - 'symbolfamily' can only be specified when a graphics device is opened,
>      >>> and it is then fixed for that device.
>      >>> - on Windows, for cairo-based devices, the "symbol" font is still
>      >>> hard-coded as "Standard Symbols L"
>      >>>
>      >>>
>      >>> Paul
>      >>>
>      >>> On 30/03/20 8:15 am, Paul Murrell wrote:
>      >>>> Hi
>      >>>>
>      >>>> Thanks for your input on this I?aki and Nicolas.
>      >>>>
>      >>>> I am starting testing an R fix for this problem today.
>      >>>>
>      >>>> As suggested, the plan is to allow the R user to specify a font family
>      >>>> other than "symbol" for plotmath output (or, more generally, in R
>      >>>> parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
>      >>>>
>      >>>> Paul
>      >>>>
>      >>>>
>      >>>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>      >>>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>      >>>>> <nicolas.mailhot at laposte.net> wrote:
>      >>>>>>
>>>>>> <snip>
>      >>>>>>
>>>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
>>>>>> family name in its default conf. Linux systems are UTF-8 by default for
>>>>>> ~20 years now, they don?t need the forcing of magic font families to
>>>>>> handle symbols not present in the 8-bit legacy Windows encodings.
>      >>>>>>
>>>>>> The actual effect of this conf is not the selection of font files with
>>>>>> special and unusual symbols. It is to priorize fonts that match the
>>>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>>>>>> systems, because no one has needed to bother with them since Linux
>>>>>> switched to UTF-8 last millenium.
>      >>>>>>
>>>>>> Just stop using ?Symbol? in R and things will work a lot better.
>>>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>>>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>>>>>> *cares* about this legacy Windows-specific stuff.
>      >>>>>
>      >>>>> So, in the light of Nicolas' input (thanks!), I think that font
>      >>>>> selection should be fixed upstream in R. I'd be happy to put all this
>      >>>>> together in R's bugzilla, but I don't have an account. Could someone
>      >>>>> please invite me?
>      >>>>>
>      >>>>> I?aki
>      >>>>>
>      >>>>> ______________________________________________
>      >>>>> R-devel at r-project.org mailing list
>      >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >>>>>
>      >>>
>      >>> --
>      >>> Dr Paul Murrell
>      >>> Department of Statistics
>      >>> The University of Auckland
>      >>> Private Bag 92019
>      >>> Auckland
>      >>> New Zealand
>      >>> 64 9 3737599 x85392
>      >>> paul at stat.auckland.ac.nz
>      >>> http://www.stat.auckland.ac.nz/~paul/
>      >>
>      >>
>      >>
> 
>      > --
>      > Dr Paul Murrell
>      > Department of Statistics
>      > The University of Auckland
>      > Private Bag 92019
>      > Auckland
>      > New Zealand
>      > 64 9 3737599 x85392
>      > paul at stat.auckland.ac.nz
>      > http://www.stat.auckland.ac.nz/~paul/
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


