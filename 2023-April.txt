From dj@@mper| @end|ng |rom gm@||@com  Sun Apr  2 07:18:42 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Sun, 2 Apr 2023 01:18:42 -0400
Subject: [Rd] setulb() from lbfgsb.c not exported
Message-ID: <CADUbQ5hECxnNQiNutZ+RKikh2aHMfh1_CRmH=XpNT1ipqCUG4g@mail.gmail.com>

Hello,

It appears that the file ./appl/lbfgsb.c defines setulb() as a static
function, and it is included in optim.c, so setulb() is not exported
by the R library. I have some sofware that uses setulb() directly,
and I would prefer to avoid having to recompile this sofware to
export that function.

Is there any way to get access to setulb(), or must I use
the lower and upper params in optimix?

Thanks,
Dominick

	[[alternative HTML version deleted]]


From k@||now@k|t @end|ng |rom gm@||@com  Sat Apr  1 16:02:37 2023
From: k@||now@k|t @end|ng |rom gm@||@com (Tomasz Kalinowski)
Date: Sat, 1 Apr 2023 10:02:37 -0400
Subject: [Rd] Autocompletion for the new S3 generic @ method?
In-Reply-To: <AEF74F63-9E94-4130-B4B4-9D2CD0C3D468@gmail.com>
References: <AEF74F63-9E94-4130-B4B4-9D2CD0C3D468@gmail.com>
Message-ID: <1F47AC51-9E95-495D-9D54-49057289ACC4@gmail.com>

I agree, this is a good idea and would be very helpful in interactive contexts. 

I have a draft patch implementing this feature here: https://github.com/r-devel/r-svn/pull/122
(Append  ?.patch? to the URL to get a raw patch.)

Regards,
Tomasz

> On Mar 31, 2023, at 2:11 PM, Karolis K <karolis.koncevicius at gmail.com> wrote:
> 
> Hello,
> 
> In the current R-devel @ is S3 generic, so we can do things like - for example - use it to extract matrix rows by name:
> 
>    .S3method("@", "mm", function(object, name) object[name,])
>    m <- structure(matrix(rnorm(20), ncol=2), dimnames=list(paste0("row", 1:10), paste("col", 1:2)), class="mm")
> 
>    m at row1
> 
> However, seems like currently it does not support autocompletion.
> 
> Wouldn?t it make sense to add a method like .EtaNames() which would provide tab autocompletions for x@<tab> in the same way current .DollarNames() does for x$<tab>?
> 
> Regards,
> Karolis K.
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Mon Apr  3 00:50:39 2023
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 2 Apr 2023 15:50:39 -0700
Subject: [Rd] Autocompletion for the new S3 generic @ method?
In-Reply-To: <1F47AC51-9E95-495D-9D54-49057289ACC4@gmail.com>
References: <AEF74F63-9E94-4130-B4B4-9D2CD0C3D468@gmail.com>
 <1F47AC51-9E95-495D-9D54-49057289ACC4@gmail.com>
Message-ID: <CAD4oTHGtGh8xPv8YrHg-jowgqSjVwNYrd2yVe5F7HndgEgSJYw@mail.gmail.com>

Hi Tomasz,

I haven't had a chance to look at your patch yet (also I can't accept it as
I'm not on R-core), but patches for consideration should be submitted to
bugzilla (https://bugs.r-project.org), not the unofficial github mirror of
the the SVN repo.

Best,
~G

On Sun, Apr 2, 2023 at 6:09?AM Tomasz Kalinowski <kalinowskit at gmail.com>
wrote:

> I agree, this is a good idea and would be very helpful in interactive
> contexts.
>
> I have a draft patch implementing this feature here:
> https://github.com/r-devel/r-svn/pull/122
> (Append  ?.patch? to the URL to get a raw patch.)
>
> Regards,
> Tomasz
>
> > On Mar 31, 2023, at 2:11 PM, Karolis K <karolis.koncevicius at gmail.com>
> wrote:
> >
> > Hello,
> >
> > In the current R-devel @ is S3 generic, so we can do things like - for
> example - use it to extract matrix rows by name:
> >
> >    .S3method("@", "mm", function(object, name) object[name,])
> >    m <- structure(matrix(rnorm(20), ncol=2), dimnames=list(paste0("row",
> 1:10), paste("col", 1:2)), class="mm")
> >
> >    m at row1
> >
> > However, seems like currently it does not support autocompletion.
> >
> > Wouldn?t it make sense to add a method like .EtaNames() which would
> provide tab autocompletions for x@<tab> in the same way current
> .DollarNames() does for x$<tab>?
> >
> > Regards,
> > Karolis K.
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Mon Apr  3 06:07:09 2023
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Mon, 3 Apr 2023 09:37:09 +0530
Subject: [Rd] Autocompletion for the new S3 generic @ method?
In-Reply-To: <1F47AC51-9E95-495D-9D54-49057289ACC4@gmail.com>
References: <AEF74F63-9E94-4130-B4B4-9D2CD0C3D468@gmail.com>
 <1F47AC51-9E95-495D-9D54-49057289ACC4@gmail.com>
Message-ID: <CADfFDC7k2pKxBtx6aLzL=VZa96jGtt8jvJ8dmOU=0YCZD9d97Q@mail.gmail.com>

Thanks, we are discussing the details, but we will definitely add
something along those lines before 4.3.0 is released.

Best,
-Deepayan

On Sun, Apr 2, 2023 at 6:39?PM Tomasz Kalinowski <kalinowskit at gmail.com> wrote:
>
> I agree, this is a good idea and would be very helpful in interactive contexts.
>
> I have a draft patch implementing this feature here: https://github.com/r-devel/r-svn/pull/122
> (Append  ?.patch? to the URL to get a raw patch.)
>
> Regards,
> Tomasz
>
> > On Mar 31, 2023, at 2:11 PM, Karolis K <karolis.koncevicius at gmail.com> wrote:
> >
> > Hello,
> >
> > In the current R-devel @ is S3 generic, so we can do things like - for example - use it to extract matrix rows by name:
> >
> >    .S3method("@", "mm", function(object, name) object[name,])
> >    m <- structure(matrix(rnorm(20), ncol=2), dimnames=list(paste0("row", 1:10), paste("col", 1:2)), class="mm")
> >
> >    m at row1
> >
> > However, seems like currently it does not support autocompletion.
> >
> > Wouldn?t it make sense to add a method like .EtaNames() which would provide tab autocompletions for x@<tab> in the same way current .DollarNames() does for x$<tab>?
> >
> > Regards,
> > Karolis K.
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @teuer @end|ng |rom h@u-hh@de  Mon Apr  3 15:07:08 2023
From: @teuer @end|ng |rom h@u-hh@de (Detlef Steuer)
Date: Mon, 3 Apr 2023 15:07:08 +0200
Subject: [Rd] Let R compile for libcurl8 ?
Message-ID: <20230403150708.6d753245@gaia.unibw-hamburg.de>

Hi!

The same Inar reported for rawhide
(https://stat.ethz.ch/pipermail/r-devel/2023-March/082482.html)
is true for SuSE's distros.

Right now R does not compile with libcurl8, but SuSE Tumbleweed/Factory 
switched to 8 a week ago.

Would be great, if the patch Inar provided could be applied to 
main.

Detlef

-- 
"Wozu leben wir, wenn nicht dazu, uns gegenseitig das Leben 
 einfacher zu machen. (George Eliot)" 

Dr. Detlef Steuer
Helmut-Schmidt-Universit?t
Fakult?t WiSo
Holstenhofweg 85
22043 Hamburg

Tel:  040/6541-2819
mail: steuer at hsu-hh.de


From ttm|gue|tt @end|ng |rom gm@||@com  Mon Apr  3 14:07:00 2023
From: ttm|gue|tt @end|ng |rom gm@||@com (Michael Milton)
Date: Mon, 3 Apr 2023 22:07:00 +1000
Subject: [Rd] Breaking Change in Rcomplex Layout?
Message-ID: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>

Hi all,

There seems to have been a breaking change in the R trunk caused by a fix
to bug 18430 <https://bugs.r-project.org/show_bug.cgi?id=18430> that
relates to the layout of the Rcomplex typedef. Previously it was a struct,
but now it's a union by default
<https://github.com/r-devel/r-svn/commit/862f9f816ff3ff3cb3f851603f19e99f60a98475#diff-e9b09a44d9dc69444eca2300325e790a0cc6d2c8c3960f47519c7f8ef896f9e4>,
which breaks downstream code that relied on this layout. I'm aware of
the R_LEGACY_RCOMPLEX variable, but I still wouldn't expect an unreported
breaking change especially if it's aimed at R 4.3 (although I'm not sure if
it is). I believe src/include/R_ext/Complex.h, which this patch affects, is
considered part of the public R ABI since it's included by R.h.

What should I, as a downstream package developer, do about this change?

Cheers.

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Apr  3 15:24:18 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 3 Apr 2023 08:24:18 -0500
Subject: [Rd] Let R compile for libcurl8 ?
In-Reply-To: <20230403150708.6d753245@gaia.unibw-hamburg.de>
References: <20230403150708.6d753245@gaia.unibw-hamburg.de>
Message-ID: <25642.54146.546165.832105@rob.eddelbuettel.com>


On 3 April 2023 at 15:07, Detlef Steuer wrote:
| The same Inar reported for rawhide
| (https://stat.ethz.ch/pipermail/r-devel/2023-March/082482.html)
| is true for SuSE's distros.
| 
| Right now R does not compile with libcurl8, but SuSE Tumbleweed/Factory 
| switched to 8 a week ago.
| 
| Would be great, if the patch Inar provided could be applied to 
| main.

+1

For completeness, and in case someone wants to test on a Debian system,
version 8.0.1 is in Debian experimental (likely for the dual reasons of a
release freeze and the presumably rather wide impact of a rebuild). 

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr  3 15:39:07 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 3 Apr 2023 15:39:07 +0200
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
Message-ID: <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>


On 4/3/23 14:07, Michael Milton wrote:
> Hi all,
>
> There seems to have been a breaking change in the R trunk caused by a fix
> to bug 18430 <https://bugs.r-project.org/show_bug.cgi?id=18430> that
> relates to the layout of the Rcomplex typedef. Previously it was a struct,
> but now it's a union by default
> <https://github.com/r-devel/r-svn/commit/862f9f816ff3ff3cb3f851603f19e99f60a98475#diff-e9b09a44d9dc69444eca2300325e790a0cc6d2c8c3960f47519c7f8ef896f9e4>,
> which breaks downstream code that relied on this layout. I'm aware of
> the R_LEGACY_RCOMPLEX variable, but I still wouldn't expect an unreported
> breaking change especially if it's aimed at R 4.3 (although I'm not sure if
> it is). I believe src/include/R_ext/Complex.h, which this patch affects, is
> considered part of the public R ABI since it's included by R.h.
>
> What should I, as a downstream package developer, do about this change?

Please report the actual problem you have ran into.

Thanks
Tomas

>
> Cheers.
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ttm|gue|tt @end|ng |rom gm@||@com  Mon Apr  3 15:50:03 2023
From: ttm|gue|tt @end|ng |rom gm@||@com (Michael Milton)
Date: Mon, 3 Apr 2023 23:50:03 +1000
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
Message-ID: <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>

Okay, but I'm afraid this will only mean something to Rust users. The
reason being that we encountered this issue in extendr: a Rust extension
library for R. The specific compiler errors we encounter happen because
bindgen (the Rust code generation library) read the changed R header files,
and generated a new type definition for Rcomplex. Then, our downstream code
that uses that bindgen-generated code caused rustc compiler errors such as:

error[E0560]: union `libR_sys::Rcomplex` has no field named `r`
  --> extendr-api\src\robj\into_robj.rs:93:20
   |
93 |         Rcomplex { r: 0., i: 0. }
   |                    ^ `libR_sys::Rcomplex` does not have this field
   |
   = note: available fields are: `__bindgen_anon_1`, `private_data_c`

and

error[E0609]: no field `i` on type `libR_sys::Rcomplex`
   --> extendr-api\src\scalar\rcplx_default.rs:105:35
    |
105 |         Rcplx(c64::new(val.r, val.i))
    |                                   ^ unknown field
    |
    = note: available fields are: `__bindgen_anon_1`, `private_data_c`
help: one of the expressions' fields has a field of the same name
    |
105 |         Rcplx(c64::new(val.r, val.__bindgen_anon_1.i))
    |                                   +++++++++++++++++

However, to put this into context, I would expect that C, C++ packages
would encounter a similar issue if they tried to access or modify specific
Rcomplex fields in the same way.

On Mon, Apr 3, 2023 at 11:39?PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 4/3/23 14:07, Michael Milton wrote:
> > Hi all,
> >
> > There seems to have been a breaking change in the R trunk caused by a fix
> > to bug 18430 <https://bugs.r-project.org/show_bug.cgi?id=18430> that
> > relates to the layout of the Rcomplex typedef. Previously it was a
> struct,
> > but now it's a union by default
> > <
> https://github.com/r-devel/r-svn/commit/862f9f816ff3ff3cb3f851603f19e99f60a98475#diff-e9b09a44d9dc69444eca2300325e790a0cc6d2c8c3960f47519c7f8ef896f9e4
> >,
> > which breaks downstream code that relied on this layout. I'm aware of
> > the R_LEGACY_RCOMPLEX variable, but I still wouldn't expect an unreported
> > breaking change especially if it's aimed at R 4.3 (although I'm not sure
> if
> > it is). I believe src/include/R_ext/Complex.h, which this patch affects,
> is
> > considered part of the public R ABI since it's included by R.h.
> >
> > What should I, as a downstream package developer, do about this change?
>
> Please report the actual problem you have ran into.
>
> Thanks
> Tomas
>
> >
> > Cheers.
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Apr  3 16:13:58 2023
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 3 Apr 2023 15:13:58 +0100
Subject: [Rd] Let R compile for libcurl8 ?
In-Reply-To: <20230403150708.6d753245@gaia.unibw-hamburg.de>
References: <20230403150708.6d753245@gaia.unibw-hamburg.de>
Message-ID: <094dbb74-9caf-c146-d13e-65add776cf21@stats.ox.ac.uk>

On 03/04/2023 14:07, Detlef Steuer wrote:
> Hi!
> 
> The same Inar reported for rawhide
> (https://stat.ethz.ch/pipermail/r-devel/2023-March/082482.html)
> is true for SuSE's distros.
> 
> Right now R does not compile with libcurl8, but SuSE Tumbleweed/Factory
> switched to 8 a week ago.
> 
> Would be great, if the patch Inar provided could be applied to
> main.
> 
> Detlef
> 

As in

CHANGES IN R 4.3.0:
...
     ? libcurl 8.x is now accepted by configure: despite a change in
       major version number it changes neither API nor ABI.

?

What version of R are you looking at?  (This has also been backported to 
R 4.2.3 patched although possibly untested there.)

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr  3 16:15:13 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 3 Apr 2023 16:15:13 +0200
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
 <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
Message-ID: <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>


On 4/3/23 15:50, Michael Milton wrote:
> Okay, but I'm afraid this will only mean something to Rust users. The 
> reason being that we encountered this issue in extendr: a Rust 
> extension library for R. The specific compiler errors we encounter 
> happen because bindgen (the Rust code generation library) read the 
> changed R header files, and generated a new type definition for 
> Rcomplex. Then, our downstream code that uses that bindgen-generated 
> code caused rustc compiler errors such as:
> |error[E0560]: union `libR_sys::Rcomplex` has no field named `r` --> 
> extendr-api\src\robj\into_robj.rs:93:20 | 93 | Rcomplex { r: 0., i: 0. 
> } | ^ `libR_sys::Rcomplex` does not have this field | = note: 
> available fields are: `__bindgen_anon_1`, `private_data_c`|
> and
> |error[E0609]: no field `i` on type `libR_sys::Rcomplex` --> 
> extendr-api\src\scalar\rcplx_default.rs:105:35 | 105 | 
> Rcplx(c64::new(val.r, val.i)) | ^ unknown field | = note: available 
> fields are: `__bindgen_anon_1`, `private_data_c` help: one of the 
> expressions' fields has a field of the same name | 105 | 
> Rcplx(c64::new(val.r, val.__bindgen_anon_1.i)) | +++++++++++++++++|
That seems like the generator does not support anonymous structures. 
Thanks for letting me know, but I am afraid it is not something that 
could be fixed on the R end.
> However, to put this into context, I would expect that C, C++ packages 
> would encounter a similar issue if they tried to access or modify 
> specific Rcomplex?fields in the same way.

No, you can access the fields as before in C (C11):

Rcomplex z;

z.r = 1; z.i = 2

this is what anonymous structures allow, this is why the structure is 
anonymous, not to break existing code.? The union there is to tell the 
compiler about the aliasing, to prevent it from misoptimizing the code. 
As far as I can tell this is valid C code, not a breaking change.

The only issues I know about so far are that you get a warning for 
initializations such as "z = {1, 2}", but still, they will be 
interpreted correctly by the compiler within the standard. However, "z = 
{ .r = 1, .i = 2}" worked before and works with the change.

The definition unfortunately is not valid C++, but works with C++ 
language extensions supported at least by GCC and clang, yet you may see 
warnings. R itself doesn't use C++, but some packages do.

Please note your subject is not quite right: the layout of Rcomplex did 
not change, at least not on systems supported by R. The layout is the 
same on systems which use self-alignment of structures.

Also please keep in mind R-devel is meant for unstable changes, it may 
not work, things may be reverted, it is partially used for testing. I've 
still tested this on all CRAN and Bioconductor packages before 
committing even to R-devel, but this is not always done and cannot be 
due to how much resources it takes. Obviously this will get a NEWS entry 
when/if it gets ported to 4.3.0 branch, in the form it would have at 
that point.

Best
Tomas


>
> On Mon, Apr 3, 2023 at 11:39?PM Tomas Kalibera 
> <tomas.kalibera at gmail.com> wrote:
>
>
>     On 4/3/23 14:07, Michael Milton wrote:
>     > Hi all,
>     >
>     > There seems to have been a breaking change in the R trunk caused
>     by a fix
>     > to bug 18430 <https://bugs.r-project.org/show_bug.cgi?id=18430> that
>     > relates to the layout of the Rcomplex typedef. Previously it was
>     a struct,
>     > but now it's a union by default
>     >
>     <https://github.com/r-devel/r-svn/commit/862f9f816ff3ff3cb3f851603f19e99f60a98475#diff-e9b09a44d9dc69444eca2300325e790a0cc6d2c8c3960f47519c7f8ef896f9e4>,
>     > which breaks downstream code that relied on this layout. I'm
>     aware of
>     > the R_LEGACY_RCOMPLEX variable, but I still wouldn't expect an
>     unreported
>     > breaking change especially if it's aimed at R 4.3 (although I'm
>     not sure if
>     > it is). I believe src/include/R_ext/Complex.h, which this patch
>     affects, is
>     > considered part of the public R ABI since it's included by R.h.
>     >
>     > What should I, as a downstream package developer, do about this
>     change?
>
>     Please report the actual problem you have ran into.
>
>     Thanks
>     Tomas
>
>     >
>     > Cheers.
>     >
>     >? ? ? ?[[alternative HTML version deleted]]
>     >
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
	[[alternative HTML version deleted]]


From @teuer @end|ng |rom h@u-hh@de  Mon Apr  3 16:24:31 2023
From: @teuer @end|ng |rom h@u-hh@de (Detlef Steuer)
Date: Mon, 3 Apr 2023 16:24:31 +0200
Subject: [Rd] Let R compile for libcurl8 ?
In-Reply-To: <094dbb74-9caf-c146-d13e-65add776cf21@stats.ox.ac.uk>
References: <20230403150708.6d753245@gaia.unibw-hamburg.de>
 <094dbb74-9caf-c146-d13e-65add776cf21@stats.ox.ac.uk>
Message-ID: <20230403162431.1bc23cb5@gaia.unibw-hamburg.de>

Am Mon, 3 Apr 2023 15:13:58 +0100
schrieb Prof Brian Ripley <ripley at stats.ox.ac.uk>:

> On 03/04/2023 14:07, Detlef Steuer wrote:
> > Hi!
> > 
> > The same Inar reported for rawhide
> > (https://stat.ethz.ch/pipermail/r-devel/2023-March/082482.html)
> > is true for SuSE's distros.
> > 
> > Right now R does not compile with libcurl8, but SuSE
> > Tumbleweed/Factory switched to 8 a week ago.
> > 
> > Would be great, if the patch Inar provided could be applied to
> > main.
> > 
> > Detlef
> >   
> 
> As in
> 
> CHANGES IN R 4.3.0:
> ...
>      ? libcurl 8.x is now accepted by configure: despite a change in
>        major version number it changes neither API nor ABI.
> 
> ?
> 
> What version of R are you looking at?  (This has also been backported
> to R 4.2.3 patched although possibly untested there.)
> 

I was looking on R-patched, with diff from this morning.

Still fails:
....
[  260s] checking for curl-config... /usr/bin/curl-config
[  260s] checking libcurl version ... 8.0.1
[  260s] checking for curl/curl.h... yes
[  260s] checking if libcurl is version 7 and >= 7.28.0... no
[  260s] configure: error: libcurl >= 7.28.0 library and headers are
required with support for https [  261s] error: Bad exit status from
/var/tmp/rpm-tmp.PUUqtM (%build) [  261s] 
[  261s] RPM build errors:
[  261s]     Bad exit status from /var/tmp/rpm-tmp.PUUqtM (%build)
[  261s] ### VM INTERACTION START ###
[  261s] [  234.216368][    T1] sysrq: Power Off
[  261s] [  234.218303][  T267] reboot: Power down
[  261s] ### VM INTERACTION END ###
[  261s] 
[  261s] cloud124 failed "build R-patched.spec" at Mon Apr  3 10:46:27
UTC 2023. [  261s] 

If it should build, I'll take a look, but because of that log it seemed
to me nothing had changed in the meantime.

Detlef

-- 
"Wozu leben wir, wenn nicht dazu, uns gegenseitig das Leben 
 einfacher zu machen. (George Eliot)" 

Dr. Detlef Steuer
Helmut-Schmidt-Universit?t
Fakult?t WiSo
Holstenhofweg 85
22043 Hamburg

Tel:  040/6541-2819
mail: steuer at hsu-hh.de


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Apr  3 16:46:52 2023
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 3 Apr 2023 15:46:52 +0100
Subject: [Rd] Let R compile for libcurl8 ?
In-Reply-To: <20230403162431.1bc23cb5@gaia.unibw-hamburg.de>
References: <20230403150708.6d753245@gaia.unibw-hamburg.de>
 <094dbb74-9caf-c146-d13e-65add776cf21@stats.ox.ac.uk>
 <20230403162431.1bc23cb5@gaia.unibw-hamburg.de>
Message-ID: <8647fbc6-9277-385f-9310-5c0f104901bc@stats.ox.ac.uk>

On 03/04/2023 15:24, Detlef Steuer wrote:
> Am Mon, 3 Apr 2023 15:13:58 +0100
> schrieb Prof Brian Ripley <ripley at stats.ox.ac.uk>:
> 
>> On 03/04/2023 14:07, Detlef Steuer wrote:
>>> Hi!
>>>
>>> The same Inar reported for rawhide
>>> (https://stat.ethz.ch/pipermail/r-devel/2023-March/082482.html)
>>> is true for SuSE's distros.
>>>
>>> Right now R does not compile with libcurl8, but SuSE
>>> Tumbleweed/Factory switched to 8 a week ago.
>>>
>>> Would be great, if the patch Inar provided could be applied to
>>> main.
>>>
>>> Detlef
>>>    
>>
>> As in
>>
>> CHANGES IN R 4.3.0:
>> ...
>>       ? libcurl 8.x is now accepted by configure: despite a change in
>>         major version number it changes neither API nor ABI.
>>
>> ?
>>
>> What version of R are you looking at?  (This has also been backported
>> to R 4.2.3 patched although possibly untested there.)
>>
> 
> I was looking on R-patched, with diff from this morning.
> 
> Still fails:
> ....
> [  260s] checking for curl-config... /usr/bin/curl-config
> [  260s] checking libcurl version ... 8.0.1
> [  260s] checking for curl/curl.h... yes
> [  260s] checking if libcurl is version 7 and >= 7.28.0... no
> [  260s] configure: error: libcurl >= 7.28.0 library and headers are
> required with support for https [  261s] error: Bad exit status from
> /var/tmp/rpm-tmp.PUUqtM (%build) [  261s]
> [  261s] RPM build errors:
> [  261s]     Bad exit status from /var/tmp/rpm-tmp.PUUqtM (%build)
> [  261s] ### VM INTERACTION START ###
> [  261s] [  234.216368][    T1] sysrq: Power Off
> [  261s] [  234.218303][  T267] reboot: Power down
> [  261s] ### VM INTERACTION END ###
> [  261s]
> [  261s] cloud124 failed "build R-patched.spec" at Mon Apr  3 10:46:27
> UTC 2023. [  261s]
> 
> If it should build, I'll take a look, but because of that log it seemed
> to me nothing had changed in the meantime.

Again, what exactly is 'R-patched'?  The latest daily tarball

https://stat.ethz.ch/R/daily/R-patched_2023-03-29.tar.bz2

just built for me with

checking for curl-config... /usr/local/bin/curl-config
checking libcurl version ... 8.0.1
checking for curl/curl.h... yes
checking if libcurl is >= 7.28.0... yes
checking if libcurl supports https... yes

and reports itself as

R version 4.2.3 Patched (2023-03-29 r84146) -- "Shortstop Beagle"

Although as I mentioned, I had not tested it against curl 8.0.1 and did 
not know if anyone else had.

See also https://bugs.r-project.org/show_bug.cgi?id=18497

The patch has been in R-4-2-branch since

r84053 2023-03-25 12:37:42 +0000 (Sat, 25 Mar 2023)

At this time of year one has to be very careful about 'R-patched' -- for 
example CRAN check results labelled 'r-patched' are at least mainly for 
4.3.0 alpha.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @teuer @end|ng |rom h@u-hh@de  Mon Apr  3 16:53:47 2023
From: @teuer @end|ng |rom h@u-hh@de (Detlef Steuer)
Date: Mon, 3 Apr 2023 16:53:47 +0200
Subject: [Rd] Let R compile for libcurl8 ?
In-Reply-To: <8647fbc6-9277-385f-9310-5c0f104901bc@stats.ox.ac.uk>
References: <20230403150708.6d753245@gaia.unibw-hamburg.de>
 <094dbb74-9caf-c146-d13e-65add776cf21@stats.ox.ac.uk>
 <20230403162431.1bc23cb5@gaia.unibw-hamburg.de>
 <8647fbc6-9277-385f-9310-5c0f104901bc@stats.ox.ac.uk>
Message-ID: <20230403165347.57e4ec41@gaia.unibw-hamburg.de>

Am Mon, 3 Apr 2023 15:46:52 +0100
schrieb Prof Brian Ripley <ripley at stats.ox.ac.uk>:

> Again, what exactly is 'R-patched'?

R-4.2.3 with R-release.diff from Martin Maechler's machine applied.

Downloaded via curl(!) and cron every morning :-)

I'll take a look, what went wrong.

Thank you
Detlef

-- 
"Wozu leben wir, wenn nicht dazu, uns gegenseitig das Leben 
 einfacher zu machen. (George Eliot)" 

Dr. Detlef Steuer
Helmut-Schmidt-Universit?t
Fakult?t WiSo
Holstenhofweg 85
22043 Hamburg

Tel:  040/6541-2819
mail: steuer at hsu-hh.de


From ttm|gue|tt @end|ng |rom gm@||@com  Tue Apr  4 04:27:58 2023
From: ttm|gue|tt @end|ng |rom gm@||@com (Michael Milton)
Date: Tue, 4 Apr 2023 12:27:58 +1000
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
 <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
 <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>
Message-ID: <CAPZyOo++tZ-ThaGq=Zj3HbiY-r3wH3x0jPOHKgWcJ9zU-FTYLA@mail.gmail.com>

Hi Tomas,

Thanks for this explanation. As you can probably tell I'm not much of a C
person, so I didn't realise this change would be invisible to C users. I
suppose R's stability contract only applies to C, and therefore changes
that break other languages such as Rust are out of scope. You are right
that this error is confused by bindgen's inability to handle anonymous
types, but even without that it would be a breaking change in Rust because
code that accesses r or c must now access the struct variant of the union
and then access the struct field. Also, this code has to now be in an
unsafe block because of the potential to read from the wrong variant
<https://doc.rust-lang.org/reference/items/unions.html#reading-and-writing-union-fields>.
I guess we will have to handle this using some kind of compile-time
abstraction that handles this type differently depending on the R version
being used.

Cheers

On Tue, Apr 4, 2023 at 12:15?AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 4/3/23 15:50, Michael Milton wrote:
>
> Okay, but I'm afraid this will only mean something to Rust users. The
> reason being that we encountered this issue in extendr: a Rust extension
> library for R. The specific compiler errors we encounter happen because
> bindgen (the Rust code generation library) read the changed R header files,
> and generated a new type definition for Rcomplex. Then, our downstream code
> that uses that bindgen-generated code caused rustc compiler errors such as:
>
> error[E0560]: union `libR_sys::Rcomplex` has no field named `r`
>   --> extendr-api\src\robj\into_robj.rs:93:20
>    |
> 93 |         Rcomplex { r: 0., i: 0. }
>    |                    ^ `libR_sys::Rcomplex` does not have this field
>    |
>    = note: available fields are: `__bindgen_anon_1`, `private_data_c`
>
> and
>
> error[E0609]: no field `i` on type `libR_sys::Rcomplex`
>    --> extendr-api\src\scalar\rcplx_default.rs:105:35
>     |
> 105 |         Rcplx(c64::new(val.r, val.i))
>     |                                   ^ unknown field
>     |
>     = note: available fields are: `__bindgen_anon_1`, `private_data_c`
> help: one of the expressions' fields has a field of the same name
>     |
> 105 |         Rcplx(c64::new(val.r, val.__bindgen_anon_1.i))
>     |                                   +++++++++++++++++
>
> That seems like the generator does not support anonymous structures.
> Thanks for letting me know, but I am afraid it is not something that could
> be fixed on the R end.
>
> However, to put this into context, I would expect that C, C++ packages
> would encounter a similar issue if they tried to access or modify specific
> Rcomplex fields in the same way.
>
> No, you can access the fields as before in C (C11):
>
> Rcomplex z;
>
> z.r = 1; z.i = 2
>
> this is what anonymous structures allow, this is why the structure is
> anonymous, not to break existing code.  The union there is to tell the
> compiler about the aliasing, to prevent it from misoptimizing the code. As
> far as I can tell this is valid C code, not a breaking change.
>
> The only issues I know about so far are that you get a warning for
> initializations such as "z = {1, 2}", but still, they will be interpreted
> correctly by the compiler within the standard. However, "z = { .r = 1, .i =
> 2}" worked before and works with the change.
>
> The definition unfortunately is not valid C++, but works with C++ language
> extensions supported at least by GCC and clang, yet you may see warnings. R
> itself doesn't use C++, but some packages do.
>
> Please note your subject is not quite right: the layout of Rcomplex did
> not change, at least not on systems supported by R. The layout is the same
> on systems which use self-alignment of structures.
>
> Also please keep in mind R-devel is meant for unstable changes, it may not
> work, things may be reverted, it is partially used for testing. I've still
> tested this on all CRAN and Bioconductor packages before committing even to
> R-devel, but this is not always done and cannot be due to how much
> resources it takes. Obviously this will get a NEWS entry when/if it gets
> ported to 4.3.0 branch, in the form it would have at that point.
>
> Best
> Tomas
>
>
>
> On Mon, Apr 3, 2023 at 11:39?PM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>>
>> On 4/3/23 14:07, Michael Milton wrote:
>> > Hi all,
>> >
>> > There seems to have been a breaking change in the R trunk caused by a
>> fix
>> > to bug 18430 <https://bugs.r-project.org/show_bug.cgi?id=18430> that
>> > relates to the layout of the Rcomplex typedef. Previously it was a
>> struct,
>> > but now it's a union by default
>> > <
>> https://github.com/r-devel/r-svn/commit/862f9f816ff3ff3cb3f851603f19e99f60a98475#diff-e9b09a44d9dc69444eca2300325e790a0cc6d2c8c3960f47519c7f8ef896f9e4
>> >,
>> > which breaks downstream code that relied on this layout. I'm aware of
>> > the R_LEGACY_RCOMPLEX variable, but I still wouldn't expect an
>> unreported
>> > breaking change especially if it's aimed at R 4.3 (although I'm not
>> sure if
>> > it is). I believe src/include/R_ext/Complex.h, which this patch
>> affects, is
>> > considered part of the public R ABI since it's included by R.h.
>> >
>> > What should I, as a downstream package developer, do about this change?
>>
>> Please report the actual problem you have ran into.
>>
>> Thanks
>> Tomas
>>
>> >
>> > Cheers.
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Apr  4 09:31:33 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 4 Apr 2023 09:31:33 +0200
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <CAPZyOo++tZ-ThaGq=Zj3HbiY-r3wH3x0jPOHKgWcJ9zU-FTYLA@mail.gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
 <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
 <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>
 <CAPZyOo++tZ-ThaGq=Zj3HbiY-r3wH3x0jPOHKgWcJ9zU-FTYLA@mail.gmail.com>
Message-ID: <3787c02c-2f7a-96b7-3299-35734db89a0f@gmail.com>


On 4/4/23 04:27, Michael Milton wrote:
> Hi Tomas,
>
> Thanks for this explanation. As you can probably tell I'm not much of 
> a C person, so I didn't realise this change would be invisible to C 
> users. I suppose R's stability contract only applies to C, and 
> therefore changes that break other languages such as Rust are out of 
> scope. You are right that this error is confused by 
> bindgen's?inability to handle anonymous types, but even without that 
> it would be a breaking change in Rust because code that accesses r or 
> c must now access the struct variant of the union and then access the 
> struct field.
Which I believe can be rephrased as that it also matters how Rust can 
handle anonymous nested structures, or what is the right mapping of the 
involved C types to Rust. I can't comment on that and it is definitely 
out of scope of maintaining R, R just cares about its C interface. As 
long as that is done right, correct mapping from C to other languages 
should work as well.
> Also, this code has to now be in an unsafe block because of the 
> potential to read from the wrong variant 
> <https://doc.rust-lang.org/reference/items/unions.html#reading-and-writing-union-fields>. 
> I guess we will have to handle this using some kind of compile-time 
> abstraction that handles this type differently depending on the R 
> version being used.

That's a Rust thing, but it is certainly worth making sure you don't 
re-introduce the problem that R had before this change, on your end.

Tomas

>
> Cheers
>
> On Tue, Apr 4, 2023 at 12:15?AM Tomas Kalibera 
> <tomas.kalibera at gmail.com> wrote:
>
>
>     On 4/3/23 15:50, Michael Milton wrote:
>>     Okay, but I'm afraid this will only mean something to Rust users.
>>     The reason being that we encountered this issue in extendr: a
>>     Rust extension library for R. The specific compiler errors we
>>     encounter happen because bindgen (the Rust code generation
>>     library) read the changed R header files, and generated a new
>>     type definition for Rcomplex. Then, our downstream code that uses
>>     that bindgen-generated code caused rustc compiler errors such as:
>>     |error[E0560]: union `libR_sys::Rcomplex` has no field named `r`
>>     --> extendr-api\src\robj\into_robj.rs:93:20 | 93 | Rcomplex { r:
>>     0., i: 0. } | ^ `libR_sys::Rcomplex` does not have this field | =
>>     note: available fields are: `__bindgen_anon_1`, `private_data_c`|
>>     and
>>     |error[E0609]: no field `i` on type `libR_sys::Rcomplex` -->
>>     extendr-api\src\scalar\rcplx_default.rs:105:35 | 105 |
>>     Rcplx(c64::new(val.r, val.i)) | ^ unknown field | = note:
>>     available fields are: `__bindgen_anon_1`, `private_data_c` help:
>>     one of the expressions' fields has a field of the same name | 105
>>     | Rcplx(c64::new(val.r, val.__bindgen_anon_1.i)) | +++++++++++++++++|
>     That seems like the generator does not support anonymous
>     structures. Thanks for letting me know, but I am afraid it is not
>     something that could be fixed on the R end.
>>     However, to put this into context, I would expect that C, C++
>>     packages would encounter a similar issue if they tried to access
>>     or modify specific Rcomplex?fields in the same way.
>
>     No, you can access the fields as before in C (C11):
>
>     Rcomplex z;
>
>     z.r = 1; z.i = 2
>
>     this is what anonymous structures allow, this is why the structure
>     is anonymous, not to break existing code.? The union there is to
>     tell the compiler about the aliasing, to prevent it from
>     misoptimizing the code. As far as I can tell this is valid C code,
>     not a breaking change.
>
>     The only issues I know about so far are that you get a warning for
>     initializations such as "z = {1, 2}", but still, they will be
>     interpreted correctly by the compiler within the standard.
>     However, "z = { .r = 1, .i = 2}" worked before and works with the
>     change.
>
>     The definition unfortunately is not valid C++, but works with C++
>     language extensions supported at least by GCC and clang, yet you
>     may see warnings. R itself doesn't use C++, but some packages do.
>
>     Please note your subject is not quite right: the layout of
>     Rcomplex did not change, at least not on systems supported by R.
>     The layout is the same on systems which use self-alignment of
>     structures.
>
>     Also please keep in mind R-devel is meant for unstable changes, it
>     may not work, things may be reverted, it is partially used for
>     testing. I've still tested this on all CRAN and Bioconductor
>     packages before committing even to R-devel, but this is not always
>     done and cannot be due to how much resources it takes. Obviously
>     this will get a NEWS entry when/if it gets ported to 4.3.0 branch,
>     in the form it would have at that point.
>
>     Best
>     Tomas
>
>
>>
>>     On Mon, Apr 3, 2023 at 11:39?PM Tomas Kalibera
>>     <tomas.kalibera at gmail.com> wrote:
>>
>>
>>         On 4/3/23 14:07, Michael Milton wrote:
>>         > Hi all,
>>         >
>>         > There seems to have been a breaking change in the R trunk
>>         caused by a fix
>>         > to bug 18430
>>         <https://bugs.r-project.org/show_bug.cgi?id=18430> that
>>         > relates to the layout of the Rcomplex typedef. Previously
>>         it was a struct,
>>         > but now it's a union by default
>>         >
>>         <https://github.com/r-devel/r-svn/commit/862f9f816ff3ff3cb3f851603f19e99f60a98475#diff-e9b09a44d9dc69444eca2300325e790a0cc6d2c8c3960f47519c7f8ef896f9e4>,
>>         > which breaks downstream code that relied on this layout.
>>         I'm aware of
>>         > the R_LEGACY_RCOMPLEX variable, but I still wouldn't expect
>>         an unreported
>>         > breaking change especially if it's aimed at R 4.3 (although
>>         I'm not sure if
>>         > it is). I believe src/include/R_ext/Complex.h, which this
>>         patch affects, is
>>         > considered part of the public R ABI since it's included by R.h.
>>         >
>>         > What should I, as a downstream package developer, do about
>>         this change?
>>
>>         Please report the actual problem you have ran into.
>>
>>         Thanks
>>         Tomas
>>
>>         >
>>         > Cheers.
>>         >
>>         >? ? ? ?[[alternative HTML version deleted]]
>>         >
>>         > ______________________________________________
>>         > R-devel at r-project.org mailing list
>>         > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Apr  4 09:50:15 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 4 Apr 2023 10:50:15 +0300
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <3787c02c-2f7a-96b7-3299-35734db89a0f@gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
 <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
 <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>
 <CAPZyOo++tZ-ThaGq=Zj3HbiY-r3wH3x0jPOHKgWcJ9zU-FTYLA@mail.gmail.com>
 <3787c02c-2f7a-96b7-3299-35734db89a0f@gmail.com>
Message-ID: <20230404105015.2a1a65fa@Tarkus>

On Tue, 4 Apr 2023 09:31:33 +0200
Tomas Kalibera <tomas.kalibera at gmail.com> wrote:

> it also matters how Rust can handle anonymous nested structures, or
> what is the right mapping of the involved C types to Rust

It's worth mentioning that Rust's RFC 2102 [1] defines unnamed structs
and unions for the purpose of C interoperability, but it's not yet
implemented.

Would it help Rust's bindgen (and, potentially, other C declaration
parsers) if R could optionally give a name to the anonymous union
member, like it's done in Windows API [2]?

-- 
Best regards,
Ivan

[1] https://github.com/rust-lang/rust/issues/49804

[2] https://devblogs.microsoft.com/oldnewthing/20170907-00/?p=96956


From ttm|gue|tt @end|ng |rom gm@||@com  Tue Apr  4 11:27:03 2023
From: ttm|gue|tt @end|ng |rom gm@||@com (Michael Milton)
Date: Tue, 4 Apr 2023 19:27:03 +1000
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <20230404105015.2a1a65fa@Tarkus>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
 <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
 <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>
 <CAPZyOo++tZ-ThaGq=Zj3HbiY-r3wH3x0jPOHKgWcJ9zU-FTYLA@mail.gmail.com>
 <3787c02c-2f7a-96b7-3299-35734db89a0f@gmail.com>
 <20230404105015.2a1a65fa@Tarkus>
Message-ID: <CAPZyOoKxTKu20CCiVXZ2yCiUxZYPj0=MfM8bKDLJkNsMPU3Vag@mail.gmail.com>

I don't think an auto-generated name (along the lines of u or u2) for the
anonymous structs would be helpful here. You can see that bindgen is
already generating a placeholder name ("__bindgen_anon_1"). A meaningful
name might be nice instead, but I get the impression that isn't an option
here since that would break the C API.

Can I ask, would it make sense for us to hard code in R_LEGACY_RCOMPLEX so
that Rust can just ignore the union? Because as I understand the only
compiler that actually needs to "see" the union is gfortran, and if we
pretend it's still a struct in Rust everything should work as before, no?
Is this guaranteed to be a stable macro?

On Tue, Apr 4, 2023 at 5:50?PM Ivan Krylov <krylov.r00t at gmail.com> wrote:

> On Tue, 4 Apr 2023 09:31:33 +0200
> Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> > it also matters how Rust can handle anonymous nested structures, or
> > what is the right mapping of the involved C types to Rust
>
> It's worth mentioning that Rust's RFC 2102 [1] defines unnamed structs
> and unions for the purpose of C interoperability, but it's not yet
> implemented.
>
> Would it help Rust's bindgen (and, potentially, other C declaration
> parsers) if R could optionally give a name to the anonymous union
> member, like it's done in Windows API [2]?
>
> --
> Best regards,
> Ivan
>
> [1] https://github.com/rust-lang/rust/issues/49804
>
> [2] https://devblogs.microsoft.com/oldnewthing/20170907-00/?p=96956
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Apr  4 14:48:11 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 4 Apr 2023 14:48:11 +0200
Subject: [Rd] Breaking Change in Rcomplex Layout?
In-Reply-To: <CAPZyOoKxTKu20CCiVXZ2yCiUxZYPj0=MfM8bKDLJkNsMPU3Vag@mail.gmail.com>
References: <CAPZyOoLG7Bgt0D_Nz-pdBv5k0_SmpFN9UuFE1-mKQxX76L=21g@mail.gmail.com>
 <e8c052d6-50ae-002d-71ba-5e160b56d419@gmail.com>
 <CAPZyOoL7rLbLHwQMziADwg_Dy-UGNScdwi3wf_RawWyU2Y4v-Q@mail.gmail.com>
 <c90c269e-1fdd-b12d-263c-e8c4a92e08db@gmail.com>
 <CAPZyOo++tZ-ThaGq=Zj3HbiY-r3wH3x0jPOHKgWcJ9zU-FTYLA@mail.gmail.com>
 <3787c02c-2f7a-96b7-3299-35734db89a0f@gmail.com>
 <20230404105015.2a1a65fa@Tarkus>
 <CAPZyOoKxTKu20CCiVXZ2yCiUxZYPj0=MfM8bKDLJkNsMPU3Vag@mail.gmail.com>
Message-ID: <582bdd91-d8ce-dca6-8012-8cac64124d2d@gmail.com>


On 4/4/23 11:27, Michael Milton wrote:
> I don't think an auto-generated name (along the lines of u or u2) for 
> the anonymous structs would be helpful here. You can see that bindgen 
> is already generating a placeholder name ("__bindgen_anon_1"). A 
> meaningful name might be nice instead, but I get the impression that 
> isn't an option here since that would break the C API.
>
> Can I ask, would it make sense for us to hard code 
> in?R_LEGACY_RCOMPLEX so that Rust can just ignore the union? Because 
> as I understand the only compiler that actually needs to "see" the 
> union is gfortran, and if we pretend it's still a struct in Rust 
> everything should work as before, no? Is this guaranteed to be a 
> stable macro?

Not necessarily only gfortran, the problem arises anytime when an 
Rcomplex value is (without explicit conversion) treated as C99 _Complex 
double. The layout is (under some assumptions) the same, but not the 
aliasing, so the information about that it can be treated as either 
needs to be carried over. You would run into a similar problem when 
calling say a library function expecting a C99 _Complex double, one 
could argue it is not correct and one should do an explicit conversion, 
but the question is how much code does it correctly. Then in theory 
there could be LTO across C/Fortran/Rust and I can't rule out you 
couldn't get to a similar situation (e.g. Rust calling Fortran). Ideally 
really Rust should be able to translate this valid C11 code correctly.

R_LEGACY_RCOMPLEX should not be used (as the comment says), but it could 
help as a temporary work-around, for cases like you are facing now.? 
Also, more about Rcomplex may have to change in R-devel (not for 4.3.0), 
possibly requiring some API changes.

In case clarification is needed, the Fortran compiler will not see the 
definition of Rcomplex at all, it will use complex numbers as defined in 
Fortran, and in case of gfortran this is C99 _Complex at least on the 
interface to C. The definition is for the C compiler, which compiles 
code using ".r" and ".i" to access real and imaginary parts of complex 
numbers. When compiling this code, the C compiler will be made aware 
that values set via ".r" and ".i" may also be accessed as C99 _Complex 
double objects. It will also store this information in object files, in 
the intermediate representation used during link-time optimizations. The 
link-time optimizer will then know that e.g. when passing Rcomplex from 
(originally) C to COMPLEX*16 in (originally) Fortran, values set on the 
C side via ".r" and ".i" are visible on the Fortran side in a 
corresponding array of COMPLEX. Without knowing that, the link-time 
optimizer could remove say stores to the ".r" and ".i" when calling to 
Fortran, this is what has been actually seen to happen.

Tomas


>
> On Tue, Apr 4, 2023 at 5:50?PM Ivan Krylov <krylov.r00t at gmail.com> wrote:
>
>     On Tue, 4 Apr 2023 09:31:33 +0200
>     Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>     > it also matters how Rust can handle anonymous nested structures, or
>     > what is the right mapping of the involved C types to Rust
>
>     It's worth mentioning that Rust's RFC 2102 [1] defines unnamed structs
>     and unions for the purpose of C interoperability, but it's not yet
>     implemented.
>
>     Would it help Rust's bindgen (and, potentially, other C declaration
>     parsers) if R could optionally give a name to the anonymous union
>     member, like it's done in Windows API [2]?
>
>     -- 
>     Best regards,
>     Ivan
>
>     [1] https://github.com/rust-lang/rust/issues/49804
>
>     [2] https://devblogs.microsoft.com/oldnewthing/20170907-00/?p=96956
>
	[[alternative HTML version deleted]]


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Wed Apr  5 07:48:54 2023
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Wed, 5 Apr 2023 07:48:54 +0200
Subject: [Rd] path to rtools not updated in R 4.2.3 - line 1: gcc: command
 not found
Message-ID: <ba9b7201-fe6a-baed-6108-fc26529dd019@univ-fcomte.fr>

Dear listers,

I have update to rtools43 and, using R 4.2.3 I have been surprised not 
to be able to compile packages needing compilation when updating.

Looks like the path given in

gcc? -I"C:/PROGRA~1/R/R-42~1.3/include" -DNDEBUG -DNTIMER 
-I./SuiteSparse_config -DUSE_FC_LEN_T 
-I"C:/rtools42/x86_64-w64-mingw32.static.posix/include"???? -O2 -Wall? 
-std=gnu99 -mfpmath=sse -msse2 -mstackrealign? -c CHMfactor.c -o CHMfactor.o
/bin/sh: line 1: gcc: command not found

points to rtools42 by defaut

I have fixed the issue changing the folder name rtools43 into rtools42, 
but I wonder wether this is recommandable...


	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr  5 08:27:27 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 5 Apr 2023 08:27:27 +0200
Subject: [Rd] 
 path to rtools not updated in R 4.2.3 - line 1: gcc: command
 not found
In-Reply-To: <ba9b7201-fe6a-baed-6108-fc26529dd019@univ-fcomte.fr>
References: <ba9b7201-fe6a-baed-6108-fc26529dd019@univ-fcomte.fr>
Message-ID: <34bf89ad-0fe2-5187-fc59-8b0676e2634a@gmail.com>


On 4/5/23 07:48, Patrick Giraudoux wrote:
> Dear listers,
>
> I have update to rtools43 and, using R 4.2.3 I have been surprised not
> to be able to compile packages needing compilation when updating.
>
> Looks like the path given in
>
> gcc? -I"C:/PROGRA~1/R/R-42~1.3/include" -DNDEBUG -DNTIMER
> -I./SuiteSparse_config -DUSE_FC_LEN_T
> -I"C:/rtools42/x86_64-w64-mingw32.static.posix/include"???? -O2 -Wall
> -std=gnu99 -mfpmath=sse -msse2 -mstackrealign? -c CHMfactor.c -o CHMfactor.o
> /bin/sh: line 1: gcc: command not found
>
> points to rtools42 by defaut
>
> I have fixed the issue changing the folder name rtools43 into rtools42,
> but I wonder wether this is recommandable...

You should use Rtools42 with R 4.2.x. Rtools43 is currently for R-devel 
and R 4.3.0alpha. You can have both Rtools42 and Rtools43 installed on 
the same machine.

Tomas

>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Apr  5 08:53:28 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 5 Apr 2023 09:53:28 +0300
Subject: [Rd] removeSource() vs. function literals
In-Reply-To: <509b2249-d533-6f15-5b14-c5cfb8218059@gmail.com>
References: <20230330173239.72da4e14@arachnoid>
 <509b2249-d533-6f15-5b14-c5cfb8218059@gmail.com>
Message-ID: <20230405095328.0424a3ca@Tarkus>

Thanks for the comments and sorry I didn't reply sooner!

On Thu, 30 Mar 2023 12:38:24 -0400
Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> You'd need to recurse through all expressions in the object.  Some of
> those expressions might be environments, so your changes could leak
> out of the function you're working on.

In my efforts to get arbitrary objects to hash consistently, I already
walk them recursively, but I do stop at environments. (In theory, it
could be possible to create mock environments with the same
relationships between each other and then "fix up" and hash their
contents, but it's hard to do right. Imagine environments e1 and e2
where e1$other <- e2 and e2$other <- e1.)

I think that removeSource() already walks language objects recursively,
it just doesn't remove source references from unevaluated function
expressions.

> Things are simpler if you know the expression is the unmodified
> result of parsing source code, but if you know that, wouldn't you
> usually be able to control things by setting keep.source = FALSE?

I receive the expression object from substitute(). The idea is to hash
the expression, locate and hash its dependencies and then see if
there's already a file named like the resulting hash. In theory, the
user could be constructing elaborate scary-looking expressions and then
calling my function on them, but I think I can be reasonably certain I
get the calls straight from the parser. Unfortunately, this doesn't put
me in a position to be controlling options(keep.source=...).

> Maybe a workable solution is something like parse(deparse(expr,
> control = "exact"), keep.source = FALSE).

Thanks for this idea! At some point I was considering hashing text
representations of objects, but then I got serialize()-hashing working
and forgot about it.

-- 
Best regards,
Ivan


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Apr  5 09:03:03 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 5 Apr 2023 10:03:03 +0300
Subject: [Rd] removeSource() vs. function literals
In-Reply-To: <CAJf4E3pF-SOgch5AKgx2aLb27amSCd4wUuDhd-MokF9h8ggVQA@mail.gmail.com>
References: <20230330173239.72da4e14@arachnoid>
 <509b2249-d533-6f15-5b14-c5cfb8218059@gmail.com>
 <CAJf4E3pF-SOgch5AKgx2aLb27amSCd4wUuDhd-MokF9h8ggVQA@mail.gmail.com>
Message-ID: <20230405100303.75bc4a37@Tarkus>

On Fri, 31 Mar 2023 08:49:53 +0200
Lionel Henry <lionel at posit.co> wrote:

> If you can afford a dependency on rlang, `rlang::zap_srcref()` deals
> with this. It's recursive over expression vectors, calls (including
> calls to `function` and their hidden srcref arg), and function
> objects.

Thanks for the suggestion! I hope that the source reference argument in
the `function` calls is the last way a source reference could sneak by
in an expression obtained using substitute().

> It's implemented in C for efficiency as we found it to be a
> bottleneck in some applications (IIRC caching). I'd be happy to
> upstream this in base if R core is interested.

A removeSource() that handles all the corner cases would be a nice
improvement.

-- 
Best regards,
Ivan


From d@v|@ @end|ng |rom po@|t@co  Wed Apr  5 17:53:55 2023
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Wed, 5 Apr 2023 11:53:55 -0400
Subject: [Rd] An alternative algorithm for `which()`
Message-ID: <CABzLhzzy82=y2cM1kJpN=QygcM6eZwGxPWPBo14KRQ0s5Qw6vw@mail.gmail.com>

Hi all,

I've sent in a bugzilla patch for an alternative C algorithm for
`which()` which uses less memory and is often faster in many real life
scenarios. I've documented it in full on the bugzilla page, with many
examples:
https://bugs.r-project.org/show_bug.cgi?id=18495

The short version is that the performance comes from making the loops
branchless, which seems to be particularly helpful for `which()`. With
`which(x)`, I'd argue that branches are often hard for the compiler to
predict since in most real data there is typically no indication that
if the i-th element of `x` is `TRUE`, then the i+1-th element might
also be `TRUE`.

I've received a few comments on the bugzilla page, but I'd love it if
anyone else could chime in and provide their own thoughts!

Thanks,
Davis Vaughan


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Thu Apr  6 13:16:53 2023
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Thu, 6 Apr 2023 16:46:53 +0530
Subject: [Rd] Autocompletion for the new S3 generic @ method?
In-Reply-To: <CADfFDC7k2pKxBtx6aLzL=VZa96jGtt8jvJ8dmOU=0YCZD9d97Q@mail.gmail.com>
References: <AEF74F63-9E94-4130-B4B4-9D2CD0C3D468@gmail.com>
 <1F47AC51-9E95-495D-9D54-49057289ACC4@gmail.com>
 <CADfFDC7k2pKxBtx6aLzL=VZa96jGtt8jvJ8dmOU=0YCZD9d97Q@mail.gmail.com>
Message-ID: <CADfFDC4O+D1=AQ_A=9Q1sO76n312BrbmmaaigHc7GD_UwVDEfA@mail.gmail.com>

This should be enabled now in R-devel and R 4.3.0 by writing
.AtNames() methods.

findMatches() is also exported now; this is basically grep(), but will
do fuzzy matching if it's activated.

Best,
-Deepayan

On Mon, Apr 3, 2023 at 9:37?AM Deepayan Sarkar
<deepayan.sarkar at gmail.com> wrote:
>
> Thanks, we are discussing the details, but we will definitely add
> something along those lines before 4.3.0 is released.
>
> Best,
> -Deepayan
>
> On Sun, Apr 2, 2023 at 6:39?PM Tomasz Kalinowski <kalinowskit at gmail.com> wrote:
> >
> > I agree, this is a good idea and would be very helpful in interactive contexts.
> >
> > I have a draft patch implementing this feature here: https://github.com/r-devel/r-svn/pull/122
> > (Append  ?.patch? to the URL to get a raw patch.)
> >
> > Regards,
> > Tomasz
> >
> > > On Mar 31, 2023, at 2:11 PM, Karolis K <karolis.koncevicius at gmail.com> wrote:
> > >
> > > Hello,
> > >
> > > In the current R-devel @ is S3 generic, so we can do things like - for example - use it to extract matrix rows by name:
> > >
> > >    .S3method("@", "mm", function(object, name) object[name,])
> > >    m <- structure(matrix(rnorm(20), ncol=2), dimnames=list(paste0("row", 1:10), paste("col", 1:2)), class="mm")
> > >
> > >    m at row1
> > >
> > > However, seems like currently it does not support autocompletion.
> > >
> > > Wouldn?t it make sense to add a method like .EtaNames() which would provide tab autocompletions for x@<tab> in the same way current .DollarNames() does for x$<tab>?
> > >
> > > Regards,
> > > Karolis K.
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Sat Apr  8 02:26:16 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Fri, 7 Apr 2023 20:26:16 -0400
Subject: [Rd] Time to add is.formula() to 'stats'?
Message-ID: <a4921d32-fee5-d29b-876f-49fbebd7bf86@gmail.com>

I know that it has been discussed in the past, but I wanted to ask
to revisit the idea of exporting

    is.formula <- function(x) inherits(x, "formula")

from 'stats', parallel to is.data.frame() in 'base', given how
widely formulae are used these days in conjunction with data frames,
even outside of model fitting functions (e.g., for split-apply).

One could argue that today data frames and formulae go hand in hand,
and that the lack of is.formula() is a rather ugly asymmetry ...

Furthermore, 'formula' is one of the only S3 classes generated by way
of a primitive (the `~` operator, calling do_tilde() in names.c), so
it is really in some sense "special" { compared to 'factor', 'POSIXlt',
etc. }.

What do people think?

In case it helps, I've gathered some data from 'base' and the so-called
'defaultPackages', reproduced by the attached R script ... see below.

Mikael


----------------------------


1. For which X does is.X() have no corresponding as.X()?

  [1] "R"         "atomic"    "element"   "finite"    "hashtab"   "infinite"
  [7] "language"  "leaf"      "loaded"    "mts"       "na"        "nan"
[13] "object"    "primitive" "recursive" "tskernel"  "unsorted"

2. For which Y does as.Y() have no corresponding is.Y()?

  [1] "Date"          "POSIXct"       "POSIXlt"       "dendrogram"
  [5] "difftime"      "dist"          "formula"       "graphicsAnnot"
  [9] "hclust"        "hexmode"       "octmode"       "person"
[13] "personList"    "roman"

3. For which Z does is.Z() just call inherits(., "Z")?

[1] "data.frame"      "factor"          "numeric_version" "ordered"
[5] "package_version" "raster"          "relistable"      "table"

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: as.is.R
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20230407/d14c0775/attachment.ksh>

From dut@ngc @end|ng |rom gm@||@com  Sat Apr  8 14:21:53 2023
From: dut@ngc @end|ng |rom gm@||@com (Christophe Dutang)
Date: Sat, 8 Apr 2023 14:21:53 +0200
Subject: [Rd] Error message for infinite probability parameters in rbinom()
 and rmultinom()
Message-ID: <3D1EFD77-1BA5-46E3-B69A-EE754906FAFD@gmail.com>

Dear all,

Using rmultinom() in a stochastic model, I found this function returns an error message 'NA in probability' for an infinite probability. 

Maybe, a more precise message will be helpful when debugging. 

>  rmultinom(1, 3:5, c(1/2, 1/3, Inf))
Error in rmultinom(1, 3:5, c(1/2, 1/3, Inf)) : NA in probability vector
>  rmultinom(1, 3:5, c(1/2, 1/3, NA))
Error in rmultinom(1, 3:5, c(1/2, 1/3, NA)) : NA in probability vector


For rgeom() or rbinom(), we got a warning for infinite probability :

> rbinom(1, 3, Inf)
[1] NA
Warning message:
In rbinom(1, 3, Inf) : NAs produced
> rbinom(1, 3, NA)
[1] NA
Warning message:
In rbinom(1, 3, NA) : NAs produced
> rgeom(1, Inf)
[1] NA
Warning message:
In rgeom(1, Inf) : NAs produced
> rgeom(1, NA)
[1] NA
Warning message:
In rgeom(1, NA) : NAs produced


Maybe, it could be better to harmonize the behavior for infinite probability.

Kind regards, Christophe


> sessionInfo()
R version 4.2.3 (2023-03-15)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.2.3 tools_4.2.3   

-------------------------------------------------
Christophe DUTANG
LJK, Ensimag, Grenoble INP, UGA, France
Web: http://dutangc.free.fr


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Apr  8 23:53:12 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 8 Apr 2023 23:53:12 +0200
Subject: [Rd] 
 Error message for infinite probability parameters in rbinom()
 and rmultinom()
In-Reply-To: <3D1EFD77-1BA5-46E3-B69A-EE754906FAFD@gmail.com>
References: <3D1EFD77-1BA5-46E3-B69A-EE754906FAFD@gmail.com>
Message-ID: <25649.57928.875627.313028@stat.math.ethz.ch>

>>>>> Christophe Dutang 
>>>>>     on Sat, 8 Apr 2023 14:21:53 +0200 writes:

    > Dear all,

    > Using rmultinom() in a stochastic model, I found this function returns an error message 'NA in probability' for an infinite probability. 

    > Maybe, a more precise message will be helpful when debugging. 

    >> rmultinom(1, 3:5, c(1/2, 1/3, Inf))
    > Error in rmultinom(1, 3:5, c(1/2, 1/3, Inf)) : NA in probability vector
    >> rmultinom(1, 3:5, c(1/2, 1/3, NA))
    > Error in rmultinom(1, 3:5, c(1/2, 1/3, NA)) : NA in probability vector

Thank you.

I agree the first ('Inf') should not do what it currently does,
and probably the 2nd one should neither give an error.


Note that in rmultinom,  the 'prob' is allowed to be *NOT*
scaled to sum(.) = 1.

Therefore 'Inf' makes sense as the limit (of a sequence) of (a)
very large number(s).

I claim that 

  rmultinom(1, 3, c(1/2, 1/3, Inf))

should give the same as 

  rmultinom(1, 3, c(1/2, 1/3, 1e300))

even without a warning,
and OTOH,  an NA in prob may return NA (and signal a warning)
instead of an error.


    > For rgeom() or rbinom(), we got a warning for infinite probability :

Yes, but there, prob must be in [0,1] ... so that's somewhat differnt.

    >> rbinom(1, 3, Inf)
    > [1] NA
    > Warning message:
    > In rbinom(1, 3, Inf) : NAs produced
    >> rbinom(1, 3, NA)
    > [1] NA
    > Warning message:
    > In rbinom(1, 3, NA) : NAs produced
    >> rgeom(1, Inf)
    > [1] NA
    > Warning message:
    > In rgeom(1, Inf) : NAs produced
    >> rgeom(1, NA)
    > [1] NA
    > Warning message:
    > In rgeom(1, NA) : NAs produced


    > Maybe, it could be better to harmonize the behavior for infinite probability.

    > Kind regards, Christophe


    >> sessionInfo()
    > R version 4.2.3 (2023-03-15)
    > Platform: aarch64-apple-darwin20 (64-bit)
    > Running under: macOS Ventura 13.2.1

    > Matrix products: default
    > BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
    > LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib

    > locale:
    > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods   base     

    > loaded via a namespace (and not attached):
    > [1] compiler_4.2.3 tools_4.2.3   

    > -------------------------------------------------
    > Christophe DUTANG
    > LJK, Ensimag, Grenoble INP, UGA, France
    > Web: http://dutangc.free.fr

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Apr  9 00:33:11 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 8 Apr 2023 18:33:11 -0400
Subject: [Rd] 
 Error message for infinite probability parameters in rbinom()
 and rmultinom()
In-Reply-To: <25649.57928.875627.313028@stat.math.ethz.ch>
References: <3D1EFD77-1BA5-46E3-B69A-EE754906FAFD@gmail.com>
 <25649.57928.875627.313028@stat.math.ethz.ch>
Message-ID: <3de0afd6-5c93-c396-d49b-9c5d80bc83e4@gmail.com>

On 08/04/2023 5:53 p.m., Martin Maechler wrote:
>>>>>> Christophe Dutang
>>>>>>      on Sat, 8 Apr 2023 14:21:53 +0200 writes:
> 
>      > Dear all,
> 
>      > Using rmultinom() in a stochastic model, I found this function returns an error message 'NA in probability' for an infinite probability.
> 
>      > Maybe, a more precise message will be helpful when debugging.
> 
>      >> rmultinom(1, 3:5, c(1/2, 1/3, Inf))
>      > Error in rmultinom(1, 3:5, c(1/2, 1/3, Inf)) : NA in probability vector
>      >> rmultinom(1, 3:5, c(1/2, 1/3, NA))
>      > Error in rmultinom(1, 3:5, c(1/2, 1/3, NA)) : NA in probability vector
> 
> Thank you.
> 
> I agree the first ('Inf') should not do what it currently does,
> and probably the 2nd one should neither give an error.
> 
> 
> Note that in rmultinom,  the 'prob' is allowed to be *NOT*
> scaled to sum(.) = 1.
> 
> Therefore 'Inf' makes sense as the limit (of a sequence) of (a)
> very large number(s).
> 
> I claim that
> 
>    rmultinom(1, 3, c(1/2, 1/3, Inf))
> 
> should give the same as
> 
>    rmultinom(1, 3, c(1/2, 1/3, 1e300))
> 
> even without a warning,

That case makes sense, but is it worth the effort?  Certainly

     rmultinom(1, 3, c(1/2, Inf, Inf))

can't give a useful answer because we don't know the relative size of 
the two infinities.  I imagine the first NA comes from computing 
prob/sum(prob), which is c(0, 0, NaN).

Duncan Murdoch

 > and OTOH,  an NA in prob may return NA (and signal a warning)
 > instead of an error.
> 
> 
>      > For rgeom() or rbinom(), we got a warning for infinite probability :
> 
> Yes, but there, prob must be in [0,1] ... so that's somewhat differnt.
> 
>      >> rbinom(1, 3, Inf)
>      > [1] NA
>      > Warning message:
>      > In rbinom(1, 3, Inf) : NAs produced
>      >> rbinom(1, 3, NA)
>      > [1] NA
>      > Warning message:
>      > In rbinom(1, 3, NA) : NAs produced
>      >> rgeom(1, Inf)
>      > [1] NA
>      > Warning message:
>      > In rgeom(1, Inf) : NAs produced
>      >> rgeom(1, NA)
>      > [1] NA
>      > Warning message:
>      > In rgeom(1, NA) : NAs produced
> 
> 
>      > Maybe, it could be better to harmonize the behavior for infinite probability.
> 
>      > Kind regards, Christophe
> 
> 
>      >> sessionInfo()
>      > R version 4.2.3 (2023-03-15)
>      > Platform: aarch64-apple-darwin20 (64-bit)
>      > Running under: macOS Ventura 13.2.1
> 
>      > Matrix products: default
>      > BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
>      > LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
> 
>      > locale:
>      > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
>      > attached base packages:
>      > [1] stats     graphics  grDevices utils     datasets  methods   base
> 
>      > loaded via a namespace (and not attached):
>      > [1] compiler_4.2.3 tools_4.2.3
> 
>      > -------------------------------------------------
>      > Christophe DUTANG
>      > LJK, Ensimag, Grenoble INP, UGA, France
>      > Web: http://dutangc.free.fr
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From dut@ngc @end|ng |rom gm@||@com  Mon Apr 10 09:08:05 2023
From: dut@ngc @end|ng |rom gm@||@com (Christophe Dutang)
Date: Mon, 10 Apr 2023 09:08:05 +0200
Subject: [Rd] 
 Error message for infinite probability parameters in rbinom()
 and rmultinom()
In-Reply-To: <3de0afd6-5c93-c396-d49b-9c5d80bc83e4@gmail.com>
References: <3D1EFD77-1BA5-46E3-B69A-EE754906FAFD@gmail.com>
 <25649.57928.875627.313028@stat.math.ethz.ch>
 <3de0afd6-5c93-c396-d49b-9c5d80bc83e4@gmail.com>
Message-ID: <E560E4A2-1157-49B3-8D56-F8116D037743@gmail.com>

Thanks Duncan and Martin for your answer.

> Le 9 avr. 2023 ? 00:33, Duncan Murdoch <murdoch.duncan at gmail.com> a ?crit :
> 
> On 08/04/2023 5:53 p.m., Martin Maechler wrote:
>>>>>>> Christophe Dutang
>>>>>>>     on Sat, 8 Apr 2023 14:21:53 +0200 writes:
>>     > Dear all,
>>     > Using rmultinom() in a stochastic model, I found this function returns an error message 'NA in probability' for an infinite probability.
>>     > Maybe, a more precise message will be helpful when debugging.
>>     >> rmultinom(1, 3:5, c(1/2, 1/3, Inf))
>>     > Error in rmultinom(1, 3:5, c(1/2, 1/3, Inf)) : NA in probability vector
>>     >> rmultinom(1, 3:5, c(1/2, 1/3, NA))
>>     > Error in rmultinom(1, 3:5, c(1/2, 1/3, NA)) : NA in probability vector
>> Thank you.
>> I agree the first ('Inf') should not do what it currently does,
>> and probably the 2nd one should neither give an error.
>> Note that in rmultinom,  the 'prob' is allowed to be *NOT*
>> scaled to sum(.) = 1.
>> Therefore 'Inf' makes sense as the limit (of a sequence) of (a)
>> very large number(s).
>> I claim that
>>   rmultinom(1, 3, c(1/2, 1/3, Inf))
>> should give the same as
>>   rmultinom(1, 3, c(1/2, 1/3, 1e300))
>> even without a warning,
> 
> That case makes sense, but is it worth the effort?  Certainly
> 
>    rmultinom(1, 3, c(1/2, Inf, Inf))
> 
> can't give a useful answer because we don't know the relative size of the two infinities.  


I think any infinite values in the probability vector or in the size vector should return NaN.


> I imagine the first NA comes from computing prob/sum(prob), which is c(0, 0, NaN).

Line 73 of rmultinom.c check for probability in [0,1] and throw an error by calling C macro ML_WARN_ret_NAN() which return NA or -1.

I also notice that rbinom() throws a warning and not an error (for prob not in [0,1] or missing), e.g. 

> rbinom(4, 2:5, c(1/2, -1, Inf, NA))
[1]  2 NA NA NA

Maybe, only the man page should be updated in the Value field and state that NA is returned when parameter are not correct. By the way, in ?dbinom, it is said 'If size is not an integer, NaN is returned.' which is not true for rbinom() and qbinom(), but only for dbinom() and pbinom().

Thanks in advance for your work

Kind regards, Christophe 

> 
> Duncan Murdoch
> 
> > and OTOH,  an NA in prob may return NA (and signal a warning)
> > instead of an error.
>>     > For rgeom() or rbinom(), we got a warning for infinite probability :
>> Yes, but there, prob must be in [0,1] ... so that's somewhat differnt.
>>     >> rbinom(1, 3, Inf)
>>     > [1] NA
>>     > Warning message:
>>     > In rbinom(1, 3, Inf) : NAs produced
>>     >> rbinom(1, 3, NA)
>>     > [1] NA
>>     > Warning message:
>>     > In rbinom(1, 3, NA) : NAs produced
>>     >> rgeom(1, Inf)
>>     > [1] NA
>>     > Warning message:
>>     > In rgeom(1, Inf) : NAs produced
>>     >> rgeom(1, NA)
>>     > [1] NA
>>     > Warning message:
>>     > In rgeom(1, NA) : NAs produced
>>     > Maybe, it could be better to harmonize the behavior for infinite probability.
>>     > Kind regards, Christophe
>>     >> sessionInfo()
>>     > R version 4.2.3 (2023-03-15)
>>     > Platform: aarch64-apple-darwin20 (64-bit)
>>     > Running under: macOS Ventura 13.2.1
>>     > Matrix products: default
>>     > BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
>>     > LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
>>     > locale:
>>     > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>     > attached base packages:
>>     > [1] stats     graphics  grDevices utils     datasets  methods   base
>>     > loaded via a namespace (and not attached):
>>     > [1] compiler_4.2.3 tools_4.2.3
>>     > -------------------------------------------------
>>     > Christophe DUTANG
>>     > LJK, Ensimag, Grenoble INP, UGA, France
>>     > Web: http://dutangc.free.fr
>>     > ______________________________________________
>>     > R-devel at r-project.org mailing list
>>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From dj@@mper| @end|ng |rom gm@||@com  Mon Apr 10 16:23:09 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Mon, 10 Apr 2023 10:23:09 -0400
Subject: [Rd] Archive policy and Rcpp?
Message-ID: <CADUbQ5j6MyuvBLJ_eXccMSF-hjjE4GnecDkKUyQ_-EV9Ly5noQ@mail.gmail.com>

It appears that my archived packages Rcpp and RcppTemplate have
been removed at CRAN, yet they appeared in the CRAN archives
until recently.

What is the CRAN policy on archives and removal?

Thanks,
Dominick

	[[alternative HTML version deleted]]


From m@rc_@chw@rtz @end|ng |rom me@com  Mon Apr 10 22:35:18 2023
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Mon, 10 Apr 2023 16:35:18 -0400
Subject: [Rd] Archive policy and Rcpp?
In-Reply-To: <CADUbQ5j6MyuvBLJ_eXccMSF-hjjE4GnecDkKUyQ_-EV9Ly5noQ@mail.gmail.com>
References: <CADUbQ5j6MyuvBLJ_eXccMSF-hjjE4GnecDkKUyQ_-EV9Ly5noQ@mail.gmail.com>
Message-ID: <etPan.64347306.aaff9a4.508@me.com>

Hi Dominick,

While somebody from CRAN might eventually reply here, your query is actually OT for R-Devel, which has been, since circa 2015, focused on more technical code development (e.g. C/C++/FORTRAN, etc.) and core R development issues, rather than on CRAN and package development related topics.

A better option for questions on package development/CRAN related topics would be to post to R-Package-Devel:

??https://stat.ethz.ch/mailman/listinfo/r-package-devel

or perhaps better yet in this specific case, directly to the CRAN folks at?CRAN at R-project.org.

FWIW, my read of the CRAN policy at:

??https://cran.r-project.org/web/packages/policies.html

would suggest that there is an expectation that older versions of packages are "archived in perpetuity".

Regards,

Marc Schwartz
R-Devel Co-Admin


On April 10, 2023 at 10:23:09 AM, Dominick Samperi (djsamperi at gmail.com (mailto:djsamperi at gmail.com)) wrote:

> It appears that my archived packages Rcpp and RcppTemplate have
> been removed at CRAN, yet they appeared in the CRAN archives
> until recently.
>
> What is the CRAN policy on archives and removal?
>
> Thanks,
> Dominick
>
> [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


