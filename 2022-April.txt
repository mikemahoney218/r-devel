From trevor@|@d@v|@ @end|ng |rom gm@||@com  Fri Apr  1 23:55:46 2022
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Fri, 1 Apr 2022 14:55:46 -0700
Subject: [Rd] png() defaults to `type = "X11"` on R compiled with support
 for cairo (but no pango)
Message-ID: <CAMigB8HHFgFqWBWqjwA1ffc62bJOxtPrq54JcUhu2PgQ7ALYiA@mail.gmail.com>

Dear R Team,

* I'm observing `png()` defaulting to `type = "X11"` in R compiled
   with support for "cairo" (but not compiled with pango) run
   in "vanilla" mode
* According to `help("png", package="grDevices")` :

  > The default is set by
  > ?getOption("bitmapType")? - the ?out of the box? default is
  > ?"quartz"? or ?"cairo"? where available, otherwise ?"Xlib"?.

* "cairo" is indeed available so according to the documentation
   it should be the "out-of-the-box" default but instead
  "Xlib" is the "out-of-the-box" default.
* `X11()` also defaults to "Xlib" but `?X11` says the default is "cairo"
  only when R was built using "pangocairo" so this seems to match
  the documentation since `./configure` says there was no pango.
* Perhaps R should instead default to
 `type = "cairo"` for `X11()` and the bitmap devices
  when "cairo" is supported even if there is no "pango"?
  With `type="cairo"` I observe support for the new
  R 4.1 and R 4.2 `{grid}` graphic features
  and I avoid certain font ERRORs that hit me
  when I use `type = "X11"`.  Seems like "cairo"
  would be the better default than "X11"?

Thanks!

Trevor

p.s. Possibly relevant information:

```
> grSoftVersion()
                   cairo                  cairoFT                    pango
                "1.16.0"          "2.10.1/2.13.1"                       ""
                  libpng                     jpeg                  libtiff
                "1.6.37"                    "8.0" "LIBTIFF, Version 4.1.0"
```

Snippets from `./configure`:

```
checking whether pkg-config knows about cairo and pango... no
checking whether pkg-config knows about cairo... yes
checking whether cairo is >= 1.2 and works... yes
```
```
  Interfaces supported:        X11
  External libraries:          pcre2, readline, curl
  Additional capabilities:     PNG, JPEG, TIFF, NLS, cairo, ICU
  Options enabled:             shared BLAS, R profiling

  Capabilities skipped:
  Options not enabled:         memory profiling

  Recommended packages:        yes
```

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Sun Apr  3 05:32:13 2022
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sat, 2 Apr 2022 23:32:13 -0400
Subject: [Rd] The enclosed environment does not work as expected
Message-ID: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>

Hi,

It seems like the enclosed environment does not work well with the
loop. Here is a simple example
```
FuncGenerator <- function(value){
    function() message(value)
}

funcSets <- list()
for(i in 1:2)
    funcSets[[i]] <- FuncGenerator(i)

environment(funcSets[[1]])$value
# [1] 2
environment(funcSets[[2]])$value
# [1] 2
```
The output from the last two lines is simply 2. I expect the first
should be 1 and the second is 2. However, if I ask R to execute the
message function before accessing its environment, the result is
correct again.

```
FuncGenerator <- function(value){
    function() message(value)
}

funcSets <- list()
for(i in 1:2)
    funcSets[[i]] <- FuncGenerator(i)

## Ask to evaluate the function
for(i in 1:2){
    funcSets[[i]]()
}
# 1
# 2
environment(funcSets[[1]])$value
# [1] 1
environment(funcSets[[2]])$value
# [1] 2
```
This does not make any sense to me since the function simply prints
out its variable `value`. It should not change the value of the
variable, so I think this might be a bug in the code optimizer. This
issue can only be corrected by the loop(like the second example),
manually evaluating the function without the loop will give you the
same result as the first example.

Here is my session information
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19044)


Best,
Jiefei


From @zwj|08 @end|ng |rom gm@||@com  Sun Apr  3 06:52:35 2022
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sun, 3 Apr 2022 00:52:35 -0400
Subject: [Rd] The enclosed environment does not work as expected
In-Reply-To: <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>
References: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
 <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>
Message-ID: <CAGiFhPMpogeQFzRMEyPMOdg3_sdu45RRShiGCQK3+y7G=QNuRQ@mail.gmail.com>

Hi Eric,

Wow, Thanks for the explanation. Even though I know the lazy
evaluation, I never thought it can have this surprising effect. Good
to know it now.

Best,
Jiefei

On Sun, Apr 3, 2022 at 12:20 AM Eric Berger <ericjberger at gmail.com> wrote:
>
> Hi Jiefei,
> This is related to "lazy evaluation". Alternatives for dealing with it are discussed here:
>
> https://stackoverflow.com/questions/29084193/how-to-not-fall-into-rs-lazy-evaluation-trap
>
> HTH,
> Eric
>
>
> On Sun, Apr 3, 2022 at 6:32 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>>
>> Hi,
>>
>> It seems like the enclosed environment does not work well with the
>> loop. Here is a simple example
>> ```
>> FuncGenerator <- function(value){
>>     function() message(value)
>> }
>>
>> funcSets <- list()
>> for(i in 1:2)
>>     funcSets[[i]] <- FuncGenerator(i)
>>
>> environment(funcSets[[1]])$value
>> # [1] 2
>> environment(funcSets[[2]])$value
>> # [1] 2
>> ```
>> The output from the last two lines is simply 2. I expect the first
>> should be 1 and the second is 2. However, if I ask R to execute the
>> message function before accessing its environment, the result is
>> correct again.
>>
>> ```
>> FuncGenerator <- function(value){
>>     function() message(value)
>> }
>>
>> funcSets <- list()
>> for(i in 1:2)
>>     funcSets[[i]] <- FuncGenerator(i)
>>
>> ## Ask to evaluate the function
>> for(i in 1:2){
>>     funcSets[[i]]()
>> }
>> # 1
>> # 2
>> environment(funcSets[[1]])$value
>> # [1] 1
>> environment(funcSets[[2]])$value
>> # [1] 2
>> ```
>> This does not make any sense to me since the function simply prints
>> out its variable `value`. It should not change the value of the
>> variable, so I think this might be a bug in the code optimizer. This
>> issue can only be corrected by the loop(like the second example),
>> manually evaluating the function without the loop will give you the
>> same result as the first example.
>>
>> Here is my session information
>> > sessionInfo()
>> R version 4.1.2 (2021-11-01)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 19044)
>>
>>
>> Best,
>> Jiefei
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sun Apr  3 08:41:47 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 3 Apr 2022 07:41:47 +0100
Subject: [Rd] The enclosed environment does not work as expected
In-Reply-To: <CAGiFhPMpogeQFzRMEyPMOdg3_sdu45RRShiGCQK3+y7G=QNuRQ@mail.gmail.com>
References: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
 <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>
 <CAGiFhPMpogeQFzRMEyPMOdg3_sdu45RRShiGCQK3+y7G=QNuRQ@mail.gmail.com>
Message-ID: <92cad44c-1fa3-44da-70a8-031a99d3ee7e@sapo.pt>

Hello,

Another way not to fall into this surprise is to ?force the variable's 
evaluation.


FuncGenerator <- function(value){
   force(value)
   function() message(value)
}

funcSets <- list()
for(i in 1:2)
   funcSets[[i]] <- FuncGenerator(i)

environment(funcSets[[1]])$value
environment(funcSets[[2]])$value


Note that to force evaluation inside the returned function doesn't work. 
The function will get a copy of value and evaluate the copy, not what 
the function factory is getting. I too find lazy evaluation confusing 
and the best/only way is to try it out and eventualy get it right.


# wrong
FuncGenerator <- function(value){
   function(value) {
     force(value)
     message(value)
   }
}



Hope this helps,

Rui Barradas

?s 05:52 de 03/04/2022, Jiefei Wang escreveu:
> Hi Eric,
> 
> Wow, Thanks for the explanation. Even though I know the lazy
> evaluation, I never thought it can have this surprising effect. Good
> to know it now.
> 
> Best,
> Jiefei
> 
> On Sun, Apr 3, 2022 at 12:20 AM Eric Berger <ericjberger at gmail.com> wrote:
>>
>> Hi Jiefei,
>> This is related to "lazy evaluation". Alternatives for dealing with it are discussed here:
>>
>> https://stackoverflow.com/questions/29084193/how-to-not-fall-into-rs-lazy-evaluation-trap
>>
>> HTH,
>> Eric
>>
>>
>> On Sun, Apr 3, 2022 at 6:32 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>>>
>>> Hi,
>>>
>>> It seems like the enclosed environment does not work well with the
>>> loop. Here is a simple example
>>> ```
>>> FuncGenerator <- function(value){
>>>      function() message(value)
>>> }
>>>
>>> funcSets <- list()
>>> for(i in 1:2)
>>>      funcSets[[i]] <- FuncGenerator(i)
>>>
>>> environment(funcSets[[1]])$value
>>> # [1] 2
>>> environment(funcSets[[2]])$value
>>> # [1] 2
>>> ```
>>> The output from the last two lines is simply 2. I expect the first
>>> should be 1 and the second is 2. However, if I ask R to execute the
>>> message function before accessing its environment, the result is
>>> correct again.
>>>
>>> ```
>>> FuncGenerator <- function(value){
>>>      function() message(value)
>>> }
>>>
>>> funcSets <- list()
>>> for(i in 1:2)
>>>      funcSets[[i]] <- FuncGenerator(i)
>>>
>>> ## Ask to evaluate the function
>>> for(i in 1:2){
>>>      funcSets[[i]]()
>>> }
>>> # 1
>>> # 2
>>> environment(funcSets[[1]])$value
>>> # [1] 1
>>> environment(funcSets[[2]])$value
>>> # [1] 2
>>> ```
>>> This does not make any sense to me since the function simply prints
>>> out its variable `value`. It should not change the value of the
>>> variable, so I think this might be a bug in the code optimizer. This
>>> issue can only be corrected by the loop(like the second example),
>>> manually evaluating the function without the loop will give you the
>>> same result as the first example.
>>>
>>> Here is my session information
>>>> sessionInfo()
>>> R version 4.1.2 (2021-11-01)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 19044)
>>>
>>>
>>> Best,
>>> Jiefei
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From er|cjberger @end|ng |rom gm@||@com  Sun Apr  3 06:20:06 2022
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Sun, 3 Apr 2022 07:20:06 +0300
Subject: [Rd] The enclosed environment does not work as expected
In-Reply-To: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
References: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
Message-ID: <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>

Hi Jiefei,
This is related to "lazy evaluation". Alternatives for dealing with it are
discussed here:

https://stackoverflow.com/questions/29084193/how-to-not-fall-into-rs-lazy-evaluation-trap

HTH,
Eric


On Sun, Apr 3, 2022 at 6:32 AM Jiefei Wang <szwjf08 at gmail.com> wrote:

> Hi,
>
> It seems like the enclosed environment does not work well with the
> loop. Here is a simple example
> ```
> FuncGenerator <- function(value){
>     function() message(value)
> }
>
> funcSets <- list()
> for(i in 1:2)
>     funcSets[[i]] <- FuncGenerator(i)
>
> environment(funcSets[[1]])$value
> # [1] 2
> environment(funcSets[[2]])$value
> # [1] 2
> ```
> The output from the last two lines is simply 2. I expect the first
> should be 1 and the second is 2. However, if I ask R to execute the
> message function before accessing its environment, the result is
> correct again.
>
> ```
> FuncGenerator <- function(value){
>     function() message(value)
> }
>
> funcSets <- list()
> for(i in 1:2)
>     funcSets[[i]] <- FuncGenerator(i)
>
> ## Ask to evaluate the function
> for(i in 1:2){
>     funcSets[[i]]()
> }
> # 1
> # 2
> environment(funcSets[[1]])$value
> # [1] 1
> environment(funcSets[[2]])$value
> # [1] 2
> ```
> This does not make any sense to me since the function simply prints
> out its variable `value`. It should not change the value of the
> variable, so I think this might be a bug in the code optimizer. This
> issue can only be corrected by the loop(like the second example),
> manually evaluating the function without the loop will give you the
> same result as the first example.
>
> Here is my session information
> > sessionInfo()
> R version 4.1.2 (2021-11-01)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19044)
>
>
> Best,
> Jiefei
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From gm@t|m@ @end|ng |rom gm@||@com  Tue Apr  5 15:08:10 2022
From: gm@t|m@ @end|ng |rom gm@||@com (Roman Savchenko)
Date: Tue, 5 Apr 2022 15:08:10 +0200
Subject: [Rd] symbols.rds error 1
Message-ID: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>

Dear R devs,

I have an error that I can't understand the reason:

Error in system(sprintf("%s -Pg %s", nm, shQuote(f)), intern = TRUE) :
  '""' not found
Calls: <Anonymous> -> lapply -> FUN -> strsplit -> system
Execution halted
make: *** [C:/PROGRA~1/R-40~1.5/share/make/winshlib.mk:32: symbols.rds]
Error 1

I'm using Rcpp to build cpp package for R. Compilation has few warnings and
the library is built.

Appreciate for advice on how to resolve this issue.

Thanks,
Roman.

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Apr  5 15:25:20 2022
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 5 Apr 2022 16:25:20 +0300
Subject: [Rd] symbols.rds error 1
In-Reply-To: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>
References: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>
Message-ID: <20220405162520.4e703d31@arachnoid>

On Tue, 5 Apr 2022 15:08:10 +0200
Roman Savchenko <gmstima at gmail.com> wrote:

> Error in system(sprintf("%s -Pg %s", nm, shQuote(f)), intern = TRUE) :
>   '""' not found

This does highlight a minor bug in R (an empty string is accidentally
quoted, so the absence of nm on the PATH isn't noted), but your setup
is part of the problem too, I think. How did you install Rtools? (Is it
appropriate here? Is R-pkg-devel a better fit?)

Here's the patch fixing the check (but not the reason why R can't find
nm on your machine):

--- src/library/tools/R/sotools.R       (revision 82033)
+++ src/library/tools/R/sotools.R       (working copy)
@@ -63,7 +63,7 @@
     if(!nzchar(nm)) {
         ## reasonable to assume nm is on the path
         nm <- Sys.which("nm")
-        if(!nzchar(nm)) nm <- shQuote(nm)
+        if(nzchar(nm)) nm <- shQuote(nm)
     }
     if(!nzchar(nm)) {
         warning("this requires 'nm' to be on the PATH")


-- 
Best regards,
Ivan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Apr  5 20:13:07 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 5 Apr 2022 20:13:07 +0200
Subject: [Rd] symbols.rds error 1
In-Reply-To: <20220405162520.4e703d31@arachnoid>
References: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>
 <20220405162520.4e703d31@arachnoid>
Message-ID: <4e8f94ce-b83d-55e0-ea3e-0675f2085ec2@gmail.com>


On 4/5/22 15:25, Ivan Krylov wrote:
> On Tue, 5 Apr 2022 15:08:10 +0200
> Roman Savchenko <gmstima at gmail.com> wrote:
>
>> Error in system(sprintf("%s -Pg %s", nm, shQuote(f)), intern = TRUE) :
>>    '""' not found
> This does highlight a minor bug in R (an empty string is accidentally
> quoted, so the absence of nm on the PATH isn't noted), but your setup
> is part of the problem too, I think. How did you install Rtools? (Is it
> appropriate here? Is R-pkg-devel a better fit?)
>
> Here's the patch fixing the check (but not the reason why R can't find
> nm on your machine):
>
> --- src/library/tools/R/sotools.R       (revision 82033)
> +++ src/library/tools/R/sotools.R       (working copy)
> @@ -63,7 +63,7 @@
>       if(!nzchar(nm)) {
>           ## reasonable to assume nm is on the path
>           nm <- Sys.which("nm")
> -        if(!nzchar(nm)) nm <- shQuote(nm)
> +        if(nzchar(nm)) nm <- shQuote(nm)
>       }
>       if(!nzchar(nm)) {
>           warning("this requires 'nm' to be on the PATH")

Thanks, fixed in R

Tomas

>


From m@rk@iee m@iii@g oii hrsdc-rhdcc@gc@c@  Wed Apr  6 18:07:18 2022
From: m@rk@iee m@iii@g oii hrsdc-rhdcc@gc@c@ (m@rk@iee m@iii@g oii hrsdc-rhdcc@gc@c@)
Date: Wed, 6 Apr 2022 16:07:18 +0000
Subject: [Rd] available.packages function and UNC paths
Message-ID: <9699bb8ee6e5404eb32fcef502a38e71@hrsdc-rhdcc.gc.ca>

Hello,

I'm responsible for maintaining a mirrored internal CRAN repository for my organization. We have a script that uses the miniCRAN library to add and update packages within the repository and since the repository is stored on a network drive I have to use UNC paths when calling miniCRAN functions such as this:

updatePackages(path = '\\\\my-network-drive.net\\repos\\packages', ...)

updatePackages function in turns call pkgAvail, another miniCRAN function, which calls available.packages and then read.dcf function. However I discovered that this line in available.packages transforms the UNC path to a form that read.dcf can't use:

if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 8L), "/PACKAGES")

This line transforms my UNC path to //\\\\my-network-drive.net\\repos\\packages, which read.dcf can't use. During debugging I found that pkgAvail transformed my UNC path to 'file:///\\\\ my-network-drive.net\\repos\\packages' and that is the path being passed to available.packages. To fix my issue I re-defined my own available.packages function and changed the line to:

if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 10L), "/PACKAGES")

This way the UNC path being passed to read.dcf will be '/\\my-network-drive.net\\repos\\packages', which read.dcf can use. I'm wondering if similar changes can be made in the available.packages function for the next R release to automatically detect UNC paths and modify it so that it can work with UNC paths.

Thanks,

Mark






	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Apr  7 08:59:20 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 7 Apr 2022 09:59:20 +0300
Subject: [Rd] calloc() vs. R_Calloc()
Message-ID: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>

Dear R devs,

I ran into a C level problem that hopefully is a quick fix to a trained eye.

Not sure if I am able to produce a minimal reproducible example, but
suppose a (test) package passes all the local tests, passes the R CMD check
and also passes the tests on both rhub and https://win-builder.r-project.org

The test GitHub repo is here:
https://github.com/dusadrian/QCAtest

As per the latest CRAN recommendation, I need to replace calloc() and
free() with R's Calloc() and Free(). In the above repo, the latest commit
does not pass the tests any longer, and the absolute single difference is
using the recommended commands in the file:
https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c

The previous initial commit of this file (which has no problems) is here:
https://github.com/dusadrian/QCAtest/blob/5fb13f44457a2071b322ad42ab579f3547d1c551/src/CCubes.c

There must be something obvious I'm doing wrong, perhaps a header missing
or not in the right place, but it just escapes me.
I've tried both Calloc() and R_Calloc(), both versions result in the same
errors.

Many thanks in advance for any hint,
Adrian

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr  7 09:32:03 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 7 Apr 2022 09:32:03 +0200
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
Message-ID: <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>


On 4/7/22 08:59, Adrian Du?a wrote:
> Dear R devs,
>
> I ran into a C level problem that hopefully is a quick fix to a trained eye.
>
> Not sure if I am able to produce a minimal reproducible example, but
> suppose a (test) package passes all the local tests, passes the R CMD check
> and also passes the tests on both rhub and https://win-builder.r-project.org
>
> The test GitHub repo is here:
> https://github.com/dusadrian/QCAtest
>
> As per the latest CRAN recommendation, I need to replace calloc() and
> free() with R's Calloc() and Free(). In the above repo, the latest commit
> does not pass the tests any longer, and the absolute single difference is
> using the recommended commands in the file:
> https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c
>
> The previous initial commit of this file (which has no problems) is here:
> https://github.com/dusadrian/QCAtest/blob/5fb13f44457a2071b322ad42ab579f3547d1c551/src/CCubes.c
>
> There must be something obvious I'm doing wrong, perhaps a header missing
> or not in the right place, but it just escapes me.
> I've tried both Calloc() and R_Calloc(), both versions result in the same
> errors.

And what are the errors you run into? On which platforms, under what 
circumstances, etc? It would be much easier to give advice knowing that.

In principle, one issue you may run into when switching allocators is 
that you accidentally end up freeing by a different allocator from the 
one used to allocate it. It is common on Windows but can in principle 
happen elsewhere as well.

Also by a slightly different heap layout or different allocator 
implementation you may wake up bugs in the program not seen previously 
(use after free, invalid memory accesses, etc)

Tomas

>
> Many thanks in advance for any hint,
> Adrian
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Apr  7 10:32:37 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 7 Apr 2022 11:32:37 +0300
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
Message-ID: <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>

On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> [...]
>
> And what are the errors you run into? On which platforms, under what
> circumstances, etc? It would be much easier to give advice knowing that.
>
> In principle, one issue you may run into when switching allocators is
> that you accidentally end up freeing by a different allocator from the
> one used to allocate it. It is common on Windows but can in principle
> happen elsewhere as well.
>
> Also by a slightly different heap layout or different allocator
> implementation you may wake up bugs in the program not seen previously
> (use after free, invalid memory accesses, etc)
>

That is something I do not know yet, since the only information the server
gives is this:
https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3

I'll probably end up debugging the C code, but since the only difference is
using Free() vs free() on exactly the same objects, I suspected a mis-usage
of the R commands.

The same setup passes with no problems on my local MacOS, but the errors
still seem to occur on the Windows setup from r-hub.

Best wishes,
Adrian

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr  7 10:59:49 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 7 Apr 2022 10:59:49 +0200
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
Message-ID: <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>


On 4/7/22 10:32, Adrian Du?a wrote:
> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com> 
> wrote:
>
>
>     [...]
>
>     And what are the errors you run into? On which platforms, under what
>     circumstances, etc? It would be much easier to give advice knowing
>     that.
>
>     In principle, one issue you may run into when switching allocators is
>     that you accidentally end up freeing by a different allocator from
>     the
>     one used to allocate it. It is common on Windows but can in principle
>     happen elsewhere as well.
>
>     Also by a slightly different heap layout or different allocator
>     implementation you may wake up bugs in the program not seen
>     previously
>     (use after free, invalid memory accesses, etc)
>
>
> That is something I do not know yet, since the only information the 
> server gives is this:
> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
>
> I'll probably end up debugging the C code, but since the only 
> difference is using Free() vs free() on exactly the same objects, I 
> suspected a mis-usage of the R commands.
>
> The same setup passes with no problems on my local MacOS, but the 
> errors still seem to occur on the Windows setup from r-hub.

This is very likely because you are freeing memory allocated by calloc() 
(or something else but not R_Calloc() in your program) using R_Free() or 
memory allocated using R_Calloc() by using free() in your program.
I would recommend checking the source code manually for that.

It is not surprising that the problem doesn't appear on other platforms 
where the allocators happen to be the same.

Best
Tomas


>
> Best wishes,
> Adrian
	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Apr  7 17:49:22 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 7 Apr 2022 16:49:22 +0100
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
Message-ID: <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>

Hello,

Tomas is right, there are many memory operations allocating with malloc 
and freeing with R_Free:

line: variables - operation

  55: p_pichart - malloc
336: p_pichart - R_Free

236: copy_implicants - malloc
260: copy_implicants - R_Free

240: p_tempic - malloc
262: p_tempic - R_Free


And there are more cases like these. For what I've seen, the frequent 
(unique?) case is malloc/R_Free.

Hope this helps,

Rui Barradas

?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
> 
> On 4/7/22 10:32, Adrian Du?a wrote:
>> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>
>>      [...]
>>
>>      And what are the errors you run into? On which platforms, under what
>>      circumstances, etc? It would be much easier to give advice knowing
>>      that.
>>
>>      In principle, one issue you may run into when switching allocators is
>>      that you accidentally end up freeing by a different allocator from
>>      the
>>      one used to allocate it. It is common on Windows but can in principle
>>      happen elsewhere as well.
>>
>>      Also by a slightly different heap layout or different allocator
>>      implementation you may wake up bugs in the program not seen
>>      previously
>>      (use after free, invalid memory accesses, etc)
>>
>>
>> That is something I do not know yet, since the only information the
>> server gives is this:
>> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
>>
>> I'll probably end up debugging the C code, but since the only
>> difference is using Free() vs free() on exactly the same objects, I
>> suspected a mis-usage of the R commands.
>>
>> The same setup passes with no problems on my local MacOS, but the
>> errors still seem to occur on the Windows setup from r-hub.
> 
> This is very likely because you are freeing memory allocated by calloc()
> (or something else but not R_Calloc() in your program) using R_Free() or
> memory allocated using R_Calloc() by using free() in your program.
> I would recommend checking the source code manually for that.
> 
> It is not surprising that the problem doesn't appear on other platforms
> where the allocators happen to be the same.
> 
> Best
> Tomas
> 
> 
>>
>> Best wishes,
>> Adrian
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Apr  7 20:45:43 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 7 Apr 2022 21:45:43 +0300
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
 <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
Message-ID: <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>

Dear Rui,

Thank you so much for the response, that's a very good observation but I've
just tested and results in the same errors, unfortunately.

I have now changed all malloc()s to R_Calloc(), in the latest commit:
https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c

And yet:
https://builder.r-hub.io/status/QCA_3.16.tar.gz-e652c850de7e51c4cc1311fafe44f986

There must be something obvious I am missing, but my C knowledge is limited
and already stretched out...

Best wishes,
Adrian

On Thu, 7 Apr 2022 at 18:49, Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> Tomas is right, there are many memory operations allocating with malloc
> and freeing with R_Free:
>
> line: variables - operation
>
>   55: p_pichart - malloc
> 336: p_pichart - R_Free
>
> 236: copy_implicants - malloc
> 260: copy_implicants - R_Free
>
> 240: p_tempic - malloc
> 262: p_tempic - R_Free
>
>
> And there are more cases like these. For what I've seen, the frequent
> (unique?) case is malloc/R_Free.
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
> >
> > On 4/7/22 10:32, Adrian Du?a wrote:
> >> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
> >> wrote:
> >>
> >>
> >>      [...]
> >>
> >>      And what are the errors you run into? On which platforms, under
> what
> >>      circumstances, etc? It would be much easier to give advice knowing
> >>      that.
> >>
> >>      In principle, one issue you may run into when switching allocators
> is
> >>      that you accidentally end up freeing by a different allocator from
> >>      the
> >>      one used to allocate it. It is common on Windows but can in
> principle
> >>      happen elsewhere as well.
> >>
> >>      Also by a slightly different heap layout or different allocator
> >>      implementation you may wake up bugs in the program not seen
> >>      previously
> >>      (use after free, invalid memory accesses, etc)
> >>
> >>
> >> That is something I do not know yet, since the only information the
> >> server gives is this:
> >>
> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
> >>
> >> I'll probably end up debugging the C code, but since the only
> >> difference is using Free() vs free() on exactly the same objects, I
> >> suspected a mis-usage of the R commands.
> >>
> >> The same setup passes with no problems on my local MacOS, but the
> >> errors still seem to occur on the Windows setup from r-hub.
> >
> > This is very likely because you are freeing memory allocated by calloc()
> > (or something else but not R_Calloc() in your program) using R_Free() or
> > memory allocated using R_Calloc() by using free() in your program.
> > I would recommend checking the source code manually for that.
> >
> > It is not surprising that the problem doesn't appear on other platforms
> > where the allocators happen to be the same.
> >
> > Best
> > Tomas
> >
> >
> >>
> >> Best wishes,
> >> Adrian
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Apr  7 23:29:24 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 8 Apr 2022 09:29:24 +1200
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
 <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
 <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>
Message-ID: <A38ACFF2-46BF-4D8E-9692-4E2A47C55B99@R-project.org>

Adrian,

there are many more allocations in your code - for example, you're using resize() from utils.c which uses malloc/free so it will break since it's using the wrong allocator. You may need to replace *all* allocations in your project, not just some.

Cheers,
Simon


> On 8/04/2022, at 6:45 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
> Dear Rui,
> 
> Thank you so much for the response, that's a very good observation but I've
> just tested and results in the same errors, unfortunately.
> 
> I have now changed all malloc()s to R_Calloc(), in the latest commit:
> https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c
> 
> And yet:
> https://builder.r-hub.io/status/QCA_3.16.tar.gz-e652c850de7e51c4cc1311fafe44f986
> 
> There must be something obvious I am missing, but my C knowledge is limited
> and already stretched out...
> 
> Best wishes,
> Adrian
> 
> On Thu, 7 Apr 2022 at 18:49, Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
>> Hello,
>> 
>> Tomas is right, there are many memory operations allocating with malloc
>> and freeing with R_Free:
>> 
>> line: variables - operation
>> 
>>  55: p_pichart - malloc
>> 336: p_pichart - R_Free
>> 
>> 236: copy_implicants - malloc
>> 260: copy_implicants - R_Free
>> 
>> 240: p_tempic - malloc
>> 262: p_tempic - R_Free
>> 
>> 
>> And there are more cases like these. For what I've seen, the frequent
>> (unique?) case is malloc/R_Free.
>> 
>> Hope this helps,
>> 
>> Rui Barradas
>> 
>> ?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
>>> 
>>> On 4/7/22 10:32, Adrian Du?a wrote:
>>>> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
>>>> wrote:
>>>> 
>>>> 
>>>>     [...]
>>>> 
>>>>     And what are the errors you run into? On which platforms, under
>> what
>>>>     circumstances, etc? It would be much easier to give advice knowing
>>>>     that.
>>>> 
>>>>     In principle, one issue you may run into when switching allocators
>> is
>>>>     that you accidentally end up freeing by a different allocator from
>>>>     the
>>>>     one used to allocate it. It is common on Windows but can in
>> principle
>>>>     happen elsewhere as well.
>>>> 
>>>>     Also by a slightly different heap layout or different allocator
>>>>     implementation you may wake up bugs in the program not seen
>>>>     previously
>>>>     (use after free, invalid memory accesses, etc)
>>>> 
>>>> 
>>>> That is something I do not know yet, since the only information the
>>>> server gives is this:
>>>> 
>> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
>>>> 
>>>> I'll probably end up debugging the C code, but since the only
>>>> difference is using Free() vs free() on exactly the same objects, I
>>>> suspected a mis-usage of the R commands.
>>>> 
>>>> The same setup passes with no problems on my local MacOS, but the
>>>> errors still seem to occur on the Windows setup from r-hub.
>>> 
>>> This is very likely because you are freeing memory allocated by calloc()
>>> (or something else but not R_Calloc() in your program) using R_Free() or
>>> memory allocated using R_Calloc() by using free() in your program.
>>> I would recommend checking the source code manually for that.
>>> 
>>> It is not surprising that the problem doesn't appear on other platforms
>>> where the allocators happen to be the same.
>>> 
>>> Best
>>> Tomas
>>> 
>>> 
>>>> 
>>>> Best wishes,
>>>> Adrian
>>>      [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From du@@@@dr|@n @end|ng |rom gm@||@com  Fri Apr  8 11:02:55 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Fri, 8 Apr 2022 12:02:55 +0300
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <A38ACFF2-46BF-4D8E-9692-4E2A47C55B99@R-project.org>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
 <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
 <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>
 <A38ACFF2-46BF-4D8E-9692-4E2A47C55B99@R-project.org>
Message-ID: <CAJ=0CtCsHZPu0H1cBziU82Me70umU9oeieRwy5kS+SCCXc4V=A@mail.gmail.com>

Yes indeed, thank you so much Simon.
And thanks everyone for all the help, things are back on track now.
All the best,
Adrian

On Fri, 8 Apr 2022 at 00:29, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Adrian,
>
> there are many more allocations in your code - for example, you're using
> resize() from utils.c which uses malloc/free so it will break since it's
> using the wrong allocator. You may need to replace *all* allocations in
> your project, not just some.
>
> Cheers,
> Simon
>
>
> > On 8/04/2022, at 6:45 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> >
> > Dear Rui,
> >
> > Thank you so much for the response, that's a very good observation but
> I've
> > just tested and results in the same errors, unfortunately.
> >
> > I have now changed all malloc()s to R_Calloc(), in the latest commit:
> > https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c
> >
> > And yet:
> >
> https://builder.r-hub.io/status/QCA_3.16.tar.gz-e652c850de7e51c4cc1311fafe44f986
> >
> > There must be something obvious I am missing, but my C knowledge is
> limited
> > and already stretched out...
> >
> > Best wishes,
> > Adrian
> >
> > On Thu, 7 Apr 2022 at 18:49, Rui Barradas <ruipbarradas at sapo.pt> wrote:
> >
> >> Hello,
> >>
> >> Tomas is right, there are many memory operations allocating with malloc
> >> and freeing with R_Free:
> >>
> >> line: variables - operation
> >>
> >>  55: p_pichart - malloc
> >> 336: p_pichart - R_Free
> >>
> >> 236: copy_implicants - malloc
> >> 260: copy_implicants - R_Free
> >>
> >> 240: p_tempic - malloc
> >> 262: p_tempic - R_Free
> >>
> >>
> >> And there are more cases like these. For what I've seen, the frequent
> >> (unique?) case is malloc/R_Free.
> >>
> >> Hope this helps,
> >>
> >> Rui Barradas
> >>
> >> ?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
> >>>
> >>> On 4/7/22 10:32, Adrian Du?a wrote:
> >>>> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com
> >
> >>>> wrote:
> >>>>
> >>>>
> >>>>     [...]
> >>>>
> >>>>     And what are the errors you run into? On which platforms, under
> >> what
> >>>>     circumstances, etc? It would be much easier to give advice knowing
> >>>>     that.
> >>>>
> >>>>     In principle, one issue you may run into when switching allocators
> >> is
> >>>>     that you accidentally end up freeing by a different allocator from
> >>>>     the
> >>>>     one used to allocate it. It is common on Windows but can in
> >> principle
> >>>>     happen elsewhere as well.
> >>>>
> >>>>     Also by a slightly different heap layout or different allocator
> >>>>     implementation you may wake up bugs in the program not seen
> >>>>     previously
> >>>>     (use after free, invalid memory accesses, etc)
> >>>>
> >>>>
> >>>> That is something I do not know yet, since the only information the
> >>>> server gives is this:
> >>>>
> >>
> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
> >>>>
> >>>> I'll probably end up debugging the C code, but since the only
> >>>> difference is using Free() vs free() on exactly the same objects, I
> >>>> suspected a mis-usage of the R commands.
> >>>>
> >>>> The same setup passes with no problems on my local MacOS, but the
> >>>> errors still seem to occur on the Windows setup from r-hub.
> >>>
> >>> This is very likely because you are freeing memory allocated by
> calloc()
> >>> (or something else but not R_Calloc() in your program) using R_Free()
> or
> >>> memory allocated using R_Calloc() by using free() in your program.
> >>> I would recommend checking the source code manually for that.
> >>>
> >>> It is not surprising that the problem doesn't appear on other platforms
> >>> where the allocators happen to be the same.
> >>>
> >>> Best
> >>> Tomas
> >>>
> >>>
> >>>>
> >>>> Best wishes,
> >>>> Adrian
> >>>      [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Fri Apr  8 22:58:57 2022
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 8 Apr 2022 20:58:57 +0000
Subject: [Rd] tools:::cleanupLaTex fails to drop braces in names containing
 consecutive accented characters
Message-ID: <CWLP265MB3505DA6D823D935FEC2E9846AEE99@CWLP265MB3505.GBRP265.PROD.OUTLOOK.COM>

tools:::cleanupLaTex() fails to drop braces in names containing consecutive accented characters. 
For example, Ib??ez ends up rendered as Ib?{?}ez. This is a problem for high level functions, e.g. cite(). For example, after importing the following into a bibentry object, say `tmp`:

@article{DiaLop2020ejor,
  author =       { Juan Esteban Diaz and Manuel L{\'o}pez-Ib{\'a}{\~n}ez },
  title =        {Incorporating Decision-Maker's Preferences into the Automatic
                  Configuration of Bi-Objective Optimisation Algorithms},
  journal =      {European Journal of Operational Research},
  year =         2021,
  volume =       289,
  number =       3,
  pages =        {1209--1222},
  doi =          {10.1016/j.ejor.2020.07.059},
}

> cite("DiaLop2020ejor", tmp, textual = TRUE)
## Diaz and L?pez-Ib?{?}ez (2021)

Here is an example showing that it is not related to a specific accented character:

> e1 <- "Manuel L{\\'o}pez-Ib{\\'a}{\\~n}ez"
> e2 <- "Manuel L{\\'o}pez-Ib{\\~n}{\\'a}ez"
> tools:::cleanupLatex(e1)
## [1] "Manuel L?pez-Ib?{?}ez"
> tools:::cleanupLatex(e2)
[1] "Manuel L?pez-Ib?{?}ez"

This may be a problem in certain circumstances. I narrowed this down to `deparseLatex()` but it is not clear to me if a change may be need there or in parseLatex() which creates the object processed by deparseLatex. I have given more specific details of mu understanding of the problem in my comment at
https://github.com/GeoBosh/Rdpack/issues/25#issuecomment-1093336599 regarding a bug report for Rdpack.


Georgi Boshnakov


From Reece@God|ng @end|ng |rom out|ook@com  Sat Apr  9 21:52:05 2022
From: Reece@God|ng @end|ng |rom out|ook@com (Reece Goding)
Date: Sat, 9 Apr 2022 19:52:05 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
Message-ID: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>

Hello,

For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.

https://github.com/ReeceGoding/Frustration-One-Year-With-R

If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.

Thanks,
Reece Goding

From @erv|ce @end|ng |rom @hd@w@on@com  Sun Apr 10 18:05:17 2022
From: @erv|ce @end|ng |rom @hd@w@on@com (Stephen H. Dawson, DSL)
Date: Sun, 10 Apr 2022 12:05:17 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>

Hi Reece,


Thanks for the article. What specific feedback do you seek for your writing?


Kindest Regards,
*Stephen Dawson, DSL*
/Executive Strategy Consultant/
Business & Technology
+1 (865) 804-3454
http://www.shdawson.com


On 4/9/22 15:52, Reece Goding wrote:
> Hello,
>
> For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.
>
> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>
> If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.
>
> Thanks,
> Reece Goding
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From tdhock5 @end|ng |rom gm@||@com  Mon Apr 11 22:51:54 2022
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Mon, 11 Apr 2022 13:51:54 -0700
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
Message-ID: <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>

You could take some of your observations and turn them into patches that
would help improve R. (discussion of such patches is one function of this
email list)

On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
r-devel at r-project.org> wrote:

> Hi Reece,
>
>
> Thanks for the article. What specific feedback do you seek for your
> writing?
>
>
> Kindest Regards,
> *Stephen Dawson, DSL*
> /Executive Strategy Consultant/
> Business & Technology
> +1 (865) 804-3454
> http://www.shdawson.com
>
>
> On 4/9/22 15:52, Reece Goding wrote:
> > Hello,
> >
> > For a while, I've been working on writing a very big review of R. I've
> finally finished my final proofread of it. Can I get some feedback? This
> seems the most appropriate place to ask. It's linked below.
> >
> > https://github.com/ReeceGoding/Frustration-One-Year-With-R
> >
> > If you think you've seen it before, that will be because it found some
> popularity on Hacker News before I was done proofreading it. The reception
> seems largely positive so far.
> >
> > Thanks,
> > Reece Goding
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Reece@God|ng @end|ng |rom out|ook@com  Mon Apr 11 23:22:04 2022
From: Reece@God|ng @end|ng |rom out|ook@com (Reece Goding)
Date: Mon, 11 Apr 2022 21:22:04 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
Message-ID: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>

Hi Stephen,

I must admit, I don't have anything specific in mind. I'm happy to hear any comments that anyone has.

Thanks,
Reece Goding

From bbo|ker @end|ng |rom gm@||@com  Mon Apr 11 23:41:23 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 11 Apr 2022 17:41:23 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
Message-ID: <1d77d84a-7388-0b3d-8c44-1fe2db7d5cea@gmail.com>

   Yes, although I would say that the vast majority of the observations 
here, while true, are thoroughly baked in, through some combination of 
backward compatibility and R-core stubbornness [many of them may indeed 
have been discussed on this list over the years].

    I would say that *documentation* patches (e.g., relating to your 
comments about  the lack of examples for some basic functions) are most 
likely to succeed. Adding a few lines to the documentation here and 
there that will help out new users would have a big marginal value.

   There may be a few edge cases where R does something silently that 
you can successfully argue should *always* be an error, and introduce a 
patch to make it so (e.g. the upcoming change in R 4.2.0 that "Calling 
&& or || with either argument of length greater than one now gives a 
warning (which it is intended will become an error)".

   Some of the issues can be worked around with add-on packages that 
implement the desired functionality (again, it is entirely reasonable to 
argue that the design of the base language should be fixed, but it's not 
going to be ...)

   cheers
    Ben Bolker

On 4/11/22 4:51 PM, Toby Hocking wrote:
> You could take some of your observations and turn them into patches that
> would help improve R. (discussion of such patches is one function of this
> email list)
> 
> On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
> r-devel at r-project.org> wrote:
> 
>> Hi Reece,
>>
>>
>> Thanks for the article. What specific feedback do you seek for your
>> writing?
>>
>>
>> Kindest Regards,
>> *Stephen Dawson, DSL*
>> /Executive Strategy Consultant/
>> Business & Technology
>> +1 (865) 804-3454
>> http://www.shdawson.com
>>
>>
>> On 4/9/22 15:52, Reece Goding wrote:
>>> Hello,
>>>
>>> For a while, I've been working on writing a very big review of R. I've
>> finally finished my final proofread of it. Can I get some feedback? This
>> seems the most appropriate place to ask. It's linked below.
>>>
>>> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>>>
>>> If you think you've seen it before, that will be because it found some
>> popularity on Hacker News before I was done proofreading it. The reception
>> seems largely positive so far.
>>>
>>> Thanks,
>>> Reece Goding
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Mon Apr 11 23:44:10 2022
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Mon, 11 Apr 2022 21:44:10 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <31b15a0244844c7cb22608967bc0a90a@chu-rouen.fr>

> I must admit, I don't have anything specific in mind. I'm happy to hear any comments that anyone has.

It's relevant and well exposed, in my opinion.
Unfortunately, many problems are deep design flaws that cannot be easily fixed without breaking backwards compatibility.
Some problems can be fixed, such as the documentation.
R could also generate more warning messages in weird situations. Error messages can also be improved.

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Apr 11 23:23:33 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 11 Apr 2022 23:23:33 +0200
Subject: [Rd] intersect() change of behavior in 4.2
Message-ID: <CABtg=K=tRMdLJ7p2JHdFyOYVyjmLNszQguKn569gx+FswChtyw@mail.gmail.com>

I wonder if this change is intentional, and if it is, whether it is
worth mentioning in the NEWS.

? R-4.1 -q -e 'intersect(list(), "foo")'
> intersect(list(), "foo")
character(0)

? R-4.2 -q -e 'intersect(list(), "foo")'
> intersect(list(), "foo")
list()


From g@bembecker @end|ng |rom gm@||@com  Tue Apr 12 01:28:04 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 11 Apr 2022 16:28:04 -0700
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
Message-ID: <CAD4oTHH0n9-oM23TXLTGyO6HHAH3AMSR+kAeJv2Q_T_iQTk6LA@mail.gmail.com>

Hi Reece,

I'm not really sure what kind of review you're looking for (and I'm not
certain this is the right place for it, but hopefully its ok enough). Also,
to channel Pascal, forgive me, I would have written a shorter response but
I didn't have the time.

Firstly, it is fairly ... partisan, I suppose, for lack of a better term.

More importantly from a usefulness perspective you often notably don't
present the knowledge you gained at the end of the various frustrations you
had. As one example that jumped out to me, you say

"One day, you?ll be tripped up by R?s hierarchy of how it likes to simplify
mixed types outside of lists. "

but you don't present your readers with the (well defined) coercion
hierarchy so that they would, you know, not be tripped up by it as badly.
This is probably my largest issue with your document overall. It can give
the reader talking points about how R is bad (not all of which are even
incorrect, per se, as many expert R users will be happy to tell you), but
it won't really help people become better R users in many cases.

Your article also, I suspect, fails to understand what a typical "Novice R
Users" is and what they want to do. By and large they want to analyze data
and create plots. They are analysts, NOT programmers (writing analysis
scripts is not programming in the typical sense, and I'm not the only one
who thinks that).

So the point you make early on in your explanation why you do not strongly
recommend R For Data Science (which I had no part in writing and have not
read myself) that it

"It deliberately avoids the fundamentals of programming ? e.g. making
functions, loops, and if statements ? until the second half. I therefore
suspect that any non-novice would be better off finding an introduction to
the relevant packages with their favourite search engine."


misses the point of R itself for what I'd claim is the "typical novice R
user".

Having read through your review, I'm confused why you were using R to do
some of the things I'm inferring that you felt like you needed it to do. If
you picked up R  wanting an applicable equally to all programming problem
domains general purpose language, you're going to have a bad time. Mostly
because that is not what R is.

Finally, a (very) incomplete response to a few of the more specific points
raised in your review:

*Lists:*

The linked stack overflow question (
https://stackoverflow.com/questions/2050790/how-to-correctly-use-lists-in-r)
shows a pretty fundamental misunderstanding of what lists and atomic
vectors are/do in R. There is nothing wrong with this, asking questions we
don't know the answer to is how we learn, but I'm not sure the question
serves as well as a primer for R lists as you claim. The top answer at time
of writing discusses the C level structure of R objects, which can, I
suppose, inform your knowledge on how lists at the R level work, but is NOT
necessary nor the most pedagogically useful way to present it.

*Strings:*

Strings are not arrays of characters idiomatically at the R level,
they are *atomic observed
values within a (character) vector of data*. Yes, deep down in the C code
they are arrays of characters, but not at the R level. As such, splitting
the elements of a character vector into their respective component
individual characters is not (at all, in my experience) a common
operation. charvec[1]
within typical R usage (where charvec is *a vector of **data*) is much more
likely to be intended to select the *first observation for the data vector*,
which it does. Given what R is for, frankly I think it'd be fairly insane
for charvec[1] to do what substr does.

*Variable Manipulation*

Novice users shouldn't be calling eval. This is not to gatekeep it from
them, like we have some special "eval-callers" club that they're not
invited to. Rather, it is me saying that metaprogramming is not a
novice-difficulty task in R (or, I would expect, anywhere else really).

You also say "variable names" in this section where you mean "argument
names" and that distinction is both meaningful and important. *Variable
names, *are not partially matched:

> xyz <- 5

> x

*Error: object 'x' not found*


*Subsetting:*

I'm fairly certain arrays (including 2d matrices are stored in column order
rather than row order because that has been the standard for linear algebra
on computers since before I knew what either of those things were...

tail(x,1) *is* the idiomatic way of getting the last element of a vector. The
people on stackoverflow that told you this was "very slow" were misguided
at best. It takes ~6000 *nano*seconds on my laptop, compared to the ~200
nanoseconds x[length(x)]. Yes, that is a 30x speedup; no, it doesn't matter
in practice.

I'm going to stop now because this is already too long, but this type of
response continues to be possible throughout.

Lastly, with regard to your mapply challenge. and I quote directly from the
documentation (emphasis mine):

   ...: *arguments to vectorize over* (vectors or lists of strictly

          positive length, or all of zero length).  See also ?Details?.

   MoreArgs: a list of *other arguments* to ?FUN?.



... is the arguments you vectorize over, so FUN gets one element of each
thing in ... for each call. MoreArgs, then, is the set of arguments to
FUN *which
you don't vectorize over, *ie where each call to FUN gets the whole thing.
That's it, that's the whole thing.


I don't disagree that this could be clearer (as Ben pointed out, a
documentation patch would be the way to address this), but its not correct
to say the information isn't in there at all.


Best,

~G

On Mon, Apr 11, 2022 at 1:52 PM Toby Hocking <tdhock5 at gmail.com> wrote:

> You could take some of your observations and turn them into patches that
> would help improve R. (discussion of such patches is one function of this
> email list)
>
> On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
> r-devel at r-project.org> wrote:
>
> > Hi Reece,
> >
> >
> > Thanks for the article. What specific feedback do you seek for your
> > writing?
> >
> >
> > Kindest Regards,
> > *Stephen Dawson, DSL*
> > /Executive Strategy Consultant/
> > Business & Technology
> > +1 (865) 804-3454
> > http://www.shdawson.com
> >
> >
> > On 4/9/22 15:52, Reece Goding wrote:
> > > Hello,
> > >
> > > For a while, I've been working on writing a very big review of R. I've
> > finally finished my final proofread of it. Can I get some feedback? This
> > seems the most appropriate place to ask. It's linked below.
> > >
> > > https://github.com/ReeceGoding/Frustration-One-Year-With-R
> > >
> > > If you think you've seen it before, that will be because it found some
> > popularity on Hacker News before I was done proofreading it. The
> reception
> > seems largely positive so far.
> > >
> > > Thanks,
> > > Reece Goding
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Dunc@n@G@rmon@w@y @end|ng |rom gm@||@com  Mon Apr 11 23:24:52 2022
From: Dunc@n@G@rmon@w@y @end|ng |rom gm@||@com (Duncan Garmonsway)
Date: Mon, 11 Apr 2022 22:24:52 +0100
Subject: [Rd] Hashed environments of size <5 never grow
Message-ID: <CAARqVQO6pBCYaQcuxoiWAgKeshFFw+rCCuDRQd1NnRg7RxD+iA@mail.gmail.com>

Hello,

Hashed environments that begin with a (non-default) size of 4 or less, will
never grow, which is very detrimental to performance.  For example,

```
n <- 10000
l <- vector("list", n)
l <- setNames(l, seq_len(n))

# Takes a second, and nchains remains 1.
e1 <- list2env(l, hash = TRUE, size = 1)
env.profile(e1)$nchains
# [1] 1

# Returns instantly, and nchains grows to 6950
e2 <- list2env(l, hash = TRUE, size = 5)
env.profile(e2)$nchains
# [1] 6950
```

The cause is that, when calling the growth function, the new size is
truncated to an integer.  See src/main/envir.c line 440, or
https://github.com/wch/r-source/blob/d9b9d00b6d2764839f229bf011dda8d027aae227/src/main/envir.c#L440

Given the hard-coded growth rate of 1.2, any size of 4 or less will be
truncated back to itself.

(int) (1 * 1.2 ) = 1
(int) (2 * 1.2) = 1
(int) (3 * 1.2) = 1
(int) (4 * 1.2) = 1
(int) (5 * 1.2) = 6

This is a rare case, and I couldn't find any examples in CRAN packages of
the `size` argument being used at all, let alone so small.  Even so, it
tripped me up, and could be fixed by using `ceil()` in src/main/envir.c
line 440 as follows.

new_table = R_NewHashTable((int)(ceil(HASHSIZE(table) *
HASHTABLEGROWTHRATE)))

Kind regards,
Duncan Garmonsway

	[[alternative HTML version deleted]]


From k|er@n@@hort @end|ng |rom gm@||@com  Tue Apr 12 02:36:06 2022
From: k|er@n@@hort @end|ng |rom gm@||@com (Kieran Short)
Date: Tue, 12 Apr 2022 10:36:06 +1000
Subject: [Rd] Matrix issues when building R with znver3 architecture under
 GCC 11
Message-ID: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>

Hello,

I'm new to this list, and have subscribed particularly because I've come
across an issue with building R from source with an AMD-based Zen
architecture under GCC11. Please don't attack me for my linux operating
system choice, but it is Ubuntu 20.04 with Linux Kernel 5.10.102.1 -
microsoft-standard-WSL2. I've built GCC11 using GCC8 (the standard GCC
under Ubuntu20.04 WSL release), under Windows11 with wslg. WSL2/g runs as a
hypervisor with ports to all system resources including display, GPU (cuda,
etc).

The reason why I am posting this email is that I am trying to compile R
using the AMD Zen3 platform architecture rather than x86/64, because it has
processor-specific optimizations that improve performance over the standard
x86/64 in benchmarks. The Zen3 architecture optimizations are not available
in earlier versions of GCC (actually, they have possibly been backported to
GCC10 now). Since Ubuntu 20.04 doesn't have GCC11, I compiled the GCC11
compiler using the native GCC8.

The GCC11 I have built can build R 4.1.3 with a standard x86-64
architecture and pass all tests with "make check-all".
I configured that with:
> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
CXXFLAGS="-O3 -march=x86-64" CFLAGS="-O3 -march=x86-64" FFLAGS="-O3
-march=x86-64" --enable-memory-profiling --enable-R-shlib
and built with
> make -j 32 -O
> make check-all
## PASS.

So I can build R in my environment with GCC11.
In configure, I am using references to "gcc-11.2" "gfortran-11.2" and
"g++-11.2" because I compiled GCC11 compilers with these suffixes.

Now, I'm using a 32 thread (16 core) AMD Zen3 CPU (a 5950x), and want to
use it to its full potential. Zen3 optimizations are available as a
-march=znver3 option n GCC11. The znver3 optimizations improve performance
in Phoronix Test Suite benchmarks (I'm not aware of anyone that has
compiled R with them). See:
https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11

However, the R 4.1.3 build (made with "make -j 32 -O"), configured with
-march=znver3, produces an R that fails "make check-all".

> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
CXXFLAGS="-O2 -march=znver3" CFLAGS="-O2 -march=znver3" FFLAGS="-O2
-march=znver3" --enable-memory-profiling --enable-R-shlib
or
> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
CXXFLAGS="-O3 -march=znver3" CFLAGS="-O3 -march=znver3" FFLAGS="-O3
-march=znver3" --enable-memory-profiling --enable-R-shlib

The fail is always in the factorizing.R Matrix.R tests, and in particular,
there are a number of errors and a fatal error.
I have attached the output because I cannot really understand what is going
wrong. But results returned from matrix calculations are obviously odd with
-march=znver3 in GCC 11. There is another backwards-compatible architecture
option "znver2" and this has EXACTLY the same result.

While there are other warrnings and errors (many in assert.EQ() ), the
factorizing.R script continues. The fatal error (at line 2662 in the
attached factorizing.Rout.fail text file) is:

> ## problematic rank deficient rankMatrix() case -- only seen in large
cases ??
> Z. <- readRDS(system.file("external", "Z_NA_rnk.rds", package="Matrix"))
> tools::assertWarning(rnkZ. <- rankMatrix(Z., method = "qr")) # gave errors
Error in assertCondition(expr, classes, .exprString = d.expr) :
  Failed to get warning in evaluating rnkZ. <- rankMatrix(Z., method  ...
Calls: <Anonymous> -> assertCondition
Execution halted

Can anybody shed light on what might be going on here? 'make check-all'
passes all the other checks. It is just factorizing.R in Matrix that fails
(other matrix tests run ok).
Sorry this is a bit long-winded, but I thought details might be important.

best regards,
Kieran

From ||u|@@rev|||@ @end|ng |rom gm@||@com  Tue Apr 12 09:16:36 2022
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Tue, 12 Apr 2022 09:16:36 +0200
Subject: [Rd] intersect() change of behavior in 4.2
In-Reply-To: <CABtg=K=tRMdLJ7p2JHdFyOYVyjmLNszQguKn569gx+FswChtyw@mail.gmail.com>
References: <CABtg=K=tRMdLJ7p2JHdFyOYVyjmLNszQguKn569gx+FswChtyw@mail.gmail.com>
Message-ID: <CAN+W6_tM=+E6nCqDq9JiJ=1Gp3E=R4QFcPc06mbFyCZzWjhASQ@mail.gmail.com>

Hi all,

This change is documented on the man page so I think it is intentional.
>From https://search.r-project.org/R/refmans/base/html/sets.html:

    For union, a vector of a common mode.
    For intersect, a vector of a common mode, or NULL if x or y is NULL.
    For setdiff, a vector of the same mode as x.

Now the results are symmetrical to intersect( "foo", list())
Probably it is worth mentioning in the NEWS as it was found to cause
some test to fail on a Bioconductor package some months ago.
This could affect other packages and analysis too.

Best,

Llu?s


On Tue, 12 Apr 2022 at 01:22, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> I wonder if this change is intentional, and if it is, whether it is
> worth mentioning in the NEWS.
>
> ? R-4.1 -q -e 'intersect(list(), "foo")'
> > intersect(list(), "foo")
> character(0)
>
> ? R-4.2 -q -e 'intersect(list(), "foo")'
> > intersect(list(), "foo")
> list()
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |@go@g|ne @end|ng |rom @jd@e@  Tue Apr 12 12:17:56 2022
From: |@go@g|ne @end|ng |rom @jd@e@ (=?Windows-1252?Q?IAGO_GIN=C9_V=C1ZQUEZ?=)
Date: Tue, 12 Apr 2022 10:17:56 +0000
Subject: [Rd] merge by = "row.names" forgetting row.names (and typo in
 documentation)
Message-ID: <AM6PR02MB4423938A7457A32972CBF02594ED9@AM6PR02MB4423.eurprd02.prod.outlook.com>

Dear all,

Would it be possible to change this behaviour or having the option to change this default to keep the row.names in the output and no adding a new column?, so it would make simpler to merge multiple data frames with comon row names. I know it is documented, but it does not seem the most obvious behaviour. Why is it kept like this?

 If the matching involved row names, an extra character column called Row.names is added at the left, and in all cases the result has ?automatic? row names.
Thanks,

PD - typo in the documentation (I am not sure if it should be reported as a bug) of `base::addNA`. In the **Value** section the `addNA` starting the line which explains its behaviour is not formatted as code.



Iago

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Apr 12 15:13:26 2022
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 12 Apr 2022 06:13:26 -0700
Subject: [Rd] 
 Matrix issues when building R with znver3 architecture under GCC 11
In-Reply-To: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
References: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
Message-ID: <CAFDcVCRuChE2a-uKYawL+fQfmxjhKLJpv3bYmWaULvydR=JhTA@mail.gmail.com>

Shooting from the hip: What happens if you compile with -O2 instead of -O3?

Henrik

On Mon, Apr 11, 2022, 18:27 Kieran Short <kieran.short at gmail.com> wrote:

> Hello,
>
> I'm new to this list, and have subscribed particularly because I've come
> across an issue with building R from source with an AMD-based Zen
> architecture under GCC11. Please don't attack me for my linux operating
> system choice, but it is Ubuntu 20.04 with Linux Kernel 5.10.102.1 -
> microsoft-standard-WSL2. I've built GCC11 using GCC8 (the standard GCC
> under Ubuntu20.04 WSL release), under Windows11 with wslg. WSL2/g runs as a
> hypervisor with ports to all system resources including display, GPU (cuda,
> etc).
>
> The reason why I am posting this email is that I am trying to compile R
> using the AMD Zen3 platform architecture rather than x86/64, because it has
> processor-specific optimizations that improve performance over the standard
> x86/64 in benchmarks. The Zen3 architecture optimizations are not available
> in earlier versions of GCC (actually, they have possibly been backported to
> GCC10 now). Since Ubuntu 20.04 doesn't have GCC11, I compiled the GCC11
> compiler using the native GCC8.
>
> The GCC11 I have built can build R 4.1.3 with a standard x86-64
> architecture and pass all tests with "make check-all".
> I configured that with:
> > ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> CXXFLAGS="-O3 -march=x86-64" CFLAGS="-O3 -march=x86-64" FFLAGS="-O3
> -march=x86-64" --enable-memory-profiling --enable-R-shlib
> and built with
> > make -j 32 -O
> > make check-all
> ## PASS.
>
> So I can build R in my environment with GCC11.
> In configure, I am using references to "gcc-11.2" "gfortran-11.2" and
> "g++-11.2" because I compiled GCC11 compilers with these suffixes.
>
> Now, I'm using a 32 thread (16 core) AMD Zen3 CPU (a 5950x), and want to
> use it to its full potential. Zen3 optimizations are available as a
> -march=znver3 option n GCC11. The znver3 optimizations improve performance
> in Phoronix Test Suite benchmarks (I'm not aware of anyone that has
> compiled R with them). See:
> https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11
>
> However, the R 4.1.3 build (made with "make -j 32 -O"), configured with
> -march=znver3, produces an R that fails "make check-all".
>
> > ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> CXXFLAGS="-O2 -march=znver3" CFLAGS="-O2 -march=znver3" FFLAGS="-O2
> -march=znver3" --enable-memory-profiling --enable-R-shlib
> or
> > ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> CXXFLAGS="-O3 -march=znver3" CFLAGS="-O3 -march=znver3" FFLAGS="-O3
> -march=znver3" --enable-memory-profiling --enable-R-shlib
>
> The fail is always in the factorizing.R Matrix.R tests, and in particular,
> there are a number of errors and a fatal error.
> I have attached the output because I cannot really understand what is going
> wrong. But results returned from matrix calculations are obviously odd with
> -march=znver3 in GCC 11. There is another backwards-compatible architecture
> option "znver2" and this has EXACTLY the same result.
>
> While there are other warrnings and errors (many in assert.EQ() ), the
> factorizing.R script continues. The fatal error (at line 2662 in the
> attached factorizing.Rout.fail text file) is:
>
> > ## problematic rank deficient rankMatrix() case -- only seen in large
> cases ??
> > Z. <- readRDS(system.file("external", "Z_NA_rnk.rds", package="Matrix"))
> > tools::assertWarning(rnkZ. <- rankMatrix(Z., method = "qr")) # gave
> errors
> Error in assertCondition(expr, classes, .exprString = d.expr) :
>   Failed to get warning in evaluating rnkZ. <- rankMatrix(Z., method  ...
> Calls: <Anonymous> -> assertCondition
> Execution halted
>
> Can anybody shed light on what might be going on here? 'make check-all'
> passes all the other checks. It is just factorizing.R in Matrix that fails
> (other matrix tests run ok).
> Sorry this is a bit long-winded, but I thought details might be important.
>
> best regards,
> Kieran
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From pro|jcn@@h @end|ng |rom gm@||@com  Tue Apr 12 16:17:38 2022
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Tue, 12 Apr 2022 10:17:38 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <efb01f94-96cf-5281-8656-fd1c28b0e89a@gmail.com>

Any large community-based project is going to be driven by the willing volunteers. Duncan Murdoch
has pointed this out a long time ago for R. Those who do are those who define what is done.

That said, I've felt for quite a long time that the multiplicity of ways in which R can do the same
tasks lead to confusion and errors. Arguably, a much stricter language definition that could execute
95% of the existing user R scripts and programs would be welcome and provide a tool that is easier
to maintain and, with a great deal of luck, lead to better maintainability of user codes.

And, as others have pointed out, backward compatibility is a millstone.

Whether anything will happen depends on who steps up to participate in R.

In the meantime, I believe it is important for all R users to report and try to fix those things
that are egregious faults, and documentation fixes are a very good starting point.

John Nash


On 2022-04-09 15:52, Reece Goding wrote:
> Hello,
> 
> For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.
> 
> https://github.com/ReeceGoding/Frustration-One-Year-With-R
> 
> If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.
> 
> Thanks,
> Reece Goding
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @v|gro@@ @end|ng |rom ver|zon@net  Tue Apr 12 17:29:08 2022
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Tue, 12 Apr 2022 15:29:08 +0000 (UTC)
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <efb01f94-96cf-5281-8656-fd1c28b0e89a@gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <efb01f94-96cf-5281-8656-fd1c28b0e89a@gmail.com>
Message-ID: <77245999.104149.1649777348970@mail.yahoo.com>

JC,
Are you going to call this new abbreviated language by the name "Q" or keep calling itby the name "R" as "S" is taken?
As a goal, yes, it is easier to maintain a language that is sparse. It may sort of force programmers?to go in particular ways to do things and those ways could be very reliable.
But it will drive many programmers away from the language as it will often not match their way?of thinking about problems.
You can presumably build a brand new language with design goals. As you note, existing?languages come with a millstone around their necks or an albatross.
R is an extendable language. You can look at many of the packages or even packages of packages?such as the tidyverse as examples of adding on functionality to do things other ways that have?caught on. Some even partially supplant use of perfectly usable base R methods. Many end up?being largely rewritten as libraries in another language such as a version of C to speed them?up.?
So I suspect limiting R from doing things multiple ways would encourage making more other?ways and ignoring the base language.
But different ways of doing things is not just based on command names but on techniques?within programming. Anyone who wants to can do a matrix multiplication using a direct?primitive but also by a nested loop and other ways. There is nothing wrong with allowing?more ways.
Yes, there is a huge problem with teaching too much and with reading code others wrote.?
But I suggest that there have been languages that tried to make you use relatively?pure functional programming methods to solve everything. Others try to make you use?object-oriented techniques. Obviously some older ones only allow procedural?methods and some remain in the GOTO stage.?
Modern languages often seem to feel obligated to support multiple modes but then?sometimes skimp on other things. R had a focus and it left out some things while a?language like Python had another focus and included many things R left out while totallyignoring many it has. BOTH languages have later been extended through packages and?modules because someone WANTED the darn features. People like having concepts?they can use like sets and dictionaries, not just lists and vectors. They like having?the ability to delay evaluation but also to force evaluation and so on. If you do not?include some things in the language for purist reasons, you may find it used anyway?and probably less reliably as various volunteers supply the need.
Python just added versions of a PIPE. That opens up all kinds of new ways to do?almost anything. In the process, they already mucked with a new way to create?an anonymous function, and are now planning to add a new use for a single?underscore as a placeholder. But a significant number of R users already steadily use?the various kinds of pipes written before using various methods and that can break in?many cases. Is it wiser to let a large user body rebel, or consider a built-in and?efficient way to give them that feature?
What I wonder is that now that we have a pipe in R, will any of the other ways?wither away and use it internally or is it already too late and we are stuck now?with even more incompatible ways to do about the same thing?



-----Original Message-----
From: J C Nash <profjcnash at gmail.com>
To: Reece Goding <Reece.Goding at outlook.com>; r-devel at r-project.org <r-devel at r-project.org>
Sent: Tue, Apr 12, 2022 10:17 am
Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?

Any large community-based project is going to be driven by the willing volunteers. Duncan Murdoch
has pointed this out a long time ago for R. Those who do are those who define what is done.

That said, I've felt for quite a long time that the multiplicity of ways in which R can do the same
tasks lead to confusion and errors. Arguably, a much stricter language definition that could execute
95% of the existing user R scripts and programs would be welcome and provide a tool that is easier
to maintain and, with a great deal of luck, lead to better maintainability of user codes.

And, as others have pointed out, backward compatibility is a millstone.

Whether anything will happen depends on who steps up to participate in R.

In the meantime, I believe it is important for all R users to report and try to fix those things
that are egregious faults, and documentation fixes are a very good starting point.

John Nash


On 2022-04-09 15:52, Reece Goding wrote:
> Hello,
> 
> For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.
> 
> https://github.com/ReeceGoding/Frustration-One-Year-With-R
> 
> If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.
> 
> Thanks,
> Reece Goding
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From pro|jcn@@h @end|ng |rom gm@||@com  Tue Apr 12 17:38:37 2022
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Tue, 12 Apr 2022 11:38:37 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <77245999.104149.1649777348970@mail.yahoo.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <efb01f94-96cf-5281-8656-fd1c28b0e89a@gmail.com>
 <77245999.104149.1649777348970@mail.yahoo.com>
Message-ID: <658fd7d3-a949-6f30-caf0-584d421b83ac@gmail.com>

I probably should have been more expansive. I'm mainly thinking the base language processor should
be "small" or "strict". Possible alternative expressions of ideas can be defined in macros and eventually
in replacement code that is perhaps more efficient. However, I think isolating these macro collections
is helpful. R already does this with packages, so I'm really talking about moving the boundary between
base language and packages downwards towards a stricter core.

Possibly this could be done within the existing R framework. However, I rather doubt that will happen.
More likely someone will propose a "new" language.

Sometimes I find myself going back and running Fortran 77 codes ....

JN

On 2022-04-12 11:29, Avi Gross via R-devel wrote:
> JC,
> Are you going to call this new abbreviated language by the name "Q" or keep calling itby the name "R" as "S" is taken?
> As a goal, yes, it is easier to maintain a language that is sparse. It may sort of force programmers?to go in particular ways to do things and those ways could be very reliable.
> But it will drive many programmers away from the language as it will often not match their way?of thinking about problems.
> You can presumably build a brand new language with design goals. As you note, existing?languages come with a millstone around their necks or an albatross.
> R is an extendable language. You can look at many of the packages or even packages of packages?such as the tidyverse as examples of adding on functionality to do things other ways that have?caught on. Some even partially supplant use of perfectly usable base R methods. Many end up?being largely rewritten as libraries in another language such as a version of C to speed them?up.
> So I suspect limiting R from doing things multiple ways would encourage making more other?ways and ignoring the base language.
> But different ways of doing things is not just based on command names but on techniques?within programming. Anyone who wants to can do a matrix multiplication using a direct?primitive but also by a nested loop and other ways. There is nothing wrong with allowing?more ways.
> Yes, there is a huge problem with teaching too much and with reading code others wrote.
> But I suggest that there have been languages that tried to make you use relatively?pure functional programming methods to solve everything. Others try to make you use?object-oriented techniques. Obviously some older ones only allow procedural?methods and some remain in the GOTO stage.
> Modern languages often seem to feel obligated to support multiple modes but then?sometimes skimp on other things. R had a focus and it left out some things while a?language like Python had another focus and included many things R left out while totallyignoring many it has. BOTH languages have later been extended through packages and?modules because someone WANTED the darn features. People like having concepts?they can use like sets and dictionaries, not just lists and vectors. They like having?the ability to delay evaluation but also to force evaluation and so on. If you do not?include some things in the language for purist reasons, you may find it used anyway?and probably less reliably as various volunteers supply the need.
> Python just added versions of a PIPE. That opens up all kinds of new ways to do?almost anything. In the process, they already mucked with a new way to create?an anonymous function, and are now planning to add a new use for a single?underscore as a placeholder. But a significant number of R users already steadily use?the various kinds of pipes written before using various methods and that can break in?many cases. Is it wiser to let a large user body rebel, or consider a built-in and?efficient way to give them that feature?
> What I wonder is that now that we have a pipe in R, will any of the other ways?wither away and use it internally or is it already too late and we are stuck now?with even more incompatible ways to do about the same thing?
> 
> 
> 
> -----Original Message-----
> From: J C Nash <profjcnash at gmail.com>
> To: Reece Goding <Reece.Goding at outlook.com>; r-devel at r-project.org <r-devel at r-project.org>
> Sent: Tue, Apr 12, 2022 10:17 am
> Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?
> 
> Any large community-based project is going to be driven by the willing volunteers. Duncan Murdoch
> has pointed this out a long time ago for R. Those who do are those who define what is done.
> 
> That said, I've felt for quite a long time that the multiplicity of ways in which R can do the same
> tasks lead to confusion and errors. Arguably, a much stricter language definition that could execute
> 95% of the existing user R scripts and programs would be welcome and provide a tool that is easier
> to maintain and, with a great deal of luck, lead to better maintainability of user codes.
> 
> And, as others have pointed out, backward compatibility is a millstone.
> 
> Whether anything will happen depends on who steps up to participate in R.
> 
> In the meantime, I believe it is important for all R users to report and try to fix those things
> that are egregious faults, and documentation fixes are a very good starting point.
> 
> John Nash
> 
> 
> On 2022-04-09 15:52, Reece Goding wrote:
>> Hello,
>>
>> For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.
>>
>> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>>
>> If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.
>>
>> Thanks,
>> Reece Goding
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @v|gro@@ @end|ng |rom ver|zon@net  Tue Apr 12 20:03:18 2022
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Tue, 12 Apr 2022 18:03:18 +0000 (UTC)
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <658fd7d3-a949-6f30-caf0-584d421b83ac@gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <efb01f94-96cf-5281-8656-fd1c28b0e89a@gmail.com>
 <77245999.104149.1649777348970@mail.yahoo.com>
 <658fd7d3-a949-6f30-caf0-584d421b83ac@gmail.com>
Message-ID: <1178221694.139315.1649786598885@mail.yahoo.com>

I hear you, JC.
There is often tension between making what you have work well and making it?perhaps more general or flexible or add in oodles of new features.
Experience programmers sometimes realize that they can speed up their?programs by replacing a call to a more general function like say paste()?with a call to paste0() when the other features are not being used, or use?other simpler and faster methods to just combine two strings that have no?vectorized components.
So perhaps inevitably, you may develop ever more ways to do things?and often a wrapper is made that doe very little more than call another?function with the arguments in a different order or with defaults added.
If you know exactly what you want, why call read.csv() rather than directly?call read.table() and have the overhead of another function call that youdon't need?
But realistically, programmer time and energy also counts for something.



-----Original Message-----
From: J C Nash <profjcnash at gmail.com>
To: Avi Gross <avigross at verizon.net>; r-devel at r-project.org <r-devel at r-project.org>
Sent: Tue, Apr 12, 2022 11:38 am
Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?

I probably should have been more expansive. I'm mainly thinking the base language processor should
be "small" or "strict". Possible alternative expressions of ideas can be defined in macros and eventually
in replacement code that is perhaps more efficient. However, I think isolating these macro collections
is helpful. R already does this with packages, so I'm really talking about moving the boundary between
base language and packages downwards towards a stricter core.

Possibly this could be done within the existing R framework. However, I rather doubt that will happen.
More likely someone will propose a "new" language.

Sometimes I find myself going back and running Fortran 77 codes ....

JN

On 2022-04-12 11:29, Avi Gross via R-devel wrote:
> JC,
> Are you going to call this new abbreviated language by the name "Q" or keep calling itby the name "R" as "S" is taken?
> As a goal, yes, it is easier to maintain a language that is sparse. It may sort of force programmers?to go in particular ways to do things and those ways could be very reliable.
> But it will drive many programmers away from the language as it will often not match their way?of thinking about problems.
> You can presumably build a brand new language with design goals. As you note, existing?languages come with a millstone around their necks or an albatross.
> R is an extendable language. You can look at many of the packages or even packages of packages?such as the tidyverse as examples of adding on functionality to do things other ways that have?caught on. Some even partially supplant use of perfectly usable base R methods. Many end up?being largely rewritten as libraries in another language such as a version of C to speed them?up.
> So I suspect limiting R from doing things multiple ways would encourage making more other?ways and ignoring the base language.
> But different ways of doing things is not just based on command names but on techniques?within programming. Anyone who wants to can do a matrix multiplication using a direct?primitive but also by a nested loop and other ways. There is nothing wrong with allowing?more ways.
> Yes, there is a huge problem with teaching too much and with reading code others wrote.
> But I suggest that there have been languages that tried to make you use relatively?pure functional programming methods to solve everything. Others try to make you use?object-oriented techniques. Obviously some older ones only allow procedural?methods and some remain in the GOTO stage.
> Modern languages often seem to feel obligated to support multiple modes but then?sometimes skimp on other things. R had a focus and it left out some things while a?language like Python had another focus and included many things R left out while totallyignoring many it has. BOTH languages have later been extended through packages and?modules because someone WANTED the darn features. People like having concepts?they can use like sets and dictionaries, not just lists and vectors. They like having?the ability to delay evaluation but also to force evaluation and so on. If you do not?include some things in the language for purist reasons, you may find it used anyway?and probably less reliably as various volunteers supply the need.
> Python just added versions of a PIPE. That opens up all kinds of new ways to do?almost anything. In the process, they already mucked with a new way to create?an anonymous function, and are now planning to add a new use for a single?underscore as a placeholder. But a significant number of R users already steadily use?the various kinds of pipes written before using various methods and that can break in?many cases. Is it wiser to let a large user body rebel, or consider a built-in and?efficient way to give them that feature?
> What I wonder is that now that we have a pipe in R, will any of the other ways?wither away and use it internally or is it already too late and we are stuck now?with even more incompatible ways to do about the same thing?
> 
> 
> 
> -----Original Message-----
> From: J C Nash <profjcnash at gmail.com>
> To: Reece Goding <Reece.Goding at outlook.com>; r-devel at r-project.org <r-devel at r-project.org>
> Sent: Tue, Apr 12, 2022 10:17 am
> Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?
> 
> Any large community-based project is going to be driven by the willing volunteers. Duncan Murdoch
> has pointed this out a long time ago for R. Those who do are those who define what is done.
> 
> That said, I've felt for quite a long time that the multiplicity of ways in which R can do the same
> tasks lead to confusion and errors. Arguably, a much stricter language definition that could execute
> 95% of the existing user R scripts and programs would be welcome and provide a tool that is easier
> to maintain and, with a great deal of luck, lead to better maintainability of user codes.
> 
> And, as others have pointed out, backward compatibility is a millstone.
> 
> Whether anything will happen depends on who steps up to participate in R.
> 
> In the meantime, I believe it is important for all R users to report and try to fix those things
> that are egregious faults, and documentation fixes are a very good starting point.
> 
> John Nash
> 
> 
> On 2022-04-09 15:52, Reece Goding wrote:
>> Hello,
>>
>> For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.
>>
>> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>>
>> If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.
>>
>> Thanks,
>> Reece Goding
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ??? [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @erv|ce @end|ng |rom @hd@w@on@com  Tue Apr 12 22:17:02 2022
From: @erv|ce @end|ng |rom @hd@w@on@com (Stephen H. Dawson, DSL)
Date: Tue, 12 Apr 2022 16:17:02 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <a80fa568-5d88-ce1d-8f87-b0896083ba8f@shdawson.com>

OK, here is my take on your writing.

It seems to appeal to an audience of developers in a developer-centric 
realm.

It does not follow a practiced writing style, nor does it have enough 
structure to work as a peer-reviewed piece.

Now, my recommendation.

You have LOADS of good material in your article. Restructure your work 
to another output medium. Specifically, capitalize on the theme of your 
work...trying to get up and running with R...and develop a web-based 
tool to help people use R by whittling down package selection.

R does graphing. Great. Which packages are used for a particular type of 
graph? R does statistics. Great. Which packages are used for a 
particular statistic calculation?

The tool is a hierarchical approach to help either a seasoned or new 
developer FIND a package to do, well assist, with what they are hoping 
to accomplish. If there were a tool that would provide such help, then 
the wonderful packages that already exist could then be leveraged using 
their existing documentation. If there were a tool that provided such 
assistance, then I would not have to read books, web pages, forums, and 
what not to figure out which of the thousands, perhaps closer to 
hundreds, of packages do the graphing and statistics work I am hoping to 
accomplish.

Multiply this pain by the pain you recent R experience, then multiply 
that product by the number of people who use R now, then add in the 
probability of doubling or tripling it for those who may want to one day 
use R. You would then have quite a bit of notoriety on the world 
wiiiiiiiide web by helping people cut through the muck to get a simple 
answer of package selection.

Then, oh my....the statistical work that R could accomplish from 
visitors using the tool to mature the tool in short order. Talk about 
contributing significant help to R, the world at large, and those who 
come after us.

Perhaps you are not the developer who either can or should do the work 
on this tool. Your article has helped form the value proposition for the 
tool. Find the developer to accomplish the work on this tool and that 
person will have a dot on their CV that will never tarnish.

Ping me if you want more information on this proposed tool.


*Stephen Dawson, DSL*
/Executive Strategy Consultant/
Business & Technology
+1 (865) 804-3454
http://www.shdawson.com


On 4/11/22 17:22, Reece Goding wrote:
> Hi Stephen,
>
> I must admit, I don't have anything specific in mind. I'm happy to hear any comments that anyone has.
>
> Thanks,
> Reece Goding


From k|er@n@@hort @end|ng |rom gm@||@com  Tue Apr 12 23:22:57 2022
From: k|er@n@@hort @end|ng |rom gm@||@com (Kieran Short)
Date: Wed, 13 Apr 2022 07:22:57 +1000
Subject: [Rd] 
 Matrix issues when building R with znver3 architecture under GCC 11
In-Reply-To: <CAFDcVCRuChE2a-uKYawL+fQfmxjhKLJpv3bYmWaULvydR=JhTA@mail.gmail.com>
References: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
 <CAFDcVCRuChE2a-uKYawL+fQfmxjhKLJpv3bYmWaULvydR=JhTA@mail.gmail.com>
Message-ID: <CANkVCd4Fbbrs+1BO=cJ8kkc3zvkeF_GLbG=a=uiJh=Yup2o-Sw@mail.gmail.com>

Hi Henrik,

It produces the same result.

Regards,
Kieran

On Tue, 12 Apr 2022, 23:13 Henrik Bengtsson, <henrik.bengtsson at gmail.com>
wrote:

> Shooting from the hip: What happens if you compile with -O2 instead of -O3?
>
> Henrik
>
> On Mon, Apr 11, 2022, 18:27 Kieran Short <kieran.short at gmail.com> wrote:
>
>> Hello,
>>
>> I'm new to this list, and have subscribed particularly because I've come
>> across an issue with building R from source with an AMD-based Zen
>> architecture under GCC11. Please don't attack me for my linux operating
>> system choice, but it is Ubuntu 20.04 with Linux Kernel 5.10.102.1 -
>> microsoft-standard-WSL2. I've built GCC11 using GCC8 (the standard GCC
>> under Ubuntu20.04 WSL release), under Windows11 with wslg. WSL2/g runs as
>> a
>> hypervisor with ports to all system resources including display, GPU
>> (cuda,
>> etc).
>>
>> The reason why I am posting this email is that I am trying to compile R
>> using the AMD Zen3 platform architecture rather than x86/64, because it
>> has
>> processor-specific optimizations that improve performance over the
>> standard
>> x86/64 in benchmarks. The Zen3 architecture optimizations are not
>> available
>> in earlier versions of GCC (actually, they have possibly been backported
>> to
>> GCC10 now). Since Ubuntu 20.04 doesn't have GCC11, I compiled the GCC11
>> compiler using the native GCC8.
>>
>> The GCC11 I have built can build R 4.1.3 with a standard x86-64
>> architecture and pass all tests with "make check-all".
>> I configured that with:
>> > ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
>> CXXFLAGS="-O3 -march=x86-64" CFLAGS="-O3 -march=x86-64" FFLAGS="-O3
>> -march=x86-64" --enable-memory-profiling --enable-R-shlib
>> and built with
>> > make -j 32 -O
>> > make check-all
>> ## PASS.
>>
>> So I can build R in my environment with GCC11.
>> In configure, I am using references to "gcc-11.2" "gfortran-11.2" and
>> "g++-11.2" because I compiled GCC11 compilers with these suffixes.
>>
>> Now, I'm using a 32 thread (16 core) AMD Zen3 CPU (a 5950x), and want to
>> use it to its full potential. Zen3 optimizations are available as a
>> -march=znver3 option n GCC11. The znver3 optimizations improve performance
>> in Phoronix Test Suite benchmarks (I'm not aware of anyone that has
>> compiled R with them). See:
>> https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11
>>
>> However, the R 4.1.3 build (made with "make -j 32 -O"), configured with
>> -march=znver3, produces an R that fails "make check-all".
>>
>> > ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
>> CXXFLAGS="-O2 -march=znver3" CFLAGS="-O2 -march=znver3" FFLAGS="-O2
>> -march=znver3" --enable-memory-profiling --enable-R-shlib
>> or
>> > ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
>> CXXFLAGS="-O3 -march=znver3" CFLAGS="-O3 -march=znver3" FFLAGS="-O3
>> -march=znver3" --enable-memory-profiling --enable-R-shlib
>>
>> The fail is always in the factorizing.R Matrix.R tests, and in particular,
>> there are a number of errors and a fatal error.
>> I have attached the output because I cannot really understand what is
>> going
>> wrong. But results returned from matrix calculations are obviously odd
>> with
>> -march=znver3 in GCC 11. There is another backwards-compatible
>> architecture
>> option "znver2" and this has EXACTLY the same result.
>>
>> While there are other warrnings and errors (many in assert.EQ() ), the
>> factorizing.R script continues. The fatal error (at line 2662 in the
>> attached factorizing.Rout.fail text file) is:
>>
>> > ## problematic rank deficient rankMatrix() case -- only seen in large
>> cases ??
>> > Z. <- readRDS(system.file("external", "Z_NA_rnk.rds", package="Matrix"))
>> > tools::assertWarning(rnkZ. <- rankMatrix(Z., method = "qr")) # gave
>> errors
>> Error in assertCondition(expr, classes, .exprString = d.expr) :
>>   Failed to get warning in evaluating rnkZ. <- rankMatrix(Z., method  ...
>> Calls: <Anonymous> -> assertCondition
>> Execution halted
>>
>> Can anybody shed light on what might be going on here? 'make check-all'
>> passes all the other checks. It is just factorizing.R in Matrix that fails
>> (other matrix tests run ok).
>> Sorry this is a bit long-winded, but I thought details might be important.
>>
>> best regards,
>> Kieran
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From Reece@God|ng @end|ng |rom out|ook@com  Tue Apr 12 23:31:52 2022
From: Reece@God|ng @end|ng |rom out|ook@com (Reece Goding)
Date: Tue, 12 Apr 2022 21:31:52 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <CAD4oTHH0n9-oM23TXLTGyO6HHAH3AMSR+kAeJv2Q_T_iQTk6LA@mail.gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
 <CAD4oTHH0n9-oM23TXLTGyO6HHAH3AMSR+kAeJv2Q_T_iQTk6LA@mail.gmail.com>
Message-ID: <LO2P123MB5357658F0C4AD90F664774D48AED9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>

Hi Gabriel,

Thanks for the feedback. Much of what you've said seems to agree with a common trend that I've seen in other feedback. Namely, you seem to agree with the many that have told me that using R as anything other than as a tool for data analysis was a grave mistake. I'm increasingly starting to suspect that you're all right. I therefore have little to no counters to your points.

As for what you've said in reply to my "mapply challenge", I admit that your response is logical and may even be the best possible answer. However, I find it disturbing that the solution to my puzzle appears to rest on a having a very careful and very specific understanding of what the words "vectorize over" means in the documentation. You could well be right, but it doesn't sit well with me.

I'll further consider what you've said about the rest. I'm already making some changes.

Thanks again,
Reece

________________________________________
From: Gabriel Becker <gabembecker at gmail.com>
Sent: 12 April 2022 00:28
To: Toby Hocking; Reece.Goding at outlook.com
Cc: r-devel at r-project.org
Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?

Hi Reece,

I'm not really sure what kind of review you're looking for (and I'm not certain this is the right place for it, but hopefully its ok enough). Also, to channel Pascal, forgive me, I would have written a shorter response but I didn't have the time.

Firstly, it is fairly ... partisan, I suppose, for lack of a better term.

More importantly from a usefulness perspective you often notably don't present the knowledge you gained at the end of the various frustrations you had. As one example that jumped out to me, you say

"One day, you?ll be tripped up by R?s hierarchy of how it likes to simplify mixed types outside of lists. "

but you don't present your readers with the (well defined) coercion hierarchy so that they would, you know, not be tripped up by it as badly. This is probably my largest issue with your document overall. It can give the reader talking points about how R is bad (not all of which are even incorrect, per se, as many expert R users will be happy to tell you), but it won't really help people become better R users in many cases.

Your article also, I suspect, fails to understand what a typical "Novice R Users" is and what they want to do. By and large they want to analyze data and create plots. They are analysts, NOT programmers (writing analysis scripts is not programming in the typical sense, and I'm not the only one who thinks that).

So the point you make early on in your explanation why you do not strongly recommend R For Data Science (which I had no part in writing and have not read myself) that it

"It deliberately avoids the fundamentals of programming ? e.g. making functions, loops, and if statements ? until the second half. I therefore suspect that any non-novice would be better off finding an introduction to the relevant packages with their favourite search engine."

misses the point of R itself for what I'd claim is the "typical novice R user".

Having read through your review, I'm confused why you were using R to do some of the things I'm inferring that you felt like you needed it to do. If you picked up R  wanting an applicable equally to all programming problem domains general purpose language, you're going to have a bad time. Mostly because that is not what R is.

Finally, a (very) incomplete response to a few of the more specific points raised in your review:

Lists:

The linked stack overflow question (https://stackoverflow.com/questions/2050790/how-to-correctly-use-lists-in-r) shows a pretty fundamental misunderstanding of what lists and atomic vectors are/do in R. There is nothing wrong with this, asking questions we don't know the answer to is how we learn, but I'm not sure the question serves as well as a primer for R lists as you claim. The top answer at time of writing discusses the C level structure of R objects, which can, I suppose, inform your knowledge on how lists at the R level work, but is NOT necessary nor the most pedagogically useful way to present it.

Strings:

Strings are not arrays of characters idiomatically at the R level, they are atomic observed values within a (character) vector of data. Yes, deep down in the C code they are arrays of characters, but not at the R level. As such, splitting the elements of a character vector into their respective component individual characters is not (at all, in my experience) a common operation. charvec[1] within typical R usage (where charvec is a vector of data) is much more likely to be intended to select the first observation for the data vector, which it does. Given what R is for, frankly I think it'd be fairly insane for charvec[1] to do what substr does.

Variable Manipulation

Novice users shouldn't be calling eval. This is not to gatekeep it from them, like we have some special "eval-callers" club that they're not invited to. Rather, it is me saying that metaprogramming is not a novice-difficulty task in R (or, I would expect, anywhere else really).

You also say "variable names" in this section where you mean "argument names" and that distinction is both meaningful and important. Variable names, are not partially matched:

> xyz <- 5

> x

Error: object 'x' not found

Subsetting:

I'm fairly certain arrays (including 2d matrices are stored in column order rather than row order because that has been the standard for linear algebra on computers since before I knew what either of those things were...

tail(x,1) is the idiomatic way of getting the last element of a vector. The people on stackoverflow that told you this was "very slow" were misguided at best. It takes ~6000 nanoseconds on my laptop, compared to the ~200 nanoseconds x[length(x)]. Yes, that is a 30x speedup; no, it doesn't matter in practice.

I'm going to stop now because this is already too long, but this type of response continues to be possible throughout.

Lastly, with regard to your mapply challenge. and I quote directly from the documentation (emphasis mine):


   ...: arguments to vectorize over (vectors or lists of strictly

          positive length, or all of zero length).  See also ?Details?.

   MoreArgs: a list of other arguments to ?FUN?.



... is the arguments you vectorize over, so FUN gets one element of each thing in ... for each call. MoreArgs, then, is the set of arguments to FUN which you don't vectorize over, ie where each call to FUN gets the whole thing. That's it, that's the whole thing.


I don't disagree that this could be clearer (as Ben pointed out, a documentation patch would be the way to address this), but its not correct to say the information isn't in there at all.


Best,

~G

On Mon, Apr 11, 2022 at 1:52 PM Toby Hocking <tdhock5 at gmail.com<mailto:tdhock5 at gmail.com>> wrote:
You could take some of your observations and turn them into patches that
would help improve R. (discussion of such patches is one function of this
email list)

On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
r-devel at r-project.org<mailto:r-devel at r-project.org>> wrote:

> Hi Reece,
>
>
> Thanks for the article. What specific feedback do you seek for your
> writing?
>
>
> Kindest Regards,
> *Stephen Dawson, DSL*
> /Executive Strategy Consultant/
> Business & Technology
> +1 (865) 804-3454
> http://www.shdawson.com
>
>
> On 4/9/22 15:52, Reece Goding wrote:
> > Hello,
> >
> > For a while, I've been working on writing a very big review of R. I've
> finally finished my final proofread of it. Can I get some feedback? This
> seems the most appropriate place to ask. It's linked below.
> >
> > https://github.com/ReeceGoding/Frustration-One-Year-With-R
> >
> > If you think you've seen it before, that will be because it found some
> popularity on Hacker News before I was done proofreading it. The reception
> seems largely positive so far.
> >
> > Thanks,
> > Reece Goding
> > ______________________________________________
> > R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From pro|jcn@@h @end|ng |rom gm@||@com  Wed Apr 13 00:05:26 2022
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Tue, 12 Apr 2022 18:05:26 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357658F0C4AD90F664774D48AED9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
 <CAD4oTHH0n9-oM23TXLTGyO6HHAH3AMSR+kAeJv2Q_T_iQTk6LA@mail.gmail.com>
 <LO2P123MB5357658F0C4AD90F664774D48AED9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <7baf4be0-6b89-0002-1541-f912807f488f@gmail.com>

Actually, some of us use R as a quite effective tool for testing and evaluating optimization,
nonlinear least squares codes, and some other numerical algorithms, as well as for one-off
or at least limited number of runs cases. R allows a lot of flexibility in trying out ideas
for such tasks where the goal is to check that the solution is a good one. Reliability
rather than speed.

My experience is that R is at least as good a programming environment for this as any other
I've used e.g., Matlab, Fortran, Pascal, BASIC, C, Python, and a few others now of historical
interest only. Who's up for Modula2, APL, QNial, Algol, Algol68, forth, or that wonderful tool,
Assembler? I've used them all, and now prefer R. I might be tempted to try Julia once it
stabilizes. For now it seems to have a lot of similarities to a greased piglet at a fairground
competition.

I do almost no data analysis with R myself, though others do, I believe, use my software in that
pursuit. Given that some of your complaints about R nuisances have a basis, I'll simply note that all
programming languages have their annoyances. At least R is community-based and we can provide those
wonderful "small reproducible examples" and quite often get improvements, and if we offer good
patches, they do get into the distributed code. I've managed to do that in the space of a few
months with R. A reported bug in Excel ... still there I think after over 2 decades. I gave up
waiting.

As others have written in replies to your request, it is worth focusing on what may be fixable and
seeing what can be done, either to fix those issues or to document things to help users. And I
think it sensible to assume ALL of us are novices in areas beyond where we toil daily. R users
cover a huge range of interests, so experts in one aspect are beginners in another.

John Nash


On 2022-04-12 17:31, Reece Goding wrote:
> Hi Gabriel,
> 
> Thanks for the feedback. Much of what you've said seems to agree with a common trend that I've seen in other feedback. Namely, you seem to agree with the many that have told me that using R as anything other than as a tool for data analysis was a grave mistake. I'm increasingly starting to suspect that you're all right. I therefore have little to no counters to your points.
> 
> As for what you've said in reply to my "mapply challenge", I admit that your response is logical and may even be the best possible answer. However, I find it disturbing that the solution to my puzzle appears to rest on a having a very careful and very specific understanding of what the words "vectorize over" means in the documentation. You could well be right, but it doesn't sit well with me.
> 
> I'll further consider what you've said about the rest. I'm already making some changes.
> 
> Thanks again,
> Reece
> 
> ________________________________________
> From: Gabriel Becker <gabembecker at gmail.com>
> Sent: 12 April 2022 00:28
> To: Toby Hocking; Reece.Goding at outlook.com
> Cc: r-devel at r-project.org
> Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?
> 
> Hi Reece,
> 
> I'm not really sure what kind of review you're looking for (and I'm not certain this is the right place for it, but hopefully its ok enough). Also, to channel Pascal, forgive me, I would have written a shorter response but I didn't have the time.
> 
> Firstly, it is fairly ... partisan, I suppose, for lack of a better term.
> 
> More importantly from a usefulness perspective you often notably don't present the knowledge you gained at the end of the various frustrations you had. As one example that jumped out to me, you say
> 
> "One day, you?ll be tripped up by R?s hierarchy of how it likes to simplify mixed types outside of lists."
> 
> but you don't present your readers with the (well defined) coercion hierarchy so that they would, you know, not be tripped up by it as badly. This is probably my largest issue with your document overall. It can give the reader talking points about how R is bad (not all of which are even incorrect, per se, as many expert R users will be happy to tell you), but it won't really help people become better R users in many cases.
> 
> Your article also, I suspect, fails to understand what a typical "Novice R Users" is and what they want to do. By and large they want to analyze data and create plots. They are analysts, NOT programmers (writing analysis scripts is not programming in the typical sense, and I'm not the only one who thinks that).
> 
> So the point you make early on in your explanation why you do not strongly recommend R For Data Science (which I had no part in writing and have not read myself) that it
> 
> "It deliberately avoids the fundamentals of programming ? e.g. making functions, loops, and if statements ? until the second half. I therefore suspect that any non-novice would be better off finding an introduction to the relevant packages with their favourite search engine."
> 
> misses the point of R itself for what I'd claim is the "typical novice R user".
> 
> Having read through your review, I'm confused why you were using R to do some of the things I'm inferring that you felt like you needed it to do. If you picked up R  wanting an applicable equally to all programming problem domains general purpose language, you're going to have a bad time. Mostly because that is not what R is.
> 
> Finally, a (very) incomplete response to a few of the more specific points raised in your review:
> 
> Lists:
> 
> The linked stack overflow question (https://stackoverflow.com/questions/2050790/how-to-correctly-use-lists-in-r) shows a pretty fundamental misunderstanding of what lists and atomic vectors are/do in R. There is nothing wrong with this, asking questions we don't know the answer to is how we learn, but I'm not sure the question serves as well as a primer for R lists as you claim. The top answer at time of writing discusses the C level structure of R objects, which can, I suppose, inform your knowledge on how lists at the R level work, but is NOT necessary nor the most pedagogically useful way to present it.
> 
> Strings:
> 
> Strings are not arrays of characters idiomatically at the R level, they are atomic observed values within a (character) vector of data. Yes, deep down in the C code they are arrays of characters, but not at the R level. As such, splitting the elements of a character vector into their respective component individual characters is not (at all, in my experience) a common operation. charvec[1] within typical R usage (where charvec is a vector of data) is much more likely to be intended to select the first observation for the data vector, which it does. Given what R is for, frankly I think it'd be fairly insane for charvec[1] to do what substr does.
> 
> Variable Manipulation
> 
> Novice users shouldn't be calling eval. This is not to gatekeep it from them, like we have some special "eval-callers" club that they're not invited to. Rather, it is me saying that metaprogramming is not a novice-difficulty task in R (or, I would expect, anywhere else really).
> 
> You also say "variable names" in this section where you mean "argument names" and that distinction is both meaningful and important. Variable names, are not partially matched:
> 
>> xyz <- 5
> 
>> x
> 
> Error: object 'x' not found
> 
> Subsetting:
> 
> I'm fairly certain arrays (including 2d matrices are stored in column order rather than row order because that has been the standard for linear algebra on computers since before I knew what either of those things were...
> 
> tail(x,1) is the idiomatic way of getting the last element of a vector. The people on stackoverflow that told you this was "very slow" were misguided at best. It takes ~6000 nanoseconds on my laptop, compared to the ~200 nanoseconds x[length(x)]. Yes, that is a 30x speedup; no, it doesn't matter in practice.
> 
> I'm going to stop now because this is already too long, but this type of response continues to be possible throughout.
> 
> Lastly, with regard to your mapply challenge. and I quote directly from the documentation (emphasis mine):
> 
> 
>     ...: arguments to vectorize over (vectors or lists of strictly
> 
>            positive length, or all of zero length).  See also ?Details?.
> 
>     MoreArgs: a list of other arguments to ?FUN?.
> 
> 
> 
> ... is the arguments you vectorize over, so FUN gets one element of each thing in ... for each call. MoreArgs, then, is the set of arguments to FUN which you don't vectorize over, ie where each call to FUN gets the whole thing. That's it, that's the whole thing.
> 
> 
> I don't disagree that this could be clearer (as Ben pointed out, a documentation patch would be the way to address this), but its not correct to say the information isn't in there at all.
> 
> 
> Best,
> 
> ~G
> 
> On Mon, Apr 11, 2022 at 1:52 PM Toby Hocking <tdhock5 at gmail.com<mailto:tdhock5 at gmail.com>> wrote:
> You could take some of your observations and turn them into patches that
> would help improve R. (discussion of such patches is one function of this
> email list)
> 
> On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
> r-devel at r-project.org<mailto:r-devel at r-project.org>> wrote:
> 
>> Hi Reece,
>>
>>
>> Thanks for the article. What specific feedback do you seek for your
>> writing?
>>
>>
>> Kindest Regards,
>> *Stephen Dawson, DSL*
>> /Executive Strategy Consultant/
>> Business & Technology
>> +1 (865) 804-3454
>> http://www.shdawson.com
>>
>>
>> On 4/9/22 15:52, Reece Goding wrote:
>>> Hello,
>>>
>>> For a while, I've been working on writing a very big review of R. I've
>> finally finished my final proofread of it. Can I get some feedback? This
>> seems the most appropriate place to ask. It's linked below.
>>>
>>> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>>>
>>> If you think you've seen it before, that will be because it found some
>> popularity on Hacker News before I was done proofreading it. The reception
>> seems largely positive so far.
>>>
>>> Thanks,
>>> Reece Goding
>>> ______________________________________________
>>> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
>          [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 13 08:00:02 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 13 Apr 2022 08:00:02 +0200
Subject: [Rd] 
 Matrix issues when building R with znver3 architecture under GCC 11
In-Reply-To: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
References: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
Message-ID: <0b8d32ef-8426-6c92-0798-e28dfd4b6bba@gmail.com>

Hi Kieran,

On 4/12/22 02:36, Kieran Short wrote:
> Hello,
>
> I'm new to this list, and have subscribed particularly because I've come
> across an issue with building R from source with an AMD-based Zen
> architecture under GCC11. Please don't attack me for my linux operating
> system choice, but it is Ubuntu 20.04 with Linux Kernel 5.10.102.1 -
> microsoft-standard-WSL2. I've built GCC11 using GCC8 (the standard GCC
> under Ubuntu20.04 WSL release), under Windows11 with wslg. WSL2/g runs as a
> hypervisor with ports to all system resources including display, GPU (cuda,
> etc).
>
> The reason why I am posting this email is that I am trying to compile R
> using the AMD Zen3 platform architecture rather than x86/64, because it has
> processor-specific optimizations that improve performance over the standard
> x86/64 in benchmarks. The Zen3 architecture optimizations are not available
> in earlier versions of GCC (actually, they have possibly been backported to
> GCC10 now). Since Ubuntu 20.04 doesn't have GCC11, I compiled the GCC11
> compiler using the native GCC8.
>
> The GCC11 I have built can build R 4.1.3 with a standard x86-64
> architecture and pass all tests with "make check-all".
> I configured that with:
>> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> CXXFLAGS="-O3 -march=x86-64" CFLAGS="-O3 -march=x86-64" FFLAGS="-O3
> -march=x86-64" --enable-memory-profiling --enable-R-shlib
> and built with
>> make -j 32 -O
>> make check-all
> ## PASS.
>
> So I can build R in my environment with GCC11.
> In configure, I am using references to "gcc-11.2" "gfortran-11.2" and
> "g++-11.2" because I compiled GCC11 compilers with these suffixes.
>
> Now, I'm using a 32 thread (16 core) AMD Zen3 CPU (a 5950x), and want to
> use it to its full potential. Zen3 optimizations are available as a
> -march=znver3 option n GCC11. The znver3 optimizations improve performance
> in Phoronix Test Suite benchmarks (I'm not aware of anyone that has
> compiled R with them). See:
> https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11
>
> However, the R 4.1.3 build (made with "make -j 32 -O"), configured with
> -march=znver3, produces an R that fails "make check-all".
>
>> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> CXXFLAGS="-O2 -march=znver3" CFLAGS="-O2 -march=znver3" FFLAGS="-O2
> -march=znver3" --enable-memory-profiling --enable-R-shlib
> or
>> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> CXXFLAGS="-O3 -march=znver3" CFLAGS="-O3 -march=znver3" FFLAGS="-O3
> -march=znver3" --enable-memory-profiling --enable-R-shlib
>
> The fail is always in the factorizing.R Matrix.R tests, and in particular,
> there are a number of errors and a fatal error.
> I have attached the output because I cannot really understand what is going
> wrong. But results returned from matrix calculations are obviously odd with
> -march=znver3 in GCC 11. There is another backwards-compatible architecture
> option "znver2" and this has EXACTLY the same result.
>
> While there are other warrnings and errors (many in assert.EQ() ), the
> factorizing.R script continues. The fatal error (at line 2662 in the
> attached factorizing.Rout.fail text file) is:
>
>> ## problematic rank deficient rankMatrix() case -- only seen in large
> cases ??
>> Z. <- readRDS(system.file("external", "Z_NA_rnk.rds", package="Matrix"))
>> tools::assertWarning(rnkZ. <- rankMatrix(Z., method = "qr")) # gave errors
> Error in assertCondition(expr, classes, .exprString = d.expr) :
>    Failed to get warning in evaluating rnkZ. <- rankMatrix(Z., method  ...
> Calls: <Anonymous> -> assertCondition
> Execution halted
>
> Can anybody shed light on what might be going on here? 'make check-all'
> passes all the other checks. It is just factorizing.R in Matrix that fails
> (other matrix tests run ok).
> Sorry this is a bit long-winded, but I thought details might be important.

R gets used and tested most with the default optimizations, without use 
of model-specific instructions and with -O2 (GCC). It happens time to 
time that some people try other optimization options and run into 
problems. In principle, there are these cases (seen before):

(1) the test in R package (or R) is wrong - it (unintentionally) expects 
behavior which has been observed in builds with default optimizations, 
but is not necessarily the only correct one; in case of numerical 
tolerances set empirically, they could simply be too tight

(2) the algorithm in R package or R has a bug - the result is really 
wrong and it is because the algorithm is (unintentionally) not portable 
enough, it (unintentionally) only works with default optimizations or 
lower; in case of numerical results, this can be because it expects more 
precision from the floating point computations than mandated by IEEE, or 
assumes behavior not mandated

(3) the optimization by design violates some properties the algorithm 
knowingly depends on; with numerical computations, this can be a sort of 
"fast" (and similarly referred to) mode which violates IEEE floating 
point standard by design, in the aim of better performance; due to the 
nature of the algorithm depending on IEEE, and poor luck, the results 
end up completely wrong

(4) there is a bug in the C or Fortran compiler (GCC as we use GCC) that 
only exhibits with the unusual optimizations; the compiler produces 
wrong code

So, when you run into a problem like this and want to get that fixed, 
the first thing is to identify which case of the above it is, in case of 
1 and 2 also differentiate between base R and a package (and which 
concrete package). Different people maintain these things and you would 
ideally narrow down the problem to a very small, isolated, reproducible 
example to support your claim where the bug is. If you do this right, 
the problem can often get fixed very fast.

Such an example for (1) could be: few lines of standalone R code using 
Matrix that produces correct results, but the test is not happy. With 
pointers to the real check in the tests that is wrong. And an 
explanation why the result is wrong.

For (2)-(4) it would be a minimal standalone C/Fortran example including 
only the critical function/part of algorithm that is not correct/not 
portable/not compiled correctly, with results obtained with 
optimizations where it works and where it doesn't. Unless you find an 
obvious bug in R easy to explain (2), when the example would not have to 
be standalone. With such standalone C example, you could easily test the 
results with different optimizations and compilers, it is easier to 
analyze, and easier to produce a bug report for GCC. What would make it 
harder in this case is that it needs special hardware, but you could 
still try with the example, and worry about that later (one option is 
running in an emulator, and again a standalone example really helps 
here). In principle, as it needs special hardware, the chances someone 
else would do this work is smaller. Indeed, if it turns out to be (3), 
it is unlikely to get resolved, but at least would get isolated (you 
would know what not to run).

As a user, if you run into a problem like this and do not want to get it 
fixed, but just work it around somehow. First, it may be dangerous, 
possibly one would get incorrect results from computations, but say in 
applications where they are verified externally. You could try disabling 
individual specific optimization until the tests pass. You could try 
with later versions of gcc-11 (even unreleased) or gcc-12. Still, a lot 
of this is easier with a small example, too. You could ignore the 
failing test. And it may not be worth it - it may be that you could get 
your speedups in a different, but more reliable way.

Using wsl2 on its own should not necessarily be a problem and the way 
you built gcc from the description should be ok, but at some point it 
would be worth checking under Linux and running natively - because even 
if these are numerical differences, they could be in principle caused by 
running on Windows (or in wsl2), at least in the past such differences 
were seen (related to (2) above). I would recommend checking on Linux 
natively once you have at least a standalone R example.

Best
Tomas


>
> best regards,
> Kieran
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Wed Apr 13 09:50:05 2022
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Wed, 13 Apr 2022 09:50:05 +0200
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357658F0C4AD90F664774D48AED9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
 <CAD4oTHH0n9-oM23TXLTGyO6HHAH3AMSR+kAeJv2Q_T_iQTk6LA@mail.gmail.com>
 <LO2P123MB5357658F0C4AD90F664774D48AED9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <4FB9B79C-1430-48F9-9A4F-EEE9D3DE3B35@uzh.ch>

Hi Reece, 

> Thanks for the feedback. Much of what you've said seems to agree with a common trend that I've seen in other feedback. Namely, you seem to agree with the many that have told me that using R as anything other than as a tool for data analysis was a grave mistake. I'm increasingly starting to suspect that you're all right. I therefore have little to no counters to your points.

We have used R to develop fairly complex data transformation pipelines (which include custom data validation, custom async task scheduling layer and other non-trivial components), and I regularly use R to prototype complex data structure algorithms before implementing them in something more low-level like C. It can be a pain sometimes of course, but R is very well suited for data-oriented design, especially when you leverage the excellent low-level work done by the tidyverse group (especially rlang, vctrs and purrr). Of course, if you are used to OOP everywhere it will be very tough, but it?s the 21st century after all, not the nineties :)

Overall, I would say that there are three big issues with R that I don?t think can be fixed (the fourth smaller issue is the standard library, but thats a different discussion):

1. The type system is very weak and idiosyncratic, this makes more complex applications difficult and error-prone. 

2. The language itself is unsound. R?s semantics have been developed on the fly, with new features driven by the pragmatic necessity.  R is essentially LISP with C-like syntax and a very leaky runtime, all this makes it very powerful but also offers you multiple ways to shoot yourself in the foot. A very simple example: lazy evaluation in R is everywhere, but lazy expressions can contain side effects, which equals FUN. R?s philosophy here is very pragmatic: the user is responsible. And it works very well most of the time, until it doesn?t. 

3. The performance is bad, very bad. This is due to the fact that R?s runtime uses linked lists (arguably the worst data structure for modern hardware) everywhere and you can?t do even the simplest operation without performing multiple memory allocations. R?s core team did some fantastic work in the recent years, like the inclusion of the byte code compiler, lazy data types (ALTREP) etc., but there is only that much one can do under the circumstances. 

I do think one could make a next-gen R by giving it sound evaluation semantics, consistent (stricter) type system, first class-support for meta programming hygiene, drop the linked list implementation in favour of something modern like immutable data structures etc. ect? and it would be a very nifty and powerful little data processing language. Unfortunately, it will also break all the existing code, rendering it fairly useless. Because if one goes though all that effort one might as well just migrate to Julia. 

In the end, R might be frustrating at times and its implementation is dated, but it is still very much usable. And of course, it is the language we love and cherish, and so we carry on :)

Best, 

Taras




> On 12 Apr 2022, at 23:31, Reece Goding <Reece.Goding at outlook.com> wrote:
> 
> Hi Gabriel,
> 
> Thanks for the feedback. Much of what you've said seems to agree with a common trend that I've seen in other feedback. Namely, you seem to agree with the many that have told me that using R as anything other than as a tool for data analysis was a grave mistake. I'm increasingly starting to suspect that you're all right. I therefore have little to no counters to your points.
> 
> As for what you've said in reply to my "mapply challenge", I admit that your response is logical and may even be the best possible answer. However, I find it disturbing that the solution to my puzzle appears to rest on a having a very careful and very specific understanding of what the words "vectorize over" means in the documentation. You could well be right, but it doesn't sit well with me.
> 
> I'll further consider what you've said about the rest. I'm already making some changes.
> 
> Thanks again,
> Reece
> 
> ________________________________________
> From: Gabriel Becker <gabembecker at gmail.com <mailto:gabembecker at gmail.com>>
> Sent: 12 April 2022 00:28
> To: Toby Hocking; Reece.Goding at outlook.com <mailto:Reece.Goding at outlook.com>
> Cc: r-devel at r-project.org <mailto:r-devel at r-project.org>
> Subject: Re: [Rd] I've written a big review of R. Can I get some feedback?
> 
> Hi Reece,
> 
> I'm not really sure what kind of review you're looking for (and I'm not certain this is the right place for it, but hopefully its ok enough). Also, to channel Pascal, forgive me, I would have written a shorter response but I didn't have the time.
> 
> Firstly, it is fairly ... partisan, I suppose, for lack of a better term.
> 
> More importantly from a usefulness perspective you often notably don't present the knowledge you gained at the end of the various frustrations you had. As one example that jumped out to me, you say
> 
> "One day, you?ll be tripped up by R?s hierarchy of how it likes to simplify mixed types outside of lists. "
> 
> but you don't present your readers with the (well defined) coercion hierarchy so that they would, you know, not be tripped up by it as badly. This is probably my largest issue with your document overall. It can give the reader talking points about how R is bad (not all of which are even incorrect, per se, as many expert R users will be happy to tell you), but it won't really help people become better R users in many cases.
> 
> Your article also, I suspect, fails to understand what a typical "Novice R Users" is and what they want to do. By and large they want to analyze data and create plots. They are analysts, NOT programmers (writing analysis scripts is not programming in the typical sense, and I'm not the only one who thinks that).
> 
> So the point you make early on in your explanation why you do not strongly recommend R For Data Science (which I had no part in writing and have not read myself) that it
> 
> "It deliberately avoids the fundamentals of programming ? e.g. making functions, loops, and if statements ? until the second half. I therefore suspect that any non-novice would be better off finding an introduction to the relevant packages with their favourite search engine."
> 
> misses the point of R itself for what I'd claim is the "typical novice R user".
> 
> Having read through your review, I'm confused why you were using R to do some of the things I'm inferring that you felt like you needed it to do. If you picked up R wanting an applicable equally to all programming problem domains general purpose language, you're going to have a bad time. Mostly because that is not what R is.
> 
> Finally, a (very) incomplete response to a few of the more specific points raised in your review:
> 
> Lists:
> 
> The linked stack overflow question (https://stackoverflow.com/questions/2050790/how-to-correctly-use-lists-in-r) shows a pretty fundamental misunderstanding of what lists and atomic vectors are/do in R. There is nothing wrong with this, asking questions we don't know the answer to is how we learn, but I'm not sure the question serves as well as a primer for R lists as you claim. The top answer at time of writing discusses the C level structure of R objects, which can, I suppose, inform your knowledge on how lists at the R level work, but is NOT necessary nor the most pedagogically useful way to present it.
> 
> Strings:
> 
> Strings are not arrays of characters idiomatically at the R level, they are atomic observed values within a (character) vector of data. Yes, deep down in the C code they are arrays of characters, but not at the R level. As such, splitting the elements of a character vector into their respective component individual characters is not (at all, in my experience) a common operation. charvec[1] within typical R usage (where charvec is a vector of data) is much more likely to be intended to select the first observation for the data vector, which it does. Given what R is for, frankly I think it'd be fairly insane for charvec[1] to do what substr does.
> 
> Variable Manipulation
> 
> Novice users shouldn't be calling eval. This is not to gatekeep it from them, like we have some special "eval-callers" club that they're not invited to. Rather, it is me saying that metaprogramming is not a novice-difficulty task in R (or, I would expect, anywhere else really).
> 
> You also say "variable names" in this section where you mean "argument names" and that distinction is both meaningful and important. Variable names, are not partially matched:
> 
>> xyz <- 5
> 
>> x
> 
> Error: object 'x' not found
> 
> Subsetting:
> 
> I'm fairly certain arrays (including 2d matrices are stored in column order rather than row order because that has been the standard for linear algebra on computers since before I knew what either of those things were...
> 
> tail(x,1) is the idiomatic way of getting the last element of a vector. The people on stackoverflow that told you this was "very slow" were misguided at best. It takes ~6000 nanoseconds on my laptop, compared to the ~200 nanoseconds x[length(x)]. Yes, that is a 30x speedup; no, it doesn't matter in practice.
> 
> I'm going to stop now because this is already too long, but this type of response continues to be possible throughout.
> 
> Lastly, with regard to your mapply challenge. and I quote directly from the documentation (emphasis mine):
> 
> 
> ...: arguments to vectorize over (vectors or lists of strictly
> 
> positive length, or all of zero length). See also ?Details?.
> 
> MoreArgs: a list of other arguments to ?FUN?.
> 
> 
> 
> ... is the arguments you vectorize over, so FUN gets one element of each thing in ... for each call. MoreArgs, then, is the set of arguments to FUN which you don't vectorize over, ie where each call to FUN gets the whole thing. That's it, that's the whole thing.
> 
> 
> I don't disagree that this could be clearer (as Ben pointed out, a documentation patch would be the way to address this), but its not correct to say the information isn't in there at all.
> 
> 
> Best,
> 
> ~G
> 
> On Mon, Apr 11, 2022 at 1:52 PM Toby Hocking <tdhock5 at gmail.com <mailto:tdhock5 at gmail.com><mailto:tdhock5 at gmail.com <mailto:tdhock5 at gmail.com>>> wrote:
> You could take some of your observations and turn them into patches that
> would help improve R. (discussion of such patches is one function of this
> email list)
> 
> On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
> r-devel at r-project.org <mailto:r-devel at r-project.org><mailto:r-devel at r-project.org <mailto:r-devel at r-project.org>>> wrote:
> 
>> Hi Reece,
>> 
>> 
>> Thanks for the article. What specific feedback do you seek for your
>> writing?
>> 
>> 
>> Kindest Regards,
>> *Stephen Dawson, DSL*
>> /Executive Strategy Consultant/
>> Business & Technology
>> +1 (865) 804-3454
>> http://www.shdawson.com <http://www.shdawson.com/>
>> 
>> 
>> On 4/9/22 15:52, Reece Goding wrote:
>>> Hello,
>>> 
>>> For a while, I've been working on writing a very big review of R. I've
>> finally finished my final proofread of it. Can I get some feedback? This
>> seems the most appropriate place to ask. It's linked below.
>>> 
>>> https://github.com/ReeceGoding/Frustration-One-Year-With-R <https://github.com/ReeceGoding/Frustration-One-Year-With-R>
>>> 
>>> If you think you've seen it before, that will be because it found some
>> popularity on Hacker News before I was done proofreading it. The reception
>> seems largely positive so far.
>>> 
>>> Thanks,
>>> Reece Goding
>>> ______________________________________________
>>> R-devel at r-project.org <mailto:R-devel at r-project.org><mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>> mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org><mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> 
> 
> [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org><mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>
> 
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>

	[[alternative HTML version deleted]]


From k|er@n@@hort @end|ng |rom gm@||@com  Wed Apr 13 11:20:40 2022
From: k|er@n@@hort @end|ng |rom gm@||@com (Kieran Short)
Date: Wed, 13 Apr 2022 19:20:40 +1000
Subject: [Rd] 
 Matrix issues when building R with znver3 architecture under GCC 11
In-Reply-To: <0b8d32ef-8426-6c92-0798-e28dfd4b6bba@gmail.com>
References: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
 <0b8d32ef-8426-6c92-0798-e28dfd4b6bba@gmail.com>
Message-ID: <CANkVCd6yfgwq4=+X85U=Cyg7KXtwZkyS1qOdu9Ti7hnQ0jmLzg@mail.gmail.com>

Hi Tomas,

Many thanks for your thorough response, it is very much appreciated and
what you say makes perfect sense to me.

I was relying on the in-built R compilation checks, I have been working on
the assumption that everything on the R side is correct (including the
matrix package).

Indeed, R 4.1.3 builds and "make check-all" passes with the more
general -march=x86-64 architecture compiled with -O3 optimizations (in my
hands, on the Zen3 system). So I had no underlying reason not to believe R
or its packages were the problem when -march=znver3 was trialed. I found it
interesting that it was only the one factorizing.R script in the Matrix
suite that failed (out of the seemingly hundreds of remaining checks
overall which passed). So I was more wondering if there might have been
prior knowledge within the brain's trust on this list that "oh the
factorizing.R matrix test does ABC error when R or the package is compiled
with GCC using XYZ flags". As you'll read ahead, you can say that now. :)

I don't think I have the capability to determine the root trigger in R
itself, the package, or the compiler (whichever one, or combination,  it
actually is). However, assuming R isn't the issue, I have done is go
through the GCC optimizations and I have now isolated the culprit
optimization which crashes factorizing.R.

It is "-fexpensive-optimizations".

If I use "-fno-expensive-optimizations" paired with -O2 or -O3
optimizations, all "make check-all" checks pass. So I can build a fully
checked and passed R 4.1.3 under my environment now with:

~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
CXXFLAGS="-O3 -march=znver3 -fno-expensive-optimizations -flto" CFLAGS="-O3
-march=znver3 -fno-expensive-optimizations -flto" FFLAGS="-O3 -march=znver3
-fno-expensive-optimizations -flto" --enable-memory-profiling
--enable-R-shlib

I'm yet to benchmark whether the loss of that particular optimization flag
negates the advantages of using znver3 as a core architecture target over a
-x86-64 target in the first place.
So I think I've solved my own problem (at least, it appears that way based
on the checks).
So the remaining question is, what method or package does the development
team use (if any) for testing the speed of various base R calculations?

best regards,
Kieran

On Wed, Apr 13, 2022 at 4:00 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> Hi Kieran,
>
> On 4/12/22 02:36, Kieran Short wrote:
> > Hello,
> >
> > I'm new to this list, and have subscribed particularly because I've come
> > across an issue with building R from source with an AMD-based Zen
> > architecture under GCC11. Please don't attack me for my linux operating
> > system choice, but it is Ubuntu 20.04 with Linux Kernel 5.10.102.1 -
> > microsoft-standard-WSL2. I've built GCC11 using GCC8 (the standard GCC
> > under Ubuntu20.04 WSL release), under Windows11 with wslg. WSL2/g runs
> as a
> > hypervisor with ports to all system resources including display, GPU
> (cuda,
> > etc).
> >
> > The reason why I am posting this email is that I am trying to compile R
> > using the AMD Zen3 platform architecture rather than x86/64, because it
> has
> > processor-specific optimizations that improve performance over the
> standard
> > x86/64 in benchmarks. The Zen3 architecture optimizations are not
> available
> > in earlier versions of GCC (actually, they have possibly been backported
> to
> > GCC10 now). Since Ubuntu 20.04 doesn't have GCC11, I compiled the GCC11
> > compiler using the native GCC8.
> >
> > The GCC11 I have built can build R 4.1.3 with a standard x86-64
> > architecture and pass all tests with "make check-all".
> > I configured that with:
> >> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> > CXXFLAGS="-O3 -march=x86-64" CFLAGS="-O3 -march=x86-64" FFLAGS="-O3
> > -march=x86-64" --enable-memory-profiling --enable-R-shlib
> > and built with
> >> make -j 32 -O
> >> make check-all
> > ## PASS.
> >
> > So I can build R in my environment with GCC11.
> > In configure, I am using references to "gcc-11.2" "gfortran-11.2" and
> > "g++-11.2" because I compiled GCC11 compilers with these suffixes.
> >
> > Now, I'm using a 32 thread (16 core) AMD Zen3 CPU (a 5950x), and want to
> > use it to its full potential. Zen3 optimizations are available as a
> > -march=znver3 option n GCC11. The znver3 optimizations improve
> performance
> > in Phoronix Test Suite benchmarks (I'm not aware of anyone that has
> > compiled R with them). See:
> > https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11
> >
> > However, the R 4.1.3 build (made with "make -j 32 -O"), configured with
> > -march=znver3, produces an R that fails "make check-all".
> >
> >> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> > CXXFLAGS="-O2 -march=znver3" CFLAGS="-O2 -march=znver3" FFLAGS="-O2
> > -march=znver3" --enable-memory-profiling --enable-R-shlib
> > or
> >> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
> > CXXFLAGS="-O3 -march=znver3" CFLAGS="-O3 -march=znver3" FFLAGS="-O3
> > -march=znver3" --enable-memory-profiling --enable-R-shlib
> >
> > The fail is always in the factorizing.R Matrix.R tests, and in
> particular,
> > there are a number of errors and a fatal error.
> > I have attached the output because I cannot really understand what is
> going
> > wrong. But results returned from matrix calculations are obviously odd
> with
> > -march=znver3 in GCC 11. There is another backwards-compatible
> architecture
> > option "znver2" and this has EXACTLY the same result.
> >
> > While there are other warrnings and errors (many in assert.EQ() ), the
> > factorizing.R script continues. The fatal error (at line 2662 in the
> > attached factorizing.Rout.fail text file) is:
> >
> >> ## problematic rank deficient rankMatrix() case -- only seen in large
> > cases ??
> >> Z. <- readRDS(system.file("external", "Z_NA_rnk.rds", package="Matrix"))
> >> tools::assertWarning(rnkZ. <- rankMatrix(Z., method = "qr")) # gave
> errors
> > Error in assertCondition(expr, classes, .exprString = d.expr) :
> >    Failed to get warning in evaluating rnkZ. <- rankMatrix(Z., method
> ...
> > Calls: <Anonymous> -> assertCondition
> > Execution halted
> >
> > Can anybody shed light on what might be going on here? 'make check-all'
> > passes all the other checks. It is just factorizing.R in Matrix that
> fails
> > (other matrix tests run ok).
> > Sorry this is a bit long-winded, but I thought details might be
> important.
>
> R gets used and tested most with the default optimizations, without use
> of model-specific instructions and with -O2 (GCC). It happens time to
> time that some people try other optimization options and run into
> problems. In principle, there are these cases (seen before):
>
> (1) the test in R package (or R) is wrong - it (unintentionally) expects
> behavior which has been observed in builds with default optimizations,
> but is not necessarily the only correct one; in case of numerical
> tolerances set empirically, they could simply be too tight
>
> (2) the algorithm in R package or R has a bug - the result is really
> wrong and it is because the algorithm is (unintentionally) not portable
> enough, it (unintentionally) only works with default optimizations or
> lower; in case of numerical results, this can be because it expects more
> precision from the floating point computations than mandated by IEEE, or
> assumes behavior not mandated
>
> (3) the optimization by design violates some properties the algorithm
> knowingly depends on; with numerical computations, this can be a sort of
> "fast" (and similarly referred to) mode which violates IEEE floating
> point standard by design, in the aim of better performance; due to the
> nature of the algorithm depending on IEEE, and poor luck, the results
> end up completely wrong
>
> (4) there is a bug in the C or Fortran compiler (GCC as we use GCC) that
> only exhibits with the unusual optimizations; the compiler produces
> wrong code
>
> So, when you run into a problem like this and want to get that fixed,
> the first thing is to identify which case of the above it is, in case of
> 1 and 2 also differentiate between base R and a package (and which
> concrete package). Different people maintain these things and you would
> ideally narrow down the problem to a very small, isolated, reproducible
> example to support your claim where the bug is. If you do this right,
> the problem can often get fixed very fast.
>
> Such an example for (1) could be: few lines of standalone R code using
> Matrix that produces correct results, but the test is not happy. With
> pointers to the real check in the tests that is wrong. And an
> explanation why the result is wrong.
>
> For (2)-(4) it would be a minimal standalone C/Fortran example including
> only the critical function/part of algorithm that is not correct/not
> portable/not compiled correctly, with results obtained with
> optimizations where it works and where it doesn't. Unless you find an
> obvious bug in R easy to explain (2), when the example would not have to
> be standalone. With such standalone C example, you could easily test the
> results with different optimizations and compilers, it is easier to
> analyze, and easier to produce a bug report for GCC. What would make it
> harder in this case is that it needs special hardware, but you could
> still try with the example, and worry about that later (one option is
> running in an emulator, and again a standalone example really helps
> here). In principle, as it needs special hardware, the chances someone
> else would do this work is smaller. Indeed, if it turns out to be (3),
> it is unlikely to get resolved, but at least would get isolated (you
> would know what not to run).
>
> As a user, if you run into a problem like this and do not want to get it
> fixed, but just work it around somehow. First, it may be dangerous,
> possibly one would get incorrect results from computations, but say in
> applications where they are verified externally. You could try disabling
> individual specific optimization until the tests pass. You could try
> with later versions of gcc-11 (even unreleased) or gcc-12. Still, a lot
> of this is easier with a small example, too. You could ignore the
> failing test. And it may not be worth it - it may be that you could get
> your speedups in a different, but more reliable way.
>
> Using wsl2 on its own should not necessarily be a problem and the way
> you built gcc from the description should be ok, but at some point it
> would be worth checking under Linux and running natively - because even
> if these are numerical differences, they could be in principle caused by
> running on Windows (or in wsl2), at least in the past such differences
> were seen (related to (2) above). I would recommend checking on Linux
> natively once you have at least a standalone R example.
>
> Best
> Tomas
>
>
> >
> > best regards,
> > Kieran
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 13 12:26:31 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 13 Apr 2022 12:26:31 +0200
Subject: [Rd] 
 Matrix issues when building R with znver3 architecture under GCC 11
In-Reply-To: <CANkVCd6yfgwq4=+X85U=Cyg7KXtwZkyS1qOdu9Ti7hnQ0jmLzg@mail.gmail.com>
References: <CANkVCd7HGyvejpEkweiEBKtNq28Fpr_ggZ30Tadf=tgD7Z_vpQ@mail.gmail.com>
 <0b8d32ef-8426-6c92-0798-e28dfd4b6bba@gmail.com>
 <CANkVCd6yfgwq4=+X85U=Cyg7KXtwZkyS1qOdu9Ti7hnQ0jmLzg@mail.gmail.com>
Message-ID: <e77b959a-ceec-79d9-0bc9-0f8638a51aac@gmail.com>


On 4/13/22 11:20, Kieran Short wrote:
> Hi Tomas,
>
> Many thanks for your thorough response, it is very much appreciated 
> and what you say makes perfect sense to me.
>
> I was relying on the in-built R compilation checks, I have been 
> working on the assumption that everything on the R side is correct 
> (including the matrix package).
>
> Indeed, R 4.1.3 builds and "make check-all" passes with the more 
> general?-march=x86-64 architecture compiled with -O3 optimizations (in 
> my hands, on the Zen3 system). So I had no underlying reason not to 
> believe R or its packages were the problem when -march=znver3 was 
> trialed. I found it interesting that it was only the one 
> factorizing.R?script in the Matrix suite that failed (out of the 
> seemingly hundreds of remaining checks overall which passed). So I was 
> more wondering if there might have been prior knowledge within the 
> brain's trust on this list that "oh the factorizing.R matrix test does 
> ABC error when R or the package is compiled with GCC using?XYZ flags". 
> As you'll read ahead, you can say that now. :)
Right, but something must be broken. You might get specific comments 
from the Matrix package maintainer, but it would help at least 
minimizing that failing example to some commands you can run in R 
console, and showing the differences in outputs.
>
> I don't think I have the capability to determine the root trigger in R 
> itself, the package, or the compiler (whichever one, or combination,? 
> it actually?is). However, assuming R isn't the issue, I have done is 
> go through the GCC optimizations and I have now isolated the culprit 
> optimization which crashes factorizing.R.
>
> It is "-fexpensive-optimizations".
>
> If I use?"-fno-expensive-optimizations" paired with -O2 or -O3 
> optimizations, all "make check-all" checks pass. So I can build a 
> fully checked and passed R 4.1.3 under my environment now with:
>
> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2 
> CXXFLAGS="-O3 -march=znver3 -fno-expensive-optimizations -flto" 
> CFLAGS="-O3 -march=znver3 -fno-expensive-optimizations -flto" 
> FFLAGS="-O3 -march=znver3 -fno-expensive-optimizations -flto" 
> --enable-memory-profiling --enable-R-shlib
Ok. The default optimization options used by R on selected current and 
future versions of GCC and clang also get tested via checking all of 
CRAN contributed packages. This testing sometimes finds errors not 
detected by "make check-all", including bugs in GCC. You would need a 
lot of resources to run these checks, though. In my experience it is not 
so rare that a bug (in R or GCC) only affects a very small number of 
packages, often even only one.
> I'm yet to benchmark whether the loss of that particular optimization 
> flag negates the advantages of using znver3 as a core architecture 
> target over a -x86-64 target in the first place.
> So I think I've solved my own problem (at least, it appears that way 
> based on the checks).
> So the remaining question is, what method or package does the 
> development team use (if any) for testing the speed of various base R 
> calculations?

That depends on the developer and the calculations, and on your goals - 
what you want to measure or show. I don't have a simple advice. If you 
are considering this for your own work, I'd recommend measuring some of 
your workloads. Also you can extrapolate from your workloads (from where 
time is spent in them) what would be a relevant benchmark. For example, 
if most time is spent in BLAS, then it is about finding a good optimized 
implementation (and for that checking the impact of the optimizations). 
Similarly, if it is some R package (base, recommended, or contributed), 
it may be using a computational kernel written in C or Fortran, 
something you could test separately or with a specific benchmark. I 
think it would be unlikely that CPU-specific C compiler optimizations 
would substantially speed up the R interpreter itself.

For just deciding whether -fno-expensive-optimization negates the gains, 
you might look at some general computational/other benchmarks (not R). 
If it negated it even on benchmarks used by others to present the gains, 
then it probably is not worth it.

One of the things I did in the past was looking at timings of selected 
CRAN packages (longer running examples, packages with most reverse 
dependencies) and then looking into the reasons for the individual 
bigger differences. That was when looking at the impacts of the 
byte-code compiler. Unlikely worth the effort in this case. Also, 
primarily, I think the bug should be traced down and fixed, wherever it 
is. Only then the measuring would make sense.

Best
Tomas



>
> best regards,
> Kieran
>
> On Wed, Apr 13, 2022 at 4:00 PM Tomas Kalibera 
> <tomas.kalibera at gmail.com> wrote:
>
>     Hi Kieran,
>
>     On 4/12/22 02:36, Kieran Short wrote:
>     > Hello,
>     >
>     > I'm new to this list, and have subscribed particularly because
>     I've come
>     > across an issue with building R from source with an AMD-based Zen
>     > architecture under GCC11. Please don't attack me for my linux
>     operating
>     > system choice, but it is Ubuntu 20.04 with Linux Kernel 5.10.102.1 -
>     > microsoft-standard-WSL2. I've built GCC11 using GCC8 (the
>     standard GCC
>     > under Ubuntu20.04 WSL release), under Windows11 with wslg.
>     WSL2/g runs as a
>     > hypervisor with ports to all system resources including display,
>     GPU (cuda,
>     > etc).
>     >
>     > The reason why I am posting this email is that I am trying to
>     compile R
>     > using the AMD Zen3 platform architecture rather than x86/64,
>     because it has
>     > processor-specific optimizations that improve performance over
>     the standard
>     > x86/64 in benchmarks. The Zen3 architecture optimizations are
>     not available
>     > in earlier versions of GCC (actually, they have possibly been
>     backported to
>     > GCC10 now). Since Ubuntu 20.04 doesn't have GCC11, I compiled
>     the GCC11
>     > compiler using the native GCC8.
>     >
>     > The GCC11 I have built can build R 4.1.3 with a standard x86-64
>     > architecture and pass all tests with "make check-all".
>     > I configured that with:
>     >> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
>     > CXXFLAGS="-O3 -march=x86-64" CFLAGS="-O3 -march=x86-64" FFLAGS="-O3
>     > -march=x86-64" --enable-memory-profiling --enable-R-shlib
>     > and built with
>     >> make -j 32 -O
>     >> make check-all
>     > ## PASS.
>     >
>     > So I can build R in my environment with GCC11.
>     > In configure, I am using references to "gcc-11.2"
>     "gfortran-11.2" and
>     > "g++-11.2" because I compiled GCC11 compilers with these suffixes.
>     >
>     > Now, I'm using a 32 thread (16 core) AMD Zen3 CPU (a 5950x), and
>     want to
>     > use it to its full potential. Zen3 optimizations are available as a
>     > -march=znver3 option n GCC11. The znver3 optimizations improve
>     performance
>     > in Phoronix Test Suite benchmarks (I'm not aware of anyone that has
>     > compiled R with them). See:
>     >
>     https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11
>     <https://www.phoronix.com/scan.php?page=article&item=amd-5950x-gcc11>
>     >
>     > However, the R 4.1.3 build (made with "make -j 32 -O"),
>     configured with
>     > -march=znver3, produces an R that fails "make check-all".
>     >
>     >> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
>     > CXXFLAGS="-O2 -march=znver3" CFLAGS="-O2 -march=znver3" FFLAGS="-O2
>     > -march=znver3" --enable-memory-profiling --enable-R-shlib
>     > or
>     >> ~/R/R-4.1.3/configure CC=gcc-11.2 CXX=g++-11.2 FC=gfortran-11.2
>     > CXXFLAGS="-O3 -march=znver3" CFLAGS="-O3 -march=znver3" FFLAGS="-O3
>     > -march=znver3" --enable-memory-profiling --enable-R-shlib
>     >
>     > The fail is always in the factorizing.R Matrix.R tests, and in
>     particular,
>     > there are a number of errors and a fatal error.
>     > I have attached the output because I cannot really understand
>     what is going
>     > wrong. But results returned from matrix calculations are
>     obviously odd with
>     > -march=znver3 in GCC 11. There is another backwards-compatible
>     architecture
>     > option "znver2" and this has EXACTLY the same result.
>     >
>     > While there are other warrnings and errors (many in assert.EQ()
>     ), the
>     > factorizing.R script continues. The fatal error (at line 2662 in the
>     > attached factorizing.Rout.fail text file) is:
>     >
>     >> ## problematic rank deficient rankMatrix() case -- only seen in
>     large
>     > cases ??
>     >> Z. <- readRDS(system.file("external", "Z_NA_rnk.rds",
>     package="Matrix"))
>     >> tools::assertWarning(rnkZ. <- rankMatrix(Z., method = "qr")) #
>     gave errors
>     > Error in assertCondition(expr, classes, .exprString = d.expr) :
>     >? ? Failed to get warning in evaluating rnkZ. <- rankMatrix(Z.,
>     method? ...
>     > Calls: <Anonymous> -> assertCondition
>     > Execution halted
>     >
>     > Can anybody shed light on what might be going on here? 'make
>     check-all'
>     > passes all the other checks. It is just factorizing.R in Matrix
>     that fails
>     > (other matrix tests run ok).
>     > Sorry this is a bit long-winded, but I thought details might be
>     important.
>
>     R gets used and tested most with the default optimizations,
>     without use
>     of model-specific instructions and with -O2 (GCC). It happens time to
>     time that some people try other optimization options and run into
>     problems. In principle, there are these cases (seen before):
>
>     (1) the test in R package (or R) is wrong - it (unintentionally)
>     expects
>     behavior which has been observed in builds with default
>     optimizations,
>     but is not necessarily the only correct one; in case of numerical
>     tolerances set empirically, they could simply be too tight
>
>     (2) the algorithm in R package or R has a bug - the result is really
>     wrong and it is because the algorithm is (unintentionally) not
>     portable
>     enough, it (unintentionally) only works with default optimizations or
>     lower; in case of numerical results, this can be because it
>     expects more
>     precision from the floating point computations than mandated by
>     IEEE, or
>     assumes behavior not mandated
>
>     (3) the optimization by design violates some properties the algorithm
>     knowingly depends on; with numerical computations, this can be a
>     sort of
>     "fast" (and similarly referred to) mode which violates IEEE floating
>     point standard by design, in the aim of better performance; due to
>     the
>     nature of the algorithm depending on IEEE, and poor luck, the results
>     end up completely wrong
>
>     (4) there is a bug in the C or Fortran compiler (GCC as we use
>     GCC) that
>     only exhibits with the unusual optimizations; the compiler produces
>     wrong code
>
>     So, when you run into a problem like this and want to get that fixed,
>     the first thing is to identify which case of the above it is, in
>     case of
>     1 and 2 also differentiate between base R and a package (and which
>     concrete package). Different people maintain these things and you
>     would
>     ideally narrow down the problem to a very small, isolated,
>     reproducible
>     example to support your claim where the bug is. If you do this right,
>     the problem can often get fixed very fast.
>
>     Such an example for (1) could be: few lines of standalone R code
>     using
>     Matrix that produces correct results, but the test is not happy. With
>     pointers to the real check in the tests that is wrong. And an
>     explanation why the result is wrong.
>
>     For (2)-(4) it would be a minimal standalone C/Fortran example
>     including
>     only the critical function/part of algorithm that is not correct/not
>     portable/not compiled correctly, with results obtained with
>     optimizations where it works and where it doesn't. Unless you find an
>     obvious bug in R easy to explain (2), when the example would not
>     have to
>     be standalone. With such standalone C example, you could easily
>     test the
>     results with different optimizations and compilers, it is easier to
>     analyze, and easier to produce a bug report for GCC. What would
>     make it
>     harder in this case is that it needs special hardware, but you could
>     still try with the example, and worry about that later (one option is
>     running in an emulator, and again a standalone example really helps
>     here). In principle, as it needs special hardware, the chances
>     someone
>     else would do this work is smaller. Indeed, if it turns out to be
>     (3),
>     it is unlikely to get resolved, but at least would get isolated (you
>     would know what not to run).
>
>     As a user, if you run into a problem like this and do not want to
>     get it
>     fixed, but just work it around somehow. First, it may be dangerous,
>     possibly one would get incorrect results from computations, but
>     say in
>     applications where they are verified externally. You could try
>     disabling
>     individual specific optimization until the tests pass. You could try
>     with later versions of gcc-11 (even unreleased) or gcc-12. Still,
>     a lot
>     of this is easier with a small example, too. You could ignore the
>     failing test. And it may not be worth it - it may be that you
>     could get
>     your speedups in a different, but more reliable way.
>
>     Using wsl2 on its own should not necessarily be a problem and the way
>     you built gcc from the description should be ok, but at some point it
>     would be worth checking under Linux and running natively - because
>     even
>     if these are numerical differences, they could be in principle
>     caused by
>     running on Windows (or in wsl2), at least in the past such
>     differences
>     were seen (related to (2) above). I would recommend checking on Linux
>     natively once you have at least a standalone R example.
>
>     Best
>     Tomas
>
>
>     >
>     > best regards,
>     > Kieran
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
	[[alternative HTML version deleted]]


From tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk  Wed Apr 13 16:56:19 2022
From: tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk (tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk)
Date: Wed, 13 Apr 2022 15:56:19 +0100 (BST)
Subject: [Rd] R4.2 - news item for list2DF changes?
Message-ID: <171889653.379759.1649861779373@office.mailbox.org>

Whilst the function documentation has been updated should there also be a short news item for the changes to list2DF?

In 4.13 we can do:
list2DF(list(a=1, b=1:10))

but in 4.2 this will now error. 

Best

Tim


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Apr 14 08:59:30 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 14 Apr 2022 08:59:30 +0200
Subject: [Rd] Hashed environments of size <5 never grow
In-Reply-To: <CAARqVQO6pBCYaQcuxoiWAgKeshFFw+rCCuDRQd1NnRg7RxD+iA@mail.gmail.com>
References: <CAARqVQO6pBCYaQcuxoiWAgKeshFFw+rCCuDRQd1NnRg7RxD+iA@mail.gmail.com>
Message-ID: <25175.50770.487777.56604@stat.math.ethz.ch>

>>>>> Duncan Garmonsway 
>>>>>     on Mon, 11 Apr 2022 22:24:52 +0100 writes:

    > Hello,

    > Hashed environments that begin with a (non-default) size
    > of 4 or less, will never grow, which is very detrimental
    > to performance.  For example,

    > ```
    > n <- 10000
    > l <- vector("list", n)
    > l <- setNames(l, seq_len(n))

    > # Takes a second, and nchains remains 1.
    > e1 <- list2env(l, hash = TRUE, size = 1)
    > env.profile(e1)$nchains
    > # [1] 1

    > # Returns instantly, and nchains grows to 6950
    > e2 <- list2env(l, hash = TRUE, size = 5)
    > env.profile(e2)$nchains
    > # [1] 6950
    > ```

    > The cause is that, when calling the growth function, the new size is
    > truncated to an integer.  See src/main/envir.c line 440, or
    > https://github.com/wch/r-source/blob/d9b9d00b6d2764839f229bf011dda8d027aae227/src/main/envir.c#L440

    > Given the hard-coded growth rate of 1.2, any size of 4 or less will be
    > truncated back to itself.

    > (int) (1 * 1.2 ) = 1
    > (int) (2 * 1.2) = 1
    > (int) (3 * 1.2) = 1
    > (int) (4 * 1.2) = 1
    > (int) (5 * 1.2) = 6

Yes.  I'm convinced this has been oversight and should be
corrected.

    > This is a rare case, and I couldn't find any examples in CRAN packages of
    > the `size` argument being used at all, let alone so small.  Even so, it
    > tripped me up, and could be fixed by using `ceil()` in src/main/envir.c
    > line 440 as follows.

    > new_table = R_NewHashTable((int)(ceil(HASHSIZE(table) *
    > HASHTABLEGROWTHRATE)))

Indeed, this bug would surface very very rarely,
but I agree a fix such as your proposition  is appropriate.

I'll do so, also adding a regression test.

Martin Maechler
ETH Zurich   and  R Core team


    > Kind regards,
    > Duncan Garmonsway


From pd@|gd @end|ng |rom gm@||@com  Thu Apr 14 10:00:29 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 14 Apr 2022 10:00:29 +0200
Subject: [Rd] R4.2 - news item for list2DF changes?
In-Reply-To: <171889653.379759.1649861779373@office.mailbox.org>
References: <171889653.379759.1649861779373@office.mailbox.org>
Message-ID: <D2B4D7F3-3497-47E6-B3AC-C0D6883F879C@gmail.com>

Possibly yes. Maybe also a few words on the rationale for the change. Kurt?

(If anyone has gotten into a habit of using list2DF(list) as a replacement for data.frame(list), then it may break break their code.)

- Peter

> On 13 Apr 2022, at 16:56 , tim.taylor at hiddenelephants.co.uk wrote:
> 
> Whilst the function documentation has been updated should there also be a short news item for the changes to list2DF?
> 
> In 4.13 we can do:
> list2DF(list(a=1, b=1:10))
> 
> but in 4.2 this will now error. 
> 
> Best
> 
> Tim
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Apr 14 10:41:58 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 14 Apr 2022 10:41:58 +0200
Subject: [Rd] intersect() change of behavior in 4.2
In-Reply-To: <CAN+W6_tM=+E6nCqDq9JiJ=1Gp3E=R4QFcPc06mbFyCZzWjhASQ@mail.gmail.com>
References: <CABtg=K=tRMdLJ7p2JHdFyOYVyjmLNszQguKn569gx+FswChtyw@mail.gmail.com>
 <CAN+W6_tM=+E6nCqDq9JiJ=1Gp3E=R4QFcPc06mbFyCZzWjhASQ@mail.gmail.com>
Message-ID: <25175.56918.994351.975134@stat.math.ethz.ch>

>>>>> Llu?s Revilla 
>>>>>     on Tue, 12 Apr 2022 09:16:36 +0200 writes:

    > Hi all,
    > This change is documented on the man page so I think it is intentional.

yes, also if you look at the (svn) log messages of the code changes
(or its git mirrors).

    >> From https://search.r-project.org/R/refmans/base/html/sets.html:

    > For union, a vector of a common mode.
    > For intersect, a vector of a common mode, or NULL if x or y is NULL.
    > For setdiff, a vector of the same mode as x.

    > Now the results are symmetrical to intersect( "foo", list())

indeed, and that *is* very desirable.

    > Probably it is worth mentioning in the NEWS as it was found to cause
    > some test to fail on a Bioconductor package some months ago.
    > This could affect other packages and analysis too.

    > Best,
    > Llu?s

I agree and have added an entry there ... still to be
back ported to R 4.2.0 beta.

Martin


    > On Tue, 12 Apr 2022 at 01:22, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
    >> 
    >> I wonder if this change is intentional, and if it is, whether it is
    >> worth mentioning in the NEWS.
    >> 
    >> ? R-4.1 -q -e 'intersect(list(), "foo")'
    >> > intersect(list(), "foo")
    >> character(0)
    >> 
    >> ? R-4.2 -q -e 'intersect(list(), "foo")'
    >> > intersect(list(), "foo")
    >> list()
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From |reder|k @end|ng |rom o|b@net  Sat Apr 16 17:27:08 2022
From: |reder|k @end|ng |rom o|b@net (Frederick Eaton)
Date: Sat, 16 Apr 2022 08:27:08 -0700
Subject: [Rd] documentation
Message-ID: <20220416152708.yqmxctqnfeb4plbj@localhost>

Dear R Devel,

I'm sorry that I haven't had time to check the subversion logs to see
if any of these items have been addressed, but I remember notifying
the list about bugs in the documentation of 'browser()' and
'system2()' and I haven't yet received any acknowledgment that the
issues I described were understood. R is a useful language, and since
it is used in education, I wonder if we should make sure that all
documentation bugs are responded to.

Contributors might also note that documentation error reports can't be
generated automatically, like compiler errors can; and that
distributing bad documentation is an effective way to obscure the
functioning of a software project, and to make it hard for others to
verify that it is doing the right thing, or to extend its
functionality.

For a refresher, the issue with system2() is that the documentation
does not warn users that the elements of the 'args' array need to be
passed through a quoting function, and the issue with browser() is
that various limitations of the trace facilities and API are
undocumented. Have these been fixed without reporting back to the
list? Or is it that no one else uses these functions? In which case
maybe I can be given access to fix the documentation myself?

I worry that R is becoming more like an appliance, needing servicing
in cooperation with the maker, than a tool that I can recommend for
people to take home and build something with. I hope that I'm
misunderstanding the intent of the core team.

Thank you,

Frederick


From bbo|ker @end|ng |rom gm@||@com  Sat Apr 16 19:29:12 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 16 Apr 2022 13:29:12 -0400
Subject: [Rd] documentation
In-Reply-To: <20220416152708.yqmxctqnfeb4plbj@localhost>
References: <20220416152708.yqmxctqnfeb4plbj@localhost>
Message-ID: <CABghstTHkAOJck3qN2zDLhk2Spnu=iVnBQuK5TvSMxuE1a42Mw@mail.gmail.com>

If you're worried about follow-up on bug reports, I'd suggest posting to
the R bug tracker ( you can request access if you don't already have it)

On Sat, Apr 16, 2022, 11:27 AM Frederick Eaton <frederik at ofb.net> wrote:

> Dear R Devel,
>
> I'm sorry that I haven't had time to check the subversion logs to see
> if any of these items have been addressed, but I remember notifying
> the list about bugs in the documentation of 'browser()' and
> 'system2()' and I haven't yet received any acknowledgment that the
> issues I described were understood. R is a useful language, and since
> it is used in education, I wonder if we should make sure that all
> documentation bugs are responded to.
>
> Contributors might also note that documentation error reports can't be
> generated automatically, like compiler errors can; and that
> distributing bad documentation is an effective way to obscure the
> functioning of a software project, and to make it hard for others to
> verify that it is doing the right thing, or to extend its
> functionality.
>
> For a refresher, the issue with system2() is that the documentation
> does not warn users that the elements of the 'args' array need to be
> passed through a quoting function, and the issue with browser() is
> that various limitations of the trace facilities and API are
> undocumented. Have these been fixed without reporting back to the
> list? Or is it that no one else uses these functions? In which case
> maybe I can be given access to fix the documentation myself?
>
> I worry that R is becoming more like an appliance, needing servicing
> in cooperation with the maker, than a tool that I can recommend for
> people to take home and build something with. I hope that I'm
> misunderstanding the intent of the core team.
>
> Thank you,
>
> Frederick
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From benj@m|n@rede||ng@ @end|ng |rom gm@||@com  Sun Apr 17 01:04:14 2022
From: benj@m|n@rede||ng@ @end|ng |rom gm@||@com (Benjamin Redelings)
Date: Sat, 16 Apr 2022 19:04:14 -0400
Subject: [Rd] Pipe operator status, placeholders?
Message-ID: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>

Hi,

I see that R 4.2 adds the underscore _ as a placeholder for the new 
forward pipe operator |> , but only for named arguments. The reason why 
placeholders for position arguments was NOT added isn't clear to me, so 
I've been looking for the discussion around the introduction of the 
placeholder.

By searching subject lines in the r-devel mailing list archive, I've found

 ??? https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html

https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html

https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and 
following messages

but not much else.

1. Am I looking in the wrong place?

2. What is the reasoning behind allowing _ as a placeholder only for 
named arguments?

take care,

-BenRI


From ggrothend|eck @end|ng |rom gm@||@com  Sun Apr 17 14:21:56 2022
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 17 Apr 2022 08:21:56 -0400
Subject: [Rd] pipes and setNames
Message-ID: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>

When trying to transform names in a pipeline one can do the following
where for this example we are making names upper case.

  BOD |> (\(x) setNames(x, toupper(names(x))))()

but that seems a bit ugly and verbose.

1. One possibility is to enhance setNames to allow a function as a
second argument.  In that case one could write:

  BOD |> setNames(toupper)

2. One can already do the following with the existing `with` but is
quite verbose:
  BOD |> list() |> setNames(".") |> with(setNames(., toupper(names(.))))
but could be made simpler with a utility function.

This utility function is not as good for setNames but would still
result in shorter code than the anonymous function in the example at
the top of this email and is more general so it would also apply in
other situations too.  Here R would define a function with. (note dot
at end) which would be defined and used as follows.

  with. <- function(data, expr, ...) {
    eval(substitute(expr), list(. = data), enclos = parent.frame())
  }

  BOD |> with.(setNames(., toupper(names(.))))

with. is not as efficient as straight pipes but in many cases such as
this it does not really matter and one just wants to get it done
without the parenthesis laden anonymous function.

Having both of these two would be nice to make it easier to use R pipes.

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From @v|gro@@ @end|ng |rom ver|zon@net  Sun Apr 17 22:49:20 2022
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Sun, 17 Apr 2022 20:49:20 +0000 (UTC)
Subject: [Rd] pipes and setNames
In-Reply-To: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>
References: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>
Message-ID: <1666355068.355430.1650228560776@mail.yahoo.com>

Gabor,

It is always interesting to see suggestions for how to extend R, especially what is suggested to 
be base R. But generally extensions need to be needed not just wanted and the ramifications 
must be studied.

I am curious if you looked at existing pipe-like implementations in various packages to see how or 
if they support such functionality.

There are many things we can wish for but with some care if nonstandard evaluation is allowed.

For example, should we allow multiple instances of the underscore (or dot) character to each be 
replaced by the same input? That can be tricky. 

But a trivial solution is to not use the anonymous function but write your own small accessory function. 
I wrote this trivial one:

renamer <- function(x, fun) { names(x) <- fun(names(x)); x }


You can then do this:


x |> renamer(toupper)


Or use tolower or sort or lots of other functions with no arguments.

It is easy to generalize this to functions that allow additional arguments:


renamer2 <- function(x, fun, ...) { names(x) <- fun(names(x), ...); x }


x |> renamer2(sort, decreasing=TRUE)


Clearly this is not a general solution and a suggestion that I might like is to allow a
compound condition in the pipeline that lets you capture the argument into a named 
variable and then use it as you wish. BUT in a very real sense the anonymous 
function syntax gives you something like that even if a tad ugly to you. However 
things that look wrong to you or may make no sense to others may well 
be avoided. 

So your suggestion for an extension to existing functions to allow not repeating the 
name twice makes sense but R supports many attributes you may want to be 
able to manipulate in a pipeline including classes, dimensions, column names, 
row names and much more you can add on your own arbitrarily.

What method might be more generalizable to solve many such problems 
if used along with the new or previous pipes?






-----Original Message-----
From: Gabor Grothendieck <ggrothendieck at gmail.com>
To: r-devel at r-project.org <r-devel at r-project.org>
Sent: Sun, Apr 17, 2022 8:21 am
Subject: [Rd] pipes and setNames


When trying to transform names in a pipeline one can do the following

where for this example we are making names upper case.



? BOD |> (\(x) setNames(x, toupper(names(x))))()



but that seems a bit ugly and verbose.



1. One possibility is to enhance setNames to allow a function as a

second argument.? In that case one could write:



? BOD |> setNames(toupper)



2. One can already do the following with the existing `with` but is

quite verbose:

? BOD |> list() |> setNames(".") |> with(setNames(., toupper(names(.))))

but could be made simpler with a utility function.



This utility function is not as good for setNames but would still

result in shorter code than the anonymous function in the example at

the top of this email and is more general so it would also apply in

other situations too.? Here R would define a function with. (note dot

at end) which would be defined and used as follows.



? with. <- function(data, expr, ...) {

? ? eval(substitute(expr), list(. = data), enclos = parent.frame())

? }



? BOD |> with.(setNames(., toupper(names(.))))



with. is not as efficient as straight pipes but in many cases such as

this it does not really matter and one just wants to get it done

without the parenthesis laden anonymous function.



Having both of these two would be nice to make it easier to use R pipes.



-- 

Statistics & Software Consulting

GKX Group, GKX Associates Inc.

tel: 1-877-GKX-GROUP

email: ggrothendieck at gmail.com



______________________________________________

R-devel at r-project.org mailing list

https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Mon Apr 18 19:59:46 2022
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Mon, 18 Apr 2022 13:59:46 -0400
Subject: [Rd] pipes and setNames
In-Reply-To: <1666355068.355430.1650228560776@mail.yahoo.com>
References: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>
 <1666355068.355430.1650228560776@mail.yahoo.com>
Message-ID: <CAP01uRk9=ufFUpnmRZ1=_gFuot_L3P+DVMmiEiWzn4wGKFebQg@mail.gmail.com>

This is a suggestion for base.  Workarounds using packages are not relevant.

Setting names is something that is done a lot.

On Sun, Apr 17, 2022 at 4:49 PM Avi Gross via R-devel
<r-devel at r-project.org> wrote:
>
> Gabor,
>
> It is always interesting to see suggestions for how to extend R, especially what is suggested to
> be base R. But generally extensions need to be needed not just wanted and the ramifications
> must be studied.
>
> I am curious if you looked at existing pipe-like implementations in various packages to see how or
> if they support such functionality.
>
> There are many things we can wish for but with some care if nonstandard evaluation is allowed.
>
> For example, should we allow multiple instances of the underscore (or dot) character to each be
> replaced by the same input? That can be tricky.
>
> But a trivial solution is to not use the anonymous function but write your own small accessory function.
> I wrote this trivial one:
>
> renamer <- function(x, fun) { names(x) <- fun(names(x)); x }
>
>
> You can then do this:
>
>
> x |> renamer(toupper)
>
>
> Or use tolower or sort or lots of other functions with no arguments.
>
> It is easy to generalize this to functions that allow additional arguments:
>
>
> renamer2 <- function(x, fun, ...) { names(x) <- fun(names(x), ...); x }
>
>
> x |> renamer2(sort, decreasing=TRUE)
>
>
> Clearly this is not a general solution and a suggestion that I might like is to allow a
> compound condition in the pipeline that lets you capture the argument into a named
> variable and then use it as you wish. BUT in a very real sense the anonymous
> function syntax gives you something like that even if a tad ugly to you. However
> things that look wrong to you or may make no sense to others may well
> be avoided.
>
> So your suggestion for an extension to existing functions to allow not repeating the
> name twice makes sense but R supports many attributes you may want to be
> able to manipulate in a pipeline including classes, dimensions, column names,
> row names and much more you can add on your own arbitrarily.
>
> What method might be more generalizable to solve many such problems
> if used along with the new or previous pipes?
>
>
>
>
>
>
> -----Original Message-----
> From: Gabor Grothendieck <ggrothendieck at gmail.com>
> To: r-devel at r-project.org <r-devel at r-project.org>
> Sent: Sun, Apr 17, 2022 8:21 am
> Subject: [Rd] pipes and setNames
>
>
> When trying to transform names in a pipeline one can do the following
>
> where for this example we are making names upper case.
>
>
>
>   BOD |> (\(x) setNames(x, toupper(names(x))))()
>
>
>
> but that seems a bit ugly and verbose.
>
>
>
> 1. One possibility is to enhance setNames to allow a function as a
>
> second argument.  In that case one could write:
>
>
>
>   BOD |> setNames(toupper)
>
>
>
> 2. One can already do the following with the existing `with` but is
>
> quite verbose:
>
>   BOD |> list() |> setNames(".") |> with(setNames(., toupper(names(.))))
>
> but could be made simpler with a utility function.
>
>
>
> This utility function is not as good for setNames but would still
>
> result in shorter code than the anonymous function in the example at
>
> the top of this email and is more general so it would also apply in
>
> other situations too.  Here R would define a function with. (note dot
>
> at end) which would be defined and used as follows.
>
>
>
>   with. <- function(data, expr, ...) {
>
>     eval(substitute(expr), list(. = data), enclos = parent.frame())
>
>   }
>
>
>
>   BOD |> with.(setNames(., toupper(names(.))))
>
>
>
> with. is not as efficient as straight pipes but in many cases such as
>
> this it does not really matter and one just wants to get it done
>
> without the parenthesis laden anonymous function.
>
>
>
> Having both of these two would be nice to make it easier to use R pipes.
>
>
>
> --
>
> Statistics & Software Consulting
>
> GKX Group, GKX Associates Inc.
>
> tel: 1-877-GKX-GROUP
>
> email: ggrothendieck at gmail.com
>
>
>
> ______________________________________________
>
> R-devel at r-project.org mailing list
>
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From g@bembecker @end|ng |rom gm@||@com  Mon Apr 18 21:49:32 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 18 Apr 2022 12:49:32 -0700
Subject: [Rd] pipes and setNames
In-Reply-To: <CAP01uRk9=ufFUpnmRZ1=_gFuot_L3P+DVMmiEiWzn4wGKFebQg@mail.gmail.com>
References: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>
 <1666355068.355430.1650228560776@mail.yahoo.com>
 <CAP01uRk9=ufFUpnmRZ1=_gFuot_L3P+DVMmiEiWzn4wGKFebQg@mail.gmail.com>
Message-ID: <CAD4oTHE2Kh6BhL4B0By+u3CSKTDhdsdsxu2ToMPkrjPR02kjgw@mail.gmail.com>

Hi Gabor,

Just my 2c on a few things:

I have to say it feels weird/wrong to me to have setNames do anything
other than, well, set the names. Its a low level setter, in OOP parlance,
in my mind. That is not to say that there shouldn't or can't be another
function called, I don't' know, transform_names, which sets the names of an
object to a function of the existing ones. one could even get "weirder"
with it:

names_apply <- function(X, FUN, ...) names(X) <- vapply(names(X), FUN, "",
...)

As a practical matter, I have to say one of the core benefits of pipes is
legibility of the code, and so I wonder, honestly, if

ucase_names <- function(x)  setNames(x, toupper(names(x))

BOD |> ... |> ucase_names()

Isn't overall more desirable code anyway? I have to say I think I would
always write the above rather than having an anonymous function in the
middle of a pipeline, myself.

The issue with with. I think, is that as I understand it the native pipe *by
intentional design* does not involve non-standard evaluation. It is a
parser transformation. While restrictive compared to what magrittr users
are used to, there are benefits to this that Luke has thought very hard
about (as he does before doing anything). R providing with. as you're
describing, would essentially walk back that design and muddy the waters by
advancing  weird hybrid situation where a parser transformation is done but
then after that NSE is done anyway in common cases. I won't speak for Luke
in terms of what he might think of such an idea, but on the face of it that
seems like it would be pretty odd, to me.


 Also, I have to say even if i'm wrong about everything above, such a
function should definitely not be called with. The period is the smallest
displayable glyph, AFAIK, and having the names of two *related* functions
differ only by a trailing period is practically begging for people quickly
reading code to mistake which is in use.

Best,
~G


On Mon, Apr 18, 2022 at 11:00 AM Gabor Grothendieck <ggrothendieck at gmail.com>
wrote:

> This is a suggestion for base.  Workarounds using packages are not
> relevant.
>
> Setting names is something that is done a lot.
>
> On Sun, Apr 17, 2022 at 4:49 PM Avi Gross via R-devel
> <r-devel at r-project.org> wrote:
> >
> > Gabor,
> >
> > It is always interesting to see suggestions for how to extend R,
> especially what is suggested to
> > be base R. But generally extensions need to be needed not just wanted
> and the ramifications
> > must be studied.
> >
> > I am curious if you looked at existing pipe-like implementations in
> various packages to see how or
> > if they support such functionality.
> >
> > There are many things we can wish for but with some care if nonstandard
> evaluation is allowed.
> >
> > For example, should we allow multiple instances of the underscore (or
> dot) character to each be
> > replaced by the same input? That can be tricky.
> >
> > But a trivial solution is to not use the anonymous function but write
> your own small accessory function.
> > I wrote this trivial one:
> >
> > renamer <- function(x, fun) { names(x) <- fun(names(x)); x }
> >
> >
> > You can then do this:
> >
> >
> > x |> renamer(toupper)
> >
> >
> > Or use tolower or sort or lots of other functions with no arguments.
> >
> > It is easy to generalize this to functions that allow additional
> arguments:
> >
> >
> > renamer2 <- function(x, fun, ...) { names(x) <- fun(names(x), ...); x }
> >
> >
> > x |> renamer2(sort, decreasing=TRUE)
> >
> >
> > Clearly this is not a general solution and a suggestion that I might
> like is to allow a
> > compound condition in the pipeline that lets you capture the argument
> into a named
> > variable and then use it as you wish. BUT in a very real sense the
> anonymous
> > function syntax gives you something like that even if a tad ugly to you.
> However
> > things that look wrong to you or may make no sense to others may well
> > be avoided.
> >
> > So your suggestion for an extension to existing functions to allow not
> repeating the
> > name twice makes sense but R supports many attributes you may want to be
> > able to manipulate in a pipeline including classes, dimensions, column
> names,
> > row names and much more you can add on your own arbitrarily.
> >
> > What method might be more generalizable to solve many such problems
> > if used along with the new or previous pipes?
> >
> >
> >
> >
> >
> >
> > -----Original Message-----
> > From: Gabor Grothendieck <ggrothendieck at gmail.com>
> > To: r-devel at r-project.org <r-devel at r-project.org>
> > Sent: Sun, Apr 17, 2022 8:21 am
> > Subject: [Rd] pipes and setNames
> >
> >
> > When trying to transform names in a pipeline one can do the following
> >
> > where for this example we are making names upper case.
> >
> >
> >
> >   BOD |> (\(x) setNames(x, toupper(names(x))))()
> >
> >
> >
> > but that seems a bit ugly and verbose.
> >
> >
> >
> > 1. One possibility is to enhance setNames to allow a function as a
> >
> > second argument.  In that case one could write:
> >
> >
> >
> >   BOD |> setNames(toupper)
> >
> >
> >
> > 2. One can already do the following with the existing `with` but is
> >
> > quite verbose:
> >
> >   BOD |> list() |> setNames(".") |> with(setNames(., toupper(names(.))))
> >
> > but could be made simpler with a utility function.
> >
> >
> >
> > This utility function is not as good for setNames but would still
> >
> > result in shorter code than the anonymous function in the example at
> >
> > the top of this email and is more general so it would also apply in
> >
> > other situations too.  Here R would define a function with. (note dot
> >
> > at end) which would be defined and used as follows.
> >
> >
> >
> >   with. <- function(data, expr, ...) {
> >
> >     eval(substitute(expr), list(. = data), enclos = parent.frame())
> >
> >   }
> >
> >
> >
> >   BOD |> with.(setNames(., toupper(names(.))))
> >
> >
> >
> > with. is not as efficient as straight pipes but in many cases such as
> >
> > this it does not really matter and one just wants to get it done
> >
> > without the parenthesis laden anonymous function.
> >
> >
> >
> > Having both of these two would be nice to make it easier to use R pipes.
> >
> >
> >
> > --
> >
> > Statistics & Software Consulting
> >
> > GKX Group, GKX Associates Inc.
> >
> > tel: 1-877-GKX-GROUP
> >
> > email: ggrothendieck at gmail.com
> >
> >
> >
> > ______________________________________________
> >
> > R-devel at r-project.org mailing list
> >
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From net|kj@ @end|ng |rom gm@||@com  Tue Apr 19 08:55:35 2022
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Tue, 19 Apr 2022 08:55:35 +0200
Subject: [Rd] pipes and setNames
In-Reply-To: <CAD4oTHE2Kh6BhL4B0By+u3CSKTDhdsdsxu2ToMPkrjPR02kjgw@mail.gmail.com>
References: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>
 <1666355068.355430.1650228560776@mail.yahoo.com>
 <CAP01uRk9=ufFUpnmRZ1=_gFuot_L3P+DVMmiEiWzn4wGKFebQg@mail.gmail.com>
 <CAD4oTHE2Kh6BhL4B0By+u3CSKTDhdsdsxu2ToMPkrjPR02kjgw@mail.gmail.com>
Message-ID: <CA+6hu7ceRpjSPp0tzFU8tAQg5meZdMoYRVnZKBpv2TSgJGzq2g@mail.gmail.com>

I agree that would be nice, but this task is indeed manageable with
one-line function definition as mentioned above.

For reference, take a look at dplyr::rename_with which does something
nearly identical as your proposal does. Note that even tidyverse setNames
implementation does not allow for functions nor lambdas.

Best,
Jan


Dne po 18. 4. 2022 21:50 u?ivatel Gabriel Becker <gabembecker at gmail.com>
napsal:

> Hi Gabor,
>
> Just my 2c on a few things:
>
> I have to say it feels weird/wrong to me to have setNames do anything
> other than, well, set the names. Its a low level setter, in OOP parlance,
> in my mind. That is not to say that there shouldn't or can't be another
> function called, I don't' know, transform_names, which sets the names of an
> object to a function of the existing ones. one could even get "weirder"
> with it:
>
> names_apply <- function(X, FUN, ...) names(X) <- vapply(names(X), FUN, "",
> ...)
>
> As a practical matter, I have to say one of the core benefits of pipes is
> legibility of the code, and so I wonder, honestly, if
>
> ucase_names <- function(x)  setNames(x, toupper(names(x))
>
> BOD |> ... |> ucase_names()
>
> Isn't overall more desirable code anyway? I have to say I think I would
> always write the above rather than having an anonymous function in the
> middle of a pipeline, myself.
>
> The issue with with. I think, is that as I understand it the native pipe
> *by
> intentional design* does not involve non-standard evaluation. It is a
> parser transformation. While restrictive compared to what magrittr users
> are used to, there are benefits to this that Luke has thought very hard
> about (as he does before doing anything). R providing with. as you're
> describing, would essentially walk back that design and muddy the waters by
> advancing  weird hybrid situation where a parser transformation is done but
> then after that NSE is done anyway in common cases. I won't speak for Luke
> in terms of what he might think of such an idea, but on the face of it that
> seems like it would be pretty odd, to me.
>
>
>  Also, I have to say even if i'm wrong about everything above, such a
> function should definitely not be called with. The period is the smallest
> displayable glyph, AFAIK, and having the names of two *related* functions
> differ only by a trailing period is practically begging for people quickly
> reading code to mistake which is in use.
>
> Best,
> ~G
>
>
> On Mon, Apr 18, 2022 at 11:00 AM Gabor Grothendieck <
> ggrothendieck at gmail.com>
> wrote:
>
> > This is a suggestion for base.  Workarounds using packages are not
> > relevant.
> >
> > Setting names is something that is done a lot.
> >
> > On Sun, Apr 17, 2022 at 4:49 PM Avi Gross via R-devel
> > <r-devel at r-project.org> wrote:
> > >
> > > Gabor,
> > >
> > > It is always interesting to see suggestions for how to extend R,
> > especially what is suggested to
> > > be base R. But generally extensions need to be needed not just wanted
> > and the ramifications
> > > must be studied.
> > >
> > > I am curious if you looked at existing pipe-like implementations in
> > various packages to see how or
> > > if they support such functionality.
> > >
> > > There are many things we can wish for but with some care if nonstandard
> > evaluation is allowed.
> > >
> > > For example, should we allow multiple instances of the underscore (or
> > dot) character to each be
> > > replaced by the same input? That can be tricky.
> > >
> > > But a trivial solution is to not use the anonymous function but write
> > your own small accessory function.
> > > I wrote this trivial one:
> > >
> > > renamer <- function(x, fun) { names(x) <- fun(names(x)); x }
> > >
> > >
> > > You can then do this:
> > >
> > >
> > > x |> renamer(toupper)
> > >
> > >
> > > Or use tolower or sort or lots of other functions with no arguments.
> > >
> > > It is easy to generalize this to functions that allow additional
> > arguments:
> > >
> > >
> > > renamer2 <- function(x, fun, ...) { names(x) <- fun(names(x), ...); x }
> > >
> > >
> > > x |> renamer2(sort, decreasing=TRUE)
> > >
> > >
> > > Clearly this is not a general solution and a suggestion that I might
> > like is to allow a
> > > compound condition in the pipeline that lets you capture the argument
> > into a named
> > > variable and then use it as you wish. BUT in a very real sense the
> > anonymous
> > > function syntax gives you something like that even if a tad ugly to
> you.
> > However
> > > things that look wrong to you or may make no sense to others may well
> > > be avoided.
> > >
> > > So your suggestion for an extension to existing functions to allow not
> > repeating the
> > > name twice makes sense but R supports many attributes you may want to
> be
> > > able to manipulate in a pipeline including classes, dimensions, column
> > names,
> > > row names and much more you can add on your own arbitrarily.
> > >
> > > What method might be more generalizable to solve many such problems
> > > if used along with the new or previous pipes?
> > >
> > >
> > >
> > >
> > >
> > >
> > > -----Original Message-----
> > > From: Gabor Grothendieck <ggrothendieck at gmail.com>
> > > To: r-devel at r-project.org <r-devel at r-project.org>
> > > Sent: Sun, Apr 17, 2022 8:21 am
> > > Subject: [Rd] pipes and setNames
> > >
> > >
> > > When trying to transform names in a pipeline one can do the following
> > >
> > > where for this example we are making names upper case.
> > >
> > >
> > >
> > >   BOD |> (\(x) setNames(x, toupper(names(x))))()
> > >
> > >
> > >
> > > but that seems a bit ugly and verbose.
> > >
> > >
> > >
> > > 1. One possibility is to enhance setNames to allow a function as a
> > >
> > > second argument.  In that case one could write:
> > >
> > >
> > >
> > >   BOD |> setNames(toupper)
> > >
> > >
> > >
> > > 2. One can already do the following with the existing `with` but is
> > >
> > > quite verbose:
> > >
> > >   BOD |> list() |> setNames(".") |> with(setNames(.,
> toupper(names(.))))
> > >
> > > but could be made simpler with a utility function.
> > >
> > >
> > >
> > > This utility function is not as good for setNames but would still
> > >
> > > result in shorter code than the anonymous function in the example at
> > >
> > > the top of this email and is more general so it would also apply in
> > >
> > > other situations too.  Here R would define a function with. (note dot
> > >
> > > at end) which would be defined and used as follows.
> > >
> > >
> > >
> > >   with. <- function(data, expr, ...) {
> > >
> > >     eval(substitute(expr), list(. = data), enclos = parent.frame())
> > >
> > >   }
> > >
> > >
> > >
> > >   BOD |> with.(setNames(., toupper(names(.))))
> > >
> > >
> > >
> > > with. is not as efficient as straight pipes but in many cases such as
> > >
> > > this it does not really matter and one just wants to get it done
> > >
> > > without the parenthesis laden anonymous function.
> > >
> > >
> > >
> > > Having both of these two would be nice to make it easier to use R
> pipes.
> > >
> > >
> > >
> > > --
> > >
> > > Statistics & Software Consulting
> > >
> > > GKX Group, GKX Associates Inc.
> > >
> > > tel: 1-877-GKX-GROUP
> > >
> > > email: ggrothendieck at gmail.com
> > >
> > >
> > >
> > > ______________________________________________
> > >
> > > R-devel at r-project.org mailing list
> > >
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
> > --
> > Statistics & Software Consulting
> > GKX Group, GKX Associates Inc.
> > tel: 1-877-GKX-GROUP
> > email: ggrothendieck at gmail.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Tue Apr 19 09:24:32 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 19 Apr 2022 09:24:32 +0200
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
Message-ID: <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>

You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by

> x |> f(g(x=_))
Error in f(x, g(x = "_")) : invalid use of pipe placeholder

-pd

> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
> 
> Hi,
> 
> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
> 
> By searching subject lines in the r-devel mailing list archive, I've found
> 
>     https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
> 
> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
> 
> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
> 
> but not much else.
> 
> 1. Am I looking in the wrong place?
> 
> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
> 
> take care,
> 
> -BenRI
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ||one| @end|ng |rom r@tud|o@com  Tue Apr 19 11:00:49 2022
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Tue, 19 Apr 2022 11:00:49 +0200
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
Message-ID: <CAJf4E3rqcv3Ee9i=cNN08WrR0MGOebYWXeGA2BVC07xf-2GhTg@mail.gmail.com>

I think usage of the placeholder in nested calls is another question.
The placeholder requires a named argument to improve readability
because it's a single character that is easy to miss.

Best,
Lionel

On 4/19/22, peter dalgaard <pdalgd at gmail.com> wrote:
> You probably want Luke Tierney for the full story, but what I gather from
> the deliberations (on the private R-core list), there are issues with how
> non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn,
> has to do with wanting to have the placeholder occur only as a toplevel
> substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that
> has to do with the way the pipe works in the absense of placeholder, e.g.
> the parser gets confused by
>
>> x |> f(g(x=_))
> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>
> -pd
>
>> On 17 Apr 2022, at 01:04 , Benjamin Redelings
>> <benjamin.redelings at gmail.com> wrote:
>>
>> Hi,
>>
>> I see that R 4.2 adds the underscore _ as a placeholder for the new
>> forward pipe operator |> , but only for named arguments. The reason why
>> placeholders for position arguments was NOT added isn't clear to me, so
>> I've been looking for the discussion around the introduction of the
>> placeholder.
>>
>> By searching subject lines in the r-devel mailing list archive, I've
>> found
>>
>>     https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>
>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>
>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and
>> following messages
>>
>> but not much else.
>>
>> 1. Am I looking in the wrong place?
>>
>> 2. What is the reasoning behind allowing _ as a placeholder only for named
>> arguments?
>>
>> take care,
>>
>> -BenRI
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From h@w|ckh@m @end|ng |rom gm@||@com  Tue Apr 19 14:01:45 2022
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Tue, 19 Apr 2022 07:01:45 -0500
Subject: [Rd] pipes and setNames
In-Reply-To: <CA+6hu7ceRpjSPp0tzFU8tAQg5meZdMoYRVnZKBpv2TSgJGzq2g@mail.gmail.com>
References: <CAP01uR=Z2+Zg6T9Hwn_mw-sMijpmv8H55RhPBkk1AS-gRpfCkQ@mail.gmail.com>
 <1666355068.355430.1650228560776@mail.yahoo.com>
 <CAP01uRk9=ufFUpnmRZ1=_gFuot_L3P+DVMmiEiWzn4wGKFebQg@mail.gmail.com>
 <CAD4oTHE2Kh6BhL4B0By+u3CSKTDhdsdsxu2ToMPkrjPR02kjgw@mail.gmail.com>
 <CA+6hu7ceRpjSPp0tzFU8tAQg5meZdMoYRVnZKBpv2TSgJGzq2g@mail.gmail.com>
Message-ID: <CABdHhvHv2aHqndxZU5yFRns4Eh5JBwSqZARR=w64nzNy-3Uk5w@mail.gmail.com>

On Tue, Apr 19, 2022 at 1:56 AM Jan Net?k <netikja at gmail.com> wrote:
>
> I agree that would be nice, but this task is indeed manageable with
> one-line function definition as mentioned above.
>
> For reference, take a look at dplyr::rename_with which does something
> nearly identical as your proposal does. Note that even tidyverse setNames
> implementation does not allow for functions nor lambdas.

The closest equivalent to setNames() is rlang::set_names() which does
allow you to supply a character vector, a function, or NULL:

``` r
library(rlang)

x <- c(a = 1, b = 2, c = 3)
x |> set_names(c("x", "y", "z"))
#> x y z
#> 1 2 3
x |> set_names(toupper)
#> A B C
#> 1 2 3
x |> set_names(NULL)
#> [1] 1 2 3
```

When called with only one argument it uses the vector values for the names:

``` r
x |> set_names()
#> 1 2 3
#> 1 2 3
```

(this is often useful before lapply() and friends, if the vector is,
e.g. a vector of paths)

It also supports ... so you can avoid `c()` for simple cases:

```r
x |> set_names("x", "y", "z")
#> x y z
#> 1 2 3
```

And is a little stricter when it comes to the length of supplied names:

``` r
x |> set_names("x", "y")
#> Error in `set_names()`:
#> ! The size of `nm` (2) must be compatible with the size of `x` (3).
x |> setNames(c("x", "y"))
#>    x    y <NA>
#>    1    2    3
```

Hadley

-- 
http://hadley.nz


From benj@m|n@rede||ng@ @end|ng |rom gm@||@com  Tue Apr 19 14:43:00 2022
From: benj@m|n@rede||ng@ @end|ng |rom gm@||@com (Benjamin Redelings)
Date: Tue, 19 Apr 2022 08:43:00 -0400
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
Message-ID: <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>

Thanks to you and Lionel for the info!? I wasn't sure if there was a 
private core developers list, or if I was just looking in the wrong place.

1. Its good to know that the only reason not to allow _ in positional 
arguments is that its easy to miss.? Personally, I would like to be able 
to write f(x, _), but its not a big deal.

Is the idea that when you see

 ??? x |> f(x, y, _, z, w)

its hard for the eye to scan the RHS and find the _?

Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a 
wildcard pattern, and I don't recall any complaints about it being hard 
to see.

2. I can see how there would be issues with placeholders that aren't at 
the top level... although I'm not sure precisely what they are.? Any 
hints? :-)? I did briefly look at the parser/grammar file...

Thanks again for the info!

-BenRI

On 4/19/22 3:24 AM, peter dalgaard wrote:
> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>
>> x |> f(g(x=_))
> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>
> -pd
>
>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>
>> Hi,
>>
>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>
>> By searching subject lines in the r-devel mailing list archive, I've found
>>
>>      https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>
>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>
>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>
>> but not much else.
>>
>> 1. Am I looking in the wrong place?
>>
>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>
>> take care,
>>
>> -BenRI
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 20 00:55:17 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 20 Apr 2022 10:55:17 +1200
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
Message-ID: <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>

Ben,

I think you considered only part of Peter's response. Placeholders can safely only work for the first call, hence at the top level. Anything below may not do what you think as you'd have to skip frames and suddenly things can have entirely different meaning since you're not evaluating in the scope of the preceding call. That is also the reason why only named arguments are allowed, because if it was not the case then you might be tempted to write x |> _$foo[1] which looks legit at a first glance, but is no longer at the top level (since it is `[`(`$`(_, foo), 1)) and thus not valid.

Cheers,
Simon



> On Apr 20, 2022, at 12:43 AM, Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
> 
> Thanks to you and Lionel for the info!  I wasn't sure if there was a private core developers list, or if I was just looking in the wrong place.
> 
> 1. Its good to know that the only reason not to allow _ in positional arguments is that its easy to miss.  Personally, I would like to be able to write f(x, _), but its not a big deal.
> 
> Is the idea that when you see
> 
>     x |> f(x, y, _, z, w)
> 
> its hard for the eye to scan the RHS and find the _?
> 
> Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a wildcard pattern, and I don't recall any complaints about it being hard to see.
> 
> 2. I can see how there would be issues with placeholders that aren't at the top level... although I'm not sure precisely what they are.  Any hints? :-)  I did briefly look at the parser/grammar file...
> 
> Thanks again for the info!
> 
> -BenRI
> 
> On 4/19/22 3:24 AM, peter dalgaard wrote:
>> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>> 
>>> x |> f(g(x=_))
>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>> 
>> -pd
>> 
>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>> 
>>> Hi,
>>> 
>>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>> 
>>> By searching subject lines in the r-devel mailing list archive, I've found
>>> 
>>>     https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>> 
>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>> 
>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>> 
>>> but not much else.
>>> 
>>> 1. Am I looking in the wrong place?
>>> 
>>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>> 
>>> take care,
>>> 
>>> -BenRI
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Apr 20 02:22:30 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 19 Apr 2022 20:22:30 -0400
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
 <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
Message-ID: <3227a062-c6a4-e2e7-2cbf-f2a240f5f79e@gmail.com>

On 19/04/2022 6:55 p.m., Simon Urbanek wrote:
> Ben,
> 
> I think you considered only part of Peter's response. Placeholders can safely only work for the first call, hence at the top level. Anything below may not do what you think as you'd have to skip frames and suddenly things can have entirely different meaning since you're not evaluating in the scope of the preceding call. That is also the reason why only named arguments are allowed, because if it was not the case then you might be tempted to write x |> _$foo[1] which looks legit at a first glance, but is no longer at the top level (since it is `[`(`$`(_, foo), 1)) and thus not valid.

The R pipe is purely syntactic sugar, it just transforms expressions.  I 
think the real reason not to allow _ to be deeply nested in an 
expression is that it would make parsing really hard.  If you have

  x |> { some really huge expression }

then the parser would have to parse the huge expression and search it 
for underscores to see what to do with x.  With the current rule, the 
search is much easier, it's just at the top level.

There are probably cases where deeply nested underscores would be 
ambiguous, e.g. if that huge expression contained a pipe operator 
itself, who gets the substitution?

The other limitation of the transformation approach is that _ can only 
occur once.  magrittr evaluates x and puts the value in where it sees a 
dot, so this works to print 2 once and give a value of 4:

   print(2) %>% `+`(., .)

It's equivalent to

   *tmp* <- print(2)
   *tmp* + *tmp*

However, you'd have the print executed twice in

   print(2) |> `+`(_, _)

(if such was allowed), because it would be equivalent to

   print(2) + print(2)

Duncan Murdoch

> 
> Cheers,
> Simon
> 
> 
> 
>> On Apr 20, 2022, at 12:43 AM, Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>
>> Thanks to you and Lionel for the info!  I wasn't sure if there was a private core developers list, or if I was just looking in the wrong place.
>>
>> 1. Its good to know that the only reason not to allow _ in positional arguments is that its easy to miss.  Personally, I would like to be able to write f(x, _), but its not a big deal.
>>
>> Is the idea that when you see
>>
>>      x |> f(x, y, _, z, w)
>>
>> its hard for the eye to scan the RHS and find the _?
>>
>> Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a wildcard pattern, and I don't recall any complaints about it being hard to see.
>>
>> 2. I can see how there would be issues with placeholders that aren't at the top level... although I'm not sure precisely what they are.  Any hints? :-)  I did briefly look at the parser/grammar file...
>>
>> Thanks again for the info!
>>
>> -BenRI
>>
>> On 4/19/22 3:24 AM, peter dalgaard wrote:
>>> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>>>
>>>> x |> f(g(x=_))
>>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>>
>>> -pd
>>>
>>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>>>
>>>> By searching subject lines in the r-devel mailing list archive, I've found
>>>>
>>>>      https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>>>
>>>> but not much else.
>>>>
>>>> 1. Am I looking in the wrong place?
>>>>
>>>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>>>
>>>> take care,
>>>>
>>>> -BenRI
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @v|gro@@ @end|ng |rom ver|zon@net  Wed Apr 20 04:41:10 2022
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Wed, 20 Apr 2022 02:41:10 +0000 (UTC)
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <3227a062-c6a4-e2e7-2cbf-f2a240f5f79e@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
 <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
 <3227a062-c6a4-e2e7-2cbf-f2a240f5f79e@gmail.com>
Message-ID: <1925576080.832405.1650422470525@mail.yahoo.com>

I vaguely remember that some package versions of piping once simply rewrote your code?to make a period (a valid identifier in R) be the recipient of part of a calculation.
So the code generated looked like:
. <- calculation
Then the next line was another:
. <- calculation
So if the calculation included a period where a variable name might fit,?it simply worked as in:
. <- lm(formula, data = . )
But when the pipe is implemented very differently, other techniques may be needed?whether using a period or underscore or anything. Syntactic sugar is only sweet?when it works consistently and reliably without side unintended side effects.


-----Original Message-----
From: Duncan Murdoch <murdoch.duncan at gmail.com>
To: Simon Urbanek <simon.urbanek at R-project.org>; Benjamin Redelings <benjamin.redelings at gmail.com>
Cc: R-devel at r-project.org
Sent: Tue, Apr 19, 2022 8:22 pm
Subject: Re: [Rd] Pipe operator status, placeholders?

On 19/04/2022 6:55 p.m., Simon Urbanek wrote:
> Ben,
> 
> I think you considered only part of Peter's response. Placeholders can safely only work for the first call, hence at the top level. Anything below may not do what you think as you'd have to skip frames and suddenly things can have entirely different meaning since you're not evaluating in the scope of the preceding call. That is also the reason why only named arguments are allowed, because if it was not the case then you might be tempted to write x |> _$foo[1] which looks legit at a first glance, but is no longer at the top level (since it is `[`(`$`(_, foo), 1)) and thus not valid.

The R pipe is purely syntactic sugar, it just transforms expressions.? I 
think the real reason not to allow _ to be deeply nested in an 
expression is that it would make parsing really hard.? If you have

? x |> { some really huge expression }

then the parser would have to parse the huge expression and search it 
for underscores to see what to do with x.? With the current rule, the 
search is much easier, it's just at the top level.

There are probably cases where deeply nested underscores would be 
ambiguous, e.g. if that huge expression contained a pipe operator 
itself, who gets the substitution?

The other limitation of the transformation approach is that _ can only 
occur once.? magrittr evaluates x and puts the value in where it sees a 
dot, so this works to print 2 once and give a value of 4:

? print(2) %>% `+`(., .)

It's equivalent to

? *tmp* <- print(2)
? *tmp* + *tmp*

However, you'd have the print executed twice in

? print(2) |> `+`(_, _)

(if such was allowed), because it would be equivalent to

? print(2) + print(2)

Duncan Murdoch

> 
> Cheers,
> Simon
> 
> 
> 
>> On Apr 20, 2022, at 12:43 AM, Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>
>> Thanks to you and Lionel for the info!? I wasn't sure if there was a private core developers list, or if I was just looking in the wrong place.
>>
>> 1. Its good to know that the only reason not to allow _ in positional arguments is that its easy to miss.? Personally, I would like to be able to write f(x, _), but its not a big deal.
>>
>> Is the idea that when you see
>>
>>? ? ? x |> f(x, y, _, z, w)
>>
>> its hard for the eye to scan the RHS and find the _?
>>
>> Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a wildcard pattern, and I don't recall any complaints about it being hard to see.
>>
>> 2. I can see how there would be issues with placeholders that aren't at the top level... although I'm not sure precisely what they are.? Any hints? :-)? I did briefly look at the parser/grammar file...
>>
>> Thanks again for the info!
>>
>> -BenRI
>>
>> On 4/19/22 3:24 AM, peter dalgaard wrote:
>>> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>>>
>>>> x |> f(g(x=_))
>>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>>
>>> -pd
>>>
>>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>>>
>>>> By searching subject lines in the r-devel mailing list archive, I've found
>>>>
>>>>? ? ? https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>>>
>>>> but not much else.
>>>>
>>>> 1. Am I looking in the wrong place?
>>>>
>>>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>>>
>>>> take care,
>>>>
>>>> -BenRI
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From benj@m|n@rede||ng@ @end|ng |rom gm@||@com  Wed Apr 20 05:07:33 2022
From: benj@m|n@rede||ng@ @end|ng |rom gm@||@com (Benjamin Redelings)
Date: Tue, 19 Apr 2022 23:07:33 -0400
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
 <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
Message-ID: <7433e177-5977-e8ac-8dd7-c46f68bd7318@gmail.com>

Hi Simon,

1. Peter said that the parser "gets confused" by placeholder's that 
don't occur at the top-level.? But this raises the question of why the 
parser gets confused, and whether you could fix it.

It sounds like you are saying something else -- that if E |> f(g(_)) was 
parsed as f(g(E)), then E is evaluated in an unexpected context.? Is 
this situation similar to LISP, where (I think) the s-exp E would yield 
different results if evaluated in a different "environment"?

2. With regards to named arguments, it seems like you could (in theory) 
require that `_` only occurs as an entry in a standard function call by 
making it a production of the grammar node "sub" in this file:

 ??? https://github.com/wch/r-source/blob/trunk/src/main/gram.y

take care,

-BenRI

On 4/19/22 6:55 PM, Simon Urbanek wrote:
> Ben,
>
> I think you considered only part of Peter's response. Placeholders can safely only work for the first call, hence at the top level. Anything below may not do what you think as you'd have to skip frames and suddenly things can have entirely different meaning since you're not evaluating in the scope of the preceding call. That is also the reason why only named arguments are allowed, because if it was not the case then you might be tempted to write x |> _$foo[1] which looks legit at a first glance, but is no longer at the top level (since it is `[`(`$`(_, foo), 1)) and thus not valid.
>
> Cheers,
> Simon
>
>
>
>> On Apr 20, 2022, at 12:43 AM, Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>
>> Thanks to you and Lionel for the info!  I wasn't sure if there was a private core developers list, or if I was just looking in the wrong place.
>>
>> 1. Its good to know that the only reason not to allow _ in positional arguments is that its easy to miss.  Personally, I would like to be able to write f(x, _), but its not a big deal.
>>
>> Is the idea that when you see
>>
>>      x |> f(x, y, _, z, w)
>>
>> its hard for the eye to scan the RHS and find the _?
>>
>> Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a wildcard pattern, and I don't recall any complaints about it being hard to see.
>>
>> 2. I can see how there would be issues with placeholders that aren't at the top level... although I'm not sure precisely what they are.  Any hints? :-)  I did briefly look at the parser/grammar file...
>>
>> Thanks again for the info!
>>
>> -BenRI
>>
>> On 4/19/22 3:24 AM, peter dalgaard wrote:
>>> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>>>
>>>> x |> f(g(x=_))
>>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>>
>>> -pd
>>>
>>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>>>
>>>> By searching subject lines in the r-devel mailing list archive, I've found
>>>>
>>>>      https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>>>
>>>> but not much else.
>>>>
>>>> 1. Am I looking in the wrong place?
>>>>
>>>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>>>
>>>> take care,
>>>>
>>>> -BenRI
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From @v|gro@@ @end|ng |rom ver|zon@net  Wed Apr 20 05:21:26 2022
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Wed, 20 Apr 2022 03:21:26 +0000 (UTC)
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <7433e177-5977-e8ac-8dd7-c46f68bd7318@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
 <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
 <7433e177-5977-e8ac-8dd7-c46f68bd7318@gmail.com>
Message-ID: <1334502880.845535.1650424886792@mail.yahoo.com>

Generally all arguments to a function are named and you are free to?spell out the names. So unless a function had a named argument calledjust "_", it sounds like you could use the new underscore with just?about any function as long as you fully spelled out all arguments as named.
Is that too high a price to pay for using that function in the new pipeline?



-----Original Message-----
From: Benjamin Redelings <benjamin.redelings at gmail.com>
To: Simon Urbanek <simon.urbanek at R-project.org>
Cc: R-devel at r-project.org
Sent: Tue, Apr 19, 2022 11:07 pm
Subject: Re: [Rd] Pipe operator status, placeholders?

Hi Simon,

1. Peter said that the parser "gets confused" by placeholder's that 
don't occur at the top-level.? But this raises the question of why the 
parser gets confused, and whether you could fix it.

It sounds like you are saying something else -- that if E |> f(g(_)) was 
parsed as f(g(E)), then E is evaluated in an unexpected context.? Is 
this situation similar to LISP, where (I think) the s-exp E would yield 
different results if evaluated in a different "environment"?

2. With regards to named arguments, it seems like you could (in theory) 
require that `_` only occurs as an entry in a standard function call by 
making it a production of the grammar node "sub" in this file:

 ??? https://github.com/wch/r-source/blob/trunk/src/main/gram.y

take care,

-BenRI

On 4/19/22 6:55 PM, Simon Urbanek wrote:
> Ben,
>
> I think you considered only part of Peter's response. Placeholders can safely only work for the first call, hence at the top level. Anything below may not do what you think as you'd have to skip frames and suddenly things can have entirely different meaning since you're not evaluating in the scope of the preceding call. That is also the reason why only named arguments are allowed, because if it was not the case then you might be tempted to write x |> _$foo[1] which looks legit at a first glance, but is no longer at the top level (since it is `[`(`$`(_, foo), 1)) and thus not valid.
>
> Cheers,
> Simon
>
>
>
>> On Apr 20, 2022, at 12:43 AM, Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>
>> Thanks to you and Lionel for the info!? I wasn't sure if there was a private core developers list, or if I was just looking in the wrong place.
>>
>> 1. Its good to know that the only reason not to allow _ in positional arguments is that its easy to miss.? Personally, I would like to be able to write f(x, _), but its not a big deal.
>>
>> Is the idea that when you see
>>
>>? ? ? x |> f(x, y, _, z, w)
>>
>> its hard for the eye to scan the RHS and find the _?
>>
>> Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a wildcard pattern, and I don't recall any complaints about it being hard to see.
>>
>> 2. I can see how there would be issues with placeholders that aren't at the top level... although I'm not sure precisely what they are.? Any hints? :-)? I did briefly look at the parser/grammar file...
>>
>> Thanks again for the info!
>>
>> -BenRI
>>
>> On 4/19/22 3:24 AM, peter dalgaard wrote:
>>> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>>>
>>>> x |> f(g(x=_))
>>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>>
>>> -pd
>>>
>>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>>>
>>>> By searching subject lines in the r-devel mailing list archive, I've found
>>>>
>>>>? ? ? https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>>
>>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>>>
>>>> but not much else.
>>>>
>>>> 1. Am I looking in the wrong place?
>>>>
>>>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>>>
>>>> take care,
>>>>
>>>> -BenRI
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From benj@m|n@rede||ng@ @end|ng |rom gm@||@com  Wed Apr 20 05:23:42 2022
From: benj@m|n@rede||ng@ @end|ng |rom gm@||@com (Benjamin Redelings)
Date: Tue, 19 Apr 2022 23:23:42 -0400
Subject: [Rd] Pipe operator status, placeholders?
In-Reply-To: <3227a062-c6a4-e2e7-2cbf-f2a240f5f79e@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <4af6625a-edef-3b91-2f21-9a07a728e6b8@gmail.com>
 <302E5507-3EBC-41CA-B0BC-65D67DA5154D@R-project.org>
 <3227a062-c6a4-e2e7-2cbf-f2a240f5f79e@gmail.com>
Message-ID: <44c6fde1-f231-5185-f285-929828e0290a@gmail.com>

On 4/19/22 8:22 PM, Duncan Murdoch wrote:
> On 19/04/2022 6:55 p.m., Simon Urbanek wrote:
>> Ben,
>>
>> I think you considered only part of Peter's response. Placeholders 
>> can safely only work for the first call, hence at the top level. 
>> Anything below may not do what you think as you'd have to skip frames 
>> and suddenly things can have entirely different meaning since you're 
>> not evaluating in the scope of the preceding call. That is also the 
>> reason why only named arguments are allowed, because if it was not 
>> the case then you might be tempted to write x |> _$foo[1] which looks 
>> legit at a first glance, but is no longer at the top level (since it 
>> is `[`(`$`(_, foo), 1)) and thus not valid.
>
> The R pipe is purely syntactic sugar, it just transforms expressions.? 
> I think the real reason not to allow _ to be deeply nested in an 
> expression is that it would make parsing really hard.? If you have
>
> ?x |> { some really huge expression }
>
> then the parser would have to parse the huge expression and search it 
> for underscores to see what to do with x.? With the current rule, the 
> search is much easier, it's just at the top level.

As long as the search for placeholders is linear in the size of the 
total expression, I suspect that this would will be quite fast.? It 
might be a bit tricky to make sure that each sub-expression is searched 
only once, if there are nested pipes.

> There are probably cases where deeply nested underscores would be 
> ambiguous, e.g. if that huge expression contained a pipe operator 
> itself, who gets the substitution?

If you have something like x |> f(_, y |> g(_)), then you could make a 
rule, such as: when the top-level pipe searches for a placeholder in its 
RHS, it ignores the RHS of any nested pipe operator that it finds.

Interestingly, this happens automatically.? When the top-level pipe 
operator searches its RHS for the placeholder, it would see `f(_ , 
g(y))`.? Any nested pipe in the RHS would already have consumed its own 
placeholder and been transformed into a pipeless expression.

However, the top-level pipe would search the expression `g(y)` for a 
placeholder, which means that the expression gets searched twice.

>
> The other limitation of the transformation approach is that _ can only 
> occur once.? magrittr evaluates x and puts the value in where it sees 
> a dot, so this works to print 2 once and give a value of 4:
>
> ? print(2) %>% `+`(., .)
>
> It's equivalent to
>
> ? *tmp* <- print(2)
> ? *tmp* + *tmp*
>
> However, you'd have the print executed twice in
>
> ? print(2) |> `+`(_, _)
>
> (if such was allowed), because it would be equivalent to
>
> ? print(2) + print(2)
>
Yeah, this makes sense.? If you allow the placeholder to occur twice, 
you can't just substitute the expression, because then you could 
evaluate it twice.? Then you have to implement lazy evaluation, which 
the lambda function syntax `x |> (\(d) ...)()` already does.

take care,

-BenRI


> Duncan Murdoch
>
>>
>> Cheers,
>> Simon
>>
>>
>>
>>> On Apr 20, 2022, at 12:43 AM, Benjamin Redelings 
>>> <benjamin.redelings at gmail.com> wrote:
>>>
>>> Thanks to you and Lionel for the info!? I wasn't sure if there was a 
>>> private core developers list, or if I was just looking in the wrong 
>>> place.
>>>
>>> 1. Its good to know that the only reason not to allow _ in 
>>> positional arguments is that its easy to miss.? Personally, I would 
>>> like to be able to write f(x, _), but its not a big deal.
>>>
>>> Is the idea that when you see
>>>
>>> ???? x |> f(x, y, _, z, w)
>>>
>>> its hard for the eye to scan the RHS and find the _?
>>>
>>> Hmm.... I notice that a lot of languages (i.e. Haskell) use _ as a 
>>> wildcard pattern, and I don't recall any complaints about it being 
>>> hard to see.
>>>
>>> 2. I can see how there would be issues with placeholders that aren't 
>>> at the top level... although I'm not sure precisely what they are.? 
>>> Any hints? :-)? I did briefly look at the parser/grammar file...
>>>
>>> Thanks again for the info!
>>>
>>> -BenRI
>>>
>>> On 4/19/22 3:24 AM, peter dalgaard wrote:
>>>> You probably want Luke Tierney for the full story, but what I 
>>>> gather from the deliberations (on the private R-core list), there 
>>>> are issues with how non-funcall syntax like lm(....) |> _$coef[2] 
>>>> should work. This, in turn, has to do with wanting to have the 
>>>> placeholder occur only as a toplevel substitution (i.e. "["("$"(_, 
>>>> coef), 2) is a no-go. And the reason for that has to do with the 
>>>> way the pipe works in the absense of placeholder, e.g. the parser 
>>>> gets confused by
>>>>
>>>>> x |> f(g(x=_))
>>>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>>>
>>>> -pd
>>>>
>>>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings 
>>>>> <benjamin.redelings at gmail.com> wrote:
>>>>>
>>>>> Hi,
>>>>>
>>>>> I see that R 4.2 adds the underscore _ as a placeholder for the 
>>>>> new forward pipe operator |> , but only for named arguments. The 
>>>>> reason why placeholders for position arguments was NOT added isn't 
>>>>> clear to me, so I've been looking for the discussion around the 
>>>>> introduction of the placeholder.
>>>>>
>>>>> By searching subject lines in the r-devel mailing list archive, 
>>>>> I've found
>>>>>
>>>>> https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>>>
>>>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>>>
>>>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html 
>>>>> and following messages
>>>>>
>>>>> but not much else.
>>>>>
>>>>> 1. Am I looking in the wrong place?
>>>>>
>>>>> 2. What is the reasoning behind allowing _ as a placeholder only 
>>>>> for named arguments?
>>>>>
>>>>> take care,
>>>>>
>>>>> -BenRI
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 21 15:25:43 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 21 Apr 2022 15:25:43 +0200
Subject: [Rd] available.packages function and UNC paths
In-Reply-To: <9699bb8ee6e5404eb32fcef502a38e71@hrsdc-rhdcc.gc.ca>
References: <9699bb8ee6e5404eb32fcef502a38e71@hrsdc-rhdcc.gc.ca>
Message-ID: <fb6ab229-ba0a-a728-ac27-ab82b5de6907@gmail.com>


On 4/6/22 18:07, mark.lee--- via R-devel wrote:
> Hello,
>
> I'm responsible for maintaining a mirrored internal CRAN repository for my organization. We have a script that uses the miniCRAN library to add and update packages within the repository and since the repository is stored on a network drive I have to use UNC paths when calling miniCRAN functions such as this:
>
> updatePackages(path = '\\\\my-network-drive.net\\repos\\packages', ...)
>
> updatePackages function in turns call pkgAvail, another miniCRAN function, which calls available.packages and then read.dcf function. However I discovered that this line in available.packages transforms the UNC path to a form that read.dcf can't use:
>
> if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 8L), "/PACKAGES")
>
> This line transforms my UNC path to //\\\\my-network-drive.net\\repos\\packages, which read.dcf can't use. During debugging I found that pkgAvail transformed my UNC path to 'file:///\\\\ my-network-drive.net\\repos\\packages' and that is the path being passed to available.packages. To fix my issue I re-defined my own available.packages function and changed the line to:
>
> if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 10L), "/PACKAGES")
>
> This way the UNC path being passed to read.dcf will be '/\\my-network-drive.net\\repos\\packages', which read.dcf can use. I'm wondering if similar changes can be made in the available.packages function for the next R release to automatically detect UNC paths and modify it so that it can work with UNC paths.

R does not support UNC paths, even though they work in some functions 
(as stated at least in R-intro documentation). You can use e.g. a mapped 
drive as a reliable work-around.

Transforming the file URIs is tricky enough even without UNC support, 
and as UNC is only used on Windows, and there is an easy work-around, 
support for it in update.packages would have very low priority. The cost 
is not only implementing it, but also maintaining and testing. Still, to 
increase the chances, you can submit a bug (wishlist) report to R 
bugzilla, referring only to base R packages (so not e.g. miniCRAN) and 
add a well-tested patch to be considered.

Best
Tomas

> Thanks,
>
> Mark
>
>
>
>
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From net|kj@ @end|ng |rom gm@||@com  Thu Apr 21 17:38:42 2022
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Thu, 21 Apr 2022 17:38:42 +0200
Subject: [Rd] Undocumented 4.2.0 changes in grid text handling?
Message-ID: <CA+6hu7fw=76zM1j6+JxFsKRye2s7CpKLvvWNO8M7pMprovKwJA@mail.gmail.com>

Hello everyone,

I've been testing R 4.2.0 release candidates for some time and have spotted
a few changes that are not documented in
https://svn.r-project.org/R/branches/R-4-2-branch/src/library/grid/inst/doc/changes.txt,
general R NEWS, nor in this blogpost
https://developer.r-project.org/Blog/public/2021/12/14/updating-graphics-devices-for-r-4.2.0/index.html
.

In R 4.1.3, grid::gpar(fontface= "bold") results in a gpar "list" with
$fontface and (legacy?) $font entries, but in R 4.2.0, there is only $font.
In the manual, font is described only for backward compatibility.

I think there are more possibly subtle changes around text rendering
because bold fontface and inter-word spacing in the package {gridtext}
happened to stop working, see the issue at
https://github.com/wilkelab/gridtext/issues/24. Turns out it is pretty hard
to debug and to solve. Do you have some hints about other changes in grid
that could explain so different behaviour?

Many thanks and kind regards!
Jan

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr 21 17:57:17 2022
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 21 Apr 2022 10:57:17 -0500 (CDT)
Subject: [Rd] [External] Re:  Pipe operator status, placeholders?
In-Reply-To: <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
Message-ID: <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>

At some point there will probably be a blog post about the design of
the forward pipe operator in base, but that is not something I will
think about until after the current semester is over and my backlog of
other things is cleared.

Best,

luke

On Tue, 19 Apr 2022, peter dalgaard wrote:

> You probably want Luke Tierney for the full story, but what I gather from the deliberations (on the private R-core list), there are issues with how non-funcall syntax like lm(....) |> _$coef[2] should work. This, in turn, has to do with wanting to have the placeholder occur only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a no-go. And the reason for that has to do with the way the pipe works in the absense of placeholder, e.g. the parser gets confused by
>
>> x |> f(g(x=_))
> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>
> -pd
>
>> On 17 Apr 2022, at 01:04 , Benjamin Redelings <benjamin.redelings at gmail.com> wrote:
>>
>> Hi,
>>
>> I see that R 4.2 adds the underscore _ as a placeholder for the new forward pipe operator |> , but only for named arguments. The reason why placeholders for position arguments was NOT added isn't clear to me, so I've been looking for the discussion around the introduction of the placeholder.
>>
>> By searching subject lines in the r-devel mailing list archive, I've found
>>
>>     https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>
>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>
>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and following messages
>>
>> but not much else.
>>
>> 1. Am I looking in the wrong place?
>>
>> 2. What is the reasoning behind allowing _ as a placeholder only for named arguments?
>>
>> take care,
>>
>> -BenRI
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr 21 18:47:38 2022
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 21 Apr 2022 11:47:38 -0500 (CDT)
Subject: [Rd] 
 [External] Include line number in the error messages regarding
 misuse of placeholder
In-Reply-To: <OSZP286MB2305B5382F66E1D11FF4BBA6D5169@OSZP286MB2305.JPNP286.PROD.OUTLOOK.COM>
References: <OSZP286MB2305B5382F66E1D11FF4BBA6D5169@OSZP286MB2305.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <2ecf7ce8-e4c3-86f5-51b4-ced9628814@uiowa.edu>

[Apologies for the late reply. About a month ago our wonderful
Exchange server apparently started to dump messages into Junk Email
again even though I had turned that "feature" off, and I just noticed
a couple of days ago.]

In principle I'd be happy to consider a simple patch to gram.y that
add line numbers. I can't see the benefit of a complicated patch that
makes the grammar even harder to maintain than it is already as being
worth the cost. If you can come up with a simple. well tested patch
please submit via bugzilla.

Best,

luke

On Mon, 21 Mar 2022, Kun Ren wrote:

> Hello, R maintainers,
>
> We are discussing the changes needed for code linting in the lintr package development for the upcoming placeholder in a pipe at <https://github.com/r-lib/lintr/issues/959>.
>
> First, thanks for implementing the feature!
>
> While I'm playing with it and see what we could do to improve in code linting for it, I notice that the error messages produced by the parser regarding the misuse of placeholder do not contain anything about the line number, which makes it hard to tell user which line of code causes this error.
>
> For example,
>
>    parse(text = "data |> fun(mpg ~ cyl, data1 = _, data2 = _)")
>
> produces the error "pipe placeholder may only appear once"
>
>    parse(text = "mtcars |> lm(mpg ~ cyl, data = fun(_))")
>
> produces the error "invalid use of pipe placeholder".
>
> Neither contains a line number. Michael Chirico tried to include the correct line number (https://github.com/r-lib/lintr/issues/959#issuecomment-1073389513), but it seems non-trivial to do so.
>
> We are wondering if it is possible to include a proper line number in these error messages, like some other messages that include it, so that user could know better about where the error occurs?
>
> Best regards,
> Kun Ren
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Apr 21 20:23:38 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 21 Apr 2022 14:23:38 -0400
Subject: [Rd] 
 [External] Include line number in the error messages regarding
 misuse of placeholder
In-Reply-To: <2ecf7ce8-e4c3-86f5-51b4-ced9628814@uiowa.edu>
References: <OSZP286MB2305B5382F66E1D11FF4BBA6D5169@OSZP286MB2305.JPNP286.PROD.OUTLOOK.COM>
 <2ecf7ce8-e4c3-86f5-51b4-ced9628814@uiowa.edu>
Message-ID: <a762cc70-05be-314b-094e-137f136ab851@gmail.com>

The basic idea for a patch is that the bison/yacc variables &@1, &@2 and 
&@3 give the locations for the three parts of the pattern

    expr PIPE expr

I'll see if I can put together a minimal change that makes these 
available when the error messages are generated.

Duncan Murdoch

On 21/04/2022 12:47 p.m., luke-tierney at uiowa.edu wrote:
> [Apologies for the late reply. About a month ago our wonderful
> Exchange server apparently started to dump messages into Junk Email
> again even though I had turned that "feature" off, and I just noticed
> a couple of days ago.]
> 
> In principle I'd be happy to consider a simple patch to gram.y that
> add line numbers. I can't see the benefit of a complicated patch that
> makes the grammar even harder to maintain than it is already as being
> worth the cost. If you can come up with a simple. well tested patch
> please submit via bugzilla.
> 
> Best,
> 
> luke
> 
> On Mon, 21 Mar 2022, Kun Ren wrote:
> 
>> Hello, R maintainers,
>>
>> We are discussing the changes needed for code linting in the lintr package development for the upcoming placeholder in a pipe at <https://github.com/r-lib/lintr/issues/959>.
>>
>> First, thanks for implementing the feature!
>>
>> While I'm playing with it and see what we could do to improve in code linting for it, I notice that the error messages produced by the parser regarding the misuse of placeholder do not contain anything about the line number, which makes it hard to tell user which line of code causes this error.
>>
>> For example,
>>
>>     parse(text = "data |> fun(mpg ~ cyl, data1 = _, data2 = _)")
>>
>> produces the error "pipe placeholder may only appear once"
>>
>>     parse(text = "mtcars |> lm(mpg ~ cyl, data = fun(_))")
>>
>> produces the error "invalid use of pipe placeholder".
>>
>> Neither contains a line number. Michael Chirico tried to include the correct line number (https://github.com/r-lib/lintr/issues/959#issuecomment-1073389513), but it seems non-trivial to do so.
>>
>> We are wondering if it is possible to include a proper line number in these error messages, like some other messages that include it, so that user could know better about where the error occurs?
>>
>> Best regards,
>> Kun Ren
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From kev|nu@hey @end|ng |rom gm@||@com  Thu Apr 21 21:05:09 2022
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Thu, 21 Apr 2022 12:05:09 -0700
Subject: [Rd] available.packages function and UNC paths
In-Reply-To: <fb6ab229-ba0a-a728-ac27-ab82b5de6907@gmail.com>
References: <9699bb8ee6e5404eb32fcef502a38e71@hrsdc-rhdcc.gc.ca>
 <fb6ab229-ba0a-a728-ac27-ab82b5de6907@gmail.com>
Message-ID: <CAJXgQP2JczWoxscuYWfE+V5R=dZEA7HPRA1MPFGxNrZvuo8fcQ@mail.gmail.com>

FWIW, at least as far as R is concerned, you should be able to use a
file URI with a UNC path. For example, the following works for me:

repopath <- tempfile("minicran-")
dir.create(repopath)
repopath <- normalizePath(repopath, winslash = "/", mustWork = TRUE)
miniCRAN::makeRepo("renv", path = repopath)

uncpath <- paste0("file:////localhost/c$", substring(repopath, 3L))
options(repos = c(local = uncpath))
available.packages()
install.packages("renv", type = "source")

In this example, the call to available.packages() succeeds for me. I'm
not sure if miniCRAN itself supports such URIs consistently, though. I
agree that using a mapped letter drive is the simplest workaround.

Best,
Kevin

On Thu, Apr 21, 2022 at 6:26 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> On 4/6/22 18:07, mark.lee--- via R-devel wrote:
> > Hello,
> >
> > I'm responsible for maintaining a mirrored internal CRAN repository for my organization. We have a script that uses the miniCRAN library to add and update packages within the repository and since the repository is stored on a network drive I have to use UNC paths when calling miniCRAN functions such as this:
> >
> > updatePackages(path = '\\\\my-network-drive.net\\repos\\packages', ...)
> >
> > updatePackages function in turns call pkgAvail, another miniCRAN function, which calls available.packages and then read.dcf function. However I discovered that this line in available.packages transforms the UNC path to a form that read.dcf can't use:
> >
> > if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 8L), "/PACKAGES")
> >
> > This line transforms my UNC path to //\\\\my-network-drive.net\\repos\\packages, which read.dcf can't use. During debugging I found that pkgAvail transformed my UNC path to 'file:///\\\\ my-network-drive.net\\repos\\packages' and that is the path being passed to available.packages. To fix my issue I re-defined my own available.packages function and changed the line to:
> >
> > if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 10L), "/PACKAGES")
> >
> > This way the UNC path being passed to read.dcf will be '/\\my-network-drive.net\\repos\\packages', which read.dcf can use. I'm wondering if similar changes can be made in the available.packages function for the next R release to automatically detect UNC paths and modify it so that it can work with UNC paths.
>
> R does not support UNC paths, even though they work in some functions
> (as stated at least in R-intro documentation). You can use e.g. a mapped
> drive as a reliable work-around.
>
> Transforming the file URIs is tricky enough even without UNC support,
> and as UNC is only used on Windows, and there is an easy work-around,
> support for it in update.packages would have very low priority. The cost
> is not only implementing it, but also maintaining and testing. Still, to
> increase the chances, you can submit a bug (wishlist) report to R
> bugzilla, referring only to base R packages (so not e.g. miniCRAN) and
> add a well-tested patch to be considered.
>
> Best
> Tomas
>
> > Thanks,
> >
> > Mark
> >
> >
> >
> >
> >
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Fri Apr 22 03:44:10 2022
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Fri, 22 Apr 2022 13:44:10 +1200
Subject: [Rd] Undocumented 4.2.0 changes in grid text handling?
In-Reply-To: <CA+6hu7fw=76zM1j6+JxFsKRye2s7CpKLvvWNO8M7pMprovKwJA@mail.gmail.com>
References: <CA+6hu7fw=76zM1j6+JxFsKRye2s7CpKLvvWNO8M7pMprovKwJA@mail.gmail.com>
Message-ID: <c4a3bf88-b104-15ae-7b24-400f864eccab@stat.auckland.ac.nz>

Hi

 From the github issue discussion, it looks like you have detected the 
problem, which appears to be that 'gridtext' was paying attention to 
gp$fontface, whereas 'grid' internally focuses on gp$font.

I created the problem for 'gridtext' by "tidying up" and removing 
gp$fontface internally.  Apologies for that.

I think I can partially hide behind the fact that these are internal 
details to 'grid', which is why the change was not documented in the 
places that you point out.

Please let me know if you still think that there is an error in 'grid' 
that needs fixing.

Paul

On 22/04/2022 3:38 am, Jan Net?k wrote:
> Hello everyone,
> 
> I've been testing R 4.2.0 release candidates for some time and have spotted
> a few changes that are not documented in
> https://svn.r-project.org/R/branches/R-4-2-branch/src/library/grid/inst/doc/changes.txt 
> <https://svn.r-project.org/R/branches/R-4-2-branch/src/library/grid/inst/doc/changes.txt>,
> general R NEWS, nor in this blogpost
> https://developer.r-project.org/Blog/public/2021/12/14/updating-graphics-devices-for-r-4.2.0/index.html 
> <https://developer.r-project.org/Blog/public/2021/12/14/updating-graphics-devices-for-r-4.2.0/index.html>
> .
> 
> In R 4.1.3, grid::gpar(fontface= "bold") results in a gpar "list" with
> $fontface and (legacy?) $font entries, but in R 4.2.0, there is only $font.
> In the manual, font is described only for backward compatibility.
> 
> I think there are more possibly subtle changes around text rendering
> because bold fontface and inter-word spacing in the package {gridtext}
> happened to stop working, see the issue at
> https://github.com/wilkelab/gridtext/issues/24 
> <https://github.com/wilkelab/gridtext/issues/24>. 
> Turns out it is pretty hard
> to debug and to solve. Do you have some hints about other changes in grid
> that could explain so different behaviour?
> 
> Many thanks and kind regards!
> Jan
> 
> [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Apr 22 09:56:27 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 22 Apr 2022 09:56:27 +0200
Subject: [Rd] available.packages function and UNC paths
In-Reply-To: <CAJXgQP2JczWoxscuYWfE+V5R=dZEA7HPRA1MPFGxNrZvuo8fcQ@mail.gmail.com>
References: <9699bb8ee6e5404eb32fcef502a38e71@hrsdc-rhdcc.gc.ca>
 <fb6ab229-ba0a-a728-ac27-ab82b5de6907@gmail.com>
 <CAJXgQP2JczWoxscuYWfE+V5R=dZEA7HPRA1MPFGxNrZvuo8fcQ@mail.gmail.com>
Message-ID: <c2332b72-01d5-aa9a-2beb-a66312b9259c@gmail.com>


On 4/21/22 21:05, Kevin Ushey wrote:
> FWIW, at least as far as R is concerned, you should be able to use a
> file URI with a UNC path. For example, the following works for me:
>
> repopath <- tempfile("minicran-")
> dir.create(repopath)
> repopath <- normalizePath(repopath, winslash = "/", mustWork = TRUE)
> miniCRAN::makeRepo("renv", path = repopath)
>
> uncpath <- paste0("file:////localhost/c$", substring(repopath, 3L))
> options(repos = c(local = uncpath))
> available.packages()
> install.packages("renv", type = "source")
>
> In this example, the call to available.packages() succeeds for me. I'm
> not sure if miniCRAN itself supports such URIs consistently, though. I
> agree that using a mapped letter drive is the simplest workaround.

Thanks, Kevin, for the nice repro and for checking that 
available.packages() actually handles the UNC path correctly (the 
4-slash form).

The 2-slash form works as well:

uncpath <- paste0("file://localhost/c$", substring(repopath, 3L))

The form Mark observed doesn't, but from my reading it is not a valid one:

uncpath <- paste0("file://\\\\localhost\\c$", substring(repopath, 3L))

Best
Tomas

https://en.wikipedia.org/wiki/File_URI_scheme
https://datatracker.ietf.org/doc/html/rfc8089#appendix-E.3

> Best,
> Kevin
>
> On Thu, Apr 21, 2022 at 6:26 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> On 4/6/22 18:07, mark.lee--- via R-devel wrote:
>>> Hello,
>>>
>>> I'm responsible for maintaining a mirrored internal CRAN repository for my organization. We have a script that uses the miniCRAN library to add and update packages within the repository and since the repository is stored on a network drive I have to use UNC paths when calling miniCRAN functions such as this:
>>>
>>> updatePackages(path = '\\\\my-network-drive.net\\repos\\packages', ...)
>>>
>>> updatePackages function in turns call pkgAvail, another miniCRAN function, which calls available.packages and then read.dcf function. However I discovered that this line in available.packages transforms the UNC path to a form that read.dcf can't use:
>>>
>>> if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 8L), "/PACKAGES")
>>>
>>> This line transforms my UNC path to //\\\\my-network-drive.net\\repos\\packages, which read.dcf can't use. During debugging I found that pkgAvail transformed my UNC path to 'file:///\\\\ my-network-drive.net\\repos\\packages' and that is the path being passed to available.packages. To fix my issue I re-defined my own available.packages function and changed the line to:
>>>
>>> if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 10L), "/PACKAGES")
>>>
>>> This way the UNC path being passed to read.dcf will be '/\\my-network-drive.net\\repos\\packages', which read.dcf can use. I'm wondering if similar changes can be made in the available.packages function for the next R release to automatically detect UNC paths and modify it so that it can work with UNC paths.
>> R does not support UNC paths, even though they work in some functions
>> (as stated at least in R-intro documentation). You can use e.g. a mapped
>> drive as a reliable work-around.
>>
>> Transforming the file URIs is tricky enough even without UNC support,
>> and as UNC is only used on Windows, and there is an easy work-around,
>> support for it in update.packages would have very low priority. The cost
>> is not only implementing it, but also maintaining and testing. Still, to
>> increase the chances, you can submit a bug (wishlist) report to R
>> bugzilla, referring only to base R packages (so not e.g. miniCRAN) and
>> add a well-tested patch to be considered.
>>
>> Best
>> Tomas
>>
>>> Thanks,
>>>
>>> Mark
>>>
>>>
>>>
>>>
>>>
>>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Fri Apr 22 10:19:36 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 22 Apr 2022 10:19:36 +0200
Subject: [Rd] R 4.2.0 is released
Message-ID: <1E52AAD3-D28F-4071-B1B7-E7345DAB50EE@gmail.com>


The build system rolled up R-4.2.0.tar.gz (codename "Vigorous Calisthenics") this morning.

This is a major update, notably containing extensive rework on the Windows port and its toolchain, including UTF-8 support.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.2.0.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard


These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = 320967884b547734d6279dedbc739dd4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = f593bc2137bcb005337630ca5611a26f
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = c154effcc08d4202851e282bbac50859
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = b38d94569700664205a76a7de836ba83
MD5 (NEWS.3) = e55ed2c8a547b827b46e08eb7137ba23
MD5 (R-latest.tar.gz) = f1d4b7fec9e15835fdcfb8369ef039c0
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = a79b9b338cab09bd665f6b62ac6f455b
MD5 (THANKS) = 45b6d2e88a6ecb5b24fa33a781351cd5
MD5 (VERSION-INFO.dcf) = 3adb7939bc77f583d2472a43824072cd
MD5 (R-4/R-4.2.0.tar.gz) = f1d4b7fec9e15835fdcfb8369ef039c0

60a0d150e6fc1f424be76ad7b645d236b56e747692a4679f81ce6536c550e949  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
1b1f962382ff185e14b6b5b9b40dc87360399466c7d7ce928ae443261e3955c9  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
faab2a0cdd10fa456fcdbbb409e2fd6fd0afe8d3d5172ce13fbed176976a3633  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
cde079b6beab7d700d3d4ecda494e2681ad3b7f8fab13b68be090f949393ec62  NEWS.2
1910a2405300b9bc7c76beeb0753a5249cf799afe175ce28f8d782fab723e012  NEWS.3
38eab7719b7ad095388f06aa090c5a2b202791945de60d3e2bb0eab1f5097488  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
8b7d3856100220f4555d4d57140829f2e81c27eccec5b441f5dce616e9ec9061  RESOURCES
8319c5415de58ee10d4bc058d79c370fd8e6b2ad09e25d7a1e04b74ca5f380a6  THANKS
b4aa7d9d51ed8145caa4490012cc8e33033b761c4e8eead49136b69cd481fc2f  VERSION-INFO.dcf
38eab7719b7ad095388f06aa090c5a2b202791945de60d3e2bb0eab1f5097488  R-4/R-4.2.0.tar.gz


This is the relevant part of the NEWS file

CHANGES IN R 4.2.0:

  SIGNIFICANT USER-VISIBLE CHANGES:

    * The formula method of aggregate() now matches the generic in
      naming its first argument x (resolving PR#18299 by Thomas
      Soeiro).

      This means that calling aggregate() with a formula as a named
      first argument requires name formula in earlier versions of R and
      name x now, so portable code should not name the argument (code
      in many packages did).

    * Calling && or || with either argument of length greater than one
      now gives a warning (which it is intended will become an error).

    * Calling if() or while() with a condition of length greater than
      one gives an error rather than a warning.  Consequently,
      environment variable _R_CHECK_LENGTH_1_CONDITION_ no longer has
      any effect.

    * Windows users should consult the WINDOWS section below for some
      profound changes including

        * Support for 32-bit builds has been dropped.

        * UTF-8 locales are used where available.

        * The default locations for the R installation and personal
          library folder have been changed.

      Thanks to Tomas Kalibera for months of work on the Windows port
      for this release.

  NEW FEATURES:

    * matrix(x, n, m) now warns in more cases where length(x) differs
      from n * m, as suggested by Abby Spurdle and Wolfgang Huber in
      Feb 2021 on the R-devel mailing list.

      This warning can be turned into an error by setting environment
      variable _R_CHECK_MATRIX_DATA_ to TRUE: R CMD check --as-cran
      does so unless it is already set.

    * Function file_test() in package utils gains tests for symlinks,
      readability and writability.

    * capabilities("libxml") is now false.

      The description of capabilities("http/ftp") now reflects that it
      refers to the default method, no longer the internal one.

    * simplify2array() gains an except argument for controlling the
      exceptions used by sapply().

    * Environment variables R_LIBS_USER and R_LIBS_SITE are both now
      set to the R system default if unset or empty, and can be set to
      NULL to indicate an empty list of user or site library
      directories.

    * The warning for axis()(-like) calls in cases of relatively small
      ranges (typically in log-scale situations) is slightly improved
      _and_ suppressed from explicit calls to .axisPars() as has always
      been the intention.

    * The contrasts setter function `contrasts<-` gains an explicit
      default how.many = NULL rather than just using missing(how.many).

    * grid.pretty() gains a new optional argument n = 5.

    * There is a new function .pretty() with option bounds as a
      technical-utility version of pretty().  It and pretty() gain a
      new argument f.min with a better than back-compatible default.

    * Function grDevices::axisTicks() and related functions such as
      graphics::axis() work better, notably for the log scale; partly
      because of the pretty() improvements, but also because care is
      taken e.g., when ylim is finite but diff(ylim) is infinite.

    * nclass.FD() gains a digits option.

    * The R Mathlib internal C function bd0() (called indirectly from a
      dozen probability density and distribution functions such as
      dpois(), dbinom(), dgamma(), pgamma() _etc_) has been
      complemented by a more sophisticated and (mostly) more accurate C
      function ebd0(), currently called only by internal dpois_raw()
      improving accuracy for R level dpois() and potentially others
      calling it such as dnbinom(), dgamma() or pgamma().  (Thanks to
      Morten Welinder's PR#15628.)

    * write.ftable() gains sep = " " argument as suggested by Thomas
      Soeiro.

    * The names of the locale categories supported by R's
      Sys.getlocale() and Sys.setlocale() are now provided by variable
      .LC.categories in the base namespace.

    * The Date and POSIXt methods for hist() and the histogram method
      for plot() now also use the new default col = "lightgray" in
      consistency with the corresponding change to hist()'s default for
      R 4.0.0.

    * hist.default() gains new fuzz argument, and the histogram plot
      method no longer uses fractional axis ticks when displaying
      counts ("Frequency").

    * mapply() and hence Map() now also obey the "max-or-0-if-any"
      recycling rule, such that, e.g., Map(`+`, 1:3, 1[0]) is valid
      now.

    * as.character(<obj>) for "hexmode" or "octmode" objects now
      fulfils the important basic rule as.character(x)[j] ===
      as.character(x[j]).

    * The set utility functions, notably intersect() have been tweaked
      to be more consistent and symmetric in their two set arguments,
      also preserving a common mode.

    * substr(ch, start,end) <- new now e.g., preserves names(ch); ditto
      for substring(), thanks to a patch from Brodie Gaslam.

    * plot(<lm>) gains a extend.ylim.f argument, in partial response to
      PR#15285; further PR#17784 is fixed thanks to several
      contributors and a patch by Elin Waring.  The Cook's dist
      contours get customizable via cook.col and cook.lty with a
      different default color and their legend is nicer by default and
      customizable via cook.legendChanges.

    * Attempting to subset an object that is not subsettable now
      signals an error of class notSubsettableError. The
      non-subsettable object is contained in the object field of the
      error condition.

    * Subscript-out-of-bounds errors are now signaled as errors of
      class subscriptOutOfBoundsError.

    * Stack-overflow errors are now signaled as errors inheriting from
      class stackOverflowError. See ?stackOverflowError for more
      details.

    * New partly experimental Sys.setLanguage() utility, solving the
      main problem of PR#18055.

    * gettext() and gettextf() get a new option trim = TRUE which when
      set to false allows translations for strings such as "Execution
      halted\n" typical for C code.

    * An experimental implementation of hash tables is now available.
      See ?hashtab for more details.

    * identical() gains a extptr.as.ref argument for requesting that
      external pointer objects be compared as reference objects.

    * reorder() gets an argument decreasing which it passes to sort()
      for level creation; based on the wish and patch by Thomas Soeiro
      in PR#18243.

    * as.vector() gains a data.frame method which returns a simple
      named list, also clearing a long standing 'FIXME' to enable
      as.vector(<data.frame>, mode="list").  This breaks code relying
      on as.vector(<data.frame>) to return the unchanged data frame.

    * legend() is now vectorized for arguments cex, x.intersp, and
      text.width.  The latter can now also be specified as a vector
      (one element for each column of the legend) or as NA for
      computing a proper column wise maximum value of strwidth(legend).
      The argument y.intersp can be specified as a vector with one
      entry for each row of the legend.

      legend() also gains new arguments title.cex and title.font.
      Thanks to Swetlana Herbrandt.

    * Deparsing no longer remaps attribute names dim, dimnames, levels,
      names and tsp to historical S-compatible names (which structure()
      maps back).

    * sample() and sample.int() have additional sanity checks on their
      size and n arguments.

      all.equal.numeric() gains a sanity check on its tolerance
      argument - calling all.equal(a, b, c) for three numeric vectors
      is a surprisingly common error.

      mean(na.rm =), rank(na.last =), barplot(legend.text =),
      boxplot(), contour(drawlabels =), polygon(border =) and
      methods::is(class2 =) have more robust sanity checks on their
      arguments.

      R CMD Rd2pdf (used by R CMD check) has a more robust sanity check
      on the format of \alias{} commands.

    * psigamma(x, deriv) for negative x now also works for deriv = 4
      and 5; their underlying C level dpsifn() is documented in
      'Writing R Extensions'.

    * The HTML help system now uses HTML5 (wish of PR#18149).

    * ks.test() now provides exact p-values also with ties and MC
      p-values in the two-sample (Smirnov) case.  By Torsten Hothorn.

    * ks.test() gains a formula interface, with y ~ 1 for the
      one-sample (Kolmogorov) test and y ~ group for the two-sample
      (Smirnov) test.  Contributed by Torsten Hothorn.

    * The return value from ks.test() now has class c("ks.test",
      "htest") - packages using try() need to take care to use
      inherits() and not == on the class.

    * New functions psmirnov(), qsmirnov() and rsmirnov() in package
      stats implementing the asymptotic and exact distributions of the
      two-sample Smirnov statistic.

    * iconv() now allows sub = "c99" to use C99-style escapes for UTF-8
      inputs which cannot be converted to encoding to.

    * In a forward pipe |> expression it is now possible to use a named
      argument with the placeholder _ in the rhs call to specify where
      the lhs is to be inserted.  The placeholder can only appear once
      on the rhs.

    * The included LAPACK sources have been updated to version 3.10.0,
      except for the four Fortran 77 routines which 3.10.0 has
      re-implemented in Fortran 90 (where the older versions have been
      retained as the R build process does not support Fortran 90).

    * path.expand() and most other uses of tilde expansion now warn if
      a path would be too long if expanded.  (An exception is
      file.exists(), which silently returns false.)

    * trunc(<Date>, *) now supports units = "months" or "years" for
      consistency with the POSIXt method, thanks to Dirk Eddelbuettel's
      proposal in PR#18099.

    * list2DF() now checks that its arguments are of the same length,
      rather than use recycling.

    * The HTML help system has several new features: LaTeX-like math
      can be typeset using either KaTeX or MathJax, usage and example
      code is highlighted using Prism, and for dynamic help the output
      of examples and demos can be shown within the browser if the
      knitr package is installed. These features can be disabled by
      setting the environment variable _R_HELP_ENABLE_ENHANCED_HTML_ to
      a false value.

  GRAPHICS:

    * The graphics engine version, R_GE_version, has been bumped to 15
      and so packages that provide graphics devices should be
      reinstalled.

    * The grid package now allows the user to specify a "vector" of
      pattern fills.  The fill argument to gpar() accepts a list of
      gradients and/or patterns and the functions linearGradient(),
      radialGradient(), and pattern() have a new group argument.

      Points grobs (data symbols) can now also have a pattern fill.

      The grobCoords() function now returns a more informative and
      complex result.

    * The grid package has new functions for drawing isolated groups:
      grid.group(), grid.define(), and grid.use().  These functions add
      compositing operators and affine transformations to R's graphics
      capabilities.

      The grid package also has new functions for stroking and filling
      paths: grid.stroke(), grid.fill(), and grid.fillStroke().

      A new function as.path() allows the user to specify the fill rule
      for a path that is to be used for clipping, stroking, or filling;
      available options are "winding" and "evenodd".  A new function
      as.mask() allows the user to specify the type of a mask;
      available options are "alpha" and "luminance".

      These new features are only supported so far (at most) on the
      Cairo-based graphics devices and on the pdf() device.

    * dev.capabilities() reports on device support for the new
      features.

    * par() now warns about unnamed non-character arguments to prevent
      misuse such as {usr <- par("usr"); par(usr)}.

  WINDOWS:

    * R uses UTF-8 as the native encoding on recent Windows systems (at
      least Windows 10 version 1903, Windows Server 2022 or Windows
      Server 1903).  As a part of this change, R uses UCRT as the C
      runtime.  UCRT should be installed manually on systems older than
      Windows 10 or Windows Server 2016 before installing R.

    * The default personal library on Windows, folder R\win-library\x.y
      where x.y stands for R release x.y.z, is now a subdirectory of
      Local Application Data directory (usually a hidden directory
      C:\Users\username\AppData\Local).  Use shell.exec(.libPaths()[1])
      from R to open the personal library in Explorer when it is first
      in the list (PR#17842).

    * R uses a new 64-bit Tcl/Tk bundle.  The previous 32-bit/64-bit
      bundle had a different layout and can no longer be used.

    * Make files and installer scripts for Windows have been tailored
      to Rtools42, the newly recommended 64-bit gcc 10.3 MinGW-W64 UCRT
      toolchain.

    * Rtools42 by default uses the Windows security features ASLR and
      DEP; hence CRAN builds of R and packages also do.

    * R now supports files Makevars.ucrt, Makefile.ucrt, configure.ucrt
      and cleanup.ucrt in packages, which are used in preference to the
      .win variants.  This allows keeping the .win files around to
      support older versions of R.  This feature will be removed in the
      future once support for older versions of R would no longer be
      needed.

    * R.version gains a new field crt (only on Windows) to denote the C
      runtime.  The value is "ucrt".

    * On Windows, download.file(method = "auto") and url(method =
      "default") now follow Unix in using "libcurl" for all except
      file:// URIs.

    * Rtools42 includes an unpatched Msys2 build of GNU tar.  Paths
      including drive letters can be made to work by adding
      --force-local to environment variable TAR_OPTIONS.  (Rtools40 and
      earlier included a patched version which defaulted to this
      option.)

    * Installer builds of R automatically find the Rtools42 software
      collection as well as the compiler toolchain.  No PATH setting is
      required from the user.

    * The default installation directory of R for a user-only
      installation has been changed to the User Program Files directory
      (usually a hidden directory
      C:\Users\username\AppData\Local\Programs) to follow Windows
      conventions.  Use shell.exec(R.home()) from R to open the R
      installation directory in Explorer (PR#17842).

    * R now supports installation-time patching of packages.  Patches
      may be installed from a supplied URL or a local directory or
      disabled.  Patches are included into the installed packages for
      reference.  This experimental feature may be removed in the
      future.

    * libcurl is now required for building from source.

    * The clipboard connection now works also with text in other than
      the current native encoding (PR#18267, with Hiroaki Yutani).
      Text is always pasted to the clipboard in UTF16-LE and the
      encoding argument is ignored.

    * The internal case-changing functions are now used by default on
      Windows - this circumvents problems (for example with E acute) of
      the UCRT Windows' runtime.

    * R on Windows now uses the system memory allocator.  Doug Lea's
      allocator was used since R 1.2.0 to mitigate performance
      limitations seen with system allocators on earlier versions of
      Windows.

    * memory.limit() and memory.size() are now stubs on Windows (as on
      Unix-alikes).

    * Applications embedding R on Windows can now use additional
      callbacks, which have so far only been available only on Unix
      (PR#18286).

  INSTALLATION:

    * Facilities for accessing ftp:// sites are no longer tested
      (except _pro tem_ for curlGetHeaders()) as modern browsers have
      removed support.

    * R can now be built with DEFS = -DSTRICT_R_HEADERS .

  PACKAGE INSTALLATION:

    * R CMD INSTALL no longer tangles vignettes. This completes an R
      CMD build change in R 3.0.0 and affects packages built before R
      3.0.2. Such packages should be re-made with R CMD build to have
      the tangled R code of vignettes shipped with the tarball.

    * USE_FC_LEN_T will become the default: this uses the correct
      prototypes for Fortran BLAS/LAPACK routines called from C/C++,
      and requires adjustment of most such calls - see 'Writing R
      Extensions' SS6.6.2.  (This has been supported since R 3.6.2.)

    * Package installation speed for packages installed with
      keep.source has been improved. This resolve the issue reported by
      Ofek Shilon in PR#18236.

  UTILITIES:

    * R CMD check can optionally report files/directories left behind
      in home, /tmp (even though TMPDIR is set) and other directories.
      See the "R Internals" manual for details.

    * R CMD check now reports byte-compilation errors during
      installation.  These are not usually fatal but may result in
      parts of the package not being byte-compiled.

    * _R_CHECK_DEPENDS_ONLY_ can be applied selectively to examples,
      tests and/or vignettes in R CMD check: see the "R Internals"
      manual.

    * _R_CHECK_SRC_MINUS_W_IMPLICIT_ now defaults to true: recent
      versions of Apple clang on macOS have made implicit function
      declarations in C into a compilation error.

    * R CMD check --as-cran makes use of the environment variable
      AUTORECONF.  See the "R Internals" manual SS8 for further details.

    * R CMD check --use-valgrind also uses valgrind when re-building
      vignettes as some non-Sweave vignettes unhelpfully comment out
      all their code when R CMD check runs vignettes.

    * Errors in re-building vignettes (unless there are LaTeX errors)
      are reported by R CMD check as ERROR rather than WARNING when
      running vignettes has been skipped (as it frequently is in CRAN
      checks and by --as-cran).

    * R CMD Rd2pdf gains a --quiet option that is used by R CMD build
      when building the PDF package manual.

    * R CMD Rd2pdf now always runs LaTeX in batch mode, consistent with
      Texinfo >= 6.7. The --batch option is ignored.

    * R CMD build and R CMD check now include the Rd file name and line
      numbers in the error message of an \Sexpr evaluation failure.

    * For packages using the \doi Rd macro (now an install-time \Sexpr)
      but no other dynamic Rd content, R CMD build now produces a
      smaller tarball and is considerably faster - skipping temporary
      package installation.

  C-LEVEL FACILITIES:

    * The non-API header R_ext/R-ftp-http.h is no longer provided, as
      the entry points it covered are now all defunct.

    * A number of non-API declarations and macro definitions have been
      moved from the installed header Rinternals.h to the internal
      header Defn.h. Packages that only use entry points and
      definitions documented to be part of the API as specified in
      'Writing R Extensions' SS6 should not be affected.

    * The macro USE_RINTERNALS no longer has any effect when compiling
      package code.  Packages which also use R_NO_REMAP will need to
      ensure that the remapped names are used for calls to API
      functions that were formerly also made available as macros.

    * The deprecated legacy S-compatibility macros PROBLEM, MESSAGE,
      ERROR, WARN, WARNING, RECOVER, ... are no longer defined in
      R_exts/RS.h (included by R.h).  Replace these by calls to
      Rf_error and Rf_warning (defined in header R_ext/Error.h included
      by R.h).

      Header R_ext/RS.h no longer includes R_ext/Error.h.

    * Header R_ext/Constants.h (included by R.h) when included from C++
      now includes the C++ header cfloat rather than the C header
      float.h (now possible as C++11 is required).

    * The legacy S-compatibility macros DOUBLE_* in R_ext/Constants.h
      (included by R.h) are deprecated.

    * The deprecated S-compatibility macros SINGLE_* in
      R_ext/Constants.h (included by R.h) have been removed.

    * R_Calloc, R_Free and R_Realloc are preferred to their unprefixed
      forms and error messages now use the prefix. These forms were
      introduced in R 3.4.0 and are available even when
      STRICT_R_HEADERS is defined.

    * rmultinom has been documented in 'Writing R Extensions' SS6 so is
      now part of the R API.

    * Similarly, Rtanpi, called from R level tanpi() is now part of the
      R API.

    * The long-deprecated, undocumented and non-API entry point call_R
      is no longer declared in R_ext/RS.h (included by R.h).

    * The header S.h which has been unsupported since Jan 2016 has been
      removed.  Use R.h instead.

  DEPRECATED AND DEFUNCT:

    * The (non-default and deprecated) method = "internal" for
      download.file() and url() no longer supports http:// nor ftp://
      URIs.  (It is used only for file:// URIs.)

      On Windows, download.file(method = "wininet") no longer supports
      ftp:// URIs.  (It is no longer the default method, which is
      "libcurl" and does.)

      On Windows, the deprecated method = "wininet" now gives a warning
      for http:// and https:// URIs for both download.file() and url().
      (It is no longer the default method.)

    * On Windows, the command-line option --max-mem-size and
      environment variable R_MAX_MEM_SIZE are defunct.  The memory
      allocation limit was important for 32-bit builds, but these are
      no longer supported.

    * default.stringsAsFactors() is now formally deprecated, where that
      was only mentioned on its regular help page, previously.  So it
      now gives a warning if called.

    * unix.time() is defunct now; it had been deprecated since R 3.4.0.

  BUG FIXES:

    * Setting digits = 0 in format(), print.default() (and hence
      typically print()) or options() is again invalid.  Its behaviour
      was platform-dependent, and it is unclear what "zero significant
      digits" should mean (PR#18098).

    * Messages from C code in the cairo section of package grDevices
      are now also offered for translation, thanks to Michael Chirico's
      PR#18123.

    * mean(x) with finite x now is finite also without "long.double"
      capability.

    * R CMD Rd2pdf no longer leaves an empty build directory behind
      when it aborts due to an already existing output file.  (Thanks
      to Sebastian Meyer's PR#18141.)

    * density(x, weights = w, na.rm = TRUE) when anyNA(x) is true, now
      removes weights "in parallel" to x, fixing PR#18151, reported by
      Matthias Gondan.  Additionally, it gets a subdensity option.

    * Conversion of \Sexpr[]{<expR>} to LaTeX or HTML no longer
      produces long blocks of empty lines when <expR> itself contains
      several lines all producing empty output.  Thanks to a report and
      patch by Ivan Krylov posted to R-devel.

    * R CMD build no longer fails if a package vignette uses child
      documents and inst/doc exists.  (Thanks to Sebastian Meyer's
      PR#18156.)

    * When an R documentation ('help' source) file man/foo.Rd in a
      package has \donttest{..} examples with a syntax error, it is now
      signalled as ERROR and with correct line numbers relating to the
      *-Ex.R file, thanks to Duncan Murdoch and Sebastian Meyer's
      reports and patch proposals in PR#17501.

    * Improved determination of the correct translation domain in
      non-base packages, addressing the combination of PR#18092 and
      PR#17998 (#c6) with reports and _augmented_ patch #2904 by
      Suharto Anggono.

      Note that "R-base" is no longer the default domain e.g., for
      top-level calls to gettext(); rather translation needs explicit
      domain = * specification in such cases.

    * identical(attrib.as.set=FALSE) now works correctly with data
      frames with default row names (Thanks to Charlie Gao's PR#18179).

    * txtProgressBar() now enforces a non-zero width for argument char,
      without which no progress can be visible.

    * dimnames(table(d)) is more consistent in the case where d is a
      list with a single component, thanks to Thomas Soeiro's report to
      R-devel.

      Further, table(d1, d2) now gives an error when d1 and d2 are data
      frames as suggested by Thomas in PR#18224.

    * Fix for drawing semi-transparent lines and fills on the native
      Windows graphics device (PR#18219 and PR#16694).  Thanks to Nick
      Ray for helpful diagnosis on Bugzilla.

    * The deparser now wraps sub-expressions such as if(A) ..  with
      parentheses when needed; thanks to Duncan Murdoch's PR#18232 and
      Lionel Henry's patches there.

    * remove.packages() no longer tries to uninstall Priority: base
      packages, thanks to a report and suggestions by Colin Fay in
      PR#18227.

    * win.metafile() now has xpinch and ypinch arguments so that the
      user can override Windows' (potentially wrong) guess at device
      dimensions.

    * x[i] and x[[i]] for non-integer i should now behave in all cases
      as always documented: the index used is equivalent to
      as.integer(i) unless that would overflow where trunc(i) is used
      instead; thanks to Suharto Anggono's report and patch proposals
      in PR#17977.

    * asOneSidedFormula() now associates the resulting formula with the
      global environment rather than the evaluation environment created
      for the call.

    * <bibentry>$name now matches the field name case-insensitively,
      consistent with bibentry() creation and the replacement method.

    * cbind() failed to detect some length mismatches with a mixture of
      time-series and non-time-series inputs.

    * The default LaTeX style file Sweave.sty used by the RweaveLatex
      driver no longer loads the obsolete ae package; thanks to a
      report by Thomas Soeiro in PR#18271.  Furthermore, it now skips
      \usepackage[T1]{fontenc} for engines other than pdfTeX (if
      detected) or if the new [nofontenc] option is used.

    * smooth.spline() now stores its logical cv argument more safely,
      fixing a rare bug when printing, and also stores n.

    * smooth.spline(x,y,*) now computes the cv.crit statistic
      correctly, also when is.unsorted(x), fixing PR#18294.

    * The data.frame method of rbind() now warns when binding
      not-wholly-recycling vectors, by analogy to the default method
      (for matrices).

    * setAs() finds the correct class for name to when multiple
      packages define a class with that name. Thanks to Gabor Csardi
      for the report.

    * Fix for detaching a package when two classes of the same name are
      present in method signatures for the same generic. Thanks to
      Gabor Csardi for the report.

    * match.arg("", c("", "a", "B")) gives a better error message, in
      part from PR#17959, thanks to Elin Waring.

    * R CMD Sweave --clean no longer removes pre-existing files or
      subdirectories (PR#18242).

    * The quartz() device no longer splits polylines into subpaths.
      That has caused narrowly-spaced lines with many points to always
      look solid even when dashed line type was used due to dash phase
      restarts.

    * Deparsing constructs such as quote(1 + `!`(2) + 3) works again as
      before R 3.5.0, thanks to the report and patch in PR#18284 by
      Suharto Anggono.

    * as.list(f) for a factor f now keeps names(f), fixing PR#18309.

    * qbeta(.001, .9, .009) and analogous qf() calls now return a
      correct value instead of NaN or wrongly 1, all with a warning;
      thanks to the report by Ludger Goeminne in PR#18302.

    * plot.lm() failed to produce the plot of residuals vs.  factor
      levels (i.e., which=5 when leverages are constant) for models
      with character predictors (PR#17840).

    * interaction.plot(..., xtick = TRUE) misplaced the x-axis line
      (PR#18305).

    * Not strictly fixing a bug, format()ing and print()ing of
      non-finite Date and POSIXt values NaN and +/-Inf no longer show
      as NA but the respective string, e.g., Inf, for consistency with
      numeric vector's behaviour, fulfilling the wish of PR#18308.

    * R CMD check no longer runs test scripts generated from
      corresponding .Rin files twice and now signals an ERROR if
      processing an .Rin script fails.

    * tools::Rd2txt() used for plain-text help pages now renders \hrefs
      (if tools::Rd2txt_options(showURLs = TRUE)) and \urls with
      percent-encoding and standards-compliant delimiting style (angle
      brackets and no URL: prefix).  \email is now rendered with a
      mailto: prefix.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From net|kj@ @end|ng |rom gm@||@com  Fri Apr 22 11:10:34 2022
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Fri, 22 Apr 2022 11:10:34 +0200
Subject: [Rd] Undocumented 4.2.0 changes in grid text handling?
In-Reply-To: <c4a3bf88-b104-15ae-7b24-400f864eccab@stat.auckland.ac.nz>
References: <CA+6hu7fw=76zM1j6+JxFsKRye2s7CpKLvvWNO8M7pMprovKwJA@mail.gmail.com>
 <c4a3bf88-b104-15ae-7b24-400f864eccab@stat.auckland.ac.nz>
Message-ID: <CA+6hu7djZ6jaY=5jj1J5wvtRxe-+yEMfutqUNwJxUebXvoUaCQ@mail.gmail.com>

Thanks for the clarification and assurance! The issue is now solved, it was
indeed caused by fontface par removal in the new R version.

I agree that this change is somewhat internal and I would have not reported
that in my package changelog necessarily, but maybe in the base R packages
even this change is welcomed in the news. Many packages are build around
grid (and on the rest of base R, obviously) and while this change would
certainly not bother any "endpoint" user, it has an impact, as we have
seen. Moreover, in ?grid::gpar, it seems that fontface par is preferable
and font is somewhat legacy, which you could potentially understand like
the fontface is in use and font is translated into fontface par.

Anyway, many thanks for your work on R graphics not only for the 4.2.0!

Best,
Jan

Dne p? 22. 4. 2022 3:44 u?ivatel Paul Murrell <paul at stat.auckland.ac.nz>
napsal:

> Hi
>
>  From the github issue discussion, it looks like you have detected the
> problem, which appears to be that 'gridtext' was paying attention to
> gp$fontface, whereas 'grid' internally focuses on gp$font.
>
> I created the problem for 'gridtext' by "tidying up" and removing
> gp$fontface internally.  Apologies for that.
>
> I think I can partially hide behind the fact that these are internal
> details to 'grid', which is why the change was not documented in the
> places that you point out.
>
> Please let me know if you still think that there is an error in 'grid'
> that needs fixing.
>
> Paul
>
> On 22/04/2022 3:38 am, Jan Net?k wrote:
> > Hello everyone,
> >
> > I've been testing R 4.2.0 release candidates for some time and have
> spotted
> > a few changes that are not documented in
> >
> https://svn.r-project.org/R/branches/R-4-2-branch/src/library/grid/inst/doc/changes.txt
> > <
> https://svn.r-project.org/R/branches/R-4-2-branch/src/library/grid/inst/doc/changes.txt
> >,
> > general R NEWS, nor in this blogpost
> >
> https://developer.r-project.org/Blog/public/2021/12/14/updating-graphics-devices-for-r-4.2.0/index.html
> > <
> https://developer.r-project.org/Blog/public/2021/12/14/updating-graphics-devices-for-r-4.2.0/index.html
> >
> > .
> >
> > In R 4.1.3, grid::gpar(fontface= "bold") results in a gpar "list" with
> > $fontface and (legacy?) $font entries, but in R 4.2.0, there is only
> $font.
> > In the manual, font is described only for backward compatibility.
> >
> > I think there are more possibly subtle changes around text rendering
> > because bold fontface and inter-word spacing in the package {gridtext}
> > happened to stop working, see the issue at
> > https://github.com/wilkelab/gridtext/issues/24
> > <https://github.com/wilkelab/gridtext/issues/24>.
> > Turns out it is pretty hard
> > to debug and to solve. Do you have some hints about other changes in grid
> > that could explain so different behaviour?
> >
> > Many thanks and kind regards!
> > Jan
> >
> > [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > <https://stat.ethz.ch/mailman/listinfo/r-devel>
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/
>
>

	[[alternative HTML version deleted]]


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Fri Apr 22 20:49:41 2022
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 22 Apr 2022 11:49:41 -0700
Subject: [Rd] `slot<-` performs an in-place modification
In-Reply-To: <7cb8e198-ec3f-6ea9-76d9-172816b1ab59@gmail.com>
References: <7cb8e198-ec3f-6ea9-76d9-172816b1ab59@gmail.com>
Message-ID: <346d4b60-c5bf-75c6-7e7b-a77781d00df6@gmail.com>

Ah,? looks like this was already reported and discussed here a couple of 
years ago:

https://stat.ethz.ch/pipermail/r-devel/2019-September/078478.html

Had no idea that "core of Bioconductor once took advantage of this 
feature", seems that I've been fooled all these years ;-)

Sounds like this would deserve a big warning in ?`slot<-`

Thanks,

H.


On 22/03/2022 22:17, Herv? Pag?s wrote:
> Hi,
>
> I just found out that `slot<-` performs an in-place modification of 
> the object:
>
> ? setClass("A", slots=c(stuff="ANY"))
> ? x <- new("A", stuff=11:14)
> ? y <- `slot<-`(x, "stuff", value=99)
>
> Then:
>
> ? y
> ? # An object of class "A"
> ? # Slot "stuff":
> ? # [1] 99
>
> ? x
> ? # An object of class "A"
> ? # Slot "stuff":
> ? # [1] 99
>
> That doesn't seem right!
>
> Is this violation of the standard pass-by-value semantic somehow 
> intended here because most of the time people are expected to do 
> 'slot(x, "stuff") <- 99' instead, in which case the violation cannot 
> be observed so does not matter? I didn't find anything in the man page 
> about this.
>
> I see this behavior with R 4.1.3 and current R devel.
>
> Thanks,
>
> H.
>
-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com


From trevor@|@d@v|@ @end|ng |rom gm@||@com  Fri Apr 22 22:36:29 2022
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Fri, 22 Apr 2022 13:36:29 -0700
Subject: [Rd] Add "Idle" as possible "event" in `dev.capabilities("events")`?
Message-ID: <CAMigB8E5cRiYaCianourNeFkFaQietN6mKLvJK+inXrmj-7x6g@mail.gmail.com>

Dear R Devs,

* `grDevices::dev.capabilities("events")` currently only reports current
graphic device support for the "MouseDown", "MouseMove", "MouseUp", and
"Keybd" "events"
* `grDevices::getGraphicsEvent()` supports functions for those four events
plus an additional "Idle" "event"
* It could be nice if "Idle" was listed as a possible "event" in
`dev.capabilities("events")`
* Currently `x11()` supports the "Idle" "event" on *nix systems but not
Windows systems so developers would need to additionally check the OS on
top of `dev.capabilities("events")` to be sure if the "Idle" "event" was
supported and such a check risks becoming obsolete in the future (if new
interactive graphic devices besides `x11()` supports these events or "Idle"
event support eventually gets added in Windows).

Thanks,

Trevor

	[[alternative HTML version deleted]]


