From trevor@|@d@v|@ @end|ng |rom gm@||@com  Fri Apr  1 23:55:46 2022
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Fri, 1 Apr 2022 14:55:46 -0700
Subject: [Rd] png() defaults to `type = "X11"` on R compiled with support
 for cairo (but no pango)
Message-ID: <CAMigB8HHFgFqWBWqjwA1ffc62bJOxtPrq54JcUhu2PgQ7ALYiA@mail.gmail.com>

Dear R Team,

* I'm observing `png()` defaulting to `type = "X11"` in R compiled
   with support for "cairo" (but not compiled with pango) run
   in "vanilla" mode
* According to `help("png", package="grDevices")` :

  > The default is set by
  > ?getOption("bitmapType")? - the ?out of the box? default is
  > ?"quartz"? or ?"cairo"? where available, otherwise ?"Xlib"?.

* "cairo" is indeed available so according to the documentation
   it should be the "out-of-the-box" default but instead
  "Xlib" is the "out-of-the-box" default.
* `X11()` also defaults to "Xlib" but `?X11` says the default is "cairo"
  only when R was built using "pangocairo" so this seems to match
  the documentation since `./configure` says there was no pango.
* Perhaps R should instead default to
 `type = "cairo"` for `X11()` and the bitmap devices
  when "cairo" is supported even if there is no "pango"?
  With `type="cairo"` I observe support for the new
  R 4.1 and R 4.2 `{grid}` graphic features
  and I avoid certain font ERRORs that hit me
  when I use `type = "X11"`.  Seems like "cairo"
  would be the better default than "X11"?

Thanks!

Trevor

p.s. Possibly relevant information:

```
> grSoftVersion()
                   cairo                  cairoFT                    pango
                "1.16.0"          "2.10.1/2.13.1"                       ""
                  libpng                     jpeg                  libtiff
                "1.6.37"                    "8.0" "LIBTIFF, Version 4.1.0"
```

Snippets from `./configure`:

```
checking whether pkg-config knows about cairo and pango... no
checking whether pkg-config knows about cairo... yes
checking whether cairo is >= 1.2 and works... yes
```
```
  Interfaces supported:        X11
  External libraries:          pcre2, readline, curl
  Additional capabilities:     PNG, JPEG, TIFF, NLS, cairo, ICU
  Options enabled:             shared BLAS, R profiling

  Capabilities skipped:
  Options not enabled:         memory profiling

  Recommended packages:        yes
```

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Sun Apr  3 05:32:13 2022
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sat, 2 Apr 2022 23:32:13 -0400
Subject: [Rd] The enclosed environment does not work as expected
Message-ID: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>

Hi,

It seems like the enclosed environment does not work well with the
loop. Here is a simple example
```
FuncGenerator <- function(value){
    function() message(value)
}

funcSets <- list()
for(i in 1:2)
    funcSets[[i]] <- FuncGenerator(i)

environment(funcSets[[1]])$value
# [1] 2
environment(funcSets[[2]])$value
# [1] 2
```
The output from the last two lines is simply 2. I expect the first
should be 1 and the second is 2. However, if I ask R to execute the
message function before accessing its environment, the result is
correct again.

```
FuncGenerator <- function(value){
    function() message(value)
}

funcSets <- list()
for(i in 1:2)
    funcSets[[i]] <- FuncGenerator(i)

## Ask to evaluate the function
for(i in 1:2){
    funcSets[[i]]()
}
# 1
# 2
environment(funcSets[[1]])$value
# [1] 1
environment(funcSets[[2]])$value
# [1] 2
```
This does not make any sense to me since the function simply prints
out its variable `value`. It should not change the value of the
variable, so I think this might be a bug in the code optimizer. This
issue can only be corrected by the loop(like the second example),
manually evaluating the function without the loop will give you the
same result as the first example.

Here is my session information
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19044)


Best,
Jiefei


From @zwj|08 @end|ng |rom gm@||@com  Sun Apr  3 06:52:35 2022
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sun, 3 Apr 2022 00:52:35 -0400
Subject: [Rd] The enclosed environment does not work as expected
In-Reply-To: <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>
References: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
 <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>
Message-ID: <CAGiFhPMpogeQFzRMEyPMOdg3_sdu45RRShiGCQK3+y7G=QNuRQ@mail.gmail.com>

Hi Eric,

Wow, Thanks for the explanation. Even though I know the lazy
evaluation, I never thought it can have this surprising effect. Good
to know it now.

Best,
Jiefei

On Sun, Apr 3, 2022 at 12:20 AM Eric Berger <ericjberger at gmail.com> wrote:
>
> Hi Jiefei,
> This is related to "lazy evaluation". Alternatives for dealing with it are discussed here:
>
> https://stackoverflow.com/questions/29084193/how-to-not-fall-into-rs-lazy-evaluation-trap
>
> HTH,
> Eric
>
>
> On Sun, Apr 3, 2022 at 6:32 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>>
>> Hi,
>>
>> It seems like the enclosed environment does not work well with the
>> loop. Here is a simple example
>> ```
>> FuncGenerator <- function(value){
>>     function() message(value)
>> }
>>
>> funcSets <- list()
>> for(i in 1:2)
>>     funcSets[[i]] <- FuncGenerator(i)
>>
>> environment(funcSets[[1]])$value
>> # [1] 2
>> environment(funcSets[[2]])$value
>> # [1] 2
>> ```
>> The output from the last two lines is simply 2. I expect the first
>> should be 1 and the second is 2. However, if I ask R to execute the
>> message function before accessing its environment, the result is
>> correct again.
>>
>> ```
>> FuncGenerator <- function(value){
>>     function() message(value)
>> }
>>
>> funcSets <- list()
>> for(i in 1:2)
>>     funcSets[[i]] <- FuncGenerator(i)
>>
>> ## Ask to evaluate the function
>> for(i in 1:2){
>>     funcSets[[i]]()
>> }
>> # 1
>> # 2
>> environment(funcSets[[1]])$value
>> # [1] 1
>> environment(funcSets[[2]])$value
>> # [1] 2
>> ```
>> This does not make any sense to me since the function simply prints
>> out its variable `value`. It should not change the value of the
>> variable, so I think this might be a bug in the code optimizer. This
>> issue can only be corrected by the loop(like the second example),
>> manually evaluating the function without the loop will give you the
>> same result as the first example.
>>
>> Here is my session information
>> > sessionInfo()
>> R version 4.1.2 (2021-11-01)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 19044)
>>
>>
>> Best,
>> Jiefei
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sun Apr  3 08:41:47 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 3 Apr 2022 07:41:47 +0100
Subject: [Rd] The enclosed environment does not work as expected
In-Reply-To: <CAGiFhPMpogeQFzRMEyPMOdg3_sdu45RRShiGCQK3+y7G=QNuRQ@mail.gmail.com>
References: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
 <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>
 <CAGiFhPMpogeQFzRMEyPMOdg3_sdu45RRShiGCQK3+y7G=QNuRQ@mail.gmail.com>
Message-ID: <92cad44c-1fa3-44da-70a8-031a99d3ee7e@sapo.pt>

Hello,

Another way not to fall into this surprise is to ?force the variable's 
evaluation.


FuncGenerator <- function(value){
   force(value)
   function() message(value)
}

funcSets <- list()
for(i in 1:2)
   funcSets[[i]] <- FuncGenerator(i)

environment(funcSets[[1]])$value
environment(funcSets[[2]])$value


Note that to force evaluation inside the returned function doesn't work. 
The function will get a copy of value and evaluate the copy, not what 
the function factory is getting. I too find lazy evaluation confusing 
and the best/only way is to try it out and eventualy get it right.


# wrong
FuncGenerator <- function(value){
   function(value) {
     force(value)
     message(value)
   }
}



Hope this helps,

Rui Barradas

?s 05:52 de 03/04/2022, Jiefei Wang escreveu:
> Hi Eric,
> 
> Wow, Thanks for the explanation. Even though I know the lazy
> evaluation, I never thought it can have this surprising effect. Good
> to know it now.
> 
> Best,
> Jiefei
> 
> On Sun, Apr 3, 2022 at 12:20 AM Eric Berger <ericjberger at gmail.com> wrote:
>>
>> Hi Jiefei,
>> This is related to "lazy evaluation". Alternatives for dealing with it are discussed here:
>>
>> https://stackoverflow.com/questions/29084193/how-to-not-fall-into-rs-lazy-evaluation-trap
>>
>> HTH,
>> Eric
>>
>>
>> On Sun, Apr 3, 2022 at 6:32 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>>>
>>> Hi,
>>>
>>> It seems like the enclosed environment does not work well with the
>>> loop. Here is a simple example
>>> ```
>>> FuncGenerator <- function(value){
>>>      function() message(value)
>>> }
>>>
>>> funcSets <- list()
>>> for(i in 1:2)
>>>      funcSets[[i]] <- FuncGenerator(i)
>>>
>>> environment(funcSets[[1]])$value
>>> # [1] 2
>>> environment(funcSets[[2]])$value
>>> # [1] 2
>>> ```
>>> The output from the last two lines is simply 2. I expect the first
>>> should be 1 and the second is 2. However, if I ask R to execute the
>>> message function before accessing its environment, the result is
>>> correct again.
>>>
>>> ```
>>> FuncGenerator <- function(value){
>>>      function() message(value)
>>> }
>>>
>>> funcSets <- list()
>>> for(i in 1:2)
>>>      funcSets[[i]] <- FuncGenerator(i)
>>>
>>> ## Ask to evaluate the function
>>> for(i in 1:2){
>>>      funcSets[[i]]()
>>> }
>>> # 1
>>> # 2
>>> environment(funcSets[[1]])$value
>>> # [1] 1
>>> environment(funcSets[[2]])$value
>>> # [1] 2
>>> ```
>>> This does not make any sense to me since the function simply prints
>>> out its variable `value`. It should not change the value of the
>>> variable, so I think this might be a bug in the code optimizer. This
>>> issue can only be corrected by the loop(like the second example),
>>> manually evaluating the function without the loop will give you the
>>> same result as the first example.
>>>
>>> Here is my session information
>>>> sessionInfo()
>>> R version 4.1.2 (2021-11-01)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 19044)
>>>
>>>
>>> Best,
>>> Jiefei
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From er|cjberger @end|ng |rom gm@||@com  Sun Apr  3 06:20:06 2022
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Sun, 3 Apr 2022 07:20:06 +0300
Subject: [Rd] The enclosed environment does not work as expected
In-Reply-To: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
References: <CAGiFhPMgMZq6VeoZcxjTG0z=W4eE8HPW=X_y5Cb00pqd9LRakw@mail.gmail.com>
Message-ID: <CAGgJW776Q1e6NWFXf31Ad1-LUYuR0sMUCnWQ+4uW+POXmG83Yw@mail.gmail.com>

Hi Jiefei,
This is related to "lazy evaluation". Alternatives for dealing with it are
discussed here:

https://stackoverflow.com/questions/29084193/how-to-not-fall-into-rs-lazy-evaluation-trap

HTH,
Eric


On Sun, Apr 3, 2022 at 6:32 AM Jiefei Wang <szwjf08 at gmail.com> wrote:

> Hi,
>
> It seems like the enclosed environment does not work well with the
> loop. Here is a simple example
> ```
> FuncGenerator <- function(value){
>     function() message(value)
> }
>
> funcSets <- list()
> for(i in 1:2)
>     funcSets[[i]] <- FuncGenerator(i)
>
> environment(funcSets[[1]])$value
> # [1] 2
> environment(funcSets[[2]])$value
> # [1] 2
> ```
> The output from the last two lines is simply 2. I expect the first
> should be 1 and the second is 2. However, if I ask R to execute the
> message function before accessing its environment, the result is
> correct again.
>
> ```
> FuncGenerator <- function(value){
>     function() message(value)
> }
>
> funcSets <- list()
> for(i in 1:2)
>     funcSets[[i]] <- FuncGenerator(i)
>
> ## Ask to evaluate the function
> for(i in 1:2){
>     funcSets[[i]]()
> }
> # 1
> # 2
> environment(funcSets[[1]])$value
> # [1] 1
> environment(funcSets[[2]])$value
> # [1] 2
> ```
> This does not make any sense to me since the function simply prints
> out its variable `value`. It should not change the value of the
> variable, so I think this might be a bug in the code optimizer. This
> issue can only be corrected by the loop(like the second example),
> manually evaluating the function without the loop will give you the
> same result as the first example.
>
> Here is my session information
> > sessionInfo()
> R version 4.1.2 (2021-11-01)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19044)
>
>
> Best,
> Jiefei
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From gm@t|m@ @end|ng |rom gm@||@com  Tue Apr  5 15:08:10 2022
From: gm@t|m@ @end|ng |rom gm@||@com (Roman Savchenko)
Date: Tue, 5 Apr 2022 15:08:10 +0200
Subject: [Rd] symbols.rds error 1
Message-ID: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>

Dear R devs,

I have an error that I can't understand the reason:

Error in system(sprintf("%s -Pg %s", nm, shQuote(f)), intern = TRUE) :
  '""' not found
Calls: <Anonymous> -> lapply -> FUN -> strsplit -> system
Execution halted
make: *** [C:/PROGRA~1/R-40~1.5/share/make/winshlib.mk:32: symbols.rds]
Error 1

I'm using Rcpp to build cpp package for R. Compilation has few warnings and
the library is built.

Appreciate for advice on how to resolve this issue.

Thanks,
Roman.

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Apr  5 15:25:20 2022
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 5 Apr 2022 16:25:20 +0300
Subject: [Rd] symbols.rds error 1
In-Reply-To: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>
References: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>
Message-ID: <20220405162520.4e703d31@arachnoid>

On Tue, 5 Apr 2022 15:08:10 +0200
Roman Savchenko <gmstima at gmail.com> wrote:

> Error in system(sprintf("%s -Pg %s", nm, shQuote(f)), intern = TRUE) :
>   '""' not found

This does highlight a minor bug in R (an empty string is accidentally
quoted, so the absence of nm on the PATH isn't noted), but your setup
is part of the problem too, I think. How did you install Rtools? (Is it
appropriate here? Is R-pkg-devel a better fit?)

Here's the patch fixing the check (but not the reason why R can't find
nm on your machine):

--- src/library/tools/R/sotools.R       (revision 82033)
+++ src/library/tools/R/sotools.R       (working copy)
@@ -63,7 +63,7 @@
     if(!nzchar(nm)) {
         ## reasonable to assume nm is on the path
         nm <- Sys.which("nm")
-        if(!nzchar(nm)) nm <- shQuote(nm)
+        if(nzchar(nm)) nm <- shQuote(nm)
     }
     if(!nzchar(nm)) {
         warning("this requires 'nm' to be on the PATH")


-- 
Best regards,
Ivan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Apr  5 20:13:07 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 5 Apr 2022 20:13:07 +0200
Subject: [Rd] symbols.rds error 1
In-Reply-To: <20220405162520.4e703d31@arachnoid>
References: <CAGpdKUKUwQbFiKxwVkP_qfro3=fMpa45zJ50vYDnE4w2oNphkQ@mail.gmail.com>
 <20220405162520.4e703d31@arachnoid>
Message-ID: <4e8f94ce-b83d-55e0-ea3e-0675f2085ec2@gmail.com>


On 4/5/22 15:25, Ivan Krylov wrote:
> On Tue, 5 Apr 2022 15:08:10 +0200
> Roman Savchenko <gmstima at gmail.com> wrote:
>
>> Error in system(sprintf("%s -Pg %s", nm, shQuote(f)), intern = TRUE) :
>>    '""' not found
> This does highlight a minor bug in R (an empty string is accidentally
> quoted, so the absence of nm on the PATH isn't noted), but your setup
> is part of the problem too, I think. How did you install Rtools? (Is it
> appropriate here? Is R-pkg-devel a better fit?)
>
> Here's the patch fixing the check (but not the reason why R can't find
> nm on your machine):
>
> --- src/library/tools/R/sotools.R       (revision 82033)
> +++ src/library/tools/R/sotools.R       (working copy)
> @@ -63,7 +63,7 @@
>       if(!nzchar(nm)) {
>           ## reasonable to assume nm is on the path
>           nm <- Sys.which("nm")
> -        if(!nzchar(nm)) nm <- shQuote(nm)
> +        if(nzchar(nm)) nm <- shQuote(nm)
>       }
>       if(!nzchar(nm)) {
>           warning("this requires 'nm' to be on the PATH")

Thanks, fixed in R

Tomas

>


From m@rk@iee m@iii@g oii hrsdc-rhdcc@gc@c@  Wed Apr  6 18:07:18 2022
From: m@rk@iee m@iii@g oii hrsdc-rhdcc@gc@c@ (m@rk@iee m@iii@g oii hrsdc-rhdcc@gc@c@)
Date: Wed, 6 Apr 2022 16:07:18 +0000
Subject: [Rd] available.packages function and UNC paths
Message-ID: <9699bb8ee6e5404eb32fcef502a38e71@hrsdc-rhdcc.gc.ca>

Hello,

I'm responsible for maintaining a mirrored internal CRAN repository for my organization. We have a script that uses the miniCRAN library to add and update packages within the repository and since the repository is stored on a network drive I have to use UNC paths when calling miniCRAN functions such as this:

updatePackages(path = '\\\\my-network-drive.net\\repos\\packages', ...)

updatePackages function in turns call pkgAvail, another miniCRAN function, which calls available.packages and then read.dcf function. However I discovered that this line in available.packages transforms the UNC path to a form that read.dcf can't use:

if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 8L), "/PACKAGES")

This line transforms my UNC path to //\\\\my-network-drive.net\\repos\\packages, which read.dcf can't use. During debugging I found that pkgAvail transformed my UNC path to 'file:///\\\\ my-network-drive.net\\repos\\packages' and that is the path being passed to available.packages. To fix my issue I re-defined my own available.packages function and changed the line to:

if (startsWith(repos, "file:///")) {tmpf <- paste0('/', substring(repos, 10L), "/PACKAGES")

This way the UNC path being passed to read.dcf will be '/\\my-network-drive.net\\repos\\packages', which read.dcf can use. I'm wondering if similar changes can be made in the available.packages function for the next R release to automatically detect UNC paths and modify it so that it can work with UNC paths.

Thanks,

Mark






	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Apr  7 08:59:20 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 7 Apr 2022 09:59:20 +0300
Subject: [Rd] calloc() vs. R_Calloc()
Message-ID: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>

Dear R devs,

I ran into a C level problem that hopefully is a quick fix to a trained eye.

Not sure if I am able to produce a minimal reproducible example, but
suppose a (test) package passes all the local tests, passes the R CMD check
and also passes the tests on both rhub and https://win-builder.r-project.org

The test GitHub repo is here:
https://github.com/dusadrian/QCAtest

As per the latest CRAN recommendation, I need to replace calloc() and
free() with R's Calloc() and Free(). In the above repo, the latest commit
does not pass the tests any longer, and the absolute single difference is
using the recommended commands in the file:
https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c

The previous initial commit of this file (which has no problems) is here:
https://github.com/dusadrian/QCAtest/blob/5fb13f44457a2071b322ad42ab579f3547d1c551/src/CCubes.c

There must be something obvious I'm doing wrong, perhaps a header missing
or not in the right place, but it just escapes me.
I've tried both Calloc() and R_Calloc(), both versions result in the same
errors.

Many thanks in advance for any hint,
Adrian

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr  7 09:32:03 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 7 Apr 2022 09:32:03 +0200
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
Message-ID: <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>


On 4/7/22 08:59, Adrian Du?a wrote:
> Dear R devs,
>
> I ran into a C level problem that hopefully is a quick fix to a trained eye.
>
> Not sure if I am able to produce a minimal reproducible example, but
> suppose a (test) package passes all the local tests, passes the R CMD check
> and also passes the tests on both rhub and https://win-builder.r-project.org
>
> The test GitHub repo is here:
> https://github.com/dusadrian/QCAtest
>
> As per the latest CRAN recommendation, I need to replace calloc() and
> free() with R's Calloc() and Free(). In the above repo, the latest commit
> does not pass the tests any longer, and the absolute single difference is
> using the recommended commands in the file:
> https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c
>
> The previous initial commit of this file (which has no problems) is here:
> https://github.com/dusadrian/QCAtest/blob/5fb13f44457a2071b322ad42ab579f3547d1c551/src/CCubes.c
>
> There must be something obvious I'm doing wrong, perhaps a header missing
> or not in the right place, but it just escapes me.
> I've tried both Calloc() and R_Calloc(), both versions result in the same
> errors.

And what are the errors you run into? On which platforms, under what 
circumstances, etc? It would be much easier to give advice knowing that.

In principle, one issue you may run into when switching allocators is 
that you accidentally end up freeing by a different allocator from the 
one used to allocate it. It is common on Windows but can in principle 
happen elsewhere as well.

Also by a slightly different heap layout or different allocator 
implementation you may wake up bugs in the program not seen previously 
(use after free, invalid memory accesses, etc)

Tomas

>
> Many thanks in advance for any hint,
> Adrian
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Apr  7 10:32:37 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 7 Apr 2022 11:32:37 +0300
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
Message-ID: <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>

On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> [...]
>
> And what are the errors you run into? On which platforms, under what
> circumstances, etc? It would be much easier to give advice knowing that.
>
> In principle, one issue you may run into when switching allocators is
> that you accidentally end up freeing by a different allocator from the
> one used to allocate it. It is common on Windows but can in principle
> happen elsewhere as well.
>
> Also by a slightly different heap layout or different allocator
> implementation you may wake up bugs in the program not seen previously
> (use after free, invalid memory accesses, etc)
>

That is something I do not know yet, since the only information the server
gives is this:
https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3

I'll probably end up debugging the C code, but since the only difference is
using Free() vs free() on exactly the same objects, I suspected a mis-usage
of the R commands.

The same setup passes with no problems on my local MacOS, but the errors
still seem to occur on the Windows setup from r-hub.

Best wishes,
Adrian

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr  7 10:59:49 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 7 Apr 2022 10:59:49 +0200
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
Message-ID: <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>


On 4/7/22 10:32, Adrian Du?a wrote:
> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com> 
> wrote:
>
>
>     [...]
>
>     And what are the errors you run into? On which platforms, under what
>     circumstances, etc? It would be much easier to give advice knowing
>     that.
>
>     In principle, one issue you may run into when switching allocators is
>     that you accidentally end up freeing by a different allocator from
>     the
>     one used to allocate it. It is common on Windows but can in principle
>     happen elsewhere as well.
>
>     Also by a slightly different heap layout or different allocator
>     implementation you may wake up bugs in the program not seen
>     previously
>     (use after free, invalid memory accesses, etc)
>
>
> That is something I do not know yet, since the only information the 
> server gives is this:
> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
>
> I'll probably end up debugging the C code, but since the only 
> difference is using Free() vs free() on exactly the same objects, I 
> suspected a mis-usage of the R commands.
>
> The same setup passes with no problems on my local MacOS, but the 
> errors still seem to occur on the Windows setup from r-hub.

This is very likely because you are freeing memory allocated by calloc() 
(or something else but not R_Calloc() in your program) using R_Free() or 
memory allocated using R_Calloc() by using free() in your program.
I would recommend checking the source code manually for that.

It is not surprising that the problem doesn't appear on other platforms 
where the allocators happen to be the same.

Best
Tomas


>
> Best wishes,
> Adrian
	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Apr  7 17:49:22 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 7 Apr 2022 16:49:22 +0100
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
Message-ID: <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>

Hello,

Tomas is right, there are many memory operations allocating with malloc 
and freeing with R_Free:

line: variables - operation

  55: p_pichart - malloc
336: p_pichart - R_Free

236: copy_implicants - malloc
260: copy_implicants - R_Free

240: p_tempic - malloc
262: p_tempic - R_Free


And there are more cases like these. For what I've seen, the frequent 
(unique?) case is malloc/R_Free.

Hope this helps,

Rui Barradas

?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
> 
> On 4/7/22 10:32, Adrian Du?a wrote:
>> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>
>>      [...]
>>
>>      And what are the errors you run into? On which platforms, under what
>>      circumstances, etc? It would be much easier to give advice knowing
>>      that.
>>
>>      In principle, one issue you may run into when switching allocators is
>>      that you accidentally end up freeing by a different allocator from
>>      the
>>      one used to allocate it. It is common on Windows but can in principle
>>      happen elsewhere as well.
>>
>>      Also by a slightly different heap layout or different allocator
>>      implementation you may wake up bugs in the program not seen
>>      previously
>>      (use after free, invalid memory accesses, etc)
>>
>>
>> That is something I do not know yet, since the only information the
>> server gives is this:
>> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
>>
>> I'll probably end up debugging the C code, but since the only
>> difference is using Free() vs free() on exactly the same objects, I
>> suspected a mis-usage of the R commands.
>>
>> The same setup passes with no problems on my local MacOS, but the
>> errors still seem to occur on the Windows setup from r-hub.
> 
> This is very likely because you are freeing memory allocated by calloc()
> (or something else but not R_Calloc() in your program) using R_Free() or
> memory allocated using R_Calloc() by using free() in your program.
> I would recommend checking the source code manually for that.
> 
> It is not surprising that the problem doesn't appear on other platforms
> where the allocators happen to be the same.
> 
> Best
> Tomas
> 
> 
>>
>> Best wishes,
>> Adrian
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Apr  7 20:45:43 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 7 Apr 2022 21:45:43 +0300
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
 <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
Message-ID: <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>

Dear Rui,

Thank you so much for the response, that's a very good observation but I've
just tested and results in the same errors, unfortunately.

I have now changed all malloc()s to R_Calloc(), in the latest commit:
https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c

And yet:
https://builder.r-hub.io/status/QCA_3.16.tar.gz-e652c850de7e51c4cc1311fafe44f986

There must be something obvious I am missing, but my C knowledge is limited
and already stretched out...

Best wishes,
Adrian

On Thu, 7 Apr 2022 at 18:49, Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> Tomas is right, there are many memory operations allocating with malloc
> and freeing with R_Free:
>
> line: variables - operation
>
>   55: p_pichart - malloc
> 336: p_pichart - R_Free
>
> 236: copy_implicants - malloc
> 260: copy_implicants - R_Free
>
> 240: p_tempic - malloc
> 262: p_tempic - R_Free
>
>
> And there are more cases like these. For what I've seen, the frequent
> (unique?) case is malloc/R_Free.
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
> >
> > On 4/7/22 10:32, Adrian Du?a wrote:
> >> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
> >> wrote:
> >>
> >>
> >>      [...]
> >>
> >>      And what are the errors you run into? On which platforms, under
> what
> >>      circumstances, etc? It would be much easier to give advice knowing
> >>      that.
> >>
> >>      In principle, one issue you may run into when switching allocators
> is
> >>      that you accidentally end up freeing by a different allocator from
> >>      the
> >>      one used to allocate it. It is common on Windows but can in
> principle
> >>      happen elsewhere as well.
> >>
> >>      Also by a slightly different heap layout or different allocator
> >>      implementation you may wake up bugs in the program not seen
> >>      previously
> >>      (use after free, invalid memory accesses, etc)
> >>
> >>
> >> That is something I do not know yet, since the only information the
> >> server gives is this:
> >>
> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
> >>
> >> I'll probably end up debugging the C code, but since the only
> >> difference is using Free() vs free() on exactly the same objects, I
> >> suspected a mis-usage of the R commands.
> >>
> >> The same setup passes with no problems on my local MacOS, but the
> >> errors still seem to occur on the Windows setup from r-hub.
> >
> > This is very likely because you are freeing memory allocated by calloc()
> > (or something else but not R_Calloc() in your program) using R_Free() or
> > memory allocated using R_Calloc() by using free() in your program.
> > I would recommend checking the source code manually for that.
> >
> > It is not surprising that the problem doesn't appear on other platforms
> > where the allocators happen to be the same.
> >
> > Best
> > Tomas
> >
> >
> >>
> >> Best wishes,
> >> Adrian
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Apr  7 23:29:24 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 8 Apr 2022 09:29:24 +1200
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
 <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
 <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>
Message-ID: <A38ACFF2-46BF-4D8E-9692-4E2A47C55B99@R-project.org>

Adrian,

there are many more allocations in your code - for example, you're using resize() from utils.c which uses malloc/free so it will break since it's using the wrong allocator. You may need to replace *all* allocations in your project, not just some.

Cheers,
Simon


> On 8/04/2022, at 6:45 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
> Dear Rui,
> 
> Thank you so much for the response, that's a very good observation but I've
> just tested and results in the same errors, unfortunately.
> 
> I have now changed all malloc()s to R_Calloc(), in the latest commit:
> https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c
> 
> And yet:
> https://builder.r-hub.io/status/QCA_3.16.tar.gz-e652c850de7e51c4cc1311fafe44f986
> 
> There must be something obvious I am missing, but my C knowledge is limited
> and already stretched out...
> 
> Best wishes,
> Adrian
> 
> On Thu, 7 Apr 2022 at 18:49, Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
>> Hello,
>> 
>> Tomas is right, there are many memory operations allocating with malloc
>> and freeing with R_Free:
>> 
>> line: variables - operation
>> 
>>  55: p_pichart - malloc
>> 336: p_pichart - R_Free
>> 
>> 236: copy_implicants - malloc
>> 260: copy_implicants - R_Free
>> 
>> 240: p_tempic - malloc
>> 262: p_tempic - R_Free
>> 
>> 
>> And there are more cases like these. For what I've seen, the frequent
>> (unique?) case is malloc/R_Free.
>> 
>> Hope this helps,
>> 
>> Rui Barradas
>> 
>> ?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
>>> 
>>> On 4/7/22 10:32, Adrian Du?a wrote:
>>>> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com>
>>>> wrote:
>>>> 
>>>> 
>>>>     [...]
>>>> 
>>>>     And what are the errors you run into? On which platforms, under
>> what
>>>>     circumstances, etc? It would be much easier to give advice knowing
>>>>     that.
>>>> 
>>>>     In principle, one issue you may run into when switching allocators
>> is
>>>>     that you accidentally end up freeing by a different allocator from
>>>>     the
>>>>     one used to allocate it. It is common on Windows but can in
>> principle
>>>>     happen elsewhere as well.
>>>> 
>>>>     Also by a slightly different heap layout or different allocator
>>>>     implementation you may wake up bugs in the program not seen
>>>>     previously
>>>>     (use after free, invalid memory accesses, etc)
>>>> 
>>>> 
>>>> That is something I do not know yet, since the only information the
>>>> server gives is this:
>>>> 
>> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
>>>> 
>>>> I'll probably end up debugging the C code, but since the only
>>>> difference is using Free() vs free() on exactly the same objects, I
>>>> suspected a mis-usage of the R commands.
>>>> 
>>>> The same setup passes with no problems on my local MacOS, but the
>>>> errors still seem to occur on the Windows setup from r-hub.
>>> 
>>> This is very likely because you are freeing memory allocated by calloc()
>>> (or something else but not R_Calloc() in your program) using R_Free() or
>>> memory allocated using R_Calloc() by using free() in your program.
>>> I would recommend checking the source code manually for that.
>>> 
>>> It is not surprising that the problem doesn't appear on other platforms
>>> where the allocators happen to be the same.
>>> 
>>> Best
>>> Tomas
>>> 
>>> 
>>>> 
>>>> Best wishes,
>>>> Adrian
>>>      [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From du@@@@dr|@n @end|ng |rom gm@||@com  Fri Apr  8 11:02:55 2022
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Fri, 8 Apr 2022 12:02:55 +0300
Subject: [Rd] calloc() vs. R_Calloc()
In-Reply-To: <A38ACFF2-46BF-4D8E-9692-4E2A47C55B99@R-project.org>
References: <CAJ=0CtBMDXf4R0DR40whvXS5i8=KUrPRqbZWC-TWWeU2DfzQjw@mail.gmail.com>
 <f57301d8-c736-34af-29b1-c59d9458b180@gmail.com>
 <CAJ=0CtAnkUtOqhVVzx7wZUYvRjWZig6HrC700hQUZaRqPE7a_A@mail.gmail.com>
 <edf0b33b-2f4a-6e2a-02d5-55f548326ea2@gmail.com>
 <30b8bdc2-4897-1971-dbe9-712825e27d1f@sapo.pt>
 <CAJ=0CtB4Q2+y5=+V_et8bNZfD5dt=2G0N5mL1eGsKvDY5NuRTg@mail.gmail.com>
 <A38ACFF2-46BF-4D8E-9692-4E2A47C55B99@R-project.org>
Message-ID: <CAJ=0CtCsHZPu0H1cBziU82Me70umU9oeieRwy5kS+SCCXc4V=A@mail.gmail.com>

Yes indeed, thank you so much Simon.
And thanks everyone for all the help, things are back on track now.
All the best,
Adrian

On Fri, 8 Apr 2022 at 00:29, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Adrian,
>
> there are many more allocations in your code - for example, you're using
> resize() from utils.c which uses malloc/free so it will break since it's
> using the wrong allocator. You may need to replace *all* allocations in
> your project, not just some.
>
> Cheers,
> Simon
>
>
> > On 8/04/2022, at 6:45 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> >
> > Dear Rui,
> >
> > Thank you so much for the response, that's a very good observation but
> I've
> > just tested and results in the same errors, unfortunately.
> >
> > I have now changed all malloc()s to R_Calloc(), in the latest commit:
> > https://github.com/dusadrian/QCAtest/blob/main/src/CCubes.c
> >
> > And yet:
> >
> https://builder.r-hub.io/status/QCA_3.16.tar.gz-e652c850de7e51c4cc1311fafe44f986
> >
> > There must be something obvious I am missing, but my C knowledge is
> limited
> > and already stretched out...
> >
> > Best wishes,
> > Adrian
> >
> > On Thu, 7 Apr 2022 at 18:49, Rui Barradas <ruipbarradas at sapo.pt> wrote:
> >
> >> Hello,
> >>
> >> Tomas is right, there are many memory operations allocating with malloc
> >> and freeing with R_Free:
> >>
> >> line: variables - operation
> >>
> >>  55: p_pichart - malloc
> >> 336: p_pichart - R_Free
> >>
> >> 236: copy_implicants - malloc
> >> 260: copy_implicants - R_Free
> >>
> >> 240: p_tempic - malloc
> >> 262: p_tempic - R_Free
> >>
> >>
> >> And there are more cases like these. For what I've seen, the frequent
> >> (unique?) case is malloc/R_Free.
> >>
> >> Hope this helps,
> >>
> >> Rui Barradas
> >>
> >> ?s 09:59 de 07/04/2022, Tomas Kalibera escreveu:
> >>>
> >>> On 4/7/22 10:32, Adrian Du?a wrote:
> >>>> On Thu, 7 Apr 2022 at 10:32, Tomas Kalibera <tomas.kalibera at gmail.com
> >
> >>>> wrote:
> >>>>
> >>>>
> >>>>     [...]
> >>>>
> >>>>     And what are the errors you run into? On which platforms, under
> >> what
> >>>>     circumstances, etc? It would be much easier to give advice knowing
> >>>>     that.
> >>>>
> >>>>     In principle, one issue you may run into when switching allocators
> >> is
> >>>>     that you accidentally end up freeing by a different allocator from
> >>>>     the
> >>>>     one used to allocate it. It is common on Windows but can in
> >> principle
> >>>>     happen elsewhere as well.
> >>>>
> >>>>     Also by a slightly different heap layout or different allocator
> >>>>     implementation you may wake up bugs in the program not seen
> >>>>     previously
> >>>>     (use after free, invalid memory accesses, etc)
> >>>>
> >>>>
> >>>> That is something I do not know yet, since the only information the
> >>>> server gives is this:
> >>>>
> >>
> https://builder.r-hub.io/status/original/QCA_3.16.tar.gz-a03b4462b41df37c6284be1d5519e8b3
> >>>>
> >>>> I'll probably end up debugging the C code, but since the only
> >>>> difference is using Free() vs free() on exactly the same objects, I
> >>>> suspected a mis-usage of the R commands.
> >>>>
> >>>> The same setup passes with no problems on my local MacOS, but the
> >>>> errors still seem to occur on the Windows setup from r-hub.
> >>>
> >>> This is very likely because you are freeing memory allocated by
> calloc()
> >>> (or something else but not R_Calloc() in your program) using R_Free()
> or
> >>> memory allocated using R_Calloc() by using free() in your program.
> >>> I would recommend checking the source code manually for that.
> >>>
> >>> It is not surprising that the problem doesn't appear on other platforms
> >>> where the allocators happen to be the same.
> >>>
> >>> Best
> >>> Tomas
> >>>
> >>>
> >>>>
> >>>> Best wishes,
> >>>> Adrian
> >>>      [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Fri Apr  8 22:58:57 2022
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 8 Apr 2022 20:58:57 +0000
Subject: [Rd] tools:::cleanupLaTex fails to drop braces in names containing
 consecutive accented characters
Message-ID: <CWLP265MB3505DA6D823D935FEC2E9846AEE99@CWLP265MB3505.GBRP265.PROD.OUTLOOK.COM>

tools:::cleanupLaTex() fails to drop braces in names containing consecutive accented characters. 
For example, Ib??ez ends up rendered as Ib?{?}ez. This is a problem for high level functions, e.g. cite(). For example, after importing the following into a bibentry object, say `tmp`:

@article{DiaLop2020ejor,
  author =       { Juan Esteban Diaz and Manuel L{\'o}pez-Ib{\'a}{\~n}ez },
  title =        {Incorporating Decision-Maker's Preferences into the Automatic
                  Configuration of Bi-Objective Optimisation Algorithms},
  journal =      {European Journal of Operational Research},
  year =         2021,
  volume =       289,
  number =       3,
  pages =        {1209--1222},
  doi =          {10.1016/j.ejor.2020.07.059},
}

> cite("DiaLop2020ejor", tmp, textual = TRUE)
## Diaz and L?pez-Ib?{?}ez (2021)

Here is an example showing that it is not related to a specific accented character:

> e1 <- "Manuel L{\\'o}pez-Ib{\\'a}{\\~n}ez"
> e2 <- "Manuel L{\\'o}pez-Ib{\\~n}{\\'a}ez"
> tools:::cleanupLatex(e1)
## [1] "Manuel L?pez-Ib?{?}ez"
> tools:::cleanupLatex(e2)
[1] "Manuel L?pez-Ib?{?}ez"

This may be a problem in certain circumstances. I narrowed this down to `deparseLatex()` but it is not clear to me if a change may be need there or in parseLatex() which creates the object processed by deparseLatex. I have given more specific details of mu understanding of the problem in my comment at
https://github.com/GeoBosh/Rdpack/issues/25#issuecomment-1093336599 regarding a bug report for Rdpack.


Georgi Boshnakov


From Reece@God|ng @end|ng |rom out|ook@com  Sat Apr  9 21:52:05 2022
From: Reece@God|ng @end|ng |rom out|ook@com (Reece Goding)
Date: Sat, 9 Apr 2022 19:52:05 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
Message-ID: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>

Hello,

For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.

https://github.com/ReeceGoding/Frustration-One-Year-With-R

If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.

Thanks,
Reece Goding

From @erv|ce @end|ng |rom @hd@w@on@com  Sun Apr 10 18:05:17 2022
From: @erv|ce @end|ng |rom @hd@w@on@com (Stephen H. Dawson, DSL)
Date: Sun, 10 Apr 2022 12:05:17 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>

Hi Reece,


Thanks for the article. What specific feedback do you seek for your writing?


Kindest Regards,
*Stephen Dawson, DSL*
/Executive Strategy Consultant/
Business & Technology
+1 (865) 804-3454
http://www.shdawson.com


On 4/9/22 15:52, Reece Goding wrote:
> Hello,
>
> For a while, I've been working on writing a very big review of R. I've finally finished my final proofread of it. Can I get some feedback? This seems the most appropriate place to ask. It's linked below.
>
> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>
> If you think you've seen it before, that will be because it found some popularity on Hacker News before I was done proofreading it. The reception seems largely positive so far.
>
> Thanks,
> Reece Goding
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From tdhock5 @end|ng |rom gm@||@com  Mon Apr 11 22:51:54 2022
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Mon, 11 Apr 2022 13:51:54 -0700
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
Message-ID: <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>

You could take some of your observations and turn them into patches that
would help improve R. (discussion of such patches is one function of this
email list)

On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
r-devel at r-project.org> wrote:

> Hi Reece,
>
>
> Thanks for the article. What specific feedback do you seek for your
> writing?
>
>
> Kindest Regards,
> *Stephen Dawson, DSL*
> /Executive Strategy Consultant/
> Business & Technology
> +1 (865) 804-3454
> http://www.shdawson.com
>
>
> On 4/9/22 15:52, Reece Goding wrote:
> > Hello,
> >
> > For a while, I've been working on writing a very big review of R. I've
> finally finished my final proofread of it. Can I get some feedback? This
> seems the most appropriate place to ask. It's linked below.
> >
> > https://github.com/ReeceGoding/Frustration-One-Year-With-R
> >
> > If you think you've seen it before, that will be because it found some
> popularity on Hacker News before I was done proofreading it. The reception
> seems largely positive so far.
> >
> > Thanks,
> > Reece Goding
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Reece@God|ng @end|ng |rom out|ook@com  Mon Apr 11 23:22:04 2022
From: Reece@God|ng @end|ng |rom out|ook@com (Reece Goding)
Date: Mon, 11 Apr 2022 21:22:04 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
Message-ID: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>

Hi Stephen,

I must admit, I don't have anything specific in mind. I'm happy to hear any comments that anyone has.

Thanks,
Reece Goding

From bbo|ker @end|ng |rom gm@||@com  Mon Apr 11 23:41:23 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 11 Apr 2022 17:41:23 -0400
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
Message-ID: <1d77d84a-7388-0b3d-8c44-1fe2db7d5cea@gmail.com>

   Yes, although I would say that the vast majority of the observations 
here, while true, are thoroughly baked in, through some combination of 
backward compatibility and R-core stubbornness [many of them may indeed 
have been discussed on this list over the years].

    I would say that *documentation* patches (e.g., relating to your 
comments about  the lack of examples for some basic functions) are most 
likely to succeed. Adding a few lines to the documentation here and 
there that will help out new users would have a big marginal value.

   There may be a few edge cases where R does something silently that 
you can successfully argue should *always* be an error, and introduce a 
patch to make it so (e.g. the upcoming change in R 4.2.0 that "Calling 
&& or || with either argument of length greater than one now gives a 
warning (which it is intended will become an error)".

   Some of the issues can be worked around with add-on packages that 
implement the desired functionality (again, it is entirely reasonable to 
argue that the design of the base language should be fixed, but it's not 
going to be ...)

   cheers
    Ben Bolker

On 4/11/22 4:51 PM, Toby Hocking wrote:
> You could take some of your observations and turn them into patches that
> would help improve R. (discussion of such patches is one function of this
> email list)
> 
> On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
> r-devel at r-project.org> wrote:
> 
>> Hi Reece,
>>
>>
>> Thanks for the article. What specific feedback do you seek for your
>> writing?
>>
>>
>> Kindest Regards,
>> *Stephen Dawson, DSL*
>> /Executive Strategy Consultant/
>> Business & Technology
>> +1 (865) 804-3454
>> http://www.shdawson.com
>>
>>
>> On 4/9/22 15:52, Reece Goding wrote:
>>> Hello,
>>>
>>> For a while, I've been working on writing a very big review of R. I've
>> finally finished my final proofread of it. Can I get some feedback? This
>> seems the most appropriate place to ask. It's linked below.
>>>
>>> https://github.com/ReeceGoding/Frustration-One-Year-With-R
>>>
>>> If you think you've seen it before, that will be because it found some
>> popularity on Hacker News before I was done proofreading it. The reception
>> seems largely positive so far.
>>>
>>> Thanks,
>>> Reece Goding
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Mon Apr 11 23:44:10 2022
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Mon, 11 Apr 2022 21:44:10 +0000
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
References: <LO2P123MB5357ACA9E088C38BF1CB03268AEA9@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <31b15a0244844c7cb22608967bc0a90a@chu-rouen.fr>

> I must admit, I don't have anything specific in mind. I'm happy to hear any comments that anyone has.

It's relevant and well exposed, in my opinion.
Unfortunately, many problems are deep design flaws that cannot be easily fixed without breaking backwards compatibility.
Some problems can be fixed, such as the documentation.
R could also generate more warning messages in weird situations. Error messages can also be improved.

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Apr 11 23:23:33 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 11 Apr 2022 23:23:33 +0200
Subject: [Rd] intersect() change of behavior in 4.2
Message-ID: <CABtg=K=tRMdLJ7p2JHdFyOYVyjmLNszQguKn569gx+FswChtyw@mail.gmail.com>

I wonder if this change is intentional, and if it is, whether it is
worth mentioning in the NEWS.

? R-4.1 -q -e 'intersect(list(), "foo")'
> intersect(list(), "foo")
character(0)

? R-4.2 -q -e 'intersect(list(), "foo")'
> intersect(list(), "foo")
list()


From g@bembecker @end|ng |rom gm@||@com  Tue Apr 12 01:28:04 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 11 Apr 2022 16:28:04 -0700
Subject: [Rd] I've written a big review of R. Can I get some feedback?
In-Reply-To: <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
References: <LO2P123MB5357AC82AA110F052EF0D8208AE89@LO2P123MB5357.GBRP123.PROD.OUTLOOK.COM>
 <0e50158e-e5ca-d8d8-4574-ea4a6382ff58@shdawson.com>
 <CALK03d1ACBtb7fz01wqusQ6R4quzO1zOetAz10yAK_vYpksHkw@mail.gmail.com>
Message-ID: <CAD4oTHH0n9-oM23TXLTGyO6HHAH3AMSR+kAeJv2Q_T_iQTk6LA@mail.gmail.com>

Hi Reece,

I'm not really sure what kind of review you're looking for (and I'm not
certain this is the right place for it, but hopefully its ok enough). Also,
to channel Pascal, forgive me, I would have written a shorter response but
I didn't have the time.

Firstly, it is fairly ... partisan, I suppose, for lack of a better term.

More importantly from a usefulness perspective you often notably don't
present the knowledge you gained at the end of the various frustrations you
had. As one example that jumped out to me, you say

"One day, you?ll be tripped up by R?s hierarchy of how it likes to simplify
mixed types outside of lists. "

but you don't present your readers with the (well defined) coercion
hierarchy so that they would, you know, not be tripped up by it as badly.
This is probably my largest issue with your document overall. It can give
the reader talking points about how R is bad (not all of which are even
incorrect, per se, as many expert R users will be happy to tell you), but
it won't really help people become better R users in many cases.

Your article also, I suspect, fails to understand what a typical "Novice R
Users" is and what they want to do. By and large they want to analyze data
and create plots. They are analysts, NOT programmers (writing analysis
scripts is not programming in the typical sense, and I'm not the only one
who thinks that).

So the point you make early on in your explanation why you do not strongly
recommend R For Data Science (which I had no part in writing and have not
read myself) that it

"It deliberately avoids the fundamentals of programming ? e.g. making
functions, loops, and if statements ? until the second half. I therefore
suspect that any non-novice would be better off finding an introduction to
the relevant packages with their favourite search engine."


misses the point of R itself for what I'd claim is the "typical novice R
user".

Having read through your review, I'm confused why you were using R to do
some of the things I'm inferring that you felt like you needed it to do. If
you picked up R  wanting an applicable equally to all programming problem
domains general purpose language, you're going to have a bad time. Mostly
because that is not what R is.

Finally, a (very) incomplete response to a few of the more specific points
raised in your review:

*Lists:*

The linked stack overflow question (
https://stackoverflow.com/questions/2050790/how-to-correctly-use-lists-in-r)
shows a pretty fundamental misunderstanding of what lists and atomic
vectors are/do in R. There is nothing wrong with this, asking questions we
don't know the answer to is how we learn, but I'm not sure the question
serves as well as a primer for R lists as you claim. The top answer at time
of writing discusses the C level structure of R objects, which can, I
suppose, inform your knowledge on how lists at the R level work, but is NOT
necessary nor the most pedagogically useful way to present it.

*Strings:*

Strings are not arrays of characters idiomatically at the R level,
they are *atomic observed
values within a (character) vector of data*. Yes, deep down in the C code
they are arrays of characters, but not at the R level. As such, splitting
the elements of a character vector into their respective component
individual characters is not (at all, in my experience) a common
operation. charvec[1]
within typical R usage (where charvec is *a vector of **data*) is much more
likely to be intended to select the *first observation for the data vector*,
which it does. Given what R is for, frankly I think it'd be fairly insane
for charvec[1] to do what substr does.

*Variable Manipulation*

Novice users shouldn't be calling eval. This is not to gatekeep it from
them, like we have some special "eval-callers" club that they're not
invited to. Rather, it is me saying that metaprogramming is not a
novice-difficulty task in R (or, I would expect, anywhere else really).

You also say "variable names" in this section where you mean "argument
names" and that distinction is both meaningful and important. *Variable
names, *are not partially matched:

> xyz <- 5

> x

*Error: object 'x' not found*


*Subsetting:*

I'm fairly certain arrays (including 2d matrices are stored in column order
rather than row order because that has been the standard for linear algebra
on computers since before I knew what either of those things were...

tail(x,1) *is* the idiomatic way of getting the last element of a vector. The
people on stackoverflow that told you this was "very slow" were misguided
at best. It takes ~6000 *nano*seconds on my laptop, compared to the ~200
nanoseconds x[length(x)]. Yes, that is a 30x speedup; no, it doesn't matter
in practice.

I'm going to stop now because this is already too long, but this type of
response continues to be possible throughout.

Lastly, with regard to your mapply challenge. and I quote directly from the
documentation (emphasis mine):

   ...: *arguments to vectorize over* (vectors or lists of strictly

          positive length, or all of zero length).  See also ?Details?.

   MoreArgs: a list of *other arguments* to ?FUN?.



... is the arguments you vectorize over, so FUN gets one element of each
thing in ... for each call. MoreArgs, then, is the set of arguments to
FUN *which
you don't vectorize over, *ie where each call to FUN gets the whole thing.
That's it, that's the whole thing.


I don't disagree that this could be clearer (as Ben pointed out, a
documentation patch would be the way to address this), but its not correct
to say the information isn't in there at all.


Best,

~G

On Mon, Apr 11, 2022 at 1:52 PM Toby Hocking <tdhock5 at gmail.com> wrote:

> You could take some of your observations and turn them into patches that
> would help improve R. (discussion of such patches is one function of this
> email list)
>
> On Sun, Apr 10, 2022 at 9:05 AM Stephen H. Dawson, DSL via R-devel <
> r-devel at r-project.org> wrote:
>
> > Hi Reece,
> >
> >
> > Thanks for the article. What specific feedback do you seek for your
> > writing?
> >
> >
> > Kindest Regards,
> > *Stephen Dawson, DSL*
> > /Executive Strategy Consultant/
> > Business & Technology
> > +1 (865) 804-3454
> > http://www.shdawson.com
> >
> >
> > On 4/9/22 15:52, Reece Goding wrote:
> > > Hello,
> > >
> > > For a while, I've been working on writing a very big review of R. I've
> > finally finished my final proofread of it. Can I get some feedback? This
> > seems the most appropriate place to ask. It's linked below.
> > >
> > > https://github.com/ReeceGoding/Frustration-One-Year-With-R
> > >
> > > If you think you've seen it before, that will be because it found some
> > popularity on Hacker News before I was done proofreading it. The
> reception
> > seems largely positive so far.
> > >
> > > Thanks,
> > > Reece Goding
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Dunc@n@G@rmon@w@y @end|ng |rom gm@||@com  Mon Apr 11 23:24:52 2022
From: Dunc@n@G@rmon@w@y @end|ng |rom gm@||@com (Duncan Garmonsway)
Date: Mon, 11 Apr 2022 22:24:52 +0100
Subject: [Rd] Hashed environments of size <5 never grow
Message-ID: <CAARqVQO6pBCYaQcuxoiWAgKeshFFw+rCCuDRQd1NnRg7RxD+iA@mail.gmail.com>

Hello,

Hashed environments that begin with a (non-default) size of 4 or less, will
never grow, which is very detrimental to performance.  For example,

```
n <- 10000
l <- vector("list", n)
l <- setNames(l, seq_len(n))

# Takes a second, and nchains remains 1.
e1 <- list2env(l, hash = TRUE, size = 1)
env.profile(e1)$nchains
# [1] 1

# Returns instantly, and nchains grows to 6950
e2 <- list2env(l, hash = TRUE, size = 5)
env.profile(e2)$nchains
# [1] 6950
```

The cause is that, when calling the growth function, the new size is
truncated to an integer.  See src/main/envir.c line 440, or
https://github.com/wch/r-source/blob/d9b9d00b6d2764839f229bf011dda8d027aae227/src/main/envir.c#L440

Given the hard-coded growth rate of 1.2, any size of 4 or less will be
truncated back to itself.

(int) (1 * 1.2 ) = 1
(int) (2 * 1.2) = 1
(int) (3 * 1.2) = 1
(int) (4 * 1.2) = 1
(int) (5 * 1.2) = 6

This is a rare case, and I couldn't find any examples in CRAN packages of
the `size` argument being used at all, let alone so small.  Even so, it
tripped me up, and could be fixed by using `ceil()` in src/main/envir.c
line 440 as follows.

new_table = R_NewHashTable((int)(ceil(HASHSIZE(table) *
HASHTABLEGROWTHRATE)))

Kind regards,
Duncan Garmonsway

	[[alternative HTML version deleted]]


