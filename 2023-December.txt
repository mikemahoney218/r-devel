From bbo|ker @end|ng |rom gm@||@com  Fri Dec  8 00:21:08 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 7 Dec 2023 18:21:08 -0500
Subject: [Rd] option to silence/quieten stats::confint.glm ?
Message-ID: <1dbd2ca6-6f37-4ff3-a44d-8e90654fc992@gmail.com>

    confint.glm prints a message "Waiting for profiling to be done..."

    I could have sworn that there used to be an option (quiet = TRUE?) 
to turn this message off without resorting to suppressMessages() 
(finer/more specific control is always preferable ...) -- but on the 
basis of looking back at archived versions of MASS, and at this Stack 
Overflow post:

https://stackoverflow.com/questions/43847705/how-do-i-silence-confint-in-r

  I think I was hallucinating.

  Do people think this would be a reasonable minor feature request/would 
a patch suggestion be considered? What would the  best name for the 
argument be? (scan() has "quiet")

pos <- tail(search(), 1)  ## base package
tt <- lapply(c(lsf.str(pos = pos)), \(x) names(formals(x))) |> unlist() 
|> table()
 > tt[["quiet"]]
[1] 4
 > tt[["silent"]]
[1] 1
 > tt[["verbose"]]
[1] 9


    cheers
      Ben Bolker


From j@goreck| @end|ng |rom w|t@edu@p|  Sun Dec 10 16:09:26 2023
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 10 Dec 2023 16:09:26 +0100
Subject: [Rd] capabilities() could report strict-barrier
Message-ID: <CAOO9MKWEOJiZAy=y6vLSFOpqgRxLk34SMBx6OYRQquFoviE3-Q@mail.gmail.com>

Hi,

I would like to propose for capabilities() function to include information
about strict-barrier (--enable-strict-barrier flag).
I can now do "grep barrier /usr/local/lib/R/etc/Makeconf" but having that
in R, in platform independent way, would be useful.

Best Regards,
Jan Gorecki

	[[alternative HTML version deleted]]


From e@ @end|ng |rom enr|co@chum@nn@net  Mon Dec 11 13:48:52 2023
From: e@ @end|ng |rom enr|co@chum@nn@net (Enrico Schumann)
Date: Mon, 11 Dec 2023 13:48:52 +0100
Subject: [Rd] Small typo in Sweave.Rnw
Message-ID: <878r60nbuz.fsf@enricoschumann.net>

In the first paragraph of Sweave.Rnw
(./src/library/utils/vignettes/Sweave.Rnw), it reads

  for literate programming \cite{fla:Knuth:1984}.

but probably should be

  for literate programming \citep{fla:Knuth:1984}.
                                ^

kind regards
    Enrico
    
-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From tkpmep m@iii@g oii gm@ii@com  Mon Dec 11 15:44:24 2023
From: tkpmep m@iii@g oii gm@ii@com (tkpmep m@iii@g oii gm@ii@com)
Date: Mon, 11 Dec 2023 20:14:24 +0530
Subject: [Rd] Base R wilcox.test gives incorrect answers,
 has been fixed in DescTools, solution can likely be ported to Base R
Message-ID: <00c101da2c40$89ffc220$9dff4660$@gmail.com>

While using the Hodges Lehmann Mean in DescTools (DescTools::HodgesLehmann),
I found that it generated incorrect answers (see
<https://github.com/AndriSignorell/DescTools/issues/97>
https://github.com/AndriSignorell/DescTools/issues/97). The error is driven
by the existence of tied values forcing wilcox.test in Base R to switch to
an approximate algorithm that returns incorrect results - see
<https://aakinshin.net/posts/r-hodges-lehmann-problems/>
https://aakinshin.net/posts/r-hodges-lehmann-problems/ for a detailed
exposition of the issue.

 

Andri Signorell and Cyril Moser have a new C++ implementation of
DescTools::HodgesLehmann using a O(N log(N)) algorithm due to Monahan, but
wilcox.test in Base R appears to be still broken. Will someone kindly bring
this observation, as well as the existence of a solution, to the attention
of the relevant person(s) in the Base R development team? 

 

The paper by Mohanan, as well as the original Fortran implementation of the
algorithm are linked to from
<https://github.com/AndriSignorell/DescTools/issues/97>
https://github.com/AndriSignorell/DescTools/issues/97). Inefficient O(N^2)
algorithms for the Hodges-Lehmann mean are known and are implemented in a
variety of packages. For example, the authors of rt.test
(https://cran.r-project.org/web/packages/rt.test) use the O(N^2) approach. I
suspect that Andri and Cyril will be more than happy to assist with fixing
wilcox.test in Base R with their implementation of Monahan's fast algorithm.

 

Sincerely

 

Thomas Philips

 


	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Mon Dec 11 17:03:28 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 11 Dec 2023 11:03:28 -0500
Subject: [Rd] Base R wilcox.test gives incorrect answers,
 has been fixed in DescTools, solution can likely be ported to Base R
In-Reply-To: <00c101da2c40$89ffc220$9dff4660$@gmail.com>
References: <00c101da2c40$89ffc220$9dff4660$@gmail.com>
Message-ID: <98e7f899-b5cf-4fb8-bc8a-fa9cb1ec3afb@gmail.com>

   You could request a bugzilla account and post it to 
https://bugs.r-project.org/ yourself: from 
https://www.r-project.org/bugs.html,

 > In order to get a bugzilla account (i.e., become ?member?), please 
send an e-mail (from the address you want to use as your login) to 
bug-report-request at r-project.org briefly explaining why, and a volunteer 
will add you to R?s Bugzilla members.

   (On the other hand, I think that posting to this list was a good idea 
in any case, as it is more visible than the bugs list and may spark some 
useful discussion.)

    cheers
    Ben Bolker


On 2023-12-11 9:44 a.m., tkpmep at gmail.com wrote:
> While using the Hodges Lehmann Mean in DescTools (DescTools::HodgesLehmann),
> I found that it generated incorrect answers (see
> <https://github.com/AndriSignorell/DescTools/issues/97>
> https://github.com/AndriSignorell/DescTools/issues/97). The error is driven
> by the existence of tied values forcing wilcox.test in Base R to switch to
> an approximate algorithm that returns incorrect results - see
> <https://aakinshin.net/posts/r-hodges-lehmann-problems/>
> https://aakinshin.net/posts/r-hodges-lehmann-problems/ for a detailed
> exposition of the issue.
> 
>   
> 
> Andri Signorell and Cyril Moser have a new C++ implementation of
> DescTools::HodgesLehmann using a O(N log(N)) algorithm due to Monahan, but
> wilcox.test in Base R appears to be still broken. Will someone kindly bring
> this observation, as well as the existence of a solution, to the attention
> of the relevant person(s) in the Base R development team?
> 
>   
> 
> The paper by Mohanan, as well as the original Fortran implementation of the
> algorithm are linked to from
> <https://github.com/AndriSignorell/DescTools/issues/97>
> https://github.com/AndriSignorell/DescTools/issues/97). Inefficient O(N^2)
> algorithms for the Hodges-Lehmann mean are known and are implemented in a
> variety of packages. For example, the authors of rt.test
> (https://cran.r-project.org/web/packages/rt.test) use the O(N^2) approach. I
> suspect that Andri and Cyril will be more than happy to assist with fixing
> wilcox.test in Base R with their implementation of Monahan's fast algorithm.
> 
>   
> 
> Sincerely
> 
>   
> 
> Thomas Philips
> 
>   
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Dec 11 19:54:06 2023
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 11 Dec 2023 19:54:06 +0100
Subject: [Rd] Small typo in Sweave.Rnw
In-Reply-To: <878r60nbuz.fsf@enricoschumann.net>
References: <878r60nbuz.fsf@enricoschumann.net>
Message-ID: <25975.23246.833882.469653@hornik.net>

>>>>> Enrico Schumann writes:

Great, thanks: changed now.

Best
-k

> In the first paragraph of Sweave.Rnw
> (./src/library/utils/vignettes/Sweave.Rnw), it reads

>   for literate programming \cite{fla:Knuth:1984}.

> but probably should be

>   for literate programming \citep{fla:Knuth:1984}.
>                                 ^

> kind regards
>     Enrico
    
> -- 
> Enrico Schumann
> Lucerne, Switzerland
> http://enricoschumann.net

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From h||m@r@berger @end|ng |rom gmx@de  Mon Dec 11 21:11:48 2023
From: h||m@r@berger @end|ng |rom gmx@de (Hilmar Berger)
Date: Mon, 11 Dec 2023 21:11:48 +0100
Subject: [Rd] Partial matching performance in data frame rownames using [
Message-ID: <de5e1dad-7ffc-4c35-8c51-1e0e21e585b9@gmx.de>

Dear all,

I have seen that others have discussed the partial matching behaviour of
data.frame[idx,] in the past, in particular with respect to unexpected
results sets.

I am aware of the fact that one can work around this using either
match() or switching to tibble/data.table or similar altogether.

I have a different issue with the partial matching, in particular its
performance when used on large data frames or more specifically, with
large queries matched against its row names.

I came across a case where I wanted to extract data from a large table
(approx 1M rows) using an index which matched only about 50% to the row
names, i.e. about 50% row name hits and 50% misses.

What was unexpected is that in this case was that [.data.frame was
hanging for a long time (I waited about 10 minutes and then restarted
R). Also, this cannot be interrupted in interactive mode.

ids <- paste0("cg", sprintf("%06d",0:(1e6-1)))
d1 <- data.frame(row.names=ids, v=1:(1e6) )

q1 <- sample(ids, 1e6, replace=F)
system.time({r <- d1[q1,,drop=F]})
#?? user? system elapsed
#? 0.464?? 0.000?? 0.465

# those will hang a long time, I stopped R after 10 minutes
q2 <- c(q1[1:5e5], gsub("cg", "ct", q1[(5e5+1):1e6]) )
system.time({r <- d1[q2,,drop=F]})

# same here
q3 <- c(q1[1:5e5], rep("FOO",5e5) )
system.time({r <- d1[q3,,drop=F]})

It seems that the penalty of partial matching the non-hits across the
whole row name vector is not negligible any more with large tables and
queries, compared to small and medium tables.

I checked and pmatch(q2, rownames(d1) is equally slow.

Is there a chance to a) document this in the help page ("with large
indexes/tables use match()") or even better b) add an exact flag to
[.data.frame ?

Thanks a lot!

Best regards

Hilmar


