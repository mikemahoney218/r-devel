From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed Apr  1 04:00:46 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 1 Apr 2020 15:00:46 +1300
Subject: [Rd] [FORGED]  Any help needed in prep of 4.0.0?
In-Reply-To: <CAD4oTHGkGp+HxHFWiJ6BFEmr6ZjkUaDw=+ZZTyW=kasP+Mi=Zw@mail.gmail.com>
References: <CAD4oTHGkGp+HxHFWiJ6BFEmr6ZjkUaDw=+ZZTyW=kasP+Mi=Zw@mail.gmail.com>
Message-ID: <ba6a6c47-ad7b-36a2-2bf2-78d71c5bc00d@stat.auckland.ac.nz>

Hi

Thanks for the help you have given already with testing the 
plotmath/symbolfamily changes.

If you could keep monitoring that thread, there are likely to be further 
calls for checking builds on Mac and Windows.

Thanks!

Paul

On 1/04/20 8:35 am, Gabriel Becker wrote:
> Hi all,
> 
> Are there any small patches or further testing that any R-core
> members would like help with in the preparation to 4.0.0?
> 
> Sadly @Martin Maechler <maechler at stat.math.ethz.ch> I don't have the
> numerical optimization chops to be any help with qbeta, sorry.
> 
> But if there's anything else, small private wishlist items or things that
> could use another ste of eyes or some testing that you have locally or aa
> apatch you just haven't had time to write, please let me know on list or
> off. I'm happy to help.
> 
> I will also, of course, be going through bugzilla to see what I can help
> with there.
> 
> Best,
> ~G
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed Apr  1 04:52:18 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 1 Apr 2020 15:52:18 +1300
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <ce5f830ec5c0f689ccbf057103794d5176360131.camel@laposte.net>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <66c59964f5e36222b78bb68fb4bdf450e29857a7.camel@laposte.net>
 <29c7f633-5c05-5db1-85d3-b0c6ae285af5@stat.auckland.ac.nz>
 <c33d5034208f7ae4ccdc20f17b131d6aa13dc533.camel@laposte.net>
 <25844ba2-ffd5-2a4e-f980-f19e8c63d7a6@stat.auckland.ac.nz>
 <ce5f830ec5c0f689ccbf057103794d5176360131.camel@laposte.net>
Message-ID: <a4baed1b-bb3c-fb06-9ba1-f906057421e5@stat.auckland.ac.nz>



On 31/03/20 8:04 pm, Nicolas Mailhot wrote:
> Le mardi 31 mars 2020 ? 15:07 +1300, Paul Murrell a ?crit :
> 
>>
> 
>> Thanks, that's useful.  For my own memory, this is the parenthesis
>> block
>> that might be useful ...
>>
>> U+239b Sm LEFT PARENTHESIS UPPER HOOK ?
>> U+239c Sm LEFT PARENTHESIS EXTENSION ?
>> U+239d Sm LEFT PARENTHESIS LOWER HOOK ?
>> U+239e Sm RIGHT PARENTHESIS UPPER HOOK ?
>> U+239f Sm RIGHT PARENTHESIS EXTENSION ?
>> U+23a0 Sm RIGHT PARENTHESIS LOWER HOOK ?
>> U+23a1 Sm LEFT SQUARE BRACKET UPPER CORNER ?
>> U+23a2 Sm LEFT SQUARE BRACKET EXTENSION ?
>> U+23a3 Sm LEFT SQUARE BRACKET LOWER CORNER ?
>> U+23a4 Sm RIGHT SQUARE BRACKET UPPER CORNER ?
>> U+23a5 Sm RIGHT SQUARE BRACKET EXTENSION ?
>> U+23a6 Sm RIGHT SQUARE BRACKET LOWER CORNER ?
>> U+23a7 Sm LEFT CURLY BRACKET UPPER HOOK ?
>>
>> However, the situation is still not completely straightforward.  The
>> style of the symbols is also an issue and the DejaVu symbols are not
>> as elegant as, say, the OpenSymbol symbols.  What makes things tricky
>> is that, AFAICS, DejaVu has (TTX Unicode cmap output) ...
> 
> Ah, the endless design discussions? Myself I prefer a consistent design
> like Dejavu, over cobbling symbols of different designs, because they
> used to be in separate fonts. Anyway:
> 
>> <map code="0x239b" name="uni239B"/><!-- LEFT PARENTHESIS UPPER HOOK
>> -->
>>
>> ... while OpenSymbol has ...
>>
>> <map code="0xf8eb" name="parenlefttp"/><!-- ???? -->
>>
>> ... but neither has the other.
> 
> OpenSymbol is incorrect (it suffers from the same pre-unicode bias as
> R). However, it is, to my knowledge, actively maintained. You can ask
> its upstream (LibreOffice) for Unicode conformance fixes if you find
> problems. Especially when it?s just fixing the map of an existing
> glyph, that should not be hard for them to fix. Anything PUA-related
> won?t interoperate well in an unicode world.
> 
> (you can ask DejaVu too, maybe a request from a project like R will
> wake up its maintainers. But, that?s a long shot. DejaVu suffers from
> an almost done state without enough remaining work to interest
> designers).
> 
> Regards,
> 

Thanks again!  I will try contacting with those font projects.

In the meantime, I will look at allowing the user to select a 
symbol-to-unicode mapping or a symbol-to-unicode-using-PUA mapping 
alongside their choice of symbolfamily so that we can get a variety of 
things to work for now.

Paul
-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From kev|nu@hey @end|ng |rom gm@||@com  Thu Apr  2 06:35:30 2020
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Wed, 1 Apr 2020 21:35:30 -0700
Subject: [Rd] Rtools and R 4.0.0?
Message-ID: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>

Hello,

Has a decision been made yet as to whether R 4.0.0 on Windows is going
to be built using the new gcc8 toolchain (described at
https://cran.r-project.org/bin/windows/testing/rtools40.html)?

>From the sidelines, I can see that the toolchain is being used to
build and test packages on CRAN; if there are any remaining issues
that I can help to try and run down (either in R or any CRAN packages)
I'd be happy to try and help.

FWIW, I'm excited at the prospect at seeing a new toolchain for
Windows, since it would imply support for C++17 and so it would become
easier for CRAN packages to depend on the newer C++ standard.

Thanks,
Kevin


From @bronder @end|ng |rom @tevebronder@com  Thu Apr  2 19:28:04 2020
From: @bronder @end|ng |rom @tevebronder@com (Steve Bronder)
Date: Thu, 2 Apr 2020 13:28:04 -0400
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
Message-ID: <CAAVP=am-0d==t48BW5MofGRJNvq+=yd0Jwwckz1iypUaX6rjFw@mail.gmail.com>

Also related to this, I tried looking in the archives and couldn't find a
previous discussion, was gcc 8.1 chosen over gcc 9 because mingw-w64 does
not support v9 yet? It looks like 9 is the first version that makes C++17
support non-experimental

https://gcc.gnu.org/gcc-9/changes.html

Regards,

Steve Bronder
Website: stevebronder.com
Phone: 412-719-1282
Email: sbronder at stevebronder.com



On Thu, Apr 2, 2020 at 12:36 AM Kevin Ushey <kevinushey at gmail.com> wrote:

> Hello,
>
> Has a decision been made yet as to whether R 4.0.0 on Windows is going
> to be built using the new gcc8 toolchain (described at
> https://cran.r-project.org/bin/windows/testing/rtools40.html)?
>
> From the sidelines, I can see that the toolchain is being used to
> build and test packages on CRAN; if there are any remaining issues
> that I can help to try and run down (either in R or any CRAN packages)
> I'd be happy to try and help.
>
> FWIW, I'm excited at the prospect at seeing a new toolchain for
> Windows, since it would imply support for C++17 and so it would become
> easier for CRAN packages to depend on the newer C++ standard.
>
> Thanks,
> Kevin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Fri Apr  3 14:55:29 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Fri, 3 Apr 2020 08:55:29 -0400
Subject: [Rd] The finalizer of the externalPtr does not work when closing R?
Message-ID: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>

Hi all,

I found that the finalizer of the externalPtr is not called when R is
quitting. However, manually calling GC() works fine. This behavior is
observed on devel R 2020-04-02 r78142 on Win and R 3.6.3 on Ubuntu.  I make
a reproducible package here: https://github.com/Jiefei-Wang/example

Here is the detail of how to reproduce the problem, I create a temporary
file in the package root path and make an external pointer. The finalizer
of the external pointer will delete the  temporary file when it is called.
In the first round, I manually remove the external pointer from the global
environment and call GC() to verify if the finalizer is programmed
properly. The temporary file is deleted successfully. Then I create the
file and the pointer again and close the R session without saving the
global environment. Since the external pointer is removed when closing R,
so the finalizer should be called in this procedure. However, the temp file
still exists after closing the R session.

Here is the test code(which can be found in inst/example/example.R)

## Create a temporary file
tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
tmpFile
file.create(tmpFile)
file.exists(tmpFile)
## Create an external pointer whose finalizer will delete
## the file when the variable is not in used
x <- testPackage:::makeExtPtr(file.remove,tmpFile)
## GC is working fine
rm(list="x")
gc()
file.exists(tmpFile)

## Create the temporary file again
file.create(tmpFile)
file.exists(tmpFile)
x <- testPackage:::makeExtPtr(file.remove,tmpFile)
## Quit R session without explicitly cleaning the working space
quit(save = "no")


##=====Open a new R session=======
## The temporary file still exist
tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
file.exists(tmpFile)

Not sure if this behavior is designed on purpose, but it sounds wired to me
and can cause memory leaking if not properly handled.

Best,
Jiefei

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Apr  3 15:04:53 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 3 Apr 2020 14:04:53 +0100
Subject: [Rd] 
 The finalizer of the externalPtr does not work when closing R?
In-Reply-To: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>
References: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>
Message-ID: <CABtg=Kmv69LSehYPSjf1FexTWB=LfBhaX05Bg6JNhk7-2v_DUw@mail.gmail.com>

See R_RegisterCFinalizerEx() and set onexit to nonzero. Here:
https://github.com/wch/r-source/blob/9353ddfa8d30069ad8975e0364307d710f2488d5/src/include/Rinternals.h#L1279-L1280

Gabor

On Fri, Apr 3, 2020 at 1:56 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>
> Hi all,
>
> I found that the finalizer of the externalPtr is not called when R is
> quitting. However, manually calling GC() works fine. This behavior is
> observed on devel R 2020-04-02 r78142 on Win and R 3.6.3 on Ubuntu.  I make
> a reproducible package here: https://github.com/Jiefei-Wang/example
>
> Here is the detail of how to reproduce the problem, I create a temporary
> file in the package root path and make an external pointer. The finalizer
> of the external pointer will delete the  temporary file when it is called.
> In the first round, I manually remove the external pointer from the global
> environment and call GC() to verify if the finalizer is programmed
> properly. The temporary file is deleted successfully. Then I create the
> file and the pointer again and close the R session without saving the
> global environment. Since the external pointer is removed when closing R,
> so the finalizer should be called in this procedure. However, the temp file
> still exists after closing the R session.
>
> Here is the test code(which can be found in inst/example/example.R)
>
> ## Create a temporary file
> tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
> tmpFile
> file.create(tmpFile)
> file.exists(tmpFile)
> ## Create an external pointer whose finalizer will delete
> ## the file when the variable is not in used
> x <- testPackage:::makeExtPtr(file.remove,tmpFile)
> ## GC is working fine
> rm(list="x")
> gc()
> file.exists(tmpFile)
>
> ## Create the temporary file again
> file.create(tmpFile)
> file.exists(tmpFile)
> x <- testPackage:::makeExtPtr(file.remove,tmpFile)
> ## Quit R session without explicitly cleaning the working space
> quit(save = "no")
>
>
> ##=====Open a new R session=======
> ## The temporary file still exist
> tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
> file.exists(tmpFile)
>
> Not sure if this behavior is designed on purpose, but it sounds wired to me
> and can cause memory leaking if not properly handled.
>
> Best,
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Apr  3 15:07:24 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 3 Apr 2020 15:07:24 +0200
Subject: [Rd] 
 The finalizer of the externalPtr does not work when closing R?
In-Reply-To: <CABtg=Kmv69LSehYPSjf1FexTWB=LfBhaX05Bg6JNhk7-2v_DUw@mail.gmail.com>
References: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>
 <CABtg=Kmv69LSehYPSjf1FexTWB=LfBhaX05Bg6JNhk7-2v_DUw@mail.gmail.com>
Message-ID: <63e4b385-7ec8-d0d7-78a5-274f1966e1db@gmail.com>

+ 5.13 of Writing R Extensions

Tomas
On 4/3/20 3:04 PM, G?bor Cs?rdi wrote:
> See R_RegisterCFinalizerEx() and set onexit to nonzero. Here:
> https://github.com/wch/r-source/blob/9353ddfa8d30069ad8975e0364307d710f2488d5/src/include/Rinternals.h#L1279-L1280
>
> Gabor
>
> On Fri, Apr 3, 2020 at 1:56 PM Wang Jiefei <szwjf08 at gmail.com> wrote:
>> Hi all,
>>
>> I found that the finalizer of the externalPtr is not called when R is
>> quitting. However, manually calling GC() works fine. This behavior is
>> observed on devel R 2020-04-02 r78142 on Win and R 3.6.3 on Ubuntu.  I make
>> a reproducible package here: https://github.com/Jiefei-Wang/example
>>
>> Here is the detail of how to reproduce the problem, I create a temporary
>> file in the package root path and make an external pointer. The finalizer
>> of the external pointer will delete the  temporary file when it is called.
>> In the first round, I manually remove the external pointer from the global
>> environment and call GC() to verify if the finalizer is programmed
>> properly. The temporary file is deleted successfully. Then I create the
>> file and the pointer again and close the R session without saving the
>> global environment. Since the external pointer is removed when closing R,
>> so the finalizer should be called in this procedure. However, the temp file
>> still exists after closing the R session.
>>
>> Here is the test code(which can be found in inst/example/example.R)
>>
>> ## Create a temporary file
>> tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
>> tmpFile
>> file.create(tmpFile)
>> file.exists(tmpFile)
>> ## Create an external pointer whose finalizer will delete
>> ## the file when the variable is not in used
>> x <- testPackage:::makeExtPtr(file.remove,tmpFile)
>> ## GC is working fine
>> rm(list="x")
>> gc()
>> file.exists(tmpFile)
>>
>> ## Create the temporary file again
>> file.create(tmpFile)
>> file.exists(tmpFile)
>> x <- testPackage:::makeExtPtr(file.remove,tmpFile)
>> ## Quit R session without explicitly cleaning the working space
>> quit(save = "no")
>>
>>
>> ##=====Open a new R session=======
>> ## The temporary file still exist
>> tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
>> file.exists(tmpFile)
>>
>> Not sure if this behavior is designed on purpose, but it sounds wired to me
>> and can cause memory leaking if not properly handled.
>>
>> Best,
>> Jiefei
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Apr  3 15:14:53 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 3 Apr 2020 08:14:53 -0500 (CDT)
Subject: [Rd] 
 [External] The finalizer of the externalPtr does not work when
 closing R?
In-Reply-To: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>
References: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2004030804160.3035@luke-Latitude-7480>

Use R_RegisterFinalizerEx in your C code. See

https://cran.r-project.org/doc/manuals/r-release/R-exts.html#External-pointers-and-weak-references

This still gives you only "best effort"; for anything stronger you
would need a different approach.

In general, finalizers should only be used as a backstop, not as a
primary resource management tool (in R or any other garbage-collected
language).

Memory leaks are not an issue -- unless you are doing very unusual
things your OS will reclaim memory resources used by your process when
it exits, cleanly or otherwise.

Best,

luke

On Fri, 3 Apr 2020, Wang Jiefei wrote:

> Hi all,
>
> I found that the finalizer of the externalPtr is not called when R is
> quitting. However, manually calling GC() works fine. This behavior is
> observed on devel R 2020-04-02 r78142 on Win and R 3.6.3 on Ubuntu.  I make
> a reproducible package here: https://github.com/Jiefei-Wang/example
>
> Here is the detail of how to reproduce the problem, I create a temporary
> file in the package root path and make an external pointer. The finalizer
> of the external pointer will delete the  temporary file when it is called.
> In the first round, I manually remove the external pointer from the global
> environment and call GC() to verify if the finalizer is programmed
> properly. The temporary file is deleted successfully. Then I create the
> file and the pointer again and close the R session without saving the
> global environment. Since the external pointer is removed when closing R,
> so the finalizer should be called in this procedure. However, the temp file
> still exists after closing the R session.
>
> Here is the test code(which can be found in inst/example/example.R)
>
> ## Create a temporary file
> tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
> tmpFile
> file.create(tmpFile)
> file.exists(tmpFile)
> ## Create an external pointer whose finalizer will delete
> ## the file when the variable is not in used
> x <- testPackage:::makeExtPtr(file.remove,tmpFile)
> ## GC is working fine
> rm(list="x")
> gc()
> file.exists(tmpFile)
>
> ## Create the temporary file again
> file.create(tmpFile)
> file.exists(tmpFile)
> x <- testPackage:::makeExtPtr(file.remove,tmpFile)
> ## Quit R session without explicitly cleaning the working space
> quit(save = "no")
>
>
> ##=====Open a new R session=======
> ## The temporary file still exist
> tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
> file.exists(tmpFile)
>
> Not sure if this behavior is designed on purpose, but it sounds wired to me
> and can cause memory leaking if not properly handled.
>
> Best,
> Jiefei
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @zwj|08 @end|ng |rom gm@||@com  Fri Apr  3 15:23:28 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Fri, 3 Apr 2020 21:23:28 +0800
Subject: [Rd] 
 [External] The finalizer of the externalPtr does not work when
 closing R?
In-Reply-To: <alpine.DEB.2.21.2004030804160.3035@luke-Latitude-7480>
References: <CAGiFhPP+RUJ9D8Dwr07ONFHSkWeVkmSUKVW1vo-QKvq18z6-ew@mail.gmail.com>
 <alpine.DEB.2.21.2004030804160.3035@luke-Latitude-7480>
Message-ID: <CAGiFhPPFHsy1FETrrcWe5RUNkTCchsDg=uZMKfszvHcvNd40rA@mail.gmail.com>

Thanks for all your guys responses! It is amazing to get so many answers in
a few minutes! My package needs to handle the shared memory so the
finalizer does cause memory leaking. The Ex version should be my solution
for that. Thanks for all your help.

Best
Jiefei


On Fri, Apr 3, 2020, 9:14 PM <luke-tierney at uiowa.edu> wrote:

> Use R_RegisterFinalizerEx in your C code. See
>
>
> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#External-pointers-and-weak-references
>
> This still gives you only "best effort"; for anything stronger you
> would need a different approach.
>
> In general, finalizers should only be used as a backstop, not as a
> primary resource management tool (in R or any other garbage-collected
> language).
>
> Memory leaks are not an issue -- unless you are doing very unusual
> things your OS will reclaim memory resources used by your process when
> it exits, cleanly or otherwise.
>
> Best,
>
> luke
>
> On Fri, 3 Apr 2020, Wang Jiefei wrote:
>
> > Hi all,
> >
> > I found that the finalizer of the externalPtr is not called when R is
> > quitting. However, manually calling GC() works fine. This behavior is
> > observed on devel R 2020-04-02 r78142 on Win and R 3.6.3 on Ubuntu.  I
> make
> > a reproducible package here: https://github.com/Jiefei-Wang/example
> >
> > Here is the detail of how to reproduce the problem, I create a temporary
> > file in the package root path and make an external pointer. The finalizer
> > of the external pointer will delete the  temporary file when it is
> called.
> > In the first round, I manually remove the external pointer from the
> global
> > environment and call GC() to verify if the finalizer is programmed
> > properly. The temporary file is deleted successfully. Then I create the
> > file and the pointer again and close the R session without saving the
> > global environment. Since the external pointer is removed when closing R,
> > so the finalizer should be called in this procedure. However, the temp
> file
> > still exists after closing the R session.
> >
> > Here is the test code(which can be found in inst/example/example.R)
> >
> > ## Create a temporary file
> > tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
> > tmpFile
> > file.create(tmpFile)
> > file.exists(tmpFile)
> > ## Create an external pointer whose finalizer will delete
> > ## the file when the variable is not in used
> > x <- testPackage:::makeExtPtr(file.remove,tmpFile)
> > ## GC is working fine
> > rm(list="x")
> > gc()
> > file.exists(tmpFile)
> >
> > ## Create the temporary file again
> > file.create(tmpFile)
> > file.exists(tmpFile)
> > x <- testPackage:::makeExtPtr(file.remove,tmpFile)
> > ## Quit R session without explicitly cleaning the working space
> > quit(save = "no")
> >
> >
> > ##=====Open a new R session=======
> > ## The temporary file still exist
> > tmpFile <- paste0(system.file(package = "testPackage"), "/tmp")
> > file.exists(tmpFile)
> >
> > Not sure if this behavior is designed on purpose, but it sounds wired to
> me
> > and can cause memory leaking if not properly handled.
> >
> > Best,
> > Jiefei
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Apr  4 11:49:56 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 4 Apr 2020 11:49:56 +0200
Subject: [Rd] Help useRs to use R's own Time/Date objects more efficiently
Message-ID: <24200.22596.187327.474564@stat.math.ethz.ch>

This is mostly a RFC  [but *not* about the many extra packages, please..]:

Noticing to my chagrin  how my students work in a project,
googling for R code and cut'n'pasting stuff together, accumulating
this and that package on the way  all just for simple daily time series
(though with partly missing parts),
using chron, zoo, lubridate, ...  all for things that are very
easy in base R *IF* you read help pages and start thinking on
your own (...), I've noted once more that the above "if" is a
very strong one, and seems to happen rarely nowadays by typical R users...
(yes, I stop whining for now).

In this case, I propose to slightly improve the situation ...
by adding a few more lines to one help page [[how could that
help in the age where "google"+"cut'n'paste" has replaced thinking ? .. ]] :

On R's own ?Dates  help page (and also on ?DateTimeClasses )
we have pointers, notably

See Also:

     ...............
     ...............
     
     'weekdays' for convenience extraction functions.

So people must find that and follow the pointer
(instead of installing one of the dozen helper packages).

Then on that page, one sees  weekdays(), months() .. julian()
in the usage ... which don't seem directly helpful for a person
who needs more.  If that person is diligent and patient (as good useRs are ;-),
she finds

   Note:

	Other components such as the day of the month or the year are very
	easy to compute: just use 'as.POSIXlt' and extract the relevant
	component.  Alternatively (especially if the components are
	desired as character strings), use 'strftime'.


But then, nowadays, the POSIXlt class is not so transparent to the
non-expert anymore (as it behaves very much like POSIXct, and
not like a list for good reasons) .. and so 97%  of R users will
not find this "very easy".

For this reason, I propose to at add the following to the
'Examples:' section of the help file ...
and I hope that also readers of  R-devel  who have not been
aware of how to do this nicely,  will now remember (or remember
where to look?).

I at least will tell my students in the future to use these or
write versions of these simple utility functions.


------------------------------------------------

## Show how easily you get month, day, year, day (of {month, week, yr}), ... :
## (remember to count from 0 (!): mon = 0..11, wday = 0..6,  etc !!)

##' Transform (Time-)Date vector  to  convenient data frame :
dt2df <- function(dt, dName = deparse(substitute(dt)), stringsAsFactors = FALSE) {
    DF <- as.data.frame(unclass(as.POSIXlt( dt )), stringsAsFactors=stringsAsFactors)
    `names<-`(cbind(dt, DF, deparse.level=0L), c(dName, names(DF)))
}
dt2df(.leap.seconds)    # date+time
dt2df(Sys.Date() + 0:9) # date

##' Even simpler:  Date -> Matrix:
d2mat <- function(x) simplify2array(unclass(as.POSIXlt(x)))
d2mat(seq(as.Date("2000-02-02"), by=1, length.out=30)) # has R 1.0.0's release date

------------------------------------------------------------

In the distant past / one of the last times I touched on people
using (base) R's  Date / Time-Date  objects, I had started
thinking if we should not provide some simple utilities to "base R"
(not in the 'base' pkg, but rather 'utils') for "extracting" from
{POSIX(ct), Date} objects ... and we may have discussed that
within R Core 20 years ago,  and had always thought that this
shouldn't be hard for useRs themselves to see how to do...

But then I see that "everybody" uses extension packages instead,
even in the many situations where there's no gain doing so, 
but rather increases the dependency-complexity of the data analysis
unnecessarily.

Martin Maechler
ETH Zurich  and   R Core Team.


From |uc@r @end|ng |rom |edor@project@org  Sat Apr  4 12:35:06 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sat, 4 Apr 2020 12:35:06 +0200
Subject: [Rd] 
 Help useRs to use R's own Time/Date objects more efficiently
In-Reply-To: <24200.22596.187327.474564@stat.math.ethz.ch>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
Message-ID: <CALEXWq14GMJQpa24447tnBFrE0pPi9=JQe=XDyK9A7E+9C+jaw@mail.gmail.com>

On Sat, 4 Apr 2020 at 11:51, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
> This is mostly a RFC  [but *not* about the many extra packages, please..]:
>
> Noticing to my chagrin  how my students work in a project,
> googling for R code and cut'n'pasting stuff together, accumulating
> this and that package on the way  all just for simple daily time series
> (though with partly missing parts),
> using chron, zoo, lubridate, ...  all for things that are very
> easy in base R *IF* you read help pages and start thinking on
> your own (...), I've noted once more that the above "if" is a
> very strong one, and seems to happen rarely nowadays by typical R users...
> (yes, I stop whining for now).

It's not my intention to sound harsh here, but just to provide
constructive criticism (I clarify this beforehand because, you know,
this is an email).

It's too easy to whine about this every now and then, and blame the
useRs for not being diligent enough, not patient enough and not
reading enough manual pages. But did you considered that maybe it's
the usability of this stuff in base R what leaves much to be desired,
and the lack of good and intuitive helpers what triggered the
development of so many related packages?

> In this case, I propose to slightly improve the situation ...
> by adding a few more lines to one help page [[how could that
> help in the age where "google"+"cut'n'paste" has replaced thinking ? .. ]] :

Google + cut'n'paste hasn't replaced thinking, but struggling. So no,
I don't think that more documentation (which I do think is already
great) improves the situation.

...snip...

> In the distant past / one of the last times I touched on people
> using (base) R's  Date / Time-Date  objects, I had started
> thinking if we should not provide some simple utilities to "base R"
> (not in the 'base' pkg, but rather 'utils') for "extracting" from
> {POSIX(ct), Date} objects ... and we may have discussed that
> within R Core 20 years ago,  and had always thought that this
> shouldn't be hard for useRs themselves to see how to do...

Never too late to change your mind.

> But then I see that "everybody" uses extension packages instead,
> even in the many situations where there's no gain doing so,
> but rather increases the dependency-complexity of the data analysis
> unnecessarily.

I do think there's gain. Again, it's not poor silly useRs not doing
their homework, it's a handful of developers that invested many many
hours of their time for years producing extension packages for a
functionality that is perfectly covered in base R. Maybe it's time to
think that it's not that well covered?

-- 
I?aki ?car


From pro|jcn@@h @end|ng |rom gm@||@com  Sat Apr  4 15:51:30 2020
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sat, 4 Apr 2020 09:51:30 -0400
Subject: [Rd] 
 Help useRs to use R's own Time/Date objects more efficiently
In-Reply-To: <24200.22596.187327.474564@stat.math.ethz.ch>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
Message-ID: <c5463cf5-2944-479e-3efc-5e08fc5bfefa@gmail.com>

As with many areas of R usage, my view is that the concern is one
of making it easier to find appropriate information quickly. The
difficulty is that different users have different needs. So if
one wants to know (most of) what is available, the Time Series
Task View is helpful. If one is a novice, it may now be rather
daunting, while I've found, as a long time user of different software,
that I have to dig to find what I need.

In optimization I have tried -- and have had several false starts --
to unify several packages. That could be helpful for time and date
functions.

Another possibility could be to put the "see" and "see also" information
at the TOP of the documentation rather than lower down, and also to
refer to Task Views and possibly other -- eventually R-project --
documentation objects. I happen to favour wiki-like approaches, but
there has not been much movement towards that yet. We R people are
quite strong individualists, but perhaps more team minded thinking
would help. Some of us are getting beyond our best-before date.

However, I support Martin's intent, and hope there will be attempts
in these directions.

Best,

John Nash


On 2020-04-04 5:49 a.m., Martin Maechler wrote:
> This is mostly a RFC  [but *not* about the many extra packages, please..]:
> 
> Noticing to my chagrin  how my students work in a project,
> googling for R code and cut'n'pasting stuff together, accumulating
> this and that package on the way  all just for simple daily time series
> (though with partly missing parts),
> using chron, zoo, lubridate, ...  all for things that are very
> easy in base R *IF* you read help pages and start thinking on
> your own (...), I've noted once more that the above "if" is a
> very strong one, and seems to happen rarely nowadays by typical R users...
> (yes, I stop whining for now).
> 
> In this case, I propose to slightly improve the situation ...
> by adding a few more lines to one help page [[how could that
> help in the age where "google"+"cut'n'paste" has replaced thinking ? .. ]] :
> 
> On R's own ?Dates  help page (and also on ?DateTimeClasses )
> we have pointers, notably
> 
> See Also:
> 
>      ...............
>      ...............
>      
>      'weekdays' for convenience extraction functions.
> 
> So people must find that and follow the pointer
> (instead of installing one of the dozen helper packages).
> 
> Then on that page, one sees  weekdays(), months() .. julian()
> in the usage ... which don't seem directly helpful for a person
> who needs more.  If that person is diligent and patient (as good useRs are ;-),
> she finds
> 
>    Note:
> 
> 	Other components such as the day of the month or the year are very
> 	easy to compute: just use 'as.POSIXlt' and extract the relevant
> 	component.  Alternatively (especially if the components are
> 	desired as character strings), use 'strftime'.
> 
> 
> But then, nowadays, the POSIXlt class is not so transparent to the
> non-expert anymore (as it behaves very much like POSIXct, and
> not like a list for good reasons) .. and so 97%  of R users will
> not find this "very easy".
> 
> For this reason, I propose to at add the following to the
> 'Examples:' section of the help file ...
> and I hope that also readers of  R-devel  who have not been
> aware of how to do this nicely,  will now remember (or remember
> where to look?).
> 
> I at least will tell my students in the future to use these or
> write versions of these simple utility functions.
> 
> 
> ------------------------------------------------
> 
> ## Show how easily you get month, day, year, day (of {month, week, yr}), ... :
> ## (remember to count from 0 (!): mon = 0..11, wday = 0..6,  etc !!)
> 
> ##' Transform (Time-)Date vector  to  convenient data frame :
> dt2df <- function(dt, dName = deparse(substitute(dt)), stringsAsFactors = FALSE) {
>     DF <- as.data.frame(unclass(as.POSIXlt( dt )), stringsAsFactors=stringsAsFactors)
>     `names<-`(cbind(dt, DF, deparse.level=0L), c(dName, names(DF)))
> }
> dt2df(.leap.seconds)    # date+time
> dt2df(Sys.Date() + 0:9) # date
> 
> ##' Even simpler:  Date -> Matrix:
> d2mat <- function(x) simplify2array(unclass(as.POSIXlt(x)))
> d2mat(seq(as.Date("2000-02-02"), by=1, length.out=30)) # has R 1.0.0's release date
> 
> ------------------------------------------------------------
> 
> In the distant past / one of the last times I touched on people
> using (base) R's  Date / Time-Date  objects, I had started
> thinking if we should not provide some simple utilities to "base R"
> (not in the 'base' pkg, but rather 'utils') for "extracting" from
> {POSIX(ct), Date} objects ... and we may have discussed that
> within R Core 20 years ago,  and had always thought that this
> shouldn't be hard for useRs themselves to see how to do...
> 
> But then I see that "everybody" uses extension packages instead,
> even in the many situations where there's no gain doing so, 
> but rather increases the dependency-complexity of the data analysis
> unnecessarily.
> 
> Martin Maechler
> ETH Zurich  and   R Core Team.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sat Apr  4 20:43:11 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sat, 4 Apr 2020 18:43:11 +0000 (UTC)
Subject: [Rd] Possible Bug In Validation of UTF-8 Sequences
References: <603726857.502720.1586025791655.ref@mail.yahoo.com>
Message-ID: <603726857.502720.1586025791655@mail.yahoo.com>

As per `?intToUtf8`, and in the comments to `valid_utf8`[1], R 
intends to prevent illegal UTF-8 such as UTF-8 encoded
UTF-16 surrogate pairs.? `R_nchar`, invoked via `base::nchar`,
explicitly validates UTF-8 strings[2], but allows the surrogate:

??? > Encoding('\ud800')
??? [1] "UTF-8"
??? > nchar('\ud800')? // should be an error
??? [1] 1

The problem manifests on systems where `char` is signed.? The logic
used to test for the forbidden sequences implicitly assumes that
`char` is unsigned[3]:

??? if (c == 0xe0 && (d & 0x20) == 0) return 1;
??? if (c == 0xed && d >= 0xa0) return 1;

Notice the `d >= 0xa0`.? On a system where `char` is signed this can
only ever be true if a byte has more than 8 bits, as otherwise the
maximum value of `d` is 0x7f because `d` is retrieved from a plain
`char` pointer[4] (d is `int`):

??? if (((d = *(++p)) & 0xc0) != 0x80) return 1;

Where `p` is defined as[5]:

???? const char *p;

In contrast `c` above is correctly cast to `unsigned char` prior to
use[8]:

???? c = (unsigned char)*p;

I attach a simple patch to address this.

I also include a patch to remove the handling of surrogates from
`R_nchar` as that should not longer be necessary, and additionally the
current handling appears incorrect.? AFAICT, the current handling
attempts to decode a surrogate pair by combining the high surrogate
with the same high surrogate, instead of the high surrogate with the
subsequent character that hopefully is the low surrogate[7].

Here is some code that could be added to regression tests:

??? surr_good <- '\ud840\udc00'??????????? # auto-converts to normal
??? surr_bad <- paste0('\ud840', '\udc00') # surrogates remain
??? good <- c('hello', 'world', surr_good, '\ud7ff', '\ue000', '\U0010ffff')
??? bad <- c(surr_bad, '\ud800', '\udfff', '\U00110000')

On R3.6.3:

??? nchar(good, allowNA=TRUE)
??? [1] 5 5 1 1 1 1
??? nchar(bad, allowNA=TRUE)
??? [1] 2 1 1 1

On R-devel (2020-03-31 r78116) w/ patch:

??? nchar(good, allowNA=TRUE)
??? [1] 5 5 1 1 1 1
??? nchar(bad, allowNA=TRUE)
??? [1] NA NA NA NA

I ran `make check-devel` successfully, although I did have to suppress
one PCRE test[9] that segfaults on my particular set-up, though that
segfaulted prior to my patch as well.

The patch does not prevent the creation of illegal UTF-8 strings,
although I imagine it would be straightforward to add checks to the
entry points into CHARSXPs if that were desired.

Finally, this signed char business hints at a potential broader issue.
If I understand correctly importing byte sequences with values greater
than 0x7f overflows the `char` buffers on systems with signed chars
and octet (or lesser) bytes, e.g. as in `do_readLines`[6] where an
integer procured via `fgetc` is subsequently stored in a `char`
buffer.? Obviously this hasn't mattered much to date, presumably
because the implementations R runs on define the `unsigned char` to
`signed char` conversion in such a way that the `signed char` to
`unsigned char` conversion restores the original value.? I don't know
if this is something explicitly checked for like the `int` == 32bits
assumption.

[1]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/valid_utf8.h#L61
[2]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/character.c#L148
[3]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/valid_utf8.h#L106
[4]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/valid_utf8.h#L84
[5]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/valid_utf8.h#L69
[6]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/connections.c#L3935
[7]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/character.c#L184
[8]: https://github.com/wch/r-source/blob/tags/R-3-6-3/src/main/valid_utf8.h#L73
[9]: https://github.com/wch/r-source/blob/tags/R-3-6-3/tests/PCRE.R#L16


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch_val_utf8.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200404/2bef12f7/attachment.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch_nchar.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200404/2bef12f7/attachment-0001.txt>

From @purd|e@@ @end|ng |rom gm@||@com  Sun Apr  5 22:57:21 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 6 Apr 2020 08:57:21 +1200
Subject: [Rd] 
 Help useRs to use R's own Time/Date objects more efficiently
In-Reply-To: <24200.22596.187327.474564@stat.math.ethz.ch>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
Message-ID: <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>

I think POSIXct and POSIXlt are badly-chosen names.
The name "POSIX" implies UNIX.
(i.e. XYZix operating system is mostly POSIX compliant... Woo-Hoo!).
My assumption is that most people modelling industrial/econometric
data etc, or data imported from databases, don't want system
references everywhere.

Historically, I've use the principle that:
If programming language A uses functionality from programming language
B, then bindings should be as close as possible to whatever is in
programming language B. Any additional functionality in programming
language A, should be distinct from the bindings.
R hasn't done this here, where POSIX-bindings have added in additional
R functionality and semantics.
Possibly introducing problems at an early stage.

The help file entitled DateTimeClasses, only covers a small subset of
information on date and time classes, with no obvious information
about how to construct date and time objects, except for what's in the
examples. The Date class has a similar problem, omitting information
about how to construct Date objects.

The "convenience extraction functions" aren't necessarily convenient
because they return text rather than integers, requiring many users to
still use the POSIXlt class.

I don't think your example is simple.
And I suspect it may discourage some people from using base packages.
Having opposite effect to what's intended.

It's probably too late to change the functions, but here's what I would suggest:

(1) Create a top-level help page with a title like "Date and Time
Classes" to give a brief but general overview. This would mean the
existing DateTimeClasses would need a new title.
(2) Create a another function the same as as.POSIXlt, but with a more
user-friendly name, which would increase readability.
(3) If help files for describing classes are separate from the help
files for creating/coercing objects (e.g. Date vs as.Date), then I
think they should cross reference each other in the description field,
not just the details or seealso fields.
(4) Reference relevant extraction/formatting functions, in most
date/time help files, even if there's some (small) duplication in the
help files.
(5) Focus on keeping the examples simple rather than comprehensive.

Expanding on suggestion (4), if you read the help file for as.Date
(which seems like an obvious starting point, because that's where I
started reading...), there's no reference at all to getting the month,
or the day of the week, etc. To make it worse it doesn't mention
coercion to POSIXlt objects either (but does mention coercion from
POSIXlt to Date objects). This could give the wrong impression to many
readers...

In it's defense, it does link to Date, which links to weekdays, which
links to as.POSIXlt.

Of course the note and seealso fields are near the bottom, and there's
an implicit (possibly false) assumption that the reader will read all
the help file*s*, and follow the links at the bottom, at least three
times over.
And a new-ish R user is likely to have to read more than four help files.
Unless they Google it, read stack exchange, or read some fancy
(apparently modern) textbook on data science...

Reinforcing the need for the help files to be clear about what the
functions (collectively) can do and specifically what
extraction/formatting functionality is available...

My guess is the that most common tasks with date and time objects are:
(1) Reading a character vector representing dates/times.
(2) Formatting a date/time (i.e. Object to character vector, or
character vector to another character vector).
(3) Extracting information such as month, weekday, etc, either as an
integer or as text.

So, I in short, these should be easy (to do, and find out how to do)...


On Sat, Apr 4, 2020 at 10:51 PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> This is mostly a RFC  [but *not* about the many extra packages, please..]:
>
> Noticing to my chagrin  how my students work in a project,
> googling for R code and cut'n'pasting stuff together, accumulating
> this and that package on the way  all just for simple daily time series
> (though with partly missing parts),
> using chron, zoo, lubridate, ...  all for things that are very
> easy in base R *IF* you read help pages and start thinking on
> your own (...), I've noted once more that the above "if" is a
> very strong one, and seems to happen rarely nowadays by typical R users...
> (yes, I stop whining for now).
>
> In this case, I propose to slightly improve the situation ...
> by adding a few more lines to one help page [[how could that
> help in the age where "google"+"cut'n'paste" has replaced thinking ? .. ]] :
>
> On R's own ?Dates  help page (and also on ?DateTimeClasses )
> we have pointers, notably
>
> See Also:
>
>      ...............
>      ...............
>
>      'weekdays' for convenience extraction functions.
>
> So people must find that and follow the pointer
> (instead of installing one of the dozen helper packages).
>
> Then on that page, one sees  weekdays(), months() .. julian()
> in the usage ... which don't seem directly helpful for a person
> who needs more.  If that person is diligent and patient (as good useRs are ;-),
> she finds
>
>    Note:
>
>         Other components such as the day of the month or the year are very
>         easy to compute: just use 'as.POSIXlt' and extract the relevant
>         component.  Alternatively (especially if the components are
>         desired as character strings), use 'strftime'.
>
>
> But then, nowadays, the POSIXlt class is not so transparent to the
> non-expert anymore (as it behaves very much like POSIXct, and
> not like a list for good reasons) .. and so 97%  of R users will
> not find this "very easy".
>
> For this reason, I propose to at add the following to the
> 'Examples:' section of the help file ...
> and I hope that also readers of  R-devel  who have not been
> aware of how to do this nicely,  will now remember (or remember
> where to look?).
>
> I at least will tell my students in the future to use these or
> write versions of these simple utility functions.
>
>
> ------------------------------------------------
>
> ## Show how easily you get month, day, year, day (of {month, week, yr}), ... :
> ## (remember to count from 0 (!): mon = 0..11, wday = 0..6,  etc !!)
>
> ##' Transform (Time-)Date vector  to  convenient data frame :
> dt2df <- function(dt, dName = deparse(substitute(dt)), stringsAsFactors = FALSE) {
>     DF <- as.data.frame(unclass(as.POSIXlt( dt )), stringsAsFactors=stringsAsFactors)
>     `names<-`(cbind(dt, DF, deparse.level=0L), c(dName, names(DF)))
> }
> dt2df(.leap.seconds)    # date+time
> dt2df(Sys.Date() + 0:9) # date
>
> ##' Even simpler:  Date -> Matrix:
> d2mat <- function(x) simplify2array(unclass(as.POSIXlt(x)))
> d2mat(seq(as.Date("2000-02-02"), by=1, length.out=30)) # has R 1.0.0's release date
>
> ------------------------------------------------------------
>
> In the distant past / one of the last times I touched on people
> using (base) R's  Date / Time-Date  objects, I had started
> thinking if we should not provide some simple utilities to "base R"
> (not in the 'base' pkg, but rather 'utils') for "extracting" from
> {POSIX(ct), Date} objects ... and we may have discussed that
> within R Core 20 years ago,  and had always thought that this
> shouldn't be hard for useRs themselves to see how to do...
>
> But then I see that "everybody" uses extension packages instead,
> even in the many situations where there's no gain doing so,
> but rather increases the dependency-complexity of the data analysis
> unnecessarily.
>
> Martin Maechler
> ETH Zurich  and   R Core Team.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@rk|eed@2 @end|ng |rom gm@||@com  Sun Apr  5 23:08:39 2020
From: m@rk|eed@2 @end|ng |rom gm@||@com (Mark Leeds)
Date: Sun, 5 Apr 2020 17:08:39 -0400
Subject: [Rd] 
 Help useRs to use R's own Time/Date objects more efficiently
In-Reply-To: <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
 <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>
Message-ID: <CAHz+bWYAxw2Zt821p94=MJbBeESmDPqq0RnGgxe13szicpMwqA@mail.gmail.com>

Hi All: I've been following this thread and just want to add one pointer.

For those who aren't interested in using new packages that try to make
dates-times easier but also find the
base R tools confusing, below is link to an extremely well written document
from over 15 years ago. It's probably
already known by quite a few people but, for people with less than 10 years
of R experience it could very well be unknown.
It's the clearest explanation of base R tools  for dates and times ( note:
one needs to consider chron a
base package but who's counting )  that I know of.

https://www.researchgate.net/publication/229087103_R_Help_Desk_Date_and_time_classes_in_R






On Sun, Apr 5, 2020 at 4:58 PM Abby Spurdle <spurdle.a at gmail.com> wrote:

> I think POSIXct and POSIXlt are badly-chosen names.
> The name "POSIX" implies UNIX.
> (i.e. XYZix operating system is mostly POSIX compliant... Woo-Hoo!).
> My assumption is that most people modelling industrial/econometric
> data etc, or data imported from databases, don't want system
> references everywhere.
>
> Historically, I've use the principle that:
> If programming language A uses functionality from programming language
> B, then bindings should be as close as possible to whatever is in
> programming language B. Any additional functionality in programming
> language A, should be distinct from the bindings.
> R hasn't done this here, where POSIX-bindings have added in additional
> R functionality and semantics.
> Possibly introducing problems at an early stage.
>
> The help file entitled DateTimeClasses, only covers a small subset of
> information on date and time classes, with no obvious information
> about how to construct date and time objects, except for what's in the
> examples. The Date class has a similar problem, omitting information
> about how to construct Date objects.
>
> The "convenience extraction functions" aren't necessarily convenient
> because they return text rather than integers, requiring many users to
> still use the POSIXlt class.
>
> I don't think your example is simple.
> And I suspect it may discourage some people from using base packages.
> Having opposite effect to what's intended.
>
> It's probably too late to change the functions, but here's what I would
> suggest:
>
> (1) Create a top-level help page with a title like "Date and Time
> Classes" to give a brief but general overview. This would mean the
> existing DateTimeClasses would need a new title.
> (2) Create a another function the same as as.POSIXlt, but with a more
> user-friendly name, which would increase readability.
> (3) If help files for describing classes are separate from the help
> files for creating/coercing objects (e.g. Date vs as.Date), then I
> think they should cross reference each other in the description field,
> not just the details or seealso fields.
> (4) Reference relevant extraction/formatting functions, in most
> date/time help files, even if there's some (small) duplication in the
> help files.
> (5) Focus on keeping the examples simple rather than comprehensive.
>
> Expanding on suggestion (4), if you read the help file for as.Date
> (which seems like an obvious starting point, because that's where I
> started reading...), there's no reference at all to getting the month,
> or the day of the week, etc. To make it worse it doesn't mention
> coercion to POSIXlt objects either (but does mention coercion from
> POSIXlt to Date objects). This could give the wrong impression to many
> readers...
>
> In it's defense, it does link to Date, which links to weekdays, which
> links to as.POSIXlt.
>
> Of course the note and seealso fields are near the bottom, and there's
> an implicit (possibly false) assumption that the reader will read all
> the help file*s*, and follow the links at the bottom, at least three
> times over.
> And a new-ish R user is likely to have to read more than four help files.
> Unless they Google it, read stack exchange, or read some fancy
> (apparently modern) textbook on data science...
>
> Reinforcing the need for the help files to be clear about what the
> functions (collectively) can do and specifically what
> extraction/formatting functionality is available...
>
> My guess is the that most common tasks with date and time objects are:
> (1) Reading a character vector representing dates/times.
> (2) Formatting a date/time (i.e. Object to character vector, or
> character vector to another character vector).
> (3) Extracting information such as month, weekday, etc, either as an
> integer or as text.
>
> So, I in short, these should be easy (to do, and find out how to do)...
>
>
> On Sat, Apr 4, 2020 at 10:51 PM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
> >
> > This is mostly a RFC  [but *not* about the many extra packages,
> please..]:
> >
> > Noticing to my chagrin  how my students work in a project,
> > googling for R code and cut'n'pasting stuff together, accumulating
> > this and that package on the way  all just for simple daily time series
> > (though with partly missing parts),
> > using chron, zoo, lubridate, ...  all for things that are very
> > easy in base R *IF* you read help pages and start thinking on
> > your own (...), I've noted once more that the above "if" is a
> > very strong one, and seems to happen rarely nowadays by typical R
> users...
> > (yes, I stop whining for now).
> >
> > In this case, I propose to slightly improve the situation ...
> > by adding a few more lines to one help page [[how could that
> > help in the age where "google"+"cut'n'paste" has replaced thinking ? ..
> ]] :
> >
> > On R's own ?Dates  help page (and also on ?DateTimeClasses )
> > we have pointers, notably
> >
> > See Also:
> >
> >      ...............
> >      ...............
> >
> >      'weekdays' for convenience extraction functions.
> >
> > So people must find that and follow the pointer
> > (instead of installing one of the dozen helper packages).
> >
> > Then on that page, one sees  weekdays(), months() .. julian()
> > in the usage ... which don't seem directly helpful for a person
> > who needs more.  If that person is diligent and patient (as good useRs
> are ;-),
> > she finds
> >
> >    Note:
> >
> >         Other components such as the day of the month or the year are
> very
> >         easy to compute: just use 'as.POSIXlt' and extract the relevant
> >         component.  Alternatively (especially if the components are
> >         desired as character strings), use 'strftime'.
> >
> >
> > But then, nowadays, the POSIXlt class is not so transparent to the
> > non-expert anymore (as it behaves very much like POSIXct, and
> > not like a list for good reasons) .. and so 97%  of R users will
> > not find this "very easy".
> >
> > For this reason, I propose to at add the following to the
> > 'Examples:' section of the help file ...
> > and I hope that also readers of  R-devel  who have not been
> > aware of how to do this nicely,  will now remember (or remember
> > where to look?).
> >
> > I at least will tell my students in the future to use these or
> > write versions of these simple utility functions.
> >
> >
> > ------------------------------------------------
> >
> > ## Show how easily you get month, day, year, day (of {month, week, yr}),
> ... :
> > ## (remember to count from 0 (!): mon = 0..11, wday = 0..6,  etc !!)
> >
> > ##' Transform (Time-)Date vector  to  convenient data frame :
> > dt2df <- function(dt, dName = deparse(substitute(dt)), stringsAsFactors
> = FALSE) {
> >     DF <- as.data.frame(unclass(as.POSIXlt( dt )),
> stringsAsFactors=stringsAsFactors)
> >     `names<-`(cbind(dt, DF, deparse.level=0L), c(dName, names(DF)))
> > }
> > dt2df(.leap.seconds)    # date+time
> > dt2df(Sys.Date() + 0:9) # date
> >
> > ##' Even simpler:  Date -> Matrix:
> > d2mat <- function(x) simplify2array(unclass(as.POSIXlt(x)))
> > d2mat(seq(as.Date("2000-02-02"), by=1, length.out=30)) # has R 1.0.0's
> release date
> >
> > ------------------------------------------------------------
> >
> > In the distant past / one of the last times I touched on people
> > using (base) R's  Date / Time-Date  objects, I had started
> > thinking if we should not provide some simple utilities to "base R"
> > (not in the 'base' pkg, but rather 'utils') for "extracting" from
> > {POSIX(ct), Date} objects ... and we may have discussed that
> > within R Core 20 years ago,  and had always thought that this
> > shouldn't be hard for useRs themselves to see how to do...
> >
> > But then I see that "everybody" uses extension packages instead,
> > even in the many situations where there's no gain doing so,
> > but rather increases the dependency-complexity of the data analysis
> > unnecessarily.
> >
> > Martin Maechler
> > ETH Zurich  and   R Core Team.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Mon Apr  6 03:13:30 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 6 Apr 2020 13:13:30 +1200
Subject: [Rd] 
 Help useRs to use R's own Time/Date objects more efficiently
In-Reply-To: <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
 <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>
Message-ID: <CAB8pepyoxxxk=AhrTcJ4diUede__hq_B4wD90x990y+Bivvnmg@mail.gmail.com>

> (1) Create a top-level help page with a title like "Date and Time
> Classes" to give a brief but general overview. This would mean the
> existing DateTimeClasses would need a new title.

I wanted to modify my first suggestion.
Perhaps a better idea would be to reference an external document
giving an overview of the subject.
I couldn't find a discussion of POSIXct/POSIXlt objects in the R
manuals (unless I missed it somewhere), so perhaps "An Introduction to
R" could be updated to include this subject, and then the help files
could reference that?

Mark Leeds has already mentioned one possible (unofficial) source.
And I suspect that there are others.


From iuke-tier@ey m@iii@g oii uiow@@edu  Mon Apr  6 03:36:25 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 5 Apr 2020 20:36:25 -0500 (CDT)
Subject: [Rd] [External] Re: Help useRs to use R's own Time/Date objects
 more efficiently
In-Reply-To: <CAB8pepyoxxxk=AhrTcJ4diUede__hq_B4wD90x990y+Bivvnmg@mail.gmail.com>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
 <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>
 <CAB8pepyoxxxk=AhrTcJ4diUede__hq_B4wD90x990y+Bivvnmg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2004052035200.3035@luke-Latitude-7480>

On Mon, 6 Apr 2020, Abby Spurdle wrote:

>> (1) Create a top-level help page with a title like "Date and Time
>> Classes" to give a brief but general overview. This would mean the
>> existing DateTimeClasses would need a new title.
>
> I wanted to modify my first suggestion.
> Perhaps a better idea would be to reference an external document
> giving an overview of the subject.
> I couldn't find a discussion of POSIXct/POSIXlt objects in the R
> manuals (unless I missed it somewhere), so perhaps "An Introduction to
> R" could be updated to include this subject, and then the help files
> could reference that?
>
> Mark Leeds has already mentioned one possible (unofficial) source.
> And I suspect that there are others.

Not entirely unofficial as it waw published in R News:

@article{grothendieck2004r,
   title={R help desk: Date and time classes in R},
   author={Grothendieck, Gabor and Petzoldt, Thomas},
   journal={R News},
   volume={4},
   number={1},
   pages={29--32},
   year={2004}
}

Best,

luke

>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Mon Apr  6 04:59:19 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Mon, 6 Apr 2020 14:59:19 +1200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
Message-ID: <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>

Hi

The R branch ...

https://svn.r-project.org/R/branches/R-symfam/

... is now set up so that it works "out of the box" on Fedora by setting 
the default to be 'symbolfamily=cairoSymbolFont(family, usePUA=FALSE)' 
when grSoftVersion()["pango"] is greater than "1.44".

This means that on Fedora 31 (at least on the Docker container I am 
testing on) "sans"->"NimubusSans" is used as the symbol font by default 
and R converts Adobe Symbol Encoding code points to non-PUA UTF8 code 
points.  This is not the prettiest result, but it is a lot better than 
the page full of missing glyphs that we had.

The default on less "bleeding edge" systems, e.g., my Ubuntu 18.04, 
remains 'symbolfamily="Symbol"'.

The default on other platforms is supposed to be the same as it was, but 
I need help to confirm that.  I have set up a github repo ...

https://github.com/pmur002/R-symfam-testing

... that describes how to test this on macOS and Windows if anyone has 
time to do so.

I will start trying to set up a Windows test unless someone beats me to it.

Paul

On 30/03/20 3:24 pm, Paul Murrell wrote:
> Hi
> 
> I have created an R branch that contains a potential fix ...
> 
> https://svn.r-project.org/R/branches/R-symfam/
> 
> This allows, for example, ...
> 
> cairo_pdf(symbolfamily="OpenSymbol")
> 
> ... to specify that the OpenSymbol family should be used as the "symbol" 
> font (e.g., for "plotmath") in R.
> 
> This is just a separate branch for now because, while I have tested it 
> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows 
> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel at 
> this stage of the release process for R 4.0.0.
> 
> The attached file contains at least an outline of steps required to do a 
> minimal test if anyone wants to try the fix on Linux.
> 
> cc'ing Simon and Jeroen in case they are able to help with checking that 
> this builds and works on Mac and/or Windows.
> 
> NOTEs:
> - 'symbolfamily' can only be specified when a graphics device is opened, 
> and it is then fixed for that device.
> - on Windows, for cairo-based devices, the "symbol" font is still 
> hard-coded as "Standard Symbols L"
> 
> Paul
> 
> On 30/03/20 8:15 am, Paul Murrell wrote:
>> Hi
>>
>> Thanks for your input on this I?aki and Nicolas.
>>
>> I am starting testing an R fix for this problem today.
>>
>> As suggested, the plan is to allow the R user to specify a font family 
>> other than "symbol" for plotmath output (or, more generally, in R 
>> parlance, for 'font=5' or 'fontface=5') on a Cairo-based graphics device.
>>
>> Paul
>>
>>
>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>>> <nicolas.mailhot at laposte.net> wrote:
>>>>
>>>> <snip>
>>>>
>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol? font
>>>> family name in its default conf. Linux systems are UTF-8 by default for
>>>> ~20 years now, they don?t need the forcing of magic font families to
>>>> handle symbols not present in the 8-bit legacy Windows encodings.
>>>>
>>>> The actual effect of this conf is not the selection of font files with
>>>> special and unusual symbols. It is to priorize fonts that match the
>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>>>> systems, because no one has needed to bother with them since Linux
>>>> switched to UTF-8 last millenium.
>>>>
>>>> Just stop using ?Symbol? in R and things will work a lot better.
>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>>>> *cares* about this legacy Windows-specific stuff.
>>>
>>> So, in the light of Nicolas' input (thanks!), I think that font
>>> selection should be fixed upstream in R. I'd be happy to put all this
>>> together in R's bugzilla, but I don't have an account. Could someone
>>> please invite me?
>>>
>>> I?aki
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From m@rk|eed@2 @end|ng |rom gm@||@com  Mon Apr  6 05:12:43 2020
From: m@rk|eed@2 @end|ng |rom gm@||@com (Mark Leeds)
Date: Sun, 5 Apr 2020 23:12:43 -0400
Subject: [Rd] [External] Re: Help useRs to use R's own Time/Date objects
 more efficiently
In-Reply-To: <alpine.DEB.2.21.2004052035200.3035@luke-Latitude-7480>
References: <24200.22596.187327.474564@stat.math.ethz.ch>
 <CAB8pepzAzCrg0yc3d2H_pN9Lc+6TQGLtjUGLY63QDC_iCeDZyw@mail.gmail.com>
 <CAB8pepyoxxxk=AhrTcJ4diUede__hq_B4wD90x990y+Bivvnmg@mail.gmail.com>
 <alpine.DEB.2.21.2004052035200.3035@luke-Latitude-7480>
Message-ID: <CAHz+bWZ=FVfJuxaZjefpY3oB8omuea5cxwMGBdxaCpLHzduEbg@mail.gmail.com>

I should have mentioned that it was in R-news. My mistake. Thanks Luke for
clarification.



On Sun, Apr 5, 2020 at 9:36 PM <luke-tierney at uiowa.edu> wrote:

> On Mon, 6 Apr 2020, Abby Spurdle wrote:
>
> >> (1) Create a top-level help page with a title like "Date and Time
> >> Classes" to give a brief but general overview. This would mean the
> >> existing DateTimeClasses would need a new title.
> >
> > I wanted to modify my first suggestion.
> > Perhaps a better idea would be to reference an external document
> > giving an overview of the subject.
> > I couldn't find a discussion of POSIXct/POSIXlt objects in the R
> > manuals (unless I missed it somewhere), so perhaps "An Introduction to
> > R" could be updated to include this subject, and then the help files
> > could reference that?
> >
> > Mark Leeds has already mentioned one possible (unofficial) source.
> > And I suspect that there are others.
>
> Not entirely unofficial as it waw published in R News:
>
> @article{grothendieck2004r,
>    title={R help desk: Date and time classes in R},
>    author={Grothendieck, Gabor and Petzoldt, Thomas},
>    journal={R News},
>    volume={4},
>    number={1},
>    pages={29--32},
>    year={2004}
> }
>
> Best,
>
> luke
>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Apr  6 09:15:20 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 6 Apr 2020 08:15:20 +0100
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
Message-ID: <0f0d1bf8-a662-cbee-12a9-8f106fc306f4@stats.ox.ac.uk>

On 02/04/2020 05:35, Kevin Ushey wrote:
> Hello,
> 
> Has a decision been made yet as to whether R 4.0.0 on Windows is going
> to be built using the new gcc8 toolchain (described at
> https://cran.r-project.org/bin/windows/testing/rtools40.html)?

Short answer: 'no'.

>>From the sidelines, I can see that the toolchain is being used to
> build and test packages on CRAN; if there are any remaining issues
> that I can help to try and run down (either in R or any CRAN packages)
> I'd be happy to try and help.

It is still under consideration, but resource constraints are biting 
hard as people's lives get more complicated.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From g@bembecker @end|ng |rom gm@||@com  Mon Apr  6 09:39:21 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 6 Apr 2020 00:39:21 -0700
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
Message-ID: <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>

Hi Kevin,

On Wed, Apr 1, 2020 at 9:36 PM Kevin Ushey <kevinushey at gmail.com> wrote:

> Hello,
>
> FWIW, I'm excited at the prospect at seeing a new toolchain for
> Windows, since it would imply support for C++17 and so it would become
> easier for CRAN packages to depend on the newer C++ standard.
>

One thing to keep in mind (having been the R installation owner in such a
place for multiple years) is that many coproprate or otherwise controlled
compute environments may not have access to a c++17 compiler on their
servers so making it easy for packages to rely on that is not purely
beneficial to all parts of the R community. Not saying that should heavily
inform this decision, just wanted to throw that out there since the topic
came up. Personally if R packages are making the switch all the way  up to
17 this soon I have to say i'm glad I got out of the R administration game.

I don't have anything to add about the toolchain update discussions ,
though from what Prof Ripley said I guess they are ongoing.

~G

>
> Thanks,
> Kevin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Mon Apr  6 10:21:30 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 6 Apr 2020 10:21:30 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
Message-ID: <CALEXWq18u1JeJnDBba5F1XHsGvah+SPxbmgjA7=489nqGXG_mA@mail.gmail.com>

On Mon, 6 Apr 2020 at 04:59, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>
> Hi
>
> The R branch ...
>
> https://svn.r-project.org/R/branches/R-symfam/
>
> ... is now set up so that it works "out of the box" on Fedora by setting
> the default to be 'symbolfamily=cairoSymbolFont(family, usePUA=FALSE)'
> when grSoftVersion()["pango"] is greater than "1.44".

That is awesome, thanks! Will you port this to the R-3-6-branch?

-- 
I?aki ?car


From jeroen @end|ng |rom berke|ey@edu  Mon Apr  6 13:30:16 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Mon, 6 Apr 2020 13:30:16 +0200
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <0f0d1bf8-a662-cbee-12a9-8f106fc306f4@stats.ox.ac.uk>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <0f0d1bf8-a662-cbee-12a9-8f106fc306f4@stats.ox.ac.uk>
Message-ID: <CABFfbXsjnz6PVpuHOHF0czXYT2h=wdf4U19CMHXBREDVzS8GHw@mail.gmail.com>

On Mon, Apr 6, 2020 at 9:15 AM Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>
> On 02/04/2020 05:35, Kevin Ushey wrote:
> > Hello,
> >
> > Has a decision been made yet as to whether R 4.0.0 on Windows is going
> > to be built using the new gcc8 toolchain (described at
> > https://cran.r-project.org/bin/windows/testing/rtools40.html)?
>
> Short answer: 'no'.
>
> >>From the sidelines, I can see that the toolchain is being used to
> > build and test packages on CRAN; if there are any remaining issues
> > that I can help to try and run down (either in R or any CRAN packages)
> > I'd be happy to try and help.
>
> It is still under consideration, but resource constraints are biting
> hard as people's lives get more complicated.

Given the amount of work that has gone into this and the importance of
an up-to-date toolchain for maintaining well-functioning and current
system libraries and R packages, I think it should be considered to
delay the R 4.0 release over this until everyone is ready.


From jeroen @end|ng |rom berke|ey@edu  Mon Apr  6 14:38:47 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Mon, 6 Apr 2020 14:38:47 +0200
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
Message-ID: <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>

On Mon, Apr 6, 2020 at 9:39 AM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Hi Kevin,
>
> On Wed, Apr 1, 2020 at 9:36 PM Kevin Ushey <kevinushey at gmail.com> wrote:
>
> > Hello,
> >
> > FWIW, I'm excited at the prospect at seeing a new toolchain for
> > Windows, since it would imply support for C++17 and so it would become
> > easier for CRAN packages to depend on the newer C++ standard.
> >
>
> One thing to keep in mind (having been the R installation owner in such a
> place for multiple years) is that many coproprate or otherwise controlled
> compute environments may not have access to a c++17 compiler on their
> servers so making it easy for packages to rely on that is not purely
> beneficial to all parts of the R community.

No, you're missing an important point here. On Windows, the toolchain
version is tied to the version of R and we try to keep supporting at
least one or two previous versions of R. So this means we always need
to support the legacy toolchain for a while as well.

Hence if we switch Windows to gcc-8 for R 4.0, we still rely on
gcc-4.9 for continued support of R 3.3-3.6. This lag is what is making
the maintenance of windows system libraries painful, and why we need
to plan ahead. This is different from Linux where version of the
compiler is given by the OS and not tied to the version of R.

If we would miss the boat again, and R 4.0 on Windows would stick with
gcc-49, this means we need to keep supporting gcc-49 as long as we
want to support R-4.0, which is at least 2022 or 2023. This would be
pretty bad. Even currently the latest versions of important system
libraries used by R packages (e.g. the gdal stack) require recent
compilers and cannot be built anymore with gcc-49. As more C++
projects are adopting C++14/17, we can no longer update these system
libraries, missing out on all upstream fixes and advances. This would
seriously decrement the quality of the R ecosystem.


From g@bembecker @end|ng |rom gm@||@com  Mon Apr  6 19:23:39 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 6 Apr 2020 10:23:39 -0700
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
Message-ID: <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>

Jeroen,

Sorry, I was unclear. I'm not arguing against switching tot the new windows
tool chain. Without being involved or knowing the details  of any
remaining difficulties, I am de facto for that.

I was specifically responding to the prospect of R packages moving to
directly rely on c++17 this quickly, which Kevin brought up. R itself
obviously won't be relying on c++17 since there is no c++ code in it at all
I believe.

Best,
~G

On Mon, Apr 6, 2020 at 5:38 AM Jeroen Ooms <jeroen at berkeley.edu> wrote:

> On Mon, Apr 6, 2020 at 9:39 AM Gabriel Becker <gabembecker at gmail.com>
> wrote:
> >
> > Hi Kevin,
> >
> > On Wed, Apr 1, 2020 at 9:36 PM Kevin Ushey <kevinushey at gmail.com> wrote:
> >
> > > Hello,
> > >
> > > FWIW, I'm excited at the prospect at seeing a new toolchain for
> > > Windows, since it would imply support for C++17 and so it would become
> > > easier for CRAN packages to depend on the newer C++ standard.
> > >
> >
> > One thing to keep in mind (having been the R installation owner in such a
> > place for multiple years) is that many coproprate or otherwise controlled
> > compute environments may not have access to a c++17 compiler on their
> > servers so making it easy for packages to rely on that is not purely
> > beneficial to all parts of the R community.
>
> No, you're missing an important point here. On Windows, the toolchain
> version is tied to the version of R and we try to keep supporting at
> least one or two previous versions of R. So this means we always need
> to support the legacy toolchain for a while as well.
>
> Hence if we switch Windows to gcc-8 for R 4.0, we still rely on
> gcc-4.9 for continued support of R 3.3-3.6. This lag is what is making
> the maintenance of windows system libraries painful, and why we need
> to plan ahead. This is different from Linux where version of the
> compiler is given by the OS and not tied to the version of R.
>
> If we would miss the boat again, and R 4.0 on Windows would stick with
> gcc-49, this means we need to keep supporting gcc-49 as long as we
> want to support R-4.0, which is at least 2022 or 2023. This would be
> pretty bad. Even currently the latest versions of important system
> libraries used by R packages (e.g. the gdal stack) require recent
> compilers and cannot be built anymore with gcc-49. As more C++
> projects are adopting C++14/17, we can no longer update these system
> libraries, missing out on all upstream fixes and advances. This would
> seriously decrement the quality of the R ecosystem.
>

	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Mon Apr  6 22:30:37 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 7 Apr 2020 08:30:37 +1200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CALEXWq18u1JeJnDBba5F1XHsGvah+SPxbmgjA7=489nqGXG_mA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <CALEXWq18u1JeJnDBba5F1XHsGvah+SPxbmgjA7=489nqGXG_mA@mail.gmail.com>
Message-ID: <9644232c-d4a4-5b99-3d16-62f062f79567@stat.auckland.ac.nz>



On 6/04/20 8:21 pm, I?aki Ucar wrote:
> On Mon, 6 Apr 2020 at 04:59, Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>
>> Hi
>>
>> The R branch ...
>>
>> https://svn.r-project.org/R/branches/R-symfam/
>>
>> ... is now set up so that it works "out of the box" on Fedora by setting
>> the default to be 'symbolfamily=cairoSymbolFont(family, usePUA=FALSE)'
>> when grSoftVersion()["pango"] is greater than "1.44".
> 
> That is awesome, thanks! Will you port this to the R-3-6-branch?

I'll be very pleased if I can get this merged in time for R 4.0.0.

I am not sure if there will be any further patch releases in the R 3.6 
series.  That would require wider discussion within R-core.
Paul
-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Tue Apr  7 09:19:03 2020
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Tue, 7 Apr 2020 09:19:03 +0200
Subject: [Rd] RIOT 2020
In-Reply-To: <c5c63474-132c-32c3-905a-c53ab9782552@oracle.com>
References: <c5c63474-132c-32c3-905a-c53ab9782552@oracle.com>
Message-ID: <113d21a4-abe0-dd39-317d-42cf1864502b@oracle.com>

After carefully considering the current situation regarding COVID-19, we 
decided to cancel this year's RIOT workshop.

Best regards,
Stepan

On 25. 02. 20 17:38, Stepan wrote:
> I hope you don?t mind us using this mailing list for a small 
> advertisement, but we think it is most relevant for this group:
> 
> We'd like to invite you to RIOT 2020 - the 5rd workshop on R 
> Implementation, Optimization and Tooling [1]. It will take place 
> co-located with, and during, useR! 2020 in St. Louis on July 8th. RIOT 
> is an excellent venue for deep technical discussions about R 
> implementations, tools, optimizations and R extension, and will be very 
> interesting for anyone interested in what?s under the hood of R.
> 
> Regards,
> Stepan Sindelar, Lukas Stadler (Oracle Labs), Jan Vitek (Northeastern), 
> Alexander Bertram (BeDataDriven)
> 
> [1] 
> http://riotworkshop.github.io 
>


From @@mue|@gr@nje@ud @end|ng |rom |n@erm@|r  Tue Apr  7 13:35:48 2020
From: @@mue|@gr@nje@ud @end|ng |rom |n@erm@|r (Samuel Granjeaud IR/Inserm)
Date: Tue, 07 Apr 2020 11:35:48 +0000
Subject: [Rd] Hard memory limit of 16GB under Windows?
Message-ID: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>

Hi,
I am not not sure whether this topic belongs to this mail list, but I 
feel the subscribers here should be the right audience.
I noticed that the memory limit reported under Windows is 16 GB. I am 
wondering how to increase it. I didn't found anything in Rprofile.site 
nor .Rprofile. Is this limit hard coded at compilation?
Best,
Samuel
	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Apr  7 14:24:13 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 7 Apr 2020 14:24:13 +0200
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
Message-ID: <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>

Hi Samuel,

could you please provide more information? Where do you see the limit 
reported or how did you trigger it, what version of Windows do you have, 
are you using 64-bit build of R (sessionInfo())

Please check help("Memory-limits") and section 8 of R Admin manual

Best,
Tomas

On 4/7/20 1:35 PM, Samuel Granjeaud IR/Inserm wrote:
> Hi,
> I am not not sure whether this topic belongs to this mail list, but I
> feel the subscribers here should be the right audience.
> I noticed that the memory limit reported under Windows is 16 GB. I am
> wondering how to increase it. I didn't found anything in Rprofile.site
> nor .Rprofile. Is this limit hard coded at compilation?
> Best,
> Samuel
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @@mue|@gr@nje@ud @end|ng |rom |n@erm@|r  Tue Apr  7 15:57:48 2020
From: @@mue|@gr@nje@ud @end|ng |rom |n@erm@|r (Samuel Granjeaud IR/Inserm)
Date: Tue, 07 Apr 2020 13:57:48 +0000
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
 <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
Message-ID: <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>

Hi Tomas,

Many thanks for your answer.

Here is a copy of a fresh session under RStudio, and after a copy under 
Rgui.
Strangely enough the result of memory.limit() is not the same. Without 
your question I would not have looked to RGui, being used to work with 
RStudio.

The value under RGui sounds to correspond to the total RAM of the 
computer. It makes me noticing that the value is in MB.

The value under Rstudio was so huge (1.759219e+13) that I just 
interpreted it as GB. But I was totally wrong. So in fact I don't know 
what it refers to. The documentation says "For a 64-bit versions of R 
under 64-bit Windows the limit is currently 8Tb.", but it looks like 
being 16TB, which my computer don't have of course.

I still have to understand why my colleague has a problem of memory 
allocation (cannot allocate vector of size 12.6 Gb).

Sorry for the wrong interpretation, but thanks for the help,
Samuel

--- RStudio

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

 > memory.limit()
[1] 1.759219e+13
 > sessionInfo()
R version 3.6.3 (2020-02-29)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252    
LC_MONETARY=French_France.1252 LC_NUMERIC=C
[5] LC_TIME=French_France.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.6.3 tools_3.6.3
 >

--- RGui

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

 > ls()
character(0)
 > memory.limit()
[1] 32627
 > sessionInfo()
R version 3.6.3 (2020-02-29)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252    
LC_MONETARY=French_France.1252
[4] LC_NUMERIC=C                   LC_TIME=French_France.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.6.3
 >


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Apr  7 16:24:02 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 7 Apr 2020 16:24:02 +0200
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
 <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
 <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
Message-ID: <4897fd30-e8da-0c58-1c36-f59266b1163e@gmail.com>

Hi Samuel,

please also have a look at ?memory.limit. You can set this limit at R 
startup. It is in megabytes. Maybe R Studio sets it at runtime.

Best
Tomas

On 4/7/20 3:57 PM, Samuel Granjeaud IR/Inserm wrote:
> Hi Tomas,
>
> Many thanks for your answer.
>
> Here is a copy of a fresh session under RStudio, and after a copy 
> under Rgui.
> Strangely enough the result of memory.limit() is not the same. Without 
> your question I would not have looked to RGui, being used to work with 
> RStudio.
>
> The value under RGui sounds to correspond to the total RAM of the 
> computer. It makes me noticing that the value is in MB.
>
> The value under Rstudio was so huge (1.759219e+13) that I just 
> interpreted it as GB. But I was totally wrong. So in fact I don't know 
> what it refers to. The documentation says "For a 64-bit versions of R 
> under 64-bit Windows the limit is currently 8Tb.", but it looks like 
> being 16TB, which my computer don't have of course.
>
> I still have to understand why my colleague has a problem of memory 
> allocation (cannot allocate vector of size 12.6 Gb).
>
> Sorry for the wrong interpretation, but thanks for the help,
> Samuel
>
> --- RStudio
>
> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
> > memory.limit()
> [1] 1.759219e+13
> > sessionInfo()
> R version 3.6.3 (2020-02-29)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=French_France.1252? LC_CTYPE=French_France.1252 
> LC_MONETARY=French_France.1252 LC_NUMERIC=C
> [5] LC_TIME=French_France.1252
>
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.6.3 tools_3.6.3
> >
>
> --- RGui
>
> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
> > ls()
> character(0)
> > memory.limit()
> [1] 32627
> > sessionInfo()
> R version 3.6.3 (2020-02-29)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=French_France.1252? LC_CTYPE=French_France.1252 
> LC_MONETARY=French_France.1252
> [4] LC_NUMERIC=C?????????????????? LC_TIME=French_France.1252
>
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.6.3
> >
>


From m@rc_@chw@rtz @end|ng |rom me@com  Tue Apr  7 16:39:27 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Tue, 7 Apr 2020 10:39:27 -0400
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <4897fd30-e8da-0c58-1c36-f59266b1163e@gmail.com>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
 <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
 <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
 <4897fd30-e8da-0c58-1c36-f59266b1163e@gmail.com>
Message-ID: <03D3DC14-DBCA-4A03-87AD-6FA9576A5CBB@me.com>

Hi Samuel,

You may already be aware, but if not, RStudio has their own support mechanisms here:

  https://support.rstudio.com/hc/en-us

If this does turn out to be RStudio specific, you may wish to check there for additional insights.

Regards,

Marc Schwartz


> On Apr 7, 2020, at 10:24 AM, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> 
> Hi Samuel,
> 
> please also have a look at ?memory.limit. You can set this limit at R startup. It is in megabytes. Maybe R Studio sets it at runtime.
> 
> Best
> Tomas
> 
> On 4/7/20 3:57 PM, Samuel Granjeaud IR/Inserm wrote:
>> Hi Tomas,
>> 
>> Many thanks for your answer.
>> 
>> Here is a copy of a fresh session under RStudio, and after a copy under Rgui.
>> Strangely enough the result of memory.limit() is not the same. Without your question I would not have looked to RGui, being used to work with RStudio.
>> 
>> The value under RGui sounds to correspond to the total RAM of the computer. It makes me noticing that the value is in MB.
>> 
>> The value under Rstudio was so huge (1.759219e+13) that I just interpreted it as GB. But I was totally wrong. So in fact I don't know what it refers to. The documentation says "For a 64-bit versions of R under 64-bit Windows the limit is currently 8Tb.", but it looks like being 16TB, which my computer don't have of course.
>> 
>> I still have to understand why my colleague has a problem of memory allocation (cannot allocate vector of size 12.6 Gb).
>> 
>> Sorry for the wrong interpretation, but thanks for the help,
>> Samuel
>> 
>> --- RStudio
>> 
>> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
>> Copyright (C) 2020 The R Foundation for Statistical Computing
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> 
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>> 
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>> 
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>> 
>> > memory.limit()
>> [1] 1.759219e+13
>> > sessionInfo()
>> R version 3.6.3 (2020-02-29)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>> 
>> Matrix products: default
>> 
>> locale:
>> [1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252 LC_MONETARY=French_France.1252 LC_NUMERIC=C
>> [5] LC_TIME=French_France.1252
>> 
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods base
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.3 tools_3.6.3
>> >
>> 
>> --- RGui
>> 
>> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
>> Copyright (C) 2020 The R Foundation for Statistical Computing
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> 
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>> 
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>> 
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>> 
>> > ls()
>> character(0)
>> > memory.limit()
>> [1] 32627
>> > sessionInfo()
>> R version 3.6.3 (2020-02-29)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>> 
>> Matrix products: default
>> 
>> locale:
>> [1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252 LC_MONETARY=French_France.1252
>> [4] LC_NUMERIC=C                   LC_TIME=French_France.1252
>> 
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods base
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.3
>> >
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Tue Apr  7 16:47:13 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 7 Apr 2020 09:47:13 -0500
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
 <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
Message-ID: <24204.37489.757879.648305@rob.eddelbuettel.com>


There appears to have been some progress on this matter:

-Note that @command{g++} 4.9.x (as used for @R{} on Windows up to 3.6.x)
+Note that @command{g++} 4.9.x (as used on Windows prior to @R{} 4.0.0)

See SVN commit r78169 titled 'anticipate change in Windows toolchain', or the
mirrored git commit at 
https://github.com/wch/r-source/commit/bd674e2b76b2384169424e3d899fbfb5ac174978

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From th|erry@onke||nx @end|ng |rom |nbo@be  Tue Apr  7 17:05:12 2020
From: th|erry@onke||nx @end|ng |rom |nbo@be (Thierry Onkelinx)
Date: Tue, 7 Apr 2020 17:05:12 +0200
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
 <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
 <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
Message-ID: <CAJuCY5x-sC94EofCqSKNbTGANHyY6p=f8YAbLVLAOvOcnEsY3g@mail.gmail.com>

Dear Samuel,

The most important information from your mail was the actual error message:
"cannot allocate vector of size 12.6 Gb".

You'll need to know what code generated this error message. And then figure
out if the code does something sensible. Often that is not the case when
you get a similar error message.

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>


Op di 7 apr. 2020 om 16:16 schreef Samuel Granjeaud IR/Inserm <
samuel.granjeaud at inserm.fr>:

> Hi Tomas,
>
> Many thanks for your answer.
>
> Here is a copy of a fresh session under RStudio, and after a copy under
> Rgui.
> Strangely enough the result of memory.limit() is not the same. Without
> your question I would not have looked to RGui, being used to work with
> RStudio.
>
> The value under RGui sounds to correspond to the total RAM of the
> computer. It makes me noticing that the value is in MB.
>
> The value under Rstudio was so huge (1.759219e+13) that I just
> interpreted it as GB. But I was totally wrong. So in fact I don't know
> what it refers to. The documentation says "For a 64-bit versions of R
> under 64-bit Windows the limit is currently 8Tb.", but it looks like
> being 16TB, which my computer don't have of course.
>
> I still have to understand why my colleague has a problem of memory
> allocation (cannot allocate vector of size 12.6 Gb).
>
> Sorry for the wrong interpretation, but thanks for the help,
> Samuel
>
> --- RStudio
>
> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
>  > memory.limit()
> [1] 1.759219e+13
>  > sessionInfo()
> R version 3.6.3 (2020-02-29)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252
> LC_MONETARY=French_France.1252 LC_NUMERIC=C
> [5] LC_TIME=French_France.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.6.3 tools_3.6.3
>  >
>
> --- RGui
>
> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
>  > ls()
> character(0)
>  > memory.limit()
> [1] 32627
>  > sessionInfo()
> R version 3.6.3 (2020-02-29)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252
> LC_MONETARY=French_France.1252
> [4] LC_NUMERIC=C                   LC_TIME=French_France.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.6.3
>  >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From kev|nu@hey @end|ng |rom gm@||@com  Tue Apr  7 18:06:48 2020
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Tue, 7 Apr 2020 09:06:48 -0700
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <24204.37489.757879.648305@rob.eddelbuettel.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
 <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
 <24204.37489.757879.648305@rob.eddelbuettel.com>
Message-ID: <CAJXgQP1XF5tuKrqqxbu7BHp47m93DQkbCyOa4NLTvpRKHSKfnQ@mail.gmail.com>

That's great to see, although I suspect it's still a speculative
change and could be backed out if any non-trivial issues were
encountered.

Regardless, I would like to thank R core, CRAN, and Jeroen for all of
the time that has gone into creating and validating this new
toolchain. This is arduous work at an especially arduous time, so I'd
like to voice my appreciation for all the time and energy they have
spent on making this possible.

Best,
Kevin

On Tue, Apr 7, 2020 at 7:47 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> There appears to have been some progress on this matter:
>
> -Note that @command{g++} 4.9.x (as used for @R{} on Windows up to 3.6.x)
> +Note that @command{g++} 4.9.x (as used on Windows prior to @R{} 4.0.0)
>
> See SVN commit r78169 titled 'anticipate change in Windows toolchain', or the
> mirrored git commit at
> https://github.com/wch/r-source/commit/bd674e2b76b2384169424e3d899fbfb5ac174978
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Tue Apr  7 18:26:13 2020
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Tue, 7 Apr 2020 17:26:13 +0100
Subject: [Rd] [SPAM]  Hard memory limit of 16GB under Windows?
In-Reply-To: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
Message-ID: <2306e489-622c-4692-ed64-5ded0ed1cac2@dewey.myzen.co.uk>

Dear Samuel

Does the FAQ for Windows section 2.9 help you here?

Michael

On 07/04/2020 12:35, Samuel Granjeaud IR/Inserm wrote:
> Hi,
> I am not not sure whether this topic belongs to this mail list, but I
> feel the subscribers here should be the right audience.
> I noticed that the memory limit reported under Windows is 16 GB. I am
> wondering how to increase it. I didn't found anything in Rprofile.site
> nor .Rprofile. Is this limit hard coded at compilation?
> Best,
> Samuel
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Michael
http://www.dewey.myzen.co.uk/home.html


From hp@ge@ @end|ng |rom |redhutch@org  Tue Apr  7 18:51:36 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 7 Apr 2020 09:51:36 -0700
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <CAJuCY5x-sC94EofCqSKNbTGANHyY6p=f8YAbLVLAOvOcnEsY3g@mail.gmail.com>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
 <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
 <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
 <CAJuCY5x-sC94EofCqSKNbTGANHyY6p=f8YAbLVLAOvOcnEsY3g@mail.gmail.com>
Message-ID: <6c1125d0-c59b-744a-84ed-81a723020341@fredhutch.org>

Agreed. I don't see any evidence of a "hard limit" here. It just looks 
like the code you're running has exhausted the memory of your machine. 
It doesn't require creating a lot of 12.6 Gb vectors to do that, even on 
a machine with a lot of memory ;-)

H.

On 4/7/20 08:05, Thierry Onkelinx via R-devel wrote:
> Dear Samuel,
> 
> The most important information from your mail was the actual error message:
> "cannot allocate vector of size 12.6 Gb".
> 
> You'll need to know what code generated this error message. And then figure
> out if the code does something sensible. Often that is not the case when
> you get a similar error message.
> 
> Best regards,
> 
> ir. Thierry Onkelinx
> Statisticus / Statistician
> 
> Vlaamse Overheid / Government of Flanders
> INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
> FOREST
> Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
> thierry.onkelinx at inbo.be
> Havenlaan 88 bus 73, 1000 Brussel
> https://urldefense.proofpoint.com/v2/url?u=http-3A__www.inbo.be&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=r6WLJ5dXWo2qb7mQwONaCxYeeWgKwycd3y89JoqY-oY&s=VNmTfuiByvneqd4lcQS0o961TZa3ygo2Rdp7AtiGnk0&e=
> 
> ///////////////////////////////////////////////////////////////////////////////////////////
> To call in the statistician after the experiment is done may be no more
> than asking him to perform a post-mortem examination: he may be able to say
> what the experiment died of. ~ Sir Ronald Aylmer Fisher
> The plural of anecdote is not data. ~ Roger Brinner
> The combination of some data and an aching desire for an answer does not
> ensure that a reasonable answer can be extracted from a given body of data.
> ~ John Tukey
> ///////////////////////////////////////////////////////////////////////////////////////////
> 
> <https://urldefense.proofpoint.com/v2/url?u=https-3A__www.inbo.be&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=r6WLJ5dXWo2qb7mQwONaCxYeeWgKwycd3y89JoqY-oY&s=qqsNew3vl9ZvyUMRz_GQy_fAfoj9axzmbcsUUayPVAs&e= >
> 
> 
> Op di 7 apr. 2020 om 16:16 schreef Samuel Granjeaud IR/Inserm <
> samuel.granjeaud at inserm.fr>:
> 
>> Hi Tomas,
>>
>> Many thanks for your answer.
>>
>> Here is a copy of a fresh session under RStudio, and after a copy under
>> Rgui.
>> Strangely enough the result of memory.limit() is not the same. Without
>> your question I would not have looked to RGui, being used to work with
>> RStudio.
>>
>> The value under RGui sounds to correspond to the total RAM of the
>> computer. It makes me noticing that the value is in MB.
>>
>> The value under Rstudio was so huge (1.759219e+13) that I just
>> interpreted it as GB. But I was totally wrong. So in fact I don't know
>> what it refers to. The documentation says "For a 64-bit versions of R
>> under 64-bit Windows the limit is currently 8Tb.", but it looks like
>> being 16TB, which my computer don't have of course.
>>
>> I still have to understand why my colleague has a problem of memory
>> allocation (cannot allocate vector of size 12.6 Gb).
>>
>> Sorry for the wrong interpretation, but thanks for the help,
>> Samuel
>>
>> --- RStudio
>>
>> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
>> Copyright (C) 2020 The R Foundation for Statistical Computing
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>>   > memory.limit()
>> [1] 1.759219e+13
>>   > sessionInfo()
>> R version 3.6.3 (2020-02-29)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252
>> LC_MONETARY=French_France.1252 LC_NUMERIC=C
>> [5] LC_TIME=French_France.1252
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.3 tools_3.6.3
>>   >
>>
>> --- RGui
>>
>> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
>> Copyright (C) 2020 The R Foundation for Statistical Computing
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>>   > ls()
>> character(0)
>>   > memory.limit()
>> [1] 32627
>>   > sessionInfo()
>> R version 3.6.3 (2020-02-29)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252
>> LC_MONETARY=French_France.1252
>> [4] LC_NUMERIC=C                   LC_TIME=French_France.1252
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.3
>>   >
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=r6WLJ5dXWo2qb7mQwONaCxYeeWgKwycd3y89JoqY-oY&s=ABvG3sGKR5ln27FVCM8dlmZ82X93ZCTigbMxHeBEb6E&e=
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=r6WLJ5dXWo2qb7mQwONaCxYeeWgKwycd3y89JoqY-oY&s=ABvG3sGKR5ln27FVCM8dlmZ82X93ZCTigbMxHeBEb6E&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From therne@u @end|ng |rom m@yo@edu  Tue Apr  7 19:20:11 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 07 Apr 2020 12:20:11 -0500
Subject: [Rd] ASAN
Message-ID: <28fddd$diguqu@ironport10.mayo.edu>

I'm trying to chase down a possible issue with the survival package, and 
so was trying to resurrect my ASAN version of r-devel.?? I added the 
lines to config.site for CC, CFLAGS and MAIN_LDFLAGS per section 4.3.3 
of the? 'packages' documentation, and lines to ~/.R/Makevars.

I followed that with? svn up,? tools/rsync-recommended, make distclean, 
./configure, then make.

It fails on the rebuild of MASS with the message

==15755==ASan runtime does not come first in initial library list; you 
should either link runtime to your application or manually preload it 
with LD_PRELOAD.
ERROR: loading failed
* removing ?/usr/local/src/R-devel/library/MASS?

It's not quite clear to me what to do next.

Terry Therneau



	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed Apr  8 04:25:16 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 8 Apr 2020 14:25:16 +1200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
Message-ID: <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>


The R-symfam branch (r78176) is now working, for my basic tests, on ...

Ubuntu (pango < 1.44)
Ubuntu (no pango)
Fedora (pango > 1.44)
Windows

I need help to confirm that this builds on macOS and that the basic 
tests work ...

https://github.com/pmur002/R-symfam-testing

Brian has been helping with the build, but I am still looking for 
someone who can run the tests please.  Happy to be fed PDF files to 
scrutinize myself;  it's generating the PDF files on macOS that I need 
help with.

Paul

On 6/04/20 2:59 pm, Paul Murrell wrote:
> Hi
> 
> The R branch ...
> 
> https://svn.r-project.org/R/branches/R-symfam/
> 
> ... is now set up so that it works "out of the box" on Fedora by setting 
> the default to be 'symbolfamily=cairoSymbolFont(family, usePUA=FALSE)' 
> when grSoftVersion()["pango"] is greater than "1.44".
> 
> This means that on Fedora 31 (at least on the Docker container I am 
> testing on) "sans"->"NimubusSans" is used as the symbol font by default 
> and R converts Adobe Symbol Encoding code points to non-PUA UTF8 code 
> points.? This is not the prettiest result, but it is a lot better than 
> the page full of missing glyphs that we had.
> 
> The default on less "bleeding edge" systems, e.g., my Ubuntu 18.04, 
> remains 'symbolfamily="Symbol"'.
> 
> The default on other platforms is supposed to be the same as it was, but 
> I need help to confirm that.? I have set up a github repo ...
> 
> https://github.com/pmur002/R-symfam-testing
> 
> ... that describes how to test this on macOS and Windows if anyone has 
> time to do so.
> 
> I will start trying to set up a Windows test unless someone beats me to it.
> 
> Paul
> 
> On 30/03/20 3:24 pm, Paul Murrell wrote:
>> Hi
>>
>> I have created an R branch that contains a potential fix ...
>>
>> https://svn.r-project.org/R/branches/R-symfam/
>>
>> This allows, for example, ...
>>
>> cairo_pdf(symbolfamily="OpenSymbol")
>>
>> ... to specify that the OpenSymbol family should be used as the 
>> "symbol" font (e.g., for "plotmath") in R.
>>
>> This is just a separate branch for now because, while I have tested it 
>> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows 
>> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel 
>> at this stage of the release process for R 4.0.0.
>>
>> The attached file contains at least an outline of steps required to do 
>> a minimal test if anyone wants to try the fix on Linux.
>>
>> cc'ing Simon and Jeroen in case they are able to help with checking 
>> that this builds and works on Mac and/or Windows.
>>
>> NOTEs:
>> - 'symbolfamily' can only be specified when a graphics device is 
>> opened, and it is then fixed for that device.
>> - on Windows, for cairo-based devices, the "symbol" font is still 
>> hard-coded as "Standard Symbols L"
>>
>> Paul
>>
>> On 30/03/20 8:15 am, Paul Murrell wrote:
>>> Hi
>>>
>>> Thanks for your input on this I?aki and Nicolas.
>>>
>>> I am starting testing an R fix for this problem today.
>>>
>>> As suggested, the plan is to allow the R user to specify a font 
>>> family other than "symbol" for plotmath output (or, more generally, 
>>> in R parlance, for 'font=5' or 'fontface=5') on a Cairo-based 
>>> graphics device.
>>>
>>> Paul
>>>
>>>
>>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>>>> <nicolas.mailhot at laposte.net> wrote:
>>>>>
>>>>> <snip>
>>>>>
>>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol? 
>>>>> font
>>>>> family name in its default conf. Linux systems are UTF-8 by default 
>>>>> for
>>>>> ~20 years now, they don?t need the forcing of magic font families to
>>>>> handle symbols not present in the 8-bit legacy Windows encodings.
>>>>>
>>>>> The actual effect of this conf is not the selection of font files with
>>>>> special and unusual symbols. It is to priorize fonts that match the
>>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>>>>> systems, because no one has needed to bother with them since Linux
>>>>> switched to UTF-8 last millenium.
>>>>>
>>>>> Just stop using ?Symbol? in R and things will work a lot better.
>>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>>>>> *cares* about this legacy Windows-specific stuff.
>>>>
>>>> So, in the light of Nicolas' input (thanks!), I think that font
>>>> selection should be fixed upstream in R. I'd be happy to put all this
>>>> together in R's bugzilla, but I don't have an account. Could someone
>>>> please invite me?
>>>>
>>>> I?aki
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From g@bembecker @end|ng |rom gm@||@com  Wed Apr  8 05:59:50 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 7 Apr 2020 20:59:50 -0700
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
Message-ID: <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>

Paul et al,

I will try to do this tonight or tomorrow, though it will not be built with
th system tools because I have yet to get that tto work locally (spent a
good chunk of this morning trying).

I will send a separate messaage regarding those difficulties as well so
that we can at least confirm that they are due to a malconfiguration on my
part.

Best,
~G

On Tue, Apr 7, 2020 at 7:25 PM Paul Murrell <paul at stat.auckland.ac.nz>
wrote:

>
> The R-symfam branch (r78176) is now working, for my basic tests, on ...
>
> Ubuntu (pango < 1.44)
> Ubuntu (no pango)
> Fedora (pango > 1.44)
> Windows
>
> I need help to confirm that this builds on macOS and that the basic
> tests work ...
>
> https://github.com/pmur002/R-symfam-testing
>
> Brian has been helping with the build, but I am still looking for
> someone who can run the tests please.  Happy to be fed PDF files to
> scrutinize myself;  it's generating the PDF files on macOS that I need
> help with.
>
> Paul
>
> On 6/04/20 2:59 pm, Paul Murrell wrote:
> > Hi
> >
> > The R branch ...
> >
> > https://svn.r-project.org/R/branches/R-symfam/
> >
> > ... is now set up so that it works "out of the box" on Fedora by setting
> > the default to be 'symbolfamily=cairoSymbolFont(family, usePUA=FALSE)'
> > when grSoftVersion()["pango"] is greater than "1.44".
> >
> > This means that on Fedora 31 (at least on the Docker container I am
> > testing on) "sans"->"NimubusSans" is used as the symbol font by default
> > and R converts Adobe Symbol Encoding code points to non-PUA UTF8 code
> > points.  This is not the prettiest result, but it is a lot better than
> > the page full of missing glyphs that we had.
> >
> > The default on less "bleeding edge" systems, e.g., my Ubuntu 18.04,
> > remains 'symbolfamily="Symbol"'.
> >
> > The default on other platforms is supposed to be the same as it was, but
> > I need help to confirm that.  I have set up a github repo ...
> >
> > https://github.com/pmur002/R-symfam-testing
> >
> > ... that describes how to test this on macOS and Windows if anyone has
> > time to do so.
> >
> > I will start trying to set up a Windows test unless someone beats me to
> it.
> >
> > Paul
> >
> > On 30/03/20 3:24 pm, Paul Murrell wrote:
> >> Hi
> >>
> >> I have created an R branch that contains a potential fix ...
> >>
> >> https://svn.r-project.org/R/branches/R-symfam/
> >>
> >> This allows, for example, ...
> >>
> >> cairo_pdf(symbolfamily="OpenSymbol")
> >>
> >> ... to specify that the OpenSymbol family should be used as the
> >> "symbol" font (e.g., for "plotmath") in R.
> >>
> >> This is just a separate branch for now because, while I have tested it
> >> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
> >> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel
> >> at this stage of the release process for R 4.0.0.
> >>
> >> The attached file contains at least an outline of steps required to do
> >> a minimal test if anyone wants to try the fix on Linux.
> >>
> >> cc'ing Simon and Jeroen in case they are able to help with checking
> >> that this builds and works on Mac and/or Windows.
> >>
> >> NOTEs:
> >> - 'symbolfamily' can only be specified when a graphics device is
> >> opened, and it is then fixed for that device.
> >> - on Windows, for cairo-based devices, the "symbol" font is still
> >> hard-coded as "Standard Symbols L"
> >>
> >> Paul
> >>
> >> On 30/03/20 8:15 am, Paul Murrell wrote:
> >>> Hi
> >>>
> >>> Thanks for your input on this I?aki and Nicolas.
> >>>
> >>> I am starting testing an R fix for this problem today.
> >>>
> >>> As suggested, the plan is to allow the R user to specify a font
> >>> family other than "symbol" for plotmath output (or, more generally,
> >>> in R parlance, for 'font=5' or 'fontface=5') on a Cairo-based
> >>> graphics device.
> >>>
> >>> Paul
> >>>
> >>>
> >>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
> >>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
> >>>> <nicolas.mailhot at laposte.net> wrote:
> >>>>>
> >>>>> <snip>
> >>>>>
> >>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol?
> >>>>> font
> >>>>> family name in its default conf. Linux systems are UTF-8 by default
> >>>>> for
> >>>>> ~20 years now, they don?t need the forcing of magic font families to
> >>>>> handle symbols not present in the 8-bit legacy Windows encodings.
> >>>>>
> >>>>> The actual effect of this conf is not the selection of font files
> with
> >>>>> special and unusual symbols. It is to priorize fonts that match the
> >>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
> >>>>> systems, because no one has needed to bother with them since Linux
> >>>>> switched to UTF-8 last millenium.
> >>>>>
> >>>>> Just stop using ?Symbol? in R and things will work a lot better.
> >>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
> >>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
> >>>>> *cares* about this legacy Windows-specific stuff.
> >>>>
> >>>> So, in the light of Nicolas' input (thanks!), I think that font
> >>>> selection should be fixed upstream in R. I'd be happy to put all this
> >>>> together in R's bugzilla, but I don't have an account. Could someone
> >>>> please invite me?
> >>>>
> >>>> I?aki
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>
> >
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Apr  8 10:31:30 2020
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 8 Apr 2020 11:31:30 +0300
Subject: [Rd] ASAN
In-Reply-To: <28fddd$diguqu@ironport10.mayo.edu>
References: <28fddd$diguqu@ironport10.mayo.edu>
Message-ID: <20200408113130.1e0a5444@Tarkus>

On Tue, 07 Apr 2020 12:20:11 -0500
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> wrote:

> It's not quite clear to me what to do next.

A quick check: do you have anything in LD_PRELOAD environment variable?
Third-party software like gtk3-nocsd may be using it for its own
purposes, which breaks ASan. When I build software with -fsanitize=...,
I have to explicitly unset LD_PRELOAD to get it to work.

-- 
Best regards,
Ivan


From g@bembecker @end|ng |rom gm@||@com  Wed Apr  8 11:55:31 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 8 Apr 2020 02:55:31 -0700
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
Message-ID: <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>

Hi Paul,

So I've run the tests (and am  attaching all numerous pdfs here) but the
takeaway from what I can see is as follows:

raw, without specifying font family, "look good" (see plot*raw.pdf)  from
your branch (my eye is upset by the positioning of the phi symbol in plot2,
but I've confirmed that it looks the same generated from 3.5.1, so
that isn't your branch).

The various font family settings seem to work too, from what I can tell.
Both font families you suggested, however, Helvetica and Apple Symbols (the
s is important) have significantly incomplete coverage with PUA on. Apple
Symbols does have nearly complete coverage (though  to my eye the symbols
are all smaller...) with PUA turned off, but Helvetica remains very spotty,
with disabling PUA only modestly increasing it's coverage, and not in the
places that seem likely to matter.

I hope that helps,
~G

On Tue, Apr 7, 2020 at 8:59 PM Gabriel Becker <gabembecker at gmail.com> wrote:

> Paul et al,
>
> I will try to do this tonight or tomorrow, though it will not be built
> with th system tools because I have yet to get that tto work locally (spent
> a good chunk of this morning trying).
>
> I will send a separate messaage regarding those difficulties as well so
> that we can at least confirm that they are due to a malconfiguration on my
> part.
>
> Best,
> ~G
>
> On Tue, Apr 7, 2020 at 7:25 PM Paul Murrell <paul at stat.auckland.ac.nz>
> wrote:
>
>>
>> The R-symfam branch (r78176) is now working, for my basic tests, on ...
>>
>> Ubuntu (pango < 1.44)
>> Ubuntu (no pango)
>> Fedora (pango > 1.44)
>> Windows
>>
>> I need help to confirm that this builds on macOS and that the basic
>> tests work ...
>>
>> https://github.com/pmur002/R-symfam-testing
>>
>> Brian has been helping with the build, but I am still looking for
>> someone who can run the tests please.  Happy to be fed PDF files to
>> scrutinize myself;  it's generating the PDF files on macOS that I need
>> help with.
>>
>> Paul
>>
>> On 6/04/20 2:59 pm, Paul Murrell wrote:
>> > Hi
>> >
>> > The R branch ...
>> >
>> > https://svn.r-project.org/R/branches/R-symfam/
>> >
>> > ... is now set up so that it works "out of the box" on Fedora by
>> setting
>> > the default to be 'symbolfamily=cairoSymbolFont(family, usePUA=FALSE)'
>> > when grSoftVersion()["pango"] is greater than "1.44".
>> >
>> > This means that on Fedora 31 (at least on the Docker container I am
>> > testing on) "sans"->"NimubusSans" is used as the symbol font by default
>> > and R converts Adobe Symbol Encoding code points to non-PUA UTF8 code
>> > points.  This is not the prettiest result, but it is a lot better than
>> > the page full of missing glyphs that we had.
>> >
>> > The default on less "bleeding edge" systems, e.g., my Ubuntu 18.04,
>> > remains 'symbolfamily="Symbol"'.
>> >
>> > The default on other platforms is supposed to be the same as it was,
>> but
>> > I need help to confirm that.  I have set up a github repo ...
>> >
>> > https://github.com/pmur002/R-symfam-testing
>> >
>> > ... that describes how to test this on macOS and Windows if anyone has
>> > time to do so.
>> >
>> > I will start trying to set up a Windows test unless someone beats me to
>> it.
>> >
>> > Paul
>> >
>> > On 30/03/20 3:24 pm, Paul Murrell wrote:
>> >> Hi
>> >>
>> >> I have created an R branch that contains a potential fix ...
>> >>
>> >> https://svn.r-project.org/R/branches/R-symfam/
>> >>
>> >> This allows, for example, ...
>> >>
>> >> cairo_pdf(symbolfamily="OpenSymbol")
>> >>
>> >> ... to specify that the OpenSymbol family should be used as the
>> >> "symbol" font (e.g., for "plotmath") in R.
>> >>
>> >> This is just a separate branch for now because, while I have tested it
>> >> under Unbuntu 18.04 and Fedora 31, I cannot even build R for Windows
>> >> (right now) or Mac (ever) and I do not want to drop a bomb on R-devel
>> >> at this stage of the release process for R 4.0.0.
>> >>
>> >> The attached file contains at least an outline of steps required to do
>> >> a minimal test if anyone wants to try the fix on Linux.
>> >>
>> >> cc'ing Simon and Jeroen in case they are able to help with checking
>> >> that this builds and works on Mac and/or Windows.
>> >>
>> >> NOTEs:
>> >> - 'symbolfamily' can only be specified when a graphics device is
>> >> opened, and it is then fixed for that device.
>> >> - on Windows, for cairo-based devices, the "symbol" font is still
>> >> hard-coded as "Standard Symbols L"
>> >>
>> >> Paul
>> >>
>> >> On 30/03/20 8:15 am, Paul Murrell wrote:
>> >>> Hi
>> >>>
>> >>> Thanks for your input on this I?aki and Nicolas.
>> >>>
>> >>> I am starting testing an R fix for this problem today.
>> >>>
>> >>> As suggested, the plan is to allow the R user to specify a font
>> >>> family other than "symbol" for plotmath output (or, more generally,
>> >>> in R parlance, for 'font=5' or 'fontface=5') on a Cairo-based
>> >>> graphics device.
>> >>>
>> >>> Paul
>> >>>
>> >>>
>> >>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>> >>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>> >>>> <nicolas.mailhot at laposte.net> wrote:
>> >>>>>
>> >>>>> <snip>
>> >>>>>
>> >>>>> R brought this all on itself by hardcoding a Windows-only ?Symbol?
>> >>>>> font
>> >>>>> family name in its default conf. Linux systems are UTF-8 by default
>> >>>>> for
>> >>>>> ~20 years now, they don?t need the forcing of magic font families to
>> >>>>> handle symbols not present in the 8-bit legacy Windows encodings.
>> >>>>>
>> >>>>> The actual effect of this conf is not the selection of font files
>> with
>> >>>>> special and unusual symbols. It is to priorize fonts that match the
>> >>>>> "Symbol" magic name. And those fonts are few and crumbling on Linux
>> >>>>> systems, because no one has needed to bother with them since Linux
>> >>>>> switched to UTF-8 last millenium.
>> >>>>>
>> >>>>> Just stop using ?Symbol? in R and things will work a lot better.
>> >>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>> >>>>> fontconfig (and fight with wine for it), because *no* *one* *else*
>> >>>>> *cares* about this legacy Windows-specific stuff.
>> >>>>
>> >>>> So, in the light of Nicolas' input (thanks!), I think that font
>> >>>> selection should be fixed upstream in R. I'd be happy to put all this
>> >>>> together in R's bugzilla, but I don't have an account. Could someone
>> >>>> please invite me?
>> >>>>
>> >>>> I?aki
>> >>>>
>> >>>> ______________________________________________
>> >>>> R-devel at r-project.org mailing list
>> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>>>
>> >>
>> >
>>
>> --
>> Dr Paul Murrell
>> Department of Statistics
>> The University of Auckland
>> Private Bag 92019
>> Auckland
>> New Zealand
>> 64 9 3737599 x85392
>> paul at stat.auckland.ac.nz
>> http://www.stat.auckland.ac.nz/~paul/
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot001apsymNoPUA.pdf
Type: application/pdf
Size: 29162 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot001raw.pdf
Type: application/pdf
Size: 44262 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0001.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot001helvNoPUA.pdf
Type: application/pdf
Size: 36124 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0002.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot001apsym.pdf
Type: application/pdf
Size: 27796 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0003.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot001helv.pdf
Type: application/pdf
Size: 35341 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0004.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot002apsymNoPUA.pdf
Type: application/pdf
Size: 12278 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0005.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot002apsym.pdf
Type: application/pdf
Size: 12278 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0006.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot002helvNoPUA.pdf
Type: application/pdf
Size: 14845 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0007.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot002helv.pdf
Type: application/pdf
Size: 14845 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0008.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot002raw.pdf
Type: application/pdf
Size: 14349 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0009.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot003apsym.pdf
Type: application/pdf
Size: 22879 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0010.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot003apsymNoPUA.pdf
Type: application/pdf
Size: 22879 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0011.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot003helv.pdf
Type: application/pdf
Size: 27939 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0012.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot003helvNoPUA.pdf
Type: application/pdf
Size: 27939 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0013.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot003raw.pdf
Type: application/pdf
Size: 26890 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0014.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot004apsym.pdf
Type: application/pdf
Size: 16220 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0015.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot004apsymNoPUA.pdf
Type: application/pdf
Size: 16220 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0016.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot004helv.pdf
Type: application/pdf
Size: 21668 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0017.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot004raw.pdf
Type: application/pdf
Size: 20411 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0018.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot004helvNoPUA.pdf
Type: application/pdf
Size: 21668 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0019.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot005apsym.pdf
Type: application/pdf
Size: 13454 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0020.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot005apsymNoPUA.pdf
Type: application/pdf
Size: 13454 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0021.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot005helv.pdf
Type: application/pdf
Size: 14750 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0022.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot005helvNoPUA.pdf
Type: application/pdf
Size: 14750 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0023.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: plot005raw.pdf
Type: application/pdf
Size: 15651 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200408/2ddbb91f/attachment-0024.pdf>

From @@mue|@gr@nje@ud @end|ng |rom |n@erm@|r  Wed Apr  8 14:20:03 2020
From: @@mue|@gr@nje@ud @end|ng |rom |n@erm@|r (Samuel Granjeaud IR/Inserm)
Date: Wed, 08 Apr 2020 12:20:03 +0000
Subject: [Rd] Hard memory limit of 16GB under Windows?
In-Reply-To: <6c1125d0-c59b-744a-84ed-81a723020341@fredhutch.org>
References: <emfb436b8b-b4cb-41bc-a183-5c31984721ee@bioinfo5>
 <1e00202b-4529-3488-800b-cdf3a81bfc58@gmail.com>
 <em4318d77f-0ea6-4099-892f-73c3c5302375@bioinfo5>
 <CAJuCY5x-sC94EofCqSKNbTGANHyY6p=f8YAbLVLAOvOcnEsY3g@mail.gmail.com>
 <6c1125d0-c59b-744a-84ed-81a723020341@fredhutch.org>
Message-ID: <em30467127-bfb4-4849-b2ce-c2602cb2add4@bioinfo5>

Thanks to all contributors for your time and useful feedbacks.
They pointed me to the right direction and brought me new knowledges.
Samuel


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed Apr  8 22:23:26 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Thu, 9 Apr 2020 08:23:26 +1200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
Message-ID: <5b1004d9-630e-b860-3d64-53cd41627025@stat.auckland.ac.nz>


Thanks Gabriel.  Simon and Brian are also helping out.  I will start a 
speparate thread for the four of us to coordinate.

Paul

On 8/04/20 3:59 pm, Gabriel Becker wrote:
> Paul et al,
> 
> I will try to do this tonight or tomorrow, though it will not be built 
> with th system tools because I have yet to get that tto work locally 
> (spent a good chunk of this morning trying).
> 
> I will send a separate messaage?regarding those difficulties as well so 
> that we can at least confirm that they are due to a malconfiguration on 
> my part.
> 
> Best,
> ~G
> 
> On Tue, Apr 7, 2020 at 7:25 PM Paul Murrell <paul at stat.auckland.ac.nz 
> <mailto:paul at stat.auckland.ac.nz>> wrote:
> 
> 
>     The R-symfam branch (r78176) is now working, for my basic tests, on ...
> 
>     Ubuntu (pango < 1.44)
>     Ubuntu (no pango)
>     Fedora (pango > 1.44)
>     Windows
> 
>     I need help to confirm that this builds on macOS and that the basic
>     tests work ...
> 
>     https://github.com/pmur002/R-symfam-testing
> 
>     Brian has been helping with the build, but I am still looking for
>     someone who can run the tests please.? Happy to be fed PDF files to
>     scrutinize myself;? it's generating the PDF files on macOS that I need
>     help with.
> 
>     Paul
> 
>     On 6/04/20 2:59 pm, Paul Murrell wrote:
>      > Hi
>      >
>      > The R branch ...
>      >
>      > https://svn.r-project.org/R/branches/R-symfam/
>      >
>      > ... is now set up so that it works "out of the box" on Fedora by
>     setting
>      > the default to be 'symbolfamily=cairoSymbolFont(family,
>     usePUA=FALSE)'
>      > when grSoftVersion()["pango"] is greater than "1.44".
>      >
>      > This means that on Fedora 31 (at least on the Docker container I am
>      > testing on) "sans"->"NimubusSans" is used as the symbol font by
>     default
>      > and R converts Adobe Symbol Encoding code points to non-PUA UTF8
>     code
>      > points.? This is not the prettiest result, but it is a lot better
>     than
>      > the page full of missing glyphs that we had.
>      >
>      > The default on less "bleeding edge" systems, e.g., my Ubuntu 18.04,
>      > remains 'symbolfamily="Symbol"'.
>      >
>      > The default on other platforms is supposed to be the same as it
>     was, but
>      > I need help to confirm that.? I have set up a github repo ...
>      >
>      > https://github.com/pmur002/R-symfam-testing
>      >
>      > ... that describes how to test this on macOS and Windows if
>     anyone has
>      > time to do so.
>      >
>      > I will start trying to set up a Windows test unless someone beats
>     me to it.
>      >
>      > Paul
>      >
>      > On 30/03/20 3:24 pm, Paul Murrell wrote:
>      >> Hi
>      >>
>      >> I have created an R branch that contains a potential fix ...
>      >>
>      >> https://svn.r-project.org/R/branches/R-symfam/
>      >>
>      >> This allows, for example, ...
>      >>
>      >> cairo_pdf(symbolfamily="OpenSymbol")
>      >>
>      >> ... to specify that the OpenSymbol family should be used as the
>      >> "symbol" font (e.g., for "plotmath") in R.
>      >>
>      >> This is just a separate branch for now because, while I have
>     tested it
>      >> under Unbuntu 18.04 and Fedora 31, I cannot even build R for
>     Windows
>      >> (right now) or Mac (ever) and I do not want to drop a bomb on
>     R-devel
>      >> at this stage of the release process for R 4.0.0.
>      >>
>      >> The attached file contains at least an outline of steps required
>     to do
>      >> a minimal test if anyone wants to try the fix on Linux.
>      >>
>      >> cc'ing Simon and Jeroen in case they are able to help with checking
>      >> that this builds and works on Mac and/or Windows.
>      >>
>      >> NOTEs:
>      >> - 'symbolfamily' can only be specified when a graphics device is
>      >> opened, and it is then fixed for that device.
>      >> - on Windows, for cairo-based devices, the "symbol" font is still
>      >> hard-coded as "Standard Symbols L"
>      >>
>      >> Paul
>      >>
>      >> On 30/03/20 8:15 am, Paul Murrell wrote:
>      >>> Hi
>      >>>
>      >>> Thanks for your input on this I?aki and Nicolas.
>      >>>
>      >>> I am starting testing an R fix for this problem today.
>      >>>
>      >>> As suggested, the plan is to allow the R user to specify a font
>      >>> family other than "symbol" for plotmath output (or, more
>     generally,
>      >>> in R parlance, for 'font=5' or 'fontface=5') on a Cairo-based
>      >>> graphics device.
>      >>>
>      >>> Paul
>      >>>
>      >>>
>      >>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>      >>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>      >>>> <nicolas.mailhot at laposte.net
>     <mailto:nicolas.mailhot at laposte.net>> wrote:
>      >>>>>
>      >>>>> <snip>
>      >>>>>
>      >>>>> R brought this all on itself by hardcoding a Windows-only
>     ?Symbol?
>      >>>>> font
>      >>>>> family name in its default conf. Linux systems are UTF-8 by
>     default
>      >>>>> for
>      >>>>> ~20 years now, they don?t need the forcing of magic font
>     families to
>      >>>>> handle symbols not present in the 8-bit legacy Windows encodings.
>      >>>>>
>      >>>>> The actual effect of this conf is not the selection of font
>     files with
>      >>>>> special and unusual symbols. It is to priorize fonts that
>     match the
>      >>>>> "Symbol" magic name. And those fonts are few and crumbling on
>     Linux
>      >>>>> systems, because no one has needed to bother with them since
>     Linux
>      >>>>> switched to UTF-8 last millenium.
>      >>>>>
>      >>>>> Just stop using ?Symbol? in R and things will work a lot better.
>      >>>>> Alternatively, prepare to maintain the ?Symbol? aliasing stack in
>      >>>>> fontconfig (and fight with wine for it), because *no* *one*
>     *else*
>      >>>>> *cares* about this legacy Windows-specific stuff.
>      >>>>
>      >>>> So, in the light of Nicolas' input (thanks!), I think that font
>      >>>> selection should be fixed upstream in R. I'd be happy to put
>     all this
>      >>>> together in R's bugzilla, but I don't have an account. Could
>     someone
>      >>>> please invite me?
>      >>>>
>      >>>> I?aki
>      >>>>
>      >>>> ______________________________________________
>      >>>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >>>>
>      >>
>      >
> 
>     -- 
>     Dr Paul Murrell
>     Department of Statistics
>     The University of Auckland
>     Private Bag 92019
>     Auckland
>     New Zealand
>     64 9 3737599 x85392
>     paul at stat.auckland.ac.nz <mailto:paul at stat.auckland.ac.nz>
>     http://www.stat.auckland.ac.nz/~paul/
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed Apr  8 23:08:35 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Thu, 9 Apr 2020 09:08:35 +1200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
Message-ID: <2d5ca31a-0067-e148-0207-218287952025@stat.auckland.ac.nz>


Thanks for this Gabriel - extremely useful.
Those results look pretty good.

Paul

On 8/04/20 9:55 pm, Gabriel Becker wrote:
> Hi Paul,
> 
> So I've run the tests?(and am? attaching all numerous pdfs here) but the 
> takeaway from what I can see is as follows:
> 
> raw, without specifying font family, "look good" (see plot*raw.pdf)  
> from your branch (my eye is upset by the positioning of the phi symbol 
> in plot2, but I've confirmed that it looks the same generated from 
> 3.5.1, so that?isn't?your branch).
> 
> The various font family settings seem to work too, from what I can tell. 
> Both font families?you suggested, however, Helvetica and Apple Symbols 
> (the s is important) have significantly incomplete coverage with PUA on. 
> Apple Symbols does have nearly complete coverage (though? to my eye the 
> symbols are all smaller...) with PUA turned off, but Helvetica remains 
> very spotty, with disabling PUA only modestly increasing it's coverage, 
> and not in the places that seem likely to matter.
> 
> I hope that helps,
> ~G
> 
> On Tue, Apr 7, 2020 at 8:59 PM Gabriel Becker <gabembecker at gmail.com 
> <mailto:gabembecker at gmail.com>> wrote:
> 
>     Paul et al,
> 
>     I will try to do this tonight or tomorrow, though it will not be
>     built with th system tools because I have yet to get that tto work
>     locally (spent a good chunk of this morning trying).
> 
>     I will send a separate messaage?regarding those difficulties as well
>     so that we can at least confirm that they are due to a
>     malconfiguration on my part.
> 
>     Best,
>     ~G
> 
>     On Tue, Apr 7, 2020 at 7:25 PM Paul Murrell
>     <paul at stat.auckland.ac.nz <mailto:paul at stat.auckland.ac.nz>> wrote:
> 
> 
>         The R-symfam branch (r78176) is now working, for my basic tests,
>         on ...
> 
>         Ubuntu (pango < 1.44)
>         Ubuntu (no pango)
>         Fedora (pango > 1.44)
>         Windows
> 
>         I need help to confirm that this builds on macOS and that the basic
>         tests work ...
> 
>         https://github.com/pmur002/R-symfam-testing
> 
>         Brian has been helping with the build, but I am still looking for
>         someone who can run the tests please.? Happy to be fed PDF files to
>         scrutinize myself;? it's generating the PDF files on macOS that
>         I need
>         help with.
> 
>         Paul
> 
>         On 6/04/20 2:59 pm, Paul Murrell wrote:
>          > Hi
>          >
>          > The R branch ...
>          >
>          > https://svn.r-project.org/R/branches/R-symfam/
>          >
>          > ... is now set up so that it works "out of the box" on Fedora
>         by setting
>          > the default to be 'symbolfamily=cairoSymbolFont(family,
>         usePUA=FALSE)'
>          > when grSoftVersion()["pango"] is greater than "1.44".
>          >
>          > This means that on Fedora 31 (at least on the Docker
>         container I am
>          > testing on) "sans"->"NimubusSans" is used as the symbol font
>         by default
>          > and R converts Adobe Symbol Encoding code points to non-PUA
>         UTF8 code
>          > points.? This is not the prettiest result, but it is a lot
>         better than
>          > the page full of missing glyphs that we had.
>          >
>          > The default on less "bleeding edge" systems, e.g., my Ubuntu
>         18.04,
>          > remains 'symbolfamily="Symbol"'.
>          >
>          > The default on other platforms is supposed to be the same as
>         it was, but
>          > I need help to confirm that.? I have set up a github repo ...
>          >
>          > https://github.com/pmur002/R-symfam-testing
>          >
>          > ... that describes how to test this on macOS and Windows if
>         anyone has
>          > time to do so.
>          >
>          > I will start trying to set up a Windows test unless someone
>         beats me to it.
>          >
>          > Paul
>          >
>          > On 30/03/20 3:24 pm, Paul Murrell wrote:
>          >> Hi
>          >>
>          >> I have created an R branch that contains a potential fix ...
>          >>
>          >> https://svn.r-project.org/R/branches/R-symfam/
>          >>
>          >> This allows, for example, ...
>          >>
>          >> cairo_pdf(symbolfamily="OpenSymbol")
>          >>
>          >> ... to specify that the OpenSymbol family should be used as the
>          >> "symbol" font (e.g., for "plotmath") in R.
>          >>
>          >> This is just a separate branch for now because, while I have
>         tested it
>          >> under Unbuntu 18.04 and Fedora 31, I cannot even build R for
>         Windows
>          >> (right now) or Mac (ever) and I do not want to drop a bomb
>         on R-devel
>          >> at this stage of the release process for R 4.0.0.
>          >>
>          >> The attached file contains at least an outline of steps
>         required to do
>          >> a minimal test if anyone wants to try the fix on Linux.
>          >>
>          >> cc'ing Simon and Jeroen in case they are able to help with
>         checking
>          >> that this builds and works on Mac and/or Windows.
>          >>
>          >> NOTEs:
>          >> - 'symbolfamily' can only be specified when a graphics
>         device is
>          >> opened, and it is then fixed for that device.
>          >> - on Windows, for cairo-based devices, the "symbol" font is
>         still
>          >> hard-coded as "Standard Symbols L"
>          >>
>          >> Paul
>          >>
>          >> On 30/03/20 8:15 am, Paul Murrell wrote:
>          >>> Hi
>          >>>
>          >>> Thanks for your input on this I?aki and Nicolas.
>          >>>
>          >>> I am starting testing an R fix for this problem today.
>          >>>
>          >>> As suggested, the plan is to allow the R user to specify a
>         font
>          >>> family other than "symbol" for plotmath output (or, more
>         generally,
>          >>> in R parlance, for 'font=5' or 'fontface=5') on a Cairo-based
>          >>> graphics device.
>          >>>
>          >>> Paul
>          >>>
>          >>>
>          >>> On 27/03/20 11:30 pm, I?aki Ucar wrote:
>          >>>> On Wed, 25 Mar 2020 at 12:25, Nicolas Mailhot
>          >>>> <nicolas.mailhot at laposte.net
>         <mailto:nicolas.mailhot at laposte.net>> wrote:
>          >>>>>
>          >>>>> <snip>
>          >>>>>
>          >>>>> R brought this all on itself by hardcoding a Windows-only
>         ?Symbol?
>          >>>>> font
>          >>>>> family name in its default conf. Linux systems are UTF-8
>         by default
>          >>>>> for
>          >>>>> ~20 years now, they don?t need the forcing of magic font
>         families to
>          >>>>> handle symbols not present in the 8-bit legacy Windows
>         encodings.
>          >>>>>
>          >>>>> The actual effect of this conf is not the selection of
>         font files with
>          >>>>> special and unusual symbols. It is to priorize fonts that
>         match the
>          >>>>> "Symbol" magic name. And those fonts are few and
>         crumbling on Linux
>          >>>>> systems, because no one has needed to bother with them
>         since Linux
>          >>>>> switched to UTF-8 last millenium.
>          >>>>>
>          >>>>> Just stop using ?Symbol? in R and things will work a lot
>         better.
>          >>>>> Alternatively, prepare to maintain the ?Symbol? aliasing
>         stack in
>          >>>>> fontconfig (and fight with wine for it), because *no*
>         *one* *else*
>          >>>>> *cares* about this legacy Windows-specific stuff.
>          >>>>
>          >>>> So, in the light of Nicolas' input (thanks!), I think that
>         font
>          >>>> selection should be fixed upstream in R. I'd be happy to
>         put all this
>          >>>> together in R's bugzilla, but I don't have an account.
>         Could someone
>          >>>> please invite me?
>          >>>>
>          >>>> I?aki
>          >>>>
>          >>>> ______________________________________________
>          >>>> R-devel at r-project.org <mailto:R-devel at r-project.org>
>         mailing list
>          >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>          >>>>
>          >>
>          >
> 
>         -- 
>         Dr Paul Murrell
>         Department of Statistics
>         The University of Auckland
>         Private Bag 92019
>         Auckland
>         New Zealand
>         64 9 3737599 x85392
>         paul at stat.auckland.ac.nz <mailto:paul at stat.auckland.ac.nz>
>         http://www.stat.auckland.ac.nz/~paul/
> 
>         ______________________________________________
>         R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>         https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u  Thu Apr  9 02:06:24 2020
From: M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u (Bravington, Mark (Data61, Hobart))
Date: Thu, 9 Apr 2020 00:06:24 +0000
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
Message-ID: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>

The "r-devel snapshot build" 78175 on Windows--- a dot-exe installer--- seems to be missing a couple of files in its bin/i386 folder: Rterm.exe and Rgui.exe. Both are present in its bin/x64 folder (and in the i386 folder for current R).

NB the lack of i386/Rterm.exe affects even the x64 version, since package installation seems to use it for testing loadability under both architectures (at least on the one package that I tried to install).

I've got a feeling that I've noticed this with some previous R-devel, but never got round to reporting it before the official R version caught up.

cheers
Mark


Mark Bravington
CSIRO Marine Lab
Hobart
Australia


From jeroen @end|ng |rom berke|ey@edu  Thu Apr  9 13:32:46 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Thu, 9 Apr 2020 13:32:46 +0200
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
Message-ID: <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>

On Thu, Apr 9, 2020 at 12:44 PM Bravington, Mark (Data61, Hobart)
<Mark.Bravington at data61.csiro.au> wrote:
>
> The "r-devel snapshot build" 78175 on Windows--- a dot-exe installer--- seems to be missing a couple of files in its bin/i386 folder: Rterm.exe and Rgui.exe. Both are present in its bin/x64 folder (and in the i386 folder for current R).

I just tested this and as far as I can tell there are no missing
files. Are you sure there isn't a local problem with your system
permissions or antivirus that is removing the files?

Try to verify the md5 of the installer; some enterprise firewalls are
tampering with downloads:

  openssl::md5(url('https://cran.r-project.org/bin/windows/base/R-devel-win.exe'))
  readLines('https://cran.r-project.org/bin/windows/base/md5sum.txt.R-devel')


From n|co|@@@m@||hot @end|ng |rom |@po@te@net  Thu Apr  9 17:36:07 2020
From: n|co|@@@m@||hot @end|ng |rom |@po@te@net (Nicolas Mailhot)
Date: Thu, 09 Apr 2020 17:36:07 +0200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
Message-ID: <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>

Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
> Hi Paul,

Hi Gabriel,

Thanks a lot for the testing.

> The various font family settings seem to work too, from what I can
> tell. Both font families you suggested, however, Helvetica and Apple
> Symbols (the s is important) have significantly incomplete coverage
> with PUA on.

That is to be expected, the AMS symbol dump in PUA space was a quick
hack to make pre-unicode symbols available in an unicode world, pending
their normalisation.

That standardisation is long past (IIRC it occured by unicode 3.2
released in March 2002), so no newly created/updated font family is
going to place those symbols in PUA anymore.

Now adding the AMS symbols to new fonts has been slow, due to the large
amount of software hardcoding Symbol (and equivallent) and masking the
actual glyph userbase to font makers. It will accelerate with more apps
expecting plain unicode by default.

Thanks for the testing!

Regards,

-- 
Nicolas Mailhot


From M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u  Fri Apr 10 02:41:44 2020
From: M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u (Bravington, Mark (Data61, Hobart))
Date: Fri, 10 Apr 2020 00:41:44 +0000
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>,
 <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
Message-ID: <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>

> On Thu, Apr 9, 2020 at 12:44 PM Bravington, Mark (Data61, Hobart)
> <Mark.Bravington at data61.csiro.au> wrote:
> >
> > The "r-devel snapshot build" 78175 on Windows--- a dot-exe installer--- seems to be missing a couple of files in its bin/i386 folder: Rterm.exe and Rgui.exe. Both are present in its bin/x64 folder (and in the i386 folder for current R).

From: Jeroen Ooms <jeroen at berkeley.edu>
Sent: Thursday, 9 April 2020 21:32
To: Bravington, Mark (Data61, Hobart)
Cc: R-Devel-2
Subject: Re: [Rd] missing binaries in R-devel windows snapshot 78175


> I just tested this and as far as I can tell there are no missing
> files. Are you sure there isn't a local problem with your system
> permissions or antivirus that is removing the files?

You're quite right--- my apologies. I've been Cylanced (without it having the politeness to actually tell me, grrrr). I tried again with the 78172 build that you used, and the two dot-exe files are there immediately after installation--- but 10 minutes later they're gone. One question below about the md5 stuff, though:

> Try to verify the md5 of the installer; some enterprise firewalls are
> tampering with downloads:

>   openssl::md5(url('https://cran.r-project.org/bin/windows/base/R-devel-win.exe'))
>   readLines('https://cran.r-project.org/bin/windows/base/md5sum.txt.R-devel')

Thanks for the tip. I did that, and both give the same output. But:

 - If I run 'md5sum' on my local copy of the 78182 installer (ie the file I've just downloaded) I again get the same signature as per your two lines. (It's not the firewall, it's Cylance.)
 
 - Yet if I run 'openssl::md5( <local copy of installer>)' I get a different signature!
 
That seems strange..?

Thanks for your help
Mark


From jeroen @end|ng |rom berke|ey@edu  Fri Apr 10 08:54:39 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Fri, 10 Apr 2020 08:54:39 +0200
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
 <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>
Message-ID: <CABFfbXs1y7K=vOrmQEFYh_Wto-LatdOhKpa0b0rztZqpFT_yDQ@mail.gmail.com>

On Fri, Apr 10, 2020 at 2:42 AM Bravington, Mark (Data61, Hobart)
<Mark.Bravington at data61.csiro.au> wrote:
>
> > On Thu, Apr 9, 2020 at 12:44 PM Bravington, Mark (Data61, Hobart)
> > <Mark.Bravington at data61.csiro.au> wrote:
> > >
> > > The "r-devel snapshot build" 78175 on Windows--- a dot-exe installer--- seems to be missing a couple of files in its bin/i386 folder: Rterm.exe and Rgui.exe. Both are present in its bin/x64 folder (and in the i386 folder for current R).
>
> From: Jeroen Ooms <jeroen at berkeley.edu>
> Sent: Thursday, 9 April 2020 21:32
> To: Bravington, Mark (Data61, Hobart)
> Cc: R-Devel-2
> Subject: Re: [Rd] missing binaries in R-devel windows snapshot 78175
>
>
> > I just tested this and as far as I can tell there are no missing
> > files. Are you sure there isn't a local problem with your system
> > permissions or antivirus that is removing the files?
>
> You're quite right--- my apologies. I've been Cylanced (without it having the politeness to actually tell me, grrrr). I tried again with the 78172 build that you used, and the two dot-exe files are there immediately after installation--- but 10 minutes later they're gone. One question below about the md5 stuff, though:
>
> > Try to verify the md5 of the installer; some enterprise firewalls are
> > tampering with downloads:
>
> >   openssl::md5(url('https://cran.r-project.org/bin/windows/base/R-devel-win.exe'))
> >   readLines('https://cran.r-project.org/bin/windows/base/md5sum.txt.R-devel')
>
> Thanks for the tip. I did that, and both give the same output. But:
>
>  - If I run 'md5sum' on my local copy of the 78182 installer (ie the file I've just downloaded) I again get the same signature as per your two lines. (It's not the firewall, it's Cylance.)
>
>  - Yet if I run 'openssl::md5( <local copy of installer>)' I get a different signature!

I think you're calculating the md5 of the filename, not the file. You
need to use:

  openssl::md5(file("R-devel-win.exe"))


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Apr 10 09:49:18 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 10 Apr 2020 09:49:18 +0200
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <CABFfbXs1y7K=vOrmQEFYh_Wto-LatdOhKpa0b0rztZqpFT_yDQ@mail.gmail.com>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
 <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>
 <CABFfbXs1y7K=vOrmQEFYh_Wto-LatdOhKpa0b0rztZqpFT_yDQ@mail.gmail.com>
Message-ID: <24208.9470.782097.483057@stat.math.ethz.ch>

>>>>> Jeroen Ooms 
>>>>>     on Fri, 10 Apr 2020 08:54:39 +0200 writes:

    > On Fri, Apr 10, 2020 at 2:42 AM Bravington, Mark (Data61,
    > Hobart) <Mark.Bravington at data61.csiro.au> wrote:
    >> 
    >> > On Thu, Apr 9, 2020 at 12:44 PM Bravington, Mark
    >> (Data61, Hobart) > <Mark.Bravington at data61.csiro.au>
    >> wrote:
    >> > >
    >> > > The "r-devel snapshot build" 78175 on Windows--- a
    >> dot-exe installer--- seems to be missing a couple of
    >> files in its bin/i386 folder: Rterm.exe and
    >> Rgui.exe. Both are present in its bin/x64 folder (and in
    >> the i386 folder for current R).
    >> 
    >> From: Jeroen Ooms <jeroen at berkeley.edu> Sent: Thursday, 9
    >> April 2020 21:32 To: Bravington, Mark (Data61, Hobart)
    >> Cc: R-Devel-2 Subject: Re: [Rd] missing binaries in
    >> R-devel windows snapshot 78175
    >> 
    >> 
    >> > I just tested this and as far as I can tell there are
    >> no missing > files. Are you sure there isn't a local
    >> problem with your system > permissions or antivirus that
    >> is removing the files?
    >> 
    >> You're quite right--- my apologies. I've been Cylanced
    >> (without it having the politeness to actually tell me,
    >> grrrr). I tried again with the 78172 build that you used,
    >> and the two dot-exe files are there immediately after
    >> installation--- but 10 minutes later they're gone. One
    >> question below about the md5 stuff, though:
    >> 
    >> > Try to verify the md5 of the installer; some enterprise
    >> firewalls are > tampering with downloads:
    >> 
    >> >
    >> openssl::md5(url('https://cran.r-project.org/bin/windows/base/R-devel-win.exe'))
    >> >
    >> readLines('https://cran.r-project.org/bin/windows/base/md5sum.txt.R-devel')
    >> 
    >> Thanks for the tip. I did that, and both give the same
    >> output. But:
    >> 
    >> - If I run 'md5sum' on my local copy of the 78182
    >> installer (ie the file I've just downloaded) I again get
    >> the same signature as per your two lines. (It's not the
    >> firewall, it's Cylance.)
    >> 
    >> - Yet if I run 'openssl::md5( <local copy of installer>)'
    >> I get a different signature!

    > I think you're calculating the md5 of the filename, not
    > the file. You need to use:

    >   openssl::md5(file("R-devel-win.exe"))

or use base R's    tools::md5sum(<local-file-name>)

md5sum() has existed forever, but needs you to do the
download.file() step  which is indirectly happening in
openssl::md5() also.


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Apr 10 09:55:14 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Apr 2020 08:55:14 +0100
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <24208.9470.782097.483057@stat.math.ethz.ch>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
 <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>
 <CABFfbXs1y7K=vOrmQEFYh_Wto-LatdOhKpa0b0rztZqpFT_yDQ@mail.gmail.com>
 <24208.9470.782097.483057@stat.math.ethz.ch>
Message-ID: <CABtg=KnoiW=pTqSHoevZ3KgCqqZMfra31zmTTb3d=vf3YdbUww@mail.gmail.com>

On Fri, Apr 10, 2020 at 8:49 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
[...]
>
>     >   openssl::md5(file("R-devel-win.exe"))
>
> or use base R's    tools::md5sum(<local-file-name>)
>
> md5sum() has existed forever, but needs you to do the
> download.file() step  which is indirectly happening in
> openssl::md5() also.

Don't use tools::md5sum() in portable code, though, at least not just
yet, because it is broken on non-ASCII filenames on Windows. (Fixed in
R-devel.)

Gabor


From M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u  Fri Apr 10 10:29:32 2020
From: M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u (Bravington, Mark (Data61, Hobart))
Date: Fri, 10 Apr 2020 08:29:32 +0000
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <24208.9470.782097.483057@stat.math.ethz.ch>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
 <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>
 <CABFfbXs1y7K=vOrmQEFYh_Wto-LatdOhKpa0b0rztZqpFT_yDQ@mail.gmail.com>,
 <24208.9470.782097.483057@stat.math.ethz.ch>
Message-ID: <ME2PR01MB24037A4094CEF446A94DF0B8B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>

Thanks all--- my fault again, this time for not reading the openssl::md5() documentation. Binaries all present and correct after all (on my Cylance-free machine), and checksums working as they should...

[Jeroen Ooms]  > I think you're calculating the md5 of the filename, not  the file. You need to use:

    >   openssl::md5(file("R-devel-win.exe"))

I am duly embarrassed...

[Martin Maechler] >  or use base R's    tools::md5sum(<local-file-name>) ...  which has existed forever 

[G?bor Cs?rdi] > Don't use tools::md5sum() in portable code, though, at least not just yet, because it is broken on non-ASCII filenames on Windows. (Fixed in R-devel.)

Indeed, I did use tools::md5sum(); it was the apparent difference between that and openssl::md5() that surprised me. I am a long-time fan of tools::md5sum(), and in fact it's used in a package of ours planned for release soon--- bit disconcerting to hear it's actually broken! However, I suspect R4.0 [ with fixed md5sum() ] will be released before our package sees the light of day.

Thanks again
Mark

Mark Bravington
CSIRO Marine Lab
Hobart
Australia


________________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Martin Maechler <maechler at stat.math.ethz.ch>
Sent: Friday, 10 April 2020 17:49
To: Jeroen Ooms
Cc: Bravington, Mark (Data61, Hobart); R-Devel-2
Subject: Re: [Rd] missing binaries in R-devel windows snapshot 78175

>>>>> Jeroen Ooms
>>>>>     on Fri, 10 Apr 2020 08:54:39 +0200 writes:

    > On Fri, Apr 10, 2020 at 2:42 AM Bravington, Mark (Data61,
    > Hobart) <Mark.Bravington at data61.csiro.au> wrote:
    >>
    >> > On Thu, Apr 9, 2020 at 12:44 PM Bravington, Mark
    >> (Data61, Hobart) > <Mark.Bravington at data61.csiro.au>
    >> wrote:
    >> > >
    >> > > The "r-devel snapshot build" 78175 on Windows--- a
    >> dot-exe installer--- seems to be missing a couple of
    >> files in its bin/i386 folder: Rterm.exe and
    >> Rgui.exe. Both are present in its bin/x64 folder (and in
    >> the i386 folder for current R).
    >>
    >> From: Jeroen Ooms <jeroen at berkeley.edu> Sent: Thursday, 9
    >> April 2020 21:32 To: Bravington, Mark (Data61, Hobart)
    >> Cc: R-Devel-2 Subject: Re: [Rd] missing binaries in
    >> R-devel windows snapshot 78175
    >>
    >>
    >> > I just tested this and as far as I can tell there are
    >> no missing > files. Are you sure there isn't a local
    >> problem with your system > permissions or antivirus that
    >> is removing the files?
    >>
    >> You're quite right--- my apologies. I've been Cylanced
    >> (without it having the politeness to actually tell me,
    >> grrrr). I tried again with the 78172 build that you used,
    >> and the two dot-exe files are there immediately after
    >> installation--- but 10 minutes later they're gone. One
    >> question below about the md5 stuff, though:
    >>
    >> > Try to verify the md5 of the installer; some enterprise
    >> firewalls are > tampering with downloads:
    >>
    >> >
    >> openssl::md5(url('https://cran.r-project.org/bin/windows/base/R-devel-win.exe'))
    >> >
    >> readLines('https://cran.r-project.org/bin/windows/base/md5sum.txt.R-devel')
    >>
    >> Thanks for the tip. I did that, and both give the same
    >> output. But:
    >>
    >> - If I run 'md5sum' on my local copy of the 78182
    >> installer (ie the file I've just downloaded) I again get
    >> the same signature as per your two lines. (It's not the
    >> firewall, it's Cylance.)
    >>
    >> - Yet if I run 'openssl::md5( <local copy of installer>)'
    >> I get a different signature!

    > I think you're calculating the md5 of the filename, not
    > the file. You need to use:

    >   openssl::md5(file("R-devel-win.exe"))

or use base R's    tools::md5sum(<local-file-name>)

md5sum() has existed forever, but needs you to do the
download.file() step  which is indirectly happening in
openssl::md5() also.

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroen @end|ng |rom berke|ey@edu  Fri Apr 10 11:33:03 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Fri, 10 Apr 2020 11:33:03 +0200
Subject: [Rd] missing binaries in R-devel windows snapshot 78175
In-Reply-To: <24208.9470.782097.483057@stat.math.ethz.ch>
References: <MEAPR01MB2407CE5D97A62210B4F98DC3B4C00@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <CABFfbXtH+UkF+ZoBjh=R-Uv9DuGPKXjBCkTDCaHutBcbndCAHQ@mail.gmail.com>
 <ME2PR01MB2403DF7A124DCB01CFB20A01B4DE0@ME2PR01MB2403.ausprd01.prod.outlook.com>
 <CABFfbXs1y7K=vOrmQEFYh_Wto-LatdOhKpa0b0rztZqpFT_yDQ@mail.gmail.com>
 <24208.9470.782097.483057@stat.math.ethz.ch>
Message-ID: <CABFfbXu-uv+oFnj4ihCa+gexy=c3hmFxXAcNsRvz4W=6EfCy=Q@mail.gmail.com>

On Fri, Apr 10, 2020 at 9:49 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Jeroen Ooms
> >>>>>     on Fri, 10 Apr 2020 08:54:39 +0200 writes:
>
>     > On Fri, Apr 10, 2020 at 2:42 AM Bravington, Mark (Data61,
>     > Hobart) <Mark.Bravington at data61.csiro.au> wrote:
>     >>
>     >> > On Thu, Apr 9, 2020 at 12:44 PM Bravington, Mark
>     >> (Data61, Hobart) > <Mark.Bravington at data61.csiro.au>
>     >> wrote:
>     >> > >
>     >> > > The "r-devel snapshot build" 78175 on Windows--- a
>     >> dot-exe installer--- seems to be missing a couple of
>     >> files in its bin/i386 folder: Rterm.exe and
>     >> Rgui.exe. Both are present in its bin/x64 folder (and in
>     >> the i386 folder for current R).
>     >>
>     >> From: Jeroen Ooms <jeroen at berkeley.edu> Sent: Thursday, 9
>     >> April 2020 21:32 To: Bravington, Mark (Data61, Hobart)
>     >> Cc: R-Devel-2 Subject: Re: [Rd] missing binaries in
>     >> R-devel windows snapshot 78175
>     >>
>     >>
>     >> > I just tested this and as far as I can tell there are
>     >> no missing > files. Are you sure there isn't a local
>     >> problem with your system > permissions or antivirus that
>     >> is removing the files?
>     >>
>     >> You're quite right--- my apologies. I've been Cylanced
>     >> (without it having the politeness to actually tell me,
>     >> grrrr). I tried again with the 78172 build that you used,
>     >> and the two dot-exe files are there immediately after
>     >> installation--- but 10 minutes later they're gone. One
>     >> question below about the md5 stuff, though:
>     >>
>     >> > Try to verify the md5 of the installer; some enterprise
>     >> firewalls are > tampering with downloads:
>     >>
>     >> >
>     >> openssl::md5(url('https://cran.r-project.org/bin/windows/base/R-devel-win.exe'))
>     >> >
>     >> readLines('https://cran.r-project.org/bin/windows/base/md5sum.txt.R-devel')
>     >>
>     >> Thanks for the tip. I did that, and both give the same
>     >> output. But:
>     >>
>     >> - If I run 'md5sum' on my local copy of the 78182
>     >> installer (ie the file I've just downloaded) I again get
>     >> the same signature as per your two lines. (It's not the
>     >> firewall, it's Cylance.)
>     >>
>     >> - Yet if I run 'openssl::md5( <local copy of installer>)'
>     >> I get a different signature!
>
>     > I think you're calculating the md5 of the filename, not
>     > the file. You need to use:
>
>     >   openssl::md5(file("R-devel-win.exe"))
>
> or use base R's    tools::md5sum(<local-file-name>)
>
> md5sum() has existed forever, but needs you to do the
> download.file() step  which is indirectly happening in
> openssl::md5() also.

Not entirely the same way though! The openssl implementation of md5,
sha256, etc calculate the hash directly from the connection stream,
without ever storing the entire file on disk or in memory. It
efficiently hashes arbitrary large data from any readable R connection
(url, file, pipe, etc) using a fixed amount of memory. This is
important for researchers that calculate hashes for very large data
files, where copying the entire data to disk or memory is impossible.

However, in this case it's just a small file, so tools::md5sum() is
simpler indeed :)


From jh@u||@ @end|ng |rom gm@||@com  Sat Apr 11 15:51:49 2020
From: jh@u||@ @end|ng |rom gm@||@com (Jan Hauffa)
Date: Sat, 11 Apr 2020 15:51:49 +0200
Subject: [Rd] Long model specification causes aov() to abort with error
Message-ID: <f1dcacd1-bfb8-975b-2999-1e410e816e21@gmail.com>

Dear R developers,

while experimenting with repeated measures ANOVA, I found out that it is 
possible to construct a model specification that is syntactically valid, 
but causes aov() to abort with an error. A minimal reproducer and its 
output are attached to this mail. I was able to reproduce this problem 
with the latest SVN revision.

The root cause is similar to that of bug 15377: aov() calls deparse() on 
the model specification. If the resulting string is too long, e.g. due 
to long column names, deparse() performs line breaking and returns a 
vector of strings, which aov() does not handle correctly.

The attached patch fixes this problem by making aov() call deparse1(). 
It also corrects an error in the documentation of deparse1().

Please CC me on replies as I am not subscribed to the mailing list.

With best regards,
   Jan Hauffa

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: aov.diff
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200411/155d7990/attachment.ksh>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: error.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200411/155d7990/attachment.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: testcase.R
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200411/155d7990/attachment-0001.ksh>

From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Apr 12 14:57:14 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 12 Apr 2020 08:57:14 -0400
Subject: [Rd] stringsAsFactors
Message-ID: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>

The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE 
default, and hence by default no longer converts strings to factors in 
calls to data.frame() and read.table()."

This seems to have been implemented by setting options(stringsAsFactors 
= FALSE) in the main R profile.  However, setting

options(stringsAsFactors = NULL)

reverts to the same behavior as the old options(stringsAsFactors = 
TRUE).  Is this intentional?

Duncan Murdoch


From du@@@@dr|@n @end|ng |rom gm@||@com  Mon Apr 13 09:38:51 2020
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?utf-8?Q?Adrian_Du=C8=99a?=)
Date: Mon, 13 Apr 2020 10:38:51 +0300
Subject: [Rd] detect ->
Message-ID: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>

I searched and tried for hours, to no avail although it looks simple.

(function(x) substitute(x))(A <- B)
#A <- B

(function(x) substitute(x))(A -> B)
# B <- A

In the first example, A occurs on the LHS, but in the second example A is somehow evaluated as if it occured on the RHS, despite my understanding that substitute() returns the unevaluated parse tree.

Is there any way, or is it even possible to detect the right hand assignment, to determine whether A occurs on the LHS?

Thanks in advance for any hint,
Adrian

?
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Apr 13 09:51:16 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 13 Apr 2020 08:51:16 +0100
Subject: [Rd] detect ->
In-Reply-To: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
Message-ID: <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>

That parser already flips -> to <- before creating the parse tree.

Gabor

On Mon, Apr 13, 2020 at 8:39 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:
>
> I searched and tried for hours, to no avail although it looks simple.
>
> (function(x) substitute(x))(A <- B)
> #A <- B
>
> (function(x) substitute(x))(A -> B)
> # B <- A
>
> In the first example, A occurs on the LHS, but in the second example A is somehow evaluated as if it occured on the RHS, despite my understanding that substitute() returns the unevaluated parse tree.
>
> Is there any way, or is it even possible to detect the right hand assignment, to determine whether A occurs on the LHS?
>
> Thanks in advance for any hint,
> Adrian
>
> ?
> Adrian Dusa
> University of Bucharest
> Romanian Social Data Archive
> Soseaua Panduri nr. 90-92
> 050663 Bucharest sector 5
> Romania
> https://adriandusa.eu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 13 09:56:26 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 13 Apr 2020 09:56:26 +0200
Subject: [Rd] stringsAsFactors
In-Reply-To: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
References: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
Message-ID: <24212.6954.256734.135105@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Sun, 12 Apr 2020 08:57:14 -0400 writes:

    > The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE 
    > default, and hence by default no longer converts strings to factors in 
    > calls to data.frame() and read.table()."

    > This seems to have been implemented by setting options(stringsAsFactors 
    > = FALSE) in the main R profile.  However, setting

    > options(stringsAsFactors = NULL)

    > reverts to the same behavior as the old options(stringsAsFactors = 
    > TRUE).  Is this intentional?


No!  Thanks a lot for testing R 4.0.0 alpha/beta, noticing and
alerting us about it.

This will be changed ASAP.

... and it will benefit the whole R user community if quite a
few good R users (as most readers of 'R-devel') would start
using 'R 4.0.0 beta' routinely now --- thanks a lot in advance!

Martin


From g@bembecker @end|ng |rom gm@||@com  Mon Apr 13 10:23:21 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 13 Apr 2020 01:23:21 -0700
Subject: [Rd] detect ->
In-Reply-To: <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
Message-ID: <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>

Adrian,

Indeed, this has come up in a few places, but as Gabor says, there is no
such thing as right hand assignment at any point after parsing is complete.

This means the only feasible way to detect it, which a few projects do I
believe, is process the code while it is still raw text, before it goes
into the parser, and have clever enough regular expressions.

The next question, then, is why are you trying to detect right assignment.
Doing so can be arguably useful fo linting, its true. Otherwise, though,
because its not really a "real thing" when the R code is being executed,
its not something thats generally meaningful to detect in most cases.

Best,
~G

On Mon, Apr 13, 2020 at 12:52 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
wrote:

> That parser already flips -> to <- before creating the parse tree.
>
> Gabor
>
> On Mon, Apr 13, 2020 at 8:39 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:
> >
> > I searched and tried for hours, to no avail although it looks simple.
> >
> > (function(x) substitute(x))(A <- B)
> > #A <- B
> >
> > (function(x) substitute(x))(A -> B)
> > # B <- A
> >
> > In the first example, A occurs on the LHS, but in the second example A
> is somehow evaluated as if it occured on the RHS, despite my understanding
> that substitute() returns the unevaluated parse tree.
> >
> > Is there any way, or is it even possible to detect the right hand
> assignment, to determine whether A occurs on the LHS?
> >
> > Thanks in advance for any hint,
> > Adrian
> >
> > ?
> > Adrian Dusa
> > University of Bucharest
> > Romanian Social Data Archive
> > Soseaua Panduri nr. 90-92
> > 050663 Bucharest sector 5
> > Romania
> > https://adriandusa.eu
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Apr 13 10:32:16 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 13 Apr 2020 09:32:16 +0100
Subject: [Rd] detect ->
In-Reply-To: <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
Message-ID: <CABtg=KkwE5msPb1PyV3Lo1LgpkOtuiEv_BFEwZmswG-7Fa4ADA@mail.gmail.com>

On Mon, Apr 13, 2020 at 9:23 AM Gabriel Becker <gabembecker at gmail.com> wrote:
[...]
> This means the only feasible way to detect it, which a few projects do I believe, is process the code while it is still raw text, before it goes into the parser, and have clever enough regular expressions.

Well, especially considering R's news raw strings with user defined
delimiters, regular expressions are not the best here, I think. OTOH
the source references do keep the right assignment. So if you can
re-parse the data, you can detect them:

? x <- parse(text = "A -> B", keep.source=FALSE)
? x
expression(B <- A)

? x <- parse(text = "A -> B")
? x
expression(A -> B)

? getParseData(x)
  line1 col1 line2 col2 id parent        token terminal text
7     1    1     1    6  7      0         expr    FALSE
1     1    1     1    1  1      3       SYMBOL     TRUE    A
3     1    1     1    1  3      7         expr    FALSE
2     1    3     1    4  2      7 RIGHT_ASSIGN     TRUE   ->
4     1    6     1    6  4      6       SYMBOL     TRUE    B
6     1    6     1    6  6      7         expr    FALSE

Gabor

[...]


From du@@@@dr|@n @end|ng |rom gm@||@com  Mon Apr 13 10:39:11 2020
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?utf-8?Q?Adrian_Du=C8=99a?=)
Date: Mon, 13 Apr 2020 11:39:11 +0300
Subject: [Rd] detect ->
In-Reply-To: <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
Message-ID: <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>

Thank you for your replies, this actually has little to do with the regular R code but more to signal what in my package QCA is referred to as a necessity relation A <- B (A is necessary for B) and sufficiency A -> B (A is sufficient for B).

If switched by the parser, A -> B becomes B <- A which makes B necessary for A, while the intention is to signal sufficiency for B.

Capturing in a quoted string is trivial, but I am now experimenting with substitute() to allow unquoted expressions.

This is especially useful when selecting A and B from the columns of a data frame, using: c(A, B) instead of c("A", "B") with a lot more quotes for more complex expressions using more columns.

I would be grateful for any pointer to a project that processes the code while it is still raw text. I could maybe learn from their code and adapt to my use case.

Best wishes,
Adrian

> On 13 Apr 2020, at 11:23, Gabriel Becker <gabembecker at gmail.com> wrote:
> 
> Adrian,
> 
> Indeed, this has come up in a few places, but as Gabor says, there is no such thing as right hand assignment at any point after parsing is complete.
> 
> This means the only feasible way to detect it, which a few projects do I believe, is process the code while it is still raw text, before it goes into the parser, and have clever enough regular expressions.
> 
> The next question, then, is why are you trying to detect right assignment. Doing so can be arguably useful fo linting, its true. Otherwise, though, because its not really a "real thing" when the R code is being executed, its not something thats generally meaningful to detect in most cases.
> 
> Best,
> ~G
> 
> On Mon, Apr 13, 2020 at 12:52 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> That parser already flips -> to <- before creating the parse tree.
> 
> Gabor
> 
> On Mon, Apr 13, 2020 at 8:39 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:
> >
> > I searched and tried for hours, to no avail although it looks simple.
> >
> > (function(x) substitute(x))(A <- B)
> > #A <- B
> >
> > (function(x) substitute(x))(A -> B)
> > # B <- A
> >
> > In the first example, A occurs on the LHS, but in the second example A is somehow evaluated as if it occured on the RHS, despite my understanding that substitute() returns the unevaluated parse tree.
> >
> > Is there any way, or is it even possible to detect the right hand assignment, to determine whether A occurs on the LHS?
> >
> > Thanks in advance for any hint,
> > Adrian
> >
> > ?
> > Adrian Dusa
> > University of Bucharest
> > Romanian Social Data Archive
> > Soseaua Panduri nr. 90-92
> > 050663 Bucharest sector 5
> > Romania
> > https://adriandusa.eu
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

?
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 13 11:45:27 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 13 Apr 2020 11:45:27 +0200
Subject: [Rd] Long model specification causes aov() to abort with error
In-Reply-To: <f1dcacd1-bfb8-975b-2999-1e410e816e21@gmail.com>
References: <f1dcacd1-bfb8-975b-2999-1e410e816e21@gmail.com>
Message-ID: <24212.13495.676362.612340@stat.math.ethz.ch>

>>>>> Jan Hauffa 
>>>>>     on Sat, 11 Apr 2020 15:51:49 +0200 writes:

    > Dear R developers,
    > while experimenting with repeated measures ANOVA, I found out that it is 
    > possible to construct a model specification that is syntactically valid, 
    > but causes aov() to abort with an error. A minimal reproducer and its 
    > output are attached to this mail. I was able to reproduce this problem 
    > with the latest SVN revision.

    > The root cause is similar to that of bug 15377: aov() calls deparse() on 
    > the model specification. If the resulting string is too long, e.g. due 
    > to long column names, deparse() performs line breaking and returns a 
    > vector of strings, which aov() does not handle correctly.

    > The attached patch fixes this problem by making aov() call deparse1(). 
    > It also corrects an error in the documentation of deparse1().

Thank you.   What you write above seems all reasonable
(and as a poster who is able to attach 3 different plain text
 files, named logically (i.e. without calling them <foo>.txt),
 I pre-judge your programming abilities to be quite high !)

I'll look at the cases etc and will use your proposals.

(The only question for now: why did you not take the extra step
 and ask for R-bugs registration and do a regular bug report
  -> https://www.r-project.org/bugs.html )

Thanks again,
Martin Maechler
ETH Zurich and R Core Team

    > Please CC me on replies as I am not subscribed to the mailing list.

    > With best regards,
    > Jan Hauffa
    > x[DELETED ATTACHMENT external: aov.diff, plain text]
    > x[DELETED ATTACHMENT external: aov-error.txt, plain text]
    > x[DELETED ATTACHMENT external: aov-testcase.R, plain text]
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From k@ro||@@koncev|c|u@ @end|ng |rom gm@||@com  Mon Apr 13 13:01:43 2020
From: k@ro||@@koncev|c|u@ @end|ng |rom gm@||@com (Karolis =?utf-8?Q?Koncevi=C4=8Dius?=)
Date: Mon, 13 Apr 2020 14:01:43 +0300
Subject: [Rd] stringsAsFactors
In-Reply-To: <24212.6954.256734.135105@stat.math.ethz.ch>
References: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
 <24212.6954.256734.135105@stat.math.ethz.ch>
Message-ID: <20200413110143.idokusxryi3ihrfm@PMW>

Hello,

I also want to report 2 missed cases of stringsAsFactors=TRUE in base:

1. grid.expand() still uses hard stringsAsFactors=TRUE in its arguments.
2. as.data.frame.table() also keeps factors after conversion from table.

>>>>>> Duncan Murdoch
>>>>>>     on Sun, 12 Apr 2020 08:57:14 -0400 writes:
>
>    > The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE
>    > default, and hence by default no longer converts strings to factors in
>    > calls to data.frame() and read.table()."
>
>    > This seems to have been implemented by setting options(stringsAsFactors
>    > = FALSE) in the main R profile.  However, setting
>
>    > options(stringsAsFactors = NULL)
>
>    > reverts to the same behavior as the old options(stringsAsFactors =
>    > TRUE).  Is this intentional?
>
>
>No!  Thanks a lot for testing R 4.0.0 alpha/beta, noticing and
>alerting us about it.
>
>This will be changed ASAP.
>
>... and it will benefit the whole R user community if quite a
>few good R users (as most readers of 'R-devel') would start
>using 'R 4.0.0 beta' routinely now --- thanks a lot in advance!
>
>Martin
>
>______________________________________________
>R-devel at r-project.org mailing list
>https://stat.ethz.ch/mailman/listinfo/r-devel


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Mon Apr 13 13:20:26 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Mon, 13 Apr 2020 21:20:26 +1000
Subject: [Rd] stringsAsFactors
In-Reply-To: <24212.6954.256734.135105@stat.math.ethz.ch>
References: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
 <24212.6954.256734.135105@stat.math.ethz.ch>
Message-ID: <CAJmOi+NeKmiDErq6fVpRaO8gD+wY5C6qu4TQSQdtxSLxz2hPxw@mail.gmail.com>

Further, in addition to the `val <- FALSE` patch a few hours ago by
Martin, the line after should also be changed

- if(!is.logical(val) || is.na(val) || length(val) != 1L)
+ if(!is.logical(val) || length(val) != 1L || is.na(val))

## Consider
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "TRUE")
options(stringsAsFactors = c(TRUE, FALSE))
default.stringsAsFactors()  # correct error message

On Mon, 13 Apr 2020 at 18:02, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Duncan Murdoch
> >>>>>     on Sun, 12 Apr 2020 08:57:14 -0400 writes:
>
>     > The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE
>     > default, and hence by default no longer converts strings to factors in
>     > calls to data.frame() and read.table()."
>
>     > This seems to have been implemented by setting options(stringsAsFactors
>     > = FALSE) in the main R profile.  However, setting
>
>     > options(stringsAsFactors = NULL)
>
>     > reverts to the same behavior as the old options(stringsAsFactors =
>     > TRUE).  Is this intentional?
>
>
> No!  Thanks a lot for testing R 4.0.0 alpha/beta, noticing and
> alerting us about it.
>
> This will be changed ASAP.
>
> ... and it will benefit the whole R user community if quite a
> few good R users (as most readers of 'R-devel') would start
> using 'R 4.0.0 beta' routinely now --- thanks a lot in advance!
>
> Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Mon Apr 13 12:05:48 2020
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Mon, 13 Apr 2020 10:05:48 +0000
Subject: [Rd] Poor family objects error messages
Message-ID: <359817369D2F154783F7B0CA6C8DA62F0F2A5D@bi3.adm.chu-rouen.lan>

Hello,

The following code:

> binomial(identity)

Generates an error message:
Error in binomial(identity) :
  link "identity" not available for binomial family; available links are ?logit?, ?probit?, ?cloglog?, ?cauchit?, ?log?

While :
> binomial("identity")
Yields an identity-binomial object that works as expected with stats::glm

The error in the first example mislead me during years. I thought identity-binomial models were unsupported by R.
The documentation is correct but misleading too.

> The gaussian family accepts the links (as names) identity, log and inverse; the binomial family the
> links logit, probit, cauchit, (corresponding to logistic, normal and Cauchy CDFs respectively) log and
> cloglog (complementary log-log);

Without changing the language, this could be fixed by changing the error messages to something more suggestive.

Suggestion:
Error in binomial(identity) :
  name identity not available for binomial family; please use a character string such as binomial("identity")

The documentation could be updated to insist on that.

The gaussian family accepts the links (as names) identity, log and inverse; the binomial family the
links logit, probit, cauchit, (corresponding to logistic, normal and Cauchy CDFs respectively) log and
cloglog (complementary log-log); [...] If the link function is given as a character string, all families accept all link functions.

What do you think of that ?

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Mon Apr 13 13:57:43 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 13 Apr 2020 13:57:43 +0200
Subject: [Rd] stringsAsFactors
In-Reply-To: <20200413110143.idokusxryi3ihrfm@PMW>
References: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
 <24212.6954.256734.135105@stat.math.ethz.ch>
 <20200413110143.idokusxryi3ihrfm@PMW>
Message-ID: <BB79BD3F-D223-4E1D-BA53-ADBD99AC8352@gmail.com>

In both cases, that is as it should be. 

1. expand.grid() (sic) has its main application in factorial designs, for which you want a set of factors

2. tables are factorial structures by nature. Converting factors to character would lose level order (true for 1. as well, actually)

- pd 

> On 13 Apr 2020, at 13:01 , Karolis Koncevi?ius <karolis.koncevicius at gmail.com> wrote:
> 
> Hello,
> 
> I also want to report 2 missed cases of stringsAsFactors=TRUE in base:
> 
> 1. grid.expand() still uses hard stringsAsFactors=TRUE in its arguments.
> 2. as.data.frame.table() also keeps factors after conversion from table.
> 
>>>>>>> Duncan Murdoch
>>>>>>>    on Sun, 12 Apr 2020 08:57:14 -0400 writes:
>> 
>>   > The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE
>>   > default, and hence by default no longer converts strings to factors in
>>   > calls to data.frame() and read.table()."
>> 
>>   > This seems to have been implemented by setting options(stringsAsFactors
>>   > = FALSE) in the main R profile.  However, setting
>> 
>>   > options(stringsAsFactors = NULL)
>> 
>>   > reverts to the same behavior as the old options(stringsAsFactors =
>>   > TRUE).  Is this intentional?
>> 
>> 
>> No!  Thanks a lot for testing R 4.0.0 alpha/beta, noticing and
>> alerting us about it.
>> 
>> This will be changed ASAP.
>> 
>> ... and it will benefit the whole R user community if quite a
>> few good R users (as most readers of 'R-devel') would start
>> using 'R 4.0.0 beta' routinely now --- thanks a lot in advance!
>> 
>> Martin
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 13 14:14:21 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 13 Apr 2020 14:14:21 +0200
Subject: [Rd] stringsAsFactors
In-Reply-To: <CAJmOi+NeKmiDErq6fVpRaO8gD+wY5C6qu4TQSQdtxSLxz2hPxw@mail.gmail.com>
References: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
 <24212.6954.256734.135105@stat.math.ethz.ch>
 <CAJmOi+NeKmiDErq6fVpRaO8gD+wY5C6qu4TQSQdtxSLxz2hPxw@mail.gmail.com>
Message-ID: <24212.22429.652577.149598@stat.math.ethz.ch>

>>>>> Hugh Parsonage 
>>>>>     on Mon, 13 Apr 2020 21:20:26 +1000 writes:

    > Further, in addition to the `val <- FALSE` patch a few hours ago by
    > Martin, the line after should also be changed

    > - if(!is.logical(val) || is.na(val) || length(val) != 1L)
    > + if(!is.logical(val) || length(val) != 1L || is.na(val))

    > ## Consider
    > Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "TRUE")
    > options(stringsAsFactors = c(TRUE, FALSE))

In R-devel and R 4.0.0 alpha/beta, you have

> options(stringsAsFactors = c(TRUE, FALSE))
Error in options(stringsAsFactors = c(TRUE, FALSE)) : 
  invalid value for 'stringsAsFactors'


    > default.stringsAsFactors()  # correct error message

Note that the default.stringsAsFactors() function is also
deprecated, of course.  Not "formally", in the sense that its
use would give a deprecation warning  {which would be *bad* as
  it's still used for the default argument e.g. of read.table()},
but the help page (in R-devel and R 4.0.0 "pre-release")
has been saying for a while now

1)

Usage:

     data.frame(  ......... )
     
     default.stringsAsFactors() # << this is deprecated !
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^

and 2)   in  'Details:' 

     default.stringsAsFactors is a utility ............
     ........... ............  This function is *deprecated* now and will
     no longer be available in the future.


and so it'd be a waste to change it unnecessarily.
Martin

    > On Mon, 13 Apr 2020 at 18:02, Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> >>>>> Duncan Murdoch
    >> >>>>>     on Sun, 12 Apr 2020 08:57:14 -0400 writes:
    >> 
    >> > The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE
    >> > default, and hence by default no longer converts strings to factors in
    >> > calls to data.frame() and read.table()."
    >> 
    >> > This seems to have been implemented by setting options(stringsAsFactors
    >> > = FALSE) in the main R profile.  However, setting
    >> 
    >> > options(stringsAsFactors = NULL)
    >> 
    >> > reverts to the same behavior as the old options(stringsAsFactors =
    >> > TRUE).  Is this intentional?
    >> 
    >> 
    >> No!  Thanks a lot for testing R 4.0.0 alpha/beta, noticing and
    >> alerting us about it.
    >> 
    >> This will be changed ASAP.
    >> 
    >> ... and it will benefit the whole R user community if quite a
    >> few good R users (as most readers of 'R-devel') would start
    >> using 'R 4.0.0 beta' routinely now --- thanks a lot in advance!
    >> 
    >> Martin
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Mon Apr 13 18:19:40 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 13 Apr 2020 09:19:40 -0700
Subject: [Rd] detect ->
In-Reply-To: <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
 <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
Message-ID: <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>

Using => and <= instead of -> and <- would make things easier, although the
precedence would be different.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, Apr 13, 2020 at 1:43 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:

> Thank you for your replies, this actually has little to do with the
> regular R code but more to signal what in my package QCA is referred to as
> a necessity relation A <- B (A is necessary for B) and sufficiency A -> B
> (A is sufficient for B).
>
> If switched by the parser, A -> B becomes B <- A which makes B necessary
> for A, while the intention is to signal sufficiency for B.
>
> Capturing in a quoted string is trivial, but I am now experimenting with
> substitute() to allow unquoted expressions.
>
> This is especially useful when selecting A and B from the columns of a
> data frame, using: c(A, B) instead of c("A", "B") with a lot more quotes
> for more complex expressions using more columns.
>
> I would be grateful for any pointer to a project that processes the code
> while it is still raw text. I could maybe learn from their code and adapt
> to my use case.
>
> Best wishes,
> Adrian
>
> > On 13 Apr 2020, at 11:23, Gabriel Becker <gabembecker at gmail.com> wrote:
> >
> > Adrian,
> >
> > Indeed, this has come up in a few places, but as Gabor says, there is no
> such thing as right hand assignment at any point after parsing is complete.
> >
> > This means the only feasible way to detect it, which a few projects do I
> believe, is process the code while it is still raw text, before it goes
> into the parser, and have clever enough regular expressions.
> >
> > The next question, then, is why are you trying to detect right
> assignment. Doing so can be arguably useful fo linting, its true.
> Otherwise, though, because its not really a "real thing" when the R code is
> being executed, its not something thats generally meaningful to detect in
> most cases.
> >
> > Best,
> > ~G
> >
> > On Mon, Apr 13, 2020 at 12:52 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
> > That parser already flips -> to <- before creating the parse tree.
> >
> > Gabor
> >
> > On Mon, Apr 13, 2020 at 8:39 AM Adrian Du?a <dusa.adrian at gmail.com>
> wrote:
> > >
> > > I searched and tried for hours, to no avail although it looks simple.
> > >
> > > (function(x) substitute(x))(A <- B)
> > > #A <- B
> > >
> > > (function(x) substitute(x))(A -> B)
> > > # B <- A
> > >
> > > In the first example, A occurs on the LHS, but in the second example A
> is somehow evaluated as if it occured on the RHS, despite my understanding
> that substitute() returns the unevaluated parse tree.
> > >
> > > Is there any way, or is it even possible to detect the right hand
> assignment, to determine whether A occurs on the LHS?
> > >
> > > Thanks in advance for any hint,
> > > Adrian
> > >
> > > ?
> > > Adrian Dusa
> > > University of Bucharest
> > > Romanian Social Data Archive
> > > Soseaua Panduri nr. 90-92
> > > 050663 Bucharest sector 5
> > > Romania
> > > https://adriandusa.eu
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ?
> Adrian Dusa
> University of Bucharest
> Romanian Social Data Archive
> Soseaua Panduri nr. 90-92
> 050663 Bucharest sector 5
> Romania
> https://adriandusa.eu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Apr 13 21:52:37 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 13 Apr 2020 12:52:37 -0700
Subject: [Rd] stringsAsFactors
In-Reply-To: <24212.22429.652577.149598@stat.math.ethz.ch>
References: <e9c057e7-9c64-38ff-c936-fea6c1437b1c@gmail.com>
 <24212.6954.256734.135105@stat.math.ethz.ch>
 <CAJmOi+NeKmiDErq6fVpRaO8gD+wY5C6qu4TQSQdtxSLxz2hPxw@mail.gmail.com>
 <24212.22429.652577.149598@stat.math.ethz.ch>
Message-ID: <CAFDcVCSV7B4YYPW-grNAQz8igQgdbn666TLEUHZdX5RrGX+WRw@mail.gmail.com>

While at it, would it be worth mentioning in the NEWS for R 4.0.0 that
options 'stringsAsFactors' is being deprecated, e.g.

$ options(stringsAsFactors = TRUE)
Warning message:
In options(stringsAsFactors = TRUE) :
  'options(stringsAsFactors = TRUE)' is deprecated and will be disabled

?  Currently, the news only says:

* R now uses a stringsAsFactors = FALSE default, and hence by default
no longer converts strings to factors in calls to data.frame() and
read.table().

/Henrik

On Mon, Apr 13, 2020 at 5:23 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Hugh Parsonage
> >>>>>     on Mon, 13 Apr 2020 21:20:26 +1000 writes:
>
>     > Further, in addition to the `val <- FALSE` patch a few hours ago by
>     > Martin, the line after should also be changed
>
>     > - if(!is.logical(val) || is.na(val) || length(val) != 1L)
>     > + if(!is.logical(val) || length(val) != 1L || is.na(val))
>
>     > ## Consider
>     > Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "TRUE")
>     > options(stringsAsFactors = c(TRUE, FALSE))
>
> In R-devel and R 4.0.0 alpha/beta, you have
>
> > options(stringsAsFactors = c(TRUE, FALSE))
> Error in options(stringsAsFactors = c(TRUE, FALSE)) :
>   invalid value for 'stringsAsFactors'
>
>
>     > default.stringsAsFactors()  # correct error message
>
> Note that the default.stringsAsFactors() function is also
> deprecated, of course.  Not "formally", in the sense that its
> use would give a deprecation warning  {which would be *bad* as
>   it's still used for the default argument e.g. of read.table()},
> but the help page (in R-devel and R 4.0.0 "pre-release")
> has been saying for a while now
>
> 1)
>
> Usage:
>
>      data.frame(  ......... )
>
>      default.stringsAsFactors() # << this is deprecated !
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>
> and 2)   in  'Details:'
>
>      default.stringsAsFactors is a utility ............
>      ........... ............  This function is *deprecated* now and will
>      no longer be available in the future.
>
>
> and so it'd be a waste to change it unnecessarily.
> Martin
>
>     > On Mon, 13 Apr 2020 at 18:02, Martin Maechler
>     > <maechler at stat.math.ethz.ch> wrote:
>     >>
>     >> >>>>> Duncan Murdoch
>     >> >>>>>     on Sun, 12 Apr 2020 08:57:14 -0400 writes:
>     >>
>     >> > The NEWS for R 4.0.0 says "R now uses a stringsAsFactors = FALSE
>     >> > default, and hence by default no longer converts strings to factors in
>     >> > calls to data.frame() and read.table()."
>     >>
>     >> > This seems to have been implemented by setting options(stringsAsFactors
>     >> > = FALSE) in the main R profile.  However, setting
>     >>
>     >> > options(stringsAsFactors = NULL)
>     >>
>     >> > reverts to the same behavior as the old options(stringsAsFactors =
>     >> > TRUE).  Is this intentional?
>     >>
>     >>
>     >> No!  Thanks a lot for testing R 4.0.0 alpha/beta, noticing and
>     >> alerting us about it.
>     >>
>     >> This will be changed ASAP.
>     >>
>     >> ... and it will benefit the whole R user community if quite a
>     >> few good R users (as most readers of 'R-devel') would start
>     >> using 'R 4.0.0 beta' routinely now --- thanks a lot in advance!
>     >>
>     >> Martin
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Arn|@m@gnu@@on @end|ng |rom |ce@@dk  Tue Apr 14 00:20:19 2020
From: Arn|@m@gnu@@on @end|ng |rom |ce@@dk (Arni Magnusson)
Date: Mon, 13 Apr 2020 22:20:19 +0000
Subject: [Rd] stringsAsFactors and type.convert()
Message-ID: <d5709bc0fbf748d18359feb84eccae9d@ices.dk>

If read.table() is defaulting to "character" instead of "factor" data type, shouldn't type.convert() also default to "character" in R 4.0.0?

This would seem like a good time to change the default to type.convert(as.is=TRUE), to align it with the new default in read.table and data.frame. I think many R >=4.0.0 users would be happy with as.is=TRUE as the default in type.convert.

I'm happy to work on the patch and run tests if that is helpful.

Cheers,
Arni


From d@@tt@|| @end|ng |rom gm@||@com  Tue Apr 14 19:01:01 2020
From: d@@tt@|| @end|ng |rom gm@||@com (Dean Attali)
Date: Tue, 14 Apr 2020 13:01:01 -0400
Subject: [Rd] Suggestion/opinions: add a `absolute` param to
 `normalizePath()` to force returning an absolute path
Message-ID: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>

This request stems off a bug report I posted
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17757 where it was
determined the current behaviour is as expected.

To recap: when given a real file, normalizePath() always* returns the full
absolute path. When given a non-existent file, normalizePath() returns a
full path on Windows but it returns the input on other systems*. I'd argue
that there are benefits to being able to reliably and consistently get a
full path, regardless of whether the file exists or not. In order to not
break existing behaviour, I propose adding an argument `absolute = FALSE`
that will attempt to return an absolute path when the argument is set to
TRUE. I don't have any evidence for this claim, but I believe that others
who use this function would expect, like I did, that an absolute path is
returned regardless of the file state. I understand the documentation is
correct because it warns the absolute path may not be returned, but I
believe it would be a useful feature to support.


* I've tested this on Win7, Win10, two versions of MacOS, ubuntu. This
behaviour may not be true in other OSes

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Apr 14 21:51:30 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 14 Apr 2020 12:51:30 -0700
Subject: [Rd] Suggestion/opinions: add a `absolute` param to
 `normalizePath()` to force returning an absolute path
In-Reply-To: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>
References: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>
Message-ID: <CAD4oTHGZFpO44wi3CaD=ZkhNqv7KY89-_CV_BKbH1A-L7SHDHQ@mail.gmail.com>

If we are fiddling with normalizePath, having a way of not following
symlinks (otheer than  ~)  would be useful as well.

I had to write normalizePath2 in switchr for a specific on-the-ground need
to NOT go down all he way to physical paths on a remote compute system
because of how IT handled implementing constant pathing on top of swapping
out hardware, and I can't imagine i'm the only one who has ever faced such
an issue.

~G

On Tue, Apr 14, 2020 at 10:03 AM Dean Attali <daattali at gmail.com> wrote:

> This request stems off a bug report I posted
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17757 where it was
> determined the current behaviour is as expected.
>
> To recap: when given a real file, normalizePath() always* returns the full
> absolute path. When given a non-existent file, normalizePath() returns a
> full path on Windows but it returns the input on other systems*. I'd argue
> that there are benefits to being able to reliably and consistently get a
> full path, regardless of whether the file exists or not. In order to not
> break existing behaviour, I propose adding an argument `absolute = FALSE`
> that will attempt to return an absolute path when the argument is set to
> TRUE. I don't have any evidence for this claim, but I believe that others
> who use this function would expect, like I did, that an absolute path is
> returned regardless of the file state. I understand the documentation is
> correct because it warns the absolute path may not be returned, but I
> believe it would be a useful feature to support.
>
>
> * I've tested this on Win7, Win10, two versions of MacOS, ubuntu. This
> behaviour may not be true in other OSes
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom gm@||@com  Wed Apr 15 09:41:41 2020
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?utf-8?Q?Adrian_Du=C8=99a?=)
Date: Wed, 15 Apr 2020 10:41:41 +0300
Subject: [Rd] detect ->
In-Reply-To: <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
 <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
 <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>
Message-ID: <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>

Dear Bill,

I already tried this, and it would have been great as (currently) the sufficiency relation is precisely "=>"... but:

foo <- function(x) return(substitute(x))
foo(A => B)
Error: unexpected '>' in "foo(A =>"

It seems that "=>" is a syntactic error for the R parser, while "<=" is not because it denotes less than or equal.

Now, if I could find a way to define "=>" as a standalone operator, and convince the R parser to bypass that error, it would solve everything. If this is not possible, I am back to detecting "->".

Best,
Adrian


> On 13 Apr 2020, at 19:19, William Dunlap <wdunlap at tibco.com> wrote:
> 
> Using => and <= instead of -> and <- would make things easier, although the precedence would be different.
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 
> On Mon, Apr 13, 2020 at 1:43 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:
> Thank you for your replies, this actually has little to do with the regular R code but more to signal what in my package QCA is referred to as a necessity relation A <- B (A is necessary for B) and sufficiency A -> B (A is sufficient for B).
> 
> If switched by the parser, A -> B becomes B <- A which makes B necessary for A, while the intention is to signal sufficiency for B.
> 
> Capturing in a quoted string is trivial, but I am now experimenting with substitute() to allow unquoted expressions.
> 
> This is especially useful when selecting A and B from the columns of a data frame, using: c(A, B) instead of c("A", "B") with a lot more quotes for more complex expressions using more columns.
> 
> I would be grateful for any pointer to a project that processes the code while it is still raw text. I could maybe learn from their code and adapt to my use case.
> 
> Best wishes,
> Adrian
> 
> > On 13 Apr 2020, at 11:23, Gabriel Becker <gabembecker at gmail.com> wrote:
> > 
> > Adrian,
> > 
> > Indeed, this has come up in a few places, but as Gabor says, there is no such thing as right hand assignment at any point after parsing is complete.
> > 
> > This means the only feasible way to detect it, which a few projects do I believe, is process the code while it is still raw text, before it goes into the parser, and have clever enough regular expressions.
> > 
> > The next question, then, is why are you trying to detect right assignment. Doing so can be arguably useful fo linting, its true. Otherwise, though, because its not really a "real thing" when the R code is being executed, its not something thats generally meaningful to detect in most cases.
> > 
> > Best,
> > ~G
> > 
> > On Mon, Apr 13, 2020 at 12:52 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > That parser already flips -> to <- before creating the parse tree.
> > 
> > Gabor
> > 
> > On Mon, Apr 13, 2020 at 8:39 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:
> > >
> > > I searched and tried for hours, to no avail although it looks simple.
> > >
> > > (function(x) substitute(x))(A <- B)
> > > #A <- B
> > >
> > > (function(x) substitute(x))(A -> B)
> > > # B <- A
> > >
> > > In the first example, A occurs on the LHS, but in the second example A is somehow evaluated as if it occured on the RHS, despite my understanding that substitute() returns the unevaluated parse tree.
> > >
> > > Is there any way, or is it even possible to detect the right hand assignment, to determine whether A occurs on the LHS?
> > >
> > > Thanks in advance for any hint,
> > > Adrian
> > >
> > > ?
> > > Adrian Dusa
> > > University of Bucharest
> > > Romanian Social Data Archive
> > > Soseaua Panduri nr. 90-92
> > > 050663 Bucharest sector 5
> > > Romania
> > > https://adriandusa.eu
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ?
> Adrian Dusa
> University of Bucharest
> Romanian Social Data Archive
> Soseaua Panduri nr. 90-92
> 050663 Bucharest sector 5
> Romania
> https://adriandusa.eu
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

?
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Apr 15 12:20:48 2020
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 15 Apr 2020 13:20:48 +0300
Subject: [Rd] detect ->
In-Reply-To: <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
 <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
 <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>
 <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>
Message-ID: <20200415132048.500efbc7@Tarkus>

On Wed, 15 Apr 2020 10:41:41 +0300
Adrian Du?a <dusa.adrian at gmail.com> wrote:

> Now, if I could find a way to define "=>" as a standalone operator,
> and convince the R parser to bypass that error, it would solve
> everything. If this is not possible, I am back to detecting "->".

Just to confirm, are you avoiding custom %operators% because of two
extra percent characters one would have to type per operator?

-- 
Best regards,
Ivan


From du@@@@dr|@n @end|ng |rom gm@||@com  Wed Apr 15 12:45:11 2020
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?utf-8?Q?Adrian_Du=C8=99a?=)
Date: Wed, 15 Apr 2020 13:45:11 +0300
Subject: [Rd] detect ->
In-Reply-To: <20200415132048.500efbc7@Tarkus>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
 <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
 <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>
 <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>
 <20200415132048.500efbc7@Tarkus>
Message-ID: <433E9D5E-A852-4DF8-8E15-702E6A61D8E9@gmail.com>

> On 15 Apr 2020, at 13:20, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Wed, 15 Apr 2020 10:41:41 +0300
> Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
>> Now, if I could find a way to define "=>" as a standalone operator,
>> and convince the R parser to bypass that error, it would solve
>> everything. If this is not possible, I am back to detecting "->".
> 
> Just to confirm, are you avoiding custom %operators% because of two
> extra percent characters one would have to type per operator?

Yes, that's right. The "->" operator is the standard way to signal sufficiency into a SOP (sum of products) expression, something like:

A~BC + BC~D + E -> Y

This is consistently used in many books and articles, and currently the standard when quoted:

"A~BC + BC~D + E -> Y"

To require using the %% notation in unquoted strings would make the SOP expression different from the quoted one, which is likely to create confusion:

A~BC + BC~D + E %->% Y

If detecting "->" proves to be impossible, then I will probably have no choice but to stick with quoted expressions. I am just hoping the collective knowledge here would make this possible, though.

Best,
Adrian

?
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 15 15:37:17 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 15 Apr 2020 15:37:17 +0200
Subject: [Rd] Suggestion/opinions: add a `absolute` param to
 `normalizePath()` to force returning an absolute path
In-Reply-To: <CAD4oTHGZFpO44wi3CaD=ZkhNqv7KY89-_CV_BKbH1A-L7SHDHQ@mail.gmail.com>
References: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>
 <CAD4oTHGZFpO44wi3CaD=ZkhNqv7KY89-_CV_BKbH1A-L7SHDHQ@mail.gmail.com>
Message-ID: <c1e1ae70-efcb-fc5c-d976-14ffa27dde92@gmail.com>

I think application-specific normalization is actually the right thing 
to do, because the behavior of normalizePath() is too system-specific 
and too unreliable. That is not a deficiency of R, the same problem 
exists on other systems I've spent too much time recently working on 
normalizePath() implementation on Windows and looking how other systems 
do it, the implementations are very similar, and the documentation often 
less detailed on the limitations.

As the R documentation says, path normalization is meant for displaying 
a user-understandable path name in messages and for comparison (e.g. 
whether two paths refer to the same file, possibly also for their 
canonical location, mapping some permissions to directories). However, 
as it also says, it is only best-effort. The resulting path may not be 
canonical. It may not be pretty (not "user-understandable"). As it may 
not be canonical, comparing normalized paths e.g. to decide whether they 
refer to the same file may not be reliable. Again, this is not a 
limitation of R, but a consequence of file-system complexities and also 
differences between platforms. The scope for use of normalizePath() is 
hence very small and only if one can be happy with the "best-effort".

For anything reliable, one should try to use something specific for the 
task, but with well defined behavior. If say just concatenating the 
current working directory and a relative path provides the desired 
behavior in a specific situation, it is best to just do it that way. In 
some cases normalization is easily avoidable by say opening a file 
sooner rather than later (e.g. the use case of Dean in the bug report).

To find out if two path names refer to the same file, with sufficient 
permissions there are better ways both on Unix and Windows (though maybe 
not provided by R base packages).

Disabling symlinks is impossible/infeasible, that would mean 
re-implementing the normalization from scratch inside R, without using 
the OS-level functions (realpath, GetFinalPathNameByHandle), with 
different error behavior on many details, etc, and the result would be 
atypical for both Unix (where realpath is normally used for 
normalization) and Windows platforms (where new language runtimes use 
GetFinalPathNameByHandle, now including R).

Best
Tomas



On 4/14/20 9:51 PM, Gabriel Becker wrote:
> If we are fiddling with normalizePath, having a way of not following
> symlinks (otheer than  ~)  would be useful as well.
>
> I had to write normalizePath2 in switchr for a specific on-the-ground need
> to NOT go down all he way to physical paths on a remote compute system
> because of how IT handled implementing constant pathing on top of swapping
> out hardware, and I can't imagine i'm the only one who has ever faced such
> an issue.
>
> ~G
>
> On Tue, Apr 14, 2020 at 10:03 AM Dean Attali <daattali at gmail.com> wrote:
>
>> This request stems off a bug report I posted
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17757 where it was
>> determined the current behaviour is as expected.
>>
>> To recap: when given a real file, normalizePath() always* returns the full
>> absolute path. When given a non-existent file, normalizePath() returns a
>> full path on Windows but it returns the input on other systems*. I'd argue
>> that there are benefits to being able to reliably and consistently get a
>> full path, regardless of whether the file exists or not. In order to not
>> break existing behaviour, I propose adding an argument `absolute = FALSE`
>> that will attempt to return an absolute path when the argument is set to
>> TRUE. I don't have any evidence for this claim, but I believe that others
>> who use this function would expect, like I did, that an absolute path is
>> returned regardless of the file state. I understand the documentation is
>> correct because it warns the absolute path may not be returned, but I
>> believe it would be a useful feature to support.
>>
>>
>> * I've tested this on Win7, Win10, two versions of MacOS, ubuntu. This
>> behaviour may not be true in other OSes
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@me@@|@he@ter @end|ng |rom gm@||@com  Wed Apr 15 16:06:44 2020
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Wed, 15 Apr 2020 10:06:44 -0400
Subject: [Rd] Suggestion/opinions: add a `absolute` param to
 `normalizePath()` to force returning an absolute path
In-Reply-To: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>
References: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>
Message-ID: <CAD6tx97qV6x-zjv6ZXJv1ksCy6GWEhKxV0tVNnrKWDTj7OLEww@mail.gmail.com>

The fs[1] function `fs::path_abs()` does what I believe you were
expecting `normalizePath()` to do in this case. e.g.

    setwd("~")
    normalizePath("foo/bar")
    #> Warning in normalizePath("foo/bar") :
    #> path[1]="foo/bar": No such file or directory
    #> [1] "foo/bar"

    fs::path_abs("foo/bar")
    #> /Users/jhester/foo/bar

[1]: https://CRAN.R-project.org/package=fs


On Tue, Apr 14, 2020 at 1:03 PM Dean Attali <daattali at gmail.com> wrote:
>
> This request stems off a bug report I posted
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17757 where it was
> determined the current behaviour is as expected.
>
> To recap: when given a real file, normalizePath() always* returns the full
> absolute path. When given a non-existent file, normalizePath() returns a
> full path on Windows but it returns the input on other systems*. I'd argue
> that there are benefits to being able to reliably and consistently get a
> full path, regardless of whether the file exists or not. In order to not
> break existing behaviour, I propose adding an argument `absolute = FALSE`
> that will attempt to return an absolute path when the argument is set to
> TRUE. I don't have any evidence for this claim, but I believe that others
> who use this function would expect, like I did, that an absolute path is
> returned regardless of the file state. I understand the documentation is
> correct because it warns the absolute path may not be returned, but I
> believe it would be a useful feature to support.
>
>
> * I've tested this on Win7, Win10, two versions of MacOS, ubuntu. This
> behaviour may not be true in other OSes
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@me@@|@he@ter @end|ng |rom gm@||@com  Wed Apr 15 16:20:14 2020
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Wed, 15 Apr 2020 10:20:14 -0400
Subject: [Rd] Add a new environment variable switch for the 'large version'
 check
Message-ID: <CAD6tx97Vuv=sJeCN8r1fcFtJqCes1F+kR_OrxciO=FOKgOgwbw@mail.gmail.com>

If you test a package with `R CMD check --as-cran` one of the
'incoming' checks is for a large version number, it gives a NOTE like
this

    * checking CRAN incoming feasibility ... NOTE
    Maintainer: ?Jim Hester <james.f.hester at gmail.com>?

    Version contains large components (0.0.0.9000)

This is a useful check when packages are submitted to CRAN because it
catches these large version components, which typically are reserved
for development versions of packages.

However when checking packages during development it is often expected
to have these large versions, so this note can be confusing for those
new to package development.

Currently the only way to turn off this particular check is to turn
off _all_ of the CRAN incoming checks.

The following patch (also attached) adds an environment variable that
can be used to disable just this check, which would allow users to
disable it if they expect to be using a large version. The default
behavior (and CRAN's usage) would remain unchanged.

diff --git a/src/library/tools/R/QC.R b/src/library/tools/R/QC.R
index 062722127a..64acd72c5e 100644
--- a/src/library/tools/R/QC.R
+++ b/src/library/tools/R/QC.R
@@ -6963,7 +6963,9 @@ function(dir, localOnly = FALSE)
     if(grepl("(^|[.-])0[0-9]+", ver))
         out$version_with_leading_zeroes <- ver
     unlisted_version <- unlist(package_version(ver))
-    if(any(unlisted_version >= 1234 & unlisted_version !=
as.integer(format(Sys.Date(), "%Y"))))
+    if(any(unlisted_version >= 1234 & unlisted_version !=
as.integer(format(Sys.Date(), "%Y"))) &&
+       !config_val_to_logical(Sys.getenv("_R_CHECK_CRAN_INCOMING_SKIP_LARGE_VERSION_",
+                                         "FALSE")))
         out$version_with_large_components <- ver

     .aspell_package_description_for_CRAN <- function(dir, meta = NULL) {

From wdun|@p @end|ng |rom t|bco@com  Wed Apr 15 17:13:17 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 15 Apr 2020 08:13:17 -0700
Subject: [Rd] detect ->
In-Reply-To: <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
 <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
 <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>
 <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>
Message-ID: <CAF8bMcYEqDXUfGxQcXDqLunSVuENUVux3ntqjxASBNrRgd2=gQ@mail.gmail.com>

You are right.  >= is not as evocative as =>.  Perhaps > and < would do?
%=>% and %<=% would work.
Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Apr 15, 2020 at 12:41 AM Adrian Du?a <dusa.adrian at gmail.com> wrote:

> Dear Bill,
>
> I already tried this, and it would have been great as (currently) the
> sufficiency relation is precisely "=>"... but:
>
> foo <- function(x) return(substitute(x))
> foo(A => B)
> Error: unexpected '>' in "foo(A =>"
>
> It seems that "=>" is a syntactic error for the R parser, while "<=" is
> not because it denotes less than or equal.
>
> Now, if I could find a way to define "=>" as a standalone operator, and
> convince the R parser to bypass that error, it would solve everything. If
> this is not possible, I am back to detecting "->".
>
> Best,
> Adrian
>
>
> > On 13 Apr 2020, at 19:19, William Dunlap <wdunlap at tibco.com> wrote:
> >
> > Using => and <= instead of -> and <- would make things easier, although
> the precedence would be different.
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com
> >
> >
> > On Mon, Apr 13, 2020 at 1:43 AM Adrian Du?a <dusa.adrian at gmail.com>
> wrote:
> > Thank you for your replies, this actually has little to do with the
> regular R code but more to signal what in my package QCA is referred to as
> a necessity relation A <- B (A is necessary for B) and sufficiency A -> B
> (A is sufficient for B).
> >
> > If switched by the parser, A -> B becomes B <- A which makes B necessary
> for A, while the intention is to signal sufficiency for B.
> >
> > Capturing in a quoted string is trivial, but I am now experimenting with
> substitute() to allow unquoted expressions.
> >
> > This is especially useful when selecting A and B from the columns of a
> data frame, using: c(A, B) instead of c("A", "B") with a lot more quotes
> for more complex expressions using more columns.
> >
> > I would be grateful for any pointer to a project that processes the code
> while it is still raw text. I could maybe learn from their code and adapt
> to my use case.
> >
> > Best wishes,
> > Adrian
> >
> > > On 13 Apr 2020, at 11:23, Gabriel Becker <gabembecker at gmail.com>
> wrote:
> > >
> > > Adrian,
> > >
> > > Indeed, this has come up in a few places, but as Gabor says, there is
> no such thing as right hand assignment at any point after parsing is
> complete.
> > >
> > > This means the only feasible way to detect it, which a few projects do
> I believe, is process the code while it is still raw text, before it goes
> into the parser, and have clever enough regular expressions.
> > >
> > > The next question, then, is why are you trying to detect right
> assignment. Doing so can be arguably useful fo linting, its true.
> Otherwise, though, because its not really a "real thing" when the R code is
> being executed, its not something thats generally meaningful to detect in
> most cases.
> > >
> > > Best,
> > > ~G
> > >
> > > On Mon, Apr 13, 2020 at 12:52 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
> > > That parser already flips -> to <- before creating the parse tree.
> > >
> > > Gabor
> > >
> > > On Mon, Apr 13, 2020 at 8:39 AM Adrian Du?a <dusa.adrian at gmail.com>
> wrote:
> > > >
> > > > I searched and tried for hours, to no avail although it looks simple.
> > > >
> > > > (function(x) substitute(x))(A <- B)
> > > > #A <- B
> > > >
> > > > (function(x) substitute(x))(A -> B)
> > > > # B <- A
> > > >
> > > > In the first example, A occurs on the LHS, but in the second example
> A is somehow evaluated as if it occured on the RHS, despite my
> understanding that substitute() returns the unevaluated parse tree.
> > > >
> > > > Is there any way, or is it even possible to detect the right hand
> assignment, to determine whether A occurs on the LHS?
> > > >
> > > > Thanks in advance for any hint,
> > > > Adrian
> > > >
> > > > ?
> > > > Adrian Dusa
> > > > University of Bucharest
> > > > Romanian Social Data Archive
> > > > Soseaua Panduri nr. 90-92
> > > > 050663 Bucharest sector 5
> > > > Romania
> > > > https://adriandusa.eu
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ?
> > Adrian Dusa
> > University of Bucharest
> > Romanian Social Data Archive
> > Soseaua Panduri nr. 90-92
> > 050663 Bucharest sector 5
> > Romania
> > https://adriandusa.eu
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ?
> Adrian Dusa
> University of Bucharest
> Romanian Social Data Archive
> Soseaua Panduri nr. 90-92
> 050663 Bucharest sector 5
> Romania
> https://adriandusa.eu
>
>

	[[alternative HTML version deleted]]


From d@@tt@|| @end|ng |rom gm@||@com  Wed Apr 15 18:59:06 2020
From: d@@tt@|| @end|ng |rom gm@||@com (Dean Attali)
Date: Wed, 15 Apr 2020 12:59:06 -0400
Subject: [Rd] Suggestion/opinions: add a `absolute` param to
 `normalizePath()` to force returning an absolute path
In-Reply-To: <CAD6tx97qV6x-zjv6ZXJv1ksCy6GWEhKxV0tVNnrKWDTj7OLEww@mail.gmail.com>
References: <CA+j8Z+=ysBF8Qh3oQAFs8ATHBcM8R95FLd+=kjmJGHugpJcDuw@mail.gmail.com>
 <CAD6tx97qV6x-zjv6ZXJv1ksCy6GWEhKxV0tVNnrKWDTj7OLEww@mail.gmail.com>
Message-ID: <CA+j8Z+=8bcppUZ4ZbLjSyTv4QUsmAz+5R+KjxdF4+UOoN0UfLQ@mail.gmail.com>

Thanks Tomas - I can easily believe that other systems have much less
documentation on this issue! Thanks for you work on this.

I try to stick with base packages when possible, but if the `fs` package
provides this functionality then I'm happy to use that in this case, thanks
Jim.

On Wed, 15 Apr 2020 at 10:06, Jim Hester <james.f.hester at gmail.com> wrote:

> The fs[1] function `fs::path_abs()` does what I believe you were
> expecting `normalizePath()` to do in this case. e.g.
>
>     setwd("~")
>     normalizePath("foo/bar")
>     #> Warning in normalizePath("foo/bar") :
>     #> path[1]="foo/bar": No such file or directory
>     #> [1] "foo/bar"
>
>     fs::path_abs("foo/bar")
>     #> /Users/jhester/foo/bar
>
> [1]: https://CRAN.R-project.org/package=fs
>
>
> On Tue, Apr 14, 2020 at 1:03 PM Dean Attali <daattali at gmail.com> wrote:
> >
> > This request stems off a bug report I posted
> > https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17757 where it was
> > determined the current behaviour is as expected.
> >
> > To recap: when given a real file, normalizePath() always* returns the
> full
> > absolute path. When given a non-existent file, normalizePath() returns a
> > full path on Windows but it returns the input on other systems*. I'd
> argue
> > that there are benefits to being able to reliably and consistently get a
> > full path, regardless of whether the file exists or not. In order to not
> > break existing behaviour, I propose adding an argument `absolute = FALSE`
> > that will attempt to return an absolute path when the argument is set to
> > TRUE. I don't have any evidence for this claim, but I believe that others
> > who use this function would expect, like I did, that an absolute path is
> > returned regardless of the file state. I understand the documentation is
> > correct because it warns the absolute path may not be returned, but I
> > believe it would be a useful feature to support.
> >
> >
> > * I've tested this on Win7, Win10, two versions of MacOS, ubuntu. This
> > behaviour may not be true in other OSes
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom gm@||@com  Wed Apr 15 22:16:58 2020
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?utf-8?Q?Adrian_Du=C8=99a?=)
Date: Wed, 15 Apr 2020 23:16:58 +0300
Subject: [Rd] detect ->
In-Reply-To: <CAF8bMcYEqDXUfGxQcXDqLunSVuENUVux3ntqjxASBNrRgd2=gQ@mail.gmail.com>
References: <6DB118E2-8C9A-4C5D-BC82-12B689C872FF@gmail.com>
 <CABtg=KmifDz6DbufPoBX0j4Suepm3pG6K=6PoPHJ4cCXAVYafg@mail.gmail.com>
 <CAD4oTHFUe+W+bBtC-e9uhOGkJUMTV317xPETXS+7iW-v9m7iNg@mail.gmail.com>
 <3581EC66-BE5F-45ED-8F62-85A8AC69A660@gmail.com>
 <CAF8bMcZi7KaQrCCOxZgzBoW-s3C+KUdpifJSKBgidtnqqW4CtA@mail.gmail.com>
 <AD462DF3-B6DF-4DCB-AC0A-202EE23DC9A1@gmail.com>
 <CAF8bMcYEqDXUfGxQcXDqLunSVuENUVux3ntqjxASBNrRgd2=gQ@mail.gmail.com>
Message-ID: <7BAE5748-05B4-4636-BAAF-12E05659E53D@gmail.com>


> On 15 Apr 2020, at 18:13, William Dunlap <wdunlap at tibco.com> wrote:
> 
> You are right.  >= is not as evocative as =>.  Perhaps > and < would do?  %=>% and %<=% would work.

I thought about > and < too, but as you rightly observed > is way less evocative as =>
There is a certain level of clarity which an arrow like sign offers, and people consistently use an arrow in quoted expressions.

In addition anything else, whether > or %=>%, would make an unquoted expression different from the standard quoted one, and that could potentially create confusion.

Best wishes,
Adrian

?
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Thu Apr 16 16:24:54 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Thu, 16 Apr 2020 16:24:54 +0200
Subject: [Rd] suggestion: "." in [lsv]apply()
Message-ID: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>

Hi,

I would like to make a suggestion for a small syntactic modification of 
FUN argument in the family of functions [lsv]apply(). The idea is to 
allow one-liner expressions without typing "function(item) {...}" to 
surround them. The argument to the anonymous function is simply referred 
as ".". Let take an example. With this new feature, the following call

sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, 
d))$r.squared)
#??????? 4???????? 6???????? 8
#0.5086326 0.4645102 0.4229655


could be rewritten as

sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)

"Not a big saving in typing" you can say but multiplied by the number of 
[lsv]apply usage and a neater look, I think, the idea merits to be 
considered.
To illustrate a possible implementation, I propose a wrapper example for 
sapply():

wsapply=function(l, fun, ...) {
 ??? s=substitute(fun)
 ??? if (is.name(s) || is.call(s) && s[[1]]==as.name("function")) {
 ??????? sapply(l, fun, ...) # legacy call
 ??? } else {
 ??????? sapply(l, function(d) eval(s, list(.=d)), ...)
 ??? }
}

Now, we can do:

wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)

or, traditional way:

wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, 
d))$r.squared)

the both work.

How do you feel about that?

Best,
Serguei.


From edd @end|ng |rom deb|@n@org  Thu Apr 16 16:44:07 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 16 Apr 2020 09:44:07 -0500
Subject: [Rd] 
 Add a new environment variable switch for the 'large version' check
In-Reply-To: <CAD6tx97Vuv=sJeCN8r1fcFtJqCes1F+kR_OrxciO=FOKgOgwbw@mail.gmail.com>
References: <CAD6tx97Vuv=sJeCN8r1fcFtJqCes1F+kR_OrxciO=FOKgOgwbw@mail.gmail.com>
Message-ID: <24216.28471.119090.576892@rob.eddelbuettel.com>


Or you use a fourth component to signal a development version as Rcpp has
done for years (and, IIRC, for longer than devtools et al used '9000').

There is no functional difference between 1.2.3.1 and 1.2.3.9000. They are
both larger than 1.2.3 (in the package_version() sense) and signal an
intermediate version between 1.2.3 and 1.2.4.

But one requires a patch. ?\_(?)_/?.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Apr 16 16:48:34 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 17 Apr 2020 02:48:34 +1200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
Message-ID: <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>

Serguei,


> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr> wrote:
> 
> Hi,
> 
> I would like to make a suggestion for a small syntactic modification of FUN argument in the family of functions [lsv]apply(). The idea is to allow one-liner expressions without typing "function(item) {...}" to surround them. The argument to the anonymous function is simply referred as ".". Let take an example. With this new feature, the following call
> 
> sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared)
> #        4         6         8
> #0.5086326 0.4645102 0.4229655
> 
> 
> could be rewritten as
> 
> sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
> 
> "Not a big saving in typing" you can say but multiplied by the number of [lsv]apply usage and a neater look, I think, the idea merits to be considered.


It's not in any way "neater", not only is it less readable, it's just plain wrong. What if the expression returned a function? How do you know that you don't want to apply the result of the call? For the same reason the implementation below won't work - very often you just pass a symbol that evaluates to a function and always en expression that returns a function and there is no way to distinguish that from your new proposed syntax. When you feel compelled to use substitute() you should hear alarm bells that something is wrong ;).

You can certainly write a new function that uses a different syntax (and I'm sure someone has already done that in the package space), but what you propose is incompatible with *apply in R (and very much not R syntax).

Cheers,
Simon


> To illustrate a possible implementation, I propose a wrapper example for sapply():
> 
> wsapply=function(l, fun, ...) {
>     s=substitute(fun)
>     if (is.name(s) || is.call(s) && s[[1]]==as.name("function")) {
>         sapply(l, fun, ...) # legacy call
>     } else {
>         sapply(l, function(d) eval(s, list(.=d)), ...)
>     }
> }
> 
> Now, we can do:
> 
> wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
> 
> or, traditional way:
> 
> wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared)
> 
> the both work.
> 
> How do you feel about that?
> 
> Best,
> Serguei.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From wdun|@p @end|ng |rom t|bco@com  Thu Apr 16 17:07:12 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 16 Apr 2020 08:07:12 -0700
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
Message-ID: <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>

Passing in a function passes not only an argument list but also an
environment from which to get free variables.  Since your function doesn't
pay attention to the environment you get things like the following.

> wsapply(list(1,2:3), paste(., ":", deparse(s)))
[[1]]
[1] "1 : paste(., \":\", deparse(s))"

[[2]]
[1] "2 : paste(., \":\", deparse(s))" "3 : paste(., \":\", deparse(s))"

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, Apr 16, 2020 at 7:25 AM Sokol Serguei <sokol at insa-toulouse.fr>
wrote:

> Hi,
>
> I would like to make a suggestion for a small syntactic modification of
> FUN argument in the family of functions [lsv]apply(). The idea is to
> allow one-liner expressions without typing "function(item) {...}" to
> surround them. The argument to the anonymous function is simply referred
> as ".". Let take an example. With this new feature, the following call
>
> sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> d))$r.squared)
> #        4         6         8
> #0.5086326 0.4645102 0.4229655
>
>
> could be rewritten as
>
> sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
>
> "Not a big saving in typing" you can say but multiplied by the number of
> [lsv]apply usage and a neater look, I think, the idea merits to be
> considered.
> To illustrate a possible implementation, I propose a wrapper example for
> sapply():
>
> wsapply=function(l, fun, ...) {
>      s=substitute(fun)
>      if (is.name(s) || is.call(s) && s[[1]]==as.name("function")) {
>          sapply(l, fun, ...) # legacy call
>      } else {
>          sapply(l, function(d) eval(s, list(.=d)), ...)
>      }
> }
>
> Now, we can do:
>
> wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
>
> or, traditional way:
>
> wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> d))$r.squared)
>
> the both work.
>
> How do you feel about that?
>
> Best,
> Serguei.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Thu Apr 16 17:53:07 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Thu, 16 Apr 2020 17:53:07 +0200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
Message-ID: <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>

Simon,

Thanks for replying. In what follows I won't try to argue (I understood 
that you find this a bad idea) but I would like to make clearer some of 
your point for me (and may be for others).

Le 16/04/2020 ? 16:48, Simon Urbanek a ?crit?:
> Serguei,
>> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr> 
>> wrote: Hi, I would like to make a suggestion for a small syntactic 
>> modification of FUN argument in the family of functions [lsv]apply(). 
>> The idea is to allow one-liner expressions without typing 
>> "function(item) {...}" to surround them. The argument to the 
>> anonymous function is simply referred as ".". Let take an example. 
>> With this new feature, the following call sapply(split(mtcars, 
>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) # 4 6 8 
>> #0.5086326 0.4645102 0.4229655 could be rewritten as 
>> sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared) 
>> "Not a big saving in typing" you can say but multiplied by the number 
>> of [lsv]apply usage and a neater look, I think, the idea merits to be 
>> considered. 
> It's not in any way "neater", not only is it less readable, it's just 
> plain wrong. What if the expression returned a function?
do you mean like in
l=sapply(1:3, function(i) function(x) i+x)
l[[1]](3)
# 4
l[[2]](3)
# 5

This is indeed a corner case but a pair of () or {} can keep wsapply() 
in course:
l=wsapply(1:3, (function(x) .+x))

l[[1]](3)

# 4

l[[2]](3)

# 5
> How do you know that you don't want to apply the result of the call?
A small example (if it is significantly different from the one above) 
would be very helpful for me to understand this point.

> For the same reason the implementation below won't work - very often 
> you just pass a symbol that evaluates to a function and always en 
> expression that returns a function and there is no way to distinguish 
> that from your new proposed syntax.
Even with () or {} around such "dotted" expression?

Best,
Serguei.

> When you feel compelled to use substitute() you should hear alarm 
> bells that something is wrong ;). You can certainly write a new 
> function that uses a different syntax (and I'm sure someone has 
> already done that in the package space), but what you propose is 
> incompatible with *apply in R (and very much not R syntax). Cheers, Simon
>> To illustrate a possible implementation, I propose a wrapper example 
>> for sapply(): wsapply=function(l, fun, ...) { s=substitute(fun) if 
>> (is.name(s) || is.call(s) && s[[1]]==as.name("function")) { sapply(l, 
>> fun, ...) # legacy call } else { sapply(l, function(d) eval(s, 
>> list(.=d)), ...) } } Now, we can do: wsapply(split(mtcars, 
>> mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared) or, traditional way: 
>> wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, 
>> d))$r.squared) the both work. How do you feel about that? Best, 
>> Serguei. ______________________________________________ 
>> R-devel at r-project.org mailing list 
>> https://stat.ethz.ch/mailman/listinfo/r-devel 
>


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Thu Apr 16 18:02:43 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Thu, 16 Apr 2020 18:02:43 +0200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>
Message-ID: <76013627-801b-f871-f362-5c370eca2167@insa-toulouse.fr>

Thanks Bill,

Clearly, my first proposition for wsapply() is quick and dirty one.
However, if "." becomes a reserved variable with this new syntax, 
wsapply() can be fixed (at least for your example and alike) as:

wsapply=function(l, fun, ...) {
 ??? .=substitute(fun)
 ??? if (is.name(.) || is.call(.) && .[[1]]==as.name("function")) {
 ??????? sapply(l, fun, ...)
 ??? } else {
 ??????? sapply(l, function(d) eval(., list(.=d)), ...)
 ??? }
}

Will it do the job?

Best,
Serguei.

Le 16/04/2020 ? 17:07, William Dunlap a ?crit?:
> Passing in a function passes not only an argument list but also an 
> environment from which to get free variables. Since your function 
> doesn't pay attention to the environment you get things like the 
> following.
>
> > wsapply(list(1,2:3), paste(., ":", deparse(s)))
> [[1]]
> [1] "1 : paste(., \":\", deparse(s))"
>
> [[2]]
> [1] "2 : paste(., \":\", deparse(s))" "3 : paste(., \":\", deparse(s))"
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com <http://tibco.com>
>
>
> On Thu, Apr 16, 2020 at 7:25 AM Sokol Serguei <sokol at insa-toulouse.fr 
> <mailto:sokol at insa-toulouse.fr>> wrote:
>
>     Hi,
>
>     I would like to make a suggestion for a small syntactic
>     modification of
>     FUN argument in the family of functions [lsv]apply(). The idea is to
>     allow one-liner expressions without typing "function(item) {...}" to
>     surround them. The argument to the anonymous function is simply
>     referred
>     as ".". Let take an example. With this new feature, the following call
>
>     sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
>     d))$r.squared)
>     #??????? 4???????? 6???????? 8
>     #0.5086326 0.4645102 0.4229655
>
>
>     could be rewritten as
>
>     sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
>
>     "Not a big saving in typing" you can say but multiplied by the
>     number of
>     [lsv]apply usage and a neater look, I think, the idea merits to be
>     considered.
>     To illustrate a possible implementation, I propose a wrapper
>     example for
>     sapply():
>
>     wsapply=function(l, fun, ...) {
>     ???? s=substitute(fun)
>     ???? if (is.name <http://is.name>(s) || is.call(s) &&
>     s[[1]]==as.name <http://as.name>("function")) {
>     ???????? sapply(l, fun, ...) # legacy call
>     ???? } else {
>     ???????? sapply(l, function(d) eval(s, list(.=d)), ...)
>     ???? }
>     }
>
>     Now, we can do:
>
>     wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
>
>     or, traditional way:
>
>     wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
>     d))$r.squared)
>
>     the both work.
>
>     How do you feel about that?
>
>     Best,
>     Serguei.
>
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Apr 16 18:06:31 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 16 Apr 2020 09:06:31 -0700
Subject: [Rd] 
 Add a new environment variable switch for the 'large version' check
In-Reply-To: <24216.28471.119090.576892@rob.eddelbuettel.com>
References: <CAD6tx97Vuv=sJeCN8r1fcFtJqCes1F+kR_OrxciO=FOKgOgwbw@mail.gmail.com>
 <24216.28471.119090.576892@rob.eddelbuettel.com>
Message-ID: <CAFDcVCRoas-S3S0ywrmqhXAz-jdbR0pWiK8ANMpV7BqO0rdDDw@mail.gmail.com>

I'd second Jim's feature request - it would be useful to be able to
disable this in CI and elsewhere.    The concept of using an "unusual"
version component such as a very large number does a nice job of
indicating "unusual" and serves as a blocker for submitting
work-in-progress to CRAN by mistake (hence the validation in 'R CMD
check').

Another point, which I don't think Jim made, is that this would make
it possible to run R CMD check --as-cran on your work-in-progress and
get all OKs.  This in turn would allow us to trigger a non-zero exit
status also for NOTEs (not just ERRORs and WARNINGs).  Currently, the
warning on -9000 is a false positive in this sense.  This will allow
developers to be more conservative without risking to treat NOTEs as
something to expect as normal.  CI services are typically configured
to alert the developer on ERRORs and WARNINGs but, AFAIK, not on
NOTEs.

On the topic of unusual version numbers: I'd like to suggest that
CRAN(*) makes an unusual version bump whenever they orphan a package,
e.g. to suffix -00001. CRAN already updates/modifies the package
tarball for orphaned packages by setting 'Maintainer: ORPHANED' in the
DESCRIPTION file. By also bumping the version of orphaned packages it
would it stand out in sessionInfo(), which helps in troubleshooting
and bug reports, etc.  But more importantly, the most recent stable
CRAN release remain untouched, which I think has a value by itself for
scientific purposes.

/Henrik

(*) Yes, I should email CRAN about this, but I think it's worth
vetting it here first.

On Thu, Apr 16, 2020 at 7:44 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> Or you use a fourth component to signal a development version as Rcpp has
> done for years (and, IIRC, for longer than devtools et al used '9000').
>
> There is no functional difference between 1.2.3.1 and 1.2.3.9000. They are
> both larger than 1.2.3 (in the package_version() sense) and signal an
> intermediate version between 1.2.3 and 1.2.4.
>
> But one requires a patch. ?\_(?)_/?.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ke@m@honey@218 @end|ng |rom gm@||@com  Thu Apr 16 18:12:22 2020
From: m|ke@m@honey@218 @end|ng |rom gm@||@com (Michael Mahoney)
Date: Thu, 16 Apr 2020 12:12:22 -0400
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <CAMYceO=caXcymUV0b_pJefZncBuN_Ucb66Kq8C8BFASCpypRUA@mail.gmail.com>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>
 <76013627-801b-f871-f362-5c370eca2167@insa-toulouse.fr>
 <CAMYceO=caXcymUV0b_pJefZncBuN_Ucb66Kq8C8BFASCpypRUA@mail.gmail.com>
Message-ID: <CAKpp89u2H9wK90k+8U-iTJnpEtU1HCz3W5F2R8CReN31dpvJ3w@mail.gmail.com>

This syntax is already implemented in the {purrr} package, more or
less -- you need to add a tilde before your function call for it to
work exactly as written:

purrr::map_dbl(split(mtcars, mtcars$cyl), ~ summary(lm(wt ~ mpg, .))$r.squared)

is equivalent to

sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
d))$r.squared)

Seems like using this package is probably an easier solution for this
wish than adding a reserved variable and adding additional syntax to
the apply family as a whole.

Thanks,

-Mike

> From: Sokol Serguei <sokol at insa-toulouse.fr>
> Date: Thu, Apr 16, 2020 at 12:03 PM
> Subject: Re: [Rd] suggestion: "." in [lsv]apply()
> To: William Dunlap <wdunlap at tibco.com>
> Cc: r-devel <r-devel at r-project.org>
>
>
> Thanks Bill,
>
> Clearly, my first proposition for wsapply() is quick and dirty one.
> However, if "." becomes a reserved variable with this new syntax,
> wsapply() can be fixed (at least for your example and alike) as:
>
> wsapply=function(l, fun, ...) {
>      .=substitute(fun)
>      if (is.name(.) || is.call(.) && .[[1]]==as.name("function")) {
>          sapply(l, fun, ...)
>      } else {
>          sapply(l, function(d) eval(., list(.=d)), ...)
>      }
> }
>
> Will it do the job?
>
> Best,
> Serguei.
>
> Le 16/04/2020 ? 17:07, William Dunlap a ?crit :
> > Passing in a function passes not only an argument list but also an
> > environment from which to get free variables. Since your function
> > doesn't pay attention to the environment you get things like the
> > following.
> >
> > > wsapply(list(1,2:3), paste(., ":", deparse(s)))
> > [[1]]
> > [1] "1 : paste(., \":\", deparse(s))"
> >
> > [[2]]
> > [1] "2 : paste(., \":\", deparse(s))" "3 : paste(., \":\", deparse(s))"
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com <http://tibco.com>
> >
> >
> > On Thu, Apr 16, 2020 at 7:25 AM Sokol Serguei <sokol at insa-toulouse.fr
> > <mailto:sokol at insa-toulouse.fr>> wrote:
> >
> >     Hi,
> >
> >     I would like to make a suggestion for a small syntactic
> >     modification of
> >     FUN argument in the family of functions [lsv]apply(). The idea is to
> >     allow one-liner expressions without typing "function(item) {...}" to
> >     surround them. The argument to the anonymous function is simply
> >     referred
> >     as ".". Let take an example. With this new feature, the following call
> >
> >     sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> >     d))$r.squared)
> >     #        4         6         8
> >     #0.5086326 0.4645102 0.4229655
> >
> >
> >     could be rewritten as
> >
> >     sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
> >
> >     "Not a big saving in typing" you can say but multiplied by the
> >     number of
> >     [lsv]apply usage and a neater look, I think, the idea merits to be
> >     considered.
> >     To illustrate a possible implementation, I propose a wrapper
> >     example for
> >     sapply():
> >
> >     wsapply=function(l, fun, ...) {
> >          s=substitute(fun)
> >          if (is.name <http://is.name>(s) || is.call(s) &&
> >     s[[1]]==as.name <http://as.name>("function")) {
> >              sapply(l, fun, ...) # legacy call
> >          } else {
> >              sapply(l, function(d) eval(s, list(.=d)), ...)
> >          }
> >     }
> >
> >     Now, we can do:
> >
> >     wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
> >
> >     or, traditional way:
> >
> >     wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> >     d))$r.squared)
> >
> >     the both work.
> >
> >     How do you feel about that?
> >
> >     Best,
> >     Serguei.
> >
> >     ______________________________________________
> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Apr 16 18:50:06 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 16 Apr 2020 09:50:06 -0700
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <CAKpp89u2H9wK90k+8U-iTJnpEtU1HCz3W5F2R8CReN31dpvJ3w@mail.gmail.com>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>
 <76013627-801b-f871-f362-5c370eca2167@insa-toulouse.fr>
 <CAMYceO=caXcymUV0b_pJefZncBuN_Ucb66Kq8C8BFASCpypRUA@mail.gmail.com>
 <CAKpp89u2H9wK90k+8U-iTJnpEtU1HCz3W5F2R8CReN31dpvJ3w@mail.gmail.com>
Message-ID: <CAFDcVCTdYzWKe1d92mU9gwcKxTPxohBsZ2i-UcTEDjVkR8meSw@mail.gmail.com>

I'm sure this exists elsewhere, but, as a trade-off, could you achieve
what you want with a separate helper function F(expr) that constructs
the function you want to pass to [lsv]apply()?  Something that would
allow you to write:

sapply(split(mtcars, mtcars$cyl), F(summary(lm(mpg ~ wt,.))$r.squared))

Such an F() function would apply elsewhere too.

/Henrik

On Thu, Apr 16, 2020 at 9:30 AM Michael Mahoney
<mike.mahoney.218 at gmail.com> wrote:
>
> This syntax is already implemented in the {purrr} package, more or
> less -- you need to add a tilde before your function call for it to
> work exactly as written:
>
> purrr::map_dbl(split(mtcars, mtcars$cyl), ~ summary(lm(wt ~ mpg, .))$r.squared)
>
> is equivalent to
>
> sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> d))$r.squared)
>
> Seems like using this package is probably an easier solution for this
> wish than adding a reserved variable and adding additional syntax to
> the apply family as a whole.
>
> Thanks,
>
> -Mike
>
> > From: Sokol Serguei <sokol at insa-toulouse.fr>
> > Date: Thu, Apr 16, 2020 at 12:03 PM
> > Subject: Re: [Rd] suggestion: "." in [lsv]apply()
> > To: William Dunlap <wdunlap at tibco.com>
> > Cc: r-devel <r-devel at r-project.org>
> >
> >
> > Thanks Bill,
> >
> > Clearly, my first proposition for wsapply() is quick and dirty one.
> > However, if "." becomes a reserved variable with this new syntax,
> > wsapply() can be fixed (at least for your example and alike) as:
> >
> > wsapply=function(l, fun, ...) {
> >      .=substitute(fun)
> >      if (is.name(.) || is.call(.) && .[[1]]==as.name("function")) {
> >          sapply(l, fun, ...)
> >      } else {
> >          sapply(l, function(d) eval(., list(.=d)), ...)
> >      }
> > }
> >
> > Will it do the job?
> >
> > Best,
> > Serguei.
> >
> > Le 16/04/2020 ? 17:07, William Dunlap a ?crit :
> > > Passing in a function passes not only an argument list but also an
> > > environment from which to get free variables. Since your function
> > > doesn't pay attention to the environment you get things like the
> > > following.
> > >
> > > > wsapply(list(1,2:3), paste(., ":", deparse(s)))
> > > [[1]]
> > > [1] "1 : paste(., \":\", deparse(s))"
> > >
> > > [[2]]
> > > [1] "2 : paste(., \":\", deparse(s))" "3 : paste(., \":\", deparse(s))"
> > >
> > > Bill Dunlap
> > > TIBCO Software
> > > wdunlap tibco.com <http://tibco.com>
> > >
> > >
> > > On Thu, Apr 16, 2020 at 7:25 AM Sokol Serguei <sokol at insa-toulouse.fr
> > > <mailto:sokol at insa-toulouse.fr>> wrote:
> > >
> > >     Hi,
> > >
> > >     I would like to make a suggestion for a small syntactic
> > >     modification of
> > >     FUN argument in the family of functions [lsv]apply(). The idea is to
> > >     allow one-liner expressions without typing "function(item) {...}" to
> > >     surround them. The argument to the anonymous function is simply
> > >     referred
> > >     as ".". Let take an example. With this new feature, the following call
> > >
> > >     sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> > >     d))$r.squared)
> > >     #        4         6         8
> > >     #0.5086326 0.4645102 0.4229655
> > >
> > >
> > >     could be rewritten as
> > >
> > >     sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
> > >
> > >     "Not a big saving in typing" you can say but multiplied by the
> > >     number of
> > >     [lsv]apply usage and a neater look, I think, the idea merits to be
> > >     considered.
> > >     To illustrate a possible implementation, I propose a wrapper
> > >     example for
> > >     sapply():
> > >
> > >     wsapply=function(l, fun, ...) {
> > >          s=substitute(fun)
> > >          if (is.name <http://is.name>(s) || is.call(s) &&
> > >     s[[1]]==as.name <http://as.name>("function")) {
> > >              sapply(l, fun, ...) # legacy call
> > >          } else {
> > >              sapply(l, function(d) eval(s, list(.=d)), ...)
> > >          }
> > >     }
> > >
> > >     Now, we can do:
> > >
> > >     wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
> > >
> > >     or, traditional way:
> > >
> > >     wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> > >     d))$r.squared)
> > >
> > >     the both work.
> > >
> > >     How do you feel about that?
> > >
> > >     Best,
> > >     Serguei.
> > >
> > >     ______________________________________________
> > >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> > >     https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@c@voeten @end|ng |rom hum@|e|denun|v@n|  Thu Apr 16 19:10:49 2020
From: c@c@voeten @end|ng |rom hum@|e|denun|v@n| (Voeten, C.C.)
Date: Thu, 16 Apr 2020 17:10:49 +0000
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <CAFDcVCTdYzWKe1d92mU9gwcKxTPxohBsZ2i-UcTEDjVkR8meSw@mail.gmail.com>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>
 <76013627-801b-f871-f362-5c370eca2167@insa-toulouse.fr>
 <CAMYceO=caXcymUV0b_pJefZncBuN_Ucb66Kq8C8BFASCpypRUA@mail.gmail.com>
 <CAKpp89u2H9wK90k+8U-iTJnpEtU1HCz3W5F2R8CReN31dpvJ3w@mail.gmail.com>
 <CAFDcVCTdYzWKe1d92mU9gwcKxTPxohBsZ2i-UcTEDjVkR8meSw@mail.gmail.com>
Message-ID: <94b935ee72dc478b968597d11f4140e7@hum.leidenuniv.nl>

Such a helper already exists in magrittr, which allows you to compose anonymous functions like so:

library(magrittr)
sapply(1:10,. %>% add(4))

That said, I'm all for this being able to be shortened to sapply(1:10,add(.)), but that would require language support, as Serguei asks for. Languages such as Perl already have a similar construct (I'm thinking of Perl 5's $_). It would be nice if R would have such a feature as well. ". %>%" is still quite a mouthful---especially since percentage signs are quite visually salient, so they give the appearance of clutter while the whole construct seems intended to *simplify* such expressions and draw attention to the operation rather than the boilerplate.

Best,
Cesko

> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Henrik
> Bengtsson
> Sent: Thursday, April 16, 2020 6:50 PM
> To: Michael Mahoney <mike.mahoney.218 at gmail.com>
> Cc: R-devel <r-devel at r-project.org>
> Subject: Re: [Rd] suggestion: "." in [lsv]apply()
> 
> I'm sure this exists elsewhere, but, as a trade-off, could you achieve
> what you want with a separate helper function F(expr) that constructs
> the function you want to pass to [lsv]apply()?  Something that would
> allow you to write:
> 
> sapply(split(mtcars, mtcars$cyl), F(summary(lm(mpg ~ wt,.))$r.squared))
> 
> Such an F() function would apply elsewhere too.
> 
> /Henrik
> 
> On Thu, Apr 16, 2020 at 9:30 AM Michael Mahoney
> <mike.mahoney.218 at gmail.com> wrote:
> >
> > This syntax is already implemented in the {purrr} package, more or
> > less -- you need to add a tilde before your function call for it to
> > work exactly as written:
> >
> > purrr::map_dbl(split(mtcars, mtcars$cyl), ~ summary(lm(wt ~ mpg,
> .))$r.squared)
> >
> > is equivalent to
> >
> > sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> > d))$r.squared)
> >
> > Seems like using this package is probably an easier solution for this
> > wish than adding a reserved variable and adding additional syntax to
> > the apply family as a whole.
> >
> > Thanks,
> >
> > -Mike
> >
> > > From: Sokol Serguei <sokol at insa-toulouse.fr>
> > > Date: Thu, Apr 16, 2020 at 12:03 PM
> > > Subject: Re: [Rd] suggestion: "." in [lsv]apply()
> > > To: William Dunlap <wdunlap at tibco.com>
> > > Cc: r-devel <r-devel at r-project.org>
> > >
> > >
> > > Thanks Bill,
> > >
> > > Clearly, my first proposition for wsapply() is quick and dirty one.
> > > However, if "." becomes a reserved variable with this new syntax,
> > > wsapply() can be fixed (at least for your example and alike) as:
> > >
> > > wsapply=function(l, fun, ...) {
> > >      .=substitute(fun)
> > >      if (is.name(.) || is.call(.) && .[[1]]==as.name("function")) {
> > >          sapply(l, fun, ...)
> > >      } else {
> > >          sapply(l, function(d) eval(., list(.=d)), ...)
> > >      }
> > > }
> > >
> > > Will it do the job?
> > >
> > > Best,
> > > Serguei.
> > >
> > > Le 16/04/2020 ? 17:07, William Dunlap a ?crit :
> > > > Passing in a function passes not only an argument list but also an
> > > > environment from which to get free variables. Since your function
> > > > doesn't pay attention to the environment you get things like the
> > > > following.
> > > >
> > > > > wsapply(list(1,2:3), paste(., ":", deparse(s)))
> > > > [[1]]
> > > > [1] "1 : paste(., \":\", deparse(s))"
> > > >
> > > > [[2]]
> > > > [1] "2 : paste(., \":\", deparse(s))" "3 : paste(., \":\", deparse(s))"
> > > >
> > > > Bill Dunlap
> > > > TIBCO Software
> > > > wdunlap tibco.com <http://tibco.com>
> > > >
> > > >
> > > > On Thu, Apr 16, 2020 at 7:25 AM Sokol Serguei <sokol at insa-toulouse.fr
> > > > <mailto:sokol at insa-toulouse.fr>> wrote:
> > > >
> > > >     Hi,
> > > >
> > > >     I would like to make a suggestion for a small syntactic
> > > >     modification of
> > > >     FUN argument in the family of functions [lsv]apply(). The idea is to
> > > >     allow one-liner expressions without typing "function(item) {...}" to
> > > >     surround them. The argument to the anonymous function is simply
> > > >     referred
> > > >     as ".". Let take an example. With this new feature, the following call
> > > >
> > > >     sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> > > >     d))$r.squared)
> > > >     #        4         6         8
> > > >     #0.5086326 0.4645102 0.4229655
> > > >
> > > >
> > > >     could be rewritten as
> > > >
> > > >     sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt,
> .))$r.squared)
> > > >
> > > >     "Not a big saving in typing" you can say but multiplied by the
> > > >     number of
> > > >     [lsv]apply usage and a neater look, I think, the idea merits to be
> > > >     considered.
> > > >     To illustrate a possible implementation, I propose a wrapper
> > > >     example for
> > > >     sapply():
> > > >
> > > >     wsapply=function(l, fun, ...) {
> > > >          s=substitute(fun)
> > > >          if (is.name <http://is.name>(s) || is.call(s) &&
> > > >     s[[1]]==as.name <http://as.name>("function")) {
> > > >              sapply(l, fun, ...) # legacy call
> > > >          } else {
> > > >              sapply(l, function(d) eval(s, list(.=d)), ...)
> > > >          }
> > > >     }
> > > >
> > > >     Now, we can do:
> > > >
> > > >     wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt,
> .))$r.squared)
> > > >
> > > >     or, traditional way:
> > > >
> > > >     wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
> > > >     d))$r.squared)
> > > >
> > > >     the both work.
> > > >
> > > >     How do you feel about that?
> > > >
> > > >     Best,
> > > >     Serguei.
> > > >
> > > >     ______________________________________________
> > > >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> > > >     https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > >
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From chen5139 @end|ng |rom umn@edu  Thu Apr 16 19:35:41 2020
From: chen5139 @end|ng |rom umn@edu (Ellie Chen)
Date: Fri, 17 Apr 2020 01:35:41 +0800
Subject: [Rd] Read.Spss use $variable.labels as attributes instead of
 read/write.dta's $var.labels
Message-ID: <CAF8L-ZWYgq_J9D8+8FfysDYCvq0C-aA44DOoDyejZPv2ctKuGQ@mail.gmail.com>

Hi,

I notice that read.spss store variables' labels into df's attributes
as $variable.labels, while write.dta read df's attribute $var.labels as
variable labels. This becomes a problem when I try to convert a bulk of
SPSS's por files into STATA's dta format using these commands. The data
were successfully imported but write.dta couldn't read variable labels due
to the inconsistency. This problem is solved after adding $var.labels into
df's attributes.

I think it will be great if write.dta can read either $var.labels or
$variable.labels as variable labels. What do you think?

Best,
Ellie

	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Thu Apr 16 20:02:17 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Thu, 16 Apr 2020 20:02:17 +0200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <CAFDcVCTdYzWKe1d92mU9gwcKxTPxohBsZ2i-UcTEDjVkR8meSw@mail.gmail.com>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <CAF8bMcYn7+XFEO0EYyLKiqfFobyB4cZGeSd7spGp0Wkd4=tk9A@mail.gmail.com>
 <76013627-801b-f871-f362-5c370eca2167@insa-toulouse.fr>
 <CAMYceO=caXcymUV0b_pJefZncBuN_Ucb66Kq8C8BFASCpypRUA@mail.gmail.com>
 <CAKpp89u2H9wK90k+8U-iTJnpEtU1HCz3W5F2R8CReN31dpvJ3w@mail.gmail.com>
 <CAFDcVCTdYzWKe1d92mU9gwcKxTPxohBsZ2i-UcTEDjVkR8meSw@mail.gmail.com>
Message-ID: <00a5a979-56aa-ab0a-1943-b08f30766cf4@insa-toulouse.fr>

Thanks Henrik,

Probably, it will be the solution I'll retain.

Best,
Serguei.

Le 16/04/2020 ? 18:50, Henrik Bengtsson a ?crit?:
> I'm sure this exists elsewhere, but, as a trade-off, could you achieve
> what you want with a separate helper function F(expr) that constructs
> the function you want to pass to [lsv]apply()?  Something that would
> allow you to write:
>
> sapply(split(mtcars, mtcars$cyl), F(summary(lm(mpg ~ wt,.))$r.squared))
>
> Such an F() function would apply elsewhere too.
>
> /Henrik
>
> On Thu, Apr 16, 2020 at 9:30 AM Michael Mahoney
> <mike.mahoney.218 at gmail.com> wrote:
>> This syntax is already implemented in the {purrr} package, more or
>> less -- you need to add a tilde before your function call for it to
>> work exactly as written:
>>
>> purrr::map_dbl(split(mtcars, mtcars$cyl), ~ summary(lm(wt ~ mpg, .))$r.squared)
>>
>> is equivalent to
>>
>> sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
>> d))$r.squared)
>>
>> Seems like using this package is probably an easier solution for this
>> wish than adding a reserved variable and adding additional syntax to
>> the apply family as a whole.
>>
>> Thanks,
>>
>> -Mike
>>
>>> From: Sokol Serguei <sokol at insa-toulouse.fr>
>>> Date: Thu, Apr 16, 2020 at 12:03 PM
>>> Subject: Re: [Rd] suggestion: "." in [lsv]apply()
>>> To: William Dunlap <wdunlap at tibco.com>
>>> Cc: r-devel <r-devel at r-project.org>
>>>
>>>
>>> Thanks Bill,
>>>
>>> Clearly, my first proposition for wsapply() is quick and dirty one.
>>> However, if "." becomes a reserved variable with this new syntax,
>>> wsapply() can be fixed (at least for your example and alike) as:
>>>
>>> wsapply=function(l, fun, ...) {
>>>       .=substitute(fun)
>>>       if (is.name(.) || is.call(.) && .[[1]]==as.name("function")) {
>>>           sapply(l, fun, ...)
>>>       } else {
>>>           sapply(l, function(d) eval(., list(.=d)), ...)
>>>       }
>>> }
>>>
>>> Will it do the job?
>>>
>>> Best,
>>> Serguei.
>>>
>>> Le 16/04/2020 ? 17:07, William Dunlap a ?crit :
>>>> Passing in a function passes not only an argument list but also an
>>>> environment from which to get free variables. Since your function
>>>> doesn't pay attention to the environment you get things like the
>>>> following.
>>>>
>>>>> wsapply(list(1,2:3), paste(., ":", deparse(s)))
>>>> [[1]]
>>>> [1] "1 : paste(., \":\", deparse(s))"
>>>>
>>>> [[2]]
>>>> [1] "2 : paste(., \":\", deparse(s))" "3 : paste(., \":\", deparse(s))"
>>>>
>>>> Bill Dunlap
>>>> TIBCO Software
>>>> wdunlap tibco.com <http://tibco.com>
>>>>
>>>>
>>>> On Thu, Apr 16, 2020 at 7:25 AM Sokol Serguei <sokol at insa-toulouse.fr
>>>> <mailto:sokol at insa-toulouse.fr>> wrote:
>>>>
>>>>      Hi,
>>>>
>>>>      I would like to make a suggestion for a small syntactic
>>>>      modification of
>>>>      FUN argument in the family of functions [lsv]apply(). The idea is to
>>>>      allow one-liner expressions without typing "function(item) {...}" to
>>>>      surround them. The argument to the anonymous function is simply
>>>>      referred
>>>>      as ".". Let take an example. With this new feature, the following call
>>>>
>>>>      sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
>>>>      d))$r.squared)
>>>>      #        4         6         8
>>>>      #0.5086326 0.4645102 0.4229655
>>>>
>>>>
>>>>      could be rewritten as
>>>>
>>>>      sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
>>>>
>>>>      "Not a big saving in typing" you can say but multiplied by the
>>>>      number of
>>>>      [lsv]apply usage and a neater look, I think, the idea merits to be
>>>>      considered.
>>>>      To illustrate a possible implementation, I propose a wrapper
>>>>      example for
>>>>      sapply():
>>>>
>>>>      wsapply=function(l, fun, ...) {
>>>>           s=substitute(fun)
>>>>           if (is.name <http://is.name>(s) || is.call(s) &&
>>>>      s[[1]]==as.name <http://as.name>("function")) {
>>>>               sapply(l, fun, ...) # legacy call
>>>>           } else {
>>>>               sapply(l, function(d) eval(s, list(.=d)), ...)
>>>>           }
>>>>      }
>>>>
>>>>      Now, we can do:
>>>>
>>>>      wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared)
>>>>
>>>>      or, traditional way:
>>>>
>>>>      wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt,
>>>>      d))$r.squared)
>>>>
>>>>      the both work.
>>>>
>>>>      How do you feel about that?
>>>>
>>>>      Best,
>>>>      Serguei.
>>>>
>>>>      ______________________________________________
>>>>      R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>>>      https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Apr 16 22:48:05 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 17 Apr 2020 08:48:05 +1200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
 <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>
Message-ID: <D6272C13-EE97-4DB8-B195-F48A471A3112@R-project.org>

Sergei,

the main problem that I was pointing out is is that there is no way you can introduce the new syntax without breaking the old one. The expression is evaluated to obtain a function, so by definition using anything that results in a valid expression for your syntax will break. E.g., using sapply(x, (foo)) is completely valid so you can't just change the evaluation of the expression to something different (which is what you're doing). As people were pointing out there are many ways to do this if you change the syntax.

I'm not arguing against the principle, I'm arguing about your particular proposal as it is inconsistent and not general. Personally, I find the current syntax much clearer and readable (defining anything by convention like . being the function variable seems arbitrary and "dirty" to me), but if you wanted to define a shorter syntax, you could use something like x ~> i + x. That said, I really don't see the value of not using function(x) [especially these days when people are arguing for long variable names with the justification that IDEs do all the work anyway], but as I said, my argument was against the actual proposal, not general ideas about syntax improvement.

Cheers,
Simon


> On 17/04/2020, at 3:53 AM, Sokol Serguei <sokol at insa-toulouse.fr> wrote:
> 
> Simon,
> 
> Thanks for replying. In what follows I won't try to argue (I understood that you find this a bad idea) but I would like to make clearer some of your point for me (and may be for others).
> 
> Le 16/04/2020 ? 16:48, Simon Urbanek a ?crit :
>> Serguei,
>>> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr> wrote: Hi, I would like to make a suggestion for a small syntactic modification of FUN argument in the family of functions [lsv]apply(). The idea is to allow one-liner expressions without typing "function(item) {...}" to surround them. The argument to the anonymous function is simply referred as ".". Let take an example. With this new feature, the following call sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) # 4 6 8 #0.5086326 0.4645102 0.4229655 could be rewritten as sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared) "Not a big saving in typing" you can say but multiplied by the number of [lsv]apply usage and a neater look, I think, the idea merits to be considered. 
>> It's not in any way "neater", not only is it less readable, it's just plain wrong. What if the expression returned a function?
> do you mean like in
> l=sapply(1:3, function(i) function(x) i+x)
> l[[1]](3)
> # 4
> l[[2]](3)
> # 5
> 
> This is indeed a corner case but a pair of () or {} can keep wsapply() in course:
> l=wsapply(1:3, (function(x) .+x))
> 
> l[[1]](3)
> 
> # 4
> 
> l[[2]](3)
> 
> # 5
>> How do you know that you don't want to apply the result of the call?
> A small example (if it is significantly different from the one above) would be very helpful for me to understand this point.
> 
>> For the same reason the implementation below won't work - very often you just pass a symbol that evaluates to a function and always en expression that returns a function and there is no way to distinguish that from your new proposed syntax.
> Even with () or {} around such "dotted" expression?
> 
> Best,
> Serguei.
> 
>> When you feel compelled to use substitute() you should hear alarm bells that something is wrong ;). You can certainly write a new function that uses a different syntax (and I'm sure someone has already done that in the package space), but what you propose is incompatible with *apply in R (and very much not R syntax). Cheers, Simon
>>> To illustrate a possible implementation, I propose a wrapper example for sapply(): wsapply=function(l, fun, ...) { s=substitute(fun) if (is.name(s) || is.call(s) && s[[1]]==as.name("function")) { sapply(l, fun, ...) # legacy call } else { sapply(l, function(d) eval(s, list(.=d)), ...) } } Now, we can do: wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, .))$r.squared) or, traditional way: wsapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) the both work. How do you feel about that? Best, Serguei. ______________________________________________ R-devel at r-project.org mailing list https://stat.ethz.ch/mailman/listinfo/r-devel 
>> 
> 


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Apr 17 02:16:17 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 17 Apr 2020 01:16:17 +0100
Subject: [Rd] 
 Add a new environment variable switch for the 'large version' check
In-Reply-To: <CAFDcVCRoas-S3S0ywrmqhXAz-jdbR0pWiK8ANMpV7BqO0rdDDw@mail.gmail.com>
References: <CAD6tx97Vuv=sJeCN8r1fcFtJqCes1F+kR_OrxciO=FOKgOgwbw@mail.gmail.com>
 <24216.28471.119090.576892@rob.eddelbuettel.com>
 <CAFDcVCRoas-S3S0ywrmqhXAz-jdbR0pWiK8ANMpV7BqO0rdDDw@mail.gmail.com>
Message-ID: <CAOO9MKVzSr=b+DCu=jMeLWE4CqQ+P29pCFn1Am1gvT_=7Jt7Ng@mail.gmail.com>

For the same reason, handling false positive in CRAN checks, there are
other places that could be improved.
Like "size of tarball" NOTE.
If one could control this size with an environment variable. Similarly
to the proposal made by Jim. It would be useful as well.

On Thu, Apr 16, 2020 at 5:06 PM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> I'd second Jim's feature request - it would be useful to be able to
> disable this in CI and elsewhere.    The concept of using an "unusual"
> version component such as a very large number does a nice job of
> indicating "unusual" and serves as a blocker for submitting
> work-in-progress to CRAN by mistake (hence the validation in 'R CMD
> check').
>
> Another point, which I don't think Jim made, is that this would make
> it possible to run R CMD check --as-cran on your work-in-progress and
> get all OKs.  This in turn would allow us to trigger a non-zero exit
> status also for NOTEs (not just ERRORs and WARNINGs).  Currently, the
> warning on -9000 is a false positive in this sense.  This will allow
> developers to be more conservative without risking to treat NOTEs as
> something to expect as normal.  CI services are typically configured
> to alert the developer on ERRORs and WARNINGs but, AFAIK, not on
> NOTEs.
>
> On the topic of unusual version numbers: I'd like to suggest that
> CRAN(*) makes an unusual version bump whenever they orphan a package,
> e.g. to suffix -00001. CRAN already updates/modifies the package
> tarball for orphaned packages by setting 'Maintainer: ORPHANED' in the
> DESCRIPTION file. By also bumping the version of orphaned packages it
> would it stand out in sessionInfo(), which helps in troubleshooting
> and bug reports, etc.  But more importantly, the most recent stable
> CRAN release remain untouched, which I think has a value by itself for
> scientific purposes.
>
> /Henrik
>
> (*) Yes, I should email CRAN about this, but I think it's worth
> vetting it here first.
>
> On Thu, Apr 16, 2020 at 7:44 AM Dirk Eddelbuettel <edd at debian.org> wrote:
> >
> >
> > Or you use a fourth component to signal a development version as Rcpp has
> > done for years (and, IIRC, for longer than devtools et al used '9000').
> >
> > There is no functional difference between 1.2.3.1 and 1.2.3.9000. They are
> > both larger than 1.2.3 (in the package_version() sense) and signal an
> > intermediate version between 1.2.3 and 1.2.4.
> >
> > But one requires a patch. ?\_(?)_/?.
> >
> > Dirk
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri Apr 17 10:11:26 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Fri, 17 Apr 2020 10:11:26 +0200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <D6272C13-EE97-4DB8-B195-F48A471A3112@R-project.org>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
 <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>
 <D6272C13-EE97-4DB8-B195-F48A471A3112@R-project.org>
Message-ID: <4093a972-1d71-f003-f073-1463b2d88fd0@insa-toulouse.fr>

Thanks Simon,

Now, I see better your argument.

Le 16/04/2020 ? 22:48, Simon Urbanek a ?crit?:
> ... I'm not arguing against the principle, I'm arguing about your 
> particular proposal as it is inconsistent and not general.
This sounds promising for me. May be in a (new?) future, R core will 
come with a correct proposal for this principle?
Meanwhile, to avoid substitute(), I'll look on the side of formula 
syntax deviation as your example x ~> i + x suggested.

Best,
Serguei.

> Personally, I find the current syntax much clearer and readable 
> (defining anything by convention like . being the function variable 
> seems arbitrary and "dirty" to me), but if you wanted to define a 
> shorter syntax, you could use something like x ~> i + x. That said, I 
> really don't see the value of not using function(x) [especially these 
> days when people are arguing for long variable names with the 
> justification that IDEs do all the work anyway], but as I said, my 
> argument was against the actual proposal, not general ideas about 
> syntax improvement. Cheers, Simon
>> On 17/04/2020, at 3:53 AM, Sokol Serguei <sokol at insa-toulouse.fr> 
>> wrote: Simon, Thanks for replying. In what follows I won't try to 
>> argue (I understood that you find this a bad idea) but I would like 
>> to make clearer some of your point for me (and may be for others). Le 
>> 16/04/2020 ? 16:48, Simon Urbanek a ?crit :
>>> Serguei,
>>>> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr> 
>>>> wrote: Hi, I would like to make a suggestion for a small syntactic 
>>>> modification of FUN argument in the family of functions 
>>>> [lsv]apply(). The idea is to allow one-liner expressions without 
>>>> typing "function(item) {...}" to surround them. The argument to the 
>>>> anonymous function is simply referred as ".". Let take an example. 
>>>> With this new feature, the following call sapply(split(mtcars, 
>>>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) # 4 6 
>>>> 8 #0.5086326 0.4645102 0.4229655 could be rewritten as 
>>>> sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, 
>>>> .))$r.squared) "Not a big saving in typing" you can say but 
>>>> multiplied by the number of [lsv]apply usage and a neater look, I 
>>>> think, the idea merits to be considered. 
>>> It's not in any way "neater", not only is it less readable, it's 
>>> just plain wrong. What if the expression returned a function? 
>> do you mean like in l=sapply(1:3, function(i) function(x) i+x) 
>> l[[1]](3) # 4 l[[2]](3) # 5 This is indeed a corner case but a pair 
>> of () or {} can keep wsapply() in course: l=wsapply(1:3, (function(x) 
>> .+x)) l[[1]](3) # 4 l[[2]](3) # 5
>>> How do you know that you don't want to apply the result of the call? 
>> A small example (if it is significantly different from the one above) 
>> would be very helpful for me to understand this point.
>>> For the same reason the implementation below won't work - very often 
>>> you just pass a symbol that evaluates to a function and always en 
>>> expression that returns a function and there is no way to 
>>> distinguish that from your new proposed syntax. 
>> Even with () or {} around such "dotted" expression? Best, Serguei.
>>> When you feel compelled to use substitute() you should hear alarm 
>>> bells that something is wrong ;). You can certainly write a new 
>>> function that uses a different syntax (and I'm sure someone has 
>>> already done that in the package space), but what you propose is 
>>> incompatible with *apply in R (and very much not R syntax). Cheers, 
>>> Simon
>>>> To illustrate a possible implementation, I propose a wrapper 
>>>> example for sapply(): wsapply=function(l, fun, ...) { 
>>>> s=substitute(fun) if (is.name(s) || is.call(s) && 
>>>> s[[1]]==as.name("function")) { sapply(l, fun, ...) # legacy call } 
>>>> else { sapply(l, function(d) eval(s, list(.=d)), ...) } } Now, we 
>>>> can do: wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt, 
>>>> .))$r.squared) or, traditional way: wsapply(split(mtcars, 
>>>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) the 
>>>> both work. How do you feel about that? Best, Serguei. 
>>>> ______________________________________________ 
>>>> R-devel at r-project.org mailing list 
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel 
>


From j|t@o_d@v|d@zh@ng @end|ng |rom roche@com  Fri Apr 17 09:29:58 2020
From: j|t@o_d@v|d@zh@ng @end|ng |rom roche@com (Zhang, Jitao David)
Date: Fri, 17 Apr 2020 09:29:58 +0200
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
Message-ID: <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>

Dear R developers,

I want to advertise a small project for the educational purpose to show
people how to link native routines.

In R programming, we need to link to native routines in C, C++, or Fortran
from the R environment. In most cases, the linking works within one
package, namely the R code in a package calls the native code in the same
package.

This is not necessarily always the case. Sometimes, a piece of C or R code
in a package needs to link to native routines in another R package.
The *Writing
R Extensions manual describes *how to do this in the section *Linking to
native routines in other packages*. However, some details were not clear to
me, and I could find no demo dedicated to this purpose.

Therefore, I decided to build a demo that is available at my Github
repository Accio/demo-linking-native
<https://github.com/Accio/demo-linking-native>. Besides implementing the
linking of native routines between R packages, the project also documents
issues that I met and how I solved them.

In case you find the demo useful or you have suggestions on how to improve
it, please let me know. I wonder whether you think it is a good idea to
suggest to the core team to add the project to the manual so that other
people can understand the process better with the demo.

In case of questions, let me know.

Best wishes,
David

-- 

*Dr. Jitao David Zhang | ??? | A Computational Biologist in Drug Discovery*

*Building 93/3.38, **Tel +41 61 688 62 51*

*Roche Pharmaceutical Research and Early Development
(pRED) | Pharmaceutical Sciences, BiOmics, BEDA (see http://**go.roche.com/BEDA
<http://go.roche.com/BEDA>**) | Roche Innovation Center Basel | F.
Hoffmann-La-Roche AG | CH-4070 Basel | Switzerland*
*Core working hours - No Meetings: Mo/8:30-16:00; Tu/8:30-17:00;
We/8:30-16:00; Th/9:00-11:30*
*Available for meetings: Mo/16:00-17:00; We/16:00-17:00**; Th/11:00-17:00;
Fr/8:00-10:00*

Confidentiality Note: This message is intended only for ...{{dropped:13}}


From d@v|@ @end|ng |rom r@tud|o@com  Fri Apr 17 15:12:16 2020
From: d@v|@ @end|ng |rom r@tud|o@com (Davis Vaughan)
Date: Fri, 17 Apr 2020 09:12:16 -0400
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
 <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
Message-ID: <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>

Nice David! I also wrote up something similar a little while back
https://github.com/DavisVaughan/cexport

-Davis

On Fri, Apr 17, 2020 at 7:09 AM Zhang, Jitao David via R-devel <
r-devel at r-project.org> wrote:

> Dear R developers,
>
> I want to advertise a small project for the educational purpose to show
> people how to link native routines.
>
> In R programming, we need to link to native routines in C, C++, or Fortran
> from the R environment. In most cases, the linking works within one
> package, namely the R code in a package calls the native code in the same
> package.
>
> This is not necessarily always the case. Sometimes, a piece of C or R code
> in a package needs to link to native routines in another R package.
> The *Writing
> R Extensions manual describes *how to do this in the section *Linking to
> native routines in other packages*. However, some details were not clear to
> me, and I could find no demo dedicated to this purpose.
>
> Therefore, I decided to build a demo that is available at my Github
> repository Accio/demo-linking-native
> <https://github.com/Accio/demo-linking-native>. Besides implementing the
> linking of native routines between R packages, the project also documents
> issues that I met and how I solved them.
>
> In case you find the demo useful or you have suggestions on how to improve
> it, please let me know. I wonder whether you think it is a good idea to
> suggest to the core team to add the project to the manual so that other
> people can understand the process better with the demo.
>
> In case of questions, let me know.
>
> Best wishes,
> David
>
> --
>
> *Dr. Jitao David Zhang | ??? | A Computational Biologist in Drug Discovery*
>
> *Building 93/3.38, **Tel +41 61 688 62 51*
>
> *Roche Pharmaceutical Research and Early Development
> (pRED) | Pharmaceutical Sciences, BiOmics, BEDA (see http://**
> go.roche.com/BEDA
> <http://go.roche.com/BEDA>**) | Roche Innovation Center Basel | F.
> Hoffmann-La-Roche AG | CH-4070 Basel | Switzerland*
> *Core working hours - No Meetings: Mo/8:30-16:00; Tu/8:30-17:00;
> We/8:30-16:00; Th/9:00-11:30*
> *Available for meetings: Mo/16:00-17:00; We/16:00-17:00**; Th/11:00-17:00;
> Fr/8:00-10:00*
>
> Confidentiality Note: This message is intended only for ...{{dropped:13}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From j|t@o_d@v|d@zh@ng @end|ng |rom roche@com  Fri Apr 17 15:14:33 2020
From: j|t@o_d@v|d@zh@ng @end|ng |rom roche@com (Zhang, Jitao David)
Date: Fri, 17 Apr 2020 15:14:33 +0200
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
 <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
 <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>
Message-ID: <CAGfFYHTo_g=_skoztOa9W9k3JtkqURE_-8onwSnHWtEh7dF25Q@mail.gmail.com>

Dear Davis,

Thank you a lot for sharing this, and I am happy that I was not the only
one who need to do it once to learn:)

I proposed to add my repo to the manual. I think it makes sense to add both
of ours, if possible, or we could merge them together and add that to the
manual.

Long-term URL stability is apparently an issue, but I think we may find a
solution there.

Anyway, thanks a lot for sharing!

Best wishes,
David

On Fri, Apr 17, 2020 at 3:12 PM Davis Vaughan <davis at rstudio.com> wrote:

> Nice David! I also wrote up something similar a little while back
> https://github.com/DavisVaughan/cexport
>
> -Davis
>
> On Fri, Apr 17, 2020 at 7:09 AM Zhang, Jitao David via R-devel <
> r-devel at r-project.org> wrote:
>
>> Dear R developers,
>>
>> I want to advertise a small project for the educational purpose to show
>> people how to link native routines.
>>
>> In R programming, we need to link to native routines in C, C++, or Fortran
>> from the R environment. In most cases, the linking works within one
>> package, namely the R code in a package calls the native code in the same
>> package.
>>
>> This is not necessarily always the case. Sometimes, a piece of C or R code
>> in a package needs to link to native routines in another R package.
>> The *Writing
>> R Extensions manual describes *how to do this in the section *Linking to
>> native routines in other packages*. However, some details were not clear
>> to
>> me, and I could find no demo dedicated to this purpose.
>>
>> Therefore, I decided to build a demo that is available at my Github
>> repository Accio/demo-linking-native
>> <https://github.com/Accio/demo-linking-native>. Besides implementing the
>> linking of native routines between R packages, the project also documents
>> issues that I met and how I solved them.
>>
>> In case you find the demo useful or you have suggestions on how to improve
>> it, please let me know. I wonder whether you think it is a good idea to
>> suggest to the core team to add the project to the manual so that other
>> people can understand the process better with the demo.
>>
>> In case of questions, let me know.
>>
>> Best wishes,
>> David
>>
>> --
>>
>> *Dr. Jitao David Zhang | ??? | A Computational Biologist in Drug
>> Discovery*
>>
>> *Building 93/3.38, **Tel +41 61 688 62 51*
>>
>> *Roche Pharmaceutical Research and Early Development
>> (pRED) | Pharmaceutical Sciences, BiOmics, BEDA (see http://**
>> go.roche.com/BEDA
>> <http://go.roche.com/BEDA>**) | Roche Innovation Center Basel | F.
>> Hoffmann-La-Roche AG | CH-4070 Basel | Switzerland*
>> *Core working hours - No Meetings: Mo/8:30-16:00; Tu/8:30-17:00;
>> We/8:30-16:00; Th/9:00-11:30*
>> *Available for meetings: Mo/16:00-17:00; We/16:00-17:00**; Th/11:00-17:00;
>> Fr/8:00-10:00*
>>
>> Confidentiality Note: This message is intended only for ...{{dropped:13}}
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

-- 

*Dr. Jitao David Zhang | ??? | A Computational Biologist in Drug Discovery*

*Building 93/3.38, **Tel +41 61 688 62 51*

*Roche Pharmaceutical Research and Early Development
(pRED) | Pharmaceutical Sciences, BiOmics, BEDA (see http://**go.roche.com/BEDA
<http://go.roche.com/BEDA>**) | Roche Innovation Center Basel | F.
Hoffmann-La-Roche AG | CH-4070 Basel | Switzerland*
*Core working hours - No Meetings: Mo/8:30-16:00; Tu/8:30-17:00;
We/8:30-16:00; Th/9:00-11:30*
*Available for meetings: Mo/16:00-17:00; We/16:00-17:00**; Th/11:00-17:00;
Fr/8:00-10:00*

Confidentiality Note: This message is intended only for ...{{dropped:13}}


From edd @end|ng |rom deb|@n@org  Fri Apr 17 15:40:46 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 17 Apr 2020 08:40:46 -0500
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CAGfFYHTo_g=_skoztOa9W9k3JtkqURE_-8onwSnHWtEh7dF25Q@mail.gmail.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
 <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
 <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>
 <CAGfFYHTo_g=_skoztOa9W9k3JtkqURE_-8onwSnHWtEh7dF25Q@mail.gmail.com>
Message-ID: <24217.45534.235186.414802@rob.eddelbuettel.com>


Jitao,

Thanks for writing this up.

You could add a section on 'prior art' and references.  The canonical example
always was (c.f. Writing R Extensions)

  lme4 <-> Matrix

which was followed early by the CRAN packages

  zoo <-> xts
  
upon which I built

  xts <-> RcppXts
  
with a write-up (from 2013 !!) here: https://gallery.rcpp.org/articles/accessing-xts-api/

Via private mail, I helped then-maintainer Vincent connect expm:

  expm <-> Matrix

and built two packages on CRAN _for the very purpose of exporting API
functions to be called_ (which in both cases are from base R as R Core is
very careful not get tied into exporting APIs, which is both understandable
and a source of added difficulty for us package writers)

  RApiDatetime
  RApiSerialize

The latter one is use by my RcppRedis package, Travers' very nice qs package
and Tim's rpg package.

To my reading, the R Community is drifting more and more towards collective
amnesia where prior work is (pick any one the following)

 - ignored altogether
 - reinvented by another package
 - shadowed by another package
 
rather than extended, improved and/or cited.  That is a collective loss for
all of us. It would be nice if you could stear back a little and reference
prior related work. My apologies to other packages in this area I have not
listed. We really should have a common reference for this.

Cheers, Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From d@v|@ @end|ng |rom r@tud|o@com  Fri Apr 17 15:44:11 2020
From: d@v|@ @end|ng |rom r@tud|o@com (Davis Vaughan)
Date: Fri, 17 Apr 2020 09:44:11 -0400
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <24217.45534.235186.414802@rob.eddelbuettel.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
 <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
 <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>
 <CAGfFYHTo_g=_skoztOa9W9k3JtkqURE_-8onwSnHWtEh7dF25Q@mail.gmail.com>
 <24217.45534.235186.414802@rob.eddelbuettel.com>
Message-ID: <CABzLhzyqNsFHhx4L-1m4t-t4OUzSoOmLhEufuL8RwmPF=hoXeg@mail.gmail.com>

I tried to do this a little. I mentioned xts along with:
bdsmatrix https://github.com/cran/bdsmatrix
cleancall https://github.com/r-lib/cleancall/

On Fri, Apr 17, 2020 at 9:40 AM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> Jitao,
>
> Thanks for writing this up.
>
> You could add a section on 'prior art' and references.  The canonical
> example
> always was (c.f. Writing R Extensions)
>
>   lme4 <-> Matrix
>
> which was followed early by the CRAN packages
>
>   zoo <-> xts
>
> upon which I built
>
>   xts <-> RcppXts
>
> with a write-up (from 2013 !!) here:
> https://gallery.rcpp.org/articles/accessing-xts-api/
>
> Via private mail, I helped then-maintainer Vincent connect expm:
>
>   expm <-> Matrix
>
> and built two packages on CRAN _for the very purpose of exporting API
> functions to be called_ (which in both cases are from base R as R Core is
> very careful not get tied into exporting APIs, which is both understandable
> and a source of added difficulty for us package writers)
>
>   RApiDatetime
>   RApiSerialize
>
> The latter one is use by my RcppRedis package, Travers' very nice qs
> package
> and Tim's rpg package.
>
> To my reading, the R Community is drifting more and more towards collective
> amnesia where prior work is (pick any one the following)
>
>  - ignored altogether
>  - reinvented by another package
>  - shadowed by another package
>
> rather than extended, improved and/or cited.  That is a collective loss for
> all of us. It would be nice if you could stear back a little and reference
> prior related work. My apologies to other packages in this area I have not
> listed. We really should have a common reference for this.
>
> Cheers, Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri Apr 17 16:14:44 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 17 Apr 2020 09:14:44 -0500
Subject: [Rd] How to find detritis rejected by "R CMD check" on Debian?
Message-ID: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>

Hello:


 ????? How can someone help me find and fix the following, contained in 
00check.log on Debian for "https://github.com/JamesRamsay5/fda":


NOTE
Found the following files/directories:
 ? ?fdaMatlabPath.m?
* checking for detritus in the temp directory ... OK


 ????? See:


https://win-builder.r-project.org/incoming_pretest/fda_5.1.3_20200416_225207/Debian/00check.log


 ????? Thanks,
 ????? Spencer Graves


From edd @end|ng |rom deb|@n@org  Fri Apr 17 16:29:20 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 17 Apr 2020 09:29:20 -0500
Subject: [Rd] How to find detritis rejected by "R CMD check" on Debian?
In-Reply-To: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>
References: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>
Message-ID: <24217.48448.747839.573431@rob.eddelbuettel.com>


Spencer,

On 17 April 2020 at 09:14, Spencer Graves wrote:
|  ????? How can someone help me find and fix the following, contained in 
| 00check.log on Debian for "https://github.com/JamesRamsay5/fda":
| 
| NOTE
| Found the following files/directories:
|  ? ?fdaMatlabPath.m?
| * checking for detritus in the temp directory ... OK

Obviously from your package, so you could use a tool like 'grep' locally.

We can just turn to Gabor's handy CRAN mirror at GitHub, open the
repo at github.com/cran/fda and enter the filename in the search.
Second hit is

  writeLines(d2a, 'fdaMatlabPath.m')

which is obviously a file _you write_ and not not delete just as
the package checking diagnostic suggests. As frequently suggested here or on
r-package-devel (where this belonged), prefix paths by `tempdir()` or change
there first.

Dirk



-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From j|t@o_d@v|d@zh@ng @end|ng |rom roche@com  Fri Apr 17 16:32:20 2020
From: j|t@o_d@v|d@zh@ng @end|ng |rom roche@com (Zhang, Jitao David)
Date: Fri, 17 Apr 2020 16:32:20 +0200
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <24217.45534.235186.414802@rob.eddelbuettel.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
 <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
 <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>
 <CAGfFYHTo_g=_skoztOa9W9k3JtkqURE_-8onwSnHWtEh7dF25Q@mail.gmail.com>
 <24217.45534.235186.414802@rob.eddelbuettel.com>
Message-ID: <CAGfFYHRs8Ym5QZQs9HVtUifU97JhiHL4wdysEo41eAdkW7zG5g@mail.gmail.com>

Dear Davis and Dirk,

Thank you very much for the suggestions, which are very valuable and
helpful.

I will add references to prior examples, document my project with the clear
step-by-step-style document of Davis's project, and come back again to the
mailing list.

Best wishes,
David

On Fri, Apr 17, 2020 at 3:40 PM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> Jitao,
>
> Thanks for writing this up.
>
> You could add a section on 'prior art' and references.  The canonical
> example
> always was (c.f. Writing R Extensions)
>
>   lme4 <-> Matrix
>
> which was followed early by the CRAN packages
>
>   zoo <-> xts
>
> upon which I built
>
>   xts <-> RcppXts
>
> with a write-up (from 2013 !!) here:
> https://gallery.rcpp.org/articles/accessing-xts-api/
>
> Via private mail, I helped then-maintainer Vincent connect expm:
>
>   expm <-> Matrix
>
> and built two packages on CRAN _for the very purpose of exporting API
> functions to be called_ (which in both cases are from base R as R Core is
> very careful not get tied into exporting APIs, which is both understandable
> and a source of added difficulty for us package writers)
>
>   RApiDatetime
>   RApiSerialize
>
> The latter one is use by my RcppRedis package, Travers' very nice qs
> package
> and Tim's rpg package.
>
> To my reading, the R Community is drifting more and more towards collective
> amnesia where prior work is (pick any one the following)
>
>  - ignored altogether
>  - reinvented by another package
>  - shadowed by another package
>
> rather than extended, improved and/or cited.  That is a collective loss for
> all of us. It would be nice if you could stear back a little and reference
> prior related work. My apologies to other packages in this area I have not
> listed. We really should have a common reference for this.
>
> Cheers, Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>


-- 

*Dr. Jitao David Zhang | ??? | A Computational Biologist in Drug Discovery*

*Building 93/3.38, **Tel +41 61 688 62 51*

*Roche Pharmaceutical Research and Early Development
(pRED) | Pharmaceutical Sciences, BiOmics, BEDA (see http://**go.roche.com/BEDA
<http://go.roche.com/BEDA>**) | Roche Innovation Center Basel | F.
Hoffmann-La-Roche AG | CH-4070 Basel | Switzerland*
*Core working hours - No Meetings: Mo/8:30-16:00; Tu/8:30-17:00;
We/8:30-16:00; Th/9:00-11:30*
*Available for meetings: Mo/16:00-17:00; We/16:00-17:00**; Th/11:00-17:00;
Fr/8:00-10:00*

Confidentiality Note: This message is intended only for ...{{dropped:13}}


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr 17 16:33:45 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 17 Apr 2020 10:33:45 -0400
Subject: [Rd] How to find detritis rejected by "R CMD check" on Debian?
In-Reply-To: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>
References: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>
Message-ID: <92b22031-e678-2eac-66e5-ea5979e2bb16@gmail.com>

On 17/04/2020 10:14 a.m., Spencer Graves wrote:
> Hello:
> 
> 
>   ????? How can someone help me find and fix the following, contained in
> 00check.log on Debian for "https://github.com/JamesRamsay5/fda":
> 
> 
> NOTE
> Found the following files/directories:
>   ? ?fdaMatlabPath.m?
> * checking for detritus in the temp directory ... OK
> 
> 
>   ????? See:


That would have resulted from running the example in ?fdaMatlabPath.

You could stop that from happening in a test by using

if (interactive())
   fdaMatlabPath()

but it still potentially wipes out a user's file.  Can't you ask the 
user for the filename to write to, and have the example write to 
tempdir() instead of the current directory?

Duncan Murdoch


From kry|ov@r00t @end|ng |rom gm@||@com  Fri Apr 17 16:32:43 2020
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 17 Apr 2020 17:32:43 +0300
Subject: [Rd] How to find detritis rejected by "R CMD check" on Debian?
In-Reply-To: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>
References: <e5403fc1-1832-066c-16d9-2d05eea4075d@prodsyse.com>
Message-ID: <20200417173243.6853ac0e@Tarkus>

This should probably have been addressed to R-pkg-devel, not Rd.

On Fri, 17 Apr 2020 09:14:44 -0500
Spencer Graves <spencer.graves at prodsyse.com> wrote:

> Found the following files/directories:
>  ? ?fdaMatlabPath.m?

This is not the "detritus in the temp directory"; the message is related
to the previous line in the log:

>> * checking for non-standard things in the check directory ... NOTE

I searched the repo for the file name in question and got a few hits
[1]. R CMD check runs the \examples{}, including those in
man/fdaMatlabPath.Rd. The function from R/fdaMatlabPath.R, called from
the examples, writes a file in the current directory [2], which
happens to be the check directory during R CMD check. In order to
conform to the CRAN policy, the function should receive the target file
name as a parameter instead, and the example should pass a file path
somewhere in tempdir().

-- 
Best regards,
Ivan

[1] https://github.com/JamesRamsay5/fda/search?q=fdaMatlabPath.m

[2]
https://github.com/JamesRamsay5/fda/blob/ca077f87f69efcfc434eeea39f4fff6136fcfaeb/R/fdaMatlabPath.R#L33


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Apr 17 17:00:40 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 17 Apr 2020 16:00:40 +0100
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CAGfFYHRs8Ym5QZQs9HVtUifU97JhiHL4wdysEo41eAdkW7zG5g@mail.gmail.com>
References: <CAGfFYHTB7dq+z7zRAA0=JGLyBQJ8cRvPVp6GmqMPPbDovFUkpg@mail.gmail.com>
 <CAGfFYHRNBRBF+_ELLFdsqVYijYmRL47HA5Hs1HaW6TTALoU8LA@mail.gmail.com>
 <CABzLhzwpmKjQ8DZ7dePcwYbGt5GDs9PBgpFrufxsbFF7VvhwtA@mail.gmail.com>
 <CAGfFYHTo_g=_skoztOa9W9k3JtkqURE_-8onwSnHWtEh7dF25Q@mail.gmail.com>
 <24217.45534.235186.414802@rob.eddelbuettel.com>
 <CAGfFYHRs8Ym5QZQs9HVtUifU97JhiHL4wdysEo41eAdkW7zG5g@mail.gmail.com>
Message-ID: <CAOO9MKX3dbNDyzRYUMpuYS8QgKMf_rSkw5vs2trQktB_hhtocg@mail.gmail.com>

Dirk, Thank you for a comprehensive set of resources on that.

Yet, I think the proposal here make sense.
Packages you mentioned are real-life package. It would be way easier
to learn from a package that is meant to only show this single thing.
For the same reason I think it also make sense to have a "hello world
from C" package linked from WRE. All those native routines
registration, the proper way, is not really that obvious. It would be
much easier to learn from a package that doesn't have any other logic.

Best wishes,
Jan Gorecki

On Fri, Apr 17, 2020 at 3:32 PM Zhang, Jitao David via R-devel
<r-devel at r-project.org> wrote:
>
> Dear Davis and Dirk,
>
> Thank you very much for the suggestions, which are very valuable and
> helpful.
>
> I will add references to prior examples, document my project with the clear
> step-by-step-style document of Davis's project, and come back again to the
> mailing list.
>
> Best wishes,
> David
>
> On Fri, Apr 17, 2020 at 3:40 PM Dirk Eddelbuettel <edd at debian.org> wrote:
>
> >
> > Jitao,
> >
> > Thanks for writing this up.
> >
> > You could add a section on 'prior art' and references.  The canonical
> > example
> > always was (c.f. Writing R Extensions)
> >
> >   lme4 <-> Matrix
> >
> > which was followed early by the CRAN packages
> >
> >   zoo <-> xts
> >
> > upon which I built
> >
> >   xts <-> RcppXts
> >
> > with a write-up (from 2013 !!) here:
> > https://gallery.rcpp.org/articles/accessing-xts-api/
> >
> > Via private mail, I helped then-maintainer Vincent connect expm:
> >
> >   expm <-> Matrix
> >
> > and built two packages on CRAN _for the very purpose of exporting API
> > functions to be called_ (which in both cases are from base R as R Core is
> > very careful not get tied into exporting APIs, which is both understandable
> > and a source of added difficulty for us package writers)
> >
> >   RApiDatetime
> >   RApiSerialize
> >
> > The latter one is use by my RcppRedis package, Travers' very nice qs
> > package
> > and Tim's rpg package.
> >
> > To my reading, the R Community is drifting more and more towards collective
> > amnesia where prior work is (pick any one the following)
> >
> >  - ignored altogether
> >  - reinvented by another package
> >  - shadowed by another package
> >
> > rather than extended, improved and/or cited.  That is a collective loss for
> > all of us. It would be nice if you could stear back a little and reference
> > prior related work. My apologies to other packages in this area I have not
> > listed. We really should have a common reference for this.
> >
> > Cheers, Dirk
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> >
>
>
> --
>
> *Dr. Jitao David Zhang | ??? | A Computational Biologist in Drug Discovery*
>
> *Building 93/3.38, **Tel +41 61 688 62 51*
>
> *Roche Pharmaceutical Research and Early Development
> (pRED) | Pharmaceutical Sciences, BiOmics, BEDA (see http://**go.roche.com/BEDA
> <http://go.roche.com/BEDA>**) | Roche Innovation Center Basel | F.
> Hoffmann-La-Roche AG | CH-4070 Basel | Switzerland*
> *Core working hours - No Meetings: Mo/8:30-16:00; Tu/8:30-17:00;
> We/8:30-16:00; Th/9:00-11:30*
> *Available for meetings: Mo/16:00-17:00; We/16:00-17:00**; Th/11:00-17:00;
> Fr/8:00-10:00*
>
> Confidentiality Note: This message is intended only for ...{{dropped:13}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Sun Apr 19 20:46:38 2020
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 19 Apr 2020 14:46:38 -0400
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <4093a972-1d71-f003-f073-1463b2d88fd0@insa-toulouse.fr>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
 <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>
 <D6272C13-EE97-4DB8-B195-F48A471A3112@R-project.org>
 <4093a972-1d71-f003-f073-1463b2d88fd0@insa-toulouse.fr>
Message-ID: <CAP01uR=4icwQaku7zztFSwbzGfaPGsZVeZ0vt=+JpHa0RDmfGw@mail.gmail.com>

You can get pretty close to that already using fn$ in the gsubfn package:

> library(gsubfn)
> fn$sapply(split(mtcars, mtcars$cyl), x ~ summary(lm(mpg ~ wt, x))$r.squared)
        4         6         8
0.5086326 0.4645102 0.4229655

It is not specific to sapply but rather fn$ can preface most functions.
If the only free variables are the arguments to the function then you
can omit the left hand side of the formula, i.e. the arguments to the
function are implied by the free variables in the right hand side.  Here
x is the implied argument to the function because it is a free variable.
We did not have use the name x.  Any name could be used.  It is the
fact that it is a free variable, not its name, that matters.

> fn$sapply(split(mtcars, mtcars$cyl), ~ sum(dim(x)))
 4  6  8
22 18 25

On Fri, Apr 17, 2020 at 4:11 AM Sokol Serguei <sokol at insa-toulouse.fr> wrote:
>
> Thanks Simon,
>
> Now, I see better your argument.
>
> Le 16/04/2020 ? 22:48, Simon Urbanek a ?crit :
> > ... I'm not arguing against the principle, I'm arguing about your
> > particular proposal as it is inconsistent and not general.
> This sounds promising for me. May be in a (new?) future, R core will
> come with a correct proposal for this principle?
> Meanwhile, to avoid substitute(), I'll look on the side of formula
> syntax deviation as your example x ~> i + x suggested.
>
> Best,
> Serguei.
>
> > Personally, I find the current syntax much clearer and readable
> > (defining anything by convention like . being the function variable
> > seems arbitrary and "dirty" to me), but if you wanted to define a
> > shorter syntax, you could use something like x ~> i + x. That said, I
> > really don't see the value of not using function(x) [especially these
> > days when people are arguing for long variable names with the
> > justification that IDEs do all the work anyway], but as I said, my
> > argument was against the actual proposal, not general ideas about
> > syntax improvement. Cheers, Simon
> >> On 17/04/2020, at 3:53 AM, Sokol Serguei <sokol at insa-toulouse.fr>
> >> wrote: Simon, Thanks for replying. In what follows I won't try to
> >> argue (I understood that you find this a bad idea) but I would like
> >> to make clearer some of your point for me (and may be for others). Le
> >> 16/04/2020 ? 16:48, Simon Urbanek a ?crit :
> >>> Serguei,
> >>>> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr>
> >>>> wrote: Hi, I would like to make a suggestion for a small syntactic
> >>>> modification of FUN argument in the family of functions
> >>>> [lsv]apply(). The idea is to allow one-liner expressions without
> >>>> typing "function(item) {...}" to surround them. The argument to the
> >>>> anonymous function is simply referred as ".". Let take an example.
> >>>> With this new feature, the following call sapply(split(mtcars,
> >>>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) # 4 6
> >>>> 8 #0.5086326 0.4645102 0.4229655 could be rewritten as
> >>>> sapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt,
> >>>> .))$r.squared) "Not a big saving in typing" you can say but
> >>>> multiplied by the number of [lsv]apply usage and a neater look, I
> >>>> think, the idea merits to be considered.
> >>> It's not in any way "neater", not only is it less readable, it's
> >>> just plain wrong. What if the expression returned a function?
> >> do you mean like in l=sapply(1:3, function(i) function(x) i+x)
> >> l[[1]](3) # 4 l[[2]](3) # 5 This is indeed a corner case but a pair
> >> of () or {} can keep wsapply() in course: l=wsapply(1:3, (function(x)
> >> .+x)) l[[1]](3) # 4 l[[2]](3) # 5
> >>> How do you know that you don't want to apply the result of the call?
> >> A small example (if it is significantly different from the one above)
> >> would be very helpful for me to understand this point.
> >>> For the same reason the implementation below won't work - very often
> >>> you just pass a symbol that evaluates to a function and always en
> >>> expression that returns a function and there is no way to
> >>> distinguish that from your new proposed syntax.
> >> Even with () or {} around such "dotted" expression? Best, Serguei.
> >>> When you feel compelled to use substitute() you should hear alarm
> >>> bells that something is wrong ;). You can certainly write a new
> >>> function that uses a different syntax (and I'm sure someone has
> >>> already done that in the package space), but what you propose is
> >>> incompatible with *apply in R (and very much not R syntax). Cheers,
> >>> Simon
> >>>> To illustrate a possible implementation, I propose a wrapper
> >>>> example for sapply(): wsapply=function(l, fun, ...) {
> >>>> s=substitute(fun) if (is.name(s) || is.call(s) &&
> >>>> s[[1]]==as.name("function")) { sapply(l, fun, ...) # legacy call }
> >>>> else { sapply(l, function(d) eval(s, list(.=d)), ...) } } Now, we
> >>>> can do: wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ wt,
> >>>> .))$r.squared) or, traditional way: wsapply(split(mtcars,
> >>>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) the
> >>>> both work. How do you feel about that? Best, Serguei.
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Mon Apr 20 15:32:23 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Mon, 20 Apr 2020 15:32:23 +0200
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <CAP01uR=4icwQaku7zztFSwbzGfaPGsZVeZ0vt=+JpHa0RDmfGw@mail.gmail.com>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
 <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>
 <D6272C13-EE97-4DB8-B195-F48A471A3112@R-project.org>
 <4093a972-1d71-f003-f073-1463b2d88fd0@insa-toulouse.fr>
 <CAP01uR=4icwQaku7zztFSwbzGfaPGsZVeZ0vt=+JpHa0RDmfGw@mail.gmail.com>
Message-ID: <0fe81194-6a9b-bd49-134a-cbb8d0f1c17c@insa-toulouse.fr>

Le 19/04/2020 ? 20:46, Gabor Grothendieck a ?crit?:
> You can get pretty close to that already using fn$ in the gsubfn package:
>> library(gsubfn) fn$sapply(split(mtcars, mtcars$cyl), x ~ 
>> summary(lm(mpg ~ wt, x))$r.squared) 
> 4 6 8 0.5086326 0.4645102 0.4229655
Right, I thought about similar syntax but this implementation has 
similar flaws pointed by Simon, i.e. it reduces the domain of valid 
inputs (though not on the same parameters). Take an example:

library(gsubfn)
fn$sapply(quote(x+y), as.character)
#Error in lapply(X = X, FUN = FUN, ...) : object 'x' not found

while

sapply(quote(x+y), as.character)
#[1] "+" "x" "y"

This makes me think that it could be advantageous to replace 
match.fun(FUN) in *apply() family by as.function(FUN) with obvious 
additional methods:
as.function.character <- function(x) match.fun(x)
as.function.name <- function(x) match.fun(x)

Such replacement would leave current usage of *apply() as is but at the 
same time would leave enough space for users who want to adapt *apply() 
to their objects like formula or whatever class that is currently not 
convertible to functions by match.fun()

Would it be possible?

Best,
Serguei.

> It is not specific to sapply but rather fn$ can preface most 
> functions. If the only free variables are the arguments to the 
> function then you can omit the left hand side of the formula, i.e. the 
> arguments to the function are implied by the free variables in the 
> right hand side. Here x is the implied argument to the function 
> because it is a free variable. We did not have use the name x. Any 
> name could be used. It is the fact that it is a free variable, not its 
> name, that matters.
>> fn$sapply(split(mtcars, mtcars$cyl), ~ sum(dim(x))) 
> 4 6 8 22 18 25 On Fri, Apr 17, 2020 at 4:11 AM Sokol Serguei 
> <sokol at insa-toulouse.fr> wrote:
>> Thanks Simon, Now, I see better your argument. Le 16/04/2020 ? 22:48, 
>> Simon Urbanek a ?crit :
>>> ... I'm not arguing against the principle, I'm arguing about your 
>>> particular proposal as it is inconsistent and not general. 
>> This sounds promising for me. May be in a (new?) future, R core will 
>> come with a correct proposal for this principle? Meanwhile, to avoid 
>> substitute(), I'll look on the side of formula syntax deviation as 
>> your example x ~> i + x suggested. Best, Serguei.
>>> Personally, I find the current syntax much clearer and readable 
>>> (defining anything by convention like . being the function variable 
>>> seems arbitrary and "dirty" to me), but if you wanted to define a 
>>> shorter syntax, you could use something like x ~> i + x. That said, 
>>> I really don't see the value of not using function(x) [especially 
>>> these days when people are arguing for long variable names with the 
>>> justification that IDEs do all the work anyway], but as I said, my 
>>> argument was against the actual proposal, not general ideas about 
>>> syntax improvement. Cheers, Simon
>>>> On 17/04/2020, at 3:53 AM, Sokol Serguei <sokol at insa-toulouse.fr> 
>>>> wrote: Simon, Thanks for replying. In what follows I won't try to 
>>>> argue (I understood that you find this a bad idea) but I would like 
>>>> to make clearer some of your point for me (and may be for others). 
>>>> Le 16/04/2020 ? 16:48, Simon Urbanek a ?crit :
>>>>> Serguei,
>>>>>> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr> 
>>>>>> wrote: Hi, I would like to make a suggestion for a small 
>>>>>> syntactic modification of FUN argument in the family of functions 
>>>>>> [lsv]apply(). The idea is to allow one-liner expressions without 
>>>>>> typing "function(item) {...}" to surround them. The argument to 
>>>>>> the anonymous function is simply referred as ".". Let take an 
>>>>>> example. With this new feature, the following call 
>>>>>> sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~ 
>>>>>> wt, d))$r.squared) # 4 6 8 #0.5086326 0.4645102 0.4229655 could 
>>>>>> be rewritten as sapply(split(mtcars, mtcars$cyl), summary(lm(mpg 
>>>>>> ~ wt, .))$r.squared) "Not a big saving in typing" you can say but 
>>>>>> multiplied by the number of [lsv]apply usage and a neater look, I 
>>>>>> think, the idea merits to be considered. 
>>>>> It's not in any way "neater", not only is it less readable, it's 
>>>>> just plain wrong. What if the expression returned a function? 
>>>> do you mean like in l=sapply(1:3, function(i) function(x) i+x) 
>>>> l[[1]](3) # 4 l[[2]](3) # 5 This is indeed a corner case but a pair 
>>>> of () or {} can keep wsapply() in course: l=wsapply(1:3, 
>>>> (function(x) .+x)) l[[1]](3) # 4 l[[2]](3) # 5
>>>>> How do you know that you don't want to apply the result of the call? 
>>>> A small example (if it is significantly different from the one 
>>>> above) would be very helpful for me to understand this point.
>>>>> For the same reason the implementation below won't work - very 
>>>>> often you just pass a symbol that evaluates to a function and 
>>>>> always en expression that returns a function and there is no way 
>>>>> to distinguish that from your new proposed syntax. 
>>>> Even with () or {} around such "dotted" expression? Best, Serguei.
>>>>> When you feel compelled to use substitute() you should hear alarm 
>>>>> bells that something is wrong ;). You can certainly write a new 
>>>>> function that uses a different syntax (and I'm sure someone has 
>>>>> already done that in the package space), but what you propose is 
>>>>> incompatible with *apply in R (and very much not R syntax). 
>>>>> Cheers, Simon
>>>>>> To illustrate a possible implementation, I propose a wrapper 
>>>>>> example for sapply(): wsapply=function(l, fun, ...) { 
>>>>>> s=substitute(fun) if (is.name(s) || is.call(s) && 
>>>>>> s[[1]]==as.name("function")) { sapply(l, fun, ...) # legacy call 
>>>>>> } else { sapply(l, function(d) eval(s, list(.=d)), ...) } } Now, 
>>>>>> we can do: wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~ 
>>>>>> wt, .))$r.squared) or, traditional way: wsapply(split(mtcars, 
>>>>>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) the 
>>>>>> both work. How do you feel about that? Best, Serguei. 
>>>>>> ______________________________________________ 
>>>>>> R-devel at r-project.org mailing list 
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel 
>> ______________________________________________ R-devel at r-project.org 
>> mailing list https://stat.ethz.ch/mailman/listinfo/r-devel 
>


From ggrothend|eck @end|ng |rom gm@||@com  Mon Apr 20 16:49:58 2020
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Mon, 20 Apr 2020 10:49:58 -0400
Subject: [Rd] suggestion: "." in [lsv]apply()
In-Reply-To: <0fe81194-6a9b-bd49-134a-cbb8d0f1c17c@insa-toulouse.fr>
References: <52f3940e-0886-fcae-189a-30b051f4eade@insa-toulouse.fr>
 <E115B737-0D16-4BDE-B9E9-FF931801E026@R-project.org>
 <2a37aa5d-d1c0-56ec-f7c8-2539faf8e1cd@insa-toulouse.fr>
 <D6272C13-EE97-4DB8-B195-F48A471A3112@R-project.org>
 <4093a972-1d71-f003-f073-1463b2d88fd0@insa-toulouse.fr>
 <CAP01uR=4icwQaku7zztFSwbzGfaPGsZVeZ0vt=+JpHa0RDmfGw@mail.gmail.com>
 <0fe81194-6a9b-bd49-134a-cbb8d0f1c17c@insa-toulouse.fr>
Message-ID: <CAP01uRmELgPEL_9LX2zAdkrR_t2E=ehTWnqBhQ4ffBU_8ARnBQ@mail.gmail.com>

I wouldn't drive my choices using unlikely edge cases
but rather focus on the vast majority of practical cases.

The popularity of tidyverse shows that this philosophy
works well from a user's perspective.

For the vast majority of practical cases it works well, and for the
others you can either use function as usual or do it like this:

lapply(quote(a + b), fn$identity(~ as.character(x)))

or (we used dot here but you can use any name you like)

. <- fn$identity
lapply(quote(a + b), .(~ as.character(x)))

For the vast majority of practical cases it has the advantages that the function
can be represented more naturally using whatever argument names are most
convenient rather than being forced to use reserved names and it supports
multiple arguments and dot dot dot.

Also it does more than just represent functions. It also interpolates strings
so it can be used for multiple purposes.

library(sqldf)
mytime <- 4
fn$sqldf("select * from BOD where Time < $mytime")


On Mon, Apr 20, 2020 at 9:32 AM Sokol Serguei <sokol at insa-toulouse.fr> wrote:
>
> Le 19/04/2020 ? 20:46, Gabor Grothendieck a ?crit :
> > You can get pretty close to that already using fn$ in the gsubfn package:
> >> library(gsubfn) fn$sapply(split(mtcars, mtcars$cyl), x ~
> >> summary(lm(mpg ~ wt, x))$r.squared)
> > 4 6 8 0.5086326 0.4645102 0.4229655
> Right, I thought about similar syntax but this implementation has
> similar flaws pointed by Simon, i.e. it reduces the domain of valid
> inputs (though not on the same parameters). Take an example:
>
> library(gsubfn)
> fn$sapply(quote(x+y), as.character)
> #Error in lapply(X = X, FUN = FUN, ...) : object 'x' not found
>
> while
>
> sapply(quote(x+y), as.character)
> #[1] "+" "x" "y"
>
> This makes me think that it could be advantageous to replace
> match.fun(FUN) in *apply() family by as.function(FUN) with obvious
> additional methods:
> as.function.character <- function(x) match.fun(x)
> as.function.name <- function(x) match.fun(x)
>
> Such replacement would leave current usage of *apply() as is but at the
> same time would leave enough space for users who want to adapt *apply()
> to their objects like formula or whatever class that is currently not
> convertible to functions by match.fun()
>
> Would it be possible?
>
> Best,
> Serguei.
>
> > It is not specific to sapply but rather fn$ can preface most
> > functions. If the only free variables are the arguments to the
> > function then you can omit the left hand side of the formula, i.e. the
> > arguments to the function are implied by the free variables in the
> > right hand side. Here x is the implied argument to the function
> > because it is a free variable. We did not have use the name x. Any
> > name could be used. It is the fact that it is a free variable, not its
> > name, that matters.
> >> fn$sapply(split(mtcars, mtcars$cyl), ~ sum(dim(x)))
> > 4 6 8 22 18 25 On Fri, Apr 17, 2020 at 4:11 AM Sokol Serguei
> > <sokol at insa-toulouse.fr> wrote:
> >> Thanks Simon, Now, I see better your argument. Le 16/04/2020 ? 22:48,
> >> Simon Urbanek a ?crit :
> >>> ... I'm not arguing against the principle, I'm arguing about your
> >>> particular proposal as it is inconsistent and not general.
> >> This sounds promising for me. May be in a (new?) future, R core will
> >> come with a correct proposal for this principle? Meanwhile, to avoid
> >> substitute(), I'll look on the side of formula syntax deviation as
> >> your example x ~> i + x suggested. Best, Serguei.
> >>> Personally, I find the current syntax much clearer and readable
> >>> (defining anything by convention like . being the function variable
> >>> seems arbitrary and "dirty" to me), but if you wanted to define a
> >>> shorter syntax, you could use something like x ~> i + x. That said,
> >>> I really don't see the value of not using function(x) [especially
> >>> these days when people are arguing for long variable names with the
> >>> justification that IDEs do all the work anyway], but as I said, my
> >>> argument was against the actual proposal, not general ideas about
> >>> syntax improvement. Cheers, Simon
> >>>> On 17/04/2020, at 3:53 AM, Sokol Serguei <sokol at insa-toulouse.fr>
> >>>> wrote: Simon, Thanks for replying. In what follows I won't try to
> >>>> argue (I understood that you find this a bad idea) but I would like
> >>>> to make clearer some of your point for me (and may be for others).
> >>>> Le 16/04/2020 ? 16:48, Simon Urbanek a ?crit :
> >>>>> Serguei,
> >>>>>> On 17/04/2020, at 2:24 AM, Sokol Serguei <sokol at insa-toulouse.fr>
> >>>>>> wrote: Hi, I would like to make a suggestion for a small
> >>>>>> syntactic modification of FUN argument in the family of functions
> >>>>>> [lsv]apply(). The idea is to allow one-liner expressions without
> >>>>>> typing "function(item) {...}" to surround them. The argument to
> >>>>>> the anonymous function is simply referred as ".". Let take an
> >>>>>> example. With this new feature, the following call
> >>>>>> sapply(split(mtcars, mtcars$cyl), function(d) summary(lm(mpg ~
> >>>>>> wt, d))$r.squared) # 4 6 8 #0.5086326 0.4645102 0.4229655 could
> >>>>>> be rewritten as sapply(split(mtcars, mtcars$cyl), summary(lm(mpg
> >>>>>> ~ wt, .))$r.squared) "Not a big saving in typing" you can say but
> >>>>>> multiplied by the number of [lsv]apply usage and a neater look, I
> >>>>>> think, the idea merits to be considered.
> >>>>> It's not in any way "neater", not only is it less readable, it's
> >>>>> just plain wrong. What if the expression returned a function?
> >>>> do you mean like in l=sapply(1:3, function(i) function(x) i+x)
> >>>> l[[1]](3) # 4 l[[2]](3) # 5 This is indeed a corner case but a pair
> >>>> of () or {} can keep wsapply() in course: l=wsapply(1:3,
> >>>> (function(x) .+x)) l[[1]](3) # 4 l[[2]](3) # 5
> >>>>> How do you know that you don't want to apply the result of the call?
> >>>> A small example (if it is significantly different from the one
> >>>> above) would be very helpful for me to understand this point.
> >>>>> For the same reason the implementation below won't work - very
> >>>>> often you just pass a symbol that evaluates to a function and
> >>>>> always en expression that returns a function and there is no way
> >>>>> to distinguish that from your new proposed syntax.
> >>>> Even with () or {} around such "dotted" expression? Best, Serguei.
> >>>>> When you feel compelled to use substitute() you should hear alarm
> >>>>> bells that something is wrong ;). You can certainly write a new
> >>>>> function that uses a different syntax (and I'm sure someone has
> >>>>> already done that in the package space), but what you propose is
> >>>>> incompatible with *apply in R (and very much not R syntax).
> >>>>> Cheers, Simon
> >>>>>> To illustrate a possible implementation, I propose a wrapper
> >>>>>> example for sapply(): wsapply=function(l, fun, ...) {
> >>>>>> s=substitute(fun) if (is.name(s) || is.call(s) &&
> >>>>>> s[[1]]==as.name("function")) { sapply(l, fun, ...) # legacy call
> >>>>>> } else { sapply(l, function(d) eval(s, list(.=d)), ...) } } Now,
> >>>>>> we can do: wsapply(split(mtcars, mtcars$cyl), summary(lm(mpg ~
> >>>>>> wt, .))$r.squared) or, traditional way: wsapply(split(mtcars,
> >>>>>> mtcars$cyl), function(d) summary(lm(mpg ~ wt, d))$r.squared) the
> >>>>>> both work. How do you feel about that? Best, Serguei.
> >>>>>> ______________________________________________
> >>>>>> R-devel at r-project.org mailing list
> >>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >> ______________________________________________ R-devel at r-project.org
> >> mailing list https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 20 18:23:31 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 20 Apr 2020 18:23:31 +0200
Subject: [Rd] stringsAsFactors and type.convert()
In-Reply-To: <d5709bc0fbf748d18359feb84eccae9d@ices.dk>
References: <d5709bc0fbf748d18359feb84eccae9d@ices.dk>
Message-ID: <24221.52355.706081.642229@stat.math.ethz.ch>

>>>>> Arni Magnusson 
>>>>>     on Mon, 13 Apr 2020 22:20:19 +0000 writes:

    > If read.table() is defaulting to "character" instead of "factor" data type, shouldn't type.convert() also default to "character" in R 4.0.0?
    > This would seem like a good time to change the default to type.convert(as.is=TRUE), to align it with the new default in read.table and data.frame. I think many R >=4.0.0 users would be happy with as.is=TRUE as the default in type.convert.

    > I'm happy to work on the patch and run tests if that is helpful.

    > Cheers,
    > Arni

Dear Arni,
thank you for the notice, which unfortunately wasn't noticed
(Easter break etc) and was too late in any case to fulfill the
criterion of a small trivial bug fix  for  R 4.0.0 beta (very close
to becoming RC (= "Release Candidate").

Even when type.convert() may not be used much directly (but
rather indirectly via read.table() where there's no problem), we
found it too risky to destabilize the R 4.0.0 prereleases.
As you all know there were ( / are?) still package changes
needed and a few other important "todo"s, so we had to decide to
postpone this (even for R-devel) to after releasing R 4.0.0
coming Friday.

I've committed a change to the help page which does mention that
the default for 'as.is' is planned to be changed.

Also, the help page's  "Details" section, for a long time has
ended with

     Since this is a helper function, the caller should always pass an
     appropriate value of 'as.is'.

If useRs and package authors have followed this advice, they
won't be bitten at all.

Best regards,
Martin


From Arn|@m@gnu@@on @end|ng |rom |ce@@dk  Mon Apr 20 18:50:16 2020
From: Arn|@m@gnu@@on @end|ng |rom |ce@@dk (Arni Magnusson)
Date: Mon, 20 Apr 2020 16:50:16 +0000
Subject: [Rd] stringsAsFactors and type.convert()
In-Reply-To: <24221.52355.706081.642229@stat.math.ethz.ch>
References: <d5709bc0fbf748d18359feb84eccae9d@ices.dk>,
 <24221.52355.706081.642229@stat.math.ethz.ch>
Message-ID: <345bea00aa9b4d56880e954f73285aa1@ices.dk>

Dear Martin,

Thank you for the well-reasoned response. I realized I was rather late to make this suggestion for 4.0.0, changing a somewhat low-level function that can indeed affect packages.

I was just reviewing some R user scripts that were using type.convert(), mainly on data frames. In all cases, people were passing as.is=TRUE, so I was reminded that I would not be the only user who would appreciate if as.is=TRUE becomes the default at some point.

So I am happy to hear that the help page now mentions that the as.is=TRUE is planned to be the default at some point in the future. Looking forward to the 4.0.0 official release - all positive changes!

All the best,
Arni

________________________________
From: Martin Maechler <maechler at stat.math.ethz.ch>
Sent: Monday, April 20, 2020 6:23:31 PM
To: Arni Magnusson
Cc: r-devel at r-project.org
Subject: Re: [Rd] stringsAsFactors and type.convert()

>>>>> Arni Magnusson
>>>>>     on Mon, 13 Apr 2020 22:20:19 +0000 writes:

    > If read.table() is defaulting to "character" instead of "factor" data type, shouldn't type.convert() also default to "character" in R 4.0.0?
    > This would seem like a good time to change the default to type.convert(as.is=TRUE), to align it with the new default in read.table and data.frame. I think many R >=4.0.0 users would be happy with as.is=TRUE as the default in type.convert.

    > I'm happy to work on the patch and run tests if that is helpful.

    > Cheers,
    > Arni

Dear Arni,
thank you for the notice, which unfortunately wasn't noticed
(Easter break etc) and was too late in any case to fulfill the
criterion of a small trivial bug fix  for  R 4.0.0 beta (very close
to becoming RC (= "Release Candidate").

Even when type.convert() may not be used much directly (but
rather indirectly via read.table() where there's no problem), we
found it too risky to destabilize the R 4.0.0 prereleases.
As you all know there were ( / are?) still package changes
needed and a few other important "todo"s, so we had to decide to
postpone this (even for R-devel) to after releasing R 4.0.0
coming Friday.

I've committed a change to the help page which does mention that
the default for 'as.is' is planned to be changed.

Also, the help page's  "Details" section, for a long time has
ended with

     Since this is a helper function, the caller should always pass an
     appropriate value of 'as.is'.

If useRs and package authors have followed this advice, they
won't be bitten at all.

Best regards,
Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 20 20:08:27 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 20 Apr 2020 20:08:27 +0200
Subject: [Rd] stringsAsFactors and type.convert()
In-Reply-To: <345bea00aa9b4d56880e954f73285aa1@ices.dk>
References: <d5709bc0fbf748d18359feb84eccae9d@ices.dk>
 <24221.52355.706081.642229@stat.math.ethz.ch>
 <345bea00aa9b4d56880e954f73285aa1@ices.dk>
Message-ID: <24221.58651.200520.192807@stat.math.ethz.ch>

>>>>> Arni Magnusson 
>>>>>     on Mon, 20 Apr 2020 16:50:16 +0000 writes:

    > Dear Martin,
    > Thank you for the well-reasoned response. I realized I was rather late to make this suggestion for 4.0.0, changing a somewhat low-level function that can indeed affect packages.

    > I was just reviewing some R user scripts that were using type.convert(), mainly on data frames. In all cases, people were passing as.is=TRUE, so I was reminded that I would not be the only user who would appreciate if as.is=TRUE becomes the default at some point.

    > So I am happy to hear that the help page now mentions that the as.is=TRUE is planned to be the default at some point in the future. Looking forward to the 4.0.0 official release - all positive changes!

Thank you, Arni.

Well, I did not reveal everything, rather

My current suggestion is to *change* the default,
but not to TRUE but rather  if not specified to give a *warning*
which says it will use 'TRUE', but still a warning ...
along the line of the help page statement I mentioned (cited at the end below) 
that callers really should always specify the 'as.is' argument
... which may be a good idea anyway, alerting the user when changing
default behavior.

    > All the best,
    > Arni

thank you, the same to you,
Martin



    > ________________________________
    > From: Martin Maechler <maechler at stat.math.ethz.ch>
    > Sent: Monday, April 20, 2020 6:23:31 PM
    > To: Arni Magnusson
    > Cc: r-devel at r-project.org
    > Subject: Re: [Rd] stringsAsFactors and type.convert()

>>>>> Arni Magnusson
>>>>>     on Mon, 13 Apr 2020 22:20:19 +0000 writes:

    >> If read.table() is defaulting to "character" instead of "factor" data type, shouldn't type.convert() also default to "character" in R 4.0.0?
    >> This would seem like a good time to change the default to type.convert(as.is=TRUE), to align it with the new default in read.table and data.frame. I think many R >=4.0.0 users would be happy with as.is=TRUE as the default in type.convert.

    >> I'm happy to work on the patch and run tests if that is helpful.

    >> Cheers,
    >> Arni

    > Dear Arni,
    > thank you for the notice, which unfortunately wasn't noticed
    > (Easter break etc) and was too late in any case to fulfill the
    > criterion of a small trivial bug fix  for  R 4.0.0 beta (very close
    > to becoming RC (= "Release Candidate").

    > Even when type.convert() may not be used much directly (but
    > rather indirectly via read.table() where there's no problem), we
    > found it too risky to destabilize the R 4.0.0 prereleases.
    > As you all know there were ( / are?) still package changes
    > needed and a few other important "todo"s, so we had to decide to
    > postpone this (even for R-devel) to after releasing R 4.0.0
    > coming Friday.

    > I've committed a change to the help page which does mention that
    > the default for 'as.is' is planned to be changed.

    > Also, the help page's  "Details" section, for a long time has
    > ended with

    > Since this is a helper function, the caller should always pass an
    > appropriate value of 'as.is'.

    > If useRs and package authors have followed this advice, they
    > won't be bitten at all.

    > Best regards,
    > Martin


From tke|tt @end|ng |rom gm@||@com  Tue Apr 21 22:59:47 2020
From: tke|tt @end|ng |rom gm@||@com (Tim Keitt)
Date: Tue, 21 Apr 2020 15:59:47 -0500
Subject: [Rd] R not running under lldb? (osx)
Message-ID: <CANnL8go3sZ522HABcqkBDLpRaWBQqL5CDx-x=kEynAPYj-Baow@mail.gmail.com>

I see:

Tims-Air:~ tkeitt$ R --version

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"

Copyright (C) 2020 The R Foundation for Statistical Computing

Platform: x86_64-apple-darwin15.6.0 (64-bit)


R is free software and comes with ABSOLUTELY NO WARRANTY.

You are welcome to redistribute it under the terms of the

GNU General Public License versions 2 or 3.

For more information about these matters see

https://www.gnu.org/licenses/.


Tims-Air:~ tkeitt$ R -d lldb

(lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"

Current executable set to
'/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64).

(lldb) run --vanilla

error: process exited with status -1 (Error 1)

Never happened before. Is this a known issue?

Thanks.

THK

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 22 01:51:44 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 22 Apr 2020 11:51:44 +1200
Subject: [Rd] R not running under lldb? (osx)
In-Reply-To: <CANnL8go3sZ522HABcqkBDLpRaWBQqL5CDx-x=kEynAPYj-Baow@mail.gmail.com>
References: <CANnL8go3sZ522HABcqkBDLpRaWBQqL5CDx-x=kEynAPYj-Baow@mail.gmail.com>
Message-ID: <C54DFDF5-D650-4348-84AC-52BD24DCBB14@R-project.org>

Tim,

as a security precaution Apple has disabled the ability to debug notarized applications*. It means any software distributed on macOS Catalina (and they may have retro-actively enabled it for recent updates of Mojave) cannot be run in a debugger.

If you want to debug R, you have to use non-release binaries that are not notarized and install them by hand, e.g.:

curl -L http://mac.r-project.org/high-sierra/R-4.0-branch/x86_64/R-4.0-branch.tar.gz | tar fxz - -C /

Of course, this disables the Apple protections and thus is not recommended for casual users. 

Cheers,
Simon

* - more technical details: Apple requires notarization of any application that will be distributed via an Apple installer. Apple no longer allows installation of macOS applications that are not notarized. In order to obtain notarization, the application has to be fully signed, has to use hardened run-time and may not enable debugging entitlements. One part of the hardened run-time is that no debugger is allowed to attach to the application.


> On 22/04/2020, at 8:59 AM, Tim Keitt <tkeitt at gmail.com> wrote:
> 
> I see:
> 
> Tims-Air:~ tkeitt$ R --version
> 
> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> 
> Copyright (C) 2020 The R Foundation for Statistical Computing
> 
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> 
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> 
> You are welcome to redistribute it under the terms of the
> 
> GNU General Public License versions 2 or 3.
> 
> For more information about these matters see
> 
> https://www.gnu.org/licenses/.
> 
> 
> Tims-Air:~ tkeitt$ R -d lldb
> 
> (lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> 
> Current executable set to
> '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64).
> 
> (lldb) run --vanilla
> 
> error: process exited with status -1 (Error 1)
> 
> Never happened before. Is this a known issue?
> 
> Thanks.
> 
> THK
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tke|tt @end|ng |rom gm@||@com  Wed Apr 22 05:55:40 2020
From: tke|tt @end|ng |rom gm@||@com (Tim Keitt)
Date: Tue, 21 Apr 2020 22:55:40 -0500
Subject: [Rd] R not running under lldb? (osx)
In-Reply-To: <C54DFDF5-D650-4348-84AC-52BD24DCBB14@R-project.org>
References: <CANnL8go3sZ522HABcqkBDLpRaWBQqL5CDx-x=kEynAPYj-Baow@mail.gmail.com>
 <C54DFDF5-D650-4348-84AC-52BD24DCBB14@R-project.org>
Message-ID: <CANnL8gos5QA+Wt=1YRZTLiag+jt-+8yyEaZdvpBUn72-DYcjCw@mail.gmail.com>

Thanks Simon. I'll probably just switch to rocker when needing to debug in
that case.

THK

On Tue, Apr 21, 2020 at 6:51 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Tim,
>
> as a security precaution Apple has disabled the ability to debug notarized
> applications*. It means any software distributed on macOS Catalina (and
> they may have retro-actively enabled it for recent updates of Mojave)
> cannot be run in a debugger.
>
> If you want to debug R, you have to use non-release binaries that are not
> notarized and install them by hand, e.g.:
>
> curl -L
> http://mac.r-project.org/high-sierra/R-4.0-branch/x86_64/R-4.0-branch.tar.gz
> | tar fxz - -C /
>
> Of course, this disables the Apple protections and thus is not recommended
> for casual users.
>
> Cheers,
> Simon
>
> * - more technical details: Apple requires notarization of any application
> that will be distributed via an Apple installer. Apple no longer allows
> installation of macOS applications that are not notarized. In order to
> obtain notarization, the application has to be fully signed, has to use
> hardened run-time and may not enable debugging entitlements. One part of
> the hardened run-time is that no debugger is allowed to attach to the
> application.
>
>
> > On 22/04/2020, at 8:59 AM, Tim Keitt <tkeitt at gmail.com> wrote:
> >
> > I see:
> >
> > Tims-Air:~ tkeitt$ R --version
> >
> > R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> >
> > Copyright (C) 2020 The R Foundation for Statistical Computing
> >
> > Platform: x86_64-apple-darwin15.6.0 (64-bit)
> >
> >
> > R is free software and comes with ABSOLUTELY NO WARRANTY.
> >
> > You are welcome to redistribute it under the terms of the
> >
> > GNU General Public License versions 2 or 3.
> >
> > For more information about these matters see
> >
> > https://www.gnu.org/licenses/.
> >
> >
> > Tims-Air:~ tkeitt$ R -d lldb
> >
> > (lldb) target create
> "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> >
> > Current executable set to
> > '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64).
> >
> > (lldb) run --vanilla
> >
> > error: process exited with status -1 (Error 1)
> >
> > Never happened before. Is this a known issue?
> >
> > Thanks.
> >
> > THK
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 22 06:24:09 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 22 Apr 2020 16:24:09 +1200
Subject: [Rd] R not running under lldb? (osx)
In-Reply-To: <CANnL8gos5QA+Wt=1YRZTLiag+jt-+8yyEaZdvpBUn72-DYcjCw@mail.gmail.com>
References: <CANnL8go3sZ522HABcqkBDLpRaWBQqL5CDx-x=kEynAPYj-Baow@mail.gmail.com>
 <C54DFDF5-D650-4348-84AC-52BD24DCBB14@R-project.org>
 <CANnL8gos5QA+Wt=1YRZTLiag+jt-+8yyEaZdvpBUn72-DYcjCw@mail.gmail.com>
Message-ID: <C06C8B37-77DA-44C0-A0A6-094DB9C69710@R-project.org>

Tim,

sure, make sense (it's also easier to use ASAN and friends that way). The only issue is that it won't work for mcOS-specific bugs.

Cheers,
Simon



> On 22/04/2020, at 3:55 PM, Tim Keitt <tkeitt at gmail.com> wrote:
> 
> Thanks Simon. I'll probably just switch to rocker when needing to debug in that case.
> 
> THK
> 
> On Tue, Apr 21, 2020 at 6:51 PM Simon Urbanek <simon.urbanek at r-project.org> wrote:
> Tim,
> 
> as a security precaution Apple has disabled the ability to debug notarized applications*. It means any software distributed on macOS Catalina (and they may have retro-actively enabled it for recent updates of Mojave) cannot be run in a debugger.
> 
> If you want to debug R, you have to use non-release binaries that are not notarized and install them by hand, e.g.:
> 
> curl -L http://mac.r-project.org/high-sierra/R-4.0-branch/x86_64/R-4.0-branch.tar.gz | tar fxz - -C /
> 
> Of course, this disables the Apple protections and thus is not recommended for casual users. 
> 
> Cheers,
> Simon
> 
> * - more technical details: Apple requires notarization of any application that will be distributed via an Apple installer. Apple no longer allows installation of macOS applications that are not notarized. In order to obtain notarization, the application has to be fully signed, has to use hardened run-time and may not enable debugging entitlements. One part of the hardened run-time is that no debugger is allowed to attach to the application.
> 
> 
> > On 22/04/2020, at 8:59 AM, Tim Keitt <tkeitt at gmail.com> wrote:
> > 
> > I see:
> > 
> > Tims-Air:~ tkeitt$ R --version
> > 
> > R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
> > 
> > Copyright (C) 2020 The R Foundation for Statistical Computing
> > 
> > Platform: x86_64-apple-darwin15.6.0 (64-bit)
> > 
> > 
> > R is free software and comes with ABSOLUTELY NO WARRANTY.
> > 
> > You are welcome to redistribute it under the terms of the
> > 
> > GNU General Public License versions 2 or 3.
> > 
> > For more information about these matters see
> > 
> > https://www.gnu.org/licenses/.
> > 
> > 
> > Tims-Air:~ tkeitt$ R -d lldb
> > 
> > (lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> > 
> > Current executable set to
> > '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64).
> > 
> > (lldb) run --vanilla
> > 
> > error: process exited with status -1 (Error 1)
> > 
> > Never happened before. Is this a known issue?
> > 
> > Thanks.
> > 
> > THK
> > 
> >       [[alternative HTML version deleted]]
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Apr 22 11:47:00 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 22 Apr 2020 10:47:00 +0100
Subject: [Rd] parse data wrong for R 4.0. raw strings
Message-ID: <CABtg=KnV-aBYMnZgV7sSfMQvY2QCNfPaP2gRJuvDFHs2+WuKzA@mail.gmail.com>

This seems like a bug to me:

code <- 'x <- r"(hello, "world")"'
getParseData(parse(text = code))
#>   line1 col1 line2 col2 id parent       token terminal             text
#> 7     1    1     1   24  7      0        expr    FALSE
#> 1     1    1     1    1  1      3      SYMBOL     TRUE                x
#> 3     1    1     1    1  3      7        expr    FALSE
#> 2     1    3     1    4  2      7 LEFT_ASSIGN     TRUE               <-
#> 4     1    6     1   24  4      6   STR_CONST     TRUE "hello, "world")
#> 6     1    6     1   24  6      7        expr    FALSE

Note that for STR_CONST, the opening delimiter is not included, but
the paren from the closing delimiter is.

Best,
Gabor


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr 22 16:31:17 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 22 Apr 2020 09:31:17 -0500 (CDT)
Subject: [Rd] [External]  parse data wrong for R 4.0. raw strings
In-Reply-To: <CABtg=KnV-aBYMnZgV7sSfMQvY2QCNfPaP2gRJuvDFHs2+WuKzA@mail.gmail.com>
References: <CABtg=KnV-aBYMnZgV7sSfMQvY2QCNfPaP2gRJuvDFHs2+WuKzA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2004220925350.3189@luke-Latitude-7480>

Looks like a bug. Will have a look when I get a chance.

Simpler version:

getParseData(parse(text = 'r"-|hello|-"'))


> getParseData(parse(text = 'r"(hello)"'))
   line1 col1 line2 col2 id parent     token terminal    text
1     1    1     1   10  1      3 STR_CONST     TRUE "hello)
3     1    1     1   10  3      0      expr    FALSE

The opening quote probably should not be there either.

More likely to get fixed sooner if someone can provide a patch.

Best,

luke

On Wed, 22 Apr 2020, G?bor Cs?rdi wrote:

> This seems like a bug to me:
>
> code <- 'x <- r"(hello, "world")"'
> getParseData(parse(text = code))
> #>   line1 col1 line2 col2 id parent       token terminal             text
> #> 7     1    1     1   24  7      0        expr    FALSE
> #> 1     1    1     1    1  1      3      SYMBOL     TRUE                x
> #> 3     1    1     1    1  3      7        expr    FALSE
> #> 2     1    3     1    4  2      7 LEFT_ASSIGN     TRUE               <-
> #> 4     1    6     1   24  4      6   STR_CONST     TRUE "hello, "world")
> #> 6     1    6     1   24  6      7        expr    FALSE
>
> Note that for STR_CONST, the opening delimiter is not included, but
> the paren from the closing delimiter is.
>
> Best,
> Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Apr 22 16:38:31 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 22 Apr 2020 15:38:31 +0100
Subject: [Rd] [External]  parse data wrong for R 4.0. raw strings
In-Reply-To: <alpine.DEB.2.21.2004220925350.3189@luke-Latitude-7480>
References: <CABtg=KnV-aBYMnZgV7sSfMQvY2QCNfPaP2gRJuvDFHs2+WuKzA@mail.gmail.com>
 <alpine.DEB.2.21.2004220925350.3189@luke-Latitude-7480>
Message-ID: <CABtg=K=Wv-fwa8wDGaeg2HfTr+t52MeJVdhByg0WY2fiAX6gjg@mail.gmail.com>

I don't know, maybe it would make sense to keep the whole expression,
that's the text of the tag after all.

Also, if we don't keep the whole expression, then it is not a valid
string literal any more, because it does not have quoting.

I can try to look into a patch. This is for 4.1 I believe, so in some
sense it is not urgent?

Gabor

On Wed, Apr 22, 2020 at 3:31 PM <luke-tierney at uiowa.edu> wrote:
>
> Looks like a bug. Will have a look when I get a chance.
>
> Simpler version:
>
> getParseData(parse(text = 'r"-|hello|-"'))
>
>
> > getParseData(parse(text = 'r"(hello)"'))
>    line1 col1 line2 col2 id parent     token terminal    text
> 1     1    1     1   10  1      3 STR_CONST     TRUE "hello)
> 3     1    1     1   10  3      0      expr    FALSE
>
> The opening quote probably should not be there either.
>
> More likely to get fixed sooner if someone can provide a patch.
>
> Best,
>
> luke
>
> On Wed, 22 Apr 2020, G?bor Cs?rdi wrote:
>
> > This seems like a bug to me:
> >
> > code <- 'x <- r"(hello, "world")"'
> > getParseData(parse(text = code))
> > #>   line1 col1 line2 col2 id parent       token terminal             text
> > #> 7     1    1     1   24  7      0        expr    FALSE
> > #> 1     1    1     1    1  1      3      SYMBOL     TRUE                x
> > #> 3     1    1     1    1  3      7        expr    FALSE
> > #> 2     1    3     1    4  2      7 LEFT_ASSIGN     TRUE               <-
> > #> 4     1    6     1   24  4      6   STR_CONST     TRUE "hello, "world")
> > #> 6     1    6     1   24  6      7        expr    FALSE
> >
> > Note that for STR_CONST, the opening delimiter is not included, but
> > the paren from the closing delimiter is.
> >
> > Best,
> > Gabor
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr 22 17:07:28 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 22 Apr 2020 10:07:28 -0500 (CDT)
Subject: [Rd] [External]  parse data wrong for R 4.0. raw strings
In-Reply-To: <CABtg=K=Wv-fwa8wDGaeg2HfTr+t52MeJVdhByg0WY2fiAX6gjg@mail.gmail.com>
References: <CABtg=KnV-aBYMnZgV7sSfMQvY2QCNfPaP2gRJuvDFHs2+WuKzA@mail.gmail.com>
 <alpine.DEB.2.21.2004220925350.3189@luke-Latitude-7480>
 <CABtg=K=Wv-fwa8wDGaeg2HfTr+t52MeJVdhByg0WY2fiAX6gjg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2004221004340.3189@luke-Latitude-7480>

Probably does make sense to keep the whole raw string expression.

Also probably best to file with bugzilla so this doesn't slip through
the cracks.

This would be a bug fix, so OK for 4.0.1, but not urgent so could wait
until 4.1.0.

Best,

luke

On Wed, 22 Apr 2020, G?bor Cs?rdi wrote:

> I don't know, maybe it would make sense to keep the whole expression,
> that's the text of the tag after all.
>
> Also, if we don't keep the whole expression, then it is not a valid
> string literal any more, because it does not have quoting.
>
> I can try to look into a patch. This is for 4.1 I believe, so in some
> sense it is not urgent?
>
> Gabor
>
> On Wed, Apr 22, 2020 at 3:31 PM <luke-tierney at uiowa.edu> wrote:
>>
>> Looks like a bug. Will have a look when I get a chance.
>>
>> Simpler version:
>>
>> getParseData(parse(text = 'r"-|hello|-"'))
>>
>>
>>> getParseData(parse(text = 'r"(hello)"'))
>>    line1 col1 line2 col2 id parent     token terminal    text
>> 1     1    1     1   10  1      3 STR_CONST     TRUE "hello)
>> 3     1    1     1   10  3      0      expr    FALSE
>>
>> The opening quote probably should not be there either.
>>
>> More likely to get fixed sooner if someone can provide a patch.
>>
>> Best,
>>
>> luke
>>
>> On Wed, 22 Apr 2020, G?bor Cs?rdi wrote:
>>
>>> This seems like a bug to me:
>>>
>>> code <- 'x <- r"(hello, "world")"'
>>> getParseData(parse(text = code))
>>> #>   line1 col1 line2 col2 id parent       token terminal             text
>>> #> 7     1    1     1   24  7      0        expr    FALSE
>>> #> 1     1    1     1    1  1      3      SYMBOL     TRUE                x
>>> #> 3     1    1     1    1  3      7        expr    FALSE
>>> #> 2     1    3     1    4  2      7 LEFT_ASSIGN     TRUE               <-
>>> #> 4     1    6     1   24  4      6   STR_CONST     TRUE "hello, "world")
>>> #> 6     1    6     1   24  6      7        expr    FALSE
>>>
>>> Note that for STR_CONST, the opening delimiter is not included, but
>>> the paren from the closing delimiter is.
>>>
>>> Best,
>>> Gabor
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From pd@me@ @end|ng |rom cb@@dk  Fri Apr 24 09:21:04 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Fri, 24 Apr 2020 07:21:04 +0000
Subject: [Rd] R 4.0.0 is released
Message-ID: <BDD8A4E0-8C99-4939-AD23-70C17FCCB8E1@cbs.dk>

The build system rolled up R-4.0.0.tar.gz (codename "Arbor Day") this morning.

The list below details the changes in this release.

You can get the source code from

http://cran.r-project.org/src/base/R-4/R-4.0.0.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 4afa171cd982aaa60f0ba92e2e7bc5d6
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 9aafc4b3277fdf482cf8195f707ae758
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = 48c487c68112cb3191f3015c6277a50b
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = bb45f89c01d509721c47fd41f147da60
MD5 (VERSION-INFO.dcf) = f6e4e96a451cc3131a18d9f63c4c67b8
MD5 (R-4/R-4.0.0.tar.gz) = 48c487c68112cb3191f3015c6277a50b

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
eddf87b12197c7b3b19cbc9b11c1beab95b14e3dcd715bf37d2f6a8b2a72c2a1  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
b9c6a73f2b03421d157185ee68c88a8e5a26b6f3e1edf977deb26a43c8ed98ed  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
06beb0291b569978484eb0dcb5d2339665ec745737bdfb4e873e7a5a75492940  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
2a8dca916cd92229ef9e328f3610ca204809c262823b860252b42072dac2473a  THANKS
47ad507cd5bbf2ad7a3de95b44b223052d4f53a3928aa3782957694d8c1cf05c  VERSION-INFO.dcf
06beb0291b569978484eb0dcb5d2339665ec745737bdfb4e873e7a5a75492940  R-4/R-4.0.0.tar.gz

This is the relevant part of the NEWS file

CHANGES IN 4.0.0:

  SIGNIFICANT USER-VISIBLE CHANGES:

    * Packages need to be (re-)installed under this version (4.0.0) of
      R.

    * matrix objects now also inherit from class "array", so e.g.,
      class(diag(1)) is c("matrix", "array").  This invalidates code
      incorrectly assuming that class(matrix_obj)) has length one.

      S3 methods for class "array" are now dispatched for matrix
      objects.

    * There is a new syntax for specifying _raw_ character constants
      similar to the one used in C++: r"(...)" with ... any character
      sequence not containing the sequence )".  This makes it easier to
      write strings that contain backslashes or both single and double
      quotes.  For more details see ?Quotes.

    * R now uses a stringsAsFactors = FALSE default, and hence by
      default no longer converts strings to factors in calls to
      data.frame() and read.table().

      A large number of packages relied on the previous behaviour and
      so have needed/will need updating.

    * The plot() S3 generic function is now in package base rather than
      package graphics, as it is reasonable to have methods that do not
      use the graphics package.  The generic is currently re-exported
      from the graphics namespace to allow packages importing it from
      there to continue working, but this may change in future.

      Packages which define S4 generics for plot() should be
      re-installed and package code using such generics from other
      packages needs to ensure that they are imported rather than rely
      on their being looked for on the search path (as in a namespace,
      the base namespace has precedence over the search path).

  REFERENCE COUNTING:

    * Reference counting is now used instead of the NAMED mechanism for
      determining when objects can be safely mutated in base C code.
      This reduces the need for copying in some cases and should allow
      further optimizations in the future.  It should help make the
      internal code easier to maintain.

      This change is expected to have almost no impact on packages
      using supported coding practices in their C/C++ code.

  MIGRATION TO PCRE2:

    * This version of R is built against the PCRE2 library for
      Perl-like regular expressions, if available.  (On non-Windows
      platforms PCRE1 can optionally be used if PCRE2 is not available
      at build time.)  The version of PCRE in use can be obtained _via_
      extSoftVersion(): PCRE1 (formerly known as 'PCRE') has versions
      <= 8, PCRE2 versions >= 10.

    * Making PCRE2 available when building R from source is strongly
      recommended (preferably version 10.30 or later) as PCRE1 is no
      longer developed: version 8.44 is 'likely to be the final
      release'.

    * PCRE2 reports errors for some regular expressions that were
      accepted by PCRE1.  A hyphen now has to be escaped in a character
      class to be interpreted as a literal (unless first or last in the
      class definition).  \R, \B and \X are no longer allowed in
      character classes (PCRE1 treated these as literals).

    * Option PCRE_study is no longer used with PCRE2, and is reported
      as FALSE when that is in use.

  NEW FEATURES:

    * assertError() and assertWarning() (in package tools) can now
      check for _specific_ error or warning classes _via_ the new
      optional second argument classes (which is not back compatible
      with previous use of an unnamed second argument).

    * DF2formula(), the utility for the data frame method of formula(),
      now works without parsing and explicit evaluation, starting from
      Suharto Anggono's suggestion in PR#17555.

    * approxfun() and approx() gain a new argument na.rm defaulting to
      true.  If set to false, missing y values now propagate into the
      interpolated values.

    * Long vectors are now supported as the seq argument of a for()
      loop.

    * str(x) gets a new deparse.lines option with a default to speed it
      up when x is a large call object.

    * The internal traceback object produced when an error is signalled
      (.Traceback), now contains the calls rather than the _deparse()d_
      calls, deferring the deparsing to the user-level functions
      .traceback() and traceback().  This fulfils the wish of PR#17580,
      reported including two patch proposals by Brodie Gaslam.

    * data.matrix() now converts character columns to factors and from
      this to integers.

    * package.skeleton() now explicitly lists all exports in the
      NAMESPACE file.

    * New function .S3method() to register S3 methods in R scripts.

    * file.path() has some support for file paths not in the session
      encoding, e.g. with UTF-8 inputs in a non-UTF-8 locale the output
      is marked as UTF-8.

    * Most functions with file-path inputs will give an explicit error
      if a file-path input in a marked encoding cannot be translated
      (to the native encoding or in some cases on Windows to UTF-8),
      rather than translate to a different file path using escapes.
      Some (such as dir.exists(), file.exists(), file.access(),
      file.info(), list.files(), normalizePath() and path.expand())
      treat this like any other non-existent file, often with a
      warning.

    * There is a new help document accessed by help("file path
      encoding") detailing how file paths with marked encodings are
      handled.

    * New function list2DF() for creating data frames from lists of
      variables.

    * iconv() has a new option sub = "Unicode" to translate UTF-8 input
      invalid in the to encoding using <U+xxxx> escapes.

    * There is a new function infoRDS() providing information about the
      serialization format of a serialized object.

    * S3 method lookup now by default skips the elements of the search
      path between the global and base environments.

    * Added an argument add_datalist(*, small.size = 0) to allow the
      creation of a data/datalist file even when the total size of the
      data sets is small.

    * The backquote function bquote() has a new argument splice to
      enable splicing a computed list of values into an expression,
      like ,@ in LISP's backquote.

    * The formula interface to t.test() and wilcox.test() has been
      extended to handle one-sample and paired tests.

    * The palette() function has a new default set of colours (which
      are less saturated and have better accessibility properties).
      There are also some new built-in palettes, which are listed by
      the new palette.pals() function.  These include the old default
      palette under the name "R3". Finally, the new palette.colors()
      function allows a subset of colours to be selected from any of
      the built-in palettes.

    * n2mfrow() gains an option asp = 1 to specify the aspect ratio,
      fulfilling the wish and extending the proposal of Michael Chirico
      in PR#17648.

    * For head(x, n) and tail() the default and other S3 methods
      notably for _vector_ n, e.g. to get a "corner" of a matrix, has
      been extended to array's of higher dimension thanks to the patch
      proposal by Gabe Becker in PR#17652.  Consequently, optional
      argument addrownums is deprecated and replaced by the (more
      general) argument keepnums.  An invalid second argument n now
      leads to typically more easily readable error messages.

    * New function .class2() provides the full character vector of
      class names used for S3 method dispatch.

    * Printing methods(..) now uses a new format() method.

    * sort.list(x) now works for non-atomic objects x and method =
      "auto" (the default) or "radix" in cases order(x) works.

    * Where they are available, writeBin() allows long vectors.

    * New function deparse1() produces one string, wrapping deparse(),
      to be used typically in deparse1(substitute(*)), e.g., to fix
      PR#17671.

    * wilcox.test() enhancements: In the (non-paired) two-sample case,
      Inf values are treated as very large for robustness consistency.
      If exact computations are used, the result now has "exact" in the
      method element of its return value.  New arguments tol.root and
      digits.rank where the latter may be used for stability to treat
      very close numbers as ties.

    * readBin() and writeBin() now report an error for an invalid
      endian value.  The affected code needs to be fixed with care as
      the old undocumented behavior was to swap endian-ness in such
      cases.

    * sequence() is now an S3 generic with an internally implemented
      default method, and gains arguments to generate more complex
      sequences.  Based on code from the S4Vectors Bioconductor package
      and the advice of Herv'e Pag`es.

    * print()'s default method and many other methods (by calling the
      default eventually and passing ...) now make use of a new
      optional width argument, avoiding the need for the user to set
      and reset options("width").

    * memDecompress() supports the RFC 1952 format (e.g. in-memory
      copies of gzip-compressed files) as well as RFC 1950.

    * memCompress() and memDecompress() support long raw vectors for
      types "gzip" and "zx".

    * sweep() and slice.index() can now use names of dimnames for their
      MARGIN argument (apply has had this for almost a decade).

    * New function proportions() and marginSums(). These should replace
      the unfortunately named prop.table() and margin.table(). They are
      drop-in replacements, but also add named-margin functionality.
      The old function names are retained as aliases for
      back-compatibility.

    * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
      rsignrank() and rwilcox() which have returned integer since R
      3.0.0 and hence NA when the numbers would have been outside the
      integer range, now return double vectors (without NAs, typically)
      in these cases.

    * matplot(x,y) (and hence matlines() and matpoints()) now call the
      corresponding methods of plot() and lines(), e.g, when x is a
      "Date" or "POSIXct" object; prompted by Spencer Graves'
      suggestion.

    * stopifnot() now allows customizing error messages via argument
      names, thanks to a patch proposal by Neal Fultz in PR#17688.

    * unlink() gains a new argument expand to disable wildcard and
      tilde expansion.  Elements of x of value "~" are now ignored.

    * mle() in the stats4 package has had its interface extended so
      that arguments to the negative log-likelihood function can be one
      or more vectors, with similar conventions applying to bounds,
      start values, and parameter values to be kept fixed.  This
      required a minor extension to class "mle", so saved objects from
      earlier versions may need to be recomputed.

    * The default for pdf() is now useDingbats = FALSE.

    * The default fill colour for hist() and boxplot() is now col =
      "lightgray".

    * The default order of the levels on the y-axis for spineplot() and
      cdplot() has been reversed.

    * If the R_ALWAYS_INSTALL_TESTS environment variable is set to a
      true value, R CMD INSTALL behaves as if the --install-tests
      option is always specified. Thanks to Reinhold Koch for the
      suggestion.

    * New function R_user_dir() in package tools suggests paths
      appropriate for storing R-related user-specific data,
      configuration and cache files.

    * capabilities() gains a new logical option Xchk to avoid warnings
      about X11-related capabilities.

    * The internal implementation of grid units has changed, but the
      only visible effects at user-level should be

        * a slightly different print format for some units (especially
          unit arithmetic),

        * faster performance (for unit operations) and

        * two new functions unitType() and unit.psum().

      Based on code contributed by Thomas Lin Pedersen.

    * When internal dispatch for rep.int() and rep_len() fails, there
      is an attempt to dispatch on the equivalent call to rep().

    * Object .Machine now contains new longdouble.* entries (when R
      uses long doubles internally).

    * news() has been enhanced to cover the news on R 3.x and 2.x.

    * For consistency, N <- NULL; N[[1]] <- val now turns N into a list
      also when val) has length one.  This enables dimnames(r1)[[1]] <-
      "R1" for a 1-row matrix r1, fixing PR#17719 reported by Serguei
      Sokol.

    * deparse(..), dump(..), and dput(x, control = "all") now include
      control option "digits17" which typically ensures 1:1
      invertibility.  New option control = "exact" ensures numeric
      exact invertibility via "hexDigits".

    * When loading data sets via read.table(), data() now uses
      LC_COLLATE=C to ensure locale-independent results for possible
      string-to-factor conversions.

    * A server socket connection, a new connection type representing a
      listening server socket, is created via serverSocket() and can
      accept multiple socket connections via socketAccept().

    * New function socketTimeout() changes the connection timeout of a
      socket connection.

    * The time needed to start a homogeneous PSOCK cluster on localhost
      with many nodes has been significantly reduced (package
      parallel).

    * New globalCallingHandlers() function to establish global
      condition handlers.  This allows registering default handlers for
      specific condition classes. Developed in collaboration with
      Lionel Henry.

    * New function tryInvokeRestart() to invoke a specified restart if
      one is available and return without signaling an error if no such
      restart is found.  Contributed by Lionel Henry in PR#17598.

    * str(x) now shows the length of attributes in some cases for a
      data frame x.

    * Rprof() gains a new argument filter.callframes to request that
      intervening call frames due to lazy evaluation or explicit eval()
      calls be omitted from the recorded profile data.  Contributed by
      Lionel Henry in PR#17595.

    * The handling of ${FOO-bar} and ${FOO:-bar} in Renviron files now
      follows POSIX shells (at least on a Unix-alike), so the first
      treats empty environment variables as set and the second does
      not.  Previously both ignored empty variables.  There are several
      uses of the first form in etc/Renviron.

    * New classes argument for suppressWarnings() and
      suppressMessages() to selectively suppress only warnings or
      messages that inherit from particular classes.  Based on patch
      from Lionel Henry submitted with PR#17619.

    * New function activeBindingFunction() retrieves the function of an
      active binding.

    * New "cairoFT" and "pango" components in the output of
      grSoftVersion().

    * New argument symbolfamily in cairo-based graphics devices and new
      function cairoSymbolFont() that can be used to provide the value
      for that argument.

  Windows:

    * Rterm now works also when invoked from MSYS2 terminals.  Line
      editing is possible when command winpty is installed.

    * normalizePath() now resolves symbolic links and normalizes case
      of long names of path elements in case-insensitive folders
      (PR#17165).

    * md5sum() supports UTF-8 file names with characters that cannot be
      translated to the native encoding (PR#17633).

    * Rterm gains a new option --workspace to specify the workspace to
      be restored.  This allows equals to be part of the name when
      opening _via_ Windows file associations (reported by Christian
      Asseburg).

    * Rterm now accepts ALT+xxx sequences also with NumLock on.  Tilde
      can be pasted with an Italian keyboard (PR#17679).

    * R falls back to copying when junction creation fails during
      package checking (patch from Duncan Murdoch).

  DEPRECATED AND DEFUNCT:

    * Make macro F77_VISIBILITY has been removed and replaced by
      F_VISIBILITY.

    * Make macros F77, FCPIFCPLAGS and SHLIB_OPENMP_FCFLAGS have been
      removed and replaced by FC, FPICFLAGS and SHLIB_OPENMP_FFLAGS
      respectively.  (Most make programs will set F77 to the value of
      FC, which is set for package compilation.  But portable code
      should not rely on this.)

    * The deprecated support for specifying C++98 for package
      installation has been removed.

    * R CMD config no longer knows about the unused settings F77 and
      FCPIFCPLAGS, nor CXX98 and similar.

    * Either PCRE2 or PCRE1 >= 8.32 (Nov 2012) is required: the
      deprecated provision for 8.20-8.31 has been removed.

    * Defunct functions mem.limits(), .readRDS(),
      .saveRDS(),..find.package(), and .path.package() from package
      base and allGenerics(), getAccess(), getAllMethods(),
      getClassName(), getClassPackage(), getExtends(), getProperties(),
      getPrototype(), getSubclasses(), getVirtual(), mlistMetaName(),
      removeMethodsObject(), seemsS4Object(), traceOff(), and traceOn()
      from methods have been removed.

  C-LEVEL FACILITIES:

    * installChar is now remapped in Rinternals.h to installTrChar, of
      which it has been a wrapper since R 3.6.0.  Neither are part of
      the API, but packages using installChar can replace it if they
      depend on R >= 3.6.2.

    * Header R_ext/Print.h defines R_USE_C99_IN_CXX and hence exposes
      Rvprintf and REvprintf if used with a C++11 (or later) compiler.

    * There are new Fortran subroutines dblepr1, realpr1 and intpr1 to
      print a scalar variable (gfortran 10 enforces the distinction
      between scalars and length-one arrays).  Also labelpr to print
      just a label.

    * R_withCallingErrorHandler is now available for establishing a
      calling handler in C code for conditions inheriting from class
      error.

  INSTALLATION on a UNIX-ALIKE:

    * User-set DEFS (e.g., in config.site) is now used for compiling
      packages (including base packages).

    * There is a new variant option --enable-lto=check for checking
      consistency of BLAS/LAPACK/LINPACK calls - see 'Writing R
      Extensions'.

    * A C++ compiler default is set only if the C++11 standard is
      supported: it no longer falls back to C++98.

    * PCRE2 is used if available.  To make use of PCRE1 if PCRE2 is
      unavailable, configure with option --with-pcre1.

    * The minimum required version of libcurl is now 7.28.0 (Oct 2012).

    * New make target distcheck checks

        * R can be rebuilt from the tarball created by make dist,

        * the build from the tarball passes make check-all,

        * the build installs and uninstalls,

        * the source files are properly cleaned by make distclean.

  UTILITIES:

    * R --help now mentions the option --no-echo (renamed from --slave)
      and its previously undocumented short form -s.

    * R CMD check now optionally checks configure and cleanup scripts
      for non-Bourne-shell code ('bashisms').

    * R CMD check --as-cran now runs \donttest examples (which are run
      by example()) instead of instructing the tester to do so.  This
      can be temporarily circumvented during development by setting
      environment variable _R_CHECK_DONTTEST_EXAMPLES_ to a false
      value.

  PACKAGE INSTALLATION:

    * There is the beginnings of support for the recently approved
      C++20 standard, specified analogously to C++14 and C++17.  There
      is currently only limited support for this in compilers, with
      flags such as -std=c++20 and -std=c++2a.  For the time being the
      configure test is of accepting one of these flags and compiling
      C++17 code.

  BUG FIXES:

    * formula(x) with length(x) > 1 character vectors, is deprecated
      now.  Such use has been rare, and has 'worked' as expected in
      some cases only.  In other cases, wrong x have silently been
      truncated, not detecting previous errors.

    * Long-standing issue where the X11 device could lose events
      shortly after startup has been addressed (PR#16702).

    * The data.frame method for rbind() no longer drops <NA> levels
      from factor columns by default (PR#17562).

    * available.packages() and hence install.packages() now pass their
      ... argument to download.file(), fulfilling the wish of PR#17532;
      subsequently, available.packages() gets new argument quiet,
      solving PR#17573.

    * stopifnot() gets new argument exprObject to allow an R object of
      class expression (or other 'language') to work more consistently,
      thanks to suggestions by Suharto Anggono.

    * conformMethod() now works correctly in cases containing a "&&
      logic" bug, reported by Henrik Bengtsson.  It now creates methods
      with "missing" entries in the signature.  Consequently,
      rematchDefinition() is amended to use appropriate .local() calls
      with named arguments where needed.

    * format.default(*, scientific = FALSE) now corresponds to a
      practically most extreme options(scipen = n) setting rather than
      arbitrary n = 100.

    * format(as.symbol("foo")) now works (returning "foo").

    * postscript(.., title = *) now signals an error when the title
      string contains a character which would produce corrupt
      PostScript, thanks to PR#17607 by Daisuko Ogawa.

    * Certain Ops (notably comparison such as ==) now also work for
      0-length data frames, after reports by Hilmar Berger.

    * methods(class = class(glm(..))) now warns more usefully and only
      once.

    * write.dcf() no longer mangles field names (PR#17589).

    * Primitive replacement functions no longer mutate a referenced
      first argument when used outside of a complex assignment context.

    * A better error message for contour(*, levels = Inf).

    * The return value of contourLines() is no longer invisible().

    * The Fortran code for calculating the coefficients component in
      lm.influence() was very inefficient. It has (for now) been
      replaced with much faster R code (PR#17624).

    * cm.colors(n) _etc_ no longer append the code for alpha = 1, "FF",
      to all colors.  Hence all eight *.colors() functions and
      rainbow() behave consistently and have the same non-explicit
      default (PR#17659).

    * dnorm had a problematic corner case with sd == -Inf or negative
      sd which was not flagged as an error in all cases. Thanks to
      Stephen D. Weigand for reporting and Wang Jiefei for analyzing
      this; similar change has been made in dlnorm().

    * The optional iter.smooth argument of plot.lm(), (the plot()
      method for lm and glm fits) now defaults to 0 for all glm fits.
      Especially for binary observations with high or low fitted
      probabilities, this effectively deleted all observations of 1 or
      0.  Also, the type of residuals used in the glm case has been
      switched to "pearson" since deviance residuals do not in general
      have approximately zero mean.

    * In plot.lm, Cook's distance was computed from unweighted
      residuals, leading to inconsistencies.  Replaced with usual
      weighted version. (PR#16056)

    * Time-series ts(*, start, end, frequency) with fractional
      frequency are supported more consistently; thanks to a report
      from Johann Kleinbub and analysis and patch by Duncan Murdoch in
      PR#17669.

    * In case of errors mcmapply() now preserves attributes of returned
      "try-error" objects and avoids simplification, overriding
      SIMPLIFY to FALSE. (PR#17653)

    * as.difftime() gets new optional tz = "UTC" argument which should
      fix behaviour during daylight-savings-changeover days, fixing
      PR#16764, thanks to proposals and analysis by Johannes Ranke and
      Kirill M"uller.

    * round() does a better job of rounding _"to nearest"_ by
      _measuring_ and _"to even"_; thanks to a careful algorithm
      originally prompted by the report from Adam Wheeler and then
      others, in PR#17668.
      round(x, dig) for _negative_ digits is much more rational now,
      notably for large |dig|.

    * Inheritance information on S4 classes is maintained more
      consistently, particularly in the case of class unions (in part
      due to PR#17596 and a report from Ezra Tucker).

    * is() behaves more robustly when its argument class2 is a
      classRepresentation object.

    * The warning message when attempting to export an nonexistent
      class is now more readable; thanks to Thierry Onkelinx for
      recognizing the problem.

    * choose() misbehaved in corner cases where it switched n - k for k
      and n was only _nearly_ integer (report from Erik Scott Wright).

    * mle() in the stats4 package had problems combining use of box
      constraints and fixed starting values (in particular, confidence
      intervals were affected).

    * Operator ? now has lower precedence than = to work as documented,
      so = behaves like <- in help expressions (PR#16710).

    * smoothEnds(x) now returns integer type in _both_ cases when x is
      integer, thanks to a report and proposal by Bill Dunlap PR#17693.

    * The methods package does a better job of tracking inheritance
      relationships across packages.

    * norm(diag(c(1, NA)), "2") now works.

    * subset() had problems with 0-col dataframes (reported by Bill
      Dunlap, PR#17721).

    * Several cases of integer overflow detected by the 'undefined
      behaviour sanitizer' of clang 10 have been circumvented.  One in
      rhyper() may change the generated value for large input values.

    * dotchart() now places the y-axis label (ylab) much better, not
      overplotting labels, thanks to a report and suggestion by Alexey
      Shipunov.

    * A rare C-level array overflow in chull() has been worked around.

    * Some invalid specifications of the day-of-the-year (_via_ %j,
      e.g. day 366 in 2017) or week plus day-of-the-week are now
      detected by strptime().  They now return NA but give a warning as
      they may have given random results or corrupted memory in earlier
      versions of R.

    * socketConnection(server = FALSE) now respects the connection
      timeout also on Linux.

    * socketConnection(server = FALSE) no longer leaks a connection
      that is available right away without waiting (e.g. on localhost).

    * Socket connections are now robust against spurious readability
      and spurious availability of an incoming connection.

    * blocking = FALSE is now respected also on the server side of a
      socket connection, allowing non-blocking read operations.

    * anova.glm() and anova.glmlist() computed incorrect score (Rao)
      tests in no-intercept cases. (Andr'e Gillibert, PR#17734)

    * summaryRprof() now should work correctly for the Rprof(*,
      memory.profiling=TRUE) case with small chunk size (and "tseries"
      or similar) thanks to a patch proposal by Benjamin Tyner, in
      PR#15886.

    * xgettext() ignores strings passed to ngettext(), since the latter
      is handled by xngettext(). Thanks to Daniele Medri for the report
      and all the recent work he has done on the Italian translations.

    * data(package = "P") for P in base and stats no longer reports the
      data sets from package datasets (which it did for back
      compatibility for 16 years), fixing PR#17730.

    * x[[Inf]] (returning NULL) no longer leads to undefined behavior,
      thanks to a report by Kirill M"uller in PR#17756.  Further,
      x[[-Inf]] and x[[-n]] now give more helpful error messages.

    * Gamma() family sometimes had trouble storing link name PR#15891

  BUG FIXES (Windows):

    * Sys.glob() now supports all characters from the Unicode Basic
      Multilingual Plane, no longer corrupting some (less commonly
      used) characters (PR#17638).

    * Rterm now correctly displays multi-byte-coded characters
      representable in the current native encoding (at least on Windows
      10 they were sometimes omitted, PR#17632).

    * scan() issues with UTF-8 data when running in a DBCS locale have
      been resolved (PR#16520, PR#16584).

    * RTerm now accepts enhanced/arrow keys also with ConPTY.

    * R can can now be started _via_ the launcher icon in a user
      documents directory whose path is not representable in the system
      encoding.

    * socketConnection(server = FALSE) now returns instantly also on
      Windows when connection failure is signalled.

    * Problems with UTF-16 surrogate pairs have been fixed in several
      functions, including tolower() and toupper() (PR#17645).

CHANGES in previous versions:

  * Older news can be found in text format in files NEWS.0, NEWS.1,
    NEWS.2 and NEWS.3 in the doc directory.  News in HTML format for R
    versions 3.x and from 2.10.0 to 2.15.3 is available at
    doc/html/NEWS.3.html and doc/html/NEWS.2.html.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jeroen @end|ng |rom berke|ey@edu  Mon Apr 27 14:15:39 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Mon, 27 Apr 2020 14:15:39 +0200
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAJXgQP1XF5tuKrqqxbu7BHp47m93DQkbCyOa4NLTvpRKHSKfnQ@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
 <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
 <24204.37489.757879.648305@rob.eddelbuettel.com>
 <CAJXgQP1XF5tuKrqqxbu7BHp47m93DQkbCyOa4NLTvpRKHSKfnQ@mail.gmail.com>
Message-ID: <CABFfbXuD-sLHXf=SCjzFroS5SWKxfE+i+s5O-VAXgLovOaByPg@mail.gmail.com>

Hevr? told me that people from Bioconductor and possibly others are
keeping an eye on this thread so it would be good to post a note here
too.

As of version 4.0.0, the official R for Windows and binary packages
provided via CRAN are built with gcc-8.3.0 from rtools40, as shown in
the CRAN check table:
https://cran.r-project.org/web/checks/check_flavors.html

Instructions and installers for rtools40 are available at the usual
location: https://cran.r-project.org/bin/windows/Rtools/ . Suggestions
for improving the documentation can be posted here:
https://github.com/r-windows/docs








On Tue, Apr 7, 2020 at 6:07 PM Kevin Ushey <kevinushey at gmail.com> wrote:
>
> That's great to see, although I suspect it's still a speculative
> change and could be backed out if any non-trivial issues were
> encountered.
>
> Regardless, I would like to thank R core, CRAN, and Jeroen for all of
> the time that has gone into creating and validating this new
> toolchain. This is arduous work at an especially arduous time, so I'd
> like to voice my appreciation for all the time and energy they have
> spent on making this possible.
>
> Best,
> Kevin
>
> On Tue, Apr 7, 2020 at 7:47 AM Dirk Eddelbuettel <edd at debian.org> wrote:
> >
> >
> > There appears to have been some progress on this matter:
> >
> > -Note that @command{g++} 4.9.x (as used for @R{} on Windows up to 3.6.x)
> > +Note that @command{g++} 4.9.x (as used on Windows prior to @R{} 4.0.0)
> >
> > See SVN commit r78169 titled 'anticipate change in Windows toolchain', or the
> > mirrored git commit at
> > https://github.com/wch/r-source/commit/bd674e2b76b2384169424e3d899fbfb5ac174978
> >
> > Dirk
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @u@@ @end|ng |rom weh|@edu@@u  Tue Apr 28 10:11:03 2020
From: @u@@ @end|ng |rom weh|@edu@@u (Shian Su)
Date: Tue, 28 Apr 2020 08:11:03 +0000
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
Message-ID: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>

Dear R-devel,

I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.

library(mgcv)
library(parallel)

> df <- data.frame(
+     x = 1:100,
+     y = 1:100
+ )
>
> mclapply(1:2, function(i, df) {
+         fit <- gam(y ~ s(x, bs = "cs"), data = df)
+     },
+     df = df,
+     mc.cores = 2L
+ )
[[1]]

Family: gaussian
Link function: identity

Formula:
y ~ s(x, bs = "cs")

Estimated degrees of freedom:
9  total = 10

GCV score: 0

[[2]]

Family: gaussian
Link function: identity

Formula:
y ~ s(x, bs = "cs")

Estimated degrees of freedom:
9  total = 10

GCV score: 0

>
>
> df <- data.frame(
+     x = 1:1000,
+     y = 1:1000
+ )
>
> mclapply(1:2, function(i, df) {
+         fit <- gam(y ~ s(x, bs = "cs"), data = df)
+     },
+     df = df,
+     mc.cores = 2L
+ )
[[1]]
NULL

[[2]]
NULL

There is no error message returned, and the code runs perfectly fine in lapply.

I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.

Kind regards,
Shian Su
----
Shian Su
PhD Student, Ritchie Lab 6W, Epigenetics and Development
Walter & Eliza Hall Institute of Medical Research
1G Royal Parade, Parkville VIC 3052, Australia


_______________________________________________

The information in this email is confidential and intend...{{dropped:15}}


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 28 11:29:00 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 28 Apr 2020 21:29:00 +1200
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
Message-ID: <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>

Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?

Cheers,
Simon


> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au> wrote:
> 
> Dear R-devel,
> 
> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
> 
> library(mgcv)
> library(parallel)
> 
>> df <- data.frame(
> +     x = 1:100,
> +     y = 1:100
> + )
>> 
>> mclapply(1:2, function(i, df) {
> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> +     },
> +     df = df,
> +     mc.cores = 2L
> + )
> [[1]]
> 
> Family: gaussian
> Link function: identity
> 
> Formula:
> y ~ s(x, bs = "cs")
> 
> Estimated degrees of freedom:
> 9  total = 10
> 
> GCV score: 0
> 
> [[2]]
> 
> Family: gaussian
> Link function: identity
> 
> Formula:
> y ~ s(x, bs = "cs")
> 
> Estimated degrees of freedom:
> 9  total = 10
> 
> GCV score: 0
> 
>> 
>> 
>> df <- data.frame(
> +     x = 1:1000,
> +     y = 1:1000
> + )
>> 
>> mclapply(1:2, function(i, df) {
> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> +     },
> +     df = df,
> +     mc.cores = 2L
> + )
> [[1]]
> NULL
> 
> [[2]]
> NULL
> 
> There is no error message returned, and the code runs perfectly fine in lapply.
> 
> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
> 
> Kind regards,
> Shian Su
> ----
> Shian Su
> PhD Student, Ritchie Lab 6W, Epigenetics and Development
> Walter & Eliza Hall Institute of Medical Research
> 1G Royal Parade, Parkville VIC 3052, Australia
> 
> 
> _______________________________________________
> 
> The information in this email is confidential and =\ i...{{dropped:8}}


From @u@@ @end|ng |rom weh|@edu@@u  Tue Apr 28 11:36:32 2020
From: @u@@ @end|ng |rom weh|@edu@@u (Shian Su)
Date: Tue, 28 Apr 2020 09:36:32 +0000
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
Message-ID: <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>

Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.

Any idea as to what interaction between Rstudio and mclapply causes this?

Thanks,
Shian

On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:

Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?

Cheers,
Simon


On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:

Dear R-devel,

I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.

library(mgcv)
library(parallel)

df <- data.frame(
+     x = 1:100,
+     y = 1:100
+ )

mclapply(1:2, function(i, df) {
+         fit <- gam(y ~ s(x, bs = "cs"), data = df)
+     },
+     df = df,
+     mc.cores = 2L
+ )
[[1]]

Family: gaussian
Link function: identity

Formula:
y ~ s(x, bs = "cs")

Estimated degrees of freedom:
9  total = 10

GCV score: 0

[[2]]

Family: gaussian
Link function: identity

Formula:
y ~ s(x, bs = "cs")

Estimated degrees of freedom:
9  total = 10

GCV score: 0



df <- data.frame(
+     x = 1:1000,
+     y = 1:1000
+ )

mclapply(1:2, function(i, df) {
+         fit <- gam(y ~ s(x, bs = "cs"), data = df)
+     },
+     df = df,
+     mc.cores = 2L
+ )
[[1]]
NULL

[[2]]
NULL

There is no error message returned, and the code runs perfectly fine in lapply.

I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.

Kind regards,
Shian Su
----
Shian Su
PhD Student, Ritchie Lab 6W, Epigenetics and Development
Walter & Eliza Hall Institute of Medical Research
1G Royal Parade, Parkville VIC 3052, Australia


_______________________________________________

The information in this email is confidential and intend...{{dropped:26}}


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Apr 28 18:08:24 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 28 Apr 2020 09:08:24 -0700
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
 <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
Message-ID: <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>

Hi, a few comments below.

First, from my experience and troubleshooting similar reports from
others, a returned NULL from parallel::mclapply() is often because the
corresponding child process crashed/died. However, when this happens
you should see a warning, e.g.

> y <- parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x)
Warning message:
In parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x) :
  scheduled core 2 did not deliver a result, all values of the job
will be affected
> str(y)
List of 2
 $ : int 1
 $ : NULL

This warning is produces on R 4.0.0 and R 3.6.2 in Linux, but I would
assume that warning is also produced on macOS.  It's not clear from
you message whether you also got that warning or not.

Second, forked processing, as used by parallel::mclapply(), is advised
against when using the RStudio Console [0].  Unfortunately, there's no
way to disable forked processing in R [1].  You could add the
following to your ~/.Rprofile startup file:

## Warn when forked processing is used in the RStudio Console
if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
  invisible(trace(parallel:::mcfork, tracer =
quote(warning("parallel::mcfork() was used. Note that forked
processes, e.g. parallel::mclapply(), may be unstable when used from
the RStudio Console
[https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011]",
call.=FALSE))))
}

to detect when forked processed is used in the RStudio Console -
either by you or by some package code that you use directly or
indirectly.  You could even use stop() here if you wanna be
conservative.

[0] https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011
[1] https://stat.ethz.ch/pipermail/r-devel/2020-January/078896.html

/Henrik

On Tue, Apr 28, 2020 at 2:39 AM Shian Su <su.s at wehi.edu.au> wrote:
>
> Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.
>
> Any idea as to what interaction between Rstudio and mclapply causes this?
>
> Thanks,
> Shian
>
> On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:
>
> Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?
>
> Cheers,
> Simon
>
>
> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:
>
> Dear R-devel,
>
> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
>
> library(mgcv)
> library(parallel)
>
> df <- data.frame(
> +     x = 1:100,
> +     y = 1:100
> + )
>
> mclapply(1:2, function(i, df) {
> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> +     },
> +     df = df,
> +     mc.cores = 2L
> + )
> [[1]]
>
> Family: gaussian
> Link function: identity
>
> Formula:
> y ~ s(x, bs = "cs")
>
> Estimated degrees of freedom:
> 9  total = 10
>
> GCV score: 0
>
> [[2]]
>
> Family: gaussian
> Link function: identity
>
> Formula:
> y ~ s(x, bs = "cs")
>
> Estimated degrees of freedom:
> 9  total = 10
>
> GCV score: 0
>
>
>
> df <- data.frame(
> +     x = 1:1000,
> +     y = 1:1000
> + )
>
> mclapply(1:2, function(i, df) {
> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> +     },
> +     df = df,
> +     mc.cores = 2L
> + )
> [[1]]
> NULL
>
> [[2]]
> NULL
>
> There is no error message returned, and the code runs perfectly fine in lapply.
>
> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
>
> Kind regards,
> Shian Su
> ----
> Shian Su
> PhD Student, Ritchie Lab 6W, Epigenetics and Development
> Walter & Eliza Hall Institute of Medical Research
> 1G Royal Parade, Parkville VIC 3052, Australia
>
>
> _______________________________________________
>
> The information in this email is confidential and inte...{{dropped:6}}


From hp@ge@ @end|ng |rom |redhutch@org  Tue Apr 28 20:03:40 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 28 Apr 2020 11:03:40 -0700
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CABFfbXuD-sLHXf=SCjzFroS5SWKxfE+i+s5O-VAXgLovOaByPg@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
 <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
 <24204.37489.757879.648305@rob.eddelbuettel.com>
 <CAJXgQP1XF5tuKrqqxbu7BHp47m93DQkbCyOa4NLTvpRKHSKfnQ@mail.gmail.com>
 <CABFfbXuD-sLHXf=SCjzFroS5SWKxfE+i+s5O-VAXgLovOaByPg@mail.gmail.com>
Message-ID: <16b2bd6e-a760-6e34-8a6d-be5c61375121@fredhutch.org>

Thanks Jeroen!

> On Tue, Apr 7, 2020 at 6:07 PM Kevin Ushey <kevinushey at gmail.com> wrote:
>>
>> Regardless, I would like to thank R core, CRAN, and Jeroen for all of
>> the time that has gone into creating and validating this new
>> toolchain. This is arduous work at an especially arduous time, so I'd
>> like to voice my appreciation for all the time and energy they have
>> spent on making this possible.

Absolutely. Thanks to R core, CRAN, Jeroen, and all the other people 
involved in creating the new Windows toolchain.

Cheers,
H.

>>
>> Best,
>> Kevin
>>
>> On Tue, Apr 7, 2020 at 7:47 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>>>
>>>
>>> There appears to have been some progress on this matter:
>>>
>>> -Note that @command{g++} 4.9.x (as used for @R{} on Windows up to 3.6.x)
>>> +Note that @command{g++} 4.9.x (as used on Windows prior to @R{} 4.0.0)
>>>
>>> See SVN commit r78169 titled 'anticipate change in Windows toolchain', or the
>>> mirrored git commit at
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_wch_r-2Dsource_commit_bd674e2b76b2384169424e3d899fbfb5ac174978&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=oQL_LnqplfOV3qS3_v0vWloGk5Qhr6pWl4Yjzs4Tzzo&e=
>>>
>>> Dirk
>>>
>>> --
>>> https://urldefense.proofpoint.com/v2/url?u=http-3A__dirk.eddelbuettel.com&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=nOplDwpoh_urogK65Old_l1Qi-EbVpyC0Mv4LgeLl64&e=  | @eddelbuettel | edd at debian.org
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From g@bembecker @end|ng |rom gm@||@com  Tue Apr 28 21:37:23 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 28 Apr 2020 12:37:23 -0700
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <16b2bd6e-a760-6e34-8a6d-be5c61375121@fredhutch.org>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
 <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
 <24204.37489.757879.648305@rob.eddelbuettel.com>
 <CAJXgQP1XF5tuKrqqxbu7BHp47m93DQkbCyOa4NLTvpRKHSKfnQ@mail.gmail.com>
 <CABFfbXuD-sLHXf=SCjzFroS5SWKxfE+i+s5O-VAXgLovOaByPg@mail.gmail.com>
 <16b2bd6e-a760-6e34-8a6d-be5c61375121@fredhutch.org>
Message-ID: <CAD4oTHECvXfnOzuxEdCA-hb24Z61mYPefymQviU9U2M20udtsQ@mail.gmail.com>

 Huge thanks to you (Jeroen) and R-core for doing this.

I wasn't involved with this directly but I know it was a pretty seriously
heavy list so well done all around!

~G



On Tue, Apr 28, 2020, 11:04 AM Herv? Pag?s <hpages at fredhutch.org> wrote:

> Thanks Jeroen!
>
> > On Tue, Apr 7, 2020 at 6:07 PM Kevin Ushey <kevinushey at gmail.com> wrote:
> >>
> >> Regardless, I would like to thank R core, CRAN, and Jeroen for all of
> >> the time that has gone into creating and validating this new
> >> toolchain. This is arduous work at an especially arduous time, so I'd
> >> like to voice my appreciation for all the time and energy they have
> >> spent on making this possible.
>
> Absolutely. Thanks to R core, CRAN, Jeroen, and all the other people
> involved in creating the new Windows toolchain.
>
> Cheers,
> H.
>
> >>
> >> Best,
> >> Kevin
> >>
> >> On Tue, Apr 7, 2020 at 7:47 AM Dirk Eddelbuettel <edd at debian.org>
> wrote:
> >>>
> >>>
> >>> There appears to have been some progress on this matter:
> >>>
> >>> -Note that @command{g++} 4.9.x (as used for @R{} on Windows up to
> 3.6.x)
> >>> +Note that @command{g++} 4.9.x (as used on Windows prior to @R{} 4.0.0)
> >>>
> >>> See SVN commit r78169 titled 'anticipate change in Windows toolchain',
> or the
> >>> mirrored git commit at
> >>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_wch_r-2Dsource_commit_bd674e2b76b2384169424e3d899fbfb5ac174978&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=oQL_LnqplfOV3qS3_v0vWloGk5Qhr6pWl4Yjzs4Tzzo&e=
> >>>
> >>> Dirk
> >>>
> >>> --
> >>>
> https://urldefense.proofpoint.com/v2/url?u=http-3A__dirk.eddelbuettel.com&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=nOplDwpoh_urogK65Old_l1Qi-EbVpyC0Mv4LgeLl64&e=
> | @eddelbuettel | edd at debian.org
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Tue Apr 28 21:58:54 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Tue, 28 Apr 2020 15:58:54 -0400
Subject: [Rd] Rtools and R 4.0.0?
In-Reply-To: <CAD4oTHECvXfnOzuxEdCA-hb24Z61mYPefymQviU9U2M20udtsQ@mail.gmail.com>
References: <CAJXgQP3a-VO74kquUXBahuCYGdkj8ZZqQ44301YsyPJVsFndmg@mail.gmail.com>
 <CAD4oTHGkO0_ShuCe9hL_eO8SggYqcy5xZQ0c4GH5crg8Rdc7nA@mail.gmail.com>
 <CABFfbXvLLHN=HRaar+5Ae2jjjdqUTGYu+j_6ROnvFXr-avveFA@mail.gmail.com>
 <CAD4oTHFSyJ4OGfK=Gyom6AZsHVOnFipQyn9rS5cniC84sZTbbg@mail.gmail.com>
 <24204.37489.757879.648305@rob.eddelbuettel.com>
 <CAJXgQP1XF5tuKrqqxbu7BHp47m93DQkbCyOa4NLTvpRKHSKfnQ@mail.gmail.com>
 <CABFfbXuD-sLHXf=SCjzFroS5SWKxfE+i+s5O-VAXgLovOaByPg@mail.gmail.com>
 <16b2bd6e-a760-6e34-8a6d-be5c61375121@fredhutch.org>
 <CAD4oTHECvXfnOzuxEdCA-hb24Z61mYPefymQviU9U2M20udtsQ@mail.gmail.com>
Message-ID: <CAL6gwnJ6-PVduDXQsb1V7VNB=K8rc+ZSTAEfzYwz8wLvt8sthw@mail.gmail.com>

Absolutely; this is a complicated and frustrating procedure, and we
owe Jeoren and all our gratitude!

Avi

On Tue, Apr 28, 2020 at 3:37 PM Gabriel Becker <gabembecker at gmail.com> wrote:
>
>  Huge thanks to you (Jeroen) and R-core for doing this.
>
> I wasn't involved with this directly but I know it was a pretty seriously
> heavy list so well done all around!
>
> ~G
>
>
>
> On Tue, Apr 28, 2020, 11:04 AM Herv? Pag?s <hpages at fredhutch.org> wrote:
>
> > Thanks Jeroen!
> >
> > > On Tue, Apr 7, 2020 at 6:07 PM Kevin Ushey <kevinushey at gmail.com> wrote:
> > >>
> > >> Regardless, I would like to thank R core, CRAN, and Jeroen for all of
> > >> the time that has gone into creating and validating this new
> > >> toolchain. This is arduous work at an especially arduous time, so I'd
> > >> like to voice my appreciation for all the time and energy they have
> > >> spent on making this possible.
> >
> > Absolutely. Thanks to R core, CRAN, Jeroen, and all the other people
> > involved in creating the new Windows toolchain.
> >
> > Cheers,
> > H.
> >
> > >>
> > >> Best,
> > >> Kevin
> > >>
> > >> On Tue, Apr 7, 2020 at 7:47 AM Dirk Eddelbuettel <edd at debian.org>
> > wrote:
> > >>>
> > >>>
> > >>> There appears to have been some progress on this matter:
> > >>>
> > >>> -Note that @command{g++} 4.9.x (as used for @R{} on Windows up to
> > 3.6.x)
> > >>> +Note that @command{g++} 4.9.x (as used on Windows prior to @R{} 4.0.0)
> > >>>
> > >>> See SVN commit r78169 titled 'anticipate change in Windows toolchain',
> > or the
> > >>> mirrored git commit at
> > >>>
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_wch_r-2Dsource_commit_bd674e2b76b2384169424e3d899fbfb5ac174978&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=oQL_LnqplfOV3qS3_v0vWloGk5Qhr6pWl4Yjzs4Tzzo&e=
> > >>>
> > >>> Dirk
> > >>>
> > >>> --
> > >>>
> > https://urldefense.proofpoint.com/v2/url?u=http-3A__dirk.eddelbuettel.com&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=nOplDwpoh_urogK65Old_l1Qi-EbVpyC0Mv4LgeLl64&e=
> > | @eddelbuettel | edd at debian.org
> > >>>
> > >>> ______________________________________________
> > >>> R-devel at r-project.org mailing list
> > >>>
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> > >>
> > >> ______________________________________________
> > >> R-devel at r-project.org mailing list
> > >>
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > >
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zMjaTujju0afmK5eIVPZrNajypj8QjuNbSyoAv93ISk&s=vUQZdkVyqq3iT9HukcKqEjg80sI-OZoKuy9DKiufquw&e=
> > >
> >
> > --
> > Herv? Pag?s
> >
> > Program in Computational Biology
> > Division of Public Health Sciences
> > Fred Hutchinson Cancer Research Center
> > 1100 Fairview Ave. N, M1-B514
> > P.O. Box 19024
> > Seattle, WA 98109-1024
> >
> > E-mail: hpages at fredhutch.org
> > Phone:  (206) 667-5791
> > Fax:    (206) 667-1319
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Wed Apr 29 01:17:18 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 28 Apr 2020 18:17:18 -0500
Subject: [Rd] R 4.0.0 build error with sysdata.rda on ppc64el architecture
Message-ID: <24232.47486.618901.868945@rob.eddelbuettel.com>


The R 4.0.0 package migration on Debian is being held back by a failed build
on ppc64el [1]. We can see from the history of builds logs [2] that it used
to build, briefly failed, worked again and then failed leading to R 4.0.0's
release. (And my bad for missing how the alpha1/alpha2/beta/rc builds failed.)

I have however neither changed anything, nor did I ever have to accomodate
ppc64el (as it has happened with other platforms in the past).

The automated build gets killed after 150 mins at

make[7]: Entering directory '/<<PKGBUILDDIR>>/src/library/tools/src'
mkdir -p -- ../../../../library/tools/libs
make[7]: Leaving directory '/<<PKGBUILDDIR>>/src/library/tools/src'
make[6]: Leaving directory '/<<PKGBUILDDIR>>/src/library/tools/src'
make[5]: Leaving directory '/<<PKGBUILDDIR>>/src/library/tools'
make[5]: Entering directory '/<<PKGBUILDDIR>>/src/library/tools'
installing 'sysdata.rda'
E: Build killed with signal TERM after 150 minutes of inactivity

as can be seen in [3]. The Debian wiki has pointers for getting a shell
account on such platforms [4] (and that is not limited to Debianers but a
'Minipower' service).  I now have one such account on the VM farm at Unicamp
[5] in Brazil. It uses OpenStack (slick, never used it before) and I just
provisioned a reasonably beefy machine, booted from one of the available OSs
(Ubuntu 20.04), installed the build-dependencies and ... am now hanging at
the exact same spot:

make[7]: Entering directory '/home/ubuntu/git/r-base/src/library/tools/src'
mkdir -p -- ../../../../library/tools/libs
make[7]: Leaving directory '/home/ubuntu/git/r-base/src/library/tools/src'
make[6]: Leaving directory '/home/ubuntu/git/r-base/src/library/tools/src'
make[5]: Leaving directory '/home/ubuntu/git/r-base/src/library/tools'
make[5]: Entering directory '/home/ubuntu/git/r-base/src/library/tools'
installing 'sysdata.rda'

So at least it reproduces. But how do we go about addressing this? Why would
it be looping infinitely trying to assemble sysdata.rda?

Any hints or suggestions or debug flags I should set?

Thanks in advance for any pointers,  Dirk


[1] https://buildd.debian.org/status/package.php?p=r-base&suite=experimental
[2] https://buildd.debian.org/status/logs.php?pkg=r-base&arch=ppc64el
[3] https://buildd.debian.org/status/fetch.php?pkg=r-base&arch=ppc64el&ver=4.0.0-1&stamp=1587737274&raw=0
[4] https://wiki.debian.org/ppc64el
[5] https://openpower.ic.unicamp.br/minicloud/

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @u@@ @end|ng |rom weh|@edu@@u  Wed Apr 29 01:54:58 2020
From: @u@@ @end|ng |rom weh|@edu@@u (Shian Su)
Date: Tue, 28 Apr 2020 23:54:58 +0000
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
 <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
 <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>
Message-ID: <DBCAA36E-CD20-4014-8F20-95CA8777B37F@wehi.edu.au>

Thanks Henrik,

That clears things up significantly. I did see the warning but failed to include it my initial email. It sounds like an RStudio issue, and it seems like that it?s quite intrinsic to how forks interact with RStudio. Given this code is eventually going to be a part of a package, should I expect it to fail mysteriously in RStudio for my users? Is the best solution here to migrate all my parallelism to PSOCK for the foreseeable future?

Thanks,
Shian

> On 29 Apr 2020, at 2:08 am, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>
> Hi, a few comments below.
>
> First, from my experience and troubleshooting similar reports from
> others, a returned NULL from parallel::mclapply() is often because the
> corresponding child process crashed/died. However, when this happens
> you should see a warning, e.g.
>
>> y <- parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x)
> Warning message:
> In parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x) :
>  scheduled core 2 did not deliver a result, all values of the job
> will be affected
>> str(y)
> List of 2
> $ : int 1
> $ : NULL
>
> This warning is produces on R 4.0.0 and R 3.6.2 in Linux, but I would
> assume that warning is also produced on macOS.  It's not clear from
> you message whether you also got that warning or not.
>
> Second, forked processing, as used by parallel::mclapply(), is advised
> against when using the RStudio Console [0].  Unfortunately, there's no
> way to disable forked processing in R [1].  You could add the
> following to your ~/.Rprofile startup file:
>
> ## Warn when forked processing is used in the RStudio Console
> if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
>  invisible(trace(parallel:::mcfork, tracer =
> quote(warning("parallel::mcfork() was used. Note that forked
> processes, e.g. parallel::mclapply(), may be unstable when used from
> the RStudio Console
> [https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011]",
> call.=FALSE))))
> }
>
> to detect when forked processed is used in the RStudio Console -
> either by you or by some package code that you use directly or
> indirectly.  You could even use stop() here if you wanna be
> conservative.
>
> [0] https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011
> [1] https://stat.ethz.ch/pipermail/r-devel/2020-January/078896.html
>
> /Henrik
>
> On Tue, Apr 28, 2020 at 2:39 AM Shian Su <su.s at wehi.edu.au> wrote:
>>
>> Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.
>>
>> Any idea as to what interaction between Rstudio and mclapply causes this?
>>
>> Thanks,
>> Shian
>>
>> On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:
>>
>> Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?
>>
>> Cheers,
>> Simon
>>
>>
>> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:
>>
>> Dear R-devel,
>>
>> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
>>
>> library(mgcv)
>> library(parallel)
>>
>> df <- data.frame(
>> +     x = 1:100,
>> +     y = 1:100
>> + )
>>
>> mclapply(1:2, function(i, df) {
>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
>> +     },
>> +     df = df,
>> +     mc.cores = 2L
>> + )
>> [[1]]
>>
>> Family: gaussian
>> Link function: identity
>>
>> Formula:
>> y ~ s(x, bs = "cs")
>>
>> Estimated degrees of freedom:
>> 9  total = 10
>>
>> GCV score: 0
>>
>> [[2]]
>>
>> Family: gaussian
>> Link function: identity
>>
>> Formula:
>> y ~ s(x, bs = "cs")
>>
>> Estimated degrees of freedom:
>> 9  total = 10
>>
>> GCV score: 0
>>
>>
>>
>> df <- data.frame(
>> +     x = 1:1000,
>> +     y = 1:1000
>> + )
>>
>> mclapply(1:2, function(i, df) {
>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
>> +     },
>> +     df = df,
>> +     mc.cores = 2L
>> + )
>> [[1]]
>> NULL
>>
>> [[2]]
>> NULL
>>
>> There is no error message returned, and the code runs perfectly fine in lapply.
>>
>> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
>>
>> Kind regards,
>> Shian Su
>> ----
>> Shian Su
>> PhD Student, Ritchie Lab 6W, Epigenetics and Development
>> Walter & Eliza Hall Institute of Medical Research
>> 1G Royal Parade, Parkville VIC 3052, Australia
>>
>>
>> _______________________________________________
>>
>> The information in this email is confidential and intend...{{dropped:26}}
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel

_______________________________________________

The information in this email is confidential and intended solely for the addressee.
You must not disclose, forward, print or use it without the permission of the sender.

The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
Nation as the traditional owners of the land where our campuses are located and
the continuing connection to country and community.
_______________________________________________

From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 29 05:33:19 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 29 Apr 2020 15:33:19 +1200
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <DBCAA36E-CD20-4014-8F20-95CA8777B37F@wehi.edu.au>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
 <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
 <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>
 <DBCAA36E-CD20-4014-8F20-95CA8777B37F@wehi.edu.au>
Message-ID: <F1266510-C4C1-481B-BA13-E5CE56AF34B0@R-project.org>

Do NOT use mcparallel() in packages except as a non-default option that user can set for the reasons Henrik explained. Multicore is intended for HPC applications that need to use many cores for computing-heavy jobs, but it does not play well with RStudio and more importantly you don't know the resource available so only the user can tell you when it's safe to use. Multi-core machines are often shared so using all detected cores is a very bad idea. The user should be able to explicitly enable it, but it should not be enabled by default.

As for parallelism, it depends heavily on your use-case. Native parallelism is preferred (threads, OpenMP, ...) and I assume you're not talking about that as that is always the first option. Multicore works well in cases where there is no easy native solution and you need to share a lot of data for small results. If the data is small, or you need to read it first, then other methods like PSOCK may be preferable. In any case, parallelization only makes sense for code that you know will take a long time to run.

Cheers,
Simon


> On 29/04/2020, at 11:54 AM, Shian Su <su.s at wehi.edu.au> wrote:
> 
> Thanks Henrik,
> 
> That clears things up significantly. I did see the warning but failed to include it my initial email. It sounds like an RStudio issue, and it seems like that it?s quite intrinsic to how forks interact with RStudio. Given this code is eventually going to be a part of a package, should I expect it to fail mysteriously in RStudio for my users? Is the best solution here to migrate all my parallelism to PSOCK for the foreseeable future?
> 
> Thanks,
> Shian
> 
>> On 29 Apr 2020, at 2:08 am, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>> 
>> Hi, a few comments below.
>> 
>> First, from my experience and troubleshooting similar reports from
>> others, a returned NULL from parallel::mclapply() is often because the
>> corresponding child process crashed/died. However, when this happens
>> you should see a warning, e.g.
>> 
>>> y <- parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x)
>> Warning message:
>> In parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x) :
>> scheduled core 2 did not deliver a result, all values of the job
>> will be affected
>>> str(y)
>> List of 2
>> $ : int 1
>> $ : NULL
>> 
>> This warning is produces on R 4.0.0 and R 3.6.2 in Linux, but I would
>> assume that warning is also produced on macOS.  It's not clear from
>> you message whether you also got that warning or not.
>> 
>> Second, forked processing, as used by parallel::mclapply(), is advised
>> against when using the RStudio Console [0].  Unfortunately, there's no
>> way to disable forked processing in R [1].  You could add the
>> following to your ~/.Rprofile startup file:
>> 
>> ## Warn when forked processing is used in the RStudio Console
>> if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
>> invisible(trace(parallel:::mcfork, tracer =
>> quote(warning("parallel::mcfork() was used. Note that forked
>> processes, e.g. parallel::mclapply(), may be unstable when used from
>> the RStudio Console
>> [https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011]",
>> call.=FALSE))))
>> }
>> 
>> to detect when forked processed is used in the RStudio Console -
>> either by you or by some package code that you use directly or
>> indirectly.  You could even use stop() here if you wanna be
>> conservative.
>> 
>> [0] https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011
>> [1] https://stat.ethz.ch/pipermail/r-devel/2020-January/078896.html
>> 
>> /Henrik
>> 
>> On Tue, Apr 28, 2020 at 2:39 AM Shian Su <su.s at wehi.edu.au> wrote:
>>> 
>>> Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.
>>> 
>>> Any idea as to what interaction between Rstudio and mclapply causes this?
>>> 
>>> Thanks,
>>> Shian
>>> 
>>> On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:
>>> 
>>> Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:
>>> 
>>> Dear R-devel,
>>> 
>>> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
>>> 
>>> library(mgcv)
>>> library(parallel)
>>> 
>>> df <- data.frame(
>>> +     x = 1:100,
>>> +     y = 1:100
>>> + )
>>> 
>>> mclapply(1:2, function(i, df) {
>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
>>> +     },
>>> +     df = df,
>>> +     mc.cores = 2L
>>> + )
>>> [[1]]
>>> 
>>> Family: gaussian
>>> Link function: identity
>>> 
>>> Formula:
>>> y ~ s(x, bs = "cs")
>>> 
>>> Estimated degrees of freedom:
>>> 9  total = 10
>>> 
>>> GCV score: 0
>>> 
>>> [[2]]
>>> 
>>> Family: gaussian
>>> Link function: identity
>>> 
>>> Formula:
>>> y ~ s(x, bs = "cs")
>>> 
>>> Estimated degrees of freedom:
>>> 9  total = 10
>>> 
>>> GCV score: 0
>>> 
>>> 
>>> 
>>> df <- data.frame(
>>> +     x = 1:1000,
>>> +     y = 1:1000
>>> + )
>>> 
>>> mclapply(1:2, function(i, df) {
>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
>>> +     },
>>> +     df = df,
>>> +     mc.cores = 2L
>>> + )
>>> [[1]]
>>> NULL
>>> 
>>> [[2]]
>>> NULL
>>> 
>>> There is no error message returned, and the code runs perfectly fine in lapply.
>>> 
>>> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
>>> 
>>> Kind regards,
>>> Shian Su
>>> ----
>>> Shian Su
>>> PhD Student, Ritchie Lab 6W, Epigenetics and Development
>>> Walter & Eliza Hall Institute of Medical Research
>>> 1G Royal Parade, Parkville VIC 3052, Australia
>>> 
>>> 
>>> _______________________________________________
>>> 
>>> The information in this email is confidential and intend...{{dropped:26}}
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> _______________________________________________
> 
> The information in this email is confidential and intended solely for the addressee.
> You must not disclose, forward, print or use it without the permission of the sender.
> 
> The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
> Nation as the traditional owners of the land where our campuses are located and
> the continuing connection to country and community.
> _______________________________________________
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @u@@ @end|ng |rom weh|@edu@@u  Wed Apr 29 06:00:04 2020
From: @u@@ @end|ng |rom weh|@edu@@u (Shian Su)
Date: Wed, 29 Apr 2020 04:00:04 +0000
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <F1266510-C4C1-481B-BA13-E5CE56AF34B0@R-project.org>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
 <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
 <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>
 <DBCAA36E-CD20-4014-8F20-95CA8777B37F@wehi.edu.au>
 <F1266510-C4C1-481B-BA13-E5CE56AF34B0@R-project.org>
Message-ID: <A7EDED33-AD0E-4C37-BA64-DCCA4AC9DA34@wehi.edu.au>

Thanks Simon,

I will take note of the sensible default for core usage. I?m trying to achieve small scale parallelism, where tasks take 1-5 seconds and make fuller use of consumer hardware. Its not a HPC-worthy computation but even laptops these days come with 4 cores and I don?t see a reason to not make use of it.

The goal for the current piece of code I?m working on is to bootstrap many smoothing fits to generate prediction intervals, this is quite easy to write using mclapply. When you say native with threads, OpenMP, etc? are you referring to at the C/C++ level? From my understanding most parallel packages in R end up calling multicore or snow deep down.

I think one of the great advantages of mclapply is that it defaults to lapply when running on a single thread, this makes it much easier to maintain code with optional parallelism. I?m already running into trouble with the fact that PSOCK doesn?t seem to retain loaded packages in spawned processes. I would love to know if there reliable options in R that allow a similar interface to mclapply but use a different and more RStudio-stable mode of parallelisation?

Thanks,
Shian

> On 29 Apr 2020, at 1:33 pm, Simon Urbanek <simon.urbanek at R-project.org> wrote:
>
> Do NOT use mcparallel() in packages except as a non-default option that user can set for the reasons Henrik explained. Multicore is intended for HPC applications that need to use many cores for computing-heavy jobs, but it does not play well with RStudio and more importantly you don't know the resource available so only the user can tell you when it's safe to use. Multi-core machines are often shared so using all detected cores is a very bad idea. The user should be able to explicitly enable it, but it should not be enabled by default.
>
> As for parallelism, it depends heavily on your use-case. Native parallelism is preferred (threads, OpenMP, ...) and I assume you're not talking about that as that is always the first option. Multicore works well in cases where there is no easy native solution and you need to share a lot of data for small results. If the data is small, or you need to read it first, then other methods like PSOCK may be preferable. In any case, parallelization only makes sense for code that you know will take a long time to run.
>
> Cheers,
> Simon
>
>
>> On 29/04/2020, at 11:54 AM, Shian Su <su.s at wehi.edu.au> wrote:
>>
>> Thanks Henrik,
>>
>> That clears things up significantly. I did see the warning but failed to include it my initial email. It sounds like an RStudio issue, and it seems like that it?s quite intrinsic to how forks interact with RStudio. Given this code is eventually going to be a part of a package, should I expect it to fail mysteriously in RStudio for my users? Is the best solution here to migrate all my parallelism to PSOCK for the foreseeable future?
>>
>> Thanks,
>> Shian
>>
>>> On 29 Apr 2020, at 2:08 am, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>>
>>> Hi, a few comments below.
>>>
>>> First, from my experience and troubleshooting similar reports from
>>> others, a returned NULL from parallel::mclapply() is often because the
>>> corresponding child process crashed/died. However, when this happens
>>> you should see a warning, e.g.
>>>
>>>> y <- parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x)
>>> Warning message:
>>> In parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x) :
>>> scheduled core 2 did not deliver a result, all values of the job
>>> will be affected
>>>> str(y)
>>> List of 2
>>> $ : int 1
>>> $ : NULL
>>>
>>> This warning is produces on R 4.0.0 and R 3.6.2 in Linux, but I would
>>> assume that warning is also produced on macOS.  It's not clear from
>>> you message whether you also got that warning or not.
>>>
>>> Second, forked processing, as used by parallel::mclapply(), is advised
>>> against when using the RStudio Console [0].  Unfortunately, there's no
>>> way to disable forked processing in R [1].  You could add the
>>> following to your ~/.Rprofile startup file:
>>>
>>> ## Warn when forked processing is used in the RStudio Console
>>> if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
>>> invisible(trace(parallel:::mcfork, tracer =
>>> quote(warning("parallel::mcfork() was used. Note that forked
>>> processes, e.g. parallel::mclapply(), may be unstable when used from
>>> the RStudio Console
>>> [https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011]",
>>> call.=FALSE))))
>>> }
>>>
>>> to detect when forked processed is used in the RStudio Console -
>>> either by you or by some package code that you use directly or
>>> indirectly.  You could even use stop() here if you wanna be
>>> conservative.
>>>
>>> [0] https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011
>>> [1] https://stat.ethz.ch/pipermail/r-devel/2020-January/078896.html
>>>
>>> /Henrik
>>>
>>> On Tue, Apr 28, 2020 at 2:39 AM Shian Su <su.s at wehi.edu.au> wrote:
>>>>
>>>> Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.
>>>>
>>>> Any idea as to what interaction between Rstudio and mclapply causes this?
>>>>
>>>> Thanks,
>>>> Shian
>>>>
>>>> On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:
>>>>
>>>> Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?
>>>>
>>>> Cheers,
>>>> Simon
>>>>
>>>>
>>>> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:
>>>>
>>>> Dear R-devel,
>>>>
>>>> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
>>>>
>>>> library(mgcv)
>>>> library(parallel)
>>>>
>>>> df <- data.frame(
>>>> +     x = 1:100,
>>>> +     y = 1:100
>>>> + )
>>>>
>>>> mclapply(1:2, function(i, df) {
>>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
>>>> +     },
>>>> +     df = df,
>>>> +     mc.cores = 2L
>>>> + )
>>>> [[1]]
>>>>
>>>> Family: gaussian
>>>> Link function: identity
>>>>
>>>> Formula:
>>>> y ~ s(x, bs = "cs")
>>>>
>>>> Estimated degrees of freedom:
>>>> 9  total = 10
>>>>
>>>> GCV score: 0
>>>>
>>>> [[2]]
>>>>
>>>> Family: gaussian
>>>> Link function: identity
>>>>
>>>> Formula:
>>>> y ~ s(x, bs = "cs")
>>>>
>>>> Estimated degrees of freedom:
>>>> 9  total = 10
>>>>
>>>> GCV score: 0
>>>>
>>>>
>>>>
>>>> df <- data.frame(
>>>> +     x = 1:1000,
>>>> +     y = 1:1000
>>>> + )
>>>>
>>>> mclapply(1:2, function(i, df) {
>>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
>>>> +     },
>>>> +     df = df,
>>>> +     mc.cores = 2L
>>>> + )
>>>> [[1]]
>>>> NULL
>>>>
>>>> [[2]]
>>>> NULL
>>>>
>>>> There is no error message returned, and the code runs perfectly fine in lapply.
>>>>
>>>> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
>>>>
>>>> Kind regards,
>>>> Shian Su
>>>> ----
>>>> Shian Su
>>>> PhD Student, Ritchie Lab 6W, Epigenetics and Development
>>>> Walter & Eliza Hall Institute of Medical Research
>>>> 1G Royal Parade, Parkville VIC 3052, Australia
>>>>
>>>>
>>>> _______________________________________________
>>>>
>>>> The information in this email is confidential and intend...{{dropped:26}}
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> _______________________________________________
>>
>> The information in this email is confidential and intended solely for the addressee.
>> You must not disclose, forward, print or use it without the permission of the sender.
>>
>> The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
>> Nation as the traditional owners of the land where our campuses are located and
>> the continuing connection to country and community.
>> _______________________________________________
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>

_______________________________________________

The information in this email is confidential and intended solely for the addressee.
You must not disclose, forward, print or use it without the permission of the sender.

The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
Nation as the traditional owners of the land where our campuses are located and
the continuing connection to country and community.
_______________________________________________

From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Apr 29 07:40:20 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 28 Apr 2020 22:40:20 -0700
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <A7EDED33-AD0E-4C37-BA64-DCCA4AC9DA34@wehi.edu.au>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
 <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
 <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>
 <DBCAA36E-CD20-4014-8F20-95CA8777B37F@wehi.edu.au>
 <F1266510-C4C1-481B-BA13-E5CE56AF34B0@R-project.org>
 <A7EDED33-AD0E-4C37-BA64-DCCA4AC9DA34@wehi.edu.au>
Message-ID: <CAFDcVCRXiSJy29RzojnY-bqDhZ56atxSdzRkaxSUCe1MnkNC8Q@mail.gmail.com>

On Tue, Apr 28, 2020 at 9:00 PM Shian Su <su.s at wehi.edu.au> wrote:
>
> Thanks Simon,
>
> I will take note of the sensible default for core usage. I?m trying to achieve small scale parallelism, where tasks take 1-5 seconds and make fuller use of consumer hardware. Its not a HPC-worthy computation but even laptops these days come with 4 cores and I don?t see a reason to not make use of it.
>
> The goal for the current piece of code I?m working on is to bootstrap many smoothing fits to generate prediction intervals, this is quite easy to write using mclapply. When you say native with threads, OpenMP, etc? are you referring to at the C/C++ level? From my understanding most parallel packages in R end up calling multicore or snow deep down.
>
> I think one of the great advantages of mclapply is that it defaults to lapply when running on a single thread, this makes it much easier to maintain code with optional parallelism. I?m already running into trouble with the fact that PSOCK doesn?t seem to retain loaded packages in spawned processes. I would love to know if there reliable options in R that allow a similar interface to mclapply but use a different and more RStudio-stable mode of parallelisation?

If you use parLapply(cl, ...) and gives the end-users the control over
the cluster 'cl' object (e.g. via an argument), then they have the
option to choose from the different types of clusters that cl <-
parallel::makeCluster(...) can create, notably PSOCK, FORK and MPI
cluster but the framework support others.

The 'foreach' framework takes this separation of *what* to parallelize
(which you decide as a developer) and *how* to parallel (which the
end-user decides) further by so called foreach adaptors aka parallel
backends.  With foreach, users have plently of doNnn packages to pick
from, doMC, doParallel, doMPI, doSnow, doRedis, and doFuture.  Several
of these parallel backends build on top of the core functions provided
by the 'parallel' package.  So, with foreach your users can use forked
parallel processing if they want and, or something else (selected at
the top of their script).

(Disclaimer: I'm the author) The 'future' framework tries to take this
developer-end-user separation one step further and with a lower level
API - future(), value(), resolved() - for which different parallel
backends have been implemented, e.g. multicore, multisession
("PSOCK"), cluster (any parallel::makeCluster() cluster), callr,
batchtools (HPC job schedulers), etc.  All these have been tested to
conform to the Future API specs, so we know our parallel code works
regardless of which of these backends the user picks.  Now, based on
these basic future low-level functions, other higher level APIs have
been implemented.  For instance, the future.apply packages provides
futurized version of all base R apply functions, e.g. future_lapply(),
future_vapply(), future_Map(), etc.  You can basically take you
lapply(...) code and replace it with future_lapply(...) and things
will just work.  So, try replacing your current mclapply() with
future_lapply().  If you/the user uses the 'multicore' backend - set
by plan(multicore) at top of script, you'll get basically what
mclapply() provides.  If plan(multisession) is used, the you basically
get what parLapply() does.  The difference is that you don't have to
worry about globals and packages.  If you like the foreach-style of
map-reduce, you can use futures via the doFuture backend.  If you like
the purrr-style of map-reduce, you can use the 'furrr' package.  So,
and I'm obviously biased, if you pick the future framework, you'll
leave yourself and end-users with more options going forward.

Clear as mud?

/Henrik

PS. Simon, I think your explicit comment on mcparallel() & friends is
very helpful for many people and developers. It clearly tells
developers to never use mclapply() as the only path through their
code. I'm quite sure not everyone has been or is aware of this. Now
it's clear. Thank you.

>
> Thanks,
> Shian
>
> > On 29 Apr 2020, at 1:33 pm, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> >
> > Do NOT use mcparallel() in packages except as a non-default option that user can set for the reasons Henrik explained. Multicore is intended for HPC applications that need to use many cores for computing-heavy jobs, but it does not play well with RStudio and more importantly you don't know the resource available so only the user can tell you when it's safe to use. Multi-core machines are often shared so using all detected cores is a very bad idea. The user should be able to explicitly enable it, but it should not be enabled by default.
> >
> > As for parallelism, it depends heavily on your use-case. Native parallelism is preferred (threads, OpenMP, ...) and I assume you're not talking about that as that is always the first option. Multicore works well in cases where there is no easy native solution and you need to share a lot of data for small results. If the data is small, or you need to read it first, then other methods like PSOCK may be preferable. In any case, parallelization only makes sense for code that you know will take a long time to run.
> >
> > Cheers,
> > Simon
> >
> >
> >> On 29/04/2020, at 11:54 AM, Shian Su <su.s at wehi.edu.au> wrote:
> >>
> >> Thanks Henrik,
> >>
> >> That clears things up significantly. I did see the warning but failed to include it my initial email. It sounds like an RStudio issue, and it seems like that it?s quite intrinsic to how forks interact with RStudio. Given this code is eventually going to be a part of a package, should I expect it to fail mysteriously in RStudio for my users? Is the best solution here to migrate all my parallelism to PSOCK for the foreseeable future?
> >>
> >> Thanks,
> >> Shian
> >>
> >>> On 29 Apr 2020, at 2:08 am, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >>>
> >>> Hi, a few comments below.
> >>>
> >>> First, from my experience and troubleshooting similar reports from
> >>> others, a returned NULL from parallel::mclapply() is often because the
> >>> corresponding child process crashed/died. However, when this happens
> >>> you should see a warning, e.g.
> >>>
> >>>> y <- parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x)
> >>> Warning message:
> >>> In parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x) :
> >>> scheduled core 2 did not deliver a result, all values of the job
> >>> will be affected
> >>>> str(y)
> >>> List of 2
> >>> $ : int 1
> >>> $ : NULL
> >>>
> >>> This warning is produces on R 4.0.0 and R 3.6.2 in Linux, but I would
> >>> assume that warning is also produced on macOS.  It's not clear from
> >>> you message whether you also got that warning or not.
> >>>
> >>> Second, forked processing, as used by parallel::mclapply(), is advised
> >>> against when using the RStudio Console [0].  Unfortunately, there's no
> >>> way to disable forked processing in R [1].  You could add the
> >>> following to your ~/.Rprofile startup file:
> >>>
> >>> ## Warn when forked processing is used in the RStudio Console
> >>> if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
> >>> invisible(trace(parallel:::mcfork, tracer =
> >>> quote(warning("parallel::mcfork() was used. Note that forked
> >>> processes, e.g. parallel::mclapply(), may be unstable when used from
> >>> the RStudio Console
> >>> [https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011]",
> >>> call.=FALSE))))
> >>> }
> >>>
> >>> to detect when forked processed is used in the RStudio Console -
> >>> either by you or by some package code that you use directly or
> >>> indirectly.  You could even use stop() here if you wanna be
> >>> conservative.
> >>>
> >>> [0] https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011
> >>> [1] https://stat.ethz.ch/pipermail/r-devel/2020-January/078896.html
> >>>
> >>> /Henrik
> >>>
> >>> On Tue, Apr 28, 2020 at 2:39 AM Shian Su <su.s at wehi.edu.au> wrote:
> >>>>
> >>>> Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.
> >>>>
> >>>> Any idea as to what interaction between Rstudio and mclapply causes this?
> >>>>
> >>>> Thanks,
> >>>> Shian
> >>>>
> >>>> On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:
> >>>>
> >>>> Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?
> >>>>
> >>>> Cheers,
> >>>> Simon
> >>>>
> >>>>
> >>>> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:
> >>>>
> >>>> Dear R-devel,
> >>>>
> >>>> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
> >>>>
> >>>> library(mgcv)
> >>>> library(parallel)
> >>>>
> >>>> df <- data.frame(
> >>>> +     x = 1:100,
> >>>> +     y = 1:100
> >>>> + )
> >>>>
> >>>> mclapply(1:2, function(i, df) {
> >>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> >>>> +     },
> >>>> +     df = df,
> >>>> +     mc.cores = 2L
> >>>> + )
> >>>> [[1]]
> >>>>
> >>>> Family: gaussian
> >>>> Link function: identity
> >>>>
> >>>> Formula:
> >>>> y ~ s(x, bs = "cs")
> >>>>
> >>>> Estimated degrees of freedom:
> >>>> 9  total = 10
> >>>>
> >>>> GCV score: 0
> >>>>
> >>>> [[2]]
> >>>>
> >>>> Family: gaussian
> >>>> Link function: identity
> >>>>
> >>>> Formula:
> >>>> y ~ s(x, bs = "cs")
> >>>>
> >>>> Estimated degrees of freedom:
> >>>> 9  total = 10
> >>>>
> >>>> GCV score: 0
> >>>>
> >>>>
> >>>>
> >>>> df <- data.frame(
> >>>> +     x = 1:1000,
> >>>> +     y = 1:1000
> >>>> + )
> >>>>
> >>>> mclapply(1:2, function(i, df) {
> >>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> >>>> +     },
> >>>> +     df = df,
> >>>> +     mc.cores = 2L
> >>>> + )
> >>>> [[1]]
> >>>> NULL
> >>>>
> >>>> [[2]]
> >>>> NULL
> >>>>
> >>>> There is no error message returned, and the code runs perfectly fine in lapply.
> >>>>
> >>>> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
> >>>>
> >>>> Kind regards,
> >>>> Shian Su
> >>>> ----
> >>>> Shian Su
> >>>> PhD Student, Ritchie Lab 6W, Epigenetics and Development
> >>>> Walter & Eliza Hall Institute of Medical Research
> >>>> 1G Royal Parade, Parkville VIC 3052, Australia
> >>>>
> >>>>
> >>>> _______________________________________________
> >>>>
> >>>> The information in this email is confidential and intend...{{dropped:26}}
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> _______________________________________________
> >>
> >> The information in this email is confidential and intended solely for the addressee.
> >> You must not disclose, forward, print or use it without the permission of the sender.
> >>
> >> The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
> >> Nation as the traditional owners of the land where our campuses are located and
> >> the continuing connection to country and community.
> >> _______________________________________________
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> _______________________________________________
>
> The information in this email is confidential and intended solely for the addressee.
> You must not disclose, forward, print or use it without the permission of the sender.
>
> The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
> Nation as the traditional owners of the land where our campuses are located and
> the continuing connection to country and community.
> _______________________________________________
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Wed Apr 29 11:22:59 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 29 Apr 2020 11:22:59 +0200
Subject: [Rd] 
 R 4.0.0 build error with sysdata.rda on ppc64el architecture
In-Reply-To: <24232.47486.618901.868945@rob.eddelbuettel.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
Message-ID: <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>

Hum, at least it is not Apple, so maybe you can attach a debugger to the running process? (gdb -p process_id or something like that --- haven't actually done it for a decade). Then at least we can get a stack trace and a clue about where it is looping. Diddling optimization options can also sometimes provide a clue.

-pd

> On 29 Apr 2020, at 01:17 , Dirk Eddelbuettel <edd at debian.org> wrote:
> 
> 
> The R 4.0.0 package migration on Debian is being held back by a failed build
> on ppc64el [1]. We can see from the history of builds logs [2] that it used
> to build, briefly failed, worked again and then failed leading to R 4.0.0's
> release. (And my bad for missing how the alpha1/alpha2/beta/rc builds failed.)
> 
> I have however neither changed anything, nor did I ever have to accomodate
> ppc64el (as it has happened with other platforms in the past).
> 
> The automated build gets killed after 150 mins at
> 
> make[7]: Entering directory '/<<PKGBUILDDIR>>/src/library/tools/src'
> mkdir -p -- ../../../../library/tools/libs
> make[7]: Leaving directory '/<<PKGBUILDDIR>>/src/library/tools/src'
> make[6]: Leaving directory '/<<PKGBUILDDIR>>/src/library/tools/src'
> make[5]: Leaving directory '/<<PKGBUILDDIR>>/src/library/tools'
> make[5]: Entering directory '/<<PKGBUILDDIR>>/src/library/tools'
> installing 'sysdata.rda'
> E: Build killed with signal TERM after 150 minutes of inactivity
> 
> as can be seen in [3]. The Debian wiki has pointers for getting a shell
> account on such platforms [4] (and that is not limited to Debianers but a
> 'Minipower' service).  I now have one such account on the VM farm at Unicamp
> [5] in Brazil. It uses OpenStack (slick, never used it before) and I just
> provisioned a reasonably beefy machine, booted from one of the available OSs
> (Ubuntu 20.04), installed the build-dependencies and ... am now hanging at
> the exact same spot:
> 
> make[7]: Entering directory '/home/ubuntu/git/r-base/src/library/tools/src'
> mkdir -p -- ../../../../library/tools/libs
> make[7]: Leaving directory '/home/ubuntu/git/r-base/src/library/tools/src'
> make[6]: Leaving directory '/home/ubuntu/git/r-base/src/library/tools/src'
> make[5]: Leaving directory '/home/ubuntu/git/r-base/src/library/tools'
> make[5]: Entering directory '/home/ubuntu/git/r-base/src/library/tools'
> installing 'sysdata.rda'
> 
> So at least it reproduces. But how do we go about addressing this? Why would
> it be looping infinitely trying to assemble sysdata.rda?
> 
> Any hints or suggestions or debug flags I should set?
> 
> Thanks in advance for any pointers,  Dirk
> 
> 
> [1] https://buildd.debian.org/status/package.php?p=r-base&suite=experimental
> [2] https://buildd.debian.org/status/logs.php?pkg=r-base&arch=ppc64el
> [3] https://buildd.debian.org/status/fetch.php?pkg=r-base&arch=ppc64el&ver=4.0.0-1&stamp=1587737274&raw=0
> [4] https://wiki.debian.org/ppc64el
> [5] https://openpower.ic.unicamp.br/minicloud/
> 
> -- 
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From z@gu @end|ng |rom dk|z-he|de|berg@de  Wed Apr 29 12:05:54 2020
From: z@gu @end|ng |rom dk|z-he|de|berg@de (Gu, Zuguang)
Date: Wed, 29 Apr 2020 10:05:54 +0000
Subject: [Rd] grid 4.0 generates wrong results when adding two complex units
 by sum()
Message-ID: <1588154757663.87049@dkfz-heidelberg.de>

Hi,


In grid 4.0, adding two complex units by `sum()` seems to give wrong results.


In the following example, `u1 + u2` gives the correct result, but `sum(u1, u2)` also `sum(unit.c(u1, u2))` give the wrong results.


```

library(grid)

u1 = 0.4*sum(unit(1, "inch"), unit(1, "mm"))
u2 = 0.1*sum(unit(1, "inch"), unit(1, "mm"))
u1
# [1] 0.4*sum(1inches, 1mm)
u2
# [1] 0.1*sum(1inches, 1mm)

# this is correct
u1 + u2
# [1] 0.5*sum(1inches, 1mm)

# but this is wrong, it should return `sum(0.4inches, 0.4mm, 0.1inches, 0.1mm)`, right?
sum(u1, u2)
# [1] sum(0.4inches, 0.1mm, 1inches, 1mm)
sum(unit.c(u1, u2)) # this is also wrong
# [1] sum(0.4inches, 0.1mm, 1inches, 1mm)
```

Session info:

```
sessionInfo()
# R version 4.0.0 (2020-04-24)
# Platform: x86_64-apple-darwin17.0 (64-bit)
# Running under: macOS Catalina 10.15.4
#
# Matrix products: default
# BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
# LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
#
# locale:
# [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8
#
# attached base packages:
# [1] grid      stats     graphics  grDevices utils     datasets  methods
# [8] base
#
# other attached packages:
# [1] colorout_1.2-2
#
# loaded via a namespace (and not attached):
# [1] compiler_4.0.0
```

Thanks!
Zuguang Gu




	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Wed Apr 29 13:03:31 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Wed, 29 Apr 2020 12:03:31 +0100
Subject: [Rd] mclapply returns NULLs on MacOS when running GAM
In-Reply-To: <CAFDcVCRXiSJy29RzojnY-bqDhZ56atxSdzRkaxSUCe1MnkNC8Q@mail.gmail.com>
References: <FF7B318E-5D4B-4193-A09F-721BD87830C0@wehi.edu.au>
 <136A75AA-02A8-4CC2-BE44-FE617C6BF297@R-project.org>
 <76854B52-41CE-4822-914B-60976C771425@wehi.edu.au>
 <CAFDcVCRZ1o1si=Jktjgn+PiF3UMiYc_ziVGnHCv1CTstLKHu6w@mail.gmail.com>
 <DBCAA36E-CD20-4014-8F20-95CA8777B37F@wehi.edu.au>
 <F1266510-C4C1-481B-BA13-E5CE56AF34B0@R-project.org>
 <A7EDED33-AD0E-4C37-BA64-DCCA4AC9DA34@wehi.edu.au>
 <CAFDcVCRXiSJy29RzojnY-bqDhZ56atxSdzRkaxSUCe1MnkNC8Q@mail.gmail.com>
Message-ID: <CAOO9MKWFDg+LRr_dk+Rr_GOqkcnXT3OEkVvpRq9J+nGYUBDsCw@mail.gmail.com>

> PS. Simon, I think your explicit comment on mcparallel() & friends is
very helpful for many people and developers. It clearly tells
developers to never use mclapply() as the only path through their
code. I'm quite sure not everyone has been or is aware of this. Now
it's clear. Thank you.

I second that, IMO that should land somewhere in manual.

On Wed, Apr 29, 2020 at 6:40 AM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> On Tue, Apr 28, 2020 at 9:00 PM Shian Su <su.s at wehi.edu.au> wrote:
> >
> > Thanks Simon,
> >
> > I will take note of the sensible default for core usage. I?m trying to achieve small scale parallelism, where tasks take 1-5 seconds and make fuller use of consumer hardware. Its not a HPC-worthy computation but even laptops these days come with 4 cores and I don?t see a reason to not make use of it.
> >
> > The goal for the current piece of code I?m working on is to bootstrap many smoothing fits to generate prediction intervals, this is quite easy to write using mclapply. When you say native with threads, OpenMP, etc? are you referring to at the C/C++ level? From my understanding most parallel packages in R end up calling multicore or snow deep down.
> >
> > I think one of the great advantages of mclapply is that it defaults to lapply when running on a single thread, this makes it much easier to maintain code with optional parallelism. I?m already running into trouble with the fact that PSOCK doesn?t seem to retain loaded packages in spawned processes. I would love to know if there reliable options in R that allow a similar interface to mclapply but use a different and more RStudio-stable mode of parallelisation?
>
> If you use parLapply(cl, ...) and gives the end-users the control over
> the cluster 'cl' object (e.g. via an argument), then they have the
> option to choose from the different types of clusters that cl <-
> parallel::makeCluster(...) can create, notably PSOCK, FORK and MPI
> cluster but the framework support others.
>
> The 'foreach' framework takes this separation of *what* to parallelize
> (which you decide as a developer) and *how* to parallel (which the
> end-user decides) further by so called foreach adaptors aka parallel
> backends.  With foreach, users have plently of doNnn packages to pick
> from, doMC, doParallel, doMPI, doSnow, doRedis, and doFuture.  Several
> of these parallel backends build on top of the core functions provided
> by the 'parallel' package.  So, with foreach your users can use forked
> parallel processing if they want and, or something else (selected at
> the top of their script).
>
> (Disclaimer: I'm the author) The 'future' framework tries to take this
> developer-end-user separation one step further and with a lower level
> API - future(), value(), resolved() - for which different parallel
> backends have been implemented, e.g. multicore, multisession
> ("PSOCK"), cluster (any parallel::makeCluster() cluster), callr,
> batchtools (HPC job schedulers), etc.  All these have been tested to
> conform to the Future API specs, so we know our parallel code works
> regardless of which of these backends the user picks.  Now, based on
> these basic future low-level functions, other higher level APIs have
> been implemented.  For instance, the future.apply packages provides
> futurized version of all base R apply functions, e.g. future_lapply(),
> future_vapply(), future_Map(), etc.  You can basically take you
> lapply(...) code and replace it with future_lapply(...) and things
> will just work.  So, try replacing your current mclapply() with
> future_lapply().  If you/the user uses the 'multicore' backend - set
> by plan(multicore) at top of script, you'll get basically what
> mclapply() provides.  If plan(multisession) is used, the you basically
> get what parLapply() does.  The difference is that you don't have to
> worry about globals and packages.  If you like the foreach-style of
> map-reduce, you can use futures via the doFuture backend.  If you like
> the purrr-style of map-reduce, you can use the 'furrr' package.  So,
> and I'm obviously biased, if you pick the future framework, you'll
> leave yourself and end-users with more options going forward.
>
> Clear as mud?
>
> /Henrik
>
> PS. Simon, I think your explicit comment on mcparallel() & friends is
> very helpful for many people and developers. It clearly tells
> developers to never use mclapply() as the only path through their
> code. I'm quite sure not everyone has been or is aware of this. Now
> it's clear. Thank you.
>
> >
> > Thanks,
> > Shian
> >
> > > On 29 Apr 2020, at 1:33 pm, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> > >
> > > Do NOT use mcparallel() in packages except as a non-default option that user can set for the reasons Henrik explained. Multicore is intended for HPC applications that need to use many cores for computing-heavy jobs, but it does not play well with RStudio and more importantly you don't know the resource available so only the user can tell you when it's safe to use. Multi-core machines are often shared so using all detected cores is a very bad idea. The user should be able to explicitly enable it, but it should not be enabled by default.
> > >
> > > As for parallelism, it depends heavily on your use-case. Native parallelism is preferred (threads, OpenMP, ...) and I assume you're not talking about that as that is always the first option. Multicore works well in cases where there is no easy native solution and you need to share a lot of data for small results. If the data is small, or you need to read it first, then other methods like PSOCK may be preferable. In any case, parallelization only makes sense for code that you know will take a long time to run.
> > >
> > > Cheers,
> > > Simon
> > >
> > >
> > >> On 29/04/2020, at 11:54 AM, Shian Su <su.s at wehi.edu.au> wrote:
> > >>
> > >> Thanks Henrik,
> > >>
> > >> That clears things up significantly. I did see the warning but failed to include it my initial email. It sounds like an RStudio issue, and it seems like that it?s quite intrinsic to how forks interact with RStudio. Given this code is eventually going to be a part of a package, should I expect it to fail mysteriously in RStudio for my users? Is the best solution here to migrate all my parallelism to PSOCK for the foreseeable future?
> > >>
> > >> Thanks,
> > >> Shian
> > >>
> > >>> On 29 Apr 2020, at 2:08 am, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> > >>>
> > >>> Hi, a few comments below.
> > >>>
> > >>> First, from my experience and troubleshooting similar reports from
> > >>> others, a returned NULL from parallel::mclapply() is often because the
> > >>> corresponding child process crashed/died. However, when this happens
> > >>> you should see a warning, e.g.
> > >>>
> > >>>> y <- parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x)
> > >>> Warning message:
> > >>> In parallel::mclapply(1:2, FUN = function(x) if (x == 2) quit("no") else x) :
> > >>> scheduled core 2 did not deliver a result, all values of the job
> > >>> will be affected
> > >>>> str(y)
> > >>> List of 2
> > >>> $ : int 1
> > >>> $ : NULL
> > >>>
> > >>> This warning is produces on R 4.0.0 and R 3.6.2 in Linux, but I would
> > >>> assume that warning is also produced on macOS.  It's not clear from
> > >>> you message whether you also got that warning or not.
> > >>>
> > >>> Second, forked processing, as used by parallel::mclapply(), is advised
> > >>> against when using the RStudio Console [0].  Unfortunately, there's no
> > >>> way to disable forked processing in R [1].  You could add the
> > >>> following to your ~/.Rprofile startup file:
> > >>>
> > >>> ## Warn when forked processing is used in the RStudio Console
> > >>> if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
> > >>> invisible(trace(parallel:::mcfork, tracer =
> > >>> quote(warning("parallel::mcfork() was used. Note that forked
> > >>> processes, e.g. parallel::mclapply(), may be unstable when used from
> > >>> the RStudio Console
> > >>> [https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011]",
> > >>> call.=FALSE))))
> > >>> }
> > >>>
> > >>> to detect when forked processed is used in the RStudio Console -
> > >>> either by you or by some package code that you use directly or
> > >>> indirectly.  You could even use stop() here if you wanna be
> > >>> conservative.
> > >>>
> > >>> [0] https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011
> > >>> [1] https://stat.ethz.ch/pipermail/r-devel/2020-January/078896.html
> > >>>
> > >>> /Henrik
> > >>>
> > >>> On Tue, Apr 28, 2020 at 2:39 AM Shian Su <su.s at wehi.edu.au> wrote:
> > >>>>
> > >>>> Yes I am running on Rstudio 1.2.5033. I was also running this code without error on Ubuntu in Rstudio. Checking again on the terminal and it does indeed work fine even with large data.frames.
> > >>>>
> > >>>> Any idea as to what interaction between Rstudio and mclapply causes this?
> > >>>>
> > >>>> Thanks,
> > >>>> Shian
> > >>>>
> > >>>> On 28 Apr 2020, at 7:29 pm, Simon Urbanek <simon.urbanek at R-project.org<mailto:simon.urbanek at R-project.org>> wrote:
> > >>>>
> > >>>> Sorry, the code works perfectly fine for me in R even for 1e6 observations (but I was testing with R 4.0.0). Are you using some kind of GUI?
> > >>>>
> > >>>> Cheers,
> > >>>> Simon
> > >>>>
> > >>>>
> > >>>> On 28/04/2020, at 8:11 PM, Shian Su <su.s at wehi.edu.au<mailto:su.s at wehi.edu.au>> wrote:
> > >>>>
> > >>>> Dear R-devel,
> > >>>>
> > >>>> I am experiencing issues with running GAM models using mclapply, it fails to return any values if the data input becomes large. For example here the code runs fine with a df of 100 rows, but fails at 1000.
> > >>>>
> > >>>> library(mgcv)
> > >>>> library(parallel)
> > >>>>
> > >>>> df <- data.frame(
> > >>>> +     x = 1:100,
> > >>>> +     y = 1:100
> > >>>> + )
> > >>>>
> > >>>> mclapply(1:2, function(i, df) {
> > >>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> > >>>> +     },
> > >>>> +     df = df,
> > >>>> +     mc.cores = 2L
> > >>>> + )
> > >>>> [[1]]
> > >>>>
> > >>>> Family: gaussian
> > >>>> Link function: identity
> > >>>>
> > >>>> Formula:
> > >>>> y ~ s(x, bs = "cs")
> > >>>>
> > >>>> Estimated degrees of freedom:
> > >>>> 9  total = 10
> > >>>>
> > >>>> GCV score: 0
> > >>>>
> > >>>> [[2]]
> > >>>>
> > >>>> Family: gaussian
> > >>>> Link function: identity
> > >>>>
> > >>>> Formula:
> > >>>> y ~ s(x, bs = "cs")
> > >>>>
> > >>>> Estimated degrees of freedom:
> > >>>> 9  total = 10
> > >>>>
> > >>>> GCV score: 0
> > >>>>
> > >>>>
> > >>>>
> > >>>> df <- data.frame(
> > >>>> +     x = 1:1000,
> > >>>> +     y = 1:1000
> > >>>> + )
> > >>>>
> > >>>> mclapply(1:2, function(i, df) {
> > >>>> +         fit <- gam(y ~ s(x, bs = "cs"), data = df)
> > >>>> +     },
> > >>>> +     df = df,
> > >>>> +     mc.cores = 2L
> > >>>> + )
> > >>>> [[1]]
> > >>>> NULL
> > >>>>
> > >>>> [[2]]
> > >>>> NULL
> > >>>>
> > >>>> There is no error message returned, and the code runs perfectly fine in lapply.
> > >>>>
> > >>>> I am on a MacBook 15 (2016) running MacOS 10.14.6 (Mojave) and R version 3.6.2. This bug could not be reproduced on my Ubuntu 19.10 running R 3.6.1.
> > >>>>
> > >>>> Kind regards,
> > >>>> Shian Su
> > >>>> ----
> > >>>> Shian Su
> > >>>> PhD Student, Ritchie Lab 6W, Epigenetics and Development
> > >>>> Walter & Eliza Hall Institute of Medical Research
> > >>>> 1G Royal Parade, Parkville VIC 3052, Australia
> > >>>>
> > >>>>
> > >>>> _______________________________________________
> > >>>>
> > >>>> The information in this email is confidential and intend...{{dropped:26}}
> > >>>>
> > >>>> ______________________________________________
> > >>>> R-devel at r-project.org mailing list
> > >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>
> > >> _______________________________________________
> > >>
> > >> The information in this email is confidential and intended solely for the addressee.
> > >> You must not disclose, forward, print or use it without the permission of the sender.
> > >>
> > >> The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
> > >> Nation as the traditional owners of the land where our campuses are located and
> > >> the continuing connection to country and community.
> > >> _______________________________________________
> > >> ______________________________________________
> > >> R-devel at r-project.org mailing list
> > >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > _______________________________________________
> >
> > The information in this email is confidential and intended solely for the addressee.
> > You must not disclose, forward, print or use it without the permission of the sender.
> >
> > The Walter and Eliza Hall Institute acknowledges the Wurundjeri people of the Kulin
> > Nation as the traditional owners of the land where our campuses are located and
> > the continuing connection to country and community.
> > _______________________________________________
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Thu Apr 30 02:13:42 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Thu, 30 Apr 2020 12:13:42 +1200
Subject: [Rd] 
 grid 4.0 generates wrong results when adding two complex units
 by sum()
In-Reply-To: <1588154757663.87049@dkfz-heidelberg.de>
References: <1588154757663.87049@dkfz-heidelberg.de>
Message-ID: <e2989f0a-26ad-afdf-8cfc-bee38d93d9a0@stat.auckland.ac.nz>


Confirmed.

This is fixed now in R-devel and R-patched.

Thanks for the report!

Paul

On 29/04/20 10:05 pm, Gu, Zuguang wrote:
> Hi,
> 
> 
> In grid 4.0, adding two complex units by `sum()` seems to give wrong results.
> 
> 
> In the following example, `u1 + u2` gives the correct result, but `sum(u1, u2)` also `sum(unit.c(u1, u2))` give the wrong results.
> 
> 
> ```
> 
> library(grid)
> 
> u1 = 0.4*sum(unit(1, "inch"), unit(1, "mm"))
> u2 = 0.1*sum(unit(1, "inch"), unit(1, "mm"))
> u1
> # [1] 0.4*sum(1inches, 1mm)
> u2
> # [1] 0.1*sum(1inches, 1mm)
> 
> # this is correct
> u1 + u2
> # [1] 0.5*sum(1inches, 1mm)
> 
> # but this is wrong, it should return `sum(0.4inches, 0.4mm, 0.1inches, 0.1mm)`, right?
> sum(u1, u2)
> # [1] sum(0.4inches, 0.1mm, 1inches, 1mm)
> sum(unit.c(u1, u2)) # this is also wrong
> # [1] sum(0.4inches, 0.1mm, 1inches, 1mm)
> ```
> 
> Session info:
> 
> ```
> sessionInfo()
> # R version 4.0.0 (2020-04-24)
> # Platform: x86_64-apple-darwin17.0 (64-bit)
> # Running under: macOS Catalina 10.15.4
> #
> # Matrix products: default
> # BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
> # LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
> #
> # locale:
> # [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8
> #
> # attached base packages:
> # [1] grid      stats     graphics  grDevices utils     datasets  methods
> # [8] base
> #
> # other attached packages:
> # [1] colorout_1.2-2
> #
> # loaded via a namespace (and not attached):
> # [1] compiler_4.0.0
> ```
> 
> Thanks!
> Zuguang Gu
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From edd @end|ng |rom deb|@n@org  Thu Apr 30 02:49:23 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 29 Apr 2020 19:49:23 -0500
Subject: [Rd] 
 R 4.0.0 build error with sysdata.rda on ppc64el architecture
In-Reply-To: <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
Message-ID: <24234.8339.103881.186264@rob.eddelbuettel.com>


On 29 April 2020 at 11:22, peter dalgaard wrote:
| Hum, at least it is not Apple, so maybe you can attach a debugger to the running process? (gdb -p process_id or something like that --- haven't actually done it for a decade). Then at least we can get a stack trace and a clue about where it is looping. Diddling optimization options can also sometimes provide a clue.

(Missed this earlier as the conversation moved off-list.)

And to keep the list abreast, this appears to be related to the long double
issue on powerpc where needed an extra #define to ensure compilation. That
commit is the difference in a bisection as I was able to demonstrate. The
issue can also be circumvented by disabling long double support on the
platform, but hopefully a better fix can be found.  Bryan Lewis was
eagle-eyed on this and very helpful. The issue is now back in the hands of R
Core and I and others will await the news.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Thu Apr 30 06:37:45 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Wed, 29 Apr 2020 23:37:45 -0500
Subject: [Rd] "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
Message-ID: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>

Hello, All:


 ????? "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:


Error:? package or namespace load failed for 'Ecfun':
 ?.onLoad failed in loadNamespace() for 'rJava', details
 ? call: inDL(x, as.logical(local), as.logical(now), ...)
 ? error:? unable to load shared object 'c:/Program 
Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
 ? LoadLibrary failure: ^1 is not a valid win32 application


 ????? This was after installing R 4.0.0 and "rtools40-x86_64.exe" under 
Windows 10 Pro 64-bit.


 ????? Suggestions?
 ????? Thanks,
 ????? Spencer Graves


sessionInfo()
R version 4.0.0 (2020-04-24)
Platform: x86_64-64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CCTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats?? graphics?? grDevices? utils?? datasets?? methods?? base

loaded via a namespace (and not attached):
[1] compiler_4.0.0


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Apr 30 07:28:58 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 30 Apr 2020 17:28:58 +1200
Subject: [Rd] 
 "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
In-Reply-To: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
References: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
Message-ID: <24E907AE-FD50-40A8-A5DF-ECEE25B949C7@R-project.org>

Are you missing the 32-bit Java JDK?

Cheers,
S

> On 30/04/2020, at 4:37 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hello, All:
> 
> 
>       "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:
> 
> 
> Error:  package or namespace load failed for 'Ecfun':
>  .onLoad failed in loadNamespace() for 'rJava', details
>   call: inDL(x, as.logical(local), as.logical(now), ...)
>   error:  unable to load shared object 'c:/Program Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>   LoadLibrary failure: ^1 is not a valid win32 application
> 
> 
>       This was after installing R 4.0.0 and "rtools40-x86_64.exe" under Windows 10 Pro 64-bit.
> 
> 
>       Suggestions?
>       Thanks,
>       Spencer Graves
> 
> 
> sessionInfo()
> R version 4.0.0 (2020-04-24)
> Platform: x86_64-64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CCTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> attached base packages:
> [1] stats   graphics   grDevices  utils   datasets   methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From |uc@r @end|ng |rom |edor@project@org  Thu Apr 30 09:42:03 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 30 Apr 2020 09:42:03 +0200
Subject: [Rd] 
 R 4.0.0 build error with sysdata.rda on ppc64el architecture
In-Reply-To: <24234.8339.103881.186264@rob.eddelbuettel.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
Message-ID: <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>

On Thu, 30 Apr 2020 at 02:49, Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 29 April 2020 at 11:22, peter dalgaard wrote:
> | Hum, at least it is not Apple, so maybe you can attach a debugger to the running process? (gdb -p process_id or something like that --- haven't actually done it for a decade). Then at least we can get a stack trace and a clue about where it is looping. Diddling optimization options can also sometimes provide a clue.
>
> (Missed this earlier as the conversation moved off-list.)
>
> And to keep the list abreast, this appears to be related to the long double
> issue on powerpc where needed an extra #define to ensure compilation. That
> commit is the difference in a bisection as I was able to demonstrate. The
> issue can also be circumvented by disabling long double support on the
> platform, but hopefully a better fix can be found.  Bryan Lewis was
> eagle-eyed on this and very helpful. The issue is now back in the hands of R
> Core and I and others will await the news.

Which reminds me that [1] was required for v3.6.2. Could be related?

[1] https://src.fedoraproject.org/rpms/R/blob/master/f/R-3.6.2-ppc64-no-const-long-double.patch

I?aki


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Thu Apr 30 10:13:04 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Thu, 30 Apr 2020 08:13:04 +0000
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
Message-ID: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>

Hello All,

I am wondering if there has ever been any discussion/consideration given to incorporating MathJax (or something similar) into R for rendering equations in .Rd files. I know that equations are rendered beautifully in the pdf manuals, but I suspect the majority of users primarily look at the html help files when using R. While I am comfortable reading something like "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be nicer if this was shown as a 'proper' equation.

Best,
Wolfgang


From jeroenoom@ @end|ng |rom gm@||@com  Thu Apr 30 10:15:08 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Thu, 30 Apr 2020 10:15:08 +0200
Subject: [Rd] 
 "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
In-Reply-To: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
References: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
Message-ID: <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>

On Thu, Apr 30, 2020 at 6:38 AM Spencer Graves
<spencer.graves at prodsyse.com> wrote:
>
> Hello, All:
>
>
>        "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:
>
>
> Error:  package or namespace load failed for 'Ecfun':
>   .onLoad failed in loadNamespace() for 'rJava', details
>    call: inDL(x, as.logical(local), as.logical(now), ...)
>    error:  unable to load shared object 'c:/Program
> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>    LoadLibrary failure: ^1 is not a valid win32 application
>

This is an error in loading the rJava package, so it is not related to
rtools40, and probably inappropriate for this mailing list.

As Simon suggested, you may have to install the 32-bit Java JDK. See
also this faq: https://github.com/r-windows/docs/blob/master/faq.md#how-to-install-rjava-on-windows


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Thu Apr 30 10:16:55 2020
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Thu, 30 Apr 2020 16:16:55 +0800
Subject: [Rd] Translations and snprintf on Windows
Message-ID: <CAPRVBcx9rZQx7rFQj-a6KK+6LXPi5t_2p0NXte9HAjY9F5tP4g@mail.gmail.com>

[a bit unsure on if this is maybe better for r-package-devel]

We recently added translations to messages at the R and C level to
data.table.

At the C level, we did _() wrapping for char arrays supplied to the
following functions: error, warning, Rprintf, Error, and snprintf.

This seemed OK but the use of snprintf specifically appears to have caused
a crash on Windows:

https://github.com/Rdatatable/data.table/issues/4402

Is there any guidance against using gettext with snprintf, or perhaps
guidance on which "outputters" *are* OK for translation?

Michael Chirico

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Thu Apr 30 11:50:36 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Thu, 30 Apr 2020 10:50:36 +0100
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
Message-ID: <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>

You can probably already do this using the \if{html} conditional, and
either including the matchjax js files in the package, or getting them
from a CDN.

Gabor

On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
<wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>
> Hello All,
>
> I am wondering if there has ever been any discussion/consideration given to incorporating MathJax (or something similar) into R for rendering equations in .Rd files. I know that equations are rendered beautifully in the pdf manuals, but I suspect the majority of users primarily look at the html help files when using R. While I am comfortable reading something like "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be nicer if this was shown as a 'proper' equation.
>
> Best,
> Wolfgang
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Thu Apr 30 12:15:55 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Thu, 30 Apr 2020 10:15:55 +0000
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
Message-ID: <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>

Interesting. I gave this a try, but couldn't make this work. One would have to infuse something like 

<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
</script>

or 

<script id="MathJax-script" async
  src="<url-to-your-site>/mathjax/tex-chtml.js">
</script>

into the .html file, but just adding this to the .Rd file (directly or wrapped with \if{html}{}) doesn't do that (it just gets printed). If somebody has already successfully done this, I would be interested in hearing how.

Best,
Wolfgang

>-----Original Message-----
>From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>Sent: Thursday, 30 April, 2020 11:51
>To: Viechtbauer, Wolfgang (SP)
>Cc: r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>You can probably already do this using the \if{html} conditional, and
>either including the matchjax js files in the package, or getting them
>from a CDN.
>
>Gabor
>
>On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
><wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>
>> Hello All,
>>
>> I am wondering if there has ever been any discussion/consideration given
>to incorporating MathJax (or something similar) into R for rendering
>equations in .Rd files. I know that equations are rendered beautifully in
>the pdf manuals, but I suspect the majority of users primarily look at the
>html help files when using R. While I am comfortable reading something like
>"B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>nicer if this was shown as a 'proper' equation.
>>
>> Best,
>> Wolfgang
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel

From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Apr 30 12:19:05 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 30 Apr 2020 06:19:05 -0400
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
Message-ID: <96b08f22-00f6-3ecc-a561-387edf6dbcd5@gmail.com>

This sounds promising.

Also remember that user-defined macros are possible, so even if you need 
a lot of contortions to enter the code, you can simplify it at the Rd level.

Duncan Murdoch

On 30/04/2020 5:50 a.m., G?bor Cs?rdi wrote:
> You can probably already do this using the \if{html} conditional, and
> either including the matchjax js files in the package, or getting them
> from a CDN.
> 
> Gabor
> 
> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>
>> Hello All,
>>
>> I am wondering if there has ever been any discussion/consideration given to incorporating MathJax (or something similar) into R for rendering equations in .Rd files. I know that equations are rendered beautifully in the pdf manuals, but I suspect the majority of users primarily look at the html help files when using R. While I am comfortable reading something like "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be nicer if this was shown as a 'proper' equation.
>>
>> Best,
>> Wolfgang
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Apr 30 12:22:16 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 30 Apr 2020 06:22:16 -0400
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
Message-ID: <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>

On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
> Interesting. I gave this a try, but couldn't make this work. One would have to infuse something like
> 
> <script id="MathJax-script" async
>    src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
> </script>
> 
> or
> 
> <script id="MathJax-script" async
>    src="<url-to-your-site>/mathjax/tex-chtml.js">
> </script>
> 
> into the .html file, but just adding this to the .Rd file (directly or wrapped with \if{html}{}) doesn't do that (it just gets printed). If somebody has already successfully done this, I would be interested in hearing how.

You'd need to wrap that code in \out (inside the conditional, i.e. 
something like

\if{html}{\out{<script id="MathJax-script" async 
src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}

Duncan Murdoch

> 
> Best,
> Wolfgang
> 
>> -----Original Message-----
>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>> Sent: Thursday, 30 April, 2020 11:51
>> To: Viechtbauer, Wolfgang (SP)
>> Cc: r-devel
>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>> You can probably already do this using the \if{html} conditional, and
>> either including the matchjax js files in the package, or getting them
>>from a CDN.
>>
>> Gabor
>>
>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>
>>> Hello All,
>>>
>>> I am wondering if there has ever been any discussion/consideration given
>> to incorporating MathJax (or something similar) into R for rendering
>> equations in .Rd files. I know that equations are rendered beautifully in
>> the pdf manuals, but I suspect the majority of users primarily look at the
>> html help files when using R. While I am comfortable reading something like
>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>> nicer if this was shown as a 'proper' equation.
>>>
>>> Best,
>>> Wolfgang
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Thu Apr 30 12:59:02 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Thu, 30 Apr 2020 10:59:02 +0000
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
 <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>
Message-ID: <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>

Thanks Gabor and Duncan! It works. For those interested, I added this to the beginning of the \details{} section:

\if{html}{\out{
<script id="MathJax-script" async
   src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
</script>
}}

And then I can use:

\if{html}{\out{\(B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\)}}

or

\if{html}{\out{\[B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\]}}

to render the equation (inline or as 'displaymath'). I'll try to add MathJax locally next.

Best,
Wolfgang

>-----Original Message-----
>From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>Sent: Thursday, 30 April, 2020 12:22
>To: Viechtbauer, Wolfgang (SP); r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
>> Interesting. I gave this a try, but couldn't make this work. One would
>have to infuse something like
>>
>> <script id="MathJax-script" async
>>    src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>> </script>
>>
>> or
>>
>> <script id="MathJax-script" async
>>    src="<url-to-your-site>/mathjax/tex-chtml.js">
>> </script>
>>
>> into the .html file, but just adding this to the .Rd file (directly or
>wrapped with \if{html}{}) doesn't do that (it just gets printed). If
>somebody has already successfully done this, I would be interested in
>hearing how.
>
>You'd need to wrap that code in \out (inside the conditional, i.e.
>something like
>
>\if{html}{\out{<script id="MathJax-script" async
>src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}
>
>Duncan Murdoch
>
>>
>> Best,
>> Wolfgang
>>
>>> -----Original Message-----
>>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>>> Sent: Thursday, 30 April, 2020 11:51
>>> To: Viechtbauer, Wolfgang (SP)
>>> Cc: r-devel
>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>
>>> You can probably already do this using the \if{html} conditional, and
>>> either including the matchjax js files in the package, or getting them
>>>from a CDN.
>>>
>>> Gabor
>>>
>>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>>
>>>> Hello All,
>>>>
>>>> I am wondering if there has ever been any discussion/consideration given
>>> to incorporating MathJax (or something similar) into R for rendering
>>> equations in .Rd files. I know that equations are rendered beautifully in
>>> the pdf manuals, but I suspect the majority of users primarily look at
>the
>>> html help files when using R. While I am comfortable reading something
>like
>>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>>> nicer if this was shown as a 'proper' equation.
>>>>
>>>> Best,
>>>> Wolfgang

From 11d||tt|ewood @end|ng |rom gm@||@com  Thu Apr 30 14:31:08 2020
From: 11d||tt|ewood @end|ng |rom gm@||@com (Dominic Littlewood)
Date: Thu, 30 Apr 2020 13:31:08 +0100
Subject: [Rd] Possible documentation problem/bug?
Message-ID: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>

It seems like there is no obvious way in the documentation to convert the
expressions in the dots argument to a list without evaluating them. Say, if
you want to have a function that prints all its arguments:

> foo(abc$de, fg[h], i)
abc$de
fg[h]
i

...then converting them to a list would be helpful.
Using substitute(...) was the first thing I tried, but that only gives
the *first
*argument in dots. It turns out that there is a way to do this, using
substitute(...()), but this does not appear to be in either the substitute or
the dots help page.

In fact, there is a clue how to do this in the documentation, if you look
closely. Let me quote the substitute page:

"Substituting and quoting often cause confusion when the argument is
expression(...). The result is a call to the expression constructor
function and needs to be evaluated with eval to give the actual expression
object."

So this appears to give a way to turn the arguments into a list -
eval(substitute(expression(...))).  But that's quite long, and hard to
understand if you just come across it in some code - why are we using eval
here? why are we substituting expression? - and would definitely require an
explanatory comment. If the user just wants to iterate over the arguments,
substitute(...()) is better. In fact, you can get exactly the same effect
as the above code using as.expression(substitute(...())). Should the
documentation be updated?

	[[alternative HTML version deleted]]


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Thu Apr 30 15:00:20 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Thu, 30 Apr 2020 15:00:20 +0200
Subject: [Rd] Possible documentation problem/bug?
In-Reply-To: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>
References: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>
Message-ID: <f779f5b9-11b9-8475-7e69-d100db1ab070@insa-toulouse.fr>

Le 30/04/2020 ? 14:31, Dominic Littlewood a ?crit?:
> It seems like there is no obvious way in the documentation to convert 
> the expressions in the dots argument to a list without evaluating 
> them. Say, if you want to have a function that prints all its arguments:
If you wish to iterate through all the arguments (not only '...') then 
match.call() seems to be the most straightforward and explicit tool:

f=function(a, ...) {mc <- match.call(); print(as.list(mc)[-1])}
f(x,y[h],abc$d)
#$a
#x
#
#[[2]]
#y[h]
#
#[[3]]
#abc$d

Best,
Serguei.


>
>> foo(abc$de, fg[h], i)
> abc$de
> fg[h]
> i
>
> ...then converting them to a list would be helpful.
> Using substitute(...) was the first thing I tried, but that only gives
> the *first
> *argument in dots. It turns out that there is a way to do this, using
> substitute(...()), but this does not appear to be in either the substitute or
> the dots help page.
>
> In fact, there is a clue how to do this in the documentation, if you look
> closely. Let me quote the substitute page:
>
> "Substituting and quoting often cause confusion when the argument is
> expression(...). The result is a call to the expression constructor
> function and needs to be evaluated with eval to give the actual expression
> object."
>
> So this appears to give a way to turn the arguments into a list -
> eval(substitute(expression(...))).  But that's quite long, and hard to
> understand if you just come across it in some code - why are we using eval
> here? why are we substituting expression? - and would definitely require an
> explanatory comment. If the user just wants to iterate over the arguments,
> substitute(...()) is better. In fact, you can get exactly the same effect
> as the above code using as.expression(substitute(...())). Should the
> documentation be updated?
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Thu Apr 30 15:22:39 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 30 Apr 2020 08:22:39 -0500
Subject: [Rd] 
 R 4.0.0 build error with sysdata.rda on ppc64el architecture
In-Reply-To: <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
Message-ID: <24234.53535.647635.838791@rob.eddelbuettel.com>


On 30 April 2020 at 09:42, I?aki Ucar wrote:
| On Thu, 30 Apr 2020 at 02:49, Dirk Eddelbuettel <edd at debian.org> wrote:
| > And to keep the list abreast, this appears to be related to the long double
| > issue on powerpc where needed an extra #define to ensure compilation. That
[...]
| Which reminds me that [1] was required for v3.6.2. Could be related?

Yes, that is what I refered to via "long double issue on powerpc". Without a
URL but it is the same issue (in the sense of that architecture being "very
different"); it simply is no longer the same issue of needing the #define to
compile. But the diffferent nature of powerpc now bite's R own 'compiler'
package.  R Core is on it; I may avoid it in a quicker fix by disabling long
double support on just this platform (til we have a better fix).

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From r@v|@v@r@dh@n @end|ng |rom jhu@edu  Thu Apr 30 15:58:15 2020
From: r@v|@v@r@dh@n @end|ng |rom jhu@edu (Ravi Varadhan)
Date: Thu, 30 Apr 2020 13:58:15 +0000
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
 <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>,
 <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>
Message-ID: <98017b68d8874f44bef58880a02ac5bb@jhu.edu>

Thank you.  This is a very useful idea!


Best,

Ravi

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Viechtbauer, Wolfgang (SP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
Sent: Thursday, April 30, 2020 6:59:02 AM
To: r-devel
Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files

Thanks Gabor and Duncan! It works. For those interested, I added this to the beginning of the \details{} section:

\if{html}{\out{
<script id="MathJax-script" async
   src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
</script>
}}

And then I can use:

\if{html}{\out{\(B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\)}}

or

\if{html}{\out{\[B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\]}}

to render the equation (inline or as 'displaymath'). I'll try to add MathJax locally next.

Best,
Wolfgang

>-----Original Message-----
>From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>Sent: Thursday, 30 April, 2020 12:22
>To: Viechtbauer, Wolfgang (SP); r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
>> Interesting. I gave this a try, but couldn't make this work. One would
>have to infuse something like
>>
>> <script id="MathJax-script" async
>>    src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>> </script>
>>
>> or
>>
>> <script id="MathJax-script" async
>>    src="<url-to-your-site>/mathjax/tex-chtml.js">
>> </script>
>>
>> into the .html file, but just adding this to the .Rd file (directly or
>wrapped with \if{html}{}) doesn't do that (it just gets printed). If
>somebody has already successfully done this, I would be interested in
>hearing how.
>
>You'd need to wrap that code in \out (inside the conditional, i.e.
>something like
>
>\if{html}{\out{<script id="MathJax-script" async
>src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}
>
>Duncan Murdoch
>
>>
>> Best,
>> Wolfgang
>>
>>> -----Original Message-----
>>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>>> Sent: Thursday, 30 April, 2020 11:51
>>> To: Viechtbauer, Wolfgang (SP)
>>> Cc: r-devel
>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>
>>> You can probably already do this using the \if{html} conditional, and
>>> either including the matchjax js files in the package, or getting them
>>>from a CDN.
>>>
>>> Gabor
>>>
>>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>>
>>>> Hello All,
>>>>
>>>> I am wondering if there has ever been any discussion/consideration given
>>> to incorporating MathJax (or something similar) into R for rendering
>>> equations in .Rd files. I know that equations are rendered beautifully in
>>> the pdf manuals, but I suspect the majority of users primarily look at
>the
>>> html help files when using R. While I am comfortable reading something
>like
>>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>>> nicer if this was shown as a 'proper' equation.
>>>>
>>>> Best,
>>>> Wolfgang
______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr 30 16:11:06 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 30 Apr 2020 09:11:06 -0500 (CDT)
Subject: [Rd] 
 [External] Re: R 4.0.0 build error with sysdata.rda on ppc64el
 architecture
In-Reply-To: <24234.53535.647635.838791@rob.eddelbuettel.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
 <24234.53535.647635.838791@rob.eddelbuettel.com>
Message-ID: <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>

On Thu, 30 Apr 2020, Dirk Eddelbuettel wrote:

>
> On 30 April 2020 at 09:42, I?aki Ucar wrote:
> | On Thu, 30 Apr 2020 at 02:49, Dirk Eddelbuettel <edd at debian.org> wrote:
> | > And to keep the list abreast, this appears to be related to the long double
> | > issue on powerpc where needed an extra #define to ensure compilation. That
> [...]
> | Which reminds me that [1] was required for v3.6.2. Could be related?
>
> Yes, that is what I refered to via "long double issue on powerpc". Without a
> URL but it is the same issue (in the sense of that architecture being "very
> different"); it simply is no longer the same issue of needing the #define to
> compile. But the diffferent nature of powerpc now bite's R own 'compiler'
> package.  R Core is on it; I may avoid it in a quicker fix by disabling long
> double support on just this platform (til we have a better fix).

Maybe I missed something. How is the 'compiler' package involved?

Best,

luke

>
> Dirk
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From pd@|gd @end|ng |rom gm@||@com  Thu Apr 30 16:27:28 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Thu, 30 Apr 2020 16:27:28 +0200
Subject: [Rd] 
 [External] Re: R 4.0.0 build error with sysdata.rda on ppc64el
 architecture
In-Reply-To: <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
 <24234.53535.647635.838791@rob.eddelbuettel.com>
 <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
Message-ID: <D03FC68D-22E2-42D7-884D-60E677307878@gmail.com>

I don't think compiler was involved, it was just the next thing after sysdata.rda, so a suspect at some point.

-pd

> On 30 Apr 2020, at 16:11 , luke-tierney at uiowa.edu wrote:
> 
> On Thu, 30 Apr 2020, Dirk Eddelbuettel wrote:
> 
>> 
>> On 30 April 2020 at 09:42, I?aki Ucar wrote:
>> | On Thu, 30 Apr 2020 at 02:49, Dirk Eddelbuettel <edd at debian.org> wrote:
>> | > And to keep the list abreast, this appears to be related to the long double
>> | > issue on powerpc where needed an extra #define to ensure compilation. That
>> [...]
>> | Which reminds me that [1] was required for v3.6.2. Could be related?
>> 
>> Yes, that is what I refered to via "long double issue on powerpc". Without a
>> URL but it is the same issue (in the sense of that architecture being "very
>> different"); it simply is no longer the same issue of needing the #define to
>> compile. But the diffferent nature of powerpc now bite's R own 'compiler'
>> package.  R Core is on it; I may avoid it in a quicker fix by disabling long
>> double support on just this platform (til we have a better fix).
> 
> Maybe I missed something. How is the 'compiler' package involved?
> 
> Best,
> 
> luke
> 
>> 
>> Dirk
>> 
>> 
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>   Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From edd @end|ng |rom deb|@n@org  Thu Apr 30 16:37:00 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 30 Apr 2020 09:37:00 -0500
Subject: [Rd] 
 [External] Re: R 4.0.0 build error with sysdata.rda on ppc64el
 architecture
In-Reply-To: <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
 <24234.53535.647635.838791@rob.eddelbuettel.com>
 <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
Message-ID: <24234.57996.340969.97974@rob.eddelbuettel.com>


On 30 April 2020 at 09:11, luke-tierney at uiowa.edu wrote:
| On Thu, 30 Apr 2020, Dirk Eddelbuettel wrote:
| Maybe I missed something. How is the 'compiler' package involved?

See the other email thread; you replied (~ 26 hours ago) to my message adding
that "sysdata.rda in 'tools' hanging was wrong". It gets to the next stage,
which is 'compiler'.

We know by now (thanks to Bryan and Tomas) that src/main/machar.c is the real
culprit due to the long double behaviour on ppc64el.  I presume 'compiler'
calls into platform.c and hence machar.c for calibration or setup.

On the Debian side, I just shipped an updated source package which will skip
long double support on this platform.  That should allow builds to complete,
hopefully, so that we can look into get the build from 'experimental' into
'unstable' and the distro proper.  In the meantime, there are alternative
venues for getting R 4.0.0 binaries for Debian and Ubuntu as previously
mentioned.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 30 16:48:01 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 30 Apr 2020 16:48:01 +0200
Subject: [Rd] 
 [External] Re: R 4.0.0 build error with sysdata.rda on ppc64el
 architecture
In-Reply-To: <24234.57996.340969.97974@rob.eddelbuettel.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
 <24234.53535.647635.838791@rob.eddelbuettel.com>
 <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
 <24234.57996.340969.97974@rob.eddelbuettel.com>
Message-ID: <a8397fee-5030-b005-54cc-82626b1e47f5@gmail.com>

On 4/30/20 4:37 PM, Dirk Eddelbuettel wrote:
> On 30 April 2020 at 09:11, luke-tierney at uiowa.edu wrote:
> | On Thu, 30 Apr 2020, Dirk Eddelbuettel wrote:
> | Maybe I missed something. How is the 'compiler' package involved?
>
> See the other email thread; you replied (~ 26 hours ago) to my message adding
> that "sysdata.rda in 'tools' hanging was wrong". It gets to the next stage,
> which is 'compiler'.
>
> We know by now (thanks to Bryan and Tomas) that src/main/machar.c is the real
> culprit due to the long double behaviour on ppc64el.  I presume 'compiler'
> calls into platform.c and hence machar.c for calibration or setup.

Yes, R just hangs during startup, always, it is not related to the 
compiler nor sysdata.rda.
The problem is that machine characteristics detection does not work with 
long double on ppc64el, it falls into an infinite loop.

Tomas

>
> On the Debian side, I just shipped an updated source package which will skip
> long double support on this platform.  That should allow builds to complete,
> hopefully, so that we can look into get the build from 'experimental' into
> 'unstable' and the distro proper.  In the meantime, there are alternative
> venues for getting R 4.0.0 binaries for Debian and Ubuntu as previously
> mentioned.
>
> Dirk
>


