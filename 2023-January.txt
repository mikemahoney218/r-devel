From Andre@G||||bert @end|ng |rom chu-rouen@|r  Tue Jan  3 12:56:37 2023
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Tue, 3 Jan 2023 11:56:37 +0000
Subject: [Rd] Bug in optim for specific orders of magnitude
In-Reply-To: <3475cfd9-06a2-39c1-bb8d-ab69932c4306@gmail.com>
References: <CAP6aD9d+A9h8FfAX1On29Oo2979HeiWSQMg=dxBSAu_zJNXTqQ@mail.gmail.com>
 <6722312a-0975-23db-ebce-2466971317bb@sapo.pt>
 <3475cfd9-06a2-39c1-bb8d-ab69932c4306@gmail.com>
Message-ID: <1b44379526744a5aa448c23132a7bf9d@chu-rouen.fr>


J C Nash wrote:
> Extreme scaling quite often ruins optimization calculations. If you think available methods are capable of doing this, there's a bridge I can sell you in NYC.

Given that optim()seems to have problem with denormals but work correctly with values greater than 1e-308, I think that it can hardly be considered a real bug.

There is no miracle solution, but there are a few tricks to work with extreme values.
What I call "flogs" are alternative representation of a number x as log(abs(x)) and sign(x). It supports very large and very small numbers, but the precision of flogs is very poor for very large numbers. Functions for addition, substraction, multiplication, etc, can easily be written.

For values that are between 0 and 1 and can be extremely close to 0 or extremely close to 1, a cloglog transformations can be used.

Another trick is to detect "hot points". Values that can be extremely close to hot points should be expressed as differences to the hot point, and the algorithm should be re-written to work with that, which is not always easy to do. For instance, the function log1p can be seen as a modification of the log function when the hot point is 1. 

In my experience, the algorithm should be rewritten before having to deal with denormals, because denormals expand the range of floating point values by a quite small amount.

-- 
Sincerely
Andr? GILLIBERT

From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue Jan  3 21:25:18 2023
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Tue, 3 Jan 2023 20:25:18 +0000
Subject: [Rd] R 4.2.2 on Haiku
Message-ID: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>

Hi all,

Not sure if this is of interest to anybody, but with the help of some kind folks over at the #haiku channel on IRC, I finally got the current version of R to compile under the Haiku operating system (https://www.haiku-os.org):

https://scholar.social/@wviechtb/109627078225954444

Kate (https://kate-editor.org) makes for a workable IDE allowing for REPL-like interactivity. X11 support is lacking, so graphs are directly created as pdfs, but this is workable.

In case you want to give this a try, it's pretty much this:

pkgman install gcc_fortran bzip2_devel lrzip_devel xz_utils_devel libpcre2_devel libiconv_devel curl_devel readline_devel tiff4_devel libtool ncurses6_devel libpaper_devel lapack_devel tcl_devel xcairo_devel pangomm_devel

wget https://cran.r-project.org/src/base/R-4/R-4.2.2.tar.gz

tar -xzf R-4.2.2.tar.gz
cd R-4.2.2

export CPPFLAGS="-D_BSD_SOURCE"
export LIBS="-lnetwork -lbsd"

./configure --with-x=no --disable-java --enable-R-shlib --prefix=/boot/home/<wherever>
make
make install

Best,
Wolfgang

-- 
Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and    
Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD    
Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com    


From yugong @end|ng |rom out|ook@com  Wed Jan  4 00:33:18 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Tue, 3 Jan 2023 23:33:18 +0000
Subject: [Rd] =?utf-8?b?5Zue5aSNOiBSIDQuMi4yIG9uIEhhaWt1?=
In-Reply-To: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>
References: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>
Message-ID: <TYAP286MB02688574948197B20FA609FDD1F49@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

thank you very much,  use R on haiku-os several times before. the OS is fast and eye-candy, just release beta 4 before new year.
when use R on haiku-os, some package will compiled failed(cairo for example) ,but most package work seamlessly.

btw, about R on haiku-os , Maybe you could create a git push on haikuports?
haikuports/dev-lang/r at master ? haikuports/haikuports (github.com)<https://github.com/haikuports/haikuports/tree/master/dev-lang/r>
?
[https://opengraph.githubassets.com/99315a64241d0f1906ef7bc8d4dab63cc45fb5bb90c51b40d0537e663fca4096/haikuports/haikuports]<https://github.com/haikuports/haikuports/tree/master/dev-lang/r>
haikuports/dev-lang/r at master ? haikuports/haikuports<https://github.com/haikuports/haikuports/tree/master/dev-lang/r>
Software ports for the Haiku operating system. Contribute to haikuports/haikuports development by creating an account on GitHub.
github.com



Yu Gong

________________________________
???: R-devel <r-devel-bounces at r-project.org> ?? Viechtbauer, Wolfgang (NP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
????: 2023?1?4? 4:25
???: R Devel List <r-devel at r-project.org>
??: [Rd] R 4.2.2 on Haiku

Hi all,

Not sure if this is of interest to anybody, but with the help of some kind folks over at the #haiku channel on IRC, I finally got the current version of R to compile under the Haiku operating system (https://www.haiku-os.org):

https://scholar.social/@wviechtb/109627078225954444

Kate (https://kate-editor.org) makes for a workable IDE allowing for REPL-like interactivity. X11 support is lacking, so graphs are directly created as pdfs, but this is workable.

In case you want to give this a try, it's pretty much this:

pkgman install gcc_fortran bzip2_devel lrzip_devel xz_utils_devel libpcre2_devel libiconv_devel curl_devel readline_devel tiff4_devel libtool ncurses6_devel libpaper_devel lapack_devel tcl_devel xcairo_devel pangomm_devel

wget https://cran.r-project.org/src/base/R-4/R-4.2.2.tar.gz

tar -xzf R-4.2.2.tar.gz
cd R-4.2.2

export CPPFLAGS="-D_BSD_SOURCE"
export LIBS="-lnetwork -lbsd"

./configure --with-x=no --disable-java --enable-R-shlib --prefix=/boot/home/<wherever>
make
make install

Best,
Wolfgang

--
Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and
Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD
Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Wed Jan  4 11:49:02 2023
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Wed, 4 Jan 2023 11:49:02 +0100
Subject: [Rd] new toolchain "RTools43" for building devel binaries (both R
 base and packages)
Message-ID: <284e50b3-eff2-e6b2-469d-312a83db8d33@statistik.tu-dortmund.de>

Dear developers,

for those building from source on Windows:

A new toolchain called "RTools43" has been prepared by Tomas Kalibera.
It is now used to build the Windows binaries (R base and contributed 
packages) for R-devel on Windows. See
<https://cran.r-project.org/bin/windows/Rtools/rtools43/rtools.html>.

Best,
Uwe Ligges


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Wed Jan  4 13:35:25 2023
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Wed, 4 Jan 2023 12:35:25 +0000
Subject: [Rd] Hash table plans
Message-ID: <2b4d0b5f-2ce6-7800-ffb2-41e4cdf0daee@hiddenelephants.co.uk>

I note in r-devel the hash table functionality is still marked as 
experimental. Is it expected that this will progress to non-experimental 
in 4.3 or is there a need for more feedback from the wider community first?

Tim


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan  5 21:19:16 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 5 Jan 2023 15:19:16 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
Message-ID: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>

I'm in the process of a fairly large overhaul of the exports from the 
rgl package, with an aim of simplifying maintenance of the package. 
During this work, I came across the reverse dependency geomorph that 
calls the rgl.primitive function.

I had forgotten that rgl.primitive was still exported:  I've been 
thinking of it as an internal function for a few years now.  I was 
surprised geomorph was able to call it.

Particularly surprising to me was the fact that it is not properly 
documented.  One of the help topics lists it as an alias, but it 
contains no usage info, and is not mentioned in the .Rd file other than 
the alias.  And yet "R CMD check rgl" has never complained about it.

Is this intentional?

Duncan Murdoch


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Fri Jan  6 04:10:42 2023
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Fri, 6 Jan 2023 08:40:42 +0530
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
Message-ID: <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>

On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> I'm in the process of a fairly large overhaul of the exports from the
> rgl package, with an aim of simplifying maintenance of the package.
> During this work, I came across the reverse dependency geomorph that
> calls the rgl.primitive function.
>
> I had forgotten that rgl.primitive was still exported:  I've been
> thinking of it as an internal function for a few years now.  I was
> surprised geomorph was able to call it.
>
> Particularly surprising to me was the fact that it is not properly
> documented.  One of the help topics lists it as an alias, but it
> contains no usage info, and is not mentioned in the .Rd file other than
> the alias.  And yet "R CMD check rgl" has never complained about it.
>
> Is this intentional?

Does the Rd file that documents it have \keyword{internal}? These are
not checked fully (as I realized recently while working on the help
system), and I guess that's intentional.

Best,
-Deepayan

>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From yugong @end|ng |rom out|ook@com  Fri Jan  6 05:24:43 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Fri, 6 Jan 2023 04:24:43 +0000
Subject: [Rd] patch about timezone name of China Standard Time  on windows
Message-ID: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Last week ,I report a issuse about  timezone name about" China Standard Time", R on windows will report to Asia/Taipei , but it should be Asia/Shanghai,
Since  still now  no feedback (maybe because for my poor english). So resubmit a patch about this .

Change it from Asia/Taipei to Asia/Shanghai could veryfied from
1  tzutil (this is windows buildin command  made by microsoft )  , run tzutil /l , it show  " China Standard Time" is (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi  (AKA Asia/Shanghai on linux)? and furthermore , tzutil /l also report   Taipei Standard Time (Asia/Taipei) , so Sys.timezone() report  " China Standard Time" to Asia/Taipei indeed uncorrect.

2  timezone and their definition on window could found on microsoft website
   https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-10

   in this document , it also show " China Standard Time" is (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi  (AKA Asia/Shanghai on linux) ,

3  also in unicode org web , the lastest document about time also support this patch
https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html

  China Standard Time   Asia/Shanghai

and in current R implemention , it report " China Standard Time" is incorrect ,but "Taipei Standard Time" is correct, so this patch only need modify " China Standard Time" and will not affect other timezone.

please feel free to share your thoughts or feedbacks of this patch

Index: src/extra/tzone/registryTZ.c
===================================================================
--- src/extra/tzone/registryTZ.c????(revision 83566)
+++ src/extra/tzone/registryTZ.c????(working copy)
@@ -51,7 +51,7 @@
     { L"Central Pacific Standard Time", "Pacific/Guadalcanal" },
     { L"Central Standard Time", "America/Chicago" },
     { L"Central Standard Time (Mexico)", "America/Mexico_City" },
-    { L"China Standard Time", "Asia/Taipei" },
+    { L"China Standard Time", "Asia/Shanghai" },
     { L"Dateline Standard Time", "Pacific/Kwajalein" },
     { L"E. Africa Standard Time", "Africa/Nairobi" },
     { L"E. Australia Standard Time", "Australia/Brisbane" },





Yu Gong




From kry|ov@r00t @end|ng |rom gm@||@com  Fri Jan  6 08:26:57 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 6 Jan 2023 10:26:57 +0300
Subject: [Rd] 
 patch about timezone name of China Standard Time  on windows
In-Reply-To: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <20230106102657.1085ecff@Tarkus>

Hello Yu Gong!

I'm not an R developer, but I hope I'll be able to help you with my
advice.

On Fri, 6 Jan 2023 04:24:43 +0000
gong yu <yugong at outlook.com> wrote:

> Last week ,I report a issuse about  timezone name about" China
> Standard Time", R on windows will report to Asia/Taipei , but it
> should be Asia/Shanghai, Since  still now  no feedback (maybe because
> for my poor english). So resubmit a patch about this .

Sometimes, everyone is too busy to discuss a patch right now, but a
patch just left on R-devel may be eventually forgotten before there's
time for discussion. Try asking for a Bugzilla account (by following
the guide at <https://www.r-project.org/bugs.html>) and submitting the
patch there.

> and in current R implemention , it report " China Standard Time" is
> incorrect ,but "Taipei Standard Time" is correct, so this patch only
> need modify " China Standard Time" and will not affect other timezone.

Thank you for verifying this. As far as I can tell, the file has always
contained both entries referring to "Asia/Taipei":
https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c

-- 
Best regards,
Ivan


From yugong @end|ng |rom out|ook@com  Fri Jan  6 10:17:54 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Fri, 6 Jan 2023 09:17:54 +0000
Subject: [Rd] =?gb2312?b?u9i4tDogIHBhdGNoIGFib3V0IHRpbWV6b25lIG5hbWUgb2Yg?=
 =?gb2312?b?Q2hpbmEgU3RhbmRhcmQgVGltZSAgb24gd2luZG93cw==?=
In-Reply-To: <20230106102657.1085ecff@Tarkus>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
Message-ID: <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Thanks Ivan!
I  really missed the information on   https://www.r-project.org/bugs.html .  Instead ,  browse https://bugs.r-project.org<https://bugs.r-project.org/> and didn't found where to registration and login, then send email to this list.
will send a email to bug-report-request at r-project.org.
for two  entries in  registryTZ.c<https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c>  , the China Standard Time is incorrect ,but Taipei Standard Tim is ok

Best regards,
Yu Gong



________________________________
??????: Ivan Krylov <krylov.r00t at gmail.com>
???????: 2023??1??6?? 15:26
?????: gong yu <yugong at outlook.com>
????: r-devel at r-project.org <r-devel at r-project.org>
????: Re: [Rd] patch about timezone name of China Standard Time on windows

Hello Yu Gong!

I'm not an R developer, but I hope I'll be able to help you with my
advice.

On Fri, 6 Jan 2023 04:24:43 +0000
gong yu <yugong at outlook.com> wrote:

> Last week ,I report a issuse about  timezone name about" China
> Standard Time", R on windows will report to Asia/Taipei , but it
> should be Asia/Shanghai, Since  still now  no feedback (maybe because
> for my poor english). So resubmit a patch about this .

Sometimes, everyone is too busy to discuss a patch right now, but a
patch just left on R-devel may be eventually forgotten before there's
time for discussion. Try asking for a Bugzilla account (by following
the guide at <https://www.r-project.org/bugs.html>) and submitting the
patch there.

> and in current R implemention , it report " China Standard Time" is
> incorrect ,but "Taipei Standard Time" is correct, so this patch only
> need modify " China Standard Time" and will not affect other timezone.

Thank you for verifying this. As far as I can tell, the file has always
contained both entries referring to "Asia/Taipei":
https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c

--
Best regards,
Ivan

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jan  6 10:47:48 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 6 Jan 2023 04:47:48 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
Message-ID: <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>

On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
> On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> I'm in the process of a fairly large overhaul of the exports from the
>> rgl package, with an aim of simplifying maintenance of the package.
>> During this work, I came across the reverse dependency geomorph that
>> calls the rgl.primitive function.
>>
>> I had forgotten that rgl.primitive was still exported:  I've been
>> thinking of it as an internal function for a few years now.  I was
>> surprised geomorph was able to call it.
>>
>> Particularly surprising to me was the fact that it is not properly
>> documented.  One of the help topics lists it as an alias, but it
>> contains no usage info, and is not mentioned in the .Rd file other than
>> the alias.  And yet "R CMD check rgl" has never complained about it.
>>
>> Is this intentional?
> 
> Does the Rd file that documents it have \keyword{internal}? These are
> not checked fully (as I realized recently while working on the help
> system), and I guess that's intentional.

No, not marked internal.  Here's a simple example:  a package that 
exports f and g, and has only one help page:

---------------------
NAMESPACE:
---------------------
export(f, g)
---------------------

---------------------
R/source.R:
---------------------
f <- function() "this is f"

g <- function() "this is g"
---------------------

---------------------
man/f.Rd:
---------------------
\name{f}
\alias{f}
\alias{g}
\title{
This is f.
}
\description{
This does nothing
}
\usage{
f()
}
---------------------


No complaints about the lack of documentation of g.

Duncan Murdoch


From kev|n@r@coombe@ @end|ng |rom gm@||@com  Fri Jan  6 11:25:19 2023
From: kev|n@r@coombe@ @end|ng |rom gm@||@com (Kevin Coombes)
Date: Fri, 6 Jan 2023 05:25:19 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
 <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
Message-ID: <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>

I am fairly certain that the check for documentation is really just a check
for the presence of the function name in an "alias" line. My circumstantial
evidence, from a package in the early stages of development, came from
changing the name of a function. I updated everything else (usage,
examples, etc.) but forgot to change the alias. Got a warning that the
newly named function was not documented. It took me a while to figure out
why R CMD check was still complaining.

I am also pretty sure that, when looking for help in at least one existing
package (can't remember which one), I clicked on the link and got sent to a
page that said absolutely nothing about the function I was interested in.

On Fri, Jan 6, 2023, 4:48 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
> > On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> >>
> >> I'm in the process of a fairly large overhaul of the exports from the
> >> rgl package, with an aim of simplifying maintenance of the package.
> >> During this work, I came across the reverse dependency geomorph that
> >> calls the rgl.primitive function.
> >>
> >> I had forgotten that rgl.primitive was still exported:  I've been
> >> thinking of it as an internal function for a few years now.  I was
> >> surprised geomorph was able to call it.
> >>
> >> Particularly surprising to me was the fact that it is not properly
> >> documented.  One of the help topics lists it as an alias, but it
> >> contains no usage info, and is not mentioned in the .Rd file other than
> >> the alias.  And yet "R CMD check rgl" has never complained about it.
> >>
> >> Is this intentional?
> >
> > Does the Rd file that documents it have \keyword{internal}? These are
> > not checked fully (as I realized recently while working on the help
> > system), and I guess that's intentional.
>
> No, not marked internal.  Here's a simple example:  a package that
> exports f and g, and has only one help page:
>
> ---------------------
> NAMESPACE:
> ---------------------
> export(f, g)
> ---------------------
>
> ---------------------
> R/source.R:
> ---------------------
> f <- function() "this is f"
>
> g <- function() "this is g"
> ---------------------
>
> ---------------------
> man/f.Rd:
> ---------------------
> \name{f}
> \alias{f}
> \alias{g}
> \title{
> This is f.
> }
> \description{
> This does nothing
> }
> \usage{
> f()
> }
> ---------------------
>
>
> No complaints about the lack of documentation of g.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jan  6 11:57:58 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 6 Jan 2023 05:57:58 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
 <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
 <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>
Message-ID: <d5fb9c50-52b6-8e30-3e8c-df56f842b2c2@gmail.com>

On 06/01/2023 5:25 a.m., Kevin Coombes wrote:
> I am fairly certain that the check for documentation is really just a 
> check for the presence of the function name in an "alias" line. 

Yes, that's what the test does, and that's fine.  The problem is with 
the usage test in tools::codoc().  If I had incorrect arguments 
specified for a documented function, I'd be warned.  If I skip the usage 
docs completely, I am not warned.	

I think the test belongs around here in the source:

https://github.com/r-devel/r-svn/blob/b57918fd104962415a752ea7db12dcf4f3f5219f/src/library/tools/R/QC.R#L585

If you look there, you see a variable named 
"functions_in_usages_not_in_code" but nothing named 
"functions_in_code_not_in_usages".

Duncan Murdoch


My
> circumstantial evidence, from a package in the early stages of 
> development, came from changing the name of a function. I updated 
> everything else (usage, examples, etc.) but forgot to change the alias. 
> Got a warning that the newly named function was not documented. It took 
> me a while to figure out why R CMD check was still complaining.
> 
> I am also pretty sure that, when looking for help in at least one 
> existing package (can't remember which one), I clicked on the link and 
> got sent to a page that said absolutely nothing about the function I was 
> interested?in.
> 
> On Fri, Jan 6, 2023, 4:48 AM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
>      > On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch
>     <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>> wrote:
>      >>
>      >> I'm in the process of a fairly large overhaul of the exports
>     from the
>      >> rgl package, with an aim of simplifying maintenance of the package.
>      >> During this work, I came across the reverse dependency geomorph that
>      >> calls the rgl.primitive function.
>      >>
>      >> I had forgotten that rgl.primitive was still exported:? I've been
>      >> thinking of it as an internal function for a few years now.? I was
>      >> surprised geomorph was able to call it.
>      >>
>      >> Particularly surprising to me was the fact that it is not properly
>      >> documented.? One of the help topics lists it as an alias, but it
>      >> contains no usage info, and is not mentioned in the .Rd file
>     other than
>      >> the alias.? And yet "R CMD check rgl" has never complained about it.
>      >>
>      >> Is this intentional?
>      >
>      > Does the Rd file that documents it have \keyword{internal}? These are
>      > not checked fully (as I realized recently while working on the help
>      > system), and I guess that's intentional.
> 
>     No, not marked internal.? Here's a simple example:? a package that
>     exports f and g, and has only one help page:
> 
>     ---------------------
>     NAMESPACE:
>     ---------------------
>     export(f, g)
>     ---------------------
> 
>     ---------------------
>     R/source.R:
>     ---------------------
>     f <- function() "this is f"
> 
>     g <- function() "this is g"
>     ---------------------
> 
>     ---------------------
>     man/f.Rd:
>     ---------------------
>     \name{f}
>     \alias{f}
>     \alias{g}
>     \title{
>     This is f.
>     }
>     \description{
>     This does nothing
>     }
>     \usage{
>     f()
>     }
>     ---------------------
> 
> 
>     No complaints about the lack of documentation of g.
> 
>     Duncan Murdoch
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jan  6 23:36:04 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 7 Jan 2023 11:36:04 +1300
Subject: [Rd] 
 patch about timezone name of China Standard Time  on windows
In-Reply-To: <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>

Just a quick comment here - this is not as easy as it sounds, because the code is in the "extra" directory which means it is based on upstream sources, so those sources are typically not patched manually as it would be hard to apply upstream updates. In this case the standards have changed since the last update, so the way to go about this would be to upgrade according to latest sources and standards as it's quite possible that the issue has been addressed there. However, such update is quite time-consuming process as we have to make sure that the standards are matched and changes have not broken something in R. So you can file an issue so this is on record, but I wouldn't include patches since they cannot be applied directly for reasons explained as it has to be done as a part of the full update, not just a single entry.

Cheers,
Simon


> On Jan 6, 2023, at 10:17 PM, gong yu <yugong at outlook.com> wrote:
> 
> Thanks Ivan!
> I  really missed the information on   https://www.r-project.org/bugs.html .  Instead ,  browse https://bugs.r-project.org<https://bugs.r-project.org/> and didn't found where to registration and login, then send email to this list.
> will send a email to bug-report-request at r-project.org.
> for two  entries in  registryTZ.c<https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c>  , the China Standard Time is incorrect ,but Taipei Standard Tim is ok
> 
> Best regards,
> Yu Gong
> 
> 
> 
> ________________________________
> ???: Ivan Krylov <krylov.r00t at gmail.com>
> ????: 2023?1?6? 15:26
> ???: gong yu <yugong at outlook.com>
> ??: r-devel at r-project.org <r-devel at r-project.org>
> ??: Re: [Rd] patch about timezone name of China Standard Time on windows
> 
> Hello Yu Gong!
> 
> I'm not an R developer, but I hope I'll be able to help you with my
> advice.
> 
> On Fri, 6 Jan 2023 04:24:43 +0000
> gong yu <yugong at outlook.com> wrote:
> 
>> Last week ,I report a issuse about  timezone name about" China
>> Standard Time", R on windows will report to Asia/Taipei , but it
>> should be Asia/Shanghai, Since  still now  no feedback (maybe because
>> for my poor english). So resubmit a patch about this .
> 
> Sometimes, everyone is too busy to discuss a patch right now, but a
> patch just left on R-devel may be eventually forgotten before there's
> time for discussion. Try asking for a Bugzilla account (by following
> the guide at <https://www.r-project.org/bugs.html>) and submitting the
> patch there.
> 
>> and in current R implemention , it report " China Standard Time" is
>> incorrect ,but "Taipei Standard Time" is correct, so this patch only
>> need modify " China Standard Time" and will not affect other timezone.
> 
> Thank you for verifying this. As far as I can tell, the file has always
> contained both entries referring to "Asia/Taipei":
> https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c
> 
> --
> Best regards,
> Ivan
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From yugong @end|ng |rom out|ook@com  Sat Jan  7 01:17:23 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Sat, 7 Jan 2023 00:17:23 +0000
Subject: [Rd] =?gb2312?b?tPC4tDogIHBhdGNoIGFib3V0IHRpbWV6b25lIG5hbWUgb2Yg?=
 =?gb2312?b?Q2hpbmEgU3RhbmRhcmQgVGltZSAgb24gd2luZG93cw==?=
In-Reply-To: <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
Message-ID: <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

understand your concerns.
for registerTZ.c itself , IMHO , the most important part is the definition of tztable[] .  which come form http://unicode.org/cldr/data/diff/supplemental/windows_tzid.html ,but it can??t access now, the lasted version is https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html.

maybe  we need write a script  or small tools  , use it sync with unicode standard and microsoft registery or tzutil , to generate tztable definition?
will this better than current way? if it is i
will try it in next 1-2 weeks.

best regards
Yu Gong
________________________________
??????: Simon Urbanek <simon.urbanek at R-project.org>
???????: 2023??1??7?? 6:36
?????: gong yu <yugong at outlook.com>
????: Ivan Krylov <krylov.r00t at gmail.com>; r-devel at r-project.org <r-devel at r-project.org>
????: Re: [Rd] patch about timezone name of China Standard Time on windows

Just a quick comment here - this is not as easy as it sounds, because the code is in the "extra" directory which means it is based on upstream sources, so those sources are typically not patched manually as it would be hard to apply upstream updates. In this case the standards have changed since the last update, so the way to go about this would be to upgrade according to latest sources and standards as it's quite possible that the issue has been addressed there. However, such update is quite time-consuming process as we have to make sure that the standards are matched and changes have not broken something in R. So you can file an issue so this is on record, but I wouldn't include patches since they cannot be applied directly for reasons explained as it has to be done as a part of the full update, not just a single entry.

Cheers,
Simon


> On Jan 6, 2023, at 10:17 PM, gong yu <yugong at outlook.com> wrote:
>
> Thanks Ivan!
> I  really missed the information on   https://www.r-project.org/bugs.html .  Instead ,  browse [https://bugs.r-project.org<https://bugs.r-project.org/>]https://bugs.r-project.org<https://bugs.r-project.org/> and didn't found where to registration and login, then send email to this list.
> will send a email to bug-report-request at r-project.org.
> for two  entries in  registryTZ.c<https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c>  , the China Standard Time is incorrect ,but Taipei Standard Tim is ok
>
> Best regards,
> Yu Gong
>
>
>
> ________________________________
> ??????: Ivan Krylov <krylov.r00t at gmail.com>
> ???????: 2023??1??6?? 15:26
> ?????: gong yu <yugong at outlook.com>
> ????: r-devel at r-project.org <r-devel at r-project.org>
> ????: Re: [Rd] patch about timezone name of China Standard Time on windows
>
> Hello Yu Gong!
>
> I'm not an R developer, but I hope I'll be able to help you with my
> advice.
>
> On Fri, 6 Jan 2023 04:24:43 +0000
> gong yu <yugong at outlook.com> wrote:
>
>> Last week ,I report a issuse about  timezone name about" China
>> Standard Time", R on windows will report to Asia/Taipei , but it
>> should be Asia/Shanghai, Since  still now  no feedback (maybe because
>> for my poor english). So resubmit a patch about this .
>
> Sometimes, everyone is too busy to discuss a patch right now, but a
> patch just left on R-devel may be eventually forgotten before there's
> time for discussion. Try asking for a Bugzilla account (by following
> the guide at <https://www.r-project.org/bugs.html>) and submitting the
> patch there.
>
>> and in current R implemention , it report " China Standard Time" is
>> incorrect ,but "Taipei Standard Time" is correct, so this patch only
>> need modify " China Standard Time" and will not affect other timezone.
>
> Thank you for verifying this. As far as I can tell, the file has always
> contained both entries referring to "Asia/Taipei":
> https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c
>
> --
> Best regards,
> Ivan
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From @ndre_m|ku|ec @end|ng |rom hotm@||@com  Sun Jan  8 06:12:33 2023
From: @ndre_m|ku|ec @end|ng |rom hotm@||@com (Andre Mikulec)
Date: Sun, 8 Jan 2023 05:12:33 +0000
Subject: [Rd] Looking for R for Windows (rversion: 4.2.2) in
 base/old/%rversion%/R-%rversion%-win.exe
Message-ID: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>

Peter Dalgaard, R-devel team, et al.,

Hi, my name is Andre Mikulec.

I am an `common` committer to Postgres PL/R . . .
https://github.com/postgres-plr/plr/commits?author=AndreMikulec

https://github.com/postgres-plr/plr
`PL/R - PostgreSQL support for R as a procedural language (PL)`

However, now and different from the past,
the `windows/base/old` R 4.2.2 download location URL link now, redirects to the wrong `R 4.2.1` location.

Historically,
Previous and Current(still called `old`) Windows versions of R
have been stored here (below) and the current(old) version of R would have been 4.2.2. and would have pointed to R 4.2.2.

https://cran.r-project.org/bin/windows/base/old/

```
In this directory (and its URL redirect (->)):
R 4.2.2 (October, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1 (NEED 4.2.2)
R 4.2.1 (June, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1/
```

So, something has changed `R 4.2.2 (October, 2022)` now redirects to `base/old/4.2.1`.

Now and in the past, Appveyor builds of PL/R rely a specific version of R in an exact location:

https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L25
```
 - pg: REL_15_0
    PlatformToolset: v141
    configuration: Release
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.2.1
```

Notice (above and) below the variable `rversion: 4.2.1`
and the hard coded location `base/old/%rversion%/R-%rversion%-win.exe`.

https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L108
```
- if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
```

E.g. the most recent PL/R build (a month ago) using R 4.2.1
`PL/R - PostgreSQL support for R as a procedural language (PL)` build:

https://ci.appveyor.com/project/davecramer/plr-daun5/build/job/7lqs9pkgartjhxwt?fullLog=true#L15
```
Cache 'R-4.2.1-win.exe' - Restored
Running Install scripts
if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
R-%rversion%-win.exe /VERYSILENT
```

Now, where may One find a `specific version of R in an exact location`?

Please help.

Thanks,
Andre Mikulec


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Sun Jan  8 15:23:08 2023
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sun, 8 Jan 2023 15:23:08 +0100
Subject: [Rd] Looking for R for Windows (rversion: 4.2.2) in
 base/old/%rversion%/R-%rversion%-win.exe
In-Reply-To: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>
References: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>
Message-ID: <F8C5E820-C561-4311-AAB1-5C89E7816C6E@gmail.com>

Dunno what happened there, and Win binaries are generally "not my table". However, 4.2.2 is not old, so possibly should not be on that list at all. It is the current version, so can be obtained via the "here" link at the top of the page (i.e. https://cran.r-project.org/bin/windows/base/)

-pd

> On 8 Jan 2023, at 06:12 , Andre Mikulec <andre_mikulec at hotmail.com> wrote:
> 
> Peter Dalgaard, R-devel team, et al.,
> 
> Hi, my name is Andre Mikulec.
> 
> I am an `common` committer to Postgres PL/R . . .
> https://github.com/postgres-plr/plr/commits?author=AndreMikulec
> 
> https://github.com/postgres-plr/plr
> `PL/R - PostgreSQL support for R as a procedural language (PL)`
> 
> However, now and different from the past,
> the `windows/base/old` R 4.2.2 download location URL link now, redirects to the wrong `R 4.2.1` location.
> 
> Historically,
> Previous and Current(still called `old`) Windows versions of R
> have been stored here (below) and the current(old) version of R would have been 4.2.2. and would have pointed to R 4.2.2.
> 
> https://cran.r-project.org/bin/windows/base/old/
> 
> ```
> In this directory (and its URL redirect (->)):
> R 4.2.2 (October, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1 (NEED 4.2.2)
> R 4.2.1 (June, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1/
> ```
> 
> So, something has changed `R 4.2.2 (October, 2022)` now redirects to `base/old/4.2.1`.
> 
> Now and in the past, Appveyor builds of PL/R rely a specific version of R in an exact location:
> 
> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L25
> ```
> - pg: REL_15_0
>    PlatformToolset: v141
>    configuration: Release
>    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
>    rversion: 4.2.1
> ```
> 
> Notice (above and) below the variable `rversion: 4.2.1`
> and the hard coded location `base/old/%rversion%/R-%rversion%-win.exe`.
> 
> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L108
> ```
> - if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
> ```
> 
> E.g. the most recent PL/R build (a month ago) using R 4.2.1
> `PL/R - PostgreSQL support for R as a procedural language (PL)` build:
> 
> https://ci.appveyor.com/project/davecramer/plr-daun5/build/job/7lqs9pkgartjhxwt?fullLog=true#L15
> ```
> Cache 'R-4.2.1-win.exe' - Restored
> Running Install scripts
> if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
> R-%rversion%-win.exe /VERYSILENT
> ```
> 
> Now, where may One find a `specific version of R in an exact location`?
> 
> Please help.
> 
> Thanks,
> Andre Mikulec
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Sun Jan  8 18:55:09 2023
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Sun, 8 Jan 2023 18:55:09 +0100
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <d5fb9c50-52b6-8e30-3e8c-df56f842b2c2@gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
 <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
 <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>
 <d5fb9c50-52b6-8e30-3e8c-df56f842b2c2@gmail.com>
Message-ID: <25531.893.594105.806583@hornik.net>

>>>>> Duncan Murdoch writes:

> On 06/01/2023 5:25 a.m., Kevin Coombes wrote:
>> I am fairly certain that the check for documentation is really just a 
>> check for the presence of the function name in an "alias" line. 

> Yes, that's what the test does, and that's fine.  The problem is with
> the usage test in tools::codoc().  If I had incorrect arguments
> specified for a documented function, I'd be warned.  If I skip the
> usage docs completely, I am not warned.

> I think the test belongs around here in the source:

> https://github.com/r-devel/r-svn/blob/b57918fd104962415a752ea7db12dcf4f3f5219f/src/library/tools/R/QC.R#L585

> If you look there, you see a variable named 
> "functions_in_usages_not_in_code" but nothing named 
> "functions_in_code_not_in_usages".

Actually, IIuc the infrastructure is there, but it is not used.
print.codoc() has

    ## In general, functions in the code which only have an \alias but
    ## no \usage entry are not necessarily a problem---they might be
    ## mentioned in other parts of the Rd object documenting them, or be
    ## 'internal'.  However, if a package has a namespace, then all
    ## *exported* functions should have \usage entries (apart from
    ## defunct functions and S4 generics, see the above comments for
    ## functions_missing_from_usages).  Currently, this information is
    ## returned in the codoc object but not shown.  Eventually, we might
    ## add something like
    ##     functions_missing_from_usages <-
    ##         attr(x, "functions_missing_from_usages")
    ##     if(length(functions_missing_from_usages)) {
    ##         writeLines("Exported functions without usage information:")
    ##         .pretty_print(functions_in_code_not_in_usages)
    ##         writeLines("")
    ##     }
    ## similar to the above.

which goes back to sometimes 2009 ...

Best
-k

> Duncan Murdoch


> My
>> circumstantial evidence, from a package in the early stages of 
>> development, came from changing the name of a function. I updated 
>> everything else (usage, examples, etc.) but forgot to change the alias. 
>> Got a warning that the newly named function was not documented. It took 
>> me a while to figure out why R CMD check was still complaining.
>> 
>> I am also pretty sure that, when looking for help in at least one 
>> existing package (can't remember which one), I clicked on the link and 
>> got sent to a page that said absolutely nothing about the function I was 
>> interested?in.
>> 
>> On Fri, Jan 6, 2023, 4:48 AM Duncan Murdoch <murdoch.duncan at gmail.com 
>> <mailto:murdoch.duncan at gmail.com>> wrote:
>> 
>> On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
>> > On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch
>> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>> wrote:
>> >>
>> >> I'm in the process of a fairly large overhaul of the exports
>> from the
>> >> rgl package, with an aim of simplifying maintenance of the package.
>> >> During this work, I came across the reverse dependency geomorph that
>> >> calls the rgl.primitive function.
>> >>
>> >> I had forgotten that rgl.primitive was still exported:? I've been
>> >> thinking of it as an internal function for a few years now.? I was
>> >> surprised geomorph was able to call it.
>> >>
>> >> Particularly surprising to me was the fact that it is not properly
>> >> documented.? One of the help topics lists it as an alias, but it
>> >> contains no usage info, and is not mentioned in the .Rd file
>> other than
>> >> the alias.? And yet "R CMD check rgl" has never complained about it.
>> >>
>> >> Is this intentional?
>> >
>> > Does the Rd file that documents it have \keyword{internal}? These are
>> > not checked fully (as I realized recently while working on the help
>> > system), and I guess that's intentional.
>> 
>> No, not marked internal.? Here's a simple example:? a package that
>> exports f and g, and has only one help page:
>> 
>> ---------------------
>> NAMESPACE:
>> ---------------------
>> export(f, g)
>> ---------------------
>> 
>> ---------------------
>> R/source.R:
>> ---------------------
>> f <- function() "this is f"
>> 
>> g <- function() "this is g"
>> ---------------------
>> 
>> ---------------------
>> man/f.Rd:
>> ---------------------
>> \name{f}
>> \alias{f}
>> \alias{g}
>> \title{
>> This is f.
>> }
>> \description{
>> This does nothing
>> }
>> \usage{
>> f()
>> }
>> ---------------------
>> 
>> 
>> No complaints about the lack of documentation of g.
>> 
>> Duncan Murdoch
>> 
>> ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> 

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Jan  8 22:56:06 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 9 Jan 2023 10:56:06 +1300
Subject: [Rd] 
 patch about timezone name of China Standard Time  on windows
In-Reply-To: <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
 <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <2D259F9A-6E37-44D9-A04C-66945AB6D0C2@R-project.org>



> On 7/01/2023, at 1:17 PM, gong yu <yugong at outlook.com> wrote:
> 
> understand your concerns.
> for registerTZ.c itself , IMHO , the most important part is the definition of tztable[] .  which come form http://unicode.org/cldr/data/diff/supplemental/windows_tzid.html ,but it can?t access now, the lasted version is https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html.
> 
> maybe  we need write a script  or small tools  , use it sync with unicode standard and microsoft registery or tzutil , to generate tztable definition?
> will this better than current way? if it is i will try it in next 1-2 weeks.
> 

I'm not sure how simple it would be to script this since others have been working on this, but if it was doable it would be a good start. There are others that know more about CLDR than I do.

Cheers,
Simon


From yugong @end|ng |rom out|ook@com  Mon Jan  9 00:58:12 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Sun, 8 Jan 2023 23:58:12 +0000
Subject: [Rd] =?gb2312?b?tPC4tDogIHBhdGNoIGFib3V0IHRpbWV6b25lIG5hbWUgb2Yg?=
 =?gb2312?b?Q2hpbmEgU3RhbmRhcmQgVGltZSAgb24gd2luZG93cw==?=
In-Reply-To: <2D259F9A-6E37-44D9-A04C-66945AB6D0C2@R-project.org>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
 <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <2D259F9A-6E37-44D9-A04C-66945AB6D0C2@R-project.org>
Message-ID: <TYAP286MB02683F259B66677CDD168AA8D1F99@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Search and read some information about windows timezone to Linux timezone mapping this week.
 And found an .net library implement this, https://github.com/mattjohnsonpint/TimeZoneConverter . Question is how to use it?
________________________________
??????: Simon Urbanek <simon.urbanek at R-project.org>
???????: 2023??1??9?? 5:56
?????: gong yu <yugong at outlook.com>
????: r-devel at r-project.org <r-devel at r-project.org>
????: Re: [Rd] patch about timezone name of China Standard Time on windows



> On 7/01/2023, at 1:17 PM, gong yu <yugong at outlook.com> wrote:
>
> understand your concerns.
> for registerTZ.c itself , IMHO , the most important part is the definition of tztable[] .  which come form http://unicode.org/cldr/data/diff/supplemental/windows_tzid.html ,but it can??t access now, the lasted version is https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html.
>
> maybe  we need write a script  or small tools  , use it sync with unicode standard and microsoft registery or tzutil , to generate tztable definition?
> will this better than current way? if it is i will try it in next 1-2 weeks.
>

I'm not sure how simple it would be to script this since others have been working on this, but if it was doable it would be a good start. There are others that know more about CLDR than I do.

Cheers,
Simon


	[[alternative HTML version deleted]]


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Mon Jan  9 09:32:20 2023
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Mon, 9 Jan 2023 09:32:20 +0100
Subject: [Rd] Looking for R for Windows (rversion: 4.2.2) in
 base/old/%rversion%/R-%rversion%-win.exe
In-Reply-To: <F8C5E820-C561-4311-AAB1-5C89E7816C6E@gmail.com>
References: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>
 <F8C5E820-C561-4311-AAB1-5C89E7816C6E@gmail.com>
Message-ID: <bca05ca7-c840-5943-bbce-5b5f4fa1f51f@statistik.tu-dortmund.de>



On 08.01.2023 15:23, Peter Dalgaard wrote:
> Dunno what happened there, and Win binaries are generally "not my table". However, 4.2.2 is not old, so possibly should not be on that list at all. It is the current version, so can be obtained via the "here" link at the top of the page (i.e. https://cran.r-project.org/bin/windows/base/)

Thanks, fixed on my end, will be synced to CRAN during the next run.

Best,
Uwe



> -pd
> 
>> On 8 Jan 2023, at 06:12 , Andre Mikulec <andre_mikulec at hotmail.com> wrote:
>>
>> Peter Dalgaard, R-devel team, et al.,
>>
>> Hi, my name is Andre Mikulec.
>>
>> I am an `common` committer to Postgres PL/R . . .
>> https://github.com/postgres-plr/plr/commits?author=AndreMikulec
>>
>> https://github.com/postgres-plr/plr
>> `PL/R - PostgreSQL support for R as a procedural language (PL)`
>>
>> However, now and different from the past,
>> the `windows/base/old` R 4.2.2 download location URL link now, redirects to the wrong `R 4.2.1` location.
>>
>> Historically,
>> Previous and Current(still called `old`) Windows versions of R
>> have been stored here (below) and the current(old) version of R would have been 4.2.2. and would have pointed to R 4.2.2.
>>
>> https://cran.r-project.org/bin/windows/base/old/
>>
>> ```
>> In this directory (and its URL redirect (->)):
>> R 4.2.2 (October, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1 (NEED 4.2.2)
>> R 4.2.1 (June, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1/
>> ```
>>
>> So, something has changed `R 4.2.2 (October, 2022)` now redirects to `base/old/4.2.1`.
>>
>> Now and in the past, Appveyor builds of PL/R rely a specific version of R in an exact location:
>>
>> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L25
>> ```
>> - pg: REL_15_0
>>     PlatformToolset: v141
>>     configuration: Release
>>     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
>>     rversion: 4.2.1
>> ```
>>
>> Notice (above and) below the variable `rversion: 4.2.1`
>> and the hard coded location `base/old/%rversion%/R-%rversion%-win.exe`.
>>
>> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L108
>> ```
>> - if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
>> ```
>>
>> E.g. the most recent PL/R build (a month ago) using R 4.2.1
>> `PL/R - PostgreSQL support for R as a procedural language (PL)` build:
>>
>> https://ci.appveyor.com/project/davecramer/plr-daun5/build/job/7lqs9pkgartjhxwt?fullLog=true#L15
>> ```
>> Cache 'R-4.2.1-win.exe' - Restored
>> Running Install scripts
>> if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
>> R-%rversion%-win.exe /VERYSILENT
>> ```
>>
>> Now, where may One find a `specific version of R in an exact location`?
>>
>> Please help.
>>
>> Thanks,
>> Andre Mikulec
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Jan  9 09:37:25 2023
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Mon, 9 Jan 2023 08:37:25 +0000
Subject: [Rd] R 4.2.2 on Haiku
In-Reply-To: <TYAP286MB02688574948197B20FA609FDD1F49@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>
 <TYAP286MB02688574948197B20FA609FDD1F49@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <059246cbfff949ec92cae5d9d7d47b36@UM-MAIL3214.unimaas.nl>

Dear Yu Gong,

Happy to hear that there are others out there trying to use R under Haiku.

Getting packages to compile is a bit hit and miss. Pure R packages are easy, but yes, some packages will fail.

As for haikuports, an updated port is being worked on:

https://github.com/haikuports/haikuports/blob/master/dev-lang/r/r-4.2.2.recipe

Best,
Wolfgang

>-----Original Message-----
>From: gong yu [mailto:yugong at outlook.com]
>Sent: Wednesday, 04 January, 2023 0:33
>To: Viechtbauer, Wolfgang (NP); R Devel List
>Subject: ??: R 4.2.2 on Haiku
>
>thank you very much,??use R on haiku-os?several times before.?the OS is fast and
>eye-candy, just release beta 4 before new year.
>when use R on haiku-os, some package will compiled failed(cairo for example) ,but
>most package work seamlessly.
>
>btw, about R on haiku-os , Maybe you could create a git push on haikuports?
>haikuports/dev-lang/r at master ? haikuports/haikuports (github.com)
>?
>
>haikuports/dev-lang/r at master ? haikuports/haikuports
>Software ports for the Haiku operating system. Contribute to
>haikuports/haikuports development by creating an account on GitHub.
>github.com
>
>Yu Gong
>
>________________________________________
>???: R-devel <r-devel-bounces at r-project.org> ?? Viechtbauer, Wolfgang (NP)
><wolfgang.viechtbauer at maastrichtuniversity.nl>
>????: 2023?1?4? 4:25
>???: R Devel List <r-devel at r-project.org>
>??: [Rd] R 4.2.2 on Haiku
>
>Hi all,
>
>Not sure if this is of interest to anybody, but with the help of some kind folks
>over at the #haiku channel on IRC, I finally got the current version of R to
>compile under the Haiku operating system (https://www.haiku-os.org):
>
>https://scholar.social/@wviechtb/109627078225954444
>
>Kate (https://kate-editor.org) makes for a workable IDE allowing for REPL-like
>interactivity. X11 support is lacking, so graphs are directly created as pdfs,
>but this is workable.
>
>In case you want to give this a try, it's pretty much this:
>
>pkgman install gcc_fortran bzip2_devel lrzip_devel xz_utils_devel libpcre2_devel
>libiconv_devel curl_devel readline_devel tiff4_devel libtool ncurses6_devel
>libpaper_devel lapack_devel tcl_devel xcairo_devel pangomm_devel
>
>wget https://cran.r-project.org/src/base/R-4/R-4.2.2.tar.gz
>
>tar -xzf R-4.2.2.tar.gz
>cd R-4.2.2
>
>export CPPFLAGS="-D_BSD_SOURCE"
>export LIBS="-lnetwork -lbsd"
>
>./configure --with-x=no --disable-java --enable-R-shlib --
>prefix=/boot/home/<wherever>
>make
>make install
>
>Best,
>Wolfgang
>
>--
>Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and
>Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD
>Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com

From ch|r|com @end|ng |rom goog|e@com  Mon Jan  9 21:25:46 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Mon, 9 Jan 2023 12:25:46 -0800
Subject: [Rd] Shouldn't "Loading" be "Attaching" when referring to library()
 calls?
Message-ID: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>

require() and library() both emit this message immediately before
running library():

"Loading required package: %s"

https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L967-L968

https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L684-L685

Shouldn't "Loading" be "Attaching" instead?

My understanding is "a package is loaded" is equivalent to
"isNamespaceLoaded()", i.e., loadNamespace() was run. And that "a
package is attached" is equivalent to "pkg %in% .packages()", i.e.,
library(pkg) was run.

Is the terminology not so precise?

There's certainly ambiguity in the internal variable names referenced
above -- in require, we see

loaded <- paste0("package:", package) %in% search()
https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L680

Whereas in library() [via .getRequiredPackages2()] we see

attached <- paste0("package:", pkg) %in% search()
https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L931

Mike C


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 10 10:26:53 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 10 Jan 2023 10:26:53 +0100
Subject: [Rd] 
 Shouldn't "Loading" be "Attaching" when referring to library()
 calls?
In-Reply-To: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>
References: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>
Message-ID: <25533.12125.780136.352115@stat.math.ethz.ch>

>>>>> Michael Chirico via R-devel 
>>>>>     on Mon, 9 Jan 2023 12:25:46 -0800 writes:

    > require() and library() both emit this message immediately before
    > running library():

    > "Loading required package: %s"

    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L967-L968

    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L684-L685

    > Shouldn't "Loading" be "Attaching" instead?

Good question... I had asked myself as well a couple of times.

The vagueness is mostly "historical" in the sense that
originally R (nor S) had namespaces.
OTOH,  attach(.)  has always worked for data frames (already in pre-R S).

Still, I agree (when teaching and otherwise), we should
clearly distinguish the two notably in the context of packages
and their namespaces.


    > My understanding is "a package is loaded" is equivalent to
    > "isNamespaceLoaded()", i.e., loadNamespace() was run. And that "a
    > package is attached" is equivalent to "pkg %in% .packages()", i.e.,
    > library(pkg) was run.

or (easier for teaching)  that  "package:<pkg>" %in% search()
-- which is what .packages() does {by default}.

I agree with the above.


    > Is the terminology not so precise?

    > There's certainly ambiguity in the internal variable names referenced
    > above -- in require, we see

    > loaded <- paste0("package:", package) %in% search()
    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L680

again, historical:  require() exists for considerably longer
than namespaces.

I think we should at least change the message printed by
require() and library() you mentioned above.

Martin


    > Whereas in library() [via .getRequiredPackages2()] we see

    > attached <- paste0("package:", pkg) %in% search()
    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L931

    > Mike C


From y@nn@r|chet @end|ng |rom |r@n@|r  Tue Jan 10 10:44:11 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Tue, 10 Jan 2023 09:44:11 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
Message-ID: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>

Dear R-devel people,

We are working to submit a package which is mainly a binding over a C++ lib (https://github.com/libKriging) using armadillo.
It is _not_ a standard RcppArmadillo package, because we also had to provide a python binding... so there is a huge layer of cmake & scripting to make it work with a standard armadillo (but using same version that RcppArmadillo).
It seems now working with almost all CRAN targets, but a problem remains with fedora (clang & gcc) devel.

Our issue is that the rhub docker is not well sync with the CRAN fedora-clang-devel config:
- failing on CRAN (without clear reason): https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html
- passing on rhub: https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc7562726497af7c678ab41f4dea

So we cannot investigate and fix the problem.

Note that we did quite strange things with the fedora platforms: include explicitely slapack to provide simple precision for our (vanilla) armadillo... 

Do you have any idea, or even known problem in mind, that could be related to this ?

Best regards,

--
Dr. Yann Richet
Institute for Radiological Protection and Nuclear Safety (https://www.irsn.fr), 
  Department of Characterization of Natural Unexpected Events and Sites
Office?: +33 1 58 35 88 84


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 10 11:31:40 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 10 Jan 2023 11:31:40 +0100
Subject: [Rd] 
 Shouldn't "Loading" be "Attaching" when referring to library()
 calls?
In-Reply-To: <25533.12125.780136.352115@stat.math.ethz.ch>
References: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>
 <25533.12125.780136.352115@stat.math.ethz.ch>
Message-ID: <25533.16012.558065.724821@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Tue, 10 Jan 2023 10:26:53 +0100 writes:

>>>>> Michael Chirico via R-devel 
>>>>>     on Mon, 9 Jan 2023 12:25:46 -0800 writes:

    >> require() and library() both emit this message immediately before
    >> running library():

    >> "Loading required package: %s"

    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L967-L968

    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L684-L685

    >> Shouldn't "Loading" be "Attaching" instead?

    > Good question... I had asked myself as well a couple of times.

    > The vagueness is mostly "historical" in the sense that
    > originally R (nor S) had namespaces.

Oops!  If you skip the "( .. )" above it's 100% wrong.
Correct (I hope even according Oxford Dictionary) is

" Originally, neither R nor S had namespaces. "



    > OTOH,  attach(.)  has always worked for data frames (already in pre-R S).

    > Still, I agree (when teaching and otherwise), we should
    > clearly distinguish the two notably in the context of packages
    > and their namespaces.


    >> My understanding is "a package is loaded" is equivalent to
    >> "isNamespaceLoaded()", i.e., loadNamespace() was run. And that "a
    >> package is attached" is equivalent to "pkg %in% .packages()", i.e.,
    >> library(pkg) was run.

    > or (easier for teaching)  that  "package:<pkg>" %in% search()
    > -- which is what .packages() does {by default}.

    > I agree with the above.


    >> Is the terminology not so precise?

    >> There's certainly ambiguity in the internal variable names referenced
    >> above -- in require, we see

    >> loaded <- paste0("package:", package) %in% search()
    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L680

    > again, historical:  require() exists for considerably longer
    > than namespaces.

    > I think we should at least change the message printed by
    > require() and library() you mentioned above.

    > Martin


    >> Whereas in library() [via .getRequiredPackages2()] we see

    >> attached <- paste0("package:", pkg) %in% search()
    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L931

    >> Mike C

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 10 11:37:46 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 10 Jan 2023 11:37:46 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
Message-ID: <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>

Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
> Dear R-devel people,
>
> We are working to submit a package which is mainly a binding over a C++ lib (https://github.com/libKriging) using armadillo.
> It is _not_ a standard RcppArmadillo package, because we also had to provide a python binding... so there is a huge layer of cmake & scripting to make it work with a standard armadillo (but using same version that RcppArmadillo).
> It seems now working with almost all CRAN targets, but a problem remains with fedora (clang & gcc) devel.
>
> Our issue is that the rhub docker is not well sync with the CRAN fedora-clang-devel config:
> - failing on CRAN (without clear reason): https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html
I see? 2 candidates for? reasons of failing on CRAN:
 ?1. test time is 30 min while 15 min are allowed;
 ?2. your code try to get 30 threads while CRAN limits them to 2;

Try to make your tests shorter ( < 15 min) on 2 threads. May be it will 
help.

Best,
Serguei.

> - passing on rhub: https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc7562726497af7c678ab41f4dea
>
> So we cannot investigate and fix the problem.
>
> Note that we did quite strange things with the fedora platforms: include explicitely slapack to provide simple precision for our (vanilla) armadillo...
>
> Do you have any idea, or even known problem in mind, that could be related to this ?
>
> Best regards,
>
> --
> Dr. Yann Richet
> Institute for Radiological Protection and Nuclear Safety (https://www.irsn.fr),
>    Department of Characterization of Natural Unexpected Events and Sites
> Office?: +33 1 58 35 88 84
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 10 11:40:38 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 10 Jan 2023 11:40:38 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
Message-ID: <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>

Le 10/01/2023 ? 11:37, Serguei Sokol a ?crit?:
> Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
>> Dear R-devel people,
>>
>> We are working to submit a package which is mainly a binding over a 
>> C++ lib (https://github.com/libKriging) using armadillo.
>> It is _not_ a standard RcppArmadillo package, because we also had to 
>> provide a python binding... so there is a huge layer of cmake & 
>> scripting to make it work with a standard armadillo (but using same 
>> version that RcppArmadillo).
>> It seems now working with almost all CRAN targets, but a problem 
>> remains with fedora (clang & gcc) devel.
>>
>> Our issue is that the rhub docker is not well sync with the CRAN 
>> fedora-clang-devel config:
>> - failing on CRAN (without clear reason): 
>> https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html
> I see? 2 candidates for? reasons of failing on CRAN:
> ?1. test time is 30 min while 15 min are allowed;
> ?2. your code try to get 30 threads
Oops, it was 10 threads not 30 but it does not change the nature of a 
possible issue.

> while CRAN limits them to 2;
>
> Try to make your tests shorter ( < 15 min) on 2 threads. May be it 
> will help.
>
> Best,
> Serguei.
>
>> - passing on rhub: 
>> https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc7562726497af7c678ab41f4dea
>>
>> So we cannot investigate and fix the problem.
>>
>> Note that we did quite strange things with the fedora platforms: 
>> include explicitely slapack to provide simple precision for our 
>> (vanilla) armadillo...
>>
>> Do you have any idea, or even known problem in mind, that could be 
>> related to this ?
>>
>> Best regards,
>>
>> -- 
>> Dr. Yann Richet
>> Institute for Radiological Protection and Nuclear Safety 
>> (https://www.irsn.fr),
>> ?? Department of Characterization of Natural Unexpected Events and Sites
>> Office?: +33 1 58 35 88 84
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From y@nn@r|chet @end|ng |rom |r@n@|r  Tue Jan 10 17:27:53 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Tue, 10 Jan 2023 16:27:53 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
Message-ID: <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>

Thank you for your answer.
In facts, 10 threads are asked by armadillo for some LinAlg, which backs to two threads as warned. But I cannot imagine this costs so much time just for that...

A deeper analysis of time spent seems to point that a large time was mainly spent on testthat and Rcpp dependencies compilation... But other recent packages depending on these also are not spending so much time.

CRAN team, as I failed to reproduce the issue with rhub dockers, 
- is there any reason that could explain that fedora-*-devel is so slow for this package or compilation of Rcpp/testthat ?
- is our slapack a possible source of... anything ?
- are we the only package which embeds "standard armadillo" and tries to deal with simple precision lapack issues on fedora ?
- is there any chance that I can get a deeper log of what happened ?

Best regards,

Yann

-----Message d'origine-----
De?: Serguei Sokol <sokol at insa-toulouse.fr> 
Envoy??: mardi 10 janvier 2023 11:41
??: RICHET Yann <yann.richet at irsn.fr>; R-devel at r-project.org
Cc?: Pascal Hav? <pascal at haveneer.com>
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

Le 10/01/2023 ? 11:37, Serguei Sokol a ?crit?:
> Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
>> Dear R-devel people,
>>
>> We are working to submit a package which is mainly a binding over a
>> C++ lib (https://github.com/libKriging) using armadillo.
>> It is _not_ a standard RcppArmadillo package, because we also had to 
>> provide a python binding... so there is a huge layer of cmake & 
>> scripting to make it work with a standard armadillo (but using same 
>> version that RcppArmadillo).
>> It seems now working with almost all CRAN targets, but a problem 
>> remains with fedora (clang & gcc) devel.
>>
>> Our issue is that the rhub docker is not well sync with the CRAN 
>> fedora-clang-devel config:
>> - failing on CRAN (without clear reason): 
>> https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-c
>> lang/rlibkriging-00check.html
> I see? 2 candidates for? reasons of failing on CRAN:
> ?1. test time is 30 min while 15 min are allowed;
> ?2. your code try to get 30 threads
Oops, it was 10 threads not 30 but it does not change the nature of a possible issue.

> while CRAN limits them to 2;
>
> Try to make your tests shorter ( < 15 min) on 2 threads. May be it 
> will help.
>
> Best,
> Serguei.
>
>> - passing on rhub: 
>> https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc756272
>> 6497af7c678ab41f4dea
>>
>> So we cannot investigate and fix the problem.
>>
>> Note that we did quite strange things with the fedora platforms: 
>> include explicitely slapack to provide simple precision for our
>> (vanilla) armadillo...
>>
>> Do you have any idea, or even known problem in mind, that could be 
>> related to this ?
>>
>> Best regards,
>>
>> --
>> Dr. Yann Richet
>> Institute for Radiological Protection and Nuclear Safety 
>> (https://www.irsn.fr),
>> ?? Department of Characterization of Natural Unexpected Events and 
>> Sites Office?: +33 1 58 35 88 84
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


--
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 10 18:10:12 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 10 Jan 2023 18:10:12 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
Message-ID: <6314ae19-a605-0286-a200-dfa0f09ffc52@insa-toulouse.fr>

Looks like there is a kind of misunderstanding...

Le 10/01/2023 ? 17:27, RICHET Yann a ?crit?:
> Thank you for your answer.
> In facts, 10 threads are asked by armadillo for some LinAlg, which backs to two threads as warned. But I cannot imagine this costs so much time just for that...
Excessive thread number is a problem per se. I did not say that it was 
responsible for excessive test time.
It's up to you to configure armadillo to use no more then 2 threads when 
run on CRAN. May be, setting environment variable OPENBLAS_NUM_THREADS=2 
could help.

>
> A deeper analysis of time spent seems to point that a large time was mainly spent on testthat and Rcpp dependencies compilation...
Normally, compilation time is not accounted in the quota of 15 min 
dedicated to tests.
I would just focus on reducing this time, e.g. by running tests on 
smaller cases or skipping time-consuming tests conditionally when on CRAN.

Serguei.
>   But other recent packages depending on these also are not spending so much time.
>
> CRAN team, as I failed to reproduce the issue with rhub dockers,
> - is there any reason that could explain that fedora-*-devel is so slow for this package or compilation of Rcpp/testthat ?
> - is our slapack a possible source of... anything ?
> - are we the only package which embeds "standard armadillo" and tries to deal with simple precision lapack issues on fedora ?
> - is there any chance that I can get a deeper log of what happened ?
>
> Best regards,
>
> Yann
>
> -----Message d'origine-----
> De?: Serguei Sokol<sokol at insa-toulouse.fr>  
> Envoy??: mardi 10 janvier 2023 11:41
> ??: RICHET Yann<yann.richet at irsn.fr>;R-devel at r-project.org
> Cc?: Pascal Hav?<pascal at haveneer.com>
> Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
>
> Le 10/01/2023 ? 11:37, Serguei Sokol a ?crit?:
>> Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
>>> Dear R-devel people,
>>>
>>> We are working to submit a package which is mainly a binding over a
>>> C++ lib (https://github.com/libKriging) using armadillo.
>>> It is _not_ a standard RcppArmadillo package, because we also had to
>>> provide a python binding... so there is a huge layer of cmake &
>>> scripting to make it work with a standard armadillo (but using same
>>> version that RcppArmadillo).
>>> It seems now working with almost all CRAN targets, but a problem
>>> remains with fedora (clang & gcc) devel.
>>>
>>> Our issue is that the rhub docker is not well sync with the CRAN
>>> fedora-clang-devel config:
>>> - failing on CRAN (without clear reason):
>>> https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-c
>>> lang/rlibkriging-00check.html
>> I see? 2 candidates for? reasons of failing on CRAN:
>>  ?1. test time is 30 min while 15 min are allowed;
>>  ?2. your code try to get 30 threads
> Oops, it was 10 threads not 30 but it does not change the nature of a possible issue.
>
>> while CRAN limits them to 2;
>>
>> Try to make your tests shorter ( < 15 min) on 2 threads. May be it
>> will help.
>>
>> Best,
>> Serguei.
>>
>>> - passing on rhub:
>>> https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc756272
>>> 6497af7c678ab41f4dea
>>>
>>> So we cannot investigate and fix the problem.
>>>
>>> Note that we did quite strange things with the fedora platforms:
>>> include explicitely slapack to provide simple precision for our
>>> (vanilla) armadillo...
>>>
>>> Do you have any idea, or even known problem in mind, that could be
>>> related to this ?
>>>
>>> Best regards,
>>>
>>> --
>>> Dr. Yann Richet
>>> Institute for Radiological Protection and Nuclear Safety
>>> (https://www.irsn.fr),
>>>  ?? Department of Characterization of Natural Unexpected Events and
>>> Sites Office?: +33 1 58 35 88 84
>>>
>>> ______________________________________________
>>> R-devel at r-project.org  mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Jan 10 20:05:45 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 10 Jan 2023 22:05:45 +0300
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
Message-ID: <20230110220545.5d213d2d@Tarkus>

On Tue, 10 Jan 2023 16:27:53 +0000
RICHET Yann <yann.richet at irsn.fr> wrote:

> In facts, 10 threads are asked by armadillo for some LinAlg, which
> backs to two threads as warned. 

I think you're right about your tests de-facto using two threads, but
it might be a good idea to _default_ to up to two threads in tests and
examples. This is especially valuable for third-party developers who
have to mass-test packages (one of which could be rlibkriging) in
parallel.

> - is there any reason that could explain that fedora-*-devel is so
> slow for this package or compilation of Rcpp/testthat ?

Compilation time is definitely not the reason. Something in tests/*
actually runs for 30 minutes by itself.

> - is there any chance that I can get a deeper log of what happened ?

If you split your tests into separate files under tests/*.R instead of
using a single tests/testthat.R calling the rest of the tests, R will
be able to show you the individual test file that hung and maybe the
line where it happened. (Also, you'll get per-file timing.) But that
is potentially a huge investment: you may have to rewrite the tests to
work outside the testthat harness, and you'd also have to prepare
another CRAN submission just to have those tests run. It's also against
CRAN policy to knowingly submit a package with unfixed ERRORs.

(Currently, R can only tell you that the tests hung in the
test_check('rlibkriging') call in the tests/testthat.R, which isn't
precise enough.)

These lines look a bit scary:

tests/testthat/bench-KrigingFit.R:

pack=list.files(file.path("bindings","R"),pattern = ".tar.gz",full.names = T) install.packages(pack,repos=NULL)

tests/testthat/notest-LinearRegression.R:

install.packages(pkgs="rlibkriging_0.7-2.tgz", type="source", repos=NULL)
library(rlibkriging)

I don't think that install.packages does anything besides raising a
warning and letting the test continue (there doesn't seem to be any
.tar.gz files inside the package on CRAN, so installation fails), but
it's probably not a good idea to install packages during testing [*].

This is also not quite right but harmless, because rlibkriging is
already loaded:

library(rlibkriging, lib.loc="bindings/R/Rlibs")

I'm afraid I don't know how to reproduce the timeouts you're seeing on
the CRAN Fedora machine.

-- 
Best regards,
Ivan

[*] I once wrote a test that launched multiple child R processes,
created a temporary library in each of them and installed the package
there. The test was designed to only run on the developer's machine in
order to test file format compatibility between different versions of
R. I ended up moving the test away from tests/*.R in order to make sure
it won't run by accident.


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jan 10 21:28:36 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 10 Jan 2023 15:28:36 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <20230110220545.5d213d2d@Tarkus>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
Message-ID: <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>

On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
> On Tue, 10 Jan 2023 16:27:53 +0000
> RICHET Yann <yann.richet at irsn.fr> wrote:
> 
>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>> backs to two threads as warned.
> 
> I think you're right about your tests de-facto using two threads, but
> it might be a good idea to _default_ to up to two threads in tests and
> examples. This is especially valuable for third-party developers who
> have to mass-test packages (one of which could be rlibkriging) in
> parallel.
> 
>> - is there any reason that could explain that fedora-*-devel is so
>> slow for this package or compilation of Rcpp/testthat ?
> 
> Compilation time is definitely not the reason. Something in tests/*
> actually runs for 30 minutes by itself.
> 
>> - is there any chance that I can get a deeper log of what happened ?
> 
> If you split your tests into separate files under tests/*.R instead of
> using a single tests/testthat.R calling the rest of the tests, R will
> be able to show you the individual test file that hung and maybe the
> line where it happened. (Also, you'll get per-file timing.) But that
> is potentially a huge investment: you may have to rewrite the tests to
> work outside the testthat harness, and you'd also have to prepare
> another CRAN submission just to have those tests run. It's also against
> CRAN policy to knowingly submit a package with unfixed ERRORs.
> 
> (Currently, R can only tell you that the tests hung in the
> test_check('rlibkriging') call in the tests/testthat.R, which isn't
> precise enough.)

You can specify a different "reporter" in the test_check() call, and it 
will print more useful information.  I don't think there's a perfect 
one, but

   test_check('rlibkriging', reporter = "progress")

should at least show you the tests that finished running before the 
timeout.  You could possibly also write your own custom reporter that 
could give timings for each of the tests as they run, but the documents 
for how to do that don't seem to exist.  Maybe someone else has done it?

Duncan Murdoch


From @eb@meyer @end|ng |rom |@u@de  Tue Jan 10 22:07:26 2023
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 10 Jan 2023 22:07:26 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
Message-ID: <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>

Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>> On Tue, 10 Jan 2023 16:27:53 +0000
>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>
>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>> backs to two threads as warned.
>>
>> I think you're right about your tests de-facto using two threads, but
>> it might be a good idea to _default_ to up to two threads in tests and
>> examples. This is especially valuable for third-party developers who
>> have to mass-test packages (one of which could be rlibkriging) in
>> parallel.
>>
>>> - is there any reason that could explain that fedora-*-devel is so
>>> slow for this package or compilation of Rcpp/testthat ?
>>
>> Compilation time is definitely not the reason. Something in tests/*
>> actually runs for 30 minutes by itself.
>>
>>> - is there any chance that I can get a deeper log of what happened ?
>>
>> If you split your tests into separate files under tests/*.R instead of
>> using a single tests/testthat.R calling the rest of the tests, R will
>> be able to show you the individual test file that hung and maybe the
>> line where it happened. (Also, you'll get per-file timing.) But that
>> is potentially a huge investment: you may have to rewrite the tests to
>> work outside the testthat harness, and you'd also have to prepare
>> another CRAN submission just to have those tests run. It's also against
>> CRAN policy to knowingly submit a package with unfixed ERRORs.
>>
>> (Currently, R can only tell you that the tests hung in the
>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>> precise enough.)
> 
> You can specify a different "reporter" in the test_check() call, and it 
> will print more useful information.? I don't think there's a perfect 
> one, but
> 
>  ? test_check('rlibkriging', reporter = "progress")
> 
> should at least show you the tests that finished running before the 
> timeout.  

I had similar problems with testthat and timeouts when mass-checking 
packages on patched R versions. My notes say

> ## testthat's 'LocationReporter' does cat() after each expectation
> ## so we can see results even if timeout is reached
> options(testthat.default_check_reporter = c("Location", "Check"))

The help("LocationReporter") says: "This reporter simply prints the 
location of every expectation and error. This is useful if you're trying 
to figure out the source of a segfault, or you want to figure out which 
code triggers a C/C++ breakpoint"

HTH!

	Sebastian Meyer

> You could possibly also write your own custom reporter that 
> could give timings for each of the tests as they run, but the documents 
> for how to do that don't seem to exist.? Maybe someone else has done it?
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jan 11 00:35:57 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 10 Jan 2023 18:35:57 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
Message-ID: <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>

On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>
>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>>> backs to two threads as warned.
>>>
>>> I think you're right about your tests de-facto using two threads, but
>>> it might be a good idea to _default_ to up to two threads in tests and
>>> examples. This is especially valuable for third-party developers who
>>> have to mass-test packages (one of which could be rlibkriging) in
>>> parallel.
>>>
>>>> - is there any reason that could explain that fedora-*-devel is so
>>>> slow for this package or compilation of Rcpp/testthat ?
>>>
>>> Compilation time is definitely not the reason. Something in tests/*
>>> actually runs for 30 minutes by itself.
>>>
>>>> - is there any chance that I can get a deeper log of what happened ?
>>>
>>> If you split your tests into separate files under tests/*.R instead of
>>> using a single tests/testthat.R calling the rest of the tests, R will
>>> be able to show you the individual test file that hung and maybe the
>>> line where it happened. (Also, you'll get per-file timing.) But that
>>> is potentially a huge investment: you may have to rewrite the tests to
>>> work outside the testthat harness, and you'd also have to prepare
>>> another CRAN submission just to have those tests run. It's also against
>>> CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>
>>> (Currently, R can only tell you that the tests hung in the
>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>>> precise enough.)
>>
>> You can specify a different "reporter" in the test_check() call, and it
>> will print more useful information.? I don't think there's a perfect
>> one, but
>>
>>   ? test_check('rlibkriging', reporter = "progress")
>>
>> should at least show you the tests that finished running before the
>> timeout.
> 
> I had similar problems with testthat and timeouts when mass-checking
> packages on patched R versions. My notes say
> 
>> ## testthat's 'LocationReporter' does cat() after each expectation
>> ## so we can see results even if timeout is reached
>> options(testthat.default_check_reporter = c("Location", "Check"))
> 
> The help("LocationReporter") says: "This reporter simply prints the
> location of every expectation and error. This is useful if you're trying
> to figure out the source of a segfault, or you want to figure out which
> code triggers a C/C++ breakpoint"
> 
> HTH!

Yes, that looks like it would pin down the location of the problem. 
Here's some sample output from it:

   Running ?testthat.R? [41s/42s]
Running the tests in ?tests/testthat.R? failed.
Last 13 lines of output:
   Start test: can use constructed calls in verify_output() (#945)
     'test-verify-output.R:55' [success]
   End test: can use constructed calls in verify_output() (#945)

   Start test: verify_output() doesn't use cli unicode by default
     'test-verify-output.R:65' [success]
     'test-verify-output.R:73' [success]
   End test: verify_output() doesn't use cli unicode by default

   Start test: verify_output() handles carriage return
     'test-verify-output.R:82' [success]
   End test: verify_output() handles carriage return

   Error: Test failures
   Execution halted

One other thing:  you enabled this by using

   options(testthat.default_check_reporter = c("Location", "Check"))

before running the tests; the package writer could do the same thing by 
using

   test_check('rlibkriging', reporter = c("Location", "Check"))

Duncan Murdoch


From yugong @end|ng |rom out|ook@com  Wed Jan 11 15:25:33 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Wed, 11 Jan 2023 14:25:33 +0000
Subject: [Rd] proposal for use ICU for timezone convertion on windows and a
 draft patch
Message-ID: <TYAP286MB0268F0EDEE6C5A36C751B0C7D1FC9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Dear All,

 Last week I found an issue about R Sys.timezone function on Windows and send email to this list. This week , I read quite a few  docs and codes about windows time zone to IANA time zone conversion. and found in unicode.org's  ICU library has a function  ucal_getTimeZoneIDForWindowsID which do the time zone convert. Microsoft also use it for time zone convertion in dotnet 6 and 7.(https://github.com/dotnet/runtime/blob/main/src/native/libs/System.Globalization.Native/pal_timeZoneInfo.c) .

IMHO, use this function to implement time zone convert on windows is better than R's hand-write conversion implementation, use the ICU , it will update the conversion when unicode org upgrade the ICU library and no more hand-write conversion code needed. Also RTools already included the ICU library,and R on windows build link ICU lib on default  , so no additional library or tools need for use this function for time zone conversion.

so I wrote a quick and dirty patch use the ucal_getTimeZoneIDForWindowsID, I think maybe better discuss here before I send patch to bugs.r-project.org.
I put the patch on https://github.com/armgong/misc-r-patch/blob/main/registryTZ-ICU.diff.

this patch mainly do following three steps : 1 read current English time zone name from registry ; 2 read current region name from registry(this also affect conversion); 3 use ucal_getTimeZoneIDForWindowsID implement the conversion.

please feel free to share your thoughts or feedbacks of this patch.  if it doable ,then I will modify it and send it to bugs.r-project.org

best regards,
Yu Gong




	[[alternative HTML version deleted]]


From y@nn@r|chet @end|ng |rom |r@n@|r  Wed Jan 11 18:35:45 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Wed, 11 Jan 2023 17:35:45 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
Message-ID: <30578c9825ff429baecb0be28fc8b778@irsn.fr>

Thank you all, for these advices.

So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
Next step should be to investigate blocking test using a reporter (maybe "list").
For now, waiting for CRAN results...

Yann

-----Message d'origine-----
De?: Duncan Murdoch <murdoch.duncan at gmail.com> 
Envoy??: mercredi 11 janvier 2023 00:36
??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr>
Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>
>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which 
>>>> backs to two threads as warned.
>>>
>>> I think you're right about your tests de-facto using two threads, 
>>> but it might be a good idea to _default_ to up to two threads in 
>>> tests and examples. This is especially valuable for third-party 
>>> developers who have to mass-test packages (one of which could be 
>>> rlibkriging) in parallel.
>>>
>>>> - is there any reason that could explain that fedora-*-devel is so 
>>>> slow for this package or compilation of Rcpp/testthat ?
>>>
>>> Compilation time is definitely not the reason. Something in tests/* 
>>> actually runs for 30 minutes by itself.
>>>
>>>> - is there any chance that I can get a deeper log of what happened ?
>>>
>>> If you split your tests into separate files under tests/*.R instead 
>>> of using a single tests/testthat.R calling the rest of the tests, R 
>>> will be able to show you the individual test file that hung and 
>>> maybe the line where it happened. (Also, you'll get per-file 
>>> timing.) But that is potentially a huge investment: you may have to 
>>> rewrite the tests to work outside the testthat harness, and you'd 
>>> also have to prepare another CRAN submission just to have those 
>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>
>>> (Currently, R can only tell you that the tests hung in the
>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't 
>>> precise enough.)
>>
>> You can specify a different "reporter" in the test_check() call, and 
>> it will print more useful information.? I don't think there's a 
>> perfect one, but
>>
>>   ? test_check('rlibkriging', reporter = "progress")
>>
>> should at least show you the tests that finished running before the 
>> timeout.
> 
> I had similar problems with testthat and timeouts when mass-checking 
> packages on patched R versions. My notes say
> 
>> ## testthat's 'LocationReporter' does cat() after each expectation ## 
>> so we can see results even if timeout is reached 
>> options(testthat.default_check_reporter = c("Location", "Check"))
> 
> The help("LocationReporter") says: "This reporter simply prints the 
> location of every expectation and error. This is useful if you're 
> trying to figure out the source of a segfault, or you want to figure 
> out which code triggers a C/C++ breakpoint"
> 
> HTH!

Yes, that looks like it would pin down the location of the problem. 
Here's some sample output from it:

   Running ?testthat.R? [41s/42s]
Running the tests in ?tests/testthat.R? failed.
Last 13 lines of output:
   Start test: can use constructed calls in verify_output() (#945)
     'test-verify-output.R:55' [success]
   End test: can use constructed calls in verify_output() (#945)

   Start test: verify_output() doesn't use cli unicode by default
     'test-verify-output.R:65' [success]
     'test-verify-output.R:73' [success]
   End test: verify_output() doesn't use cli unicode by default

   Start test: verify_output() handles carriage return
     'test-verify-output.R:82' [success]
   End test: verify_output() handles carriage return

   Error: Test failures
   Execution halted

One other thing:  you enabled this by using

   options(testthat.default_check_reporter = c("Location", "Check"))

before running the tests; the package writer could do the same thing by using

   test_check('rlibkriging', reporter = c("Location", "Check"))

Duncan Murdoch

From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jan 11 19:09:25 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 11 Jan 2023 13:09:25 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <30578c9825ff429baecb0be28fc8b778@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
Message-ID: <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>

On 11/01/2023 12:35 p.m., RICHET Yann wrote:
> Thank you all, for these advices.
> 
> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
> Next step should be to investigate blocking test using a reporter (maybe "list").
> For now, waiting for CRAN results...

I think Sebastian or my suggestion is easier than redoing all of your 
tests.  They are each one line changes.

Duncan Murdoch

> 
> Yann
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com>
> Envoy??: mercredi 11 janvier 2023 00:36
> ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr>
> Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
> Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>>
>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>>>> backs to two threads as warned.
>>>>
>>>> I think you're right about your tests de-facto using two threads,
>>>> but it might be a good idea to _default_ to up to two threads in
>>>> tests and examples. This is especially valuable for third-party
>>>> developers who have to mass-test packages (one of which could be
>>>> rlibkriging) in parallel.
>>>>
>>>>> - is there any reason that could explain that fedora-*-devel is so
>>>>> slow for this package or compilation of Rcpp/testthat ?
>>>>
>>>> Compilation time is definitely not the reason. Something in tests/*
>>>> actually runs for 30 minutes by itself.
>>>>
>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>
>>>> If you split your tests into separate files under tests/*.R instead
>>>> of using a single tests/testthat.R calling the rest of the tests, R
>>>> will be able to show you the individual test file that hung and
>>>> maybe the line where it happened. (Also, you'll get per-file
>>>> timing.) But that is potentially a huge investment: you may have to
>>>> rewrite the tests to work outside the testthat harness, and you'd
>>>> also have to prepare another CRAN submission just to have those
>>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>
>>>> (Currently, R can only tell you that the tests hung in the
>>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>>>> precise enough.)
>>>
>>> You can specify a different "reporter" in the test_check() call, and
>>> it will print more useful information.? I don't think there's a
>>> perfect one, but
>>>
>>>    ? test_check('rlibkriging', reporter = "progress")
>>>
>>> should at least show you the tests that finished running before the
>>> timeout.
>>
>> I had similar problems with testthat and timeouts when mass-checking
>> packages on patched R versions. My notes say
>>
>>> ## testthat's 'LocationReporter' does cat() after each expectation ##
>>> so we can see results even if timeout is reached
>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>
>> The help("LocationReporter") says: "This reporter simply prints the
>> location of every expectation and error. This is useful if you're
>> trying to figure out the source of a segfault, or you want to figure
>> out which code triggers a C/C++ breakpoint"
>>
>> HTH!
> 
> Yes, that looks like it would pin down the location of the problem.
> Here's some sample output from it:
> 
>     Running ?testthat.R? [41s/42s]
> Running the tests in ?tests/testthat.R? failed.
> Last 13 lines of output:
>     Start test: can use constructed calls in verify_output() (#945)
>       'test-verify-output.R:55' [success]
>     End test: can use constructed calls in verify_output() (#945)
> 
>     Start test: verify_output() doesn't use cli unicode by default
>       'test-verify-output.R:65' [success]
>       'test-verify-output.R:73' [success]
>     End test: verify_output() doesn't use cli unicode by default
> 
>     Start test: verify_output() handles carriage return
>       'test-verify-output.R:82' [success]
>     End test: verify_output() handles carriage return
> 
>     Error: Test failures
>     Execution halted
> 
> One other thing:  you enabled this by using
> 
>     options(testthat.default_check_reporter = c("Location", "Check"))
> 
> before running the tests; the package writer could do the same thing by using
> 
>     test_check('rlibkriging', reporter = c("Location", "Check"))
> 
> Duncan Murdoch


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Jan 11 19:27:19 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 11 Jan 2023 21:27:19 +0300
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
 <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
Message-ID: <20230111212719.49c123e1@Tarkus>

On Wed, 11 Jan 2023 13:09:25 -0500
Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> I think Sebastian or my suggestion is easier than redoing all of your 
> tests.  They are each one line changes.

Yes, sorry about that. Definitely try a verbose reporter first instead
of redoing the tests. I'll remember not to give this advice next time.

-- 
Best regards,
Ivan


From edd @end|ng |rom deb|@n@org  Wed Jan 11 19:34:31 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 11 Jan 2023 12:34:31 -0600
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <30578c9825ff429baecb0be28fc8b778@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
 <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
Message-ID: <25535.311.322068.314067@rob.eddelbuettel.com>


On 11 January 2023 at 17:35, RICHET Yann wrote:
| Thank you all, for these advices.
| 
| So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
| Next step should be to investigate blocking test using a reporter (maybe "list").
| For now, waiting for CRAN results...

BTW your package failed its tests for me in a reverse-depends run when I had
`ccache` as usual in the definition of CC, CXX, FC, CXX14, ... That usually
works with other packages using CMake. Maybe something you could look into.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From yugong @end|ng |rom out|ook@com  Thu Jan 12 05:54:41 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Thu, 12 Jan 2023 04:54:41 +0000
Subject: [Rd] 
 proposal for use ICU for timezone convertion on windows and a
 draft patch
In-Reply-To: <TYAP286MB0268F0EDEE6C5A36C751B0C7D1FC9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268F0EDEE6C5A36C751B0C7D1FC9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <TYAP286MB0268139A4A5D1A6EFBC93F40D1FD9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

still work on it.  this morning , I found the better and short sloution of this, the ucal_getDefaultTimeZone will return IANA formart zone name on windows.
so the main code for this issue listing  here:

/* Longest currently is 31 chars */
static char Olson[64] = "";
/* use ucal_getDefaultTimeZone to get IANA default time zone name */
const char *getTZinfo(void)
{
    UChar defaultzone[64];
    UErrorCode status_default = U_ZERO_ERROR;
    int32_t i = ucal_getDefaultTimeZone(defaultzone, ARRAYSIZE(defaultzone), &status_default);
    if (U_SUCCESS(status_default)) {
        wcstombs(Olson, defaultzone, 64);
        Olson[63] = '\0';
    #ifdef DEBUG
        printf("TZ = %s\n", Olson);
    #endif
        return Olson;
    }
    else{
        return "unknown";
    }
}

I still maintain a longer version of this patch, but it should not needed if  ucal_getDefaultTimeZone  is reliable .
the longer version  when  ucal_getDefaultTimeZone fail to got IANA time zone name , it do extra step to got  time zone name( 1 read current English time zone name from registry ; 2 read current region name from registry(this also affect conversion); 3 use ucal_getTimeZoneIDForWindowsID implement the conversion.)

please feel free to share your thoughts or feedbacks of this short version patch.

best regards,

Yu Gong


________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of yu gong <yugong at outlook.com>
Sent: Wednesday, January 11, 2023 22:25
To: r-devel at r-project.org <r-devel at r-project.org>
Subject: [Rd] proposal for use ICU for timezone convertion on windows and a draft patch

Dear All,

 Last week I found an issue about R Sys.timezone function on Windows and send email to this list. This week , I read quite a few  docs and codes about windows time zone to IANA time zone conversion. and found in unicode.org's  ICU library has a function  ucal_getTimeZoneIDForWindowsID which do the time zone convert. Microsoft also use it for time zone convertion in dotnet 6 and 7.(https://github.com/dotnet/runtime/blob/main/src/native/libs/System.Globalization.Native/pal_timeZoneInfo.c) .

IMHO, use this function to implement time zone convert on windows is better than R's hand-write conversion implementation, use the ICU , it will update the conversion when unicode org upgrade the ICU library and no more hand-write conversion code needed. Also RTools already included the ICU library,and R on windows build link ICU lib on default  , so no additional library or tools need for use this function for time zone conversion.

so I wrote a quick and dirty patch use the ucal_getTimeZoneIDForWindowsID, I think maybe better discuss here before I send patch to bugs.r-project.org.
I put the patch on https://github.com/armgong/misc-r-patch/blob/main/registryTZ-ICU.diff.

this patch mainly do following three steps : 1 read current English time zone name from registry ; 2 read current region name from registry(this also affect conversion); 3 use ucal_getTimeZoneIDForWindowsID implement the conversion.

please feel free to share your thoughts or feedbacks of this patch.  if it doable ,then I will modify it and send it to bugs.r-project.org

best regards,
Yu Gong




        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From y@nn@r|chet @end|ng |rom |r@n@|r  Thu Jan 12 08:51:59 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Thu, 12 Jan 2023 07:51:59 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
Message-ID: <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>

Well, I tried to move the tests outside testthat.R logic, because I expect that CRAN output will not give me the reporter results... and as I re-submitted the package, I wanted to ensure readable result. But maybe I am wrong about that... ?


-----Message d'origine-----
De?: Duncan Murdoch <murdoch.duncan at gmail.com> 
Envoy??: mercredi 11 janvier 2023 19:09
??: RICHET Yann <yann.richet at irsn.fr>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>
Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

On 11/01/2023 12:35 p.m., RICHET Yann wrote:
> Thank you all, for these advices.
> 
> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
> Next step should be to investigate blocking test using a reporter (maybe "list").
> For now, waiting for CRAN results...

I think Sebastian or my suggestion is easier than redoing all of your tests.  They are each one line changes.

Duncan Murdoch

> 
> Yann
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11 
> janvier 2023 00:36 ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov 
> <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr> Cc?: Pascal 
> Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: Re: [Rd] 
> rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>>
>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which 
>>>>> backs to two threads as warned.
>>>>
>>>> I think you're right about your tests de-facto using two threads, 
>>>> but it might be a good idea to _default_ to up to two threads in 
>>>> tests and examples. This is especially valuable for third-party 
>>>> developers who have to mass-test packages (one of which could be
>>>> rlibkriging) in parallel.
>>>>
>>>>> - is there any reason that could explain that fedora-*-devel is so 
>>>>> slow for this package or compilation of Rcpp/testthat ?
>>>>
>>>> Compilation time is definitely not the reason. Something in tests/* 
>>>> actually runs for 30 minutes by itself.
>>>>
>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>
>>>> If you split your tests into separate files under tests/*.R instead 
>>>> of using a single tests/testthat.R calling the rest of the tests, R 
>>>> will be able to show you the individual test file that hung and 
>>>> maybe the line where it happened. (Also, you'll get per-file
>>>> timing.) But that is potentially a huge investment: you may have to 
>>>> rewrite the tests to work outside the testthat harness, and you'd 
>>>> also have to prepare another CRAN submission just to have those 
>>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>
>>>> (Currently, R can only tell you that the tests hung in the
>>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't 
>>>> precise enough.)
>>>
>>> You can specify a different "reporter" in the test_check() call, and 
>>> it will print more useful information.? I don't think there's a 
>>> perfect one, but
>>>
>>>    ? test_check('rlibkriging', reporter = "progress")
>>>
>>> should at least show you the tests that finished running before the 
>>> timeout.
>>
>> I had similar problems with testthat and timeouts when mass-checking 
>> packages on patched R versions. My notes say
>>
>>> ## testthat's 'LocationReporter' does cat() after each expectation 
>>> ## so we can see results even if timeout is reached 
>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>
>> The help("LocationReporter") says: "This reporter simply prints the 
>> location of every expectation and error. This is useful if you're 
>> trying to figure out the source of a segfault, or you want to figure 
>> out which code triggers a C/C++ breakpoint"
>>
>> HTH!
> 
> Yes, that looks like it would pin down the location of the problem.
> Here's some sample output from it:
> 
>     Running ?testthat.R? [41s/42s]
> Running the tests in ?tests/testthat.R? failed.
> Last 13 lines of output:
>     Start test: can use constructed calls in verify_output() (#945)
>       'test-verify-output.R:55' [success]
>     End test: can use constructed calls in verify_output() (#945)
> 
>     Start test: verify_output() doesn't use cli unicode by default
>       'test-verify-output.R:65' [success]
>       'test-verify-output.R:73' [success]
>     End test: verify_output() doesn't use cli unicode by default
> 
>     Start test: verify_output() handles carriage return
>       'test-verify-output.R:82' [success]
>     End test: verify_output() handles carriage return
> 
>     Error: Test failures
>     Execution halted
> 
> One other thing:  you enabled this by using
> 
>     options(testthat.default_check_reporter = c("Location", "Check"))
> 
> before running the tests; the package writer could do the same thing 
> by using
> 
>     test_check('rlibkriging', reporter = c("Location", "Check"))
> 
> Duncan Murdoch


From y@nn@r|chet @end|ng |rom |r@n@|r  Thu Jan 12 09:54:28 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Thu, 12 Jan 2023 08:54:28 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <25535.311.322068.314067@rob.eddelbuettel.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>	<20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <25535.311.322068.314067@rob.eddelbuettel.com>
Message-ID: <4b197a2fd732443aab53d7f69e49e88a@irsn.fr>

Thank you, Dirk.
But I also tried with ccache, without fails... can you give some details about you reverse-depend configuration ? docker image ? Mine was a standard ubuntu 20.04 packages...

Best,

Yann

-----Message d'origine-----
De?: Dirk Eddelbuettel <edd at debian.org> 
Envoy??: mercredi 11 janvier 2023 19:35
??: RICHET Yann <yann.richet at irsn.fr>
Cc?: Duncan Murdoch <murdoch.duncan at gmail.com>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>; Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack


On 11 January 2023 at 17:35, RICHET Yann wrote:
| Thank you all, for these advices.
| 
| So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
| Next step should be to investigate blocking test using a reporter (maybe "list").
| For now, waiting for CRAN results...

BTW your package failed its tests for me in a reverse-depends run when I had `ccache` as usual in the definition of CC, CXX, FC, CXX14, ... That usually works with other packages using CMake. Maybe something you could look into.

Dirk

--
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan 12 10:06:38 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 12 Jan 2023 04:06:38 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
 <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>
Message-ID: <020704b6-ff2d-533c-f693-7738fb4a20c7@gmail.com>

On 12/01/2023 2:51 a.m., RICHET Yann wrote:
> Well, I tried to move the tests outside testthat.R logic, because I expect that CRAN output will not give me the reporter results... and as I re-submitted the package, I wanted to ensure readable result. But maybe I am wrong about that... ?

I think CRAN output will only show you the reporter results if there's 
an error.  If it's a regular error, you get the last 13 lines.  From 
your earlier posting, it looks as though a timeout might give more.  But 
even the last 13 lines should identify exactly which test was running 
when the timeout happened.

I probably wouldn't use the location reporter for routine runs, because 
it will give a lot of output, and conceivably this will slow things down.

Duncan Murdoch

> 
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com>
> Envoy??: mercredi 11 janvier 2023 19:09
> ??: RICHET Yann <yann.richet at irsn.fr>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>
> Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
> Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 11/01/2023 12:35 p.m., RICHET Yann wrote:
>> Thank you all, for these advices.
>>
>> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
>> Next step should be to investigate blocking test using a reporter (maybe "list").
>> For now, waiting for CRAN results...
> 
> I think Sebastian or my suggestion is easier than redoing all of your tests.  They are each one line changes.
> 
> Duncan Murdoch
> 
>>
>> Yann
>>
>> -----Message d'origine-----
>> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11
>> janvier 2023 00:36 ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov
>> <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr> Cc?: Pascal
>> Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: Re: [Rd]
>> rhub vs. CRAN fedora-*-devel, using armadillo & slapack
>>
>> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>>>
>>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>>>>> backs to two threads as warned.
>>>>>
>>>>> I think you're right about your tests de-facto using two threads,
>>>>> but it might be a good idea to _default_ to up to two threads in
>>>>> tests and examples. This is especially valuable for third-party
>>>>> developers who have to mass-test packages (one of which could be
>>>>> rlibkriging) in parallel.
>>>>>
>>>>>> - is there any reason that could explain that fedora-*-devel is so
>>>>>> slow for this package or compilation of Rcpp/testthat ?
>>>>>
>>>>> Compilation time is definitely not the reason. Something in tests/*
>>>>> actually runs for 30 minutes by itself.
>>>>>
>>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>>
>>>>> If you split your tests into separate files under tests/*.R instead
>>>>> of using a single tests/testthat.R calling the rest of the tests, R
>>>>> will be able to show you the individual test file that hung and
>>>>> maybe the line where it happened. (Also, you'll get per-file
>>>>> timing.) But that is potentially a huge investment: you may have to
>>>>> rewrite the tests to work outside the testthat harness, and you'd
>>>>> also have to prepare another CRAN submission just to have those
>>>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>>
>>>>> (Currently, R can only tell you that the tests hung in the
>>>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>>>>> precise enough.)
>>>>
>>>> You can specify a different "reporter" in the test_check() call, and
>>>> it will print more useful information.? I don't think there's a
>>>> perfect one, but
>>>>
>>>>     ? test_check('rlibkriging', reporter = "progress")
>>>>
>>>> should at least show you the tests that finished running before the
>>>> timeout.
>>>
>>> I had similar problems with testthat and timeouts when mass-checking
>>> packages on patched R versions. My notes say
>>>
>>>> ## testthat's 'LocationReporter' does cat() after each expectation
>>>> ## so we can see results even if timeout is reached
>>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>>
>>> The help("LocationReporter") says: "This reporter simply prints the
>>> location of every expectation and error. This is useful if you're
>>> trying to figure out the source of a segfault, or you want to figure
>>> out which code triggers a C/C++ breakpoint"
>>>
>>> HTH!
>>
>> Yes, that looks like it would pin down the location of the problem.
>> Here's some sample output from it:
>>
>>      Running ?testthat.R? [41s/42s]
>> Running the tests in ?tests/testthat.R? failed.
>> Last 13 lines of output:
>>      Start test: can use constructed calls in verify_output() (#945)
>>        'test-verify-output.R:55' [success]
>>      End test: can use constructed calls in verify_output() (#945)
>>
>>      Start test: verify_output() doesn't use cli unicode by default
>>        'test-verify-output.R:65' [success]
>>        'test-verify-output.R:73' [success]
>>      End test: verify_output() doesn't use cli unicode by default
>>
>>      Start test: verify_output() handles carriage return
>>        'test-verify-output.R:82' [success]
>>      End test: verify_output() handles carriage return
>>
>>      Error: Test failures
>>      Execution halted
>>
>> One other thing:  you enabled this by using
>>
>>      options(testthat.default_check_reporter = c("Location", "Check"))
>>
>> before running the tests; the package writer could do the same thing
>> by using
>>
>>      test_check('rlibkriging', reporter = c("Location", "Check"))
>>
>> Duncan Murdoch
>


From edd @end|ng |rom deb|@n@org  Thu Jan 12 15:44:44 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 12 Jan 2023 08:44:44 -0600
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <4b197a2fd732443aab53d7f69e49e88a@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
 <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <25535.311.322068.314067@rob.eddelbuettel.com>
 <4b197a2fd732443aab53d7f69e49e88a@irsn.fr>
Message-ID: <25536.7388.204821.704048@rob.eddelbuettel.com>


On 12 January 2023 at 08:54, RICHET Yann wrote:
| Thank you, Dirk.
| But I also tried with ccache, without fails... can you give some details about you reverse-depend configuration ? docker image ? Mine was a standard ubuntu 20.04 packages...

Nothing special -- I just the standard functions in base R package tools to
determine the reverse depends, and then loop over them and calling them one
by one.  (Package `prrd` at https://cloud.r-project.org/package=prrd helps
with this loops running in parallel and stateful, but you don't need that.)

My setup (on Debian, Ubuntu would work the same) contains (the perfectly
legal, helpful (!!) as `ccache` is a godsend, and not infrequently used)
snippet in ~/.R/Makevars

#VER=-12
CCACHE=ccache
CC=$(CCACHE) gcc$(VER)
CXX=$(CCACHE) g++$(VER)
CXX11=$(CCACHE) g++$(VER) 
CXX14=$(CCACHE) g++$(VER) 
CXX17=$(CCACHE) g++$(VER) 
SHLIB_CXXLD=$(CCACHE) g++$(VER)
FC=$(CCACHE) gfortran
F77=$(CCACHE) gfortran
F95=$(CCACHE) gfortran

Your package died incorrectly claiming the Fortran compiler was unsuitable.
Once I commented `CCACHE=ccache` out (which reduces the declaration to
null-ops, essentially) it worked.  Not 'fatal' but tedious as 2600+ other
packages build as they should.

Thanks for looking into it!

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Fri Jan 13 09:00:02 2023
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 13 Jan 2023 08:00:02 +0000
Subject: [Rd] Combinations and Permutations
Message-ID: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>

Good day,

In utils, there is a function named combn. It would seem complementary for utils to also offer permutations because of how closely mathematically related they are to each other. Could permutations be added to save on a package dependency if developing a package?

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From y@nn@r|chet @end|ng |rom |r@n@|r  Fri Jan 13 11:08:07 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Fri, 13 Jan 2023 10:08:07 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <020704b6-ff2d-533c-f693-7738fb4a20c7@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
 <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>
 <020704b6-ff2d-533c-f693-7738fb4a20c7@gmail.com>
Message-ID: <32a206417a7e462791f7ae00045fe85a@irsn.fr>

The CRAN check on fedora gives me more detailed results now: https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html .
It points a fairly strange issue (possibly due to recursive programming, that remains to investigate), but anyway I can now circumvent  the problem for CRAN.
In next "true" release, I will try to switch back to a testthat suitable reporter instead of the enumerated tests in tests/, as you suggested.

So, thank you very much to all of you for your kind help and suggestions.

Yann & libKriging team.

-----Message d'origine-----
De?: Duncan Murdoch <murdoch.duncan at gmail.com> 
Envoy??: jeudi 12 janvier 2023 10:07
??: RICHET Yann <yann.richet at irsn.fr>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>
Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

On 12/01/2023 2:51 a.m., RICHET Yann wrote:
> Well, I tried to move the tests outside testthat.R logic, because I expect that CRAN output will not give me the reporter results... and as I re-submitted the package, I wanted to ensure readable result. But maybe I am wrong about that... ?

I think CRAN output will only show you the reporter results if there's an error.  If it's a regular error, you get the last 13 lines.  From your earlier posting, it looks as though a timeout might give more.  But even the last 13 lines should identify exactly which test was running when the timeout happened.

I probably wouldn't use the location reporter for routine runs, because it will give a lot of output, and conceivably this will slow things down.

Duncan Murdoch

> 
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11 
> janvier 2023 19:09 ??: RICHET Yann <yann.richet at irsn.fr>; Sebastian 
> Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com> Cc?: 
> Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: Re: 
> [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 11/01/2023 12:35 p.m., RICHET Yann wrote:
>> Thank you all, for these advices.
>>
>> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
>> Next step should be to investigate blocking test using a reporter (maybe "list").
>> For now, waiting for CRAN results...
> 
> I think Sebastian or my suggestion is easier than redoing all of your tests.  They are each one line changes.
> 
> Duncan Murdoch
> 
>>
>> Yann
>>
>> -----Message d'origine-----
>> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11 
>> janvier 2023 00:36 ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan 
>> Krylov <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr> Cc?
>> : Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: 
>> Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
>>
>> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>>> On Tue, 10 Jan 2023 16:27:53 +0000 RICHET Yann 
>>>>> <yann.richet at irsn.fr> wrote:
>>>>>
>>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, 
>>>>>> which backs to two threads as warned.
>>>>>
>>>>> I think you're right about your tests de-facto using two threads, 
>>>>> but it might be a good idea to _default_ to up to two threads in 
>>>>> tests and examples. This is especially valuable for third-party 
>>>>> developers who have to mass-test packages (one of which could be
>>>>> rlibkriging) in parallel.
>>>>>
>>>>>> - is there any reason that could explain that fedora-*-devel is 
>>>>>> so slow for this package or compilation of Rcpp/testthat ?
>>>>>
>>>>> Compilation time is definitely not the reason. Something in 
>>>>> tests/* actually runs for 30 minutes by itself.
>>>>>
>>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>>
>>>>> If you split your tests into separate files under tests/*.R 
>>>>> instead of using a single tests/testthat.R calling the rest of the 
>>>>> tests, R will be able to show you the individual test file that 
>>>>> hung and maybe the line where it happened. (Also, you'll get 
>>>>> per-file
>>>>> timing.) But that is potentially a huge investment: you may have 
>>>>> to rewrite the tests to work outside the testthat harness, and 
>>>>> you'd also have to prepare another CRAN submission just to have 
>>>>> those tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>>
>>>>> (Currently, R can only tell you that the tests hung in the
>>>>> test_check('rlibkriging') call in the tests/testthat.R, which 
>>>>> isn't precise enough.)
>>>>
>>>> You can specify a different "reporter" in the test_check() call, 
>>>> and it will print more useful information.? I don't think there's a 
>>>> perfect one, but
>>>>
>>>>     ? test_check('rlibkriging', reporter = "progress")
>>>>
>>>> should at least show you the tests that finished running before the 
>>>> timeout.
>>>
>>> I had similar problems with testthat and timeouts when mass-checking 
>>> packages on patched R versions. My notes say
>>>
>>>> ## testthat's 'LocationReporter' does cat() after each expectation 
>>>> ## so we can see results even if timeout is reached 
>>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>>
>>> The help("LocationReporter") says: "This reporter simply prints the 
>>> location of every expectation and error. This is useful if you're 
>>> trying to figure out the source of a segfault, or you want to figure 
>>> out which code triggers a C/C++ breakpoint"
>>>
>>> HTH!
>>
>> Yes, that looks like it would pin down the location of the problem.
>> Here's some sample output from it:
>>
>>      Running ?testthat.R? [41s/42s]
>> Running the tests in ?tests/testthat.R? failed.
>> Last 13 lines of output:
>>      Start test: can use constructed calls in verify_output() (#945)
>>        'test-verify-output.R:55' [success]
>>      End test: can use constructed calls in verify_output() (#945)
>>
>>      Start test: verify_output() doesn't use cli unicode by default
>>        'test-verify-output.R:65' [success]
>>        'test-verify-output.R:73' [success]
>>      End test: verify_output() doesn't use cli unicode by default
>>
>>      Start test: verify_output() handles carriage return
>>        'test-verify-output.R:82' [success]
>>      End test: verify_output() handles carriage return
>>
>>      Error: Test failures
>>      Execution halted
>>
>> One other thing:  you enabled this by using
>>
>>      options(testthat.default_check_reporter = c("Location", 
>> "Check"))
>>
>> before running the tests; the package writer could do the same thing 
>> by using
>>
>>      test_check('rlibkriging', reporter = c("Location", "Check"))
>>
>> Duncan Murdoch
> 


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri Jan 13 11:11:44 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Fri, 13 Jan 2023 11:11:44 +0100
Subject: [Rd] Combinations and Permutations
In-Reply-To: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>
References: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>
Message-ID: <e7ce1401-434d-90a4-f7ca-ff995dce3bdc@insa-toulouse.fr>

Le 13/01/2023 ? 09:00, Dario Strbenac via R-devel a ?crit?:
> Good day,
>
> In utils, there is a function named combn. It would seem complementary for utils to also offer permutations because of how closely mathematically related they are to each other. Could permutations be added to save on a package dependency if developing a package?
If you need a function returning a matrix with all permutations of a 
vector x in its columns, a simple recursive one-liner can be sufficient, 
no need for a whole package dependency for this:

 ?? perm=function(x) {n=length(x); f=factorial(n); if (n>1) 
structure(vapply(seq_along(x), function(i) rbind(x[i], perm(x[-i])), 
x[rep(1L, f)]), dim=c(n, f)) else x}

It works for all king of vectors (integer, numeric, character, ...):

 ?? perm(1:3)
 ?? perm(pi*1:3)
 ?? perm(letters[1:3])

Obviously, a particular attention should be brought to the size of x 
(referred here as n) as the column number in the returned matrix growths 
as n!.. E.g. 8!=40320. So growths the cpu time too.

Hoping it helps,
Serguei.

>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri Jan 13 16:13:08 2023
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 13 Jan 2023 09:13:08 -0600
Subject: [Rd] Combinations and Permutations
In-Reply-To: <e7ce1401-434d-90a4-f7ca-ff995dce3bdc@insa-toulouse.fr>
References: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>
 <e7ce1401-434d-90a4-f7ca-ff995dce3bdc@insa-toulouse.fr>
Message-ID: <a35d3a76-021b-1386-1bbb-63daba679ec1@prodsyse.com>



On 1/13/23 4:11 AM, Serguei Sokol via R-devel wrote:
> Le 13/01/2023 ? 09:00, Dario Strbenac via R-devel a ?crit?:
>> Good day,
>>
>> In utils, there is a function named combn. It would seem complementary 
>> for utils to also offer permutations because of how closely 
>> mathematically related they are to each other. Could permutations be 
>> added to save on a package dependency if developing a package?
> If you need a function returning a matrix with all permutations of a 
> vector x in its columns, a simple recursive one-liner can be sufficient, 
> no need for a whole package dependency for this:
> 
>  ?? perm=function(x) {n=length(x); f=factorial(n); if (n>1) 
> structure(vapply(seq_along(x), function(i) rbind(x[i], perm(x[-i])), 
> x[rep(1L, f)]), dim=c(n, f)) else x}
> 
> It works for all king of vectors (integer, numeric, character, ...):
> 
>  ?? perm(1:3)
>  ?? perm(pi*1:3)
>  ?? perm(letters[1:3])
> 
> Obviously, a particular attention should be brought to the size of x 
> (referred here as n) as the column number in the returned matrix growths 
> as n!.. E.g. 8!=40320. So growths the cpu time too.


	  What about "combinat::permn"?


	  Spencer Graves

> 
> Hoping it helps,
> Serguei.
> 
>>
>> --------------------------------------
>> Dario Strbenac
>> University of Sydney
>> Camperdown NSW 2050
>> Australia
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


