From Andre@G||||bert @end|ng |rom chu-rouen@|r  Tue Jan  3 12:56:37 2023
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Tue, 3 Jan 2023 11:56:37 +0000
Subject: [Rd] Bug in optim for specific orders of magnitude
In-Reply-To: <3475cfd9-06a2-39c1-bb8d-ab69932c4306@gmail.com>
References: <CAP6aD9d+A9h8FfAX1On29Oo2979HeiWSQMg=dxBSAu_zJNXTqQ@mail.gmail.com>
 <6722312a-0975-23db-ebce-2466971317bb@sapo.pt>
 <3475cfd9-06a2-39c1-bb8d-ab69932c4306@gmail.com>
Message-ID: <1b44379526744a5aa448c23132a7bf9d@chu-rouen.fr>


J C Nash wrote:
> Extreme scaling quite often ruins optimization calculations. If you think available methods are capable of doing this, there's a bridge I can sell you in NYC.

Given that optim()seems to have problem with denormals but work correctly with values greater than 1e-308, I think that it can hardly be considered a real bug.

There is no miracle solution, but there are a few tricks to work with extreme values.
What I call "flogs" are alternative representation of a number x as log(abs(x)) and sign(x). It supports very large and very small numbers, but the precision of flogs is very poor for very large numbers. Functions for addition, substraction, multiplication, etc, can easily be written.

For values that are between 0 and 1 and can be extremely close to 0 or extremely close to 1, a cloglog transformations can be used.

Another trick is to detect "hot points". Values that can be extremely close to hot points should be expressed as differences to the hot point, and the algorithm should be re-written to work with that, which is not always easy to do. For instance, the function log1p can be seen as a modification of the log function when the hot point is 1. 

In my experience, the algorithm should be rewritten before having to deal with denormals, because denormals expand the range of floating point values by a quite small amount.

-- 
Sincerely
Andr? GILLIBERT

From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue Jan  3 21:25:18 2023
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Tue, 3 Jan 2023 20:25:18 +0000
Subject: [Rd] R 4.2.2 on Haiku
Message-ID: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>

Hi all,

Not sure if this is of interest to anybody, but with the help of some kind folks over at the #haiku channel on IRC, I finally got the current version of R to compile under the Haiku operating system (https://www.haiku-os.org):

https://scholar.social/@wviechtb/109627078225954444

Kate (https://kate-editor.org) makes for a workable IDE allowing for REPL-like interactivity. X11 support is lacking, so graphs are directly created as pdfs, but this is workable.

In case you want to give this a try, it's pretty much this:

pkgman install gcc_fortran bzip2_devel lrzip_devel xz_utils_devel libpcre2_devel libiconv_devel curl_devel readline_devel tiff4_devel libtool ncurses6_devel libpaper_devel lapack_devel tcl_devel xcairo_devel pangomm_devel

wget https://cran.r-project.org/src/base/R-4/R-4.2.2.tar.gz

tar -xzf R-4.2.2.tar.gz
cd R-4.2.2

export CPPFLAGS="-D_BSD_SOURCE"
export LIBS="-lnetwork -lbsd"

./configure --with-x=no --disable-java --enable-R-shlib --prefix=/boot/home/<wherever>
make
make install

Best,
Wolfgang

-- 
Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and    
Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD    
Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com    


From yugong @end|ng |rom out|ook@com  Wed Jan  4 00:33:18 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Tue, 3 Jan 2023 23:33:18 +0000
Subject: [Rd] =?utf-8?b?5Zue5aSNOiBSIDQuMi4yIG9uIEhhaWt1?=
In-Reply-To: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>
References: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>
Message-ID: <TYAP286MB02688574948197B20FA609FDD1F49@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

thank you very much,  use R on haiku-os several times before. the OS is fast and eye-candy, just release beta 4 before new year.
when use R on haiku-os, some package will compiled failed(cairo for example) ,but most package work seamlessly.

btw, about R on haiku-os , Maybe you could create a git push on haikuports?
haikuports/dev-lang/r at master ? haikuports/haikuports (github.com)<https://github.com/haikuports/haikuports/tree/master/dev-lang/r>
?
[https://opengraph.githubassets.com/99315a64241d0f1906ef7bc8d4dab63cc45fb5bb90c51b40d0537e663fca4096/haikuports/haikuports]<https://github.com/haikuports/haikuports/tree/master/dev-lang/r>
haikuports/dev-lang/r at master ? haikuports/haikuports<https://github.com/haikuports/haikuports/tree/master/dev-lang/r>
Software ports for the Haiku operating system. Contribute to haikuports/haikuports development by creating an account on GitHub.
github.com



Yu Gong

________________________________
???: R-devel <r-devel-bounces at r-project.org> ?? Viechtbauer, Wolfgang (NP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
????: 2023?1?4? 4:25
???: R Devel List <r-devel at r-project.org>
??: [Rd] R 4.2.2 on Haiku

Hi all,

Not sure if this is of interest to anybody, but with the help of some kind folks over at the #haiku channel on IRC, I finally got the current version of R to compile under the Haiku operating system (https://www.haiku-os.org):

https://scholar.social/@wviechtb/109627078225954444

Kate (https://kate-editor.org) makes for a workable IDE allowing for REPL-like interactivity. X11 support is lacking, so graphs are directly created as pdfs, but this is workable.

In case you want to give this a try, it's pretty much this:

pkgman install gcc_fortran bzip2_devel lrzip_devel xz_utils_devel libpcre2_devel libiconv_devel curl_devel readline_devel tiff4_devel libtool ncurses6_devel libpaper_devel lapack_devel tcl_devel xcairo_devel pangomm_devel

wget https://cran.r-project.org/src/base/R-4/R-4.2.2.tar.gz

tar -xzf R-4.2.2.tar.gz
cd R-4.2.2

export CPPFLAGS="-D_BSD_SOURCE"
export LIBS="-lnetwork -lbsd"

./configure --with-x=no --disable-java --enable-R-shlib --prefix=/boot/home/<wherever>
make
make install

Best,
Wolfgang

--
Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and
Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD
Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Wed Jan  4 11:49:02 2023
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Wed, 4 Jan 2023 11:49:02 +0100
Subject: [Rd] new toolchain "RTools43" for building devel binaries (both R
 base and packages)
Message-ID: <284e50b3-eff2-e6b2-469d-312a83db8d33@statistik.tu-dortmund.de>

Dear developers,

for those building from source on Windows:

A new toolchain called "RTools43" has been prepared by Tomas Kalibera.
It is now used to build the Windows binaries (R base and contributed 
packages) for R-devel on Windows. See
<https://cran.r-project.org/bin/windows/Rtools/rtools43/rtools.html>.

Best,
Uwe Ligges


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Wed Jan  4 13:35:25 2023
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Wed, 4 Jan 2023 12:35:25 +0000
Subject: [Rd] Hash table plans
Message-ID: <2b4d0b5f-2ce6-7800-ffb2-41e4cdf0daee@hiddenelephants.co.uk>

I note in r-devel the hash table functionality is still marked as 
experimental. Is it expected that this will progress to non-experimental 
in 4.3 or is there a need for more feedback from the wider community first?

Tim


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan  5 21:19:16 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 5 Jan 2023 15:19:16 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
Message-ID: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>

I'm in the process of a fairly large overhaul of the exports from the 
rgl package, with an aim of simplifying maintenance of the package. 
During this work, I came across the reverse dependency geomorph that 
calls the rgl.primitive function.

I had forgotten that rgl.primitive was still exported:  I've been 
thinking of it as an internal function for a few years now.  I was 
surprised geomorph was able to call it.

Particularly surprising to me was the fact that it is not properly 
documented.  One of the help topics lists it as an alias, but it 
contains no usage info, and is not mentioned in the .Rd file other than 
the alias.  And yet "R CMD check rgl" has never complained about it.

Is this intentional?

Duncan Murdoch


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Fri Jan  6 04:10:42 2023
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Fri, 6 Jan 2023 08:40:42 +0530
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
Message-ID: <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>

On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> I'm in the process of a fairly large overhaul of the exports from the
> rgl package, with an aim of simplifying maintenance of the package.
> During this work, I came across the reverse dependency geomorph that
> calls the rgl.primitive function.
>
> I had forgotten that rgl.primitive was still exported:  I've been
> thinking of it as an internal function for a few years now.  I was
> surprised geomorph was able to call it.
>
> Particularly surprising to me was the fact that it is not properly
> documented.  One of the help topics lists it as an alias, but it
> contains no usage info, and is not mentioned in the .Rd file other than
> the alias.  And yet "R CMD check rgl" has never complained about it.
>
> Is this intentional?

Does the Rd file that documents it have \keyword{internal}? These are
not checked fully (as I realized recently while working on the help
system), and I guess that's intentional.

Best,
-Deepayan

>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From yugong @end|ng |rom out|ook@com  Fri Jan  6 05:24:43 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Fri, 6 Jan 2023 04:24:43 +0000
Subject: [Rd] patch about timezone name of China Standard Time  on windows
Message-ID: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Last week ,I report a issuse about  timezone name about" China Standard Time", R on windows will report to Asia/Taipei , but it should be Asia/Shanghai,
Since  still now  no feedback (maybe because for my poor english). So resubmit a patch about this .

Change it from Asia/Taipei to Asia/Shanghai could veryfied from
1  tzutil (this is windows buildin command  made by microsoft )  , run tzutil /l , it show  " China Standard Time" is (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi  (AKA Asia/Shanghai on linux)? and furthermore , tzutil /l also report   Taipei Standard Time (Asia/Taipei) , so Sys.timezone() report  " China Standard Time" to Asia/Taipei indeed uncorrect.

2  timezone and their definition on window could found on microsoft website
   https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-10

   in this document , it also show " China Standard Time" is (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi  (AKA Asia/Shanghai on linux) ,

3  also in unicode org web , the lastest document about time also support this patch
https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html

  China Standard Time   Asia/Shanghai

and in current R implemention , it report " China Standard Time" is incorrect ,but "Taipei Standard Time" is correct, so this patch only need modify " China Standard Time" and will not affect other timezone.

please feel free to share your thoughts or feedbacks of this patch

Index: src/extra/tzone/registryTZ.c
===================================================================
--- src/extra/tzone/registryTZ.c????(revision 83566)
+++ src/extra/tzone/registryTZ.c????(working copy)
@@ -51,7 +51,7 @@
     { L"Central Pacific Standard Time", "Pacific/Guadalcanal" },
     { L"Central Standard Time", "America/Chicago" },
     { L"Central Standard Time (Mexico)", "America/Mexico_City" },
-    { L"China Standard Time", "Asia/Taipei" },
+    { L"China Standard Time", "Asia/Shanghai" },
     { L"Dateline Standard Time", "Pacific/Kwajalein" },
     { L"E. Africa Standard Time", "Africa/Nairobi" },
     { L"E. Australia Standard Time", "Australia/Brisbane" },





Yu Gong




From kry|ov@r00t @end|ng |rom gm@||@com  Fri Jan  6 08:26:57 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 6 Jan 2023 10:26:57 +0300
Subject: [Rd] 
 patch about timezone name of China Standard Time  on windows
In-Reply-To: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <20230106102657.1085ecff@Tarkus>

Hello Yu Gong!

I'm not an R developer, but I hope I'll be able to help you with my
advice.

On Fri, 6 Jan 2023 04:24:43 +0000
gong yu <yugong at outlook.com> wrote:

> Last week ,I report a issuse about  timezone name about" China
> Standard Time", R on windows will report to Asia/Taipei , but it
> should be Asia/Shanghai, Since  still now  no feedback (maybe because
> for my poor english). So resubmit a patch about this .

Sometimes, everyone is too busy to discuss a patch right now, but a
patch just left on R-devel may be eventually forgotten before there's
time for discussion. Try asking for a Bugzilla account (by following
the guide at <https://www.r-project.org/bugs.html>) and submitting the
patch there.

> and in current R implemention , it report " China Standard Time" is
> incorrect ,but "Taipei Standard Time" is correct, so this patch only
> need modify " China Standard Time" and will not affect other timezone.

Thank you for verifying this. As far as I can tell, the file has always
contained both entries referring to "Asia/Taipei":
https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c

-- 
Best regards,
Ivan


From yugong @end|ng |rom out|ook@com  Fri Jan  6 10:17:54 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Fri, 6 Jan 2023 09:17:54 +0000
Subject: [Rd] =?gb2312?b?u9i4tDogIHBhdGNoIGFib3V0IHRpbWV6b25lIG5hbWUgb2Yg?=
 =?gb2312?b?Q2hpbmEgU3RhbmRhcmQgVGltZSAgb24gd2luZG93cw==?=
In-Reply-To: <20230106102657.1085ecff@Tarkus>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
Message-ID: <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Thanks Ivan!
I  really missed the information on   https://www.r-project.org/bugs.html .  Instead ,  browse https://bugs.r-project.org<https://bugs.r-project.org/> and didn't found where to registration and login, then send email to this list.
will send a email to bug-report-request at r-project.org.
for two  entries in  registryTZ.c<https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c>  , the China Standard Time is incorrect ,but Taipei Standard Tim is ok

Best regards,
Yu Gong



________________________________
??????: Ivan Krylov <krylov.r00t at gmail.com>
???????: 2023??1??6?? 15:26
?????: gong yu <yugong at outlook.com>
????: r-devel at r-project.org <r-devel at r-project.org>
????: Re: [Rd] patch about timezone name of China Standard Time on windows

Hello Yu Gong!

I'm not an R developer, but I hope I'll be able to help you with my
advice.

On Fri, 6 Jan 2023 04:24:43 +0000
gong yu <yugong at outlook.com> wrote:

> Last week ,I report a issuse about  timezone name about" China
> Standard Time", R on windows will report to Asia/Taipei , but it
> should be Asia/Shanghai, Since  still now  no feedback (maybe because
> for my poor english). So resubmit a patch about this .

Sometimes, everyone is too busy to discuss a patch right now, but a
patch just left on R-devel may be eventually forgotten before there's
time for discussion. Try asking for a Bugzilla account (by following
the guide at <https://www.r-project.org/bugs.html>) and submitting the
patch there.

> and in current R implemention , it report " China Standard Time" is
> incorrect ,but "Taipei Standard Time" is correct, so this patch only
> need modify " China Standard Time" and will not affect other timezone.

Thank you for verifying this. As far as I can tell, the file has always
contained both entries referring to "Asia/Taipei":
https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c

--
Best regards,
Ivan

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jan  6 10:47:48 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 6 Jan 2023 04:47:48 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
Message-ID: <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>

On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
> On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> I'm in the process of a fairly large overhaul of the exports from the
>> rgl package, with an aim of simplifying maintenance of the package.
>> During this work, I came across the reverse dependency geomorph that
>> calls the rgl.primitive function.
>>
>> I had forgotten that rgl.primitive was still exported:  I've been
>> thinking of it as an internal function for a few years now.  I was
>> surprised geomorph was able to call it.
>>
>> Particularly surprising to me was the fact that it is not properly
>> documented.  One of the help topics lists it as an alias, but it
>> contains no usage info, and is not mentioned in the .Rd file other than
>> the alias.  And yet "R CMD check rgl" has never complained about it.
>>
>> Is this intentional?
> 
> Does the Rd file that documents it have \keyword{internal}? These are
> not checked fully (as I realized recently while working on the help
> system), and I guess that's intentional.

No, not marked internal.  Here's a simple example:  a package that 
exports f and g, and has only one help page:

---------------------
NAMESPACE:
---------------------
export(f, g)
---------------------

---------------------
R/source.R:
---------------------
f <- function() "this is f"

g <- function() "this is g"
---------------------

---------------------
man/f.Rd:
---------------------
\name{f}
\alias{f}
\alias{g}
\title{
This is f.
}
\description{
This does nothing
}
\usage{
f()
}
---------------------


No complaints about the lack of documentation of g.

Duncan Murdoch


From kev|n@r@coombe@ @end|ng |rom gm@||@com  Fri Jan  6 11:25:19 2023
From: kev|n@r@coombe@ @end|ng |rom gm@||@com (Kevin Coombes)
Date: Fri, 6 Jan 2023 05:25:19 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
 <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
Message-ID: <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>

I am fairly certain that the check for documentation is really just a check
for the presence of the function name in an "alias" line. My circumstantial
evidence, from a package in the early stages of development, came from
changing the name of a function. I updated everything else (usage,
examples, etc.) but forgot to change the alias. Got a warning that the
newly named function was not documented. It took me a while to figure out
why R CMD check was still complaining.

I am also pretty sure that, when looking for help in at least one existing
package (can't remember which one), I clicked on the link and got sent to a
page that said absolutely nothing about the function I was interested in.

On Fri, Jan 6, 2023, 4:48 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
> > On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> >>
> >> I'm in the process of a fairly large overhaul of the exports from the
> >> rgl package, with an aim of simplifying maintenance of the package.
> >> During this work, I came across the reverse dependency geomorph that
> >> calls the rgl.primitive function.
> >>
> >> I had forgotten that rgl.primitive was still exported:  I've been
> >> thinking of it as an internal function for a few years now.  I was
> >> surprised geomorph was able to call it.
> >>
> >> Particularly surprising to me was the fact that it is not properly
> >> documented.  One of the help topics lists it as an alias, but it
> >> contains no usage info, and is not mentioned in the .Rd file other than
> >> the alias.  And yet "R CMD check rgl" has never complained about it.
> >>
> >> Is this intentional?
> >
> > Does the Rd file that documents it have \keyword{internal}? These are
> > not checked fully (as I realized recently while working on the help
> > system), and I guess that's intentional.
>
> No, not marked internal.  Here's a simple example:  a package that
> exports f and g, and has only one help page:
>
> ---------------------
> NAMESPACE:
> ---------------------
> export(f, g)
> ---------------------
>
> ---------------------
> R/source.R:
> ---------------------
> f <- function() "this is f"
>
> g <- function() "this is g"
> ---------------------
>
> ---------------------
> man/f.Rd:
> ---------------------
> \name{f}
> \alias{f}
> \alias{g}
> \title{
> This is f.
> }
> \description{
> This does nothing
> }
> \usage{
> f()
> }
> ---------------------
>
>
> No complaints about the lack of documentation of g.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jan  6 11:57:58 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 6 Jan 2023 05:57:58 -0500
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
 <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
 <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>
Message-ID: <d5fb9c50-52b6-8e30-3e8c-df56f842b2c2@gmail.com>

On 06/01/2023 5:25 a.m., Kevin Coombes wrote:
> I am fairly certain that the check for documentation is really just a 
> check for the presence of the function name in an "alias" line. 

Yes, that's what the test does, and that's fine.  The problem is with 
the usage test in tools::codoc().  If I had incorrect arguments 
specified for a documented function, I'd be warned.  If I skip the usage 
docs completely, I am not warned.	

I think the test belongs around here in the source:

https://github.com/r-devel/r-svn/blob/b57918fd104962415a752ea7db12dcf4f3f5219f/src/library/tools/R/QC.R#L585

If you look there, you see a variable named 
"functions_in_usages_not_in_code" but nothing named 
"functions_in_code_not_in_usages".

Duncan Murdoch


My
> circumstantial evidence, from a package in the early stages of 
> development, came from changing the name of a function. I updated 
> everything else (usage, examples, etc.) but forgot to change the alias. 
> Got a warning that the newly named function was not documented. It took 
> me a while to figure out why R CMD check was still complaining.
> 
> I am also pretty sure that, when looking for help in at least one 
> existing package (can't remember which one), I clicked on the link and 
> got sent to a page that said absolutely nothing about the function I was 
> interested?in.
> 
> On Fri, Jan 6, 2023, 4:48 AM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
>      > On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch
>     <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>> wrote:
>      >>
>      >> I'm in the process of a fairly large overhaul of the exports
>     from the
>      >> rgl package, with an aim of simplifying maintenance of the package.
>      >> During this work, I came across the reverse dependency geomorph that
>      >> calls the rgl.primitive function.
>      >>
>      >> I had forgotten that rgl.primitive was still exported:? I've been
>      >> thinking of it as an internal function for a few years now.? I was
>      >> surprised geomorph was able to call it.
>      >>
>      >> Particularly surprising to me was the fact that it is not properly
>      >> documented.? One of the help topics lists it as an alias, but it
>      >> contains no usage info, and is not mentioned in the .Rd file
>     other than
>      >> the alias.? And yet "R CMD check rgl" has never complained about it.
>      >>
>      >> Is this intentional?
>      >
>      > Does the Rd file that documents it have \keyword{internal}? These are
>      > not checked fully (as I realized recently while working on the help
>      > system), and I guess that's intentional.
> 
>     No, not marked internal.? Here's a simple example:? a package that
>     exports f and g, and has only one help page:
> 
>     ---------------------
>     NAMESPACE:
>     ---------------------
>     export(f, g)
>     ---------------------
> 
>     ---------------------
>     R/source.R:
>     ---------------------
>     f <- function() "this is f"
> 
>     g <- function() "this is g"
>     ---------------------
> 
>     ---------------------
>     man/f.Rd:
>     ---------------------
>     \name{f}
>     \alias{f}
>     \alias{g}
>     \title{
>     This is f.
>     }
>     \description{
>     This does nothing
>     }
>     \usage{
>     f()
>     }
>     ---------------------
> 
> 
>     No complaints about the lack of documentation of g.
> 
>     Duncan Murdoch
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jan  6 23:36:04 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 7 Jan 2023 11:36:04 +1300
Subject: [Rd] 
 patch about timezone name of China Standard Time  on windows
In-Reply-To: <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>

Just a quick comment here - this is not as easy as it sounds, because the code is in the "extra" directory which means it is based on upstream sources, so those sources are typically not patched manually as it would be hard to apply upstream updates. In this case the standards have changed since the last update, so the way to go about this would be to upgrade according to latest sources and standards as it's quite possible that the issue has been addressed there. However, such update is quite time-consuming process as we have to make sure that the standards are matched and changes have not broken something in R. So you can file an issue so this is on record, but I wouldn't include patches since they cannot be applied directly for reasons explained as it has to be done as a part of the full update, not just a single entry.

Cheers,
Simon


> On Jan 6, 2023, at 10:17 PM, gong yu <yugong at outlook.com> wrote:
> 
> Thanks Ivan!
> I  really missed the information on   https://www.r-project.org/bugs.html .  Instead ,  browse https://bugs.r-project.org<https://bugs.r-project.org/> and didn't found where to registration and login, then send email to this list.
> will send a email to bug-report-request at r-project.org.
> for two  entries in  registryTZ.c<https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c>  , the China Standard Time is incorrect ,but Taipei Standard Tim is ok
> 
> Best regards,
> Yu Gong
> 
> 
> 
> ________________________________
> ???: Ivan Krylov <krylov.r00t at gmail.com>
> ????: 2023?1?6? 15:26
> ???: gong yu <yugong at outlook.com>
> ??: r-devel at r-project.org <r-devel at r-project.org>
> ??: Re: [Rd] patch about timezone name of China Standard Time on windows
> 
> Hello Yu Gong!
> 
> I'm not an R developer, but I hope I'll be able to help you with my
> advice.
> 
> On Fri, 6 Jan 2023 04:24:43 +0000
> gong yu <yugong at outlook.com> wrote:
> 
>> Last week ,I report a issuse about  timezone name about" China
>> Standard Time", R on windows will report to Asia/Taipei , but it
>> should be Asia/Shanghai, Since  still now  no feedback (maybe because
>> for my poor english). So resubmit a patch about this .
> 
> Sometimes, everyone is too busy to discuss a patch right now, but a
> patch just left on R-devel may be eventually forgotten before there's
> time for discussion. Try asking for a Bugzilla account (by following
> the guide at <https://www.r-project.org/bugs.html>) and submitting the
> patch there.
> 
>> and in current R implemention , it report " China Standard Time" is
>> incorrect ,but "Taipei Standard Time" is correct, so this patch only
>> need modify " China Standard Time" and will not affect other timezone.
> 
> Thank you for verifying this. As far as I can tell, the file has always
> contained both entries referring to "Asia/Taipei":
> https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c
> 
> --
> Best regards,
> Ivan
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From yugong @end|ng |rom out|ook@com  Sat Jan  7 01:17:23 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Sat, 7 Jan 2023 00:17:23 +0000
Subject: [Rd] =?gb2312?b?tPC4tDogIHBhdGNoIGFib3V0IHRpbWV6b25lIG5hbWUgb2Yg?=
 =?gb2312?b?Q2hpbmEgU3RhbmRhcmQgVGltZSAgb24gd2luZG93cw==?=
In-Reply-To: <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
Message-ID: <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

understand your concerns.
for registerTZ.c itself , IMHO , the most important part is the definition of tztable[] .  which come form http://unicode.org/cldr/data/diff/supplemental/windows_tzid.html ,but it can??t access now, the lasted version is https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html.

maybe  we need write a script  or small tools  , use it sync with unicode standard and microsoft registery or tzutil , to generate tztable definition?
will this better than current way? if it is i
will try it in next 1-2 weeks.

best regards
Yu Gong
________________________________
??????: Simon Urbanek <simon.urbanek at R-project.org>
???????: 2023??1??7?? 6:36
?????: gong yu <yugong at outlook.com>
????: Ivan Krylov <krylov.r00t at gmail.com>; r-devel at r-project.org <r-devel at r-project.org>
????: Re: [Rd] patch about timezone name of China Standard Time on windows

Just a quick comment here - this is not as easy as it sounds, because the code is in the "extra" directory which means it is based on upstream sources, so those sources are typically not patched manually as it would be hard to apply upstream updates. In this case the standards have changed since the last update, so the way to go about this would be to upgrade according to latest sources and standards as it's quite possible that the issue has been addressed there. However, such update is quite time-consuming process as we have to make sure that the standards are matched and changes have not broken something in R. So you can file an issue so this is on record, but I wouldn't include patches since they cannot be applied directly for reasons explained as it has to be done as a part of the full update, not just a single entry.

Cheers,
Simon


> On Jan 6, 2023, at 10:17 PM, gong yu <yugong at outlook.com> wrote:
>
> Thanks Ivan!
> I  really missed the information on   https://www.r-project.org/bugs.html .  Instead ,  browse [https://bugs.r-project.org<https://bugs.r-project.org/>]https://bugs.r-project.org<https://bugs.r-project.org/> and didn't found where to registration and login, then send email to this list.
> will send a email to bug-report-request at r-project.org.
> for two  entries in  registryTZ.c<https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c>  , the China Standard Time is incorrect ,but Taipei Standard Tim is ok
>
> Best regards,
> Yu Gong
>
>
>
> ________________________________
> ??????: Ivan Krylov <krylov.r00t at gmail.com>
> ???????: 2023??1??6?? 15:26
> ?????: gong yu <yugong at outlook.com>
> ????: r-devel at r-project.org <r-devel at r-project.org>
> ????: Re: [Rd] patch about timezone name of China Standard Time on windows
>
> Hello Yu Gong!
>
> I'm not an R developer, but I hope I'll be able to help you with my
> advice.
>
> On Fri, 6 Jan 2023 04:24:43 +0000
> gong yu <yugong at outlook.com> wrote:
>
>> Last week ,I report a issuse about  timezone name about" China
>> Standard Time", R on windows will report to Asia/Taipei , but it
>> should be Asia/Shanghai, Since  still now  no feedback (maybe because
>> for my poor english). So resubmit a patch about this .
>
> Sometimes, everyone is too busy to discuss a patch right now, but a
> patch just left on R-devel may be eventually forgotten before there's
> time for discussion. Try asking for a Bugzilla account (by following
> the guide at <https://www.r-project.org/bugs.html>) and submitting the
> patch there.
>
>> and in current R implemention , it report " China Standard Time" is
>> incorrect ,but "Taipei Standard Time" is correct, so this patch only
>> need modify " China Standard Time" and will not affect other timezone.
>
> Thank you for verifying this. As far as I can tell, the file has always
> contained both entries referring to "Asia/Taipei":
> https://github.com/r-devel/r-svn/blame/22bf3a2cb1dd6844e69c9214d990bf438a485db7/src/extra/tzone/registryTZ.c
>
> --
> Best regards,
> Ivan
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From @ndre_m|ku|ec @end|ng |rom hotm@||@com  Sun Jan  8 06:12:33 2023
From: @ndre_m|ku|ec @end|ng |rom hotm@||@com (Andre Mikulec)
Date: Sun, 8 Jan 2023 05:12:33 +0000
Subject: [Rd] Looking for R for Windows (rversion: 4.2.2) in
 base/old/%rversion%/R-%rversion%-win.exe
Message-ID: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>

Peter Dalgaard, R-devel team, et al.,

Hi, my name is Andre Mikulec.

I am an `common` committer to Postgres PL/R . . .
https://github.com/postgres-plr/plr/commits?author=AndreMikulec

https://github.com/postgres-plr/plr
`PL/R - PostgreSQL support for R as a procedural language (PL)`

However, now and different from the past,
the `windows/base/old` R 4.2.2 download location URL link now, redirects to the wrong `R 4.2.1` location.

Historically,
Previous and Current(still called `old`) Windows versions of R
have been stored here (below) and the current(old) version of R would have been 4.2.2. and would have pointed to R 4.2.2.

https://cran.r-project.org/bin/windows/base/old/

```
In this directory (and its URL redirect (->)):
R 4.2.2 (October, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1 (NEED 4.2.2)
R 4.2.1 (June, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1/
```

So, something has changed `R 4.2.2 (October, 2022)` now redirects to `base/old/4.2.1`.

Now and in the past, Appveyor builds of PL/R rely a specific version of R in an exact location:

https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L25
```
 - pg: REL_15_0
    PlatformToolset: v141
    configuration: Release
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.2.1
```

Notice (above and) below the variable `rversion: 4.2.1`
and the hard coded location `base/old/%rversion%/R-%rversion%-win.exe`.

https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L108
```
- if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
```

E.g. the most recent PL/R build (a month ago) using R 4.2.1
`PL/R - PostgreSQL support for R as a procedural language (PL)` build:

https://ci.appveyor.com/project/davecramer/plr-daun5/build/job/7lqs9pkgartjhxwt?fullLog=true#L15
```
Cache 'R-4.2.1-win.exe' - Restored
Running Install scripts
if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
R-%rversion%-win.exe /VERYSILENT
```

Now, where may One find a `specific version of R in an exact location`?

Please help.

Thanks,
Andre Mikulec


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Sun Jan  8 15:23:08 2023
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sun, 8 Jan 2023 15:23:08 +0100
Subject: [Rd] Looking for R for Windows (rversion: 4.2.2) in
 base/old/%rversion%/R-%rversion%-win.exe
In-Reply-To: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>
References: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>
Message-ID: <F8C5E820-C561-4311-AAB1-5C89E7816C6E@gmail.com>

Dunno what happened there, and Win binaries are generally "not my table". However, 4.2.2 is not old, so possibly should not be on that list at all. It is the current version, so can be obtained via the "here" link at the top of the page (i.e. https://cran.r-project.org/bin/windows/base/)

-pd

> On 8 Jan 2023, at 06:12 , Andre Mikulec <andre_mikulec at hotmail.com> wrote:
> 
> Peter Dalgaard, R-devel team, et al.,
> 
> Hi, my name is Andre Mikulec.
> 
> I am an `common` committer to Postgres PL/R . . .
> https://github.com/postgres-plr/plr/commits?author=AndreMikulec
> 
> https://github.com/postgres-plr/plr
> `PL/R - PostgreSQL support for R as a procedural language (PL)`
> 
> However, now and different from the past,
> the `windows/base/old` R 4.2.2 download location URL link now, redirects to the wrong `R 4.2.1` location.
> 
> Historically,
> Previous and Current(still called `old`) Windows versions of R
> have been stored here (below) and the current(old) version of R would have been 4.2.2. and would have pointed to R 4.2.2.
> 
> https://cran.r-project.org/bin/windows/base/old/
> 
> ```
> In this directory (and its URL redirect (->)):
> R 4.2.2 (October, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1 (NEED 4.2.2)
> R 4.2.1 (June, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1/
> ```
> 
> So, something has changed `R 4.2.2 (October, 2022)` now redirects to `base/old/4.2.1`.
> 
> Now and in the past, Appveyor builds of PL/R rely a specific version of R in an exact location:
> 
> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L25
> ```
> - pg: REL_15_0
>    PlatformToolset: v141
>    configuration: Release
>    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
>    rversion: 4.2.1
> ```
> 
> Notice (above and) below the variable `rversion: 4.2.1`
> and the hard coded location `base/old/%rversion%/R-%rversion%-win.exe`.
> 
> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L108
> ```
> - if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
> ```
> 
> E.g. the most recent PL/R build (a month ago) using R 4.2.1
> `PL/R - PostgreSQL support for R as a procedural language (PL)` build:
> 
> https://ci.appveyor.com/project/davecramer/plr-daun5/build/job/7lqs9pkgartjhxwt?fullLog=true#L15
> ```
> Cache 'R-4.2.1-win.exe' - Restored
> Running Install scripts
> if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
> R-%rversion%-win.exe /VERYSILENT
> ```
> 
> Now, where may One find a `specific version of R in an exact location`?
> 
> Please help.
> 
> Thanks,
> Andre Mikulec
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Sun Jan  8 18:55:09 2023
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Sun, 8 Jan 2023 18:55:09 +0100
Subject: [Rd] Not documenting a function and not getting a check error?
In-Reply-To: <d5fb9c50-52b6-8e30-3e8c-df56f842b2c2@gmail.com>
References: <ba02397f-c3f1-bb53-18c8-31aa91f498c2@gmail.com>
 <CADfFDC5KKOt1GJh8SEZXkQJkDF4O7AVze3TLhE4k7ymGfabdJg@mail.gmail.com>
 <515cfe1a-cee1-1434-2ea3-b7f015324658@gmail.com>
 <CAHJ+2VL8aJjvPiObLTWroOFF4iObpaRY639VXqzrumwZeCK5vQ@mail.gmail.com>
 <d5fb9c50-52b6-8e30-3e8c-df56f842b2c2@gmail.com>
Message-ID: <25531.893.594105.806583@hornik.net>

>>>>> Duncan Murdoch writes:

> On 06/01/2023 5:25 a.m., Kevin Coombes wrote:
>> I am fairly certain that the check for documentation is really just a 
>> check for the presence of the function name in an "alias" line. 

> Yes, that's what the test does, and that's fine.  The problem is with
> the usage test in tools::codoc().  If I had incorrect arguments
> specified for a documented function, I'd be warned.  If I skip the
> usage docs completely, I am not warned.

> I think the test belongs around here in the source:

> https://github.com/r-devel/r-svn/blob/b57918fd104962415a752ea7db12dcf4f3f5219f/src/library/tools/R/QC.R#L585

> If you look there, you see a variable named 
> "functions_in_usages_not_in_code" but nothing named 
> "functions_in_code_not_in_usages".

Actually, IIuc the infrastructure is there, but it is not used.
print.codoc() has

    ## In general, functions in the code which only have an \alias but
    ## no \usage entry are not necessarily a problem---they might be
    ## mentioned in other parts of the Rd object documenting them, or be
    ## 'internal'.  However, if a package has a namespace, then all
    ## *exported* functions should have \usage entries (apart from
    ## defunct functions and S4 generics, see the above comments for
    ## functions_missing_from_usages).  Currently, this information is
    ## returned in the codoc object but not shown.  Eventually, we might
    ## add something like
    ##     functions_missing_from_usages <-
    ##         attr(x, "functions_missing_from_usages")
    ##     if(length(functions_missing_from_usages)) {
    ##         writeLines("Exported functions without usage information:")
    ##         .pretty_print(functions_in_code_not_in_usages)
    ##         writeLines("")
    ##     }
    ## similar to the above.

which goes back to sometimes 2009 ...

Best
-k

> Duncan Murdoch


> My
>> circumstantial evidence, from a package in the early stages of 
>> development, came from changing the name of a function. I updated 
>> everything else (usage, examples, etc.) but forgot to change the alias. 
>> Got a warning that the newly named function was not documented. It took 
>> me a while to figure out why R CMD check was still complaining.
>> 
>> I am also pretty sure that, when looking for help in at least one 
>> existing package (can't remember which one), I clicked on the link and 
>> got sent to a page that said absolutely nothing about the function I was 
>> interested?in.
>> 
>> On Fri, Jan 6, 2023, 4:48 AM Duncan Murdoch <murdoch.duncan at gmail.com 
>> <mailto:murdoch.duncan at gmail.com>> wrote:
>> 
>> On 05/01/2023 10:10 p.m., Deepayan Sarkar wrote:
>> > On Fri, Jan 6, 2023 at 1:49 AM Duncan Murdoch
>> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>> wrote:
>> >>
>> >> I'm in the process of a fairly large overhaul of the exports
>> from the
>> >> rgl package, with an aim of simplifying maintenance of the package.
>> >> During this work, I came across the reverse dependency geomorph that
>> >> calls the rgl.primitive function.
>> >>
>> >> I had forgotten that rgl.primitive was still exported:? I've been
>> >> thinking of it as an internal function for a few years now.? I was
>> >> surprised geomorph was able to call it.
>> >>
>> >> Particularly surprising to me was the fact that it is not properly
>> >> documented.? One of the help topics lists it as an alias, but it
>> >> contains no usage info, and is not mentioned in the .Rd file
>> other than
>> >> the alias.? And yet "R CMD check rgl" has never complained about it.
>> >>
>> >> Is this intentional?
>> >
>> > Does the Rd file that documents it have \keyword{internal}? These are
>> > not checked fully (as I realized recently while working on the help
>> > system), and I guess that's intentional.
>> 
>> No, not marked internal.? Here's a simple example:? a package that
>> exports f and g, and has only one help page:
>> 
>> ---------------------
>> NAMESPACE:
>> ---------------------
>> export(f, g)
>> ---------------------
>> 
>> ---------------------
>> R/source.R:
>> ---------------------
>> f <- function() "this is f"
>> 
>> g <- function() "this is g"
>> ---------------------
>> 
>> ---------------------
>> man/f.Rd:
>> ---------------------
>> \name{f}
>> \alias{f}
>> \alias{g}
>> \title{
>> This is f.
>> }
>> \description{
>> This does nothing
>> }
>> \usage{
>> f()
>> }
>> ---------------------
>> 
>> 
>> No complaints about the lack of documentation of g.
>> 
>> Duncan Murdoch
>> 
>> ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> 

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Jan  8 22:56:06 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 9 Jan 2023 10:56:06 +1300
Subject: [Rd] 
 patch about timezone name of China Standard Time  on windows
In-Reply-To: <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
 <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <2D259F9A-6E37-44D9-A04C-66945AB6D0C2@R-project.org>



> On 7/01/2023, at 1:17 PM, gong yu <yugong at outlook.com> wrote:
> 
> understand your concerns.
> for registerTZ.c itself , IMHO , the most important part is the definition of tztable[] .  which come form http://unicode.org/cldr/data/diff/supplemental/windows_tzid.html ,but it can?t access now, the lasted version is https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html.
> 
> maybe  we need write a script  or small tools  , use it sync with unicode standard and microsoft registery or tzutil , to generate tztable definition?
> will this better than current way? if it is i will try it in next 1-2 weeks.
> 

I'm not sure how simple it would be to script this since others have been working on this, but if it was doable it would be a good start. There are others that know more about CLDR than I do.

Cheers,
Simon


From yugong @end|ng |rom out|ook@com  Mon Jan  9 00:58:12 2023
From: yugong @end|ng |rom out|ook@com (gong yu)
Date: Sun, 8 Jan 2023 23:58:12 +0000
Subject: [Rd] =?gb2312?b?tPC4tDogIHBhdGNoIGFib3V0IHRpbWV6b25lIG5hbWUgb2Yg?=
 =?gb2312?b?Q2hpbmEgU3RhbmRhcmQgVGltZSAgb24gd2luZG93cw==?=
In-Reply-To: <2D259F9A-6E37-44D9-A04C-66945AB6D0C2@R-project.org>
References: <TYAP286MB0268B510AA1D33E61F7A39A7D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <20230106102657.1085ecff@Tarkus>
 <TYAP286MB0268DE8C16ADA8BB267927F4D1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <1A72FB16-F6A3-4F28-A8D4-5ADEB0D37842@R-project.org>
 <TYAP286MB0268667489AE050C0C8F4CCDD1FB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <2D259F9A-6E37-44D9-A04C-66945AB6D0C2@R-project.org>
Message-ID: <TYAP286MB02683F259B66677CDD168AA8D1F99@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Search and read some information about windows timezone to Linux timezone mapping this week.
 And found an .net library implement this, https://github.com/mattjohnsonpint/TimeZoneConverter . Question is how to use it?
________________________________
??????: Simon Urbanek <simon.urbanek at R-project.org>
???????: 2023??1??9?? 5:56
?????: gong yu <yugong at outlook.com>
????: r-devel at r-project.org <r-devel at r-project.org>
????: Re: [Rd] patch about timezone name of China Standard Time on windows



> On 7/01/2023, at 1:17 PM, gong yu <yugong at outlook.com> wrote:
>
> understand your concerns.
> for registerTZ.c itself , IMHO , the most important part is the definition of tztable[] .  which come form http://unicode.org/cldr/data/diff/supplemental/windows_tzid.html ,but it can??t access now, the lasted version is https://unicode-org.github.io/cldr-staging/charts/42/supplemental/zone_tzid.html.
>
> maybe  we need write a script  or small tools  , use it sync with unicode standard and microsoft registery or tzutil , to generate tztable definition?
> will this better than current way? if it is i will try it in next 1-2 weeks.
>

I'm not sure how simple it would be to script this since others have been working on this, but if it was doable it would be a good start. There are others that know more about CLDR than I do.

Cheers,
Simon


	[[alternative HTML version deleted]]


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Mon Jan  9 09:32:20 2023
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Mon, 9 Jan 2023 09:32:20 +0100
Subject: [Rd] Looking for R for Windows (rversion: 4.2.2) in
 base/old/%rversion%/R-%rversion%-win.exe
In-Reply-To: <F8C5E820-C561-4311-AAB1-5C89E7816C6E@gmail.com>
References: <SA1PR14MB464299BE2DB514FB72367D069CF99@SA1PR14MB4642.namprd14.prod.outlook.com>
 <F8C5E820-C561-4311-AAB1-5C89E7816C6E@gmail.com>
Message-ID: <bca05ca7-c840-5943-bbce-5b5f4fa1f51f@statistik.tu-dortmund.de>



On 08.01.2023 15:23, Peter Dalgaard wrote:
> Dunno what happened there, and Win binaries are generally "not my table". However, 4.2.2 is not old, so possibly should not be on that list at all. It is the current version, so can be obtained via the "here" link at the top of the page (i.e. https://cran.r-project.org/bin/windows/base/)

Thanks, fixed on my end, will be synced to CRAN during the next run.

Best,
Uwe



> -pd
> 
>> On 8 Jan 2023, at 06:12 , Andre Mikulec <andre_mikulec at hotmail.com> wrote:
>>
>> Peter Dalgaard, R-devel team, et al.,
>>
>> Hi, my name is Andre Mikulec.
>>
>> I am an `common` committer to Postgres PL/R . . .
>> https://github.com/postgres-plr/plr/commits?author=AndreMikulec
>>
>> https://github.com/postgres-plr/plr
>> `PL/R - PostgreSQL support for R as a procedural language (PL)`
>>
>> However, now and different from the past,
>> the `windows/base/old` R 4.2.2 download location URL link now, redirects to the wrong `R 4.2.1` location.
>>
>> Historically,
>> Previous and Current(still called `old`) Windows versions of R
>> have been stored here (below) and the current(old) version of R would have been 4.2.2. and would have pointed to R 4.2.2.
>>
>> https://cran.r-project.org/bin/windows/base/old/
>>
>> ```
>> In this directory (and its URL redirect (->)):
>> R 4.2.2 (October, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1 (NEED 4.2.2)
>> R 4.2.1 (June, 2022) -> https://cran.r-project.org/bin/windows/base/old/4.2.1/
>> ```
>>
>> So, something has changed `R 4.2.2 (October, 2022)` now redirects to `base/old/4.2.1`.
>>
>> Now and in the past, Appveyor builds of PL/R rely a specific version of R in an exact location:
>>
>> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L25
>> ```
>> - pg: REL_15_0
>>     PlatformToolset: v141
>>     configuration: Release
>>     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
>>     rversion: 4.2.1
>> ```
>>
>> Notice (above and) below the variable `rversion: 4.2.1`
>> and the hard coded location `base/old/%rversion%/R-%rversion%-win.exe`.
>>
>> https://github.com/postgres-plr/plr/blob/4ac054e61c62f72a9cd3a38f66476d037b3e27a5/appveyor.yml#L108
>> ```
>> - if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
>> ```
>>
>> E.g. the most recent PL/R build (a month ago) using R 4.2.1
>> `PL/R - PostgreSQL support for R as a procedural language (PL)` build:
>>
>> https://ci.appveyor.com/project/davecramer/plr-daun5/build/job/7lqs9pkgartjhxwt?fullLog=true#L15
>> ```
>> Cache 'R-4.2.1-win.exe' - Restored
>> Running Install scripts
>> if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
>> R-%rversion%-win.exe /VERYSILENT
>> ```
>>
>> Now, where may One find a `specific version of R in an exact location`?
>>
>> Please help.
>>
>> Thanks,
>> Andre Mikulec
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Jan  9 09:37:25 2023
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Mon, 9 Jan 2023 08:37:25 +0000
Subject: [Rd] R 4.2.2 on Haiku
In-Reply-To: <TYAP286MB02688574948197B20FA609FDD1F49@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <8e91fa86638d4ee98d6a3b0477b020bf@UM-MAIL3213.unimaas.nl>
 <TYAP286MB02688574948197B20FA609FDD1F49@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <059246cbfff949ec92cae5d9d7d47b36@UM-MAIL3214.unimaas.nl>

Dear Yu Gong,

Happy to hear that there are others out there trying to use R under Haiku.

Getting packages to compile is a bit hit and miss. Pure R packages are easy, but yes, some packages will fail.

As for haikuports, an updated port is being worked on:

https://github.com/haikuports/haikuports/blob/master/dev-lang/r/r-4.2.2.recipe

Best,
Wolfgang

>-----Original Message-----
>From: gong yu [mailto:yugong at outlook.com]
>Sent: Wednesday, 04 January, 2023 0:33
>To: Viechtbauer, Wolfgang (NP); R Devel List
>Subject: ??: R 4.2.2 on Haiku
>
>thank you very much,??use R on haiku-os?several times before.?the OS is fast and
>eye-candy, just release beta 4 before new year.
>when use R on haiku-os, some package will compiled failed(cairo for example) ,but
>most package work seamlessly.
>
>btw, about R on haiku-os , Maybe you could create a git push on haikuports?
>haikuports/dev-lang/r at master ? haikuports/haikuports (github.com)
>?
>
>haikuports/dev-lang/r at master ? haikuports/haikuports
>Software ports for the Haiku operating system. Contribute to
>haikuports/haikuports development by creating an account on GitHub.
>github.com
>
>Yu Gong
>
>________________________________________
>???: R-devel <r-devel-bounces at r-project.org> ?? Viechtbauer, Wolfgang (NP)
><wolfgang.viechtbauer at maastrichtuniversity.nl>
>????: 2023?1?4? 4:25
>???: R Devel List <r-devel at r-project.org>
>??: [Rd] R 4.2.2 on Haiku
>
>Hi all,
>
>Not sure if this is of interest to anybody, but with the help of some kind folks
>over at the #haiku channel on IRC, I finally got the current version of R to
>compile under the Haiku operating system (https://www.haiku-os.org):
>
>https://scholar.social/@wviechtb/109627078225954444
>
>Kate (https://kate-editor.org) makes for a workable IDE allowing for REPL-like
>interactivity. X11 support is lacking, so graphs are directly created as pdfs,
>but this is workable.
>
>In case you want to give this a try, it's pretty much this:
>
>pkgman install gcc_fortran bzip2_devel lrzip_devel xz_utils_devel libpcre2_devel
>libiconv_devel curl_devel readline_devel tiff4_devel libtool ncurses6_devel
>libpaper_devel lapack_devel tcl_devel xcairo_devel pangomm_devel
>
>wget https://cran.r-project.org/src/base/R-4/R-4.2.2.tar.gz
>
>tar -xzf R-4.2.2.tar.gz
>cd R-4.2.2
>
>export CPPFLAGS="-D_BSD_SOURCE"
>export LIBS="-lnetwork -lbsd"
>
>./configure --with-x=no --disable-java --enable-R-shlib --
>prefix=/boot/home/<wherever>
>make
>make install
>
>Best,
>Wolfgang
>
>--
>Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and
>Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD
>Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com

From ch|r|com @end|ng |rom goog|e@com  Mon Jan  9 21:25:46 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Mon, 9 Jan 2023 12:25:46 -0800
Subject: [Rd] Shouldn't "Loading" be "Attaching" when referring to library()
 calls?
Message-ID: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>

require() and library() both emit this message immediately before
running library():

"Loading required package: %s"

https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L967-L968

https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L684-L685

Shouldn't "Loading" be "Attaching" instead?

My understanding is "a package is loaded" is equivalent to
"isNamespaceLoaded()", i.e., loadNamespace() was run. And that "a
package is attached" is equivalent to "pkg %in% .packages()", i.e.,
library(pkg) was run.

Is the terminology not so precise?

There's certainly ambiguity in the internal variable names referenced
above -- in require, we see

loaded <- paste0("package:", package) %in% search()
https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L680

Whereas in library() [via .getRequiredPackages2()] we see

attached <- paste0("package:", pkg) %in% search()
https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L931

Mike C


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 10 10:26:53 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 10 Jan 2023 10:26:53 +0100
Subject: [Rd] 
 Shouldn't "Loading" be "Attaching" when referring to library()
 calls?
In-Reply-To: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>
References: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>
Message-ID: <25533.12125.780136.352115@stat.math.ethz.ch>

>>>>> Michael Chirico via R-devel 
>>>>>     on Mon, 9 Jan 2023 12:25:46 -0800 writes:

    > require() and library() both emit this message immediately before
    > running library():

    > "Loading required package: %s"

    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L967-L968

    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L684-L685

    > Shouldn't "Loading" be "Attaching" instead?

Good question... I had asked myself as well a couple of times.

The vagueness is mostly "historical" in the sense that
originally R (nor S) had namespaces.
OTOH,  attach(.)  has always worked for data frames (already in pre-R S).

Still, I agree (when teaching and otherwise), we should
clearly distinguish the two notably in the context of packages
and their namespaces.


    > My understanding is "a package is loaded" is equivalent to
    > "isNamespaceLoaded()", i.e., loadNamespace() was run. And that "a
    > package is attached" is equivalent to "pkg %in% .packages()", i.e.,
    > library(pkg) was run.

or (easier for teaching)  that  "package:<pkg>" %in% search()
-- which is what .packages() does {by default}.

I agree with the above.


    > Is the terminology not so precise?

    > There's certainly ambiguity in the internal variable names referenced
    > above -- in require, we see

    > loaded <- paste0("package:", package) %in% search()
    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L680

again, historical:  require() exists for considerably longer
than namespaces.

I think we should at least change the message printed by
require() and library() you mentioned above.

Martin


    > Whereas in library() [via .getRequiredPackages2()] we see

    > attached <- paste0("package:", pkg) %in% search()
    > https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L931

    > Mike C


From y@nn@r|chet @end|ng |rom |r@n@|r  Tue Jan 10 10:44:11 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Tue, 10 Jan 2023 09:44:11 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
Message-ID: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>

Dear R-devel people,

We are working to submit a package which is mainly a binding over a C++ lib (https://github.com/libKriging) using armadillo.
It is _not_ a standard RcppArmadillo package, because we also had to provide a python binding... so there is a huge layer of cmake & scripting to make it work with a standard armadillo (but using same version that RcppArmadillo).
It seems now working with almost all CRAN targets, but a problem remains with fedora (clang & gcc) devel.

Our issue is that the rhub docker is not well sync with the CRAN fedora-clang-devel config:
- failing on CRAN (without clear reason): https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html
- passing on rhub: https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc7562726497af7c678ab41f4dea

So we cannot investigate and fix the problem.

Note that we did quite strange things with the fedora platforms: include explicitely slapack to provide simple precision for our (vanilla) armadillo... 

Do you have any idea, or even known problem in mind, that could be related to this ?

Best regards,

--
Dr. Yann Richet
Institute for Radiological Protection and Nuclear Safety (https://www.irsn.fr), 
  Department of Characterization of Natural Unexpected Events and Sites
Office?: +33 1 58 35 88 84


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 10 11:31:40 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 10 Jan 2023 11:31:40 +0100
Subject: [Rd] 
 Shouldn't "Loading" be "Attaching" when referring to library()
 calls?
In-Reply-To: <25533.12125.780136.352115@stat.math.ethz.ch>
References: <CAD7Bkx-SFxFYra8kPZvNntKBtscQzgABw1LMNTKY7XYexnCQgQ@mail.gmail.com>
 <25533.12125.780136.352115@stat.math.ethz.ch>
Message-ID: <25533.16012.558065.724821@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Tue, 10 Jan 2023 10:26:53 +0100 writes:

>>>>> Michael Chirico via R-devel 
>>>>>     on Mon, 9 Jan 2023 12:25:46 -0800 writes:

    >> require() and library() both emit this message immediately before
    >> running library():

    >> "Loading required package: %s"

    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L967-L968

    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L684-L685

    >> Shouldn't "Loading" be "Attaching" instead?

    > Good question... I had asked myself as well a couple of times.

    > The vagueness is mostly "historical" in the sense that
    > originally R (nor S) had namespaces.

Oops!  If you skip the "( .. )" above it's 100% wrong.
Correct (I hope even according Oxford Dictionary) is

" Originally, neither R nor S had namespaces. "



    > OTOH,  attach(.)  has always worked for data frames (already in pre-R S).

    > Still, I agree (when teaching and otherwise), we should
    > clearly distinguish the two notably in the context of packages
    > and their namespaces.


    >> My understanding is "a package is loaded" is equivalent to
    >> "isNamespaceLoaded()", i.e., loadNamespace() was run. And that "a
    >> package is attached" is equivalent to "pkg %in% .packages()", i.e.,
    >> library(pkg) was run.

    > or (easier for teaching)  that  "package:<pkg>" %in% search()
    > -- which is what .packages() does {by default}.

    > I agree with the above.


    >> Is the terminology not so precise?

    >> There's certainly ambiguity in the internal variable names referenced
    >> above -- in require, we see

    >> loaded <- paste0("package:", package) %in% search()
    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L680

    > again, historical:  require() exists for considerably longer
    > than namespaces.

    > I think we should at least change the message printed by
    > require() and library() you mentioned above.

    > Martin


    >> Whereas in library() [via .getRequiredPackages2()] we see

    >> attached <- paste0("package:", pkg) %in% search()
    >> https://github.com/r-devel/r-svn/blob/4198a2941b702d965bb2374c2b908f48c369f40a/src/library/base/R/library.R#L931

    >> Mike C

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 10 11:37:46 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 10 Jan 2023 11:37:46 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
Message-ID: <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>

Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
> Dear R-devel people,
>
> We are working to submit a package which is mainly a binding over a C++ lib (https://github.com/libKriging) using armadillo.
> It is _not_ a standard RcppArmadillo package, because we also had to provide a python binding... so there is a huge layer of cmake & scripting to make it work with a standard armadillo (but using same version that RcppArmadillo).
> It seems now working with almost all CRAN targets, but a problem remains with fedora (clang & gcc) devel.
>
> Our issue is that the rhub docker is not well sync with the CRAN fedora-clang-devel config:
> - failing on CRAN (without clear reason): https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html
I see? 2 candidates for? reasons of failing on CRAN:
 ?1. test time is 30 min while 15 min are allowed;
 ?2. your code try to get 30 threads while CRAN limits them to 2;

Try to make your tests shorter ( < 15 min) on 2 threads. May be it will 
help.

Best,
Serguei.

> - passing on rhub: https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc7562726497af7c678ab41f4dea
>
> So we cannot investigate and fix the problem.
>
> Note that we did quite strange things with the fedora platforms: include explicitely slapack to provide simple precision for our (vanilla) armadillo...
>
> Do you have any idea, or even known problem in mind, that could be related to this ?
>
> Best regards,
>
> --
> Dr. Yann Richet
> Institute for Radiological Protection and Nuclear Safety (https://www.irsn.fr),
>    Department of Characterization of Natural Unexpected Events and Sites
> Office?: +33 1 58 35 88 84
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 10 11:40:38 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 10 Jan 2023 11:40:38 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
Message-ID: <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>

Le 10/01/2023 ? 11:37, Serguei Sokol a ?crit?:
> Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
>> Dear R-devel people,
>>
>> We are working to submit a package which is mainly a binding over a 
>> C++ lib (https://github.com/libKriging) using armadillo.
>> It is _not_ a standard RcppArmadillo package, because we also had to 
>> provide a python binding... so there is a huge layer of cmake & 
>> scripting to make it work with a standard armadillo (but using same 
>> version that RcppArmadillo).
>> It seems now working with almost all CRAN targets, but a problem 
>> remains with fedora (clang & gcc) devel.
>>
>> Our issue is that the rhub docker is not well sync with the CRAN 
>> fedora-clang-devel config:
>> - failing on CRAN (without clear reason): 
>> https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html
> I see? 2 candidates for? reasons of failing on CRAN:
> ?1. test time is 30 min while 15 min are allowed;
> ?2. your code try to get 30 threads
Oops, it was 10 threads not 30 but it does not change the nature of a 
possible issue.

> while CRAN limits them to 2;
>
> Try to make your tests shorter ( < 15 min) on 2 threads. May be it 
> will help.
>
> Best,
> Serguei.
>
>> - passing on rhub: 
>> https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc7562726497af7c678ab41f4dea
>>
>> So we cannot investigate and fix the problem.
>>
>> Note that we did quite strange things with the fedora platforms: 
>> include explicitely slapack to provide simple precision for our 
>> (vanilla) armadillo...
>>
>> Do you have any idea, or even known problem in mind, that could be 
>> related to this ?
>>
>> Best regards,
>>
>> -- 
>> Dr. Yann Richet
>> Institute for Radiological Protection and Nuclear Safety 
>> (https://www.irsn.fr),
>> ?? Department of Characterization of Natural Unexpected Events and Sites
>> Office?: +33 1 58 35 88 84
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From y@nn@r|chet @end|ng |rom |r@n@|r  Tue Jan 10 17:27:53 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Tue, 10 Jan 2023 16:27:53 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
Message-ID: <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>

Thank you for your answer.
In facts, 10 threads are asked by armadillo for some LinAlg, which backs to two threads as warned. But I cannot imagine this costs so much time just for that...

A deeper analysis of time spent seems to point that a large time was mainly spent on testthat and Rcpp dependencies compilation... But other recent packages depending on these also are not spending so much time.

CRAN team, as I failed to reproduce the issue with rhub dockers, 
- is there any reason that could explain that fedora-*-devel is so slow for this package or compilation of Rcpp/testthat ?
- is our slapack a possible source of... anything ?
- are we the only package which embeds "standard armadillo" and tries to deal with simple precision lapack issues on fedora ?
- is there any chance that I can get a deeper log of what happened ?

Best regards,

Yann

-----Message d'origine-----
De?: Serguei Sokol <sokol at insa-toulouse.fr> 
Envoy??: mardi 10 janvier 2023 11:41
??: RICHET Yann <yann.richet at irsn.fr>; R-devel at r-project.org
Cc?: Pascal Hav? <pascal at haveneer.com>
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

Le 10/01/2023 ? 11:37, Serguei Sokol a ?crit?:
> Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
>> Dear R-devel people,
>>
>> We are working to submit a package which is mainly a binding over a
>> C++ lib (https://github.com/libKriging) using armadillo.
>> It is _not_ a standard RcppArmadillo package, because we also had to 
>> provide a python binding... so there is a huge layer of cmake & 
>> scripting to make it work with a standard armadillo (but using same 
>> version that RcppArmadillo).
>> It seems now working with almost all CRAN targets, but a problem 
>> remains with fedora (clang & gcc) devel.
>>
>> Our issue is that the rhub docker is not well sync with the CRAN 
>> fedora-clang-devel config:
>> - failing on CRAN (without clear reason): 
>> https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-c
>> lang/rlibkriging-00check.html
> I see? 2 candidates for? reasons of failing on CRAN:
> ?1. test time is 30 min while 15 min are allowed;
> ?2. your code try to get 30 threads
Oops, it was 10 threads not 30 but it does not change the nature of a possible issue.

> while CRAN limits them to 2;
>
> Try to make your tests shorter ( < 15 min) on 2 threads. May be it 
> will help.
>
> Best,
> Serguei.
>
>> - passing on rhub: 
>> https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc756272
>> 6497af7c678ab41f4dea
>>
>> So we cannot investigate and fix the problem.
>>
>> Note that we did quite strange things with the fedora platforms: 
>> include explicitely slapack to provide simple precision for our
>> (vanilla) armadillo...
>>
>> Do you have any idea, or even known problem in mind, that could be 
>> related to this ?
>>
>> Best regards,
>>
>> --
>> Dr. Yann Richet
>> Institute for Radiological Protection and Nuclear Safety 
>> (https://www.irsn.fr),
>> ?? Department of Characterization of Natural Unexpected Events and 
>> Sites Office?: +33 1 58 35 88 84
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


--
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 10 18:10:12 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 10 Jan 2023 18:10:12 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
Message-ID: <6314ae19-a605-0286-a200-dfa0f09ffc52@insa-toulouse.fr>

Looks like there is a kind of misunderstanding...

Le 10/01/2023 ? 17:27, RICHET Yann a ?crit?:
> Thank you for your answer.
> In facts, 10 threads are asked by armadillo for some LinAlg, which backs to two threads as warned. But I cannot imagine this costs so much time just for that...
Excessive thread number is a problem per se. I did not say that it was 
responsible for excessive test time.
It's up to you to configure armadillo to use no more then 2 threads when 
run on CRAN. May be, setting environment variable OPENBLAS_NUM_THREADS=2 
could help.

>
> A deeper analysis of time spent seems to point that a large time was mainly spent on testthat and Rcpp dependencies compilation...
Normally, compilation time is not accounted in the quota of 15 min 
dedicated to tests.
I would just focus on reducing this time, e.g. by running tests on 
smaller cases or skipping time-consuming tests conditionally when on CRAN.

Serguei.
>   But other recent packages depending on these also are not spending so much time.
>
> CRAN team, as I failed to reproduce the issue with rhub dockers,
> - is there any reason that could explain that fedora-*-devel is so slow for this package or compilation of Rcpp/testthat ?
> - is our slapack a possible source of... anything ?
> - are we the only package which embeds "standard armadillo" and tries to deal with simple precision lapack issues on fedora ?
> - is there any chance that I can get a deeper log of what happened ?
>
> Best regards,
>
> Yann
>
> -----Message d'origine-----
> De?: Serguei Sokol<sokol at insa-toulouse.fr>  
> Envoy??: mardi 10 janvier 2023 11:41
> ??: RICHET Yann<yann.richet at irsn.fr>;R-devel at r-project.org
> Cc?: Pascal Hav?<pascal at haveneer.com>
> Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
>
> Le 10/01/2023 ? 11:37, Serguei Sokol a ?crit?:
>> Le 10/01/2023 ? 10:44, RICHET Yann a ?crit?:
>>> Dear R-devel people,
>>>
>>> We are working to submit a package which is mainly a binding over a
>>> C++ lib (https://github.com/libKriging) using armadillo.
>>> It is _not_ a standard RcppArmadillo package, because we also had to
>>> provide a python binding... so there is a huge layer of cmake &
>>> scripting to make it work with a standard armadillo (but using same
>>> version that RcppArmadillo).
>>> It seems now working with almost all CRAN targets, but a problem
>>> remains with fedora (clang & gcc) devel.
>>>
>>> Our issue is that the rhub docker is not well sync with the CRAN
>>> fedora-clang-devel config:
>>> - failing on CRAN (without clear reason):
>>> https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-c
>>> lang/rlibkriging-00check.html
>> I see? 2 candidates for? reasons of failing on CRAN:
>>  ?1. test time is 30 min while 15 min are allowed;
>>  ?2. your code try to get 30 threads
> Oops, it was 10 threads not 30 but it does not change the nature of a possible issue.
>
>> while CRAN limits them to 2;
>>
>> Try to make your tests shorter ( < 15 min) on 2 threads. May be it
>> will help.
>>
>> Best,
>> Serguei.
>>
>>> - passing on rhub:
>>> https://builder.r-hub.io/status/rlibkriging_0.7-3.tar.gz-20f7dc756272
>>> 6497af7c678ab41f4dea
>>>
>>> So we cannot investigate and fix the problem.
>>>
>>> Note that we did quite strange things with the fedora platforms:
>>> include explicitely slapack to provide simple precision for our
>>> (vanilla) armadillo...
>>>
>>> Do you have any idea, or even known problem in mind, that could be
>>> related to this ?
>>>
>>> Best regards,
>>>
>>> --
>>> Dr. Yann Richet
>>> Institute for Radiological Protection and Nuclear Safety
>>> (https://www.irsn.fr),
>>>  ?? Department of Characterization of Natural Unexpected Events and
>>> Sites Office?: +33 1 58 35 88 84
>>>
>>> ______________________________________________
>>> R-devel at r-project.org  mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Jan 10 20:05:45 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 10 Jan 2023 22:05:45 +0300
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
Message-ID: <20230110220545.5d213d2d@Tarkus>

On Tue, 10 Jan 2023 16:27:53 +0000
RICHET Yann <yann.richet at irsn.fr> wrote:

> In facts, 10 threads are asked by armadillo for some LinAlg, which
> backs to two threads as warned. 

I think you're right about your tests de-facto using two threads, but
it might be a good idea to _default_ to up to two threads in tests and
examples. This is especially valuable for third-party developers who
have to mass-test packages (one of which could be rlibkriging) in
parallel.

> - is there any reason that could explain that fedora-*-devel is so
> slow for this package or compilation of Rcpp/testthat ?

Compilation time is definitely not the reason. Something in tests/*
actually runs for 30 minutes by itself.

> - is there any chance that I can get a deeper log of what happened ?

If you split your tests into separate files under tests/*.R instead of
using a single tests/testthat.R calling the rest of the tests, R will
be able to show you the individual test file that hung and maybe the
line where it happened. (Also, you'll get per-file timing.) But that
is potentially a huge investment: you may have to rewrite the tests to
work outside the testthat harness, and you'd also have to prepare
another CRAN submission just to have those tests run. It's also against
CRAN policy to knowingly submit a package with unfixed ERRORs.

(Currently, R can only tell you that the tests hung in the
test_check('rlibkriging') call in the tests/testthat.R, which isn't
precise enough.)

These lines look a bit scary:

tests/testthat/bench-KrigingFit.R:

pack=list.files(file.path("bindings","R"),pattern = ".tar.gz",full.names = T) install.packages(pack,repos=NULL)

tests/testthat/notest-LinearRegression.R:

install.packages(pkgs="rlibkriging_0.7-2.tgz", type="source", repos=NULL)
library(rlibkriging)

I don't think that install.packages does anything besides raising a
warning and letting the test continue (there doesn't seem to be any
.tar.gz files inside the package on CRAN, so installation fails), but
it's probably not a good idea to install packages during testing [*].

This is also not quite right but harmless, because rlibkriging is
already loaded:

library(rlibkriging, lib.loc="bindings/R/Rlibs")

I'm afraid I don't know how to reproduce the timeouts you're seeing on
the CRAN Fedora machine.

-- 
Best regards,
Ivan

[*] I once wrote a test that launched multiple child R processes,
created a temporary library in each of them and installed the package
there. The test was designed to only run on the developer's machine in
order to test file format compatibility between different versions of
R. I ended up moving the test away from tests/*.R in order to make sure
it won't run by accident.


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jan 10 21:28:36 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 10 Jan 2023 15:28:36 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <20230110220545.5d213d2d@Tarkus>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
Message-ID: <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>

On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
> On Tue, 10 Jan 2023 16:27:53 +0000
> RICHET Yann <yann.richet at irsn.fr> wrote:
> 
>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>> backs to two threads as warned.
> 
> I think you're right about your tests de-facto using two threads, but
> it might be a good idea to _default_ to up to two threads in tests and
> examples. This is especially valuable for third-party developers who
> have to mass-test packages (one of which could be rlibkriging) in
> parallel.
> 
>> - is there any reason that could explain that fedora-*-devel is so
>> slow for this package or compilation of Rcpp/testthat ?
> 
> Compilation time is definitely not the reason. Something in tests/*
> actually runs for 30 minutes by itself.
> 
>> - is there any chance that I can get a deeper log of what happened ?
> 
> If you split your tests into separate files under tests/*.R instead of
> using a single tests/testthat.R calling the rest of the tests, R will
> be able to show you the individual test file that hung and maybe the
> line where it happened. (Also, you'll get per-file timing.) But that
> is potentially a huge investment: you may have to rewrite the tests to
> work outside the testthat harness, and you'd also have to prepare
> another CRAN submission just to have those tests run. It's also against
> CRAN policy to knowingly submit a package with unfixed ERRORs.
> 
> (Currently, R can only tell you that the tests hung in the
> test_check('rlibkriging') call in the tests/testthat.R, which isn't
> precise enough.)

You can specify a different "reporter" in the test_check() call, and it 
will print more useful information.  I don't think there's a perfect 
one, but

   test_check('rlibkriging', reporter = "progress")

should at least show you the tests that finished running before the 
timeout.  You could possibly also write your own custom reporter that 
could give timings for each of the tests as they run, but the documents 
for how to do that don't seem to exist.  Maybe someone else has done it?

Duncan Murdoch


From @eb@meyer @end|ng |rom |@u@de  Tue Jan 10 22:07:26 2023
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 10 Jan 2023 22:07:26 +0100
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
Message-ID: <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>

Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>> On Tue, 10 Jan 2023 16:27:53 +0000
>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>
>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>> backs to two threads as warned.
>>
>> I think you're right about your tests de-facto using two threads, but
>> it might be a good idea to _default_ to up to two threads in tests and
>> examples. This is especially valuable for third-party developers who
>> have to mass-test packages (one of which could be rlibkriging) in
>> parallel.
>>
>>> - is there any reason that could explain that fedora-*-devel is so
>>> slow for this package or compilation of Rcpp/testthat ?
>>
>> Compilation time is definitely not the reason. Something in tests/*
>> actually runs for 30 minutes by itself.
>>
>>> - is there any chance that I can get a deeper log of what happened ?
>>
>> If you split your tests into separate files under tests/*.R instead of
>> using a single tests/testthat.R calling the rest of the tests, R will
>> be able to show you the individual test file that hung and maybe the
>> line where it happened. (Also, you'll get per-file timing.) But that
>> is potentially a huge investment: you may have to rewrite the tests to
>> work outside the testthat harness, and you'd also have to prepare
>> another CRAN submission just to have those tests run. It's also against
>> CRAN policy to knowingly submit a package with unfixed ERRORs.
>>
>> (Currently, R can only tell you that the tests hung in the
>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>> precise enough.)
> 
> You can specify a different "reporter" in the test_check() call, and it 
> will print more useful information.? I don't think there's a perfect 
> one, but
> 
>  ? test_check('rlibkriging', reporter = "progress")
> 
> should at least show you the tests that finished running before the 
> timeout.  

I had similar problems with testthat and timeouts when mass-checking 
packages on patched R versions. My notes say

> ## testthat's 'LocationReporter' does cat() after each expectation
> ## so we can see results even if timeout is reached
> options(testthat.default_check_reporter = c("Location", "Check"))

The help("LocationReporter") says: "This reporter simply prints the 
location of every expectation and error. This is useful if you're trying 
to figure out the source of a segfault, or you want to figure out which 
code triggers a C/C++ breakpoint"

HTH!

	Sebastian Meyer

> You could possibly also write your own custom reporter that 
> could give timings for each of the tests as they run, but the documents 
> for how to do that don't seem to exist.? Maybe someone else has done it?
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jan 11 00:35:57 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 10 Jan 2023 18:35:57 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
Message-ID: <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>

On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>
>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>>> backs to two threads as warned.
>>>
>>> I think you're right about your tests de-facto using two threads, but
>>> it might be a good idea to _default_ to up to two threads in tests and
>>> examples. This is especially valuable for third-party developers who
>>> have to mass-test packages (one of which could be rlibkriging) in
>>> parallel.
>>>
>>>> - is there any reason that could explain that fedora-*-devel is so
>>>> slow for this package or compilation of Rcpp/testthat ?
>>>
>>> Compilation time is definitely not the reason. Something in tests/*
>>> actually runs for 30 minutes by itself.
>>>
>>>> - is there any chance that I can get a deeper log of what happened ?
>>>
>>> If you split your tests into separate files under tests/*.R instead of
>>> using a single tests/testthat.R calling the rest of the tests, R will
>>> be able to show you the individual test file that hung and maybe the
>>> line where it happened. (Also, you'll get per-file timing.) But that
>>> is potentially a huge investment: you may have to rewrite the tests to
>>> work outside the testthat harness, and you'd also have to prepare
>>> another CRAN submission just to have those tests run. It's also against
>>> CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>
>>> (Currently, R can only tell you that the tests hung in the
>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>>> precise enough.)
>>
>> You can specify a different "reporter" in the test_check() call, and it
>> will print more useful information.? I don't think there's a perfect
>> one, but
>>
>>   ? test_check('rlibkriging', reporter = "progress")
>>
>> should at least show you the tests that finished running before the
>> timeout.
> 
> I had similar problems with testthat and timeouts when mass-checking
> packages on patched R versions. My notes say
> 
>> ## testthat's 'LocationReporter' does cat() after each expectation
>> ## so we can see results even if timeout is reached
>> options(testthat.default_check_reporter = c("Location", "Check"))
> 
> The help("LocationReporter") says: "This reporter simply prints the
> location of every expectation and error. This is useful if you're trying
> to figure out the source of a segfault, or you want to figure out which
> code triggers a C/C++ breakpoint"
> 
> HTH!

Yes, that looks like it would pin down the location of the problem. 
Here's some sample output from it:

   Running ?testthat.R? [41s/42s]
Running the tests in ?tests/testthat.R? failed.
Last 13 lines of output:
   Start test: can use constructed calls in verify_output() (#945)
     'test-verify-output.R:55' [success]
   End test: can use constructed calls in verify_output() (#945)

   Start test: verify_output() doesn't use cli unicode by default
     'test-verify-output.R:65' [success]
     'test-verify-output.R:73' [success]
   End test: verify_output() doesn't use cli unicode by default

   Start test: verify_output() handles carriage return
     'test-verify-output.R:82' [success]
   End test: verify_output() handles carriage return

   Error: Test failures
   Execution halted

One other thing:  you enabled this by using

   options(testthat.default_check_reporter = c("Location", "Check"))

before running the tests; the package writer could do the same thing by 
using

   test_check('rlibkriging', reporter = c("Location", "Check"))

Duncan Murdoch


From yugong @end|ng |rom out|ook@com  Wed Jan 11 15:25:33 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Wed, 11 Jan 2023 14:25:33 +0000
Subject: [Rd] proposal for use ICU for timezone convertion on windows and a
 draft patch
Message-ID: <TYAP286MB0268F0EDEE6C5A36C751B0C7D1FC9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Dear All,

 Last week I found an issue about R Sys.timezone function on Windows and send email to this list. This week , I read quite a few  docs and codes about windows time zone to IANA time zone conversion. and found in unicode.org's  ICU library has a function  ucal_getTimeZoneIDForWindowsID which do the time zone convert. Microsoft also use it for time zone convertion in dotnet 6 and 7.(https://github.com/dotnet/runtime/blob/main/src/native/libs/System.Globalization.Native/pal_timeZoneInfo.c) .

IMHO, use this function to implement time zone convert on windows is better than R's hand-write conversion implementation, use the ICU , it will update the conversion when unicode org upgrade the ICU library and no more hand-write conversion code needed. Also RTools already included the ICU library,and R on windows build link ICU lib on default  , so no additional library or tools need for use this function for time zone conversion.

so I wrote a quick and dirty patch use the ucal_getTimeZoneIDForWindowsID, I think maybe better discuss here before I send patch to bugs.r-project.org.
I put the patch on https://github.com/armgong/misc-r-patch/blob/main/registryTZ-ICU.diff.

this patch mainly do following three steps : 1 read current English time zone name from registry ; 2 read current region name from registry(this also affect conversion); 3 use ucal_getTimeZoneIDForWindowsID implement the conversion.

please feel free to share your thoughts or feedbacks of this patch.  if it doable ,then I will modify it and send it to bugs.r-project.org

best regards,
Yu Gong




	[[alternative HTML version deleted]]


From y@nn@r|chet @end|ng |rom |r@n@|r  Wed Jan 11 18:35:45 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Wed, 11 Jan 2023 17:35:45 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
Message-ID: <30578c9825ff429baecb0be28fc8b778@irsn.fr>

Thank you all, for these advices.

So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
Next step should be to investigate blocking test using a reporter (maybe "list").
For now, waiting for CRAN results...

Yann

-----Message d'origine-----
De?: Duncan Murdoch <murdoch.duncan at gmail.com> 
Envoy??: mercredi 11 janvier 2023 00:36
??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr>
Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>
>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which 
>>>> backs to two threads as warned.
>>>
>>> I think you're right about your tests de-facto using two threads, 
>>> but it might be a good idea to _default_ to up to two threads in 
>>> tests and examples. This is especially valuable for third-party 
>>> developers who have to mass-test packages (one of which could be 
>>> rlibkriging) in parallel.
>>>
>>>> - is there any reason that could explain that fedora-*-devel is so 
>>>> slow for this package or compilation of Rcpp/testthat ?
>>>
>>> Compilation time is definitely not the reason. Something in tests/* 
>>> actually runs for 30 minutes by itself.
>>>
>>>> - is there any chance that I can get a deeper log of what happened ?
>>>
>>> If you split your tests into separate files under tests/*.R instead 
>>> of using a single tests/testthat.R calling the rest of the tests, R 
>>> will be able to show you the individual test file that hung and 
>>> maybe the line where it happened. (Also, you'll get per-file 
>>> timing.) But that is potentially a huge investment: you may have to 
>>> rewrite the tests to work outside the testthat harness, and you'd 
>>> also have to prepare another CRAN submission just to have those 
>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>
>>> (Currently, R can only tell you that the tests hung in the
>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't 
>>> precise enough.)
>>
>> You can specify a different "reporter" in the test_check() call, and 
>> it will print more useful information.? I don't think there's a 
>> perfect one, but
>>
>>   ? test_check('rlibkriging', reporter = "progress")
>>
>> should at least show you the tests that finished running before the 
>> timeout.
> 
> I had similar problems with testthat and timeouts when mass-checking 
> packages on patched R versions. My notes say
> 
>> ## testthat's 'LocationReporter' does cat() after each expectation ## 
>> so we can see results even if timeout is reached 
>> options(testthat.default_check_reporter = c("Location", "Check"))
> 
> The help("LocationReporter") says: "This reporter simply prints the 
> location of every expectation and error. This is useful if you're 
> trying to figure out the source of a segfault, or you want to figure 
> out which code triggers a C/C++ breakpoint"
> 
> HTH!

Yes, that looks like it would pin down the location of the problem. 
Here's some sample output from it:

   Running ?testthat.R? [41s/42s]
Running the tests in ?tests/testthat.R? failed.
Last 13 lines of output:
   Start test: can use constructed calls in verify_output() (#945)
     'test-verify-output.R:55' [success]
   End test: can use constructed calls in verify_output() (#945)

   Start test: verify_output() doesn't use cli unicode by default
     'test-verify-output.R:65' [success]
     'test-verify-output.R:73' [success]
   End test: verify_output() doesn't use cli unicode by default

   Start test: verify_output() handles carriage return
     'test-verify-output.R:82' [success]
   End test: verify_output() handles carriage return

   Error: Test failures
   Execution halted

One other thing:  you enabled this by using

   options(testthat.default_check_reporter = c("Location", "Check"))

before running the tests; the package writer could do the same thing by using

   test_check('rlibkriging', reporter = c("Location", "Check"))

Duncan Murdoch

From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jan 11 19:09:25 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 11 Jan 2023 13:09:25 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <30578c9825ff429baecb0be28fc8b778@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
Message-ID: <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>

On 11/01/2023 12:35 p.m., RICHET Yann wrote:
> Thank you all, for these advices.
> 
> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
> Next step should be to investigate blocking test using a reporter (maybe "list").
> For now, waiting for CRAN results...

I think Sebastian or my suggestion is easier than redoing all of your 
tests.  They are each one line changes.

Duncan Murdoch

> 
> Yann
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com>
> Envoy??: mercredi 11 janvier 2023 00:36
> ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr>
> Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
> Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>>
>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>>>> backs to two threads as warned.
>>>>
>>>> I think you're right about your tests de-facto using two threads,
>>>> but it might be a good idea to _default_ to up to two threads in
>>>> tests and examples. This is especially valuable for third-party
>>>> developers who have to mass-test packages (one of which could be
>>>> rlibkriging) in parallel.
>>>>
>>>>> - is there any reason that could explain that fedora-*-devel is so
>>>>> slow for this package or compilation of Rcpp/testthat ?
>>>>
>>>> Compilation time is definitely not the reason. Something in tests/*
>>>> actually runs for 30 minutes by itself.
>>>>
>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>
>>>> If you split your tests into separate files under tests/*.R instead
>>>> of using a single tests/testthat.R calling the rest of the tests, R
>>>> will be able to show you the individual test file that hung and
>>>> maybe the line where it happened. (Also, you'll get per-file
>>>> timing.) But that is potentially a huge investment: you may have to
>>>> rewrite the tests to work outside the testthat harness, and you'd
>>>> also have to prepare another CRAN submission just to have those
>>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>
>>>> (Currently, R can only tell you that the tests hung in the
>>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>>>> precise enough.)
>>>
>>> You can specify a different "reporter" in the test_check() call, and
>>> it will print more useful information.? I don't think there's a
>>> perfect one, but
>>>
>>>    ? test_check('rlibkriging', reporter = "progress")
>>>
>>> should at least show you the tests that finished running before the
>>> timeout.
>>
>> I had similar problems with testthat and timeouts when mass-checking
>> packages on patched R versions. My notes say
>>
>>> ## testthat's 'LocationReporter' does cat() after each expectation ##
>>> so we can see results even if timeout is reached
>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>
>> The help("LocationReporter") says: "This reporter simply prints the
>> location of every expectation and error. This is useful if you're
>> trying to figure out the source of a segfault, or you want to figure
>> out which code triggers a C/C++ breakpoint"
>>
>> HTH!
> 
> Yes, that looks like it would pin down the location of the problem.
> Here's some sample output from it:
> 
>     Running ?testthat.R? [41s/42s]
> Running the tests in ?tests/testthat.R? failed.
> Last 13 lines of output:
>     Start test: can use constructed calls in verify_output() (#945)
>       'test-verify-output.R:55' [success]
>     End test: can use constructed calls in verify_output() (#945)
> 
>     Start test: verify_output() doesn't use cli unicode by default
>       'test-verify-output.R:65' [success]
>       'test-verify-output.R:73' [success]
>     End test: verify_output() doesn't use cli unicode by default
> 
>     Start test: verify_output() handles carriage return
>       'test-verify-output.R:82' [success]
>     End test: verify_output() handles carriage return
> 
>     Error: Test failures
>     Execution halted
> 
> One other thing:  you enabled this by using
> 
>     options(testthat.default_check_reporter = c("Location", "Check"))
> 
> before running the tests; the package writer could do the same thing by using
> 
>     test_check('rlibkriging', reporter = c("Location", "Check"))
> 
> Duncan Murdoch


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Jan 11 19:27:19 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 11 Jan 2023 21:27:19 +0300
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
 <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
Message-ID: <20230111212719.49c123e1@Tarkus>

On Wed, 11 Jan 2023 13:09:25 -0500
Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> I think Sebastian or my suggestion is easier than redoing all of your 
> tests.  They are each one line changes.

Yes, sorry about that. Definitely try a verbose reporter first instead
of redoing the tests. I'll remember not to give this advice next time.

-- 
Best regards,
Ivan


From edd @end|ng |rom deb|@n@org  Wed Jan 11 19:34:31 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 11 Jan 2023 12:34:31 -0600
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <30578c9825ff429baecb0be28fc8b778@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
 <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
Message-ID: <25535.311.322068.314067@rob.eddelbuettel.com>


On 11 January 2023 at 17:35, RICHET Yann wrote:
| Thank you all, for these advices.
| 
| So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
| Next step should be to investigate blocking test using a reporter (maybe "list").
| For now, waiting for CRAN results...

BTW your package failed its tests for me in a reverse-depends run when I had
`ccache` as usual in the definition of CC, CXX, FC, CXX14, ... That usually
works with other packages using CMake. Maybe something you could look into.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From yugong @end|ng |rom out|ook@com  Thu Jan 12 05:54:41 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Thu, 12 Jan 2023 04:54:41 +0000
Subject: [Rd] 
 proposal for use ICU for timezone convertion on windows and a
 draft patch
In-Reply-To: <TYAP286MB0268F0EDEE6C5A36C751B0C7D1FC9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB0268F0EDEE6C5A36C751B0C7D1FC9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <TYAP286MB0268139A4A5D1A6EFBC93F40D1FD9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

still work on it.  this morning , I found the better and short sloution of this, the ucal_getDefaultTimeZone will return IANA formart zone name on windows.
so the main code for this issue listing  here:

/* Longest currently is 31 chars */
static char Olson[64] = "";
/* use ucal_getDefaultTimeZone to get IANA default time zone name */
const char *getTZinfo(void)
{
    UChar defaultzone[64];
    UErrorCode status_default = U_ZERO_ERROR;
    int32_t i = ucal_getDefaultTimeZone(defaultzone, ARRAYSIZE(defaultzone), &status_default);
    if (U_SUCCESS(status_default)) {
        wcstombs(Olson, defaultzone, 64);
        Olson[63] = '\0';
    #ifdef DEBUG
        printf("TZ = %s\n", Olson);
    #endif
        return Olson;
    }
    else{
        return "unknown";
    }
}

I still maintain a longer version of this patch, but it should not needed if  ucal_getDefaultTimeZone  is reliable .
the longer version  when  ucal_getDefaultTimeZone fail to got IANA time zone name , it do extra step to got  time zone name( 1 read current English time zone name from registry ; 2 read current region name from registry(this also affect conversion); 3 use ucal_getTimeZoneIDForWindowsID implement the conversion.)

please feel free to share your thoughts or feedbacks of this short version patch.

best regards,

Yu Gong


________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of yu gong <yugong at outlook.com>
Sent: Wednesday, January 11, 2023 22:25
To: r-devel at r-project.org <r-devel at r-project.org>
Subject: [Rd] proposal for use ICU for timezone convertion on windows and a draft patch

Dear All,

 Last week I found an issue about R Sys.timezone function on Windows and send email to this list. This week , I read quite a few  docs and codes about windows time zone to IANA time zone conversion. and found in unicode.org's  ICU library has a function  ucal_getTimeZoneIDForWindowsID which do the time zone convert. Microsoft also use it for time zone convertion in dotnet 6 and 7.(https://github.com/dotnet/runtime/blob/main/src/native/libs/System.Globalization.Native/pal_timeZoneInfo.c) .

IMHO, use this function to implement time zone convert on windows is better than R's hand-write conversion implementation, use the ICU , it will update the conversion when unicode org upgrade the ICU library and no more hand-write conversion code needed. Also RTools already included the ICU library,and R on windows build link ICU lib on default  , so no additional library or tools need for use this function for time zone conversion.

so I wrote a quick and dirty patch use the ucal_getTimeZoneIDForWindowsID, I think maybe better discuss here before I send patch to bugs.r-project.org.
I put the patch on https://github.com/armgong/misc-r-patch/blob/main/registryTZ-ICU.diff.

this patch mainly do following three steps : 1 read current English time zone name from registry ; 2 read current region name from registry(this also affect conversion); 3 use ucal_getTimeZoneIDForWindowsID implement the conversion.

please feel free to share your thoughts or feedbacks of this patch.  if it doable ,then I will modify it and send it to bugs.r-project.org

best regards,
Yu Gong




        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From y@nn@r|chet @end|ng |rom |r@n@|r  Thu Jan 12 08:51:59 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Thu, 12 Jan 2023 07:51:59 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
Message-ID: <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>

Well, I tried to move the tests outside testthat.R logic, because I expect that CRAN output will not give me the reporter results... and as I re-submitted the package, I wanted to ensure readable result. But maybe I am wrong about that... ?


-----Message d'origine-----
De?: Duncan Murdoch <murdoch.duncan at gmail.com> 
Envoy??: mercredi 11 janvier 2023 19:09
??: RICHET Yann <yann.richet at irsn.fr>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>
Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

On 11/01/2023 12:35 p.m., RICHET Yann wrote:
> Thank you all, for these advices.
> 
> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
> Next step should be to investigate blocking test using a reporter (maybe "list").
> For now, waiting for CRAN results...

I think Sebastian or my suggestion is easier than redoing all of your tests.  They are each one line changes.

Duncan Murdoch

> 
> Yann
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11 
> janvier 2023 00:36 ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov 
> <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr> Cc?: Pascal 
> Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: Re: [Rd] 
> rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>>
>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which 
>>>>> backs to two threads as warned.
>>>>
>>>> I think you're right about your tests de-facto using two threads, 
>>>> but it might be a good idea to _default_ to up to two threads in 
>>>> tests and examples. This is especially valuable for third-party 
>>>> developers who have to mass-test packages (one of which could be
>>>> rlibkriging) in parallel.
>>>>
>>>>> - is there any reason that could explain that fedora-*-devel is so 
>>>>> slow for this package or compilation of Rcpp/testthat ?
>>>>
>>>> Compilation time is definitely not the reason. Something in tests/* 
>>>> actually runs for 30 minutes by itself.
>>>>
>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>
>>>> If you split your tests into separate files under tests/*.R instead 
>>>> of using a single tests/testthat.R calling the rest of the tests, R 
>>>> will be able to show you the individual test file that hung and 
>>>> maybe the line where it happened. (Also, you'll get per-file
>>>> timing.) But that is potentially a huge investment: you may have to 
>>>> rewrite the tests to work outside the testthat harness, and you'd 
>>>> also have to prepare another CRAN submission just to have those 
>>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>
>>>> (Currently, R can only tell you that the tests hung in the
>>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't 
>>>> precise enough.)
>>>
>>> You can specify a different "reporter" in the test_check() call, and 
>>> it will print more useful information.? I don't think there's a 
>>> perfect one, but
>>>
>>>    ? test_check('rlibkriging', reporter = "progress")
>>>
>>> should at least show you the tests that finished running before the 
>>> timeout.
>>
>> I had similar problems with testthat and timeouts when mass-checking 
>> packages on patched R versions. My notes say
>>
>>> ## testthat's 'LocationReporter' does cat() after each expectation 
>>> ## so we can see results even if timeout is reached 
>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>
>> The help("LocationReporter") says: "This reporter simply prints the 
>> location of every expectation and error. This is useful if you're 
>> trying to figure out the source of a segfault, or you want to figure 
>> out which code triggers a C/C++ breakpoint"
>>
>> HTH!
> 
> Yes, that looks like it would pin down the location of the problem.
> Here's some sample output from it:
> 
>     Running ?testthat.R? [41s/42s]
> Running the tests in ?tests/testthat.R? failed.
> Last 13 lines of output:
>     Start test: can use constructed calls in verify_output() (#945)
>       'test-verify-output.R:55' [success]
>     End test: can use constructed calls in verify_output() (#945)
> 
>     Start test: verify_output() doesn't use cli unicode by default
>       'test-verify-output.R:65' [success]
>       'test-verify-output.R:73' [success]
>     End test: verify_output() doesn't use cli unicode by default
> 
>     Start test: verify_output() handles carriage return
>       'test-verify-output.R:82' [success]
>     End test: verify_output() handles carriage return
> 
>     Error: Test failures
>     Execution halted
> 
> One other thing:  you enabled this by using
> 
>     options(testthat.default_check_reporter = c("Location", "Check"))
> 
> before running the tests; the package writer could do the same thing 
> by using
> 
>     test_check('rlibkriging', reporter = c("Location", "Check"))
> 
> Duncan Murdoch


From y@nn@r|chet @end|ng |rom |r@n@|r  Thu Jan 12 09:54:28 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Thu, 12 Jan 2023 08:54:28 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <25535.311.322068.314067@rob.eddelbuettel.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>	<20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <25535.311.322068.314067@rob.eddelbuettel.com>
Message-ID: <4b197a2fd732443aab53d7f69e49e88a@irsn.fr>

Thank you, Dirk.
But I also tried with ccache, without fails... can you give some details about you reverse-depend configuration ? docker image ? Mine was a standard ubuntu 20.04 packages...

Best,

Yann

-----Message d'origine-----
De?: Dirk Eddelbuettel <edd at debian.org> 
Envoy??: mercredi 11 janvier 2023 19:35
??: RICHET Yann <yann.richet at irsn.fr>
Cc?: Duncan Murdoch <murdoch.duncan at gmail.com>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>; Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack


On 11 January 2023 at 17:35, RICHET Yann wrote:
| Thank you all, for these advices.
| 
| So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
| Next step should be to investigate blocking test using a reporter (maybe "list").
| For now, waiting for CRAN results...

BTW your package failed its tests for me in a reverse-depends run when I had `ccache` as usual in the definition of CC, CXX, FC, CXX14, ... That usually works with other packages using CMake. Maybe something you could look into.

Dirk

--
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan 12 10:06:38 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 12 Jan 2023 04:06:38 -0500
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
 <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>
Message-ID: <020704b6-ff2d-533c-f693-7738fb4a20c7@gmail.com>

On 12/01/2023 2:51 a.m., RICHET Yann wrote:
> Well, I tried to move the tests outside testthat.R logic, because I expect that CRAN output will not give me the reporter results... and as I re-submitted the package, I wanted to ensure readable result. But maybe I am wrong about that... ?

I think CRAN output will only show you the reporter results if there's 
an error.  If it's a regular error, you get the last 13 lines.  From 
your earlier posting, it looks as though a timeout might give more.  But 
even the last 13 lines should identify exactly which test was running 
when the timeout happened.

I probably wouldn't use the location reporter for routine runs, because 
it will give a lot of output, and conceivably this will slow things down.

Duncan Murdoch

> 
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com>
> Envoy??: mercredi 11 janvier 2023 19:09
> ??: RICHET Yann <yann.richet at irsn.fr>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>
> Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
> Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 11/01/2023 12:35 p.m., RICHET Yann wrote:
>> Thank you all, for these advices.
>>
>> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
>> Next step should be to investigate blocking test using a reporter (maybe "list").
>> For now, waiting for CRAN results...
> 
> I think Sebastian or my suggestion is easier than redoing all of your tests.  They are each one line changes.
> 
> Duncan Murdoch
> 
>>
>> Yann
>>
>> -----Message d'origine-----
>> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11
>> janvier 2023 00:36 ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov
>> <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr> Cc?: Pascal
>> Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: Re: [Rd]
>> rhub vs. CRAN fedora-*-devel, using armadillo & slapack
>>
>> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>>> On Tue, 10 Jan 2023 16:27:53 +0000
>>>>> RICHET Yann <yann.richet at irsn.fr> wrote:
>>>>>
>>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, which
>>>>>> backs to two threads as warned.
>>>>>
>>>>> I think you're right about your tests de-facto using two threads,
>>>>> but it might be a good idea to _default_ to up to two threads in
>>>>> tests and examples. This is especially valuable for third-party
>>>>> developers who have to mass-test packages (one of which could be
>>>>> rlibkriging) in parallel.
>>>>>
>>>>>> - is there any reason that could explain that fedora-*-devel is so
>>>>>> slow for this package or compilation of Rcpp/testthat ?
>>>>>
>>>>> Compilation time is definitely not the reason. Something in tests/*
>>>>> actually runs for 30 minutes by itself.
>>>>>
>>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>>
>>>>> If you split your tests into separate files under tests/*.R instead
>>>>> of using a single tests/testthat.R calling the rest of the tests, R
>>>>> will be able to show you the individual test file that hung and
>>>>> maybe the line where it happened. (Also, you'll get per-file
>>>>> timing.) But that is potentially a huge investment: you may have to
>>>>> rewrite the tests to work outside the testthat harness, and you'd
>>>>> also have to prepare another CRAN submission just to have those
>>>>> tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>>
>>>>> (Currently, R can only tell you that the tests hung in the
>>>>> test_check('rlibkriging') call in the tests/testthat.R, which isn't
>>>>> precise enough.)
>>>>
>>>> You can specify a different "reporter" in the test_check() call, and
>>>> it will print more useful information.? I don't think there's a
>>>> perfect one, but
>>>>
>>>>     ? test_check('rlibkriging', reporter = "progress")
>>>>
>>>> should at least show you the tests that finished running before the
>>>> timeout.
>>>
>>> I had similar problems with testthat and timeouts when mass-checking
>>> packages on patched R versions. My notes say
>>>
>>>> ## testthat's 'LocationReporter' does cat() after each expectation
>>>> ## so we can see results even if timeout is reached
>>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>>
>>> The help("LocationReporter") says: "This reporter simply prints the
>>> location of every expectation and error. This is useful if you're
>>> trying to figure out the source of a segfault, or you want to figure
>>> out which code triggers a C/C++ breakpoint"
>>>
>>> HTH!
>>
>> Yes, that looks like it would pin down the location of the problem.
>> Here's some sample output from it:
>>
>>      Running ?testthat.R? [41s/42s]
>> Running the tests in ?tests/testthat.R? failed.
>> Last 13 lines of output:
>>      Start test: can use constructed calls in verify_output() (#945)
>>        'test-verify-output.R:55' [success]
>>      End test: can use constructed calls in verify_output() (#945)
>>
>>      Start test: verify_output() doesn't use cli unicode by default
>>        'test-verify-output.R:65' [success]
>>        'test-verify-output.R:73' [success]
>>      End test: verify_output() doesn't use cli unicode by default
>>
>>      Start test: verify_output() handles carriage return
>>        'test-verify-output.R:82' [success]
>>      End test: verify_output() handles carriage return
>>
>>      Error: Test failures
>>      Execution halted
>>
>> One other thing:  you enabled this by using
>>
>>      options(testthat.default_check_reporter = c("Location", "Check"))
>>
>> before running the tests; the package writer could do the same thing
>> by using
>>
>>      test_check('rlibkriging', reporter = c("Location", "Check"))
>>
>> Duncan Murdoch
>


From edd @end|ng |rom deb|@n@org  Thu Jan 12 15:44:44 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 12 Jan 2023 08:44:44 -0600
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <4b197a2fd732443aab53d7f69e49e88a@irsn.fr>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr>
 <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <25535.311.322068.314067@rob.eddelbuettel.com>
 <4b197a2fd732443aab53d7f69e49e88a@irsn.fr>
Message-ID: <25536.7388.204821.704048@rob.eddelbuettel.com>


On 12 January 2023 at 08:54, RICHET Yann wrote:
| Thank you, Dirk.
| But I also tried with ccache, without fails... can you give some details about you reverse-depend configuration ? docker image ? Mine was a standard ubuntu 20.04 packages...

Nothing special -- I just the standard functions in base R package tools to
determine the reverse depends, and then loop over them and calling them one
by one.  (Package `prrd` at https://cloud.r-project.org/package=prrd helps
with this loops running in parallel and stateful, but you don't need that.)

My setup (on Debian, Ubuntu would work the same) contains (the perfectly
legal, helpful (!!) as `ccache` is a godsend, and not infrequently used)
snippet in ~/.R/Makevars

#VER=-12
CCACHE=ccache
CC=$(CCACHE) gcc$(VER)
CXX=$(CCACHE) g++$(VER)
CXX11=$(CCACHE) g++$(VER) 
CXX14=$(CCACHE) g++$(VER) 
CXX17=$(CCACHE) g++$(VER) 
SHLIB_CXXLD=$(CCACHE) g++$(VER)
FC=$(CCACHE) gfortran
F77=$(CCACHE) gfortran
F95=$(CCACHE) gfortran

Your package died incorrectly claiming the Fortran compiler was unsuitable.
Once I commented `CCACHE=ccache` out (which reduces the declaration to
null-ops, essentially) it worked.  Not 'fatal' but tedious as 2600+ other
packages build as they should.

Thanks for looking into it!

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Fri Jan 13 09:00:02 2023
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 13 Jan 2023 08:00:02 +0000
Subject: [Rd] Combinations and Permutations
Message-ID: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>

Good day,

In utils, there is a function named combn. It would seem complementary for utils to also offer permutations because of how closely mathematically related they are to each other. Could permutations be added to save on a package dependency if developing a package?

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From y@nn@r|chet @end|ng |rom |r@n@|r  Fri Jan 13 11:08:07 2023
From: y@nn@r|chet @end|ng |rom |r@n@|r (RICHET Yann)
Date: Fri, 13 Jan 2023 10:08:07 +0000
Subject: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
In-Reply-To: <020704b6-ff2d-533c-f693-7738fb4a20c7@gmail.com>
References: <334d6d8de5094164a99c8d4b26d77246@irsn.fr>
 <72de7b54-ff87-166f-4f8a-2b91381488cb@insa-toulouse.fr>
 <ffef02ea-52ae-a27a-1a8e-3d2046fd092c@insa-toulouse.fr>
 <ba0f6126425d4a43a3e1e3b0009e4105@irsn.fr> <20230110220545.5d213d2d@Tarkus>
 <44168649-5146-9cb0-a416-fbdb8b020029@gmail.com>
 <8cb80424-2264-4faa-b16f-e137b9f85bd4@fau.de>
 <84e94d6c-3408-014a-3845-76e66e88a779@gmail.com>
 <30578c9825ff429baecb0be28fc8b778@irsn.fr>
 <ab26f046-bf7c-465b-cf3e-cdccf6b05bcf@gmail.com>
 <7bf76d88ba4f494aa830501a1a1af4c3@irsn.fr>
 <020704b6-ff2d-533c-f693-7738fb4a20c7@gmail.com>
Message-ID: <32a206417a7e462791f7ae00045fe85a@irsn.fr>

The CRAN check on fedora gives me more detailed results now: https://www.r-project.org/nosvn/R.check/r-devel-linux-x86_64-fedora-clang/rlibkriging-00check.html .
It points a fairly strange issue (possibly due to recursive programming, that remains to investigate), but anyway I can now circumvent  the problem for CRAN.
In next "true" release, I will try to switch back to a testthat suitable reporter instead of the enumerated tests in tests/, as you suggested.

So, thank you very much to all of you for your kind help and suggestions.

Yann & libKriging team.

-----Message d'origine-----
De?: Duncan Murdoch <murdoch.duncan at gmail.com> 
Envoy??: jeudi 12 janvier 2023 10:07
??: RICHET Yann <yann.richet at irsn.fr>; Sebastian Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com>
Cc?: Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org
Objet?: Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack

On 12/01/2023 2:51 a.m., RICHET Yann wrote:
> Well, I tried to move the tests outside testthat.R logic, because I expect that CRAN output will not give me the reporter results... and as I re-submitted the package, I wanted to ensure readable result. But maybe I am wrong about that... ?

I think CRAN output will only show you the reporter results if there's an error.  If it's a regular error, you get the last 13 lines.  From your earlier posting, it looks as though a timeout might give more.  But even the last 13 lines should identify exactly which test was running when the timeout happened.

I probably wouldn't use the location reporter for routine runs, because it will give a lot of output, and conceivably this will slow things down.

Duncan Murdoch

> 
> 
> -----Message d'origine-----
> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11 
> janvier 2023 19:09 ??: RICHET Yann <yann.richet at irsn.fr>; Sebastian 
> Meyer <seb.meyer at fau.de>; Ivan Krylov <krylov.r00t at gmail.com> Cc?: 
> Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: Re: 
> [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
> 
> On 11/01/2023 12:35 p.m., RICHET Yann wrote:
>> Thank you all, for these advices.
>>
>> So I try to fix OMP_THREADS, cleanup tests, and display explicitly what test is running by moving in tests/ instead of tests/testthat/...
>> Next step should be to investigate blocking test using a reporter (maybe "list").
>> For now, waiting for CRAN results...
> 
> I think Sebastian or my suggestion is easier than redoing all of your tests.  They are each one line changes.
> 
> Duncan Murdoch
> 
>>
>> Yann
>>
>> -----Message d'origine-----
>> De?: Duncan Murdoch <murdoch.duncan at gmail.com> Envoy??: mercredi 11 
>> janvier 2023 00:36 ??: Sebastian Meyer <seb.meyer at fau.de>; Ivan 
>> Krylov <krylov.r00t at gmail.com>; RICHET Yann <yann.richet at irsn.fr> Cc?
>> : Pascal Hav? <pascal at haveneer.com>; R-devel at r-project.org Objet?: 
>> Re: [Rd] rhub vs. CRAN fedora-*-devel, using armadillo & slapack
>>
>> On 10/01/2023 4:07 p.m., Sebastian Meyer wrote:
>>> Am 10.01.23 um 21:28 schrieb Duncan Murdoch:
>>>> On 10/01/2023 2:05 p.m., Ivan Krylov wrote:
>>>>> On Tue, 10 Jan 2023 16:27:53 +0000 RICHET Yann 
>>>>> <yann.richet at irsn.fr> wrote:
>>>>>
>>>>>> In facts, 10 threads are asked by armadillo for some LinAlg, 
>>>>>> which backs to two threads as warned.
>>>>>
>>>>> I think you're right about your tests de-facto using two threads, 
>>>>> but it might be a good idea to _default_ to up to two threads in 
>>>>> tests and examples. This is especially valuable for third-party 
>>>>> developers who have to mass-test packages (one of which could be
>>>>> rlibkriging) in parallel.
>>>>>
>>>>>> - is there any reason that could explain that fedora-*-devel is 
>>>>>> so slow for this package or compilation of Rcpp/testthat ?
>>>>>
>>>>> Compilation time is definitely not the reason. Something in 
>>>>> tests/* actually runs for 30 minutes by itself.
>>>>>
>>>>>> - is there any chance that I can get a deeper log of what happened ?
>>>>>
>>>>> If you split your tests into separate files under tests/*.R 
>>>>> instead of using a single tests/testthat.R calling the rest of the 
>>>>> tests, R will be able to show you the individual test file that 
>>>>> hung and maybe the line where it happened. (Also, you'll get 
>>>>> per-file
>>>>> timing.) But that is potentially a huge investment: you may have 
>>>>> to rewrite the tests to work outside the testthat harness, and 
>>>>> you'd also have to prepare another CRAN submission just to have 
>>>>> those tests run. It's also against CRAN policy to knowingly submit a package with unfixed ERRORs.
>>>>>
>>>>> (Currently, R can only tell you that the tests hung in the
>>>>> test_check('rlibkriging') call in the tests/testthat.R, which 
>>>>> isn't precise enough.)
>>>>
>>>> You can specify a different "reporter" in the test_check() call, 
>>>> and it will print more useful information.? I don't think there's a 
>>>> perfect one, but
>>>>
>>>>     ? test_check('rlibkriging', reporter = "progress")
>>>>
>>>> should at least show you the tests that finished running before the 
>>>> timeout.
>>>
>>> I had similar problems with testthat and timeouts when mass-checking 
>>> packages on patched R versions. My notes say
>>>
>>>> ## testthat's 'LocationReporter' does cat() after each expectation 
>>>> ## so we can see results even if timeout is reached 
>>>> options(testthat.default_check_reporter = c("Location", "Check"))
>>>
>>> The help("LocationReporter") says: "This reporter simply prints the 
>>> location of every expectation and error. This is useful if you're 
>>> trying to figure out the source of a segfault, or you want to figure 
>>> out which code triggers a C/C++ breakpoint"
>>>
>>> HTH!
>>
>> Yes, that looks like it would pin down the location of the problem.
>> Here's some sample output from it:
>>
>>      Running ?testthat.R? [41s/42s]
>> Running the tests in ?tests/testthat.R? failed.
>> Last 13 lines of output:
>>      Start test: can use constructed calls in verify_output() (#945)
>>        'test-verify-output.R:55' [success]
>>      End test: can use constructed calls in verify_output() (#945)
>>
>>      Start test: verify_output() doesn't use cli unicode by default
>>        'test-verify-output.R:65' [success]
>>        'test-verify-output.R:73' [success]
>>      End test: verify_output() doesn't use cli unicode by default
>>
>>      Start test: verify_output() handles carriage return
>>        'test-verify-output.R:82' [success]
>>      End test: verify_output() handles carriage return
>>
>>      Error: Test failures
>>      Execution halted
>>
>> One other thing:  you enabled this by using
>>
>>      options(testthat.default_check_reporter = c("Location", 
>> "Check"))
>>
>> before running the tests; the package writer could do the same thing 
>> by using
>>
>>      test_check('rlibkriging', reporter = c("Location", "Check"))
>>
>> Duncan Murdoch
> 


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri Jan 13 11:11:44 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Fri, 13 Jan 2023 11:11:44 +0100
Subject: [Rd] Combinations and Permutations
In-Reply-To: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>
References: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>
Message-ID: <e7ce1401-434d-90a4-f7ca-ff995dce3bdc@insa-toulouse.fr>

Le 13/01/2023 ? 09:00, Dario Strbenac via R-devel a ?crit?:
> Good day,
>
> In utils, there is a function named combn. It would seem complementary for utils to also offer permutations because of how closely mathematically related they are to each other. Could permutations be added to save on a package dependency if developing a package?
If you need a function returning a matrix with all permutations of a 
vector x in its columns, a simple recursive one-liner can be sufficient, 
no need for a whole package dependency for this:

 ?? perm=function(x) {n=length(x); f=factorial(n); if (n>1) 
structure(vapply(seq_along(x), function(i) rbind(x[i], perm(x[-i])), 
x[rep(1L, f)]), dim=c(n, f)) else x}

It works for all king of vectors (integer, numeric, character, ...):

 ?? perm(1:3)
 ?? perm(pi*1:3)
 ?? perm(letters[1:3])

Obviously, a particular attention should be brought to the size of x 
(referred here as n) as the column number in the returned matrix growths 
as n!.. E.g. 8!=40320. So growths the cpu time too.

Hoping it helps,
Serguei.

>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri Jan 13 16:13:08 2023
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 13 Jan 2023 09:13:08 -0600
Subject: [Rd] Combinations and Permutations
In-Reply-To: <e7ce1401-434d-90a4-f7ca-ff995dce3bdc@insa-toulouse.fr>
References: <SY2PR01MB300330598A24A015C383C89CCDEB9@SY2PR01MB3003.ausprd01.prod.outlook.com>
 <e7ce1401-434d-90a4-f7ca-ff995dce3bdc@insa-toulouse.fr>
Message-ID: <a35d3a76-021b-1386-1bbb-63daba679ec1@prodsyse.com>



On 1/13/23 4:11 AM, Serguei Sokol via R-devel wrote:
> Le 13/01/2023 ? 09:00, Dario Strbenac via R-devel a ?crit?:
>> Good day,
>>
>> In utils, there is a function named combn. It would seem complementary 
>> for utils to also offer permutations because of how closely 
>> mathematically related they are to each other. Could permutations be 
>> added to save on a package dependency if developing a package?
> If you need a function returning a matrix with all permutations of a 
> vector x in its columns, a simple recursive one-liner can be sufficient, 
> no need for a whole package dependency for this:
> 
>  ?? perm=function(x) {n=length(x); f=factorial(n); if (n>1) 
> structure(vapply(seq_along(x), function(i) rbind(x[i], perm(x[-i])), 
> x[rep(1L, f)]), dim=c(n, f)) else x}
> 
> It works for all king of vectors (integer, numeric, character, ...):
> 
>  ?? perm(1:3)
>  ?? perm(pi*1:3)
>  ?? perm(letters[1:3])
> 
> Obviously, a particular attention should be brought to the size of x 
> (referred here as n) as the column number in the returned matrix growths 
> as n!.. E.g. 8!=40320. So growths the cpu time too.


	  What about "combinat::permn"?


	  Spencer Graves

> 
> Hoping it helps,
> Serguei.
> 
>>
>> --------------------------------------
>> Dario Strbenac
>> University of Sydney
>> Camperdown NSW 2050
>> Australia
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Sat Jan 14 17:05:31 2023
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Sat, 14 Jan 2023 16:05:31 +0000
Subject: [Rd] Bug or feature?
Message-ID: <e9e812c035874cf28f309c64c3016be9@chu-rouen.fr>

Dear developers,


I found an inconsistency in the predict.lm() function between offset and non-offset terms of the formula, but I am not sure whether that is intentional or a bug.


The problem can be shown in a simple example:


mod <- local({
    y <- rep(0,10)
    x <- rep(c(0,1), each=5)
    list(lm(y ~ x), lm(y ~ offset(x)))
})
# works fine, using the x variable of the local environment
predict(mod[[1]], newdata=data.frame(z=1:10))
# error 'x' not found, because it seeks x in the global environment
predict(mod[[2]], newdata=data.frame(z=1:10))

I would expect either both predict() to use the local x variable or the global x variable, but the current behavior is inconsistent.

In the worse case, both variables may exist but refer to different data, which seems to be very dangerous in my opinion.


The problem becomes obvious from the source code of model.frame.default() and predict.lm()

predict.lm() calls model.frame()

For a non-offset variable, the source code of model.frame.default shows:


variables <- eval(predvars, data, env)


Where env is the environment of the formula parameter.

Consequently, non-offset variables are evaluated in the context of the data frame, then in the environment of the formula/terms of the model.


For offset variables, the source code of predict.lm() contains:

eval(attr(tt, "variables")[[i + 1]], newdata)


It is not executed in the environment of the formula/terms of the model.


The inconsistency could easily be fixed by a patch to predict.lm() by replacing eval(attr(tt, "variables")[[i + 1]], newdata) by eval(attr(tt, "variables")[[i + 1]], newdata, environment(Terms))

The same modification would have to be done two lines after:

offset <- offset + eval(object$call$offset, newdata, environment(Terms))


However, fixing this inconsistency could break code that rely on the old behavior.


What do you think of that?


--

Sincerely

Andr? GILLIBERT

	[[alternative HTML version deleted]]


From ro|@nd@|u@@ @end|ng |rom thuenen@de  Mon Jan 16 11:23:47 2023
From: ro|@nd@|u@@ @end|ng |rom thuenen@de (=?UTF-8?Q?Roland_Fu=c3=9f?=)
Date: Mon, 16 Jan 2023 11:23:47 +0100
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
Message-ID: <036134c4-d818-eff8-9e8c-777595695c14@thuenen.de>

Dear R-core,

The language definition is very clear:

"As from R 1.4.0, any arithmetic operation involving a zero-length 
vector has a zero-length result."

Thus, `1 + numeric()` returns `numeric(0)`. However, I don't find this 
very intuitive because usually the shorter vector is recycled to the 
length of the longer vector. Would it be possible to throw at least a 
warning for such cases? I don't expect them to be intended by most users.

Best regards,

-- 
Dr. Roland Fu?

Th?nen-Institut f?r Agrarklimaschutz/
Th?nen Institute of Climate-Smart Agriculture

Bundesallee 65
D-38116 Braunschweig, Germany

Tel.: ++49 531 596 2627
Fax:  ++49 531 596 2699
Email: roland.fuss at thuenen.de

Arbeitsgruppe "Emissionsberichterstattung"/
Working group "Emission Inventories"
Email: emissionsinventare at thuenen.de

Das Johann Heinrich von Th?nen-Institut,
Bundesforschungsinstitut f?r L?ndliche R?ume,
Wald und Fischerei ? kurz: Th?nen-Institut ?
besteht aus 15 Fachinstituten, die in den
Bereichen ?konomie, ?kologie und Technologie
forschen und die Politik beraten.

The Johann Heinrich von Th?nen Institute,
Federal Research Institute for Rural Areas,
Forestry and Fisheries ? Th?nen Institute in brief ?
consists of 15 specialized institutes that
carry out research and provide policy advice
in the fields of economy, ecology and technology.


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan 16 12:11:10 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 16 Jan 2023 06:11:10 -0500
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
In-Reply-To: <036134c4-d818-eff8-9e8c-777595695c14@thuenen.de>
References: <036134c4-d818-eff8-9e8c-777595695c14@thuenen.de>
Message-ID: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>

On 16/01/2023 5:23 a.m., Roland Fu? wrote:
> Dear R-core,
> 
> The language definition is very clear:
> 
> "As from R 1.4.0, any arithmetic operation involving a zero-length
> vector has a zero-length result."
> 
> Thus, `1 + numeric()` returns `numeric(0)`. However, I don't find this
> very intuitive because usually the shorter vector is recycled to the
> length of the longer vector. Would it be possible to throw at least a
> warning for such cases? I don't expect them to be intended by most users.
> 
> Best regards,

The previous paragraph says "If the length of the longer vector is not a 
multiple of the shorter one, a warning is given."  Since 1 is not a 
multiple of 0, that implies a warning should be given here.

However, R 1.4.0 was released more than 20 years ago, so I would guess 
there are lots of packages intentionally using this.  For example, it's 
a way to propagate bad inputs through a long calculation that allows a 
single test at the end.

And even unintentional uses are unlikely to lead to problematic results: 
  numeric(0) is usually a pretty clear signal that something is wrong.

So I'd suggest a documentation change: "As from R 1.4.0, any arithmetic 
operation involving a zero-length vector has a zero-length result 
*without a warning*."

Duncan Murdoch


From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Jan 16 12:55:54 2023
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Mon, 16 Jan 2023 18:55:54 +0700
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
In-Reply-To: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>
References: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>
Message-ID: <314EC34E-7214-4037-9E18-A7E8AE7AD9E5@comcast.net>



Sent from my iPhone

> On Jan 16, 2023, at 6:11 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> ?On 16/01/2023 5:23 a.m., Roland Fu? wrote:
>> Dear R-core,
>> The language definition is very clear:
>> "As from R 1.4.0, any arithmetic operation involving a zero-length
>> vector has a zero-length result."
>> Thus, `1 + numeric()` returns `numeric(0)`. However, I don't find this
>> very intuitive because usually the shorter vector is recycled to the
>> length of the longer vector. Would it be possible to throw at least a
>> warning for such cases? I don't expect them to be intended by most users.
>> Best regards,
> 
> The previous paragraph says "If the length of the longer vector is not a multiple of the shorter one, a warning is given."  Since 1 is not a multiple of 0, that implies a warning should be given here.
> 
> However, R 1.4.0 was released more than 20 years ago, so I would guess there are lots of packages intentionally using this.  For example, it's a way to propagate bad inputs through a long calculation that allows a single test at the end.
> 
> And even unintentional uses are unlikely to lead to problematic results:  numeric(0) is usually a pretty clear signal that something is wrong.
> 
> So I'd suggest a documentation change: "As from R 1.4.0, any arithmetic operation involving a zero-length vector has a zero-length result *without a warning*."

I doubt that a documentation change will help very much. Roland is responding here with his and my surprise at the lack of a warning after witnessing my answer to an R newb Q where the impression at seeing ?numeric(0) was understood as the value 0. I suggested that many interpretations were possible and that a warning was given for NA generation. I stand with Roland in thinking a warning is appropriate. 

David Winsemius
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan 16 14:58:25 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 16 Jan 2023 08:58:25 -0500
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
In-Reply-To: <314EC34E-7214-4037-9E18-A7E8AE7AD9E5@comcast.net>
References: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>
 <314EC34E-7214-4037-9E18-A7E8AE7AD9E5@comcast.net>
Message-ID: <42313a53-c0b2-e673-2eae-ee93477af02a@gmail.com>

On 16/01/2023 6:55 a.m., David Winsemius wrote:
> 
> 
> Sent from my iPhone
> 
>> On Jan 16, 2023, at 6:11 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> ?On 16/01/2023 5:23 a.m., Roland Fu? wrote:
>>> Dear R-core,
>>> The language definition is very clear:
>>> "As from R 1.4.0, any arithmetic operation involving a zero-length
>>> vector has a zero-length result."
>>> Thus, `1 + numeric()` returns `numeric(0)`. However, I don't find this
>>> very intuitive because usually the shorter vector is recycled to the
>>> length of the longer vector. Would it be possible to throw at least a
>>> warning for such cases? I don't expect them to be intended by most users.
>>> Best regards,
>>
>> The previous paragraph says "If the length of the longer vector is not a multiple of the shorter one, a warning is given."  Since 1 is not a multiple of 0, that implies a warning should be given here.
>>
>> However, R 1.4.0 was released more than 20 years ago, so I would guess there are lots of packages intentionally using this.  For example, it's a way to propagate bad inputs through a long calculation that allows a single test at the end.
>>
>> And even unintentional uses are unlikely to lead to problematic results:  numeric(0) is usually a pretty clear signal that something is wrong.
>>
>> So I'd suggest a documentation change: "As from R 1.4.0, any arithmetic operation involving a zero-length vector has a zero-length result *without a warning*."
> 
> I doubt that a documentation change will help very much. Roland is responding here with his and my surprise at the lack of a warning after witnessing my answer to an R newb Q where the impression at seeing ?numeric(0) was understood as the value 0. I suggested that many interpretations were possible and that a warning was given for NA generation. I stand with Roland in thinking a warning is appropriate.

I didn't see this exchange, but I don't understand "a warning was given 
for NA generation".  We don't get a warning for 1 + NA.  Do you mean 
you'd like to get one?

In any case, I think your anecdote illustrates a different problem: 
printing numeric() as numeric(0) confused a beginning user.  I've also 
seen people get confused by that.

Perhaps the change should be to the way numeric(0) is printed, but  that 
would also have consequences, since some people test the way output is 
printed.

Or perhaps we should just recognize that it's in the nature of being a 
beginning user to be confused sometimes, and just help them to grow out 
of that stage.

Before a change like one of these is made, someone should make it in a 
local copy, then run R CMD check on every package on CRAN to see how 
disruptive it is.  Maybe adding a warning() will uncover so few 
intentional uses that fixing them is worthwhile.

The trouble is, running checks across CRAN is a very resource-intensive 
exercise, and analyzing the results is a very developer-intensive 
exercise.  I'm sure the doc change is easier.

Duncan Murdoch


From |on|de@ @end|ng |rom um|ch@edu  Mon Jan 16 15:04:49 2023
From: |on|de@ @end|ng |rom um|ch@edu (Edward Ionides)
Date: Mon, 16 Jan 2023 09:04:49 -0500
Subject: [Rd] memory leak in png()
Message-ID: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>

Hi all,

Yesterday I discovered what seems to me like a memory leak in png() so I'm
reporting it in case that is helpful. Here is a small reproducible example:

R -d "valgrind --tool=memcheck --track-origins=yes --leak-check=full"
--vanilla -e "png(filename='p.png'); plot(1:10); dev.off()"
## HAS LEAK
==1021711== LEAK SUMMARY:
==1021711==    definitely lost: 9,216 bytes in 30 blocks
==1021711==    indirectly lost: 19,370 bytes in 838 blocks
==1021711==      possibly lost: 3,868 bytes in 8 blocks

R -d "valgrind --tool=memcheck --track-origins=yes --leak-check=full"
--vanilla -e "pdf(file='p.pdf'); plot(1:10); dev.off()"
## NO LEAK
==1031300== LEAK SUMMARY:
==1031300==    definitely lost: 0 bytes in 0 blocks
==1031300==    indirectly lost: 0 bytes in 0 blocks
==1031300==      possibly lost: 0 bytes in 0 blocks

For some context, I am running R4.2.2. My goal was to run valgrind on the
latest version of my spatPomp package. A memory leak was detected by
rhub::check_with_valgrind(). I then tracked down the problem by running
valgrind locally and in the end it seemed to come down to a problem with
png(). This was used in the spatPomp unit tests while testing the plot
method. I can use pdf() instead, but the point here is to report the issue
in case it is not known.

I'm new to R package development and happy to accept any advice.

Thanks,
Ed

Edward L. Ionides
Associate Chair for Undergraduate Studies and Professor,
Department of Statistics, University of Michigan
1085 South University, Ann Arbor, MI 48109-1107
email: ionides at umich.edu
phone: 734 615 3332
office: 453 West Hall

	[[alternative HTML version deleted]]


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Mon Jan 16 15:49:38 2023
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Mon, 16 Jan 2023 20:19:38 +0530
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
In-Reply-To: <42313a53-c0b2-e673-2eae-ee93477af02a@gmail.com>
References: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>
 <314EC34E-7214-4037-9E18-A7E8AE7AD9E5@comcast.net>
 <42313a53-c0b2-e673-2eae-ee93477af02a@gmail.com>
Message-ID: <CADfFDC42zPw_RQN3oMiPnxTjS+DFchyZ6Sh5r-77mmhcYS4sRg@mail.gmail.com>

On Mon, Jan 16, 2023 at 7:28 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 16/01/2023 6:55 a.m., David Winsemius wrote:
> >
> >
> > Sent from my iPhone
> >
> >> On Jan 16, 2023, at 6:11 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> >>
> >> ?On 16/01/2023 5:23 a.m., Roland Fu? wrote:
> >>> Dear R-core,
> >>> The language definition is very clear:
> >>> "As from R 1.4.0, any arithmetic operation involving a zero-length
> >>> vector has a zero-length result."
> >>> Thus, `1 + numeric()` returns `numeric(0)`. However, I don't find this
> >>> very intuitive because usually the shorter vector is recycled to the
> >>> length of the longer vector. Would it be possible to throw at least a
> >>> warning for such cases? I don't expect them to be intended by most users.
> >>> Best regards,
> >>
> >> The previous paragraph says "If the length of the longer vector is not a multiple of the shorter one, a warning is given."  Since 1 is not a multiple of 0, that implies a warning should be given here.
> >>
> >> However, R 1.4.0 was released more than 20 years ago, so I would guess there are lots of packages intentionally using this.  For example, it's a way to propagate bad inputs through a long calculation that allows a single test at the end.
> >>
> >> And even unintentional uses are unlikely to lead to problematic results:  numeric(0) is usually a pretty clear signal that something is wrong.
> >>
> >> So I'd suggest a documentation change: "As from R 1.4.0, any arithmetic operation involving a zero-length vector has a zero-length result *without a warning*."
> >
> > I doubt that a documentation change will help very much. Roland is responding here with his and my surprise at the lack of a warning after witnessing my answer to an R newb Q where the impression at seeing ?numeric(0) was understood as the value 0. I suggested that many interpretations were possible and that a warning was given for NA generation. I stand with Roland in thinking a warning is appropriate.
>
> I didn't see this exchange, but I don't understand "a warning was given
> for NA generation".  We don't get a warning for 1 + NA.  Do you mean
> you'd like to get one?
>
> In any case, I think your anecdote illustrates a different problem:
> printing numeric() as numeric(0) confused a beginning user.  I've also
> seen people get confused by that.
>
> Perhaps the change should be to the way numeric(0) is printed, but  that
> would also have consequences, since some people test the way output is
> printed.
>
> Or perhaps we should just recognize that it's in the nature of being a
> beginning user to be confused sometimes, and just help them to grow out
> of that stage.
>
> Before a change like one of these is made, someone should make it in a
> local copy, then run R CMD check on every package on CRAN to see how
> disruptive it is.  Maybe adding a warning() will uncover so few
> intentional uses that fixing them is worthwhile.

To even do that, we would have to first decide which "cases" should
produce a warning.

Let's say `1 + x` should give a warning when x = numeric(0). Then
should `x^2` also produce a warning? Should `x^0.5`? Should `sqrt(x)`?
Should `log(x)`?

-Deepayan

> The trouble is, running checks across CRAN is a very resource-intensive
> exercise, and analyzing the results is a very developer-intensive
> exercise.  I'm sure the doc change is easier.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Mon Jan 16 16:53:25 2023
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Mon, 16 Jan 2023 15:53:25 +0000
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
In-Reply-To: <CADfFDC42zPw_RQN3oMiPnxTjS+DFchyZ6Sh5r-77mmhcYS4sRg@mail.gmail.com>
References: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>
 <314EC34E-7214-4037-9E18-A7E8AE7AD9E5@comcast.net>
 <42313a53-c0b2-e673-2eae-ee93477af02a@gmail.com>
 <CADfFDC42zPw_RQN3oMiPnxTjS+DFchyZ6Sh5r-77mmhcYS4sRg@mail.gmail.com>
Message-ID: <69dcf7e5858b4c839dab1497275a1fea@chu-rouen.fr>

Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> To even do that, we would have to first decide which "cases" should produce a warning.

> Let's say `1 + x` should give a warning when x = numeric(0). Then should `x^2` also produce a warning? Should `x^0.5`? Should `sqrt(x)`?
> Should `log(x)`?


The most probable errors would be in functions taking two arguments (e.g. `+`) and for which one argument has length >= 2 while the other has length 0.

In my experience, most code with accidental zero-length propagations (e.g. typo in data_frame$field) quickly lead to errors, that are easy to debug (except for beginners), and so, do not need a warning.

The only cases where zero-length propagation is really dangerous in my experience is in code using an aggregating function like sum(), all() or any(), because it silently returns a valid value for a zero-length argument. Emitting warnings for sum(numeric(0)) would probably have too many false positives but a (length >= 2) vs (length == 0) warning for common binary operators could sometimes catch the issue before it reaches the aggregating function.

-- 
Sincerely
Andr? GILLIBERT

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 17 09:33:26 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 17 Jan 2023 09:33:26 +0100
Subject: [Rd] Bug or feature?
In-Reply-To: <e9e812c035874cf28f309c64c3016be9@chu-rouen.fr>
References: <e9e812c035874cf28f309c64c3016be9@chu-rouen.fr>
Message-ID: <25542.23894.330252.313672@stat.math.ethz.ch>

>>>>> GILLIBERT, Andre 
>>>>>     on Sat, 14 Jan 2023 16:05:31 +0000 writes:

    > Dear developers,
    > I found an inconsistency in the predict.lm() function between offset and non-offset terms of the formula, but I am not sure whether that is intentional or a bug.


    > The problem can be shown in a simple example:

    > mod <- local({
    >   y <- rep(0,10)
    >   x <- rep(c(0,1), each=5)
    >   list(lm(y ~ x), lm(y ~ offset(x)))
    > })
    > # works fine, using the x variable of the local environment
    > predict(mod[[1]], newdata=data.frame(z=1:10))
    > # error 'x' not found, because it seeks x in the global environment
    > predict(mod[[2]], newdata=data.frame(z=1:10))

    > I would expect either both predict() to use the local x
    > variable or the global x variable, but the current
    > behavior is inconsistent.

    > In the worse case, both variables may exist but refer to
    > different data, which seems to be very dangerous in my
    > opinion.

    > The problem becomes obvious from the source code of model.frame.default() and predict.lm()

    > predict.lm() calls model.frame()

    > For a non-offset variable, the source code of model.frame.default shows:


    > variables <- eval(predvars, data, env)


    > Where env is the environment of the formula parameter.

    > Consequently, non-offset variables are evaluated in the context of the data frame, then in the environment of the formula/terms of the model.


    > For offset variables, the source code of predict.lm() contains:

    > eval(attr(tt, "variables")[[i + 1]], newdata)


    > It is not executed in the environment of the formula/terms of the model.


    > The inconsistency could easily be fixed by a patch to predict.lm() by replacing eval(attr(tt, "variables")[[i + 1]], newdata) by eval(attr(tt, "variables")[[i + 1]], newdata, environment(Terms))

    > The same modification would have to be done two lines after:

    > offset <- offset + eval(object$call$offset, newdata, environment(Terms))

    > However, fixing this inconsistency could break code that rely on the old behavior.

    > What do you think of that?

As I've worked last week on the  bugzilla issue about
predict.lm(), recently,
   https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16158

and before that on another small detail there,
I indeed had noticed -- just from code reading -- 
that there seem to be several small inconsistencies in
predict.lm();  also, between the two branches  se.fit=FALSE vs  se.fit=TRUE

In the mean time, you have filed a new bugzilla isse about this,

   https://bugs.r-project.org/show_bug.cgi?id=18456

so we (and everyone interested) will continue the discussion
there.

Thank you for contributing to make R better by this!

Best regards,
Martin


    > --

    > Sincerely
    > Andr? GILLIBERT

--
Martin Maechler
ETH Zurich  and  R Core team


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 17 10:55:51 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 17 Jan 2023 10:55:51 +0100
Subject: [Rd] memory leak in png()
In-Reply-To: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>
References: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>
Message-ID: <25542.28839.791709.198130@stat.math.ethz.ch>

>>>>> Edward Ionides 
>>>>>     on Mon, 16 Jan 2023 09:04:49 -0500 writes:

    > Hi all,

    > Yesterday I discovered what seems to me like a memory leak in png() so I'm
    > reporting it in case that is helpful. Here is a small reproducible example:

    > R -d "valgrind --tool=memcheck --track-origins=yes --leak-check=full"
    > --vanilla -e "png(filename='p.png'); plot(1:10); dev.off()"
    > ## HAS LEAK
    > ==1021711== LEAK SUMMARY:
    > ==1021711==    definitely lost: 9,216 bytes in 30 blocks
    > ==1021711==    indirectly lost: 19,370 bytes in 838 blocks
    > ==1021711==      possibly lost: 3,868 bytes in 8 blocks

    > R -d "valgrind --tool=memcheck --track-origins=yes --leak-check=full"
    > --vanilla -e "pdf(file='p.pdf'); plot(1:10); dev.off()"
    > ## NO LEAK
    > ==1031300== LEAK SUMMARY:
    > ==1031300==    definitely lost: 0 bytes in 0 blocks
    > ==1031300==    indirectly lost: 0 bytes in 0 blocks
    > ==1031300==      possibly lost: 0 bytes in 0 blocks

I can reproduce, although I need to have the memcheck options in ~/.valgrindrc
The same happens if grid-based graphics is used and for the
latest R-devel :

R-devel -d valgrind --vanilla -e 'png("p.png");lattice::xyplot(1~1);dev.off()'

Using  png() shows leak
using  pdf()  is fine (0 bytes lost)


Looking at the full report (--leak-check=full  --track-origins=true
as 2 lines in ~/.valgrindrc ) I see several origins tracked to
internal malloc code,
but then also e.g.,

==1410108== 96 bytes in 1 blocks are possibly lost in loss record 700 of 3,037
==1410108==    at 0x484A464: calloc (vg_replace_malloc.c:1328)
==1410108==    by 0x159EA3A0: g_malloc0 (gmem.c:155)
==1410108==    by 0x15A3AB8C: g_rc_box_alloc_full.constprop.0 (grcbox.c:234)
==1410108==    by 0x1600A6C9: UnknownInlinedFun (pangofc-fontmap.c:899)
==1410108==    by 0x1600A6C9: UnknownInlinedFun (pangofc-fontmap.c:2145)
==1410108==    by 0x1600A6C9: pango_fc_font_map_load_fontset (pangofc-fontmap.c:2245)
==1410108==    by 0x158E7474: UnknownInlinedFun (itemize.c:892)
==1410108==    by 0x158E7474: UnknownInlinedFun (itemize.c:952)
==1410108==    by 0x158E7474: pango_itemize_with_font (itemize.c:1564)
==1410108==    by 0x158FA89E: pango_layout_check_lines.part.0.lto_priv.0 (pango-layout.c:4894)
==1410108==    by 0x158EF4DB: UnknownInlinedFun (pango-layout.c:4786)
==1410108==    by 0x158EF4DB: pango_layout_get_line (pango-layout.c:1715)
==1410108==    by 0x1B5E441F: PG_text_extents (cairoFns.c:1487)
==1410108==    by 0x1B5E441F: PangoCairo_StrWidth (cairoFns.c:1565)
==1410108==    by 0x4CEBE6: GEStrWidth (engine.c:2615)
==1410108==    by 0x4CEBE6: GEStrWidth (engine.c:2578)
==1410108==    by 0x1BE12D11: textRect (util.c:198)
==1410108==    by 0x1BDFAF19: gridText (grid.c:3740)
==1410108==    by 0x1BE01FAB: L_textBounds (grid.c:3892)

which (from the bottom up) shows  package grid C code,
then R main but infrastructure for grDevices ("GEStrWidth (engine.c)")  and
subdirectory grDevices/src/cairo/cairoFns.c
and then goes into system cairo or pangocairo libraries,
which here (Linux Fedora 36) are (I thik)

	libpangocairo-1.0.so.0 
	libpango-1.0.so.0 

{as they are stripped, I don't know how to check }

To *fix* this I also have to defer to others.

Thank you for the report,
Martin

--
Martin Maechler
ETH Zurich  and  R Core team


    > For some context, I am running R4.2.2. My goal was to run valgrind on the
    > latest version of my spatPomp package. A memory leak was detected by
    > rhub::check_with_valgrind(). I then tracked down the problem by running
    > valgrind locally and in the end it seemed to come down to a problem with
    > png(). This was used in the spatPomp unit tests while testing the plot
    > method. I can use pdf() instead, but the point here is to report the issue
    > in case it is not known.

    > I'm new to R package development and happy to accept any advice.

    > Thanks,
    > Ed

    > Edward L. Ionides
    > Associate Chair for Undergraduate Studies and Professor,
    > Department of Statistics, University of Michigan
    > 1085 South University, Ann Arbor, MI 48109-1107
    > email: ionides at umich.edu
    > phone: 734 615 3332
    > office: 453 West Hall

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 17 11:37:13 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 17 Jan 2023 11:37:13 +0100
Subject: [Rd] memory leak in png()
In-Reply-To: <25542.28839.791709.198130@stat.math.ethz.ch>
References: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>
 <25542.28839.791709.198130@stat.math.ethz.ch>
Message-ID: <25542.31321.810219.230879@stat.math.ethz.ch>

Note that  cairo_pdf()  also suffers from the same leak
.. as to be expected once you notice that much of the cairo
device handling uses common code.
... 
.. and then, when you are aware that on Linux, the default
interactive device is x11() and its default type is *also*
"cairo" { possibly not on the Mac, according to ?x11 }
then, when I try, I even get almost the same valgrind report for
"the standard" graphics device:

(excerpt + final summary)

=1429846== 8,943 (512 direct, 8,431 indirect) bytes in 1 blocks are definitely lost in loss record 2,316 of 3,250
==1429846==    at 0x484A6AF: realloc (vg_replace_malloc.c:1437)
==1429846==    by 0x16036BD8: FcPatternObjectInsertElt (fcpat.c:516)
==1429846==    by 0x1603AD40: FcPatternObjectAddWithBinding (fcpat.c:711)
==1429846==    by 0x16031E1F: UnknownInlinedFun (fcpat.c:738)
==1429846==    by 0x16031E1F: UnknownInlinedFun (fcpat.c:884)
==1429846==    by 0x16031E1F: FcDefaultSubstitute (fcdefault.c:302)
==1429846==    by 0x1600A49D: UnknownInlinedFun (pangofc-fontmap.c:2066)
==1429846==    by 0x1600A49D: UnknownInlinedFun (pangofc-fontmap.c:2143)
==1429846==    by 0x1600A49D: pango_fc_font_map_load_fontset (pangofc-fontmap.c:2245)
==1429846==    by 0x158E7474: UnknownInlinedFun (itemize.c:892)
==1429846==    by 0x158E7474: UnknownInlinedFun (itemize.c:952)
==1429846==    by 0x158E7474: pango_itemize_with_font (itemize.c:1564)
==1429846==    by 0x158FA89E: pango_layout_check_lines.part.0.lto_priv.0 (pango-layout.c:4894)
==1429846==    by 0x158EF4DB: UnknownInlinedFun (pango-layout.c:4786)
==1429846==    by 0x158EF4DB: pango_layout_get_line (pango-layout.c:1715)
==1429846==    by 0x15715ACF: PG_text_extents (cairoFns.c:1487)
==1429846==    by 0x15715ACF: PangoCairo_StrWidth (cairoFns.c:1565)
==1429846==    by 0x4CEBE6: GEStrWidth (engine.c:2615)
==1429846==    by 0x4CEBE6: GEStrWidth (engine.c:2578)
==1429846==    by 0x1C228D11: textRect (util.c:198)
==1429846==    by 0x1C210F19: gridText (grid.c:3740)
==1429846== 

    [....................]
    [....................]

LEAK SUMMARY:
==1429846==    definitely lost: 6,656 bytes in 10 blocks
==1429846==    indirectly lost: 43,645 bytes in 1,871 blocks
==1429846==      possibly lost: 4,676 bytes in 17 blocks
==1429846==    still reachable: 87,821,522 bytes in 31,863 blocks
==1429846==                       of which reachable via heuristic:
==1429846==                         newarray           : 4,264 bytes in 1 blocks
==1429846==         suppressed: 0 bytes in 0 blocks
==1429846== Reachable blocks (those to which a pointer was found) are not shown.
==1429846== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==1429846== 
==1429846== For lists of detected and suppressed errors, rerun with: -s
==1429846== ERROR SUMMARY: 13 errors from 13 contexts (suppressed: 0 from 0)


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jan 17 14:06:04 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 17 Jan 2023 08:06:04 -0500
Subject: [Rd] memory leak in png()
In-Reply-To: <25542.28839.791709.198130@stat.math.ethz.ch>
References: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>
 <25542.28839.791709.198130@stat.math.ethz.ch>
Message-ID: <d48e82e9-064f-d6a1-0a73-1e16f8ce1dd2@gmail.com>

I don't have a valgrind-capable version of R, but I'd be interested to 
see whether this is a one-time loss, or repeated.  That is, do you get a 
much bigger loss from running the lossy code in a loop like this?

  for (i in 1:100) { png(filename='p.png'); plot(1:10); dev.off() }

Duncan Murdoch


On 17/01/2023 4:55 a.m., Martin Maechler wrote:
>>>>>> Edward Ionides
>>>>>>      on Mon, 16 Jan 2023 09:04:49 -0500 writes:
> 
>      > Hi all,
> 
>      > Yesterday I discovered what seems to me like a memory leak in png() so I'm
>      > reporting it in case that is helpful. Here is a small reproducible example:
> 
>      > R -d "valgrind --tool=memcheck --track-origins=yes --leak-check=full"
>      > --vanilla -e "png(filename='p.png'); plot(1:10); dev.off()"
>      > ## HAS LEAK
>      > ==1021711== LEAK SUMMARY:
>      > ==1021711==    definitely lost: 9,216 bytes in 30 blocks
>      > ==1021711==    indirectly lost: 19,370 bytes in 838 blocks
>      > ==1021711==      possibly lost: 3,868 bytes in 8 blocks
> 
>      > R -d "valgrind --tool=memcheck --track-origins=yes --leak-check=full"
>      > --vanilla -e "pdf(file='p.pdf'); plot(1:10); dev.off()"
>      > ## NO LEAK
>      > ==1031300== LEAK SUMMARY:
>      > ==1031300==    definitely lost: 0 bytes in 0 blocks
>      > ==1031300==    indirectly lost: 0 bytes in 0 blocks
>      > ==1031300==      possibly lost: 0 bytes in 0 blocks
> 
> I can reproduce, although I need to have the memcheck options in ~/.valgrindrc
> The same happens if grid-based graphics is used and for the
> latest R-devel :
> 
> R-devel -d valgrind --vanilla -e 'png("p.png");lattice::xyplot(1~1);dev.off()'
> 
> Using  png() shows leak
> using  pdf()  is fine (0 bytes lost)
> 
> 
> Looking at the full report (--leak-check=full  --track-origins=true
> as 2 lines in ~/.valgrindrc ) I see several origins tracked to
> internal malloc code,
> but then also e.g.,
> 
> ==1410108== 96 bytes in 1 blocks are possibly lost in loss record 700 of 3,037
> ==1410108==    at 0x484A464: calloc (vg_replace_malloc.c:1328)
> ==1410108==    by 0x159EA3A0: g_malloc0 (gmem.c:155)
> ==1410108==    by 0x15A3AB8C: g_rc_box_alloc_full.constprop.0 (grcbox.c:234)
> ==1410108==    by 0x1600A6C9: UnknownInlinedFun (pangofc-fontmap.c:899)
> ==1410108==    by 0x1600A6C9: UnknownInlinedFun (pangofc-fontmap.c:2145)
> ==1410108==    by 0x1600A6C9: pango_fc_font_map_load_fontset (pangofc-fontmap.c:2245)
> ==1410108==    by 0x158E7474: UnknownInlinedFun (itemize.c:892)
> ==1410108==    by 0x158E7474: UnknownInlinedFun (itemize.c:952)
> ==1410108==    by 0x158E7474: pango_itemize_with_font (itemize.c:1564)
> ==1410108==    by 0x158FA89E: pango_layout_check_lines.part.0.lto_priv.0 (pango-layout.c:4894)
> ==1410108==    by 0x158EF4DB: UnknownInlinedFun (pango-layout.c:4786)
> ==1410108==    by 0x158EF4DB: pango_layout_get_line (pango-layout.c:1715)
> ==1410108==    by 0x1B5E441F: PG_text_extents (cairoFns.c:1487)
> ==1410108==    by 0x1B5E441F: PangoCairo_StrWidth (cairoFns.c:1565)
> ==1410108==    by 0x4CEBE6: GEStrWidth (engine.c:2615)
> ==1410108==    by 0x4CEBE6: GEStrWidth (engine.c:2578)
> ==1410108==    by 0x1BE12D11: textRect (util.c:198)
> ==1410108==    by 0x1BDFAF19: gridText (grid.c:3740)
> ==1410108==    by 0x1BE01FAB: L_textBounds (grid.c:3892)
> 
> which (from the bottom up) shows  package grid C code,
> then R main but infrastructure for grDevices ("GEStrWidth (engine.c)")  and
> subdirectory grDevices/src/cairo/cairoFns.c
> and then goes into system cairo or pangocairo libraries,
> which here (Linux Fedora 36) are (I thik)
> 
> 	libpangocairo-1.0.so.0
> 	libpango-1.0.so.0
> 
> {as they are stripped, I don't know how to check }
> 
> To *fix* this I also have to defer to others.
> 
> Thank you for the report,
> Martin
> 
> --
> Martin Maechler
> ETH Zurich  and  R Core team
> 
> 
>      > For some context, I am running R4.2.2. My goal was to run valgrind on the
>      > latest version of my spatPomp package. A memory leak was detected by
>      > rhub::check_with_valgrind(). I then tracked down the problem by running
>      > valgrind locally and in the end it seemed to come down to a problem with
>      > png(). This was used in the spatPomp unit tests while testing the plot
>      > method. I can use pdf() instead, but the point here is to report the issue
>      > in case it is not known.
> 
>      > I'm new to R package development and happy to accept any advice.
> 
>      > Thanks,
>      > Ed
> 
>      > Edward L. Ionides
>      > Associate Chair for Undergraduate Studies and Professor,
>      > Department of Statistics, University of Michigan
>      > 1085 South University, Ann Arbor, MI 48109-1107
>      > email: ionides at umich.edu
>      > phone: 734 615 3332
>      > office: 453 West Hall
> 
>      > [[alternative HTML version deleted]]
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Tue Jan 17 14:39:01 2023
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Tue, 17 Jan 2023 13:39:01 +0000
Subject: [Rd] memory leak in png()
In-Reply-To: <d48e82e9-064f-d6a1-0a73-1e16f8ce1dd2@gmail.com>
References: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>
 <25542.28839.791709.198130@stat.math.ethz.ch>
 <d48e82e9-064f-d6a1-0a73-1e16f8ce1dd2@gmail.com>
Message-ID: <63a393be-a868-cb50-436d-4e464c39ea5a@hiddenelephants.co.uk>

On 17/01/2023 13:06, Duncan Murdoch wrote:
> I don't have a valgrind-capable version of R, but I'd be interested to 
> see whether this is a one-time loss, or repeated.? That is, do you get a 
> much bigger loss from running the lossy code in a loop like this?
> 
>  ?for (i in 1:100) { png(filename='p.png'); plot(1:10); dev.off() }
> 
> Duncan Murdoch

Duncan - Not that I'm seeing

Rdevel -d valgrind --vanilla -e " for (i in 1:1) {png(filename='p.png'); 
plot(1:10); dev.off()}"

==63291== LEAK SUMMARY:
==63291==    definitely lost: 2,560 bytes in 4 blocks
==63291==    indirectly lost: 17,710 bytes in 762 blocks
==63291==      possibly lost: 1,820 bytes in 8 blocks
==63291==    still reachable: 52,177,408 bytes in 21,282 blocks
==63291==                       of which reachable via heuristic:
==63291==                         newarray           : 4,264 bytes in 1 
blocks
==63291==         suppressed: 0 bytes in 0 blocks

Rdevel -d valgrind --vanilla -e " for (i in 1:100) 
{png(filename='p.png'); plot(1:10); dev.off()}"

==63464== LEAK SUMMARY:
==63464==    definitely lost: 2,560 bytes in 4 blocks
==63464==    indirectly lost: 17,710 bytes in 762 blocks
==63464==      possibly lost: 1,820 bytes in 8 blocks
==63464==    still reachable: 56,072,939 bytes in 19,283 blocks
==63464==                       of which reachable via heuristic:
==63464==                         newarray           : 4,264 bytes in 1 
blocks
==63464==         suppressed: 0 bytes in 0 blocks

Tim

> 
> 
> On 17/01/2023 4:55 a.m., Martin Maechler wrote:
>>>>>>> Edward Ionides
>>>>>>> ???? on Mon, 16 Jan 2023 09:04:49 -0500 writes:
>>
>> ???? > Hi all,
>>
>> ???? > Yesterday I discovered what seems to me like a memory leak in 
>> png() so I'm
>> ???? > reporting it in case that is helpful. Here is a small 
>> reproducible example:
>>
>> ???? > R -d "valgrind --tool=memcheck --track-origins=yes 
>> --leak-check=full"
>> ???? > --vanilla -e "png(filename='p.png'); plot(1:10); dev.off()"
>> ???? > ## HAS LEAK
>> ???? > ==1021711== LEAK SUMMARY:
>> ???? > ==1021711==??? definitely lost: 9,216 bytes in 30 blocks
>> ???? > ==1021711==??? indirectly lost: 19,370 bytes in 838 blocks
>> ???? > ==1021711==????? possibly lost: 3,868 bytes in 8 blocks
>>
>> ???? > R -d "valgrind --tool=memcheck --track-origins=yes 
>> --leak-check=full"
>> ???? > --vanilla -e "pdf(file='p.pdf'); plot(1:10); dev.off()"
>> ???? > ## NO LEAK
>> ???? > ==1031300== LEAK SUMMARY:
>> ???? > ==1031300==??? definitely lost: 0 bytes in 0 blocks
>> ???? > ==1031300==??? indirectly lost: 0 bytes in 0 blocks
>> ???? > ==1031300==????? possibly lost: 0 bytes in 0 blocks
>>
>> I can reproduce, although I need to have the memcheck options in 
>> ~/.valgrindrc
>> The same happens if grid-based graphics is used and for the
>> latest R-devel :
>>
>> R-devel -d valgrind --vanilla -e 
>> 'png("p.png");lattice::xyplot(1~1);dev.off()'
>>
>> Using? png() shows leak
>> using? pdf()? is fine (0 bytes lost)
>>
>>
>> Looking at the full report (--leak-check=full? --track-origins=true
>> as 2 lines in ~/.valgrindrc ) I see several origins tracked to
>> internal malloc code,
>> but then also e.g.,
>>
>> ==1410108== 96 bytes in 1 blocks are possibly lost in loss record 700 
>> of 3,037
>> ==1410108==??? at 0x484A464: calloc (vg_replace_malloc.c:1328)
>> ==1410108==??? by 0x159EA3A0: g_malloc0 (gmem.c:155)
>> ==1410108==??? by 0x15A3AB8C: g_rc_box_alloc_full.constprop.0 
>> (grcbox.c:234)
>> ==1410108==??? by 0x1600A6C9: UnknownInlinedFun (pangofc-fontmap.c:899)
>> ==1410108==??? by 0x1600A6C9: UnknownInlinedFun (pangofc-fontmap.c:2145)
>> ==1410108==??? by 0x1600A6C9: pango_fc_font_map_load_fontset 
>> (pangofc-fontmap.c:2245)
>> ==1410108==??? by 0x158E7474: UnknownInlinedFun (itemize.c:892)
>> ==1410108==??? by 0x158E7474: UnknownInlinedFun (itemize.c:952)
>> ==1410108==??? by 0x158E7474: pango_itemize_with_font (itemize.c:1564)
>> ==1410108==??? by 0x158FA89E: 
>> pango_layout_check_lines.part.0.lto_priv.0 (pango-layout.c:4894)
>> ==1410108==??? by 0x158EF4DB: UnknownInlinedFun (pango-layout.c:4786)
>> ==1410108==??? by 0x158EF4DB: pango_layout_get_line (pango-layout.c:1715)
>> ==1410108==??? by 0x1B5E441F: PG_text_extents (cairoFns.c:1487)
>> ==1410108==??? by 0x1B5E441F: PangoCairo_StrWidth (cairoFns.c:1565)
>> ==1410108==??? by 0x4CEBE6: GEStrWidth (engine.c:2615)
>> ==1410108==??? by 0x4CEBE6: GEStrWidth (engine.c:2578)
>> ==1410108==??? by 0x1BE12D11: textRect (util.c:198)
>> ==1410108==??? by 0x1BDFAF19: gridText (grid.c:3740)
>> ==1410108==??? by 0x1BE01FAB: L_textBounds (grid.c:3892)
>>
>> which (from the bottom up) shows? package grid C code,
>> then R main but infrastructure for grDevices ("GEStrWidth 
>> (engine.c)")? and
>> subdirectory grDevices/src/cairo/cairoFns.c
>> and then goes into system cairo or pangocairo libraries,
>> which here (Linux Fedora 36) are (I thik)
>>
>> ????libpangocairo-1.0.so.0
>> ????libpango-1.0.so.0
>>
>> {as they are stripped, I don't know how to check }
>>
>> To *fix* this I also have to defer to others.
>>
>> Thank you for the report,
>> Martin
>>
>> -- 
>> Martin Maechler
>> ETH Zurich? and? R Core team
>>
>>
>> ???? > For some context, I am running R4.2.2. My goal was to run 
>> valgrind on the
>> ???? > latest version of my spatPomp package. A memory leak was 
>> detected by
>> ???? > rhub::check_with_valgrind(). I then tracked down the problem by 
>> running
>> ???? > valgrind locally and in the end it seemed to come down to a 
>> problem with
>> ???? > png(). This was used in the spatPomp unit tests while testing 
>> the plot
>> ???? > method. I can use pdf() instead, but the point here is to 
>> report the issue
>> ???? > in case it is not known.
>>
>> ???? > I'm new to R package development and happy to accept any advice.
>>
>> ???? > Thanks,
>> ???? > Ed
>>
>> ???? > Edward L. Ionides
>> ???? > Associate Chair for Undergraduate Studies and Professor,
>> ???? > Department of Statistics, University of Michigan
>> ???? > 1085 South University, Ann Arbor, MI 48109-1107
>> ???? > email: ionides at umich.edu
>> ???? > phone: 734 615 3332
>> ???? > office: 453 West Hall
>>
>> ???? > [[alternative HTML version deleted]]
>>
>> ???? > ______________________________________________
>> ???? > R-devel at r-project.org mailing list
>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 17 15:06:50 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 17 Jan 2023 15:06:50 +0100
Subject: [Rd] memory leak in png()
In-Reply-To: <63a393be-a868-cb50-436d-4e464c39ea5a@hiddenelephants.co.uk>
References: <CAN=OUeXJvTtQL4fC3mSjcocMV+quAKONX-kW6sKPe0poy93Zsg@mail.gmail.com>
 <25542.28839.791709.198130@stat.math.ethz.ch>
 <d48e82e9-064f-d6a1-0a73-1e16f8ce1dd2@gmail.com>
 <63a393be-a868-cb50-436d-4e464c39ea5a@hiddenelephants.co.uk>
Message-ID: <25542.43898.189650.616798@stat.math.ethz.ch>

>>>>> Tim Taylor 
>>>>>     on Tue, 17 Jan 2023 13:39:01 +0000 writes:

    > On 17/01/2023 13:06, Duncan Murdoch wrote:
    >> I don't have a valgrind-capable version of R, but I'd be interested to 
    >> see whether this is a one-time loss, or repeated.? That is, do you get a 
    >> much bigger loss from running the lossy code in a loop like this?
    >> 
    >> ?for (i in 1:100) { png(filename='p.png'); plot(1:10); dev.off() }
    >> 
    >> Duncan Murdoch

    > Duncan - Not that I'm seeing

> Duncan - Not that I'm seeing
> 
> Rdevel -d valgrind --vanilla -e " for (i in 1:1) {png(filename='p.png'); 
> plot(1:10); dev.off()}"
> 
> ==63291== LEAK SUMMARY:
> ==63291==    definitely lost: 2,560 bytes in 4 blocks
> ==63291==    indirectly lost: 17,710 bytes in 762 blocks
> ==63291==      possibly lost: 1,820 bytes in 8 blocks
> ==63291==    still reachable: 52,177,408 bytes in 21,282 blocks
> ==63291==                       of which reachable via heuristic:
> ==63291==                         newarray           : 4,264 bytes in 1 
> blocks
> ==63291==         suppressed: 0 bytes in 0 blocks
> 
> Rdevel -d valgrind --vanilla -e " for (i in 1:100) 
> {png(filename='p.png'); plot(1:10); dev.off()}"
> 
> ==63464== LEAK SUMMARY:
> ==63464==    definitely lost: 2,560 bytes in 4 blocks
> ==63464==    indirectly lost: 17,710 bytes in 762 blocks
> ==63464==      possibly lost: 1,820 bytes in 8 blocks
> ==63464==    still reachable: 56,072,939 bytes in 19,283 blocks
> ==63464==                       of which reachable via heuristic:
> ==63464==                         newarray           : 4,264 bytes in 1 
> blocks
> ==63464==         suppressed: 0 bytes in 0 blocks
> 
> Tim


Thank you very much, Duncan and Tim.
Indeed someone else mentioned to me privately that they thought
these were "once in an R session"-losses, and hence not at all
problematic:

There are several places in the R sources (written in C),
where *static* (fixed size) buffers originally are not allocated
and once they are used are allocated and then used for the rest
of the R session.

It's comparable to not having all base packages loaded in
your R session when you start up: Then they do *not* use any
memory (and startup time) resources, and if you really need
them, load the namespaces and possibly even attach the package
to search().

That is perfectly valid smart use of resources from within R,
and indeed a feature and not a bug.

Martin


From pd@|gd @end|ng |rom gm@||@com  Tue Jan 17 16:41:14 2023
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 17 Jan 2023 16:41:14 +0100
Subject: [Rd] Recycling in arithmetic operations involving zero-length
 vectors
In-Reply-To: <69dcf7e5858b4c839dab1497275a1fea@chu-rouen.fr>
References: <81b28da2-a549-eff5-c13e-95b1b5e55b16@gmail.com>
 <314EC34E-7214-4037-9E18-A7E8AE7AD9E5@comcast.net>
 <42313a53-c0b2-e673-2eae-ee93477af02a@gmail.com>
 <CADfFDC42zPw_RQN3oMiPnxTjS+DFchyZ6Sh5r-77mmhcYS4sRg@mail.gmail.com>
 <69dcf7e5858b4c839dab1497275a1fea@chu-rouen.fr>
Message-ID: <68C62199-DD2E-404C-8B7A-114B96B759B0@gmail.com>

Actually, sum(), all(), any(), prod() all return a _carefully considered_ result in the case of an empty vector. The sum over a disjoint union of sets should be the sum of the sums over each set, so if a set is empty, its contribution to the sum must be zero. Similarly, the product over an empty set is 1. Logical aggregate all() should be stable for "&" and any() for "|", hence all(logical(0))==TRUE and any(logical(0))==FALSE. 

-pd

> On 16 Jan 2023, at 16:53 , GILLIBERT, Andre <Andre.Gillibert at chu-rouen.fr> wrote:
> 
> Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
>> To even do that, we would have to first decide which "cases" should produce a warning.
> 
>> Let's say `1 + x` should give a warning when x = numeric(0). Then should `x^2` also produce a warning? Should `x^0.5`? Should `sqrt(x)`?
>> Should `log(x)`?
> 
> 
> The most probable errors would be in functions taking two arguments (e.g. `+`) and for which one argument has length >= 2 while the other has length 0.
> 
> In my experience, most code with accidental zero-length propagations (e.g. typo in data_frame$field) quickly lead to errors, that are easy to debug (except for beginners), and so, do not need a warning.
> 
> The only cases where zero-length propagation is really dangerous in my experience is in code using an aggregating function like sum(), all() or any(), because it silently returns a valid value for a zero-length argument. Emitting warnings for sum(numeric(0)) would probably have too many false positives but a (length >= 2) vs (length == 0) warning for common binary operators could sometimes catch the issue before it reaches the aggregating function.
> 
> -- 
> Sincerely
> Andr? GILLIBERT
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From dj@@mper| @end|ng |rom gm@||@com  Wed Jan 18 04:33:26 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Tue, 17 Jan 2023 22:33:26 -0500
Subject: [Rd] Problem installing gdb into Rtools42
Message-ID: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>

Hello,

I tried installing gdb into Rtools42 following the instructions here
https://cran.r-project.org/bin/windows/base/howto-R-4.2.html

I ran 'pacman -Sy gdb', and the installation seemed to complete without
problems.

But gdb could not be started because incorrect DLL versions were installed,
in particular, the missing DLL's are: msys-ffi-8.dll and
msys-unistring-5.dll.

Is there an alternative way to install gdb for use with Rtool42?

Thanks,
Dominick

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jan 18 08:40:17 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 18 Jan 2023 08:40:17 +0100
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
Message-ID: <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>


On 1/18/23 04:33, Dominick Samperi wrote:
> Hello,
>
> I tried installing gdb into Rtools42 following the instructions here
> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>
> I ran 'pacman -Sy gdb', and the installation seemed to complete without
> problems.
>
> But gdb could not be started because incorrect DLL versions were installed,
> in particular, the missing DLL's are: msys-ffi-8.dll and
> msys-unistring-5.dll.

Try upgrading Msys2 using

pacman -Syuu

Tomas

> Is there an alternative way to install gdb for use with Rtool42?
>
> Thanks,
> Dominick
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From dj@@mper| @end|ng |rom gm@||@com  Wed Jan 18 17:39:12 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Wed, 18 Jan 2023 11:39:12 -0500
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
 <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
Message-ID: <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>

Thanks,

But this didn't work. It installs msys2 along with lots of other stuff, and
gdb would not start as before (missing DLL's).

Then I tried to run the command you suggested again, and there was a
warning from the package manager about a cycle detected, but now gdb starts
with the following messages...

Traceback (most recent call last):
  File "<string>", ine 3, in <module>
ModuleNotFoundError: No module named 'libstdcxx'
/etc/gdbinit:5: Error in sourced command file:
Error while executing Python code.

There is also a line...

This GDB was configured as "x86_64_pc-msys".

(Shouldn't that be msys2?)

If I ignore the messages and try to debug a terminal application, there are
messages
stating that multiple threads are started, and the application accepts no
keyboard
input, and ultimately must be terminated by closing the window.

It appears there are other development communities negatively impacted by
the fork to mingw-w64. This did not go smoothly.

Perhaps it would be safer to simply provide a version of Rtools42 that
comes with
gdb and msys2?

Dominick




On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 1/18/23 04:33, Dominick Samperi wrote:
> > Hello,
> >
> > I tried installing gdb into Rtools42 following the instructions here
> > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
> >
> > I ran 'pacman -Sy gdb', and the installation seemed to complete without
> > problems.
> >
> > But gdb could not be started because incorrect DLL versions were
> installed,
> > in particular, the missing DLL's are: msys-ffi-8.dll and
> > msys-unistring-5.dll.
>
> Try upgrading Msys2 using
>
> pacman -Syuu
>
> Tomas
>
> > Is there an alternative way to install gdb for use with Rtool42?
> >
> > Thanks,
> > Dominick
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jan 18 18:56:40 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 18 Jan 2023 18:56:40 +0100
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
 <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
 <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>
Message-ID: <c6b730ea-9147-acc9-1d8f-f5b8cfc384e3@gmail.com>

On 1/18/23 17:39, Dominick Samperi wrote:
> Thanks,
>
> But this didn't work. It installs msys2 along with lots of other 
> stuff, and gdb would not start as before (missing DLL's).
>
> Then I tried to run the command you suggested again, and there was a 
> warning from the package manager about a cycle detected, but now gdb 
> starts with the following messages...

Well, so it did work in the end. You didn't share what was the output 
from the command the first and second time around. Actually you have 
even deleted the command from the thread, so now nobody can see it (it 
was "pacman -Syuu").

In principle, sometimes one has to re-run the update the second time 
when the runtime needs to be updated, and the output says that in that 
case. This is because you are updating Msys2 from Msys2 itself. These 
things are harder on Windows due to file locking, hence the need for 
re-running this.

What happened is probably (but again, I have to be guessing as you 
didn't show the context) that you have installed gdb to an outdated 
Msys2 installation, getting a new version of gdb depending on some new 
runtime shared libraries. By updating Msys2, you got the new shared 
libraries gdb needed and you could run it.

>
> Traceback (most recent call last):
> ? File "<string>", ine 3, in <module>
> ModuleNotFoundError: No module named 'libstdcxx'
> /etc/gdbinit:5: Error in sourced command file:
> Error while executing Python code.

It is safe and best to ignore this. It is a bug in Msys2 which has been 
reported.
https://github.com/msys2/MSYS2-packages/issues/2923

Please also note it is documented in 
https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
(see Additional debugging hints)

>
> There is also a line...
>
> This GDB was configured as "x86_64_pc-msys".
>
> (Shouldn't that be msys2?)

No. Msys2 is the name for the whole project. "msys" is the name of one 
of subsystem, one which uses the msys (cygwin) runtime. It is not 
necessary to understand these details for using Msys2/Rtools42, but if 
you are still interested to know more, please refer to Msys2 documentation.

> If I ignore the messages and try to debug a terminal application, 
> there are messages
> stating that multiple threads are started, and the application accepts 
> no keyboard
> input, and ultimately must be terminated by closing the window.
Please really you need to show more context to get help. I am using this 
every day and it works for me, as well as for other people. Also, please 
read the documentation especially if you are running into problems:

https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
https://cran.r-project.org/bin/windows/base/howto-R-devel.html

Problems with keyboard input are probably related to which terminal you 
are using. In some terminals, you would have to use winpty (run gdb with 
winpty) for line editing to work. Please see "Additional debugging 
hints" in the documentation.

In a clean, updated install of Rtools42, with gdb installed as 
documented, no additional tweaks are needed to run gdb from the 
"Rtools42 bash" (mintty terminal running bash from Msys2).

> It appears there are other development communities negatively impacted by
> the fork to mingw-w64. This did not go smoothly.

I don't understand what you mean. As far as I know, R has been using 
MinGW-W64 (and before that MinGW) from the beginning, certainly it has 
been using MinGW-W64 for many years now. The official builds never used 
MSVC, there was no switching to MinGW/MinGW-W64 in the case of R afair, 
at least not in the recent past.

But, in either case, the choice of MinGW-W64 is orthogonal to the choice 
of Msys2 as the provider of the build tools. Rtools42/43 come also in a 
compiler toolchain+libraries bundle, without Msys2, which in theory you 
could use with a different set of build tools. But you would be on your 
own to figure out the details.

>
> Perhaps it would be safer to simply provide a version of Rtools42 that 
> comes with
> gdb and msys2?

Rtools42 comes with Msys2. gdb is not installed there by default, 
because most people don't need it, but it is documented how to install 
it. I've now updated the documentation to always remind to update the 
system before installing any Msys2 packages.

Tomas

>
> Dominick
>
>
>
>
> On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera 
> <tomas.kalibera at gmail.com> wrote:
>
>
>     On 1/18/23 04:33, Dominick Samperi wrote:
>     > Hello,
>     >
>     > I tried installing gdb into Rtools42 following the instructions here
>     > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>     >
>     > I ran 'pacman -Sy gdb', and the installation seemed to complete
>     without
>     > problems.
>     >
>     > But gdb could not be started because incorrect DLL versions were
>     installed,
>     > in particular, the missing DLL's are: msys-ffi-8.dll and
>     > msys-unistring-5.dll.
>
>     Try upgrading Msys2 using
>
>     pacman -Syuu
>
>     Tomas
>
>     > Is there an alternative way to install gdb for use with Rtool42?
>     >
>     > Thanks,
>     > Dominick
>     >
>     >? ? ? ?[[alternative HTML version deleted]]
>     >
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
	[[alternative HTML version deleted]]


From dj@@mper| @end|ng |rom gm@||@com  Wed Jan 18 19:41:18 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Wed, 18 Jan 2023 13:41:18 -0500
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <c6b730ea-9147-acc9-1d8f-f5b8cfc384e3@gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
 <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
 <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>
 <c6b730ea-9147-acc9-1d8f-f5b8cfc384e3@gmail.com>
Message-ID: <CADUbQ5jHgyeH7c6s-i9Ts8a57R4EoBLvyZOK_kQWkM7=Va66Sw@mail.gmail.com>

Thanks for the detailed feedback Tomas,

I ran the command 'pacman -Syuu' again, just to be sure, and this time it
says "there is nothing to do."

It appears that gdb is working. I was spooked by the diagnostics that you
say is a known (not serious) issue.

My mistake was not setting a breakpoint on main, so I confused problems
with gdb with problems with the program I'm trying to debug!

Incidentally, my remark about mingw-w64 problems in other communities
alluded to the Haskell development
community, where an ABI incompatibility was discovered about a year ago. It
is discussed by Ben Gamari here
https://gitlab.haskell.org/ghc/ghc/-/issues/19945.

Dominick



On Wed, Jan 18, 2023 at 12:56 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 1/18/23 17:39, Dominick Samperi wrote:
>
> Thanks,
>
> But this didn't work. It installs msys2 along with lots of other stuff,
> and gdb would not start as before (missing DLL's).
>
> Then I tried to run the command you suggested again, and there was a
> warning from the package manager about a cycle detected, but now gdb starts
> with the following messages...
>
> Well, so it did work in the end. You didn't share what was the output from
> the command the first and second time around. Actually you have even
> deleted the command from the thread, so now nobody can see it (it was
> "pacman -Syuu").
>
> In principle, sometimes one has to re-run the update the second time when
> the runtime needs to be updated, and the output says that in that case.
> This is because you are updating Msys2 from Msys2 itself. These things are
> harder on Windows due to file locking, hence the need for re-running this.
>
> What happened is probably (but again, I have to be guessing as you didn't
> show the context) that you have installed gdb to an outdated Msys2
> installation, getting a new version of gdb depending on some new runtime
> shared libraries. By updating Msys2, you got the new shared libraries gdb
> needed and you could run it.
>
>
> Traceback (most recent call last):
>   File "<string>", ine 3, in <module>
> ModuleNotFoundError: No module named 'libstdcxx'
> /etc/gdbinit:5: Error in sourced command file:
> Error while executing Python code.
>
> It is safe and best to ignore this. It is a bug in Msys2 which has been
> reported.
> https://github.com/msys2/MSYS2-packages/issues/2923
>
> Please also note it is documented in
> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
> (see Additional debugging hints)
>
>
> There is also a line...
>
> This GDB was configured as "x86_64_pc-msys".
>
> (Shouldn't that be msys2?)
>
> No. Msys2 is the name for the whole project. "msys" is the name of one of
> subsystem, one which uses the msys (cygwin) runtime. It is not necessary to
> understand these details for using Msys2/Rtools42, but if you are still
> interested to know more, please refer to Msys2 documentation.
>
> If I ignore the messages and try to debug a terminal application, there
> are messages
> stating that multiple threads are started, and the application accepts no
> keyboard
> input, and ultimately must be terminated by closing the window.
>
> Please really you need to show more context to get help. I am using this
> every day and it works for me, as well as for other people. Also, please
> read the documentation especially if you are running into problems:
>
> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
> https://cran.r-project.org/bin/windows/base/howto-R-devel.html
>
> Problems with keyboard input are probably related to which terminal you
> are using. In some terminals, you would have to use winpty (run gdb with
> winpty) for line editing to work. Please see "Additional debugging hints"
> in the documentation.
>
> In a clean, updated install of Rtools42, with gdb installed as documented,
> no additional tweaks are needed to run gdb from the "Rtools42 bash" (mintty
> terminal running bash from Msys2).
>
> It appears there are other development communities negatively impacted by
> the fork to mingw-w64. This did not go smoothly.
>
> I don't understand what you mean. As far as I know, R has been using
> MinGW-W64 (and before that MinGW) from the beginning, certainly it has been
> using MinGW-W64 for many years now. The official builds never used MSVC,
> there was no switching to MinGW/MinGW-W64 in the case of R afair, at least
> not in the recent past.
>
> But, in either case, the choice of MinGW-W64 is orthogonal to the choice
> of Msys2 as the provider of the build tools. Rtools42/43 come also in a
> compiler toolchain+libraries bundle, without Msys2, which in theory you
> could use with a different set of build tools. But you would be on your own
> to figure out the details.
>
>
> Perhaps it would be safer to simply provide a version of Rtools42 that
> comes with
> gdb and msys2?
>
> Rtools42 comes with Msys2. gdb is not installed there by default, because
> most people don't need it, but it is documented how to install it. I've now
> updated the documentation to always remind to update the system before
> installing any Msys2 packages.
>
> Tomas
>
>
> Dominick
>
>
>
>
> On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>>
>> On 1/18/23 04:33, Dominick Samperi wrote:
>> > Hello,
>> >
>> > I tried installing gdb into Rtools42 following the instructions here
>> > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>> >
>> > I ran 'pacman -Sy gdb', and the installation seemed to complete without
>> > problems.
>> >
>> > But gdb could not be started because incorrect DLL versions were
>> installed,
>> > in particular, the missing DLL's are: msys-ffi-8.dll and
>> > msys-unistring-5.dll.
>>
>> Try upgrading Msys2 using
>>
>> pacman -Syuu
>>
>> Tomas
>>
>> > Is there an alternative way to install gdb for use with Rtool42?
>> >
>> > Thanks,
>> > Dominick
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jan 18 20:10:22 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 18 Jan 2023 20:10:22 +0100
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <CADUbQ5jHgyeH7c6s-i9Ts8a57R4EoBLvyZOK_kQWkM7=Va66Sw@mail.gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
 <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
 <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>
 <c6b730ea-9147-acc9-1d8f-f5b8cfc384e3@gmail.com>
 <CADUbQ5jHgyeH7c6s-i9Ts8a57R4EoBLvyZOK_kQWkM7=Va66Sw@mail.gmail.com>
Message-ID: <a289ed25-9858-66b0-1ba7-a42196866f2d@gmail.com>


On 1/18/23 19:41, Dominick Samperi wrote:
> Thanks for the detailed feedback Tomas,
>
> I ran the command 'pacman -Syuu' again, just to be sure, and this time 
> it says "there is nothing to do."
>
> It appears that gdb is working. I was spooked by the diagnostics that 
> you say is a known (not serious) issue.
>
> My mistake was not setting a breakpoint on main, so I confused 
> problems with gdb with problems with the program I'm trying to debug!
I am glad it works now for you. Please don't forget to include debug 
info (for R or packages, depending on what you need to debug).
>
> Incidentally, my remark about mingw-w64 problems in other communities 
> alluded to the Haskell development
> community, where an ABI incompatibility was discovered about a year 
> ago. It is discussed by Ben Gamari here
> https://gitlab.haskell.org/ghc/ghc/-/issues/19945.

 From a quick look it seems to be an incompatibility between two 
libraries implementing POSIX regular expressions, essentially a name 
clash, they just need to make sure to consistently use one of them. It 
is not a problem of MinGW-W64.

Tomas

>
> Dominick
>
>
>
> On Wed, Jan 18, 2023 at 12:56 PM Tomas Kalibera 
> <tomas.kalibera at gmail.com> wrote:
>
>     On 1/18/23 17:39, Dominick Samperi wrote:
>>     Thanks,
>>
>>     But this didn't work. It installs msys2 along with lots of other
>>     stuff, and gdb would not start as before (missing DLL's).
>>
>>     Then I tried to run the command you suggested again, and there
>>     was a warning from the package manager about a cycle detected,
>>     but now gdb starts with the following messages...
>
>     Well, so it did work in the end. You didn't share what was the
>     output from the command the first and second time around. Actually
>     you have even deleted the command from the thread, so now nobody
>     can see it (it was "pacman -Syuu").
>
>     In principle, sometimes one has to re-run the update the second
>     time when the runtime needs to be updated, and the output says
>     that in that case. This is because you are updating Msys2 from
>     Msys2 itself. These things are harder on Windows due to file
>     locking, hence the need for re-running this.
>
>     What happened is probably (but again, I have to be guessing as you
>     didn't show the context) that you have installed gdb to an
>     outdated Msys2 installation, getting a new version of gdb
>     depending on some new runtime shared libraries. By updating Msys2,
>     you got the new shared libraries gdb needed and you could run it.
>
>>
>>     Traceback (most recent call last):
>>     ? File "<string>", ine 3, in <module>
>>     ModuleNotFoundError: No module named 'libstdcxx'
>>     /etc/gdbinit:5: Error in sourced command file:
>>     Error while executing Python code.
>
>     It is safe and best to ignore this. It is a bug in Msys2 which has
>     been reported.
>     https://github.com/msys2/MSYS2-packages/issues/2923
>
>     Please also note it is documented in
>     https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>     (see Additional debugging hints)
>
>>
>>     There is also a line...
>>
>>     This GDB was configured as "x86_64_pc-msys".
>>
>>     (Shouldn't that be msys2?)
>
>     No. Msys2 is the name for the whole project. "msys" is the name of
>     one of subsystem, one which uses the msys (cygwin) runtime. It is
>     not necessary to understand these details for using
>     Msys2/Rtools42, but if you are still interested to know more,
>     please refer to Msys2 documentation.
>
>>     If I ignore the messages and try to debug a terminal application,
>>     there are messages
>>     stating that multiple threads are started, and the application
>>     accepts no keyboard
>>     input, and ultimately must be terminated by closing the window.
>     Please really you need to show more context to get help. I am
>     using this every day and it works for me, as well as for other
>     people. Also, please read the documentation especially if you are
>     running into problems:
>
>     https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>     https://cran.r-project.org/bin/windows/base/howto-R-devel.html
>
>     Problems with keyboard input are probably related to which
>     terminal you are using. In some terminals, you would have to use
>     winpty (run gdb with winpty) for line editing to work. Please see
>     "Additional debugging hints" in the documentation.
>
>     In a clean, updated install of Rtools42, with gdb installed as
>     documented, no additional tweaks are needed to run gdb from the
>     "Rtools42 bash" (mintty terminal running bash from Msys2).
>
>>     It appears there are other development communities negatively
>>     impacted by
>>     the fork to mingw-w64. This did not go smoothly.
>
>     I don't understand what you mean. As far as I know, R has been
>     using MinGW-W64 (and before that MinGW) from the beginning,
>     certainly it has been using MinGW-W64 for many years now. The
>     official builds never used MSVC, there was no switching to
>     MinGW/MinGW-W64 in the case of R afair, at least not in the recent
>     past.
>
>     But, in either case, the choice of MinGW-W64 is orthogonal to the
>     choice of Msys2 as the provider of the build tools. Rtools42/43
>     come also in a compiler toolchain+libraries bundle, without Msys2,
>     which in theory you could use with a different set of build tools.
>     But you would be on your own to figure out the details.
>
>>
>>     Perhaps it would be safer to simply provide a version of Rtools42
>>     that comes with
>>     gdb and msys2?
>
>     Rtools42 comes with Msys2. gdb is not installed there by default,
>     because most people don't need it, but it is documented how to
>     install it. I've now updated the documentation to always remind to
>     update the system before installing any Msys2 packages.
>
>     Tomas
>
>>
>>     Dominick
>>
>>
>>
>>
>>     On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera
>>     <tomas.kalibera at gmail.com> wrote:
>>
>>
>>         On 1/18/23 04:33, Dominick Samperi wrote:
>>         > Hello,
>>         >
>>         > I tried installing gdb into Rtools42 following the
>>         instructions here
>>         > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>         >
>>         > I ran 'pacman -Sy gdb', and the installation seemed to
>>         complete without
>>         > problems.
>>         >
>>         > But gdb could not be started because incorrect DLL versions
>>         were installed,
>>         > in particular, the missing DLL's are: msys-ffi-8.dll and
>>         > msys-unistring-5.dll.
>>
>>         Try upgrading Msys2 using
>>
>>         pacman -Syuu
>>
>>         Tomas
>>
>>         > Is there an alternative way to install gdb for use with
>>         Rtool42?
>>         >
>>         > Thanks,
>>         > Dominick
>>         >
>>         >? ? ? ?[[alternative HTML version deleted]]
>>         >
>>         > ______________________________________________
>>         > R-devel at r-project.org mailing list
>>         > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
	[[alternative HTML version deleted]]


From dj@@mper| @end|ng |rom gm@||@com  Thu Jan 19 00:03:19 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Wed, 18 Jan 2023 18:03:19 -0500
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <a289ed25-9858-66b0-1ba7-a42196866f2d@gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
 <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
 <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>
 <c6b730ea-9147-acc9-1d8f-f5b8cfc384e3@gmail.com>
 <CADUbQ5jHgyeH7c6s-i9Ts8a57R4EoBLvyZOK_kQWkM7=Va66Sw@mail.gmail.com>
 <a289ed25-9858-66b0-1ba7-a42196866f2d@gmail.com>
Message-ID: <CADUbQ5i4gpZgyWxRur=Zkco8UNBSVV3sQOXh4h1A7L=X0AUvFA@mail.gmail.com>

There may be a more serious problem with gdb, or perhaps a very subtle
problem in the RInside package repl function that only appears under
Windows (I reported this in the Rcpp-devel list, where I provided
a small example repl.cpp with Makefile for Windows).

Gdb is invoked as 'gdb repl.exe', a breakpoint is set on main, and the gdb
run
command is entered. Gdb should simply stop at main and wait for the next
command. But instead the program seems to be run, its GUI pops up, and
after a few seconds it terminates and Gdb finally hits main, waiting for
the next command!

This strange behavior does not happen under Linux where the
program runs normally, gdb starts only one thread (see below),
and gdb behaves as you would expect it to.

Normally gdb starts about four threads under Windows, one for the program
to be debugged, and three worker threads. Under Linux/Ubuntu this doesn't
happen, only one thread is created. I'm not sure what the worker threads
are used for.

What seems to be happening here is a stray thread is created for the
program,
one for which the breakpoint doesn't apply, and this thread runs before the
main thread running the desired instance of the program hits the breakpoint.

At this point the instance of the program running in the main program is
doomed because you cannot start an embedded instance of R more
than once in the same compilation unit, and the stray thread already
started one.

There does seem to be a suble issue in the repl program under Windows
that is not related to gdb, but this doesn't explain why gdb creates that
stray
thread, making it impossible to proceed with the debugging. Nothing
should happen before gdb hits main, even if there is a bug in repl.

It is possible that static constructors need to be run before main,
but this wouldn't result in the main program block being executed.

Dominick

On Wed, Jan 18, 2023 at 2:10 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 1/18/23 19:41, Dominick Samperi wrote:
>
> Thanks for the detailed feedback Tomas,
>
> I ran the command 'pacman -Syuu' again, just to be sure, and this time it
> says "there is nothing to do."
>
> It appears that gdb is working. I was spooked by the diagnostics that you
> say is a known (not serious) issue.
>
> My mistake was not setting a breakpoint on main, so I confused problems
> with gdb with problems with the program I'm trying to debug!
>
> I am glad it works now for you. Please don't forget to include debug info
> (for R or packages, depending on what you need to debug).
>
>
> Incidentally, my remark about mingw-w64 problems in other communities
> alluded to the Haskell development
> community, where an ABI incompatibility was discovered about a year ago.
> It is discussed by Ben Gamari here
> https://gitlab.haskell.org/ghc/ghc/-/issues/19945.
>
> From a quick look it seems to be an incompatibility between two libraries
> implementing POSIX regular expressions, essentially a name clash, they just
> need to make sure to consistently use one of them. It is not a problem of
> MinGW-W64.
>
> Tomas
>
>
> Dominick
>
>
>
> On Wed, Jan 18, 2023 at 12:56 PM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>> On 1/18/23 17:39, Dominick Samperi wrote:
>>
>> Thanks,
>>
>> But this didn't work. It installs msys2 along with lots of other stuff,
>> and gdb would not start as before (missing DLL's).
>>
>> Then I tried to run the command you suggested again, and there was a
>> warning from the package manager about a cycle detected, but now gdb starts
>> with the following messages...
>>
>> Well, so it did work in the end. You didn't share what was the output
>> from the command the first and second time around. Actually you have even
>> deleted the command from the thread, so now nobody can see it (it was
>> "pacman -Syuu").
>>
>> In principle, sometimes one has to re-run the update the second time when
>> the runtime needs to be updated, and the output says that in that case.
>> This is because you are updating Msys2 from Msys2 itself. These things are
>> harder on Windows due to file locking, hence the need for re-running this.
>>
>> What happened is probably (but again, I have to be guessing as you didn't
>> show the context) that you have installed gdb to an outdated Msys2
>> installation, getting a new version of gdb depending on some new runtime
>> shared libraries. By updating Msys2, you got the new shared libraries gdb
>> needed and you could run it.
>>
>>
>> Traceback (most recent call last):
>>   File "<string>", ine 3, in <module>
>> ModuleNotFoundError: No module named 'libstdcxx'
>> /etc/gdbinit:5: Error in sourced command file:
>> Error while executing Python code.
>>
>> It is safe and best to ignore this. It is a bug in Msys2 which has been
>> reported.
>> https://github.com/msys2/MSYS2-packages/issues/2923
>>
>> Please also note it is documented in
>> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>> (see Additional debugging hints)
>>
>>
>> There is also a line...
>>
>> This GDB was configured as "x86_64_pc-msys".
>>
>> (Shouldn't that be msys2?)
>>
>> No. Msys2 is the name for the whole project. "msys" is the name of one of
>> subsystem, one which uses the msys (cygwin) runtime. It is not necessary to
>> understand these details for using Msys2/Rtools42, but if you are still
>> interested to know more, please refer to Msys2 documentation.
>>
>> If I ignore the messages and try to debug a terminal application, there
>> are messages
>> stating that multiple threads are started, and the application accepts no
>> keyboard
>> input, and ultimately must be terminated by closing the window.
>>
>> Please really you need to show more context to get help. I am using this
>> every day and it works for me, as well as for other people. Also, please
>> read the documentation especially if you are running into problems:
>>
>> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>> https://cran.r-project.org/bin/windows/base/howto-R-devel.html
>>
>> Problems with keyboard input are probably related to which terminal you
>> are using. In some terminals, you would have to use winpty (run gdb with
>> winpty) for line editing to work. Please see "Additional debugging hints"
>> in the documentation.
>>
>> In a clean, updated install of Rtools42, with gdb installed as
>> documented, no additional tweaks are needed to run gdb from the "Rtools42
>> bash" (mintty terminal running bash from Msys2).
>>
>> It appears there are other development communities negatively impacted by
>> the fork to mingw-w64. This did not go smoothly.
>>
>> I don't understand what you mean. As far as I know, R has been using
>> MinGW-W64 (and before that MinGW) from the beginning, certainly it has been
>> using MinGW-W64 for many years now. The official builds never used MSVC,
>> there was no switching to MinGW/MinGW-W64 in the case of R afair, at least
>> not in the recent past.
>>
>> But, in either case, the choice of MinGW-W64 is orthogonal to the choice
>> of Msys2 as the provider of the build tools. Rtools42/43 come also in a
>> compiler toolchain+libraries bundle, without Msys2, which in theory you
>> could use with a different set of build tools. But you would be on your own
>> to figure out the details.
>>
>>
>> Perhaps it would be safer to simply provide a version of Rtools42 that
>> comes with
>> gdb and msys2?
>>
>> Rtools42 comes with Msys2. gdb is not installed there by default, because
>> most people don't need it, but it is documented how to install it. I've now
>> updated the documentation to always remind to update the system before
>> installing any Msys2 packages.
>>
>> Tomas
>>
>>
>> Dominick
>>
>>
>>
>>
>> On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>>
>>> On 1/18/23 04:33, Dominick Samperi wrote:
>>> > Hello,
>>> >
>>> > I tried installing gdb into Rtools42 following the instructions here
>>> > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>> >
>>> > I ran 'pacman -Sy gdb', and the installation seemed to complete without
>>> > problems.
>>> >
>>> > But gdb could not be started because incorrect DLL versions were
>>> installed,
>>> > in particular, the missing DLL's are: msys-ffi-8.dll and
>>> > msys-unistring-5.dll.
>>>
>>> Try upgrading Msys2 using
>>>
>>> pacman -Syuu
>>>
>>> Tomas
>>>
>>> > Is there an alternative way to install gdb for use with Rtool42?
>>> >
>>> > Thanks,
>>> > Dominick
>>> >
>>> >       [[alternative HTML version deleted]]
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From dj@@mper| @end|ng |rom gm@||@com  Thu Jan 19 00:08:53 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Wed, 18 Jan 2023 18:08:53 -0500
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <a289ed25-9858-66b0-1ba7-a42196866f2d@gmail.com>
References: <CADUbQ5iEfPPC49JDxfq2i6vMHNkxGgriVzPdY6wsFUiJkgiQbQ@mail.gmail.com>
 <d77b4ffe-fb77-89d8-a382-14f9dfac667d@gmail.com>
 <CADUbQ5iHVdbcCvVRfLwZsKJCT78_gPRa2rTc7h5k0JCHR7-50A@mail.gmail.com>
 <c6b730ea-9147-acc9-1d8f-f5b8cfc384e3@gmail.com>
 <CADUbQ5jHgyeH7c6s-i9Ts8a57R4EoBLvyZOK_kQWkM7=Va66Sw@mail.gmail.com>
 <a289ed25-9858-66b0-1ba7-a42196866f2d@gmail.com>
Message-ID: <CADUbQ5goFwqS3F1OR_W75xnHJXzFkYTw4eVbkiBW_6=8Xj2hxA@mail.gmail.com>

There may be a more serious problem with gdb, or perhaps a very subtle
problem in the RInside package repl function that only appears under
Windows (I reported this in the Rcpp-devel list, where I provided
a small example repl.cpp with Makefile for Windows).

Gdb is invoked as 'gdb repl.exe', a breakpoint is set on main, and the gdb
run
command is entered. Gdb should simply stop at main and wait for the next
command. But instead the program seems to be run, its GUI pops up, and
after a few seconds it terminates and Gdb finally hits main, waiting for
the next command!

This strange behavior does not happen under Linux where the
program runs normally, gdb starts only one thread (see below),
and gdb behaves as you would expect it to.

Normally gdb starts about four threads under Windows, one for the program
to be debugged, and three worker threads. Under Linux/Ubuntu this doesn't
happen, only one thread is created. I'm not sure what the worker threads
are used for.

What seems to be happening here is a stray thread is created for the
program,
one for which the breakpoint doesn't apply, and this thread runs before the
main thread running the desired instance of the program hits the breakpoint.

At this point the instance of the program running in the main program is
doomed because you cannot start an embedded instance of R more
than once in the same compilation unit, and the stray thread already
started one.

There does seem to be a subtle issue in the repl program under Windows
that is not related to gdb, but this doesn't explain why gdb creates that
stray
thread, making it impossible to proceed with the debugging. Nothing
should happen before gdb hits main, even if there is a bug in repl.

It is possible that static constructors need to be run before main,
but this wouldn't result in the main program block being executed.

Dominick

On Wed, Jan 18, 2023 at 2:10 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 1/18/23 19:41, Dominick Samperi wrote:
>
> Thanks for the detailed feedback Tomas,
>
> I ran the command 'pacman -Syuu' again, just to be sure, and this time it
> says "there is nothing to do."
>
> It appears that gdb is working. I was spooked by the diagnostics that you
> say is a known (not serious) issue.
>
> My mistake was not setting a breakpoint on main, so I confused problems
> with gdb with problems with the program I'm trying to debug!
>
> I am glad it works now for you. Please don't forget to include debug info
> (for R or packages, depending on what you need to debug).
>
>
> Incidentally, my remark about mingw-w64 problems in other communities
> alluded to the Haskell development
> community, where an ABI incompatibility was discovered about a year ago.
> It is discussed by Ben Gamari here
> https://gitlab.haskell.org/ghc/ghc/-/issues/19945.
>
> From a quick look it seems to be an incompatibility between two libraries
> implementing POSIX regular expressions, essentially a name clash, they just
> need to make sure to consistently use one of them. It is not a problem of
> MinGW-W64.
>
> Tomas
>
>
> Dominick
>
>
>
> On Wed, Jan 18, 2023 at 12:56 PM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>> On 1/18/23 17:39, Dominick Samperi wrote:
>>
>> Thanks,
>>
>> But this didn't work. It installs msys2 along with lots of other stuff,
>> and gdb would not start as before (missing DLL's).
>>
>> Then I tried to run the command you suggested again, and there was a
>> warning from the package manager about a cycle detected, but now gdb starts
>> with the following messages...
>>
>> Well, so it did work in the end. You didn't share what was the output
>> from the command the first and second time around. Actually you have even
>> deleted the command from the thread, so now nobody can see it (it was
>> "pacman -Syuu").
>>
>> In principle, sometimes one has to re-run the update the second time when
>> the runtime needs to be updated, and the output says that in that case.
>> This is because you are updating Msys2 from Msys2 itself. These things are
>> harder on Windows due to file locking, hence the need for re-running this.
>>
>> What happened is probably (but again, I have to be guessing as you didn't
>> show the context) that you have installed gdb to an outdated Msys2
>> installation, getting a new version of gdb depending on some new runtime
>> shared libraries. By updating Msys2, you got the new shared libraries gdb
>> needed and you could run it.
>>
>>
>> Traceback (most recent call last):
>>   File "<string>", ine 3, in <module>
>> ModuleNotFoundError: No module named 'libstdcxx'
>> /etc/gdbinit:5: Error in sourced command file:
>> Error while executing Python code.
>>
>> It is safe and best to ignore this. It is a bug in Msys2 which has been
>> reported.
>> https://github.com/msys2/MSYS2-packages/issues/2923
>>
>> Please also note it is documented in
>> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>> (see Additional debugging hints)
>>
>>
>> There is also a line...
>>
>> This GDB was configured as "x86_64_pc-msys".
>>
>> (Shouldn't that be msys2?)
>>
>> No. Msys2 is the name for the whole project. "msys" is the name of one of
>> subsystem, one which uses the msys (cygwin) runtime. It is not necessary to
>> understand these details for using Msys2/Rtools42, but if you are still
>> interested to know more, please refer to Msys2 documentation.
>>
>> If I ignore the messages and try to debug a terminal application, there
>> are messages
>> stating that multiple threads are started, and the application accepts no
>> keyboard
>> input, and ultimately must be terminated by closing the window.
>>
>> Please really you need to show more context to get help. I am using this
>> every day and it works for me, as well as for other people. Also, please
>> read the documentation especially if you are running into problems:
>>
>> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>> https://cran.r-project.org/bin/windows/base/howto-R-devel.html
>>
>> Problems with keyboard input are probably related to which terminal you
>> are using. In some terminals, you would have to use winpty (run gdb with
>> winpty) for line editing to work. Please see "Additional debugging hints"
>> in the documentation.
>>
>> In a clean, updated install of Rtools42, with gdb installed as
>> documented, no additional tweaks are needed to run gdb from the "Rtools42
>> bash" (mintty terminal running bash from Msys2).
>>
>> It appears there are other development communities negatively impacted by
>> the fork to mingw-w64. This did not go smoothly.
>>
>> I don't understand what you mean. As far as I know, R has been using
>> MinGW-W64 (and before that MinGW) from the beginning, certainly it has been
>> using MinGW-W64 for many years now. The official builds never used MSVC,
>> there was no switching to MinGW/MinGW-W64 in the case of R afair, at least
>> not in the recent past.
>>
>> But, in either case, the choice of MinGW-W64 is orthogonal to the choice
>> of Msys2 as the provider of the build tools. Rtools42/43 come also in a
>> compiler toolchain+libraries bundle, without Msys2, which in theory you
>> could use with a different set of build tools. But you would be on your own
>> to figure out the details.
>>
>>
>> Perhaps it would be safer to simply provide a version of Rtools42 that
>> comes with
>> gdb and msys2?
>>
>> Rtools42 comes with Msys2. gdb is not installed there by default, because
>> most people don't need it, but it is documented how to install it. I've now
>> updated the documentation to always remind to update the system before
>> installing any Msys2 packages.
>>
>> Tomas
>>
>>
>> Dominick
>>
>>
>>
>>
>> On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>>
>>> On 1/18/23 04:33, Dominick Samperi wrote:
>>> > Hello,
>>> >
>>> > I tried installing gdb into Rtools42 following the instructions here
>>> > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>> >
>>> > I ran 'pacman -Sy gdb', and the installation seemed to complete without
>>> > problems.
>>> >
>>> > But gdb could not be started because incorrect DLL versions were
>>> installed,
>>> > in particular, the missing DLL's are: msys-ffi-8.dll and
>>> > msys-unistring-5.dll.
>>>
>>> Try upgrading Msys2 using
>>>
>>> pacman -Syuu
>>>
>>> Tomas
>>>
>>> > Is there an alternative way to install gdb for use with Rtool42?
>>> >
>>> > Thanks,
>>> > Dominick
>>> >
>>> >       [[alternative HTML version deleted]]
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From dj@@mper| @end|ng |rom gm@||@com  Thu Jan 19 04:44:03 2023
From: dj@@mper| @end|ng |rom gm@||@com (Dominick Samperi)
Date: Wed, 18 Jan 2023 22:44:03 -0500
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <A698C86B-64BC-4772-8F07-7125C772CC1D@gmail.com>
References: <CADUbQ5goFwqS3F1OR_W75xnHJXzFkYTw4eVbkiBW_6=8Xj2hxA@mail.gmail.com>
 <A698C86B-64BC-4772-8F07-7125C772CC1D@gmail.com>
Message-ID: <CADUbQ5hwU44Qkv6AP=us7ou9OJxxT9nU4rRagsGBO+Tri92A7w@mail.gmail.com>

On second thought, there is a lot of metapramming code in Rcpp that runs
before main, so
I was wrong to say nothing can happen before main() is called.
Strategically placed print
statements may be the best strategy.

On Wed, Jan 18, 2023 at 8:17 PM Dominick Samperi <djsamperi at gmail.com>
wrote:

> Since these ?stray threads? were appearing before I installed gdb into
> Rtools42, this may be an operating system bug, and not a problem with gdb
> or RInside!
>
> Sent from my iPhone
>
> On Jan 18, 2023, at 6:08 PM, Dominick Samperi <djsamperi at gmail.com> wrote:
>
> ?
> There may be a more serious problem with gdb, or perhaps a very subtle
> problem in the RInside package repl function that only appears under
> Windows (I reported this in the Rcpp-devel list, where I provided
> a small example repl.cpp with Makefile for Windows).
>
> Gdb is invoked as 'gdb repl.exe', a breakpoint is set on main, and the gdb
> run
> command is entered. Gdb should simply stop at main and wait for the next
> command. But instead the program seems to be run, its GUI pops up, and
> after a few seconds it terminates and Gdb finally hits main, waiting for
> the next command!
>
> This strange behavior does not happen under Linux where the
> program runs normally, gdb starts only one thread (see below),
> and gdb behaves as you would expect it to.
>
> Normally gdb starts about four threads under Windows, one for the program
> to be debugged, and three worker threads. Under Linux/Ubuntu this doesn't
> happen, only one thread is created. I'm not sure what the worker threads
> are used for.
>
> What seems to be happening here is a stray thread is created for the
> program,
> one for which the breakpoint doesn't apply, and this thread runs before the
> main thread running the desired instance of the program hits the
> breakpoint.
>
> At this point the instance of the program running in the main program is
> doomed because you cannot start an embedded instance of R more
> than once in the same compilation unit, and the stray thread already
> started one.
>
> There does seem to be a subtle issue in the repl program under Windows
> that is not related to gdb, but this doesn't explain why gdb creates that
> stray
> thread, making it impossible to proceed with the debugging. Nothing
> should happen before gdb hits main, even if there is a bug in repl.
>
> It is possible that static constructors need to be run before main,
> but this wouldn't result in the main program block being executed.
>
> Dominick
>
> On Wed, Jan 18, 2023 at 2:10 PM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>>
>> On 1/18/23 19:41, Dominick Samperi wrote:
>>
>> Thanks for the detailed feedback Tomas,
>>
>> I ran the command 'pacman -Syuu' again, just to be sure, and this time it
>> says "there is nothing to do."
>>
>> It appears that gdb is working. I was spooked by the diagnostics that you
>> say is a known (not serious) issue.
>>
>> My mistake was not setting a breakpoint on main, so I confused problems
>> with gdb with problems with the program I'm trying to debug!
>>
>> I am glad it works now for you. Please don't forget to include debug info
>> (for R or packages, depending on what you need to debug).
>>
>>
>> Incidentally, my remark about mingw-w64 problems in other communities
>> alluded to the Haskell development
>> community, where an ABI incompatibility was discovered about a year ago.
>> It is discussed by Ben Gamari here
>> https://gitlab.haskell.org/ghc/ghc/-/issues/19945.
>>
>> From a quick look it seems to be an incompatibility between two libraries
>> implementing POSIX regular expressions, essentially a name clash, they just
>> need to make sure to consistently use one of them. It is not a problem of
>> MinGW-W64.
>>
>> Tomas
>>
>>
>> Dominick
>>
>>
>>
>> On Wed, Jan 18, 2023 at 12:56 PM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>> On 1/18/23 17:39, Dominick Samperi wrote:
>>>
>>> Thanks,
>>>
>>> But this didn't work. It installs msys2 along with lots of other stuff,
>>> and gdb would not start as before (missing DLL's).
>>>
>>> Then I tried to run the command you suggested again, and there was a
>>> warning from the package manager about a cycle detected, but now gdb starts
>>> with the following messages...
>>>
>>> Well, so it did work in the end. You didn't share what was the output
>>> from the command the first and second time around. Actually you have even
>>> deleted the command from the thread, so now nobody can see it (it was
>>> "pacman -Syuu").
>>>
>>> In principle, sometimes one has to re-run the update the second time
>>> when the runtime needs to be updated, and the output says that in that
>>> case. This is because you are updating Msys2 from Msys2 itself. These
>>> things are harder on Windows due to file locking, hence the need for
>>> re-running this.
>>>
>>> What happened is probably (but again, I have to be guessing as you
>>> didn't show the context) that you have installed gdb to an outdated Msys2
>>> installation, getting a new version of gdb depending on some new runtime
>>> shared libraries. By updating Msys2, you got the new shared libraries gdb
>>> needed and you could run it.
>>>
>>>
>>> Traceback (most recent call last):
>>>   File "<string>", ine 3, in <module>
>>> ModuleNotFoundError: No module named 'libstdcxx'
>>> /etc/gdbinit:5: Error in sourced command file:
>>> Error while executing Python code.
>>>
>>> It is safe and best to ignore this. It is a bug in Msys2 which has been
>>> reported.
>>> https://github.com/msys2/MSYS2-packages/issues/2923
>>>
>>> Please also note it is documented in
>>> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>> (see Additional debugging hints)
>>>
>>>
>>> There is also a line...
>>>
>>> This GDB was configured as "x86_64_pc-msys".
>>>
>>> (Shouldn't that be msys2?)
>>>
>>> No. Msys2 is the name for the whole project. "msys" is the name of one
>>> of subsystem, one which uses the msys (cygwin) runtime. It is not necessary
>>> to understand these details for using Msys2/Rtools42, but if you are still
>>> interested to know more, please refer to Msys2 documentation.
>>>
>>> If I ignore the messages and try to debug a terminal application, there
>>> are messages
>>> stating that multiple threads are started, and the application accepts
>>> no keyboard
>>> input, and ultimately must be terminated by closing the window.
>>>
>>> Please really you need to show more context to get help. I am using this
>>> every day and it works for me, as well as for other people. Also, please
>>> read the documentation especially if you are running into problems:
>>>
>>> https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>> https://cran.r-project.org/bin/windows/base/howto-R-devel.html
>>>
>>> Problems with keyboard input are probably related to which terminal you
>>> are using. In some terminals, you would have to use winpty (run gdb with
>>> winpty) for line editing to work. Please see "Additional debugging hints"
>>> in the documentation.
>>>
>>> In a clean, updated install of Rtools42, with gdb installed as
>>> documented, no additional tweaks are needed to run gdb from the "Rtools42
>>> bash" (mintty terminal running bash from Msys2).
>>>
>>> It appears there are other development communities negatively impacted by
>>> the fork to mingw-w64. This did not go smoothly.
>>>
>>> I don't understand what you mean. As far as I know, R has been using
>>> MinGW-W64 (and before that MinGW) from the beginning, certainly it has been
>>> using MinGW-W64 for many years now. The official builds never used MSVC,
>>> there was no switching to MinGW/MinGW-W64 in the case of R afair, at least
>>> not in the recent past.
>>>
>>> But, in either case, the choice of MinGW-W64 is orthogonal to the choice
>>> of Msys2 as the provider of the build tools. Rtools42/43 come also in a
>>> compiler toolchain+libraries bundle, without Msys2, which in theory you
>>> could use with a different set of build tools. But you would be on your own
>>> to figure out the details.
>>>
>>>
>>> Perhaps it would be safer to simply provide a version of Rtools42 that
>>> comes with
>>> gdb and msys2?
>>>
>>> Rtools42 comes with Msys2. gdb is not installed there by default,
>>> because most people don't need it, but it is documented how to install it.
>>> I've now updated the documentation to always remind to update the system
>>> before installing any Msys2 packages.
>>>
>>> Tomas
>>>
>>>
>>> Dominick
>>>
>>>
>>>
>>>
>>> On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>>> wrote:
>>>
>>>>
>>>> On 1/18/23 04:33, Dominick Samperi wrote:
>>>> > Hello,
>>>> >
>>>> > I tried installing gdb into Rtools42 following the instructions here
>>>> > https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>>> >
>>>> > I ran 'pacman -Sy gdb', and the installation seemed to complete
>>>> without
>>>> > problems.
>>>> >
>>>> > But gdb could not be started because incorrect DLL versions were
>>>> installed,
>>>> > in particular, the missing DLL's are: msys-ffi-8.dll and
>>>> > msys-unistring-5.dll.
>>>>
>>>> Try upgrading Msys2 using
>>>>
>>>> pacman -Syuu
>>>>
>>>> Tomas
>>>>
>>>> > Is there an alternative way to install gdb for use with Rtool42?
>>>> >
>>>> > Thanks,
>>>> > Dominick
>>>> >
>>>> >       [[alternative HTML version deleted]]
>>>> >
>>>> > ______________________________________________
>>>> > R-devel at r-project.org mailing list
>>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Thu Jan 19 04:56:53 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 18 Jan 2023 21:56:53 -0600
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <CADUbQ5hwU44Qkv6AP=us7ou9OJxxT9nU4rRagsGBO+Tri92A7w@mail.gmail.com>
References: <CADUbQ5goFwqS3F1OR_W75xnHJXzFkYTw4eVbkiBW_6=8Xj2hxA@mail.gmail.com>
 <A698C86B-64BC-4772-8F07-7125C772CC1D@gmail.com>
 <CADUbQ5hwU44Qkv6AP=us7ou9OJxxT9nU4rRagsGBO+Tri92A7w@mail.gmail.com>
Message-ID: <25544.49029.732398.284538@rob.eddelbuettel.com>


On 18 January 2023 at 22:44, Dominick Samperi wrote:
| On second thought, there is a lot of metapramming code in Rcpp that runs
| before main, so
| I was wrong to say nothing can happen before main() is called.
| Strategically placed print
| statements may be the best strategy.

Yes, and if you want to rule our Rcpp / RInside you can try to embed R
directly without these two and see if you get your repl + plotting device
going without. There is some basic documentation about embedding in section 8
in https://rstudio.github.io/r-manuals/r-exts/ (more nicely rendered version
of the standard manual).

The manual also has a special section on Window -- and while do not do that
much in RInside and Rcpp that is platform specific it is always possible that
we have a bug here or there. That said, there have always been embedded uses
of RInside on Windows too. Good luck, and let us know if you find bugs.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jan 19 11:13:14 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 19 Jan 2023 11:13:14 +0100
Subject: [Rd] Problem installing gdb into Rtools42
In-Reply-To: <CADUbQ5hwU44Qkv6AP=us7ou9OJxxT9nU4rRagsGBO+Tri92A7w@mail.gmail.com>
References: <CADUbQ5goFwqS3F1OR_W75xnHJXzFkYTw4eVbkiBW_6=8Xj2hxA@mail.gmail.com>
 <A698C86B-64BC-4772-8F07-7125C772CC1D@gmail.com>
 <CADUbQ5hwU44Qkv6AP=us7ou9OJxxT9nU4rRagsGBO+Tri92A7w@mail.gmail.com>
Message-ID: <7f7ddca9-2ea9-24b4-5439-6f3a2225e8b8@gmail.com>

On 1/19/23 04:44, Dominick Samperi wrote:
> On second thought, there is a lot of metapramming code in Rcpp that 
> runs before main, so
> I was wrong to say nothing can happen before main() is called. 
> Strategically placed print
> statements may be the best strategy.

You can insert breakpoints into the code which runs before main() as 
well. With C++, these may be constructors for static and global objects. 
gdb calls this "elaboration phase", see their documentation. Right, 
adding print statements (to output, or to files with GUI) may sometimes 
be useful as well. Also you can add some checks to the code and crash it 
intentionally when something happens, that way you get to the debugger 
as well if you ran your program in it. On Windows, you can also enter 
the debugger programmatically without crashing, with an interrupt (see 
breaking to debugger in Rgui). On Windows, you can also set windbg to be 
the post-mortem debugger, invoked automatically when the program 
crashes. But most of this is probably already off topic for this list. 
Some of these things are mentioned in 
https://cran.r-project.org/bin/windows/base/howto-R-devel.html.

Tomas

>
> On Wed, Jan 18, 2023 at 8:17 PM Dominick Samperi <djsamperi at gmail.com> 
> wrote:
>
>     Since these ?stray threads? were appearing before I installed gdb
>     into Rtools42, this may be an operating system bug, and not a
>     problem with gdb or RInside!
>
>     Sent from my iPhone
>
>>     On Jan 18, 2023, at 6:08 PM, Dominick Samperi
>>     <djsamperi at gmail.com> wrote:
>>
>>     ?
>>     There may be a more serious problem with gdb, or perhaps a very
>>     subtle
>>     problem in the RInside package repl function that only appears under
>>     Windows (I reported this in the Rcpp-devel list, where I provided
>>     a small example repl.cpp with Makefile for Windows).
>>
>>     Gdb is invoked as 'gdb repl.exe', a breakpoint is set on main,
>>     and the gdb run
>>     command is entered. Gdb should simply stop at main and wait for
>>     the next
>>     command. But instead the program seems to be run, its GUI pops
>>     up, and
>>     after a few seconds it terminates and Gdb finally hits main,
>>     waiting for
>>     the next command!
>>
>>     This strange behavior does not happen under Linux where the
>>     program runs normally, gdb starts only one thread (see below),
>>     and gdb behaves as you would expect it to.
>>
>>     Normally gdb starts about four threads under Windows, one for the
>>     program
>>     to be debugged, and three worker threads. Under Linux/Ubuntu this
>>     doesn't
>>     happen, only one thread is created. I'm not sure what the worker
>>     threads
>>     are used for.
>>
>>     What seems to be happening here is a stray thread is created for
>>     the program,
>>     one for which the breakpoint doesn't apply, and this thread runs
>>     before the
>>     main thread running the desired instance of the program hits the
>>     breakpoint.
>>
>>     At this point the instance of the program running in the main
>>     program is
>>     doomed because you cannot start an embedded instance of R more
>>     than once in the same compilation unit, and the stray thread already
>>     started one.
>>
>>     There does seem to be a subtle issue in the repl program under
>>     Windows
>>     that is not related to gdb, but this doesn't explain why gdb
>>     creates that stray
>>     thread, making it impossible to proceed with the debugging. Nothing
>>     should happen before gdb hits main, even if there is a bug in repl.
>>
>>     It is possible that static constructors need to be run before main,
>>     but this wouldn't result in the main program block being executed.
>>
>>     Dominick
>>
>>     On Wed, Jan 18, 2023 at 2:10 PM Tomas Kalibera
>>     <tomas.kalibera at gmail.com> wrote:
>>
>>
>>         On 1/18/23 19:41, Dominick Samperi wrote:
>>>         Thanks for the detailed feedback Tomas,
>>>
>>>         I ran the command 'pacman -Syuu' again, just to be sure, and
>>>         this time it says "there is nothing to do."
>>>
>>>         It appears that gdb is working. I was spooked by the
>>>         diagnostics that you say is a known (not serious) issue.
>>>
>>>         My mistake was not setting a breakpoint on main, so I
>>>         confused problems with gdb with problems with the program
>>>         I'm trying to debug!
>>         I am glad it works now for you. Please don't forget to
>>         include debug info (for R or packages, depending on what you
>>         need to debug).
>>>
>>>         Incidentally, my remark about mingw-w64 problems in other
>>>         communities alluded to the Haskell development
>>>         community, where an ABI incompatibility was discovered about
>>>         a year ago. It is discussed by Ben Gamari here
>>>         https://gitlab.haskell.org/ghc/ghc/-/issues/19945.
>>
>>         From a quick look it seems to be an incompatibility between
>>         two libraries implementing POSIX regular expressions,
>>         essentially a name clash, they just need to make sure to
>>         consistently use one of them. It is not a problem of MinGW-W64.
>>
>>         Tomas
>>
>>>
>>>         Dominick
>>>
>>>
>>>
>>>         On Wed, Jan 18, 2023 at 12:56 PM Tomas Kalibera
>>>         <tomas.kalibera at gmail.com> wrote:
>>>
>>>             On 1/18/23 17:39, Dominick Samperi wrote:
>>>>             Thanks,
>>>>
>>>>             But this didn't work. It installs msys2 along with lots
>>>>             of other stuff, and gdb would not start as before
>>>>             (missing DLL's).
>>>>
>>>>             Then I tried to run the command you suggested again,
>>>>             and there was a warning from the package manager about
>>>>             a cycle detected, but now gdb starts with the following
>>>>             messages...
>>>
>>>             Well, so it did work in the end. You didn't share what
>>>             was the output from the command the first and second
>>>             time around. Actually you have even deleted the command
>>>             from the thread, so now nobody can see it (it was
>>>             "pacman -Syuu").
>>>
>>>             In principle, sometimes one has to re-run the update the
>>>             second time when the runtime needs to be updated, and
>>>             the output says that in that case. This is because you
>>>             are updating Msys2 from Msys2 itself. These things are
>>>             harder on Windows due to file locking, hence the need
>>>             for re-running this.
>>>
>>>             What happened is probably (but again, I have to be
>>>             guessing as you didn't show the context) that you have
>>>             installed gdb to an outdated Msys2 installation, getting
>>>             a new version of gdb depending on some new runtime
>>>             shared libraries. By updating Msys2, you got the new
>>>             shared libraries gdb needed and you could run it.
>>>
>>>>
>>>>             Traceback (most recent call last):
>>>>             ? File "<string>", ine 3, in <module>
>>>>             ModuleNotFoundError: No module named 'libstdcxx'
>>>>             /etc/gdbinit:5: Error in sourced command file:
>>>>             Error while executing Python code.
>>>
>>>             It is safe and best to ignore this. It is a bug in Msys2
>>>             which has been reported.
>>>             https://github.com/msys2/MSYS2-packages/issues/2923
>>>
>>>             Please also note it is documented in
>>>             https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>>             (see Additional debugging hints)
>>>
>>>>
>>>>             There is also a line...
>>>>
>>>>             This GDB was configured as "x86_64_pc-msys".
>>>>
>>>>             (Shouldn't that be msys2?)
>>>
>>>             No. Msys2 is the name for the whole project. "msys" is
>>>             the name of one of subsystem, one which uses the msys
>>>             (cygwin) runtime. It is not necessary to understand
>>>             these details for using Msys2/Rtools42, but if you are
>>>             still interested to know more, please refer to Msys2
>>>             documentation.
>>>
>>>>             If I ignore the messages and try to debug a terminal
>>>>             application, there are messages
>>>>             stating that multiple threads are started, and the
>>>>             application accepts no keyboard
>>>>             input, and ultimately must be terminated by closing the
>>>>             window.
>>>             Please really you need to show more context to get help.
>>>             I am using this every day and it works for me, as well
>>>             as for other people. Also, please read the documentation
>>>             especially if you are running into problems:
>>>
>>>             https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>>             https://cran.r-project.org/bin/windows/base/howto-R-devel.html
>>>
>>>             Problems with keyboard input are probably related to
>>>             which terminal you are using. In some terminals, you
>>>             would have to use winpty (run gdb with winpty) for line
>>>             editing to work. Please see "Additional debugging hints"
>>>             in the documentation.
>>>
>>>             In a clean, updated install of Rtools42, with gdb
>>>             installed as documented, no additional tweaks are needed
>>>             to run gdb from the "Rtools42 bash" (mintty terminal
>>>             running bash from Msys2).
>>>
>>>>             It appears there are other development communities
>>>>             negatively impacted by
>>>>             the fork to mingw-w64. This did not go smoothly.
>>>
>>>             I don't understand what you mean. As far as I know, R
>>>             has been using MinGW-W64 (and before that MinGW) from
>>>             the beginning, certainly it has been using MinGW-W64 for
>>>             many years now. The official builds never used MSVC,
>>>             there was no switching to MinGW/MinGW-W64 in the case of
>>>             R afair, at least not in the recent past.
>>>
>>>             But, in either case, the choice of MinGW-W64 is
>>>             orthogonal to the choice of Msys2 as the provider of the
>>>             build tools. Rtools42/43 come also in a compiler
>>>             toolchain+libraries bundle, without Msys2, which in
>>>             theory you could use with a different set of build
>>>             tools. But you would be on your own to figure out the
>>>             details.
>>>
>>>>
>>>>             Perhaps it would be safer to simply provide a version
>>>>             of Rtools42 that comes with
>>>>             gdb and msys2?
>>>
>>>             Rtools42 comes with Msys2. gdb is not installed there by
>>>             default, because most people don't need it, but it is
>>>             documented how to install it. I've now updated the
>>>             documentation to always remind to update the system
>>>             before installing any Msys2 packages.
>>>
>>>             Tomas
>>>
>>>>
>>>>             Dominick
>>>>
>>>>
>>>>
>>>>
>>>>             On Wed, Jan 18, 2023 at 2:40 AM Tomas Kalibera
>>>>             <tomas.kalibera at gmail.com> wrote:
>>>>
>>>>
>>>>                 On 1/18/23 04:33, Dominick Samperi wrote:
>>>>                 > Hello,
>>>>                 >
>>>>                 > I tried installing gdb into Rtools42 following
>>>>                 the instructions here
>>>>                 >
>>>>                 https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
>>>>                 >
>>>>                 > I ran 'pacman -Sy gdb', and the installation
>>>>                 seemed to complete without
>>>>                 > problems.
>>>>                 >
>>>>                 > But gdb could not be started because incorrect
>>>>                 DLL versions were installed,
>>>>                 > in particular, the missing DLL's are:
>>>>                 msys-ffi-8.dll and
>>>>                 > msys-unistring-5.dll.
>>>>
>>>>                 Try upgrading Msys2 using
>>>>
>>>>                 pacman -Syuu
>>>>
>>>>                 Tomas
>>>>
>>>>                 > Is there an alternative way to install gdb for
>>>>                 use with Rtool42?
>>>>                 >
>>>>                 > Thanks,
>>>>                 > Dominick
>>>>                 >
>>>>                 >? ? ? ?[[alternative HTML version deleted]]
>>>>                 >
>>>>                 > ______________________________________________
>>>>                 > R-devel at r-project.org mailing list
>>>>                 > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
	[[alternative HTML version deleted]]


From yugong @end|ng |rom out|ook@com  Fri Jan 20 10:23:46 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Fri, 20 Jan 2023 09:23:46 +0000
Subject: [Rd] about RGui HighDPI awareness on windows
Message-ID: <TYAP286MB026815B87A3D07F03A9A2570D1C59@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Dear all:

Now RGui on windows no HighDPI awareness.try add HighDPI awareness to RGui in last  two days.

I write an initial POC(just for verify and only SystemDPI awareness  partial implemented) , try to mod graphapp used in  R  to implemented DPI scaling.
it seems works on my laptop , but need  further test.

So I post the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff

if you interested in this ,please read or  try the patch.

Looking forward to hear your thoughts about this patch.

Best regards,
Yu Gong




	[[alternative HTML version deleted]]


From @nto|ne|uc@@ @end|ng |rom gm@||@com  Sat Jan 21 16:55:33 2023
From: @nto|ne|uc@@ @end|ng |rom gm@||@com (Antoine Lucas)
Date: Sat, 21 Jan 2023 16:55:33 +0100
Subject: [Rd] Object are not destroy while using error (Rf_error)
Message-ID: <CAM98rvT631sXXO4A6hcmNq7V_dK6Sqehjng3cspHeW9WZo2-OA@mail.gmail.com>

Dear all,

I try to understand why on my computer I do not clear all data with this
code:


#include <R.h>
static int count = 0;

class A {
public:
  A(){  printf("c %d\n", count);
    count++;  }

  ~A(){count--;
    printf("d %d\n", count);  }
};

extern "C" {
  void testAL(){
    A a;
    {
      A b;
    }
    error("does not write [d 0]");
  }
}

To run with R: I build  gcc -shared -I/opt/R-202301/lib/R/include/
myError.cpp -o myError.so

then in R: dyn.load("myError.so")
.C("testAL")

This writes c0, c1, d1 but not d0.
If I comment line "error", I does write latest d0.

How could I get all my objects destroy while sending en error message to R ?

Regards,

Antoine Lucas.

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sun Jan 22 05:17:45 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 21 Jan 2023 22:17:45 -0600
Subject: [Rd] Object are not destroy while using error (Rf_error)
In-Reply-To: <CAM98rvT631sXXO4A6hcmNq7V_dK6Sqehjng3cspHeW9WZo2-OA@mail.gmail.com>
References: <CAM98rvT631sXXO4A6hcmNq7V_dK6Sqehjng3cspHeW9WZo2-OA@mail.gmail.com>
Message-ID: <25548.47337.944917.442829@rob.eddelbuettel.com>


Antoine,

I think there are few things going on here.  One is that actual _R_ objects
may only get destroyed when gc() gets called.  Which we applications writer
do not control.  Another thing that may have an effect is the use of .C()
which we all more or less moved away from.  Anyway, if we make your example a
proper C++ one with proper C++ scope (by trivial Rcpp wrapping for ease, but
that should not be a requirement) we see the four message you desire:


#### Code

#include <Rcpp/Lightest>

static int count = 0;

class A {
public:
  A(){  printf("c %d\n", count);
    count++;  }

  ~A(){count--;
    printf("d %d\n", count);  }
};

// [[Rcpp::export]]
void testAL(){
  A a;
  {
    A b;
  }
  Rcpp::stop("does not write [d 0]");
}

/*** R
testAL()
*/


#### Output

> Rcpp::sourceCpp("/tmp/ctorDemo.cpp")

> testAL()
c 0
c 1
d 1
d 0
Error in eval(ei, envir) : does not write [d 0]
> 


Hope this helps,  Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From yugong @end|ng |rom out|ook@com  Sun Jan 22 07:37:45 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Sun, 22 Jan 2023 06:37:45 +0000
Subject: [Rd] about RGui HighDPI awareness on windows
In-Reply-To: <TYAP286MB026815B87A3D07F03A9A2570D1C59@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB026815B87A3D07F03A9A2570D1C59@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <TYAP286MB026853E9B8D6412586742774D1CB9@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

Continually working on this,  System DPI awareness implemented improved and almost finished.

Now the modify includes: Window, Dialogs and Toolbar implemented use graphapp. which related to Multiple places in the R windows front end and R base package and modules. Now most of them modified to DPI awareness(some of them, surprisingly DPI awareness ready, do not need to mod,) .

I test on two PCS168-dpi and 192 dpi, RGUI windows(include console, editor, pagers), dialogs (include download, repo related , preference), and most important, plotting Windows, All of them work smoothly on my test PCS.

The patch url is https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff and two test picture of my PCS are also in the repo.

Looking forward to any feedback or feedback from you.

Best regards,
Yu Gong




________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of yu gong <yugong at outlook.com>
Sent: Friday, January 20, 2023 17:23
To: r-devel at r-project.org <r-devel at r-project.org>
Subject: [Rd] about RGui HighDPI awareness on windows

Dear all:

Now RGui on windows no HighDPI awareness.try add HighDPI awareness to RGui in last  two days.

I write an initial POC(just for verify and only SystemDPI awareness  partial implemented) , try to mod graphapp used in  R  to implemented DPI scaling.
it seems works on my laptop , but need  further test.

So I post the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff

if you interested in this ,please read or  try the patch.

Looking forward to hear your thoughts about this patch.

Best regards,
Yu Gong




        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jan 23 11:06:49 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 23 Jan 2023 11:06:49 +0100
Subject: [Rd] Object are not destroy while using error (Rf_error)
In-Reply-To: <CAM98rvT631sXXO4A6hcmNq7V_dK6Sqehjng3cspHeW9WZo2-OA@mail.gmail.com>
References: <CAM98rvT631sXXO4A6hcmNq7V_dK6Sqehjng3cspHeW9WZo2-OA@mail.gmail.com>
Message-ID: <7c3fb07a-6e38-81b7-ba41-b5cf709a9cc7@gmail.com>


On 1/21/23 16:55, Antoine Lucas wrote:
> Dear all,
>
> I try to understand why on my computer I do not clear all data with this
> code:
>
>
> #include <R.h>
> static int count = 0;
>
> class A {
> public:
>    A(){  printf("c %d\n", count);
>      count++;  }
>
>    ~A(){count--;
>      printf("d %d\n", count);  }
> };
>
> extern "C" {
>    void testAL(){
>      A a;
>      {
>        A b;
>      }
>      error("does not write [d 0]");
>    }
> }
>
> To run with R: I build  gcc -shared -I/opt/R-202301/lib/R/include/
> myError.cpp -o myError.so
>
> then in R: dyn.load("myError.so")
> .C("testAL")
>
> This writes c0, c1, d1 but not d0.
> If I comment line "error", I does write latest d0.
>
> How could I get all my objects destroy while sending en error message to R ?

The problem is that Rf_error() uses a long jump, which unwinds the C++ 
frames without calling destructors. Using the C API of R from C++ code 
is tricky because of this incompatibility of C long jumps with C++ 
destructors.

Technically, you need to protect all calls from C++ to R against long 
jumps. There is an API for that, see R_UnwindProtect in 6.12 of "Writing 
R Extensions". So, your wrapper will get called in case of a long jump 
and will handle it in a way compatible with your C++ frames (possibly by 
throwing a C++ exception).

Similarly, you should not throw C++ exceptions over R frames on the 
stack, because R's meta-data about long jump targets on its stacks would 
go out of sync, causing a crash later. You again would have to convert 
C++ exceptions to long jumps.

So, in your example where you use the R API to only trigger an R error, 
you could instead throw a C++ exception, and catch it later, below all 
your C++ code but before unwinding could potentially reach R frames. And 
there you could call Rf_error().

Best
Tomas

(this is related: 
https://blog.r-project.org/2019/03/28/use-of-c-in-packages )

>
> Regards,
>
> Antoine Lucas.
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@rm@t46 @end|ng |rom uwo@c@  Wed Jan 25 15:59:37 2023
From: d@rm@t46 @end|ng |rom uwo@c@ (Dave Armstrong)
Date: Wed, 25 Jan 2023 09:59:37 -0500
Subject: [Rd] Potential bug in fitted.nls
Message-ID: <B45032AC-FCF7-423A-8202-76F3AB25B310@uwo.ca>

Dear Colleagues,

I recently answered [this question]() on StackOverflow that identified 
what seems to be unusual behaviour with `stats:::nls.fitted()`. In 
particular, a null model returns a single fitted value rather than a 
vector of the same fitted value of `length(y)`.  The documentation 
doesn?t make it seem like this is the intended behaviour, so I?m not 
sure if it?s a bug, a ?Wishlist? item or something that is working 
as intended even though it seems unusual to me.  I looked through the 
bug reporting page on the R project website and it suggested contacting 
the R-devel list in cases where the behaviour is not obviously a bug to 
see whether others find the behaviour equally unusual and I should 
submit a Wishlist item through Bugzilla.

Below is a reprex that shows how the fitted values of a model with just 
a single parameter is length 1, but if I multiply that constant by a 
vector of ones, then the fitted values are of `length(y)`.  Is this 
something that should be reported?

``` r
dat <- 
data.frame(y=c(80,251,304,482,401,141,242,221,304,243,544,669,638),
                   ones = rep(1, 13))
mNull1 <- nls(y ~ a, data=dat, start=c(a=mean(dat$y)))
fitted(mNull1)
#> [1] 347.6923
#> attr(,"label")
#> [1] "Fitted values"

mNull2 <- nls(y ~ a*ones, data=dat, start=c(a=mean(dat$y)))
fitted(mNull2)
#>  [1] 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923 
347.6923
#>  [9] 347.6923 347.6923 347.6923 347.6923 347.6923
#> attr(,"label")
#> [1] "Fitted values"
```

Created on 2023-01-25 by the [reprex 
package](https://reprex.tidyverse.org) (v2.0.1)
	[[alternative HTML version deleted]]


From pro|jcn@@h @end|ng |rom gm@||@com  Thu Jan 26 14:50:09 2023
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Thu, 26 Jan 2023 08:50:09 -0500
Subject: [Rd] Potential bug in fitted.nls
In-Reply-To: <B45032AC-FCF7-423A-8202-76F3AB25B310@uwo.ca>
References: <B45032AC-FCF7-423A-8202-76F3AB25B310@uwo.ca>
Message-ID: <ec9f5e8c-25c2-2229-84c0-2488ab8b2ad4@gmail.com>

FWIW, nlsr::nlxb() gives same answers.

JN

On 2023-01-25 09:59, Dave Armstrong wrote:
> Dear Colleagues,
> 
> I recently answered [this question]() on StackOverflow that identified
> what seems to be unusual behaviour with `stats:::nls.fitted()`. In
> particular, a null model returns a single fitted value rather than a
> vector of the same fitted value of `length(y)`.  The documentation
> doesn?t make it seem like this is the intended behaviour, so I?m not
> sure if it?s a bug, a ?Wishlist? item or something that is working
> as intended even though it seems unusual to me.  I looked through the
> bug reporting page on the R project website and it suggested contacting
> the R-devel list in cases where the behaviour is not obviously a bug to
> see whether others find the behaviour equally unusual and I should
> submit a Wishlist item through Bugzilla.
> 
> Below is a reprex that shows how the fitted values of a model with just
> a single parameter is length 1, but if I multiply that constant by a
> vector of ones, then the fitted values are of `length(y)`.  Is this
> something that should be reported?
> 
> ``` r
> dat <-
> data.frame(y=c(80,251,304,482,401,141,242,221,304,243,544,669,638),
>                     ones = rep(1, 13))
> mNull1 <- nls(y ~ a, data=dat, start=c(a=mean(dat$y)))
> fitted(mNull1)
> #> [1] 347.6923
> #> attr(,"label")
> #> [1] "Fitted values"
> 
> mNull2 <- nls(y ~ a*ones, data=dat, start=c(a=mean(dat$y)))
> fitted(mNull2)
> #>  [1] 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923
> 347.6923
> #>  [9] 347.6923 347.6923 347.6923 347.6923 347.6923
> #> attr(,"label")
> #> [1] "Fitted values"
> ```
> 
> Created on 2023-01-25 by the [reprex
> package](https://reprex.tidyverse.org) (v2.0.1)
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From w||||@mwdun|@p @end|ng |rom gm@||@com  Thu Jan 26 18:55:00 2023
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Thu, 26 Jan 2023 09:55:00 -0800
Subject: [Rd] Potential bug in fitted.nls
In-Reply-To: <B45032AC-FCF7-423A-8202-76F3AB25B310@uwo.ca>
References: <B45032AC-FCF7-423A-8202-76F3AB25B310@uwo.ca>
Message-ID: <CAHqSRuRxt7RfzN4o1YGr34rfCK7gpY88MrVXUOw2FmDmzJJzaw@mail.gmail.com>

Doesn't nls() expect that the lengths of vectors on both sides of the
formula match (if both are supplied)?  Perhaps it should check for that.

-Bill

On Thu, Jan 26, 2023 at 12:17 AM Dave Armstrong <darmst46 at uwo.ca> wrote:

> Dear Colleagues,
>
> I recently answered [this question]() on StackOverflow that identified
> what seems to be unusual behaviour with `stats:::nls.fitted()`. In
> particular, a null model returns a single fitted value rather than a
> vector of the same fitted value of `length(y)`.  The documentation
> doesn?t make it seem like this is the intended behaviour, so I?m not
> sure if it?s a bug, a ?Wishlist? item or something that is working
> as intended even though it seems unusual to me.  I looked through the
> bug reporting page on the R project website and it suggested contacting
> the R-devel list in cases where the behaviour is not obviously a bug to
> see whether others find the behaviour equally unusual and I should
> submit a Wishlist item through Bugzilla.
>
> Below is a reprex that shows how the fitted values of a model with just
> a single parameter is length 1, but if I multiply that constant by a
> vector of ones, then the fitted values are of `length(y)`.  Is this
> something that should be reported?
>
> ``` r
> dat <-
> data.frame(y=c(80,251,304,482,401,141,242,221,304,243,544,669,638),
>                    ones = rep(1, 13))
> mNull1 <- nls(y ~ a, data=dat, start=c(a=mean(dat$y)))
> fitted(mNull1)
> #> [1] 347.6923
> #> attr(,"label")
> #> [1] "Fitted values"
>
> mNull2 <- nls(y ~ a*ones, data=dat, start=c(a=mean(dat$y)))
> fitted(mNull2)
> #>  [1] 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923
> 347.6923
> #>  [9] 347.6923 347.6923 347.6923 347.6923 347.6923
> #> attr(,"label")
> #> [1] "Fitted values"
> ```
>
> Created on 2023-01-25 by the [reprex
> package](https://reprex.tidyverse.org) (v2.0.1)
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From pro|jcn@@h @end|ng |rom gm@||@com  Thu Jan 26 19:44:38 2023
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Thu, 26 Jan 2023 13:44:38 -0500
Subject: [Rd] Potential bug in fitted.nls
In-Reply-To: <CAHqSRuRxt7RfzN4o1YGr34rfCK7gpY88MrVXUOw2FmDmzJJzaw@mail.gmail.com>
References: <B45032AC-FCF7-423A-8202-76F3AB25B310@uwo.ca>
 <CAHqSRuRxt7RfzN4o1YGr34rfCK7gpY88MrVXUOw2FmDmzJJzaw@mail.gmail.com>
Message-ID: <6a528089-ca9d-3a9f-8924-008d2f88ee96@gmail.com>

nls() actually uses different modeling formulas depending on the 'algorithm', and
there is, in my view as a long time nonlinear modeling person, an unfortunate
structural issue that likely cannot be resolved simply. This is because for nonlinear
modeling programs we really should be using explicit model statements
e.g., a linear model should be y ~ a * x + b where x is the (independent)
variable and a and b are parameters. But we put in y ~ x as per lm().
Partially linear approaches and indexed parameter models add complexity and
inconsistency. We're pushing structures beyond their design.

This is one of the topics in a paper currently undergoing
final edit on "Improving nls()" that came out of a Google Summer of Code project.
The desired improvements in nls() were mostly frustrated by entanglements in the code,
but they have led to a lot of tweaks to package nlsr. Perhaps someone more facile
with the intricacies of R internals can succeed. For the paper and nlsr,
all the bits should get sent to CRAN and elsewhere in the next month or so,
(co-author is newly started on a Ph D) but if anyone is anxious to try, they can email
me. The nlsr code has been stable for several months, but some documentation still
being considered.

Sorting out how to deal with the model expression for nls() and related tools
is a worthwhile goal, but not one that can be settled here. It could make a good
review project for a senior undergrad or master's level, and I'd be happy to
join the discussion.

Cheers, JN


On 2023-01-26 12:55, Bill Dunlap wrote:
> Doesn't nls() expect that the lengths of vectors on both sides of the
> formula match (if both are supplied)?  Perhaps it should check for that.
> 
> -Bill
> 
> On Thu, Jan 26, 2023 at 12:17 AM Dave Armstrong <darmst46 at uwo.ca> wrote:
> 
>> Dear Colleagues,
>>
>> I recently answered [this question]() on StackOverflow that identified
>> what seems to be unusual behaviour with `stats:::nls.fitted()`. In
>> particular, a null model returns a single fitted value rather than a
>> vector of the same fitted value of `length(y)`.  The documentation
>> doesn?t make it seem like this is the intended behaviour, so I?m not
>> sure if it?s a bug, a ?Wishlist? item or something that is working
>> as intended even though it seems unusual to me.  I looked through the
>> bug reporting page on the R project website and it suggested contacting
>> the R-devel list in cases where the behaviour is not obviously a bug to
>> see whether others find the behaviour equally unusual and I should
>> submit a Wishlist item through Bugzilla.
>>
>> Below is a reprex that shows how the fitted values of a model with just
>> a single parameter is length 1, but if I multiply that constant by a
>> vector of ones, then the fitted values are of `length(y)`.  Is this
>> something that should be reported?
>>
>> ``` r
>> dat <-
>> data.frame(y=c(80,251,304,482,401,141,242,221,304,243,544,669,638),
>>                     ones = rep(1, 13))
>> mNull1 <- nls(y ~ a, data=dat, start=c(a=mean(dat$y)))
>> fitted(mNull1)
>> #> [1] 347.6923
>> #> attr(,"label")
>> #> [1] "Fitted values"
>>
>> mNull2 <- nls(y ~ a*ones, data=dat, start=c(a=mean(dat$y)))
>> fitted(mNull2)
>> #>  [1] 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923 347.6923
>> 347.6923
>> #>  [9] 347.6923 347.6923 347.6923 347.6923 347.6923
>> #> attr(,"label")
>> #> [1] "Fitted values"
>> ```
>>
>> Created on 2023-01-25 by the [reprex
>> package](https://reprex.tidyverse.org) (v2.0.1)
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


