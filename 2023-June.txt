From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jun  1 10:11:22 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 1 Jun 2023 10:11:22 +0200
Subject: [Rd] why does [A-Z] include 'T' in an Estonian locale?
In-Reply-To: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
References: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
Message-ID: <25720.21162.617743.216354@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Tue, 30 May 2023 11:45:20 -0400 writes:

    > Inspired by this old Stack Overflow question

    > https://stackoverflow.com/questions/19765610/when-does-locale-affect-rs-regular-expressions

    > I was wondering why this is TRUE:

    > Sys.setlocale("LC_ALL", "et_EE")
    > grepl("[A-Z]", "T")

    > TRE's documentation at 
    > <https://laurikari.net/tre/documentation/regex-syntax/> says that a 
    > range "is shorthand for the full range of characters between those two 
    > [endpoints] (inclusive) in the collating sequence".

    > Yet, T is *not* between A and Z in the Estonian collating sequence:

    > sort(LETTERS)
    > [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" 
    > "Q" "R" "S"
    > [20] "Z" "T" "U" "V" "W" "X" "Y"

    > I realize that this may be a question about TRE rather than about R 
    > *per se* (FWIW the grepl() result is also TRUE with `perl = TRUE`, so 
    > the question also applies to PCRE), but I'm wondering if anyone has any 
    > insights ...  (and yes, I know that the correct answer is "use [:alpha:] 
    > and don't worry about it")

    > (In contrast, the ICU engine underlying stringi/stringr says "[t]he 
    > characters to include are determined by Unicode code point ordering" - see

    > https://stackoverflow.com/questions/76365426/does-stringrs-regex-engine-translate-a-z-into-abcdefghijklmnopqrstuvwyz/76366163#76366163

    > for links)

Your last (<sentence>)  may point to the solution of the riddle:
Nowadays, typically in R

> capabilities()[["ICU"]]
[1] TRUE

but of course now one has to study if / why  ICU seems to take
precedence over the locale's internal "sort"ing ..


Best regards,
Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jun  1 11:53:19 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 1 Jun 2023 11:53:19 +0200
Subject: [Rd] why does [A-Z] include 'T' in an Estonian locale?
In-Reply-To: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
References: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
Message-ID: <f55de17d-5be1-113b-bf52-ca054ba675fe@gmail.com>


On 5/30/23 17:45, Ben Bolker wrote:
> Inspired by this old Stack Overflow question
>
> https://stackoverflow.com/questions/19765610/when-does-locale-affect-rs-regular-expressions 
>
>
> I was wondering why this is TRUE:
>
> Sys.setlocale("LC_ALL", "et_EE")
> grepl("[A-Z]", "T")
>
> TRE's documentation at 
> <https://laurikari.net/tre/documentation/regex-syntax/> says that a 
> range "is shorthand for the full range of characters between those two 
> [endpoints] (inclusive) in the collating sequence".
>
> Yet, T is *not* between A and Z in the Estonian collating sequence:
>
> ?sort(LETTERS)
> ?[1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" 
> "Q" "R" "S"
> [20] "Z" "T" "U" "V" "W" "X" "Y"
>
> ? I realize that this may be a question about TRE rather than about R 
> *per se* (FWIW the grepl() result is also TRUE with `perl = TRUE`, so 
> the question also applies to PCRE), but I'm wondering if anyone has 
> any insights ...? (and yes, I know that the correct answer is "use 
> [:alpha:] and don't worry about it")

The correct answer depends on what you want to do, but please see 
?regexp in R:

"Because their interpretation is locale- and implementation-dependent, 
character ranges are best avoided."

and

"The only portable way to specify all ASCII letters is to list them all 
as the character class
?[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]?."

This is from POSIX specification:

"In the POSIX locale, a range expression represents the set of collating 
elements that fall between two elements in the collation sequence, 
inclusive. In other locales, a range expression has unspecified 
behavior: strictly conforming applications shall not rely on whether the 
range expression is valid, or on the set of collating elements matched. 
A range expression shall be expressed as the starting point and the 
ending point separated by a <hyphen-minus> ( '-' )."

If you really want to know why the current implementation of R, TRE and 
PCRE2 works in a certain way, you can check the code, but I don't think 
it would be a good use of the time given what is written above.

It may be that TRE has a bug, maybe it doesn't do what was intended (see 
comment "XXX - Should use collation order instead of encoding values in 
character ranges." in the code), but I didn't check the code thoroughly.

Best
Tomas

>
> (In contrast, the ICU engine underlying stringi/stringr says "[t]he 
> characters to include are determined by Unicode code point ordering" - 
> see
>
> https://stackoverflow.com/questions/76365426/does-stringrs-regex-engine-translate-a-z-into-abcdefghijklmnopqrstuvwyz/76366163#76366163 
>
>
> for links)
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Fri Jun  2 00:00:39 2023
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Thu, 1 Jun 2023 22:00:39 +0000
Subject: [Rd] bug in na.contiguous? Doesn't give the first tied stretch if
 it is at the start
Message-ID: <CWLP265MB3505B9953F00D15BB7F3D39EAE49A@CWLP265MB3505.GBRP265.PROD.OUTLOOK.COM>

Hi.

The description of na.contiguous says:

"Find the longest consecutive stretch of non-missing values in a
     time series object.  (In the event of a tie, the first such
     stretch.)"

But this seems not to be the case if one of the tied longest stretches is at the start of the sequence/series. In the following example, there are three stretches of length 3, so I expect the result to be [1 2 3]. But:

> x <- c(1:3, NA, NA, 6:8, NA, 10:12)
> x
[1]  1  2  3 NA NA  6  7  8 NA 10 11 12
> na.contiguous(x)
[1] 6 7 8
## expected: [1] 1 2 3

(I have stripped attributes from the output for clarity.)

Below is the beginning of stats:::na.contiguous.default.
The source of the issue appears to be  the line containing the assignment to 'seg' (marked with exclamation marks).
The calculation leading to it does

cumsum(!good)

where !good in this case is

[1] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE

And its cumsum is:

[1] 0 0 0 1 2 2 2 2 3 3 3 3


Then the assignment to 'seg' below picks the first longest stretch and subtracts 1, since the cumsum at indices corresponding to FALSE stays constant but the length of the constant stretch is one more then the number of FALSEs, ... except for the stretch at the start of the series which is not preceded by TRUE! So it is missed.

One way to patch this could be by the two commented assignments added by me to the code below to prepend a 0 to tt and then drop the first element of 'keep' to allow correct indexing later.

Georgi Boshnakov


> stats:::na.contiguous.default
function (object, ...)
{
    tm <- time(object)
    xfreq <- frequency(object)
    if (is.matrix(object))
        good <- apply(!is.na(object), 1L, all)
    else good <- !is.na(object)
    if (!sum(good))
        stop("all times contain an NA")
    tt <- cumsum(!good)
## tt <- c(0, tt)
    ln <- sapply(0:max(tt), function(i) sum(tt == i))
    seg <- (seq_along(ln)[ln == max(ln)])[1L] - 1          ## !!!
    keep <- (tt == seg)
## keep <- keep[-1]
    st <- min(which(keep))

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Jun  2 10:38:45 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 2 Jun 2023 10:38:45 +0200
Subject: [Rd] 
 bug in na.contiguous? Doesn't give the first tied stretch if
 it is at the start
In-Reply-To: <CWLP265MB3505B9953F00D15BB7F3D39EAE49A@CWLP265MB3505.GBRP265.PROD.OUTLOOK.COM>
References: <CWLP265MB3505B9953F00D15BB7F3D39EAE49A@CWLP265MB3505.GBRP265.PROD.OUTLOOK.COM>
Message-ID: <25721.43669.105512.603349@stat.math.ethz.ch>

>>>>> Georgi Boshnakov 
>>>>>     on Thu, 1 Jun 2023 22:00:39 +0000 writes:

    > Hi.
    > The description of na.contiguous says:

    > "Find the longest consecutive stretch of non-missing values in a
    > time series object.  (In the event of a tie, the first such
    > stretch.)"

    > But this seems not to be the case if one of the tied longest stretches is at the start of the sequence/series. In the following example, there are three stretches of length 3, so I expect the result to be [1 2 3]. But:

    >> x <- c(1:3, NA, NA, 6:8, NA, 10:12)
    >> x
    > [1]  1  2  3 NA NA  6  7  8 NA 10 11 12
    >> na.contiguous(x)
    > [1] 6 7 8
    > ## expected: [1] 1 2 3

    > (I have stripped attributes from the output for clarity.)

    > Below is the beginning of stats:::na.contiguous.default.
    > The source of the issue appears to be  the line containing the assignment to 'seg' (marked with exclamation marks).
    > The calculation leading to it does

    > cumsum(!good)

    > where !good in this case is

    > [1] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE

    > And its cumsum is:

    > [1] 0 0 0 1 2 2 2 2 3 3 3 3


    > Then the assignment to 'seg' below picks the first longest stretch and subtracts 1, since the cumsum at indices corresponding to FALSE stays constant but the length of the constant stretch is one more then the number of FALSEs, ... except for the stretch at the start of the series which is not preceded by TRUE! So it is missed.

    > One way to patch this could be by the two commented assignments added by me to the code below to prepend a 0 to tt and then drop the first element of 'keep' to allow correct indexing later.

    > Georgi Boshnakov

Thanks a lot, Georgi, for raising this.

I think you are right :

1) this is a bug {in the R code base since the beginning
                  (na.contiguous added to R in 1999)}
2) your proposition is a good solution

I've started to prepare a commit to fix it.
(but will not haste to do that.. so more comments are welcome!)

Martin



    >> stats:::na.contiguous.default
    > function (object, ...)
    > {
    > tm <- time(object)
    > xfreq <- frequency(object)
    > if (is.matrix(object))
    > good <- apply(!is.na(object), 1L, all)
    > else good <- !is.na(object)
    > if (!sum(good))
    > stop("all times contain an NA")
    > tt <- cumsum(!good)
    > ## tt <- c(0, tt)
    > ln <- sapply(0:max(tt), function(i) sum(tt == i))
    > seg <- (seq_along(ln)[ln == max(ln)])[1L] - 1          ## !!!
    > keep <- (tt == seg)
    > ## keep <- keep[-1]
    > st <- min(which(keep))

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From th|erry@onke||nx @end|ng |rom |nbo@be  Fri Jun  2 16:55:59 2023
From: th|erry@onke||nx @end|ng |rom |nbo@be (Thierry Onkelinx)
Date: Fri, 2 Jun 2023 16:55:59 +0200
Subject: [Rd] bug in utils:::format.person
Message-ID: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>

Dear all,

I think I found a bug in utils::format.person when using style = "R" with a
vector of comments. The comment section is not parsed properly. Please find
below the mwe and the session info.

Best regards,

Thierry

maintainer <- person(
  given = "Thierry", family = "Onkelinx", role = c("aut", "cre"),
  email = "thierry.onkelinx at inbo.be",
  comment = c(
    ORCID = "0000-0001-8804-4216",
    affiliation = "Research Institute for Nature and Forest (INBO)"
  )
)
format(maintainer, style = "R") |>
  cat(sep = "\n")
# output
person(given = "Thierry",
       family = "Onkelinx",
       role = c("aut", "cre"),
       email = "thierry.onkelinx at inbo.be",
       comment = c("c(ORCID = \"0000-0001-8804-4216\", affiliation =
\"Research Institute for Nature and Forest (INBO)\"", ")"))

? Session info
??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
 setting  value
 version  R version 4.3.0 (2023-04-21)
 os       Ubuntu 22.04.2 LTS
 system   x86_64, linux-gnu
 ui       X11
 language nl_BE:nl
 collate  nl_BE.UTF-8
 ctype    nl_BE.UTF-8
 tz       Europe/Brussels
 date     2023-06-02
 pandoc   NA

? Packages
??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
 package     * version date (UTC) lib source
 cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)
 fortunes      1.5-4   2016-12-29 [1] CRAN (R 4.3.0)
 sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)



ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Fri Jun  2 19:58:54 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 2 Jun 2023 20:58:54 +0300
Subject: [Rd] bug in utils:::format.person
In-Reply-To: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>
References: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>
Message-ID: <20230602205854.31df81b3@Tarkus>

On Fri, 2 Jun 2023 16:55:59 +0200
Thierry Onkelinx via R-devel <r-devel at r-project.org> wrote:

> I think I found a bug in utils::format.person when using style = "R"
> with a vector of comments. The comment section is not parsed
> properly.

Good catch! This looks like another occasion of deparse() suddenly
returning a multi-element character vector where the caller expects a
single string:

format(person(c('J.', 'Random'), 'Hacker', comment = c(ORCID =
'0000-0000-0000-0000', foo = 'bar bar bar bar bar')), style = 'R')
# [1] "person(given = c(\"J.\", \"Random\"),"
# [2] "       family = \"Hacker\","
# [3] "       comment = c(ORCID = \"0000-0000-0000-0000\", foo = \"bar
# bar bar bar bar\"))"
format(person(c('J.', 'Random'), 'Hacker', comment = c(ORCID =
'0000-0000-0000-0000', foo = 'bar bar bar bar bar bar')), style = 'R')
# [1] "person(given = c(\"J.\", \"Random\"),"
# [2] "       family = \"Hacker\","
# [3] "       comment = c(\"c(ORCID = \\\"0000-0000-0000-0000\\\", foo =
# \\\"bar bar bar bar bar bar\\\"\", \")\"))"

The following seems to fix it:

--- src/library/utils/R/citation.R	(revision 84486)
+++ src/library/utils/R/citation.R	(working copy)
@@ -1014,7 +1014,7 @@
                 function(e) {
                     e <- e[!vapply(e, is.null, NA)]
                     cargs <-
-                        sprintf("%s = %s", names(e), sapply(e, deparse))
+                        sprintf("%s = %s", names(e), sapply(e, deparse1))
                     .format_call_RR("person", cargs)
                 })
     if(length(s) > 1L)

A regression test could be along the lines of:

p <- person(
 'foo', 'bar', comment = c(
  comment = 'just enough to deparse into multiple lines',
  needs = 'multiple entries'
 )
)
stopifnot(all.equal(
 eval(parse(text = format(p, style = 'R')))$comment,
 p$comment
))

-- 
Best regards,
Ivan


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Sat Jun  3 03:45:47 2023
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Sat, 3 Jun 2023 03:45:47 +0200 (CEST)
Subject: [Rd] bug in utils:::format.person
In-Reply-To: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>
References: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>
Message-ID: <6ef2cf25-87f5-89ca-7383-dab77a9ea2c8@uibk.ac.at>

Thierry,

thanks for this, this is a bug in utils:::.format_person_as_R_code(). This 
calls deparse() on the elements of the person object with the default 
width.cutoff = 60. As your comment exceeds this width, the erroneous 
formatting is produced. The simplest reproducible example I could come up 
with was:

p <- person(".", comment = c(foo = ".....................",
   bar = "....................."))
writeLines(format(p, style = "R"))

This can be fixed in line 1017 of utils/R/citation.R either by increasing 
the width.cutoff, e.g.,

   sprintf("%s = %s", names(e), sapply(e, deparse, width.cutoff = 500L))

but, of course, this still has an arbitrary cutoff. So maybe better

   sprintf("%s = %s", names(e), sapply(e,
     function(x) paste(deparse(x), collapse = "")))

which should work.

I'll ping Kurt about this and try to coordinate a fix.

Best wishes,
Achim


On Fri, 2 Jun 2023, Thierry Onkelinx via R-devel wrote:

> Dear all,
>
> I think I found a bug in utils::format.person when using style = "R" with a
> vector of comments. The comment section is not parsed properly. Please find
> below the mwe and the session info.
>
> Best regards,
>
> Thierry
>
> maintainer <- person(
>  given = "Thierry", family = "Onkelinx", role = c("aut", "cre"),
>  email = "thierry.onkelinx at inbo.be",
>  comment = c(
>    ORCID = "0000-0001-8804-4216",
>    affiliation = "Research Institute for Nature and Forest (INBO)"
>  )
> )
> format(maintainer, style = "R") |>
>  cat(sep = "\n")
> # output
> person(given = "Thierry",
>       family = "Onkelinx",
>       role = c("aut", "cre"),
>       email = "thierry.onkelinx at inbo.be",
>       comment = c("c(ORCID = \"0000-0001-8804-4216\", affiliation =
> \"Research Institute for Nature and Forest (INBO)\"", ")"))
>
> ? Session info
> ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
> setting  value
> version  R version 4.3.0 (2023-04-21)
> os       Ubuntu 22.04.2 LTS
> system   x86_64, linux-gnu
> ui       X11
> language nl_BE:nl
> collate  nl_BE.UTF-8
> ctype    nl_BE.UTF-8
> tz       Europe/Brussels
> date     2023-06-02
> pandoc   NA
>
> ? Packages
> ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
> package     * version date (UTC) lib source
> cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)
> fortunes      1.5-4   2016-12-29 [1] CRAN (R 4.3.0)
> sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)
>
>
>
> ir. Thierry Onkelinx
> Statisticus / Statistician
>
> Vlaamse Overheid / Government of Flanders
> INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
> FOREST
> Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
> thierry.onkelinx at inbo.be
> Havenlaan 88 bus 73, 1000 Brussel
> www.inbo.be
>
> ///////////////////////////////////////////////////////////////////////////////////////////
> To call in the statistician after the experiment is done may be no more
> than asking him to perform a post-mortem examination: he may be able to say
> what the experiment died of. ~ Sir Ronald Aylmer Fisher
> The plural of anecdote is not data. ~ Roger Brinner
> The combination of some data and an aching desire for an answer does not
> ensure that a reasonable answer can be extracted from a given body of data.
> ~ John Tukey
> ///////////////////////////////////////////////////////////////////////////////////////////
>
> <https://www.inbo.be>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Sat Jun  3 03:49:14 2023
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Sat, 3 Jun 2023 03:49:14 +0200 (CEST)
Subject: [Rd] bug in utils:::format.person
In-Reply-To: <6ef2cf25-87f5-89ca-7383-dab77a9ea2c8@uibk.ac.at>
References: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>
 <6ef2cf25-87f5-89ca-7383-dab77a9ea2c8@uibk.ac.at>
Message-ID: <14e2ef8b-3fbc-806c-2e2d-fb1e61e857bd@uibk.ac.at>

Apologies, I missed Ivan's fix to the problem (my day was too long...) 
which is, of course, better than mine.

On Sat, 3 Jun 2023, Achim Zeileis wrote:

> Thierry,
>
> thanks for this, this is a bug in utils:::.format_person_as_R_code(). This 
> calls deparse() on the elements of the person object with the default 
> width.cutoff = 60. As your comment exceeds this width, the erroneous 
> formatting is produced. The simplest reproducible example I could come up 
> with was:
>
> p <- person(".", comment = c(foo = ".....................",
>  bar = "....................."))
> writeLines(format(p, style = "R"))
>
> This can be fixed in line 1017 of utils/R/citation.R either by increasing the 
> width.cutoff, e.g.,
>
>  sprintf("%s = %s", names(e), sapply(e, deparse, width.cutoff = 500L))
>
> but, of course, this still has an arbitrary cutoff. So maybe better
>
>  sprintf("%s = %s", names(e), sapply(e,
>    function(x) paste(deparse(x), collapse = "")))
>
> which should work.
>
> I'll ping Kurt about this and try to coordinate a fix.
>
> Best wishes,
> Achim
>
>
> On Fri, 2 Jun 2023, Thierry Onkelinx via R-devel wrote:
>
>> Dear all,
>> 
>> I think I found a bug in utils::format.person when using style = "R" with a
>> vector of comments. The comment section is not parsed properly. Please find
>> below the mwe and the session info.
>> 
>> Best regards,
>> 
>> Thierry
>> 
>> maintainer <- person(
>>  given = "Thierry", family = "Onkelinx", role = c("aut", "cre"),
>>  email = "thierry.onkelinx at inbo.be",
>>  comment = c(
>>    ORCID = "0000-0001-8804-4216",
>>    affiliation = "Research Institute for Nature and Forest (INBO)"
>>  )
>> )
>> format(maintainer, style = "R") |>
>>  cat(sep = "\n")
>> # output
>> person(given = "Thierry",
>>       family = "Onkelinx",
>>       role = c("aut", "cre"),
>>       email = "thierry.onkelinx at inbo.be",
>>       comment = c("c(ORCID = \"0000-0001-8804-4216\", affiliation =
>> \"Research Institute for Nature and Forest (INBO)\"", ")"))
>> 
>> ? Session info
>> ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>> setting  value
>> version  R version 4.3.0 (2023-04-21)
>> os       Ubuntu 22.04.2 LTS
>> system   x86_64, linux-gnu
>> ui       X11
>> language nl_BE:nl
>> collate  nl_BE.UTF-8
>> ctype    nl_BE.UTF-8
>> tz       Europe/Brussels
>> date     2023-06-02
>> pandoc   NA
>> 
>> ? Packages
>> ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>> package     * version date (UTC) lib source
>> cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)
>> fortunes      1.5-4   2016-12-29 [1] CRAN (R 4.3.0)
>> sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)
>> 
>> 
>> 
>> ir. Thierry Onkelinx
>> Statisticus / Statistician
>> 
>> Vlaamse Overheid / Government of Flanders
>> INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
>> FOREST
>> Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
>> thierry.onkelinx at inbo.be
>> Havenlaan 88 bus 73, 1000 Brussel
>> www.inbo.be
>> 
>> ///////////////////////////////////////////////////////////////////////////////////////////
>> To call in the statistician after the experiment is done may be no more
>> than asking him to perform a post-mortem examination: he may be able to say
>> what the experiment died of. ~ Sir Ronald Aylmer Fisher
>> The plural of anecdote is not data. ~ Roger Brinner
>> The combination of some data and an aching desire for an answer does not
>> ensure that a reasonable answer can be extracted from a given body of data.
>> ~ John Tukey
>> ///////////////////////////////////////////////////////////////////////////////////////////
>> 
>> <https://www.inbo.be>
>>
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

From bbo|ker @end|ng |rom gm@||@com  Sat Jun  3 17:34:20 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 3 Jun 2023 11:34:20 -0400
Subject: [Rd] why does [A-Z] include 'T' in an Estonian locale?
In-Reply-To: <f55de17d-5be1-113b-bf52-ca054ba675fe@gmail.com>
References: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
 <f55de17d-5be1-113b-bf52-ca054ba675fe@gmail.com>
Message-ID: <c230de2a-f261-bf41-50a0-eaa3346d9dba@gmail.com>

   Thanks, I do know about the docs you quoted.  Thanks for pointing me 
to the comment in the code.

  I've posted an issue (a request to make the documentation match the 
code) at the TRE repository:

https://github.com/laurikari/tre/issues/88


On 2023-06-01 5:53 a.m., Tomas Kalibera wrote:
> 
> On 5/30/23 17:45, Ben Bolker wrote:
>> Inspired by this old Stack Overflow question
>>
>> https://stackoverflow.com/questions/19765610/when-does-locale-affect-rs-regular-expressions
>>
>> I was wondering why this is TRUE:
>>
>> Sys.setlocale("LC_ALL", "et_EE")
>> grepl("[A-Z]", "T")
>>
>> TRE's documentation at 
>> <https://laurikari.net/tre/documentation/regex-syntax/> says that a 
>> range "is shorthand for the full range of characters between those two 
>> [endpoints] (inclusive) in the collating sequence".
>>
>> Yet, T is *not* between A and Z in the Estonian collating sequence:
>>
>> ?sort(LETTERS)
>> ?[1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" 
>> "Q" "R" "S"
>> [20] "Z" "T" "U" "V" "W" "X" "Y"
>>
>> ? I realize that this may be a question about TRE rather than about R 
>> *per se* (FWIW the grepl() result is also TRUE with `perl = TRUE`, so 
>> the question also applies to PCRE), but I'm wondering if anyone has 
>> any insights ...? (and yes, I know that the correct answer is "use 
>> [:alpha:] and don't worry about it")
> 
> The correct answer depends on what you want to do, but please see 
> ?regexp in R:
> 
> "Because their interpretation is locale- and implementation-dependent, 
> character ranges are best avoided."
> 
> and
> 
> "The only portable way to specify all ASCII letters is to list them all 
> as the character class
> ?[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]?."
> 
> This is from POSIX specification:
> 
> "In the POSIX locale, a range expression represents the set of collating 
> elements that fall between two elements in the collation sequence, 
> inclusive. In other locales, a range expression has unspecified 
> behavior: strictly conforming applications shall not rely on whether the 
> range expression is valid, or on the set of collating elements matched. 
> A range expression shall be expressed as the starting point and the 
> ending point separated by a <hyphen-minus> ( '-' )."
> 
> If you really want to know why the current implementation of R, TRE and 
> PCRE2 works in a certain way, you can check the code, but I don't think 
> it would be a good use of the time given what is written above.
> 
> It may be that TRE has a bug, maybe it doesn't do what was intended (see 
> comment "XXX - Should use collation order instead of encoding values in 
> character ranges." in the code), but I didn't check the code thoroughly.
> 
> Best
> Tomas
> 
>>
>> (In contrast, the ICU engine underlying stringi/stringr says "[t]he 
>> characters to include are determined by Unicode code point ordering" - 
>> see
>>
>> https://stackoverflow.com/questions/76365426/does-stringrs-regex-engine-translate-a-z-into-abcdefghijklmnopqrstuvwyz/76366163#76366163
>>
>> for links)
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Sat Jun  3 17:50:59 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Sat, 3 Jun 2023 11:50:59 -0400
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4 methods
Message-ID: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>

In a package, I define a method for not-yet-generic function 'qr.X' like so:

     > setOldClass("qr")
     > setMethod("qr.X", signature(qr = "qr"), function(qr, complete, ncol) NULL)

The formals of the newly generic 'qr.X' are inherited from the non-generic
function in the base namespace.  Notably, the inherited default value of
formal argument 'ncol' relies on lazy evaluation:

     > formals(qr.X)[["ncol"]]
     if (complete) nrow(R) else min(dim(R))

where 'R' must be defined in the body of any method that might evaluate 'ncol'.
To my surprise, tools:::.check_code_usage_in_package() complains about the
undefined symbol:

     qr.X: no visible binding for global variable 'R'
     qr.X,qr: no visible binding for global variable 'R'
     Undefined global functions or variables:
       R

I claim that it should _not_ complain, given that lazy evaluation is a really
a feature of the language _and_ given that it already does not complain about
the formals of functions that are not S4 methods.

Having said that, it is not obvious to me what in codetools would need to change
here.  Any ideas?

I've attached a script that creates and installs a test package and reproduces
the check output by calling tools:::.check_code_usage_in_package().  Hope it
gets through.

Mikael
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: TestPackage.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20230603/20664345/attachment.txt>

From bbo|ker @end|ng |rom gm@||@com  Sat Jun  3 19:06:41 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 3 Jun 2023 13:06:41 -0400
Subject: [Rd] infelicity in `na.print = ""` for numeric columns of data
 frames/formatting numeric values
Message-ID: <20d39a8a-95a3-523f-385e-18e767b2c89c@gmail.com>

   format(c(1:2, NA)) gives the last value as "NA" rather than 
preserving it as NA, even if na.encode = FALSE (which does the 
'expected' thing for character vectors, but not numeric vectors).

   This was already brought up in 2008 in 
https://bugs.r-project.org/show_bug.cgi?id=12318 where Gregor Gorjanc 
pointed out the issue. Documentation was added and the bug closed as 
invalid. GG ended with:

 > IMHO it would be better that na.encode argument would also have an
effect for numeric like vectors. Nearly any function in R returns NA 
values and I expected the same for format, at least when na.encode=FALSE.

   I agree!

   I encountered this in the context of printing a data frame with 
na.print = "", which works as expected when printing the individual 
columns but not when printing the whole data frame (because 
print.data.frame calls format.data.frame, which calls format.default 
...).  Example below.

   It's also different from what you would get if you converted to 
character before formatting and printing:

print(format(as.character(c(1:2, NA)), na.encode=FALSE), na.print ="")

   Everything about this is documented (if you look carefully enough), 
but IMO it violates the principle of least surprise 
https://en.wikipedia.org/wiki/Principle_of_least_astonishment , so I 
would call it at least an 'infelicity' (sensu Bill Venables)

   Is there any chance that this design decision could be revisited?

   cheers
    Ben Bolker


---

   Consider

dd <- data.frame(f = factor(1:2), c = as.character(1:2), n = 
as.numeric(1:2), i = 1:2)
dd[3,] <- rep(NA, 4)
print(dd, na.print = "")


print(dd, na.print = "")
   f c  n  i
1 1 1  1  1
2 2 2  2  2
3     NA NA

This is in fact as documented (see below), but seems suboptimal given 
that printing the columns separately with na.print = "" would 
successfully print the NA entries as blank even in the numeric columns:

invisible(lapply(dd, print, na.print = ""))
[1] 1 2
Levels: 1 2
[1] "1" "2"
[1] 1 2
[1] 1 2

* ?print.data.frame documents that it calls format() for each column 
before printing
* the code of print.data.frame() shows that it calls format.data.frame() 
with na.encode = FALSE
* ?format.data.frame specifically notes that na.encode "only applies to 
elements of character vectors, not to numerical, complex nor logical 
?NA?s, which are always encoded as ?"NA"?.

    So the NA values in the numeric columns become "NA" rather than 
remaining as NA values, and are thus printed rather than being affected 
by the na.print argument.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jun  5 15:27:16 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 5 Jun 2023 15:27:16 +0200
Subject: [Rd] infelicity in `na.print = ""` for numeric columns of data
 frames/formatting numeric values
In-Reply-To: <20d39a8a-95a3-523f-385e-18e767b2c89c@gmail.com>
References: <20d39a8a-95a3-523f-385e-18e767b2c89c@gmail.com>
Message-ID: <25725.58036.626708.216615@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Sat, 3 Jun 2023 13:06:41 -0400 writes:

    > format(c(1:2, NA)) gives the last value as "NA" rather than 
    > preserving it as NA, even if na.encode = FALSE (which does the 
    > 'expected' thing for character vectors, but not numeric vectors).

    > This was already brought up in 2008 in 
    > https://bugs.r-project.org/show_bug.cgi?id=12318 where Gregor Gorjanc 
    > pointed out the issue. Documentation was added and the bug closed as 
    > invalid. GG ended with:

    >> IMHO it would be better that na.encode argument would also have an
    > effect for numeric like vectors. Nearly any function in R returns NA 
    > values and I expected the same for format, at least when na.encode=FALSE.

    > I agree!

I do too, at least "in principle", keeping in mind that
backward compatibility is also an important principle ...

Not sure if the 'na.encode' argument should matter or possibly a
new optional argument, but "in principle" I think that

  format(c(1:2, NA, 4))

should preserve is.na(.) even by default.

    > I encountered this in the context of printing a data frame with 
    > na.print = "", which works as expected when printing the individual 
    > columns but not when printing the whole data frame (because 
    > print.data.frame calls format.data.frame, which calls format.default 
    > ...).  Example below.

    > It's also different from what you would get if you converted to 
    > character before formatting and printing:

    > print(format(as.character(c(1:2, NA)), na.encode=FALSE), na.print ="")

    > Everything about this is documented (if you look carefully enough), 
    > but IMO it violates the principle of least surprise 
    > https://en.wikipedia.org/wiki/Principle_of_least_astonishment , so I 
    > would call it at least an 'infelicity' (sensu Bill Venables)

    > Is there any chance that this design decision could be revisited?

We'd have to hear other opinions / gut feelings.

Also, someone (not me) would ideally volunteer to run
'R CMD check <pkg>' for a few 1000 (not necessarily all) CRAN &
BioC packages with an accordingly patched version of R-devel
(I might volunteer to create such a branch, e.g., a bit before the R
 Sprint 2023 end of August).


    > cheers
    > Ben Bolker


    > ---

The following issue you are raising
may really be a *different* one, as it involves format() and
print() methods for "data.frame", i.e.,

   format.data.frame() vs
    print.data.frame()

which is quite a bit related, of course, to how 'numeric'
columns are formatted -- as you note yourself below;
I vaguely recall that the data.frame method could be an even
"harder problem" .. but I don't remember the details.

It may also be that there are no changes necessary to the
*.data.frame() methods, and only the documentation (you mention)
should be updated ...

Martin

    > Consider

    > dd <- data.frame(f = factor(1:2), c = as.character(1:2), n = 
    > as.numeric(1:2), i = 1:2)
    > dd[3,] <- rep(NA, 4)
    > print(dd, na.print = "")


    > print(dd, na.print = "")
    >   f c  n  i
    > 1 1 1  1  1
    > 2 2 2  2  2
    > 3     NA NA

    > This is in fact as documented (see below), but seems suboptimal given 
    > that printing the columns separately with na.print = "" would 
    > successfully print the NA entries as blank even in the numeric columns:

    > invisible(lapply(dd, print, na.print = ""))
    > [1] 1 2
    > Levels: 1 2
    > [1] "1" "2"
    > [1] 1 2
    > [1] 1 2

    > * ?print.data.frame documents that it calls format() for each column 
    > before printing
    > * the code of print.data.frame() shows that it calls format.data.frame() 
    > with na.encode = FALSE
    > * ?format.data.frame specifically notes that na.encode "only applies to 
    > elements of character vectors, not to numerical, complex nor logical 
    > ?NA?s, which are always encoded as ?"NA"?.

    > So the NA values in the numeric columns become "NA" rather than 
    > remaining as NA values, and are thus printed rather than being affected 
    > by the na.print argument.

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Jun  5 19:02:32 2023
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 5 Jun 2023 19:02:32 +0200
Subject: [Rd] bug in utils:::format.person
In-Reply-To: <14e2ef8b-3fbc-806c-2e2d-fb1e61e857bd@uibk.ac.at>
References: <CAJuCY5zbzYooG+MX-b2-4Lm-=znQd4xiBe6Wh=akM7huP9AMxw@mail.gmail.com>
 <6ef2cf25-87f5-89ca-7383-dab77a9ea2c8@uibk.ac.at>
 <14e2ef8b-3fbc-806c-2e2d-fb1e61e857bd@uibk.ac.at>
Message-ID: <25726.5416.834614.682475@hornik.net>

>>>>> Achim Zeileis writes:

Thanks---Ivan's fix committed now with c84497.

Best
-k

> Apologies, I missed Ivan's fix to the problem (my day was too long...) 
> which is, of course, better than mine.

> On Sat, 3 Jun 2023, Achim Zeileis wrote:

>> Thierry,
>> 
>> thanks for this, this is a bug in utils:::.format_person_as_R_code(). This 
>> calls deparse() on the elements of the person object with the default 
>> width.cutoff = 60. As your comment exceeds this width, the erroneous 
>> formatting is produced. The simplest reproducible example I could come up 
>> with was:
>> 
>> p <- person(".", comment = c(foo = ".....................",
>> bar = "....................."))
>> writeLines(format(p, style = "R"))
>> 
>> This can be fixed in line 1017 of utils/R/citation.R either by increasing the 
>> width.cutoff, e.g.,
>> 
>> sprintf("%s = %s", names(e), sapply(e, deparse, width.cutoff = 500L))
>> 
>> but, of course, this still has an arbitrary cutoff. So maybe better
>> 
>> sprintf("%s = %s", names(e), sapply(e,
>> function(x) paste(deparse(x), collapse = "")))
>> 
>> which should work.
>> 
>> I'll ping Kurt about this and try to coordinate a fix.
>> 
>> Best wishes,
>> Achim
>> 
>> 
>> On Fri, 2 Jun 2023, Thierry Onkelinx via R-devel wrote:
>> 
>>> Dear all,
>>> 
>>> I think I found a bug in utils::format.person when using style = "R" with a
>>> vector of comments. The comment section is not parsed properly. Please find
>>> below the mwe and the session info.
>>> 
>>> Best regards,
>>> 
>>> Thierry
>>> 
>>> maintainer <- person(
>>> given = "Thierry", family = "Onkelinx", role = c("aut", "cre"),
>>> email = "thierry.onkelinx at inbo.be",
>>> comment = c(
>>> ORCID = "0000-0001-8804-4216",
>>> affiliation = "Research Institute for Nature and Forest (INBO)"
>>> )
>>> )
>>> format(maintainer, style = "R") |>
>>> cat(sep = "\n")
>>> # output
>>> person(given = "Thierry",
>>> family = "Onkelinx",
>>> role = c("aut", "cre"),
>>> email = "thierry.onkelinx at inbo.be",
>>> comment = c("c(ORCID = \"0000-0001-8804-4216\", affiliation =
>>> \"Research Institute for Nature and Forest (INBO)\"", ")"))
>>> 
>>> ? Session info
>>> ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>>> setting  value
>>> version  R version 4.3.0 (2023-04-21)
>>> os       Ubuntu 22.04.2 LTS
>>> system   x86_64, linux-gnu
>>> ui       X11
>>> language nl_BE:nl
>>> collate  nl_BE.UTF-8
>>> ctype    nl_BE.UTF-8
>>> tz       Europe/Brussels
>>> date     2023-06-02
>>> pandoc   NA
>>> 
>>> ? Packages
>>> ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>>> package     * version date (UTC) lib source
>>> cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)
>>> fortunes      1.5-4   2016-12-29 [1] CRAN (R 4.3.0)
>>> sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)
>>> 
>>> 
>>> 
>>> ir. Thierry Onkelinx
>>> Statisticus / Statistician
>>> 
>>> Vlaamse Overheid / Government of Flanders
>>> INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
>>> FOREST
>>> Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
>>> thierry.onkelinx at inbo.be
>>> Havenlaan 88 bus 73, 1000 Brussel
>>> www.inbo.be
>>> 
>>> ///////////////////////////////////////////////////////////////////////////////////////////
>>> To call in the statistician after the experiment is done may be no more
>>> than asking him to perform a post-mortem examination: he may be able to say
>>> what the experiment died of. ~ Sir Ronald Aylmer Fisher
>>> The plural of anecdote is not data. ~ Roger Brinner
>>> The combination of some data and an aching desire for an answer does not
>>> ensure that a reasonable answer can be extracted from a given body of data.
>>> ~ John Tukey
>>> ///////////////////////////////////////////////////////////////////////////////////////////
>>> 
>>> <https://www.inbo.be>
>>> 
>>> [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Mon Jun  5 19:27:19 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 5 Jun 2023 13:27:19 -0400
Subject: [Rd] infelicity in `na.print = ""` for numeric columns of data
 frames/formatting numeric values
In-Reply-To: <25725.58036.626708.216615@stat.math.ethz.ch>
References: <20d39a8a-95a3-523f-385e-18e767b2c89c@gmail.com>
 <25725.58036.626708.216615@stat.math.ethz.ch>
Message-ID: <94ab73d2-25c7-e7d0-9fb5-ee69a9be6116@gmail.com>



On 2023-06-05 9:27 a.m., Martin Maechler wrote:
>>>>>> Ben Bolker
>>>>>>      on Sat, 3 Jun 2023 13:06:41 -0400 writes:
> 
>      > format(c(1:2, NA)) gives the last value as "NA" rather than
>      > preserving it as NA, even if na.encode = FALSE (which does the
>      > 'expected' thing for character vectors, but not numeric vectors).
> 
>      > This was already brought up in 2008 in
>      > https://bugs.r-project.org/show_bug.cgi?id=12318 where Gregor Gorjanc
>      > pointed out the issue. Documentation was added and the bug closed as
>      > invalid. GG ended with:
> 
>      >> IMHO it would be better that na.encode argument would also have an
>      > effect for numeric like vectors. Nearly any function in R returns NA
>      > values and I expected the same for format, at least when na.encode=FALSE.
> 
>      > I agree!
> 
> I do too, at least "in principle", keeping in mind that
> backward compatibility is also an important principle ...
> 
> Not sure if the 'na.encode' argument should matter or possibly a
> new optional argument, but "in principle" I think that
> 
>    format(c(1:2, NA, 4))
> 
> should preserve is.na(.) even by default.

    I would say it should preserve `is.na` *only* if na.encode = FALSE - 
that seems like the minimal appropriate change away from the current 
behaviour.

> 
>      > I encountered this in the context of printing a data frame with
>      > na.print = "", which works as expected when printing the individual
>      > columns but not when printing the whole data frame (because
>      > print.data.frame calls format.data.frame, which calls format.default
>      > ...).  Example below.
> 
>      > It's also different from what you would get if you converted to
>      > character before formatting and printing:
> 
>      > print(format(as.character(c(1:2, NA)), na.encode=FALSE), na.print ="")
> 
>      > Everything about this is documented (if you look carefully enough),
>      > but IMO it violates the principle of least surprise
>      > https://en.wikipedia.org/wiki/Principle_of_least_astonishment , so I
>      > would call it at least an 'infelicity' (sensu Bill Venables)
> 
>      > Is there any chance that this design decision could be revisited?
> 
> We'd have to hear other opinions / gut feelings.
> 
> Also, someone (not me) would ideally volunteer to run
> 'R CMD check <pkg>' for a few 1000 (not necessarily all) CRAN &
> BioC packages with an accordingly patched version of R-devel
> (I might volunteer to create such a branch, e.g., a bit before the R
>   Sprint 2023 end of August).

   I might be willing to do that, although it would be nice if there 
were a pre-existing framework (analogous to r-lib/revdepcheck) for 
automating it and collecting the results ...


> 
> 
>      > cheers
>      > Ben Bolker
> 
> 
>      > ---
> 
> The following issue you are raising
> may really be a *different* one, as it involves format() and
> print() methods for "data.frame", i.e.,
> 
>     format.data.frame() vs
>      print.data.frame()
> 
> which is quite a bit related, of course, to how 'numeric'
> columns are formatted -- as you note yourself below;
> I vaguely recall that the data.frame method could be an even
> "harder problem" .. but I don't remember the details.
> 
> It may also be that there are no changes necessary to the
> *.data.frame() methods, and only the documentation (you mention)
> should be updated ...


   I *think* that if format.default() were changed so that 
na.encode=FALSE also applied to numeric types, then data frame printing 
would naturally work 'right' (since print.data.frame calls 
format.data.frame which calls format() for the individual columns 
specifying encode=FALSE ...)
> 
> Martin
> 
>      > Consider
> 
>      > dd <- data.frame(f = factor(1:2), c = as.character(1:2), n =
>      > as.numeric(1:2), i = 1:2)
>      > dd[3,] <- rep(NA, 4)
>      > print(dd, na.print = "")
> 
> 
>      > print(dd, na.print = "")
>      >   f c  n  i
>      > 1 1 1  1  1
>      > 2 2 2  2  2
>      > 3     NA NA
> 
>      > This is in fact as documented (see below), but seems suboptimal given
>      > that printing the columns separately with na.print = "" would
>      > successfully print the NA entries as blank even in the numeric columns:
> 
>      > invisible(lapply(dd, print, na.print = ""))
>      > [1] 1 2
>      > Levels: 1 2
>      > [1] "1" "2"
>      > [1] 1 2
>      > [1] 1 2
> 
>      > * ?print.data.frame documents that it calls format() for each column
>      > before printing
>      > * the code of print.data.frame() shows that it calls format.data.frame()
>      > with na.encode = FALSE
>      > * ?format.data.frame specifically notes that na.encode "only applies to
>      > elements of character vectors, not to numerical, complex nor logical
>      > ?NA?s, which are always encoded as ?"NA"?.
> 
>      > So the NA values in the numeric columns become "NA" rather than
>      > remaining as NA values, and are thus printed rather than being affected
>      > by the na.print argument.
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel


From peter@me||@trup @end|ng |rom gm@||@com  Tue Jun  6 06:34:37 2023
From: peter@me||@trup @end|ng |rom gm@||@com (Peter Meilstrup)
Date: Mon, 5 Jun 2023 21:34:37 -0700
Subject: [Rd] readLines() fails on non-blocking connections when
 encoding="UTF-8" or encoding="ASCII"
Message-ID: <CAJoaRhbts3J=CB10PgTHpVPhhoi1mG1BPsBaF8pV7rVz+9P63g@mail.gmail.com>

Hello R-devel,

I have been trying to wrap my head around non-blocking connections and
have not been having them behave as advertised.

The issue I am having is that readLines() gets "stuck." If it reaches
the end of a stream once, it does not ever return any more data, even
when more is available on the stream. It turns out this behavior
happens when I specify encoding="ASCII" or encoding="UTF-8". However
things behave more as expected if I use encoding="native.enc".

The following code demonstrates what is happening, using socket
connections. I also observe this behavior for fifo() and
file(blocking=FALSE) connections:

sock <- serverSocket(45678)
# encoding="native.enc" works; encoding="UTF-8" fails; encoding="ASCII" fails
outgoing <- socketConnection("localhost", 45678, encoding="UTF-8")
incoming <- socketAccept(sock, encoding="UTF-8")
writeLines("hello", outgoing)
flush(outgoing)
readLines(incoming, 1) # "hello"
readLines(incoming, 1) # character(0)
writeLines("again", outgoing)
flush(outgoing)
socketSelect(list(incoming)) #TRUE
readLines(incoming, 1) # I get character(0) (incorrect)
socketSelect(list(incoming), timeout=0) #TRUE, so there is still data?
writeLines("again", outgoing)
writeLines("again", outgoing)
flush(outgoing)
readLines(incoming, 1) # character(0)
isIncomplete(incoming) # FALSE, which also seems wrong bc there is unread data?
readChar(incoming, 100) # "again\nagain\nagain\n", so readChar saw
what readLines() did not
close(incoming)
close(outgoing)
close(sock)

I have observed this with recent versions of R installed on Debian and
OSX. I also found a report of similar behavior from 2018:

https://stat.ethz.ch/pipermail/r-devel/2018-April/075883.html

Note that that report did not mention encodings being an issue;
perhaps the original bug was fixed for native encoding only?

Peter Meilstrup


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Jun  6 13:03:24 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 6 Jun 2023 14:03:24 +0300
Subject: [Rd] readLines() fails on non-blocking connections when
 encoding="UTF-8" or encoding="ASCII"
In-Reply-To: <CAJoaRhbts3J=CB10PgTHpVPhhoi1mG1BPsBaF8pV7rVz+9P63g@mail.gmail.com>
References: <CAJoaRhbts3J=CB10PgTHpVPhhoi1mG1BPsBaF8pV7rVz+9P63g@mail.gmail.com>
Message-ID: <20230606140324.333e92bb@arachnoid>

? Mon, 5 Jun 2023 21:34:37 -0700
Peter Meilstrup <peter.meilstrup at gmail.com> ?????:

> socketSelect(list(incoming)) #TRUE
> readLines(incoming, 1) # I get character(0) (incorrect)

> readChar(incoming, 100)
> # "again\nagain\nagain\n", so readChar saw what readLines() did not

The difference turns out to be that readChar() uses con->read
in order to get data from the connection, which resolves to sock_read,
which does the right thing.

readLines(), on the other hand, uses Rconn_fgetc, which (naturally)
calls con->fgetc, which turns out to be dummy_fgetc for this connection.

The dummy_fgetc function checks whether the current connection has an
encoding translation layer active (a non-null iconv context in
con->inconv). If it does exist, a check for con->EOF_signalled is
eventually performed, returning R_EOF without trying to read more data
from the connection if the flag is set. This means that once a read
operation fails, Rconn_fgetc will keep returning EOF, even if some data
later appears on the wire.

As far as I can tell, con->EOF_signalled is only used by dummy_fgetc,
and it needs to be there in order to avoid an infinite loop where the
connection is actually at EOF (so con->navail will always be <= 0). But
should it be persistent? Can we make the flag local to a given
invocation of dummy_fgetc?

With the following patch, the problem seems to go away without causing
any `make check` failures:

--- src/main/connections.c	(revision 84506)
+++ src/main/connections.c	(working copy)
@@ -533,6 +533,7 @@
     Rboolean checkBOM = FALSE, checkBOM8 = FALSE;
 
     if(con->inconv) {
+	con->EOF_signalled = FALSE;
 	while(con->navail <= 0) {
 	    /* Probably in all cases there will be at most one iteration
 	       of the loop. It could iterate multiple times only if
 	       the input

But in that case, it seems to be possible to move EOF_signalled out of
the connection structure:

--- src/include/R_ext/Connections.h	(revision 84506)
+++ src/include/R_ext/Connections.h	(working copy)
@@ -74,7 +74,6 @@
     /* The idea here is that no MBCS char will ever not fit */
     char iconvbuff[25], oconvbuff[50], *next, init_out[25];
     short navail, inavail;
-    Rboolean EOF_signalled;
     Rboolean UTF8out;
     void *id;
     void *ex_ptr;
--- src/main/connections.c	(revision 84506)
+++ src/main/connections.c	(working copy)
@@ -400,7 +400,6 @@
 	tmp = Riconv_open(useUTF8 ? "UTF-8" : "", enc);
 	if(tmp != (void *)-1) con->inconv = tmp;
 	else set_iconv_error(con, con->encname, useUTF8 ? "UTF-8" : "");
-	con->EOF_signalled = FALSE;
 	/* initialize state, and prepare any initial bytes */
 	Riconv(tmp, NULL, NULL, &ob, &onb);
 	con->navail = (short)(50-onb); con->inavail = 0;
@@ -533,6 +532,7 @@
     Rboolean checkBOM = FALSE, checkBOM8 = FALSE;
 
     if(con->inconv) {
+	Rboolean EOF_signalled = FALSE;
 	while(con->navail <= 0) {
 	    /* Probably in all cases there will be at most one iteration
 	       of the loop. It could iterate multiple times only if the input
@@ -544,7 +544,7 @@
 	    const char *ib;
 	    size_t inb, onb, res;
 
-	    if(con->EOF_signalled) return R_EOF;
+	    if(EOF_signalled) return R_EOF;
 	    if(con->inavail == -2) {
 		con->inavail = 0;
 		checkBOM = TRUE;
@@ -559,7 +559,7 @@
 		    c = buff_fgetc(con);
 		else
 		    c = con->fgetc_internal(con);
-		if(c == R_EOF){ con->EOF_signalled = TRUE; break; }
+		if(c == R_EOF){ EOF_signalled = TRUE; break; }
 		*p++ = (char) c;
 		con->inavail++;
 		inew++;
@@ -600,7 +600,7 @@
 			    con->description);
 		    con->inavail = 0;
 		    if (con->navail == 0) return R_EOF;
-		    con->EOF_signalled = TRUE;
+		    EOF_signalled = TRUE;
 		}
 	    }
 	}

Again, no apparent `make check` failures. Am I introducing a
performance problem? A breaking API change?

-- 
Best regards,
Ivan


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Wed Jun  7 10:06:38 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Wed, 7 Jun 2023 10:06:38 +0200
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
Message-ID: <c48ac4d5-4464-f040-cc2d-6fefa6f02f57@insa-toulouse.fr>

Le 03/06/2023 ? 17:50, Mikael Jagan a ?crit?:
> In a package, I define a method for not-yet-generic function 'qr.X' 
> like so:
>
> ??? > setOldClass("qr")
> ??? > setMethod("qr.X", signature(qr = "qr"), function(qr, complete, 
> ncol) NULL)
>
> The formals of the newly generic 'qr.X' are inherited from the 
> non-generic
> function in the base namespace.? Notably, the inherited default value of
> formal argument 'ncol' relies on lazy evaluation:
>
> ??? > formals(qr.X)[["ncol"]]
> ??? if (complete) nrow(R) else min(dim(R))
>
> where 'R' must be defined in the body of any method that might 
> evaluate 'ncol'.
> To my surprise, tools:::.check_code_usage_in_package() complains about 
> the
> undefined symbol:
>
> ??? qr.X: no visible binding for global variable 'R'
> ??? qr.X,qr: no visible binding for global variable 'R'
> ??? Undefined global functions or variables:
> ????? R
I think this issue is similar to the complaints about non defined 
variables in expressions involving non standard evaluation, e.g. column 
names in a data frame which are used as unquoted symbols. One of 
workarounds is simply to declare them somewhere in your code. In your 
case, it could be something as simple as:

 ? R=NULL

Best,
Serguei.

>
> I claim that it should _not_ complain, given that lazy evaluation is a 
> really
> a feature of the language _and_ given that it already does not 
> complain about
> the formals of functions that are not S4 methods.
>
> Having said that, it is not obvious to me what in codetools would need 
> to change
> here.? Any ideas?
>
> I've attached a script that creates and installs a test package and 
> reproduces
> the check output by calling tools:::.check_code_usage_in_package().? 
> Hope it
> gets through.
>
> Mikael
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Wed Jun  7 11:13:16 2023
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 7 Jun 2023 02:13:16 -0700
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <c48ac4d5-4464-f040-cc2d-6fefa6f02f57@insa-toulouse.fr>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <c48ac4d5-4464-f040-cc2d-6fefa6f02f57@insa-toulouse.fr>
Message-ID: <CAD4oTHFTi3SF0g-qEcA8R7YePQ6dZG+7-D7M7TMu7FgB9j-UWQ@mail.gmail.com>

The API supported workaround is to call globalVariables, which,
essentially, declares the variables without defining them (a distinction R
does not usually make).

The issue with this approach, of course, is that its a very blunt
instrument. It will cause false negatives if you accidentally use the same
symbol in a standard evaluation context elsewhere in your code.
Nonetheless, that's the intended approach as far as i know.

Best,
~G



On Wed, Jun 7, 2023 at 1:07?AM Serguei Sokol via R-devel <
r-devel at r-project.org> wrote:

> Le 03/06/2023 ? 17:50, Mikael Jagan a ?crit :
> > In a package, I define a method for not-yet-generic function 'qr.X'
> > like so:
> >
> >     > setOldClass("qr")
> >     > setMethod("qr.X", signature(qr = "qr"), function(qr, complete,
> > ncol) NULL)
> >
> > The formals of the newly generic 'qr.X' are inherited from the
> > non-generic
> > function in the base namespace.  Notably, the inherited default value of
> > formal argument 'ncol' relies on lazy evaluation:
> >
> >     > formals(qr.X)[["ncol"]]
> >     if (complete) nrow(R) else min(dim(R))
> >
> > where 'R' must be defined in the body of any method that might
> > evaluate 'ncol'.
> > To my surprise, tools:::.check_code_usage_in_package() complains about
> > the
> > undefined symbol:
> >
> >     qr.X: no visible binding for global variable 'R'
> >     qr.X,qr: no visible binding for global variable 'R'
> >     Undefined global functions or variables:
> >       R
> I think this issue is similar to the complaints about non defined
> variables in expressions involving non standard evaluation, e.g. column
> names in a data frame which are used as unquoted symbols. One of
> workarounds is simply to declare them somewhere in your code. In your
> case, it could be something as simple as:
>
>    R=NULL
>
> Best,
> Serguei.
>
> >
> > I claim that it should _not_ complain, given that lazy evaluation is a
> > really
> > a feature of the language _and_ given that it already does not
> > complain about
> > the formals of functions that are not S4 methods.
> >
> > Having said that, it is not obvious to me what in codetools would need
> > to change
> > here.  Any ideas?
> >
> > I've attached a script that creates and installs a test package and
> > reproduces
> > the check output by calling tools:::.check_code_usage_in_package().
> > Hope it
> > gets through.
> >
> > Mikael
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From j@g@nmn2 @end|ng |rom gm@||@com  Mon Jun 12 19:55:16 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 12 Jun 2023 13:55:16 -0400
Subject: [Rd] Rd macros are not expanded inside of \eqn{} or \deqn{}
Message-ID: <98fe9032-aa03-60f0-841f-29812031071c@gmail.com>

I was a bit surprised to learn that, if one has an Rd file as below:

     %% zzz.Rd
     \newcommand{\zzz}{whatever}
     \name{zzz}
     \title{zzz}
     \description{ \zzz{} \eqn{\zzz{}} \deqn{\zzz{}} }

then the macro is _not_ expanded inside of \eqn{} or \deqn{} when parsed to text
or HTML.  Is this behaviour intentional?  Could it be changed?  Inside of \eqn{}
and \deqn{} is where I am _most_ likely to want to use macros, at least since
R 4.2.0, which added KaTeX support ...

See output pasted below.

Mikael

 > tools::Rd2txt(tools::parse_Rd("zzz.Rd"))
zzz

Description:

      whatever \zzz{}

                                    \zzz{}

 > tools::Rd2HTML(tools::parse_Rd("zzz.Rd"))
<!DOCTYPE html><html><head><title>R: zzz</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, 
user-scalable=yes" />
<link rel="stylesheet" 
href="https://cdn.jsdelivr.net/npm/katex at 0.15.3/dist/katex.min.css">
<script type="text/javascript">
const macros = { "\\R": "\\textsf{R}", "\\code": "\\texttt"};
function processMathHTML() {
     var l = document.getElementsByClassName('reqn');
     for (let e of l) { katex.render(e.textContent, e, { throwOnError: false, 
macros }); }
     return;
}</script>
<script defer src="https://cdn.jsdelivr.net/npm/katex at 0.15.3/dist/katex.min.js"
     onload="processMathHTML();"></script>
<link rel="stylesheet" type="text/css" href="R.css" />
</head><body><div class="container">

<table style="width: 100%;"><tr><td>zzz</td><td style="text-align: right;">R 
Documentation</td></tr></table>

<h2 id='zzz'>zzz</h2>

<h3>Description</h3>

  <p>whatever <code class="reqn">\zzz{}</code> </p>
<p style="text-align: center;"><code class="reqn">\zzz{}</code>
</p>


</div>
</body></html>


From j@g@nmn2 @end|ng |rom gm@||@com  Mon Jun 12 20:03:57 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 12 Jun 2023 14:03:57 -0400
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <CAD4oTHFTi3SF0g-qEcA8R7YePQ6dZG+7-D7M7TMu7FgB9j-UWQ@mail.gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <c48ac4d5-4464-f040-cc2d-6fefa6f02f57@insa-toulouse.fr>
 <CAD4oTHFTi3SF0g-qEcA8R7YePQ6dZG+7-D7M7TMu7FgB9j-UWQ@mail.gmail.com>
Message-ID: <d3fc634f-a952-8637-daae-bc1427c32b9d@gmail.com>

Thanks both.  Yes, I was aware of globalVariables, etc.  I guess I was hoping
to be pointed to the right place in the source code, in case the issue could
be addressed properly, notably as it seems to have already been addressed for
functions that are not S4 methods, i.e., codetools is apparently not bothered
by

     def <- function(x = y) { y <- 0; x }

but still complains about

     setMethod("someGeneric", "someClass", def)

...

Mikael

On 2023-06-07 5:13 am, Gabriel Becker wrote:
> The API supported workaround is to call globalVariables, which,
> essentially, declares the variables without defining them (a distinction R
> does not usually make).
> 
> The issue with this approach, of course, is that its a very blunt
> instrument. It will cause false negatives if you accidentally use the same
> symbol in a standard evaluation context elsewhere in your code.
> Nonetheless, that's the intended approach as far as i know.
> 
> Best,
> ~G
> 
> 
> 
> On Wed, Jun 7, 2023 at 1:07?AM Serguei Sokol via R-devel <
> r-devel at r-project.org> wrote:
> 
>> Le 03/06/2023 ? 17:50, Mikael Jagan a ?crit :
>>> In a package, I define a method for not-yet-generic function 'qr.X'
>>> like so:
>>>
>>>      > setOldClass("qr")
>>>      > setMethod("qr.X", signature(qr = "qr"), function(qr, complete,
>>> ncol) NULL)
>>>
>>> The formals of the newly generic 'qr.X' are inherited from the
>>> non-generic
>>> function in the base namespace.  Notably, the inherited default value of
>>> formal argument 'ncol' relies on lazy evaluation:
>>>
>>>      > formals(qr.X)[["ncol"]]
>>>      if (complete) nrow(R) else min(dim(R))
>>>
>>> where 'R' must be defined in the body of any method that might
>>> evaluate 'ncol'.
>>> To my surprise, tools:::.check_code_usage_in_package() complains about
>>> the
>>> undefined symbol:
>>>
>>>      qr.X: no visible binding for global variable 'R'
>>>      qr.X,qr: no visible binding for global variable 'R'
>>>      Undefined global functions or variables:
>>>        R
>> I think this issue is similar to the complaints about non defined
>> variables in expressions involving non standard evaluation, e.g. column
>> names in a data frame which are used as unquoted symbols. One of
>> workarounds is simply to declare them somewhere in your code. In your
>> case, it could be something as simple as:
>>
>>     R=NULL
>>
>> Best,
>> Serguei.
>>
>>>
>>> I claim that it should _not_ complain, given that lazy evaluation is a
>>> really
>>> a feature of the language _and_ given that it already does not
>>> complain about
>>> the formals of functions that are not S4 methods.
>>>
>>> Having said that, it is not obvious to me what in codetools would need
>>> to change
>>> here.  Any ideas?
>>>
>>> I've attached a script that creates and installs a test package and
>>> reproduces
>>> the check output by calling tools:::.check_code_usage_in_package().
>>> Hope it
>>> gets through.
>>>
>>> Mikael
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jun 12 20:19:44 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 12 Jun 2023 14:19:44 -0400
Subject: [Rd] Rd macros are not expanded inside of \eqn{} or \deqn{}
In-Reply-To: <98fe9032-aa03-60f0-841f-29812031071c@gmail.com>
References: <98fe9032-aa03-60f0-841f-29812031071c@gmail.com>
Message-ID: <660808d5-c2c5-f810-c848-541bc124209c@gmail.com>

A description of the format is given in this document:

   https://developer.r-project.org/parseRd.pdf

As far as I know that document is still up to date.  As it says in Table 
3, \eqn and \deqn take "Verbatim" arguments.  That mode is described in 
the introduction to Section 2; it contains text and comments, so by 
design no macros are expanded.

I think it's unlikely that this would change.  The problem is that the 
equation markup can contain LaTeX macros.  So the parser would have to 
have a new mode where it distinguished between LaTeX macros and Rd 
macros.  But then how would you write true verbatim text, where you're 
trying to discuss the macros?  It gets complicated very quickly.

What you could conceivably do is write your own macro that passed its 
content to R code that expanded your user-defined macros. It sounds 
complicated, and would probably be hard to get right.

Duncan Murdoch

On 12/06/2023 1:55 p.m., Mikael Jagan wrote:
> I was a bit surprised to learn that, if one has an Rd file as below:
> 
>       %% zzz.Rd
>       \newcommand{\zzz}{whatever}
>       \name{zzz}
>       \title{zzz}
>       \description{ \zzz{} \eqn{\zzz{}} \deqn{\zzz{}} }
> 
> then the macro is _not_ expanded inside of \eqn{} or \deqn{} when parsed to text
> or HTML.  Is this behaviour intentional?  Could it be changed?  Inside of \eqn{}
> and \deqn{} is where I am _most_ likely to want to use macros, at least since
> R 4.2.0, which added KaTeX support ...
> 
> See output pasted below.
> 
> Mikael
> 
>   > tools::Rd2txt(tools::parse_Rd("zzz.Rd"))
> zzz
> 
> Description:
> 
>        whatever \zzz{}
> 
>                                      \zzz{}
> 
>   > tools::Rd2HTML(tools::parse_Rd("zzz.Rd"))
> <!DOCTYPE html><html><head><title>R: zzz</title>
> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
> <meta name="viewport" content="width=device-width, initial-scale=1.0,
> user-scalable=yes" />
> <link rel="stylesheet"
> href="https://cdn.jsdelivr.net/npm/katex at 0.15.3/dist/katex.min.css">
> <script type="text/javascript">
> const macros = { "\\R": "\\textsf{R}", "\\code": "\\texttt"};
> function processMathHTML() {
>       var l = document.getElementsByClassName('reqn');
>       for (let e of l) { katex.render(e.textContent, e, { throwOnError: false,
> macros }); }
>       return;
> }</script>
> <script defer src="https://cdn.jsdelivr.net/npm/katex at 0.15.3/dist/katex.min.js"
>       onload="processMathHTML();"></script>
> <link rel="stylesheet" type="text/css" href="R.css" />
> </head><body><div class="container">
> 
> <table style="width: 100%;"><tr><td>zzz</td><td style="text-align: right;">R
> Documentation</td></tr></table>
> 
> <h2 id='zzz'>zzz</h2>
> 
> <h3>Description</h3>
> 
>    <p>whatever <code class="reqn">\zzz{}</code> </p>
> <p style="text-align: center;"><code class="reqn">\zzz{}</code>
> </p>
> 
> 
> </div>
> </body></html>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jun 12 20:42:32 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 12 Jun 2023 14:42:32 -0400
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <d3fc634f-a952-8637-daae-bc1427c32b9d@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <c48ac4d5-4464-f040-cc2d-6fefa6f02f57@insa-toulouse.fr>
 <CAD4oTHFTi3SF0g-qEcA8R7YePQ6dZG+7-D7M7TMu7FgB9j-UWQ@mail.gmail.com>
 <d3fc634f-a952-8637-daae-bc1427c32b9d@gmail.com>
Message-ID: <1cd9092f-a21d-e3f0-48b3-445c8b13bd2d@gmail.com>

Most of the errors, warnings and notes generated by R CMD check are 
generated by code in the tools package, usually in the tools/R/QC.R 
source file.  Search that file for the error message, then backtrack to 
find the code that causes it to be triggered.

If I recall correctly, it works on the evaluated source rather than the 
actual source, so it will only see the result of evaluating `setMethod` 
in your example.  I don't know the methods package well enough to know 
exactly what that does, but presumably it produces a function and hides 
it somewhere so that the S4 dispatch can find it when it needs to.

Duncan Murdoch

On 12/06/2023 2:03 p.m., Mikael Jagan wrote:
> Thanks both.  Yes, I was aware of globalVariables, etc.  I guess I was hoping
> to be pointed to the right place in the source code, in case the issue could
> be addressed properly, notably as it seems to have already been addressed for
> functions that are not S4 methods, i.e., codetools is apparently not bothered
> by
> 
>       def <- function(x = y) { y <- 0; x }
> 
> but still complains about
> 
>       setMethod("someGeneric", "someClass", def)
> 
> ...
> 
> Mikael
> 
> On 2023-06-07 5:13 am, Gabriel Becker wrote:
>> The API supported workaround is to call globalVariables, which,
>> essentially, declares the variables without defining them (a distinction R
>> does not usually make).
>>
>> The issue with this approach, of course, is that its a very blunt
>> instrument. It will cause false negatives if you accidentally use the same
>> symbol in a standard evaluation context elsewhere in your code.
>> Nonetheless, that's the intended approach as far as i know.
>>
>> Best,
>> ~G
>>
>>
>>
>> On Wed, Jun 7, 2023 at 1:07?AM Serguei Sokol via R-devel <
>> r-devel at r-project.org> wrote:
>>
>>> Le 03/06/2023 ? 17:50, Mikael Jagan a ?crit :
>>>> In a package, I define a method for not-yet-generic function 'qr.X'
>>>> like so:
>>>>
>>>>       > setOldClass("qr")
>>>>       > setMethod("qr.X", signature(qr = "qr"), function(qr, complete,
>>>> ncol) NULL)
>>>>
>>>> The formals of the newly generic 'qr.X' are inherited from the
>>>> non-generic
>>>> function in the base namespace.  Notably, the inherited default value of
>>>> formal argument 'ncol' relies on lazy evaluation:
>>>>
>>>>       > formals(qr.X)[["ncol"]]
>>>>       if (complete) nrow(R) else min(dim(R))
>>>>
>>>> where 'R' must be defined in the body of any method that might
>>>> evaluate 'ncol'.
>>>> To my surprise, tools:::.check_code_usage_in_package() complains about
>>>> the
>>>> undefined symbol:
>>>>
>>>>       qr.X: no visible binding for global variable 'R'
>>>>       qr.X,qr: no visible binding for global variable 'R'
>>>>       Undefined global functions or variables:
>>>>         R
>>> I think this issue is similar to the complaints about non defined
>>> variables in expressions involving non standard evaluation, e.g. column
>>> names in a data frame which are used as unquoted symbols. One of
>>> workarounds is simply to declare them somewhere in your code. In your
>>> case, it could be something as simple as:
>>>
>>>      R=NULL
>>>
>>> Best,
>>> Serguei.
>>>
>>>>
>>>> I claim that it should _not_ complain, given that lazy evaluation is a
>>>> really
>>>> a feature of the language _and_ given that it already does not
>>>> complain about
>>>> the formals of functions that are not S4 methods.
>>>>
>>>> Having said that, it is not obvious to me what in codetools would need
>>>> to change
>>>> here.  Any ideas?
>>>>
>>>> I've attached a script that creates and installs a test package and
>>>> reproduces
>>>> the check output by calling tools:::.check_code_usage_in_package().
>>>> Hope it
>>>> gets through.
>>>>
>>>> Mikael
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Jun 13 10:23:23 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 13 Jun 2023 11:23:23 +0300
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
Message-ID: <20230613112323.4a0b5e35@Tarkus>

On Sat, 3 Jun 2023 11:50:59 -0400
Mikael Jagan <jaganmn2 at gmail.com> wrote:

>      > setOldClass("qr")
>      > setMethod("qr.X", signature(qr = "qr"), function(qr, complete,
>      > ncol) NULL)  
> 
> The formals of the newly generic 'qr.X' are inherited from the
> non-generic function in the base namespace.  Notably, the inherited
> default value of formal argument 'ncol' relies on lazy evaluation:
> 
>      > formals(qr.X)[["ncol"]]  
>      if (complete) nrow(R) else min(dim(R))
> 
> where 'R' must be defined in the body of any method that might
> evaluate 'ncol'. To my surprise,
> tools:::.check_code_usage_in_package() complains about the undefined
> symbol:
> 
>      qr.X: no visible binding for global variable 'R'
>      qr.X,qr: no visible binding for global variable 'R'
>      Undefined global functions or variables:
>        R

In other words, codetools::checkUsage(base::qr.X) says nothing while
codetools::checkUsage(TestPackage::qr.X) complains. I think the
difference is that codetools::findFuncLocals sees an assignment to `R`
in the body of base::qr.X:

codetools::findFuncLocals(formals(base::qr.X), body(base::qr.X))
# [1] "cmplx"   "cn"      "ip"      "p"       "pivoted" "R"       "res"
# [8] "tmp"    

The problem, then, is that an S4 generic shouldn't be having such
assignments in its body. One way to fix this would be to modify
codetools::checkUsage to immediately return if inherits(fun,
'standardGeneric'), but I don't know enough about S4 to say whether
this is safe. (A more comprehensive fix would be to check every
encountered method against the formals of the generic, but that sounds
complicated.) Arguably, static analysis will always be wrong about
something, so we're trading a false positive for potential false
negatives.

-- 
Best regards,
Ivan


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Tue Jun 13 20:03:08 2023
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Tue, 13 Jun 2023 14:03:08 -0400
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
Message-ID: <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>

On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan <jaganmn2 at gmail.com> wrote:

> The formals of the newly generic 'qr.X' are inherited from the non-generic
> function in the base namespace.  Notably, the inherited default value of
> formal argument 'ncol' relies on lazy evaluation:
>
>      > formals(qr.X)[["ncol"]]
>      if (complete) nrow(R) else min(dim(R))
>
> where 'R' must be defined in the body of any method that might evaluate
> 'ncol'.
>

Perhaps I am misunderstanding something, but I think Mikael's expectations
about the scoping rules of R are wrong.  The enclosing environment of ncol
is where it was _defined_ not where it is _called_ (apologies if I am
messing up the computer science terminology here).

This suggests to me that codetools is right.  But a more extended example
would be useful. Perhaps there is something special with setOldClass()
which I am no aware of.

Also, Bioconductor has 100s of packages with S4 where codetools works well.

Kasper

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun 14 02:01:04 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 14 Jun 2023 12:01:04 +1200
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
Message-ID: <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>

I agree that this is not an R issue, but rather user error of not defining a proper generic so the check is right. Obviously, defining a generic with implementation-specific ncol default makes no sense at all, it should only be part of the method implementation. If one was to implement the same default behavior in the generic itself (not necessarily a good idea) the default would be ncol = if (complete) nrow(qr.R(qr, TRUE)) else min(dim(qr.R(qr, TRUE))) to not rely on the internals of the implementation.

Cheers,
Simon


> On 14/06/2023, at 6:03 AM, Kasper Daniel Hansen <kasperdanielhansen at gmail.com> wrote:
> 
> On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan <jaganmn2 at gmail.com> wrote:
> 
>> The formals of the newly generic 'qr.X' are inherited from the non-generic
>> function in the base namespace.  Notably, the inherited default value of
>> formal argument 'ncol' relies on lazy evaluation:
>> 
>>> formals(qr.X)[["ncol"]]
>>     if (complete) nrow(R) else min(dim(R))
>> 
>> where 'R' must be defined in the body of any method that might evaluate
>> 'ncol'.
>> 
> 
> Perhaps I am misunderstanding something, but I think Mikael's expectations
> about the scoping rules of R are wrong.  The enclosing environment of ncol
> is where it was _defined_ not where it is _called_ (apologies if I am
> messing up the computer science terminology here).
> 
> This suggests to me that codetools is right.  But a more extended example
> would be useful. Perhaps there is something special with setOldClass()
> which I am no aware of.
> 
> Also, Bioconductor has 100s of packages with S4 where codetools works well.
> 
> Kasper
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Jun 14 14:57:45 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 14 Jun 2023 14:57:45 +0200
Subject: [Rd] https://cran.r-project.org/src/base-prerelease/ is not updating
Message-ID: <CABtg=KkSPoKV_rxbiroPAqXLHv7Eq-buo786Sz9+EAp6H5kB3Q@mail.gmail.com>

https://cran.r-project.org/src/base-prerelease/ has not updated for
about a week now, I guess this is not intentional?

Best,
Gabor


From j@g@nmn2 @end|ng |rom gm@||@com  Thu Jun 15 05:57:36 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Wed, 14 Jun 2023 23:57:36 -0400
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
 <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>
Message-ID: <2d0ac002-df3e-eba7-b184-ebbf5940deaf@gmail.com>

Thanks all - yes, I think that Simon's diagnosis ("user error") is correct:
in this situation one should define a reasonable generic function explicitly,
with a call to setGeneric, and not rely on the call inside of setMethod ...

But it is still not clear what the way forward should be (for package Matrix,
where we would like to export a method for 'qr.X').  If we do nothing, then
there is the note, already mentioned:

     * checking R code for possible problems ... NOTE
     qr.X: no visible binding for global variable ?R?
     Undefined global functions or variables:
       R

If we add the following to our R/AllGenerics.R :

     setGeneric("qr.X",
                function(qr, complete = FALSE, ncol, ...)
                    standardGeneric("qr.X"),
                useAsDefault = function(qr, complete = FALSE, ncol, ...) {
                    if(missing(ncol))
                        base::qr.X(qr, complete = complete)
                    else base::qr.X(qr, complete = complete, ncol = ncol)
                },
                signature = "qr")

then we get a startup message, which would be quite disruptive on CRAN :

     The following object is masked from 'package:base':

         qr.X

and if we further add setGenericImplicit("qr.X", restore = (TRUE|FALSE))
to our R/zzz.R, then for either value of 'restore' we encounter :

     ** testing if installed package can be loaded from temporary location
     Error: package or namespace load failed for 'Matrix':
      Function found when exporting methods from the namespace 'Matrix' which is 
not S4 generic: 'qr.X'

Are there possibilities that I have missed?

It seems to me that the best option might be to define an implicit generic
'qr.X' in methods via '.initImplicitGenerics' in methods/R/makeBasicFunsList.R,
where I see that an implicit generic 'qr.R' is already defined ... ?

The patch pasted below "solves everything", though we'd still have to think
about how to work for versions of R without the patch ...

Mikael

Index: src/library/methods/R/makeBasicFunsList.R
===================================================================
--- src/library/methods/R/makeBasicFunsList.R	(revision 84541)
+++ src/library/methods/R/makeBasicFunsList.R	(working copy)
@@ -263,6 +263,17 @@
  	       signature = "qr", where = where)
      setGenericImplicit("qr.R", where, FALSE)

+    setGeneric("qr.X",
+               function(qr, complete = FALSE, ncol, ...)
+                   standardGeneric("qr.X"),
+               useAsDefault = function(qr, complete = FALSE, ncol, ...) {
+                   if(missing(ncol))
+                       base::qr.X(qr, complete = complete)
+                   else base::qr.X(qr, complete = complete, ncol = ncol)
+               },
+               signature = "qr", where = where)
+    setGenericImplicit("qr.X", where, FALSE)
+
      ## our toeplitz() only has 'x'; want the generic "here" rather than "out 
there"
      setGeneric("toeplitz", function(x, ...) standardGeneric("toeplitz"),
  	       useAsDefault= function(x, ...) stats::toeplitz(x),

On 2023-06-13 8:01 pm, Simon Urbanek wrote:
> I agree that this is not an R issue, but rather user error of not defining a proper generic so the check is right. Obviously, defining a generic with implementation-specific ncol default makes no sense at all, it should only be part of the method implementation. If one was to implement the same default behavior in the generic itself (not necessarily a good idea) the default would be ncol = if (complete) nrow(qr.R(qr, TRUE)) else min(dim(qr.R(qr, TRUE))) to not rely on the internals of the implementation.
> 
> Cheers,
> Simon
> 
> 
>> On 14/06/2023, at 6:03 AM, Kasper Daniel Hansen <kasperdanielhansen at gmail.com> wrote:
>>
>> On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan <jaganmn2 at gmail.com> wrote:
>>
>>> The formals of the newly generic 'qr.X' are inherited from the non-generic
>>> function in the base namespace.  Notably, the inherited default value of
>>> formal argument 'ncol' relies on lazy evaluation:
>>>
>>>> formals(qr.X)[["ncol"]]
>>>      if (complete) nrow(R) else min(dim(R))
>>>
>>> where 'R' must be defined in the body of any method that might evaluate
>>> 'ncol'.
>>>
>>
>> Perhaps I am misunderstanding something, but I think Mikael's expectations
>> about the scoping rules of R are wrong.  The enclosing environment of ncol
>> is where it was _defined_ not where it is _called_ (apologies if I am
>> messing up the computer science terminology here).
>>
>> This suggests to me that codetools is right.  But a more extended example
>> would be useful. Perhaps there is something special with setOldClass()
>> which I am no aware of.
>>
>> Also, Bioconductor has 100s of packages with S4 where codetools works well.
>>
>> Kasper
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@||  Thu Jun 15 11:57:03 2023
From: m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@|| (Korpela Mikko)
Date: Thu, 15 Jun 2023 09:57:03 +0000
Subject: [Rd] Parts of test in datetime3.R not working
Message-ID: <AM9PR09MB4563DC6EF1BC1D7FE20931069C5BA@AM9PR09MB4563.eurprd09.prod.outlook.com>

In test file datetime3.R, one call to stopifnot() has an argument named "expr" which should probably be "exprs". There are three tests wrapped in braces of which only the last one, "omitted 195 entries", is currently checked.

Proposed patch:

--- tests/datetime3.R	(revision 84544)
+++ tests/datetime3.R	(working copy)
@@ -45,7 +45,7 @@
 c2 <- capture.output(print(dt, max = 6))
 writeLines(tail(cc, 4))
 writeLines(c2)
-stopifnot(expr = {
+stopifnot(exprs = {
     grepl("omitted 151 entries", tail(cc, 1))
                   !anyDuplicated(tail(cc, 2))
     grepl("omitted 195 entries", tail(c2, 1))

-- 
Best regards,
Mikko


From pd@|gd @end|ng |rom gm@||@com  Thu Jun 15 18:23:13 2023
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 15 Jun 2023 18:23:13 +0200
Subject: [Rd] https://cran.r-project.org/src/base-prerelease/ is not
 updating
In-Reply-To: <CABtg=KkSPoKV_rxbiroPAqXLHv7Eq-buo786Sz9+EAp6H5kB3Q@mail.gmail.com>
References: <CABtg=KkSPoKV_rxbiroPAqXLHv7Eq-buo786Sz9+EAp6H5kB3Q@mail.gmail.com>
Message-ID: <88EA581B-1237-4B65-A925-B1C9613F548D@gmail.com>

Yes that was not intentional. Unexpected interaction between installed R version and build tools. Should be OK now.

-pd

> On 14 Jun 2023, at 14:57 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> https://cran.r-project.org/src/base-prerelease/ has not updated for
> about a week now, I guess this is not intentional?
> 
> Best,
> Gabor
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Thu Jun 15 22:51:14 2023
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 15 Jun 2023 13:51:14 -0700
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <2d0ac002-df3e-eba7-b184-ebbf5940deaf@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
 <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>
 <2d0ac002-df3e-eba7-b184-ebbf5940deaf@gmail.com>
Message-ID: <95f0ff5a-edb1-032d-d971-43ca0b848eb0@gmail.com>

I'd argue that at the root of the problem is that your qr.X() generic 
dispatches on all its arguments, including the 'ncol' argument which I 
think the dispatch mechanism needs to evaluate **before** dispatch can 
actually happen.

So yes lazy evaluation is a real feature but it does not play well for 
arguments of a generic that are involved in the dispatch.

If you explicitly defined your generic with:

 ?? setGeneric("qr.X", signature="qr")

you should be fine.

More generally speaking, it's a good idea to restrict the signature of a 
generic to the arguments "that make sense". For unary operations this is 
usually the 1st argument, for binary operations the first two arguments 
etc... Additional arguments that control the operation like modiflers, 
toggles, flags, rng seed, and other parameters, usually have not place 
in the signature of the generic.

H.

On 6/14/23 20:57, Mikael Jagan wrote:
> Thanks all - yes, I think that Simon's diagnosis ("user error") is 
> correct:
> in this situation one should define a reasonable generic function 
> explicitly,
> with a call to setGeneric, and not rely on the call inside of 
> setMethod ...
>
> But it is still not clear what the way forward should be (for package 
> Matrix,
> where we would like to export a method for 'qr.X').? If we do nothing, 
> then
> there is the note, already mentioned:
>
> ??? * checking R code for possible problems ... NOTE
> ??? qr.X: no visible binding for global variable ?R?
> ??? Undefined global functions or variables:
> ????? R
>
> If we add the following to our R/AllGenerics.R :
>
> ??? setGeneric("qr.X",
> ?????????????? function(qr, complete = FALSE, ncol, ...)
> ?????????????????? standardGeneric("qr.X"),
> ?????????????? useAsDefault = function(qr, complete = FALSE, ncol, ...) {
> ?????????????????? if(missing(ncol))
> ?????????????????????? base::qr.X(qr, complete = complete)
> ?????????????????? else base::qr.X(qr, complete = complete, ncol = ncol)
> ?????????????? },
> ?????????????? signature = "qr")
>
> then we get a startup message, which would be quite disruptive on CRAN :
>
> ??? The following object is masked from 'package:base':
>
> ??????? qr.X
>
> and if we further add setGenericImplicit("qr.X", restore = (TRUE|FALSE))
> to our R/zzz.R, then for either value of 'restore' we encounter :
>
> ??? ** testing if installed package can be loaded from temporary location
> ??? Error: package or namespace load failed for 'Matrix':
> ???? Function found when exporting methods from the namespace 'Matrix' 
> which is not S4 generic: 'qr.X'
>
> Are there possibilities that I have missed?
>
> It seems to me that the best option might be to define an implicit 
> generic
> 'qr.X' in methods via '.initImplicitGenerics' in 
> methods/R/makeBasicFunsList.R,
> where I see that an implicit generic 'qr.R' is already defined ... ?
>
> The patch pasted below "solves everything", though we'd still have to 
> think
> about how to work for versions of R without the patch ...
>
> Mikael
>
> Index: src/library/methods/R/makeBasicFunsList.R
> ===================================================================
> --- src/library/methods/R/makeBasicFunsList.R??? (revision 84541)
> +++ src/library/methods/R/makeBasicFunsList.R??? (working copy)
> @@ -263,6 +263,17 @@
> ??????????? signature = "qr", where = where)
> ???? setGenericImplicit("qr.R", where, FALSE)
>
> +??? setGeneric("qr.X",
> +?????????????? function(qr, complete = FALSE, ncol, ...)
> +?????????????????? standardGeneric("qr.X"),
> +?????????????? useAsDefault = function(qr, complete = FALSE, ncol, 
> ...) {
> +?????????????????? if(missing(ncol))
> +?????????????????????? base::qr.X(qr, complete = complete)
> +?????????????????? else base::qr.X(qr, complete = complete, ncol = ncol)
> +?????????????? },
> +?????????????? signature = "qr", where = where)
> +??? setGenericImplicit("qr.X", where, FALSE)
> +
> ???? ## our toeplitz() only has 'x'; want the generic "here" rather 
> than "out there"
> ???? setGeneric("toeplitz", function(x, ...) standardGeneric("toeplitz"),
> ??????????? useAsDefault= function(x, ...) stats::toeplitz(x),
>
> On 2023-06-13 8:01 pm, Simon Urbanek wrote:
>> I agree that this is not an R issue, but rather user error of not 
>> defining a proper generic so the check is right. Obviously, defining 
>> a generic with implementation-specific ncol default makes no sense at 
>> all, it should only be part of the method implementation. If one was 
>> to implement the same default behavior in the generic itself (not 
>> necessarily a good idea) the default would be ncol = if (complete) 
>> nrow(qr.R(qr, TRUE)) else min(dim(qr.R(qr, TRUE))) to not rely on the 
>> internals of the implementation.
>>
>> Cheers,
>> Simon
>>
>>
>>> On 14/06/2023, at 6:03 AM, Kasper Daniel Hansen 
>>> <kasperdanielhansen at gmail.com> wrote:
>>>
>>> On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan <jaganmn2 at gmail.com> 
>>> wrote:
>>>
>>>> The formals of the newly generic 'qr.X' are inherited from the 
>>>> non-generic
>>>> function in the base namespace.? Notably, the inherited default 
>>>> value of
>>>> formal argument 'ncol' relies on lazy evaluation:
>>>>
>>>>> formals(qr.X)[["ncol"]]
>>>> ???? if (complete) nrow(R) else min(dim(R))
>>>>
>>>> where 'R' must be defined in the body of any method that might 
>>>> evaluate
>>>> 'ncol'.
>>>>
>>>
>>> Perhaps I am misunderstanding something, but I think Mikael's 
>>> expectations
>>> about the scoping rules of R are wrong.? The enclosing environment 
>>> of ncol
>>> is where it was _defined_ not where it is _called_ (apologies if I am
>>> messing up the computer science terminology here).
>>>
>>> This suggests to me that codetools is right.? But a more extended 
>>> example
>>> would be useful. Perhaps there is something special with setOldClass()
>>> which I am no aware of.
>>>
>>> Also, Bioconductor has 100s of packages with S4 where codetools 
>>> works well.
>>>
>>> Kasper
>>>
>>> ????[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Thu Jun 15 23:25:17 2023
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 15 Jun 2023 14:25:17 -0700
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <95f0ff5a-edb1-032d-d971-43ca0b848eb0@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
 <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>
 <2d0ac002-df3e-eba7-b184-ebbf5940deaf@gmail.com>
 <95f0ff5a-edb1-032d-d971-43ca0b848eb0@gmail.com>
Message-ID: <0f8b6036-3b55-f9cc-81ff-e56cb1e9d96b@gmail.com>

Oh but I see now that you've already tried this in your R/AllGenerics.R, 
sorry for missing that, but that you worry about the following message 
being disruptive on CRAN:

 ??? The following object is masked from 'package:base':

 ??????? qr.X

Why would that be? As long as you only define methods for objects that 
**you** control everything is fine. In other words you're not allowed to 
define a method for "qr" objects because that method would override 
base::qr.X(). But the generic itself and the method that you define for 
your objects don't override anything so should not disrupt anything.

H.

On 6/15/23 13:51, Herv? Pag?s wrote:
>
> I'd argue that at the root of the problem is that your qr.X() generic 
> dispatches on all its arguments, including the 'ncol' argument which I 
> think the dispatch mechanism needs to evaluate **before** dispatch can 
> actually happen.
>
> So yes lazy evaluation is a real feature but it does not play well for 
> arguments of a generic that are involved in the dispatch.
>
> If you explicitly defined your generic with:
>
> ?? setGeneric("qr.X", signature="qr")
>
> you should be fine.
>
> More generally speaking, it's a good idea to restrict the signature of 
> a generic to the arguments "that make sense". For unary operations 
> this is usually the 1st argument, for binary operations the first two 
> arguments etc... Additional arguments that control the operation like 
> modiflers, toggles, flags, rng seed, and other parameters, usually 
> have not place in the signature of the generic.
>
> H.
>
> On 6/14/23 20:57, Mikael Jagan wrote:
>> Thanks all - yes, I think that Simon's diagnosis ("user error") is 
>> correct:
>> in this situation one should define a reasonable generic function 
>> explicitly,
>> with a call to setGeneric, and not rely on the call inside of 
>> setMethod ...
>>
>> But it is still not clear what the way forward should be (for package 
>> Matrix,
>> where we would like to export a method for 'qr.X').? If we do 
>> nothing, then
>> there is the note, already mentioned:
>>
>> ??? * checking R code for possible problems ... NOTE
>> ??? qr.X: no visible binding for global variable ?R?
>> ??? Undefined global functions or variables:
>> ????? R
>>
>> If we add the following to our R/AllGenerics.R :
>>
>> ??? setGeneric("qr.X",
>> ?????????????? function(qr, complete = FALSE, ncol, ...)
>> ?????????????????? standardGeneric("qr.X"),
>> ?????????????? useAsDefault = function(qr, complete = FALSE, ncol, 
>> ...) {
>> ?????????????????? if(missing(ncol))
>> ?????????????????????? base::qr.X(qr, complete = complete)
>> ?????????????????? else base::qr.X(qr, complete = complete, ncol = ncol)
>> ?????????????? },
>> ?????????????? signature = "qr")
>>
>> then we get a startup message, which would be quite disruptive on CRAN :
>>
>> ??? The following object is masked from 'package:base':
>>
>> ??????? qr.X
>>
>> and if we further add setGenericImplicit("qr.X", restore = (TRUE|FALSE))
>> to our R/zzz.R, then for either value of 'restore' we encounter :
>>
>> ??? ** testing if installed package can be loaded from temporary 
>> location
>> ??? Error: package or namespace load failed for 'Matrix':
>> ???? Function found when exporting methods from the namespace 
>> 'Matrix' which is not S4 generic: 'qr.X'
>>
>> Are there possibilities that I have missed?
>>
>> It seems to me that the best option might be to define an implicit 
>> generic
>> 'qr.X' in methods via '.initImplicitGenerics' in 
>> methods/R/makeBasicFunsList.R,
>> where I see that an implicit generic 'qr.R' is already defined ... ?
>>
>> The patch pasted below "solves everything", though we'd still have to 
>> think
>> about how to work for versions of R without the patch ...
>>
>> Mikael
>>
>> Index: src/library/methods/R/makeBasicFunsList.R
>> ===================================================================
>> --- src/library/methods/R/makeBasicFunsList.R??? (revision 84541)
>> +++ src/library/methods/R/makeBasicFunsList.R??? (working copy)
>> @@ -263,6 +263,17 @@
>> ??????????? signature = "qr", where = where)
>> ???? setGenericImplicit("qr.R", where, FALSE)
>>
>> +??? setGeneric("qr.X",
>> +?????????????? function(qr, complete = FALSE, ncol, ...)
>> +?????????????????? standardGeneric("qr.X"),
>> +?????????????? useAsDefault = function(qr, complete = FALSE, ncol, 
>> ...) {
>> +?????????????????? if(missing(ncol))
>> +?????????????????????? base::qr.X(qr, complete = complete)
>> +?????????????????? else base::qr.X(qr, complete = complete, ncol = 
>> ncol)
>> +?????????????? },
>> +?????????????? signature = "qr", where = where)
>> +??? setGenericImplicit("qr.X", where, FALSE)
>> +
>> ???? ## our toeplitz() only has 'x'; want the generic "here" rather 
>> than "out there"
>> ???? setGeneric("toeplitz", function(x, ...) 
>> standardGeneric("toeplitz"),
>> ??????????? useAsDefault= function(x, ...) stats::toeplitz(x),
>>
>> On 2023-06-13 8:01 pm, Simon Urbanek wrote:
>>> I agree that this is not an R issue, but rather user error of not 
>>> defining a proper generic so the check is right. Obviously, defining 
>>> a generic with implementation-specific ncol default makes no sense 
>>> at all, it should only be part of the method implementation. If one 
>>> was to implement the same default behavior in the generic itself 
>>> (not necessarily a good idea) the default would be ncol = if 
>>> (complete) nrow(qr.R(qr, TRUE)) else min(dim(qr.R(qr, TRUE))) to not 
>>> rely on the internals of the implementation.
>>>
>>> Cheers,
>>> Simon
>>>
>>>
>>>> On 14/06/2023, at 6:03 AM, Kasper Daniel Hansen 
>>>> <kasperdanielhansen at gmail.com> wrote:
>>>>
>>>> On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan <jaganmn2 at gmail.com> 
>>>> wrote:
>>>>
>>>>> The formals of the newly generic 'qr.X' are inherited from the 
>>>>> non-generic
>>>>> function in the base namespace.? Notably, the inherited default 
>>>>> value of
>>>>> formal argument 'ncol' relies on lazy evaluation:
>>>>>
>>>>>> formals(qr.X)[["ncol"]]
>>>>> ???? if (complete) nrow(R) else min(dim(R))
>>>>>
>>>>> where 'R' must be defined in the body of any method that might 
>>>>> evaluate
>>>>> 'ncol'.
>>>>>
>>>>
>>>> Perhaps I am misunderstanding something, but I think Mikael's 
>>>> expectations
>>>> about the scoping rules of R are wrong.? The enclosing environment 
>>>> of ncol
>>>> is where it was _defined_ not where it is _called_ (apologies if I am
>>>> messing up the computer science terminology here).
>>>>
>>>> This suggests to me that codetools is right.? But a more extended 
>>>> example
>>>> would be useful. Perhaps there is something special with setOldClass()
>>>> which I am no aware of.
>>>>
>>>> Also, Bioconductor has 100s of packages with S4 where codetools 
>>>> works well.
>>>>
>>>> Kasper
>>>>
>>>> ????[[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> -- 
> Herv? Pag?s
>
> Bioconductor Core Team
> hpages.on.github at gmail.com

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From j@g@nmn2 @end|ng |rom gm@||@com  Fri Jun 16 04:00:45 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Thu, 15 Jun 2023 22:00:45 -0400
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <0f8b6036-3b55-f9cc-81ff-e56cb1e9d96b@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
 <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>
 <2d0ac002-df3e-eba7-b184-ebbf5940deaf@gmail.com>
 <95f0ff5a-edb1-032d-d971-43ca0b848eb0@gmail.com>
 <0f8b6036-3b55-f9cc-81ff-e56cb1e9d96b@gmail.com>
Message-ID: <8eb9b665-35ab-9011-cc36-4ecf561f18a8@gmail.com>



On 2023-06-15 5:25 pm, Herv? Pag?s wrote:
> Oh but I see now that you've already tried this in your R/AllGenerics.R,
> sorry for missing that, but that you worry about the following message
> being disruptive on CRAN:
> 
>   ??? The following object is masked from 'package:base':
> 
>   ??????? qr.X
> 
> Why would that be? As long as you only define methods for objects that
> **you** control everything is fine. In other words you're not allowed to
> define a method for "qr" objects because that method would override
> base::qr.X(). But the generic itself and the method that you define for
> your objects don't override anything so should not disrupt anything.
> 

Yes, maybe it would be fine in principle, and of course many popular
packages emit startup messages.  Still, in practice, I think that
people are quite accustomed to library(Matrix) being "silent",
and probably a nontrivial fraction of our reverse dependencies would
encounter new NOTEs about differences between *.Rout and *.Rout.save,
etc.

The fraction of users who will ever call this method for qr.X is very
very small compared to the fraction who will be confused or annoyed
by the message.  Hence my hope that an implicit generic qr.X could
become part of package methods, notably as an implicit generic qr.R
already lives there ...

Or maybe there is a way for Matrix to define qr.X as an implicit generic
without creating other problems, but my experiments with setGenericImplicit
were not promising ...

Mikael

> H.
> 
> On 6/15/23 13:51, Herv? Pag?s wrote:
>>
>> I'd argue that at the root of the problem is that your qr.X() generic
>> dispatches on all its arguments, including the 'ncol' argument which I
>> think the dispatch mechanism needs to evaluate **before** dispatch can
>> actually happen.
>>
>> So yes lazy evaluation is a real feature but it does not play well for
>> arguments of a generic that are involved in the dispatch.
>>
>> If you explicitly defined your generic with:
>>
>>  ?? setGeneric("qr.X", signature="qr")
>>
>> you should be fine.
>>
>> More generally speaking, it's a good idea to restrict the signature of
>> a generic to the arguments "that make sense". For unary operations
>> this is usually the 1st argument, for binary operations the first two
>> arguments etc... Additional arguments that control the operation like
>> modiflers, toggles, flags, rng seed, and other parameters, usually
>> have not place in the signature of the generic.
>>
>> H.
>>
>> On 6/14/23 20:57, Mikael Jagan wrote:
>>> Thanks all - yes, I think that Simon's diagnosis ("user error") is
>>> correct:
>>> in this situation one should define a reasonable generic function
>>> explicitly,
>>> with a call to setGeneric, and not rely on the call inside of
>>> setMethod ...
>>>
>>> But it is still not clear what the way forward should be (for package
>>> Matrix,
>>> where we would like to export a method for 'qr.X').? If we do
>>> nothing, then
>>> there is the note, already mentioned:
>>>
>>>  ??? * checking R code for possible problems ... NOTE
>>>  ??? qr.X: no visible binding for global variable ?R?
>>>  ??? Undefined global functions or variables:
>>>  ????? R
>>>
>>> If we add the following to our R/AllGenerics.R :
>>>
>>>  ??? setGeneric("qr.X",
>>>  ?????????????? function(qr, complete = FALSE, ncol, ...)
>>>  ?????????????????? standardGeneric("qr.X"),
>>>  ?????????????? useAsDefault = function(qr, complete = FALSE, ncol,
>>> ...) {
>>>  ?????????????????? if(missing(ncol))
>>>  ?????????????????????? base::qr.X(qr, complete = complete)
>>>  ?????????????????? else base::qr.X(qr, complete = complete, ncol = ncol)
>>>  ?????????????? },
>>>  ?????????????? signature = "qr")
>>>
>>> then we get a startup message, which would be quite disruptive on CRAN :
>>>
>>>  ??? The following object is masked from 'package:base':
>>>
>>>  ??????? qr.X
>>>
>>> and if we further add setGenericImplicit("qr.X", restore = (TRUE|FALSE))
>>> to our R/zzz.R, then for either value of 'restore' we encounter :
>>>
>>>  ??? ** testing if installed package can be loaded from temporary
>>> location
>>>  ??? Error: package or namespace load failed for 'Matrix':
>>>  ???? Function found when exporting methods from the namespace
>>> 'Matrix' which is not S4 generic: 'qr.X'
>>>
>>> Are there possibilities that I have missed?
>>>
>>> It seems to me that the best option might be to define an implicit
>>> generic
>>> 'qr.X' in methods via '.initImplicitGenerics' in
>>> methods/R/makeBasicFunsList.R,
>>> where I see that an implicit generic 'qr.R' is already defined ... ?
>>>
>>> The patch pasted below "solves everything", though we'd still have to
>>> think
>>> about how to work for versions of R without the patch ...
>>>
>>> Mikael
>>>
>>> Index: src/library/methods/R/makeBasicFunsList.R
>>> ===================================================================
>>> --- src/library/methods/R/makeBasicFunsList.R??? (revision 84541)
>>> +++ src/library/methods/R/makeBasicFunsList.R??? (working copy)
>>> @@ -263,6 +263,17 @@
>>>  ??????????? signature = "qr", where = where)
>>>  ???? setGenericImplicit("qr.R", where, FALSE)
>>>
>>> +??? setGeneric("qr.X",
>>> +?????????????? function(qr, complete = FALSE, ncol, ...)
>>> +?????????????????? standardGeneric("qr.X"),
>>> +?????????????? useAsDefault = function(qr, complete = FALSE, ncol,
>>> ...) {
>>> +?????????????????? if(missing(ncol))
>>> +?????????????????????? base::qr.X(qr, complete = complete)
>>> +?????????????????? else base::qr.X(qr, complete = complete, ncol =
>>> ncol)
>>> +?????????????? },
>>> +?????????????? signature = "qr", where = where)
>>> +??? setGenericImplicit("qr.X", where, FALSE)
>>> +
>>>  ???? ## our toeplitz() only has 'x'; want the generic "here" rather
>>> than "out there"
>>>  ???? setGeneric("toeplitz", function(x, ...)
>>> standardGeneric("toeplitz"),
>>>  ??????????? useAsDefault= function(x, ...) stats::toeplitz(x),
>>>
>>> On 2023-06-13 8:01 pm, Simon Urbanek wrote:
>>>> I agree that this is not an R issue, but rather user error of not
>>>> defining a proper generic so the check is right. Obviously, defining
>>>> a generic with implementation-specific ncol default makes no sense
>>>> at all, it should only be part of the method implementation. If one
>>>> was to implement the same default behavior in the generic itself
>>>> (not necessarily a good idea) the default would be ncol = if
>>>> (complete) nrow(qr.R(qr, TRUE)) else min(dim(qr.R(qr, TRUE))) to not
>>>> rely on the internals of the implementation.
>>>>
>>>> Cheers,
>>>> Simon
>>>>
>>>>
>>>>> On 14/06/2023, at 6:03 AM, Kasper Daniel Hansen
>>>>> <kasperdanielhansen at gmail.com> wrote:
>>>>>
>>>>> On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan <jaganmn2 at gmail.com>
>>>>> wrote:
>>>>>
>>>>>> The formals of the newly generic 'qr.X' are inherited from the
>>>>>> non-generic
>>>>>> function in the base namespace.? Notably, the inherited default
>>>>>> value of
>>>>>> formal argument 'ncol' relies on lazy evaluation:
>>>>>>
>>>>>>> formals(qr.X)[["ncol"]]
>>>>>>  ???? if (complete) nrow(R) else min(dim(R))
>>>>>>
>>>>>> where 'R' must be defined in the body of any method that might
>>>>>> evaluate
>>>>>> 'ncol'.
>>>>>>
>>>>>
>>>>> Perhaps I am misunderstanding something, but I think Mikael's
>>>>> expectations
>>>>> about the scoping rules of R are wrong.? The enclosing environment
>>>>> of ncol
>>>>> is where it was _defined_ not where it is _called_ (apologies if I am
>>>>> messing up the computer science terminology here).
>>>>>
>>>>> This suggests to me that codetools is right.? But a more extended
>>>>> example
>>>>> would be useful. Perhaps there is something special with setOldClass()
>>>>> which I am no aware of.
>>>>>
>>>>> Also, Bioconductor has 100s of packages with S4 where codetools
>>>>> works well.
>>>>>
>>>>> Kasper
>>>>>
>>>>>  ????[[alternative HTML version deleted]]
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> -- 
>> Herv? Pag?s
>>
>> Bioconductor Core Team
>> hpages.on.github at gmail.com
>


From pd@me@ @end|ng |rom cb@@dk  Fri Jun 16 10:36:58 2023
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Fri, 16 Jun 2023 08:36:58 +0000
Subject: [Rd] R 4.3.1 is released
Message-ID: <766DF86F-36F4-4144-829E-DCB1B6A59DE5@cbs.dk>

The build system rolled up R-4.3.1.tar.gz (codename "Beagle Scouts") this morning.

This is a minor update, with a few bug fixes.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.3.1.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard


These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = 320967884b547734d6279dedbc739dd4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 97a3ddc25aab502a70bfb1a79ab6f862
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 7ea998dffa2b8d4f5a6aee84c45a383a
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = 4108ab429e768e29b1c3b418c224246e
MD5 (NEWS.2) = b38d94569700664205a76a7de836ba83
MD5 (NEWS.3) = e55ed2c8a547b827b46e08eb7137ba23
MD5 (R-latest.tar.gz) = b83cee497046d4aef649eb79e6df83e8
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = a79b9b338cab09bd665f6b62ac6f455b
MD5 (THANKS) = 45b6d2e88a6ecb5b24fa33a781351cd5
MD5 (VERSION-INFO.dcf) = 3d4c6bf5bf44d34766f90ed67d05c34a
MD5 (R-4/R-4.3.1.tar.gz) = b83cee497046d4aef649eb79e6df83e8

60a0d150e6fc1f424be76ad7b645d236b56e747692a4679f81ce6536c550e949  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
3a47bca1e2a7db27c0ca12be388c238e2608ff2f768e627650a71a0ffc826038  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
a8167cfe28e748b67476d4a21a968cfa24d0935da89cd4514c483f45f3f2a83b  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
5de7657c5e58e481403c0dd1a74a5c090b3ef481ce75a91dfe05d4b03f63163f  NEWS.1
cde079b6beab7d700d3d4ecda494e2681ad3b7f8fab13b68be090f949393ec62  NEWS.2
1910a2405300b9bc7c76beeb0753a5249cf799afe175ce28f8d782fab723e012  NEWS.3
8dd0bf24f1023c6f618c3b317383d291b4a494f40d73b983ac22ffea99e4ba99  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
8b7d3856100220f4555d4d57140829f2e81c27eccec5b441f5dce616e9ec9061  RESOURCES
8319c5415de58ee10d4bc058d79c370fd8e6b2ad09e25d7a1e04b74ca5f380a6  THANKS
032260f31c56c011a9724930e356eac4d7ddfcaa63c559f95986063ede3bf91a  VERSION-INFO.dcf
8dd0bf24f1023c6f618c3b317383d291b4a494f40d73b983ac22ffea99e4ba99  R-4/R-4.3.1.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.3.1:

  C-LEVEL FACILITIES:

    * The C-level API version of R's integrate(), Rdqags() in Applic.h,
      now returns the correct number of integrand evaluations neval,
      fixing PR#18515 reported and diagnosed by Stephen Wade.

    * The C prototypes for LAPACK calls dspgv and dtptrs in
      R_exts/Lapack.h had one too many and one too few character length
      arguments - but this has not caused any known issues. To get the
      corrected prototypes, include

              #include <Rconfig.h> // for PR18534fixed
              #ifdef PR18534fixed
              # define usePR18534fix 1
              #endif
              #include <R_exts/Lapack.h>
      
      in your C/C++ code (PR#18534).

  INSTALLATION:

    * Many of the checks of esoteric Internet operations and those
      using unreliable external sites have been moved to a new target
      that is not run by default and primarily intended for the core
      developers.  To run them use

              cd tests; make test-Internet-dev
      
  BUG FIXES:

    * .S3methods(), typically called from methods(), again marks
      methods from package base as visible.

      Also, the visibility of non-base methods is again determined by
      the method's presence in search().

    * tools::Rdiff() is now more robust against invalid strings, fixing
      installation tests on Windows without Rtools installed
      (PR#18530).

    * Fix (new) bug in hcl.colors(2, *), by Achim Zeileis (PR#18523).

    * head(., <illegal>) and tail(..) now produce more useful "Error in
      ...." error messages, fixing PR#18362.

    * Package code syntax on Windows is checked in UTF-8 when UTF-8 is
      the native encoding.

    * na.contiguous(x) now also returns the first run, when it is at
      the beginning and there is a later one of the same length;
      reported to R-devel, including a fix, by Georgi Boshnakov.
      Further, by default, it modifies only an existing attr(*,"tsp")
      but otherwise no longer sets one.

    * chol(<not pos.def>, pivot = <T|F>) now gives a correct error or
      warning message (depending on pivot), thanks to Mikael Jagan's
      (PR#18541).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Fri Jun 16 11:16:52 2023
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 16 Jun 2023 11:16:52 +0200
Subject: [Rd] why does [A-Z] include 'T' in an Estonian locale?
In-Reply-To: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
References: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
Message-ID: <1F2110A5-094F-4693-BBC5-AD997DA64FFA@gmail.com>

Just for amusement: Similar messups occur with Danish and its three extra letters:

> Sys.setlocale("LC_ALL", "da_DK")
[1] "da_DK/da_DK/da_DK/C/da_DK/en_US.UTF-8"
> sort(c(LETTERS,"?","?","?"))
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
[20] "T" "U" "V" "W" "X" "Y" "Z" "?" "?" "?"

> grepl("[A-?]", "?")
[1] FALSE
> grepl("[A-?]", "?")
[1] FALSE
> grepl("[A-?]", "?")
[1] TRUE
> grepl("[A-?]", "?")
[1] FALSE
> grepl("[A-?]", "?")
[1] TRUE
> grepl("[A-?]", "?")
[1] TRUE

So for character ranges, the order is ?,?,? (which is how they'd collate in Swedish, except that Swedish uses diacriticals rather than ? and ?).

> Sys.setlocale("LC_ALL", "sv_SE")
[1] "sv_SE/sv_SE/sv_SE/C/sv_SE/en_US.UTF-8"
> sort(c(LETTERS,"?","?","?"))
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
[20] "T" "U" "V" "W" "X" "Y" "Z" "?" "?" "?"
> sort(c(LETTERS,"?","?","?"))
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
[20] "T" "U" "V" "W" "X" "Y" "Z" "?" "?" "?"



> On 30 May 2023, at 17:45 , Ben Bolker <bbolker at gmail.com> wrote:
> 
>  Inspired by this old Stack Overflow question
> 
> https://stackoverflow.com/questions/19765610/when-does-locale-affect-rs-regular-expressions
> 
> I was wondering why this is TRUE:
> 
> Sys.setlocale("LC_ALL", "et_EE")
> grepl("[A-Z]", "T")
> 
> TRE's documentation at <https://laurikari.net/tre/documentation/regex-syntax/> says that a range "is shorthand for the full range of characters between those two [endpoints] (inclusive) in the collating sequence".
> 
> Yet, T is *not* between A and Z in the Estonian collating sequence:
> 
> sort(LETTERS)
> [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
> [20] "Z" "T" "U" "V" "W" "X" "Y"
> 
>  I realize that this may be a question about TRE rather than about R *per se* (FWIW the grepl() result is also TRUE with `perl = TRUE`, so the question also applies to PCRE), but I'm wondering if anyone has any insights ...  (and yes, I know that the correct answer is "use [:alpha:] and don't worry about it")
> 
> (In contrast, the ICU engine underlying stringi/stringr says "[t]he characters to include are determined by Unicode code point ordering" - see
> 
> https://stackoverflow.com/questions/76365426/does-stringrs-regex-engine-translate-a-z-into-abcdefghijklmnopqrstuvwyz/76366163#76366163
> 
> for links)
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Jun 16 11:41:12 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 16 Jun 2023 11:41:12 +0200
Subject: [Rd] codetools wrongly complains about lazy evaluation in S4
 methods
In-Reply-To: <8eb9b665-35ab-9011-cc36-4ecf561f18a8@gmail.com>
References: <2cde2aab-8491-2f99-657e-ecb41ceda039@gmail.com>
 <CAC2h7uu_8m=xC7KcB1i_uk=WW8bDvx4P7ACSPOp-s1PK=1nGQg@mail.gmail.com>
 <ED9261FE-2E8C-4312-B388-0FF18652E973@R-project.org>
 <2d0ac002-df3e-eba7-b184-ebbf5940deaf@gmail.com>
 <95f0ff5a-edb1-032d-d971-43ca0b848eb0@gmail.com>
 <0f8b6036-3b55-f9cc-81ff-e56cb1e9d96b@gmail.com>
 <8eb9b665-35ab-9011-cc36-4ecf561f18a8@gmail.com>
Message-ID: <25740.11832.599065.198535@stat.math.ethz.ch>

>>>>> Mikael Jagan 
>>>>>     on Thu, 15 Jun 2023 22:00:45 -0400 writes:

    > On 2023-06-15 5:25 pm, Herv? Pag?s wrote:
    >> Oh but I see now that you've already tried this in your
    >> R/AllGenerics.R, sorry for missing that, 

yes, this one:

  setGeneric("qr.X",
	     function(qr, complete = FALSE, ncol, ...)
		 standardGeneric("qr.X"),
	     useAsDefault = function(qr, complete = FALSE, ncol, ...) {
		 if(missing(ncol))
		     base::qr.X(qr, complete = complete)
		 else base::qr.X(qr, complete = complete, ncol = ncol)
	     },
	     signature = "qr")

where the 'signature = "qr"' is perfect (and as Herv? suggests).

but the complication in useAsDefault = ..  is really a bit ugly
... notably if one compares with the nice original  base :: qr.X ()

    >> but that you worry about the following message being 
    >> disruptive on CRAN:
    >> 
    >> ??? The following object is masked from 'package:base':
    >> 
    >> ??????? qr.X
    >> 
    >> Why would that be? As long as you only define methods for
    >> objects that **you** control everything is fine. In other
    >> words you're not allowed to define a method for "qr"
    >> objects because that method would override
    >> base::qr.X(). But the generic itself and the method that
    >> you define for your objects don't override anything so
    >> should not disrupt anything.

    > Yes, maybe it would be fine in principle, and of course
    > many popular packages emit startup messages.  Still, in
    > practice, I think that people are quite accustomed to
    > library(Matrix) being "silent", and probably a nontrivial
    > fraction of our reverse dependencies would encounter new
    > NOTEs about differences between *.Rout and *.Rout.save,
    > etc.

I tend to agree with Herv? that the  "masked" warning here is
a false positive.

I also agree with Mikael  that we would not want this for every
default use of   library(Matrix)

I believe we should fix it by using conflictRules(), and from
reading ?conflictRules I understand we could do that by setting

  options(conflict.policy = list(mask.ok = "qr.X"))

possibly even in Matrix package's load or attach hook
[[and if really really necessary even as hack inside library()'s checks]]

    > The fraction of users who will ever call this method for
    > qr.X is very very small compared to the fraction who will
    > be confused or annoyed by the message.  Hence my hope that
    > an implicit generic qr.X could become part of package
    > methods, notably as an implicit generic qr.R already lives
    > there ...

    > Or maybe there is a way for Matrix to define qr.X as an
    > implicit generic without creating other problems, but my
    > experiments with setGenericImplicit were not promising ...

In principle, I'd say that setGenericImplicit() would be a good
/ "the correct" approach,  but as you already tried
unsuccessfully, I'm not claiming the principle.

Martin


    > Mikael

    >> H.

    >> On 6/15/23 13:51, Herv? Pag?s wrote:
    >>> 
    >>> I'd argue that at the root of the problem is that your
    >>> qr.X() generic dispatches on all its arguments,
    >>> including the 'ncol' argument which I think the dispatch
    >>> mechanism needs to evaluate **before** dispatch can
    >>> actually happen.
    >>> 
    >>> So yes lazy evaluation is a real feature but it does not
    >>> play well for arguments of a generic that are involved
    >>> in the dispatch.
    >>> 
    >>> If you explicitly defined your generic with:
    >>> 
    >>> ?? setGeneric("qr.X", signature="qr")
    >>> 
    >>> you should be fine.
    >>> 
    >>> More generally speaking, it's a good idea to restrict
    >>> the signature of a generic to the arguments "that make
    >>> sense". For unary operations this is usually the 1st
    >>> argument, for binary operations the first two arguments
    >>> etc... Additional arguments that control the operation
    >>> like modiflers, toggles, flags, rng seed, and other
    >>> parameters, usually have not place in the signature of
    >>> the generic.
    >>> 
    >>> H.
    >>> 
    >>> On 6/14/23 20:57, Mikael Jagan wrote:
    >>>> Thanks all - yes, I think that Simon's diagnosis ("user
    >>>> error") is correct: in this situation one should define
    >>>> a reasonable generic function explicitly, with a call
    >>>> to setGeneric, and not rely on the call inside of
    >>>> setMethod ...
    >>>> 
    >>>> But it is still not clear what the way forward should
    >>>> be (for package Matrix, where we would like to export a
    >>>> method for 'qr.X').? If we do nothing, then there is
    >>>> the note, already mentioned:
    >>>> 
    >>>> ??? * checking R code for possible problems ... NOTE
    >>>> ??? qr.X: no visible binding for global variable ?R?
    >>>> ??? Undefined global functions or variables: ????? R
    >>>> 
    >>>> If we add the following to our R/AllGenerics.R :
    >>>> 
    >>>> ??? setGeneric("qr.X", ?????????????? function(qr,
    >>>> complete = FALSE, ncol, ...)  ??????????????????
    >>>> standardGeneric("qr.X"), ?????????????? useAsDefault =
    >>>> function(qr, complete = FALSE, ncol, ...) {
    >>>> ?????????????????? if(missing(ncol))
    >>>> ?????????????????????? base::qr.X(qr, complete =
    >>>> complete) ?????????????????? else base::qr.X(qr,
    >>>> complete = complete, ncol = ncol) ?????????????? },
    >>>> ?????????????? signature = "qr")
    >>>> 
    >>>> then we get a startup message, which would be quite
    >>>> disruptive on CRAN :
    >>>> 
    >>>> ??? The following object is masked from 'package:base':
    >>>> 
    >>>> ??????? qr.X
    >>>> 
    >>>> and if we further add setGenericImplicit("qr.X",
    >>>> restore = (TRUE|FALSE)) to our R/zzz.R, then for either
    >>>> value of 'restore' we encounter :
    >>>> 
    >>>> ??? ** testing if installed package can be loaded from
    >>>> temporary location ??? Error: package or namespace load
    >>>> failed for 'Matrix': ???? Function found when exporting
    >>>> methods from the namespace 'Matrix' which is not S4
    >>>> generic: 'qr.X'
    >>>> 
    >>>> Are there possibilities that I have missed?
    >>>> 
    >>>> It seems to me that the best option might be to define
    >>>> an implicit generic 'qr.X' in methods via
    >>>> '.initImplicitGenerics' in
    >>>> methods/R/makeBasicFunsList.R, where I see that an
    >>>> implicit generic 'qr.R' is already defined ... ?
    >>>> 
    >>>> The patch pasted below "solves everything", though we'd
    >>>> still have to think about how to work for versions of R
    >>>> without the patch ...
    >>>> 
    >>>> Mikael
    >>>> 
    >>>> Index: src/library/methods/R/makeBasicFunsList.R
    >>>> ===================================================================
    >>>> --- src/library/methods/R/makeBasicFunsList.R???
    >>>> (revision 84541) +++
    >>>> src/library/methods/R/makeBasicFunsList.R??? (working
    >>>> copy) @@ -263,6 +263,17 @@ ??????????? signature =
    >>>> "qr", where = where) ???? setGenericImplicit("qr.R",
    >>>> where, FALSE)
    >>>> 
    >>>> +??? setGeneric("qr.X", +?????????????? function(qr,
    >>>> complete = FALSE, ncol, ...)  +??????????????????
    >>>> standardGeneric("qr.X"), +?????????????? useAsDefault =
    >>>> function(qr, complete = FALSE, ncol, ...) {
    >>>> +?????????????????? if(missing(ncol))
    >>>> +?????????????????????? base::qr.X(qr, complete =
    >>>> complete) +?????????????????? else base::qr.X(qr,
    >>>> complete = complete, ncol = ncol) +?????????????? },
    >>>> +?????????????? signature = "qr", where = where) +???
    >>>> setGenericImplicit("qr.X", where, FALSE) + ???? ## our
    >>>> toeplitz() only has 'x'; want the generic "here" rather
    >>>> than "out there" ???? setGeneric("toeplitz",
    >>>> function(x, ...)  standardGeneric("toeplitz"),
    >>>> ??????????? useAsDefault= function(x, ...)
    >>>> stats::toeplitz(x),
    >>>> 
    >>>> On 2023-06-13 8:01 pm, Simon Urbanek wrote:
    >>>>> I agree that this is not an R issue, but rather user
    >>>>> error of not defining a proper generic so the check is
    >>>>> right. Obviously, defining a generic with
    >>>>> implementation-specific ncol default makes no sense at
    >>>>> all, it should only be part of the method
    >>>>> implementation. If one was to implement the same
    >>>>> default behavior in the generic itself (not
    >>>>> necessarily a good idea) the default would be ncol =
    >>>>> if (complete) nrow(qr.R(qr, TRUE)) else
    >>>>> min(dim(qr.R(qr, TRUE))) to not rely on the internals
    >>>>> of the implementation.
    >>>>> 
    >>>>> Cheers, Simon
    >>>>> 
    >>>>> 
>>>>> On 14/06/2023, at 6:03 AM, Kasper Daniel Hansen
>>>>> <kasperdanielhansen at gmail.com> wrote:
    >>>>>> 
>>>>> On Sat, Jun 3, 2023 at 11:51?AM Mikael Jagan
    >>>>>> <jaganmn2 at gmail.com>
>>>>> wrote:
    >>>>>> 
    >>>>>>> The formals of the newly generic 'qr.X' are
    >>>>>>> inherited from the non-generic function in the base
    >>>>>>> namespace.? Notably, the inherited default value of
    >>>>>>> formal argument 'ncol' relies on lazy evaluation:
    >>>>>>> 
    >>>>>>>> formals(qr.X)[["ncol"]]
    >>>>>>> ???? if (complete) nrow(R) else min(dim(R))
    >>>>>>> 
    >>>>>>> where 'R' must be defined in the body of any method
    >>>>>>> that might evaluate 'ncol'.
    >>>>>>> 
    >>>>>> 
>>>>> Perhaps I am misunderstanding something, but I think
    >>>>>> Mikael's
>>>>> expectations
>>>>> about the scoping rules of R are wrong.? The enclosing
    >>>>>> environment
>>>>> of ncol
>>>>> is where it was _defined_ not where it is _called_
    >>>>>> (apologies if I am
>>>>> messing up the computer science terminology here).
    >>>>>> 
>>>>> This suggests to me that codetools is right.? But a more
    >>>>>> extended
>>>>> example
>>>>> would be useful. Perhaps there is something special with
    >>>>>> setOldClass()
>>>>> which I am no aware of.
    >>>>>> 
>>>>> Also, Bioconductor has 100s of packages with S4 where
    >>>>>> codetools
>>>>> works well.
    >>>>>> 
>>>>> Kasper
    >>>>>> 
>>>>> ????[[alternative HTML version deleted]]
    >>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>>>>> 
    >>>>> 
    >>>> 
    >>>> ______________________________________________
    >>>> R-devel at r-project.org mailing list
    >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> -- 
    >>> Herv? Pag?s
    >>> 
    >>> Bioconductor Core Team hpages.on.github at gmail.com
    >>


From @ndre@@@b|@ette @end|ng |rom un|-due@de  Fri Jun 16 13:00:47 2023
From: @ndre@@@b|@ette @end|ng |rom un|-due@de (Andreas =?UTF-8?B?QmzDpHR0ZQ==?=)
Date: Fri, 16 Jun 2023 13:00:47 +0200
Subject: [Rd] download.file() issue with pdf docs on Windows: Set mode="wb"
 automatically?
Message-ID: <3C3BEE0D-446C-40D1-AB37-0FF543E32F65@uni-due.de>

Dear colleagues,

 

Windows users in an R course I teach encountered issues with downloading a pdf document with `download.file()` when trying to open it with `pdftools::pdf_info()`.

 

Indeed, on Windows pdf files downloaded using `download.file() are corrupted unless you set `mode="wb"`. This scenario is actually to be anticipated. The? documentation of download.file() says clearly:

? 

"""

The choice of binary transfer (mode = "wb" or "ab") is important on Windows, since unlike Unix-alikes it does distinguish between text and binary files and for text transfers changes \n line endings to \r\n (aka ?CRLF?).

 

On Windows, if mode is not supplied (missing()) and url ends in one of .gz, .bz2, .xz, .tgz, .zip, .jar, .rda, .rds or .RData, mode = "wb" is set so that a binary transfer is done to help unwary users.

 

Code written to download binary files must use mode = "wb" (or "ab"), but the problems incurred by a text transfer will only be seen on Windows.

"""

 

However, many "unwary users" will not read the (very clear) documentation. So I suggest to consider including pdf documents into the list of documents for which mode = "wb" is set automatically.

 

This would require to change this line of the R source code:

https://github.com/wch/r-source/blob/197d25ca9c5a5132dbc366667137ed11255c099b/src/library/utils/R/windows/download.file.R#L30

 

As follows:

if(missing(mode) && length(grep(\\.(gz|bz2|xz|tgz|zip|jar|rd[as]|RData|pdf)$, URLdecode(url))))

??? mode <- "wb"

 

I am not sure whether you would see this as arbitrarily violating some logic. Yet I am quite sure that many users not used to reading the documentation carefully have struggled with this issue.

 

This is an issue I wrote for my course:

https://github.com/ablaette/learningR/issues/24

 

And this is the code that we used:

gruene_btw2021 <- "https://cms.gruene.de/uploads/documents/2021_Wahlprogrammentwurf.pdf"

gruene_btw2021_local <- tempfile()

download.file(url = gruene_btw2021, destfile = gruene_btw2021_local)

pdftools::pdf_info(gruene_btw2021_local)

 

 

Kind regards

Andreas

 

 

 

--

Prof. Dr. Andreas Blaette

Professor of Public Policy 

University of Duisburg-Essen 


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Fri Jun 16 14:26:09 2023
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 16 Jun 2023 14:26:09 +0200
Subject: [Rd] Parts of test in datetime3.R not working
In-Reply-To: <AM9PR09MB4563DC6EF1BC1D7FE20931069C5BA@AM9PR09MB4563.eurprd09.prod.outlook.com>
References: <AM9PR09MB4563DC6EF1BC1D7FE20931069C5BA@AM9PR09MB4563.eurprd09.prod.outlook.com>
Message-ID: <796CB56B-5C46-45AA-AB4D-007C14F8D48A@gmail.com>

Yep, that is a pretty straightforward blunder. It's "stopifnot <- function(..., exprs =", so partial matching does not happen.

Fixed in R-patched and R-devel (a last-minute addition to 4.3.1 during code freeze would only happen with truly disastrous bugs).

Peter

> On 15 Jun 2023, at 11:57 , Korpela Mikko <mikko.korpela at maanmittauslaitos.fi> wrote:
> 
> In test file datetime3.R, one call to stopifnot() has an argument named "expr" which should probably be "exprs". There are three tests wrapped in braces of which only the last one, "omitted 195 entries", is currently checked.
> 
> Proposed patch:
> 
> --- tests/datetime3.R	(revision 84544)
> +++ tests/datetime3.R	(working copy)
> @@ -45,7 +45,7 @@
> c2 <- capture.output(print(dt, max = 6))
> writeLines(tail(cc, 4))
> writeLines(c2)
> -stopifnot(expr = {
> +stopifnot(exprs = {
>     grepl("omitted 151 entries", tail(cc, 1))
>                   !anyDuplicated(tail(cc, 2))
>     grepl("omitted 195 entries", tail(c2, 1))
> 
> -- 
> Best regards,
> Mikko
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From bbo|ker @end|ng |rom gm@||@com  Fri Jun 16 14:56:51 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 16 Jun 2023 08:56:51 -0400
Subject: [Rd] why does [A-Z] include 'T' in an Estonian locale?
In-Reply-To: <1F2110A5-094F-4693-BBC5-AD997DA64FFA@gmail.com>
References: <f00a6b75-7e53-03fa-f3ef-cd3d46cd38dc@mcmaster.ca>
 <1F2110A5-094F-4693-BBC5-AD997DA64FFA@gmail.com>
Message-ID: <7d766eba-0e40-24ed-7b8e-38acdc750ace@gmail.com>

   Yes.
   FWIW I submitted a request for a documentation fix to TRE (to 
document that it actually uses Unicode order, not collation order, to 
define ranges, just like most (but not all) other regex engines ...)

https://github.com/laurikari/tre/issues/88

On 2023-06-16 5:16 a.m., peter dalgaard wrote:
> Just for amusement: Similar messups occur with Danish and its three extra letters:
> 
>> Sys.setlocale("LC_ALL", "da_DK")
> [1] "da_DK/da_DK/da_DK/C/da_DK/en_US.UTF-8"
>> sort(c(LETTERS,"?","?","?"))
>   [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
> [20] "T" "U" "V" "W" "X" "Y" "Z" "?" "?" "?"
> 
>> grepl("[A-?]", "?")
> [1] FALSE
>> grepl("[A-?]", "?")
> [1] FALSE
>> grepl("[A-?]", "?")
> [1] TRUE
>> grepl("[A-?]", "?")
> [1] FALSE
>> grepl("[A-?]", "?")
> [1] TRUE
>> grepl("[A-?]", "?")
> [1] TRUE
> 
> So for character ranges, the order is ?,?,? (which is how they'd collate in Swedish, except that Swedish uses diacriticals rather than ? and ?).
> 
>> Sys.setlocale("LC_ALL", "sv_SE")
> [1] "sv_SE/sv_SE/sv_SE/C/sv_SE/en_US.UTF-8"
>> sort(c(LETTERS,"?","?","?"))
>   [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
> [20] "T" "U" "V" "W" "X" "Y" "Z" "?" "?" "?"
>> sort(c(LETTERS,"?","?","?"))
>   [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
> [20] "T" "U" "V" "W" "X" "Y" "Z" "?" "?" "?"
> 
> 
> 
>> On 30 May 2023, at 17:45 , Ben Bolker <bbolker at gmail.com> wrote:
>>
>>   Inspired by this old Stack Overflow question
>>
>> https://stackoverflow.com/questions/19765610/when-does-locale-affect-rs-regular-expressions
>>
>> I was wondering why this is TRUE:
>>
>> Sys.setlocale("LC_ALL", "et_EE")
>> grepl("[A-Z]", "T")
>>
>> TRE's documentation at <https://laurikari.net/tre/documentation/regex-syntax/> says that a range "is shorthand for the full range of characters between those two [endpoints] (inclusive) in the collating sequence".
>>
>> Yet, T is *not* between A and Z in the Estonian collating sequence:
>>
>> sort(LETTERS)
>> [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
>> [20] "Z" "T" "U" "V" "W" "X" "Y"
>>
>>   I realize that this may be a question about TRE rather than about R *per se* (FWIW the grepl() result is also TRUE with `perl = TRUE`, so the question also applies to PCRE), but I'm wondering if anyone has any insights ...  (and yes, I know that the correct answer is "use [:alpha:] and don't worry about it")
>>
>> (In contrast, the ICU engine underlying stringi/stringr says "[t]he characters to include are determined by Unicode code point ordering" - see
>>
>> https://stackoverflow.com/questions/76365426/does-stringrs-regex-engine-translate-a-z-into-abcdefghijklmnopqrstuvwyz/76366163#76366163
>>
>> for links)
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


