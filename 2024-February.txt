From x|ny|@xu97 @end|ng |rom gm@||@com  Thu Feb  1 17:28:57 2024
From: x|ny|@xu97 @end|ng |rom gm@||@com (Xinyi)
Date: Thu, 1 Feb 2024 16:28:57 +0000
Subject: [Rd] [Feature Request] Hide API Key in download.file() / R's libcurl
Message-ID: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>

Hi all,

When trying to install a package from R using install.packages(), it will
print out the full url address (of the remote repository) it was trying to
access. A bit further digging shows it is from the in_do_curlDownload
method from R's libcurl
<https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c>:
install.packages() calls download.packages(), and download.packages() calls
download.file(), which uses "libcurl" as its default method.

This line from R mirror
<https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c#L772>
("if (!quiet) REprintf(_("trying URL '%s'\n"), url);")  prints the full url
it is trying to access.

This is totally fine for public urls without credentials, but in the case
that a given url contains an API key, it poses security issues. For
example, if the getOption("repos") has been overridden to a
customized repository (protected by API keys), then
> install.packages("zoo")
Installing packages into '--removed local directory path--'
trying URL 'https://--removed userid--:--removed
api-key-- at repository-addresss.com:4443/.../src/contrib/zoo_1.8-12.tar.gz  '
Content type 'application/x-gzip' length 782344 bytes (764 KB)
===================================
downloaded 764 KB

* installing *source* package 'zoo' ...
-- further logs removed --
>

I also tried several other options:

1. quite=1
> install.packages("zoo", quite=1)
It did hide the url, but it also hid all other useful information.
2. method="curl"
> install.packages("zoo", method="curl")
This does not print the url when the download is successful, but if there
were any errors, it still prints the url with API key in it.
3. method="wget"
> install.packages("zoo", method="wget")
This hides API key by *password*, but I wasn't able to install packages
with this method even with public repos, with the error "Warning: unable to
access index for repository https://cloud.r-project.org/src/contrib/4.3:
'wget' call had nonzero exit status"


In other dynamic languages' package managers like Python's pip, API keys
are hidden by default since pip 18.x in 2018, and masked by "****" from pip
19.x in 2019, see below examples. Can we get a similar default behaviour in
R?

1. with pip 10.x
$ pip install numpy -v # API key was not hided
Looking in indexes:  https://--removed userid--:--removed
api-key-- at repository-addresss.com:4443/.../pypi/simple
2. with pip 18.x # All credentials are removed by pip
$ pip install numpy -v
Looking in indexes:  https://repository-addresss.com:4443/
.../pypi/simple
3. with pip 19.x onwards # userid is kept, API key is replaced by ****
$ pip install numpy -v
Looking in indexes:  https://userid:****@
repository-addresss.com:4443/.../pypi/simple


I was instructed by https://www.r-project.org/bugs.html that I should get
some discussion on r-devel before filing a feature request. So looking
forward to comments/suggestions.

Thanks,
Xinyi

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Feb  1 18:37:15 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 1 Feb 2024 12:37:15 -0500
Subject: [Rd] [Feature Request] Hide API Key in download.file() / R's
 libcurl
In-Reply-To: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
References: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
Message-ID: <63240c58-da4e-4d38-902c-d1588e2acb63@gmail.com>

I've just been reading 
https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication, and it 
states that putting userid:password in the URL is deprecated, but it 
does make sense that R should protect users who still use that scheme.

Duncan Murdoch

On 01/02/2024 11:28 a.m., Xinyi wrote:
> Hi all,
> 
> When trying to install a package from R using install.packages(), it will
> print out the full url address (of the remote repository) it was trying to
> access. A bit further digging shows it is from the in_do_curlDownload
> method from R's libcurl
> <https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c>:
> install.packages() calls download.packages(), and download.packages() calls
> download.file(), which uses "libcurl" as its default method.
> 
> This line from R mirror
> <https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c#L772>
> ("if (!quiet) REprintf(_("trying URL '%s'\n"), url);")  prints the full url
> it is trying to access.
> 
> This is totally fine for public urls without credentials, but in the case
> that a given url contains an API key, it poses security issues. For
> example, if the getOption("repos") has been overridden to a
> customized repository (protected by API keys), then
>> install.packages("zoo")
> Installing packages into '--removed local directory path--'
> trying URL 'https://--removed userid--:--removed
> api-key-- at repository-addresss.com:4443/.../src/contrib/zoo_1.8-12.tar.gz  '
> Content type 'application/x-gzip' length 782344 bytes (764 KB)
> ===================================
> downloaded 764 KB
> 
> * installing *source* package 'zoo' ...
> -- further logs removed --
>>
> 
> I also tried several other options:
> 
> 1. quite=1
>> install.packages("zoo", quite=1)
> It did hide the url, but it also hid all other useful information.
> 2. method="curl"
>> install.packages("zoo", method="curl")
> This does not print the url when the download is successful, but if there
> were any errors, it still prints the url with API key in it.
> 3. method="wget"
>> install.packages("zoo", method="wget")
> This hides API key by *password*, but I wasn't able to install packages
> with this method even with public repos, with the error "Warning: unable to
> access index for repository https://cloud.r-project.org/src/contrib/4.3:
> 'wget' call had nonzero exit status"
> 
> 
> In other dynamic languages' package managers like Python's pip, API keys
> are hidden by default since pip 18.x in 2018, and masked by "****" from pip
> 19.x in 2019, see below examples. Can we get a similar default behaviour in
> R?
> 
> 1. with pip 10.x
> $ pip install numpy -v # API key was not hided
> Looking in indexes:  https://--removed userid--:--removed
> api-key-- at repository-addresss.com:4443/.../pypi/simple
> 2. with pip 18.x # All credentials are removed by pip
> $ pip install numpy -v
> Looking in indexes:  https://repository-addresss.com:4443/
> .../pypi/simple
> 3. with pip 19.x onwards # userid is kept, API key is replaced by ****
> $ pip install numpy -v
> Looking in indexes:  https://userid:****@
> repository-addresss.com:4443/.../pypi/simple
> 
> 
> I was instructed by https://www.r-project.org/bugs.html that I should get
> some discussion on r-devel before filing a feature request. So looking
> forward to comments/suggestions.
> 
> Thanks,
> Xinyi
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Feb  3 22:33:34 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 4 Feb 2024 10:33:34 +1300
Subject: [Rd] [Feature Request] Hide API Key in download.file() / R's
 libcurl
In-Reply-To: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
References: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
Message-ID: <4A2FF313-9285-43C9-9179-6A4C93342D48@R-project.org>

Any reason why you didn't use quiet=TRUE to suppress that output?

There is no official API structure for credentials in R repositories, so R has no way of knowing which part of the URL are credentials as it is not under R's purview - it could be part of the path or anything, so there is no way R can reliably mask it. Hence it makes more sense for the user to suppress the output if they think it may contain sensitive information - and R supports that.

If that's still not enough, then please make a concrete proposal that defines exactly what kind processing you'd like to see under what conditions - and how you think that will solve the problem.

Cheers,
Simon



> On Feb 2, 2024, at 5:28 AM, Xinyi <xinyi.xu97 at gmail.com> wrote:
> 
> Hi all,
> 
> When trying to install a package from R using install.packages(), it will
> print out the full url address (of the remote repository) it was trying to
> access. A bit further digging shows it is from the in_do_curlDownload
> method from R's libcurl
> <https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c>:
> install.packages() calls download.packages(), and download.packages() calls
> download.file(), which uses "libcurl" as its default method.
> 
> This line from R mirror
> <https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c#L772>
> ("if (!quiet) REprintf(_("trying URL '%s'\n"), url);")  prints the full url
> it is trying to access.
> 
> This is totally fine for public urls without credentials, but in the case
> that a given url contains an API key, it poses security issues. For
> example, if the getOption("repos") has been overridden to a
> customized repository (protected by API keys), then
>> install.packages("zoo")
> Installing packages into '--removed local directory path--'
> trying URL 'https://--removed userid--:--removed
> api-key-- at repository-addresss.com:4443/.../src/contrib/zoo_1.8-12.tar.gz  '
> Content type 'application/x-gzip' length 782344 bytes (764 KB)
> ===================================
> downloaded 764 KB
> 
> * installing *source* package 'zoo' ...
> -- further logs removed --
>> 
> 
> I also tried several other options:
> 
> 1. quite=1
>> install.packages("zoo", quite=1)
> It did hide the url, but it also hid all other useful information.
> 2. method="curl"
>> install.packages("zoo", method="curl")
> This does not print the url when the download is successful, but if there
> were any errors, it still prints the url with API key in it.
> 3. method="wget"
>> install.packages("zoo", method="wget")
> This hides API key by *password*, but I wasn't able to install packages
> with this method even with public repos, with the error "Warning: unable to
> access index for repository https://cloud.r-project.org/src/contrib/4.3:
> 'wget' call had nonzero exit status"
> 
> 
> In other dynamic languages' package managers like Python's pip, API keys
> are hidden by default since pip 18.x in 2018, and masked by "****" from pip
> 19.x in 2019, see below examples. Can we get a similar default behaviour in
> R?
> 
> 1. with pip 10.x
> $ pip install numpy -v # API key was not hided
> Looking in indexes:  https://--removed userid--:--removed
> api-key-- at repository-addresss.com:4443/.../pypi/simple
> 2. with pip 18.x # All credentials are removed by pip
> $ pip install numpy -v
> Looking in indexes:  https://repository-addresss.com:4443/
> .../pypi/simple
> 3. with pip 19.x onwards # userid is kept, API key is replaced by ****
> $ pip install numpy -v
> Looking in indexes:  https://userid:****@
> repository-addresss.com:4443/.../pypi/simple
> 
> 
> I was instructed by https://www.r-project.org/bugs.html that I should get
> some discussion on r-devel before filing a feature request. So looking
> forward to comments/suggestions.
> 


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Sun Feb  4 06:28:57 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Sat, 3 Feb 2024 21:28:57 -0800
Subject: [Rd] =?utf-8?q?NOTE=3A_multiple_local_function_definitions_for_?=
 =?utf-8?q?=E2=80=98fun=E2=80=99_with_different_formal_arguments?=
Message-ID: <d21ed424-ffa4-4f1c-b743-306a443989c4@gmail.com>

Hi,

I just ran into this 'R CMD check' NOTE for the first time:

* checking R code for possible problems ... NOTE
toto: multiple local function definitions for ?fun? with different
 ? formal arguments

The "offending" code is something like this (simplified from the real code):

toto <- function(mode)
{
 ??? if (mode == 1)
 ??????? fun <- function(a, b) a*b
 ??? else
 ??????? fun <- function(u, v, w) (u + v) / w
 ??? fun
}

Is that NOTE really intended? Hard to see why this code would be 
considered "wrong".

I know it's just a NOTE but still...

Thanks,

H.

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From |zm|r||g @end|ng |rom m@||@n|h@gov  Sun Feb  4 16:55:13 2024
From: |zm|r||g @end|ng |rom m@||@n|h@gov (Izmirlian, Grant (NIH/NCI) [E])
Date: Sun, 4 Feb 2024 15:55:13 +0000
Subject: [Rd] NOTE: multiple local function definitions for ?fun? with
 different formal arguments
In-Reply-To: <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
Message-ID: <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>

Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result

toto <- function(mode)
{
    ifelse(mode == 1,
        function(a,b) a*b,
        function(u, v, w) (u + v) / w)
}


________________________________
From: Grant Izmirlian <izmirlidroid at gmail.com>
Date: Sun, Feb 4, 2024, 10:44 AM
To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov>
Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2

Hi,

I just ran into this 'R CMD check' NOTE for the first time:

* checking R code for possible problems ... NOTE
toto: multiple local function definitions for ?fun? with different
  formal arguments

The "offending" code is something like this (simplified from the real code):

toto <- function(mode)
{
    if (mode == 1)
        fun <- function(a, b) a*b
    else
        fun <- function(u, v, w) (u + v) / w
    fun
}

Is that NOTE really intended? Hard to see why this code would be
considered "wrong".

I know it's just a NOTE but still...

Thanks,

H.

--
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>


CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Feb  4 18:07:24 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 4 Feb 2024 12:07:24 -0500
Subject: [Rd] NOTE: multiple local function definitions for ?fun? with
 different formal arguments
In-Reply-To: <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
Message-ID: <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>

On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:
> Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result

I think something happened to your explanation...

> 
> toto <- function(mode)
> {
>      ifelse(mode == 1,
>          function(a,b) a*b,
>          function(u, v, w) (u + v) / w)
> }

It's a bad idea to use ifelse() when you really want if() ... else ... . 
  In this case it works, but it doesn't always.  So the workaround should be


toto <- function(mode)
{
     if(mode == 1)
         function(a,b) a*b
     else
         function(u, v, w) (u + v) / w
}


> 
> 
> ________________________________
> From: Grant Izmirlian <izmirlidroid at gmail.com>
> Date: Sun, Feb 4, 2024, 10:44 AM
> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov>
> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
> 
> Hi,
> 
> I just ran into this 'R CMD check' NOTE for the first time:
> 
> * checking R code for possible problems ... NOTE
> toto: multiple local function definitions for ?fun? with different
>    formal arguments
> 
> The "offending" code is something like this (simplified from the real code):
> 
> toto <- function(mode)
> {
>      if (mode == 1)
>          fun <- function(a, b) a*b
>      else
>          fun <- function(u, v, w) (u + v) / w
>      fun
> }
> 
> Is that NOTE really intended? Hard to see why this code would be
> considered "wrong".
> 
> I know it's just a NOTE but still...

I agree it's a false positive, but the issue is that you have a function 
object in your function which can't be called unconditionally.  The 
workaround doesn't create such an object.

Recognizing that your function never tries to call fun requires global 
inspection of toto(), and most of the checks are based on local inspection.

Duncan Murdoch


From hhoe|||n @end|ng |rom gm@||@com  Sun Feb  4 20:41:51 2024
From: hhoe|||n @end|ng |rom gm@||@com (Holger Hoefling)
Date: Sun, 4 Feb 2024 20:41:51 +0100
Subject: [Rd] Advice debugging M1Mac check errors
Message-ID: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>

Hi,

I wanted to ask if people have good advice on how to debug M1Mac package
check errors when you don?t have a Mac? Is a cloud machine the best option
or is there something else?

Thanks

Holger

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sun Feb  4 20:51:37 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 4 Feb 2024 13:51:37 -0600
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
Message-ID: <26047.60105.385115.834455@rob.eddelbuettel.com>


On 4 February 2024 at 20:41, Holger Hoefling wrote:
| I wanted to ask if people have good advice on how to debug M1Mac package
| check errors when you don?t have a Mac? Is a cloud machine the best option
| or is there something else?

a) Use the 'mac builder' CRAN offers:
   https://mac.r-project.org/macbuilder/submit.html 

b) Use the newly added M1 runners at GitHub Actions,
   https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/

Option a) is pretty good as the machine is set up for CRAN and builds
fast. Option b) gives you more control should you need it.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pro|jcn@@h @end|ng |rom gm@||@com  Sun Feb  4 22:47:27 2024
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sun, 4 Feb 2024 13:47:27 -0800
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <26047.60105.385115.834455@rob.eddelbuettel.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <26047.60105.385115.834455@rob.eddelbuettel.com>
Message-ID: <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>

Slightly tangential: I had some woes with some vignettes in my
optimx and nlsr packages (actually in examples comparing to OTHER
packages) because the M? processors don't have 80 bit registers of
the old IEEE 754 arithmetic, so some existing "tolerances" are too
small when looking to see if is small enough to "converge", and one
gets "did not converge" type errors. There are workarounds,
but the discussion is beyond this post. However, worth awareness that
the code may be mostly correct except for appropriate tests of
smallness for these processors.

JN




On 2024-02-04 11:51, Dirk Eddelbuettel wrote:
> 
> On 4 February 2024 at 20:41, Holger Hoefling wrote:
> | I wanted to ask if people have good advice on how to debug M1Mac package
> | check errors when you don?t have a Mac? Is a cloud machine the best option
> | or is there something else?
> 
> a) Use the 'mac builder' CRAN offers:
>     https://mac.r-project.org/macbuilder/submit.html
> 
> b) Use the newly added M1 runners at GitHub Actions,
>     https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
> 
> Option a) is pretty good as the machine is set up for CRAN and builds
> fast. Option b) gives you more control should you need it.
> 
> Dirk
>


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Feb  4 23:00:15 2024
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 4 Feb 2024 17:00:15 -0500
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
References: <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
Message-ID: <49032727-A982-46B3-B98F-55304724B573@gmail.com>

I think I had that problem with the minimaxApprox package as well.

Avi

Sent from my iPhone

> On Feb 4, 2024, at 4:47?PM, J C Nash <profjcnash at gmail.com> wrote:
> 
> ?Slightly tangential: I had some woes with some vignettes in my
> optimx and nlsr packages (actually in examples comparing to OTHER
> packages) because the M? processors don't have 80 bit registers of
> the old IEEE 754 arithmetic, so some existing "tolerances" are too
> small when looking to see if is small enough to "converge", and one
> gets "did not converge" type errors. There are workarounds,
> but the discussion is beyond this post. However, worth awareness that
> the code may be mostly correct except for appropriate tests of
> smallness for these processors.
> 
> JN
> 
> 
> 
> 
>> On 2024-02-04 11:51, Dirk Eddelbuettel wrote:
>> On 4 February 2024 at 20:41, Holger Hoefling wrote:
>> | I wanted to ask if people have good advice on how to debug M1Mac package
>> | check errors when you don?t have a Mac? Is a cloud machine the best option
>> | or is there something else?
>> a) Use the 'mac builder' CRAN offers:
>>    https://mac.r-project.org/macbuilder/submit.html
>> b) Use the newly added M1 runners at GitHub Actions,
>>    https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
>> Option a) is pretty good as the machine is set up for CRAN and builds
>> fast. Option b) gives you more control should you need it.
>> Dirk
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  5 00:26:32 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 4 Feb 2024 18:26:32 -0500
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <26047.60105.385115.834455@rob.eddelbuettel.com>
 <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
Message-ID: <df8d1572-ff79-4a52-a49e-f83d94fd4cc2@gmail.com>

Hi John.

I don't think the 80 bit format was part of IEEE 754; I think it was an 
Intel invention for the 8087 chip (which I believe preceded that 
standard), and didn't make it into the standard.

The standard does talk about 64 bit and 128 bit floating point formats, 
but not 80 bit.

Duncan Murdoch

On 04/02/2024 4:47 p.m., J C Nash wrote:
> Slightly tangential: I had some woes with some vignettes in my
> optimx and nlsr packages (actually in examples comparing to OTHER
> packages) because the M? processors don't have 80 bit registers of
> the old IEEE 754 arithmetic, so some existing "tolerances" are too
> small when looking to see if is small enough to "converge", and one
> gets "did not converge" type errors. There are workarounds,
> but the discussion is beyond this post. However, worth awareness that
> the code may be mostly correct except for appropriate tests of
> smallness for these processors.
> 
> JN
> 
> 
> 
> 
> On 2024-02-04 11:51, Dirk Eddelbuettel wrote:
>>
>> On 4 February 2024 at 20:41, Holger Hoefling wrote:
>> | I wanted to ask if people have good advice on how to debug M1Mac package
>> | check errors when you don?t have a Mac? Is a cloud machine the best option
>> | or is there something else?
>>
>> a) Use the 'mac builder' CRAN offers:
>>      https://mac.r-project.org/macbuilder/submit.html
>>
>> b) Use the newly added M1 runners at GitHub Actions,
>>      https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
>>
>> Option a) is pretty good as the machine is set up for CRAN and builds
>> fast. Option b) gives you more control should you need it.
>>
>> Dirk
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From kev|nu@hey @end|ng |rom gm@||@com  Mon Feb  5 00:31:52 2024
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Sun, 4 Feb 2024 15:31:52 -0800
Subject: [Rd] [Feature Request] Hide API Key in download.file() / R's
 libcurl
In-Reply-To: <4A2FF313-9285-43C9-9179-6A4C93342D48@R-project.org>
References: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
 <4A2FF313-9285-43C9-9179-6A4C93342D48@R-project.org>
Message-ID: <CAJXgQP1BD6VUCCN5e3zeRkpokxvddDWQOvkHsLoZokkN_xf6TA@mail.gmail.com>

For cases like these, I think it would be more useful to have some
mechanism for associating URLs / hosts with credentials, and have R use
those credentials by default whenever accessing those URLs. Since
download.file() now supports custom headers, this could be a mechanism for
setting headers to be used by default when downloading files from
particular URLs. Then, users could do something like:

    options(download.file.headers = list(
        example.org = c(Authorization = "<...>")
    ))

And those headers would be used automatically by download.file() whenever
talking to that server.

All of that to say -- I think the better way forward would be to make it
easier to safely use authentication credentials in download.file(), rather
than just tooling in support for suppressing specific types of output.

Best,
Kevin


On Sat, Feb 3, 2024 at 1:33?PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:
>
> Any reason why you didn't use quiet=TRUE to suppress that output?
>
> There is no official API structure for credentials in R repositories, so
R has no way of knowing which part of the URL are credentials as it is not
under R's purview - it could be part of the path or anything, so there is
no way R can reliably mask it. Hence it makes more sense for the user to
suppress the output if they think it may contain sensitive information -
and R supports that.
>
> If that's still not enough, then please make a concrete proposal that
defines exactly what kind processing you'd like to see under what
conditions - and how you think that will solve the problem.
>
> Cheers,
> Simon
>
>
>
> > On Feb 2, 2024, at 5:28 AM, Xinyi <xinyi.xu97 at gmail.com> wrote:
> >
> > Hi all,
> >
> > When trying to install a package from R using install.packages(), it
will
> > print out the full url address (of the remote repository) it was trying
to
> > access. A bit further digging shows it is from the in_do_curlDownload
> > method from R's libcurl
> > <
https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c>:
> > install.packages() calls download.packages(), and download.packages()
calls
> > download.file(), which uses "libcurl" as its default method.
> >
> > This line from R mirror
> > <
https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c#L772
>
> > ("if (!quiet) REprintf(_("trying URL '%s'\n"), url);")  prints the full
url
> > it is trying to access.
> >
> > This is totally fine for public urls without credentials, but in the
case
> > that a given url contains an API key, it poses security issues. For
> > example, if the getOption("repos") has been overridden to a
> > customized repository (protected by API keys), then
> >> install.packages("zoo")
> > Installing packages into '--removed local directory path--'
> > trying URL 'https://--removed userid--:--removed
> > api-key-- at repository-addresss.com:4443/.../src/contrib/zoo_1.8-12.tar.gz
'
> > Content type 'application/x-gzip' length 782344 bytes (764 KB)
> > ===================================
> > downloaded 764 KB
> >
> > * installing *source* package 'zoo' ...
> > -- further logs removed --
> >>
> >
> > I also tried several other options:
> >
> > 1. quite=1
> >> install.packages("zoo", quite=1)
> > It did hide the url, but it also hid all other useful information.
> > 2. method="curl"
> >> install.packages("zoo", method="curl")
> > This does not print the url when the download is successful, but if
there
> > were any errors, it still prints the url with API key in it.
> > 3. method="wget"
> >> install.packages("zoo", method="wget")
> > This hides API key by *password*, but I wasn't able to install packages
> > with this method even with public repos, with the error "Warning:
unable to
> > access index for repository https://cloud.r-project.org/src/contrib/4.3:
> > 'wget' call had nonzero exit status"
> >
> >
> > In other dynamic languages' package managers like Python's pip, API keys
> > are hidden by default since pip 18.x in 2018, and masked by "****" from
pip
> > 19.x in 2019, see below examples. Can we get a similar default
behaviour in
> > R?
> >
> > 1. with pip 10.x
> > $ pip install numpy -v # API key was not hided
> > Looking in indexes:  https://--removed userid--:--removed
> > api-key-- at repository-addresss.com:4443/.../pypi/simple
> > 2. with pip 18.x # All credentials are removed by pip
> > $ pip install numpy -v
> > Looking in indexes:  https://repository-addresss.com:4443/
> > .../pypi/simple
> > 3. with pip 19.x onwards # userid is kept, API key is replaced by ****
> > $ pip install numpy -v
> > Looking in indexes:  https://userid:****@
> > repository-addresss.com:4443/.../pypi/simple
> >
> >
> > I was instructed by https://www.r-project.org/bugs.html that I should
get
> > some discussion on r-devel before filing a feature request. So looking
> > forward to comments/suggestions.
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From pro|jcn@@h @end|ng |rom gm@||@com  Mon Feb  5 01:43:32 2024
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sun, 4 Feb 2024 16:43:32 -0800
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <df8d1572-ff79-4a52-a49e-f83d94fd4cc2@gmail.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <26047.60105.385115.834455@rob.eddelbuettel.com>
 <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
 <df8d1572-ff79-4a52-a49e-f83d94fd4cc2@gmail.com>
Message-ID: <581a8ca8-a0ea-4f88-85f5-ebe80b8fd29e@gmail.com>

80 bit registers (I don't have my original docs with me here in Victoria)
seem to have been part of the 1985 standard to which I was one of the 31 named
contributors. See

https://stackoverflow.com/questions/612507/what-are-the-applications-benefits-of-an-80-bit-extended-precision-data-type

or the Wikipedia item on IEEE 754.

It appears to have been omitted from 2008 and 2020 versions, but is still (I believe) part of
many processors. It's an internal precision for handling multiplications and accumulation,
and not one of the storage modes.

Most of the time this makes very little difference in results for R, since it is only some
operations where the extended precision gets activated. If we store quantities, we get the
regular precision. Thus very few situations using the M? chips give differences, but when
they do, it is a nuisance.

There is plenty of scope for debating the pros and cons of extended precision internally.
Not having it likely contributes to speed / bang for the buck of the M? chips. But we do
now have occasional differences in outcomes which will lead to confusion and extra work.

JN




On 2024-02-04 15:26, Duncan Murdoch wrote:
> Hi John.
> 
> I don't think the 80 bit format was part of IEEE 754; I think it was an Intel invention for the 8087 chip (which I 
> believe preceded that standard), and didn't make it into the standard.
> 
> The standard does talk about 64 bit and 128 bit floating point formats, but not 80 bit.
> 
> Duncan Murdoch
> 
> On 04/02/2024 4:47 p.m., J C Nash wrote:
>> Slightly tangential: I had some woes with some vignettes in my
>> optimx and nlsr packages (actually in examples comparing to OTHER
>> packages) because the M? processors don't have 80 bit registers of
>> the old IEEE 754 arithmetic, so some existing "tolerances" are too
>> small when looking to see if is small enough to "converge", and one
>> gets "did not converge" type errors. There are workarounds,
>> but the discussion is beyond this post. However, worth awareness that
>> the code may be mostly correct except for appropriate tests of
>> smallness for these processors.
>>
>> JN
>>
>>
>>
>>
>> On 2024-02-04 11:51, Dirk Eddelbuettel wrote:
>>>
>>> On 4 February 2024 at 20:41, Holger Hoefling wrote:
>>> | I wanted to ask if people have good advice on how to debug M1Mac package
>>> | check errors when you don?t have a Mac? Is a cloud machine the best option
>>> | or is there something else?
>>>
>>> a) Use the 'mac builder' CRAN offers:
>>> ???? https://mac.r-project.org/macbuilder/submit.html
>>>
>>> b) Use the newly added M1 runners at GitHub Actions,
>>>      
>>> https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
>>>
>>> Option a) is pretty good as the machine is set up for CRAN and builds
>>> fast. Option b) gives you more control should you need it.
>>>
>>> Dirk
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Feb  5 01:46:20 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 5 Feb 2024 13:46:20 +1300
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <df8d1572-ff79-4a52-a49e-f83d94fd4cc2@gmail.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <26047.60105.385115.834455@rob.eddelbuettel.com>
 <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
 <df8d1572-ff79-4a52-a49e-f83d94fd4cc2@gmail.com>
Message-ID: <2FE607B2-C2C5-43BB-B8ED-E90DE8708B40@R-project.org>



> On Feb 5, 2024, at 12:26 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> Hi John.
> 
> I don't think the 80 bit format was part of IEEE 754; I think it was an Intel invention for the 8087 chip (which I believe preceded that standard), and didn't make it into the standard.
> 
> The standard does talk about 64 bit and 128 bit floating point formats, but not 80 bit.
> 

Yes, the 80 bit was Intel-specific (motivated by internal operations, not as external format), but as it used to be most popular architecture, people didn't quite realize that tests relying on Intel results will be Intel-specific (PowerPC Macs had 128-bit floating point, but they were not popular enough to cause trouble in the same way). The IEEE standard allows "extended precision" formats, but doesn't prescribe their format or precision - and they are optional. Arm64 CPUs only support 64-bit double precision in hardware (true both on macOS and Windows), so only what is in the basic standard. There are 128-bit floating point solutions in software, but, obviously, they are a lot slower (several orders of magnitude). Apple has been asking for priorities in the scientific community and 128-bit floating number support was not something high on people's priority list. It is far from trivial, because there is a long list of operations (all variations of the math functions) so I wouldn't expect this to change anytime soon - in fact once Microsoft's glacial move is done we'll be likely seeing only 64-bit everywhere.

That said even if you don't have a arm64 CPU, you can build R with --disable-long-double to get closer to the arm64 results if that is your worry.

Cheers,
Simon


> 
> On 04/02/2024 4:47 p.m., J C Nash wrote:
>> Slightly tangential: I had some woes with some vignettes in my
>> optimx and nlsr packages (actually in examples comparing to OTHER
>> packages) because the M? processors don't have 80 bit registers of
>> the old IEEE 754 arithmetic, so some existing "tolerances" are too
>> small when looking to see if is small enough to "converge", and one
>> gets "did not converge" type errors. There are workarounds,
>> but the discussion is beyond this post. However, worth awareness that
>> the code may be mostly correct except for appropriate tests of
>> smallness for these processors.
>> JN
>> On 2024-02-04 11:51, Dirk Eddelbuettel wrote:
>>> 
>>> On 4 February 2024 at 20:41, Holger Hoefling wrote:
>>> | I wanted to ask if people have good advice on how to debug M1Mac package
>>> | check errors when you don?t have a Mac? Is a cloud machine the best option
>>> | or is there something else?
>>> 
>>> a) Use the 'mac builder' CRAN offers:
>>>     https://mac.r-project.org/macbuilder/submit.html
>>> 
>>> b) Use the newly added M1 runners at GitHub Actions,
>>>     https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
>>> 
>>> Option a) is pretty good as the machine is set up for CRAN and builds
>>> fast. Option b) gives you more control should you need it.
>>> 
>>> Dirk
>>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From pro|jcn@@h @end|ng |rom gm@||@com  Mon Feb  5 02:20:37 2024
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sun, 4 Feb 2024 17:20:37 -0800
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <2FE607B2-C2C5-43BB-B8ED-E90DE8708B40@R-project.org>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <26047.60105.385115.834455@rob.eddelbuettel.com>
 <e7c3318f-7f31-42af-9bd0-c8df686d5bcb@gmail.com>
 <df8d1572-ff79-4a52-a49e-f83d94fd4cc2@gmail.com>
 <2FE607B2-C2C5-43BB-B8ED-E90DE8708B40@R-project.org>
Message-ID: <eb03da30-2957-4ee7-ae45-c29646e18909@gmail.com>

Simon's comments add another viewpoint to mine. My own knowledge of the
impact of "disable-long-double" does not include an understanding of
exactly what effect this has. One needs to spend a lot of time and effort
with excruciating details. Fortunately, we can usually get away with
64 bit FP arithmetic for almost all applications. I suspect applications
that need really long precision are likely best handled with special
hardware.

JN


On 2024-02-04 16:46, Simon Urbanek wrote:
> 
> 
>> On Feb 5, 2024, at 12:26 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> Hi John.
>>
>> I don't think the 80 bit format was part of IEEE 754; I think it was an Intel invention for the 8087 chip (which I believe preceded that standard), and didn't make it into the standard.
>>
>> The standard does talk about 64 bit and 128 bit floating point formats, but not 80 bit.
>>
> 
> Yes, the 80 bit was Intel-specific (motivated by internal operations, not as external format), but as it used to be most popular architecture, people didn't quite realize that tests relying on Intel results will be Intel-specific (PowerPC Macs had 128-bit floating point, but they were not popular enough to cause trouble in the same way). The IEEE standard allows "extended precision" formats, but doesn't prescribe their format or precision - and they are optional. Arm64 CPUs only support 64-bit double precision in hardware (true both on macOS and Windows), so only what is in the basic standard. There are 128-bit floating point solutions in software, but, obviously, they are a lot slower (several orders of magnitude). Apple has been asking for priorities in the scientific community and 128-bit floating number support was not something high on people's priority list. It is far from trivial, because there is a long list of operations (all variations of the math functions) so I wouldn't expect this to change anytime soon - in fact once Microsoft's glacial move is done we'll be likely seeing only 64-bit everywhere.
> 
> That said even if you don't have a arm64 CPU, you can build R with --disable-long-double to get closer to the arm64 results if that is your worry.
> 
> Cheers,
> Simon
> 
> 
>>
>> On 04/02/2024 4:47 p.m., J C Nash wrote:
>>> Slightly tangential: I had some woes with some vignettes in my
>>> optimx and nlsr packages (actually in examples comparing to OTHER
>>> packages) because the M? processors don't have 80 bit registers of
>>> the old IEEE 754 arithmetic, so some existing "tolerances" are too
>>> small when looking to see if is small enough to "converge", and one
>>> gets "did not converge" type errors. There are workarounds,
>>> but the discussion is beyond this post. However, worth awareness that
>>> the code may be mostly correct except for appropriate tests of
>>> smallness for these processors.
>>> JN
>>> On 2024-02-04 11:51, Dirk Eddelbuettel wrote:
>>>>
>>>> On 4 February 2024 at 20:41, Holger Hoefling wrote:
>>>> | I wanted to ask if people have good advice on how to debug M1Mac package
>>>> | check errors when you don?t have a Mac? Is a cloud machine the best option
>>>> | or is there something else?
>>>>
>>>> a) Use the 'mac builder' CRAN offers:
>>>>      https://mac.r-project.org/macbuilder/submit.html
>>>>
>>>> b) Use the newly added M1 runners at GitHub Actions,
>>>>      https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
>>>>
>>>> Option a) is pretty good as the machine is set up for CRAN and builds
>>>> fast. Option b) gives you more control should you need it.
>>>>
>>>> Dirk
>>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Feb  5 13:17:41 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 5 Feb 2024 13:17:41 +0100
Subject: [Rd] [Feature Request] Hide API Key in download.file() / R's
 libcurl
In-Reply-To: <4A2FF313-9285-43C9-9179-6A4C93342D48@R-project.org>
References: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
 <4A2FF313-9285-43C9-9179-6A4C93342D48@R-project.org>
Message-ID: <26048.53733.550786.251117@stat.math.ethz.ch>

>>>>> Simon Urbanek 
>>>>>     on Sun, 4 Feb 2024 10:33:34 +1300 writes:

    > Any reason why you didn't use quiet=TRUE to suppress that
    > output?  

He wrote 'quite' instead of 'quiet' {see cited below '1. quite=1'}
and probably never tried the correct spelling ...

    > There is no official API structure for
    > credentials in R repositories, so R has no way of knowing
    > which part of the URL are credentials as it is not under
    > R's purview - it could be part of the path or anything, so
    > there is no way R can reliably mask it. Hence it makes
    > more sense for the user to suppress the output if they
    > think it may contain sensitive information - and R
    > supports that.

    > If that's still not enough, then please make a concrete
    > proposal that defines exactly what kind processing you'd
    > like to see under what conditions - and how you think that
    > will solve the problem.

    > Cheers, Simon



    >> On Feb 2, 2024, at 5:28 AM, Xinyi <xinyi.xu97 at gmail.com>
    >> wrote:
    >> 
    >> Hi all,
    >> 
    >> When trying to install a package from R using
    >> install.packages(), it will print out the full url
    >> address (of the remote repository) it was trying to
    >> access. A bit further digging shows it is from the
    >> in_do_curlDownload method from R's libcurl
    >> <https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c>:
    >> install.packages() calls download.packages(), and
    >> download.packages() calls download.file(), which uses
    >> "libcurl" as its default method.
    >> 
    >> This line from R mirror
    >> <https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c#L772>
    >> ("if (!quiet) REprintf(_("trying URL '%s'\n"), url);")
    >> prints the full url it is trying to access.
    >> 
    >> This is totally fine for public urls without credentials,
    >> but in the case that a given url contains an API key, it
    >> poses security issues. For example, if the
    >> getOption("repos") has been overridden to a customized
    >> repository (protected by API keys), then
    >>> install.packages("zoo")
    >> Installing packages into '--removed local directory
    >> path--' trying URL 'https://--removed userid--:--removed
    >> api-key-- at repository-addresss.com:4443/.../src/contrib/zoo_1.8-12.tar.gz
    >> ' Content type 'application/x-gzip' length 782344 bytes
    >> (764 KB) =================================== downloaded
    >> 764 KB
    >> 
    >> * installing *source* package 'zoo' ...  -- further logs
    >> removed --
    >>> 
    >> 
    >> I also tried several other options:
    >> 
    >> 1. quite=1
    >>> install.packages("zoo", quite=1)
    >> It did hide the url, but it also hid all other useful
    >> information.  2. method="curl"
    >>> install.packages("zoo", method="curl")
    >> This does not print the url when the download is
    >> successful, but if there were any errors, it still prints
    >> the url with API key in it.  3. method="wget"
    >>> install.packages("zoo", method="wget")
    >> This hides API key by *password*, but I wasn't able to
    >> install packages with this method even with public repos,
    >> with the error "Warning: unable to access index for
    >> repository https://cloud.r-project.org/src/contrib/4.3:
    >> 'wget' call had nonzero exit status"
    >> 
    >> 
    >> In other dynamic languages' package managers like
    >> Python's pip, API keys are hidden by default since pip
    >> 18.x in 2018, and masked by "****" from pip 19.x in 2019,
    >> see below examples. Can we get a similar default
    >> behaviour in R?
    >> 
    >> 1. with pip 10.x $ pip install numpy -v # API key was not
    >> hided Looking in indexes: https://--removed
    >> userid--:--removed
    >> api-key-- at repository-addresss.com:4443/.../pypi/simple
    >> 2. with pip 18.x # All credentials are removed by pip $
    >> pip install numpy -v Looking in indexes:
    >> https://repository-addresss.com:4443/ .../pypi/simple
    >> 3. with pip 19.x onwards # userid is kept, API key is
    >> replaced by **** $ pip install numpy -v Looking in
    >> indexes: https://userid:****@
    >> repository-addresss.com:4443/.../pypi/simple
    >> 
    >> 
    >> I was instructed by https://www.r-project.org/bugs.html
    >> that I should get some discussion on r-devel before
    >> filing a feature request. So looking forward to
    >> comments/suggestions.
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From x|ny|@xu97 @end|ng |rom gm@||@com  Mon Feb  5 14:09:55 2024
From: x|ny|@xu97 @end|ng |rom gm@||@com (Xinyi)
Date: Mon, 5 Feb 2024 13:09:55 +0000
Subject: [Rd] [Feature Request] Hide API Key in download.file() / R's
 libcurl
In-Reply-To: <26048.53733.550786.251117@stat.math.ethz.ch>
References: <CAOmDYzZe2ODCqgK+9sOtAAh1dVpAKK=PT7h7bs12cAFzk+ckMg@mail.gmail.com>
 <4A2FF313-9285-43C9-9179-6A4C93342D48@R-project.org>
 <26048.53733.550786.251117@stat.math.ethz.ch>
Message-ID: <CAOmDYzYnyBy4=4jAOgBdvoBaibgbAr_yHoc3zkXajSpe7+cOcg@mail.gmail.com>

Apologies for the typo in my original email. I meant ?quiet=1? and it was
working. The log was typed but not copied so that was why there was a typo.

But as stated in the reasoning - it hides all the output, so also other
useful information like where the lib is installed, compile details etc.
which will be useful for debugging. I.e. quiet=1 can be a workaround but
not a real solution.

I would know it was typo if I have only tried quite? As it would print
error telling me ?quite? is not recognised ;)

Cheers,
Xinyi



On Mon, Feb 5, 2024 at 12:17 Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Simon Urbanek
> >>>>>     on Sun, 4 Feb 2024 10:33:34 +1300 writes:
>
>     > Any reason why you didn't use quiet=TRUE to suppress that
>     > output?
>
> He wrote 'quite' instead of 'quiet' {see cited below '1. quite=1'}
> and probably never tried the correct spelling ...
>
>     > There is no official API structure for
>     > credentials in R repositories, so R has no way of knowing
>     > which part of the URL are credentials as it is not under
>     > R's purview - it could be part of the path or anything, so
>     > there is no way R can reliably mask it. Hence it makes
>     > more sense for the user to suppress the output if they
>     > think it may contain sensitive information - and R
>     > supports that.
>
>     > If that's still not enough, then please make a concrete
>     > proposal that defines exactly what kind processing you'd
>     > like to see under what conditions - and how you think that
>     > will solve the problem.
>
>     > Cheers, Simon
>
>
>
>     >> On Feb 2, 2024, at 5:28 AM, Xinyi <xinyi.xu97 at gmail.com>
>     >> wrote:
>     >>
>     >> Hi all,
>     >>
>     >> When trying to install a package from R using
>     >> install.packages(), it will print out the full url
>     >> address (of the remote repository) it was trying to
>     >> access. A bit further digging shows it is from the
>     >> in_do_curlDownload method from R's libcurl
>     >> <
> https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c
> >:
>     >> install.packages() calls download.packages(), and
>     >> download.packages() calls download.file(), which uses
>     >> "libcurl" as its default method.
>     >>
>     >> This line from R mirror
>     >> <
> https://github.com/wch/r-source/blob/trunk/src/modules/internet/libcurl.c#L772
> >
>     >> ("if (!quiet) REprintf(_("trying URL '%s'\n"), url);")
>     >> prints the full url it is trying to access.
>     >>
>     >> This is totally fine for public urls without credentials,
>     >> but in the case that a given url contains an API key, it
>     >> poses security issues. For example, if the
>     >> getOption("repos") has been overridden to a customized
>     >> repository (protected by API keys), then
>     >>> install.packages("zoo")
>     >> Installing packages into '--removed local directory
>     >> path--' trying URL 'https://--removed userid--:--removed
>     >>
> api-key-- at repository-addresss.com:4443/.../src/contrib/zoo_1.8-12.tar.gz
>     >> ' Content type 'application/x-gzip' length 782344 bytes
>     >> (764 KB) =================================== downloaded
>     >> 764 KB
>     >>
>     >> * installing *source* package 'zoo' ...  -- further logs
>     >> removed --
>     >>>
>     >>
>     >> I also tried several other options:
>     >>
>     >> 1. quite=1
>     >>> install.packages("zoo", quite=1)
>     >> It did hide the url, but it also hid all other useful
>     >> information.  2. method="curl"
>     >>> install.packages("zoo", method="curl")
>     >> This does not print the url when the download is
>     >> successful, but if there were any errors, it still prints
>     >> the url with API key in it.  3. method="wget"
>     >>> install.packages("zoo", method="wget")
>     >> This hides API key by *password*, but I wasn't able to
>     >> install packages with this method even with public repos,
>     >> with the error "Warning: unable to access index for
>     >> repository https://cloud.r-project.org/src/contrib/4.3:
>     >> 'wget' call had nonzero exit status"
>     >>
>     >>
>     >> In other dynamic languages' package managers like
>     >> Python's pip, API keys are hidden by default since pip
>     >> 18.x in 2018, and masked by "****" from pip 19.x in 2019,
>     >> see below examples. Can we get a similar default
>     >> behaviour in R?
>     >>
>     >> 1. with pip 10.x $ pip install numpy -v # API key was not
>     >> hided Looking in indexes: https://--removed
>     >> userid--:--removed
>     >> api-key-- at repository-addresss.com:4443/.../pypi/simple
>     >> 2. with pip 18.x # All credentials are removed by pip $
>     >> pip install numpy -v Looking in indexes:
>     >> https://repository-addresss.com:4443/ .../pypi/simple
>     >> 3. with pip 19.x onwards # userid is kept, API key is
>     >> replaced by **** $ pip install numpy -v Looking in
>     >> indexes: https://userid:****@
>     >> repository-addresss.com:4443/.../pypi/simple
>     >>
>     >>
>     >> I was instructed by https://www.r-project.org/bugs.html
>     >> that I should get some discussion on r-devel before
>     >> filing a feature request. So looking forward to
>     >> comments/suggestions.
>     >>
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Mon Feb  5 22:01:11 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 6 Feb 2024 00:01:11 +0300
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
Message-ID: <20240206000111.07ada026@Tarkus>

On Sun, 4 Feb 2024 20:41:51 +0100
Holger Hoefling <hhoeflin at gmail.com> wrote:

> I wanted to ask if people have good advice on how to debug M1Mac
> package check errors when you don?t have a Mac?

Apologies for not answering the question you asked, but is this about
hdf5r and problems printing R_xlen_t [*] that appeared in 1.3.8 and you
tried to solve in 1.3.9?

We had a thread about this last November:
https://stat.ethz.ch/pipermail/r-package-devel/2023q4/010123.html

To summarise, there is no single standard C format specifier that can be
used to print R_xlen_t. As an implementation detail, it can be defined
as int or ptrdiff_t (or something completely different in the future),
and ptrdiff_t itself is usually defined as long or long long (or, also,
something completely different on a weirder platform). All three basic
types can have different widths and cause painful stack-related
problems when a mismatch happens.

In R-4.4, there will be a macro R_PRIdXLEN_T defining a compatible
printf specifier. Until then (and for compatibility with R-4.3 and
lower), it's relatively safe to cast to (long long) or (ptrdiff_t) and
then use the corresponding specifier, but that's not 100% future-proof.
Also, mind the warnings that mingw compilers sometimes emit for "new"
printf specifiers despite UCRT is documented to support them.

-- 
Best regards,
Ivan

[*] https://www.stats.ox.ac.uk/pub/bdr/M1mac/hdf5r.out


From @g|@nner|n| @end|ng |rom gm@||@com  Tue Feb  6 15:25:03 2024
From: @g|@nner|n| @end|ng |rom gm@||@com (Simone Giannerini)
Date: Tue, 6 Feb 2024 15:25:03 +0100
Subject: [Rd] NROW and NCOL on NULL
In-Reply-To: <CANcXGizv3sD3kiE__EUkuaESn44mvtQMrtpO_k=FjUwFQDGnVQ@mail.gmail.com>
References: <CANcXGizv3sD3kiE__EUkuaESn44mvtQMrtpO_k=FjUwFQDGnVQ@mail.gmail.com>
Message-ID: <CANcXGiyF-2hPtYKKyMJn015EK55uS02U52wPmiW7HuxERa6ncg@mail.gmail.com>

I just saw this
------------------------------------------------------------------------
r85704 | hornik | 2023-12-19 00:33:07 -0600 (Tue, 19 Dec 2023) | 1 line
Changed paths:
   M /trunk/doc/NEWS.Rd
   M /trunk/src/library/base/R/matrix.R
   M /trunk/src/library/base/man/nrow.Rd
   M /trunk/src/library/profile/Common.R

Have NCOL(NULL) return 0 instead of 1.
------------------------------------------------------------------------

Many thanks to Kurt and the whole R-core team!

Simone

On Sat, Sep 23, 2023 at 7:43?PM Simone Giannerini <sgiannerini at gmail.com> wrote:
>
> Dear list,
>
> I do not know what would be the 'correct' answer to the following but
> I think that they should return the same value to avoid potential
> problems and hard to debug errors.
>
> Regards,
>
> Simone
> ---------------------------------------
>
> > NCOL(NULL)
> [1] 1
>
> > NROW(NULL)
> [1] 0
>
> > sessionInfo()
> R version 4.3.1 RC (2023-06-08 r84523 ucrt)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 11 x64 (build 22621)
>
> Matrix products: default
>
>
> locale:
> [1] LC_COLLATE=Italian_Italy.utf8  LC_CTYPE=Italian_Italy.utf8
> [3] LC_MONETARY=Italian_Italy.utf8 LC_NUMERIC=C
> [5] LC_TIME=Italian_Italy.utf8
>
> time zone: Europe/Rome
> tzcode source: internal
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.3.1
>
> --
> ___________________________________________________
>
> Simone Giannerini
> Dipartimento di Scienze Statistiche "Paolo Fortunati"
> Universita' di Bologna
> Via delle belle arti 41 - 40126  Bologna,  ITALY
> Tel: +39 051 2098262  Fax: +39 051 232153
> https://simonegiannerini.net/
> ___________________________________________________



-- 
___________________________________________________

Simone Giannerini
Dipartimento di Scienze Statistiche "Paolo Fortunati"
Universita' di Bologna
Via delle belle arti 41 - 40126  Bologna,  ITALY
Tel: +39 051 2098262  Fax: +39 051 232153
https://simonegiannerini.net/


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Feb  6 17:06:46 2024
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 6 Feb 2024 16:06:46 +0000
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
Message-ID: <90026864-f81c-4663-8cfe-6ae99d23307b@stats.ox.ac.uk>

On 04/02/2024 19:41, Holger Hoefling wrote:
> Hi,
> 
> I wanted to ask if people have good advice on how to debug M1Mac package
> check errors when you don?t have a Mac? Is a cloud machine the best option
> or is there something else?

I presumed this was about a CRAN package, possibly hdf5r which has a 
R-devel-only warning from the Apple clang compiler.  And that is not a 
'check error' and not something to 'debug'.

The original poster had errors for his package flsa until yesterday on 
fedora-clang and M1mac, which were compilation errors with recent LLVM 
and Apple compilers.  Again, not really something to 'debug' -- the 
compiler messages were clear and the CRAN notification contained advice 
on where in our manual to look this up.

The mac-builder service offers checks for R 4.3.0, the 'development' 
option being (last time I tried) the same as the 'release' option. (When 
I asked, Simon said that 'development' checks were only available in the 
run up to a x.y.0 when he starts package building and checks for R-devel.)


We were left to guess, but I doubt this has to do with the lack of 
'extended precision' nor long doubles longer than doubles on arm64 
macOS.  And issues with that are rather rare (much rarer than numerical 
issues for non-reference x86_64 BLAS/LAPACKs).  Of the 20,300 CRAN 
packages just 18 have M1mac-specific errors, none obviously from 
numerical inaccuracy.  A quick look back suggests we get about 20 a year 
with M1mac numerical issues, about half of which were mirrored on the 
x86_64 'noLD' checks.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From pro|jcn@@h @end|ng |rom gm@||@com  Tue Feb  6 17:37:26 2024
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Tue, 6 Feb 2024 08:37:26 -0800
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <90026864-f81c-4663-8cfe-6ae99d23307b@stats.ox.ac.uk>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <90026864-f81c-4663-8cfe-6ae99d23307b@stats.ox.ac.uk>
Message-ID: <f46816fb-12fc-4763-b4e2-08c7d312fccc@gmail.com>

M1mac numerical issues should be rare, but when they do pop up they can be disconcerting.

The following little script reveals what happens with no extended precision. A few months
ago I built this into a "package" and used https://mac.r-project.org/macbuilder/submit.html
to run it, getting the indicated result of 0 for (sum(vv1) - 1.0e0), with non-zero on my
Ryzen 7 laptop.

JN

# FPExtendedTest.R   J C Nash
loopsum <- function(vec){
    n <- length(vec)
    vsum<-0.0
    for (i in 1:n) { vsum <- vsum + vec[i]}
    vsum
}
small<-.Machine$double.eps/4 # 1/4 of the machine precision
vsmall <- rep(small, 1e4) # a long vector of small numbers
vv1 <- c(1.0, vsmall) # 1 at the front of this vector
vv2 <- c(vsmall, 1.0) # 1 at the end
(sum(vv1) - 1.0e0) # Should be > 0 for extended precision, 0 otherwise
(sum(vv2) - 1.0e0) # Should be > 0
(loopsum(vv1) - 1.0e0) # should be zero
(loopsum(vv2) - 1.0e0) # should be greater than zero



On 2024-02-06 08:06, Prof Brian Ripley via R-devel wrote:

> 
> We were left to guess, but I doubt this has to do with the lack of 'extended precision' nor long doubles longer than 
> doubles on arm64 macOS.? And issues with that are rather rare (much rarer than numerical issues for non-reference x86_64 
> BLAS/LAPACKs).? Of the 20,300 CRAN packages just 18 have M1mac-specific errors, none obviously from numerical 
> inaccuracy.? A quick look back suggests we get about 20 a year with M1mac numerical issues, about half of which were 
> mirrored on the x86_64 'noLD' checks.
>


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Tue Feb  6 20:17:20 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 6 Feb 2024 11:17:20 -0800
Subject: [Rd] NOTE: multiple local function definitions for ?fun? with
 different formal arguments
In-Reply-To: <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
Message-ID: <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>

Thanks. Workarounds are interesting but... what's the point of the NOTE 
in the first place?

H.

On 2/4/24 09:07, Duncan Murdoch wrote:
> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel 
> wrote:
>> Well you can see that yeast is exactly weekday you have.? The way out 
>> is to just not name the result
>
> I think something happened to your explanation...
>
>>
>> toto <- function(mode)
>> {
>> ???? ifelse(mode == 1,
>> ???????? function(a,b) a*b,
>> ???????? function(u, v, w) (u + v) / w)
>> }
>
> It's a bad idea to use ifelse() when you really want if() ... else ... 
> . ?In this case it works, but it doesn't always.? So the workaround 
> should be
>
>
> toto <- function(mode)
> {
> ??? if(mode == 1)
> ??????? function(a,b) a*b
> ??? else
> ??????? function(u, v, w) (u + v) / w
> }
>
>
>>
>>
>> ________________________________
>> From: Grant Izmirlian <izmirlidroid at gmail.com>
>> Date: Sun, Feb 4, 2024, 10:44 AM
>> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov>
>> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>>
>> Hi,
>>
>> I just ran into this 'R CMD check' NOTE for the first time:
>>
>> * checking R code for possible problems ... NOTE
>> toto: multiple local function definitions for ?fun? with different
>> ?? formal arguments
>>
>> The "offending" code is something like this (simplified from the real 
>> code):
>>
>> toto <- function(mode)
>> {
>> ???? if (mode == 1)
>> ???????? fun <- function(a, b) a*b
>> ???? else
>> ???????? fun <- function(u, v, w) (u + v) / w
>> ???? fun
>> }
>>
>> Is that NOTE really intended? Hard to see why this code would be
>> considered "wrong".
>>
>> I know it's just a NOTE but still...
>
> I agree it's a false positive, but the issue is that you have a 
> function object in your function which can't be called 
> unconditionally.? The workaround doesn't create such an object.
>
> Recognizing that your function never tries to call fun requires global 
> inspection of toto(), and most of the checks are based on local 
> inspection.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From |zm|r||g @end|ng |rom m@||@n|h@gov  Tue Feb  6 20:19:55 2024
From: |zm|r||g @end|ng |rom m@||@n|h@gov (Izmirlian, Grant (NIH/NCI) [E])
Date: Tue, 6 Feb 2024 19:19:55 +0000
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
Message-ID: <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>

The note refers to the fact that the function named ?fun? appears to be defined in two different ways.

From: Herv? Pag?s <hpages.on.github at gmail.com>
Sent: Tuesday, February 6, 2024 2:17 PM
To: Duncan Murdoch <murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; r-devel at r-project.org
Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments


Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?

H.
On 2/4/24 09:07, Duncan Murdoch wrote:
On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:

Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result

I think something happened to your explanation...



toto <- function(mode)
{
     ifelse(mode == 1,
         function(a,b) a*b,
         function(u, v, w) (u + v) / w)
}

It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be


toto <- function(mode)
{
    if(mode == 1)
        function(a,b) a*b
    else
        function(u, v, w) (u + v) / w
}





________________________________
From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
Date: Sun, Feb 4, 2024, 10:44 AM
To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2

Hi,

I just ran into this 'R CMD check' NOTE for the first time:

* checking R code for possible problems ... NOTE
toto: multiple local function definitions for ?fun? with different
   formal arguments

The "offending" code is something like this (simplified from the real code):

toto <- function(mode)
{
     if (mode == 1)
         fun <- function(a, b) a*b
     else
         fun <- function(u, v, w) (u + v) / w
     fun
}

Is that NOTE really intended? Hard to see why this code would be
considered "wrong".

I know it's just a NOTE but still...

I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.

Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.

Duncan Murdoch

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

--

Herv? Pag?s



Bioconductor Core Team

hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.


	[[alternative HTML version deleted]]


From |zm|r||g @end|ng |rom m@||@n|h@gov  Tue Feb  6 22:14:29 2024
From: |zm|r||g @end|ng |rom m@||@n|h@gov (Izmirlian, Grant (NIH/NCI) [E])
Date: Tue, 6 Feb 2024 21:14:29 +0000
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
Message-ID: <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>

Because functions get called and therefore, the calling sequence matters. It?s just protecting you from yourself, but as someone pointed out, there?s a way to silence such notes.
G


From: Herv? Pag?s <hpages.on.github at gmail.com>
Sent: Tuesday, February 6, 2024 2:40 PM
To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; Duncan Murdoch <murdoch.duncan at gmail.com>; r-devel at r-project.org
Subject: Re: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments


On 2/6/24 11:19, Izmirlian, Grant (NIH/NCI) [E] wrote:
The note refers to the fact that the function named ?fun? appears to be defined in two different ways.

Sure I get that. But how is that any different from a variable being defined in two different ways like in

    if (mode == 1)
        x <- -8
    else
        x <- 55

This is such a common and perfectly fine pattern. Why would this be considered a potential hazard when the variable is a function?

H.

From: Herv? Pag?s <hpages.on.github at gmail.com><mailto:hpages.on.github at gmail.com>
Sent: Tuesday, February 6, 2024 2:17 PM
To: Duncan Murdoch <murdoch.duncan at gmail.com><mailto:murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>; r-devel at r-project.org<mailto:r-devel at r-project.org>
Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments


Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?

H.
On 2/4/24 09:07, Duncan Murdoch wrote:
On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:


Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result

I think something happened to your explanation...




toto <- function(mode)
{
     ifelse(mode == 1,
         function(a,b) a*b,
         function(u, v, w) (u + v) / w)
}

It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be


toto <- function(mode)
{
    if(mode == 1)
        function(a,b) a*b
    else
        function(u, v, w) (u + v) / w
}






________________________________
From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
Date: Sun, Feb 4, 2024, 10:44 AM
To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2

Hi,

I just ran into this 'R CMD check' NOTE for the first time:

* checking R code for possible problems ... NOTE
toto: multiple local function definitions for ?fun? with different
   formal arguments

The "offending" code is something like this (simplified from the real code):

toto <- function(mode)
{
     if (mode == 1)
         fun <- function(a, b) a*b
     else
         fun <- function(u, v, w) (u + v) / w
     fun
}

Is that NOTE really intended? Hard to see why this code would be
considered "wrong".

I know it's just a NOTE but still...

I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.

Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.

Duncan Murdoch

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

--

Herv? Pag?s



Bioconductor Core Team

hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.


--

Herv? Pag?s



Bioconductor Core Team

hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Feb  6 22:20:33 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 6 Feb 2024 16:20:33 -0500
Subject: [Rd] NOTE: multiple local function definitions for ?fun? with
 different formal arguments
In-Reply-To: <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
Message-ID: <6be852da-f101-4e0f-85f9-23679583f64a@gmail.com>

On 06/02/2024 2:17 p.m., Herv? Pag?s wrote:
> Thanks. Workarounds are interesting but... what's the point of the NOTE 
> in the first place?

Creating a function that can't be called could be an error.  Presumably 
you are careful and never try to call it with the wrong signature, but 
the check code isn't smart enough to follow every code path, so it gives 
the note to warn you that you might have something wrong.

You still have the same issue with my workaround, but the check code 
isn't smart enough to notice that.

Duncan Murdoch

> 
> H.
> 
> On 2/4/24 09:07, Duncan Murdoch wrote:
>> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel 
>> wrote:
>>> Well you can see that yeast is exactly weekday you have.? The way out 
>>> is to just not name the result
>>
>> I think something happened to your explanation...
>>
>>>
>>> toto <- function(mode)
>>> {
>>> ???? ifelse(mode == 1,
>>> ???????? function(a,b) a*b,
>>> ???????? function(u, v, w) (u + v) / w)
>>> }
>>
>> It's a bad idea to use ifelse() when you really want if() ... else ... 
>> . ?In this case it works, but it doesn't always.? So the workaround 
>> should be
>>
>>
>> toto <- function(mode)
>> {
>> ??? if(mode == 1)
>> ??????? function(a,b) a*b
>> ??? else
>> ??????? function(u, v, w) (u + v) / w
>> }
>>
>>
>>>
>>>
>>> ________________________________
>>> From: Grant Izmirlian <izmirlidroid at gmail.com>
>>> Date: Sun, Feb 4, 2024, 10:44 AM
>>> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov>
>>> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>>>
>>> Hi,
>>>
>>> I just ran into this 'R CMD check' NOTE for the first time:
>>>
>>> * checking R code for possible problems ... NOTE
>>> toto: multiple local function definitions for ?fun? with different
>>> ?? formal arguments
>>>
>>> The "offending" code is something like this (simplified from the real 
>>> code):
>>>
>>> toto <- function(mode)
>>> {
>>> ???? if (mode == 1)
>>> ???????? fun <- function(a, b) a*b
>>> ???? else
>>> ???????? fun <- function(u, v, w) (u + v) / w
>>> ???? fun
>>> }
>>>
>>> Is that NOTE really intended? Hard to see why this code would be
>>> considered "wrong".
>>>
>>> I know it's just a NOTE but still...
>>
>> I agree it's a false positive, but the issue is that you have a 
>> function object in your function which can't be called 
>> unconditionally.? The workaround doesn't create such an object.
>>
>> Recognizing that your function never tries to call fun requires global 
>> inspection of toto(), and most of the checks are based on local 
>> inspection.
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Herv? Pag?s
> 
> Bioconductor Core Team
> hpages.on.github at gmail.com
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Feb  6 22:29:49 2024
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 6 Feb 2024 13:29:49 -0800
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
 <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
Message-ID: <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>

Here's a dummy example that I think illustrates the problem:

toto <- function() {
  if (runif(1) < 0.5)
    function(a) a
  else
    function(a,b) a+b
}

> fcn <- toto()
> fcn(1,2)
[1] 3
> fcn <- toto()
> fcn(1,2)
[1] 3
> fcn <- toto()
> fcn(1,2)
Error in fcn(1, 2) : unused argument (2)

How can you use the returned function, if you get different arguments?

In your example, you cannot use the returned function without knowing
'mode', or by inspecting the returned function.  So, the warning is
there to alert you to a potential bug.  Anecdotally, I'm pretty sure
this R CMD check NOTE has caught at least one such bug in one of
my/our packages.

If you want to keep the current design pattern, one approach could be
to add ... to your function definitions:

toto <- function(mode)
{
     if (mode == 1)
         fun <- function(a, b, ...) a*b
     else
         fun <- function(u, v, w) (u + v) / w
     fun
}

to make sure that toto() returns functions that accept the same
minimal number of arguments.

/Henrik

On Tue, Feb 6, 2024 at 1:15?PM Izmirlian, Grant (NIH/NCI) [E] via
R-devel <r-devel at r-project.org> wrote:
>
> Because functions get called and therefore, the calling sequence matters. It?s just protecting you from yourself, but as someone pointed out, there?s a way to silence such notes.
> G
>
>
> From: Herv? Pag?s <hpages.on.github at gmail.com>
> Sent: Tuesday, February 6, 2024 2:40 PM
> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; Duncan Murdoch <murdoch.duncan at gmail.com>; r-devel at r-project.org
> Subject: Re: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>
>
> On 2/6/24 11:19, Izmirlian, Grant (NIH/NCI) [E] wrote:
> The note refers to the fact that the function named ?fun? appears to be defined in two different ways.
>
> Sure I get that. But how is that any different from a variable being defined in two different ways like in
>
>     if (mode == 1)
>         x <- -8
>     else
>         x <- 55
>
> This is such a common and perfectly fine pattern. Why would this be considered a potential hazard when the variable is a function?
>
> H.
>
> From: Herv? Pag?s <hpages.on.github at gmail.com><mailto:hpages.on.github at gmail.com>
> Sent: Tuesday, February 6, 2024 2:17 PM
> To: Duncan Murdoch <murdoch.duncan at gmail.com><mailto:murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>; r-devel at r-project.org<mailto:r-devel at r-project.org>
> Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>
>
> Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?
>
> H.
> On 2/4/24 09:07, Duncan Murdoch wrote:
> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:
>
>
> Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result
>
> I think something happened to your explanation...
>
>
>
>
> toto <- function(mode)
> {
>      ifelse(mode == 1,
>          function(a,b) a*b,
>          function(u, v, w) (u + v) / w)
> }
>
> It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be
>
>
> toto <- function(mode)
> {
>     if(mode == 1)
>         function(a,b) a*b
>     else
>         function(u, v, w) (u + v) / w
> }
>
>
>
>
>
>
> ________________________________
> From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
> Date: Sun, Feb 4, 2024, 10:44 AM
> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>
> Hi,
>
> I just ran into this 'R CMD check' NOTE for the first time:
>
> * checking R code for possible problems ... NOTE
> toto: multiple local function definitions for ?fun? with different
>    formal arguments
>
> The "offending" code is something like this (simplified from the real code):
>
> toto <- function(mode)
> {
>      if (mode == 1)
>          fun <- function(a, b) a*b
>      else
>          fun <- function(u, v, w) (u + v) / w
>      fun
> }
>
> Is that NOTE really intended? Hard to see why this code would be
> considered "wrong".
>
> I know it's just a NOTE but still...
>
> I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.
>
> Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
>
> Herv? Pag?s
>
>
>
> Bioconductor Core Team
>
> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>
>
> --
>
> Herv? Pag?s
>
>
>
> Bioconductor Core Team
>
> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Feb  6 22:31:10 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 6 Feb 2024 16:31:10 -0500
Subject: [Rd] Get list of active calling handlers?
Message-ID: <e5f12cfa-7efa-41e8-b152-6e9ef8af39b9@gmail.com>

The SO post https://stackoverflow.com/q/77943180 tried to call 
globalCallingHandlers() from a function, and it failed with the error 
message "should not be called with handlers on the stack".  A much 
simpler illustration of the same error comes from this line:

   try(globalCallingHandlers(warning = function(e) e))

The problem here is that try() sets an error handler, and 
globalCallingHandlers() sees it and aborts.

If I call globalCallingHandlers() with no arguments, I get a list of 
currently active global handlers.  Is there also a way to get a list of 
active handlers, including non-global ones (like the one try() added in 
the line above)?

Duncan Murdoch


From mtmorg@n@xyz @end|ng |rom gm@||@com  Wed Feb  7 00:17:03 2024
From: mtmorg@n@xyz @end|ng |rom gm@||@com (Martin Morgan)
Date: Tue, 6 Feb 2024 23:17:03 +0000
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
 <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>
Message-ID: <DS7PR10MB727772ADF2D69B769FC88A1BFA462@DS7PR10MB7277.namprd10.prod.outlook.com>

I went looking and found this in codetools, where it's been for 20 years

https://gitlab.com/luke-tierney/codetools/-/blame/master/R/codetools.R?ref_type=heads#L951

I think the call stack in codetools is checkUsagePackage -> checkUsageEnv -> checkUsage, and these are similarly established. The call from the tools package https://github.com/wch/r-source/blame/95146f0f366a36899e4277a6a722964a51b93603/src/library/tools/R/QC.R#L4585 is also quite old.

I'm not sure this had been said explicitly, but perhaps the original intent was to protect against accidentally redefining a local function. Obviously one could do this with a local variable too, though that might less often be an error?

toto <- function(mode) {
    tata <- function(a, b) a * b  # intended
    tata <- function(a, b) a / b  # oops
    ?
}

Another workaround is to actually name the local functions

toto <- function(mode) {
    tata <- function(a, b) a * b
    titi <- function(u, v, w) (u + v) / w
    if (mode == 1)
        tata
    else
        titi
}

? or to use a switch statement

toto <- function(mode) {
    ## fun <- switch(?) for use of `fun()` in toto
    switch(
        mode,
        tata = function(a, b) a * b,
        titi = function(u, v, w) (u + v) / w,
        stop("unknown `mode = '", mode, "'`")
    )
}

? or similarly to write `fun <- if ? else ?`, assigning the result of the `if` to `fun`. I guess this last formulation points to the fact that a more careful analysis of Herv?'s original code means that `fun` can only take one value (only one branch of the `if` can be taken) so there can only be one version of `fun` in any invocation of `toto()`.

Perhaps the local names (and string-valued 'mode') are suggestive of special case, so serve as implicit documentation?

Adding `?` to `tata` doesn't seem like a good idea; toto(1)(3, 5, 7) no longer signals an error.

There seems to be a lot in common with S3 and S4 methods, where `toto` corresponds to the generic, `tata` and `titi` to methods. This 'dispatch' is brought out by using `switch()`. There is plenty of opportunity for thinking that you're invoking one method but actually you're invoking the other. For instance with dplyr, I like that I can tbl |> print(n = 2) so much that I find myself doing this with data.frame df |> print(n = 2), which is an error (`n` partially matches `na.print`, and 2 is not a valid value); both methods silently ignore the typo print(m = 2).

Martin Morgan

From: R-devel <r-devel-bounces at r-project.org> on behalf of Henrik Bengtsson <henrik.bengtsson at gmail.com>
Date: Tuesday, February 6, 2024 at 4:34?PM
To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>
Cc: r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] [EXTERNAL] Re: NOTE: multiple local function definitions for ?fun? with different formal arguments
Here's a dummy example that I think illustrates the problem:

toto <- function() {
  if (runif(1) < 0.5)
    function(a) a
  else
    function(a,b) a+b
}

> fcn <- toto()
> fcn(1,2)
[1] 3
> fcn <- toto()
> fcn(1,2)
[1] 3
> fcn <- toto()
> fcn(1,2)
Error in fcn(1, 2) : unused argument (2)

How can you use the returned function, if you get different arguments?

In your example, you cannot use the returned function without knowing
'mode', or by inspecting the returned function.  So, the warning is
there to alert you to a potential bug.  Anecdotally, I'm pretty sure
this R CMD check NOTE has caught at least one such bug in one of
my/our packages.

If you want to keep the current design pattern, one approach could be
to add ... to your function definitions:

toto <- function(mode)
{
     if (mode == 1)
         fun <- function(a, b, ...) a*b
     else
         fun <- function(u, v, w) (u + v) / w
     fun
}

to make sure that toto() returns functions that accept the same
minimal number of arguments.

/Henrik

On Tue, Feb 6, 2024 at 1:15?PM Izmirlian, Grant (NIH/NCI) [E] via
R-devel <r-devel at r-project.org> wrote:
>
> Because functions get called and therefore, the calling sequence matters. It?s just protecting you from yourself, but as someone pointed out, there?s a way to silence such notes.
> G
>
>
> From: Herv? Pag?s <hpages.on.github at gmail.com>
> Sent: Tuesday, February 6, 2024 2:40 PM
> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; Duncan Murdoch <murdoch.duncan at gmail.com>; r-devel at r-project.org
> Subject: Re: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>
>
> On 2/6/24 11:19, Izmirlian, Grant (NIH/NCI) [E] wrote:
> The note refers to the fact that the function named ?fun? appears to be defined in two different ways.
>
> Sure I get that. But how is that any different from a variable being defined in two different ways like in
>
>     if (mode == 1)
>         x <- -8
>     else
>         x <- 55
>
> This is such a common and perfectly fine pattern. Why would this be considered a potential hazard when the variable is a function?
>
> H.
>
> From: Herv? Pag?s <hpages.on.github at gmail.com><mailto:hpages.on.github at gmail.com>
> Sent: Tuesday, February 6, 2024 2:17 PM
> To: Duncan Murdoch <murdoch.duncan at gmail.com><mailto:murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>; r-devel at r-project.org<mailto:r-devel at r-project.org>
> Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>
>
> Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?
>
> H.
> On 2/4/24 09:07, Duncan Murdoch wrote:
> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:
>
>
> Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result
>
> I think something happened to your explanation...
>
>
>
>
> toto <- function(mode)
> {
>      ifelse(mode == 1,
>          function(a,b) a*b,
>          function(u, v, w) (u + v) / w)
> }
>
> It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be
>
>
> toto <- function(mode)
> {
>     if(mode == 1)
>         function(a,b) a*b
>     else
>         function(u, v, w) (u + v) / w
> }
>
>
>
>
>
>
> ________________________________
> From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
> Date: Sun, Feb 4, 2024, 10:44 AM
> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>
> Hi,
>
> I just ran into this 'R CMD check' NOTE for the first time:
>
> * checking R code for possible problems ... NOTE
> toto: multiple local function definitions for ?fun? with different
>    formal arguments
>
> The "offending" code is something like this (simplified from the real code):
>
> toto <- function(mode)
> {
>      if (mode == 1)
>          fun <- function(a, b) a*b
>      else
>          fun <- function(u, v, w) (u + v) / w
>      fun
> }
>
> Is that NOTE really intended? Hard to see why this code would be
> considered "wrong".
>
> I know it's just a NOTE but still...
>
> I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.
>
> Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
>
> Herv? Pag?s
>
>
>
> Bioconductor Core Team
>
> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>
>
> --
>
> Herv? Pag?s
>
>
>
> Bioconductor Core Team
>
> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Feb  7 01:34:09 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 7 Feb 2024 13:34:09 +1300
Subject: [Rd] Advice debugging M1Mac check errors
In-Reply-To: <90026864-f81c-4663-8cfe-6ae99d23307b@stats.ox.ac.uk>
References: <CAFDswJu2aDQzCZHJT7RqyBP-J8DLcj6PLzRBHbcStfxBJvw5Mg@mail.gmail.com>
 <90026864-f81c-4663-8cfe-6ae99d23307b@stats.ox.ac.uk>
Message-ID: <60EB5C3D-794E-4583-A838-0827EA357A94@R-project.org>



> On 7/02/2024, at 5:06 AM, Prof Brian Ripley via R-devel <r-devel at r-project.org> wrote:
> 
> On 04/02/2024 19:41, Holger Hoefling wrote:
>> Hi,
>> I wanted to ask if people have good advice on how to debug M1Mac package
>> check errors when you don?t have a Mac? Is a cloud machine the best option
>> or is there something else?
> 
> I presumed this was about a CRAN package, possibly hdf5r which has a R-devel-only warning from the Apple clang compiler.  And that is not a 'check error' and not something to 'debug'.
> 
> The original poster had errors for his package flsa until yesterday on fedora-clang and M1mac, which were compilation errors with recent LLVM and Apple compilers.  Again, not really something to 'debug' -- the compiler messages were clear and the CRAN notification contained advice on where in our manual to look this up.
> 
> The mac-builder service offers checks for R 4.3.0, the 'development' option being (last time I tried) the same as the 'release' option. (When I asked, Simon said that 'development' checks were only available in the run up to a x.y.0 when he starts package building and checks for R-devel.)
> 


Just to clarify, the above is outdated information - ever since the R-devel packages binaries are on CRAN the "development" option in the mac-builder is available.

Cheers,
Simon



> 
> We were left to guess, but I doubt this has to do with the lack of 'extended precision' nor long doubles longer than doubles on arm64 macOS.  And issues with that are rather rare (much rarer than numerical issues for non-reference x86_64 BLAS/LAPACKs).  Of the 20,300 CRAN packages just 18 have M1mac-specific errors, none obviously from numerical inaccuracy.  A quick look back suggests we get about 20 a year with M1mac numerical issues, about half of which were mirrored on the x86_64 'noLD' checks.
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Tue Feb  6 22:23:15 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Wed, 7 Feb 2024 10:23:15 +1300
Subject: [Rd] round.Date and trunc.Date not working / implemented
Message-ID: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>

This is my first time working with dates, so if the answer is "Duh, work 
with POSIXt", please ignore it.

Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?

Is this because `Date` is (mostly) a virtual class setup for a better 
inheritance or is that something that is just missing? (like 
`sort.data.frame`). Would R core welcome a patch?

I decided to convert some dates to date using `as.Date` function, which 
converts to a plain `Date` class, because that felt natural.

But then when trying to round to closest year, I have realized that the 
`round` and `trunc` for `Date` do not behave as for `POSIXt`.

I would assume that these will have equivalent output:

Sys.time() |> round("years") # 2024-01-01 NZDT

Sys.Date() |> round("years") # Error in round.default(...): non-numeric 
argument to mathematical function


Looking at the code (and reading the documentation more carefully) shows 
the issue, but this looks like an omission that should be patched.

-- Jirka


From chr|@ @end|ng |rom ckb|@ck@org  Wed Feb  7 02:09:14 2024
From: chr|@ @end|ng |rom ckb|@ck@org (Chris Black)
Date: Tue, 6 Feb 2024 17:09:14 -0800
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <DS7PR10MB727772ADF2D69B769FC88A1BFA462@DS7PR10MB7277.namprd10.prod.outlook.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
 <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>
 <DS7PR10MB727772ADF2D69B769FC88A1BFA462@DS7PR10MB7277.namprd10.prod.outlook.com>
Message-ID: <CE0833FD-CE89-4F59-91C7-68C7F3C788FA@ckblack.org>

Hopefully to too much of a tangent: A related problem this check doesn?t catch is accidental top-level redefinitions in package code, such as

## a.R:
helper <- function() 1

f <- function() {
helper()
}
# ?cool, f() must return 1"

## b.R:
helper <- function(x) 2

g <- function() {
helper()
}
# ?cool, g() must return 2"

## Runtime: 
# > c(pkg::f(), pkg::g())
# [1] 2 2
# ?oh right, only the last definition of helper() is used?
 
I?ve seen several variants of this issue in code from folks who are new to package development, especially if they're naively refactoring something that started out as an interactively-run analysis. Collaborators who are puzzled by it get my ?packages are collections of objects not sequences of expressions, yes that needs to be in your mental model, here?s the link to RWE again? talk, but I would be happy to be able to point them to a check result to go along with it.

I don?t think this is grounds on its own to change a 20-year precedent, but in case anyone is collecting wishlist reasons to make the check look harder...

Thanks,
Chris

> On Feb 6, 2024, at 3:17 PM, Martin Morgan <mtmorgan.xyz at gmail.com> wrote:
> 
> I went looking and found this in codetools, where it's been for 20 years
> 
> https://gitlab.com/luke-tierney/codetools/-/blame/master/R/codetools.R?ref_type=heads#L951
> 
> I think the call stack in codetools is checkUsagePackage -> checkUsageEnv -> checkUsage, and these are similarly established. The call from the tools package https://github.com/wch/r-source/blame/95146f0f366a36899e4277a6a722964a51b93603/src/library/tools/R/QC.R#L4585 is also quite old.
> 
> I'm not sure this had been said explicitly, but perhaps the original intent was to protect against accidentally redefining a local function. Obviously one could do this with a local variable too, though that might less often be an error?
> 
> toto <- function(mode) {
>    tata <- function(a, b) a * b  # intended
>    tata <- function(a, b) a / b  # oops
>    ?
> }
> 
> Another workaround is to actually name the local functions
> 
> toto <- function(mode) {
>    tata <- function(a, b) a * b
>    titi <- function(u, v, w) (u + v) / w
>    if (mode == 1)
>        tata
>    else
>        titi
> }
> 
> ? or to use a switch statement
> 
> toto <- function(mode) {
>    ## fun <- switch(?) for use of `fun()` in toto
>    switch(
>        mode,
>        tata = function(a, b) a * b,
>        titi = function(u, v, w) (u + v) / w,
>        stop("unknown `mode = '", mode, "'`")
>    )
> }
> 
> ? or similarly to write `fun <- if ? else ?`, assigning the result of the `if` to `fun`. I guess this last formulation points to the fact that a more careful analysis of Herv?'s original code means that `fun` can only take one value (only one branch of the `if` can be taken) so there can only be one version of `fun` in any invocation of `toto()`.
> 
> Perhaps the local names (and string-valued 'mode') are suggestive of special case, so serve as implicit documentation?
> 
> Adding `?` to `tata` doesn't seem like a good idea; toto(1)(3, 5, 7) no longer signals an error.
> 
> There seems to be a lot in common with S3 and S4 methods, where `toto` corresponds to the generic, `tata` and `titi` to methods. This 'dispatch' is brought out by using `switch()`. There is plenty of opportunity for thinking that you're invoking one method but actually you're invoking the other. For instance with dplyr, I like that I can tbl |> print(n = 2) so much that I find myself doing this with data.frame df |> print(n = 2), which is an error (`n` partially matches `na.print`, and 2 is not a valid value); both methods silently ignore the typo print(m = 2).
> 
> Martin Morgan
> 
> From: R-devel <r-devel-bounces at r-project.org> on behalf of Henrik Bengtsson <henrik.bengtsson at gmail.com>
> Date: Tuesday, February 6, 2024 at 4:34?PM
> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>
> Cc: r-devel at r-project.org <r-devel at r-project.org>
> Subject: Re: [Rd] [EXTERNAL] Re: NOTE: multiple local function definitions for ?fun? with different formal arguments
> Here's a dummy example that I think illustrates the problem:
> 
> toto <- function() {
>  if (runif(1) < 0.5)
>    function(a) a
>  else
>    function(a,b) a+b
> }
> 
>> fcn <- toto()
>> fcn(1,2)
> [1] 3
>> fcn <- toto()
>> fcn(1,2)
> [1] 3
>> fcn <- toto()
>> fcn(1,2)
> Error in fcn(1, 2) : unused argument (2)
> 
> How can you use the returned function, if you get different arguments?
> 
> In your example, you cannot use the returned function without knowing
> 'mode', or by inspecting the returned function.  So, the warning is
> there to alert you to a potential bug.  Anecdotally, I'm pretty sure
> this R CMD check NOTE has caught at least one such bug in one of
> my/our packages.
> 
> If you want to keep the current design pattern, one approach could be
> to add ... to your function definitions:
> 
> toto <- function(mode)
> {
>     if (mode == 1)
>         fun <- function(a, b, ...) a*b
>     else
>         fun <- function(u, v, w) (u + v) / w
>     fun
> }
> 
> to make sure that toto() returns functions that accept the same
> minimal number of arguments.
> 
> /Henrik
> 
> On Tue, Feb 6, 2024 at 1:15?PM Izmirlian, Grant (NIH/NCI) [E] via
> R-devel <r-devel at r-project.org> wrote:
>> 
>> Because functions get called and therefore, the calling sequence matters. It?s just protecting you from yourself, but as someone pointed out, there?s a way to silence such notes.
>> G
>> 
>> 
>> From: Herv? Pag?s <hpages.on.github at gmail.com>
>> Sent: Tuesday, February 6, 2024 2:40 PM
>> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; Duncan Murdoch <murdoch.duncan at gmail.com>; r-devel at r-project.org
>> Subject: Re: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>> 
>> 
>> On 2/6/24 11:19, Izmirlian, Grant (NIH/NCI) [E] wrote:
>> The note refers to the fact that the function named ?fun? appears to be defined in two different ways.
>> 
>> Sure I get that. But how is that any different from a variable being defined in two different ways like in
>> 
>>    if (mode == 1)
>>        x <- -8
>>    else
>>        x <- 55
>> 
>> This is such a common and perfectly fine pattern. Why would this be considered a potential hazard when the variable is a function?
>> 
>> H.
>> 
>> From: Herv? Pag?s <hpages.on.github at gmail.com><mailto:hpages.on.github at gmail.com>
>> Sent: Tuesday, February 6, 2024 2:17 PM
>> To: Duncan Murdoch <murdoch.duncan at gmail.com><mailto:murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>; r-devel at r-project.org<mailto:r-devel at r-project.org>
>> Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>> 
>> 
>> Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?
>> 
>> H.
>> On 2/4/24 09:07, Duncan Murdoch wrote:
>> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:
>> 
>> 
>> Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result
>> 
>> I think something happened to your explanation...
>> 
>> 
>> 
>> 
>> toto <- function(mode)
>> {
>>     ifelse(mode == 1,
>>         function(a,b) a*b,
>>         function(u, v, w) (u + v) / w)
>> }
>> 
>> It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be
>> 
>> 
>> toto <- function(mode)
>> {
>>    if(mode == 1)
>>        function(a,b) a*b
>>    else
>>        function(u, v, w) (u + v) / w
>> }
>> 
>> 
>> 
>> 
>> 
>> 
>> ________________________________
>> From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
>> Date: Sun, Feb 4, 2024, 10:44 AM
>> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
>> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>> 
>> Hi,
>> 
>> I just ran into this 'R CMD check' NOTE for the first time:
>> 
>> * checking R code for possible problems ... NOTE
>> toto: multiple local function definitions for ?fun? with different
>>   formal arguments
>> 
>> The "offending" code is something like this (simplified from the real code):
>> 
>> toto <- function(mode)
>> {
>>     if (mode == 1)
>>         fun <- function(a, b) a*b
>>     else
>>         fun <- function(u, v, w) (u + v) / w
>>     fun
>> }
>> 
>> Is that NOTE really intended? Hard to see why this code would be
>> considered "wrong".
>> 
>> I know it's just a NOTE but still...
>> 
>> I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.
>> 
>> Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.
>> 
>> Duncan Murdoch
>> 
>> ______________________________________________
>> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> --
>> 
>> Herv? Pag?s
>> 
>> 
>> 
>> Bioconductor Core Team
>> 
>> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
>> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>> 
>> 
>> --
>> 
>> Herv? Pag?s
>> 
>> 
>> 
>> Bioconductor Core Team
>> 
>> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
>> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Feb  7 14:36:32 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 7 Feb 2024 07:36:32 -0600 (CST)
Subject: [Rd] [External]  Get list of active calling handlers?
In-Reply-To: <e5f12cfa-7efa-41e8-b152-6e9ef8af39b9@gmail.com>
References: <e5f12cfa-7efa-41e8-b152-6e9ef8af39b9@gmail.com>
Message-ID: <164561a1-1acb-e69-cad-7a831e23b0ea@uiowa.edu>

On Tue, 6 Feb 2024, Duncan Murdoch wrote:

> The SO post https://stackoverflow.com/q/77943180 tried to call 
> globalCallingHandlers() from a function, and it failed with the error message 
> "should not be called with handlers on the stack".  A much simpler 
> illustration of the same error comes from this line:
>
>  try(globalCallingHandlers(warning = function(e) e))
>
> The problem here is that try() sets an error handler, and 
> globalCallingHandlers() sees it and aborts.
>
> If I call globalCallingHandlers() with no arguments, I get a list of 
> currently active global handlers.  Is there also a way to get a list of 
> active handlers, including non-global ones (like the one try() added in the 
> line above)?

There is not. The internal stack is not safe to allow to escape to the
R level.  It would be possible to write a reflection function to
provide some information, but it would be a fair bit of work to design
and I don't think would be of enough value to justify that.

The original SO question would be better addressed to
Posit/RStudio. Someone with enough motivation might also be able to
figure out an answer by looking at the source code at
https://github.com/rstudio/rstudio.

Best,

luke


>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Feb  7 15:05:24 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 7 Feb 2024 09:05:24 -0500
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <CE0833FD-CE89-4F59-91C7-68C7F3C788FA@ckblack.org>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
 <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>
 <DS7PR10MB727772ADF2D69B769FC88A1BFA462@DS7PR10MB7277.namprd10.prod.outlook.com>
 <CE0833FD-CE89-4F59-91C7-68C7F3C788FA@ckblack.org>
Message-ID: <abc59a72-a38b-4d73-b858-2efc150e62f3@gmail.com>

I agree a note about this sort of change might be good.

I think it wouldn't be too hard to write such a check to detect simple 
assignments using <- or =.  If you also wanted to detect method 
redefinitions, or redefinitions of functions stored in lists, etc., it 
would be harder.

There's unexported code in the pkgload package that will get you the 
list of R files in the correct collation order:  pkgload:::find_code . 
I don't know of such a function exported by some other package, but 
there might be one.  Once you have that list, you could parse each file 
and look for top level assignments to a name, then look for duplicates 
in the vector of names.

Here's a little script that finds cases where an R source file makes an 
assignment to a variable with the same name as one that was used earlier:

# Assume we are in the top level directory of a package.
Rfiles <- pkgload:::find_code()

allnames <- character()
for (f in Rfiles) {
   exprs <- parse(f)
   names <- character(length(exprs))
   for (i in seq_along(exprs)) {
     expr <- exprs[[i]]
     if (is.name(expr[[1]]) &&
         deparse(expr[[1]]) %in% c("<-", "=") &&
         is.name(expr[[2]])) {
       names[i] <- deparse(expr[[2]])
     }
   }
   names <- names[names != ""]
   prev <- length(allnames)
   allnames <- c(allnames, names)
   dups <- which(duplicated(allnames))
   dups <- dups[dups > prev]
   if (any(dups)) {
     cat("Duplicated names in ", basename(f), ":\n")
     cat(paste(allnames[dups], collapse = ", "), "\n")
   }
}

It could be made more fancy to report the locations of both the original 
and the dup if you feel motivated.

Duncan Murdoch

On 06/02/2024 8:09 p.m., Chris Black wrote:
> Hopefully to too much of a tangent: A related problem this check doesn?t catch is accidental top-level redefinitions in package code, such as
> 
> ## a.R:
> helper <- function() 1
> 
> f <- function() {
> helper()
> }
> # ?cool, f() must return 1"
> 
> ## b.R:
> helper <- function(x) 2
> 
> g <- function() {
> helper()
> }
> # ?cool, g() must return 2"
> 
> ## Runtime:
> # > c(pkg::f(), pkg::g())
> # [1] 2 2
> # ?oh right, only the last definition of helper() is used?
>   
> I?ve seen several variants of this issue in code from folks who are new to package development, especially if they're naively refactoring something that started out as an interactively-run analysis. Collaborators who are puzzled by it get my ?packages are collections of objects not sequences of expressions, yes that needs to be in your mental model, here?s the link to RWE again? talk, but I would be happy to be able to point them to a check result to go along with it.
> 
> I don?t think this is grounds on its own to change a 20-year precedent, but in case anyone is collecting wishlist reasons to make the check look harder...
> 
> Thanks,
> Chris
> 
>> On Feb 6, 2024, at 3:17 PM, Martin Morgan <mtmorgan.xyz at gmail.com> wrote:
>>
>> I went looking and found this in codetools, where it's been for 20 years
>>
>> https://gitlab.com/luke-tierney/codetools/-/blame/master/R/codetools.R?ref_type=heads#L951
>>
>> I think the call stack in codetools is checkUsagePackage -> checkUsageEnv -> checkUsage, and these are similarly established. The call from the tools package https://github.com/wch/r-source/blame/95146f0f366a36899e4277a6a722964a51b93603/src/library/tools/R/QC.R#L4585 is also quite old.
>>
>> I'm not sure this had been said explicitly, but perhaps the original intent was to protect against accidentally redefining a local function. Obviously one could do this with a local variable too, though that might less often be an error?
>>
>> toto <- function(mode) {
>>     tata <- function(a, b) a * b  # intended
>>     tata <- function(a, b) a / b  # oops
>>     ?
>> }
>>
>> Another workaround is to actually name the local functions
>>
>> toto <- function(mode) {
>>     tata <- function(a, b) a * b
>>     titi <- function(u, v, w) (u + v) / w
>>     if (mode == 1)
>>         tata
>>     else
>>         titi
>> }
>>
>> ? or to use a switch statement
>>
>> toto <- function(mode) {
>>     ## fun <- switch(?) for use of `fun()` in toto
>>     switch(
>>         mode,
>>         tata = function(a, b) a * b,
>>         titi = function(u, v, w) (u + v) / w,
>>         stop("unknown `mode = '", mode, "'`")
>>     )
>> }
>>
>> ? or similarly to write `fun <- if ? else ?`, assigning the result of the `if` to `fun`. I guess this last formulation points to the fact that a more careful analysis of Herv?'s original code means that `fun` can only take one value (only one branch of the `if` can be taken) so there can only be one version of `fun` in any invocation of `toto()`.
>>
>> Perhaps the local names (and string-valued 'mode') are suggestive of special case, so serve as implicit documentation?
>>
>> Adding `?` to `tata` doesn't seem like a good idea; toto(1)(3, 5, 7) no longer signals an error.
>>
>> There seems to be a lot in common with S3 and S4 methods, where `toto` corresponds to the generic, `tata` and `titi` to methods. This 'dispatch' is brought out by using `switch()`. There is plenty of opportunity for thinking that you're invoking one method but actually you're invoking the other. For instance with dplyr, I like that I can tbl |> print(n = 2) so much that I find myself doing this with data.frame df |> print(n = 2), which is an error (`n` partially matches `na.print`, and 2 is not a valid value); both methods silently ignore the typo print(m = 2).
>>
>> Martin Morgan
>>
>> From: R-devel <r-devel-bounces at r-project.org> on behalf of Henrik Bengtsson <henrik.bengtsson at gmail.com>
>> Date: Tuesday, February 6, 2024 at 4:34?PM
>> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>
>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>> Subject: Re: [Rd] [EXTERNAL] Re: NOTE: multiple local function definitions for ?fun? with different formal arguments
>> Here's a dummy example that I think illustrates the problem:
>>
>> toto <- function() {
>>   if (runif(1) < 0.5)
>>     function(a) a
>>   else
>>     function(a,b) a+b
>> }
>>
>>> fcn <- toto()
>>> fcn(1,2)
>> [1] 3
>>> fcn <- toto()
>>> fcn(1,2)
>> [1] 3
>>> fcn <- toto()
>>> fcn(1,2)
>> Error in fcn(1, 2) : unused argument (2)
>>
>> How can you use the returned function, if you get different arguments?
>>
>> In your example, you cannot use the returned function without knowing
>> 'mode', or by inspecting the returned function.  So, the warning is
>> there to alert you to a potential bug.  Anecdotally, I'm pretty sure
>> this R CMD check NOTE has caught at least one such bug in one of
>> my/our packages.
>>
>> If you want to keep the current design pattern, one approach could be
>> to add ... to your function definitions:
>>
>> toto <- function(mode)
>> {
>>      if (mode == 1)
>>          fun <- function(a, b, ...) a*b
>>      else
>>          fun <- function(u, v, w) (u + v) / w
>>      fun
>> }
>>
>> to make sure that toto() returns functions that accept the same
>> minimal number of arguments.
>>
>> /Henrik
>>
>> On Tue, Feb 6, 2024 at 1:15?PM Izmirlian, Grant (NIH/NCI) [E] via
>> R-devel <r-devel at r-project.org> wrote:
>>>
>>> Because functions get called and therefore, the calling sequence matters. It?s just protecting you from yourself, but as someone pointed out, there?s a way to silence such notes.
>>> G
>>>
>>>
>>> From: Herv? Pag?s <hpages.on.github at gmail.com>
>>> Sent: Tuesday, February 6, 2024 2:40 PM
>>> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; Duncan Murdoch <murdoch.duncan at gmail.com>; r-devel at r-project.org
>>> Subject: Re: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>>>
>>>
>>> On 2/6/24 11:19, Izmirlian, Grant (NIH/NCI) [E] wrote:
>>> The note refers to the fact that the function named ?fun? appears to be defined in two different ways.
>>>
>>> Sure I get that. But how is that any different from a variable being defined in two different ways like in
>>>
>>>     if (mode == 1)
>>>         x <- -8
>>>     else
>>>         x <- 55
>>>
>>> This is such a common and perfectly fine pattern. Why would this be considered a potential hazard when the variable is a function?
>>>
>>> H.
>>>
>>> From: Herv? Pag?s <hpages.on.github at gmail.com><mailto:hpages.on.github at gmail.com>
>>> Sent: Tuesday, February 6, 2024 2:17 PM
>>> To: Duncan Murdoch <murdoch.duncan at gmail.com><mailto:murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>; r-devel at r-project.org<mailto:r-devel at r-project.org>
>>> Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>>>
>>>
>>> Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?
>>>
>>> H.
>>> On 2/4/24 09:07, Duncan Murdoch wrote:
>>> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:
>>>
>>>
>>> Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result
>>>
>>> I think something happened to your explanation...
>>>
>>>
>>>
>>>
>>> toto <- function(mode)
>>> {
>>>      ifelse(mode == 1,
>>>          function(a,b) a*b,
>>>          function(u, v, w) (u + v) / w)
>>> }
>>>
>>> It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be
>>>
>>>
>>> toto <- function(mode)
>>> {
>>>     if(mode == 1)
>>>         function(a,b) a*b
>>>     else
>>>         function(u, v, w) (u + v) / w
>>> }
>>>
>>>
>>>
>>>
>>>
>>>
>>> ________________________________
>>> From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
>>> Date: Sun, Feb 4, 2024, 10:44 AM
>>> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
>>> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>>>
>>> Hi,
>>>
>>> I just ran into this 'R CMD check' NOTE for the first time:
>>>
>>> * checking R code for possible problems ... NOTE
>>> toto: multiple local function definitions for ?fun? with different
>>>    formal arguments
>>>
>>> The "offending" code is something like this (simplified from the real code):
>>>
>>> toto <- function(mode)
>>> {
>>>      if (mode == 1)
>>>          fun <- function(a, b) a*b
>>>      else
>>>          fun <- function(u, v, w) (u + v) / w
>>>      fun
>>> }
>>>
>>> Is that NOTE really intended? Hard to see why this code would be
>>> considered "wrong".
>>>
>>> I know it's just a NOTE but still...
>>>
>>> I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.
>>>
>>> Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.
>>>
>>> Duncan Murdoch
>>>
>>> ______________________________________________
>>> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> --
>>>
>>> Herv? Pag?s
>>>
>>>
>>>
>>> Bioconductor Core Team
>>>
>>> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
>>> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>>>
>>>
>>> --
>>>
>>> Herv? Pag?s
>>>
>>>
>>>
>>> Bioconductor Core Team
>>>
>>> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
>>> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>>>
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Feb  7 15:08:05 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 7 Feb 2024 09:08:05 -0500
Subject: [Rd] [External]  Get list of active calling handlers?
In-Reply-To: <164561a1-1acb-e69-cad-7a831e23b0ea@uiowa.edu>
References: <e5f12cfa-7efa-41e8-b152-6e9ef8af39b9@gmail.com>
 <164561a1-1acb-e69-cad-7a831e23b0ea@uiowa.edu>
Message-ID: <5884a0b1-7316-4444-bda0-cbf82f2eb72f@gmail.com>

On 07/02/2024 8:36 a.m., luke-tierney at uiowa.edu wrote:
> On Tue, 6 Feb 2024, Duncan Murdoch wrote:
> 
>> The SO post https://stackoverflow.com/q/77943180 tried to call
>> globalCallingHandlers() from a function, and it failed with the error message
>> "should not be called with handlers on the stack".  A much simpler
>> illustration of the same error comes from this line:
>>
>>   try(globalCallingHandlers(warning = function(e) e))
>>
>> The problem here is that try() sets an error handler, and
>> globalCallingHandlers() sees it and aborts.
>>
>> If I call globalCallingHandlers() with no arguments, I get a list of
>> currently active global handlers.  Is there also a way to get a list of
>> active handlers, including non-global ones (like the one try() added in the
>> line above)?
> 
> There is not. The internal stack is not safe to allow to escape to the
> R level.  It would be possible to write a reflection function to
> provide some information, but it would be a fair bit of work to design
> and I don't think would be of enough value to justify that.
> 
> The original SO question would be better addressed to
> Posit/RStudio. Someone with enough motivation might also be able to
> figure out an answer by looking at the source code at
> https://github.com/rstudio/rstudio.

Thanks!

Duncan


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Feb  7 20:53:31 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 7 Feb 2024 14:53:31 -0500
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <abc59a72-a38b-4d73-b858-2efc150e62f3@gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
 <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>
 <DS7PR10MB727772ADF2D69B769FC88A1BFA462@DS7PR10MB7277.namprd10.prod.outlook.com>
 <CE0833FD-CE89-4F59-91C7-68C7F3C788FA@ckblack.org>
 <abc59a72-a38b-4d73-b858-2efc150e62f3@gmail.com>
Message-ID: <69df184a-96e5-4d26-9999-fef5dad280c4@gmail.com>

I put the idea below into a function that gives nicer looking results. 
Here's the new code:

dupnames <- function(path = ".") {

   Rfiles <- pkgload:::find_code(path)
   allnames <- data.frame(names=character(), filename=character(), line 
= numeric())
   result <- NULL
   for (f in Rfiles) {
     exprs <- parse(f, keep.source = TRUE)
     locs <- getSrcLocation(exprs)
     names <- character(length(exprs))
     lines <- numeric(length(exprs))
     for (i in seq_along(exprs)) {
       expr <- exprs[[i]]
       if (is.name(expr[[1]]) &&
           deparse(expr[[1]]) %in% c("<-", "=") &&
           is.name(expr[[2]])) {
         names[i] <- deparse(expr[[2]])
         lines[i] <- locs[i]
       }
     }
     keep <- names != ""
     if (any(keep)) {
       names <- names[keep]
       lines <- lines[keep]

       prev <- nrow(allnames)
       allnames <- rbind(allnames, data.frame(name = names, filename = 
basename(f), line = lines))
       dups <- which(duplicated(allnames$name))
       dups <- dups[dups > prev]
       if (any(dups)) {
         origfile <- character(length(dups))
         origline <- numeric(length(dups))
         for (i in seq_along(dups)) {
           prev <- which(allnames$name == allnames$name[dups[i]])[1]
           origfile[i] <- allnames$filename[prev]
           origline[i] <- allnames$line[prev]
         }

         result <- rbind(result,
                         data.frame(name = allnames$name[dups],
                                    first = paste(origfile, origline, 
sep=":"),
                                    dup = paste(allnames$filename[dups], 
allnames$line[dups], sep = ":")))
       }
     }
   }
   result
}


And here's what I get when I run it on rgl:

dupnames("rgl")
   name      first          dup
1  fns knitr.R:12  knitr.R:165
2  fns knitr.R:12 pkgdown.R:14
3  fns knitr.R:12    shiny.R:8

Those are okay; the fns object is a temporary that is later removed in 
each case.

Duncan Murdoch


On 07/02/2024 9:05 a.m., Duncan Murdoch wrote:
> I agree a note about this sort of change might be good.
> 
> I think it wouldn't be too hard to write such a check to detect simple
> assignments using <- or =.  If you also wanted to detect method
> redefinitions, or redefinitions of functions stored in lists, etc., it
> would be harder.
> 
> There's unexported code in the pkgload package that will get you the
> list of R files in the correct collation order:  pkgload:::find_code .
> I don't know of such a function exported by some other package, but
> there might be one.  Once you have that list, you could parse each file
> and look for top level assignments to a name, then look for duplicates
> in the vector of names.
> 
> Here's a little script that finds cases where an R source file makes an
> assignment to a variable with the same name as one that was used earlier:
> 
> # Assume we are in the top level directory of a package.
> Rfiles <- pkgload:::find_code()
> 
> allnames <- character()
> for (f in Rfiles) {
>     exprs <- parse(f)
>     names <- character(length(exprs))
>     for (i in seq_along(exprs)) {
>       expr <- exprs[[i]]
>       if (is.name(expr[[1]]) &&
>           deparse(expr[[1]]) %in% c("<-", "=") &&
>           is.name(expr[[2]])) {
>         names[i] <- deparse(expr[[2]])
>       }
>     }
>     names <- names[names != ""]
>     prev <- length(allnames)
>     allnames <- c(allnames, names)
>     dups <- which(duplicated(allnames))
>     dups <- dups[dups > prev]
>     if (any(dups)) {
>       cat("Duplicated names in ", basename(f), ":\n")
>       cat(paste(allnames[dups], collapse = ", "), "\n")
>     }
> }
> 
> It could be made more fancy to report the locations of both the original
> and the dup if you feel motivated.
> 
> Duncan Murdoch
> 
> On 06/02/2024 8:09 p.m., Chris Black wrote:
>> Hopefully to too much of a tangent: A related problem this check doesn?t catch is accidental top-level redefinitions in package code, such as
>>
>> ## a.R:
>> helper <- function() 1
>>
>> f <- function() {
>> helper()
>> }
>> # ?cool, f() must return 1"
>>
>> ## b.R:
>> helper <- function(x) 2
>>
>> g <- function() {
>> helper()
>> }
>> # ?cool, g() must return 2"
>>
>> ## Runtime:
>> # > c(pkg::f(), pkg::g())
>> # [1] 2 2
>> # ?oh right, only the last definition of helper() is used?
>>    
>> I?ve seen several variants of this issue in code from folks who are new to package development, especially if they're naively refactoring something that started out as an interactively-run analysis. Collaborators who are puzzled by it get my ?packages are collections of objects not sequences of expressions, yes that needs to be in your mental model, here?s the link to RWE again? talk, but I would be happy to be able to point them to a check result to go along with it.
>>
>> I don?t think this is grounds on its own to change a 20-year precedent, but in case anyone is collecting wishlist reasons to make the check look harder...
>>
>> Thanks,
>> Chris
>>
>>> On Feb 6, 2024, at 3:17 PM, Martin Morgan <mtmorgan.xyz at gmail.com> wrote:
>>>
>>> I went looking and found this in codetools, where it's been for 20 years
>>>
>>> https://gitlab.com/luke-tierney/codetools/-/blame/master/R/codetools.R?ref_type=heads#L951
>>>
>>> I think the call stack in codetools is checkUsagePackage -> checkUsageEnv -> checkUsage, and these are similarly established. The call from the tools package https://github.com/wch/r-source/blame/95146f0f366a36899e4277a6a722964a51b93603/src/library/tools/R/QC.R#L4585 is also quite old.
>>>
>>> I'm not sure this had been said explicitly, but perhaps the original intent was to protect against accidentally redefining a local function. Obviously one could do this with a local variable too, though that might less often be an error?
>>>
>>> toto <- function(mode) {
>>>      tata <- function(a, b) a * b  # intended
>>>      tata <- function(a, b) a / b  # oops
>>>      ?
>>> }
>>>
>>> Another workaround is to actually name the local functions
>>>
>>> toto <- function(mode) {
>>>      tata <- function(a, b) a * b
>>>      titi <- function(u, v, w) (u + v) / w
>>>      if (mode == 1)
>>>          tata
>>>      else
>>>          titi
>>> }
>>>
>>> ? or to use a switch statement
>>>
>>> toto <- function(mode) {
>>>      ## fun <- switch(?) for use of `fun()` in toto
>>>      switch(
>>>          mode,
>>>          tata = function(a, b) a * b,
>>>          titi = function(u, v, w) (u + v) / w,
>>>          stop("unknown `mode = '", mode, "'`")
>>>      )
>>> }
>>>
>>> ? or similarly to write `fun <- if ? else ?`, assigning the result of the `if` to `fun`. I guess this last formulation points to the fact that a more careful analysis of Herv?'s original code means that `fun` can only take one value (only one branch of the `if` can be taken) so there can only be one version of `fun` in any invocation of `toto()`.
>>>
>>> Perhaps the local names (and string-valued 'mode') are suggestive of special case, so serve as implicit documentation?
>>>
>>> Adding `?` to `tata` doesn't seem like a good idea; toto(1)(3, 5, 7) no longer signals an error.
>>>
>>> There seems to be a lot in common with S3 and S4 methods, where `toto` corresponds to the generic, `tata` and `titi` to methods. This 'dispatch' is brought out by using `switch()`. There is plenty of opportunity for thinking that you're invoking one method but actually you're invoking the other. For instance with dplyr, I like that I can tbl |> print(n = 2) so much that I find myself doing this with data.frame df |> print(n = 2), which is an error (`n` partially matches `na.print`, and 2 is not a valid value); both methods silently ignore the typo print(m = 2).
>>>
>>> Martin Morgan
>>>
>>> From: R-devel <r-devel-bounces at r-project.org> on behalf of Henrik Bengtsson <henrik.bengtsson at gmail.com>
>>> Date: Tuesday, February 6, 2024 at 4:34?PM
>>> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>
>>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>>> Subject: Re: [Rd] [EXTERNAL] Re: NOTE: multiple local function definitions for ?fun? with different formal arguments
>>> Here's a dummy example that I think illustrates the problem:
>>>
>>> toto <- function() {
>>>    if (runif(1) < 0.5)
>>>      function(a) a
>>>    else
>>>      function(a,b) a+b
>>> }
>>>
>>>> fcn <- toto()
>>>> fcn(1,2)
>>> [1] 3
>>>> fcn <- toto()
>>>> fcn(1,2)
>>> [1] 3
>>>> fcn <- toto()
>>>> fcn(1,2)
>>> Error in fcn(1, 2) : unused argument (2)
>>>
>>> How can you use the returned function, if you get different arguments?
>>>
>>> In your example, you cannot use the returned function without knowing
>>> 'mode', or by inspecting the returned function.  So, the warning is
>>> there to alert you to a potential bug.  Anecdotally, I'm pretty sure
>>> this R CMD check NOTE has caught at least one such bug in one of
>>> my/our packages.
>>>
>>> If you want to keep the current design pattern, one approach could be
>>> to add ... to your function definitions:
>>>
>>> toto <- function(mode)
>>> {
>>>       if (mode == 1)
>>>           fun <- function(a, b, ...) a*b
>>>       else
>>>           fun <- function(u, v, w) (u + v) / w
>>>       fun
>>> }
>>>
>>> to make sure that toto() returns functions that accept the same
>>> minimal number of arguments.
>>>
>>> /Henrik
>>>
>>> On Tue, Feb 6, 2024 at 1:15?PM Izmirlian, Grant (NIH/NCI) [E] via
>>> R-devel <r-devel at r-project.org> wrote:
>>>>
>>>> Because functions get called and therefore, the calling sequence matters. It?s just protecting you from yourself, but as someone pointed out, there?s a way to silence such notes.
>>>> G
>>>>
>>>>
>>>> From: Herv? Pag?s <hpages.on.github at gmail.com>
>>>> Sent: Tuesday, February 6, 2024 2:40 PM
>>>> To: Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov>; Duncan Murdoch <murdoch.duncan at gmail.com>; r-devel at r-project.org
>>>> Subject: Re: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>>>>
>>>>
>>>> On 2/6/24 11:19, Izmirlian, Grant (NIH/NCI) [E] wrote:
>>>> The note refers to the fact that the function named ?fun? appears to be defined in two different ways.
>>>>
>>>> Sure I get that. But how is that any different from a variable being defined in two different ways like in
>>>>
>>>>      if (mode == 1)
>>>>          x <- -8
>>>>      else
>>>>          x <- 55
>>>>
>>>> This is such a common and perfectly fine pattern. Why would this be considered a potential hazard when the variable is a function?
>>>>
>>>> H.
>>>>
>>>> From: Herv? Pag?s <hpages.on.github at gmail.com><mailto:hpages.on.github at gmail.com>
>>>> Sent: Tuesday, February 6, 2024 2:17 PM
>>>> To: Duncan Murdoch <murdoch.duncan at gmail.com><mailto:murdoch.duncan at gmail.com>; Izmirlian, Grant (NIH/NCI) [E] <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>; r-devel at r-project.org<mailto:r-devel at r-project.org>
>>>> Subject: [EXTERNAL] Re: [Rd] NOTE: multiple local function definitions for ?fun? with different formal arguments
>>>>
>>>>
>>>> Thanks. Workarounds are interesting but... what's the point of the NOTE in the first place?
>>>>
>>>> H.
>>>> On 2/4/24 09:07, Duncan Murdoch wrote:
>>>> On 04/02/2024 10:55 a.m., Izmirlian, Grant (NIH/NCI) [E] via R-devel wrote:
>>>>
>>>>
>>>> Well you can see that yeast is exactly weekday you have.  The way out is to just not name the result
>>>>
>>>> I think something happened to your explanation...
>>>>
>>>>
>>>>
>>>>
>>>> toto <- function(mode)
>>>> {
>>>>       ifelse(mode == 1,
>>>>           function(a,b) a*b,
>>>>           function(u, v, w) (u + v) / w)
>>>> }
>>>>
>>>> It's a bad idea to use ifelse() when you really want if() ... else ... .  In this case it works, but it doesn't always.  So the workaround should be
>>>>
>>>>
>>>> toto <- function(mode)
>>>> {
>>>>      if(mode == 1)
>>>>          function(a,b) a*b
>>>>      else
>>>>          function(u, v, w) (u + v) / w
>>>> }
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> ________________________________
>>>> From: Grant Izmirlian <izmirlidroid at gmail.com><mailto:izmirlidroid at gmail.com>
>>>> Date: Sun, Feb 4, 2024, 10:44 AM
>>>> To: "Izmirlian, Grant (NIH/NCI) [E]" <izmirlig at mail.nih.gov><mailto:izmirlig at mail.nih.gov>
>>>> Subject: Fwd: [EXTERNAL] R-devel Digest, Vol 252, Issue 2
>>>>
>>>> Hi,
>>>>
>>>> I just ran into this 'R CMD check' NOTE for the first time:
>>>>
>>>> * checking R code for possible problems ... NOTE
>>>> toto: multiple local function definitions for ?fun? with different
>>>>     formal arguments
>>>>
>>>> The "offending" code is something like this (simplified from the real code):
>>>>
>>>> toto <- function(mode)
>>>> {
>>>>       if (mode == 1)
>>>>           fun <- function(a, b) a*b
>>>>       else
>>>>           fun <- function(u, v, w) (u + v) / w
>>>>       fun
>>>> }
>>>>
>>>> Is that NOTE really intended? Hard to see why this code would be
>>>> considered "wrong".
>>>>
>>>> I know it's just a NOTE but still...
>>>>
>>>> I agree it's a false positive, but the issue is that you have a function object in your function which can't be called unconditionally.  The workaround doesn't create such an object.
>>>>
>>>> Recognizing that your function never tries to call fun requires global inspection of toto(), and most of the checks are based on local inspection.
>>>>
>>>> Duncan Murdoch
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>> --
>>>>
>>>> Herv? Pag?s
>>>>
>>>>
>>>>
>>>> Bioconductor Core Team
>>>>
>>>> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
>>>> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>>>>
>>>>
>>>> --
>>>>
>>>> Herv? Pag?s
>>>>
>>>>
>>>>
>>>> Bioconductor Core Team
>>>>
>>>> hpages.on.github at gmail.com<mailto:hpages.on.github at gmail.com>
>>>> CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.
>>>>
>>>>
>>>>          [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From therne@u @end|ng |rom m@yo@edu  Wed Feb  7 21:01:44 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 07 Feb 2024 14:01:44 -0600
Subject: [Rd] Difficult debug
Message-ID: <d2a753$lf9ru7@ironport10.mayo.edu>

 ?I've hit a roadblock debugging a new update to the survival package.?? I do debugging in 
a developement envinment, i.e. I don't create and load a package but rather? source all 
the .R files and dyn.load an .so file, which makes things a bit easier.

 ? Running with R -d "valgrind --tool=memcheck --leak-check=full" one of my test files 
crashes in simple R code a dozen lines after the? likely culprit has been called, i.e, the 
survfit function for an Aalen-Johansen, containing a .Call to the new C code.???? The 
valgrind approach had already allowed me to find a few other (mostly dumb) errors that led 
to an out of bounds access, e.g., the wrong endpoint variable in a for( ) loop.??? What 
would others advise as a next step?

Here is the last part of the screen
 > fit2 <- coxph(list(Surv(tstart, tstop, bstat) ~ 1,
+??????????????????? c(1:4):5 ~ age / common + shared), id= id, istate=bili4,
+?????????????? data=pbc2, ties='breslow', x=TRUE)
 > surv2 <- survfit(fit2, newdata=list(age=50), p0=c(.4, .3, .2, .1, 0))
 > test2 <- mysurv(fit2, pbc2$bili4, p0= 4:0/10, fit2, x0 =50)
==31730== Invalid read of size 8
==31730==??? at 0x298A07: Rf_allocVector3 (memory.c:2861)
==31730==??? by 0x299B2C: Rf_allocVector (Rinlinedfuns.h:595)
==31730==??? by 0x299B2C: R_alloc (memory.c:2330)
==31730==??? by 0x3243C6: do_which (summary.c:1152)
==31730==??? by 0x23D8EF: bcEval (eval.c:7724)
==31730==??? by 0x25731F: Rf_eval (eval.c:1152)
==31730==??? by 0x25927D: R_execClosure (eval.c:2362)
==31730==??? by 0x25A35A: R_execMethod (eval.c:2535)
==31730==??? by 0x887E93F: R_dispatchGeneric (methods_list_dispatch.c:1151)
==31730==??? by 0x2A0E72: do_standardGeneric (objects.c:1344)
==31730==??? by 0x2577E7: Rf_eval (eval.c:1254)
==31730==??? by 0x25927D: R_execClosure (eval.c:2362)
==31730==??? by 0x25A01C: applyClosure_core (eval.c:2250)
==31730==? Address 0x10 is not stack'd, malloc'd or (recently) free'd
==31730==

 ?*** caught segfault ***
address 0x10, cause 'memory not mapped'

Traceback:
 ?1: which(smap == j)
 ?2: which(smap == j)
 ?3: mysurv(fit2, pbc2$bili4, p0 = 4:0/10, fit2, x0 = 50)

The offending call is amost certainly the one to survfit; mysurv() is a local function 
that caculates some things 'by hand'. ? It does nothing complex: counts, loops, etc, the 
only non-base action is a call to Matrix::exp near the end, but the which() failure is 
well before that.

The session info just before the offending material:

 > sessionInfo()
R Under development (unstable) (2024-02-07 r85873)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 22.04.3 LTS

Matrix products: default
BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0

locale:
 ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
 ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
 ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
 ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
 ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

time zone: America/Chicago
tzcode source: system (glibc)

attached base packages:
[1] splines?? stats???? graphics? grDevices utils???? datasets methods
[8] base

other attached packages:
[1] Matrix_1.6-0

loaded via a namespace (and not attached):
[1] compiler_4.4.0 tools_4.4.0??? grid_4.4.0???? lattice_0.22-5


---
Footnote.? The impetus for this is realizing that the robust variance for an 
Aalen-Johansen was incorrect when there are case weights for a subject that vary over 
time;? a rare case but will occur with time dependent IPC weights.? Carefully figuring 
this out has been all I did for the last week, leading to a new routine survfitaj.c and 
approx 14 pages of derivation and explanation in the methods.Rnw vignette.?? Subjects who 
"change horses in midstream", i.e., swap from one curve to another mid-followup make the 
code more complex.?? This arises out of the "extended Kaplan-Meier"; I am not a fan of 
this statistically, but some will use it and expect my code to work.

-- 
Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Wed Feb  7 22:30:38 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 8 Feb 2024 00:30:38 +0300
Subject: [Rd] Difficult debug
In-Reply-To: <d2a753$lf9ru7@ironport10.mayo.edu>
References: <d2a753$lf9ru7@ironport10.mayo.edu>
Message-ID: <20240208003038.68216c31@Tarkus>

On Wed, 07 Feb 2024 14:01:44 -0600
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> wrote:

>  > test2 <- mysurv(fit2, pbc2$bili4, p0= 4:0/10, fit2, x0 =50)  
> ==31730== Invalid read of size 8
> ==31730==??? at 0x298A07: Rf_allocVector3 (memory.c:2861)
> ==31730==??? by 0x299B2C: Rf_allocVector (Rinlinedfuns.h:595)
> ==31730==??? by 0x299B2C: R_alloc (memory.c:2330)
> ==31730==??? by 0x3243C6: do_which (summary.c:1152)
<...>
> ==31730==? Address 0x10 is not stack'd, malloc'd or (recently) free'd
<...>
>  ?*** caught segfault ***
> address 0x10, cause 'memory not mapped'

An unrelated allocation function suddenly dereferencing a null pointer
is likely indication of heap corruption. Valgrind may be silent about
it because the C heap (that it knows how to override and track) is still
intact, but the R memory management metadata got corrupted (which looks
like a valid memory access to Valgrind).

An easy solution could be brought by more instrumentation.

R can tell Valgrind to consider some memory accesses invalid if you
configure it using --with-valgrind-instrumentation [*], but I'm not
sure it will be able to trap overwriting GC metadata, so let's set it
aside for now.

If you compile your own R, you can configure it with -fsanitize=address
added to the compiler and linker flags [**]. I'm not sure whether the
bounds checks performed by AddressSanitizer would be sufficient to
catch the problem, but it's worth a try. Instead of compiling R with
sanitizers, it should be also possible to use the container image
docker.io/rocker/r-devel-san.

The hard option is left if no instrumentation lets you pinpoint the
error. Since the first (as far as Valgrind is concerned) memory error
already happens to result in a SIGSEGV, you can run R in a regular
debugger and try to work backwards from the local variables at the
location of the crash. Maybe there's a way to identify the block
containing the pointer that gets overwritten and set a watchpoint on
it for the next run of R. Maybe you can read the overwritten value as
double and guess where the number came from. If your processor is
sufficiently new, you can try `rr`, the time-travelling debugger [***],
to rewind the process execution back to the point where the pointer gets
overwritten.

-- 
Best regards,
Ivan

[*]
https://cran.r-project.org/doc/manuals/R-exts.html#Using-valgrind

[**]
https://cran.r-project.org/doc/manuals/R-exts.html#Using-Address-Sanitizer

[***]
https://rr-project.org
Judging by the domain name, it's practically designed to fix troublesome
bugs in R packages!


From w||||@mwdun|@p @end|ng |rom gm@||@com  Thu Feb  8 00:46:47 2024
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Wed, 7 Feb 2024 15:46:47 -0800
Subject: [Rd] Difficult debug
In-Reply-To: <d2a753$lf9ru7@ironport10.mayo.edu>
References: <d2a753$lf9ru7@ironport10.mayo.edu>
Message-ID: <CAHqSRuRyJywYas+Kr6_4fzp9JE0_NzWSx+WH6ZaVQKdbV0_qcA@mail.gmail.com>

I haven't done any R memory debugging lately, but

https://www.mail-archive.com/rcpp-devel at lists.r-forge.r-project.org/msg10289.html
shows how I used to have gdb break where valgrind finds a problem so you
could examine the details.

Also, running your code after running gctorture(TRUE) can help track down
memory problems.

-Bill


On Wed, Feb 7, 2024 at 12:03?PM Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

>   I've hit a roadblock debugging a new update to the survival package.   I
> do debugging in
> a developement envinment, i.e. I don't create and load a package but
> rather  source all
> the .R files and dyn.load an .so file, which makes things a bit easier.
>
>    Running with R -d "valgrind --tool=memcheck --leak-check=full" one of
> my test files
> crashes in simple R code a dozen lines after the  likely culprit has been
> called, i.e, the
> survfit function for an Aalen-Johansen, containing a .Call to the new C
> code.     The
> valgrind approach had already allowed me to find a few other (mostly dumb)
> errors that led
> to an out of bounds access, e.g., the wrong endpoint variable in a for( )
> loop.    What
> would others advise as a next step?
>
> Here is the last part of the screen
>  > fit2 <- coxph(list(Surv(tstart, tstop, bstat) ~ 1,
> +                    c(1:4):5 ~ age / common + shared), id= id,
> istate=bili4,
> +               data=pbc2, ties='breslow', x=TRUE)
>  > surv2 <- survfit(fit2, newdata=list(age=50), p0=c(.4, .3, .2, .1, 0))
>  > test2 <- mysurv(fit2, pbc2$bili4, p0= 4:0/10, fit2, x0 =50)
> ==31730== Invalid read of size 8
> ==31730==    at 0x298A07: Rf_allocVector3 (memory.c:2861)
> ==31730==    by 0x299B2C: Rf_allocVector (Rinlinedfuns.h:595)
> ==31730==    by 0x299B2C: R_alloc (memory.c:2330)
> ==31730==    by 0x3243C6: do_which (summary.c:1152)
> ==31730==    by 0x23D8EF: bcEval (eval.c:7724)
> ==31730==    by 0x25731F: Rf_eval (eval.c:1152)
> ==31730==    by 0x25927D: R_execClosure (eval.c:2362)
> ==31730==    by 0x25A35A: R_execMethod (eval.c:2535)
> ==31730==    by 0x887E93F: R_dispatchGeneric (methods_list_dispatch.c:1151)
> ==31730==    by 0x2A0E72: do_standardGeneric (objects.c:1344)
> ==31730==    by 0x2577E7: Rf_eval (eval.c:1254)
> ==31730==    by 0x25927D: R_execClosure (eval.c:2362)
> ==31730==    by 0x25A01C: applyClosure_core (eval.c:2250)
> ==31730==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
> ==31730==
>
>   *** caught segfault ***
> address 0x10, cause 'memory not mapped'
>
> Traceback:
>   1: which(smap == j)
>   2: which(smap == j)
>   3: mysurv(fit2, pbc2$bili4, p0 = 4:0/10, fit2, x0 = 50)
>
> The offending call is amost certainly the one to survfit; mysurv() is a
> local function
> that caculates some things 'by hand'.   It does nothing complex: counts,
> loops, etc, the
> only non-base action is a call to Matrix::exp near the end, but the
> which() failure is
> well before that.
>
> The session info just before the offending material:
>
>  > sessionInfo()
> R Under development (unstable) (2024-02-07 r85873)
> Platform: x86_64-pc-linux-gnu
> Running under: Ubuntu 22.04.3 LTS
>
> Matrix products: default
> BLAS:   /usr/local/src/R-devel/lib/libRblas.so
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0
>
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=C
>   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> time zone: America/Chicago
> tzcode source: system (glibc)
>
> attached base packages:
> [1] splines   stats     graphics  grDevices utils     datasets methods
> [8] base
>
> other attached packages:
> [1] Matrix_1.6-0
>
> loaded via a namespace (and not attached):
> [1] compiler_4.4.0 tools_4.4.0    grid_4.4.0     lattice_0.22-5
>
>
> ---
> Footnote.  The impetus for this is realizing that the robust variance for
> an
> Aalen-Johansen was incorrect when there are case weights for a subject
> that vary over
> time;  a rare case but will occur with time dependent IPC weights.
> Carefully figuring
> this out has been all I did for the last week, leading to a new routine
> survfitaj.c and
> approx 14 pages of derivation and explanation in the methods.Rnw
> vignette.   Subjects who
> "change horses in midstream", i.e., swap from one curve to another
> mid-followup make the
> code more complex.   This arises out of the "extended Kaplan-Meier"; I am
> not a fan of
> this statistically, but some will use it and expect my code to work.
>
> --
> Terry M Therneau, PhD
> Department of Quantitative Health Sciences
> Mayo Clinic
> therneau at mayo.edu
>
> "TERR-ree THUR-noh"
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Thu Feb  8 01:40:02 2024
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Wed, 7 Feb 2024 16:40:02 -0800
Subject: [Rd] Difficult debug
In-Reply-To: <CAHqSRuRyJywYas+Kr6_4fzp9JE0_NzWSx+WH6ZaVQKdbV0_qcA@mail.gmail.com>
References: <d2a753$lf9ru7@ironport10.mayo.edu>
 <CAHqSRuRyJywYas+Kr6_4fzp9JE0_NzWSx+WH6ZaVQKdbV0_qcA@mail.gmail.com>
Message-ID: <CAHqSRuT24vV=L+R=CaTqWVRgSNP+ZDVtyQ+jF77V438481LUqg@mail.gmail.com>

| >>> I often run R under valgrind with the command line:
| >>>   $ R --quiet --no-save --debugger=valgrind
| >>> --debugger-args="--track-origins=yes --vgdb=full --vgdb-error=0"
| >>> then in another window start a debugger process with
| >>>   $ gdb RHOME/bin/exec/R
| >>>   ...
| >>>    (gdb) target remote | vgdb
| >>>    (gdb) cont
| >>> You may need to supply a complete path to vgdb, valgrind's interface to
| >>> gdb.
| >>> Then gdb will set breakpoints where valgrind reports memory misuse and
| >>> you can inspect variables, etc., where an error occurs.
| >>> You can check for memory leaks from gdb with
| >>>    (gdb) monitor leak_check full
| >>>
| >>> -Bill


You can use ^C to get the gdb prompt, to, say, set a breakpoint on
Rf_error or something in your code, and 'cont' or 'continue' to resume
running R.


You can get information about the status and history of a memory
location, say 0x12345678, with


(gdb) monitor vinfo location 0x12345678


More information is in https://valgrind.org/docs/manual/manual-core-adv.html.


On Wed, Feb 7, 2024 at 3:46?PM Bill Dunlap <williamwdunlap at gmail.com> wrote:

> I haven't done any R memory debugging lately, but
>
> https://www.mail-archive.com/rcpp-devel at lists.r-forge.r-project.org/msg10289.html
> shows how I used to have gdb break where valgrind finds a problem so you
> could examine the details.
>
> Also, running your code after running gctorture(TRUE) can help track down
> memory problems.
>
> -Bill
>
>
> On Wed, Feb 7, 2024 at 12:03?PM Therneau, Terry M., Ph.D. via R-devel <
> r-devel at r-project.org> wrote:
>
>>   I've hit a roadblock debugging a new update to the survival package.
>> I do debugging in
>> a developement envinment, i.e. I don't create and load a package but
>> rather  source all
>> the .R files and dyn.load an .so file, which makes things a bit easier.
>>
>>    Running with R -d "valgrind --tool=memcheck --leak-check=full" one of
>> my test files
>> crashes in simple R code a dozen lines after the  likely culprit has been
>> called, i.e, the
>> survfit function for an Aalen-Johansen, containing a .Call to the new C
>> code.     The
>> valgrind approach had already allowed me to find a few other (mostly
>> dumb) errors that led
>> to an out of bounds access, e.g., the wrong endpoint variable in a for( )
>> loop.    What
>> would others advise as a next step?
>>
>> Here is the last part of the screen
>>  > fit2 <- coxph(list(Surv(tstart, tstop, bstat) ~ 1,
>> +                    c(1:4):5 ~ age / common + shared), id= id,
>> istate=bili4,
>> +               data=pbc2, ties='breslow', x=TRUE)
>>  > surv2 <- survfit(fit2, newdata=list(age=50), p0=c(.4, .3, .2, .1, 0))
>>  > test2 <- mysurv(fit2, pbc2$bili4, p0= 4:0/10, fit2, x0 =50)
>> ==31730== Invalid read of size 8
>> ==31730==    at 0x298A07: Rf_allocVector3 (memory.c:2861)
>> ==31730==    by 0x299B2C: Rf_allocVector (Rinlinedfuns.h:595)
>> ==31730==    by 0x299B2C: R_alloc (memory.c:2330)
>> ==31730==    by 0x3243C6: do_which (summary.c:1152)
>> ==31730==    by 0x23D8EF: bcEval (eval.c:7724)
>> ==31730==    by 0x25731F: Rf_eval (eval.c:1152)
>> ==31730==    by 0x25927D: R_execClosure (eval.c:2362)
>> ==31730==    by 0x25A35A: R_execMethod (eval.c:2535)
>> ==31730==    by 0x887E93F: R_dispatchGeneric
>> (methods_list_dispatch.c:1151)
>> ==31730==    by 0x2A0E72: do_standardGeneric (objects.c:1344)
>> ==31730==    by 0x2577E7: Rf_eval (eval.c:1254)
>> ==31730==    by 0x25927D: R_execClosure (eval.c:2362)
>> ==31730==    by 0x25A01C: applyClosure_core (eval.c:2250)
>> ==31730==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
>> ==31730==
>>
>>   *** caught segfault ***
>> address 0x10, cause 'memory not mapped'
>>
>> Traceback:
>>   1: which(smap == j)
>>   2: which(smap == j)
>>   3: mysurv(fit2, pbc2$bili4, p0 = 4:0/10, fit2, x0 = 50)
>>
>> The offending call is amost certainly the one to survfit; mysurv() is a
>> local function
>> that caculates some things 'by hand'.   It does nothing complex: counts,
>> loops, etc, the
>> only non-base action is a call to Matrix::exp near the end, but the
>> which() failure is
>> well before that.
>>
>> The session info just before the offending material:
>>
>>  > sessionInfo()
>> R Under development (unstable) (2024-02-07 r85873)
>> Platform: x86_64-pc-linux-gnu
>> Running under: Ubuntu 22.04.3 LTS
>>
>> Matrix products: default
>> BLAS:   /usr/local/src/R-devel/lib/libRblas.so
>> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0
>>
>> locale:
>>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>>   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=C
>>   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>>   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>
>> time zone: America/Chicago
>> tzcode source: system (glibc)
>>
>> attached base packages:
>> [1] splines   stats     graphics  grDevices utils     datasets methods
>> [8] base
>>
>> other attached packages:
>> [1] Matrix_1.6-0
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.4.0 tools_4.4.0    grid_4.4.0     lattice_0.22-5
>>
>>
>> ---
>> Footnote.  The impetus for this is realizing that the robust variance for
>> an
>> Aalen-Johansen was incorrect when there are case weights for a subject
>> that vary over
>> time;  a rare case but will occur with time dependent IPC weights.
>> Carefully figuring
>> this out has been all I did for the last week, leading to a new routine
>> survfitaj.c and
>> approx 14 pages of derivation and explanation in the methods.Rnw
>> vignette.   Subjects who
>> "change horses in midstream", i.e., swap from one curve to another
>> mid-followup make the
>> code more complex.   This arises out of the "extended Kaplan-Meier"; I am
>> not a fan of
>> this statistically, but some will use it and expect my code to work.
>>
>> --
>> Terry M Therneau, PhD
>> Department of Quantitative Health Sciences
>> Mayo Clinic
>> therneau at mayo.edu
>>
>> "TERR-ree THUR-noh"
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Feb  8 15:15:22 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 8 Feb 2024 15:15:22 +0100
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
Message-ID: <26052.57850.412172.408639@stat.math.ethz.ch>

>>>>> Ji?? Moravec 
>>>>>     on Wed, 7 Feb 2024 10:23:15 +1300 writes:

    > This is my first time working with dates, so if the answer is "Duh, work 
    > with POSIXt", please ignore it.

    > Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?

    > Is this because `Date` is (mostly) a virtual class setup for a better 
    > inheritance or is that something that is just missing? (like 
    > `sort.data.frame`). Would R core welcome a patch?

    > I decided to convert some dates to date using `as.Date` function, which 
    > converts to a plain `Date` class, because that felt natural.

    > But then when trying to round to closest year, I have realized that the 
    > `round` and `trunc` for `Date` do not behave as for `POSIXt`.

    > I would assume that these will have equivalent output:

    > Sys.time() |> round("years") # 2024-01-01 NZDT

    > Sys.Date() |> round("years") # Error in round.default(...): non-numeric 
    > argument to mathematical function


    > Looking at the code (and reading the documentation more carefully) shows 
    > the issue, but this looks like an omission that should be patched.

    > -- Jirka

You are wrong:  They *are* implemented,
both even visible since they are in the 'base' package!

==> they have help pages you can read ....

Here are examples:

> trunc(Sys.Date())
[1] "2024-02-08"
> trunc(Sys.Date(), "month")
[1] "2024-02-01"
> trunc(Sys.Date(), "year")
[1] "2024-01-01"
>


From o||v|er@benz @end|ng |rom b-d@t@@ch  Thu Feb  8 15:36:50 2024
From: o||v|er@benz @end|ng |rom b-d@t@@ch (Olivier Benz)
Date: Thu, 8 Feb 2024 14:36:50 +0000
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <26052.57850.412172.408639@stat.math.ethz.ch>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
 <26052.57850.412172.408639@stat.math.ethz.ch>
Message-ID: <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>

> On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Ji?? Moravec 
>>>>>>    on Wed, 7 Feb 2024 10:23:15 +1300 writes:
> 
>> This is my first time working with dates, so if the answer is "Duh, work 
>> with POSIXt", please ignore it.
> 
>> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
> 
>> Is this because `Date` is (mostly) a virtual class setup for a better 
>> inheritance or is that something that is just missing? (like 
>> `sort.data.frame`). Would R core welcome a patch?
> 
>> I decided to convert some dates to date using `as.Date` function, which 
>> converts to a plain `Date` class, because that felt natural.
> 
>> But then when trying to round to closest year, I have realized that the 
>> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
> 
>> I would assume that these will have equivalent output:
> 
>> Sys.time() |> round("years") # 2024-01-01 NZDT
> 
>> Sys.Date() |> round("years") # Error in round.default(...): non-numeric 
>> argument to mathematical function
> 
> 
>> Looking at the code (and reading the documentation more carefully) shows 
>> the issue, but this looks like an omission that should be patched.
> 
>> -- Jirka
> 
> You are wrong:  They *are* implemented,
> both even visible since they are in the 'base' package!
> 
> ==> they have help pages you can read ....
> 
> Here are examples:
> 
>> trunc(Sys.Date())
> [1] "2024-02-08"
>> trunc(Sys.Date(), "month")
> [1] "2024-02-01"
>> trunc(Sys.Date(), "year")
> [1] "2024-01-01"
>> 
> 

Maybe he meant

r$> Sys.time() |> round.POSIXt("years")
[1] "2024-01-01 CET"

r$> Sys.Date() |> round.POSIXt("years")
[1] "2024-01-01 UTC"

The only difference is the timezone

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From AHL27 @end|ng |rom p|tt@edu  Thu Feb  8 17:55:23 2024
From: AHL27 @end|ng |rom p|tt@edu (Aidan Lakshman)
Date: Thu, 08 Feb 2024 11:55:23 -0500
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
 <26052.57850.412172.408639@stat.math.ethz.ch>
 <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>
Message-ID: <96417397-2BE4-414F-A0AB-9B97C7185084@pitt.edu>

I just wanted to add some additional problems from trying to replicate this.
`trunc` does indeed work as advertised here, as does calling `round.POSIXt(Sys.Date())`
and `round(Sys.Date())`. These functions are definitely implemented.

However, I am also able to replicate Ji???s error:

```
> round(Sys.Date())
[1] "2024-02-08"
> round(Sys.time(), 'years')
[1] "2024-01-01 EST"
> round(Sys.Date(), 'years')
Error in round.default(19761, "years") :
  non-numeric argument to mathematical function
```

Specifying `units="years"` causes errors ? either an error from named argument
(`unused argument units="years"`) or the above error when the argument is unnamed.
The error they?re experiencing isn?t actually from `round.Date`, it?s from trying
to call `round("years")`, which is done implicitly when `"years"` is provided as an
unnamed second argument to `round()`.

I suspect that the original bug report is referencing this behavior. Yes, it is correct
that `round.Date` does not accept a `units` parameter as implemented and as specified in
the help file. However, it does feel a little odd that `round.POSIXt` does accept a `units`
parameter, but `round.Date` does not. Adding that capability would be fairly simple, unless
there are other reasons why it isn?t implemented. Just my quick thoughts.

-Aidan

-----------------------
Aidan Lakshman (he/him)
http://www.ahl27.com/

On 8 Feb 2024, at 9:36, Olivier Benz via R-devel wrote:

>> On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> Ji?? Moravec
>>>>>>>    on Wed, 7 Feb 2024 10:23:15 +1300 writes:
>>
>>> This is my first time working with dates, so if the answer is "Duh, work
>>> with POSIXt", please ignore it.
>>
>>> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
>>
>>> Is this because `Date` is (mostly) a virtual class setup for a better
>>> inheritance or is that something that is just missing? (like
>>> `sort.data.frame`). Would R core welcome a patch?
>>
>>> I decided to convert some dates to date using `as.Date` function, which
>>> converts to a plain `Date` class, because that felt natural.
>>
>>> But then when trying to round to closest year, I have realized that the
>>> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
>>
>>> I would assume that these will have equivalent output:
>>
>>> Sys.time() |> round("years") # 2024-01-01 NZDT
>>
>>> Sys.Date() |> round("years") # Error in round.default(...): non-numeric
>>> argument to mathematical function
>>
>>
>>> Looking at the code (and reading the documentation more carefully) shows
>>> the issue, but this looks like an omission that should be patched.
>>
>>> -- Jirka
>>
>> You are wrong:  They *are* implemented,
>> both even visible since they are in the 'base' package!
>>
>> ==> they have help pages you can read ....
>>
>> Here are examples:
>>
>>> trunc(Sys.Date())
>> [1] "2024-02-08"
>>> trunc(Sys.Date(), "month")
>> [1] "2024-02-01"
>>> trunc(Sys.Date(), "year")
>> [1] "2024-01-01"
>>>
>>
>
> Maybe he meant
>
> r$> Sys.time() |> round.POSIXt("years")
> [1] "2024-01-01 CET"
>
> r$> Sys.Date() |> round.POSIXt("years")
> [1] "2024-01-01 UTC"
>
> The only difference is the timezone
>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Feb  8 18:05:44 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 8 Feb 2024 17:05:44 +0000
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
 <26052.57850.412172.408639@stat.math.ethz.ch>
 <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>
Message-ID: <4241f2e5-71bf-4b68-adc9-6f69af371206@sapo.pt>

?s 14:36 de 08/02/2024, Olivier Benz via R-devel escreveu:
>> On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> Ji?? Moravec
>>>>>>>     on Wed, 7 Feb 2024 10:23:15 +1300 writes:
>>
>>> This is my first time working with dates, so if the answer is "Duh, work
>>> with POSIXt", please ignore it.
>>
>>> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
>>
>>> Is this because `Date` is (mostly) a virtual class setup for a better
>>> inheritance or is that something that is just missing? (like
>>> `sort.data.frame`). Would R core welcome a patch?
>>
>>> I decided to convert some dates to date using `as.Date` function, which
>>> converts to a plain `Date` class, because that felt natural.
>>
>>> But then when trying to round to closest year, I have realized that the
>>> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
>>
>>> I would assume that these will have equivalent output:
>>
>>> Sys.time() |> round("years") # 2024-01-01 NZDT
>>
>>> Sys.Date() |> round("years") # Error in round.default(...): non-numeric
>>> argument to mathematical function
>>
>>
>>> Looking at the code (and reading the documentation more carefully) shows
>>> the issue, but this looks like an omission that should be patched.
>>
>>> -- Jirka
>>
>> You are wrong:  They *are* implemented,
>> both even visible since they are in the 'base' package!
>>
>> ==> they have help pages you can read ....
>>
>> Here are examples:
>>
>>> trunc(Sys.Date())
>> [1] "2024-02-08"
>>> trunc(Sys.Date(), "month")
>> [1] "2024-02-01"
>>> trunc(Sys.Date(), "year")
>> [1] "2024-01-01"
>>>
>>
> 
> Maybe he meant
> 
> r$> Sys.time() |> round.POSIXt("years")
> [1] "2024-01-01 CET"
> 
> r$> Sys.Date() |> round.POSIXt("years")
> [1] "2024-01-01 UTC"
> 
> The only difference is the timezone
> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
Hello,

You are right that the timezones are different but Sys.date() returns an 
object of class "Date" so the method called is not that one.
Here an example with trunc.


Sys.Date() |> class()
Sys.Date() |> trunc("years")
Sys.Date() |> trunc.Date("years")
Sys.Date() |> trunc.POSIXt("years")


As for the OP, the problem is thhat the generic roun())) doesn't have 
unit argument. So I am  nnnot understanding why round.POSIXt works.


Sys.Date() |> round("years")
#> Error in round.default(structure(19761, class = "Date"), "years"): 
non-numeric argument to mathematical function
Sys.Date() |> round.Date("years")
#> Error in NextMethod(): generic function not specified

Sys.Date() |> round.POSIXt("years")
#> [1] "2024-01-01 UTC"
Sys.Date() |> round.POSIXt("months")
#> [1] "2024-02-01 UTC"
Sys.Date() |> round.POSIXt("days")
#> [1] "2024-02-08 UTC"


Hope this helps,

Rui Barradas



-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Feb  8 18:23:25 2024
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 8 Feb 2024 09:23:25 -0800
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <4241f2e5-71bf-4b68-adc9-6f69af371206@sapo.pt>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
 <26052.57850.412172.408639@stat.math.ethz.ch>
 <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>
 <4241f2e5-71bf-4b68-adc9-6f69af371206@sapo.pt>
Message-ID: <CAFDcVCTtMK3OPhRT3N-piGwxwfZgbydcofE4-K_am3J+y9ZY7Q@mail.gmail.com>

Technically, there is a round() for 'Date' objects, but it doesn't
seem very useful, because it basically just fall back to the default
round() method, which only takes the 'digits' argument.

Here's an example:

> date <- Sys.Date()
> class(date)
[1] "Date"

We see that there are only two round() methods in addition to the
implicit built-in one;

> methods("round")
[1] round.Date   round.POSIXt
see '?methods' for accessing help and source code

Looking at round() for 'Date';

> round.Date
function (x, ...)
{
    .Date(NextMethod(), oldClass(x))
}
<environment: namespace:base>

we see that it defers to the next method here, which is the built-in
one. The built-in one, only accepts 'digits', which does nothing for
digits >= 0.  For digits < 0, it rounds to power of ten, e.g.

> date
[1] "2024-02-08"
> round(date, digits = 0)
[1] "2024-02-08"
> round(date, digits = 1)
[1] "2024-02-08"
> round(date, digits = 2)
[1] "2024-02-08"
> round(date, digits = -1)
[1] "2024-02-07"
> round(date, digits = -2)
[1] "2024-03-18"
> round(date, digits = -3)
[1] "2024-10-04"
> round(date, digits = -4)
[1] "2024-10-04"
> round(date, digits = -5)
[1] "1970-01-01"

So, although technically invalid, OPs remark is a valid one. I'd also
expect `round()` for Date to support 'units' similar to timestamps,
e.g.

> time <- Sys.time()
> class(time)
[1] "POSIXct" "POSIXt"
> time
[1] "2024-02-08 09:17:02 PST"
> round(time, units = "days")
[1] "2024-02-08 PST"
> round(time, units = "months")
[1] "2024-02-01 PST"
> round(time, units = "years")
[1] "2024-01-01 PST"

So, I agree with OP that one would expect:

> round(date, units = "days")
[1] "2024-02-08"
> round(date, units = "months")
[1] "2024-02-01"
> round(date, units = "years")
[1] "2024-01-01"

to also work here.

FWIW, I don't think we want to encourage circumventing the S3 generic
and calling S3 methods directly, i.e. I don't recommend doing things
like round.POSIXt(...). Ideally, all S3 methods in R would be
non-exported, but some remain exported for legacy reason. But, I think
we should treat them as if they in the future will become
non-exported.

/Henrik

On Thu, Feb 8, 2024 at 8:18?AM Olivier Benz via R-devel
<r-devel at r-project.org> wrote:
>
> > On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> >
> >>>>>> Ji?? Moravec
> >>>>>>    on Wed, 7 Feb 2024 10:23:15 +1300 writes:
> >
> >> This is my first time working with dates, so if the answer is "Duh, work
> >> with POSIXt", please ignore it.
> >
> >> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
> >
> >> Is this because `Date` is (mostly) a virtual class setup for a better
> >> inheritance or is that something that is just missing? (like
> >> `sort.data.frame`). Would R core welcome a patch?
> >
> >> I decided to convert some dates to date using `as.Date` function, which
> >> converts to a plain `Date` class, because that felt natural.
> >
> >> But then when trying to round to closest year, I have realized that the
> >> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
> >
> >> I would assume that these will have equivalent output:
> >
> >> Sys.time() |> round("years") # 2024-01-01 NZDT
> >
> >> Sys.Date() |> round("years") # Error in round.default(...): non-numeric
> >> argument to mathematical function
> >
> >
> >> Looking at the code (and reading the documentation more carefully) shows
> >> the issue, but this looks like an omission that should be patched.
> >
> >> -- Jirka
> >
> > You are wrong:  They *are* implemented,
> > both even visible since they are in the 'base' package!
> >
> > ==> they have help pages you can read ....
> >
> > Here are examples:
> >
> >> trunc(Sys.Date())
> > [1] "2024-02-08"
> >> trunc(Sys.Date(), "month")
> > [1] "2024-02-01"
> >> trunc(Sys.Date(), "year")
> > [1] "2024-01-01"
> >>
> >
>
> Maybe he meant
>
> r$> Sys.time() |> round.POSIXt("years")
> [1] "2024-01-01 CET"
>
> r$> Sys.Date() |> round.POSIXt("years")
> [1] "2024-01-01 UTC"
>
> The only difference is the timezone
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

On Thu, Feb 8, 2024 at 9:06?AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> ?s 14:36 de 08/02/2024, Olivier Benz via R-devel escreveu:
> >> On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> >>
> >>>>>>> Ji?? Moravec
> >>>>>>>     on Wed, 7 Feb 2024 10:23:15 +1300 writes:
> >>
> >>> This is my first time working with dates, so if the answer is "Duh, work
> >>> with POSIXt", please ignore it.
> >>
> >>> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
> >>
> >>> Is this because `Date` is (mostly) a virtual class setup for a better
> >>> inheritance or is that something that is just missing? (like
> >>> `sort.data.frame`). Would R core welcome a patch?
> >>
> >>> I decided to convert some dates to date using `as.Date` function, which
> >>> converts to a plain `Date` class, because that felt natural.
> >>
> >>> But then when trying to round to closest year, I have realized that the
> >>> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
> >>
> >>> I would assume that these will have equivalent output:
> >>
> >>> Sys.time() |> round("years") # 2024-01-01 NZDT
> >>
> >>> Sys.Date() |> round("years") # Error in round.default(...): non-numeric
> >>> argument to mathematical function
> >>
> >>
> >>> Looking at the code (and reading the documentation more carefully) shows
> >>> the issue, but this looks like an omission that should be patched.
> >>
> >>> -- Jirka
> >>
> >> You are wrong:  They *are* implemented,
> >> both even visible since they are in the 'base' package!
> >>
> >> ==> they have help pages you can read ....
> >>
> >> Here are examples:
> >>
> >>> trunc(Sys.Date())
> >> [1] "2024-02-08"
> >>> trunc(Sys.Date(), "month")
> >> [1] "2024-02-01"
> >>> trunc(Sys.Date(), "year")
> >> [1] "2024-01-01"
> >>>
> >>
> >
> > Maybe he meant
> >
> > r$> Sys.time() |> round.POSIXt("years")
> > [1] "2024-01-01 CET"
> >
> > r$> Sys.Date() |> round.POSIXt("years")
> > [1] "2024-01-01 UTC"
> >
> > The only difference is the timezone
> >
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> Hello,
>
> You are right that the timezones are different but Sys.date() returns an
> object of class "Date" so the method called is not that one.
> Here an example with trunc.
>
>
> Sys.Date() |> class()
> Sys.Date() |> trunc("years")
> Sys.Date() |> trunc.Date("years")
> Sys.Date() |> trunc.POSIXt("years")
>
>
> As for the OP, the problem is thhat the generic roun())) doesn't have
> unit argument. So I am  nnnot understanding why round.POSIXt works.
>
>
> Sys.Date() |> round("years")
> #> Error in round.default(structure(19761, class = "Date"), "years"):
> non-numeric argument to mathematical function
> Sys.Date() |> round.Date("years")
> #> Error in NextMethod(): generic function not specified
>
> Sys.Date() |> round.POSIXt("years")
> #> [1] "2024-01-01 UTC"
> Sys.Date() |> round.POSIXt("months")
> #> [1] "2024-02-01 UTC"
> Sys.Date() |> round.POSIXt("days")
> #> [1] "2024-02-08 UTC"
>
>
> Hope this helps,
>
> Rui Barradas
>
>
>
> --
> Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
> www.avg.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Feb  8 19:03:40 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 8 Feb 2024 13:03:40 -0500
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <CAFDcVCTtMK3OPhRT3N-piGwxwfZgbydcofE4-K_am3J+y9ZY7Q@mail.gmail.com>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
 <26052.57850.412172.408639@stat.math.ethz.ch>
 <BE1306E2-32F4-4AD1-ACE1-C91D503203E4@b-data.ch>
 <4241f2e5-71bf-4b68-adc9-6f69af371206@sapo.pt>
 <CAFDcVCTtMK3OPhRT3N-piGwxwfZgbydcofE4-K_am3J+y9ZY7Q@mail.gmail.com>
Message-ID: <41265ce9-5a0c-4e38-af69-461e065ab81f@gmail.com>

This is a workaround, and could be the basis for a round.Date improvement:

   date <- Sys.Date()

   as.Date(round(as.POSIXct(date), "years"))

   as.Date(round(as.POSIXct(Sys.Date() + 180), "years"))

Duncan Murdoch

On 08/02/2024 12:23 p.m., Henrik Bengtsson wrote:
> Technically, there is a round() for 'Date' objects, but it doesn't
> seem very useful, because it basically just fall back to the default
> round() method, which only takes the 'digits' argument.
> 
> Here's an example:
> 
>> date <- Sys.Date()
>> class(date)
> [1] "Date"
> 
> We see that there are only two round() methods in addition to the
> implicit built-in one;
> 
>> methods("round")
> [1] round.Date   round.POSIXt
> see '?methods' for accessing help and source code
> 
> Looking at round() for 'Date';
> 
>> round.Date
> function (x, ...)
> {
>      .Date(NextMethod(), oldClass(x))
> }
> <environment: namespace:base>
> 
> we see that it defers to the next method here, which is the built-in
> one. The built-in one, only accepts 'digits', which does nothing for
> digits >= 0.  For digits < 0, it rounds to power of ten, e.g.
> 
>> date
> [1] "2024-02-08"
>> round(date, digits = 0)
> [1] "2024-02-08"
>> round(date, digits = 1)
> [1] "2024-02-08"
>> round(date, digits = 2)
> [1] "2024-02-08"
>> round(date, digits = -1)
> [1] "2024-02-07"
>> round(date, digits = -2)
> [1] "2024-03-18"
>> round(date, digits = -3)
> [1] "2024-10-04"
>> round(date, digits = -4)
> [1] "2024-10-04"
>> round(date, digits = -5)
> [1] "1970-01-01"
> 
> So, although technically invalid, OPs remark is a valid one. I'd also
> expect `round()` for Date to support 'units' similar to timestamps,
> e.g.
> 
>> time <- Sys.time()
>> class(time)
> [1] "POSIXct" "POSIXt"
>> time
> [1] "2024-02-08 09:17:02 PST"
>> round(time, units = "days")
> [1] "2024-02-08 PST"
>> round(time, units = "months")
> [1] "2024-02-01 PST"
>> round(time, units = "years")
> [1] "2024-01-01 PST"
> 
> So, I agree with OP that one would expect:
> 
>> round(date, units = "days")
> [1] "2024-02-08"
>> round(date, units = "months")
> [1] "2024-02-01"
>> round(date, units = "years")
> [1] "2024-01-01"
> 
> to also work here.
> 
> FWIW, I don't think we want to encourage circumventing the S3 generic
> and calling S3 methods directly, i.e. I don't recommend doing things
> like round.POSIXt(...). Ideally, all S3 methods in R would be
> non-exported, but some remain exported for legacy reason. But, I think
> we should treat them as if they in the future will become
> non-exported.
> 
> /Henrik
> 
> On Thu, Feb 8, 2024 at 8:18?AM Olivier Benz via R-devel
> <r-devel at r-project.org> wrote:
>>
>>> On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>>
>>>>>>>> Ji?? Moravec
>>>>>>>>     on Wed, 7 Feb 2024 10:23:15 +1300 writes:
>>>
>>>> This is my first time working with dates, so if the answer is "Duh, work
>>>> with POSIXt", please ignore it.
>>>
>>>> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
>>>
>>>> Is this because `Date` is (mostly) a virtual class setup for a better
>>>> inheritance or is that something that is just missing? (like
>>>> `sort.data.frame`). Would R core welcome a patch?
>>>
>>>> I decided to convert some dates to date using `as.Date` function, which
>>>> converts to a plain `Date` class, because that felt natural.
>>>
>>>> But then when trying to round to closest year, I have realized that the
>>>> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
>>>
>>>> I would assume that these will have equivalent output:
>>>
>>>> Sys.time() |> round("years") # 2024-01-01 NZDT
>>>
>>>> Sys.Date() |> round("years") # Error in round.default(...): non-numeric
>>>> argument to mathematical function
>>>
>>>
>>>> Looking at the code (and reading the documentation more carefully) shows
>>>> the issue, but this looks like an omission that should be patched.
>>>
>>>> -- Jirka
>>>
>>> You are wrong:  They *are* implemented,
>>> both even visible since they are in the 'base' package!
>>>
>>> ==> they have help pages you can read ....
>>>
>>> Here are examples:
>>>
>>>> trunc(Sys.Date())
>>> [1] "2024-02-08"
>>>> trunc(Sys.Date(), "month")
>>> [1] "2024-02-01"
>>>> trunc(Sys.Date(), "year")
>>> [1] "2024-01-01"
>>>>
>>>
>>
>> Maybe he meant
>>
>> r$> Sys.time() |> round.POSIXt("years")
>> [1] "2024-01-01 CET"
>>
>> r$> Sys.Date() |> round.POSIXt("years")
>> [1] "2024-01-01 UTC"
>>
>> The only difference is the timezone
>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> On Thu, Feb 8, 2024 at 9:06?AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>
>> ?s 14:36 de 08/02/2024, Olivier Benz via R-devel escreveu:
>>>> On 8 Feb 2024, at 15:15, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>>>
>>>>>>>>> Ji?? Moravec
>>>>>>>>>      on Wed, 7 Feb 2024 10:23:15 +1300 writes:
>>>>
>>>>> This is my first time working with dates, so if the answer is "Duh, work
>>>>> with POSIXt", please ignore it.
>>>>
>>>>> Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
>>>>
>>>>> Is this because `Date` is (mostly) a virtual class setup for a better
>>>>> inheritance or is that something that is just missing? (like
>>>>> `sort.data.frame`). Would R core welcome a patch?
>>>>
>>>>> I decided to convert some dates to date using `as.Date` function, which
>>>>> converts to a plain `Date` class, because that felt natural.
>>>>
>>>>> But then when trying to round to closest year, I have realized that the
>>>>> `round` and `trunc` for `Date` do not behave as for `POSIXt`.
>>>>
>>>>> I would assume that these will have equivalent output:
>>>>
>>>>> Sys.time() |> round("years") # 2024-01-01 NZDT
>>>>
>>>>> Sys.Date() |> round("years") # Error in round.default(...): non-numeric
>>>>> argument to mathematical function
>>>>
>>>>
>>>>> Looking at the code (and reading the documentation more carefully) shows
>>>>> the issue, but this looks like an omission that should be patched.
>>>>
>>>>> -- Jirka
>>>>
>>>> You are wrong:  They *are* implemented,
>>>> both even visible since they are in the 'base' package!
>>>>
>>>> ==> they have help pages you can read ....
>>>>
>>>> Here are examples:
>>>>
>>>>> trunc(Sys.Date())
>>>> [1] "2024-02-08"
>>>>> trunc(Sys.Date(), "month")
>>>> [1] "2024-02-01"
>>>>> trunc(Sys.Date(), "year")
>>>> [1] "2024-01-01"
>>>>>
>>>>
>>>
>>> Maybe he meant
>>>
>>> r$> Sys.time() |> round.POSIXt("years")
>>> [1] "2024-01-01 CET"
>>>
>>> r$> Sys.Date() |> round.POSIXt("years")
>>> [1] "2024-01-01 UTC"
>>>
>>> The only difference is the timezone
>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> Hello,
>>
>> You are right that the timezones are different but Sys.date() returns an
>> object of class "Date" so the method called is not that one.
>> Here an example with trunc.
>>
>>
>> Sys.Date() |> class()
>> Sys.Date() |> trunc("years")
>> Sys.Date() |> trunc.Date("years")
>> Sys.Date() |> trunc.POSIXt("years")
>>
>>
>> As for the OP, the problem is thhat the generic roun())) doesn't have
>> unit argument. So I am  nnnot understanding why round.POSIXt works.
>>
>>
>> Sys.Date() |> round("years")
>> #> Error in round.default(structure(19761, class = "Date"), "years"):
>> non-numeric argument to mathematical function
>> Sys.Date() |> round.Date("years")
>> #> Error in NextMethod(): generic function not specified
>>
>> Sys.Date() |> round.POSIXt("years")
>> #> [1] "2024-01-01 UTC"
>> Sys.Date() |> round.POSIXt("months")
>> #> [1] "2024-02-01 UTC"
>> Sys.Date() |> round.POSIXt("days")
>> #> [1] "2024-02-08 UTC"
>>
>>
>> Hope this helps,
>>
>> Rui Barradas
>>
>>
>>
>> --
>> Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
>> www.avg.com
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Thu Feb  8 22:54:30 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Fri, 9 Feb 2024 10:54:30 +1300
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <26052.57850.412172.408639@stat.math.ethz.ch>
References: <ab3376ac-5694-4a53-9606-c11bd97a4f0a@gmail.com>
 <26052.57850.412172.408639@stat.math.ethz.ch>
Message-ID: <46e57576-faff-468f-915d-410ee7b45855@gmail.com>

Apologies then. I was using R version 4.1.2 (Bird Hippie) and looks like 
someone implemented a better trunc.Date version in the meantime.

# v4.1.2
 > trunc.Date
function (x, ...)
round(x - 0.4999999)
<bytecode: 0x56138c284de0>
<environment: namespace:base>

# Unstable (2024-02-07 r85873)
 > trunc.Date
function (x, units = c("secs", "mins", "hours", "days", "months",
 ??? "years"), ...)
{
 ??? units <- match.arg(units)
 ??? if (units == "months" || units == "years")
 ??????? as.Date(trunc.POSIXt(x, units, ...))
 ??? else round(x - 0.4999999)
}
<bytecode: 0x565254ea8398>
<environment: namespace:base>


And I was looking towards my first contribution. :(
Well, its on me for not checking the dev version before writing email 
and using something that is 3 years out of date.

Look like the change did not affected `round.Date`. In both versions it 
is still not accepting `units` and instead treating `Date(...)` as numeric.

Would similar treatment for `round.Date` be desirable? And perhaps 
`floor` and `ceiling` (rounding up)? I found it useful when plotting 
(although axis.Date and prettyDate did solved some issues). Although

-- Jirka


On 9/02/24 03:15, Martin Maechler wrote:
>>>>>> Ji?? Moravec
>>>>>>      on Wed, 7 Feb 2024 10:23:15 +1300 writes:
>      > This is my first time working with dates, so if the answer is "Duh, work
>      > with POSIXt", please ignore it.
>
>      > Why is not `round.Date` and `trunc.Date` "implemented" for `Date`?
>
>      > Is this because `Date` is (mostly) a virtual class setup for a better
>      > inheritance or is that something that is just missing? (like
>      > `sort.data.frame`). Would R core welcome a patch?
>
>      > I decided to convert some dates to date using `as.Date` function, which
>      > converts to a plain `Date` class, because that felt natural.
>
>      > But then when trying to round to closest year, I have realized that the
>      > `round` and `trunc` for `Date` do not behave as for `POSIXt`.
>
>      > I would assume that these will have equivalent output:
>
>      > Sys.time() |> round("years") # 2024-01-01 NZDT
>
>      > Sys.Date() |> round("years") # Error in round.default(...): non-numeric
>      > argument to mathematical function
>
>
>      > Looking at the code (and reading the documentation more carefully) shows
>      > the issue, but this looks like an omission that should be patched.
>
>      > -- Jirka
>
> You are wrong:  They *are* implemented,
> both even visible since they are in the 'base' package!
>
> ==> they have help pages you can read ....
>
> Here are examples:
>
>> trunc(Sys.Date())
> [1] "2024-02-08"
>> trunc(Sys.Date(), "month")
> [1] "2024-02-01"
>> trunc(Sys.Date(), "year")
> [1] "2024-01-01"


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Fri Feb  9 01:58:00 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Fri, 9 Feb 2024 13:58:00 +1300
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <41265ce9-5a0c-4e38-af69-461e065ab81f@gmail.com>
References: <41265ce9-5a0c-4e38-af69-461e065ab81f@gmail.com>
Message-ID: <8de0995f-dc5c-4788-8a8b-959bf79ee71c@gmail.com>

 > This is a workaround, and could be the basis for a round.Date 
improvement:
 >?? date <- Sys.Date()
 >?? as.Date(round(as.POSIXct(date), "years"))
 >?? as.Date(round(as.POSIXct(Sys.Date() + 180), "years"))
 > Duncan Murdoch

That would work, perhaps structured similarly as `trunc.Date` is.
The only issue might be that `trunc.Date` is currently using `round.Date`
in its numeric form likely to prevent ?expensive? conversion to POSIXt 
when it is not required.

 > trunc.Date
 > function (x, units = c("secs", "mins", "hours", "days", "months",
 >? ?? "years"), ...)
 > {
 >??? units <- match.arg(units)
 >??? if (units == "months" || units == "years")
 >??????? as.Date(trunc.POSIXt(x, units, ...))
 >??? else round(x - 0.4999999)
 > }

Perhaps the working version of `round.Date` could be:

 ? round.Date = function(x, units = c("secs", "mins", "hours", "days", 
"months", "years")){
 ??? units = match.arg(units)

 ??? if (units == "months" || units == "years")
 ??? ? as.Date(round.POSIXt(x, units, ...))
 ??? else .Date(round(as.numeric(x)))
 ? }

Or perhaps `unclass` instead of `as.numeric`. Since the default `units` 
for round(x) evaluates
to `sec`, this should correctly skip the first condition in `round` and 
get to the correct numeric
rounding.

Perhaps the `trunc.Date` should be modified as well so that the call to 
`round.Date` is skipped in favour of internal `round.numeric`, saving 
few cycles.

-- Jirka


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Feb  9 14:36:23 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 9 Feb 2024 08:36:23 -0500
Subject: [Rd] round.Date and trunc.Date not working / implemented
In-Reply-To: <8de0995f-dc5c-4788-8a8b-959bf79ee71c@gmail.com>
References: <41265ce9-5a0c-4e38-af69-461e065ab81f@gmail.com>
 <8de0995f-dc5c-4788-8a8b-959bf79ee71c@gmail.com>
Message-ID: <c32e4bd2-d425-44f1-b1c3-892762af1337@gmail.com>

On 08/02/2024 7:58 p.m., Ji?? Moravec wrote:
>   > This is a workaround, and could be the basis for a round.Date
> improvement:
>   >?? date <- Sys.Date()
>   >?? as.Date(round(as.POSIXct(date), "years"))
>   >?? as.Date(round(as.POSIXct(Sys.Date() + 180), "years"))
>   > Duncan Murdoch
> 
> That would work, perhaps structured similarly as `trunc.Date` is.
> The only issue might be that `trunc.Date` is currently using `round.Date`
> in its numeric form likely to prevent ?expensive? conversion to POSIXt
> when it is not required.
> 
>   > trunc.Date
>   > function (x, units = c("secs", "mins", "hours", "days", "months",
>   >? ?? "years"), ...)
>   > {
>   >??? units <- match.arg(units)
>   >??? if (units == "months" || units == "years")
>   >??????? as.Date(trunc.POSIXt(x, units, ...))
>   >??? else round(x - 0.4999999)
>   > }
> 
> Perhaps the working version of `round.Date` could be:
> 
>   ? round.Date = function(x, units = c("secs", "mins", "hours", "days",
> "months", "years")){
>   ??? units = match.arg(units)
> 
>   ??? if (units == "months" || units == "years")
>   ??? ? as.Date(round.POSIXt(x, units, ...))
>   ??? else .Date(round(as.numeric(x)))
>   ? }

If I were writing round.Date, I wouldn't offer the user an explicit 
option to round to seconds, minutes or hours.  So the header could be

     round.Date = function(x, units = c("days", "months", "years"))

Whether the function would complain if given other units like "secs" 
would need to be decided.

Like Henrik, I don't really like direct calls to methods such as your 
round.POSIXt call.  Those make assumptions that may not be true for 
weird corner cases where the class is not just "Date", but something 
more complicated that happens to have "Date" as one of the components of 
the class.  However, the related functions use that writing style, so I 
shouldn't complain too much.

Duncan Murdoch

> 
> Or perhaps `unclass` instead of `as.numeric`. Since the default `units`
> for round(x) evaluates
> to `sec`, this should correctly skip the first condition in `round` and
> get to the correct numeric
> rounding.
> 
> Perhaps the `trunc.Date` should be modified as well so that the call to
> `round.Date` is skipped in favour of internal `round.numeric`, saving
> few cycles.
> 
> -- Jirka
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From AHL27 @end|ng |rom p|tt@edu  Mon Feb 12 22:15:24 2024
From: AHL27 @end|ng |rom p|tt@edu (Aidan Lakshman)
Date: Mon, 12 Feb 2024 16:15:24 -0500
Subject: [Rd] Errors in wilcox family functions
Message-ID: <C83515E8-FC8D-4226-9447-195BE83A41D6@pitt.edu>

Hi Everyone,

Following the previous discussion on optimizing *wilcox functions, Andreas Loeffler brought to my attention a few other bugs in `wilcox` family functions. It seems like these issues have been discussed online in the past few months, but I haven?t seen discussion on R-devel...unless I missed an email, it seems like discussion never made it to the mailing list. I haven?t seen any bug reports on Bugzilla to this effect either, so I?m emailing the list to start discussion with both Andreas and Andrey cc?d so they can provide additional detail.

Most of these issues have been raised by Andrey Akinshin on his blog, which I will link throughout for reproducible examples and code rather than making this email even longer than it already is. Of the following points, (1-2) could be considered bugs, and (3-4) enhancements. I wanted to reach out to determine if R-devel was already aware of these, and if so, if people have already been working on them.

The current issues are the following:

1. `wilcox.test` returns very distorted p-values when `exact=FALSE`, especially at the tails of the distribution. These errors are due to inaccuracy in the normal approximation. While there will obviously be errors using any approximation, it is possible to use an Edgeworth Expansion correction to uniformly decreases the error in p-value approximation without substantially rewriting the internals. An example patch and benchmarks are available at https://github.com/ahl27/R_Patches/tree/94e8e0bcf5076841637f1031ea9cf456ad18d7ef/EdgeworthExpansion.

More verbose details, examples, and benchmarks:
- https://aakinshin.net/posts/r-mann-whitney-incorrect-p-value/
- https://aakinshin.net/posts/mw-edgeworth/

2. The built-in Hodges-Lehmann estimator has some edge cases that result in incorrect answers without suitable warnings. These are detailed extensively at the links below. In short, the following cases result in an incorrect value for `wilcox.test(..., conf.int=TRUE)$estimate`:
- `x` has zero values: these are trimmed before the median is calculated, so `x=c(0,1,2)` returns a median of 1.5.
- tied values in either one- or two-sample tests: these can force R to use a normal approximation even in low-sample cases.
- degenerate two-sample tests (`max(x)==min(x)` and `max(y)==min(y)`): this produces an error due to an unhandled edge case.

This particular issue has caused problems for the DescTools package, which recently reimplemented HodgesLehmann due to inaccurate results in base R. At the very least, warnings should probably be added so that users don?t misinterpret these results. Better still would be to just fix these cases, but I haven?t dug super deep into the codebase yet, so I?m not completely sure how difficult that would be.

Details and examples:
- https://aakinshin.net/posts/r-hodges-lehmann-problems/
- Discussion in DescTools (https://github.com/AndriSignorell/DescTools/issues/97)

3. `*signrank` functions hang for large values of `n`. The exact value varies, but tends to be around `n>=1000`. `wilcox.test` supports an `exact` argument?should an inexact approximation be implemented for *signrank functions with `n>=1000`? An Edgeworth approximation could be similarly leveraged here to return results in a reasonable manner.

Full writeup: https://aakinshin.net/posts/signrank-limitations/

4. Suggestions for updating tie correction in Mann-Whitney U tests. Andrey has a very extensive writeup of the cases that make tie correction sometimes unintuitive, and I?m just going to link it here: https://aakinshin.net/posts/mw-confusing-tie-correction/.

If these seem like they?d be welcome improvements to R, I?ll work with Andrey on putting some patches up on Bugzilla this week. If people have already known about these and discussed them and I just somehow missed it, then I?m very sorry for the verbose email.

Thanks again to Andrey for the writeup, and Andreas for pointing me to it.

-Aidan

-----------------------
Aidan Lakshman (he/him)
www.AHL27.com


From jono @end|ng |rom jc@rro||@com@@u  Wed Feb 14 03:03:42 2024
From: jono @end|ng |rom jc@rro||@com@@u (Jonathan Carroll)
Date: Wed, 14 Feb 2024 12:33:42 +1030
Subject: [Rd] as.roman upper limit
Message-ID: <CAAjDRiiEfWwvrjPHY6xYed7qktfjXyVmBGQ8JAZwAZzp9REtVg@mail.gmail.com>

I was recently participating in a coding challenge which involved
converting integers to Roman numerals. I knew R offers this
functionality already via as.roman() and hoped to leverage that for a
quick solution, but was surprised that one of the challenge's tests
failed; conversion of the number 3999, which should result in
"MMMCMXCIX". In R, that produces NA.

I looked into the source and documentation and it's clear that an
upper limit of 3899 is enforced in several places, and documented as
such. I detailed some of these explorations on my blog [0]. Ben Bolker
traced the first implementation (or at the least the creation of
src/library/utils/R/roman.R) in the (GitHub cloned) source [1] dating
back to 2006 and this uses the 3899 hard limit.

Wikipedia [2] claims the largest uniquely representable Roman numeral is 3999.

Other languages appear to use 3999 as the largest input value, e.g.
the python-cookbook [3].

Common lisp's "~@r" format errors with values larger than 3999

```
(print (format nil "~@r" 4000))
*** - The ~@R format directive requires an integer in the range 1 -
3999, not 4000
```

Is 3899 enforced as the largest valid input in R for some other
reason, or is this a long-standing oversight?

Perhaps tangentially... while exploring I did notice the unexported
utils:::.as.roman() takes a check.range argument that is not available
from as.roman (which is simply an exported wrapper without that
argument) but setting this to FALSE does not enable circumvention of
enforcement of the upper limit (which appears to occur during the
setting of the "roman" class), it simply performs an earlier
conversion to NA when set (potentially for simplification when used in
Ops dispatch). Enforcement of the limit of 3899 happens deeper within
the code, e.g. within the unexported utils:::.numeric2roman which
implements the conversion, but without a way to avoid setting the
result to NA for larger values. Given that other languages strictly
limit the input to an upper bound, perhaps this is not unexpected
behaviour.

Regards,

- Jonathan.

[0]: https://jcarroll.xyz/2024/02/10/friends-romans-countrymen.html
[1]: https://github.com/r-devel/r-svn/commit/ba30f3dc716effe22489bf88511bd1d60272f6de
[2]: https://en.wikipedia.org/wiki/Roman_numerals
[3]: https://www.oreilly.com/library/view/python-cookbook/0596001673/ch03s24.html


