From j@g@nmn2 @end|ng |rom gm@||@com  Mon Dec  2 16:56:55 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 2 Dec 2024 10:56:55 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
Message-ID: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>

I wonder if there is room for improvement here:

     > str2lang("if (a) b1    else b0")
     if (a) b1 else b0
     > str2lang("if (a) b1 \n else b0")
     Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
     1: if (a) b1
     2:  else
         ^

It only occurs at top level.  When the parser knows that it needs to
"keep reading", e.g., because the call to 'if' is enclosed in braces,
it detects the 'else':

     > str2lang("{ if (a) b1    else b0 }")
     {
         if (a)
             b1
         else b0
     }
     > str2lang("{ if (a) b1 \n else b0 }")
     {
         if (a)
             b1
         else b0
     }

If people agree that the above is a deficiency/bug then I could create a
formal bug report.  Then others or I could start thinking about a patch
for the parser.

Apologies if this issue has been seen and discussed before (most likely
by people like me in the habit of dropping braces in calls to 'if' where
not strictly necessary).

Mikael


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Dec  2 17:05:00 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Dec 2024 11:05:00 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
In-Reply-To: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
References: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
Message-ID: <594afbf2-c161-4b62-a147-5ac9c6b95d70@gmail.com>

This is well known, and it's necessary for reasonable behaviour in an 
interactive context.  Imagine typing the code you were parsing.  The 
first line is

  if (a) b1

At this point, the interpreter can't know that an else clause is coming. 
  Since the interpreter evaluates statements when they are complete, it 
will evaluate this and return b1 or NULL.

Putting the full expression in braces solves the issue, because this is 
clearly incomplete:

   { if (a) b1

Duncan Murdoch

On 2024-12-02 10:56 a.m., Mikael Jagan wrote:
> I wonder if there is room for improvement here:
> 
>       > str2lang("if (a) b1    else b0")
>       if (a) b1 else b0
>       > str2lang("if (a) b1 \n else b0")
>       Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
>       1: if (a) b1
>       2:  else
>           ^
> 
> It only occurs at top level.  When the parser knows that it needs to
> "keep reading", e.g., because the call to 'if' is enclosed in braces,
> it detects the 'else':
> 
>       > str2lang("{ if (a) b1    else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
>       > str2lang("{ if (a) b1 \n else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
> 
> If people agree that the above is a deficiency/bug then I could create a
> formal bug report.  Then others or I could start thinking about a patch
> for the parser.
> 
> Apologies if this issue has been seen and discussed before (most likely
> by people like me in the habit of dropping braces in calls to 'if' where
> not strictly necessary).
> 
> Mikael
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Dec  2 17:09:41 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Dec 2024 11:09:41 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
In-Reply-To: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
References: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
Message-ID: <e6fc0e66-08d1-4581-8de6-930ef24d4ffb@gmail.com>

BTW, this is discussed in section 3.2.1 of "The R Language Definition".

Duncan Murdoch

On 2024-12-02 10:56 a.m., Mikael Jagan wrote:
> I wonder if there is room for improvement here:
> 
>       > str2lang("if (a) b1    else b0")
>       if (a) b1 else b0
>       > str2lang("if (a) b1 \n else b0")
>       Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
>       1: if (a) b1
>       2:  else
>           ^
> 
> It only occurs at top level.  When the parser knows that it needs to
> "keep reading", e.g., because the call to 'if' is enclosed in braces,
> it detects the 'else':
> 
>       > str2lang("{ if (a) b1    else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
>       > str2lang("{ if (a) b1 \n else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
> 
> If people agree that the above is a deficiency/bug then I could create a
> formal bug report.  Then others or I could start thinking about a patch
> for the parser.
> 
> Apologies if this issue has been seen and discussed before (most likely
> by people like me in the habit of dropping braces in calls to 'if' where
> not strictly necessary).
> 
> Mikael
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Mon Dec  2 17:18:44 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 2 Dec 2024 11:18:44 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
In-Reply-To: <e6fc0e66-08d1-4581-8de6-930ef24d4ffb@gmail.com>
References: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
 <e6fc0e66-08d1-4581-8de6-930ef24d4ffb@gmail.com>
Message-ID: <4065c171-a6a9-49a4-9bad-e78adf1d9db6@gmail.com>

Thanks - that makes sense.  It's also documented in help("if"), so it's
doubly clear now that I did not do my homework here.

Mikael

On 2024-12-02 11:09 am, Duncan Murdoch wrote:
> BTW, this is discussed in section 3.2.1 of "The R Language Definition".
> 
> Duncan Murdoch
> 
> On 2024-12-02 10:56 a.m., Mikael Jagan wrote:
>> I wonder if there is room for improvement here:
>>
>>        > str2lang("if (a) b1    else b0")
>>        if (a) b1 else b0
>>        > str2lang("if (a) b1 \n else b0")
>>        Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
>>        1: if (a) b1
>>        2:  else
>>            ^
>>
>> It only occurs at top level.  When the parser knows that it needs to
>> "keep reading", e.g., because the call to 'if' is enclosed in braces,
>> it detects the 'else':
>>
>>        > str2lang("{ if (a) b1    else b0 }")
>>        {
>>            if (a)
>>                b1
>>            else b0
>>        }
>>        > str2lang("{ if (a) b1 \n else b0 }")
>>        {
>>            if (a)
>>                b1
>>            else b0
>>        }
>>
>> If people agree that the above is a deficiency/bug then I could create a
>> formal bug report.  Then others or I could start thinking about a patch
>> for the parser.
>>
>> Apologies if this issue has been seen and discussed before (most likely
>> by people like me in the habit of dropping braces in calls to 'if' where
>> not strictly necessary).
>>
>> Mikael
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Thu Dec  5 02:43:16 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Thu, 5 Dec 2024 14:43:16 +1300
Subject: [Rd] Exposing native httpd server
Message-ID: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>

R has a native HTTP server that is used for serving R help pages 
interactively, at least on the loopback device (127.0.0.1)

But all of the working are internal, not exposed to user and not documented.
This is quite shame since the server seems to be fully capable of 
handling basic tasks,
be it serving static websites or even interactively processing queries.

This was previously noticed by Jeffry Horner, the author of the Rook 
package.
I am just a guy who found it interesting.

The basic working is as follows:
User needs to either overwrite the internal `tools:::httpd` function or 
add their hook into the internal environment tools:::.httpd.handlers.env.

In the former case, the user will be of a full control of the server, in 
the later case, the `app` will be hooked to `/custom/app` instead.
All that is needed then is to run the interactive help that starts the 
webserver.

Based on the breadcrumbs left on the way, I was able to write a server 
that emulates much more complex `servr` package that I have previously 
used to test locally my blog.

https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3

You can see that I am forced to do some illegal procedures:
 ?* tools:::httpd needs to be replaced
 ?* the server doesn't have knowledge of a directory so setwd needs to 
be set
 ?* the function must not end, otherwise the directory is changed during 
the server lifetime (and depends on the current working directory)

I would like to suggest and probe for willingness to expose the native 
http server.
This would include:

* de-hardcoding the server so that we can register other functions not 
just httpd
* exporting many functions and renaming them (such as mime_type)
* writing better interfaces, `startDynamicHelp` is kind of hard to work 
with, something like httpd_start(dir, fun, port), httpd_stop(port) and 
httpd_status(port) would be much cleaner.

I would like to say that I have no idea what I am doing, I don't 
understand webtech or the internal implementation, so if there are 
reasons why this isn't a great idea...

I am happy to make a PR for the R part. 
https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
The C part with the R's C internals look to me like a black magic and I 
don't feel confident enough. 
https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c

See this old stackoverflow answer, where someone was looking for `python 
-m SimpleHTTPServer 8080`

https://stackoverflow.com/q/12636764/4868692


From bbo|ker @end|ng |rom gm@||@com  Thu Dec  5 02:58:36 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 4 Dec 2024 20:58:36 -0500
Subject: [Rd] trivial typo
Message-ID: <135373ea-7d02-41af-99a5-611f1a84c3ac@gmail.com>

   On line 35 of src/library/stats/man/predict.Rd, there is a missing 
"be": "errors are to [be] returned".

https://github.com/r-devel/r-svn/blob/7b28ae9f8c77c7eb280eee3f4515822bb88e5c4b/src/library/stats/man/predict.Rd#L35

git blame says this has been this way for 21 years ...

   I could submit a patch but that seems like overkill ...

   cheers
    Ben Bolker


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Dec  5 09:18:58 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 5 Dec 2024 09:18:58 +0100
Subject: [Rd] trivial typo
In-Reply-To: <135373ea-7d02-41af-99a5-611f1a84c3ac@gmail.com>
References: <135373ea-7d02-41af-99a5-611f1a84c3ac@gmail.com>
Message-ID: <8a7bba31-0351-4dbc-8b90-1ad9850e2ef1@gmail.com>

On 12/5/24 02:58, Ben Bolker wrote:
> ? On line 35 of src/library/stats/man/predict.Rd, there is a missing 
> "be": "errors are to [be] returned".
>
> https://github.com/r-devel/r-svn/blob/7b28ae9f8c77c7eb280eee3f4515822bb88e5c4b/src/library/stats/man/predict.Rd#L35 
>

Thanks, fixed in R-devel.

Best,
Tomas

>
> git blame says this has been this way for 21 years ...
>
> ? I could submit a patch but that seems like overkill ...
>
> ? cheers
> ?? Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroenoom@ @end|ng |rom gm@||@com  Thu Dec  5 16:45:57 2024
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Thu, 5 Dec 2024 16:45:57 +0100
Subject: [Rd] Exposing native httpd server
In-Reply-To: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
Message-ID: <CABFfbXvH10FXV6eoLciKA-GETjQn5TE_uj2kgxWMvAyr7-hG8A@mail.gmail.com>

On Thu, Dec 5, 2024 at 2:43?AM Ji?? Moravec <jiri.c.moravec at gmail.com> wrote:
>
> R has a native HTTP server that is used for serving R help pages
> interactively, at least on the loopback device (127.0.0.1)
>
> But all of the working are internal, not exposed to user and not documented.

This has been available for a long time. The 'webutils' package has
basic examples of how to handle and parse http requests in R using
either using Rhttpd or httpuv:

   webutils::demo_rhttpd()
   webutils::demo_httpuv()

You can adapt from here to your needs. R provides all the hooks you
need, I think you'll find little appetite for duplicating more web
server tooling into base R.





> This is quite shame since the server seems to be fully capable of
> handling basic tasks,
> be it serving static websites or even interactively processing queries.
>
> This was previously noticed by Jeffry Horner, the author of the Rook
> package.
> I am just a guy who found it interesting.
>
> The basic working is as follows:
> User needs to either overwrite the internal `tools:::httpd` function or
> add their hook into the internal environment tools:::.httpd.handlers.env.
>
> In the former case, the user will be of a full control of the server, in
> the later case, the `app` will be hooked to `/custom/app` instead.
> All that is needed then is to run the interactive help that starts the
> webserver.
>
> Based on the breadcrumbs left on the way, I was able to write a server
> that emulates much more complex `servr` package that I have previously
> used to test locally my blog.
>
> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
>
> You can see that I am forced to do some illegal procedures:
>   * tools:::httpd needs to be replaced
>   * the server doesn't have knowledge of a directory so setwd needs to
> be set
>   * the function must not end, otherwise the directory is changed during
> the server lifetime (and depends on the current working directory)
>
> I would like to suggest and probe for willingness to expose the native
> http server.
> This would include:
>
> * de-hardcoding the server so that we can register other functions not
> just httpd
> * exporting many functions and renaming them (such as mime_type)
> * writing better interfaces, `startDynamicHelp` is kind of hard to work
> with, something like httpd_start(dir, fun, port), httpd_stop(port) and
> httpd_status(port) would be much cleaner.
>
> I would like to say that I have no idea what I am doing, I don't
> understand webtech or the internal implementation, so if there are
> reasons why this isn't a great idea...
>
> I am happy to make a PR for the R part.
> https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
> The C part with the R's C internals look to me like a black magic and I
> don't feel confident enough.
> https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c
>
> See this old stackoverflow answer, where someone was looking for `python
> -m SimpleHTTPServer 8080`
>
> https://stackoverflow.com/q/12636764/4868692
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Dec  6 08:05:15 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 6 Dec 2024 20:05:15 +1300
Subject: [Rd] Exposing native httpd server
In-Reply-To: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
Message-ID: <AEAEAAF0-9D88-4392-9085-E5E3F88F0911@R-project.org>

Ji??,

in a sense there are two quite different issue that you are touching upon. On one hand, your request for exposing the http server is something I was pretty much expecting. In order to judge the appetite for it I have included the support for custom handlers back then as inofficial API specifically so that if anyone cares we could work on refining it (really only Jeff and Hadley ever asked and/or provided feedback). But I would argue over time it became more clear that it's probably not the way to go.

The real problem is that we don't really want to "just" expose the server because of the implications that you mentioned indirectly: the server is deliberately run in the current R session - which is pretty much exactly what we want for the help system, but it is something that is in most cases undesirable for several reasons. Firstly, normal R user does not expect http requests to mess with their analysis (e.g. changing the working directory would certainly not be welcome), so we don't want random code to execute and interfere with user's work. Secondly, http services are usually expected to be scalable and not interfere with each other - which is not possible directly here with the server as-is since it is fully serial within the user's session. What is truly desired strongly depends on the use-case: some applications would prefer a forked session for each connection, other may want co-operation in a separate environment. It is all doable, but beyond the scope of R's internal http server.

Moreover the internal http server is based on the Rserve package and you always have much larger flexibility there. There are also higher level abstractions like RestRserve. So if you like the internal server then you can seamlessly use Rserve as the API was derived from there. Of course there are other alternatives in package space like httpuv. We typically don't want to fold things into core R unless it's absolutely necessary - i.e., if they can happily live in package space.

In short, I'm still not convinced that you really want to use the built-in sever. Although it is a fully featured http server, it was included for a very specific purpose, and it's not clear that it would be a good fit for other purposes.

That said, I'm interested in ideas about what users would want to use it for. There may be use-cases which do fit the design so we could make it happen. I would recommend looking at Rserve first, because anything implemented there is trivial to add to R (as it is the same code base) if it would make sense. So I'm open to suggestions, but they should be centered around what cannot be done already.

Cheers,
Simon



> On Dec 5, 2024, at 2:43 PM, Ji?? Moravec <jiri.c.moravec at gmail.com> wrote:
> 
> R has a native HTTP server that is used for serving R help pages interactively, at least on the loopback device (127.0.0.1)
> 
> But all of the working are internal, not exposed to user and not documented.
> This is quite shame since the server seems to be fully capable of handling basic tasks,
> be it serving static websites or even interactively processing queries.
> 
> This was previously noticed by Jeffry Horner, the author of the Rook package.
> I am just a guy who found it interesting.
> 
> The basic working is as follows:
> User needs to either overwrite the internal `tools:::httpd` function or add their hook into the internal environment tools:::.httpd.handlers.env.
> 
> In the former case, the user will be of a full control of the server, in the later case, the `app` will be hooked to `/custom/app` instead.
> All that is needed then is to run the interactive help that starts the webserver.
> 
> Based on the breadcrumbs left on the way, I was able to write a server that emulates much more complex `servr` package that I have previously used to test locally my blog.
> 
> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
> 
> You can see that I am forced to do some illegal procedures:
>  * tools:::httpd needs to be replaced
>  * the server doesn't have knowledge of a directory so setwd needs to be set
>  * the function must not end, otherwise the directory is changed during the server lifetime (and depends on the current working directory)
> 
> I would like to suggest and probe for willingness to expose the native http server.
> This would include:
> 
> * de-hardcoding the server so that we can register other functions not just httpd
> * exporting many functions and renaming them (such as mime_type)
> * writing better interfaces, `startDynamicHelp` is kind of hard to work with, something like httpd_start(dir, fun, port), httpd_stop(port) and httpd_status(port) would be much cleaner.
> 
> I would like to say that I have no idea what I am doing, I don't understand webtech or the internal implementation, so if there are reasons why this isn't a great idea...
> 
> I am happy to make a PR for the R part. https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
> The C part with the R's C internals look to me like a black magic and I don't feel confident enough. https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c
> 
> See this old stackoverflow answer, where someone was looking for `python -m SimpleHTTPServer 8080`
> 
> https://stackoverflow.com/q/12636764/4868692
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Sun Dec  8 20:57:15 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Mon, 9 Dec 2024 08:57:15 +1300
Subject: [Rd] Exposing native httpd server
In-Reply-To: <AEAEAAF0-9D88-4392-9085-E5E3F88F0911@R-project.org>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
 <AEAEAAF0-9D88-4392-9085-E5E3F88F0911@R-project.org>
Message-ID: <9144f007-bc39-4955-8001-cd21e36ea254@gmail.com>

Dear Simon and Jeroen,

thank you for your answers. I have to reiterate that I am out of my 
depth in here. My knowledge of http is clicking links and not much 
beyond that.

I will definitely look into `webutils` and `Rserve`.

One of the reason why I brought this issue is that I have a static site 
generator that uses the pkg `servr` to serve the static site locally, 
before I push it to github pages.
This allowed me to remove some 12 dependencies.
For this, the internal R webserver seems to be completely sufficient and 
I thought that it would be nice to have this functionality without it 
being "illegal" (i.e., replacing internal function)
and possibly documented so that the limitations are clear.

As for the limitations, IMHO when implemented as I did (Sys.sleep(Inf), 
setting path, and reset on exit), it behaves like most shiny apps I saw, 
or many apps in general.
So when I think about it as kind of user interface within browser 
instead of written in something like tcl/tk instead of a part of 
internet infrastructure, it feels quite sufficient to me.

Lately, I have been quite minimalist and I found a great joy finding 
that base is quite bit more powerful than people often think so, so I am 
quite happy finding out that the internal R server is fully sufficient 
for me,
but can't speak for other people and their intended use.

So we can leave it at that. Maybe in few more years when I am more 
familiar with web architecture and R internals, I can make a better 
argument, hopefully followed with some rad code.

-- Jirka

On 6/12/24 20:05, Simon Urbanek wrote:

> Ji??,
>
> in a sense there are two quite different issue that you are touching upon. On one hand, your request for exposing the http server is something I was pretty much expecting. In order to judge the appetite for it I have included the support for custom handlers back then as inofficial API specifically so that if anyone cares we could work on refining it (really only Jeff and Hadley ever asked and/or provided feedback). But I would argue over time it became more clear that it's probably not the way to go.
>
> The real problem is that we don't really want to "just" expose the server because of the implications that you mentioned indirectly: the server is deliberately run in the current R session - which is pretty much exactly what we want for the help system, but it is something that is in most cases undesirable for several reasons. Firstly, normal R user does not expect http requests to mess with their analysis (e.g. changing the working directory would certainly not be welcome), so we don't want random code to execute and interfere with user's work. Secondly, http services are usually expected to be scalable and not interfere with each other - which is not possible directly here with the server as-is since it is fully serial within the user's session. What is truly desired strongly depends on the use-case: some applications would prefer a forked session for each connection, other may want co-operation in a separate environment. It is all doable, but beyond the scope of R's internal http server.
>
> Moreover the internal http server is based on the Rserve package and you always have much larger flexibility there. There are also higher level abstractions like RestRserve. So if you like the internal server then you can seamlessly use Rserve as the API was derived from there. Of course there are other alternatives in package space like httpuv. We typically don't want to fold things into core R unless it's absolutely necessary - i.e., if they can happily live in package space.
>
> In short, I'm still not convinced that you really want to use the built-in sever. Although it is a fully featured http server, it was included for a very specific purpose, and it's not clear that it would be a good fit for other purposes.
>
> That said, I'm interested in ideas about what users would want to use it for. There may be use-cases which do fit the design so we could make it happen. I would recommend looking at Rserve first, because anything implemented there is trivial to add to R (as it is the same code base) if it would make sense. So I'm open to suggestions, but they should be centered around what cannot be done already.
>
> Cheers,
> Simon
>
>
>
>> On Dec 5, 2024, at 2:43 PM, Ji?? Moravec <jiri.c.moravec at gmail.com> wrote:
>>
>> R has a native HTTP server that is used for serving R help pages interactively, at least on the loopback device (127.0.0.1)
>>
>> But all of the working are internal, not exposed to user and not documented.
>> This is quite shame since the server seems to be fully capable of handling basic tasks,
>> be it serving static websites or even interactively processing queries.
>>
>> This was previously noticed by Jeffry Horner, the author of the Rook package.
>> I am just a guy who found it interesting.
>>
>> The basic working is as follows:
>> User needs to either overwrite the internal `tools:::httpd` function or add their hook into the internal environment tools:::.httpd.handlers.env.
>>
>> In the former case, the user will be of a full control of the server, in the later case, the `app` will be hooked to `/custom/app` instead.
>> All that is needed then is to run the interactive help that starts the webserver.
>>
>> Based on the breadcrumbs left on the way, I was able to write a server that emulates much more complex `servr` package that I have previously used to test locally my blog.
>>
>> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
>>
>> You can see that I am forced to do some illegal procedures:
>>   * tools:::httpd needs to be replaced
>>   * the server doesn't have knowledge of a directory so setwd needs to be set
>>   * the function must not end, otherwise the directory is changed during the server lifetime (and depends on the current working directory)
>>
>> I would like to suggest and probe for willingness to expose the native http server.
>> This would include:
>>
>> * de-hardcoding the server so that we can register other functions not just httpd
>> * exporting many functions and renaming them (such as mime_type)
>> * writing better interfaces, `startDynamicHelp` is kind of hard to work with, something like httpd_start(dir, fun, port), httpd_stop(port) and httpd_status(port) would be much cleaner.
>>
>> I would like to say that I have no idea what I am doing, I don't understand webtech or the internal implementation, so if there are reasons why this isn't a great idea...
>>
>> I am happy to make a PR for the R part. https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
>> The C part with the R's C internals look to me like a black magic and I don't feel confident enough. https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c
>>
>> See this old stackoverflow answer, where someone was looking for `python -m SimpleHTTPServer 8080`
>>
>> https://stackoverflow.com/q/12636764/4868692
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

From bbo|ker @end|ng |rom gm@||@com  Sun Dec  8 21:19:26 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 8 Dec 2024 15:19:26 -0500
Subject: [Rd] Exposing native httpd server
In-Reply-To: <9144f007-bc39-4955-8001-cd21e36ea254@gmail.com>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
 <AEAEAAF0-9D88-4392-9085-E5E3F88F0911@R-project.org>
 <9144f007-bc39-4955-8001-cd21e36ea254@gmail.com>
Message-ID: <00b75e24-a9bd-4c59-acf7-34e10df22247@gmail.com>

   I absolutely appreciate the desire for minimalism.  On the other hand 
Rserve has no dependencies other than R >= 1.5.0 (!!!), so you would in 
any case be cutting your dependencies way down (`servr` has 16 recursive 
dependencies of which 5 seem to be base/recommended, presumably this is 
where your count of 12 came from; `Rserve` has none).

On 12/8/24 14:57, Ji?? Moravec wrote:
> Dear Simon and Jeroen,
> 
> thank you for your answers. I have to reiterate that I am out of my 
> depth in here. My knowledge of http is clicking links and not much 
> beyond that.
> 
> I will definitely look into `webutils` and `Rserve`.
> 
> One of the reason why I brought this issue is that I have a static site 
> generator that uses the pkg `servr` to serve the static site locally, 
> before I push it to github pages.
> This allowed me to remove some 12 dependencies.
> For this, the internal R webserver seems to be completely sufficient and 
> I thought that it would be nice to have this functionality without it 
> being "illegal" (i.e., replacing internal function)
> and possibly documented so that the limitations are clear.
> 
> As for the limitations, IMHO when implemented as I did (Sys.sleep(Inf), 
> setting path, and reset on exit), it behaves like most shiny apps I saw, 
> or many apps in general.
> So when I think about it as kind of user interface within browser 
> instead of written in something like tcl/tk instead of a part of 
> internet infrastructure, it feels quite sufficient to me.
> 
> Lately, I have been quite minimalist and I found a great joy finding 
> that base is quite bit more powerful than people often think so, so I am 
> quite happy finding out that the internal R server is fully sufficient 
> for me,
> but can't speak for other people and their intended use.
> 
> So we can leave it at that. Maybe in few more years when I am more 
> familiar with web architecture and R internals, I can make a better 
> argument, hopefully followed with some rad code.
> 
> -- Jirka
> 
> On 6/12/24 20:05, Simon Urbanek wrote:
> 
>> Ji??,
>>
>> in a sense there are two quite different issue that you are touching 
>> upon. On one hand, your request for exposing the http server is 
>> something I was pretty much expecting. In order to judge the appetite 
>> for it I have included the support for custom handlers back then as 
>> inofficial API specifically so that if anyone cares we could work on 
>> refining it (really only Jeff and Hadley ever asked and/or provided 
>> feedback). But I would argue over time it became more clear that it's 
>> probably not the way to go.
>>
>> The real problem is that we don't really want to "just" expose the 
>> server because of the implications that you mentioned indirectly: the 
>> server is deliberately run in the current R session - which is pretty 
>> much exactly what we want for the help system, but it is something 
>> that is in most cases undesirable for several reasons. Firstly, normal 
>> R user does not expect http requests to mess with their analysis (e.g. 
>> changing the working directory would certainly not be welcome), so we 
>> don't want random code to execute and interfere with user's work. 
>> Secondly, http services are usually expected to be scalable and not 
>> interfere with each other - which is not possible directly here with 
>> the server as-is since it is fully serial within the user's session. 
>> What is truly desired strongly depends on the use-case: some 
>> applications would prefer a forked session for each connection, other 
>> may want co-operation in a separate environment. It is all doable, but 
>> beyond the scope of R's internal http server.
>>
>> Moreover the internal http server is based on the Rserve package and 
>> you always have much larger flexibility there. There are also higher 
>> level abstractions like RestRserve. So if you like the internal server 
>> then you can seamlessly use Rserve as the API was derived from there. 
>> Of course there are other alternatives in package space like httpuv. 
>> We typically don't want to fold things into core R unless it's 
>> absolutely necessary - i.e., if they can happily live in package space.
>>
>> In short, I'm still not convinced that you really want to use the 
>> built-in sever. Although it is a fully featured http server, it was 
>> included for a very specific purpose, and it's not clear that it would 
>> be a good fit for other purposes.
>>
>> That said, I'm interested in ideas about what users would want to use 
>> it for. There may be use-cases which do fit the design so we could 
>> make it happen. I would recommend looking at Rserve first, because 
>> anything implemented there is trivial to add to R (as it is the same 
>> code base) if it would make sense. So I'm open to suggestions, but 
>> they should be centered around what cannot be done already.
>>
>> Cheers,
>> Simon
>>
>>
>>
>>> On Dec 5, 2024, at 2:43 PM, Ji?? Moravec <jiri.c.moravec at gmail.com> 
>>> wrote:
>>>
>>> R has a native HTTP server that is used for serving R help pages 
>>> interactively, at least on the loopback device (127.0.0.1)
>>>
>>> But all of the working are internal, not exposed to user and not 
>>> documented.
>>> This is quite shame since the server seems to be fully capable of 
>>> handling basic tasks,
>>> be it serving static websites or even interactively processing queries.
>>>
>>> This was previously noticed by Jeffry Horner, the author of the Rook 
>>> package.
>>> I am just a guy who found it interesting.
>>>
>>> The basic working is as follows:
>>> User needs to either overwrite the internal `tools:::httpd` function 
>>> or add their hook into the internal environment 
>>> tools:::.httpd.handlers.env.
>>>
>>> In the former case, the user will be of a full control of the server, 
>>> in the later case, the `app` will be hooked to `/custom/app` instead.
>>> All that is needed then is to run the interactive help that starts 
>>> the webserver.
>>>
>>> Based on the breadcrumbs left on the way, I was able to write a 
>>> server that emulates much more complex `servr` package that I have 
>>> previously used to test locally my blog.
>>>
>>> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
>>>
>>> You can see that I am forced to do some illegal procedures:
>>> ? * tools:::httpd needs to be replaced
>>> ? * the server doesn't have knowledge of a directory so setwd needs 
>>> to be set
>>> ? * the function must not end, otherwise the directory is changed 
>>> during the server lifetime (and depends on the current working 
>>> directory)
>>>
>>> I would like to suggest and probe for willingness to expose the 
>>> native http server.
>>> This would include:
>>>
>>> * de-hardcoding the server so that we can register other functions 
>>> not just httpd
>>> * exporting many functions and renaming them (such as mime_type)
>>> * writing better interfaces, `startDynamicHelp` is kind of hard to 
>>> work with, something like httpd_start(dir, fun, port), 
>>> httpd_stop(port) and httpd_status(port) would be much cleaner.
>>>
>>> I would like to say that I have no idea what I am doing, I don't 
>>> understand webtech or the internal implementation, so if there are 
>>> reasons why this isn't a great idea...
>>>
>>> I am happy to make a PR for the R part. https://github.com/wch/r- 
>>> source/blob/trunk/src/library/tools/R/dynamicHelp.R
>>> The C part with the R's C internals look to me like a black magic and 
>>> I don't feel confident enough. https://github.com/wch/r-source/blob/ 
>>> trunk/src/modules/internet/Rhttpd.c
>>>
>>> See this old stackoverflow answer, where someone was looking for 
>>> `python -m SimpleHTTPServer 8080`
>>>
>>> https://stackoverflow.com/q/12636764/4868692
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
* E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Sun Dec  8 22:00:19 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Mon, 9 Dec 2024 10:00:19 +1300
Subject: [Rd] Exposing native httpd server
In-Reply-To: <00b75e24-a9bd-4c59-acf7-34e10df22247@gmail.com>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
 <AEAEAAF0-9D88-4392-9085-E5E3F88F0911@R-project.org>
 <9144f007-bc39-4955-8001-cd21e36ea254@gmail.com>
 <00b75e24-a9bd-4c59-acf7-34e10df22247@gmail.com>
Message-ID: <54938322-78ef-4763-bd80-01de6b71a63b@gmail.com>

Hi Ben,

yes, in this particular case, I am moving from `rmarkdown` and `servr` 
to `litedown` and (internal http server), which will remove 30 dependencies.

```

base = utils::installed.packages(priority = "base") |> rownames()
litedown = tools::package_dependencies("litedown", recursive = TRUE)

setdiff(
 ? tools::package_dependencies(c("rmarkdown" , "servr"), recursive = 
TRUE) |> unlist(),
 ? c(base, litedown)
 ? ) |> length()
```

I will check the Rserve. It is described as socket server and I didn't 
get into reading into sockets yet, so I didn't look deeper.

-- Jirka

On 9/12/24 09:19, Ben Bolker wrote:
> ? I absolutely appreciate the desire for minimalism.? On the other 
> hand Rserve has no dependencies other than R >= 1.5.0 (!!!), so you 
> would in any case be cutting your dependencies way down (`servr` has 
> 16 recursive dependencies of which 5 seem to be base/recommended, 
> presumably this is where your count of 12 came from; `Rserve` has none).
>
> On 12/8/24 14:57, Ji?? Moravec wrote:
>> Dear Simon and Jeroen,
>>
>> thank you for your answers. I have to reiterate that I am out of my 
>> depth in here. My knowledge of http is clicking links and not much 
>> beyond that.
>>
>> I will definitely look into `webutils` and `Rserve`.
>>
>> One of the reason why I brought this issue is that I have a static 
>> site generator that uses the pkg `servr` to serve the static site 
>> locally, before I push it to github pages.
>> This allowed me to remove some 12 dependencies.
>> For this, the internal R webserver seems to be completely sufficient 
>> and I thought that it would be nice to have this functionality 
>> without it being "illegal" (i.e., replacing internal function)
>> and possibly documented so that the limitations are clear.
>>
>> As for the limitations, IMHO when implemented as I did 
>> (Sys.sleep(Inf), setting path, and reset on exit), it behaves like 
>> most shiny apps I saw, or many apps in general.
>> So when I think about it as kind of user interface within browser 
>> instead of written in something like tcl/tk instead of a part of 
>> internet infrastructure, it feels quite sufficient to me.
>>
>> Lately, I have been quite minimalist and I found a great joy finding 
>> that base is quite bit more powerful than people often think so, so I 
>> am quite happy finding out that the internal R server is fully 
>> sufficient for me,
>> but can't speak for other people and their intended use.
>>
>> So we can leave it at that. Maybe in few more years when I am more 
>> familiar with web architecture and R internals, I can make a better 
>> argument, hopefully followed with some rad code.
>>
>> -- Jirka
>>
>> On 6/12/24 20:05, Simon Urbanek wrote:
>>
>>> Ji??,
>>>
>>> in a sense there are two quite different issue that you are touching 
>>> upon. On one hand, your request for exposing the http server is 
>>> something I was pretty much expecting. In order to judge the 
>>> appetite for it I have included the support for custom handlers back 
>>> then as inofficial API specifically so that if anyone cares we could 
>>> work on refining it (really only Jeff and Hadley ever asked and/or 
>>> provided feedback). But I would argue over time it became more clear 
>>> that it's probably not the way to go.
>>>
>>> The real problem is that we don't really want to "just" expose the 
>>> server because of the implications that you mentioned indirectly: 
>>> the server is deliberately run in the current R session - which is 
>>> pretty much exactly what we want for the help system, but it is 
>>> something that is in most cases undesirable for several reasons. 
>>> Firstly, normal R user does not expect http requests to mess with 
>>> their analysis (e.g. changing the working directory would certainly 
>>> not be welcome), so we don't want random code to execute and 
>>> interfere with user's work. Secondly, http services are usually 
>>> expected to be scalable and not interfere with each other - which is 
>>> not possible directly here with the server as-is since it is fully 
>>> serial within the user's session. What is truly desired strongly 
>>> depends on the use-case: some applications would prefer a forked 
>>> session for each connection, other may want co-operation in a 
>>> separate environment. It is all doable, but beyond the scope of R's 
>>> internal http server.
>>>
>>> Moreover the internal http server is based on the Rserve package and 
>>> you always have much larger flexibility there. There are also higher 
>>> level abstractions like RestRserve. So if you like the internal 
>>> server then you can seamlessly use Rserve as the API was derived 
>>> from there. Of course there are other alternatives in package space 
>>> like httpuv. We typically don't want to fold things into core R 
>>> unless it's absolutely necessary - i.e., if they can happily live in 
>>> package space.
>>>
>>> In short, I'm still not convinced that you really want to use the 
>>> built-in sever. Although it is a fully featured http server, it was 
>>> included for a very specific purpose, and it's not clear that it 
>>> would be a good fit for other purposes.
>>>
>>> That said, I'm interested in ideas about what users would want to 
>>> use it for. There may be use-cases which do fit the design so we 
>>> could make it happen. I would recommend looking at Rserve first, 
>>> because anything implemented there is trivial to add to R (as it is 
>>> the same code base) if it would make sense. So I'm open to 
>>> suggestions, but they should be centered around what cannot be done 
>>> already.
>>>
>>> Cheers,
>>> Simon
>>>
>>>
>>>
>>>> On Dec 5, 2024, at 2:43 PM, Ji?? Moravec <jiri.c.moravec at gmail.com> 
>>>> wrote:
>>>>
>>>> R has a native HTTP server that is used for serving R help pages 
>>>> interactively, at least on the loopback device (127.0.0.1)
>>>>
>>>> But all of the working are internal, not exposed to user and not 
>>>> documented.
>>>> This is quite shame since the server seems to be fully capable of 
>>>> handling basic tasks,
>>>> be it serving static websites or even interactively processing 
>>>> queries.
>>>>
>>>> This was previously noticed by Jeffry Horner, the author of the 
>>>> Rook package.
>>>> I am just a guy who found it interesting.
>>>>
>>>> The basic working is as follows:
>>>> User needs to either overwrite the internal `tools:::httpd` 
>>>> function or add their hook into the internal environment 
>>>> tools:::.httpd.handlers.env.
>>>>
>>>> In the former case, the user will be of a full control of the 
>>>> server, in the later case, the `app` will be hooked to 
>>>> `/custom/app` instead.
>>>> All that is needed then is to run the interactive help that starts 
>>>> the webserver.
>>>>
>>>> Based on the breadcrumbs left on the way, I was able to write a 
>>>> server that emulates much more complex `servr` package that I have 
>>>> previously used to test locally my blog.
>>>>
>>>> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
>>>>
>>>> You can see that I am forced to do some illegal procedures:
>>>> ? * tools:::httpd needs to be replaced
>>>> ? * the server doesn't have knowledge of a directory so setwd needs 
>>>> to be set
>>>> ? * the function must not end, otherwise the directory is changed 
>>>> during the server lifetime (and depends on the current working 
>>>> directory)
>>>>
>>>> I would like to suggest and probe for willingness to expose the 
>>>> native http server.
>>>> This would include:
>>>>
>>>> * de-hardcoding the server so that we can register other functions 
>>>> not just httpd
>>>> * exporting many functions and renaming them (such as mime_type)
>>>> * writing better interfaces, `startDynamicHelp` is kind of hard to 
>>>> work with, something like httpd_start(dir, fun, port), 
>>>> httpd_stop(port) and httpd_status(port) would be much cleaner.
>>>>
>>>> I would like to say that I have no idea what I am doing, I don't 
>>>> understand webtech or the internal implementation, so if there are 
>>>> reasons why this isn't a great idea...
>>>>
>>>> I am happy to make a PR for the R part. https://github.com/wch/r- 
>>>> source/blob/trunk/src/library/tools/R/dynamicHelp.R
>>>> The C part with the R's C internals look to me like a black magic 
>>>> and I don't feel confident enough. 
>>>> https://github.com/wch/r-source/blob/ 
>>>> trunk/src/modules/internet/Rhttpd.c
>>>>
>>>> See this old stackoverflow answer, where someone was looking for 
>>>> `python -m SimpleHTTPServer 8080`
>>>>
>>>> https://stackoverflow.com/q/12636764/4868692
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Dec  9 02:18:04 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 9 Dec 2024 14:18:04 +1300
Subject: [Rd] Exposing native httpd server
In-Reply-To: <9144f007-bc39-4955-8001-cd21e36ea254@gmail.com>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
 <AEAEAAF0-9D88-4392-9085-E5E3F88F0911@R-project.org>
 <9144f007-bc39-4955-8001-cd21e36ea254@gmail.com>
Message-ID: <9BA2DFCF-F5A3-486C-941E-A50D9F19BF34@R-project.org>

Jirko,


> On Dec 9, 2024, at 8:57 AM, Ji?? Moravec <jiri.c.moravec at gmail.com> wrote:
> 
> Dear Simon and Jeroen,
> 
> thank you for your answers. I have to reiterate that I am out of my depth in here. My knowledge of http is clicking links and not much beyond that.
> 
> I will definitely look into `webutils` and `Rserve`.
> 
> One of the reason why I brought this issue is that I have a static site generator that uses the pkg `servr` to serve the static site locally, before I push it to github pages.
> This allowed me to remove some 12 dependencies.
> For this, the internal R webserver seems to be completely sufficient and I thought that it would be nice to have this functionality without it being "illegal" (i.e., replacing internal function)
> and possibly documented so that the limitations are clear.
> 


The internal web-server is designed specifically to run R code, but what you describe above is something entirely different, because you don?t need to run R code to serve static files. That is order of magnitude easier (and you *really* don?t want to use R to serve the files). Unlike serving R code, that part can be done on a separate thread so it doesn't have all the issues we talked about.

If all you want is to serve the local directory at the root of the URLs then you can use the Rserve package as follows:

Rserve:::Rserve.http.add.static("","",last=TRUE)
Rserve::run.Rserve(http.port=8080, qap=FALSE)

(prefix="" means all paths will be served by the static server, path="" means everything is relative to the current directory and last=TRUE means you don?t want to proceed to other static mappings or the R handler, http.port sets the port you want the HTTP server to listen on, qap=FALSE disables the otherwise default QAP protocol which you don?t use).
See Rserve documentation for additional options (e.g. TLS/SSL support, binding to all interfaces etc.). The static handers are experimental and undocumented, but can be given more love if people like them :).


> As for the limitations, IMHO when implemented as I did (Sys.sleep(Inf), setting path, and reset on exit), it behaves like most shiny apps I saw, or many apps in general.


But that is just a hack to prevent the user from entering the session - which is not how the server was designed (or R to be used, really).


> So when I think about it as kind of user interface within browser instead of written in something like tcl/tk instead of a part of internet infrastructure, it feels quite sufficient to me.
> 
> Lately, I have been quite minimalist and I found a great joy finding that base is quite bit more powerful than people often think so, so I am quite happy finding out that the internal R server is fully sufficient for me,
> but can't speak for other people and their intended use.
> 


I think what you want is not what you asked for - serving static files is something entirely different and it would be easy to add to R if that?s what you actually want and less controversial.

Cheers,
Simon



> So we can leave it at that. Maybe in few more years when I am more familiar with web architecture and R internals, I can make a better argument, hopefully followed with some rad code.
> 
> -- Jirka
> 
> On 6/12/24 20:05, Simon Urbanek wrote:
> 
>> Ji??,
>> 
>> in a sense there are two quite different issue that you are touching upon. On one hand, your request for exposing the http server is something I was pretty much expecting. In order to judge the appetite for it I have included the support for custom handlers back then as inofficial API specifically so that if anyone cares we could work on refining it (really only Jeff and Hadley ever asked and/or provided feedback). But I would argue over time it became more clear that it's probably not the way to go.
>> 
>> The real problem is that we don't really want to "just" expose the server because of the implications that you mentioned indirectly: the server is deliberately run in the current R session - which is pretty much exactly what we want for the help system, but it is something that is in most cases undesirable for several reasons. Firstly, normal R user does not expect http requests to mess with their analysis (e.g. changing the working directory would certainly not be welcome), so we don't want random code to execute and interfere with user's work. Secondly, http services are usually expected to be scalable and not interfere with each other - which is not possible directly here with the server as-is since it is fully serial within the user's session. What is truly desired strongly depends on the use-case: some applications would prefer a forked session for each connection, other may want co-operation in a separate environment. It is all doable, but beyond the scope of R's internal http server.
>> 
>> Moreover the internal http server is based on the Rserve package and you always have much larger flexibility there. There are also higher level abstractions like RestRserve. So if you like the internal server then you can seamlessly use Rserve as the API was derived from there. Of course there are other alternatives in package space like httpuv. We typically don't want to fold things into core R unless it's absolutely necessary - i.e., if they can happily live in package space.
>> 
>> In short, I'm still not convinced that you really want to use the built-in sever. Although it is a fully featured http server, it was included for a very specific purpose, and it's not clear that it would be a good fit for other purposes.
>> 
>> That said, I'm interested in ideas about what users would want to use it for. There may be use-cases which do fit the design so we could make it happen. I would recommend looking at Rserve first, because anything implemented there is trivial to add to R (as it is the same code base) if it would make sense. So I'm open to suggestions, but they should be centered around what cannot be done already.
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Dec 5, 2024, at 2:43 PM, Ji?? Moravec <jiri.c.moravec at gmail.com> wrote:
>>> 
>>> R has a native HTTP server that is used for serving R help pages interactively, at least on the loopback device (127.0.0.1)
>>> 
>>> But all of the working are internal, not exposed to user and not documented.
>>> This is quite shame since the server seems to be fully capable of handling basic tasks,
>>> be it serving static websites or even interactively processing queries.
>>> 
>>> This was previously noticed by Jeffry Horner, the author of the Rook package.
>>> I am just a guy who found it interesting.
>>> 
>>> The basic working is as follows:
>>> User needs to either overwrite the internal `tools:::httpd` function or add their hook into the internal environment tools:::.httpd.handlers.env.
>>> 
>>> In the former case, the user will be of a full control of the server, in the later case, the `app` will be hooked to `/custom/app` instead.
>>> All that is needed then is to run the interactive help that starts the webserver.
>>> 
>>> Based on the breadcrumbs left on the way, I was able to write a server that emulates much more complex `servr` package that I have previously used to test locally my blog.
>>> 
>>> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
>>> 
>>> You can see that I am forced to do some illegal procedures:
>>>  * tools:::httpd needs to be replaced
>>>  * the server doesn't have knowledge of a directory so setwd needs to be set
>>>  * the function must not end, otherwise the directory is changed during the server lifetime (and depends on the current working directory)
>>> 
>>> I would like to suggest and probe for willingness to expose the native http server.
>>> This would include:
>>> 
>>> * de-hardcoding the server so that we can register other functions not just httpd
>>> * exporting many functions and renaming them (such as mime_type)
>>> * writing better interfaces, `startDynamicHelp` is kind of hard to work with, something like httpd_start(dir, fun, port), httpd_stop(port) and httpd_status(port) would be much cleaner.
>>> 
>>> I would like to say that I have no idea what I am doing, I don't understand webtech or the internal implementation, so if there are reasons why this isn't a great idea...
>>> 
>>> I am happy to make a PR for the R part. https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
>>> The C part with the R's C internals look to me like a black magic and I don't feel confident enough. https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c
>>> 
>>> See this old stackoverflow answer, where someone was looking for `python -m SimpleHTTPServer 8080`
>>> 
>>> https://stackoverflow.com/q/12636764/4868692
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Tue Dec 10 00:35:01 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Tue, 10 Dec 2024 00:35:01 +0100
Subject: [Rd] Faster downloads: avoid them if possible
Message-ID: <CAN+W6_uPc6Fc+bWmiSXGJX8z44mG+JR_1oPGtLd-_9iX7uvDHg@mail.gmail.com>

Dear R-devel,

I read with interest the recent blog post on how R will have parallel
downloads, on blog.r-project.org
(https://blog.r-project.org/2024/12/02/faster-downloads/index.html).
Thanks Tomas!

The blog mentions that one of the areas where this will be observed is
while installing them (which I did!). However, I noticed they might be
downloaded multiple times:
If one interrupts the install.packages (via Ctrl+C), or it fails due
to some system dependency missing and I fix that on a different
terminal session, or the internet connection is cut and I try again.

One possible way to make installations/downloads faster and also
reduce the bandwidth of repositories (and its mirrors) would be to
check if they need to be downloaded (again).
PACKAGES file on <repo>/src/contrib includes the MD5sum field that
could be used to check packages on the local folder (But it might be
faster to first check if any file exists there for the same package).

In short, I propose:
1) Checking before downloading packages their existence on the destdir
directory used by install.packages.
2) I suppose the most common scenario is to use install.packages with
the default destdir parameter (NULL). If 1) is implemented it might be
useful to keep the temporary directory common for a single R session.

I would appreciate feedback on these ideas.

Best,

Llu?s Revilla

PD: New users encountering download & installation issues often keep
seeing the progress bar (and in the future "trying URL 'https://...")
of the same packages. There are some ways to prevent/avoid repeated
downloads, such as, using the system library dependency resolver, or
having local mirrors. But they are not easy/available for new useRs,
and sometimes they are difficult to avoid (like having a reliable
internet connection).


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Dec 10 11:32:58 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 10 Dec 2024 11:32:58 +0100
Subject: [Rd] Faster downloads: avoid them if possible
In-Reply-To: <CAN+W6_uPc6Fc+bWmiSXGJX8z44mG+JR_1oPGtLd-_9iX7uvDHg@mail.gmail.com>
References: <CAN+W6_uPc6Fc+bWmiSXGJX8z44mG+JR_1oPGtLd-_9iX7uvDHg@mail.gmail.com>
Message-ID: <9dfd1cde-34cb-4808-97f2-bce15687e540@gmail.com>

On 12/10/24 00:35, Llu?s Revilla wrote:
> Dear R-devel,
>
> I read with interest the recent blog post on how R will have parallel
> downloads, on blog.r-project.org
> (https://blog.r-project.org/2024/12/02/faster-downloads/index.html).
> Thanks Tomas!
>
> The blog mentions that one of the areas where this will be observed is
> while installing them (which I did!). However, I noticed they might be
> downloaded multiple times:
> If one interrupts the install.packages (via Ctrl+C), or it fails due
> to some system dependency missing and I fix that on a different
> terminal session, or the internet connection is cut and I try again.

Yes, and this has been the case before - it's not new for simultaneous 
downloads.

> One possible way to make installations/downloads faster and also
> reduce the bandwidth of repositories (and its mirrors) would be to
> check if they need to be downloaded (again).
> PACKAGES file on <repo>/src/contrib includes the MD5sum field that
> could be used to check packages on the local folder (But it might be
> faster to first check if any file exists there for the same package).
>
> In short, I propose:
> 1) Checking before downloading packages their existence on the destdir
> directory used by install.packages.
> 2) I suppose the most common scenario is to use install.packages with
> the default destdir parameter (NULL). If 1) is implemented it might be
> useful to keep the temporary directory common for a single R session.

When destdir is NULL (the default), non-local packages are downloaded to 
a subdirectory of the temporary session directory (see 
?install.packages), so the downloaded files would be readily available 
to further installation attempts done by the same R session.

I think we could once extend download.file() to support re-use of 
already downloaded files, so that it can continue an interrupted 
download of a single file or re-use the whole file. This shouldn't be 
the default because the files in general may change between downloads, 
and may be even from different URLs, but it could be used by 
install.packages(), where this shouldn't happen, at least when destdir 
is NULL.? I think an extra round of checking checksums shouldn't be 
needed in install.packages().

Best
Tomas

> I would appreciate feedback on these ideas.
>
> Best,
>
> Llu?s Revilla
>
> PD: New users encountering download & installation issues often keep
> seeing the progress bar (and in the future "trying URL 'https://...")
> of the same packages. There are some ways to prevent/avoid repeated
> downloads, such as, using the system library dependency resolver, or
> having local mirrors. But they are not easy/available for new useRs,
> and sometimes they are difficult to avoid (like having a reliable
> internet connection).
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Tue Dec 10 17:08:10 2024
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Wed, 11 Dec 2024 00:08:10 +0800
Subject: [Rd] Is it advisable/possible to default on Linux to an EDITOR that
 actually exists?
Message-ID: <CAPRVBcxY_2jZkqtNepDRhLJXMRmgDC61jxYsDCBR2EyEX3e+5g@mail.gmail.com>

It looks like R has defaulted to using 'vi' for file.edit() (via
EDITOR since ~24 years ago[1][2].

These days I think it is much more common to write code from
lightweight environments, e.g. Docker files which strip all
unnecessary commands. On such machines, it is not safe to assume 'vi'
is installed, and it's not uncommon to encounter an issue like I did
again today[3] where you or some other tool call file.edit() directly
or implicitly and hit a clunky error.

Is there something better to do here? A "standard" Linux distribution
will come with vi, emacs, nano, probably many others. Should
`file.edit()` iterate over an ordered list to find the first that
exists? Should it at least error if
(!nzchar(Sys.which(Sys.getenv("EDITOR"))))?

Mike C

PS I do see some somewhat recent discussion[4] on EDITOR but it
focuses on the EDITOR default in non-interactive() sessions.

[1] https://github.com/r-devel/r-svn/commit/b294ee2cef3d9292d578b062b80d59f372cf34b2#diff-1cbaac4768fd110525ba9086cb7a684aaf2c6555389c5446c913effbfec90c85
[2] https://github.com/r-devel/r-svn/blob/71a2e968f4453858aadc1531a3774c011a6f9f49/doc/NEWS.0#L140-L141
[3] https://github.com/r-lib/usethis/pull/2088
[4] https://stat.ethz.ch/pipermail/r-devel/2023-July/082720.html


From edd @end|ng |rom deb|@n@org  Tue Dec 10 17:46:28 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 10 Dec 2024 10:46:28 -0600
Subject: [Rd] 
 Is it advisable/possible to default on Linux to an EDITOR that
 actually exists?
In-Reply-To: <CAPRVBcxY_2jZkqtNepDRhLJXMRmgDC61jxYsDCBR2EyEX3e+5g@mail.gmail.com>
References: <CAPRVBcxY_2jZkqtNepDRhLJXMRmgDC61jxYsDCBR2EyEX3e+5g@mail.gmail.com>
Message-ID: <26456.28772.118709.801049@rob.eddelbuettel.com>


Michael,

This looks rather like a 'compile-time versus run-time' question to me. If
you look at etc/Renviron.in in the R sources you see a number of choices,
some of them with configure-time determined values (which I tend to override
with values for the Debian package).

For 'EDIT' it is

   ## Default editor
   EDITOR=${EDITOR-${VISUAL-vi}}

giving us two env vars to override eg in 'degenerate' situations such as the
forcefully minimized docker setup without other commands.

Otherwise, a generalization that would be possible might be to do something
similar to 'R CMD javareconf' to allow a later run-time call to affect the
encoded values---which would then be read at startup.  On the other hand,
environment variables already give customization so ...

Linux distributions can also have their mechanism. For example, Debian has
/etc/alternatives which for 'editor' defaults to nano even when vi, emacs,
mg, atom, code, ... are installed.  So you could also have the environment
variable EDITOR point to a script you control which then runs over possible
alternatives.

As for the conjecture 'it is much more common to write code from ...'  I
would love to see some empirics across a properly surveyed R user base. The
love of some power users for codespaces / devcontainers notwithstanding, 'the
most common' environment for writing R code is likely still what it always
was, a single windows desktop.

Anyway, thanks for raising this. I can look into making the Debian (and hence
Ubuntu) package switch to 'editor' over the vi fallback. 

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Tue Dec 10 18:02:33 2024
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Wed, 11 Dec 2024 01:02:33 +0800
Subject: [Rd] 
 Is it advisable/possible to default on Linux to an EDITOR that
 actually exists?
In-Reply-To: <26456.28772.118709.801049@rob.eddelbuettel.com>
References: <CAPRVBcxY_2jZkqtNepDRhLJXMRmgDC61jxYsDCBR2EyEX3e+5g@mail.gmail.com>
 <26456.28772.118709.801049@rob.eddelbuettel.com>
Message-ID: <CAPRVBcz1KH4xxLc2btXo9CwYe5yDn3MQQcM61PZnDFM2=bpr1A@mail.gmail.com>

> As for the conjecture

To quickly clarify, I mean "it is much more common to write code from
lightweight environments [now as compared to the year 2000 when the
EDITOR default was set to 'vi']". We agree about where most code is
written still today.

And yes, we can set VISUAL/EDITOR (as my personal .Rprofile does), but
doing something at run time still seems prudent. If I don't own the
Docker image, it's easy to forget this until we trip over file.edit()
much later. Onn the Docker image I use most often (for GitHub
Codespaces), there is no (command-line) editor by default -- VSCode
does the bulk of the work & I only install 'nano' to do things outside
the "current" repo. In short, there are very many ways EDITOR can wind
up un-set/incorrect.

On Wed, Dec 11, 2024 at 12:46?AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> Michael,
>
> This looks rather like a 'compile-time versus run-time' question to me. If
> you look at etc/Renviron.in in the R sources you see a number of choices,
> some of them with configure-time determined values (which I tend to override
> with values for the Debian package).
>
> For 'EDIT' it is
>
>    ## Default editor
>    EDITOR=${EDITOR-${VISUAL-vi}}
>
> giving us two env vars to override eg in 'degenerate' situations such as the
> forcefully minimized docker setup without other commands.
>
> Otherwise, a generalization that would be possible might be to do something
> similar to 'R CMD javareconf' to allow a later run-time call to affect the
> encoded values---which would then be read at startup.  On the other hand,
> environment variables already give customization so ...
>
> Linux distributions can also have their mechanism. For example, Debian has
> /etc/alternatives which for 'editor' defaults to nano even when vi, emacs,
> mg, atom, code, ... are installed.  So you could also have the environment
> variable EDITOR point to a script you control which then runs over possible
> alternatives.
>
> As for the conjecture 'it is much more common to write code from ...'  I
> would love to see some empirics across a properly surveyed R user base. The
> love of some power users for codespaces / devcontainers notwithstanding, 'the
> most common' environment for writing R code is likely still what it always
> was, a single windows desktop.
>
> Anyway, thanks for raising this. I can look into making the Debian (and hence
> Ubuntu) package switch to 'editor' over the vi fallback.
>
> Dirk
>
> --
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Tue Dec 10 22:21:35 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Tue, 10 Dec 2024 22:21:35 +0100
Subject: [Rd] Faster downloads: avoid them if possible
In-Reply-To: <9dfd1cde-34cb-4808-97f2-bce15687e540@gmail.com>
References: <CAN+W6_uPc6Fc+bWmiSXGJX8z44mG+JR_1oPGtLd-_9iX7uvDHg@mail.gmail.com>
 <9dfd1cde-34cb-4808-97f2-bce15687e540@gmail.com>
Message-ID: <CAN+W6_vAuFsRYoZ6wYE1MdDjm88VvsHn0XPmSq-Tv5+ghCuw=g@mail.gmail.com>

Dear Tomas and list,

El mar., 10 dic. 2024 11:33, Tomas Kalibera <tomas.kalibera at gmail.com> escribi?:
>
> On 12/10/24 00:35, Llu?s Revilla wrote:
> > Dear R-devel,
> >
> > I read with interest the recent blog post on how R will have parallel
> > downloads, on blog.r-project.org
> > (https://blog.r-project.org/2024/12/02/faster-downloads/index.html).
> > Thanks Tomas!
> >
> > The blog mentions that one of the areas where this will be observed is
> > while installing them (which I did!). However, I noticed they might be
> > downloaded multiple times:
> > If one interrupts the install.packages (via Ctrl+C), or it fails due
> > to some system dependency missing and I fix that on a different
> > terminal session, or the internet connection is cut and I try again.
>
> Yes, and this has been the case before - it's not new for simultaneous
> downloads.

Indeed, this behavior has been present before this recent change, the
post just reminded me to look into this.
The change described in the post will help when there is good internet
connections and this is the bottleneck.
My proposal could help those without good internet connection or other issues.

> > One possible way to make installations/downloads faster and also
> > reduce the bandwidth of repositories (and its mirrors) would be to
> > check if they need to be downloaded (again).
> > PACKAGES file on <repo>/src/contrib includes the MD5sum field that
> > could be used to check packages on the local folder (But it might be
> > faster to first check if any file exists there for the same package).
> >
> > In short, I propose:
> > 1) Checking before downloading packages their existence on the destdir
> > directory used by install.packages.
> > 2) I suppose the most common scenario is to use install.packages with
> > the default destdir parameter (NULL). If 1) is implemented it might be
> > useful to keep the temporary directory common for a single R session.
>
> When destdir is NULL (the default), non-local packages are downloaded to
> a subdirectory of the temporary session directory (see
> ?install.packages), so the downloaded files would be readily available
> to further installation attempts done by the same R session.

Perhaps the following test reinstalling the same package it is more
illustrative as we can see the package is downloaded again:

# R Under development (unstable) (2024-12-07 r87428)
td <- tempdir()
install.packages("BaseSet", destdir = td, lib = tempdir())
# trying URL 'https://ftp.cixug.es/CRAN/src/contrib/BaseSet_0.9.0.tar.gz'
# Content type 'application/octet-stream' length 784108 bytes (765 KB)
# ==================================================
# downloaded 765 KB
#....
list.files(td)
# [1] "BaseSet"                  "BaseSet_0.9.0.tar.gz"
file.info(file.path(td, "BaseSet"))
#                         size isdir mode               mtime
     ctime
# /tmp/RtmpO6DpoV/BaseSet 4096  TRUE  755 2024-12-10 17:32:50
2024-12-10 17:32:52
#                                       atime  uid  gid uname grname
# /tmp/RtmpO6DpoV/BaseSet 2024-12-10 17:32:52 1000 1000 lluis  lluis
install.packages("BaseSet", destdir = td, lib = tempdir())
# trying URL 'https://ftp.cixug.es/CRAN/src/contrib/BaseSet_0.9.0.tar.gz'
# Content type 'application/octet-stream' length 784108 bytes (765 KB)
# ==================================================
# downloaded 765 KB
#....
list.files(td)
# [1] "BaseSet"                  "BaseSet_0.9.0.tar.gz"
file.info(file.path(td, "BaseSet"))
#                         size isdir mode               mtime
     ctime
# /tmp/RtmpO6DpoV/BaseSet 4096  TRUE  755 2024-12-10 17:41:18
2024-12-10 17:41:20
#                                       atime  uid  gid uname grname
# /tmp/RtmpO6DpoV/BaseSet 2024-12-10 17:41:20 1000 1000 lluis  lluis

Note the progres bar to download the package even if there is already
present on destdir and the change on mtime on the folder showing the
updated hour.
By default install.packages uses a different temporary folder, set
internally which changes for each call which results in the same
behaviour: packages are downloaded again even if it's not needed
(there is no new BaseSet release between these two calls).

>
> I think we could once extend download.file() to support re-use of
> already downloaded files, so that it can continue an i nterrupted
> download of a single file or re-use the whole file.
>
> This shouldn't be
> the default because the files in general may change between downloads,
> and may be even from different URLs, but it could be used by
> install.packages(), where this shouldn't happen, at least when destdir
> is NULL.

This would be great! I am sure it will have many uses beyond install.packages.

>
> I think an extra round of checking checksums shouldn't be
> needed in install.packages().

As you mentioned file download might change on the websites,
downloading the file again ensures they get the latest.
But if no new download occurs users could install an old version of a package.
That's why I suggested checking the downloaded files on destdir to
check the "cache" and download those that are stale.
If this is already solved in a different way (I couldn't find it on
install.packages source code) it would be great.

Many thanks for your comments,

Llu?s
>
>
> Best?

> Tomas
>
> > I would appreciate feedback on these ideas.
> >
> > Best,
> >
> > Llu?s Revilla
> >
> > PD: New users encountering download & installation issues often keep
> > seeing the progress bar (and in the future "trying URL 'https://...")
> > of the same packages. There are some ways to prevent/avoid repeated
> > downloads, such as, using the system library dependency resolver, or
> > having local mirrors. But they are not easy/available for new useRs,
> > and sometimes they are difficult to avoid (like having a reliable
> > internet connection).
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Dec 11 02:31:03 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 11 Dec 2024 14:31:03 +1300
Subject: [Rd] 
 Is it advisable/possible to default on Linux to an EDITOR that
 actually exists?
In-Reply-To: <CAPRVBcxY_2jZkqtNepDRhLJXMRmgDC61jxYsDCBR2EyEX3e+5g@mail.gmail.com>
References: <CAPRVBcxY_2jZkqtNepDRhLJXMRmgDC61jxYsDCBR2EyEX3e+5g@mail.gmail.com>
Message-ID: <2FE55908-DDD7-4E20-B221-9FB839D32CB8@R-project.org>

Michael,

vi is the only editor that is part of the POSIX standard. Embedded systems have built-in support only for vi (e.g., busybox) so if a system has any editor support at all it is  most likely to be vi - it is ubiquitous which is why it's the most logical default. (FWIW no distributions I know come with emacs by default because it's too heavy, but all come with vi).

If you use stripped-down images (obviously no longer standards-compliant) then you don't have any editor so it's moot. If you have preference for another editor then you should set EDITOR or VISUAL - it's just a default when neither the system nor user doesn't declare their preference. I don't think R should be fishing for random programs that may or may not be editors at run-time.

Cheers,
Simon


> On Dec 11, 2024, at 5:08 AM, Michael Chirico <michaelchirico4 at gmail.com> wrote:
> 
> It looks like R has defaulted to using 'vi' for file.edit() (via
> EDITOR since ~24 years ago[1][2].
> 
> These days I think it is much more common to write code from
> lightweight environments, e.g. Docker files which strip all
> unnecessary commands. On such machines, it is not safe to assume 'vi'
> is installed, and it's not uncommon to encounter an issue like I did
> again today[3] where you or some other tool call file.edit() directly
> or implicitly and hit a clunky error.
> 
> Is there something better to do here? A "standard" Linux distribution
> will come with vi, emacs, nano, probably many others. Should
> `file.edit()` iterate over an ordered list to find the first that
> exists? Should it at least error if
> (!nzchar(Sys.which(Sys.getenv("EDITOR"))))?
> 
> Mike C
> 
> PS I do see some somewhat recent discussion[4] on EDITOR but it
> focuses on the EDITOR default in non-interactive() sessions.
> 
> [1] https://github.com/r-devel/r-svn/commit/b294ee2cef3d9292d578b062b80d59f372cf34b2#diff-1cbaac4768fd110525ba9086cb7a684aaf2c6555389c5446c913effbfec90c85
> [2] https://github.com/r-devel/r-svn/blob/71a2e968f4453858aadc1531a3774c011a6f9f49/doc/NEWS.0#L140-L141
> [3] https://github.com/r-lib/usethis/pull/2088
> [4] https://stat.ethz.ch/pipermail/r-devel/2023-July/082720.html
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


