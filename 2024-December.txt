From j@g@nmn2 @end|ng |rom gm@||@com  Mon Dec  2 16:56:55 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 2 Dec 2024 10:56:55 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
Message-ID: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>

I wonder if there is room for improvement here:

     > str2lang("if (a) b1    else b0")
     if (a) b1 else b0
     > str2lang("if (a) b1 \n else b0")
     Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
     1: if (a) b1
     2:  else
         ^

It only occurs at top level.  When the parser knows that it needs to
"keep reading", e.g., because the call to 'if' is enclosed in braces,
it detects the 'else':

     > str2lang("{ if (a) b1    else b0 }")
     {
         if (a)
             b1
         else b0
     }
     > str2lang("{ if (a) b1 \n else b0 }")
     {
         if (a)
             b1
         else b0
     }

If people agree that the above is a deficiency/bug then I could create a
formal bug report.  Then others or I could start thinking about a patch
for the parser.

Apologies if this issue has been seen and discussed before (most likely
by people like me in the habit of dropping braces in calls to 'if' where
not strictly necessary).

Mikael


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Dec  2 17:05:00 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Dec 2024 11:05:00 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
In-Reply-To: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
References: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
Message-ID: <594afbf2-c161-4b62-a147-5ac9c6b95d70@gmail.com>

This is well known, and it's necessary for reasonable behaviour in an 
interactive context.  Imagine typing the code you were parsing.  The 
first line is

  if (a) b1

At this point, the interpreter can't know that an else clause is coming. 
  Since the interpreter evaluates statements when they are complete, it 
will evaluate this and return b1 or NULL.

Putting the full expression in braces solves the issue, because this is 
clearly incomplete:

   { if (a) b1

Duncan Murdoch

On 2024-12-02 10:56 a.m., Mikael Jagan wrote:
> I wonder if there is room for improvement here:
> 
>       > str2lang("if (a) b1    else b0")
>       if (a) b1 else b0
>       > str2lang("if (a) b1 \n else b0")
>       Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
>       1: if (a) b1
>       2:  else
>           ^
> 
> It only occurs at top level.  When the parser knows that it needs to
> "keep reading", e.g., because the call to 'if' is enclosed in braces,
> it detects the 'else':
> 
>       > str2lang("{ if (a) b1    else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
>       > str2lang("{ if (a) b1 \n else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
> 
> If people agree that the above is a deficiency/bug then I could create a
> formal bug report.  Then others or I could start thinking about a patch
> for the parser.
> 
> Apologies if this issue has been seen and discussed before (most likely
> by people like me in the habit of dropping braces in calls to 'if' where
> not strictly necessary).
> 
> Mikael
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Dec  2 17:09:41 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Dec 2024 11:09:41 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
In-Reply-To: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
References: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
Message-ID: <e6fc0e66-08d1-4581-8de6-930ef24d4ffb@gmail.com>

BTW, this is discussed in section 3.2.1 of "The R Language Definition".

Duncan Murdoch

On 2024-12-02 10:56 a.m., Mikael Jagan wrote:
> I wonder if there is room for improvement here:
> 
>       > str2lang("if (a) b1    else b0")
>       if (a) b1 else b0
>       > str2lang("if (a) b1 \n else b0")
>       Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
>       1: if (a) b1
>       2:  else
>           ^
> 
> It only occurs at top level.  When the parser knows that it needs to
> "keep reading", e.g., because the call to 'if' is enclosed in braces,
> it detects the 'else':
> 
>       > str2lang("{ if (a) b1    else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
>       > str2lang("{ if (a) b1 \n else b0 }")
>       {
>           if (a)
>               b1
>           else b0
>       }
> 
> If people agree that the above is a deficiency/bug then I could create a
> formal bug report.  Then others or I could start thinking about a patch
> for the parser.
> 
> Apologies if this issue has been seen and discussed before (most likely
> by people like me in the habit of dropping braces in calls to 'if' where
> not strictly necessary).
> 
> Mikael
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Mon Dec  2 17:18:44 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 2 Dec 2024 11:18:44 -0500
Subject: [Rd] 'else' on new line not parsed at top level as part of
 preceding 'if'
In-Reply-To: <e6fc0e66-08d1-4581-8de6-930ef24d4ffb@gmail.com>
References: <2d467cfb-3a83-4bb7-ae73-ac4d1d8d0b70@gmail.com>
 <e6fc0e66-08d1-4581-8de6-930ef24d4ffb@gmail.com>
Message-ID: <4065c171-a6a9-49a4-9bad-e78adf1d9db6@gmail.com>

Thanks - that makes sense.  It's also documented in help("if"), so it's
doubly clear now that I did not do my homework here.

Mikael

On 2024-12-02 11:09 am, Duncan Murdoch wrote:
> BTW, this is discussed in section 3.2.1 of "The R Language Definition".
> 
> Duncan Murdoch
> 
> On 2024-12-02 10:56 a.m., Mikael Jagan wrote:
>> I wonder if there is room for improvement here:
>>
>>        > str2lang("if (a) b1    else b0")
>>        if (a) b1 else b0
>>        > str2lang("if (a) b1 \n else b0")
>>        Error in str2lang("if (a) b1 \n else b0") : <text>:2:2: unexpected 'else'
>>        1: if (a) b1
>>        2:  else
>>            ^
>>
>> It only occurs at top level.  When the parser knows that it needs to
>> "keep reading", e.g., because the call to 'if' is enclosed in braces,
>> it detects the 'else':
>>
>>        > str2lang("{ if (a) b1    else b0 }")
>>        {
>>            if (a)
>>                b1
>>            else b0
>>        }
>>        > str2lang("{ if (a) b1 \n else b0 }")
>>        {
>>            if (a)
>>                b1
>>            else b0
>>        }
>>
>> If people agree that the above is a deficiency/bug then I could create a
>> formal bug report.  Then others or I could start thinking about a patch
>> for the parser.
>>
>> Apologies if this issue has been seen and discussed before (most likely
>> by people like me in the habit of dropping braces in calls to 'if' where
>> not strictly necessary).
>>
>> Mikael
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From j|r|@c@mor@vec @end|ng |rom gm@||@com  Thu Dec  5 02:43:16 2024
From: j|r|@c@mor@vec @end|ng |rom gm@||@com (=?UTF-8?B?SmnFmcOtIE1vcmF2ZWM=?=)
Date: Thu, 5 Dec 2024 14:43:16 +1300
Subject: [Rd] Exposing native httpd server
Message-ID: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>

R has a native HTTP server that is used for serving R help pages 
interactively, at least on the loopback device (127.0.0.1)

But all of the working are internal, not exposed to user and not documented.
This is quite shame since the server seems to be fully capable of 
handling basic tasks,
be it serving static websites or even interactively processing queries.

This was previously noticed by Jeffry Horner, the author of the Rook 
package.
I am just a guy who found it interesting.

The basic working is as follows:
User needs to either overwrite the internal `tools:::httpd` function or 
add their hook into the internal environment tools:::.httpd.handlers.env.

In the former case, the user will be of a full control of the server, in 
the later case, the `app` will be hooked to `/custom/app` instead.
All that is needed then is to run the interactive help that starts the 
webserver.

Based on the breadcrumbs left on the way, I was able to write a server 
that emulates much more complex `servr` package that I have previously 
used to test locally my blog.

https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3

You can see that I am forced to do some illegal procedures:
 ?* tools:::httpd needs to be replaced
 ?* the server doesn't have knowledge of a directory so setwd needs to 
be set
 ?* the function must not end, otherwise the directory is changed during 
the server lifetime (and depends on the current working directory)

I would like to suggest and probe for willingness to expose the native 
http server.
This would include:

* de-hardcoding the server so that we can register other functions not 
just httpd
* exporting many functions and renaming them (such as mime_type)
* writing better interfaces, `startDynamicHelp` is kind of hard to work 
with, something like httpd_start(dir, fun, port), httpd_stop(port) and 
httpd_status(port) would be much cleaner.

I would like to say that I have no idea what I am doing, I don't 
understand webtech or the internal implementation, so if there are 
reasons why this isn't a great idea...

I am happy to make a PR for the R part. 
https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
The C part with the R's C internals look to me like a black magic and I 
don't feel confident enough. 
https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c

See this old stackoverflow answer, where someone was looking for `python 
-m SimpleHTTPServer 8080`

https://stackoverflow.com/q/12636764/4868692


From bbo|ker @end|ng |rom gm@||@com  Thu Dec  5 02:58:36 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 4 Dec 2024 20:58:36 -0500
Subject: [Rd] trivial typo
Message-ID: <135373ea-7d02-41af-99a5-611f1a84c3ac@gmail.com>

   On line 35 of src/library/stats/man/predict.Rd, there is a missing 
"be": "errors are to [be] returned".

https://github.com/r-devel/r-svn/blob/7b28ae9f8c77c7eb280eee3f4515822bb88e5c4b/src/library/stats/man/predict.Rd#L35

git blame says this has been this way for 21 years ...

   I could submit a patch but that seems like overkill ...

   cheers
    Ben Bolker


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Dec  5 09:18:58 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 5 Dec 2024 09:18:58 +0100
Subject: [Rd] trivial typo
In-Reply-To: <135373ea-7d02-41af-99a5-611f1a84c3ac@gmail.com>
References: <135373ea-7d02-41af-99a5-611f1a84c3ac@gmail.com>
Message-ID: <8a7bba31-0351-4dbc-8b90-1ad9850e2ef1@gmail.com>

On 12/5/24 02:58, Ben Bolker wrote:
> ? On line 35 of src/library/stats/man/predict.Rd, there is a missing 
> "be": "errors are to [be] returned".
>
> https://github.com/r-devel/r-svn/blob/7b28ae9f8c77c7eb280eee3f4515822bb88e5c4b/src/library/stats/man/predict.Rd#L35 
>

Thanks, fixed in R-devel.

Best,
Tomas

>
> git blame says this has been this way for 21 years ...
>
> ? I could submit a patch but that seems like overkill ...
>
> ? cheers
> ?? Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroenoom@ @end|ng |rom gm@||@com  Thu Dec  5 16:45:57 2024
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Thu, 5 Dec 2024 16:45:57 +0100
Subject: [Rd] Exposing native httpd server
In-Reply-To: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
References: <a7cada24-51e9-4e48-8977-07b913fb40ff@gmail.com>
Message-ID: <CABFfbXvH10FXV6eoLciKA-GETjQn5TE_uj2kgxWMvAyr7-hG8A@mail.gmail.com>

On Thu, Dec 5, 2024 at 2:43?AM Ji?? Moravec <jiri.c.moravec at gmail.com> wrote:
>
> R has a native HTTP server that is used for serving R help pages
> interactively, at least on the loopback device (127.0.0.1)
>
> But all of the working are internal, not exposed to user and not documented.

This has been available for a long time. The 'webutils' package has
basic examples of how to handle and parse http requests in R using
either using Rhttpd or httpuv:

   webutils::demo_rhttpd()
   webutils::demo_httpuv()

You can adapt from here to your needs. R provides all the hooks you
need, I think you'll find little appetite for duplicating more web
server tooling into base R.





> This is quite shame since the server seems to be fully capable of
> handling basic tasks,
> be it serving static websites or even interactively processing queries.
>
> This was previously noticed by Jeffry Horner, the author of the Rook
> package.
> I am just a guy who found it interesting.
>
> The basic working is as follows:
> User needs to either overwrite the internal `tools:::httpd` function or
> add their hook into the internal environment tools:::.httpd.handlers.env.
>
> In the former case, the user will be of a full control of the server, in
> the later case, the `app` will be hooked to `/custom/app` instead.
> All that is needed then is to run the interactive help that starts the
> webserver.
>
> Based on the breadcrumbs left on the way, I was able to write a server
> that emulates much more complex `servr` package that I have previously
> used to test locally my blog.
>
> https://gist.github.com/J-Moravec/497d71f4a4b7a204235d093b3fa69cc3
>
> You can see that I am forced to do some illegal procedures:
>   * tools:::httpd needs to be replaced
>   * the server doesn't have knowledge of a directory so setwd needs to
> be set
>   * the function must not end, otherwise the directory is changed during
> the server lifetime (and depends on the current working directory)
>
> I would like to suggest and probe for willingness to expose the native
> http server.
> This would include:
>
> * de-hardcoding the server so that we can register other functions not
> just httpd
> * exporting many functions and renaming them (such as mime_type)
> * writing better interfaces, `startDynamicHelp` is kind of hard to work
> with, something like httpd_start(dir, fun, port), httpd_stop(port) and
> httpd_status(port) would be much cleaner.
>
> I would like to say that I have no idea what I am doing, I don't
> understand webtech or the internal implementation, so if there are
> reasons why this isn't a great idea...
>
> I am happy to make a PR for the R part.
> https://github.com/wch/r-source/blob/trunk/src/library/tools/R/dynamicHelp.R
> The C part with the R's C internals look to me like a black magic and I
> don't feel confident enough.
> https://github.com/wch/r-source/blob/trunk/src/modules/internet/Rhttpd.c
>
> See this old stackoverflow answer, where someone was looking for `python
> -m SimpleHTTPServer 8080`
>
> https://stackoverflow.com/q/12636764/4868692
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


