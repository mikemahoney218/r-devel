From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Thu Oct  1 20:31:12 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Thu, 1 Oct 2020 20:31:12 +0200
Subject: [Rd] timezone tests and R-devel
Message-ID: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>

The return value of Sys.time() today with a timezone of US/Eastern is
unchanged between 4.0.3-patched and devel, but on devel the following test
fails
  all.equal(x, as.POSIXlt(x))
with
  x = Sys.time()

This means that devel does not complete make tests (failure on
tests/reg-tests-2.R)

It is entirely possible that it is an error on my end, I use
  export TZ="US/Eastern"
but I have been using this for a while, and R-4.0.3-patched built today
passes make tests.

Details below, and I am happy to provide more information.

Build platform: inside a conda environment on linux. I have been doing this
for a while, but it is certainly a non-standard setup. GCC 7.3

Best,
Kasper

On R version 4.0.3 beta (2020-10-01 r79286) I get

> x = Sys.time()
> attributes(x)
$class
[1] "POSIXct" "POSIXt"

> attributes(as.POSIXlt(x))
$names
 [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
 [9] "isdst"  "zone"   "gmtoff"

$class
[1] "POSIXlt" "POSIXt"

$tzone
[1] "US/Eastern" "EST"        "EDT"

> all.equal(x, as.POSIXlt(x))
[1] TRUE

On R Under development (unstable) (2020-10-01 r79286) I get
> x = Sys.time()
> all.equal(x,x)
[1] TRUE
> attributes(as.POSIXlt(x))
$names
 [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
 [9] "isdst"  "zone"   "gmtoff"

$class
[1] "POSIXlt" "POSIXt"

$tzone
[1] "US/Eastern" "EST"        "EDT"

> all.equal(x, as.POSIXlt(x))
[1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Oct  2 09:37:16 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 2 Oct 2020 09:37:16 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
Message-ID: <24438.55468.345544.482717@stat.math.ethz.ch>

>>>>> Kasper Daniel Hansen 
>>>>>     on Thu, 1 Oct 2020 20:31:12 +0200 writes:

    > The return value of Sys.time() today with a timezone of US/Eastern is
    > unchanged between 4.0.3-patched and devel, but on devel the following test
    > fails
    > all.equal(x, as.POSIXlt(x))
    > with
    > x = Sys.time()

    > This means that devel does not complete make tests (failure on
    > tests/reg-tests-2.R)

    > It is entirely possible that it is an error on my end, I use
    > export TZ="US/Eastern"
    > but I have been using this for a while, and R-4.0.3-patched built today
    > passes make tests.

    > Details below, and I am happy to provide more information.

    > Build platform: inside a conda environment on linux. I have been doing this
    > for a while, but it is certainly a non-standard setup. GCC 7.3

    > Best,
    > Kasper

    > On R version 4.0.3 beta (2020-10-01 r79286) I get

    >> x = Sys.time()
    >> attributes(x)
    > $class
    > [1] "POSIXct" "POSIXt"

    >> attributes(as.POSIXlt(x))
    > $names
    > [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
    > [9] "isdst"  "zone"   "gmtoff"

    > $class
    > [1] "POSIXlt" "POSIXt"

    > $tzone
    > [1] "US/Eastern" "EST"        "EDT"

    >> all.equal(x, as.POSIXlt(x))
    > [1] TRUE

    > On R Under development (unstable) (2020-10-01 r79286) I get
    >> x = Sys.time()
    >> all.equal(x,x)
    > [1] TRUE
    >> attributes(as.POSIXlt(x))
    > $names
    > [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
    > [9] "isdst"  "zone"   "gmtoff"

    > $class
    > [1] "POSIXlt" "POSIXt"

    > $tzone
    > [1] "US/Eastern" "EST"        "EDT"

    >> all.equal(x, as.POSIXlt(x))
    > [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"

Yes, this is a new feature, actually a __bug fix__ in R-devel,
see NEWS :

    ? all.equal.POSIXt() no longer warns about and subsequently ignores
      inconsistent "tzone" attributes, but describes the difference in
      its return value (PR#17277).  This check can be disabled _via_
      the new argument check.tzone = FALSE; as suggested by Sebastian
      Meyer.

Here's pure R code for reproducing what you've seen :

x <- structure(1601623657, class = c("POSIXct", "POSIXt"))

Sys.unsetenv("TZ")
all.equal(x, ltx <- as.POSIXlt(x))  # TRUE
attr(ltx, "tzone")  # [1]  "" "CET"  "CEST"

Sys.setenv(TZ = "US/Eastern")
all.equal(x, ltx <- as.POSIXlt(x))
## "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
all.equal(x, ltx, check.tzone = FALSE) # TRUE

Sys.unsetenv("TZ")
all.equal(x, ltx <- as.POSIXlt(x)) # TRUE


From @eb@meyer @end|ng |rom |@u@de  Fri Oct  2 09:48:03 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Fri, 2 Oct 2020 09:48:03 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
Message-ID: <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>

Thank you for the report. In R-devel, all.equal.POSIXt() by default
reports inconsistent time zones. Previously,

> x <- Sys.time()
> all.equal(x, as.POSIXlt(x, tz = "EST5EDT"))

would return TRUE. To ignore the time zone attributes in R-devel, the
argument 'check.tzone = FALSE' needs to be used.

That said, I can reproduce the 'make check' failure in R-devel on Ubuntu
Linux when TZ is set, even if it is set to the system time zone:

$ export TZ=Europe/Berlin
$ make check
[...]
> running code in '../../tests/reg-tests-2.R' ... OK
>   comparing 'reg-tests-2.Rout' to '../../tests/reg-tests-2.Rout.save' ...7335c7335
> < [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
> ---
>> [1] TRUE


Compare the following two sessions:

> R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time(); all.equal(x, as.POSIXlt(x))'
[1] "Europe/Berlin"
[1] TRUE

> TZ='Europe/Berlin' R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time(); all.equal(x, as.POSIXlt(x))'
[1] "Europe/Berlin"
[1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"


So as.POSIXlt() sets a 'tzone' attribute if TZ is set, but this
behaviour is not new. Even with old R 3.6.3, I see

> R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
[1] ""     "CET"  "CEST"

> TZ='Europe/Berlin' R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
[1] "Europe/Berlin" "CET"           "CEST"

This might be system-specific.

I suggest to modify the test as attached for make check to pass in this
setting.

Best regards,

	Sebastian


Am 01.10.20 um 20:31 schrieb Kasper Daniel Hansen:
> The return value of Sys.time() today with a timezone of US/Eastern is
> unchanged between 4.0.3-patched and devel, but on devel the following test
> fails
>   all.equal(x, as.POSIXlt(x))
> with
>   x = Sys.time()
> 
> This means that devel does not complete make tests (failure on
> tests/reg-tests-2.R)
> 
> It is entirely possible that it is an error on my end, I use
>   export TZ="US/Eastern"
> but I have been using this for a while, and R-4.0.3-patched built today
> passes make tests.
> 
> Details below, and I am happy to provide more information.
> 
> Build platform: inside a conda environment on linux. I have been doing this
> for a while, but it is certainly a non-standard setup. GCC 7.3
> 
> Best,
> Kasper
> 
> On R version 4.0.3 beta (2020-10-01 r79286) I get
> 
>> x = Sys.time()
>> attributes(x)
> $class
> [1] "POSIXct" "POSIXt"
> 
>> attributes(as.POSIXlt(x))
> $names
>  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
>  [9] "isdst"  "zone"   "gmtoff"
> 
> $class
> [1] "POSIXlt" "POSIXt"
> 
> $tzone
> [1] "US/Eastern" "EST"        "EDT"
> 
>> all.equal(x, as.POSIXlt(x))
> [1] TRUE
> 
> On R Under development (unstable) (2020-10-01 r79286) I get
>> x = Sys.time()
>> all.equal(x,x)
> [1] TRUE
>> attributes(as.POSIXlt(x))
> $names
>  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
>  [9] "isdst"  "zone"   "gmtoff"
> 
> $class
> [1] "POSIXlt" "POSIXt"
> 
> $tzone
> [1] "US/Eastern" "EST"        "EDT"
> 
>> all.equal(x, as.POSIXlt(x))
> [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: all.equal.POSIXt-test.diff
Type: text/x-patch
Size: 910 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20201002/475d08fb/attachment.bin>

From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Fri Oct  2 11:28:04 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Fri, 2 Oct 2020 11:28:04 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
 <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
Message-ID: <CAC2h7uv=Ks8-8Dm4XbAUOphM3TJc8UJGyD2+DTvVgs6mVDF9Rg@mail.gmail.com>

Yes, the potential issue I see is that
  make check
fails when I explicitly set TZ. However, I set it to be the same as what
the system reports when I login.

Details: The system (RHEL) I am working on has
$ strings /etc/localtime | tail -n 1
EST5EDT,M3.2.0,M11.1.0
$ date +%Z
EDT
$ echo $TZ
US/Eastern



On Fri, Oct 2, 2020 at 9:48 AM Sebastian Meyer <seb.meyer at fau.de> wrote:

> Thank you for the report. In R-devel, all.equal.POSIXt() by default
> reports inconsistent time zones. Previously,
>
> > x <- Sys.time()
> > all.equal(x, as.POSIXlt(x, tz = "EST5EDT"))
>
> would return TRUE. To ignore the time zone attributes in R-devel, the
> argument 'check.tzone = FALSE' needs to be used.
>
> That said, I can reproduce the 'make check' failure in R-devel on Ubuntu
> Linux when TZ is set, even if it is set to the system time zone:
>
> $ export TZ=Europe/Berlin
> $ make check
> [...]
> > running code in '../../tests/reg-tests-2.R' ... OK
> >   comparing 'reg-tests-2.Rout' to '../../tests/reg-tests-2.Rout.save'
> ...7335c7335
> > < [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
> > ---
> >> [1] TRUE
>
>
> Compare the following two sessions:
>
> > R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time();
> all.equal(x, as.POSIXlt(x))'
> [1] "Europe/Berlin"
> [1] TRUE
>
> > TZ='Europe/Berlin' R-devel --vanilla --no-echo -e 'Sys.timezone(); x <-
> Sys.time(); all.equal(x, as.POSIXlt(x))'
> [1] "Europe/Berlin"
> [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
>
>
> So as.POSIXlt() sets a 'tzone' attribute if TZ is set, but this
> behaviour is not new. Even with old R 3.6.3, I see
>
> > R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
> [1] ""     "CET"  "CEST"
>
> > TZ='Europe/Berlin' R-3.6.3 --vanilla --slave -e
> 'attr(as.POSIXlt(Sys.time()), "tzone")'
> [1] "Europe/Berlin" "CET"           "CEST"
>
> This might be system-specific.
>
> I suggest to modify the test as attached for make check to pass in this
> setting.
>
> Best regards,
>
>         Sebastian
>
>
> Am 01.10.20 um 20:31 schrieb Kasper Daniel Hansen:
> > The return value of Sys.time() today with a timezone of US/Eastern is
> > unchanged between 4.0.3-patched and devel, but on devel the following
> test
> > fails
> >   all.equal(x, as.POSIXlt(x))
> > with
> >   x = Sys.time()
> >
> > This means that devel does not complete make tests (failure on
> > tests/reg-tests-2.R)
> >
> > It is entirely possible that it is an error on my end, I use
> >   export TZ="US/Eastern"
> > but I have been using this for a while, and R-4.0.3-patched built today
> > passes make tests.
> >
> > Details below, and I am happy to provide more information.
> >
> > Build platform: inside a conda environment on linux. I have been doing
> this
> > for a while, but it is certainly a non-standard setup. GCC 7.3
> >
> > Best,
> > Kasper
> >
> > On R version 4.0.3 beta (2020-10-01 r79286) I get
> >
> >> x = Sys.time()
> >> attributes(x)
> > $class
> > [1] "POSIXct" "POSIXt"
> >
> >> attributes(as.POSIXlt(x))
> > $names
> >  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"
>  "yday"
> >  [9] "isdst"  "zone"   "gmtoff"
> >
> > $class
> > [1] "POSIXlt" "POSIXt"
> >
> > $tzone
> > [1] "US/Eastern" "EST"        "EDT"
> >
> >> all.equal(x, as.POSIXlt(x))
> > [1] TRUE
> >
> > On R Under development (unstable) (2020-10-01 r79286) I get
> >> x = Sys.time()
> >> all.equal(x,x)
> > [1] TRUE
> >> attributes(as.POSIXlt(x))
> > $names
> >  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"
>  "yday"
> >  [9] "isdst"  "zone"   "gmtoff"
> >
> > $class
> > [1] "POSIXlt" "POSIXt"
> >
> > $tzone
> > [1] "US/Eastern" "EST"        "EDT"
> >
> >> all.equal(x, as.POSIXlt(x))
> > [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From @ndre@@ @end|ng |rom @ker@t|ng@de  Fri Oct  2 19:34:14 2020
From: @ndre@@ @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Fri, 02 Oct 2020 19:34:14 +0200 (CEST)
Subject: [Rd] Specifying C Standard in Package's Makevars File
In-Reply-To: <2c6908ad-a9e9-da16-4c6a-3f8dd7601b4d@stats.ox.ac.uk>
Message-ID: <E1kOOwg-00045W-NW@rmmprod07.runbox>

Thanks, that was very helpful. The C11 features I use do actually work in C99 mode, so I will stick with that. I just thought it was kind of "cleaner" to specify C11 mode when using features from that standard.

2020-09-29 16:35 GMT+02:00 "Prof Brian Ripley" <ripley at stats.ox.ac.uk>:
> On 28/09/2020 12:44, Andreas Kersting wrote:> Hi,
>> > what is the correct way to specify a C standard in a package's Makevars file?
>> > Building a package with e.g. PKG_CFLAGS = -std=gnu11 does work but R CMD check issues a warning:
> 
> for some unstated value of 'work' ...
> 
>> * checking compilation flags in Makevars ... WARNING
>> Non-portable flags in variable 'PKG_CFLAGS':
>>    -std=gnu11
>> > (Same for -std=c11.)
>> > Thanks! Regards,
>> Andreas Kersting
> 
> Those flags are not portable, as 'check' correctly says.  Furthermore, on some platforms there may be no flag which can be added -- R documents that 'CC' specifies a C99 compiler, and that or CC+CFLAGS are likely to specify flags which are incompatible with -std=c11 (true on Solaris where -xc99 is used).
> 
> So, like all such overrides (see 'Writing R Extensions') you need to write a configure script (preferably using autoconf) to
> 
> - select an appropriate C compiler+flags
> - substitute them into src/Makefile.in
> 
> For the new features I have used in C11, all known compilers make them available in C99 mode and a configure script could be used to test for their presence (as R itself does).  That is, it is rare to actually need to specify C11 mode.
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From pd@me@ @end|ng |rom cb@@dk  Mon Oct  5 13:20:54 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Mon, 5 Oct 2020 11:20:54 +0000
Subject: [Rd] R 4.0.3 scheduled for October 10
Message-ID: <89372DD0-8E05-4A32-B87F-3E96246BAA6D@cbs.dk>

[Oops, this apparently got omitted during release scheduling]

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From tho@j|eeper @end|ng |rom gm@||@com  Mon Oct  5 18:48:21 2020
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Mon, 5 Oct 2020 17:48:21 +0100
Subject: [Rd] Internet access and R CMD make check-devel
Message-ID: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>

I am trying to install R on CentOS (either 7 or 8, behavior is the
same) in an environment behind a firewall and while I am able to run:

R CMD make check

I am unable to run:

R CMD make check-devel

These latter tests fail. The failure occurs in the internet access
if() conditional statement in these two tests:

https://svn.r-project.org/R/trunk/tests/internet.R
https://svn.r-project.org/R/trunk/tests/internet2.R

In my environment, nsl("cran.r-project.org") returns a valid, non-null
value but subsequent commands in those test files do not successfully
access the internet.

I'd like to be able to run the full test suite given I am building
from source. I'm wondering if it's possible to make these conditionals
more strict so that the conditional tests internet access in a manner
more similar to how internet access is used in the tests. Would this
be possible? Or, make tests that require internet access into a
distinct `check-internet` or similar?

As an additional reference, the same conditional statement appears to
also be used in these other tests:

https://svn.r-project.org/R/trunk/tests/CRANtools.R
https://svn.r-project.org/R/trunk/tests/libcurl.R

Thanks,
-Thomas

Thomas J. Leeper


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Oct  5 19:18:30 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 5 Oct 2020 18:18:30 +0100
Subject: [Rd] Internet access and R CMD make check-devel
In-Reply-To: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
References: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
Message-ID: <CABtg=Kmqox1RrO2HYqeLTdy51iB9euPoPuh4-=S4D2LeY278rg@mail.gmail.com>

One way would be to comment out these tests, or really turn off the
internet, and then these tests don't run.

Indeed, a successful DNS query does not mean that you can connect to
the internet in general. FWIW pingr::is_online [1] implements a method
that works well. Apple's Captive Portal test page is the best method
to determine if you are online, in my experience.

[1] https://github.com/cran/pingr/blob/4594ce0cd40b6ba69f1bcc2379e0038c38dd710f/R/ping-package.r#L135

Gabor


On Mon, Oct 5, 2020 at 5:49 PM Thomas J. Leeper <thosjleeper at gmail.com> wrote:
>
> I am trying to install R on CentOS (either 7 or 8, behavior is the
> same) in an environment behind a firewall and while I am able to run:
>
> R CMD make check
>
> I am unable to run:
>
> R CMD make check-devel
>
> These latter tests fail. The failure occurs in the internet access
> if() conditional statement in these two tests:
>
> https://svn.r-project.org/R/trunk/tests/internet.R
> https://svn.r-project.org/R/trunk/tests/internet2.R
>
> In my environment, nsl("cran.r-project.org") returns a valid, non-null
> value but subsequent commands in those test files do not successfully
> access the internet.
>
> I'd like to be able to run the full test suite given I am building
> from source. I'm wondering if it's possible to make these conditionals
> more strict so that the conditional tests internet access in a manner
> more similar to how internet access is used in the tests. Would this
> be possible? Or, make tests that require internet access into a
> distinct `check-internet` or similar?
>
> As an additional reference, the same conditional statement appears to
> also be used in these other tests:
>
> https://svn.r-project.org/R/trunk/tests/CRANtools.R
> https://svn.r-project.org/R/trunk/tests/libcurl.R
>
> Thanks,
> -Thomas
>
> Thomas J. Leeper
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Mon Oct  5 20:42:44 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 5 Oct 2020 11:42:44 -0700
Subject: [Rd] Internet access and R CMD make check-devel
In-Reply-To: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
References: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
Message-ID: <CAD4oTHGCO7VtFYqawFAG3GA9Q1m1UWOOgtRTEu04kT2VKNj7KA@mail.gmail.com>

Thomas,

In my experience, as pointed out also by Gabor, its often part of the
devops build process to remove/comment out these tests or otherwise modify
them so that they will pass (if they SHOULD pass) in your environment.

That said, a quick look at the Makefile does suggest that failing on the
internet tests should be "allowed" and not cause the whole process to
return a non-zero value.

I don't have time right this second to test this though. Is that not the
behavior you're seeing in practice? Or do the tests hang so the process
never completes, or...?

Best,
~G

On Mon, Oct 5, 2020 at 9:49 AM Thomas J. Leeper <thosjleeper at gmail.com>
wrote:

> I am trying to install R on CentOS (either 7 or 8, behavior is the
> same) in an environment behind a firewall and while I am able to run:
>
> R CMD make check
>
> I am unable to run:
>
> R CMD make check-devel
>
> These latter tests fail. The failure occurs in the internet access
> if() conditional statement in these two tests:
>
> https://svn.r-project.org/R/trunk/tests/internet.R
> https://svn.r-project.org/R/trunk/tests/internet2.R
>
> In my environment, nsl("cran.r-project.org") returns a valid, non-null
> value but subsequent commands in those test files do not successfully
> access the internet.
>
> I'd like to be able to run the full test suite given I am building
> from source. I'm wondering if it's possible to make these conditionals
> more strict so that the conditional tests internet access in a manner
> more similar to how internet access is used in the tests. Would this
> be possible? Or, make tests that require internet access into a
> distinct `check-internet` or similar?
>
> As an additional reference, the same conditional statement appears to
> also be used in these other tests:
>
> https://svn.r-project.org/R/trunk/tests/CRANtools.R
> https://svn.r-project.org/R/trunk/tests/libcurl.R
>
> Thanks,
> -Thomas
>
> Thomas J. Leeper
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tho@j|eeper @end|ng |rom gm@||@com  Mon Oct  5 21:42:56 2020
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Mon, 5 Oct 2020 20:42:56 +0100
Subject: [Rd] Internet access and R CMD make check-devel
In-Reply-To: <CAD4oTHGCO7VtFYqawFAG3GA9Q1m1UWOOgtRTEu04kT2VKNj7KA@mail.gmail.com>
References: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
 <CAD4oTHGCO7VtFYqawFAG3GA9Q1m1UWOOgtRTEu04kT2VKNj7KA@mail.gmail.com>
Message-ID: <CAOC91MSu5Pahgw5CEA_TJgXhdLhELLou9Ed8zGxkGAswH8fn6w@mail.gmail.com>

Thanks, Gabe and Gabor.

In my case it causes a non-zero status and fails the check-devel step.

I?ll definitely fall back to modifying the code but it doesn?t seem like
this is exactly the intended behavior of the tests.

-Thomas

El El lun, 5 oct 2020 a las 19:42, Gabriel Becker <gabembecker at gmail.com>
escribi?:

> Thomas,
>
> In my experience, as pointed out also by Gabor, its often part of the
> devops build process to remove/comment out these tests or otherwise modify
> them so that they will pass (if they SHOULD pass) in your environment.
>
> That said, a quick look at the Makefile does suggest that failing on the
> internet tests should be "allowed" and not cause the whole process to
> return a non-zero value.
>
> I don't have time right this second to test this though. Is that not the
> behavior you're seeing in practice? Or do the tests hang so the process
> never completes, or...?
>
> Best,
> ~G
>
> On Mon, Oct 5, 2020 at 9:49 AM Thomas J. Leeper <thosjleeper at gmail.com>
> wrote:
>
>> I am trying to install R on CentOS (either 7 or 8, behavior is the
>> same) in an environment behind a firewall and while I am able to run:
>>
>> R CMD make check
>>
>> I am unable to run:
>>
>> R CMD make check-devel
>>
>> These latter tests fail. The failure occurs in the internet access
>> if() conditional statement in these two tests:
>>
>> https://svn.r-project.org/R/trunk/tests/internet.R
>> https://svn.r-project.org/R/trunk/tests/internet2.R
>>
>> In my environment, nsl("cran.r-project.org") returns a valid, non-null
>> value but subsequent commands in those test files do not successfully
>> access the internet.
>>
>> I'd like to be able to run the full test suite given I am building
>> from source. I'm wondering if it's possible to make these conditionals
>> more strict so that the conditional tests internet access in a manner
>> more similar to how internet access is used in the tests. Would this
>> be possible? Or, make tests that require internet access into a
>> distinct `check-internet` or similar?
>>
>> As an additional reference, the same conditional statement appears to
>> also be used in these other tests:
>>
>> https://svn.r-project.org/R/trunk/tests/CRANtools.R
>> https://svn.r-project.org/R/trunk/tests/libcurl.R
>>
>> Thanks,
>> -Thomas
>>
>> Thomas J. Leeper
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> --

Thomas J. Leeper
http://www.thomasleeper.com

	[[alternative HTML version deleted]]


From @ndre@@@b|@ette @end|ng |rom un|-due@de  Mon Oct  5 22:47:01 2020
From: @ndre@@@b|@ette @end|ng |rom un|-due@de (=?utf-8?B?QmzDpHR0ZSwgQW5kcmVhcw==?=)
Date: Mon, 5 Oct 2020 20:47:01 +0000
Subject: [Rd] S4 - inheritance changed by order of setClassUnion and setAs()
Message-ID: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>

Dear colleagues,

there is a behaviour with S4 (virtual) classes that I find  very hard to understand: Depending on the position
of setAs(), the tree of inheritance changes.

This is my baseline example that defines the classes "grandma", "mother", "daughter" and a virtual
class "mr_x". For a new instance if "daughter", "mr_x" is betweeen "mother" and "grandma".

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
is(new("daughter"))

[1] "daughter" "mother"   "mr_x"     "grandma"

Yet if I change the order of setAs() and setClassUnion(), this alters the pattern of inheritance.

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
is(new("daughter"))

[1] "daughter" "mother"   "grandma"  "mr_x"

Is there a reasonable explanation for this behavior? I could not find any and I would appreciate
your help. If it is not an unintended behavior, I find it very confusing and hard to anticipate.

Kind regads
Andreas

--
Prof. Dr. Andreas Bl?tte
Professor of Public Policy and Regional Politics
University of Duisburg-Essen

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Oct  6 02:02:07 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 5 Oct 2020 17:02:07 -0700
Subject: [Rd] 
 S4 - inheritance changed by order of setClassUnion and setAs()
In-Reply-To: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>
References: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>
Message-ID: <CAD4oTHFGDvss2HL1ksxncYPp-bcH2LZR2iCMMurcsy89Xo3pBQ@mail.gmail.com>

Andreas,

As far as I can tell (/conjecture), this is because the list of classes a
particular class inherits from directly is appended to as needed, and so
the order that a class extends others isd refined by the order that those
connections are defined.

We can see this with two setClassUnion calls, rather than required setAs:

> setClass("grandma", slots = c(a = "character"))

> setClass("mother", slots = c(b = "matrix"), contains = "grandma")

> setClass("daughter", slots = c(c = "list"), contains = "mother")

> setClassUnion(name = "mr_x", members = c("daughter", "mother"))

> setClassUnion(name = "mr_y", members = c("daughter", "mother"))

> getClass("daughter")

Class "daughter" [in ".GlobalEnv"]


Slots:



Name:          c         b         a

Class:      list    matrix character


Extends:

Class "mother", directly

Class "mr_x", directly

Class "mr_y", directly

Class "grandma", by class "mother", distance 2

> setClass("grandma2", slots = c(a = "character"))

> setClass("mother2", slots = c(b = "matrix"), contains = "grandma2")

> setClass("daughter2", slots = c(c = "list"), contains = "mother2")

> setClassUnion(name = "mr_y2", members = c("daughter2", "mother2"))

> setClassUnion(name = "mr_x2", members = c("daughter2", "mother2"))

> getClass("daughter2")

Class "daughter2" [in ".GlobalEnv"]


Slots:



Name:          c         b         a

Class:      list    matrix character


Extends:

Class "mother2", directly

Class "mr_y2", directly

Class "mr_x2", directly

Class "grandma2", by class "mother2", distance 2


Note that mr_y2 appears in the list before mr_x2 the second block. The same
thing is happening with setAs which (somewhat contrary to my expectations,
admittedly) causes extends to consider "daughter" to inherit *directly* from
"grandma" in your example (though it does note its via explicit coercion).

I think the take-away here is that when modifying the class inheritance
structure explicitly, via setClassUnion or setAs (or, I assume, setIs)
order inherently matters.

In fact order also matters for multiple inheritence via the normal contains
mechanism. In practice, how could it not matter?

Multiple inheritence is very powerful but dangerous.

> setClass("person1", slots = c(f = "character"))

> setClass("person2", slots = c(g = "character"))

> setClass("people1",* contains = c("person1", "person2")*)

> getClass("people1")

Class "people1" [in ".GlobalEnv"]


Slots:



Name:          f         g

Class: character character


Extends: "person1", "person2"

> setClass("people2", *contains = c("person2", "person1")*)

> getClass("people2")

Class "people2" [in ".GlobalEnv"]


Slots:



Name:          g         f

Class: character character


Extends: "person2", "person1"

> setGeneric("ohno", function(obj) standardGeneric("ohno")

+ )

[1] "ohno"

> setMethod("ohno", "person1", function(obj) "person1!")

> setMethod("ohno", "person2", function(obj) "person2! Oh No!")

*> ohno(new("people1"))*

*[1] "person1!"*

*> ohno(new("people2"))*

*[1] "person2! Oh No!"*


Not sure if that helps any or not, but thats what I see here. And again, if
I got anything wrong here, someone please correct me :)

Best,
~G

On Mon, Oct 5, 2020 at 1:47 PM Bl?tte, Andreas <andreas.blaette at uni-due.de>
wrote:

> Dear colleagues,
>
> there is a behaviour with S4 (virtual) classes that I find  very hard to
> understand: Depending on the position
> of setAs(), the tree of inheritance changes.
>
> This is my baseline example that defines the classes "grandma", "mother",
> "daughter" and a virtual
> class "mr_x". For a new instance if "daughter", "mr_x" is betweeen
> "mother" and "grandma".
>
> setClass("grandma", slots = c(a = "character"))
> setClass("mother", slots = c(b = "matrix"), contains = "grandma")
> setClass("daughter", slots = c(c = "list"), contains = "mother")
> setClassUnion(name = "mr_x", members = c("daughter", "mother"))
> setAs(from = "daughter", to = "grandma", def = function(from)
> new("grandma"))
> is(new("daughter"))
>
> [1] "daughter" "mother"   "mr_x"     "grandma"
>
> Yet if I change the order of setAs() and setClassUnion(), this alters the
> pattern of inheritance.
>
> setClass("grandma", slots = c(a = "character"))
> setClass("mother", slots = c(b = "matrix"), contains = "grandma")
> setClass("daughter", slots = c(c = "list"), contains = "mother")
> setAs(from = "daughter", to = "grandma", def = function(from)
> new("grandma"))
> setClassUnion(name = "mr_x", members = c("daughter", "mother"))
> is(new("daughter"))
>
> [1] "daughter" "mother"   "grandma"  "mr_x"
>
> Is there a reasonable explanation for this behavior? I could not find any
> and I would appreciate
> your help. If it is not an unintended behavior, I find it very confusing
> and hard to anticipate.
>
> Kind regads
> Andreas
>
> --
> Prof. Dr. Andreas Bl?tte
> Professor of Public Policy and Regional Politics
> University of Duisburg-Essen
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @ndre@@@b|@ette @end|ng |rom un|-due@de  Tue Oct  6 10:30:05 2020
From: @ndre@@@b|@ette @end|ng |rom un|-due@de (=?utf-8?B?QmzDpHR0ZSwgQW5kcmVhcw==?=)
Date: Tue, 6 Oct 2020 08:30:05 +0000
Subject: [Rd] 
 S4 - inheritance changed by order of setClassUnion and setAs()
In-Reply-To: <CAD4oTHFGDvss2HL1ksxncYPp-bcH2LZR2iCMMurcsy89Xo3pBQ@mail.gmail.com>
References: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>
 <CAD4oTHFGDvss2HL1ksxncYPp-bcH2LZR2iCMMurcsy89Xo3pBQ@mail.gmail.com>
Message-ID: <AEA870C4-FBD1-494C-B431-AE62D78B237A@uni-due.de>

Dear Gabriel,

thank you so much for the scrutiny you took to look into this. Your explanation gives me a much better sense for what may be going on.

Admittedly, I still find it hard to understand why setAs() may have a side effect on inheritance. Looking at the documentation of setAs() again, this is an expected behaviour of setIs(), but not from setAs().

Maybe it makes sense to add a respective explicit explanation in the documentation of setAs()? For the time being, my personal take away is that I will try to circumvent setClassUnion() in combination with setAs().

Thanks again
Andreas

Von: Gabriel Becker <gabembecker at gmail.com>
Datum: Dienstag, 6. Oktober 2020 um 02:02
An: Bl?tte <andreas.blaette at uni-due.de>
Cc: Peter Dalgaard via R-devel <r-devel at r-project.org>
Betreff: Re: [Rd] S4 - inheritance changed by order of setClassUnion and setAs()

Andreas,

As far as I can tell (/conjecture), this is because the list of classes a particular class inherits from directly is appended to as needed, and so the order that a class extends others isd refined by the order that those connections are defined.

We can see this with two setClassUnion calls, rather than required setAs:


> setClass("grandma", slots = c(a = "character"))

> setClass("mother", slots = c(b = "matrix"), contains = "grandma")

> setClass("daughter", slots = c(c = "list"), contains = "mother")

> setClassUnion(name = "mr_x", members = c("daughter", "mother"))

> setClassUnion(name = "mr_y", members = c("daughter", "mother"))

> getClass("daughter")

Class "daughter" [in ".GlobalEnv"]



Slots:



Name:          c         b         a

Class:      list    matrix character



Extends:

Class "mother", directly

Class "mr_x", directly

Class "mr_y", directly

Class "grandma", by class "mother", distance 2

> setClass("grandma2", slots = c(a = "character"))

> setClass("mother2", slots = c(b = "matrix"), contains = "grandma2")

> setClass("daughter2", slots = c(c = "list"), contains = "mother2")

> setClassUnion(name = "mr_y2", members = c("daughter2", "mother2"))

> setClassUnion(name = "mr_x2", members = c("daughter2", "mother2"))

> getClass("daughter2")

Class "daughter2" [in ".GlobalEnv"]



Slots:



Name:          c         b         a

Class:      list    matrix character



Extends:

Class "mother2", directly

Class "mr_y2", directly

Class "mr_x2", directly

Class "grandma2", by class "mother2", distance 2


Note that mr_y2 appears in the list before mr_x2 the second block. The same thing is happening with setAs which (somewhat contrary to my expectations, admittedly) causes extends to consider "daughter" to inherit directly from "grandma" in your example (though it does note its via explicit coercion).


I think the take-away here is that when modifying the class inheritance structure explicitly, via setClassUnion or setAs (or, I assume, setIs) order inherently matters.

In fact order also matters for multiple inheritence via the normal contains mechanism. In practice, how could it not matter?


Multiple inheritence is very powerful but dangerous.



> setClass("person1", slots = c(f = "character"))

> setClass("person2", slots = c(g = "character"))

> setClass("people1", contains = c("person1", "person2"))

> getClass("people1")

Class "people1" [in ".GlobalEnv"]



Slots:



Name:          f         g

Class: character character



Extends: "person1", "person2"

> setClass("people2", contains = c("person2", "person1"))

> getClass("people2")

Class "people2" [in ".GlobalEnv"]



Slots:



Name:          g         f

Class: character character



Extends: "person2", "person1"

> setGeneric("ohno", function(obj) standardGeneric("ohno")

+ )

[1] "ohno"

> setMethod("ohno", "person1", function(obj) "person1!")

> setMethod("ohno", "person2", function(obj) "person2! Oh No!")

> ohno(new("people1"))

[1] "person1!"

> ohno(new("people2"))

[1] "person2! Oh No!"

Not sure if that helps any or not, but thats what I see here. And again, if I got anything wrong here, someone please correct me :)


Best,
~G

On Mon, Oct 5, 2020 at 1:47 PM Bl?tte, Andreas <andreas.blaette at uni-due.de<mailto:andreas.blaette at uni-due.de>> wrote:
Dear colleagues,

there is a behaviour with S4 (virtual) classes that I find  very hard to understand: Depending on the position
of setAs(), the tree of inheritance changes.

This is my baseline example that defines the classes "grandma", "mother", "daughter" and a virtual
class "mr_x". For a new instance if "daughter", "mr_x" is betweeen "mother" and "grandma".

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
is(new("daughter"))

[1] "daughter" "mother"   "mr_x"     "grandma"

Yet if I change the order of setAs() and setClassUnion(), this alters the pattern of inheritance.

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
is(new("daughter"))

[1] "daughter" "mother"   "grandma"  "mr_x"

Is there a reasonable explanation for this behavior? I could not find any and I would appreciate
your help. If it is not an unintended behavior, I find it very confusing and hard to anticipate.

Kind regads
Andreas

--
Prof. Dr. Andreas Bl?tte
Professor of Public Policy and Regional Politics
University of Duisburg-Essen

        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Oct  7 13:24:52 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Wed, 7 Oct 2020 19:24:52 +0800
Subject: [Rd] Coercion function does not work for the ALTREP object
Message-ID: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>

Hi all,

The coercion function defined for the ALTREP object will not be called by R
when an assignment operation implicitly introduces coercion for a large
ALTREP object.

For example, If I create a vector of length 10, the ALTREP coercion
function seems to work fine.
```
> x <- 1:10
> y <- wrap_altrep(x)
> .Internal(inspect(y))
@0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
> y[1] <- 1.0
Duplicating object
Coercing object
> .Internal(inspect(y))
@0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
```

However, if I create a vector of length 1024, R will give me a normal
real-type vector
```
> x <- 1:1024
> y <- wrap_altrep(x)
> .Internal(inspect(y))
@0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
> y[1] <- 1.0
> .Internal(inspect(y))
@0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0) 1,2,3,4,5,...
```

Note that the duplicate function is also called for the first example. It
seems like R completely ignores my ALTREP functions in the second example.
I feel this might be designed on purpose, but I do not understand the
reason behind it. Is there any reason why we are not consistent here? Here
is my session info

sessionInfo()
R Under development (unstable) (2020-09-03 r79126)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Best,
Jiefei

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Wed Oct  7 23:04:32 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 7 Oct 2020 14:04:32 -0700
Subject: [Rd] Coercion function does not work for the ALTREP object
In-Reply-To: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
References: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
Message-ID: <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>

Jiefei,

Where does the code for your altrep class live?

Thanks,
~G

On Wed, Oct 7, 2020 at 4:25 AM Jiefei Wang <szwjf08 at gmail.com> wrote:

> Hi all,
>
> The coercion function defined for the ALTREP object will not be called by R
> when an assignment operation implicitly introduces coercion for a large
> ALTREP object.
>
> For example, If I create a vector of length 10, the ALTREP coercion
> function seems to work fine.
> ```
> > x <- 1:10
> > y <- wrap_altrep(x)
> > .Internal(inspect(y))
> @0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
> > y[1] <- 1.0
> Duplicating object
> Coercing object
> > .Internal(inspect(y))
> @0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
> ```
>
> However, if I create a vector of length 1024, R will give me a normal
> real-type vector
> ```
> > x <- 1:1024
> > y <- wrap_altrep(x)
> > .Internal(inspect(y))
> @0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
> > y[1] <- 1.0
> > .Internal(inspect(y))
> @0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0) 1,2,3,4,5,...
> ```
>
> Note that the duplicate function is also called for the first example. It
> seems like R completely ignores my ALTREP functions in the second example.
> I feel this might be designed on purpose, but I do not understand the
> reason behind it. Is there any reason why we are not consistent here? Here
> is my session info
>
> sessionInfo()
> R Under development (unstable) (2020-09-03 r79126)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> Best,
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Thu Oct  8 07:58:04 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Thu, 8 Oct 2020 13:58:04 +0800
Subject: [Rd] Coercion function does not work for the ALTREP object
In-Reply-To: <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>
References: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
 <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>
Message-ID: <CAGiFhPMLVNe7XWEWu=ioBTyq4XKm9A0PQZbj2jHxptO6OR4ikg@mail.gmail.com>

Hi Gabriel, here is a simple package for reproducing the problem.

https://github.com/Jiefei-Wang/testPkg

Best,
Jiefei

On Thu, Oct 8, 2020 at 5:04 AM Gabriel Becker <gabembecker at gmail.com> wrote:

> Jiefei,
>
> Where does the code for your altrep class live?
>
> Thanks,
> ~G
>
> On Wed, Oct 7, 2020 at 4:25 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>
>> Hi all,
>>
>> The coercion function defined for the ALTREP object will not be called by
>> R
>> when an assignment operation implicitly introduces coercion for a large
>> ALTREP object.
>>
>> For example, If I create a vector of length 10, the ALTREP coercion
>> function seems to work fine.
>> ```
>> > x <- 1:10
>> > y <- wrap_altrep(x)
>> > .Internal(inspect(y))
>> @0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
>> > y[1] <- 1.0
>> Duplicating object
>> Coercing object
>> > .Internal(inspect(y))
>> @0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
>> ```
>>
>> However, if I create a vector of length 1024, R will give me a normal
>> real-type vector
>> ```
>> > x <- 1:1024
>> > y <- wrap_altrep(x)
>> > .Internal(inspect(y))
>> @0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
>> > y[1] <- 1.0
>> > .Internal(inspect(y))
>> @0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0)
>> 1,2,3,4,5,...
>> ```
>>
>> Note that the duplicate function is also called for the first example. It
>> seems like R completely ignores my ALTREP functions in the second example.
>> I feel this might be designed on purpose, but I do not understand the
>> reason behind it. Is there any reason why we are not consistent here? Here
>> is my session info
>>
>> sessionInfo()
>> R Under development (unstable) (2020-09-03 r79126)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18362)
>>
>> Best,
>> Jiefei
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Oct  9 00:10:43 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 8 Oct 2020 17:10:43 -0500 (CDT)
Subject: [Rd] 
 [External] Re: Coercion function does not work for the ALTREP object
In-Reply-To: <CAGiFhPMLVNe7XWEWu=ioBTyq4XKm9A0PQZbj2jHxptO6OR4ikg@mail.gmail.com>
References: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
 <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>
 <CAGiFhPMLVNe7XWEWu=ioBTyq4XKm9A0PQZbj2jHxptO6OR4ikg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2010081658320.29383@luke-Latitude-7480>

For larger atomic vectors (currently >= 64 elements) the complex
assignment process tries to avoid duplicating when only attributes are
updated, This is done with an ALTREP wrapper. The differences in
whether the Duplicate method are called for smaller and larger vectors
are therefore as intended, Ideally there should be no difference for
Coerce. There is a difference because wrappers currently don't
delegate the Coerce method when the wrapped object is an ALTREP. I'll
look into whether that can be addressed without breaking things.

Best,

luke

On Thu, 8 Oct 2020, Jiefei Wang wrote:

> Hi Gabriel, here is a simple package for reproducing the problem.
>
> https://github.com/Jiefei-Wang/testPkg
>
> Best,
> Jiefei
>
> On Thu, Oct 8, 2020 at 5:04 AM Gabriel Becker <gabembecker at gmail.com> wrote:
>
>> Jiefei,
>>
>> Where does the code for your altrep class live?
>>
>> Thanks,
>> ~G
>>
>> On Wed, Oct 7, 2020 at 4:25 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>>
>>> Hi all,
>>>
>>> The coercion function defined for the ALTREP object will not be called by
>>> R
>>> when an assignment operation implicitly introduces coercion for a large
>>> ALTREP object.
>>>
>>> For example, If I create a vector of length 10, the ALTREP coercion
>>> function seems to work fine.
>>> ```
>>>> x <- 1:10
>>>> y <- wrap_altrep(x)
>>>> .Internal(inspect(y))
>>> @0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
>>>> y[1] <- 1.0
>>> Duplicating object
>>> Coercing object
>>>> .Internal(inspect(y))
>>> @0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
>>> ```
>>>
>>> However, if I create a vector of length 1024, R will give me a normal
>>> real-type vector
>>> ```
>>>> x <- 1:1024
>>>> y <- wrap_altrep(x)
>>>> .Internal(inspect(y))
>>> @0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
>>>> y[1] <- 1.0
>>>> .Internal(inspect(y))
>>> @0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0)
>>> 1,2,3,4,5,...
>>> ```
>>>
>>> Note that the duplicate function is also called for the first example. It
>>> seems like R completely ignores my ALTREP functions in the second example.
>>> I feel this might be designed on purpose, but I do not understand the
>>> reason behind it. Is there any reason why we are not consistent here? Here
>>> is my session info
>>>
>>> sessionInfo()
>>> R Under development (unstable) (2020-09-03 r79126)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> Best,
>>> Jiefei
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pd@|gd @end|ng |rom gm@||@com  Sat Oct 10 10:11:50 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sat, 10 Oct 2020 10:11:50 +0200
Subject: [Rd] R 4.0.3 is released
Message-ID: <67241C9F-68B4-4998-81B6-79019F9AB852@gmail.com>

The build system rolled up R-4.0.3.tar.gz (codename "Bunny-Wunnies Freak Out") this morning.

The list below details the changes in this release.

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.0.3.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 5be656453b81e9393e2a0c42688b04b8
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 71728ef32a09c5b9df36b496b52d5c8e
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = 8ecf46afa36c9aff9904aad5ca422c6d
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = bfbcfb2f4ef4416b635087160f965904
MD5 (R-4/R-4.0.3.tar.gz) = 8ecf46afa36c9aff9904aad5ca422c6d

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
4390543804392e072378b2d75cd3fb0d57e9885f9dc38ddd5a2ff780487b9d97  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
895ba3f810fd33d3be63deb6c4588be1f7ba3f5bf80e10ffeafc194221dd5ba9  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
09983a8a78d5fb6bc45d27b1c55f9ba5265f78fa54a55c13ae691f87c5bb9e0d  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
cd9666c09064b120655598c1ac792266ad20adb57c36aab4d094dedc7e480fa6  VERSION-INFO.dcf
09983a8a78d5fb6bc45d27b1c55f9ba5265f78fa54a55c13ae691f87c5bb9e0d  R-4/R-4.0.3.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.0.3:

  NEW FEATURES:

    * On platforms using configure option --with-internal-tzcode,
      additional values "internal" and (on macOS only) "macOS" are
      accepted for the environment variable TZDIR.  (See ?TZDIR.)

      On macOS, "macOS" is used by default if the system timezone
      database is a newer version than that in the R installation.

    * When install.packages(type = "source") fails to find a package in
      a repository it mentions package versions which are excluded by
      their R version requirement and links to hints on why a package
      might not be found.

    * The default value for options("timeout") can be set from
      enviromnent variable R_DEFAULT_INTERNET_TIMEOUT, still defaulting
      to 60 (seconds) if that is not set or invalid.

      This may be needed when child R processes are doing downloads,
      for example during the installation of source packages which
      download jars or other forms of data.

  LINK-TIME OPTIMIZATION on a UNIX-ALIKE:

    * There is now support for parallelized Link-Time Optimization
      (LTO) with GCC and for 'thin' LTO with clang _via_ setting the
      LTO macro.

    * There is support for setting a different LTO flag for the Fortran
      compiler, including to empty when mixing clang and gfortran (as
      on macOS).  See file config.site.

    * There is a new LTO_LD macro to set linker options for LTO
      compilation, for example to select an alternative linker or to
      parallelize thin LTO.

  DEPRECATED AND DEFUNCT:

    * The LINPACK argument to chol.default(), chol2inv(),
      solve.default() and svd() has been defunct since R 3.1.0.  Using
      it now gives a warning which will become an error in R 4.1.0.

  BUG FIXES:

    * The code mitigating stack overflow with PCRE regexps on very long
      strings is enabled for PCRE2 < 10.30 also when JIT is enabled,
      since stack overflows have been seen in that case.

    * Fix to correctly show the group labels in dotchart() (which where
      lost in the ylab improvement for R 4.0.0).

    * addmargins(*, ..) now also works when fn() is a local function,
      thanks to bug report and patch PR#17124 from Alex Bertram.

    * rank(x) and hence sort(x) now work when x is an object (as per
      is.object(x)) of type "raw" _and_ provides a valid `[` method,
      e.g., for gmp::as.bigz(.) numbers.

    * chisq.test(*, simulate.p.value=TRUE) and r2dtable() now work
      correctly for large table entries (in the millions).  Reported by
      Sebastian Meyer and investigated by more helpers in PR#16184.

    * Low-level socket read/write operations have been fixed to
      correctly signal communication errors. Previously, such errors
      could lead to a segfault due to invalid memory access. Reported
      and debugged by Dmitriy Selivanov in PR#17850.

    * quantile(x, pr) works more consistently for pr values slightly
      outside [0,1], thanks to Suharto Anggono's PR#17891.

      Further, quantile(x, prN, names=FALSE) now works even when prN
      contains NAs, thanks to Anggono's PR#17892.  Ditto for ordered
      factors or Date objects when type = 1 or 3, thanks to PR#17899.

    * Libcurl-based internet access, including curlGetHeaders(), was
      not respecting the "timeout" option.  If this causes
      unanticipated timeouts, consider increasing the default by
      setting R_DEFAULT_INTERNET_TIMEOUT.

    * as.Date(<char>) now also works with an initial "", thanks to
      Michael Chirico's PR#17909.

    * isS3stdGeneric(f) now detects an S3 generic also when it it is
      trace()d, thanks to Gabe Becker's PR#17917.

    * R_allocLD() has been fixed to return memory aligned for long
      double type PR#16534.

    * fisher.test() no longer segfaults when called again after its
      internal stack has been exceeded PR#17904.

    * Accessing a long vector represented by a compact integer sequence
      no longer segfaults (reported and debugged by Hugh Parsonage).

    * duplicated() now works also for strings with multiple encodings
      inside a single vector PR#17809.

    * phyper(11, 15, 0, 12, log.p=TRUE) no longer gives NaN; reported
      as PR#17271 by Alexey Stukalov.

    * Fix incorrect calculation in logLik.nls() PR#16100, patch from
      Sebastian Meyer.

    * A very old bug could cause a segfault in model.matrix() when
      terms involved logical variables.  Part of PR#17879.

    * model.frame.default() allowed data = 1, leading to involuntary
      variable capture (rest of PR#17879).

    * tar() no longer skips non-directory files, thanks to a patch by
      Sebastian Meyer, fixing the remaining part of PR#16716.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sat Oct 17 00:28:25 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 16 Oct 2020 17:28:25 -0500
Subject: [Rd] tools::package_dependencies problems
Message-ID: <7052c7bb-ab3c-7265-e062-bcbc3ef1cdba@prodsyse.com>

Hello, All:


	  tools::package_dependencies('Ecfun') failed to find how my 
development version of Ecfun was using rJava, which generated errors in 
"R CMD build Ecfun".  This is because package_dependencies by default 
uses CRAN and ignores locally installed packages.


	  What do you think about having this function check both locally 
installed and CRAN versions?


	  It can probably be done, but I don't see how at the moment.


	  Also, the traditional interpretation of a help file with Usage 
including an argument 'which = c("Depends", "Imports", "LinkingTo")' is 
that specifying nothing defaults to "Depends".  In this case, it 
defaults to "Imports".  Moreover, I don't see a way to trace "Suggests".


	  ???
	  Thanks,
	  Spencer Graves


From g@bembecker @end|ng |rom gm@||@com  Sat Oct 17 01:07:45 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 16 Oct 2020 16:07:45 -0700
Subject: [Rd] tools::package_dependencies problems
In-Reply-To: <7052c7bb-ab3c-7265-e062-bcbc3ef1cdba@prodsyse.com>
References: <7052c7bb-ab3c-7265-e062-bcbc3ef1cdba@prodsyse.com>
Message-ID: <CAD4oTHFLXU8tpYLAgqbPP43qrBrkmEttp3itsPoL-JgWJh_=JQ@mail.gmail.com>

Hi Spencer,

You just need an available.packages matrix which reflects the reality you
want to test against. There are probably various ways of getting one of
these, but switchr allows you to build repositories off of many things
including local directories, so you could do something like

> setwd('/Users/gabrielbecker/gabe/checkedout/rtables/')
> library(switchr)
> chooseCRANmirror(ind = 1L)
> crancontribs = contrib.url(options()$repos)
> man = PkgManifest(name = "switchr", url = "~/gabe/checkedout/switchr",
type = "local")
> loccontrib <- lazyRepo(man)

> avl = available.packages(c(loccontrib, crancontribs))
> head(avl[, c("Package", "Version", "Repository")])
         Package    Version
switchr  "switchr"  "0.14.3"
A3       "A3"       "1.0.0"
aaSEA    "aaSEA"    "1.1.0"
AATtools "AATtools" "0.0.1"
ABACUS   "ABACUS"   "1.0.0"
abbyyR   "abbyyR"   "0.5.5"
         Repository

switchr
 "file:///var/folders/14/z0rjkn8j0n5dj1lkdd4ng1600000gn/T/Rtmpe1zsSL/repo/src/contrib"
A3       "https://cloud.r-project.org/src/contrib"

aaSEA    "https://cloud.r-project.org/src/contrib"

AATtools "https://cloud.r-project.org/src/contrib"

ABACUS   "https://cloud.r-project.org/src/contrib"

abbyyR   "https://cloud.r-project.org/src/contrib"

And pass avl directly to package_dependencies


> tools::package_dependencies("switchr", db = avl)
$switchr
[1] "methods" "tools"   "RJSONIO" "RCurl"

The benefit here beyond just constructing the PACKAGES file for your one
package (which if you want to get clever is all available.packages is
actually going to need) is that switchr will allow you to install it if you
want as well. switchr also allows you to install from your local working
copies of multiple inter-related packages simultaneously by having a
manifest that has those working copies in it, if you are doing development
that crosses package boundaries.


This reminds me that I need to polish and push some utilities related to
local checkouts of packages, I'll try to do that soon.

Anyway, hope that helps as it is now,

Best,
~G

On Fri, Oct 16, 2020 at 3:28 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

> Hello, All:
>
>
>           tools::package_dependencies('Ecfun') failed to find how my
> development version of Ecfun was using rJava, which generated errors in
> "R CMD build Ecfun".  This is because package_dependencies by default
> uses CRAN and ignores locally installed packages.
>
>
>           What do you think about having this function check both locally
> installed and CRAN versions?
>
>
>           It can probably be done, but I don't see how at the moment.
>
>
>           Also, the traditional interpretation of a help file with Usage
> including an argument 'which = c("Depends", "Imports", "LinkingTo")' is
> that specifying nothing defaults to "Depends".  In this case, it
> defaults to "Imports".  Moreover, I don't see a way to trace "Suggests".
>
>
>           ???
>           Thanks,
>           Spencer Graves
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Sat Oct 17 01:23:43 2020
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Fri, 16 Oct 2020 16:23:43 -0700
Subject: [Rd] tools::package_dependencies problems
In-Reply-To: <7052c7bb-ab3c-7265-e062-bcbc3ef1cdba@prodsyse.com>
References: <7052c7bb-ab3c-7265-e062-bcbc3ef1cdba@prodsyse.com>
Message-ID: <CAHqSRuR2b4-ZLOjhzsRq6i9S0z6LjiPHdmdqGOyrinHATZbO0Q@mail.gmail.com>

Have you tried using the 'db' argument to tools::package_dependencies?
rbind the common columns of installed.packages() and available.packages()
and use that as the package database.
    installed <- installed.packages()
    available <- available.packages()
    commonCols <- intersect(colnames(installed),colnames(available))
    db <- rbind(installed[commonCols,], available[commonCols,])
    tools::package_dependencies("somePkg", db=db)

List the types of dependencies you want in the 'which' argument, e.g.
which=c("Depends","Imports","LinkingTo","Suggests").

In R-devel now (but not R-4.0.2 and I haven't downloaded 4.0.3 yet) you can
use nicknames for which ("strong"=DIL, "most"="strong"+"Suggests", or
"all"="most"+"Enhances") and can also use recursive=columnNames to use a
smaller set of columns when recursing.  Recursing with "Suggests" or
"Enhances" can give you a huge number of usually irrelevant packages.

On Fri, Oct 16, 2020 at 3:28 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

> Hello, All:
>
>
>           tools::package_dependencies('Ecfun') failed to find how my
> development version of Ecfun was using rJava, which generated errors in
> "R CMD build Ecfun".  This is because package_dependencies by default
> uses CRAN and ignores locally installed packages.
>
>
>           What do you think about having this function check both locally
> installed and CRAN versions?
>
>
>           It can probably be done, but I don't see how at the moment.
>
>
>           Also, the traditional interpretation of a help file with Usage
> including an argument 'which = c("Depends", "Imports", "LinkingTo")' is
> that specifying nothing defaults to "Depends".  In this case, it
> defaults to "Imports".  Moreover, I don't see a way to trace "Suggests".
>
>
>           ???
>           Thanks,
>           Spencer Graves
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From rdev @end|ng |rom mb706@com  Sat Oct 17 21:18:57 2020
From: rdev @end|ng |rom mb706@com (Martin)
Date: Sat, 17 Oct 2020 21:18:57 +0200
Subject: [Rd] sum() (and similar methods) should work for zero row
 data.frames
In-Reply-To: <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
References: <2d385fbb-6aec-4c8e-8447-b52a1b075e1e@www.fastmail.com>
 <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
Message-ID: <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>

The "Summary" group generics always throw errors for a data.frame with zero rows, for example:
> sum(data.frame(x = numeric(0)))
#> Error in FUN(X[[i]], ...) : 
#>   only defined on a data frame with all numeric variables
Same behaviour for min, max, any, all, ... . I believe this is inconsistent with what these methods do for other empty objects (vectors, matrices), where the return value is chosen to ensure transitivity: sum(numeric(0)) == 0.

The reason for this is that the return type of as.matrix() for empty (no rows or no columns) data.frame objects is always a matrix of type "logical". The Summary method for data.frame, in turn, throws an error when the data.frame, converted to a matrix, is not of numeric type.

I suggest two ways that make sum, min, max, ... more consistent. IMHO it would be fitting to implement both of these fixes, because they also make other things more consistent.

1. Make the return type of as.matrix() for zero-row data.frames consistent with the type that would have been returned, had the data.frame had more than zero rows. "as.matrix(data.frame(x = numeric(0)))" should then be numeric, if there is an empty "character" column the return matrix should be a character etc. This would make subsetting by row and conversion to matrix commute (except for row names sometimes):
> all.equal(as.matrix(df[rows, , drop = FALSE]), as.matrix(df)[rows, , drop = FALSE])
Furthermore, this change would make as.matrix.data.frame obey the documentation, which indicates that the coercion hierarchy is used for the return type.

2. Make the Summary.data.frame method accept data.frames that produce non-numeric matrices. Next to the main focus of this message, I believe it would e.g. be fitting to have any() and all() work on logical data.frame objects. The current behaviour is such that
> any(data.frame(x = 1))
#> [1] TRUE
#> Warning message:
#> In any(1, na.rm = FALSE) : coercing argument of type 'double' to logical
and
> any(data.frame(x = TRUE))
#> Error in FUN(X[[i]], ...) : 
#>   only defined on a data frame with all numeric variables
So a numeric data.frame warns about implicit coercion, while a logical data.frame (which would not need coercion) does not work at all.

(I feel more strongly about fixing 1. than 2., because I don't know the discussion that lead to the behaviour described in 2.)

Best,
Martin


From pd@|gd @end|ng |rom gm@||@com  Sun Oct 18 09:19:30 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 18 Oct 2020 09:19:30 +0200
Subject: [Rd] sum() (and similar methods) should work for zero row
 data.frames
In-Reply-To: <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>
References: <2d385fbb-6aec-4c8e-8447-b52a1b075e1e@www.fastmail.com>
 <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
 <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>
Message-ID: <99B179A6-4178-469F-9065-3631B908DBFB@gmail.com>

Hmm, yes, this is probably wrong. E.g., we are likely to get inconsistencies out of boundary cases like this

> a <- na.omit(airquality)
> sum(a)
[1] 37495.3
> sum(a[FALSE,])
Error in FUN(X[[i]], ...) : 
  only defined on a data frame with all numeric variables

Or, closer to an actual use case:

> sum(subset(a, Ozone>100))
[1] 3330.5
> sum(subset(a, Ozone>200))
Error in FUN(X[[i]], ...) : 
  only defined on a data frame with all numeric variables


However, given that numeric summaries generally treat logicals as 0/1, wouldn't it be easiest just to extend the check inside Summary.data.frame with "&& !is.logical(x)"?

> sum(as.matrix(a[FALSE,]))
[1] 0

-pd

> On 17 Oct 2020, at 21:18 , Martin <rdev at mb706.com> wrote:
> 
> The "Summary" group generics always throw errors for a data.frame with zero rows, for example:
>> sum(data.frame(x = numeric(0)))
> #> Error in FUN(X[[i]], ...) : 
> #>   only defined on a data frame with all numeric variables
> Same behaviour for min, max, any, all, ... . I believe this is inconsistent with what these methods do for other empty objects (vectors, matrices), where the return value is chosen to ensure transitivity: sum(numeric(0)) == 0.
> 
> The reason for this is that the return type of as.matrix() for empty (no rows or no columns) data.frame objects is always a matrix of type "logical". The Summary method for data.frame, in turn, throws an error when the data.frame, converted to a matrix, is not of numeric type.
> 
> I suggest two ways that make sum, min, max, ... more consistent. IMHO it would be fitting to implement both of these fixes, because they also make other things more consistent.
> 
> 1. Make the return type of as.matrix() for zero-row data.frames consistent with the type that would have been returned, had the data.frame had more than zero rows. "as.matrix(data.frame(x = numeric(0)))" should then be numeric, if there is an empty "character" column the return matrix should be a character etc. This would make subsetting by row and conversion to matrix commute (except for row names sometimes):
>> all.equal(as.matrix(df[rows, , drop = FALSE]), as.matrix(df)[rows, , drop = FALSE])
> Furthermore, this change would make as.matrix.data.frame obey the documentation, which indicates that the coercion hierarchy is used for the return type.
> 
> 2. Make the Summary.data.frame method accept data.frames that produce non-numeric matrices. Next to the main focus of this message, I believe it would e.g. be fitting to have any() and all() work on logical data.frame objects. The current behaviour is such that
>> any(data.frame(x = 1))
> #> [1] TRUE
> #> Warning message:
> #> In any(1, na.rm = FALSE) : coercing argument of type 'double' to logical
> and
>> any(data.frame(x = TRUE))
> #> Error in FUN(X[[i]], ...) : 
> #>   only defined on a data frame with all numeric variables
> So a numeric data.frame warns about implicit coercion, while a logical data.frame (which would not need coercion) does not work at all.
> 
> (I feel more strongly about fixing 1. than 2., because I don't know the discussion that lead to the behaviour described in 2.)
> 
> Best,
> Martin
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From g@bembecker @end|ng |rom gm@||@com  Sun Oct 18 21:49:00 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 18 Oct 2020 12:49:00 -0700
Subject: [Rd] sum() (and similar methods) should work for zero row
 data.frames
In-Reply-To: <99B179A6-4178-469F-9065-3631B908DBFB@gmail.com>
References: <2d385fbb-6aec-4c8e-8447-b52a1b075e1e@www.fastmail.com>
 <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
 <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>
 <99B179A6-4178-469F-9065-3631B908DBFB@gmail.com>
Message-ID: <CAD4oTHFV0N+eQGFDS-yrFUZG+8k01t_jmYc3z0MgheDwz4MEtw@mail.gmail.com>

Peter et al,

I had the same thought, in particular for any() and all(), which in as much
as they should work on data.frames in the first place (which to be
perfectly honest i do find quite debatable myself), should certainly work
on "logical" data.frames if they are going to work on "numeric" ones.

I can volunteer to prepare a patch if Martin (the reporter) did not want to
take a crack at it, and further if it is not already being done within
R-core.

Best,
~G

On Sun, Oct 18, 2020 at 12:19 AM peter dalgaard <pdalgd at gmail.com> wrote:

> Hmm, yes, this is probably wrong. E.g., we are likely to get
> inconsistencies out of boundary cases like this
>
> > a <- na.omit(airquality)
> > sum(a)
> [1] 37495.3
> > sum(a[FALSE,])
> Error in FUN(X[[i]], ...) :
>   only defined on a data frame with all numeric variables
>
> Or, closer to an actual use case:
>
> > sum(subset(a, Ozone>100))
> [1] 3330.5
> > sum(subset(a, Ozone>200))
> Error in FUN(X[[i]], ...) :
>   only defined on a data frame with all numeric variables
>
>
> However, given that numeric summaries generally treat logicals as 0/1,
> wouldn't it be easiest just to extend the check inside Summary.data.frame
> with "&& !is.logical(x)"?
>
> > sum(as.matrix(a[FALSE,]))
> [1] 0
>
> -pd
>
> > On 17 Oct 2020, at 21:18 , Martin <rdev at mb706.com> wrote:
> >
> > The "Summary" group generics always throw errors for a data.frame with
> zero rows, for example:
> >> sum(data.frame(x = numeric(0)))
> > #> Error in FUN(X[[i]], ...) :
> > #>   only defined on a data frame with all numeric variables
> > Same behaviour for min, max, any, all, ... . I believe this is
> inconsistent with what these methods do for other empty objects (vectors,
> matrices), where the return value is chosen to ensure transitivity:
> sum(numeric(0)) == 0.
> >
> > The reason for this is that the return type of as.matrix() for empty (no
> rows or no columns) data.frame objects is always a matrix of type
> "logical". The Summary method for data.frame, in turn, throws an error when
> the data.frame, converted to a matrix, is not of numeric type.
> >
> > I suggest two ways that make sum, min, max, ... more consistent. IMHO it
> would be fitting to implement both of these fixes, because they also make
> other things more consistent.
> >
> > 1. Make the return type of as.matrix() for zero-row data.frames
> consistent with the type that would have been returned, had the data.frame
> had more than zero rows. "as.matrix(data.frame(x = numeric(0)))" should
> then be numeric, if there is an empty "character" column the return matrix
> should be a character etc. This would make subsetting by row and conversion
> to matrix commute (except for row names sometimes):
> >> all.equal(as.matrix(df[rows, , drop = FALSE]), as.matrix(df)[rows, ,
> drop = FALSE])
> > Furthermore, this change would make as.matrix.data.frame obey the
> documentation, which indicates that the coercion hierarchy is used for the
> return type.
> >
> > 2. Make the Summary.data.frame method accept data.frames that produce
> non-numeric matrices. Next to the main focus of this message, I believe it
> would e.g. be fitting to have any() and all() work on logical data.frame
> objects. The current behaviour is such that
> >> any(data.frame(x = 1))
> > #> [1] TRUE
> > #> Warning message:
> > #> In any(1, na.rm = FALSE) : coercing argument of type 'double' to
> logical
> > and
> >> any(data.frame(x = TRUE))
> > #> Error in FUN(X[[i]], ...) :
> > #>   only defined on a data frame with all numeric variables
> > So a numeric data.frame warns about implicit coercion, while a logical
> data.frame (which would not need coercion) does not work at all.
> >
> > (I feel more strongly about fixing 1. than 2., because I don't know the
> discussion that lead to the behaviour described in 2.)
> >
> > Best,
> > Martin
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From rdev @end|ng |rom mb706@com  Sun Oct 18 22:14:55 2020
From: rdev @end|ng |rom mb706@com (mb706)
Date: Sun, 18 Oct 2020 22:14:55 +0200
Subject: [Rd] 
 =?utf-8?q?sum=28=29_=28and_similar_methods=29_should_work_f?=
 =?utf-8?q?or_zero_row_data=2Eframes?=
In-Reply-To: <CAD4oTHFV0N+eQGFDS-yrFUZG+8k01t_jmYc3z0MgheDwz4MEtw@mail.gmail.com>
References: <2d385fbb-6aec-4c8e-8447-b52a1b075e1e@www.fastmail.com>
 <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
 <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>
 <99B179A6-4178-469F-9065-3631B908DBFB@gmail.com>
 <CAD4oTHFV0N+eQGFDS-yrFUZG+8k01t_jmYc3z0MgheDwz4MEtw@mail.gmail.com>
Message-ID: <503b7e54-8369-4c49-91f8-558f48105a90@www.fastmail.com>

>From my side: it would be great if you (or R core) could prepare a patch, it would probably take me quite a bit longer than you since I don't have experience creating patches for R.

Best, Martin

On Sun, Oct 18, 2020, at 21:49, Gabriel Becker wrote:
> Peter et al,
> 
> I had the same thought, in particular for any() and all(), which in as 
> much as they should work on data.frames in the first place (which to be 
> perfectly honest i do find quite debatable myself), should certainly 
> work on "logical" data.frames if they are going to work on "numeric" 
> ones. 
> 
> I can volunteer to prepare a patch if Martin (the reporter) did not 
> want to take a crack at it, and further if it is not already being done 
> within R-core.
> 
> Best,
> ~G
> 
> On Sun, Oct 18, 2020 at 12:19 AM peter dalgaard <pdalgd at gmail.com> wrote:
> > Hmm, yes, this is probably wrong. E.g., we are likely to get inconsistencies out of boundary cases like this
> > 
> > > a <- na.omit(airquality)
> > > sum(a)
> > [1] 37495.3
> > > sum(a[FALSE,])
> > Error in FUN(X[[i]], ...) : 
> >   only defined on a data frame with all numeric variables
> > 
> > Or, closer to an actual use case:
> > 
> > > sum(subset(a, Ozone>100))
> > [1] 3330.5
> > > sum(subset(a, Ozone>200))
> > Error in FUN(X[[i]], ...) : 
> >   only defined on a data frame with all numeric variables
> > 
> > 
> > However, given that numeric summaries generally treat logicals as 0/1, wouldn't it be easiest just to extend the check inside Summary.data.frame with "&& !is.logical(x)"?
> > 
> > > sum(as.matrix(a[FALSE,]))
> > [1] 0
> > 
> > -pd
> > 
> > > On 17 Oct 2020, at 21:18 , Martin <rdev at mb706.com> wrote:
> > > 
> > > The "Summary" group generics always throw errors for a data.frame with zero rows, for example:
> > >> sum(data.frame(x = numeric(0)))
> > > #> Error in FUN(X[[i]], ...) : 
> > > #>   only defined on a data frame with all numeric variables
> > > Same behaviour for min, max, any, all, ... . I believe this is inconsistent with what these methods do for other empty objects (vectors, matrices), where the return value is chosen to ensure transitivity: sum(numeric(0)) == 0.
> > > 
> > > The reason for this is that the return type of as.matrix() for empty (no rows or no columns) data.frame objects is always a matrix of type "logical". The Summary method for data.frame, in turn, throws an error when the data.frame, converted to a matrix, is not of numeric type.
> > > 
> > > I suggest two ways that make sum, min, max, ... more consistent. IMHO it would be fitting to implement both of these fixes, because they also make other things more consistent.
> > > 
> > > 1. Make the return type of as.matrix() for zero-row data.frames consistent with the type that would have been returned, had the data.frame had more than zero rows. "as.matrix(data.frame(x = numeric(0)))" should then be numeric, if there is an empty "character" column the return matrix should be a character etc. This would make subsetting by row and conversion to matrix commute (except for row names sometimes):
> > >> all.equal(as.matrix(df[rows, , drop = FALSE]), as.matrix(df)[rows, , drop = FALSE])
> > > Furthermore, this change would make as.matrix.data.frame obey the documentation, which indicates that the coercion hierarchy is used for the return type.
> > > 
> > > 2. Make the Summary.data.frame method accept data.frames that produce non-numeric matrices. Next to the main focus of this message, I believe it would e.g. be fitting to have any() and all() work on logical data.frame objects. The current behaviour is such that
> > >> any(data.frame(x = 1))
> > > #> [1] TRUE
> > > #> Warning message:
> > > #> In any(1, na.rm = FALSE) : coercing argument of type 'double' to logical
> > > and
> > >> any(data.frame(x = TRUE))
> > > #> Error in FUN(X[[i]], ...) : 
> > > #>   only defined on a data frame with all numeric variables
> > > So a numeric data.frame warns about implicit coercion, while a logical data.frame (which would not need coercion) does not work at all.
> > > 
> > > (I feel more strongly about fixing 1. than 2., because I don't know the discussion that lead to the behaviour described in 2.)
> > > 
> > > Best,
> > > Martin
> > > 
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > -- 
> > Peter Dalgaard, Professor,
> > Center for Statistics, Copenhagen Business School
> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > Phone: (+45)38153501
> > Office: A 4.23
> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Oct 19 06:01:24 2020
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 19 Oct 2020 00:01:24 -0400
Subject: [Rd] usage of #import in grDevices/src/qdCocoa.h
Message-ID: <CAPRVBcw1suxv7Wi7-Zfzv6OGgrG7L7y=KDXV4p9ThF3P5rR65g@mail.gmail.com>

I happened to notice that this header file uses

#import <Cocoa/Cocoa.h>

This is the first time I came across the preprocessor directive #import;
the first thing I found about it is this Q&A suggesting it's not portable
nor standard C:

https://stackoverflow.com/q/39280248/3576984

On the other hand, this exact invocation seems pretty common on GitHub

https://github.com/search?l=C&q=%22%23import+%3CCocoa%2FCocoa.h%3E%22&type=Code

I don't see much in the way of relevant documentation for Cocoa besides
stuff like this page from 2001:

http://cocoadevcentral.com/articles/000031.php

Is this something that should be updated to use #include? Other packages
appear to have done so, e.g. from GitHub:

https://github.com/search?q=%22%23include+cocoa%2Fcocoa.h%22&type=code

Michael Chirico

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Oct 19 08:10:28 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 19 Oct 2020 07:10:28 +0100
Subject: [Rd] usage of #import in grDevices/src/qdCocoa.h
In-Reply-To: <CAPRVBcw1suxv7Wi7-Zfzv6OGgrG7L7y=KDXV4p9ThF3P5rR65g@mail.gmail.com>
References: <CAPRVBcw1suxv7Wi7-Zfzv6OGgrG7L7y=KDXV4p9ThF3P5rR65g@mail.gmail.com>
Message-ID: <CABtg=Kk1FP+w4vuFMpFhBDVP76iMtS8XU_ueiY87K44A-mmxPQ@mail.gmail.com>

On Mon, Oct 19, 2020 at 5:02 AM Michael Chirico
<michaelchirico4 at gmail.com> wrote:
>
> I happened to notice that this header file uses
>
> #import <Cocoa/Cocoa.h>
>
> This is the first time I came across the preprocessor directive #import;
> the first thing I found about it is this Q&A suggesting it's not portable
> nor standard C:

The Cocoa API is in Objective-C and #import is part of Objective-C.

[...]
> I don't see much in the way of relevant documentation for Cocoa besides
> stuff like this page from 2001:

Apple has the Cocoa docs, e.g. at
https://developer.apple.com/documentation/foundation

Gabor

[...]


From @zwj|08 @end|ng |rom gm@||@com  Mon Oct 19 10:12:29 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Mon, 19 Oct 2020 16:12:29 +0800
Subject: [Rd] Is there any way to check the class of an ALTREP?
Message-ID: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>

Hi all,

I would like to determine if an ALTREP object is from my package, I see
there is a function `ALTREP_CLASS` defined in RInternal.h but its return
value is neither a `R_altrep_class_t` object nor an STRSXP representing a
class name. I do not know how to correctly use it. Any suggestions?

Thanks,
Jiefei

	[[alternative HTML version deleted]]


From boennecd @end|ng |rom gm@||@com  Mon Oct 19 10:22:45 2020
From: boennecd @end|ng |rom gm@||@com (Benjamin Christoffersen)
Date: Mon, 19 Oct 2020 10:22:45 +0200
Subject: [Rd] Is there any way to check the class of an ALTREP?
In-Reply-To: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>
References: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>
Message-ID: <CAHHSL8syE=t0UjD7BPBV2FLEQ3bJcfub7rVCyeb1f_s=q4MDmQ@mail.gmail.com>

It seems as if you can you use the ALTREP macro as done in this
package: https://github.com/Jiefei-Wang/SharedObject/blob/804b6ac58c63a4bae95343ab43e8b1547b07ee6b/src/C_interface.cpp#L185

and in base R: https://github.com/wch/r-source/blob/54fbdca9d3fc63437d9e697f442d32732fb4f443/src/include/Rinlinedfuns.h#L118

The macro is defined here in Rinternals.h:
https://github.com/wch/r-source/blob/abb550c99b3927e5fc03d12f1a8e7593fddc04d2/src/include/Rinternals.h#L325

Den man. 19. okt. 2020 kl. 10.13 skrev Jiefei Wang <szwjf08 at gmail.com>:
>
> Hi all,
>
> I would like to determine if an ALTREP object is from my package, I see
> there is a function `ALTREP_CLASS` defined in RInternal.h but its return
> value is neither a `R_altrep_class_t` object nor an STRSXP representing a
> class name. I do not know how to correctly use it. Any suggestions?
>
> Thanks,
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From toth@dene@ @end|ng |rom kogentum@hu  Mon Oct 19 11:25:06 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Mon, 19 Oct 2020 11:25:06 +0200
Subject: [Rd] Is there any way to check the class of an ALTREP?
In-Reply-To: <CAHHSL8syE=t0UjD7BPBV2FLEQ3bJcfub7rVCyeb1f_s=q4MDmQ@mail.gmail.com>
References: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>
 <CAHHSL8syE=t0UjD7BPBV2FLEQ3bJcfub7rVCyeb1f_s=q4MDmQ@mail.gmail.com>
Message-ID: <3a0661be-3c29-cb60-1684-e3493bbbf1f8@kogentum.hu>

Benjamin,

You happened to send a link which points to the OP's own package :) I 
think Jiefei would like to know how one can "officially" determine if an 
arbitrary ALTERP object belongs to a class that he owns.

Regards,
Denes


On 10/19/20 10:22 AM, Benjamin Christoffersen wrote:
> It seems as if you can you use the ALTREP macro as done in this
> package: https://github.com/Jiefei-Wang/SharedObject/blob/804b6ac58c63a4bae95343ab43e8b1547b07ee6b/src/C_interface.cpp#L185
> 
> and in base R: https://github.com/wch/r-source/blob/54fbdca9d3fc63437d9e697f442d32732fb4f443/src/include/Rinlinedfuns.h#L118
> 
> The macro is defined here in Rinternals.h:
> https://github.com/wch/r-source/blob/abb550c99b3927e5fc03d12f1a8e7593fddc04d2/src/include/Rinternals.h#L325
> 
> Den man. 19. okt. 2020 kl. 10.13 skrev Jiefei Wang <szwjf08 at gmail.com>:
>>
>> Hi all,
>>
>> I would like to determine if an ALTREP object is from my package, I see
>> there is a function `ALTREP_CLASS` defined in RInternal.h but its return
>> value is neither a `R_altrep_class_t` object nor an STRSXP representing a
>> class name. I do not know how to correctly use it. Any suggestions?
>>
>> Thanks,
>> Jiefei
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From boennecd @end|ng |rom gm@||@com  Mon Oct 19 11:38:33 2020
From: boennecd @end|ng |rom gm@||@com (Benjamin Christoffersen)
Date: Mon, 19 Oct 2020 11:38:33 +0200
Subject: [Rd] Is there any way to check the class of an ALTREP?
In-Reply-To: <3a0661be-3c29-cb60-1684-e3493bbbf1f8@kogentum.hu>
References: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>
 <CAHHSL8syE=t0UjD7BPBV2FLEQ3bJcfub7rVCyeb1f_s=q4MDmQ@mail.gmail.com>
 <3a0661be-3c29-cb60-1684-e3493bbbf1f8@kogentum.hu>
Message-ID: <CAHHSL8sKUq2Bd47=E3mX+7kfRQFVjq+CKYJDUkVM9+2yWXK93Q@mail.gmail.com>

> You happened to send a link which points to the OP's own package :) I
> think Jiefei would like to know how one can "officially" determine if an
> arbitrary ALTERP object belongs to a class that he owns.
Argh, I am sorry! I did not notice that. My best bet for what I
thought the question was is section 1.1.2 of R Internals where they
note that: `unsigned int alt : 1; /* is this an ALTREP object? */`

This is also what the ALTREP macro checks. However, I also did not
notice the "... if an ALTREP object is from my package" part. I am
sorry.

Sincerely Yours,
Benjamin

Den man. 19. okt. 2020 kl. 11.25 skrev D?nes T?th <toth.denes at kogentum.hu>:
>
> Benjamin,
>
> You happened to send a link which points to the OP's own package :) I
> think Jiefei would like to know how one can "officially" determine if an
> arbitrary ALTERP object belongs to a class that he owns.
>
> Regards,
> Denes
>
>
> On 10/19/20 10:22 AM, Benjamin Christoffersen wrote:
> > It seems as if you can you use the ALTREP macro as done in this
> > package: https://github.com/Jiefei-Wang/SharedObject/blob/804b6ac58c63a4bae95343ab43e8b1547b07ee6b/src/C_interface.cpp#L185
> >
> > and in base R: https://github.com/wch/r-source/blob/54fbdca9d3fc63437d9e697f442d32732fb4f443/src/include/Rinlinedfuns.h#L118
> >
> > The macro is defined here in Rinternals.h:
> > https://github.com/wch/r-source/blob/abb550c99b3927e5fc03d12f1a8e7593fddc04d2/src/include/Rinternals.h#L325
> >
> > Den man. 19. okt. 2020 kl. 10.13 skrev Jiefei Wang <szwjf08 at gmail.com>:
> >>
> >> Hi all,
> >>
> >> I would like to determine if an ALTREP object is from my package, I see
> >> there is a function `ALTREP_CLASS` defined in RInternal.h but its return
> >> value is neither a `R_altrep_class_t` object nor an STRSXP representing a
> >> class name. I do not know how to correctly use it. Any suggestions?
> >>
> >> Thanks,
> >> Jiefei
> >>
> >>          [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >


From @zwj|08 @end|ng |rom gm@||@com  Mon Oct 19 14:37:11 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Mon, 19 Oct 2020 20:37:11 +0800
Subject: [Rd] Is there any way to check the class of an ALTREP?
In-Reply-To: <CAHHSL8sKUq2Bd47=E3mX+7kfRQFVjq+CKYJDUkVM9+2yWXK93Q@mail.gmail.com>
References: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>
 <CAHHSL8syE=t0UjD7BPBV2FLEQ3bJcfub7rVCyeb1f_s=q4MDmQ@mail.gmail.com>
 <3a0661be-3c29-cb60-1684-e3493bbbf1f8@kogentum.hu>
 <CAHHSL8sKUq2Bd47=E3mX+7kfRQFVjq+CKYJDUkVM9+2yWXK93Q@mail.gmail.com>
Message-ID: <CAGiFhPMaGz6CQebsUwrHQDrzMja68VAYHMtOv-jcS0s2zAwjKQ@mail.gmail.com>

Thank Denes for the clarification, glad to see my package got one citation
from my own question:) Also, thank Benjamin
for sending many useful documents.

Actually, the question is related to the SharedObject package that Benjamin
has pointed to. I wanna
avoid sharing an object that has already been shared, so I need to check
whether an object is an ALTREP
that is defined in my package. Since the ALTREP definition involves an `
R_altrep_class_t` object and a
 class name, I will expect to see a method defined in R to retrieve such
information. I hope this can clarify my question.

Best,
Jiefei

On Mon, Oct 19, 2020 at 5:38 PM Benjamin Christoffersen <boennecd at gmail.com>
wrote:

> > You happened to send a link which points to the OP's own package :) I
> > think Jiefei would like to know how one can "officially" determine if an
> > arbitrary ALTERP object belongs to a class that he owns.
> Argh, I am sorry! I did not notice that. My best bet for what I
> thought the question was is section 1.1.2 of R Internals where they
> note that: `unsigned int alt : 1; /* is this an ALTREP object? */`
>
> This is also what the ALTREP macro checks. However, I also did not
> notice the "... if an ALTREP object is from my package" part. I am
> sorry.
>
> Sincerely Yours,
> Benjamin
>
> Den man. 19. okt. 2020 kl. 11.25 skrev D?nes T?th <toth.denes at kogentum.hu
> >:
> >
> > Benjamin,
> >
> > You happened to send a link which points to the OP's own package :) I
> > think Jiefei would like to know how one can "officially" determine if an
> > arbitrary ALTERP object belongs to a class that he owns.
> >
> > Regards,
> > Denes
> >
> >
> > On 10/19/20 10:22 AM, Benjamin Christoffersen wrote:
> > > It seems as if you can you use the ALTREP macro as done in this
> > > package:
> https://github.com/Jiefei-Wang/SharedObject/blob/804b6ac58c63a4bae95343ab43e8b1547b07ee6b/src/C_interface.cpp#L185
> > >
> > > and in base R:
> https://github.com/wch/r-source/blob/54fbdca9d3fc63437d9e697f442d32732fb4f443/src/include/Rinlinedfuns.h#L118
> > >
> > > The macro is defined here in Rinternals.h:
> > >
> https://github.com/wch/r-source/blob/abb550c99b3927e5fc03d12f1a8e7593fddc04d2/src/include/Rinternals.h#L325
> > >
> > > Den man. 19. okt. 2020 kl. 10.13 skrev Jiefei Wang <szwjf08 at gmail.com
> >:
> > >>
> > >> Hi all,
> > >>
> > >> I would like to determine if an ALTREP object is from my package, I
> see
> > >> there is a function `ALTREP_CLASS` defined in RInternal.h but its
> return
> > >> value is neither a `R_altrep_class_t` object nor an STRSXP
> representing a
> > >> class name. I do not know how to correctly use it. Any suggestions?
> > >>
> > >> Thanks,
> > >> Jiefei
> > >>
> > >>          [[alternative HTML version deleted]]
> > >>
> > >> ______________________________________________
> > >> R-devel at r-project.org mailing list
> > >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Mon Oct 19 16:05:52 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Mon, 19 Oct 2020 22:05:52 +0800
Subject: [Rd] Is there any way to check the class of an ALTREP?
In-Reply-To: <CAGiFhPMaGz6CQebsUwrHQDrzMja68VAYHMtOv-jcS0s2zAwjKQ@mail.gmail.com>
References: <CAGiFhPMB2YsvNgMJyvdGf8cx5yHiNi3Kbx3cas0BYsCu6=Mp=Q@mail.gmail.com>
 <CAHHSL8syE=t0UjD7BPBV2FLEQ3bJcfub7rVCyeb1f_s=q4MDmQ@mail.gmail.com>
 <3a0661be-3c29-cb60-1684-e3493bbbf1f8@kogentum.hu>
 <CAHHSL8sKUq2Bd47=E3mX+7kfRQFVjq+CKYJDUkVM9+2yWXK93Q@mail.gmail.com>
 <CAGiFhPMaGz6CQebsUwrHQDrzMja68VAYHMtOv-jcS0s2zAwjKQ@mail.gmail.com>
Message-ID: <CAGiFhPNDZt=_8U+Ssna3J434EoqBHbNGiVoBGbddUyLrbwaeTg@mail.gmail.com>

Hi all,

By looking at the implementation of R's wrapper. I found a function `
R_altrep_inherits` that can check whether an object belongs to an ALTREP
class. Even though it is a little different from what I am looking for, but
it should be satisfactory for my purpose. I will suspect there is no such
function in R to get the class of an ALTREP object for the SEXP struct is
very compact and this less-important information might not be stored when
an ALTREP object is created.

Best,
Jiefei

On Mon, Oct 19, 2020 at 8:37 PM Jiefei Wang <szwjf08 at gmail.com> wrote:

> Thank Denes for the clarification, glad to see my package got one citation
> from my own question:) Also, thank Benjamin
> for sending many useful documents.
>
> Actually, the question is related to the SharedObject package that
> Benjamin has pointed to. I wanna
> avoid sharing an object that has already been shared, so I need to check
> whether an object is an ALTREP
> that is defined in my package. Since the ALTREP definition involves an `
> R_altrep_class_t` object and a
>  class name, I will expect to see a method defined in R to retrieve such
> information. I hope this can clarify my question.
>
> Best,
> Jiefei
>
> On Mon, Oct 19, 2020 at 5:38 PM Benjamin Christoffersen <
> boennecd at gmail.com> wrote:
>
>> > You happened to send a link which points to the OP's own package :) I
>> > think Jiefei would like to know how one can "officially" determine if an
>> > arbitrary ALTERP object belongs to a class that he owns.
>> Argh, I am sorry! I did not notice that. My best bet for what I
>> thought the question was is section 1.1.2 of R Internals where they
>> note that: `unsigned int alt : 1; /* is this an ALTREP object? */`
>>
>> This is also what the ALTREP macro checks. However, I also did not
>> notice the "... if an ALTREP object is from my package" part. I am
>> sorry.
>>
>> Sincerely Yours,
>> Benjamin
>>
>> Den man. 19. okt. 2020 kl. 11.25 skrev D?nes T?th <toth.denes at kogentum.hu
>> >:
>> >
>> > Benjamin,
>> >
>> > You happened to send a link which points to the OP's own package :) I
>> > think Jiefei would like to know how one can "officially" determine if an
>> > arbitrary ALTERP object belongs to a class that he owns.
>> >
>> > Regards,
>> > Denes
>> >
>> >
>> > On 10/19/20 10:22 AM, Benjamin Christoffersen wrote:
>> > > It seems as if you can you use the ALTREP macro as done in this
>> > > package:
>> https://github.com/Jiefei-Wang/SharedObject/blob/804b6ac58c63a4bae95343ab43e8b1547b07ee6b/src/C_interface.cpp#L185
>> > >
>> > > and in base R:
>> https://github.com/wch/r-source/blob/54fbdca9d3fc63437d9e697f442d32732fb4f443/src/include/Rinlinedfuns.h#L118
>> > >
>> > > The macro is defined here in Rinternals.h:
>> > >
>> https://github.com/wch/r-source/blob/abb550c99b3927e5fc03d12f1a8e7593fddc04d2/src/include/Rinternals.h#L325
>> > >
>> > > Den man. 19. okt. 2020 kl. 10.13 skrev Jiefei Wang <szwjf08 at gmail.com
>> >:
>> > >>
>> > >> Hi all,
>> > >>
>> > >> I would like to determine if an ALTREP object is from my package, I
>> see
>> > >> there is a function `ALTREP_CLASS` defined in RInternal.h but its
>> return
>> > >> value is neither a `R_altrep_class_t` object nor an STRSXP
>> representing a
>> > >> class name. I do not know how to correctly use it. Any suggestions?
>> > >>
>> > >> Thanks,
>> > >> Jiefei
>> > >>
>> > >>          [[alternative HTML version deleted]]
>> > >>
>> > >> ______________________________________________
>> > >> R-devel at r-project.org mailing list
>> > >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> > >
>> > > ______________________________________________
>> > > R-devel at r-project.org mailing list
>> > > https://stat.ethz.ch/mailman/listinfo/r-devel
>> > >
>>
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Oct 20 18:36:37 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 20 Oct 2020 18:36:37 +0200
Subject: [Rd] sum() (and similar methods) should work for zero row
 data.frames
In-Reply-To: <503b7e54-8369-4c49-91f8-558f48105a90@www.fastmail.com>
References: <2d385fbb-6aec-4c8e-8447-b52a1b075e1e@www.fastmail.com>
 <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
 <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>
 <99B179A6-4178-469F-9065-3631B908DBFB@gmail.com>
 <CAD4oTHFV0N+eQGFDS-yrFUZG+8k01t_jmYc3z0MgheDwz4MEtw@mail.gmail.com>
 <503b7e54-8369-4c49-91f8-558f48105a90@www.fastmail.com>
Message-ID: <24463.4629.646167.527915@stat.math.ethz.ch>

>>>>> mb706  
>>>>>     on Sun, 18 Oct 2020 22:14:55 +0200 writes:

    >> From my side: it would be great if you (or R core) could prepare a patch, it would probably take me quite a bit longer than you since I don't have experience creating patches for R.

    > Best, Martin

Basically, just

1.  svn co https://svn.r-project.org/R/trunk  R-devel

2.  inside the R-devel source tree, find  src/library/base/R/dataframe.R
    make the *minimal* changes there,

    (then also add some regression tests and update the help :-)

3.  inside R-devel, do

        svn diff -x -ubw  >  mb706.patch

4.  you've got the patch file  mb706.patch  which you could
    attach to a bug report  on R's bugzilla

    (once you've got an account there ...
     As you've asked for that *and* as you've proven your good
     judgment about "true bug" vs. "not what I expected",
     I'll create such an account for you now, in spite of the 
     fact that I'd still like to know a bit more than "Martin
     mb706" about you  ...)

The changes have been committed to R-devel a quarter of an hour ago.
We will keep them in R-devel (currently planned to become R 
4.1.0 in spring 2021), and not port to the R-4.0.z branch, as
the change is something like an API change, and also because
nobody had ever reported this as an issue to our knowledge.

Thank you, Martin B706 for bringing the issue up,  and Gabe and Peter
for chiming in !!

Best regards,
Martin Maechler
ETH Zurich  and  R core team
    

    > On Sun, Oct 18, 2020, at 21:49, Gabriel Becker wrote:
    >> Peter et al,
    >> 
    >> I had the same thought, in particular for any() and all(), which in as 
    >> much as they should work on data.frames in the first place (which to be 
    >> perfectly honest i do find quite debatable myself), should certainly 
    >> work on "logical" data.frames if they are going to work on "numeric" 
    >> ones. 
    >> 
    >> I can volunteer to prepare a patch if Martin (the reporter) did not 
    >> want to take a crack at it, and further if it is not already being done 
    >> within R-core.
    >> 
    >> Best,
    >> ~G
    >> 
    >> On Sun, Oct 18, 2020 at 12:19 AM peter dalgaard <pdalgd at gmail.com> wrote:
    >> > Hmm, yes, this is probably wrong. E.g., we are likely to get inconsistencies out of boundary cases like this
    >> > 
    >> > > a <- na.omit(airquality)
    >> > > sum(a)
    >> > [1] 37495.3
    >> > > sum(a[FALSE,])
    >> > Error in FUN(X[[i]], ...) : 
    >> >   only defined on a data frame with all numeric variables
    >> > 
    >> > Or, closer to an actual use case:
    >> > 
    >> > > sum(subset(a, Ozone>100))
    >> > [1] 3330.5
    >> > > sum(subset(a, Ozone>200))
    >> > Error in FUN(X[[i]], ...) : 
    >> >   only defined on a data frame with all numeric variables
    >> > 
    >> > 
    >> > However, given that numeric summaries generally treat logicals as 0/1, wouldn't it be easiest just to extend the check inside Summary.data.frame with "&& !is.logical(x)"?
    >> > 
    >> > > sum(as.matrix(a[FALSE,]))
    >> > [1] 0
    >> > 
    >> > -pd
    >> > 
    >> > > On 17 Oct 2020, at 21:18 , Martin <rdev at mb706.com> wrote:
    >> > > 
    >> > > The "Summary" group generics always throw errors for a data.frame with zero rows, for example:
    >> > >> sum(data.frame(x = numeric(0)))
    >> > > #> Error in FUN(X[[i]], ...) : 
    >> > > #>   only defined on a data frame with all numeric variables
    >> > > Same behaviour for min, max, any, all, ... . I believe this is inconsistent with what these methods do for other empty objects (vectors, matrices), where the return value is chosen to ensure transitivity: sum(numeric(0)) == 0.
    >> > > 
    >> > > The reason for this is that the return type of as.matrix() for empty (no rows or no columns) data.frame objects is always a matrix of type "logical". The Summary method for data.frame, in turn, throws an error when the data.frame, converted to a matrix, is not of numeric type.
    >> > > 
    >> > > I suggest two ways that make sum, min, max, ... more consistent. IMHO it would be fitting to implement both of these fixes, because they also make other things more consistent.
    >> > > 
    >> > > 1. Make the return type of as.matrix() for zero-row data.frames consistent with the type that would have been returned, had the data.frame had more than zero rows. "as.matrix(data.frame(x = numeric(0)))" should then be numeric, if there is an empty "character" column the return matrix should be a character etc. This would make subsetting by row and conversion to matrix commute (except for row names sometimes):
    >> > >> all.equal(as.matrix(df[rows, , drop = FALSE]), as.matrix(df)[rows, , drop = FALSE])
    >> > > Furthermore, this change would make as.matrix.data.frame obey the documentation, which indicates that the coercion hierarchy is used for the return type.
    >> > > 
    >> > > 2. Make the Summary.data.frame method accept data.frames that produce non-numeric matrices. Next to the main focus of this message, I believe it would e.g. be fitting to have any() and all() work on logical data.frame objects. The current behaviour is such that
    >> > >> any(data.frame(x = 1))
    >> > > #> [1] TRUE
    >> > > #> Warning message:
    >> > > #> In any(1, na.rm = FALSE) : coercing argument of type 'double' to logical
    >> > > and
    >> > >> any(data.frame(x = TRUE))
    >> > > #> Error in FUN(X[[i]], ...) : 
    >> > > #>   only defined on a data frame with all numeric variables
    >> > > So a numeric data.frame warns about implicit coercion, while a logical data.frame (which would not need coercion) does not work at all.
    >> > > 
    >> > > (I feel more strongly about fixing 1. than 2., because I don't know the discussion that lead to the behaviour described in 2.)
    >> > > 
    >> > > Best,
    >> > > Martin
    >> > > 
    >> > > ______________________________________________
    >> > > R-devel at r-project.org mailing list
    >> > > https://stat.ethz.ch/mailman/listinfo/r-devel
    >> > 
    >> > -- 
    >> > Peter Dalgaard, Professor,
    >> > Center for Statistics, Copenhagen Business School
    >> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    >> > Phone: (+45)38153501
    >> > Office: A 4.23
    >> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
    >> > 
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Fri Oct 23 10:28:38 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Fri, 23 Oct 2020 10:28:38 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <CAC2h7uv=Ks8-8Dm4XbAUOphM3TJc8UJGyD2+DTvVgs6mVDF9Rg@mail.gmail.com>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
 <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
 <CAC2h7uv=Ks8-8Dm4XbAUOphM3TJc8UJGyD2+DTvVgs6mVDF9Rg@mail.gmail.com>
Message-ID: <CAC2h7usvDomT3LWwyaGcgE73dmvv8ArUcUMe+AtjW+X_KC+2dg@mail.gmail.com>

So let me try to raise this issue once more, and perhaps be more clear
about what I think the issue is..

In my opinion there is now a bug in
  make check
in R-development (tested today with r79361). As I see it, I specify a
reasonable TZ environment variable and this leads to make check emitting an
error.

Best,
Kasper

On Fri, Oct 2, 2020 at 11:28 AM Kasper Daniel Hansen <
kasperdanielhansen at gmail.com> wrote:

> Yes, the potential issue I see is that
>   make check
> fails when I explicitly set TZ. However, I set it to be the same as what
> the system reports when I login.
>
> Details: The system (RHEL) I am working on has
> $ strings /etc/localtime | tail -n 1
> EST5EDT,M3.2.0,M11.1.0
> $ date +%Z
> EDT
> $ echo $TZ
> US/Eastern
>
>
>
> On Fri, Oct 2, 2020 at 9:48 AM Sebastian Meyer <seb.meyer at fau.de> wrote:
>
>> Thank you for the report. In R-devel, all.equal.POSIXt() by default
>> reports inconsistent time zones. Previously,
>>
>> > x <- Sys.time()
>> > all.equal(x, as.POSIXlt(x, tz = "EST5EDT"))
>>
>> would return TRUE. To ignore the time zone attributes in R-devel, the
>> argument 'check.tzone = FALSE' needs to be used.
>>
>> That said, I can reproduce the 'make check' failure in R-devel on Ubuntu
>> Linux when TZ is set, even if it is set to the system time zone:
>>
>> $ export TZ=Europe/Berlin
>> $ make check
>> [...]
>> > running code in '../../tests/reg-tests-2.R' ... OK
>> >   comparing 'reg-tests-2.Rout' to '../../tests/reg-tests-2.Rout.save'
>> ...7335c7335
>> > < [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
>> > ---
>> >> [1] TRUE
>>
>>
>> Compare the following two sessions:
>>
>> > R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time();
>> all.equal(x, as.POSIXlt(x))'
>> [1] "Europe/Berlin"
>> [1] TRUE
>>
>> > TZ='Europe/Berlin' R-devel --vanilla --no-echo -e 'Sys.timezone(); x <-
>> Sys.time(); all.equal(x, as.POSIXlt(x))'
>> [1] "Europe/Berlin"
>> [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
>>
>>
>> So as.POSIXlt() sets a 'tzone' attribute if TZ is set, but this
>> behaviour is not new. Even with old R 3.6.3, I see
>>
>> > R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
>> [1] ""     "CET"  "CEST"
>>
>> > TZ='Europe/Berlin' R-3.6.3 --vanilla --slave -e
>> 'attr(as.POSIXlt(Sys.time()), "tzone")'
>> [1] "Europe/Berlin" "CET"           "CEST"
>>
>> This might be system-specific.
>>
>> I suggest to modify the test as attached for make check to pass in this
>> setting.
>>
>> Best regards,
>>
>>         Sebastian
>>
>>
>> Am 01.10.20 um 20:31 schrieb Kasper Daniel Hansen:
>> > The return value of Sys.time() today with a timezone of US/Eastern is
>> > unchanged between 4.0.3-patched and devel, but on devel the following
>> test
>> > fails
>> >   all.equal(x, as.POSIXlt(x))
>> > with
>> >   x = Sys.time()
>> >
>> > This means that devel does not complete make tests (failure on
>> > tests/reg-tests-2.R)
>> >
>> > It is entirely possible that it is an error on my end, I use
>> >   export TZ="US/Eastern"
>> > but I have been using this for a while, and R-4.0.3-patched built today
>> > passes make tests.
>> >
>> > Details below, and I am happy to provide more information.
>> >
>> > Build platform: inside a conda environment on linux. I have been doing
>> this
>> > for a while, but it is certainly a non-standard setup. GCC 7.3
>> >
>> > Best,
>> > Kasper
>> >
>> > On R version 4.0.3 beta (2020-10-01 r79286) I get
>> >
>> >> x = Sys.time()
>> >> attributes(x)
>> > $class
>> > [1] "POSIXct" "POSIXt"
>> >
>> >> attributes(as.POSIXlt(x))
>> > $names
>> >  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"
>>  "yday"
>> >  [9] "isdst"  "zone"   "gmtoff"
>> >
>> > $class
>> > [1] "POSIXlt" "POSIXt"
>> >
>> > $tzone
>> > [1] "US/Eastern" "EST"        "EDT"
>> >
>> >> all.equal(x, as.POSIXlt(x))
>> > [1] TRUE
>> >
>> > On R Under development (unstable) (2020-10-01 r79286) I get
>> >> x = Sys.time()
>> >> all.equal(x,x)
>> > [1] TRUE
>> >> attributes(as.POSIXlt(x))
>> > $names
>> >  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"
>>  "yday"
>> >  [9] "isdst"  "zone"   "gmtoff"
>> >
>> > $class
>> > [1] "POSIXlt" "POSIXt"
>> >
>> > $tzone
>> > [1] "US/Eastern" "EST"        "EDT"
>> >
>> >> all.equal(x, as.POSIXlt(x))
>> > [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>
> --
> Best,
> Kasper
>


-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Fri Oct 23 11:10:01 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Fri, 23 Oct 2020 11:10:01 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <CAC2h7usvDomT3LWwyaGcgE73dmvv8ArUcUMe+AtjW+X_KC+2dg@mail.gmail.com>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
 <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
 <CAC2h7uv=Ks8-8Dm4XbAUOphM3TJc8UJGyD2+DTvVgs6mVDF9Rg@mail.gmail.com>
 <CAC2h7usvDomT3LWwyaGcgE73dmvv8ArUcUMe+AtjW+X_KC+2dg@mail.gmail.com>
Message-ID: <c0aeb24d-62bf-46b6-bbd9-c91e884f7906@fau.de>

Yes, you are absolutely right and I'm pretty sure this will be fixed in
one way or another.

IMO, the failing test should simply use all.equal.POSIXt's new argument
check.tzone=FALSE.

Two simple alternatives modifying all.equal.POSIXt behaviour:

- make check.tzone=FALSE the default: this is inconsistent with other
arguments of all.equal methods, always defaulting to stricter checks

- let all.equal.POSIXt generally ignore the tzone difference if tzone is
unset for one of the objects (similar to check_tzones): I think this is
a bad idea because tzone affects how POSIXt objects are printed, and
under check.tzone=TRUE, two objects shouldn't be considered "nearly
equal" if they print differently.

Best regards,

	Sebastian


Am 23.10.20 um 10:28 schrieb Kasper Daniel Hansen:
> So let me try to raise this issue once more, and perhaps be more clear
> about what I think the?issue is..
> 
> In my opinion there is now a bug in?
> ? make check
> in R-development (tested today with r79361). As I see it, I specify a
> reasonable TZ environment variable and this leads to make check emitting
> an error.
> 
> Best,
> Kasper
> 
> On Fri, Oct 2, 2020 at 11:28 AM Kasper Daniel Hansen
> <kasperdanielhansen at gmail.com <mailto:kasperdanielhansen at gmail.com>> wrote:
> 
>     Yes, the potential issue I see is that?
>     ? make check?
>     fails when I explicitly?set TZ. However, I set it to be the same as
>     what the system reports when I login.
> 
>     Details: The system (RHEL) I am working on has
>     $ strings /etc/localtime | tail -n 1
>     EST5EDT,M3.2.0,M11.1.0
>     $ date +%Z
>     EDT
>     $ echo $TZ
>     US/Eastern
> 
> 
> 
>     On Fri, Oct 2, 2020 at 9:48 AM Sebastian Meyer <seb.meyer at fau.de
>     <mailto:seb.meyer at fau.de>> wrote:
> 
>         Thank you for the report. In R-devel, all.equal.POSIXt() by default
>         reports inconsistent time zones. Previously,
> 
>         > x <- Sys.time()
>         > all.equal(x, as.POSIXlt(x, tz = "EST5EDT"))
> 
>         would return TRUE. To ignore the time zone attributes in
>         R-devel, the
>         argument 'check.tzone = FALSE' needs to be used.
> 
>         That said, I can reproduce the 'make check' failure in R-devel
>         on Ubuntu
>         Linux when TZ is set, even if it is set to the system time zone:
> 
>         $ export TZ=Europe/Berlin
>         $ make check
>         [...]
>         > running code in '../../tests/reg-tests-2.R' ... OK
>         >? ?comparing 'reg-tests-2.Rout' to
>         '../../tests/reg-tests-2.Rout.save' ...7335c7335
>         > < [1] "'tzone' attributes are inconsistent ('' and
>         'Europe/Berlin')"
>         > ---
>         >> [1] TRUE
> 
> 
>         Compare the following two sessions:
> 
>         > R-devel --vanilla --no-echo -e 'Sys.timezone(); x <-
>         Sys.time(); all.equal(x, as.POSIXlt(x))'
>         [1] "Europe/Berlin"
>         [1] TRUE
> 
>         > TZ='Europe/Berlin' R-devel --vanilla --no-echo -e
>         'Sys.timezone(); x <- Sys.time(); all.equal(x, as.POSIXlt(x))'
>         [1] "Europe/Berlin"
>         [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
> 
> 
>         So as.POSIXlt() sets a 'tzone' attribute if TZ is set, but this
>         behaviour is not new. Even with old R 3.6.3, I see
> 
>         > R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()),
>         "tzone")'
>         [1] ""? ? ?"CET"? "CEST"
> 
>         > TZ='Europe/Berlin' R-3.6.3 --vanilla --slave -e
>         'attr(as.POSIXlt(Sys.time()), "tzone")'
>         [1] "Europe/Berlin" "CET"? ? ? ? ? ?"CEST"
> 
>         This might be system-specific.
> 
>         I suggest to modify the test as attached for make check to pass
>         in this
>         setting.
> 
>         Best regards,
> 
>         ? ? ? ? Sebastian
> 
> 
>         Am 01.10.20 um 20:31 schrieb Kasper Daniel Hansen:
>         > The return value of Sys.time() today with a timezone of
>         US/Eastern is
>         > unchanged between 4.0.3-patched and devel, but on devel the
>         following test
>         > fails
>         >? ?all.equal(x, as.POSIXlt(x))
>         > with
>         >? ?x = Sys.time()
>         >
>         > This means that devel does not complete make tests (failure on
>         > tests/reg-tests-2.R)
>         >
>         > It is entirely possible that it is an error on my end, I use
>         >? ?export TZ="US/Eastern"
>         > but I have been using this for a while, and R-4.0.3-patched
>         built today
>         > passes make tests.
>         >
>         > Details below, and I am happy to provide more information.
>         >
>         > Build platform: inside a conda environment on linux. I have
>         been doing this
>         > for a while, but it is certainly a non-standard setup. GCC 7.3
>         >
>         > Best,
>         > Kasper
>         >
>         > On R version 4.0.3 beta (2020-10-01 r79286) I get
>         >
>         >> x = Sys.time()
>         >> attributes(x)
>         > $class
>         > [1] "POSIXct" "POSIXt"
>         >
>         >> attributes(as.POSIXlt(x))
>         > $names
>         >? [1] "sec"? ? "min"? ? "hour"? ?"mday"? ?"mon"? ? "year"?
>         ?"wday"? ?"yday"
>         >? [9] "isdst"? "zone"? ?"gmtoff"
>         >
>         > $class
>         > [1] "POSIXlt" "POSIXt"
>         >
>         > $tzone
>         > [1] "US/Eastern" "EST"? ? ? ? "EDT"
>         >
>         >> all.equal(x, as.POSIXlt(x))
>         > [1] TRUE
>         >
>         > On R Under development (unstable) (2020-10-01 r79286) I get
>         >> x = Sys.time()
>         >> all.equal(x,x)
>         > [1] TRUE
>         >> attributes(as.POSIXlt(x))
>         > $names
>         >? [1] "sec"? ? "min"? ? "hour"? ?"mday"? ?"mon"? ? "year"?
>         ?"wday"? ?"yday"
>         >? [9] "isdst"? "zone"? ?"gmtoff"
>         >
>         > $class
>         > [1] "POSIXlt" "POSIXt"
>         >
>         > $tzone
>         > [1] "US/Eastern" "EST"? ? ? ? "EDT"
>         >
>         >> all.equal(x, as.POSIXlt(x))
>         > [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
>         >
>         >? ? ? ?[[alternative HTML version deleted]]
>         >
>         > ______________________________________________
>         > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>         > https://stat.ethz.ch/mailman/listinfo/r-devel
>         >
>         ______________________________________________
>         R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>         https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
>     -- 
>     Best,
>     Kasper
> 
> 
> 
> -- 
> Best,
> Kasper


From |@g|ne @end|ng |rom p@@jd@org  Fri Oct 23 19:03:37 2020
From: |@g|ne @end|ng |rom p@@jd@org (=?iso-8859-1?Q?IAGO_GIN=C9_V=C1ZQUEZ?=)
Date: Fri, 23 Oct 2020 17:03:37 +0000
Subject: [Rd] The presence/absence of `zone` in POSIXlt depending on time
 zone as a cause of possible inconsistences?
Message-ID: <AM6PR02MB44230E9118756F38C48381F8921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>

Dear all,

I have just detected what seems a minor inconsistence with data types. If one unlists a POSIXlt time with GMT zone gets a numeric vector, since the POSIXlt list has no `zone` element, while if one unlists a POSIXlt time with a non GMT zone (also non specifying tz if the Sys.timezone is not GMT) gets a character vector due to including the `zone` element.

> x <- as.POSIXlt(Sys.time(), "GMT")
> (y <- unlist(x))
      sec       min      hour      mday       mon      year      wday      yday     isdst
 54.99715  26.00000  16.00000  23.00000   9.00000 120.00000   5.00000 296.00000   0.00000
> str(y)
 Named num [1:9] 55 26 16 23 9 ...
 - attr(*, "names")= chr [1:9] "sec" "min" "hour" "mday" ...

> x <- as.POSIXlt(Sys.time(), "CET")
> (y <- unlist(x))
               sec                min               hour               mday                mon               year               wday               yday
"19.5111262798309"               "27"               "18"               "23"                "9"              "120"                "5"              "296"
             isdst               zone             gmtoff
               "1"             "CEST"             "7200"
> str(y)
 Named chr [1:11] "19.5111262798309" "27" "18" "23" "9" "120" "5" "296" "1" "CEST" "7200"
 - attr(*, "names")= chr [1:11] "sec" "min" "hour" "mday" ...

Is it expected? Why do not include always `zone` as an element of POSIXlt? Should POSIXlt objects be unlisted in a different way?
Thank you!
Best regards,

Iago

PS: I was using R 4.0.3. I don't know if this behaviour already changed in R-devel. Excuse me in that case.


	[[alternative HTML version deleted]]


From |@g|ne @end|ng |rom p@@jd@org  Fri Oct 23 19:27:56 2020
From: |@g|ne @end|ng |rom p@@jd@org (=?utf-8?B?SUFHTyBHSU7DiSBWw4FaUVVFWg==?=)
Date: Fri, 23 Oct 2020 17:27:56 +0000
Subject: [Rd] 
 The presence/absence of `zone` in POSIXlt depending on time
 zone as a cause of possible inconsistences?
In-Reply-To: <AM6PR02MB44230E9118756F38C48381F8921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>
References: <AM6PR02MB44230E9118756F38C48381F8921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>
Message-ID: <AM6PR02MB442347F724295DA029590B8A921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>

?Hi again,

I take advantage of my previous mail to ask you a question for which I was looking  for an answer when detected the behaviour I previously told. In the help of DataTimeClasses one can read:
"POSIXlt" objects will often have an attribute "tzone", a character vector of length 3 giving the time zone name from the TZ environment variable and the names of the base time zone and the alternate (daylight-saving) time zone. Sometimes this may just be of length one, giving the time zone name.
Then, I asked myself if the element `zone` of POSIXlt could be different of the attribute `tzone`. But I do not get that. I am not sure of understanding what the "time zone name from the TZ environment variable" is if not what I set through `Sys.setenv(TZ = "")`. But the next example does not behave as I would expect:

> Sys.setenv(TZ = "EDT")
> x <- as.POSIXlt(Sys.time(), "CET")

> x[1,"zone"]
[1] "CEST"

> attributes(x) $names  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"   "isdst"  "zone"   "gmtoff" $class [1] "POSIXlt" "POSIXt" $tzone [1] "CET"  "CET"  "CEST"

So `x[1,"zone"]` is what I expect, but I would expect `attributes(x)$tzone` would be related to `TZ = "EDT"`, and not to `tz = "CET"`. So, what am I understanding wrongly?

Thank you!
Stay safe,


Iago

________________________________
De: R-devel <r-devel-bounces at r-project.org> de part de IAGO GIN? V?ZQUEZ <i.gine at pssjd.org>
Enviat el: divendres, 23 d?octubre de 2020 19:03
Per a: r-devel at r-project.org <r-devel at r-project.org>
Tema: [Rd] The presence/absence of `zone` in POSIXlt depending on time zone as a cause of possible inconsistences?

Dear all,

I have just detected what seems a minor inconsistence with data types. If one unlists a POSIXlt time with GMT zone gets a numeric vector, since the POSIXlt list has no `zone` element, while if one unlists a POSIXlt time with a non GMT zone (also non specifying tz if the Sys.timezone is not GMT) gets a character vector due to including the `zone` element.

> x <- as.POSIXlt(Sys.time(), "GMT")
> (y <- unlist(x))
      sec       min      hour      mday       mon      year      wday      yday     isdst
 54.99715  26.00000  16.00000  23.00000   9.00000 120.00000   5.00000 296.00000   0.00000
> str(y)
 Named num [1:9] 55 26 16 23 9 ...
 - attr(*, "names")= chr [1:9] "sec" "min" "hour" "mday" ...

> x <- as.POSIXlt(Sys.time(), "CET")
> (y <- unlist(x))
               sec                min               hour               mday                mon               year               wday               yday
"19.5111262798309"               "27"               "18"               "23"                "9"              "120"                "5"              "296"
             isdst               zone             gmtoff
               "1"             "CEST"             "7200"
> str(y)
 Named chr [1:11] "19.5111262798309" "27" "18" "23" "9" "120" "5" "296" "1" "CEST" "7200"
 - attr(*, "names")= chr [1:11] "sec" "min" "hour" "mday" ...

Is it expected? Why do not include always `zone` as an element of POSIXlt? Should POSIXlt objects be unlisted in a different way?
Thank you!
Best regards,

Iago

PS: I was using R 4.0.3. I don't know if this behaviour already changed in R-devel. Excuse me in that case.


        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Fri Oct 23 21:58:40 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Fri, 23 Oct 2020 21:58:40 +0200
Subject: [Rd] 
 The presence/absence of `zone` in POSIXlt depending on time
 zone as a cause of possible inconsistences?
In-Reply-To: <AM6PR02MB442347F724295DA029590B8A921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>
References: <AM6PR02MB44230E9118756F38C48381F8921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>
 <AM6PR02MB442347F724295DA029590B8A921A0@AM6PR02MB4423.eurprd02.prod.outlook.com>
Message-ID: <7be9af44-92fe-f65b-ba68-ca89516898d8@fau.de>

Hi Iago,

I think the unlist behaviour is expected. If the list contains a mixture
of character and integer elements, the unlisted object will be a
character vector, similar to what happens when you c()oncatenate
components of different types (see the details in ?c for the hierarchy).
If you only need the numeric POSIXlt components anyway, you could do

	unlist("$<-"(x, "zone", NULL))

to ensure that you get a numeric vector.
Alternatively, you can nicely do

	as.data.frame(unclass(x))

to get all components in a data frame.

Concerning your second observation: Yes, the documentation of the
"tzone" attribute was wrong until very recently; I stumbled over this
exact trap one week ago and reported to R-core members. It has been
fixed in the development version (c79351) a few days ago and now says:

>   a character vector of length 3 giving the time zone name (from the 'TZ'
>   environment variable or argument 'tz' of functions creating
>   '"POSIXlt"' objects; '""' marks the current time zone)


Best regards,

	Sebastian


Am 23.10.20 um 19:27 schrieb IAGO GIN? V?ZQUEZ:
> ?Hi again,
> 
> I take advantage of my previous mail to ask you a question for which I was looking  for an answer when detected the behaviour I previously told. In the help of DataTimeClasses one can read:
> "POSIXlt" objects will often have an attribute "tzone", a character vector of length 3 giving the time zone name from the TZ environment variable and the names of the base time zone and the alternate (daylight-saving) time zone. Sometimes this may just be of length one, giving the time zone name.
> Then, I asked myself if the element `zone` of POSIXlt could be different of the attribute `tzone`. But I do not get that. I am not sure of understanding what the "time zone name from the TZ environment variable" is if not what I set through `Sys.setenv(TZ = "")`. But the next example does not behave as I would expect:
> 
>> Sys.setenv(TZ = "EDT")
>> x <- as.POSIXlt(Sys.time(), "CET")
> 
>> x[1,"zone"]
> [1] "CEST"
> 
>> attributes(x) $names  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"   "isdst"  "zone"   "gmtoff" $class [1] "POSIXlt" "POSIXt" $tzone [1] "CET"  "CET"  "CEST"
> 
> So `x[1,"zone"]` is what I expect, but I would expect `attributes(x)$tzone` would be related to `TZ = "EDT"`, and not to `tz = "CET"`. So, what am I understanding wrongly?
> 
> Thank you!
> Stay safe,
> 
> 
> Iago
> 
> ________________________________
> De: R-devel <r-devel-bounces at r-project.org> de part de IAGO GIN? V?ZQUEZ <i.gine at pssjd.org>
> Enviat el: divendres, 23 d?octubre de 2020 19:03
> Per a: r-devel at r-project.org <r-devel at r-project.org>
> Tema: [Rd] The presence/absence of `zone` in POSIXlt depending on time zone as a cause of possible inconsistences?
> 
> Dear all,
> 
> I have just detected what seems a minor inconsistence with data types. If one unlists a POSIXlt time with GMT zone gets a numeric vector, since the POSIXlt list has no `zone` element, while if one unlists a POSIXlt time with a non GMT zone (also non specifying tz if the Sys.timezone is not GMT) gets a character vector due to including the `zone` element.
> 
>> x <- as.POSIXlt(Sys.time(), "GMT")
>> (y <- unlist(x))
>       sec       min      hour      mday       mon      year      wday      yday     isdst
>  54.99715  26.00000  16.00000  23.00000   9.00000 120.00000   5.00000 296.00000   0.00000
>> str(y)
>  Named num [1:9] 55 26 16 23 9 ...
>  - attr(*, "names")= chr [1:9] "sec" "min" "hour" "mday" ...
> 
>> x <- as.POSIXlt(Sys.time(), "CET")
>> (y <- unlist(x))
>                sec                min               hour               mday                mon               year               wday               yday
> "19.5111262798309"               "27"               "18"               "23"                "9"              "120"                "5"              "296"
>              isdst               zone             gmtoff
>                "1"             "CEST"             "7200"
>> str(y)
>  Named chr [1:11] "19.5111262798309" "27" "18" "23" "9" "120" "5" "296" "1" "CEST" "7200"
>  - attr(*, "names")= chr [1:11] "sec" "min" "hour" "mday" ...
> 
> Is it expected? Why do not include always `zone` as an element of POSIXlt? Should POSIXlt objects be unlisted in a different way?
> Thank you!
> Best regards,
> 
> Iago
> 
> PS: I was using R 4.0.3. I don't know if this behaviour already changed in R-devel. Excuse me in that case.
> 
> 
>         [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr. Sebastian Meyer
Friedrich-Alexander-Universit?t Erlangen-N?rnberg (FAU)
Institut f?r Medizininformatik, Biometrie und Epidemiologie (IMBE)

Tel. +49 9131 85-22707


From hp@ge@ @end|ng |rom |redhutch@org  Fri Oct 23 23:44:24 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 23 Oct 2020 21:44:24 +0000
Subject: [Rd] sum() (and similar methods) should work for zero row
 data.frames
In-Reply-To: <24463.4629.646167.527915@stat.math.ethz.ch>
References: <2d385fbb-6aec-4c8e-8447-b52a1b075e1e@www.fastmail.com>
 <CAPRP4-cbN2OZzpVemgOgOXhEM5Nm9ey=edOW0LY3MpvwvNu==A@mail.gmail.com>
 <e717ff4f-35b8-4e61-ab60-e3367de265cb@www.fastmail.com>
 <99B179A6-4178-469F-9065-3631B908DBFB@gmail.com>
 <CAD4oTHFV0N+eQGFDS-yrFUZG+8k01t_jmYc3z0MgheDwz4MEtw@mail.gmail.com>
 <503b7e54-8369-4c49-91f8-558f48105a90@www.fastmail.com>
 <24463.4629.646167.527915@stat.math.ethz.ch>
Message-ID: <4e6c6def-2c7b-e033-2448-604a3203c79e@fredhutch.org>

Hi,

There are 2 bugs here. The proposed fix to Summary.data.frame() is fine 
but it doesn't address the other problem reported by the OP that 
as.matrix() on a zero-row data.frame doesn't respect the type of its 
columns, like other column-combining operations do:

   df <- data.frame(a=numeric(0), b=numeric(0))

   typeof(as.matrix(df))
   # [1] "logical"

   typeof(unlist(df))
   # [1] "double"

   typeof(do.call(c, df))
   # [1] "double"

I've run myself into this in a couple of occasions (not in the context 
of Summary methods) and worked around it with something like:

   as_matrix_data_frame <- function(df)
   {
     ans <- as.matrix(df)
     if (nrow(df) == 0L)
         storage.mode(ans) <- typeof(unlist(df))
     ans
   }

No reason as.matrix.data.frame() couldn't do something similar.

Cheers,
H.


On 10/20/20 09:36, Martin Maechler wrote:
>>>>>> mb706
>>>>>>      on Sun, 18 Oct 2020 22:14:55 +0200 writes:
> 
>      >> From my side: it would be great if you (or R core) could prepare a patch, it would probably take me quite a bit longer than you since I don't have experience creating patches for R.
> 
>      > Best, Martin
> 
> Basically, just
> 
> 1.  svn co https://urldefense.proofpoint.com/v2/url?u=https-3A__svn.r-2Dproject.org_R_trunk&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YAI4LgZvkD5k-tPHUGFX4PEjm72-6j_WxHpkdHfe_3Q&s=PpmVRjh2Jrg07bLHjlbhdBgWQWAFe6RK_J2SivC74vw&e=   R-devel
> 
> 2.  inside the R-devel source tree, find  src/library/base/R/dataframe.R
>      make the *minimal* changes there,
> 
>      (then also add some regression tests and update the help :-)
> 
> 3.  inside R-devel, do
> 
>          svn diff -x -ubw  >  mb706.patch
> 
> 4.  you've got the patch file  mb706.patch  which you could
>      attach to a bug report  on R's bugzilla
> 
>      (once you've got an account there ...
>       As you've asked for that *and* as you've proven your good
>       judgment about "true bug" vs. "not what I expected",
>       I'll create such an account for you now, in spite of the
>       fact that I'd still like to know a bit more than "Martin
>       mb706" about you  ...)
> 
> The changes have been committed to R-devel a quarter of an hour ago.
> We will keep them in R-devel (currently planned to become R
> 4.1.0 in spring 2021), and not port to the R-4.0.z branch, as
> the change is something like an API change, and also because
> nobody had ever reported this as an issue to our knowledge.
> 
> Thank you, Martin B706 for bringing the issue up,  and Gabe and Peter
> for chiming in !!
> 
> Best regards,
> Martin Maechler
> ETH Zurich  and  R core team
>      
> 
>      > On Sun, Oct 18, 2020, at 21:49, Gabriel Becker wrote:
>      >> Peter et al,
>      >>
>      >> I had the same thought, in particular for any() and all(), which in as
>      >> much as they should work on data.frames in the first place (which to be
>      >> perfectly honest i do find quite debatable myself), should certainly
>      >> work on "logical" data.frames if they are going to work on "numeric"
>      >> ones.
>      >>
>      >> I can volunteer to prepare a patch if Martin (the reporter) did not
>      >> want to take a crack at it, and further if it is not already being done
>      >> within R-core.
>      >>
>      >> Best,
>      >> ~G
>      >>
>      >> On Sun, Oct 18, 2020 at 12:19 AM peter dalgaard <pdalgd at gmail.com> wrote:
>      >> > Hmm, yes, this is probably wrong. E.g., we are likely to get inconsistencies out of boundary cases like this
>      >> >
>      >> > > a <- na.omit(airquality)
>      >> > > sum(a)
>      >> > [1] 37495.3
>      >> > > sum(a[FALSE,])
>      >> > Error in FUN(X[[i]], ...) :
>      >> >   only defined on a data frame with all numeric variables
>      >> >
>      >> > Or, closer to an actual use case:
>      >> >
>      >> > > sum(subset(a, Ozone>100))
>      >> > [1] 3330.5
>      >> > > sum(subset(a, Ozone>200))
>      >> > Error in FUN(X[[i]], ...) :
>      >> >   only defined on a data frame with all numeric variables
>      >> >
>      >> >
>      >> > However, given that numeric summaries generally treat logicals as 0/1, wouldn't it be easiest just to extend the check inside Summary.data.frame with "&& !is.logical(x)"?
>      >> >
>      >> > > sum(as.matrix(a[FALSE,]))
>      >> > [1] 0
>      >> >
>      >> > -pd
>      >> >
>      >> > > On 17 Oct 2020, at 21:18 , Martin <rdev at mb706.com> wrote:
>      >> > >
>      >> > > The "Summary" group generics always throw errors for a data.frame with zero rows, for example:
>      >> > >> sum(data.frame(x = numeric(0)))
>      >> > > #> Error in FUN(X[[i]], ...) :
>      >> > > #>   only defined on a data frame with all numeric variables
>      >> > > Same behaviour for min, max, any, all, ... . I believe this is inconsistent with what these methods do for other empty objects (vectors, matrices), where the return value is chosen to ensure transitivity: sum(numeric(0)) == 0.
>      >> > >
>      >> > > The reason for this is that the return type of as.matrix() for empty (no rows or no columns) data.frame objects is always a matrix of type "logical". The Summary method for data.frame, in turn, throws an error when the data.frame, converted to a matrix, is not of numeric type.
>      >> > >
>      >> > > I suggest two ways that make sum, min, max, ... more consistent. IMHO it would be fitting to implement both of these fixes, because they also make other things more consistent.
>      >> > >
>      >> > > 1. Make the return type of as.matrix() for zero-row data.frames consistent with the type that would have been returned, had the data.frame had more than zero rows. "as.matrix(data.frame(x = numeric(0)))" should then be numeric, if there is an empty "character" column the return matrix should be a character etc. This would make subsetting by row and conversion to matrix commute (except for row names sometimes):
>      >> > >> all.equal(as.matrix(df[rows, , drop = FALSE]), as.matrix(df)[rows, , drop = FALSE])
>      >> > > Furthermore, this change would make as.matrix.data.frame obey the documentation, which indicates that the coercion hierarchy is used for the return type.
>      >> > >
>      >> > > 2. Make the Summary.data.frame method accept data.frames that produce non-numeric matrices. Next to the main focus of this message, I believe it would e.g. be fitting to have any() and all() work on logical data.frame objects. The current behaviour is such that
>      >> > >> any(data.frame(x = 1))
>      >> > > #> [1] TRUE
>      >> > > #> Warning message:
>      >> > > #> In any(1, na.rm = FALSE) : coercing argument of type 'double' to logical
>      >> > > and
>      >> > >> any(data.frame(x = TRUE))
>      >> > > #> Error in FUN(X[[i]], ...) :
>      >> > > #>   only defined on a data frame with all numeric variables
>      >> > > So a numeric data.frame warns about implicit coercion, while a logical data.frame (which would not need coercion) does not work at all.
>      >> > >
>      >> > > (I feel more strongly about fixing 1. than 2., because I don't know the discussion that lead to the behaviour described in 2.)
>      >> > >
>      >> > > Best,
>      >> > > Martin
>      >> > >
>      >> > > ______________________________________________
>      >> > > R-devel at r-project.org mailing list
>      >> > > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YAI4LgZvkD5k-tPHUGFX4PEjm72-6j_WxHpkdHfe_3Q&s=q0b1qGN5IxjiKAeQYAkmEKNdqyTOXnuIAFtuPTiPli8&e=
>      >> >
>      >> > --
>      >> > Peter Dalgaard, Professor,
>      >> > Center for Statistics, Copenhagen Business School
>      >> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>      >> > Phone: (+45)38153501
>      >> > Office: A 4.23
>      >> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>      >> >
>      >> > ______________________________________________
>      >> > R-devel at r-project.org mailing list
>      >> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YAI4LgZvkD5k-tPHUGFX4PEjm72-6j_WxHpkdHfe_3Q&s=q0b1qGN5IxjiKAeQYAkmEKNdqyTOXnuIAFtuPTiPli8&e=
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YAI4LgZvkD5k-tPHUGFX4PEjm72-6j_WxHpkdHfe_3Q&s=q0b1qGN5IxjiKAeQYAkmEKNdqyTOXnuIAFtuPTiPli8&e=
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=YAI4LgZvkD5k-tPHUGFX4PEjm72-6j_WxHpkdHfe_3Q&s=q0b1qGN5IxjiKAeQYAkmEKNdqyTOXnuIAFtuPTiPli8&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From hp@ge@ @end|ng |rom |redhutch@org  Sat Oct 24 01:23:59 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 23 Oct 2020 23:23:59 +0000
Subject: [Rd] Change to I() in R 4.1
Message-ID: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>

Hi there,

Is that change in R-devel intentional?

   library(Matrix)
   m <- as(matrix(c(0, 1)), "sparseMatrix")

   isS4(m)
   # [1] TRUE

   x <- I(m)
   # Warning message:
   # In `class<-`(x, unique.default(c("AsIs", oldClass(x)))) :
   #   Setting class(x) to multiple strings ("AsIs", "dgCMatrix", ...); 
result will no longer be an S4 object

   isS4(x)
   # [1] FALSE

This works fine in R 4.0.3 i.e. no warning and I() doesn't turn off the 
S4 bit of the object.

This change breaks 17 Bioconductor packages.

Seems that the culprit is this change in how I() is implemented:

In R 4.0.3:

   > I
   function (x)
   {
     structure(x, class = unique(c("AsIs", oldClass(x))))
   }

In R devel:

   > I
   function (x)
   `class<-`(x, unique.default(c("AsIs", oldClass(x))))

Unfortunately there is a bunch of code around that calls I() on S4 
objects, admittedly not necessarily for very good reasons, but it 
happens. Would it be possible that I() has a less destructive effect on 
S4 objects?

Thanks,
H.

 > sessionInfo()
R Under development (unstable) (2020-10-17 r79346)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.1 LTS

Matrix products: default
BLAS:   /home/biocbuild/bbs-3.13-bioc/R/lib/libRblas.so
LAPACK: /home/biocbuild/bbs-3.13-bioc/R/lib/libRlapack.so

locale:
  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] Matrix_1.2-18

loaded via a namespace (and not attached):
[1] compiler_4.1.0  grid_4.1.0      lattice_0.20-41

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From therne@u @end|ng |rom m@yo@edu  Sat Oct 24 03:25:40 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 23 Oct 2020 20:25:40 -0500
Subject: [Rd] Issue with data() function
Message-ID: <28fddd$epngsd@ironport10.mayo.edu>

I found an issue with the data() command this evening when working on the survival package.

1. I have a lot of data sets in the package, almost all used in at least one vignette, 
help file, or test.? As a space saving measure, I have bundled many of them together, 
i.e., the file data/cancer.rda contains 19 data sets, many of them small. The resulting 
file (using xz compression) is quite a bit smaller than the individual ones.? (I still get 
a warning note about size from R CMD check, but I'm no longer 2x the limit.)

2. Consider the lung data set.? All of these fail:
 ?? data(lung)
 ?? data("lung")
 ?? data(lung, package="survival")

 ?a. The lung.Rd file had \usage{data(lung)}; that error was not caught by R CMD check.? 
(Several other .Rd files as well.)

 ?b. In broader examples for teaching, I sometimes load data from other packages, e.g 
data(aidssi, package="mstate").? But this does not work for survival.? (The larger 
survival data sets that are in separate .rda files can be found.)

 ?c. What does work is survival::lung.? Might it be useful to add a comment to data.Rd to 
this effect?


3. Creating a separate package 'survivaldata' is of course one route, and is suggested in 
the "Writing R Extensions" guide.? But this is not possible since survival is a 
recommended package: it can't load any non-recommended package for it's tests or 
vignettes.? Longer term, perhaps there is way around this constraint?

Terry T.

-- 
Terry M Therneau, PhD
Department of Health Science Research
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Oct 24 11:28:58 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 24 Oct 2020 05:28:58 -0400
Subject: [Rd] Issue with data() function
In-Reply-To: <28fddd$epngsd@ironport10.mayo.edu>
References: <28fddd$epngsd@ironport10.mayo.edu>
Message-ID: <143bb03a-c8e1-292c-eb22-fad422cfdbad@gmail.com>

On 23/10/2020 9:25 p.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> I found an issue with the data() command this evening when working on the survival package.
> 
> 1. I have a lot of data sets in the package, almost all used in at least one vignette,
> help file, or test.? As a space saving measure, I have bundled many of them together,
> i.e., the file data/cancer.rda contains 19 data sets, many of them small. The resulting
> file (using xz compression) is quite a bit smaller than the individual ones.? (I still get
> a warning note about size from R CMD check, but I'm no longer 2x the limit.)
> 
> 2. Consider the lung data set.? All of these fail:
>   ?? data(lung)
>   ?? data("lung")
>   ?? data(lung, package="survival")
> 
>   ?a. The lung.Rd file had \usage{data(lung)}; that error was not caught by R CMD check.
> (Several other .Rd files as well.)
> 
>   ?b. In broader examples for teaching, I sometimes load data from other packages, e.g
> data(aidssi, package="mstate").? But this does not work for survival.? (The larger
> survival data sets that are in separate .rda files can be found.)
> 
>   ?c. What does work is survival::lung.? Might it be useful to add a comment to data.Rd to
> this effect?

You don't describe how this dataset is being included in your package. 
Have you moved it from data/lung.rda to data/cancer.rda?  Currently (in 
survival 3.2-7) each of these works for me:

  library(survival); data(lung)

  library(survival); data("lung")

  # Without library(survival):
  data(lung, package="survival")

I think if the lung dataset is now being included in cancer.rda, you'd need

   data(cancer, package="survival")

or equivalent to load it (and the rest of the datasets there).

> 
> 
> 3. Creating a separate package 'survivaldata' is of course one route, and is suggested in
> the "Writing R Extensions" guide.? But this is not possible since survival is a
> recommended package: it can't load any non-recommended package for it's tests or
> vignettes.? Longer term, perhaps there is way around this constraint?

Maybe the solution is to put your datasets into the "datasets" package, 
or make "survivaldata" a recommended package, or just leave things as 
they are and ignore the warnings about package size.  I think that's a 
negotiation you should have with R Core.

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Sat Oct 24 20:00:27 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 24 Oct 2020 13:00:27 -0500
Subject: [Rd] Issue with data() function
In-Reply-To: <143bb03a-c8e1-292c-eb22-fad422cfdbad@gmail.com>
References: <28fddd$epngsd@ironport10.mayo.edu>
 <143bb03a-c8e1-292c-eb22-fad422cfdbad@gmail.com>
Message-ID: <24468.27579.710215.953578@rob.eddelbuettel.com>


On 24 October 2020 at 05:28, Duncan Murdoch wrote:
| they are and ignore the warnings about package size.  I think that's a 
| negotiation you should have with R Core.

s/R Core/CRAN/  ?

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Oct 24 21:12:56 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 24 Oct 2020 15:12:56 -0400
Subject: [Rd] Issue with data() function
In-Reply-To: <24468.27579.710215.953578@rob.eddelbuettel.com>
References: <28fddd$epngsd@ironport10.mayo.edu>
 <143bb03a-c8e1-292c-eb22-fad422cfdbad@gmail.com>
 <24468.27579.710215.953578@rob.eddelbuettel.com>
Message-ID: <484779a3-463a-76d8-5a26-16539037788b@gmail.com>

On 24/10/2020 2:00 p.m., Dirk Eddelbuettel wrote:
> 
> On 24 October 2020 at 05:28, Duncan Murdoch wrote:
> | they are and ignore the warnings about package size.  I think that's a
> | negotiation you should have with R Core.
> 
> s/R Core/CRAN/  ?

Yes, for that part.  The other suggestions need R Core agreement.

Duncan Murdoch


From therne@u @end|ng |rom m@yo@edu  Mon Oct 26 04:21:17 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Sun, 25 Oct 2020 22:21:17 -0500
Subject: [Rd] Issue with data() function
In-Reply-To: <143bb03a-c8e1-292c-eb22-fad422cfdbad@gmail.com>
References: <28fddd$epngsd@ironport10.mayo.edu>
 <143bb03a-c8e1-292c-eb22-fad422cfdbad@gmail.com>
Message-ID: <28fddd$epv9ie@ironport10.mayo.edu>

Duncan and others:? I was not being careful with my description.? This concerned tests of 
version 3.2-8, not yet on CRAN, in which I was trying some size-limiting measures.?? My 
apologies for not making this clear.

 ? - I feel mild pressure to make the survival package smaller, per CRAN guidelines, and 
shrinking the data appears to be one way to approach that.? So a real point of the query 
is my attempts to do so.?? (I am much more resistant to shrinking the extensive test suite 
or the vignettes.)
 ? -? The survival package has a lot of small data sets, and bundling them up into a 
single .rda file does save space, but it causes some issues with data().?? The overall 
tarball goes from 7480 to 6100 in size (ls -s).

 ? Terry

On 10/24/20 4:28 AM, Duncan Murdoch wrote:
> On 23/10/2020 9:25 p.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>> I found an issue with the data() command this evening when working on the survival 
>> package.
>>
>> 1. I have a lot of data sets in the package, almost all used in at least one vignette,
>> help file, or test.? As a space saving measure, I have bundled many of them together,
>> i.e., the file data/cancer.rda contains 19 data sets, many of them small. The resulting
>> file (using xz compression) is quite a bit smaller than the individual ones.? (I still get
>> a warning note about size from R CMD check, but I'm no longer 2x the limit.)
>>
>> 2. Consider the lung data set.? All of these fail:
>> ? ?? data(lung)
>> ? ?? data("lung")
>> ? ?? data(lung, package="survival")
>>
>> ? ?a. The lung.Rd file had \usage{data(lung)}; that error was not caught by R CMD check.
>> (Several other .Rd files as well.)
>>
>> ? ?b. In broader examples for teaching, I sometimes load data from other packages, e.g
>> data(aidssi, package="mstate").? But this does not work for survival.? (The larger
>> survival data sets that are in separate .rda files can be found.)
>>
>> ? ?c. What does work is survival::lung.? Might it be useful to add a comment to data.Rd to
>> this effect?
>
> You don't describe how this dataset is being included in your package. Have you moved it 
> from data/lung.rda to data/cancer.rda? Currently (in survival 3.2-7) each of these works 
> for me:
>
> ?library(survival); data(lung)
>
> ?library(survival); data("lung")
>
> ?# Without library(survival):
> ?data(lung, package="survival")
>
> I think if the lung dataset is now being included in cancer.rda, you'd need
>
> ? data(cancer, package="survival")
>
> or equivalent to load it (and the rest of the datasets there).
>
>>
>>
>> 3. Creating a separate package 'survivaldata' is of course one route, and is suggested in
>> the "Writing R Extensions" guide.? But this is not possible since survival is a
>> recommended package: it can't load any non-recommended package for it's tests or
>> vignettes.? Longer term, perhaps there is way around this constraint?
>
> Maybe the solution is to put your datasets into the "datasets" package, or make 
> "survivaldata" a recommended package, or just leave things as they are and ignore the 
> warnings about package size.? I think that's a negotiation you should have with R Core.
>
> Duncan Murdoch


	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Oct 26 12:52:47 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 26 Oct 2020 12:52:47 +0100
Subject: [Rd] Change to I() in R 4.1
In-Reply-To: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>
References: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>
Message-ID: <24470.47247.523768.77391@stat.math.ethz.ch>

> 
> Hi there,
> Is that change in R-devel intentional?
> 
>    library(Matrix)
>    m <- as(matrix(c(0, 1)), "sparseMatrix")
> 
>    isS4(m)
>    # [1] TRUE
> 
>    x <- I(m)
>    # Warning message:
>    # In `class<-`(x, unique.default(c("AsIs", oldClass(x)))) :
>    #   Setting class(x) to multiple strings ("AsIs", "dgCMatrix", ...); 
> result will no longer be an S4 object
> 
>    isS4(x)
>    # [1] FALSE
> 
> This works fine in R 4.0.3 i.e. no warning and I() doesn't turn off the 
> S4 bit of the object.
> 
> This change breaks 17 Bioconductor packages.
> 
> Seems that the culprit is this change in how I() is implemented:
> 
> In R 4.0.3:
> 
>    > I
>    function (x)
>    {
>      structure(x, class = unique(c("AsIs", oldClass(x))))
>    }
> 
> In R devel:
> 
>    > I
>    function (x)
>    `class<-`(x, unique.default(c("AsIs", oldClass(x))))

Yes, (by me),  as  I()  was sticking out in the slowness bug PR#17794
  https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17794

and the direct dangerous  `call<-`  will be replaced happily in
I()'s definition.

*But* as Luke Tierney had remarked to R-core, direct changing of
the class of an S4 object has given the above warning for a
quite while, (svn r47934 | jmc | 2009-02-17 )
*and* it has rather been an inconsistency in R, that you could
still use "low-level" means to change the class of an S4 object
to something invalid.

I really don't think people should be allowed to use I() to
change a valid S4 object into an invalid one, but this is what
happens (R 4.0.3 patched) :

> require(Matrix); M <- Matrix(0, 2,3); IM <- I(M)
> validObject(IM)
Error in .classEnv(classDef) : 
  trying to get slot "package" from an object of a basic class ("NULL") with no slots
> IM
 ----------- FAILURE REPORT -------------- 
 --- failure: length > 1 in coercion to logical ---
 --- srcref --- 
: 
 --- package (from environment) --- 
methods
 --- call from context --- 
showDefault(object)
 --- call from argument --- 
!is.null(clDef) && isS4(object) && is.na(match(clDef at className, 
    .BasicClasses))
 --- R stacktrace ---
where 1: showDefault(object)
where 2: Error in showDefault(object) : 
  cannot get a slot ("slots") from an object of type "NULL"
> 


> Unfortunately there is a bunch of code around that calls I() on S4 
> objects, admittedly not necessarily for very good reasons, but it 
> happens. Would it be possible that I() has a less destructive effect on 
> S4 objects?

I'm not sure if this is really desirable... but I may fail to
see the point of allowing invalid   I(<S4>)  objects as they
appear in R 4.0.x  ..

So what do you really propose that  I(.) should be doing, e.g.,
for  'M'  above ?

Martin


> 
> Thanks,
> H.
> 
>  > sessionInfo()
> R Under development (unstable) (2020-10-17 r79346)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 20.04.1 LTS
> 
> Matrix products: default
> BLAS:   /home/biocbuild/bbs-3.13-bioc/R/lib/libRblas.so
> LAPACK: /home/biocbuild/bbs-3.13-bioc/R/lib/libRlapack.so
> 
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> other attached packages:
> [1] Matrix_1.2-18
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.1.0  grid_4.1.0      lattice_0.20-41
> 
> -- 
> Herv? Pag?s
> 
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
> 
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Tue Oct 27 23:11:10 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 28 Oct 2020 11:11:10 +1300
Subject: [Rd] Could "MedicalImaging" Be Changed to "ImageProcessing"?
Message-ID: <CAB8pepzn3nOygyyBNprMdgamj_1_zbWafgWfgzqcPpPhhQR9Wg@mail.gmail.com>

Dear List,

Regarding the task views:
I was wondering if it would be possible to replace the MedicalImaging
task view with an ImageProcessing task view?
Alternatively, a separate task view could be created.
However, I suspect that there would be considerable overlap.
In my opinion, a single task view for image processing, would be preferable.

Also, I note that the Spatial task view contains a section on raster data.
This seems like the wrong place.
i.e. A raster file, typically represents a photograph or other image-like data.
Hence, it seems more natural for it to be in an image processing task
view, than in a spatial task view.
But then there is a counter argument to that, if it's not covered in
any other task view, then it needs to go somewhere. And the spatial
task view is preferrable, to nowhere.

When I think of spatial data, I think of things like coordinates for
weather satellites, or possibly a wireframe mesh. I suppose if a
raster file represented a matrix of height or depth values, then the
notion of image and spatial data coincide. But then there's a counter
argument to that, that the data should just be a plain text file with
a matrix, not a raster file.

Also, I note that the section on raster data needs to be updated.

A quick search resulted in a number of hits recommending two packages,
sp and raster.
However, a more thorough search resulted in more options, such as the
png and jpeg packages.
(Which have been on CRAN for about a decade).

I haven't tried the png and jpeg packages yet, but they seem like
attractive options.
So, I should be given them a test drive later today, or maybe tomorrow.

One final comment.
As a somewhat broad generalization, there seems to be considerably
more overlap between machine learning and image processing
(specifically), than there is between machine learning and spatial
data (more generally). Hence image processing should be given higher
precedence than what it currently is, and information on image
processing should be presented in a way that's suitable to parties
interested in machine learning.


From joh@nne@@r@nke @end|ng |rom jrwb@de  Wed Oct 28 10:22:37 2020
From: joh@nne@@r@nke @end|ng |rom jrwb@de (Johannes Ranke)
Date: Wed, 28 Oct 2020 10:22:37 +0100
Subject: [Rd] nlme: New variance function structure varConstProp
Message-ID: <5533500.x0TBGAMSoD@ryz>

Dear R developers,

recently I have written a wishlist bug report for nlme containing a patch that 
adds the variance function structure

s2(v) = t1^2 + t2^2*v^2

where v denotes the variance covariate, s2(v) denotes the variance function 
evaluated at v, and t, t1 and t2 are the variance function coefficients. The 
covariate can also be the fitted response.

The idea that the residual variance has an additive component and a component
proportional to the observed or fitted response is found in analytical 
chemistry [2, 3], pharmacokinetics [4], and has recently also been introduced 
to chemical degradation kinetics [5, 6].

As discussed in a recent monograph on mixed effects models [7, p. 55] and in a 
manuscript dedicated to the comparison of different variants of this error 
model [4], there are two principal possibilities to implement the idea of 
combining additive and proportional error. The variant implemented in the 
proposed patch assumes that the sources of the additive and the proportional 
component are independent. An alternative variant would be

s2(v) = (t1 + t2*abs(v))^2

However, I have less frequently found that alternative proposal in the 
literature, and I also think that it makes sense to assume independent sources 
of the two components.

I think that adding the possibility to specify this error model greatly 
enhances the potential of the nlme package in the area of generalised linear 
models (gls), generalised nonlinear models (gnls) and, last but not least, 
generalised nonlinear mixed effects models (nlme).

In addition, the patch is rather unobtrusive, as it only adds a further 
variance function structure. The documentation contains an example application 
using gnls(), and there is a test using nlme() and group dependent values for 
t1 and t2.

Therefore, I would recommend the proposed patch for your kind consideration.

Johannes Ranke

[1] https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17954
[2] https://doi.org/10.1093/clinchem/24.11.1895
[3] https://doi.org/10.1016/j.aca.2003.12.047
[4] https://doi.org/10.1016/j.ejps.2017.05.021
[5] https://doi.org/10.3390/environments6120124
[6] https://pkgdown.jrwb.de/mkin/dev/reference/sigma_twocomp.html
[7] https://doi.org/10.1201/b17203


From @zwj|08 @end|ng |rom gm@||@com  Thu Oct 29 14:53:52 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Thu, 29 Oct 2020 21:53:52 +0800
Subject: [Rd] Something is wrong with the unserialize function
Message-ID: <CAGiFhPNM6hN76y-1iSjK=HygNFSEtTxLTGW6VjXL0Vi_qwZOWQ@mail.gmail.com>

Hi all,

I am not able to export an ALTREP object when `gctorture` is on in the
worker. The package simplemmap can be used to reproduce the problem. See
the example below
```
## Create a temporary file
filePath <- tempfile()
con <- file(filePath, "wrb")
writeBin(rep(0.0,10),con)
close(con)

library(simplemmap)
library(parallel)
cl <- makeCluster(1)
x <- mmap(filePath, "double")
## Turn gctorture on
clusterEvalQ(cl, gctorture())
clusterExport(cl, "x")
## x is an 0-length vector on the worker
clusterEvalQ(cl, x)
stopCluster(cl)
```

you can find more info on the problem if you manually build a connection
between two R processes and export the ALTREP object. See output below
```
> con <- socketConnection(port = 1234,server = FALSE)
> gctorture()
> x <- unserialize(con)
Warning message:
In unserialize(con) :
  cannot unserialize ALTVEC object of class 'mmap_real' from package
'simplemmap'; returning length zero vector
```
It seems like  simplemmap did not get loaded correctly on the worker. If
you run `library( simplemmap)` before unserializing the ALTREP, there will
be no problem. But I suppose we should be able to unserialize objects
without preloading the library?

This issue can be reproduced on Ubuntu with R version 4.0.2 (2020-06-22)
and Windows with R Under development (unstable) (2020-09-03 r79126).

Here is the link to simplemmap:
https://github.com/ALTREP-examples/Rpkg-simplemmap

Best,
Jiefei

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Oct 29 17:46:46 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 29 Oct 2020 11:46:46 -0500 (CDT)
Subject: [Rd] 
 [External]  Something is wrong with the unserialize function
In-Reply-To: <CAGiFhPNM6hN76y-1iSjK=HygNFSEtTxLTGW6VjXL0Vi_qwZOWQ@mail.gmail.com>
References: <CAGiFhPNM6hN76y-1iSjK=HygNFSEtTxLTGW6VjXL0Vi_qwZOWQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2010291142300.3311@luke-Latitude-7480>

Thanks for the report. Will look into it when I get a chance unless
someone else gets there first.

A simpler reprex:

## create and serialize a memmory-mapped file object
filePath <- "x.dat"
con <- file(filePath, "wrb")
writeBin(rep(0.0,10),con)
close(con)

library(simplemmap)
x <- mmap(filePath, "double")
saveRDS(x, file = "x.Rds")

## in a separate R process:
gctorture()
readRDS("x.Rds")

Looks like a missing PROTECT somewhere.

Best,

luke

On Thu, 29 Oct 2020, Jiefei Wang wrote:

> Hi all,
>
> I am not able to export an ALTREP object when `gctorture` is on in the
> worker. The package simplemmap can be used to reproduce the problem. See
> the example below
> ```
> ## Create a temporary file
> filePath <- tempfile()
> con <- file(filePath, "wrb")
> writeBin(rep(0.0,10),con)
> close(con)
>
> library(simplemmap)
> library(parallel)
> cl <- makeCluster(1)
> x <- mmap(filePath, "double")
> ## Turn gctorture on
> clusterEvalQ(cl, gctorture())
> clusterExport(cl, "x")
> ## x is an 0-length vector on the worker
> clusterEvalQ(cl, x)
> stopCluster(cl)
> ```
>
> you can find more info on the problem if you manually build a connection
> between two R processes and export the ALTREP object. See output below
> ```
>> con <- socketConnection(port = 1234,server = FALSE)
>> gctorture()
>> x <- unserialize(con)
> Warning message:
> In unserialize(con) :
>  cannot unserialize ALTVEC object of class 'mmap_real' from package
> 'simplemmap'; returning length zero vector
> ```
> It seems like  simplemmap did not get loaded correctly on the worker. If
> you run `library( simplemmap)` before unserializing the ALTREP, there will
> be no problem. But I suppose we should be able to unserialize objects
> without preloading the library?
>
> This issue can be reproduced on Ubuntu with R version 4.0.2 (2020-06-22)
> and Windows with R Under development (unstable) (2020-09-03 r79126).
>
> Here is the link to simplemmap:
> https://github.com/ALTREP-examples/Rpkg-simplemmap
>
> Best,
> Jiefei
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Thu Oct 29 18:10:29 2020
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Thu, 29 Oct 2020 17:10:29 +0000
Subject: [Rd] 
 [External]  Something is wrong with the unserialize function
In-Reply-To: <alpine.DEB.2.21.2010291142300.3311@luke-Latitude-7480>
References: <CAGiFhPNM6hN76y-1iSjK=HygNFSEtTxLTGW6VjXL0Vi_qwZOWQ@mail.gmail.com>
 <alpine.DEB.2.21.2010291142300.3311@luke-Latitude-7480>
Message-ID: <BL0PR04MB660923F2868C61708EF71E9AF9140@BL0PR04MB6609.namprd04.prod.outlook.com>

This

Index: src/main/altrep.c
===================================================================
--- src/main/altrep.c	(revision 79385)
+++ src/main/altrep.c	(working copy)
@@ -275,10 +275,11 @@
 	SEXP psym = ALTREP_SERIALIZED_CLASS_PKGSYM(info);
 	SEXP class = LookupClass(csym, psym);
 	if (class == NULL) {
-	    SEXP pname = ScalarString(PRINTNAME(psym));
+	    SEXP pname = PROTECT(ScalarString(PRINTNAME(psym)));
 	    R_tryCatchError(find_namespace, pname,
 			    handle_namespace_error, NULL);
 	    class = LookupClass(csym, psym);
+	    UNPROTECT(1);
 	}
 	return class;
     }

seems to remove the warning; I'm guessing that the other SEXP already exist so don't need protecting?

Martin Morgan


?On 10/29/20, 12:47 PM, "R-devel on behalf of luke-tierney at uiowa.edu" <r-devel-bounces at r-project.org on behalf of luke-tierney at uiowa.edu> wrote:

    Thanks for the report. Will look into it when I get a chance unless
    someone else gets there first.

    A simpler reprex:

    ## create and serialize a memmory-mapped file object
    filePath <- "x.dat"
    con <- file(filePath, "wrb")
    writeBin(rep(0.0,10),con)
    close(con)

    library(simplemmap)
    x <- mmap(filePath, "double")
    saveRDS(x, file = "x.Rds")

    ## in a separate R process:
    gctorture()
    readRDS("x.Rds")

    Looks like a missing PROTECT somewhere.

    Best,

    luke

    On Thu, 29 Oct 2020, Jiefei Wang wrote:

    > Hi all,
    >
    > I am not able to export an ALTREP object when `gctorture` is on in the
    > worker. The package simplemmap can be used to reproduce the problem. See
    > the example below
    > ```
    > ## Create a temporary file
    > filePath <- tempfile()
    > con <- file(filePath, "wrb")
    > writeBin(rep(0.0,10),con)
    > close(con)
    >
    > library(simplemmap)
    > library(parallel)
    > cl <- makeCluster(1)
    > x <- mmap(filePath, "double")
    > ## Turn gctorture on
    > clusterEvalQ(cl, gctorture())
    > clusterExport(cl, "x")
    > ## x is an 0-length vector on the worker
    > clusterEvalQ(cl, x)
    > stopCluster(cl)
    > ```
    >
    > you can find more info on the problem if you manually build a connection
    > between two R processes and export the ALTREP object. See output below
    > ```
    >> con <- socketConnection(port = 1234,server = FALSE)
    >> gctorture()
    >> x <- unserialize(con)
    > Warning message:
    > In unserialize(con) :
    >  cannot unserialize ALTVEC object of class 'mmap_real' from package
    > 'simplemmap'; returning length zero vector
    > ```
    > It seems like  simplemmap did not get loaded correctly on the worker. If
    > you run `library( simplemmap)` before unserializing the ALTREP, there will
    > be no problem. But I suppose we should be able to unserialize objects
    > without preloading the library?
    >
    > This issue can be reproduced on Ubuntu with R version 4.0.2 (2020-06-22)
    > and Windows with R Under development (unstable) (2020-09-03 r79126).
    >
    > Here is the link to simplemmap:
    > https://github.com/ALTREP-examples/Rpkg-simplemmap
    >
    > Best,
    > Jiefei
    >
    > 	[[alternative HTML version deleted]]
    >
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel
    >

    -- 
    Luke Tierney
    Ralph E. Wareham Professor of Mathematical Sciences
    University of Iowa                  Phone:             319-335-3386
    Department of Statistics and        Fax:               319-335-3017
        Actuarial Science
    241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
    Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel

From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Oct 29 18:42:50 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 29 Oct 2020 12:42:50 -0500 (CDT)
Subject: [Rd] 
 [External]  Something is wrong with the unserialize function
In-Reply-To: <BL0PR04MB660923F2868C61708EF71E9AF9140@BL0PR04MB6609.namprd04.prod.outlook.com>
References: <CAGiFhPNM6hN76y-1iSjK=HygNFSEtTxLTGW6VjXL0Vi_qwZOWQ@mail.gmail.com>
 <alpine.DEB.2.21.2010291142300.3311@luke-Latitude-7480>
 <BL0PR04MB660923F2868C61708EF71E9AF9140@BL0PR04MB6609.namprd04.prod.outlook.com>
Message-ID: <alpine.DEB.2.21.2010291233301.3311@luke-Latitude-7480>

I found that also; fixed in r79386 in the trunk. Will port to R-patched
shortly.

Best,

luke

On Thu, 29 Oct 2020, Martin Morgan wrote:

> This
>
> Index: src/main/altrep.c
> ===================================================================
> --- src/main/altrep.c	(revision 79385)
> +++ src/main/altrep.c	(working copy)
> @@ -275,10 +275,11 @@
> 	SEXP psym = ALTREP_SERIALIZED_CLASS_PKGSYM(info);
> 	SEXP class = LookupClass(csym, psym);
> 	if (class == NULL) {
> -	    SEXP pname = ScalarString(PRINTNAME(psym));
> +	    SEXP pname = PROTECT(ScalarString(PRINTNAME(psym)));
> 	    R_tryCatchError(find_namespace, pname,
> 			    handle_namespace_error, NULL);
> 	    class = LookupClass(csym, psym);
> +	    UNPROTECT(1);
> 	}
> 	return class;
>     }
>
> seems to remove the warning; I'm guessing that the other SEXP already exist so don't need protecting?
>
> Martin Morgan
>
>
> ?On 10/29/20, 12:47 PM, "R-devel on behalf of luke-tierney at uiowa.edu" <r-devel-bounces at r-project.org on behalf of luke-tierney at uiowa.edu> wrote:
>
>    Thanks for the report. Will look into it when I get a chance unless
>    someone else gets there first.
>
>    A simpler reprex:
>
>    ## create and serialize a memmory-mapped file object
>    filePath <- "x.dat"
>    con <- file(filePath, "wrb")
>    writeBin(rep(0.0,10),con)
>    close(con)
>
>    library(simplemmap)
>    x <- mmap(filePath, "double")
>    saveRDS(x, file = "x.Rds")
>
>    ## in a separate R process:
>    gctorture()
>    readRDS("x.Rds")
>
>    Looks like a missing PROTECT somewhere.
>
>    Best,
>
>    luke
>
>    On Thu, 29 Oct 2020, Jiefei Wang wrote:
>
>    > Hi all,
>    >
>    > I am not able to export an ALTREP object when `gctorture` is on in the
>    > worker. The package simplemmap can be used to reproduce the problem. See
>    > the example below
>    > ```
>    > ## Create a temporary file
>    > filePath <- tempfile()
>    > con <- file(filePath, "wrb")
>    > writeBin(rep(0.0,10),con)
>    > close(con)
>    >
>    > library(simplemmap)
>    > library(parallel)
>    > cl <- makeCluster(1)
>    > x <- mmap(filePath, "double")
>    > ## Turn gctorture on
>    > clusterEvalQ(cl, gctorture())
>    > clusterExport(cl, "x")
>    > ## x is an 0-length vector on the worker
>    > clusterEvalQ(cl, x)
>    > stopCluster(cl)
>    > ```
>    >
>    > you can find more info on the problem if you manually build a connection
>    > between two R processes and export the ALTREP object. See output below
>    > ```
>    >> con <- socketConnection(port = 1234,server = FALSE)
>    >> gctorture()
>    >> x <- unserialize(con)
>    > Warning message:
>    > In unserialize(con) :
>    >  cannot unserialize ALTVEC object of class 'mmap_real' from package
>    > 'simplemmap'; returning length zero vector
>    > ```
>    > It seems like  simplemmap did not get loaded correctly on the worker. If
>    > you run `library( simplemmap)` before unserializing the ALTREP, there will
>    > be no problem. But I suppose we should be able to unserialize objects
>    > without preloading the library?
>    >
>    > This issue can be reproduced on Ubuntu with R version 4.0.2 (2020-06-22)
>    > and Windows with R Under development (unstable) (2020-09-03 r79126).
>    >
>    > Here is the link to simplemmap:
>    > https://github.com/ALTREP-examples/Rpkg-simplemmap
>    >
>    > Best,
>    > Jiefei
>    >
>    > 	[[alternative HTML version deleted]]
>    >
>    > ______________________________________________
>    > R-devel at r-project.org mailing list
>    > https://stat.ethz.ch/mailman/listinfo/r-devel
>    >
>
>    --
>    Luke Tierney
>    Ralph E. Wareham Professor of Mathematical Sciences
>    University of Iowa                  Phone:             319-335-3386
>    Department of Statistics and        Fax:               319-335-3017
>        Actuarial Science
>    241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>    Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
>    ______________________________________________
>    R-devel at r-project.org mailing list
>    https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From @zwj|08 @end|ng |rom gm@||@com  Fri Oct 30 00:53:23 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Fri, 30 Oct 2020 07:53:23 +0800
Subject: [Rd] 
 [External] Something is wrong with the unserialize function
In-Reply-To: <alpine.DEB.2.21.2010291233301.3311@luke-Latitude-7480>
References: <CAGiFhPNM6hN76y-1iSjK=HygNFSEtTxLTGW6VjXL0Vi_qwZOWQ@mail.gmail.com>
 <alpine.DEB.2.21.2010291142300.3311@luke-Latitude-7480>
 <BL0PR04MB660923F2868C61708EF71E9AF9140@BL0PR04MB6609.namprd04.prod.outlook.com>
 <alpine.DEB.2.21.2010291233301.3311@luke-Latitude-7480>
Message-ID: <CAGiFhPNFGyPikB5gXqvp_fvn2HOGvkC6DC9cD+4VQiJrGZxWEw@mail.gmail.com>

Thanks for the fix! I will wait for the update and try it again.

Best,
Jiefei

On Fri, Oct 30, 2020 at 1:42 AM <luke-tierney at uiowa.edu> wrote:

> I found that also; fixed in r79386 in the trunk. Will port to R-patched
> shortly.
>
> Best,
>
> luke
>
> On Thu, 29 Oct 2020, Martin Morgan wrote:
>
> > This
> >
> > Index: src/main/altrep.c
> > ===================================================================
> > --- src/main/altrep.c (revision 79385)
> > +++ src/main/altrep.c (working copy)
> > @@ -275,10 +275,11 @@
> >       SEXP psym = ALTREP_SERIALIZED_CLASS_PKGSYM(info);
> >       SEXP class = LookupClass(csym, psym);
> >       if (class == NULL) {
> > -         SEXP pname = ScalarString(PRINTNAME(psym));
> > +         SEXP pname = PROTECT(ScalarString(PRINTNAME(psym)));
> >           R_tryCatchError(find_namespace, pname,
> >                           handle_namespace_error, NULL);
> >           class = LookupClass(csym, psym);
> > +         UNPROTECT(1);
> >       }
> >       return class;
> >     }
> >
> > seems to remove the warning; I'm guessing that the other SEXP already
> exist so don't need protecting?
> >
> > Martin Morgan
> >
> >
> > ?On 10/29/20, 12:47 PM, "R-devel on behalf of luke-tierney at uiowa.edu" <
> r-devel-bounces at r-project.org on behalf of luke-tierney at uiowa.edu> wrote:
> >
> >    Thanks for the report. Will look into it when I get a chance unless
> >    someone else gets there first.
> >
> >    A simpler reprex:
> >
> >    ## create and serialize a memmory-mapped file object
> >    filePath <- "x.dat"
> >    con <- file(filePath, "wrb")
> >    writeBin(rep(0.0,10),con)
> >    close(con)
> >
> >    library(simplemmap)
> >    x <- mmap(filePath, "double")
> >    saveRDS(x, file = "x.Rds")
> >
> >    ## in a separate R process:
> >    gctorture()
> >    readRDS("x.Rds")
> >
> >    Looks like a missing PROTECT somewhere.
> >
> >    Best,
> >
> >    luke
> >
> >    On Thu, 29 Oct 2020, Jiefei Wang wrote:
> >
> >    > Hi all,
> >    >
> >    > I am not able to export an ALTREP object when `gctorture` is on in
> the
> >    > worker. The package simplemmap can be used to reproduce the
> problem. See
> >    > the example below
> >    > ```
> >    > ## Create a temporary file
> >    > filePath <- tempfile()
> >    > con <- file(filePath, "wrb")
> >    > writeBin(rep(0.0,10),con)
> >    > close(con)
> >    >
> >    > library(simplemmap)
> >    > library(parallel)
> >    > cl <- makeCluster(1)
> >    > x <- mmap(filePath, "double")
> >    > ## Turn gctorture on
> >    > clusterEvalQ(cl, gctorture())
> >    > clusterExport(cl, "x")
> >    > ## x is an 0-length vector on the worker
> >    > clusterEvalQ(cl, x)
> >    > stopCluster(cl)
> >    > ```
> >    >
> >    > you can find more info on the problem if you manually build a
> connection
> >    > between two R processes and export the ALTREP object. See output
> below
> >    > ```
> >    >> con <- socketConnection(port = 1234,server = FALSE)
> >    >> gctorture()
> >    >> x <- unserialize(con)
> >    > Warning message:
> >    > In unserialize(con) :
> >    >  cannot unserialize ALTVEC object of class 'mmap_real' from package
> >    > 'simplemmap'; returning length zero vector
> >    > ```
> >    > It seems like  simplemmap did not get loaded correctly on the
> worker. If
> >    > you run `library( simplemmap)` before unserializing the ALTREP,
> there will
> >    > be no problem. But I suppose we should be able to unserialize
> objects
> >    > without preloading the library?
> >    >
> >    > This issue can be reproduced on Ubuntu with R version 4.0.2
> (2020-06-22)
> >    > and Windows with R Under development (unstable) (2020-09-03 r79126).
> >    >
> >    > Here is the link to simplemmap:
> >    > https://github.com/ALTREP-examples/Rpkg-simplemmap
> >    >
> >    > Best,
> >    > Jiefei
> >    >
> >    >  [[alternative HTML version deleted]]
> >    >
> >    > ______________________________________________
> >    > R-devel at r-project.org mailing list
> >    > https://stat.ethz.ch/mailman/listinfo/r-devel
> >    >
> >
> >    --
> >    Luke Tierney
> >    Ralph E. Wareham Professor of Mathematical Sciences
> >    University of Iowa                  Phone:             319-335-3386
> >    Department of Statistics and        Fax:               319-335-3017
> >        Actuarial Science
> >    241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> >    Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >
> >    ______________________________________________
> >    R-devel at r-project.org mailing list
> >    https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri Oct 30 07:08:34 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 30 Oct 2020 06:08:34 +0000
Subject: [Rd] Change to I() in R 4.1
In-Reply-To: <24470.47247.523768.77391@stat.math.ethz.ch>
References: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>
 <24470.47247.523768.77391@stat.math.ethz.ch>
Message-ID: <d317753c-f282-f291-5e95-87c3f604ad68@fredhutch.org>

Hi Martin,

On 10/26/20 04:52, Martin Maechler wrote:
>>
>> Hi there,
>> Is that change in R-devel intentional?
>>
>>     library(Matrix)
>>     m <- as(matrix(c(0, 1)), "sparseMatrix")
>>
>>     isS4(m)
>>     # [1] TRUE
>>
>>     x <- I(m)
>>     # Warning message:
>>     # In `class<-`(x, unique.default(c("AsIs", oldClass(x)))) :
>>     #   Setting class(x) to multiple strings ("AsIs", "dgCMatrix", ...);
>> result will no longer be an S4 object
>>
>>     isS4(x)
>>     # [1] FALSE
>>
>> This works fine in R 4.0.3 i.e. no warning and I() doesn't turn off the
>> S4 bit of the object.
>>
>> This change breaks 17 Bioconductor packages.
>>
>> Seems that the culprit is this change in how I() is implemented:
>>
>> In R 4.0.3:
>>
>>     > I
>>     function (x)
>>     {
>>       structure(x, class = unique(c("AsIs", oldClass(x))))
>>     }
>>
>> In R devel:
>>
>>     > I
>>     function (x)
>>     `class<-`(x, unique.default(c("AsIs", oldClass(x))))
> 
> Yes, (by me),  as  I()  was sticking out in the slowness bug PR#17794
>    https://urldefense.proofpoint.com/v2/url?u=https-3A__bugs.r-2Dproject.org_bugzilla_show-5Fbug.cgi-3Fid-3D17794&d=DwIDAw&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=ej3wnc10LiheZsqjRuonTr2WwHWU4ecaDSrTBFby8wU&s=isOqEV-_6Yk1PlRZBoBchZHZYnpQxPGEZdZPgTHMkKg&e=
> 
> and the direct dangerous  `call<-`  will be replaced happily in
> I()'s definition.
> 
> *But* as Luke Tierney had remarked to R-core, direct changing of
> the class of an S4 object has given the above warning for a
> quite while, (svn r47934 | jmc | 2009-02-17 )
> *and* it has rather been an inconsistency in R, that you could
> still use "low-level" means to change the class of an S4 object
> to something invalid.
> 
> I really don't think people should be allowed to use I() to
> change a valid S4 object into an invalid one, but this is what
> happens (R 4.0.3 patched) :
> 
>> require(Matrix); M <- Matrix(0, 2,3); IM <- I(M)
>> validObject(IM)
> Error in .classEnv(classDef) :
>    trying to get slot "package" from an object of a basic class ("NULL") with no slots
>> IM
>   ----------- FAILURE REPORT --------------
>   --- failure: length > 1 in coercion to logical ---
>   --- srcref ---
> :
>   --- package (from environment) ---
> methods
>   --- call from context ---
> showDefault(object)
>   --- call from argument ---
> !is.null(clDef) && isS4(object) && is.na(match(clDef at className,
>      .BasicClasses))
>   --- R stacktrace ---
> where 1: showDefault(object)
> where 2: Error in showDefault(object) :
>    cannot get a slot ("slots") from an object of type "NULL"

The way I interpret this is that 'IM' breaks validObject(). This is not 
exactly the same as saying that 'IM' is invalid.

> 
>> Unfortunately there is a bunch of code around that calls I() on S4
>> objects, admittedly not necessarily for very good reasons, but it
>> happens. Would it be possible that I() has a less destructive effect on
>> S4 objects?
> 
> I'm not sure if this is really desirable... but I may fail to
> see the point of allowing invalid   I(<S4>)  objects as they
> appear in R 4.0.x  ..
> 
> So what do you really propose that  I(.) should be doing, e.g.,
> for  'M'  above ?

To provide some context, people typically use I() when they construct a 
data frame as a way to tell the data frame constructor to treat the 
supplied columns as-is. In Bioconductor we have DataFrame, a 
data-frame-like structure where the columns can be anything, including 
S4 objects, has long they have a vector-like semantic. Like 
data.frame(), the DataFrame() constructor will also treat columns that 
carry the AsIs tag as-is.

A typical use case where this feature is used on an S4 column is to nest 
DataFrame objects. For example, with R 4.0.3:

   library(S4Vectors)
   df <- DataFrame(X=1:3, Y=letters[1:3])

   DataFrame(a=df, Z=11:13)
   # DataFrame with 3 rows and 3 columns
   #         a.X         a.Y         Z
   #   <integer> <character> <integer>
   # 1         1           a        11
   # 2         2           b        12
   # 3         3           c        13

But if we wrap 'df' in I():

   DataFrame(a=I(df), Z=11:13)
   # DataFrame with 3 rows and 2 columns
   #             a         Z
   #   <DataFrame> <integer>
   # 1         1:a        11
   # 2         2:b        12
   # 3         3:c        13

'df' ends up in the 1st column of the returned DataFrame.

AFAICT the fact that wrapping 'df' in I() was producing some kind of 
Frankenstein object that breaks validObject() has never been a problem 
in practice because the Dataframe() constructor immediately removes the 
AsIs tag internally. This restores the original object. Note that this 
is an important difference with data.frame() where the AsIs tag sticks 
around:

   class(DataFrame(a=I(letters))$a)
   # [1] "character"

   class(data.frame(a=I(letters))$a)
   # [1] "AsIs"

Now the new behavior of I() makes a little bit more damage to an S4 
object. In addition to breaking validObject(), like the old behavior 
did, it removes its S4 bit. This means that after removing the AsIs tag, 
the DataFrame() constructor now will also need to repair the object 
(with asS4(), which I just discovered today). This is not too bad and we 
could do that. However the problem would remain that now users get an 
ugly/obscure warning when they do things like:

   DataFrame(a=I(df), Z=11:13).

I can think of 2 ways to move forward:

1. Keep I()'s current implementation but suppress the warning. We'll 
make the necessary adjustments to DataFrame() to repair columns supplied 
as I(<S4>) objects. Note that we would still be in the situation where 
I(<S4>) objects break validObject() but we've been in that situation for 
years and so far we've managed to work around it. However this doesn't 
mean that validObject() shouldn't be fixed. Note that print(I(<S4>)) 
would also need to be fixed (it says "<S4 Type Object>" which is 
misleading). Anyways, these 2 issues are separated from the main issue 
and can be dealt with later.

2. Completely revisit the behavior of I() on S4 objects. Maybe it 
shouldn't touch the class of the object, only add an attribute e.g. 
attr(M, "AsIs") <- TRUE. This would obviously be an important change, 
with the potential to break a lot of existing code. In particular, using 
inherits(x, "AsIs") would no longer be a reliable way to check for the 
presence of the AsIs tag so a dedicated function would probably be 
needed e.g. is.AsIs(). Furthermore, at some point in the future, maybe 
the attribute approach could be extended to everything, not just S4 
objects. Right now I() breaks S4 method dispatch, not only on S4 objects:

   setGeneric("foo", function(x) standardGeneric("foo"))
   setMethod("foo", "dgCMatrix", function(x) 123)

   foo(M)
   # [1] 123

   foo(IM)
   # Error in (function (classes, fdef, mtable)  :
   #   unable to find an inherited method for function ?foo? for 
signature ?"AsIs"?

but also on S3 objects:

   setMethod("foo", "character", function(x) 456)

   foo(letters)
   # [1] 456

   foo(I(letters))
   # Error in (function (classes, fdef, mtable)  :
   #   unable to find an inherited method for function ?foo? for 
signature ?"AsIs"?

So I would argue that the current class-based approach of I() is 
hopelessly broken and that an attribute-based approach would be cleaner.

Thanks,
H.


> 
> Martin
> 
> 
>>
>> Thanks,
>> H.
>>
>>   > sessionInfo()
>> R Under development (unstable) (2020-10-17 r79346)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Ubuntu 20.04.1 LTS
>>
>> Matrix products: default
>> BLAS:   /home/biocbuild/bbs-3.13-bioc/R/lib/libRblas.so
>> LAPACK: /home/biocbuild/bbs-3.13-bioc/R/lib/libRlapack.so
>>
>> locale:
>>    [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>>    [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>>    [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>>    [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>>    [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> other attached packages:
>> [1] Matrix_1.2-18
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.1.0  grid_4.1.0      lattice_0.20-41
>>
>> -- 
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIDAw&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=ej3wnc10LiheZsqjRuonTr2WwHWU4ecaDSrTBFby8wU&s=eSd-I3vlksMkH9SQjlruGL9bsHgTkUb1m7dG3OuVNAw&e=

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Fri Oct 30 10:33:26 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Fri, 30 Oct 2020 10:33:26 +0100
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <c0aeb24d-62bf-46b6-bbd9-c91e884f7906@fau.de>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
 <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
 <CAC2h7uv=Ks8-8Dm4XbAUOphM3TJc8UJGyD2+DTvVgs6mVDF9Rg@mail.gmail.com>
 <CAC2h7usvDomT3LWwyaGcgE73dmvv8ArUcUMe+AtjW+X_KC+2dg@mail.gmail.com>
 <c0aeb24d-62bf-46b6-bbd9-c91e884f7906@fau.de>
Message-ID: <CAC2h7uvjX-S2s1sk0bATiNNcADOK7Co4Eu9RZV9FG0SEBGbDJg@mail.gmail.com>

On Fri, Oct 23, 2020 at 11:10 AM Sebastian Meyer <seb.meyer at fau.de> wrote:

> Yes, you are absolutely right and I'm pretty sure this will be fixed in
> one way or another.
>
> IMO, the failing test should simply use all.equal.POSIXt's new argument
> check.tzone=FALSE.
>

I agree that this is a simple fix and I am wondering why it hasn't been
implemented. I will request access to bugzilla so I can file a bug report.

Best,
Kasper

	[[alternative HTML version deleted]]


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Fri Oct 30 11:24:33 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Fri, 30 Oct 2020 11:24:33 +0100
Subject: [Rd] bug report for make check
Message-ID: <CAC2h7uvMt+Eyd7=ppR2HtZgpCeVyBc6ufJG2ghYK6HaL-RyDgw@mail.gmail.com>

I would like to request access to bugzilla to file a bug report on make
check for R-devel.

Following changes to all.equal.POSIXt,
  make check
now reports an error if the environment variable TZ is set to
  TZ="US/Eastern"
(and likely other values). This can be addressed by using the argument
check.tzone=FALSE in the call to all.equal.POSIXt in reg-tests-2.R. A patch
has been posted by Sebastian Meyer in the R-devel thread "timezone tests
and R-devel".

-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Oct 30 11:38:16 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 30 Oct 2020 11:38:16 +0100
Subject: [Rd] bug report for make check
In-Reply-To: <CAC2h7uvMt+Eyd7=ppR2HtZgpCeVyBc6ufJG2ghYK6HaL-RyDgw@mail.gmail.com>
References: <CAC2h7uvMt+Eyd7=ppR2HtZgpCeVyBc6ufJG2ghYK6HaL-RyDgw@mail.gmail.com>
Message-ID: <bee4b0dc-58e8-137c-5e27-0719bffaee1d@gmail.com>

Dear Kasper,

if you want to submit a bug via bugzilla, please first read

https://www.r-project.org/bugs.html

and you will learn there that there is an email address to use when 
asking for an account, not all R-devel mailing list readers need to read 
that.

Moreover, I can see you already have an account in R bugzilla.

Moreover, bugs can be reported also on R-devel mailing list and this has 
been reported already several times, we are working on it, it is not 
clear what is the right way to fix this.

Thanks for your patience,
Tomas

On 10/30/20 11:24 AM, Kasper Daniel Hansen wrote:
> I would like to request access to bugzilla to file a bug report on make
> check for R-devel.
>
> Following changes to all.equal.POSIXt,
>    make check
> now reports an error if the environment variable TZ is set to
>    TZ="US/Eastern"
> (and likely other values). This can be addressed by using the argument
> check.tzone=FALSE in the call to all.equal.POSIXt in reg-tests-2.R. A patch
> has been posted by Sebastian Meyer in the R-devel thread "timezone tests
> and R-devel".
>


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Fri Oct 30 12:00:54 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Fri, 30 Oct 2020 12:00:54 +0100
Subject: [Rd] bug report for make check
In-Reply-To: <bee4b0dc-58e8-137c-5e27-0719bffaee1d@gmail.com>
References: <CAC2h7uvMt+Eyd7=ppR2HtZgpCeVyBc6ufJG2ghYK6HaL-RyDgw@mail.gmail.com>
 <bee4b0dc-58e8-137c-5e27-0719bffaee1d@gmail.com>
Message-ID: <CAC2h7uvO5dYdLf6G+FaM8x0bhp6MuduprQExKL2TB3SwN5E-nw@mail.gmail.com>

Thanks, I'm going to shut up then.

Despite having been reported multiple times, it was not at all clear to me
that this was being worked on with the intention of addressing make check -
that is one of the limitations of the communication system we use.

Best,
Kasper

On Fri, Oct 30, 2020 at 11:38 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> Dear Kasper,
>
> if you want to submit a bug via bugzilla, please first read
>
> https://www.r-project.org/bugs.html
>
> and you will learn there that there is an email address to use when
> asking for an account, not all R-devel mailing list readers need to read
> that.
>
> Moreover, I can see you already have an account in R bugzilla.
>
> Moreover, bugs can be reported also on R-devel mailing list and this has
> been reported already several times, we are working on it, it is not
> clear what is the right way to fix this.
>
> Thanks for your patience,
> Tomas
>
> On 10/30/20 11:24 AM, Kasper Daniel Hansen wrote:
> > I would like to request access to bugzilla to file a bug report on make
> > check for R-devel.
> >
> > Following changes to all.equal.POSIXt,
> >    make check
> > now reports an error if the environment variable TZ is set to
> >    TZ="US/Eastern"
> > (and likely other values). This can be addressed by using the argument
> > check.tzone=FALSE in the call to all.equal.POSIXt in reg-tests-2.R. A
> patch
> > has been posted by Sebastian Meyer in the R-devel thread "timezone tests
> > and R-devel".
> >
>
>

-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri Oct 30 18:23:42 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 30 Oct 2020 17:23:42 +0000
Subject: [Rd] Change to I() in R 4.1
In-Reply-To: <d317753c-f282-f291-5e95-87c3f604ad68@fredhutch.org>
References: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>
 <24470.47247.523768.77391@stat.math.ethz.ch>
 <d317753c-f282-f291-5e95-87c3f604ad68@fredhutch.org>
Message-ID: <53d09c71-9123-ae3c-aa09-ba721893fab2@fredhutch.org>


On 10/29/20 23:08, Pages, Herve wrote:
...
> 
> I can think of 2 ways to move forward:
> 
> 1. Keep I()'s current implementation but suppress the warning. We'll
> make the necessary adjustments to DataFrame() to repair columns supplied
> as I(<S4>) objects. Note that we would still be in the situation where
> I(<S4>) objects break validObject() but we've been in that situation for
> years and so far we've managed to work around it. However this doesn't
> mean that validObject() shouldn't be fixed. Note that print(I(<S4>))
> would also need to be fixed (it says "<S4 Type Object>" which is
> misleading). Anyways, these 2 issues are separated from the main issue
> and can be dealt with later.

1b. A variant of the above could be to use the old implementation for S4 
objects only:

   I <- function(x)
   {
       if (isS4(x)) {
           structure(x, class = unique.default(c("AsIs", oldClass(x))))
       } else {
           `class<-`(x, unique.default(c("AsIs", oldClass(x))))
       }
   }

That is probably a good compromise for now.

I would also suggest that the "package" attribute of the S4 class be 
kept around so the code that we use to restore the original object has a 
way to restore it exactly, including its full class specification. Right 
now, and also with the previous implementation, we cannot do that 
because attr(class(x), "package") is lost. So something like this:

   I <- function(x)
   {
       if (isS4(x)) {
           x_class <- class(x)
           new_classes <- c("AsIs", x_class)
           attr(new_classes, "package") <- attr(x_class, "package")
           structure(x, class=new_classes)
       } else {
           `class<-`(x, unique.default(c("AsIs", oldClass(x))))
       }
   }

Thanks,
H.


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Oct 30 18:48:24 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 30 Oct 2020 12:48:24 -0500 (CDT)
Subject: [Rd] [External] Re:  Change to I() in R 4.1
In-Reply-To: <53d09c71-9123-ae3c-aa09-ba721893fab2@fredhutch.org>
References: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>
 <24470.47247.523768.77391@stat.math.ethz.ch>
 <d317753c-f282-f291-5e95-87c3f604ad68@fredhutch.org>
 <53d09c71-9123-ae3c-aa09-ba721893fab2@fredhutch.org>
Message-ID: <alpine.DEB.2.21.2010301229160.3311@luke-Latitude-7480>

On Fri, 30 Oct 2020, Pages, Herve wrote:

>
> On 10/29/20 23:08, Pages, Herve wrote:
> ...
>>
>> I can think of 2 ways to move forward:
>>
>> 1. Keep I()'s current implementation but suppress the warning. We'll
>> make the necessary adjustments to DataFrame() to repair columns supplied
>> as I(<S4>) objects. Note that we would still be in the situation where
>> I(<S4>) objects break validObject() but we've been in that situation for
>> years and so far we've managed to work around it. However this doesn't
>> mean that validObject() shouldn't be fixed. Note that print(I(<S4>))
>> would also need to be fixed (it says "<S4 Type Object>" which is
>> misleading). Anyways, these 2 issues are separated from the main issue
>> and can be dealt with later.
>
> 1b. A variant of the above could be to use the old implementation for S4
> objects only:
>
>   I <- function(x)
>   {
>       if (isS4(x)) {
>           structure(x, class = unique.default(c("AsIs", oldClass(x))))
>       } else {
>           `class<-`(x, unique.default(c("AsIs", oldClass(x))))
>       }
>   }
>
> That is probably a good compromise for now.

Not really. The underlying problem is that class<- and attributes<-
(which is what structure() uses) handle the 'class' attribute
differently, and that needs to be fixed. I don't have a strong opinion
on what either should do, but they should do the same thing.

It's probably worth re-thinking the I() mechanism. ?Modifying the
value, whether by changing the class or an attribute, is going to be
brittle. A little less so for an attribute, but using an attribute
rules out dispatch on the AsIs property.

Best,

luke

>
> I would also suggest that the "package" attribute of the S4 class be
> kept around so the code that we use to restore the original object has a
> way to restore it exactly, including its full class specification. Right
> now, and also with the previous implementation, we cannot do that
> because attr(class(x), "package") is lost. So something like this:
>
>   I <- function(x)
>   {
>       if (isS4(x)) {
>           x_class <- class(x)
>           new_classes <- c("AsIs", x_class)
>           attr(new_classes, "package") <- attr(x_class, "package")
>           structure(x, class=new_classes)
>       } else {
>           `class<-`(x, unique.default(c("AsIs", oldClass(x))))
>       }
>   }
>
> Thanks,
> H.
>
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From hp@ge@ @end|ng |rom |redhutch@org  Fri Oct 30 19:21:01 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 30 Oct 2020 18:21:01 +0000
Subject: [Rd] [External] Re:  Change to I() in R 4.1
In-Reply-To: <alpine.DEB.2.21.2010301229160.3311@luke-Latitude-7480>
References: <66859e7d-5a7c-86db-1ee1-f61903705c46@fredhutch.org>
 <24470.47247.523768.77391@stat.math.ethz.ch>
 <d317753c-f282-f291-5e95-87c3f604ad68@fredhutch.org>
 <53d09c71-9123-ae3c-aa09-ba721893fab2@fredhutch.org>
 <alpine.DEB.2.21.2010301229160.3311@luke-Latitude-7480>
Message-ID: <d02c701f-86c4-bab8-5716-7a04a084305a@fredhutch.org>



On 10/30/20 10:48, luke-tierney at uiowa.edu wrote:
> On Fri, 30 Oct 2020, Pages, Herve wrote:
> 
>>
>> On 10/29/20 23:08, Pages, Herve wrote:
>> ...
>>>
>>> I can think of 2 ways to move forward:
>>>
>>> 1. Keep I()'s current implementation but suppress the warning. We'll
>>> make the necessary adjustments to DataFrame() to repair columns supplied
>>> as I(<S4>) objects. Note that we would still be in the situation where
>>> I(<S4>) objects break validObject() but we've been in that situation for
>>> years and so far we've managed to work around it. However this doesn't
>>> mean that validObject() shouldn't be fixed. Note that print(I(<S4>))
>>> would also need to be fixed (it says "<S4 Type Object>" which is
>>> misleading). Anyways, these 2 issues are separated from the main issue
>>> and can be dealt with later.
>>
>> 1b. A variant of the above could be to use the old implementation for S4
>> objects only:
>>
>> ? I <- function(x)
>> ? {
>> ????? if (isS4(x)) {
>> ????????? structure(x, class = unique.default(c("AsIs", oldClass(x))))
>> ????? } else {
>> ????????? `class<-`(x, unique.default(c("AsIs", oldClass(x))))
>> ????? }
>> ? }
>>
>> That is probably a good compromise for now.
> 
> Not really. The underlying problem is that class<- and attributes<-
> (which is what structure() uses) handle the 'class' attribute
> differently, and that needs to be fixed. I don't have a strong opinion
> on what either should do, but they should do the same thing.

This is why I'm calling this a compromise. Many Bioconductor packages 
are broken right now so this would at least repair them and restore an 
important feature of the DataFrame() constructor, while at the same time 
preserve the speedup for all non-S4 objects that Martin was after when 
he changed I()'s implementation.

> 
> It's probably worth re-thinking the I() mechanism. ?Modifying the
> value, whether by changing the class or an attribute, is going to be
> brittle. A little less so for an attribute, but using an attribute
> rules out dispatch on the AsIs property.

Which was my 2nd proposal. It rules out dispatch but it's not clear why 
you would rely on dispatch for something like this.

Anyways, I personally have no preferences as long as I(<S4>)'s warning 
goes away and attr(class(<S4>), "package") can somehow be propagated.

Thanks,
H.

> 
> Best,
> 
> luke
> 
>>
>> I would also suggest that the "package" attribute of the S4 class be
>> kept around so the code that we use to restore the original object has a
>> way to restore it exactly, including its full class specification. Right
>> now, and also with the previous implementation, we cannot do that
>> because attr(class(x), "package") is lost. So something like this:
>>
>> ? I <- function(x)
>> ? {
>> ????? if (isS4(x)) {
>> ????????? x_class <- class(x)
>> ????????? new_classes <- c("AsIs", x_class)
>> ????????? attr(new_classes, "package") <- attr(x_class, "package")
>> ????????? structure(x, class=new_classes)
>> ????? } else {
>> ????????? `class<-`(x, unique.default(c("AsIs", oldClass(x))))
>> ????? }
>> ? }
>>
>> Thanks,
>> H.
>>
>>
>>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

