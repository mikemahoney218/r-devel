From |kry|ov @end|ng |rom d|@root@org  Tue Oct  8 09:16:52 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 8 Oct 2024 10:16:52 +0300
Subject: [Rd] WRE about R_strtod
Message-ID: <20241008101618.6acf739c@Tarkus>

Hello,

This is what "Writing R extensions" currently says about R_atof and
R_strtod:

>> Function: void R_atof (const char* str)
>> Function: void R_strtod (const char* str, char ** end)
>>
>> Implementations of the C99/POSIX functions atof and strtod which
>> guarantee platform-dependent behaviour, including always using the
>> period as the decimal point aka ?radix character? and converting
>> "NA" to R?s NA_REAL_ . 

Besides the easily fixable return type (void -> double), shouldn't the
documentation mention the fact that, unlike the standard C library
functions, R's parser returns NA_REAL instead of 0 when no conversion
is performed (including for the "NA" string, *end == str)?

Index: doc/manual/R-exts.texi
===================================================================
--- doc/manual/R-exts.texi	(revision 87211)
+++ doc/manual/R-exts.texi	(working copy)
@@ -16482,12 +16482,12 @@
 
 @apifun R_atof
 @apifun R_strtod
- at deftypefun void R_atof (const char* @var{str})
- at deftypefunx void R_strtod (const char* @var{str}, char ** @var{end})
+ at deftypefun double R_atof (const char* @var{str})
+ at deftypefunx double R_strtod (const char* @var{str}, char ** @var{end})
 Implementations of the C99/POSIX functions @code{atof} and @code{strtod}
 which guarantee platform-dependent behaviour, including always using the
-period as the decimal point @emph{aka} `@I{radix character}' and converting
- at code{"NA"} to R's @code{NA_REAL_} .
+period as the decimal point @emph{aka} `@I{radix character}' and returning
+R's @code{NA_REAL_} for all unconverted strings, including @code{"NA"}.
 @end deftypefun
 

-- 
Best regards,
Ivan


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Oct 10 11:04:26 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 10 Oct 2024 11:04:26 +0200
Subject: [Rd] WRE about R_strtod
In-Reply-To: <20241008101618.6acf739c@Tarkus>
References: <20241008101618.6acf739c@Tarkus>
Message-ID: <26375.39066.926653.673190@hornik.net>

>>>>> Ivan Krylov via R-devel writes:

Thanks: changed now.

Best
-k

> Hello,
> This is what "Writing R extensions" currently says about R_atof and
> R_strtod:

>>> Function: void R_atof (const char* str)
>>> Function: void R_strtod (const char* str, char ** end)
>>> 
>>> Implementations of the C99/POSIX functions atof and strtod which
>>> guarantee platform-dependent behaviour, including always using the
>>> period as the decimal point aka ?radix character? and converting
>>> "NA" to R?s NA_REAL_ . 

> Besides the easily fixable return type (void -> double), shouldn't the
> documentation mention the fact that, unlike the standard C library
> functions, R's parser returns NA_REAL instead of 0 when no conversion
> is performed (including for the "NA" string, *end == str)?

> Index: doc/manual/R-exts.texi
> ===================================================================
> --- doc/manual/R-exts.texi	(revision 87211)
> +++ doc/manual/R-exts.texi	(working copy)
> @@ -16482,12 +16482,12 @@
 
>  @apifun R_atof
>  @apifun R_strtod
> - at deftypefun void R_atof (const char* @var{str})
> - at deftypefunx void R_strtod (const char* @var{str}, char ** @var{end})
> + at deftypefun double R_atof (const char* @var{str})
> + at deftypefunx double R_strtod (const char* @var{str}, char ** @var{end})
>  Implementations of the C99/POSIX functions @code{atof} and @code{strtod}
>  which guarantee platform-dependent behaviour, including always using the
> -period as the decimal point @emph{aka} `@I{radix character}' and converting
> - at code{"NA"} to R's @code{NA_REAL_} .
> +period as the decimal point @emph{aka} `@I{radix character}' and returning
> +R's @code{NA_REAL_} for all unconverted strings, including @code{"NA"}.
>  @end deftypefun
 

> -- 
> Best regards,
> Ivan

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct 10 21:53:26 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 10 Oct 2024 20:53:26 +0100
Subject: [Rd] Typo in DateTimeClasses.Rd
Message-ID: <f4eddfe6-0d5d-42f4-bb3c-23e71492faba@sapo.pt>

Hello,

When following a thread that started today [1], I read the documentation 
for DateTimeClasses {base} more carefully and noticed a typo in the 
"Details on POSIXlt" section, in the paragraph right after the 
components list.

The original and corrected are "he" instead of "the".


 From earlier versions of R, he last two components will not be present 
for times in UTC and are platform-dependent.

 From earlier versions of R, the last two components will not be present 
for times in UTC and are platform-dependent.




--- datetimeclasses.rd	2024-03-26 23:02:03.000000000 +0000
+++ datetimeclasses_2.rd	2024-10-10 20:39:16.496162900 +0100
@@ -198,7 +198,7 @@
    }
    The components must be in this order: that was only minimally checked
    prior to \R 4.3.0.  All objects created in \R 4.3.0 have the optional
-  components.  From earlier versions of \R, he last two components will
+  components.  From earlier versions of \R, the last two components will
    not be present for times in UTC and are platform-dependent.  Currently
    \code{gmtoff} is set on almost all current platforms: those based on
    BSD or \code{glibc} (including Linux and macOS) and those using the


Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct 10 21:57:33 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 10 Oct 2024 20:57:33 +0100
Subject: [Rd] Typo in DateTimeClasses.Rd
Message-ID: <c1548f0e-ad3f-4f67-95f5-ea8d2ab22fc6@sapo.pt>

Hello,

In my previous e-mail I forgot the link to the thread I mention.

[1] https://stat.ethz.ch/pipermail/r-help/2024-October/480098.html

Sorry for the mess,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From @eb@meyer @end|ng |rom |@u@de  Thu Oct 10 22:04:47 2024
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Thu, 10 Oct 2024 22:04:47 +0200
Subject: [Rd] Typo in DateTimeClasses.Rd
In-Reply-To: <f4eddfe6-0d5d-42f4-bb3c-23e71492faba@sapo.pt>
References: <f4eddfe6-0d5d-42f4-bb3c-23e71492faba@sapo.pt>
Message-ID: <4c909c1a-c520-40c0-8be0-c7429517c8b9@fau.de>

Thanks, fixed in the trunk.

	Sebastian Meyer


Am 10.10.24 um 21:53 schrieb Rui Barradas:
> Hello,
> 
> When following a thread that started today [1], I read the documentation
> for DateTimeClasses {base} more carefully and noticed a typo in the
> "Details on POSIXlt" section, in the paragraph right after the
> components list.
> 
> The original and corrected are "he" instead of "the".
> 
> 
>   From earlier versions of R, he last two components will not be present
> for times in UTC and are platform-dependent.
> 
>   From earlier versions of R, the last two components will not be present
> for times in UTC and are platform-dependent.
> 
> 
> 
> 
> --- datetimeclasses.rd	2024-03-26 23:02:03.000000000 +0000
> +++ datetimeclasses_2.rd	2024-10-10 20:39:16.496162900 +0100
> @@ -198,7 +198,7 @@
>      }
>      The components must be in this order: that was only minimally checked
>      prior to \R 4.3.0.  All objects created in \R 4.3.0 have the optional
> -  components.  From earlier versions of \R, he last two components will
> +  components.  From earlier versions of \R, the last two components will
>      not be present for times in UTC and are platform-dependent.  Currently
>      \code{gmtoff} is set on almost all current platforms: those based on
>      BSD or \code{glibc} (including Linux and macOS) and those using the
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
>


From pd@|gd @end|ng |rom gm@||@com  Fri Oct 11 10:50:32 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 11 Oct 2024 10:50:32 +0200
Subject: [Rd] R 4.4.2 scheduled for October 31
Message-ID: <7D93F015-8D42-4847-BDF0-88B360816B08@gmail.com>

Full schedule is available on developer.r-project.org (pending update from SVN).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Fri Oct 11 12:27:42 2024
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Fri, 11 Oct 2024 10:27:42 +0000
Subject: [Rd] Error message when calling t.test() and aov() with a factor
 variables
Message-ID: <AS8PR08MB91934F160E97429FAFEB78588B792@AS8PR08MB9193.eurprd08.prod.outlook.com>

Hi all,

Just noticed that the error that arises when calling t.test() with factors could be a bit clearer:

> t.test(factor(c(3,1,2,4,3,5,4,5)), factor(c(2,1,2,3,4,5)))
Error in var(x) : Calling var(x) on a factor x is defunct.
  Use something like 'all(duplicated(x)[-1L])' to test for a constant vector.
In addition: Warning message:
In mean.default(x) :
  argument is not numeric or logical: returning NA

Obviously, using factors as input is nonsense, but this might happen on accident and then the error message could be a bit more on point. Similar for aov():

> aov(factor(c(3,1,2,4,3,5,4,5)) ~ factor(c(2,1,2,2,2,1,2,1)))
Call:
   aov(formula = factor(c(3, 1, 2, 4, 3, 5, 4, 5)) ~ factor(c(2,
    1, 2, 2, 2, 1, 2, 1)))
Error in levels(x)[x] :
  only 0's may be mixed with negative subscripts
In addition: Warning messages:
1: In model.response(mf, "numeric") :
  using type = "numeric" with a factor response will be ignored
2: In Ops.factor(y, z$residuals) : '-' not meaningful for factors

Not a big deal and trying to catch all of the silly things users may do is of course impossible, but for this one adding a check that the (response) variable is actually numeric could be useful.

Best,
Wolfgang

--
Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and
Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD
Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Fri Oct 11 14:18:07 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Fri, 11 Oct 2024 14:18:07 +0200
Subject: [Rd] 
 Error message when calling t.test() and aov() with a factor
 variables
In-Reply-To: <AS8PR08MB91934F160E97429FAFEB78588B792@AS8PR08MB9193.eurprd08.prod.outlook.com>
References: <AS8PR08MB91934F160E97429FAFEB78588B792@AS8PR08MB9193.eurprd08.prod.outlook.com>
Message-ID: <26377.6015.100740.392260@hornik.net>

>>>>> Viechtbauer, Wolfgang (NP) writes:

> Hi all,
> Just noticed that the error that arises when calling t.test() with factors could be a bit clearer:

>> t.test(factor(c(3,1,2,4,3,5,4,5)), factor(c(2,1,2,3,4,5)))
> Error in var(x) : Calling var(x) on a factor x is defunct.
>   Use something like 'all(duplicated(x)[-1L])' to test for a constant vector.
> In addition: Warning message:
> In mean.default(x) :
>   argument is not numeric or logical: returning NA

> Obviously, using factors as input is nonsense, but this might happen on accident and then the error message could be a bit more on point. Similar for aov():

>> aov(factor(c(3,1,2,4,3,5,4,5)) ~ factor(c(2,1,2,2,2,1,2,1)))
> Call:
>    aov(formula = factor(c(3, 1, 2, 4, 3, 5, 4, 5)) ~ factor(c(2,
>     1, 2, 2, 2, 1, 2, 1)))
> Error in levels(x)[x] :
>   only 0's may be mixed with negative subscripts
> In addition: Warning messages:
> 1: In model.response(mf, "numeric") :
>   using type = "numeric" with a factor response will be ignored
> 2: In Ops.factor(y, z$residuals) : '-' not meaningful for factors

> Not a big deal and trying to catch all of the silly things users may
> do is of course impossible, but for this one adding a check that the
> (response) variable is actually numeric could be useful.

Indeed.

As always, the question is whether we want to give an error unless
is.numeric, or ensure via as.numeric?

Best
-k

> Best,
> Wolfgang

> --
> Wolfgang Viechtbauer, PhD, Statistician | Department of Psychiatry and
> Neuropsychology | Maastricht University | PO Box 616 (VIJV1) | 6200 MD
> Maastricht, The Netherlands | +31(43)3884170 | https://www.wvbauer.com

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Fri Oct 11 15:51:36 2024
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Fri, 11 Oct 2024 13:51:36 +0000
Subject: [Rd] 
 Error message when calling t.test() and aov() with a factor
 variables
In-Reply-To: <26377.6015.100740.392260@hornik.net>
References: <AS8PR08MB91934F160E97429FAFEB78588B792@AS8PR08MB9193.eurprd08.prod.outlook.com>
 <26377.6015.100740.392260@hornik.net>
Message-ID: <AS8PR08MB9193F95F26D8FF82DFAC65108B792@AS8PR08MB9193.eurprd08.prod.outlook.com>

> -----Original Message-----
> From: Kurt Hornik <Kurt.Hornik at wu.ac.at>
> Sent: Friday, October 11, 2024 14:18
> To: Viechtbauer, Wolfgang (NP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
> Cc: r-devel <r-devel at r-project.org>
> Subject: Re: [Rd] Error message when calling t.test() and aov() with a factor
> variables
>
> >>>>> Viechtbauer, Wolfgang (NP) writes:
>
> > Hi all,
> > Just noticed that the error that arises when calling t.test() with factors
> could be a bit clearer:
>
> >> t.test(factor(c(3,1,2,4,3,5,4,5)), factor(c(2,1,2,3,4,5)))
> > Error in var(x) : Calling var(x) on a factor x is defunct.
> >   Use something like 'all(duplicated(x)[-1L])' to test for a constant vector.
> > In addition: Warning message:
> > In mean.default(x) :
> >   argument is not numeric or logical: returning NA
>
> > Obviously, using factors as input is nonsense, but this might happen on
> accident and then the error message could be a bit more on point. Similar for
> aov():
>
> >> aov(factor(c(3,1,2,4,3,5,4,5)) ~ factor(c(2,1,2,2,2,1,2,1)))
> > Call:
> >    aov(formula = factor(c(3, 1, 2, 4, 3, 5, 4, 5)) ~ factor(c(2,
> >     1, 2, 2, 2, 1, 2, 1)))
> > Error in levels(x)[x] :
> >   only 0's may be mixed with negative subscripts
> > In addition: Warning messages:
> > 1: In model.response(mf, "numeric") :
> >   using type = "numeric" with a factor response will be ignored
> > 2: In Ops.factor(y, z$residuals) : '-' not meaningful for factors
>
> > Not a big deal and trying to catch all of the silly things users may
> > do is of course impossible, but for this one adding a check that the
> > (response) variable is actually numeric could be useful.
>
> Indeed.
>
> As always, the question is whether we want to give an error unless
> is.numeric, or ensure via as.numeric?

I would issue an error. Using as.numeric() could lead to totally nonsensical results, for example when:

as.numeric(factor(c("low","high","mid")))

> Best
> -k
>
> > Best,
> > Wolfgang


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Fri Oct 11 15:53:00 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Fri, 11 Oct 2024 15:53:00 +0200
Subject: [Rd] 
 Error message when calling t.test() and aov() with a factor
 variables
In-Reply-To: <AS8PR08MB9193F95F26D8FF82DFAC65108B792@AS8PR08MB9193.eurprd08.prod.outlook.com>
References: <AS8PR08MB91934F160E97429FAFEB78588B792@AS8PR08MB9193.eurprd08.prod.outlook.com>
 <26377.6015.100740.392260@hornik.net>
 <AS8PR08MB9193F95F26D8FF82DFAC65108B792@AS8PR08MB9193.eurprd08.prod.outlook.com>
Message-ID: <26377.11708.68794.532369@hornik.net>

>>>>> Viechtbauer, Wolfgang (NP) writes:

Thanks.  Patches welcome :-)

Best
-k

>> -----Original Message-----
>> From: Kurt Hornik <Kurt.Hornik at wu.ac.at>
>> Sent: Friday, October 11, 2024 14:18
>> To: Viechtbauer, Wolfgang (NP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
>> Cc: r-devel <r-devel at r-project.org>
>> Subject: Re: [Rd] Error message when calling t.test() and aov() with a factor
>> variables
>> 
>> >>>>> Viechtbauer, Wolfgang (NP) writes:
>> 
>> > Hi all,
>> > Just noticed that the error that arises when calling t.test() with factors
>> could be a bit clearer:
>> 
>> >> t.test(factor(c(3,1,2,4,3,5,4,5)), factor(c(2,1,2,3,4,5)))
>> > Error in var(x) : Calling var(x) on a factor x is defunct.
>> >   Use something like 'all(duplicated(x)[-1L])' to test for a constant vector.
>> > In addition: Warning message:
>> > In mean.default(x) :
>> >   argument is not numeric or logical: returning NA
>> 
>> > Obviously, using factors as input is nonsense, but this might happen on
>> accident and then the error message could be a bit more on point. Similar for
>> aov():
>> 
>> >> aov(factor(c(3,1,2,4,3,5,4,5)) ~ factor(c(2,1,2,2,2,1,2,1)))
>> > Call:
>> >    aov(formula = factor(c(3, 1, 2, 4, 3, 5, 4, 5)) ~ factor(c(2,
>> >     1, 2, 2, 2, 1, 2, 1)))
>> > Error in levels(x)[x] :
>> >   only 0's may be mixed with negative subscripts
>> > In addition: Warning messages:
>> > 1: In model.response(mf, "numeric") :
>> >   using type = "numeric" with a factor response will be ignored
>> > 2: In Ops.factor(y, z$residuals) : '-' not meaningful for factors
>> 
>> > Not a big deal and trying to catch all of the silly things users may
>> > do is of course impossible, but for this one adding a check that the
>> > (response) variable is actually numeric could be useful.
>> 
>> Indeed.
>> 
>> As always, the question is whether we want to give an error unless
>> is.numeric, or ensure via as.numeric?

> I would issue an error. Using as.numeric() could lead to totally nonsensical results, for example when:

> as.numeric(factor(c("low","high","mid")))

>> Best
>> -k
>> 
>> > Best,
>> > Wolfgang


From bryce@@@c@r@on @end|ng |rom gm@||@com  Sun Oct 13 02:52:43 2024
From: bryce@@@c@r@on @end|ng |rom gm@||@com (Bryce Carson)
Date: Sat, 12 Oct 2024 18:52:43 -0600
Subject: [Rd] Embedding R in other applications as a scripting language
Message-ID: <CADPqqnKJ0js9cu2wBcAdXdJafJN1B308GHCh9rEMVmr_OkSYxA@mail.gmail.com>

I am subscribing to r-core because I am spending more and more time reading
the R implementation itself, but in the meantime I would love to discuss
the topic of embedding R (or linking against it) with more experienced C
developers and people who've written C or C++ code for R packages.

I have reached the stage where to make progress with embedding R in the
target application, TIC-80 (see https://tic80.com/), I need to study how R
is initialized in a finder detail. At the moment my plans for integrating R
include bundling the recommended packages in addition to magrittr (more
than that would be overkill for the integration).

The most relevant information I have seen on embedding R in other
applications *as a scripting language* comes from the
tests/Embedding/index.html document included in the R sources. At the
moment the Internet Archive is down while they deal with a DDOS attack
(thankfully their data are safe), so I can't access the PostgreSQL + R
documents linked to from there. No big matter.

I'm not particularly versed in C myself, but I can read it well and I
understand more each day I read the R implementation itself and expose
myself to the actual usage of non-trivial C. I read *Narain Gehani's C: an
Advanced Introduction* over the summer to familiarize myself with the
aspects of the language which weren't transparent to me from studying other
languages (Java, R, Emacs LISP, Python).

Anyhow, if anyone has experience playing with this since it was more
popular twenty years ago (as it seems) please reply!

Regards, and thanks for all the pirate jokes. R!

--- Bryce

	[[alternative HTML version deleted]]


From jo@|@h@p@rry @end|ng |rom gm@||@com  Sun Oct 13 19:30:09 2024
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Sun, 13 Oct 2024 10:30:09 -0700
Subject: [Rd] R CMD check and CRAN's rust policy
Message-ID: <CAL3ufUKAEwf4BCePi710mK=hm7HJc+jj+XpqyegcZDegQNCfWA@mail.gmail.com>

Hi all,

I'm new to contributing to r-devel. The trunk of r-devel right now includes
a `check_rust()` function for adherence to CRAN's evolving rust policy (see
commit
https://github.com/r-devel/r-svn/commit/6114d4126434c056b476cbc5db2657536c153d9a
).

As it stands R 4.4.2 will codify CRAN policy on Rust as the R language's
policy and will have deep implications for the language moving forward.  It
would make *any* package that uses Rust to adhere to their policies.

I've submitted an issue as well as a patch at
https://bugs.r-project.org/show_bug.cgi?id=18806.

What is the process for submitting the bug and patch for review?

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Oct 13 22:13:23 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 14 Oct 2024 09:13:23 +1300
Subject: [Rd] Embedding R in other applications as a scripting language
In-Reply-To: <CADPqqnKJ0js9cu2wBcAdXdJafJN1B308GHCh9rEMVmr_OkSYxA@mail.gmail.com>
References: <CADPqqnKJ0js9cu2wBcAdXdJafJN1B308GHCh9rEMVmr_OkSYxA@mail.gmail.com>
Message-ID: <3F34F6EC-874E-4D2E-AEFD-8736F4D282EC@R-project.org>

Bryce,

embedding R varies from easy to very complex depending on what you want to do with it. If all you want is to evaluate R commands and get the result values then it is easy: you just initialize R with Rf_initialize_R() and use R_tryEval() to evaluate what you need (making sure you stay on the main thread). However, if you want to run the full event loop or even use the GUI elements then it gets more complicated - you  can have a look at https://github.com/s-u/rJava/blob/master/jri/src/Rinit.c which is short enough to illustrate the entry points and purposes.

If you are willing to use C++ then RInside is a nice package that wraps the R API in C++ classes for easier use: https://github.com/eddelbuettel/rinside simplifying it quite a bit.

Cheers,
Simon

PS: this list is for the discussions on *development* of R itself, please consider using the R-help mailing list instead which is where users discuss the *use* of R in various scenarios.


> On 13 Oct 2024, at 13:52, Bryce Carson <bryce.a.carson at gmail.com> wrote:
> 
> I am subscribing to r-core because I am spending more and more time reading
> the R implementation itself, but in the meantime I would love to discuss
> the topic of embedding R (or linking against it) with more experienced C
> developers and people who've written C or C++ code for R packages.
> 
> I have reached the stage where to make progress with embedding R in the
> target application, TIC-80 (see https://tic80.com/), I need to study how R
> is initialized in a finder detail. At the moment my plans for integrating R
> include bundling the recommended packages in addition to magrittr (more
> than that would be overkill for the integration).
> 
> The most relevant information I have seen on embedding R in other
> applications *as a scripting language* comes from the
> tests/Embedding/index.html document included in the R sources. At the
> moment the Internet Archive is down while they deal with a DDOS attack
> (thankfully their data are safe), so I can't access the PostgreSQL + R
> documents linked to from there. No big matter.
> 
> I'm not particularly versed in C myself, but I can read it well and I
> understand more each day I read the R implementation itself and expose
> myself to the actual usage of non-trivial C. I read *Narain Gehani's C: an
> Advanced Introduction* over the summer to familiarize myself with the
> aspects of the language which weren't transparent to me from studying other
> languages (Java, R, Emacs LISP, Python).
> 
> Anyhow, if anyone has experience playing with this since it was more
> popular twenty years ago (as it seems) please reply!
> 
> Regards, and thanks for all the pirate jokes. R!
> 
> --- Bryce
> 
> [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sun Oct 13 23:59:03 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sun, 13 Oct 2024 23:59:03 +0200
Subject: [Rd] R CMD check and CRAN's rust policy
In-Reply-To: <CAL3ufUKAEwf4BCePi710mK=hm7HJc+jj+XpqyegcZDegQNCfWA@mail.gmail.com>
References: <CAL3ufUKAEwf4BCePi710mK=hm7HJc+jj+XpqyegcZDegQNCfWA@mail.gmail.com>
Message-ID: <c5dde890-b3f0-48ca-ae93-63f6f5526eed@gmail.com>

On 10/13/24 19:30, Josiah Parry wrote:
> Hi all,
>
> I'm new to contributing to r-devel. The trunk of r-devel right now includes
> a `check_rust()` function for adherence to CRAN's evolving rust policy (see
> commit
> https://github.com/r-devel/r-svn/commit/6114d4126434c056b476cbc5db2657536c153d9a
> ).
>
> As it stands R 4.4.2 will codify CRAN policy on Rust as the R language's
> policy and will have deep implications for the language moving forward.  It
> would make *any* package that uses Rust to adhere to their policies.

R 4.4.2 will be released from the R-4-4-branch, not from the trunk. The 
change you have pointed to is only on the trunk, which would eventually 
become the next minor release, probably 4.5.0. Anything on the trunk is 
subject to change.

See https://svn.r-project.org/R/branches/R-4-4-branch/src vs 
https://svn.r-project.org/R/trunk

> I've submitted an issue as well as a patch at
> https://bugs.r-project.org/show_bug.cgi?id=18806.
>
> What is the process for submitting the bug and patch for review?

See https://www.r-project.org/bugs.html

But in short, submitting a PR to bugzilla about this as you have done is 
fine. Now it is the turn for R Core to consider if this should be a 
CRAN-only check or not.

Best
Tomas

>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Mon Oct 14 01:43:47 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 13 Oct 2024 18:43:47 -0500
Subject: [Rd] Embedding R in other applications as a scripting language
In-Reply-To: <3F34F6EC-874E-4D2E-AEFD-8736F4D282EC@R-project.org>
References: <CADPqqnKJ0js9cu2wBcAdXdJafJN1B308GHCh9rEMVmr_OkSYxA@mail.gmail.com>
 <3F34F6EC-874E-4D2E-AEFD-8736F4D282EC@R-project.org>
Message-ID: <26380.23347.901412.557101@rob.eddelbuettel.com>


Hi Bryce,

On 14 October 2024 at 09:13, Simon Urbanek wrote:
| If you are willing to use C++ then RInside is a nice package that wraps the R API in C++ classes for easier use: https://github.com/eddelbuettel/rinside simplifying it quite a bit.

Thanks for mention, Simon! And yes, embedding R is remarkably stable. Simon's
own rServe and rJava were early, and still provide a reference. There was
also (decades ago !) the embedding of R inside Postgres by Joe Conway. Jeff
later did RApache, this lead to littler on which I leaned for RInside.

Now, RInside may be of interest for two or three reason. First, it uses C++
and therefore abstract a few things (including the initialization) away into
an easy to use C++ class. Second, by being in C++ it can take advantage of
the templated converters to/from basic C/C++ types and class to R and back
making the use easier. Lastly, there are a number of examples included in the
source repo below inst/examples/ in seven different directories:
  https://github.com/eddelbuettel/rinside/tree/master/inst/examples

Hope this helps,  Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jo@|@h@p@rry @end|ng |rom gm@||@com  Mon Oct 14 16:38:42 2024
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Mon, 14 Oct 2024 07:38:42 -0700
Subject: [Rd] R CMD check and CRAN's rust policy
In-Reply-To: <c5dde890-b3f0-48ca-ae93-63f6f5526eed@gmail.com>
References: <CAL3ufUKAEwf4BCePi710mK=hm7HJc+jj+XpqyegcZDegQNCfWA@mail.gmail.com>
 <c5dde890-b3f0-48ca-ae93-63f6f5526eed@gmail.com>
Message-ID: <CAL3ufU+Y-X__3+97XhHWNAvgVtQtqFR9bZu6MKX6nwT186j-jg@mail.gmail.com>

Thank you, Tomas, for the clarification!

On Sun, Oct 13, 2024 at 14:59 Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 10/13/24 19:30, Josiah Parry wrote:
> > Hi all,
> >
> > I'm new to contributing to r-devel. The trunk of r-devel right now
> includes
> > a `check_rust()` function for adherence to CRAN's evolving rust policy
> (see
> > commit
> >
> https://github.com/r-devel/r-svn/commit/6114d4126434c056b476cbc5db2657536c153d9a
> > ).
> >
> > As it stands R 4.4.2 will codify CRAN policy on Rust as the R language's
> > policy and will have deep implications for the language moving forward.
> It
> > would make *any* package that uses Rust to adhere to their policies.
>
> R 4.4.2 will be released from the R-4-4-branch, not from the trunk. The
> change you have pointed to is only on the trunk, which would eventually
> become the next minor release, probably 4.5.0. Anything on the trunk is
> subject to change.
>
> See https://svn.r-project.org/R/branches/R-4-4-branch/src vs
> https://svn.r-project.org/R/trunk
>
> > I've submitted an issue as well as a patch at
> > https://bugs.r-project.org/show_bug.cgi?id=18806.
> >
> > What is the process for submitting the bug and patch for review?
>
> See https://www.r-project.org/bugs.html
>
> But in short, submitting a PR to bugzilla about this as you have done is
> fine. Now it is the turn for R Core to consider if this should be a
> CRAN-only check or not.
>
> Best
> Tomas
>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Thu Oct 17 13:38:35 2024
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Thu, 17 Oct 2024 12:38:35 +0100
Subject: [Rd] Consider getNamespaceVersion() returning a numeric_version
Message-ID: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>

Would R-Core be receptive to having getNamespaceVersion() return a 
numeric_version object instead of a named character?

Tim


From edd @end|ng |rom deb|@n@org  Thu Oct 17 14:22:57 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 17 Oct 2024 07:22:57 -0500
Subject: [Rd] Consider getNamespaceVersion() returning a numeric_version
In-Reply-To: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>
References: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>
Message-ID: <26385.417.149300.525448@rob.eddelbuettel.com>


On 17 October 2024 at 12:38, Tim Taylor wrote:
| Would R-Core be receptive to having getNamespaceVersion() return a 
| numeric_version object instead of a named character?

Is this good enough? What's your actual issue a 'numeric' would address?

   > as.package_version(getNamespaceVersion("base")) < "4.5.0"
   [1] TRUE
   > 
   > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.11"
   [1] TRUE
   > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.14"
   [1] FALSE
   >

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Thu Oct 17 14:42:05 2024
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Thu, 17 Oct 2024 13:42:05 +0100
Subject: [Rd] Consider getNamespaceVersion() returning a numeric_version
In-Reply-To: <26385.417.149300.525448@rob.eddelbuettel.com>
References: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>
 <26385.417.149300.525448@rob.eddelbuettel.com>
Message-ID: <a56006d0-97f8-4fbc-a012-68159f11fbb1@hiddenelephants.co.uk>

I mean the `numeric_version` object not a numeric (double/int). 
Basically to protect me from myself I'd prefer not to have to remember 
to wrap `getNamespaceVersion()` with `as.package_version()`.

I suspect a grep of CRAN may highlight others who are erroneously 
comparing character objects rather than a comparison between a 
`numeric_version` object and a character.

Tim


On 17/10/2024 13:22, Dirk Eddelbuettel wrote:
> On 17 October 2024 at 12:38, Tim Taylor wrote:
> | Would R-Core be receptive to having getNamespaceVersion() return a
> | numeric_version object instead of a named character?
>
> Is this good enough? What's your actual issue a 'numeric' would address?
>
>     > as.package_version(getNamespaceVersion("base")) < "4.5.0"
>     [1] TRUE
>     >
>     > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.11"
>     [1] TRUE
>     > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.14"
>     [1] FALSE
>     >
>
> Dirk
>


From edd @end|ng |rom deb|@n@org  Thu Oct 17 15:00:01 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 17 Oct 2024 08:00:01 -0500
Subject: [Rd] Consider getNamespaceVersion() returning a numeric_version
In-Reply-To: <a56006d0-97f8-4fbc-a012-68159f11fbb1@hiddenelephants.co.uk>
References: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>
 <26385.417.149300.525448@rob.eddelbuettel.com>
 <a56006d0-97f8-4fbc-a012-68159f11fbb1@hiddenelephants.co.uk>
Message-ID: <26385.2641.110684.750519@rob.eddelbuettel.com>


On 17 October 2024 at 13:42, Tim Taylor wrote:
| I mean the `numeric_version` object not a numeric (double/int). 
| Basically to protect me from myself I'd prefer not to have to remember 
| to wrap `getNamespaceVersion()` with `as.package_version()`.

That would be a breaking change. I suspect you would need to supply stronger
motivation.

Note that these days you can add arbitrary fields to DESCRIPTION so you
already can add a new field that you can the require to be a value from an
integer sequence (or a numeric if you prefer).

| I suspect a grep of CRAN may highlight others who are erroneously 
| comparing character objects rather than a comparison between a 
| `numeric_version` object and a character.

Sure but still a user-level bug though. Usually those get fixed them on that
side.

(And to be clear, I have nothing against your proposal per se and like it in
the abstract. I am just trying to help think through what it may entail.)

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Oct 17 16:53:51 2024
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 17 Oct 2024 15:53:51 +0100
Subject: [Rd] Consider getNamespaceVersion() returning a numeric_version
In-Reply-To: <a56006d0-97f8-4fbc-a012-68159f11fbb1@hiddenelephants.co.uk>
References: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>
 <26385.417.149300.525448@rob.eddelbuettel.com>
 <a56006d0-97f8-4fbc-a012-68159f11fbb1@hiddenelephants.co.uk>
Message-ID: <a3c7fc8e-3814-4298-bac8-b2257fc2b416@stats.ox.ac.uk>

On 17/10/2024 13:42, Tim Taylor wrote:
> I mean the `numeric_version` object not a numeric (double/int). 
> Basically to protect me from myself I'd prefer not to have to remember 
> to wrap `getNamespaceVersion()` with `as.package_version()`.
> 
> I suspect a grep of CRAN may highlight others who are erroneously 
> comparing character objects rather than a comparison between a 
> `numeric_version` object and a character.

Perhaps you could do that rather than speculating?  Similarly, try out 
over CRAN the effect of getNamespaceVersion changing its return type.

It seems to be used in less than 40 CRAN packages, many boilerplate code 
from a single author and most use the version as a printable character 
string.  A few are clearly wrong: E.g.

if(getNamespaceVersion("reticulate") >= "1.36.0")

will be false it that package ever reaches "1.100.0".  This is what 
compareVersion() is for ....

> On 17/10/2024 13:22, Dirk Eddelbuettel wrote:
>> On 17 October 2024 at 12:38, Tim Taylor wrote:
>> | Would R-Core be receptive to having getNamespaceVersion() return a
>> | numeric_version object instead of a named character?
>>
>> Is this good enough? What's your actual issue a 'numeric' would address?
>>
>> ??? > as.package_version(getNamespaceVersion("base")) < "4.5.0"
>> ??? [1] TRUE
>> ??? >
>> ??? > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.11"
>> ??? [1] TRUE
>> ??? > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.14"
>> ??? [1] FALSE

There are differences, e.g.

 > (z <- getNamespaceVersion("MASS"))
  version
"7.3-61"
 > (zz <- as.package_version(z))
[1] ?7.3.61?
 > as.character(zz)
[1] "7.3.61"

and some uses need the first.  That makes changing the return value too 
disruptive.

If the issue is only comparison, getNamespaceVersion's return value 
could be given a class and an Ops group method, but the existence of 
compareVersion() makes that less compelling.


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Thu Oct 17 17:38:01 2024
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Thu, 17 Oct 2024 16:38:01 +0100
Subject: [Rd] Consider getNamespaceVersion() returning a numeric_version
In-Reply-To: <a3c7fc8e-3814-4298-bac8-b2257fc2b416@stats.ox.ac.uk>
References: <08cba344-8516-48c3-aa55-1c5e28d5b5e9@hiddenelephants.co.uk>
 <26385.417.149300.525448@rob.eddelbuettel.com>
 <a56006d0-97f8-4fbc-a012-68159f11fbb1@hiddenelephants.co.uk>
 <a3c7fc8e-3814-4298-bac8-b2257fc2b416@stats.ox.ac.uk>
Message-ID: <1f3ba01d-c354-4efd-bc00-f5a866482d1f@hiddenelephants.co.uk>

On 17/10/2024 15:53, Prof Brian Ripley wrote:
> On 17/10/2024 13:42, Tim Taylor wrote:
>> I mean the `numeric_version` object not a numeric (double/int). 
>> Basically to protect me from myself I'd prefer not to have to 
>> remember to wrap `getNamespaceVersion()` with `as.package_version()`.
>>
>> I suspect a grep of CRAN may highlight others who are erroneously 
>> comparing character objects rather than a comparison between a 
>> `numeric_version` object and a character.
>
> Perhaps you could do that rather than speculating?? Similarly, try out 
> over CRAN the effect of getNamespaceVersion changing its return type.
>
> It seems to be used in less than 40 CRAN packages, many boilerplate 
> code from a single author and most use the version as a printable 
> character string.? A few are clearly wrong: E.g.
>
> if(getNamespaceVersion("reticulate") >= "1.36.0")
>
> will be false it that package ever reaches "1.100.0".? This is what 
> compareVersion() is for ....

I've raised an issue with the package authors of that particular piece 
of code. I'll try and see what other packages are making similar mistakes.

>
>> On 17/10/2024 13:22, Dirk Eddelbuettel wrote:
>>> On 17 October 2024 at 12:38, Tim Taylor wrote:
>>> | Would R-Core be receptive to having getNamespaceVersion() return a
>>> | numeric_version object instead of a named character?
>>>
>>> Is this good enough? What's your actual issue a 'numeric' would 
>>> address?
>>>
>>> ??? > as.package_version(getNamespaceVersion("base")) < "4.5.0"
>>> ??? [1] TRUE
>>> ??? >
>>> ??? > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.11"
>>> ??? [1] TRUE
>>> ??? > as.package_version(getNamespaceVersion("Rcpp")) > "1.0.14"
>>> ??? [1] FALSE
>
> There are differences, e.g.
>
> > (z <- getNamespaceVersion("MASS"))
> ?version
> "7.3-61"
> > (zz <- as.package_version(z))
> [1] ?7.3.61?
> > as.character(zz)
> [1] "7.3.61"
>
> and some uses need the first.? That makes changing the return value 
> too disruptive.
>
> If the issue is only comparison, getNamespaceVersion's return value 
> could be given a class and an Ops group method, but the existence of 
> compareVersion() makes that less compelling.

Yes the issue for me was with a comparison. I think the additional class 
and Ops method could be worthwhile to prevent others from making a 
similar mistake to myself. That said I do appreciate it does add more 
code when there are already alternatives available. If you'd be 
receptive I'd be happy to submit a patch in this regards.

Many thanks

Tim


From chr|@ @end|ng |rom ckb|@ck@org  Mon Oct 21 21:28:51 2024
From: chr|@ @end|ng |rom ckb|@ck@org (Chris Black)
Date: Mon, 21 Oct 2024 12:28:51 -0700
Subject: [Rd] 
 [EXTERNAL] Re: NOTE: multiple local function definitions for
 ?fun? with different formal arguments
In-Reply-To: <69df184a-96e5-4d26-9999-fef5dad280c4@gmail.com>
References: <5jst8ric3j9fg55fkwuhhlyk.1707061436584@email.android.com>
 <CA+jjkEbwGe-W-gSfds1=4Vzrf=LOitwiE=4Vx0+NCj4t2t09JA@mail.gmail.com>
 <lo01v1qa61gmseab9ma660ts.1707061568394@email.android.com>
 <5cb29a06-5b73-4fe4-b8dc-7aa9db6a2cff@gmail.com>
 <15c10f0d-2c05-4b84-a3f0-0c02fdbb15e2@gmail.com>
 <SA0PR09MB6955A7EF8CD84520F2FA6D8AE5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <33b6ee55-1caa-461b-a132-42e22f41dd1a@gmail.com>
 <SA0PR09MB69552A24686B60186A86BEC3E5462@SA0PR09MB6955.namprd09.prod.outlook.com>
 <CAFDcVCTsEMwRhR6qFw1m7g0852XdeeNKALXhGNd2ZVzaMutoVA@mail.gmail.com>
 <DS7PR10MB727772ADF2D69B769FC88A1BFA462@DS7PR10MB7277.namprd10.prod.outlook.com>
 <CE0833FD-CE89-4F59-91C7-68C7F3C788FA@ckblack.org>
 <abc59a72-a38b-4d73-b858-2efc150e62f3@gmail.com>
 <69df184a-96e5-4d26-9999-fef5dad280c4@gmail.com>
Message-ID: <9CFE472D-71BC-4B97-8575-DD57ECBBEACB@ckblack.org>

I?m replying 8 months later to say a proper thanks to Duncan for the function below. It?s been helping me clean up duplicate (and not-quite duplicate!) function definitions in amateur code ever since, and I?m reminded to say so now because I just passed it along to Ben Zipperer in response to a very similar question[1] on Mastodon. 

In the Mastodon thread there were several R experts expecting the existing package checks to catch this and being surprised to realize they don't, which I think mostly goes to highlight that it really is a corner case? but in any case thank you for your help to keep the ?bitten by function redefinition? club a small one.

Thanks,
Chris

[1] https://mastodon.social/@benzipperer/113328761897124440



> On Feb 7, 2024, at 11:53 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> I put the idea below into a function that gives nicer looking results. Here's the new code:
> 
> dupnames <- function(path = ".") {
> 
>  Rfiles <- pkgload:::find_code(path)
>  allnames <- data.frame(names=character(), filename=character(), line = numeric())
>  result <- NULL
>  for (f in Rfiles) {
>    exprs <- parse(f, keep.source = TRUE)
>    locs <- getSrcLocation(exprs)
>    names <- character(length(exprs))
>    lines <- numeric(length(exprs))
>    for (i in seq_along(exprs)) {
>      expr <- exprs[[i]]
>      if (is.name(expr[[1]]) &&
>          deparse(expr[[1]]) %in% c("<-", "=") &&
>          is.name(expr[[2]])) {
>        names[i] <- deparse(expr[[2]])
>        lines[i] <- locs[i]
>      }
>    }
>    keep <- names != ""
>    if (any(keep)) {
>      names <- names[keep]
>      lines <- lines[keep]
> 
>      prev <- nrow(allnames)
>      allnames <- rbind(allnames, data.frame(name = names, filename = basename(f), line = lines))
>      dups <- which(duplicated(allnames$name))
>      dups <- dups[dups > prev]
>      if (any(dups)) {
>        origfile <- character(length(dups))
>        origline <- numeric(length(dups))
>        for (i in seq_along(dups)) {
>          prev <- which(allnames$name == allnames$name[dups[i]])[1]
>          origfile[i] <- allnames$filename[prev]
>          origline[i] <- allnames$line[prev]
>        }
> 
>        result <- rbind(result,
>                        data.frame(name = allnames$name[dups],
>                                   first = paste(origfile, origline, sep=":"),
>                                   dup = paste(allnames$filename[dups], allnames$line[dups], sep = ":")))
>      }
>    }
>  }
>  result
> }
> 
> 
> And here's what I get when I run it on rgl:
> 
> dupnames("rgl")
>  name      first          dup
> 1  fns knitr.R:12  knitr.R:165
> 2  fns knitr.R:12 pkgdown.R:14
> 3  fns knitr.R:12    shiny.R:8
> 
> Those are okay; the fns object is a temporary that is later removed in each case.
> 
> Duncan Murdoch


From rkoenker @end|ng |rom ||||no|@@edu  Tue Oct 22 11:08:12 2024
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Tue, 22 Oct 2024 09:08:12 +0000
Subject: [Rd] invalid permissions
Message-ID: <6D2E6D4A-C9E7-4845-BA3C-19016F7134B8@illinois.edu>

Gurus:

I have a new version of my quantreg package with minimal changes, mainly to fix some obscure fortran problems.  It fails R CMD check ?as-cran with the error:

Running examples in ?quantreg-Ex.R? failed
The error most likely occurred in:

> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.rqss
> ### Title: Plot Method for rqss Objects
> ### Aliases: plot.rqss plot.qss1 plot.qts1 plot.qss2 plot.summary.rqss
> ### Keywords: regression smooth iplot
>  > ### ** Examples
>  > n <- 200
> x <- sort(rchisq(n,4))
> z <- x + rnorm(n)
> y <- log(x)+ .1*(log(x))^2 + log(x)*rnorm(n)/4 + z
> plot(x,y-z)
> fN <- rqss(y~qss(x,constraint="N")+z)

 *** caught segfault ***
address 0x0, cause 'invalid permissions?

However, if I install it and run example(plot.rqss) it runs normally.  If some kind soul knows or is willing to dig into this to learn what the problem is, I would be most grateful.  The package is available from  http://www.econ.uiuc.edu/~roger/research/rq/quantreg/quantreg_5.99.tar.gz.

TIA,


Roger Koenker
r.koenker at ucl.ac.uk
Honorary Professor of Economics
Department of Economics, UCL
Emeritus Professor of Economics
	and Statistics, UIUC



From |kry|ov @end|ng |rom d|@root@org  Tue Oct 22 11:44:32 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 22 Oct 2024 12:44:32 +0300
Subject: [Rd] invalid permissions
In-Reply-To: <6D2E6D4A-C9E7-4845-BA3C-19016F7134B8@illinois.edu>
References: <6D2E6D4A-C9E7-4845-BA3C-19016F7134B8@illinois.edu>
Message-ID: <20241022124432.0ec82307@arachnoid>

Dear Prof. Roger Koenker,

On Tue, 22 Oct 2024 09:08:12 +0000
"Koenker, Roger W" <rkoenker at illinois.edu> wrote:

> > fN <- rqss(y~qss(x,constraint="N")+z)  
> 
>  *** caught segfault ***
> address 0x0, cause 'invalid permissions?

Given a freshly produced quantreg.Rcheck directory, I was able to
reproduce this crash by running

R -d gdb
# make sure that the package version under check will be loaded
.libPaths(c("quantreg.Rcheck", .libPaths()))
library(quantreg)
example(plot.rqss)

The crash happens in the Fortran code:

Thread 1 "R" received signal SIGSEGV, Segmentation fault.
0x00007ffff3d77bd4 in pchol (m=5, n=1, xpnt=..., x=..., mxdiag=6971508156.8648586, ntiny=0, iflag=0,
    smxpy=0x7ffff3d75b80 <smxpy8>,
    tiny=<error reading variable: Cannot access memory at address 0xe00000000>,
    large=<error reading variable: Cannot access memory at address 0x5b14e898>) at cholesky.f:4927
4927                IF (DIAG .LE. tiny * MXDIAG) THEN
(gdb) bt
#0  0x00007ffff3d77bd4 in pchol
    (m=5, n=1, xpnt=..., x=..., mxdiag=6971508156.8648586, ntiny=0, iflag=0, smxpy=0x7ffff3d75b80 <smxpy
8>, tiny=Cannot access memory at address 0xe00000000
#1  0x00007ffff3d77d7a in chlsup
    (m=5, n=1, split=..., xpnt=..., x=..., mxdiag=6971508156.8648586, ntiny=0, iflag=0, mmpyn=0x7ffff3d7
9d90 <mmpy8>, smxpy=0x7ffff3d75b80 <smxpy8>, tiny=Cannot access memory at address 0xe00000000
#2  0x00007ffff3d7849c in blkfc2
    (nsuper=<optimized out>, xsuper=..., snode=..., split=..., xlindx=..., lindx=..., xlnz=..., lnz=...,
 link=..., length=..., indmap=..., relind=..., tmpsiz=10, temp=..., iflag=0, mmpyn=0x7ffff3d79d90 <mmpy8
>, smxpy=0x7ffff3d75b80 <smxpy8>, tiny=Cannot access memory at address 0xe00000000
#3  0x00007ffff3d78bad in blkfct
    (neqns=<optimized out>, nsuper=<optimized out>, xsuper=..., snode=..., split=..., xlindx=..., lindx=
..., xlnz=..., lnz=..., iwsiz=796, iwork=..., tmpsiz=10, tmpvec=..., iflag=0, mmpyn=0x7ffff3d79d90 <mmpy
8>, smxpy=0x7ffff3d75b80 <smxpy8>, tiny=Cannot access memory at address 0xe00000000
#4  0x00007ffff3d7516d in chlfct
    (m=201, xlindx=..., lindx=..., invp=..., perm=..., iwork=..., nnzdsub=1588, jdsub=..., colcnt=..., n
super=197, snode=..., xsuper=..., nnzlmax=197231, nsubmax=2615, xlnz=..., lnz=..., id=..., jd=..., d=...
, cachsz=64, tmpmax=100244, level=8, tmpvec=..., split=..., ierr=0, it=1, timewd=...) at chlfct.f:125
#5  0x00007ffff3d8bfdf in slpfn
    (n=398, m=<optimized out>, nnza=1193, a=..., ja=..., ia=..., ao=..., jao=..., iao=..., nnzdmax=1193,
 d=..., jd=..., id=..., dsub=..., jdsub=..., nsubmax=2615, lindx=..., xlindx=..., nnzlmax=197231, lnz=..
., xlnz=..., invp=..., perm=..., iwmax=1410, iwork=..., colcnt=..., snode=..., xsuper=..., split=..., tm
pmax=100244, tmpvec=..., newrhs=..., cachsz=64, level=8, x=..., s=..., u=..., c=..., y=..., b=..., r=...
, z=..., w=..., q=..., nnzemax=1789, e=..., je=..., ie=..., dy=..., dx=..., ds=..., dz=..., dw=..., dxdz
=..., dsdw=..., xi=..., xinv=..., sinv=..., ww1=..., ww2=..., small=9.9999999999999995e-07, ierr=0, maxi
t=100, timewd=...) at srqfn.f:238
#6  0x00007ffff3d8ccdb in srqfn
    (n=<optimized out>, m=<optimized out>, nnza=1193, a=..., ja=..., ia=..., ao=..., jao=..., iao=..., n
nzdmax=1193, d=..., jd=..., id=..., dsub=..., jdsub=..., nnzemax=1789, e=..., je=..., ie=..., nsubmax=26
15, lindx=..., xlindx=..., nnzlmax=197231, lnz=..., xlnz=..., iw=..., iwmax=1410, iwork=..., xsuper=...,
 tmpmax=100244, tmpvec=..., wwm=..., wwn=..., cachsz=64, level=8, x=..., s=..., u=..., c=..., y=..., b=.
.., small=9.9999999999999995e-07, ierr=0, maxit=100, timewd=...) at srqfn.f:27
#7  0x00007ffff7b037a2 in do_dotCode # <-- R code starts here
    (call=<optimized out>, op=<optimized out>, args=<optimized out>,
    env=<optimized out>)

So both TINY and LARGE are invalid pointers at this point, suspiciously
small ones at that (on my 64-bit Linux, a typical pointer looks like
0x7fffff?????? or 0x5555????????, with a few more non-zero digits).
Where do they come from?

At chlfct.f (frame 4 above) lines 124-125 we have a function call:

124              call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
125          &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy8,smxpy8)

The function is defined in cholesky.f:

623           SUBROUTINE  BLKFCT (  NEQNS , NSUPER, XSUPER, SNODE , SPLIT ,
624          &                      XLINDX, LINDX , XLNZ  , LNZ   , IWSIZ ,
625          &                      IWORK , TMPSIZ, TMPVEC, IFLAG , MMPYN ,
626          &                      SMXPY,  tiny, Large                     )

It has two more arguments (tiny and Large) than chlfct gives to it.
That must be the source of the error. Adding the missing arguments to
the function calls avoids the crash:

--- quantreg/src/chlfct.f    2019-08-06 15:30:35.000000000 +0300
+++ quantreg/src/chlfct.f 2024-10-22 12:35:55.000000000 +0300
@@ -113,16 +113,20 @@
       timbeg = gtimer()
       if (level .eq. 1) then
          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
-     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy1,smxpy1)
+     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy1,smxpy1,
+     &               tiny, large)
       elseif (level .eq. 2) then
          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
-     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy2,smxpy2)
+     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy2,smxpy2,
+     &               tiny, large)
       elseif (level .eq. 4) then
          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
-     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy4,smxpy4)
+     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy4,smxpy4,
+     &               tiny, large)
       elseif (level .eq. 8) then
          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
-     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy8,smxpy8)
+     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy8,smxpy8,
+     &               tiny, large)
       endif
       if (ierr .eq. -1) then
          ierr = 10


-- 
Best regards,
Ivan


From rkoenker @end|ng |rom ||||no|@@edu  Tue Oct 22 12:58:36 2024
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Tue, 22 Oct 2024 10:58:36 +0000
Subject: [Rd] invalid permissions
In-Reply-To: <20241022124432.0ec82307@arachnoid>
References: <6D2E6D4A-C9E7-4845-BA3C-19016F7134B8@illinois.edu>
 <20241022124432.0ec82307@arachnoid>
Message-ID: <DB610264-3789-47BE-83E0-2BF608A0F731@illinois.edu>

Ivan,

Many, many thanks!  

Best,
Roger


> On Oct 22, 2024, at 10:44?AM, Ivan Krylov <ikrylov at disroot.org> wrote:
> 
> Dear Prof. Roger Koenker,
> 
> On Tue, 22 Oct 2024 09:08:12 +0000
> "Koenker, Roger W" <rkoenker at illinois.edu> wrote:
> 
>>> fN <- rqss(y~qss(x,constraint="N")+z)  
>> 
>> *** caught segfault ***
>> address 0x0, cause 'invalid permissions?
> 
> Given a freshly produced quantreg.Rcheck directory, I was able to
> reproduce this crash by running
> 
> R -d gdb
> # make sure that the package version under check will be loaded
> .libPaths(c("quantreg.Rcheck", .libPaths()))
> library(quantreg)
> example(plot.rqss)
> 
> The crash happens in the Fortran code:
> 
> Thread 1 "R" received signal SIGSEGV, Segmentation fault.
> 0x00007ffff3d77bd4 in pchol (m=5, n=1, xpnt=..., x=..., mxdiag=6971508156.8648586, ntiny=0, iflag=0,
>    smxpy=0x7ffff3d75b80 <smxpy8>,
>    tiny=<error reading variable: Cannot access memory at address 0xe00000000>,
>    large=<error reading variable: Cannot access memory at address 0x5b14e898>) at cholesky.f:4927
> 4927                IF (DIAG .LE. tiny * MXDIAG) THEN
> (gdb) bt
> #0  0x00007ffff3d77bd4 in pchol
>    (m=5, n=1, xpnt=..., x=..., mxdiag=6971508156.8648586, ntiny=0, iflag=0, smxpy=0x7ffff3d75b80 <smxpy
> 8>, tiny=Cannot access memory at address 0xe00000000
> #1  0x00007ffff3d77d7a in chlsup
>    (m=5, n=1, split=..., xpnt=..., x=..., mxdiag=6971508156.8648586, ntiny=0, iflag=0, mmpyn=0x7ffff3d7
> 9d90 <mmpy8>, smxpy=0x7ffff3d75b80 <smxpy8>, tiny=Cannot access memory at address 0xe00000000
> #2  0x00007ffff3d7849c in blkfc2
>    (nsuper=<optimized out>, xsuper=..., snode=..., split=..., xlindx=..., lindx=..., xlnz=..., lnz=...,
> link=..., length=..., indmap=..., relind=..., tmpsiz=10, temp=..., iflag=0, mmpyn=0x7ffff3d79d90 <mmpy8
>> , smxpy=0x7ffff3d75b80 <smxpy8>, tiny=Cannot access memory at address 0xe00000000
> #3  0x00007ffff3d78bad in blkfct
>    (neqns=<optimized out>, nsuper=<optimized out>, xsuper=..., snode=..., split=..., xlindx=..., lindx=
> ..., xlnz=..., lnz=..., iwsiz=796, iwork=..., tmpsiz=10, tmpvec=..., iflag=0, mmpyn=0x7ffff3d79d90 <mmpy
> 8>, smxpy=0x7ffff3d75b80 <smxpy8>, tiny=Cannot access memory at address 0xe00000000
> #4  0x00007ffff3d7516d in chlfct
>    (m=201, xlindx=..., lindx=..., invp=..., perm=..., iwork=..., nnzdsub=1588, jdsub=..., colcnt=..., n
> super=197, snode=..., xsuper=..., nnzlmax=197231, nsubmax=2615, xlnz=..., lnz=..., id=..., jd=..., d=...
> , cachsz=64, tmpmax=100244, level=8, tmpvec=..., split=..., ierr=0, it=1, timewd=...) at chlfct.f:125
> #5  0x00007ffff3d8bfdf in slpfn
>    (n=398, m=<optimized out>, nnza=1193, a=..., ja=..., ia=..., ao=..., jao=..., iao=..., nnzdmax=1193,
> d=..., jd=..., id=..., dsub=..., jdsub=..., nsubmax=2615, lindx=..., xlindx=..., nnzlmax=197231, lnz=..
> ., xlnz=..., invp=..., perm=..., iwmax=1410, iwork=..., colcnt=..., snode=..., xsuper=..., split=..., tm
> pmax=100244, tmpvec=..., newrhs=..., cachsz=64, level=8, x=..., s=..., u=..., c=..., y=..., b=..., r=...
> , z=..., w=..., q=..., nnzemax=1789, e=..., je=..., ie=..., dy=..., dx=..., ds=..., dz=..., dw=..., dxdz
> =..., dsdw=..., xi=..., xinv=..., sinv=..., ww1=..., ww2=..., small=9.9999999999999995e-07, ierr=0, maxi
> t=100, timewd=...) at srqfn.f:238
> #6  0x00007ffff3d8ccdb in srqfn
>    (n=<optimized out>, m=<optimized out>, nnza=1193, a=..., ja=..., ia=..., ao=..., jao=..., iao=..., n
> nzdmax=1193, d=..., jd=..., id=..., dsub=..., jdsub=..., nnzemax=1789, e=..., je=..., ie=..., nsubmax=26
> 15, lindx=..., xlindx=..., nnzlmax=197231, lnz=..., xlnz=..., iw=..., iwmax=1410, iwork=..., xsuper=...,
> tmpmax=100244, tmpvec=..., wwm=..., wwn=..., cachsz=64, level=8, x=..., s=..., u=..., c=..., y=..., b=.
> .., small=9.9999999999999995e-07, ierr=0, maxit=100, timewd=...) at srqfn.f:27
> #7  0x00007ffff7b037a2 in do_dotCode # <-- R code starts here
>    (call=<optimized out>, op=<optimized out>, args=<optimized out>,
>    env=<optimized out>)
> 
> So both TINY and LARGE are invalid pointers at this point, suspiciously
> small ones at that (on my 64-bit Linux, a typical pointer looks like
> 0x7fffff?????? or 0x5555????????, with a few more non-zero digits).
> Where do they come from?
> 
> At chlfct.f (frame 4 above) lines 124-125 we have a function call:
> 
> 124              call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
> 125          &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy8,smxpy8)
> 
> The function is defined in cholesky.f:
> 
> 623           SUBROUTINE  BLKFCT (  NEQNS , NSUPER, XSUPER, SNODE , SPLIT ,
> 624          &                      XLINDX, LINDX , XLNZ  , LNZ   , IWSIZ ,
> 625          &                      IWORK , TMPSIZ, TMPVEC, IFLAG , MMPYN ,
> 626          &                      SMXPY,  tiny, Large                     )
> 
> It has two more arguments (tiny and Large) than chlfct gives to it.
> That must be the source of the error. Adding the missing arguments to
> the function calls avoids the crash:
> 
> --- quantreg/src/chlfct.f    2019-08-06 15:30:35.000000000 +0300
> +++ quantreg/src/chlfct.f 2024-10-22 12:35:55.000000000 +0300
> @@ -113,16 +113,20 @@
>       timbeg = gtimer()
>       if (level .eq. 1) then
>          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
> -     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy1,smxpy1)
> +     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy1,smxpy1,
> +     &               tiny, large)
>       elseif (level .eq. 2) then
>          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
> -     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy2,smxpy2)
> +     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy2,smxpy2,
> +     &               tiny, large)
>       elseif (level .eq. 4) then
>          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
> -     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy4,smxpy4)
> +     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy4,smxpy4,
> +     &               tiny, large)
>       elseif (level .eq. 8) then
>          call blkfct(m,nsuper,xsuper,snode,split,xlindx,lindx,xlnz,
> -     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy8,smxpy8)
> +     &               lnz,iwsiz,iwork,tmpsiz,tmpvec,ierr,mmpy8,smxpy8,
> +     &               tiny, large)
>       endif
>       if (ierr .eq. -1) then
>          ierr = 10
> 
> 
> -- 
> Best regards,
> Ivan


