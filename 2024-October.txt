From |kry|ov @end|ng |rom d|@root@org  Tue Oct  8 09:16:52 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 8 Oct 2024 10:16:52 +0300
Subject: [Rd] WRE about R_strtod
Message-ID: <20241008101618.6acf739c@Tarkus>

Hello,

This is what "Writing R extensions" currently says about R_atof and
R_strtod:

>> Function: void R_atof (const char* str)
>> Function: void R_strtod (const char* str, char ** end)
>>
>> Implementations of the C99/POSIX functions atof and strtod which
>> guarantee platform-dependent behaviour, including always using the
>> period as the decimal point aka ?radix character? and converting
>> "NA" to R?s NA_REAL_ . 

Besides the easily fixable return type (void -> double), shouldn't the
documentation mention the fact that, unlike the standard C library
functions, R's parser returns NA_REAL instead of 0 when no conversion
is performed (including for the "NA" string, *end == str)?

Index: doc/manual/R-exts.texi
===================================================================
--- doc/manual/R-exts.texi	(revision 87211)
+++ doc/manual/R-exts.texi	(working copy)
@@ -16482,12 +16482,12 @@
 
 @apifun R_atof
 @apifun R_strtod
- at deftypefun void R_atof (const char* @var{str})
- at deftypefunx void R_strtod (const char* @var{str}, char ** @var{end})
+ at deftypefun double R_atof (const char* @var{str})
+ at deftypefunx double R_strtod (const char* @var{str}, char ** @var{end})
 Implementations of the C99/POSIX functions @code{atof} and @code{strtod}
 which guarantee platform-dependent behaviour, including always using the
-period as the decimal point @emph{aka} `@I{radix character}' and converting
- at code{"NA"} to R's @code{NA_REAL_} .
+period as the decimal point @emph{aka} `@I{radix character}' and returning
+R's @code{NA_REAL_} for all unconverted strings, including @code{"NA"}.
 @end deftypefun
 

-- 
Best regards,
Ivan


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Oct 10 11:04:26 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 10 Oct 2024 11:04:26 +0200
Subject: [Rd] WRE about R_strtod
In-Reply-To: <20241008101618.6acf739c@Tarkus>
References: <20241008101618.6acf739c@Tarkus>
Message-ID: <26375.39066.926653.673190@hornik.net>

>>>>> Ivan Krylov via R-devel writes:

Thanks: changed now.

Best
-k

> Hello,
> This is what "Writing R extensions" currently says about R_atof and
> R_strtod:

>>> Function: void R_atof (const char* str)
>>> Function: void R_strtod (const char* str, char ** end)
>>> 
>>> Implementations of the C99/POSIX functions atof and strtod which
>>> guarantee platform-dependent behaviour, including always using the
>>> period as the decimal point aka ?radix character? and converting
>>> "NA" to R?s NA_REAL_ . 

> Besides the easily fixable return type (void -> double), shouldn't the
> documentation mention the fact that, unlike the standard C library
> functions, R's parser returns NA_REAL instead of 0 when no conversion
> is performed (including for the "NA" string, *end == str)?

> Index: doc/manual/R-exts.texi
> ===================================================================
> --- doc/manual/R-exts.texi	(revision 87211)
> +++ doc/manual/R-exts.texi	(working copy)
> @@ -16482,12 +16482,12 @@
 
>  @apifun R_atof
>  @apifun R_strtod
> - at deftypefun void R_atof (const char* @var{str})
> - at deftypefunx void R_strtod (const char* @var{str}, char ** @var{end})
> + at deftypefun double R_atof (const char* @var{str})
> + at deftypefunx double R_strtod (const char* @var{str}, char ** @var{end})
>  Implementations of the C99/POSIX functions @code{atof} and @code{strtod}
>  which guarantee platform-dependent behaviour, including always using the
> -period as the decimal point @emph{aka} `@I{radix character}' and converting
> - at code{"NA"} to R's @code{NA_REAL_} .
> +period as the decimal point @emph{aka} `@I{radix character}' and returning
> +R's @code{NA_REAL_} for all unconverted strings, including @code{"NA"}.
>  @end deftypefun
 

> -- 
> Best regards,
> Ivan

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct 10 21:53:26 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 10 Oct 2024 20:53:26 +0100
Subject: [Rd] Typo in DateTimeClasses.Rd
Message-ID: <f4eddfe6-0d5d-42f4-bb3c-23e71492faba@sapo.pt>

Hello,

When following a thread that started today [1], I read the documentation 
for DateTimeClasses {base} more carefully and noticed a typo in the 
"Details on POSIXlt" section, in the paragraph right after the 
components list.

The original and corrected are "he" instead of "the".


 From earlier versions of R, he last two components will not be present 
for times in UTC and are platform-dependent.

 From earlier versions of R, the last two components will not be present 
for times in UTC and are platform-dependent.




--- datetimeclasses.rd	2024-03-26 23:02:03.000000000 +0000
+++ datetimeclasses_2.rd	2024-10-10 20:39:16.496162900 +0100
@@ -198,7 +198,7 @@
    }
    The components must be in this order: that was only minimally checked
    prior to \R 4.3.0.  All objects created in \R 4.3.0 have the optional
-  components.  From earlier versions of \R, he last two components will
+  components.  From earlier versions of \R, the last two components will
    not be present for times in UTC and are platform-dependent.  Currently
    \code{gmtoff} is set on almost all current platforms: those based on
    BSD or \code{glibc} (including Linux and macOS) and those using the


Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct 10 21:57:33 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 10 Oct 2024 20:57:33 +0100
Subject: [Rd] Typo in DateTimeClasses.Rd
Message-ID: <c1548f0e-ad3f-4f67-95f5-ea8d2ab22fc6@sapo.pt>

Hello,

In my previous e-mail I forgot the link to the thread I mention.

[1] https://stat.ethz.ch/pipermail/r-help/2024-October/480098.html

Sorry for the mess,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From @eb@meyer @end|ng |rom |@u@de  Thu Oct 10 22:04:47 2024
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Thu, 10 Oct 2024 22:04:47 +0200
Subject: [Rd] Typo in DateTimeClasses.Rd
In-Reply-To: <f4eddfe6-0d5d-42f4-bb3c-23e71492faba@sapo.pt>
References: <f4eddfe6-0d5d-42f4-bb3c-23e71492faba@sapo.pt>
Message-ID: <4c909c1a-c520-40c0-8be0-c7429517c8b9@fau.de>

Thanks, fixed in the trunk.

	Sebastian Meyer


Am 10.10.24 um 21:53 schrieb Rui Barradas:
> Hello,
> 
> When following a thread that started today [1], I read the documentation
> for DateTimeClasses {base} more carefully and noticed a typo in the
> "Details on POSIXlt" section, in the paragraph right after the
> components list.
> 
> The original and corrected are "he" instead of "the".
> 
> 
>   From earlier versions of R, he last two components will not be present
> for times in UTC and are platform-dependent.
> 
>   From earlier versions of R, the last two components will not be present
> for times in UTC and are platform-dependent.
> 
> 
> 
> 
> --- datetimeclasses.rd	2024-03-26 23:02:03.000000000 +0000
> +++ datetimeclasses_2.rd	2024-10-10 20:39:16.496162900 +0100
> @@ -198,7 +198,7 @@
>      }
>      The components must be in this order: that was only minimally checked
>      prior to \R 4.3.0.  All objects created in \R 4.3.0 have the optional
> -  components.  From earlier versions of \R, he last two components will
> +  components.  From earlier versions of \R, the last two components will
>      not be present for times in UTC and are platform-dependent.  Currently
>      \code{gmtoff} is set on almost all current platforms: those based on
>      BSD or \code{glibc} (including Linux and macOS) and those using the
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
>


