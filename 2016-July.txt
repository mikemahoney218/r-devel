From luis.henrique.usier at gmail.com  Fri Jul  1 13:13:01 2016
From: luis.henrique.usier at gmail.com (Luis Usier)
Date: Fri, 1 Jul 2016 12:13:01 +0100
Subject: [Rd] Calling C implementations of rnorm and friends
In-Reply-To: <CADwqtCNxchG_VL3Fe0Hqvvco7-BoiJ1SvRA1SAz7uVSa8yW4qA@mail.gmail.com>
References: <CAOeuMBBshUcPrwBbgZdMZTgRYo3WEqia0O9DSWp4GEmuO7R=oQ@mail.gmail.com>
	<CADwqtCNxchG_VL3Fe0Hqvvco7-BoiJ1SvRA1SAz7uVSa8yW4qA@mail.gmail.com>
Message-ID: <CAOeuMBBzW+ZiWKDXMfT=KCjc6z=jm4OkLeqYQA81Y=dHVTszZw@mail.gmail.com>

Gabriel,

Thanks for that! I guess I really should have figured that one out sooner,
huh?

I understand why that wouldn't be CRAN-compliant. But then, what *is* the
proper way to do it? Is there any way I can call unexported functions from
another package and have it accepted by CRAN?

Also, if I instead re-write the random variable generating functions, do
you have any idea of where the source code is in the stats package? As I
said above, I can't seem to find the source code for the functional forms.

Thanks,

Luis

On Thu, Jun 30, 2016 at 10:38 PM, Gabriel Becker <gmbecker at ucdavis.edu>
wrote:

> Luis,
>
> C_rnorm is a symbol but it's not exported.  This means that you *can* do
> this by using stats:::C_rnorm.
>
> That said, it's not exported, which means that it's not supported to do
> this. So your package likely would not be allowed on CRAN, for example.
>
> Best,
> ~G
> On Jun 30, 2016 2:08 PM, "Luis Usier" <luis.henrique.usier at gmail.com>
> wrote:
>
>> Hi all,
>>
>> Looking at the body for the function rnorm, I see that the body of the
>> function is:
>>
>>     .Call(C_rnorm, n, mean, sd)
>>
>> I want to implement functions that generate normal (and other) random
>> variables. Now, I understand that I can perfectly well just call the R
>> wrapper for these functions and that will be almost indistinguishable for
>> most purposes, but for whatever reason I wanted to try and call the C
>> function directly. My first instinct was to call them as:
>>
>>     .Call(C_rnorm, 1, 1, 1)
>>
>> This doesn't work because R assumes C_rnorm is an object. Looking at the
>> documentation for .Call, I try passing it in as a string:
>>
>>     .Call("C_rnorm", 1, 1, 1, PACKAGE = "stats")
>>
>> This doesn't work either. The help page links to getNativeSymbolInfo(),
>> which I can't make work either. It also refers me to the dyn.load()
>> function and the "Writing R  Extensions" manual.
>>
>> After reading and trying to digest those, I try
>>
>>     getDLLRegisteredRoutines("stats")
>>
>> which shows me all the C and Fortran functions as registered routines,
>> along with their number of parameters. I retrieve rnorm from the list and
>> pass it on to .Call, which then works fine.
>>
>> However, is there an easier way to do this? Specifically, I would like to
>> call the DLL registered routines from within functions in a package I am
>> writing. The manual tells me I should use useDynLib(). So if I added
>> useDynLib("stats") to my namespace, would that work? Could I then have a
>> function such as:
>>
>>     function(x, y, z) .Call(C_rnorm, x, y, z)
>>
>> in my package? If not, what is the proper way of calling these functions
>> from other packages? Should I use "C_rnorm" or "norm"?
>>
>> Also, I was looking for the C source code of rnorm, because I wanted to
>> understand how the function works. Looking at Winston Chang's github R
>> mirror, I found rnorm in the random.c file in the stats package. However,
>> the code I find for it:
>>
>>
>>
>> #define DEFRAND2_REAL(name) \
>> SEXP do_##name(SEXP sn, SEXP sa, SEXP sb) { \
>>     return random2(sn, sa, sb, name, REALSXP); \
>> }
>> DEFRAND2_REAL(rnorm)
>>
>>
>> Doesn't help me at all in understanding how it works. It should create a
>> function random2(sn, sa, sb, norm, REALSXP); I understand that is a
>> version
>> of the random2 function that returns a real S expression taking sn, sa and
>> sb as parameters. But how does find the actual functional form for the
>> normal distribution?
>>
>> I am asking because I would like to rewrite some of the other functions,
>> such as parameterizing rbeta by the mean and sample size rather than by
>> the
>> number of successes and failures and rgamma by the mean and total time
>> elapsed instead of the number of events. Once I understand how the C
>> source
>> code works, it would be hopefully not very difficult to reparameterize
>> them.
>>
>> Thanks,
>>
>> Luis Usier
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From maechler at stat.math.ethz.ch  Fri Jul  1 18:03:22 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 1 Jul 2016 09:03:22 -0700
Subject: [Rd] R-forge down ?
Message-ID: <CAPRP4-dk9X1+PuykMTH6RQWkEEJJ_Fq5cb=k=zO9OiRJDacWzA@mail.gmail.com>

It looks to me that  R-forge  has been down for at least two hours now...


From spencer.graves at prodsyse.com  Fri Jul  1 18:35:31 2016
From: spencer.graves at prodsyse.com (Spencer Graves)
Date: Fri, 1 Jul 2016 11:35:31 -0500
Subject: [Rd] R-forge down ?
In-Reply-To: <CAPRP4-dk9X1+PuykMTH6RQWkEEJJ_Fq5cb=k=zO9OiRJDacWzA@mail.gmail.com>
References: <CAPRP4-dk9X1+PuykMTH6RQWkEEJJ_Fq5cb=k=zO9OiRJDacWzA@mail.gmail.com>
Message-ID: <33d1da7d-94ce-f3f3-ab50-aacc2aeca7d9@prodsyse.com>

       I've experienced multiple outages that last for days on R-Forge 
in recent years.  Eventually, I write to R-Forge at R-Project.org, and they 
get it restarted.


       R-Forge is a great service, and I don't wish to complain, 
especially since I'm not paying for it.  Several times I've offered to 
help in different ways, but I have not heard a reply.  Many 
statisticians, most notably W. Edwards Deming, have made major 
contributions to helping people identify and substantially reduce or 
even eliminate common failure modes in all kinds of systems -- including 
computer systems like R-Forge.  They eventually fix the immediate 
problem, but I don't know what they've tried to make the overall system 
more reliable.


       Spencer Graves


On 7/1/2016 11:03 AM, Martin Maechler wrote:
> It looks to me that  R-forge  has been down for at least two hours now...
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From josh.m.ulrich at gmail.com  Fri Jul  1 23:50:11 2016
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Fri, 1 Jul 2016 16:50:11 -0500
Subject: [Rd] Calling C implementations of rnorm and friends
In-Reply-To: <CAOeuMBBzW+ZiWKDXMfT=KCjc6z=jm4OkLeqYQA81Y=dHVTszZw@mail.gmail.com>
References: <CAOeuMBBshUcPrwBbgZdMZTgRYo3WEqia0O9DSWp4GEmuO7R=oQ@mail.gmail.com>
	<CADwqtCNxchG_VL3Fe0Hqvvco7-BoiJ1SvRA1SAz7uVSa8yW4qA@mail.gmail.com>
	<CAOeuMBBzW+ZiWKDXMfT=KCjc6z=jm4OkLeqYQA81Y=dHVTszZw@mail.gmail.com>
Message-ID: <CAPPM_gQPOe8dbY02nOSE7_Uzca30N=sP-AGN2reYt-YWrJxNGw@mail.gmail.com>

On Fri, Jul 1, 2016 at 6:13 AM, Luis Usier
<luis.henrique.usier at gmail.com> wrote:
> Gabriel,
>
> Thanks for that! I guess I really should have figured that one out sooner,
> huh?
>
> I understand why that wouldn't be CRAN-compliant. But then, what *is* the
> proper way to do it? Is there any way I can call unexported functions from
> another package and have it accepted by CRAN?
>
There may be ways to call unexported functions that R CMD check will
not detect, but you should not look for ways to violate the spirit of
the policy.  Work-arounds include asking the package maintainer to
export the functionality you want, or you can copy the desired
functionality to your package (with attribution, of course).

In this particular case, you can probably get what you want via the
Rmath library.  It provides C-level access to all the distribution
functions (and more).  You would need something like this in your C
code:

#include <Rmath.h>
GetRNGstate();
double rn = rnorm(0.0, 1.0);
PutRNGstate()

Once Dirk recovers from useR!, he'll tell you how this is all
super-easy if you just use Rcpp. ;)

> Also, if I instead re-write the random variable generating functions, do
> you have any idea of where the source code is in the stats package? As I
> said above, I can't seem to find the source code for the functional forms.
>
See the sections "Functions that call compiled code" and "Compiled
code in a base package" from this answer:
http://stackoverflow.com/a/19226817/271616

That should give you a few pointers on where/how to look.

> Thanks,
>
> Luis
>
> On Thu, Jun 30, 2016 at 10:38 PM, Gabriel Becker <gmbecker at ucdavis.edu>
> wrote:
>
>> Luis,
>>
>> C_rnorm is a symbol but it's not exported.  This means that you *can* do
>> this by using stats:::C_rnorm.
>>
>> That said, it's not exported, which means that it's not supported to do
>> this. So your package likely would not be allowed on CRAN, for example.
>>
>> Best,
>> ~G
>> On Jun 30, 2016 2:08 PM, "Luis Usier" <luis.henrique.usier at gmail.com>
>> wrote:
>>
>>> Hi all,
>>>
>>> Looking at the body for the function rnorm, I see that the body of the
>>> function is:
>>>
>>>     .Call(C_rnorm, n, mean, sd)
>>>
>>> I want to implement functions that generate normal (and other) random
>>> variables. Now, I understand that I can perfectly well just call the R
>>> wrapper for these functions and that will be almost indistinguishable for
>>> most purposes, but for whatever reason I wanted to try and call the C
>>> function directly. My first instinct was to call them as:
>>>
>>>     .Call(C_rnorm, 1, 1, 1)
>>>
>>> This doesn't work because R assumes C_rnorm is an object. Looking at the
>>> documentation for .Call, I try passing it in as a string:
>>>
>>>     .Call("C_rnorm", 1, 1, 1, PACKAGE = "stats")
>>>
>>> This doesn't work either. The help page links to getNativeSymbolInfo(),
>>> which I can't make work either. It also refers me to the dyn.load()
>>> function and the "Writing R  Extensions" manual.
>>>
>>> After reading and trying to digest those, I try
>>>
>>>     getDLLRegisteredRoutines("stats")
>>>
>>> which shows me all the C and Fortran functions as registered routines,
>>> along with their number of parameters. I retrieve rnorm from the list and
>>> pass it on to .Call, which then works fine.
>>>
>>> However, is there an easier way to do this? Specifically, I would like to
>>> call the DLL registered routines from within functions in a package I am
>>> writing. The manual tells me I should use useDynLib(). So if I added
>>> useDynLib("stats") to my namespace, would that work? Could I then have a
>>> function such as:
>>>
>>>     function(x, y, z) .Call(C_rnorm, x, y, z)
>>>
>>> in my package? If not, what is the proper way of calling these functions
>>> from other packages? Should I use "C_rnorm" or "norm"?
>>>
>>> Also, I was looking for the C source code of rnorm, because I wanted to
>>> understand how the function works. Looking at Winston Chang's github R
>>> mirror, I found rnorm in the random.c file in the stats package. However,
>>> the code I find for it:
>>>
>>>
>>>
>>> #define DEFRAND2_REAL(name) \
>>> SEXP do_##name(SEXP sn, SEXP sa, SEXP sb) { \
>>>     return random2(sn, sa, sb, name, REALSXP); \
>>> }
>>> DEFRAND2_REAL(rnorm)
>>>
>>>
>>> Doesn't help me at all in understanding how it works. It should create a
>>> function random2(sn, sa, sb, norm, REALSXP); I understand that is a
>>> version
>>> of the random2 function that returns a real S expression taking sn, sa and
>>> sb as parameters. But how does find the actual functional form for the
>>> normal distribution?
>>>
>>> I am asking because I would like to rewrite some of the other functions,
>>> such as parameterizing rbeta by the mean and sample size rather than by
>>> the
>>> number of successes and failures and rgamma by the mean and total time
>>> elapsed instead of the number of events. Once I understand how the C
>>> source
>>> code works, it would be hopefully not very difficult to reparameterize
>>> them.
>>>
>>> Thanks,
>>>
>>> Luis Usier
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2016 | www.rinfinance.com


From gmbecker at ucdavis.edu  Sat Jul  2 01:24:44 2016
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Fri, 1 Jul 2016 16:24:44 -0700
Subject: [Rd] Calling C implementations of rnorm and friends
In-Reply-To: <CAPPM_gQPOe8dbY02nOSE7_Uzca30N=sP-AGN2reYt-YWrJxNGw@mail.gmail.com>
References: <CAOeuMBBshUcPrwBbgZdMZTgRYo3WEqia0O9DSWp4GEmuO7R=oQ@mail.gmail.com>
	<CADwqtCNxchG_VL3Fe0Hqvvco7-BoiJ1SvRA1SAz7uVSa8yW4qA@mail.gmail.com>
	<CAOeuMBBzW+ZiWKDXMfT=KCjc6z=jm4OkLeqYQA81Y=dHVTszZw@mail.gmail.com>
	<CAPPM_gQPOe8dbY02nOSE7_Uzca30N=sP-AGN2reYt-YWrJxNGw@mail.gmail.com>
Message-ID: <CADwqtCMXfSD2+-0rc_0mqx5p_LNEe3PXi29Nkjo7w3vThxwheA@mail.gmail.com>

Well,

For this particular use case why not just transform the parameters at the R
level and then call the existing function? Is there not a closed form
mapping?

~G
On Jul 1, 2016 2:50 PM, "Joshua Ulrich" <josh.m.ulrich at gmail.com> wrote:

> On Fri, Jul 1, 2016 at 6:13 AM, Luis Usier
> <luis.henrique.usier at gmail.com> wrote:
> > Gabriel,
> >
> > Thanks for that! I guess I really should have figured that one out
> sooner,
> > huh?
> >
> > I understand why that wouldn't be CRAN-compliant. But then, what *is* the
> > proper way to do it? Is there any way I can call unexported functions
> from
> > another package and have it accepted by CRAN?
> >
> There may be ways to call unexported functions that R CMD check will
> not detect, but you should not look for ways to violate the spirit of
> the policy.  Work-arounds include asking the package maintainer to
> export the functionality you want, or you can copy the desired
> functionality to your package (with attribution, of course).
>
> In this particular case, you can probably get what you want via the
> Rmath library.  It provides C-level access to all the distribution
> functions (and more).  You would need something like this in your C
> code:
>
> #include <Rmath.h>
> GetRNGstate();
> double rn = rnorm(0.0, 1.0);
> PutRNGstate()
>
> Once Dirk recovers from useR!, he'll tell you how this is all
> super-easy if you just use Rcpp. ;)
>
> > Also, if I instead re-write the random variable generating functions, do
> > you have any idea of where the source code is in the stats package? As I
> > said above, I can't seem to find the source code for the functional
> forms.
> >
> See the sections "Functions that call compiled code" and "Compiled
> code in a base package" from this answer:
> http://stackoverflow.com/a/19226817/271616
>
> That should give you a few pointers on where/how to look.
>
> > Thanks,
> >
> > Luis
> >
> > On Thu, Jun 30, 2016 at 10:38 PM, Gabriel Becker <gmbecker at ucdavis.edu>
> > wrote:
> >
> >> Luis,
> >>
> >> C_rnorm is a symbol but it's not exported.  This means that you *can* do
> >> this by using stats:::C_rnorm.
> >>
> >> That said, it's not exported, which means that it's not supported to do
> >> this. So your package likely would not be allowed on CRAN, for example.
> >>
> >> Best,
> >> ~G
> >> On Jun 30, 2016 2:08 PM, "Luis Usier" <luis.henrique.usier at gmail.com>
> >> wrote:
> >>
> >>> Hi all,
> >>>
> >>> Looking at the body for the function rnorm, I see that the body of the
> >>> function is:
> >>>
> >>>     .Call(C_rnorm, n, mean, sd)
> >>>
> >>> I want to implement functions that generate normal (and other) random
> >>> variables. Now, I understand that I can perfectly well just call the R
> >>> wrapper for these functions and that will be almost indistinguishable
> for
> >>> most purposes, but for whatever reason I wanted to try and call the C
> >>> function directly. My first instinct was to call them as:
> >>>
> >>>     .Call(C_rnorm, 1, 1, 1)
> >>>
> >>> This doesn't work because R assumes C_rnorm is an object. Looking at
> the
> >>> documentation for .Call, I try passing it in as a string:
> >>>
> >>>     .Call("C_rnorm", 1, 1, 1, PACKAGE = "stats")
> >>>
> >>> This doesn't work either. The help page links to getNativeSymbolInfo(),
> >>> which I can't make work either. It also refers me to the dyn.load()
> >>> function and the "Writing R  Extensions" manual.
> >>>
> >>> After reading and trying to digest those, I try
> >>>
> >>>     getDLLRegisteredRoutines("stats")
> >>>
> >>> which shows me all the C and Fortran functions as registered routines,
> >>> along with their number of parameters. I retrieve rnorm from the list
> and
> >>> pass it on to .Call, which then works fine.
> >>>
> >>> However, is there an easier way to do this? Specifically, I would like
> to
> >>> call the DLL registered routines from within functions in a package I
> am
> >>> writing. The manual tells me I should use useDynLib(). So if I added
> >>> useDynLib("stats") to my namespace, would that work? Could I then have
> a
> >>> function such as:
> >>>
> >>>     function(x, y, z) .Call(C_rnorm, x, y, z)
> >>>
> >>> in my package? If not, what is the proper way of calling these
> functions
> >>> from other packages? Should I use "C_rnorm" or "norm"?
> >>>
> >>> Also, I was looking for the C source code of rnorm, because I wanted to
> >>> understand how the function works. Looking at Winston Chang's github R
> >>> mirror, I found rnorm in the random.c file in the stats package.
> However,
> >>> the code I find for it:
> >>>
> >>>
> >>>
> >>> #define DEFRAND2_REAL(name) \
> >>> SEXP do_##name(SEXP sn, SEXP sa, SEXP sb) { \
> >>>     return random2(sn, sa, sb, name, REALSXP); \
> >>> }
> >>> DEFRAND2_REAL(rnorm)
> >>>
> >>>
> >>> Doesn't help me at all in understanding how it works. It should create
> a
> >>> function random2(sn, sa, sb, norm, REALSXP); I understand that is a
> >>> version
> >>> of the random2 function that returns a real S expression taking sn, sa
> and
> >>> sb as parameters. But how does find the actual functional form for the
> >>> normal distribution?
> >>>
> >>> I am asking because I would like to rewrite some of the other
> functions,
> >>> such as parameterizing rbeta by the mean and sample size rather than by
> >>> the
> >>> number of successes and failures and rgamma by the mean and total time
> >>> elapsed instead of the number of events. Once I understand how the C
> >>> source
> >>> code works, it would be hopefully not very difficult to reparameterize
> >>> them.
> >>>
> >>> Thanks,
> >>>
> >>> Luis Usier
> >>>
> >>>         [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
> R/Finance 2016 | www.rinfinance.com
>

	[[alternative HTML version deleted]]


From martin.pacala at wu.ac.at  Fri Jul  1 18:19:54 2016
From: martin.pacala at wu.ac.at (Martin Pacala)
Date: Fri, 1 Jul 2016 18:19:54 +0200
Subject: [Rd] [R-Forge] R-forge down ?
In-Reply-To: <CAPRP4-dk9X1+PuykMTH6RQWkEEJJ_Fq5cb=k=zO9OiRJDacWzA@mail.gmail.com>
References: <CAPRP4-dk9X1+PuykMTH6RQWkEEJJ_Fq5cb=k=zO9OiRJDacWzA@mail.gmail.com>
Message-ID: <5776982A.8090308@wu.ac.at>

Yeah, it was meant to be a very short downtime, but then the server had 
a problem with booting which prolonged the process.

It's back up again

On 07/01/2016 06:03 PM, Martin Maechler wrote:
> It looks to me that  R-forge  has been down for at least two hours now...
>
> _______________________________________________
> Statmath-R-Forge mailing list
> Statmath-R-Forge at wu.ac.at
> https://mailman.wu.ac.at/mailman/listinfo/statmath-r-forge


-- 
Martin Pacala, LL.B.
System Administrator
Institute for Statistics and Mathematics
WU Vienna University of Economics and Business
+43-1-313 36-5054


From spencer.graves at prodsyse.com  Sat Jul  2 01:45:28 2016
From: spencer.graves at prodsyse.com (Spencer Graves)
Date: Fri, 1 Jul 2016 18:45:28 -0500
Subject: [Rd] [R-Forge] R-forge down ?
In-Reply-To: <5776982A.8090308@wu.ac.at>
References: <CAPRP4-dk9X1+PuykMTH6RQWkEEJJ_Fq5cb=k=zO9OiRJDacWzA@mail.gmail.com>
	<5776982A.8090308@wu.ac.at>
Message-ID: <6d6c7b9c-91b6-88ef-0906-828a1a250709@prodsyse.com>

Thanks.  I appreciate all you do to keep it working.  Spencer Graves


On 7/1/2016 11:19 AM, Martin Pacala wrote:
> Yeah, it was meant to be a very short downtime, but then the server 
> had a problem with booting which prolonged the process.
>
> It's back up again
>
> On 07/01/2016 06:03 PM, Martin Maechler wrote:
>> It looks to me that  R-forge  has been down for at least two hours 
>> now...
>>
>> _______________________________________________
>> Statmath-R-Forge mailing list
>> Statmath-R-Forge at wu.ac.at
>> https://mailman.wu.ac.at/mailman/listinfo/statmath-r-forge
>
>


From luis.henrique.usier at gmail.com  Sat Jul  2 02:39:49 2016
From: luis.henrique.usier at gmail.com (Luis Usier)
Date: Sat, 2 Jul 2016 01:39:49 +0100
Subject: [Rd] Calling C implementations of rnorm and friends
In-Reply-To: <CADwqtCMXfSD2+-0rc_0mqx5p_LNEe3PXi29Nkjo7w3vThxwheA@mail.gmail.com>
References: <CAOeuMBBshUcPrwBbgZdMZTgRYo3WEqia0O9DSWp4GEmuO7R=oQ@mail.gmail.com>
	<CADwqtCNxchG_VL3Fe0Hqvvco7-BoiJ1SvRA1SAz7uVSa8yW4qA@mail.gmail.com>
	<CAOeuMBBzW+ZiWKDXMfT=KCjc6z=jm4OkLeqYQA81Y=dHVTszZw@mail.gmail.com>
	<CAPPM_gQPOe8dbY02nOSE7_Uzca30N=sP-AGN2reYt-YWrJxNGw@mail.gmail.com>
	<CADwqtCMXfSD2+-0rc_0mqx5p_LNEe3PXi29Nkjo7w3vThxwheA@mail.gmail.com>
Message-ID: <CAOeuMBAaUNiEDLSoR9Dh4uXV6Ltto0bwrZokt_ZurGGP_snMDw@mail.gmail.com>

Gabriel,

That's exactly what I have been doing, and it works fine. However, I just
wanted to *understand* how the random numbers are generated, for no other
reason than to satiate my curiosity.

The one thing that's not very elegant about this way of doing things is
that I have to hard-code special rules for parameter values that are
infinite. I guess there's no other way though; I finally found something
closer to the source code for rnorm which for some reason is *not* in the
stats package folder but in "nmath/rnorm.c":

double rnorm(double mu, double sigma)
{

if (ISNAN(mu) || !R_FINITE(sigma) || sigma < 0.)

ML_ERR_return_NAN;

if (sigma == 0. || !R_FINITE(mu))

return mu; /* includes mu = +/- Inf with finite sigma */

else

return mu + sigma * norm_rand();

}

However, this just scales the result from calling the function norm_rand(),
which I cannot find anywhere : (


Following Joshua's suggestion should only show me functions from the base
package, that is, functions called with .Primitive() and .Internal(). Since
I'm looking at a function from the stats package called with .Call() I
thought it shouldn't be names.c. BUT, it turns out that it *is* actually
there and is also a function that can be called with .Internal() from the
base package. So, surprisingly enough, this:

.Internal(rnorm(1, 0, 1))

actually works, even in the command line, as all functions from base are
always accessible : ) Am I allowed to do this? There's a note in the source
code that says "Can remove all the [dpqr]xxx once the compiler knows how to
optimize
to .External.", whatever that means; I feel like R CMD check/CRAN may not
like it if I call norm and friends from base.

Anyway, thank you both for your help! Any extra nuggets of wisdom would be
appreciated, but this was already very helpful.

Luis

On Sat, Jul 2, 2016 at 12:24 AM, Gabriel Becker <gmbecker at ucdavis.edu>
wrote:

> Well,
>
> For this particular use case why not just transform the parameters at the
> R level and then call the existing function? Is there not a closed form
> mapping?
>
> ~G
> On Jul 1, 2016 2:50 PM, "Joshua Ulrich" <josh.m.ulrich at gmail.com> wrote:
>
>> On Fri, Jul 1, 2016 at 6:13 AM, Luis Usier
>> <luis.henrique.usier at gmail.com> wrote:
>> > Gabriel,
>> >
>> > Thanks for that! I guess I really should have figured that one out
>> sooner,
>> > huh?
>> >
>> > I understand why that wouldn't be CRAN-compliant. But then, what *is*
>> the
>> > proper way to do it? Is there any way I can call unexported functions
>> from
>> > another package and have it accepted by CRAN?
>> >
>> There may be ways to call unexported functions that R CMD check will
>> not detect, but you should not look for ways to violate the spirit of
>> the policy.  Work-arounds include asking the package maintainer to
>> export the functionality you want, or you can copy the desired
>> functionality to your package (with attribution, of course).
>>
>> In this particular case, you can probably get what you want via the
>> Rmath library.  It provides C-level access to all the distribution
>> functions (and more).  You would need something like this in your C
>> code:
>>
>> #include <Rmath.h>
>> GetRNGstate();
>> double rn = rnorm(0.0, 1.0);
>> PutRNGstate()
>>
>> Once Dirk recovers from useR!, he'll tell you how this is all
>> super-easy if you just use Rcpp. ;)
>>
>> > Also, if I instead re-write the random variable generating functions, do
>> > you have any idea of where the source code is in the stats package? As I
>> > said above, I can't seem to find the source code for the functional
>> forms.
>> >
>> See the sections "Functions that call compiled code" and "Compiled
>> code in a base package" from this answer:
>> http://stackoverflow.com/a/19226817/271616
>>
>> That should give you a few pointers on where/how to look.
>>
>> > Thanks,
>> >
>> > Luis
>> >
>> > On Thu, Jun 30, 2016 at 10:38 PM, Gabriel Becker <gmbecker at ucdavis.edu>
>> > wrote:
>> >
>> >> Luis,
>> >>
>> >> C_rnorm is a symbol but it's not exported.  This means that you *can*
>> do
>> >> this by using stats:::C_rnorm.
>> >>
>> >> That said, it's not exported, which means that it's not supported to do
>> >> this. So your package likely would not be allowed on CRAN, for example.
>> >>
>> >> Best,
>> >> ~G
>> >> On Jun 30, 2016 2:08 PM, "Luis Usier" <luis.henrique.usier at gmail.com>
>> >> wrote:
>> >>
>> >>> Hi all,
>> >>>
>> >>> Looking at the body for the function rnorm, I see that the body of the
>> >>> function is:
>> >>>
>> >>>     .Call(C_rnorm, n, mean, sd)
>> >>>
>> >>> I want to implement functions that generate normal (and other) random
>> >>> variables. Now, I understand that I can perfectly well just call the R
>> >>> wrapper for these functions and that will be almost indistinguishable
>> for
>> >>> most purposes, but for whatever reason I wanted to try and call the C
>> >>> function directly. My first instinct was to call them as:
>> >>>
>> >>>     .Call(C_rnorm, 1, 1, 1)
>> >>>
>> >>> This doesn't work because R assumes C_rnorm is an object. Looking at
>> the
>> >>> documentation for .Call, I try passing it in as a string:
>> >>>
>> >>>     .Call("C_rnorm", 1, 1, 1, PACKAGE = "stats")
>> >>>
>> >>> This doesn't work either. The help page links to
>> getNativeSymbolInfo(),
>> >>> which I can't make work either. It also refers me to the dyn.load()
>> >>> function and the "Writing R  Extensions" manual.
>> >>>
>> >>> After reading and trying to digest those, I try
>> >>>
>> >>>     getDLLRegisteredRoutines("stats")
>> >>>
>> >>> which shows me all the C and Fortran functions as registered routines,
>> >>> along with their number of parameters. I retrieve rnorm from the list
>> and
>> >>> pass it on to .Call, which then works fine.
>> >>>
>> >>> However, is there an easier way to do this? Specifically, I would
>> like to
>> >>> call the DLL registered routines from within functions in a package I
>> am
>> >>> writing. The manual tells me I should use useDynLib(). So if I added
>> >>> useDynLib("stats") to my namespace, would that work? Could I then
>> have a
>> >>> function such as:
>> >>>
>> >>>     function(x, y, z) .Call(C_rnorm, x, y, z)
>> >>>
>> >>> in my package? If not, what is the proper way of calling these
>> functions
>> >>> from other packages? Should I use "C_rnorm" or "norm"?
>> >>>
>> >>> Also, I was looking for the C source code of rnorm, because I wanted
>> to
>> >>> understand how the function works. Looking at Winston Chang's github R
>> >>> mirror, I found rnorm in the random.c file in the stats package.
>> However,
>> >>> the code I find for it:
>> >>>
>> >>>
>> >>>
>> >>> #define DEFRAND2_REAL(name) \
>> >>> SEXP do_##name(SEXP sn, SEXP sa, SEXP sb) { \
>> >>>     return random2(sn, sa, sb, name, REALSXP); \
>> >>> }
>> >>> DEFRAND2_REAL(rnorm)
>> >>>
>> >>>
>> >>> Doesn't help me at all in understanding how it works. It should
>> create a
>> >>> function random2(sn, sa, sb, norm, REALSXP); I understand that is a
>> >>> version
>> >>> of the random2 function that returns a real S expression taking sn,
>> sa and
>> >>> sb as parameters. But how does find the actual functional form for the
>> >>> normal distribution?
>> >>>
>> >>> I am asking because I would like to rewrite some of the other
>> functions,
>> >>> such as parameterizing rbeta by the mean and sample size rather than
>> by
>> >>> the
>> >>> number of successes and failures and rgamma by the mean and total time
>> >>> elapsed instead of the number of events. Once I understand how the C
>> >>> source
>> >>> code works, it would be hopefully not very difficult to reparameterize
>> >>> them.
>> >>>
>> >>> Thanks,
>> >>>
>> >>> Luis Usier
>> >>>
>> >>>         [[alternative HTML version deleted]]
>> >>>
>> >>> ______________________________________________
>> >>> R-devel at r-project.org mailing list
>> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>>
>> >>
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>
>> --
>> Joshua Ulrich  |  about.me/joshuaulrich
>> FOSS Trading  |  www.fosstrading.com
>> R/Finance 2016 | www.rinfinance.com
>>
>

	[[alternative HTML version deleted]]


From bbolker at gmail.com  Mon Jul  4 17:49:40 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Mon, 4 Jul 2016 11:49:40 -0400
Subject: [Rd] cat() in proc.time?
Message-ID: <577A8594.9070408@gmail.com>


  Does anyone know if there's a reason that proc.time() uses cat()
rather than message() to print the output when there has been an error
in the process of timing?

line 31 of time.R,

https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/library/base/R/time.R#L31

on.exit(cat("Timing stopped at:", ppt(proc.time() - time), "\n"))

  This means that as far as I can tell the general way to make sure
there is no output from a timed statement is ...

     tt1 <- capture.output(tt0 <- suppressMessages(suppressWarnings(
                try(<stuff to try>,
                    silent=TRUE))))

(I know I could/should be using tryCatch() instead of try(), but I don't
think it really matters here ... ?)

  What would people think of a request to change this to message()
rather than cat() in the future ... ?  (This would mess up code that is
already using capture.output() to store this information ...)

  cheers
    Ben Bolker


From h.wickham at gmail.com  Thu Jul  7 16:57:54 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Thu, 7 Jul 2016 09:57:54 -0500
Subject: [Rd] String encoding problem
Message-ID: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>

If you print:

"\xc9\x82\xbf"

you get

 "\u0242\xbf"

But if you try and evaluate that string you get:

>  "\u0242\xbf"
Error: mixing Unicode and octal/hex escapes in a string is not allowed

(Probably will only happen on mac/linux with default utf-8 encoding)

Hadley

-- 
http://hadley.nz


From murdoch.duncan at gmail.com  Thu Jul  7 17:11:56 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 7 Jul 2016 11:11:56 -0400
Subject: [Rd] String encoding problem
In-Reply-To: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
References: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
Message-ID: <a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>

On 07/07/2016 10:57 AM, Hadley Wickham wrote:
> If you print:
>
> "\xc9\x82\xbf"
>
> you get
>
>  "\u0242\xbf"
>
> But if you try and evaluate that string you get:
>
>>  "\u0242\xbf"
> Error: mixing Unicode and octal/hex escapes in a string is not allowed
>
> (Probably will only happen on mac/linux with default utf-8 encoding)

I'm not sure what should happen here, but that's not a legal string in a 
UTF-8 locale, so it's not too surprising that things go wonky.

Duncan Murdoch


From h.wickham at gmail.com  Thu Jul  7 17:40:41 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Thu, 7 Jul 2016 10:40:41 -0500
Subject: [Rd] String encoding problem
In-Reply-To: <a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>
References: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
	<a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>
Message-ID: <CABdHhvHreFpv9QGNkhrZOM9sD-30J5+N3xkD02fqyVHH6Q4WxA@mail.gmail.com>

On Thu, Jul 7, 2016 at 10:11 AM, Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
> On 07/07/2016 10:57 AM, Hadley Wickham wrote:
>>
>> If you print:
>>
>> "\xc9\x82\xbf"
>>
>> you get
>>
>>  "\u0242\xbf"
>>
>> But if you try and evaluate that string you get:
>>
>>>  "\u0242\xbf"
>>
>> Error: mixing Unicode and octal/hex escapes in a string is not allowed
>>
>> (Probably will only happen on mac/linux with default utf-8 encoding)
>
>
> I'm not sure what should happen here, but that's not a legal string in a
> UTF-8 locale, so it's not too surprising that things go wonky.

Here's bit more context on how I got that sequence of bytes:

x <- "?????"
y <- iconv(x, to = "Shift-JIS")
Encoding(y)
y

I did this to create an example to demonstrate how to handle encoding
problems, and it's bit frustrating that I have to manually mangle the
string in order to be able to re-use it in another session.  Maybe
strings with unknown encoding shouldn't use unicode escapes?

Hadley

-- 
http://hadley.nz


From simon.urbanek at r-project.org  Thu Jul  7 18:00:55 2016
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Thu, 7 Jul 2016 12:00:55 -0400
Subject: [Rd] String encoding problem
In-Reply-To: <CABdHhvHreFpv9QGNkhrZOM9sD-30J5+N3xkD02fqyVHH6Q4WxA@mail.gmail.com>
References: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
	<a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>
	<CABdHhvHreFpv9QGNkhrZOM9sD-30J5+N3xkD02fqyVHH6Q4WxA@mail.gmail.com>
Message-ID: <9D8A3548-910A-46AB-9213-CEE27EBAFC71@r-project.org>


> On Jul 7, 2016, at 11:40 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> On Thu, Jul 7, 2016 at 10:11 AM, Duncan Murdoch
> <murdoch.duncan at gmail.com> wrote:
>> On 07/07/2016 10:57 AM, Hadley Wickham wrote:
>>> 
>>> If you print:
>>> 
>>> "\xc9\x82\xbf"
>>> 
>>> you get
>>> 
>>> "\u0242\xbf"
>>> 
>>> But if you try and evaluate that string you get:
>>> 
>>>> "\u0242\xbf"
>>> 
>>> Error: mixing Unicode and octal/hex escapes in a string is not allowed
>>> 
>>> (Probably will only happen on mac/linux with default utf-8 encoding)
>> 
>> 
>> I'm not sure what should happen here, but that's not a legal string in a
>> UTF-8 locale, so it's not too surprising that things go wonky.
> 
> Here's bit more context on how I got that sequence of bytes:
> 
> x <- "?????"
> y <- iconv(x, to = "Shift-JIS")
> Encoding(y)
> y
> 
> I did this to create an example to demonstrate how to handle encoding
> problems, and it's bit frustrating that I have to manually mangle the
> string in order to be able to re-use it in another session.  Maybe
> strings with unknown encoding shouldn't use unicode escapes?
> 

The real issue is that the only supported encoding of strings in R are native (=current locale), latin1, and UTF-8. So unless you're running in Shift-JIS locale, that encoding is not supported in your R, so the result of the iconv() above is not a valid R string, just a sequence of bytes that R doesn't know how to deal with. It tries to interpret it in your locale (UTF-8) just as a guess, but that doesn't quite work. To illustrate, doing this in C locale yields a different result:

> x
[1] "<U+3053><U+3093><U+306B><U+3061><U+306F>"
> y <- iconv(x, from="UTF-8", to = "Shift-JIS")
> y
[1] "\202\261\202\361\202\311\202\277\202\315"

If you want a result that does not depend on your locale and is none of the supported encodings, you have to declare it as bytes (back in UTF-8):

> Encoding(y)="bytes"
> y
[1] "\\x82\\xb1\\x82\\xf1\\x82\\xc9\\x82\\xbf\\x82\\xcd"
> iconv(y, from="Shift-JIS", to="utf-8")
[1] "?????"

But that has its own perils such as the fact that you cannot dput() byte-encoded strings.

Cheers,
Simon


From h.wickham at gmail.com  Thu Jul  7 18:15:53 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Thu, 7 Jul 2016 11:15:53 -0500
Subject: [Rd] String encoding problem
In-Reply-To: <9D8A3548-910A-46AB-9213-CEE27EBAFC71@r-project.org>
References: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
	<a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>
	<CABdHhvHreFpv9QGNkhrZOM9sD-30J5+N3xkD02fqyVHH6Q4WxA@mail.gmail.com>
	<9D8A3548-910A-46AB-9213-CEE27EBAFC71@r-project.org>
Message-ID: <CABdHhvFoxnA1UeT_zQWGsJEydkc6YvVtyyymhOkMtrs9mzKFyg@mail.gmail.com>

>>> I'm not sure what should happen here, but that's not a legal string in a
>>> UTF-8 locale, so it's not too surprising that things go wonky.
>>
>> Here's bit more context on how I got that sequence of bytes:
>>
>> x <- "?????"
>> y <- iconv(x, to = "Shift-JIS")
>> Encoding(y)
>> y
>>
>> I did this to create an example to demonstrate how to handle encoding
>> problems, and it's bit frustrating that I have to manually mangle the
>> string in order to be able to re-use it in another session.  Maybe
>> strings with unknown encoding shouldn't use unicode escapes?
>>
>
> The real issue is that the only supported encoding of strings in R are native (=current locale), latin1, and UTF-8. So unless you're running in Shift-JIS locale, that encoding is not supported in your R, so the result of the iconv() above is not a valid R string, just a sequence of bytes that R doesn't know how to deal with. It tries to interpret it in your locale (UTF-8) just as a guess, but that doesn't quite work. To illustrate, doing this in C locale yields a different result:
>
>> x
> [1] "<U+3053><U+3093><U+306B><U+3061><U+306F>"
>> y <- iconv(x, from="UTF-8", to = "Shift-JIS")
>> y
> [1] "\202\261\202\361\202\311\202\277\202\315"
>
> If you want a result that does not depend on your locale and is none of the supported encodings, you have to declare it as bytes (back in UTF-8):
>
>> Encoding(y)="bytes"
>> y
> [1] "\\x82\\xb1\\x82\\xf1\\x82\\xc9\\x82\\xbf\\x82\\xcd"
>> iconv(y, from="Shift-JIS", to="utf-8")
> [1] "?????"
>
> But that has its own perils such as the fact that you cannot dput() byte-encoded strings.

Right - I'm aware of that.  But to me, it doesn't seem correct to
print a string that is not a valid R string. Why is an unknown
encoding printed like UTF-8?

Hadley

-- 
http://hadley.nz


From pdalgd at gmail.com  Thu Jul  7 18:51:13 2016
From: pdalgd at gmail.com (peter dalgaard)
Date: Thu, 7 Jul 2016 18:51:13 +0200
Subject: [Rd] String encoding problem
In-Reply-To: <CABdHhvFoxnA1UeT_zQWGsJEydkc6YvVtyyymhOkMtrs9mzKFyg@mail.gmail.com>
References: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
	<a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>
	<CABdHhvHreFpv9QGNkhrZOM9sD-30J5+N3xkD02fqyVHH6Q4WxA@mail.gmail.com>
	<9D8A3548-910A-46AB-9213-CEE27EBAFC71@r-project.org>
	<CABdHhvFoxnA1UeT_zQWGsJEydkc6YvVtyyymhOkMtrs9mzKFyg@mail.gmail.com>
Message-ID: <BC9624BC-91FF-406E-BC3F-12A3A123528F@gmail.com>


> On 07 Jul 2016, at 18:15 , Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> Right - I'm aware of that.  But to me, it doesn't seem correct to
> print a string that is not a valid R string. Why is an unknown
> encoding printed like UTF-8?
> 

It isn't -- no UTF-8 would have the \xbf. I may be flogging a dead horse, but it seems to me that there are three alternatives:

- refuse the input (x <- "\xc9\x82\xbf" gives "sorry, not a UTF-8 string" or so)
- refuse to print it (print(x) gives "cannot print non-UTF-8 string")
- what happens now

and a fourth one might be to actually allow mixing of \u0007 and \x07 and \007, but I suspect that there are demons down the line which is why it is not happening now. (Does it ring a bell with anyone?)

-pd


-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jeroen.ooms at stat.ucla.edu  Thu Jul  7 19:18:59 2016
From: jeroen.ooms at stat.ucla.edu (Jeroen Ooms)
Date: Thu, 7 Jul 2016 19:18:59 +0200
Subject: [Rd] Detecting user interrupts in R_tryEval
Message-ID: <CABFfbXv9EQdJcNDpQiBhiwA78m2YH+tC1m6NXR2SgsoJp3+pFA@mail.gmail.com>

Is there any way to distinguish between an error and a user
interruption in R_tryEval? In both cases the ErrorOccurred argument is
set to 1. For my application I need a different action in case of a
SIGINT.

>From the source code I infer that R_tryEval basically wraps eval in
R_ToplevelExec, which returns TRUE if fun returns normally, FALSE if
it results in a jump to top level. However both an error and SIGINT
result in a jump. Is there an alternative method, or some method of
finding out which is the two happened after calling R_tryEval?

One thing I tried is see if R_curErrorBuf() is empty. However this is
unreliable because in the case of an interrupt, the error buffer
sometimes contains some old error message.


From wdunlap at tibco.com  Thu Jul  7 20:53:39 2016
From: wdunlap at tibco.com (William Dunlap)
Date: Thu, 7 Jul 2016 11:53:39 -0700
Subject: [Rd] Detecting user interrupts in R_tryEval
In-Reply-To: <CABFfbXv9EQdJcNDpQiBhiwA78m2YH+tC1m6NXR2SgsoJp3+pFA@mail.gmail.com>
References: <CABFfbXv9EQdJcNDpQiBhiwA78m2YH+tC1m6NXR2SgsoJp3+pFA@mail.gmail.com>
Message-ID: <CAF8bMcaqeeqJtEcUd5PO3=z_EvhUP9mBn+W40wjOcGO8SuZjAQ@mail.gmail.com>

In R code tryCatch can detect the difference.  Hit control-C (on Unixen) or
Escape
(on Windows) to interrupt the long-running for loop and see that the
interrupt clause
gets called:

> z <- tryCatch(for(i in seq_len(1e8))log(exp(i/10)), error=function(e)e,
interrupt=function(e)e)
^C> dput(z)
structure(list(), class = c("interrupt", "condition"))



Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Thu, Jul 7, 2016 at 10:18 AM, Jeroen Ooms <jeroen.ooms at stat.ucla.edu>
wrote:

> Is there any way to distinguish between an error and a user
> interruption in R_tryEval? In both cases the ErrorOccurred argument is
> set to 1. For my application I need a different action in case of a
> SIGINT.
>
> >From the source code I infer that R_tryEval basically wraps eval in
> R_ToplevelExec, which returns TRUE if fun returns normally, FALSE if
> it results in a jump to top level. However both an error and SIGINT
> result in a jump. Is there an alternative method, or some method of
> finding out which is the two happened after calling R_tryEval?
>
> One thing I tried is see if R_curErrorBuf() is empty. However this is
> unreliable because in the case of an interrupt, the error buffer
> sometimes contains some old error message.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Thu Jul  7 21:23:59 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 7 Jul 2016 15:23:59 -0400
Subject: [Rd] String encoding problem
In-Reply-To: <BC9624BC-91FF-406E-BC3F-12A3A123528F@gmail.com>
References: <CABdHhvHwyZEEK+pjzgjvxgExeRuoSbEgTX+K10hibU6cKVL_TA@mail.gmail.com>
	<a9e15129-684b-0a14-2790-5856aca9eb50@gmail.com>
	<CABdHhvHreFpv9QGNkhrZOM9sD-30J5+N3xkD02fqyVHH6Q4WxA@mail.gmail.com>
	<9D8A3548-910A-46AB-9213-CEE27EBAFC71@r-project.org>
	<CABdHhvFoxnA1UeT_zQWGsJEydkc6YvVtyyymhOkMtrs9mzKFyg@mail.gmail.com>
	<BC9624BC-91FF-406E-BC3F-12A3A123528F@gmail.com>
Message-ID: <1790fde0-b597-760a-18a4-319fe9fd75c6@gmail.com>

On 07/07/2016 12:51 PM, peter dalgaard wrote:
> > On 07 Jul 2016, at 18:15 , Hadley Wickham <h.wickham at gmail.com> wrote:
> >
> > Right - I'm aware of that.  But to me, it doesn't seem correct to
> > print a string that is not a valid R string. Why is an unknown
> > encoding printed like UTF-8?
> >
>
> It isn't -- no UTF-8 would have the \xbf. I may be flogging a dead horse, but it seems to me that there are three alternatives:
>
> - refuse the input (x <- "\xc9\x82\xbf" gives "sorry, not a UTF-8 string" or so)
> - refuse to print it (print(x) gives "cannot print non-UTF-8 string")
> - what happens now
>
> and a fourth one might be to actually allow mixing of \u0007 and \x07 and \007, but I suspect that there are demons down the line which is why it is not happening now. (Does it ring a bell with anyone?)

A fifth option would be to use only hex escapes when invalid UTF-8 was 
found.  That would echo back the input in this case.  No idea if it 
would cause other problems.

Duncan Murdoch


From avraham.adler at gmail.com  Thu Jul  7 23:47:52 2016
From: avraham.adler at gmail.com (Avraham Adler)
Date: Thu, 7 Jul 2016 17:47:52 -0400
Subject: [Rd] Error building Tcl: R-patched_2016-07-05
Message-ID: <CAL6gwnJN__nzCz5yKsmo522bvoEbY8+PapbKmigGrJNurUYAiQ@mail.gmail.com>

I am trying to build R under 64bit Windows7. I am using a fresh
install of Rtools34 and R-patched_2016-07-05. I am getting the
following error:

C:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o tcltk.dll tmp.def init.o
 tcltk.o tcltk_win.o ../../../gnuwin32/dllversion.o -L../../../../Tcl/bin64 -ltc
l85 -ltk85 -LC:/R/RLocalSoft/lib/x64 -LC:/R/RLocalSoft/lib -L../../../../bin/x64
 -lR
C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w6
4-mingw32/bin/ld.exe: cannot find -ltcl85
C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w6
4-mingw32/bin/ld.exe: cannot find -ltk85
collect2.exe: error: ld returned 1 exit status
cp: cannot stat 'tcltk.dll': No such file or directory


Looking into R64/Tcl/bin64, I see that the versions provided are
tcl86.dll and tk86.dll, which probably means that line 85 of
R_HOME/src/gnuwin32/fixed/etc/Makeconf needs to be changed from:

TCL_VERSION = 85

to

TCL_VERSION = 86

Thank you,

Avi


From murdoch.duncan at gmail.com  Fri Jul  8 00:33:30 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 7 Jul 2016 18:33:30 -0400
Subject: [Rd] Error building Tcl: R-patched_2016-07-05
In-Reply-To: <CAL6gwnJN__nzCz5yKsmo522bvoEbY8+PapbKmigGrJNurUYAiQ@mail.gmail.com>
References: <CAL6gwnJN__nzCz5yKsmo522bvoEbY8+PapbKmigGrJNurUYAiQ@mail.gmail.com>
Message-ID: <6d2934a7-8fca-1d7a-39cb-1955ef96e17d@gmail.com>

On 07/07/2016 5:47 PM, Avraham Adler wrote:
> I am trying to build R under 64bit Windows7. I am using a fresh
> install of Rtools34 and R-patched_2016-07-05. I am getting the
> following error:
>
> C:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o tcltk.dll tmp.def init.o
>  tcltk.o tcltk_win.o ../../../gnuwin32/dllversion.o -L../../../../Tcl/bin64 -ltc
> l85 -ltk85 -LC:/R/RLocalSoft/lib/x64 -LC:/R/RLocalSoft/lib -L../../../../bin/x64
>  -lR
> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w6
> 4-mingw32/bin/ld.exe: cannot find -ltcl85
> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w6
> 4-mingw32/bin/ld.exe: cannot find -ltk85
> collect2.exe: error: ld returned 1 exit status
> cp: cannot stat 'tcltk.dll': No such file or directory
>
>
> Looking into R64/Tcl/bin64, I see that the versions provided are
> tcl86.dll and tk86.dll, which probably means that line 85 of
> R_HOME/src/gnuwin32/fixed/etc/Makeconf needs to be changed from:
>
> TCL_VERSION = 85
>
> to
>
> TCL_VERSION = 86

That is the current setting in R-devel, and has been since revision 
70701 on June 3.  (It is 85 in the 3.3 branch.)

Duncan Murdoch


From avraham.adler at gmail.com  Fri Jul  8 17:22:40 2016
From: avraham.adler at gmail.com (Avraham Adler)
Date: Fri, 8 Jul 2016 11:22:40 -0400
Subject: [Rd] Error building Tcl: R-patched_2016-07-05
In-Reply-To: <6d2934a7-8fca-1d7a-39cb-1955ef96e17d@gmail.com>
References: <CAL6gwnJN__nzCz5yKsmo522bvoEbY8+PapbKmigGrJNurUYAiQ@mail.gmail.com>
	<6d2934a7-8fca-1d7a-39cb-1955ef96e17d@gmail.com>
Message-ID: <CAL6gwnLXyEFJVvwNE68MWtP=WrMa=n=G0dkjPj3ZBYo50q=K9Q@mail.gmail.com>

OK, that makes sense. Perhaps Rtools34 should then say it should be
used for a version later than 3.3.x? Then again, anyone with the
question will probably find this thread.

Thank you,

Avi

On Thu, Jul 7, 2016 at 6:33 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> On 07/07/2016 5:47 PM, Avraham Adler wrote:
>>
>> I am trying to build R under 64bit Windows7. I am using a fresh
>> install of Rtools34 and R-patched_2016-07-05. I am getting the
>> following error:
>>
>> C:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o tcltk.dll tmp.def
>> init.o
>>  tcltk.o tcltk_win.o ../../../gnuwin32/dllversion.o
>> -L../../../../Tcl/bin64 -ltc
>> l85 -ltk85 -LC:/R/RLocalSoft/lib/x64 -LC:/R/RLocalSoft/lib
>> -L../../../../bin/x64
>>  -lR
>>
>> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w6
>> 4-mingw32/bin/ld.exe: cannot find -ltcl85
>>
>> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w6
>> 4-mingw32/bin/ld.exe: cannot find -ltk85
>> collect2.exe: error: ld returned 1 exit status
>> cp: cannot stat 'tcltk.dll': No such file or directory
>>
>>
>> Looking into R64/Tcl/bin64, I see that the versions provided are
>> tcl86.dll and tk86.dll, which probably means that line 85 of
>> R_HOME/src/gnuwin32/fixed/etc/Makeconf needs to be changed from:
>>
>> TCL_VERSION = 85
>>
>> to
>>
>> TCL_VERSION = 86
>
>
> That is the current setting in R-devel, and has been since revision 70701 on
> June 3.  (It is 85 in the 3.3 branch.)
>
> Duncan Murdoch
>


From maechler at stat.math.ethz.ch  Mon Jul 11 12:30:26 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 11 Jul 2016 12:30:26 +0200
Subject: [Rd] 3 minor issues with getClass 'resolve.msg' arg
In-Reply-To: <5770392C.8090809@fredhutch.org>
References: <5770392C.8090809@fredhutch.org>
Message-ID: <22403.30018.431025.167515@stat.math.ethz.ch>

>>>>> Herv? Pag?s <hpages at fredhutch.org>
>>>>>     on Sun, 26 Jun 2016 13:21:00 -0700 writes:

    > Hi,
    > It turns out that two packages (1 Bioconductor, 1 CRAN) define an
    > S4 class called "Annotated":

    > library(S4Vectors)  # see (*) at bottom for how to install
    > library(RNeXML)

    > 1st issue
    > ---------

    > getClass() issues the same warning twice:

    > tmp <- getClass("Annotated")
    > Found more than one class "Annotated" in cache; using the first, from 
    > namespace 'S4Vectors'
    > Found more than one class "Annotated" in cache; using the first, from 
    > namespace 'S4Vectors'

    > 2nd issue
    > ---------

    > It would be very helpful if the warning message was giving the name of
    > the other package. I was in a session with 50+ packages attached or
    > loaded via a namespace when I saw the warning. Took me a while to
    > identify the other package, which I finally managed to do with:

    > names(.Call(methods:::C_R_getClassFromCache, "Annotated", 
    > methods:::.classTable))

    > 3rd issue
    > ---------

    > Calling getClass() with 'resolve.msg=FALSE' only removes one of the 2
    > warnings:

    >> tmp <- getClass("Annotated", resolve.msg=FALSE)
    > Found more than one class "Annotated" in cache; using the first, from 
    > namespace 'S4Vectors'


Indeed, R-core had found this to be buggy ourselves, and changes
happened then to clean up this behavior; specifically it was

------------------------------------------------------------------------
r70554 | lawrence | 2016-04-27 06:05:07 +0200 (Wed, 27 Apr 2016)

better resolve multiple hits in the class cache
------------------------------------------------------------------------

Because the changes would have potential effects that were not
so easy to predict, and I think it *does* entail changed
*behavior* (not just messages) in some cases, the change have not
been ported to R 3.3.x patched, but remained in "R-devel".
Here is the NEWS entry (2nd entry of 'BUG FIXES) :

o When a class name matches multiple classes in the cache,
  perform a dynamic search in order to obey namespace
  imports. This should eliminate annoying messages about multiple
  hits in the class cache. Also, pass along the package from the
  ClassExtends object when looking up superclasses in the cache.

    > Thanks,
    > H.

You are welcome,
Martin


    > (*) Install S4Vectors with:

    > source("https://bioconductor.org/biocLite.R")
    > biocLite("S4Vectors")

    > -- 
    > Herv? Pag?s

    > Program in Computational Biology
    > Division of Public Health Sciences
    > Fred Hutchinson Cancer Research Center
    > 1100 Fairview Ave. N, M1-B514
    > P.O. Box 19024
    > Seattle, WA 98109-1024

    > E-mail: hpages at fredhutch.org
    > Phone:  (206) 667-5791
    > Fax:    (206) 667-1319

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From hpages at fredhutch.org  Mon Jul 11 21:59:58 2016
From: hpages at fredhutch.org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Mon, 11 Jul 2016 12:59:58 -0700
Subject: [Rd] 3 minor issues with getClass 'resolve.msg' arg
In-Reply-To: <22403.30018.431025.167515@stat.math.ethz.ch>
References: <5770392C.8090809@fredhutch.org>
	<22403.30018.431025.167515@stat.math.ethz.ch>
Message-ID: <5783FABE.3080705@fredhutch.org>

Hi Martin,

Thanks for the heads up and thanks Michael for making this change.

FWIW I just tried this with R-devel and indeed it seems to be doing
a much better job at handling multiple hits in the cache class. In
particular the Annotated class defined in the RNeXML package doesn't
get in the way anymore because it's not exported. Perfect!

Cheers,
H.

On 07/11/2016 03:30 AM, Martin Maechler wrote:
>>>>>> Herv? Pag?s <hpages at fredhutch.org>
>>>>>>      on Sun, 26 Jun 2016 13:21:00 -0700 writes:
>
>      > Hi,
>      > It turns out that two packages (1 Bioconductor, 1 CRAN) define an
>      > S4 class called "Annotated":
>
>      > library(S4Vectors)  # see (*) at bottom for how to install
>      > library(RNeXML)
>
>      > 1st issue
>      > ---------
>
>      > getClass() issues the same warning twice:
>
>      > tmp <- getClass("Annotated")
>      > Found more than one class "Annotated" in cache; using the first, from
>      > namespace 'S4Vectors'
>      > Found more than one class "Annotated" in cache; using the first, from
>      > namespace 'S4Vectors'
>
>      > 2nd issue
>      > ---------
>
>      > It would be very helpful if the warning message was giving the name of
>      > the other package. I was in a session with 50+ packages attached or
>      > loaded via a namespace when I saw the warning. Took me a while to
>      > identify the other package, which I finally managed to do with:
>
>      > names(.Call(methods:::C_R_getClassFromCache, "Annotated",
>      > methods:::.classTable))
>
>      > 3rd issue
>      > ---------
>
>      > Calling getClass() with 'resolve.msg=FALSE' only removes one of the 2
>      > warnings:
>
>      >> tmp <- getClass("Annotated", resolve.msg=FALSE)
>      > Found more than one class "Annotated" in cache; using the first, from
>      > namespace 'S4Vectors'
>
>
> Indeed, R-core had found this to be buggy ourselves, and changes
> happened then to clean up this behavior; specifically it was
>
> ------------------------------------------------------------------------
> r70554 | lawrence | 2016-04-27 06:05:07 +0200 (Wed, 27 Apr 2016)
>
> better resolve multiple hits in the class cache
> ------------------------------------------------------------------------
>
> Because the changes would have potential effects that were not
> so easy to predict, and I think it *does* entail changed
> *behavior* (not just messages) in some cases, the change have not
> been ported to R 3.3.x patched, but remained in "R-devel".
> Here is the NEWS entry (2nd entry of 'BUG FIXES) :
>
> o When a class name matches multiple classes in the cache,
>    perform a dynamic search in order to obey namespace
>    imports. This should eliminate annoying messages about multiple
>    hits in the class cache. Also, pass along the package from the
>    ClassExtends object when looking up superclasses in the cache.
>
>      > Thanks,
>      > H.
>
> You are welcome,
> Martin
>
>
>      > (*) Install S4Vectors with:
>
>      > source("https://bioconductor.org/biocLite.R")
>      > biocLite("S4Vectors")
>
>      > --
>      > Herv? Pag?s
>
>      > Program in Computational Biology
>      > Division of Public Health Sciences
>      > Fred Hutchinson Cancer Research Center
>      > 1100 Fairview Ave. N, M1-B514
>      > P.O. Box 19024
>      > Seattle, WA 98109-1024
>
>      > E-mail: hpages at fredhutch.org
>      > Phone:  (206) 667-5791
>      > Fax:    (206) 667-1319
>
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From murdoch.duncan at gmail.com  Tue Jul 12 19:38:13 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 12 Jul 2016 13:38:13 -0400
Subject: [Rd] [R] Forking and adapting an R package
In-Reply-To: <1880276709.61511.1468322926354.JavaMail.open-xchange@ox11.mail.hostpoint.internal>
References: <1880276709.61511.1468322926354.JavaMail.open-xchange@ox11.mail.hostpoint.internal>
Message-ID: <a53bf014-6081-cbf4-96e0-5826b71be8e6@gmail.com>

On 12/07/2016 7:28 AM, timo at timogrossenbacher.ch wrote:
> Hello.
>
> I'm trying to adapt the package ?hexbin? to suit my needs. This is the first
> time I do this. I've read a bit through Hadley's ?R packages?, but now I'm
> pretty lost (from a workflow point of view). I am using RStudio and Hadley's
> devtools.
>
> So I forked the repo I want to adapt: https://github.com/grssnbchr/hexbin  and
> cloned it using RStudio (I created a new project). What I basically want to do
> is adapt the package slightly and use the adapted source on my use case (an Rmd
> file in another location) - ideally, I would call the respective function
> (hexbin::grid.hexagons) in the Rmd and the source code of ?hexbin? would be
> called and debugged (just for understanding what the package ?hexbin? actually
> does in that case, I do not have to build it yet, or even publish it). What is
> the workflow for this?

This is more of an R-devel question, so I've posted my followup there 
(as well as a private copy to you).

The fact that you've forked the package shouldn't matter.  You are 
working in RStudio, so the way to work with a package is:

1.  Open the project consisting of your local package.
2.  In the Build pane, click on "Build and Reload".

What "Build and reload" does is to install the package from the source 
in the project, then restart R and load the installed package.

Test your code in this new R session.  If you're working on a vignette, 
you can open the vignette, and execute the code chunks one by one.

If they all succeed in that context, they still might not when you run 
checks:  it *won't* have your package loaded when it compiles a 
vignette.  You need to put an explicit

library(hexbin)

in one of the code chunks.

Duncan Murdoch

>
> Also, I tried running devtools::check() and it already fails there:
> R version 3.2.5 (2016-04-14) -- "Very, Very Secure Dishes"
>
> Platform: x86_64-pc-linux-gnu (64-bit)
>
>> devtools::check()
> Updating hexbin documentation
> Loading hexbin
> Creating a generic function for ?plot? from package ?graphics? in package
> ?hexbin?
> Creating a generic function for ?summary? from package ?base? in package
> ?hexbin?
> Setting env vars
> -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> CFLAGS : -Wall -pedantic
> CXXFLAGS: -Wall -pedantic
> Building hexbin
> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> '/usr/lib/R/bin/R' --no-site-file --no-environ --no-save --no-restore --quiet
> CMD build '/home/tgrossen/R/hexbin' --no-resave-data --no-manual
>
> * checking for file ?/home/tgrossen/R/hexbin/DESCRIPTION? ... OK
> * preparing ?hexbin?:
> * checking DESCRIPTION meta-information ... OK
> * cleaning src
> * installing the package to build vignettes
> * creating vignettes ... ERROR
>
> Error: processing vignette 'hexagon_binning.Rnw' failed with diagnostics:
>  chunk 1 (label = comphexsq)
> Error in eval(expr, envir, enclos) : could not find function ?hexbin?
> Execution halted
> Error: Command failed (1)
>
> As you can see, I am very much lost. I googled for "adapt R package and debug"
> and so forth but couldn't find any tutorial or anything.
>
> Thanks,
>
> Timo
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From henrik.bengtsson at gmail.com  Tue Jul 12 20:55:38 2016
From: henrik.bengtsson at gmail.com (Henrik Bengtsson)
Date: Tue, 12 Jul 2016 11:55:38 -0700
Subject: [Rd] Is .packageName part of the official API?
Message-ID: <CAFDcVCQ+SopjJf7EfTvNyZTUtrteZ8J8BKdf9oDmBiBzb8y8ug@mail.gmail.com>

Hi, I've seen that some packages use .packageName internally to infer
their own name.  Is that officially supported?  I could not find it
documented anywhere.

There's utils::packageName(), which internally looks for .packageName.
However, if the latter is not found, it may return NULL whereas an
error would be more appropriate if a package name is expected.  Using
.packageName would give an error if it does not exist.  Also, which is
minor, using packageName() would add explicit dependency on the utils
package whereas .packageName doesn't.

So, should I use .packageName or utils::packageName() for this?

Thanks

Henrik


From murdoch.duncan at gmail.com  Tue Jul 12 22:18:30 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 12 Jul 2016 16:18:30 -0400
Subject: [Rd] Is .packageName part of the official API?
In-Reply-To: <CAFDcVCQ+SopjJf7EfTvNyZTUtrteZ8J8BKdf9oDmBiBzb8y8ug@mail.gmail.com>
References: <CAFDcVCQ+SopjJf7EfTvNyZTUtrteZ8J8BKdf9oDmBiBzb8y8ug@mail.gmail.com>
Message-ID: <3b9a41ac-144d-0b78-7bf2-d346334f88af@gmail.com>

On 12/07/2016 2:55 PM, Henrik Bengtsson wrote:
> Hi, I've seen that some packages use .packageName internally to infer
> their own name.  Is that officially supported?  I could not find it
> documented anywhere.
>
> There's utils::packageName(), which internally looks for .packageName.
> However, if the latter is not found, it may return NULL whereas an
> error would be more appropriate if a package name is expected.  Using
> .packageName would give an error if it does not exist.  Also, which is
> minor, using packageName() would add explicit dependency on the utils
> package whereas .packageName doesn't.
>
> So, should I use .packageName or utils::packageName() for this?

You should use utils::packageName.  It is documented; .packageName is not.

Duncan Murdoch


From epatters at stanford.edu  Wed Jul 13 05:20:24 2016
From: epatters at stanford.edu (Evan James Patterson)
Date: Wed, 13 Jul 2016 03:20:24 +0000
Subject: [Rd] Nested tracing with custom callback
Message-ID: <SN1PR0201MB19010D493D24263ED57F3984A7310@SN1PR0201MB1901.namprd02.prod.outlook.com>


Hi all,

I would like to install a trace function that gets executed whenever *any* R function is called. In Python, for example, this functionality is provided by the `sys.settrace` function.

I am not aware of any public interface, at the R or C level, that can accomplish this. The `trace` function is inadequate because it does not support nested functions. The `Rprof` function provides only statistical profiling.

Any advice would be appreciated. I'm not afraid to dig into R's internals if that's what it takes.

Thanks,
Evan


From timo at timogrossenbacher.ch  Wed Jul 13 09:13:08 2016
From: timo at timogrossenbacher.ch (timo at timogrossenbacher.ch)
Date: Wed, 13 Jul 2016 09:13:08 +0200 (CEST)
Subject: [Rd] [R] Forking and adapting an R package
In-Reply-To: <a53bf014-6081-cbf4-96e0-5826b71be8e6@gmail.com>
References: <1880276709.61511.1468322926354.JavaMail.open-xchange@ox11.mail.hostpoint.internal>
	<a53bf014-6081-cbf4-96e0-5826b71be8e6@gmail.com>
Message-ID: <2030499666.69029.1468393989099.JavaMail.open-xchange@ox11.mail.hostpoint.internal>

> Duncan Murdoch <murdoch.duncan at gmail.com> hat am 12. Juli 2016 um 19:38
> geschrieben:
> 
> On 12/07/2016 7:28 AM, timo at timogrossenbacher.ch wrote:
> > Hello.
> >
> > I'm trying to adapt the package ?hexbin? to suit my needs. This is the first
> > time I do this. I've read a bit through Hadley's ?R packages?, but now I'm
> > pretty lost (from a workflow point of view). I am using RStudio and Hadley's
> > devtools.
> >
> > So I forked the repo I want to adapt: https://github.com/grssnbchr/hexbin
> > and
> > cloned it using RStudio (I created a new project). What I basically want to
> > do
> > is adapt the package slightly and use the adapted source on my use case (an
> > Rmd
> > file in another location) - ideally, I would call the respective function
> > (hexbin::grid.hexagons) in the Rmd and the source code of ?hexbin? would be
> > called and debugged (just for understanding what the package ?hexbin?
> > actually
> > does in that case, I do not have to build it yet, or even publish it). What
> > is
> > the workflow for this?
> 
> This is more of an R-devel question, so I've posted my followup there 
> (as well as a private copy to you).
> 

Okay, I'm now subscribed to this list, too.

> The fact that you've forked the package shouldn't matter. You are 
> working in RStudio, so the way to work with a package is:
> 
> 1. Open the project consisting of your local package.
> 2. In the Build pane, click on "Build and Reload".
> 
This works. devtools::build() though throws the same error with the vignette as
with devtools::check(). See below.

> What "Build and reload" does is to install the package from the source 
> in the project, then restart R and load the installed package.
> 
> Test your code in this new R session. If you're working on a vignette, 
> you can open the vignette, and execute the code chunks one by one.
> 
Ok. But how do I debug the source code of that package? I.e. I want to call a
function from that package from another, external script (that is not part of
that project), and then jump into the function execution and debug it. 
Because when it's built it's no longer "plain source code", or am I completely
wrong with this? Or/and do I have to make the  external script part of the
hexbin project?

> If they all succeed in that context, they still might not when you run 
> checks: it *won't* have your package loaded when it compiles a 
> vignette. You need to put an explicit
> 
> library(hexbin)
> 
This is actually done in the chunk that fails (it fails on the last line here).

library("grid")
library("hexbin")
x <- rnorm(1000)
y <- rnorm(1000)
##-- Hexagon Bins: --
hbin <- hexbin(x,y, xbins = 25)

> in one of the code chunks.
> 
> Duncan Murdoch
> 
> >
> > Also, I tried running devtools::check() and it already fails there:
> > R version 3.2.5 (2016-04-14) -- "Very, Very Secure Dishes"
> >
> > Platform: x86_64-pc-linux-gnu (64-bit)
> >
> >> devtools::check()
> > Updating hexbin documentation
> > Loading hexbin
> > Creating a generic function for ?plot? from package ?graphics? in package
> > ?hexbin?
> > Creating a generic function for ?summary? from package ?base? in package
> > ?hexbin?
> > Setting env vars
> > -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > CFLAGS : -Wall -pedantic
> > CXXFLAGS: -Wall -pedantic
> > Building hexbin
> > ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > '/usr/lib/R/bin/R' --no-site-file --no-environ --no-save --no-restore
> > --quiet
> > CMD build '/home/tgrossen/R/hexbin' --no-resave-data --no-manual
> >
> > * checking for file ?/home/tgrossen/R/hexbin/DESCRIPTION? ... OK
> > * preparing ?hexbin?:
> > * checking DESCRIPTION meta-information ... OK
> > * cleaning src
> > * installing the package to build vignettes
> > * creating vignettes ... ERROR
> >
> > Error: processing vignette 'hexagon_binning.Rnw' failed with diagnostics:
> > chunk 1 (label = comphexsq)
> > Error in eval(expr, envir, enclos) : could not find function ?hexbin?
> > Execution halted
> > Error: Command failed (1)
> >
> > As you can see, I am very much lost. I googled for "adapt R package and
> > debug"
> > and so forth but couldn't find any tutorial or anything.
> >
> > Thanks,
> >
> > Timo
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >

>


From jeroen.ooms at stat.ucla.edu  Wed Jul 13 13:04:40 2016
From: jeroen.ooms at stat.ucla.edu (Jeroen Ooms)
Date: Wed, 13 Jul 2016 13:04:40 +0200
Subject: [Rd] Nested tracing with custom callback
In-Reply-To: <SN1PR0201MB19010D493D24263ED57F3984A7310@SN1PR0201MB1901.namprd02.prod.outlook.com>
References: <SN1PR0201MB19010D493D24263ED57F3984A7310@SN1PR0201MB1901.namprd02.prod.outlook.com>
Message-ID: <CABFfbXtS8Ym7RgnHa_EyKxJxTRuti3wrfi4+0XaLLOT1aEcuEw@mail.gmail.com>

On Wed, Jul 13, 2016 at 5:20 AM, Evan James Patterson
<epatters at stanford.edu> wrote:
>
> I would like to install a trace function that gets executed whenever *any* R function is called. In Python, for example, this functionality is provided by the `sys.settrace` function.

Maybe you can adapt from the covr package:
https://github.com/jimhester/covr/blob/master/vignettes/how_it_works.Rmd


From epatters at stanford.edu  Thu Jul 14 04:08:03 2016
From: epatters at stanford.edu (Evan James Patterson)
Date: Thu, 14 Jul 2016 02:08:03 +0000
Subject: [Rd] Nested tracing with custom callback
In-Reply-To: <CABFfbXtS8Ym7RgnHa_EyKxJxTRuti3wrfi4+0XaLLOT1aEcuEw@mail.gmail.com>
References: <SN1PR0201MB19010D493D24263ED57F3984A7310@SN1PR0201MB1901.namprd02.prod.outlook.com>,
	<CABFfbXtS8Ym7RgnHa_EyKxJxTRuti3wrfi4+0XaLLOT1aEcuEw@mail.gmail.com>
Message-ID: <SN1PR0201MB19011381653938DEFD05E5FDA7320@SN1PR0201MB1901.namprd02.prod.outlook.com>

Hi Jeroen,

That was exactly what I was looking for. Thanks!

Evan


From: jeroenooms at gmail.com <jeroenooms at gmail.com> on behalf of Jeroen Ooms <jeroen.ooms at stat.ucla.edu>
Sent: Wednesday, July 13, 2016 4:04 AM
To: Evan James Patterson
Cc: r-devel at r-project.org
Subject: Re: [Rd] Nested tracing with custom callback
?   
On Wed, Jul 13, 2016 at 5:20 AM, Evan James Patterson
<epatters at stanford.edu> wrote:
>
> I would like to install a trace function that gets executed whenever *any* R function is called. In Python, for example, this functionality is provided by the `sys.settrace` function.

Maybe you can adapt from the covr package:
https://github.com/jimhester/covr/blob/master/vignettes/how_it_works.Rmd


jimhester/covr
github.com
covr - Test coverage reports for R

    

From maechler at stat.math.ethz.ch  Fri Jul 15 15:21:56 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 15 Jul 2016 15:21:56 +0200
Subject: [Rd] cat() in system.time() ?
In-Reply-To: <577A8594.9070408@gmail.com>
References: <577A8594.9070408@gmail.com>
Message-ID: <22408.58228.665116.384597@stat.math.ethz.ch>

Hi Ben (and everyone else),

as this did not attract attention yet, let me start

>>>>> Ben Bolker <bbolker at gmail.com>
>>>>>     on Mon, 4 Jul 2016 11:49:40 -0400 writes:

    > Does anyone know if there's a reason that proc.time() uses cat()
    > rather than message() to print the output when there has been an error
    > in the process of timing?

This is really not about proc.time(), but  about  system.time()
[ and I have corrected the  'Subject' accordingly ] ..

    > line 31 of time.R,

    > https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/library/base/R/time.R#L31

    > on.exit(cat("Timing stopped at:", ppt(proc.time() - time), "\n"))

    > This means that as far as I can tell the general way to make sure
    > there is no output from a timed statement is ...

    > tt1 <- capture.output(tt0 <- suppressMessages(suppressWarnings(
    >					try(<stuff to try>, silent=TRUE))))

    > (I know I could/should be using tryCatch() instead of try(), but I don't
    > think it really matters here ... ?)

    > What would people think of a request to change this to message()
    > rather than cat() in the future ... ?  (This would mess up code that is
    > already using capture.output() to store this information ...)

[I think that (last issue) would be acceptable.]

One reason of the current cat() may just be historical:
message() did not exist yet when  system.time()  was created.
However, I agree that that is not good enough a reason to keep
it. Much more important is the fact that it is *nice* that the
message

   Timing stopped at: ...

is printed in many cases when a system.time()d call is stopped
early.  Quite often for me this is *not* when an error happens
as your suppress*() contortions (;-) suggest, but rather when I
interrupt the long lasting call.
And the current setup nicely gives 

   > i <- 0; system.time( while(TRUE) i <- i+1 )
     C-c C-c
   Timing stopped at: 1.001 0.084 1.086 
   > 


However, at least this simple case, also works fine with
message() instead of cat() ... as I just tried now.

A harder case are the "bad errors", e.g.,  memory overflow and
similar bad things...
cat() seems to be pretty robust, where as message() does invoke
a handler (exactly *why* you want it, right?) and that may be
harder to keep working correctly after certain errors than a
simple cat().

I hope that some real experts (on "context switching", "long
jumps", etc) would chime in now.

Martin


From bbolker at gmail.com  Fri Jul 15 22:45:50 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Fri, 15 Jul 2016 16:45:50 -0400
Subject: [Rd] summary() dispatch puzzle
Message-ID: <57894B7E.6070508@gmail.com>


  I'm sorry I haven't boiled this down to a more-minimal example yet,
but ...

  I'm working on an S3 method (tidy.merMod, in the 'broom' package). It
normally handles 'merMod' objects from the lme4 package, but I'm trying
to make it handle 'merModLmerTest' objects from the lmerTest package too.

  The merModLmerTest class inherits (as an S4) class from the merMod
class.  The important difference (for my current purposes) is that
summary.merMod returns an object containing a coefficient table
*without* degrees or freedom or p-values, while the summary method for
merModLmerTest objects returns one *with* both of those columns.

 Because merModLmerTest inherits from merMod, calling tidy(obj) on a
merModLmerTest object does get you into broom:::tidy.merMod.  Within
that function, though, calling summary() appears to call summary.merMod
instead of merModLmerTest, so I don't get the additional columns I want.

  Ideas/directions for further diagnoses?  Is this an S3/S4 confusion,
or something funny about the way the broom and merModLmerTest package
are talking to each other, or ... ?

  cheers
    Ben Bolker


----
library(lme4)
fm1 <- lmer(Reaction~Days+(Days|Subject),sleepstudy)
library(lmerTest)
fm1B <- as(fm1,"merModLmerTest")
coef(summary(fm1B))               ## table with df and p values
coef(lme4:::summary.merMod(fm1B)) ## table without df and p values

is(fm1B,"merMod")  ## TRUE

library(broom)
tidy(fm1B)
## hard to show what's going on without debugging through the function:
## the issue occurs here:
## https://github.com/dgrtwo/broom/blob/master/R/lme4_tidiers.R#L94

I can't replicate this behaviour with a trivial method ...

silly <- function(x, ...) {
    UseMethod("silly")
}
silly.merMod <- function(object, ...) {
    coef(summary(object))
}
silly(fm1B)
environment(silly) <- environment(tidy)
silly(fm1B)


From gmbecker at ucdavis.edu  Fri Jul 15 23:23:49 2016
From: gmbecker at ucdavis.edu (Gabriel Becker)
Date: Fri, 15 Jul 2016 14:23:49 -0700
Subject: [Rd] [R] Forking and adapting an R package
In-Reply-To: <2030499666.69029.1468393989099.JavaMail.open-xchange@ox11.mail.hostpoint.internal>
References: <1880276709.61511.1468322926354.JavaMail.open-xchange@ox11.mail.hostpoint.internal>
	<a53bf014-6081-cbf4-96e0-5826b71be8e6@gmail.com>
	<2030499666.69029.1468393989099.JavaMail.open-xchange@ox11.mail.hostpoint.internal>
Message-ID: <CADwqtCMkU1bRZaWyiUV87Lfg9b5HXKQxqu=DKCYQ+tRQDDu9xg@mail.gmail.com>

I'm a little unclear what you're asking, so I may be off base here -
apologize if so - but it sounds like you want

debug(hexbin)


before you call the function. Note that that hexbin is referring function
you will call, NOT the name of the package which happens to be the same
thing. This will cause R-level hexbin closure (function) to be debugged
when it is called.

Note that this won't (particularly easily) work in an Rmd, I think. It
would be much easier to simply run the offending code in your session, as
debugging is interactive anyway.

Is your question how to debug the parts of hexbin that  IIRC call down to C
code?

Best,
~G

On Wed, Jul 13, 2016 at 12:13 AM, <timo at timogrossenbacher.ch> wrote:

> > Duncan Murdoch <murdoch.duncan at gmail.com> hat am 12. Juli 2016 um 19:38
> > geschrieben:
> >
> > On 12/07/2016 7:28 AM, timo at timogrossenbacher.ch wrote:
> > > Hello.
> > >
> > > I'm trying to adapt the package ?hexbin? to suit my needs. This is the
> first
> > > time I do this. I've read a bit through Hadley's ?R packages?, but now
> I'm
> > > pretty lost (from a workflow point of view). I am using RStudio and
> Hadley's
> > > devtools.
> > >
> > > So I forked the repo I want to adapt:
> https://github.com/grssnbchr/hexbin
> > > and
> > > cloned it using RStudio (I created a new project). What I basically
> want to
> > > do
> > > is adapt the package slightly and use the adapted source on my use
> case (an
> > > Rmd
> > > file in another location) - ideally, I would call the respective
> function
> > > (hexbin::grid.hexagons) in the Rmd and the source code of ?hexbin?
> would be
> > > called and debugged (just for understanding what the package ?hexbin?
> > > actually
> > > does in that case, I do not have to build it yet, or even publish it).
> What
> > > is
> > > the workflow for this?
> >
> > This is more of an R-devel question, so I've posted my followup there
> > (as well as a private copy to you).
> >
>
> Okay, I'm now subscribed to this list, too.
>
> > The fact that you've forked the package shouldn't matter. You are
> > working in RStudio, so the way to work with a package is:
> >
> > 1. Open the project consisting of your local package.
> > 2. In the Build pane, click on "Build and Reload".
> >
> This works. devtools::build() though throws the same error with the
> vignette as
> with devtools::check(). See below.
>
> > What "Build and reload" does is to install the package from the source
> > in the project, then restart R and load the installed package.
> >
> > Test your code in this new R session. If you're working on a vignette,
> > you can open the vignette, and execute the code chunks one by one.
> >
> Ok. But how do I debug the source code of that package? I.e. I want to
> call a
> function from that package from another, external script (that is not part
> of
> that project), and then jump into the function execution and debug it.
> Because when it's built it's no longer "plain source code", or am I
> completely
> wrong with this? Or/and do I have to make the  external script part of the
> hexbin project?
>
> > If they all succeed in that context, they still might not when you run
> > checks: it *won't* have your package loaded when it compiles a
> > vignette. You need to put an explicit
> >
> > library(hexbin)
> >
> This is actually done in the chunk that fails (it fails on the last line
> here).
>
> library("grid")
> library("hexbin")
> x <- rnorm(1000)
> y <- rnorm(1000)
> ##-- Hexagon Bins: --
> hbin <- hexbin(x,y, xbins = 25)
>
> > in one of the code chunks.
> >
> > Duncan Murdoch
> >
> > >
> > > Also, I tried running devtools::check() and it already fails there:
> > > R version 3.2.5 (2016-04-14) -- "Very, Very Secure Dishes"
> > >
> > > Platform: x86_64-pc-linux-gnu (64-bit)
> > >
> > >> devtools::check()
> > > Updating hexbin documentation
> > > Loading hexbin
> > > Creating a generic function for ?plot? from package ?graphics? in
> package
> > > ?hexbin?
> > > Creating a generic function for ?summary? from package ?base? in
> package
> > > ?hexbin?
> > > Setting env vars
> > >
> -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > > CFLAGS : -Wall -pedantic
> > > CXXFLAGS: -Wall -pedantic
> > > Building hexbin
> > >
> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > > '/usr/lib/R/bin/R' --no-site-file --no-environ --no-save --no-restore
> > > --quiet
> > > CMD build '/home/tgrossen/R/hexbin' --no-resave-data --no-manual
> > >
> > > * checking for file ?/home/tgrossen/R/hexbin/DESCRIPTION? ... OK
> > > * preparing ?hexbin?:
> > > * checking DESCRIPTION meta-information ... OK
> > > * cleaning src
> > > * installing the package to build vignettes
> > > * creating vignettes ... ERROR
> > >
> > > Error: processing vignette 'hexagon_binning.Rnw' failed with
> diagnostics:
> > > chunk 1 (label = comphexsq)
> > > Error in eval(expr, envir, enclos) : could not find function ?hexbin?
> > > Execution halted
> > > Error: Command failed (1)
> > >
> > > As you can see, I am very much lost. I googled for "adapt R package and
> > > debug"
> > > and so forth but couldn't find any tutorial or anything.
> > >
> > > Thanks,
> > >
> > > Timo
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > >
>
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>



-- 
Gabriel Becker, PhD
Associate Scientist (Bioinformatics)
Genentech Research

	[[alternative HTML version deleted]]


From travis.d.mcarthur at gmail.com  Sat Jul 16 21:40:28 2016
From: travis.d.mcarthur at gmail.com (Travis McArthur)
Date: Sat, 16 Jul 2016 14:40:28 -0500
Subject: [Rd] sample() fails with double or integer NA input of length one
Message-ID: <CAEUo_MQeVbEC++eNLKkPbp6ZjHsQy04sZNSwWFOEPkoP=XqLUQ@mail.gmail.com>

Hi,

I have discovered that sample() fails with an uninformative error
message when the x argument is a single NA of type double or integer.

I can reproduce the problem with the following code:

base::sample(NA)
# NA is of logical type above
base::sample(NA_character_)
base::sample(NA_complex_)
base::sample(NA_real_)
base::sample(NA_integer_)


The last two lines throw the following error:
Error in if (length(x) == 1L && is.numeric(x) && x >= 1) { :
  missing value where TRUE/FALSE needed

My sessionInfo() :

R version 3.3.1 (2016-06-21)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X 10.11.5 (El Capitan)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base


Best,

Travis McArthur


From luke-tierney at uiowa.edu  Sun Jul 17 18:13:10 2016
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Sun, 17 Jul 2016 11:13:10 -0500
Subject: [Rd] cat() in system.time() ?
In-Reply-To: <22408.58228.665116.384597@stat.math.ethz.ch>
References: <577A8594.9070408@gmail.com>
	<22408.58228.665116.384597@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.10.1607171110570.2693@luke-Latitude>

On Fri, 15 Jul 2016, Martin Maechler wrote:

> Hi Ben (and everyone else),
>
> as this did not attract attention yet, let me start
>
>>>>>> Ben Bolker <bbolker at gmail.com>
>>>>>>     on Mon, 4 Jul 2016 11:49:40 -0400 writes:
>
>    > Does anyone know if there's a reason that proc.time() uses cat()
>    > rather than message() to print the output when there has been an error
>    > in the process of timing?
>
> This is really not about proc.time(), but  about  system.time()
> [ and I have corrected the  'Subject' accordingly ] ..
>
>    > line 31 of time.R,
>
>    > https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/library/base/R/time.R#L31
>
>    > on.exit(cat("Timing stopped at:", ppt(proc.time() - time), "\n"))
>
>    > This means that as far as I can tell the general way to make sure
>    > there is no output from a timed statement is ...
>
>    > tt1 <- capture.output(tt0 <- suppressMessages(suppressWarnings(
>    >					try(<stuff to try>, silent=TRUE))))
>
>    > (I know I could/should be using tryCatch() instead of try(), but I don't
>    > think it really matters here ... ?)
>
>    > What would people think of a request to change this to message()
>    > rather than cat() in the future ... ?  (This would mess up code that is
>    > already using capture.output() to store this information ...)
>
> [I think that (last issue) would be acceptable.]
>
> One reason of the current cat() may just be historical:
> message() did not exist yet when  system.time()  was created.
> However, I agree that that is not good enough a reason to keep
> it. Much more important is the fact that it is *nice* that the
> message
>
>   Timing stopped at: ...
>
> is printed in many cases when a system.time()d call is stopped
> early.  Quite often for me this is *not* when an error happens
> as your suppress*() contortions (;-) suggest, but rather when I
> interrupt the long lasting call.
> And the current setup nicely gives
>
>   > i <- 0; system.time( while(TRUE) i <- i+1 )
>     C-c C-c
>   Timing stopped at: 1.001 0.084 1.086
>   >
>
>
> However, at least this simple case, also works fine with
> message() instead of cat() ... as I just tried now.
>
> A harder case are the "bad errors", e.g.,  memory overflow and
> similar bad things...
> cat() seems to be pretty robust, where as message() does invoke
> a handler (exactly *why* you want it, right?) and that may be
> harder to keep working correctly after certain errors than a
> simple cat().
>
> I hope that some real experts (on "context switching", "long
> jumps", etc) would chime in now.

I don't have a strong opinion on whether message would be better or
not.  But now that the on.exit code is executed after unwinding the C
call back to the point of the system.time call there is no longer such
a robustness issue.

Best,

luke


>
> Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From ligges at statistik.tu-dortmund.de  Sun Jul 17 18:35:19 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Sun, 17 Jul 2016 18:35:19 +0200
Subject: [Rd] cat() in system.time() ?
In-Reply-To: <alpine.DEB.2.10.1607171110570.2693@luke-Latitude>
References: <577A8594.9070408@gmail.com>
	<22408.58228.665116.384597@stat.math.ethz.ch>
	<alpine.DEB.2.10.1607171110570.2693@luke-Latitude>
Message-ID: <02c376a8-18de-e1da-ecaa-93e91cf28037@statistik.tu-dortmund.de>



On 17.07.2016 18:13, luke-tierney at uiowa.edu wrote:
> On Fri, 15 Jul 2016, Martin Maechler wrote:
>
>> Hi Ben (and everyone else),
>>
>> as this did not attract attention yet, let me start
>>
>>>>>>> Ben Bolker <bbolker at gmail.com>
>>>>>>>     on Mon, 4 Jul 2016 11:49:40 -0400 writes:
>>
>>    > Does anyone know if there's a reason that proc.time() uses cat()
>>    > rather than message() to print the output when there has been an
>> error
>>    > in the process of timing?
>>
>> This is really not about proc.time(), but  about  system.time()
>> [ and I have corrected the  'Subject' accordingly ] ..
>>
>>    > line 31 of time.R,
>>
>>    >
>> https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/library/base/R/time.R#L31
>>
>>
>>    > on.exit(cat("Timing stopped at:", ppt(proc.time() - time), "\n"))
>>
>>    > This means that as far as I can tell the general way to make sure
>>    > there is no output from a timed statement is ...
>>
>>    > tt1 <- capture.output(tt0 <- suppressMessages(suppressWarnings(
>>    >                    try(<stuff to try>, silent=TRUE))))
>>
>>    > (I know I could/should be using tryCatch() instead of try(), but
>> I don't
>>    > think it really matters here ... ?)
>>
>>    > What would people think of a request to change this to message()
>>    > rather than cat() in the future ... ?  (This would mess up code
>> that is
>>    > already using capture.output() to store this information ...)
>>
>> [I think that (last issue) would be acceptable.]
>>
>> One reason of the current cat() may just be historical:
>> message() did not exist yet when  system.time()  was created.
>> However, I agree that that is not good enough a reason to keep
>> it. Much more important is the fact that it is *nice* that the
>> message
>>
>>   Timing stopped at: ...
>>
>> is printed in many cases when a system.time()d call is stopped
>> early.  Quite often for me this is *not* when an error happens
>> as your suppress*() contortions (;-) suggest, but rather when I
>> interrupt the long lasting call.
>> And the current setup nicely gives
>>
>>   > i <- 0; system.time( while(TRUE) i <- i+1 )
>>     C-c C-c
>>   Timing stopped at: 1.001 0.084 1.086
>>   >
>>
>>
>> However, at least this simple case, also works fine with
>> message() instead of cat() ... as I just tried now.
>>
>> A harder case are the "bad errors", e.g.,  memory overflow and
>> similar bad things...
>> cat() seems to be pretty robust, where as message() does invoke
>> a handler (exactly *why* you want it, right?) and that may be
>> harder to keep working correctly after certain errors than a
>> simple cat().
>>
>> I hope that some real experts (on "context switching", "long
>> jumps", etc) would chime in now.
>
> I don't have a strong opinion on whether message would be better or
> not.  But now that the on.exit code is executed after unwinding the C
> call back to the point of the system.time call there is no longer such
> a robustness issue.

I am not sure how much some "R CMD check" extras for reporting 
example/test/vignette runtimes are affected. In case anybody is going to 
change this, please take a careful look or expect to back it out if we 
expewrience problems and have to change code.

Best,
Uwe


>
> Best,
>
> luke
>
>
>>
>> Martin
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From maechler at stat.math.ethz.ch  Mon Jul 18 10:41:50 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 18 Jul 2016 10:41:50 +0200
Subject: [Rd] sample() fails with double or integer NA input of length
	one
In-Reply-To: <CAEUo_MQeVbEC++eNLKkPbp6ZjHsQy04sZNSwWFOEPkoP=XqLUQ@mail.gmail.com>
References: <CAEUo_MQeVbEC++eNLKkPbp6ZjHsQy04sZNSwWFOEPkoP=XqLUQ@mail.gmail.com>
Message-ID: <22412.38478.289987.207396@stat.math.ethz.ch>

>>>>> Travis McArthur <travis.d.mcarthur at gmail.com>
>>>>>     on Sat, 16 Jul 2016 14:40:28 -0500 writes:

    > Hi,
    > I have discovered that sample() fails with an uninformative error
    > message when the x argument is a single NA of type double or integer.

    > I can reproduce the problem with the following code:

    > base::sample(NA)
    > # NA is of logical type above
    > base::sample(NA_character_)
    > base::sample(NA_complex_)
    > base::sample(NA_real_)
    > base::sample(NA_integer_)


    > The last two lines throw the following error:
    > Error in if (length(x) == 1L && is.numeric(x) && x >= 1) { :
    > missing value where TRUE/FALSE needed

Good catch,  thank you, Travis!

The error message --- not quite uninformative I would argue ---
actually even suggests a fix -- which I have already committed
to the R sources:

Replace  is.numeric() by  is.finite().

However, that is not good enough: With that change,

   sample(1i)

fails.   So, in a better patch, the line in case 
    
     if (length(x) == 1L && is.numeric(x) && x >= 1) {

could be replaced by

     if (length(x) == 1L && is.numeric(x) && is.finite(x) && x >= 1) {
or   if (length(x) == 1L && is.numeric(x) && !is.na(x)    && x >= 1) {

or does anyone see a nicer / more performant efficient solution?
Martin 

       [............]

    > Best,
    > Travis McArthur


From maechler at stat.math.ethz.ch  Mon Jul 18 17:02:22 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 18 Jul 2016 17:02:22 +0200
Subject: [Rd] summary() dispatch puzzle
In-Reply-To: <57894B7E.6070508@gmail.com>
References: <57894B7E.6070508@gmail.com>
Message-ID: <22412.61310.487798.494771@stat.math.ethz.ch>

>>>>> Ben Bolker <bbolker at gmail.com>
>>>>>     on Fri, 15 Jul 2016 16:45:50 -0400 writes:

    > I'm sorry I haven't boiled this down to a more-minimal example yet,
    > but ...

    > I'm working on an S3 method (tidy.merMod, in the 'broom' package). It
    > normally handles 'merMod' objects from the lme4 package, but I'm trying
    > to make it handle 'merModLmerTest' objects from the lmerTest package too.

    > The merModLmerTest class inherits (as an S4) class from the merMod
    > class.  The important difference (for my current purposes) is that
    > summary.merMod returns an object containing a coefficient table
    > *without* degrees or freedom or p-values, while the summary method for
    > merModLmerTest objects returns one *with* both of those columns.

    > Because merModLmerTest inherits from merMod, calling tidy(obj) on a
    > merModLmerTest object does get you into broom:::tidy.merMod.  Within
    > that function, though, calling summary() appears to call summary.merMod
    > instead of merModLmerTest, so I don't get the additional columns I want.

    > Ideas/directions for further diagnoses?  Is this an S3/S4 confusion,
    > or something funny about the way the broom and merModLmerTest package
    > are talking to each other, or ... ?

I'm not sure, if I see your problem when I execute the
reproducible code below ... 


    > ----
    > library(lme4)
    > fm1 <- lmer(Reaction~Days+(Days|Subject),sleepstudy)
    > library(lmerTest)
    > fm1B <- as(fm1,"merModLmerTest")
    > coef(summary(fm1B))               ## table with df and p values
    > coef(lme4:::summary.merMod(fm1B)) ## table without df and p values

    > is(fm1B,"merMod")  ## TRUE

    > library(broom)
    > tidy(fm1B)

Part of what I see from above, is

    > coef(summary(fm1B))               ## table with df and p values
		 Estimate Std. Error       df   t value     Pr(>|t|)
    (Intercept) 251.40510   6.824556 17.00002 36.838310 0.000000e+00
    Days         10.46729   1.545789 17.00000  6.771485 3.263788e-06

    > tidy(fm1B)
			      term     estimate std.error statistic    group
    1                  (Intercept) 251.40510485  6.824556 36.838310    fixed
    2                         Days  10.46728596  1.545789  6.771485    fixed
    3       sd_(Intercept).Subject  24.74044768        NA        NA  Subject
    4              sd_Days.Subject   5.92213326        NA        NA  Subject
    5 cor_(Intercept).Days.Subject   0.06555134        NA        NA  Subject
    6      sd_Observation.Residual  25.59181589        NA        NA Residual
    > 

which seems consistent at least: You get std.error and statistic
for those two terms that you get 'df' and 'p-value from "the
good method" of summary(.)

?

Of course, I'm using the CRAN versions of the packages, not
github ones, and I see that we end up using half of tidyVerse
... which does not necessarily keep debugging easy..

Martin :

> sessionInfo()
R version 3.3.1 Patched (2016-07-16 r70928)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Fedora 22 (Twenty Two)

locale:
 [1] LC_CTYPE=de_CH.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
 [4] LC_COLLATE=de_CH.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=de_CH.UTF-8   
 [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
[10] LC_TELEPHONE=C             LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] graphics  grDevices datasets  stats     utils     methods   base     

other attached packages:
[1] broom_0.4.1     lmerTest_2.0-32 lme4_1.1-12     Matrix_1.2-3    fortunes_1.5-3 
[6] sfsmisc_1.1-0  

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.5         compiler_3.3.1      nloptr_1.0.4        RColorBrewer_1.1-2 
 [5] plyr_1.8.4          tools_3.3.1         rpart_4.1-10        tibble_1.1         
 [9] gtable_0.2.0        nlme_3.1-128        lattice_0.20-33     psych_1.6.6        
[13] DBI_0.4-1           parallel_3.3.1      gridExtra_2.2.1     stringr_1.0.0      
[17] dplyr_0.5.0         cluster_2.0.3       grid_3.3.1          nnet_7.3-12        
[21] data.table_1.9.6    R6_2.1.2            survival_2.39-5     foreign_0.8-66     
[25] latticeExtra_0.6-28 minqa_1.2.4         Formula_1.2-1       tidyr_0.5.1        
[29] reshape2_1.4.1      ggplot2_2.1.0       magrittr_1.5        Hmisc_3.17-4       
[33] scales_0.4.0        MASS_7.3-45         splines_3.3.1       assertthat_0.1     
[37] mnormt_1.5-4        colorspace_1.2-6    stringi_1.1.1       acepack_1.3-3.3    
[41] munsell_0.4.3       chron_2.3-47       
> 


    > ## hard to show what's going on without debugging through the function:
    > ## the issue occurs here:
    > ## https://github.com/dgrtwo/broom/blob/master/R/lme4_tidiers.R#L94

    > I can't replicate this behaviour with a trivial method ...

    > silly <- function(x, ...) {
    > UseMethod("silly")
    > }
    > silly.merMod <- function(object, ...) {
    > coef(summary(object))
    > }
    > silly(fm1B)
    > environment(silly) <- environment(tidy)
    > silly(fm1B)

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From bbolker at gmail.com  Mon Jul 18 18:08:25 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Mon, 18 Jul 2016 12:08:25 -0400
Subject: [Rd] summary() dispatch puzzle
In-Reply-To: <22412.61310.487798.494771@stat.math.ethz.ch>
References: <57894B7E.6070508@gmail.com>
	<22412.61310.487798.494771@stat.math.ethz.ch>
Message-ID: <578CFEF9.3030808@gmail.com>


  I'm not doing a good job at explaining.  See inline below ...

On 16-07-18 11:02 AM, Martin Maechler wrote:
>>>>>> Ben Bolker <bbolker at gmail.com>
>>>>>>     on Fri, 15 Jul 2016 16:45:50 -0400 writes:akram
> 
>     > I'm sorry I haven't boiled this down to a more-minimal example yet,
>     > but ...
> 
>     > I'm working on an S3 method (tidy.merMod, in the 'broom' package). It
>     > normally handles 'merMod' objects from the lme4 package, but I'm trying
>     > to make it handle 'merModLmerTest' objects from the lmerTest package too.
> 
>     > The merModLmerTest class inherits (as an S4) class from the merMod
>     > class.  The important difference (for my current purposes) is that
>     > summary.merMod returns an object containing a coefficient table
>     > *without* degrees or freedom or p-values, while the summary method for
>     > merModLmerTest objects returns one *with* both of those columns.
> 
>     > Because merModLmerTest inherits from merMod, calling tidy(obj) on a
>     > merModLmerTest object does get you into broom:::tidy.merMod.  Within
>     > that function, though, calling summary() appears to call summary.merMod
>     > instead of merModLmerTest, so I don't get the additional columns I want.
> 
>     > Ideas/directions for further diagnoses?  Is this an S3/S4 confusion,
>     > or something funny about the way the broom and merModLmerTest package
>     > are talking to each other, or ... ?
> 
> I'm not sure, if I see your problem when I execute the
> reproducible code below ... 
> 
> 
>     > ----
>     > library(lme4)
>     > fm1 <- lmer(Reaction~Days+(Days|Subject),sleepstudy)
>     > library(lmerTest)
>     > fm1B <- as(fm1,"merModLmerTest")
>     > coef(summary(fm1B))               ## table with df and p values
>     > coef(lme4:::summary.merMod(fm1B)) ## table without df and p values
> 
>     > is(fm1B,"merMod")  ## TRUE
> 
>     > library(broom)
>     > tidy(fm1B)
> 
> Part of what I see from above, is
> 
>     > coef(summary(fm1B))               ## table with df and p values
> 		 Estimate Std. Error       df   t value     Pr(>|t|)
>     (Intercept) 251.40510   6.824556 17.00002 36.838310 0.000000e+00
>     Days         10.46729   1.545789 17.00000  6.771485 3.263788e-06
> 
>     > tidy(fm1B)
> 			      term     estimate std.error statistic    group
>     1                  (Intercept) 251.40510485  6.824556 36.838310    fixed
>     2                         Days  10.46728596  1.545789  6.771485    fixed
>     3       sd_(Intercept).Subject  24.74044768        NA        NA  Subject
>     4              sd_Days.Subject   5.92213326        NA        NA  Subject
>     5 cor_(Intercept).Days.Subject   0.06555134        NA        NA  Subject
>     6      sd_Observation.Residual  25.59181589        NA        NA Residual
>     > 
> 
> which seems consistent at least: You get std.error and statistic
> for those two terms that you get 'df' and 'p-value from "the
> good method" of summary(.)

  This is as expected.  What's going on here is that I'm trying to get
the p-value into the tidied object.   You really have to debug *into*
the function to see the problem.  I've tried to remedy this a bit in my
fork by adding a 'debug' argument:

devtools::install_github("bbolker/broom")
## ... re-load package or re-run session ...
tidy(fm1B,debug=TRUE)

produces

output from coef(summary(x)):
             Estimate Std. Error   t value
(Intercept) 251.40510   6.824556 36.838310
Days         10.46729   1.545789  6.771485


that is, when coef(summary(x)) is run *inside* the tidy.merMod function,
it calls summary.merMod rather than the summary method for
merModLmerTest objects ...

> 
> ?
> 
> Of course, I'm using the CRAN versions of the packages, not
> github ones, and I see that we end up using half of tidyVerse
> ... which does not necessarily keep debugging easy..
> 

  Sorry about that.  broom is fairly heavily integrated with the
tidyverse ...


> Martin :
> 
>> sessionInfo()
> R version 3.3.1 Patched (2016-07-16 r70928)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Fedora 22 (Twenty Two)
> 
> locale:
>  [1] LC_CTYPE=de_CH.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
>  [4] LC_COLLATE=de_CH.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=de_CH.UTF-8   
>  [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
> [10] LC_TELEPHONE=C             LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       
> 
> attached base packages:
> [1] graphics  grDevices datasets  stats     utils     methods   base     
> 
> other attached packages:
> [1] broom_0.4.1     lmerTest_2.0-32 lme4_1.1-12     Matrix_1.2-3    fortunes_1.5-3 
> [6] sfsmisc_1.1-0  
> 
> loaded via a namespace (and not attached):
>  [1] Rcpp_0.12.5         compiler_3.3.1      nloptr_1.0.4        RColorBrewer_1.1-2 
>  [5] plyr_1.8.4          tools_3.3.1         rpart_4.1-10        tibble_1.1         
>  [9] gtable_0.2.0        nlme_3.1-128        lattice_0.20-33     psych_1.6.6        
> [13] DBI_0.4-1           parallel_3.3.1      gridExtra_2.2.1     stringr_1.0.0      
> [17] dplyr_0.5.0         cluster_2.0.3       grid_3.3.1          nnet_7.3-12        
> [21] data.table_1.9.6    R6_2.1.2            survival_2.39-5     foreign_0.8-66     
> [25] latticeExtra_0.6-28 minqa_1.2.4         Formula_1.2-1       tidyr_0.5.1        
> [29] reshape2_1.4.1      ggplot2_2.1.0       magrittr_1.5        Hmisc_3.17-4       
> [33] scales_0.4.0        MASS_7.3-45         splines_3.3.1       assertthat_0.1     
> [37] mnormt_1.5-4        colorspace_1.2-6    stringi_1.1.1       acepack_1.3-3.3    
> [41] munsell_0.4.3       chron_2.3-47       
>>
> 
> 
>     > ## hard to show what's going on without debugging through the function:
>     > ## the issue occurs here:
>     > ## https://github.com/dgrtwo/broom/blob/master/R/lme4_tidiers.R#L94
> 
>     > I can't replicate this behaviour with a trivial method ...
> 
>     > silly <- function(x, ...) {
>     > UseMethod("silly")
>     > }
>     > silly.merMod <- function(object, ...) {
>     > coef(summary(object))
>     > }
>     > silly(fm1B)
>     > environment(silly) <- environment(tidy)
>     > silly(fm1B)
> 
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From atp at piskorski.com  Mon Jul 18 21:45:07 2016
From: atp at piskorski.com (Andrew Piskorski)
Date: Mon, 18 Jul 2016 15:45:07 -0400
Subject: [Rd] failed to assign RegisteredNativeSymbol for splitString
Message-ID: <20160718194507.GB27531@piskorski.com>

I saw a warning from R that I don't fully understand.  Here's one way
to reproduce it:

  $ /usr/local/pkg/R-3.2-branch-20160718/bin/R --version | head -n 3 
  R version 3.2.5 Patched (2016-05-05 r70929) -- "Very, Very Secure Dishes" 
  Copyright (C) 2016 The R Foundation for Statistical Computing 
  Platform: x86_64-pc-linux-gnu/x86_64 (64-bit) 
   
  $ /usr/local/pkg/R-3.2-branch-20160718/bin/R --vanilla --no-restore --no-save --silent 
  > splitString <- function(...) { print("Test, do nothing") } 
  > invisible(tools::toTitleCase) 
  Warning message: 
  failed to assign RegisteredNativeSymbol for splitString to splitString since splitString is already defined in the 'tools' namespace  

Another way to trigger that warning is by loading the knitr package, e.g.:

  > require("knitr") 
  Loading required package: knitr 
  Warning: failed to assign RegisteredNativeSymbol for splitString to splitString since splitString is already defined in the 'tools' namespace 

The warning only happens the FIRST time I run any code that triggers it.
To get it to happen again, I need to restart R.

R 3.1.0 and all earlier versions do not throw that warning, because
they do not have any splitString C function (see below) at all.  R
3.2.5 does throw the warning, and I believe 3.3 and all later versions
of R do also (but I cannot currently test that on this machine).

In my case, normally I start R without "--vanilla", and load various
custom libraries of my own, one of which contained an R function
"splitString".  That gave the exact same symptoms as the simpler way
of reproducing the warning above.  In practice, I solved the problem
by renaming my "splitString" function to something else.  But I still
wonder what exactly was going on with that warning.

I noticed that the toTitleCase() R code calls .Call() with a bare
splitString identifier, no quotes around it:

  $ grep -n splitString R-3-[234]*/src/library/tools/R/utils.R
  R-3-2-branch/src/library/tools/R/utils.R:1988:        xx <- .Call(splitString, x, ' -/"()')
  R-3-3-branch/src/library/tools/R/utils.R:2074:        xx <- .Call(splitString, x, ' -/"()\n')
  R-3-4-trunk/src/library/tools/R/utils.R:2074:        xx <- .Call(splitString, x, ' -/"()\n')

  $ find R-3-4-trunk -name .svn -prune -o -type f -print0 | xargs -0 grep -n splitString
  R-3-4-trunk/src/library/tools/R/utils.R:2074:        xx <- .Call(splitString, x, ' -/"()\n')
  R-3-4-trunk/src/library/tools/src/text.c:264:SEXP splitString(SEXP string, SEXP delims)
  R-3-4-trunk/src/library/tools/src/tools.h:45:SEXP splitString(SEXP string, SEXP delims);
  R-3-4-trunk/src/library/tools/src/init.c:53:    CALLDEF(splitString, 2),

Doing that is perfectly legal according to help(".Call"), and
interestingly, it apparently does NOT matter whether that code puts
quotes around the splitString or not - I tried it, and it made no
difference.

Is it generally the case the users MUST NOT define R functions with
the same names as "registered" C functions?  Will something break if
we do?

-- 
Andrew Piskorski <atp at piskorski.com>


From martin.schlather at googlemail.com  Mon Jul 18 22:18:49 2016
From: martin.schlather at googlemail.com (Martin Schlather)
Date: Mon, 18 Jul 2016 22:18:49 +0200
Subject: [Rd] memory leak in split.screen
Message-ID: <578D39A9.60305@uni-mannheim.de>


Hello,

## Configuring R with

 ./configure --with-tcl-config=/usr/lib/tcl8.5/tclConfig.sh
--with-tk-config=/usr/lib/tk8.5/tkConfig.sh  CFLAGS="-fsanitize=address
-fsanitize=undefined -fno-sanitize=float-divide-by-zero,vptr  "
CXXFLAGS="-fsanitize=address -fsanitize=undefined
-fno-sanitize=float-divide-by-zero,vptr  " LD_FLAGS="-pthread
-fopenmp-lclang_rt.asan_cxx-x86_64 -fopenmp=libgomp"  CC="clang-3.8
-fsanitize=address -fsanitize=undefined
-fno-sanitize=float-divide-by-zero,vptr" CXX="clang++-3.8
-fsanitize=address -fsanitize=undefined
-fno-sanitize=float-divide-by-zero,vptr"


## I get in the interactive mode of R for

n <- 4 ## the number is unimportant
split.screen(c(n, n))
## close.screen(all=TRUE)  ## this command does not rectify the problem
q()

## the following result:

=================================================================
==14567==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 32 byte(s) in 1 object(s) allocated from:
    #0 0x4d5018  (/usr/local/lib64/R/bin/exec/R+0x4d5018)
    #1 0x7f61cec8b56a  (/usr/lib/x86_64-linux-gnu/libcairo.so.2+0x9b56a)

SUMMARY: AddressSanitizer: 32 byte(s) leaked in 1 allocation(s).


## I use Ubuntu 14.04.4 LTS,
platform       x86_64-pc-linux-gnu                               
arch           x86_64                                            
os             linux-gnu                                         
system         x86_64, linux-gnu                                 
status         Under development (unstable)                      
major          3                                                 
minor          4.0                                               
year           2016                                              
month          07                                                
day            15                                                
svn rev        70918                                             
language       R                                                 
version.string R Under development (unstable) (2016-07-15 r70918)
nickname       Unsuffered Consequences                           



I would be happy to get any hint that explains this behaviour.
The LeakSanitizer message appears in the interactive mode,
but not in the batch mode.

With kind regards,
Martin Schlather


From martin.morgan at roswellpark.org  Mon Jul 18 22:36:48 2016
From: martin.morgan at roswellpark.org (Martin Morgan)
Date: Mon, 18 Jul 2016 16:36:48 -0400
Subject: [Rd] failed to assign RegisteredNativeSymbol for splitString
In-Reply-To: <20160718194507.GB27531@piskorski.com>
References: <20160718194507.GB27531@piskorski.com>
Message-ID: <578D3DE0.4060704@roswellpark.org>

On 07/18/2016 03:45 PM, Andrew Piskorski wrote:
> I saw a warning from R that I don't fully understand.  Here's one way
> to reproduce it:
>
>    $ /usr/local/pkg/R-3.2-branch-20160718/bin/R --version | head -n 3
>    R version 3.2.5 Patched (2016-05-05 r70929) -- "Very, Very Secure Dishes"
>    Copyright (C) 2016 The R Foundation for Statistical Computing
>    Platform: x86_64-pc-linux-gnu/x86_64 (64-bit)
>
>    $ /usr/local/pkg/R-3.2-branch-20160718/bin/R --vanilla --no-restore --no-save --silent
>    > splitString <- function(...) { print("Test, do nothing") }
>    > invisible(tools::toTitleCase)
>    Warning message:
>    failed to assign RegisteredNativeSymbol for splitString to splitString since splitString is already defined in the 'tools' namespace
>
> Another way to trigger that warning is by loading the knitr package, e.g.:

or

   splitString = NULL; loadNamespace("tools")

Thanks, it's a bug fixed with

------------------------------------------------------------------------
r70933 | morgan | 2016-07-18 16:35:39 -0400 (Mon, 18 Jul 2016) | 5 lines

assignNativeRoutines looks only in package namespace

- previously looked for symbols in inherited environments
- https://stat.ethz.ch/pipermail/r-devel/2016-July/072909.html

------------------------------------------------------------------------


>
>    > require("knitr")
>    Loading required package: knitr
>    Warning: failed to assign RegisteredNativeSymbol for splitString to splitString since splitString is already defined in the 'tools' namespace
>
> The warning only happens the FIRST time I run any code that triggers it.
> To get it to happen again, I need to restart R.
>
> R 3.1.0 and all earlier versions do not throw that warning, because
> they do not have any splitString C function (see below) at all.  R
> 3.2.5 does throw the warning, and I believe 3.3 and all later versions
> of R do also (but I cannot currently test that on this machine).
>
> In my case, normally I start R without "--vanilla", and load various
> custom libraries of my own, one of which contained an R function
> "splitString".  That gave the exact same symptoms as the simpler way
> of reproducing the warning above.  In practice, I solved the problem
> by renaming my "splitString" function to something else.  But I still
> wonder what exactly was going on with that warning.
>
> I noticed that the toTitleCase() R code calls .Call() with a bare
> splitString identifier, no quotes around it:
>
>    $ grep -n splitString R-3-[234]*/src/library/tools/R/utils.R
>    R-3-2-branch/src/library/tools/R/utils.R:1988:        xx <- .Call(splitString, x, ' -/"()')
>    R-3-3-branch/src/library/tools/R/utils.R:2074:        xx <- .Call(splitString, x, ' -/"()\n')
>    R-3-4-trunk/src/library/tools/R/utils.R:2074:        xx <- .Call(splitString, x, ' -/"()\n')
>
>    $ find R-3-4-trunk -name .svn -prune -o -type f -print0 | xargs -0 grep -n splitString
>    R-3-4-trunk/src/library/tools/R/utils.R:2074:        xx <- .Call(splitString, x, ' -/"()\n')
>    R-3-4-trunk/src/library/tools/src/text.c:264:SEXP splitString(SEXP string, SEXP delims)
>    R-3-4-trunk/src/library/tools/src/tools.h:45:SEXP splitString(SEXP string, SEXP delims);
>    R-3-4-trunk/src/library/tools/src/init.c:53:    CALLDEF(splitString, 2),
>
> Doing that is perfectly legal according to help(".Call"), and
> interestingly, it apparently does NOT matter whether that code puts
> quotes around the splitString or not - I tried it, and it made no
> difference.
>
> Is it generally the case the users MUST NOT define R functions with
> the same names as "registered" C functions?  Will something break if
> we do?
>


This email message may contain legally privileged and/or...{{dropped:2}}


From kevinushey at gmail.com  Tue Jul 19 18:46:46 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Tue, 19 Jul 2016 09:46:46 -0700
Subject: [Rd] package installation fails when symlink of same name exists
Message-ID: <CAJXgQP328epDSPz7r+LcrXD3o_SgDpzFxo6gTYL++TBdaFo7yQ@mail.gmail.com>

R fails to install a package from source over a pre-existing package
when the path to that package is a symlink, rather than a directory. A
reproducible example to illustrate (using MASS as an example):

    # create a temporary R library in tempdir
    library <- tempfile()
    if (!dir.exists(library)) dir.create(library)

    # symlink MASS from system library to temporary library
    MASS <- find.package("MASS", lib.loc = .Library)
    file.symlink(MASS, file.path(library, "MASS"))

    # use our custom library, and try to install MASS
    .libPaths(library)
    utils::install.packages("MASS", lib = library, type = "source")

On running this, I see a surprising error message:

    ERROR: 'MASS' is not a legal package name

The code that I'm bumping into lives here:

https://github.com/wch/r-source/blob/62f5acbdbdf36e1fc618510312125d1677d79941/src/library/tools/R/install.R#L283-L287

I guess my wish here would be that R would check if any file already
existed at the 'instdir' path, and if it existed and was a symlink, R
would remove that symlink before install. It could happen before
creating the directory, e.g. here:

https://github.com/wch/r-source/blob/62f5acbdbdf36e1fc618510312125d1677d79941/src/library/tools/R/install.R#L277-L281

One thing that was a bit surprising to me -- R does not remove a
pre-existing package installation if it exists (when installing from
source), it merely installs over it, so files / artifacts from a
previous package installation could be left over after installing a
new package. It seems this is not a problem in practice since I don't
think anyone's reported this being an issue before, but for hygiene it
seems like a pre-existing directory could / should be removed when
installing a new package. (It appears that R does clear out a
pre-existing directory when downloading and installing a package
binary directly from CRAN.)

For motivation: I bumped into this when attempting to implement a
package caching feature with packrat. A packrat project using a global
cache will have a (private) R library containing symlinks to R package
installations in a separate, global library. This allows projects to
effectively be isolated from one another, while avoiding duplication
of packages used across multiple projects. Unfortunately, some packrat
users bump into this when attempting to update a package that has
entered the cache (and so is a symlink in their R library).

Thanks for your time,
Kevin

---

$ R --vanilla --slave -e 'sessionInfo()' | head -n 3
R version 3.3.0 Patched (2016-05-23 r70665)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X 10.11.5 (El Capitan)


From edd at debian.org  Tue Jul 19 22:05:58 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 19 Jul 2016 15:05:58 -0500
Subject: [Rd] Issues building from svn
Message-ID: <22414.34854.561908.558020@max.nulle.part>


On a fresh svn checkout in a fresh directory, following up on 'configure'
(with many options, pointer to exact invocation below) by 'make' ends in
tears:

root at 09c079b7388b:/tmp/R-devel# make
make[1]: Entering directory '/tmp/R-devel/doc/manual'
creating RESOURCES
creating FAQ
creating doc/html/resources.html
make[1]: Leaving directory '/tmp/R-devel/doc/manual'
make[1]: Entering directory '/tmp/R-devel/m4'
make[1]: Nothing to be done for 'R'.
make[1]: Leaving directory '/tmp/R-devel/m4'
make[1]: Entering directory '/tmp/R-devel/tools'
make[1]: Nothing to be done for 'R'.
make[1]: Leaving directory '/tmp/R-devel/tools'
make[1]: Entering directory '/tmp/R-devel/doc'
/bin/bash: line 2: ../bin/R: No such file or directory
Makefile:48: recipe for target 'NEWS.rds' failed
make[1]: *** [NEWS.rds] Error 127
make[1]: Leaving directory '/tmp/R-devel/doc'
Makefile:60: recipe for target 'R' failed
make: *** [R] Error 1
root at 09c079b7388b:/tmp/R-devel#

Somehow ../bin/R is not made, but needed by doc/Makefile.  Running 'cd src;
make' builds R.

The exact details are in this file:
  https://github.com/rocker-org/rocker/blob/master/r-devel/Dockerfile
Some of the standard build commands are prefixed by Docker commands such as
RUN which you can ignore.  It also fails when I run the same commands
manually.  Needless to say, this used to work just fine.

Re-running 'make' then works.  When I tried to code this up, it fell over for
lack a SVN stamp ...

Looking at the svn log the likely culprit may be this as it is most recent, I
am however not sure why NEWS.rds would get in the way.

root at 09c079b7388b:/tmp/R-devel/doc# svn di -r68786 Makefile.in
Index: Makefile.in
===================================================================
--- Makefile.in (revision 68786)
+++ Makefile.in (working copy)
@@ -28,7 +28,7 @@
 Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
        @cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

-R: Makefile svnonly
+R: Makefile svnonly NEWS.rds
        @for d in $(SUBDIRS); do \
          (cd $${d} && $(MAKE) $@) || exit 1; \
        done
root at 09c079b7388b:/tmp/R-devel/doc# 

The problem does manifest itself when the svn directory is not 'fresh' as in
the case of the Docker builds as ../bin/R exists from the previous builds.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pdalgd at gmail.com  Wed Jul 20 00:21:41 2016
From: pdalgd at gmail.com (peter dalgaard)
Date: Wed, 20 Jul 2016 00:21:41 +0200
Subject: [Rd] Issues building from svn
In-Reply-To: <22414.34854.561908.558020@max.nulle.part>
References: <22414.34854.561908.558020@max.nulle.part>
Message-ID: <15434F05-AC6B-4F21-AF7B-4EAE59E0D9B3@gmail.com>


> On 19 Jul 2016, at 22:05 , Dirk Eddelbuettel <edd at debian.org> wrote:
> 
> 
> On a fresh svn checkout in a fresh directory, following up on 'configure'
> (with many options, pointer to exact invocation below) by 'make' ends in
> tears:

This also breaks plain builds of r-devel. 

Subdir make is such a pain! Top level Makefile has

SUBDIRS = m4 tools doc etc share src tests
...
        @for d in $(SUBDIRS); do \
          (cd $${d} && $(MAKE) R) || exit 1; \
        done

so building something in doc that relies on something built in src ends badly. Preliminary fiddling indicates that it might work to move doc after src in SUBDIRS, but the reverse (src to before doc) did not. 

[snippage]

> The problem does manifest itself when the svn directory is not 'fresh' as in
> the case of the Docker builds as ../bin/R exists from the previous builds.
> 
> Dirk
> 

Er, a "not" went missing in there??

-p

> -- 
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From edd at debian.org  Wed Jul 20 02:22:56 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 19 Jul 2016 19:22:56 -0500
Subject: [Rd] Issues building from svn
In-Reply-To: <15434F05-AC6B-4F21-AF7B-4EAE59E0D9B3@gmail.com>
References: <22414.34854.561908.558020@max.nulle.part>
	<15434F05-AC6B-4F21-AF7B-4EAE59E0D9B3@gmail.com>
Message-ID: <22414.50272.369088.441160@max.nulle.part>


On 20 July 2016 at 00:21, peter dalgaard wrote:
| 
| > On 19 Jul 2016, at 22:05 , Dirk Eddelbuettel <edd at debian.org> wrote:
| > 
| > 
| > On a fresh svn checkout in a fresh directory, following up on 'configure'
| > (with many options, pointer to exact invocation below) by 'make' ends in
| > tears:
| 
| This also breaks plain builds of r-devel. 
| 
| Subdir make is such a pain! Top level Makefile has
| 
| SUBDIRS = m4 tools doc etc share src tests
| ...
|         @for d in $(SUBDIRS); do \
|           (cd $${d} && $(MAKE) R) || exit 1; \
|         done
| 
| so building something in doc that relies on something built in src ends badly. Preliminary fiddling indicates that it might work to move doc after src in SUBDIRS, but the reverse (src to before doc) did not. 

Per the (now deleted by you) diff, the NEWS.rds needs ../bin/R to be
processed which is constructed only via src/ but now needed in doc/. Bang.
 
| [snippage]
| 
| > The problem does manifest itself when the svn directory is not 'fresh' as in
| > the case of the Docker builds as ../bin/R exists from the previous builds.
| > 
| > Dirk
| > 
| 
| Er, a "not" went missing in there??

Certainly, thanks.  And fortunes::fortune(112) still holds.

Dirk
 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jeroenooms at gmail.com  Wed Jul 20 10:26:19 2016
From: jeroenooms at gmail.com (Jeroen Ooms)
Date: Wed, 20 Jul 2016 10:26:19 +0200
Subject: [Rd] package installation fails when symlink of same name exists
In-Reply-To: <CAJXgQP328epDSPz7r+LcrXD3o_SgDpzFxo6gTYL++TBdaFo7yQ@mail.gmail.com>
References: <CAJXgQP328epDSPz7r+LcrXD3o_SgDpzFxo6gTYL++TBdaFo7yQ@mail.gmail.com>
Message-ID: <CABFfbXtuRVWNf9gBbEPo52pc+vCwuH6TxTuFvXBy-tjiEP+H+Q@mail.gmail.com>

On Tue, Jul 19, 2016 at 6:46 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> R fails to install a package from source over a pre-existing package
> when the path to that package is a symlink, rather than a directory.
> ...
> I don't think anyone's reported this being an issue before

I ran into this as well a while back:
https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16725


From maechler at stat.math.ethz.ch  Wed Jul 20 12:52:24 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Wed, 20 Jul 2016 12:52:24 +0200
Subject: [Rd] package installation fails when symlink of same name exists
In-Reply-To: <CABFfbXtuRVWNf9gBbEPo52pc+vCwuH6TxTuFvXBy-tjiEP+H+Q@mail.gmail.com>
References: <CAJXgQP328epDSPz7r+LcrXD3o_SgDpzFxo6gTYL++TBdaFo7yQ@mail.gmail.com>
	<CABFfbXtuRVWNf9gBbEPo52pc+vCwuH6TxTuFvXBy-tjiEP+H+Q@mail.gmail.com>
Message-ID: <22415.22504.313987.661421@stat.math.ethz.ch>

>>>>> Jeroen Ooms <jeroenooms at gmail.com>
>>>>>     on Wed, 20 Jul 2016 10:26:19 +0200 writes:

    > On Tue, Jul 19, 2016 at 6:46 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
    >> R fails to install a package from source over a pre-existing package
    >> when the path to that package is a symlink, rather than a directory.
    >> ...
    >> I don't think anyone's reported this being an issue before

    > I ran into this as well a while back:
    >   https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16725

I've now at least "acknowledged" that bug report.
and have looked into changing the  is_subdir() function so it
returns TRUE in the case of a symlink [on those platforms where
Sys.readlink() "works", i.e., supposedly not on Windows; however
that maybe sufficient to close that bug report and also Kevin's
issue, right ?]

However, Kevin, in his posting, continues 

    > I guess my wish here would be that R would check if any file already
    > existed at the 'instdir' path, and if it existed and was a symlink, R
    > would remove that symlink before install. 

are you sure?
I think ... and from what you mention below ("packrat") it would
rather be important to *keep* the symlink, and install to
whereever the symlink is pointing,  no ?


    > It could happen before creating the directory, e.g. here:

    > https://github.com/wch/r-source/blob/62f5acbdbdf36e1fc618510312125d1677d79941/src/library/tools/R/install.R#L277-L281

    > One thing that was a bit surprising to me -- R does not remove a
    > pre-existing package installation if it exists (when installing from
    > source), it merely installs over it, so files / artifacts from a
    > previous package installation could be left over after installing a
    > new package. It seems this is not a problem in practice since I don't
    > think anyone's reported this being an issue before, but for hygiene it
    > seems like a pre-existing directory could / should be removed when
    > installing a new package. (It appears that R does clear out a
    > pre-existing directory when downloading and installing a package
    > binary directly from CRAN.)

Well, at least with  update.packages()  it seems natural to me
that R would not just remove all previous parts there ..

    > For motivation: I bumped into this when attempting to implement a
    > package caching feature with packrat. A packrat project using a global
    > cache will have a (private) R library containing symlinks to R package
    > installations in a separate, global library. This allows projects to
    > effectively be isolated from one another, while avoiding duplication
    > of packages used across multiple projects.

Yes, I found this a nice feature when I heard about packrat.

But then, really R should *not* remove the symlink and create a
regular subdirectory in that library there !

    > Unfortunately, some packrat
    > users bump into this when attempting to update a package that has
    > entered the cache (and so is a symlink in their R library).

    > Thanks for your time,
    > Kevin


From kevinushey at gmail.com  Wed Jul 20 19:19:33 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Wed, 20 Jul 2016 10:19:33 -0700
Subject: [Rd] package installation fails when symlink of same name exists
In-Reply-To: <22415.22504.313987.661421@stat.math.ethz.ch>
References: <CAJXgQP328epDSPz7r+LcrXD3o_SgDpzFxo6gTYL++TBdaFo7yQ@mail.gmail.com>
	<CABFfbXtuRVWNf9gBbEPo52pc+vCwuH6TxTuFvXBy-tjiEP+H+Q@mail.gmail.com>
	<22415.22504.313987.661421@stat.math.ethz.ch>
Message-ID: <CAJXgQP1ntTue21SFfzRzud9cUZ1zAkUN0viMkd9bS8K_ycwNBw@mail.gmail.com>

On Wed, Jul 20, 2016 at 3:52 AM, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>>>>>> Jeroen Ooms <jeroenooms at gmail.com>
>>>>>>     on Wed, 20 Jul 2016 10:26:19 +0200 writes:
>
>     > On Tue, Jul 19, 2016 at 6:46 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
>     >> R fails to install a package from source over a pre-existing package
>     >> when the path to that package is a symlink, rather than a directory.
>     >> ...
>     >> I don't think anyone's reported this being an issue before
>
>     > I ran into this as well a while back:
>     >   https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16725
>
> I've now at least "acknowledged" that bug report.
> and have looked into changing the  is_subdir() function so it
> returns TRUE in the case of a symlink [on those platforms where
> Sys.readlink() "works", i.e., supposedly not on Windows; however
> that maybe sufficient to close that bug report and also Kevin's
> issue, right ?]
>
> However, Kevin, in his posting, continues
>
>     > I guess my wish here would be that R would check if any file already
>     > existed at the 'instdir' path, and if it existed and was a symlink, R
>     > would remove that symlink before install.
>
> are you sure?
> I think ... and from what you mention below ("packrat") it would
> rather be important to *keep* the symlink, and install to
> whereever the symlink is pointing,  no ?

For packrat's case at least, removing the symlink and installing to a
newly-created directory within the library would be fine -- later,
when a user wants to 'save the state' of their library, they would
call 'packrat::snapshot()', and that call would take care of moving
the newly-installed package to the cache and restoring the symlink as
required.

That said, installing within the symlinked directory would definitely
be nice :-) I just thought the request might be out of scope.

>     > It could happen before creating the directory, e.g. here:
>
>     > https://github.com/wch/r-source/blob/62f5acbdbdf36e1fc618510312125d1677d79941/src/library/tools/R/install.R#L277-L281
>
>     > One thing that was a bit surprising to me -- R does not remove a
>     > pre-existing package installation if it exists (when installing from
>     > source), it merely installs over it, so files / artifacts from a
>     > previous package installation could be left over after installing a
>     > new package. It seems this is not a problem in practice since I don't
>     > think anyone's reported this being an issue before, but for hygiene it
>     > seems like a pre-existing directory could / should be removed when
>     > installing a new package. (It appears that R does clear out a
>     > pre-existing directory when downloading and installing a package
>     > binary directly from CRAN.)
>
> Well, at least with  update.packages()  it seems natural to me
> that R would not just remove all previous parts there ..
>
>     > For motivation: I bumped into this when attempting to implement a
>     > package caching feature with packrat. A packrat project using a global
>     > cache will have a (private) R library containing symlinks to R package
>     > installations in a separate, global library. This allows projects to
>     > effectively be isolated from one another, while avoiding duplication
>     > of packages used across multiple projects.
>
> Yes, I found this a nice feature when I heard about packrat.
>
> But then, really R should *not* remove the symlink and create a
> regular subdirectory in that library there !

I agree this would be ideal, I just thought this request might be out
of scope, since the typical use case for R libraries is a
directory-of-directories, not a directory-of-symlinks-to-directories
(although packrat has had a lot of success with the second scenario!)

Thanks, Martin!

>     > Unfortunately, some packrat
>     > users bump into this when attempting to update a package that has
>     > entered the cache (and so is a symlink in their R library).
>
>     > Thanks for your time,
>     > Kevin
>


From maechler at stat.math.ethz.ch  Thu Jul 21 18:03:34 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 21 Jul 2016 18:03:34 +0200
Subject: [Rd] package installation fails when symlink of same name exists
In-Reply-To: <CAJXgQP1ntTue21SFfzRzud9cUZ1zAkUN0viMkd9bS8K_ycwNBw@mail.gmail.com>
References: <CAJXgQP328epDSPz7r+LcrXD3o_SgDpzFxo6gTYL++TBdaFo7yQ@mail.gmail.com>
	<CABFfbXtuRVWNf9gBbEPo52pc+vCwuH6TxTuFvXBy-tjiEP+H+Q@mail.gmail.com>
	<22415.22504.313987.661421@stat.math.ethz.ch>
	<CAJXgQP1ntTue21SFfzRzud9cUZ1zAkUN0viMkd9bS8K_ycwNBw@mail.gmail.com>
Message-ID: <22416.62038.902697.525810@stat.math.ethz.ch>

>>>>> Kevin Ushey <kevinushey at gmail.com>
>>>>>     on Wed, 20 Jul 2016 10:19:33 -0700 writes:

    > On Wed, Jul 20, 2016 at 3:52 AM, Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:
    >>>>>>> Jeroen Ooms <jeroenooms at gmail.com>
    >>>>>>> on Wed, 20 Jul 2016 10:26:19 +0200 writes:
    >> 
    >> > On Tue, Jul 19, 2016 at 6:46 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
    >> >> R fails to install a package from source over a pre-existing package
    >> >> when the path to that package is a symlink, rather than a directory.
    >> >> ...
    >> >> I don't think anyone's reported this being an issue before
    >> 
    >> > I ran into this as well a while back:
    >> >   https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16725
    >> 
    >> I've now at least "acknowledged" that bug report.
    >> and have looked into changing the  is_subdir() function so it
    >> returns TRUE in the case of a symlink [on those platforms where
    >> Sys.readlink() "works", i.e., supposedly not on Windows; however
    >> that maybe sufficient to close that bug report and also Kevin's
    >> issue, right ?]
    >> 
    >> However, Kevin, in his posting, continues
    >> 
    >> > I guess my wish here would be that R would check if any file already
    >> > existed at the 'instdir' path, and if it existed and was a symlink, R
    >> > would remove that symlink before install.
    >> 
    >> are you sure?
    >> I think ... and from what you mention below ("packrat") it would
    >> rather be important to *keep* the symlink, and install to
    >> whereever the symlink is pointing,  no ?

    > For packrat's case at least, removing the symlink and installing to a
    > newly-created directory within the library would be fine -- later,
    > when a user wants to 'save the state' of their library, they would
    > call 'packrat::snapshot()', and that call would take care of moving
    > the newly-installed package to the cache and restoring the symlink as
    > required.

    > That said, installing within the symlinked directory would definitely
    > be nice :-) I just thought the request might be out of scope.

    >> > It could happen before creating the directory, e.g. here:
    >> 
    >> > https://github.com/wch/r-source/blob/62f5acbdbdf36e1fc618510312125d1677d79941/src/library/tools/R/install.R#L277-L281
    >> 
    >> > One thing that was a bit surprising to me -- R does not remove a
    >> > pre-existing package installation if it exists (when installing from
    >> > source), it merely installs over it, so files / artifacts from a
    >> > previous package installation could be left over after installing a
    >> > new package. It seems this is not a problem in practice since I don't
    >> > think anyone's reported this being an issue before, but for hygiene it
    >> > seems like a pre-existing directory could / should be removed when
    >> > installing a new package. (It appears that R does clear out a
    >> > pre-existing directory when downloading and installing a package
    >> > binary directly from CRAN.)
    >> 
    >> Well, at least with  update.packages()  it seems natural to me
    >> that R would not just remove all previous parts there ..
    >> 
    >> > For motivation: I bumped into this when attempting to implement a
    >> > package caching feature with packrat. A packrat project using a global
    >> > cache will have a (private) R library containing symlinks to R package
    >> > installations in a separate, global library. This allows projects to
    >> > effectively be isolated from one another, while avoiding duplication
    >> > of packages used across multiple projects.
    >> 
    >> Yes, I found this a nice feature when I heard about packrat.
    >> 
    >> But then, really R should *not* remove the symlink and create a
    >> regular subdirectory in that library there !

    > I agree this would be ideal, I just thought this request might be out
    > of scope, since the typical use case for R libraries is a
    > directory-of-directories, not a directory-of-symlinks-to-directories
    > (although packrat has had a lot of success with the second scenario!)

    > Thanks, Martin!

You are welcome.
I have committed a change (svn rev 70955) which no longer "errors out" on
symlinks {{and the same change improves debugging: you can turn
	  off the "dreaded" q(), and that's done by default if(interactive())}}

However, that change indeed was mainly to  is_subdir()
and indeed the code later *does* replace the package-name symlink by a newly
created directory <lib>/<package>  rather than leaving the
symlink.. where I continue to find the latter *the* correct
action, but that would need changes in other places of the code.

 [tested (and "minimal")  patches are welcome for that other goal ..]

Martin

    >> > Unfortunately, some packrat
    >> > users bump into this when attempting to update a package that has
    >> > entered the cache (and so is a symlink in their R library).
    >> 
    >> > Thanks for your time,
    >> > Kevin
    >>


From jrm at ftfl.ca  Sun Jul 24 01:33:33 2016
From: jrm at ftfl.ca (Joseph Mingrone)
Date: Sat, 23 Jul 2016 20:33:33 -0300
Subject: [Rd] status of the FreeBSD port/package and some questions
Message-ID: <8637n0hquq.fsf@phe.ftfl.ca>

Hello,

Over time, the FreeBSD R port/package [1] has accumulated some cruft.  We've
begun an overhaul and the process has generally been positive since most of the
local patches and workarounds are no longer necessary.

However, we still require a few workarounds.

1. Libjpeg

The autotools check for libjpeg >=6b fails even when libjpeg is present
(e.g. /usr/local/lib/libjpeg.so.8 exists).  To work around this, when the user
selects the JPEG option from a list of configuration choices,
graphics/jpeg-turbo (currently version 1.4.2) is installed as a dependency and
the variable r_cv_header_jpeglib_h is set to yes.

2. ARMv6 Build Issues

We used to have a local patch similar to the change applied for
https://stat.ethz.ch/pipermail/r-devel/2015-October/071902.html.  Now that these
checks are included in src/extra/tre/tre-internal.h, we only need, I believe, an
#include <stdint.h> in tre-internal.h for the definitions of UINT32_MAX and
INT32_MAX.  This fixes one build error, but the build still fails on ARMv6
(http://pkg.awarnach.mathstat.dal.ca/data/10armv6-default/2016-07-23_13h52m17s/logs/errors/R-3.3.1_2.log).

3. BLAS

Users can choose from four options for BLAS: ATLAS, OpenBLAS, Netlib, and RBLAS
(bundled BLAS).  I've noticed some segmentation faults with OpenBLAS.  They
occur when quitting R, but for some reason, only through Emacs/ESS.  A core file
is dumped, but I haven't looked into it yet.  I also haven't tested ATLAS or
NetLib's BLAS extensively.  Based on what I've read in the "R Installation and
Administration" manual, I will likely switch the default to R's bundled BLAS.

4. PDF Manuals and TeX Dependencies

Since the TeX dependencies to build the PDF manuals is quite heavy, we give
users the option to turn this off.  I don't see an autoconf option to do this,
so here is our workaround when the user chooses not to install the PDF
manuals:

.for i in KPSEWHICH MAKEINDEX PDFLATEX PDFTEX TEX TEXI2DVI
     CONFIGURE_ENV+=ac_cv_path_${i}=""
.endfor

5. Miscellaneous

We changed a few default locations.

@${REINPLACE_CMD} -e 's|(libdir)/pkgconfig|(prefix)/libdata/pkgconfig|g'\
	${WRKSRC}/src/nmath/standalone/Makefile.in \
	${WRKSRC}/src/unix/Makefile.in
@${REINPLACE_CMD} -e "s|/usr/local|${LOCALBASE}|g" \
	${WRKSRC}/configure

We created versions for shared libraries.

.for L in R Rblas Rlapack
	@if [ -d ${STAGEDIR}${PREFIX}/lib/R/lib ] ; then \
	cd ${STAGEDIR}${PREFIX}/lib/R/lib; if [ -f lib${L}.so ] ; then \
	${LN} -sf lib${L}.so lib${L}.so.${${L:tu}_SOVERSION} ; fi; fi
.endfor

We've also created a separate, simple port/package for libRMath.  It basically
turns off all configuration options

--without-cairo --without-ICU --disable-java --without-jpeglib
  --without-libintl-prefix --without-libpng --disable-nls --without-readline
  --without-tcltk --without-libtiff --without-x

and installs

include/Rmath.h lib/libRmath.a lib/libRmath.so
lib/libRmath.so.%%RMATH_SOVERSION%%

Here are my proposed Makefiles for math/R and math/libRmath

http://ftfl.ca/misc/Makefile_R
http://ftfl.ca/misc/Makefile_libRMath

They are built for the FreeBSD ports system, but I guess most of what's going on
will be clear.  If you have any comments or suggestions for improvements, please
share.

Regards,

Joseph

[1] A port is what we call the "blueprint" system for package building.  Most
users will probably just install the pre-built binary package, but if they want
a package with customized options, they can use the port to build a package
themselves.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 800 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20160723/186d0289/attachment.bin>

From cdg4 at princeton.edu  Mon Jul 25 20:15:59 2016
From: cdg4 at princeton.edu (Daniel Greenidge)
Date: Mon, 25 Jul 2016 14:15:59 -0400
Subject: [Rd] getGraphicsEvent() alternative for cairo graphics device?
Message-ID: <CAN_GHySs42vK5U1xZYP8h7ZPdFyOcHnEZK4Sn91e7htv=7E54A@mail.gmail.com>

Hi all,

I'm writing an interactive plotting function for viewing fMRI
datasets. Currently, I get keypresses using
grDevices::getGraphicsEvent().

Unfortunately getGraphicsEvent() only supports the X11(type="Xlib")
graphics device on Unix systems. The Xlib device doesn't support
buffering (i.e. dev.hold() and dev.flush()), so redrawing the plots
causes lots of flickering.

Is there a way to get keypresses while using the cairo graphics
device? Alternatively, is there a way to prevent flickering with the
Xlib graphics device?

Best,
Daniel Greenidge


From frederik at ofb.net  Mon Jul 25 21:17:47 2016
From: frederik at ofb.net (frederik at ofb.net)
Date: Mon, 25 Jul 2016 12:17:47 -0700
Subject: [Rd] getGraphicsEvent() alternative for cairo graphics device?
In-Reply-To: <CAN_GHySs42vK5U1xZYP8h7ZPdFyOcHnEZK4Sn91e7htv=7E54A@mail.gmail.com>
References: <CAN_GHySs42vK5U1xZYP8h7ZPdFyOcHnEZK4Sn91e7htv=7E54A@mail.gmail.com>
Message-ID: <20160725191747.GB18530@ofb.net>

Dear Daniel Greenidge,

To enable getGraphicsEvent on Cairo, you have two patches to choose
from:

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=14364
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16951

The second one is by me, and the first one is from five years ago by
Hugo Mildenberger.

Both patches are very simple, they move some lines enabling
getGrahpicsEvent outside of a if(!cairo) statement. My patch also adds
the ability to execute code (e.g. for animation) while the interface
is idle.

Top guy Duncan Murdoch has expressed that he doesn't have time to work
on applying these patches, and I haven't had any responses from the
rest of the R Core Team. I was thinking that perhaps your best bet is
to try to create a package called e.g. "X11-fixes" which people can
use to get a better X11 library (there is also a bug waiting to be
fixed from 2001:
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702).

I don't know if CRAN would accept such a package, or if you'd have to
distribute it via GitHub, but R has excellent tools to facilitate the
distribution of code via packages. Whether the R kernel exports enough
functions to allow a package to take over event handling, I'm not
sure. I was intending to look more into the details of this
possibility but haven't had time.

Best wishes,

Frederick

On Mon, Jul 25, 2016 at 02:15:59PM -0400, Daniel Greenidge wrote:
> Hi all,
> 
> I'm writing an interactive plotting function for viewing fMRI
> datasets. Currently, I get keypresses using
> grDevices::getGraphicsEvent().
> 
> Unfortunately getGraphicsEvent() only supports the X11(type="Xlib")
> graphics device on Unix systems. The Xlib device doesn't support
> buffering (i.e. dev.hold() and dev.flush()), so redrawing the plots
> causes lots of flickering.
> 
> Is there a way to get keypresses while using the cairo graphics
> device? Alternatively, is there a way to prevent flickering with the
> Xlib graphics device?
> 
> Best,
> Daniel Greenidge
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From paul at stat.auckland.ac.nz  Mon Jul 25 23:23:35 2016
From: paul at stat.auckland.ac.nz (Paul Murrell)
Date: Tue, 26 Jul 2016 09:23:35 +1200
Subject: [Rd] getGraphicsEvent() alternative for cairo graphics device?
In-Reply-To: <20160725191747.GB18530@ofb.net>
References: <CAN_GHySs42vK5U1xZYP8h7ZPdFyOcHnEZK4Sn91e7htv=7E54A@mail.gmail.com>
	<20160725191747.GB18530@ofb.net>
Message-ID: <57968357.2030509@stat.auckland.ac.nz>

Hi

Taking a look at those patches is now on my todo list, so I may be in 
touch with both of you at some point to request some testing.

Paul

On 26/07/16 07:17, frederik at ofb.net wrote:
> Dear Daniel Greenidge,
>
> To enable getGraphicsEvent on Cairo, you have two patches to choose
> from:
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=14364
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16951
>
> The second one is by me, and the first one is from five years ago by
> Hugo Mildenberger.
>
> Both patches are very simple, they move some lines enabling
> getGrahpicsEvent outside of a if(!cairo) statement. My patch also adds
> the ability to execute code (e.g. for animation) while the interface
> is idle.
>
> Top guy Duncan Murdoch has expressed that he doesn't have time to work
> on applying these patches, and I haven't had any responses from the
> rest of the R Core Team. I was thinking that perhaps your best bet is
> to try to create a package called e.g. "X11-fixes" which people can
> use to get a better X11 library (there is also a bug waiting to be
> fixed from 2001:
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702).
>
> I don't know if CRAN would accept such a package, or if you'd have to
> distribute it via GitHub, but R has excellent tools to facilitate the
> distribution of code via packages. Whether the R kernel exports enough
> functions to allow a package to take over event handling, I'm not
> sure. I was intending to look more into the details of this
> possibility but haven't had time.
>
> Best wishes,
>
> Frederick
>
> On Mon, Jul 25, 2016 at 02:15:59PM -0400, Daniel Greenidge wrote:
>> Hi all,
>>
>> I'm writing an interactive plotting function for viewing fMRI
>> datasets. Currently, I get keypresses using
>> grDevices::getGraphicsEvent().
>>
>> Unfortunately getGraphicsEvent() only supports the X11(type="Xlib")
>> graphics device on Unix systems. The Xlib device doesn't support
>> buffering (i.e. dev.hold() and dev.flush()), so redrawing the plots
>> causes lots of flickering.
>>
>> Is there a way to get keypresses while using the cairo graphics
>> device? Alternatively, is there a way to prevent flickering with the
>> Xlib graphics device?
>>
>> Best,
>> Daniel Greenidge
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From kmb56 at berkeley.edu  Wed Jul 27 19:48:06 2016
From: kmb56 at berkeley.edu (Kenny Bell)
Date: Wed, 27 Jul 2016 10:48:06 -0700
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
Message-ID: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>

In the below, I generate a model from an environment that isn't
.GlobalEnv with a large object that is unrelated to the model
generation. It seems to save the irrelevant object unnecessarily. In
my actual use case, I am running and saving many models in a loop that
each use a single large data.frame (that gets collapsed into a small
data.frame for estimation), so removing it isn't an option.

In the case where the model exists in .GlobalEnv, everything is
peachy. So replicating whatever happens when saving the model that was
generated in .GlobalEnv at the return() stage of the function call
would fix this problem.

I was referred to this list from r-bugs. First time r-devel poster.

Hope this helps,

Kendon

```
tmp_fun <- function(x){
  iris_big <- lapply(1:10000, function(x) iris)
  lm(Sepal.Length ~ Sepal.Width, data = iris)
}

out <- tmp_fun(1)
object.size(out)
# 48008
save(out, file = "tmp.RData", compress = FALSE)
file.size("tmp.RData")
# 57196752 - way too big

# Works fine when in .GlobalEnv
iris_big <- lapply(1:10000, function(x) iris)
out <- lm(Sepal.Length ~ Sepal.Width, data = iris)

object.size(out)
# 48008
save(out, file = "tmp.RData", compress = FALSE)
file.size("tmp.RData")
# 16641 - good size.
```

	[[alternative HTML version deleted]]


From wdunlap at tibco.com  Wed Jul 27 20:19:44 2016
From: wdunlap at tibco.com (William Dunlap)
Date: Wed, 27 Jul 2016 11:19:44 -0700
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
Message-ID: <CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>

One way around this problem is to make a new environment whose
parent environment is .GlobalEnv and which contains only what the
the call to lm() requires and to compute lm() in that environment.   E.g.,

tfun1 <- function (subset)
{
    junk <- 1:1e+06
    env <- new.env(parent = globalenv())
    env$subset <- subset
    with(env, lm(Sepal.Length ~ Sepal.Width, data = iris, subset = subset))
}
Then we get
   > saveSize(tfun1(1:4)) # see below for def. of saveSize
   [1] 910
instead of the 2129743 bytes in the save file when using the naive method.

saveSize <- function (object) {
    tf <- tempfile(fileext = ".RData")
    on.exit(unlink(tf))
    save(object, file = tf)
    file.size(tf)
}



Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Wed, Jul 27, 2016 at 10:48 AM, Kenny Bell <kmb56 at berkeley.edu> wrote:

> In the below, I generate a model from an environment that isn't
> .GlobalEnv with a large object that is unrelated to the model
> generation. It seems to save the irrelevant object unnecessarily. In
> my actual use case, I am running and saving many models in a loop that
> each use a single large data.frame (that gets collapsed into a small
> data.frame for estimation), so removing it isn't an option.
>
> In the case where the model exists in .GlobalEnv, everything is
> peachy. So replicating whatever happens when saving the model that was
> generated in .GlobalEnv at the return() stage of the function call
> would fix this problem.
>
> I was referred to this list from r-bugs. First time r-devel poster.
>
> Hope this helps,
>
> Kendon
>
> ```
> tmp_fun <- function(x){
>   iris_big <- lapply(1:10000, function(x) iris)
>   lm(Sepal.Length ~ Sepal.Width, data = iris)
> }
>
> out <- tmp_fun(1)
> object.size(out)
> # 48008
> save(out, file = "tmp.RData", compress = FALSE)
> file.size("tmp.RData")
> # 57196752 - way too big
>
> # Works fine when in .GlobalEnv
> iris_big <- lapply(1:10000, function(x) iris)
> out <- lm(Sepal.Length ~ Sepal.Width, data = iris)
>
> object.size(out)
> # 48008
> save(out, file = "tmp.RData", compress = FALSE)
> file.size("tmp.RData")
> # 16641 - good size.
> ```
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Wed Jul 27 21:11:53 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 27 Jul 2016 15:11:53 -0400
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
Message-ID: <2ea99246-1dd5-e683-e7c9-97cecb734f76@gmail.com>

On 27/07/2016 1:48 PM, Kenny Bell wrote:
> In the below, I generate a model from an environment that isn't
> .GlobalEnv with a large object that is unrelated to the model
> generation. It seems to save the irrelevant object unnecessarily. In
> my actual use case, I am running and saving many models in a loop that
> each use a single large data.frame (that gets collapsed into a small
> data.frame for estimation), so removing it isn't an option.

If each of those many models refers to the object in the formula, then 
you need to keep it.  But you'll only have one copy of it, because 
environments are reference objects in R.

If your loop looks like this,

for (i in 1:n) {
   subset <- bigdf[ fn(i), ]
   model[i] <- lm(y ~ x, data = subset)
}

then you might be in trouble.  You'll only get one copy of the "subset" 
variable in the environment, so in any cases where code gets it from 
there, they'll get the last one, not the one for model[i].

One way around this is to write a nested function to create the subset 
variable, e.g.

  nested <- function(subset) {
    lm(y ~ x, data = subset)
  }
  for (i in 1:n)
    model[i] <- nested(bigdf[ fn(i), ])
  rm(bigdf)

and it will be safe to remove bigdf after the loop.  (I see that Bill 
Dunlap has posted a different way of achieving the same sort of thing.)

Duncan Murdoch

>
> In the case where the model exists in .GlobalEnv, everything is
> peachy. So replicating whatever happens when saving the model that was
> generated in .GlobalEnv at the return() stage of the function call
> would fix this problem.
>
> I was referred to this list from r-bugs. First time r-devel poster.
>
> Hope this helps,
>
> Kendon
>
> ```
> tmp_fun <- function(x){
>   iris_big <- lapply(1:10000, function(x) iris)
>   lm(Sepal.Length ~ Sepal.Width, data = iris)
> }
>
> out <- tmp_fun(1)
> object.size(out)
> # 48008
> save(out, file = "tmp.RData", compress = FALSE)
> file.size("tmp.RData")
> # 57196752 - way too big
>
> # Works fine when in .GlobalEnv
> iris_big <- lapply(1:10000, function(x) iris)
> out <- lm(Sepal.Length ~ Sepal.Width, data = iris)
>
> object.size(out)
> # 48008
> save(out, file = "tmp.RData", compress = FALSE)
> file.size("tmp.RData")
> # 16641 - good size.
> ```
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wdunlap at tibco.com  Wed Jul 27 21:28:12 2016
From: wdunlap at tibco.com (William Dunlap)
Date: Wed, 27 Jul 2016 12:28:12 -0700
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
	<CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>
Message-ID: <CAF8bMcYFWa6KJbTGLid3izHPP3RBEOw4h04TQJAT=xMLMxLCXQ@mail.gmail.com>

Another solution is to only save the parts of the model object that
interest you.  As long as they don't include the formula (which is
what drags along the environment it was created in), you will
save space.  E.g.,

tfun2 <- function(subset) {
   junk <- 1:1e6
   list(subset=subset, lm(Sepal.Length ~ Sepal.Width, data=iris,
subset=subset)$coef)
}

saveSize(tfun2(1:4))
#[1] 152



Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Wed, Jul 27, 2016 at 11:19 AM, William Dunlap <wdunlap at tibco.com> wrote:

> One way around this problem is to make a new environment whose
> parent environment is .GlobalEnv and which contains only what the
> the call to lm() requires and to compute lm() in that environment.   E.g.,
>
> tfun1 <- function (subset)
> {
>     junk <- 1:1e+06
>     env <- new.env(parent = globalenv())
>     env$subset <- subset
>     with(env, lm(Sepal.Length ~ Sepal.Width, data = iris, subset = subset))
> }
> Then we get
>    > saveSize(tfun1(1:4)) # see below for def. of saveSize
>    [1] 910
> instead of the 2129743 bytes in the save file when using the naive method.
>
> saveSize <- function (object) {
>     tf <- tempfile(fileext = ".RData")
>     on.exit(unlink(tf))
>     save(object, file = tf)
>     file.size(tf)
> }
>
>
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> On Wed, Jul 27, 2016 at 10:48 AM, Kenny Bell <kmb56 at berkeley.edu> wrote:
>
>> In the below, I generate a model from an environment that isn't
>> .GlobalEnv with a large object that is unrelated to the model
>> generation. It seems to save the irrelevant object unnecessarily. In
>> my actual use case, I am running and saving many models in a loop that
>> each use a single large data.frame (that gets collapsed into a small
>> data.frame for estimation), so removing it isn't an option.
>>
>> In the case where the model exists in .GlobalEnv, everything is
>> peachy. So replicating whatever happens when saving the model that was
>> generated in .GlobalEnv at the return() stage of the function call
>> would fix this problem.
>>
>> I was referred to this list from r-bugs. First time r-devel poster.
>>
>> Hope this helps,
>>
>> Kendon
>>
>> ```
>> tmp_fun <- function(x){
>>   iris_big <- lapply(1:10000, function(x) iris)
>>   lm(Sepal.Length ~ Sepal.Width, data = iris)
>> }
>>
>> out <- tmp_fun(1)
>> object.size(out)
>> # 48008
>> save(out, file = "tmp.RData", compress = FALSE)
>> file.size("tmp.RData")
>> # 57196752 - way too big
>>
>> # Works fine when in .GlobalEnv
>> iris_big <- lapply(1:10000, function(x) iris)
>> out <- lm(Sepal.Length ~ Sepal.Width, data = iris)
>>
>> object.size(out)
>> # 48008
>> save(out, file = "tmp.RData", compress = FALSE)
>> file.size("tmp.RData")
>> # 16641 - good size.
>> ```
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>

	[[alternative HTML version deleted]]


From kmbell56 at gmail.com  Wed Jul 27 21:31:52 2016
From: kmbell56 at gmail.com (Kenny Bell)
Date: Wed, 27 Jul 2016 12:31:52 -0700
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <CAF8bMcYFWa6KJbTGLid3izHPP3RBEOw4h04TQJAT=xMLMxLCXQ@mail.gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
	<CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>
	<CAF8bMcYFWa6KJbTGLid3izHPP3RBEOw4h04TQJAT=xMLMxLCXQ@mail.gmail.com>
Message-ID: <CAPekMCnuVYeFTon_fCZerX6nOM18Fb_N3ZZOVSmgoyAr1hwXhw@mail.gmail.com>

Thanks so much for all this.

The first solution is what I'm going with as I want the terms object to
come along so that predict still works.

On Wed, Jul 27, 2016 at 12:28 PM, William Dunlap via R-devel <
r-devel at r-project.org> wrote:

> Another solution is to only save the parts of the model object that
> interest you.  As long as they don't include the formula (which is
> what drags along the environment it was created in), you will
> save space.  E.g.,
>
> tfun2 <- function(subset) {
>    junk <- 1:1e6
>    list(subset=subset, lm(Sepal.Length ~ Sepal.Width, data=iris,
> subset=subset)$coef)
> }
>
> saveSize(tfun2(1:4))
> #[1] 152
>
>
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> On Wed, Jul 27, 2016 at 11:19 AM, William Dunlap <wdunlap at tibco.com>
> wrote:
>
> > One way around this problem is to make a new environment whose
> > parent environment is .GlobalEnv and which contains only what the
> > the call to lm() requires and to compute lm() in that environment.
>  E.g.,
> >
> > tfun1 <- function (subset)
> > {
> >     junk <- 1:1e+06
> >     env <- new.env(parent = globalenv())
> >     env$subset <- subset
> >     with(env, lm(Sepal.Length ~ Sepal.Width, data = iris, subset =
> subset))
> > }
> > Then we get
> >    > saveSize(tfun1(1:4)) # see below for def. of saveSize
> >    [1] 910
> > instead of the 2129743 bytes in the save file when using the naive
> method.
> >
> > saveSize <- function (object) {
> >     tf <- tempfile(fileext = ".RData")
> >     on.exit(unlink(tf))
> >     save(object, file = tf)
> >     file.size(tf)
> > }
> >
> >
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com
> >
> > On Wed, Jul 27, 2016 at 10:48 AM, Kenny Bell <kmb56 at berkeley.edu> wrote:
> >
> >> In the below, I generate a model from an environment that isn't
> >> .GlobalEnv with a large object that is unrelated to the model
> >> generation. It seems to save the irrelevant object unnecessarily. In
> >> my actual use case, I am running and saving many models in a loop that
> >> each use a single large data.frame (that gets collapsed into a small
> >> data.frame for estimation), so removing it isn't an option.
> >>
> >> In the case where the model exists in .GlobalEnv, everything is
> >> peachy. So replicating whatever happens when saving the model that was
> >> generated in .GlobalEnv at the return() stage of the function call
> >> would fix this problem.
> >>
> >> I was referred to this list from r-bugs. First time r-devel poster.
> >>
> >> Hope this helps,
> >>
> >> Kendon
> >>
> >> ```
> >> tmp_fun <- function(x){
> >>   iris_big <- lapply(1:10000, function(x) iris)
> >>   lm(Sepal.Length ~ Sepal.Width, data = iris)
> >> }
> >>
> >> out <- tmp_fun(1)
> >> object.size(out)
> >> # 48008
> >> save(out, file = "tmp.RData", compress = FALSE)
> >> file.size("tmp.RData")
> >> # 57196752 - way too big
> >>
> >> # Works fine when in .GlobalEnv
> >> iris_big <- lapply(1:10000, function(x) iris)
> >> out <- lm(Sepal.Length ~ Sepal.Width, data = iris)
> >>
> >> object.size(out)
> >> # 48008
> >> save(out, file = "tmp.RData", compress = FALSE)
> >> file.size("tmp.RData")
> >> # 16641 - good size.
> >> ```
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From kyleb at metrumrg.com  Thu Jul 28 02:47:29 2016
From: kyleb at metrumrg.com (Kyle Baron)
Date: Wed, 27 Jul 2016 19:47:29 -0500
Subject: [Rd] Creating shared object with BASE in EXPORTS on Windows
Message-ID: <CAJ2Cw8S687CKcCZ3bLfpUFmc2mv-Ct3wUms3s+S0puOhWjYXdA@mail.gmail.com>

I am building shared objects on Windows system with BASE as a name in
the shared object.  When BASE appears under EXPORTS in tmp.def file, R
CMD SHLIB doesn't succeed.  This happens on Windows but not Mac or
Ubuntu.

Minimal examples:

////////////////////////////////////////
This code builds fine
////////////////////////////////////////
void base(int *nin, double *x) {
  int n = nin[0];
  int i;
  for (i=0; i<n; i++) x[i] = x[i] * x[i];
}

system("R CMD SHLIB foo.c --preclean")
c:/Rtools/mingw_64/bin/gcc  -I"C:/PROGRA~1/R/R-33~1.1/include"
-DNDEBUG     -I"d:/Compiler/gcc-4.9.3/local330/include"     -O2 -Wall
-std=gnu99 -mtune=core2 -c foo.c -o foo.o
c:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o foo.dll
tmp.def foo.o -Ld:/Compiler/gcc-4.9.3/local330/lib/x64
-Ld:/Compiler/gcc-4.9.3/local330/lib -LC:/PROGRA~1/R/R-33~1.1/bin/x64
-lR
////////////////////////////////////////


////////////////////////////////////////
Creating shared object from this code
doesn't succeed
(error: ld returned 1 exit status)
////////////////////////////////////////
void BASE(int *nin, double *x) {
  int n = nin[0];
  int i;
  for (i=0; i<n; i++) x[i] = x[i] * x[i];
}


system("R CMD SHLIB foo_base.c --preclean")
c:/Rtools/mingw_64/bin/gcc  -I"C:/PROGRA~1/R/R-33~1.1/include"
-DNDEBUG     -I"d:/Compiler/gcc-4.9.3/local330/include"     -O2 -Wall
-std=gnu99 -mtune=core2 -c foo_base.c -o foo_base.o
c:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o foo_base.dll
tmp.def foo_base.o -Ld:/Compiler/gcc-4.9.3/local330/lib/x64
-Ld:/Compiler/gcc-4.9.3/local330/lib -LC:/PROGRA~1/R/R-33~1.1/bin/x64
-lR

C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w64-mingw32/bin/ld.exe:
tmp.def:3: syntax error
C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w64-mingw32/bin/ld.exe:tmp.def:
file format not recognized; treating as linker script
C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w64-mingw32/bin/ld.exe:tmp.def:2:
syntax error
collect2.exe: error: ld returned 1 exit status

////////////////////////////////////////


I don't personally need to use the BASE name, but my package allows
users to write code that gets incorporated into a shared object and
unfortunately BASE is a common name to use in these models.  I'm not
sure if I should just (somehow) prohibit use of BASE or if there is
something else not right here.

If there is another solution, I hoping to avoid having to write
dllname-win.def file on Windows platforms (per
https://cran.r-project.org/doc/manuals/R-exts.html#Creating-shared-objects)
... it worked  but seems that the file needs to be in getwd(), which
I'd rather not do.

Any insight or advice would be appreciated.

Best Regards,
Kyle

-- 
Kyle Baron
Metrum Research Group
kyleb at metrumrg.com
www.metrumrg.com



sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows Server 2008 R2 x64 (build 7601) Service Pack 1

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets
[6] methods   base

loaded via a namespace (and not attached):
[1] tools_3.3.1


Rtools33.exe


From mli at pivotal.io  Thu Jul 28 10:35:51 2016
From: mli at pivotal.io (Ming Li)
Date: Thu, 28 Jul 2016 16:35:51 +0800
Subject: [Rd] Help: malloc/free deadlock in unsafe signal handler
	'Rf_onsigusr1'
Message-ID: <CA+F1ufkY+=gUBwGJFLdb+yCYyoqHHmQ3xJ_4zaiNo-084pmEoQ@mail.gmail.com>

Hi all,

I am working on a bug,  which running PLR on HAWQ. The process hung and
can't be terminated.

>From my investigation, it seems signal handler 'Rf_onsigusr1' trigger a
malloc/free deadlock.

The calling stack is below.

Thread 1 (Thread 0x7f4c93af48e0 (LWP 431263)):
#0  0x00007f4c9015805e in __lll_lock_wait_private () from /lib64/libc.so.6
#1  0x00007f4c900dd16b in _L_lock_9503 () from /lib64/libc.so.6
#2  0x00007f4c900da6a6 in malloc () from /lib64/libc.so.6
#3  0x00007f4c9008fb39 in _nl_make_l10nflist () from /lib64/libc.so.6
#4  0x00007f4c9008ddf5 in _nl_find_domain () from /lib64/libc.so.6
#5  0x00007f4c9008d6e0 in __dcigettext () from /lib64/libc.so.6
#6  0x00007f4c6fabcfe3 in Rf_onsigusr1 () from /usr/local/lib64/R/lib/libR.so
#7  <signal handler called>
#8  0x00007f4c9014079a in brk () from /lib64/libc.so.6
#9  0x00007f4c90140845 in sbrk () from /lib64/libc.so.6
#10 0x00007f4c900dd769 in __default_morecore () from /lib64/libc.so.6
#11 0x00007f4c900d87a2 in _int_free () from /lib64/libc.so.6
#12 0x0000000000b3ff24 in gp_free2 ()
#13 0x0000000000b356fc in AllocSetDelete ()
#14 0x0000000000b38391 in MemoryContextDeleteImpl ()
#15 0x000000000077c851 in ExecEndAgg ()
#16 0x00000000007592ad in ExecEndNode ()
#17 0x000000000075186c in ExecEndPlan ()
#18 0x000000000079dffa in ExecEndSubqueryScan ()
#19 0x000000000075921d in ExecEndNode ()
#20 0x000000000075186c in ExecEndPlan ()
#21 0x0000000000752565 in ExecutorEnd ()
#22 0x00000000006dd9bd in PortalCleanup ()
#23 0x0000000000b3f077 in AtCommit_Portals ()
#24 0x000000000051abe5 in CommitTransaction ()
#25 0x000000000051f1d5 in CommitTransactionCommand ()
#26 0x000000000099809e in PostgresMain ()
#27 0x00000000008f1031 in BackendStartup ()
#28 0x00000000008f70e0 in PostmasterMain ()
#29 0x00000000007f63da in main ()


I googled and found below info maybe useful to fix it: The best way to
avoid this kind of deadlock is to Call only asynchronous-safe functions
within signal handlers.

https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+asynchronous-safe+functions+within+signal+handlers

Thanks a lot.

	[[alternative HTML version deleted]]


From spencer.graves at prodsyse.com  Thu Jul 28 15:56:39 2016
From: spencer.graves at prodsyse.com (Spencer Graves)
Date: Thu, 28 Jul 2016 08:56:39 -0500
Subject: [Rd] plot(1:3) malfunctions with par(bg='transparent')
Message-ID: <dbcf8a27-bb0c-a54e-b184-8acb6cd8709a@prodsyse.com>

Hello, All:


       Try the following:


par(bg='transparent')
plot(1:3)


       I get two plots superimposed, one over twice the size it should 
be, much of it outside the device region.


       Thanks for all you do to make R such a useful tool.  People all 
over the world live better today, because R helps improve the 
effectiveness of data analysts.


       Spencer Graves


 > sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X 10.11.6 (El Capitan)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods
[7] base

loaded via a namespace (and not attached):
[1] rsconnect_0.4.3 tools_3.3.1


From maechler at stat.math.ethz.ch  Thu Jul 28 16:07:40 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 28 Jul 2016 16:07:40 +0200
Subject: [Rd] plot(1:3) malfunctions with par(bg='transparent')
In-Reply-To: <dbcf8a27-bb0c-a54e-b184-8acb6cd8709a@prodsyse.com>
References: <dbcf8a27-bb0c-a54e-b184-8acb6cd8709a@prodsyse.com>
Message-ID: <22426.4524.473254.326141@stat.math.ethz.ch>

>>>>> Spencer Graves <spencer.graves at prodsyse.com>
>>>>>     on Thu, 28 Jul 2016 08:56:39 -0500 writes:

    > Hello, All:
    > Try the following:

    > par(bg='transparent')
    > plot(1:3)

well,  "transparent" is even default... and I definitely can NOT
see a problem with the above.

    > I get two plots superimposed, one over twice the size it should 
    > be, much of it outside the device region.

and definitely not what you describe.

Can you give more details than the sessionInfo below ?

such as if you are running R inside Rstudio, or ??? 


    > Thanks for all you do to make R such a useful tool.  People all 
    > over the world live better today, because R helps improve the 
    > effectiveness of data analysts.


    > Spencer Graves


    >> sessionInfo()
    > R version 3.3.1 (2016-06-21)
    > Platform: x86_64-apple-darwin13.4.0 (64-bit)
    > Running under: OS X 10.11.6 (El Capitan)

    > locale:
    > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

    > attached base packages:
    > [1] stats     graphics  grDevices utils     datasets  methods
    > [7] base

    > loaded via a namespace (and not attached):
    > [1] rsconnect_0.4.3 tools_3.3.1

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From spencer.graves at prodsyse.com  Thu Jul 28 16:14:12 2016
From: spencer.graves at prodsyse.com (Spencer Graves)
Date: Thu, 28 Jul 2016 09:14:12 -0500
Subject: [Rd] plot(1:3) malfunctions with par(bg='transparent')
In-Reply-To: <22426.4524.473254.326141@stat.math.ethz.ch>
References: <dbcf8a27-bb0c-a54e-b184-8acb6cd8709a@prodsyse.com>
	<22426.4524.473254.326141@stat.math.ethz.ch>
Message-ID: <a418f0b0-b053-b9b2-1d4c-1d1e7357af0e@prodsyse.com>



On 7/28/2016 9:07 AM, Martin Maechler wrote:
>>>>>> Spencer Graves <spencer.graves at prodsyse.com>
>>>>>>      on Thu, 28 Jul 2016 08:56:39 -0500 writes:
>      > Hello, All:
>      > Try the following:
>
>      > par(bg='transparent')
>      > plot(1:3)
>
> well,  "transparent" is even default... and I definitely can NOT
> see a problem with the above.
>
>      > I get two plots superimposed, one over twice the size it should
>      > be, much of it outside the device region.
>
> and definitely not what you describe.
>
> Can you give more details than the sessionInfo below ?
>
> such as if you are running R inside Rstudio, or ???


Yes:  Inside RStudio.


You are correct:  It seems to be something with RStudio:  I just tested 
it with R in a Terminal, and this worked fine.


       Thanks.  That gives me more options for working around this problem.
       Spencer
>
>      > Thanks for all you do to make R such a useful tool.  People all
>      > over the world live better today, because R helps improve the
>      > effectiveness of data analysts.
>
>
>      > Spencer Graves
>
>
>      >> sessionInfo()
>      > R version 3.3.1 (2016-06-21)
>      > Platform: x86_64-apple-darwin13.4.0 (64-bit)
>      > Running under: OS X 10.11.6 (El Capitan)
>
>      > locale:
>      > [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
>      > attached base packages:
>      > [1] stats     graphics  grDevices utils     datasets  methods
>      > [7] base
>
>      > loaded via a namespace (and not attached):
>      > [1] rsconnect_0.4.3 tools_3.3.1
>
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel


From kevinushey at gmail.com  Fri Jul 29 20:37:04 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Fri, 29 Jul 2016 11:37:04 -0700
Subject: [Rd] strange behavior in 'inherits' check for loaded S4 object
In-Reply-To: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
References: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
Message-ID: <CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>

I have a small idea as to what's going on now; at least, why exporting
the class resolves this particular issue.

Firstly, when an S4 class is not exported, the associated
'.__C__<class>' object is not made part of the package environment.
For example, I see:

    > getAnywhere(".__C__SubMatrix")
    A single object matching '.__C__SubMatrix' was found
    It was found in the following places
      namespace:s4inherits
    with value
    < ... >

Note that the symbol is only discovered in the package namespace. When
the class is exported (e.g. with 'exportClasses(SubMatrix)' in the
NAMESPACE file), it's found both in 'package:s4inherits' and
'namespace:s4inherits'.

Secondly, when R attempts to resolve the superclasses for an S3 class,
the function 'methods:::.extendsForS3' is called. Tracing that code
eventually gets us here:

https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L255

Note that we reach this code path as the S3 class cache has not been
populated yet; ie, this code returns NULL:

https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L238-L240

So, the class hierarchy is looked up using this code:

    if(isTRUE(nzchar(package))) {
       whereP <- .requirePackage(package)
       value <- get0(cname, whereP, inherits = inherits)
    }

However, because the '.__C__SubMatrix' object is only made available
in the package's namespace, not within the package environment, it is
not resolved, and so lookup fails. (Presumedly, that lookup is done
when initially building a cache for S3 dispatch?) So, I wonder if that
class lookup should occur within the package's namespace instead?

Thanks for your time,
Kevin

On Sat, Jun 25, 2016 at 12:46 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> Hi,
>
> (sorry for the wall of text; the issue here appears to be rather complicated)
>
> I'm seeing a somewhat strange case where checking whether an S4 object
> inherits from a parent class defined from another package with
> 'inherits' fails if that object is materialized through a call to
> 'load'. That's a mouthful, so I've put together a relatively small
> reproducible example online here:
>
> https://github.com/kevinushey/s4inherits
>
> This package, 's4inherits', defines an S4 class, 'SubMatrix', that
> inherits from the 'dsyMatrix' class defined in the Matrix package.
> After installing the package, I run some simple tests:
>
> $ R -f test-save.R
>
>> library(s4inherits)
>> data <- SubMatrix(1)
>>
>> is(data, "SubMatrix")
> [1] TRUE
>> inherits(data, "SubMatrix")
> [1] TRUE
>>
>> is(data, "dsyMatrix")
> [1] TRUE
>> inherits(data, "dsyMatrix")
> [1] TRUE
>>
>> save(data, file = "test.RData")
>>
>
> All the inheritance checks report as we would expect. I check that the
> inheritance reports are as expected, then save that object to
> 'test.RData'. I then load that data file in a new R session and run
> the same checks:
>
> $ R -f test-load.R
>
>> library(methods)
>> load("test.RData")
>>
>> inherits(data, "SubMatrix")
> Loading required package: s4inherits
> [1] TRUE
>> is(data, "SubMatrix")
> [1] TRUE
>>
>> inherits(data, "dsyMatrix")
> [1] FALSE # (??)
>> is(data, "dsyMatrix")
> [1] TRUE
>>
>
> Note that R now reports that my loaded object does _not_ inherit from
> "dsyMatrix", yet this occurs only when checked with 'inherits()' --
> 'is' produces the expected result.
>
> I do not see the behavior if I explicitly load / attach the
> 's4inherits' package before loading the associated data file; it only
> occurs if the package namespace is loaded in response to loading the
> data object hosting a 'SubMatrix' object.
>
> More precisely, the package namespace is loaded when the promise
> hosting the data object is evaluated; that promise being generated by
> 'load', if I understand correctly. Somehow, evaluation of that promise
> within the call to 'inherits' in this very special case causes the
> unexpected behavior -- ie, if the first thing that you do with the
> loaded object is check its class with 'inherits', then you get this
> unexpected result.
>
> Even more, this behavior seems to go away if the 's4inherits' package
> explicitly exports the class -- however, you could imagine this class
> normally being internal to the package, and so it may be undesirable
> to export it.
>
> I checked a bit into the C code, and IIUC the check here looks up the
> class hierarchy in the R_S4_extends_table object defined in
> 'attrib.c', so it seems like that mapping is potentially not getting
> constructed with the full hierarchy (although hopefully someone with
> more knowledge of the S4 internals + interaction with S3 can
> elaborate).
>
> (FWIW, this was distilled from a case where S3 dispatch on a similar
> loaded S4 object failed, due to failure to resolve the class hierarchy
> for the S3 dispatch context.)
>
> Thanks,
> Kevin
>
> ---
>
> $ R --slave -e "utils::sessionInfo()"
> R Under development (unstable) (2016-06-13 r70769)
> Platform: x86_64-apple-darwin15.5.0 (64-bit)
> Running under: OS X 10.11.5 (El Capitan)


From kevinushey at gmail.com  Fri Jul 29 20:46:19 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Fri, 29 Jul 2016 11:46:19 -0700
Subject: [Rd] strange behavior in 'inherits' check for loaded S4 object
In-Reply-To: <CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>
References: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
	<CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>
Message-ID: <CAJXgQP3JeEouvyFz_4etkHfQ9kvyn+ARExdvswLyMtRuHz2miQ@mail.gmail.com>

I should add one more item that may be related here -- calling
'methods:::.requirePackage' returns a different result based on
whether the package namespace is already loaded or not.

If the package namespace is not loaded, the package is loaded and
attached, and the package environment is returned:

    > methods:::.requirePackage("digest")
    Loading required package: digest
    <environment: package:digest>
    attr(,"name")
    [1] "package:digest"
    attr(,"path")
    [1] "/Users/kevin/Library/R/3.3/library/digest"
    > "digest" %in% loadedNamespaces()
    [1] TRUE
    > "package:digest" %in% search()
    [1] TRUE

On the other hand, if the package namespace has already been loaded,
the package namespace is returned without attaching the package:

    > requireNamespace("digest")
    Loading required namespace: digest
    > methods:::.requirePackage("digest")
    <environment: namespace:digest>
    > "digest" %in% loadedNamespaces()
    [1] TRUE
    > "package:digest" %in% search()
    [1] FALSE

This may be intentional, but the behavior seems surprising and could
be responsible for the behavior outlined earlier.

Best,
Kevin

On Fri, Jul 29, 2016 at 11:37 AM, Kevin Ushey <kevinushey at gmail.com> wrote:
> I have a small idea as to what's going on now; at least, why exporting
> the class resolves this particular issue.
>
> Firstly, when an S4 class is not exported, the associated
> '.__C__<class>' object is not made part of the package environment.
> For example, I see:
>
>     > getAnywhere(".__C__SubMatrix")
>     A single object matching '.__C__SubMatrix' was found
>     It was found in the following places
>       namespace:s4inherits
>     with value
>     < ... >
>
> Note that the symbol is only discovered in the package namespace. When
> the class is exported (e.g. with 'exportClasses(SubMatrix)' in the
> NAMESPACE file), it's found both in 'package:s4inherits' and
> 'namespace:s4inherits'.
>
> Secondly, when R attempts to resolve the superclasses for an S3 class,
> the function 'methods:::.extendsForS3' is called. Tracing that code
> eventually gets us here:
>
> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L255
>
> Note that we reach this code path as the S3 class cache has not been
> populated yet; ie, this code returns NULL:
>
> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L238-L240
>
> So, the class hierarchy is looked up using this code:
>
>     if(isTRUE(nzchar(package))) {
>        whereP <- .requirePackage(package)
>        value <- get0(cname, whereP, inherits = inherits)
>     }
>
> However, because the '.__C__SubMatrix' object is only made available
> in the package's namespace, not within the package environment, it is
> not resolved, and so lookup fails. (Presumedly, that lookup is done
> when initially building a cache for S3 dispatch?) So, I wonder if that
> class lookup should occur within the package's namespace instead?
>
> Thanks for your time,
> Kevin
>
> On Sat, Jun 25, 2016 at 12:46 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
>> Hi,
>>
>> (sorry for the wall of text; the issue here appears to be rather complicated)
>>
>> I'm seeing a somewhat strange case where checking whether an S4 object
>> inherits from a parent class defined from another package with
>> 'inherits' fails if that object is materialized through a call to
>> 'load'. That's a mouthful, so I've put together a relatively small
>> reproducible example online here:
>>
>> https://github.com/kevinushey/s4inherits
>>
>> This package, 's4inherits', defines an S4 class, 'SubMatrix', that
>> inherits from the 'dsyMatrix' class defined in the Matrix package.
>> After installing the package, I run some simple tests:
>>
>> $ R -f test-save.R
>>
>>> library(s4inherits)
>>> data <- SubMatrix(1)
>>>
>>> is(data, "SubMatrix")
>> [1] TRUE
>>> inherits(data, "SubMatrix")
>> [1] TRUE
>>>
>>> is(data, "dsyMatrix")
>> [1] TRUE
>>> inherits(data, "dsyMatrix")
>> [1] TRUE
>>>
>>> save(data, file = "test.RData")
>>>
>>
>> All the inheritance checks report as we would expect. I check that the
>> inheritance reports are as expected, then save that object to
>> 'test.RData'. I then load that data file in a new R session and run
>> the same checks:
>>
>> $ R -f test-load.R
>>
>>> library(methods)
>>> load("test.RData")
>>>
>>> inherits(data, "SubMatrix")
>> Loading required package: s4inherits
>> [1] TRUE
>>> is(data, "SubMatrix")
>> [1] TRUE
>>>
>>> inherits(data, "dsyMatrix")
>> [1] FALSE # (??)
>>> is(data, "dsyMatrix")
>> [1] TRUE
>>>
>>
>> Note that R now reports that my loaded object does _not_ inherit from
>> "dsyMatrix", yet this occurs only when checked with 'inherits()' --
>> 'is' produces the expected result.
>>
>> I do not see the behavior if I explicitly load / attach the
>> 's4inherits' package before loading the associated data file; it only
>> occurs if the package namespace is loaded in response to loading the
>> data object hosting a 'SubMatrix' object.
>>
>> More precisely, the package namespace is loaded when the promise
>> hosting the data object is evaluated; that promise being generated by
>> 'load', if I understand correctly. Somehow, evaluation of that promise
>> within the call to 'inherits' in this very special case causes the
>> unexpected behavior -- ie, if the first thing that you do with the
>> loaded object is check its class with 'inherits', then you get this
>> unexpected result.
>>
>> Even more, this behavior seems to go away if the 's4inherits' package
>> explicitly exports the class -- however, you could imagine this class
>> normally being internal to the package, and so it may be undesirable
>> to export it.
>>
>> I checked a bit into the C code, and IIUC the check here looks up the
>> class hierarchy in the R_S4_extends_table object defined in
>> 'attrib.c', so it seems like that mapping is potentially not getting
>> constructed with the full hierarchy (although hopefully someone with
>> more knowledge of the S4 internals + interaction with S3 can
>> elaborate).
>>
>> (FWIW, this was distilled from a case where S3 dispatch on a similar
>> loaded S4 object failed, due to failure to resolve the class hierarchy
>> for the S3 dispatch context.)
>>
>> Thanks,
>> Kevin
>>
>> ---
>>
>> $ R --slave -e "utils::sessionInfo()"
>> R Under development (unstable) (2016-06-13 r70769)
>> Platform: x86_64-apple-darwin15.5.0 (64-bit)
>> Running under: OS X 10.11.5 (El Capitan)


From maechler at stat.math.ethz.ch  Sat Jul 30 17:07:31 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Sat, 30 Jul 2016 17:07:31 +0200
Subject: [Rd] strange behavior in 'inherits' check for loaded S4 object
In-Reply-To: <CAJXgQP3JeEouvyFz_4etkHfQ9kvyn+ARExdvswLyMtRuHz2miQ@mail.gmail.com>
References: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
	<CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>
	<CAJXgQP3JeEouvyFz_4etkHfQ9kvyn+ARExdvswLyMtRuHz2miQ@mail.gmail.com>
Message-ID: <22428.49843.816650.803324@stat.math.ethz.ch>

>>>>> Kevin Ushey <kevinushey at gmail.com>
>>>>>     on Fri, 29 Jul 2016 11:46:19 -0700 writes:

    > I should add one more item that may be related here --
    > calling 'methods:::.requirePackage' returns a different
    > result based on whether the package namespace is already
    > loaded or not.

    > If the package namespace is not loaded, the package is
    > loaded and attached, and the package environment is
    > returned:

    >> methods:::.requirePackage("digest")
    >     Loading required package: digest <environment:
    > package:digest> attr(,"name") [1] "package:digest"
    > attr(,"path") [1]
    > "/Users/kevin/Library/R/3.3/library/digest"
    >> "digest" %in% loadedNamespaces()
    >     [1] TRUE
    >> "package:digest" %in% search()
    >     [1] TRUE

    > On the other hand, if the package namespace has already
    > been loaded, the package namespace is returned without
    > attaching the package:

    >> requireNamespace("digest")
    >     Loading required namespace: digest
    >> methods:::.requirePackage("digest")
    >     <environment: namespace:digest>
    >> "digest" %in% loadedNamespaces()
    >     [1] TRUE
    >> "package:digest" %in% search()
    >     [1] FALSE

    > This may be intentional, but the behavior seems surprising
    > and could be responsible for the behavior outlined
    > earlier.

Yes, the behavior you outlined earlier is buggy, and I also have
seen similar bugous behavior for the case of non-exported
classes.

Part of it is historical:  The S4 code was mostly written before
namespaces were introduced into R;   I vaguely remember John
Chambers (the principal creator of S4) saying that he did not
intend the formal classes to be not visible... which in some
sense only contains the fact that he (or anybody) would not
think much about hidden objects before they were introduced.

Still, in the mean time, most of us have seen many cases where
we wanted to have "private" classes,  and many packages do have
them, too.... and they "mostly work" ;-)

In other words, I agree that it would be very desirable to get
to the bottom of this and fix such problems.

.requirePackage() is among the parts of the methods package code
which are quite delicate (and not much documented AFAIK, the hidden
.requirePackage() function is a good example!).

Delicate for at least two reasons:

1) They are not only used in crucial steps when "bootstrapping"
   the methods package ('methods' has to define its own S4
   generics, methods, and classes before the package "exists"),

1b) they are also used both when building and installing another
    'methods'-dependent package.  This could be called
    "bootstrapping another package".

2) they are also much used whenever S4 code (aka
   'methods'-dependent) packages are loaded and attached,
   so should be as fast as possible.
   I think you know that in recent years there have been
   considerable (and successful!) efforts to speedup package
   loading time, e.g. speeding up 'library(Matrix)' by about
   2 factors of 2, and changing such functions should not
   deteriorate package-load speed noticably.

Still, it is very desirable to improve / fix the issue:
After all this musings, I'd currently guess that it would be a
good idea if  .requirePackage()  would always return the
*namespace* of the corresponding package unless that does not
yet exist, as in the the 'bootstrap' situations above.
... or we'd add a new argument to .requirePackage() dealing with
that, or we use two functions:  .requirePackage() needed for
boostrapping, returning a package envionment, and
.requireNamespace() used to access class (and generic function!)
environments.

Well tested patches are very welcome; as is filing a formal
bug report with bugzilla (https://bugs.r-project.org/ ;
(if you have no "account" there, we will have to 
manually create one, for now, see the 'Note' on
https://www.r-project.org/bugs.html because of the spammer
attacks earlier this month ... but I see you, Kevin are
registered there),
or
just continuing your findings here.

Martin


    > Best, Kevin

    > On Fri, Jul 29, 2016 at 11:37 AM, Kevin Ushey
    > <kevinushey at gmail.com> wrote:
    >> I have a small idea as to what's going on now; at least,
    >> why exporting the class resolves this particular issue.
    >> 
    >> Firstly, when an S4 class is not exported, the associated
    >> '.__C__<class>' object is not made part of the package
    >> environment.  For example, I see:
    >> 
    >> > getAnywhere(".__C__SubMatrix") A single object matching
    >> '.__C__SubMatrix' was found It was found in the following
    >> places namespace:s4inherits with value < ... >
    >> 
    >> Note that the symbol is only discovered in the package
    >> namespace. When the class is exported (e.g. with
    >> 'exportClasses(SubMatrix)' in the NAMESPACE file), it's
    >> found both in 'package:s4inherits' and
    >> 'namespace:s4inherits'.
    >> 
    >> Secondly, when R attempts to resolve the superclasses for
    >> an S3 class, the function 'methods:::.extendsForS3' is
    >> called. Tracing that code eventually gets us here:
    >> 
    >> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L255
    >> 
    >> Note that we reach this code path as the S3 class cache
    >> has not been populated yet; ie, this code returns NULL:
    >> 
    >> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L238-L240
    >> 
    >> So, the class hierarchy is looked up using this code:
    >> 
    >> if(isTRUE(nzchar(package))) { whereP <-
    >> .requirePackage(package) value <- get0(cname, whereP,
    >> inherits = inherits) }
    >> 
    >> However, because the '.__C__SubMatrix' object is only
    >> made available in the package's namespace, not within the
    >> package environment, it is not resolved, and so lookup
    >> fails. (Presumedly, that lookup is done when initially
    >> building a cache for S3 dispatch?) So, I wonder if that
    >> class lookup should occur within the package's namespace
    >> instead?
    >> 
    >> Thanks for your time, Kevin
    >> 
    >> On Sat, Jun 25, 2016 at 12:46 PM, Kevin Ushey
    >> <kevinushey at gmail.com> wrote:
    >>> Hi,
    >>> 
    >>> (sorry for the wall of text; the issue here appears to
    >>> be rather complicated)
    >>> 
    >>> I'm seeing a somewhat strange case where checking
    >>> whether an S4 object inherits from a parent class
    >>> defined from another package with 'inherits' fails if
    >>> that object is materialized through a call to
    >>> 'load'. That's a mouthful, so I've put together a
    >>> relatively small reproducible example online here:
    >>> 
    >>> https://github.com/kevinushey/s4inherits
    >>> 
    >>> This package, 's4inherits', defines an S4 class,
    >>> 'SubMatrix', that inherits from the 'dsyMatrix' class
    >>> defined in the Matrix package.  After installing the
    >>> package, I run some simple tests:
    >>> 
    >>> $ R -f test-save.R
    >>> 
    >>>> library(s4inherits) data <- SubMatrix(1)
    >>>> 
    >>>> is(data, "SubMatrix")
    >>> [1] TRUE
    >>>> inherits(data, "SubMatrix")
    >>> [1] TRUE
    >>>> 
    >>>> is(data, "dsyMatrix")
    >>> [1] TRUE
    >>>> inherits(data, "dsyMatrix")
    >>> [1] TRUE
    >>>> 
    >>>> save(data, file = "test.RData")
    >>>> 
    >>> 
    >>> All the inheritance checks report as we would expect. I
    >>> check that the inheritance reports are as expected, then
    >>> save that object to 'test.RData'. I then load that data
    >>> file in a new R session and run the same checks:
    >>> 
    >>> $ R -f test-load.R
    >>> 
    >>>> library(methods) load("test.RData")
    >>>> 
    >>>> inherits(data, "SubMatrix")
    >>> Loading required package: s4inherits [1] TRUE
    >>>> is(data, "SubMatrix")
    >>> [1] TRUE
    >>>> 
    >>>> inherits(data, "dsyMatrix")
    >>> [1] FALSE # (??)
    >>>> is(data, "dsyMatrix")
    >>> [1] TRUE
    >>>> 
    >>> 
    >>> Note that R now reports that my loaded object does _not_
    >>> inherit from "dsyMatrix", yet this occurs only when
    >>> checked with 'inherits()' -- 'is' produces the expected
    >>> result.
    >>> 
    >>> I do not see the behavior if I explicitly load / attach
    >>> the 's4inherits' package before loading the associated
    >>> data file; it only occurs if the package namespace is
    >>> loaded in response to loading the data object hosting a
    >>> 'SubMatrix' object.
    >>> 
    >>> More precisely, the package namespace is loaded when the
    >>> promise hosting the data object is evaluated; that
    >>> promise being generated by 'load', if I understand
    >>> correctly. Somehow, evaluation of that promise within
    >>> the call to 'inherits' in this very special case causes
    >>> the unexpected behavior -- ie, if the first thing that
    >>> you do with the loaded object is check its class with
    >>> 'inherits', then you get this unexpected result.
    >>> 
    >>> Even more, this behavior seems to go away if the
    >>> 's4inherits' package explicitly exports the class --
    >>> however, you could imagine this class normally being
    >>> internal to the package, and so it may be undesirable to
    >>> export it.
    >>> 
    >>> I checked a bit into the C code, and IIUC the check here
    >>> looks up the class hierarchy in the R_S4_extends_table
    >>> object defined in 'attrib.c', so it seems like that
    >>> mapping is potentially not getting constructed with the
    >>> full hierarchy (although hopefully someone with more
    >>> knowledge of the S4 internals + interaction with S3 can
    >>> elaborate).
    >>> 
    >>> (FWIW, this was distilled from a case where S3 dispatch
    >>> on a similar loaded S4 object failed, due to failure to
    >>> resolve the class hierarchy for the S3 dispatch
    >>> context.)
    >>> 
    >>> Thanks, Kevin
    >>> 
    >>> ---
    >>> 
    >>> $ R --slave -e "utils::sessionInfo()" R Under
    >>> development (unstable) (2016-06-13 r70769) Platform:
    >>> x86_64-apple-darwin15.5.0 (64-bit) Running under: OS X
    >>> 10.11.5 (El Capitan)

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From jmc at r-project.org  Sun Jul 31 14:12:15 2016
From: jmc at r-project.org (John Chambers)
Date: Sun, 31 Jul 2016 08:12:15 -0400
Subject: [Rd] strange behavior in 'inherits' check for loaded S4 object
In-Reply-To: <22428.49843.816650.803324@stat.math.ethz.ch>
References: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
	<CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>
	<CAJXgQP3JeEouvyFz_4etkHfQ9kvyn+ARExdvswLyMtRuHz2miQ@mail.gmail.com>
	<22428.49843.816650.803324@stat.math.ethz.ch>
Message-ID: <92CB0846-DD2C-48FF-8BCD-376A1B75A30B@r-project.org>

(Just returning from the "wilds" of Canada, so not able to comment on the specifics, but ...)

There is a basic point about generic functions that may be related to the "private" class question and my earlier remarks that Martin alluded to.

R (and S4 before it)  allows packages to define methods for a generic function in another package.  Say, for plot() in graphics.

The current model is that the generic plot() remains one function, specifically a generic associated with the graphics package.

Package A might define a method corresponding to one or two classes defined in that package.  When A is loaded, those methods are added to the table for plot() in the current session.

Now suppose a user calls a function, foo(), in package B, and that foo() in turn calls plot().  This is the same plot() function, and in particular will include the methods supplied from package A.

This is regardless of the two packages having any overt connection.  Also, the methods are accepted by the generic function regardless of whether the class is explicitly exported or not.  In this sense, classes cannot be entirely private if methods are defined for a non-local function.  Namespaces are not directly relevant.

Whether this can lead to strange behavior isn't clear, and if so, is it a sign that something undesirable was done in the particular example?  (In Extending R, I suggested a "right to write methods" that  would discourage a package from having methods unless it owned the function or some of the classes.)

R could adopt a different model for generic functions, where a package that defined a method for a non-exported class would create a "local" version of the generic, but that would likely raise some other issues.

But seems like a useful topic for discussion.

John

On Jul 30, 2016, at 11:07 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

>>>>>> Kevin Ushey <kevinushey at gmail.com>
>>>>>>    on Fri, 29 Jul 2016 11:46:19 -0700 writes:
> 
>> I should add one more item that may be related here --
>> calling 'methods:::.requirePackage' returns a different
>> result based on whether the package namespace is already
>> loaded or not.
> 
>> If the package namespace is not loaded, the package is
>> loaded and attached, and the package environment is
>> returned:
> 
>>> methods:::.requirePackage("digest")
>>    Loading required package: digest <environment:
>> package:digest> attr(,"name") [1] "package:digest"
>> attr(,"path") [1]
>> "/Users/kevin/Library/R/3.3/library/digest"
>>> "digest" %in% loadedNamespaces()
>>    [1] TRUE
>>> "package:digest" %in% search()
>>    [1] TRUE
> 
>> On the other hand, if the package namespace has already
>> been loaded, the package namespace is returned without
>> attaching the package:
> 
>>> requireNamespace("digest")
>>    Loading required namespace: digest
>>> methods:::.requirePackage("digest")
>>    <environment: namespace:digest>
>>> "digest" %in% loadedNamespaces()
>>    [1] TRUE
>>> "package:digest" %in% search()
>>    [1] FALSE
> 
>> This may be intentional, but the behavior seems surprising
>> and could be responsible for the behavior outlined
>> earlier.
> 
> Yes, the behavior you outlined earlier is buggy, and I also have
> seen similar bugous behavior for the case of non-exported
> classes.
> 
> Part of it is historical:  The S4 code was mostly written before
> namespaces were introduced into R;   I vaguely remember John
> Chambers (the principal creator of S4) saying that he did not
> intend the formal classes to be not visible... which in some
> sense only contains the fact that he (or anybody) would not
> think much about hidden objects before they were introduced.
> 
> Still, in the mean time, most of us have seen many cases where
> we wanted to have "private" classes,  and many packages do have
> them, too.... and they "mostly work" ;-)
> 
> In other words, I agree that it would be very desirable to get
> to the bottom of this and fix such problems.
> 
> .requirePackage() is among the parts of the methods package code
> which are quite delicate (and not much documented AFAIK, the hidden
> .requirePackage() function is a good example!).
> 
> Delicate for at least two reasons:
> 
> 1) They are not only used in crucial steps when "bootstrapping"
>   the methods package ('methods' has to define its own S4
>   generics, methods, and classes before the package "exists"),
> 
> 1b) they are also used both when building and installing another
>    'methods'-dependent package.  This could be called
>    "bootstrapping another package".
> 
> 2) they are also much used whenever S4 code (aka
>   'methods'-dependent) packages are loaded and attached,
>   so should be as fast as possible.
>   I think you know that in recent years there have been
>   considerable (and successful!) efforts to speedup package
>   loading time, e.g. speeding up 'library(Matrix)' by about
>   2 factors of 2, and changing such functions should not
>   deteriorate package-load speed noticably.
> 
> Still, it is very desirable to improve / fix the issue:
> After all this musings, I'd currently guess that it would be a
> good idea if  .requirePackage()  would always return the
> *namespace* of the corresponding package unless that does not
> yet exist, as in the the 'bootstrap' situations above.
> ... or we'd add a new argument to .requirePackage() dealing with
> that, or we use two functions:  .requirePackage() needed for
> boostrapping, returning a package envionment, and
> .requireNamespace() used to access class (and generic function!)
> environments.
> 
> Well tested patches are very welcome; as is filing a formal
> bug report with bugzilla (https://bugs.r-project.org/ ;
> (if you have no "account" there, we will have to 
> manually create one, for now, see the 'Note' on
> https://www.r-project.org/bugs.html because of the spammer
> attacks earlier this month ... but I see you, Kevin are
> registered there),
> or
> just continuing your findings here.
> 
> Martin
> 
> 
>> Best, Kevin
> 
>> On Fri, Jul 29, 2016 at 11:37 AM, Kevin Ushey
>> <kevinushey at gmail.com> wrote:
>>> I have a small idea as to what's going on now; at least,
>>> why exporting the class resolves this particular issue.
>>> 
>>> Firstly, when an S4 class is not exported, the associated
>>> '.__C__<class>' object is not made part of the package
>>> environment.  For example, I see:
>>> 
>>>> getAnywhere(".__C__SubMatrix") A single object matching
>>> '.__C__SubMatrix' was found It was found in the following
>>> places namespace:s4inherits with value < ... >
>>> 
>>> Note that the symbol is only discovered in the package
>>> namespace. When the class is exported (e.g. with
>>> 'exportClasses(SubMatrix)' in the NAMESPACE file), it's
>>> found both in 'package:s4inherits' and
>>> 'namespace:s4inherits'.
>>> 
>>> Secondly, when R attempts to resolve the superclasses for
>>> an S3 class, the function 'methods:::.extendsForS3' is
>>> called. Tracing that code eventually gets us here:
>>> 
>>> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L255
>>> 
>>> Note that we reach this code path as the S3 class cache
>>> has not been populated yet; ie, this code returns NULL:
>>> 
>>> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L238-L240
>>> 
>>> So, the class hierarchy is looked up using this code:
>>> 
>>> if(isTRUE(nzchar(package))) { whereP <-
>>> .requirePackage(package) value <- get0(cname, whereP,
>>> inherits = inherits) }
>>> 
>>> However, because the '.__C__SubMatrix' object is only
>>> made available in the package's namespace, not within the
>>> package environment, it is not resolved, and so lookup
>>> fails. (Presumedly, that lookup is done when initially
>>> building a cache for S3 dispatch?) So, I wonder if that
>>> class lookup should occur within the package's namespace
>>> instead?
>>> 
>>> Thanks for your time, Kevin
>>> 
>>> On Sat, Jun 25, 2016 at 12:46 PM, Kevin Ushey
>>> <kevinushey at gmail.com> wrote:
>>>> Hi,
>>>> 
>>>> (sorry for the wall of text; the issue here appears to
>>>> be rather complicated)
>>>> 
>>>> I'm seeing a somewhat strange case where checking
>>>> whether an S4 object inherits from a parent class
>>>> defined from another package with 'inherits' fails if
>>>> that object is materialized through a call to
>>>> 'load'. That's a mouthful, so I've put together a
>>>> relatively small reproducible example online here:
>>>> 
>>>> https://github.com/kevinushey/s4inherits
>>>> 
>>>> This package, 's4inherits', defines an S4 class,
>>>> 'SubMatrix', that inherits from the 'dsyMatrix' class
>>>> defined in the Matrix package.  After installing the
>>>> package, I run some simple tests:
>>>> 
>>>> $ R -f test-save.R
>>>> 
>>>>> library(s4inherits) data <- SubMatrix(1)
>>>>> 
>>>>> is(data, "SubMatrix")
>>>> [1] TRUE
>>>>> inherits(data, "SubMatrix")
>>>> [1] TRUE
>>>>> 
>>>>> is(data, "dsyMatrix")
>>>> [1] TRUE
>>>>> inherits(data, "dsyMatrix")
>>>> [1] TRUE
>>>>> 
>>>>> save(data, file = "test.RData")
>>>>> 
>>>> 
>>>> All the inheritance checks report as we would expect. I
>>>> check that the inheritance reports are as expected, then
>>>> save that object to 'test.RData'. I then load that data
>>>> file in a new R session and run the same checks:
>>>> 
>>>> $ R -f test-load.R
>>>> 
>>>>> library(methods) load("test.RData")
>>>>> 
>>>>> inherits(data, "SubMatrix")
>>>> Loading required package: s4inherits [1] TRUE
>>>>> is(data, "SubMatrix")
>>>> [1] TRUE
>>>>> 
>>>>> inherits(data, "dsyMatrix")
>>>> [1] FALSE # (??)
>>>>> is(data, "dsyMatrix")
>>>> [1] TRUE
>>>>> 
>>>> 
>>>> Note that R now reports that my loaded object does _not_
>>>> inherit from "dsyMatrix", yet this occurs only when
>>>> checked with 'inherits()' -- 'is' produces the expected
>>>> result.
>>>> 
>>>> I do not see the behavior if I explicitly load / attach
>>>> the 's4inherits' package before loading the associated
>>>> data file; it only occurs if the package namespace is
>>>> loaded in response to loading the data object hosting a
>>>> 'SubMatrix' object.
>>>> 
>>>> More precisely, the package namespace is loaded when the
>>>> promise hosting the data object is evaluated; that
>>>> promise being generated by 'load', if I understand
>>>> correctly. Somehow, evaluation of that promise within
>>>> the call to 'inherits' in this very special case causes
>>>> the unexpected behavior -- ie, if the first thing that
>>>> you do with the loaded object is check its class with
>>>> 'inherits', then you get this unexpected result.
>>>> 
>>>> Even more, this behavior seems to go away if the
>>>> 's4inherits' package explicitly exports the class --
>>>> however, you could imagine this class normally being
>>>> internal to the package, and so it may be undesirable to
>>>> export it.
>>>> 
>>>> I checked a bit into the C code, and IIUC the check here
>>>> looks up the class hierarchy in the R_S4_extends_table
>>>> object defined in 'attrib.c', so it seems like that
>>>> mapping is potentially not getting constructed with the
>>>> full hierarchy (although hopefully someone with more
>>>> knowledge of the S4 internals + interaction with S3 can
>>>> elaborate).
>>>> 
>>>> (FWIW, this was distilled from a case where S3 dispatch
>>>> on a similar loaded S4 object failed, due to failure to
>>>> resolve the class hierarchy for the S3 dispatch
>>>> context.)
>>>> 
>>>> Thanks, Kevin
>>>> 
>>>> ---
>>>> 
>>>> $ R --slave -e "utils::sessionInfo()" R Under
>>>> development (unstable) (2016-06-13 r70769) Platform:
>>>> x86_64-apple-darwin15.5.0 (64-bit) Running under: OS X
>>>> 10.11.5 (El Capitan)
> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


