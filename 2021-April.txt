From @purd|e@@ @end|ng |rom gm@||@com  Mon Apr  5 22:57:18 2021
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 6 Apr 2021 08:57:18 +1200
Subject: [Rd] python-based examples within core-package help files
Message-ID: <CAB8pepyMUbsjXgcw+N7MO9TTfkM35BCseDUY-K9dYoNDMhr2ig@mail.gmail.com>

I just noticed the following:
(Within the help file for methods::is).

supers <- extends("PythonInterface")
superRelations <- extends("PythonInterface", fullInfo = TRUE)

I was wondering:
Could we please *not* have python-based examples within core help files.

Furthermore, this example has no obvious relevance to mathematical or
statistical subject matter.

Maybe it could be rewritten to use the Matrix package.
Which would be 1000x better.
:)

I'm happy to add that to my todo list, if no one else volunteers...


From x|@oy@n@yu @end|ng |rom gm@||@com  Tue Apr  6 00:27:10 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Mon, 5 Apr 2021 18:27:10 -0400
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
 <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
Message-ID: <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>

Thank you all for your help.
We embedded R in our program and found the memory in the process
accumulated while our expectation is that the memory will go down after
each R evaluation.
I started to write a test program with only a few lines of R embedded codes
and found the memory never went down even after R library is unloaded.
Please find more details in the readme and test program at
https://github.com/xiaoyanyuvt/RMemTest

Thanks,
Xiaoyan


On Fri, Mar 19, 2021 at 2:21 PM Lionel Henry <lionel at rstudio.com> wrote:

> > Still, memory leaks are possible if the program forgets about a
> > pointer to some piece of memory no longer needed, and keeps that
> > pointer in say some global structure. Such memory leaks would not be
> > found using address sanitizer.
>
> We had a few cases of this in the past. Given the difficulty of
> tracing the leaking references, we wrote this package for taking
> snapshots of the R heap and finding dominators and shortest paths
> between nodes:
>
> Repo: https://github.com/r-lib/memtools
> Vignette: https://memtools.r-lib.org/articles/memtools.html
>
> One issue that complicates taking snapshots is that R doesn't expose
> the GC roots. In practice, only the precious list is needed I think.
> Would you consider a patch that allows retrieving the precious list
> for debugging purposes via a `.Internal()` call?
>
> Best,
> Lionel
>
>
> On 3/15/21, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> > On 3/12/21 7:43 PM, xiaoyan yu wrote:
> >> I am writing C++ program based on R extensions and also try to test the
> >> program with google address sanitizer.
> >>
> >> I thought if I don't protect the variable from the allocation API such
> as
> >> Rf_allocVector, there will be a memory leak. However, the address
> >> sanitizer
> >> didn't report it. Is my understanding correct? Or I will see the memory
> >> leak only if I compile R source code with the address sanitizer.
> >
> > Yes, you should use special options for compilation and linking to use
> > address sanitizer. See Writing R Extensions, section 4.3.3.
> >
> > If you allocate an R object using Rf_allocVector(), but don't protect
> > it, it means this object is available for the garbage collector to
> > reclaim. So it is not a memory leak.
> >
> > Memory leaks with a garbage collector are much less common than without,
> > because if the program loses a pointer to some piece of memory, that
> > piece will automatically be reclaimed (not leaked). Still, memory leaks
> > are possible if the program forgets about a pointer to some piece of
> > memory no longer needed, and keeps that pointer in say some global
> > structure. Such memory leaks would not be found using address sanitizer.
> >
> > Address sanitizer/Undefined behavior sanitizer can sometimes find errors
> > caused by that the program forgets to protect an R object, but this is
> > relatively rare, as they don't understand R heap specifically, so you
> > cannot assume that if you create such example, the error will always be
> > found.
> >
> > Best
> > Tomas
> >
> >>
> >>   Please help!
> >>
> >> Thanks,
> >> Xiaoyan
> >>
> >>      [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Tue Apr  6 00:53:25 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 5 Apr 2021 17:53:25 -0500
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
 <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
 <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>
Message-ID: <24683.38117.444899.558821@rob.eddelbuettel.com>


On 5 April 2021 at 18:27, xiaoyan yu wrote:
| Thank you all for your help.
| We embedded R in our program and found the memory in the process
| accumulated while our expectation is that the memory will go down after
| each R evaluation.
| I started to write a test program with only a few lines of R embedded codes
| and found the memory never went down even after R library is unloaded.
| Please find more details in the readme and test program at
| https://github.com/xiaoyanyuvt/RMemTest

You may find the projects RInside (for easily embedding R inside C++
programs) and littler (also embedding R, but using C only, for use in
lightweight cmdline applications) useful.  Those have existed for, give or
take, 10 and 15 years and have not proven to show memory leaks so I feel the
burden of proof is still on you.

Also I got your program to compile (after making the 'makefile' a bit more
general, and fixing two things upsetting current C++ compilers) but I am not
sure we really see memory consumption:

   edd at rob:~$ ps -fv $(pgrep -x foo)
       PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
   1456192 pts/9    S+     0:00      0     1  5890  1768  0.0 ./foo
   edd at rob:~$ ps -fv $(pgrep -x foo)
       PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
   1456192 pts/9    Sl+    0:00      0     1 1617174 9896  0.0 ./foo
   edd at rob:~$ 

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From x|@oy@n@yu @end|ng |rom gm@||@com  Tue Apr  6 02:28:17 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Mon, 5 Apr 2021 20:28:17 -0400
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <24683.38117.444899.558821@rob.eddelbuettel.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
 <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
 <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>
 <24683.38117.444899.558821@rob.eddelbuettel.com>
Message-ID: <CANjVfJ3UpC9NdMR3M0SMV9WU2u8GiEXqyz5fQ=tHpKa-7-LZAw@mail.gmail.com>

Thanks for your quick response. It is also surprising for us to notice the
memory accumulation when running our program since it has been years since
we developed our program.
Here is the memory status I observed from 15384k to 234208k to 242024k
without decreasing when running the test program.
[Before the first ENTER]$ps -aux | grep foo
xy 16985  0.0  0.0  *15384*  1312 pts/0    S+   00:09   0:00 ./foo
[After the first ENTER ]$ps -aux | grep foo
xy 16985  0.4  0.2 *234208* 42104 pts/0    S+   00:09   0:00 ./foo
[After the second ENTER and also before the program exit]$ps -aux | grep foo
xy    16985  0.1  0.2 *242024* 42244 pts/0    S+   00:09   0:00 ./foo

The test program is just a small simplified portion of our program. We
observed even more memory in use when running our program. We would like to
try to understand more of the memory life cycle of the embedded R.

Thanks,
Xiaoyan


On Mon, Apr 5, 2021 at 6:53 PM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 5 April 2021 at 18:27, xiaoyan yu wrote:
> | Thank you all for your help.
> | We embedded R in our program and found the memory in the process
> | accumulated while our expectation is that the memory will go down after
> | each R evaluation.
> | I started to write a test program with only a few lines of R embedded
> codes
> | and found the memory never went down even after R library is unloaded.
> | Please find more details in the readme and test program at
> | https://github.com/xiaoyanyuvt/RMemTest
>
> You may find the projects RInside (for easily embedding R inside C++
> programs) and littler (also embedding R, but using C only, for use in
> lightweight cmdline applications) useful.  Those have existed for, give or
> take, 10 and 15 years and have not proven to show memory leaks so I feel
> the
> burden of proof is still on you.
>
> Also I got your program to compile (after making the 'makefile' a bit more
> general, and fixing two things upsetting current C++ compilers) but I am
> not
> sure we really see memory consumption:
>
>    edd at rob:~$ ps -fv $(pgrep -x foo)
>        PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
>    1456192 pts/9    S+     0:00      0     1  5890  1768  0.0 ./foo
>    edd at rob:~$ ps -fv $(pgrep -x foo)
>        PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
>    1456192 pts/9    Sl+    0:00      0     1 1617174 9896  0.0 ./foo
>    edd at rob:~$
>
> Dirk
>
> --
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Wed Apr  7 10:00:05 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Wed, 7 Apr 2021 08:00:05 +0000
Subject: [Rd] SVG Error on Windows if Multiplication Character Present
Message-ID: <SYBPR01MB4761553D4E32733B1A9ABF17CD759@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

The example below fails on Windows with Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y: Metric information not available for this family/device.

library(ggplot2)
aPlot <- ggplot(ToothGrowth, aes(x = factor(dose), y = len)) + geom_boxplot() +
         ggtitle("Test", subtitle = ggplot2::expr(paste("p", " = ", "6.23", " ? ", "10"^"-5"))) 
svg("test.svg"); aPlot; dev.off();

but there is no such problem on a Debian Linux server. The plot in Windows appears fine in an R graphics window. The error only occurs when exported as an SVG file. Using %*% instead of ? avoids the error but it's perhaps worth mentioning in case it could be easily handled by R.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From r-deve| @end|ng |rom @ker@t|ng@de  Wed Apr  7 11:28:35 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 07 Apr 2021 11:28:35 +0200 (CEST)
Subject: [Rd] memory consumption of nested (un)serialize of sys.frames()
Message-ID: <E1lU4UF-00068N-J1@rmmprod07.runbox>

Hi,

please consider the following minimal reproducible example:

Create a new R package which just contains the following two (exported) objects:


crash_dumps <- new.env()

f <- function() {
  x <- runif(1e5)
  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
  assign("last.dump", dump, crash_dumps)
}


WARNING: the following will probably eat all your RAM!

Attach this package and run:

for (i in 1:100) {
  print(i)
  f()
}

You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.

I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!

Regards,
Andreas


Background:
In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.

Some more observations:
- If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
- If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
- If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
- If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:

crash_dumps <- list()

f <- function() {
  x <- runif(1e5)
  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
  crash_dumps[["last.dump"]] <- dump
  assignInMyNamespace("crash_dumps", crash_dumps)
}


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr  7 15:28:00 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 7 Apr 2021 08:28:00 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU4UF-00068N-J1@rmmprod07.runbox>
References: <E1lU4UF-00068N-J1@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.2104070821550.24594@luke-Latitude-7480>


On Wed, 7 Apr 2021, Andreas Kersting wrote:

> Hi,
>
> please consider the following minimal reproducible example:
>
> Create a new R package which just contains the following two (exported) objects:

I would not expect this behavior and I don't see it when I make such a
package (in R 4.0.3 or R-devel on Ubuntu).  You will need to provide a
more complete reproducible example if you want help with what you are
trying to do; also sessionInfo() would help.

Best,

luke

>
>
> crash_dumps <- new.env()
>
> f <- function() {
>  x <- runif(1e5)
>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>  assign("last.dump", dump, crash_dumps)
> }
>
>
> WARNING: the following will probably eat all your RAM!
>
> Attach this package and run:
>
> for (i in 1:100) {
>  print(i)
>  f()
> }
>
> You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.
>
> I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!
>
> Regards,
> Andreas
>
>
> Background:
> In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.
>
> Some more observations:
> - If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
> - If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
> - If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
> - If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:
>
> crash_dumps <- list()
>
> f <- function() {
>  x <- runif(1e5)
>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>  crash_dumps[["last.dump"]] <- dump
>  assignInMyNamespace("crash_dumps", crash_dumps)
> }
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From r-deve| @end|ng |rom @ker@t|ng@de  Wed Apr  7 16:06:23 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 07 Apr 2021 16:06:23 +0200 (CEST)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <alpine.DEB.2.21.2104070821550.24594@luke-Latitude-7480>
Message-ID: <E1lU8p6-0005bY-1M@rmmprod07.runbox>

Hi Luke,

Please see https://github.com/akersting/dumpTest for the package.

Here a session showing my issue:

> library(dumpTest)
> sessionInfo()
R version 4.0.5 (2021-03-31)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux 10 (buster)

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] dumpTest_0.1.0

loaded via a namespace (and not attached):
[1] compiler_4.0.5
> for (i in 1:100) {
+   print(i)
+   print(system.time(f()))
+ }
[1] 1
   user  system elapsed 
  0.028   0.004   0.034 
[1] 2
   user  system elapsed 
  0.067   0.008   0.075 
[1] 3
   user  system elapsed 
  0.176   0.000   0.176 
[1] 4
   user  system elapsed 
  0.335   0.012   0.349 
[1] 5
   user  system elapsed 
  0.745   0.023   0.770 
[1] 6
   user  system elapsed 
  1.495   0.060   1.572 
[1] 7
   user  system elapsed 
  2.902   0.136   3.040 
[1] 8
   user  system elapsed 
  5.753   0.272   6.034 
[1] 9
   user  system elapsed 
 11.807   0.708  12.597 
[1] 10
^C
Timing stopped at: 6.638 0.549 7.214

I had to interrupt in iteration 10 because I was running low on RAM.

Regards,
Andreas

2021-04-07 15:28 GMT+02:00 luke-tierney at uiowa.edu:
> On Wed, 7 Apr 2021, Andreas Kersting wrote:
> 
>> Hi,
>>
>> please consider the following minimal reproducible example:
>>
>> Create a new R package which just contains the following two (exported) objects:
> 
> I would not expect this behavior and I don't see it when I make such a
> package (in R 4.0.3 or R-devel on Ubuntu).  You will need to provide a
> more complete reproducible example if you want help with what you are
> trying to do; also sessionInfo() would help.
> 
> Best,
> 
> luke
> 
>>
>>
>> crash_dumps <- new.env()
>>
>> f <- function() {
>>  x <- runif(1e5)
>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>  assign("last.dump", dump, crash_dumps)
>> }
>>
>>
>> WARNING: the following will probably eat all your RAM!
>>
>> Attach this package and run:
>>
>> for (i in 1:100) {
>>  print(i)
>>  f()
>> }
>>
>> You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.
>>
>> I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!
>>
>> Regards,
>> Andreas
>>
>>
>> Background:
>> In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.
>>
>> Some more observations:
>> - If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
>> - If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
>> - If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
>> - If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:
>>
>> crash_dumps <- list()
>>
>> f <- function() {
>>  x <- runif(1e5)
>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>  crash_dumps[["last.dump"]] <- dump
>>  assignInMyNamespace("crash_dumps", crash_dumps)
>> }
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> 

From edd @end|ng |rom deb|@n@org  Wed Apr  7 16:20:47 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 7 Apr 2021 09:20:47 -0500
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU8p6-0005bY-1M@rmmprod07.runbox>
References: <alpine.DEB.2.21.2104070821550.24594@luke-Latitude-7480>
 <E1lU8p6-0005bY-1M@rmmprod07.runbox>
Message-ID: <24685.49087.102293.830255@rob.eddelbuettel.com>


On 7 April 2021 at 16:06, Andreas Kersting wrote:
| Hi Luke,
| 
| Please see https://github.com/akersting/dumpTest for the package.
| 
| Here a session showing my issue:
| 
| > library(dumpTest)
| > sessionInfo()
| R version 4.0.5 (2021-03-31)
| Platform: x86_64-pc-linux-gnu (64-bit)
| Running under: Debian GNU/Linux 10 (buster)
| 
| Matrix products: default
| BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
| LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
| 
| locale:
|  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
|  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
|  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
|  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
|  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
| [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
| 
| attached base packages:
| [1] stats     graphics  grDevices utils     datasets  methods   base     
| 
| other attached packages:
| [1] dumpTest_0.1.0
| 
| loaded via a namespace (and not attached):
| [1] compiler_4.0.5
| > for (i in 1:100) {
| +   print(i)
| +   print(system.time(f()))
| + }
| [1] 1
|    user  system elapsed 
|   0.028   0.004   0.034 
| [1] 2
|    user  system elapsed 
|   0.067   0.008   0.075 
| [1] 3
|    user  system elapsed 
|   0.176   0.000   0.176 
| [1] 4
|    user  system elapsed 
|   0.335   0.012   0.349 
| [1] 5
|    user  system elapsed 
|   0.745   0.023   0.770 
| [1] 6
|    user  system elapsed 
|   1.495   0.060   1.572 
| [1] 7
|    user  system elapsed 
|   2.902   0.136   3.040 
| [1] 8
|    user  system elapsed 
|   5.753   0.272   6.034 
| [1] 9
|    user  system elapsed 
|  11.807   0.708  12.597 
| [1] 10
| ^C
| Timing stopped at: 6.638 0.549 7.214
| 
| I had to interrupt in iteration 10 because I was running low on RAM.

No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
off my Debian package, hence instrumentation as in the Debian package.

edd at rob:~$ installGithub.r akersting/dumpTest
Using github PAT from envvar GITHUB_PAT
Downloading GitHub repo akersting/dumpTest at HEAD
?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
?  preparing ?dumpTest?:
?  checking DESCRIPTION meta-information ...
?  checking for LF line-endings in source and make files and shell scripts
?  checking for empty or unneeded directories
?  building ?dumpTest_0.1.0.tar.gz?
   
Installing package into ?/usr/local/lib/R/site-library?
(as ?lib? is unspecified)
* installing *source* package ?dumpTest? ...
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
No man pages found in package  ?dumpTest? 
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (dumpTest)
edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
   user  system elapsed 
  0.481   0.019   0.500 
edd at rob:~$

(I also ran the variant you showed with the dual print statements, it just
consumes more screen real estate and ends on

[...]
[1] 97                                      
   user  system elapsed     
  0.004   0.000   0.005 
[1] 98                                                                                                   
   user  system elapsed 
  0.004   0.000   0.005                   
[1] 99                     
   user  system elapsed    
  0.004   0.000   0.004                                                                                  
[1] 100                                                                                                  
   user  system elapsed                                                                                  
  0.005   0.000   0.005 
edd at rob:~$ )

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr  7 16:39:09 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 7 Apr 2021 09:39:09 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU8p6-0005bY-1M@rmmprod07.runbox>
References: <E1lU8p6-0005bY-1M@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.2104070936190.24594@luke-Latitude-7480>

No issues here with that either. Looks like something is different on
your end.

Best,

luke

On Wed, 7 Apr 2021, Andreas Kersting wrote:

> Hi Luke,
>
> Please see https://github.com/akersting/dumpTest for the package.
>
> Here a session showing my issue:
>
>> library(dumpTest)
>> sessionInfo()
> R version 4.0.5 (2021-03-31)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Debian GNU/Linux 10 (buster)
>
> Matrix products: default
> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>
> locale:
> [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] dumpTest_0.1.0
>
> loaded via a namespace (and not attached):
> [1] compiler_4.0.5
>> for (i in 1:100) {
> +   print(i)
> +   print(system.time(f()))
> + }
> [1] 1
>   user  system elapsed
>  0.028   0.004   0.034
> [1] 2
>   user  system elapsed
>  0.067   0.008   0.075
> [1] 3
>   user  system elapsed
>  0.176   0.000   0.176
> [1] 4
>   user  system elapsed
>  0.335   0.012   0.349
> [1] 5
>   user  system elapsed
>  0.745   0.023   0.770
> [1] 6
>   user  system elapsed
>  1.495   0.060   1.572
> [1] 7
>   user  system elapsed
>  2.902   0.136   3.040
> [1] 8
>   user  system elapsed
>  5.753   0.272   6.034
> [1] 9
>   user  system elapsed
> 11.807   0.708  12.597
> [1] 10
> ^C
> Timing stopped at: 6.638 0.549 7.214
>
> I had to interrupt in iteration 10 because I was running low on RAM.
>
> Regards,
> Andreas
>
> 2021-04-07 15:28 GMT+02:00 luke-tierney at uiowa.edu:
>> On Wed, 7 Apr 2021, Andreas Kersting wrote:
>>
>>> Hi,
>>>
>>> please consider the following minimal reproducible example:
>>>
>>> Create a new R package which just contains the following two (exported) objects:
>>
>> I would not expect this behavior and I don't see it when I make such a
>> package (in R 4.0.3 or R-devel on Ubuntu).  You will need to provide a
>> more complete reproducible example if you want help with what you are
>> trying to do; also sessionInfo() would help.
>>
>> Best,
>>
>> luke
>>
>>>
>>>
>>> crash_dumps <- new.env()
>>>
>>> f <- function() {
>>>  x <- runif(1e5)
>>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>>  assign("last.dump", dump, crash_dumps)
>>> }
>>>
>>>
>>> WARNING: the following will probably eat all your RAM!
>>>
>>> Attach this package and run:
>>>
>>> for (i in 1:100) {
>>>  print(i)
>>>  f()
>>> }
>>>
>>> You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.
>>>
>>> I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!
>>>
>>> Regards,
>>> Andreas
>>>
>>>
>>> Background:
>>> In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.
>>>
>>> Some more observations:
>>> - If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
>>> - If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
>>> - If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
>>> - If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:
>>>
>>> crash_dumps <- list()
>>>
>>> f <- function() {
>>>  x <- runif(1e5)
>>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>>  crash_dumps[["last.dump"]] <- dump
>>>  assignInMyNamespace("crash_dumps", crash_dumps)
>>> }
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From r-deve| @end|ng |rom @ker@t|ng@de  Wed Apr  7 17:09:14 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 07 Apr 2021 17:09:14 +0200 (CEST)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <24685.49087.102293.830255@rob.eddelbuettel.com>
Message-ID: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>

Hi Dirk, hi Luke,

Thanks for checking!

I could narrow it down further. I have the issue only if I install --with-keep.source, i.e.

R CMD INSTALL --with-keep.source dumpTest

Since this is the default in RStudio when clicking "Install and Restart", I was always having the issue - also from base R. If I install using e.g. devtools::install_github() directly it is also fine for me.

Could you please confirm? Thanks!

Regards,
Andreas

2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
> 
> On 7 April 2021 at 16:06, Andreas Kersting wrote:
> | Hi Luke,
> | 
> | Please see https://github.com/akersting/dumpTest for the package.
> | 
> | Here a session showing my issue:
> | 
> | > library(dumpTest)
> | > sessionInfo()
> | R version 4.0.5 (2021-03-31)
> | Platform: x86_64-pc-linux-gnu (64-bit)
> | Running under: Debian GNU/Linux 10 (buster)
> | 
> | Matrix products: default
> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
> | 
> | locale:
> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
> | 
> | attached base packages:
> | [1] stats     graphics  grDevices utils     datasets  methods   base     
> | 
> | other attached packages:
> | [1] dumpTest_0.1.0
> | 
> | loaded via a namespace (and not attached):
> | [1] compiler_4.0.5
> | > for (i in 1:100) {
> | +   print(i)
> | +   print(system.time(f()))
> | + }
> | [1] 1
> |    user  system elapsed 
> |   0.028   0.004   0.034 
> | [1] 2
> |    user  system elapsed 
> |   0.067   0.008   0.075 
> | [1] 3
> |    user  system elapsed 
> |   0.176   0.000   0.176 
> | [1] 4
> |    user  system elapsed 
> |   0.335   0.012   0.349 
> | [1] 5
> |    user  system elapsed 
> |   0.745   0.023   0.770 
> | [1] 6
> |    user  system elapsed 
> |   1.495   0.060   1.572 
> | [1] 7
> |    user  system elapsed 
> |   2.902   0.136   3.040 
> | [1] 8
> |    user  system elapsed 
> |   5.753   0.272   6.034 
> | [1] 9
> |    user  system elapsed 
> |  11.807   0.708  12.597 
> | [1] 10
> | ^C
> | Timing stopped at: 6.638 0.549 7.214
> | 
> | I had to interrupt in iteration 10 because I was running low on RAM.
> 
> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
> off my Debian package, hence instrumentation as in the Debian package.
> 
> edd at rob:~$ installGithub.r akersting/dumpTest
> Using github PAT from envvar GITHUB_PAT
> Downloading GitHub repo akersting/dumpTest at HEAD
> ?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
> ?  preparing ?dumpTest?:
> ?  checking DESCRIPTION meta-information ...
> ?  checking for LF line-endings in source and make files and shell scripts
> ?  checking for empty or unneeded directories
> ?  building ?dumpTest_0.1.0.tar.gz?
>    
> Installing package into ?/usr/local/lib/R/site-library?
> (as ?lib? is unspecified)
> * installing *source* package ?dumpTest? ...
> ** using staged installation
> ** R
> ** byte-compile and prepare package for lazy loading
> ** help
> No man pages found in package  ?dumpTest? 
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> ** testing if installed package can be loaded from final location
> ** testing if installed package keeps a record of temporary installation path
> * DONE (dumpTest)
> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>    user  system elapsed 
>   0.481   0.019   0.500 
> edd at rob:~$
> 
> (I also ran the variant you showed with the dual print statements, it just
> consumes more screen real estate and ends on
> 
> [...]
> [1] 97                                      
>    user  system elapsed     
>   0.004   0.000   0.005 
> [1] 98                                                                                                   
>    user  system elapsed 
>   0.004   0.000   0.005                   
> [1] 99                     
>    user  system elapsed    
>   0.004   0.000   0.004                                                                                  
> [1] 100                                                                                                  
>    user  system elapsed                                                                                  
>   0.005   0.000   0.005 
> edd at rob:~$ )
> 
> Dirk
> 
> -- 
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 

From r-deve| @end|ng |rom @ker@t|ng@de  Thu Apr  8 10:45:07 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Thu, 08 Apr 2021 10:45:07 +0200 (CEST)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
Message-ID: <E1lUQHj-0000AX-Uh@rmmprod07.runbox>

Hi,

For (hopefully) full reproducibility:

docker run rocker/tidyverse:4.0.5 Rscript -e 'devtools::install_github("akersting/dumpTest", INSTALL_opts = "--with-keep.source"); library(dumpTest); for (i in 1:100) {print(i); print(system.time(f()))}'

Regards,
Andreas

2021-04-07 17:09 GMT+02:00 "Andreas Kersting" <r-devel at akersting.de>:
> Hi Dirk, hi Luke,
> 
> Thanks for checking!
> 
> I could narrow it down further. I have the issue only if I install --with-keep.source, i.e.
> 
> R CMD INSTALL --with-keep.source dumpTest
> 
> Since this is the default in RStudio when clicking "Install and Restart", I was always having the issue - also from base R. If I install using e.g. devtools::install_github() directly it is also fine for me.
> 
> Could you please confirm? Thanks!
> 
> Regards,
> Andreas
> 
> 2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
>> 
>> On 7 April 2021 at 16:06, Andreas Kersting wrote:
>> | Hi Luke,
>> | 
>> | Please see https://github.com/akersting/dumpTest for the package.
>> | 
>> | Here a session showing my issue:
>> | 
>> | > library(dumpTest)
>> | > sessionInfo()
>> | R version 4.0.5 (2021-03-31)
>> | Platform: x86_64-pc-linux-gnu (64-bit)
>> | Running under: Debian GNU/Linux 10 (buster)
>> | 
>> | Matrix products: default
>> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
>> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>> | 
>> | locale:
>> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
>> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
>> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
>> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
>> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
>> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
>> | 
>> | attached base packages:
>> | [1] stats     graphics  grDevices utils     datasets  methods   base     
>> | 
>> | other attached packages:
>> | [1] dumpTest_0.1.0
>> | 
>> | loaded via a namespace (and not attached):
>> | [1] compiler_4.0.5
>> | > for (i in 1:100) {
>> | +   print(i)
>> | +   print(system.time(f()))
>> | + }
>> | [1] 1
>> |    user  system elapsed 
>> |   0.028   0.004   0.034 
>> | [1] 2
>> |    user  system elapsed 
>> |   0.067   0.008   0.075 
>> | [1] 3
>> |    user  system elapsed 
>> |   0.176   0.000   0.176 
>> | [1] 4
>> |    user  system elapsed 
>> |   0.335   0.012   0.349 
>> | [1] 5
>> |    user  system elapsed 
>> |   0.745   0.023   0.770 
>> | [1] 6
>> |    user  system elapsed 
>> |   1.495   0.060   1.572 
>> | [1] 7
>> |    user  system elapsed 
>> |   2.902   0.136   3.040 
>> | [1] 8
>> |    user  system elapsed 
>> |   5.753   0.272   6.034 
>> | [1] 9
>> |    user  system elapsed 
>> |  11.807   0.708  12.597 
>> | [1] 10
>> | ^C
>> | Timing stopped at: 6.638 0.549 7.214
>> | 
>> | I had to interrupt in iteration 10 because I was running low on RAM.
>> 
>> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
>> off my Debian package, hence instrumentation as in the Debian package.
>> 
>> edd at rob:~$ installGithub.r akersting/dumpTest
>> Using github PAT from envvar GITHUB_PAT
>> Downloading GitHub repo akersting/dumpTest at HEAD
>> ?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
>> ?  preparing ?dumpTest?:
>> ?  checking DESCRIPTION meta-information ...
>> ?  checking for LF line-endings in source and make files and shell scripts
>> ?  checking for empty or unneeded directories
>> ?  building ?dumpTest_0.1.0.tar.gz?
>>    
>> Installing package into ?/usr/local/lib/R/site-library?
>> (as ?lib? is unspecified)
>> * installing *source* package ?dumpTest? ...
>> ** using staged installation
>> ** R
>> ** byte-compile and prepare package for lazy loading
>> ** help
>> No man pages found in package  ?dumpTest? 
>> *** installing help indices
>> ** building package indices
>> ** testing if installed package can be loaded from temporary location
>> ** testing if installed package can be loaded from final location
>> ** testing if installed package keeps a record of temporary installation path
>> * DONE (dumpTest)
>> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>>    user  system elapsed 
>>   0.481   0.019   0.500 
>> edd at rob:~$
>> 
>> (I also ran the variant you showed with the dual print statements, it just
>> consumes more screen real estate and ends on
>> 
>> [...]
>> [1] 97                                      
>>    user  system elapsed     
>>   0.004   0.000   0.005 
>> [1] 98                                                                                                   
>>    user  system elapsed 
>>   0.004   0.000   0.005                   
>> [1] 99                     
>>    user  system elapsed    
>>   0.004   0.000   0.004                                                                                  
>> [1] 100                                                                                                  
>>    user  system elapsed                                                                                  
>>   0.005   0.000   0.005 
>> edd at rob:~$ )
>> 
>> Dirk
>> 
>> -- 
>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr  8 16:15:21 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 8 Apr 2021 09:15:21 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
References: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.2104080913020.24594@luke-Latitude-7480>

I see that now also. Not sure yet what is going on.

One work-around that may work for you is to create a fresh crash dump
in a .onLoad function; somehting like

crash_dumps <- NULL
.onLoad <- function(...) crash_dumps <<- new.env()

Best,

luke

On Wed, 7 Apr 2021, Andreas Kersting wrote:

> Hi Dirk, hi Luke,
>
> Thanks for checking!
>
> I could narrow it down further. I have the issue only if I install --with-keep.source, i.e.
>
> R CMD INSTALL --with-keep.source dumpTest
>
> Since this is the default in RStudio when clicking "Install and Restart", I was always having the issue - also from base R. If I install using e.g. devtools::install_github() directly it is also fine for me.
>
> Could you please confirm? Thanks!
>
> Regards,
> Andreas
>
> 2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
>>
>> On 7 April 2021 at 16:06, Andreas Kersting wrote:
>> | Hi Luke,
>> |
>> | Please see https://github.com/akersting/dumpTest for the package.
>> |
>> | Here a session showing my issue:
>> |
>> | > library(dumpTest)
>> | > sessionInfo()
>> | R version 4.0.5 (2021-03-31)
>> | Platform: x86_64-pc-linux-gnu (64-bit)
>> | Running under: Debian GNU/Linux 10 (buster)
>> |
>> | Matrix products: default
>> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
>> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>> |
>> | locale:
>> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>> |
>> | attached base packages:
>> | [1] stats     graphics  grDevices utils     datasets  methods   base
>> |
>> | other attached packages:
>> | [1] dumpTest_0.1.0
>> |
>> | loaded via a namespace (and not attached):
>> | [1] compiler_4.0.5
>> | > for (i in 1:100) {
>> | +   print(i)
>> | +   print(system.time(f()))
>> | + }
>> | [1] 1
>> |    user  system elapsed
>> |   0.028   0.004   0.034
>> | [1] 2
>> |    user  system elapsed
>> |   0.067   0.008   0.075
>> | [1] 3
>> |    user  system elapsed
>> |   0.176   0.000   0.176
>> | [1] 4
>> |    user  system elapsed
>> |   0.335   0.012   0.349
>> | [1] 5
>> |    user  system elapsed
>> |   0.745   0.023   0.770
>> | [1] 6
>> |    user  system elapsed
>> |   1.495   0.060   1.572
>> | [1] 7
>> |    user  system elapsed
>> |   2.902   0.136   3.040
>> | [1] 8
>> |    user  system elapsed
>> |   5.753   0.272   6.034
>> | [1] 9
>> |    user  system elapsed
>> |  11.807   0.708  12.597
>> | [1] 10
>> | ^C
>> | Timing stopped at: 6.638 0.549 7.214
>> |
>> | I had to interrupt in iteration 10 because I was running low on RAM.
>>
>> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
>> off my Debian package, hence instrumentation as in the Debian package.
>>
>> edd at rob:~$ installGithub.r akersting/dumpTest
>> Using github PAT from envvar GITHUB_PAT
>> Downloading GitHub repo akersting/dumpTest at HEAD
>> ?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
>> ?  preparing ?dumpTest?:
>> ?  checking DESCRIPTION meta-information ...
>> ?  checking for LF line-endings in source and make files and shell scripts
>> ?  checking for empty or unneeded directories
>> ?  building ?dumpTest_0.1.0.tar.gz?
>>
>> Installing package into ?/usr/local/lib/R/site-library?
>> (as ?lib? is unspecified)
>> * installing *source* package ?dumpTest? ...
>> ** using staged installation
>> ** R
>> ** byte-compile and prepare package for lazy loading
>> ** help
>> No man pages found in package  ?dumpTest?
>> *** installing help indices
>> ** building package indices
>> ** testing if installed package can be loaded from temporary location
>> ** testing if installed package can be loaded from final location
>> ** testing if installed package keeps a record of temporary installation path
>> * DONE (dumpTest)
>> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>>    user  system elapsed
>>   0.481   0.019   0.500
>> edd at rob:~$
>>
>> (I also ran the variant you showed with the dual print statements, it just
>> consumes more screen real estate and ends on
>>
>> [...]
>> [1] 97
>>    user  system elapsed
>>   0.004   0.000   0.005
>> [1] 98
>>    user  system elapsed
>>   0.004   0.000   0.005
>> [1] 99
>>    user  system elapsed
>>   0.004   0.000   0.004
>> [1] 100
>>    user  system elapsed
>>   0.005   0.000   0.005
>> edd at rob:~$ )
>>
>> Dirk
>>
>> --
>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Apr  9 02:43:51 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 8 Apr 2021 19:43:51 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <alpine.DEB.2.21.2104080913020.24594@luke-Latitude-7480>
References: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
 <alpine.DEB.2.21.2104080913020.24594@luke-Latitude-7480>
Message-ID: <alpine.DEB.2.21.2104081937221.24594@luke-Latitude-7480>

Looks like this is an unavoidable interaction between the way source
references and lazy loading are implemented. The link back to the
crash_dumps environment comes though source references on an
unevaluated argument promise. Creating a fresh environment is
.onLoad() avoids this and is probably your best bet.

Having an option to serialize without source references might be nice
but would probably not be high enough on anyone's priority list to get
done anytime soon.

Best,

luke

On Thu, 8 Apr 2021, luke-tierney at uiowa.edu wrote:

> I see that now also. Not sure yet what is going on.
>
> One work-around that may work for you is to create a fresh crash dump
> in a .onLoad function; somehting like
>
> crash_dumps <- NULL
> .onLoad <- function(...) crash_dumps <<- new.env()
>
> Best,
>
> luke
>
> On Wed, 7 Apr 2021, Andreas Kersting wrote:
>
>> Hi Dirk, hi Luke,
>> 
>> Thanks for checking!
>> 
>> I could narrow it down further. I have the issue only if I install 
>> --with-keep.source, i.e.
>> 
>> R CMD INSTALL --with-keep.source dumpTest
>> 
>> Since this is the default in RStudio when clicking "Install and Restart", I 
>> was always having the issue - also from base R. If I install using e.g. 
>> devtools::install_github() directly it is also fine for me.
>> 
>> Could you please confirm? Thanks!
>> 
>> Regards,
>> Andreas
>> 
>> 2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
>>> 
>>> On 7 April 2021 at 16:06, Andreas Kersting wrote:
>>> | Hi Luke,
>>> |
>>> | Please see https://github.com/akersting/dumpTest for the package.
>>> |
>>> | Here a session showing my issue:
>>> |
>>> | > library(dumpTest)
>>> | > sessionInfo()
>>> | R version 4.0.5 (2021-03-31)
>>> | Platform: x86_64-pc-linux-gnu (64-bit)
>>> | Running under: Debian GNU/Linux 10 (buster)
>>> |
>>> | Matrix products: default
>>> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
>>> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>>> |
>>> | locale:
>>> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>>> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>>> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>>> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>>> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C
>>> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>> |
>>> | attached base packages:
>>> | [1] stats     graphics  grDevices utils     datasets  methods   base
>>> |
>>> | other attached packages:
>>> | [1] dumpTest_0.1.0
>>> |
>>> | loaded via a namespace (and not attached):
>>> | [1] compiler_4.0.5
>>> | > for (i in 1:100) {
>>> | +   print(i)
>>> | +   print(system.time(f()))
>>> | + }
>>> | [1] 1
>>> |    user  system elapsed
>>> |   0.028   0.004   0.034
>>> | [1] 2
>>> |    user  system elapsed
>>> |   0.067   0.008   0.075
>>> | [1] 3
>>> |    user  system elapsed
>>> |   0.176   0.000   0.176
>>> | [1] 4
>>> |    user  system elapsed
>>> |   0.335   0.012   0.349
>>> | [1] 5
>>> |    user  system elapsed
>>> |   0.745   0.023   0.770
>>> | [1] 6
>>> |    user  system elapsed
>>> |   1.495   0.060   1.572
>>> | [1] 7
>>> |    user  system elapsed
>>> |   2.902   0.136   3.040
>>> | [1] 8
>>> |    user  system elapsed
>>> |   5.753   0.272   6.034
>>> | [1] 9
>>> |    user  system elapsed
>>> |  11.807   0.708  12.597
>>> | [1] 10
>>> | ^C
>>> | Timing stopped at: 6.638 0.549 7.214
>>> |
>>> | I had to interrupt in iteration 10 because I was running low on RAM.
>>> 
>>> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
>>> off my Debian package, hence instrumentation as in the Debian package.
>>> 
>>> edd at rob:~$ installGithub.r akersting/dumpTest
>>> Using github PAT from envvar GITHUB_PAT
>>> Downloading GitHub repo akersting/dumpTest at HEAD
>>> ?  checking for file 
>>> ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
>>> ?  preparing ?dumpTest?:
>>> ?  checking DESCRIPTION meta-information ...
>>> ?  checking for LF line-endings in source and make files and shell scripts
>>> ?  checking for empty or unneeded directories
>>> ?  building ?dumpTest_0.1.0.tar.gz?
>>> 
>>> Installing package into ?/usr/local/lib/R/site-library?
>>> (as ?lib? is unspecified)
>>> * installing *source* package ?dumpTest? ...
>>> ** using staged installation
>>> ** R
>>> ** byte-compile and prepare package for lazy loading
>>> ** help
>>> No man pages found in package  ?dumpTest?
>>> *** installing help indices
>>> ** building package indices
>>> ** testing if installed package can be loaded from temporary location
>>> ** testing if installed package can be loaded from final location
>>> ** testing if installed package keeps a record of temporary installation 
>>> path
>>> * DONE (dumpTest)
>>> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>>>    user  system elapsed
>>>   0.481   0.019   0.500
>>> edd at rob:~$
>>> 
>>> (I also ran the variant you showed with the dual print statements, it just
>>> consumes more screen real estate and ends on
>>> 
>>> [...]
>>> [1] 97
>>>    user  system elapsed
>>>   0.004   0.000   0.005
>>> [1] 98
>>>    user  system elapsed
>>>   0.004   0.000   0.005
>>> [1] 99
>>>    user  system elapsed
>>>   0.004   0.000   0.004
>>> [1] 100
>>>    user  system elapsed
>>>   0.005   0.000   0.005
>>> edd at rob:~$ )
>>> 
>>> Dirk
>>> 
>>> --
>>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>> 
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Apr  9 22:03:46 2021
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 9 Apr 2021 22:03:46 +0200
Subject: [Rd] encodeString converts to UTF-8 on Windows R-devel
In-Reply-To: <CABtg=KkwGA+V81-Z+1LBi69N7cYoRmpbmY4OWYunWh9GM98MOg@mail.gmail.com>
References: <CABtg=KkwGA+V81-Z+1LBi69N7cYoRmpbmY4OWYunWh9GM98MOg@mail.gmail.com>
Message-ID: <CABtg=K=8O7D91KUq1K9r_bGsok6qeXDKXjiwjxitjrkhYFsjjQ@mail.gmail.com>

For the record, this was a bug introduced here:
https://github.com/wch/r-source/commit/1c149eddee9c6d4b87a987a964a611bf8fe43a74
and fixed today here:
https://github.com/wch/r-source/commit/ec0761e63598d38eb5e8ab3fb995da06ab5c91ee

G.

On Fri, Mar 5, 2021 at 2:52 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Which is not necessarily bad news. :)
>
> I wonder if this was intended, because I did not find anything about
> it in the news file. It also breaks a couple of R packages, e.g. desc,
> probably more.
>
> Is this intended?
>
> Thanks!
>
> This is R-devel from yesterday:
>
> > x <- "\xfc"
> > Encoding(x) <- "latin1"
> > charToRaw(encodeString(x))
> [1] c3 bc
> >
> > l10n_info()
> $MBCS
> [1] FALSE
>
> $`UTF-8`
> [1] FALSE
>
> $`Latin-1`
> [1] TRUE
>
> $codepage
> [1] 1252
>
> $system.codepage
> [1] 1252
>
> and this is R-4.0.4:
>
> > x <- "\xfc"
> > Encoding(x) <- "latin1"
> > charToRaw(encodeString(x))
> [1] fc
> >
> > l10n_info()
> $MBCS
> [1] FALSE
>
> $`UTF-8`
> [1] FALSE
>
> $`Latin-1`
> [1] TRUE
>
> $codepage
> [1] 1252
>
> $system.codepage
> [1] 1252


From novo@|rj @end|ng |rom rutger@@edu  Sat Apr 10 01:34:13 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Fri, 9 Apr 2021 23:34:13 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <20200625150621.3854a233@Tarkus>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
Message-ID: <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>

> On Jun 25, 2020, at 8:06 AM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Wed, 24 Jun 2020 18:56:06 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
> On my machine, getOption('expressions') is 5000 and the example from
> the test correctly stops with length(traceback()) == 2500. (And the
> simpler example of f <- function() f(); f() stops with
> length(traceback()) == 5000).
> 
>> Traceback:
> 
> <...>
> 
>> 2718: foo()
> 
> This (traceback() being more than 2500 entries long) seems to imply
> that the stack size check is somehow skipped. (Perhaps optimized away?)
> The evaluation depth limit is checked in src/main/eval.c, line 705 [*],
> followed by stack size check. Can you attach the debugger and take a
> look at the values of R_EvalDepth and R_Expressions while executing the
> text? What about R_CStackStart and R_CStackLimit? What is the stack
> size limit (ulimit -s?) on the machine running this test?
> 
> -- 
> Best regards,
> Ivan
> 
> [*]
> https://github.com/wch/r-source/blob/8d7ac4699fba640d030703fa010b66bf26054cbd/src/main/eval.c#L705

Thanks again for your help, Ivan, and also Frederick for pointing out how I might run the debugger with R. 

I?m finally back at this. Here?s what I see, presuming I?ve done this the right way. Anything of use here as far as troubleshooting?

[novosirj at amarel-test2 bin]$ ./R -d gdb-ia

...

Reading symbols from /scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/bin/exec/R...
(gdb) run
Starting program: /scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/bin/exec/R 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

...

[Detaching after fork from child process 42089]
[Detaching after fork from child process 42091]
> bar <- function() 1+1
> foo <- function() { on.exit(bar()); foo() }
> tryCatch(foo(), error=function(x) TRUE) # now simple "infinite recursion"

Program received signal SIGSEGV, Segmentation fault.
bcEval.R (body=0x3eb7748, rho=0x3f72770, useCache=TRUE) at /scratch/novosirj/install-files/R-4.0.5/src/main/eval.c:6478
6478      codebase = pc = BCCODE(body);
(gdb) print R_EvalDepth
$1 = 2729
(gdb) print R_Expressions
$2 = 5000
(gdb) print R_CStackStart
$3 = 140737488207872
(gdb) print R_CStackLimit
$4 = 7969177
(gdb) quit
A debugging session is active.

        Inferior 1 [process 42083] will be killed.

Quit anyway? (y or n) y

[novosirj at amarel-test2 bin]$ ulimit -s
8192


--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Sun Apr 11 12:00:55 2021
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Sun, 11 Apr 2021 15:30:55 +0530
Subject: [Rd] reshape documentation
In-Reply-To: <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>
References: <1615629058522.60204@ap-hm.fr>
 <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>
Message-ID: <CADfFDC78SmbX5+VwOc2wTWrgqyKUcchJb3_B5dUpLsr9P9VHRQ@mail.gmail.com>

On Wed, Mar 17, 2021 at 7:55 PM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
>
> Comments in line
>
> On 13/03/2021 09:50, SOEIRO Thomas wrote:
> > Dear list,
> >
> > I have some questions/suggestions about reshape.
> >
> > 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> > - Do you agree with this?
> > - Would you consider a proposal to modify the documentation?
> > - If yes, what approach do you suggest? e.g. split in two pages?
>
> The current documentation is much clearer than it was when I first
> started using R but we should always strive for more.
>
> I would suggest leaving the documentation in one place but it might be
> helpful to add which direction is relevant for each parameter by placing
> (to wide) or (to long) as appropriate. I think having completely
> separate lists is not needed

I have just checked in some updates to the documentation (in R-devel)
which hopefully makes usage clearer. Any further suggestions are
welcome. We are planning to add a short vignette as well, hopefully in
time for R 4.1.0.

> > 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> > - Is this worth documenting?
> > - Is the construct list(c()) really needed?
>
> Yes, because you may have more than one set of variables which need to
> correspond to a single variable in long format. So in your example if
> you also had 11 variables for the temperature as well as the
> concentration each would need specifying as a separate vector in the list.

That's a valid point, but on the other hand, direction="long" already
supports specifying 'varying' as a vector, and it does simplify the
single variable case. So we decided to be consistent and allow it for
direction="wide" too, hopefully with loud enough warnings in the
documentation about using the feature carelessly.

Best,
-Deepayan

> Michael
>
> >
> > reshape(Indometh,
> >          v.names = "conc",
> >          idvar = "Subject",
> >          timevar = "time",
> >          direction = "wide",
> >          varying = list(c("conc_0.25hr",
> >                           "conc_0.5hr",
> >                           "conc.0.75hr",
> >                           "conc_1hr",
> >                           "conc_1.25hr",
> >                           "conc_2hr",
> >                           "conc_3hr",
> >                           "conc_4hr",
> >                           "conc_5hr",
> >                           "conc_6hr",
> >                           "conc_8hr")))
> >
> > Thanks,
> >
> > Thomas
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Michael
> http://www.dewey.myzen.co.uk/home.html
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Sun Apr 11 12:43:38 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 11 Apr 2021 06:43:38 -0400
Subject: [Rd] reshape documentation
In-Reply-To: <CADfFDC78SmbX5+VwOc2wTWrgqyKUcchJb3_B5dUpLsr9P9VHRQ@mail.gmail.com>
References: <1615629058522.60204@ap-hm.fr>
 <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>
 <CADfFDC78SmbX5+VwOc2wTWrgqyKUcchJb3_B5dUpLsr9P9VHRQ@mail.gmail.com>
Message-ID: <CAP01uRkidUXDoGDtYQDjTTxYf8O2LfpXE68bJmzFOge+=tZuBA@mail.gmail.com>

One thing about varying is that reshape ignores the names on the
varying list and makes you
specify them all over again even though it could know what they are.
Note that we  had to
specify that names(varying) is the v.names.

  DF <- structure(list(A1 = 10L, A2 = 5L, B1 = 11L, B2 = 5L, C1 = 21L,
      C2 = 10L), class = "data.frame", row.names = c(NA, -1L))

  let <- gsub("\\d", "", names(DF))
  num <- gsub("\\D", "", names(DF))

  varying <- split(names(DF), num)
  reshape(DF, dir = "long", varying = varying, v.names = names(varying),
    times = unique(let), timevar = "let")[-4]

On Sun, Apr 11, 2021 at 6:01 AM Deepayan Sarkar
<deepayan.sarkar at gmail.com> wrote:
>
> On Wed, Mar 17, 2021 at 7:55 PM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> >
> > Comments in line
> >
> > On 13/03/2021 09:50, SOEIRO Thomas wrote:
> > > Dear list,
> > >
> > > I have some questions/suggestions about reshape.
> > >
> > > 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> > > - Do you agree with this?
> > > - Would you consider a proposal to modify the documentation?
> > > - If yes, what approach do you suggest? e.g. split in two pages?
> >
> > The current documentation is much clearer than it was when I first
> > started using R but we should always strive for more.
> >
> > I would suggest leaving the documentation in one place but it might be
> > helpful to add which direction is relevant for each parameter by placing
> > (to wide) or (to long) as appropriate. I think having completely
> > separate lists is not needed
>
> I have just checked in some updates to the documentation (in R-devel)
> which hopefully makes usage clearer. Any further suggestions are
> welcome. We are planning to add a short vignette as well, hopefully in
> time for R 4.1.0.
>
> > > 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> > > - Is this worth documenting?
> > > - Is the construct list(c()) really needed?
> >
> > Yes, because you may have more than one set of variables which need to
> > correspond to a single variable in long format. So in your example if
> > you also had 11 variables for the temperature as well as the
> > concentration each would need specifying as a separate vector in the list.
>
> That's a valid point, but on the other hand, direction="long" already
> supports specifying 'varying' as a vector, and it does simplify the
> single variable case. So we decided to be consistent and allow it for
> direction="wide" too, hopefully with loud enough warnings in the
> documentation about using the feature carelessly.
>
> Best,
> -Deepayan
>
> > Michael
> >
> > >
> > > reshape(Indometh,
> > >          v.names = "conc",
> > >          idvar = "Subject",
> > >          timevar = "time",
> > >          direction = "wide",
> > >          varying = list(c("conc_0.25hr",
> > >                           "conc_0.5hr",
> > >                           "conc.0.75hr",
> > >                           "conc_1hr",
> > >                           "conc_1.25hr",
> > >                           "conc_2hr",
> > >                           "conc_3hr",
> > >                           "conc_4hr",
> > >                           "conc_5hr",
> > >                           "conc_6hr",
> > >                           "conc_8hr")))
> > >
> > > Thanks,
> > >
> > > Thomas
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > --
> > Michael
> > http://www.dewey.myzen.co.uk/home.html
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From brenton @end|ng |rom w|ern|k@org  Tue Apr 13 15:15:50 2021
From: brenton @end|ng |rom w|ern|k@org (Brenton Wiernik)
Date: Tue, 13 Apr 2021 09:15:50 -0400
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
Message-ID: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>

In Microsoft?s Windows Subsystem for Linux (WSL or WSL2), there is not system framework, so utilities that depend on it fail. This includes timedatectl which R uses in Sys.timezone(). The timedatectl utility is present on Linux systems installed under WSL/WSL2, but is non-functional. So, when Sys.timezone() checks for Sys.which("timedatectl"), it receives a false positive. The subsequent methods after this if () do work, however.

This can be fixed if line 42 of Sys.timezone() were changed from:
if (nzchar(Sys.which("timedatectl"))) {

to:
if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname -r", intern = TRUE), ignore.case = TRUE)) {

"uname -r" returns for example:
"5.4.72-microsoft-standard-WSL2"

So checking for "microsoft" or "WSL" would probably work.


Brenton Wiernik



	[[alternative HTML version deleted]]


From wewo|@k| @end|ng |rom gm@||@com  Tue Apr 13 16:36:32 2021
From: wewo|@k| @end|ng |rom gm@||@com (Witold E Wolski)
Date: Tue, 13 Apr 2021 16:36:32 +0200
Subject: [Rd] R CMD check fails with: During startup - Warning message:
 Setting LC_CTYPE=en_US.UTF-8 failed
Message-ID: <CAAjnpdgw9z9ihiwefoxPy13t8Tp4DLisuD4dCc0kqHFGxVBOBw@mail.gmail.com>

Hello,

I am trying to run a package check on windows 10.
But it fails with the following errors:

```
$ R CMD check prolfqua_0.1.5.3.tar.gz
During startup - Warning message:
Setting LC_CTYPE=en_US.UTF-8 failed
* using log directory 'C:/Users/wewol/__checkout/prolfqua.Rcheck'
* using R version 4.0.3 (2020-10-10)
* using platform: x86_64-w64-mingw32 (64-bit)
* using session charset: ASCII
....
* checking DESCRIPTION meta-information ... WARNING
During startup - Warning message:
Setting LC_CTYPE=en_US.UTF-8 failed
 ERROR
During startup - Warning message:
Setting LC_CTYPE=en_US.UTF-8 failed
* DONE

Status: 1 ERROR, 1 WARNING, 3 NOTEs
See
  'C:/Users/wewol/__checkout/prolfqua.Rcheck/00check.log'
for details.
```

I am puzzled. I did a web search but all I found is:
https://stackoverflow.com/questions/54102869/during-startup-warning-message-setting-lc-ctype-failed-on-windows

I am reluctant to use .Rprofiles because otherwise, my R installation
works just fine.

Best regards
Witek


-- 
Witold Eryk Wolski


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 14 08:34:19 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 14 Apr 2021 08:34:19 +0200
Subject: [Rd] R CMD check fails with: During startup - Warning message:
 Setting LC_CTYPE=en_US.UTF-8 failed
In-Reply-To: <CAAjnpdgw9z9ihiwefoxPy13t8Tp4DLisuD4dCc0kqHFGxVBOBw@mail.gmail.com>
References: <CAAjnpdgw9z9ihiwefoxPy13t8Tp4DLisuD4dCc0kqHFGxVBOBw@mail.gmail.com>
Message-ID: <44ea5485-3979-c7f6-b48e-81518740c7d4@gmail.com>

On 4/13/21 4:36 PM, Witold E Wolski wrote:
> Hello,
>
> I am trying to run a package check on windows 10.
> But it fails with the following errors:
>
> ```
> $ R CMD check prolfqua_0.1.5.3.tar.gz
> During startup - Warning message:
> Setting LC_CTYPE=en_US.UTF-8 failed
> * using log directory 'C:/Users/wewol/__checkout/prolfqua.Rcheck'
> * using R version 4.0.3 (2020-10-10)
> * using platform: x86_64-w64-mingw32 (64-bit)
> * using session charset: ASCII
> ....
> * checking DESCRIPTION meta-information ... WARNING
> During startup - Warning message:
> Setting LC_CTYPE=en_US.UTF-8 failed
>   ERROR
> During startup - Warning message:
> Setting LC_CTYPE=en_US.UTF-8 failed
> * DONE
>
> Status: 1 ERROR, 1 WARNING, 3 NOTEs
> See
>    'C:/Users/wewol/__checkout/prolfqua.Rcheck/00check.log'
> for details.
> ```
>
> I am puzzled. I did a web search but all I found is:
> https://stackoverflow.com/questions/54102869/during-startup-warning-message-setting-lc-ctype-failed-on-windows
>
> I am reluctant to use .Rprofiles because otherwise, my R installation
> works just fine.

I'd just clear the content of LC_CTYPE and LC_ALL before running R (so 
also before installing packages, building packages, checking packages). 
I suppose you are running the checks from Msys2/bash (or cygwin or 
similar), which by default sets LC_CTYPE to this value.

The problem is that R cannot set the current encoding to UTF-8, because 
it is built against MSVCRT. You can set UTF-8 as the current encoding in 
the (experimental) UCRT build of R. But even there, it is better to run 
package checks with the variables cleared/not set, unless your intention 
is to debug the checks to work in different encodings.

Best
Tomas


>
> Best regards
> Witek
>
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Apr 14 09:28:38 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 14 Apr 2021 09:28:38 +0200
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
In-Reply-To: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
References: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
Message-ID: <24694.39334.41561.957614@stat.math.ethz.ch>

>>>>> Brenton Wiernik 
>>>>>     on Tue, 13 Apr 2021 09:15:50 -0400 writes:

    > In Microsoft?s Windows Subsystem for Linux (WSL or WSL2),
    > there is not system framework, so utilities that depend on
    > it fail. This includes timedatectl which R uses in
    > Sys.timezone(). The timedatectl utility is present on
    > Linux systems installed under WSL/WSL2, but is
    > non-functional. So, when Sys.timezone() checks for
    > Sys.which("timedatectl"), it receives a false
    > positive. The subsequent methods after this if () do work,
    > however.

    > This can be fixed if line 42 of Sys.timezone() were changed from:

    > if (nzchar(Sys.which("timedatectl"))) {

    > to:

    > if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname -r", intern = TRUE), ignore.case = TRUE)) {

    > "uname -r" returns for example:  "5.4.72-microsoft-standard-WSL2"

    > So checking for "microsoft" or "WSL" would probably work.

    > Brenton Wiernik

Thank you.  This all makes sense.
However,  using system("uname -r")  creates another platform
dependency (it fails, i.e., signals an error, e.g., on our Windows Server).

Could  Sys.info()  be used instead?
What does it give on your platform?



    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 14 09:35:27 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 14 Apr 2021 07:35:27 -0000
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
References: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
Message-ID: <EE9F6C8C-E540-4310-BD97-B65FE14F58A7@R-project.org>


Andres,

correct me if I'm wrong, but the issue here is not initialisation but rather valgrind flagging. You simply have to call VALGRIND_MAKE_MEM_DEFINED() in your code after allocVector3() to declare that you have initialised the memory - or am I missing something?

Cheers,
Simon



> On 30/03/2021, at 9:18 AM, Andreas Kersting <r-devel at akersting.de> wrote:
> 
> Hi Tomas,
> 
> Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:
> 
> I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576
> 
> However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.
> 
> The use of MAP_FIXED
> - is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
> - requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it
> 
> I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323
> 
> This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().
> 
> Regards,
> Andreas
> 
> 
> 2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>> Hi Andreas,
>> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
>> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
>> 
>> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
>> 
>> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
>> 
>> Best
>> Tomas
>> 
>> 
>> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Apr 14 09:36:14 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 14 Apr 2021 07:36:14 -0000
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <24669.59012.651091.193661@stat.math.ethz.ch>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
 <24667.1747.993142.397629@stat.math.ethz.ch>
 <24668.36274.53383.514330@rob.eddelbuettel.com>
 <ca146334-92de-2328-db73-2556f2649144@gmail.com>
 <24669.59012.651091.193661@stat.math.ethz.ch>
Message-ID: <20210326210646.70f3a21c-5966@Tarkus>


On Fri, 26 Mar 2021 14:49:56 +0100
Martin Maechler <maechler at stat.math.ethz.ch> wrote:

> I concluded I liked the first [patch] because it would achieve
> what's considered "uniformly better" in the sense that it makes
> R graphics behave like "all other" desktop applications *and* it
> would do so for all possible window manager scheme without any
> need of some desktop setting (which a typical user would not
> know about, nor know that s?he should/could change).

Martin, here is some information on how X11 (and rgl) windows are
grouped on different platforms, depending on the presence of the first
patch and the .desktop file:

 - GNOME [1] needs a .desktop file to group windows by their WM_CLASS
   and otherwise groups windows by their WM_HINTS.window_group only,
   which makes different configurations possible:
   * no window_group, no .desktop file: no grouping
   * window_group patch, no .desktop file: plot windows grouped
     per-process, x11 and rgl separately
   * StartupWMClass in .desktop file: x11 and rgl windows from all R
     processes grouped together
 - the XQuartz window manager apparently uses WM_HINTS.window_group but
   not WM_CLASS to group windows [2] (patch is only relevant for
   rgl, .desktop files aren't relevant)
 - Xfce groups windows by WM_CLASS [3], so adding WM_HINTS.window_group
   or changing the .desktop file doesn't group them any more
 - KDE seems to follow the .desktop file (if StartupWMClass is
   present) and group by WM_CLASS otherwise [4], but I don't have it
   installed to check. On the other hand, KDE might be ignoring
   WM_HINTS.window_group, judging by the absence of "WM2GroupLeader" in
   the source code of Plasma Workspace. This implies no changes in
   window grouping from patching window_group or changing the .desktop
   file. [5]

To summarise, the patch to x11() leads to visible window grouping in
GNOME-based environments. My impression is that most environments group
windows by WM_CLASS (which had been happening without the patch), but
there are far too many window managers to check that impression.

-- 
Best regards,
Ivan

[1] Including Cinammon:
https://github.com/linuxmint/cinnamon/blob/72732da43e971b83d926af56998c83ee8d000394/src/cinnamon-window-tracker.c#L482

Likely Unity forks too.

[2] Judging by
https://stat.ethz.ch/pipermail/r-devel/2021-March/080571.html

[3] With minor inconsistencies regarding x11 vs rgl windows between
Win+Tab "switch between application windows" and the window buttons on
the task bar, but let's not focus on that.

[4]
https://invent.kde.org/plasma/plasma-workspace/-/blob/7c49a0ae/libtaskmanager/xwindowtasksmodel.cpp#L439

[5] Strictly speaking, StartupWMClass= in the .desktop file lets the
desktop environment associate the plot windows with the R launcher
button if it's also present on the task bar.


From brenton @end|ng |rom w|ern|k@org  Wed Apr 14 15:19:53 2021
From: brenton @end|ng |rom w|ern|k@org (Brenton Wiernik)
Date: Wed, 14 Apr 2021 09:19:53 -0400
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
In-Reply-To: <24694.39334.41561.957614@stat.math.ethz.ch>
References: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
 <24694.39334.41561.957614@stat.math.ethz.ch>
Message-ID: <1M6DvY-1lUTZJ1HBo-006bPO@mrelay.perfora.net>

That would work.

Sys.info()['release']
#                          release 
# "5.4.72-microsoft-standard-WSL2"

Brenton


From: Martin Maechler
Sent: Wednesday, April 14, 2021 03:28
To: Brenton Wiernik
Cc: r-devel at r-project.org
Subject: Re: [Rd] Sys.timezone() fails on Linux under Microsoft WSL

>>>>> Brenton Wiernik 
>>>>>     on Tue, 13 Apr 2021 09:15:50 -0400 writes:

    > In Microsoft?s Windows Subsystem for Linux (WSL or WSL2),
    > there is not system framework, so utilities that depend on
    > it fail. This includes timedatectl which R uses in
    > Sys.timezone(). The timedatectl utility is present on
    > Linux systems installed under WSL/WSL2, but is
    > non-functional. So, when Sys.timezone() checks for
    > Sys.which("timedatectl"), it receives a false
    > positive. The subsequent methods after this if () do work,
    > however.

    > This can be fixed if line 42 of Sys.timezone() were changed from:

    > if (nzchar(Sys.which("timedatectl"))) {

    > to:

    > if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname -r", intern = TRUE), ignore.case = TRUE)) {

    > "uname -r" returns for example:  "5.4.72-microsoft-standard-WSL2"

    > So checking for "microsoft" or "WSL" would probably work.

    > Brenton Wiernik

Thank you.  This all makes sense.
However,  using system("uname -r")  creates another platform
dependency (it fails, i.e., signals an error, e.g., on our Windows Server).

Could  Sys.info()  be used instead?
What does it give on your platform?



    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Thu Apr 15 03:33:08 2021
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Thu, 15 Apr 2021 13:33:08 +1200
Subject: [Rd] SVG Error on Windows if Multiplication Character Present
In-Reply-To: <SYBPR01MB4761553D4E32733B1A9ABF17CD759@SYBPR01MB4761.ausprd01.prod.outlook.com>
References: <SYBPR01MB4761553D4E32733B1A9ABF17CD759@SYBPR01MB4761.ausprd01.prod.outlook.com>
Message-ID: <680bb2b8-8636-016e-d2ef-be0f2348f471@stat.auckland.ac.nz>

Hi

I have started to take a look at this, but it may be slow to debug on 
Windows.

My initial finding was that the problem happened for me on BOTH svg() 
and default windows() devices.  What R version are you using ?  (mine is 
below)

 > sessionInfo()
R version 4.0.5 (2021-03-31)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17134)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats graphics grDevices utils datasets methods base

loaded via a namespace (and not attached):
[1] compiler_4.0.5

Some additional information ...

 > capabilities()
jpeg png tiff tcltk X11 aqua
TRUE TRUE TRUE TRUE FALSE FALSE
http/ftp sockets libxml fifo cledit iconv
TRUE TRUE TRUE TRUE TRUE TRUE
NLS profmem cairo ICU long.double libcurl
TRUE TRUE TRUE TRUE TRUE TRUE

 > grSoftVersion()
cairo cairoFT pango
"1.16.0" "" ""
libpng jpeg libtiff
"1.6.37" "8.0" "LIBTIFF, Version 4.2.0"

Paul

On 7/04/21 8:00 pm, Dario Strbenac wrote:
> Good day,
> 
> The example below fails on Windows with Error in 
> grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y: Metric 
> information not available for this family/device.
> 
> library(ggplot2)
> aPlot <- ggplot(ToothGrowth, aes(x = factor(dose), y = len)) + 
> geom_boxplot() +
> ggtitle("Test", subtitle = ggplot2::expr(paste("p", " = ", "6.23", " ? 
> ", "10"^"-5")))
> svg("test.svg"); aPlot; dev.off();
> 
> but there is no such problem on a Debian Linux server. The plot in 
> Windows appears fine in an R graphics window. The error only occurs when 
> exported as an SVG file. Using %*% instead of ? avoids the error but 
> it's perhaps worth mentioning in case it could be easily handled by R.
> 
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u  Thu Apr 15 06:52:41 2021
From: M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u (Bravington, Mark (Data61, Hobart))
Date: Thu, 15 Apr 2021 04:52:41 +0000
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
Message-ID: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>

I've not been able to install gdb for RTOOLS40 on Windows 10. The rtools installer (rtools40-x64_86.exe) doesn't seem to include gdb by default, and when I follow the instructions for adding gdb (which I tracked down at https://github.com/r-windows/docs/blob/master/faq.md) this is what happened:

<cd to c:\rtools\rtools40>
<run mingw64.exe>
$ pacman -S mingw-w64-x86_64-gdb
resolving dependencies...
looking for conflicting packages...

Packages (8) mingw-w64-x86_64-expat-2.2.9-9002
             mingw-w64-x86_64-gettext-0.19.8.1-9002
             mingw-w64-x86_64-libsystre-1.0.1-9002
             mingw-w64-x86_64-libtre-git-r128.6fb7206-9002
             mingw-w64-x86_64-ncurses-6.1.20180526-9002
             mingw-w64-x86_64-readline-8.0.001-2
             mingw-w64-x86_64-termcap-1.3.1-9002
             mingw-w64-x86_64-gdb-8.3.1-9500

Total Download Size:    3.46 MiB
Total Installed Size:  83.77 MiB

:: Proceed with installation? [Y/n] y
:: Retrieving packages...
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cloud.r-project.org : The requested URL returned error: 404
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cran.r-project.org : The requested URL returned error: 404
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from dl.bintray.com : The requested URL returned error: 404
warning: failed to retrieve some files
error: failed to commit transaction (failed to retrieve some files)
Errors occurred, no packages were upgraded.

Something very similar happens if I try the 32bit version.

Do you have any suggestions?

 - I used to have this stuff working OK with R3.6/RTOOLS35 but have not needed to go back to C for a while. The version of gdb in RTOOLS is 7.9.1; I tried copying that gdb.exe into RTOOLS40 but it just exited instantly when I tried to run it from there. 
 
 - NB I have absolutely no idea what is meant by msys2 or pacman or any of that, I'm just following instructions... 


Thanks
Mark

 


Mark Bravington
CSIRO Marine Lab
Hobart
Australia


From c@c@voeten @end|ng |rom hum@|e|denun|v@n|  Thu Apr 15 08:59:21 2021
From: c@c@voeten @end|ng |rom hum@|e|denun|v@n| (Voeten, C.C.)
Date: Thu, 15 Apr 2021 06:59:21 +0000
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
In-Reply-To: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
References: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
Message-ID: <e3c3a842457046a6a48060647493b600@hum.leidenuniv.nl>

Hi Mark,

Try pacman -Suy first to update pacman's package database. It's quite possible that the versions pacman is trying to install are no longer available due to being out of date.

HTH,
Cesko

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Bravington, Mark (Data61, Hobart)
Sent: Thursday, April 15, 2021 6:53 AM
To: R-Devel-2 <r-devel at r-project.org>
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows

I've not been able to install gdb for RTOOLS40 on Windows 10. The rtools installer (rtools40-x64_86.exe) doesn't seem to include gdb by default, and when I follow the instructions for adding gdb (which I tracked down at https://github.com/r-windows/docs/blob/master/faq.md) this is what happened:

<cd to c:\rtools\rtools40>
<run mingw64.exe>
$ pacman -S mingw-w64-x86_64-gdb
resolving dependencies...
looking for conflicting packages...

Packages (8) mingw-w64-x86_64-expat-2.2.9-9002
             mingw-w64-x86_64-gettext-0.19.8.1-9002
             mingw-w64-x86_64-libsystre-1.0.1-9002
             mingw-w64-x86_64-libtre-git-r128.6fb7206-9002
             mingw-w64-x86_64-ncurses-6.1.20180526-9002
             mingw-w64-x86_64-readline-8.0.001-2
             mingw-w64-x86_64-termcap-1.3.1-9002
             mingw-w64-x86_64-gdb-8.3.1-9500

Total Download Size:    3.46 MiB
Total Installed Size:  83.77 MiB

:: Proceed with installation? [Y/n] y
:: Retrieving packages...
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cloud.r-project.org : The requested URL returned error: 404
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cran.r-project.org : The requested URL returned error: 404
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from dl.bintray.com : The requested URL returned error: 404
warning: failed to retrieve some files
error: failed to commit transaction (failed to retrieve some files)
Errors occurred, no packages were upgraded.

Something very similar happens if I try the 32bit version.

Do you have any suggestions?

 - I used to have this stuff working OK with R3.6/RTOOLS35 but have not needed to go back to C for a while. The version of gdb in RTOOLS is 7.9.1; I tried copying that gdb.exe into RTOOLS40 but it just exited instantly when I tried to run it from there. 
 
 - NB I have absolutely no idea what is meant by msys2 or pacman or any of that, I'm just following instructions... 


Thanks
Mark

 


Mark Bravington
CSIRO Marine Lab
Hobart
Australia

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 15 08:59:43 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 15 Apr 2021 08:59:43 +0200
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
In-Reply-To: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
References: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
Message-ID: <88b6c203-0e24-64d4-1b9a-99e105215a64@gmail.com>

On 4/15/21 6:52 AM, Bravington, Mark (Data61, Hobart) wrote:
> I've not been able to install gdb for RTOOLS40 on Windows 10. The rtools installer (rtools40-x64_86.exe) doesn't seem to include gdb by default, and when I follow the instructions for adding gdb (which I tracked down at https://github.com/r-windows/docs/blob/master/faq.md) this is what happened:
>
> <cd to c:\rtools\rtools40>
> <run mingw64.exe>
> $ pacman -S mingw-w64-x86_64-gdb
> resolving dependencies...
> looking for conflicting packages...
>
> Packages (8) mingw-w64-x86_64-expat-2.2.9-9002
>               mingw-w64-x86_64-gettext-0.19.8.1-9002
>               mingw-w64-x86_64-libsystre-1.0.1-9002
>               mingw-w64-x86_64-libtre-git-r128.6fb7206-9002
>               mingw-w64-x86_64-ncurses-6.1.20180526-9002
>               mingw-w64-x86_64-readline-8.0.001-2
>               mingw-w64-x86_64-termcap-1.3.1-9002
>               mingw-w64-x86_64-gdb-8.3.1-9500
>
> Total Download Size:    3.46 MiB
> Total Installed Size:  83.77 MiB
>
> :: Proceed with installation? [Y/n] y
> :: Retrieving packages...
> error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cloud.r-project.org : The requested URL returned error: 404
> error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cran.r-project.org : The requested URL returned error: 404
> error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from dl.bintray.com : The requested URL returned error: 404
> warning: failed to retrieve some files
> error: failed to commit transaction (failed to retrieve some files)
> Errors occurred, no packages were upgraded.
>
> Something very similar happens if I try the 32bit version.
>
> Do you have any suggestions?
>
>   - I used to have this stuff working OK with R3.6/RTOOLS35 but have not needed to go back to C for a while. The version of gdb in RTOOLS is 7.9.1; I tried copying that gdb.exe into RTOOLS40 but it just exited instantly when I tried to run it from there.

If you can still run gdb in your Rtools 3.5 installation, you should be 
able to use it to connect to the R session to debug, even if that R 
session is run say from a terminal that originates from Rtools 4.

In the R session run Sys.getpid().
In the gdb session, run

solib-search-path
attach xxx
(where xxx is the PID number)

>   - NB I have absolutely no idea what is meant by msys2 or pacman or any of that, I'm just following instructions...

Msys2 is software distribution originating from archlinux, with pacman 
package manager. Rtools4 is a customized version of Msys2. You should be 
able to use gdb from any distribution, including Rtools 3.5 or say 
vanilla Msys2 (that is what I do when building for UCRT - I use gdb and 
other tools from vanilla Msys2).

Tomas

>
>
> Thanks
> Mark
>
>   
>
>
> Mark Bravington
> CSIRO Marine Lab
> Hobart
> Australia
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Thu Apr 15 09:09:05 2021
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Thu, 15 Apr 2021 03:09:05 -0400
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
In-Reply-To: <e3c3a842457046a6a48060647493b600@hum.leidenuniv.nl>
References: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <e3c3a842457046a6a48060647493b600@hum.leidenuniv.nl>
Message-ID: <CAL6gwnKeSsHM12LKbaoe=HD9J--R1LD9gLpMPF_N9HcCdDynbg@mail.gmail.com>

Also, packages should be installed in the MSYS2 environment and not the
MINGW64. Invoke msys2.exe, synchronize with Jeroen?s via the pacman -Syu,
and then try the install. It should work as Jeroen has gdb in the upstream
repository [
https://github.com/r-windows/rtools-packages/tree/master/mingw-w64-gdb]

Thanks,

Avi

On Thu, Apr 15, 2021 at 2:59 AM Voeten, C.C. <c.c.voeten at hum.leidenuniv.nl>
wrote:

> Hi Mark,
>
> Try pacman -Suy first to update pacman's package database. It's quite
> possible that the versions pacman is trying to install are no longer
> available due to being out of date.
>
> HTH,
> Cesko
>
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Bravington,
> Mark (Data61, Hobart)
> Sent: Thursday, April 15, 2021 6:53 AM
> To: R-Devel-2 <r-devel at r-project.org>
> Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
>
> I've not been able to install gdb for RTOOLS40 on Windows 10. The rtools
> installer (rtools40-x64_86.exe) doesn't seem to include gdb by default, and
> when I follow the instructions for adding gdb (which I tracked down at
> https://github.com/r-windows/docs/blob/master/faq.md) this is what
> happened:
>
> <cd to c:\rtools\rtools40>
> <run mingw64.exe>
> $ pacman -S mingw-w64-x86_64-gdb
> resolving dependencies...
> looking for conflicting packages...
>
> Packages (8) mingw-w64-x86_64-expat-2.2.9-9002
>              mingw-w64-x86_64-gettext-0.19.8.1-9002
>              mingw-w64-x86_64-libsystre-1.0.1-9002
>              mingw-w64-x86_64-libtre-git-r128.6fb7206-9002
>              mingw-w64-x86_64-ncurses-6.1.20180526-9002
>              mingw-w64-x86_64-readline-8.0.001-2
>              mingw-w64-x86_64-termcap-1.3.1-9002
>              mingw-w64-x86_64-gdb-8.3.1-9500
>
> Total Download Size:    3.46 MiB
> Total Installed Size:  83.77 MiB
>
> :: Proceed with installation? [Y/n] y
> :: Retrieving packages...
> error: failed retrieving file
> 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cloud.r-project.org
> : The requested URL returned error: 404
> error: failed retrieving file
> 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cran.r-project.org
> : The requested URL returned error: 404
> error: failed retrieving file
> 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from dl.bintray.com :
> The requested URL returned error: 404
> warning: failed to retrieve some files
> error: failed to commit transaction (failed to retrieve some files)
> Errors occurred, no packages were upgraded.
>
> Something very similar happens if I try the 32bit version.
>
> Do you have any suggestions?
>
>  - I used to have this stuff working OK with R3.6/RTOOLS35 but have not
> needed to go back to C for a while. The version of gdb in RTOOLS is 7.9.1;
> I tried copying that gdb.exe into RTOOLS40 but it just exited instantly
> when I tried to run it from there.
>
>  - NB I have absolutely no idea what is meant by msys2 or pacman or any of
> that, I'm just following instructions...
>
>
> Thanks
> Mark
>
>
>
>
> Mark Bravington
> CSIRO Marine Lab
> Hobart
> Australia
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u  Thu Apr 15 10:18:32 2021
From: M@rk@Br@v|ngton @end|ng |rom d@t@61@c@|ro@@u (Bravington, Mark (Data61, Hobart))
Date: Thu, 15 Apr 2021 08:18:32 +0000
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
In-Reply-To: <CAL6gwnKeSsHM12LKbaoe=HD9J--R1LD9gLpMPF_N9HcCdDynbg@mail.gmail.com>
References: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <e3c3a842457046a6a48060647493b600@hum.leidenuniv.nl>,
 <CAL6gwnKeSsHM12LKbaoe=HD9J--R1LD9gLpMPF_N9HcCdDynbg@mail.gmail.com>
Message-ID: <MEAPR01MB240709000DD0CF0CE8DCA8ACB44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>

Excellent, thank you all. Doing "pacman -Syu" before "pacman -S gdb...." did the trick, and yes it's a different version of gdb compared to what pacman was previously trying to install. Might be worth updating the RTOOLS40 documentation to recommend doing -Syu first.

Jeroen's documentation says to do the pacman bit from mingw64, and separately from mingw32--- whereas Avraham's suggestion is to do it just from msys2.  I actually did both; gdb seems to end up in the same place regardless, but tomorrow I'll find out if it's *really* worked...

Thanks
Mark

Mark Bravington
CSIRO Marine Lab
Hobart
Australia


________________________________________
From: Avraham Adler <avraham.adler at gmail.com>
Sent: Thursday, 15 April 2021 17:09
To: Voeten, C.C.
Cc: Bravington, Mark (Data61, Hobart); R-Devel-2
Subject: Re: [Rd] problem adding gdb to RTOOLS40 on Windows

Also, packages should be installed in the MSYS2 environment and not the MINGW64. Invoke msys2.exe, synchronize with Jeroen?s via the pacman -Syu, and then try the install. It should work as Jeroen has gdb in the upstream repository [
https://github.com/r-windows/rtools-packages/tree/master/mingw-w64-gdb]

Thanks,

Avi

On Thu, Apr 15, 2021 at 2:59 AM Voeten, C.C. <c.c.voeten at hum.leidenuniv.nl<mailto:c.c.voeten at hum.leidenuniv.nl>> wrote:
Hi Mark,

Try pacman -Suy first to update pacman's package database. It's quite possible that the versions pacman is trying to install are no longer available due to being out of date.

HTH,
Cesko

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org<mailto:r-devel-bounces at r-project.org>> On Behalf Of Bravington, Mark (Data61, Hobart)
Sent: Thursday, April 15, 2021 6:53 AM
To: R-Devel-2 <r-devel at r-project.org<mailto:r-devel at r-project.org>>
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows

I've not been able to install gdb for RTOOLS40 on Windows 10. The rtools installer (rtools40-x64_86.exe) doesn't seem to include gdb by default, and when I follow the instructions for adding gdb (which I tracked down at https://github.com/r-windows/docs/blob/master/faq.md) this is what happened:

<cd to c:\rtools\rtools40>
<run mingw64.exe>
$ pacman -S mingw-w64-x86_64-gdb
resolving dependencies...
looking for conflicting packages...

Packages (8) mingw-w64-x86_64-expat-2.2.9-9002
             mingw-w64-x86_64-gettext-0.19.8.1-9002
             mingw-w64-x86_64-libsystre-1.0.1-9002
             mingw-w64-x86_64-libtre-git-r128.6fb7206-9002
             mingw-w64-x86_64-ncurses-6.1.20180526-9002
             mingw-w64-x86_64-readline-8.0.001-2
             mingw-w64-x86_64-termcap-1.3.1-9002
             mingw-w64-x86_64-gdb-8.3.1-9500

Total Download Size:    3.46 MiB
Total Installed Size:  83.77 MiB

:: Proceed with installation? [Y/n] y
:: Retrieving packages...
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cloud.r-project.org<http://cloud.r-project.org> : The requested URL returned error: 404
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from cran.r-project.org<http://cran.r-project.org> : The requested URL returned error: 404
error: failed retrieving file 'mingw-w64-x86_64-gdb-8.3.1-9500-any.pkg.tar.xz' from dl.bintray.com<http://dl.bintray.com> : The requested URL returned error: 404
warning: failed to retrieve some files
error: failed to commit transaction (failed to retrieve some files)
Errors occurred, no packages were upgraded.

Something very similar happens if I try the 32bit version.

Do you have any suggestions?

 - I used to have this stuff working OK with R3.6/RTOOLS35 but have not needed to go back to C for a while. The version of gdb in RTOOLS is 7.9.1; I tried copying that gdb.exe into RTOOLS40 but it just exited instantly when I tried to run it from there.

 - NB I have absolutely no idea what is meant by msys2 or pacman or any of that, I'm just following instructions...


Thanks
Mark




Mark Bravington
CSIRO Marine Lab
Hobart
Australia

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel
--
Sent from Gmail Mobile


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 15 15:31:31 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 15 Apr 2021 15:31:31 +0200
Subject: [Rd] nchar(x, type = "bytes") seems slower than it could be
In-Reply-To: <db975d51-5bab-cdad-142e-336ca447ed58@gmail.com>
References: <CAJmOi+M9=objncOAZh=5-BVy_VxUfbhhErgz5=6BHA60WTaTkQ@mail.gmail.com>
 <db975d51-5bab-cdad-142e-336ca447ed58@gmail.com>
Message-ID: <f2e40bd7-b2cc-824a-94f4-059b44e5b183@gmail.com>

For reference, fixed in R-devel (80153).
Tomas

On 3/30/21 10:20 AM, Tomas Kalibera wrote:
> Thanks for the report, you are probably running into the overhead of 
> the eager creation of the error message. On my system, with your 
> micro-benchmark, it is about 10x. I've tested simply by uncommenting 
> it and re-running the benchmark. I'll fix (this is not a good task for 
> a contributed patch).
>
> Best,
> Tomas
>
> On 3/30/21 8:02 AM, Hugh Parsonage wrote:
>> While profiling some C code, I rolled my own nchar function which
>> appears to be much faster than base R's (25 times faster for a 10M
>> length vector).? Obviously base::nchar provides significantly more
>> features than my barebones function (C snippet below); however, for
>> argument type = "bytes" it seems that the R_nchar and do_nchar
>> functions do not actually do anything more than this function.
>> My suspicion is that I have overlooked some subtlety in the base R
>> code, or that my benchmarks are not representative. Alternatively,
>> the action in `do_nchar` of preparing the potential error message
>> before being passed to `R_nchar` may be quite costly indeed.? Or the
>> function cannot be unswitched from the more complex width and chars
>> arguments by the compiler.
>>
>> If I haven't missed something, would a patch be warranted?
>>
>> SEXP Cnchar(SEXP x) {
>> ?? R_xlen_t N = xlength(x);
>> ?? SEXP ans = PROTECT(allocVector(INTSXP, N));
>> ?? int * restrict ansp = INTEGER(ans);
>>
>> ?? // Ignoring NA to avoid the branch has a very small
>> ?? // impact on performance.
>> ?? for (R_xlen_t i = 0; i < N; ++i) {
>> ???? SEXP sxi = STRING_ELT(x, i);
>> ???? if (sxi == NA_STRING) {
>> ?????? ansp[i] = NA_INTEGER;
>> ?????? continue;
>> ???? }
>> ???? ansp[i] = length(sxi);
>> ?? }
>> ?? UNPROTECT(1);
>> ?? return ans;
>> }
>>
>> x <- rep_len(c(as.character(c(5L, 1:1e6)), NA_character_, 1e6:15e5), 
>> 1e7)
>> Cnchar(x)
>> 90ms
>> nchar(x, type = "bytes")
>> 2500 ms
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From kry|ov@r00t @end|ng |rom gm@||@com  Thu Apr 15 16:35:18 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Thu, 15 Apr 2021 17:35:18 +0300
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
Message-ID: <20210415173518.795131a4@arachnoid>

Hello Ryan,

Sorry for not responding right away -- it took me a while to remember
what I meant back then :)

On Fri, 9 Apr 2021 23:34:13 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

> Program received signal SIGSEGV, Segmentation fault.
> bcEval.R (body=0x3eb7748, rho=0x3f72770, useCache=TRUE)
> at /scratch/novosirj/install-files/R-4.0.5/src/main/eval.c:6478
> 6478      codebase = pc = BCCODE(body);
> (gdb) print R_EvalDepth
> $1 = 2729
> (gdb) print R_Expressions
> $2 = 5000
> (gdb) print R_CStackStart
> $3 = 140737488207872
> (gdb) print R_CStackLimit
> $4 = 7969177

> [novosirj at amarel-test2 bin]$ ulimit -s
> 8192

So far I can only say that you get the same ulimit -s of 8192 and
R_CStackLimit of 8192 * 1024 * .95 that I get on my current machine
(and now it's the stack size limit that's reached first, not expression
depth limit). Let's try to get more information.

When you get the SIGSEGV,

1) What does print $_siginfo._sifields._sigfault show? Try printing at
least $_siginfo if the first command gives you an error.

2) When you get the crash, is the body argument accessible? What does
print *body show?

3) What are the addresses of the local variables when the crash
happens? Specifically, what do the following commands show:

print &codebase
print &pc
print R_CStackDir * (R_CStackStart - (uintptr_t)&codebase)
print R_CStackDir * (R_CStackStart - (uintptr_t)&pc)

-- 
Best regards,
Ivan


From novo@|rj @end|ng |rom rutger@@edu  Fri Apr 16 00:46:56 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Thu, 15 Apr 2021 22:46:56 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <20210415173518.795131a4@arachnoid>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
Message-ID: <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>

> On Apr 15, 2021, at 10:35 AM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> Hello Ryan,
> 
> Sorry for not responding right away -- it took me a while to remember
> what I meant back then :)

There was a long pause there, as I didn?t get to try out those debugging instructions from Frederik right away. They worked great Happy for any assistance whenever I can get it! Thanks!

Was able to get all of that output, though I wish I had a clue what any of it meant. Let me know if there?s other stuff that would be helpful.

I should probably note that I?m running this as: ./R -d gdb-ia from within $BUILDIR/bin. gdb-ia appears to be the Intel copy of gdb (they had their own debugger but eliminated it sometime back).

> So far I can only say that you get the same ulimit -s of 8192 and
> R_CStackLimit of 8192 * 1024 * .95 that I get on my current machine
> (and now it's the stack size limit that's reached first, not expression
> depth limit). Let's try to get more information.
> 
> When you get the SIGSEGV,
> 
> 1) What does print $_siginfo._sifields._sigfault show? Try printing at
> least $_siginfo if the first command gives you an error.

(gdb) print $_siginfo._sifields._sigfault
$1 = {si_addr = 0x7fffff7fecf8, _addr_lsb = 0, _addr_bnd = {_lower = 0xffff9215f829ff58, _upper = 0x7fffff7fecf8}}

> 2) When you get the crash, is the body argument accessible? What does
> print *body show?

(gdb) print *body
$2 = {sxpinfo = {type = 21, scalar = 0, obj = 0, alt = 0, gp = 0, mark = 0, debug = 0, trace = 0, spare = 0, gcgen = 0, gccls = 0, 
    named = 4, extra = 0}, attrib = 0x16fa4f0, gengc_next_node = 0x3eb7710, gengc_prev_node = 0x3eb7780, u = {primsxp = {offset = 44368248}, 
    symsxp = {pname = 0x2a50178, value = 0x1b66098, internal = 0x16fa4f0}, listsxp = {carval = 0x2a50178, cdrval = 0x1b66098, 
      tagval = 0x16fa4f0}, envsxp = {frame = 0x2a50178, enclos = 0x1b66098, hashtab = 0x16fa4f0}, closxp = {formals = 0x2a50178, 
      body = 0x1b66098, env = 0x16fa4f0}, promsxp = {value = 0x2a50178, expr = 0x1b66098, env = 0x16fa4f0}}}

> 3) What are the addresses of the local variables when the crash
> happens? Specifically, what do the following commands show:
> 
> print &codebase
> print &pc
> print R_CStackDir * (R_CStackStart - (uintptr_t)&codebase)
> print R_CStackDir * (R_CStackStart - (uintptr_t)&pc)

(gdb) print &codebase
$3 = (BCODE **) 0x7fffff7ff360
(gdb) print &pc
$4 = (BCODE **) 0x7fffff7ff358
(gdb) print R_CStackDir * (R_CStackStart - (uintptr_t)&codebase)
$5 = 18446744073701307232
(gdb) print R_CStackDir * (R_CStackStart - (uintptr_t)&pc)
$6 = 18446744073701307224

--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From pd@me@ @end|ng |rom cb@@dk  Fri Apr 16 12:41:21 2021
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Fri, 16 Apr 2021 10:41:21 +0000
Subject: [Rd] R 4.1.0 scheduled for May 18
Message-ID: <3AB91EC3-24D7-4BCE-9B65-C47FF351A22B@cbs.dk>

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From morg@n@em@||box @end|ng |rom gm@||@com  Fri Apr 16 13:11:39 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Fri, 16 Apr 2021 12:11:39 +0100
Subject: [Rd] R Console Bug?
Message-ID: <CAL0QV_P+OLYy51=q5k-kd75ESy4fLyNCoW97e=Vf3X7Dq=hGyw@mail.gmail.com>

Hi,

I am getting a really weird behaviour with the R console.
Here is the code to reproduce it.

1/ C code: ---------------------------------------------------

SEXP printtest(SEXP x) {
  const int PBWIDTH = 30, loop = INTEGER(x)[0];
  int val, lpad;
  double perc;
  char PBSTR[PBWIDTH], PBOUT[PBWIDTH];
  memset(PBSTR,'=', sizeof(PBSTR));
  memset(PBOUT,'-', sizeof(PBOUT));
  for (int k = 0; k < 3; ++k) {
    REprintf("\n   Processing data chunk %d of 3\n",k+1);
    for (int i = 0; i < loop; ++i) {
      perc = (double) i/(loop-1);
      val  = (int) (perc * 100);
      lpad = (int) (perc * PBWIDTH);
      REprintf("\r [%.*s%.*s] %3d%%", lpad, PBSTR, PBWIDTH - lpad, PBOUT,
val);
      R_FlushConsole();
    }
    REprintf("\n");
  }
  return R_NilValue;
}

2/ Build so/dll: ---------------------------------------------------

R CMD SHLIB

3/ Run code :  ---------------------------------------------------

dyn.load("test.so")
.Call("printtest",1e4L)
dyn.unload("test.so")

4/ Issue:  ---------------------------------------------------
If you run the above code in RStudio, it works well both on Mac and Windows.
If you run it in Windows cmd, it is slow.
If you run it in Windows RGui, it is slow but also all texts are flushed.
If you run it in Mac terminal, it runs perfectly.
If you run it in Mac R Console, it prints something like :
> .Call("printtest",1e4L)
 [==============================] 100%NULL----------------------------]   0%

I am using R 4.0.4 (Mac) / 4.0.5 (Windows)

Is that a bug or am I doing something wrong?

Thank you
Best regards,
Morgan

	[[alternative HTML version deleted]]


From jeroenoom@ @end|ng |rom gm@||@com  Fri Apr 16 13:17:31 2021
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Fri, 16 Apr 2021 13:17:31 +0200
Subject: [Rd] problem adding gdb to RTOOLS40 on Windows
In-Reply-To: <MEAPR01MB240709000DD0CF0CE8DCA8ACB44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
References: <MEAPR01MB2407408B209FA397B5B080D8B44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
 <e3c3a842457046a6a48060647493b600@hum.leidenuniv.nl>
 <CAL6gwnKeSsHM12LKbaoe=HD9J--R1LD9gLpMPF_N9HcCdDynbg@mail.gmail.com>
 <MEAPR01MB240709000DD0CF0CE8DCA8ACB44D9@MEAPR01MB2407.ausprd01.prod.outlook.com>
Message-ID: <CABFfbXsPmLaRZHYA7BUTgN2wQFdCZvaRx4H3kOm8=fLZMm8wLw@mail.gmail.com>

On Thu, Apr 15, 2021 at 10:19 AM Bravington, Mark (Data61, Hobart)
<Mark.Bravington at data61.csiro.au> wrote:
>
> Excellent, thank you all. Doing "pacman -Syu" before "pacman -S gdb...." did the trick, and yes it's a different version of gdb compared to what pacman was previously trying to install. Might be worth updating the RTOOLS40 documentation to recommend doing -Syu first.

OK I have added a line to the docs. FYI, you can combine the two
commands into one:

  pacman -Sy mingw-w64-x86_64-gdb

This will first update the repository index (-y) and the install the package.


From kry|ov@r00t @end|ng |rom gm@||@com  Fri Apr 16 18:12:46 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 16 Apr 2021 19:12:46 +0300
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
Message-ID: <20210416191246.40d08aa0@arachnoid>

On Thu, 15 Apr 2021 22:46:56 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

> (gdb) print $_siginfo._sifields._sigfault
> $1 = {
>  si_addr = 0x7fffff7fecf8, _addr_lsb = 0,
>  _addr_bnd = {_lower = 0xffff9215f829ff58, _upper = 0x7fffff7fecf8}
> }

> (gdb) print R_CStackDir * (R_CStackStart - (uintptr_t)&codebase)
> $5 = 18446744073701307232

Okay, this is clearly a stack overflow: the faulting address is close
to addresses of other stack variables, and the stack usage, calculated
manually as 140737488207872 - 0x7fffff7ff360, is 8244392, which is
above the (7969177), but the value that gdb gives you looks really
strange. I could only get that value when I calculated
-1 * (140737488207872 - 0x7fffff7ff360) and reinterpreted it as
unsigned.

What is the value of R_CStackDir at the moment of crash? Could it have
somehow became -1 despite the stack growing down?

-- 
Best regards,
Ivan


From novo@|rj @end|ng |rom rutger@@edu  Fri Apr 16 20:06:51 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Fri, 16 Apr 2021 18:06:51 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <20210416191246.40d08aa0@arachnoid>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
Message-ID: <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>

> On Apr 16, 2021, at 12:12 PM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Thu, 15 Apr 2021 22:46:56 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
>> (gdb) print $_siginfo._sifields._sigfault
>> $1 = {
>> si_addr = 0x7fffff7fecf8, _addr_lsb = 0,
>> _addr_bnd = {_lower = 0xffff9215f829ff58, _upper = 0x7fffff7fecf8}
>> }
> 
>> (gdb) print R_CStackDir * (R_CStackStart - (uintptr_t)&codebase)
>> $5 = 18446744073701307232
> 
> Okay, this is clearly a stack overflow: the faulting address is close
> to addresses of other stack variables, and the stack usage, calculated
> manually as 140737488207872 - 0x7fffff7ff360, is 8244392, which is
> above the (7969177), but the value that gdb gives you looks really
> strange. I could only get that value when I calculated
> -1 * (140737488207872 - 0x7fffff7ff360) and reinterpreted it as
> unsigned.
> 
> What is the value of R_CStackDir at the moment of crash? Could it have
> somehow became -1 despite the stack growing down?

Well it definitely somehow could have, since it did:

Program received signal SIGSEGV, Segmentation fault.
bcEval.R (body=0x3eb7748, rho=0x3f72770, useCache=TRUE) at /scratch/novosirj/install-files/R-4.0.5/src/main/eval.c:6478
6478      codebase = pc = BCCODE(body);

(gdb) print R_CStackDir
$1 = -1

--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From kry|ov@r00t @end|ng |rom gm@||@com  Fri Apr 16 20:32:00 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 16 Apr 2021 21:32:00 +0300
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
Message-ID: <20210416213200.6f09ad4f@Tarkus>

On Fri, 16 Apr 2021 18:06:51 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

> Well it definitely somehow could have, since it did

Wow! This is strange, but at least it should be easy to fix. Try editing
the config.site file in the root of the R source directory and setting
R_C_STACK_DIRECTION=down there. (Make sure to uncomment the line!)
Re-run .../configure, make sure that src/include/config.h contains
#define C_STACK_DIRECTION 1 and build R again.

Does the crash go away? If it does, are you interested in finding out
what went wrong in the configure test for stack direction?

There are lines in m4/R.m4 that I'm not sure I understand:

    if test ${?} = 1; then
      r_cv_cstack_direction=down
    elif test ${?} = 1; then
      r_cv_cstack_direction=up
    fi

How can elif branch have the same condition as the if branch? Shouldn't
the second test had been for $? = 255? On the other hand, if the elif
branch was never taken, how did R_CStackDir become -1?

-- 
Best regards,
Ivan


From novo@|rj @end|ng |rom rutger@@edu  Fri Apr 16 20:39:04 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Fri, 16 Apr 2021 18:39:04 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <20210416213200.6f09ad4f@Tarkus>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
Message-ID: <98C3289B-49EC-454E-A769-F3AF7E19C57C@rutgers.edu>

> On Apr 16, 2021, at 2:32 PM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Fri, 16 Apr 2021 18:06:51 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
>> Well it definitely somehow could have, since it did
> 
> Wow! This is strange, but at least it should be easy to fix. Try editing
> the config.site file in the root of the R source directory and setting
> R_C_STACK_DIRECTION=down there. (Make sure to uncomment the line!)
> Re-run .../configure, make sure that src/include/config.h contains
> #define C_STACK_DIRECTION 1 and build R again.
> 
> Does the crash go away?

Will give it a shot, thanks, that?s great!

> If it does, are you interested in finding out
> what went wrong in the configure test for stack direction?

I?m interested in putting in the time to make this build/the tests succeed for anyone else who wants to use R with the Intel Parallel Studio/oneAPI for sure. I?m not actually sure whether it makes much difference, vs. gcc, beyond using the MKL for BLAS/LAPACK, but we do pay for this compiler, and try to use it anytime we might get a slight boost out of it. One of the reasons too is that it can do auto-vectorization and build fat binaries for the various processor instruction sets. I don?t know how much that matters in R either, but if we can get the best performance out of our system-wide install from that, we want to do it.

> There are lines in m4/R.m4 that I'm not sure I understand:
> 
>    if test ${?} = 1; then
>      r_cv_cstack_direction=down
>    elif test ${?} = 1; then
>      r_cv_cstack_direction=up
>    fi
> 
> How can elif branch have the same condition as the if branch? Shouldn't
> the second test had been for $? = 255? On the other hand, if the elif
> branch was never taken, how did R_CStackDir become -1?

IANAm4P, but that does seem like a pretty good question. I guess there?s probably some mode of m4 I could run against that and see if there?s any indication?

--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Apr 17 01:36:09 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 17 Apr 2021 11:36:09 +1200
Subject: [Rd] R Console Bug?
In-Reply-To: <CAL0QV_P+OLYy51=q5k-kd75ESy4fLyNCoW97e=Vf3X7Dq=hGyw@mail.gmail.com>
References: <CAL0QV_P+OLYy51=q5k-kd75ESy4fLyNCoW97e=Vf3X7Dq=hGyw@mail.gmail.com>
Message-ID: <F7AB3539-5A73-4C7C-8764-BB35E13DDDE0@R-project.org>


Sorry, unable to reproduce on macOS, in R console:

> dyn.load("test.so")
> .Call("printtest",1e4L)

   Processing data chunk 1 of 3
 [==============================] 100%

   Processing data chunk 2 of 3
 [==============================] 100%

   Processing data chunk 3 of 3
 [==============================] 100%
NULL

But honestly I'm not sure sure I understand the report. R_FlushConsole is a no-op for terminal console and your code just prints on stderr anyway (which is not buffered). All this does is just a lot of \r output (which is highly inefficient anywhere but in Terminal by definition). Can you clarify what the code tries to trigger?

Cheers,
Simon


> On Apr 16, 2021, at 23:11, Morgan Morgan <morgan.emailbox at gmail.com> wrote:
> 
> Hi,
> 
> I am getting a really weird behaviour with the R console.
> Here is the code to reproduce it.
> 
> 1/ C code: ---------------------------------------------------
> 
> SEXP printtest(SEXP x) {
>  const int PBWIDTH = 30, loop = INTEGER(x)[0];
>  int val, lpad;
>  double perc;
>  char PBSTR[PBWIDTH], PBOUT[PBWIDTH];
>  memset(PBSTR,'=', sizeof(PBSTR));
>  memset(PBOUT,'-', sizeof(PBOUT));
>  for (int k = 0; k < 3; ++k) {
>    REprintf("\n   Processing data chunk %d of 3\n",k+1);
>    for (int i = 0; i < loop; ++i) {
>      perc = (double) i/(loop-1);
>      val  = (int) (perc * 100);
>      lpad = (int) (perc * PBWIDTH);
>      REprintf("\r [%.*s%.*s] %3d%%", lpad, PBSTR, PBWIDTH - lpad, PBOUT,
> val);
>      R_FlushConsole();
>    }
>    REprintf("\n");
>  }
>  return R_NilValue;
> }
> 
> 2/ Build so/dll: ---------------------------------------------------
> 
> R CMD SHLIB
> 
> 3/ Run code :  ---------------------------------------------------
> 
> dyn.load("test.so")
> .Call("printtest",1e4L)
> dyn.unload("test.so")
> 
> 4/ Issue:  ---------------------------------------------------
> If you run the above code in RStudio, it works well both on Mac and Windows.
> If you run it in Windows cmd, it is slow.
> If you run it in Windows RGui, it is slow but also all texts are flushed.
> If you run it in Mac terminal, it runs perfectly.
> If you run it in Mac R Console, it prints something like :
>> .Call("printtest",1e4L)
> [==============================] 100%NULL----------------------------]   0%
> 
> I am using R 4.0.4 (Mac) / 4.0.5 (Windows)
> 
> Is that a bug or am I doing something wrong?
> 
> Thank you
> Best regards,
> Morgan
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From novo@|rj @end|ng |rom rutger@@edu  Sat Apr 17 02:13:42 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Sat, 17 Apr 2021 00:13:42 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 errors in "make check" on CentOS 7.7-7.9
In-Reply-To: <20210416213200.6f09ad4f@Tarkus>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
Message-ID: <D6476812-2DF3-448A-8C03-72E47C74AC1A@rutgers.edu>

> On Apr 16, 2021, at 2:32 PM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Fri, 16 Apr 2021 18:06:51 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
>> Well it definitely somehow could have, since it did
> 
> Wow! This is strange, but at least it should be easy to fix. Try editing
> the config.site file in the root of the R source directory and setting
> R_C_STACK_DIRECTION=down there. (Make sure to uncomment the line!)
> Re-run .../configure, make sure that src/include/config.h contains
> #define C_STACK_DIRECTION 1 and build R again.
> 
> Does the crash go away?

So, it does, and no other crashes, though the checks fail in a couple of places, and the final status is error: in tests/reg-tests-1d.R, and also reg-packages.R (those are the only two that have .Rout.fail files). 

make[3]: Entering directory `/scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/tests'
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/array-subset.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-tests-1a.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-tests-1b.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-tests-1c.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-tests-1d.R' ...make[3]: *** [reg-tests-1d.Rout] Error 1
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-tests-2.R' ... OK
  comparing 'reg-tests-2.Rout' to '/scratch/novosirj/install-files/R-4.0.5/tests/reg-tests-2.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-examples1.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-examples2.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-packages.R' ...make[3]: *** [reg-packages.Rout] Error 1
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/p-qbeta-strict-tst.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/r-strict-tst.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-IO.R' ... OK
  comparing 'reg-IO.Rout' to '/scratch/novosirj/install-files/R-4.0.5/tests/reg-IO.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-IO2.R' ... OK
  comparing 'reg-IO2.Rout' to '/scratch/novosirj/install-files/R-4.0.5/tests/reg-IO2.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-plot.R' ... OK
  comparing 'reg-plot.pdf' to '/scratch/novosirj/install-files/R-4.0.5/tests/reg-plot.pdf.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-S4-examples.R' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.5/tests/reg-BLAS.R' ... OK
make[3]: Leaving directory `/scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/tests'
make[2]: *** [test-Reg] Error 2
make[2]: Leaving directory `/scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/tests'
make[1]: *** [test-all-basics] Error 1
make[1]: Target `check' not remade because of errors.
make[1]: Leaving directory `/scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/tests'
make: *** [check] Error 2

I?m a little new to reading these results, so I?m not sure exactly what I?m looking for. I?ve shared them in the event that what I put in this e-mail is useless:

reg-tests-1d.Rout.fail: https://rutgersconnect-my.sharepoint.com/:u:/g/personal/novosirj_oarc_rutgers_edu/EYK2JHWQ1-9Dvu6gK9lrkRIBkEyA4QqkeH7C4gmbAYyBBQ?e=lfGJL7
reg-packages.Rout.fail: https://rutgersconnect-my.sharepoint.com/:u:/g/personal/novosirj_oarc_rutgers_edu/EazCjI6fRnNKhQASFPeySBUBENVpCqCljFg3-sokBZJnAw?e=8lwywe

Anyhow, there appear to be a number of places, if I have this right:

[novosirj at amarel-test2 tests]$ grep -i -B2 ^error reg-packages.Rout.fail
building package exSexpr ...
Converting Rd files to LaTeX 
Error in texi2dvi(file = file, pdf = TRUE, clean = clean, quiet = quiet,  : 
  pdflatex is not available
Error in texi2dvi(file = file, pdf = TRUE, clean = clean, quiet = quiet,  : 
  pdflatex is not available
Error in running tools::texi2pdf()
--
Hmm ... looks like a package
Creating pdf output from LaTeX ...
Error: R CMD build failed (no tarball) for package exSexpr

These maybe seem like they?re OK, and if I don?t have pdf2latex, they?re expected? Unless I should be looking for something else other than ?^Error?. That seemed like the only place something could be going wrong.

For the regression tests, these seem like some of them are actual problems, but maybe someone here knows if some are expected?

[novosirj at amarel-test2 R-4.0.5-intel-19.1-build]$ grep -i -B2 "Asserted error" tests/reg-tests-1d.Rout.fail 
> op <- options(device=function(...){}) # non-sense device
> tools::assertError(plot.new(), verbose = TRUE)
Asserted error: no active device and default getOption("device") is invalid
> if(no.grid <- !("grid" %in% loadedNamespaces())) requireNamespace("grid")
> tools::assertError(grid::grid.newpage(), verbose = TRUE)
Asserted error: no active device and default getOption("device") is invalid
--
> aKnots <- c(rep(0, 4), c(0.3, 0.5, 0.6), rep(1, 4))
> tools::assertError(splines::splineDesign(aKnots, x, derivs = 4), verbose = TRUE)
Asserted error: derivs = 4 >= ord = 4, but should be in {0,..,ord-1}
--
> ## Failed to work after r76382--8:
> tools::assertError(formula("3"), verbose=TRUE)
Asserted error: invalid formula "3": not a call
--
> noC <- structure(datasets::trees, class = c("noCol", "data.frame"))
> tools::assertError( noC[1,2], verbose=TRUE) # fails indeed
Asserted error:  [!] Column subscripts not allowed
--
> t2 <- lapply(Alis, head, 2)
> tools::assertError( head(Alis[[1]], c(1, NA)), verbose=TRUE)
Asserted error: invalid 'n' - length(n) must be <= length(dim(x)), got 2 > 1
> tools::assertError( tail(1:5, c(1, NA)), verbose=TRUE)
Asserted error: invalid 'n' - must have length one when dim(x) is NULL, got 2
--
> Foolis <- lapply(Alis, `class<-`, "foo")
> tools::assertError( head(Foolis[[1]], c(1, NA)), verbose=TRUE)
Asserted error: invalid 'n' - length(n) must be <= length(dim(x)), got 2 > 1
--
> tools::assertError(cbind(ts(1:2, start = 0.5, end = 1.5),
+                        ts(1:2, start = 0  , end = 1)), verbose=TRUE)
Asserted error: not all series have the same phase
--
> ## stopifnot() custom message now via <named> args:
> e <- tools::assertError(stopifnot("ehmm, you must be kidding!" = 1 == 0), verbose=TRUE)
Asserted error: ehmm, you must be kidding!
--
> e2 <- tools::assertError(
+  stopifnot("2 is not approximately 2.1" = all.equal(2, 2.1)), verbose=TRUE)
Asserted error: 2 is not approximately 2.1

Thanks again for your help!

--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From morg@n@em@||box @end|ng |rom gm@||@com  Sat Apr 17 09:26:54 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Sat, 17 Apr 2021 08:26:54 +0100
Subject: [Rd] R Console Bug?
In-Reply-To: <F7AB3539-5A73-4C7C-8764-BB35E13DDDE0@R-project.org>
References: <CAL0QV_P+OLYy51=q5k-kd75ESy4fLyNCoW97e=Vf3X7Dq=hGyw@mail.gmail.com>
 <F7AB3539-5A73-4C7C-8764-BB35E13DDDE0@R-project.org>
Message-ID: <CAL0QV_N1MUL79TYV24MzNtVQDM3KYa-VNFpokHfcSTFf_3G_Uw@mail.gmail.com>

Hi Simon,
Thank you for the feedback.
It is really strange that you have a different output.
I have attached a picture of my R console.
I am just trying to port some pure C code that prints progress bars to R
but it does not seem to be printing properly.
It seems I am doing something wrong with REprintf and R_FlushConsole.
Best regards,
Morgan

On Sat, Apr 17, 2021 at 12:36 AM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Sorry, unable to reproduce on macOS, in R console:
>
> > dyn.load("test.so")
> > .Call("printtest",1e4L)
>
>    Processing data chunk 1 of 3
>  [==============================] 100%
>
>    Processing data chunk 2 of 3
>  [==============================] 100%
>
>    Processing data chunk 3 of 3
>  [==============================] 100%
> NULL
>
> But honestly I'm not sure sure I understand the report. R_FlushConsole is
> a no-op for terminal console and your code just prints on stderr anyway
> (which is not buffered). All this does is just a lot of \r output (which is
> highly inefficient anywhere but in Terminal by definition). Can you clarify
> what the code tries to trigger?
>
> Cheers,
> Simon
>
>
> > On Apr 16, 2021, at 23:11, Morgan Morgan <morgan.emailbox at gmail.com>
> wrote:
> >
> > Hi,
> >
> > I am getting a really weird behaviour with the R console.
> > Here is the code to reproduce it.
> >
> > 1/ C code: ---------------------------------------------------
> >
> > SEXP printtest(SEXP x) {
> >  const int PBWIDTH = 30, loop = INTEGER(x)[0];
> >  int val, lpad;
> >  double perc;
> >  char PBSTR[PBWIDTH], PBOUT[PBWIDTH];
> >  memset(PBSTR,'=', sizeof(PBSTR));
> >  memset(PBOUT,'-', sizeof(PBOUT));
> >  for (int k = 0; k < 3; ++k) {
> >    REprintf("\n   Processing data chunk %d of 3\n",k+1);
> >    for (int i = 0; i < loop; ++i) {
> >      perc = (double) i/(loop-1);
> >      val  = (int) (perc * 100);
> >      lpad = (int) (perc * PBWIDTH);
> >      REprintf("\r [%.*s%.*s] %3d%%", lpad, PBSTR, PBWIDTH - lpad, PBOUT,
> > val);
> >      R_FlushConsole();
> >    }
> >    REprintf("\n");
> >  }
> >  return R_NilValue;
> > }
> >
> > 2/ Build so/dll: ---------------------------------------------------
> >
> > R CMD SHLIB
> >
> > 3/ Run code :  ---------------------------------------------------
> >
> > dyn.load("test.so")
> > .Call("printtest",1e4L)
> > dyn.unload("test.so")
> >
> > 4/ Issue:  ---------------------------------------------------
> > If you run the above code in RStudio, it works well both on Mac and
> Windows.
> > If you run it in Windows cmd, it is slow.
> > If you run it in Windows RGui, it is slow but also all texts are flushed.
> > If you run it in Mac terminal, it runs perfectly.
> > If you run it in Mac R Console, it prints something like :
> >> .Call("printtest",1e4L)
> > [==============================] 100%NULL----------------------------]
>  0%
> >
> > I am using R 4.0.4 (Mac) / 4.0.5 (Windows)
> >
> > Is that a bug or am I doing something wrong?
> >
> > Thank you
> > Best regards,
> > Morgan
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Screenshot 2021-04-17.png
Type: image/png
Size: 73830 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20210417/8b230984/attachment.png>

From @|mon@urb@nek @end|ng |rom R-project@org  Sat Apr 17 10:29:17 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 17 Apr 2021 20:29:17 +1200
Subject: [Rd] R Console Bug?
In-Reply-To: <CAL0QV_N1MUL79TYV24MzNtVQDM3KYa-VNFpokHfcSTFf_3G_Uw@mail.gmail.com>
References: <CAL0QV_P+OLYy51=q5k-kd75ESy4fLyNCoW97e=Vf3X7Dq=hGyw@mail.gmail.com>
 <F7AB3539-5A73-4C7C-8764-BB35E13DDDE0@R-project.org>
 <CAL0QV_N1MUL79TYV24MzNtVQDM3KYa-VNFpokHfcSTFf_3G_Uw@mail.gmail.com>
Message-ID: <DC2BEAC9-8849-41CE-A04C-EFC369C25E5A@R-project.org>


Ah, so you're not using R console, you're using the R.app Mac-GUI. That one is not a terminal, so it has entirely different rules, because it is combining all four streams (stdout, stderr and WriteConsole for both output and message). Also for historical reasons macOS (the original) used to use \r as newline (unix has \n and Windows has \r\n) - for that reason your combination of \n\r doesn't work since it is ambiguous in the Mac context and treated as CR. If you want a proper newline, you can change your example to something like

   REprintf("\n   Processing data chunk %d of 3\n ",k+1);

Which makes sure the \n is interpreted as \r\n first and only then you follow with \r. I suppose we could sunset the special handling of \r since it is likely quite rare to see Mac line endings these days... you could file an issue against Mac-GUI. 

Cheers,
Simon



> On Apr 17, 2021, at 19:26, Morgan Morgan <morgan.emailbox at gmail.com> wrote:
> 
> Hi Simon,
> Thank you for the feedback.
> It is really strange that you have a different output.
> I have attached a picture of my R console.
> I am just trying to port some pure C code that prints progress bars to R but it does not seem to be printing properly.
> It seems I am doing something wrong with REprintf and R_FlushConsole.
> Best regards,
> Morgan
> 
> On Sat, Apr 17, 2021 at 12:36 AM Simon Urbanek <simon.urbanek at r-project.org> wrote:
> Sorry, unable to reproduce on macOS, in R console:
> 
> > dyn.load("test.so")
> > .Call("printtest",1e4L)
> 
>    Processing data chunk 1 of 3
>  [==============================] 100%
> 
>    Processing data chunk 2 of 3
>  [==============================] 100%
> 
>    Processing data chunk 3 of 3
>  [==============================] 100%
> NULL
> 
> But honestly I'm not sure sure I understand the report. R_FlushConsole is a no-op for terminal console and your code just prints on stderr anyway (which is not buffered). All this does is just a lot of \r output (which is highly inefficient anywhere but in Terminal by definition). Can you clarify what the code tries to trigger?
> 
> Cheers,
> Simon
> 
> 
> > On Apr 16, 2021, at 23:11, Morgan Morgan <morgan.emailbox at gmail.com> wrote:
> > 
> > Hi,
> > 
> > I am getting a really weird behaviour with the R console.
> > Here is the code to reproduce it.
> > 
> > 1/ C code: ---------------------------------------------------
> > 
> > SEXP printtest(SEXP x) {
> >  const int PBWIDTH = 30, loop = INTEGER(x)[0];
> >  int val, lpad;
> >  double perc;
> >  char PBSTR[PBWIDTH], PBOUT[PBWIDTH];
> >  memset(PBSTR,'=', sizeof(PBSTR));
> >  memset(PBOUT,'-', sizeof(PBOUT));
> >  for (int k = 0; k < 3; ++k) {
> >    REprintf("\n   Processing data chunk %d of 3\n",k+1);
> >    for (int i = 0; i < loop; ++i) {
> >      perc = (double) i/(loop-1);
> >      val  = (int) (perc * 100);
> >      lpad = (int) (perc * PBWIDTH);
> >      REprintf("\r [%.*s%.*s] %3d%%", lpad, PBSTR, PBWIDTH - lpad, PBOUT,
> > val);
> >      R_FlushConsole();
> >    }
> >    REprintf("\n");
> >  }
> >  return R_NilValue;
> > }
> > 
> > 2/ Build so/dll: ---------------------------------------------------
> > 
> > R CMD SHLIB
> > 
> > 3/ Run code :  ---------------------------------------------------
> > 
> > dyn.load("test.so")
> > .Call("printtest",1e4L)
> > dyn.unload("test.so")
> > 
> > 4/ Issue:  ---------------------------------------------------
> > If you run the above code in RStudio, it works well both on Mac and Windows.
> > If you run it in Windows cmd, it is slow.
> > If you run it in Windows RGui, it is slow but also all texts are flushed.
> > If you run it in Mac terminal, it runs perfectly.
> > If you run it in Mac R Console, it prints something like :
> >> .Call("printtest",1e4L)
> > [==============================] 100%NULL----------------------------]   0%
> > 
> > I am using R 4.0.4 (Mac) / 4.0.5 (Windows)
> > 
> > Is that a bug or am I doing something wrong?
> > 
> > Thank you
> > Best regards,
> > Morgan
> > 
> >       [[alternative HTML version deleted]]
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> 
> <Screenshot 2021-04-17.png>


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Apr 17 10:37:12 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 17 Apr 2021 20:37:12 +1200
Subject: [Rd] R Console Bug?
In-Reply-To: <DC2BEAC9-8849-41CE-A04C-EFC369C25E5A@R-project.org>
References: <CAL0QV_P+OLYy51=q5k-kd75ESy4fLyNCoW97e=Vf3X7Dq=hGyw@mail.gmail.com>
 <F7AB3539-5A73-4C7C-8764-BB35E13DDDE0@R-project.org>
 <CAL0QV_N1MUL79TYV24MzNtVQDM3KYa-VNFpokHfcSTFf_3G_Uw@mail.gmail.com>
 <DC2BEAC9-8849-41CE-A04C-EFC369C25E5A@R-project.org>
Message-ID: <8F6342A6-E82A-418D-BE3E-4A5B55C5D21A@R-project.org>


Just for completeness, This can be easily illustrated simply in R, no C code needed:

cat("foo\n\rbar\n")

In unix terminal:

> cat("foo\n\rbar\n")
foo
bar

In Mac-GUI:

> cat("foo\n\rbar\n")
bar


Cheers,
Simon



> On Apr 17, 2021, at 20:29, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Ah, so you're not using R console, you're using the R.app Mac-GUI. That one is not a terminal, so it has entirely different rules, because it is combining all four streams (stdout, stderr and WriteConsole for both output and message). Also for historical reasons macOS (the original) used to use \r as newline (unix has \n and Windows has \r\n) - for that reason your combination of \n\r doesn't work since it is ambiguous in the Mac context and treated as CR. If you want a proper newline, you can change your example to something like
> 
>   REprintf("\n   Processing data chunk %d of 3\n ",k+1);
> 
> Which makes sure the \n is interpreted as \r\n first and only then you follow with \r. I suppose we could sunset the special handling of \r since it is likely quite rare to see Mac line endings these days... you could file an issue against Mac-GUI. 
> 
> Cheers,
> Simon
> 
> 
> 
>> On Apr 17, 2021, at 19:26, Morgan Morgan <morgan.emailbox at gmail.com> wrote:
>> 
>> Hi Simon,
>> Thank you for the feedback.
>> It is really strange that you have a different output.
>> I have attached a picture of my R console.
>> I am just trying to port some pure C code that prints progress bars to R but it does not seem to be printing properly.
>> It seems I am doing something wrong with REprintf and R_FlushConsole.
>> Best regards,
>> Morgan
>> 
>> On Sat, Apr 17, 2021 at 12:36 AM Simon Urbanek <simon.urbanek at r-project.org> wrote:
>> Sorry, unable to reproduce on macOS, in R console:
>> 
>>> dyn.load("test.so")
>>> .Call("printtest",1e4L)
>> 
>>   Processing data chunk 1 of 3
>> [==============================] 100%
>> 
>>   Processing data chunk 2 of 3
>> [==============================] 100%
>> 
>>   Processing data chunk 3 of 3
>> [==============================] 100%
>> NULL
>> 
>> But honestly I'm not sure sure I understand the report. R_FlushConsole is a no-op for terminal console and your code just prints on stderr anyway (which is not buffered). All this does is just a lot of \r output (which is highly inefficient anywhere but in Terminal by definition). Can you clarify what the code tries to trigger?
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> On Apr 16, 2021, at 23:11, Morgan Morgan <morgan.emailbox at gmail.com> wrote:
>>> 
>>> Hi,
>>> 
>>> I am getting a really weird behaviour with the R console.
>>> Here is the code to reproduce it.
>>> 
>>> 1/ C code: ---------------------------------------------------
>>> 
>>> SEXP printtest(SEXP x) {
>>> const int PBWIDTH = 30, loop = INTEGER(x)[0];
>>> int val, lpad;
>>> double perc;
>>> char PBSTR[PBWIDTH], PBOUT[PBWIDTH];
>>> memset(PBSTR,'=', sizeof(PBSTR));
>>> memset(PBOUT,'-', sizeof(PBOUT));
>>> for (int k = 0; k < 3; ++k) {
>>>   REprintf("\n   Processing data chunk %d of 3\n",k+1);
>>>   for (int i = 0; i < loop; ++i) {
>>>     perc = (double) i/(loop-1);
>>>     val  = (int) (perc * 100);
>>>     lpad = (int) (perc * PBWIDTH);
>>>     REprintf("\r [%.*s%.*s] %3d%%", lpad, PBSTR, PBWIDTH - lpad, PBOUT,
>>> val);
>>>     R_FlushConsole();
>>>   }
>>>   REprintf("\n");
>>> }
>>> return R_NilValue;
>>> }
>>> 
>>> 2/ Build so/dll: ---------------------------------------------------
>>> 
>>> R CMD SHLIB
>>> 
>>> 3/ Run code :  ---------------------------------------------------
>>> 
>>> dyn.load("test.so")
>>> .Call("printtest",1e4L)
>>> dyn.unload("test.so")
>>> 
>>> 4/ Issue:  ---------------------------------------------------
>>> If you run the above code in RStudio, it works well both on Mac and Windows.
>>> If you run it in Windows cmd, it is slow.
>>> If you run it in Windows RGui, it is slow but also all texts are flushed.
>>> If you run it in Mac terminal, it runs perfectly.
>>> If you run it in Mac R Console, it prints something like :
>>>> .Call("printtest",1e4L)
>>> [==============================] 100%NULL----------------------------]   0%
>>> 
>>> I am using R 4.0.4 (Mac) / 4.0.5 (Windows)
>>> 
>>> Is that a bug or am I doing something wrong?
>>> 
>>> Thank you
>>> Best regards,
>>> Morgan
>>> 
>>>      [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> <Screenshot 2021-04-17.png>
> 


From kry|ov@r00t @end|ng |rom gm@||@com  Sat Apr 17 11:40:27 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sat, 17 Apr 2021 12:40:27 +0300
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <98C3289B-49EC-454E-A769-F3AF7E19C57C@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
 <98C3289B-49EC-454E-A769-F3AF7E19C57C@rutgers.edu>
Message-ID: <20210417124027.2fa95c29@parabola>

On Fri, 16 Apr 2021 18:39:04 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

> I guess there?s probably some mode of m4 I could run against that and
> see if there?s any indication?

Here's a shell script that should be doing the same thing that
R's .../configure does, but a bit more verbose:

-----------------------------------8<-----------------------------------
#!/bin/sh
cat > conftest1.c <<EOF
#include <stdint.h>
uintptr_t dummy_ii(void)
{
    int ii;

    /* This is intended to return a local address. We could just return
       (uintptr_t) &ii, but doing it indirectly through ii_addr avoids
       a compiler warning (-Wno-return-local-addr would do as well).
    */
    volatile uintptr_t ii_addr = (uintptr_t) &ii;
    return ii_addr;
}
EOF
cat > conftest.c <<EOF
#include <stdio.h>
#include <stdint.h>
extern uintptr_t dummy_ii(void);

typedef uintptr_t (*dptr_type)(void);
volatile dptr_type dummy_ii_ptr;

int main(int ac, char **av)
{
    int i;
    dummy_ii_ptr = dummy_ii;
        
    /* call dummy_ii via a volatile function pointer to prevent
       inlinining in case the tests are accidentally built with
       LTO */
    uintptr_t ii = dummy_ii_ptr();
#ifndef EXACTLY_AS_R_CONFIGURE
    printf(
        "main = %p, sub = %p, main %c sub, ret = %d\n",
        &i, (void*)ii,
        ((uintptr_t)&i > ii) ? '>' : ((uintptr_t)&i < ii) ? '<' : '=',
        ((uintptr_t)&i > ii) ? 1 : -1
    );
#endif
    /* 1 is downwards */
    return ((uintptr_t)&i > ii) ? 1 : -1;
}
EOF
echo "${CC:=cc} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} ${MAIN_LDFLAGS}" \
    "-o conftest conftest.c conftest1.c"
${CC} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} ${MAIN_LDFLAGS} -o conftest \
    conftest.c conftest1.c || exit $?
echo ./conftest
./conftest
ret=$?
echo "./conftest exited with $ret"
if test ${ret} = 1; then
  echo r_cv_cstack_direction=down
elif test ${ret} = 1; then
  echo r_cv_cstack_direction=up
fi
exit 0
-----------------------------------8<-----------------------------------

Please run it similarly to the way you run .../configure:

export CC=icc
export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
sh .../runme.sh

Does it give the right answer, that is, r_cv_cstack_direction=down?
Does the answer change if you add -DEXACTLY_AS_R_CONFIGURE to CFLAGS?
If the answer is always "down" and you have reused the build directory
(keeping the config.site file between .../configure runs), this is going
to be hard to track down. If you manage to get the "up" answer, it
should be possible to tweak the test until ICC doesn't optimise it to
the point of confusing the stack growth direction.

Either way, I think that the elif branch in the R_STACK_DIRECTION test
should be testing for $? = 255, not 1. I'm almost convinced that the
behaviour would be incorrect on platforms where the test exits with -1.

-- 
Best regards,
Ivan


From kry|ov@r00t @end|ng |rom gm@||@com  Sat Apr 17 11:52:09 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sat, 17 Apr 2021 12:52:09 +0300
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 errors in "make check" on CentOS 7.7-7.9
In-Reply-To: <D6476812-2DF3-448A-8C03-72E47C74AC1A@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
 <D6476812-2DF3-448A-8C03-72E47C74AC1A@rutgers.edu>
Message-ID: <20210417125209.18f8e41e@parabola>

On Sat, 17 Apr 2021 00:13:42 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

> reg-tests-1d.Rout.fail:
> https://rutgersconnect-my.sharepoint.com/:u:/g/personal/novosirj_oarc_rutgers_edu/EYK2JHWQ1-9Dvu6gK9lrkRIBkEyA4QqkeH7C4gmbAYyBBQ?e=lfGJL7
> reg-packages.Rout.fail:
> https://rutgersconnect-my.sharepoint.com/:u:/g/personal/novosirj_oarc_rutgers_edu/EazCjI6fRnNKhQASFPeySBUBENVpCqCljFg3-sokBZJnAw?e=8lwywe

Sorry, these links seem to be asking me to log in. Could you try a
"paste bin" service like https://paste.debian.net/?

> These maybe seem like they?re OK, and if I don?t have pdf2latex,
> they?re expected?

I've never tried to build R without TeX Live installed. Is there
anything about LaTeX-less installation in 'R Installation and
Administration'?

> For the regression tests, these seem like some of them are actual
> problems, but maybe someone here knows if some are expected?

Anything that crashes (well, raises an R error, not crashes the R
process) inside tools::assertError(...) is meant to do that. In fact,
you get an error if it doesn't crash:

tools::assertError(stop('I will crash'))
tools::assertError(stop('I will crash'), verbose = TRUE)
# Asserted error: I will crash
tools::assertError(2+2)
# Error: Failed to get error in evaluating 2 + 2

-- 
Best regards,
Ivan


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Sat Apr 17 15:37:31 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Sat, 17 Apr 2021 13:37:31 +0000
Subject: [Rd] reshape documentation
Message-ID: <1618666651669.16890@ap-hm.fr>

Dear Deepayan,

I do not have further suggestions, but I just wanted to thank you for taking the time to improve the documentation so much! (and for adding support for specifying "varying" as a vector)

Both "Typical usage" and the details are useful additions. Adding a vignette also seems an excellent idea.

These changes will probably helps numerous users.

Best,

Thomas




On Wed, Mar 17, 2021 at 7:55 PM Michael Dewey <lists using dewey.myzen.co.uk> wrote:
>
> Comments in line
>
> On 13/03/2021 09:50, SOEIRO Thomas wrote:
> > Dear list,
> >
> > I have some questions/suggestions about reshape.
> >
> > 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> > - Do you agree with this?
> > - Would you consider a proposal to modify the documentation?
> > - If yes, what approach do you suggest? e.g. split in two pages?
>
> The current documentation is much clearer than it was when I first
> started using R but we should always strive for more.
>
> I would suggest leaving the documentation in one place but it might be
> helpful to add which direction is relevant for each parameter by placing
> (to wide) or (to long) as appropriate. I think having completely
> separate lists is not needed

I have just checked in some updates to the documentation (in R-devel)
which hopefully makes usage clearer. Any further suggestions are
welcome. We are planning to add a short vignette as well, hopefully in
time for R 4.1.0.

> > 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> > - Is this worth documenting?
> > - Is the construct list(c()) really needed?
>
> Yes, because you may have more than one set of variables which need to
> correspond to a single variable in long format. So in your example if
> you also had 11 variables for the temperature as well as the
> concentration each would need specifying as a separate vector in the list.

That's a valid point, but on the other hand, direction="long" already
supports specifying 'varying' as a vector, and it does simplify the
single variable case. So we decided to be consistent and allow it for
direction="wide" too, hopefully with loud enough warnings in the
documentation about using the feature carelessly.

Best,
-Deepayan

> Michael
>
> >
> > reshape(Indometh,
> >          v.names = "conc",
> >          idvar = "Subject",
> >          timevar = "time",
> >          direction = "wide",
> >          varying = list(c("conc_0.25hr",
> >                           "conc_0.5hr",
> >                           "conc.0.75hr",
> >                           "conc_1hr",
> >                           "conc_1.25hr",
> >                           "conc_2hr",
> >                           "conc_3hr",
> >                           "conc_4hr",
> >                           "conc_5hr",
> >                           "conc_6hr",
> >                           "conc_8hr")))
> >
> > Thanks,
> >
> > Thomas
> > ______________________________________________
> > R-devel using r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Michael
> http://www.dewey.myzen.co.uk/home.html
>
> ______________________________________________
> R-devel using r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sat Apr 17 18:55:00 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sat, 17 Apr 2021 18:55:00 +0200
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <20210417124027.2fa95c29@parabola>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
 <98C3289B-49EC-454E-A769-F3AF7E19C57C@rutgers.edu>
 <20210417124027.2fa95c29@parabola>
Message-ID: <f7904df7-dbd3-eac7-b824-0525e826395f@gmail.com>

Thank you Ryan and Ivan for reporting and debugging this. Godbolt.org 
shows that icc 19.0.1 with -O2 -ipo (inter-procedural optimizations) is 
too smart and optimizes this stack growth detection code so that it 
returns incorrect result on x86_64. Detecting stack growth from C is 
tricky - in principle, it cannot be done correctly in a portable way. As 
the compilers are getting more sophisticated, it is increasingly more 
difficult. We'll have to improve the test, perhaps re-using some or 
completely remove it and assume stack grows down. I doubt anyone today 
would run a real, non-emulated, system running R where stack would grow up.

(and yes, the elif conditional should use 255)

Tomas


On 4/17/21 11:40 AM, Ivan Krylov wrote:
> On Fri, 16 Apr 2021 18:39:04 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
>
>> I guess there?s probably some mode of m4 I could run against that and
>> see if there?s any indication?
> Here's a shell script that should be doing the same thing that
> R's .../configure does, but a bit more verbose:
>
> -----------------------------------8<-----------------------------------
> #!/bin/sh
> cat > conftest1.c <<EOF
> #include <stdint.h>
> uintptr_t dummy_ii(void)
> {
>      int ii;
>
>      /* This is intended to return a local address. We could just return
>         (uintptr_t) &ii, but doing it indirectly through ii_addr avoids
>         a compiler warning (-Wno-return-local-addr would do as well).
>      */
>      volatile uintptr_t ii_addr = (uintptr_t) &ii;
>      return ii_addr;
> }
> EOF
> cat > conftest.c <<EOF
> #include <stdio.h>
> #include <stdint.h>
> extern uintptr_t dummy_ii(void);
>
> typedef uintptr_t (*dptr_type)(void);
> volatile dptr_type dummy_ii_ptr;
>
> int main(int ac, char **av)
> {
>      int i;
>      dummy_ii_ptr = dummy_ii;
>          
>      /* call dummy_ii via a volatile function pointer to prevent
>         inlinining in case the tests are accidentally built with
>         LTO */
>      uintptr_t ii = dummy_ii_ptr();
> #ifndef EXACTLY_AS_R_CONFIGURE
>      printf(
>          "main = %p, sub = %p, main %c sub, ret = %d\n",
>          &i, (void*)ii,
>          ((uintptr_t)&i > ii) ? '>' : ((uintptr_t)&i < ii) ? '<' : '=',
>          ((uintptr_t)&i > ii) ? 1 : -1
>      );
> #endif
>      /* 1 is downwards */
>      return ((uintptr_t)&i > ii) ? 1 : -1;
> }
> EOF
> echo "${CC:=cc} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} ${MAIN_LDFLAGS}" \
>      "-o conftest conftest.c conftest1.c"
> ${CC} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} ${MAIN_LDFLAGS} -o conftest \
>      conftest.c conftest1.c || exit $?
> echo ./conftest
> ./conftest
> ret=$?
> echo "./conftest exited with $ret"
> if test ${ret} = 1; then
>    echo r_cv_cstack_direction=down
> elif test ${ret} = 1; then
>    echo r_cv_cstack_direction=up
> fi
> exit 0
> -----------------------------------8<-----------------------------------
>
> Please run it similarly to the way you run .../configure:
>
> export CC=icc
> export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> sh .../runme.sh
>
> Does it give the right answer, that is, r_cv_cstack_direction=down?
> Does the answer change if you add -DEXACTLY_AS_R_CONFIGURE to CFLAGS?
> If the answer is always "down" and you have reused the build directory
> (keeping the config.site file between .../configure runs), this is going
> to be hard to track down. If you manage to get the "up" answer, it
> should be possible to tweak the test until ICC doesn't optimise it to
> the point of confusing the stack growth direction.
>
> Either way, I think that the elif branch in the R_STACK_DIRECTION test
> should be testing for $? = 255, not 1. I'm almost convinced that the
> behaviour would be incorrect on platforms where the test exits with -1.
>


From brenton @end|ng |rom w|ern|k@org  Sat Apr 17 19:45:09 2021
From: brenton @end|ng |rom w|ern|k@org (Brenton Wiernik)
Date: Sat, 17 Apr 2021 13:45:09 -0400
Subject: [Rd] Pipe bind restored in R 4.1.0?
Message-ID: <1MWj1Y-1l0twc2cf2-00X6TV@mrelay.perfora.net>

Is the pipe bind `=>` operator likely to be restored by default in time for the 4.1 release?

Brenton


	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Apr 17 19:52:18 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sat, 17 Apr 2021 12:52:18 -0500 (CDT)
Subject: [Rd] [External]  Pipe bind restored in R 4.1.0?
In-Reply-To: <1MWj1Y-1l0twc2cf2-00X6TV@mrelay.perfora.net>
References: <1MWj1Y-1l0twc2cf2-00X6TV@mrelay.perfora.net>
Message-ID: <alpine.DEB.2.21.2104171251220.24594@luke-Latitude-7480>

No. We need more time to resolve issues revealed in testing.

Best,

luke

On Sat, 17 Apr 2021, Brenton Wiernik wrote:

> Is the pipe bind `=>` operator likely to be restored by default in time for the 4.1 release?
>
> Brenton
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From novo@|rj @end|ng |rom rutger@@edu  Sat Apr 17 21:21:12 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Sat, 17 Apr 2021 19:21:12 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 errors in "make check" on CentOS 7.7-7.9
In-Reply-To: <20210417125209.18f8e41e@parabola>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
 <D6476812-2DF3-448A-8C03-72E47C74AC1A@rutgers.edu>
 <20210417125209.18f8e41e@parabola>
Message-ID: <31D4D529-09FA-415F-85B7-8AE75A449C4E@rutgers.edu>

> On Apr 17, 2021, at 5:52 AM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Sat, 17 Apr 2021 00:13:42 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
>> reg-tests-1d.Rout.fail:
>> https://rutgersconnect-my.sharepoint.com/:u:/g/personal/novosirj_oarc_rutgers_edu/EYK2JHWQ1-9Dvu6gK9lrkRIBkEyA4QqkeH7C4gmbAYyBBQ?e=lfGJL7
>> reg-packages.Rout.fail:
>> https://rutgersconnect-my.sharepoint.com/:u:/g/personal/novosirj_oarc_rutgers_edu/EazCjI6fRnNKhQASFPeySBUBENVpCqCljFg3-sokBZJnAw?e=8lwywe
> 
> Sorry, these links seem to be asking me to log in. Could you try a
> "paste bin" service like https://paste.debian.net/?

Sorry about that; I had it set to totally public and tried with a private browser session, but I guess that?s ?Awful365? for you. I tried actual Pastebin and it told me that the reg-tests-1d.Rout.fail was offensive. https://paste.debian.net says it?s too large. Let?s give that another whack; both are here: http://www.rnovosielski.ftml.net/r-project/

>> These maybe seem like they?re OK, and if I don?t have pdf2latex,
>> they?re expected?
> 
> I've never tried to build R without TeX Live installed. Is there
> anything about LaTeX-less installation in 'R Installation and
> Administration'?

Doesn?t seem to be required unless you want PDF manuals, which I don?t really care about at all; if it were, I?d expect configure to mention that, though yes, I could have read the manual before I got started (by now, who knows, maybe I did; been building R for years).

--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Sat Apr 17 21:24:06 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Sat, 17 Apr 2021 19:24:06 +0000
Subject: [Rd] Potential improvements of ave? (Act 2)
Message-ID: <bf8bd90d3dc74947b371a00d6afdeb50@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Dear list, 
?
This is a follow-up with another potential improvements of ave.
?
In the doc, x is documented as to be "a numeric", but this is not mandatory. 
?
DF <- data.frame(x = letters, group = rep(1:2, each = 13)) 
ave(DF$x, DF$group, FUN = function(i) "a") 
#? [1] "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" 
# [20] "a" "a" "a" "a" "a" "a" "a" 
?
However coercion can raise issues if the type of x and FUN(x) do not match. Coercion happens in split<-.default in the for loop with x[i] <- value[[j]].
(NB: In the following example, we can work around the problem by wrapping x with as.numeric.)
?
DF <- data.frame(x = Sys.Date() + 1:10, group = rep(1:2, each = 5)) 
ave(DF$x, DF$group, FUN = function(i) 1) 
# Error in as.Date.numeric(value) : 'origin' must be supplied 
?
So I have 2 questions/suggestions: 
- Could the doc rather state that x must match the type of FUN(x) and warn for coercion?
- Could ave be more flexible (i.e. allow different type of x and FUN(x)) if using another approach than x[i] <- value[[j]] in split<-.default for recycling? 
?
This has already been discussed on r-help and stackoverflow (e.g. https://stat.ethz.ch/pipermail/r-help/2016-November/442855.html) 
?
Best, 
?
Thomas


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Apr 19 12:08:08 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 19 Apr 2021 13:08:08 +0300
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 errors in "make check" on CentOS 7.7-7.9
In-Reply-To: <31D4D529-09FA-415F-85B7-8AE75A449C4E@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
 <D6476812-2DF3-448A-8C03-72E47C74AC1A@rutgers.edu>
 <20210417125209.18f8e41e@parabola>
 <31D4D529-09FA-415F-85B7-8AE75A449C4E@rutgers.edu>
Message-ID: <20210419130808.426d460b@Tarkus>

On Sat, 17 Apr 2021 19:21:12 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

> I tried actual Pastebin and it told me that the
> reg-tests-1d.Rout.fail was offensive. https://paste.debian.net says
> it?s too large. Let?s give that another whack; both are here:
> http://www.rnovosielski.ftml.net/r-project/

This link works fine for me, thanks!

For some reason, this build of R fails a test for LAPACK accidentally
ignoring NAs when computing Frobenius norms of matrices:

https://github.com/wch/r-source/commit/db10ee5237b1f9db83a693903c4293650a43244a
https://github.com/wch/r-source/commit/2f546cf778ae3bae8ef2e82c613658c72098a528

Does the following program print NaN on the last line of its output on
your machine?

program testdlange
use ieee_arithmetic, only: ieee_value, ieee_quiet_nan

intrinsic transpose

interface
    double precision function dlange (NORM, M, N, A, LDA, WORK)
        character :: NORM
        integer :: M
        integer :: N
        double precision, dimension( lda, * ) :: A
        integer :: LDA
        double precision, dimension( * ) :: WORK
    end function
end interface

double precision, dimension(2,3) :: A
double precision :: norm

    A = reshape([0, 0, 0, 0, 0, -1], shape(A))
    print '(3f5.1)', transpose(A)

    norm = dlange('F', size(A, 1), size(A, 2), A, size(A, 1), [0D0])
    print *, norm

    A(1,2) = ieee_value(A(1,2), ieee_quiet_nan)
    print '(3f5.1)', transpose(A)

    norm = dlange('F', size(A, 1), size(A, 2), A, size(A, 1), [0D0])
    print *, norm

end program

-- 
Best regards,
Ivan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr 19 14:06:20 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 19 Apr 2021 14:06:20 +0200
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <f7904df7-dbd3-eac7-b824-0525e826395f@gmail.com>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
 <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>
 <20210415173518.795131a4@arachnoid>
 <44E62940-5FEC-42BC-AD44-8AA31E19F2D2@rutgers.edu>
 <20210416191246.40d08aa0@arachnoid>
 <43751A3F-FBE7-4F32-A3AC-7AFB971AC405@rutgers.edu>
 <20210416213200.6f09ad4f@Tarkus>
 <98C3289B-49EC-454E-A769-F3AF7E19C57C@rutgers.edu>
 <20210417124027.2fa95c29@parabola>
 <f7904df7-dbd3-eac7-b824-0525e826395f@gmail.com>
Message-ID: <49d1feb4-716b-8775-8b7f-8fa9169032df@gmail.com>

On 4/17/21 6:55 PM, Tomas Kalibera wrote:
> Thank you Ryan and Ivan for reporting and debugging this. Godbolt.org 
> shows that icc 19.0.1 with -O2 -ipo (inter-procedural optimizations) 
> is too smart and optimizes this stack growth detection code so that it 
> returns incorrect result on x86_64. Detecting stack growth from C is 
> tricky - in principle, it cannot be done correctly in a portable way. 
> As the compilers are getting more sophisticated, it is increasingly 
> more difficult. We'll have to improve the test, perhaps re-using some 
> or completely remove it and assume stack grows down. I doubt anyone 
> today would run a real, non-emulated, system running R where stack 
> would grow up.
>
> (and yes, the elif conditional should use 255)

I've updated the test for direction of stack growth in R-devel.
If there are any remaining issues, please report.

Thanks
Tomas

>
> Tomas
>
>
> On 4/17/21 11:40 AM, Ivan Krylov wrote:
>> On Fri, 16 Apr 2021 18:39:04 +0000
>> Ryan Novosielski <novosirj at rutgers.edu> wrote:
>>
>>> I guess there?s probably some mode of m4 I could run against that and
>>> see if there?s any indication?
>> Here's a shell script that should be doing the same thing that
>> R's .../configure does, but a bit more verbose:
>>
>> -----------------------------------8<-----------------------------------
>> #!/bin/sh
>> cat > conftest1.c <<EOF
>> #include <stdint.h>
>> uintptr_t dummy_ii(void)
>> {
>> ???? int ii;
>>
>> ???? /* This is intended to return a local address. We could just return
>> ??????? (uintptr_t) &ii, but doing it indirectly through ii_addr avoids
>> ??????? a compiler warning (-Wno-return-local-addr would do as well).
>> ???? */
>> ???? volatile uintptr_t ii_addr = (uintptr_t) &ii;
>> ???? return ii_addr;
>> }
>> EOF
>> cat > conftest.c <<EOF
>> #include <stdio.h>
>> #include <stdint.h>
>> extern uintptr_t dummy_ii(void);
>>
>> typedef uintptr_t (*dptr_type)(void);
>> volatile dptr_type dummy_ii_ptr;
>>
>> int main(int ac, char **av)
>> {
>> ???? int i;
>> ???? dummy_ii_ptr = dummy_ii;
>> ???????? ???? /* call dummy_ii via a volatile function pointer to 
>> prevent
>> ??????? inlinining in case the tests are accidentally built with
>> ??????? LTO */
>> ???? uintptr_t ii = dummy_ii_ptr();
>> #ifndef EXACTLY_AS_R_CONFIGURE
>> ???? printf(
>> ???????? "main = %p, sub = %p, main %c sub, ret = %d\n",
>> ???????? &i, (void*)ii,
>> ???????? ((uintptr_t)&i > ii) ? '>' : ((uintptr_t)&i < ii) ? '<' : '=',
>> ???????? ((uintptr_t)&i > ii) ? 1 : -1
>> ???? );
>> #endif
>> ???? /* 1 is downwards */
>> ???? return ((uintptr_t)&i > ii) ? 1 : -1;
>> }
>> EOF
>> echo "${CC:=cc} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} ${MAIN_LDFLAGS}" \
>> ???? "-o conftest conftest.c conftest1.c"
>> ${CC} ${CPPFLAGS} ${CFLAGS} ${LDFLAGS} ${MAIN_LDFLAGS} -o conftest \
>> ???? conftest.c conftest1.c || exit $?
>> echo ./conftest
>> ./conftest
>> ret=$?
>> echo "./conftest exited with $ret"
>> if test ${ret} = 1; then
>> ?? echo r_cv_cstack_direction=down
>> elif test ${ret} = 1; then
>> ?? echo r_cv_cstack_direction=up
>> fi
>> exit 0
>> -----------------------------------8<-----------------------------------
>>
>> Please run it similarly to the way you run .../configure:
>>
>> export CC=icc
>> export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
>> sh .../runme.sh
>>
>> Does it give the right answer, that is, r_cv_cstack_direction=down?
>> Does the answer change if you add -DEXACTLY_AS_R_CONFIGURE to CFLAGS?
>> If the answer is always "down" and you have reused the build directory
>> (keeping the config.site file between .../configure runs), this is going
>> to be hard to track down. If you manage to get the "up" answer, it
>> should be possible to tweak the test until ICC doesn't optimise it to
>> the point of confusing the stack growth direction.
>>
>> Either way, I think that the elif branch in the R_STACK_DIRECTION test
>> should be testing for $? = 255, not 1. I'm almost convinced that the
>> behaviour would be incorrect on platforms where the test exits with -1.
>>
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Apr 20 02:44:41 2021
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 19 Apr 2021 17:44:41 -0700
Subject: [Rd] help(".libPaths"): Paragraph lacks mentioning of R_LIBS_SITE
Message-ID: <CAFDcVCT8Ybo5JPmhFxiHqSazXjxn2v+1g8JRex4JA+KQ9BxbXA@mail.gmail.com>

In ?base::.libPaths, there's a paragraph saying:

The library search path is initialized at startup from the environment
variable R_LIBS (which should be a colon-separated list of directories
at which R library trees are rooted) followed by those in environment
variable R_LIBS_USER. Only directories which exist at the time will be
included.

Shouldn't R_LIBS_SITE also be mentioned in that passage?  Something like:

...followed by those in environment variables R_LIBS_USER and R_LIBS_SITE. ...

/Henrik


From |e||x@gm@ern@t @end|ng |rom out|ook@com  Fri Apr 23 19:01:05 2021
From: |e||x@gm@ern@t @end|ng |rom out|ook@com (Felix Ernst)
Date: Fri, 23 Apr 2021 17:01:05 +0000
Subject: [Rd] R CMD INSTALL warning for S4 replacement functions on R
 4.1.0-alpha
Message-ID: <AM0PR05MB510723472F97F36989064073D6459@AM0PR05MB5107.eurprd05.prod.outlook.com>

Hi all,

Since R 4.1, R CMD INSTALL throws warning during building the man pages, when installing from source.

We noticed this first on Windows for man pages involving S4 replacement function:

  *   http://bioconductor.org/checkResults/devel/bioc-LATEST/Modstrings/riesling1-checksrc.html
  *   http://bioconductor.org/checkResults/devel/bioc-LATEST/GenomicAlignments/riesling1-checksrc.html

However, it's also showing up on linux with a slight twist (file not found instead of invalid argument) for other functions:

  *   https://cran.r-project.org/web/checks/check_results_Matrix.html (right at the end)

>From the messages and the involved offending filenames, we hypothesize that this is triggered by invalid filenames specific to the OS.
Please note, that the warning is not issued during R CMD CHECK for a given package.

Can anyone comment on this? Is more information needed? If it is a bug, I am happy to post on the bug tracker.

Thanks for any advice.

Best regards,
Felix

	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Fri Apr 23 23:23:16 2021
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Fri, 23 Apr 2021 23:23:16 +0200
Subject: [Rd] R CMD INSTALL warning for S4 replacement functions on R
 4.1.0-alpha
In-Reply-To: <AM0PR05MB510723472F97F36989064073D6459@AM0PR05MB5107.eurprd05.prod.outlook.com>
References: <AM0PR05MB510723472F97F36989064073D6459@AM0PR05MB5107.eurprd05.prod.outlook.com>
Message-ID: <5462bf5e-e03d-cbd9-8a6d-630a8755bf57@fau.de>

I can confirm this Rd warning in R-devel (2021-04-23 r80216), but not in
R 4.0.5. It happens when installing the static help (INSTALL option --html).

The following R code reproduces the warning by creating a tiny test
package and then calling relevant internal functions from 'tools':

```R

## create test package
dir.create(pkgdir <- tempfile())
tools:::.write_description(  # need a DESCRIPTION
    unlist(head(packageDescription("tools"), -1)),
    file.path(pkgdir, "DESCRIPTION"))
dir.create(file.path(pkgdir, "man"))
cat(r"(\name{test-package}
\title{Test Package}
\alias{\%/\%}
\description{Test alias.}
)", file = file.path(pkgdir, "man", "test-package.Rd"))

## build HTML help
dir.create(outDir <- tempfile())
tools:::.install_package_description(pkgdir, outDir)
tools:::.writePkgIndices(pkgdir, outDir)
tools:::.convertRdfiles(pkgdir, outDir, types = "html")


```

The output is

  converting help for package ?tools?
    finding HTML links ... done
    test-package                            html
REDIRECT:topic	 %/% -> test-package.html [ FAIL ]
REDIRECT:file	 test-package.html -> test-package.html [ SUCCESS ]
Rd warning: cannot open file
'/tmp/RtmpasTPyq/fileb3d72f4ea1cf/help/%/%.html': No such file or directory


A workaround (if needed) is to set the environment variable
_R_HELP_LINKS_TO_TOPICS_ to a false value.

Best regards,

	Sebastian


Am 23.04.21 um 19:01 schrieb Felix Ernst:
> Hi all,
> 
> Since R 4.1, R CMD INSTALL throws warning during building the man pages, when installing from source.
> 
> We noticed this first on Windows for man pages involving S4 replacement function:
> 
>   *   http://bioconductor.org/checkResults/devel/bioc-LATEST/Modstrings/riesling1-checksrc.html
>   *   http://bioconductor.org/checkResults/devel/bioc-LATEST/GenomicAlignments/riesling1-checksrc.html
> 
> However, it's also showing up on linux with a slight twist (file not found instead of invalid argument) for other functions:
> 
>   *   https://cran.r-project.org/web/checks/check_results_Matrix.html (right at the end)
> 
> From the messages and the involved offending filenames, we hypothesize that this is triggered by invalid filenames specific to the OS.
> Please note, that the warning is not issued during R CMD CHECK for a given package.
> 
> Can anyone comment on this? Is more information needed? If it is a bug, I am happy to post on the bug tracker.
> 
> Thanks for any advice.
> 
> Best regards,
> Felix
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Apr 24 15:44:56 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 24 Apr 2021 15:44:56 +0200
Subject: [Rd] R CMD INSTALL warning for S4 replacement functions on R
 4.1.0-alpha
In-Reply-To: <AM0PR05MB510723472F97F36989064073D6459@AM0PR05MB5107.eurprd05.prod.outlook.com>
References: <AM0PR05MB510723472F97F36989064073D6459@AM0PR05MB5107.eurprd05.prod.outlook.com>
Message-ID: <24708.8408.819907.125463@stat.math.ethz.ch>

>>>>> Felix Ernst 
>>>>>     on Fri, 23 Apr 2021 17:01:05 +0000 writes:

    > Hi all,
    > Since R 4.1, R CMD INSTALL throws warning during building the man pages, when installing from source.

    > We noticed this first on Windows for man pages involving S4 replacement function:

    > *   http://bioconductor.org/checkResults/devel/bioc-LATEST/Modstrings/riesling1-checksrc.html
    > *   http://bioconductor.org/checkResults/devel/bioc-LATEST/GenomicAlignments/riesling1-checksrc.html

    > However, it's also showing up on linux with a slight twist (file not found instead of invalid argument) for other functions:

    > *   https://cran.r-project.org/web/checks/check_results_Matrix.html (right at the end)

    >> From the messages and the involved offending filenames, we hypothesize that this is triggered by invalid filenames specific to the OS.
    > Please note, that the warning is not issued during R CMD CHECK for a given package.

    > Can anyone comment on this? Is more information needed? If it is a bug, I am happy to post on the bug tracker.

    > Thanks for any advice.

    > Best regards,
    > Felix

Thanks a lot, Felix,  for the heads up -- and for using the
pre-release versions of R ---- you should be role model to the
many readers of 'R-devel'   and other R developers -- even doing
it for a living and who are *still* not help the R project by
the relatively simple act of starting to work with
 'R x.y.0 alpha'

To the topic,  yes, I think there's something we (the R core
team) has not considered when implementing some of the changes
in static help page creation.

This will now get technical .... but that should always be ok /
even desirable for the  R-devel  list :


The CRAN check on Matrix (with R 4.1.0 alpha, called "R-patched") you mention,
here more directly
     https://www.r-project.org/nosvn/R.check/r-patched-linux-x86_64/Matrix-00check.html
has the relevant lines

---------------------------------------------------------------------------------------
checking whether package ?Matrix? can be installed ... WARNING
Found the following significant warnings:
  Rd warning: Previous alias or file overwritten by alias: chol,dsCMatrix-method
  Rd warning: Previous alias or file overwritten by alias: chol,lsCMatrix-method
  Rd warning: Previous alias or file overwritten by alias: chol,nsCMatrix-method
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,ddenseMatrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,ldenseMatrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,ndenseMatrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,ddenseMatrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,ldenseMatrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,ndenseMatrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,Matrix-method.html?: No such file or directory
  Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,Matrix-method.html?: No such file or directory
  Rd warning: Previous alias or file overwritten by alias: expand
  Rd warning: Previous alias or file overwritten by alias: crossprod-methods
  Rd warning: Previous alias or file overwritten by alias: tcrossprod-methods
See https://www.r-project.org/nosvn/R.check/r-patched-linux-x86_64/Matrix-00install.html for details.
---------------------------------------------------------------------------------------

and the (quite large, from many C compilation warnings (from
         SuiteSparse, not Matrix directly))
00install.html then gives the details:

*** installing help indices
  converting help for package ?Matrix?
    finding HTML links ... done
    BunchKaufman-methods                    html  
    CAex                                    html  

 [...............]

    bandSparse                              html  
    bdiag                                   html  
    boolean-matprod                         html  
REDIRECT:file	 boolean-matprod.html -> boolean-matprod.html [ SUCCESS ]
    cBind                                   html  
    chol                                    html  
Rd warning: Previous alias or file overwritten by alias: chol,dsCMatrix-method
Rd warning: Previous alias or file overwritten by alias: chol,lsCMatrix-method
Rd warning: Previous alias or file overwritten by alias: chol,nsCMatrix-method
    chol2inv-methods                        html  
    colSums                                 html  
    compMatrix-class                        html  
    condest                                 html  
    dMatrix-class                           html  
    ddenseMatrix-class                      html  
    ddiMatrix-class                         html  
    denseMatrix-class                       html  
    dgCMatrix-class                         html  
    dgRMatrix-class                         html  
    dgTMatrix-class                         html  
    dgeMatrix-class                         html  
    diagU2N                                 html  
    diagonalMatrix-class                    html  
REDIRECT:topic	 %/%,ddiMatrix,ddenseMatrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ddiMatrix,ldenseMatrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ddiMatrix,ndenseMatrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ldiMatrix,ddenseMatrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ldiMatrix,ldenseMatrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ldiMatrix,ndenseMatrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ddiMatrix,Matrix-method -> diagonalMatrix-class.html [ FAIL ]
REDIRECT:topic	 %/%,ldiMatrix,Matrix-method -> diagonalMatrix-class.html [ FAIL ]
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,ddenseMatrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,ldenseMatrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,ndenseMatrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,ddenseMatrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,ldenseMatrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,ndenseMatrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ddiMatrix,Matrix-method.html?: No such file or directory
Rd warning: cannot open file ?/home/hornik/tmp/R.check/r-patched-gcc/Work/build/Packages/00LOCK-Matrix/00new/Matrix/help/%/%,ldiMatrix,Matrix-method.html?: No such file or directory
    dpoMatrix-class                         html  
    drop0                                   html  
    dsCMatrix-class                         html  
    dsRMatrix-class                         html  
    dsparseMatrix-class                     html  
    dsyMatrix-class                         html  
    dtCMatrix-class                         html  
    dtRMatrix-class-def                     html  
REDIRECT:file	 dtRMatrix-class-def.html -> dtRMatrix-class-def.html [ SUCCESS ]
    dtpMatrix-class                         html  
    dtrMatrix-class                         html  

 [...................]

------------------------------------------------------------------------

What I am really puzzled about is why this only shows for
R 4.1.0 alpha  -- which was split off R-devel only Tuesday (Apr
20) .... and we had never seen this issue on R-devel,  where
indeed we did change help page HTML link creations  on purpose
but really many months ago, starting around here (which has been
a big improvement liked by many who had wished for it!):

---------------------------------------------------------------------------
r79075 | deepayan | 2020-08-25 08:32:39 +0200 (Tue, 25 Aug 2020) | 1 line
Changed paths:
   M doc/NEWS.Rd
   M doc/manual/R-exts.texi
   M src/library/tools/R/Rd2HTML.R
   M src/library/tools/R/dynamicHelp.R

help system now prefers topic over filename in external package help links
----------------------------------------------------------------------------

and there quite a few tweaks and improvements to

   src/library/tools/R/Rd2HTML.R

after that ... but none happened the last couple of weeks,  so
R 4.1.0 and R-devel should be identical here.... but the CRAN
checks using R-devel don't seem to show anything.
...
... hence my deep puzzlement.

Thank you once more for the report,
Martin

--
Martin Maechler
ETH Zurich and R Core team


From toth@dene@ @end|ng |rom kogentum@hu  Wed Apr 21 12:57:48 2021
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Wed, 21 Apr 2021 12:57:48 +0200
Subject: [Rd] R check false positive - multiple versions of a dependency
Message-ID: <4d79894c-1fd9-3b89-085a-f9482d03657b-2763@kogentum.hu>


----
Disclaimer: I sent this report first to r-package-devel at r-project.org 
but it seems it has not been delivered to the list - re-trying to r-devel
----

Dear R maintainers,

Use case:
Restrict the acceptable versions of an imported package (e.g., 'pkg') to 
a closed interval. That is, provide *both* pkg (>= min.version.nr), pkg 
(<= max.version.nr) under Imports.

Problem:
Even though the package is an internal package, I want to have clean R 
CMD check results for QC reasons, and this seems impossible due to a bug 
in tools/R/QC.R/.check_package_description2.

Details:
This is a quote from Writing R Extensions, 1.1.3 Package Dependencies:

"A package or ?R? can appear more than once in the ?Depends? field, for 
example to give upper and lower bounds on acceptable versions."

In reality, this statement seems untrue: 1) only R can appear more than 
once (even base packages like 'stats' trigger a NOTE in R CMD check); 2) 
Not only 'Depends', but other fields (Imports, Suggests, Enhances) can 
contain duplicated entries in the sense that the entries are processed 
as expected, but the check gives a NOTE.

Minimal reproducible example:
In a (Linux) terminal, issue the following commands (note the Depends row):

#####
mkdir -p pkgname
echo "
Depends: R (>= 3.1.0), R (<= 4.1.0)
Package: pkgname
Version: 0.5-1
Date: 2021-04-15
Title: My First Collection of Functions
Author: Joe Developer [aut, cre],
   Pat Developer [aut],
   A. User [ctb]
Maintainer: Joe Developer <Joe.Developer at some.domain.net>
Description: A (one paragraph) description of what
   the package does and why it may be useful.
License: GPL (>= 2)
" > pkgname/DESCRIPTION

R CMD build pkgname
_R_CHECK_CRAN_INCOMING_REMOTE_=FALSE R CMD check pkgname_0.5-1.tar.gz 
--as-cran --no-manual
#####

The commands above return with "Status: OK" - so far so good.

Now instead of restricting the R version, let us restrict the version of 
'stats'. (This is the only change, see Depends.)

#####
echo "
Depends: stats (>= 0.0.0), stats (<= 10.0.0)
Package: pkgname
Version: 0.5-1
Date: 2021-04-15
Title: My First Collection of Functions
Author: Joe Developer [aut, cre],
   Pat Developer [aut],
   A. User [ctb]
Maintainer: Joe Developer <Joe.Developer at some.domain.net>
Suggests: MASS
Description: A (one paragraph) description of what
   the package does and why it may be useful.
License: GPL (>= 2)
" > pkgname/DESCRIPTION
R CMD build pkgname
_R_CHECK_CRAN_INCOMING_REMOTE_=FALSE R CMD check pkgname_0.5-1.tar.gz 
--as-cran --no-manual
#####

Now the status is "Status: 1 NOTE", and the note is:
"Package listed in more than one of Depends, Imports, Suggests, Enhances:
   ?stats?
A package should be listed in only one of these fields."

Possible fix:
1) I think the highlighted sentence in Writing R Extensions should read as:
"A package or ?R? can appear more than once in the ?Depends? field, for 
example to give upper and lower bounds on acceptable versions. For 
packages, the same rule applies for ?Imports? and ?Suggests? fields (see 
later)."

2) In .check_package_description2(), 
'unique(allpkgs[duplicated(allpkgs)])' shall be replaced with a more 
elaborated check. BTW, that check appears twice in the function, where 
the first result is assigned to 'out' and is never used until 'out' gets 
re-assigned. See 
https://github.com/r-devel/r-svn/blob/0d65935f30dcaccfeee1dd61991bf4b1444873bc/src/library/tools/R/QC.R#L3553

If you agree this is a bug, I can create a formal bug report and 
probably create a patch, too.

Regards,
Denes


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Apr 24 16:07:42 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 24 Apr 2021 16:07:42 +0200
Subject: [Rd] R CMD INSTALL warning for S4 replacement functions on R
 4.1.0-alpha
In-Reply-To: <5462bf5e-e03d-cbd9-8a6d-630a8755bf57@fau.de>
References: <AM0PR05MB510723472F97F36989064073D6459@AM0PR05MB5107.eurprd05.prod.outlook.com>
 <5462bf5e-e03d-cbd9-8a6d-630a8755bf57@fau.de>
Message-ID: <24708.9774.184963.452576@stat.math.ethz.ch>

>>>>> Sebastian Meyer 
>>>>>     on Fri, 23 Apr 2021 23:23:16 +0200 writes:

    > I can confirm this Rd warning in R-devel (2021-04-23 r80216), but not in
    > R 4.0.5. It happens when installing the static help (INSTALL option --html).

    > The following R code reproduces the warning by creating a tiny test
    > package and then calling relevant internal functions from 'tools':

    [...................]

Thanks a lot, Sebastian,
for some reason I did not see your reply when I wrote mine...

So at least you indirectly solved my puzzlement on that this was
not visible with CRAN checks using R-devel  :  Almost surely
they all do *not* create static HTML pages.

So this really is a bug in R > 4.0.z   and we are happy if you
report it, just referring to your  R-devel post ... and then we
all will be really grateful for whomever provides a (careful,
minimal, ..) patch,  presumably to
    src/library/tools/R/Rd2HTML.R

Martin


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Apr 24 17:52:48 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 24 Apr 2021 11:52:48 -0400
Subject: [Rd] R check false positive - multiple versions of a dependency
In-Reply-To: <4d79894c-1fd9-3b89-085a-f9482d03657b-2763@kogentum.hu>
References: <4d79894c-1fd9-3b89-085a-f9482d03657b-2763@kogentum.hu>
Message-ID: <a0123b9b-f861-11d2-c3f7-4b200a7fda31@gmail.com>

I'd say a NOTE is appropriate even if upper and lower limits are 
allowed, but the wording of the current note should be changed, e.g. 
your example should say

"Package listed more than once in Depends, Imports, Suggests, Enhances:
      ?stats?"

If you really meant to do this, you can ignore the note, but I'd suspect 
multiple listings are more often an error than intentional, and that's 
what NOTEs are for.

There may still be a more serious bug here if one of the limits is 
ignored; I haven't checked that.

Duncan Murdoch

On 21/04/2021 6:57 a.m., D?nes T?th wrote:
> 
> ----
> Disclaimer: I sent this report first to r-package-devel at r-project.org
> but it seems it has not been delivered to the list - re-trying to r-devel
> ----
> 
> Dear R maintainers,
> 
> Use case:
> Restrict the acceptable versions of an imported package (e.g., 'pkg') to
> a closed interval. That is, provide *both* pkg (>= min.version.nr), pkg
> (<= max.version.nr) under Imports.
> 
> Problem:
> Even though the package is an internal package, I want to have clean R
> CMD check results for QC reasons, and this seems impossible due to a bug
> in tools/R/QC.R/.check_package_description2.
> 
> Details:
> This is a quote from Writing R Extensions, 1.1.3 Package Dependencies:
> 
> "A package or ?R? can appear more than once in the ?Depends? field, for
> example to give upper and lower bounds on acceptable versions."
> 
> In reality, this statement seems untrue: 1) only R can appear more than
> once (even base packages like 'stats' trigger a NOTE in R CMD check); 2)
> Not only 'Depends', but other fields (Imports, Suggests, Enhances) can
> contain duplicated entries in the sense that the entries are processed
> as expected, but the check gives a NOTE.
> 
> Minimal reproducible example:
> In a (Linux) terminal, issue the following commands (note the Depends row):
> 
> #####
> mkdir -p pkgname
> echo "
> Depends: R (>= 3.1.0), R (<= 4.1.0)
> Package: pkgname
> Version: 0.5-1
> Date: 2021-04-15
> Title: My First Collection of Functions
> Author: Joe Developer [aut, cre],
>     Pat Developer [aut],
>     A. User [ctb]
> Maintainer: Joe Developer <Joe.Developer at some.domain.net>
> Description: A (one paragraph) description of what
>     the package does and why it may be useful.
> License: GPL (>= 2)
> " > pkgname/DESCRIPTION
> 
> R CMD build pkgname
> _R_CHECK_CRAN_INCOMING_REMOTE_=FALSE R CMD check pkgname_0.5-1.tar.gz
> --as-cran --no-manual
> #####
> 
> The commands above return with "Status: OK" - so far so good.
> 
> Now instead of restricting the R version, let us restrict the version of
> 'stats'. (This is the only change, see Depends.)
> 
> #####
> echo "
> Depends: stats (>= 0.0.0), stats (<= 10.0.0)
> Package: pkgname
> Version: 0.5-1
> Date: 2021-04-15
> Title: My First Collection of Functions
> Author: Joe Developer [aut, cre],
>     Pat Developer [aut],
>     A. User [ctb]
> Maintainer: Joe Developer <Joe.Developer at some.domain.net>
> Suggests: MASS
> Description: A (one paragraph) description of what
>     the package does and why it may be useful.
> License: GPL (>= 2)
> " > pkgname/DESCRIPTION
> R CMD build pkgname
> _R_CHECK_CRAN_INCOMING_REMOTE_=FALSE R CMD check pkgname_0.5-1.tar.gz
> --as-cran --no-manual
> #####
> 
> Now the status is "Status: 1 NOTE", and the note is:
> "Package listed in more than one of Depends, Imports, Suggests, Enhances:
>     ?stats?
> A package should be listed in only one of these fields."
> 
> Possible fix:
> 1) I think the highlighted sentence in Writing R Extensions should read as:
> "A package or ?R? can appear more than once in the ?Depends? field, for
> example to give upper and lower bounds on acceptable versions. For
> packages, the same rule applies for ?Imports? and ?Suggests? fields (see
> later)."
> 
> 2) In .check_package_description2(),
> 'unique(allpkgs[duplicated(allpkgs)])' shall be replaced with a more
> elaborated check. BTW, that check appears twice in the function, where
> the first result is assigned to 'out' and is never used until 'out' gets
> re-assigned. See
> https://github.com/r-devel/r-svn/blob/0d65935f30dcaccfeee1dd61991bf4b1444873bc/src/library/tools/R/QC.R#L3553
> 
> If you agree this is a bug, I can create a formal bug report and
> probably create a patch, too.
> 
> Regards,
> Denes
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Apr 24 19:30:17 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 24 Apr 2021 19:30:17 +0200
Subject: [Rd] Msg not getting posted (or much delayed (was "R check false
 positive ..")
In-Reply-To: <4d79894c-1fd9-3b89-085a-f9482d03657b-2763@kogentum.hu>
References: <4d79894c-1fd9-3b89-085a-f9482d03657b-2763@kogentum.hu>
Message-ID: <24708.21929.374466.924234@stat.math.ethz.ch>

>>>>> D?nes T?th 
>>>>>     on Wed, 21 Apr 2021 12:57:48 +0200 writes:

    > ----
    > Disclaimer: I sent this report first to r-package-devel at r-project.org 
    > but it seems it has not been delivered to the list - re-trying to r-devel
    > ----

Also, for R-devel, your msg  sat for  3  days in the spam filter
queue, and I as list co-moderator noticed it (among all the real
spam, so quite by coincidence) and released it...

Almost surely the R-package-devel moderators did *not* notice it
in the spam filter queue there...

NB: The spam symptoms were indicated as
  X-Spamc: is spam (7.0/5.0) position : 6, spam decisive
  X-MailCleaner-SpamCheck: spam, Newsl (score=0.0, required=5.0, NONE,
   position : 0, not decisive), NiceBayes (42.47%, position : 2,
   not decisive), Spamc (score=7.0, required=5.0, EthURLb 0.0,
   URIBL_BLOCKED 0.0, EZURL 0.0, MC_SPF_SOFTFAIL 7.0, position : 6,
   spam decisive),


From toth@dene@ @end|ng |rom kogentum@hu  Sun Apr 25 01:08:18 2021
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Sun, 25 Apr 2021 01:08:18 +0200
Subject: [Rd] R check false positive - multiple versions of a dependency
In-Reply-To: <a0123b9b-f861-11d2-c3f7-4b200a7fda31@gmail.com>
References: <4d79894c-1fd9-3b89-085a-f9482d03657b-2763@kogentum.hu>
 <a0123b9b-f861-11d2-c3f7-4b200a7fda31@gmail.com>
Message-ID: <aff65300-5d7a-12c9-f711-359f18e06de7-9004@kogentum.hu>




On 4/24/21 5:52 PM, Duncan Murdoch wrote:
> I'd say a NOTE is appropriate even if upper and lower limits are 
> allowed, but the wording of the current note should be changed, e.g. 
> your example should say
> 
> "Package listed more than once in Depends, Imports, Suggests, Enhances:
>  ???? ?stats?"
> 
> If you really meant to do this, you can ignore the note, but I'd suspect 
> multiple listings are more often an error than intentional, and that's 
> what NOTEs are for.

I would say if a package is listed multiple times, but with different 
*explicit* version requirements and under the same heading (one and only 
one of Depends, Imports, Suggests, Enhances), it is valid and almost 
surely intentional. Currently the code which performs the check (and 
that I linked to) is not smart enough to distinguish between this 
particular use case and simple multiple listings of the same package 
dependency (which I agree can be assumed to be an error and not 
intentional).

> 
> There may still be a more serious bug here if one of the limits is 
> ignored; I haven't checked that.

I checked it, and can confirm that *both* limits are considered. This 
supports my argument that this is a valid use case, and the NOTE could 
be avoided by a smarter check in the relevant part of 
.check_package_description2. I also understand this is a low-priority 
issue, so I do not expect someone from R-Core wants to spend time on 
fixing it. This is why I suggested I could give it a try to do it on my 
own if there is any chance that my patch will be accepted.

Regards,
Denes

> 
> Duncan Murdoch
> 
> On 21/04/2021 6:57 a.m., D?nes T?th wrote:
>>
>> ----
>> Disclaimer: I sent this report first to r-package-devel at r-project.org
>> but it seems it has not been delivered to the list - re-trying to r-devel
>> ----
>>
>> Dear R maintainers,
>>
>> Use case:
>> Restrict the acceptable versions of an imported package (e.g., 'pkg') to
>> a closed interval. That is, provide *both* pkg (>= min.version.nr), pkg
>> (<= max.version.nr) under Imports.
>>
>> Problem:
>> Even though the package is an internal package, I want to have clean R
>> CMD check results for QC reasons, and this seems impossible due to a bug
>> in tools/R/QC.R/.check_package_description2.
>>
>> Details:
>> This is a quote from Writing R Extensions, 1.1.3 Package Dependencies:
>>
>> "A package or ?R? can appear more than once in the ?Depends? field, for
>> example to give upper and lower bounds on acceptable versions."
>>
>> In reality, this statement seems untrue: 1) only R can appear more than
>> once (even base packages like 'stats' trigger a NOTE in R CMD check); 2)
>> Not only 'Depends', but other fields (Imports, Suggests, Enhances) can
>> contain duplicated entries in the sense that the entries are processed
>> as expected, but the check gives a NOTE.
>>
>> Minimal reproducible example:
>> In a (Linux) terminal, issue the following commands (note the Depends 
>> row):
>>
>> #####
>> mkdir -p pkgname
>> echo "
>> Depends: R (>= 3.1.0), R (<= 4.1.0)
>> Package: pkgname
>> Version: 0.5-1
>> Date: 2021-04-15
>> Title: My First Collection of Functions
>> Author: Joe Developer [aut, cre],
>> ??? Pat Developer [aut],
>> ??? A. User [ctb]
>> Maintainer: Joe Developer <Joe.Developer at some.domain.net>
>> Description: A (one paragraph) description of what
>> ??? the package does and why it may be useful.
>> License: GPL (>= 2)
>> " > pkgname/DESCRIPTION
>>
>> R CMD build pkgname
>> _R_CHECK_CRAN_INCOMING_REMOTE_=FALSE R CMD check pkgname_0.5-1.tar.gz
>> --as-cran --no-manual
>> #####
>>
>> The commands above return with "Status: OK" - so far so good.
>>
>> Now instead of restricting the R version, let us restrict the version of
>> 'stats'. (This is the only change, see Depends.)
>>
>> #####
>> echo "
>> Depends: stats (>= 0.0.0), stats (<= 10.0.0)
>> Package: pkgname
>> Version: 0.5-1
>> Date: 2021-04-15
>> Title: My First Collection of Functions
>> Author: Joe Developer [aut, cre],
>> ??? Pat Developer [aut],
>> ??? A. User [ctb]
>> Maintainer: Joe Developer <Joe.Developer at some.domain.net>
>> Suggests: MASS
>> Description: A (one paragraph) description of what
>> ??? the package does and why it may be useful.
>> License: GPL (>= 2)
>> " > pkgname/DESCRIPTION
>> R CMD build pkgname
>> _R_CHECK_CRAN_INCOMING_REMOTE_=FALSE R CMD check pkgname_0.5-1.tar.gz
>> --as-cran --no-manual
>> #####
>>
>> Now the status is "Status: 1 NOTE", and the note is:
>> "Package listed in more than one of Depends, Imports, Suggests, Enhances:
>> ??? ?stats?
>> A package should be listed in only one of these fields."
>>
>> Possible fix:
>> 1) I think the highlighted sentence in Writing R Extensions should 
>> read as:
>> "A package or ?R? can appear more than once in the ?Depends? field, for
>> example to give upper and lower bounds on acceptable versions. For
>> packages, the same rule applies for ?Imports? and ?Suggests? fields (see
>> later)."
>>
>> 2) In .check_package_description2(),
>> 'unique(allpkgs[duplicated(allpkgs)])' shall be replaced with a more
>> elaborated check. BTW, that check appears twice in the function, where
>> the first result is assigned to 'out' and is never used until 'out' gets
>> re-assigned. See
>> https://github.com/r-devel/r-svn/blob/0d65935f30dcaccfeee1dd61991bf4b1444873bc/src/library/tools/R/QC.R#L3553 
>>
>>
>> If you agree this is a bug, I can create a formal bug report and
>> probably create a patch, too.
>>
>> Regards,
>> Denes
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
>


From j@me@@|@he@ter @end|ng |rom gm@||@com  Mon Apr 26 15:33:19 2021
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Mon, 26 Apr 2021 09:33:19 -0400
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
In-Reply-To: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
References: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
Message-ID: <CAD6tx97_yPLok-jAyy2-n6jnjvZhGVK0oHeYwJjahr5onReVsg@mail.gmail.com>

One way to avoid the call to timedatectl is to set the `TZ` environment
variable on your machine to your local timezone, if this is set
`Sys.timezone()` uses this and does not try to query timedatectl for the
timezone.

This is a common issue as well in docker containers, as like on WSL in
docker timedatectl is present, but non-functional.

Jim

On Tue, Apr 13, 2021 at 9:19 AM Brenton Wiernik <brenton at wiernik.org> wrote:

> In Microsoft?s Windows Subsystem for Linux (WSL or WSL2), there is not
> system framework, so utilities that depend on it fail. This includes
> timedatectl which R uses in Sys.timezone(). The timedatectl utility is
> present on Linux systems installed under WSL/WSL2, but is non-functional.
> So, when Sys.timezone() checks for Sys.which("timedatectl"), it receives a
> false positive. The subsequent methods after this if () do work, however.
>
> This can be fixed if line 42 of Sys.timezone() were changed from:
> if (nzchar(Sys.which("timedatectl"))) {
>
> to:
> if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname
> -r", intern = TRUE), ignore.case = TRUE)) {
>
> "uname -r" returns for example:
> "5.4.72-microsoft-standard-WSL2"
>
> So checking for "microsoft" or "WSL" would probably work.
>
>
> Brenton Wiernik
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Tue Apr 27 21:53:48 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Tue, 27 Apr 2021 12:53:48 -0700
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
Message-ID: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>

Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be fixed in
R-devel already. I checked on
https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and there is no
mention of these changes, so I'm wondering if they are intentional? If so,
could someone please add a mention of the bugfix in the NEWS?

The problem involves file.exists, on windows, when a long/strange input
file name Encoding is unknown, in C locale. I expected that FALSE should be
returned (and it is on R-devel), but I got an error in R-4.0.5. Code to
reproduce is:

x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
\360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
\360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
Encoding(x) <- "unknown"
Sys.setlocale(locale="C")
sessionInfo()
file.exists(x)

Output I got from R-4.0.5 was

> sessionInfo()
R version 4.0.5 (2021-03-31)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19042)

Matrix products: default

locale:
[1] C
system code page: 1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.0.5
> file.exists(x)
Error in file.exists(x) : file name conversion problem -- name too long?
Execution halted

Output I got from R-devel was

> sessionInfo()
R Under development (unstable) (2021-04-26 r80229)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19042)

Matrix products: default

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.0
> file.exists(x)
[1] FALSE

I also observed similar results when using normalizePath instead of
file.exists (error in R-4.0.5, no error in R-devel).

> normalizePath(x) #R-4.0.5
Error in path.expand(path) : unable to translate 'p'
| p'p;
| p'p<
| p'p=
| p'p>
| p'p<bf>
' to UTF-8
Calls: normalizePath -> path.expand
Execution halted

> normalizePath(x) #R-devel
[1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
\360\237\247\222\360\237\217\273\n| \360\237\247\222\360\237\217\274\n|
\360\237\247\222\360\237\217\275\n| \360\237\247\222\360\237\217\276\n|
\360\237\247\222\360\237\217\277\n"
Warning message:
In normalizePath(path.expand(path), winslash, mustWork) : path[1]="?
| ??
| ??
| ??
| ??
| ??
": The filename, directory name, or volume label syntax is incorrect

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 28 12:10:16 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 28 Apr 2021 12:10:16 +0200
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
Message-ID: <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>

Hi Toby,

a defensive, portable approach would be to use only file names regarded 
portable by POSIX, so characters including ASCII letters, digits, 
underscore, dot, hyphen (but hyphen should not be the first character). 
That would always work on all systems and this is what I would use.

Individual operating systems and file systems and their configurations 
differ in which additional characters they support and how. On some, 
file names are just sequences of bytes, on some, they have to be valid 
strings in certain encoding (and then with certain exceptions).

On Windows, file names are at the lowest level in UTF-16LE encoding (and 
admitting unpaired surrogates for historical reasons). R stores strings 
in other encodings (UTF-8, native, Latin-1), so file names have to be 
translated to/from UTF-16LE, either directly by R or by Windows.

But, there is no way to convert (non-ASCII) strings in "C" encoding to 
UTF16-LE, so the examples cannot be made to work on Windows.

When the translation is left on Windows, it assumes the non-UTF-16LE 
strings are in the Active Code Page encoding (shown as "system encoding" 
in sessionInfo() in R, Latin-1 in your example) instead of the current C 
library encoding ("C" in your example). So, file names coming from 
Windows will be either the bytes of their UTF-16LE representation or the 
bytes of their Latin-1 representation, but which one is subject to the 
implementation details, so the result is really unusable.

I would say using "C" as encoding in R is not a good idea, and 
particularly not on Windows.

I would say that what happens with such file names in "C" encoding is 
unspecified behavior, which is subject to change at any time without 
notice, and that both the R 4.0.5 and R-devel behavior you are observing 
are acceptable. I don't think it should be mentioned in the NEWS. 
Personally, I would prefer some stricter checks of strings validity and 
perhaps disallowing the "C" encoding in R, so yet another behavior where 
it would be clearer that this cannot really work, but that would require 
more thought and effort.

Best
Tomas


On 4/27/21 9:53 PM, Toby Hocking wrote:

> Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be fixed in
> R-devel already. I checked on
> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and there is no
> mention of these changes, so I'm wondering if they are intentional? If so,
> could someone please add a mention of the bugfix in the NEWS?
>
> The problem involves file.exists, on windows, when a long/strange input
> file name Encoding is unknown, in C locale. I expected that FALSE should be
> returned (and it is on R-devel), but I got an error in R-4.0.5. Code to
> reproduce is:
>
> x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
> \360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
> \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
> Encoding(x) <- "unknown"
> Sys.setlocale(locale="C")
> sessionInfo()
> file.exists(x)
>
> Output I got from R-4.0.5 was
>
>> sessionInfo()
> R version 4.0.5 (2021-03-31)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19042)
>
> Matrix products: default
>
> locale:
> [1] C
> system code page: 1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.0.5
>> file.exists(x)
> Error in file.exists(x) : file name conversion problem -- name too long?
> Execution halted
>
> Output I got from R-devel was
>
>> sessionInfo()
> R Under development (unstable) (2021-04-26 r80229)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19042)
>
> Matrix products: default
>
> locale:
> [1] C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.2.0
>> file.exists(x)
> [1] FALSE
>
> I also observed similar results when using normalizePath instead of
> file.exists (error in R-4.0.5, no error in R-devel).
>
>> normalizePath(x) #R-4.0.5
> Error in path.expand(path) : unable to translate 'p'
> | p'p;
> | p'p<
> | p'p=
> | p'p>
> | p'p<bf>
> ' to UTF-8
> Calls: normalizePath -> path.expand
> Execution halted
>
>> normalizePath(x) #R-devel
> [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
> \360\237\247\222\360\237\217\273\n| \360\237\247\222\360\237\217\274\n|
> \360\237\247\222\360\237\217\275\n| \360\237\247\222\360\237\217\276\n|
> \360\237\247\222\360\237\217\277\n"
> Warning message:
> In normalizePath(path.expand(path), winslash, mustWork) : path[1]="?
> | ??
> | ??
> | ??
> | ??
> | ??
> ": The filename, directory name, or volume label syntax is incorrect
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Wed Apr 28 15:19:53 2021
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Wed, 28 Apr 2021 15:19:53 +0200
Subject: [Rd] New post not readable
Message-ID: <CAN+W6_v1TtpRdkX=wsmRsG1WYoL_MTMVJyWN1-c_6b8GBfsoYw@mail.gmail.com>

Hi all,

It has come to my attention that there is a new post on The R blog: "R
Can Use Your Help: Testing R Before Release".
However, the link returns an error "Not found":
https://developer.r-project.org/Blog/public/2021/04/28/r-can-use-your-help-testing-r-before-release/index.html
Hope this mailing list is the right place to make it known to the authors.

Maybe these new content could be announced on the R-announcement
mailing list? For others interested I created a Twitter account that
uses The R blog's RSS feed to announce new entries: R_dev_news.

Looking forward to reading the new post.
Cheers,

Llu?s


From tdhock5 @end|ng |rom gm@||@com  Wed Apr 28 16:21:05 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 28 Apr 2021 07:21:05 -0700
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
 <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
Message-ID: <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>

Hi Tomas, thanks for the thoughtful reply. That makes sense about the
problems with C locale on windows. Actually I did not choose to use C
locale, but instead it was invoked automatically during a package check.
To be clear, I do NOT have a file with that name, but I do want file.exists
to return a reasonable value, FALSE (with no error). If that behavior is
unspecified, then should I use something like tryCatch(file.exists(x),
error=function(e)FALSE) instead of assuming that file.exists will always
return a logical vector without error? For my particular application that
work-around should probably be sufficient, but one may imagine a situation
where you want to do

x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
\360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
\360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
Encoding(x) <- "unknown"
Sys.setlocale(locale="C")
f <- tempfile()
cat("", file = f)
two <- c(x, f)
file.exists(two)

and in that case the correct response from R, in my opinion, would be
c(FALSE, TRUE) -- not an error.
Toby

On Wed, Apr 28, 2021 at 3:10 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> Hi Toby,
>
> a defensive, portable approach would be to use only file names regarded
> portable by POSIX, so characters including ASCII letters, digits,
> underscore, dot, hyphen (but hyphen should not be the first character).
> That would always work on all systems and this is what I would use.
>
> Individual operating systems and file systems and their configurations
> differ in which additional characters they support and how. On some,
> file names are just sequences of bytes, on some, they have to be valid
> strings in certain encoding (and then with certain exceptions).
>
> On Windows, file names are at the lowest level in UTF-16LE encoding (and
> admitting unpaired surrogates for historical reasons). R stores strings
> in other encodings (UTF-8, native, Latin-1), so file names have to be
> translated to/from UTF-16LE, either directly by R or by Windows.
>
> But, there is no way to convert (non-ASCII) strings in "C" encoding to
> UTF16-LE, so the examples cannot be made to work on Windows.
>
> When the translation is left on Windows, it assumes the non-UTF-16LE
> strings are in the Active Code Page encoding (shown as "system encoding"
> in sessionInfo() in R, Latin-1 in your example) instead of the current C
> library encoding ("C" in your example). So, file names coming from
> Windows will be either the bytes of their UTF-16LE representation or the
> bytes of their Latin-1 representation, but which one is subject to the
> implementation details, so the result is really unusable.
>
> I would say using "C" as encoding in R is not a good idea, and
> particularly not on Windows.
>
> I would say that what happens with such file names in "C" encoding is
> unspecified behavior, which is subject to change at any time without
> notice, and that both the R 4.0.5 and R-devel behavior you are observing
> are acceptable. I don't think it should be mentioned in the NEWS.
> Personally, I would prefer some stricter checks of strings validity and
> perhaps disallowing the "C" encoding in R, so yet another behavior where
> it would be clearer that this cannot really work, but that would require
> more thought and effort.
>
> Best
> Tomas
>
>
> On 4/27/21 9:53 PM, Toby Hocking wrote:
>
> > Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be fixed in
> > R-devel already. I checked on
> > https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and there is no
> > mention of these changes, so I'm wondering if they are intentional? If
> so,
> > could someone please add a mention of the bugfix in the NEWS?
> >
> > The problem involves file.exists, on windows, when a long/strange input
> > file name Encoding is unknown, in C locale. I expected that FALSE should
> be
> > returned (and it is on R-devel), but I got an error in R-4.0.5. Code to
> > reproduce is:
> >
> > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
> > \360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
> > \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
> > Encoding(x) <- "unknown"
> > Sys.setlocale(locale="C")
> > sessionInfo()
> > file.exists(x)
> >
> > Output I got from R-4.0.5 was
> >
> >> sessionInfo()
> > R version 4.0.5 (2021-03-31)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 19042)
> >
> > Matrix products: default
> >
> > locale:
> > [1] C
> > system code page: 1252
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_4.0.5
> >> file.exists(x)
> > Error in file.exists(x) : file name conversion problem -- name too long?
> > Execution halted
> >
> > Output I got from R-devel was
> >
> >> sessionInfo()
> > R Under development (unstable) (2021-04-26 r80229)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 19042)
> >
> > Matrix products: default
> >
> > locale:
> > [1] C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_4.2.0
> >> file.exists(x)
> > [1] FALSE
> >
> > I also observed similar results when using normalizePath instead of
> > file.exists (error in R-4.0.5, no error in R-devel).
> >
> >> normalizePath(x) #R-4.0.5
> > Error in path.expand(path) : unable to translate 'p'
> > | p'p;
> > | p'p<
> > | p'p=
> > | p'p>
> > | p'p<bf>
> > ' to UTF-8
> > Calls: normalizePath -> path.expand
> > Execution halted
> >
> >> normalizePath(x) #R-devel
> > [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
> > \360\237\247\222\360\237\217\273\n| \360\237\247\222\360\237\217\274\n|
> > \360\237\247\222\360\237\217\275\n| \360\237\247\222\360\237\217\276\n|
> > \360\237\247\222\360\237\217\277\n"
> > Warning message:
> > In normalizePath(path.expand(path), winslash, mustWork) : path[1]="?
> > | ??
> > | ??
> > | ??
> > | ??
> > | ??
> > ": The filename, directory name, or volume label syntax is incorrect
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Apr 28 17:22:06 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 28 Apr 2021 17:22:06 +0200
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
 <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
 <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
Message-ID: <24713.32158.748142.898970@stat.math.ethz.ch>

>>>>> Toby Hocking 
>>>>>     on Wed, 28 Apr 2021 07:21:05 -0700 writes:

    > Hi Tomas, thanks for the thoughtful reply. That makes sense about the
    > problems with C locale on windows. Actually I did not choose to use C
    > locale, but instead it was invoked automatically during a package check.
    > To be clear, I do NOT have a file with that name, but I do want file.exists
    > to return a reasonable value, FALSE (with no error). If that behavior is
    > unspecified, then should I use something like tryCatch(file.exists(x),
    > error=function(e)FALSE) instead of assuming that file.exists will always
    > return a logical vector without error? For my particular application that
    > work-around should probably be sufficient, but one may imagine a situation
    > where you want to do

    > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
    > \360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
    > \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
    > Encoding(x) <- "unknown"
    > Sys.setlocale(locale="C")
    > f <- tempfile()
    > cat("", file = f)
    > two <- c(x, f)
    > file.exists(two)

    > and in that case the correct response from R, in my opinion, would be
    > c(FALSE, TRUE) -- not an error.
    > Toby

Indeed, thanks a lot to Tomas!

# A remark 
We *could* -- and according to my taste should -- try to have file.exists()
return a logical vector in almost all cases, namely, e.g., still give an
error for file.exists(pi) :
Notably  if  `c(...)`  {for the  `...`  arguments of file.exists() }
is a character vector, always return a logical vector of the same
length, *and* we could notably make use of the fact that R's
logical type is not binary but ternary, and hence that return
value could contain values from {TRUE, NA, FALSE}  and interpret NA
as "don't know" in all cases where the corresponding string in
the input had an Encoding(.) that was "fishy" in some sense
given the "context" (OS, locale, OS_version, ICU-presence, ...).

In particular, when the underlying code sees encoding-translation issues
for a string,  NA  would be returned instead of an error.

Martin

    > On Wed, Apr 28, 2021 at 3:10 AM Tomas Kalibera <tomas.kalibera at gmail.com>
    > wrote:

    >> Hi Toby,
    >> 
    >> a defensive, portable approach would be to use only file names regarded
    >> portable by POSIX, so characters including ASCII letters, digits,
    >> underscore, dot, hyphen (but hyphen should not be the first character).
    >> That would always work on all systems and this is what I would use.
    >> 
    >> Individual operating systems and file systems and their configurations
    >> differ in which additional characters they support and how. On some,
    >> file names are just sequences of bytes, on some, they have to be valid
    >> strings in certain encoding (and then with certain exceptions).
    >> 
    >> On Windows, file names are at the lowest level in UTF-16LE encoding (and
    >> admitting unpaired surrogates for historical reasons). R stores strings
    >> in other encodings (UTF-8, native, Latin-1), so file names have to be
    >> translated to/from UTF-16LE, either directly by R or by Windows.
    >> 
    >> But, there is no way to convert (non-ASCII) strings in "C" encoding to
    >> UTF16-LE, so the examples cannot be made to work on Windows.
    >> 
    >> When the translation is left on Windows, it assumes the non-UTF-16LE
    >> strings are in the Active Code Page encoding (shown as "system encoding"
    >> in sessionInfo() in R, Latin-1 in your example) instead of the current C
    >> library encoding ("C" in your example). So, file names coming from
    >> Windows will be either the bytes of their UTF-16LE representation or the
    >> bytes of their Latin-1 representation, but which one is subject to the
    >> implementation details, so the result is really unusable.
    >> 
    >> I would say using "C" as encoding in R is not a good idea, and
    >> particularly not on Windows.
    >> 
    >> I would say that what happens with such file names in "C" encoding is
    >> unspecified behavior, which is subject to change at any time without
    >> notice, and that both the R 4.0.5 and R-devel behavior you are observing
    >> are acceptable. I don't think it should be mentioned in the NEWS.
    >> Personally, I would prefer some stricter checks of strings validity and
    >> perhaps disallowing the "C" encoding in R, so yet another behavior where
    >> it would be clearer that this cannot really work, but that would require
    >> more thought and effort.
    >> 
    >> Best
    >> Tomas
    >> 
    >> 
    >> On 4/27/21 9:53 PM, Toby Hocking wrote:
    >> 
    >> > Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be fixed in
    >> > R-devel already. I checked on
    >> > https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and there is no
    >> > mention of these changes, so I'm wondering if they are intentional? If
    >> so,
    >> > could someone please add a mention of the bugfix in the NEWS?
    >> >
    >> > The problem involves file.exists, on windows, when a long/strange input
    >> > file name Encoding is unknown, in C locale. I expected that FALSE should
    >> be
    >> > returned (and it is on R-devel), but I got an error in R-4.0.5. Code to
    >> > reproduce is:
    >> >
    >> > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
    >> > \360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
    >> > \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
    >> > Encoding(x) <- "unknown"
    >> > Sys.setlocale(locale="C")
    >> > sessionInfo()
    >> > file.exists(x)
    >> >
    >> > Output I got from R-4.0.5 was
    >> >
    >> >> sessionInfo()
    >> > R version 4.0.5 (2021-03-31)
    >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
    >> > Running under: Windows 10 x64 (build 19042)
    >> >
    >> > Matrix products: default
    >> >
    >> > locale:
    >> > [1] C
    >> > system code page: 1252
    >> >
    >> > attached base packages:
    >> > [1] stats     graphics  grDevices utils     datasets  methods   base
    >> >
    >> > loaded via a namespace (and not attached):
    >> > [1] compiler_4.0.5
    >> >> file.exists(x)
    >> > Error in file.exists(x) : file name conversion problem -- name too long?
    >> > Execution halted
    >> >
    >> > Output I got from R-devel was
    >> >
    >> >> sessionInfo()
    >> > R Under development (unstable) (2021-04-26 r80229)
    >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
    >> > Running under: Windows 10 x64 (build 19042)
    >> >
    >> > Matrix products: default
    >> >
    >> > locale:
    >> > [1] C
    >> >
    >> > attached base packages:
    >> > [1] stats     graphics  grDevices utils     datasets  methods   base
    >> >
    >> > loaded via a namespace (and not attached):
    >> > [1] compiler_4.2.0
    >> >> file.exists(x)
    >> > [1] FALSE
    >> >
    >> > I also observed similar results when using normalizePath instead of
    >> > file.exists (error in R-4.0.5, no error in R-devel).
    >> >
    >> >> normalizePath(x) #R-4.0.5
    >> > Error in path.expand(path) : unable to translate 'p'
    >> > | p'p;
    >> > | p'p<
    >> > | p'p=
    >> > | p'p>
    >> > | p'p<bf>
    >> > ' to UTF-8
    >> > Calls: normalizePath -> path.expand
    >> > Execution halted
    >> >
    >> >> normalizePath(x) #R-devel
    >> > [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
    >> > \360\237\247\222\360\237\217\273\n| \360\237\247\222\360\237\217\274\n|
    >> > \360\237\247\222\360\237\217\275\n| \360\237\247\222\360\237\217\276\n|
    >> > \360\237\247\222\360\237\217\277\n"
    >> > Warning message:
    >> > In normalizePath(path.expand(path), winslash, mustWork) : path[1]="?
    >> > | ??
    >> > | ??
    >> > | ??
    >> > | ??
    >> > | ??
    >> > ": The filename, directory name, or volume label syntax is incorrect


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 28 17:32:04 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 28 Apr 2021 17:32:04 +0200
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
 <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
 <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
Message-ID: <ad3d5e51-30ea-297a-fa4e-0a4a6788dbf4@gmail.com>

Hi Toby,

On 4/28/21 4:21 PM, Toby Hocking wrote:
> Hi Tomas, thanks for the thoughtful reply. That makes sense about the 
> problems with C locale on windows. Actually I did not choose to use C 
> locale, but instead it was invoked automatically during a package check.

I see, as long as the tests only have ASCII strings, the encoding does 
not matter, but once there are also other characters, I think we should 
be running with some real encoding, and one where the characters can be 
represented.

Best,
Tomas

> To be clear, I do NOT have a file with that name, but I do want 
> file.exists to return a reasonable value, FALSE (with no error). If 
> that behavior is unspecified, then should I use something like 
> tryCatch(file.exists(x), error=function(e)FALSE) instead of assuming 
> that file.exists will always return a logical vector without error? 
> For my particular application that work-around should probably be 
> sufficient, but one may imagine a situation where you want to do
>
> x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n| 
> \360\237\247\222\360\237\217\274\n| 
> \360\237\247\222\360\237\217\275\n| 
> \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
> Encoding(x) <- "unknown"

> Sys.setlocale(locale="C")
> f <- tempfile()
> cat("", file = f)
> two <- c(x, f)
> file.exists(two)
>
> and in that case the correct response from R, in my opinion, would be 
> c(FALSE, TRUE) -- not an error.


> Toby
>
> On Wed, Apr 28, 2021 at 3:10 AM Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     Hi Toby,
>
>     a defensive, portable approach would be to use only file names
>     regarded
>     portable by POSIX, so characters including ASCII letters, digits,
>     underscore, dot, hyphen (but hyphen should not be the first
>     character).
>     That would always work on all systems and this is what I would use.
>
>     Individual operating systems and file systems and their
>     configurations
>     differ in which additional characters they support and how. On some,
>     file names are just sequences of bytes, on some, they have to be
>     valid
>     strings in certain encoding (and then with certain exceptions).
>
>     On Windows, file names are at the lowest level in UTF-16LE
>     encoding (and
>     admitting unpaired surrogates for historical reasons). R stores
>     strings
>     in other encodings (UTF-8, native, Latin-1), so file names have to be
>     translated to/from UTF-16LE, either directly by R or by Windows.
>
>     But, there is no way to convert (non-ASCII) strings in "C"
>     encoding to
>     UTF16-LE, so the examples cannot be made to work on Windows.
>
>     When the translation is left on Windows, it assumes the non-UTF-16LE
>     strings are in the Active Code Page encoding (shown as "system
>     encoding"
>     in sessionInfo() in R, Latin-1 in your example) instead of the
>     current C
>     library encoding ("C" in your example). So, file names coming from
>     Windows will be either the bytes of their UTF-16LE representation
>     or the
>     bytes of their Latin-1 representation, but which one is subject to
>     the
>     implementation details, so the result is really unusable.
>
>     I would say using "C" as encoding in R is not a good idea, and
>     particularly not on Windows.
>
>     I would say that what happens with such file names in "C" encoding is
>     unspecified behavior, which is subject to change at any time without
>     notice, and that both the R 4.0.5 and R-devel behavior you are
>     observing
>     are acceptable. I don't think it should be mentioned in the NEWS.
>     Personally, I would prefer some stricter checks of strings
>     validity and
>     perhaps disallowing the "C" encoding in R, so yet another behavior
>     where
>     it would be clearer that this cannot really work, but that would
>     require
>     more thought and effort.
>
>     Best
>     Tomas
>
>
>     On 4/27/21 9:53 PM, Toby Hocking wrote:
>
>     > Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be
>     fixed in
>     > R-devel already. I checked on
>     > https://developer.r-project.org/blosxom.cgi/R-devel/NEWS
>     <https://developer.r-project.org/blosxom.cgi/R-devel/NEWS> and
>     there is no
>     > mention of these changes, so I'm wondering if they are
>     intentional? If so,
>     > could someone please add a mention of the bugfix in the NEWS?
>     >
>     > The problem involves file.exists, on windows, when a
>     long/strange input
>     > file name Encoding is unknown, in C locale. I expected that
>     FALSE should be
>     > returned (and it is on R-devel), but I got an error in R-4.0.5.
>     Code to
>     > reproduce is:
>     >
>     > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
>     > \360\237\247\222\360\237\217\274\n|
>     \360\237\247\222\360\237\217\275\n|
>     > \360\237\247\222\360\237\217\276\n|
>     \360\237\247\222\360\237\217\277\n"
>     > Encoding(x) <- "unknown"
>     > Sys.setlocale(locale="C")
>     > sessionInfo()
>     > file.exists(x)
>     >
>     > Output I got from R-4.0.5 was
>     >
>     >> sessionInfo()
>     > R version 4.0.5 (2021-03-31)
>     > Platform: x86_64-w64-mingw32/x64 (64-bit)
>     > Running under: Windows 10 x64 (build 19042)
>     >
>     > Matrix products: default
>     >
>     > locale:
>     > [1] C
>     > system code page: 1252
>     >
>     > attached base packages:
>     > [1] stats? ? ?graphics? grDevices utils? ? ?datasets methods? ?base
>     >
>     > loaded via a namespace (and not attached):
>     > [1] compiler_4.0.5
>     >> file.exists(x)
>     > Error in file.exists(x) : file name conversion problem -- name
>     too long?
>     > Execution halted
>     >
>     > Output I got from R-devel was
>     >
>     >> sessionInfo()
>     > R Under development (unstable) (2021-04-26 r80229)
>     > Platform: x86_64-w64-mingw32/x64 (64-bit)
>     > Running under: Windows 10 x64 (build 19042)
>     >
>     > Matrix products: default
>     >
>     > locale:
>     > [1] C
>     >
>     > attached base packages:
>     > [1] stats? ? ?graphics? grDevices utils? ? ?datasets methods? ?base
>     >
>     > loaded via a namespace (and not attached):
>     > [1] compiler_4.2.0
>     >> file.exists(x)
>     > [1] FALSE
>     >
>     > I also observed similar results when using normalizePath instead of
>     > file.exists (error in R-4.0.5, no error in R-devel).
>     >
>     >> normalizePath(x) #R-4.0.5
>     > Error in path.expand(path) : unable to translate 'p'
>     > | p'p;
>     > | p'p<
>     > | p'p=
>     > | p'p>
>     > | p'p<bf>
>     > ' to UTF-8
>     > Calls: normalizePath -> path.expand
>     > Execution halted
>     >
>     >> normalizePath(x) #R-devel
>     > [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
>     > \360\237\247\222\360\237\217\273\n|
>     \360\237\247\222\360\237\217\274\n|
>     > \360\237\247\222\360\237\217\275\n|
>     \360\237\247\222\360\237\217\276\n|
>     > \360\237\247\222\360\237\217\277\n"
>     > Warning message:
>     > In normalizePath(path.expand(path), winslash, mustWork) :
>     path[1]="?
>     > | ??
>     > | ??
>     > | ??
>     > | ??
>     > | ??
>     > ": The filename, directory name, or volume label syntax is incorrect
>     >
>     >? ? ? ?[[alternative HTML version deleted]]
>     >
>     > ______________________________________________
>     > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Apr 28 17:42:24 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 28 Apr 2021 17:42:24 +0200
Subject: [Rd] New post not readable
In-Reply-To: <CAN+W6_v1TtpRdkX=wsmRsG1WYoL_MTMVJyWN1-c_6b8GBfsoYw@mail.gmail.com>
References: <CAN+W6_v1TtpRdkX=wsmRsG1WYoL_MTMVJyWN1-c_6b8GBfsoYw@mail.gmail.com>
Message-ID: <24713.33376.143865.179308@stat.math.ethz.ch>

>>>>> Llu?s Revilla 
>>>>>     on Wed, 28 Apr 2021 15:19:53 +0200 writes:

    > Hi all,

    > It has come to my attention that there is a new post on The R blog: "R
    > Can Use Your Help: Testing R Before Release".
    > However, the link returns an error "Not found":
    > https://developer.r-project.org/Blog/public/2021/04/28/r-can-use-your-help-testing-r-before-release/index.html
    > Hope this mailing list is the right place to make it known to the authors.

yes

    > Maybe these new content could be announced on the R-announcement
    > mailing list?

    > For others interested I created a Twitter account that
    > uses The R blog's RSS feed to announce new entries: R_dev_news.

Well, there's  @_R_Foundation   the posts of which are
automatically embedded / mirrored on R's  home page https://www.r-project.org/
and where you can see the previous Blog post still being
announced... ...  but the new one not, probably because of the
error (some files not committed I guess) that you mentioned
above.

So, maybe you should remove R_dev_news  or at least mention that
@_R_Foundation  is the official 'R Foundation' twitter account
*and* that it also uses the Blog feed ..

    > Looking forward to reading the new post.

Me too,  thank you  Llu?s , for the "heads up"!
Martin

    > Cheers,
    > Llu?s


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 28 18:04:08 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 28 Apr 2021 18:04:08 +0200
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <24713.32158.748142.898970@stat.math.ethz.ch>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
 <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
 <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
 <24713.32158.748142.898970@stat.math.ethz.ch>
Message-ID: <de84ebe4-89a6-46cc-2a3e-456240e4b4df@gmail.com>


On 4/28/21 5:22 PM, Martin Maechler wrote:
>>>>>> Toby Hocking
>>>>>>      on Wed, 28 Apr 2021 07:21:05 -0700 writes:
>      > Hi Tomas, thanks for the thoughtful reply. That makes sense about the
>      > problems with C locale on windows. Actually I did not choose to use C
>      > locale, but instead it was invoked automatically during a package check.
>      > To be clear, I do NOT have a file with that name, but I do want file.exists
>      > to return a reasonable value, FALSE (with no error). If that behavior is
>      > unspecified, then should I use something like tryCatch(file.exists(x),
>      > error=function(e)FALSE) instead of assuming that file.exists will always
>      > return a logical vector without error? For my particular application that
>      > work-around should probably be sufficient, but one may imagine a situation
>      > where you want to do
>
>      > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
>      > \360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
>      > \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
>      > Encoding(x) <- "unknown"
>      > Sys.setlocale(locale="C")
>      > f <- tempfile()
>      > cat("", file = f)
>      > two <- c(x, f)
>      > file.exists(two)
>
>      > and in that case the correct response from R, in my opinion, would be
>      > c(FALSE, TRUE) -- not an error.
>      > Toby
>
> Indeed, thanks a lot to Tomas!
>
> # A remark
> We *could* -- and according to my taste should -- try to have file.exists()
> return a logical vector in almost all cases, namely, e.g., still give an
> error for file.exists(pi) :
> Notably  if  `c(...)`  {for the  `...`  arguments of file.exists() }
> is a character vector, always return a logical vector of the same
> length, *and* we could notably make use of the fact that R's
> logical type is not binary but ternary, and hence that return
> value could contain values from {TRUE, NA, FALSE}  and interpret NA
> as "don't know" in all cases where the corresponding string in
> the input had an Encoding(.) that was "fishy" in some sense
> given the "context" (OS, locale, OS_version, ICU-presence, ...).
>
> In particular, when the underlying code sees encoding-translation issues
> for a string,  NA  would be returned instead of an error.

Yes, I agree with Toby and you that there is benefit in allowing 
per-element, vectorized use of file.exists(), and well it is the case 
now, we just fall back to FALSE. NA might be be better in case of error 
that prevents the function from deciding whether the file exists or not 
(e.g. an invalid name in form that make is clear such file cannot exist 
might be a different case...).

But, the only way to get a translation error is by passing a string to 
file.exists() which is invalid in its declared encoding (or which is in 
"C" encoding). I would hope that we could get to the point where such 
situation is prevented (we only allow creation of strings that can be 
translated to Unicode). If we get there, the example would fail with 
error (yet, right, before getting to file.exists()).

My point that I would not write tests of this behavior stands. One 
should not use such file names, and after the change Toby reported from 
ERROR to FALSE, Martin's proposal would change to NA, mine eventually to 
ERROR, etc. So it is best for now to leave it unspecified and not 
trigger it, I think.

Tomas

>
> Martin
>
>      > On Wed, Apr 28, 2021 at 3:10 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>      > wrote:
>
>      >> Hi Toby,
>      >>
>      >> a defensive, portable approach would be to use only file names regarded
>      >> portable by POSIX, so characters including ASCII letters, digits,
>      >> underscore, dot, hyphen (but hyphen should not be the first character).
>      >> That would always work on all systems and this is what I would use.
>      >>
>      >> Individual operating systems and file systems and their configurations
>      >> differ in which additional characters they support and how. On some,
>      >> file names are just sequences of bytes, on some, they have to be valid
>      >> strings in certain encoding (and then with certain exceptions).
>      >>
>      >> On Windows, file names are at the lowest level in UTF-16LE encoding (and
>      >> admitting unpaired surrogates for historical reasons). R stores strings
>      >> in other encodings (UTF-8, native, Latin-1), so file names have to be
>      >> translated to/from UTF-16LE, either directly by R or by Windows.
>      >>
>      >> But, there is no way to convert (non-ASCII) strings in "C" encoding to
>      >> UTF16-LE, so the examples cannot be made to work on Windows.
>      >>
>      >> When the translation is left on Windows, it assumes the non-UTF-16LE
>      >> strings are in the Active Code Page encoding (shown as "system encoding"
>      >> in sessionInfo() in R, Latin-1 in your example) instead of the current C
>      >> library encoding ("C" in your example). So, file names coming from
>      >> Windows will be either the bytes of their UTF-16LE representation or the
>      >> bytes of their Latin-1 representation, but which one is subject to the
>      >> implementation details, so the result is really unusable.
>      >>
>      >> I would say using "C" as encoding in R is not a good idea, and
>      >> particularly not on Windows.
>      >>
>      >> I would say that what happens with such file names in "C" encoding is
>      >> unspecified behavior, which is subject to change at any time without
>      >> notice, and that both the R 4.0.5 and R-devel behavior you are observing
>      >> are acceptable. I don't think it should be mentioned in the NEWS.
>      >> Personally, I would prefer some stricter checks of strings validity and
>      >> perhaps disallowing the "C" encoding in R, so yet another behavior where
>      >> it would be clearer that this cannot really work, but that would require
>      >> more thought and effort.
>      >>
>      >> Best
>      >> Tomas
>      >>
>      >>
>      >> On 4/27/21 9:53 PM, Toby Hocking wrote:
>      >>
>      >> > Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be fixed in
>      >> > R-devel already. I checked on
>      >> > https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and there is no
>      >> > mention of these changes, so I'm wondering if they are intentional? If
>      >> so,
>      >> > could someone please add a mention of the bugfix in the NEWS?
>      >> >
>      >> > The problem involves file.exists, on windows, when a long/strange input
>      >> > file name Encoding is unknown, in C locale. I expected that FALSE should
>      >> be
>      >> > returned (and it is on R-devel), but I got an error in R-4.0.5. Code to
>      >> > reproduce is:
>      >> >
>      >> > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
>      >> > \360\237\247\222\360\237\217\274\n| \360\237\247\222\360\237\217\275\n|
>      >> > \360\237\247\222\360\237\217\276\n| \360\237\247\222\360\237\217\277\n"
>      >> > Encoding(x) <- "unknown"
>      >> > Sys.setlocale(locale="C")
>      >> > sessionInfo()
>      >> > file.exists(x)
>      >> >
>      >> > Output I got from R-4.0.5 was
>      >> >
>      >> >> sessionInfo()
>      >> > R version 4.0.5 (2021-03-31)
>      >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>      >> > Running under: Windows 10 x64 (build 19042)
>      >> >
>      >> > Matrix products: default
>      >> >
>      >> > locale:
>      >> > [1] C
>      >> > system code page: 1252
>      >> >
>      >> > attached base packages:
>      >> > [1] stats     graphics  grDevices utils     datasets  methods   base
>      >> >
>      >> > loaded via a namespace (and not attached):
>      >> > [1] compiler_4.0.5
>      >> >> file.exists(x)
>      >> > Error in file.exists(x) : file name conversion problem -- name too long?
>      >> > Execution halted
>      >> >
>      >> > Output I got from R-devel was
>      >> >
>      >> >> sessionInfo()
>      >> > R Under development (unstable) (2021-04-26 r80229)
>      >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>      >> > Running under: Windows 10 x64 (build 19042)
>      >> >
>      >> > Matrix products: default
>      >> >
>      >> > locale:
>      >> > [1] C
>      >> >
>      >> > attached base packages:
>      >> > [1] stats     graphics  grDevices utils     datasets  methods   base
>      >> >
>      >> > loaded via a namespace (and not attached):
>      >> > [1] compiler_4.2.0
>      >> >> file.exists(x)
>      >> > [1] FALSE
>      >> >
>      >> > I also observed similar results when using normalizePath instead of
>      >> > file.exists (error in R-4.0.5, no error in R-devel).
>      >> >
>      >> >> normalizePath(x) #R-4.0.5
>      >> > Error in path.expand(path) : unable to translate 'p'
>      >> > | p'p;
>      >> > | p'p<
>      >> > | p'p=
>      >> > | p'p>
>      >> > | p'p<bf>
>      >> > ' to UTF-8
>      >> > Calls: normalizePath -> path.expand
>      >> > Execution halted
>      >> >
>      >> >> normalizePath(x) #R-devel
>      >> > [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
>      >> > \360\237\247\222\360\237\217\273\n| \360\237\247\222\360\237\217\274\n|
>      >> > \360\237\247\222\360\237\217\275\n| \360\237\247\222\360\237\217\276\n|
>      >> > \360\237\247\222\360\237\217\277\n"
>      >> > Warning message:
>      >> > In normalizePath(path.expand(path), winslash, mustWork) : path[1]="?
>      >> > | ??
>      >> > | ??
>      >> > | ??
>      >> > | ??
>      >> > | ??
>      >> > ": The filename, directory name, or volume label syntax is incorrect
>


From tdhock5 @end|ng |rom gm@||@com  Wed Apr 28 18:20:52 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 28 Apr 2021 09:20:52 -0700
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <de84ebe4-89a6-46cc-2a3e-456240e4b4df@gmail.com>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
 <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
 <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
 <24713.32158.748142.898970@stat.math.ethz.ch>
 <de84ebe4-89a6-46cc-2a3e-456240e4b4df@gmail.com>
Message-ID: <CALK03d1MwBzmCTuXFUb2vdoC66L2mDVBmMyjo_ELWGzZGanz-g@mail.gmail.com>

+1 for Martin's proposal, that makes sense to me too.
About Tomas' idea to immediately stop with an error when the user tries to
create a string which is invalid in its declared encoding, that sounds
great. I'm just wondering if that would break my application. My package is
running an example during a check, in which the unicode/emoji is read into
R using readLines from a file under inst/extdata, so presumably it should
work as long as readLines handles the encoding correctly and/or the locale
during package check is changed to something more reasonable on windows?

On Wed, Apr 28, 2021 at 9:04 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> On 4/28/21 5:22 PM, Martin Maechler wrote:
> >>>>>> Toby Hocking
> >>>>>>      on Wed, 28 Apr 2021 07:21:05 -0700 writes:
> >      > Hi Tomas, thanks for the thoughtful reply. That makes sense about
> the
> >      > problems with C locale on windows. Actually I did not choose to
> use C
> >      > locale, but instead it was invoked automatically during a package
> check.
> >      > To be clear, I do NOT have a file with that name, but I do want
> file.exists
> >      > to return a reasonable value, FALSE (with no error). If that
> behavior is
> >      > unspecified, then should I use something like
> tryCatch(file.exists(x),
> >      > error=function(e)FALSE) instead of assuming that file.exists will
> always
> >      > return a logical vector without error? For my particular
> application that
> >      > work-around should probably be sufficient, but one may imagine a
> situation
> >      > where you want to do
> >
> >      > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
> >      > \360\237\247\222\360\237\217\274\n|
> \360\237\247\222\360\237\217\275\n|
> >      > \360\237\247\222\360\237\217\276\n|
> \360\237\247\222\360\237\217\277\n"
> >      > Encoding(x) <- "unknown"
> >      > Sys.setlocale(locale="C")
> >      > f <- tempfile()
> >      > cat("", file = f)
> >      > two <- c(x, f)
> >      > file.exists(two)
> >
> >      > and in that case the correct response from R, in my opinion,
> would be
> >      > c(FALSE, TRUE) -- not an error.
> >      > Toby
> >
> > Indeed, thanks a lot to Tomas!
> >
> > # A remark
> > We *could* -- and according to my taste should -- try to have
> file.exists()
> > return a logical vector in almost all cases, namely, e.g., still give an
> > error for file.exists(pi) :
> > Notably  if  `c(...)`  {for the  `...`  arguments of file.exists() }
> > is a character vector, always return a logical vector of the same
> > length, *and* we could notably make use of the fact that R's
> > logical type is not binary but ternary, and hence that return
> > value could contain values from {TRUE, NA, FALSE}  and interpret NA
> > as "don't know" in all cases where the corresponding string in
> > the input had an Encoding(.) that was "fishy" in some sense
> > given the "context" (OS, locale, OS_version, ICU-presence, ...).
> >
> > In particular, when the underlying code sees encoding-translation issues
> > for a string,  NA  would be returned instead of an error.
>
> Yes, I agree with Toby and you that there is benefit in allowing
> per-element, vectorized use of file.exists(), and well it is the case
> now, we just fall back to FALSE. NA might be be better in case of error
> that prevents the function from deciding whether the file exists or not
> (e.g. an invalid name in form that make is clear such file cannot exist
> might be a different case...).
>
> But, the only way to get a translation error is by passing a string to
> file.exists() which is invalid in its declared encoding (or which is in
> "C" encoding). I would hope that we could get to the point where such
> situation is prevented (we only allow creation of strings that can be
> translated to Unicode). If we get there, the example would fail with
> error (yet, right, before getting to file.exists()).
>
> My point that I would not write tests of this behavior stands. One
> should not use such file names, and after the change Toby reported from
> ERROR to FALSE, Martin's proposal would change to NA, mine eventually to
> ERROR, etc. So it is best for now to leave it unspecified and not
> trigger it, I think.
>
> Tomas
>
> >
> > Martin
> >
> >      > On Wed, Apr 28, 2021 at 3:10 AM Tomas Kalibera <
> tomas.kalibera at gmail.com>
> >      > wrote:
> >
> >      >> Hi Toby,
> >      >>
> >      >> a defensive, portable approach would be to use only file names
> regarded
> >      >> portable by POSIX, so characters including ASCII letters, digits,
> >      >> underscore, dot, hyphen (but hyphen should not be the first
> character).
> >      >> That would always work on all systems and this is what I would
> use.
> >      >>
> >      >> Individual operating systems and file systems and their
> configurations
> >      >> differ in which additional characters they support and how. On
> some,
> >      >> file names are just sequences of bytes, on some, they have to be
> valid
> >      >> strings in certain encoding (and then with certain exceptions).
> >      >>
> >      >> On Windows, file names are at the lowest level in UTF-16LE
> encoding (and
> >      >> admitting unpaired surrogates for historical reasons). R stores
> strings
> >      >> in other encodings (UTF-8, native, Latin-1), so file names have
> to be
> >      >> translated to/from UTF-16LE, either directly by R or by Windows.
> >      >>
> >      >> But, there is no way to convert (non-ASCII) strings in "C"
> encoding to
> >      >> UTF16-LE, so the examples cannot be made to work on Windows.
> >      >>
> >      >> When the translation is left on Windows, it assumes the
> non-UTF-16LE
> >      >> strings are in the Active Code Page encoding (shown as "system
> encoding"
> >      >> in sessionInfo() in R, Latin-1 in your example) instead of the
> current C
> >      >> library encoding ("C" in your example). So, file names coming
> from
> >      >> Windows will be either the bytes of their UTF-16LE
> representation or the
> >      >> bytes of their Latin-1 representation, but which one is subject
> to the
> >      >> implementation details, so the result is really unusable.
> >      >>
> >      >> I would say using "C" as encoding in R is not a good idea, and
> >      >> particularly not on Windows.
> >      >>
> >      >> I would say that what happens with such file names in "C"
> encoding is
> >      >> unspecified behavior, which is subject to change at any time
> without
> >      >> notice, and that both the R 4.0.5 and R-devel behavior you are
> observing
> >      >> are acceptable. I don't think it should be mentioned in the NEWS.
> >      >> Personally, I would prefer some stricter checks of strings
> validity and
> >      >> perhaps disallowing the "C" encoding in R, so yet another
> behavior where
> >      >> it would be clearer that this cannot really work, but that would
> require
> >      >> more thought and effort.
> >      >>
> >      >> Best
> >      >> Tomas
> >      >>
> >      >>
> >      >> On 4/27/21 9:53 PM, Toby Hocking wrote:
> >      >>
> >      >> > Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be
> fixed in
> >      >> > R-devel already. I checked on
> >      >> > https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and
> there is no
> >      >> > mention of these changes, so I'm wondering if they are
> intentional? If
> >      >> so,
> >      >> > could someone please add a mention of the bugfix in the NEWS?
> >      >> >
> >      >> > The problem involves file.exists, on windows, when a
> long/strange input
> >      >> > file name Encoding is unknown, in C locale. I expected that
> FALSE should
> >      >> be
> >      >> > returned (and it is on R-devel), but I got an error in
> R-4.0.5. Code to
> >      >> > reproduce is:
> >      >> >
> >      >> > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
> >      >> > \360\237\247\222\360\237\217\274\n|
> \360\237\247\222\360\237\217\275\n|
> >      >> > \360\237\247\222\360\237\217\276\n|
> \360\237\247\222\360\237\217\277\n"
> >      >> > Encoding(x) <- "unknown"
> >      >> > Sys.setlocale(locale="C")
> >      >> > sessionInfo()
> >      >> > file.exists(x)
> >      >> >
> >      >> > Output I got from R-4.0.5 was
> >      >> >
> >      >> >> sessionInfo()
> >      >> > R version 4.0.5 (2021-03-31)
> >      >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> >      >> > Running under: Windows 10 x64 (build 19042)
> >      >> >
> >      >> > Matrix products: default
> >      >> >
> >      >> > locale:
> >      >> > [1] C
> >      >> > system code page: 1252
> >      >> >
> >      >> > attached base packages:
> >      >> > [1] stats     graphics  grDevices utils     datasets  methods
>  base
> >      >> >
> >      >> > loaded via a namespace (and not attached):
> >      >> > [1] compiler_4.0.5
> >      >> >> file.exists(x)
> >      >> > Error in file.exists(x) : file name conversion problem -- name
> too long?
> >      >> > Execution halted
> >      >> >
> >      >> > Output I got from R-devel was
> >      >> >
> >      >> >> sessionInfo()
> >      >> > R Under development (unstable) (2021-04-26 r80229)
> >      >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> >      >> > Running under: Windows 10 x64 (build 19042)
> >      >> >
> >      >> > Matrix products: default
> >      >> >
> >      >> > locale:
> >      >> > [1] C
> >      >> >
> >      >> > attached base packages:
> >      >> > [1] stats     graphics  grDevices utils     datasets  methods
>  base
> >      >> >
> >      >> > loaded via a namespace (and not attached):
> >      >> > [1] compiler_4.2.0
> >      >> >> file.exists(x)
> >      >> > [1] FALSE
> >      >> >
> >      >> > I also observed similar results when using normalizePath
> instead of
> >      >> > file.exists (error in R-4.0.5, no error in R-devel).
> >      >> >
> >      >> >> normalizePath(x) #R-4.0.5
> >      >> > Error in path.expand(path) : unable to translate 'p'
> >      >> > | p'p;
> >      >> > | p'p<
> >      >> > | p'p=
> >      >> > | p'p>
> >      >> > | p'p<bf>
> >      >> > ' to UTF-8
> >      >> > Calls: normalizePath -> path.expand
> >      >> > Execution halted
> >      >> >
> >      >> >> normalizePath(x) #R-devel
> >      >> > [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
> >      >> > \360\237\247\222\360\237\217\273\n|
> \360\237\247\222\360\237\217\274\n|
> >      >> > \360\237\247\222\360\237\217\275\n|
> \360\237\247\222\360\237\217\276\n|
> >      >> > \360\237\247\222\360\237\217\277\n"
> >      >> > Warning message:
> >      >> > In normalizePath(path.expand(path), winslash, mustWork) :
> path[1]="?
> >      >> > | ??
> >      >> > | ??
> >      >> > | ??
> >      >> > | ??
> >      >> > | ??
> >      >> > ": The filename, directory name, or volume label syntax is
> incorrect
> >
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 28 18:40:42 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 28 Apr 2021 18:40:42 +0200
Subject: [Rd] NEWS item for bugfix in normalizePath and file.exists?
In-Reply-To: <CALK03d1MwBzmCTuXFUb2vdoC66L2mDVBmMyjo_ELWGzZGanz-g@mail.gmail.com>
References: <CALK03d25Z6gKrCC-FenqzBREqAYVG8vXJMtU42dCd4mYJkSkWg@mail.gmail.com>
 <a65a5b03-a361-3883-3055-1e045c7cdbe6@gmail.com>
 <CALK03d1RV56T+yz1vTNRcW6X61JSqv0Yv=M0xKEZ+vsCA_gfnQ@mail.gmail.com>
 <24713.32158.748142.898970@stat.math.ethz.ch>
 <de84ebe4-89a6-46cc-2a3e-456240e4b4df@gmail.com>
 <CALK03d1MwBzmCTuXFUb2vdoC66L2mDVBmMyjo_ELWGzZGanz-g@mail.gmail.com>
Message-ID: <99283139-4862-2662-aa93-c836c1be4efd@gmail.com>

On 4/28/21 6:20 PM, Toby Hocking wrote:
> +1 for Martin's proposal, that makes sense to me too.
> About Tomas' idea to immediately stop with an error when the user tries to
> create a string which is invalid in its declared encoding, that sounds
> great. I'm just wondering if that would break my application. My package is
> running an example during a check, in which the unicode/emoji is read into
> R using readLines from a file under inst/extdata, so presumably it should
> work as long as readLines handles the encoding correctly and/or the locale
> during package check is changed to something more reasonable on windows?

Once we have UTF-8 as native encoding on Windows, things like this 
should work reliably. It should be already the case with the 
experimental UCRT builds.

Even in the MSVCRT/official builds, in some cases things like this could 
work on Windows, depending on whether they trigger translation to native 
encoding or not. E.g. readLines() with encoding="UTF-8" argument would 
produce strings flagged as UTF-8, so indeed ones that could be 
translated to UTF-16LE if they are valid. Some file operations on 
Windows work with UTF-8 pathnames avoiding translation to native 
encoding, but not all, and instead of investing effort into fixing more 
we should I think instead invest into switching to UTF-8 as native encoding.

Actually, by using Emoji's you may also trigger bugs when supplementary 
characters are not supported on Windows. This is something that is still 
relevant after the switch to UTF-8 as native encoding, so something that 
needs to be fixed fully, and there have been some improvements recently.

Tomas

>
> On Wed, Apr 28, 2021 at 9:04 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>> On 4/28/21 5:22 PM, Martin Maechler wrote:
>>>>>>>> Toby Hocking
>>>>>>>>       on Wed, 28 Apr 2021 07:21:05 -0700 writes:
>>>       > Hi Tomas, thanks for the thoughtful reply. That makes sense about
>> the
>>>       > problems with C locale on windows. Actually I did not choose to
>> use C
>>>       > locale, but instead it was invoked automatically during a package
>> check.
>>>       > To be clear, I do NOT have a file with that name, but I do want
>> file.exists
>>>       > to return a reasonable value, FALSE (with no error). If that
>> behavior is
>>>       > unspecified, then should I use something like
>> tryCatch(file.exists(x),
>>>       > error=function(e)FALSE) instead of assuming that file.exists will
>> always
>>>       > return a logical vector without error? For my particular
>> application that
>>>       > work-around should probably be sufficient, but one may imagine a
>> situation
>>>       > where you want to do
>>>
>>>       > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
>>>       > \360\237\247\222\360\237\217\274\n|
>> \360\237\247\222\360\237\217\275\n|
>>>       > \360\237\247\222\360\237\217\276\n|
>> \360\237\247\222\360\237\217\277\n"
>>>       > Encoding(x) <- "unknown"
>>>       > Sys.setlocale(locale="C")
>>>       > f <- tempfile()
>>>       > cat("", file = f)
>>>       > two <- c(x, f)
>>>       > file.exists(two)
>>>
>>>       > and in that case the correct response from R, in my opinion,
>> would be
>>>       > c(FALSE, TRUE) -- not an error.
>>>       > Toby
>>>
>>> Indeed, thanks a lot to Tomas!
>>>
>>> # A remark
>>> We *could* -- and according to my taste should -- try to have
>> file.exists()
>>> return a logical vector in almost all cases, namely, e.g., still give an
>>> error for file.exists(pi) :
>>> Notably  if  `c(...)`  {for the  `...`  arguments of file.exists() }
>>> is a character vector, always return a logical vector of the same
>>> length, *and* we could notably make use of the fact that R's
>>> logical type is not binary but ternary, and hence that return
>>> value could contain values from {TRUE, NA, FALSE}  and interpret NA
>>> as "don't know" in all cases where the corresponding string in
>>> the input had an Encoding(.) that was "fishy" in some sense
>>> given the "context" (OS, locale, OS_version, ICU-presence, ...).
>>>
>>> In particular, when the underlying code sees encoding-translation issues
>>> for a string,  NA  would be returned instead of an error.
>> Yes, I agree with Toby and you that there is benefit in allowing
>> per-element, vectorized use of file.exists(), and well it is the case
>> now, we just fall back to FALSE. NA might be be better in case of error
>> that prevents the function from deciding whether the file exists or not
>> (e.g. an invalid name in form that make is clear such file cannot exist
>> might be a different case...).
>>
>> But, the only way to get a translation error is by passing a string to
>> file.exists() which is invalid in its declared encoding (or which is in
>> "C" encoding). I would hope that we could get to the point where such
>> situation is prevented (we only allow creation of strings that can be
>> translated to Unicode). If we get there, the example would fail with
>> error (yet, right, before getting to file.exists()).
>>
>> My point that I would not write tests of this behavior stands. One
>> should not use such file names, and after the change Toby reported from
>> ERROR to FALSE, Martin's proposal would change to NA, mine eventually to
>> ERROR, etc. So it is best for now to leave it unspecified and not
>> trigger it, I think.
>>
>> Tomas
>>
>>> Martin
>>>
>>>       > On Wed, Apr 28, 2021 at 3:10 AM Tomas Kalibera <
>> tomas.kalibera at gmail.com>
>>>       > wrote:
>>>
>>>       >> Hi Toby,
>>>       >>
>>>       >> a defensive, portable approach would be to use only file names
>> regarded
>>>       >> portable by POSIX, so characters including ASCII letters, digits,
>>>       >> underscore, dot, hyphen (but hyphen should not be the first
>> character).
>>>       >> That would always work on all systems and this is what I would
>> use.
>>>       >>
>>>       >> Individual operating systems and file systems and their
>> configurations
>>>       >> differ in which additional characters they support and how. On
>> some,
>>>       >> file names are just sequences of bytes, on some, they have to be
>> valid
>>>       >> strings in certain encoding (and then with certain exceptions).
>>>       >>
>>>       >> On Windows, file names are at the lowest level in UTF-16LE
>> encoding (and
>>>       >> admitting unpaired surrogates for historical reasons). R stores
>> strings
>>>       >> in other encodings (UTF-8, native, Latin-1), so file names have
>> to be
>>>       >> translated to/from UTF-16LE, either directly by R or by Windows.
>>>       >>
>>>       >> But, there is no way to convert (non-ASCII) strings in "C"
>> encoding to
>>>       >> UTF16-LE, so the examples cannot be made to work on Windows.
>>>       >>
>>>       >> When the translation is left on Windows, it assumes the
>> non-UTF-16LE
>>>       >> strings are in the Active Code Page encoding (shown as "system
>> encoding"
>>>       >> in sessionInfo() in R, Latin-1 in your example) instead of the
>> current C
>>>       >> library encoding ("C" in your example). So, file names coming
>> from
>>>       >> Windows will be either the bytes of their UTF-16LE
>> representation or the
>>>       >> bytes of their Latin-1 representation, but which one is subject
>> to the
>>>       >> implementation details, so the result is really unusable.
>>>       >>
>>>       >> I would say using "C" as encoding in R is not a good idea, and
>>>       >> particularly not on Windows.
>>>       >>
>>>       >> I would say that what happens with such file names in "C"
>> encoding is
>>>       >> unspecified behavior, which is subject to change at any time
>> without
>>>       >> notice, and that both the R 4.0.5 and R-devel behavior you are
>> observing
>>>       >> are acceptable. I don't think it should be mentioned in the NEWS.
>>>       >> Personally, I would prefer some stricter checks of strings
>> validity and
>>>       >> perhaps disallowing the "C" encoding in R, so yet another
>> behavior where
>>>       >> it would be clearer that this cannot really work, but that would
>> require
>>>       >> more thought and effort.
>>>       >>
>>>       >> Best
>>>       >> Tomas
>>>       >>
>>>       >>
>>>       >> On 4/27/21 9:53 PM, Toby Hocking wrote:
>>>       >>
>>>       >> > Hi all, Today I noticed bug(s?) in R-4.0.5, which seem to be
>> fixed in
>>>       >> > R-devel already. I checked on
>>>       >> > https://developer.r-project.org/blosxom.cgi/R-devel/NEWS and
>> there is no
>>>       >> > mention of these changes, so I'm wondering if they are
>> intentional? If
>>>       >> so,
>>>       >> > could someone please add a mention of the bugfix in the NEWS?
>>>       >> >
>>>       >> > The problem involves file.exists, on windows, when a
>> long/strange input
>>>       >> > file name Encoding is unknown, in C locale. I expected that
>> FALSE should
>>>       >> be
>>>       >> > returned (and it is on R-devel), but I got an error in
>> R-4.0.5. Code to
>>>       >> > reproduce is:
>>>       >> >
>>>       >> > x <- "\360\237\247\222\n| \360\237\247\222\360\237\217\273\n|
>>>       >> > \360\237\247\222\360\237\217\274\n|
>> \360\237\247\222\360\237\217\275\n|
>>>       >> > \360\237\247\222\360\237\217\276\n|
>> \360\237\247\222\360\237\217\277\n"
>>>       >> > Encoding(x) <- "unknown"
>>>       >> > Sys.setlocale(locale="C")
>>>       >> > sessionInfo()
>>>       >> > file.exists(x)
>>>       >> >
>>>       >> > Output I got from R-4.0.5 was
>>>       >> >
>>>       >> >> sessionInfo()
>>>       >> > R version 4.0.5 (2021-03-31)
>>>       >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>       >> > Running under: Windows 10 x64 (build 19042)
>>>       >> >
>>>       >> > Matrix products: default
>>>       >> >
>>>       >> > locale:
>>>       >> > [1] C
>>>       >> > system code page: 1252
>>>       >> >
>>>       >> > attached base packages:
>>>       >> > [1] stats     graphics  grDevices utils     datasets  methods
>>   base
>>>       >> >
>>>       >> > loaded via a namespace (and not attached):
>>>       >> > [1] compiler_4.0.5
>>>       >> >> file.exists(x)
>>>       >> > Error in file.exists(x) : file name conversion problem -- name
>> too long?
>>>       >> > Execution halted
>>>       >> >
>>>       >> > Output I got from R-devel was
>>>       >> >
>>>       >> >> sessionInfo()
>>>       >> > R Under development (unstable) (2021-04-26 r80229)
>>>       >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>       >> > Running under: Windows 10 x64 (build 19042)
>>>       >> >
>>>       >> > Matrix products: default
>>>       >> >
>>>       >> > locale:
>>>       >> > [1] C
>>>       >> >
>>>       >> > attached base packages:
>>>       >> > [1] stats     graphics  grDevices utils     datasets  methods
>>   base
>>>       >> >
>>>       >> > loaded via a namespace (and not attached):
>>>       >> > [1] compiler_4.2.0
>>>       >> >> file.exists(x)
>>>       >> > [1] FALSE
>>>       >> >
>>>       >> > I also observed similar results when using normalizePath
>> instead of
>>>       >> > file.exists (error in R-4.0.5, no error in R-devel).
>>>       >> >
>>>       >> >> normalizePath(x) #R-4.0.5
>>>       >> > Error in path.expand(path) : unable to translate 'p'
>>>       >> > | p'p;
>>>       >> > | p'p<
>>>       >> > | p'p=
>>>       >> > | p'p>
>>>       >> > | p'p<bf>
>>>       >> > ' to UTF-8
>>>       >> > Calls: normalizePath -> path.expand
>>>       >> > Execution halted
>>>       >> >
>>>       >> >> normalizePath(x) #R-devel
>>>       >> > [1] "C:\\Users\\th798\\R\\\360\237\247\222\n|
>>>       >> > \360\237\247\222\360\237\217\273\n|
>> \360\237\247\222\360\237\217\274\n|
>>>       >> > \360\237\247\222\360\237\217\275\n|
>> \360\237\247\222\360\237\217\276\n|
>>>       >> > \360\237\247\222\360\237\217\277\n"
>>>       >> > Warning message:
>>>       >> > In normalizePath(path.expand(path), winslash, mustWork) :
>> path[1]="?
>>>       >> > | ??
>>>       >> > | ??
>>>       >> > | ??
>>>       >> > | ??
>>>       >> > | ??
>>>       >> > ": The filename, directory name, or volume label syntax is
>> incorrect
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Wed Apr 28 19:23:46 2021
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Wed, 28 Apr 2021 22:53:46 +0530
Subject: [Rd] reshape documentation
In-Reply-To: <1618666651669.16890@ap-hm.fr>
References: <1618666651669.16890@ap-hm.fr>
Message-ID: <CADfFDC71yqMRUNH87Uz3XjQ1N5GbZr5dPScLP701dEYjvygXsA@mail.gmail.com>

On Sat, Apr 17, 2021 at 7:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>
> Dear Deepayan,
>
> I do not have further suggestions, but I just wanted to thank you for taking the time to
> improve the documentation so much! (and for adding support for specifying "varying" as
> a vector)
>
> Both "Typical usage" and the details are useful additions. Adding a vignette also seems
> an excellent idea.

Thanks for checking. I have also finally added a vignette, do let me
know if you see anything that can be improved.

Best,
-Deepayan

>
> These changes will probably helps numerous users.
>
> Best,
>
> Thomas
>
>
>
>
> On Wed, Mar 17, 2021 at 7:55 PM Michael Dewey <lists using dewey.myzen.co.uk> wrote:
> >
> > Comments in line
> >
> > On 13/03/2021 09:50, SOEIRO Thomas wrote:
> > > Dear list,
> > >
> > > I have some questions/suggestions about reshape.
> > >
> > > 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> > > - Do you agree with this?
> > > - Would you consider a proposal to modify the documentation?
> > > - If yes, what approach do you suggest? e.g. split in two pages?
> >
> > The current documentation is much clearer than it was when I first
> > started using R but we should always strive for more.
> >
> > I would suggest leaving the documentation in one place but it might be
> > helpful to add which direction is relevant for each parameter by placing
> > (to wide) or (to long) as appropriate. I think having completely
> > separate lists is not needed
>
> I have just checked in some updates to the documentation (in R-devel)
> which hopefully makes usage clearer. Any further suggestions are
> welcome. We are planning to add a short vignette as well, hopefully in
> time for R 4.1.0.
>
> > > 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> > > - Is this worth documenting?
> > > - Is the construct list(c()) really needed?
> >
> > Yes, because you may have more than one set of variables which need to
> > correspond to a single variable in long format. So in your example if
> > you also had 11 variables for the temperature as well as the
> > concentration each would need specifying as a separate vector in the list.
>
> That's a valid point, but on the other hand, direction="long" already
> supports specifying 'varying' as a vector, and it does simplify the
> single variable case. So we decided to be consistent and allow it for
> direction="wide" too, hopefully with loud enough warnings in the
> documentation about using the feature carelessly.
>
> Best,
> -Deepayan
>
> > Michael
> >
> > >
> > > reshape(Indometh,
> > >          v.names = "conc",
> > >          idvar = "Subject",
> > >          timevar = "time",
> > >          direction = "wide",
> > >          varying = list(c("conc_0.25hr",
> > >                           "conc_0.5hr",
> > >                           "conc.0.75hr",
> > >                           "conc_1hr",
> > >                           "conc_1.25hr",
> > >                           "conc_2hr",
> > >                           "conc_3hr",
> > >                           "conc_4hr",
> > >                           "conc_5hr",
> > >                           "conc_6hr",
> > >                           "conc_8hr")))
> > >
> > > Thanks,
> > >
> > > Thomas
> > > ______________________________________________
> > > R-devel using r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > --
> > Michael
> > http://www.dewey.myzen.co.uk/home.html
> >
> > ______________________________________________
> > R-devel using r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From @nto|ne@|@br| @end|ng |rom gm@||@com  Wed Apr 28 22:45:00 2021
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Wed, 28 Apr 2021 22:45:00 +0200
Subject: [Rd] as.list fails on functions with S3 classes
Message-ID: <CAEKh8ugH3v0f1jgtXfV02DWtDsw7u6T+4EQ3R2jNDzqYqACgKw@mail.gmail.com>

Dear R devel,

as.list() can be used on functions, but not if they have a S3 class that
doesn't include "function".

See below :

```r
add1 <- function(x) x+1

as.list(add1)
#> $x
#>
#>
#> [[2]]
#> x + 1

class(add1) <- c("function", "foo")

as.list(add1)
#> $x
#>
#>
#> [[2]]
#> x + 1

class(add1) <- "foo"

as.list(add1)
#> Error in as.vector(x, "list"): cannot coerce type 'closure' to vector of
type 'list'

as.list.function(add1)
#> $x
#>
#>
#> [[2]]
#> x + 1
```

In failing case the argument is dispatched to as.list.default instead of
as.list.function.

(1) Shouldn't it be dispatched to as.list.function ?

(2) Shouldn't all generics when applied on an object of type closure fall
back to the `fun.function` method  before falling back to the `fun.default`
method ?

Best regards,

Antoine

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Wed Apr 28 23:15:50 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 28 Apr 2021 14:15:50 -0700
Subject: [Rd] as.list fails on functions with S3 classes
In-Reply-To: <CAEKh8ugH3v0f1jgtXfV02DWtDsw7u6T+4EQ3R2jNDzqYqACgKw@mail.gmail.com>
References: <CAEKh8ugH3v0f1jgtXfV02DWtDsw7u6T+4EQ3R2jNDzqYqACgKw@mail.gmail.com>
Message-ID: <CAD4oTHFAuPxCG2+r6e7h0eQtFVFP2gDp4Qu2AO4dDVOCWeTDEQ@mail.gmail.com>

Hi Antoine,

I would say this is the correct behavior. S3 dispatch is solely (so far as
I know?) concerned with the "actual classes" on the object. This is because
S3 classes act as labels that inform dispatch what, and in what order,
methods should be applied. You took the function class (ie label) off of
your object, which means that in the S3 sense, that object is no longer a
function and dispatching to function methods for it would be incorrect.
This is independent of whether the object is still callable "as a function".

The analogous case for non-closures to what you are describing would be for
S3 to check mode(x) after striking out with class(x) to find relevant
methods. I don't think that would be appropriate.

Also, as an aside, if you want your class to override methods that exist
for function you would want to set the class to c("foo", "function"), not
c("function", "foo"), as you had it in your example.

Best,
~G



On Wed, Apr 28, 2021 at 1:45 PM Antoine Fabri <antoine.fabri at gmail.com>
wrote:

> Dear R devel,
>
> as.list() can be used on functions, but not if they have a S3 class that
> doesn't include "function".
>
> See below :
>
> ```r
> add1 <- function(x) x+1
>
> as.list(add1)
> #> $x
> #>
> #>
> #> [[2]]
> #> x + 1
>
> class(add1) <- c("function", "foo")
>
> as.list(add1)
> #> $x
> #>
> #>
> #> [[2]]
> #> x + 1
>
> class(add1) <- "foo"
>
> as.list(add1)
> #> Error in as.vector(x, "list"): cannot coerce type 'closure' to vector of
> type 'list'
>
> as.list.function(add1)
> #> $x
> #>
> #>
> #> [[2]]
> #> x + 1
> ```
>
> In failing case the argument is dispatched to as.list.default instead of
> as.list.function.
>
> (1) Shouldn't it be dispatched to as.list.function ?
>
> (2) Shouldn't all generics when applied on an object of type closure fall
> back to the `fun.function` method  before falling back to the `fun.default`
> method ?
>
> Best regards,
>
> Antoine
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Apr 29 03:04:01 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 29 Apr 2021 01:04:01 +0000 (UTC)
Subject: [Rd] as.list fails on functions with S3 classes
In-Reply-To: <CAD4oTHFAuPxCG2+r6e7h0eQtFVFP2gDp4Qu2AO4dDVOCWeTDEQ@mail.gmail.com>
References: <CAEKh8ugH3v0f1jgtXfV02DWtDsw7u6T+4EQ3R2jNDzqYqACgKw@mail.gmail.com>
 <CAD4oTHFAuPxCG2+r6e7h0eQtFVFP2gDp4Qu2AO4dDVOCWeTDEQ@mail.gmail.com>
Message-ID: <1031253359.2135595.1619658241818@mail.yahoo.com>


> On Wednesday, April 28, 2021, 5:16:20 PM EDT, Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Hi Antoine,
>
> I would say this is the correct behavior. S3 dispatch is solely (so far as
> I know?) concerned with the "actual classes" on the object. This is because
> S3 classes act as labels that inform dispatch what, and in what order,
> methods should be applied. You took the function class (ie label) off of
> your object, which means that in the S3 sense, that object is no longer a
> function and dispatching to function methods for it would be incorrect.
> This is independent of whether the object is still callable "as a function".
>
> The analogous case for non-closures to what you are describing would be for
> S3 to check mode(x) after striking out with class(x) to find relevant
> methods. I don't think that would be appropriate.

I would think of the general case to be to check `class(unclass(x))` on
strike-out.? This would then include things such as "matrix", etc.
Dispatching on the implicit class as fallback seems like a natural thing
to do in a language that dispatches on implicit class when there is none.
After all, once you've struck out of your explicit classes, you have
none left!

This does happen naturally in some places (e.g. interacting with a
data.frame as a list), and is quite delightful (usually).? I won't get
into an argument of what the documentation states or whether any changes
should be made, but to me that dispatch doesn't end with the implicit
class seems feels like a logical wrinkle.? Yes, I can twist my brain to
see how it can be made to make sense, but I don't like it.

A fun past conversation on this very topic:

https://stat.ethz.ch/pipermail/r-devel/2019-March/077457.html

Best,

B.

> Also, as an aside, if you want your class to override methods that exist
> for function you would want to set the class to c("foo", "function"), not
> c("function", "foo"), as you had it in your example.
>
> Best,
> ~G
>
> On Wed, Apr 28, 2021 at 1:45 PM Antoine Fabri <antoine.fabri at gmail.com>
> wrote:
>
>> Dear R devel,
>>
>> as.list() can be used on functions, but not if they have a S3 class that
>> doesn't include "function".
>>
>> See below :
>>
>> ```r
>> add1 <- function(x) x+1
>>
>> as.list(add1)
>> #> $x
>> #>
>> #>
>> #> [[2]]
>> #> x + 1
>>
>> class(add1) <- c("function", "foo")
>>
>> as.list(add1)
>> #> $x
>> #>
>> #>
>> #> [[2]]
>> #> x + 1
>>
>> class(add1) <- "foo"
>>
>> as.list(add1)
>> #> Error in as.vector(x, "list"): cannot coerce type 'closure' to vector of
>> type 'list'
>>
>> as.list.function(add1)
>> #> $x
>> #>
>> #>
>> #> [[2]]
>> #> x + 1
>> ```
>>
>> In failing case the argument is dispatched to as.list.default instead of
>> as.list.function.
>>
>> (1) Shouldn't it be dispatched to as.list.function ?
>>
>> (2) Shouldn't all generics when applied on an object of type closure fall
>> back to the `fun.function` method? before falling back to the `fun.default`
>> method ?
>>
>> Best regards,
>>
>> Antoine


From g@bembecker @end|ng |rom gm@||@com  Thu Apr 29 04:39:11 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 28 Apr 2021 19:39:11 -0700
Subject: [Rd] as.list fails on functions with S3 classes
In-Reply-To: <1031253359.2135595.1619658241818@mail.yahoo.com>
References: <CAEKh8ugH3v0f1jgtXfV02DWtDsw7u6T+4EQ3R2jNDzqYqACgKw@mail.gmail.com>
 <CAD4oTHFAuPxCG2+r6e7h0eQtFVFP2gDp4Qu2AO4dDVOCWeTDEQ@mail.gmail.com>
 <1031253359.2135595.1619658241818@mail.yahoo.com>
Message-ID: <CAD4oTHH8_6aiCgpSTz3h-y8Fn3mQg_Nf18q8tc+5ATeLMadYTg@mail.gmail.com>

On Wed, Apr 28, 2021 at 6:04 PM brodie gaslam <brodie.gaslam at yahoo.com>
wrote:

>
> > On Wednesday, April 28, 2021, 5:16:20 PM EDT, Gabriel Becker <
> gabembecker at gmail.com> wrote:
> >
>
> > The analogous case for non-closures to what you are describing would be
> for
> > S3 to check mode(x) after striking out with class(x) to find relevant
> > methods. I don't think that would be appropriate.
>
> I would think of the general case to be to check `class(unclass(x))` on
> strike-out.


To me the general case is writing a robust default method that covers
whatever would be class(unclass(x)) would be. When you give an object a new
S3 class, you have the option of extending (c("newclass", "oldclass")) and
"not extending" (just "newclass"), and it certainly doesn't seem to me that
these two should behave the same. Perhaps others disagree.


>   This would then include things such as "matrix", etc.
> Dispatching on the implicit class as fallback seems like a natural thing
> to do in a language that dispatches on implicit class when there is none.
> After all, once you've struck out of your explicit classes, you have
> none left!
>
> This does happen naturally in some places (e.g. interacting with a

data.frame as a list), and is quite delightful (usually).


So I don't know of any places that this happens *in the S3 dispatch sense*.
There are certainly places where the default  method supports lists, and if
data.frame doesn't have a method so it hits the default method, which
handles lists. Am I missing somewhere where the dispatch gives a data.frame
to a list method (in S3 space)?


> I won't get
> into an argument of what the documentation states or whether any changes
> should be made, but to me that dispatch doesn't end with the implicit
> class seems feels like a logical wrinkle.  Yes, I can twist my brain to
> see how it can be made to make sense, but I don't like it.
>

I suppose it depends on how you view S3 dispatch. To me, view it purely as
labeling. S3 dispatch has literally nothing to do with the content of the
object. What you're describing would make that not the case. (Or if I'm
wrong about what is happening, then I'm incorrect about that too).

Best,
~G


>
> A fun past conversation on this very topic:
>
> https://stat.ethz.ch/pipermail/r-devel/2019-March/077457.html
>
> Best,
>
> B.
>
> > Also, as an aside, if you want your class to override methods that exist
> > for function you would want to set the class to c("foo", "function"), not
> > c("function", "foo"), as you had it in your example.
> >
> > Best,
> > ~G
> >
> > On Wed, Apr 28, 2021 at 1:45 PM Antoine Fabri <antoine.fabri at gmail.com>
> > wrote:
> >
> >> Dear R devel,
> >>
> >> as.list() can be used on functions, but not if they have a S3 class that
> >> doesn't include "function".
> >>
> >> See below :
> >>
> >> ```r
> >> add1 <- function(x) x+1
> >>
> >> as.list(add1)
> >> #> $x
> >> #>
> >> #>
> >> #> [[2]]
> >> #> x + 1
> >>
> >> class(add1) <- c("function", "foo")
> >>
> >> as.list(add1)
> >> #> $x
> >> #>
> >> #>
> >> #> [[2]]
> >> #> x + 1
> >>
> >> class(add1) <- "foo"
> >>
> >> as.list(add1)
> >> #> Error in as.vector(x, "list"): cannot coerce type 'closure' to
> vector of
> >> type 'list'
> >>
> >> as.list.function(add1)
> >> #> $x
> >> #>
> >> #>
> >> #> [[2]]
> >> #> x + 1
> >> ```
> >>
> >> In failing case the argument is dispatched to as.list.default instead of
> >> as.list.function.
> >>
> >> (1) Shouldn't it be dispatched to as.list.function ?
> >>
> >> (2) Shouldn't all generics when applied on an object of type closure
> fall
> >> back to the `fun.function` method  before falling back to the
> `fun.default`
> >> method ?
> >>
> >> Best regards,
> >>
> >> Antoine
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Apr 29 09:09:49 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 29 Apr 2021 09:09:49 +0200
Subject: [Rd] as.list fails on functions with S3 classes
In-Reply-To: <1031253359.2135595.1619658241818@mail.yahoo.com>
References: <CAEKh8ugH3v0f1jgtXfV02DWtDsw7u6T+4EQ3R2jNDzqYqACgKw@mail.gmail.com>
 <CAD4oTHFAuPxCG2+r6e7h0eQtFVFP2gDp4Qu2AO4dDVOCWeTDEQ@mail.gmail.com>
 <1031253359.2135595.1619658241818@mail.yahoo.com>
Message-ID: <24714.23485.923991.370031@stat.math.ethz.ch>

>>>>> brodie gaslam via R-devel 
>>>>>     on Thu, 29 Apr 2021 01:04:01 +0000 (UTC) writes:

    >> On Wednesday, April 28, 2021, 5:16:20 PM EDT, Gabriel Becker <gabembecker at gmail.com> wrote:
    >> 
    >> Hi Antoine,
    >> 
    >> I would say this is the correct behavior. S3 dispatch is solely (so far as
    >> I know?) concerned with the "actual classes" on the object. This is because
    >> S3 classes act as labels that inform dispatch what, and in what order,
    >> methods should be applied. You took the function class (ie label) off of
    >> your object, which means that in the S3 sense, that object is no longer a
    >> function and dispatching to function methods for it would be incorrect.
    >> This is independent of whether the object is still callable "as a function".
    >> 
    >> The analogous case for non-closures to what you are describing would be for
    >> S3 to check mode(x) after striking out with class(x) to find relevant
    >> methods. I don't think that would be appropriate.

    > I would think of the general case to be to check `class(unclass(x))` on
    > strike-out.? This would then include things such as "matrix", etc.
    > Dispatching on the implicit class as fallback seems like a natural thing
    > to do in a language that dispatches on implicit class when there is none.
    > After all, once you've struck out of your explicit classes, you have
    > none left!

    > This does happen naturally in some places (e.g. interacting with a
    > data.frame as a list), and is quite delightful (usually).? I won't get
    > into an argument of what the documentation states or whether any changes
    > should be made, but to me that dispatch doesn't end with the implicit
    > class seems feels like a logical wrinkle.? Yes, I can twist my brain to
    > see how it can be made to make sense, but I don't like it.

    > A fun past conversation on this very topic:

    > https://stat.ethz.ch/pipermail/r-devel/2019-March/077457.html

Thank you, Gabe and Brodie.

To the OP,  Gabe's advice to *NOT* throw away an existing class
is really important,  and  good code -- several examples in base R --
would really *extend* a class in such cases, i.e.,

function(x, ...) {
     ......
     ans <- things.on(x, .....)
     class(ans) <- c("foo", class(x))   #
     ans
}

I don't have time to go in-depth here (teaching and other duties),
but  I want to point you to one important extra point,
which I think you have not been aware:

S3 dispatch *does* look at what you see from class()  *but* has
always done some extra things, notably for atomic and other
*base* objects.  There's always been a dedicated function in R's C
code to do this,  R_data_class2(),  e.g., called from  C
usemethod() called from R's UseMethod().

Since R 4.0.0,  we have provided R function .class2()   to give
the same result as the internal R_data_class2(),  and hence
show the classes (in the correct order!) which are really for S3
dispatch.

The NEWS entry for that was

      \item New function \code{.class2()} provides the full character
      vector of class names used for S3 method dispatch.


Best,
Martin


    > Best,

    > B.

    >> Also, as an aside, if you want your class to override methods that exist
    >> for function you would want to set the class to c("foo", "function"), not
    >> c("function", "foo"), as you had it in your example.
    >> 
    >> Best,
    >> ~G
    >> 
    >> On Wed, Apr 28, 2021 at 1:45 PM Antoine Fabri <antoine.fabri at gmail.com>
    >> wrote:
    >> 
    >>> Dear R devel,
    >>> 
    >>> as.list() can be used on functions, but not if they have a S3 class that
    >>> doesn't include "function".
    >>> 
    >>> See below :
    >>> 
    >>> ```r
    >>> add1 <- function(x) x+1
    >>> 
    >>> as.list(add1)
    >>> #> $x
    >>> #>
    >>> #>
    >>> #> [[2]]
    >>> #> x + 1
    >>> 
    >>> class(add1) <- c("function", "foo")
    >>> 
    >>> as.list(add1)
    >>> #> $x
    >>> #>
    >>> #>
    >>> #> [[2]]
    >>> #> x + 1
    >>> 
    >>> class(add1) <- "foo"
    >>> 
    >>> as.list(add1)
    >>> #> Error in as.vector(x, "list"): cannot coerce type 'closure' to vector of
    >>> type 'list'
    >>> 
    >>> as.list.function(add1)
    >>> #> $x
    >>> #>
    >>> #>
    >>> #> [[2]]
    >>> #> x + 1
    >>> ```
    >>> 
    >>> In failing case the argument is dispatched to as.list.default instead of
    >>> as.list.function.
    >>> 
    >>> (1) Shouldn't it be dispatched to as.list.function ?
    >>> 
    >>> (2) Shouldn't all generics when applied on an object of type closure fall
    >>> back to the `fun.function` method? before falling back to the `fun.default`
    >>> method ?
    >>> 
    >>> Best regards,
    >>> 
    >>> Antoine

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Apr 29 10:26:15 2021
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 29 Apr 2021 10:26:15 +0200
Subject: [Rd] 
 help(".libPaths"): Paragraph lacks mentioning of R_LIBS_SITE
In-Reply-To: <CAFDcVCT8Ybo5JPmhFxiHqSazXjxn2v+1g8JRex4JA+KQ9BxbXA@mail.gmail.com>
References: <CAFDcVCT8Ybo5JPmhFxiHqSazXjxn2v+1g8JRex4JA+KQ9BxbXA@mail.gmail.com>
Message-ID: <24714.28071.85337.694014@hornik.net>

>>>>> Henrik Bengtsson writes:

Thanks: Tomas and I have now improved this.

Best
-k

> In ?base::.libPaths, there's a paragraph saying:
> The library search path is initialized at startup from the environment
> variable R_LIBS (which should be a colon-separated list of directories
> at which R library trees are rooted) followed by those in environment
> variable R_LIBS_USER. Only directories which exist at the time will be
> included.

> Shouldn't R_LIBS_SITE also be mentioned in that passage?  Something like:

> ...followed by those in environment variables R_LIBS_USER and R_LIBS_SITE. ...

> /Henrik

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Thu Apr 29 14:35:20 2021
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Thu, 29 Apr 2021 14:35:20 +0200
Subject: [Rd] R does not start on Fedora 34
Message-ID: <CABtg=Kn6LoKKXSpiwhO9twM42vnP==BqxLW5fr0QeGOfo81=Pw@mail.gmail.com>

Dear all,

Fedora 34 was released two days ago, and with a fresh build of R I get

[root at 2dba8b3587c1 R-devel]# bin/R
ERROR: R_HOME ('/tmp/R-devel') not found

on it, coming from
https://github.com/wch/r-source/blob/0f0092adf14b8bd17bcce1cac0ee26b928355dab/src/scripts/R.sh.in#L263

Apparently `test -x` returns 1 for an existing 755 directory on Fedora 34:
? docker run -ti fedora:latest
[root at f944f25b16b4 /]# test -x /tmp/
[root at f944f25b16b4 /]# echo $?
1

On Fedora 33 this was different:
? docker run -ti fedora:33
[root at ea55a1b92215 /]# test -x /tmp/
[root at ea55a1b92215 /]# echo $?
0

A workaround would be to use `test -d` which still return 0 on Fedora 34.

FYI,
Gabor


From |uc@r @end|ng |rom |edor@project@org  Thu Apr 29 14:43:59 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 29 Apr 2021 14:43:59 +0200
Subject: [Rd] R does not start on Fedora 34
In-Reply-To: <CABtg=Kn6LoKKXSpiwhO9twM42vnP==BqxLW5fr0QeGOfo81=Pw@mail.gmail.com>
References: <CABtg=Kn6LoKKXSpiwhO9twM42vnP==BqxLW5fr0QeGOfo81=Pw@mail.gmail.com>
Message-ID: <CALEXWq2WfEKSF8OCoSeu-udZNxcZ-eiHBOFMFfEpvj18kms9_A@mail.gmail.com>

On Thu, 29 Apr 2021 at 14:36, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Dear all,
>
> Fedora 34 was released two days ago, and with a fresh build of R I get
>
> [root at 2dba8b3587c1 R-devel]# bin/R
> ERROR: R_HOME ('/tmp/R-devel') not found

This is known. It's a docker issue after a glibc change. See [1] and
references therein. A newer version of docker/libseccomp should work.

[1] https://stat.ethz.ch/pipermail/r-sig-fedora/2021-March/000732.html

>
> on it, coming from
> https://github.com/wch/r-source/blob/0f0092adf14b8bd17bcce1cac0ee26b928355dab/src/scripts/R.sh.in#L263
>
> Apparently `test -x` returns 1 for an existing 755 directory on Fedora 34:
> ? docker run -ti fedora:latest
> [root at f944f25b16b4 /]# test -x /tmp/
> [root at f944f25b16b4 /]# echo $?
> 1
>
> On Fedora 33 this was different:
> ? docker run -ti fedora:33
> [root at ea55a1b92215 /]# test -x /tmp/
> [root at ea55a1b92215 /]# echo $?
> 0
>
> A workaround would be to use `test -d` which still return 0 on Fedora 34.
>
> FYI,
> Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From bbo|ker @end|ng |rom gm@||@com  Thu Apr 29 15:58:22 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 29 Apr 2021 09:58:22 -0400
Subject: [Rd] R compilation on old(ish) CentOS
Message-ID: <1ae5a21f-a74e-b532-1359-a55856d4f365@gmail.com>

   I probably don't want to go down this rabbit hole very far, but if 
anyone has any *quick* ideas ...

   Attempting to build R from scratch with a fresh SVN checkout on a 
somewhat out-of-date CentOS system (for which I don't have root access, 
although I can bug people if I care enough).

   ../r-devel/configure; make

ends with

gcc -std=gnu99 -I../../../r-devel/trunk/src/extra  -I. 
-I../../src/include -I../../../r-devel/trunk/src/include 
-I/usr/local/include -I../../../r-devel/trunk/src/nmath -DHAVE_CONFIG_H 
  -fopenmp  -g -O2  -c ../../../r-devel/trunk/src/main/connections.c -o 
connections.o
../../../r-devel/trunk/src/main/connections.c: In function ?do_sockconn?:
../../../r-devel/trunk/src/main/connections.c:3477:5: error: too few 
arguments to function ?R_newsock?
      con = R_newsock(host, port, server, serverfd, open, timeout);
      ^
In file included from ../../../r-devel/trunk/src/main/connections.c:80:0:
../../../r-devel/trunk/src/include/Rconnections.h:83:13: note: declared here
  Rconnection R_newsock(const char *host, int port, int server, int 
serverfd, const char * const mode, int timeout, int options);
              ^
make[3]: *** [connections.o] Error 1

   Any suggestions for a quick fix/diagnosis?

   cheers
     Ben Bolker

====


$ gcc --version
gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)

$ lsb_release -a
LSB Version: 
:core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch
Distributor ID:	CentOS
Description:	CentOS Linux release 7.8.2003 (Core)
Release:	7.8.2003
Codename:	Core


From |uc@r @end|ng |rom |edor@project@org  Thu Apr 29 16:12:52 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 29 Apr 2021 16:12:52 +0200
Subject: [Rd] R compilation on old(ish) CentOS
In-Reply-To: <1ae5a21f-a74e-b532-1359-a55856d4f365@gmail.com>
References: <1ae5a21f-a74e-b532-1359-a55856d4f365@gmail.com>
Message-ID: <CALEXWq266bv26m8pz3AesXQzYb9pvQengUiaAhvc2mHO5ahCFQ@mail.gmail.com>

On Thu, 29 Apr 2021 at 15:59, Ben Bolker <bbolker at gmail.com> wrote:
>
>    I probably don't want to go down this rabbit hole very far, but if
> anyone has any *quick* ideas ...
>
>    Attempting to build R from scratch with a fresh SVN checkout on a
> somewhat out-of-date CentOS system (for which I don't have root access,
> although I can bug people if I care enough).

Could you bug them to... update CentOS? :)

[snip]

> $ gcc --version
> gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)

Ouch. You definitely need to install and activate an appropriate
devtoolset as follows:

$ yum install centos-release-scl
$ yum install devtoolset-8

(Bug those people to at least install that). Then, put something like
this in your .bashrc:

$ source scl_source enable devtoolset-8

And you are ready to go with a fairly decent version of gcc, i.e.:

$ gcc --version
gcc (GCC) 8.3.1 20190311 (Red Hat 8.3.1-3)

I?aki

> $ lsb_release -a
> LSB Version:
> :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch
> Distributor ID: CentOS
> Description:    CentOS Linux release 7.8.2003 (Core)
> Release:        7.8.2003
> Codename:       Core
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
I?aki ?car


From pd@|gd @end|ng |rom gm@||@com  Thu Apr 29 16:19:22 2021
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Thu, 29 Apr 2021 16:19:22 +0200
Subject: [Rd] R compilation on old(ish) CentOS
In-Reply-To: <1ae5a21f-a74e-b532-1359-a55856d4f365@gmail.com>
References: <1ae5a21f-a74e-b532-1359-a55856d4f365@gmail.com>
Message-ID: <1E8063DB-0F65-49CF-8D63-C6786D9BB880@gmail.com>

You may want to check out your checkout....

I see:

Peter-Dalgaards-iMac:R pd$ grep newsock src/main/connections.c 
    con = R_newsock(host, port, server, serverfd, open, timeout, options);

but your file seems to have lost the ", options" bit somehow. Also, mine is line 3488, not 3477.

Maybe you have an old file getting in the way?

- Peter

> On 29 Apr 2021, at 15:58 , Ben Bolker <bbolker at gmail.com> wrote:
> 
>  I probably don't want to go down this rabbit hole very far, but if anyone has any *quick* ideas ...
> 
>  Attempting to build R from scratch with a fresh SVN checkout on a somewhat out-of-date CentOS system (for which I don't have root access, although I can bug people if I care enough).
> 
>  ../r-devel/configure; make
> 
> ends with
> 
> gcc -std=gnu99 -I../../../r-devel/trunk/src/extra  -I. -I../../src/include -I../../../r-devel/trunk/src/include -I/usr/local/include -I../../../r-devel/trunk/src/nmath -DHAVE_CONFIG_H  -fopenmp  -g -O2  -c ../../../r-devel/trunk/src/main/connections.c -o connections.o
> ../../../r-devel/trunk/src/main/connections.c: In function ?do_sockconn?:
> ../../../r-devel/trunk/src/main/connections.c:3477:5: error: too few arguments to function ?R_newsock?
>     con = R_newsock(host, port, server, serverfd, open, timeout);
>     ^
> In file included from ../../../r-devel/trunk/src/main/connections.c:80:0:
> ../../../r-devel/trunk/src/include/Rconnections.h:83:13: note: declared here
> Rconnection R_newsock(const char *host, int port, int server, int serverfd, const char * const mode, int timeout, int options);
>             ^
> make[3]: *** [connections.o] Error 1
> 
>  Any suggestions for a quick fix/diagnosis?
> 
>  cheers
>    Ben Bolker
> 
> ====
> 
> 
> $ gcc --version
> gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
> 
> $ lsb_release -a
> LSB Version: :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch
> Distributor ID:	CentOS
> Description:	CentOS Linux release 7.8.2003 (Core)
> Release:	7.8.2003
> Codename:	Core
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jke@ne @end|ng |rom gm@||@com  Thu Apr 29 23:37:23 2021
From: jke@ne @end|ng |rom gm@||@com (Jonathan Keane)
Date: Thu, 29 Apr 2021 16:37:23 -0500
Subject: [Rd] Difference in NA behavior in R-devel running under valgrind
Message-ID: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>

Hello,

I'm debugging some valgrind issues, and noticed some odd behavior with
NA an R-devel under valgrind.

Using Winston Chang's r-debug image (and some of this reproductions form [1]):

r-devel (2021-04-27 r80232) without Valgrind returns NA:
# RD --quiet -e "sum(c(1, NA))"
> sum(c(1, NA))
[1] NA


r-devel with `-d valgrind` returns NaN:
# RD -d valgrind --quiet -e "sum(c(1, NA))"
==8901== Memcheck, a memory error detector
==8901== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8901== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==8901== Command: /usr/local/RD/lib/R/bin/exec/R --quiet -e sum(c(1,~+~NA))
==8901==
> sum(c(1, NA))
[1] NaN


And finally release R (with valgrind) returns NA just like r-devel
while not under Valgrind:
# R -d valgrind --quiet -e "sum(c(1, NA))"
==8983== Memcheck, a memory error detector
==8983== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8983== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==8983== Command: /usr/lib/R/bin/exec/R --quiet -e sum(c(1,~+~NA))
==8983==
> sum(c(1, NA))
[1] NA

Thanks

[1] - https://github.com/wch/r-debug/issues/18

-Jon


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Fri Apr 30 00:26:46 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 29 Apr 2021 22:26:46 +0000 (UTC)
Subject: [Rd] 
 Difference in NA behavior in R-devel running under valgrind
In-Reply-To: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
References: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
Message-ID: <2030979261.2760057.1619735206189@mail.yahoo.com>

NA propagation is complicated.? I don't know whether what
you observe could be explained by the difference between
a valgrind instrumented vs. not version of R (I gather the
release version you used is not instrumented / possibly
compiled differently too from the github issue?).

Hopefully someone more knowledgeable would chime in, but
I did want to share Tomas's post that touches on the
complexity of NA_real_ propagation:

https://developer.r-project.org/Blog/public/2020/11/02/will-r-work-on-apple-silicon/#nanan-payload-propagation

Best,

B.






On Thursday, April 29, 2021, 6:04:38 PM EDT, Jonathan Keane <jkeane at gmail.com> wrote: 





Hello,

I'm debugging some valgrind issues, and noticed some odd behavior with
NA an R-devel under valgrind.

Using Winston Chang's r-debug image (and some of this reproductions form [1]):

r-devel (2021-04-27 r80232) without Valgrind returns NA:
# RD --quiet -e "sum(c(1, NA))"
> sum(c(1, NA))
[1] NA


r-devel with `-d valgrind` returns NaN:
# RD -d valgrind --quiet -e "sum(c(1, NA))"
==8901== Memcheck, a memory error detector
==8901== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8901== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==8901== Command: /usr/local/RD/lib/R/bin/exec/R --quiet -e sum(c(1,~+~NA))
==8901==
> sum(c(1, NA))
[1] NaN


And finally release R (with valgrind) returns NA just like r-devel
while not under Valgrind:
# R -d valgrind --quiet -e "sum(c(1, NA))"
==8983== Memcheck, a memory error detector
==8983== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8983== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==8983== Command: /usr/lib/R/bin/exec/R --quiet -e sum(c(1,~+~NA))
==8983==
> sum(c(1, NA))
[1] NA

Thanks

[1] - https://github.com/wch/r-debug/issues/18

-Jon

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From w|n@tonch@ng1 @end|ng |rom gm@||@com  Fri Apr 30 00:35:04 2021
From: w|n@tonch@ng1 @end|ng |rom gm@||@com (Winston Chang)
Date: Thu, 29 Apr 2021 17:35:04 -0500
Subject: [Rd] 
 Difference in NA behavior in R-devel running under valgrind
In-Reply-To: <2030979261.2760057.1619735206189@mail.yahoo.com>
References: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
 <2030979261.2760057.1619735206189@mail.yahoo.com>
Message-ID: <CAFOpNVF89Ks_hsAZT3GZ7Y6iYzqFO027_TNsHkiA0pj0L9dZOA@mail.gmail.com>

Just to be clear, the RD binary that Jon used was NOT compiled with
Valgrind level 2 instrumentation. In his example, however, he did run it
with valgrind, as in:
# RD -d valgrind --quiet -e "sum(c(1, NA))"
...
> sum(c(1, NA))
[1] NaN

`RD` in that Docker image is a standard build of R-devel. The Docker image
does include a build of R-devel with valgrind level 2 instrumentation,
called `RDvalgrind`. It exhibits the same NaN behavior when run with `-d
valgrind`, but when run without `-d valgrind` it returns NA.

# RDvalgrind -d valgrind --quiet -e "sum(c(1, NA))"
> sum(c(1, NA))
[1] NaN

# RDvalgrind --quiet -e "sum(c(1, NA))"
> sum(c(1, NA))
[1] NA

In short `RDvalgrind` behaves the same as `RD`. However, adding `-d
valgrind` to either one causes it to return NaN.

-Winston


On Thu, Apr 29, 2021 at 5:27 PM brodie gaslam via R-devel <
r-devel at r-project.org> wrote:

> NA propagation is complicated.  I don't know whether what
> you observe could be explained by the difference between
> a valgrind instrumented vs. not version of R (I gather the
> release version you used is not instrumented / possibly
> compiled differently too from the github issue?).
>
> Hopefully someone more knowledgeable would chime in, but
> I did want to share Tomas's post that touches on the
> complexity of NA_real_ propagation:
>
>
> https://developer.r-project.org/Blog/public/2020/11/02/will-r-work-on-apple-silicon/#nanan-payload-propagation
>
> Best,
>
> B.
>
>
>
>
>
>
> On Thursday, April 29, 2021, 6:04:38 PM EDT, Jonathan Keane <
> jkeane at gmail.com> wrote:
>
>
>
>
>
> Hello,
>
> I'm debugging some valgrind issues, and noticed some odd behavior with
> NA an R-devel under valgrind.
>
> Using Winston Chang's r-debug image (and some of this reproductions form
> [1]):
>
> r-devel (2021-04-27 r80232) without Valgrind returns NA:
> # RD --quiet -e "sum(c(1, NA))"
> > sum(c(1, NA))
> [1] NA
>
>
> r-devel with `-d valgrind` returns NaN:
> # RD -d valgrind --quiet -e "sum(c(1, NA))"
> ==8901== Memcheck, a memory error detector
> ==8901== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
> ==8901== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
> ==8901== Command: /usr/local/RD/lib/R/bin/exec/R --quiet -e sum(c(1,~+~NA))
> ==8901==
> > sum(c(1, NA))
> [1] NaN
>
>
> And finally release R (with valgrind) returns NA just like r-devel
> while not under Valgrind:
> # R -d valgrind --quiet -e "sum(c(1, NA))"
> ==8983== Memcheck, a memory error detector
> ==8983== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
> ==8983== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
> ==8983== Command: /usr/lib/R/bin/exec/R --quiet -e sum(c(1,~+~NA))
> ==8983==
> > sum(c(1, NA))
> [1] NA
>
> Thanks
>
> [1] - https://github.com/wch/r-debug/issues/18
>
> -Jon
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Fri Apr 30 02:39:53 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Fri, 30 Apr 2021 00:39:53 +0000 (UTC)
Subject: [Rd] 
 Difference in NA behavior in R-devel running under valgrind
In-Reply-To: <CAFOpNVF89Ks_hsAZT3GZ7Y6iYzqFO027_TNsHkiA0pj0L9dZOA@mail.gmail.com>
References: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
 <2030979261.2760057.1619735206189@mail.yahoo.com>
 <CAFOpNVF89Ks_hsAZT3GZ7Y6iYzqFO027_TNsHkiA0pj0L9dZOA@mail.gmail.com>
Message-ID: <2012328772.2559847.1619743193083@mail.yahoo.com>

 > On Thursday, April 29, 2021, 6:35:16 PM EDT, Winston Chang <winstonchang1 at gmail.com> wrote:
> Just to be clear, the RD binary that Jon used was NOT compiled with
> Valgrind level 2 instrumentation. In his example, however, he did run it
> with valgrind, as in:
>
> # RD -d valgrind --quiet -e "sum(c(1, NA))"
> ...
> > sum(c(1, NA))
> [1] NaN
>
> `RD` in that Docker image is a standard build of R-devel. The Docker
> image does include a build of R-devel with valgrind level 2
> instrumentation, called `RDvalgrind`. It exhibits the same NaN behavior
> when run with `-d valgrind`, but when run without `-d valgrind` it
> returns NA.
>
> # RDvalgrind -d valgrind --quiet -e "sum(c(1, NA))"
> > sum(c(1, NA))
> [1] NaN
>
> # RDvalgrind --quiet -e "sum(c(1, NA))"
> > sum(c(1, NA))
> [1] NA
>
> In short `RDvalgrind` behaves the same as `RD`. However, adding `-d
> valgrind` to either one causes it to return NaN.
>
> -Winston

Thanks for the clarification.

Using the same revision in the e-mail I get the reported issue under -O0,
but not under -O2.? It looks like r-debug builds with -O0, and presumably
the release debian version is -O2 which is usually the default?? I'm
certainly no expert in this area but it seems like it could be an
optimization level rather than a release vs devel issue?

This is what I see:

gcc version 10.1.0 (Ubuntu 10.1.0-2ubuntu1~18.04)

??? CC="gcc-10"
??? CFLAGS="-g -O0 -Wall -pedantic -Wextra -std=gnu99"

??? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla --quiet -e "sum(c(1,NA))"
??? ==9020== Memcheck, a memory error detector
??? ==9020== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
??? ==9020== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
??? ==9020== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e sum(c(1,NA))
??? ==9020==
??? > sum(c(1,NA))
??? [1] NaN

And then:

??? CC="gcc-10"
??? CFLAGS="-g -O2 -Wall -pedantic -Wextra -std=gnu99"

??? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla --quiet -e "sum(c(1,NA))"
??? ==32751== Memcheck, a memory error detector
??? ==32751== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
??? ==32751== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
??? ==32751== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e sum(c(1,NA))
??? ==32751==
??? > sum(c(1,NA))
??? [1] NA

Sadly I did not think to run the -O0 version without valgrind.

Best,

B.


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Fri Apr 30 02:42:51 2021
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Fri, 30 Apr 2021 00:42:51 +0000 (UTC)
Subject: [Rd] 
 Difference in NA behavior in R-devel running under valgrind
In-Reply-To: <2012328772.2559847.1619743193083@mail.yahoo.com>
References: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
 <2030979261.2760057.1619735206189@mail.yahoo.com>
 <CAFOpNVF89Ks_hsAZT3GZ7Y6iYzqFO027_TNsHkiA0pj0L9dZOA@mail.gmail.com>
 <2012328772.2559847.1619743193083@mail.yahoo.com>
Message-ID: <793944578.2810197.1619743371118@mail.yahoo.com>

Forgot to mention, my builds were not instrumented for valgrind, and also:

vagrant at vagrant:/vagrant/trunk$ ./bin/R --version
R Under development (unstable) (2021-04-27 r80232) -- "Unsuffered Consequences"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


 On Thursday, April 29, 2021, 8:40:21 PM EDT, brodie gaslam via R-devel <r-devel at r-project.org> wrote: 


> On Thursday, April 29, 2021, 6:35:16 PM EDT, Winston Chang <winstonchang1 at gmail.com> wrote:
> Just to be clear, the RD binary that Jon used was NOT compiled with
> Valgrind level 2 instrumentation. In his example, however, he did run it
> with valgrind, as in:
>
> # RD -d valgrind --quiet -e "sum(c(1, NA))"
> ...
> > sum(c(1, NA))
> [1] NaN
>
> `RD` in that Docker image is a standard build of R-devel. The Docker
> image does include a build of R-devel with valgrind level 2
> instrumentation, called `RDvalgrind`. It exhibits the same NaN behavior
> when run with `-d valgrind`, but when run without `-d valgrind` it
> returns NA.
>
> # RDvalgrind -d valgrind --quiet -e "sum(c(1, NA))"
> > sum(c(1, NA))
> [1] NaN
>
> # RDvalgrind --quiet -e "sum(c(1, NA))"
> > sum(c(1, NA))
> [1] NA
>
> In short `RDvalgrind` behaves the same as `RD`. However, adding `-d
> valgrind` to either one causes it to return NaN.
>
> -Winston

Thanks for the clarification.

Using the same revision in the e-mail I get the reported issue under -O0,
but not under -O2.? It looks like r-debug builds with -O0, and presumably
the release debian version is -O2 which is usually the default?? I'm
certainly no expert in this area but it seems like it could be an
optimization level rather than a release vs devel issue?

This is what I see:

gcc version 10.1.0 (Ubuntu 10.1.0-2ubuntu1~18.04)

??? CC="gcc-10"
??? CFLAGS="-g -O0 -Wall -pedantic -Wextra -std=gnu99"

??? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla --quiet -e "sum(c(1,NA))"
??? ==9020== Memcheck, a memory error detector
??? ==9020== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
??? ==9020== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
??? ==9020== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e sum(c(1,NA))
??? ==9020==
??? > sum(c(1,NA))
??? [1] NaN

And then:

??? CC="gcc-10"
??? CFLAGS="-g -O2 -Wall -pedantic -Wextra -std=gnu99"

??? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla --quiet -e "sum(c(1,NA))"
??? ==32751== Memcheck, a memory error detector
??? ==32751== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
??? ==32751== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
??? ==32751== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e sum(c(1,NA))
??? ==32751==
??? > sum(c(1,NA))
??? [1] NA

Sadly I did not think to run the -O0 version without valgrind.


Best,

B.

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Apr 30 10:02:45 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 30 Apr 2021 10:02:45 +0200
Subject: [Rd] 
 Difference in NA behavior in R-devel running under valgrind
In-Reply-To: <793944578.2810197.1619743371118@mail.yahoo.com>
References: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
 <2030979261.2760057.1619735206189@mail.yahoo.com>
 <CAFOpNVF89Ks_hsAZT3GZ7Y6iYzqFO027_TNsHkiA0pj0L9dZOA@mail.gmail.com>
 <2012328772.2559847.1619743193083@mail.yahoo.com>
 <793944578.2810197.1619743371118@mail.yahoo.com>
Message-ID: <90cfe07c-dfee-4d6f-bf95-d430ce1e2b98@gmail.com>

I can reproduce on my system, running an unoptimized R build (-O0) in 
valgrind produces NaN (valgrind 3.15.0, gcc 9.3.0 - Ubuntu 20.04/x86_64) 
for the example, but without valgrind it produces NA.

Valgrind modifies the binary code before running it and this is probably 
what is causing the different NaN payload propagation in this case. This 
is not great, it seems to be yet another way how the NA/NaN distinction 
may become unreliable.

Tomas

On 4/30/21 2:42 AM, brodie gaslam via R-devel wrote:
> Forgot to mention, my builds were not instrumented for valgrind, and also:
>
> vagrant at vagrant:/vagrant/trunk$ ./bin/R --version
> R Under development (unstable) (2021-04-27 r80232) -- "Unsuffered Consequences"
> Copyright (C) 2021 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
>
>
>   On Thursday, April 29, 2021, 8:40:21 PM EDT, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
>
>
>> On Thursday, April 29, 2021, 6:35:16 PM EDT, Winston Chang <winstonchang1 at gmail.com> wrote:
>> Just to be clear, the RD binary that Jon used was NOT compiled with
>> Valgrind level 2 instrumentation. In his example, however, he did run it
>> with valgrind, as in:
>>
>> # RD -d valgrind --quiet -e "sum(c(1, NA))"
>> ...
>>> sum(c(1, NA))
>> [1] NaN
>>
>> `RD` in that Docker image is a standard build of R-devel. The Docker
>> image does include a build of R-devel with valgrind level 2
>> instrumentation, called `RDvalgrind`. It exhibits the same NaN behavior
>> when run with `-d valgrind`, but when run without `-d valgrind` it
>> returns NA.
>>
>> # RDvalgrind -d valgrind --quiet -e "sum(c(1, NA))"
>>> sum(c(1, NA))
>> [1] NaN
>>
>> # RDvalgrind --quiet -e "sum(c(1, NA))"
>>> sum(c(1, NA))
>> [1] NA
>>
>> In short `RDvalgrind` behaves the same as `RD`. However, adding `-d
>> valgrind` to either one causes it to return NaN.
>>
>> -Winston
> Thanks for the clarification.
>
> Using the same revision in the e-mail I get the reported issue under -O0,
> but not under -O2.? It looks like r-debug builds with -O0, and presumably
> the release debian version is -O2 which is usually the default?? I'm
> certainly no expert in this area but it seems like it could be an
> optimization level rather than a release vs devel issue?
>
> This is what I see:
>
> gcc version 10.1.0 (Ubuntu 10.1.0-2ubuntu1~18.04)
>
>  ??? CC="gcc-10"
>  ??? CFLAGS="-g -O0 -Wall -pedantic -Wextra -std=gnu99"
>
>  ??? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla --quiet -e "sum(c(1,NA))"
>  ??? ==9020== Memcheck, a memory error detector
>  ??? ==9020== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
>  ??? ==9020== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
>  ??? ==9020== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e sum(c(1,NA))
>  ??? ==9020==
>  ??? > sum(c(1,NA))
>  ??? [1] NaN
>
> And then:
>
>  ??? CC="gcc-10"
>  ??? CFLAGS="-g -O2 -Wall -pedantic -Wextra -std=gnu99"
>
>  ??? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla --quiet -e "sum(c(1,NA))"
>  ??? ==32751== Memcheck, a memory error detector
>  ??? ==32751== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
>  ??? ==32751== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
>  ??? ==32751== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e sum(c(1,NA))
>  ??? ==32751==
>  ??? > sum(c(1,NA))
>  ??? [1] NA
>
> Sadly I did not think to run the -O0 version without valgrind.
>
>
> Best,
>
> B.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Apr 30 12:31:05 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 30 Apr 2021 12:31:05 +0200
Subject: [Rd] 
 Difference in NA behavior in R-devel running under valgrind
In-Reply-To: <90cfe07c-dfee-4d6f-bf95-d430ce1e2b98@gmail.com>
References: <CAE+qdJZ4uVy=-fYEGYrfc+GSW=+bgMd8GvVwtfwbX7nqnO=yBA@mail.gmail.com>
 <2030979261.2760057.1619735206189@mail.yahoo.com>
 <CAFOpNVF89Ks_hsAZT3GZ7Y6iYzqFO027_TNsHkiA0pj0L9dZOA@mail.gmail.com>
 <2012328772.2559847.1619743193083@mail.yahoo.com>
 <793944578.2810197.1619743371118@mail.yahoo.com>
 <90cfe07c-dfee-4d6f-bf95-d430ce1e2b98@gmail.com>
Message-ID: <c06f35a9-f1aa-18c6-00c5-9d727a751340@gmail.com>

I confirm it is valgrind behavior, it does not preserve the NaN payload 
when converting 80-bit and 64-bit floating point numbers on Intel (also 
it treats denormals as zero, more information is in comments in valgrind 
source, file guest_generic_x87.c).

The quick-hack patch below can be applied to preserve the payload and 
makes that example, sum(c(1, NA)), return NA on my machine.

Best
Tomas

-- orig/valgrind-3.15.0/VEX/priv/guest_generic_x87.c 2019-04-13 
12:56:21.000000000 +0200
+++ patched/valgrind-3.15.0/VEX/priv/guest_generic_x87.c 2021-04-30 
12:17:44.763195785 +0200
@@ -210,6 +210,10 @@
 ????????? f80[6] = f80[5] = f80[4] = f80[3]
 ???????????????? = f80[2] = f80[1] = f80[0] = 0xFF;
 ?????? }
+????? f80[0] = f64[0]; /* R hack: copy NaN payload */
+????? f80[1] = f64[1];
+????? f80[2] = f64[2];
+????? f80[3] = f64[3];
 ?????? return;
 ??? }

@@ -310,6 +314,11 @@
 ????????? f64[6] = 0xF7;
 ????????? f64[5] = f64[4] = f64[3] = f64[2] = f64[1] = f64[0] = 0xFF;
 ?????? }
+????? f64[0] = f80[0]; /* R hack: copy NaN payload */
+????? f64[1] = f80[1];
+????? f64[2] = f80[2];
+????? f64[3] = f80[3];
+
 ?????? return;
 ??? }

On 4/30/21 10:02 AM, Tomas Kalibera wrote:
> I can reproduce on my system, running an unoptimized R build (-O0) in 
> valgrind produces NaN (valgrind 3.15.0, gcc 9.3.0 - Ubuntu 
> 20.04/x86_64) for the example, but without valgrind it produces NA.
>
> Valgrind modifies the binary code before running it and this is 
> probably what is causing the different NaN payload propagation in this 
> case. This is not great, it seems to be yet another way how the NA/NaN 
> distinction may become unreliable.
>
> Tomas
>
> On 4/30/21 2:42 AM, brodie gaslam via R-devel wrote:
>> Forgot to mention, my builds were not instrumented for valgrind, and 
>> also:
>>
>> vagrant at vagrant:/vagrant/trunk$ ./bin/R --version
>> R Under development (unstable) (2021-04-27 r80232) -- "Unsuffered 
>> Consequences"
>> Copyright (C) 2021 The R Foundation for Statistical Computing
>> Platform: x86_64-pc-linux-gnu (64-bit)
>>
>>
>> ? On Thursday, April 29, 2021, 8:40:21 PM EDT, brodie gaslam via 
>> R-devel <r-devel at r-project.org> wrote:
>>
>>
>>> On Thursday, April 29, 2021, 6:35:16 PM EDT, Winston Chang 
>>> <winstonchang1 at gmail.com> wrote:
>>> Just to be clear, the RD binary that Jon used was NOT compiled with
>>> Valgrind level 2 instrumentation. In his example, however, he did 
>>> run it
>>> with valgrind, as in:
>>>
>>> # RD -d valgrind --quiet -e "sum(c(1, NA))"
>>> ...
>>>> sum(c(1, NA))
>>> [1] NaN
>>>
>>> `RD` in that Docker image is a standard build of R-devel. The Docker
>>> image does include a build of R-devel with valgrind level 2
>>> instrumentation, called `RDvalgrind`. It exhibits the same NaN behavior
>>> when run with `-d valgrind`, but when run without `-d valgrind` it
>>> returns NA.
>>>
>>> # RDvalgrind -d valgrind --quiet -e "sum(c(1, NA))"
>>>> sum(c(1, NA))
>>> [1] NaN
>>>
>>> # RDvalgrind --quiet -e "sum(c(1, NA))"
>>>> sum(c(1, NA))
>>> [1] NA
>>>
>>> In short `RDvalgrind` behaves the same as `RD`. However, adding `-d
>>> valgrind` to either one causes it to return NaN.
>>>
>>> -Winston
>> Thanks for the clarification.
>>
>> Using the same revision in the e-mail I get the reported issue under 
>> -O0,
>> but not under -O2.? It looks like r-debug builds with -O0, and 
>> presumably
>> the release debian version is -O2 which is usually the default? I'm
>> certainly no expert in this area but it seems like it could be an
>> optimization level rather than a release vs devel issue?
>>
>> This is what I see:
>>
>> gcc version 10.1.0 (Ubuntu 10.1.0-2ubuntu1~18.04)
>>
>> ???? CC="gcc-10"
>> ???? CFLAGS="-g -O0 -Wall -pedantic -Wextra -std=gnu99"
>>
>> ???? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla 
>> --quiet -e "sum(c(1,NA))"
>> ???? ==9020== Memcheck, a memory error detector
>> ???? ==9020== Copyright (C) 2002-2017, and GNU GPL'd, by Julian 
>> Seward et al.
>> ???? ==9020== Using Valgrind-3.13.0 and LibVEX; rerun with -h for 
>> copyright info
>> ???? ==9020== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet -e 
>> sum(c(1,NA))
>> ???? ==9020==
>> ???? > sum(c(1,NA))
>> ???? [1] NaN
>>
>> And then:
>>
>> ???? CC="gcc-10"
>> ???? CFLAGS="-g -O2 -Wall -pedantic -Wextra -std=gnu99"
>>
>> ???? vagrant at vagrant:/vagrant/trunk$ ./bin/R -d valgrind --vanilla 
>> --quiet -e "sum(c(1,NA))"
>> ???? ==32751== Memcheck, a memory error detector
>> ???? ==32751== Copyright (C) 2002-2017, and GNU GPL'd, by Julian 
>> Seward et al.
>> ???? ==32751== Using Valgrind-3.13.0 and LibVEX; rerun with -h for 
>> copyright info
>> ???? ==32751== Command: /vagrant/trunk/bin/exec/R --vanilla --quiet 
>> -e sum(c(1,NA))
>> ???? ==32751==
>> ???? > sum(c(1,NA))
>> ???? [1] NA
>>
>> Sadly I did not think to run the -O0 version without valgrind.
>>
>>
>> Best,
>>
>> B.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


