From edg@rc|@ @end|ng |rom e@t-econ@uc3m@e@  Mon Aug  3 23:11:10 2020
From: edg@rc|@ @end|ng |rom e@t-econ@uc3m@e@ (EDUARDO GARCIA PORTUGUES)
Date: Mon, 3 Aug 2020 23:11:10 +0200
Subject: [Rd] Typo in ?base::Bessel
Message-ID: <CALzd1DK04zaNAp96WA-GdRWA3tNY-K_CbsTc1J9ZFKEp1AYjSw@mail.gmail.com>

"So*c*kne, David J. (1973)." -> "Sookne, David J. (1973)."

"Sookne" is referred previously in the documentation and is the correct
surname in the publication
<https://pdfs.semanticscholar.org/9cdc/c4aa1562200e6fa50b1400909d1355c3e4f0.pdf>
and Netlib's source <https://www.netlib.org/specfun/ribesl>.

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Aug  4 12:47:01 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 4 Aug 2020 12:47:01 +0200
Subject: [Rd] Typo in ?base::Bessel
In-Reply-To: <CALzd1DK04zaNAp96WA-GdRWA3tNY-K_CbsTc1J9ZFKEp1AYjSw@mail.gmail.com>
References: <CALzd1DK04zaNAp96WA-GdRWA3tNY-K_CbsTc1J9ZFKEp1AYjSw@mail.gmail.com>
Message-ID: <24361.15525.377680.36928@hornik.net>

>>>>> EDUARDO GARCIA PORTUGUES writes:

Thanks, will fix and add a DOI ...

Best
-k

> "So*c*kne, David J. (1973)." -> "Sookne, David J. (1973)."
> "Sookne" is referred previously in the documentation and is the correct
> surname in the publication
> <https://pdfs.semanticscholar.org/9cdc/c4aa1562200e6fa50b1400909d1355c3e4f0.pdf>
> and Netlib's source <https://www.netlib.org/specfun/ribesl>.

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Aug  5 16:22:42 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 5 Aug 2020 09:22:42 -0500 (CDT)
Subject: [Rd] HELPWANTED keyword in bugs.r-project.org
Message-ID: <alpine.DEB.2.21.2008050919360.18514@luke-Latitude-7480>

Just a quick note to mention that we have added a HELPWANTED keyword
on bugs.r-project.org for tagging bugs and issues where a good
well-tested patch would be particularly appreciated.  You can find the
HELPWANTED issues by selecting the keyword in the search interface or at

https://bugs.r-project.org/bugzilla/buglist.cgi?keywords=HELPWANTED

This URL shows both open and resolved HELPWANTED issues.

At the moment only a handful of issues have been tagged, but there
will be more over time. One of these may be a good place to start if
you are looking for ways to contribute. The techincal level varies;
some might be resolved with a small amount of R code; others might
need more extensive changes at the C level.

Best,

luke


-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @rtjom31415 @end|ng |rom goog|em@||@com  Fri Aug  7 20:01:09 2020
From: @rtjom31415 @end|ng |rom goog|em@||@com (Constantin Ahlmann-Eltze)
Date: Fri, 7 Aug 2020 20:01:09 +0200
Subject: [Rd] qnbinom with small size is slow
Message-ID: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>

Hi all,

I recently noticed that `qnbinom()` can take a long time to calculate
a result if the `size` argument is very small.
For example
   qnbinom(0.5, mu = 3, size = 1e-10)
takes ~30 seconds on my computer.

I used gdb to step through the qnbinom.c implementation and noticed
that in line 106
(https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qnbinom.c#L106)
`y` becomes a very large negative number. Later in the function `y` is
(as far as I can see) only used as input for `pnbinom()` which is why
I would assume that it should be a non-negative integer.

I was wondering if this behavior could be considered a bug and should
be reported on the bugzilla? I read the instructions at
https://www.r-project.org/bugs.html and wasn't quite sure, so I
decided to ask here first :)

Best,
Constantin




PS: I tested the code with R 4.0.0 on macOS and the latest unstable
version using docker (https://github.com/wch/r-debug). The session
info is
> sessionInfo()
R Under development (unstable) (2020-08-06 r78973)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04 LTS

Matrix products: default
BLAS:   /usr/local/RD/lib/R/lib/libRblas.so
LAPACK: /usr/local/RD/lib/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.1.0


From bbo|ker @end|ng |rom gm@||@com  Fri Aug  7 21:41:33 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 7 Aug 2020 15:41:33 -0400
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
Message-ID: <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>

 ?? I can reproduce this on

R Under development (unstable) (2020-07-24 r78910)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Pop!_OS 18.04 LTS

 ? In my opinion this is worth reporting, but discussing it here first 
was a good idea.? Many more people read this list than watch the bug 
tracker, so it will get more attention here; once the excitement has 
died down here (which might be almost immediately!), if no-one has 
already volunteered to post it to the bug tracker, request an account 
(as specified at https://www.r-project.org/bugs.html )

 ? Thanks!

 ?? Ben Bolker


For what it's worth it doesn't seem to be a threshold effect: approximately

log10(time[seconds]) ~ -8 - log10(-size)

over the range from 1e-6 to 1e-9


ff <- function(x) {
 ?? system.time(qnbinom(0.5, mu=3, size=10^x))[["elapsed"]]
}
svec <- seq(-5,-9,by=-0.2)
res <- lapply(svec, function(x) {
 ??? cat(x,"\n")
 ??? replicate(10,ff(x))
 ??? })

dd <- data.frame(size=rep(svec,each=10),
 ???????????????? time=unlist(res))
boxplot(log10(time)~size, dd)
summary(lm(log10(time)~size, data=dd, subset=time>0))




On 8/7/20 2:01 PM, Constantin Ahlmann-Eltze via R-devel wrote:

> Hi all,
>
> I recently noticed that `qnbinom()` can take a long time to calculate
> a result if the `size` argument is very small.
> For example
>     qnbinom(0.5, mu = 3, size = 1e-10)
> takes ~30 seconds on my computer.
>
> I used gdb to step through the qnbinom.c implementation and noticed
> that in line 106
> (https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qnbinom.c#L106)
> `y` becomes a very large negative number. Later in the function `y` is
> (as far as I can see) only used as input for `pnbinom()` which is why
> I would assume that it should be a non-negative integer.
>
> I was wondering if this behavior could be considered a bug and should
> be reported on the bugzilla? I read the instructions at
> https://www.r-project.org/bugs.html and wasn't quite sure, so I
> decided to ask here first :)
>
> Best,
> Constantin
>
>
>
>
> PS: I tested the code with R 4.0.0 on macOS and the latest unstable
> version using docker (https://github.com/wch/r-debug). The session
> info is
>> sessionInfo()
> R Under development (unstable) (2020-08-06 r78973)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 20.04 LTS
>
> Matrix products: default
> BLAS:   /usr/local/RD/lib/R/lib/libRblas.so
> LAPACK: /usr/local/RD/lib/R/lib/libRlapack.so
>
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.1.0
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @per@nz@ @end|ng |rom |bk@eu  Sun Aug  9 12:09:27 2020
From: @per@nz@ @end|ng |rom |bk@eu (speranza)
Date: Sun, 9 Aug 2020 12:09:27 +0200
Subject: [Rd] Interactive graphics
Message-ID: <1ca58d86-fea4-9407-b629-cdcc6859535a@fbk.eu>

Dear R-Devel list members
I'm facing as problem already known and linked to the use of

getGraphicsEvent(prompt = "Waiting for input",
 ???????????????? onMouseDown = NULL, onMouseMove = NULL,
 ???????????????? onMouseUp = NULL, onKeybd = NULL,
 ???????????????? onIdle = NULL,
 ???????????????? consolePrompt = prompt)
setGraphicsEventHandlers(which = dev.cur(), ...)
getGraphicsEventEnv(which = dev.cur())
setGraphicsEventEnv(which = dev.cur(), env)

The problem rises when trying to get interrupts generated by pressing 
mouse buttons and, at the same time, interrupts coming from widgets. The 
idea is to locate points under a spectrum and draw a baseline.
 ?In my code the logical sequence of operations is:
1) widgets are created to select the datafile, the spectrum to plot, and 
the baseline to use;
2) The selection of the datafile and spectrum activate widget-handlers 
and the spectrum is drawn in an X-Y plot;
3) then
/setGraphicsEventHandlers(which = dev.cur(), ...)/
/getGraphicsEventEnv()//
/are used to set the graphic handler and check if the /EventEnv$which/ 
corresponds to the active device and get events when mouse buttons are 
pressed. Observe that these instructions are located after widgets at 
the end of the code (i.e. all widget with handlers are defined).

In Windows operating systems both widget-handlers and 
graphic-Event-handlers are active. This allows defining the baseline 
edges under the spectrum (graphic-Event-handlers), select the baseline 
(widget handlers) and plot the baseline under the spectrum (widget 
handlers).
Unfortunately in linux (I'm using Ubuntu 18.04 LTS) the 
graphic-Event-handler masks the widget handlers. This blocks the mouse 
clicks on widgets preventing any selection of the baseline and of other 
options.

The locator function uses a graphic handler letting widget-handlers 
active in both windows and linux operating systems. Infortunately 
locator() only responds to the Left_mouse_button while I need both the 
left and right buttons. The code C_locator() used to sense the mouse 
button pressing is not accessible I then cannot modify it to satisfy my 
needs.
Could you suggest any solution?
Is it possible to have the C_locator code to modify it?
Thanking you in advance for the attention
best regards
G. Speranza

-- 
Dr. Giorgio Speranza Senior Researcher
CMM - FBK Sommarive str. 18
38121 Trento - Italy
Phone ++39 0461 314487


-- 
_FBK vi invita a leggere il suo?Piano di rientro 
<https://trasparenza.fbk.eu/COVID-19-comunicazioni-del-Datore-di-Lavoro-raccomandazioni-e-altro/Piano-di-rientro-FBK/Piano-di-rientro-FBK>?
| FBK invites you to read its?Premises Reopening Plan 
<https://trasparenza.fbk.eu/COVID-19-comunicazioni-del-Datore-di-Lavoro-raccomandazioni-e-altro/Piano-di-rientro-FBK/English-version_FBK-Reopening-Plan>._



--
Le informazioni contenute nella presente comunicazione sono di natura?
privata e come tali sono da considerarsi riservate ed indirizzate?
esclusivamente ai destinatari indicati e per le finalit? strettamente?
legate al relativo contenuto. Se avete ricevuto questo messaggio per?
errore, vi preghiamo di eliminarlo e di inviare una comunicazione?
all?indirizzo e-mail del mittente.

--
The information transmitted is 
intended only for the person or entity to which it is addressed and may 
contain confidential and/or privileged material. If you received this in 
error, please contact the sender and delete the material.

	[[alternative HTML version deleted]]


From jmount @end|ng |rom w|n-vector@com  Sun Aug  9 20:13:47 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Sun, 9 Aug 2020 18:13:47 +0000
Subject: [Rd] lm() takes weights from formula environment
Message-ID: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>

I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).

lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.

Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.


d <- data.frame(x = 1:3, y = c(3, 3, 4))
w <- c(1, 5, 1)

# works
lm(y ~ x, data = d, weights = w)  

# fails, as weights are taken from formul environment
fn <- function() {  # deliberately set up formula with bad value in environment
  w <- c(-1, -1, -1, -1)  # bad weights
  f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
  return(f)
}
lm(fn(), data = d, weights = w)
# Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) : 
#   variable lengths differ (found for '(weights)')


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Aug  9 20:56:59 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Aug 2020 14:56:59 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
Message-ID: <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>

This is fairly clearly documented in ?lm:

"All of weights, subset and offset are evaluated in the same way as 
variables in formula, that is first in data and then in the environment 
of formula."

There are lots of possible places to look for weights, but this seems to 
me like a pretty sensible search order.  In most cases the environment 
of the formula will have a parent environment chain that eventually 
leads to the global environment, so (with no conflicts) your strategy of 
defining w there will sometimes work, but looks pretty unreliable.

When you say you want to work around this search order, I think the 
obvious way is to add your w vector to your d dataframe.  That way it is 
guaranteed to be found even if there's a conflicting variable in the 
formula environment, or the global environment.

Duncan Murdoch

On 09/08/2020 2:13 p.m., John Mount wrote:
> I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).
> 
> lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.
> 
> Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.
> 
> 
> d <- data.frame(x = 1:3, y = c(3, 3, 4))
> w <- c(1, 5, 1)
> 
> # works
> lm(y ~ x, data = d, weights = w)
> 
> # fails, as weights are taken from formul environment
> fn <- function() {  # deliberately set up formula with bad value in environment
>    w <- c(-1, -1, -1, -1)  # bad weights
>    f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
>    return(f)
> }
> lm(fn(), data = d, weights = w)
> # Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) :
> #   variable lengths differ (found for '(weights)')
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jmount @end|ng |rom w|n-vector@com  Sun Aug  9 21:01:21 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Sun, 9 Aug 2020 19:01:21 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
Message-ID: <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>

Doesn't this preclude "y ~ ." style notations?

> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> This is fairly clearly documented in ?lm:
> 
> "All of weights, subset and offset are evaluated in the same way as variables in formula, that is first in data and then in the environment of formula."
> 
> There are lots of possible places to look for weights, but this seems to me like a pretty sensible search order.  In most cases the environment of the formula will have a parent environment chain that eventually leads to the global environment, so (with no conflicts) your strategy of defining w there will sometimes work, but looks pretty unreliable.
> 
> When you say you want to work around this search order, I think the obvious way is to add your w vector to your d dataframe.  That way it is guaranteed to be found even if there's a conflicting variable in the formula environment, or the global environment.
> 
> Duncan Murdoch
> 
> On 09/08/2020 2:13 p.m., John Mount wrote:
>> I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).
>> lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.
>> Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.
>> d <- data.frame(x = 1:3, y = c(3, 3, 4))
>> w <- c(1, 5, 1)
>> # works
>> lm(y ~ x, data = d, weights = w)
>> # fails, as weights are taken from formul environment
>> fn <- function() {  # deliberately set up formula with bad value in environment
>>   w <- c(-1, -1, -1, -1)  # bad weights
>>   f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
>>   return(f)
>> }
>> lm(fn(), data = d, weights = w)
>> # Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) :
>> #   variable lengths differ (found for '(weights)')
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Aug  9 21:07:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Aug 2020 15:07:40 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>
Message-ID: <351b0718-6630-18f8-860a-fc0984bf36d7@gmail.com>

On 09/08/2020 3:01 p.m., John Mount wrote:
> Doesn't this preclude "y ~ ." style notations?

Yes, but you can use "y ~ . - w".

Duncan Murdoch


> 
>> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> This is fairly clearly documented in ?lm:
>>
>> "All of weights, subset and offset are evaluated in the same way as variables in formula, that is first in data and then in the environment of formula."
>>
>> There are lots of possible places to look for weights, but this seems to me like a pretty sensible search order.  In most cases the environment of the formula will have a parent environment chain that eventually leads to the global environment, so (with no conflicts) your strategy of defining w there will sometimes work, but looks pretty unreliable.
>>
>> When you say you want to work around this search order, I think the obvious way is to add your w vector to your d dataframe.  That way it is guaranteed to be found even if there's a conflicting variable in the formula environment, or the global environment.
>>
>> Duncan Murdoch
>>
>> On 09/08/2020 2:13 p.m., John Mount wrote:
>>> I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).
>>> lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.
>>> Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.
>>> d <- data.frame(x = 1:3, y = c(3, 3, 4))
>>> w <- c(1, 5, 1)
>>> # works
>>> lm(y ~ x, data = d, weights = w)
>>> # fails, as weights are taken from formul environment
>>> fn <- function() {  # deliberately set up formula with bad value in environment
>>>    w <- c(-1, -1, -1, -1)  # bad weights
>>>    f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
>>>    return(f)
>>> }
>>> lm(fn(), data = d, weights = w)
>>> # Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) :
>>> #   variable lengths differ (found for '(weights)')
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 10 00:05:32 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Aug 2020 18:05:32 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <351b0718-6630-18f8-860a-fc0984bf36d7@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>
 <351b0718-6630-18f8-860a-fc0984bf36d7@gmail.com>
Message-ID: <d479ad0e-24cd-71a3-d678-0aa312ebcaf5@gmail.com>

On 09/08/2020 3:07 p.m., Duncan Murdoch wrote:
> On 09/08/2020 3:01 p.m., John Mount wrote:
>> Doesn't this preclude "y ~ ." style notations?
> 
> Yes, but you can use "y ~ . - w".

And as was pointed out to me offline, often one doesn't have a simple 
vector w giving the weights, instead one computes the weights from the 
predictors.  So if weights = f(pred), the original "y ~ ." would be fine.

Duncan Murdoch


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Aug 10 09:45:39 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 10 Aug 2020 08:45:39 +0100
Subject: [Rd] Typos in file.path documentation.
Message-ID: <5c4e8fe9-7559-4e8b-8613-c14e9ed0a3ed@sapo.pt>

Hello,

R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

I believe there are two typos in ?file.path, section Value, 2nd paragraph.

1. There is a close parenthesis missing  after Encoding, as it is 
reading is a bit confusing, I had to backtrack and repeat.
2. I'm not a native language speaker but before a consonant it's 'a', 
not 'an', right?

an component

should be

a component


Current:

An element of the result will be marked (see Encoding as UTF-8 if run in 
a UTF-8 locale (when marked inputs are converted to UTF-8) or if an 
component of the result is marked as UTF-8, or as Latin-1 in a 
non-Latin-1 locale.

Should be:

An element of the result will be marked (see Encoding) as UTF-8 if run 
in a UTF-8 locale (when marked inputs are converted to UTF-8) or if a 
component of the result is marked as UTF-8, or as Latin-1 in a 
non-Latin-1 locale.


sessionInfo()
R version 4.0.2 (2020-06-22)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.0.2


Hope this helps,

Rui Barradas


From @rtjom31415 @end|ng |rom goog|em@||@com  Mon Aug 10 10:05:36 2020
From: @rtjom31415 @end|ng |rom goog|em@||@com (Constantin Ahlmann-Eltze)
Date: Mon, 10 Aug 2020 10:05:36 +0200
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
 <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
Message-ID: <CANk-X-31zDWV-dKsknHvkh3rNZkpaq=1LyQ93G48bX2vUDh=VQ@mail.gmail.com>

Thanks Ben for verifying the issue. It is always reassuring to hear
when others can reproduce the problem.

I wrote a small patch that fixes the issue
(https://github.com/r-devel/r-svn/pull/11):

diff --git a/src/nmath/qnbinom.c b/src/nmath/qnbinom.c
index b313ce56b2..d2e8d98759 100644
--- a/src/nmath/qnbinom.c
+++ b/src/nmath/qnbinom.c
@@ -104,6 +104,7 @@ double qnbinom(double p, double size, double prob,
int lower_tail, int log_p)
     /* y := approx.value (Cornish-Fisher expansion) :  */
     z = qnorm(p, 0., 1., /*lower_tail*/TRUE, /*log_p*/FALSE);
     y = R_forceint(mu + sigma * (z + gamma * (z*z - 1) / 6));
+    y = fmax2(0.0, y);

     z = pnbinom(y, size, prob, /*lower_tail*/TRUE, /*log_p*/FALSE);

I used the https://github.com/r-devel/r-svn repo and its continuous
integration tools to check that it doesn't break any existing tests:
https://github.com/r-devel/r-svn/actions/runs/201327042

I have also requested a Bugzilla-account, but haven't heard anything back yet.

Best,
Constantin

Am Fr., 7. Aug. 2020 um 21:41 Uhr schrieb Ben Bolker <bbolker at gmail.com>:
>
>     I can reproduce this on
>
> R Under development (unstable) (2020-07-24 r78910)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Pop!_OS 18.04 LTS
>
>    In my opinion this is worth reporting, but discussing it here first
> was a good idea.  Many more people read this list than watch the bug
> tracker, so it will get more attention here; once the excitement has
> died down here (which might be almost immediately!), if no-one has
> already volunteered to post it to the bug tracker, request an account
> (as specified at https://www.r-project.org/bugs.html )
>
>    Thanks!
>
>     Ben Bolker
>
>
> For what it's worth it doesn't seem to be a threshold effect: approximately
>
> log10(time[seconds]) ~ -8 - log10(-size)
>
> over the range from 1e-6 to 1e-9
>
>
> ff <- function(x) {
>     system.time(qnbinom(0.5, mu=3, size=10^x))[["elapsed"]]
> }
> svec <- seq(-5,-9,by=-0.2)
> res <- lapply(svec, function(x) {
>      cat(x,"\n")
>      replicate(10,ff(x))
>      })
>
> dd <- data.frame(size=rep(svec,each=10),
>                   time=unlist(res))
> boxplot(log10(time)~size, dd)
> summary(lm(log10(time)~size, data=dd, subset=time>0))
>
>
>
>
> On 8/7/20 2:01 PM, Constantin Ahlmann-Eltze via R-devel wrote:
>
> > Hi all,
> >
> > I recently noticed that `qnbinom()` can take a long time to calculate
> > a result if the `size` argument is very small.
> > For example
> >     qnbinom(0.5, mu = 3, size = 1e-10)
> > takes ~30 seconds on my computer.
> >
> > I used gdb to step through the qnbinom.c implementation and noticed
> > that in line 106
> > (https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qnbinom.c#L106)
> > `y` becomes a very large negative number. Later in the function `y` is
> > (as far as I can see) only used as input for `pnbinom()` which is why
> > I would assume that it should be a non-negative integer.
> >
> > I was wondering if this behavior could be considered a bug and should
> > be reported on the bugzilla? I read the instructions at
> > https://www.r-project.org/bugs.html and wasn't quite sure, so I
> > decided to ask here first :)
> >
> > Best,
> > Constantin
> >
> >
> >
> >
> > PS: I tested the code with R 4.0.0 on macOS and the latest unstable
> > version using docker (https://github.com/wch/r-debug). The session
> > info is
> >> sessionInfo()
> > R Under development (unstable) (2020-08-06 r78973)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Ubuntu 20.04 LTS
> >
> > Matrix products: default
> > BLAS:   /usr/local/RD/lib/R/lib/libRblas.so
> > LAPACK: /usr/local/RD/lib/R/lib/libRlapack.so
> >
> > locale:
> >   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> >   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> >   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> > [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_4.1.0
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jmount @end|ng |rom w|n-vector@com  Mon Aug 10 19:42:43 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Mon, 10 Aug 2020 17:42:43 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
Message-ID: <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>

I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."

But I did not. So I do apologize for both that and for negative tone on my part.


Simplified example:

d <- data.frame(x = 1:3, y = c(1, 2, 1))
w <- c(1, 10, 1)
f <- as.formula(y ~ x)
lm(f, data = d, weights = w)  # works

# fails
environment(f) <- baseenv()
lm(f, data = d, weights = w)
# Error in eval(extras, data, env) : object 'w' not found


> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> This is fairly clearly documented in ?lm:
> 


From wdun|@p @end|ng |rom t|bco@com  Mon Aug 10 20:25:58 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 10 Aug 2020 11:25:58 -0700
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
Message-ID: <CAF8bMcaiWzHH5Ui-gs3z6vjAyvC-GZqsiP5rbqPfWNwNb9yBHA@mail.gmail.com>

I assume you are concerned about this because the formula is defined
in one environment and the model fitting with weights occurs in a
separate function.  If that is the case then the model fitting
function can create a new environment, a child of the formula's
environment, add the weights variable to it, and make that the new
environment of the formula.  (This new environment is only an
attribute of the copy of the formula in the model fitting function: it
will not affect the formula outside of that function.)  E.g.,


d <- data.frame(x = 1:3, y = c(1, 2, 1))

lmWithWeightsBad <- function(formula, data, weights) {
    lm(formula, data=data, weights=weights)
}
coef(lmWithWeightsBad(y~x, data=d, weights=c(2,5,1))) # lm finds the
'weights' function in package:stats
#Error in model.frame.default(formula = formula, data = data, weights
= weights,  :
#  invalid type (closure) for variable '(weights)'

lmWithWeightsGood <- function(formula, data, weights) {
    envir <- new.env(parent = environment(formula))
    envir$weights <- weights
    environment(formula) <- envir
    lm(formula, data=data, weights=weights)
}
coef(lmWithWeightsGood(y~x, data=d, weights=c(2,5,1)))
#(Intercept)           x
#  1.2173913   0.2173913

Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Mon, Aug 10, 2020 at 10:43 AM John Mount <jmount at win-vector.com> wrote:
>
> I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."
>
> But I did not. So I do apologize for both that and for negative tone on my part.
>
>
> Simplified example:
>
> d <- data.frame(x = 1:3, y = c(1, 2, 1))
> w <- c(1, 10, 1)
> f <- as.formula(y ~ x)
> lm(f, data = d, weights = w)  # works
>
> # fails
> environment(f) <- baseenv()
> lm(f, data = d, weights = w)
> # Error in eval(extras, data, env) : object 'w' not found
>
>
> > On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> >
> > This is fairly clearly documented in ?lm:
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 10 20:34:20 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 10 Aug 2020 14:34:20 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
Message-ID: <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>

On 10/08/2020 1:42 p.m., John Mount wrote:
> I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."

Normally searching is done automatically by following a chain of 
environments.  It's easy to add something to the head of the chain (e.g. 
data), it's hard to add something in the middle or at the end (because 
the chain ends with emptyenv(), which is not allowed to have a parent).

So I'd suggest using

  environment(f) <- environment()

before calling lm() if you want the calling environment to be in the 
search.  Setting it to baseenv() doesn't really make sense, unless you 
want to disable all searches except in data, in which case emptyenv() 
would make more sense (but I haven't tried it, so it might break something).

Duncan Murdoch

> 
> But I did not. So I do apologize for both that and for negative tone on my part.
> 
> 
> Simplified example:
> 
> d <- data.frame(x = 1:3, y = c(1, 2, 1))
> w <- c(1, 10, 1)
> f <- as.formula(y ~ x)
> lm(f, data = d, weights = w)  # works
> 
> # fails
> environment(f) <- baseenv()
> lm(f, data = d, weights = w)
> # Error in eval(extras, data, env) : object 'w' not found
> 
> 
>> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> This is fairly clearly documented in ?lm:
>>
>


From jmount @end|ng |rom w|n-vector@com  Mon Aug 10 20:50:04 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Mon, 10 Aug 2020 18:50:04 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
 <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>
Message-ID: <3762C93D-E83A-493E-8AE5-1C40368F31C2@win-vector.com>

Thank you for your suggestion. I do know how to work around the issue.  I usually build a fresh environment as a child of base-environment and then insurt the weights there. I was just trying to provide an example of the issue.

emptyenv() can not be used, as it is needed for the eval (errors out even if weights are not used with "could not find function list").

For some applications one doesn't want the formula to have a non-trivial environment with respect to serialization.  Nina Zumel wrote about reference leaks in lm()/glm() and a good part of that was environments other than global/base (such as those formed when building a formula in a function) capturing references to unrelated structures.



> On Aug 10, 2020, at 11:34 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 10/08/2020 1:42 p.m., John Mount wrote:
>> I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."
> 
> Normally searching is done automatically by following a chain of environments.  It's easy to add something to the head of the chain (e.g. data), it's hard to add something in the middle or at the end (because the chain ends with emptyenv(), which is not allowed to have a parent).
> 
> So I'd suggest using
> 
> environment(f) <- environment()
> 
> before calling lm() if you want the calling environment to be in the search.  Setting it to baseenv() doesn't really make sense, unless you want to disable all searches except in data, in which case emptyenv() would make more sense (but I haven't tried it, so it might break something).
> 
> Duncan Murdoch
> 
>> But I did not. So I do apologize for both that and for negative tone on my part.
>> Simplified example:
>> d <- data.frame(x = 1:3, y = c(1, 2, 1))
>> w <- c(1, 10, 1)
>> f <- as.formula(y ~ x)
>> lm(f, data = d, weights = w)  # works
>> # fails
>> environment(f) <- baseenv()
>> lm(f, data = d, weights = w)
>> # Error in eval(extras, data, env) : object 'w' not found
>>> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> This is fairly clearly documented in ?lm:
>>> 
> 


From jmount @end|ng |rom w|n-vector@com  Mon Aug 10 20:54:58 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Mon, 10 Aug 2020 18:54:58 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <3762C93D-E83A-493E-8AE5-1C40368F31C2@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
 <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>
 <3762C93D-E83A-493E-8AE5-1C40368F31C2@win-vector.com>
Message-ID: <CC71C4C8-6A7A-4317-8279-1AEB66700690@win-vector.com>

Forgot the url: https://win-vector.com/2014/05/30/trimming-the-fat-from-glm-models-in-r/

On Aug 10, 2020, at 11:50 AM, John Mount <jmount at win-vector.com<mailto:jmount at win-vector.com>> wrote:

Thank you for your suggestion. I do know how to work around the issue.  I usually build a fresh environment as a child of base-environment and then insurt the weights there. I was just trying to provide an example of the issue.

emptyenv() can not be used, as it is needed for the eval (errors out even if weights are not used with "could not find function list").

For some applications one doesn't want the formula to have a non-trivial environment with respect to serialization.  Nina Zumel wrote about reference leaks in lm()/glm() and a good part of that was environments other than global/base (such as those formed when building a formula in a function) capturing references to unrelated structures.



On Aug 10, 2020, at 11:34 AM, Duncan Murdoch <murdoch.duncan at gmail.com<mailto:murdoch.duncan at gmail.com>> wrote:

On 10/08/2020 1:42 p.m., John Mount wrote:
I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."

Normally searching is done automatically by following a chain of environments.  It's easy to add something to the head of the chain (e.g. data), it's hard to add something in the middle or at the end (because the chain ends with emptyenv(), which is not allowed to have a parent).

So I'd suggest using

environment(f) <- environment()

before calling lm() if you want the calling environment to be in the search.  Setting it to baseenv() doesn't really make sense, unless you want to disable all searches except in data, in which case emptyenv() would make more sense (but I haven't tried it, so it might break something).

Duncan Murdoch

But I did not. So I do apologize for both that and for negative tone on my part.
Simplified example:
d <- data.frame(x = 1:3, y = c(1, 2, 1))
w <- c(1, 10, 1)
f <- as.formula(y ~ x)
lm(f, data = d, weights = w)  # works
# fails
environment(f) <- baseenv()
lm(f, data = d, weights = w)
# Error in eval(extras, data, env) : object 'w' not found
On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com<mailto:murdoch.duncan at gmail.com>> wrote:

This is fairly clearly documented in ?lm:





	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Tue Aug 11 03:23:01 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 10 Aug 2020 21:23:01 -0400
Subject: [Rd] M[cbind()] <- assignment with Matrix object loses attributes
Message-ID: <baa2781d-0371-401d-b8a5-62b5f693eec5@gmail.com>

 ? Does this constitute a bug, or is there something I'm missing? 
assigning sub-elements of a sparse Matrix via M[X]<-..., where X is a 
2-column matrix, appears to drop user-assigned attributes. I dug around 
in the R code for Matrix trying to find the relevant machinery but my 
brain started to hurt too badly ...

 ?? Will submit this as a bug if it seems warranted.

library(Matrix)
m1 <- matrix(1:9,3,3)
m1 <- Matrix(m1)
attr(m1,"junk") <- 12
stopifnot(isTRUE(attr(m1,"junk")==12))? ## OK
m1[cbind(1:2,2:3)] <- 1
stopifnot(isTRUE(attr(m1,"junk")==12)) ## not OK
attr(m1,"junk") ## NULL


## note I have to use the ugly stopifnot(isTRUE(...)) because a missing 
attribute returns NULL, an assignment to NULL returns NULL, and 
stopifnot(NULL) doesn't stop ...


 ?? cheers

 ???? Ben Bolker


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Aug 11 13:39:26 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 11 Aug 2020 13:39:26 +0200
Subject: [Rd] Typos in file.path documentation.
In-Reply-To: <5c4e8fe9-7559-4e8b-8613-c14e9ed0a3ed@sapo.pt>
References: <5c4e8fe9-7559-4e8b-8613-c14e9ed0a3ed@sapo.pt>
Message-ID: <24370.33646.170137.156667@hornik.net>

>>>>> Rui Barradas writes:

Thanks: both fixed now in the trunk with c79004.

Best
-k

> Hello,
> R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

> I believe there are two typos in ?file.path, section Value, 2nd paragraph.

> 1. There is a close parenthesis missing  after Encoding, as it is 
> reading is a bit confusing, I had to backtrack and repeat.
> 2. I'm not a native language speaker but before a consonant it's 'a', 
> not 'an', right?

> an component

> should be

> a component


> Current:

> An element of the result will be marked (see Encoding as UTF-8 if run in 
> a UTF-8 locale (when marked inputs are converted to UTF-8) or if an 
> component of the result is marked as UTF-8, or as Latin-1 in a 
> non-Latin-1 locale.

> Should be:

> An element of the result will be marked (see Encoding) as UTF-8 if run 
> in a UTF-8 locale (when marked inputs are converted to UTF-8) or if a 
> component of the result is marked as UTF-8, or as Latin-1 in a 
> non-Latin-1 locale.


> sessionInfo()
> R version 4.0.2 (2020-06-22)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 20.04.1 LTS

> Matrix products: default
> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

> locale:
>   [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
>   [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
>   [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base

> loaded via a namespace (and not attached):
> [1] compiler_4.0.2


> Hope this helps,

> Rui Barradas

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tdhock5 @end|ng |rom gm@||@com  Wed Aug 12 05:39:58 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Tue, 11 Aug 2020 20:39:58 -0700
Subject: [Rd] HELPWANTED keyword in bugs.r-project.org
In-Reply-To: <alpine.DEB.2.21.2008050919360.18514@luke-Latitude-7480>
References: <alpine.DEB.2.21.2008050919360.18514@luke-Latitude-7480>
Message-ID: <CALK03d0BrvNCOEC5yMhGswdSJP-9kQY4g--nYB9wUJJKnXno=A@mail.gmail.com>

Hi Luke,
I just wanted to say thanks for taking the time to add this tag. That is
very helpful to know which bugs are worth working on and need help. Keep up
the good work!
Toby

On Wed, Aug 5, 2020 at 7:23 AM <luke-tierney at uiowa.edu> wrote:

> Just a quick note to mention that we have added a HELPWANTED keyword
> on bugs.r-project.org for tagging bugs and issues where a good
> well-tested patch would be particularly appreciated.  You can find the
> HELPWANTED issues by selecting the keyword in the search interface or at
>
> https://bugs.r-project.org/bugzilla/buglist.cgi?keywords=HELPWANTED
>
> This URL shows both open and resolved HELPWANTED issues.
>
> At the moment only a handful of issues have been tagged, but there
> will be more over time. One of these may be a good place to start if
> you are looking for ways to contribute. The techincal level varies;
> some might be resolved with a small amount of R code; others might
> need more extensive changes at the C level.
>
> Best,
>
> luke
>
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From neon|r@ @end|ng |rom gm@||@com  Fri Aug 14 08:44:22 2020
From: neon|r@ @end|ng |rom gm@||@com (neonira Arinoem)
Date: Fri, 14 Aug 2020 08:44:22 +0200
Subject: [Rd] Managing unix signal in R
Message-ID: <CAN--Dz19Vm_AowRkObbxB3jgeqfQ9cbbL-=21O+=_zhG7jhDrg@mail.gmail.com>

Hello

Just wondering what is the best way to manage unix signal in R?

Though I dug up the R documentation, I haven't found any single relevant
example.

I could wrap C/C++ unix signal management using RCPP of course.
Prior doing so, I wish to be sure that there exist no other available
alternative, already implemented and tested.

Let me know.

Best.
Neonira

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Aug 14 10:14:53 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 14 Aug 2020 20:14:53 +1200
Subject: [Rd] Managing unix signal in R
In-Reply-To: <CAN--Dz19Vm_AowRkObbxB3jgeqfQ9cbbL-=21O+=_zhG7jhDrg@mail.gmail.com>
References: <CAN--Dz19Vm_AowRkObbxB3jgeqfQ9cbbL-=21O+=_zhG7jhDrg@mail.gmail.com>
Message-ID: <577371A6-DE99-4947-AE8F-C40C7CCE91FD@R-project.org>

What do you mean by "manage unix signal"? The main signals like INT, PIPE or SEGV are handled by R and are not exposed to the user code. What exactly do you intend to do?

Cheers,
Simon


> On Aug 14, 2020, at 6:44 PM, neonira Arinoem <neonira at gmail.com> wrote:
> 
> Hello
> 
> Just wondering what is the best way to manage unix signal in R?
> 
> Though I dug up the R documentation, I haven't found any single relevant
> example.
> 
> I could wrap C/C++ unix signal management using RCPP of course.
> Prior doing so, I wish to be sure that there exist no other available
> alternative, already implemented and tested.
> 
> Let me know.
> 
> Best.
> Neonira
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Aug 14 13:23:15 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 14 Aug 2020 07:23:15 -0400
Subject: [Rd] Errors when base package version is specified
Message-ID: <ea7f83f6-01dd-444f-91a8-84651b5d0e0d@gmail.com>

On StackOverflow (https://stackoverflow.com/q/63409565/2554330), a user 
was confused by the error messages from R when the DESCRIPTION file for 
his package specified

   Imports:  stats >= 4.0.2

The message from an attempted source build in R 3.6.1 said:

   Warning in install.packages :
     dependency ?stats? is not available
   installing the source package ?doebioresearch?

and later

   Error in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), 
versionCheck = vI[[j]]) :
     namespace 'stats' 3.6.1 is already loaded, but >= 4.0.2 is required
   Calls: <Anonymous> ... namespaceImportFrom -> asNamespace -> 
loadNamespace
   Execution halted

Would it be worth giving an error or warning right away based on the 
Imports line?  It doesn't make sense to specify the version of a base 
package.  If he had specified R >= 4.0.2 I think the messages for R 
3.6.1 users would have been less confusing.

Duncan Murdoch


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Aug 14 23:05:04 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 14 Aug 2020 14:05:04 -0700
Subject: [Rd] Bug in stats:::`[.formula`: (~ NULL)[2] gives Error ...
 missing value where TRUE/FALSE needed
Message-ID: <CAFDcVCSWEimVwipkpzckK1ztdzEz+FqzuAFv0GZBR8DQ7Zx8XA@mail.gmail.com>

Hi, it looks like:

> stats:::`[.formula`
function (x, i)
{
    ans <- NextMethod("[")
    if (length(ans) == 0L || as.character(ans[[1L]])[1L] == "~") {
        class(ans) <- "formula"
        environment(ans) <- environment(x)
    }
    ans
}
<bytecode: 0x556688d87cc0>
<environment: namespace:stats>

doesn't like to extract NULL components on either the LHS or RHS.  For
example, with

> (~ NULL)[2]
Error in if (length(ans) == 0L || as.character(ans[[1L]])[1L] == "~") { :
  missing value where TRUE/FALSE needed

this despite:

> str(as.list(~ NULL))
List of 2
 $ : symbol ~
 $ : NULL
 - attr(*, "class")= chr "formula"
 - attr(*, ".Environment")=<environment: R_GlobalEnv>

> length(~ NULL)
[1] 2

> (~ NULL)[[2]]
NULL

Other examples are:

> (NULL ~ .)[2]
Error in if (length(ans) == 0L || as.character(ans[[1L]])[1L] == "~") { :
  missing value where TRUE/FALSE needed

> (NULL ~ NULL)[3]
Error in if (length(ans) == 0L || as.character(ans[[1L]])[1L] == "~") { :
  missing value where TRUE/FALSE needed


TROUBLESHOOTING:

The reason is that ans[[1L]] becomes NULL;

> trace(stats:::`[.formula`, tracer = quote(utils::str(as.list(ans))), at = 3L)
Tracing function "[.formula" in package "stats (not-exported)"
[1] "[.formula"

> (~ NULL)[2]
Tracing `[.formula`((~NULL), 2) step 3
List of 1
 $ : NULL
Error in if (length(ans) == 0L || as.character(ans[[1L]])[1L] == "~") { :
  missing value where TRUE/FALSE needed

which causes 'as.character(ans[[1L]])[1L] == "~"' to resolve to NA.


PATCH:

A minimal backward compatible fix would be:

`[.formula` <- function(x,i) {
    ans <- NextMethod("[")
    ## as.character gives a vector.
    if(length(ans) == 0L || (is.null(ans[[1L]]) && i <= length(x)) ||
       as.character(ans[[1L]])[1L] == "~") {
        class(ans) <- "formula"
        environment(ans) <- environment(x)
    }
    ans
}

A better fix would probably be to also detect out of range as in:

`[.formula` <- function(x,i) {
    if (i > length(x))
        stop(gettext("index out of range"))
    ans <- NextMethod("[")
    ## as.character gives a vector.
    if(length(ans) == 0L || is.null(ans[[1L]]) ||
       as.character(ans[[1L]])[1L] == "~") {
        class(ans) <- "formula"
        environment(ans) <- environment(x)
    }
    ans
}

/Henrik


From jmount @end|ng |rom w|n-vector@com  Sun Aug 16 18:16:18 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Sun, 16 Aug 2020 16:16:18 +0000
Subject: [Rd] I would suggest stats::glm() should set "converged" to FALSE
 in the return value in a few more situations.
Message-ID: <30A0F905-D2CB-42FA-A794-F9023B34E02C@win-vector.com>

I would suggest stats::glm() should set "converged" to FALSE in the return value in a few more situations. I believe the current returned converged == TRUE can be needlessly misleading when the algorithm has clearly failed (and the algo even issued a warning, but the returned structure claims all is well).

In particular there are pathological inputs which cause the residual deviance to exceed the null deviance (even with intercept present, and no offset). I know we can't catch all cases, and for non-intercept ( ~ 0 +) situations this residual check may not apply.

Below is an input showing the effect on current R running on a 10.15.6 Mac (R from CRAN, no change to BLAS or such).



R.version.string
#> [1] "R version 4.0.2 (2020-06-22)"

R.version$platform
#> [1] "x86_64-apple-darwin17.0"

d <- data.frame(
  x1 = c(-20.3, -7.147, -7.101, -5.205, -5.166, -5.032, -2.787, -1.362, 1.637, 15.16),
  y = c(0, 1, 0, 1, 1, 1, 1, 0, 1, 1))
w <- 100000 * d$y + 1

m <- glm(
  y ~ x1,
  data = d,
  weights = w,
  family = binomial())
#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
# We do get a warning

m$converged
#> [1] TRUE

# notice residual deviance is greater than NULL deviance
m$null.deviance
#> [1] 80.16141
m$deviance
#> [1] 216.2619

# also preds are all 1.
predict(m, type='response')
#>  1  2  3  4  5  6  7  8  9 10
#>  1  1  1  1  1  1  1  1  1  1

# would suggest as a fitting step if m$null.deviance < m$deviance
# then set m$converged to FALSE (saving the user remembering such
# an inspection on their own).


	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Wed Aug 19 18:26:33 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 19 Aug 2020 09:26:33 -0700
Subject: [Rd] Stale link from ?check to R Internals
Message-ID: <CALK03d2HtehGe_8AmgzWe5DpoxG+4J8-HDF8MSR5fekmx2y16g@mail.gmail.com>

Hi the reference to R Internals
https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Tools
in ?check (PkgUtils.Rd in utils package) is stale. Here is my proposed
patch (use named reference rather than numeric reference to avoid any
similar broken links in the future).

Index: src/library/utils/man/PkgUtils.Rd
===================================================================
--- src/library/utils/man/PkgUtils.Rd (revision 79049)
+++ src/library/utils/man/PkgUtils.Rd (working copy)
@@ -40,7 +40,7 @@
   set by environment variables \env{_R_BUILD_RESAVE_DATA_} and
   \env{_R_BUILD_COMPACT_VIGNETTES_}: see \sQuote{Writing \R Extensions}.
   Many of the checks in \command{R CMD check} can be turned off or on by
-  environment variables: see Chapter 6 of the \sQuote{R Internals} manual.
+  environment variables: see Chapter "Tools" of the \sQuote{R Internals}
manual.

   By default \command{R CMD build} uses the \code{"internal"} option to
   \code{\link{tar}} to prepare the tarball.  An external \command{tar}

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Wed Aug 19 19:35:22 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 19 Aug 2020 10:35:22 -0700
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=K=AQ328qD33WObYQ_DbvZWBcQcP5Zf-A8z10o+=yLVR5Q@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
 <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
 <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>
 <CABtg=K=AQ328qD33WObYQ_DbvZWBcQcP5Zf-A8z10o+=yLVR5Q@mail.gmail.com>
Message-ID: <CALK03d2SF20PZcJS7uMkJoTtSjzG-hfb4g-+DCv4VAJCiH+Mcw@mail.gmail.com>

Hi win-builder certificate expired on Aug 15. My student on the other side
of the world is also seeing this problem so I think it needs to be fixed...
> download.file("https://win-builder.r-project.org", "/tmp/wb.html")
trying URL 'https://win-builder.r-project.org'
Error in download.file("https://win-builder.r-project.org", "/tmp/wb.html")
:
  cannot open URL 'https://win-builder.r-project.org'
In addition: Warning message:
In download.file("https://win-builder.r-project.org", "/tmp/wb.html") :
  URL 'https://win-builder.r-project.org/': status was 'Peer certificate
cannot be authenticated with given CA certificates'
>

On Wed, Jun 10, 2020 at 2:40 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:

> My (also not expert) understanding is that there is nothing insecure about
> alternative certificate chains at all. All browsers and macOS's built in
> SSL library (secure transport) support them properly. OpenSSL and LibreSSL
> were/are simply broken. This was not such a big issue so far, but now that
> some old long lived certificates are expiring, it is increasingly an issue.
>
> FWIW it is possible to build libcurl on macOS without any external SSL
> library, so OpenSSL and LibreSSL are not needed at all. (Unfortunately the
> libcurl build that comes with most (all?) macOS versions does use
> LibreSSL.) The R installer could link to such a static libcurl library on
> macOS, and that would solve the issue for macOS. Whether it should, that's
> another question.
>
> Gabor
>
> On Wed, Jun 10, 2020 at 9:56 AM peter dalgaard <pdalgd at gmail.com> wrote:
>
> > As I said, there is stuff that I don't understand in here.... (including
> > why browsers apparently do trust alternative chains)
> >
> > -pd
> >
> > > On 10 Jun 2020, at 01:53 , Simon Urbanek <simon.urbanek at R-project.org>
> > wrote:
> > >
> > > You are making a very strong assumption that finding an alternative
> > chain of trust is safe. I'd argue it's not - it means that an adversary
> > could manipulate the chain in a way to trust it instead of the declared
> > chain and thus subverting it. In fact switching to OpenSSL would create a
> > serious security hole here - in particular since it installs a separate
> > trust store which it is far more easily attacked and subverted. By your
> > argument we should disable all SSL checks as that produces error with
> > incorrectly configured servers so not performing checks is better. It is
> > true that R is likely not used for sensitive transactions, but I would
> > rather it warned me about situations where the communication may be
> > compromised instead of just silently going along.
> > >
> > > Cheers,
> > > Simon
> > >
> > >
> > >
> > >> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com>
> wrote:
> > >>
> > >> Yes and no... At least as I understand it (Disclaimer: There are
> things
> > I am pretty sure that I don't understand properly, somewhere in the
> Bermuda
> > triangle beween CA bundles, TLS protocols, and Server-side settings),
> there
> > are two sided to this:
> > >>
> > >> One is that various *.r-project.org servers got hit by a fumble where
> > a higher-up certificate in the chain of trust expired before the *.
> > r-project.org one. This was fixed by changing the certificate chain on
> > each server.
> > >>
> > >> The other side is that this situation hit Mac users harder than
> others,
> > because Apple's LibreSSL doesn't have the same feature that openSSL has
> to
> > detect a secondary chain of trust when the primary one expired. This was
> > not unique to R - svn also failed from the command line - but it did
> affect
> > download.file() inside R.
> > >>
> > >> The upshot is that there might be 3rd party servers with a similar
> > certificate setup which have not been updated like *.r-project.org. This
> > is not too unlikely since web browsers do not have trouble accessing
> them,
> > and the whole matter may go undetected. For such servers, download.file()
> > would still fail.
> > >>
> > >> I.e., there is a case to be made that we might want to link openSSL
> > rather than LibreSSL.  On the other hand, I gather that newer versions of
> > LibreSSL contain the relevant protocol upgrade, so maybe one can just
> wait
> > for Apple to update it. Or maybe we do want to link R against openSSL,
> but
> > almost certainly not for a hotfix release.
> > >>
> > >> Best
> > >> -pd
> > >>
> > >>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org
> >
> > wrote:
> > >>>
> > >>> To be clear, this not an issue in the libraries nor R, the
> > certificates on the server were simply wrong. So, no, this has nothing to
> > do with R.
> > >>>
> > >>> Cheers,
> > >>> Simon
> > >>>
> > >>>
> > >>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <
> > henrik.bengtsson at gmail.com> wrote:
> > >>>>
> > >>>> Was this resolved upstream or is this something that R should/could
> > >>>> fix? If the latter, could this also go into the "emergency release"
> R
> > >>>> 4.0.2 that is scheduled for 2020-06-22?
> > >>>>
> > >>>> My $.02
> > >>>>
> > >>>> /Henrik
> > >>>>
> > >>>>
> > >>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <
> csardi.gabor at gmail.com>
> > wrote:
> > >>>>>
> > >>>>> Btw. it would be also possible to create a macOS R installer that
> > >>>>> embeds a static or dynamic libcurl with Secure Transport, instead
> of
> > >>>>> the Apple default LibreSSL.
> > >>>>>
> > >>>>> This might be too late for R 4.0.1, I don't know.
> > >>>>>
> > >>>>> Gabor
> > >>>>>
> > >>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <
> csardi.gabor at gmail.com>
> > wrote:
> > >>>>>>
> > >>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <
> > csardi.gabor at gmail.com> wrote:
> > >>>>>> [...]
> > >>>>>>> Btw. why does this affect openssl? That root cert was published
> in
> > >>>>>>> 2010, surely openssl should know about it? Maybe libcurl /
> openssl
> > >>>>>>> only uses the chain provided by the server? Without trying to use
> > an
> > >>>>>>> alternate chain?
> > >>>>>>
> > >>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
> > >>>>>> alternative certificate chains. This has been fixed in OpenSSL in
> > >>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
> > >>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
> > >>>>>> https://github.com/libressl-portable/portable/issues/595
> > >>>>>>
> > >>>>>> r-project.org can be updated to send the new root certificate,
> > which
> > >>>>>> will solve most of our problems, but we'll probably have issues
> with
> > >>>>>> other web sites that'll update slower or never.
> > >>>>>>
> > >>>>>> FWIW I built macOS binaries for the curl package, using a static
> > >>>>>> libcurl and macOS Secure Transport, so these binaries does not
> have
> > >>>>>> this issue.
> > >>>>>>
> > >>>>>> They are at https://files.r-hub.io/curl-macos-static and they can
> > be
> > >>>>>> installed with
> > >>>>>> install.packages("curl", repos =
> > >>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
> > >>>>>>
> > >>>>>> They support R 3.2 and up, including R 4.1, and should work on all
> > >>>>>> macOS versions that the given R release supports.
> > >>>>>>
> > >>>>>> Gabor
> > >>>>>
> > >>>>> ______________________________________________
> > >>>>> R-devel at r-project.org mailing list
> > >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>>>
> > >>>> ______________________________________________
> > >>>> R-devel at r-project.org mailing list
> > >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>>>
> > >>>
> > >>> ______________________________________________
> > >>> R-devel at r-project.org mailing list
> > >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>
> > >> --
> > >> Peter Dalgaard, Professor,
> > >> Center for Statistics, Copenhagen Business School
> > >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > >> Phone: (+45)38153501
> > >> Office: A 4.23
> > >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> > >>
> > >>
> > >>
> > >>
> > >>
> > >>
> > >>
> > >>
> > >>
> > >
> >
> > --
> > Peter Dalgaard, Professor,
> > Center for Statistics, Copenhagen Business School
> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > Phone: (+45)38153501
> > Office: A 4.23
> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bob @end|ng |rom rud@|@  Wed Aug 19 20:34:01 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Wed, 19 Aug 2020 14:34:01 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CALK03d2SF20PZcJS7uMkJoTtSjzG-hfb4g-+DCv4VAJCiH+Mcw@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
 <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
 <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>
 <CABtg=K=AQ328qD33WObYQ_DbvZWBcQcP5Zf-A8z10o+=yLVR5Q@mail.gmail.com>
 <CALK03d2SF20PZcJS7uMkJoTtSjzG-hfb4g-+DCv4VAJCiH+Mcw@mail.gmail.com>
Message-ID: <FEF26BE3-D6C1-4E40-BAF4-5988FAACDA9D@rud.is>

Translation subdomain is also expired.

https://rud.is/r-project-cert-status/

> On Aug 19, 2020, at 13:35, Toby Hocking <tdhock5 at gmail.com> wrote:
> 
> Hi win-builder certificate expired on Aug 15. My student on the other side
> of the world is also seeing this problem so I think it needs to be fixed...
>> download.file("https://win-builder.r-project.org", "/tmp/wb.html")
> trying URL 'https://win-builder.r-project.org'
> Error in download.file("https://win-builder.r-project.org", "/tmp/wb.html")
> :
>  cannot open URL 'https://win-builder.r-project.org'
> In addition: Warning message:
> In download.file("https://win-builder.r-project.org", "/tmp/wb.html") :
>  URL 'https://win-builder.r-project.org/': status was 'Peer certificate
> cannot be authenticated with given CA certificates'
>> 
> 
> On Wed, Jun 10, 2020 at 2:40 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
>> My (also not expert) understanding is that there is nothing insecure about
>> alternative certificate chains at all. All browsers and macOS's built in
>> SSL library (secure transport) support them properly. OpenSSL and LibreSSL
>> were/are simply broken. This was not such a big issue so far, but now that
>> some old long lived certificates are expiring, it is increasingly an issue.
>> 
>> FWIW it is possible to build libcurl on macOS without any external SSL
>> library, so OpenSSL and LibreSSL are not needed at all. (Unfortunately the
>> libcurl build that comes with most (all?) macOS versions does use
>> LibreSSL.) The R installer could link to such a static libcurl library on
>> macOS, and that would solve the issue for macOS. Whether it should, that's
>> another question.
>> 
>> Gabor
>> 
>> On Wed, Jun 10, 2020 at 9:56 AM peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>>> As I said, there is stuff that I don't understand in here.... (including
>>> why browsers apparently do trust alternative chains)
>>> 
>>> -pd
>>> 
>>>> On 10 Jun 2020, at 01:53 , Simon Urbanek <simon.urbanek at R-project.org>
>>> wrote:
>>>> 
>>>> You are making a very strong assumption that finding an alternative
>>> chain of trust is safe. I'd argue it's not - it means that an adversary
>>> could manipulate the chain in a way to trust it instead of the declared
>>> chain and thus subverting it. In fact switching to OpenSSL would create a
>>> serious security hole here - in particular since it installs a separate
>>> trust store which it is far more easily attacked and subverted. By your
>>> argument we should disable all SSL checks as that produces error with
>>> incorrectly configured servers so not performing checks is better. It is
>>> true that R is likely not used for sensitive transactions, but I would
>>> rather it warned me about situations where the communication may be
>>> compromised instead of just silently going along.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> 
>>>> 
>>>>> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com>
>> wrote:
>>>>> 
>>>>> Yes and no... At least as I understand it (Disclaimer: There are
>> things
>>> I am pretty sure that I don't understand properly, somewhere in the
>> Bermuda
>>> triangle beween CA bundles, TLS protocols, and Server-side settings),
>> there
>>> are two sided to this:
>>>>> 
>>>>> One is that various *.r-project.org servers got hit by a fumble where
>>> a higher-up certificate in the chain of trust expired before the *.
>>> r-project.org one. This was fixed by changing the certificate chain on
>>> each server.
>>>>> 
>>>>> The other side is that this situation hit Mac users harder than
>> others,
>>> because Apple's LibreSSL doesn't have the same feature that openSSL has
>> to
>>> detect a secondary chain of trust when the primary one expired. This was
>>> not unique to R - svn also failed from the command line - but it did
>> affect
>>> download.file() inside R.
>>>>> 
>>>>> The upshot is that there might be 3rd party servers with a similar
>>> certificate setup which have not been updated like *.r-project.org. This
>>> is not too unlikely since web browsers do not have trouble accessing
>> them,
>>> and the whole matter may go undetected. For such servers, download.file()
>>> would still fail.
>>>>> 
>>>>> I.e., there is a case to be made that we might want to link openSSL
>>> rather than LibreSSL.  On the other hand, I gather that newer versions of
>>> LibreSSL contain the relevant protocol upgrade, so maybe one can just
>> wait
>>> for Apple to update it. Or maybe we do want to link R against openSSL,
>> but
>>> almost certainly not for a hotfix release.
>>>>> 
>>>>> Best
>>>>> -pd
>>>>> 
>>>>>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org
>>> 
>>> wrote:
>>>>>> 
>>>>>> To be clear, this not an issue in the libraries nor R, the
>>> certificates on the server were simply wrong. So, no, this has nothing to
>>> do with R.
>>>>>> 
>>>>>> Cheers,
>>>>>> Simon
>>>>>> 
>>>>>> 
>>>>>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <
>>> henrik.bengtsson at gmail.com> wrote:
>>>>>>> 
>>>>>>> Was this resolved upstream or is this something that R should/could
>>>>>>> fix? If the latter, could this also go into the "emergency release"
>> R
>>>>>>> 4.0.2 that is scheduled for 2020-06-22?
>>>>>>> 
>>>>>>> My $.02
>>>>>>> 
>>>>>>> /Henrik
>>>>>>> 
>>>>>>> 
>>>>>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <
>> csardi.gabor at gmail.com>
>>> wrote:
>>>>>>>> 
>>>>>>>> Btw. it would be also possible to create a macOS R installer that
>>>>>>>> embeds a static or dynamic libcurl with Secure Transport, instead
>> of
>>>>>>>> the Apple default LibreSSL.
>>>>>>>> 
>>>>>>>> This might be too late for R 4.0.1, I don't know.
>>>>>>>> 
>>>>>>>> Gabor
>>>>>>>> 
>>>>>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <
>> csardi.gabor at gmail.com>
>>> wrote:
>>>>>>>>> 
>>>>>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <
>>> csardi.gabor at gmail.com> wrote:
>>>>>>>>> [...]
>>>>>>>>>> Btw. why does this affect openssl? That root cert was published
>> in
>>>>>>>>>> 2010, surely openssl should know about it? Maybe libcurl /
>> openssl
>>>>>>>>>> only uses the chain provided by the server? Without trying to use
>>> an
>>>>>>>>>> alternate chain?
>>>>>>>>> 
>>>>>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>>>>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>>>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>>>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>>>>>>> https://github.com/libressl-portable/portable/issues/595
>>>>>>>>> 
>>>>>>>>> r-project.org can be updated to send the new root certificate,
>>> which
>>>>>>>>> will solve most of our problems, but we'll probably have issues
>> with
>>>>>>>>> other web sites that'll update slower or never.
>>>>>>>>> 
>>>>>>>>> FWIW I built macOS binaries for the curl package, using a static
>>>>>>>>> libcurl and macOS Secure Transport, so these binaries does not
>> have
>>>>>>>>> this issue.
>>>>>>>>> 
>>>>>>>>> They are at https://files.r-hub.io/curl-macos-static and they can
>>> be
>>>>>>>>> installed with
>>>>>>>>> install.packages("curl", repos =
>>>>>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>>>>>>> 
>>>>>>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>>>>>>> macOS versions that the given R release supports.
>>>>>>>>> 
>>>>>>>>> Gabor
>>>>>>>> 
>>>>>>>> ______________________________________________
>>>>>>>> R-devel at r-project.org mailing list
>>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>> 
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>>> --
>>>>> Peter Dalgaard, Professor,
>>>>> Center for Statistics, Copenhagen Business School
>>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>> Phone: (+45)38153501
>>>>> Office: A 4.23
>>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>> 
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Aug 19 22:37:26 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 19 Aug 2020 16:37:26 -0400
Subject: [Rd] Stale link from ?check to R Internals
In-Reply-To: <CALK03d2HtehGe_8AmgzWe5DpoxG+4J8-HDF8MSR5fekmx2y16g@mail.gmail.com>
References: <CALK03d2HtehGe_8AmgzWe5DpoxG+4J8-HDF8MSR5fekmx2y16g@mail.gmail.com>
Message-ID: <99c5632a-8bb3-7b84-624d-b35c57a9af7e@gmail.com>

On 19/08/2020 12:26 p.m., Toby Hocking wrote:
> Hi the reference to R Internals
> https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Tools
> in ?check (PkgUtils.Rd in utils package) is stale. Here is my proposed
> patch (use named reference rather than numeric reference to avoid any
> similar broken links in the future).

Just to be clear:  you're giving the current URL, the problem is it's 
called "Chapter 6".

Duncan Murdoch

> 
> Index: src/library/utils/man/PkgUtils.Rd
> ===================================================================
> --- src/library/utils/man/PkgUtils.Rd (revision 79049)
> +++ src/library/utils/man/PkgUtils.Rd (working copy)
> @@ -40,7 +40,7 @@
>     set by environment variables \env{_R_BUILD_RESAVE_DATA_} and
>     \env{_R_BUILD_COMPACT_VIGNETTES_}: see \sQuote{Writing \R Extensions}.
>     Many of the checks in \command{R CMD check} can be turned off or on by
> -  environment variables: see Chapter 6 of the \sQuote{R Internals} manual.
> +  environment variables: see Chapter "Tools" of the \sQuote{R Internals}
> manual.
> 
>     By default \command{R CMD build} uses the \code{"internal"} option to
>     \code{\link{tar}} to prepare the tarball.  An external \command{tar}
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @nto|ne@|@br| @end|ng |rom gm@||@com  Thu Aug 20 00:40:28 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Thu, 20 Aug 2020 00:40:28 +0200
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
Message-ID: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>

Dear R-devel,

utils::isS3stdGeneric tries to subset the body of the function it's fed,
primitives don't like that because they don't have a body, identity doesn't
like it either because it's body is a symbol.

According to the doc, any function is a legal input.

See below:

identity
#> function (x)
#> x
#> <bytecode: 0x0000000013d6da28>
#> <environment: namespace:base>

max
#> function (..., na.rm = FALSE)  .Primitive("max")

isS3stdGeneric(identity)
#> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able

isS3stdGeneric(max)
#> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
bdexpr[[2L]]: l'argument est de longueur nulle

Here is a simple fix :

isS3stdGeneric <- function(f) {
  {
    bdexpr <- body(f)
    if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
    while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
    ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name("UseMethod"))
    if (ret)
      names(ret) <- bdexpr[[2L]]
    ret
  }
}

isS3stdGeneric(identity)
#> [1] FALSE
isS3stdGeneric(max)
#> [1] FALSE

Best,

Antoine

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Thu Aug 20 03:34:51 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 19 Aug 2020 18:34:51 -0700
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
In-Reply-To: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
References: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
Message-ID: <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>

I added that so I can look at the proposed fix and put it or something
similar in bugzilla for review final review.

Apologies for the oversight.

~G

On Wed, Aug 19, 2020 at 3:40 PM Antoine Fabri <antoine.fabri at gmail.com>
wrote:

> Dear R-devel,
>
> utils::isS3stdGeneric tries to subset the body of the function it's fed,
> primitives don't like that because they don't have a body, identity doesn't
> like it either because it's body is a symbol.
>
> According to the doc, any function is a legal input.
>
> See below:
>
> identity
> #> function (x)
> #> x
> #> <bytecode: 0x0000000013d6da28>
> #> <environment: namespace:base>
>
> max
> #> function (..., na.rm = FALSE)  .Primitive("max")
>
> isS3stdGeneric(identity)
> #> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able
>
> isS3stdGeneric(max)
> #> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
> bdexpr[[2L]]: l'argument est de longueur nulle
>
> Here is a simple fix :
>
> isS3stdGeneric <- function(f) {
>   {
>     bdexpr <- body(f)
>     if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
>     while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
>     ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name
> ("UseMethod"))
>     if (ret)
>       names(ret) <- bdexpr[[2L]]
>     ret
>   }
> }
>
> isS3stdGeneric(identity)
> #> [1] FALSE
> isS3stdGeneric(max)
> #> [1] FALSE
>
> Best,
>
> Antoine
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Aug 20 09:51:53 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 20 Aug 2020 09:51:53 +0200
Subject: [Rd] Stale link from ?check to R Internals
In-Reply-To: <99c5632a-8bb3-7b84-624d-b35c57a9af7e@gmail.com>
References: <CALK03d2HtehGe_8AmgzWe5DpoxG+4J8-HDF8MSR5fekmx2y16g@mail.gmail.com>
 <99c5632a-8bb3-7b84-624d-b35c57a9af7e@gmail.com>
Message-ID: <24382.11161.478143.522731@hornik.net>

>>>>> Duncan Murdoch writes:

> On 19/08/2020 12:26 p.m., Toby Hocking wrote:
>> Hi the reference to R Internals
>> https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Tools
>> in ?check (PkgUtils.Rd in utils package) is stale. Here is my proposed
>> patch (use named reference rather than numeric reference to avoid any
>> similar broken links in the future).

> Just to be clear:  you're giving the current URL, the problem is it's 
> called "Chapter 6".

Fixed now.

Best
-k

> Duncan Murdoch

>> 
>> Index: src/library/utils/man/PkgUtils.Rd
>> ===================================================================
>> --- src/library/utils/man/PkgUtils.Rd (revision 79049)
>> +++ src/library/utils/man/PkgUtils.Rd (working copy)
>> @@ -40,7 +40,7 @@
>> set by environment variables \env{_R_BUILD_RESAVE_DATA_} and
>> \env{_R_BUILD_COMPACT_VIGNETTES_}: see \sQuote{Writing \R Extensions}.
>> Many of the checks in \command{R CMD check} can be turned off or on by
>> -  environment variables: see Chapter 6 of the \sQuote{R Internals} manual.
>> +  environment variables: see Chapter "Tools" of the \sQuote{R Internals}
>> manual.
>> 
>> By default \command{R CMD build} uses the \code{"internal"} option to
>> \code{\link{tar}} to prepare the tarball.  An external \command{tar}
>> 
>> [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Aug 20 09:58:16 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 20 Aug 2020 09:58:16 +0200
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
In-Reply-To: <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>
References: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
 <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>
Message-ID: <24382.11544.133799.767814@hornik.net>

>>>>> Gabriel Becker writes:

> I added that so I can look at the proposed fix and put it or something
> similar in bugzilla for review final review.

> Apologies for the oversight.

Fixed now with

-    while(as.character(bdexpr[[1L]]) == "{")
+    while(is.call(bdexpr) && (as.character(bdexpr[[1L]]) == "{"))

(the suggested fix does not work on things like
foo <- function(x) {{ x }} 
...)

Best
-k

> ~G

> On Wed, Aug 19, 2020 at 3:40 PM Antoine Fabri <antoine.fabri at gmail.com>
> wrote:

>> Dear R-devel,
>> 
>> utils::isS3stdGeneric tries to subset the body of the function it's fed,
>> primitives don't like that because they don't have a body, identity doesn't
>> like it either because it's body is a symbol.
>> 
>> According to the doc, any function is a legal input.
>> 
>> See below:
>> 
>> identity
>> #> function (x)
>> #> x
>> #> <bytecode: 0x0000000013d6da28>
>> #> <environment: namespace:base>
>> 
>> max
>> #> function (..., na.rm = FALSE)  .Primitive("max")
>> 
>> isS3stdGeneric(identity)
>> #> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able
>> 
>> isS3stdGeneric(max)
>> #> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
>> bdexpr[[2L]]: l'argument est de longueur nulle
>> 
>> Here is a simple fix :
>> 
>> isS3stdGeneric <- function(f) {
>> {
>> bdexpr <- body(f)
>> if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
>> while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
>> ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name
>> ("UseMethod"))
>> if (ret)
>> names(ret) <- bdexpr[[2L]]
>> ret
>> }
>> }
>> 
>> isS3stdGeneric(identity)
>> #> [1] FALSE
>> isS3stdGeneric(max)
>> #> [1] FALSE
>> 
>> Best,
>> 
>> Antoine
>> 
>> [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Aug 20 22:27:53 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 20 Aug 2020 22:27:53 +0200
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <CANk-X-31zDWV-dKsknHvkh3rNZkpaq=1LyQ93G48bX2vUDh=VQ@mail.gmail.com>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
 <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
 <CANk-X-31zDWV-dKsknHvkh3rNZkpaq=1LyQ93G48bX2vUDh=VQ@mail.gmail.com>
Message-ID: <24382.56521.630017.702663@stat.math.ethz.ch>

>>>>> Constantin Ahlmann-Eltze via R-devel 
>>>>>     on Mon, 10 Aug 2020 10:05:36 +0200 writes:

    > Thanks Ben for verifying the issue. It is always reassuring to hear
    > when others can reproduce the problem.

    > I wrote a small patch that fixes the issue
    > (https://github.com/r-devel/r-svn/pull/11):

    > diff --git a/src/nmath/qnbinom.c b/src/nmath/qnbinom.c
    > index b313ce56b2..d2e8d98759 100644
    > --- a/src/nmath/qnbinom.c
    > +++ b/src/nmath/qnbinom.c
    > @@ -104,6 +104,7 @@ double qnbinom(double p, double size, double prob,
    > int lower_tail, int log_p)
    > /* y := approx.value (Cornish-Fisher expansion) :  */
    > z = qnorm(p, 0., 1., /*lower_tail*/TRUE, /*log_p*/FALSE);
    > y = R_forceint(mu + sigma * (z + gamma * (z*z - 1) / 6));
    > +    y = fmax2(0.0, y);

    > z = pnbinom(y, size, prob, /*lower_tail*/TRUE, /*log_p*/FALSE);

    > I used the https://github.com/r-devel/r-svn repo and its continuous
    > integration tools to check that it doesn't break any existing tests:
    > https://github.com/r-devel/r-svn/actions/runs/201327042

    > I have also requested a Bugzilla-account, but haven't heard anything back yet.

    > Best,
    > Constantin

Thank you for the report, and Ben for his experiment.

And, indeed in this case, this returns  0  much more  quickly.

Note that this could be even much more quickly: The
Cornish-Fisher expansion is not really of much use here, ...
and quick check would just see that pnbinom(0, size, prob) > 

Note however, that in other cases, results for  small 'size'
are *still* not good  (and *not* influenced by your patch !!),
e.g.,

## Other examples, not giving 0, are fast already but  *in*accurate:
qnbinom(.9999, mu=3, size=1e-4)
## [1] 8044

## but
str(ur1 <- uniroot(function(q) pnbinom(q, mu=3, size=1e-4) - 0.9999, c(7000,8000)))
## List of 5
##  $ root      : num 7942
##  $ f.root    : num 1.52e-09
##  $ iter      : int 18
##  $ init.it   : int NA
##  $ estim.prec: num 6.49e-05

## and this of course does not change when asking for more precision :

str(ur2 <- uniroot(function(q) pnbinom(q, mu=3, size=1e-4) - 0.9999, c(7000,8000), tol=1e-12))
## List of 5
##  $ root      : num 7942  <<< correct is 7942, not 8044 !!!
##  $ f.root    : num 1.52e-09
##  $ iter      : int 47
##  $ init.it   : int NA
##  $ estim.prec: num 7.28e-12

----------

so, in principle the C-internal  search() function really should be
improved for such  ( somewhat extreme!! )  cases.
or ... ?? ... a different approximation should be used for such
extreme small 'size' (and  prob := size/(size+mu)  ) ...

Martin Maechler
ETH Zurich   and  R Core team


From @rtjom31415 @end|ng |rom goog|em@||@com  Fri Aug 21 11:51:13 2020
From: @rtjom31415 @end|ng |rom goog|em@||@com (Constantin Ahlmann-Eltze)
Date: Fri, 21 Aug 2020 11:51:13 +0200
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <24382.56521.630017.702663@stat.math.ethz.ch>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
 <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
 <CANk-X-31zDWV-dKsknHvkh3rNZkpaq=1LyQ93G48bX2vUDh=VQ@mail.gmail.com>
 <24382.56521.630017.702663@stat.math.ethz.ch>
Message-ID: <CANk-X-36+0y50VgZ++WiMupDcUeEBKcEqCefaJG6zpsWE1K-uQ@mail.gmail.com>

Hi Martin,

thanks for verifying. I agree that the Cornish-Fisher seems to struggle
with the small size parameters, but I also don't have a good idea how to
replace it.

But I think fixing do_search() is possible:

I think the problem is that when searching to the left y is decremented
only if `pnbinom(y - incr, n, pr, /*l._t.*/TRUE, /*log_p*/FALSE)) < p` is
FALSE. I think the solution is to move the update of y before the if.
However, I need to make this slightly awkward check if incr == 1, so that
the return in line 123 and the do-while block at the end of qnbinom() do
not need to be modified.

diff --git a/src/nmath/qnbinom.c b/src/nmath/qnbinom.c
index b313ce56b2..16845d9373 100644
--- a/src/nmath/qnbinom.c
+++ b/src/nmath/qnbinom.c
@@ -49,10 +49,18 @@ do_search(double y, double *z, double p, double n,
double pr, double incr)
 {
     if(*z >= p) {	/* search to the left */
 	for(;;) {
+        y = fmax2(0, y - incr);
 	    if(y == 0 ||
-	       (*z = pnbinom(y - incr, n, pr, /*l._t.*/TRUE, /*log_p*/FALSE)) < p)
-		return y;
-	    y = fmax2(0, y - incr);
+	       (*z = pnbinom(y, n, pr, /*l._t.*/TRUE, /*log_p*/FALSE)) < p){
+            if(incr == 1){
+                // we know that the search is stopped if incr == 1
+                // and we know that the correct result is just right
+                // of the current y
+                return y + 1;
+            }else{
+                return y;
+            }
+        }
 	}
     }
     else {		/* search to the right */


With this patch, we get the expected result

> qnbinom(0.9999, mu = 3, size = 1e-4)
[1] 7942

I have updated the pull request at https://github.com/r-devel/r-svn/pull/11
and it is currently checking if the change breaks anything.

Best,
Constantin


Am 20.08.20 um 22:27 schrieb Martin Maechler:

Constantin Ahlmann-Eltze via R-devel
    on Mon, 10 Aug 2020 10:05:36 +0200 writes:

    > Thanks Ben for verifying the issue. It is always reassuring to hear
    > when others can reproduce the problem.

    > I wrote a small patch that fixes the issue
    > (https://github.com/r-devel/r-svn/pull/11):

    > diff --git a/src/nmath/qnbinom.c b/src/nmath/qnbinom.c
    > index b313ce56b2..d2e8d98759 100644
    > --- a/src/nmath/qnbinom.c
    > +++ b/src/nmath/qnbinom.c
    > @@ -104,6 +104,7 @@ double qnbinom(double p, double size, double prob,
    > int lower_tail, int log_p)
    > /* y := approx.value (Cornish-Fisher expansion) :  */
    > z = qnorm(p, 0., 1., /*lower_tail*/TRUE, /*log_p*/FALSE);
    > y = R_forceint(mu + sigma * (z + gamma * (z*z - 1) / 6));
    > +    y = fmax2(0.0, y);

    > z = pnbinom(y, size, prob, /*lower_tail*/TRUE, /*log_p*/FALSE);

    > I used the https://github.com/r-devel/r-svn repo and its continuous
    > integration tools to check that it doesn't break any existing tests:
    > https://github.com/r-devel/r-svn/actions/runs/201327042

    > I have also requested a Bugzilla-account, but haven't heard
anything back yet.

    > Best,
    > Constantin

Thank you for the report, and Ben for his experiment.

And, indeed in this case, this returns  0  much more  quickly.

Note that this could be even much more quickly: The
Cornish-Fisher expansion is not really of much use here, ...
and quick check would just see that pnbinom(0, size, prob) >

Note however, that in other cases, results for  small 'size'
are *still* not good  (and *not* influenced by your patch !!),
e.g.,

## Other examples, not giving 0, are fast already but  *in*accurate:
qnbinom(.9999, mu=3, size=1e-4)
## [1] 8044

## but
str(ur1 <- uniroot(function(q) pnbinom(q, mu=3, size=1e-4) - 0.9999,
c(7000,8000)))
## List of 5
##  $ root      : num 7942
##  $ f.root    : num 1.52e-09
##  $ iter      : int 18
##  $ init.it   : int NA
##  $ estim.prec: num 6.49e-05

## and this of course does not change when asking for more precision :

str(ur2 <- uniroot(function(q) pnbinom(q, mu=3, size=1e-4) - 0.9999,
c(7000,8000), tol=1e-12))
## List of 5
##  $ root      : num 7942  <<< correct is 7942, not 8044 !!!
##  $ f.root    : num 1.52e-09
##  $ iter      : int 47
##  $ init.it   : int NA
##  $ estim.prec: num 7.28e-12

----------

so, in principle the C-internal  search() function really should be
improved for such  ( somewhat extreme!! )  cases.
or ... ?? ... a different approximation should be used for such
extreme small 'size' (and  prob := size/(size+mu)  ) ...

Martin Maechler
ETH Zurich   and  R Core team

	[[alternative HTML version deleted]]


From m1388m+moe1ydy@0hbs m@iii@g oii guerriii@m@ii@com  Fri Aug 21 14:34:36 2020
From: m1388m+moe1ydy@0hbs m@iii@g oii guerriii@m@ii@com (m1388m+moe1ydy@0hbs m@iii@g oii guerriii@m@ii@com)
Date: Fri, 21 Aug 2020 12:34:36 +0000
Subject: [Rd] R 4.0.2 64-bit Windows hangs
Message-ID: <10eed4ac700af41267a379ef1b793a8b1c30@guerrillamail.com>

I am having exactly the same issue as the following bug report: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.

RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit RTerm.exe runs fine.

No errors are displayed, but I see the same as the bug report in Event Viewer.

I am running Windows 10 64-bit, v2010.





----
Sent using Guerrillamail.com
Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX



From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Aug 21 17:58:37 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 21 Aug 2020 17:58:37 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <10eed4ac700af41267a379ef1b793a8b1c30@guerrillamail.com>
References: <10eed4ac700af41267a379ef1b793a8b1c30@guerrillamail.com>
Message-ID: <3c42efeb-1dbb-6cc9-e3f6-2baf78aaf3ac@gmail.com>

On 8/21/20 2:34 PM, m1388m+moe1ydyn0hbs--- via R-devel wrote:
> I am having exactly the same issue as the following bug report: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
>
> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit RTerm.exe runs fine.
>
> No errors are displayed, but I see the same as the bug report in Event Viewer.
>
> I am running Windows 10 64-bit, v2010.

Thanks for the report, but please try to provide more information and 
diagnose a bit of the problem on your own - this is a very rare problem, 
many people use R on Windows 10, the 64-bit version. There must be 
something special about your installation, your operating system, etc 
and unless someone finds out what it is, the issue can't be fixed. You 
will see that if you install a clean version of stock Windows 10 in a 
virtual machine and install R 4.0.2 or R-devel from the CRAN installer, 
it will work.

PR16515 was for a much older version of R, for a different version of 
Windows, with detailed info of what was happening. Still, without any 
clue why, and as nobody who could find out why could reproduce, it is 
still open.

Thanks
Tomas

>
>
>
>
>
> ----
> Sent using Guerrillamail.com
> Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m15g9g+1dq20iw4vyh1s m@iii@g oii guerriii@m@ii@com  Fri Aug 21 18:53:07 2020
From: m15g9g+1dq20iw4vyh1s m@iii@g oii guerriii@m@ii@com (m15g9g+1dq20iw4vyh1s m@iii@g oii guerriii@m@ii@com)
Date: Fri, 21 Aug 2020 16:53:07 +0000
Subject: [Rd] R 4.0.2 64-bit Windows hangs
Message-ID: <93d4a93772fa7dd07802f459bafd82e17e96@guerrillamail.com>

Thanks for the response. Having spent a lot of the day trying to solve this, as R is essential for my workflow, I've tried to debug via the binary only as I haven't yet got the toolchain working - I'm quite inexperienced at this.

I've confirmed the problem is exactly as described in the initial (albeit old) bug report. The exception that's thrown within Visual Studio is:

"Exception thrown at 0x00007FFBF1E3C0C8 (ntdll.dll) in Rterm.exe: 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF."

As the problem appears to be persistent and cross many versions of Windows, could it hint towards this being a problem within R's codebase rather than my specific setup?

I understand that this is hard to reproduce, however, and I'll doing my best at trying to compile/debug from source if there are no obvious answers.


On 2020-08-21 15:59:49 tomas.kalibera at gmail.com wrote:
> On 8/21/20 2:34 PM, m1388m+moe1ydyn0hbs--- via R-devel wrote:
> > I am having exactly the same issue as the following bug report:
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
> >
> > RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
> RTerm.exe runs fine.
> >
> > No errors are displayed, but I see the same as the bug report in Event
> Viewer.
> >
> > I am running Windows 10 64-bit, v2010.
> 
> Thanks for the report, but please try to provide more information and 
> diagnose a bit of the problem on your own - this is a very rare problem, 
> many people use R on Windows 10, the 64-bit version. There must be 
> something special about your installation, your operating system, etc 
> and unless someone finds out what it is, the issue can't be fixed. You 
> will see that if you install a clean version of stock Windows 10 in a 
> virtual machine and install R 4.0.2 or R-devel from the CRAN installer, 
> it will work.
> 
> PR16515 was for a much older version of R, for a different version of 
> Windows, with detailed info of what was happening. Still, without any 
> clue why, and as nobody who could find out why could reproduce, it is 
> still open.
> 
> Thanks
> Tomas
> 
> >
> >
> >
> >
> >
> > ----
> > Sent using Guerrillamail.com
> > Block or report abuse:
> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel





----
Sent using Guerrillamail.com
Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX



From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Aug 21 20:24:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 21 Aug 2020 14:24:40 -0400
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <93d4a93772fa7dd07802f459bafd82e17e96@guerrillamail.com>
References: <93d4a93772fa7dd07802f459bafd82e17e96@guerrillamail.com>
Message-ID: <17d90edb-f67e-aca7-9fcc-05dc8366a02b@gmail.com>

Are you normally running from Visual Studio, or only when trying to 
debug?  Where did you download R from, and which version?  The bug 
report mentions Registry key

HKCU\Software\Microsoft\InteliPoint\AppSpecific\Rgui.exe

which I believe is installed by the Microsoft R Client rather than the 
CRAN distribution of R.

Duncan Murdoch

On 21/08/2020 12:53 p.m., m15g9g+1dq20lw4vyh1s--- via R-devel wrote:
> Thanks for the response. Having spent a lot of the day trying to solve this, as R is essential for my workflow, I've tried to debug via the binary only as I haven't yet got the toolchain working - I'm quite inexperienced at this.
> 
> I've confirmed the problem is exactly as described in the initial (albeit old) bug report. The exception that's thrown within Visual Studio is:
> 
> "Exception thrown at 0x00007FFBF1E3C0C8 (ntdll.dll) in Rterm.exe: 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF."
> 
> As the problem appears to be persistent and cross many versions of Windows, could it hint towards this being a problem within R's codebase rather than my specific setup?
> 
> I understand that this is hard to reproduce, however, and I'll doing my best at trying to compile/debug from source if there are no obvious answers.
> 
> 
> On 2020-08-21 15:59:49 tomas.kalibera at gmail.com wrote:
>> On 8/21/20 2:34 PM, m1388m+moe1ydyn0hbs--- via R-devel wrote:
>>> I am having exactly the same issue as the following bug report:
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
>>>
>>> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
>> RTerm.exe runs fine.
>>>
>>> No errors are displayed, but I see the same as the bug report in Event
>> Viewer.
>>>
>>> I am running Windows 10 64-bit, v2010.
>>
>> Thanks for the report, but please try to provide more information and
>> diagnose a bit of the problem on your own - this is a very rare problem,
>> many people use R on Windows 10, the 64-bit version. There must be
>> something special about your installation, your operating system, etc
>> and unless someone finds out what it is, the issue can't be fixed. You
>> will see that if you install a clean version of stock Windows 10 in a
>> virtual machine and install R 4.0.2 or R-devel from the CRAN installer,
>> it will work.
>>
>> PR16515 was for a much older version of R, for a different version of
>> Windows, with detailed info of what was happening. Still, without any
>> clue why, and as nobody who could find out why could reproduce, it is
>> still open.
>>
>> Thanks
>> Tomas
>>
>>>
>>>
>>>
>>>
>>>
>>> ----
>>> Sent using Guerrillamail.com
>>> Block or report abuse:
>> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> 
> 
> ----
> Sent using Guerrillamail.com
> Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m17hpj+bt626qpx8w70w m@iii@g oii guerriii@m@ii@com  Fri Aug 21 20:57:40 2020
From: m17hpj+bt626qpx8w70w m@iii@g oii guerriii@m@ii@com (m17hpj+bt626qpx8w70w m@iii@g oii guerriii@m@ii@com)
Date: Fri, 21 Aug 2020 18:57:40 +0000
Subject: [Rd] R 4.0.2 64-bit Windows hangs
Message-ID: <44a06a5ef8c232ee4d8602db54910a0b6261@guerrillamail.com>

I'm only using Visual Studio to debug.

I'm using R version 4.0.2 from: https://cran.r-project.org/, and have tested the patched version. Even the x64 version of the previous version of R (3.6) does not run.

I have previously had Microsoft R Open installed on the machine, but it's been uninstalled.

Thanks.

On 2020-08-21 18:48:42 murdoch.duncan at gmail.com wrote:
> Are you normally running from Visual Studio, or only when trying to 
> debug?  Where did you download R from, and which version?  The bug 
> report mentions Registry key
> 
> HKCU\Software\Microsoft\InteliPoint\AppSpecific\Rgui.exe
> 
> which I believe is installed by the Microsoft R Client rather than the 
> CRAN distribution of R.
> 
> Duncan Murdoch
> 
> On 21/08/2020 12:53 p.m., m15g9g+1dq20lw4vyh1s--- via R-devel wrote:
> > Thanks for the response. Having spent a lot of the day trying to solve
> this, as R is essential for my workflow, I've tried to debug via the binary
> only as I haven't yet got the toolchain working - I'm quite inexperienced
> at this.
> > 
> > I've confirmed the problem is exactly as described in the initial (albeit
> old) bug report. The exception that's thrown within Visual Studio is:
> > 
> > "Exception thrown at 0x00007FFBF1E3C0C8 (ntdll.dll) in Rterm.exe:
> 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF."
> > 
> > As the problem appears to be persistent and cross many versions of
> Windows, could it hint towards this being a problem within R's codebase
> rather than my specific setup?
> > 
> > I understand that this is hard to reproduce, however, and I'll doing my
> best at trying to compile/debug from source if there are no obvious
> answers.
> > 
> > 
> > On 2020-08-21 15:59:49 tomas.kalibera at gmail.com wrote:
> >> On 8/21/20 2:34 PM, m1388m+moe1ydyn0hbs--- via R-devel wrote:
> >>> I am having exactly the same issue as the following bug report:
> >> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
> >>>
> >>> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
> >> RTerm.exe runs fine.
> >>>
> >>> No errors are displayed, but I see the same as the bug report in Event
> >> Viewer.
> >>>
> >>> I am running Windows 10 64-bit, v2010.
> >>
> >> Thanks for the report, but please try to provide more information and
> >> diagnose a bit of the problem on your own - this is a very rare problem,
> >> many people use R on Windows 10, the 64-bit version. There must be
> >> something special about your installation, your operating system, etc
> >> and unless someone finds out what it is, the issue can't be fixed. You
> >> will see that if you install a clean version of stock Windows 10 in a
> >> virtual machine and install R 4.0.2 or R-devel from the CRAN installer,
> >> it will work.
> >>
> >> PR16515 was for a much older version of R, for a different version of
> >> Windows, with detailed info of what was happening. Still, without any
> >> clue why, and as nobody who could find out why could reproduce, it is
> >> still open.
> >>
> >> Thanks
> >> Tomas
> >>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>> ----
> >>> Sent using Guerrillamail.com
> >>> Block or report abuse:
> >> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> >>>
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > 
> > 
> > 
> > 
> > ----
> > Sent using Guerrillamail.com
> > Block or report abuse:
> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> > 
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >





----
Sent using Guerrillamail.com
Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX



From m17hpj+bt626qpx8w70w m@iii@g oii guerriii@m@ii@com  Fri Aug 21 21:20:47 2020
From: m17hpj+bt626qpx8w70w m@iii@g oii guerriii@m@ii@com (m17hpj+bt626qpx8w70w m@iii@g oii guerriii@m@ii@com)
Date: Fri, 21 Aug 2020 19:20:47 +0000
Subject: [Rd] R 4.0.2 64-bit Windows hangs
Message-ID: <13b10267008364d012e3f746bf1c58723829@guerrillamail.com>

For some further information, on compiling with rtools, using the following scripts, https://github.com/r-windows/r-base, I receive a segfault:


installing 'sysdata.rda'
building package 'compiler'
byte-compiling package 'compiler'
byte-compiling package 'base'
byte-compiling package 'tools'
sh: line 3:  3614 Done                    ( cat ./R/makeLazyLoad.R; echo "makeLazyLoading(\"tools\")" )
      3615 Segmentation fault      | _R_COMPILE_PKGS_=1 R_COMPILER_SUPPRESS_ALL=1 R_DEFAULT_PACKAGES=NULL LC_ALL=C R_ENABLE_JIT=0 ../../../bin/x64/Rterm.exe --vanilla --no-echo > /dev/null
make[2]: *** [Makefile.win:34: ../../../library/tools/R/tools.rdb] Error 139
make[1]: *** [Makefile.win:33: R] Error 1
make: *** [Makefile:18: all] Error 2

It looks to have compiled its own Rterm.exe, and segfaults when running it?


On 2020-08-21 18:48:42 murdoch.duncan at gmail.com wrote:
> 
> On 21/08/2020 12:53 p.m., m15g9g+1dq20lw4vyh1s--- via R-devel wrote:
> > Thanks for the response. Having spent a lot of the day trying to solve
> this, as R is essential for my workflow, I've tried to debug via the binary
> only as I haven't yet got the toolchain working - I'm quite inexperienced
> at this.
> > 
> > I've confirmed the problem is exactly as described in the initial (albeit
> old) bug report. The exception that's thrown within Visual Studio is:
> > 
> > "Exception thrown at 0x00007FFBF1E3C0C8 (ntdll.dll) in Rterm.exe:
> 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF."
> > 
> > As the problem appears to be persistent and cross many versions of
> Windows, could it hint towards this being a problem within R's codebase
> rather than my specific setup?
> > 
> > I understand that this is hard to reproduce, however, and I'll doing my
> best at trying to compile/debug from source if there are no obvious
> answers.
> > 
> > 
> > On 2020-08-21 15:59:49 tomas.kalibera at gmail.com wrote:
> >> On 8/21/20 2:34 PM, m1388m+moe1ydyn0hbs--- via R-devel wrote:
> >>> I am having exactly the same issue as the following bug report:
> >> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
> >>>
> >>> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
> >> RTerm.exe runs fine.
> >>>
> >>> No errors are displayed, but I see the same as the bug report in Event
> >> Viewer.
> >>>
> >>> I am running Windows 10 64-bit, v2010.
> >>
> >> Thanks for the report, but please try to provide more information and
> >> diagnose a bit of the problem on your own - this is a very rare problem,
> >> many people use R on Windows 10, the 64-bit version. There must be
> >> something special about your installation, your operating system, etc
> >> and unless someone finds out what it is, the issue can't be fixed. You
> >> will see that if you install a clean version of stock Windows 10 in a
> >> virtual machine and install R 4.0.2 or R-devel from the CRAN installer,
> >> it will work.
> >>
> >> PR16515 was for a much older version of R, for a different version of
> >> Windows, with detailed info of what was happening. Still, without any
> >> clue why, and as nobody who could find out why could reproduce, it is
> >> still open.
> >>
> >> Thanks
> >> Tomas
> >>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>> ----
> >>> Sent using Guerrillamail.com
> >>> Block or report abuse:
> >> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> >>>
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > 
> > 
> > 
> > 
> > ----
> > Sent using Guerrillamail.com
> > Block or report abuse:
> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> > 
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel





----
Sent using Guerrillamail.com
Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX



From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Aug 21 22:37:49 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 21 Aug 2020 22:37:49 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <13b10267008364d012e3f746bf1c58723829@guerrillamail.com>
References: <13b10267008364d012e3f746bf1c58723829@guerrillamail.com>
Message-ID: <a40337d8-d3d9-a6c5-149f-a09e04b3e563@gmail.com>

On 8/21/20 9:20 PM, m17hpj+bt626qpx8w70w--- via R-devel wrote:
> For some further information, on compiling with rtools, using the following scripts, https://github.com/r-windows/r-base, I receive a segfault:
>
>
> installing 'sysdata.rda'
> building package 'compiler'
> byte-compiling package 'compiler'
> byte-compiling package 'base'
> byte-compiling package 'tools'
> sh: line 3:  3614 Done                    ( cat ./R/makeLazyLoad.R; echo "makeLazyLoading(\"tools\")" )
>        3615 Segmentation fault      | _R_COMPILE_PKGS_=1 R_COMPILER_SUPPRESS_ALL=1 R_DEFAULT_PACKAGES=NULL LC_ALL=C R_ENABLE_JIT=0 ../../../bin/x64/Rterm.exe --vanilla --no-echo > /dev/null
> make[2]: *** [Makefile.win:34: ../../../library/tools/R/tools.rdb] Error 139
> make[1]: *** [Makefile.win:33: R] Error 1
> make: *** [Makefile:18: all] Error 2
>
> It looks to have compiled its own Rterm.exe, and segfaults when running it?

You can try building with debug symbols, for simplicity even disabling 
optimization, and then running RTerm in a debugger and see where it is 
crashing. Maybe it is related to the problem you are seeing in the 
installed version of R.

Or, better from the other end, you could try to experiment with your 
system to find out which configuration may be impacting the problem. R 
is not doing anything special/custom linking to the system DLLs. You can 
check your PATH settings, make sure you run from cmd.exe (not Visual 
Studio, etc). You can start playing with the registry keys. Maybe there 
is some leftover from the Microsoft distribution of R (they have their 
own installer). Maybe there was some manual modification of registry 
keys by some external software, etc. You can read the sources to see 
which keys normally get set (src/gnuwin32/installer/*), or you can 
install into a fresh VM from the CRAN installer and check there.? 
Windows allow to set debugging flags on the dynamic loader (per binary - 
without recompilation), perhaps that might help too to identify why the 
wrong library is loaded (even though that tends to be verbose). It would 
be useful to know why it is happening, as you are not the first one who 
ran into a similar problem (the reporter of the bug did as well), but 
you are probably the only one who can find out.

Tomas

>
>
> On 2020-08-21 18:48:42 murdoch.duncan at gmail.com wrote:
>> On 21/08/2020 12:53 p.m., m15g9g+1dq20lw4vyh1s--- via R-devel wrote:
>>> Thanks for the response. Having spent a lot of the day trying to solve
>> this, as R is essential for my workflow, I've tried to debug via the binary
>> only as I haven't yet got the toolchain working - I'm quite inexperienced
>> at this.
>>> I've confirmed the problem is exactly as described in the initial (albeit
>> old) bug report. The exception that's thrown within Visual Studio is:
>>> "Exception thrown at 0x00007FFBF1E3C0C8 (ntdll.dll) in Rterm.exe:
>> 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF."
>>> As the problem appears to be persistent and cross many versions of
>> Windows, could it hint towards this being a problem within R's codebase
>> rather than my specific setup?
>>> I understand that this is hard to reproduce, however, and I'll doing my
>> best at trying to compile/debug from source if there are no obvious
>> answers.
>>>
>>> On 2020-08-21 15:59:49 tomas.kalibera at gmail.com wrote:
>>>> On 8/21/20 2:34 PM, m1388m+moe1ydyn0hbs--- via R-devel wrote:
>>>>> I am having exactly the same issue as the following bug report:
>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
>>>>> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
>>>> RTerm.exe runs fine.
>>>>> No errors are displayed, but I see the same as the bug report in Event
>>>> Viewer.
>>>>> I am running Windows 10 64-bit, v2010.
>>>> Thanks for the report, but please try to provide more information and
>>>> diagnose a bit of the problem on your own - this is a very rare problem,
>>>> many people use R on Windows 10, the 64-bit version. There must be
>>>> something special about your installation, your operating system, etc
>>>> and unless someone finds out what it is, the issue can't be fixed. You
>>>> will see that if you install a clean version of stock Windows 10 in a
>>>> virtual machine and install R 4.0.2 or R-devel from the CRAN installer,
>>>> it will work.
>>>>
>>>> PR16515 was for a much older version of R, for a different version of
>>>> Windows, with detailed info of what was happening. Still, without any
>>>> clue why, and as nobody who could find out why could reproduce, it is
>>>> still open.
>>>>
>>>> Thanks
>>>> Tomas
>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> ----
>>>>> Sent using Guerrillamail.com
>>>>> Block or report abuse:
>>>> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>
>>>
>>>
>>> ----
>>> Sent using Guerrillamail.com
>>> Block or report abuse:
>> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
>
> ----
> Sent using Guerrillamail.com
> Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @osp@m m@iii@g oii @itieid-im@de  Fri Aug 21 23:04:49 2020
From: @osp@m m@iii@g oii @itieid-im@de (@osp@m m@iii@g oii @itieid-im@de)
Date: Fri, 21 Aug 2020 23:04:49 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <10eed4ac700af41267a379ef1b793a8b1c30@guerrillamail.com>
References: <10eed4ac700af41267a379ef1b793a8b1c30@guerrillamail.com>
Message-ID: <a70b3280c97dae52533915254d0e09792966fa18.camel@altfeld-im.de>

May be unrelated but on SO there is a report that a Windows update may cause this problem:

https://stackoverflow.com/questions/63457321/r-will-not-run-after-latest-windows-10-updates/63524608#63524608



On Fri, 2020-08-21 at 12:34 +0000, m1388m+moe1ydyn0hbs--- via R-devel wrote:
> I am having exactly the same issue as the following bug report: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
> 
> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit RTerm.exe runs fine.
> 
> No errors are displayed, but I see the same as the bug report in Event Viewer.
> 
> I am running Windows 10 64-bit, v2010.
> 
> 
> 
> 
> 
> ----
> Sent using Guerrillamail.com
> Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m19td@+9@ixwj7d2bmk m@iii@g oii guerriii@m@ii@com  Fri Aug 21 23:45:31 2020
From: m19td@+9@ixwj7d2bmk m@iii@g oii guerriii@m@ii@com (m19td@+9@ixwj7d2bmk m@iii@g oii guerriii@m@ii@com)
Date: Fri, 21 Aug 2020 21:45:31 +0000
Subject: [Rd] R 4.0.2 64-bit Windows hangs
Message-ID: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>

Ah yes, this is related. I reported v2010 below, but it looks like I was updated to this Insider Build overnight without my knowledge, and conflated it with the new installation R v4 this morning.

I will continue to look into the issue with the methods Tomas mentioned.

Many thanks.

On 2020-08-21 21:05:51 nospam at altfeld-im.de wrote:
> May be unrelated but on SO there is a report that a Windows update may
> cause this problem:
> 
> https://stackoverflow.com/questions/63457321/r-will-not-run-after-latest-windows-10-updates/63524608#63524608
> 
> 
> 
> On Fri, 2020-08-21 at 12:34 +0000, m1388m+moe1ydyn0hbs--- via R-devel
> wrote:
> > I am having exactly the same issue as the following bug report:
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
> > 
> > RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
> RTerm.exe runs fine.
> > 
> > No errors are displayed, but I see the same as the bug report in Event
> Viewer.
> > 
> > I am running Windows 10 64-bit, v2010.
> > 
> > 
> > 
> > 
> > 
> > ----
> > Sent using Guerrillamail.com
> > Block or report abuse:
> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
> > 
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel





----
Sent using Guerrillamail.com
Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX



From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sat Aug 22 08:39:24 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sat, 22 Aug 2020 08:39:24 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
Message-ID: <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>

On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
> Ah yes, this is related. I reported v2010 below, but it looks like I was updated to this Insider Build overnight without my knowledge, and conflated it with the new installation R v4 this morning.
>
> I will continue to look into the issue with the methods Tomas mentioned.

It is interesting that a rare 5 years old problem would re-appear on 
current Insider builds. Which build of Windows are you running exactly? 
I've seen another report about a crash on 20190.1000. It'd be nice to 
know if it is present also in newer builds, i.e. in 20197.

Thanks
Tomas


>
> Many thanks.
>
> On 2020-08-21 21:05:51 nospam at altfeld-im.de wrote:
>> May be unrelated but on SO there is a report that a Windows update may
>> cause this problem:
>>
>> https://stackoverflow.com/questions/63457321/r-will-not-run-after-latest-windows-10-updates/63524608#63524608
>>
>>
>>
>> On Fri, 2020-08-21 at 12:34 +0000, m1388m+moe1ydyn0hbs--- via R-devel
>> wrote:
>>> I am having exactly the same issue as the following bug report:
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16515.
>>> RTerm.exe hangs on startup, nothing is printed to the terminal. 32-bit
>> RTerm.exe runs fine.
>>> No errors are displayed, but I see the same as the bug report in Event
>> Viewer.
>>> I am running Windows 10 64-bit, v2010.
>>>
>>>
>>>
>>>
>>>
>>> ----
>>> Sent using Guerrillamail.com
>>> Block or report abuse:
>> https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
>
> ----
> Sent using Guerrillamail.com
> Block or report abuse: https://www.guerrillamail.com//abuse/?a=UwxwABsFT5QHxR6m%2F3QacQCJQtiX
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Sat Aug 22 09:36:05 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sat, 22 Aug 2020 19:36:05 +1200
Subject: [Rd] 
 M[cbind()] <- assignment with Matrix object loses attributes
In-Reply-To: <baa2781d-0371-401d-b8a5-62b5f693eec5@gmail.com>
References: <baa2781d-0371-401d-b8a5-62b5f693eec5@gmail.com>
Message-ID: <CAB8pepxUhrSpUUR6qLy7ujZxNsa0dWSEyaO-cdP35SabcWUiMg@mail.gmail.com>

Hi Ben,

I had some problems reproducing this.
As far as I can tell *all* indexed assignments drop attributes.
(Maybe we have different versions).

I'm not an expert on S4, but I'm unenthusiastic about mixing slot (S4)
semantics with attribute (S3) semantics.
And str() excludes attributes, but attributes() includes slots.
Highlighting the problems here...

I think R should generate an error or a warning, if a user tries to
assign attributes to S4 objects.

In saying that, mixing OO design with numerical linear algebra is a gold mine...


On Tue, Aug 11, 2020 at 1:23 PM Ben Bolker <bbolker at gmail.com> wrote:
>
>    Does this constitute a bug, or is there something I'm missing?
> assigning sub-elements of a sparse Matrix via M[X]<-..., where X is a
> 2-column matrix, appears to drop user-assigned attributes. I dug around
> in the R code for Matrix trying to find the relevant machinery but my
> brain started to hurt too badly ...
>
>     Will submit this as a bug if it seems warranted.
>
> library(Matrix)
> m1 <- matrix(1:9,3,3)
> m1 <- Matrix(m1)
> attr(m1,"junk") <- 12
> stopifnot(isTRUE(attr(m1,"junk")==12))  ## OK
> m1[cbind(1:2,2:3)] <- 1
> stopifnot(isTRUE(attr(m1,"junk")==12)) ## not OK
> attr(m1,"junk") ## NULL
>
>
> ## note I have to use the ugly stopifnot(isTRUE(...)) because a missing
> attribute returns NULL, an assignment to NULL returns NULL, and
> stopifnot(NULL) doesn't stop ...
>
>
>     cheers
>
>       Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroen @end|ng |rom berke|ey@edu  Sat Aug 22 19:58:03 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Sat, 22 Aug 2020 19:58:03 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
Message-ID: <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>

On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
> > Ah yes, this is related. I reported v2010 below, but it looks like I was updated to this Insider Build overnight without my knowledge, and conflated it with the new installation R v4 this morning.
> >
> > I will continue to look into the issue with the methods Tomas mentioned.
>
> It is interesting that a rare 5 years old problem would re-appear on
> current Insider builds. Which build of Windows are you running exactly?
> I've seen another report about a crash on 20190.1000. It'd be nice to
> know if it is present also in newer builds, i.e. in 20197.

I installed the latest 20197 build in a vm, and I can indeed reproduce
this problem.

What seems to be happening is that R triggers an infinite recursion in
Windows unwinding mechanism, and eventually dies with a stack
overflow. Attached a backtrace of the initial 100 frames of the main
thread (the pattern in the top ~30 frames continues forever).

The microsoft blog doesn't mention anything related to exception
handling has changed in recent versions:
https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: gdb.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200822/f4d6fd7c/attachment.txt>

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sat Aug 22 20:26:11 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sat, 22 Aug 2020 20:26:11 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
 <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
Message-ID: <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>

On 8/22/20 7:58 PM, Jeroen Ooms wrote:
> On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
>>> Ah yes, this is related. I reported v2010 below, but it looks like I was updated to this Insider Build overnight without my knowledge, and conflated it with the new installation R v4 this morning.
>>>
>>> I will continue to look into the issue with the methods Tomas mentioned.
>> It is interesting that a rare 5 years old problem would re-appear on
>> current Insider builds. Which build of Windows are you running exactly?
>> I've seen another report about a crash on 20190.1000. It'd be nice to
>> know if it is present also in newer builds, i.e. in 20197.
> I installed the latest 20197 build in a vm, and I can indeed reproduce
> this problem.
>
> What seems to be happening is that R triggers an infinite recursion in
> Windows unwinding mechanism, and eventually dies with a stack
> overflow. Attached a backtrace of the initial 100 frames of the main
> thread (the pattern in the top ~30 frames continues forever).
>
> The microsoft blog doesn't mention anything related to exception
> handling has changed in recent versions:
> https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch

Thanks, unfortunately that does not ring any bells (except below), I 
can't guess from this what is the underlying cause of the problem. There 
may be something wrong in how we use setjmp/longjmp or how 
setjmp/longjmp works on Windows.

It reminds me of a problem I've been debugging few days ago, when 
longjump implementation segfaults on Windows 10 (recent but not Insider 
build) probably soon after unwinding the stack, but only with GCC 10 / 
MinGW 7 and only in one of the no-segfault tests, and only with -03 (not 
-O2, not with with -O3 -fno-split-loops). The problem was sensitive to 
these optimization options interestingly on the call site of long jump 
(do_abs), even when it was not an immediate caller of the longjump. I've 
not tracked this down yet, it will require looking at the assembly 
level, and I was suspecting a compiler error causing the compiler to 
generate code that messes with the stack or registers in a way that 
impacts the upcoming jump. But now as we have this other problem with 
setjmp/logjmp, the compiler may not be the top suspect anymore.

I may not be able to work on this in the next few days or a week, so if 
anyone gets there first, please let me know what you find out.

Thanks,
Tomas


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Sat Aug 22 21:10:40 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Sat, 22 Aug 2020 21:10:40 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
 <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
 <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>
Message-ID: <387c06b3-c385-4d53-b655-84aa3b607634@gmail.com>

On 8/22/20 8:26 PM, Tomas Kalibera wrote:
> On 8/22/20 7:58 PM, Jeroen Ooms wrote:
>> On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera 
>> <tomas.kalibera at gmail.com> wrote:
>>> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
>>>> Ah yes, this is related. I reported v2010 below, but it looks like 
>>>> I was updated to this Insider Build overnight without my knowledge, 
>>>> and conflated it with the new installation R v4 this morning.
>>>>
>>>> I will continue to look into the issue with the methods Tomas 
>>>> mentioned.
>>> It is interesting that a rare 5 years old problem would re-appear on
>>> current Insider builds. Which build of Windows are you running exactly?
>>> I've seen another report about a crash on 20190.1000. It'd be nice to
>>> know if it is present also in newer builds, i.e. in 20197.
>> I installed the latest 20197 build in a vm, and I can indeed reproduce
>> this problem.
>>
>> What seems to be happening is that R triggers an infinite recursion in
>> Windows unwinding mechanism, and eventually dies with a stack
>> overflow. Attached a backtrace of the initial 100 frames of the main
>> thread (the pattern in the top ~30 frames continues forever).
>>
>> The microsoft blog doesn't mention anything related to exception
>> handling has changed in recent versions:
>> https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch 
>>
>
> Thanks, unfortunately that does not ring any bells (except below), I 
> can't guess from this what is the underlying cause of the problem. 
> There may be something wrong in how we use setjmp/longjmp or how 
> setjmp/longjmp works on Windows.
>
> It reminds me of a problem I've been debugging few days ago, when 
> longjump implementation segfaults on Windows 10 (recent but not 
> Insider build) probably soon after unwinding the stack, but only with 
> GCC 10 / MinGW 7 and only in one of the no-segfault tests, and only 
> with -03 (not -O2, not with with -O3 -fno-split-loops). The problem 
> was sensitive to these optimization options interestingly on the call 
> site of long jump (do_abs), even when it was not an immediate caller 
> of the longjump. I've not tracked this down yet, it will require 
> looking at the assembly level, and I was suspecting a compiler error 
> causing the compiler to generate code that messes with the stack or 
> registers in a way that impacts the upcoming jump. But now as we have 
> this other problem with setjmp/logjmp, the compiler may not be the top 
> suspect anymore.
>
> I may not be able to work on this in the next few days or a week, so 
> if anyone gets there first, please let me know what you find out.

Btw could you please try out if the UCRT build of R crashes as well in 
the Insider Windows build ?

https://www.r-project.org/nosvn/winutf8/R-devel-win.exe

Thanks
Tomas

(from 
https://developer.r-project.org/Blog/public/2020/07/30/windows/utf-8-build-of-r-and-cran-packages)

>
> Thanks,
> Tomas
>
>


From jeroen @end|ng |rom berke|ey@edu  Sat Aug 22 21:33:07 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Sat, 22 Aug 2020 21:33:07 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <387c06b3-c385-4d53-b655-84aa3b607634@gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
 <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
 <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>
 <387c06b3-c385-4d53-b655-84aa3b607634@gmail.com>
Message-ID: <CABFfbXsfW8ZhdCDRTMaMtEiOHLbCPj7UzzRrvp_bengZrYAbag@mail.gmail.com>

On Sat, Aug 22, 2020 at 9:10 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 8/22/20 8:26 PM, Tomas Kalibera wrote:
> > On 8/22/20 7:58 PM, Jeroen Ooms wrote:
> >> On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera
> >> <tomas.kalibera at gmail.com> wrote:
> >>> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
> >>>> Ah yes, this is related. I reported v2010 below, but it looks like
> >>>> I was updated to this Insider Build overnight without my knowledge,
> >>>> and conflated it with the new installation R v4 this morning.
> >>>>
> >>>> I will continue to look into the issue with the methods Tomas
> >>>> mentioned.
> >>> It is interesting that a rare 5 years old problem would re-appear on
> >>> current Insider builds. Which build of Windows are you running exactly?
> >>> I've seen another report about a crash on 20190.1000. It'd be nice to
> >>> know if it is present also in newer builds, i.e. in 20197.
> >> I installed the latest 20197 build in a vm, and I can indeed reproduce
> >> this problem.
> >>
> >> What seems to be happening is that R triggers an infinite recursion in
> >> Windows unwinding mechanism, and eventually dies with a stack
> >> overflow. Attached a backtrace of the initial 100 frames of the main
> >> thread (the pattern in the top ~30 frames continues forever).
> >>
> >> The microsoft blog doesn't mention anything related to exception
> >> handling has changed in recent versions:
> >> https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch
> >>
> >
> > Thanks, unfortunately that does not ring any bells (except below), I
> > can't guess from this what is the underlying cause of the problem.
> > There may be something wrong in how we use setjmp/longjmp or how
> > setjmp/longjmp works on Windows.
> >
> > It reminds me of a problem I've been debugging few days ago, when
> > longjump implementation segfaults on Windows 10 (recent but not
> > Insider build) probably soon after unwinding the stack, but only with
> > GCC 10 / MinGW 7 and only in one of the no-segfault tests, and only
> > with -03 (not -O2, not with with -O3 -fno-split-loops). The problem
> > was sensitive to these optimization options interestingly on the call
> > site of long jump (do_abs), even when it was not an immediate caller
> > of the longjump. I've not tracked this down yet, it will require
> > looking at the assembly level, and I was suspecting a compiler error
> > causing the compiler to generate code that messes with the stack or
> > registers in a way that impacts the upcoming jump. But now as we have
> > this other problem with setjmp/logjmp, the compiler may not be the top
> > suspect anymore.
> >
> > I may not be able to work on this in the next few days or a week, so
> > if anyone gets there first, please let me know what you find out.
>
> Btw could you please try out if the UCRT build of R crashes as well in
> the Insider Windows build ?

Yes, it hangs in exactly the same way, except that the backtrace shows

 ucrtbase!.intrinsic_setjmpex () from C:\WINDOWS\System32\ucrtbase.dll

Instead of msvcrt!_setjmpex (as expected of course).


From bbo|ker @end|ng |rom gm@||@com  Sat Aug 22 22:41:00 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 22 Aug 2020 16:41:00 -0400
Subject: [Rd] 
 M[cbind()] <- assignment with Matrix object loses attributes
In-Reply-To: <CAB8pepxUhrSpUUR6qLy7ujZxNsa0dWSEyaO-cdP35SabcWUiMg@mail.gmail.com>
References: <baa2781d-0371-401d-b8a5-62b5f693eec5@gmail.com>
 <CAB8pepxUhrSpUUR6qLy7ujZxNsa0dWSEyaO-cdP35SabcWUiMg@mail.gmail.com>
Message-ID: <1ea6822c-b5dc-a919-2ea8-ef72abf6f09c@gmail.com>

   Thanks for taking a look!

    Hmm, really?  In `R Under development (unstable) (2020-08-14 
r79020)`, doing the indexed assignment with a regular matrix (as opposed 
to a Matrix) appears to preserve attributes.

m1 <- matrix(1:9,3,3)
attr(m1,"junk") <- 12
stopifnot(isTRUE(attr(m1,"junk")==12)) ## OK
m1[cbind(1:2,2:3)] <- 1
stopifnot(isTRUE(attr(m1,"junk")==12)) ## OK
attr(m1,"junk")  ## 12

    Do you lose attributes with this code? It would surprise me if this 
had changed in recent versions but I guess anything's possible ...

On 8/22/20 3:36 AM, Abby Spurdle wrote:
> Hi Ben,
> 
> I had some problems reproducing this.
> As far as I can tell *all* indexed assignments drop attributes.
> (Maybe we have different versions).
> 
> I'm not an expert on S4, but I'm unenthusiastic about mixing slot (S4)
> semantics with attribute (S3) semantics.
> And str() excludes attributes, but attributes() includes slots.
> Highlighting the problems here...
> 
> I think R should generate an error or a warning, if a user tries to
> assign attributes to S4 objects.
> 
> In saying that, mixing OO design with numerical linear algebra is a gold mine...
> 
> 
> On Tue, Aug 11, 2020 at 1:23 PM Ben Bolker <bbolker at gmail.com> wrote:
>>
>>     Does this constitute a bug, or is there something I'm missing?
>> assigning sub-elements of a sparse Matrix via M[X]<-..., where X is a
>> 2-column matrix, appears to drop user-assigned attributes. I dug around
>> in the R code for Matrix trying to find the relevant machinery but my
>> brain started to hurt too badly ...
>>
>>      Will submit this as a bug if it seems warranted.
>>
>> library(Matrix)
>> m1 <- matrix(1:9,3,3)
>> m1 <- Matrix(m1)
>> attr(m1,"junk") <- 12
>> stopifnot(isTRUE(attr(m1,"junk")==12))  ## OK
>> m1[cbind(1:2,2:3)] <- 1
>> stopifnot(isTRUE(attr(m1,"junk")==12)) ## not OK
>> attr(m1,"junk") ## NULL
>>
>>
>> ## note I have to use the ugly stopifnot(isTRUE(...)) because a missing
>> attribute returns NULL, an assignment to NULL returns NULL, and
>> stopifnot(NULL) doesn't stop ...
>>
>>
>>      cheers
>>
>>        Ben Bolker
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Sun Aug 23 02:05:13 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sun, 23 Aug 2020 12:05:13 +1200
Subject: [Rd] 
 M[cbind()] <- assignment with Matrix object loses attributes
In-Reply-To: <1ea6822c-b5dc-a919-2ea8-ef72abf6f09c@gmail.com>
References: <baa2781d-0371-401d-b8a5-62b5f693eec5@gmail.com>
 <CAB8pepxUhrSpUUR6qLy7ujZxNsa0dWSEyaO-cdP35SabcWUiMg@mail.gmail.com>
 <1ea6822c-b5dc-a919-2ea8-ef72abf6f09c@gmail.com>
Message-ID: <CAB8pepyyJ79UKyubxYAQM-Hbb0dL06vi+ni5KyrAa8m6bdL9XA@mail.gmail.com>

> Hmm, really?  In `R Under development (unstable) (2020-08-14
> r79020)`, doing the indexed assignment with a regular matrix (as opposed
> to a Matrix) appears to preserve attributes.

I was referring to *Matrix* objects.
Sorry, if that wasn't clear.


From rory@w|n@ton @end|ng |rom gm@||@com  Sun Aug 23 17:02:56 2020
From: rory@w|n@ton @end|ng |rom gm@||@com (Rory Winston)
Date: Sun, 23 Aug 2020 23:02:56 +0800
Subject: [Rd] sum() vs cumsum() implicit type coercion
Message-ID: <CAF_Ym9kQFctOfOChXGk-mEOyCQiiKLXd0sLRju-heTEmrV2EOQ@mail.gmail.com>

Hi

I noticed a small inconsistency when using sum() vs cumsum()

 I have a char-based series

 > tryjpy$long

 [1] "0.0022"  "-0.0002" "-0.0149" "-0.0023" "-0.0342" "-0.0245" "-0.0022"

 [8] "0.0003"  "-0.0001" "-0.0004" "-0.0036" "-0.001"  "-0.0011" "-0.0012"

[15] "-0.0006" "0.0016"  "0.0006"

When I run sum() vs cumsum() , sum fails but cumsum converts the
series to numeric before summing:

> sum(tryjpy$long)
Error in sum(tryjpy$long) : invalid 'type' (character) of argument

> cumsum(tryjpy$long)
 [1]  0.0022  0.0020 -0.0129 -0.0152 -0.0494 -0.0739 -0.0761 -0.0758 -0.0759
[10] -0.0763 -0.0799 -0.0809 -0.0820 -0.0832 -0.0838 -0.0822 -0.0816

Which I guess is due to the following line in do_cum():

PROTECT(t = coerceVector(CAR(args), REALSXP));

This might be fine and there may be very good reasons why there is no
coercion in sum - just seems a little inconsistent in usage

Cheers
-- Rory


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Aug 24 14:25:58 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 24 Aug 2020 14:25:58 +0200
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <CANk-X-36+0y50VgZ++WiMupDcUeEBKcEqCefaJG6zpsWE1K-uQ@mail.gmail.com>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
 <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
 <CANk-X-31zDWV-dKsknHvkh3rNZkpaq=1LyQ93G48bX2vUDh=VQ@mail.gmail.com>
 <24382.56521.630017.702663@stat.math.ethz.ch>
 <CANk-X-36+0y50VgZ++WiMupDcUeEBKcEqCefaJG6zpsWE1K-uQ@mail.gmail.com>
Message-ID: <24387.45526.116480.92925@stat.math.ethz.ch>

>>>>> Constantin Ahlmann-Eltze 
>>>>>     on Fri, 21 Aug 2020 11:51:13 +0200 writes:

    > Hi Martin, thanks for verifying. I agree that the
    > Cornish-Fisher seems to struggle with the small size
    > parameters, but I also don't have a good idea how to
    > replace it.

    > But I think fixing do_search() is possible:

Yes,  but your fix was not correct..
(and I used time to find out)

Note that do_search()  is used in all three of

qnbinom()
 qbinom()
  qpois()

If a change was correct and an improvement, it will be an
improvement for all three cases; if it is only sometimes good,
it may also be sometimes bad for the other two cases.

Note that running the checks on the current R sources makes
almost no sense: Of course the new bugs (your: "slow"; mine:
inaccurate when result is quite larger than 0) are *NOT* yet in
the regression tests.

And it's really not worth doing experiments on the cloud ("QI"
is really increasing the climate change, by each time installing
tons (=> bandwidth) and running 1.5 hours ..):

I don't know what big a part of tree is killed by the bandwith
  (==> electricity of internet routers, cooling, ...)
and the 1.5 hour run
  (==> electricity of the CPUs; cooling; ...)
but I'd rather do test such small changes on my small desktop
where I don't need to install anything etc
(*and* I know that the Swiss electricity is almost exclusively
  produced from no-Carbon-emission plants).

--------

I'm busy for another 1-3 days (taking & grading exams),
but really do want to address this myself, rather than trying
these proposals (and having you burn electricity on routers and
CPUs and coolers) ...

Martin


From @nto|ne@|@br| @end|ng |rom gm@||@com  Mon Aug 24 16:51:57 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Mon, 24 Aug 2020 16:51:57 +0200
Subject: [Rd] browser() cannot be called consistently from another
 environment
Message-ID: <CAEKh8ujypDc3xGtqPVbmG3=cJUthwMjaw=HknDaa_SWVj7A-Rw@mail.gmail.com>

Dear R-devel,

I have this debugging function that applies side effects, then acts like
browser once it's done :

meta_browser <- function() {
  # ...
  on.exit(eval.parent(quote(browser())))
}

I can use it with a function such as fun1 below :

fun1 <- function(){
  meta_browser()
  print("hello")
  print("world")
}

fun1() will trigger the debugger as expected and we can browse along.

If however my function contains a loop (for, while, repeat), I'm not able
to debug anymore.

fun2 <- function(){
  meta_browser()
  print("hello")
  print("world")
  repeat {break}
}

fun2() will trigger the debugger but then everything will be executed at
once.

Is this a bug ? Is there another way, maybe more idiomatic, to get the same
effect and have it work with fun2() ?

Best,

Antoine

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Aug 25 09:29:05 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 25 Aug 2020 09:29:05 +0200
Subject: [Rd] sum() vs cumsum() implicit type coercion
In-Reply-To: <CAF_Ym9kQFctOfOChXGk-mEOyCQiiKLXd0sLRju-heTEmrV2EOQ@mail.gmail.com>
References: <CAF_Ym9kQFctOfOChXGk-mEOyCQiiKLXd0sLRju-heTEmrV2EOQ@mail.gmail.com>
Message-ID: <bd25ace2-14bf-2f86-8650-db5f2f405443@gmail.com>

On 8/23/20 5:02 PM, Rory Winston wrote:
> Hi
>
> I noticed a small inconsistency when using sum() vs cumsum()
>
>   I have a char-based series
>
>   > tryjpy$long
>
>   [1] "0.0022"  "-0.0002" "-0.0149" "-0.0023" "-0.0342" "-0.0245" "-0.0022"
>
>   [8] "0.0003"  "-0.0001" "-0.0004" "-0.0036" "-0.001"  "-0.0011" "-0.0012"
>
> [15] "-0.0006" "0.0016"  "0.0006"
>
> When I run sum() vs cumsum() , sum fails but cumsum converts the
> series to numeric before summing:
>
>> sum(tryjpy$long)
> Error in sum(tryjpy$long) : invalid 'type' (character) of argument
>
>> cumsum(tryjpy$long)
>   [1]  0.0022  0.0020 -0.0129 -0.0152 -0.0494 -0.0739 -0.0761 -0.0758 -0.0759
> [10] -0.0763 -0.0799 -0.0809 -0.0820 -0.0832 -0.0838 -0.0822 -0.0816
>
> Which I guess is due to the following line in do_cum():
>
> PROTECT(t = coerceVector(CAR(args), REALSXP));
> This might be fine and there may be very good reasons why there is no
> coercion in sum - just seems a little inconsistent in usage

Yes. I don't know the reason for this design, but please note it is 
documented in ?sum and in ?cumsum, which would also make it harder to 
change. One can always use a consistent subset (not rely on the coercion 
e.g. from characters).

Best
Tomas

>
> Cheers
> -- Rory
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Aug 25 12:25:01 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 25 Aug 2020 12:25:01 +0200
Subject: [Rd] sum() vs cumsum() implicit type coercion
In-Reply-To: <bd25ace2-14bf-2f86-8650-db5f2f405443@gmail.com>
References: <CAF_Ym9kQFctOfOChXGk-mEOyCQiiKLXd0sLRju-heTEmrV2EOQ@mail.gmail.com>
 <bd25ace2-14bf-2f86-8650-db5f2f405443@gmail.com>
Message-ID: <24388.59133.447311.112214@stat.math.ethz.ch>

>>>>> Tomas Kalibera 
>>>>>     on Tue, 25 Aug 2020 09:29:05 +0200 writes:

    > On 8/23/20 5:02 PM, Rory Winston wrote:
    >> Hi
    >> 
    >> I noticed a small inconsistency when using sum() vs cumsum()
    >> 
    >> I have a char-based series
    >> 
    >> > tryjpy$long
    >> 
    >> [1] "0.0022"  "-0.0002" "-0.0149" "-0.0023" "-0.0342" "-0.0245" "-0.0022"
    >> 
    >> [8] "0.0003"  "-0.0001" "-0.0004" "-0.0036" "-0.001"  "-0.0011" "-0.0012"
    >> 
    >> [15] "-0.0006" "0.0016"  "0.0006"
    >> 
    >> When I run sum() vs cumsum() , sum fails but cumsum converts the
    >> series to numeric before summing:
    >> 
    >>> sum(tryjpy$long)
    >> Error in sum(tryjpy$long) : invalid 'type' (character) of argument
    >> 
    >>> cumsum(tryjpy$long)
    >> [1]  0.0022  0.0020 -0.0129 -0.0152 -0.0494 -0.0739 -0.0761 -0.0758 -0.0759
    >> [10] -0.0763 -0.0799 -0.0809 -0.0820 -0.0832 -0.0838 -0.0822 -0.0816
    >> 
    >> Which I guess is due to the following line in do_cum():
    >> 
    >> PROTECT(t = coerceVector(CAR(args), REALSXP));
    >> This might be fine and there may be very good reasons why there is no
    >> coercion in sum - just seems a little inconsistent in usage

    > Yes. I don't know the reason for this design, but please note it is 
    > documented in ?sum and in ?cumsum, which would also make it harder to 
    > change. One can always use a consistent subset (not rely on the coercion 
    > e.g. from characters).

    > Best
    > Tomas

Indeed.
Further note that most arithmetic/math  *fails* on
character vectors, so if a change would have to be made, it
should rather be such that cumsum() also rejects character
input.

We would have consistency then, but potentially break user code,
even package code which has hitherto assumed cumsum() to coerce
to numeric first.

If a majority of commentators and R core thinks we should make
such a change, I'd agree to consider it.

Otherwise, we save (ourselves and others) a bit of time.
Martin


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Tue Aug 25 13:33:05 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Tue, 25 Aug 2020 21:33:05 +1000
Subject: [Rd] sum() vs cumsum() implicit type coercion
In-Reply-To: <24388.59133.447311.112214@stat.math.ethz.ch>
References: <CAF_Ym9kQFctOfOChXGk-mEOyCQiiKLXd0sLRju-heTEmrV2EOQ@mail.gmail.com>
 <bd25ace2-14bf-2f86-8650-db5f2f405443@gmail.com>
 <24388.59133.447311.112214@stat.math.ethz.ch>
Message-ID: <CAJmOi+Pz3orAWJwC20VDMX-HWz_Nbo5cv2H9qK6WRocGd5Gxtw@mail.gmail.com>

(If I may be so bold, although I think it's unlikely that a majority
would be in favour of this change, and I doubt anyone is actually
proposing it, I think quite a bit more than "a majority" should be
required before a change like this should be allowed.

Considering the feature that cumsum coerces to numeric is documented,
the consistency of type coercion between sum and cumsum has never been
advertised, and that a custom version of cumsum that addresses the
inconsistency would be very easy for users to create themselves, I'd
struggle to think the change could ever have merit. Even public
unanimity would probably not be enough.)

On Tue, 25 Aug 2020 at 20:25, Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Tomas Kalibera
> >>>>>     on Tue, 25 Aug 2020 09:29:05 +0200 writes:
>
>     > On 8/23/20 5:02 PM, Rory Winston wrote:
>     >> Hi
>     >>
>     >> I noticed a small inconsistency when using sum() vs cumsum()
>     >>
>     >> I have a char-based series
>     >>
>     >> > tryjpy$long
>     >>
>     >> [1] "0.0022"  "-0.0002" "-0.0149" "-0.0023" "-0.0342" "-0.0245" "-0.0022"
>     >>
>     >> [8] "0.0003"  "-0.0001" "-0.0004" "-0.0036" "-0.001"  "-0.0011" "-0.0012"
>     >>
>     >> [15] "-0.0006" "0.0016"  "0.0006"
>     >>
>     >> When I run sum() vs cumsum() , sum fails but cumsum converts the
>     >> series to numeric before summing:
>     >>
>     >>> sum(tryjpy$long)
>     >> Error in sum(tryjpy$long) : invalid 'type' (character) of argument
>     >>
>     >>> cumsum(tryjpy$long)
>     >> [1]  0.0022  0.0020 -0.0129 -0.0152 -0.0494 -0.0739 -0.0761 -0.0758 -0.0759
>     >> [10] -0.0763 -0.0799 -0.0809 -0.0820 -0.0832 -0.0838 -0.0822 -0.0816
>     >>
>     >> Which I guess is due to the following line in do_cum():
>     >>
>     >> PROTECT(t = coerceVector(CAR(args), REALSXP));
>     >> This might be fine and there may be very good reasons why there is no
>     >> coercion in sum - just seems a little inconsistent in usage
>
>     > Yes. I don't know the reason for this design, but please note it is
>     > documented in ?sum and in ?cumsum, which would also make it harder to
>     > change. One can always use a consistent subset (not rely on the coercion
>     > e.g. from characters).
>
>     > Best
>     > Tomas
>
> Indeed.
> Further note that most arithmetic/math  *fails* on
> character vectors, so if a change would have to be made, it
> should rather be such that cumsum() also rejects character
> input.
>
> We would have consistency then, but potentially break user code,
> even package code which has hitherto assumed cumsum() to coerce
> to numeric first.
>
> If a majority of commentators and R core thinks we should make
> such a change, I'd agree to consider it.
>
> Otherwise, we save (ourselves and others) a bit of time.
> Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Aug 25 18:14:53 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 25 Aug 2020 18:14:53 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <CABFfbXsfW8ZhdCDRTMaMtEiOHLbCPj7UzzRrvp_bengZrYAbag@mail.gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
 <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
 <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>
 <387c06b3-c385-4d53-b655-84aa3b607634@gmail.com>
 <CABFfbXsfW8ZhdCDRTMaMtEiOHLbCPj7UzzRrvp_bengZrYAbag@mail.gmail.com>
Message-ID: <c9409578-65e3-e86b-f2f1-e59f5d36423c@gmail.com>

On 8/22/20 9:33 PM, Jeroen Ooms wrote:
> On Sat, Aug 22, 2020 at 9:10 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 8/22/20 8:26 PM, Tomas Kalibera wrote:
>>> On 8/22/20 7:58 PM, Jeroen Ooms wrote:
>>>> On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera
>>>> <tomas.kalibera at gmail.com> wrote:
>>>>> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
>>>>>> Ah yes, this is related. I reported v2010 below, but it looks like
>>>>>> I was updated to this Insider Build overnight without my knowledge,
>>>>>> and conflated it with the new installation R v4 this morning.
>>>>>>
>>>>>> I will continue to look into the issue with the methods Tomas
>>>>>> mentioned.
>>>>> It is interesting that a rare 5 years old problem would re-appear on
>>>>> current Insider builds. Which build of Windows are you running exactly?
>>>>> I've seen another report about a crash on 20190.1000. It'd be nice to
>>>>> know if it is present also in newer builds, i.e. in 20197.
>>>> I installed the latest 20197 build in a vm, and I can indeed reproduce
>>>> this problem.
>>>>
>>>> What seems to be happening is that R triggers an infinite recursion in
>>>> Windows unwinding mechanism, and eventually dies with a stack
>>>> overflow. Attached a backtrace of the initial 100 frames of the main
>>>> thread (the pattern in the top ~30 frames continues forever).
>>>>
>>>> The microsoft blog doesn't mention anything related to exception
>>>> handling has changed in recent versions:
>>>> https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch
>>>>
>>> Thanks, unfortunately that does not ring any bells (except below), I
>>> can't guess from this what is the underlying cause of the problem.
>>> There may be something wrong in how we use setjmp/longjmp or how
>>> setjmp/longjmp works on Windows.
>>>
>>> It reminds me of a problem I've been debugging few days ago, when
>>> longjump implementation segfaults on Windows 10 (recent but not
>>> Insider build) probably soon after unwinding the stack, but only with
>>> GCC 10 / MinGW 7 and only in one of the no-segfault tests, and only
>>> with -03 (not -O2, not with with -O3 -fno-split-loops). The problem
>>> was sensitive to these optimization options interestingly on the call
>>> site of long jump (do_abs), even when it was not an immediate caller
>>> of the longjump. I've not tracked this down yet, it will require
>>> looking at the assembly level, and I was suspecting a compiler error
>>> causing the compiler to generate code that messes with the stack or
>>> registers in a way that impacts the upcoming jump. But now as we have
>>> this other problem with setjmp/logjmp, the compiler may not be the top
>>> suspect anymore.
>>>
>>> I may not be able to work on this in the next few days or a week, so
>>> if anyone gets there first, please let me know what you find out.
>> Btw could you please try out if the UCRT build of R crashes as well in
>> the Insider Windows build ?
> Yes, it hangs in exactly the same way, except that the backtrace shows
>
>   ucrtbase!.intrinsic_setjmpex () from C:\WINDOWS\System32\ucrtbase.dll
>
> Instead of msvcrt!_setjmpex (as expected of course).

Thanks. I found what is causing the problem I observed with GCC10/stock 
Windows 10, I expect this is the same one as in the Insider build.
I will investigate further,

Tomas


From @nto|ne@|@br| @end|ng |rom gm@||@com  Tue Aug 25 22:02:22 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Tue, 25 Aug 2020 22:02:22 +0200
Subject: [Rd] trace creates object in base namespace if called on function
 argument
Message-ID: <CAEKh8ug4_1BENP6A3kRpYyTBHjvDV69bisbLDBG86JFMRWuu0A@mail.gmail.com>

Dear R-devel,

I don't think this is expected :

foo <- function() "hello"
trace2 <- function(fun) trace(fun, quote(print("!!!")))
base::fun
# Object with tracing code, class "functionWithTrace"
# Original definition:
# function() "hello"
#
# ## (to see the tracing code, look at body(object))

`untrace()` has the same behavior.

This is inconsistent with how debug works :

foo <- function() "hello"
debug2 <- function(fun) debug(fun)
debug2(foo)
isdebugged(foo)
# [1] TRUE

This can be worked around by defining :

trace2 <- function(fun) eval.parent(substitute(trace(fun,
quote(print("!!!")))

but I believe the current behavior is undesired and it'd be better to make
it behave as `debug()`, or to throw an error.

Best,

Antoine

	[[alternative HTML version deleted]]


From @nto|ne@|@br| @end|ng |rom gm@||@com  Wed Aug 26 03:31:18 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Wed, 26 Aug 2020 03:31:18 +0200
Subject: [Rd] 
 trace creates object in base namespace if called on function
 argument
In-Reply-To: <CAEKh8ug4_1BENP6A3kRpYyTBHjvDV69bisbLDBG86JFMRWuu0A@mail.gmail.com>
References: <CAEKh8ug4_1BENP6A3kRpYyTBHjvDV69bisbLDBG86JFMRWuu0A@mail.gmail.com>
Message-ID: <CAEKh8uj0+2erfUhgSF5YH=GHr5acWvur-yVKO2Qg3=7UwEUANA@mail.gmail.com>

Apologies there is one line missing in my last email, the code should be :

foo <- function() "hello"
trace2 <- function(fun) trace(fun, quote(print("!!!")))
trace2(foo) # <- THIS LINE WAS MISSING
base::fun

Best,

Antoine

Le mar. 25 ao?t 2020 ? 22:02, Antoine Fabri <antoine.fabri at gmail.com> a
?crit :

> Dear R-devel,
>
> I don't think this is expected :
>
> foo <- function() "hello"
> trace2 <- function(fun) trace(fun, quote(print("!!!")))
> base::fun
> # Object with tracing code, class "functionWithTrace"
> # Original definition:
> # function() "hello"
> #
> # ## (to see the tracing code, look at body(object))
>
> `untrace()` has the same behavior.
>
> This is inconsistent with how debug works :
>
> foo <- function() "hello"
> debug2 <- function(fun) debug(fun)
> debug2(foo)
> isdebugged(foo)
> # [1] TRUE
>
> This can be worked around by defining :
>
> trace2 <- function(fun) eval.parent(substitute(trace(fun,
> quote(print("!!!")))
>
> but I believe the current behavior is undesired and it'd be better to make
> it behave as `debug()`, or to throw an error.
>
> Best,
>
> Antoine
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Wed Aug 26 07:57:10 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 25 Aug 2020 22:57:10 -0700
Subject: [Rd] NAs and rle
Message-ID: <CAD4oTHFk3vFWsbk188KxBk83TvBt=sWoGnZy9V2C1DcdxXCFqw@mail.gmail.com>

Hi All,

A twitter user, Mike fc (@coolbutuseless) mentioned today that he was
surprised that repeated NAs weren't treated as a run by the rle function.

Now I know why they are not. NAs represent values which could be the same
or different from eachother if they were known, so from a purely conceptual
standpoint there is no way to tell whether they are the same and thus
constitute a run or not.

This conceptual strictness isnt universally observed, though, because we
get the following:

> unique(c(1, 2, 3, NA, NA, NA))

[1]  1  2  3 NA


Which means that rle(sort(x))$value is not guaranteed to be the same as
unique(x), which is a little strange (though likely of little practical
impact).


Personally, to me it also seems that, from a purely data-compression
standpoint, it would be valid to collapse those missing values into a run
of missing, as it reduces size in-memory/on disk without losing any
information.

Now none of this is to say that I suggest the default behavior be changed
(that would surely disrupt some non-trivial amount of existing code) but
what do people think of a  group.nas argument which defaults to FALSE
controlling the behavior?

As a final point, there is some precedent here (though obviously not at all
binding), as Bioconductor's Rle functionality does group NAs.

Best,
~G

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Aug 26 14:17:00 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 26 Aug 2020 14:17:00 +0200
Subject: [Rd] 
 trace creates object in base namespace if called on function
 argument
In-Reply-To: <CAEKh8uj0+2erfUhgSF5YH=GHr5acWvur-yVKO2Qg3=7UwEUANA@mail.gmail.com>
References: <CAEKh8ug4_1BENP6A3kRpYyTBHjvDV69bisbLDBG86JFMRWuu0A@mail.gmail.com>
 <CAEKh8uj0+2erfUhgSF5YH=GHr5acWvur-yVKO2Qg3=7UwEUANA@mail.gmail.com>
Message-ID: <991dd6d0-6879-2500-988c-93170c4da098@gmail.com>

Please note that this is documented in ?trace. "fun" is matched to what, 
it is a _name_ of the function to be traced, which is traced in the 
top-level environment. I don't know why it was designed this way, but it 
is documented in detail, and hence the expected behavior.

Debugging is often, and also in R, implemented in the core. Tracing is 
implemented on top without specific support, it thus cannot do some 
things debugging can do.

Tomas


On 8/26/20 3:31 AM, Antoine Fabri wrote:
> Apologies there is one line missing in my last email, the code should be :
>
> foo <- function() "hello"
> trace2 <- function(fun) trace(fun, quote(print("!!!")))
> trace2(foo) # <- THIS LINE WAS MISSING
> base::fun
>
> Best,
>
> Antoine
>
> Le mar. 25 ao?t 2020 ? 22:02, Antoine Fabri <antoine.fabri at gmail.com> a
> ?crit :
>
>> Dear R-devel,
>>
>> I don't think this is expected :
>>
>> foo <- function() "hello"
>> trace2 <- function(fun) trace(fun, quote(print("!!!")))
>> base::fun
>> # Object with tracing code, class "functionWithTrace"
>> # Original definition:
>> # function() "hello"
>> #
>> # ## (to see the tracing code, look at body(object))
>>
>> `untrace()` has the same behavior.
>>
>> This is inconsistent with how debug works :
>>
>> foo <- function() "hello"
>> debug2 <- function(fun) debug(fun)
>> debug2(foo)
>> isdebugged(foo)
>> # [1] TRUE
>>
>> This can be worked around by defining :
>>
>> trace2 <- function(fun) eval.parent(substitute(trace(fun,
>> quote(print("!!!")))
>>
>> but I believe the current behavior is undesired and it'd be better to make
>> it behave as `debug()`, or to throw an error.
>>
>> Best,
>>
>> Antoine
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Wed Aug 26 16:24:48 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 26 Aug 2020 07:24:48 -0700
Subject: [Rd] NAs and rle
In-Reply-To: <CAD4oTHFk3vFWsbk188KxBk83TvBt=sWoGnZy9V2C1DcdxXCFqw@mail.gmail.com>
References: <CAD4oTHFk3vFWsbk188KxBk83TvBt=sWoGnZy9V2C1DcdxXCFqw@mail.gmail.com>
Message-ID: <CAF8bMcZ=nu7B9Nw7T7kW5vTk2ZJTPVSLm5xpWoSGLayrN9bt5A@mail.gmail.com>

Splus's rle() also grouped NA's (separately from NaN's):

% Splus
TIBCO Software Inc. Confidential Information
Copyright (c) 1988-2008 TIBCO Software Inc. ALL RIGHTS RESERVED.
TIBCO Spotfire S+ Version 8.1.1 for Linux 2.6.9-34.EL, 32-bit : 2008
> dput(rle(c(11,11,NA,NA,NA,NaN,14,14,14,14)))
list("lengths" = c(2, 3, 1, 4)
, "values" = c(11., NA, NaN, 14.)
)

Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Tue, Aug 25, 2020 at 10:57 PM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Hi All,
>
> A twitter user, Mike fc (@coolbutuseless) mentioned today that he was
> surprised that repeated NAs weren't treated as a run by the rle function.
>
> Now I know why they are not. NAs represent values which could be the same
> or different from eachother if they were known, so from a purely conceptual
> standpoint there is no way to tell whether they are the same and thus
> constitute a run or not.
>
> This conceptual strictness isnt universally observed, though, because we
> get the following:
>
> > unique(c(1, 2, 3, NA, NA, NA))
>
> [1]  1  2  3 NA
>
>
> Which means that rle(sort(x))$value is not guaranteed to be the same as
> unique(x), which is a little strange (though likely of little practical
> impact).
>
>
> Personally, to me it also seems that, from a purely data-compression
> standpoint, it would be valid to collapse those missing values into a run
> of missing, as it reduces size in-memory/on disk without losing any
> information.
>
> Now none of this is to say that I suggest the default behavior be changed
> (that would surely disrupt some non-trivial amount of existing code) but
> what do people think of a  group.nas argument which defaults to FALSE
> controlling the behavior?
>
> As a final point, there is some precedent here (though obviously not at all
> binding), as Bioconductor's Rle functionality does group NAs.
>
> Best,
> ~G
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @nto|ne@|@br| @end|ng |rom gm@||@com  Wed Aug 26 16:39:44 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Wed, 26 Aug 2020 16:39:44 +0200
Subject: [Rd] 
 trace creates object in base namespace if called on function
 argument
In-Reply-To: <991dd6d0-6879-2500-988c-93170c4da098@gmail.com>
References: <CAEKh8ug4_1BENP6A3kRpYyTBHjvDV69bisbLDBG86JFMRWuu0A@mail.gmail.com>
 <CAEKh8uj0+2erfUhgSF5YH=GHr5acWvur-yVKO2Qg3=7UwEUANA@mail.gmail.com>
 <991dd6d0-6879-2500-988c-93170c4da098@gmail.com>
Message-ID: <CAEKh8uhNf+waXDHPFgVgQnGXPSTxNJY1ACOBG_wUPBwHHHAeig@mail.gmail.com>

Hi Tomas,

The doc indeed describes `what` as "the name, possibly quote()d, of a
function to be traced or untraced".
This is a good argument not to change the function and make it behave more
like debug.

However the doc also tells us "A call to trace allows you to insert
debugging code (e.g., a call to browser or recover) at chosen places in any
function" and "The trace function operates by constructing a revised
version of the function (or of the method, if signature is supplied), and
assigning the new object back where the original was found". In the issue I
report a function was created in the base environment, which is not "where
the function was found". It's not clear to me what "where it was found"
would mean in that case, but I would assume the execution environment of
trace2, or maybe the calling environment (global in that case), or parent
of foo (global here again), but not the base namespace.

It would make sense to me to either have a traced fun in the execution
environment, or to have an error.

Best,

Antoine

Le mer. 26 ao?t 2020 ? 14:17, Tomas Kalibera <tomas.kalibera at gmail.com> a
?crit :

> Please note that this is documented in ?trace. "fun" is matched to what,
> it is a _name_ of the function to be traced, which is traced in the
> top-level environment. I don't know why it was designed this way, but it
> is documented in detail, and hence the expected behavior.
>
> Debugging is often, and also in R, implemented in the core. Tracing is
> implemented on top without specific support, it thus cannot do some
> things debugging can do.
>
> Tomas
>
>
> On 8/26/20 3:31 AM, Antoine Fabri wrote:
> > Apologies there is one line missing in my last email, the code should be
> :
> >
> > foo <- function() "hello"
> > trace2 <- function(fun) trace(fun, quote(print("!!!")))
> > trace2(foo) # <- THIS LINE WAS MISSING
> > base::fun
> >
> > Best,
> >
> > Antoine
> >
> > Le mar. 25 ao?t 2020 ? 22:02, Antoine Fabri <antoine.fabri at gmail.com> a
> > ?crit :
> >
> >> Dear R-devel,
> >>
> >> I don't think this is expected :
> >>
> >> foo <- function() "hello"
> >> trace2 <- function(fun) trace(fun, quote(print("!!!")))
> >> base::fun
> >> # Object with tracing code, class "functionWithTrace"
> >> # Original definition:
> >> # function() "hello"
> >> #
> >> # ## (to see the tracing code, look at body(object))
> >>
> >> `untrace()` has the same behavior.
> >>
> >> This is inconsistent with how debug works :
> >>
> >> foo <- function() "hello"
> >> debug2 <- function(fun) debug(fun)
> >> debug2(foo)
> >> isdebugged(foo)
> >> # [1] TRUE
> >>
> >> This can be worked around by defining :
> >>
> >> trace2 <- function(fun) eval.parent(substitute(trace(fun,
> >> quote(print("!!!")))
> >>
> >> but I believe the current behavior is undesired and it'd be better to
> make
> >> it behave as `debug()`, or to throw an error.
> >>
> >> Best,
> >>
> >> Antoine
> >>
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Aug 26 18:34:19 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 26 Aug 2020 18:34:19 +0200
Subject: [Rd] 
 trace creates object in base namespace if called on function
 argument
In-Reply-To: <CAEKh8uhNf+waXDHPFgVgQnGXPSTxNJY1ACOBG_wUPBwHHHAeig@mail.gmail.com>
References: <CAEKh8ug4_1BENP6A3kRpYyTBHjvDV69bisbLDBG86JFMRWuu0A@mail.gmail.com>
 <CAEKh8uj0+2erfUhgSF5YH=GHr5acWvur-yVKO2Qg3=7UwEUANA@mail.gmail.com>
 <991dd6d0-6879-2500-988c-93170c4da098@gmail.com>
 <CAEKh8uhNf+waXDHPFgVgQnGXPSTxNJY1ACOBG_wUPBwHHHAeig@mail.gmail.com>
Message-ID: <ae7ca1ec-16b1-e07d-ee15-3a637e764fa7@gmail.com>

Hi Antoine,

ok, I thought you were reporting that

 > foo <- function() "hello"
 > trace2 <- function(fun) trace(fun, quote(print("!!!")))
 > trace2(foo)
 > base::fun

in error did not trace "foo" in the top-level environment. This is, 
however, expected, because "trace" is called with argument fun, so the 
name of the function binding to replace is "fun" (not "foo"), and "fun" 
does not exist in the top-level environment. You cannot wrap "trace" 
like this.

If you meant to report that instead of throwing an error that an object 
named "fun" was not found, this example inserts the instrumented code 
into "base", that I also find surprising. The behavior I would have 
expected is like with primitive tracing

 > foo <- function() "hello"
 > trace2 <- function(fun) trace(fun)
 > trace2(foo)
 > base::fun
Error in get(name, envir = ns, inherits = FALSE) : object 'fun' not found

If you are interested in this problem, feel free to investigate in more 
detail (validate it is a bug via reading the documentation in detail, 
reading the code, debugging, checking the commit history) and if it 
turns out to be really a bug, feel free to submit a well-tested minimal 
patch, via bugzilla.

Thanks,
Tomas


On 8/26/20 4:39 PM, Antoine Fabri wrote:
> Hi Tomas,
>
> The doc indeed describes `what` as "the name, possibly quote()d, of a 
> function to be traced or untraced".
> This is a good argument not to change the function and make it behave 
> more like debug.
>
> However the doc also tells us "A call to trace allows you to insert 
> debugging code (e.g., a call to browser or recover) at chosen places 
> in any function" and "The trace function operates by constructing a 
> revised version of the function (or of the method, if signature is 
> supplied), and assigning the new object back where the original was 
> found". In the issue I report a function was created in the base 
> environment, which is not "where the function was found". It's not 
> clear to me what "where it was found" would mean in that case, but I 
> would assume the execution environment of trace2, or maybe the calling 
> environment (global in that case), or parent of foo (global here 
> again), but not the base namespace.
>
> It would make sense to me to either have a traced fun in the execution 
> environment, or to have an error.
>
> Best,
>
> Antoine
>
> Le?mer. 26 ao?t 2020 ??14:17, Tomas Kalibera <tomas.kalibera at gmail.com 
> <mailto:tomas.kalibera at gmail.com>> a ?crit?:
>
>     Please note that this is documented in ?trace. "fun" is matched to
>     what,
>     it is a _name_ of the function to be traced, which is traced in the
>     top-level environment. I don't know why it was designed this way,
>     but it
>     is documented in detail, and hence the expected behavior.
>
>     Debugging is often, and also in R, implemented in the core.
>     Tracing is
>     implemented on top without specific support, it thus cannot do some
>     things debugging can do.
>
>     Tomas
>
>
>     On 8/26/20 3:31 AM, Antoine Fabri wrote:
>     > Apologies there is one line missing in my last email, the code
>     should be :
>     >
>     > foo <- function() "hello"
>     > trace2 <- function(fun) trace(fun, quote(print("!!!")))
>     > trace2(foo) # <- THIS LINE WAS MISSING
>     > base::fun
>     >
>     > Best,
>     >
>     > Antoine
>     >
>     > Le mar. 25 ao?t 2020 ? 22:02, Antoine Fabri
>     <antoine.fabri at gmail.com <mailto:antoine.fabri at gmail.com>> a
>     > ?crit :
>     >
>     >> Dear R-devel,
>     >>
>     >> I don't think this is expected :
>     >>
>     >> foo <- function() "hello"
>     >> trace2 <- function(fun) trace(fun, quote(print("!!!")))
>     >> base::fun
>     >> # Object with tracing code, class "functionWithTrace"
>     >> # Original definition:
>     >> # function() "hello"
>     >> #
>     >> # ## (to see the tracing code, look at body(object))
>     >>
>     >> `untrace()` has the same behavior.
>     >>
>     >> This is inconsistent with how debug works :
>     >>
>     >> foo <- function() "hello"
>     >> debug2 <- function(fun) debug(fun)
>     >> debug2(foo)
>     >> isdebugged(foo)
>     >> # [1] TRUE
>     >>
>     >> This can be worked around by defining :
>     >>
>     >> trace2 <- function(fun) eval.parent(substitute(trace(fun,
>     >> quote(print("!!!")))
>     >>
>     >> but I believe the current behavior is undesired and it'd be
>     better to make
>     >> it behave as `debug()`, or to throw an error.
>     >>
>     >> Best,
>     >>
>     >> Antoine
>     >>
>     >? ? ? ?[[alternative HTML version deleted]]
>     >
>     > ______________________________________________
>     > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Aug 26 19:54:00 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 26 Aug 2020 19:54:00 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <c9409578-65e3-e86b-f2f1-e59f5d36423c@gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
 <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
 <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>
 <387c06b3-c385-4d53-b655-84aa3b607634@gmail.com>
 <CABFfbXsfW8ZhdCDRTMaMtEiOHLbCPj7UzzRrvp_bengZrYAbag@mail.gmail.com>
 <c9409578-65e3-e86b-f2f1-e59f5d36423c@gmail.com>
Message-ID: <51b95392-03fa-3c98-f7d8-d3f07c661050@gmail.com>

On 8/25/20 6:14 PM, Tomas Kalibera wrote:
> On 8/22/20 9:33 PM, Jeroen Ooms wrote:
>> On Sat, Aug 22, 2020 at 9:10 PM Tomas Kalibera 
>> <tomas.kalibera at gmail.com> wrote:
>>> On 8/22/20 8:26 PM, Tomas Kalibera wrote:
>>>> On 8/22/20 7:58 PM, Jeroen Ooms wrote:
>>>>> On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera
>>>>> <tomas.kalibera at gmail.com> wrote:
>>>>>> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
>>>>>>> Ah yes, this is related. I reported v2010 below, but it looks like
>>>>>>> I was updated to this Insider Build overnight without my knowledge,
>>>>>>> and conflated it with the new installation R v4 this morning.
>>>>>>>
>>>>>>> I will continue to look into the issue with the methods Tomas
>>>>>>> mentioned.
>>>>>> It is interesting that a rare 5 years old problem would re-appear on
>>>>>> current Insider builds. Which build of Windows are you running 
>>>>>> exactly?
>>>>>> I've seen another report about a crash on 20190.1000. It'd be 
>>>>>> nice to
>>>>>> know if it is present also in newer builds, i.e. in 20197.
>>>>> I installed the latest 20197 build in a vm, and I can indeed 
>>>>> reproduce
>>>>> this problem.
>>>>>
>>>>> What seems to be happening is that R triggers an infinite 
>>>>> recursion in
>>>>> Windows unwinding mechanism, and eventually dies with a stack
>>>>> overflow. Attached a backtrace of the initial 100 frames of the main
>>>>> thread (the pattern in the top ~30 frames continues forever).
>>>>>
>>>>> The microsoft blog doesn't mention anything related to exception
>>>>> handling has changed in recent versions:
>>>>> https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch 
>>>>>
>>>>>
>>>> Thanks, unfortunately that does not ring any bells (except below), I
>>>> can't guess from this what is the underlying cause of the problem.
>>>> There may be something wrong in how we use setjmp/longjmp or how
>>>> setjmp/longjmp works on Windows.
>>>>
>>>> It reminds me of a problem I've been debugging few days ago, when
>>>> longjump implementation segfaults on Windows 10 (recent but not
>>>> Insider build) probably soon after unwinding the stack, but only with
>>>> GCC 10 / MinGW 7 and only in one of the no-segfault tests, and only
>>>> with -03 (not -O2, not with with -O3 -fno-split-loops). The problem
>>>> was sensitive to these optimization options interestingly on the call
>>>> site of long jump (do_abs), even when it was not an immediate caller
>>>> of the longjump. I've not tracked this down yet, it will require
>>>> looking at the assembly level, and I was suspecting a compiler error
>>>> causing the compiler to generate code that messes with the stack or
>>>> registers in a way that impacts the upcoming jump. But now as we have
>>>> this other problem with setjmp/logjmp, the compiler may not be the top
>>>> suspect anymore.
>>>>
>>>> I may not be able to work on this in the next few days or a week, so
>>>> if anyone gets there first, please let me know what you find out.
>>> Btw could you please try out if the UCRT build of R crashes as well in
>>> the Insider Windows build ?
>> Yes, it hangs in exactly the same way, except that the backtrace shows
>>
>> ? ucrtbase!.intrinsic_setjmpex () from C:\WINDOWS\System32\ucrtbase.dll
>>
>> Instead of msvcrt!_setjmpex (as expected of course).
>
> Thanks. I found what is causing the problem I observed with 
> GCC10/stock Windows 10, I expect this is the same one as in the 
> Insider build.
> I will investigate further,
>
> Tomas
>
It seems the problem is between MinGW-W64 and Windows, and really it 
causes both the reported crashes in an Insider build (I tested in 20197) 
and in my GCC 10 builds in a single "no-segfault" test. setjmp is 
implemented using Windows call _setjmpex, which has a second argument 
argument, which is set differently by MinGW based on GCC version. When I 
set this argument as MinGW-W64 did on early versions of GCC, 
mingw_getsp(), it fixes/hides the problems on my systems. Perl5 uses a 
similar workaround, but otherwise there is no solid base (documentation, 
specification, etc) I am aware of for this change, so this may take some 
more time to be properly fixed. Still, if anyone experiments with this 
workaround and finds a problem, please let me know. In particular, I am 
curious whether it works on earlier versions of Windows (at least with 
check-all, including recommended packages).

Thanks
Tomas





-------------- next part --------------
A non-text attachment was scrubbed...
Name: setjmp.diff
Type: text/x-patch
Size: 570 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200826/a4ff18ba/attachment.bin>

From @nto|ne@|@br| @end|ng |rom gm@||@com  Thu Aug 27 20:22:32 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Thu, 27 Aug 2020 20:22:32 +0200
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
In-Reply-To: <24382.11544.133799.767814@hornik.net>
References: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
 <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>
 <24382.11544.133799.767814@hornik.net>
Message-ID: <CAEKh8ujFBhHYVV=MK3SGQD1p4rpBdnpNpKc1g+3FWSPLoayR0w@mail.gmail.com>

Should it work on traced functions ?

As it is now it doesn't.

Best,

Antoine

Le jeu. 20 ao?t 2020 ? 09:58, Kurt Hornik <Kurt.Hornik at wu.ac.at> a ?crit :

> >>>>> Gabriel Becker writes:
>
> > I added that so I can look at the proposed fix and put it or something
> > similar in bugzilla for review final review.
>
> > Apologies for the oversight.
>
> Fixed now with
>
> -    while(as.character(bdexpr[[1L]]) == "{")
> +    while(is.call(bdexpr) && (as.character(bdexpr[[1L]]) == "{"))
>
> (the suggested fix does not work on things like
> foo <- function(x) {{ x }}
> ...)
>
> Best
> -k
>
> > ~G
>
> > On Wed, Aug 19, 2020 at 3:40 PM Antoine Fabri <antoine.fabri at gmail.com>
> > wrote:
>
> >> Dear R-devel,
> >>
> >> utils::isS3stdGeneric tries to subset the body of the function it's fed,
> >> primitives don't like that because they don't have a body, identity
> doesn't
> >> like it either because it's body is a symbol.
> >>
> >> According to the doc, any function is a legal input.
> >>
> >> See below:
> >>
> >> identity
> >> #> function (x)
> >> #> x
> >> #> <bytecode: 0x0000000013d6da28>
> >> #> <environment: namespace:base>
> >>
> >> max
> >> #> function (..., na.rm = FALSE)  .Primitive("max")
> >>
> >> isS3stdGeneric(identity)
> >> #> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able
> >>
> >> isS3stdGeneric(max)
> >> #> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
> >> bdexpr[[2L]]: l'argument est de longueur nulle
> >>
> >> Here is a simple fix :
> >>
> >> isS3stdGeneric <- function(f) {
> >> {
> >> bdexpr <- body(f)
> >> if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
> >> while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
> >> ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name
> >> ("UseMethod"))
> >> if (ret)
> >> names(ret) <- bdexpr[[2L]]
> >> ret
> >> }
> >> }
> >>
> >> isS3stdGeneric(identity)
> >> #> [1] FALSE
> >> isS3stdGeneric(max)
> >> #> [1] FALSE
> >>
> >> Best,
> >>
> >> Antoine
> >>
> >> [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>
> >       [[alternative HTML version deleted]]
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From jeroen @end|ng |rom berke|ey@edu  Thu Aug 27 20:38:42 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Thu, 27 Aug 2020 20:38:42 +0200
Subject: [Rd] R 4.0.2 64-bit Windows hangs
In-Reply-To: <51b95392-03fa-3c98-f7d8-d3f07c661050@gmail.com>
References: <52a7d715fcdb9d54a664a91db095bdd61e66@guerrillamail.com>
 <18a0fe77-d6e9-1234-8ca8-34b2526e4509@gmail.com>
 <CABFfbXuX7Gw8JRjKhWGRV+oE2x4rdFKkFhy5aRqdpwdhziLq3A@mail.gmail.com>
 <24309fc8-49d3-0fa2-b0e4-57f660f29761@gmail.com>
 <387c06b3-c385-4d53-b655-84aa3b607634@gmail.com>
 <CABFfbXsfW8ZhdCDRTMaMtEiOHLbCPj7UzzRrvp_bengZrYAbag@mail.gmail.com>
 <c9409578-65e3-e86b-f2f1-e59f5d36423c@gmail.com>
 <51b95392-03fa-3c98-f7d8-d3f07c661050@gmail.com>
Message-ID: <CABFfbXtZJN1gJ3hCq=7hVVRZt42cHaGHDc=GKLuai76D43-ggg@mail.gmail.com>

On Wed, Aug 26, 2020 at 7:54 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 8/25/20 6:14 PM, Tomas Kalibera wrote:
> > On 8/22/20 9:33 PM, Jeroen Ooms wrote:
> >> On Sat, Aug 22, 2020 at 9:10 PM Tomas Kalibera
> >> <tomas.kalibera at gmail.com> wrote:
> >>> On 8/22/20 8:26 PM, Tomas Kalibera wrote:
> >>>> On 8/22/20 7:58 PM, Jeroen Ooms wrote:
> >>>>> On Sat, Aug 22, 2020 at 8:39 AM Tomas Kalibera
> >>>>> <tomas.kalibera at gmail.com> wrote:
> >>>>>> On 8/21/20 11:45 PM, m19tdn+9alxwj7d2bmk--- via R-devel wrote:
> >>>>>>> Ah yes, this is related. I reported v2010 below, but it looks like
> >>>>>>> I was updated to this Insider Build overnight without my knowledge,
> >>>>>>> and conflated it with the new installation R v4 this morning.
> >>>>>>>
> >>>>>>> I will continue to look into the issue with the methods Tomas
> >>>>>>> mentioned.
> >>>>>> It is interesting that a rare 5 years old problem would re-appear on
> >>>>>> current Insider builds. Which build of Windows are you running
> >>>>>> exactly?
> >>>>>> I've seen another report about a crash on 20190.1000. It'd be
> >>>>>> nice to
> >>>>>> know if it is present also in newer builds, i.e. in 20197.
> >>>>> I installed the latest 20197 build in a vm, and I can indeed
> >>>>> reproduce
> >>>>> this problem.
> >>>>>
> >>>>> What seems to be happening is that R triggers an infinite
> >>>>> recursion in
> >>>>> Windows unwinding mechanism, and eventually dies with a stack
> >>>>> overflow. Attached a backtrace of the initial 100 frames of the main
> >>>>> thread (the pattern in the top ~30 frames continues forever).
> >>>>>
> >>>>> The microsoft blog doesn't mention anything related to exception
> >>>>> handling has changed in recent versions:
> >>>>> https://docs.microsoft.com/en-us/windows-insider/at-home/active-dev-branch
> >>>>>
> >>>>>
> >>>> Thanks, unfortunately that does not ring any bells (except below), I
> >>>> can't guess from this what is the underlying cause of the problem.
> >>>> There may be something wrong in how we use setjmp/longjmp or how
> >>>> setjmp/longjmp works on Windows.
> >>>>
> >>>> It reminds me of a problem I've been debugging few days ago, when
> >>>> longjump implementation segfaults on Windows 10 (recent but not
> >>>> Insider build) probably soon after unwinding the stack, but only with
> >>>> GCC 10 / MinGW 7 and only in one of the no-segfault tests, and only
> >>>> with -03 (not -O2, not with with -O3 -fno-split-loops). The problem
> >>>> was sensitive to these optimization options interestingly on the call
> >>>> site of long jump (do_abs), even when it was not an immediate caller
> >>>> of the longjump. I've not tracked this down yet, it will require
> >>>> looking at the assembly level, and I was suspecting a compiler error
> >>>> causing the compiler to generate code that messes with the stack or
> >>>> registers in a way that impacts the upcoming jump. But now as we have
> >>>> this other problem with setjmp/logjmp, the compiler may not be the top
> >>>> suspect anymore.
> >>>>
> >>>> I may not be able to work on this in the next few days or a week, so
> >>>> if anyone gets there first, please let me know what you find out.
> >>> Btw could you please try out if the UCRT build of R crashes as well in
> >>> the Insider Windows build ?
> >> Yes, it hangs in exactly the same way, except that the backtrace shows
> >>
> >>   ucrtbase!.intrinsic_setjmpex () from C:\WINDOWS\System32\ucrtbase.dll
> >>
> >> Instead of msvcrt!_setjmpex (as expected of course).
> >
> > Thanks. I found what is causing the problem I observed with
> > GCC10/stock Windows 10, I expect this is the same one as in the
> > Insider build.
> > I will investigate further,
> >
> > Tomas
> >
> It seems the problem is between MinGW-W64 and Windows, and really it
> causes both the reported crashes in an Insider build (I tested in 20197)
> and in my GCC 10 builds in a single "no-segfault" test. setjmp is
> implemented using Windows call _setjmpex, which has a second argument
> argument, which is set differently by MinGW based on GCC version. When I
> set this argument as MinGW-W64 did on early versions of GCC,
> mingw_getsp(), it fixes/hides the problems on my systems. Perl5 uses a
> similar workaround, but otherwise there is no solid base (documentation,
> specification, etc) I am aware of for this change, so this may take some
> more time to be properly fixed. Still, if anyone experiments with this
> workaround and finds a problem, please let me know. In particular, I am
> curious whether it works on earlier versions of Windows (at least with
> check-all, including recommended packages).

FYI, the problem has disappeared on Windows dev built 20201 (released
yesterday), so it may have been a Windows bug. That is not to say
there is no bug on the R/mingw side, but at least the current and past
releases of R are working again on the latest versions of Windows,
which is a big relief.


From g@bembecker @end|ng |rom gm@||@com  Fri Aug 28 02:28:43 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 27 Aug 2020 17:28:43 -0700
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
In-Reply-To: <CAEKh8ujFBhHYVV=MK3SGQD1p4rpBdnpNpKc1g+3FWSPLoayR0w@mail.gmail.com>
References: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
 <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>
 <24382.11544.133799.767814@hornik.net>
 <CAEKh8ujFBhHYVV=MK3SGQD1p4rpBdnpNpKc1g+3FWSPLoayR0w@mail.gmail.com>
Message-ID: <CAD4oTHHBwDqL=MoSAw_HTXpNEM4YxeQPAhvaX=71vgVZdNQg3g@mail.gmail.com>

Trace adds something to the body of the function, so it does make sense
that it doesn't. Whether traced functions still technically meet the
definition of standard s3 generic or not is, I suppose, up for debate, but
I would say that they should, I think.

As before, if desired I can work on a patch for this if desired, or someone
on R-core can just take care of it if that is easier.

Best,
~G

On Thu, Aug 27, 2020 at 11:22 AM Antoine Fabri <antoine.fabri at gmail.com>
wrote:

> Should it work on traced functions ?
>
> As it is now it doesn't.
>
> Best,
>
> Antoine
>
> Le jeu. 20 ao?t 2020 ? 09:58, Kurt Hornik <Kurt.Hornik at wu.ac.at> a ?crit :
>
>> >>>>> Gabriel Becker writes:
>>
>> > I added that so I can look at the proposed fix and put it or something
>> > similar in bugzilla for review final review.
>>
>> > Apologies for the oversight.
>>
>> Fixed now with
>>
>> -    while(as.character(bdexpr[[1L]]) == "{")
>> +    while(is.call(bdexpr) && (as.character(bdexpr[[1L]]) == "{"))
>>
>> (the suggested fix does not work on things like
>> foo <- function(x) {{ x }}
>> ...)
>>
>> Best
>> -k
>>
>> > ~G
>>
>> > On Wed, Aug 19, 2020 at 3:40 PM Antoine Fabri <antoine.fabri at gmail.com>
>> > wrote:
>>
>> >> Dear R-devel,
>> >>
>> >> utils::isS3stdGeneric tries to subset the body of the function it's
>> fed,
>> >> primitives don't like that because they don't have a body, identity
>> doesn't
>> >> like it either because it's body is a symbol.
>> >>
>> >> According to the doc, any function is a legal input.
>> >>
>> >> See below:
>> >>
>> >> identity
>> >> #> function (x)
>> >> #> x
>> >> #> <bytecode: 0x0000000013d6da28>
>> >> #> <environment: namespace:base>
>> >>
>> >> max
>> >> #> function (..., na.rm = FALSE)  .Primitive("max")
>> >>
>> >> isS3stdGeneric(identity)
>> >> #> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able
>> >>
>> >> isS3stdGeneric(max)
>> >> #> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
>> >> bdexpr[[2L]]: l'argument est de longueur nulle
>> >>
>> >> Here is a simple fix :
>> >>
>> >> isS3stdGeneric <- function(f) {
>> >> {
>> >> bdexpr <- body(f)
>> >> if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
>> >> while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
>> >> ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name
>> >> ("UseMethod"))
>> >> if (ret)
>> >> names(ret) <- bdexpr[[2L]]
>> >> ret
>> >> }
>> >> }
>> >>
>> >> isS3stdGeneric(identity)
>> >> #> [1] FALSE
>> >> isS3stdGeneric(max)
>> >> #> [1] FALSE
>> >>
>> >> Best,
>> >>
>> >> Antoine
>> >>
>> >> [[alternative HTML version deleted]]
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>>
>> >       [[alternative HTML version deleted]]
>>
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Fri Aug 28 11:00:53 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jeff King)
Date: Fri, 28 Aug 2020 17:00:53 +0800
Subject: [Rd] Evaluate values in `Sys.setenv`
Message-ID: <CAGiFhPM4_vmrDuBXyfaoyves7K6-mNo7LA8WBVPo71+rBYV3Lg@mail.gmail.com>

Hi all,

I would like to know if there is any way to evaluate the values in
`Sys.setenv` before setting the environment variables. For example, if we
want to add a path to the environment variable `PATH`, we can do this in a
terminal

```
> export PATH=~/mypath:$PATH
> echo $PATH
/Users/jeff/mypath:...
```

However, this style of assignment is not allowed in  `Sys.setenv`, it
treats its argument as a literal string, so

```
> Sys.setenv(PATH= " ~/mypath:$PATH")
> Sys.getenv("PATH")
[1] " ~/mypath:$PATH "
```
Note that both the symbol `~` and the variable `$PATH` are not expanded.
While we can manually evaluate the home symbol `~`  and PATH using
`Sys.getenv`, the code seems not quite neat. I would like to suggest adding
a parameter in ` Sys.setenv` to make the function more convenient(e.g.
Sys.setenv(..., fixed = TRUE)) if no existing function in base R can do
them in one line.

Best,
Jiefei

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Fri Aug 28 14:34:10 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 28 Aug 2020 14:34:10 +0200
Subject: [Rd] Evaluate values in `Sys.setenv`
In-Reply-To: <CAGiFhPM4_vmrDuBXyfaoyves7K6-mNo7LA8WBVPo71+rBYV3Lg@mail.gmail.com>
References: <CAGiFhPM4_vmrDuBXyfaoyves7K6-mNo7LA8WBVPo71+rBYV3Lg@mail.gmail.com>
Message-ID: <88C441BE-B74E-4487-B18C-17BDA92AF917@gmail.com>

It is the shell that does the ~ and $ expansions, and Sys.setenv() doesn't go via the shell, so you cannot expect it to understand the shell metacharacters.  Instead, you need to do the corresponding computations in R, e.g.

> paste(path.expand("~/mypath"), Sys.getenv("PATH"), sep=":")
[1] "/Users/pd/mypath:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/gfortran/bin:/usr/local/clang8/bin:/Library/TeX/texbin:/opt/X11/bin"

which you can then pass to Sys.setenv().

-pd

> On 28 Aug 2020, at 11:00 , Jeff King <szwjf08 at gmail.com> wrote:
> 
> Hi all,
> 
> I would like to know if there is any way to evaluate the values in
> `Sys.setenv` before setting the environment variables. For example, if we
> want to add a path to the environment variable `PATH`, we can do this in a
> terminal
> 
> ```
>> export PATH=~/mypath:$PATH
>> echo $PATH
> /Users/jeff/mypath:...
> ```
> 
> However, this style of assignment is not allowed in  `Sys.setenv`, it
> treats its argument as a literal string, so
> 
> ```
>> Sys.setenv(PATH= " ~/mypath:$PATH")
>> Sys.getenv("PATH")
> [1] " ~/mypath:$PATH "
> ```
> Note that both the symbol `~` and the variable `$PATH` are not expanded.
> While we can manually evaluate the home symbol `~`  and PATH using
> `Sys.getenv`, the code seems not quite neat. I would like to suggest adding
> a parameter in ` Sys.setenv` to make the function more convenient(e.g.
> Sys.setenv(..., fixed = TRUE)) if no existing function in base R can do
> them in one line.
> 
> Best,
> Jiefei
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From g@bembecker @end|ng |rom gm@||@com  Sat Aug 29 22:57:36 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sat, 29 Aug 2020 13:57:36 -0700
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
In-Reply-To: <CAD4oTHHBwDqL=MoSAw_HTXpNEM4YxeQPAhvaX=71vgVZdNQg3g@mail.gmail.com>
References: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
 <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>
 <24382.11544.133799.767814@hornik.net>
 <CAEKh8ujFBhHYVV=MK3SGQD1p4rpBdnpNpKc1g+3FWSPLoayR0w@mail.gmail.com>
 <CAD4oTHHBwDqL=MoSAw_HTXpNEM4YxeQPAhvaX=71vgVZdNQg3g@mail.gmail.com>
Message-ID: <CAD4oTHHKunV_s8b8eMzBH9MnzJZS+RgbzL=Mg4JJp1aVDZ092g@mail.gmail.com>

Hi all,

I have a patch that fixes this and also fixes/improves debugcall so that it
supports pkg::fun(obj) and pkg:::fun(obj) style calls. I'm going to test it
a bit more and add a regression test for isS3stdGeneric and then I will
submit it to bugzilla tonight or tomorrow morning.

Best,
~G

On Thu, Aug 27, 2020 at 5:28 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Trace adds something to the body of the function, so it does make sense
> that it doesn't. Whether traced functions still technically meet the
> definition of standard s3 generic or not is, I suppose, up for debate, but
> I would say that they should, I think.
>
> As before, if desired I can work on a patch for this if desired, or
> someone on R-core can just take care of it if that is easier.
>
> Best,
> ~G
>
> On Thu, Aug 27, 2020 at 11:22 AM Antoine Fabri <antoine.fabri at gmail.com>
> wrote:
>
>> Should it work on traced functions ?
>>
>> As it is now it doesn't.
>>
>> Best,
>>
>> Antoine
>>
>> Le jeu. 20 ao?t 2020 ? 09:58, Kurt Hornik <Kurt.Hornik at wu.ac.at> a
>> ?crit :
>>
>>> >>>>> Gabriel Becker writes:
>>>
>>> > I added that so I can look at the proposed fix and put it or something
>>> > similar in bugzilla for review final review.
>>>
>>> > Apologies for the oversight.
>>>
>>> Fixed now with
>>>
>>> -    while(as.character(bdexpr[[1L]]) == "{")
>>> +    while(is.call(bdexpr) && (as.character(bdexpr[[1L]]) == "{"))
>>>
>>> (the suggested fix does not work on things like
>>> foo <- function(x) {{ x }}
>>> ...)
>>>
>>> Best
>>> -k
>>>
>>> > ~G
>>>
>>> > On Wed, Aug 19, 2020 at 3:40 PM Antoine Fabri <antoine.fabri at gmail.com
>>> >
>>> > wrote:
>>>
>>> >> Dear R-devel,
>>> >>
>>> >> utils::isS3stdGeneric tries to subset the body of the function it's
>>> fed,
>>> >> primitives don't like that because they don't have a body, identity
>>> doesn't
>>> >> like it either because it's body is a symbol.
>>> >>
>>> >> According to the doc, any function is a legal input.
>>> >>
>>> >> See below:
>>> >>
>>> >> identity
>>> >> #> function (x)
>>> >> #> x
>>> >> #> <bytecode: 0x0000000013d6da28>
>>> >> #> <environment: namespace:base>
>>> >>
>>> >> max
>>> >> #> function (..., na.rm = FALSE)  .Primitive("max")
>>> >>
>>> >> isS3stdGeneric(identity)
>>> >> #> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able
>>> >>
>>> >> isS3stdGeneric(max)
>>> >> #> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
>>> >> bdexpr[[2L]]: l'argument est de longueur nulle
>>> >>
>>> >> Here is a simple fix :
>>> >>
>>> >> isS3stdGeneric <- function(f) {
>>> >> {
>>> >> bdexpr <- body(f)
>>> >> if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
>>> >> while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
>>> >> ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name
>>> >> ("UseMethod"))
>>> >> if (ret)
>>> >> names(ret) <- bdexpr[[2L]]
>>> >> ret
>>> >> }
>>> >> }
>>> >>
>>> >> isS3stdGeneric(identity)
>>> >> #> [1] FALSE
>>> >> isS3stdGeneric(max)
>>> >> #> [1] FALSE
>>> >>
>>> >> Best,
>>> >>
>>> >> Antoine
>>> >>
>>> >> [[alternative HTML version deleted]]
>>> >>
>>> >> ______________________________________________
>>> >> R-devel at r-project.org mailing list
>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> >>
>>>
>>> >       [[alternative HTML version deleted]]
>>>
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Sun Aug 30 07:31:42 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jeff King)
Date: Sun, 30 Aug 2020 01:31:42 -0400
Subject: [Rd] Evaluate values in `Sys.setenv`
In-Reply-To: <88C441BE-B74E-4487-B18C-17BDA92AF917@gmail.com>
References: <CAGiFhPM4_vmrDuBXyfaoyves7K6-mNo7LA8WBVPo71+rBYV3Lg@mail.gmail.com>
 <88C441BE-B74E-4487-B18C-17BDA92AF917@gmail.com>
Message-ID: <CAGiFhPOwa=VxgTcMbtPnA1fUh8GYTSUhEVGW4MjUC_R6chT93Q@mail.gmail.com>

Thanks for your explanation. The function `path.expand` is very helpful!

Best,
Jiefei

On Fri, Aug 28, 2020 at 8:34 AM peter dalgaard <pdalgd at gmail.com> wrote:

> It is the shell that does the ~ and $ expansions, and Sys.setenv() doesn't
> go via the shell, so you cannot expect it to understand the shell
> metacharacters.  Instead, you need to do the corresponding computations in
> R, e.g.
>
> > paste(path.expand("~/mypath"), Sys.getenv("PATH"), sep=":")
> [1]
> "/Users/pd/mypath:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/gfortran/bin:/usr/local/clang8/bin:/Library/TeX/texbin:/opt/X11/bin"
>
> which you can then pass to Sys.setenv().
>
> -pd
>
> > On 28 Aug 2020, at 11:00 , Jeff King <szwjf08 at gmail.com> wrote:
> >
> > Hi all,
> >
> > I would like to know if there is any way to evaluate the values in
> > `Sys.setenv` before setting the environment variables. For example, if we
> > want to add a path to the environment variable `PATH`, we can do this in
> a
> > terminal
> >
> > ```
> >> export PATH=~/mypath:$PATH
> >> echo $PATH
> > /Users/jeff/mypath:...
> > ```
> >
> > However, this style of assignment is not allowed in  `Sys.setenv`, it
> > treats its argument as a literal string, so
> >
> > ```
> >> Sys.setenv(PATH= " ~/mypath:$PATH")
> >> Sys.getenv("PATH")
> > [1] " ~/mypath:$PATH "
> > ```
> > Note that both the symbol `~` and the variable `$PATH` are not expanded.
> > While we can manually evaluate the home symbol `~`  and PATH using
> > `Sys.getenv`, the code seems not quite neat. I would like to suggest
> adding
> > a parameter in ` Sys.setenv` to make the function more convenient(e.g.
> > Sys.setenv(..., fixed = TRUE)) if no existing function in base R can do
> > them in one line.
> >
> > Best,
> > Jiefei
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Sun Aug 30 22:27:18 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 30 Aug 2020 13:27:18 -0700
Subject: [Rd] utils::isS3stdGeneric chokes on primitives and identity
In-Reply-To: <CAD4oTHHKunV_s8b8eMzBH9MnzJZS+RgbzL=Mg4JJp1aVDZ092g@mail.gmail.com>
References: <CAEKh8uiHa2W78QVz8kEHaXz_-pZhpNODQBjFA9z4PrUiZpwATQ@mail.gmail.com>
 <CAD4oTHGcH0D0FBqaCqNUaWCgyLi+29MeHsKk_WcrpKkfqfkf+w@mail.gmail.com>
 <24382.11544.133799.767814@hornik.net>
 <CAEKh8ujFBhHYVV=MK3SGQD1p4rpBdnpNpKc1g+3FWSPLoayR0w@mail.gmail.com>
 <CAD4oTHHBwDqL=MoSAw_HTXpNEM4YxeQPAhvaX=71vgVZdNQg3g@mail.gmail.com>
 <CAD4oTHHKunV_s8b8eMzBH9MnzJZS+RgbzL=Mg4JJp1aVDZ092g@mail.gmail.com>
Message-ID: <CAD4oTHFQAt2=bCheNexdaJCY6+sqFNSLMSZLoP22q2KM4NiYgg@mail.gmail.com>

Submitted to bugzilla here:
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17901

On Sat, Aug 29, 2020 at 1:57 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi all,
>
> I have a patch that fixes this and also fixes/improves debugcall so that
> it supports pkg::fun(obj) and pkg:::fun(obj) style calls. I'm going to test
> it a bit more and add a regression test for isS3stdGeneric and then I will
> submit it to bugzilla tonight or tomorrow morning.
>
> Best,
> ~G
>
> On Thu, Aug 27, 2020 at 5:28 PM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Trace adds something to the body of the function, so it does make sense
>> that it doesn't. Whether traced functions still technically meet the
>> definition of standard s3 generic or not is, I suppose, up for debate, but
>> I would say that they should, I think.
>>
>> As before, if desired I can work on a patch for this if desired, or
>> someone on R-core can just take care of it if that is easier.
>>
>> Best,
>> ~G
>>
>> On Thu, Aug 27, 2020 at 11:22 AM Antoine Fabri <antoine.fabri at gmail.com>
>> wrote:
>>
>>> Should it work on traced functions ?
>>>
>>> As it is now it doesn't.
>>>
>>> Best,
>>>
>>> Antoine
>>>
>>> Le jeu. 20 ao?t 2020 ? 09:58, Kurt Hornik <Kurt.Hornik at wu.ac.at> a
>>> ?crit :
>>>
>>>> >>>>> Gabriel Becker writes:
>>>>
>>>> > I added that so I can look at the proposed fix and put it or something
>>>> > similar in bugzilla for review final review.
>>>>
>>>> > Apologies for the oversight.
>>>>
>>>> Fixed now with
>>>>
>>>> -    while(as.character(bdexpr[[1L]]) == "{")
>>>> +    while(is.call(bdexpr) && (as.character(bdexpr[[1L]]) == "{"))
>>>>
>>>> (the suggested fix does not work on things like
>>>> foo <- function(x) {{ x }}
>>>> ...)
>>>>
>>>> Best
>>>> -k
>>>>
>>>> > ~G
>>>>
>>>> > On Wed, Aug 19, 2020 at 3:40 PM Antoine Fabri <
>>>> antoine.fabri at gmail.com>
>>>> > wrote:
>>>>
>>>> >> Dear R-devel,
>>>> >>
>>>> >> utils::isS3stdGeneric tries to subset the body of the function it's
>>>> fed,
>>>> >> primitives don't like that because they don't have a body, identity
>>>> doesn't
>>>> >> like it either because it's body is a symbol.
>>>> >>
>>>> >> According to the doc, any function is a legal input.
>>>> >>
>>>> >> See below:
>>>> >>
>>>> >> identity
>>>> >> #> function (x)
>>>> >> #> x
>>>> >> #> <bytecode: 0x0000000013d6da28>
>>>> >> #> <environment: namespace:base>
>>>> >>
>>>> >> max
>>>> >> #> function (..., na.rm = FALSE)  .Primitive("max")
>>>> >>
>>>> >> isS3stdGeneric(identity)
>>>> >> #> Error in bdexpr[[1L]]: objet de type 'symbol' non indi?able
>>>> >>
>>>> >> isS3stdGeneric(max)
>>>> >> #> Error in while (as.character(bdexpr[[1L]]) == "{") bdexpr <-
>>>> >> bdexpr[[2L]]: l'argument est de longueur nulle
>>>> >>
>>>> >> Here is a simple fix :
>>>> >>
>>>> >> isS3stdGeneric <- function(f) {
>>>> >> {
>>>> >> bdexpr <- body(f)
>>>> >> if(is.null(bdexpr) || !is.call(bdexpr)) return(FALSE)
>>>> >> while (as.character(bdexpr[[1L]]) == "{") bdexpr <- bdexpr[[2L]]
>>>> >> ret <- is.call(bdexpr) && identical(bdexpr[[1L]], as.name
>>>> >> ("UseMethod"))
>>>> >> if (ret)
>>>> >> names(ret) <- bdexpr[[2L]]
>>>> >> ret
>>>> >> }
>>>> >> }
>>>> >>
>>>> >> isS3stdGeneric(identity)
>>>> >> #> [1] FALSE
>>>> >> isS3stdGeneric(max)
>>>> >> #> [1] FALSE
>>>> >>
>>>> >> Best,
>>>> >>
>>>> >> Antoine
>>>> >>
>>>> >> [[alternative HTML version deleted]]
>>>> >>
>>>> >> ______________________________________________
>>>> >> R-devel at r-project.org mailing list
>>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> >>
>>>>
>>>> >       [[alternative HTML version deleted]]
>>>>
>>>> > ______________________________________________
>>>> > R-devel at r-project.org mailing list
>>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>

	[[alternative HTML version deleted]]


From m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@||  Mon Aug 31 08:23:59 2020
From: m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@|| (Korpela Mikko (MML))
Date: Mon, 31 Aug 2020 06:23:59 +0000
Subject: [Rd] make check fails due to NA / NaN mismatch
Message-ID: <3b29a167ce2b47d081231fc2d7a51021@C119S212VM016.msvyvi.vaha.local>

It seems there is a problem in tests/d-p-q-r-tst-2.R (R-devel r79091): NA / NaN mismatch is not allowed by a test on lines 590--592, but the comment suggests otherwise. A run of "make check" fails there when tested on a Raspberry Pi with Raspberry Pi OS (based on Debian Buster): all 'NaN' is expected, but all 'NA' is returned when testing the function 'rf()' with 'ia == 1'.

Best regards,
Mikko Korpela
Maanmittauslaitos | National Land Survey of Finland
Opastinsilta 12 C, 00520 Helsinki, Finland


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Aug 31 09:44:17 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 31 Aug 2020 09:44:17 +0200
Subject: [Rd] make check fails due to NA / NaN mismatch
In-Reply-To: <3b29a167ce2b47d081231fc2d7a51021@C119S212VM016.msvyvi.vaha.local>
References: <3b29a167ce2b47d081231fc2d7a51021@C119S212VM016.msvyvi.vaha.local>
Message-ID: <24396.43601.754356.738820@stat.math.ethz.ch>

>>>>> Korpela Mikko (MML) 
>>>>>     on Mon, 31 Aug 2020 06:23:59 +0000 writes:

    > It seems there is a problem in tests/d-p-q-r-tst-2.R (R-devel r79091): NA / NaN mismatch is not allowed by a test on lines 590--592, but the comment suggests otherwise. A run of "make check" fails there when tested on a Raspberry Pi with Raspberry Pi OS (based on Debian Buster): all 'NaN' is expected, but all 'NA' is returned when testing the function 'rf()' with 'ia == 1'.

Thank you, Mikko.

Note that I've recently split off the  tests/d-p-q-r-tst-2.R  file
from from the previously  longer       tests/d-p-q-r-tests.R  file,
mostly in order to drop the 'R CMD Rdiff .. *.Rout.save' testing
from those parts.

However the *test* you mention has been in R's tests (in the
tests//d-p-q-r-tests.R file)  for a very long time,  AFAICS.

So, I am a bit puzzled:  What you write seems to indicate that
this is a new failure, but that is just one "between the lines"
interpretation, so let me ask to clarify:

Is it the first time you're running 'make check' on that
platform and get that error?
or is it a platform you've been running 'make check' on R-devel
for a while and only now you "suddenly" get that error?

Best,
Martin

    > Best regards,
    > Mikko Korpela
    > Maanmittauslaitos | National Land Survey of Finland
    > Opastinsilta 12 C, 00520 Helsinki, Finland


From m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@||  Mon Aug 31 10:46:55 2020
From: m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@|| (Korpela Mikko (MML))
Date: Mon, 31 Aug 2020 08:46:55 +0000
Subject: [Rd] make check fails due to NA / NaN mismatch
Message-ID: <11d9f1544eeb4edea5dd2d97a43e05eb@C119S212VM016.msvyvi.vaha.local>

Thank you for the introduction to these recent changes, Martin.

I think this was the second time I ran "make check" on that platform (Raspberry Pi 32-bit), and the first time (some months ago) it worked fine. So, that makes it kind of "suddenly", although I must say that my use of "make check" is very irregular.

I compared code before and after the split you are referring to. The test in question changed in the process:

This is a snippet of "tests/d-p-q-r-tests.R" (lines 1030--1034) at revision 79079, just before the split:

if(!inherits(R$warning, "simpleWarning")) cat(" .. did *NOT* give a warning! ")
if(!(identical(R$value, expected))) { ## allow NA/NaN mismatch in these cases for now:
    if(!(dist %in% c("beta","f","t") && all(is.na(R$value))))
        cat(" .. not giving expected NA/NaN's ")
}

The corresponding piece of code in "tests/d-p-q-r-tst-2.R" (lines 588--591) after the split, at revision 79080, is:

if(!inherits(R$warning, "simpleWarning")) stop(" .. did *NOT* give a warning! ")
if(!(identical(R$value, expected))) { ## allow NA/NaN mismatch in these cases for now:
    stop(" .. not giving expected NA/NaN's ")
}

where the test is less forgiving, both with respect to the conditions and the type of "nag" (cat vs stop).

- Mikko

-----Alkuper?inen viesti-----
L?hett?j?: Martin Maechler <maechler at stat.math.ethz.ch> 
L?hetetty: maanantai 31. elokuuta 2020 10.44
Vastaanottaja: Korpela Mikko (MML) <mikko.korpela at maanmittauslaitos.fi>
Kopio: r-devel <r-devel at r-project.org>
Aihe: Re: [Rd] make check fails due to NA / NaN mismatch

>>>>> Korpela Mikko (MML) 
>>>>>     on Mon, 31 Aug 2020 06:23:59 +0000 writes:

    > It seems there is a problem in tests/d-p-q-r-tst-2.R (R-devel r79091): NA / NaN mismatch is not allowed by a test on lines 590--592, but the comment suggests otherwise. A run of "make check" fails there when tested on a Raspberry Pi with Raspberry Pi OS (based on Debian Buster): all 'NaN' is expected, but all 'NA' is returned when testing the function 'rf()' with 'ia == 1'.

Thank you, Mikko.

Note that I've recently split off the  tests/d-p-q-r-tst-2.R  file
from from the previously  longer       tests/d-p-q-r-tests.R  file,
mostly in order to drop the 'R CMD Rdiff .. *.Rout.save' testing from those parts.

However the *test* you mention has been in R's tests (in the tests//d-p-q-r-tests.R file)  for a very long time,  AFAICS.

So, I am a bit puzzled:  What you write seems to indicate that this is a new failure, but that is just one "between the lines"
interpretation, so let me ask to clarify:

Is it the first time you're running 'make check' on that platform and get that error?
or is it a platform you've been running 'make check' on R-devel for a while and only now you "suddenly" get that error?

Best,
Martin

    > Best regards,
    > Mikko Korpela
    > Maanmittauslaitos | National Land Survey of Finland
    > Opastinsilta 12 C, 00520 Helsinki, Finland


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Aug 31 12:23:19 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 31 Aug 2020 12:23:19 +0200
Subject: [Rd] make check fails due to NA / NaN mismatch
In-Reply-To: <11d9f1544eeb4edea5dd2d97a43e05eb@C119S212VM016.msvyvi.vaha.local>
References: <11d9f1544eeb4edea5dd2d97a43e05eb@C119S212VM016.msvyvi.vaha.local>
Message-ID: <24396.53143.327890.202653@stat.math.ethz.ch>

>>>>> Korpela Mikko (MML) 
>>>>>     on Mon, 31 Aug 2020 08:46:55 +0000 writes:

    > Thank you for the introduction to these recent changes, Martin.
    > I think this was the second time I ran "make check" on that platform (Raspberry Pi 32-bit), and the first time (some months ago) it worked fine. So, that makes it kind of "suddenly", although I must say that my use of "make check" is very irregular.

    > I compared code before and after the split you are referring to. The test in question changed in the process:

    > This is a snippet of "tests/d-p-q-r-tests.R" (lines 1030--1034) at revision 79079, just before the split:

    > if(!inherits(R$warning, "simpleWarning")) cat(" .. did *NOT* give a warning! ")
    > if(!(identical(R$value, expected))) { ## allow NA/NaN mismatch in these cases for now:

> if(!(dist %in% c("beta","f","t") && all(is.na(R$value))))
    > cat(" .. not giving expected NA/NaN's ")
    > }

    > The corresponding piece of code in "tests/d-p-q-r-tst-2.R" (lines 588--591) after the split, at revision 79080, is:

    > if(!inherits(R$warning, "simpleWarning")) stop(" .. did *NOT* give a warning! ")
    > if(!(identical(R$value, expected))) { ## allow NA/NaN mismatch in these cases for now:
    > stop(" .. not giving expected NA/NaN's ")
    > }

    > where the test is less forgiving, both with respect to the conditions and the type of "nag" (cat vs stop).

aahh..   thank you!

The cat() to  stop() change was very much on purpose
{for the old test files, all output differences eventually
 turned to test errors via "make" and 'R CMD Rdiff',  whereas
 now the R code itself should error in those cases }

but "of course" it was a lapsus of mine to have dropped the

    if(! (dist %in% ...  && all(....)) )

line accidentally.....  no re-added in svn c79092.

Martin


